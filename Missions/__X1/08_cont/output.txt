// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 18638 0 0
// PrepareRussian ;
  12: CALL 1919 0 0
// PrepareArabian ;
  16: CALL 370 0 0
// Action ;
  20: CALL 3533 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// enable ( entranceEvent ) ;
 359: LD_INT 1
 361: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 362: LD_INT 2
 364: DISABLE_MARKED
// end ; end_of_file
 365: LD_VAR 0 1
 369: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 370: LD_INT 0
 372: PPUSH
 373: PPUSH
// uc_side := 4 ;
 374: LD_ADDR_OWVAR 20
 378: PUSH
 379: LD_INT 4
 381: ST_TO_ADDR
// uc_nation := 1 ;
 382: LD_ADDR_OWVAR 21
 386: PUSH
 387: LD_INT 1
 389: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 390: LD_ADDR_EXP 50
 394: PUSH
 395: LD_STRING 07_Americans
 397: PPUSH
 398: CALL_OW 31
 402: ST_TO_ADDR
// if americanSquad < 5 then
 403: LD_EXP 50
 407: PUSH
 408: LD_INT 5
 410: LESS
 411: IFFALSE 505
// begin if not americanSquad then
 413: LD_EXP 50
 417: NOT
 418: IFFALSE 427
// americanSquad := [ ] ;
 420: LD_ADDR_EXP 50
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 427: LD_ADDR_VAR 0 2
 431: PUSH
 432: DOUBLE
 433: LD_EXP 50
 437: DEC
 438: ST_TO_ADDR
 439: LD_INT 2
 441: PUSH
 442: LD_INT 3
 444: PUSH
 445: LD_INT 4
 447: PUSH
 448: LD_INT 4
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: PUSH
 463: FOR_TO
 464: IFFALSE 501
// begin PrepareHuman ( false , 2 , 6 ) ;
 466: LD_INT 0
 468: PPUSH
 469: LD_INT 2
 471: PPUSH
 472: LD_INT 6
 474: PPUSH
 475: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 479: LD_ADDR_EXP 50
 483: PUSH
 484: LD_EXP 50
 488: PPUSH
 489: CALL_OW 44
 493: PPUSH
 494: CALL 64014 0 2
 498: ST_TO_ADDR
// end ;
 499: GO 463
 501: POP
 502: POP
// end else
 503: GO 552
// for i := Count ( americanSquad ) downto 5 do
 505: LD_ADDR_VAR 0 2
 509: PUSH
 510: DOUBLE
 511: LD_EXP 50
 515: PPUSH
 516: CALL 28667 0 1
 520: INC
 521: ST_TO_ADDR
 522: LD_INT 5
 524: PUSH
 525: FOR_DOWNTO
 526: IFFALSE 550
// americanSquad := Delete ( americanSquad , i ) ;
 528: LD_ADDR_EXP 50
 532: PUSH
 533: LD_EXP 50
 537: PPUSH
 538: LD_VAR 0 2
 542: PPUSH
 543: CALL_OW 3
 547: ST_TO_ADDR
 548: GO 525
 550: POP
 551: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 552: LD_ADDR_EXP 52
 556: PUSH
 557: LD_STRING UsCommander
 559: PPUSH
 560: LD_EXP 1
 564: NOT
 565: PPUSH
 566: LD_STRING 07_
 568: PPUSH
 569: CALL 26565 0 3
 573: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 574: LD_INT 1
 576: PPUSH
 577: LD_INT 6
 579: PPUSH
 580: CALL_OW 381
// Jerry := CreateHuman ;
 584: LD_ADDR_EXP 53
 588: PUSH
 589: CALL_OW 44
 593: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 594: LD_EXP 53
 598: PPUSH
 599: LD_INT 33
 601: PPUSH
 602: CALL_OW 336
// if not Doug then
 606: LD_EXP 52
 610: NOT
 611: IFFALSE 633
// begin PrepareSoldier ( sex_male , 6 ) ;
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 6
 618: PPUSH
 619: CALL_OW 381
// Doug := CreateHuman ;
 623: LD_ADDR_EXP 52
 627: PUSH
 628: CALL_OW 44
 632: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 633: LD_EXP 52
 637: PPUSH
 638: LD_INT 33
 640: PPUSH
 641: CALL_OW 336
// if true or johnnySaved or debug then
 645: LD_INT 1
 647: PUSH
 648: LD_EXP 3
 652: OR
 653: PUSH
 654: LD_EXP 1
 658: OR
 659: IFFALSE 686
// begin Harris := NewCharacter ( Harris ) ;
 661: LD_ADDR_EXP 51
 665: PUSH
 666: LD_STRING Harris
 668: PPUSH
 669: CALL_OW 25
 673: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 674: LD_EXP 51
 678: PPUSH
 679: LD_INT 33
 681: PPUSH
 682: CALL_OW 336
// end ; uc_side := 2 ;
 686: LD_ADDR_OWVAR 20
 690: PUSH
 691: LD_INT 2
 693: ST_TO_ADDR
// uc_nation := 2 ;
 694: LD_ADDR_OWVAR 21
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 702: LD_ADDR_EXP 38
 706: PUSH
 707: LD_STRING Heike
 709: PPUSH
 710: LD_EXP 1
 714: NOT
 715: PPUSH
 716: LD_EXP 2
 720: PPUSH
 721: CALL 26565 0 3
 725: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 726: LD_ADDR_EXP 41
 730: PUSH
 731: LD_STRING Ibrahim
 733: PPUSH
 734: LD_EXP 1
 738: NOT
 739: PPUSH
 740: LD_EXP 2
 744: PPUSH
 745: CALL 26565 0 3
 749: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 750: LD_ADDR_EXP 39
 754: PUSH
 755: LD_STRING Givi
 757: PPUSH
 758: LD_EXP 1
 762: NOT
 763: PPUSH
 764: LD_EXP 2
 768: PPUSH
 769: CALL 26565 0 3
 773: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 774: LD_ADDR_EXP 42
 778: PUSH
 779: LD_STRING Kamil
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 2
 792: PPUSH
 793: CALL 26565 0 3
 797: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 798: LD_ADDR_EXP 43
 802: PUSH
 803: LD_STRING Kaia
 805: PPUSH
 806: LD_EXP 1
 810: NOT
 811: PPUSH
 812: LD_EXP 2
 816: PPUSH
 817: CALL 26565 0 3
 821: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 822: LD_ADDR_EXP 44
 826: PUSH
 827: LD_STRING Sophia
 829: PPUSH
 830: LD_EXP 1
 834: NOT
 835: PPUSH
 836: LD_EXP 2
 840: PPUSH
 841: CALL 26565 0 3
 845: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 846: LD_ADDR_EXP 45
 850: PUSH
 851: LD_STRING Markov
 853: PPUSH
 854: LD_EXP 1
 858: NOT
 859: PPUSH
 860: LD_EXP 2
 864: PPUSH
 865: CALL 26565 0 3
 869: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 870: LD_ADDR_EXP 48
 874: PUSH
 875: LD_STRING Aviradze
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: LD_EXP 2
 888: PPUSH
 889: CALL 26565 0 3
 893: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 894: LD_ADDR_EXP 47
 898: PUSH
 899: LD_STRING Kurt
 901: PPUSH
 902: LD_EXP 1
 906: NOT
 907: PPUSH
 908: LD_EXP 2
 912: PPUSH
 913: CALL 26565 0 3
 917: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 918: LD_ADDR_EXP 40
 922: PUSH
 923: LD_STRING Mike
 925: PPUSH
 926: LD_EXP 1
 930: NOT
 931: PPUSH
 932: LD_EXP 2
 936: PPUSH
 937: CALL 26565 0 3
 941: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 942: LD_ADDR_EXP 46
 946: PUSH
 947: LD_STRING Olaf
 949: PPUSH
 950: CALL_OW 25
 954: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 955: LD_ADDR_EXP 49
 959: PUSH
 960: LD_STRING 07_others
 962: PPUSH
 963: CALL_OW 31
 967: ST_TO_ADDR
// end ;
 968: LD_VAR 0 1
 972: RET
// export function PrepareGame ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 977: LD_EXP 38
 981: PPUSH
 982: LD_INT 23
 984: PPUSH
 985: CALL_OW 52
// if Givi then
 989: LD_EXP 39
 993: IFFALSE 1031
// begin SetSide ( Givi , 5 ) ;
 995: LD_EXP 39
 999: PPUSH
1000: LD_INT 5
1002: PPUSH
1003: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1007: LD_EXP 39
1011: PPUSH
1012: LD_INT 9
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL_OW 49
// ComHold ( Givi ) ;
1022: LD_EXP 39
1026: PPUSH
1027: CALL_OW 140
// end ; if Markov then
1031: LD_EXP 45
1035: IFFALSE 1073
// begin SetSide ( Markov , 5 ) ;
1037: LD_EXP 45
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1049: LD_EXP 45
1053: PPUSH
1054: LD_INT 3
1056: PPUSH
1057: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1061: LD_EXP 45
1065: PPUSH
1066: LD_INT 61
1068: PPUSH
1069: CALL_OW 52
// end ; if Mike then
1073: LD_EXP 40
1077: IFFALSE 1115
// begin SetSide ( Mike , 5 ) ;
1079: LD_EXP 40
1083: PPUSH
1084: LD_INT 5
1086: PPUSH
1087: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1091: LD_EXP 40
1095: PPUSH
1096: LD_INT 17
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL_OW 49
// ComHold ( Mike ) ;
1106: LD_EXP 40
1110: PPUSH
1111: CALL_OW 140
// end ; if Olaf then
1115: LD_EXP 46
1119: IFFALSE 1160
// begin SetSide ( Olaf , 5 ) ;
1121: LD_EXP 46
1125: PPUSH
1126: LD_INT 5
1128: PPUSH
1129: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1133: LD_EXP 46
1137: PPUSH
1138: LD_INT 16
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1148: LD_EXP 46
1152: PPUSH
1153: LD_INT 3
1155: PPUSH
1156: CALL 67166 0 2
// end ; if Kamil then
1160: LD_EXP 42
1164: IFFALSE 1190
// begin SetSide ( Kamil , 5 ) ;
1166: LD_EXP 42
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1178: LD_EXP 42
1182: PPUSH
1183: LD_INT 109
1185: PPUSH
1186: CALL_OW 52
// end ; if Kurt then
1190: LD_EXP 47
1194: IFFALSE 1220
// begin SetSide ( Kurt , 5 ) ;
1196: LD_EXP 47
1200: PPUSH
1201: LD_INT 5
1203: PPUSH
1204: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1208: LD_EXP 47
1212: PPUSH
1213: LD_INT 169
1215: PPUSH
1216: CALL_OW 52
// end ; if Kaia then
1220: LD_EXP 43
1224: IFFALSE 1250
// begin SetSide ( Kaia , 5 ) ;
1226: LD_EXP 43
1230: PPUSH
1231: LD_INT 5
1233: PPUSH
1234: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1238: LD_EXP 43
1242: PPUSH
1243: LD_INT 147
1245: PPUSH
1246: CALL_OW 52
// end ; if Sophia then
1250: LD_EXP 44
1254: IFFALSE 1295
// begin SetSide ( Sophia , 5 ) ;
1256: LD_EXP 44
1260: PPUSH
1261: LD_INT 5
1263: PPUSH
1264: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1268: LD_EXP 44
1272: PPUSH
1273: LD_INT 142
1275: PPUSH
1276: LD_INT 96
1278: PPUSH
1279: LD_INT 0
1281: PPUSH
1282: CALL_OW 48
// ComHold ( Sophia ) ;
1286: LD_EXP 44
1290: PPUSH
1291: CALL_OW 140
// end ; if Harris then
1295: LD_EXP 51
1299: IFFALSE 1337
// begin SetSide ( Harris , 4 ) ;
1301: LD_EXP 51
1305: PPUSH
1306: LD_INT 4
1308: PPUSH
1309: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1313: LD_EXP 51
1317: PPUSH
1318: LD_INT 20
1320: PPUSH
1321: LD_INT 0
1323: PPUSH
1324: CALL_OW 49
// ComHold ( i ) ;
1328: LD_VAR 0 2
1332: PPUSH
1333: CALL_OW 140
// end ; if Doug then
1337: LD_EXP 52
1341: IFFALSE 1367
// begin SetSide ( Doug , 4 ) ;
1343: LD_EXP 52
1347: PPUSH
1348: LD_INT 4
1350: PPUSH
1351: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1355: LD_EXP 52
1359: PPUSH
1360: LD_INT 106
1362: PPUSH
1363: CALL_OW 52
// end ; if Aviradze then
1367: LD_EXP 48
1371: IFFALSE 1397
// begin SetSide ( Aviradze , 5 ) ;
1373: LD_EXP 48
1377: PPUSH
1378: LD_INT 5
1380: PPUSH
1381: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1385: LD_EXP 48
1389: PPUSH
1390: LD_INT 119
1392: PPUSH
1393: CALL_OW 52
// end ; if Ibrahim then
1397: LD_EXP 41
1401: IFFALSE 1427
// begin SetSide ( Ibrahim , 5 ) ;
1403: LD_EXP 41
1407: PPUSH
1408: LD_INT 5
1410: PPUSH
1411: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1415: LD_EXP 41
1419: PPUSH
1420: LD_INT 119
1422: PPUSH
1423: CALL_OW 52
// end ; if Jerry then
1427: LD_EXP 53
1431: IFFALSE 1472
// begin SetSide ( Jerry , 4 ) ;
1433: LD_EXP 53
1437: PPUSH
1438: LD_INT 4
1440: PPUSH
1441: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1445: LD_EXP 53
1449: PPUSH
1450: LD_INT 119
1452: PPUSH
1453: LD_INT 59
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 48
// ComHold ( Jerry ) ;
1463: LD_EXP 53
1467: PPUSH
1468: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1472: LD_EXP 57
1476: PPUSH
1477: LD_INT 119
1479: PPUSH
1480: CALL_OW 52
// for i in americanSquad do
1484: LD_ADDR_VAR 0 2
1488: PUSH
1489: LD_EXP 50
1493: PUSH
1494: FOR_IN
1495: IFFALSE 1523
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1497: LD_VAR 0 2
1501: PPUSH
1502: LD_INT 21
1504: PPUSH
1505: LD_INT 0
1507: PPUSH
1508: CALL_OW 49
// ComHold ( i ) ;
1512: LD_VAR 0 2
1516: PPUSH
1517: CALL_OW 140
// end ;
1521: GO 1494
1523: POP
1524: POP
// for i in heikeSecondSquad do
1525: LD_ADDR_VAR 0 2
1529: PUSH
1530: LD_EXP 49
1534: PUSH
1535: FOR_IN
1536: IFFALSE 1576
// begin SetSide ( i , 5 ) ;
1538: LD_VAR 0 2
1542: PPUSH
1543: LD_INT 5
1545: PPUSH
1546: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: LD_INT 22
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL_OW 49
// ComHold ( i ) ;
1565: LD_VAR 0 2
1569: PPUSH
1570: CALL_OW 140
// end ;
1574: GO 1535
1576: POP
1577: POP
// if not hasVodka then
1578: LD_EXP 4
1582: NOT
1583: IFFALSE 1642
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1585: LD_ADDR_VAR 0 2
1589: PUSH
1590: LD_INT 2
1592: PUSH
1593: LD_INT 22
1595: PUSH
1596: LD_INT 2
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 22
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: LIST
1617: PPUSH
1618: CALL_OW 69
1622: PUSH
1623: FOR_IN
1624: IFFALSE 1640
// SetLives ( i , 500 ) ;
1626: LD_VAR 0 2
1630: PPUSH
1631: LD_INT 500
1633: PPUSH
1634: CALL_OW 234
1638: GO 1623
1640: POP
1641: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1642: LD_ADDR_VAR 0 2
1646: PUSH
1647: LD_INT 22
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 69
1661: PUSH
1662: FOR_IN
1663: IFFALSE 1679
// SetLives ( i , 500 ) ;
1665: LD_VAR 0 2
1669: PPUSH
1670: LD_INT 500
1672: PPUSH
1673: CALL_OW 234
1677: GO 1662
1679: POP
1680: POP
// end ;
1681: LD_VAR 0 1
1685: RET
// export function SetClassKaiaRevolver ; begin
1686: LD_INT 0
1688: PPUSH
// if IsOk ( Kaia ) then
1689: LD_EXP 43
1693: PPUSH
1694: CALL_OW 302
1698: IFFALSE 1712
// SetClass ( Kaia , class_revolver ) ;
1700: LD_EXP 43
1704: PPUSH
1705: LD_INT 34
1707: PPUSH
1708: CALL_OW 336
// end ;
1712: LD_VAR 0 1
1716: RET
// export function SpawnHeikeAsRussian ; begin
1717: LD_INT 0
1719: PPUSH
// RemoveUnit ( Heike ) ;
1720: LD_EXP 38
1724: PPUSH
1725: CALL_OW 64
// heikeTmp := Heike ;
1729: LD_ADDR_EXP 54
1733: PUSH
1734: LD_EXP 38
1738: ST_TO_ADDR
// uc_side := 2 ;
1739: LD_ADDR_OWVAR 20
1743: PUSH
1744: LD_INT 2
1746: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1747: LD_ADDR_EXP 38
1751: PUSH
1752: LD_STRING HeikeRu
1754: PPUSH
1755: CALL_OW 25
1759: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1760: LD_EXP 54
1764: PPUSH
1765: LD_EXP 38
1769: PPUSH
1770: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1774: LD_EXP 38
1778: PPUSH
1779: LD_INT 165
1781: PPUSH
1782: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1786: LD_EXP 38
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: CALL_OW 336
// heikeAsRussian := true ;
1798: LD_ADDR_EXP 27
1802: PUSH
1803: LD_INT 1
1805: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1806: LD_STRING M1-laundry-out
1808: PPUSH
1809: CALL_OW 604
// end ;
1813: LD_VAR 0 1
1817: RET
// export function SpawnGiviAsRussian ; begin
1818: LD_INT 0
1820: PPUSH
// RemoveUnit ( Givi ) ;
1821: LD_EXP 39
1825: PPUSH
1826: CALL_OW 64
// giviTmp := Givi ;
1830: LD_ADDR_EXP 55
1834: PUSH
1835: LD_EXP 39
1839: ST_TO_ADDR
// uc_side := 2 ;
1840: LD_ADDR_OWVAR 20
1844: PUSH
1845: LD_INT 2
1847: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1848: LD_ADDR_EXP 39
1852: PUSH
1853: LD_STRING GiviRu
1855: PPUSH
1856: CALL_OW 25
1860: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1861: LD_EXP 55
1865: PPUSH
1866: LD_EXP 39
1870: PPUSH
1871: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1875: LD_EXP 39
1879: PPUSH
1880: LD_INT 165
1882: PPUSH
1883: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1887: LD_EXP 39
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL_OW 336
// giviAsRussian := true ;
1899: LD_ADDR_EXP 28
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1907: LD_STRING M1-laundry-out
1909: PPUSH
1910: CALL_OW 604
// end ; end_of_file
1914: LD_VAR 0 1
1918: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , tmp ; begin
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
1923: PPUSH
1924: PPUSH
// uc_side := 3 ;
1925: LD_ADDR_OWVAR 20
1929: PUSH
1930: LD_INT 3
1932: ST_TO_ADDR
// uc_nation := 3 ;
1933: LD_ADDR_OWVAR 21
1937: PUSH
1938: LD_INT 3
1940: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
1941: LD_INT 192
1943: PPUSH
1944: LD_STRING kitchen
1946: PPUSH
1947: CALL_OW 500
// SetBName ( laundry , laundry ) ;
1951: LD_INT 165
1953: PPUSH
1954: LD_STRING laundry
1956: PPUSH
1957: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
1961: LD_INT 54
1963: PPUSH
1964: LD_STRING adminSection
1966: PPUSH
1967: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1971: LD_ADDR_VAR 0 2
1975: PUSH
1976: LD_INT 21
1978: PUSH
1979: LD_INT 3
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PPUSH
1986: CALL_OW 69
1990: PUSH
1991: FOR_IN
1992: IFFALSE 2008
// SetBLevel ( i , 7 ) ;
1994: LD_VAR 0 2
1998: PPUSH
1999: LD_INT 7
2001: PPUSH
2002: CALL_OW 241
2006: GO 1991
2008: POP
2009: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_INT 22
2017: PUSH
2018: LD_INT 3
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 2
2027: PUSH
2028: LD_INT 30
2030: PUSH
2031: LD_INT 0
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 30
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PPUSH
2057: CALL_OW 69
2061: PUSH
2062: FOR_IN
2063: IFFALSE 2127
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: CALL_OW 274
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_INT 1000
2080: PPUSH
2081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2085: LD_VAR 0 2
2089: PPUSH
2090: CALL_OW 274
2094: PPUSH
2095: LD_INT 2
2097: PPUSH
2098: LD_INT 1000
2100: PPUSH
2101: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: CALL_OW 274
2114: PPUSH
2115: LD_INT 3
2117: PPUSH
2118: LD_INT 100
2120: PPUSH
2121: CALL_OW 277
// end ;
2125: GO 2062
2127: POP
2128: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2129: LD_ADDR_VAR 0 2
2133: PUSH
2134: LD_INT 22
2136: PUSH
2137: LD_INT 3
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 30
2146: PUSH
2147: LD_INT 32
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PPUSH
2158: CALL_OW 69
2162: PUSH
2163: FOR_IN
2164: IFFALSE 2198
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_OWVAR 67
2176: PLUS
2177: PPUSH
2178: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2182: CALL_OW 44
2186: PPUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: CALL_OW 52
// end ;
2196: GO 2163
2198: POP
2199: POP
// for i := 1 to 2 do
2200: LD_ADDR_VAR 0 2
2204: PUSH
2205: DOUBLE
2206: LD_INT 1
2208: DEC
2209: ST_TO_ADDR
2210: LD_INT 2
2212: PUSH
2213: FOR_TO
2214: IFFALSE 2266
// begin PrepareMechanic ( false , 8 ) ;
2216: LD_INT 0
2218: PPUSH
2219: LD_INT 8
2221: PPUSH
2222: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2226: LD_ADDR_EXP 59
2230: PUSH
2231: LD_EXP 59
2235: PPUSH
2236: CALL_OW 44
2240: PPUSH
2241: CALL 64014 0 2
2245: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2246: LD_EXP 59
2250: PUSH
2251: LD_EXP 59
2255: ARRAY
2256: PPUSH
2257: LD_INT 61
2259: PPUSH
2260: CALL_OW 52
// end ;
2264: GO 2213
2266: POP
2267: POP
// PrepareMechanic ( sex_male , 8 ) ;
2268: LD_INT 1
2270: PPUSH
2271: LD_INT 8
2273: PPUSH
2274: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2278: LD_ADDR_EXP 60
2282: PUSH
2283: LD_EXP 60
2287: PPUSH
2288: CALL_OW 44
2292: PPUSH
2293: CALL 64014 0 2
2297: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2298: LD_EXP 60
2302: PUSH
2303: LD_EXP 60
2307: ARRAY
2308: PPUSH
2309: LD_INT 196
2311: PPUSH
2312: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2316: LD_INT 1
2318: PPUSH
2319: LD_INT 8
2321: PPUSH
2322: CALL_OW 383
// hc_name := Stiepan Simonov ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Stiepan Simonov
2333: ST_TO_ADDR
// Stiopa := CreateHuman ;
2334: LD_ADDR_EXP 61
2338: PUSH
2339: CALL_OW 44
2343: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2344: LD_INT 2
2346: PPUSH
2347: LD_INT 8
2349: PPUSH
2350: CALL_OW 383
// hc_name := Laura Dragunov ;
2354: LD_ADDR_OWVAR 26
2358: PUSH
2359: LD_STRING Laura Dragunov
2361: ST_TO_ADDR
// Laura := CreateHuman ;
2362: LD_ADDR_EXP 62
2366: PUSH
2367: CALL_OW 44
2371: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2372: LD_EXP 62
2376: PPUSH
2377: LD_INT 196
2379: PPUSH
2380: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 8
2389: PPUSH
2390: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2394: LD_ADDR_EXP 59
2398: PUSH
2399: LD_EXP 59
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: CALL_OW 44
2411: PPUSH
2412: CALL_OW 2
2416: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2417: LD_EXP 59
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_INT 61
2428: PPUSH
2429: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2433: LD_INT 1
2435: PPUSH
2436: LD_INT 8
2438: PPUSH
2439: CALL_OW 381
// hc_name := Pavel Muchin ;
2443: LD_ADDR_OWVAR 26
2447: PUSH
2448: LD_STRING Pavel Muchin
2450: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2451: LD_ADDR_OWVAR 29
2455: PUSH
2456: LD_INT 13
2458: PUSH
2459: LD_INT 13
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2466: LD_ADDR_EXP 58
2470: PUSH
2471: CALL_OW 44
2475: ST_TO_ADDR
// InitHC_All ( ) ;
2476: CALL_OW 584
// uc_side := 6 ;
2480: LD_ADDR_OWVAR 20
2484: PUSH
2485: LD_INT 6
2487: ST_TO_ADDR
// uc_nation := 3 ;
2488: LD_ADDR_OWVAR 21
2492: PUSH
2493: LD_INT 3
2495: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2496: LD_ADDR_VAR 0 4
2500: PUSH
2501: LD_INT 14
2503: PUSH
2504: LD_INT 15
2506: PUSH
2507: LD_INT 48
2509: PUSH
2510: LD_INT 24
2512: PUSH
2513: LD_INT 149
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: ST_TO_ADDR
// for i in tmp do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: LD_VAR 0 4
2532: PUSH
2533: FOR_IN
2534: IFFALSE 2582
// begin for j := 1 to 2 do
2536: LD_ADDR_VAR 0 3
2540: PUSH
2541: DOUBLE
2542: LD_INT 1
2544: DEC
2545: ST_TO_ADDR
2546: LD_INT 2
2548: PUSH
2549: FOR_TO
2550: IFFALSE 2578
// begin PrepareSoldier ( false , 7 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 7
2557: PPUSH
2558: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2562: CALL_OW 44
2566: PPUSH
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 52
// end ;
2576: GO 2549
2578: POP
2579: POP
// end ;
2580: GO 2533
2582: POP
2583: POP
// end ;
2584: LD_VAR 0 1
2588: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2589: LD_INT 0
2591: PPUSH
2592: PPUSH
2593: PPUSH
2594: PPUSH
// uc_side := 3 ;
2595: LD_ADDR_OWVAR 20
2599: PUSH
2600: LD_INT 3
2602: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2603: LD_ADDR_OWVAR 21
2607: PUSH
2608: LD_INT 1
2610: PPUSH
2611: LD_INT 3
2613: PPUSH
2614: CALL_OW 12
2618: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_INT 5
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 517
2634: ST_TO_ADDR
// for i := 1 to 3 do
2635: LD_ADDR_VAR 0 2
2639: PUSH
2640: DOUBLE
2641: LD_INT 1
2643: DEC
2644: ST_TO_ADDR
2645: LD_INT 3
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2718
// begin PrepareHuman ( false , 33 , 0 ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 33
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 380
// un := CreateHuman ;
2664: LD_ADDR_VAR 0 3
2668: PUSH
2669: CALL_OW 44
2673: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_VAR 0 4
2683: PUSH
2684: LD_INT 1
2686: ARRAY
2687: PUSH
2688: LD_VAR 0 2
2692: ARRAY
2693: PPUSH
2694: LD_VAR 0 4
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PUSH
2703: LD_VAR 0 2
2707: ARRAY
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: CALL_OW 601
// end ;
2716: GO 2648
2718: POP
2719: POP
// end ;
2720: LD_VAR 0 1
2724: RET
// export function PrepareFirstScene ; var i , un ; begin
2725: LD_INT 0
2727: PPUSH
2728: PPUSH
2729: PPUSH
// uc_side := 4 ;
2730: LD_ADDR_OWVAR 20
2734: PUSH
2735: LD_INT 4
2737: ST_TO_ADDR
// uc_nation := 1 ;
2738: LD_ADDR_OWVAR 21
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 33
2751: PPUSH
2752: LD_INT 0
2754: PPUSH
2755: CALL_OW 380
// for i := 1 to 2 do
2759: LD_ADDR_VAR 0 2
2763: PUSH
2764: DOUBLE
2765: LD_INT 1
2767: DEC
2768: ST_TO_ADDR
2769: LD_INT 2
2771: PUSH
2772: FOR_TO
2773: IFFALSE 2838
// begin un := CreateHuman ;
2775: LD_ADDR_VAR 0 3
2779: PUSH
2780: CALL_OW 44
2784: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2785: LD_VAR 0 3
2789: PPUSH
2790: LD_INT 1
2792: PPUSH
2793: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2797: LD_VAR 0 3
2801: PPUSH
2802: LD_INT 6
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2812: LD_VAR 0 3
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL 67166 0 2
// SetLives ( un , 300 ) ;
2824: LD_VAR 0 3
2828: PPUSH
2829: LD_INT 300
2831: PPUSH
2832: CALL_OW 234
// end ;
2836: GO 2772
2838: POP
2839: POP
// uc_side := 3 ;
2840: LD_ADDR_OWVAR 20
2844: PUSH
2845: LD_INT 3
2847: ST_TO_ADDR
// uc_nation := 3 ;
2848: LD_ADDR_OWVAR 21
2852: PUSH
2853: LD_INT 3
2855: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
2856: LD_INT 1
2858: PPUSH
2859: LD_INT 5
2861: PPUSH
2862: CALL_OW 381
// for i := 1 to 3 do
2866: LD_ADDR_VAR 0 2
2870: PUSH
2871: DOUBLE
2872: LD_INT 1
2874: DEC
2875: ST_TO_ADDR
2876: LD_INT 3
2878: PUSH
2879: FOR_TO
2880: IFFALSE 2953
// begin un := CreateHuman ;
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: CALL_OW 44
2891: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
2892: LD_ADDR_EXP 56
2896: PUSH
2897: LD_EXP 56
2901: PPUSH
2902: LD_VAR 0 3
2906: PPUSH
2907: CALL 64014 0 2
2911: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 4
2919: PPUSH
2920: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_INT 7
2931: PPUSH
2932: LD_INT 0
2934: PPUSH
2935: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 4
2946: PPUSH
2947: CALL 67166 0 2
// end ;
2951: GO 2879
2953: POP
2954: POP
// ruCommisar := CreateHuman ;
2955: LD_ADDR_EXP 57
2959: PUSH
2960: CALL_OW 44
2964: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
2965: LD_EXP 57
2969: PPUSH
2970: LD_INT 124
2972: PPUSH
2973: LD_INT 37
2975: PPUSH
2976: LD_INT 0
2978: PPUSH
2979: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
2983: LD_EXP 57
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
2995: LD_EXP 57
2999: PPUSH
3000: LD_INT 3
3002: PPUSH
3003: CALL 67166 0 2
// end ;
3007: LD_VAR 0 1
3011: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3012: LD_INT 0
3014: PPUSH
3015: PPUSH
3016: PPUSH
3017: PPUSH
// uc_side := 6 ;
3018: LD_ADDR_OWVAR 20
3022: PUSH
3023: LD_INT 6
3025: ST_TO_ADDR
// uc_nation := 3 ;
3026: LD_ADDR_OWVAR 21
3030: PUSH
3031: LD_INT 3
3033: ST_TO_ADDR
// ruPatrol := [ ] ;
3034: LD_ADDR_EXP 63
3038: PUSH
3039: EMPTY
3040: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3041: LD_ADDR_VAR 0 4
3045: PUSH
3046: LD_INT 26
3048: PUSH
3049: LD_INT 30
3051: PUSH
3052: LD_INT 39
3054: PUSH
3055: LD_INT 43
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: ST_TO_ADDR
// for i := 1 to spawn do
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: DOUBLE
3070: LD_INT 1
3072: DEC
3073: ST_TO_ADDR
3074: LD_VAR 0 4
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3191
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3082: LD_INT 0
3084: PPUSH
3085: LD_INT 4
3087: PUSH
3088: LD_INT 5
3090: PUSH
3091: LD_INT 6
3093: PUSH
3094: LD_INT 7
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: PUSH
3103: LD_OWVAR 67
3107: ARRAY
3108: PPUSH
3109: CALL_OW 381
// un := CreateHuman ;
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: CALL_OW 44
3122: ST_TO_ADDR
// SetTag ( un , i ) ;
3123: LD_VAR 0 3
3127: PPUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3137: LD_ADDR_EXP 63
3141: PUSH
3142: LD_EXP 63
3146: PPUSH
3147: LD_VAR 0 3
3151: PPUSH
3152: CALL 64014 0 2
3156: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3157: LD_VAR 0 3
3161: PPUSH
3162: LD_VAR 0 4
3166: PUSH
3167: LD_VAR 0 2
3171: ARRAY
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 49
// ComHold ( un ) ;
3180: LD_VAR 0 3
3184: PPUSH
3185: CALL_OW 140
// end ;
3189: GO 3079
3191: POP
3192: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3193: LD_ADDR_VAR 0 4
3197: PUSH
3198: LD_INT 48
3200: PUSH
3201: LD_INT 49
3203: PUSH
3204: LD_INT 50
3206: PUSH
3207: LD_INT 51
3209: PUSH
3210: LD_INT 52
3212: PUSH
3213: LD_INT 53
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: ST_TO_ADDR
// for i := 1 to spawn do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_VAR 0 4
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3349
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3242: LD_INT 0
3244: PPUSH
3245: LD_INT 4
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 6
3253: PUSH
3254: LD_INT 7
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_OWVAR 67
3267: ARRAY
3268: PPUSH
3269: CALL_OW 381
// un := CreateHuman ;
3273: LD_ADDR_VAR 0 3
3277: PUSH
3278: CALL_OW 44
3282: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3283: LD_VAR 0 3
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3295: LD_ADDR_EXP 63
3299: PUSH
3300: LD_EXP 63
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL 64014 0 2
3314: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3315: LD_VAR 0 3
3319: PPUSH
3320: LD_VAR 0 4
3324: PUSH
3325: LD_VAR 0 2
3329: ARRAY
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 49
// ComHold ( un ) ;
3338: LD_VAR 0 3
3342: PPUSH
3343: CALL_OW 140
// end ;
3347: GO 3239
3349: POP
3350: POP
// end ;
3351: LD_VAR 0 1
3355: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3356: LD_INT 0
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
// uc_side := 6 ;
3362: LD_ADDR_OWVAR 20
3366: PUSH
3367: LD_INT 6
3369: ST_TO_ADDR
// uc_nation := nation_russian ;
3370: LD_ADDR_OWVAR 21
3374: PUSH
3375: LD_INT 3
3377: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 54
3385: PUSH
3386: LD_INT 55
3388: PUSH
3389: LD_INT 56
3391: PUSH
3392: LD_INT 57
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: ST_TO_ADDR
// for i := 1 to spawn do
3401: LD_ADDR_VAR 0 2
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_VAR 0 4
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3526
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3419: LD_INT 0
3421: PPUSH
3422: LD_INT 4
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: LD_INT 6
3430: PUSH
3431: LD_INT 7
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_OWVAR 67
3444: ARRAY
3445: PPUSH
3446: CALL_OW 381
// un := CreateHuman ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: CALL_OW 44
3459: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3460: LD_VAR 0 3
3464: PPUSH
3465: LD_INT 0
3467: PPUSH
3468: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3472: LD_ADDR_EXP 63
3476: PUSH
3477: LD_EXP 63
3481: PPUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: CALL 64014 0 2
3491: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3492: LD_VAR 0 3
3496: PPUSH
3497: LD_VAR 0 4
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PPUSH
3508: LD_INT 0
3510: PPUSH
3511: CALL_OW 49
// ComHold ( un ) ;
3515: LD_VAR 0 3
3519: PPUSH
3520: CALL_OW 140
// end ;
3524: GO 3416
3526: POP
3527: POP
// end ; end_of_file
3528: LD_VAR 0 1
3532: RET
// export function Action ; var speaker , i , tmp ; begin
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
// Video ( true ) ;
3539: LD_INT 1
3541: PPUSH
3542: CALL 63986 0 1
// hasNormalScene := Kaia or Givi ;
3546: LD_ADDR_EXP 5
3550: PUSH
3551: LD_EXP 43
3555: PUSH
3556: LD_EXP 39
3560: OR
3561: ST_TO_ADDR
// if hasNormalScene then
3562: LD_EXP 5
3566: IFFALSE 3807
// begin for i in americanSquad do
3568: LD_ADDR_VAR 0 3
3572: PUSH
3573: LD_EXP 50
3577: PUSH
3578: FOR_IN
3579: IFFALSE 3625
// begin SetClass ( i , class_prison ) ;
3581: LD_VAR 0 3
3585: PPUSH
3586: LD_INT 33
3588: PPUSH
3589: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3593: LD_VAR 0 3
3597: PPUSH
3598: LD_INT 78
3600: PPUSH
3601: LD_INT 16
3603: PPUSH
3604: LD_INT 5
3606: PPUSH
3607: LD_INT 0
3609: PPUSH
3610: CALL_OW 50
// ComHold ( i ) ;
3614: LD_VAR 0 3
3618: PPUSH
3619: CALL_OW 140
// end ;
3623: GO 3578
3625: POP
3626: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3627: LD_ADDR_VAR 0 4
3631: PUSH
3632: LD_EXP 40
3636: PUSH
3637: LD_EXP 41
3641: PUSH
3642: LD_EXP 42
3646: PUSH
3647: LD_EXP 43
3651: PUSH
3652: LD_EXP 44
3656: PUSH
3657: LD_EXP 45
3661: PUSH
3662: LD_EXP 46
3666: PUSH
3667: LD_EXP 47
3671: PUSH
3672: LD_EXP 39
3676: PUSH
3677: LD_EXP 48
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: PUSH
3694: LD_EXP 49
3698: UNION
3699: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3700: LD_EXP 38
3704: PPUSH
3705: LD_INT 33
3707: PPUSH
3708: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3712: LD_EXP 38
3716: PPUSH
3717: LD_INT 117
3719: PPUSH
3720: LD_INT 24
3722: PPUSH
3723: LD_INT 3
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL 66154 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3733: LD_EXP 38
3737: PPUSH
3738: LD_INT 123
3740: PPUSH
3741: LD_INT 39
3743: PPUSH
3744: CALL_OW 118
// for i in tmp do
3748: LD_ADDR_VAR 0 3
3752: PUSH
3753: LD_VAR 0 4
3757: PUSH
3758: FOR_IN
3759: IFFALSE 3805
// begin SetClass ( i , class_prison ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_INT 33
3768: PPUSH
3769: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3773: LD_VAR 0 3
3777: PPUSH
3778: LD_INT 3
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
3788: LD_VAR 0 3
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 16
3798: PPUSH
3799: CALL_OW 118
// end ;
3803: GO 3758
3805: POP
3806: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
3807: LD_INT 124
3809: PPUSH
3810: LD_INT 39
3812: PPUSH
3813: CALL_OW 86
// PrepareDeadBodies ;
3817: CALL 2589 0 0
// PrepareFirstScene ;
3821: CALL 2725 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3825: LD_INT 152
3827: PPUSH
3828: LD_INT 65
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 70
3836: NEG
3837: PPUSH
3838: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3842: LD_INT 152
3844: PPUSH
3845: LD_INT 65
3847: PPUSH
3848: LD_INT 2
3850: PPUSH
3851: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
3855: LD_INT 122
3857: PPUSH
3858: LD_INT 40
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: LD_INT 8
3866: NEG
3867: PPUSH
3868: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
3872: LD_INT 124
3874: PPUSH
3875: LD_INT 37
3877: PPUSH
3878: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
3882: LD_EXP 57
3886: PPUSH
3887: LD_STRING DRum-Execution-1
3889: PPUSH
3890: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
3894: LD_EXP 57
3898: PPUSH
3899: LD_STRING DRum-Execution-2
3901: PPUSH
3902: CALL_OW 88
// wait ( 0 0$01 ) ;
3906: LD_INT 35
3908: PPUSH
3909: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
3913: LD_EXP 57
3917: PPUSH
3918: LD_STRING DRum-Execution-3
3920: PPUSH
3921: CALL_OW 88
// wait ( 0 0$1 ) ;
3925: LD_INT 35
3927: PPUSH
3928: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
3932: LD_EXP 57
3936: PPUSH
3937: LD_STRING DRum-Execution-4
3939: PPUSH
3940: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
3944: LD_EXP 56
3948: PUSH
3949: LD_INT 1
3951: ARRAY
3952: PPUSH
3953: LD_INT 122
3955: PPUSH
3956: LD_INT 39
3958: PPUSH
3959: CALL_OW 428
3963: PPUSH
3964: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
3968: LD_EXP 56
3972: PUSH
3973: LD_INT 2
3975: ARRAY
3976: PPUSH
3977: LD_INT 123
3979: PPUSH
3980: LD_INT 41
3982: PPUSH
3983: CALL_OW 428
3987: PPUSH
3988: CALL_OW 115
// AddComHold ( russianKillers ) ;
3992: LD_EXP 56
3996: PPUSH
3997: CALL_OW 200
// wait ( 0 0$1 ) ;
4001: LD_INT 35
4003: PPUSH
4004: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4008: LD_INT 122
4010: PPUSH
4011: LD_INT 40
4013: PPUSH
4014: LD_INT 2
4016: PPUSH
4017: CALL_OW 331
// for i in russianKillers union ruCommisar do
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_EXP 56
4030: PUSH
4031: LD_EXP 57
4035: UNION
4036: PUSH
4037: FOR_IN
4038: IFFALSE 4051
// RemoveUnit ( i ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: CALL_OW 64
4049: GO 4037
4051: POP
4052: POP
// if hasNormalScene then
4053: LD_EXP 5
4057: IFFALSE 4065
// ActionNormal else
4059: CALL 4074 0 0
4063: GO 4069
// ActionAdditional ;
4065: CALL 5899 0 0
// end ;
4069: LD_VAR 0 1
4073: RET
// function ActionNormal ; var i , tmp ; begin
4074: LD_INT 0
4076: PPUSH
4077: PPUSH
4078: PPUSH
// CenterNowOnUnits ( Heike ) ;
4079: LD_EXP 38
4083: PPUSH
4084: CALL_OW 87
// wait ( 0 0$1 ) ;
4088: LD_INT 35
4090: PPUSH
4091: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4095: LD_EXP 38
4099: PPUSH
4100: LD_INT 115
4102: PPUSH
4103: LD_INT 19
4105: PPUSH
4106: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4110: LD_EXP 38
4114: PPUSH
4115: LD_INT 113
4117: PPUSH
4118: LD_INT 16
4120: PPUSH
4121: CALL_OW 178
// wait ( 0 0$2 ) ;
4125: LD_INT 70
4127: PPUSH
4128: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4132: LD_EXP 38
4136: PPUSH
4137: LD_STRING DH-Conspiracy-1
4139: PPUSH
4140: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4144: LD_EXP 43
4148: PPUSH
4149: LD_STRING DK-Conspiracy-2
4151: PPUSH
4152: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4156: LD_EXP 39
4160: PPUSH
4161: LD_STRING DG-Conspiracy-3
4163: PPUSH
4164: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4168: LD_EXP 39
4172: PPUSH
4173: LD_STRING DG-Conspiracy-4
4175: PPUSH
4176: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4180: LD_EXP 38
4184: PPUSH
4185: LD_STRING DH-Conspiracy-5
4187: PPUSH
4188: CALL_OW 88
// if IsOk ( Kamil ) then
4192: LD_EXP 42
4196: PPUSH
4197: CALL_OW 302
4201: IFFALSE 4259
// begin hasVodka := true ;
4203: LD_ADDR_EXP 4
4207: PUSH
4208: LD_INT 1
4210: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4211: LD_EXP 42
4215: PPUSH
4216: LD_STRING DKam-Conspiracy-6
4218: PPUSH
4219: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4223: LD_EXP 42
4227: PPUSH
4228: LD_STRING DKam-Conspiracy-7
4230: PPUSH
4231: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4235: LD_EXP 42
4239: PPUSH
4240: LD_STRING DKam-Conspiracy-8
4242: PPUSH
4243: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4247: LD_EXP 42
4251: PPUSH
4252: LD_STRING DKam-Conspiracy-9
4254: PPUSH
4255: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4259: LD_EXP 44
4263: PPUSH
4264: CALL_OW 302
4268: IFFALSE 4449
// begin americanContact := true ;
4270: LD_ADDR_EXP 10
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4278: LD_STRING M1-american
4280: PPUSH
4281: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4285: LD_EXP 44
4289: PPUSH
4290: LD_STRING DS-Conspiracy-10
4292: PPUSH
4293: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4297: LD_EXP 45
4301: PPUSH
4302: LD_STRING DM-Conspiracy-11
4304: PPUSH
4305: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4309: LD_EXP 44
4313: PPUSH
4314: LD_STRING DS-Conspiracy-12
4316: PPUSH
4317: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4321: LD_INT 84
4323: PPUSH
4324: LD_INT 19
4326: PPUSH
4327: LD_INT 105
4329: PPUSH
4330: CALL 18273 0 3
// if johnnySaved then
4334: LD_EXP 3
4338: IFFALSE 4378
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4340: LD_EXP 44
4344: PPUSH
4345: LD_STRING DS-Conspiracy-13
4347: PPUSH
4348: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4352: LD_EXP 38
4356: PPUSH
4357: LD_STRING DH-Conspiracy-14
4359: PPUSH
4360: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4364: LD_EXP 44
4368: PPUSH
4369: LD_STRING DH-Conspiracy-15
4371: PPUSH
4372: CALL_OW 88
// end else
4376: GO 4414
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4378: LD_EXP 44
4382: PPUSH
4383: LD_STRING DS-Conspiracy-a-13
4385: PPUSH
4386: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4390: LD_EXP 38
4394: PPUSH
4395: LD_STRING DH-Conspiracy-a-14
4397: PPUSH
4398: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4402: LD_EXP 44
4406: PPUSH
4407: LD_STRING DH-Conspiracy-a-15
4409: PPUSH
4410: CALL_OW 88
// end ; if IsOk ( Givi ) then
4414: LD_EXP 39
4418: PPUSH
4419: CALL_OW 302
4423: IFFALSE 4449
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4425: LD_EXP 39
4429: PPUSH
4430: LD_STRING DG-Conspiracy-a-16
4432: PPUSH
4433: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4437: LD_EXP 38
4441: PPUSH
4442: LD_STRING DH-Conspiracy-a-17
4444: PPUSH
4445: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4449: LD_EXP 38
4453: PPUSH
4454: LD_STRING DH-Conspiracy-16
4456: PPUSH
4457: CALL_OW 88
// if IsOk ( Givi ) then
4461: LD_EXP 39
4465: PPUSH
4466: CALL_OW 302
4470: IFFALSE 4742
// begin hasStimDrugs := true ;
4472: LD_ADDR_EXP 9
4476: PUSH
4477: LD_INT 1
4479: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4480: LD_STRING M1-drugs
4482: PPUSH
4483: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4487: LD_EXP 39
4491: PPUSH
4492: LD_STRING DG-Conspiracy-17
4494: PPUSH
4495: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4499: LD_INT 162
4501: PPUSH
4502: LD_INT 2
4504: PPUSH
4505: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4509: LD_INT 194
4511: PPUSH
4512: LD_INT 98
4514: PPUSH
4515: LD_INT 105
4517: PPUSH
4518: CALL 18273 0 3
// SetSide ( drugsLab , 3 ) ;
4522: LD_INT 162
4524: PPUSH
4525: LD_INT 3
4527: PPUSH
4528: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4532: LD_EXP 39
4536: PPUSH
4537: LD_STRING DG-Conspiracy-18
4539: PPUSH
4540: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4544: LD_EXP 39
4548: PPUSH
4549: LD_STRING DG-Conspiracy-19
4551: PPUSH
4552: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4556: LD_EXP 39
4560: PPUSH
4561: LD_STRING DG-Conspiracy-20
4563: PPUSH
4564: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4568: LD_EXP 38
4572: PPUSH
4573: LD_STRING DH-Conspiracy-21
4575: PPUSH
4576: CALL_OW 88
// if IsOk ( Kaia ) then
4580: LD_EXP 43
4584: PPUSH
4585: CALL_OW 302
4589: IFFALSE 4663
// begin hasExplosions := true ;
4591: LD_ADDR_EXP 6
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4599: LD_STRING M1-explosive
4601: PPUSH
4602: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4606: LD_EXP 43
4610: PPUSH
4611: LD_STRING DK-Conspiracy-22
4613: PPUSH
4614: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4618: LD_INT 73
4620: PPUSH
4621: LD_INT 2
4623: PPUSH
4624: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4628: LD_INT 170
4630: PPUSH
4631: LD_INT 104
4633: PPUSH
4634: LD_INT 105
4636: PPUSH
4637: CALL 18273 0 3
// SetSide ( barExplosion , 3 ) ;
4641: LD_INT 73
4643: PPUSH
4644: LD_INT 3
4646: PPUSH
4647: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4651: LD_EXP 43
4655: PPUSH
4656: LD_STRING DK-Conspiracy-23
4658: PPUSH
4659: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4663: LD_EXP 46
4667: PPUSH
4668: CALL_OW 302
4672: IFFALSE 4742
// begin hasExplosionsInFactory := true ;
4674: LD_ADDR_EXP 7
4678: PUSH
4679: LD_INT 1
4681: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4682: LD_EXP 46
4686: PPUSH
4687: LD_STRING DO-Conspiracy-24
4689: PPUSH
4690: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4694: LD_INT 175
4696: PPUSH
4697: LD_INT 54
4699: PPUSH
4700: LD_INT 70
4702: PPUSH
4703: CALL 18273 0 3
// if IsOk ( Markov ) then
4707: LD_EXP 45
4711: PPUSH
4712: CALL_OW 302
4716: IFFALSE 4742
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4718: LD_EXP 45
4722: PPUSH
4723: LD_STRING DMar-Conspiracy-25
4725: PPUSH
4726: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4730: LD_EXP 45
4734: PPUSH
4735: LD_STRING DMar-Conspiracy-26
4737: PPUSH
4738: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4742: LD_EXP 47
4746: PPUSH
4747: CALL_OW 302
4751: PUSH
4752: LD_EXP 43
4756: PPUSH
4757: CALL_OW 302
4761: AND
4762: IFFALSE 5222
// begin hasWeapons := true ;
4764: LD_ADDR_EXP 19
4768: PUSH
4769: LD_INT 1
4771: ST_TO_ADDR
// hasRevolver := true ;
4772: LD_ADDR_EXP 8
4776: PUSH
4777: LD_INT 1
4779: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
4780: LD_STRING M1-weapons
4782: PPUSH
4783: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
4787: LD_EXP 47
4791: PPUSH
4792: LD_STRING DKs-Conspiracy-27
4794: PPUSH
4795: CALL_OW 88
// if IsOk ( Givi ) then
4799: LD_EXP 39
4803: PPUSH
4804: CALL_OW 302
4808: IFFALSE 4824
// Say ( Givi , DG-Conspiracy-28 ) else
4810: LD_EXP 39
4814: PPUSH
4815: LD_STRING DG-Conspiracy-28
4817: PPUSH
4818: CALL_OW 88
4822: GO 4889
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
4824: LD_EXP 49
4828: PPUSH
4829: LD_INT 26
4831: PUSH
4832: LD_INT 1
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PPUSH
4839: CALL_OW 72
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: LD_STRING DArm-Conspiracy-a-28
4850: PPUSH
4851: CALL_OW 88
4855: NOT
4856: IFFALSE 4889
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
4858: LD_EXP 49
4862: PPUSH
4863: LD_INT 26
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 72
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PPUSH
4882: LD_STRING DArf-Conspiracy-a-28
4884: PPUSH
4885: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
4889: LD_EXP 47
4893: PPUSH
4894: LD_STRING DKs-Conspiracy-29
4896: PPUSH
4897: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
4901: LD_INT 192
4903: PPUSH
4904: LD_INT 122
4906: PPUSH
4907: LD_INT 105
4909: PPUSH
4910: CALL 18273 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
4914: LD_EXP 47
4918: PPUSH
4919: LD_STRING DKs-Conspiracy-30
4921: PPUSH
4922: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
4926: LD_EXP 43
4930: PPUSH
4931: LD_STRING DK-Conspiracy-31
4933: PPUSH
4934: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
4938: LD_EXP 45
4942: PPUSH
4943: LD_STRING DMar-Conspiracy-33
4945: PPUSH
4946: CALL_OW 88
4950: NOT
4951: PUSH
4952: LD_EXP 49
4956: AND
4957: IFFALSE 5024
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
4959: LD_EXP 49
4963: PPUSH
4964: LD_INT 26
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 72
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: LD_STRING DArm-Conspiracy-a-34
4985: PPUSH
4986: CALL_OW 88
4990: NOT
4991: IFFALSE 5024
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
4993: LD_EXP 49
4997: PPUSH
4998: LD_INT 26
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: CALL_OW 72
5012: PUSH
5013: LD_INT 1
5015: ARRAY
5016: PPUSH
5017: LD_STRING DArf-Conspiracy-a-34
5019: PPUSH
5020: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5024: LD_EXP 43
5028: PPUSH
5029: LD_STRING DK-Conspiracy-34
5031: PPUSH
5032: CALL_OW 88
// if IsOk ( Markov ) then
5036: LD_EXP 45
5040: PPUSH
5041: CALL_OW 302
5045: IFFALSE 5130
// begin hasSniperRifle := true ;
5047: LD_ADDR_EXP 11
5051: PUSH
5052: LD_INT 1
5054: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5055: LD_EXP 45
5059: PPUSH
5060: LD_STRING DMar-Conspiracy-35
5062: PPUSH
5063: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5067: LD_EXP 43
5071: PPUSH
5072: LD_STRING DK-Conspiracy-36
5074: PPUSH
5075: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5079: LD_EXP 45
5083: PPUSH
5084: LD_STRING DMar-Conspiracy-37
5086: PPUSH
5087: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5091: LD_EXP 45
5095: PPUSH
5096: LD_STRING DMar-Conspiracy-38
5098: PPUSH
5099: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5103: LD_INT 137
5105: PPUSH
5106: LD_INT 98
5108: PPUSH
5109: LD_INT 105
5111: PPUSH
5112: CALL 18273 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5116: LD_EXP 45
5120: PPUSH
5121: LD_STRING DMar-Conspiracy-39
5123: PPUSH
5124: CALL_OW 88
// end else
5128: GO 5222
// if heikeSecondSquad then
5130: LD_EXP 49
5134: IFFALSE 5222
// begin hasSniperRifle := true ;
5136: LD_ADDR_EXP 11
5140: PUSH
5141: LD_INT 1
5143: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5144: LD_INT 137
5146: PPUSH
5147: LD_INT 98
5149: PPUSH
5150: LD_INT 105
5152: PPUSH
5153: CALL 18273 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5157: LD_EXP 49
5161: PPUSH
5162: LD_INT 26
5164: PUSH
5165: LD_INT 1
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 72
5176: PUSH
5177: LD_INT 1
5179: ARRAY
5180: PPUSH
5181: LD_STRING DArm-Conspiracy-a-35
5183: PPUSH
5184: CALL_OW 88
5188: NOT
5189: IFFALSE 5222
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5191: LD_EXP 49
5195: PPUSH
5196: LD_INT 26
5198: PUSH
5199: LD_INT 2
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PPUSH
5206: CALL_OW 72
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_STRING DArf-Conspiracy-a-35
5217: PPUSH
5218: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5222: LD_EXP 38
5226: PPUSH
5227: LD_STRING DH-Conspiracy-40
5229: PPUSH
5230: CALL_OW 88
// if IsOk ( Mike ) then
5234: LD_EXP 40
5238: PPUSH
5239: CALL_OW 302
5243: IFFALSE 5302
// begin hasScout := true ;
5245: LD_ADDR_EXP 12
5249: PUSH
5250: LD_INT 1
5252: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5253: LD_EXP 40
5257: PPUSH
5258: LD_STRING DM-Conspiracy-41
5260: PPUSH
5261: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5265: LD_EXP 40
5269: PPUSH
5270: LD_STRING DM-Conspiracy-42
5272: PPUSH
5273: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5277: LD_INT 73
5279: PPUSH
5280: LD_INT 102
5282: PPUSH
5283: LD_INT 105
5285: PPUSH
5286: CALL 18273 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5290: LD_EXP 40
5294: PPUSH
5295: LD_STRING DM-Conspiracy-43
5297: PPUSH
5298: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5302: LD_EXP 4
5306: PUSH
5307: LD_EXP 43
5311: PPUSH
5312: CALL_OW 302
5316: AND
5317: PUSH
5318: LD_EXP 47
5322: PPUSH
5323: CALL_OW 302
5327: AND
5328: IFFALSE 5374
// begin hasMethanol := true ;
5330: LD_ADDR_EXP 13
5334: PUSH
5335: LD_INT 1
5337: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5338: LD_EXP 43
5342: PPUSH
5343: LD_STRING DK-Conspiracy-44
5345: PPUSH
5346: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5350: LD_EXP 43
5354: PPUSH
5355: LD_STRING DK-Conspiracy-45
5357: PPUSH
5358: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5362: LD_EXP 42
5366: PPUSH
5367: LD_STRING DKam-Conspiracy-46
5369: PPUSH
5370: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5374: LD_EXP 38
5378: PPUSH
5379: LD_STRING DH-Conspiracy-47
5381: PPUSH
5382: CALL_OW 88
// wait ( 0 0$1 ) ;
5386: LD_INT 35
5388: PPUSH
5389: CALL_OW 67
// your_side := 8 ;
5393: LD_ADDR_OWVAR 2
5397: PUSH
5398: LD_INT 8
5400: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5401: LD_INT 1
5403: PPUSH
5404: LD_INT 1
5406: PPUSH
5407: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_INT 2
5418: PUSH
5419: LD_INT 22
5421: PUSH
5422: LD_INT 2
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 22
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 21
5446: PUSH
5447: LD_INT 1
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: FOR_IN
5464: IFFALSE 5477
// RemoveUnit ( i ) ;
5466: LD_VAR 0 2
5470: PPUSH
5471: CALL_OW 64
5475: GO 5463
5477: POP
5478: POP
// wait ( 0 0$0.3 ) ;
5479: LD_INT 10
5481: PPUSH
5482: CALL_OW 67
// Query ( StartInfo1 ) ;
5486: LD_STRING StartInfo1
5488: PPUSH
5489: CALL_OW 97
// wait ( 0 0$1 ) ;
5493: LD_INT 35
5495: PPUSH
5496: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5500: LD_STRING colors_night.txt
5502: PPUSH
5503: CALL_OW 544
// Query ( StartInfo2 ) ;
5507: LD_STRING StartInfo2
5509: PPUSH
5510: CALL_OW 97
// PrepareGame ;
5514: CALL 973 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5518: LD_INT 152
5520: PPUSH
5521: LD_INT 65
5523: PPUSH
5524: LD_INT 2
5526: PPUSH
5527: LD_INT 70
5529: NEG
5530: PPUSH
5531: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5535: LD_INT 152
5537: PPUSH
5538: LD_INT 65
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5548: LD_INT 133
5550: PPUSH
5551: LD_INT 76
5553: PPUSH
5554: LD_INT 2
5556: PPUSH
5557: LD_INT 6
5559: NEG
5560: PPUSH
5561: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5565: LD_INT 152
5567: PPUSH
5568: LD_INT 65
5570: PPUSH
5571: LD_INT 8
5573: PPUSH
5574: LD_INT 70
5576: NEG
5577: PPUSH
5578: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5582: LD_INT 152
5584: PPUSH
5585: LD_INT 65
5587: PPUSH
5588: LD_INT 8
5590: PPUSH
5591: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5595: LD_INT 133
5597: PPUSH
5598: LD_INT 76
5600: PPUSH
5601: LD_INT 8
5603: PPUSH
5604: LD_INT 6
5606: NEG
5607: PPUSH
5608: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5612: LD_INT 23
5614: PPUSH
5615: CALL_OW 87
// dialogue_skipped := false ;
5619: LD_ADDR_OWVAR 59
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// InitRuPatrols ;
5627: CALL 3012 0 0
// Say ( Heike , DH-Escape-1 ) ;
5631: LD_EXP 38
5635: PPUSH
5636: LD_STRING DH-Escape-1
5638: PPUSH
5639: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5643: LD_EXP 38
5647: PPUSH
5648: LD_STRING DH-Escape-2
5650: PPUSH
5651: CALL_OW 88
// if not debug then
5655: LD_EXP 1
5659: NOT
5660: IFFALSE 5666
// StartLockerMinigame ;
5662: CALL 18784 0 0
// wait ( 0 0$1 ) ;
5666: LD_INT 35
5668: PPUSH
5669: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5673: LD_EXP 38
5677: PPUSH
5678: LD_STRING DH-Escape-4
5680: PPUSH
5681: CALL_OW 88
// wait ( 0 0$3 ) ;
5685: LD_INT 105
5687: PPUSH
5688: CALL_OW 67
// your_side := 2 ;
5692: LD_ADDR_OWVAR 2
5696: PUSH
5697: LD_INT 2
5699: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5700: LD_EXP 38
5704: PPUSH
5705: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5709: LD_INT 152
5711: PPUSH
5712: LD_INT 65
5714: PPUSH
5715: LD_INT 2
5717: PPUSH
5718: LD_INT 70
5720: NEG
5721: PPUSH
5722: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5726: LD_INT 152
5728: PPUSH
5729: LD_INT 65
5731: PPUSH
5732: LD_INT 2
5734: PPUSH
5735: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5739: LD_INT 133
5741: PPUSH
5742: LD_INT 76
5744: PPUSH
5745: LD_INT 8
5747: PPUSH
5748: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5752: LD_EXP 38
5756: PPUSH
5757: LD_INT 128
5759: PPUSH
5760: LD_INT 64
5762: PPUSH
5763: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5767: LD_INT 35
5769: PPUSH
5770: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5774: LD_EXP 38
5778: PPUSH
5779: LD_INT 128
5781: PPUSH
5782: LD_INT 64
5784: PPUSH
5785: CALL_OW 307
5789: IFFALSE 5767
// ComHold ( Heike ) ;
5791: LD_EXP 38
5795: PPUSH
5796: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
5800: LD_EXP 38
5804: PPUSH
5805: LD_STRING DH-Start-1
5807: PPUSH
5808: CALL_OW 88
// if not americanContact then
5812: LD_EXP 10
5816: NOT
5817: IFFALSE 5833
// Say ( Heike , DH-Start-c-2 ) else
5819: LD_EXP 38
5823: PPUSH
5824: LD_STRING DH-Start-c-2
5826: PPUSH
5827: CALL_OW 88
5831: GO 5865
// if johnnySaved then
5833: LD_EXP 3
5837: IFFALSE 5853
// Say ( Heike , DH-Start-a-2 ) else
5839: LD_EXP 38
5843: PPUSH
5844: LD_STRING DH-Start-a-2
5846: PPUSH
5847: CALL_OW 88
5851: GO 5865
// Say ( Heike , DH-Start-b-2 ) ;
5853: LD_EXP 38
5857: PPUSH
5858: LD_STRING DH-Start-b-2
5860: PPUSH
5861: CALL_OW 88
// Video ( false ) ;
5865: LD_INT 0
5867: PPUSH
5868: CALL 63986 0 1
// tick := 0 ;
5872: LD_ADDR_OWVAR 1
5876: PUSH
5877: LD_INT 0
5879: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
5880: LD_STRING M1
5882: PPUSH
5883: CALL_OW 337
// enable ( gameStartEvent ) ;
5887: LD_INT 2
5889: ENABLE_MARKED
// SaveForQuickRestart ;
5890: CALL_OW 22
// end ;
5894: LD_VAR 0 1
5898: RET
// function ActionAdditional ; var i , un , tmp ; begin
5899: LD_INT 0
5901: PPUSH
5902: PPUSH
5903: PPUSH
5904: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
5905: LD_INT 115
5907: PPUSH
5908: LD_INT 27
5910: PPUSH
5911: LD_INT 2
5913: PPUSH
5914: LD_INT 6
5916: NEG
5917: PPUSH
5918: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
5922: LD_EXP 38
5926: PPUSH
5927: LD_INT 115
5929: PPUSH
5930: LD_INT 27
5932: PPUSH
5933: CALL_OW 428
5937: PPUSH
5938: CALL_OW 52
// SetClass ( Heike , 33 ) ;
5942: LD_EXP 38
5946: PPUSH
5947: LD_INT 33
5949: PPUSH
5950: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
5954: LD_INT 124
5956: PPUSH
5957: LD_INT 39
5959: PPUSH
5960: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
5964: LD_EXP 38
5968: PPUSH
5969: LD_STRING DH-Fail-1
5971: PPUSH
5972: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
5976: LD_INT 3
5978: PPUSH
5979: CALL_OW 427
// ComExit ( Heike ) ;
5983: LD_EXP 38
5987: PPUSH
5988: CALL 64412 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
5992: LD_EXP 38
5996: PPUSH
5997: LD_INT 109
5999: PPUSH
6000: LD_INT 33
6002: PPUSH
6003: CALL_OW 171
// AddComHold ( Heike ) ;
6007: LD_EXP 38
6011: PPUSH
6012: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6016: LD_INT 115
6018: PPUSH
6019: LD_INT 27
6021: PPUSH
6022: LD_INT 2
6024: PPUSH
6025: CALL_OW 331
// wait ( 0 0$2 ) ;
6029: LD_INT 70
6031: PPUSH
6032: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6036: LD_INT 35
6038: PPUSH
6039: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6043: LD_EXP 38
6047: PPUSH
6048: LD_INT 109
6050: PPUSH
6051: LD_INT 33
6053: PPUSH
6054: CALL_OW 307
6058: IFFALSE 6036
// Say ( Heike , DH-Fail-2 ) ;
6060: LD_EXP 38
6064: PPUSH
6065: LD_STRING DH-Fail-2
6067: PPUSH
6068: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6072: LD_EXP 38
6076: PPUSH
6077: LD_INT 111
6079: PPUSH
6080: LD_INT 48
6082: PPUSH
6083: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6094: LD_EXP 38
6098: PPUSH
6099: LD_INT 111
6101: PPUSH
6102: LD_INT 48
6104: PPUSH
6105: CALL_OW 297
6109: PUSH
6110: LD_INT 4
6112: LESS
6113: IFFALSE 6087
// AddComMoveXY ( Heike , 106 , 72 ) ;
6115: LD_EXP 38
6119: PPUSH
6120: LD_INT 106
6122: PPUSH
6123: LD_INT 72
6125: PPUSH
6126: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6130: LD_EXP 38
6134: PPUSH
6135: LD_INT 103
6137: PPUSH
6138: LD_INT 80
6140: PPUSH
6141: CALL_OW 171
// uc_side := 3 ;
6145: LD_ADDR_OWVAR 20
6149: PUSH
6150: LD_INT 3
6152: ST_TO_ADDR
// uc_nation := 3 ;
6153: LD_ADDR_OWVAR 21
6157: PUSH
6158: LD_INT 3
6160: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6161: LD_INT 1
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 6
6169: PPUSH
6170: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6174: LD_ADDR_OWVAR 29
6178: PUSH
6179: LD_INT 12
6181: PUSH
6182: LD_INT 12
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: ST_TO_ADDR
// un := CreateHuman ;
6189: LD_ADDR_VAR 0 3
6193: PUSH
6194: CALL_OW 44
6198: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6199: LD_VAR 0 3
6203: PPUSH
6204: LD_INT 134
6206: PPUSH
6207: LD_INT 52
6209: PPUSH
6210: LD_INT 4
6212: PPUSH
6213: LD_INT 0
6215: PPUSH
6216: CALL 66154 0 5
// ComTurnUnit ( un , Heike ) ;
6220: LD_VAR 0 3
6224: PPUSH
6225: LD_EXP 38
6229: PPUSH
6230: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6234: LD_VAR 0 3
6238: PPUSH
6239: LD_EXP 38
6243: PPUSH
6244: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_STRING DRum-Fail-3
6255: PPUSH
6256: CALL_OW 88
// for i := 1 to 3 do
6260: LD_ADDR_VAR 0 2
6264: PUSH
6265: DOUBLE
6266: LD_INT 1
6268: DEC
6269: ST_TO_ADDR
6270: LD_INT 3
6272: PUSH
6273: FOR_TO
6274: IFFALSE 6347
// begin PrepareSoldier ( false , 10 ) ;
6276: LD_INT 0
6278: PPUSH
6279: LD_INT 10
6281: PPUSH
6282: CALL_OW 381
// un := CreateHuman ;
6286: LD_ADDR_VAR 0 3
6290: PUSH
6291: CALL_OW 44
6295: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6296: LD_ADDR_VAR 0 4
6300: PUSH
6301: LD_VAR 0 4
6305: PPUSH
6306: LD_VAR 0 3
6310: PPUSH
6311: CALL 64014 0 2
6315: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6316: LD_VAR 0 3
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6331: LD_VAR 0 3
6335: PPUSH
6336: LD_EXP 38
6340: PPUSH
6341: CALL_OW 119
// end ;
6345: GO 6273
6347: POP
6348: POP
// repeat wait ( 0 0$1 ) ;
6349: LD_INT 35
6351: PPUSH
6352: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6356: LD_VAR 0 4
6360: PPUSH
6361: LD_INT 101
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL_OW 72
6375: PUSH
6376: LD_INT 1
6378: GREATER
6379: IFFALSE 6349
// wait ( 0 0$1 ) ;
6381: LD_INT 35
6383: PPUSH
6384: CALL_OW 67
// DialogueOn ;
6388: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6392: LD_EXP 38
6396: PPUSH
6397: LD_STRING DH-Fail-4
6399: PPUSH
6400: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6404: LD_EXP 38
6408: PPUSH
6409: LD_STRING DH-Fail-5
6411: PPUSH
6412: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6416: LD_EXP 38
6420: PPUSH
6421: LD_STRING DH-Fail-6
6423: PPUSH
6424: CALL_OW 88
// DialogueOff ;
6428: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6432: LD_VAR 0 4
6436: PPUSH
6437: LD_EXP 38
6441: PPUSH
6442: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6446: LD_INT 35
6448: PPUSH
6449: CALL_OW 67
// until IsDying ( Heike ) ;
6453: LD_EXP 38
6457: PPUSH
6458: CALL_OW 303
6462: IFFALSE 6446
// KillUnit ( Heike ) ;
6464: LD_EXP 38
6468: PPUSH
6469: CALL_OW 66
// wait ( 0 0$4 ) ;
6473: LD_INT 140
6475: PPUSH
6476: CALL_OW 67
// ResetFog ;
6480: CALL_OW 335
// DialogueOn ;
6484: CALL_OW 6
// dwait ( 0 0$1 ) ;
6488: LD_INT 35
6490: PPUSH
6491: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6495: LD_ADDR_EXP 38
6499: PUSH
6500: LD_STRING Heike
6502: PPUSH
6503: LD_EXP 1
6507: NOT
6508: PPUSH
6509: LD_EXP 2
6513: PPUSH
6514: CALL 26565 0 3
6518: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6519: LD_EXP 38
6523: PPUSH
6524: LD_STRING DH-Fail-7
6526: PPUSH
6527: CALL_OW 89
// DialogueOff ;
6531: CALL_OW 7
// YouLost ( Fail ) ;
6535: LD_STRING Fail
6537: PPUSH
6538: CALL_OW 104
// end ;
6542: LD_VAR 0 1
6546: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6547: LD_INT 2
6549: PPUSH
6550: LD_INT 173
6552: PPUSH
6553: LD_INT 29
6555: PPUSH
6556: CALL_OW 293
6560: PUSH
6561: LD_EXP 38
6565: PPUSH
6566: LD_INT 173
6568: PPUSH
6569: LD_INT 29
6571: PPUSH
6572: CALL_OW 297
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: AND
6581: IFFALSE 6598
6583: GO 6585
6585: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6586: LD_EXP 38
6590: PPUSH
6591: LD_STRING DH-EastRoad
6593: PPUSH
6594: CALL_OW 88
6598: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6599: LD_INT 2
6601: PPUSH
6602: LD_INT 149
6604: PPUSH
6605: LD_INT 3
6607: PPUSH
6608: CALL_OW 293
6612: PUSH
6613: LD_EXP 38
6617: PPUSH
6618: LD_INT 149
6620: PPUSH
6621: LD_INT 3
6623: PPUSH
6624: CALL_OW 297
6628: PUSH
6629: LD_INT 6
6631: LESS
6632: AND
6633: IFFALSE 6650
6635: GO 6637
6637: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6638: LD_EXP 38
6642: PPUSH
6643: LD_STRING DH-EastRoad
6645: PPUSH
6646: CALL_OW 88
6650: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6651: LD_INT 2
6653: PPUSH
6654: LD_INT 217
6656: PPUSH
6657: LD_INT 120
6659: PPUSH
6660: CALL_OW 293
6664: PUSH
6665: LD_EXP 38
6669: PPUSH
6670: LD_INT 217
6672: PPUSH
6673: LD_INT 120
6675: PPUSH
6676: CALL_OW 297
6680: PUSH
6681: LD_INT 6
6683: LESS
6684: AND
6685: IFFALSE 6702
6687: GO 6689
6689: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6690: LD_EXP 38
6694: PPUSH
6695: LD_STRING DH-EastEnd
6697: PPUSH
6698: CALL_OW 88
6702: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6703: LD_EXP 38
6707: PPUSH
6708: LD_INT 11
6710: PPUSH
6711: CALL_OW 308
6715: IFFALSE 6753
6717: GO 6719
6719: DISABLE
// begin if not heikeSquad then
6720: LD_EXP 14
6724: NOT
6725: IFFALSE 6741
// Say ( Heike , DH-Hill ) else
6727: LD_EXP 38
6731: PPUSH
6732: LD_STRING DH-Hill
6734: PPUSH
6735: CALL_OW 88
6739: GO 6753
// Say ( Heike , DH-Hill-a ) ;
6741: LD_EXP 38
6745: PPUSH
6746: LD_STRING DH-Hill-a
6748: PPUSH
6749: CALL_OW 88
// end ;
6753: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6754: LD_EXP 38
6758: PPUSH
6759: LD_INT 12
6761: PPUSH
6762: CALL_OW 308
6766: IFFALSE 6948
6768: GO 6770
6770: DISABLE
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// begin DialogueOn ;
6776: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6780: LD_EXP 38
6784: PPUSH
6785: CALL_OW 87
// x := GetX ( Heike ) ;
6789: LD_ADDR_VAR 0 1
6793: PUSH
6794: LD_EXP 38
6798: PPUSH
6799: CALL_OW 250
6803: ST_TO_ADDR
// y := GetY ( Heike ) ;
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: LD_EXP 38
6813: PPUSH
6814: CALL_OW 251
6818: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: LD_INT 2
6831: PPUSH
6832: LD_INT 12
6834: NEG
6835: PPUSH
6836: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_VAR 0 2
6849: PPUSH
6850: LD_INT 2
6852: PPUSH
6853: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6857: LD_INT 2
6859: PUSH
6860: LD_INT 30
6862: PUSH
6863: LD_INT 32
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 30
6872: PUSH
6873: LD_INT 33
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: PPUSH
6885: CALL_OW 69
6889: IFFALSE 6901
// v := 3 else
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: LD_INT 3
6898: ST_TO_ADDR
6899: GO 6909
// v := 2 ;
6901: LD_ADDR_VAR 0 3
6905: PUSH
6906: LD_INT 2
6908: ST_TO_ADDR
// disable ;
6909: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
6910: LD_EXP 38
6914: PPUSH
6915: LD_STRING DH-Outpost-
6917: PUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_VAR 0 3
6925: PPUSH
6926: CALL_OW 12
6930: STR
6931: PPUSH
6932: CALL_OW 88
// DialogueOff ;
6936: CALL_OW 7
// wait ( 0 0$10 ) ;
6940: LD_INT 350
6942: PPUSH
6943: CALL_OW 67
// enable ;
6947: ENABLE
// end ;
6948: PPOPN 3
6950: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
6951: LD_EXP 38
6955: PPUSH
6956: LD_INT 19
6958: PPUSH
6959: CALL_OW 308
6963: PUSH
6964: LD_EXP 22
6968: NOT
6969: AND
6970: PUSH
6971: LD_EXP 30
6975: NOT
6976: AND
6977: IFFALSE 7050
6979: GO 6981
6981: DISABLE
// begin DialogueOn ;
6982: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
6986: LD_INT 152
6988: PPUSH
6989: LD_INT 115
6991: PPUSH
6992: LD_INT 2
6994: PPUSH
6995: LD_INT 16
6997: NEG
6998: PPUSH
6999: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7003: LD_INT 152
7005: PPUSH
7006: LD_INT 115
7008: PPUSH
7009: LD_INT 2
7011: PPUSH
7012: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7016: LD_INT 152
7018: PPUSH
7019: LD_INT 115
7021: PPUSH
7022: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7026: LD_EXP 38
7030: PPUSH
7031: LD_STRING DH-Stealth-1
7033: PPUSH
7034: CALL_OW 88
// DialogueOff ;
7038: CALL_OW 7
// adminAreaDiscovered := true ;
7042: LD_ADDR_EXP 22
7046: PUSH
7047: LD_INT 1
7049: ST_TO_ADDR
// end ;
7050: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7051: LD_INT 2
7053: PPUSH
7054: LD_EXP 39
7058: PPUSH
7059: CALL_OW 292
7063: PUSH
7064: LD_EXP 38
7068: PPUSH
7069: LD_EXP 39
7073: PPUSH
7074: CALL_OW 296
7078: PUSH
7079: LD_INT 6
7081: LESS
7082: AND
7083: PUSH
7084: LD_EXP 17
7088: NOT
7089: AND
7090: PUSH
7091: LD_EXP 30
7095: NOT
7096: AND
7097: IFFALSE 7203
7099: GO 7101
7101: DISABLE
// begin DialogueOn ;
7102: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7106: LD_EXP 39
7110: PPUSH
7111: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7115: LD_EXP 39
7119: PPUSH
7120: LD_EXP 38
7124: PPUSH
7125: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7129: LD_EXP 38
7133: PPUSH
7134: LD_EXP 39
7138: PPUSH
7139: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7143: LD_EXP 38
7147: PPUSH
7148: LD_STRING DH-Givi-1
7150: PPUSH
7151: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7155: LD_EXP 39
7159: PPUSH
7160: LD_STRING DG-Givi-2
7162: PPUSH
7163: CALL_OW 88
// DialogueOff ;
7167: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7171: LD_EXP 39
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7183: LD_ADDR_EXP 14
7187: PUSH
7188: LD_EXP 14
7192: PPUSH
7193: LD_EXP 39
7197: PPUSH
7198: CALL 64014 0 2
7202: ST_TO_ADDR
// end ;
7203: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7204: LD_INT 2
7206: PPUSH
7207: LD_EXP 44
7211: PPUSH
7212: CALL_OW 292
7216: PUSH
7217: LD_EXP 38
7221: PPUSH
7222: LD_EXP 44
7226: PPUSH
7227: CALL_OW 296
7231: PUSH
7232: LD_INT 6
7234: LESS
7235: AND
7236: PUSH
7237: LD_EXP 17
7241: NOT
7242: AND
7243: PUSH
7244: LD_EXP 30
7248: NOT
7249: AND
7250: IFFALSE 7356
7252: GO 7254
7254: DISABLE
// begin DialogueOn ;
7255: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7259: LD_EXP 44
7263: PPUSH
7264: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7268: LD_EXP 44
7272: PPUSH
7273: LD_EXP 38
7277: PPUSH
7278: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7282: LD_EXP 38
7286: PPUSH
7287: LD_EXP 44
7291: PPUSH
7292: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7296: LD_EXP 38
7300: PPUSH
7301: LD_STRING DH-Sophia-1
7303: PPUSH
7304: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7308: LD_EXP 44
7312: PPUSH
7313: LD_STRING DS-Sophia-2
7315: PPUSH
7316: CALL_OW 88
// DialogueOff ;
7320: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7324: LD_EXP 44
7328: PPUSH
7329: LD_INT 2
7331: PPUSH
7332: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7336: LD_ADDR_EXP 14
7340: PUSH
7341: LD_EXP 14
7345: PPUSH
7346: LD_EXP 44
7350: PPUSH
7351: CALL 64014 0 2
7355: ST_TO_ADDR
// end ;
7356: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7357: LD_INT 2
7359: PPUSH
7360: LD_EXP 46
7364: PPUSH
7365: CALL_OW 292
7369: PUSH
7370: LD_EXP 38
7374: PPUSH
7375: LD_EXP 46
7379: PPUSH
7380: CALL_OW 296
7384: PUSH
7385: LD_INT 6
7387: LESS
7388: AND
7389: PUSH
7390: LD_EXP 17
7394: NOT
7395: AND
7396: PUSH
7397: LD_EXP 30
7401: NOT
7402: AND
7403: IFFALSE 7499
7405: GO 7407
7407: DISABLE
// begin DialogueOn ;
7408: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7412: LD_EXP 46
7416: PPUSH
7417: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7421: LD_EXP 38
7425: PPUSH
7426: LD_STRING DH-Olaf-1
7428: PPUSH
7429: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7433: LD_EXP 46
7437: PPUSH
7438: LD_STRING DO-Olaf-2
7440: PPUSH
7441: CALL_OW 88
// if explosionsTakenByRussians then
7445: LD_EXP 21
7449: IFFALSE 7463
// Say ( Olaf , DO-Olaf-a-3 ) ;
7451: LD_EXP 46
7455: PPUSH
7456: LD_STRING DO-Olaf-a-3
7458: PPUSH
7459: CALL_OW 88
// DialogueOff ;
7463: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7467: LD_EXP 46
7471: PPUSH
7472: LD_INT 2
7474: PPUSH
7475: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7479: LD_ADDR_EXP 14
7483: PUSH
7484: LD_EXP 14
7488: PPUSH
7489: LD_EXP 46
7493: PPUSH
7494: CALL 64014 0 2
7498: ST_TO_ADDR
// end ;
7499: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 40
7507: PPUSH
7508: CALL_OW 292
7512: PUSH
7513: LD_EXP 38
7517: PPUSH
7518: LD_EXP 40
7522: PPUSH
7523: CALL_OW 296
7527: PUSH
7528: LD_INT 6
7530: LESS
7531: AND
7532: PUSH
7533: LD_EXP 17
7537: NOT
7538: AND
7539: PUSH
7540: LD_EXP 30
7544: NOT
7545: AND
7546: IFFALSE 7774
7548: GO 7550
7550: DISABLE
7551: LD_INT 0
7553: PPUSH
7554: PPUSH
// begin DialogueOn ;
7555: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7559: LD_EXP 40
7563: PPUSH
7564: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7568: LD_ADDR_VAR 0 2
7572: PUSH
7573: LD_INT 18
7575: PPUSH
7576: LD_INT 0
7578: PPUSH
7579: CALL_OW 517
7583: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
7584: LD_ADDR_VAR 0 1
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_VAR 0 2
7598: PUSH
7599: LD_INT 1
7601: ARRAY
7602: PUSH
7603: FOR_TO
7604: IFFALSE 7686
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
7606: LD_VAR 0 2
7610: PUSH
7611: LD_INT 1
7613: ARRAY
7614: PUSH
7615: LD_VAR 0 1
7619: ARRAY
7620: PPUSH
7621: LD_VAR 0 2
7625: PUSH
7626: LD_INT 2
7628: ARRAY
7629: PUSH
7630: LD_VAR 0 1
7634: ARRAY
7635: PPUSH
7636: LD_INT 2
7638: PPUSH
7639: LD_INT 3
7641: NEG
7642: PPUSH
7643: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
7647: LD_VAR 0 2
7651: PUSH
7652: LD_INT 1
7654: ARRAY
7655: PUSH
7656: LD_VAR 0 1
7660: ARRAY
7661: PPUSH
7662: LD_VAR 0 2
7666: PUSH
7667: LD_INT 2
7669: ARRAY
7670: PUSH
7671: LD_VAR 0 1
7675: ARRAY
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 331
// end ;
7684: GO 7603
7686: POP
7687: POP
// Say ( Mike , DM-Mike-1 ) ;
7688: LD_EXP 40
7692: PPUSH
7693: LD_STRING DM-Mike-1
7695: PPUSH
7696: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
7700: LD_EXP 38
7704: PPUSH
7705: LD_STRING DH-Mike-2
7707: PPUSH
7708: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
7712: LD_INT 78
7714: PPUSH
7715: LD_INT 104
7717: PPUSH
7718: CALL_OW 84
// dwait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7729: LD_EXP 38
7733: PPUSH
7734: CALL_OW 87
// DialogueOff ;
7738: CALL_OW 7
// SetSide ( Mike , 2 ) ;
7742: LD_EXP 40
7746: PPUSH
7747: LD_INT 2
7749: PPUSH
7750: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
7754: LD_ADDR_EXP 14
7758: PUSH
7759: LD_EXP 14
7763: PPUSH
7764: LD_EXP 40
7768: PPUSH
7769: CALL 64014 0 2
7773: ST_TO_ADDR
// end ;
7774: PPOPN 2
7776: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
7777: LD_EXP 38
7781: PPUSH
7782: LD_EXP 43
7786: PPUSH
7787: CALL_OW 296
7791: PUSH
7792: LD_INT 6
7794: LESS
7795: PUSH
7796: LD_EXP 43
7800: PPUSH
7801: CALL_OW 257
7805: PUSH
7806: LD_INT 33
7808: EQUAL
7809: AND
7810: PUSH
7811: LD_EXP 17
7815: NOT
7816: AND
7817: PUSH
7818: LD_EXP 43
7822: PPUSH
7823: CALL_OW 302
7827: AND
7828: PUSH
7829: LD_EXP 20
7833: AND
7834: PUSH
7835: LD_EXP 43
7839: PUSH
7840: LD_EXP 14
7844: IN
7845: AND
7846: PUSH
7847: LD_EXP 43
7851: PPUSH
7852: CALL_OW 255
7856: PUSH
7857: LD_INT 2
7859: EQUAL
7860: AND
7861: IFFALSE 7890
7863: GO 7865
7865: DISABLE
// begin DialogueOn ;
7866: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
7870: LD_EXP 38
7874: PPUSH
7875: LD_STRING DH-Kaia-Revolver-2
7877: PPUSH
7878: CALL_OW 88
// SetClassKaiaRevolver ;
7882: CALL 1686 0 0
// DialogueOff ;
7886: CALL_OW 7
// end ;
7890: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
7891: LD_EXP 41
7895: PUSH
7896: LD_EXP 48
7900: AND
7901: PUSH
7902: LD_EXP 48
7906: PPUSH
7907: CALL_OW 255
7911: PUSH
7912: LD_INT 2
7914: NONEQUAL
7915: AND
7916: PUSH
7917: LD_EXP 41
7921: PPUSH
7922: CALL_OW 255
7926: PUSH
7927: LD_INT 2
7929: NONEQUAL
7930: AND
7931: PUSH
7932: LD_EXP 14
7936: PPUSH
7937: LD_INT 22
7939: PUSH
7940: LD_INT 2
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PPUSH
7947: CALL_OW 72
7951: PUSH
7952: LD_INT 5
7954: GREATER
7955: AND
7956: PUSH
7957: LD_EXP 17
7961: NOT
7962: AND
7963: PUSH
7964: LD_EXP 30
7968: NOT
7969: AND
7970: IFFALSE 8687
7972: GO 7974
7974: DISABLE
7975: LD_INT 0
7977: PPUSH
7978: PPUSH
// begin DialogueOn ;
7979: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
7983: LD_ADDR_VAR 0 2
7987: PUSH
7988: LD_EXP 39
7992: PPUSH
7993: CALL_OW 302
7997: PUSH
7998: LD_EXP 39
8002: PUSH
8003: LD_EXP 14
8007: IN
8008: AND
8009: PUSH
8010: LD_EXP 39
8014: PPUSH
8015: CALL_OW 255
8019: PUSH
8020: LD_INT 2
8022: EQUAL
8023: AND
8024: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8025: LD_EXP 38
8029: PPUSH
8030: LD_STRING DH-Med-1
8032: PPUSH
8033: CALL_OW 88
// if hasGivi then
8037: LD_VAR 0 2
8041: IFFALSE 8057
// Say ( Givi , DG-Med-2 ) else
8043: LD_EXP 39
8047: PPUSH
8048: LD_STRING DG-Med-2
8050: PPUSH
8051: CALL_OW 88
8055: GO 8162
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8057: LD_EXP 14
8061: PUSH
8062: LD_EXP 49
8066: ISECT
8067: PPUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 2
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 26
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PPUSH
8092: CALL_OW 72
8096: PUSH
8097: LD_INT 1
8099: ARRAY
8100: PPUSH
8101: LD_STRING DArm-Med-e-2
8103: PPUSH
8104: CALL_OW 88
8108: NOT
8109: IFFALSE 8162
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8111: LD_EXP 14
8115: PUSH
8116: LD_EXP 49
8120: ISECT
8121: PPUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 2
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 26
8134: PUSH
8135: LD_INT 2
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 72
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: PPUSH
8155: LD_STRING DArf-Med-e-2
8157: PPUSH
8158: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8162: LD_INT 154
8164: PPUSH
8165: LD_INT 119
8167: PPUSH
8168: LD_INT 70
8170: PPUSH
8171: CALL 18273 0 3
// Say ( Heike , DH-Med-3 ) ;
8175: LD_EXP 38
8179: PPUSH
8180: LD_STRING DH-Med-3
8182: PPUSH
8183: CALL_OW 88
// if hasGivi then
8187: LD_VAR 0 2
8191: IFFALSE 8207
// Say ( Givi , DG-Med-4 ) else
8193: LD_EXP 39
8197: PPUSH
8198: LD_STRING DG-Med-4
8200: PPUSH
8201: CALL_OW 88
8205: GO 8312
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8207: LD_EXP 14
8211: PUSH
8212: LD_EXP 49
8216: ISECT
8217: PPUSH
8218: LD_INT 22
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 26
8230: PUSH
8231: LD_INT 1
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PPUSH
8242: CALL_OW 72
8246: PUSH
8247: LD_INT 1
8249: ARRAY
8250: PPUSH
8251: LD_STRING DArm-Med-e-4
8253: PPUSH
8254: CALL_OW 88
8258: NOT
8259: IFFALSE 8312
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8261: LD_EXP 14
8265: PUSH
8266: LD_EXP 49
8270: ISECT
8271: PPUSH
8272: LD_INT 22
8274: PUSH
8275: LD_INT 2
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 26
8284: PUSH
8285: LD_INT 2
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PPUSH
8296: CALL_OW 72
8300: PUSH
8301: LD_INT 1
8303: ARRAY
8304: PPUSH
8305: LD_STRING DArf-Med-e-4
8307: PPUSH
8308: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8312: LD_ADDR_VAR 0 1
8316: PUSH
8317: LD_EXP 43
8321: PPUSH
8322: CALL_OW 302
8326: PUSH
8327: LD_EXP 43
8331: PUSH
8332: LD_EXP 14
8336: IN
8337: AND
8338: PUSH
8339: LD_EXP 43
8343: PPUSH
8344: CALL_OW 255
8348: PUSH
8349: LD_INT 2
8351: EQUAL
8352: AND
8353: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8354: LD_EXP 40
8358: PPUSH
8359: CALL_OW 302
8363: PUSH
8364: LD_EXP 40
8368: PUSH
8369: LD_EXP 14
8373: IN
8374: AND
8375: PUSH
8376: LD_EXP 43
8380: PPUSH
8381: CALL_OW 255
8385: PUSH
8386: LD_INT 2
8388: EQUAL
8389: AND
8390: IFFALSE 8422
// begin Say ( Mike , DM-Med-5 ) ;
8392: LD_EXP 40
8396: PPUSH
8397: LD_STRING DM-Med-5
8399: PPUSH
8400: CALL_OW 88
// if hasKaia then
8404: LD_VAR 0 1
8408: IFFALSE 8422
// Say ( Kaia , DK-Med-6 ) ;
8410: LD_EXP 43
8414: PPUSH
8415: LD_STRING DK-Med-6
8417: PPUSH
8418: CALL_OW 88
// end ; if hasKaia then
8422: LD_VAR 0 1
8426: IFFALSE 8667
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8428: LD_INT 175
8430: PPUSH
8431: LD_INT 123
8433: PPUSH
8434: LD_INT 2
8436: PPUSH
8437: LD_INT 8
8439: NEG
8440: PPUSH
8441: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8445: LD_INT 175
8447: PPUSH
8448: LD_INT 123
8450: PPUSH
8451: LD_INT 2
8453: PPUSH
8454: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8458: LD_INT 175
8460: PPUSH
8461: LD_INT 123
8463: PPUSH
8464: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8468: LD_EXP 43
8472: PPUSH
8473: LD_STRING DK-Med-7
8475: PPUSH
8476: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8480: LD_EXP 43
8484: PPUSH
8485: LD_STRING DK-Med-8
8487: PPUSH
8488: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8492: LD_EXP 45
8496: PPUSH
8497: CALL_OW 302
8501: PUSH
8502: LD_EXP 45
8506: PUSH
8507: LD_EXP 14
8511: IN
8512: AND
8513: PUSH
8514: LD_EXP 45
8518: PPUSH
8519: CALL_OW 255
8523: PUSH
8524: LD_INT 2
8526: EQUAL
8527: AND
8528: IFFALSE 8586
// begin Say ( Markov , DMar-Med-9 ) ;
8530: LD_EXP 45
8534: PPUSH
8535: LD_STRING DMar-Med-9
8537: PPUSH
8538: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8542: LD_EXP 43
8546: PPUSH
8547: LD_STRING DK-Med-10
8549: PPUSH
8550: CALL_OW 88
// if hasGivi then
8554: LD_VAR 0 2
8558: IFFALSE 8574
// Say ( Kaia , DK-Med-11 ) else
8560: LD_EXP 43
8564: PPUSH
8565: LD_STRING DK-Med-11
8567: PPUSH
8568: CALL_OW 88
8572: GO 8586
// Say ( Kaia , DK-Med-a-11 ) ;
8574: LD_EXP 43
8578: PPUSH
8579: LD_STRING DK-Med-a-11
8581: PPUSH
8582: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
8586: LD_EXP 42
8590: PPUSH
8591: CALL_OW 302
8595: PUSH
8596: LD_EXP 42
8600: PUSH
8601: LD_EXP 14
8605: IN
8606: AND
8607: PUSH
8608: LD_EXP 42
8612: PPUSH
8613: CALL_OW 255
8617: PUSH
8618: LD_INT 2
8620: EQUAL
8621: AND
8622: IFFALSE 8667
// begin Say ( Kamil , DKam-Med-12 ) ;
8624: LD_EXP 42
8628: PPUSH
8629: LD_STRING DKam-Med-12
8631: PPUSH
8632: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8636: LD_EXP 42
8640: PPUSH
8641: LD_STRING DKam-Med-13
8643: PPUSH
8644: CALL_OW 88
// if not hasExplosionCollected then
8648: LD_EXP 23
8652: NOT
8653: IFFALSE 8667
// Say ( Heike , DH-Med-d-14 ) ;
8655: LD_EXP 38
8659: PPUSH
8660: LD_STRING DH-Med-d-14
8662: PPUSH
8663: CALL_OW 88
// end ; end ; DialogueOff ;
8667: CALL_OW 7
// adminAreaDiscovered := true ;
8671: LD_ADDR_EXP 22
8675: PUSH
8676: LD_INT 1
8678: ST_TO_ADDR
// laundryAllowed := true ;
8679: LD_ADDR_EXP 26
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// end ;
8687: PPOPN 2
8689: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
8690: LD_EXP 41
8694: NOT
8695: PUSH
8696: LD_EXP 48
8700: AND
8701: PUSH
8702: LD_EXP 48
8706: PUSH
8707: LD_EXP 14
8711: IN
8712: NOT
8713: AND
8714: PUSH
8715: LD_EXP 14
8719: PPUSH
8720: LD_INT 22
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PPUSH
8730: CALL_OW 72
8734: PUSH
8735: LD_INT 4
8737: GREATER
8738: AND
8739: PUSH
8740: LD_EXP 17
8744: NOT
8745: AND
8746: PUSH
8747: LD_EXP 30
8751: NOT
8752: AND
8753: IFFALSE 9470
8755: GO 8757
8757: DISABLE
8758: LD_INT 0
8760: PPUSH
8761: PPUSH
// begin DialogueOn ;
8762: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8766: LD_ADDR_VAR 0 1
8770: PUSH
8771: LD_EXP 39
8775: PPUSH
8776: CALL_OW 302
8780: PUSH
8781: LD_EXP 39
8785: PUSH
8786: LD_EXP 14
8790: IN
8791: AND
8792: PUSH
8793: LD_EXP 39
8797: PPUSH
8798: CALL_OW 255
8802: PUSH
8803: LD_INT 2
8805: EQUAL
8806: AND
8807: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
8808: LD_EXP 38
8812: PPUSH
8813: LD_STRING DH-Med-a-1
8815: PPUSH
8816: CALL_OW 88
// if hasGivi then
8820: LD_VAR 0 1
8824: IFFALSE 8840
// Say ( Givi , DG-Med-a-2 ) else
8826: LD_EXP 39
8830: PPUSH
8831: LD_STRING DG-Med-a-2
8833: PPUSH
8834: CALL_OW 88
8838: GO 8945
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
8840: LD_EXP 14
8844: PUSH
8845: LD_EXP 49
8849: ISECT
8850: PPUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 2
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 26
8863: PUSH
8864: LD_INT 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_STRING DArm-Med-f-2
8886: PPUSH
8887: CALL_OW 88
8891: NOT
8892: IFFALSE 8945
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
8894: LD_EXP 14
8898: PUSH
8899: LD_EXP 49
8903: ISECT
8904: PPUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: LD_INT 26
8917: PUSH
8918: LD_INT 2
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PPUSH
8929: CALL_OW 72
8933: PUSH
8934: LD_INT 1
8936: ARRAY
8937: PPUSH
8938: LD_STRING DArf-Med-f-2
8940: PPUSH
8941: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8945: LD_INT 154
8947: PPUSH
8948: LD_INT 119
8950: PPUSH
8951: LD_INT 70
8953: PPUSH
8954: CALL 18273 0 3
// Say ( Heike , DH-Med-a-3 ) ;
8958: LD_EXP 38
8962: PPUSH
8963: LD_STRING DH-Med-a-3
8965: PPUSH
8966: CALL_OW 88
// if hasGivi then
8970: LD_VAR 0 1
8974: IFFALSE 8990
// Say ( Givi , DG-Med-a-4 ) else
8976: LD_EXP 39
8980: PPUSH
8981: LD_STRING DG-Med-a-4
8983: PPUSH
8984: CALL_OW 88
8988: GO 9095
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
8990: LD_EXP 14
8994: PUSH
8995: LD_EXP 49
8999: ISECT
9000: PPUSH
9001: LD_INT 22
9003: PUSH
9004: LD_INT 2
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 26
9013: PUSH
9014: LD_INT 1
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 72
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PPUSH
9034: LD_STRING DArm-Med-f-4
9036: PPUSH
9037: CALL_OW 88
9041: NOT
9042: IFFALSE 9095
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9044: LD_EXP 14
9048: PUSH
9049: LD_EXP 49
9053: ISECT
9054: PPUSH
9055: LD_INT 22
9057: PUSH
9058: LD_INT 2
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 26
9067: PUSH
9068: LD_INT 2
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PPUSH
9079: CALL_OW 72
9083: PUSH
9084: LD_INT 1
9086: ARRAY
9087: PPUSH
9088: LD_STRING DArf-Med-f-4
9090: PPUSH
9091: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 43
9104: PPUSH
9105: CALL_OW 302
9109: PUSH
9110: LD_EXP 43
9114: PUSH
9115: LD_EXP 14
9119: IN
9120: AND
9121: PUSH
9122: LD_EXP 43
9126: PPUSH
9127: CALL_OW 255
9131: PUSH
9132: LD_INT 2
9134: EQUAL
9135: AND
9136: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9137: LD_EXP 40
9141: PPUSH
9142: CALL_OW 302
9146: PUSH
9147: LD_EXP 40
9151: PUSH
9152: LD_EXP 14
9156: IN
9157: AND
9158: PUSH
9159: LD_EXP 40
9163: PPUSH
9164: CALL_OW 255
9168: PUSH
9169: LD_INT 2
9171: EQUAL
9172: AND
9173: IFFALSE 9205
// begin Say ( Mike , DM-Med-5 ) ;
9175: LD_EXP 40
9179: PPUSH
9180: LD_STRING DM-Med-5
9182: PPUSH
9183: CALL_OW 88
// if hasKaia then
9187: LD_VAR 0 2
9191: IFFALSE 9205
// Say ( Kaia , DK-Med-6 ) ;
9193: LD_EXP 43
9197: PPUSH
9198: LD_STRING DK-Med-6
9200: PPUSH
9201: CALL_OW 88
// end ; if hasKaia then
9205: LD_VAR 0 2
9209: IFFALSE 9450
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9211: LD_INT 175
9213: PPUSH
9214: LD_INT 123
9216: PPUSH
9217: LD_INT 2
9219: PPUSH
9220: LD_INT 8
9222: NEG
9223: PPUSH
9224: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9228: LD_INT 175
9230: PPUSH
9231: LD_INT 123
9233: PPUSH
9234: LD_INT 2
9236: PPUSH
9237: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9241: LD_INT 175
9243: PPUSH
9244: LD_INT 123
9246: PPUSH
9247: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9251: LD_EXP 43
9255: PPUSH
9256: LD_STRING DK-Med-7
9258: PPUSH
9259: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9263: LD_EXP 43
9267: PPUSH
9268: LD_STRING DK-Med-8
9270: PPUSH
9271: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9275: LD_EXP 45
9279: PPUSH
9280: CALL_OW 302
9284: PUSH
9285: LD_EXP 45
9289: PUSH
9290: LD_EXP 14
9294: IN
9295: AND
9296: PUSH
9297: LD_EXP 45
9301: PPUSH
9302: CALL_OW 255
9306: PUSH
9307: LD_INT 2
9309: EQUAL
9310: AND
9311: IFFALSE 9369
// begin Say ( Markov , DMar-Med-9 ) ;
9313: LD_EXP 45
9317: PPUSH
9318: LD_STRING DMar-Med-9
9320: PPUSH
9321: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9325: LD_EXP 43
9329: PPUSH
9330: LD_STRING DK-Med-10
9332: PPUSH
9333: CALL_OW 88
// if hasGivi then
9337: LD_VAR 0 1
9341: IFFALSE 9357
// Say ( Kaia , DK-Med-11 ) else
9343: LD_EXP 43
9347: PPUSH
9348: LD_STRING DK-Med-11
9350: PPUSH
9351: CALL_OW 88
9355: GO 9369
// Say ( Kaia , DK-Med-a-11 ) ;
9357: LD_EXP 43
9361: PPUSH
9362: LD_STRING DK-Med-a-11
9364: PPUSH
9365: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9369: LD_EXP 42
9373: PPUSH
9374: CALL_OW 302
9378: PUSH
9379: LD_EXP 42
9383: PUSH
9384: LD_EXP 14
9388: IN
9389: AND
9390: PUSH
9391: LD_EXP 42
9395: PPUSH
9396: CALL_OW 255
9400: PUSH
9401: LD_INT 2
9403: EQUAL
9404: AND
9405: IFFALSE 9450
// begin Say ( Kamil , DKam-Med-12 ) ;
9407: LD_EXP 42
9411: PPUSH
9412: LD_STRING DKam-Med-12
9414: PPUSH
9415: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9419: LD_EXP 42
9423: PPUSH
9424: LD_STRING DKam-Med-13
9426: PPUSH
9427: CALL_OW 88
// if not hasExplosionCollected then
9431: LD_EXP 23
9435: NOT
9436: IFFALSE 9450
// Say ( Heike , DH-Med-d-14 ) ;
9438: LD_EXP 38
9442: PPUSH
9443: LD_STRING DH-Med-d-14
9445: PPUSH
9446: CALL_OW 88
// end ; end ; DialogueOff ;
9450: CALL_OW 7
// adminAreaDiscovered := true ;
9454: LD_ADDR_EXP 22
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// laundryAllowed := true ;
9462: LD_ADDR_EXP 26
9466: PUSH
9467: LD_INT 1
9469: ST_TO_ADDR
// end ;
9470: PPOPN 2
9472: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9473: LD_EXP 41
9477: PUSH
9478: LD_EXP 48
9482: NOT
9483: AND
9484: PUSH
9485: LD_EXP 41
9489: PUSH
9490: LD_EXP 14
9494: IN
9495: NOT
9496: AND
9497: PUSH
9498: LD_EXP 14
9502: PPUSH
9503: LD_INT 22
9505: PUSH
9506: LD_INT 2
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PPUSH
9513: CALL_OW 72
9517: PUSH
9518: LD_INT 4
9520: GREATER
9521: AND
9522: PUSH
9523: LD_EXP 17
9527: NOT
9528: AND
9529: PUSH
9530: LD_EXP 30
9534: NOT
9535: AND
9536: IFFALSE 10253
9538: GO 9540
9540: DISABLE
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
// begin DialogueOn ;
9545: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9549: LD_ADDR_VAR 0 1
9553: PUSH
9554: LD_EXP 39
9558: PPUSH
9559: CALL_OW 302
9563: PUSH
9564: LD_EXP 39
9568: PUSH
9569: LD_EXP 14
9573: IN
9574: AND
9575: PUSH
9576: LD_EXP 39
9580: PPUSH
9581: CALL_OW 255
9585: PUSH
9586: LD_INT 2
9588: EQUAL
9589: AND
9590: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
9591: LD_EXP 38
9595: PPUSH
9596: LD_STRING DH-Med-b-1
9598: PPUSH
9599: CALL_OW 88
// if hasGivi then
9603: LD_VAR 0 1
9607: IFFALSE 9623
// Say ( Givi , DG-Med-a-2 ) else
9609: LD_EXP 39
9613: PPUSH
9614: LD_STRING DG-Med-a-2
9616: PPUSH
9617: CALL_OW 88
9621: GO 9728
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9623: LD_EXP 14
9627: PUSH
9628: LD_EXP 49
9632: ISECT
9633: PPUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 2
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 26
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL_OW 72
9662: PUSH
9663: LD_INT 1
9665: ARRAY
9666: PPUSH
9667: LD_STRING DArm-Med-f-2
9669: PPUSH
9670: CALL_OW 88
9674: NOT
9675: IFFALSE 9728
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9677: LD_EXP 14
9681: PUSH
9682: LD_EXP 49
9686: ISECT
9687: PPUSH
9688: LD_INT 22
9690: PUSH
9691: LD_INT 2
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 26
9700: PUSH
9701: LD_INT 2
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 72
9716: PUSH
9717: LD_INT 1
9719: ARRAY
9720: PPUSH
9721: LD_STRING DArf-Med-f-2
9723: PPUSH
9724: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9728: LD_INT 154
9730: PPUSH
9731: LD_INT 119
9733: PPUSH
9734: LD_INT 70
9736: PPUSH
9737: CALL 18273 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9741: LD_EXP 38
9745: PPUSH
9746: LD_STRING DH-Med-a-3
9748: PPUSH
9749: CALL_OW 88
// if hasGivi then
9753: LD_VAR 0 1
9757: IFFALSE 9773
// Say ( Givi , DG-Med-a-4 ) else
9759: LD_EXP 39
9763: PPUSH
9764: LD_STRING DG-Med-a-4
9766: PPUSH
9767: CALL_OW 88
9771: GO 9878
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9773: LD_EXP 14
9777: PUSH
9778: LD_EXP 49
9782: ISECT
9783: PPUSH
9784: LD_INT 22
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 26
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 72
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PPUSH
9817: LD_STRING DArm-Med-f-4
9819: PPUSH
9820: CALL_OW 88
9824: NOT
9825: IFFALSE 9878
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9827: LD_EXP 14
9831: PUSH
9832: LD_EXP 49
9836: ISECT
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 26
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 72
9866: PUSH
9867: LD_INT 1
9869: ARRAY
9870: PPUSH
9871: LD_STRING DArf-Med-f-4
9873: PPUSH
9874: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9878: LD_ADDR_VAR 0 2
9882: PUSH
9883: LD_EXP 43
9887: PPUSH
9888: CALL_OW 302
9892: PUSH
9893: LD_EXP 43
9897: PUSH
9898: LD_EXP 14
9902: IN
9903: AND
9904: PUSH
9905: LD_EXP 43
9909: PPUSH
9910: CALL_OW 255
9914: PUSH
9915: LD_INT 2
9917: EQUAL
9918: AND
9919: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9920: LD_EXP 40
9924: PPUSH
9925: CALL_OW 302
9929: PUSH
9930: LD_EXP 40
9934: PUSH
9935: LD_EXP 14
9939: IN
9940: AND
9941: PUSH
9942: LD_EXP 40
9946: PPUSH
9947: CALL_OW 255
9951: PUSH
9952: LD_INT 2
9954: EQUAL
9955: AND
9956: IFFALSE 9988
// begin Say ( Mike , DM-Med-5 ) ;
9958: LD_EXP 40
9962: PPUSH
9963: LD_STRING DM-Med-5
9965: PPUSH
9966: CALL_OW 88
// if hasKaia then
9970: LD_VAR 0 2
9974: IFFALSE 9988
// Say ( Kaia , DK-Med-6 ) ;
9976: LD_EXP 43
9980: PPUSH
9981: LD_STRING DK-Med-6
9983: PPUSH
9984: CALL_OW 88
// end ; if hasKaia then
9988: LD_VAR 0 2
9992: IFFALSE 10233
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9994: LD_INT 175
9996: PPUSH
9997: LD_INT 123
9999: PPUSH
10000: LD_INT 2
10002: PPUSH
10003: LD_INT 8
10005: NEG
10006: PPUSH
10007: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10011: LD_INT 175
10013: PPUSH
10014: LD_INT 123
10016: PPUSH
10017: LD_INT 2
10019: PPUSH
10020: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10024: LD_INT 175
10026: PPUSH
10027: LD_INT 123
10029: PPUSH
10030: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10034: LD_EXP 43
10038: PPUSH
10039: LD_STRING DK-Med-7
10041: PPUSH
10042: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10046: LD_EXP 43
10050: PPUSH
10051: LD_STRING DK-Med-8
10053: PPUSH
10054: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10058: LD_EXP 45
10062: PPUSH
10063: CALL_OW 302
10067: PUSH
10068: LD_EXP 45
10072: PUSH
10073: LD_EXP 14
10077: IN
10078: AND
10079: PUSH
10080: LD_EXP 45
10084: PPUSH
10085: CALL_OW 255
10089: PUSH
10090: LD_INT 2
10092: EQUAL
10093: AND
10094: IFFALSE 10152
// begin Say ( Markov , DMar-Med-9 ) ;
10096: LD_EXP 45
10100: PPUSH
10101: LD_STRING DMar-Med-9
10103: PPUSH
10104: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10108: LD_EXP 43
10112: PPUSH
10113: LD_STRING DK-Med-10
10115: PPUSH
10116: CALL_OW 88
// if hasGivi then
10120: LD_VAR 0 1
10124: IFFALSE 10140
// Say ( Kaia , DK-Med-11 ) else
10126: LD_EXP 43
10130: PPUSH
10131: LD_STRING DK-Med-11
10133: PPUSH
10134: CALL_OW 88
10138: GO 10152
// Say ( Kaia , DK-Med-a-11 ) ;
10140: LD_EXP 43
10144: PPUSH
10145: LD_STRING DK-Med-a-11
10147: PPUSH
10148: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10152: LD_EXP 42
10156: PPUSH
10157: CALL_OW 302
10161: PUSH
10162: LD_EXP 42
10166: PUSH
10167: LD_EXP 14
10171: IN
10172: AND
10173: PUSH
10174: LD_EXP 42
10178: PPUSH
10179: CALL_OW 255
10183: PUSH
10184: LD_INT 2
10186: EQUAL
10187: AND
10188: IFFALSE 10233
// begin Say ( Kamil , DKam-Med-12 ) ;
10190: LD_EXP 42
10194: PPUSH
10195: LD_STRING DKam-Med-12
10197: PPUSH
10198: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10202: LD_EXP 42
10206: PPUSH
10207: LD_STRING DKam-Med-13
10209: PPUSH
10210: CALL_OW 88
// if not hasExplosionCollected then
10214: LD_EXP 23
10218: NOT
10219: IFFALSE 10233
// Say ( Heike , DH-Med-d-14 ) ;
10221: LD_EXP 38
10225: PPUSH
10226: LD_STRING DH-Med-d-14
10228: PPUSH
10229: CALL_OW 88
// end ; end ; DialogueOff ;
10233: CALL_OW 7
// adminAreaDiscovered := true ;
10237: LD_ADDR_EXP 22
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// laundryAllowed := true ;
10245: LD_ADDR_EXP 26
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// end ;
10253: PPOPN 2
10255: END
// every 0 0$1 trigger laundryAllowed do
10256: LD_EXP 26
10260: IFFALSE 10272
10262: GO 10264
10264: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10265: LD_STRING M1-laundry
10267: PPUSH
10268: CALL_OW 337
10272: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10273: LD_EXP 41
10277: NOT
10278: PUSH
10279: LD_EXP 48
10283: NOT
10284: AND
10285: PUSH
10286: LD_EXP 46
10290: PPUSH
10291: CALL_OW 302
10295: AND
10296: PUSH
10297: LD_EXP 46
10301: PUSH
10302: LD_EXP 14
10306: IN
10307: AND
10308: PUSH
10309: LD_EXP 46
10313: PPUSH
10314: CALL_OW 255
10318: PUSH
10319: LD_INT 2
10321: EQUAL
10322: AND
10323: PUSH
10324: LD_EXP 17
10328: NOT
10329: AND
10330: PUSH
10331: LD_EXP 30
10335: NOT
10336: AND
10337: IFFALSE 10493
10339: GO 10341
10341: DISABLE
// begin DialogueOn ;
10342: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10346: LD_INT 152
10348: PPUSH
10349: LD_INT 115
10351: PPUSH
10352: LD_INT 2
10354: PPUSH
10355: LD_INT 16
10357: NEG
10358: PPUSH
10359: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10363: LD_INT 152
10365: PPUSH
10366: LD_INT 115
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10376: LD_INT 152
10378: PPUSH
10379: LD_INT 115
10381: PPUSH
10382: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10386: LD_EXP 46
10390: PPUSH
10391: LD_STRING DO-Med-c-1
10393: PPUSH
10394: CALL_OW 88
// if not hasExplosionCollected then
10398: LD_EXP 23
10402: NOT
10403: IFFALSE 10419
// Say ( Heike , DH-Med-d-14 ) else
10405: LD_EXP 38
10409: PPUSH
10410: LD_STRING DH-Med-d-14
10412: PPUSH
10413: CALL_OW 88
10417: GO 10481
// begin Say ( Heike , DH-Med-c-2 ) ;
10419: LD_EXP 38
10423: PPUSH
10424: LD_STRING DH-Med-c-2
10426: PPUSH
10427: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10431: LD_EXP 43
10435: PPUSH
10436: CALL_OW 302
10440: PUSH
10441: LD_EXP 43
10445: PUSH
10446: LD_EXP 14
10450: IN
10451: AND
10452: PUSH
10453: LD_EXP 43
10457: PPUSH
10458: CALL_OW 255
10462: PUSH
10463: LD_INT 2
10465: EQUAL
10466: AND
10467: IFFALSE 10481
// Say ( Kaia , DK-Med-c-3 ) ;
10469: LD_EXP 43
10473: PPUSH
10474: LD_STRING DK-Med-c-3
10476: PPUSH
10477: CALL_OW 88
// end ; DialogueOff ;
10481: CALL_OW 7
// adminAreaDiscovered := true ;
10485: LD_ADDR_EXP 22
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// end ;
10493: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10494: LD_EXP 43
10498: PPUSH
10499: CALL_OW 256
10503: PUSH
10504: LD_INT 250
10506: LESS
10507: PUSH
10508: LD_EXP 43
10512: PUSH
10513: LD_EXP 14
10517: IN
10518: AND
10519: PUSH
10520: LD_EXP 17
10524: AND
10525: PUSH
10526: LD_EXP 24
10530: AND
10531: IFFALSE 10660
10533: GO 10535
10535: DISABLE
// begin DialogueOn ;
10536: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10540: LD_EXP 43
10544: PPUSH
10545: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10549: LD_EXP 43
10553: PPUSH
10554: LD_STRING DK-death-1
10556: PPUSH
10557: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10561: LD_EXP 38
10565: PPUSH
10566: LD_STRING DH-death-2
10568: PPUSH
10569: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
10573: LD_EXP 43
10577: PPUSH
10578: LD_STRING DK-death-3
10580: PPUSH
10581: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
10585: LD_EXP 43
10589: PPUSH
10590: LD_STRING DK-death-4
10592: PPUSH
10593: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
10597: LD_EXP 43
10601: PPUSH
10602: LD_INT 8
10604: PPUSH
10605: CALL_OW 235
// ComStop ( Kaia ) ;
10609: LD_EXP 43
10613: PPUSH
10614: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
10618: LD_INT 8
10620: PPUSH
10621: LD_INT 2
10623: PPUSH
10624: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
10628: LD_ADDR_EXP 14
10632: PUSH
10633: LD_EXP 14
10637: PUSH
10638: LD_EXP 43
10642: DIFF
10643: ST_TO_ADDR
// DialogueOff ;
10644: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
10648: LD_EXP 40
10652: PPUSH
10653: LD_STRING DM-death-5
10655: PPUSH
10656: CALL_OW 88
// end ;
10660: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10661: LD_EXP 25
10665: NOT
10666: PUSH
10667: LD_EXP 30
10671: NOT
10672: AND
10673: PUSH
10674: LD_EXP 51
10678: PUSH
10679: LD_EXP 14
10683: IN
10684: NOT
10685: AND
10686: PUSH
10687: LD_INT 2
10689: PPUSH
10690: LD_EXP 51
10694: PPUSH
10695: CALL_OW 292
10699: AND
10700: PUSH
10701: LD_EXP 38
10705: PPUSH
10706: LD_EXP 51
10710: PPUSH
10711: CALL_OW 296
10715: PUSH
10716: LD_INT 6
10718: LESS
10719: AND
10720: PUSH
10721: LD_EXP 17
10725: NOT
10726: AND
10727: IFFALSE 10951
10729: GO 10731
10731: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
10732: LD_EXP 51
10736: PPUSH
10737: LD_EXP 38
10741: PPUSH
10742: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
10746: LD_EXP 38
10750: PPUSH
10751: LD_EXP 51
10755: PPUSH
10756: CALL_OW 119
// wait ( 0 0$0.3 ) ;
10760: LD_INT 10
10762: PPUSH
10763: CALL_OW 67
// DialogueOn ;
10767: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
10771: LD_EXP 51
10775: PPUSH
10776: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
10780: LD_EXP 38
10784: PPUSH
10785: LD_STRING DH-Deal-1
10787: PPUSH
10788: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
10792: LD_EXP 51
10796: PPUSH
10797: LD_STRING DJ-Deal-2
10799: PPUSH
10800: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
10804: LD_EXP 38
10808: PPUSH
10809: LD_STRING DH-Deal-3
10811: PPUSH
10812: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
10816: LD_EXP 51
10820: PPUSH
10821: LD_STRING DJ-Deal-4
10823: PPUSH
10824: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
10828: LD_EXP 51
10832: PPUSH
10833: LD_STRING DJ-Deal-5
10835: PPUSH
10836: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
10840: LD_EXP 51
10844: PPUSH
10845: LD_STRING DJ-Deal-6
10847: PPUSH
10848: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
10852: LD_EXP 51
10856: PPUSH
10857: LD_STRING DJ-Deal-7
10859: PPUSH
10860: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
10864: LD_EXP 38
10868: PPUSH
10869: LD_STRING DH-Deal-8
10871: PPUSH
10872: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
10876: LD_EXP 38
10880: PPUSH
10881: LD_STRING DH-Deal-9
10883: PPUSH
10884: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
10888: LD_EXP 51
10892: PPUSH
10893: LD_STRING DJ-Deal-10
10895: PPUSH
10896: CALL_OW 88
// DialogueOff ;
10900: CALL_OW 7
// contactWithAmerican := true ;
10904: LD_ADDR_EXP 25
10908: PUSH
10909: LD_INT 1
10911: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
10912: LD_STRING M1-american-out
10914: PPUSH
10915: CALL_OW 604
// SetSide ( Harris , 2 ) ;
10919: LD_EXP 51
10923: PPUSH
10924: LD_INT 2
10926: PPUSH
10927: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
10931: LD_ADDR_EXP 14
10935: PUSH
10936: LD_EXP 14
10940: PPUSH
10941: LD_EXP 51
10945: PPUSH
10946: CALL 64014 0 2
10950: ST_TO_ADDR
// end ;
10951: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10952: LD_EXP 25
10956: PUSH
10957: LD_EXP 30
10961: NOT
10962: AND
10963: PUSH
10964: LD_EXP 51
10968: PUSH
10969: LD_EXP 14
10973: IN
10974: NOT
10975: AND
10976: PUSH
10977: LD_INT 2
10979: PPUSH
10980: LD_EXP 51
10984: PPUSH
10985: CALL_OW 292
10989: AND
10990: PUSH
10991: LD_EXP 38
10995: PPUSH
10996: LD_EXP 51
11000: PPUSH
11001: CALL_OW 296
11005: PUSH
11006: LD_INT 6
11008: LESS
11009: AND
11010: PUSH
11011: LD_EXP 17
11015: NOT
11016: AND
11017: IFFALSE 11142
11019: GO 11021
11021: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11022: LD_EXP 51
11026: PPUSH
11027: LD_EXP 38
11031: PPUSH
11032: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11036: LD_EXP 38
11040: PPUSH
11041: LD_EXP 51
11045: PPUSH
11046: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11050: LD_INT 10
11052: PPUSH
11053: CALL_OW 67
// DialogueOn ;
11057: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11061: LD_EXP 51
11065: PPUSH
11066: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11070: LD_EXP 51
11074: PPUSH
11075: LD_STRING DJ-Escort-1
11077: PPUSH
11078: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11082: LD_EXP 38
11086: PPUSH
11087: LD_STRING DH-Escort-2
11089: PPUSH
11090: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11094: LD_EXP 51
11098: PPUSH
11099: LD_STRING DJ-Escort-3
11101: PPUSH
11102: CALL_OW 88
// DialogueOff ;
11106: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11110: LD_EXP 51
11114: PPUSH
11115: LD_INT 2
11117: PPUSH
11118: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11122: LD_ADDR_EXP 14
11126: PUSH
11127: LD_EXP 14
11131: PPUSH
11132: LD_EXP 51
11136: PPUSH
11137: CALL 64014 0 2
11141: ST_TO_ADDR
// end ;
11142: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11143: LD_EXP 25
11147: PUSH
11148: LD_EXP 30
11152: NOT
11153: AND
11154: PUSH
11155: LD_EXP 50
11159: PUSH
11160: LD_EXP 14
11164: DIFF
11165: PPUSH
11166: LD_INT 22
11168: PUSH
11169: LD_INT 4
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: LD_INT 120
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 101
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: LIST
11207: PPUSH
11208: CALL_OW 72
11212: AND
11213: PUSH
11214: LD_EXP 17
11218: NOT
11219: AND
11220: IFFALSE 11435
11222: GO 11224
11224: DISABLE
11225: LD_INT 0
11227: PPUSH
// begin enable ;
11228: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11229: LD_ADDR_VAR 0 1
11233: PUSH
11234: LD_EXP 50
11238: PUSH
11239: LD_EXP 14
11243: DIFF
11244: PPUSH
11245: LD_INT 22
11247: PUSH
11248: LD_INT 4
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 91
11257: PUSH
11258: LD_EXP 38
11262: PUSH
11263: LD_INT 6
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 101
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: PPUSH
11286: CALL_OW 72
11290: PPUSH
11291: LD_EXP 38
11295: PPUSH
11296: CALL_OW 74
11300: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11301: LD_VAR 0 1
11305: PPUSH
11306: LD_EXP 38
11310: PPUSH
11311: CALL_OW 296
11315: PUSH
11316: LD_INT 6
11318: LESS
11319: IFFALSE 11435
// begin DialogueOn ;
11321: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11325: LD_VAR 0 1
11329: PPUSH
11330: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11334: LD_EXP 38
11338: PPUSH
11339: LD_STRING DH-USsol-1
11341: PPUSH
11342: CALL_OW 88
// if GetSex ( un ) = sex_male then
11346: LD_VAR 0 1
11350: PPUSH
11351: CALL_OW 258
11355: PUSH
11356: LD_INT 1
11358: EQUAL
11359: IFFALSE 11375
// Say ( un , DUSM-USsol-2 ) else
11361: LD_VAR 0 1
11365: PPUSH
11366: LD_STRING DUSM-USsol-2
11368: PPUSH
11369: CALL_OW 88
11373: GO 11387
// Say ( un , DUSF-USsol-2 ) ;
11375: LD_VAR 0 1
11379: PPUSH
11380: LD_STRING DUSF-USsol-2
11382: PPUSH
11383: CALL_OW 88
// DialogueOff ;
11387: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11391: LD_ADDR_EXP 14
11395: PUSH
11396: LD_EXP 14
11400: PPUSH
11401: LD_VAR 0 1
11405: PPUSH
11406: CALL 64014 0 2
11410: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11411: LD_VAR 0 1
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 109
// SetSide ( un , 2 ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_INT 2
11430: PPUSH
11431: CALL_OW 235
// end ; end ;
11435: PPOPN 1
11437: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11438: LD_EXP 49
11442: PUSH
11443: LD_EXP 30
11447: NOT
11448: AND
11449: PUSH
11450: LD_EXP 49
11454: PUSH
11455: LD_EXP 14
11459: DIFF
11460: PPUSH
11461: LD_INT 3
11463: PUSH
11464: LD_INT 120
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 91
11480: PUSH
11481: LD_EXP 38
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 101
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 72
11513: AND
11514: PUSH
11515: LD_EXP 17
11519: NOT
11520: AND
11521: IFFALSE 11736
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
// begin enable ;
11529: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11530: LD_ADDR_VAR 0 1
11534: PUSH
11535: LD_EXP 49
11539: PUSH
11540: LD_EXP 14
11544: DIFF
11545: PPUSH
11546: LD_INT 22
11548: PUSH
11549: LD_INT 5
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 91
11558: PUSH
11559: LD_EXP 38
11563: PUSH
11564: LD_INT 6
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 101
11574: PUSH
11575: LD_INT 2
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 72
11591: PPUSH
11592: LD_EXP 38
11596: PPUSH
11597: CALL_OW 74
11601: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11602: LD_VAR 0 1
11606: PPUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL_OW 296
11616: PUSH
11617: LD_INT 6
11619: LESS
11620: IFFALSE 11736
// begin DialogueOn ;
11622: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11626: LD_VAR 0 1
11630: PPUSH
11631: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11635: LD_EXP 38
11639: PPUSH
11640: LD_STRING DH-USsol-1
11642: PPUSH
11643: CALL_OW 88
// if GetSex ( un ) = sex_male then
11647: LD_VAR 0 1
11651: PPUSH
11652: CALL_OW 258
11656: PUSH
11657: LD_INT 1
11659: EQUAL
11660: IFFALSE 11676
// Say ( un , DArm-USsol-2 ) else
11662: LD_VAR 0 1
11666: PPUSH
11667: LD_STRING DArm-USsol-2
11669: PPUSH
11670: CALL_OW 88
11674: GO 11688
// Say ( un , DArf-USsol-3 ) ;
11676: LD_VAR 0 1
11680: PPUSH
11681: LD_STRING DArf-USsol-3
11683: PPUSH
11684: CALL_OW 88
// DialogueOff ;
11688: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11692: LD_ADDR_EXP 14
11696: PUSH
11697: LD_EXP 14
11701: PPUSH
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL 64014 0 2
11711: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11712: LD_VAR 0 1
11716: PPUSH
11717: LD_INT 1
11719: PPUSH
11720: CALL_OW 109
// SetSide ( un , 2 ) ;
11724: LD_VAR 0 1
11728: PPUSH
11729: LD_INT 2
11731: PPUSH
11732: CALL_OW 235
// end ; end ;
11736: PPOPN 1
11738: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
11739: LD_EXP 50
11743: PPUSH
11744: LD_INT 101
11746: PUSH
11747: LD_INT 2
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 72
11758: PUSH
11759: LD_EXP 14
11763: PPUSH
11764: LD_INT 22
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PPUSH
11774: CALL_OW 72
11778: PUSH
11779: LD_INT 5
11781: GREATER
11782: AND
11783: PUSH
11784: LD_EXP 10
11788: NOT
11789: AND
11790: PUSH
11791: LD_EXP 30
11795: NOT
11796: AND
11797: PUSH
11798: LD_EXP 25
11802: NOT
11803: AND
11804: PUSH
11805: LD_EXP 17
11809: NOT
11810: AND
11811: IFFALSE 11926
11813: GO 11815
11815: DISABLE
11816: LD_INT 0
11818: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
11819: LD_ADDR_VAR 0 1
11823: PUSH
11824: LD_EXP 50
11828: PPUSH
11829: LD_INT 22
11831: PUSH
11832: LD_INT 4
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 101
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PPUSH
11853: CALL_OW 72
11857: PUSH
11858: LD_INT 1
11860: ARRAY
11861: ST_TO_ADDR
// DialogueOn ;
11862: CALL_OW 6
// if GetSex ( un ) = sex_male then
11866: LD_VAR 0 1
11870: PPUSH
11871: CALL_OW 258
11875: PUSH
11876: LD_INT 1
11878: EQUAL
11879: IFFALSE 11895
// Say ( un , DUSm-USsol-a-2 ) else
11881: LD_VAR 0 1
11885: PPUSH
11886: LD_STRING DUSm-USsol-a-2
11888: PPUSH
11889: CALL_OW 88
11893: GO 11907
// Say ( un , DUSf-USsol-a-2 ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_STRING DUSf-USsol-a-2
11902: PPUSH
11903: CALL_OW 88
// DialogueOff ;
11907: CALL_OW 7
// wait ( 0 0$2 ) ;
11911: LD_INT 70
11913: PPUSH
11914: CALL_OW 67
// isAlarm := true ;
11918: LD_ADDR_EXP 17
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// end ;
11926: PPOPN 1
11928: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
11929: LD_EXP 17
11933: NOT
11934: PUSH
11935: LD_EXP 39
11939: PPUSH
11940: CALL_OW 302
11944: AND
11945: PUSH
11946: LD_EXP 39
11950: PPUSH
11951: CALL_OW 255
11955: PUSH
11956: LD_INT 2
11958: EQUAL
11959: AND
11960: PUSH
11961: LD_EXP 26
11965: AND
11966: PUSH
11967: LD_EXP 28
11971: NOT
11972: AND
11973: PUSH
11974: LD_EXP 27
11978: NOT
11979: AND
11980: PUSH
11981: LD_EXP 30
11985: NOT
11986: AND
11987: PUSH
11988: LD_EXP 39
11992: PPUSH
11993: LD_INT 165
11995: PPUSH
11996: CALL 18312 0 2
12000: AND
12001: IFFALSE 12133
12003: GO 12005
12005: DISABLE
// begin enable ;
12006: ENABLE
// InGameOn ;
12007: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12011: LD_EXP 39
12015: PPUSH
12016: LD_INT 5
12018: PPUSH
12019: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12023: LD_INT 165
12025: PPUSH
12026: LD_INT 5
12028: PPUSH
12029: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12033: LD_EXP 39
12037: PPUSH
12038: LD_INT 165
12040: PPUSH
12041: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12045: LD_INT 35
12047: PPUSH
12048: CALL_OW 67
// until IsInUnit ( Givi ) ;
12052: LD_EXP 39
12056: PPUSH
12057: CALL_OW 310
12061: IFFALSE 12045
// case Query ( GiviInLaundry ) of 1 :
12063: LD_STRING GiviInLaundry
12065: PPUSH
12066: CALL_OW 97
12070: PUSH
12071: LD_INT 1
12073: DOUBLE
12074: EQUAL
12075: IFTRUE 12079
12077: GO 12086
12079: POP
// SpawnGiviAsRussian ; 2 :
12080: CALL 1818 0 0
12084: GO 12098
12086: LD_INT 2
12088: DOUBLE
12089: EQUAL
12090: IFTRUE 12094
12092: GO 12097
12094: POP
// ; end ;
12095: GO 12098
12097: POP
// ComExitBuilding ( Givi ) ;
12098: LD_EXP 39
12102: PPUSH
12103: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12107: LD_EXP 39
12111: PPUSH
12112: LD_INT 2
12114: PPUSH
12115: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12119: LD_INT 165
12121: PPUSH
12122: LD_INT 3
12124: PPUSH
12125: CALL_OW 235
// InGameOff ;
12129: CALL_OW 9
// end ;
12133: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12134: LD_EXP 17
12138: NOT
12139: PUSH
12140: LD_EXP 28
12144: AND
12145: PUSH
12146: LD_EXP 39
12150: PPUSH
12151: CALL_OW 255
12155: PUSH
12156: LD_INT 2
12158: EQUAL
12159: AND
12160: PUSH
12161: LD_EXP 39
12165: PPUSH
12166: CALL_OW 248
12170: PUSH
12171: LD_INT 3
12173: EQUAL
12174: AND
12175: PUSH
12176: LD_EXP 39
12180: PPUSH
12181: LD_INT 119
12183: PPUSH
12184: CALL 18312 0 2
12188: AND
12189: PUSH
12190: LD_EXP 30
12194: NOT
12195: AND
12196: IFFALSE 12420
12198: GO 12200
12200: DISABLE
// begin InGameOn ;
12201: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12205: LD_EXP 39
12209: PPUSH
12210: LD_INT 3
12212: PPUSH
12213: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12217: LD_EXP 39
12221: PPUSH
12222: LD_INT 119
12224: PPUSH
12225: CALL_OW 120
// wait ( 0 0$1 ) ;
12229: LD_INT 35
12231: PPUSH
12232: CALL_OW 67
// DialogueOn ;
12236: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12240: LD_EXP 39
12244: PPUSH
12245: LD_STRING DG-Captive-1
12247: PPUSH
12248: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12252: LD_EXP 57
12256: PPUSH
12257: LD_STRING DCom-Captive-2
12259: PPUSH
12260: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12264: LD_EXP 39
12268: PPUSH
12269: LD_STRING DG-Captive-3
12271: PPUSH
12272: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12276: LD_EXP 57
12280: PPUSH
12281: LD_STRING DCom-Captive-4
12283: PPUSH
12284: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12288: LD_EXP 57
12292: PPUSH
12293: CALL_OW 64
// DialogueOff ;
12297: CALL_OW 7
// InGameOff ;
12301: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12305: LD_EXP 39
12309: PPUSH
12310: LD_INT 2
12312: PPUSH
12313: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12317: LD_EXP 39
12321: PPUSH
12322: CALL_OW 122
// if Aviradze then
12326: LD_EXP 48
12330: IFFALSE 12373
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12332: LD_ADDR_EXP 14
12336: PUSH
12337: LD_EXP 14
12341: PPUSH
12342: LD_EXP 48
12346: PPUSH
12347: CALL 64014 0 2
12351: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12352: LD_EXP 48
12356: PPUSH
12357: LD_INT 2
12359: PPUSH
12360: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12364: LD_EXP 48
12368: PPUSH
12369: CALL_OW 122
// end ; if Ibrahim then
12373: LD_EXP 41
12377: IFFALSE 12420
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12379: LD_ADDR_EXP 14
12383: PUSH
12384: LD_EXP 14
12388: PPUSH
12389: LD_EXP 41
12393: PPUSH
12394: CALL 64014 0 2
12398: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12399: LD_EXP 41
12403: PPUSH
12404: LD_INT 2
12406: PPUSH
12407: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12411: LD_EXP 41
12415: PPUSH
12416: CALL_OW 122
// end ; end ;
12420: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12421: LD_EXP 17
12425: NOT
12426: PUSH
12427: LD_EXP 27
12431: AND
12432: PUSH
12433: LD_EXP 38
12437: PPUSH
12438: CALL_OW 248
12442: PUSH
12443: LD_INT 3
12445: EQUAL
12446: AND
12447: PUSH
12448: LD_EXP 38
12452: PPUSH
12453: LD_INT 119
12455: PPUSH
12456: CALL 18312 0 2
12460: AND
12461: PUSH
12462: LD_EXP 30
12466: NOT
12467: AND
12468: IFFALSE 12730
12470: GO 12472
12472: DISABLE
// begin InGameOn ;
12473: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12477: LD_EXP 38
12481: PPUSH
12482: LD_INT 3
12484: PPUSH
12485: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12489: LD_EXP 38
12493: PPUSH
12494: LD_INT 119
12496: PPUSH
12497: CALL_OW 120
// wait ( 0 0$1 ) ;
12501: LD_INT 35
12503: PPUSH
12504: CALL_OW 67
// DialogueOn ;
12508: CALL_OW 6
// if Aviradze and Ibrahim then
12512: LD_EXP 48
12516: PUSH
12517: LD_EXP 41
12521: AND
12522: IFFALSE 12538
// Say ( Heike , DH-Captive-a-1 ) else
12524: LD_EXP 38
12528: PPUSH
12529: LD_STRING DH-Captive-a-1
12531: PPUSH
12532: CALL_OW 88
12536: GO 12550
// Say ( Heike , DH-Captive-a-b-1 ) ;
12538: LD_EXP 38
12542: PPUSH
12543: LD_STRING DH-Captive-a-b-1
12545: PPUSH
12546: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12550: LD_EXP 57
12554: PPUSH
12555: LD_STRING DCom-Captive-a-2
12557: PPUSH
12558: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12562: LD_EXP 38
12566: PPUSH
12567: LD_STRING DH-Captive-a-3
12569: PPUSH
12570: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
12574: LD_EXP 57
12578: PPUSH
12579: LD_STRING DCom-Captive-a-4
12581: PPUSH
12582: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
12586: LD_EXP 38
12590: PPUSH
12591: LD_STRING DH-Captive-a-5
12593: PPUSH
12594: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12598: LD_EXP 57
12602: PPUSH
12603: CALL_OW 64
// DialogueOff ;
12607: CALL_OW 7
// InGameOff ;
12611: CALL_OW 9
// SetSide ( Heike , 2 ) ;
12615: LD_EXP 38
12619: PPUSH
12620: LD_INT 2
12622: PPUSH
12623: CALL_OW 235
// ComExitBuilding ( Heike ) ;
12627: LD_EXP 38
12631: PPUSH
12632: CALL_OW 122
// if Aviradze then
12636: LD_EXP 48
12640: IFFALSE 12683
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12642: LD_ADDR_EXP 14
12646: PUSH
12647: LD_EXP 14
12651: PPUSH
12652: LD_EXP 48
12656: PPUSH
12657: CALL 64014 0 2
12661: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12662: LD_EXP 48
12666: PPUSH
12667: LD_INT 2
12669: PPUSH
12670: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12674: LD_EXP 48
12678: PPUSH
12679: CALL_OW 122
// end ; if Ibrahim then
12683: LD_EXP 41
12687: IFFALSE 12730
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12689: LD_ADDR_EXP 14
12693: PUSH
12694: LD_EXP 14
12698: PPUSH
12699: LD_EXP 41
12703: PPUSH
12704: CALL 64014 0 2
12708: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12709: LD_EXP 41
12713: PPUSH
12714: LD_INT 2
12716: PPUSH
12717: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12721: LD_EXP 41
12725: PPUSH
12726: CALL_OW 122
// end ; end ;
12730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
12731: LD_INT 2
12733: PUSH
12734: LD_INT 25
12736: PUSH
12737: LD_INT 32
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 25
12746: PUSH
12747: LD_INT 34
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 69
12763: IFFALSE 12775
12765: GO 12767
12767: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
12768: LD_STRING M1-weapons-out
12770: PPUSH
12771: CALL_OW 604
12775: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
12776: LD_INT 2
12778: PPUSH
12779: LD_EXP 53
12783: PPUSH
12784: CALL_OW 292
12788: PUSH
12789: LD_EXP 38
12793: PPUSH
12794: LD_EXP 53
12798: PPUSH
12799: CALL_OW 296
12803: AND
12804: PUSH
12805: LD_EXP 25
12809: NOT
12810: AND
12811: PUSH
12812: LD_EXP 17
12816: NOT
12817: AND
12818: PUSH
12819: LD_EXP 30
12823: NOT
12824: AND
12825: IFFALSE 13574
12827: GO 12829
12829: DISABLE
12830: LD_INT 0
12832: PPUSH
12833: PPUSH
// begin DialogueOn ;
12834: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
12838: LD_EXP 53
12842: PPUSH
12843: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
12847: LD_EXP 53
12851: PPUSH
12852: LD_STRING DJy-Food-1
12854: PPUSH
12855: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
12859: LD_EXP 38
12863: PPUSH
12864: LD_STRING DH-Food-2
12866: PPUSH
12867: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
12871: LD_EXP 53
12875: PPUSH
12876: LD_STRING DJy-Food-3
12878: PPUSH
12879: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
12883: LD_EXP 53
12887: PPUSH
12888: LD_STRING DJy-Food-4
12890: PPUSH
12891: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
12895: LD_EXP 38
12899: PPUSH
12900: LD_STRING DH-Food-5
12902: PPUSH
12903: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
12907: LD_EXP 53
12911: PPUSH
12912: LD_STRING DJy-Food-6
12914: PPUSH
12915: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
12919: LD_EXP 53
12923: PPUSH
12924: LD_STRING DJy-Food-7
12926: PPUSH
12927: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
12931: LD_EXP 53
12935: PPUSH
12936: LD_STRING DJy-Food-8
12938: PPUSH
12939: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
12943: LD_EXP 38
12947: PPUSH
12948: LD_STRING DH-Food-9
12950: PPUSH
12951: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
12955: LD_EXP 53
12959: PPUSH
12960: LD_STRING DJy-Food-10
12962: PPUSH
12963: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
12967: LD_EXP 38
12971: PPUSH
12972: LD_STRING DH-Food-11
12974: PPUSH
12975: CALL_OW 88
// DialogueOff ;
12979: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
12983: LD_STRING M3
12985: PPUSH
12986: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
12990: LD_INT 5
12992: PPUSH
12993: LD_INT 215
12995: PPUSH
12996: LD_INT 117
12998: PPUSH
12999: LD_INT 0
13001: PPUSH
13002: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13006: LD_INT 215
13008: PPUSH
13009: LD_INT 118
13011: PPUSH
13012: LD_INT 2
13014: PPUSH
13015: LD_INT 6
13017: NEG
13018: PPUSH
13019: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13023: LD_INT 215
13025: PPUSH
13026: LD_INT 118
13028: PPUSH
13029: LD_INT 2
13031: PPUSH
13032: CALL_OW 331
// foodDelivered := false ;
13036: LD_ADDR_VAR 0 2
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13044: LD_INT 35
13046: PPUSH
13047: CALL_OW 67
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13051: LD_ADDR_VAR 0 1
13055: PUSH
13056: LD_EXP 14
13060: PUSH
13061: LD_EXP 38
13065: UNION
13066: PPUSH
13067: LD_INT 91
13069: PUSH
13070: LD_EXP 53
13074: PUSH
13075: LD_INT 6
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 25
13085: PUSH
13086: LD_INT 33
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PPUSH
13097: CALL_OW 72
13101: PUSH
13102: FOR_IN
13103: IFFALSE 13303
// if Carry ( i ) then
13105: LD_VAR 0 1
13109: PPUSH
13110: CALL_OW 281
13114: IFFALSE 13301
// begin DialogueOn ;
13116: CALL_OW 6
// foodDelivered := true ;
13120: LD_ADDR_VAR 0 2
13124: PUSH
13125: LD_INT 1
13127: ST_TO_ADDR
// case i of Heike :
13128: LD_VAR 0 1
13132: PUSH
13133: LD_EXP 38
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13158
13143: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13144: LD_EXP 38
13148: PPUSH
13149: LD_STRING DH-Food-12
13151: PPUSH
13152: CALL_OW 88
13156: GO 13284
13158: LD_EXP 43
13162: DOUBLE
13163: EQUAL
13164: IFTRUE 13168
13166: GO 13183
13168: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13169: LD_EXP 43
13173: PPUSH
13174: LD_STRING DK-Food-a-12
13176: PPUSH
13177: CALL_OW 88
13181: GO 13284
13183: LD_EXP 45
13187: DOUBLE
13188: EQUAL
13189: IFTRUE 13193
13191: GO 13208
13193: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13194: LD_EXP 45
13198: PPUSH
13199: LD_STRING DMar-Food-a-12
13201: PPUSH
13202: CALL_OW 88
13206: GO 13284
13208: LD_EXP 39
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13233
13218: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13219: LD_EXP 39
13223: PPUSH
13224: LD_STRING DG-Food-a-14
13226: PPUSH
13227: CALL_OW 88
13231: GO 13284
13233: LD_EXP 40
13237: DOUBLE
13238: EQUAL
13239: IFTRUE 13243
13241: GO 13258
13243: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13244: LD_EXP 40
13248: PPUSH
13249: LD_STRING DM-Food-a-15
13251: PPUSH
13252: CALL_OW 88
13256: GO 13284
13258: LD_EXP 42
13262: DOUBLE
13263: EQUAL
13264: IFTRUE 13268
13266: GO 13283
13268: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13269: LD_EXP 42
13273: PPUSH
13274: LD_STRING DKam-Food-a-16
13276: PPUSH
13277: CALL_OW 88
13281: GO 13284
13283: POP
// SetCargo ( i , mat_cans , 0 ) ;
13284: LD_VAR 0 1
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: LD_INT 0
13294: PPUSH
13295: CALL_OW 290
// break ;
13299: GO 13303
// end ;
13301: GO 13102
13303: POP
13304: POP
// until foodDelivered ;
13305: LD_VAR 0 2
13309: IFFALSE 13044
// givenFood := true ;
13311: LD_ADDR_EXP 33
13315: PUSH
13316: LD_INT 1
13318: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13319: LD_EXP 53
13323: PPUSH
13324: LD_STRING DJy-Food-13
13326: PPUSH
13327: CALL_OW 88
// hasVirus := true ;
13331: LD_ADDR_EXP 31
13335: PUSH
13336: LD_INT 1
13338: ST_TO_ADDR
// if not americanContact then
13339: LD_EXP 10
13343: NOT
13344: IFFALSE 13394
// begin Say ( Heike , DH-Food-14 ) ;
13346: LD_EXP 38
13350: PPUSH
13351: LD_STRING DH-Food-14
13353: PPUSH
13354: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13358: LD_EXP 53
13362: PPUSH
13363: LD_STRING DJy-Food-15
13365: PPUSH
13366: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13370: LD_EXP 53
13374: PPUSH
13375: LD_STRING DJy-Food-16
13377: PPUSH
13378: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13382: LD_EXP 53
13386: PPUSH
13387: LD_STRING DJy-Food-17
13389: PPUSH
13390: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13394: LD_STRING M3-out
13396: PPUSH
13397: CALL_OW 337
// DialogueOff ;
13401: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13405: LD_EXP 53
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: LD_INT 10
13415: PPUSH
13416: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13420: LD_EXP 53
13424: PPUSH
13425: LD_INT 95
13427: PPUSH
13428: LD_INT 17
13430: PPUSH
13431: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13435: LD_INT 35
13437: PPUSH
13438: CALL_OW 67
// if not HasTask ( Jerry ) then
13442: LD_EXP 53
13446: PPUSH
13447: CALL_OW 314
13451: NOT
13452: IFFALSE 13469
// ComMoveXY ( Jerry , 95 , 17 ) ;
13454: LD_EXP 53
13458: PPUSH
13459: LD_INT 95
13461: PPUSH
13462: LD_INT 17
13464: PPUSH
13465: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13469: LD_EXP 53
13473: PPUSH
13474: LD_INT 95
13476: PPUSH
13477: LD_INT 17
13479: PPUSH
13480: CALL_OW 307
13484: IFFALSE 13435
// SetCargo ( Jerry , mat_cans , 0 ) ;
13486: LD_EXP 53
13490: PPUSH
13491: LD_INT 1
13493: PPUSH
13494: LD_INT 0
13496: PPUSH
13497: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13501: LD_ADDR_EXP 50
13505: PUSH
13506: LD_EXP 50
13510: PPUSH
13511: LD_EXP 53
13515: PPUSH
13516: CALL 64014 0 2
13520: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13521: LD_ADDR_VAR 0 1
13525: PUSH
13526: LD_INT 22
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 23
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 69
13554: PUSH
13555: FOR_IN
13556: IFFALSE 13572
// SetLives ( i , 1000 ) ;
13558: LD_VAR 0 1
13562: PPUSH
13563: LD_INT 1000
13565: PPUSH
13566: CALL_OW 234
13570: GO 13555
13572: POP
13573: POP
// end ;
13574: PPOPN 2
13576: END
// every 0 0$2 trigger hasExplosions marked gameStartEvent do var un , tmp ;
13577: LD_EXP 6
13581: IFFALSE 14012
13583: GO 13585
13585: DISABLE
13586: LD_INT 0
13588: PPUSH
13589: PPUSH
// begin tmp := [ ] ;
13590: LD_ADDR_VAR 0 2
13594: PUSH
13595: EMPTY
13596: ST_TO_ADDR
// uc_side := 3 ;
13597: LD_ADDR_OWVAR 20
13601: PUSH
13602: LD_INT 3
13604: ST_TO_ADDR
// uc_nation := 3 ;
13605: LD_ADDR_OWVAR 21
13609: PUSH
13610: LD_INT 3
13612: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
13613: LD_INT 1
13615: PPUSH
13616: LD_INT 8
13618: PPUSH
13619: CALL_OW 381
// un := CreateHuman ;
13623: LD_ADDR_VAR 0 1
13627: PUSH
13628: CALL_OW 44
13632: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
13633: LD_VAR 0 1
13637: PPUSH
13638: LD_INT 173
13640: PPUSH
13641: LD_INT 104
13643: PPUSH
13644: LD_INT 0
13646: PPUSH
13647: CALL_OW 48
// tmp := Join ( tmp , un ) ;
13651: LD_ADDR_VAR 0 2
13655: PUSH
13656: LD_VAR 0 2
13660: PPUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL 64014 0 2
13670: ST_TO_ADDR
// un := CreateHuman ;
13671: LD_ADDR_VAR 0 1
13675: PUSH
13676: CALL_OW 44
13680: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
13681: LD_VAR 0 1
13685: PPUSH
13686: LD_INT 73
13688: PPUSH
13689: CALL_OW 52
// tmp := Join ( tmp , un ) ;
13693: LD_ADDR_VAR 0 2
13697: PUSH
13698: LD_VAR 0 2
13702: PPUSH
13703: LD_VAR 0 1
13707: PPUSH
13708: CALL 64014 0 2
13712: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13713: LD_INT 35
13715: PPUSH
13716: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
13720: LD_EXP 43
13724: PPUSH
13725: CALL_OW 255
13729: PUSH
13730: LD_INT 2
13732: EQUAL
13733: PUSH
13734: LD_EXP 43
13738: PPUSH
13739: LD_INT 73
13741: PPUSH
13742: CALL_OW 296
13746: PUSH
13747: LD_INT 8
13749: LESS
13750: AND
13751: PUSH
13752: LD_VAR 0 2
13756: PPUSH
13757: LD_INT 101
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PPUSH
13767: CALL_OW 72
13771: AND
13772: IFFALSE 13713
// InGameOn ;
13774: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
13778: LD_INT 73
13780: PPUSH
13781: CALL_OW 250
13785: PPUSH
13786: LD_INT 73
13788: PPUSH
13789: CALL_OW 251
13793: PPUSH
13794: LD_INT 2
13796: PPUSH
13797: LD_INT 9
13799: NEG
13800: PPUSH
13801: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
13805: LD_INT 73
13807: PPUSH
13808: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
13812: LD_EXP 43
13816: PPUSH
13817: LD_INT 73
13819: PPUSH
13820: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
13824: LD_EXP 43
13828: PPUSH
13829: LD_STRING DK-Plastic-1
13831: PPUSH
13832: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
13836: LD_EXP 43
13840: PPUSH
13841: LD_STRING DK-Plastic-2
13843: PPUSH
13844: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
13848: LD_EXP 43
13852: PPUSH
13853: LD_INT 73
13855: PPUSH
13856: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13860: LD_INT 35
13862: PPUSH
13863: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
13867: LD_EXP 43
13871: PPUSH
13872: LD_INT 73
13874: PPUSH
13875: CALL_OW 296
13879: PUSH
13880: LD_INT 6
13882: LESS
13883: IFFALSE 13860
// ComHold ( Kaia ) ;
13885: LD_EXP 43
13889: PPUSH
13890: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
13894: LD_VAR 0 2
13898: PUSH
13899: LD_INT 1
13901: ARRAY
13902: PPUSH
13903: LD_STRING DRum-Plastic-3
13905: PPUSH
13906: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
13910: LD_VAR 0 2
13914: PUSH
13915: LD_INT 2
13917: ARRAY
13918: PPUSH
13919: LD_STRING DRum2-Plastic-4
13921: PPUSH
13922: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
13926: LD_VAR 0 2
13930: PUSH
13931: LD_INT 1
13933: ARRAY
13934: PPUSH
13935: LD_STRING DRum-Plastic-5
13937: PPUSH
13938: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
13942: LD_VAR 0 2
13946: PUSH
13947: LD_INT 2
13949: ARRAY
13950: PPUSH
13951: LD_STRING DRum2-Plastic-6
13953: PPUSH
13954: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
13958: LD_EXP 43
13962: PPUSH
13963: LD_STRING DK-Plastic-7
13965: PPUSH
13966: CALL_OW 88
// InGameOff ;
13970: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
13974: LD_INT 73
13976: PPUSH
13977: CALL_OW 250
13981: PPUSH
13982: LD_INT 73
13984: PPUSH
13985: CALL_OW 251
13989: PPUSH
13990: LD_INT 2
13992: PPUSH
13993: CALL_OW 331
// explosionsTakenByRussians := true ;
13997: LD_ADDR_EXP 21
14001: PUSH
14002: LD_INT 1
14004: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14005: LD_STRING ExplosivesInfo
14007: PPUSH
14008: CALL_OW 97
// end ;
14012: PPOPN 2
14014: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14015: LD_EXP 21
14019: PUSH
14020: LD_EXP 43
14024: PPUSH
14025: CALL_OW 255
14029: PUSH
14030: LD_INT 2
14032: EQUAL
14033: AND
14034: PUSH
14035: LD_EXP 43
14039: PPUSH
14040: LD_INT 61
14042: PPUSH
14043: CALL 18312 0 2
14047: AND
14048: PUSH
14049: LD_EXP 17
14053: NOT
14054: AND
14055: PUSH
14056: LD_EXP 30
14060: NOT
14061: AND
14062: IFFALSE 14218
14064: GO 14066
14066: DISABLE
// begin InGameOn ;
14067: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14071: LD_INT 61
14073: PPUSH
14074: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14078: LD_EXP 43
14082: PPUSH
14083: LD_INT 3
14085: PPUSH
14086: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14090: LD_EXP 43
14094: PPUSH
14095: LD_INT 61
14097: PPUSH
14098: CALL_OW 120
// wait ( 0 0$2 ) ;
14102: LD_INT 70
14104: PPUSH
14105: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14109: LD_EXP 43
14113: PPUSH
14114: LD_STRING DK-Plastic-8
14116: PPUSH
14117: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14121: LD_EXP 59
14125: PUSH
14126: LD_INT 1
14128: ARRAY
14129: PPUSH
14130: LD_STRING DRuMch-Plastic-9
14132: PPUSH
14133: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14137: LD_EXP 43
14141: PPUSH
14142: LD_STRING DK-Plastic-10
14144: PPUSH
14145: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14149: LD_EXP 59
14153: PUSH
14154: LD_INT 1
14156: ARRAY
14157: PPUSH
14158: LD_STRING DRuMch-Plastic-a-11
14160: PPUSH
14161: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14165: LD_EXP 43
14169: PPUSH
14170: LD_STRING DK-Plastic-a-12
14172: PPUSH
14173: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14177: LD_EXP 59
14181: PUSH
14182: LD_INT 1
14184: ARRAY
14185: PPUSH
14186: LD_STRING DRuMch-Plastic-a-13
14188: PPUSH
14189: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14193: LD_EXP 43
14197: PPUSH
14198: LD_INT 2
14200: PPUSH
14201: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14205: LD_EXP 43
14209: PPUSH
14210: CALL_OW 122
// InGameOff ;
14214: CALL_OW 9
// end ;
14218: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14219: LD_EXP 21
14223: PUSH
14224: LD_EXP 43
14228: PPUSH
14229: CALL_OW 255
14233: PUSH
14234: LD_INT 2
14236: EQUAL
14237: AND
14238: PUSH
14239: LD_EXP 43
14243: PPUSH
14244: LD_INT 196
14246: PPUSH
14247: CALL 18312 0 2
14251: AND
14252: PUSH
14253: LD_EXP 17
14257: NOT
14258: AND
14259: PUSH
14260: LD_EXP 30
14264: NOT
14265: AND
14266: IFFALSE 14598
14268: GO 14270
14270: DISABLE
// begin InGameOn ;
14271: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14275: LD_INT 196
14277: PPUSH
14278: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14282: LD_EXP 43
14286: PPUSH
14287: LD_INT 3
14289: PPUSH
14290: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14294: LD_EXP 43
14298: PPUSH
14299: LD_INT 196
14301: PPUSH
14302: CALL_OW 120
// wait ( 0 0$2 ) ;
14306: LD_INT 70
14308: PPUSH
14309: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14313: LD_EXP 43
14317: PPUSH
14318: LD_STRING DK-Plastic-8
14320: PPUSH
14321: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14325: LD_EXP 60
14329: PUSH
14330: LD_INT 1
14332: ARRAY
14333: PPUSH
14334: LD_STRING DRuMch-Plastic-9
14336: PPUSH
14337: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14341: LD_EXP 43
14345: PPUSH
14346: LD_STRING DK-Plastic-10
14348: PPUSH
14349: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14353: LD_EXP 60
14357: PUSH
14358: LD_INT 1
14360: ARRAY
14361: PPUSH
14362: LD_STRING DRuMch-Plastic-11
14364: PPUSH
14365: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14369: LD_EXP 43
14373: PPUSH
14374: LD_STRING DK-Plastic-12
14376: PPUSH
14377: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14381: LD_EXP 43
14385: PPUSH
14386: LD_STRING DK-Plastic-13
14388: PPUSH
14389: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14393: LD_EXP 60
14397: PUSH
14398: LD_INT 1
14400: ARRAY
14401: PPUSH
14402: LD_STRING DRuMch-Plastic-14
14404: PPUSH
14405: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14409: LD_EXP 61
14413: PPUSH
14414: LD_INT 167
14416: PPUSH
14417: LD_INT 34
14419: PPUSH
14420: LD_INT 3
14422: PPUSH
14423: LD_INT 0
14425: PPUSH
14426: CALL 66154 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14430: LD_EXP 61
14434: PPUSH
14435: LD_INT 196
14437: PPUSH
14438: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14442: LD_INT 35
14444: PPUSH
14445: CALL_OW 67
// if not HasTask ( Stiopa ) then
14449: LD_EXP 61
14453: PPUSH
14454: CALL_OW 314
14458: NOT
14459: IFFALSE 14473
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14461: LD_EXP 61
14465: PPUSH
14466: LD_INT 196
14468: PPUSH
14469: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14473: LD_EXP 61
14477: PPUSH
14478: CALL_OW 310
14482: IFFALSE 14442
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14484: LD_EXP 61
14488: PPUSH
14489: LD_STRING DSpn-Plastic-15
14491: PPUSH
14492: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14496: LD_EXP 62
14500: PPUSH
14501: LD_STRING DLr-Plastic-16
14503: PPUSH
14504: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14508: LD_EXP 43
14512: PPUSH
14513: LD_STRING DK-Plastic-17
14515: PPUSH
14516: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14520: LD_INT 10
14522: PPUSH
14523: CALL_OW 67
// SetSide ( Kaia , 2 ) ;
14527: LD_EXP 43
14531: PPUSH
14532: LD_INT 2
14534: PPUSH
14535: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14539: LD_EXP 43
14543: PPUSH
14544: CALL_OW 122
// InGameOff ;
14548: CALL_OW 9
// explosionsTakenByRussians := false ;
14552: LD_ADDR_EXP 21
14556: PUSH
14557: LD_INT 0
14559: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
14560: LD_INT 170
14562: PPUSH
14563: LD_INT 28
14565: PPUSH
14566: LD_INT 2
14568: PPUSH
14569: LD_INT 6
14571: NEG
14572: PPUSH
14573: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
14577: LD_INT 170
14579: PPUSH
14580: LD_INT 28
14582: PPUSH
14583: LD_INT 2
14585: PPUSH
14586: CALL_OW 331
// knowWhereExplosivesAre := true ;
14590: LD_ADDR_EXP 34
14594: PUSH
14595: LD_INT 1
14597: ST_TO_ADDR
// end ;
14598: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
14599: LD_EXP 34
14603: PUSH
14604: LD_EXP 43
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 2
14616: EQUAL
14617: AND
14618: PUSH
14619: LD_EXP 43
14623: PPUSH
14624: LD_INT 195
14626: PPUSH
14627: CALL 18312 0 2
14631: AND
14632: PUSH
14633: LD_EXP 17
14637: NOT
14638: AND
14639: PUSH
14640: LD_EXP 30
14644: NOT
14645: AND
14646: IFFALSE 14745
14648: GO 14650
14650: DISABLE
// begin InGameOn ;
14651: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
14655: LD_EXP 43
14659: PPUSH
14660: LD_INT 3
14662: PPUSH
14663: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
14667: LD_EXP 43
14671: PPUSH
14672: LD_INT 195
14674: PPUSH
14675: CALL_OW 120
// wait ( 0 0$1 ) ;
14679: LD_INT 35
14681: PPUSH
14682: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
14686: LD_EXP 43
14690: PPUSH
14691: LD_STRING DK-Plastic-18
14693: PPUSH
14694: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
14698: LD_STRING ExplosivesInfoUsage
14700: PPUSH
14701: CALL_OW 97
// SetSide ( Kaia , 2 ) ;
14705: LD_EXP 43
14709: PPUSH
14710: LD_INT 2
14712: PPUSH
14713: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14717: LD_EXP 43
14721: PPUSH
14722: CALL_OW 122
// InGameOff ;
14726: CALL_OW 9
// hasExplosionCollected := true ;
14730: LD_ADDR_EXP 23
14734: PUSH
14735: LD_INT 1
14737: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
14738: LD_STRING M1-explosive-out
14740: PPUSH
14741: CALL_OW 337
// end ;
14745: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
14746: LD_EXP 23
14750: PUSH
14751: LD_EXP 17
14755: NOT
14756: AND
14757: PUSH
14758: LD_EXP 30
14762: NOT
14763: AND
14764: IFFALSE 14939
14766: GO 14768
14768: DISABLE
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
// begin for i in importantBuildingsList do
14773: LD_ADDR_VAR 0 1
14777: PUSH
14778: LD_EXP 35
14782: PUSH
14783: FOR_IN
14784: IFFALSE 14800
// MarkBuilding ( i , true ) ;
14786: LD_VAR 0 1
14790: PPUSH
14791: LD_INT 1
14793: PPUSH
14794: CALL 18686 0 2
14798: GO 14783
14800: POP
14801: POP
// repeat wait ( 0 0$1 ) ;
14802: LD_INT 35
14804: PPUSH
14805: CALL_OW 67
// for i in importantBuildingsList do
14809: LD_ADDR_VAR 0 1
14813: PUSH
14814: LD_EXP 35
14818: PUSH
14819: FOR_IN
14820: IFFALSE 14930
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
14822: LD_EXP 38
14826: PUSH
14827: LD_EXP 14
14831: UNION
14832: PPUSH
14833: LD_INT 22
14835: PUSH
14836: LD_INT 2
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 21
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 91
14855: PUSH
14856: LD_VAR 0 1
14860: PUSH
14861: LD_INT 6
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: PPUSH
14874: CALL_OW 72
14878: IFFALSE 14928
// begin CenterNowOnUnits ( i ) ;
14880: LD_VAR 0 1
14884: PPUSH
14885: CALL_OW 87
// PlaceExplosives ( i ) ;
14889: LD_VAR 0 1
14893: PPUSH
14894: CALL 18583 0 1
// MarkBuilding ( i , false ) ;
14898: LD_VAR 0 1
14902: PPUSH
14903: LD_INT 0
14905: PPUSH
14906: CALL 18686 0 2
// importantBuildingsList := importantBuildingsList diff i ;
14910: LD_ADDR_EXP 35
14914: PUSH
14915: LD_EXP 35
14919: PUSH
14920: LD_VAR 0 1
14924: DIFF
14925: ST_TO_ADDR
// continue ;
14926: GO 14819
// end ; end ;
14928: GO 14819
14930: POP
14931: POP
// until not importantBuildingsList ;
14932: LD_EXP 35
14936: NOT
14937: IFFALSE 14802
// end ;
14939: PPOPN 2
14941: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
14942: LD_EXP 14
14946: PPUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 95
14959: PUSH
14960: LD_INT 23
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PPUSH
14971: CALL_OW 72
14975: PUSH
14976: LD_EXP 38
14980: PPUSH
14981: CALL_OW 302
14985: AND
14986: PUSH
14987: LD_EXP 30
14991: NOT
14992: AND
14993: IFFALSE 15021
14995: GO 14997
14997: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
14998: LD_EXP 38
15002: PPUSH
15003: LD_STRING DH-End-1
15005: PPUSH
15006: CALL_OW 88
// if not activeExplosives then
15010: LD_EXP 36
15014: NOT
15015: IFFALSE 15021
// Explode ;
15017: CALL 21170 0 0
// end ;
15021: END
// function SayHEmpty ( ) ; begin
15022: LD_INT 0
15024: PPUSH
// case rand ( 1 , 3 ) of 1 :
15025: LD_INT 1
15027: PPUSH
15028: LD_INT 3
15030: PPUSH
15031: CALL_OW 12
15035: PUSH
15036: LD_INT 1
15038: DOUBLE
15039: EQUAL
15040: IFTRUE 15044
15042: GO 15059
15044: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15045: LD_EXP 38
15049: PPUSH
15050: LD_STRING DH-Empty-1
15052: PPUSH
15053: CALL_OW 88
15057: GO 15106
15059: LD_INT 2
15061: DOUBLE
15062: EQUAL
15063: IFTRUE 15067
15065: GO 15082
15067: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15068: LD_EXP 38
15072: PPUSH
15073: LD_STRING DH-Empty-2
15075: PPUSH
15076: CALL_OW 88
15080: GO 15106
15082: LD_INT 3
15084: DOUBLE
15085: EQUAL
15086: IFTRUE 15090
15088: GO 15105
15090: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15091: LD_EXP 38
15095: PPUSH
15096: LD_STRING DH-Empty-3
15098: PPUSH
15099: CALL_OW 88
15103: GO 15106
15105: POP
// end ;
15106: LD_VAR 0 1
15110: RET
// function SayHVisited ( ) ; begin
15111: LD_INT 0
15113: PPUSH
// case rand ( 1 , 3 ) of 1 :
15114: LD_INT 1
15116: PPUSH
15117: LD_INT 3
15119: PPUSH
15120: CALL_OW 12
15124: PUSH
15125: LD_INT 1
15127: DOUBLE
15128: EQUAL
15129: IFTRUE 15133
15131: GO 15148
15133: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15134: LD_EXP 38
15138: PPUSH
15139: LD_STRING DH-Visited-1
15141: PPUSH
15142: CALL_OW 88
15146: GO 15195
15148: LD_INT 2
15150: DOUBLE
15151: EQUAL
15152: IFTRUE 15156
15154: GO 15171
15156: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15157: LD_EXP 38
15161: PPUSH
15162: LD_STRING DH-Visited-2
15164: PPUSH
15165: CALL_OW 88
15169: GO 15195
15171: LD_INT 3
15173: DOUBLE
15174: EQUAL
15175: IFTRUE 15179
15177: GO 15194
15179: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15180: LD_EXP 38
15184: PPUSH
15185: LD_STRING DH-Visited-3
15187: PPUSH
15188: CALL_OW 88
15192: GO 15195
15194: POP
// end ;
15195: LD_VAR 0 1
15199: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15200: LD_EXP 17
15204: NOT
15205: PUSH
15206: LD_EXP 15
15210: AND
15211: PUSH
15212: LD_EXP 38
15216: PPUSH
15217: CALL_OW 255
15221: PUSH
15222: LD_INT 2
15224: EQUAL
15225: AND
15226: PUSH
15227: LD_EXP 38
15231: PPUSH
15232: CALL_OW 302
15236: AND
15237: PUSH
15238: LD_EXP 38
15242: PPUSH
15243: CALL_OW 316
15247: AND
15248: PUSH
15249: LD_EXP 30
15253: NOT
15254: AND
15255: IFFALSE 15321
15257: GO 15259
15259: DISABLE
15260: LD_INT 0
15262: PPUSH
// begin enable ;
15263: ENABLE
// for i in entranceAllowedList do
15264: LD_ADDR_VAR 0 1
15268: PUSH
15269: LD_EXP 15
15273: PUSH
15274: FOR_IN
15275: IFFALSE 15319
// if InEntrance ( Heike , i ) then
15277: LD_EXP 38
15281: PPUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL 18312 0 2
15291: IFFALSE 15317
// begin disable ( entranceEvent ) ;
15293: LD_INT 1
15295: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15296: LD_VAR 0 1
15300: PPUSH
15301: CALL 15324 0 1
// wait ( 0 0$3 ) ;
15305: LD_INT 105
15307: PPUSH
15308: CALL_OW 67
// enable ( entranceEvent ) ;
15312: LD_INT 1
15314: ENABLE_MARKED
// break ;
15315: GO 15319
// end ;
15317: GO 15274
15319: POP
15320: POP
// end ;
15321: PPOPN 1
15323: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
// if not building then
15328: LD_VAR 0 1
15332: NOT
15333: IFFALSE 15337
// exit ;
15335: GO 17809
// if building in entranceVisitedList then
15337: LD_VAR 0 1
15341: PUSH
15342: LD_EXP 16
15346: IN
15347: IFFALSE 15355
// begin SayHVisited ( ) ;
15349: CALL 15111 0 0
// exit ;
15353: GO 17809
// end ; case Query ( EnterBuilding ) of 1 :
15355: LD_STRING EnterBuilding
15357: PPUSH
15358: CALL_OW 97
15362: PUSH
15363: LD_INT 1
15365: DOUBLE
15366: EQUAL
15367: IFTRUE 15371
15369: GO 15374
15371: POP
// ; 2 :
15372: GO 15388
15374: LD_INT 2
15376: DOUBLE
15377: EQUAL
15378: IFTRUE 15382
15380: GO 15387
15382: POP
// exit ; end ;
15383: GO 17809
15385: GO 15388
15387: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15388: LD_ADDR_EXP 16
15392: PUSH
15393: LD_EXP 16
15397: PPUSH
15398: LD_VAR 0 1
15402: PPUSH
15403: CALL 64014 0 2
15407: ST_TO_ADDR
// InGameOn ;
15408: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15412: LD_EXP 38
15416: PPUSH
15417: LD_INT 5
15419: PPUSH
15420: CALL_OW 235
// SetSide ( building , 5 ) ;
15424: LD_VAR 0 1
15428: PPUSH
15429: LD_INT 5
15431: PPUSH
15432: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15436: LD_EXP 38
15440: PPUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 120
// wait ( 0 0$3 ) ;
15450: LD_INT 105
15452: PPUSH
15453: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15457: LD_ADDR_VAR 0 3
15461: PUSH
15462: LD_INT 165
15464: PUSH
15465: LD_INT 106
15467: PUSH
15468: LD_INT 135
15470: PUSH
15471: LD_INT 162
15473: PUSH
15474: LD_INT 61
15476: PUSH
15477: LD_INT 109
15479: PUSH
15480: LD_INT 169
15482: PUSH
15483: LD_INT 13
15485: PUSH
15486: LD_INT 147
15488: PUSH
15489: LD_INT 137
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: ST_TO_ADDR
// if not building in tmp then
15504: LD_VAR 0 1
15508: PUSH
15509: LD_VAR 0 3
15513: IN
15514: NOT
15515: IFFALSE 15523
// SayHEmpty ( ) else
15517: CALL 15022 0 0
15521: GO 17772
// case building of laundry :
15523: LD_VAR 0 1
15527: PUSH
15528: LD_INT 165
15530: DOUBLE
15531: EQUAL
15532: IFTRUE 15536
15534: GO 15640
15536: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15537: LD_EXP 26
15541: PUSH
15542: LD_EXP 27
15546: NOT
15547: AND
15548: PUSH
15549: LD_EXP 28
15553: NOT
15554: AND
15555: IFFALSE 15610
// begin case Query ( HeikeInLaundry ) of 1 :
15557: LD_STRING HeikeInLaundry
15559: PPUSH
15560: CALL_OW 97
15564: PUSH
15565: LD_INT 1
15567: DOUBLE
15568: EQUAL
15569: IFTRUE 15573
15571: GO 15580
15573: POP
// SpawnHeikeAsRussian ; 2 :
15574: CALL 1717 0 0
15578: GO 15608
15580: LD_INT 2
15582: DOUBLE
15583: EQUAL
15584: IFTRUE 15588
15586: GO 15607
15588: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
15589: LD_ADDR_EXP 16
15593: PUSH
15594: LD_EXP 16
15598: PUSH
15599: LD_VAR 0 1
15603: DIFF
15604: ST_TO_ADDR
15605: GO 15608
15607: POP
// end else
15608: GO 15638
// begin entranceVisitedList := entranceVisitedList diff building ;
15610: LD_ADDR_EXP 16
15614: PUSH
15615: LD_EXP 16
15619: PUSH
15620: LD_VAR 0 1
15624: DIFF
15625: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
15626: LD_EXP 38
15630: PPUSH
15631: LD_STRING DH-Locked
15633: PPUSH
15634: CALL_OW 88
// end ; end ; dougBar :
15638: GO 17772
15640: LD_INT 106
15642: DOUBLE
15643: EQUAL
15644: IFTRUE 15648
15646: GO 16000
15648: POP
// begin if contactWithAmerican and americanContact then
15649: LD_EXP 25
15653: PUSH
15654: LD_EXP 10
15658: AND
15659: IFFALSE 15723
// begin Say ( Heike , DH-Escort-a-1 ) ;
15661: LD_EXP 38
15665: PPUSH
15666: LD_STRING DH-Escort-a-1
15668: PPUSH
15669: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
15673: LD_EXP 52
15677: PPUSH
15678: LD_STRING DCa-Escort-a-2
15680: PPUSH
15681: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
15685: LD_EXP 52
15689: PPUSH
15690: LD_STRING DCa-Escort-a-3
15692: PPUSH
15693: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
15697: LD_EXP 38
15701: PPUSH
15702: LD_STRING DH-Escort-a-4
15704: PPUSH
15705: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
15709: LD_EXP 38
15713: PPUSH
15714: LD_STRING DH-Escort-a-5
15716: PPUSH
15717: CALL_OW 88
// end else
15721: GO 15957
// if contactWithAmerican then
15723: LD_EXP 25
15727: IFFALSE 15767
// begin Say ( Heike , DH-Escort-b-1 ) ;
15729: LD_EXP 38
15733: PPUSH
15734: LD_STRING DH-Escort-b-1
15736: PPUSH
15737: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
15741: LD_EXP 52
15745: PPUSH
15746: LD_STRING DCa-Escort-b-2
15748: PPUSH
15749: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
15753: LD_EXP 52
15757: PPUSH
15758: LD_STRING DCa-Escort-b-3
15760: PPUSH
15761: CALL_OW 88
// end else
15765: GO 15957
// begin Say ( Doug , DCa-Deal-a-1 ) ;
15767: LD_EXP 52
15771: PPUSH
15772: LD_STRING DCa-Deal-a-1
15774: PPUSH
15775: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
15779: LD_EXP 52
15783: PPUSH
15784: LD_STRING DCa-Deal-a-2
15786: PPUSH
15787: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
15791: LD_EXP 38
15795: PPUSH
15796: LD_STRING DH-Deal-a-3
15798: PPUSH
15799: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
15803: LD_EXP 52
15807: PPUSH
15808: LD_STRING DCa-Deal-a-4
15810: PPUSH
15811: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
15815: LD_EXP 38
15819: PPUSH
15820: LD_STRING DH-Deal-a-5
15822: PPUSH
15823: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
15827: LD_EXP 52
15831: PPUSH
15832: LD_STRING DCa-Deal-a-6
15834: PPUSH
15835: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
15839: LD_EXP 52
15843: PPUSH
15844: LD_STRING DCa-Deal-a-7
15846: PPUSH
15847: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
15851: LD_EXP 52
15855: PPUSH
15856: LD_STRING DCa-Deal-a-8
15858: PPUSH
15859: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
15863: LD_EXP 52
15867: PPUSH
15868: LD_STRING DCa-Deal-a-9
15870: PPUSH
15871: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
15875: LD_EXP 52
15879: PPUSH
15880: LD_STRING DCa-Deal-a-10
15882: PPUSH
15883: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
15887: LD_EXP 52
15891: PPUSH
15892: LD_STRING DCa-Deal-a-11
15894: PPUSH
15895: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15899: LD_INT 10
15901: PPUSH
15902: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
15906: LD_EXP 52
15910: PPUSH
15911: LD_STRING DCa-Deal-a-12
15913: PPUSH
15914: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
15918: LD_EXP 38
15922: PPUSH
15923: LD_STRING DH-Deal-a-13
15925: PPUSH
15926: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
15930: LD_EXP 38
15934: PPUSH
15935: LD_STRING DH-Deal-a-14
15937: PPUSH
15938: CALL_OW 88
// contactWithAmerican := true ;
15942: LD_ADDR_EXP 25
15946: PUSH
15947: LD_INT 1
15949: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
15950: LD_STRING M1-american-out
15952: PPUSH
15953: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
15957: LD_EXP 52
15961: PPUSH
15962: LD_INT 2
15964: PPUSH
15965: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
15969: LD_ADDR_EXP 14
15973: PUSH
15974: LD_EXP 14
15978: PPUSH
15979: LD_EXP 52
15983: PPUSH
15984: CALL 64014 0 2
15988: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
15989: LD_EXP 52
15993: PPUSH
15994: CALL_OW 122
// end ; usLab :
15998: GO 17772
16000: LD_INT 135
16002: DOUBLE
16003: EQUAL
16004: IFTRUE 16008
16006: GO 16324
16008: POP
// begin if hasSniperRifle then
16009: LD_EXP 11
16013: IFFALSE 16322
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16015: LD_EXP 43
16019: PPUSH
16020: CALL_OW 302
16024: PUSH
16025: LD_EXP 43
16029: PUSH
16030: LD_EXP 14
16034: IN
16035: AND
16036: PUSH
16037: LD_EXP 43
16041: PPUSH
16042: CALL_OW 255
16046: PUSH
16047: LD_INT 2
16049: EQUAL
16050: AND
16051: IFFALSE 16296
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16053: LD_EXP 38
16057: PPUSH
16058: LD_EXP 43
16062: PPUSH
16063: CALL_OW 296
16067: PUSH
16068: LD_INT 10
16070: GREATER
16071: IFFALSE 16096
// begin Query ( KaiaDistance ) ;
16073: LD_STRING KaiaDistance
16075: PPUSH
16076: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16080: LD_ADDR_EXP 16
16084: PUSH
16085: LD_EXP 16
16089: PUSH
16090: LD_INT 135
16092: DIFF
16093: ST_TO_ADDR
// end else
16094: GO 16294
// begin SetSide ( Kaia , 5 ) ;
16096: LD_EXP 43
16100: PPUSH
16101: LD_INT 5
16103: PPUSH
16104: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16108: LD_EXP 43
16112: PPUSH
16113: LD_INT 135
16115: PPUSH
16116: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16120: LD_INT 35
16122: PPUSH
16123: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16127: LD_EXP 43
16131: PPUSH
16132: CALL_OW 310
16136: IFFALSE 16120
// Say ( Kaia , DK-Sniper-1 ) ;
16138: LD_EXP 43
16142: PPUSH
16143: LD_STRING DK-Sniper-1
16145: PPUSH
16146: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16150: LD_EXP 43
16154: PPUSH
16155: CALL_OW 257
16159: PUSH
16160: LD_INT 34
16162: EQUAL
16163: PUSH
16164: LD_EXP 40
16168: PUSH
16169: LD_EXP 14
16173: IN
16174: AND
16175: PUSH
16176: LD_EXP 40
16180: PPUSH
16181: CALL_OW 302
16185: AND
16186: IFFALSE 16214
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16188: LD_EXP 43
16192: PPUSH
16193: LD_STRING DK-Sniper-a-2
16195: PPUSH
16196: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
16200: LD_EXP 40
16204: PPUSH
16205: LD_INT 32
16207: PPUSH
16208: CALL_OW 336
// end else
16212: GO 16273
// begin Say ( Kaia , DK-Sniper-2 ) ;
16214: LD_EXP 43
16218: PPUSH
16219: LD_STRING DK-Sniper-2
16221: PPUSH
16222: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16226: LD_EXP 43
16230: PPUSH
16231: LD_INT 32
16233: PPUSH
16234: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16238: LD_EXP 45
16242: PPUSH
16243: CALL_OW 302
16247: PUSH
16248: LD_EXP 45
16252: PUSH
16253: LD_EXP 14
16257: IN
16258: AND
16259: IFFALSE 16273
// Say ( Markov , DMar-Sniper-3 ) ;
16261: LD_EXP 45
16265: PPUSH
16266: LD_STRING DMar-Sniper-3
16268: PPUSH
16269: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16273: LD_EXP 43
16277: PPUSH
16278: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16282: LD_EXP 43
16286: PPUSH
16287: LD_INT 2
16289: PPUSH
16290: CALL_OW 235
// end ; end else
16294: GO 16322
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16296: LD_ADDR_EXP 16
16300: PUSH
16301: LD_EXP 16
16305: PUSH
16306: LD_INT 135
16308: DIFF
16309: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16310: LD_EXP 38
16314: PPUSH
16315: LD_STRING DH-Locked
16317: PPUSH
16318: CALL_OW 88
// end ; end ; end ; drugsLab :
16322: GO 17772
16324: LD_INT 162
16326: DOUBLE
16327: EQUAL
16328: IFTRUE 16332
16330: GO 16465
16332: POP
// begin if hasStimDrugs then
16333: LD_EXP 9
16337: IFFALSE 16451
// begin wait ( 0 0$1 ) ;
16339: LD_INT 35
16341: PPUSH
16342: CALL_OW 67
// if not hasStimDrugsCollected then
16346: LD_EXP 24
16350: NOT
16351: IFFALSE 16393
// begin Say ( Heike , DH-Lab-1 ) ;
16353: LD_EXP 38
16357: PPUSH
16358: LD_STRING DH-Lab-1
16360: PPUSH
16361: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16365: LD_INT 5
16367: PPUSH
16368: LD_INT 2
16370: PPUSH
16371: LD_INT 2
16373: PPUSH
16374: CALL_OW 322
// hasStimDrugsCollected := true ;
16378: LD_ADDR_EXP 24
16382: PUSH
16383: LD_INT 1
16385: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16386: LD_STRING M1-drugs-out
16388: PPUSH
16389: CALL_OW 604
// end ; if not hasExplosionCollected then
16393: LD_EXP 23
16397: NOT
16398: IFFALSE 16416
// entranceVisitedList := entranceVisitedList diff drugsLab else
16400: LD_ADDR_EXP 16
16404: PUSH
16405: LD_EXP 16
16409: PUSH
16410: LD_INT 162
16412: DIFF
16413: ST_TO_ADDR
16414: GO 16449
// begin wait ( 0 0$3 ) ;
16416: LD_INT 105
16418: PPUSH
16419: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16423: LD_EXP 38
16427: PPUSH
16428: LD_STRING DH-Lab-2
16430: PPUSH
16431: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16435: LD_STRING M1-drugsLab-out
16437: PPUSH
16438: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16442: LD_INT 162
16444: PPUSH
16445: CALL 18583 0 1
// end ; end else
16449: GO 16463
// Say ( Heike , DH-Locked ) ;
16451: LD_EXP 38
16455: PPUSH
16456: LD_STRING DH-Locked
16458: PPUSH
16459: CALL_OW 88
// end ; ruFac :
16463: GO 17772
16465: LD_INT 61
16467: DOUBLE
16468: EQUAL
16469: IFTRUE 16473
16471: GO 16583
16473: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16474: LD_EXP 45
16478: PPUSH
16479: CALL_OW 302
16483: PUSH
16484: LD_EXP 45
16488: PUSH
16489: LD_EXP 14
16493: IN
16494: NOT
16495: AND
16496: IFFALSE 16577
// begin Say ( Heike , DH-Krastyo-1 ) ;
16498: LD_EXP 38
16502: PPUSH
16503: LD_STRING DH-Krastyo-1
16505: PPUSH
16506: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16510: LD_EXP 45
16514: PPUSH
16515: LD_STRING DMar-Krastyo-2
16517: PPUSH
16518: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16522: LD_EXP 45
16526: PPUSH
16527: LD_STRING DMar-Krastyo-3
16529: PPUSH
16530: CALL_OW 88
// SetSide ( Markov , 2 ) ;
16534: LD_EXP 45
16538: PPUSH
16539: LD_INT 2
16541: PPUSH
16542: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
16546: LD_ADDR_EXP 14
16550: PUSH
16551: LD_EXP 14
16555: PPUSH
16556: LD_EXP 45
16560: PPUSH
16561: CALL 64014 0 2
16565: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
16566: LD_EXP 45
16570: PPUSH
16571: CALL_OW 122
// end else
16575: GO 16581
// SayHEmpty ( ) ;
16577: CALL 15022 0 0
// end ; ruBarKam :
16581: GO 17772
16583: LD_INT 109
16585: DOUBLE
16586: EQUAL
16587: IFTRUE 16591
16589: GO 16738
16591: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
16592: LD_EXP 42
16596: PPUSH
16597: CALL_OW 302
16601: PUSH
16602: LD_EXP 42
16606: PUSH
16607: LD_EXP 14
16611: IN
16612: NOT
16613: AND
16614: IFFALSE 16732
// begin Say ( Heike , DH-Kamil-1 ) ;
16616: LD_EXP 38
16620: PPUSH
16621: LD_STRING DH-Kamil-1
16623: PPUSH
16624: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
16628: LD_EXP 42
16632: PPUSH
16633: LD_STRING DKam-Kamil-2
16635: PPUSH
16636: CALL_OW 88
// if IsOk ( Sophia ) then
16640: LD_EXP 44
16644: PPUSH
16645: CALL_OW 302
16649: IFFALSE 16689
// if Sophia in heikeSquad then
16651: LD_EXP 44
16655: PUSH
16656: LD_EXP 14
16660: IN
16661: IFFALSE 16677
// Say ( Kamil , DKam-Kamil-a-3 ) else
16663: LD_EXP 42
16667: PPUSH
16668: LD_STRING DKam-Kamil-a-3
16670: PPUSH
16671: CALL_OW 88
16675: GO 16689
// Say ( Kamil , DKam-Kamil-3 ) ;
16677: LD_EXP 42
16681: PPUSH
16682: LD_STRING DKam-Kamil-3
16684: PPUSH
16685: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
16689: LD_EXP 42
16693: PPUSH
16694: LD_INT 2
16696: PPUSH
16697: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
16701: LD_ADDR_EXP 14
16705: PUSH
16706: LD_EXP 14
16710: PPUSH
16711: LD_EXP 42
16715: PPUSH
16716: CALL 64014 0 2
16720: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
16721: LD_EXP 42
16725: PPUSH
16726: CALL_OW 122
// end else
16730: GO 16736
// SayHEmpty ( ) ;
16732: CALL 15022 0 0
// end ; ruOutpost1 :
16736: GO 17772
16738: LD_INT 169
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16983
16746: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
16747: LD_EXP 47
16751: PPUSH
16752: CALL_OW 302
16756: PUSH
16757: LD_EXP 47
16761: PUSH
16762: LD_EXP 14
16766: IN
16767: NOT
16768: AND
16769: IFFALSE 16977
// begin if hasMethanol then
16771: LD_EXP 13
16775: IFFALSE 16906
// begin Say ( Heike , DH-Kurt-1 ) ;
16777: LD_EXP 38
16781: PPUSH
16782: LD_STRING DH-Kurt-1
16784: PPUSH
16785: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
16789: LD_EXP 47
16793: PPUSH
16794: LD_STRING DKs-Kurt-2
16796: PPUSH
16797: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
16801: LD_EXP 39
16805: PPUSH
16806: LD_INT 169
16808: PPUSH
16809: CALL_OW 296
16813: PUSH
16814: LD_INT 10
16816: LESS
16817: PUSH
16818: LD_EXP 39
16822: PUSH
16823: LD_EXP 14
16827: IN
16828: AND
16829: IFFALSE 16904
// begin ComMoveXY ( Givi , 100 , 37 ) ;
16831: LD_EXP 39
16835: PPUSH
16836: LD_INT 100
16838: PPUSH
16839: LD_INT 37
16841: PPUSH
16842: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
16846: LD_EXP 39
16850: PPUSH
16851: LD_INT 169
16853: PPUSH
16854: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
16858: LD_INT 35
16860: PPUSH
16861: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
16865: LD_EXP 39
16869: PPUSH
16870: LD_INT 169
16872: PPUSH
16873: CALL_OW 296
16877: PUSH
16878: LD_INT 7
16880: LESS
16881: IFFALSE 16858
// Say ( Givi , DG-Kurt-3 ) ;
16883: LD_EXP 39
16887: PPUSH
16888: LD_STRING DG-Kurt-3
16890: PPUSH
16891: CALL_OW 88
// ComStop ( Givi ) ;
16895: LD_EXP 39
16899: PPUSH
16900: CALL_OW 141
// end ; end else
16904: GO 16934
// begin Say ( Heike , DH-Kurt-1 ) ;
16906: LD_EXP 38
16910: PPUSH
16911: LD_STRING DH-Kurt-1
16913: PPUSH
16914: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
16918: LD_EXP 47
16922: PPUSH
16923: LD_STRING DKs-Kurt-2
16925: PPUSH
16926: CALL_OW 88
// SpawnAdditionalRuGuards ;
16930: CALL 3356 0 0
// end ; SetSide ( Kurt , 2 ) ;
16934: LD_EXP 47
16938: PPUSH
16939: LD_INT 2
16941: PPUSH
16942: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
16946: LD_ADDR_EXP 14
16950: PUSH
16951: LD_EXP 14
16955: PPUSH
16956: LD_EXP 47
16960: PPUSH
16961: CALL 64014 0 2
16965: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
16966: LD_EXP 47
16970: PPUSH
16971: CALL_OW 122
// end else
16975: GO 16981
// SayHEmpty ( ) ;
16977: CALL 15022 0 0
// end ; ruOutpostBar :
16981: GO 17772
16983: LD_INT 13
16985: DOUBLE
16986: EQUAL
16987: IFTRUE 16991
16989: GO 17037
16991: POP
// begin if not hasGuardPatrolPlan then
16992: LD_EXP 18
16996: NOT
16997: IFFALSE 17031
// begin Say ( Heike , DH-PatrolPlan ) ;
16999: LD_EXP 38
17003: PPUSH
17004: LD_STRING DH-PatrolPlan
17006: PPUSH
17007: CALL_OW 88
// hasGuardPatrolPlan := true ;
17011: LD_ADDR_EXP 18
17015: PUSH
17016: LD_INT 1
17018: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17019: LD_INT 6
17021: PPUSH
17022: LD_INT 2
17024: PPUSH
17025: CALL_OW 343
// end else
17029: GO 17035
// SayHEmpty ( ) ;
17031: CALL 15022 0 0
// end ; ruKaiaBar :
17035: GO 17772
17037: LD_INT 147
17039: DOUBLE
17040: EQUAL
17041: IFTRUE 17045
17043: GO 17192
17045: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17046: LD_EXP 43
17050: PPUSH
17051: CALL_OW 302
17055: PUSH
17056: LD_EXP 43
17060: PUSH
17061: LD_EXP 14
17065: IN
17066: NOT
17067: AND
17068: IFFALSE 17190
// begin Say ( Heike , DH-Kaia-1 ) ;
17070: LD_EXP 38
17074: PPUSH
17075: LD_STRING DH-Kaia-1
17077: PPUSH
17078: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17082: LD_EXP 43
17086: PPUSH
17087: LD_STRING DK-Kaia-2
17089: PPUSH
17090: CALL_OW 88
// if hasSniperRifle then
17094: LD_EXP 11
17098: IFFALSE 17149
// begin if IsOk ( Markov ) then
17100: LD_EXP 45
17104: PPUSH
17105: CALL_OW 302
17109: IFFALSE 17125
// Say ( Kaia , DK-Kaia-3 ) else
17111: LD_EXP 43
17115: PPUSH
17116: LD_STRING DK-Kaia-3
17118: PPUSH
17119: CALL_OW 88
17123: GO 17137
// Say ( Kaia , DK-Kaia-a-3 ) ;
17125: LD_EXP 43
17129: PPUSH
17130: LD_STRING DK-Kaia-a-3
17132: PPUSH
17133: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17137: LD_EXP 38
17141: PPUSH
17142: LD_STRING DH-Kaia-4
17144: PPUSH
17145: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17149: LD_EXP 43
17153: PPUSH
17154: LD_INT 2
17156: PPUSH
17157: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17161: LD_ADDR_EXP 14
17165: PUSH
17166: LD_EXP 14
17170: PPUSH
17171: LD_EXP 43
17175: PPUSH
17176: CALL 64014 0 2
17180: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17181: LD_EXP 43
17185: PPUSH
17186: CALL_OW 122
// end ; end ; ruWeaponsBar :
17190: GO 17772
17192: LD_INT 137
17194: DOUBLE
17195: EQUAL
17196: IFTRUE 17200
17198: GO 17771
17200: POP
// begin if hasWeapons then
17201: LD_EXP 19
17205: IFFALSE 17757
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17207: LD_ADDR_EXP 16
17211: PUSH
17212: LD_EXP 16
17216: PUSH
17217: LD_INT 137
17219: DIFF
17220: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17221: LD_ADDR_VAR 0 3
17225: PUSH
17226: LD_EXP 14
17230: PPUSH
17231: LD_INT 91
17233: PUSH
17234: LD_EXP 38
17238: PUSH
17239: LD_INT 8
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 72
17251: ST_TO_ADDR
// if not heikeSquad or not tmp then
17252: LD_EXP 14
17256: NOT
17257: PUSH
17258: LD_VAR 0 3
17262: NOT
17263: OR
17264: IFFALSE 17280
// Say ( Heike , DH-Weapons-Alone ) else
17266: LD_EXP 38
17270: PPUSH
17271: LD_STRING DH-Weapons-Alone
17273: PPUSH
17274: CALL_OW 88
17278: GO 17755
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
17280: LD_ADDR_EXP 16
17284: PUSH
17285: LD_EXP 16
17289: PPUSH
17290: LD_INT 137
17292: PPUSH
17293: CALL 64014 0 2
17297: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
17298: LD_EXP 38
17302: PPUSH
17303: LD_STRING DH-Weapons-1
17305: PPUSH
17306: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17310: LD_EXP 38
17314: PPUSH
17315: LD_STRING DH-Weapons-2
17317: PPUSH
17318: CALL_OW 88
// if hasRevolver and Kaia in tmp then
17322: LD_EXP 8
17326: PUSH
17327: LD_EXP 43
17331: PUSH
17332: LD_VAR 0 3
17336: IN
17337: AND
17338: IFFALSE 17427
// begin SetSide ( Kaia , 5 ) ;
17340: LD_EXP 43
17344: PPUSH
17345: LD_INT 5
17347: PPUSH
17348: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17352: LD_EXP 43
17356: PPUSH
17357: LD_INT 137
17359: PPUSH
17360: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17364: LD_INT 35
17366: PPUSH
17367: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17371: LD_EXP 43
17375: PPUSH
17376: CALL_OW 310
17380: IFFALSE 17364
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
17382: LD_EXP 38
17386: PPUSH
17387: LD_STRING DH-Kaia-Revolver-2
17389: PPUSH
17390: CALL_OW 88
// SetClassKaiaRevolver ;
17394: CALL 1686 0 0
// hasRevolver := false ;
17398: LD_ADDR_EXP 8
17402: PUSH
17403: LD_INT 0
17405: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
17406: LD_EXP 43
17410: PPUSH
17411: LD_INT 2
17413: PPUSH
17414: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
17418: LD_EXP 43
17422: PPUSH
17423: CALL_OW 122
// end ; if Givi in tmp then
17427: LD_EXP 39
17431: PUSH
17432: LD_VAR 0 3
17436: IN
17437: IFFALSE 17578
// begin SetSide ( Givi , 5 ) ;
17439: LD_EXP 39
17443: PPUSH
17444: LD_INT 5
17446: PPUSH
17447: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
17451: LD_EXP 39
17455: PPUSH
17456: LD_INT 137
17458: PPUSH
17459: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17463: LD_INT 35
17465: PPUSH
17466: CALL_OW 67
// until IsInUnit ( Givi ) ;
17470: LD_EXP 39
17474: PPUSH
17475: CALL_OW 310
17479: IFFALSE 17463
// Say ( Givi , DG-Weapons-3 ) ;
17481: LD_EXP 39
17485: PPUSH
17486: LD_STRING DG-Weapons-3
17488: PPUSH
17489: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
17493: LD_EXP 38
17497: PPUSH
17498: LD_STRING DH-Weapons-4
17500: PPUSH
17501: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
17505: LD_EXP 39
17509: PPUSH
17510: LD_STRING DG-Weapons-5
17512: PPUSH
17513: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
17517: LD_EXP 39
17521: PPUSH
17522: LD_INT 11
17524: PPUSH
17525: CALL_OW 336
// ComExitBuilding ( Givi ) ;
17529: LD_EXP 39
17533: PPUSH
17534: CALL_OW 122
// SetSide ( Givi , 2 ) ;
17538: LD_EXP 39
17542: PPUSH
17543: LD_INT 2
17545: PPUSH
17546: CALL_OW 235
// if hasRevolver then
17550: LD_EXP 8
17554: IFFALSE 17576
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17556: LD_EXP 38
17560: PPUSH
17561: LD_STRING DH-Kaia-Revolver-1
17563: PPUSH
17564: CALL_OW 88
// heikeHasRevolver := true ;
17568: LD_ADDR_EXP 20
17572: PUSH
17573: LD_INT 1
17575: ST_TO_ADDR
// end ; end else
17576: GO 17755
// if Kamil in tmp then
17578: LD_EXP 42
17582: PUSH
17583: LD_VAR 0 3
17587: IN
17588: IFFALSE 17717
// begin SetSide ( Kamil , 5 ) ;
17590: LD_EXP 42
17594: PPUSH
17595: LD_INT 5
17597: PPUSH
17598: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
17602: LD_EXP 42
17606: PPUSH
17607: LD_INT 137
17609: PPUSH
17610: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17614: LD_INT 35
17616: PPUSH
17617: CALL_OW 67
// until IsInUnit ( Kamil ) ;
17621: LD_EXP 42
17625: PPUSH
17626: CALL_OW 310
17630: IFFALSE 17614
// Say ( Kamil , DKam-Weapons-a-3 ) ;
17632: LD_EXP 42
17636: PPUSH
17637: LD_STRING DKam-Weapons-a-3
17639: PPUSH
17640: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
17644: LD_EXP 38
17648: PPUSH
17649: LD_STRING DH-Weapons-a-4
17651: PPUSH
17652: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
17656: LD_EXP 42
17660: PPUSH
17661: LD_INT 11
17663: PPUSH
17664: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
17668: LD_EXP 42
17672: PPUSH
17673: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
17677: LD_EXP 42
17681: PPUSH
17682: LD_INT 2
17684: PPUSH
17685: CALL_OW 235
// if hasRevolver then
17689: LD_EXP 8
17693: IFFALSE 17715
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17695: LD_EXP 38
17699: PPUSH
17700: LD_STRING DH-Kaia-Revolver-1
17702: PPUSH
17703: CALL_OW 88
// heikeHasRevolver := true ;
17707: LD_ADDR_EXP 20
17711: PUSH
17712: LD_INT 1
17714: ST_TO_ADDR
// end ; end else
17715: GO 17755
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
17717: LD_EXP 38
17721: PPUSH
17722: LD_STRING DH-Weapons-Alone-2
17724: PPUSH
17725: CALL_OW 88
// if hasRevolver then
17729: LD_EXP 8
17733: IFFALSE 17755
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
17735: LD_EXP 38
17739: PPUSH
17740: LD_STRING DH-Kaia-Revolver-1a
17742: PPUSH
17743: CALL_OW 88
// heikeHasRevolver := true ;
17747: LD_ADDR_EXP 20
17751: PUSH
17752: LD_INT 1
17754: ST_TO_ADDR
// end ; end ; end ; end else
17755: GO 17769
// Say ( Heike , DH-Locked ) ;
17757: LD_EXP 38
17761: PPUSH
17762: LD_STRING DH-Locked
17764: PPUSH
17765: CALL_OW 88
// end ; end ;
17769: GO 17772
17771: POP
// ComExitBuilding ( Heike ) ;
17772: LD_EXP 38
17776: PPUSH
17777: CALL_OW 122
// SetSide ( Heike , 2 ) ;
17781: LD_EXP 38
17785: PPUSH
17786: LD_INT 2
17788: PPUSH
17789: CALL_OW 235
// SetSide ( building , 3 ) ;
17793: LD_VAR 0 1
17797: PPUSH
17798: LD_INT 3
17800: PPUSH
17801: CALL_OW 235
// InGameOff ;
17805: CALL_OW 9
// end ;
17809: LD_VAR 0 2
17813: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
17814: LD_EXP 30
17818: NOT
17819: PUSH
17820: LD_EXP 17
17824: NOT
17825: AND
17826: PUSH
17827: LD_INT 22
17829: PUSH
17830: LD_INT 5
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 21
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PPUSH
17851: CALL_OW 69
17855: PUSH
17856: LD_INT 0
17858: EQUAL
17859: AND
17860: PUSH
17861: LD_INT 22
17863: PUSH
17864: LD_INT 4
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 21
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: PUSH
17890: LD_INT 0
17892: EQUAL
17893: PUSH
17894: LD_EXP 25
17898: AND
17899: PUSH
17900: LD_EXP 25
17904: NOT
17905: OR
17906: AND
17907: IFFALSE 17939
17909: GO 17911
17911: DISABLE
// begin DialogueOn ;
17912: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
17916: LD_EXP 38
17920: PPUSH
17921: LD_STRING DH-Alarm-2
17923: PPUSH
17924: CALL_OW 88
// DialogueOff ;
17928: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
17932: LD_STRING M1-people-out
17934: PPUSH
17935: CALL_OW 337
// end ; end_of_file
17939: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
17940: LD_VAR 0 1
17944: PUSH
17945: LD_INT 3
17947: DOUBLE
17948: EQUAL
17949: IFTRUE 17953
17951: GO 17983
17953: POP
// begin repeat wait ( 0 0$1 ) ;
17954: LD_INT 35
17956: PPUSH
17957: CALL_OW 67
// CenterOnUnits ( Heike ) ;
17961: LD_EXP 38
17965: PPUSH
17966: CALL_OW 85
// until IsDying ( Heike ) ;
17970: LD_EXP 38
17974: PPUSH
17975: CALL_OW 303
17979: IFFALSE 17954
// end ; end ;
17981: GO 17984
17983: POP
// end ;
17984: PPOPN 1
17986: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
17987: LD_OWVAR 59
17991: IFFALSE 17995
// exit ;
17993: GO 18069
// if showPlaceEvent then
17995: LD_INT 4
17997: IFFALSE 18069
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
17999: LD_VAR 0 2
18003: PPUSH
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_INT 2
18011: PPUSH
18012: LD_INT 6
18014: NEG
18015: PPUSH
18016: CALL_OW 330
// CenterOnXY ( x , y ) ;
18020: LD_VAR 0 2
18024: PPUSH
18025: LD_VAR 0 3
18029: PPUSH
18030: CALL_OW 84
// wait ( time ) ;
18034: LD_VAR 0 4
18038: PPUSH
18039: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
18043: LD_EXP 38
18047: PPUSH
18048: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
18052: LD_VAR 0 2
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: LD_INT 2
18064: PPUSH
18065: CALL_OW 331
// end ; end ;
18069: PPOPN 7
18071: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
18072: LD_VAR 0 1
18076: PUSH
18077: LD_EXP 38
18081: EQUAL
18082: PUSH
18083: LD_EXP 5
18087: AND
18088: IFFALSE 18112
// if loseCounter then
18090: LD_EXP 32
18094: IFFALSE 18105
// YouLost ( HeikeNoSurrender ) else
18096: LD_STRING HeikeNoSurrender
18098: PPUSH
18099: CALL_OW 104
18103: GO 18112
// YouLost ( Heike ) ;
18105: LD_STRING Heike
18107: PPUSH
18108: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 255
18121: PUSH
18122: LD_INT 2
18124: EQUAL
18125: PUSH
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 247
18135: PUSH
18136: LD_INT 1
18138: EQUAL
18139: AND
18140: IFFALSE 18157
// loseCounter := Inc ( loseCounter ) ;
18142: LD_ADDR_EXP 32
18146: PUSH
18147: LD_EXP 32
18151: PPUSH
18152: CALL 65375 0 1
18156: ST_TO_ADDR
// end ;
18157: PPOPN 1
18159: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
18160: LD_VAR 0 1
18164: PUSH
18165: LD_INT 2
18167: EQUAL
18168: PUSH
18169: LD_VAR 0 2
18173: PUSH
18174: LD_INT 3
18176: EQUAL
18177: AND
18178: PUSH
18179: LD_VAR 0 1
18183: PUSH
18184: LD_INT 3
18186: EQUAL
18187: PUSH
18188: LD_VAR 0 2
18192: PUSH
18193: LD_INT 2
18195: EQUAL
18196: AND
18197: OR
18198: IFFALSE 18208
// isAlarm := true ;
18200: LD_ADDR_EXP 17
18204: PUSH
18205: LD_INT 1
18207: ST_TO_ADDR
// end ; end_of_file
18208: PPOPN 2
18210: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
18211: LD_INT 0
18213: PPUSH
18214: PPUSH
18215: PPUSH
// u1 := IsInUnit ( unit1 ) ;
18216: LD_ADDR_VAR 0 4
18220: PUSH
18221: LD_VAR 0 1
18225: PPUSH
18226: CALL_OW 310
18230: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
18231: LD_ADDR_VAR 0 5
18235: PUSH
18236: LD_VAR 0 2
18240: PPUSH
18241: CALL_OW 310
18245: ST_TO_ADDR
// result := u1 and u1 = u2 ;
18246: LD_ADDR_VAR 0 3
18250: PUSH
18251: LD_VAR 0 4
18255: PUSH
18256: LD_VAR 0 4
18260: PUSH
18261: LD_VAR 0 5
18265: EQUAL
18266: AND
18267: ST_TO_ADDR
// end ;
18268: LD_VAR 0 3
18272: RET
// export function ShowPlace ( x , y , time ) ; begin
18273: LD_INT 0
18275: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
18276: LD_INT 4
18278: PPUSH
18279: LD_VAR 0 1
18283: PPUSH
18284: LD_VAR 0 2
18288: PPUSH
18289: LD_VAR 0 3
18293: PPUSH
18294: LD_INT 0
18296: PPUSH
18297: LD_INT 0
18299: PPUSH
18300: LD_INT 0
18302: PPUSH
18303: CALL_OW 595
// end ;
18307: LD_VAR 0 4
18311: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
18312: LD_INT 0
18314: PPUSH
18315: PPUSH
18316: PPUSH
18317: PPUSH
18318: PPUSH
18319: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
18320: LD_VAR 0 1
18324: PPUSH
18325: CALL_OW 302
18329: NOT
18330: PUSH
18331: LD_VAR 0 2
18335: PPUSH
18336: CALL_OW 302
18340: NOT
18341: OR
18342: PUSH
18343: LD_VAR 0 2
18347: PPUSH
18348: CALL_OW 313
18352: PUSH
18353: LD_INT 6
18355: EQUAL
18356: OR
18357: IFFALSE 18361
// exit ;
18359: GO 18578
// btype := GetBType ( building ) ;
18361: LD_ADDR_VAR 0 8
18365: PUSH
18366: LD_VAR 0 2
18370: PPUSH
18371: CALL_OW 266
18375: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
18376: LD_VAR 0 8
18380: PUSH
18381: LD_INT 0
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: LD_INT 2
18389: PUSH
18390: LD_INT 4
18392: PUSH
18393: LD_INT 5
18395: PUSH
18396: LD_INT 3
18398: PUSH
18399: LD_INT 6
18401: PUSH
18402: LD_INT 7
18404: PUSH
18405: LD_INT 8
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: IN
18419: NOT
18420: IFFALSE 18424
// exit ;
18422: GO 18578
// x := GetX ( building ) ;
18424: LD_ADDR_VAR 0 4
18428: PUSH
18429: LD_VAR 0 2
18433: PPUSH
18434: CALL_OW 250
18438: ST_TO_ADDR
// y := GetY ( building ) ;
18439: LD_ADDR_VAR 0 5
18443: PUSH
18444: LD_VAR 0 2
18448: PPUSH
18449: CALL_OW 251
18453: ST_TO_ADDR
// d := GetDir ( building ) ;
18454: LD_ADDR_VAR 0 6
18458: PUSH
18459: LD_VAR 0 2
18463: PPUSH
18464: CALL_OW 254
18468: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
18469: LD_ADDR_VAR 0 7
18473: PUSH
18474: LD_VAR 0 4
18478: PPUSH
18479: LD_VAR 0 6
18483: PPUSH
18484: LD_INT 3
18486: PPUSH
18487: CALL_OW 272
18491: PUSH
18492: LD_VAR 0 5
18496: PPUSH
18497: LD_VAR 0 6
18501: PPUSH
18502: LD_INT 3
18504: PPUSH
18505: CALL_OW 273
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
18514: LD_VAR 0 7
18518: PUSH
18519: LD_INT 1
18521: ARRAY
18522: PPUSH
18523: LD_VAR 0 7
18527: PUSH
18528: LD_INT 2
18530: ARRAY
18531: PPUSH
18532: CALL_OW 488
18536: NOT
18537: IFFALSE 18541
// exit ;
18539: GO 18578
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
18541: LD_ADDR_VAR 0 3
18545: PUSH
18546: LD_VAR 0 1
18550: PPUSH
18551: LD_VAR 0 7
18555: PUSH
18556: LD_INT 1
18558: ARRAY
18559: PPUSH
18560: LD_VAR 0 7
18564: PUSH
18565: LD_INT 2
18567: ARRAY
18568: PPUSH
18569: CALL_OW 297
18573: PUSH
18574: LD_INT 4
18576: LESS
18577: ST_TO_ADDR
// end ;
18578: LD_VAR 0 3
18582: RET
// export function PlaceExplosives ( building ) ; begin
18583: LD_INT 0
18585: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
18586: LD_ADDR_EXP 29
18590: PUSH
18591: LD_EXP 29
18595: PPUSH
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL 64014 0 2
18605: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
18606: LD_VAR 0 1
18610: PPUSH
18611: CALL_OW 250
18615: PPUSH
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 251
18625: PPUSH
18626: LD_STRING PlantBomb
18628: PPUSH
18629: CALL_OW 366
// end ;
18633: LD_VAR 0 2
18637: RET
// export function CreateNature ; var i ; begin
18638: LD_INT 0
18640: PPUSH
18641: PPUSH
// PrepareFrog ;
18642: CALL 60496 0 0
// for i := 1 to 3 do
18646: LD_ADDR_VAR 0 2
18650: PUSH
18651: DOUBLE
18652: LD_INT 1
18654: DEC
18655: ST_TO_ADDR
18656: LD_INT 3
18658: PUSH
18659: FOR_TO
18660: IFFALSE 18679
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
18662: CALL_OW 44
18666: PPUSH
18667: LD_INT 24
18669: PPUSH
18670: LD_INT 0
18672: PPUSH
18673: CALL_OW 49
18677: GO 18659
18679: POP
18680: POP
// end ;
18681: LD_VAR 0 1
18685: RET
// export function MarkBuilding ( building , marker ) ; begin
18686: LD_INT 0
18688: PPUSH
// if marker then
18689: LD_VAR 0 2
18693: IFFALSE 18740
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
18695: LD_VAR 0 1
18699: PPUSH
18700: CALL_OW 250
18704: PPUSH
18705: LD_VAR 0 1
18709: PPUSH
18710: CALL_OW 251
18714: PPUSH
18715: LD_INT 2
18717: PPUSH
18718: LD_INT 3
18720: NEG
18721: PPUSH
18722: CALL_OW 330
// SetBName ( building , target ) ;
18726: LD_VAR 0 1
18730: PPUSH
18731: LD_STRING target
18733: PPUSH
18734: CALL_OW 500
// end else
18738: GO 18779
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
18740: LD_VAR 0 1
18744: PPUSH
18745: CALL_OW 250
18749: PPUSH
18750: LD_VAR 0 1
18754: PPUSH
18755: CALL_OW 251
18759: PPUSH
18760: LD_INT 2
18762: PPUSH
18763: CALL_OW 331
// SetBName ( building ,  ) ;
18767: LD_VAR 0 1
18771: PPUSH
18772: LD_STRING 
18774: PPUSH
18775: CALL_OW 500
// end ; end ; end_of_file
18779: LD_VAR 0 3
18783: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
18784: LD_INT 0
18786: PPUSH
// lockerCodeValid := false ;
18787: LD_ADDR_EXP 64
18791: PUSH
18792: LD_INT 0
18794: ST_TO_ADDR
// if not step then
18795: LD_LOC 1
18799: NOT
18800: IFFALSE 18810
// step := 1 ;
18802: LD_ADDR_LOC 1
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
18810: LD_STRING HEscape
18812: PUSH
18813: LD_LOC 1
18817: STR
18818: PPUSH
18819: CALL_OW 97
18823: PUSH
18824: LD_INT 1
18826: DOUBLE
18827: EQUAL
18828: IFTRUE 18832
18830: GO 18839
18832: POP
// LockerMinigameSearch ; 2 :
18833: CALL 18872 0 0
18837: GO 18855
18839: LD_INT 2
18841: DOUBLE
18842: EQUAL
18843: IFTRUE 18847
18845: GO 18854
18847: POP
// LockerMinigameSetCode ; end ;
18848: CALL 18946 0 0
18852: GO 18855
18854: POP
// if lockerCodeValid then
18855: LD_EXP 64
18859: IFFALSE 18863
// exit ;
18861: GO 18867
// StartLockerMinigame ;
18863: CALL 18784 0 0
// end ;
18867: LD_VAR 0 1
18871: RET
// function LockerMinigameSearch ; begin
18872: LD_INT 0
18874: PPUSH
// if code then
18875: LD_LOC 2
18879: IFFALSE 18895
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
18881: LD_EXP 38
18885: PPUSH
18886: LD_STRING DH-Escape-3-Hint-0
18888: PPUSH
18889: CALL_OW 88
// exit ;
18893: GO 18941
// end ; Randomize ;
18895: CALL_OW 10
// code := rand ( 1 , 5 ) ;
18899: LD_ADDR_LOC 2
18903: PUSH
18904: LD_INT 1
18906: PPUSH
18907: LD_INT 5
18909: PPUSH
18910: CALL_OW 12
18914: ST_TO_ADDR
// step := 2 ;
18915: LD_ADDR_LOC 1
18919: PUSH
18920: LD_INT 2
18922: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
18923: LD_EXP 38
18927: PPUSH
18928: LD_STRING DH-Escape-3-Hint-
18930: PUSH
18931: LD_LOC 2
18935: STR
18936: PPUSH
18937: CALL_OW 88
// end ;
18941: LD_VAR 0 1
18945: RET
// function LockerMinigameSetCode ; begin
18946: LD_INT 0
18948: PPUSH
// if not code then
18949: LD_LOC 2
18953: NOT
18954: IFFALSE 18964
// code := 0 ;
18956: LD_ADDR_LOC 2
18960: PUSH
18961: LD_INT 0
18963: ST_TO_ADDR
// lockerBusy := true ;
18964: LD_ADDR_EXP 65
18968: PUSH
18969: LD_INT 1
18971: ST_TO_ADDR
// InGameOff ;
18972: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
18976: LD_STRING initLockerMinigame("
18978: PUSH
18979: LD_LOC 2
18983: STR
18984: PUSH
18985: LD_STRING ")
18987: STR
18988: PPUSH
18989: CALL_OW 559
// step := 3 ;
18993: LD_ADDR_LOC 1
18997: PUSH
18998: LD_INT 3
19000: ST_TO_ADDR
// repeat wait ( 1 ) ;
19001: LD_INT 1
19003: PPUSH
19004: CALL_OW 67
// until not lockerBusy ;
19008: LD_EXP 65
19012: NOT
19013: IFFALSE 19001
// InGameOn ;
19015: CALL_OW 8
// if not lockerCodeValid then
19019: LD_EXP 64
19023: NOT
19024: IFFALSE 19050
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
19026: LD_EXP 38
19030: PPUSH
19031: LD_STRING DH-Escape-3-Fail-
19033: PUSH
19034: LD_INT 1
19036: PPUSH
19037: LD_INT 2
19039: PPUSH
19040: CALL_OW 12
19044: STR
19045: PPUSH
19046: CALL_OW 88
// end ; end_of_file
19050: LD_VAR 0 1
19054: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
19055: LD_VAR 0 2
19059: PUSH
19060: LD_INT 102
19062: EQUAL
19063: IFFALSE 19085
// begin lockerBusy := false ;
19065: LD_ADDR_EXP 65
19069: PUSH
19070: LD_INT 0
19072: ST_TO_ADDR
// lockerCodeValid := p3 ;
19073: LD_ADDR_EXP 64
19077: PUSH
19078: LD_VAR 0 3
19082: ST_TO_ADDR
// end else
19083: GO 19139
// if p2 = 103 then
19085: LD_VAR 0 2
19089: PUSH
19090: LD_INT 103
19092: EQUAL
19093: IFFALSE 19105
// begin weatherBusy := false ;
19095: LD_ADDR_EXP 37
19099: PUSH
19100: LD_INT 0
19102: ST_TO_ADDR
// end else
19103: GO 19139
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
19105: LD_VAR 0 1
19109: PPUSH
19110: LD_VAR 0 2
19114: PPUSH
19115: LD_VAR 0 3
19119: PPUSH
19120: LD_VAR 0 4
19124: PPUSH
19125: LD_VAR 0 5
19129: PPUSH
19130: LD_VAR 0 6
19134: PPUSH
19135: CALL 67984 0 6
// end ;
19139: PPOPN 6
19141: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
19142: LD_STRING killGameMusic();
19144: PPUSH
19145: CALL_OW 559
// SOS_MapStart ( ) ;
19149: CALL 67955 0 0
// end ; end_of_file
19153: PPOPN 1
19155: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
19156: LD_EXP 17
19160: NOT
19161: PUSH
19162: LD_EXP 63
19166: AND
19167: IFFALSE 19571
19169: GO 19171
19171: DISABLE
19172: LD_INT 0
19174: PPUSH
19175: PPUSH
19176: PPUSH
19177: PPUSH
19178: PPUSH
// begin enable ;
19179: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
19180: LD_ADDR_VAR 0 3
19184: PUSH
19185: LD_INT 26
19187: PUSH
19188: LD_INT 27
19190: PUSH
19191: LD_INT 28
19193: PUSH
19194: LD_INT 29
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 30
19205: PUSH
19206: LD_INT 31
19208: PUSH
19209: LD_INT 32
19211: PUSH
19212: LD_INT 33
19214: PUSH
19215: LD_INT 34
19217: PUSH
19218: LD_INT 35
19220: PUSH
19221: LD_INT 36
19223: PUSH
19224: LD_INT 37
19226: PUSH
19227: LD_INT 38
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 39
19243: PUSH
19244: LD_INT 40
19246: PUSH
19247: LD_INT 41
19249: PUSH
19250: LD_INT 42
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 43
19261: PUSH
19262: LD_INT 44
19264: PUSH
19265: LD_INT 45
19267: PUSH
19268: LD_INT 46
19270: PUSH
19271: LD_INT 47
19273: PUSH
19274: LD_INT 46
19276: PUSH
19277: LD_INT 45
19279: PUSH
19280: LD_INT 44
19282: PUSH
19283: LD_INT 43
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: ST_TO_ADDR
// for i in ruPatrol do
19303: LD_ADDR_VAR 0 1
19307: PUSH
19308: LD_EXP 63
19312: PUSH
19313: FOR_IN
19314: IFFALSE 19569
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
19316: LD_ADDR_VAR 0 5
19320: PUSH
19321: LD_INT 22
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 21
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 91
19343: PUSH
19344: LD_VAR 0 1
19348: PUSH
19349: LD_INT 7
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: LIST
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: LIST
19361: PPUSH
19362: CALL_OW 69
19366: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
19367: LD_INT 2
19369: PPUSH
19370: LD_VAR 0 1
19374: PPUSH
19375: CALL_OW 292
19379: PUSH
19380: LD_VAR 0 5
19384: AND
19385: IFFALSE 19455
// begin if hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 then
19387: LD_EXP 30
19391: PUSH
19392: LD_VAR 0 1
19396: PPUSH
19397: LD_EXP 58
19401: PPUSH
19402: CALL_OW 296
19406: PUSH
19407: LD_INT 16
19409: LESS
19410: AND
19411: IFFALSE 19415
// continue ;
19413: GO 19313
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
19415: LD_VAR 0 1
19419: PPUSH
19420: LD_VAR 0 5
19424: PPUSH
19425: LD_VAR 0 1
19429: PPUSH
19430: CALL_OW 74
19434: PPUSH
19435: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_VAR 0 5
19448: PPUSH
19449: CALL 19574 0 2
// continue ;
19453: GO 19313
// end ; if HasTask ( i ) then
19455: LD_VAR 0 1
19459: PPUSH
19460: CALL_OW 314
19464: IFFALSE 19468
// continue ;
19466: GO 19313
// tag := GetTag ( i ) ;
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL_OW 110
19482: ST_TO_ADDR
// if not tag then
19483: LD_VAR 0 4
19487: NOT
19488: IFFALSE 19501
// begin ComHold ( i ) ;
19490: LD_VAR 0 1
19494: PPUSH
19495: CALL_OW 140
// continue ;
19499: GO 19313
// end ; for j := 1 to points [ tag ] do
19501: LD_ADDR_VAR 0 2
19505: PUSH
19506: DOUBLE
19507: LD_INT 1
19509: DEC
19510: ST_TO_ADDR
19511: LD_VAR 0 3
19515: PUSH
19516: LD_VAR 0 4
19520: ARRAY
19521: PUSH
19522: FOR_TO
19523: IFFALSE 19565
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
19525: LD_VAR 0 1
19529: PPUSH
19530: LD_VAR 0 3
19534: PUSH
19535: LD_VAR 0 4
19539: ARRAY
19540: PUSH
19541: LD_VAR 0 2
19545: ARRAY
19546: PPUSH
19547: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
19551: LD_VAR 0 1
19555: PPUSH
19556: LD_INT 70
19558: PPUSH
19559: CALL_OW 202
// end ;
19563: GO 19522
19565: POP
19566: POP
// end ;
19567: GO 19313
19569: POP
19570: POP
// end ;
19571: PPOPN 5
19573: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
19574: LD_INT 0
19576: PPUSH
19577: PPUSH
19578: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
19579: LD_VAR 0 2
19583: PPUSH
19584: LD_INT 23
19586: PUSH
19587: LD_INT 3
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PPUSH
19594: CALL_OW 72
19598: PUSH
19599: LD_VAR 0 2
19603: PPUSH
19604: LD_INT 95
19606: PUSH
19607: LD_INT 61
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PPUSH
19614: CALL_OW 72
19618: OR
19619: IFFALSE 19623
// exit ;
19621: GO 20666
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
19623: LD_VAR 0 2
19627: PPUSH
19628: LD_INT 2
19630: PUSH
19631: LD_INT 25
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 25
19643: PUSH
19644: LD_INT 11
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 25
19653: PUSH
19654: LD_INT 34
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 25
19663: PUSH
19664: LD_INT 32
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: PPUSH
19681: CALL_OW 72
19685: IFFALSE 19769
// begin DialogueOn ;
19687: CALL_OW 6
// case GetSex ( guard ) of sex_male :
19691: LD_VAR 0 1
19695: PPUSH
19696: CALL_OW 258
19700: PUSH
19701: LD_INT 1
19703: DOUBLE
19704: EQUAL
19705: IFTRUE 19709
19707: GO 19724
19709: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
19710: LD_VAR 0 1
19714: PPUSH
19715: LD_STRING DRum-Fail-3
19717: PPUSH
19718: CALL_OW 88
19722: GO 19748
19724: LD_INT 2
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19747
19732: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
19733: LD_VAR 0 1
19737: PPUSH
19738: LD_STRING DRum-Fail-3
19740: PPUSH
19741: CALL_OW 88
19745: GO 19748
19747: POP
// DialogueOff ;
19748: CALL_OW 7
// wait ( 0 0$5 ) ;
19752: LD_INT 175
19754: PPUSH
19755: CALL_OW 67
// isAlarm := true ;
19759: LD_ADDR_EXP 17
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// exit ;
19767: GO 20666
// end ; DialogueOn ;
19769: CALL_OW 6
// CenterNowOnUnits ( guard ) ;
19773: LD_VAR 0 1
19777: PPUSH
19778: CALL_OW 87
// if not Heike in units then
19782: LD_EXP 38
19786: PUSH
19787: LD_VAR 0 2
19791: IN
19792: NOT
19793: IFFALSE 20143
// begin case GetSex ( guard ) of sex_male :
19795: LD_VAR 0 1
19799: PPUSH
19800: CALL_OW 258
19804: PUSH
19805: LD_INT 1
19807: DOUBLE
19808: EQUAL
19809: IFTRUE 19813
19811: GO 19828
19813: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
19814: LD_VAR 0 1
19818: PPUSH
19819: LD_STRING DRum-Guard-1
19821: PPUSH
19822: CALL_OW 88
19826: GO 19852
19828: LD_INT 2
19830: DOUBLE
19831: EQUAL
19832: IFTRUE 19836
19834: GO 19851
19836: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
19837: LD_VAR 0 1
19841: PPUSH
19842: LD_STRING DRuf-Guard-1
19844: PPUSH
19845: CALL_OW 88
19849: GO 19852
19851: POP
// case Query ( SurrenderInfoPeople ) of 1 :
19852: LD_STRING SurrenderInfoPeople
19854: PPUSH
19855: CALL_OW 97
19859: PUSH
19860: LD_INT 1
19862: DOUBLE
19863: EQUAL
19864: IFTRUE 19868
19866: GO 19969
19868: POP
// begin Query ( CaughtSquadInfo ) ;
19869: LD_STRING CaughtSquadInfo
19871: PPUSH
19872: CALL_OW 97
// for i in units do
19876: LD_ADDR_VAR 0 4
19880: PUSH
19881: LD_VAR 0 2
19885: PUSH
19886: FOR_IN
19887: IFFALSE 19944
// begin if Carry ( i ) then
19889: LD_VAR 0 4
19893: PPUSH
19894: CALL_OW 281
19898: IFFALSE 19915
// SetCargo ( i , mat_cans , 0 ) ;
19900: LD_VAR 0 4
19904: PPUSH
19905: LD_INT 1
19907: PPUSH
19908: LD_INT 0
19910: PPUSH
19911: CALL_OW 290
// SetSide ( i , 5 ) ;
19915: LD_VAR 0 4
19919: PPUSH
19920: LD_INT 5
19922: PPUSH
19923: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
19927: LD_VAR 0 4
19931: PPUSH
19932: LD_INT 113
19934: PPUSH
19935: LD_INT 17
19937: PPUSH
19938: CALL_OW 111
// end ;
19942: GO 19886
19944: POP
19945: POP
// ComMoveXY ( guard , 113 , 17 ) ;
19946: LD_VAR 0 1
19950: PPUSH
19951: LD_INT 113
19953: PPUSH
19954: LD_INT 17
19956: PPUSH
19957: CALL_OW 111
// DialogueOff ;
19961: CALL_OW 7
// exit ;
19965: GO 20666
// end ; 2 :
19967: GO 20143
19969: LD_INT 2
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 20142
19977: POP
// begin DialogueOff ;
19978: CALL_OW 7
// wait ( 0 0$2 ) ;
19982: LD_INT 70
19984: PPUSH
19985: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
19989: LD_INT 6
19991: PPUSH
19992: LD_INT 2
19994: PPUSH
19995: LD_INT 2
19997: PPUSH
19998: LD_INT 1
20000: PPUSH
20001: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
20005: LD_VAR 0 1
20009: PPUSH
20010: LD_VAR 0 2
20014: PUSH
20015: LD_INT 1
20017: ARRAY
20018: PPUSH
20019: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL_OW 258
20032: PUSH
20033: LD_INT 1
20035: DOUBLE
20036: EQUAL
20037: IFTRUE 20041
20039: GO 20056
20041: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20042: LD_VAR 0 1
20046: PPUSH
20047: LD_STRING DRum-Fail-3
20049: PPUSH
20050: CALL_OW 88
20054: GO 20080
20056: LD_INT 2
20058: DOUBLE
20059: EQUAL
20060: IFTRUE 20064
20062: GO 20079
20064: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20065: LD_VAR 0 1
20069: PPUSH
20070: LD_STRING DRum-Fail-3
20072: PPUSH
20073: CALL_OW 88
20077: GO 20080
20079: POP
// wait ( 0 0$5 ) ;
20080: LD_INT 175
20082: PPUSH
20083: CALL_OW 67
// if IsOk ( guard ) then
20087: LD_VAR 0 1
20091: PPUSH
20092: CALL_OW 302
20096: IFFALSE 20108
// isAlarm := true else
20098: LD_ADDR_EXP 17
20102: PUSH
20103: LD_INT 1
20105: ST_TO_ADDR
20106: GO 20140
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20108: LD_INT 6
20110: PPUSH
20111: LD_INT 2
20113: PPUSH
20114: LD_INT 0
20116: PPUSH
20117: LD_INT 1
20119: PPUSH
20120: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20124: LD_INT 3
20126: PPUSH
20127: LD_INT 2
20129: PPUSH
20130: LD_INT 0
20132: PPUSH
20133: LD_INT 1
20135: PPUSH
20136: CALL_OW 80
// end ; end ; end ;
20140: GO 20143
20142: POP
// end ; if Carry ( Heike ) then
20143: LD_EXP 38
20147: PPUSH
20148: CALL_OW 281
20152: IFFALSE 20228
// begin case GetSex ( guard ) of sex_male :
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 258
20163: PUSH
20164: LD_INT 1
20166: DOUBLE
20167: EQUAL
20168: IFTRUE 20172
20170: GO 20187
20172: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
20173: LD_VAR 0 1
20177: PPUSH
20178: LD_STRING DRum-FoodFail-1
20180: PPUSH
20181: CALL_OW 88
20185: GO 20211
20187: LD_INT 2
20189: DOUBLE
20190: EQUAL
20191: IFTRUE 20195
20193: GO 20210
20195: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
20196: LD_VAR 0 1
20200: PPUSH
20201: LD_STRING DRuf-FoodFail-2
20203: PPUSH
20204: CALL_OW 88
20208: GO 20211
20210: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
20211: LD_EXP 38
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: LD_INT 0
20221: PPUSH
20222: CALL_OW 290
// end else
20226: GO 20285
// begin case GetSex ( guard ) of sex_male :
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL_OW 258
20237: PUSH
20238: LD_INT 1
20240: DOUBLE
20241: EQUAL
20242: IFTRUE 20246
20244: GO 20261
20246: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
20247: LD_VAR 0 1
20251: PPUSH
20252: LD_STRING DRum-Seen-1
20254: PPUSH
20255: CALL_OW 88
20259: GO 20285
20261: LD_INT 2
20263: DOUBLE
20264: EQUAL
20265: IFTRUE 20269
20267: GO 20284
20269: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
20270: LD_VAR 0 1
20274: PPUSH
20275: LD_STRING DRuf-Seen-1
20277: PPUSH
20278: CALL_OW 88
20282: GO 20285
20284: POP
// end ; alone := ( units = 1 ) ;
20285: LD_ADDR_VAR 0 5
20289: PUSH
20290: LD_VAR 0 2
20294: PUSH
20295: LD_INT 1
20297: EQUAL
20298: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
20299: LD_STRING SurrenderInfo
20301: PPUSH
20302: CALL_OW 97
20306: PUSH
20307: LD_INT 1
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20484
20315: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
20316: LD_INT 23
20318: PPUSH
20319: CALL_OW 87
// RemoveUnit ( Heike ) ;
20323: LD_EXP 38
20327: PPUSH
20328: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
20332: LD_EXP 38
20336: PPUSH
20337: LD_INT 23
20339: PPUSH
20340: CALL_OW 52
// if not alone then
20344: LD_VAR 0 5
20348: NOT
20349: IFFALSE 20404
// for i in units diff Heike do
20351: LD_ADDR_VAR 0 4
20355: PUSH
20356: LD_VAR 0 2
20360: PUSH
20361: LD_EXP 38
20365: DIFF
20366: PUSH
20367: FOR_IN
20368: IFFALSE 20402
// begin RemoveUnit ( i ) ;
20370: LD_VAR 0 4
20374: PPUSH
20375: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
20379: LD_VAR 0 4
20383: PPUSH
20384: LD_INT 114
20386: PPUSH
20387: LD_INT 17
20389: PPUSH
20390: LD_INT 10
20392: PPUSH
20393: LD_INT 0
20395: PPUSH
20396: CALL_OW 50
// end ;
20400: GO 20367
20402: POP
20403: POP
// wait ( 0 0$0.3 ) ;
20404: LD_INT 10
20406: PPUSH
20407: CALL_OW 67
// if alone then
20411: LD_VAR 0 5
20415: IFFALSE 20426
// Query ( CaughtInfoAlone ) else
20417: LD_STRING CaughtInfoAlone
20419: PPUSH
20420: CALL_OW 97
20424: GO 20433
// Query ( CaughtInfo ) ;
20426: LD_STRING CaughtInfo
20428: PPUSH
20429: CALL_OW 97
// wait ( 0 0$1 ) ;
20433: LD_INT 35
20435: PPUSH
20436: CALL_OW 67
// StartLockerMinigame ;
20440: CALL 18784 0 0
// Say ( Heike , DH-Reset ) ;
20444: LD_EXP 38
20448: PPUSH
20449: LD_STRING DH-Reset
20451: PPUSH
20452: CALL_OW 88
// DialogueOff ;
20456: CALL_OW 7
// InGameOff ;
20460: CALL_OW 9
// ComExitBuilding ( Heike ) ;
20464: LD_EXP 38
20468: PPUSH
20469: CALL_OW 122
// ComFree ( guard ) ;
20473: LD_VAR 0 1
20477: PPUSH
20478: CALL_OW 139
// end ; 2 :
20482: GO 20666
20484: LD_INT 2
20486: DOUBLE
20487: EQUAL
20488: IFTRUE 20492
20490: GO 20665
20492: POP
// begin Say ( Heike , DH-Guard-2 ) ;
20493: LD_EXP 38
20497: PPUSH
20498: LD_STRING DH-Guard-2
20500: PPUSH
20501: CALL_OW 88
// DialogueOff ;
20505: CALL_OW 7
// wait ( 0 0$2 ) ;
20509: LD_INT 70
20511: PPUSH
20512: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20516: LD_INT 6
20518: PPUSH
20519: LD_INT 2
20521: PPUSH
20522: LD_INT 2
20524: PPUSH
20525: LD_INT 1
20527: PPUSH
20528: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
20532: LD_VAR 0 1
20536: PPUSH
20537: LD_EXP 38
20541: PPUSH
20542: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20546: LD_VAR 0 1
20550: PPUSH
20551: CALL_OW 258
20555: PUSH
20556: LD_INT 1
20558: DOUBLE
20559: EQUAL
20560: IFTRUE 20564
20562: GO 20579
20564: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20565: LD_VAR 0 1
20569: PPUSH
20570: LD_STRING DRum-Fail-3
20572: PPUSH
20573: CALL_OW 88
20577: GO 20603
20579: LD_INT 2
20581: DOUBLE
20582: EQUAL
20583: IFTRUE 20587
20585: GO 20602
20587: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20588: LD_VAR 0 1
20592: PPUSH
20593: LD_STRING DRum-Fail-3
20595: PPUSH
20596: CALL_OW 88
20600: GO 20603
20602: POP
// wait ( 0 0$5 ) ;
20603: LD_INT 175
20605: PPUSH
20606: CALL_OW 67
// if IsOk ( guard ) then
20610: LD_VAR 0 1
20614: PPUSH
20615: CALL_OW 302
20619: IFFALSE 20631
// isAlarm := true else
20621: LD_ADDR_EXP 17
20625: PUSH
20626: LD_INT 1
20628: ST_TO_ADDR
20629: GO 20663
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20631: LD_INT 6
20633: PPUSH
20634: LD_INT 2
20636: PPUSH
20637: LD_INT 0
20639: PPUSH
20640: LD_INT 1
20642: PPUSH
20643: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20647: LD_INT 3
20649: PPUSH
20650: LD_INT 2
20652: PPUSH
20653: LD_INT 0
20655: PPUSH
20656: LD_INT 1
20658: PPUSH
20659: CALL_OW 80
// end ; end ; end ;
20663: GO 20666
20665: POP
// end ;
20666: LD_VAR 0 3
20670: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
20671: LD_EXP 14
20675: PPUSH
20676: LD_INT 22
20678: PUSH
20679: LD_INT 5
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 3
20688: PUSH
20689: LD_INT 101
20691: PUSH
20692: LD_INT 6
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 92
20705: PUSH
20706: LD_INT 113
20708: PUSH
20709: LD_INT 16
20711: PUSH
20712: LD_INT 12
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 91
20723: PUSH
20724: LD_EXP 38
20728: PUSH
20729: LD_INT 6
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: PPUSH
20743: CALL_OW 72
20747: PUSH
20748: LD_EXP 30
20752: NOT
20753: AND
20754: IFFALSE 20859
20756: GO 20758
20758: DISABLE
20759: LD_INT 0
20761: PPUSH
// begin enable ;
20762: ENABLE
// DialogueOn ;
20763: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
20767: LD_EXP 38
20771: PPUSH
20772: LD_STRING DH-Join-
20774: PUSH
20775: LD_INT 1
20777: PPUSH
20778: LD_INT 3
20780: PPUSH
20781: CALL_OW 12
20785: STR
20786: PPUSH
20787: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
20791: LD_ADDR_VAR 0 1
20795: PUSH
20796: LD_EXP 14
20800: PPUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 5
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 91
20813: PUSH
20814: LD_EXP 38
20818: PUSH
20819: LD_INT 10
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PPUSH
20831: CALL_OW 72
20835: PUSH
20836: FOR_IN
20837: IFFALSE 20853
// SetSide ( i , 2 ) ;
20839: LD_VAR 0 1
20843: PPUSH
20844: LD_INT 2
20846: PPUSH
20847: CALL_OW 235
20851: GO 20836
20853: POP
20854: POP
// DialogueOff ;
20855: CALL_OW 7
// end ; end_of_file
20859: PPOPN 1
20861: END
// every 0 0$2 trigger isAlarm do var i , points , tmp ;
20862: LD_EXP 17
20866: IFFALSE 21167
20868: GO 20870
20870: DISABLE
20871: LD_INT 0
20873: PPUSH
20874: PPUSH
20875: PPUSH
// begin DialogueOn ;
20876: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
20880: LD_EXP 38
20884: PPUSH
20885: LD_STRING DH-Alarm-1
20887: PPUSH
20888: CALL_OW 88
// DialogueOff ;
20892: CALL_OW 7
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
20896: LD_INT 1
20898: NEG
20899: PPUSH
20900: LD_INT 1
20902: NEG
20903: PPUSH
20904: LD_STRING alarm
20906: PPUSH
20907: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
20911: LD_INT 3
20913: PPUSH
20914: LD_INT 2
20916: PPUSH
20917: LD_INT 2
20919: PPUSH
20920: LD_INT 1
20922: PPUSH
20923: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20927: LD_INT 6
20929: PPUSH
20930: LD_INT 2
20932: PPUSH
20933: LD_INT 2
20935: PPUSH
20936: LD_INT 1
20938: PPUSH
20939: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_INT 107
20950: PUSH
20951: LD_INT 39
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 143
20960: PUSH
20961: LD_INT 33
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 180
20970: PUSH
20971: LD_INT 115
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 96
20980: PUSH
20981: LD_INT 90
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 59
20990: PUSH
20991: LD_INT 52
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 16
21000: PUSH
21001: LD_INT 15
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 90
21010: PUSH
21011: LD_INT 120
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
21027: LD_ADDR_VAR 0 3
21031: PUSH
21032: LD_INT 22
21034: PUSH
21035: LD_INT 6
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 25
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PPUSH
21056: CALL_OW 69
21060: ST_TO_ADDR
// for i in tmp do
21061: LD_ADDR_VAR 0 1
21065: PUSH
21066: LD_VAR 0 3
21070: PUSH
21071: FOR_IN
21072: IFFALSE 21140
// begin ComExit ( i ) ;
21074: LD_VAR 0 1
21078: PPUSH
21079: CALL 64412 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
21083: LD_VAR 0 1
21087: PPUSH
21088: LD_VAR 0 2
21092: PUSH
21093: LD_VAR 0 1
21097: PUSH
21098: LD_INT 7
21100: MOD
21101: PUSH
21102: LD_INT 1
21104: PLUS
21105: ARRAY
21106: PUSH
21107: LD_INT 1
21109: ARRAY
21110: PPUSH
21111: LD_VAR 0 2
21115: PUSH
21116: LD_VAR 0 1
21120: PUSH
21121: LD_INT 7
21123: MOD
21124: PUSH
21125: LD_INT 1
21127: PLUS
21128: ARRAY
21129: PUSH
21130: LD_INT 2
21132: ARRAY
21133: PPUSH
21134: CALL_OW 174
// end ;
21138: GO 21071
21140: POP
21141: POP
// Explode ;
21142: CALL 21170 0 0
// wait ( 0 0$45 ) ;
21146: LD_INT 1575
21148: PPUSH
21149: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
21153: LD_VAR 0 3
21157: PPUSH
21158: LD_EXP 38
21162: PPUSH
21163: CALL_OW 175
// end ;
21167: PPOPN 3
21169: END
// export function Explode ; var i , x , y , j ; begin
21170: LD_INT 0
21172: PPUSH
21173: PPUSH
21174: PPUSH
21175: PPUSH
21176: PPUSH
// if hasExplosionsInFactory then
21177: LD_EXP 7
21181: IFFALSE 21201
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
21183: LD_ADDR_EXP 29
21187: PUSH
21188: LD_EXP 29
21192: PPUSH
21193: LD_INT 61
21195: PPUSH
21196: CALL 64014 0 2
21200: ST_TO_ADDR
// if explosivePlantedList then
21201: LD_EXP 29
21205: IFFALSE 21353
// begin for i in explosivePlantedList do
21207: LD_ADDR_VAR 0 2
21211: PUSH
21212: LD_EXP 29
21216: PUSH
21217: FOR_IN
21218: IFFALSE 21321
// begin x := GetX ( i ) ;
21220: LD_ADDR_VAR 0 3
21224: PUSH
21225: LD_VAR 0 2
21229: PPUSH
21230: CALL_OW 250
21234: ST_TO_ADDR
// y := GetY ( i ) ;
21235: LD_ADDR_VAR 0 4
21239: PUSH
21240: LD_VAR 0 2
21244: PPUSH
21245: CALL_OW 251
21249: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
21250: LD_ADDR_VAR 0 5
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: LD_INT 5
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: LIST
21268: PUSH
21269: FOR_IN
21270: IFFALSE 21317
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
21272: LD_VAR 0 3
21276: PPUSH
21277: LD_VAR 0 5
21281: PPUSH
21282: LD_INT 2
21284: PPUSH
21285: CALL_OW 272
21289: PPUSH
21290: LD_VAR 0 4
21294: PPUSH
21295: LD_VAR 0 5
21299: PPUSH
21300: LD_INT 2
21302: PPUSH
21303: CALL_OW 273
21307: PPUSH
21308: LD_INT 1
21310: PPUSH
21311: CALL_OW 453
21315: GO 21269
21317: POP
21318: POP
// end ;
21319: GO 21217
21321: POP
21322: POP
// Say ( Heike , DH-End-2 ) ;
21323: LD_EXP 38
21327: PPUSH
21328: LD_STRING DH-End-2
21330: PPUSH
21331: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
21335: LD_INT 175
21337: PUSH
21338: LD_EXP 29
21342: PPUSH
21343: CALL 28667 0 1
21347: MUL
21348: PPUSH
21349: CALL_OW 67
// end ; if not isAlarm then
21353: LD_EXP 17
21357: NOT
21358: IFFALSE 21368
// isAlarm := true ;
21360: LD_ADDR_EXP 17
21364: PUSH
21365: LD_INT 1
21367: ST_TO_ADDR
// end ;
21368: LD_VAR 0 1
21372: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
21373: LD_INT 22
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 21
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 2
21395: PUSH
21396: LD_INT 101
21398: PUSH
21399: LD_INT 3
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 101
21408: PUSH
21409: LD_INT 6
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: PPUSH
21426: CALL_OW 69
21430: IFFALSE 21443
21432: GO 21434
21434: DISABLE
// isAlarm := true ; end_of_file
21435: LD_ADDR_EXP 17
21439: PUSH
21440: LD_INT 1
21442: ST_TO_ADDR
21443: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
21444: LD_EXP 14
21448: PPUSH
21449: LD_INT 22
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PPUSH
21459: CALL_OW 72
21463: PUSH
21464: LD_INT 3
21466: GREATER
21467: PUSH
21468: LD_EXP 17
21472: NOT
21473: AND
21474: IFFALSE 25326
21476: GO 21478
21478: DISABLE
21479: LD_INT 0
21481: PPUSH
21482: PPUSH
21483: PPUSH
21484: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
21485: LD_EXP 58
21489: PPUSH
21490: LD_INT 155
21492: PPUSH
21493: LD_INT 68
21495: PPUSH
21496: LD_INT 0
21498: PPUSH
21499: CALL_OW 48
// wait ( 0 0$1 ) ;
21503: LD_INT 35
21505: PPUSH
21506: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21510: LD_INT 35
21512: PPUSH
21513: CALL_OW 67
// if not HasTask ( ruDisturb ) then
21517: LD_EXP 58
21521: PPUSH
21522: CALL_OW 314
21526: NOT
21527: IFFALSE 21543
// ComMoveUnit ( ruDisturb , Heike ) ;
21529: LD_EXP 58
21533: PPUSH
21534: LD_EXP 38
21538: PPUSH
21539: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
21543: LD_EXP 38
21547: PPUSH
21548: LD_EXP 58
21552: PPUSH
21553: CALL_OW 296
21557: PUSH
21558: LD_INT 6
21560: LESS
21561: PUSH
21562: LD_EXP 58
21566: PPUSH
21567: CALL_OW 302
21571: AND
21572: IFFALSE 21510
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21574: LD_EXP 14
21578: PPUSH
21579: LD_INT 22
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 91
21591: PUSH
21592: LD_EXP 58
21596: PUSH
21597: LD_INT 8
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 2
21607: PUSH
21608: LD_INT 25
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 25
21620: PUSH
21621: LD_INT 11
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 25
21630: PUSH
21631: LD_INT 32
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 25
21640: PUSH
21641: LD_INT 34
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: LIST
21659: PPUSH
21660: CALL_OW 72
21664: IFFALSE 21674
// isAlarm := true ;
21666: LD_ADDR_EXP 17
21670: PUSH
21671: LD_INT 1
21673: ST_TO_ADDR
// if isAlarm then
21674: LD_EXP 17
21678: IFFALSE 21682
// exit ;
21680: GO 25326
// DialogueOn ;
21682: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
21686: LD_EXP 58
21690: PPUSH
21691: LD_STRING DMcn-Interrupt-1
21693: PPUSH
21694: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
21698: LD_EXP 58
21702: PPUSH
21703: LD_STRING DMcn-Interrupt-2
21705: PPUSH
21706: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
21710: LD_EXP 58
21714: PPUSH
21715: LD_STRING DMcn-Interrupt-3
21717: PPUSH
21718: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
21722: LD_EXP 38
21726: PPUSH
21727: LD_STRING DH-Interrupt-a-4
21729: PPUSH
21730: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
21734: LD_EXP 58
21738: PPUSH
21739: LD_STRING DMcn-Interrupt-a-5
21741: PPUSH
21742: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
21746: LD_EXP 38
21750: PPUSH
21751: LD_STRING DH-Interrupt-a-6
21753: PPUSH
21754: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
21758: LD_EXP 58
21762: PPUSH
21763: LD_STRING DMcn-Interrupt-a-7
21765: PPUSH
21766: CALL_OW 88
// DialogueOff ;
21770: CALL_OW 7
// hasMuchin := true ;
21774: LD_ADDR_EXP 30
21778: PUSH
21779: LD_INT 1
21781: ST_TO_ADDR
// Query ( MuchinInfo ) ;
21782: LD_STRING MuchinInfo
21784: PPUSH
21785: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
21789: LD_STRING M2a
21791: PPUSH
21792: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
21796: LD_INT 105
21798: PPUSH
21799: LD_INT 55
21801: PPUSH
21802: CALL_OW 428
21806: PPUSH
21807: LD_INT 2
21809: PPUSH
21810: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
21814: LD_INT 115
21816: PPUSH
21817: LD_INT 65
21819: PPUSH
21820: CALL_OW 428
21824: PPUSH
21825: LD_INT 2
21827: PPUSH
21828: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
21832: LD_INT 109
21834: PPUSH
21835: LD_INT 59
21837: PPUSH
21838: LD_INT 2
21840: PPUSH
21841: LD_INT 10
21843: NEG
21844: PPUSH
21845: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
21849: LD_INT 109
21851: PPUSH
21852: LD_INT 59
21854: PPUSH
21855: CALL_OW 84
// wait ( 0 0$2 ) ;
21859: LD_INT 70
21861: PPUSH
21862: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
21866: LD_INT 109
21868: PPUSH
21869: LD_INT 59
21871: PPUSH
21872: LD_INT 2
21874: PPUSH
21875: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
21879: LD_INT 35
21881: PPUSH
21882: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
21886: LD_EXP 58
21890: PPUSH
21891: LD_EXP 38
21895: PPUSH
21896: CALL_OW 296
21900: PUSH
21901: LD_INT 6
21903: GREATER
21904: IFFALSE 21920
// ComMoveUnit ( ruDisturb , Heike ) ;
21906: LD_EXP 58
21910: PPUSH
21911: LD_EXP 38
21915: PPUSH
21916: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21920: LD_EXP 14
21924: PPUSH
21925: LD_INT 22
21927: PUSH
21928: LD_INT 2
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 91
21937: PUSH
21938: LD_EXP 58
21942: PUSH
21943: LD_INT 8
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 2
21953: PUSH
21954: LD_INT 25
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 25
21966: PUSH
21967: LD_INT 11
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 25
21976: PUSH
21977: LD_INT 32
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 25
21986: PUSH
21987: LD_INT 34
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: PPUSH
22006: CALL_OW 72
22010: IFFALSE 22022
// begin isAlarm := true ;
22012: LD_ADDR_EXP 17
22016: PUSH
22017: LD_INT 1
22019: ST_TO_ADDR
// exit ;
22020: GO 25326
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
22022: LD_INT 105
22024: PPUSH
22025: LD_INT 55
22027: PPUSH
22028: CALL_OW 428
22032: NOT
22033: PUSH
22034: LD_INT 115
22036: PPUSH
22037: LD_INT 65
22039: PPUSH
22040: CALL_OW 428
22044: NOT
22045: OR
22046: IFFALSE 22058
// begin isAlarm := true ;
22048: LD_ADDR_EXP 17
22052: PUSH
22053: LD_INT 1
22055: ST_TO_ADDR
// exit ;
22056: GO 25326
// end ; until not BuildingsInProgress ( 2 ) ;
22058: LD_INT 2
22060: PPUSH
22061: CALL_OW 345
22065: NOT
22066: IFFALSE 21879
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
22068: LD_INT 105
22070: PPUSH
22071: LD_INT 55
22073: PPUSH
22074: CALL_OW 428
22078: PPUSH
22079: LD_INT 3
22081: PPUSH
22082: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
22086: LD_INT 115
22088: PPUSH
22089: LD_INT 65
22091: PPUSH
22092: CALL_OW 428
22096: PPUSH
22097: LD_INT 3
22099: PPUSH
22100: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
22104: LD_STRING M2a-out
22106: PPUSH
22107: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
22111: LD_EXP 58
22115: PPUSH
22116: LD_INT 2
22118: PPUSH
22119: CALL_OW 120
// wait ( 0 0$3 ) ;
22123: LD_INT 105
22125: PPUSH
22126: CALL_OW 67
// hasMuchin := false ;
22130: LD_ADDR_EXP 30
22134: PUSH
22135: LD_INT 0
22137: ST_TO_ADDR
// wait ( 2 2$00 ) ;
22138: LD_INT 4200
22140: PPUSH
22141: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22145: LD_INT 35
22147: PPUSH
22148: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22152: LD_EXP 58
22156: PPUSH
22157: CALL_OW 314
22161: NOT
22162: IFFALSE 22178
// ComMoveUnit ( ruDisturb , Heike ) ;
22164: LD_EXP 58
22168: PPUSH
22169: LD_EXP 38
22173: PPUSH
22174: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22178: LD_EXP 38
22182: PPUSH
22183: LD_EXP 58
22187: PPUSH
22188: CALL_OW 296
22192: PUSH
22193: LD_INT 6
22195: LESS
22196: PUSH
22197: LD_EXP 58
22201: PPUSH
22202: CALL_OW 302
22206: AND
22207: IFFALSE 22145
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22209: LD_EXP 14
22213: PPUSH
22214: LD_INT 22
22216: PUSH
22217: LD_INT 2
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 91
22226: PUSH
22227: LD_EXP 58
22231: PUSH
22232: LD_INT 8
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 25
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 25
22255: PUSH
22256: LD_INT 11
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 25
22265: PUSH
22266: LD_INT 32
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 25
22275: PUSH
22276: LD_INT 34
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: PPUSH
22295: CALL_OW 72
22299: IFFALSE 22309
// isAlarm := true ;
22301: LD_ADDR_EXP 17
22305: PUSH
22306: LD_INT 1
22308: ST_TO_ADDR
// if isAlarm then
22309: LD_EXP 17
22313: IFFALSE 22317
// exit ;
22315: GO 25326
// DialogueOn ;
22317: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
22321: LD_EXP 58
22325: PPUSH
22326: LD_STRING DMcn-Interrupt-1
22328: PPUSH
22329: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
22333: LD_EXP 58
22337: PPUSH
22338: LD_STRING DMcn-Interrupt-2
22340: PPUSH
22341: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
22345: LD_INT 176
22347: PPUSH
22348: LD_INT 54
22350: PPUSH
22351: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
22355: LD_INT 176
22357: PPUSH
22358: LD_INT 54
22360: PPUSH
22361: LD_INT 2
22363: PPUSH
22364: LD_INT 6
22366: NEG
22367: PPUSH
22368: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
22372: LD_INT 10
22374: PPUSH
22375: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
22379: LD_EXP 58
22383: PPUSH
22384: LD_STRING DMcn-Interrupt-b-3
22386: PPUSH
22387: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
22391: LD_EXP 38
22395: PPUSH
22396: LD_STRING DH-Interrupt-b-4
22398: PPUSH
22399: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
22403: LD_EXP 58
22407: PPUSH
22408: LD_STRING DMcn-Interrupt-b-5
22410: PPUSH
22411: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
22415: LD_EXP 38
22419: PPUSH
22420: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
22424: LD_INT 176
22426: PPUSH
22427: LD_INT 54
22429: PPUSH
22430: LD_INT 2
22432: PPUSH
22433: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
22437: LD_EXP 58
22441: PPUSH
22442: LD_STRING DMcn-Interrupt-b-6
22444: PPUSH
22445: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
22449: LD_EXP 38
22453: PPUSH
22454: LD_STRING DH-Interrupt-b-7
22456: PPUSH
22457: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
22461: LD_EXP 58
22465: PPUSH
22466: LD_STRING DMcn-Interrupt-b-8
22468: PPUSH
22469: CALL_OW 88
// DialogueOff ;
22473: CALL_OW 7
// Query ( MuchinInfo ) ;
22477: LD_STRING MuchinInfo
22479: PPUSH
22480: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
22484: LD_STRING M2b
22486: PPUSH
22487: CALL_OW 337
// hasMuchin := true ;
22491: LD_ADDR_EXP 30
22495: PUSH
22496: LD_INT 1
22498: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22499: LD_INT 35
22501: PPUSH
22502: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22506: LD_EXP 58
22510: PPUSH
22511: LD_EXP 38
22515: PPUSH
22516: CALL_OW 296
22520: PUSH
22521: LD_INT 6
22523: GREATER
22524: IFFALSE 22540
// ComMoveUnit ( ruDisturb , Heike ) ;
22526: LD_EXP 58
22530: PPUSH
22531: LD_EXP 38
22535: PPUSH
22536: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22540: LD_EXP 14
22544: PPUSH
22545: LD_INT 22
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 91
22557: PUSH
22558: LD_EXP 58
22562: PUSH
22563: LD_INT 8
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: LD_INT 25
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 25
22586: PUSH
22587: LD_INT 11
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 25
22596: PUSH
22597: LD_INT 32
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 25
22606: PUSH
22607: LD_INT 34
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 72
22630: IFFALSE 22642
// begin isAlarm := true ;
22632: LD_ADDR_EXP 17
22636: PUSH
22637: LD_INT 1
22639: ST_TO_ADDR
// exit ;
22640: GO 25326
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
22642: LD_EXP 38
22646: PPUSH
22647: LD_INT 61
22649: PPUSH
22650: CALL_OW 296
22654: PUSH
22655: LD_INT 4
22657: LESS
22658: IFFALSE 22499
// InGameOn ;
22660: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
22664: LD_INT 173
22666: PPUSH
22667: LD_INT 54
22669: PPUSH
22670: LD_INT 2
22672: PPUSH
22673: LD_INT 8
22675: NEG
22676: PPUSH
22677: CALL_OW 330
// SetSide ( Heike , 3 ) ;
22681: LD_EXP 38
22685: PPUSH
22686: LD_INT 3
22688: PPUSH
22689: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
22693: LD_EXP 38
22697: PPUSH
22698: LD_INT 61
22700: PPUSH
22701: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
22705: LD_EXP 58
22709: PPUSH
22710: LD_INT 61
22712: PPUSH
22713: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
22717: LD_EXP 45
22721: PUSH
22722: LD_EXP 14
22726: IN
22727: PUSH
22728: LD_EXP 45
22732: PPUSH
22733: LD_INT 61
22735: PPUSH
22736: CALL_OW 296
22740: PUSH
22741: LD_INT 12
22743: LESS
22744: AND
22745: IFFALSE 22789
// begin SetSide ( Markov , 3 ) ;
22747: LD_EXP 45
22751: PPUSH
22752: LD_INT 3
22754: PPUSH
22755: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
22759: LD_EXP 45
22763: PPUSH
22764: LD_INT 61
22766: PPUSH
22767: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
22771: LD_INT 35
22773: PPUSH
22774: CALL_OW 67
// until IsInUnit ( Markov ) ;
22778: LD_EXP 45
22782: PPUSH
22783: CALL_OW 310
22787: IFFALSE 22771
// end ; repeat wait ( 0 0$1 ) ;
22789: LD_INT 35
22791: PPUSH
22792: CALL_OW 67
// until IsInUnit ( Heike ) ;
22796: LD_EXP 38
22800: PPUSH
22801: CALL_OW 310
22805: IFFALSE 22789
// SetClass ( Heike , class_mechanic ) ;
22807: LD_EXP 38
22811: PPUSH
22812: LD_INT 3
22814: PPUSH
22815: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
22819: LD_INT 61
22821: PPUSH
22822: LD_INT 21
22824: PPUSH
22825: LD_INT 3
22827: PPUSH
22828: LD_INT 3
22830: PPUSH
22831: LD_INT 43
22833: PPUSH
22834: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
22838: LD_EXP 31
22842: PUSH
22843: LD_EXP 45
22847: PUSH
22848: LD_EXP 14
22852: IN
22853: PUSH
22854: LD_EXP 45
22858: PPUSH
22859: CALL_OW 310
22863: PUSH
22864: LD_INT 61
22866: EQUAL
22867: OR
22868: AND
22869: IFFALSE 23337
// begin wait ( 0 0$5 ) ;
22871: LD_INT 175
22873: PPUSH
22874: CALL_OW 67
// SetSide ( Heike , 2 ) ;
22878: LD_EXP 38
22882: PPUSH
22883: LD_INT 2
22885: PPUSH
22886: CALL_OW 235
// SetSide ( Markov , 2 ) ;
22890: LD_EXP 45
22894: PPUSH
22895: LD_INT 2
22897: PPUSH
22898: CALL_OW 235
// if not Markov in heikeSquad then
22902: LD_EXP 45
22906: PUSH
22907: LD_EXP 14
22911: IN
22912: NOT
22913: IFFALSE 22935
// heikeSquad := Join ( heikeSquad , Markov ) ;
22915: LD_ADDR_EXP 14
22919: PUSH
22920: LD_EXP 14
22924: PPUSH
22925: LD_EXP 45
22929: PPUSH
22930: CALL 64014 0 2
22934: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
22935: LD_EXP 45
22939: PPUSH
22940: LD_STRING DMar-Factory-1
22942: PPUSH
22943: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
22947: LD_INT 61
22949: PPUSH
22950: LD_INT 99
22952: PPUSH
22953: CALL_OW 329
// game_speed := 4 ;
22957: LD_ADDR_OWVAR 65
22961: PUSH
22962: LD_INT 4
22964: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
22965: LD_EXP 58
22969: PPUSH
22970: CALL_OW 122
// ComExitBuilding ( Markov ) ;
22974: LD_EXP 45
22978: PPUSH
22979: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
22983: LD_EXP 58
22987: PPUSH
22988: LD_INT 171
22990: PPUSH
22991: LD_INT 51
22993: PPUSH
22994: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
22998: LD_EXP 45
23002: PPUSH
23003: LD_INT 167
23005: PPUSH
23006: LD_INT 50
23008: PPUSH
23009: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
23013: LD_EXP 45
23017: PPUSH
23018: LD_EXP 58
23022: PPUSH
23023: CALL_OW 179
// wait ( 0 0$5 ) ;
23027: LD_INT 175
23029: PPUSH
23030: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
23034: LD_EXP 45
23038: PPUSH
23039: LD_STRING DMar-Factory-2
23041: PPUSH
23042: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
23046: LD_ADDR_VAR 0 2
23050: PUSH
23051: LD_INT 22
23053: PUSH
23054: LD_INT 3
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 33
23063: PUSH
23064: LD_INT 3
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PPUSH
23075: CALL_OW 69
23079: PUSH
23080: LD_INT 1
23082: ARRAY
23083: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
23084: LD_EXP 58
23088: PPUSH
23089: LD_VAR 0 2
23093: PPUSH
23094: CALL_OW 119
// async ;
23098: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
23099: LD_EXP 58
23103: PPUSH
23104: LD_STRING DMcn-Factory-3
23106: PPUSH
23107: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
23111: LD_VAR 0 2
23115: PPUSH
23116: LD_EXP 58
23120: PPUSH
23121: CALL_OW 115
// sync ;
23125: SYNC
// wait ( 0 0$1 ) ;
23126: LD_INT 35
23128: PPUSH
23129: CALL_OW 67
// KillUnit ( ruDisturb ) ;
23133: LD_EXP 58
23137: PPUSH
23138: CALL_OW 66
// SetSide ( veh , 7 ) ;
23142: LD_VAR 0 2
23146: PPUSH
23147: LD_INT 7
23149: PPUSH
23150: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
23154: LD_VAR 0 2
23158: PPUSH
23159: LD_INT 84
23161: PPUSH
23162: LD_INT 38
23164: PPUSH
23165: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
23169: LD_EXP 59
23173: PUSH
23174: LD_INT 1
23176: ARRAY
23177: PPUSH
23178: CALL_OW 258
23182: PUSH
23183: LD_INT 1
23185: EQUAL
23186: IFFALSE 23206
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
23188: LD_EXP 59
23192: PUSH
23193: LD_INT 1
23195: ARRAY
23196: PPUSH
23197: LD_STRING DRum-Factory-4
23199: PPUSH
23200: CALL_OW 88
23204: GO 23222
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
23206: LD_EXP 59
23210: PUSH
23211: LD_INT 1
23213: ARRAY
23214: PPUSH
23215: LD_STRING DRuf-Factory-4
23217: PPUSH
23218: CALL_OW 88
// wait ( 0 0$1 ) ;
23222: LD_INT 35
23224: PPUSH
23225: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
23229: LD_EXP 59
23233: PPUSH
23234: LD_INT 26
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PPUSH
23244: CALL_OW 72
23248: PUSH
23249: LD_INT 1
23251: ARRAY
23252: PPUSH
23253: LD_STRING DRum-Factory-6
23255: PPUSH
23256: CALL_OW 88
// wait ( 0 0$2 ) ;
23260: LD_INT 70
23262: PPUSH
23263: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
23267: LD_EXP 38
23271: PPUSH
23272: LD_INT 33
23274: PPUSH
23275: CALL_OW 336
// ComExitBuilding ( Heike ) ;
23279: LD_EXP 38
23283: PPUSH
23284: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23288: LD_EXP 38
23292: PPUSH
23293: LD_INT 168
23295: PPUSH
23296: LD_INT 54
23298: PPUSH
23299: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23303: LD_INT 173
23305: PPUSH
23306: LD_INT 54
23308: PPUSH
23309: LD_INT 2
23311: PPUSH
23312: CALL_OW 331
// InGameOff ;
23316: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
23320: LD_STRING M2b-out
23322: PPUSH
23323: CALL_OW 337
// hasMuchin := false ;
23327: LD_ADDR_EXP 30
23331: PUSH
23332: LD_INT 0
23334: ST_TO_ADDR
// exit ;
23335: GO 25326
// end ; wait ( 0 0$5 ) ;
23337: LD_INT 175
23339: PPUSH
23340: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
23344: LD_INT 61
23346: PPUSH
23347: LD_INT 99
23349: PPUSH
23350: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
23354: LD_EXP 45
23358: PUSH
23359: LD_EXP 14
23363: IN
23364: PUSH
23365: LD_EXP 45
23369: PPUSH
23370: CALL_OW 255
23374: PUSH
23375: LD_INT 3
23377: EQUAL
23378: AND
23379: IFFALSE 23402
// begin SetSide ( Markov , 2 ) ;
23381: LD_EXP 45
23385: PPUSH
23386: LD_INT 2
23388: PPUSH
23389: CALL_OW 235
// ComExitBuilding ( Markov ) ;
23393: LD_EXP 45
23397: PPUSH
23398: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
23402: LD_EXP 38
23406: PPUSH
23407: LD_INT 2
23409: PPUSH
23410: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
23414: LD_EXP 38
23418: PPUSH
23419: LD_INT 33
23421: PPUSH
23422: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
23426: LD_EXP 58
23430: PPUSH
23431: CALL_OW 122
// ComExitBuilding ( Heike ) ;
23435: LD_EXP 38
23439: PPUSH
23440: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23444: LD_EXP 38
23448: PPUSH
23449: LD_INT 168
23451: PPUSH
23452: LD_INT 54
23454: PPUSH
23455: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23459: LD_INT 173
23461: PPUSH
23462: LD_INT 54
23464: PPUSH
23465: LD_INT 2
23467: PPUSH
23468: CALL_OW 331
// InGameOff ;
23472: CALL_OW 9
// wait ( 3 ) ;
23476: LD_INT 3
23478: PPUSH
23479: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
23483: LD_EXP 58
23487: PPUSH
23488: LD_INT 2
23490: PPUSH
23491: CALL_OW 120
// wait ( 0 0$3 ) ;
23495: LD_INT 105
23497: PPUSH
23498: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
23502: LD_STRING M2b-out
23504: PPUSH
23505: CALL_OW 337
// hasMuchin := false ;
23509: LD_ADDR_EXP 30
23513: PUSH
23514: LD_INT 0
23516: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23517: LD_INT 4200
23519: PPUSH
23520: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23524: LD_INT 35
23526: PPUSH
23527: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23531: LD_EXP 58
23535: PPUSH
23536: CALL_OW 314
23540: NOT
23541: IFFALSE 23557
// ComMoveUnit ( ruDisturb , Heike ) ;
23543: LD_EXP 58
23547: PPUSH
23548: LD_EXP 38
23552: PPUSH
23553: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
23557: LD_EXP 38
23561: PPUSH
23562: LD_EXP 58
23566: PPUSH
23567: CALL_OW 296
23571: PUSH
23572: LD_INT 2
23574: LESS
23575: PUSH
23576: LD_EXP 58
23580: PPUSH
23581: CALL_OW 302
23585: AND
23586: IFFALSE 23524
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23588: LD_EXP 14
23592: PPUSH
23593: LD_INT 22
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 91
23605: PUSH
23606: LD_EXP 58
23610: PUSH
23611: LD_INT 8
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: LD_INT 25
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 25
23634: PUSH
23635: LD_INT 11
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 25
23644: PUSH
23645: LD_INT 32
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 25
23654: PUSH
23655: LD_INT 34
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: PPUSH
23674: CALL_OW 72
23678: IFFALSE 23688
// isAlarm := true ;
23680: LD_ADDR_EXP 17
23684: PUSH
23685: LD_INT 1
23687: ST_TO_ADDR
// if isAlarm then
23688: LD_EXP 17
23692: IFFALSE 23696
// exit ;
23694: GO 25326
// ComTurnUnit ( Heike , ruDisturb ) ;
23696: LD_EXP 38
23700: PPUSH
23701: LD_EXP 58
23705: PPUSH
23706: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
23710: LD_EXP 58
23714: PPUSH
23715: LD_EXP 38
23719: PPUSH
23720: CALL_OW 119
// wait ( 3 ) ;
23724: LD_INT 3
23726: PPUSH
23727: CALL_OW 67
// for i := 1 to 3 do
23731: LD_ADDR_VAR 0 1
23735: PUSH
23736: DOUBLE
23737: LD_INT 1
23739: DEC
23740: ST_TO_ADDR
23741: LD_INT 3
23743: PUSH
23744: FOR_TO
23745: IFFALSE 23762
// CreateCratesArea ( 5 , cratesArea , false ) ;
23747: LD_INT 5
23749: PPUSH
23750: LD_INT 58
23752: PPUSH
23753: LD_INT 0
23755: PPUSH
23756: CALL_OW 55
23760: GO 23744
23762: POP
23763: POP
// uc_side := 3 ;
23764: LD_ADDR_OWVAR 20
23768: PUSH
23769: LD_INT 3
23771: ST_TO_ADDR
// uc_nation := nation_russian ;
23772: LD_ADDR_OWVAR 21
23776: PUSH
23777: LD_INT 3
23779: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
23780: LD_INT 21
23782: PPUSH
23783: LD_INT 3
23785: PPUSH
23786: LD_INT 1
23788: PPUSH
23789: LD_INT 51
23791: PPUSH
23792: LD_INT 100
23794: PPUSH
23795: CALL 31580 0 5
// veh := CreateVehicle ;
23799: LD_ADDR_VAR 0 2
23803: PUSH
23804: CALL_OW 45
23808: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
23809: LD_VAR 0 2
23813: PPUSH
23814: LD_INT 104
23816: PPUSH
23817: LD_INT 41
23819: PPUSH
23820: LD_INT 3
23822: PPUSH
23823: LD_INT 0
23825: PPUSH
23826: CALL 66154 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
23830: LD_VAR 0 2
23834: PPUSH
23835: LD_INT 1
23837: PPUSH
23838: LD_INT 100
23840: PPUSH
23841: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
23845: CALL_OW 44
23849: PPUSH
23850: LD_VAR 0 2
23854: PPUSH
23855: CALL_OW 52
// DialogueOn ;
23859: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23863: LD_EXP 58
23867: PPUSH
23868: LD_STRING DMcn-Interrupt-1
23870: PPUSH
23871: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23875: LD_EXP 58
23879: PPUSH
23880: LD_STRING DMcn-Interrupt-2
23882: PPUSH
23883: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
23887: LD_EXP 58
23891: PPUSH
23892: LD_STRING DMcn-Interrupt-c-3
23894: PPUSH
23895: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
23899: LD_INT 101
23901: PPUSH
23902: LD_INT 38
23904: PPUSH
23905: LD_INT 2
23907: PPUSH
23908: LD_INT 10
23910: NEG
23911: PPUSH
23912: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
23916: LD_INT 101
23918: PPUSH
23919: LD_INT 38
23921: PPUSH
23922: CALL_OW 84
// wait ( 0 0$2 ) ;
23926: LD_INT 70
23928: PPUSH
23929: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
23933: LD_INT 101
23935: PPUSH
23936: LD_INT 38
23938: PPUSH
23939: LD_INT 2
23941: PPUSH
23942: CALL_OW 331
// RemoveUnit ( veh ) ;
23946: LD_VAR 0 2
23950: PPUSH
23951: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
23955: LD_EXP 58
23959: PPUSH
23960: LD_STRING DMcn-Interrupt-c-4
23962: PPUSH
23963: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
23967: LD_EXP 38
23971: PPUSH
23972: LD_STRING DH-Interrupt-c-5
23974: PPUSH
23975: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
23979: LD_EXP 58
23983: PPUSH
23984: LD_STRING DMcn-Interrupt-c-6
23986: PPUSH
23987: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
23991: LD_EXP 38
23995: PPUSH
23996: LD_STRING DH-Interrupt-c-7
23998: PPUSH
23999: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
24003: LD_EXP 58
24007: PPUSH
24008: LD_STRING DMcn-Interrupt-c-8
24010: PPUSH
24011: CALL_OW 88
// DialogueOff ;
24015: CALL_OW 7
// hasMuchin := true ;
24019: LD_ADDR_EXP 30
24023: PUSH
24024: LD_INT 1
24026: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24027: LD_STRING MuchinInfo
24029: PPUSH
24030: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
24034: LD_STRING M2c
24036: PPUSH
24037: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
24041: LD_INT 35
24043: PPUSH
24044: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24048: LD_EXP 58
24052: PPUSH
24053: LD_EXP 38
24057: PPUSH
24058: CALL_OW 296
24062: PUSH
24063: LD_INT 6
24065: GREATER
24066: IFFALSE 24082
// ComMoveUnit ( ruDisturb , Heike ) ;
24068: LD_EXP 58
24072: PPUSH
24073: LD_EXP 38
24077: PPUSH
24078: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24082: LD_EXP 14
24086: PPUSH
24087: LD_INT 22
24089: PUSH
24090: LD_INT 2
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 91
24099: PUSH
24100: LD_EXP 58
24104: PUSH
24105: LD_INT 8
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 25
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 25
24128: PUSH
24129: LD_INT 11
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 25
24138: PUSH
24139: LD_INT 32
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 25
24148: PUSH
24149: LD_INT 34
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: LIST
24167: PPUSH
24168: CALL_OW 72
24172: IFFALSE 24184
// begin isAlarm := true ;
24174: LD_ADDR_EXP 17
24178: PUSH
24179: LD_INT 1
24181: ST_TO_ADDR
// exit ;
24182: GO 25326
// end ; until UnitFilter ( heikeSquad , [ f_dist , ruOutpost0 , 6 ] ) and GetDistUnits ( Heike , ruOutpost0 ) < 6 ;
24184: LD_EXP 14
24188: PPUSH
24189: LD_INT 91
24191: PUSH
24192: LD_INT 6
24194: PUSH
24195: LD_INT 6
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: LIST
24202: PPUSH
24203: CALL_OW 72
24207: PUSH
24208: LD_EXP 38
24212: PPUSH
24213: LD_INT 6
24215: PPUSH
24216: CALL_OW 296
24220: PUSH
24221: LD_INT 6
24223: LESS
24224: AND
24225: IFFALSE 24041
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
24227: LD_ADDR_VAR 0 3
24231: PUSH
24232: LD_EXP 14
24236: PUSH
24237: LD_EXP 38
24241: UNION
24242: PPUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 33
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 91
24255: PUSH
24256: LD_INT 6
24258: PUSH
24259: LD_INT 12
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PPUSH
24271: CALL_OW 72
24275: ST_TO_ADDR
// for i in tmp do
24276: LD_ADDR_VAR 0 1
24280: PUSH
24281: LD_VAR 0 3
24285: PUSH
24286: FOR_IN
24287: IFFALSE 24318
// begin SetSide ( i , 3 ) ;
24289: LD_VAR 0 1
24293: PPUSH
24294: LD_INT 3
24296: PPUSH
24297: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_INT 101
24308: PPUSH
24309: LD_INT 38
24311: PPUSH
24312: CALL_OW 111
// end ;
24316: GO 24286
24318: POP
24319: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
24320: LD_EXP 58
24324: PPUSH
24325: LD_INT 104
24327: PPUSH
24328: LD_INT 37
24330: PPUSH
24331: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
24335: LD_EXP 58
24339: PPUSH
24340: LD_EXP 38
24344: PPUSH
24345: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
24349: LD_INT 35
24351: PPUSH
24352: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_INT 58
24363: PPUSH
24364: CALL_OW 435
24368: ST_TO_ADDR
// for i in tmp do
24369: LD_ADDR_VAR 0 1
24373: PUSH
24374: LD_VAR 0 3
24378: PUSH
24379: FOR_IN
24380: IFFALSE 24423
// if not HasTask ( i ) then
24382: LD_VAR 0 1
24386: PPUSH
24387: CALL_OW 314
24391: NOT
24392: IFFALSE 24421
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
24394: LD_VAR 0 1
24398: PPUSH
24399: LD_VAR 0 4
24403: PUSH
24404: LD_INT 1
24406: ARRAY
24407: PPUSH
24408: LD_VAR 0 4
24412: PUSH
24413: LD_INT 2
24415: ARRAY
24416: PPUSH
24417: CALL_OW 117
24421: GO 24379
24423: POP
24424: POP
// until not cr ;
24425: LD_VAR 0 4
24429: NOT
24430: IFFALSE 24349
// wait ( 0 0$2 ) ;
24432: LD_INT 70
24434: PPUSH
24435: CALL_OW 67
// for i in tmp do
24439: LD_ADDR_VAR 0 1
24443: PUSH
24444: LD_VAR 0 3
24448: PUSH
24449: FOR_IN
24450: IFFALSE 24466
// SetSide ( i , 2 ) ;
24452: LD_VAR 0 1
24456: PPUSH
24457: LD_INT 2
24459: PPUSH
24460: CALL_OW 235
24464: GO 24449
24466: POP
24467: POP
// if Kaia in tmp then
24468: LD_EXP 43
24472: PUSH
24473: LD_VAR 0 3
24477: IN
24478: IFFALSE 24748
// begin InGameOn ;
24480: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
24484: LD_EXP 43
24488: PPUSH
24489: LD_EXP 58
24493: PPUSH
24494: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
24498: LD_EXP 58
24502: PPUSH
24503: LD_EXP 43
24507: PPUSH
24508: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
24512: LD_EXP 43
24516: PPUSH
24517: LD_EXP 58
24521: PPUSH
24522: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
24526: LD_EXP 43
24530: PPUSH
24531: LD_STRING DK-Assassin-1
24533: PPUSH
24534: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
24538: LD_EXP 58
24542: PPUSH
24543: LD_STRING DMcn-Assassin-2
24545: PPUSH
24546: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
24550: LD_EXP 43
24554: PPUSH
24555: LD_STRING DK-Assassin-3
24557: PPUSH
24558: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
24562: LD_EXP 58
24566: PPUSH
24567: LD_STRING DMcn-Assassin-4
24569: PPUSH
24570: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
24574: LD_EXP 43
24578: PPUSH
24579: LD_STRING DK-Assassin-5
24581: PPUSH
24582: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
24586: LD_EXP 58
24590: PPUSH
24591: LD_STRING DMcn-Assassin-6
24593: PPUSH
24594: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
24598: LD_EXP 43
24602: PUSH
24603: LD_EXP 58
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PPUSH
24612: LD_INT 6
24614: PPUSH
24615: CALL_OW 120
// wait ( 0 0$5 ) ;
24619: LD_INT 175
24621: PPUSH
24622: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
24626: LD_EXP 43
24630: PPUSH
24631: LD_STRING DK-Assassin-7
24633: PPUSH
24634: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
24638: LD_EXP 58
24642: PPUSH
24643: LD_STRING DMcn-Assassin-8
24645: PPUSH
24646: CALL_OW 88
// wait ( 0 0$0.3 ) ;
24650: LD_INT 10
24652: PPUSH
24653: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
24657: LD_EXP 43
24661: PPUSH
24662: LD_STRING DK-Assassin-9
24664: PPUSH
24665: CALL_OW 88
// wait ( 0 0$2 ) ;
24669: LD_INT 70
24671: PPUSH
24672: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
24676: LD_EXP 43
24680: PPUSH
24681: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
24685: LD_EXP 58
24689: PPUSH
24690: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
24694: LD_EXP 43
24698: PPUSH
24699: LD_EXP 38
24703: PPUSH
24704: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
24708: LD_EXP 43
24712: PPUSH
24713: LD_STRING DK-Assasin-10
24715: PPUSH
24716: CALL_OW 88
// InGameOff ;
24720: CALL_OW 9
// ChangeMissionObjectives ( M2c-out ) ;
24724: LD_STRING M2c-out
24726: PPUSH
24727: CALL_OW 337
// wait ( 0 0$3 ) ;
24731: LD_INT 105
24733: PPUSH
24734: CALL_OW 67
// hasMuchin := false ;
24738: LD_ADDR_EXP 30
24742: PUSH
24743: LD_INT 0
24745: ST_TO_ADDR
// exit ;
24746: GO 25326
// end ; ChangeMissionObjectives ( M2c-out ) ;
24748: LD_STRING M2c-out
24750: PPUSH
24751: CALL_OW 337
// InGameOn ;
24755: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
24759: LD_EXP 58
24763: PPUSH
24764: LD_STRING DMcn-Fail-1
24766: PPUSH
24767: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
24771: LD_VAR 0 3
24775: PPUSH
24776: LD_INT 114
24778: PPUSH
24779: LD_INT 17
24781: PPUSH
24782: CALL_OW 111
// wait ( 0 0$1 ) ;
24786: LD_INT 35
24788: PPUSH
24789: CALL_OW 67
// async ;
24793: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
24794: LD_EXP 58
24798: PPUSH
24799: LD_EXP 38
24803: PPUSH
24804: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
24808: LD_EXP 58
24812: PPUSH
24813: LD_STRING DMcn-Fail-2
24815: PPUSH
24816: CALL_OW 88
// ComStop ( Heike ) ;
24820: LD_EXP 38
24824: PPUSH
24825: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
24829: LD_EXP 38
24833: PPUSH
24834: LD_EXP 58
24838: PPUSH
24839: CALL_OW 179
// sync ;
24843: SYNC
// Say ( Heike , DH-Fail-3 ) ;
24844: LD_EXP 38
24848: PPUSH
24849: LD_STRING DH-Fail-3
24851: PPUSH
24852: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
24856: LD_EXP 58
24860: PPUSH
24861: LD_STRING DMcn-Fail-4
24863: PPUSH
24864: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
24868: LD_EXP 38
24872: PUSH
24873: LD_EXP 58
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PPUSH
24882: LD_INT 41
24884: PPUSH
24885: LD_INT 19
24887: PPUSH
24888: CALL_OW 111
// wait ( 0 0$2 ) ;
24892: LD_INT 70
24894: PPUSH
24895: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
24899: LD_EXP 58
24903: PPUSH
24904: LD_INT 40
24906: PPUSH
24907: LD_INT 19
24909: PPUSH
24910: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
24914: LD_EXP 38
24918: PPUSH
24919: LD_INT 43
24921: PPUSH
24922: LD_INT 21
24924: PPUSH
24925: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
24929: LD_EXP 58
24933: PPUSH
24934: LD_EXP 38
24938: PPUSH
24939: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
24943: LD_EXP 38
24947: PPUSH
24948: LD_EXP 58
24952: PPUSH
24953: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
24957: LD_INT 3
24959: PPUSH
24960: CALL_OW 427
// wait ( 0 0$2 ) ;
24964: LD_INT 70
24966: PPUSH
24967: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
24971: LD_EXP 58
24975: PPUSH
24976: LD_STRING DMcn-Fail-5
24978: PPUSH
24979: CALL_OW 88
// wait ( 0 0$2 ) ;
24983: LD_INT 70
24985: PPUSH
24986: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
24990: LD_EXP 58
24994: PPUSH
24995: LD_STRING DMcn-Fail-6
24997: PPUSH
24998: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
25002: LD_INT 35
25004: PPUSH
25005: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
25009: LD_EXP 38
25013: PPUSH
25014: LD_INT 43
25016: PPUSH
25017: LD_INT 21
25019: PPUSH
25020: CALL_OW 307
25024: IFFALSE 25002
// case Query ( MuchinQuestion ) of 1 :
25026: LD_STRING MuchinQuestion
25028: PPUSH
25029: CALL_OW 97
25033: PUSH
25034: LD_INT 1
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25142
25042: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
25043: LD_EXP 58
25047: PPUSH
25048: LD_STRING DMcn-Fail-7
25050: PPUSH
25051: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
25055: LD_EXP 38
25059: PPUSH
25060: LD_STRING DH-Fail-8
25062: PPUSH
25063: CALL_OW 88
// wait ( 0 0$0.3 ) ;
25067: LD_INT 10
25069: PPUSH
25070: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
25074: LD_EXP 38
25078: PPUSH
25079: LD_STRING DH-Fail-9
25081: PPUSH
25082: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
25086: LD_EXP 38
25090: PPUSH
25091: LD_STRING DH-Fail-10
25093: PPUSH
25094: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
25098: LD_EXP 58
25102: PPUSH
25103: LD_STRING DMcn-Fail-11
25105: PPUSH
25106: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
25110: LD_EXP 58
25114: PPUSH
25115: LD_EXP 38
25119: PPUSH
25120: CALL_OW 115
// wait ( 0 0$2 ) ;
25124: LD_INT 70
25126: PPUSH
25127: CALL_OW 67
// KillUnit ( Heike ) ;
25131: LD_EXP 38
25135: PPUSH
25136: CALL_OW 66
// end ; 2 :
25140: GO 25322
25142: LD_INT 2
25144: DOUBLE
25145: EQUAL
25146: IFTRUE 25150
25148: GO 25321
25150: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
25151: LD_EXP 38
25155: PPUSH
25156: LD_STRING DH-Fail-a-8
25158: PPUSH
25159: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
25163: LD_EXP 38
25167: PPUSH
25168: LD_STRING DH-Fail-a-9
25170: PPUSH
25171: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
25175: LD_EXP 58
25179: PPUSH
25180: LD_STRING DH-Fail-10
25182: PPUSH
25183: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
25187: LD_EXP 38
25191: PPUSH
25192: LD_STRING DH-Fail-a-11
25194: PPUSH
25195: CALL_OW 88
// async ;
25199: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
25200: LD_EXP 58
25204: PPUSH
25205: LD_EXP 38
25209: PPUSH
25210: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
25214: LD_EXP 58
25218: PPUSH
25219: LD_EXP 38
25223: PPUSH
25224: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
25228: LD_EXP 58
25232: PPUSH
25233: LD_STRING DH-Fail-12
25235: PPUSH
25236: CALL_OW 88
// sync ;
25240: SYNC
// wait ( 0 0$1 ) ;
25241: LD_INT 35
25243: PPUSH
25244: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
25248: LD_EXP 38
25252: PPUSH
25253: LD_STRING DH-Fail-a-13
25255: PPUSH
25256: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
25260: LD_EXP 58
25264: PPUSH
25265: LD_INT 100
25267: PPUSH
25268: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
25272: LD_EXP 58
25276: PPUSH
25277: LD_STRING DMcn-Fail-a-14
25279: PPUSH
25280: CALL_OW 91
// KillUnit ( ruDisturb ) ;
25284: LD_EXP 58
25288: PPUSH
25289: CALL_OW 66
// wait ( 0 0$1 ) ;
25293: LD_INT 35
25295: PPUSH
25296: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
25300: LD_EXP 38
25304: PPUSH
25305: LD_STRING DH-Fail-a-15
25307: PPUSH
25308: CALL_OW 88
// YouLost ( FailMuchin ) ;
25312: LD_STRING FailMuchin
25314: PPUSH
25315: CALL_OW 104
// end ; end ;
25319: GO 25322
25321: POP
// InGameOff ;
25322: CALL_OW 9
// end ; end_of_file
25326: PPOPN 4
25328: END
// every 0 0$1 marked gameStartEvent do
25329: GO 25331
25331: DISABLE
// begin enable ;
25332: ENABLE
// if not contactWithAmerican then
25333: LD_EXP 25
25337: NOT
25338: IFFALSE 25383
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
25340: LD_ADDR_OWVAR 47
25344: PUSH
25345: LD_STRING #X108-1
25347: PUSH
25348: LD_INT 22
25350: PUSH
25351: LD_INT 5
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PPUSH
25372: CALL_OW 69
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: ST_TO_ADDR
25381: GO 25463
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , #X108-2 , UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ] ;
25383: LD_ADDR_OWVAR 47
25387: PUSH
25388: LD_STRING #X108-1
25390: PUSH
25391: LD_INT 22
25393: PUSH
25394: LD_INT 5
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 21
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PPUSH
25415: CALL_OW 69
25419: PUSH
25420: LD_STRING #X108-2
25422: PUSH
25423: LD_EXP 50
25427: PPUSH
25428: LD_INT 22
25430: PUSH
25431: LD_INT 4
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 21
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PPUSH
25452: CALL_OW 72
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: ST_TO_ADDR
// end ; end_of_file
25463: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
25464: LD_EXP 38
25468: PPUSH
25469: LD_INT 59
25471: PPUSH
25472: CALL_OW 308
25476: IFFALSE 25598
25478: GO 25480
25480: DISABLE
// begin Query ( FinalInfo ) ;
25481: LD_STRING FinalInfo
25483: PPUSH
25484: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
25488: LD_INT 59
25490: PPUSH
25491: LD_INT 1
25493: PPUSH
25494: CALL_OW 424
// end_the_mission_allowed := true ;
25498: LD_ADDR_OWVAR 57
25502: PUSH
25503: LD_INT 1
25505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25506: LD_INT 35
25508: PPUSH
25509: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
25513: LD_INT 22
25515: PUSH
25516: LD_INT 2
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 21
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 95
25535: PUSH
25536: LD_INT 59
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: PPUSH
25548: CALL_OW 69
25552: PPUSH
25553: CALL 28667 0 1
25557: PUSH
25558: LD_INT 22
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 21
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PPUSH
25582: CALL_OW 69
25586: PPUSH
25587: CALL 28667 0 1
25591: EQUAL
25592: IFFALSE 25506
// EndMission ;
25594: CALL 25606 0 0
// end ;
25598: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
25599: CALL 25606 0 0
// end ;
25603: PPOPN 1
25605: END
// function EndMission ; begin
25606: LD_INT 0
25608: PPUSH
// if not IsInArea ( Heike , finalArea ) then
25609: LD_EXP 38
25613: PPUSH
25614: LD_INT 59
25616: PPUSH
25617: CALL_OW 308
25621: NOT
25622: IFFALSE 25633
// begin Query ( HeikeOutOfArea ) ;
25624: LD_STRING HeikeOutOfArea
25626: PPUSH
25627: CALL_OW 97
// exit ;
25631: GO 26374
// end ; if not IsOk ( Heike ) then
25633: LD_EXP 38
25637: PPUSH
25638: CALL_OW 302
25642: NOT
25643: IFFALSE 25654
// begin Query ( HeikeIsHurt ) ;
25645: LD_STRING HeikeIsHurt
25647: PPUSH
25648: CALL_OW 97
// exit ;
25652: GO 26374
// end ; if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
25654: LD_INT 22
25656: PUSH
25657: LD_INT 5
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 21
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PPUSH
25678: CALL_OW 69
25682: PUSH
25683: LD_INT 0
25685: EQUAL
25686: PUSH
25687: LD_EXP 32
25691: PUSH
25692: LD_INT 0
25694: EQUAL
25695: AND
25696: IFFALSE 25710
// AddMedal ( med1 , 1 ) else
25698: LD_STRING med1
25700: PPUSH
25701: LD_INT 1
25703: PPUSH
25704: CALL_OW 101
25708: GO 25721
// AddMedal ( med1 , - 1 ) ;
25710: LD_STRING med1
25712: PPUSH
25713: LD_INT 1
25715: NEG
25716: PPUSH
25717: CALL_OW 101
// if explosivePlantedList >= 3 then
25721: LD_EXP 29
25725: PUSH
25726: LD_INT 3
25728: GREATEREQUAL
25729: IFFALSE 25743
// AddMedal ( med2 , 1 ) else
25731: LD_STRING med2
25733: PPUSH
25734: LD_INT 1
25736: PPUSH
25737: CALL_OW 101
25741: GO 25777
// if explosivePlantedList < 3 then
25743: LD_EXP 29
25747: PUSH
25748: LD_INT 3
25750: LESS
25751: IFFALSE 25766
// AddMedal ( med2 , - 2 ) else
25753: LD_STRING med2
25755: PPUSH
25756: LD_INT 2
25758: NEG
25759: PPUSH
25760: CALL_OW 101
25764: GO 25777
// AddMedal ( med2 , - 1 ) ;
25766: LD_STRING med2
25768: PPUSH
25769: LD_INT 1
25771: NEG
25772: PPUSH
25773: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
25777: LD_INT 5
25779: PPUSH
25780: LD_INT 2
25782: PPUSH
25783: CALL_OW 321
25787: PUSH
25788: LD_INT 2
25790: EQUAL
25791: IFFALSE 25805
// AddMedal ( med3 , 1 ) else
25793: LD_STRING med3
25795: PPUSH
25796: LD_INT 1
25798: PPUSH
25799: CALL_OW 101
25803: GO 25816
// AddMedal ( med3 , - 1 ) ;
25805: LD_STRING med3
25807: PPUSH
25808: LD_INT 1
25810: NEG
25811: PPUSH
25812: CALL_OW 101
// GiveMedals ( MAIN ) ;
25816: LD_STRING MAIN
25818: PPUSH
25819: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
25823: LD_INT 22
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 23
25835: PUSH
25836: LD_INT 2
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 21
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: LIST
25857: PPUSH
25858: CALL_OW 69
25862: PPUSH
25863: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
25867: LD_EXP 52
25871: PUSH
25872: LD_EXP 52
25876: PPUSH
25877: CALL_OW 255
25881: PUSH
25882: LD_INT 2
25884: EQUAL
25885: AND
25886: IFFALSE 25900
// SaveCharacters ( Doug , 08_UsCommander ) ;
25888: LD_EXP 52
25892: PPUSH
25893: LD_STRING 08_UsCommander
25895: PPUSH
25896: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff Doug , 08_Americans ) ;
25900: LD_INT 22
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 23
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 21
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: LIST
25934: PPUSH
25935: CALL_OW 69
25939: PUSH
25940: LD_EXP 52
25944: DIFF
25945: PPUSH
25946: LD_STRING 08_Americans
25948: PPUSH
25949: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
25953: LD_EXP 38
25957: PPUSH
25958: CALL_OW 248
25962: PUSH
25963: LD_INT 3
25965: EQUAL
25966: IFFALSE 25996
// begin CopySkills ( Heike , HeikeTmp ) ;
25968: LD_EXP 38
25972: PPUSH
25973: LD_EXP 54
25977: PPUSH
25978: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
25982: LD_EXP 54
25986: PPUSH
25987: LD_STRING 08_Heike
25989: PPUSH
25990: CALL_OW 38
// end else
25994: GO 26008
// SaveCharacters ( Heike , 08_Heike ) ;
25996: LD_EXP 38
26000: PPUSH
26001: LD_STRING 08_Heike
26003: PPUSH
26004: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
26008: LD_EXP 48
26012: PUSH
26013: LD_EXP 48
26017: PPUSH
26018: CALL_OW 255
26022: PUSH
26023: LD_INT 2
26025: EQUAL
26026: AND
26027: IFFALSE 26041
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
26029: LD_EXP 48
26033: PPUSH
26034: LD_STRING 08_Aviradze
26036: PPUSH
26037: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
26041: LD_EXP 41
26045: PUSH
26046: LD_EXP 41
26050: PPUSH
26051: CALL_OW 255
26055: PUSH
26056: LD_INT 2
26058: EQUAL
26059: AND
26060: IFFALSE 26074
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
26062: LD_EXP 41
26066: PPUSH
26067: LD_STRING 08_Ibrahim
26069: PPUSH
26070: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
26074: LD_EXP 42
26078: PUSH
26079: LD_EXP 42
26083: PPUSH
26084: CALL_OW 255
26088: PUSH
26089: LD_INT 2
26091: EQUAL
26092: AND
26093: IFFALSE 26107
// SaveCharacters ( Kamil , 08_Kamil ) ;
26095: LD_EXP 42
26099: PPUSH
26100: LD_STRING 08_Kamil
26102: PPUSH
26103: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
26107: LD_EXP 44
26111: PUSH
26112: LD_EXP 44
26116: PPUSH
26117: CALL_OW 255
26121: PUSH
26122: LD_INT 2
26124: EQUAL
26125: AND
26126: IFFALSE 26140
// SaveCharacters ( Sophia , 08_Sophia ) ;
26128: LD_EXP 44
26132: PPUSH
26133: LD_STRING 08_Sophia
26135: PPUSH
26136: CALL_OW 38
// if Kaia and GetSide ( Aviradze ) = 2 then
26140: LD_EXP 43
26144: PUSH
26145: LD_EXP 48
26149: PPUSH
26150: CALL_OW 255
26154: PUSH
26155: LD_INT 2
26157: EQUAL
26158: AND
26159: IFFALSE 26173
// SaveCharacters ( Kaia , 08_Kaia ) ;
26161: LD_EXP 43
26165: PPUSH
26166: LD_STRING 08_Kaia
26168: PPUSH
26169: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
26173: LD_EXP 39
26177: PUSH
26178: LD_EXP 39
26182: PPUSH
26183: CALL_OW 255
26187: PUSH
26188: LD_INT 2
26190: EQUAL
26191: AND
26192: IFFALSE 26249
// if GetNation ( Givi ) = nation_russian then
26194: LD_EXP 39
26198: PPUSH
26199: CALL_OW 248
26203: PUSH
26204: LD_INT 3
26206: EQUAL
26207: IFFALSE 26237
// begin CopySkills ( Givi , GiviTmp ) ;
26209: LD_EXP 39
26213: PPUSH
26214: LD_EXP 55
26218: PPUSH
26219: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
26223: LD_EXP 55
26227: PPUSH
26228: LD_STRING 08_Givi
26230: PPUSH
26231: CALL_OW 38
// end else
26235: GO 26249
// SaveCharacters ( Givi , 08_Givi ) ;
26237: LD_EXP 39
26241: PPUSH
26242: LD_STRING 08_Givi
26244: PPUSH
26245: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
26249: LD_EXP 40
26253: PUSH
26254: LD_EXP 40
26258: PPUSH
26259: CALL_OW 255
26263: PUSH
26264: LD_INT 2
26266: EQUAL
26267: AND
26268: IFFALSE 26282
// SaveCharacters ( Mike , 08_Mike ) ;
26270: LD_EXP 40
26274: PPUSH
26275: LD_STRING 08_Mike
26277: PPUSH
26278: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
26282: LD_EXP 45
26286: PUSH
26287: LD_EXP 45
26291: PPUSH
26292: CALL_OW 255
26296: PUSH
26297: LD_INT 2
26299: EQUAL
26300: AND
26301: IFFALSE 26315
// SaveCharacters ( Markov , 08_Markov ) ;
26303: LD_EXP 45
26307: PPUSH
26308: LD_STRING 08_Markov
26310: PPUSH
26311: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
26315: LD_EXP 47
26319: PUSH
26320: LD_EXP 47
26324: PPUSH
26325: CALL_OW 255
26329: PUSH
26330: LD_INT 2
26332: EQUAL
26333: AND
26334: IFFALSE 26348
// SaveCharacters ( Kurt , 08_Kurt ) ;
26336: LD_EXP 47
26340: PPUSH
26341: LD_STRING 08_Kurt
26343: PPUSH
26344: CALL_OW 38
// if heikeSecondSquad then
26348: LD_EXP 49
26352: IFFALSE 26366
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
26354: LD_EXP 49
26358: PPUSH
26359: LD_STRING 08_others
26361: PPUSH
26362: CALL_OW 38
// YouWin ;
26366: CALL_OW 103
// DialogueOff ;
26370: CALL_OW 7
// end ; end_of_file
26374: LD_VAR 0 1
26378: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
26379: LD_EXP 5
26383: IFFALSE 26562
26385: GO 26387
26387: DISABLE
26388: LD_INT 0
26390: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
26391: LD_INT 35
26393: PPUSH
26394: LD_INT 2100
26396: PPUSH
26397: CALL_OW 12
26401: PPUSH
26402: CALL_OW 67
// StopOriginalMusic ;
26406: CALL 88034 0 0
// weatherBusy := true ;
26410: LD_ADDR_EXP 37
26414: PUSH
26415: LD_INT 1
26417: ST_TO_ADDR
// for i := 1 to 3 do
26418: LD_ADDR_VAR 0 1
26422: PUSH
26423: DOUBLE
26424: LD_INT 1
26426: DEC
26427: ST_TO_ADDR
26428: LD_INT 3
26430: PUSH
26431: FOR_TO
26432: IFFALSE 26466
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
26434: LD_INT 1
26436: PPUSH
26437: LD_INT 100
26439: PUSH
26440: LD_INT 100
26442: PUSH
26443: LD_VAR 0 1
26447: MUL
26448: PLUS
26449: PPUSH
26450: LD_INT 60
26452: PPUSH
26453: CALL_OW 550
// wait ( 0 0$2 ) ;
26457: LD_INT 70
26459: PPUSH
26460: CALL_OW 67
// end ;
26464: GO 26431
26466: POP
26467: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
26468: LD_STRING ArStormRain.wav
26470: PPUSH
26471: LD_STRING OW_CUSTOM_COMMAND(103);
26473: PPUSH
26474: CALL 88064 0 2
// wait ( 0 0$3 ) ;
26478: LD_INT 105
26480: PPUSH
26481: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
26485: LD_INT 1
26487: PPUSH
26488: LD_INT 900
26490: PPUSH
26491: LD_INT 120
26493: PPUSH
26494: CALL_OW 550
// wait ( 0 0$10 ) ;
26498: LD_INT 350
26500: PPUSH
26501: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
26505: LD_INT 1
26507: PPUSH
26508: LD_INT 1500
26510: PPUSH
26511: LD_INT 300
26513: PPUSH
26514: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
26518: LD_INT 35
26520: PPUSH
26521: CALL_OW 67
// until not weatherBusy ;
26525: LD_EXP 37
26529: NOT
26530: IFFALSE 26518
// SetWeather ( 0 , 0 , 0 ) ;
26532: LD_INT 0
26534: PPUSH
26535: LD_INT 0
26537: PPUSH
26538: LD_INT 0
26540: PPUSH
26541: CALL_OW 550
// wait ( 5 5$00 ) ;
26545: LD_INT 10500
26547: PPUSH
26548: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
26552: LD_STRING ArStormNormal.wav
26554: PPUSH
26555: LD_STRING OW_CUSTOM_COMMAND(103);
26557: PPUSH
26558: CALL 88064 0 2
// end ; end_of_file
26562: PPOPN 1
26564: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26565: LD_INT 0
26567: PPUSH
26568: PPUSH
// if exist_mode then
26569: LD_VAR 0 2
26573: IFFALSE 26598
// unit := CreateCharacter ( prefix & ident ) else
26575: LD_ADDR_VAR 0 5
26579: PUSH
26580: LD_VAR 0 3
26584: PUSH
26585: LD_VAR 0 1
26589: STR
26590: PPUSH
26591: CALL_OW 34
26595: ST_TO_ADDR
26596: GO 26613
// unit := NewCharacter ( ident ) ;
26598: LD_ADDR_VAR 0 5
26602: PUSH
26603: LD_VAR 0 1
26607: PPUSH
26608: CALL_OW 25
26612: ST_TO_ADDR
// result := unit ;
26613: LD_ADDR_VAR 0 4
26617: PUSH
26618: LD_VAR 0 5
26622: ST_TO_ADDR
// end ;
26623: LD_VAR 0 4
26627: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26628: LD_INT 0
26630: PPUSH
26631: PPUSH
// if not side or not nation then
26632: LD_VAR 0 1
26636: NOT
26637: PUSH
26638: LD_VAR 0 2
26642: NOT
26643: OR
26644: IFFALSE 26648
// exit ;
26646: GO 27416
// case nation of nation_american :
26648: LD_VAR 0 2
26652: PUSH
26653: LD_INT 1
26655: DOUBLE
26656: EQUAL
26657: IFTRUE 26661
26659: GO 26875
26661: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26662: LD_ADDR_VAR 0 4
26666: PUSH
26667: LD_INT 35
26669: PUSH
26670: LD_INT 45
26672: PUSH
26673: LD_INT 46
26675: PUSH
26676: LD_INT 47
26678: PUSH
26679: LD_INT 82
26681: PUSH
26682: LD_INT 83
26684: PUSH
26685: LD_INT 84
26687: PUSH
26688: LD_INT 85
26690: PUSH
26691: LD_INT 86
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: LD_INT 2
26699: PUSH
26700: LD_INT 6
26702: PUSH
26703: LD_INT 15
26705: PUSH
26706: LD_INT 16
26708: PUSH
26709: LD_INT 7
26711: PUSH
26712: LD_INT 12
26714: PUSH
26715: LD_INT 13
26717: PUSH
26718: LD_INT 10
26720: PUSH
26721: LD_INT 14
26723: PUSH
26724: LD_INT 20
26726: PUSH
26727: LD_INT 21
26729: PUSH
26730: LD_INT 22
26732: PUSH
26733: LD_INT 25
26735: PUSH
26736: LD_INT 32
26738: PUSH
26739: LD_INT 27
26741: PUSH
26742: LD_INT 36
26744: PUSH
26745: LD_INT 69
26747: PUSH
26748: LD_INT 39
26750: PUSH
26751: LD_INT 34
26753: PUSH
26754: LD_INT 40
26756: PUSH
26757: LD_INT 48
26759: PUSH
26760: LD_INT 49
26762: PUSH
26763: LD_INT 50
26765: PUSH
26766: LD_INT 51
26768: PUSH
26769: LD_INT 52
26771: PUSH
26772: LD_INT 53
26774: PUSH
26775: LD_INT 54
26777: PUSH
26778: LD_INT 55
26780: PUSH
26781: LD_INT 56
26783: PUSH
26784: LD_INT 57
26786: PUSH
26787: LD_INT 58
26789: PUSH
26790: LD_INT 59
26792: PUSH
26793: LD_INT 60
26795: PUSH
26796: LD_INT 61
26798: PUSH
26799: LD_INT 62
26801: PUSH
26802: LD_INT 80
26804: PUSH
26805: LD_INT 82
26807: PUSH
26808: LD_INT 83
26810: PUSH
26811: LD_INT 84
26813: PUSH
26814: LD_INT 85
26816: PUSH
26817: LD_INT 86
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: ST_TO_ADDR
26873: GO 27340
26875: LD_INT 2
26877: DOUBLE
26878: EQUAL
26879: IFTRUE 26883
26881: GO 27109
26883: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26884: LD_ADDR_VAR 0 4
26888: PUSH
26889: LD_INT 35
26891: PUSH
26892: LD_INT 45
26894: PUSH
26895: LD_INT 46
26897: PUSH
26898: LD_INT 47
26900: PUSH
26901: LD_INT 82
26903: PUSH
26904: LD_INT 83
26906: PUSH
26907: LD_INT 84
26909: PUSH
26910: LD_INT 85
26912: PUSH
26913: LD_INT 87
26915: PUSH
26916: LD_INT 70
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: LD_INT 11
26924: PUSH
26925: LD_INT 3
26927: PUSH
26928: LD_INT 4
26930: PUSH
26931: LD_INT 5
26933: PUSH
26934: LD_INT 6
26936: PUSH
26937: LD_INT 15
26939: PUSH
26940: LD_INT 18
26942: PUSH
26943: LD_INT 7
26945: PUSH
26946: LD_INT 17
26948: PUSH
26949: LD_INT 8
26951: PUSH
26952: LD_INT 20
26954: PUSH
26955: LD_INT 21
26957: PUSH
26958: LD_INT 22
26960: PUSH
26961: LD_INT 72
26963: PUSH
26964: LD_INT 26
26966: PUSH
26967: LD_INT 69
26969: PUSH
26970: LD_INT 39
26972: PUSH
26973: LD_INT 40
26975: PUSH
26976: LD_INT 41
26978: PUSH
26979: LD_INT 42
26981: PUSH
26982: LD_INT 43
26984: PUSH
26985: LD_INT 48
26987: PUSH
26988: LD_INT 49
26990: PUSH
26991: LD_INT 50
26993: PUSH
26994: LD_INT 51
26996: PUSH
26997: LD_INT 52
26999: PUSH
27000: LD_INT 53
27002: PUSH
27003: LD_INT 54
27005: PUSH
27006: LD_INT 55
27008: PUSH
27009: LD_INT 56
27011: PUSH
27012: LD_INT 60
27014: PUSH
27015: LD_INT 61
27017: PUSH
27018: LD_INT 62
27020: PUSH
27021: LD_INT 66
27023: PUSH
27024: LD_INT 67
27026: PUSH
27027: LD_INT 68
27029: PUSH
27030: LD_INT 81
27032: PUSH
27033: LD_INT 82
27035: PUSH
27036: LD_INT 83
27038: PUSH
27039: LD_INT 84
27041: PUSH
27042: LD_INT 85
27044: PUSH
27045: LD_INT 87
27047: PUSH
27048: LD_INT 88
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: ST_TO_ADDR
27107: GO 27340
27109: LD_INT 3
27111: DOUBLE
27112: EQUAL
27113: IFTRUE 27117
27115: GO 27339
27117: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27118: LD_ADDR_VAR 0 4
27122: PUSH
27123: LD_INT 46
27125: PUSH
27126: LD_INT 47
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: LD_INT 2
27134: PUSH
27135: LD_INT 82
27137: PUSH
27138: LD_INT 83
27140: PUSH
27141: LD_INT 84
27143: PUSH
27144: LD_INT 85
27146: PUSH
27147: LD_INT 86
27149: PUSH
27150: LD_INT 11
27152: PUSH
27153: LD_INT 9
27155: PUSH
27156: LD_INT 20
27158: PUSH
27159: LD_INT 19
27161: PUSH
27162: LD_INT 21
27164: PUSH
27165: LD_INT 24
27167: PUSH
27168: LD_INT 22
27170: PUSH
27171: LD_INT 25
27173: PUSH
27174: LD_INT 28
27176: PUSH
27177: LD_INT 29
27179: PUSH
27180: LD_INT 30
27182: PUSH
27183: LD_INT 31
27185: PUSH
27186: LD_INT 37
27188: PUSH
27189: LD_INT 38
27191: PUSH
27192: LD_INT 32
27194: PUSH
27195: LD_INT 27
27197: PUSH
27198: LD_INT 33
27200: PUSH
27201: LD_INT 69
27203: PUSH
27204: LD_INT 39
27206: PUSH
27207: LD_INT 34
27209: PUSH
27210: LD_INT 40
27212: PUSH
27213: LD_INT 71
27215: PUSH
27216: LD_INT 23
27218: PUSH
27219: LD_INT 44
27221: PUSH
27222: LD_INT 48
27224: PUSH
27225: LD_INT 49
27227: PUSH
27228: LD_INT 50
27230: PUSH
27231: LD_INT 51
27233: PUSH
27234: LD_INT 52
27236: PUSH
27237: LD_INT 53
27239: PUSH
27240: LD_INT 54
27242: PUSH
27243: LD_INT 55
27245: PUSH
27246: LD_INT 56
27248: PUSH
27249: LD_INT 57
27251: PUSH
27252: LD_INT 58
27254: PUSH
27255: LD_INT 59
27257: PUSH
27258: LD_INT 63
27260: PUSH
27261: LD_INT 64
27263: PUSH
27264: LD_INT 65
27266: PUSH
27267: LD_INT 82
27269: PUSH
27270: LD_INT 83
27272: PUSH
27273: LD_INT 84
27275: PUSH
27276: LD_INT 85
27278: PUSH
27279: LD_INT 86
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: ST_TO_ADDR
27337: GO 27340
27339: POP
// if state > - 1 and state < 3 then
27340: LD_VAR 0 3
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: GREATER
27349: PUSH
27350: LD_VAR 0 3
27354: PUSH
27355: LD_INT 3
27357: LESS
27358: AND
27359: IFFALSE 27416
// for i in result do
27361: LD_ADDR_VAR 0 5
27365: PUSH
27366: LD_VAR 0 4
27370: PUSH
27371: FOR_IN
27372: IFFALSE 27414
// if GetTech ( i , side ) <> state then
27374: LD_VAR 0 5
27378: PPUSH
27379: LD_VAR 0 1
27383: PPUSH
27384: CALL_OW 321
27388: PUSH
27389: LD_VAR 0 3
27393: NONEQUAL
27394: IFFALSE 27412
// result := result diff i ;
27396: LD_ADDR_VAR 0 4
27400: PUSH
27401: LD_VAR 0 4
27405: PUSH
27406: LD_VAR 0 5
27410: DIFF
27411: ST_TO_ADDR
27412: GO 27371
27414: POP
27415: POP
// end ;
27416: LD_VAR 0 4
27420: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27421: LD_INT 0
27423: PPUSH
27424: PPUSH
27425: PPUSH
// result := true ;
27426: LD_ADDR_VAR 0 3
27430: PUSH
27431: LD_INT 1
27433: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27434: LD_ADDR_VAR 0 5
27438: PUSH
27439: LD_VAR 0 2
27443: PPUSH
27444: CALL_OW 480
27448: ST_TO_ADDR
// if not tmp then
27449: LD_VAR 0 5
27453: NOT
27454: IFFALSE 27458
// exit ;
27456: GO 27507
// for i in tmp do
27458: LD_ADDR_VAR 0 4
27462: PUSH
27463: LD_VAR 0 5
27467: PUSH
27468: FOR_IN
27469: IFFALSE 27505
// if GetTech ( i , side ) <> state_researched then
27471: LD_VAR 0 4
27475: PPUSH
27476: LD_VAR 0 1
27480: PPUSH
27481: CALL_OW 321
27485: PUSH
27486: LD_INT 2
27488: NONEQUAL
27489: IFFALSE 27503
// begin result := false ;
27491: LD_ADDR_VAR 0 3
27495: PUSH
27496: LD_INT 0
27498: ST_TO_ADDR
// exit ;
27499: POP
27500: POP
27501: GO 27507
// end ;
27503: GO 27468
27505: POP
27506: POP
// end ;
27507: LD_VAR 0 3
27511: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27512: LD_INT 0
27514: PPUSH
27515: PPUSH
27516: PPUSH
27517: PPUSH
27518: PPUSH
27519: PPUSH
27520: PPUSH
27521: PPUSH
27522: PPUSH
27523: PPUSH
27524: PPUSH
27525: PPUSH
27526: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27527: LD_VAR 0 1
27531: NOT
27532: PUSH
27533: LD_VAR 0 1
27537: PPUSH
27538: CALL_OW 257
27542: PUSH
27543: LD_INT 9
27545: NONEQUAL
27546: OR
27547: IFFALSE 27551
// exit ;
27549: GO 28124
// side := GetSide ( unit ) ;
27551: LD_ADDR_VAR 0 9
27555: PUSH
27556: LD_VAR 0 1
27560: PPUSH
27561: CALL_OW 255
27565: ST_TO_ADDR
// tech_space := tech_spacanom ;
27566: LD_ADDR_VAR 0 12
27570: PUSH
27571: LD_INT 29
27573: ST_TO_ADDR
// tech_time := tech_taurad ;
27574: LD_ADDR_VAR 0 13
27578: PUSH
27579: LD_INT 28
27581: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27582: LD_ADDR_VAR 0 11
27586: PUSH
27587: LD_VAR 0 1
27591: PPUSH
27592: CALL_OW 310
27596: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27597: LD_VAR 0 11
27601: PPUSH
27602: CALL_OW 247
27606: PUSH
27607: LD_INT 2
27609: EQUAL
27610: IFFALSE 27614
// exit ;
27612: GO 28124
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27614: LD_ADDR_VAR 0 8
27618: PUSH
27619: LD_INT 81
27621: PUSH
27622: LD_VAR 0 9
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 3
27633: PUSH
27634: LD_INT 21
27636: PUSH
27637: LD_INT 3
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PPUSH
27652: CALL_OW 69
27656: ST_TO_ADDR
// if not tmp then
27657: LD_VAR 0 8
27661: NOT
27662: IFFALSE 27666
// exit ;
27664: GO 28124
// if in_unit then
27666: LD_VAR 0 11
27670: IFFALSE 27694
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27672: LD_ADDR_VAR 0 10
27676: PUSH
27677: LD_VAR 0 8
27681: PPUSH
27682: LD_VAR 0 11
27686: PPUSH
27687: CALL_OW 74
27691: ST_TO_ADDR
27692: GO 27714
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27694: LD_ADDR_VAR 0 10
27698: PUSH
27699: LD_VAR 0 8
27703: PPUSH
27704: LD_VAR 0 1
27708: PPUSH
27709: CALL_OW 74
27713: ST_TO_ADDR
// if not enemy then
27714: LD_VAR 0 10
27718: NOT
27719: IFFALSE 27723
// exit ;
27721: GO 28124
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27723: LD_VAR 0 11
27727: PUSH
27728: LD_VAR 0 11
27732: PPUSH
27733: LD_VAR 0 10
27737: PPUSH
27738: CALL_OW 296
27742: PUSH
27743: LD_INT 13
27745: GREATER
27746: AND
27747: PUSH
27748: LD_VAR 0 1
27752: PPUSH
27753: LD_VAR 0 10
27757: PPUSH
27758: CALL_OW 296
27762: PUSH
27763: LD_INT 12
27765: GREATER
27766: OR
27767: IFFALSE 27771
// exit ;
27769: GO 28124
// missile := [ 1 ] ;
27771: LD_ADDR_VAR 0 14
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27782: LD_VAR 0 9
27786: PPUSH
27787: LD_VAR 0 12
27791: PPUSH
27792: CALL_OW 325
27796: IFFALSE 27825
// missile := Replace ( missile , missile + 1 , 2 ) ;
27798: LD_ADDR_VAR 0 14
27802: PUSH
27803: LD_VAR 0 14
27807: PPUSH
27808: LD_VAR 0 14
27812: PUSH
27813: LD_INT 1
27815: PLUS
27816: PPUSH
27817: LD_INT 2
27819: PPUSH
27820: CALL_OW 1
27824: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27825: LD_VAR 0 9
27829: PPUSH
27830: LD_VAR 0 13
27834: PPUSH
27835: CALL_OW 325
27839: PUSH
27840: LD_VAR 0 10
27844: PPUSH
27845: CALL_OW 255
27849: PPUSH
27850: LD_VAR 0 13
27854: PPUSH
27855: CALL_OW 325
27859: NOT
27860: AND
27861: IFFALSE 27890
// missile := Replace ( missile , missile + 1 , 3 ) ;
27863: LD_ADDR_VAR 0 14
27867: PUSH
27868: LD_VAR 0 14
27872: PPUSH
27873: LD_VAR 0 14
27877: PUSH
27878: LD_INT 1
27880: PLUS
27881: PPUSH
27882: LD_INT 3
27884: PPUSH
27885: CALL_OW 1
27889: ST_TO_ADDR
// if missile < 2 then
27890: LD_VAR 0 14
27894: PUSH
27895: LD_INT 2
27897: LESS
27898: IFFALSE 27902
// exit ;
27900: GO 28124
// x := GetX ( enemy ) ;
27902: LD_ADDR_VAR 0 4
27906: PUSH
27907: LD_VAR 0 10
27911: PPUSH
27912: CALL_OW 250
27916: ST_TO_ADDR
// y := GetY ( enemy ) ;
27917: LD_ADDR_VAR 0 5
27921: PUSH
27922: LD_VAR 0 10
27926: PPUSH
27927: CALL_OW 251
27931: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27932: LD_ADDR_VAR 0 6
27936: PUSH
27937: LD_VAR 0 4
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PPUSH
27946: LD_INT 1
27948: PPUSH
27949: CALL_OW 12
27953: PLUS
27954: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27955: LD_ADDR_VAR 0 7
27959: PUSH
27960: LD_VAR 0 5
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PPUSH
27969: LD_INT 1
27971: PPUSH
27972: CALL_OW 12
27976: PLUS
27977: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27978: LD_VAR 0 6
27982: PPUSH
27983: LD_VAR 0 7
27987: PPUSH
27988: CALL_OW 488
27992: NOT
27993: IFFALSE 28015
// begin _x := x ;
27995: LD_ADDR_VAR 0 6
27999: PUSH
28000: LD_VAR 0 4
28004: ST_TO_ADDR
// _y := y ;
28005: LD_ADDR_VAR 0 7
28009: PUSH
28010: LD_VAR 0 5
28014: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: LD_INT 1
28022: PPUSH
28023: LD_VAR 0 14
28027: PPUSH
28028: CALL_OW 12
28032: ST_TO_ADDR
// case i of 1 :
28033: LD_VAR 0 3
28037: PUSH
28038: LD_INT 1
28040: DOUBLE
28041: EQUAL
28042: IFTRUE 28046
28044: GO 28063
28046: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28047: LD_VAR 0 1
28051: PPUSH
28052: LD_VAR 0 10
28056: PPUSH
28057: CALL_OW 115
28061: GO 28124
28063: LD_INT 2
28065: DOUBLE
28066: EQUAL
28067: IFTRUE 28071
28069: GO 28093
28071: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28072: LD_VAR 0 1
28076: PPUSH
28077: LD_VAR 0 6
28081: PPUSH
28082: LD_VAR 0 7
28086: PPUSH
28087: CALL_OW 153
28091: GO 28124
28093: LD_INT 3
28095: DOUBLE
28096: EQUAL
28097: IFTRUE 28101
28099: GO 28123
28101: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28102: LD_VAR 0 1
28106: PPUSH
28107: LD_VAR 0 6
28111: PPUSH
28112: LD_VAR 0 7
28116: PPUSH
28117: CALL_OW 154
28121: GO 28124
28123: POP
// end ;
28124: LD_VAR 0 2
28128: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28129: LD_INT 0
28131: PPUSH
28132: PPUSH
28133: PPUSH
28134: PPUSH
28135: PPUSH
28136: PPUSH
// if not unit or not building then
28137: LD_VAR 0 1
28141: NOT
28142: PUSH
28143: LD_VAR 0 2
28147: NOT
28148: OR
28149: IFFALSE 28153
// exit ;
28151: GO 28311
// x := GetX ( building ) ;
28153: LD_ADDR_VAR 0 5
28157: PUSH
28158: LD_VAR 0 2
28162: PPUSH
28163: CALL_OW 250
28167: ST_TO_ADDR
// y := GetY ( building ) ;
28168: LD_ADDR_VAR 0 6
28172: PUSH
28173: LD_VAR 0 2
28177: PPUSH
28178: CALL_OW 251
28182: ST_TO_ADDR
// for i = 0 to 5 do
28183: LD_ADDR_VAR 0 4
28187: PUSH
28188: DOUBLE
28189: LD_INT 0
28191: DEC
28192: ST_TO_ADDR
28193: LD_INT 5
28195: PUSH
28196: FOR_TO
28197: IFFALSE 28309
// begin _x := ShiftX ( x , i , 3 ) ;
28199: LD_ADDR_VAR 0 7
28203: PUSH
28204: LD_VAR 0 5
28208: PPUSH
28209: LD_VAR 0 4
28213: PPUSH
28214: LD_INT 3
28216: PPUSH
28217: CALL_OW 272
28221: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28222: LD_ADDR_VAR 0 8
28226: PUSH
28227: LD_VAR 0 6
28231: PPUSH
28232: LD_VAR 0 4
28236: PPUSH
28237: LD_INT 3
28239: PPUSH
28240: CALL_OW 273
28244: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28245: LD_VAR 0 7
28249: PPUSH
28250: LD_VAR 0 8
28254: PPUSH
28255: CALL_OW 488
28259: NOT
28260: IFFALSE 28264
// continue ;
28262: GO 28196
// if HexInfo ( _x , _y ) = 0 then
28264: LD_VAR 0 7
28268: PPUSH
28269: LD_VAR 0 8
28273: PPUSH
28274: CALL_OW 428
28278: PUSH
28279: LD_INT 0
28281: EQUAL
28282: IFFALSE 28307
// begin ComMoveXY ( unit , _x , _y ) ;
28284: LD_VAR 0 1
28288: PPUSH
28289: LD_VAR 0 7
28293: PPUSH
28294: LD_VAR 0 8
28298: PPUSH
28299: CALL_OW 111
// exit ;
28303: POP
28304: POP
28305: GO 28311
// end ; end ;
28307: GO 28196
28309: POP
28310: POP
// end ;
28311: LD_VAR 0 3
28315: RET
// export function ScanBase ( side , base_area ) ; begin
28316: LD_INT 0
28318: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28319: LD_ADDR_VAR 0 3
28323: PUSH
28324: LD_VAR 0 2
28328: PPUSH
28329: LD_INT 81
28331: PUSH
28332: LD_VAR 0 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PPUSH
28341: CALL_OW 70
28345: ST_TO_ADDR
// end ;
28346: LD_VAR 0 3
28350: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28351: LD_INT 0
28353: PPUSH
28354: PPUSH
28355: PPUSH
28356: PPUSH
// result := false ;
28357: LD_ADDR_VAR 0 2
28361: PUSH
28362: LD_INT 0
28364: ST_TO_ADDR
// side := GetSide ( unit ) ;
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_VAR 0 1
28374: PPUSH
28375: CALL_OW 255
28379: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28380: LD_ADDR_VAR 0 4
28384: PUSH
28385: LD_VAR 0 1
28389: PPUSH
28390: CALL_OW 248
28394: ST_TO_ADDR
// case nat of 1 :
28395: LD_VAR 0 4
28399: PUSH
28400: LD_INT 1
28402: DOUBLE
28403: EQUAL
28404: IFTRUE 28408
28406: GO 28419
28408: POP
// tech := tech_lassight ; 2 :
28409: LD_ADDR_VAR 0 5
28413: PUSH
28414: LD_INT 12
28416: ST_TO_ADDR
28417: GO 28458
28419: LD_INT 2
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28438
28427: POP
// tech := tech_mortar ; 3 :
28428: LD_ADDR_VAR 0 5
28432: PUSH
28433: LD_INT 41
28435: ST_TO_ADDR
28436: GO 28458
28438: LD_INT 3
28440: DOUBLE
28441: EQUAL
28442: IFTRUE 28446
28444: GO 28457
28446: POP
// tech := tech_bazooka ; end ;
28447: LD_ADDR_VAR 0 5
28451: PUSH
28452: LD_INT 44
28454: ST_TO_ADDR
28455: GO 28458
28457: POP
// if Researched ( side , tech ) then
28458: LD_VAR 0 3
28462: PPUSH
28463: LD_VAR 0 5
28467: PPUSH
28468: CALL_OW 325
28472: IFFALSE 28499
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28474: LD_ADDR_VAR 0 2
28478: PUSH
28479: LD_INT 5
28481: PUSH
28482: LD_INT 8
28484: PUSH
28485: LD_INT 9
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: LIST
28492: PUSH
28493: LD_VAR 0 4
28497: ARRAY
28498: ST_TO_ADDR
// end ;
28499: LD_VAR 0 2
28503: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28504: LD_INT 0
28506: PPUSH
28507: PPUSH
28508: PPUSH
// if not mines then
28509: LD_VAR 0 2
28513: NOT
28514: IFFALSE 28518
// exit ;
28516: GO 28662
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28518: LD_ADDR_VAR 0 5
28522: PUSH
28523: LD_INT 81
28525: PUSH
28526: LD_VAR 0 1
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 3
28537: PUSH
28538: LD_INT 21
28540: PUSH
28541: LD_INT 3
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PPUSH
28556: CALL_OW 69
28560: ST_TO_ADDR
// for i in mines do
28561: LD_ADDR_VAR 0 4
28565: PUSH
28566: LD_VAR 0 2
28570: PUSH
28571: FOR_IN
28572: IFFALSE 28660
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28574: LD_VAR 0 4
28578: PUSH
28579: LD_INT 1
28581: ARRAY
28582: PPUSH
28583: LD_VAR 0 4
28587: PUSH
28588: LD_INT 2
28590: ARRAY
28591: PPUSH
28592: CALL_OW 458
28596: NOT
28597: IFFALSE 28601
// continue ;
28599: GO 28571
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28601: LD_VAR 0 4
28605: PUSH
28606: LD_INT 1
28608: ARRAY
28609: PPUSH
28610: LD_VAR 0 4
28614: PUSH
28615: LD_INT 2
28617: ARRAY
28618: PPUSH
28619: CALL_OW 428
28623: PUSH
28624: LD_VAR 0 5
28628: IN
28629: IFFALSE 28658
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28631: LD_VAR 0 4
28635: PUSH
28636: LD_INT 1
28638: ARRAY
28639: PPUSH
28640: LD_VAR 0 4
28644: PUSH
28645: LD_INT 2
28647: ARRAY
28648: PPUSH
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 456
// end ;
28658: GO 28571
28660: POP
28661: POP
// end ;
28662: LD_VAR 0 3
28666: RET
// export function Count ( array ) ; var i ; begin
28667: LD_INT 0
28669: PPUSH
28670: PPUSH
// result := 0 ;
28671: LD_ADDR_VAR 0 2
28675: PUSH
28676: LD_INT 0
28678: ST_TO_ADDR
// for i in array do
28679: LD_ADDR_VAR 0 3
28683: PUSH
28684: LD_VAR 0 1
28688: PUSH
28689: FOR_IN
28690: IFFALSE 28714
// if i then
28692: LD_VAR 0 3
28696: IFFALSE 28712
// result := result + 1 ;
28698: LD_ADDR_VAR 0 2
28702: PUSH
28703: LD_VAR 0 2
28707: PUSH
28708: LD_INT 1
28710: PLUS
28711: ST_TO_ADDR
28712: GO 28689
28714: POP
28715: POP
// end ;
28716: LD_VAR 0 2
28720: RET
// export function IsEmpty ( building ) ; begin
28721: LD_INT 0
28723: PPUSH
// if not building then
28724: LD_VAR 0 1
28728: NOT
28729: IFFALSE 28733
// exit ;
28731: GO 28776
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28733: LD_ADDR_VAR 0 2
28737: PUSH
28738: LD_VAR 0 1
28742: PUSH
28743: LD_INT 22
28745: PUSH
28746: LD_VAR 0 1
28750: PPUSH
28751: CALL_OW 255
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 58
28762: PUSH
28763: EMPTY
28764: LIST
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PPUSH
28770: CALL_OW 69
28774: IN
28775: ST_TO_ADDR
// end ;
28776: LD_VAR 0 2
28780: RET
// export function IsNotFull ( building ) ; var places ; begin
28781: LD_INT 0
28783: PPUSH
28784: PPUSH
// if not building then
28785: LD_VAR 0 1
28789: NOT
28790: IFFALSE 28794
// exit ;
28792: GO 28965
// result := false ;
28794: LD_ADDR_VAR 0 2
28798: PUSH
28799: LD_INT 0
28801: ST_TO_ADDR
// places := 0 ;
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_INT 0
28809: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28810: LD_VAR 0 1
28814: PPUSH
28815: CALL_OW 266
28819: PUSH
28820: LD_INT 0
28822: DOUBLE
28823: EQUAL
28824: IFTRUE 28882
28826: LD_INT 1
28828: DOUBLE
28829: EQUAL
28830: IFTRUE 28882
28832: LD_INT 6
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28882
28838: LD_INT 7
28840: DOUBLE
28841: EQUAL
28842: IFTRUE 28882
28844: LD_INT 8
28846: DOUBLE
28847: EQUAL
28848: IFTRUE 28882
28850: LD_INT 4
28852: DOUBLE
28853: EQUAL
28854: IFTRUE 28882
28856: LD_INT 5
28858: DOUBLE
28859: EQUAL
28860: IFTRUE 28882
28862: LD_INT 2
28864: DOUBLE
28865: EQUAL
28866: IFTRUE 28882
28868: LD_INT 3
28870: DOUBLE
28871: EQUAL
28872: IFTRUE 28882
28874: LD_INT 35
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28893
28882: POP
// places := 6 ; b_bunker , b_breastwork :
28883: LD_ADDR_VAR 0 3
28887: PUSH
28888: LD_INT 6
28890: ST_TO_ADDR
28891: GO 28938
28893: LD_INT 32
28895: DOUBLE
28896: EQUAL
28897: IFTRUE 28907
28899: LD_INT 31
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28918
28907: POP
// places := 1 ; b_control_tower :
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: LD_INT 1
28915: ST_TO_ADDR
28916: GO 28938
28918: LD_INT 36
28920: DOUBLE
28921: EQUAL
28922: IFTRUE 28926
28924: GO 28937
28926: POP
// places := 3 ; end ;
28927: LD_ADDR_VAR 0 3
28931: PUSH
28932: LD_INT 3
28934: ST_TO_ADDR
28935: GO 28938
28937: POP
// if places then
28938: LD_VAR 0 3
28942: IFFALSE 28965
// result := UnitsInside ( building ) < places ;
28944: LD_ADDR_VAR 0 2
28948: PUSH
28949: LD_VAR 0 1
28953: PPUSH
28954: CALL_OW 313
28958: PUSH
28959: LD_VAR 0 3
28963: LESS
28964: ST_TO_ADDR
// end ;
28965: LD_VAR 0 2
28969: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28970: LD_INT 0
28972: PPUSH
28973: PPUSH
28974: PPUSH
28975: PPUSH
// tmp := [ ] ;
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: EMPTY
28982: ST_TO_ADDR
// list := [ ] ;
28983: LD_ADDR_VAR 0 5
28987: PUSH
28988: EMPTY
28989: ST_TO_ADDR
// for i = 16 to 25 do
28990: LD_ADDR_VAR 0 4
28994: PUSH
28995: DOUBLE
28996: LD_INT 16
28998: DEC
28999: ST_TO_ADDR
29000: LD_INT 25
29002: PUSH
29003: FOR_TO
29004: IFFALSE 29077
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29006: LD_ADDR_VAR 0 3
29010: PUSH
29011: LD_VAR 0 3
29015: PUSH
29016: LD_INT 22
29018: PUSH
29019: LD_VAR 0 1
29023: PPUSH
29024: CALL_OW 255
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 91
29035: PUSH
29036: LD_VAR 0 1
29040: PUSH
29041: LD_INT 6
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 30
29051: PUSH
29052: LD_VAR 0 4
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: PUSH
29066: EMPTY
29067: LIST
29068: PPUSH
29069: CALL_OW 69
29073: ADD
29074: ST_TO_ADDR
29075: GO 29003
29077: POP
29078: POP
// for i = 1 to tmp do
29079: LD_ADDR_VAR 0 4
29083: PUSH
29084: DOUBLE
29085: LD_INT 1
29087: DEC
29088: ST_TO_ADDR
29089: LD_VAR 0 3
29093: PUSH
29094: FOR_TO
29095: IFFALSE 29183
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29097: LD_ADDR_VAR 0 5
29101: PUSH
29102: LD_VAR 0 5
29106: PUSH
29107: LD_VAR 0 3
29111: PUSH
29112: LD_VAR 0 4
29116: ARRAY
29117: PPUSH
29118: CALL_OW 266
29122: PUSH
29123: LD_VAR 0 3
29127: PUSH
29128: LD_VAR 0 4
29132: ARRAY
29133: PPUSH
29134: CALL_OW 250
29138: PUSH
29139: LD_VAR 0 3
29143: PUSH
29144: LD_VAR 0 4
29148: ARRAY
29149: PPUSH
29150: CALL_OW 251
29154: PUSH
29155: LD_VAR 0 3
29159: PUSH
29160: LD_VAR 0 4
29164: ARRAY
29165: PPUSH
29166: CALL_OW 254
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: ADD
29180: ST_TO_ADDR
29181: GO 29094
29183: POP
29184: POP
// result := list ;
29185: LD_ADDR_VAR 0 2
29189: PUSH
29190: LD_VAR 0 5
29194: ST_TO_ADDR
// end ;
29195: LD_VAR 0 2
29199: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29200: LD_INT 0
29202: PPUSH
29203: PPUSH
29204: PPUSH
29205: PPUSH
29206: PPUSH
29207: PPUSH
29208: PPUSH
// if not factory then
29209: LD_VAR 0 1
29213: NOT
29214: IFFALSE 29218
// exit ;
29216: GO 29811
// if control = control_apeman then
29218: LD_VAR 0 4
29222: PUSH
29223: LD_INT 5
29225: EQUAL
29226: IFFALSE 29335
// begin tmp := UnitsInside ( factory ) ;
29228: LD_ADDR_VAR 0 8
29232: PUSH
29233: LD_VAR 0 1
29237: PPUSH
29238: CALL_OW 313
29242: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29243: LD_VAR 0 8
29247: PPUSH
29248: LD_INT 25
29250: PUSH
29251: LD_INT 12
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PPUSH
29258: CALL_OW 72
29262: NOT
29263: IFFALSE 29273
// control := control_manual ;
29265: LD_ADDR_VAR 0 4
29269: PUSH
29270: LD_INT 1
29272: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29273: LD_ADDR_VAR 0 8
29277: PUSH
29278: LD_VAR 0 1
29282: PPUSH
29283: CALL 28970 0 1
29287: ST_TO_ADDR
// if tmp then
29288: LD_VAR 0 8
29292: IFFALSE 29335
// begin for i in tmp do
29294: LD_ADDR_VAR 0 7
29298: PUSH
29299: LD_VAR 0 8
29303: PUSH
29304: FOR_IN
29305: IFFALSE 29333
// if i [ 1 ] = b_ext_radio then
29307: LD_VAR 0 7
29311: PUSH
29312: LD_INT 1
29314: ARRAY
29315: PUSH
29316: LD_INT 22
29318: EQUAL
29319: IFFALSE 29331
// begin control := control_remote ;
29321: LD_ADDR_VAR 0 4
29325: PUSH
29326: LD_INT 2
29328: ST_TO_ADDR
// break ;
29329: GO 29333
// end ;
29331: GO 29304
29333: POP
29334: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29335: LD_VAR 0 1
29339: PPUSH
29340: LD_VAR 0 2
29344: PPUSH
29345: LD_VAR 0 3
29349: PPUSH
29350: LD_VAR 0 4
29354: PPUSH
29355: LD_VAR 0 5
29359: PPUSH
29360: CALL_OW 448
29364: IFFALSE 29399
// begin result := [ chassis , engine , control , weapon ] ;
29366: LD_ADDR_VAR 0 6
29370: PUSH
29371: LD_VAR 0 2
29375: PUSH
29376: LD_VAR 0 3
29380: PUSH
29381: LD_VAR 0 4
29385: PUSH
29386: LD_VAR 0 5
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: ST_TO_ADDR
// exit ;
29397: GO 29811
// end ; _chassis := AvailableChassisList ( factory ) ;
29399: LD_ADDR_VAR 0 9
29403: PUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 475
29413: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29414: LD_ADDR_VAR 0 11
29418: PUSH
29419: LD_VAR 0 1
29423: PPUSH
29424: CALL_OW 476
29428: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29429: LD_ADDR_VAR 0 12
29433: PUSH
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL_OW 477
29443: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29444: LD_ADDR_VAR 0 10
29448: PUSH
29449: LD_VAR 0 1
29453: PPUSH
29454: CALL_OW 478
29458: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29459: LD_VAR 0 9
29463: NOT
29464: PUSH
29465: LD_VAR 0 11
29469: NOT
29470: OR
29471: PUSH
29472: LD_VAR 0 12
29476: NOT
29477: OR
29478: PUSH
29479: LD_VAR 0 10
29483: NOT
29484: OR
29485: IFFALSE 29520
// begin result := [ chassis , engine , control , weapon ] ;
29487: LD_ADDR_VAR 0 6
29491: PUSH
29492: LD_VAR 0 2
29496: PUSH
29497: LD_VAR 0 3
29501: PUSH
29502: LD_VAR 0 4
29506: PUSH
29507: LD_VAR 0 5
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: ST_TO_ADDR
// exit ;
29518: GO 29811
// end ; if not chassis in _chassis then
29520: LD_VAR 0 2
29524: PUSH
29525: LD_VAR 0 9
29529: IN
29530: NOT
29531: IFFALSE 29557
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29533: LD_ADDR_VAR 0 2
29537: PUSH
29538: LD_VAR 0 9
29542: PUSH
29543: LD_INT 1
29545: PPUSH
29546: LD_VAR 0 9
29550: PPUSH
29551: CALL_OW 12
29555: ARRAY
29556: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29557: LD_VAR 0 2
29561: PPUSH
29562: LD_VAR 0 3
29566: PPUSH
29567: CALL 29816 0 2
29571: NOT
29572: IFFALSE 29631
// repeat engine := _engine [ 1 ] ;
29574: LD_ADDR_VAR 0 3
29578: PUSH
29579: LD_VAR 0 11
29583: PUSH
29584: LD_INT 1
29586: ARRAY
29587: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29588: LD_ADDR_VAR 0 11
29592: PUSH
29593: LD_VAR 0 11
29597: PPUSH
29598: LD_INT 1
29600: PPUSH
29601: CALL_OW 3
29605: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29606: LD_VAR 0 2
29610: PPUSH
29611: LD_VAR 0 3
29615: PPUSH
29616: CALL 29816 0 2
29620: PUSH
29621: LD_VAR 0 11
29625: PUSH
29626: EMPTY
29627: EQUAL
29628: OR
29629: IFFALSE 29574
// if not control in _control then
29631: LD_VAR 0 4
29635: PUSH
29636: LD_VAR 0 12
29640: IN
29641: NOT
29642: IFFALSE 29668
// control := _control [ rand ( 1 , _control ) ] ;
29644: LD_ADDR_VAR 0 4
29648: PUSH
29649: LD_VAR 0 12
29653: PUSH
29654: LD_INT 1
29656: PPUSH
29657: LD_VAR 0 12
29661: PPUSH
29662: CALL_OW 12
29666: ARRAY
29667: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29668: LD_VAR 0 2
29672: PPUSH
29673: LD_VAR 0 5
29677: PPUSH
29678: CALL 30036 0 2
29682: NOT
29683: IFFALSE 29742
// repeat weapon := _weapon [ 1 ] ;
29685: LD_ADDR_VAR 0 5
29689: PUSH
29690: LD_VAR 0 10
29694: PUSH
29695: LD_INT 1
29697: ARRAY
29698: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29699: LD_ADDR_VAR 0 10
29703: PUSH
29704: LD_VAR 0 10
29708: PPUSH
29709: LD_INT 1
29711: PPUSH
29712: CALL_OW 3
29716: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29717: LD_VAR 0 2
29721: PPUSH
29722: LD_VAR 0 5
29726: PPUSH
29727: CALL 30036 0 2
29731: PUSH
29732: LD_VAR 0 10
29736: PUSH
29737: EMPTY
29738: EQUAL
29739: OR
29740: IFFALSE 29685
// result := [ ] ;
29742: LD_ADDR_VAR 0 6
29746: PUSH
29747: EMPTY
29748: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29749: LD_VAR 0 1
29753: PPUSH
29754: LD_VAR 0 2
29758: PPUSH
29759: LD_VAR 0 3
29763: PPUSH
29764: LD_VAR 0 4
29768: PPUSH
29769: LD_VAR 0 5
29773: PPUSH
29774: CALL_OW 448
29778: IFFALSE 29811
// result := [ chassis , engine , control , weapon ] ;
29780: LD_ADDR_VAR 0 6
29784: PUSH
29785: LD_VAR 0 2
29789: PUSH
29790: LD_VAR 0 3
29794: PUSH
29795: LD_VAR 0 4
29799: PUSH
29800: LD_VAR 0 5
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// end ;
29811: LD_VAR 0 6
29815: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29816: LD_INT 0
29818: PPUSH
// if not chassis or not engine then
29819: LD_VAR 0 1
29823: NOT
29824: PUSH
29825: LD_VAR 0 2
29829: NOT
29830: OR
29831: IFFALSE 29835
// exit ;
29833: GO 30031
// case engine of engine_solar :
29835: LD_VAR 0 2
29839: PUSH
29840: LD_INT 2
29842: DOUBLE
29843: EQUAL
29844: IFTRUE 29848
29846: GO 29886
29848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29849: LD_ADDR_VAR 0 3
29853: PUSH
29854: LD_INT 11
29856: PUSH
29857: LD_INT 12
29859: PUSH
29860: LD_INT 13
29862: PUSH
29863: LD_INT 14
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: LD_INT 2
29871: PUSH
29872: LD_INT 3
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: ST_TO_ADDR
29884: GO 30015
29886: LD_INT 1
29888: DOUBLE
29889: EQUAL
29890: IFTRUE 29894
29892: GO 29956
29894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29895: LD_ADDR_VAR 0 3
29899: PUSH
29900: LD_INT 11
29902: PUSH
29903: LD_INT 12
29905: PUSH
29906: LD_INT 13
29908: PUSH
29909: LD_INT 14
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: LD_INT 3
29920: PUSH
29921: LD_INT 4
29923: PUSH
29924: LD_INT 5
29926: PUSH
29927: LD_INT 21
29929: PUSH
29930: LD_INT 23
29932: PUSH
29933: LD_INT 22
29935: PUSH
29936: LD_INT 24
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: ST_TO_ADDR
29954: GO 30015
29956: LD_INT 3
29958: DOUBLE
29959: EQUAL
29960: IFTRUE 29964
29962: GO 30014
29964: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29965: LD_ADDR_VAR 0 3
29969: PUSH
29970: LD_INT 13
29972: PUSH
29973: LD_INT 14
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: LD_INT 4
29984: PUSH
29985: LD_INT 5
29987: PUSH
29988: LD_INT 21
29990: PUSH
29991: LD_INT 22
29993: PUSH
29994: LD_INT 23
29996: PUSH
29997: LD_INT 24
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
30012: GO 30015
30014: POP
// result := ( chassis in result ) ;
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_VAR 0 1
30024: PUSH
30025: LD_VAR 0 3
30029: IN
30030: ST_TO_ADDR
// end ;
30031: LD_VAR 0 3
30035: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30036: LD_INT 0
30038: PPUSH
// if not chassis or not weapon then
30039: LD_VAR 0 1
30043: NOT
30044: PUSH
30045: LD_VAR 0 2
30049: NOT
30050: OR
30051: IFFALSE 30055
// exit ;
30053: GO 31115
// case weapon of us_machine_gun :
30055: LD_VAR 0 2
30059: PUSH
30060: LD_INT 2
30062: DOUBLE
30063: EQUAL
30064: IFTRUE 30068
30066: GO 30098
30068: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30069: LD_ADDR_VAR 0 3
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: LD_INT 4
30085: PUSH
30086: LD_INT 5
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
30096: GO 31099
30098: LD_INT 3
30100: DOUBLE
30101: EQUAL
30102: IFTRUE 30106
30104: GO 30136
30106: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: LD_INT 2
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: LD_INT 4
30123: PUSH
30124: LD_INT 5
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: ST_TO_ADDR
30134: GO 31099
30136: LD_INT 11
30138: DOUBLE
30139: EQUAL
30140: IFTRUE 30144
30142: GO 30174
30144: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30145: LD_ADDR_VAR 0 3
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: LD_INT 2
30155: PUSH
30156: LD_INT 3
30158: PUSH
30159: LD_INT 4
30161: PUSH
30162: LD_INT 5
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: ST_TO_ADDR
30172: GO 31099
30174: LD_INT 4
30176: DOUBLE
30177: EQUAL
30178: IFTRUE 30182
30180: GO 30208
30182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30183: LD_ADDR_VAR 0 3
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: LD_INT 3
30193: PUSH
30194: LD_INT 4
30196: PUSH
30197: LD_INT 5
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: ST_TO_ADDR
30206: GO 31099
30208: LD_INT 5
30210: DOUBLE
30211: EQUAL
30212: IFTRUE 30216
30214: GO 30242
30216: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30217: LD_ADDR_VAR 0 3
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 3
30227: PUSH
30228: LD_INT 4
30230: PUSH
30231: LD_INT 5
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: ST_TO_ADDR
30240: GO 31099
30242: LD_INT 9
30244: DOUBLE
30245: EQUAL
30246: IFTRUE 30250
30248: GO 30276
30250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30251: LD_ADDR_VAR 0 3
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: LD_INT 4
30264: PUSH
30265: LD_INT 5
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: ST_TO_ADDR
30274: GO 31099
30276: LD_INT 7
30278: DOUBLE
30279: EQUAL
30280: IFTRUE 30284
30282: GO 30310
30284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30285: LD_ADDR_VAR 0 3
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: LD_INT 3
30295: PUSH
30296: LD_INT 4
30298: PUSH
30299: LD_INT 5
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: ST_TO_ADDR
30308: GO 31099
30310: LD_INT 12
30312: DOUBLE
30313: EQUAL
30314: IFTRUE 30318
30316: GO 30344
30318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30319: LD_ADDR_VAR 0 3
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: LD_INT 3
30329: PUSH
30330: LD_INT 4
30332: PUSH
30333: LD_INT 5
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: ST_TO_ADDR
30342: GO 31099
30344: LD_INT 13
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30378
30352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30353: LD_ADDR_VAR 0 3
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: LD_INT 3
30363: PUSH
30364: LD_INT 4
30366: PUSH
30367: LD_INT 5
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: ST_TO_ADDR
30376: GO 31099
30378: LD_INT 14
30380: DOUBLE
30381: EQUAL
30382: IFTRUE 30386
30384: GO 30404
30386: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30387: LD_ADDR_VAR 0 3
30391: PUSH
30392: LD_INT 4
30394: PUSH
30395: LD_INT 5
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: ST_TO_ADDR
30402: GO 31099
30404: LD_INT 6
30406: DOUBLE
30407: EQUAL
30408: IFTRUE 30412
30410: GO 30430
30412: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30413: LD_ADDR_VAR 0 3
30417: PUSH
30418: LD_INT 4
30420: PUSH
30421: LD_INT 5
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: ST_TO_ADDR
30428: GO 31099
30430: LD_INT 10
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30456
30438: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30439: LD_ADDR_VAR 0 3
30443: PUSH
30444: LD_INT 4
30446: PUSH
30447: LD_INT 5
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: ST_TO_ADDR
30454: GO 31099
30456: LD_INT 22
30458: DOUBLE
30459: EQUAL
30460: IFTRUE 30464
30462: GO 30490
30464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30465: LD_ADDR_VAR 0 3
30469: PUSH
30470: LD_INT 11
30472: PUSH
30473: LD_INT 12
30475: PUSH
30476: LD_INT 13
30478: PUSH
30479: LD_INT 14
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: ST_TO_ADDR
30488: GO 31099
30490: LD_INT 23
30492: DOUBLE
30493: EQUAL
30494: IFTRUE 30498
30496: GO 30524
30498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30499: LD_ADDR_VAR 0 3
30503: PUSH
30504: LD_INT 11
30506: PUSH
30507: LD_INT 12
30509: PUSH
30510: LD_INT 13
30512: PUSH
30513: LD_INT 14
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
30522: GO 31099
30524: LD_INT 24
30526: DOUBLE
30527: EQUAL
30528: IFTRUE 30532
30530: GO 30558
30532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30533: LD_ADDR_VAR 0 3
30537: PUSH
30538: LD_INT 11
30540: PUSH
30541: LD_INT 12
30543: PUSH
30544: LD_INT 13
30546: PUSH
30547: LD_INT 14
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
30556: GO 31099
30558: LD_INT 30
30560: DOUBLE
30561: EQUAL
30562: IFTRUE 30566
30564: GO 30592
30566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: LD_INT 11
30574: PUSH
30575: LD_INT 12
30577: PUSH
30578: LD_INT 13
30580: PUSH
30581: LD_INT 14
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: ST_TO_ADDR
30590: GO 31099
30592: LD_INT 25
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30618
30600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30601: LD_ADDR_VAR 0 3
30605: PUSH
30606: LD_INT 13
30608: PUSH
30609: LD_INT 14
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: ST_TO_ADDR
30616: GO 31099
30618: LD_INT 27
30620: DOUBLE
30621: EQUAL
30622: IFTRUE 30626
30624: GO 30644
30626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30627: LD_ADDR_VAR 0 3
30631: PUSH
30632: LD_INT 13
30634: PUSH
30635: LD_INT 14
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: ST_TO_ADDR
30642: GO 31099
30644: LD_INT 92
30646: DOUBLE
30647: EQUAL
30648: IFTRUE 30652
30650: GO 30678
30652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30653: LD_ADDR_VAR 0 3
30657: PUSH
30658: LD_INT 11
30660: PUSH
30661: LD_INT 12
30663: PUSH
30664: LD_INT 13
30666: PUSH
30667: LD_INT 14
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: ST_TO_ADDR
30676: GO 31099
30678: LD_INT 28
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30704
30686: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 13
30694: PUSH
30695: LD_INT 14
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: ST_TO_ADDR
30702: GO 31099
30704: LD_INT 29
30706: DOUBLE
30707: EQUAL
30708: IFTRUE 30712
30710: GO 30730
30712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30713: LD_ADDR_VAR 0 3
30717: PUSH
30718: LD_INT 13
30720: PUSH
30721: LD_INT 14
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: ST_TO_ADDR
30728: GO 31099
30730: LD_INT 31
30732: DOUBLE
30733: EQUAL
30734: IFTRUE 30738
30736: GO 30756
30738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30739: LD_ADDR_VAR 0 3
30743: PUSH
30744: LD_INT 13
30746: PUSH
30747: LD_INT 14
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: ST_TO_ADDR
30754: GO 31099
30756: LD_INT 26
30758: DOUBLE
30759: EQUAL
30760: IFTRUE 30764
30762: GO 30782
30764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30765: LD_ADDR_VAR 0 3
30769: PUSH
30770: LD_INT 13
30772: PUSH
30773: LD_INT 14
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: ST_TO_ADDR
30780: GO 31099
30782: LD_INT 42
30784: DOUBLE
30785: EQUAL
30786: IFTRUE 30790
30788: GO 30816
30790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30791: LD_ADDR_VAR 0 3
30795: PUSH
30796: LD_INT 21
30798: PUSH
30799: LD_INT 22
30801: PUSH
30802: LD_INT 23
30804: PUSH
30805: LD_INT 24
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: ST_TO_ADDR
30814: GO 31099
30816: LD_INT 43
30818: DOUBLE
30819: EQUAL
30820: IFTRUE 30824
30822: GO 30850
30824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30825: LD_ADDR_VAR 0 3
30829: PUSH
30830: LD_INT 21
30832: PUSH
30833: LD_INT 22
30835: PUSH
30836: LD_INT 23
30838: PUSH
30839: LD_INT 24
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: ST_TO_ADDR
30848: GO 31099
30850: LD_INT 44
30852: DOUBLE
30853: EQUAL
30854: IFTRUE 30858
30856: GO 30884
30858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30859: LD_ADDR_VAR 0 3
30863: PUSH
30864: LD_INT 21
30866: PUSH
30867: LD_INT 22
30869: PUSH
30870: LD_INT 23
30872: PUSH
30873: LD_INT 24
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: ST_TO_ADDR
30882: GO 31099
30884: LD_INT 45
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30918
30892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30893: LD_ADDR_VAR 0 3
30897: PUSH
30898: LD_INT 21
30900: PUSH
30901: LD_INT 22
30903: PUSH
30904: LD_INT 23
30906: PUSH
30907: LD_INT 24
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: ST_TO_ADDR
30916: GO 31099
30918: LD_INT 49
30920: DOUBLE
30921: EQUAL
30922: IFTRUE 30926
30924: GO 30952
30926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30927: LD_ADDR_VAR 0 3
30931: PUSH
30932: LD_INT 21
30934: PUSH
30935: LD_INT 22
30937: PUSH
30938: LD_INT 23
30940: PUSH
30941: LD_INT 24
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
30950: GO 31099
30952: LD_INT 51
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30986
30960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 21
30968: PUSH
30969: LD_INT 22
30971: PUSH
30972: LD_INT 23
30974: PUSH
30975: LD_INT 24
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: ST_TO_ADDR
30984: GO 31099
30986: LD_INT 52
30988: DOUBLE
30989: EQUAL
30990: IFTRUE 30994
30992: GO 31020
30994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30995: LD_ADDR_VAR 0 3
30999: PUSH
31000: LD_INT 21
31002: PUSH
31003: LD_INT 22
31005: PUSH
31006: LD_INT 23
31008: PUSH
31009: LD_INT 24
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
31018: GO 31099
31020: LD_INT 53
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31046
31028: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31029: LD_ADDR_VAR 0 3
31033: PUSH
31034: LD_INT 23
31036: PUSH
31037: LD_INT 24
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: ST_TO_ADDR
31044: GO 31099
31046: LD_INT 46
31048: DOUBLE
31049: EQUAL
31050: IFTRUE 31054
31052: GO 31072
31054: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: LD_INT 23
31062: PUSH
31063: LD_INT 24
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: ST_TO_ADDR
31070: GO 31099
31072: LD_INT 47
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31098
31080: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_INT 23
31088: PUSH
31089: LD_INT 24
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: ST_TO_ADDR
31096: GO 31099
31098: POP
// result := ( chassis in result ) ;
31099: LD_ADDR_VAR 0 3
31103: PUSH
31104: LD_VAR 0 1
31108: PUSH
31109: LD_VAR 0 3
31113: IN
31114: ST_TO_ADDR
// end ;
31115: LD_VAR 0 3
31119: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
31124: PPUSH
31125: PPUSH
31126: PPUSH
31127: PPUSH
31128: PPUSH
// result := array ;
31129: LD_ADDR_VAR 0 5
31133: PUSH
31134: LD_VAR 0 1
31138: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31139: LD_VAR 0 1
31143: NOT
31144: PUSH
31145: LD_VAR 0 2
31149: NOT
31150: OR
31151: PUSH
31152: LD_VAR 0 3
31156: NOT
31157: OR
31158: PUSH
31159: LD_VAR 0 2
31163: PUSH
31164: LD_VAR 0 1
31168: GREATER
31169: OR
31170: PUSH
31171: LD_VAR 0 3
31175: PUSH
31176: LD_VAR 0 1
31180: GREATER
31181: OR
31182: IFFALSE 31186
// exit ;
31184: GO 31482
// if direction then
31186: LD_VAR 0 4
31190: IFFALSE 31254
// begin d := 1 ;
31192: LD_ADDR_VAR 0 9
31196: PUSH
31197: LD_INT 1
31199: ST_TO_ADDR
// if i_from > i_to then
31200: LD_VAR 0 2
31204: PUSH
31205: LD_VAR 0 3
31209: GREATER
31210: IFFALSE 31236
// length := ( array - i_from ) + i_to else
31212: LD_ADDR_VAR 0 11
31216: PUSH
31217: LD_VAR 0 1
31221: PUSH
31222: LD_VAR 0 2
31226: MINUS
31227: PUSH
31228: LD_VAR 0 3
31232: PLUS
31233: ST_TO_ADDR
31234: GO 31252
// length := i_to - i_from ;
31236: LD_ADDR_VAR 0 11
31240: PUSH
31241: LD_VAR 0 3
31245: PUSH
31246: LD_VAR 0 2
31250: MINUS
31251: ST_TO_ADDR
// end else
31252: GO 31315
// begin d := - 1 ;
31254: LD_ADDR_VAR 0 9
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: ST_TO_ADDR
// if i_from > i_to then
31263: LD_VAR 0 2
31267: PUSH
31268: LD_VAR 0 3
31272: GREATER
31273: IFFALSE 31293
// length := i_from - i_to else
31275: LD_ADDR_VAR 0 11
31279: PUSH
31280: LD_VAR 0 2
31284: PUSH
31285: LD_VAR 0 3
31289: MINUS
31290: ST_TO_ADDR
31291: GO 31315
// length := ( array - i_to ) + i_from ;
31293: LD_ADDR_VAR 0 11
31297: PUSH
31298: LD_VAR 0 1
31302: PUSH
31303: LD_VAR 0 3
31307: MINUS
31308: PUSH
31309: LD_VAR 0 2
31313: PLUS
31314: ST_TO_ADDR
// end ; if not length then
31315: LD_VAR 0 11
31319: NOT
31320: IFFALSE 31324
// exit ;
31322: GO 31482
// tmp := array ;
31324: LD_ADDR_VAR 0 10
31328: PUSH
31329: LD_VAR 0 1
31333: ST_TO_ADDR
// for i = 1 to length do
31334: LD_ADDR_VAR 0 6
31338: PUSH
31339: DOUBLE
31340: LD_INT 1
31342: DEC
31343: ST_TO_ADDR
31344: LD_VAR 0 11
31348: PUSH
31349: FOR_TO
31350: IFFALSE 31470
// begin for j = 1 to array do
31352: LD_ADDR_VAR 0 7
31356: PUSH
31357: DOUBLE
31358: LD_INT 1
31360: DEC
31361: ST_TO_ADDR
31362: LD_VAR 0 1
31366: PUSH
31367: FOR_TO
31368: IFFALSE 31456
// begin k := j + d ;
31370: LD_ADDR_VAR 0 8
31374: PUSH
31375: LD_VAR 0 7
31379: PUSH
31380: LD_VAR 0 9
31384: PLUS
31385: ST_TO_ADDR
// if k > array then
31386: LD_VAR 0 8
31390: PUSH
31391: LD_VAR 0 1
31395: GREATER
31396: IFFALSE 31406
// k := 1 ;
31398: LD_ADDR_VAR 0 8
31402: PUSH
31403: LD_INT 1
31405: ST_TO_ADDR
// if not k then
31406: LD_VAR 0 8
31410: NOT
31411: IFFALSE 31423
// k := array ;
31413: LD_ADDR_VAR 0 8
31417: PUSH
31418: LD_VAR 0 1
31422: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31423: LD_ADDR_VAR 0 10
31427: PUSH
31428: LD_VAR 0 10
31432: PPUSH
31433: LD_VAR 0 8
31437: PPUSH
31438: LD_VAR 0 1
31442: PUSH
31443: LD_VAR 0 7
31447: ARRAY
31448: PPUSH
31449: CALL_OW 1
31453: ST_TO_ADDR
// end ;
31454: GO 31367
31456: POP
31457: POP
// array := tmp ;
31458: LD_ADDR_VAR 0 1
31462: PUSH
31463: LD_VAR 0 10
31467: ST_TO_ADDR
// end ;
31468: GO 31349
31470: POP
31471: POP
// result := array ;
31472: LD_ADDR_VAR 0 5
31476: PUSH
31477: LD_VAR 0 1
31481: ST_TO_ADDR
// end ;
31482: LD_VAR 0 5
31486: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
// result := 0 ;
31491: LD_ADDR_VAR 0 3
31495: PUSH
31496: LD_INT 0
31498: ST_TO_ADDR
// if not array or not value in array then
31499: LD_VAR 0 1
31503: NOT
31504: PUSH
31505: LD_VAR 0 2
31509: PUSH
31510: LD_VAR 0 1
31514: IN
31515: NOT
31516: OR
31517: IFFALSE 31521
// exit ;
31519: GO 31575
// for i = 1 to array do
31521: LD_ADDR_VAR 0 4
31525: PUSH
31526: DOUBLE
31527: LD_INT 1
31529: DEC
31530: ST_TO_ADDR
31531: LD_VAR 0 1
31535: PUSH
31536: FOR_TO
31537: IFFALSE 31573
// if value = array [ i ] then
31539: LD_VAR 0 2
31543: PUSH
31544: LD_VAR 0 1
31548: PUSH
31549: LD_VAR 0 4
31553: ARRAY
31554: EQUAL
31555: IFFALSE 31571
// begin result := i ;
31557: LD_ADDR_VAR 0 3
31561: PUSH
31562: LD_VAR 0 4
31566: ST_TO_ADDR
// exit ;
31567: POP
31568: POP
31569: GO 31575
// end ;
31571: GO 31536
31573: POP
31574: POP
// end ;
31575: LD_VAR 0 3
31579: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31580: LD_INT 0
31582: PPUSH
// vc_chassis := chassis ;
31583: LD_ADDR_OWVAR 37
31587: PUSH
31588: LD_VAR 0 1
31592: ST_TO_ADDR
// vc_engine := engine ;
31593: LD_ADDR_OWVAR 39
31597: PUSH
31598: LD_VAR 0 2
31602: ST_TO_ADDR
// vc_control := control ;
31603: LD_ADDR_OWVAR 38
31607: PUSH
31608: LD_VAR 0 3
31612: ST_TO_ADDR
// vc_weapon := weapon ;
31613: LD_ADDR_OWVAR 40
31617: PUSH
31618: LD_VAR 0 4
31622: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31623: LD_ADDR_OWVAR 41
31627: PUSH
31628: LD_VAR 0 5
31632: ST_TO_ADDR
// end ;
31633: LD_VAR 0 6
31637: RET
// export function WantPlant ( unit ) ; var task ; begin
31638: LD_INT 0
31640: PPUSH
31641: PPUSH
// result := false ;
31642: LD_ADDR_VAR 0 2
31646: PUSH
31647: LD_INT 0
31649: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31650: LD_ADDR_VAR 0 3
31654: PUSH
31655: LD_VAR 0 1
31659: PPUSH
31660: CALL_OW 437
31664: ST_TO_ADDR
// if task then
31665: LD_VAR 0 3
31669: IFFALSE 31697
// if task [ 1 ] [ 1 ] = p then
31671: LD_VAR 0 3
31675: PUSH
31676: LD_INT 1
31678: ARRAY
31679: PUSH
31680: LD_INT 1
31682: ARRAY
31683: PUSH
31684: LD_STRING p
31686: EQUAL
31687: IFFALSE 31697
// result := true ;
31689: LD_ADDR_VAR 0 2
31693: PUSH
31694: LD_INT 1
31696: ST_TO_ADDR
// end ;
31697: LD_VAR 0 2
31701: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31702: LD_INT 0
31704: PPUSH
31705: PPUSH
31706: PPUSH
31707: PPUSH
// if pos < 1 then
31708: LD_VAR 0 2
31712: PUSH
31713: LD_INT 1
31715: LESS
31716: IFFALSE 31720
// exit ;
31718: GO 32023
// if pos = 1 then
31720: LD_VAR 0 2
31724: PUSH
31725: LD_INT 1
31727: EQUAL
31728: IFFALSE 31761
// result := Replace ( arr , pos [ 1 ] , value ) else
31730: LD_ADDR_VAR 0 4
31734: PUSH
31735: LD_VAR 0 1
31739: PPUSH
31740: LD_VAR 0 2
31744: PUSH
31745: LD_INT 1
31747: ARRAY
31748: PPUSH
31749: LD_VAR 0 3
31753: PPUSH
31754: CALL_OW 1
31758: ST_TO_ADDR
31759: GO 32023
// begin tmp := arr ;
31761: LD_ADDR_VAR 0 6
31765: PUSH
31766: LD_VAR 0 1
31770: ST_TO_ADDR
// s_arr := [ tmp ] ;
31771: LD_ADDR_VAR 0 7
31775: PUSH
31776: LD_VAR 0 6
31780: PUSH
31781: EMPTY
31782: LIST
31783: ST_TO_ADDR
// for i = 1 to pos - 1 do
31784: LD_ADDR_VAR 0 5
31788: PUSH
31789: DOUBLE
31790: LD_INT 1
31792: DEC
31793: ST_TO_ADDR
31794: LD_VAR 0 2
31798: PUSH
31799: LD_INT 1
31801: MINUS
31802: PUSH
31803: FOR_TO
31804: IFFALSE 31849
// begin tmp := tmp [ pos [ i ] ] ;
31806: LD_ADDR_VAR 0 6
31810: PUSH
31811: LD_VAR 0 6
31815: PUSH
31816: LD_VAR 0 2
31820: PUSH
31821: LD_VAR 0 5
31825: ARRAY
31826: ARRAY
31827: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31828: LD_ADDR_VAR 0 7
31832: PUSH
31833: LD_VAR 0 7
31837: PUSH
31838: LD_VAR 0 6
31842: PUSH
31843: EMPTY
31844: LIST
31845: ADD
31846: ST_TO_ADDR
// end ;
31847: GO 31803
31849: POP
31850: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31851: LD_ADDR_VAR 0 6
31855: PUSH
31856: LD_VAR 0 6
31860: PPUSH
31861: LD_VAR 0 2
31865: PUSH
31866: LD_VAR 0 2
31870: ARRAY
31871: PPUSH
31872: LD_VAR 0 3
31876: PPUSH
31877: CALL_OW 1
31881: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31882: LD_ADDR_VAR 0 7
31886: PUSH
31887: LD_VAR 0 7
31891: PPUSH
31892: LD_VAR 0 7
31896: PPUSH
31897: LD_VAR 0 6
31901: PPUSH
31902: CALL_OW 1
31906: ST_TO_ADDR
// for i = s_arr downto 2 do
31907: LD_ADDR_VAR 0 5
31911: PUSH
31912: DOUBLE
31913: LD_VAR 0 7
31917: INC
31918: ST_TO_ADDR
31919: LD_INT 2
31921: PUSH
31922: FOR_DOWNTO
31923: IFFALSE 32007
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31925: LD_ADDR_VAR 0 6
31929: PUSH
31930: LD_VAR 0 7
31934: PUSH
31935: LD_VAR 0 5
31939: PUSH
31940: LD_INT 1
31942: MINUS
31943: ARRAY
31944: PPUSH
31945: LD_VAR 0 2
31949: PUSH
31950: LD_VAR 0 5
31954: PUSH
31955: LD_INT 1
31957: MINUS
31958: ARRAY
31959: PPUSH
31960: LD_VAR 0 7
31964: PUSH
31965: LD_VAR 0 5
31969: ARRAY
31970: PPUSH
31971: CALL_OW 1
31975: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31976: LD_ADDR_VAR 0 7
31980: PUSH
31981: LD_VAR 0 7
31985: PPUSH
31986: LD_VAR 0 5
31990: PUSH
31991: LD_INT 1
31993: MINUS
31994: PPUSH
31995: LD_VAR 0 6
31999: PPUSH
32000: CALL_OW 1
32004: ST_TO_ADDR
// end ;
32005: GO 31922
32007: POP
32008: POP
// result := s_arr [ 1 ] ;
32009: LD_ADDR_VAR 0 4
32013: PUSH
32014: LD_VAR 0 7
32018: PUSH
32019: LD_INT 1
32021: ARRAY
32022: ST_TO_ADDR
// end ; end ;
32023: LD_VAR 0 4
32027: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32028: LD_INT 0
32030: PPUSH
32031: PPUSH
// if not list then
32032: LD_VAR 0 1
32036: NOT
32037: IFFALSE 32041
// exit ;
32039: GO 32132
// i := list [ pos1 ] ;
32041: LD_ADDR_VAR 0 5
32045: PUSH
32046: LD_VAR 0 1
32050: PUSH
32051: LD_VAR 0 2
32055: ARRAY
32056: ST_TO_ADDR
// if not i then
32057: LD_VAR 0 5
32061: NOT
32062: IFFALSE 32066
// exit ;
32064: GO 32132
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32066: LD_ADDR_VAR 0 1
32070: PUSH
32071: LD_VAR 0 1
32075: PPUSH
32076: LD_VAR 0 2
32080: PPUSH
32081: LD_VAR 0 1
32085: PUSH
32086: LD_VAR 0 3
32090: ARRAY
32091: PPUSH
32092: CALL_OW 1
32096: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32097: LD_ADDR_VAR 0 1
32101: PUSH
32102: LD_VAR 0 1
32106: PPUSH
32107: LD_VAR 0 3
32111: PPUSH
32112: LD_VAR 0 5
32116: PPUSH
32117: CALL_OW 1
32121: ST_TO_ADDR
// result := list ;
32122: LD_ADDR_VAR 0 4
32126: PUSH
32127: LD_VAR 0 1
32131: ST_TO_ADDR
// end ;
32132: LD_VAR 0 4
32136: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32137: LD_INT 0
32139: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32140: LD_ADDR_VAR 0 5
32144: PUSH
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 250
32154: PPUSH
32155: LD_VAR 0 1
32159: PPUSH
32160: CALL_OW 251
32164: PPUSH
32165: LD_VAR 0 2
32169: PPUSH
32170: LD_VAR 0 3
32174: PPUSH
32175: LD_VAR 0 4
32179: PPUSH
32180: CALL 32190 0 5
32184: ST_TO_ADDR
// end ;
32185: LD_VAR 0 5
32189: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32190: LD_INT 0
32192: PPUSH
32193: PPUSH
32194: PPUSH
32195: PPUSH
// if not list then
32196: LD_VAR 0 3
32200: NOT
32201: IFFALSE 32205
// exit ;
32203: GO 32593
// result := [ ] ;
32205: LD_ADDR_VAR 0 6
32209: PUSH
32210: EMPTY
32211: ST_TO_ADDR
// for i in list do
32212: LD_ADDR_VAR 0 7
32216: PUSH
32217: LD_VAR 0 3
32221: PUSH
32222: FOR_IN
32223: IFFALSE 32425
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32225: LD_ADDR_VAR 0 9
32229: PUSH
32230: LD_VAR 0 7
32234: PPUSH
32235: LD_VAR 0 1
32239: PPUSH
32240: LD_VAR 0 2
32244: PPUSH
32245: CALL_OW 297
32249: ST_TO_ADDR
// if not result then
32250: LD_VAR 0 6
32254: NOT
32255: IFFALSE 32281
// result := [ [ i , tmp ] ] else
32257: LD_ADDR_VAR 0 6
32261: PUSH
32262: LD_VAR 0 7
32266: PUSH
32267: LD_VAR 0 9
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: EMPTY
32277: LIST
32278: ST_TO_ADDR
32279: GO 32423
// begin if result [ result ] [ 2 ] < tmp then
32281: LD_VAR 0 6
32285: PUSH
32286: LD_VAR 0 6
32290: ARRAY
32291: PUSH
32292: LD_INT 2
32294: ARRAY
32295: PUSH
32296: LD_VAR 0 9
32300: LESS
32301: IFFALSE 32343
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32303: LD_ADDR_VAR 0 6
32307: PUSH
32308: LD_VAR 0 6
32312: PPUSH
32313: LD_VAR 0 6
32317: PUSH
32318: LD_INT 1
32320: PLUS
32321: PPUSH
32322: LD_VAR 0 7
32326: PUSH
32327: LD_VAR 0 9
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PPUSH
32336: CALL_OW 2
32340: ST_TO_ADDR
32341: GO 32423
// for j = 1 to result do
32343: LD_ADDR_VAR 0 8
32347: PUSH
32348: DOUBLE
32349: LD_INT 1
32351: DEC
32352: ST_TO_ADDR
32353: LD_VAR 0 6
32357: PUSH
32358: FOR_TO
32359: IFFALSE 32421
// begin if tmp < result [ j ] [ 2 ] then
32361: LD_VAR 0 9
32365: PUSH
32366: LD_VAR 0 6
32370: PUSH
32371: LD_VAR 0 8
32375: ARRAY
32376: PUSH
32377: LD_INT 2
32379: ARRAY
32380: LESS
32381: IFFALSE 32419
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32383: LD_ADDR_VAR 0 6
32387: PUSH
32388: LD_VAR 0 6
32392: PPUSH
32393: LD_VAR 0 8
32397: PPUSH
32398: LD_VAR 0 7
32402: PUSH
32403: LD_VAR 0 9
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PPUSH
32412: CALL_OW 2
32416: ST_TO_ADDR
// break ;
32417: GO 32421
// end ; end ;
32419: GO 32358
32421: POP
32422: POP
// end ; end ;
32423: GO 32222
32425: POP
32426: POP
// if result and not asc then
32427: LD_VAR 0 6
32431: PUSH
32432: LD_VAR 0 4
32436: NOT
32437: AND
32438: IFFALSE 32513
// begin tmp := result ;
32440: LD_ADDR_VAR 0 9
32444: PUSH
32445: LD_VAR 0 6
32449: ST_TO_ADDR
// for i = tmp downto 1 do
32450: LD_ADDR_VAR 0 7
32454: PUSH
32455: DOUBLE
32456: LD_VAR 0 9
32460: INC
32461: ST_TO_ADDR
32462: LD_INT 1
32464: PUSH
32465: FOR_DOWNTO
32466: IFFALSE 32511
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32468: LD_ADDR_VAR 0 6
32472: PUSH
32473: LD_VAR 0 6
32477: PPUSH
32478: LD_VAR 0 9
32482: PUSH
32483: LD_VAR 0 7
32487: MINUS
32488: PUSH
32489: LD_INT 1
32491: PLUS
32492: PPUSH
32493: LD_VAR 0 9
32497: PUSH
32498: LD_VAR 0 7
32502: ARRAY
32503: PPUSH
32504: CALL_OW 1
32508: ST_TO_ADDR
32509: GO 32465
32511: POP
32512: POP
// end ; tmp := [ ] ;
32513: LD_ADDR_VAR 0 9
32517: PUSH
32518: EMPTY
32519: ST_TO_ADDR
// if mode then
32520: LD_VAR 0 5
32524: IFFALSE 32593
// begin for i = 1 to result do
32526: LD_ADDR_VAR 0 7
32530: PUSH
32531: DOUBLE
32532: LD_INT 1
32534: DEC
32535: ST_TO_ADDR
32536: LD_VAR 0 6
32540: PUSH
32541: FOR_TO
32542: IFFALSE 32581
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32544: LD_ADDR_VAR 0 9
32548: PUSH
32549: LD_VAR 0 9
32553: PPUSH
32554: LD_VAR 0 7
32558: PPUSH
32559: LD_VAR 0 6
32563: PUSH
32564: LD_VAR 0 7
32568: ARRAY
32569: PUSH
32570: LD_INT 1
32572: ARRAY
32573: PPUSH
32574: CALL_OW 1
32578: ST_TO_ADDR
32579: GO 32541
32581: POP
32582: POP
// result := tmp ;
32583: LD_ADDR_VAR 0 6
32587: PUSH
32588: LD_VAR 0 9
32592: ST_TO_ADDR
// end ; end ;
32593: LD_VAR 0 6
32597: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32598: LD_INT 0
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32606: LD_ADDR_VAR 0 5
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: EMPTY
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: ST_TO_ADDR
// if not x or not y then
32628: LD_VAR 0 2
32632: NOT
32633: PUSH
32634: LD_VAR 0 3
32638: NOT
32639: OR
32640: IFFALSE 32644
// exit ;
32642: GO 34294
// if not range then
32644: LD_VAR 0 4
32648: NOT
32649: IFFALSE 32659
// range := 10 ;
32651: LD_ADDR_VAR 0 4
32655: PUSH
32656: LD_INT 10
32658: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32659: LD_ADDR_VAR 0 8
32663: PUSH
32664: LD_INT 81
32666: PUSH
32667: LD_VAR 0 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 92
32678: PUSH
32679: LD_VAR 0 2
32683: PUSH
32684: LD_VAR 0 3
32688: PUSH
32689: LD_VAR 0 4
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 3
32702: PUSH
32703: LD_INT 21
32705: PUSH
32706: LD_INT 3
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: PPUSH
32722: CALL_OW 69
32726: ST_TO_ADDR
// if not tmp then
32727: LD_VAR 0 8
32731: NOT
32732: IFFALSE 32736
// exit ;
32734: GO 34294
// for i in tmp do
32736: LD_ADDR_VAR 0 6
32740: PUSH
32741: LD_VAR 0 8
32745: PUSH
32746: FOR_IN
32747: IFFALSE 34269
// begin points := [ 0 , 0 , 0 ] ;
32749: LD_ADDR_VAR 0 9
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: ST_TO_ADDR
// bpoints := 1 ;
32768: LD_ADDR_VAR 0 10
32772: PUSH
32773: LD_INT 1
32775: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32776: LD_VAR 0 6
32780: PPUSH
32781: CALL_OW 247
32785: PUSH
32786: LD_INT 1
32788: DOUBLE
32789: EQUAL
32790: IFTRUE 32794
32792: GO 33372
32794: POP
// begin if GetClass ( i ) = 1 then
32795: LD_VAR 0 6
32799: PPUSH
32800: CALL_OW 257
32804: PUSH
32805: LD_INT 1
32807: EQUAL
32808: IFFALSE 32829
// points := [ 10 , 5 , 3 ] ;
32810: LD_ADDR_VAR 0 9
32814: PUSH
32815: LD_INT 10
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: LD_INT 3
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32829: LD_VAR 0 6
32833: PPUSH
32834: CALL_OW 257
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: LD_INT 3
32844: PUSH
32845: LD_INT 4
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: IN
32853: IFFALSE 32874
// points := [ 3 , 2 , 1 ] ;
32855: LD_ADDR_VAR 0 9
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32874: LD_VAR 0 6
32878: PPUSH
32879: CALL_OW 257
32883: PUSH
32884: LD_INT 5
32886: EQUAL
32887: IFFALSE 32908
// points := [ 130 , 5 , 2 ] ;
32889: LD_ADDR_VAR 0 9
32893: PUSH
32894: LD_INT 130
32896: PUSH
32897: LD_INT 5
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32908: LD_VAR 0 6
32912: PPUSH
32913: CALL_OW 257
32917: PUSH
32918: LD_INT 8
32920: EQUAL
32921: IFFALSE 32942
// points := [ 35 , 35 , 30 ] ;
32923: LD_ADDR_VAR 0 9
32927: PUSH
32928: LD_INT 35
32930: PUSH
32931: LD_INT 35
32933: PUSH
32934: LD_INT 30
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32942: LD_VAR 0 6
32946: PPUSH
32947: CALL_OW 257
32951: PUSH
32952: LD_INT 9
32954: EQUAL
32955: IFFALSE 32976
// points := [ 20 , 55 , 40 ] ;
32957: LD_ADDR_VAR 0 9
32961: PUSH
32962: LD_INT 20
32964: PUSH
32965: LD_INT 55
32967: PUSH
32968: LD_INT 40
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32976: LD_VAR 0 6
32980: PPUSH
32981: CALL_OW 257
32985: PUSH
32986: LD_INT 12
32988: PUSH
32989: LD_INT 16
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: IN
32996: IFFALSE 33017
// points := [ 5 , 3 , 2 ] ;
32998: LD_ADDR_VAR 0 9
33002: PUSH
33003: LD_INT 5
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: LIST
33016: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33017: LD_VAR 0 6
33021: PPUSH
33022: CALL_OW 257
33026: PUSH
33027: LD_INT 17
33029: EQUAL
33030: IFFALSE 33051
// points := [ 100 , 50 , 75 ] ;
33032: LD_ADDR_VAR 0 9
33036: PUSH
33037: LD_INT 100
33039: PUSH
33040: LD_INT 50
33042: PUSH
33043: LD_INT 75
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: LIST
33050: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33051: LD_VAR 0 6
33055: PPUSH
33056: CALL_OW 257
33060: PUSH
33061: LD_INT 15
33063: EQUAL
33064: IFFALSE 33085
// points := [ 10 , 5 , 3 ] ;
33066: LD_ADDR_VAR 0 9
33070: PUSH
33071: LD_INT 10
33073: PUSH
33074: LD_INT 5
33076: PUSH
33077: LD_INT 3
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33085: LD_VAR 0 6
33089: PPUSH
33090: CALL_OW 257
33094: PUSH
33095: LD_INT 14
33097: EQUAL
33098: IFFALSE 33119
// points := [ 10 , 0 , 0 ] ;
33100: LD_ADDR_VAR 0 9
33104: PUSH
33105: LD_INT 10
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33119: LD_VAR 0 6
33123: PPUSH
33124: CALL_OW 257
33128: PUSH
33129: LD_INT 11
33131: EQUAL
33132: IFFALSE 33153
// points := [ 30 , 10 , 5 ] ;
33134: LD_ADDR_VAR 0 9
33138: PUSH
33139: LD_INT 30
33141: PUSH
33142: LD_INT 10
33144: PUSH
33145: LD_INT 5
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33153: LD_VAR 0 1
33157: PPUSH
33158: LD_INT 5
33160: PPUSH
33161: CALL_OW 321
33165: PUSH
33166: LD_INT 2
33168: EQUAL
33169: IFFALSE 33186
// bpoints := bpoints * 1.8 ;
33171: LD_ADDR_VAR 0 10
33175: PUSH
33176: LD_VAR 0 10
33180: PUSH
33181: LD_REAL  1.80000000000000E+0000
33184: MUL
33185: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33186: LD_VAR 0 6
33190: PPUSH
33191: CALL_OW 257
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 3
33204: PUSH
33205: LD_INT 4
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: IN
33214: PUSH
33215: LD_VAR 0 1
33219: PPUSH
33220: LD_INT 51
33222: PPUSH
33223: CALL_OW 321
33227: PUSH
33228: LD_INT 2
33230: EQUAL
33231: AND
33232: IFFALSE 33249
// bpoints := bpoints * 1.2 ;
33234: LD_ADDR_VAR 0 10
33238: PUSH
33239: LD_VAR 0 10
33243: PUSH
33244: LD_REAL  1.20000000000000E+0000
33247: MUL
33248: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33249: LD_VAR 0 6
33253: PPUSH
33254: CALL_OW 257
33258: PUSH
33259: LD_INT 5
33261: PUSH
33262: LD_INT 7
33264: PUSH
33265: LD_INT 9
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: IN
33273: PUSH
33274: LD_VAR 0 1
33278: PPUSH
33279: LD_INT 52
33281: PPUSH
33282: CALL_OW 321
33286: PUSH
33287: LD_INT 2
33289: EQUAL
33290: AND
33291: IFFALSE 33308
// bpoints := bpoints * 1.5 ;
33293: LD_ADDR_VAR 0 10
33297: PUSH
33298: LD_VAR 0 10
33302: PUSH
33303: LD_REAL  1.50000000000000E+0000
33306: MUL
33307: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33308: LD_VAR 0 1
33312: PPUSH
33313: LD_INT 66
33315: PPUSH
33316: CALL_OW 321
33320: PUSH
33321: LD_INT 2
33323: EQUAL
33324: IFFALSE 33341
// bpoints := bpoints * 1.1 ;
33326: LD_ADDR_VAR 0 10
33330: PUSH
33331: LD_VAR 0 10
33335: PUSH
33336: LD_REAL  1.10000000000000E+0000
33339: MUL
33340: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33341: LD_ADDR_VAR 0 10
33345: PUSH
33346: LD_VAR 0 10
33350: PUSH
33351: LD_VAR 0 6
33355: PPUSH
33356: LD_INT 1
33358: PPUSH
33359: CALL_OW 259
33363: PUSH
33364: LD_REAL  1.15000000000000E+0000
33367: MUL
33368: MUL
33369: ST_TO_ADDR
// end ; unit_vehicle :
33370: GO 34198
33372: LD_INT 2
33374: DOUBLE
33375: EQUAL
33376: IFTRUE 33380
33378: GO 34186
33380: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33381: LD_VAR 0 6
33385: PPUSH
33386: CALL_OW 264
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: LD_INT 42
33396: PUSH
33397: LD_INT 24
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: IN
33405: IFFALSE 33426
// points := [ 25 , 5 , 3 ] ;
33407: LD_ADDR_VAR 0 9
33411: PUSH
33412: LD_INT 25
33414: PUSH
33415: LD_INT 5
33417: PUSH
33418: LD_INT 3
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33426: LD_VAR 0 6
33430: PPUSH
33431: CALL_OW 264
33435: PUSH
33436: LD_INT 4
33438: PUSH
33439: LD_INT 43
33441: PUSH
33442: LD_INT 25
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: LIST
33449: IN
33450: IFFALSE 33471
// points := [ 40 , 15 , 5 ] ;
33452: LD_ADDR_VAR 0 9
33456: PUSH
33457: LD_INT 40
33459: PUSH
33460: LD_INT 15
33462: PUSH
33463: LD_INT 5
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33471: LD_VAR 0 6
33475: PPUSH
33476: CALL_OW 264
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: LD_INT 23
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: IN
33491: IFFALSE 33512
// points := [ 7 , 25 , 8 ] ;
33493: LD_ADDR_VAR 0 9
33497: PUSH
33498: LD_INT 7
33500: PUSH
33501: LD_INT 25
33503: PUSH
33504: LD_INT 8
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: LIST
33511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33512: LD_VAR 0 6
33516: PPUSH
33517: CALL_OW 264
33521: PUSH
33522: LD_INT 5
33524: PUSH
33525: LD_INT 27
33527: PUSH
33528: LD_INT 44
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: IN
33536: IFFALSE 33557
// points := [ 14 , 50 , 16 ] ;
33538: LD_ADDR_VAR 0 9
33542: PUSH
33543: LD_INT 14
33545: PUSH
33546: LD_INT 50
33548: PUSH
33549: LD_INT 16
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33557: LD_VAR 0 6
33561: PPUSH
33562: CALL_OW 264
33566: PUSH
33567: LD_INT 6
33569: PUSH
33570: LD_INT 46
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: IN
33577: IFFALSE 33598
// points := [ 32 , 120 , 70 ] ;
33579: LD_ADDR_VAR 0 9
33583: PUSH
33584: LD_INT 32
33586: PUSH
33587: LD_INT 120
33589: PUSH
33590: LD_INT 70
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33598: LD_VAR 0 6
33602: PPUSH
33603: CALL_OW 264
33607: PUSH
33608: LD_INT 7
33610: PUSH
33611: LD_INT 28
33613: PUSH
33614: LD_INT 45
33616: PUSH
33617: LD_INT 92
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: IN
33626: IFFALSE 33647
// points := [ 35 , 20 , 45 ] ;
33628: LD_ADDR_VAR 0 9
33632: PUSH
33633: LD_INT 35
33635: PUSH
33636: LD_INT 20
33638: PUSH
33639: LD_INT 45
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33647: LD_VAR 0 6
33651: PPUSH
33652: CALL_OW 264
33656: PUSH
33657: LD_INT 47
33659: PUSH
33660: EMPTY
33661: LIST
33662: IN
33663: IFFALSE 33684
// points := [ 67 , 45 , 75 ] ;
33665: LD_ADDR_VAR 0 9
33669: PUSH
33670: LD_INT 67
33672: PUSH
33673: LD_INT 45
33675: PUSH
33676: LD_INT 75
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33684: LD_VAR 0 6
33688: PPUSH
33689: CALL_OW 264
33693: PUSH
33694: LD_INT 26
33696: PUSH
33697: EMPTY
33698: LIST
33699: IN
33700: IFFALSE 33721
// points := [ 120 , 30 , 80 ] ;
33702: LD_ADDR_VAR 0 9
33706: PUSH
33707: LD_INT 120
33709: PUSH
33710: LD_INT 30
33712: PUSH
33713: LD_INT 80
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33721: LD_VAR 0 6
33725: PPUSH
33726: CALL_OW 264
33730: PUSH
33731: LD_INT 22
33733: PUSH
33734: EMPTY
33735: LIST
33736: IN
33737: IFFALSE 33758
// points := [ 40 , 1 , 1 ] ;
33739: LD_ADDR_VAR 0 9
33743: PUSH
33744: LD_INT 40
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33758: LD_VAR 0 6
33762: PPUSH
33763: CALL_OW 264
33767: PUSH
33768: LD_INT 29
33770: PUSH
33771: EMPTY
33772: LIST
33773: IN
33774: IFFALSE 33795
// points := [ 70 , 200 , 400 ] ;
33776: LD_ADDR_VAR 0 9
33780: PUSH
33781: LD_INT 70
33783: PUSH
33784: LD_INT 200
33786: PUSH
33787: LD_INT 400
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33795: LD_VAR 0 6
33799: PPUSH
33800: CALL_OW 264
33804: PUSH
33805: LD_INT 14
33807: PUSH
33808: LD_INT 53
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: IN
33815: IFFALSE 33836
// points := [ 40 , 10 , 20 ] ;
33817: LD_ADDR_VAR 0 9
33821: PUSH
33822: LD_INT 40
33824: PUSH
33825: LD_INT 10
33827: PUSH
33828: LD_INT 20
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33836: LD_VAR 0 6
33840: PPUSH
33841: CALL_OW 264
33845: PUSH
33846: LD_INT 9
33848: PUSH
33849: EMPTY
33850: LIST
33851: IN
33852: IFFALSE 33873
// points := [ 5 , 70 , 20 ] ;
33854: LD_ADDR_VAR 0 9
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: LD_INT 70
33864: PUSH
33865: LD_INT 20
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33873: LD_VAR 0 6
33877: PPUSH
33878: CALL_OW 264
33882: PUSH
33883: LD_INT 10
33885: PUSH
33886: EMPTY
33887: LIST
33888: IN
33889: IFFALSE 33910
// points := [ 35 , 110 , 70 ] ;
33891: LD_ADDR_VAR 0 9
33895: PUSH
33896: LD_INT 35
33898: PUSH
33899: LD_INT 110
33901: PUSH
33902: LD_INT 70
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33910: LD_VAR 0 6
33914: PPUSH
33915: CALL_OW 265
33919: PUSH
33920: LD_INT 25
33922: EQUAL
33923: IFFALSE 33944
// points := [ 80 , 65 , 100 ] ;
33925: LD_ADDR_VAR 0 9
33929: PUSH
33930: LD_INT 80
33932: PUSH
33933: LD_INT 65
33935: PUSH
33936: LD_INT 100
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33944: LD_VAR 0 6
33948: PPUSH
33949: CALL_OW 263
33953: PUSH
33954: LD_INT 1
33956: EQUAL
33957: IFFALSE 33992
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33959: LD_ADDR_VAR 0 10
33963: PUSH
33964: LD_VAR 0 10
33968: PUSH
33969: LD_VAR 0 6
33973: PPUSH
33974: CALL_OW 311
33978: PPUSH
33979: LD_INT 3
33981: PPUSH
33982: CALL_OW 259
33986: PUSH
33987: LD_INT 4
33989: MUL
33990: MUL
33991: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33992: LD_VAR 0 6
33996: PPUSH
33997: CALL_OW 263
34001: PUSH
34002: LD_INT 2
34004: EQUAL
34005: IFFALSE 34056
// begin j := IsControledBy ( i ) ;
34007: LD_ADDR_VAR 0 7
34011: PUSH
34012: LD_VAR 0 6
34016: PPUSH
34017: CALL_OW 312
34021: ST_TO_ADDR
// if j then
34022: LD_VAR 0 7
34026: IFFALSE 34056
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34028: LD_ADDR_VAR 0 10
34032: PUSH
34033: LD_VAR 0 10
34037: PUSH
34038: LD_VAR 0 7
34042: PPUSH
34043: LD_INT 3
34045: PPUSH
34046: CALL_OW 259
34050: PUSH
34051: LD_INT 3
34053: MUL
34054: MUL
34055: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34056: LD_VAR 0 6
34060: PPUSH
34061: CALL_OW 264
34065: PUSH
34066: LD_INT 5
34068: PUSH
34069: LD_INT 6
34071: PUSH
34072: LD_INT 46
34074: PUSH
34075: LD_INT 44
34077: PUSH
34078: LD_INT 47
34080: PUSH
34081: LD_INT 45
34083: PUSH
34084: LD_INT 28
34086: PUSH
34087: LD_INT 7
34089: PUSH
34090: LD_INT 27
34092: PUSH
34093: LD_INT 29
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: IN
34108: PUSH
34109: LD_VAR 0 1
34113: PPUSH
34114: LD_INT 52
34116: PPUSH
34117: CALL_OW 321
34121: PUSH
34122: LD_INT 2
34124: EQUAL
34125: AND
34126: IFFALSE 34143
// bpoints := bpoints * 1.2 ;
34128: LD_ADDR_VAR 0 10
34132: PUSH
34133: LD_VAR 0 10
34137: PUSH
34138: LD_REAL  1.20000000000000E+0000
34141: MUL
34142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34143: LD_VAR 0 6
34147: PPUSH
34148: CALL_OW 264
34152: PUSH
34153: LD_INT 6
34155: PUSH
34156: LD_INT 46
34158: PUSH
34159: LD_INT 47
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: IN
34167: IFFALSE 34184
// bpoints := bpoints * 1.2 ;
34169: LD_ADDR_VAR 0 10
34173: PUSH
34174: LD_VAR 0 10
34178: PUSH
34179: LD_REAL  1.20000000000000E+0000
34182: MUL
34183: ST_TO_ADDR
// end ; unit_building :
34184: GO 34198
34186: LD_INT 3
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34194
34192: GO 34197
34194: POP
// ; end ;
34195: GO 34198
34197: POP
// for j = 1 to 3 do
34198: LD_ADDR_VAR 0 7
34202: PUSH
34203: DOUBLE
34204: LD_INT 1
34206: DEC
34207: ST_TO_ADDR
34208: LD_INT 3
34210: PUSH
34211: FOR_TO
34212: IFFALSE 34265
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34214: LD_ADDR_VAR 0 5
34218: PUSH
34219: LD_VAR 0 5
34223: PPUSH
34224: LD_VAR 0 7
34228: PPUSH
34229: LD_VAR 0 5
34233: PUSH
34234: LD_VAR 0 7
34238: ARRAY
34239: PUSH
34240: LD_VAR 0 9
34244: PUSH
34245: LD_VAR 0 7
34249: ARRAY
34250: PUSH
34251: LD_VAR 0 10
34255: MUL
34256: PLUS
34257: PPUSH
34258: CALL_OW 1
34262: ST_TO_ADDR
34263: GO 34211
34265: POP
34266: POP
// end ;
34267: GO 32746
34269: POP
34270: POP
// result := Replace ( result , 4 , tmp ) ;
34271: LD_ADDR_VAR 0 5
34275: PUSH
34276: LD_VAR 0 5
34280: PPUSH
34281: LD_INT 4
34283: PPUSH
34284: LD_VAR 0 8
34288: PPUSH
34289: CALL_OW 1
34293: ST_TO_ADDR
// end ;
34294: LD_VAR 0 5
34298: RET
// export function DangerAtRange ( unit , range ) ; begin
34299: LD_INT 0
34301: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34302: LD_ADDR_VAR 0 3
34306: PUSH
34307: LD_VAR 0 1
34311: PPUSH
34312: CALL_OW 255
34316: PPUSH
34317: LD_VAR 0 1
34321: PPUSH
34322: CALL_OW 250
34326: PPUSH
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL_OW 251
34336: PPUSH
34337: LD_VAR 0 2
34341: PPUSH
34342: CALL 32598 0 4
34346: ST_TO_ADDR
// end ;
34347: LD_VAR 0 3
34351: RET
// export function DangerInArea ( side , area ) ; begin
34352: LD_INT 0
34354: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34355: LD_ADDR_VAR 0 3
34359: PUSH
34360: LD_VAR 0 2
34364: PPUSH
34365: LD_INT 81
34367: PUSH
34368: LD_VAR 0 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PPUSH
34377: CALL_OW 70
34381: ST_TO_ADDR
// end ;
34382: LD_VAR 0 3
34386: RET
// export function IsExtension ( b ) ; begin
34387: LD_INT 0
34389: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34390: LD_ADDR_VAR 0 2
34394: PUSH
34395: LD_VAR 0 1
34399: PUSH
34400: LD_INT 23
34402: PUSH
34403: LD_INT 20
34405: PUSH
34406: LD_INT 22
34408: PUSH
34409: LD_INT 17
34411: PUSH
34412: LD_INT 24
34414: PUSH
34415: LD_INT 21
34417: PUSH
34418: LD_INT 19
34420: PUSH
34421: LD_INT 16
34423: PUSH
34424: LD_INT 25
34426: PUSH
34427: LD_INT 18
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: IN
34442: ST_TO_ADDR
// end ;
34443: LD_VAR 0 2
34447: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34448: LD_INT 0
34450: PPUSH
34451: PPUSH
34452: PPUSH
// result := [ ] ;
34453: LD_ADDR_VAR 0 4
34457: PUSH
34458: EMPTY
34459: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34460: LD_ADDR_VAR 0 5
34464: PUSH
34465: LD_VAR 0 2
34469: PPUSH
34470: LD_INT 21
34472: PUSH
34473: LD_INT 3
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PPUSH
34480: CALL_OW 70
34484: ST_TO_ADDR
// if not tmp then
34485: LD_VAR 0 5
34489: NOT
34490: IFFALSE 34494
// exit ;
34492: GO 34558
// if checkLink then
34494: LD_VAR 0 3
34498: IFFALSE 34548
// begin for i in tmp do
34500: LD_ADDR_VAR 0 6
34504: PUSH
34505: LD_VAR 0 5
34509: PUSH
34510: FOR_IN
34511: IFFALSE 34546
// if GetBase ( i ) <> base then
34513: LD_VAR 0 6
34517: PPUSH
34518: CALL_OW 274
34522: PUSH
34523: LD_VAR 0 1
34527: NONEQUAL
34528: IFFALSE 34544
// ComLinkToBase ( base , i ) ;
34530: LD_VAR 0 1
34534: PPUSH
34535: LD_VAR 0 6
34539: PPUSH
34540: CALL_OW 169
34544: GO 34510
34546: POP
34547: POP
// end ; result := tmp ;
34548: LD_ADDR_VAR 0 4
34552: PUSH
34553: LD_VAR 0 5
34557: ST_TO_ADDR
// end ;
34558: LD_VAR 0 4
34562: RET
// export function ComComplete ( units , b ) ; var i ; begin
34563: LD_INT 0
34565: PPUSH
34566: PPUSH
// if not units then
34567: LD_VAR 0 1
34571: NOT
34572: IFFALSE 34576
// exit ;
34574: GO 34666
// for i in units do
34576: LD_ADDR_VAR 0 4
34580: PUSH
34581: LD_VAR 0 1
34585: PUSH
34586: FOR_IN
34587: IFFALSE 34664
// if BuildingStatus ( b ) = bs_build then
34589: LD_VAR 0 2
34593: PPUSH
34594: CALL_OW 461
34598: PUSH
34599: LD_INT 1
34601: EQUAL
34602: IFFALSE 34662
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34604: LD_VAR 0 4
34608: PPUSH
34609: LD_STRING h
34611: PUSH
34612: LD_VAR 0 2
34616: PPUSH
34617: CALL_OW 250
34621: PUSH
34622: LD_VAR 0 2
34626: PPUSH
34627: CALL_OW 251
34631: PUSH
34632: LD_VAR 0 2
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: PUSH
34655: EMPTY
34656: LIST
34657: PPUSH
34658: CALL_OW 446
34662: GO 34586
34664: POP
34665: POP
// end ;
34666: LD_VAR 0 3
34670: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34671: LD_INT 0
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34679: LD_VAR 0 1
34683: NOT
34684: PUSH
34685: LD_VAR 0 1
34689: PPUSH
34690: CALL_OW 263
34694: PUSH
34695: LD_INT 2
34697: NONEQUAL
34698: OR
34699: IFFALSE 34703
// exit ;
34701: GO 35019
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34703: LD_ADDR_VAR 0 6
34707: PUSH
34708: LD_INT 22
34710: PUSH
34711: LD_VAR 0 1
34715: PPUSH
34716: CALL_OW 255
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: LD_INT 30
34730: PUSH
34731: LD_INT 36
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 34
34740: PUSH
34741: LD_INT 31
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PPUSH
34757: CALL_OW 69
34761: ST_TO_ADDR
// if not tmp then
34762: LD_VAR 0 6
34766: NOT
34767: IFFALSE 34771
// exit ;
34769: GO 35019
// result := [ ] ;
34771: LD_ADDR_VAR 0 2
34775: PUSH
34776: EMPTY
34777: ST_TO_ADDR
// for i in tmp do
34778: LD_ADDR_VAR 0 3
34782: PUSH
34783: LD_VAR 0 6
34787: PUSH
34788: FOR_IN
34789: IFFALSE 34860
// begin t := UnitsInside ( i ) ;
34791: LD_ADDR_VAR 0 4
34795: PUSH
34796: LD_VAR 0 3
34800: PPUSH
34801: CALL_OW 313
34805: ST_TO_ADDR
// if t then
34806: LD_VAR 0 4
34810: IFFALSE 34858
// for j in t do
34812: LD_ADDR_VAR 0 7
34816: PUSH
34817: LD_VAR 0 4
34821: PUSH
34822: FOR_IN
34823: IFFALSE 34856
// result := Replace ( result , result + 1 , j ) ;
34825: LD_ADDR_VAR 0 2
34829: PUSH
34830: LD_VAR 0 2
34834: PPUSH
34835: LD_VAR 0 2
34839: PUSH
34840: LD_INT 1
34842: PLUS
34843: PPUSH
34844: LD_VAR 0 7
34848: PPUSH
34849: CALL_OW 1
34853: ST_TO_ADDR
34854: GO 34822
34856: POP
34857: POP
// end ;
34858: GO 34788
34860: POP
34861: POP
// if not result then
34862: LD_VAR 0 2
34866: NOT
34867: IFFALSE 34871
// exit ;
34869: GO 35019
// mech := result [ 1 ] ;
34871: LD_ADDR_VAR 0 5
34875: PUSH
34876: LD_VAR 0 2
34880: PUSH
34881: LD_INT 1
34883: ARRAY
34884: ST_TO_ADDR
// if result > 1 then
34885: LD_VAR 0 2
34889: PUSH
34890: LD_INT 1
34892: GREATER
34893: IFFALSE 35005
// begin for i = 2 to result do
34895: LD_ADDR_VAR 0 3
34899: PUSH
34900: DOUBLE
34901: LD_INT 2
34903: DEC
34904: ST_TO_ADDR
34905: LD_VAR 0 2
34909: PUSH
34910: FOR_TO
34911: IFFALSE 35003
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34913: LD_ADDR_VAR 0 4
34917: PUSH
34918: LD_VAR 0 2
34922: PUSH
34923: LD_VAR 0 3
34927: ARRAY
34928: PPUSH
34929: LD_INT 3
34931: PPUSH
34932: CALL_OW 259
34936: PUSH
34937: LD_VAR 0 2
34941: PUSH
34942: LD_VAR 0 3
34946: ARRAY
34947: PPUSH
34948: CALL_OW 432
34952: MINUS
34953: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34954: LD_VAR 0 4
34958: PUSH
34959: LD_VAR 0 5
34963: PPUSH
34964: LD_INT 3
34966: PPUSH
34967: CALL_OW 259
34971: PUSH
34972: LD_VAR 0 5
34976: PPUSH
34977: CALL_OW 432
34981: MINUS
34982: GREATEREQUAL
34983: IFFALSE 35001
// mech := result [ i ] ;
34985: LD_ADDR_VAR 0 5
34989: PUSH
34990: LD_VAR 0 2
34994: PUSH
34995: LD_VAR 0 3
34999: ARRAY
35000: ST_TO_ADDR
// end ;
35001: GO 34910
35003: POP
35004: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35005: LD_VAR 0 1
35009: PPUSH
35010: LD_VAR 0 5
35014: PPUSH
35015: CALL_OW 135
// end ;
35019: LD_VAR 0 2
35023: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35024: LD_INT 0
35026: PPUSH
35027: PPUSH
35028: PPUSH
35029: PPUSH
35030: PPUSH
35031: PPUSH
35032: PPUSH
35033: PPUSH
35034: PPUSH
35035: PPUSH
35036: PPUSH
35037: PPUSH
35038: PPUSH
// result := [ ] ;
35039: LD_ADDR_VAR 0 7
35043: PUSH
35044: EMPTY
35045: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35046: LD_VAR 0 1
35050: PPUSH
35051: CALL_OW 266
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: IN
35066: NOT
35067: IFFALSE 35071
// exit ;
35069: GO 36705
// if name then
35071: LD_VAR 0 3
35075: IFFALSE 35091
// SetBName ( base_dep , name ) ;
35077: LD_VAR 0 1
35081: PPUSH
35082: LD_VAR 0 3
35086: PPUSH
35087: CALL_OW 500
// base := GetBase ( base_dep ) ;
35091: LD_ADDR_VAR 0 15
35095: PUSH
35096: LD_VAR 0 1
35100: PPUSH
35101: CALL_OW 274
35105: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35106: LD_ADDR_VAR 0 16
35110: PUSH
35111: LD_VAR 0 1
35115: PPUSH
35116: CALL_OW 255
35120: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35121: LD_ADDR_VAR 0 17
35125: PUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 248
35135: ST_TO_ADDR
// if sources then
35136: LD_VAR 0 5
35140: IFFALSE 35187
// for i = 1 to 3 do
35142: LD_ADDR_VAR 0 8
35146: PUSH
35147: DOUBLE
35148: LD_INT 1
35150: DEC
35151: ST_TO_ADDR
35152: LD_INT 3
35154: PUSH
35155: FOR_TO
35156: IFFALSE 35185
// AddResourceType ( base , i , sources [ i ] ) ;
35158: LD_VAR 0 15
35162: PPUSH
35163: LD_VAR 0 8
35167: PPUSH
35168: LD_VAR 0 5
35172: PUSH
35173: LD_VAR 0 8
35177: ARRAY
35178: PPUSH
35179: CALL_OW 276
35183: GO 35155
35185: POP
35186: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35187: LD_ADDR_VAR 0 18
35191: PUSH
35192: LD_VAR 0 15
35196: PPUSH
35197: LD_VAR 0 2
35201: PPUSH
35202: LD_INT 1
35204: PPUSH
35205: CALL 34448 0 3
35209: ST_TO_ADDR
// InitHc ;
35210: CALL_OW 19
// InitUc ;
35214: CALL_OW 18
// uc_side := side ;
35218: LD_ADDR_OWVAR 20
35222: PUSH
35223: LD_VAR 0 16
35227: ST_TO_ADDR
// uc_nation := nation ;
35228: LD_ADDR_OWVAR 21
35232: PUSH
35233: LD_VAR 0 17
35237: ST_TO_ADDR
// if buildings then
35238: LD_VAR 0 18
35242: IFFALSE 36564
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35244: LD_ADDR_VAR 0 19
35248: PUSH
35249: LD_VAR 0 18
35253: PPUSH
35254: LD_INT 2
35256: PUSH
35257: LD_INT 30
35259: PUSH
35260: LD_INT 29
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 30
35269: PUSH
35270: LD_INT 30
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: PPUSH
35282: CALL_OW 72
35286: ST_TO_ADDR
// if tmp then
35287: LD_VAR 0 19
35291: IFFALSE 35339
// for i in tmp do
35293: LD_ADDR_VAR 0 8
35297: PUSH
35298: LD_VAR 0 19
35302: PUSH
35303: FOR_IN
35304: IFFALSE 35337
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35306: LD_VAR 0 8
35310: PPUSH
35311: CALL_OW 250
35315: PPUSH
35316: LD_VAR 0 8
35320: PPUSH
35321: CALL_OW 251
35325: PPUSH
35326: LD_VAR 0 16
35330: PPUSH
35331: CALL_OW 441
35335: GO 35303
35337: POP
35338: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35339: LD_VAR 0 18
35343: PPUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 30
35349: PUSH
35350: LD_INT 32
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 30
35359: PUSH
35360: LD_INT 33
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: PPUSH
35372: CALL_OW 72
35376: IFFALSE 35464
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35378: LD_ADDR_VAR 0 8
35382: PUSH
35383: LD_VAR 0 18
35387: PPUSH
35388: LD_INT 2
35390: PUSH
35391: LD_INT 30
35393: PUSH
35394: LD_INT 32
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 30
35403: PUSH
35404: LD_INT 33
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: PPUSH
35416: CALL_OW 72
35420: PUSH
35421: FOR_IN
35422: IFFALSE 35462
// begin if not GetBWeapon ( i ) then
35424: LD_VAR 0 8
35428: PPUSH
35429: CALL_OW 269
35433: NOT
35434: IFFALSE 35460
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35436: LD_VAR 0 8
35440: PPUSH
35441: LD_VAR 0 8
35445: PPUSH
35446: LD_VAR 0 2
35450: PPUSH
35451: CALL 36710 0 2
35455: PPUSH
35456: CALL_OW 431
// end ;
35460: GO 35421
35462: POP
35463: POP
// end ; for i = 1 to personel do
35464: LD_ADDR_VAR 0 8
35468: PUSH
35469: DOUBLE
35470: LD_INT 1
35472: DEC
35473: ST_TO_ADDR
35474: LD_VAR 0 6
35478: PUSH
35479: FOR_TO
35480: IFFALSE 36544
// begin if i > 4 then
35482: LD_VAR 0 8
35486: PUSH
35487: LD_INT 4
35489: GREATER
35490: IFFALSE 35494
// break ;
35492: GO 36544
// case i of 1 :
35494: LD_VAR 0 8
35498: PUSH
35499: LD_INT 1
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35507
35505: GO 35587
35507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35508: LD_ADDR_VAR 0 12
35512: PUSH
35513: LD_VAR 0 18
35517: PPUSH
35518: LD_INT 22
35520: PUSH
35521: LD_VAR 0 16
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 58
35532: PUSH
35533: EMPTY
35534: LIST
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: LD_INT 30
35541: PUSH
35542: LD_INT 32
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 30
35551: PUSH
35552: LD_INT 4
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 30
35561: PUSH
35562: LD_INT 5
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: PPUSH
35580: CALL_OW 72
35584: ST_TO_ADDR
35585: GO 35809
35587: LD_INT 2
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 35657
35595: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35596: LD_ADDR_VAR 0 12
35600: PUSH
35601: LD_VAR 0 18
35605: PPUSH
35606: LD_INT 22
35608: PUSH
35609: LD_VAR 0 16
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: LD_INT 30
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 30
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PPUSH
35650: CALL_OW 72
35654: ST_TO_ADDR
35655: GO 35809
35657: LD_INT 3
35659: DOUBLE
35660: EQUAL
35661: IFTRUE 35665
35663: GO 35727
35665: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35666: LD_ADDR_VAR 0 12
35670: PUSH
35671: LD_VAR 0 18
35675: PPUSH
35676: LD_INT 22
35678: PUSH
35679: LD_VAR 0 16
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: LD_INT 30
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 30
35703: PUSH
35704: LD_INT 3
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PPUSH
35720: CALL_OW 72
35724: ST_TO_ADDR
35725: GO 35809
35727: LD_INT 4
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35735
35733: GO 35808
35735: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35736: LD_ADDR_VAR 0 12
35740: PUSH
35741: LD_VAR 0 18
35745: PPUSH
35746: LD_INT 22
35748: PUSH
35749: LD_VAR 0 16
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: LD_INT 30
35763: PUSH
35764: LD_INT 6
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 30
35773: PUSH
35774: LD_INT 7
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 30
35783: PUSH
35784: LD_INT 8
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PPUSH
35801: CALL_OW 72
35805: ST_TO_ADDR
35806: GO 35809
35808: POP
// if i = 1 then
35809: LD_VAR 0 8
35813: PUSH
35814: LD_INT 1
35816: EQUAL
35817: IFFALSE 35928
// begin tmp := [ ] ;
35819: LD_ADDR_VAR 0 19
35823: PUSH
35824: EMPTY
35825: ST_TO_ADDR
// for j in f do
35826: LD_ADDR_VAR 0 9
35830: PUSH
35831: LD_VAR 0 12
35835: PUSH
35836: FOR_IN
35837: IFFALSE 35910
// if GetBType ( j ) = b_bunker then
35839: LD_VAR 0 9
35843: PPUSH
35844: CALL_OW 266
35848: PUSH
35849: LD_INT 32
35851: EQUAL
35852: IFFALSE 35879
// tmp := Insert ( tmp , 1 , j ) else
35854: LD_ADDR_VAR 0 19
35858: PUSH
35859: LD_VAR 0 19
35863: PPUSH
35864: LD_INT 1
35866: PPUSH
35867: LD_VAR 0 9
35871: PPUSH
35872: CALL_OW 2
35876: ST_TO_ADDR
35877: GO 35908
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35879: LD_ADDR_VAR 0 19
35883: PUSH
35884: LD_VAR 0 19
35888: PPUSH
35889: LD_VAR 0 19
35893: PUSH
35894: LD_INT 1
35896: PLUS
35897: PPUSH
35898: LD_VAR 0 9
35902: PPUSH
35903: CALL_OW 2
35907: ST_TO_ADDR
35908: GO 35836
35910: POP
35911: POP
// if tmp then
35912: LD_VAR 0 19
35916: IFFALSE 35928
// f := tmp ;
35918: LD_ADDR_VAR 0 12
35922: PUSH
35923: LD_VAR 0 19
35927: ST_TO_ADDR
// end ; x := personel [ i ] ;
35928: LD_ADDR_VAR 0 13
35932: PUSH
35933: LD_VAR 0 6
35937: PUSH
35938: LD_VAR 0 8
35942: ARRAY
35943: ST_TO_ADDR
// if x = - 1 then
35944: LD_VAR 0 13
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: EQUAL
35953: IFFALSE 36162
// begin for j in f do
35955: LD_ADDR_VAR 0 9
35959: PUSH
35960: LD_VAR 0 12
35964: PUSH
35965: FOR_IN
35966: IFFALSE 36158
// repeat InitHc ;
35968: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35972: LD_VAR 0 9
35976: PPUSH
35977: CALL_OW 266
35981: PUSH
35982: LD_INT 5
35984: EQUAL
35985: IFFALSE 36055
// begin if UnitsInside ( j ) < 3 then
35987: LD_VAR 0 9
35991: PPUSH
35992: CALL_OW 313
35996: PUSH
35997: LD_INT 3
35999: LESS
36000: IFFALSE 36036
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36002: LD_INT 0
36004: PPUSH
36005: LD_INT 5
36007: PUSH
36008: LD_INT 8
36010: PUSH
36011: LD_INT 9
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: PUSH
36019: LD_VAR 0 17
36023: ARRAY
36024: PPUSH
36025: LD_VAR 0 4
36029: PPUSH
36030: CALL_OW 380
36034: GO 36053
// PrepareHuman ( false , i , skill ) ;
36036: LD_INT 0
36038: PPUSH
36039: LD_VAR 0 8
36043: PPUSH
36044: LD_VAR 0 4
36048: PPUSH
36049: CALL_OW 380
// end else
36053: GO 36072
// PrepareHuman ( false , i , skill ) ;
36055: LD_INT 0
36057: PPUSH
36058: LD_VAR 0 8
36062: PPUSH
36063: LD_VAR 0 4
36067: PPUSH
36068: CALL_OW 380
// un := CreateHuman ;
36072: LD_ADDR_VAR 0 14
36076: PUSH
36077: CALL_OW 44
36081: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36082: LD_ADDR_VAR 0 7
36086: PUSH
36087: LD_VAR 0 7
36091: PPUSH
36092: LD_INT 1
36094: PPUSH
36095: LD_VAR 0 14
36099: PPUSH
36100: CALL_OW 2
36104: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36105: LD_VAR 0 14
36109: PPUSH
36110: LD_VAR 0 9
36114: PPUSH
36115: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36119: LD_VAR 0 9
36123: PPUSH
36124: CALL_OW 313
36128: PUSH
36129: LD_INT 6
36131: EQUAL
36132: PUSH
36133: LD_VAR 0 9
36137: PPUSH
36138: CALL_OW 266
36142: PUSH
36143: LD_INT 32
36145: PUSH
36146: LD_INT 31
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: IN
36153: OR
36154: IFFALSE 35968
36156: GO 35965
36158: POP
36159: POP
// end else
36160: GO 36542
// for j = 1 to x do
36162: LD_ADDR_VAR 0 9
36166: PUSH
36167: DOUBLE
36168: LD_INT 1
36170: DEC
36171: ST_TO_ADDR
36172: LD_VAR 0 13
36176: PUSH
36177: FOR_TO
36178: IFFALSE 36540
// begin InitHc ;
36180: CALL_OW 19
// if not f then
36184: LD_VAR 0 12
36188: NOT
36189: IFFALSE 36278
// begin PrepareHuman ( false , i , skill ) ;
36191: LD_INT 0
36193: PPUSH
36194: LD_VAR 0 8
36198: PPUSH
36199: LD_VAR 0 4
36203: PPUSH
36204: CALL_OW 380
// un := CreateHuman ;
36208: LD_ADDR_VAR 0 14
36212: PUSH
36213: CALL_OW 44
36217: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36218: LD_ADDR_VAR 0 7
36222: PUSH
36223: LD_VAR 0 7
36227: PPUSH
36228: LD_INT 1
36230: PPUSH
36231: LD_VAR 0 14
36235: PPUSH
36236: CALL_OW 2
36240: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36241: LD_VAR 0 14
36245: PPUSH
36246: LD_VAR 0 1
36250: PPUSH
36251: CALL_OW 250
36255: PPUSH
36256: LD_VAR 0 1
36260: PPUSH
36261: CALL_OW 251
36265: PPUSH
36266: LD_INT 10
36268: PPUSH
36269: LD_INT 0
36271: PPUSH
36272: CALL_OW 50
// continue ;
36276: GO 36177
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36278: LD_VAR 0 12
36282: PUSH
36283: LD_INT 1
36285: ARRAY
36286: PPUSH
36287: CALL_OW 313
36291: PUSH
36292: LD_VAR 0 12
36296: PUSH
36297: LD_INT 1
36299: ARRAY
36300: PPUSH
36301: CALL_OW 266
36305: PUSH
36306: LD_INT 32
36308: PUSH
36309: LD_INT 31
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: IN
36316: AND
36317: PUSH
36318: LD_VAR 0 12
36322: PUSH
36323: LD_INT 1
36325: ARRAY
36326: PPUSH
36327: CALL_OW 313
36331: PUSH
36332: LD_INT 6
36334: EQUAL
36335: OR
36336: IFFALSE 36356
// f := Delete ( f , 1 ) ;
36338: LD_ADDR_VAR 0 12
36342: PUSH
36343: LD_VAR 0 12
36347: PPUSH
36348: LD_INT 1
36350: PPUSH
36351: CALL_OW 3
36355: ST_TO_ADDR
// if not f then
36356: LD_VAR 0 12
36360: NOT
36361: IFFALSE 36379
// begin x := x + 2 ;
36363: LD_ADDR_VAR 0 13
36367: PUSH
36368: LD_VAR 0 13
36372: PUSH
36373: LD_INT 2
36375: PLUS
36376: ST_TO_ADDR
// continue ;
36377: GO 36177
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36379: LD_VAR 0 12
36383: PUSH
36384: LD_INT 1
36386: ARRAY
36387: PPUSH
36388: CALL_OW 266
36392: PUSH
36393: LD_INT 5
36395: EQUAL
36396: IFFALSE 36470
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36398: LD_VAR 0 12
36402: PUSH
36403: LD_INT 1
36405: ARRAY
36406: PPUSH
36407: CALL_OW 313
36411: PUSH
36412: LD_INT 3
36414: LESS
36415: IFFALSE 36451
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36417: LD_INT 0
36419: PPUSH
36420: LD_INT 5
36422: PUSH
36423: LD_INT 8
36425: PUSH
36426: LD_INT 9
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: PUSH
36434: LD_VAR 0 17
36438: ARRAY
36439: PPUSH
36440: LD_VAR 0 4
36444: PPUSH
36445: CALL_OW 380
36449: GO 36468
// PrepareHuman ( false , i , skill ) ;
36451: LD_INT 0
36453: PPUSH
36454: LD_VAR 0 8
36458: PPUSH
36459: LD_VAR 0 4
36463: PPUSH
36464: CALL_OW 380
// end else
36468: GO 36487
// PrepareHuman ( false , i , skill ) ;
36470: LD_INT 0
36472: PPUSH
36473: LD_VAR 0 8
36477: PPUSH
36478: LD_VAR 0 4
36482: PPUSH
36483: CALL_OW 380
// un := CreateHuman ;
36487: LD_ADDR_VAR 0 14
36491: PUSH
36492: CALL_OW 44
36496: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36497: LD_ADDR_VAR 0 7
36501: PUSH
36502: LD_VAR 0 7
36506: PPUSH
36507: LD_INT 1
36509: PPUSH
36510: LD_VAR 0 14
36514: PPUSH
36515: CALL_OW 2
36519: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36520: LD_VAR 0 14
36524: PPUSH
36525: LD_VAR 0 12
36529: PUSH
36530: LD_INT 1
36532: ARRAY
36533: PPUSH
36534: CALL_OW 52
// end ;
36538: GO 36177
36540: POP
36541: POP
// end ;
36542: GO 35479
36544: POP
36545: POP
// result := result ^ buildings ;
36546: LD_ADDR_VAR 0 7
36550: PUSH
36551: LD_VAR 0 7
36555: PUSH
36556: LD_VAR 0 18
36560: ADD
36561: ST_TO_ADDR
// end else
36562: GO 36705
// begin for i = 1 to personel do
36564: LD_ADDR_VAR 0 8
36568: PUSH
36569: DOUBLE
36570: LD_INT 1
36572: DEC
36573: ST_TO_ADDR
36574: LD_VAR 0 6
36578: PUSH
36579: FOR_TO
36580: IFFALSE 36703
// begin if i > 4 then
36582: LD_VAR 0 8
36586: PUSH
36587: LD_INT 4
36589: GREATER
36590: IFFALSE 36594
// break ;
36592: GO 36703
// x := personel [ i ] ;
36594: LD_ADDR_VAR 0 13
36598: PUSH
36599: LD_VAR 0 6
36603: PUSH
36604: LD_VAR 0 8
36608: ARRAY
36609: ST_TO_ADDR
// if x = - 1 then
36610: LD_VAR 0 13
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: EQUAL
36619: IFFALSE 36623
// continue ;
36621: GO 36579
// PrepareHuman ( false , i , skill ) ;
36623: LD_INT 0
36625: PPUSH
36626: LD_VAR 0 8
36630: PPUSH
36631: LD_VAR 0 4
36635: PPUSH
36636: CALL_OW 380
// un := CreateHuman ;
36640: LD_ADDR_VAR 0 14
36644: PUSH
36645: CALL_OW 44
36649: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36650: LD_VAR 0 14
36654: PPUSH
36655: LD_VAR 0 1
36659: PPUSH
36660: CALL_OW 250
36664: PPUSH
36665: LD_VAR 0 1
36669: PPUSH
36670: CALL_OW 251
36674: PPUSH
36675: LD_INT 10
36677: PPUSH
36678: LD_INT 0
36680: PPUSH
36681: CALL_OW 50
// result := result ^ un ;
36685: LD_ADDR_VAR 0 7
36689: PUSH
36690: LD_VAR 0 7
36694: PUSH
36695: LD_VAR 0 14
36699: ADD
36700: ST_TO_ADDR
// end ;
36701: GO 36579
36703: POP
36704: POP
// end ; end ;
36705: LD_VAR 0 7
36709: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36710: LD_INT 0
36712: PPUSH
36713: PPUSH
36714: PPUSH
36715: PPUSH
36716: PPUSH
36717: PPUSH
36718: PPUSH
36719: PPUSH
36720: PPUSH
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
36725: PPUSH
36726: PPUSH
36727: PPUSH
// result := false ;
36728: LD_ADDR_VAR 0 3
36732: PUSH
36733: LD_INT 0
36735: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36736: LD_VAR 0 1
36740: NOT
36741: PUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: CALL_OW 266
36751: PUSH
36752: LD_INT 32
36754: PUSH
36755: LD_INT 33
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: IN
36762: NOT
36763: OR
36764: IFFALSE 36768
// exit ;
36766: GO 37877
// nat := GetNation ( tower ) ;
36768: LD_ADDR_VAR 0 12
36772: PUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: CALL_OW 248
36782: ST_TO_ADDR
// side := GetSide ( tower ) ;
36783: LD_ADDR_VAR 0 16
36787: PUSH
36788: LD_VAR 0 1
36792: PPUSH
36793: CALL_OW 255
36797: ST_TO_ADDR
// x := GetX ( tower ) ;
36798: LD_ADDR_VAR 0 10
36802: PUSH
36803: LD_VAR 0 1
36807: PPUSH
36808: CALL_OW 250
36812: ST_TO_ADDR
// y := GetY ( tower ) ;
36813: LD_ADDR_VAR 0 11
36817: PUSH
36818: LD_VAR 0 1
36822: PPUSH
36823: CALL_OW 251
36827: ST_TO_ADDR
// if not x or not y then
36828: LD_VAR 0 10
36832: NOT
36833: PUSH
36834: LD_VAR 0 11
36838: NOT
36839: OR
36840: IFFALSE 36844
// exit ;
36842: GO 37877
// weapon := 0 ;
36844: LD_ADDR_VAR 0 18
36848: PUSH
36849: LD_INT 0
36851: ST_TO_ADDR
// fac_list := [ ] ;
36852: LD_ADDR_VAR 0 17
36856: PUSH
36857: EMPTY
36858: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36859: LD_ADDR_VAR 0 6
36863: PUSH
36864: LD_VAR 0 1
36868: PPUSH
36869: CALL_OW 274
36873: PPUSH
36874: LD_VAR 0 2
36878: PPUSH
36879: LD_INT 0
36881: PPUSH
36882: CALL 34448 0 3
36886: PPUSH
36887: LD_INT 30
36889: PUSH
36890: LD_INT 3
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PPUSH
36897: CALL_OW 72
36901: ST_TO_ADDR
// if not factories then
36902: LD_VAR 0 6
36906: NOT
36907: IFFALSE 36911
// exit ;
36909: GO 37877
// for i in factories do
36911: LD_ADDR_VAR 0 8
36915: PUSH
36916: LD_VAR 0 6
36920: PUSH
36921: FOR_IN
36922: IFFALSE 36947
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36924: LD_ADDR_VAR 0 17
36928: PUSH
36929: LD_VAR 0 17
36933: PUSH
36934: LD_VAR 0 8
36938: PPUSH
36939: CALL_OW 478
36943: UNION
36944: ST_TO_ADDR
36945: GO 36921
36947: POP
36948: POP
// if not fac_list then
36949: LD_VAR 0 17
36953: NOT
36954: IFFALSE 36958
// exit ;
36956: GO 37877
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36958: LD_ADDR_VAR 0 5
36962: PUSH
36963: LD_INT 4
36965: PUSH
36966: LD_INT 5
36968: PUSH
36969: LD_INT 9
36971: PUSH
36972: LD_INT 10
36974: PUSH
36975: LD_INT 6
36977: PUSH
36978: LD_INT 7
36980: PUSH
36981: LD_INT 11
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 27
36995: PUSH
36996: LD_INT 28
36998: PUSH
36999: LD_INT 26
37001: PUSH
37002: LD_INT 30
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 43
37013: PUSH
37014: LD_INT 44
37016: PUSH
37017: LD_INT 46
37019: PUSH
37020: LD_INT 45
37022: PUSH
37023: LD_INT 47
37025: PUSH
37026: LD_INT 49
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: LIST
37041: PUSH
37042: LD_VAR 0 12
37046: ARRAY
37047: ST_TO_ADDR
// list := list isect fac_list ;
37048: LD_ADDR_VAR 0 5
37052: PUSH
37053: LD_VAR 0 5
37057: PUSH
37058: LD_VAR 0 17
37062: ISECT
37063: ST_TO_ADDR
// if not list then
37064: LD_VAR 0 5
37068: NOT
37069: IFFALSE 37073
// exit ;
37071: GO 37877
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37073: LD_VAR 0 12
37077: PUSH
37078: LD_INT 3
37080: EQUAL
37081: PUSH
37082: LD_INT 49
37084: PUSH
37085: LD_VAR 0 5
37089: IN
37090: AND
37091: PUSH
37092: LD_INT 31
37094: PPUSH
37095: LD_VAR 0 16
37099: PPUSH
37100: CALL_OW 321
37104: PUSH
37105: LD_INT 2
37107: EQUAL
37108: AND
37109: IFFALSE 37169
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37111: LD_INT 22
37113: PUSH
37114: LD_VAR 0 16
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 35
37125: PUSH
37126: LD_INT 49
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 91
37135: PUSH
37136: LD_VAR 0 1
37140: PUSH
37141: LD_INT 10
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: PPUSH
37154: CALL_OW 69
37158: NOT
37159: IFFALSE 37169
// weapon := ru_time_lapser ;
37161: LD_ADDR_VAR 0 18
37165: PUSH
37166: LD_INT 49
37168: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37169: LD_VAR 0 12
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: IN
37184: PUSH
37185: LD_INT 11
37187: PUSH
37188: LD_VAR 0 5
37192: IN
37193: PUSH
37194: LD_INT 30
37196: PUSH
37197: LD_VAR 0 5
37201: IN
37202: OR
37203: AND
37204: PUSH
37205: LD_INT 6
37207: PPUSH
37208: LD_VAR 0 16
37212: PPUSH
37213: CALL_OW 321
37217: PUSH
37218: LD_INT 2
37220: EQUAL
37221: AND
37222: IFFALSE 37387
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37224: LD_INT 22
37226: PUSH
37227: LD_VAR 0 16
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: LD_INT 35
37241: PUSH
37242: LD_INT 11
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 35
37251: PUSH
37252: LD_INT 30
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 91
37266: PUSH
37267: LD_VAR 0 1
37271: PUSH
37272: LD_INT 18
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: PPUSH
37285: CALL_OW 69
37289: NOT
37290: PUSH
37291: LD_INT 22
37293: PUSH
37294: LD_VAR 0 16
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: LD_INT 30
37308: PUSH
37309: LD_INT 32
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 30
37318: PUSH
37319: LD_INT 33
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 91
37333: PUSH
37334: LD_VAR 0 1
37338: PUSH
37339: LD_INT 12
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: PPUSH
37355: CALL_OW 69
37359: PUSH
37360: LD_INT 2
37362: GREATER
37363: AND
37364: IFFALSE 37387
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37366: LD_ADDR_VAR 0 18
37370: PUSH
37371: LD_INT 11
37373: PUSH
37374: LD_INT 30
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_VAR 0 12
37385: ARRAY
37386: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37387: LD_VAR 0 18
37391: NOT
37392: PUSH
37393: LD_INT 40
37395: PPUSH
37396: LD_VAR 0 16
37400: PPUSH
37401: CALL_OW 321
37405: PUSH
37406: LD_INT 2
37408: EQUAL
37409: AND
37410: PUSH
37411: LD_INT 7
37413: PUSH
37414: LD_VAR 0 5
37418: IN
37419: PUSH
37420: LD_INT 28
37422: PUSH
37423: LD_VAR 0 5
37427: IN
37428: OR
37429: PUSH
37430: LD_INT 45
37432: PUSH
37433: LD_VAR 0 5
37437: IN
37438: OR
37439: AND
37440: IFFALSE 37694
// begin hex := GetHexInfo ( x , y ) ;
37442: LD_ADDR_VAR 0 4
37446: PUSH
37447: LD_VAR 0 10
37451: PPUSH
37452: LD_VAR 0 11
37456: PPUSH
37457: CALL_OW 546
37461: ST_TO_ADDR
// if hex [ 1 ] then
37462: LD_VAR 0 4
37466: PUSH
37467: LD_INT 1
37469: ARRAY
37470: IFFALSE 37474
// exit ;
37472: GO 37877
// height := hex [ 2 ] ;
37474: LD_ADDR_VAR 0 15
37478: PUSH
37479: LD_VAR 0 4
37483: PUSH
37484: LD_INT 2
37486: ARRAY
37487: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37488: LD_ADDR_VAR 0 14
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 3
37501: PUSH
37502: LD_INT 5
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: ST_TO_ADDR
// for i in tmp do
37511: LD_ADDR_VAR 0 8
37515: PUSH
37516: LD_VAR 0 14
37520: PUSH
37521: FOR_IN
37522: IFFALSE 37692
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37524: LD_ADDR_VAR 0 9
37528: PUSH
37529: LD_VAR 0 10
37533: PPUSH
37534: LD_VAR 0 8
37538: PPUSH
37539: LD_INT 5
37541: PPUSH
37542: CALL_OW 272
37546: PUSH
37547: LD_VAR 0 11
37551: PPUSH
37552: LD_VAR 0 8
37556: PPUSH
37557: LD_INT 5
37559: PPUSH
37560: CALL_OW 273
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37569: LD_VAR 0 9
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: PPUSH
37578: LD_VAR 0 9
37582: PUSH
37583: LD_INT 2
37585: ARRAY
37586: PPUSH
37587: CALL_OW 488
37591: IFFALSE 37690
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37593: LD_ADDR_VAR 0 4
37597: PUSH
37598: LD_VAR 0 9
37602: PUSH
37603: LD_INT 1
37605: ARRAY
37606: PPUSH
37607: LD_VAR 0 9
37611: PUSH
37612: LD_INT 2
37614: ARRAY
37615: PPUSH
37616: CALL_OW 546
37620: ST_TO_ADDR
// if hex [ 1 ] then
37621: LD_VAR 0 4
37625: PUSH
37626: LD_INT 1
37628: ARRAY
37629: IFFALSE 37633
// continue ;
37631: GO 37521
// h := hex [ 2 ] ;
37633: LD_ADDR_VAR 0 13
37637: PUSH
37638: LD_VAR 0 4
37642: PUSH
37643: LD_INT 2
37645: ARRAY
37646: ST_TO_ADDR
// if h + 7 < height then
37647: LD_VAR 0 13
37651: PUSH
37652: LD_INT 7
37654: PLUS
37655: PUSH
37656: LD_VAR 0 15
37660: LESS
37661: IFFALSE 37690
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37663: LD_ADDR_VAR 0 18
37667: PUSH
37668: LD_INT 7
37670: PUSH
37671: LD_INT 28
37673: PUSH
37674: LD_INT 45
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: PUSH
37682: LD_VAR 0 12
37686: ARRAY
37687: ST_TO_ADDR
// break ;
37688: GO 37692
// end ; end ; end ;
37690: GO 37521
37692: POP
37693: POP
// end ; if not weapon then
37694: LD_VAR 0 18
37698: NOT
37699: IFFALSE 37759
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37701: LD_ADDR_VAR 0 5
37705: PUSH
37706: LD_VAR 0 5
37710: PUSH
37711: LD_INT 11
37713: PUSH
37714: LD_INT 30
37716: PUSH
37717: LD_INT 49
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: DIFF
37725: ST_TO_ADDR
// if not list then
37726: LD_VAR 0 5
37730: NOT
37731: IFFALSE 37735
// exit ;
37733: GO 37877
// weapon := list [ rand ( 1 , list ) ] ;
37735: LD_ADDR_VAR 0 18
37739: PUSH
37740: LD_VAR 0 5
37744: PUSH
37745: LD_INT 1
37747: PPUSH
37748: LD_VAR 0 5
37752: PPUSH
37753: CALL_OW 12
37757: ARRAY
37758: ST_TO_ADDR
// end ; if weapon then
37759: LD_VAR 0 18
37763: IFFALSE 37877
// begin tmp := CostOfWeapon ( weapon ) ;
37765: LD_ADDR_VAR 0 14
37769: PUSH
37770: LD_VAR 0 18
37774: PPUSH
37775: CALL_OW 451
37779: ST_TO_ADDR
// j := GetBase ( tower ) ;
37780: LD_ADDR_VAR 0 9
37784: PUSH
37785: LD_VAR 0 1
37789: PPUSH
37790: CALL_OW 274
37794: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37795: LD_VAR 0 9
37799: PPUSH
37800: LD_INT 1
37802: PPUSH
37803: CALL_OW 275
37807: PUSH
37808: LD_VAR 0 14
37812: PUSH
37813: LD_INT 1
37815: ARRAY
37816: GREATEREQUAL
37817: PUSH
37818: LD_VAR 0 9
37822: PPUSH
37823: LD_INT 2
37825: PPUSH
37826: CALL_OW 275
37830: PUSH
37831: LD_VAR 0 14
37835: PUSH
37836: LD_INT 2
37838: ARRAY
37839: GREATEREQUAL
37840: AND
37841: PUSH
37842: LD_VAR 0 9
37846: PPUSH
37847: LD_INT 3
37849: PPUSH
37850: CALL_OW 275
37854: PUSH
37855: LD_VAR 0 14
37859: PUSH
37860: LD_INT 3
37862: ARRAY
37863: GREATEREQUAL
37864: AND
37865: IFFALSE 37877
// result := weapon ;
37867: LD_ADDR_VAR 0 3
37871: PUSH
37872: LD_VAR 0 18
37876: ST_TO_ADDR
// end ; end ;
37877: LD_VAR 0 3
37881: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37882: LD_INT 0
37884: PPUSH
37885: PPUSH
// result := true ;
37886: LD_ADDR_VAR 0 3
37890: PUSH
37891: LD_INT 1
37893: ST_TO_ADDR
// if array1 = array2 then
37894: LD_VAR 0 1
37898: PUSH
37899: LD_VAR 0 2
37903: EQUAL
37904: IFFALSE 37964
// begin for i = 1 to array1 do
37906: LD_ADDR_VAR 0 4
37910: PUSH
37911: DOUBLE
37912: LD_INT 1
37914: DEC
37915: ST_TO_ADDR
37916: LD_VAR 0 1
37920: PUSH
37921: FOR_TO
37922: IFFALSE 37960
// if array1 [ i ] <> array2 [ i ] then
37924: LD_VAR 0 1
37928: PUSH
37929: LD_VAR 0 4
37933: ARRAY
37934: PUSH
37935: LD_VAR 0 2
37939: PUSH
37940: LD_VAR 0 4
37944: ARRAY
37945: NONEQUAL
37946: IFFALSE 37958
// begin result := false ;
37948: LD_ADDR_VAR 0 3
37952: PUSH
37953: LD_INT 0
37955: ST_TO_ADDR
// break ;
37956: GO 37960
// end ;
37958: GO 37921
37960: POP
37961: POP
// end else
37962: GO 37972
// result := false ;
37964: LD_ADDR_VAR 0 3
37968: PUSH
37969: LD_INT 0
37971: ST_TO_ADDR
// end ;
37972: LD_VAR 0 3
37976: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37977: LD_INT 0
37979: PPUSH
37980: PPUSH
// if not array1 or not array2 then
37981: LD_VAR 0 1
37985: NOT
37986: PUSH
37987: LD_VAR 0 2
37991: NOT
37992: OR
37993: IFFALSE 37997
// exit ;
37995: GO 38061
// result := true ;
37997: LD_ADDR_VAR 0 3
38001: PUSH
38002: LD_INT 1
38004: ST_TO_ADDR
// for i = 1 to array1 do
38005: LD_ADDR_VAR 0 4
38009: PUSH
38010: DOUBLE
38011: LD_INT 1
38013: DEC
38014: ST_TO_ADDR
38015: LD_VAR 0 1
38019: PUSH
38020: FOR_TO
38021: IFFALSE 38059
// if array1 [ i ] <> array2 [ i ] then
38023: LD_VAR 0 1
38027: PUSH
38028: LD_VAR 0 4
38032: ARRAY
38033: PUSH
38034: LD_VAR 0 2
38038: PUSH
38039: LD_VAR 0 4
38043: ARRAY
38044: NONEQUAL
38045: IFFALSE 38057
// begin result := false ;
38047: LD_ADDR_VAR 0 3
38051: PUSH
38052: LD_INT 0
38054: ST_TO_ADDR
// break ;
38055: GO 38059
// end ;
38057: GO 38020
38059: POP
38060: POP
// end ;
38061: LD_VAR 0 3
38065: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38066: LD_INT 0
38068: PPUSH
38069: PPUSH
38070: PPUSH
// pom := GetBase ( fac ) ;
38071: LD_ADDR_VAR 0 5
38075: PUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 274
38085: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38086: LD_ADDR_VAR 0 4
38090: PUSH
38091: LD_VAR 0 2
38095: PUSH
38096: LD_INT 1
38098: ARRAY
38099: PPUSH
38100: LD_VAR 0 2
38104: PUSH
38105: LD_INT 2
38107: ARRAY
38108: PPUSH
38109: LD_VAR 0 2
38113: PUSH
38114: LD_INT 3
38116: ARRAY
38117: PPUSH
38118: LD_VAR 0 2
38122: PUSH
38123: LD_INT 4
38125: ARRAY
38126: PPUSH
38127: CALL_OW 449
38131: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38132: LD_ADDR_VAR 0 3
38136: PUSH
38137: LD_VAR 0 5
38141: PPUSH
38142: LD_INT 1
38144: PPUSH
38145: CALL_OW 275
38149: PUSH
38150: LD_VAR 0 4
38154: PUSH
38155: LD_INT 1
38157: ARRAY
38158: GREATEREQUAL
38159: PUSH
38160: LD_VAR 0 5
38164: PPUSH
38165: LD_INT 2
38167: PPUSH
38168: CALL_OW 275
38172: PUSH
38173: LD_VAR 0 4
38177: PUSH
38178: LD_INT 2
38180: ARRAY
38181: GREATEREQUAL
38182: AND
38183: PUSH
38184: LD_VAR 0 5
38188: PPUSH
38189: LD_INT 3
38191: PPUSH
38192: CALL_OW 275
38196: PUSH
38197: LD_VAR 0 4
38201: PUSH
38202: LD_INT 3
38204: ARRAY
38205: GREATEREQUAL
38206: AND
38207: ST_TO_ADDR
// end ;
38208: LD_VAR 0 3
38212: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38213: LD_INT 0
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
// pom := GetBase ( building ) ;
38219: LD_ADDR_VAR 0 3
38223: PUSH
38224: LD_VAR 0 1
38228: PPUSH
38229: CALL_OW 274
38233: ST_TO_ADDR
// if not pom then
38234: LD_VAR 0 3
38238: NOT
38239: IFFALSE 38243
// exit ;
38241: GO 38413
// btype := GetBType ( building ) ;
38243: LD_ADDR_VAR 0 5
38247: PUSH
38248: LD_VAR 0 1
38252: PPUSH
38253: CALL_OW 266
38257: ST_TO_ADDR
// if btype = b_armoury then
38258: LD_VAR 0 5
38262: PUSH
38263: LD_INT 4
38265: EQUAL
38266: IFFALSE 38276
// btype := b_barracks ;
38268: LD_ADDR_VAR 0 5
38272: PUSH
38273: LD_INT 5
38275: ST_TO_ADDR
// if btype = b_depot then
38276: LD_VAR 0 5
38280: PUSH
38281: LD_INT 0
38283: EQUAL
38284: IFFALSE 38294
// btype := b_warehouse ;
38286: LD_ADDR_VAR 0 5
38290: PUSH
38291: LD_INT 1
38293: ST_TO_ADDR
// if btype = b_workshop then
38294: LD_VAR 0 5
38298: PUSH
38299: LD_INT 2
38301: EQUAL
38302: IFFALSE 38312
// btype := b_factory ;
38304: LD_ADDR_VAR 0 5
38308: PUSH
38309: LD_INT 3
38311: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38312: LD_ADDR_VAR 0 4
38316: PUSH
38317: LD_VAR 0 5
38321: PPUSH
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 248
38331: PPUSH
38332: CALL_OW 450
38336: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38337: LD_ADDR_VAR 0 2
38341: PUSH
38342: LD_VAR 0 3
38346: PPUSH
38347: LD_INT 1
38349: PPUSH
38350: CALL_OW 275
38354: PUSH
38355: LD_VAR 0 4
38359: PUSH
38360: LD_INT 1
38362: ARRAY
38363: GREATEREQUAL
38364: PUSH
38365: LD_VAR 0 3
38369: PPUSH
38370: LD_INT 2
38372: PPUSH
38373: CALL_OW 275
38377: PUSH
38378: LD_VAR 0 4
38382: PUSH
38383: LD_INT 2
38385: ARRAY
38386: GREATEREQUAL
38387: AND
38388: PUSH
38389: LD_VAR 0 3
38393: PPUSH
38394: LD_INT 3
38396: PPUSH
38397: CALL_OW 275
38401: PUSH
38402: LD_VAR 0 4
38406: PUSH
38407: LD_INT 3
38409: ARRAY
38410: GREATEREQUAL
38411: AND
38412: ST_TO_ADDR
// end ;
38413: LD_VAR 0 2
38417: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38418: LD_INT 0
38420: PPUSH
38421: PPUSH
38422: PPUSH
// pom := GetBase ( building ) ;
38423: LD_ADDR_VAR 0 4
38427: PUSH
38428: LD_VAR 0 1
38432: PPUSH
38433: CALL_OW 274
38437: ST_TO_ADDR
// if not pom then
38438: LD_VAR 0 4
38442: NOT
38443: IFFALSE 38447
// exit ;
38445: GO 38548
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38447: LD_ADDR_VAR 0 5
38451: PUSH
38452: LD_VAR 0 2
38456: PPUSH
38457: LD_VAR 0 1
38461: PPUSH
38462: CALL_OW 248
38466: PPUSH
38467: CALL_OW 450
38471: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38472: LD_ADDR_VAR 0 3
38476: PUSH
38477: LD_VAR 0 4
38481: PPUSH
38482: LD_INT 1
38484: PPUSH
38485: CALL_OW 275
38489: PUSH
38490: LD_VAR 0 5
38494: PUSH
38495: LD_INT 1
38497: ARRAY
38498: GREATEREQUAL
38499: PUSH
38500: LD_VAR 0 4
38504: PPUSH
38505: LD_INT 2
38507: PPUSH
38508: CALL_OW 275
38512: PUSH
38513: LD_VAR 0 5
38517: PUSH
38518: LD_INT 2
38520: ARRAY
38521: GREATEREQUAL
38522: AND
38523: PUSH
38524: LD_VAR 0 4
38528: PPUSH
38529: LD_INT 3
38531: PPUSH
38532: CALL_OW 275
38536: PUSH
38537: LD_VAR 0 5
38541: PUSH
38542: LD_INT 3
38544: ARRAY
38545: GREATEREQUAL
38546: AND
38547: ST_TO_ADDR
// end ;
38548: LD_VAR 0 3
38552: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38553: LD_INT 0
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
38560: PPUSH
38561: PPUSH
38562: PPUSH
38563: PPUSH
38564: PPUSH
38565: PPUSH
// result := false ;
38566: LD_ADDR_VAR 0 8
38570: PUSH
38571: LD_INT 0
38573: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38574: LD_VAR 0 5
38578: NOT
38579: PUSH
38580: LD_VAR 0 1
38584: NOT
38585: OR
38586: PUSH
38587: LD_VAR 0 2
38591: NOT
38592: OR
38593: PUSH
38594: LD_VAR 0 3
38598: NOT
38599: OR
38600: IFFALSE 38604
// exit ;
38602: GO 39418
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38604: LD_ADDR_VAR 0 14
38608: PUSH
38609: LD_VAR 0 1
38613: PPUSH
38614: LD_VAR 0 2
38618: PPUSH
38619: LD_VAR 0 3
38623: PPUSH
38624: LD_VAR 0 4
38628: PPUSH
38629: LD_VAR 0 5
38633: PUSH
38634: LD_INT 1
38636: ARRAY
38637: PPUSH
38638: CALL_OW 248
38642: PPUSH
38643: LD_INT 0
38645: PPUSH
38646: CALL 40651 0 6
38650: ST_TO_ADDR
// if not hexes then
38651: LD_VAR 0 14
38655: NOT
38656: IFFALSE 38660
// exit ;
38658: GO 39418
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38660: LD_ADDR_VAR 0 17
38664: PUSH
38665: LD_VAR 0 5
38669: PPUSH
38670: LD_INT 22
38672: PUSH
38673: LD_VAR 0 13
38677: PPUSH
38678: CALL_OW 255
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 30
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 30
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PPUSH
38719: CALL_OW 72
38723: ST_TO_ADDR
// for i = 1 to hexes do
38724: LD_ADDR_VAR 0 9
38728: PUSH
38729: DOUBLE
38730: LD_INT 1
38732: DEC
38733: ST_TO_ADDR
38734: LD_VAR 0 14
38738: PUSH
38739: FOR_TO
38740: IFFALSE 39416
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38742: LD_ADDR_VAR 0 13
38746: PUSH
38747: LD_VAR 0 14
38751: PUSH
38752: LD_VAR 0 9
38756: ARRAY
38757: PUSH
38758: LD_INT 1
38760: ARRAY
38761: PPUSH
38762: LD_VAR 0 14
38766: PUSH
38767: LD_VAR 0 9
38771: ARRAY
38772: PUSH
38773: LD_INT 2
38775: ARRAY
38776: PPUSH
38777: CALL_OW 428
38781: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38782: LD_VAR 0 14
38786: PUSH
38787: LD_VAR 0 9
38791: ARRAY
38792: PUSH
38793: LD_INT 1
38795: ARRAY
38796: PPUSH
38797: LD_VAR 0 14
38801: PUSH
38802: LD_VAR 0 9
38806: ARRAY
38807: PUSH
38808: LD_INT 2
38810: ARRAY
38811: PPUSH
38812: CALL_OW 351
38816: PUSH
38817: LD_VAR 0 14
38821: PUSH
38822: LD_VAR 0 9
38826: ARRAY
38827: PUSH
38828: LD_INT 1
38830: ARRAY
38831: PPUSH
38832: LD_VAR 0 14
38836: PUSH
38837: LD_VAR 0 9
38841: ARRAY
38842: PUSH
38843: LD_INT 2
38845: ARRAY
38846: PPUSH
38847: CALL_OW 488
38851: NOT
38852: OR
38853: PUSH
38854: LD_VAR 0 13
38858: PPUSH
38859: CALL_OW 247
38863: PUSH
38864: LD_INT 3
38866: EQUAL
38867: OR
38868: IFFALSE 38874
// exit ;
38870: POP
38871: POP
38872: GO 39418
// if not tmp then
38874: LD_VAR 0 13
38878: NOT
38879: IFFALSE 38883
// continue ;
38881: GO 38739
// result := true ;
38883: LD_ADDR_VAR 0 8
38887: PUSH
38888: LD_INT 1
38890: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38891: LD_VAR 0 6
38895: PUSH
38896: LD_VAR 0 13
38900: PPUSH
38901: CALL_OW 247
38905: PUSH
38906: LD_INT 2
38908: EQUAL
38909: AND
38910: PUSH
38911: LD_VAR 0 13
38915: PPUSH
38916: CALL_OW 263
38920: PUSH
38921: LD_INT 1
38923: EQUAL
38924: AND
38925: IFFALSE 39089
// begin if IsDrivenBy ( tmp ) then
38927: LD_VAR 0 13
38931: PPUSH
38932: CALL_OW 311
38936: IFFALSE 38940
// continue ;
38938: GO 38739
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38940: LD_VAR 0 6
38944: PPUSH
38945: LD_INT 3
38947: PUSH
38948: LD_INT 60
38950: PUSH
38951: EMPTY
38952: LIST
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 3
38960: PUSH
38961: LD_INT 55
38963: PUSH
38964: EMPTY
38965: LIST
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PPUSH
38975: CALL_OW 72
38979: IFFALSE 39087
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38981: LD_ADDR_VAR 0 18
38985: PUSH
38986: LD_VAR 0 6
38990: PPUSH
38991: LD_INT 3
38993: PUSH
38994: LD_INT 60
38996: PUSH
38997: EMPTY
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: LD_INT 55
39009: PUSH
39010: EMPTY
39011: LIST
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PPUSH
39021: CALL_OW 72
39025: PUSH
39026: LD_INT 1
39028: ARRAY
39029: ST_TO_ADDR
// if IsInUnit ( driver ) then
39030: LD_VAR 0 18
39034: PPUSH
39035: CALL_OW 310
39039: IFFALSE 39050
// ComExit ( driver ) ;
39041: LD_VAR 0 18
39045: PPUSH
39046: CALL 64412 0 1
// AddComEnterUnit ( driver , tmp ) ;
39050: LD_VAR 0 18
39054: PPUSH
39055: LD_VAR 0 13
39059: PPUSH
39060: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39064: LD_VAR 0 18
39068: PPUSH
39069: LD_VAR 0 7
39073: PPUSH
39074: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39078: LD_VAR 0 18
39082: PPUSH
39083: CALL_OW 181
// end ; continue ;
39087: GO 38739
// end ; if not cleaners or not tmp in cleaners then
39089: LD_VAR 0 6
39093: NOT
39094: PUSH
39095: LD_VAR 0 13
39099: PUSH
39100: LD_VAR 0 6
39104: IN
39105: NOT
39106: OR
39107: IFFALSE 39414
// begin if dep then
39109: LD_VAR 0 17
39113: IFFALSE 39249
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39115: LD_ADDR_VAR 0 16
39119: PUSH
39120: LD_VAR 0 17
39124: PUSH
39125: LD_INT 1
39127: ARRAY
39128: PPUSH
39129: CALL_OW 250
39133: PPUSH
39134: LD_VAR 0 17
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PPUSH
39143: CALL_OW 254
39147: PPUSH
39148: LD_INT 5
39150: PPUSH
39151: CALL_OW 272
39155: PUSH
39156: LD_VAR 0 17
39160: PUSH
39161: LD_INT 1
39163: ARRAY
39164: PPUSH
39165: CALL_OW 251
39169: PPUSH
39170: LD_VAR 0 17
39174: PUSH
39175: LD_INT 1
39177: ARRAY
39178: PPUSH
39179: CALL_OW 254
39183: PPUSH
39184: LD_INT 5
39186: PPUSH
39187: CALL_OW 273
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39196: LD_VAR 0 16
39200: PUSH
39201: LD_INT 1
39203: ARRAY
39204: PPUSH
39205: LD_VAR 0 16
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: PPUSH
39214: CALL_OW 488
39218: IFFALSE 39249
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39220: LD_VAR 0 13
39224: PPUSH
39225: LD_VAR 0 16
39229: PUSH
39230: LD_INT 1
39232: ARRAY
39233: PPUSH
39234: LD_VAR 0 16
39238: PUSH
39239: LD_INT 2
39241: ARRAY
39242: PPUSH
39243: CALL_OW 111
// continue ;
39247: GO 38739
// end ; end ; r := GetDir ( tmp ) ;
39249: LD_ADDR_VAR 0 15
39253: PUSH
39254: LD_VAR 0 13
39258: PPUSH
39259: CALL_OW 254
39263: ST_TO_ADDR
// if r = 5 then
39264: LD_VAR 0 15
39268: PUSH
39269: LD_INT 5
39271: EQUAL
39272: IFFALSE 39282
// r := 0 ;
39274: LD_ADDR_VAR 0 15
39278: PUSH
39279: LD_INT 0
39281: ST_TO_ADDR
// for j = r to 5 do
39282: LD_ADDR_VAR 0 10
39286: PUSH
39287: DOUBLE
39288: LD_VAR 0 15
39292: DEC
39293: ST_TO_ADDR
39294: LD_INT 5
39296: PUSH
39297: FOR_TO
39298: IFFALSE 39412
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39300: LD_ADDR_VAR 0 11
39304: PUSH
39305: LD_VAR 0 13
39309: PPUSH
39310: CALL_OW 250
39314: PPUSH
39315: LD_VAR 0 10
39319: PPUSH
39320: LD_INT 2
39322: PPUSH
39323: CALL_OW 272
39327: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39328: LD_ADDR_VAR 0 12
39332: PUSH
39333: LD_VAR 0 13
39337: PPUSH
39338: CALL_OW 251
39342: PPUSH
39343: LD_VAR 0 10
39347: PPUSH
39348: LD_INT 2
39350: PPUSH
39351: CALL_OW 273
39355: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39356: LD_VAR 0 11
39360: PPUSH
39361: LD_VAR 0 12
39365: PPUSH
39366: CALL_OW 488
39370: PUSH
39371: LD_VAR 0 11
39375: PPUSH
39376: LD_VAR 0 12
39380: PPUSH
39381: CALL_OW 428
39385: NOT
39386: AND
39387: IFFALSE 39410
// begin ComMoveXY ( tmp , _x , _y ) ;
39389: LD_VAR 0 13
39393: PPUSH
39394: LD_VAR 0 11
39398: PPUSH
39399: LD_VAR 0 12
39403: PPUSH
39404: CALL_OW 111
// break ;
39408: GO 39412
// end ; end ;
39410: GO 39297
39412: POP
39413: POP
// end ; end ;
39414: GO 38739
39416: POP
39417: POP
// end ;
39418: LD_VAR 0 8
39422: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39423: LD_INT 0
39425: PPUSH
// result := true ;
39426: LD_ADDR_VAR 0 3
39430: PUSH
39431: LD_INT 1
39433: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39434: LD_VAR 0 2
39438: PUSH
39439: LD_INT 24
39441: DOUBLE
39442: EQUAL
39443: IFTRUE 39453
39445: LD_INT 33
39447: DOUBLE
39448: EQUAL
39449: IFTRUE 39453
39451: GO 39478
39453: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39454: LD_ADDR_VAR 0 3
39458: PUSH
39459: LD_INT 32
39461: PPUSH
39462: LD_VAR 0 1
39466: PPUSH
39467: CALL_OW 321
39471: PUSH
39472: LD_INT 2
39474: EQUAL
39475: ST_TO_ADDR
39476: GO 39794
39478: LD_INT 20
39480: DOUBLE
39481: EQUAL
39482: IFTRUE 39486
39484: GO 39511
39486: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39487: LD_ADDR_VAR 0 3
39491: PUSH
39492: LD_INT 6
39494: PPUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: CALL_OW 321
39504: PUSH
39505: LD_INT 2
39507: EQUAL
39508: ST_TO_ADDR
39509: GO 39794
39511: LD_INT 22
39513: DOUBLE
39514: EQUAL
39515: IFTRUE 39525
39517: LD_INT 36
39519: DOUBLE
39520: EQUAL
39521: IFTRUE 39525
39523: GO 39550
39525: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39526: LD_ADDR_VAR 0 3
39530: PUSH
39531: LD_INT 15
39533: PPUSH
39534: LD_VAR 0 1
39538: PPUSH
39539: CALL_OW 321
39543: PUSH
39544: LD_INT 2
39546: EQUAL
39547: ST_TO_ADDR
39548: GO 39794
39550: LD_INT 30
39552: DOUBLE
39553: EQUAL
39554: IFTRUE 39558
39556: GO 39583
39558: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39559: LD_ADDR_VAR 0 3
39563: PUSH
39564: LD_INT 20
39566: PPUSH
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 321
39576: PUSH
39577: LD_INT 2
39579: EQUAL
39580: ST_TO_ADDR
39581: GO 39794
39583: LD_INT 28
39585: DOUBLE
39586: EQUAL
39587: IFTRUE 39597
39589: LD_INT 21
39591: DOUBLE
39592: EQUAL
39593: IFTRUE 39597
39595: GO 39622
39597: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39598: LD_ADDR_VAR 0 3
39602: PUSH
39603: LD_INT 21
39605: PPUSH
39606: LD_VAR 0 1
39610: PPUSH
39611: CALL_OW 321
39615: PUSH
39616: LD_INT 2
39618: EQUAL
39619: ST_TO_ADDR
39620: GO 39794
39622: LD_INT 16
39624: DOUBLE
39625: EQUAL
39626: IFTRUE 39630
39628: GO 39655
39630: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39631: LD_ADDR_VAR 0 3
39635: PUSH
39636: LD_INT 84
39638: PPUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 321
39648: PUSH
39649: LD_INT 2
39651: EQUAL
39652: ST_TO_ADDR
39653: GO 39794
39655: LD_INT 19
39657: DOUBLE
39658: EQUAL
39659: IFTRUE 39669
39661: LD_INT 23
39663: DOUBLE
39664: EQUAL
39665: IFTRUE 39669
39667: GO 39694
39669: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39670: LD_ADDR_VAR 0 3
39674: PUSH
39675: LD_INT 83
39677: PPUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 321
39687: PUSH
39688: LD_INT 2
39690: EQUAL
39691: ST_TO_ADDR
39692: GO 39794
39694: LD_INT 17
39696: DOUBLE
39697: EQUAL
39698: IFTRUE 39702
39700: GO 39727
39702: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39703: LD_ADDR_VAR 0 3
39707: PUSH
39708: LD_INT 39
39710: PPUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 321
39720: PUSH
39721: LD_INT 2
39723: EQUAL
39724: ST_TO_ADDR
39725: GO 39794
39727: LD_INT 18
39729: DOUBLE
39730: EQUAL
39731: IFTRUE 39735
39733: GO 39760
39735: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39736: LD_ADDR_VAR 0 3
39740: PUSH
39741: LD_INT 40
39743: PPUSH
39744: LD_VAR 0 1
39748: PPUSH
39749: CALL_OW 321
39753: PUSH
39754: LD_INT 2
39756: EQUAL
39757: ST_TO_ADDR
39758: GO 39794
39760: LD_INT 27
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39793
39768: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: LD_INT 35
39776: PPUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: CALL_OW 321
39786: PUSH
39787: LD_INT 2
39789: EQUAL
39790: ST_TO_ADDR
39791: GO 39794
39793: POP
// end ;
39794: LD_VAR 0 3
39798: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39799: LD_INT 0
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
// result := false ;
39812: LD_ADDR_VAR 0 6
39816: PUSH
39817: LD_INT 0
39819: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39820: LD_VAR 0 1
39824: NOT
39825: PUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: CALL_OW 266
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: IN
39846: NOT
39847: OR
39848: PUSH
39849: LD_VAR 0 2
39853: NOT
39854: OR
39855: PUSH
39856: LD_VAR 0 5
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 2
39869: PUSH
39870: LD_INT 3
39872: PUSH
39873: LD_INT 4
39875: PUSH
39876: LD_INT 5
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: IN
39887: NOT
39888: OR
39889: PUSH
39890: LD_VAR 0 3
39894: PPUSH
39895: LD_VAR 0 4
39899: PPUSH
39900: CALL_OW 488
39904: NOT
39905: OR
39906: IFFALSE 39910
// exit ;
39908: GO 40646
// side := GetSide ( depot ) ;
39910: LD_ADDR_VAR 0 9
39914: PUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 255
39924: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39925: LD_VAR 0 9
39929: PPUSH
39930: LD_VAR 0 2
39934: PPUSH
39935: CALL 39423 0 2
39939: NOT
39940: IFFALSE 39944
// exit ;
39942: GO 40646
// pom := GetBase ( depot ) ;
39944: LD_ADDR_VAR 0 10
39948: PUSH
39949: LD_VAR 0 1
39953: PPUSH
39954: CALL_OW 274
39958: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39959: LD_ADDR_VAR 0 11
39963: PUSH
39964: LD_VAR 0 2
39968: PPUSH
39969: LD_VAR 0 1
39973: PPUSH
39974: CALL_OW 248
39978: PPUSH
39979: CALL_OW 450
39983: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39984: LD_VAR 0 10
39988: PPUSH
39989: LD_INT 1
39991: PPUSH
39992: CALL_OW 275
39996: PUSH
39997: LD_VAR 0 11
40001: PUSH
40002: LD_INT 1
40004: ARRAY
40005: GREATEREQUAL
40006: PUSH
40007: LD_VAR 0 10
40011: PPUSH
40012: LD_INT 2
40014: PPUSH
40015: CALL_OW 275
40019: PUSH
40020: LD_VAR 0 11
40024: PUSH
40025: LD_INT 2
40027: ARRAY
40028: GREATEREQUAL
40029: AND
40030: PUSH
40031: LD_VAR 0 10
40035: PPUSH
40036: LD_INT 3
40038: PPUSH
40039: CALL_OW 275
40043: PUSH
40044: LD_VAR 0 11
40048: PUSH
40049: LD_INT 3
40051: ARRAY
40052: GREATEREQUAL
40053: AND
40054: NOT
40055: IFFALSE 40059
// exit ;
40057: GO 40646
// if GetBType ( depot ) = b_depot then
40059: LD_VAR 0 1
40063: PPUSH
40064: CALL_OW 266
40068: PUSH
40069: LD_INT 0
40071: EQUAL
40072: IFFALSE 40084
// dist := 28 else
40074: LD_ADDR_VAR 0 14
40078: PUSH
40079: LD_INT 28
40081: ST_TO_ADDR
40082: GO 40092
// dist := 36 ;
40084: LD_ADDR_VAR 0 14
40088: PUSH
40089: LD_INT 36
40091: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40092: LD_VAR 0 1
40096: PPUSH
40097: LD_VAR 0 3
40101: PPUSH
40102: LD_VAR 0 4
40106: PPUSH
40107: CALL_OW 297
40111: PUSH
40112: LD_VAR 0 14
40116: GREATER
40117: IFFALSE 40121
// exit ;
40119: GO 40646
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40121: LD_ADDR_VAR 0 12
40125: PUSH
40126: LD_VAR 0 2
40130: PPUSH
40131: LD_VAR 0 3
40135: PPUSH
40136: LD_VAR 0 4
40140: PPUSH
40141: LD_VAR 0 5
40145: PPUSH
40146: LD_VAR 0 1
40150: PPUSH
40151: CALL_OW 248
40155: PPUSH
40156: LD_INT 0
40158: PPUSH
40159: CALL 40651 0 6
40163: ST_TO_ADDR
// if not hexes then
40164: LD_VAR 0 12
40168: NOT
40169: IFFALSE 40173
// exit ;
40171: GO 40646
// hex := GetHexInfo ( x , y ) ;
40173: LD_ADDR_VAR 0 15
40177: PUSH
40178: LD_VAR 0 3
40182: PPUSH
40183: LD_VAR 0 4
40187: PPUSH
40188: CALL_OW 546
40192: ST_TO_ADDR
// if hex [ 1 ] then
40193: LD_VAR 0 15
40197: PUSH
40198: LD_INT 1
40200: ARRAY
40201: IFFALSE 40205
// exit ;
40203: GO 40646
// height := hex [ 2 ] ;
40205: LD_ADDR_VAR 0 13
40209: PUSH
40210: LD_VAR 0 15
40214: PUSH
40215: LD_INT 2
40217: ARRAY
40218: ST_TO_ADDR
// for i = 1 to hexes do
40219: LD_ADDR_VAR 0 7
40223: PUSH
40224: DOUBLE
40225: LD_INT 1
40227: DEC
40228: ST_TO_ADDR
40229: LD_VAR 0 12
40233: PUSH
40234: FOR_TO
40235: IFFALSE 40565
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40237: LD_VAR 0 12
40241: PUSH
40242: LD_VAR 0 7
40246: ARRAY
40247: PUSH
40248: LD_INT 1
40250: ARRAY
40251: PPUSH
40252: LD_VAR 0 12
40256: PUSH
40257: LD_VAR 0 7
40261: ARRAY
40262: PUSH
40263: LD_INT 2
40265: ARRAY
40266: PPUSH
40267: CALL_OW 488
40271: NOT
40272: PUSH
40273: LD_VAR 0 12
40277: PUSH
40278: LD_VAR 0 7
40282: ARRAY
40283: PUSH
40284: LD_INT 1
40286: ARRAY
40287: PPUSH
40288: LD_VAR 0 12
40292: PUSH
40293: LD_VAR 0 7
40297: ARRAY
40298: PUSH
40299: LD_INT 2
40301: ARRAY
40302: PPUSH
40303: CALL_OW 428
40307: PUSH
40308: LD_INT 0
40310: GREATER
40311: OR
40312: PUSH
40313: LD_VAR 0 12
40317: PUSH
40318: LD_VAR 0 7
40322: ARRAY
40323: PUSH
40324: LD_INT 1
40326: ARRAY
40327: PPUSH
40328: LD_VAR 0 12
40332: PUSH
40333: LD_VAR 0 7
40337: ARRAY
40338: PUSH
40339: LD_INT 2
40341: ARRAY
40342: PPUSH
40343: CALL_OW 351
40347: OR
40348: IFFALSE 40354
// exit ;
40350: POP
40351: POP
40352: GO 40646
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40354: LD_ADDR_VAR 0 8
40358: PUSH
40359: LD_VAR 0 12
40363: PUSH
40364: LD_VAR 0 7
40368: ARRAY
40369: PUSH
40370: LD_INT 1
40372: ARRAY
40373: PPUSH
40374: LD_VAR 0 12
40378: PUSH
40379: LD_VAR 0 7
40383: ARRAY
40384: PUSH
40385: LD_INT 2
40387: ARRAY
40388: PPUSH
40389: CALL_OW 546
40393: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40394: LD_VAR 0 8
40398: PUSH
40399: LD_INT 1
40401: ARRAY
40402: PUSH
40403: LD_VAR 0 8
40407: PUSH
40408: LD_INT 2
40410: ARRAY
40411: PUSH
40412: LD_VAR 0 13
40416: PUSH
40417: LD_INT 2
40419: PLUS
40420: GREATER
40421: OR
40422: PUSH
40423: LD_VAR 0 8
40427: PUSH
40428: LD_INT 2
40430: ARRAY
40431: PUSH
40432: LD_VAR 0 13
40436: PUSH
40437: LD_INT 2
40439: MINUS
40440: LESS
40441: OR
40442: PUSH
40443: LD_VAR 0 8
40447: PUSH
40448: LD_INT 3
40450: ARRAY
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 8
40457: PUSH
40458: LD_INT 9
40460: PUSH
40461: LD_INT 10
40463: PUSH
40464: LD_INT 11
40466: PUSH
40467: LD_INT 12
40469: PUSH
40470: LD_INT 13
40472: PUSH
40473: LD_INT 16
40475: PUSH
40476: LD_INT 17
40478: PUSH
40479: LD_INT 18
40481: PUSH
40482: LD_INT 19
40484: PUSH
40485: LD_INT 20
40487: PUSH
40488: LD_INT 21
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: IN
40506: NOT
40507: OR
40508: PUSH
40509: LD_VAR 0 8
40513: PUSH
40514: LD_INT 5
40516: ARRAY
40517: NOT
40518: OR
40519: PUSH
40520: LD_VAR 0 8
40524: PUSH
40525: LD_INT 6
40527: ARRAY
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: LD_INT 2
40534: PUSH
40535: LD_INT 7
40537: PUSH
40538: LD_INT 9
40540: PUSH
40541: LD_INT 10
40543: PUSH
40544: LD_INT 11
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: IN
40555: NOT
40556: OR
40557: IFFALSE 40563
// exit ;
40559: POP
40560: POP
40561: GO 40646
// end ;
40563: GO 40234
40565: POP
40566: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40567: LD_VAR 0 9
40571: PPUSH
40572: LD_VAR 0 3
40576: PPUSH
40577: LD_VAR 0 4
40581: PPUSH
40582: LD_INT 20
40584: PPUSH
40585: CALL 32598 0 4
40589: PUSH
40590: LD_INT 4
40592: ARRAY
40593: IFFALSE 40597
// exit ;
40595: GO 40646
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40597: LD_VAR 0 2
40601: PUSH
40602: LD_INT 29
40604: PUSH
40605: LD_INT 30
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: IN
40612: PUSH
40613: LD_VAR 0 3
40617: PPUSH
40618: LD_VAR 0 4
40622: PPUSH
40623: LD_VAR 0 9
40627: PPUSH
40628: CALL_OW 440
40632: NOT
40633: AND
40634: IFFALSE 40638
// exit ;
40636: GO 40646
// result := true ;
40638: LD_ADDR_VAR 0 6
40642: PUSH
40643: LD_INT 1
40645: ST_TO_ADDR
// end ;
40646: LD_VAR 0 6
40650: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40651: LD_INT 0
40653: PPUSH
40654: PPUSH
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
40659: PPUSH
40660: PPUSH
40661: PPUSH
40662: PPUSH
40663: PPUSH
40664: PPUSH
40665: PPUSH
40666: PPUSH
40667: PPUSH
40668: PPUSH
40669: PPUSH
40670: PPUSH
40671: PPUSH
40672: PPUSH
40673: PPUSH
40674: PPUSH
40675: PPUSH
40676: PPUSH
40677: PPUSH
40678: PPUSH
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
40700: PPUSH
40701: PPUSH
40702: PPUSH
40703: PPUSH
40704: PPUSH
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
40709: PPUSH
40710: PPUSH
// result = [ ] ;
40711: LD_ADDR_VAR 0 7
40715: PUSH
40716: EMPTY
40717: ST_TO_ADDR
// temp_list = [ ] ;
40718: LD_ADDR_VAR 0 9
40722: PUSH
40723: EMPTY
40724: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40725: LD_VAR 0 4
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: LD_INT 4
40744: PUSH
40745: LD_INT 5
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: IN
40756: NOT
40757: PUSH
40758: LD_VAR 0 1
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: IN
40773: PUSH
40774: LD_VAR 0 5
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 2
40784: PUSH
40785: LD_INT 3
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: LIST
40792: IN
40793: NOT
40794: AND
40795: OR
40796: IFFALSE 40800
// exit ;
40798: GO 59191
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40800: LD_VAR 0 1
40804: PUSH
40805: LD_INT 6
40807: PUSH
40808: LD_INT 7
40810: PUSH
40811: LD_INT 8
40813: PUSH
40814: LD_INT 13
40816: PUSH
40817: LD_INT 12
40819: PUSH
40820: LD_INT 15
40822: PUSH
40823: LD_INT 11
40825: PUSH
40826: LD_INT 14
40828: PUSH
40829: LD_INT 10
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: IN
40843: IFFALSE 40853
// btype = b_lab ;
40845: LD_ADDR_VAR 0 1
40849: PUSH
40850: LD_INT 6
40852: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40853: LD_VAR 0 6
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: IN
40872: NOT
40873: PUSH
40874: LD_VAR 0 1
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 3
40890: PUSH
40891: LD_INT 6
40893: PUSH
40894: LD_INT 36
40896: PUSH
40897: LD_INT 4
40899: PUSH
40900: LD_INT 5
40902: PUSH
40903: LD_INT 31
40905: PUSH
40906: LD_INT 32
40908: PUSH
40909: LD_INT 33
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: IN
40925: NOT
40926: PUSH
40927: LD_VAR 0 6
40931: PUSH
40932: LD_INT 1
40934: EQUAL
40935: AND
40936: OR
40937: PUSH
40938: LD_VAR 0 1
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: LD_INT 3
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: IN
40953: NOT
40954: PUSH
40955: LD_VAR 0 6
40959: PUSH
40960: LD_INT 2
40962: EQUAL
40963: AND
40964: OR
40965: IFFALSE 40975
// mode = 0 ;
40967: LD_ADDR_VAR 0 6
40971: PUSH
40972: LD_INT 0
40974: ST_TO_ADDR
// case mode of 0 :
40975: LD_VAR 0 6
40979: PUSH
40980: LD_INT 0
40982: DOUBLE
40983: EQUAL
40984: IFTRUE 40988
40986: GO 52441
40988: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40989: LD_ADDR_VAR 0 11
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 3
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41182: LD_ADDR_VAR 0 12
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: NEG
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 3
41350: NEG
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41378: LD_ADDR_VAR 0 13
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: LD_INT 2
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: NEG
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: LD_INT 3
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 3
41537: NEG
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 3
41549: NEG
41550: PUSH
41551: LD_INT 3
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41577: LD_ADDR_VAR 0 14
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: LD_INT 2
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 3
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 3
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41773: LD_ADDR_VAR 0 15
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 3
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41966: LD_ADDR_VAR 0 16
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 3
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 3
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42159: LD_ADDR_VAR 0 17
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42389: LD_ADDR_VAR 0 18
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: NEG
42589: PUSH
42590: LD_INT 2
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42619: LD_ADDR_VAR 0 19
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 2
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 2
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42849: LD_ADDR_VAR 0 20
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43079: LD_ADDR_VAR 0 21
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 2
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43309: LD_ADDR_VAR 0 22
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43539: LD_ADDR_VAR 0 23
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 3
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 3
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43819: LD_ADDR_VAR 0 24
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 2
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: NEG
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44095: LD_ADDR_VAR 0 25
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 3
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 3
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: LD_INT 3
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 3
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44369: LD_ADDR_VAR 0 26
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 2
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: LD_INT 3
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 3
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44645: LD_ADDR_VAR 0 27
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: LD_INT 2
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 3
44878: NEG
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 3
44890: NEG
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44925: LD_ADDR_VAR 0 28
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 3
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 3
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 3
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 3
45172: NEG
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45207: LD_ADDR_VAR 0 29
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: LD_INT 3
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 3
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: LD_INT 3
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45486: LD_ADDR_VAR 0 30
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 3
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 3
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45764: LD_ADDR_VAR 0 31
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 3
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 3
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 3
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 3
46007: NEG
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46042: LD_ADDR_VAR 0 32
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 3
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: LD_INT 3
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46320: LD_ADDR_VAR 0 33
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 3
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 3
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 3
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 3
46564: NEG
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46599: LD_ADDR_VAR 0 34
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 3
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 3
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46879: LD_ADDR_VAR 0 35
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46991: LD_ADDR_VAR 0 36
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47103: LD_ADDR_VAR 0 37
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47215: LD_ADDR_VAR 0 38
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47327: LD_ADDR_VAR 0 39
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47439: LD_ADDR_VAR 0 40
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47551: LD_ADDR_VAR 0 41
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 3
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 3
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: LD_INT 3
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 3
47825: NEG
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 3
47848: NEG
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: LD_INT 3
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47901: LD_ADDR_VAR 0 42
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: LD_INT 3
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 3
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 3
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 3
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48251: LD_ADDR_VAR 0 43
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 3
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 3
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 3
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: NEG
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48599: LD_ADDR_VAR 0 44
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 3
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 3
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 3
48873: NEG
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: NEG
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 3
48896: NEG
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48949: LD_ADDR_VAR 0 45
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 3
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 3
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 3
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 3
49258: NEG
49259: PUSH
49260: LD_INT 3
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49299: LD_ADDR_VAR 0 46
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 3
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 3
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49647: LD_ADDR_VAR 0 47
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49798: LD_ADDR_VAR 0 48
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49945: LD_ADDR_VAR 0 49
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50089: LD_ADDR_VAR 0 50
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50233: LD_ADDR_VAR 0 51
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50380: LD_ADDR_VAR 0 52
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50531: LD_ADDR_VAR 0 53
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50761: LD_ADDR_VAR 0 54
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50991: LD_ADDR_VAR 0 55
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51221: LD_ADDR_VAR 0 56
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51451: LD_ADDR_VAR 0 57
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51681: LD_ADDR_VAR 0 58
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51911: LD_ADDR_VAR 0 59
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51999: LD_ADDR_VAR 0 60
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52087: LD_ADDR_VAR 0 61
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52175: LD_ADDR_VAR 0 62
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52263: LD_ADDR_VAR 0 63
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52351: LD_ADDR_VAR 0 64
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: ST_TO_ADDR
// end ; 1 :
52439: GO 58336
52441: LD_INT 1
52443: DOUBLE
52444: EQUAL
52445: IFTRUE 52449
52447: GO 55072
52449: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52450: LD_ADDR_VAR 0 11
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 3
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: LIST
52493: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52494: LD_ADDR_VAR 0 12
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 3
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 3
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52535: LD_ADDR_VAR 0 13
52539: PUSH
52540: LD_INT 3
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: LD_INT 3
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: LD_INT 3
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52575: LD_ADDR_VAR 0 14
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 3
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52616: LD_ADDR_VAR 0 15
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 3
52634: NEG
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52660: LD_ADDR_VAR 0 16
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: NEG
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 3
52691: NEG
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52706: LD_ADDR_VAR 0 17
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52750: LD_ADDR_VAR 0 18
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 3
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: LIST
52790: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52791: LD_ADDR_VAR 0 19
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52831: LD_ADDR_VAR 0 20
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 3
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52872: LD_ADDR_VAR 0 21
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 3
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: LIST
52915: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52916: LD_ADDR_VAR 0 22
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52962: LD_ADDR_VAR 0 23
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 3
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 4
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: LIST
53005: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53006: LD_ADDR_VAR 0 24
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 4
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53047: LD_ADDR_VAR 0 25
53051: PUSH
53052: LD_INT 3
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 4
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: LD_INT 4
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53087: LD_ADDR_VAR 0 26
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 4
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53128: LD_ADDR_VAR 0 27
53132: PUSH
53133: LD_INT 3
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 4
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53172: LD_ADDR_VAR 0 28
53176: PUSH
53177: LD_INT 3
53179: NEG
53180: PUSH
53181: LD_INT 3
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: LD_INT 4
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 4
53203: NEG
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53218: LD_ADDR_VAR 0 29
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 4
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 4
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 5
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 5
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 4
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 6
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 6
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 5
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53373: LD_ADDR_VAR 0 30
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 4
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 5
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 5
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 5
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 6
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 6
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53516: LD_ADDR_VAR 0 31
53520: PUSH
53521: LD_INT 3
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: LD_INT 3
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 4
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 4
53563: PUSH
53564: LD_INT 4
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: LD_INT 4
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 5
53583: PUSH
53584: LD_INT 4
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 5
53593: PUSH
53594: LD_INT 5
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 4
53603: PUSH
53604: LD_INT 5
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 6
53613: PUSH
53614: LD_INT 5
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 6
53623: PUSH
53624: LD_INT 6
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 5
53633: PUSH
53634: LD_INT 6
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53655: LD_ADDR_VAR 0 32
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 3
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 4
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 4
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 5
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 5
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 4
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 6
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 6
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 5
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53798: LD_ADDR_VAR 0 33
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 3
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 3
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 3
53839: NEG
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 4
53850: NEG
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 4
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 4
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 5
53884: NEG
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 5
53895: NEG
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 5
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 6
53918: NEG
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 6
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53953: LD_ADDR_VAR 0 34
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: NEG
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: LD_INT 4
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 4
54008: NEG
54009: PUSH
54010: LD_INT 3
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 4
54020: NEG
54021: PUSH
54022: LD_INT 4
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 4
54032: NEG
54033: PUSH
54034: LD_INT 5
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 5
54044: NEG
54045: PUSH
54046: LD_INT 4
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 5
54056: NEG
54057: PUSH
54058: LD_INT 5
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 5
54068: NEG
54069: PUSH
54070: LD_INT 6
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 6
54080: NEG
54081: PUSH
54082: LD_INT 5
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 6
54092: NEG
54093: PUSH
54094: LD_INT 6
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54116: LD_ADDR_VAR 0 41
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54160: LD_ADDR_VAR 0 42
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54201: LD_ADDR_VAR 0 43
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: LD_INT 3
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: LIST
54240: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54241: LD_ADDR_VAR 0 44
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54282: LD_ADDR_VAR 0 45
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 3
54311: NEG
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54326: LD_ADDR_VAR 0 46
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 3
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: LIST
54371: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54372: LD_ADDR_VAR 0 47
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: LD_INT 3
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54405: LD_ADDR_VAR 0 48
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54436: LD_ADDR_VAR 0 49
54440: PUSH
54441: LD_INT 3
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 3
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54465: LD_ADDR_VAR 0 50
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 3
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54494: LD_ADDR_VAR 0 51
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54525: LD_ADDR_VAR 0 52
54529: PUSH
54530: LD_INT 3
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 3
54544: NEG
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54558: LD_ADDR_VAR 0 53
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54602: LD_ADDR_VAR 0 54
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54643: LD_ADDR_VAR 0 55
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54683: LD_ADDR_VAR 0 56
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 3
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 3
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54724: LD_ADDR_VAR 0 57
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: LIST
54767: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54768: LD_ADDR_VAR 0 58
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: NEG
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54814: LD_ADDR_VAR 0 59
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: LIST
54857: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54858: LD_ADDR_VAR 0 60
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: LIST
54898: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54899: LD_ADDR_VAR 0 61
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54939: LD_ADDR_VAR 0 62
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: LIST
54979: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54980: LD_ADDR_VAR 0 63
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: LIST
55023: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55024: LD_ADDR_VAR 0 64
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// end ; 2 :
55070: GO 58336
55072: LD_INT 2
55074: DOUBLE
55075: EQUAL
55076: IFTRUE 55080
55078: GO 58335
55080: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55081: LD_ADDR_VAR 0 29
55085: PUSH
55086: LD_INT 4
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 5
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 5
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 4
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 5
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 3
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 4
55201: PUSH
55202: LD_INT 3
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 4
55211: PUSH
55212: LD_INT 4
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: PUSH
55222: LD_INT 4
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 4
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 4
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 4
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 4
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 5
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 5
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 5
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: NEG
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 4
55420: NEG
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 4
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 4
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 4
55466: NEG
55467: PUSH
55468: LD_INT 4
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 4
55478: NEG
55479: PUSH
55480: LD_INT 5
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: LD_INT 4
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: LD_INT 3
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 4
55514: NEG
55515: PUSH
55516: LD_INT 3
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 5
55526: NEG
55527: PUSH
55528: LD_INT 4
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 5
55538: NEG
55539: PUSH
55540: LD_INT 5
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: LD_INT 5
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 5
55562: NEG
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55619: LD_ADDR_VAR 0 30
55623: PUSH
55624: LD_INT 4
55626: PUSH
55627: LD_INT 4
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 4
55636: PUSH
55637: LD_INT 3
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 5
55646: PUSH
55647: LD_INT 4
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 5
55656: PUSH
55657: LD_INT 5
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 4
55666: PUSH
55667: LD_INT 5
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: LD_INT 4
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 5
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: LD_INT 5
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 4
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 4
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 4
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 4
55809: NEG
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 4
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: NEG
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 4
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 5
55865: NEG
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 5
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 5
55888: NEG
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: LD_INT 4
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: LD_INT 3
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 3
55959: NEG
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 4
55971: NEG
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 4
55983: NEG
55984: PUSH
55985: LD_INT 4
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 4
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 4
56007: NEG
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 4
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 5
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 4
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 4
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: LD_INT 5
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 5
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56166: LD_ADDR_VAR 0 31
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 4
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 3
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 4
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: LD_INT 5
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 5
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 4
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: LD_INT 5
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 4
56322: NEG
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 4
56333: NEG
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 4
56345: NEG
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 4
56368: NEG
56369: PUSH
56370: LD_INT 4
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 4
56380: NEG
56381: PUSH
56382: LD_INT 5
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: NEG
56393: PUSH
56394: LD_INT 4
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 4
56416: NEG
56417: PUSH
56418: LD_INT 3
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 5
56428: NEG
56429: PUSH
56430: LD_INT 4
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 5
56440: NEG
56441: PUSH
56442: LD_INT 5
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: LD_INT 5
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 5
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 3
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 4
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 4
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 4
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 4
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 4
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 5
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 5
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 4
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 5
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56716: LD_ADDR_VAR 0 32
56720: PUSH
56721: LD_INT 4
56723: NEG
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 4
56734: NEG
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 3
56757: NEG
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 4
56768: NEG
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 5
56779: NEG
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 5
56790: NEG
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 5
56802: NEG
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 3
56825: NEG
56826: PUSH
56827: LD_INT 3
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: LD_INT 4
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: LD_INT 3
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 4
56885: NEG
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 4
56897: NEG
56898: PUSH
56899: LD_INT 4
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 4
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 4
56921: NEG
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 5
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 4
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 4
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 5
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: LD_INT 5
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 3
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 4
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 4
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 3
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 2
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 4
57128: PUSH
57129: LD_INT 4
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 4
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 5
57148: PUSH
57149: LD_INT 4
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 5
57158: PUSH
57159: LD_INT 5
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: LD_INT 5
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: LD_INT 4
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: LD_INT 3
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 5
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: LD_INT 5
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57263: LD_ADDR_VAR 0 33
57267: PUSH
57268: LD_INT 4
57270: NEG
57271: PUSH
57272: LD_INT 4
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 4
57282: NEG
57283: PUSH
57284: LD_INT 5
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: NEG
57295: PUSH
57296: LD_INT 4
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: NEG
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 4
57318: NEG
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 5
57330: NEG
57331: PUSH
57332: LD_INT 4
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 5
57342: NEG
57343: PUSH
57344: LD_INT 5
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: LD_INT 5
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 5
57366: NEG
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 3
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 4
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 2
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 4
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: LD_INT 4
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 4
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 4
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 5
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 5
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 4
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 3
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 5
57563: PUSH
57564: LD_INT 2
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: LD_INT 3
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 3
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: LD_INT 3
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 4
57603: PUSH
57604: LD_INT 4
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 3
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 4
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: LD_INT 4
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 4
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 4
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 5
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 5
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 4
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 5
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57801: LD_ADDR_VAR 0 34
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 4
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 5
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 4
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 3
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 3
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 4
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 5
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: LD_INT 5
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 4
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 4
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 4
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 4
58003: PUSH
58004: LD_INT 4
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 4
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 5
58023: PUSH
58024: LD_INT 4
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 5
58033: PUSH
58034: LD_INT 5
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 4
58043: PUSH
58044: LD_INT 5
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: LD_INT 4
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 5
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: LD_INT 5
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 4
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 4
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 3
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: LD_INT 4
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 4
58186: NEG
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 4
58197: NEG
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: NEG
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 4
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 5
58242: NEG
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 5
58253: NEG
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 5
58265: NEG
58266: PUSH
58267: LD_INT 2
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: ST_TO_ADDR
// end ; end ;
58333: GO 58336
58335: POP
// case btype of b_depot , b_warehouse :
58336: LD_VAR 0 1
58340: PUSH
58341: LD_INT 0
58343: DOUBLE
58344: EQUAL
58345: IFTRUE 58355
58347: LD_INT 1
58349: DOUBLE
58350: EQUAL
58351: IFTRUE 58355
58353: GO 58556
58355: POP
// case nation of nation_american :
58356: LD_VAR 0 5
58360: PUSH
58361: LD_INT 1
58363: DOUBLE
58364: EQUAL
58365: IFTRUE 58369
58367: GO 58425
58369: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58370: LD_ADDR_VAR 0 9
58374: PUSH
58375: LD_VAR 0 11
58379: PUSH
58380: LD_VAR 0 12
58384: PUSH
58385: LD_VAR 0 13
58389: PUSH
58390: LD_VAR 0 14
58394: PUSH
58395: LD_VAR 0 15
58399: PUSH
58400: LD_VAR 0 16
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: PUSH
58413: LD_VAR 0 4
58417: PUSH
58418: LD_INT 1
58420: PLUS
58421: ARRAY
58422: ST_TO_ADDR
58423: GO 58554
58425: LD_INT 2
58427: DOUBLE
58428: EQUAL
58429: IFTRUE 58433
58431: GO 58489
58433: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58434: LD_ADDR_VAR 0 9
58438: PUSH
58439: LD_VAR 0 17
58443: PUSH
58444: LD_VAR 0 18
58448: PUSH
58449: LD_VAR 0 19
58453: PUSH
58454: LD_VAR 0 20
58458: PUSH
58459: LD_VAR 0 21
58463: PUSH
58464: LD_VAR 0 22
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: PUSH
58477: LD_VAR 0 4
58481: PUSH
58482: LD_INT 1
58484: PLUS
58485: ARRAY
58486: ST_TO_ADDR
58487: GO 58554
58489: LD_INT 3
58491: DOUBLE
58492: EQUAL
58493: IFTRUE 58497
58495: GO 58553
58497: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58498: LD_ADDR_VAR 0 9
58502: PUSH
58503: LD_VAR 0 23
58507: PUSH
58508: LD_VAR 0 24
58512: PUSH
58513: LD_VAR 0 25
58517: PUSH
58518: LD_VAR 0 26
58522: PUSH
58523: LD_VAR 0 27
58527: PUSH
58528: LD_VAR 0 28
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: PUSH
58541: LD_VAR 0 4
58545: PUSH
58546: LD_INT 1
58548: PLUS
58549: ARRAY
58550: ST_TO_ADDR
58551: GO 58554
58553: POP
58554: GO 59109
58556: LD_INT 2
58558: DOUBLE
58559: EQUAL
58560: IFTRUE 58570
58562: LD_INT 3
58564: DOUBLE
58565: EQUAL
58566: IFTRUE 58570
58568: GO 58626
58570: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58571: LD_ADDR_VAR 0 9
58575: PUSH
58576: LD_VAR 0 29
58580: PUSH
58581: LD_VAR 0 30
58585: PUSH
58586: LD_VAR 0 31
58590: PUSH
58591: LD_VAR 0 32
58595: PUSH
58596: LD_VAR 0 33
58600: PUSH
58601: LD_VAR 0 34
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: PUSH
58614: LD_VAR 0 4
58618: PUSH
58619: LD_INT 1
58621: PLUS
58622: ARRAY
58623: ST_TO_ADDR
58624: GO 59109
58626: LD_INT 16
58628: DOUBLE
58629: EQUAL
58630: IFTRUE 58688
58632: LD_INT 17
58634: DOUBLE
58635: EQUAL
58636: IFTRUE 58688
58638: LD_INT 18
58640: DOUBLE
58641: EQUAL
58642: IFTRUE 58688
58644: LD_INT 19
58646: DOUBLE
58647: EQUAL
58648: IFTRUE 58688
58650: LD_INT 22
58652: DOUBLE
58653: EQUAL
58654: IFTRUE 58688
58656: LD_INT 20
58658: DOUBLE
58659: EQUAL
58660: IFTRUE 58688
58662: LD_INT 21
58664: DOUBLE
58665: EQUAL
58666: IFTRUE 58688
58668: LD_INT 23
58670: DOUBLE
58671: EQUAL
58672: IFTRUE 58688
58674: LD_INT 24
58676: DOUBLE
58677: EQUAL
58678: IFTRUE 58688
58680: LD_INT 25
58682: DOUBLE
58683: EQUAL
58684: IFTRUE 58688
58686: GO 58744
58688: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58689: LD_ADDR_VAR 0 9
58693: PUSH
58694: LD_VAR 0 35
58698: PUSH
58699: LD_VAR 0 36
58703: PUSH
58704: LD_VAR 0 37
58708: PUSH
58709: LD_VAR 0 38
58713: PUSH
58714: LD_VAR 0 39
58718: PUSH
58719: LD_VAR 0 40
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: PUSH
58732: LD_VAR 0 4
58736: PUSH
58737: LD_INT 1
58739: PLUS
58740: ARRAY
58741: ST_TO_ADDR
58742: GO 59109
58744: LD_INT 6
58746: DOUBLE
58747: EQUAL
58748: IFTRUE 58800
58750: LD_INT 7
58752: DOUBLE
58753: EQUAL
58754: IFTRUE 58800
58756: LD_INT 8
58758: DOUBLE
58759: EQUAL
58760: IFTRUE 58800
58762: LD_INT 13
58764: DOUBLE
58765: EQUAL
58766: IFTRUE 58800
58768: LD_INT 12
58770: DOUBLE
58771: EQUAL
58772: IFTRUE 58800
58774: LD_INT 15
58776: DOUBLE
58777: EQUAL
58778: IFTRUE 58800
58780: LD_INT 11
58782: DOUBLE
58783: EQUAL
58784: IFTRUE 58800
58786: LD_INT 14
58788: DOUBLE
58789: EQUAL
58790: IFTRUE 58800
58792: LD_INT 10
58794: DOUBLE
58795: EQUAL
58796: IFTRUE 58800
58798: GO 58856
58800: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58801: LD_ADDR_VAR 0 9
58805: PUSH
58806: LD_VAR 0 41
58810: PUSH
58811: LD_VAR 0 42
58815: PUSH
58816: LD_VAR 0 43
58820: PUSH
58821: LD_VAR 0 44
58825: PUSH
58826: LD_VAR 0 45
58830: PUSH
58831: LD_VAR 0 46
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: PUSH
58844: LD_VAR 0 4
58848: PUSH
58849: LD_INT 1
58851: PLUS
58852: ARRAY
58853: ST_TO_ADDR
58854: GO 59109
58856: LD_INT 36
58858: DOUBLE
58859: EQUAL
58860: IFTRUE 58864
58862: GO 58920
58864: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58865: LD_ADDR_VAR 0 9
58869: PUSH
58870: LD_VAR 0 47
58874: PUSH
58875: LD_VAR 0 48
58879: PUSH
58880: LD_VAR 0 49
58884: PUSH
58885: LD_VAR 0 50
58889: PUSH
58890: LD_VAR 0 51
58894: PUSH
58895: LD_VAR 0 52
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: PUSH
58908: LD_VAR 0 4
58912: PUSH
58913: LD_INT 1
58915: PLUS
58916: ARRAY
58917: ST_TO_ADDR
58918: GO 59109
58920: LD_INT 4
58922: DOUBLE
58923: EQUAL
58924: IFTRUE 58946
58926: LD_INT 5
58928: DOUBLE
58929: EQUAL
58930: IFTRUE 58946
58932: LD_INT 34
58934: DOUBLE
58935: EQUAL
58936: IFTRUE 58946
58938: LD_INT 37
58940: DOUBLE
58941: EQUAL
58942: IFTRUE 58946
58944: GO 59002
58946: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58947: LD_ADDR_VAR 0 9
58951: PUSH
58952: LD_VAR 0 53
58956: PUSH
58957: LD_VAR 0 54
58961: PUSH
58962: LD_VAR 0 55
58966: PUSH
58967: LD_VAR 0 56
58971: PUSH
58972: LD_VAR 0 57
58976: PUSH
58977: LD_VAR 0 58
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: PUSH
58990: LD_VAR 0 4
58994: PUSH
58995: LD_INT 1
58997: PLUS
58998: ARRAY
58999: ST_TO_ADDR
59000: GO 59109
59002: LD_INT 31
59004: DOUBLE
59005: EQUAL
59006: IFTRUE 59052
59008: LD_INT 32
59010: DOUBLE
59011: EQUAL
59012: IFTRUE 59052
59014: LD_INT 33
59016: DOUBLE
59017: EQUAL
59018: IFTRUE 59052
59020: LD_INT 27
59022: DOUBLE
59023: EQUAL
59024: IFTRUE 59052
59026: LD_INT 26
59028: DOUBLE
59029: EQUAL
59030: IFTRUE 59052
59032: LD_INT 28
59034: DOUBLE
59035: EQUAL
59036: IFTRUE 59052
59038: LD_INT 29
59040: DOUBLE
59041: EQUAL
59042: IFTRUE 59052
59044: LD_INT 30
59046: DOUBLE
59047: EQUAL
59048: IFTRUE 59052
59050: GO 59108
59052: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59053: LD_ADDR_VAR 0 9
59057: PUSH
59058: LD_VAR 0 59
59062: PUSH
59063: LD_VAR 0 60
59067: PUSH
59068: LD_VAR 0 61
59072: PUSH
59073: LD_VAR 0 62
59077: PUSH
59078: LD_VAR 0 63
59082: PUSH
59083: LD_VAR 0 64
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: PUSH
59096: LD_VAR 0 4
59100: PUSH
59101: LD_INT 1
59103: PLUS
59104: ARRAY
59105: ST_TO_ADDR
59106: GO 59109
59108: POP
// temp_list2 = [ ] ;
59109: LD_ADDR_VAR 0 10
59113: PUSH
59114: EMPTY
59115: ST_TO_ADDR
// for i in temp_list do
59116: LD_ADDR_VAR 0 8
59120: PUSH
59121: LD_VAR 0 9
59125: PUSH
59126: FOR_IN
59127: IFFALSE 59179
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59129: LD_ADDR_VAR 0 10
59133: PUSH
59134: LD_VAR 0 10
59138: PUSH
59139: LD_VAR 0 8
59143: PUSH
59144: LD_INT 1
59146: ARRAY
59147: PUSH
59148: LD_VAR 0 2
59152: PLUS
59153: PUSH
59154: LD_VAR 0 8
59158: PUSH
59159: LD_INT 2
59161: ARRAY
59162: PUSH
59163: LD_VAR 0 3
59167: PLUS
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: EMPTY
59174: LIST
59175: ADD
59176: ST_TO_ADDR
59177: GO 59126
59179: POP
59180: POP
// result = temp_list2 ;
59181: LD_ADDR_VAR 0 7
59185: PUSH
59186: LD_VAR 0 10
59190: ST_TO_ADDR
// end ;
59191: LD_VAR 0 7
59195: RET
// export function EnemyInRange ( unit , dist ) ; begin
59196: LD_INT 0
59198: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59199: LD_ADDR_VAR 0 3
59203: PUSH
59204: LD_VAR 0 1
59208: PPUSH
59209: CALL_OW 255
59213: PPUSH
59214: LD_VAR 0 1
59218: PPUSH
59219: CALL_OW 250
59223: PPUSH
59224: LD_VAR 0 1
59228: PPUSH
59229: CALL_OW 251
59233: PPUSH
59234: LD_VAR 0 2
59238: PPUSH
59239: CALL 32598 0 4
59243: PUSH
59244: LD_INT 4
59246: ARRAY
59247: ST_TO_ADDR
// end ;
59248: LD_VAR 0 3
59252: RET
// export function PlayerSeeMe ( unit ) ; begin
59253: LD_INT 0
59255: PPUSH
// result := See ( your_side , unit ) ;
59256: LD_ADDR_VAR 0 2
59260: PUSH
59261: LD_OWVAR 2
59265: PPUSH
59266: LD_VAR 0 1
59270: PPUSH
59271: CALL_OW 292
59275: ST_TO_ADDR
// end ;
59276: LD_VAR 0 2
59280: RET
// export function ReverseDir ( unit ) ; begin
59281: LD_INT 0
59283: PPUSH
// if not unit then
59284: LD_VAR 0 1
59288: NOT
59289: IFFALSE 59293
// exit ;
59291: GO 59316
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59293: LD_ADDR_VAR 0 2
59297: PUSH
59298: LD_VAR 0 1
59302: PPUSH
59303: CALL_OW 254
59307: PUSH
59308: LD_INT 3
59310: PLUS
59311: PUSH
59312: LD_INT 6
59314: MOD
59315: ST_TO_ADDR
// end ;
59316: LD_VAR 0 2
59320: RET
// export function ReverseArray ( array ) ; var i ; begin
59321: LD_INT 0
59323: PPUSH
59324: PPUSH
// if not array then
59325: LD_VAR 0 1
59329: NOT
59330: IFFALSE 59334
// exit ;
59332: GO 59389
// result := [ ] ;
59334: LD_ADDR_VAR 0 2
59338: PUSH
59339: EMPTY
59340: ST_TO_ADDR
// for i := array downto 1 do
59341: LD_ADDR_VAR 0 3
59345: PUSH
59346: DOUBLE
59347: LD_VAR 0 1
59351: INC
59352: ST_TO_ADDR
59353: LD_INT 1
59355: PUSH
59356: FOR_DOWNTO
59357: IFFALSE 59387
// result := Join ( result , array [ i ] ) ;
59359: LD_ADDR_VAR 0 2
59363: PUSH
59364: LD_VAR 0 2
59368: PPUSH
59369: LD_VAR 0 1
59373: PUSH
59374: LD_VAR 0 3
59378: ARRAY
59379: PPUSH
59380: CALL 64014 0 2
59384: ST_TO_ADDR
59385: GO 59356
59387: POP
59388: POP
// end ;
59389: LD_VAR 0 2
59393: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59394: LD_INT 0
59396: PPUSH
59397: PPUSH
59398: PPUSH
59399: PPUSH
59400: PPUSH
59401: PPUSH
// if not unit or not hexes then
59402: LD_VAR 0 1
59406: NOT
59407: PUSH
59408: LD_VAR 0 2
59412: NOT
59413: OR
59414: IFFALSE 59418
// exit ;
59416: GO 59541
// dist := 9999 ;
59418: LD_ADDR_VAR 0 5
59422: PUSH
59423: LD_INT 9999
59425: ST_TO_ADDR
// for i = 1 to hexes do
59426: LD_ADDR_VAR 0 4
59430: PUSH
59431: DOUBLE
59432: LD_INT 1
59434: DEC
59435: ST_TO_ADDR
59436: LD_VAR 0 2
59440: PUSH
59441: FOR_TO
59442: IFFALSE 59529
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59444: LD_ADDR_VAR 0 6
59448: PUSH
59449: LD_VAR 0 1
59453: PPUSH
59454: LD_VAR 0 2
59458: PUSH
59459: LD_VAR 0 4
59463: ARRAY
59464: PUSH
59465: LD_INT 1
59467: ARRAY
59468: PPUSH
59469: LD_VAR 0 2
59473: PUSH
59474: LD_VAR 0 4
59478: ARRAY
59479: PUSH
59480: LD_INT 2
59482: ARRAY
59483: PPUSH
59484: CALL_OW 297
59488: ST_TO_ADDR
// if tdist < dist then
59489: LD_VAR 0 6
59493: PUSH
59494: LD_VAR 0 5
59498: LESS
59499: IFFALSE 59527
// begin hex := hexes [ i ] ;
59501: LD_ADDR_VAR 0 8
59505: PUSH
59506: LD_VAR 0 2
59510: PUSH
59511: LD_VAR 0 4
59515: ARRAY
59516: ST_TO_ADDR
// dist := tdist ;
59517: LD_ADDR_VAR 0 5
59521: PUSH
59522: LD_VAR 0 6
59526: ST_TO_ADDR
// end ; end ;
59527: GO 59441
59529: POP
59530: POP
// result := hex ;
59531: LD_ADDR_VAR 0 3
59535: PUSH
59536: LD_VAR 0 8
59540: ST_TO_ADDR
// end ;
59541: LD_VAR 0 3
59545: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59546: LD_INT 0
59548: PPUSH
59549: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59550: LD_VAR 0 1
59554: NOT
59555: PUSH
59556: LD_VAR 0 1
59560: PUSH
59561: LD_INT 21
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 23
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PPUSH
59585: CALL_OW 69
59589: IN
59590: NOT
59591: OR
59592: IFFALSE 59596
// exit ;
59594: GO 59643
// for i = 1 to 3 do
59596: LD_ADDR_VAR 0 3
59600: PUSH
59601: DOUBLE
59602: LD_INT 1
59604: DEC
59605: ST_TO_ADDR
59606: LD_INT 3
59608: PUSH
59609: FOR_TO
59610: IFFALSE 59641
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59612: LD_VAR 0 1
59616: PPUSH
59617: CALL_OW 250
59621: PPUSH
59622: LD_VAR 0 1
59626: PPUSH
59627: CALL_OW 251
59631: PPUSH
59632: LD_INT 1
59634: PPUSH
59635: CALL_OW 453
59639: GO 59609
59641: POP
59642: POP
// end ;
59643: LD_VAR 0 2
59647: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59648: LD_INT 0
59650: PPUSH
59651: PPUSH
59652: PPUSH
59653: PPUSH
59654: PPUSH
59655: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59656: LD_VAR 0 1
59660: NOT
59661: PUSH
59662: LD_VAR 0 2
59666: NOT
59667: OR
59668: PUSH
59669: LD_VAR 0 1
59673: PPUSH
59674: CALL_OW 314
59678: OR
59679: IFFALSE 59683
// exit ;
59681: GO 60124
// x := GetX ( enemy_unit ) ;
59683: LD_ADDR_VAR 0 7
59687: PUSH
59688: LD_VAR 0 2
59692: PPUSH
59693: CALL_OW 250
59697: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59698: LD_ADDR_VAR 0 8
59702: PUSH
59703: LD_VAR 0 2
59707: PPUSH
59708: CALL_OW 251
59712: ST_TO_ADDR
// if not x or not y then
59713: LD_VAR 0 7
59717: NOT
59718: PUSH
59719: LD_VAR 0 8
59723: NOT
59724: OR
59725: IFFALSE 59729
// exit ;
59727: GO 60124
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59729: LD_ADDR_VAR 0 6
59733: PUSH
59734: LD_VAR 0 7
59738: PPUSH
59739: LD_INT 0
59741: PPUSH
59742: LD_INT 4
59744: PPUSH
59745: CALL_OW 272
59749: PUSH
59750: LD_VAR 0 8
59754: PPUSH
59755: LD_INT 0
59757: PPUSH
59758: LD_INT 4
59760: PPUSH
59761: CALL_OW 273
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_VAR 0 7
59774: PPUSH
59775: LD_INT 1
59777: PPUSH
59778: LD_INT 4
59780: PPUSH
59781: CALL_OW 272
59785: PUSH
59786: LD_VAR 0 8
59790: PPUSH
59791: LD_INT 1
59793: PPUSH
59794: LD_INT 4
59796: PPUSH
59797: CALL_OW 273
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_VAR 0 7
59810: PPUSH
59811: LD_INT 2
59813: PPUSH
59814: LD_INT 4
59816: PPUSH
59817: CALL_OW 272
59821: PUSH
59822: LD_VAR 0 8
59826: PPUSH
59827: LD_INT 2
59829: PPUSH
59830: LD_INT 4
59832: PPUSH
59833: CALL_OW 273
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_VAR 0 7
59846: PPUSH
59847: LD_INT 3
59849: PPUSH
59850: LD_INT 4
59852: PPUSH
59853: CALL_OW 272
59857: PUSH
59858: LD_VAR 0 8
59862: PPUSH
59863: LD_INT 3
59865: PPUSH
59866: LD_INT 4
59868: PPUSH
59869: CALL_OW 273
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_VAR 0 7
59882: PPUSH
59883: LD_INT 4
59885: PPUSH
59886: LD_INT 4
59888: PPUSH
59889: CALL_OW 272
59893: PUSH
59894: LD_VAR 0 8
59898: PPUSH
59899: LD_INT 4
59901: PPUSH
59902: LD_INT 4
59904: PPUSH
59905: CALL_OW 273
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_VAR 0 7
59918: PPUSH
59919: LD_INT 5
59921: PPUSH
59922: LD_INT 4
59924: PPUSH
59925: CALL_OW 272
59929: PUSH
59930: LD_VAR 0 8
59934: PPUSH
59935: LD_INT 5
59937: PPUSH
59938: LD_INT 4
59940: PPUSH
59941: CALL_OW 273
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: ST_TO_ADDR
// for i = tmp downto 1 do
59958: LD_ADDR_VAR 0 4
59962: PUSH
59963: DOUBLE
59964: LD_VAR 0 6
59968: INC
59969: ST_TO_ADDR
59970: LD_INT 1
59972: PUSH
59973: FOR_DOWNTO
59974: IFFALSE 60075
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59976: LD_VAR 0 6
59980: PUSH
59981: LD_VAR 0 4
59985: ARRAY
59986: PUSH
59987: LD_INT 1
59989: ARRAY
59990: PPUSH
59991: LD_VAR 0 6
59995: PUSH
59996: LD_VAR 0 4
60000: ARRAY
60001: PUSH
60002: LD_INT 2
60004: ARRAY
60005: PPUSH
60006: CALL_OW 488
60010: NOT
60011: PUSH
60012: LD_VAR 0 6
60016: PUSH
60017: LD_VAR 0 4
60021: ARRAY
60022: PUSH
60023: LD_INT 1
60025: ARRAY
60026: PPUSH
60027: LD_VAR 0 6
60031: PUSH
60032: LD_VAR 0 4
60036: ARRAY
60037: PUSH
60038: LD_INT 2
60040: ARRAY
60041: PPUSH
60042: CALL_OW 428
60046: PUSH
60047: LD_INT 0
60049: NONEQUAL
60050: OR
60051: IFFALSE 60073
// tmp := Delete ( tmp , i ) ;
60053: LD_ADDR_VAR 0 6
60057: PUSH
60058: LD_VAR 0 6
60062: PPUSH
60063: LD_VAR 0 4
60067: PPUSH
60068: CALL_OW 3
60072: ST_TO_ADDR
60073: GO 59973
60075: POP
60076: POP
// j := GetClosestHex ( unit , tmp ) ;
60077: LD_ADDR_VAR 0 5
60081: PUSH
60082: LD_VAR 0 1
60086: PPUSH
60087: LD_VAR 0 6
60091: PPUSH
60092: CALL 59394 0 2
60096: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60097: LD_VAR 0 1
60101: PPUSH
60102: LD_VAR 0 5
60106: PUSH
60107: LD_INT 1
60109: ARRAY
60110: PPUSH
60111: LD_VAR 0 5
60115: PUSH
60116: LD_INT 2
60118: ARRAY
60119: PPUSH
60120: CALL_OW 111
// end ;
60124: LD_VAR 0 3
60128: RET
// export function PrepareApemanSoldier ( ) ; begin
60129: LD_INT 0
60131: PPUSH
// uc_nation := 0 ;
60132: LD_ADDR_OWVAR 21
60136: PUSH
60137: LD_INT 0
60139: ST_TO_ADDR
// hc_sex := sex_male ;
60140: LD_ADDR_OWVAR 27
60144: PUSH
60145: LD_INT 1
60147: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60148: LD_ADDR_OWVAR 28
60152: PUSH
60153: LD_INT 15
60155: ST_TO_ADDR
// hc_gallery :=  ;
60156: LD_ADDR_OWVAR 33
60160: PUSH
60161: LD_STRING 
60163: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60164: LD_ADDR_OWVAR 31
60168: PUSH
60169: LD_INT 0
60171: PPUSH
60172: LD_INT 3
60174: PPUSH
60175: CALL_OW 12
60179: PUSH
60180: LD_INT 0
60182: PPUSH
60183: LD_INT 3
60185: PPUSH
60186: CALL_OW 12
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: ST_TO_ADDR
// end ;
60203: LD_VAR 0 1
60207: RET
// export function PrepareApemanEngineer ( ) ; begin
60208: LD_INT 0
60210: PPUSH
// uc_nation := 0 ;
60211: LD_ADDR_OWVAR 21
60215: PUSH
60216: LD_INT 0
60218: ST_TO_ADDR
// hc_sex := sex_male ;
60219: LD_ADDR_OWVAR 27
60223: PUSH
60224: LD_INT 1
60226: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60227: LD_ADDR_OWVAR 28
60231: PUSH
60232: LD_INT 16
60234: ST_TO_ADDR
// hc_gallery :=  ;
60235: LD_ADDR_OWVAR 33
60239: PUSH
60240: LD_STRING 
60242: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60243: LD_ADDR_OWVAR 31
60247: PUSH
60248: LD_INT 0
60250: PPUSH
60251: LD_INT 3
60253: PPUSH
60254: CALL_OW 12
60258: PUSH
60259: LD_INT 0
60261: PPUSH
60262: LD_INT 3
60264: PPUSH
60265: CALL_OW 12
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: ST_TO_ADDR
// end ;
60282: LD_VAR 0 1
60286: RET
// export function PrepareApeman ( agressivity ) ; begin
60287: LD_INT 0
60289: PPUSH
// uc_side := 0 ;
60290: LD_ADDR_OWVAR 20
60294: PUSH
60295: LD_INT 0
60297: ST_TO_ADDR
// uc_nation := 0 ;
60298: LD_ADDR_OWVAR 21
60302: PUSH
60303: LD_INT 0
60305: ST_TO_ADDR
// hc_sex := sex_male ;
60306: LD_ADDR_OWVAR 27
60310: PUSH
60311: LD_INT 1
60313: ST_TO_ADDR
// hc_class := class_apeman ;
60314: LD_ADDR_OWVAR 28
60318: PUSH
60319: LD_INT 12
60321: ST_TO_ADDR
// hc_gallery :=  ;
60322: LD_ADDR_OWVAR 33
60326: PUSH
60327: LD_STRING 
60329: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60330: LD_ADDR_OWVAR 35
60334: PUSH
60335: LD_VAR 0 1
60339: NEG
60340: PPUSH
60341: LD_VAR 0 1
60345: PPUSH
60346: CALL_OW 12
60350: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60351: LD_ADDR_OWVAR 31
60355: PUSH
60356: LD_INT 0
60358: PPUSH
60359: LD_INT 3
60361: PPUSH
60362: CALL_OW 12
60366: PUSH
60367: LD_INT 0
60369: PPUSH
60370: LD_INT 3
60372: PPUSH
60373: CALL_OW 12
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: ST_TO_ADDR
// end ;
60390: LD_VAR 0 2
60394: RET
// export function PrepareTiger ( agressivity ) ; begin
60395: LD_INT 0
60397: PPUSH
// uc_side := 0 ;
60398: LD_ADDR_OWVAR 20
60402: PUSH
60403: LD_INT 0
60405: ST_TO_ADDR
// uc_nation := 0 ;
60406: LD_ADDR_OWVAR 21
60410: PUSH
60411: LD_INT 0
60413: ST_TO_ADDR
// hc_class := class_tiger ;
60414: LD_ADDR_OWVAR 28
60418: PUSH
60419: LD_INT 14
60421: ST_TO_ADDR
// hc_gallery :=  ;
60422: LD_ADDR_OWVAR 33
60426: PUSH
60427: LD_STRING 
60429: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60430: LD_ADDR_OWVAR 35
60434: PUSH
60435: LD_VAR 0 1
60439: NEG
60440: PPUSH
60441: LD_VAR 0 1
60445: PPUSH
60446: CALL_OW 12
60450: ST_TO_ADDR
// end ;
60451: LD_VAR 0 2
60455: RET
// export function PrepareEnchidna ( ) ; begin
60456: LD_INT 0
60458: PPUSH
// uc_side := 0 ;
60459: LD_ADDR_OWVAR 20
60463: PUSH
60464: LD_INT 0
60466: ST_TO_ADDR
// uc_nation := 0 ;
60467: LD_ADDR_OWVAR 21
60471: PUSH
60472: LD_INT 0
60474: ST_TO_ADDR
// hc_class := class_baggie ;
60475: LD_ADDR_OWVAR 28
60479: PUSH
60480: LD_INT 13
60482: ST_TO_ADDR
// hc_gallery :=  ;
60483: LD_ADDR_OWVAR 33
60487: PUSH
60488: LD_STRING 
60490: ST_TO_ADDR
// end ;
60491: LD_VAR 0 1
60495: RET
// export function PrepareFrog ( ) ; begin
60496: LD_INT 0
60498: PPUSH
// uc_side := 0 ;
60499: LD_ADDR_OWVAR 20
60503: PUSH
60504: LD_INT 0
60506: ST_TO_ADDR
// uc_nation := 0 ;
60507: LD_ADDR_OWVAR 21
60511: PUSH
60512: LD_INT 0
60514: ST_TO_ADDR
// hc_class := class_frog ;
60515: LD_ADDR_OWVAR 28
60519: PUSH
60520: LD_INT 19
60522: ST_TO_ADDR
// hc_gallery :=  ;
60523: LD_ADDR_OWVAR 33
60527: PUSH
60528: LD_STRING 
60530: ST_TO_ADDR
// end ;
60531: LD_VAR 0 1
60535: RET
// export function PrepareFish ( ) ; begin
60536: LD_INT 0
60538: PPUSH
// uc_side := 0 ;
60539: LD_ADDR_OWVAR 20
60543: PUSH
60544: LD_INT 0
60546: ST_TO_ADDR
// uc_nation := 0 ;
60547: LD_ADDR_OWVAR 21
60551: PUSH
60552: LD_INT 0
60554: ST_TO_ADDR
// hc_class := class_fish ;
60555: LD_ADDR_OWVAR 28
60559: PUSH
60560: LD_INT 20
60562: ST_TO_ADDR
// hc_gallery :=  ;
60563: LD_ADDR_OWVAR 33
60567: PUSH
60568: LD_STRING 
60570: ST_TO_ADDR
// end ;
60571: LD_VAR 0 1
60575: RET
// export function PrepareBird ( ) ; begin
60576: LD_INT 0
60578: PPUSH
// uc_side := 0 ;
60579: LD_ADDR_OWVAR 20
60583: PUSH
60584: LD_INT 0
60586: ST_TO_ADDR
// uc_nation := 0 ;
60587: LD_ADDR_OWVAR 21
60591: PUSH
60592: LD_INT 0
60594: ST_TO_ADDR
// hc_class := class_phororhacos ;
60595: LD_ADDR_OWVAR 28
60599: PUSH
60600: LD_INT 18
60602: ST_TO_ADDR
// hc_gallery :=  ;
60603: LD_ADDR_OWVAR 33
60607: PUSH
60608: LD_STRING 
60610: ST_TO_ADDR
// end ;
60611: LD_VAR 0 1
60615: RET
// export function PrepareHorse ( ) ; begin
60616: LD_INT 0
60618: PPUSH
// uc_side := 0 ;
60619: LD_ADDR_OWVAR 20
60623: PUSH
60624: LD_INT 0
60626: ST_TO_ADDR
// uc_nation := 0 ;
60627: LD_ADDR_OWVAR 21
60631: PUSH
60632: LD_INT 0
60634: ST_TO_ADDR
// hc_class := class_horse ;
60635: LD_ADDR_OWVAR 28
60639: PUSH
60640: LD_INT 21
60642: ST_TO_ADDR
// hc_gallery :=  ;
60643: LD_ADDR_OWVAR 33
60647: PUSH
60648: LD_STRING 
60650: ST_TO_ADDR
// end ;
60651: LD_VAR 0 1
60655: RET
// export function PrepareMastodont ( ) ; begin
60656: LD_INT 0
60658: PPUSH
// uc_side := 0 ;
60659: LD_ADDR_OWVAR 20
60663: PUSH
60664: LD_INT 0
60666: ST_TO_ADDR
// uc_nation := 0 ;
60667: LD_ADDR_OWVAR 21
60671: PUSH
60672: LD_INT 0
60674: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60675: LD_ADDR_OWVAR 37
60679: PUSH
60680: LD_INT 31
60682: ST_TO_ADDR
// vc_control := control_rider ;
60683: LD_ADDR_OWVAR 38
60687: PUSH
60688: LD_INT 4
60690: ST_TO_ADDR
// end ;
60691: LD_VAR 0 1
60695: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60696: LD_INT 0
60698: PPUSH
60699: PPUSH
60700: PPUSH
// uc_side = 0 ;
60701: LD_ADDR_OWVAR 20
60705: PUSH
60706: LD_INT 0
60708: ST_TO_ADDR
// uc_nation = 0 ;
60709: LD_ADDR_OWVAR 21
60713: PUSH
60714: LD_INT 0
60716: ST_TO_ADDR
// InitHc_All ( ) ;
60717: CALL_OW 584
// InitVc ;
60721: CALL_OW 20
// if mastodonts then
60725: LD_VAR 0 6
60729: IFFALSE 60796
// for i = 1 to mastodonts do
60731: LD_ADDR_VAR 0 11
60735: PUSH
60736: DOUBLE
60737: LD_INT 1
60739: DEC
60740: ST_TO_ADDR
60741: LD_VAR 0 6
60745: PUSH
60746: FOR_TO
60747: IFFALSE 60794
// begin vc_chassis := 31 ;
60749: LD_ADDR_OWVAR 37
60753: PUSH
60754: LD_INT 31
60756: ST_TO_ADDR
// vc_control := control_rider ;
60757: LD_ADDR_OWVAR 38
60761: PUSH
60762: LD_INT 4
60764: ST_TO_ADDR
// animal := CreateVehicle ;
60765: LD_ADDR_VAR 0 12
60769: PUSH
60770: CALL_OW 45
60774: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60775: LD_VAR 0 12
60779: PPUSH
60780: LD_VAR 0 8
60784: PPUSH
60785: LD_INT 0
60787: PPUSH
60788: CALL 62931 0 3
// end ;
60792: GO 60746
60794: POP
60795: POP
// if horses then
60796: LD_VAR 0 5
60800: IFFALSE 60867
// for i = 1 to horses do
60802: LD_ADDR_VAR 0 11
60806: PUSH
60807: DOUBLE
60808: LD_INT 1
60810: DEC
60811: ST_TO_ADDR
60812: LD_VAR 0 5
60816: PUSH
60817: FOR_TO
60818: IFFALSE 60865
// begin hc_class := 21 ;
60820: LD_ADDR_OWVAR 28
60824: PUSH
60825: LD_INT 21
60827: ST_TO_ADDR
// hc_gallery :=  ;
60828: LD_ADDR_OWVAR 33
60832: PUSH
60833: LD_STRING 
60835: ST_TO_ADDR
// animal := CreateHuman ;
60836: LD_ADDR_VAR 0 12
60840: PUSH
60841: CALL_OW 44
60845: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60846: LD_VAR 0 12
60850: PPUSH
60851: LD_VAR 0 8
60855: PPUSH
60856: LD_INT 0
60858: PPUSH
60859: CALL 62931 0 3
// end ;
60863: GO 60817
60865: POP
60866: POP
// if birds then
60867: LD_VAR 0 1
60871: IFFALSE 60938
// for i = 1 to birds do
60873: LD_ADDR_VAR 0 11
60877: PUSH
60878: DOUBLE
60879: LD_INT 1
60881: DEC
60882: ST_TO_ADDR
60883: LD_VAR 0 1
60887: PUSH
60888: FOR_TO
60889: IFFALSE 60936
// begin hc_class = 18 ;
60891: LD_ADDR_OWVAR 28
60895: PUSH
60896: LD_INT 18
60898: ST_TO_ADDR
// hc_gallery =  ;
60899: LD_ADDR_OWVAR 33
60903: PUSH
60904: LD_STRING 
60906: ST_TO_ADDR
// animal := CreateHuman ;
60907: LD_ADDR_VAR 0 12
60911: PUSH
60912: CALL_OW 44
60916: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60917: LD_VAR 0 12
60921: PPUSH
60922: LD_VAR 0 8
60926: PPUSH
60927: LD_INT 0
60929: PPUSH
60930: CALL 62931 0 3
// end ;
60934: GO 60888
60936: POP
60937: POP
// if tigers then
60938: LD_VAR 0 2
60942: IFFALSE 61026
// for i = 1 to tigers do
60944: LD_ADDR_VAR 0 11
60948: PUSH
60949: DOUBLE
60950: LD_INT 1
60952: DEC
60953: ST_TO_ADDR
60954: LD_VAR 0 2
60958: PUSH
60959: FOR_TO
60960: IFFALSE 61024
// begin hc_class = class_tiger ;
60962: LD_ADDR_OWVAR 28
60966: PUSH
60967: LD_INT 14
60969: ST_TO_ADDR
// hc_gallery =  ;
60970: LD_ADDR_OWVAR 33
60974: PUSH
60975: LD_STRING 
60977: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60978: LD_ADDR_OWVAR 35
60982: PUSH
60983: LD_INT 7
60985: NEG
60986: PPUSH
60987: LD_INT 7
60989: PPUSH
60990: CALL_OW 12
60994: ST_TO_ADDR
// animal := CreateHuman ;
60995: LD_ADDR_VAR 0 12
60999: PUSH
61000: CALL_OW 44
61004: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61005: LD_VAR 0 12
61009: PPUSH
61010: LD_VAR 0 8
61014: PPUSH
61015: LD_INT 0
61017: PPUSH
61018: CALL 62931 0 3
// end ;
61022: GO 60959
61024: POP
61025: POP
// if apemans then
61026: LD_VAR 0 3
61030: IFFALSE 61153
// for i = 1 to apemans do
61032: LD_ADDR_VAR 0 11
61036: PUSH
61037: DOUBLE
61038: LD_INT 1
61040: DEC
61041: ST_TO_ADDR
61042: LD_VAR 0 3
61046: PUSH
61047: FOR_TO
61048: IFFALSE 61151
// begin hc_class = class_apeman ;
61050: LD_ADDR_OWVAR 28
61054: PUSH
61055: LD_INT 12
61057: ST_TO_ADDR
// hc_gallery =  ;
61058: LD_ADDR_OWVAR 33
61062: PUSH
61063: LD_STRING 
61065: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61066: LD_ADDR_OWVAR 35
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PPUSH
61075: LD_INT 2
61077: PPUSH
61078: CALL_OW 12
61082: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61083: LD_ADDR_OWVAR 31
61087: PUSH
61088: LD_INT 1
61090: PPUSH
61091: LD_INT 3
61093: PPUSH
61094: CALL_OW 12
61098: PUSH
61099: LD_INT 1
61101: PPUSH
61102: LD_INT 3
61104: PPUSH
61105: CALL_OW 12
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: ST_TO_ADDR
// animal := CreateHuman ;
61122: LD_ADDR_VAR 0 12
61126: PUSH
61127: CALL_OW 44
61131: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61132: LD_VAR 0 12
61136: PPUSH
61137: LD_VAR 0 8
61141: PPUSH
61142: LD_INT 0
61144: PPUSH
61145: CALL 62931 0 3
// end ;
61149: GO 61047
61151: POP
61152: POP
// if enchidnas then
61153: LD_VAR 0 4
61157: IFFALSE 61224
// for i = 1 to enchidnas do
61159: LD_ADDR_VAR 0 11
61163: PUSH
61164: DOUBLE
61165: LD_INT 1
61167: DEC
61168: ST_TO_ADDR
61169: LD_VAR 0 4
61173: PUSH
61174: FOR_TO
61175: IFFALSE 61222
// begin hc_class = 13 ;
61177: LD_ADDR_OWVAR 28
61181: PUSH
61182: LD_INT 13
61184: ST_TO_ADDR
// hc_gallery =  ;
61185: LD_ADDR_OWVAR 33
61189: PUSH
61190: LD_STRING 
61192: ST_TO_ADDR
// animal := CreateHuman ;
61193: LD_ADDR_VAR 0 12
61197: PUSH
61198: CALL_OW 44
61202: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61203: LD_VAR 0 12
61207: PPUSH
61208: LD_VAR 0 8
61212: PPUSH
61213: LD_INT 0
61215: PPUSH
61216: CALL 62931 0 3
// end ;
61220: GO 61174
61222: POP
61223: POP
// if fishes then
61224: LD_VAR 0 7
61228: IFFALSE 61295
// for i = 1 to fishes do
61230: LD_ADDR_VAR 0 11
61234: PUSH
61235: DOUBLE
61236: LD_INT 1
61238: DEC
61239: ST_TO_ADDR
61240: LD_VAR 0 7
61244: PUSH
61245: FOR_TO
61246: IFFALSE 61293
// begin hc_class = 20 ;
61248: LD_ADDR_OWVAR 28
61252: PUSH
61253: LD_INT 20
61255: ST_TO_ADDR
// hc_gallery =  ;
61256: LD_ADDR_OWVAR 33
61260: PUSH
61261: LD_STRING 
61263: ST_TO_ADDR
// animal := CreateHuman ;
61264: LD_ADDR_VAR 0 12
61268: PUSH
61269: CALL_OW 44
61273: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61274: LD_VAR 0 12
61278: PPUSH
61279: LD_VAR 0 9
61283: PPUSH
61284: LD_INT 0
61286: PPUSH
61287: CALL 62931 0 3
// end ;
61291: GO 61245
61293: POP
61294: POP
// end ;
61295: LD_VAR 0 10
61299: RET
// export function WantHeal ( sci , unit ) ; begin
61300: LD_INT 0
61302: PPUSH
// if GetTaskList ( sci ) > 0 then
61303: LD_VAR 0 1
61307: PPUSH
61308: CALL_OW 437
61312: PUSH
61313: LD_INT 0
61315: GREATER
61316: IFFALSE 61386
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61318: LD_VAR 0 1
61322: PPUSH
61323: CALL_OW 437
61327: PUSH
61328: LD_INT 1
61330: ARRAY
61331: PUSH
61332: LD_INT 1
61334: ARRAY
61335: PUSH
61336: LD_STRING l
61338: EQUAL
61339: PUSH
61340: LD_VAR 0 1
61344: PPUSH
61345: CALL_OW 437
61349: PUSH
61350: LD_INT 1
61352: ARRAY
61353: PUSH
61354: LD_INT 4
61356: ARRAY
61357: PUSH
61358: LD_VAR 0 2
61362: EQUAL
61363: AND
61364: IFFALSE 61376
// result := true else
61366: LD_ADDR_VAR 0 3
61370: PUSH
61371: LD_INT 1
61373: ST_TO_ADDR
61374: GO 61384
// result := false ;
61376: LD_ADDR_VAR 0 3
61380: PUSH
61381: LD_INT 0
61383: ST_TO_ADDR
// end else
61384: GO 61394
// result := false ;
61386: LD_ADDR_VAR 0 3
61390: PUSH
61391: LD_INT 0
61393: ST_TO_ADDR
// end ;
61394: LD_VAR 0 3
61398: RET
// export function HealTarget ( sci ) ; begin
61399: LD_INT 0
61401: PPUSH
// if not sci then
61402: LD_VAR 0 1
61406: NOT
61407: IFFALSE 61411
// exit ;
61409: GO 61476
// result := 0 ;
61411: LD_ADDR_VAR 0 2
61415: PUSH
61416: LD_INT 0
61418: ST_TO_ADDR
// if GetTaskList ( sci ) then
61419: LD_VAR 0 1
61423: PPUSH
61424: CALL_OW 437
61428: IFFALSE 61476
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61430: LD_VAR 0 1
61434: PPUSH
61435: CALL_OW 437
61439: PUSH
61440: LD_INT 1
61442: ARRAY
61443: PUSH
61444: LD_INT 1
61446: ARRAY
61447: PUSH
61448: LD_STRING l
61450: EQUAL
61451: IFFALSE 61476
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61453: LD_ADDR_VAR 0 2
61457: PUSH
61458: LD_VAR 0 1
61462: PPUSH
61463: CALL_OW 437
61467: PUSH
61468: LD_INT 1
61470: ARRAY
61471: PUSH
61472: LD_INT 4
61474: ARRAY
61475: ST_TO_ADDR
// end ;
61476: LD_VAR 0 2
61480: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61481: LD_INT 0
61483: PPUSH
61484: PPUSH
61485: PPUSH
61486: PPUSH
// if not base_units then
61487: LD_VAR 0 1
61491: NOT
61492: IFFALSE 61496
// exit ;
61494: GO 61583
// result := false ;
61496: LD_ADDR_VAR 0 2
61500: PUSH
61501: LD_INT 0
61503: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61504: LD_ADDR_VAR 0 5
61508: PUSH
61509: LD_VAR 0 1
61513: PPUSH
61514: LD_INT 21
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PPUSH
61524: CALL_OW 72
61528: ST_TO_ADDR
// if not tmp then
61529: LD_VAR 0 5
61533: NOT
61534: IFFALSE 61538
// exit ;
61536: GO 61583
// for i in tmp do
61538: LD_ADDR_VAR 0 3
61542: PUSH
61543: LD_VAR 0 5
61547: PUSH
61548: FOR_IN
61549: IFFALSE 61581
// begin result := EnemyInRange ( i , 22 ) ;
61551: LD_ADDR_VAR 0 2
61555: PUSH
61556: LD_VAR 0 3
61560: PPUSH
61561: LD_INT 22
61563: PPUSH
61564: CALL 59196 0 2
61568: ST_TO_ADDR
// if result then
61569: LD_VAR 0 2
61573: IFFALSE 61579
// exit ;
61575: POP
61576: POP
61577: GO 61583
// end ;
61579: GO 61548
61581: POP
61582: POP
// end ;
61583: LD_VAR 0 2
61587: RET
// export function FilterByTag ( units , tag ) ; begin
61588: LD_INT 0
61590: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61591: LD_ADDR_VAR 0 3
61595: PUSH
61596: LD_VAR 0 1
61600: PPUSH
61601: LD_INT 120
61603: PUSH
61604: LD_VAR 0 2
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PPUSH
61613: CALL_OW 72
61617: ST_TO_ADDR
// end ;
61618: LD_VAR 0 3
61622: RET
// export function IsDriver ( un ) ; begin
61623: LD_INT 0
61625: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61626: LD_ADDR_VAR 0 2
61630: PUSH
61631: LD_VAR 0 1
61635: PUSH
61636: LD_INT 55
61638: PUSH
61639: EMPTY
61640: LIST
61641: PPUSH
61642: CALL_OW 69
61646: IN
61647: ST_TO_ADDR
// end ;
61648: LD_VAR 0 2
61652: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61653: LD_INT 0
61655: PPUSH
61656: PPUSH
// list := [ ] ;
61657: LD_ADDR_VAR 0 5
61661: PUSH
61662: EMPTY
61663: ST_TO_ADDR
// case d of 0 :
61664: LD_VAR 0 3
61668: PUSH
61669: LD_INT 0
61671: DOUBLE
61672: EQUAL
61673: IFTRUE 61677
61675: GO 61810
61677: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61678: LD_ADDR_VAR 0 5
61682: PUSH
61683: LD_VAR 0 1
61687: PUSH
61688: LD_INT 4
61690: MINUS
61691: PUSH
61692: LD_VAR 0 2
61696: PUSH
61697: LD_INT 4
61699: MINUS
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: LIST
61708: PUSH
61709: LD_VAR 0 1
61713: PUSH
61714: LD_INT 3
61716: MINUS
61717: PUSH
61718: LD_VAR 0 2
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: LIST
61730: PUSH
61731: LD_VAR 0 1
61735: PUSH
61736: LD_INT 4
61738: PLUS
61739: PUSH
61740: LD_VAR 0 2
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: PUSH
61753: LD_VAR 0 1
61757: PUSH
61758: LD_INT 3
61760: PLUS
61761: PUSH
61762: LD_VAR 0 2
61766: PUSH
61767: LD_INT 3
61769: PLUS
61770: PUSH
61771: LD_INT 5
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: LIST
61778: PUSH
61779: LD_VAR 0 1
61783: PUSH
61784: LD_VAR 0 2
61788: PUSH
61789: LD_INT 4
61791: PLUS
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: LIST
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: ST_TO_ADDR
// end ; 1 :
61808: GO 62508
61810: LD_INT 1
61812: DOUBLE
61813: EQUAL
61814: IFTRUE 61818
61816: GO 61951
61818: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61819: LD_ADDR_VAR 0 5
61823: PUSH
61824: LD_VAR 0 1
61828: PUSH
61829: LD_VAR 0 2
61833: PUSH
61834: LD_INT 4
61836: MINUS
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: LIST
61845: PUSH
61846: LD_VAR 0 1
61850: PUSH
61851: LD_INT 3
61853: MINUS
61854: PUSH
61855: LD_VAR 0 2
61859: PUSH
61860: LD_INT 3
61862: MINUS
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: LIST
61871: PUSH
61872: LD_VAR 0 1
61876: PUSH
61877: LD_INT 4
61879: MINUS
61880: PUSH
61881: LD_VAR 0 2
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: LIST
61893: PUSH
61894: LD_VAR 0 1
61898: PUSH
61899: LD_VAR 0 2
61903: PUSH
61904: LD_INT 3
61906: PLUS
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: PUSH
61916: LD_VAR 0 1
61920: PUSH
61921: LD_INT 4
61923: PLUS
61924: PUSH
61925: LD_VAR 0 2
61929: PUSH
61930: LD_INT 4
61932: PLUS
61933: PUSH
61934: LD_INT 5
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: ST_TO_ADDR
// end ; 2 :
61949: GO 62508
61951: LD_INT 2
61953: DOUBLE
61954: EQUAL
61955: IFTRUE 61959
61957: GO 62088
61959: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61960: LD_ADDR_VAR 0 5
61964: PUSH
61965: LD_VAR 0 1
61969: PUSH
61970: LD_VAR 0 2
61974: PUSH
61975: LD_INT 3
61977: MINUS
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: PUSH
61987: LD_VAR 0 1
61991: PUSH
61992: LD_INT 4
61994: PLUS
61995: PUSH
61996: LD_VAR 0 2
62000: PUSH
62001: LD_INT 4
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: PUSH
62009: LD_VAR 0 1
62013: PUSH
62014: LD_VAR 0 2
62018: PUSH
62019: LD_INT 4
62021: PLUS
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: PUSH
62031: LD_VAR 0 1
62035: PUSH
62036: LD_INT 3
62038: MINUS
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: PUSH
62053: LD_VAR 0 1
62057: PUSH
62058: LD_INT 4
62060: MINUS
62061: PUSH
62062: LD_VAR 0 2
62066: PUSH
62067: LD_INT 4
62069: MINUS
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// end ; 3 :
62086: GO 62508
62088: LD_INT 3
62090: DOUBLE
62091: EQUAL
62092: IFTRUE 62096
62094: GO 62229
62096: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62097: LD_ADDR_VAR 0 5
62101: PUSH
62102: LD_VAR 0 1
62106: PUSH
62107: LD_INT 3
62109: PLUS
62110: PUSH
62111: LD_VAR 0 2
62115: PUSH
62116: LD_INT 4
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: LIST
62123: PUSH
62124: LD_VAR 0 1
62128: PUSH
62129: LD_INT 4
62131: PLUS
62132: PUSH
62133: LD_VAR 0 2
62137: PUSH
62138: LD_INT 4
62140: PLUS
62141: PUSH
62142: LD_INT 5
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: PUSH
62150: LD_VAR 0 1
62154: PUSH
62155: LD_INT 4
62157: MINUS
62158: PUSH
62159: LD_VAR 0 2
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: LIST
62171: PUSH
62172: LD_VAR 0 1
62176: PUSH
62177: LD_VAR 0 2
62181: PUSH
62182: LD_INT 4
62184: MINUS
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: PUSH
62194: LD_VAR 0 1
62198: PUSH
62199: LD_INT 3
62201: MINUS
62202: PUSH
62203: LD_VAR 0 2
62207: PUSH
62208: LD_INT 3
62210: MINUS
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: ST_TO_ADDR
// end ; 4 :
62227: GO 62508
62229: LD_INT 4
62231: DOUBLE
62232: EQUAL
62233: IFTRUE 62237
62235: GO 62370
62237: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62238: LD_ADDR_VAR 0 5
62242: PUSH
62243: LD_VAR 0 1
62247: PUSH
62248: LD_VAR 0 2
62252: PUSH
62253: LD_INT 4
62255: PLUS
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: LIST
62264: PUSH
62265: LD_VAR 0 1
62269: PUSH
62270: LD_INT 3
62272: PLUS
62273: PUSH
62274: LD_VAR 0 2
62278: PUSH
62279: LD_INT 3
62281: PLUS
62282: PUSH
62283: LD_INT 5
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: LD_INT 4
62298: PLUS
62299: PUSH
62300: LD_VAR 0 2
62304: PUSH
62305: LD_INT 4
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: LIST
62312: PUSH
62313: LD_VAR 0 1
62317: PUSH
62318: LD_VAR 0 2
62322: PUSH
62323: LD_INT 3
62325: MINUS
62326: PUSH
62327: LD_INT 3
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: PUSH
62335: LD_VAR 0 1
62339: PUSH
62340: LD_INT 4
62342: MINUS
62343: PUSH
62344: LD_VAR 0 2
62348: PUSH
62349: LD_INT 4
62351: MINUS
62352: PUSH
62353: LD_INT 2
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: ST_TO_ADDR
// end ; 5 :
62368: GO 62508
62370: LD_INT 5
62372: DOUBLE
62373: EQUAL
62374: IFTRUE 62378
62376: GO 62507
62378: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62379: LD_ADDR_VAR 0 5
62383: PUSH
62384: LD_VAR 0 1
62388: PUSH
62389: LD_INT 4
62391: MINUS
62392: PUSH
62393: LD_VAR 0 2
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: LIST
62405: PUSH
62406: LD_VAR 0 1
62410: PUSH
62411: LD_VAR 0 2
62415: PUSH
62416: LD_INT 4
62418: MINUS
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: LIST
62427: PUSH
62428: LD_VAR 0 1
62432: PUSH
62433: LD_INT 4
62435: PLUS
62436: PUSH
62437: LD_VAR 0 2
62441: PUSH
62442: LD_INT 4
62444: PLUS
62445: PUSH
62446: LD_INT 5
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: PUSH
62454: LD_VAR 0 1
62458: PUSH
62459: LD_INT 3
62461: PLUS
62462: PUSH
62463: LD_VAR 0 2
62467: PUSH
62468: LD_INT 4
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 1
62480: PUSH
62481: LD_VAR 0 2
62485: PUSH
62486: LD_INT 3
62488: PLUS
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: ST_TO_ADDR
// end ; end ;
62505: GO 62508
62507: POP
// result := list ;
62508: LD_ADDR_VAR 0 4
62512: PUSH
62513: LD_VAR 0 5
62517: ST_TO_ADDR
// end ;
62518: LD_VAR 0 4
62522: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62523: LD_INT 0
62525: PPUSH
62526: PPUSH
62527: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62528: LD_VAR 0 1
62532: NOT
62533: PUSH
62534: LD_VAR 0 2
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: LD_INT 4
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: IN
62557: NOT
62558: OR
62559: IFFALSE 62563
// exit ;
62561: GO 62655
// tmp := [ ] ;
62563: LD_ADDR_VAR 0 5
62567: PUSH
62568: EMPTY
62569: ST_TO_ADDR
// for i in units do
62570: LD_ADDR_VAR 0 4
62574: PUSH
62575: LD_VAR 0 1
62579: PUSH
62580: FOR_IN
62581: IFFALSE 62624
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62583: LD_ADDR_VAR 0 5
62587: PUSH
62588: LD_VAR 0 5
62592: PPUSH
62593: LD_VAR 0 5
62597: PUSH
62598: LD_INT 1
62600: PLUS
62601: PPUSH
62602: LD_VAR 0 4
62606: PPUSH
62607: LD_VAR 0 2
62611: PPUSH
62612: CALL_OW 259
62616: PPUSH
62617: CALL_OW 2
62621: ST_TO_ADDR
62622: GO 62580
62624: POP
62625: POP
// if not tmp then
62626: LD_VAR 0 5
62630: NOT
62631: IFFALSE 62635
// exit ;
62633: GO 62655
// result := SortListByListDesc ( units , tmp ) ;
62635: LD_ADDR_VAR 0 3
62639: PUSH
62640: LD_VAR 0 1
62644: PPUSH
62645: LD_VAR 0 5
62649: PPUSH
62650: CALL_OW 77
62654: ST_TO_ADDR
// end ;
62655: LD_VAR 0 3
62659: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62660: LD_INT 0
62662: PPUSH
62663: PPUSH
62664: PPUSH
// result := false ;
62665: LD_ADDR_VAR 0 3
62669: PUSH
62670: LD_INT 0
62672: ST_TO_ADDR
// x := GetX ( building ) ;
62673: LD_ADDR_VAR 0 4
62677: PUSH
62678: LD_VAR 0 2
62682: PPUSH
62683: CALL_OW 250
62687: ST_TO_ADDR
// y := GetY ( building ) ;
62688: LD_ADDR_VAR 0 5
62692: PUSH
62693: LD_VAR 0 2
62697: PPUSH
62698: CALL_OW 251
62702: ST_TO_ADDR
// if not building or not x or not y then
62703: LD_VAR 0 2
62707: NOT
62708: PUSH
62709: LD_VAR 0 4
62713: NOT
62714: OR
62715: PUSH
62716: LD_VAR 0 5
62720: NOT
62721: OR
62722: IFFALSE 62726
// exit ;
62724: GO 62818
// if GetTaskList ( unit ) then
62726: LD_VAR 0 1
62730: PPUSH
62731: CALL_OW 437
62735: IFFALSE 62818
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62737: LD_STRING e
62739: PUSH
62740: LD_VAR 0 1
62744: PPUSH
62745: CALL_OW 437
62749: PUSH
62750: LD_INT 1
62752: ARRAY
62753: PUSH
62754: LD_INT 1
62756: ARRAY
62757: EQUAL
62758: PUSH
62759: LD_VAR 0 4
62763: PUSH
62764: LD_VAR 0 1
62768: PPUSH
62769: CALL_OW 437
62773: PUSH
62774: LD_INT 1
62776: ARRAY
62777: PUSH
62778: LD_INT 2
62780: ARRAY
62781: EQUAL
62782: AND
62783: PUSH
62784: LD_VAR 0 5
62788: PUSH
62789: LD_VAR 0 1
62793: PPUSH
62794: CALL_OW 437
62798: PUSH
62799: LD_INT 1
62801: ARRAY
62802: PUSH
62803: LD_INT 3
62805: ARRAY
62806: EQUAL
62807: AND
62808: IFFALSE 62818
// result := true end ;
62810: LD_ADDR_VAR 0 3
62814: PUSH
62815: LD_INT 1
62817: ST_TO_ADDR
// end ;
62818: LD_VAR 0 3
62822: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62823: LD_INT 0
62825: PPUSH
// result := false ;
62826: LD_ADDR_VAR 0 4
62830: PUSH
62831: LD_INT 0
62833: ST_TO_ADDR
// if GetTaskList ( unit ) then
62834: LD_VAR 0 1
62838: PPUSH
62839: CALL_OW 437
62843: IFFALSE 62926
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62845: LD_STRING M
62847: PUSH
62848: LD_VAR 0 1
62852: PPUSH
62853: CALL_OW 437
62857: PUSH
62858: LD_INT 1
62860: ARRAY
62861: PUSH
62862: LD_INT 1
62864: ARRAY
62865: EQUAL
62866: PUSH
62867: LD_VAR 0 2
62871: PUSH
62872: LD_VAR 0 1
62876: PPUSH
62877: CALL_OW 437
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PUSH
62886: LD_INT 2
62888: ARRAY
62889: EQUAL
62890: AND
62891: PUSH
62892: LD_VAR 0 3
62896: PUSH
62897: LD_VAR 0 1
62901: PPUSH
62902: CALL_OW 437
62906: PUSH
62907: LD_INT 1
62909: ARRAY
62910: PUSH
62911: LD_INT 3
62913: ARRAY
62914: EQUAL
62915: AND
62916: IFFALSE 62926
// result := true ;
62918: LD_ADDR_VAR 0 4
62922: PUSH
62923: LD_INT 1
62925: ST_TO_ADDR
// end ; end ;
62926: LD_VAR 0 4
62930: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62931: LD_INT 0
62933: PPUSH
62934: PPUSH
62935: PPUSH
62936: PPUSH
// if not unit or not area then
62937: LD_VAR 0 1
62941: NOT
62942: PUSH
62943: LD_VAR 0 2
62947: NOT
62948: OR
62949: IFFALSE 62953
// exit ;
62951: GO 63117
// tmp := AreaToList ( area , i ) ;
62953: LD_ADDR_VAR 0 6
62957: PUSH
62958: LD_VAR 0 2
62962: PPUSH
62963: LD_VAR 0 5
62967: PPUSH
62968: CALL_OW 517
62972: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62973: LD_ADDR_VAR 0 5
62977: PUSH
62978: DOUBLE
62979: LD_INT 1
62981: DEC
62982: ST_TO_ADDR
62983: LD_VAR 0 6
62987: PUSH
62988: LD_INT 1
62990: ARRAY
62991: PUSH
62992: FOR_TO
62993: IFFALSE 63115
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62995: LD_ADDR_VAR 0 7
62999: PUSH
63000: LD_VAR 0 6
63004: PUSH
63005: LD_INT 1
63007: ARRAY
63008: PUSH
63009: LD_VAR 0 5
63013: ARRAY
63014: PUSH
63015: LD_VAR 0 6
63019: PUSH
63020: LD_INT 2
63022: ARRAY
63023: PUSH
63024: LD_VAR 0 5
63028: ARRAY
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63034: LD_VAR 0 7
63038: PUSH
63039: LD_INT 1
63041: ARRAY
63042: PPUSH
63043: LD_VAR 0 7
63047: PUSH
63048: LD_INT 2
63050: ARRAY
63051: PPUSH
63052: CALL_OW 428
63056: PUSH
63057: LD_INT 0
63059: EQUAL
63060: IFFALSE 63113
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63062: LD_VAR 0 1
63066: PPUSH
63067: LD_VAR 0 7
63071: PUSH
63072: LD_INT 1
63074: ARRAY
63075: PPUSH
63076: LD_VAR 0 7
63080: PUSH
63081: LD_INT 2
63083: ARRAY
63084: PPUSH
63085: LD_VAR 0 3
63089: PPUSH
63090: CALL_OW 48
// result := IsPlaced ( unit ) ;
63094: LD_ADDR_VAR 0 4
63098: PUSH
63099: LD_VAR 0 1
63103: PPUSH
63104: CALL_OW 305
63108: ST_TO_ADDR
// exit ;
63109: POP
63110: POP
63111: GO 63117
// end ; end ;
63113: GO 62992
63115: POP
63116: POP
// end ;
63117: LD_VAR 0 4
63121: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63122: LD_INT 0
63124: PPUSH
63125: PPUSH
63126: PPUSH
// if not side or side > 8 then
63127: LD_VAR 0 1
63131: NOT
63132: PUSH
63133: LD_VAR 0 1
63137: PUSH
63138: LD_INT 8
63140: GREATER
63141: OR
63142: IFFALSE 63146
// exit ;
63144: GO 63333
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63146: LD_ADDR_VAR 0 4
63150: PUSH
63151: LD_INT 22
63153: PUSH
63154: LD_VAR 0 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 21
63165: PUSH
63166: LD_INT 3
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PPUSH
63177: CALL_OW 69
63181: ST_TO_ADDR
// if not tmp then
63182: LD_VAR 0 4
63186: NOT
63187: IFFALSE 63191
// exit ;
63189: GO 63333
// enable_addtolog := true ;
63191: LD_ADDR_OWVAR 81
63195: PUSH
63196: LD_INT 1
63198: ST_TO_ADDR
// AddToLog ( [ ) ;
63199: LD_STRING [
63201: PPUSH
63202: CALL_OW 561
// for i in tmp do
63206: LD_ADDR_VAR 0 3
63210: PUSH
63211: LD_VAR 0 4
63215: PUSH
63216: FOR_IN
63217: IFFALSE 63324
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63219: LD_STRING [
63221: PUSH
63222: LD_VAR 0 3
63226: PPUSH
63227: CALL_OW 266
63231: STR
63232: PUSH
63233: LD_STRING , 
63235: STR
63236: PUSH
63237: LD_VAR 0 3
63241: PPUSH
63242: CALL_OW 250
63246: STR
63247: PUSH
63248: LD_STRING , 
63250: STR
63251: PUSH
63252: LD_VAR 0 3
63256: PPUSH
63257: CALL_OW 251
63261: STR
63262: PUSH
63263: LD_STRING , 
63265: STR
63266: PUSH
63267: LD_VAR 0 3
63271: PPUSH
63272: CALL_OW 254
63276: STR
63277: PUSH
63278: LD_STRING , 
63280: STR
63281: PUSH
63282: LD_VAR 0 3
63286: PPUSH
63287: LD_INT 1
63289: PPUSH
63290: CALL_OW 268
63294: STR
63295: PUSH
63296: LD_STRING , 
63298: STR
63299: PUSH
63300: LD_VAR 0 3
63304: PPUSH
63305: LD_INT 2
63307: PPUSH
63308: CALL_OW 268
63312: STR
63313: PUSH
63314: LD_STRING ],
63316: STR
63317: PPUSH
63318: CALL_OW 561
// end ;
63322: GO 63216
63324: POP
63325: POP
// AddToLog ( ]; ) ;
63326: LD_STRING ];
63328: PPUSH
63329: CALL_OW 561
// end ;
63333: LD_VAR 0 2
63337: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63338: LD_INT 0
63340: PPUSH
63341: PPUSH
63342: PPUSH
63343: PPUSH
63344: PPUSH
// if not area or not rate or not max then
63345: LD_VAR 0 1
63349: NOT
63350: PUSH
63351: LD_VAR 0 2
63355: NOT
63356: OR
63357: PUSH
63358: LD_VAR 0 4
63362: NOT
63363: OR
63364: IFFALSE 63368
// exit ;
63366: GO 63557
// while 1 do
63368: LD_INT 1
63370: IFFALSE 63557
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63372: LD_ADDR_VAR 0 9
63376: PUSH
63377: LD_VAR 0 1
63381: PPUSH
63382: LD_INT 1
63384: PPUSH
63385: CALL_OW 287
63389: PUSH
63390: LD_INT 10
63392: MUL
63393: ST_TO_ADDR
// r := rate / 10 ;
63394: LD_ADDR_VAR 0 7
63398: PUSH
63399: LD_VAR 0 2
63403: PUSH
63404: LD_INT 10
63406: DIVREAL
63407: ST_TO_ADDR
// time := 1 1$00 ;
63408: LD_ADDR_VAR 0 8
63412: PUSH
63413: LD_INT 2100
63415: ST_TO_ADDR
// if amount < min then
63416: LD_VAR 0 9
63420: PUSH
63421: LD_VAR 0 3
63425: LESS
63426: IFFALSE 63444
// r := r * 2 else
63428: LD_ADDR_VAR 0 7
63432: PUSH
63433: LD_VAR 0 7
63437: PUSH
63438: LD_INT 2
63440: MUL
63441: ST_TO_ADDR
63442: GO 63470
// if amount > max then
63444: LD_VAR 0 9
63448: PUSH
63449: LD_VAR 0 4
63453: GREATER
63454: IFFALSE 63470
// r := r / 2 ;
63456: LD_ADDR_VAR 0 7
63460: PUSH
63461: LD_VAR 0 7
63465: PUSH
63466: LD_INT 2
63468: DIVREAL
63469: ST_TO_ADDR
// time := time / r ;
63470: LD_ADDR_VAR 0 8
63474: PUSH
63475: LD_VAR 0 8
63479: PUSH
63480: LD_VAR 0 7
63484: DIVREAL
63485: ST_TO_ADDR
// if time < 0 then
63486: LD_VAR 0 8
63490: PUSH
63491: LD_INT 0
63493: LESS
63494: IFFALSE 63511
// time := time * - 1 ;
63496: LD_ADDR_VAR 0 8
63500: PUSH
63501: LD_VAR 0 8
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: MUL
63510: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63511: LD_VAR 0 8
63515: PUSH
63516: LD_INT 35
63518: PPUSH
63519: LD_INT 875
63521: PPUSH
63522: CALL_OW 12
63526: PLUS
63527: PPUSH
63528: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63532: LD_INT 1
63534: PPUSH
63535: LD_INT 5
63537: PPUSH
63538: CALL_OW 12
63542: PPUSH
63543: LD_VAR 0 1
63547: PPUSH
63548: LD_INT 1
63550: PPUSH
63551: CALL_OW 55
// end ;
63555: GO 63368
// end ;
63557: LD_VAR 0 5
63561: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63562: LD_INT 0
63564: PPUSH
63565: PPUSH
63566: PPUSH
63567: PPUSH
63568: PPUSH
63569: PPUSH
63570: PPUSH
63571: PPUSH
// if not turrets or not factories then
63572: LD_VAR 0 1
63576: NOT
63577: PUSH
63578: LD_VAR 0 2
63582: NOT
63583: OR
63584: IFFALSE 63588
// exit ;
63586: GO 63895
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63588: LD_ADDR_VAR 0 10
63592: PUSH
63593: LD_INT 5
63595: PUSH
63596: LD_INT 6
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 4
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: PUSH
63616: LD_INT 5
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 24
63630: PUSH
63631: LD_INT 25
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 23
63640: PUSH
63641: LD_INT 27
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 42
63654: PUSH
63655: LD_INT 43
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 44
63664: PUSH
63665: LD_INT 46
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 45
63674: PUSH
63675: LD_INT 47
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: ST_TO_ADDR
// result := [ ] ;
63692: LD_ADDR_VAR 0 3
63696: PUSH
63697: EMPTY
63698: ST_TO_ADDR
// for i in turrets do
63699: LD_ADDR_VAR 0 4
63703: PUSH
63704: LD_VAR 0 1
63708: PUSH
63709: FOR_IN
63710: IFFALSE 63893
// begin nat := GetNation ( i ) ;
63712: LD_ADDR_VAR 0 7
63716: PUSH
63717: LD_VAR 0 4
63721: PPUSH
63722: CALL_OW 248
63726: ST_TO_ADDR
// weapon := 0 ;
63727: LD_ADDR_VAR 0 8
63731: PUSH
63732: LD_INT 0
63734: ST_TO_ADDR
// if not nat then
63735: LD_VAR 0 7
63739: NOT
63740: IFFALSE 63744
// continue ;
63742: GO 63709
// for j in list [ nat ] do
63744: LD_ADDR_VAR 0 5
63748: PUSH
63749: LD_VAR 0 10
63753: PUSH
63754: LD_VAR 0 7
63758: ARRAY
63759: PUSH
63760: FOR_IN
63761: IFFALSE 63802
// if GetBWeapon ( i ) = j [ 1 ] then
63763: LD_VAR 0 4
63767: PPUSH
63768: CALL_OW 269
63772: PUSH
63773: LD_VAR 0 5
63777: PUSH
63778: LD_INT 1
63780: ARRAY
63781: EQUAL
63782: IFFALSE 63800
// begin weapon := j [ 2 ] ;
63784: LD_ADDR_VAR 0 8
63788: PUSH
63789: LD_VAR 0 5
63793: PUSH
63794: LD_INT 2
63796: ARRAY
63797: ST_TO_ADDR
// break ;
63798: GO 63802
// end ;
63800: GO 63760
63802: POP
63803: POP
// if not weapon then
63804: LD_VAR 0 8
63808: NOT
63809: IFFALSE 63813
// continue ;
63811: GO 63709
// for k in factories do
63813: LD_ADDR_VAR 0 6
63817: PUSH
63818: LD_VAR 0 2
63822: PUSH
63823: FOR_IN
63824: IFFALSE 63889
// begin weapons := AvailableWeaponList ( k ) ;
63826: LD_ADDR_VAR 0 9
63830: PUSH
63831: LD_VAR 0 6
63835: PPUSH
63836: CALL_OW 478
63840: ST_TO_ADDR
// if not weapons then
63841: LD_VAR 0 9
63845: NOT
63846: IFFALSE 63850
// continue ;
63848: GO 63823
// if weapon in weapons then
63850: LD_VAR 0 8
63854: PUSH
63855: LD_VAR 0 9
63859: IN
63860: IFFALSE 63887
// begin result := [ i , weapon ] ;
63862: LD_ADDR_VAR 0 3
63866: PUSH
63867: LD_VAR 0 4
63871: PUSH
63872: LD_VAR 0 8
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: ST_TO_ADDR
// exit ;
63881: POP
63882: POP
63883: POP
63884: POP
63885: GO 63895
// end ; end ;
63887: GO 63823
63889: POP
63890: POP
// end ;
63891: GO 63709
63893: POP
63894: POP
// end ;
63895: LD_VAR 0 3
63899: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63900: LD_INT 0
63902: PPUSH
// if not side or side > 8 then
63903: LD_VAR 0 3
63907: NOT
63908: PUSH
63909: LD_VAR 0 3
63913: PUSH
63914: LD_INT 8
63916: GREATER
63917: OR
63918: IFFALSE 63922
// exit ;
63920: GO 63981
// if not range then
63922: LD_VAR 0 4
63926: NOT
63927: IFFALSE 63938
// range := - 12 ;
63929: LD_ADDR_VAR 0 4
63933: PUSH
63934: LD_INT 12
63936: NEG
63937: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63938: LD_VAR 0 1
63942: PPUSH
63943: LD_VAR 0 2
63947: PPUSH
63948: LD_VAR 0 3
63952: PPUSH
63953: LD_VAR 0 4
63957: PPUSH
63958: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63962: LD_VAR 0 1
63966: PPUSH
63967: LD_VAR 0 2
63971: PPUSH
63972: LD_VAR 0 3
63976: PPUSH
63977: CALL_OW 331
// end ;
63981: LD_VAR 0 5
63985: RET
// export function Video ( mode ) ; begin
63986: LD_INT 0
63988: PPUSH
// ingame_video = mode ;
63989: LD_ADDR_OWVAR 52
63993: PUSH
63994: LD_VAR 0 1
63998: ST_TO_ADDR
// interface_hidden = mode ;
63999: LD_ADDR_OWVAR 54
64003: PUSH
64004: LD_VAR 0 1
64008: ST_TO_ADDR
// end ;
64009: LD_VAR 0 2
64013: RET
// export function Join ( array , element ) ; begin
64014: LD_INT 0
64016: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64017: LD_ADDR_VAR 0 3
64021: PUSH
64022: LD_VAR 0 1
64026: PPUSH
64027: LD_VAR 0 1
64031: PUSH
64032: LD_INT 1
64034: PLUS
64035: PPUSH
64036: LD_VAR 0 2
64040: PPUSH
64041: CALL_OW 1
64045: ST_TO_ADDR
// end ;
64046: LD_VAR 0 3
64050: RET
// export function JoinUnion ( array , element ) ; begin
64051: LD_INT 0
64053: PPUSH
// result := array union element ;
64054: LD_ADDR_VAR 0 3
64058: PUSH
64059: LD_VAR 0 1
64063: PUSH
64064: LD_VAR 0 2
64068: UNION
64069: ST_TO_ADDR
// end ;
64070: LD_VAR 0 3
64074: RET
// export function GetBehemoths ( side ) ; begin
64075: LD_INT 0
64077: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64078: LD_ADDR_VAR 0 2
64082: PUSH
64083: LD_INT 22
64085: PUSH
64086: LD_VAR 0 1
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 31
64097: PUSH
64098: LD_INT 25
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PPUSH
64109: CALL_OW 69
64113: ST_TO_ADDR
// end ;
64114: LD_VAR 0 2
64118: RET
// export function Shuffle ( array ) ; var i , index ; begin
64119: LD_INT 0
64121: PPUSH
64122: PPUSH
64123: PPUSH
// result := [ ] ;
64124: LD_ADDR_VAR 0 2
64128: PUSH
64129: EMPTY
64130: ST_TO_ADDR
// if not array then
64131: LD_VAR 0 1
64135: NOT
64136: IFFALSE 64140
// exit ;
64138: GO 64239
// Randomize ;
64140: CALL_OW 10
// for i = array downto 1 do
64144: LD_ADDR_VAR 0 3
64148: PUSH
64149: DOUBLE
64150: LD_VAR 0 1
64154: INC
64155: ST_TO_ADDR
64156: LD_INT 1
64158: PUSH
64159: FOR_DOWNTO
64160: IFFALSE 64237
// begin index := rand ( 1 , array ) ;
64162: LD_ADDR_VAR 0 4
64166: PUSH
64167: LD_INT 1
64169: PPUSH
64170: LD_VAR 0 1
64174: PPUSH
64175: CALL_OW 12
64179: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64180: LD_ADDR_VAR 0 2
64184: PUSH
64185: LD_VAR 0 2
64189: PPUSH
64190: LD_VAR 0 2
64194: PUSH
64195: LD_INT 1
64197: PLUS
64198: PPUSH
64199: LD_VAR 0 1
64203: PUSH
64204: LD_VAR 0 4
64208: ARRAY
64209: PPUSH
64210: CALL_OW 2
64214: ST_TO_ADDR
// array := Delete ( array , index ) ;
64215: LD_ADDR_VAR 0 1
64219: PUSH
64220: LD_VAR 0 1
64224: PPUSH
64225: LD_VAR 0 4
64229: PPUSH
64230: CALL_OW 3
64234: ST_TO_ADDR
// end ;
64235: GO 64159
64237: POP
64238: POP
// end ;
64239: LD_VAR 0 2
64243: RET
// export function GetBaseMaterials ( base ) ; begin
64244: LD_INT 0
64246: PPUSH
// result := [ 0 , 0 , 0 ] ;
64247: LD_ADDR_VAR 0 2
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: ST_TO_ADDR
// if not base then
64266: LD_VAR 0 1
64270: NOT
64271: IFFALSE 64275
// exit ;
64273: GO 64324
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64275: LD_ADDR_VAR 0 2
64279: PUSH
64280: LD_VAR 0 1
64284: PPUSH
64285: LD_INT 1
64287: PPUSH
64288: CALL_OW 275
64292: PUSH
64293: LD_VAR 0 1
64297: PPUSH
64298: LD_INT 2
64300: PPUSH
64301: CALL_OW 275
64305: PUSH
64306: LD_VAR 0 1
64310: PPUSH
64311: LD_INT 3
64313: PPUSH
64314: CALL_OW 275
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: LIST
64323: ST_TO_ADDR
// end ;
64324: LD_VAR 0 2
64328: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64329: LD_INT 0
64331: PPUSH
64332: PPUSH
// result := array ;
64333: LD_ADDR_VAR 0 3
64337: PUSH
64338: LD_VAR 0 1
64342: ST_TO_ADDR
// if size >= result then
64343: LD_VAR 0 2
64347: PUSH
64348: LD_VAR 0 3
64352: GREATEREQUAL
64353: IFFALSE 64357
// exit ;
64355: GO 64407
// if size then
64357: LD_VAR 0 2
64361: IFFALSE 64407
// for i := array downto size do
64363: LD_ADDR_VAR 0 4
64367: PUSH
64368: DOUBLE
64369: LD_VAR 0 1
64373: INC
64374: ST_TO_ADDR
64375: LD_VAR 0 2
64379: PUSH
64380: FOR_DOWNTO
64381: IFFALSE 64405
// result := Delete ( result , result ) ;
64383: LD_ADDR_VAR 0 3
64387: PUSH
64388: LD_VAR 0 3
64392: PPUSH
64393: LD_VAR 0 3
64397: PPUSH
64398: CALL_OW 3
64402: ST_TO_ADDR
64403: GO 64380
64405: POP
64406: POP
// end ;
64407: LD_VAR 0 3
64411: RET
// export function ComExit ( unit ) ; var tmp ; begin
64412: LD_INT 0
64414: PPUSH
64415: PPUSH
// if not IsInUnit ( unit ) then
64416: LD_VAR 0 1
64420: PPUSH
64421: CALL_OW 310
64425: NOT
64426: IFFALSE 64430
// exit ;
64428: GO 64490
// tmp := IsInUnit ( unit ) ;
64430: LD_ADDR_VAR 0 3
64434: PUSH
64435: LD_VAR 0 1
64439: PPUSH
64440: CALL_OW 310
64444: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64445: LD_VAR 0 3
64449: PPUSH
64450: CALL_OW 247
64454: PUSH
64455: LD_INT 2
64457: EQUAL
64458: IFFALSE 64471
// ComExitVehicle ( unit ) else
64460: LD_VAR 0 1
64464: PPUSH
64465: CALL_OW 121
64469: GO 64480
// ComExitBuilding ( unit ) ;
64471: LD_VAR 0 1
64475: PPUSH
64476: CALL_OW 122
// result := tmp ;
64480: LD_ADDR_VAR 0 2
64484: PUSH
64485: LD_VAR 0 3
64489: ST_TO_ADDR
// end ;
64490: LD_VAR 0 2
64494: RET
// export function ComExitAll ( units ) ; var i ; begin
64495: LD_INT 0
64497: PPUSH
64498: PPUSH
// if not units then
64499: LD_VAR 0 1
64503: NOT
64504: IFFALSE 64508
// exit ;
64506: GO 64534
// for i in units do
64508: LD_ADDR_VAR 0 3
64512: PUSH
64513: LD_VAR 0 1
64517: PUSH
64518: FOR_IN
64519: IFFALSE 64532
// ComExit ( i ) ;
64521: LD_VAR 0 3
64525: PPUSH
64526: CALL 64412 0 1
64530: GO 64518
64532: POP
64533: POP
// end ;
64534: LD_VAR 0 2
64538: RET
// export function ResetHc ; begin
64539: LD_INT 0
64541: PPUSH
// InitHc ;
64542: CALL_OW 19
// hc_importance := 0 ;
64546: LD_ADDR_OWVAR 32
64550: PUSH
64551: LD_INT 0
64553: ST_TO_ADDR
// end ;
64554: LD_VAR 0 1
64558: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64559: LD_INT 0
64561: PPUSH
64562: PPUSH
64563: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64564: LD_ADDR_VAR 0 6
64568: PUSH
64569: LD_VAR 0 1
64573: PUSH
64574: LD_VAR 0 3
64578: PLUS
64579: PUSH
64580: LD_INT 2
64582: DIV
64583: ST_TO_ADDR
// if _x < 0 then
64584: LD_VAR 0 6
64588: PUSH
64589: LD_INT 0
64591: LESS
64592: IFFALSE 64609
// _x := _x * - 1 ;
64594: LD_ADDR_VAR 0 6
64598: PUSH
64599: LD_VAR 0 6
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: MUL
64608: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64609: LD_ADDR_VAR 0 7
64613: PUSH
64614: LD_VAR 0 2
64618: PUSH
64619: LD_VAR 0 4
64623: PLUS
64624: PUSH
64625: LD_INT 2
64627: DIV
64628: ST_TO_ADDR
// if _y < 0 then
64629: LD_VAR 0 7
64633: PUSH
64634: LD_INT 0
64636: LESS
64637: IFFALSE 64654
// _y := _y * - 1 ;
64639: LD_ADDR_VAR 0 7
64643: PUSH
64644: LD_VAR 0 7
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: MUL
64653: ST_TO_ADDR
// result := [ _x , _y ] ;
64654: LD_ADDR_VAR 0 5
64658: PUSH
64659: LD_VAR 0 6
64663: PUSH
64664: LD_VAR 0 7
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: ST_TO_ADDR
// end ;
64673: LD_VAR 0 5
64677: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64678: LD_INT 0
64680: PPUSH
64681: PPUSH
64682: PPUSH
64683: PPUSH
// task := GetTaskList ( unit ) ;
64684: LD_ADDR_VAR 0 7
64688: PUSH
64689: LD_VAR 0 1
64693: PPUSH
64694: CALL_OW 437
64698: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64699: LD_VAR 0 7
64703: NOT
64704: PUSH
64705: LD_VAR 0 1
64709: PPUSH
64710: LD_VAR 0 2
64714: PPUSH
64715: CALL_OW 308
64719: NOT
64720: AND
64721: IFFALSE 64725
// exit ;
64723: GO 64843
// if IsInArea ( unit , area ) then
64725: LD_VAR 0 1
64729: PPUSH
64730: LD_VAR 0 2
64734: PPUSH
64735: CALL_OW 308
64739: IFFALSE 64757
// begin ComMoveToArea ( unit , goAway ) ;
64741: LD_VAR 0 1
64745: PPUSH
64746: LD_VAR 0 3
64750: PPUSH
64751: CALL_OW 113
// exit ;
64755: GO 64843
// end ; if task [ 1 ] [ 1 ] <> M then
64757: LD_VAR 0 7
64761: PUSH
64762: LD_INT 1
64764: ARRAY
64765: PUSH
64766: LD_INT 1
64768: ARRAY
64769: PUSH
64770: LD_STRING M
64772: NONEQUAL
64773: IFFALSE 64777
// exit ;
64775: GO 64843
// x := task [ 1 ] [ 2 ] ;
64777: LD_ADDR_VAR 0 5
64781: PUSH
64782: LD_VAR 0 7
64786: PUSH
64787: LD_INT 1
64789: ARRAY
64790: PUSH
64791: LD_INT 2
64793: ARRAY
64794: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64795: LD_ADDR_VAR 0 6
64799: PUSH
64800: LD_VAR 0 7
64804: PUSH
64805: LD_INT 1
64807: ARRAY
64808: PUSH
64809: LD_INT 3
64811: ARRAY
64812: ST_TO_ADDR
// if InArea ( x , y , area ) then
64813: LD_VAR 0 5
64817: PPUSH
64818: LD_VAR 0 6
64822: PPUSH
64823: LD_VAR 0 2
64827: PPUSH
64828: CALL_OW 309
64832: IFFALSE 64843
// ComStop ( unit ) ;
64834: LD_VAR 0 1
64838: PPUSH
64839: CALL_OW 141
// end ;
64843: LD_VAR 0 4
64847: RET
// export function Abs ( value ) ; begin
64848: LD_INT 0
64850: PPUSH
// result := value ;
64851: LD_ADDR_VAR 0 2
64855: PUSH
64856: LD_VAR 0 1
64860: ST_TO_ADDR
// if value < 0 then
64861: LD_VAR 0 1
64865: PUSH
64866: LD_INT 0
64868: LESS
64869: IFFALSE 64886
// result := value * - 1 ;
64871: LD_ADDR_VAR 0 2
64875: PUSH
64876: LD_VAR 0 1
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: MUL
64885: ST_TO_ADDR
// end ;
64886: LD_VAR 0 2
64890: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64891: LD_INT 0
64893: PPUSH
64894: PPUSH
64895: PPUSH
64896: PPUSH
64897: PPUSH
64898: PPUSH
64899: PPUSH
64900: PPUSH
// if not unit or not building then
64901: LD_VAR 0 1
64905: NOT
64906: PUSH
64907: LD_VAR 0 2
64911: NOT
64912: OR
64913: IFFALSE 64917
// exit ;
64915: GO 65143
// x := GetX ( building ) ;
64917: LD_ADDR_VAR 0 4
64921: PUSH
64922: LD_VAR 0 2
64926: PPUSH
64927: CALL_OW 250
64931: ST_TO_ADDR
// y := GetY ( building ) ;
64932: LD_ADDR_VAR 0 6
64936: PUSH
64937: LD_VAR 0 2
64941: PPUSH
64942: CALL_OW 251
64946: ST_TO_ADDR
// d := GetDir ( building ) ;
64947: LD_ADDR_VAR 0 8
64951: PUSH
64952: LD_VAR 0 2
64956: PPUSH
64957: CALL_OW 254
64961: ST_TO_ADDR
// r := 4 ;
64962: LD_ADDR_VAR 0 9
64966: PUSH
64967: LD_INT 4
64969: ST_TO_ADDR
// for i := 1 to 5 do
64970: LD_ADDR_VAR 0 10
64974: PUSH
64975: DOUBLE
64976: LD_INT 1
64978: DEC
64979: ST_TO_ADDR
64980: LD_INT 5
64982: PUSH
64983: FOR_TO
64984: IFFALSE 65141
// begin _x := ShiftX ( x , d , r + i ) ;
64986: LD_ADDR_VAR 0 5
64990: PUSH
64991: LD_VAR 0 4
64995: PPUSH
64996: LD_VAR 0 8
65000: PPUSH
65001: LD_VAR 0 9
65005: PUSH
65006: LD_VAR 0 10
65010: PLUS
65011: PPUSH
65012: CALL_OW 272
65016: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65017: LD_ADDR_VAR 0 7
65021: PUSH
65022: LD_VAR 0 6
65026: PPUSH
65027: LD_VAR 0 8
65031: PPUSH
65032: LD_VAR 0 9
65036: PUSH
65037: LD_VAR 0 10
65041: PLUS
65042: PPUSH
65043: CALL_OW 273
65047: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65048: LD_VAR 0 5
65052: PPUSH
65053: LD_VAR 0 7
65057: PPUSH
65058: CALL_OW 488
65062: PUSH
65063: LD_VAR 0 5
65067: PPUSH
65068: LD_VAR 0 7
65072: PPUSH
65073: CALL_OW 428
65077: PPUSH
65078: CALL_OW 247
65082: PUSH
65083: LD_INT 3
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: IN
65093: NOT
65094: AND
65095: IFFALSE 65139
// begin ComMoveXY ( unit , _x , _y ) ;
65097: LD_VAR 0 1
65101: PPUSH
65102: LD_VAR 0 5
65106: PPUSH
65107: LD_VAR 0 7
65111: PPUSH
65112: CALL_OW 111
// result := [ _x , _y ] ;
65116: LD_ADDR_VAR 0 3
65120: PUSH
65121: LD_VAR 0 5
65125: PUSH
65126: LD_VAR 0 7
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: ST_TO_ADDR
// exit ;
65135: POP
65136: POP
65137: GO 65143
// end ; end ;
65139: GO 64983
65141: POP
65142: POP
// end ;
65143: LD_VAR 0 3
65147: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65148: LD_INT 0
65150: PPUSH
65151: PPUSH
65152: PPUSH
// result := 0 ;
65153: LD_ADDR_VAR 0 3
65157: PUSH
65158: LD_INT 0
65160: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65161: LD_VAR 0 1
65165: PUSH
65166: LD_INT 0
65168: LESS
65169: PUSH
65170: LD_VAR 0 1
65174: PUSH
65175: LD_INT 8
65177: GREATER
65178: OR
65179: PUSH
65180: LD_VAR 0 2
65184: PUSH
65185: LD_INT 0
65187: LESS
65188: OR
65189: PUSH
65190: LD_VAR 0 2
65194: PUSH
65195: LD_INT 8
65197: GREATER
65198: OR
65199: IFFALSE 65203
// exit ;
65201: GO 65278
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65203: LD_ADDR_VAR 0 4
65207: PUSH
65208: LD_INT 22
65210: PUSH
65211: LD_VAR 0 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PPUSH
65220: CALL_OW 69
65224: PUSH
65225: FOR_IN
65226: IFFALSE 65276
// begin un := UnitShoot ( i ) ;
65228: LD_ADDR_VAR 0 5
65232: PUSH
65233: LD_VAR 0 4
65237: PPUSH
65238: CALL_OW 504
65242: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65243: LD_VAR 0 5
65247: PPUSH
65248: CALL_OW 255
65252: PUSH
65253: LD_VAR 0 1
65257: EQUAL
65258: IFFALSE 65274
// begin result := un ;
65260: LD_ADDR_VAR 0 3
65264: PUSH
65265: LD_VAR 0 5
65269: ST_TO_ADDR
// exit ;
65270: POP
65271: POP
65272: GO 65278
// end ; end ;
65274: GO 65225
65276: POP
65277: POP
// end ;
65278: LD_VAR 0 3
65282: RET
// export function GetCargoBay ( units ) ; begin
65283: LD_INT 0
65285: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65286: LD_ADDR_VAR 0 2
65290: PUSH
65291: LD_VAR 0 1
65295: PPUSH
65296: LD_INT 2
65298: PUSH
65299: LD_INT 34
65301: PUSH
65302: LD_INT 12
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 34
65311: PUSH
65312: LD_INT 51
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 34
65321: PUSH
65322: LD_INT 32
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 34
65331: PUSH
65332: LD_INT 89
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: PPUSH
65346: CALL_OW 72
65350: ST_TO_ADDR
// end ;
65351: LD_VAR 0 2
65355: RET
// export function Negate ( value ) ; begin
65356: LD_INT 0
65358: PPUSH
// result := not value ;
65359: LD_ADDR_VAR 0 2
65363: PUSH
65364: LD_VAR 0 1
65368: NOT
65369: ST_TO_ADDR
// end ;
65370: LD_VAR 0 2
65374: RET
// export function Inc ( value ) ; begin
65375: LD_INT 0
65377: PPUSH
// result := value + 1 ;
65378: LD_ADDR_VAR 0 2
65382: PUSH
65383: LD_VAR 0 1
65387: PUSH
65388: LD_INT 1
65390: PLUS
65391: ST_TO_ADDR
// end ;
65392: LD_VAR 0 2
65396: RET
// export function Dec ( value ) ; begin
65397: LD_INT 0
65399: PPUSH
// result := value - 1 ;
65400: LD_ADDR_VAR 0 2
65404: PUSH
65405: LD_VAR 0 1
65409: PUSH
65410: LD_INT 1
65412: MINUS
65413: ST_TO_ADDR
// end ;
65414: LD_VAR 0 2
65418: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65419: LD_INT 0
65421: PPUSH
65422: PPUSH
65423: PPUSH
65424: PPUSH
65425: PPUSH
65426: PPUSH
65427: PPUSH
65428: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65429: LD_VAR 0 1
65433: PPUSH
65434: LD_VAR 0 2
65438: PPUSH
65439: CALL_OW 488
65443: NOT
65444: PUSH
65445: LD_VAR 0 3
65449: PPUSH
65450: LD_VAR 0 4
65454: PPUSH
65455: CALL_OW 488
65459: NOT
65460: OR
65461: IFFALSE 65474
// begin result := - 1 ;
65463: LD_ADDR_VAR 0 5
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: ST_TO_ADDR
// exit ;
65472: GO 65709
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65474: LD_ADDR_VAR 0 12
65478: PUSH
65479: LD_VAR 0 1
65483: PPUSH
65484: LD_VAR 0 2
65488: PPUSH
65489: LD_VAR 0 3
65493: PPUSH
65494: LD_VAR 0 4
65498: PPUSH
65499: CALL 64559 0 4
65503: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65504: LD_ADDR_VAR 0 11
65508: PUSH
65509: LD_VAR 0 1
65513: PPUSH
65514: LD_VAR 0 2
65518: PPUSH
65519: LD_VAR 0 12
65523: PUSH
65524: LD_INT 1
65526: ARRAY
65527: PPUSH
65528: LD_VAR 0 12
65532: PUSH
65533: LD_INT 2
65535: ARRAY
65536: PPUSH
65537: CALL_OW 298
65541: ST_TO_ADDR
// distance := 9999 ;
65542: LD_ADDR_VAR 0 10
65546: PUSH
65547: LD_INT 9999
65549: ST_TO_ADDR
// for i := 0 to 5 do
65550: LD_ADDR_VAR 0 6
65554: PUSH
65555: DOUBLE
65556: LD_INT 0
65558: DEC
65559: ST_TO_ADDR
65560: LD_INT 5
65562: PUSH
65563: FOR_TO
65564: IFFALSE 65707
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65566: LD_ADDR_VAR 0 7
65570: PUSH
65571: LD_VAR 0 1
65575: PPUSH
65576: LD_VAR 0 6
65580: PPUSH
65581: LD_VAR 0 11
65585: PPUSH
65586: CALL_OW 272
65590: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65591: LD_ADDR_VAR 0 8
65595: PUSH
65596: LD_VAR 0 2
65600: PPUSH
65601: LD_VAR 0 6
65605: PPUSH
65606: LD_VAR 0 11
65610: PPUSH
65611: CALL_OW 273
65615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65616: LD_VAR 0 7
65620: PPUSH
65621: LD_VAR 0 8
65625: PPUSH
65626: CALL_OW 488
65630: NOT
65631: IFFALSE 65635
// continue ;
65633: GO 65563
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65635: LD_ADDR_VAR 0 9
65639: PUSH
65640: LD_VAR 0 12
65644: PUSH
65645: LD_INT 1
65647: ARRAY
65648: PPUSH
65649: LD_VAR 0 12
65653: PUSH
65654: LD_INT 2
65656: ARRAY
65657: PPUSH
65658: LD_VAR 0 7
65662: PPUSH
65663: LD_VAR 0 8
65667: PPUSH
65668: CALL_OW 298
65672: ST_TO_ADDR
// if tmp < distance then
65673: LD_VAR 0 9
65677: PUSH
65678: LD_VAR 0 10
65682: LESS
65683: IFFALSE 65705
// begin result := i ;
65685: LD_ADDR_VAR 0 5
65689: PUSH
65690: LD_VAR 0 6
65694: ST_TO_ADDR
// distance := tmp ;
65695: LD_ADDR_VAR 0 10
65699: PUSH
65700: LD_VAR 0 9
65704: ST_TO_ADDR
// end ; end ;
65705: GO 65563
65707: POP
65708: POP
// end ;
65709: LD_VAR 0 5
65713: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65714: LD_INT 0
65716: PPUSH
65717: PPUSH
// if not driver or not IsInUnit ( driver ) then
65718: LD_VAR 0 1
65722: NOT
65723: PUSH
65724: LD_VAR 0 1
65728: PPUSH
65729: CALL_OW 310
65733: NOT
65734: OR
65735: IFFALSE 65739
// exit ;
65737: GO 65829
// vehicle := IsInUnit ( driver ) ;
65739: LD_ADDR_VAR 0 3
65743: PUSH
65744: LD_VAR 0 1
65748: PPUSH
65749: CALL_OW 310
65753: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65754: LD_VAR 0 1
65758: PPUSH
65759: LD_STRING \
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: PUSH
65789: LD_STRING E
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: LD_VAR 0 3
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: LD_INT 0
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PPUSH
65825: CALL_OW 446
// end ;
65829: LD_VAR 0 2
65833: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65834: LD_INT 0
65836: PPUSH
65837: PPUSH
// if not driver or not IsInUnit ( driver ) then
65838: LD_VAR 0 1
65842: NOT
65843: PUSH
65844: LD_VAR 0 1
65848: PPUSH
65849: CALL_OW 310
65853: NOT
65854: OR
65855: IFFALSE 65859
// exit ;
65857: GO 65949
// vehicle := IsInUnit ( driver ) ;
65859: LD_ADDR_VAR 0 3
65863: PUSH
65864: LD_VAR 0 1
65868: PPUSH
65869: CALL_OW 310
65873: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65874: LD_VAR 0 1
65878: PPUSH
65879: LD_STRING \
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 0
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: PUSH
65909: LD_STRING E
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: LD_VAR 0 3
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PPUSH
65945: CALL_OW 447
// end ;
65949: LD_VAR 0 2
65953: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65954: LD_INT 0
65956: PPUSH
65957: PPUSH
65958: PPUSH
// tmp := [ ] ;
65959: LD_ADDR_VAR 0 5
65963: PUSH
65964: EMPTY
65965: ST_TO_ADDR
// for i in units do
65966: LD_ADDR_VAR 0 4
65970: PUSH
65971: LD_VAR 0 1
65975: PUSH
65976: FOR_IN
65977: IFFALSE 66015
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65979: LD_ADDR_VAR 0 5
65983: PUSH
65984: LD_VAR 0 5
65988: PPUSH
65989: LD_VAR 0 5
65993: PUSH
65994: LD_INT 1
65996: PLUS
65997: PPUSH
65998: LD_VAR 0 4
66002: PPUSH
66003: CALL_OW 256
66007: PPUSH
66008: CALL_OW 2
66012: ST_TO_ADDR
66013: GO 65976
66015: POP
66016: POP
// if not tmp then
66017: LD_VAR 0 5
66021: NOT
66022: IFFALSE 66026
// exit ;
66024: GO 66074
// if asc then
66026: LD_VAR 0 2
66030: IFFALSE 66054
// result := SortListByListAsc ( units , tmp ) else
66032: LD_ADDR_VAR 0 3
66036: PUSH
66037: LD_VAR 0 1
66041: PPUSH
66042: LD_VAR 0 5
66046: PPUSH
66047: CALL_OW 76
66051: ST_TO_ADDR
66052: GO 66074
// result := SortListByListDesc ( units , tmp ) ;
66054: LD_ADDR_VAR 0 3
66058: PUSH
66059: LD_VAR 0 1
66063: PPUSH
66064: LD_VAR 0 5
66068: PPUSH
66069: CALL_OW 77
66073: ST_TO_ADDR
// end ;
66074: LD_VAR 0 3
66078: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66079: LD_INT 0
66081: PPUSH
66082: PPUSH
// task := GetTaskList ( mech ) ;
66083: LD_ADDR_VAR 0 4
66087: PUSH
66088: LD_VAR 0 1
66092: PPUSH
66093: CALL_OW 437
66097: ST_TO_ADDR
// if not task then
66098: LD_VAR 0 4
66102: NOT
66103: IFFALSE 66107
// exit ;
66105: GO 66149
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66107: LD_ADDR_VAR 0 3
66111: PUSH
66112: LD_VAR 0 4
66116: PUSH
66117: LD_INT 1
66119: ARRAY
66120: PUSH
66121: LD_INT 1
66123: ARRAY
66124: PUSH
66125: LD_STRING r
66127: EQUAL
66128: PUSH
66129: LD_VAR 0 4
66133: PUSH
66134: LD_INT 1
66136: ARRAY
66137: PUSH
66138: LD_INT 4
66140: ARRAY
66141: PUSH
66142: LD_VAR 0 2
66146: EQUAL
66147: AND
66148: ST_TO_ADDR
// end ;
66149: LD_VAR 0 3
66153: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66154: LD_INT 0
66156: PPUSH
// SetDir ( unit , d ) ;
66157: LD_VAR 0 1
66161: PPUSH
66162: LD_VAR 0 4
66166: PPUSH
66167: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66171: LD_VAR 0 1
66175: PPUSH
66176: LD_VAR 0 2
66180: PPUSH
66181: LD_VAR 0 3
66185: PPUSH
66186: LD_VAR 0 5
66190: PPUSH
66191: CALL_OW 48
// end ;
66195: LD_VAR 0 6
66199: RET
// export function ToNaturalNumber ( number ) ; begin
66200: LD_INT 0
66202: PPUSH
// result := number div 1 ;
66203: LD_ADDR_VAR 0 2
66207: PUSH
66208: LD_VAR 0 1
66212: PUSH
66213: LD_INT 1
66215: DIV
66216: ST_TO_ADDR
// if number < 0 then
66217: LD_VAR 0 1
66221: PUSH
66222: LD_INT 0
66224: LESS
66225: IFFALSE 66235
// result := 0 ;
66227: LD_ADDR_VAR 0 2
66231: PUSH
66232: LD_INT 0
66234: ST_TO_ADDR
// end ;
66235: LD_VAR 0 2
66239: RET
// export function SortByClass ( units , class ) ; var un ; begin
66240: LD_INT 0
66242: PPUSH
66243: PPUSH
// if not units or not class then
66244: LD_VAR 0 1
66248: NOT
66249: PUSH
66250: LD_VAR 0 2
66254: NOT
66255: OR
66256: IFFALSE 66260
// exit ;
66258: GO 66355
// result := [ ] ;
66260: LD_ADDR_VAR 0 3
66264: PUSH
66265: EMPTY
66266: ST_TO_ADDR
// for un in units do
66267: LD_ADDR_VAR 0 4
66271: PUSH
66272: LD_VAR 0 1
66276: PUSH
66277: FOR_IN
66278: IFFALSE 66353
// if GetClass ( un ) = class then
66280: LD_VAR 0 4
66284: PPUSH
66285: CALL_OW 257
66289: PUSH
66290: LD_VAR 0 2
66294: EQUAL
66295: IFFALSE 66322
// result := Insert ( result , 1 , un ) else
66297: LD_ADDR_VAR 0 3
66301: PUSH
66302: LD_VAR 0 3
66306: PPUSH
66307: LD_INT 1
66309: PPUSH
66310: LD_VAR 0 4
66314: PPUSH
66315: CALL_OW 2
66319: ST_TO_ADDR
66320: GO 66351
// result := Replace ( result , result + 1 , un ) ;
66322: LD_ADDR_VAR 0 3
66326: PUSH
66327: LD_VAR 0 3
66331: PPUSH
66332: LD_VAR 0 3
66336: PUSH
66337: LD_INT 1
66339: PLUS
66340: PPUSH
66341: LD_VAR 0 4
66345: PPUSH
66346: CALL_OW 1
66350: ST_TO_ADDR
66351: GO 66277
66353: POP
66354: POP
// end ;
66355: LD_VAR 0 3
66359: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66360: LD_INT 0
66362: PPUSH
66363: PPUSH
66364: PPUSH
66365: PPUSH
66366: PPUSH
66367: PPUSH
66368: PPUSH
// result := [ ] ;
66369: LD_ADDR_VAR 0 4
66373: PUSH
66374: EMPTY
66375: ST_TO_ADDR
// if x - r < 0 then
66376: LD_VAR 0 1
66380: PUSH
66381: LD_VAR 0 3
66385: MINUS
66386: PUSH
66387: LD_INT 0
66389: LESS
66390: IFFALSE 66402
// min_x := 0 else
66392: LD_ADDR_VAR 0 8
66396: PUSH
66397: LD_INT 0
66399: ST_TO_ADDR
66400: GO 66418
// min_x := x - r ;
66402: LD_ADDR_VAR 0 8
66406: PUSH
66407: LD_VAR 0 1
66411: PUSH
66412: LD_VAR 0 3
66416: MINUS
66417: ST_TO_ADDR
// if y - r < 0 then
66418: LD_VAR 0 2
66422: PUSH
66423: LD_VAR 0 3
66427: MINUS
66428: PUSH
66429: LD_INT 0
66431: LESS
66432: IFFALSE 66444
// min_y := 0 else
66434: LD_ADDR_VAR 0 7
66438: PUSH
66439: LD_INT 0
66441: ST_TO_ADDR
66442: GO 66460
// min_y := y - r ;
66444: LD_ADDR_VAR 0 7
66448: PUSH
66449: LD_VAR 0 2
66453: PUSH
66454: LD_VAR 0 3
66458: MINUS
66459: ST_TO_ADDR
// max_x := x + r ;
66460: LD_ADDR_VAR 0 9
66464: PUSH
66465: LD_VAR 0 1
66469: PUSH
66470: LD_VAR 0 3
66474: PLUS
66475: ST_TO_ADDR
// max_y := y + r ;
66476: LD_ADDR_VAR 0 10
66480: PUSH
66481: LD_VAR 0 2
66485: PUSH
66486: LD_VAR 0 3
66490: PLUS
66491: ST_TO_ADDR
// for _x = min_x to max_x do
66492: LD_ADDR_VAR 0 5
66496: PUSH
66497: DOUBLE
66498: LD_VAR 0 8
66502: DEC
66503: ST_TO_ADDR
66504: LD_VAR 0 9
66508: PUSH
66509: FOR_TO
66510: IFFALSE 66611
// for _y = min_y to max_y do
66512: LD_ADDR_VAR 0 6
66516: PUSH
66517: DOUBLE
66518: LD_VAR 0 7
66522: DEC
66523: ST_TO_ADDR
66524: LD_VAR 0 10
66528: PUSH
66529: FOR_TO
66530: IFFALSE 66607
// begin if not ValidHex ( _x , _y ) then
66532: LD_VAR 0 5
66536: PPUSH
66537: LD_VAR 0 6
66541: PPUSH
66542: CALL_OW 488
66546: NOT
66547: IFFALSE 66551
// continue ;
66549: GO 66529
// if GetResourceTypeXY ( _x , _y ) then
66551: LD_VAR 0 5
66555: PPUSH
66556: LD_VAR 0 6
66560: PPUSH
66561: CALL_OW 283
66565: IFFALSE 66605
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66567: LD_ADDR_VAR 0 4
66571: PUSH
66572: LD_VAR 0 4
66576: PPUSH
66577: LD_VAR 0 4
66581: PUSH
66582: LD_INT 1
66584: PLUS
66585: PPUSH
66586: LD_VAR 0 5
66590: PUSH
66591: LD_VAR 0 6
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PPUSH
66600: CALL_OW 1
66604: ST_TO_ADDR
// end ;
66605: GO 66529
66607: POP
66608: POP
66609: GO 66509
66611: POP
66612: POP
// end ;
66613: LD_VAR 0 4
66617: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66618: LD_INT 0
66620: PPUSH
66621: PPUSH
66622: PPUSH
66623: PPUSH
66624: PPUSH
66625: PPUSH
66626: PPUSH
66627: PPUSH
// if not units then
66628: LD_VAR 0 1
66632: NOT
66633: IFFALSE 66637
// exit ;
66635: GO 67161
// result := UnitFilter ( units , [ f_ok ] ) ;
66637: LD_ADDR_VAR 0 3
66641: PUSH
66642: LD_VAR 0 1
66646: PPUSH
66647: LD_INT 50
66649: PUSH
66650: EMPTY
66651: LIST
66652: PPUSH
66653: CALL_OW 72
66657: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66658: LD_ADDR_VAR 0 8
66662: PUSH
66663: LD_VAR 0 1
66667: PUSH
66668: LD_INT 1
66670: ARRAY
66671: PPUSH
66672: CALL_OW 255
66676: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66677: LD_ADDR_VAR 0 10
66681: PUSH
66682: LD_INT 29
66684: PUSH
66685: LD_INT 91
66687: PUSH
66688: LD_INT 49
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: LIST
66695: ST_TO_ADDR
// if not result then
66696: LD_VAR 0 3
66700: NOT
66701: IFFALSE 66705
// exit ;
66703: GO 67161
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66705: LD_ADDR_VAR 0 5
66709: PUSH
66710: LD_INT 81
66712: PUSH
66713: LD_VAR 0 8
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PPUSH
66722: CALL_OW 69
66726: ST_TO_ADDR
// for i in result do
66727: LD_ADDR_VAR 0 4
66731: PUSH
66732: LD_VAR 0 3
66736: PUSH
66737: FOR_IN
66738: IFFALSE 67159
// begin tag := GetTag ( i ) + 1 ;
66740: LD_ADDR_VAR 0 9
66744: PUSH
66745: LD_VAR 0 4
66749: PPUSH
66750: CALL_OW 110
66754: PUSH
66755: LD_INT 1
66757: PLUS
66758: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66759: LD_ADDR_VAR 0 7
66763: PUSH
66764: LD_VAR 0 4
66768: PPUSH
66769: CALL_OW 250
66773: PPUSH
66774: LD_VAR 0 4
66778: PPUSH
66779: CALL_OW 251
66783: PPUSH
66784: LD_INT 6
66786: PPUSH
66787: CALL 66360 0 3
66791: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66792: LD_VAR 0 4
66796: PPUSH
66797: CALL_OW 247
66801: PUSH
66802: LD_INT 2
66804: EQUAL
66805: PUSH
66806: LD_VAR 0 7
66810: AND
66811: PUSH
66812: LD_VAR 0 4
66816: PPUSH
66817: CALL_OW 264
66821: PUSH
66822: LD_VAR 0 10
66826: IN
66827: NOT
66828: AND
66829: IFFALSE 66868
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66831: LD_VAR 0 4
66835: PPUSH
66836: LD_VAR 0 7
66840: PUSH
66841: LD_INT 1
66843: ARRAY
66844: PUSH
66845: LD_INT 1
66847: ARRAY
66848: PPUSH
66849: LD_VAR 0 7
66853: PUSH
66854: LD_INT 1
66856: ARRAY
66857: PUSH
66858: LD_INT 2
66860: ARRAY
66861: PPUSH
66862: CALL_OW 116
66866: GO 67157
// if path > tag then
66868: LD_VAR 0 2
66872: PUSH
66873: LD_VAR 0 9
66877: GREATER
66878: IFFALSE 67086
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66880: LD_ADDR_VAR 0 6
66884: PUSH
66885: LD_VAR 0 5
66889: PPUSH
66890: LD_INT 91
66892: PUSH
66893: LD_VAR 0 4
66897: PUSH
66898: LD_INT 8
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: LIST
66905: PPUSH
66906: CALL_OW 72
66910: ST_TO_ADDR
// if nearEnemy then
66911: LD_VAR 0 6
66915: IFFALSE 66984
// begin if GetWeapon ( i ) = ru_time_lapser then
66917: LD_VAR 0 4
66921: PPUSH
66922: CALL_OW 264
66926: PUSH
66927: LD_INT 49
66929: EQUAL
66930: IFFALSE 66958
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66932: LD_VAR 0 4
66936: PPUSH
66937: LD_VAR 0 6
66941: PPUSH
66942: LD_VAR 0 4
66946: PPUSH
66947: CALL_OW 74
66951: PPUSH
66952: CALL_OW 112
66956: GO 66982
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66958: LD_VAR 0 4
66962: PPUSH
66963: LD_VAR 0 6
66967: PPUSH
66968: LD_VAR 0 4
66972: PPUSH
66973: CALL_OW 74
66977: PPUSH
66978: CALL_OW 115
// end else
66982: GO 67084
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66984: LD_VAR 0 4
66988: PPUSH
66989: LD_VAR 0 2
66993: PUSH
66994: LD_VAR 0 9
66998: ARRAY
66999: PUSH
67000: LD_INT 1
67002: ARRAY
67003: PPUSH
67004: LD_VAR 0 2
67008: PUSH
67009: LD_VAR 0 9
67013: ARRAY
67014: PUSH
67015: LD_INT 2
67017: ARRAY
67018: PPUSH
67019: CALL_OW 297
67023: PUSH
67024: LD_INT 6
67026: GREATER
67027: IFFALSE 67070
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67029: LD_VAR 0 4
67033: PPUSH
67034: LD_VAR 0 2
67038: PUSH
67039: LD_VAR 0 9
67043: ARRAY
67044: PUSH
67045: LD_INT 1
67047: ARRAY
67048: PPUSH
67049: LD_VAR 0 2
67053: PUSH
67054: LD_VAR 0 9
67058: ARRAY
67059: PUSH
67060: LD_INT 2
67062: ARRAY
67063: PPUSH
67064: CALL_OW 114
67068: GO 67084
// SetTag ( i , tag ) ;
67070: LD_VAR 0 4
67074: PPUSH
67075: LD_VAR 0 9
67079: PPUSH
67080: CALL_OW 109
// end else
67084: GO 67157
// if enemy then
67086: LD_VAR 0 5
67090: IFFALSE 67157
// begin if GetWeapon ( i ) = ru_time_lapser then
67092: LD_VAR 0 4
67096: PPUSH
67097: CALL_OW 264
67101: PUSH
67102: LD_INT 49
67104: EQUAL
67105: IFFALSE 67133
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67107: LD_VAR 0 4
67111: PPUSH
67112: LD_VAR 0 5
67116: PPUSH
67117: LD_VAR 0 4
67121: PPUSH
67122: CALL_OW 74
67126: PPUSH
67127: CALL_OW 112
67131: GO 67157
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67133: LD_VAR 0 4
67137: PPUSH
67138: LD_VAR 0 5
67142: PPUSH
67143: LD_VAR 0 4
67147: PPUSH
67148: CALL_OW 74
67152: PPUSH
67153: CALL_OW 115
// end ; end ;
67157: GO 66737
67159: POP
67160: POP
// end ;
67161: LD_VAR 0 3
67165: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67166: LD_INT 0
67168: PPUSH
67169: PPUSH
67170: PPUSH
// if not unit or IsInUnit ( unit ) then
67171: LD_VAR 0 1
67175: NOT
67176: PUSH
67177: LD_VAR 0 1
67181: PPUSH
67182: CALL_OW 310
67186: OR
67187: IFFALSE 67191
// exit ;
67189: GO 67282
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67191: LD_ADDR_VAR 0 4
67195: PUSH
67196: LD_VAR 0 1
67200: PPUSH
67201: CALL_OW 250
67205: PPUSH
67206: LD_VAR 0 2
67210: PPUSH
67211: LD_INT 1
67213: PPUSH
67214: CALL_OW 272
67218: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67219: LD_ADDR_VAR 0 5
67223: PUSH
67224: LD_VAR 0 1
67228: PPUSH
67229: CALL_OW 251
67233: PPUSH
67234: LD_VAR 0 2
67238: PPUSH
67239: LD_INT 1
67241: PPUSH
67242: CALL_OW 273
67246: ST_TO_ADDR
// if ValidHex ( x , y ) then
67247: LD_VAR 0 4
67251: PPUSH
67252: LD_VAR 0 5
67256: PPUSH
67257: CALL_OW 488
67261: IFFALSE 67282
// ComTurnXY ( unit , x , y ) ;
67263: LD_VAR 0 1
67267: PPUSH
67268: LD_VAR 0 4
67272: PPUSH
67273: LD_VAR 0 5
67277: PPUSH
67278: CALL_OW 118
// end ;
67282: LD_VAR 0 3
67286: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67287: LD_INT 0
67289: PPUSH
67290: PPUSH
// result := false ;
67291: LD_ADDR_VAR 0 3
67295: PUSH
67296: LD_INT 0
67298: ST_TO_ADDR
// if not units then
67299: LD_VAR 0 2
67303: NOT
67304: IFFALSE 67308
// exit ;
67306: GO 67353
// for i in units do
67308: LD_ADDR_VAR 0 4
67312: PUSH
67313: LD_VAR 0 2
67317: PUSH
67318: FOR_IN
67319: IFFALSE 67351
// if See ( side , i ) then
67321: LD_VAR 0 1
67325: PPUSH
67326: LD_VAR 0 4
67330: PPUSH
67331: CALL_OW 292
67335: IFFALSE 67349
// begin result := true ;
67337: LD_ADDR_VAR 0 3
67341: PUSH
67342: LD_INT 1
67344: ST_TO_ADDR
// exit ;
67345: POP
67346: POP
67347: GO 67353
// end ;
67349: GO 67318
67351: POP
67352: POP
// end ;
67353: LD_VAR 0 3
67357: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67358: LD_INT 0
67360: PPUSH
67361: PPUSH
67362: PPUSH
67363: PPUSH
// if not unit or not points then
67364: LD_VAR 0 1
67368: NOT
67369: PUSH
67370: LD_VAR 0 2
67374: NOT
67375: OR
67376: IFFALSE 67380
// exit ;
67378: GO 67470
// dist := 99999 ;
67380: LD_ADDR_VAR 0 5
67384: PUSH
67385: LD_INT 99999
67387: ST_TO_ADDR
// for i in points do
67388: LD_ADDR_VAR 0 4
67392: PUSH
67393: LD_VAR 0 2
67397: PUSH
67398: FOR_IN
67399: IFFALSE 67468
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67401: LD_ADDR_VAR 0 6
67405: PUSH
67406: LD_VAR 0 1
67410: PPUSH
67411: LD_VAR 0 4
67415: PUSH
67416: LD_INT 1
67418: ARRAY
67419: PPUSH
67420: LD_VAR 0 4
67424: PUSH
67425: LD_INT 2
67427: ARRAY
67428: PPUSH
67429: CALL_OW 297
67433: ST_TO_ADDR
// if tmpDist < dist then
67434: LD_VAR 0 6
67438: PUSH
67439: LD_VAR 0 5
67443: LESS
67444: IFFALSE 67466
// begin result := i ;
67446: LD_ADDR_VAR 0 3
67450: PUSH
67451: LD_VAR 0 4
67455: ST_TO_ADDR
// dist := tmpDist ;
67456: LD_ADDR_VAR 0 5
67460: PUSH
67461: LD_VAR 0 6
67465: ST_TO_ADDR
// end ; end ;
67466: GO 67398
67468: POP
67469: POP
// end ;
67470: LD_VAR 0 3
67474: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67475: LD_INT 0
67477: PPUSH
// uc_side := side ;
67478: LD_ADDR_OWVAR 20
67482: PUSH
67483: LD_VAR 0 1
67487: ST_TO_ADDR
// uc_nation := 3 ;
67488: LD_ADDR_OWVAR 21
67492: PUSH
67493: LD_INT 3
67495: ST_TO_ADDR
// vc_chassis := 25 ;
67496: LD_ADDR_OWVAR 37
67500: PUSH
67501: LD_INT 25
67503: ST_TO_ADDR
// vc_engine := engine_siberite ;
67504: LD_ADDR_OWVAR 39
67508: PUSH
67509: LD_INT 3
67511: ST_TO_ADDR
// vc_control := control_computer ;
67512: LD_ADDR_OWVAR 38
67516: PUSH
67517: LD_INT 3
67519: ST_TO_ADDR
// vc_weapon := 59 ;
67520: LD_ADDR_OWVAR 40
67524: PUSH
67525: LD_INT 59
67527: ST_TO_ADDR
// result := CreateVehicle ;
67528: LD_ADDR_VAR 0 5
67532: PUSH
67533: CALL_OW 45
67537: ST_TO_ADDR
// SetDir ( result , d ) ;
67538: LD_VAR 0 5
67542: PPUSH
67543: LD_VAR 0 4
67547: PPUSH
67548: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67552: LD_VAR 0 5
67556: PPUSH
67557: LD_VAR 0 2
67561: PPUSH
67562: LD_VAR 0 3
67566: PPUSH
67567: LD_INT 0
67569: PPUSH
67570: CALL_OW 48
// end ;
67574: LD_VAR 0 5
67578: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67579: LD_INT 0
67581: PPUSH
67582: PPUSH
67583: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67584: LD_ADDR_VAR 0 2
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 0
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67607: LD_VAR 0 1
67611: NOT
67612: PUSH
67613: LD_VAR 0 1
67617: PPUSH
67618: CALL_OW 264
67622: PUSH
67623: LD_INT 12
67625: PUSH
67626: LD_INT 51
67628: PUSH
67629: LD_INT 32
67631: PUSH
67632: LD_INT 89
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: IN
67641: NOT
67642: OR
67643: IFFALSE 67647
// exit ;
67645: GO 67745
// for i := 1 to 3 do
67647: LD_ADDR_VAR 0 3
67651: PUSH
67652: DOUBLE
67653: LD_INT 1
67655: DEC
67656: ST_TO_ADDR
67657: LD_INT 3
67659: PUSH
67660: FOR_TO
67661: IFFALSE 67743
// begin tmp := GetCargo ( cargo , i ) ;
67663: LD_ADDR_VAR 0 4
67667: PUSH
67668: LD_VAR 0 1
67672: PPUSH
67673: LD_VAR 0 3
67677: PPUSH
67678: CALL_OW 289
67682: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67683: LD_ADDR_VAR 0 2
67687: PUSH
67688: LD_VAR 0 2
67692: PPUSH
67693: LD_VAR 0 3
67697: PPUSH
67698: LD_VAR 0 4
67702: PPUSH
67703: CALL_OW 1
67707: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67708: LD_ADDR_VAR 0 2
67712: PUSH
67713: LD_VAR 0 2
67717: PPUSH
67718: LD_INT 4
67720: PPUSH
67721: LD_VAR 0 2
67725: PUSH
67726: LD_INT 4
67728: ARRAY
67729: PUSH
67730: LD_VAR 0 4
67734: PLUS
67735: PPUSH
67736: CALL_OW 1
67740: ST_TO_ADDR
// end ;
67741: GO 67660
67743: POP
67744: POP
// end ;
67745: LD_VAR 0 2
67749: RET
// export function Length ( array ) ; begin
67750: LD_INT 0
67752: PPUSH
// result := array + 0 ;
67753: LD_ADDR_VAR 0 2
67757: PUSH
67758: LD_VAR 0 1
67762: PUSH
67763: LD_INT 0
67765: PLUS
67766: ST_TO_ADDR
// end ;
67767: LD_VAR 0 2
67771: RET
// export function PrepareArray ( array ) ; begin
67772: LD_INT 0
67774: PPUSH
// result := array diff 0 ;
67775: LD_ADDR_VAR 0 2
67779: PUSH
67780: LD_VAR 0 1
67784: PUSH
67785: LD_INT 0
67787: DIFF
67788: ST_TO_ADDR
// if not result [ 1 ] then
67789: LD_VAR 0 2
67793: PUSH
67794: LD_INT 1
67796: ARRAY
67797: NOT
67798: IFFALSE 67818
// result := Delete ( result , 1 ) ;
67800: LD_ADDR_VAR 0 2
67804: PUSH
67805: LD_VAR 0 2
67809: PPUSH
67810: LD_INT 1
67812: PPUSH
67813: CALL_OW 3
67817: ST_TO_ADDR
// end ;
67818: LD_VAR 0 2
67822: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67823: LD_INT 0
67825: PPUSH
67826: PPUSH
67827: PPUSH
67828: PPUSH
// sibRocketRange := 25 ;
67829: LD_ADDR_VAR 0 6
67833: PUSH
67834: LD_INT 25
67836: ST_TO_ADDR
// result := false ;
67837: LD_ADDR_VAR 0 4
67841: PUSH
67842: LD_INT 0
67844: ST_TO_ADDR
// for i := 0 to 5 do
67845: LD_ADDR_VAR 0 5
67849: PUSH
67850: DOUBLE
67851: LD_INT 0
67853: DEC
67854: ST_TO_ADDR
67855: LD_INT 5
67857: PUSH
67858: FOR_TO
67859: IFFALSE 67926
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67861: LD_VAR 0 1
67865: PPUSH
67866: LD_VAR 0 5
67870: PPUSH
67871: LD_VAR 0 6
67875: PPUSH
67876: CALL_OW 272
67880: PPUSH
67881: LD_VAR 0 2
67885: PPUSH
67886: LD_VAR 0 5
67890: PPUSH
67891: LD_VAR 0 6
67895: PPUSH
67896: CALL_OW 273
67900: PPUSH
67901: LD_VAR 0 3
67905: PPUSH
67906: CALL_OW 309
67910: IFFALSE 67924
// begin result := true ;
67912: LD_ADDR_VAR 0 4
67916: PUSH
67917: LD_INT 1
67919: ST_TO_ADDR
// exit ;
67920: POP
67921: POP
67922: GO 67928
// end ;
67924: GO 67858
67926: POP
67927: POP
// end ; end_of_file
67928: LD_VAR 0 4
67932: RET
// every 0 0$1 do
67933: GO 67935
67935: DISABLE
// begin enable ;
67936: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
67937: LD_STRING updateTimer(
67939: PUSH
67940: LD_OWVAR 1
67944: STR
67945: PUSH
67946: LD_STRING );
67948: STR
67949: PPUSH
67950: CALL_OW 559
// end ;
67954: END
// export function SOS_MapStart ( ) ; begin
67955: LD_INT 0
67957: PPUSH
// if streamModeActive then
67958: LD_EXP 66
67962: IFFALSE 67971
// DefineStreamItems ( true ) ;
67964: LD_INT 1
67966: PPUSH
67967: CALL 69625 0 1
// UpdateFactoryWaypoints ( ) ;
67971: CALL 82486 0 0
// UpdateWarehouseGatheringPoints ( ) ;
67975: CALL 82743 0 0
// end ;
67979: LD_VAR 0 1
67983: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67984: LD_INT 0
67986: PPUSH
// if p2 = hack_mode then
67987: LD_VAR 0 2
67991: PUSH
67992: LD_INT 100
67994: EQUAL
67995: IFFALSE 68998
// begin if not StreamModeActive then
67997: LD_EXP 66
68001: NOT
68002: IFFALSE 68012
// StreamModeActive := true ;
68004: LD_ADDR_EXP 66
68008: PUSH
68009: LD_INT 1
68011: ST_TO_ADDR
// if p3 = 0 then
68012: LD_VAR 0 3
68016: PUSH
68017: LD_INT 0
68019: EQUAL
68020: IFFALSE 68026
// InitStreamMode ;
68022: CALL 69161 0 0
// if p3 = 1 then
68026: LD_VAR 0 3
68030: PUSH
68031: LD_INT 1
68033: EQUAL
68034: IFFALSE 68044
// sRocket := true ;
68036: LD_ADDR_EXP 71
68040: PUSH
68041: LD_INT 1
68043: ST_TO_ADDR
// if p3 = 2 then
68044: LD_VAR 0 3
68048: PUSH
68049: LD_INT 2
68051: EQUAL
68052: IFFALSE 68062
// sSpeed := true ;
68054: LD_ADDR_EXP 70
68058: PUSH
68059: LD_INT 1
68061: ST_TO_ADDR
// if p3 = 3 then
68062: LD_VAR 0 3
68066: PUSH
68067: LD_INT 3
68069: EQUAL
68070: IFFALSE 68080
// sEngine := true ;
68072: LD_ADDR_EXP 72
68076: PUSH
68077: LD_INT 1
68079: ST_TO_ADDR
// if p3 = 4 then
68080: LD_VAR 0 3
68084: PUSH
68085: LD_INT 4
68087: EQUAL
68088: IFFALSE 68098
// sSpec := true ;
68090: LD_ADDR_EXP 69
68094: PUSH
68095: LD_INT 1
68097: ST_TO_ADDR
// if p3 = 5 then
68098: LD_VAR 0 3
68102: PUSH
68103: LD_INT 5
68105: EQUAL
68106: IFFALSE 68116
// sLevel := true ;
68108: LD_ADDR_EXP 73
68112: PUSH
68113: LD_INT 1
68115: ST_TO_ADDR
// if p3 = 6 then
68116: LD_VAR 0 3
68120: PUSH
68121: LD_INT 6
68123: EQUAL
68124: IFFALSE 68134
// sArmoury := true ;
68126: LD_ADDR_EXP 74
68130: PUSH
68131: LD_INT 1
68133: ST_TO_ADDR
// if p3 = 7 then
68134: LD_VAR 0 3
68138: PUSH
68139: LD_INT 7
68141: EQUAL
68142: IFFALSE 68152
// sRadar := true ;
68144: LD_ADDR_EXP 75
68148: PUSH
68149: LD_INT 1
68151: ST_TO_ADDR
// if p3 = 8 then
68152: LD_VAR 0 3
68156: PUSH
68157: LD_INT 8
68159: EQUAL
68160: IFFALSE 68170
// sBunker := true ;
68162: LD_ADDR_EXP 76
68166: PUSH
68167: LD_INT 1
68169: ST_TO_ADDR
// if p3 = 9 then
68170: LD_VAR 0 3
68174: PUSH
68175: LD_INT 9
68177: EQUAL
68178: IFFALSE 68188
// sHack := true ;
68180: LD_ADDR_EXP 77
68184: PUSH
68185: LD_INT 1
68187: ST_TO_ADDR
// if p3 = 10 then
68188: LD_VAR 0 3
68192: PUSH
68193: LD_INT 10
68195: EQUAL
68196: IFFALSE 68206
// sFire := true ;
68198: LD_ADDR_EXP 78
68202: PUSH
68203: LD_INT 1
68205: ST_TO_ADDR
// if p3 = 11 then
68206: LD_VAR 0 3
68210: PUSH
68211: LD_INT 11
68213: EQUAL
68214: IFFALSE 68224
// sRefresh := true ;
68216: LD_ADDR_EXP 79
68220: PUSH
68221: LD_INT 1
68223: ST_TO_ADDR
// if p3 = 12 then
68224: LD_VAR 0 3
68228: PUSH
68229: LD_INT 12
68231: EQUAL
68232: IFFALSE 68242
// sExp := true ;
68234: LD_ADDR_EXP 80
68238: PUSH
68239: LD_INT 1
68241: ST_TO_ADDR
// if p3 = 13 then
68242: LD_VAR 0 3
68246: PUSH
68247: LD_INT 13
68249: EQUAL
68250: IFFALSE 68260
// sDepot := true ;
68252: LD_ADDR_EXP 81
68256: PUSH
68257: LD_INT 1
68259: ST_TO_ADDR
// if p3 = 14 then
68260: LD_VAR 0 3
68264: PUSH
68265: LD_INT 14
68267: EQUAL
68268: IFFALSE 68278
// sFlag := true ;
68270: LD_ADDR_EXP 82
68274: PUSH
68275: LD_INT 1
68277: ST_TO_ADDR
// if p3 = 15 then
68278: LD_VAR 0 3
68282: PUSH
68283: LD_INT 15
68285: EQUAL
68286: IFFALSE 68296
// sKamikadze := true ;
68288: LD_ADDR_EXP 90
68292: PUSH
68293: LD_INT 1
68295: ST_TO_ADDR
// if p3 = 16 then
68296: LD_VAR 0 3
68300: PUSH
68301: LD_INT 16
68303: EQUAL
68304: IFFALSE 68314
// sTroll := true ;
68306: LD_ADDR_EXP 91
68310: PUSH
68311: LD_INT 1
68313: ST_TO_ADDR
// if p3 = 17 then
68314: LD_VAR 0 3
68318: PUSH
68319: LD_INT 17
68321: EQUAL
68322: IFFALSE 68332
// sSlow := true ;
68324: LD_ADDR_EXP 92
68328: PUSH
68329: LD_INT 1
68331: ST_TO_ADDR
// if p3 = 18 then
68332: LD_VAR 0 3
68336: PUSH
68337: LD_INT 18
68339: EQUAL
68340: IFFALSE 68350
// sLack := true ;
68342: LD_ADDR_EXP 93
68346: PUSH
68347: LD_INT 1
68349: ST_TO_ADDR
// if p3 = 19 then
68350: LD_VAR 0 3
68354: PUSH
68355: LD_INT 19
68357: EQUAL
68358: IFFALSE 68368
// sTank := true ;
68360: LD_ADDR_EXP 95
68364: PUSH
68365: LD_INT 1
68367: ST_TO_ADDR
// if p3 = 20 then
68368: LD_VAR 0 3
68372: PUSH
68373: LD_INT 20
68375: EQUAL
68376: IFFALSE 68386
// sRemote := true ;
68378: LD_ADDR_EXP 96
68382: PUSH
68383: LD_INT 1
68385: ST_TO_ADDR
// if p3 = 21 then
68386: LD_VAR 0 3
68390: PUSH
68391: LD_INT 21
68393: EQUAL
68394: IFFALSE 68404
// sPowell := true ;
68396: LD_ADDR_EXP 97
68400: PUSH
68401: LD_INT 1
68403: ST_TO_ADDR
// if p3 = 22 then
68404: LD_VAR 0 3
68408: PUSH
68409: LD_INT 22
68411: EQUAL
68412: IFFALSE 68422
// sTeleport := true ;
68414: LD_ADDR_EXP 100
68418: PUSH
68419: LD_INT 1
68421: ST_TO_ADDR
// if p3 = 23 then
68422: LD_VAR 0 3
68426: PUSH
68427: LD_INT 23
68429: EQUAL
68430: IFFALSE 68440
// sOilTower := true ;
68432: LD_ADDR_EXP 102
68436: PUSH
68437: LD_INT 1
68439: ST_TO_ADDR
// if p3 = 24 then
68440: LD_VAR 0 3
68444: PUSH
68445: LD_INT 24
68447: EQUAL
68448: IFFALSE 68458
// sShovel := true ;
68450: LD_ADDR_EXP 103
68454: PUSH
68455: LD_INT 1
68457: ST_TO_ADDR
// if p3 = 25 then
68458: LD_VAR 0 3
68462: PUSH
68463: LD_INT 25
68465: EQUAL
68466: IFFALSE 68476
// sSheik := true ;
68468: LD_ADDR_EXP 104
68472: PUSH
68473: LD_INT 1
68475: ST_TO_ADDR
// if p3 = 26 then
68476: LD_VAR 0 3
68480: PUSH
68481: LD_INT 26
68483: EQUAL
68484: IFFALSE 68494
// sEarthquake := true ;
68486: LD_ADDR_EXP 106
68490: PUSH
68491: LD_INT 1
68493: ST_TO_ADDR
// if p3 = 27 then
68494: LD_VAR 0 3
68498: PUSH
68499: LD_INT 27
68501: EQUAL
68502: IFFALSE 68512
// sAI := true ;
68504: LD_ADDR_EXP 107
68508: PUSH
68509: LD_INT 1
68511: ST_TO_ADDR
// if p3 = 28 then
68512: LD_VAR 0 3
68516: PUSH
68517: LD_INT 28
68519: EQUAL
68520: IFFALSE 68530
// sCargo := true ;
68522: LD_ADDR_EXP 110
68526: PUSH
68527: LD_INT 1
68529: ST_TO_ADDR
// if p3 = 29 then
68530: LD_VAR 0 3
68534: PUSH
68535: LD_INT 29
68537: EQUAL
68538: IFFALSE 68548
// sDLaser := true ;
68540: LD_ADDR_EXP 111
68544: PUSH
68545: LD_INT 1
68547: ST_TO_ADDR
// if p3 = 30 then
68548: LD_VAR 0 3
68552: PUSH
68553: LD_INT 30
68555: EQUAL
68556: IFFALSE 68566
// sExchange := true ;
68558: LD_ADDR_EXP 112
68562: PUSH
68563: LD_INT 1
68565: ST_TO_ADDR
// if p3 = 31 then
68566: LD_VAR 0 3
68570: PUSH
68571: LD_INT 31
68573: EQUAL
68574: IFFALSE 68584
// sFac := true ;
68576: LD_ADDR_EXP 113
68580: PUSH
68581: LD_INT 1
68583: ST_TO_ADDR
// if p3 = 32 then
68584: LD_VAR 0 3
68588: PUSH
68589: LD_INT 32
68591: EQUAL
68592: IFFALSE 68602
// sPower := true ;
68594: LD_ADDR_EXP 114
68598: PUSH
68599: LD_INT 1
68601: ST_TO_ADDR
// if p3 = 33 then
68602: LD_VAR 0 3
68606: PUSH
68607: LD_INT 33
68609: EQUAL
68610: IFFALSE 68620
// sRandom := true ;
68612: LD_ADDR_EXP 115
68616: PUSH
68617: LD_INT 1
68619: ST_TO_ADDR
// if p3 = 34 then
68620: LD_VAR 0 3
68624: PUSH
68625: LD_INT 34
68627: EQUAL
68628: IFFALSE 68638
// sShield := true ;
68630: LD_ADDR_EXP 116
68634: PUSH
68635: LD_INT 1
68637: ST_TO_ADDR
// if p3 = 35 then
68638: LD_VAR 0 3
68642: PUSH
68643: LD_INT 35
68645: EQUAL
68646: IFFALSE 68656
// sTime := true ;
68648: LD_ADDR_EXP 117
68652: PUSH
68653: LD_INT 1
68655: ST_TO_ADDR
// if p3 = 36 then
68656: LD_VAR 0 3
68660: PUSH
68661: LD_INT 36
68663: EQUAL
68664: IFFALSE 68674
// sTools := true ;
68666: LD_ADDR_EXP 118
68670: PUSH
68671: LD_INT 1
68673: ST_TO_ADDR
// if p3 = 101 then
68674: LD_VAR 0 3
68678: PUSH
68679: LD_INT 101
68681: EQUAL
68682: IFFALSE 68692
// sSold := true ;
68684: LD_ADDR_EXP 83
68688: PUSH
68689: LD_INT 1
68691: ST_TO_ADDR
// if p3 = 102 then
68692: LD_VAR 0 3
68696: PUSH
68697: LD_INT 102
68699: EQUAL
68700: IFFALSE 68710
// sDiff := true ;
68702: LD_ADDR_EXP 84
68706: PUSH
68707: LD_INT 1
68709: ST_TO_ADDR
// if p3 = 103 then
68710: LD_VAR 0 3
68714: PUSH
68715: LD_INT 103
68717: EQUAL
68718: IFFALSE 68728
// sFog := true ;
68720: LD_ADDR_EXP 87
68724: PUSH
68725: LD_INT 1
68727: ST_TO_ADDR
// if p3 = 104 then
68728: LD_VAR 0 3
68732: PUSH
68733: LD_INT 104
68735: EQUAL
68736: IFFALSE 68746
// sReset := true ;
68738: LD_ADDR_EXP 88
68742: PUSH
68743: LD_INT 1
68745: ST_TO_ADDR
// if p3 = 105 then
68746: LD_VAR 0 3
68750: PUSH
68751: LD_INT 105
68753: EQUAL
68754: IFFALSE 68764
// sSun := true ;
68756: LD_ADDR_EXP 89
68760: PUSH
68761: LD_INT 1
68763: ST_TO_ADDR
// if p3 = 106 then
68764: LD_VAR 0 3
68768: PUSH
68769: LD_INT 106
68771: EQUAL
68772: IFFALSE 68782
// sTiger := true ;
68774: LD_ADDR_EXP 85
68778: PUSH
68779: LD_INT 1
68781: ST_TO_ADDR
// if p3 = 107 then
68782: LD_VAR 0 3
68786: PUSH
68787: LD_INT 107
68789: EQUAL
68790: IFFALSE 68800
// sBomb := true ;
68792: LD_ADDR_EXP 86
68796: PUSH
68797: LD_INT 1
68799: ST_TO_ADDR
// if p3 = 108 then
68800: LD_VAR 0 3
68804: PUSH
68805: LD_INT 108
68807: EQUAL
68808: IFFALSE 68818
// sWound := true ;
68810: LD_ADDR_EXP 94
68814: PUSH
68815: LD_INT 1
68817: ST_TO_ADDR
// if p3 = 109 then
68818: LD_VAR 0 3
68822: PUSH
68823: LD_INT 109
68825: EQUAL
68826: IFFALSE 68836
// sBetray := true ;
68828: LD_ADDR_EXP 98
68832: PUSH
68833: LD_INT 1
68835: ST_TO_ADDR
// if p3 = 110 then
68836: LD_VAR 0 3
68840: PUSH
68841: LD_INT 110
68843: EQUAL
68844: IFFALSE 68854
// sContamin := true ;
68846: LD_ADDR_EXP 99
68850: PUSH
68851: LD_INT 1
68853: ST_TO_ADDR
// if p3 = 111 then
68854: LD_VAR 0 3
68858: PUSH
68859: LD_INT 111
68861: EQUAL
68862: IFFALSE 68872
// sOil := true ;
68864: LD_ADDR_EXP 101
68868: PUSH
68869: LD_INT 1
68871: ST_TO_ADDR
// if p3 = 112 then
68872: LD_VAR 0 3
68876: PUSH
68877: LD_INT 112
68879: EQUAL
68880: IFFALSE 68890
// sStu := true ;
68882: LD_ADDR_EXP 105
68886: PUSH
68887: LD_INT 1
68889: ST_TO_ADDR
// if p3 = 113 then
68890: LD_VAR 0 3
68894: PUSH
68895: LD_INT 113
68897: EQUAL
68898: IFFALSE 68908
// sBazooka := true ;
68900: LD_ADDR_EXP 108
68904: PUSH
68905: LD_INT 1
68907: ST_TO_ADDR
// if p3 = 114 then
68908: LD_VAR 0 3
68912: PUSH
68913: LD_INT 114
68915: EQUAL
68916: IFFALSE 68926
// sMortar := true ;
68918: LD_ADDR_EXP 109
68922: PUSH
68923: LD_INT 1
68925: ST_TO_ADDR
// if p3 = 115 then
68926: LD_VAR 0 3
68930: PUSH
68931: LD_INT 115
68933: EQUAL
68934: IFFALSE 68944
// sRanger := true ;
68936: LD_ADDR_EXP 119
68940: PUSH
68941: LD_INT 1
68943: ST_TO_ADDR
// if p3 = 116 then
68944: LD_VAR 0 3
68948: PUSH
68949: LD_INT 116
68951: EQUAL
68952: IFFALSE 68962
// sComputer := true ;
68954: LD_ADDR_EXP 120
68958: PUSH
68959: LD_INT 1
68961: ST_TO_ADDR
// if p3 = 117 then
68962: LD_VAR 0 3
68966: PUSH
68967: LD_INT 117
68969: EQUAL
68970: IFFALSE 68980
// s30 := true ;
68972: LD_ADDR_EXP 121
68976: PUSH
68977: LD_INT 1
68979: ST_TO_ADDR
// if p3 = 118 then
68980: LD_VAR 0 3
68984: PUSH
68985: LD_INT 118
68987: EQUAL
68988: IFFALSE 68998
// s60 := true ;
68990: LD_ADDR_EXP 122
68994: PUSH
68995: LD_INT 1
68997: ST_TO_ADDR
// end ; if p2 = stream_mode then
68998: LD_VAR 0 2
69002: PUSH
69003: LD_INT 101
69005: EQUAL
69006: IFFALSE 69134
// begin case p3 of 1 :
69008: LD_VAR 0 3
69012: PUSH
69013: LD_INT 1
69015: DOUBLE
69016: EQUAL
69017: IFTRUE 69021
69019: GO 69028
69021: POP
// hHackUnlimitedResources ; 2 :
69022: CALL 81232 0 0
69026: GO 69134
69028: LD_INT 2
69030: DOUBLE
69031: EQUAL
69032: IFTRUE 69036
69034: GO 69043
69036: POP
// hHackSetLevel10 ; 3 :
69037: CALL 81365 0 0
69041: GO 69134
69043: LD_INT 3
69045: DOUBLE
69046: EQUAL
69047: IFTRUE 69051
69049: GO 69058
69051: POP
// hHackSetLevel10YourUnits ; 4 :
69052: CALL 81450 0 0
69056: GO 69134
69058: LD_INT 4
69060: DOUBLE
69061: EQUAL
69062: IFTRUE 69066
69064: GO 69073
69066: POP
// hHackInvincible ; 5 :
69067: CALL 81898 0 0
69071: GO 69134
69073: LD_INT 5
69075: DOUBLE
69076: EQUAL
69077: IFTRUE 69081
69079: GO 69088
69081: POP
// hHackInvisible ; 6 :
69082: CALL 82009 0 0
69086: GO 69134
69088: LD_INT 6
69090: DOUBLE
69091: EQUAL
69092: IFTRUE 69096
69094: GO 69103
69096: POP
// hHackChangeYourSide ; 7 :
69097: CALL 82066 0 0
69101: GO 69134
69103: LD_INT 7
69105: DOUBLE
69106: EQUAL
69107: IFTRUE 69111
69109: GO 69118
69111: POP
// hHackChangeUnitSide ; 8 :
69112: CALL 82108 0 0
69116: GO 69134
69118: LD_INT 8
69120: DOUBLE
69121: EQUAL
69122: IFTRUE 69126
69124: GO 69133
69126: POP
// hHackFog ; end ;
69127: CALL 82209 0 0
69131: GO 69134
69133: POP
// end ; end ;
69134: LD_VAR 0 7
69138: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
69139: GO 69141
69141: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69142: LD_STRING initStreamRollete();
69144: PPUSH
69145: CALL_OW 559
// InitStreamMode ;
69149: CALL 69161 0 0
// DefineStreamItems ( false ) ;
69153: LD_INT 0
69155: PPUSH
69156: CALL 69625 0 1
// end ;
69160: END
// function InitStreamMode ; begin
69161: LD_INT 0
69163: PPUSH
// streamModeActive := false ;
69164: LD_ADDR_EXP 66
69168: PUSH
69169: LD_INT 0
69171: ST_TO_ADDR
// normalCounter := 36 ;
69172: LD_ADDR_EXP 67
69176: PUSH
69177: LD_INT 36
69179: ST_TO_ADDR
// hardcoreCounter := 18 ;
69180: LD_ADDR_EXP 68
69184: PUSH
69185: LD_INT 18
69187: ST_TO_ADDR
// sRocket := false ;
69188: LD_ADDR_EXP 71
69192: PUSH
69193: LD_INT 0
69195: ST_TO_ADDR
// sSpeed := false ;
69196: LD_ADDR_EXP 70
69200: PUSH
69201: LD_INT 0
69203: ST_TO_ADDR
// sEngine := false ;
69204: LD_ADDR_EXP 72
69208: PUSH
69209: LD_INT 0
69211: ST_TO_ADDR
// sSpec := false ;
69212: LD_ADDR_EXP 69
69216: PUSH
69217: LD_INT 0
69219: ST_TO_ADDR
// sLevel := false ;
69220: LD_ADDR_EXP 73
69224: PUSH
69225: LD_INT 0
69227: ST_TO_ADDR
// sArmoury := false ;
69228: LD_ADDR_EXP 74
69232: PUSH
69233: LD_INT 0
69235: ST_TO_ADDR
// sRadar := false ;
69236: LD_ADDR_EXP 75
69240: PUSH
69241: LD_INT 0
69243: ST_TO_ADDR
// sBunker := false ;
69244: LD_ADDR_EXP 76
69248: PUSH
69249: LD_INT 0
69251: ST_TO_ADDR
// sHack := false ;
69252: LD_ADDR_EXP 77
69256: PUSH
69257: LD_INT 0
69259: ST_TO_ADDR
// sFire := false ;
69260: LD_ADDR_EXP 78
69264: PUSH
69265: LD_INT 0
69267: ST_TO_ADDR
// sRefresh := false ;
69268: LD_ADDR_EXP 79
69272: PUSH
69273: LD_INT 0
69275: ST_TO_ADDR
// sExp := false ;
69276: LD_ADDR_EXP 80
69280: PUSH
69281: LD_INT 0
69283: ST_TO_ADDR
// sDepot := false ;
69284: LD_ADDR_EXP 81
69288: PUSH
69289: LD_INT 0
69291: ST_TO_ADDR
// sFlag := false ;
69292: LD_ADDR_EXP 82
69296: PUSH
69297: LD_INT 0
69299: ST_TO_ADDR
// sKamikadze := false ;
69300: LD_ADDR_EXP 90
69304: PUSH
69305: LD_INT 0
69307: ST_TO_ADDR
// sTroll := false ;
69308: LD_ADDR_EXP 91
69312: PUSH
69313: LD_INT 0
69315: ST_TO_ADDR
// sSlow := false ;
69316: LD_ADDR_EXP 92
69320: PUSH
69321: LD_INT 0
69323: ST_TO_ADDR
// sLack := false ;
69324: LD_ADDR_EXP 93
69328: PUSH
69329: LD_INT 0
69331: ST_TO_ADDR
// sTank := false ;
69332: LD_ADDR_EXP 95
69336: PUSH
69337: LD_INT 0
69339: ST_TO_ADDR
// sRemote := false ;
69340: LD_ADDR_EXP 96
69344: PUSH
69345: LD_INT 0
69347: ST_TO_ADDR
// sPowell := false ;
69348: LD_ADDR_EXP 97
69352: PUSH
69353: LD_INT 0
69355: ST_TO_ADDR
// sTeleport := false ;
69356: LD_ADDR_EXP 100
69360: PUSH
69361: LD_INT 0
69363: ST_TO_ADDR
// sOilTower := false ;
69364: LD_ADDR_EXP 102
69368: PUSH
69369: LD_INT 0
69371: ST_TO_ADDR
// sShovel := false ;
69372: LD_ADDR_EXP 103
69376: PUSH
69377: LD_INT 0
69379: ST_TO_ADDR
// sSheik := false ;
69380: LD_ADDR_EXP 104
69384: PUSH
69385: LD_INT 0
69387: ST_TO_ADDR
// sEarthquake := false ;
69388: LD_ADDR_EXP 106
69392: PUSH
69393: LD_INT 0
69395: ST_TO_ADDR
// sAI := false ;
69396: LD_ADDR_EXP 107
69400: PUSH
69401: LD_INT 0
69403: ST_TO_ADDR
// sCargo := false ;
69404: LD_ADDR_EXP 110
69408: PUSH
69409: LD_INT 0
69411: ST_TO_ADDR
// sDLaser := false ;
69412: LD_ADDR_EXP 111
69416: PUSH
69417: LD_INT 0
69419: ST_TO_ADDR
// sExchange := false ;
69420: LD_ADDR_EXP 112
69424: PUSH
69425: LD_INT 0
69427: ST_TO_ADDR
// sFac := false ;
69428: LD_ADDR_EXP 113
69432: PUSH
69433: LD_INT 0
69435: ST_TO_ADDR
// sPower := false ;
69436: LD_ADDR_EXP 114
69440: PUSH
69441: LD_INT 0
69443: ST_TO_ADDR
// sRandom := false ;
69444: LD_ADDR_EXP 115
69448: PUSH
69449: LD_INT 0
69451: ST_TO_ADDR
// sShield := false ;
69452: LD_ADDR_EXP 116
69456: PUSH
69457: LD_INT 0
69459: ST_TO_ADDR
// sTime := false ;
69460: LD_ADDR_EXP 117
69464: PUSH
69465: LD_INT 0
69467: ST_TO_ADDR
// sTools := false ;
69468: LD_ADDR_EXP 118
69472: PUSH
69473: LD_INT 0
69475: ST_TO_ADDR
// sSold := false ;
69476: LD_ADDR_EXP 83
69480: PUSH
69481: LD_INT 0
69483: ST_TO_ADDR
// sDiff := false ;
69484: LD_ADDR_EXP 84
69488: PUSH
69489: LD_INT 0
69491: ST_TO_ADDR
// sFog := false ;
69492: LD_ADDR_EXP 87
69496: PUSH
69497: LD_INT 0
69499: ST_TO_ADDR
// sReset := false ;
69500: LD_ADDR_EXP 88
69504: PUSH
69505: LD_INT 0
69507: ST_TO_ADDR
// sSun := false ;
69508: LD_ADDR_EXP 89
69512: PUSH
69513: LD_INT 0
69515: ST_TO_ADDR
// sTiger := false ;
69516: LD_ADDR_EXP 85
69520: PUSH
69521: LD_INT 0
69523: ST_TO_ADDR
// sBomb := false ;
69524: LD_ADDR_EXP 86
69528: PUSH
69529: LD_INT 0
69531: ST_TO_ADDR
// sWound := false ;
69532: LD_ADDR_EXP 94
69536: PUSH
69537: LD_INT 0
69539: ST_TO_ADDR
// sBetray := false ;
69540: LD_ADDR_EXP 98
69544: PUSH
69545: LD_INT 0
69547: ST_TO_ADDR
// sContamin := false ;
69548: LD_ADDR_EXP 99
69552: PUSH
69553: LD_INT 0
69555: ST_TO_ADDR
// sOil := false ;
69556: LD_ADDR_EXP 101
69560: PUSH
69561: LD_INT 0
69563: ST_TO_ADDR
// sStu := false ;
69564: LD_ADDR_EXP 105
69568: PUSH
69569: LD_INT 0
69571: ST_TO_ADDR
// sBazooka := false ;
69572: LD_ADDR_EXP 108
69576: PUSH
69577: LD_INT 0
69579: ST_TO_ADDR
// sMortar := false ;
69580: LD_ADDR_EXP 109
69584: PUSH
69585: LD_INT 0
69587: ST_TO_ADDR
// sRanger := false ;
69588: LD_ADDR_EXP 119
69592: PUSH
69593: LD_INT 0
69595: ST_TO_ADDR
// sComputer := false ;
69596: LD_ADDR_EXP 120
69600: PUSH
69601: LD_INT 0
69603: ST_TO_ADDR
// s30 := false ;
69604: LD_ADDR_EXP 121
69608: PUSH
69609: LD_INT 0
69611: ST_TO_ADDR
// s60 := false ;
69612: LD_ADDR_EXP 122
69616: PUSH
69617: LD_INT 0
69619: ST_TO_ADDR
// end ;
69620: LD_VAR 0 1
69624: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
69625: LD_INT 0
69627: PPUSH
69628: PPUSH
69629: PPUSH
69630: PPUSH
69631: PPUSH
69632: PPUSH
69633: PPUSH
// result := [ ] ;
69634: LD_ADDR_VAR 0 2
69638: PUSH
69639: EMPTY
69640: ST_TO_ADDR
// if campaign_id = 1 then
69641: LD_OWVAR 69
69645: PUSH
69646: LD_INT 1
69648: EQUAL
69649: IFFALSE 72815
// begin case mission_number of 1 :
69651: LD_OWVAR 70
69655: PUSH
69656: LD_INT 1
69658: DOUBLE
69659: EQUAL
69660: IFTRUE 69664
69662: GO 69740
69664: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
69665: LD_ADDR_VAR 0 2
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: LD_INT 4
69675: PUSH
69676: LD_INT 11
69678: PUSH
69679: LD_INT 12
69681: PUSH
69682: LD_INT 15
69684: PUSH
69685: LD_INT 16
69687: PUSH
69688: LD_INT 22
69690: PUSH
69691: LD_INT 23
69693: PUSH
69694: LD_INT 26
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 101
69710: PUSH
69711: LD_INT 102
69713: PUSH
69714: LD_INT 106
69716: PUSH
69717: LD_INT 116
69719: PUSH
69720: LD_INT 117
69722: PUSH
69723: LD_INT 118
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: ST_TO_ADDR
69738: GO 72813
69740: LD_INT 2
69742: DOUBLE
69743: EQUAL
69744: IFTRUE 69748
69746: GO 69832
69748: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
69749: LD_ADDR_VAR 0 2
69753: PUSH
69754: LD_INT 2
69756: PUSH
69757: LD_INT 4
69759: PUSH
69760: LD_INT 11
69762: PUSH
69763: LD_INT 12
69765: PUSH
69766: LD_INT 15
69768: PUSH
69769: LD_INT 16
69771: PUSH
69772: LD_INT 22
69774: PUSH
69775: LD_INT 23
69777: PUSH
69778: LD_INT 26
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 101
69794: PUSH
69795: LD_INT 102
69797: PUSH
69798: LD_INT 105
69800: PUSH
69801: LD_INT 106
69803: PUSH
69804: LD_INT 108
69806: PUSH
69807: LD_INT 116
69809: PUSH
69810: LD_INT 117
69812: PUSH
69813: LD_INT 118
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: ST_TO_ADDR
69830: GO 72813
69832: LD_INT 3
69834: DOUBLE
69835: EQUAL
69836: IFTRUE 69840
69838: GO 69928
69840: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
69841: LD_ADDR_VAR 0 2
69845: PUSH
69846: LD_INT 2
69848: PUSH
69849: LD_INT 4
69851: PUSH
69852: LD_INT 5
69854: PUSH
69855: LD_INT 11
69857: PUSH
69858: LD_INT 12
69860: PUSH
69861: LD_INT 15
69863: PUSH
69864: LD_INT 16
69866: PUSH
69867: LD_INT 22
69869: PUSH
69870: LD_INT 26
69872: PUSH
69873: LD_INT 36
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 101
69890: PUSH
69891: LD_INT 102
69893: PUSH
69894: LD_INT 105
69896: PUSH
69897: LD_INT 106
69899: PUSH
69900: LD_INT 108
69902: PUSH
69903: LD_INT 116
69905: PUSH
69906: LD_INT 117
69908: PUSH
69909: LD_INT 118
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: ST_TO_ADDR
69926: GO 72813
69928: LD_INT 4
69930: DOUBLE
69931: EQUAL
69932: IFTRUE 69936
69934: GO 70032
69936: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
69937: LD_ADDR_VAR 0 2
69941: PUSH
69942: LD_INT 2
69944: PUSH
69945: LD_INT 4
69947: PUSH
69948: LD_INT 5
69950: PUSH
69951: LD_INT 8
69953: PUSH
69954: LD_INT 11
69956: PUSH
69957: LD_INT 12
69959: PUSH
69960: LD_INT 15
69962: PUSH
69963: LD_INT 16
69965: PUSH
69966: LD_INT 22
69968: PUSH
69969: LD_INT 23
69971: PUSH
69972: LD_INT 26
69974: PUSH
69975: LD_INT 36
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 101
69994: PUSH
69995: LD_INT 102
69997: PUSH
69998: LD_INT 105
70000: PUSH
70001: LD_INT 106
70003: PUSH
70004: LD_INT 108
70006: PUSH
70007: LD_INT 116
70009: PUSH
70010: LD_INT 117
70012: PUSH
70013: LD_INT 118
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: ST_TO_ADDR
70030: GO 72813
70032: LD_INT 5
70034: DOUBLE
70035: EQUAL
70036: IFTRUE 70040
70038: GO 70152
70040: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
70041: LD_ADDR_VAR 0 2
70045: PUSH
70046: LD_INT 2
70048: PUSH
70049: LD_INT 4
70051: PUSH
70052: LD_INT 5
70054: PUSH
70055: LD_INT 6
70057: PUSH
70058: LD_INT 8
70060: PUSH
70061: LD_INT 11
70063: PUSH
70064: LD_INT 12
70066: PUSH
70067: LD_INT 15
70069: PUSH
70070: LD_INT 16
70072: PUSH
70073: LD_INT 22
70075: PUSH
70076: LD_INT 23
70078: PUSH
70079: LD_INT 25
70081: PUSH
70082: LD_INT 26
70084: PUSH
70085: LD_INT 36
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 101
70106: PUSH
70107: LD_INT 102
70109: PUSH
70110: LD_INT 105
70112: PUSH
70113: LD_INT 106
70115: PUSH
70116: LD_INT 108
70118: PUSH
70119: LD_INT 109
70121: PUSH
70122: LD_INT 112
70124: PUSH
70125: LD_INT 116
70127: PUSH
70128: LD_INT 117
70130: PUSH
70131: LD_INT 118
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: ST_TO_ADDR
70150: GO 72813
70152: LD_INT 6
70154: DOUBLE
70155: EQUAL
70156: IFTRUE 70160
70158: GO 70292
70160: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
70161: LD_ADDR_VAR 0 2
70165: PUSH
70166: LD_INT 2
70168: PUSH
70169: LD_INT 4
70171: PUSH
70172: LD_INT 5
70174: PUSH
70175: LD_INT 6
70177: PUSH
70178: LD_INT 8
70180: PUSH
70181: LD_INT 11
70183: PUSH
70184: LD_INT 12
70186: PUSH
70187: LD_INT 15
70189: PUSH
70190: LD_INT 16
70192: PUSH
70193: LD_INT 20
70195: PUSH
70196: LD_INT 21
70198: PUSH
70199: LD_INT 22
70201: PUSH
70202: LD_INT 23
70204: PUSH
70205: LD_INT 25
70207: PUSH
70208: LD_INT 26
70210: PUSH
70211: LD_INT 30
70213: PUSH
70214: LD_INT 31
70216: PUSH
70217: LD_INT 32
70219: PUSH
70220: LD_INT 36
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 101
70246: PUSH
70247: LD_INT 102
70249: PUSH
70250: LD_INT 105
70252: PUSH
70253: LD_INT 106
70255: PUSH
70256: LD_INT 108
70258: PUSH
70259: LD_INT 109
70261: PUSH
70262: LD_INT 112
70264: PUSH
70265: LD_INT 116
70267: PUSH
70268: LD_INT 117
70270: PUSH
70271: LD_INT 118
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: ST_TO_ADDR
70290: GO 72813
70292: LD_INT 7
70294: DOUBLE
70295: EQUAL
70296: IFTRUE 70300
70298: GO 70412
70300: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
70301: LD_ADDR_VAR 0 2
70305: PUSH
70306: LD_INT 2
70308: PUSH
70309: LD_INT 4
70311: PUSH
70312: LD_INT 5
70314: PUSH
70315: LD_INT 7
70317: PUSH
70318: LD_INT 11
70320: PUSH
70321: LD_INT 12
70323: PUSH
70324: LD_INT 15
70326: PUSH
70327: LD_INT 16
70329: PUSH
70330: LD_INT 20
70332: PUSH
70333: LD_INT 21
70335: PUSH
70336: LD_INT 22
70338: PUSH
70339: LD_INT 23
70341: PUSH
70342: LD_INT 25
70344: PUSH
70345: LD_INT 26
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 101
70366: PUSH
70367: LD_INT 102
70369: PUSH
70370: LD_INT 103
70372: PUSH
70373: LD_INT 105
70375: PUSH
70376: LD_INT 106
70378: PUSH
70379: LD_INT 108
70381: PUSH
70382: LD_INT 112
70384: PUSH
70385: LD_INT 116
70387: PUSH
70388: LD_INT 117
70390: PUSH
70391: LD_INT 118
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: ST_TO_ADDR
70410: GO 72813
70412: LD_INT 8
70414: DOUBLE
70415: EQUAL
70416: IFTRUE 70420
70418: GO 70560
70420: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
70421: LD_ADDR_VAR 0 2
70425: PUSH
70426: LD_INT 2
70428: PUSH
70429: LD_INT 4
70431: PUSH
70432: LD_INT 5
70434: PUSH
70435: LD_INT 6
70437: PUSH
70438: LD_INT 7
70440: PUSH
70441: LD_INT 8
70443: PUSH
70444: LD_INT 11
70446: PUSH
70447: LD_INT 12
70449: PUSH
70450: LD_INT 15
70452: PUSH
70453: LD_INT 16
70455: PUSH
70456: LD_INT 20
70458: PUSH
70459: LD_INT 21
70461: PUSH
70462: LD_INT 22
70464: PUSH
70465: LD_INT 23
70467: PUSH
70468: LD_INT 25
70470: PUSH
70471: LD_INT 26
70473: PUSH
70474: LD_INT 30
70476: PUSH
70477: LD_INT 31
70479: PUSH
70480: LD_INT 32
70482: PUSH
70483: LD_INT 36
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 101
70510: PUSH
70511: LD_INT 102
70513: PUSH
70514: LD_INT 103
70516: PUSH
70517: LD_INT 105
70519: PUSH
70520: LD_INT 106
70522: PUSH
70523: LD_INT 108
70525: PUSH
70526: LD_INT 109
70528: PUSH
70529: LD_INT 112
70531: PUSH
70532: LD_INT 116
70534: PUSH
70535: LD_INT 117
70537: PUSH
70538: LD_INT 118
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: ST_TO_ADDR
70558: GO 72813
70560: LD_INT 9
70562: DOUBLE
70563: EQUAL
70564: IFTRUE 70568
70566: GO 70716
70568: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
70569: LD_ADDR_VAR 0 2
70573: PUSH
70574: LD_INT 2
70576: PUSH
70577: LD_INT 4
70579: PUSH
70580: LD_INT 5
70582: PUSH
70583: LD_INT 6
70585: PUSH
70586: LD_INT 7
70588: PUSH
70589: LD_INT 8
70591: PUSH
70592: LD_INT 11
70594: PUSH
70595: LD_INT 12
70597: PUSH
70598: LD_INT 15
70600: PUSH
70601: LD_INT 16
70603: PUSH
70604: LD_INT 20
70606: PUSH
70607: LD_INT 21
70609: PUSH
70610: LD_INT 22
70612: PUSH
70613: LD_INT 23
70615: PUSH
70616: LD_INT 25
70618: PUSH
70619: LD_INT 26
70621: PUSH
70622: LD_INT 28
70624: PUSH
70625: LD_INT 30
70627: PUSH
70628: LD_INT 31
70630: PUSH
70631: LD_INT 32
70633: PUSH
70634: LD_INT 36
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 101
70662: PUSH
70663: LD_INT 102
70665: PUSH
70666: LD_INT 103
70668: PUSH
70669: LD_INT 105
70671: PUSH
70672: LD_INT 106
70674: PUSH
70675: LD_INT 108
70677: PUSH
70678: LD_INT 109
70680: PUSH
70681: LD_INT 112
70683: PUSH
70684: LD_INT 114
70686: PUSH
70687: LD_INT 116
70689: PUSH
70690: LD_INT 117
70692: PUSH
70693: LD_INT 118
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: ST_TO_ADDR
70714: GO 72813
70716: LD_INT 10
70718: DOUBLE
70719: EQUAL
70720: IFTRUE 70724
70722: GO 70920
70724: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
70725: LD_ADDR_VAR 0 2
70729: PUSH
70730: LD_INT 2
70732: PUSH
70733: LD_INT 4
70735: PUSH
70736: LD_INT 5
70738: PUSH
70739: LD_INT 6
70741: PUSH
70742: LD_INT 7
70744: PUSH
70745: LD_INT 8
70747: PUSH
70748: LD_INT 9
70750: PUSH
70751: LD_INT 10
70753: PUSH
70754: LD_INT 11
70756: PUSH
70757: LD_INT 12
70759: PUSH
70760: LD_INT 13
70762: PUSH
70763: LD_INT 14
70765: PUSH
70766: LD_INT 15
70768: PUSH
70769: LD_INT 16
70771: PUSH
70772: LD_INT 17
70774: PUSH
70775: LD_INT 18
70777: PUSH
70778: LD_INT 19
70780: PUSH
70781: LD_INT 20
70783: PUSH
70784: LD_INT 21
70786: PUSH
70787: LD_INT 22
70789: PUSH
70790: LD_INT 23
70792: PUSH
70793: LD_INT 24
70795: PUSH
70796: LD_INT 25
70798: PUSH
70799: LD_INT 26
70801: PUSH
70802: LD_INT 28
70804: PUSH
70805: LD_INT 30
70807: PUSH
70808: LD_INT 31
70810: PUSH
70811: LD_INT 32
70813: PUSH
70814: LD_INT 36
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 101
70850: PUSH
70851: LD_INT 102
70853: PUSH
70854: LD_INT 103
70856: PUSH
70857: LD_INT 104
70859: PUSH
70860: LD_INT 105
70862: PUSH
70863: LD_INT 106
70865: PUSH
70866: LD_INT 107
70868: PUSH
70869: LD_INT 108
70871: PUSH
70872: LD_INT 109
70874: PUSH
70875: LD_INT 110
70877: PUSH
70878: LD_INT 111
70880: PUSH
70881: LD_INT 112
70883: PUSH
70884: LD_INT 114
70886: PUSH
70887: LD_INT 116
70889: PUSH
70890: LD_INT 117
70892: PUSH
70893: LD_INT 118
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: ST_TO_ADDR
70918: GO 72813
70920: LD_INT 11
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70928
70926: GO 71132
70928: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
70929: LD_ADDR_VAR 0 2
70933: PUSH
70934: LD_INT 2
70936: PUSH
70937: LD_INT 3
70939: PUSH
70940: LD_INT 4
70942: PUSH
70943: LD_INT 5
70945: PUSH
70946: LD_INT 6
70948: PUSH
70949: LD_INT 7
70951: PUSH
70952: LD_INT 8
70954: PUSH
70955: LD_INT 9
70957: PUSH
70958: LD_INT 10
70960: PUSH
70961: LD_INT 11
70963: PUSH
70964: LD_INT 12
70966: PUSH
70967: LD_INT 13
70969: PUSH
70970: LD_INT 14
70972: PUSH
70973: LD_INT 15
70975: PUSH
70976: LD_INT 16
70978: PUSH
70979: LD_INT 17
70981: PUSH
70982: LD_INT 18
70984: PUSH
70985: LD_INT 19
70987: PUSH
70988: LD_INT 20
70990: PUSH
70991: LD_INT 21
70993: PUSH
70994: LD_INT 22
70996: PUSH
70997: LD_INT 23
70999: PUSH
71000: LD_INT 24
71002: PUSH
71003: LD_INT 25
71005: PUSH
71006: LD_INT 26
71008: PUSH
71009: LD_INT 28
71011: PUSH
71012: LD_INT 30
71014: PUSH
71015: LD_INT 31
71017: PUSH
71018: LD_INT 32
71020: PUSH
71021: LD_INT 34
71023: PUSH
71024: LD_INT 36
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 101
71062: PUSH
71063: LD_INT 102
71065: PUSH
71066: LD_INT 103
71068: PUSH
71069: LD_INT 104
71071: PUSH
71072: LD_INT 105
71074: PUSH
71075: LD_INT 106
71077: PUSH
71078: LD_INT 107
71080: PUSH
71081: LD_INT 108
71083: PUSH
71084: LD_INT 109
71086: PUSH
71087: LD_INT 110
71089: PUSH
71090: LD_INT 111
71092: PUSH
71093: LD_INT 112
71095: PUSH
71096: LD_INT 114
71098: PUSH
71099: LD_INT 116
71101: PUSH
71102: LD_INT 117
71104: PUSH
71105: LD_INT 118
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: ST_TO_ADDR
71130: GO 72813
71132: LD_INT 12
71134: DOUBLE
71135: EQUAL
71136: IFTRUE 71140
71138: GO 71360
71140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
71141: LD_ADDR_VAR 0 2
71145: PUSH
71146: LD_INT 1
71148: PUSH
71149: LD_INT 2
71151: PUSH
71152: LD_INT 3
71154: PUSH
71155: LD_INT 4
71157: PUSH
71158: LD_INT 5
71160: PUSH
71161: LD_INT 6
71163: PUSH
71164: LD_INT 7
71166: PUSH
71167: LD_INT 8
71169: PUSH
71170: LD_INT 9
71172: PUSH
71173: LD_INT 10
71175: PUSH
71176: LD_INT 11
71178: PUSH
71179: LD_INT 12
71181: PUSH
71182: LD_INT 13
71184: PUSH
71185: LD_INT 14
71187: PUSH
71188: LD_INT 15
71190: PUSH
71191: LD_INT 16
71193: PUSH
71194: LD_INT 17
71196: PUSH
71197: LD_INT 18
71199: PUSH
71200: LD_INT 19
71202: PUSH
71203: LD_INT 20
71205: PUSH
71206: LD_INT 21
71208: PUSH
71209: LD_INT 22
71211: PUSH
71212: LD_INT 23
71214: PUSH
71215: LD_INT 24
71217: PUSH
71218: LD_INT 25
71220: PUSH
71221: LD_INT 26
71223: PUSH
71224: LD_INT 27
71226: PUSH
71227: LD_INT 28
71229: PUSH
71230: LD_INT 30
71232: PUSH
71233: LD_INT 31
71235: PUSH
71236: LD_INT 32
71238: PUSH
71239: LD_INT 33
71241: PUSH
71242: LD_INT 34
71244: PUSH
71245: LD_INT 36
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 101
71286: PUSH
71287: LD_INT 102
71289: PUSH
71290: LD_INT 103
71292: PUSH
71293: LD_INT 104
71295: PUSH
71296: LD_INT 105
71298: PUSH
71299: LD_INT 106
71301: PUSH
71302: LD_INT 107
71304: PUSH
71305: LD_INT 108
71307: PUSH
71308: LD_INT 109
71310: PUSH
71311: LD_INT 110
71313: PUSH
71314: LD_INT 111
71316: PUSH
71317: LD_INT 112
71319: PUSH
71320: LD_INT 113
71322: PUSH
71323: LD_INT 114
71325: PUSH
71326: LD_INT 116
71328: PUSH
71329: LD_INT 117
71331: PUSH
71332: LD_INT 118
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: ST_TO_ADDR
71358: GO 72813
71360: LD_INT 13
71362: DOUBLE
71363: EQUAL
71364: IFTRUE 71368
71366: GO 71576
71368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
71369: LD_ADDR_VAR 0 2
71373: PUSH
71374: LD_INT 1
71376: PUSH
71377: LD_INT 2
71379: PUSH
71380: LD_INT 3
71382: PUSH
71383: LD_INT 4
71385: PUSH
71386: LD_INT 5
71388: PUSH
71389: LD_INT 8
71391: PUSH
71392: LD_INT 9
71394: PUSH
71395: LD_INT 10
71397: PUSH
71398: LD_INT 11
71400: PUSH
71401: LD_INT 12
71403: PUSH
71404: LD_INT 14
71406: PUSH
71407: LD_INT 15
71409: PUSH
71410: LD_INT 16
71412: PUSH
71413: LD_INT 17
71415: PUSH
71416: LD_INT 18
71418: PUSH
71419: LD_INT 19
71421: PUSH
71422: LD_INT 20
71424: PUSH
71425: LD_INT 21
71427: PUSH
71428: LD_INT 22
71430: PUSH
71431: LD_INT 23
71433: PUSH
71434: LD_INT 24
71436: PUSH
71437: LD_INT 25
71439: PUSH
71440: LD_INT 26
71442: PUSH
71443: LD_INT 27
71445: PUSH
71446: LD_INT 28
71448: PUSH
71449: LD_INT 30
71451: PUSH
71452: LD_INT 31
71454: PUSH
71455: LD_INT 32
71457: PUSH
71458: LD_INT 33
71460: PUSH
71461: LD_INT 34
71463: PUSH
71464: LD_INT 36
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 101
71502: PUSH
71503: LD_INT 102
71505: PUSH
71506: LD_INT 103
71508: PUSH
71509: LD_INT 104
71511: PUSH
71512: LD_INT 105
71514: PUSH
71515: LD_INT 106
71517: PUSH
71518: LD_INT 107
71520: PUSH
71521: LD_INT 108
71523: PUSH
71524: LD_INT 109
71526: PUSH
71527: LD_INT 110
71529: PUSH
71530: LD_INT 111
71532: PUSH
71533: LD_INT 112
71535: PUSH
71536: LD_INT 113
71538: PUSH
71539: LD_INT 114
71541: PUSH
71542: LD_INT 116
71544: PUSH
71545: LD_INT 117
71547: PUSH
71548: LD_INT 118
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: ST_TO_ADDR
71574: GO 72813
71576: LD_INT 14
71578: DOUBLE
71579: EQUAL
71580: IFTRUE 71584
71582: GO 71808
71584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
71585: LD_ADDR_VAR 0 2
71589: PUSH
71590: LD_INT 1
71592: PUSH
71593: LD_INT 2
71595: PUSH
71596: LD_INT 3
71598: PUSH
71599: LD_INT 4
71601: PUSH
71602: LD_INT 5
71604: PUSH
71605: LD_INT 6
71607: PUSH
71608: LD_INT 7
71610: PUSH
71611: LD_INT 8
71613: PUSH
71614: LD_INT 9
71616: PUSH
71617: LD_INT 10
71619: PUSH
71620: LD_INT 11
71622: PUSH
71623: LD_INT 12
71625: PUSH
71626: LD_INT 13
71628: PUSH
71629: LD_INT 14
71631: PUSH
71632: LD_INT 15
71634: PUSH
71635: LD_INT 16
71637: PUSH
71638: LD_INT 17
71640: PUSH
71641: LD_INT 18
71643: PUSH
71644: LD_INT 19
71646: PUSH
71647: LD_INT 20
71649: PUSH
71650: LD_INT 21
71652: PUSH
71653: LD_INT 22
71655: PUSH
71656: LD_INT 23
71658: PUSH
71659: LD_INT 24
71661: PUSH
71662: LD_INT 25
71664: PUSH
71665: LD_INT 26
71667: PUSH
71668: LD_INT 27
71670: PUSH
71671: LD_INT 28
71673: PUSH
71674: LD_INT 29
71676: PUSH
71677: LD_INT 30
71679: PUSH
71680: LD_INT 31
71682: PUSH
71683: LD_INT 32
71685: PUSH
71686: LD_INT 33
71688: PUSH
71689: LD_INT 34
71691: PUSH
71692: LD_INT 36
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 101
71734: PUSH
71735: LD_INT 102
71737: PUSH
71738: LD_INT 103
71740: PUSH
71741: LD_INT 104
71743: PUSH
71744: LD_INT 105
71746: PUSH
71747: LD_INT 106
71749: PUSH
71750: LD_INT 107
71752: PUSH
71753: LD_INT 108
71755: PUSH
71756: LD_INT 109
71758: PUSH
71759: LD_INT 110
71761: PUSH
71762: LD_INT 111
71764: PUSH
71765: LD_INT 112
71767: PUSH
71768: LD_INT 113
71770: PUSH
71771: LD_INT 114
71773: PUSH
71774: LD_INT 116
71776: PUSH
71777: LD_INT 117
71779: PUSH
71780: LD_INT 118
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: ST_TO_ADDR
71806: GO 72813
71808: LD_INT 15
71810: DOUBLE
71811: EQUAL
71812: IFTRUE 71816
71814: GO 72040
71816: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
71817: LD_ADDR_VAR 0 2
71821: PUSH
71822: LD_INT 1
71824: PUSH
71825: LD_INT 2
71827: PUSH
71828: LD_INT 3
71830: PUSH
71831: LD_INT 4
71833: PUSH
71834: LD_INT 5
71836: PUSH
71837: LD_INT 6
71839: PUSH
71840: LD_INT 7
71842: PUSH
71843: LD_INT 8
71845: PUSH
71846: LD_INT 9
71848: PUSH
71849: LD_INT 10
71851: PUSH
71852: LD_INT 11
71854: PUSH
71855: LD_INT 12
71857: PUSH
71858: LD_INT 13
71860: PUSH
71861: LD_INT 14
71863: PUSH
71864: LD_INT 15
71866: PUSH
71867: LD_INT 16
71869: PUSH
71870: LD_INT 17
71872: PUSH
71873: LD_INT 18
71875: PUSH
71876: LD_INT 19
71878: PUSH
71879: LD_INT 20
71881: PUSH
71882: LD_INT 21
71884: PUSH
71885: LD_INT 22
71887: PUSH
71888: LD_INT 23
71890: PUSH
71891: LD_INT 24
71893: PUSH
71894: LD_INT 25
71896: PUSH
71897: LD_INT 26
71899: PUSH
71900: LD_INT 27
71902: PUSH
71903: LD_INT 28
71905: PUSH
71906: LD_INT 29
71908: PUSH
71909: LD_INT 30
71911: PUSH
71912: LD_INT 31
71914: PUSH
71915: LD_INT 32
71917: PUSH
71918: LD_INT 33
71920: PUSH
71921: LD_INT 34
71923: PUSH
71924: LD_INT 36
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 101
71966: PUSH
71967: LD_INT 102
71969: PUSH
71970: LD_INT 103
71972: PUSH
71973: LD_INT 104
71975: PUSH
71976: LD_INT 105
71978: PUSH
71979: LD_INT 106
71981: PUSH
71982: LD_INT 107
71984: PUSH
71985: LD_INT 108
71987: PUSH
71988: LD_INT 109
71990: PUSH
71991: LD_INT 110
71993: PUSH
71994: LD_INT 111
71996: PUSH
71997: LD_INT 112
71999: PUSH
72000: LD_INT 113
72002: PUSH
72003: LD_INT 114
72005: PUSH
72006: LD_INT 116
72008: PUSH
72009: LD_INT 117
72011: PUSH
72012: LD_INT 118
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: ST_TO_ADDR
72038: GO 72813
72040: LD_INT 16
72042: DOUBLE
72043: EQUAL
72044: IFTRUE 72048
72046: GO 72184
72048: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
72049: LD_ADDR_VAR 0 2
72053: PUSH
72054: LD_INT 2
72056: PUSH
72057: LD_INT 4
72059: PUSH
72060: LD_INT 5
72062: PUSH
72063: LD_INT 7
72065: PUSH
72066: LD_INT 11
72068: PUSH
72069: LD_INT 12
72071: PUSH
72072: LD_INT 15
72074: PUSH
72075: LD_INT 16
72077: PUSH
72078: LD_INT 20
72080: PUSH
72081: LD_INT 21
72083: PUSH
72084: LD_INT 22
72086: PUSH
72087: LD_INT 23
72089: PUSH
72090: LD_INT 25
72092: PUSH
72093: LD_INT 26
72095: PUSH
72096: LD_INT 30
72098: PUSH
72099: LD_INT 31
72101: PUSH
72102: LD_INT 32
72104: PUSH
72105: LD_INT 33
72107: PUSH
72108: LD_INT 34
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 101
72134: PUSH
72135: LD_INT 102
72137: PUSH
72138: LD_INT 103
72140: PUSH
72141: LD_INT 106
72143: PUSH
72144: LD_INT 108
72146: PUSH
72147: LD_INT 112
72149: PUSH
72150: LD_INT 113
72152: PUSH
72153: LD_INT 114
72155: PUSH
72156: LD_INT 116
72158: PUSH
72159: LD_INT 117
72161: PUSH
72162: LD_INT 118
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: ST_TO_ADDR
72182: GO 72813
72184: LD_INT 17
72186: DOUBLE
72187: EQUAL
72188: IFTRUE 72192
72190: GO 72416
72192: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
72193: LD_ADDR_VAR 0 2
72197: PUSH
72198: LD_INT 1
72200: PUSH
72201: LD_INT 2
72203: PUSH
72204: LD_INT 3
72206: PUSH
72207: LD_INT 4
72209: PUSH
72210: LD_INT 5
72212: PUSH
72213: LD_INT 6
72215: PUSH
72216: LD_INT 7
72218: PUSH
72219: LD_INT 8
72221: PUSH
72222: LD_INT 9
72224: PUSH
72225: LD_INT 10
72227: PUSH
72228: LD_INT 11
72230: PUSH
72231: LD_INT 12
72233: PUSH
72234: LD_INT 13
72236: PUSH
72237: LD_INT 14
72239: PUSH
72240: LD_INT 15
72242: PUSH
72243: LD_INT 16
72245: PUSH
72246: LD_INT 17
72248: PUSH
72249: LD_INT 18
72251: PUSH
72252: LD_INT 19
72254: PUSH
72255: LD_INT 20
72257: PUSH
72258: LD_INT 21
72260: PUSH
72261: LD_INT 22
72263: PUSH
72264: LD_INT 23
72266: PUSH
72267: LD_INT 24
72269: PUSH
72270: LD_INT 25
72272: PUSH
72273: LD_INT 26
72275: PUSH
72276: LD_INT 27
72278: PUSH
72279: LD_INT 28
72281: PUSH
72282: LD_INT 29
72284: PUSH
72285: LD_INT 30
72287: PUSH
72288: LD_INT 31
72290: PUSH
72291: LD_INT 32
72293: PUSH
72294: LD_INT 33
72296: PUSH
72297: LD_INT 34
72299: PUSH
72300: LD_INT 36
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: PUSH
72340: LD_INT 101
72342: PUSH
72343: LD_INT 102
72345: PUSH
72346: LD_INT 103
72348: PUSH
72349: LD_INT 104
72351: PUSH
72352: LD_INT 105
72354: PUSH
72355: LD_INT 106
72357: PUSH
72358: LD_INT 107
72360: PUSH
72361: LD_INT 108
72363: PUSH
72364: LD_INT 109
72366: PUSH
72367: LD_INT 110
72369: PUSH
72370: LD_INT 111
72372: PUSH
72373: LD_INT 112
72375: PUSH
72376: LD_INT 113
72378: PUSH
72379: LD_INT 114
72381: PUSH
72382: LD_INT 116
72384: PUSH
72385: LD_INT 117
72387: PUSH
72388: LD_INT 118
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: ST_TO_ADDR
72414: GO 72813
72416: LD_INT 18
72418: DOUBLE
72419: EQUAL
72420: IFTRUE 72424
72422: GO 72572
72424: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
72425: LD_ADDR_VAR 0 2
72429: PUSH
72430: LD_INT 2
72432: PUSH
72433: LD_INT 4
72435: PUSH
72436: LD_INT 5
72438: PUSH
72439: LD_INT 7
72441: PUSH
72442: LD_INT 11
72444: PUSH
72445: LD_INT 12
72447: PUSH
72448: LD_INT 15
72450: PUSH
72451: LD_INT 16
72453: PUSH
72454: LD_INT 20
72456: PUSH
72457: LD_INT 21
72459: PUSH
72460: LD_INT 22
72462: PUSH
72463: LD_INT 23
72465: PUSH
72466: LD_INT 25
72468: PUSH
72469: LD_INT 26
72471: PUSH
72472: LD_INT 30
72474: PUSH
72475: LD_INT 31
72477: PUSH
72478: LD_INT 32
72480: PUSH
72481: LD_INT 33
72483: PUSH
72484: LD_INT 34
72486: PUSH
72487: LD_INT 35
72489: PUSH
72490: LD_INT 36
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 101
72518: PUSH
72519: LD_INT 102
72521: PUSH
72522: LD_INT 103
72524: PUSH
72525: LD_INT 106
72527: PUSH
72528: LD_INT 108
72530: PUSH
72531: LD_INT 112
72533: PUSH
72534: LD_INT 113
72536: PUSH
72537: LD_INT 114
72539: PUSH
72540: LD_INT 115
72542: PUSH
72543: LD_INT 116
72545: PUSH
72546: LD_INT 117
72548: PUSH
72549: LD_INT 118
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: ST_TO_ADDR
72570: GO 72813
72572: LD_INT 19
72574: DOUBLE
72575: EQUAL
72576: IFTRUE 72580
72578: GO 72812
72580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
72581: LD_ADDR_VAR 0 2
72585: PUSH
72586: LD_INT 1
72588: PUSH
72589: LD_INT 2
72591: PUSH
72592: LD_INT 3
72594: PUSH
72595: LD_INT 4
72597: PUSH
72598: LD_INT 5
72600: PUSH
72601: LD_INT 6
72603: PUSH
72604: LD_INT 7
72606: PUSH
72607: LD_INT 8
72609: PUSH
72610: LD_INT 9
72612: PUSH
72613: LD_INT 10
72615: PUSH
72616: LD_INT 11
72618: PUSH
72619: LD_INT 12
72621: PUSH
72622: LD_INT 13
72624: PUSH
72625: LD_INT 14
72627: PUSH
72628: LD_INT 15
72630: PUSH
72631: LD_INT 16
72633: PUSH
72634: LD_INT 17
72636: PUSH
72637: LD_INT 18
72639: PUSH
72640: LD_INT 19
72642: PUSH
72643: LD_INT 20
72645: PUSH
72646: LD_INT 21
72648: PUSH
72649: LD_INT 22
72651: PUSH
72652: LD_INT 23
72654: PUSH
72655: LD_INT 24
72657: PUSH
72658: LD_INT 25
72660: PUSH
72661: LD_INT 26
72663: PUSH
72664: LD_INT 27
72666: PUSH
72667: LD_INT 28
72669: PUSH
72670: LD_INT 29
72672: PUSH
72673: LD_INT 30
72675: PUSH
72676: LD_INT 31
72678: PUSH
72679: LD_INT 32
72681: PUSH
72682: LD_INT 33
72684: PUSH
72685: LD_INT 34
72687: PUSH
72688: LD_INT 35
72690: PUSH
72691: LD_INT 36
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 101
72734: PUSH
72735: LD_INT 102
72737: PUSH
72738: LD_INT 103
72740: PUSH
72741: LD_INT 104
72743: PUSH
72744: LD_INT 105
72746: PUSH
72747: LD_INT 106
72749: PUSH
72750: LD_INT 107
72752: PUSH
72753: LD_INT 108
72755: PUSH
72756: LD_INT 109
72758: PUSH
72759: LD_INT 110
72761: PUSH
72762: LD_INT 111
72764: PUSH
72765: LD_INT 112
72767: PUSH
72768: LD_INT 113
72770: PUSH
72771: LD_INT 114
72773: PUSH
72774: LD_INT 115
72776: PUSH
72777: LD_INT 116
72779: PUSH
72780: LD_INT 117
72782: PUSH
72783: LD_INT 118
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: ST_TO_ADDR
72810: GO 72813
72812: POP
// end else
72813: GO 73044
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
72815: LD_ADDR_VAR 0 2
72819: PUSH
72820: LD_INT 1
72822: PUSH
72823: LD_INT 2
72825: PUSH
72826: LD_INT 3
72828: PUSH
72829: LD_INT 4
72831: PUSH
72832: LD_INT 5
72834: PUSH
72835: LD_INT 6
72837: PUSH
72838: LD_INT 7
72840: PUSH
72841: LD_INT 8
72843: PUSH
72844: LD_INT 9
72846: PUSH
72847: LD_INT 10
72849: PUSH
72850: LD_INT 11
72852: PUSH
72853: LD_INT 12
72855: PUSH
72856: LD_INT 13
72858: PUSH
72859: LD_INT 14
72861: PUSH
72862: LD_INT 15
72864: PUSH
72865: LD_INT 16
72867: PUSH
72868: LD_INT 17
72870: PUSH
72871: LD_INT 18
72873: PUSH
72874: LD_INT 19
72876: PUSH
72877: LD_INT 20
72879: PUSH
72880: LD_INT 21
72882: PUSH
72883: LD_INT 22
72885: PUSH
72886: LD_INT 23
72888: PUSH
72889: LD_INT 24
72891: PUSH
72892: LD_INT 25
72894: PUSH
72895: LD_INT 26
72897: PUSH
72898: LD_INT 27
72900: PUSH
72901: LD_INT 28
72903: PUSH
72904: LD_INT 29
72906: PUSH
72907: LD_INT 30
72909: PUSH
72910: LD_INT 31
72912: PUSH
72913: LD_INT 32
72915: PUSH
72916: LD_INT 33
72918: PUSH
72919: LD_INT 34
72921: PUSH
72922: LD_INT 35
72924: PUSH
72925: LD_INT 36
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: LIST
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 101
72968: PUSH
72969: LD_INT 102
72971: PUSH
72972: LD_INT 103
72974: PUSH
72975: LD_INT 104
72977: PUSH
72978: LD_INT 105
72980: PUSH
72981: LD_INT 106
72983: PUSH
72984: LD_INT 107
72986: PUSH
72987: LD_INT 108
72989: PUSH
72990: LD_INT 109
72992: PUSH
72993: LD_INT 110
72995: PUSH
72996: LD_INT 111
72998: PUSH
72999: LD_INT 112
73001: PUSH
73002: LD_INT 113
73004: PUSH
73005: LD_INT 114
73007: PUSH
73008: LD_INT 115
73010: PUSH
73011: LD_INT 116
73013: PUSH
73014: LD_INT 117
73016: PUSH
73017: LD_INT 118
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: ST_TO_ADDR
// if result then
73044: LD_VAR 0 2
73048: IFFALSE 73834
// begin normal :=  ;
73050: LD_ADDR_VAR 0 5
73054: PUSH
73055: LD_STRING 
73057: ST_TO_ADDR
// hardcore :=  ;
73058: LD_ADDR_VAR 0 6
73062: PUSH
73063: LD_STRING 
73065: ST_TO_ADDR
// active :=  ;
73066: LD_ADDR_VAR 0 7
73070: PUSH
73071: LD_STRING 
73073: ST_TO_ADDR
// for i = 1 to normalCounter do
73074: LD_ADDR_VAR 0 8
73078: PUSH
73079: DOUBLE
73080: LD_INT 1
73082: DEC
73083: ST_TO_ADDR
73084: LD_EXP 67
73088: PUSH
73089: FOR_TO
73090: IFFALSE 73191
// begin tmp := 0 ;
73092: LD_ADDR_VAR 0 3
73096: PUSH
73097: LD_STRING 0
73099: ST_TO_ADDR
// if result [ 1 ] then
73100: LD_VAR 0 2
73104: PUSH
73105: LD_INT 1
73107: ARRAY
73108: IFFALSE 73173
// if result [ 1 ] [ 1 ] = i then
73110: LD_VAR 0 2
73114: PUSH
73115: LD_INT 1
73117: ARRAY
73118: PUSH
73119: LD_INT 1
73121: ARRAY
73122: PUSH
73123: LD_VAR 0 8
73127: EQUAL
73128: IFFALSE 73173
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73130: LD_ADDR_VAR 0 2
73134: PUSH
73135: LD_VAR 0 2
73139: PPUSH
73140: LD_INT 1
73142: PPUSH
73143: LD_VAR 0 2
73147: PUSH
73148: LD_INT 1
73150: ARRAY
73151: PPUSH
73152: LD_INT 1
73154: PPUSH
73155: CALL_OW 3
73159: PPUSH
73160: CALL_OW 1
73164: ST_TO_ADDR
// tmp := 1 ;
73165: LD_ADDR_VAR 0 3
73169: PUSH
73170: LD_STRING 1
73172: ST_TO_ADDR
// end ; normal := normal & tmp ;
73173: LD_ADDR_VAR 0 5
73177: PUSH
73178: LD_VAR 0 5
73182: PUSH
73183: LD_VAR 0 3
73187: STR
73188: ST_TO_ADDR
// end ;
73189: GO 73089
73191: POP
73192: POP
// for i = 1 to hardcoreCounter do
73193: LD_ADDR_VAR 0 8
73197: PUSH
73198: DOUBLE
73199: LD_INT 1
73201: DEC
73202: ST_TO_ADDR
73203: LD_EXP 68
73207: PUSH
73208: FOR_TO
73209: IFFALSE 73314
// begin tmp := 0 ;
73211: LD_ADDR_VAR 0 3
73215: PUSH
73216: LD_STRING 0
73218: ST_TO_ADDR
// if result [ 2 ] then
73219: LD_VAR 0 2
73223: PUSH
73224: LD_INT 2
73226: ARRAY
73227: IFFALSE 73296
// if result [ 2 ] [ 1 ] = 100 + i then
73229: LD_VAR 0 2
73233: PUSH
73234: LD_INT 2
73236: ARRAY
73237: PUSH
73238: LD_INT 1
73240: ARRAY
73241: PUSH
73242: LD_INT 100
73244: PUSH
73245: LD_VAR 0 8
73249: PLUS
73250: EQUAL
73251: IFFALSE 73296
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
73253: LD_ADDR_VAR 0 2
73257: PUSH
73258: LD_VAR 0 2
73262: PPUSH
73263: LD_INT 2
73265: PPUSH
73266: LD_VAR 0 2
73270: PUSH
73271: LD_INT 2
73273: ARRAY
73274: PPUSH
73275: LD_INT 1
73277: PPUSH
73278: CALL_OW 3
73282: PPUSH
73283: CALL_OW 1
73287: ST_TO_ADDR
// tmp := 1 ;
73288: LD_ADDR_VAR 0 3
73292: PUSH
73293: LD_STRING 1
73295: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73296: LD_ADDR_VAR 0 6
73300: PUSH
73301: LD_VAR 0 6
73305: PUSH
73306: LD_VAR 0 3
73310: STR
73311: ST_TO_ADDR
// end ;
73312: GO 73208
73314: POP
73315: POP
// if isGameLoad then
73316: LD_VAR 0 1
73320: IFFALSE 73795
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
73322: LD_ADDR_VAR 0 4
73326: PUSH
73327: LD_EXP 71
73331: PUSH
73332: LD_EXP 70
73336: PUSH
73337: LD_EXP 72
73341: PUSH
73342: LD_EXP 69
73346: PUSH
73347: LD_EXP 73
73351: PUSH
73352: LD_EXP 74
73356: PUSH
73357: LD_EXP 75
73361: PUSH
73362: LD_EXP 76
73366: PUSH
73367: LD_EXP 77
73371: PUSH
73372: LD_EXP 78
73376: PUSH
73377: LD_EXP 79
73381: PUSH
73382: LD_EXP 80
73386: PUSH
73387: LD_EXP 81
73391: PUSH
73392: LD_EXP 82
73396: PUSH
73397: LD_EXP 90
73401: PUSH
73402: LD_EXP 91
73406: PUSH
73407: LD_EXP 92
73411: PUSH
73412: LD_EXP 93
73416: PUSH
73417: LD_EXP 95
73421: PUSH
73422: LD_EXP 96
73426: PUSH
73427: LD_EXP 97
73431: PUSH
73432: LD_EXP 100
73436: PUSH
73437: LD_EXP 102
73441: PUSH
73442: LD_EXP 103
73446: PUSH
73447: LD_EXP 104
73451: PUSH
73452: LD_EXP 106
73456: PUSH
73457: LD_EXP 107
73461: PUSH
73462: LD_EXP 110
73466: PUSH
73467: LD_EXP 111
73471: PUSH
73472: LD_EXP 112
73476: PUSH
73477: LD_EXP 113
73481: PUSH
73482: LD_EXP 114
73486: PUSH
73487: LD_EXP 115
73491: PUSH
73492: LD_EXP 116
73496: PUSH
73497: LD_EXP 117
73501: PUSH
73502: LD_EXP 118
73506: PUSH
73507: LD_EXP 83
73511: PUSH
73512: LD_EXP 84
73516: PUSH
73517: LD_EXP 87
73521: PUSH
73522: LD_EXP 88
73526: PUSH
73527: LD_EXP 89
73531: PUSH
73532: LD_EXP 85
73536: PUSH
73537: LD_EXP 86
73541: PUSH
73542: LD_EXP 94
73546: PUSH
73547: LD_EXP 98
73551: PUSH
73552: LD_EXP 99
73556: PUSH
73557: LD_EXP 101
73561: PUSH
73562: LD_EXP 105
73566: PUSH
73567: LD_EXP 108
73571: PUSH
73572: LD_EXP 109
73576: PUSH
73577: LD_EXP 119
73581: PUSH
73582: LD_EXP 120
73586: PUSH
73587: LD_EXP 121
73591: PUSH
73592: LD_EXP 122
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: ST_TO_ADDR
// tmp :=  ;
73653: LD_ADDR_VAR 0 3
73657: PUSH
73658: LD_STRING 
73660: ST_TO_ADDR
// for i = 1 to normalCounter do
73661: LD_ADDR_VAR 0 8
73665: PUSH
73666: DOUBLE
73667: LD_INT 1
73669: DEC
73670: ST_TO_ADDR
73671: LD_EXP 67
73675: PUSH
73676: FOR_TO
73677: IFFALSE 73713
// begin if flags [ i ] then
73679: LD_VAR 0 4
73683: PUSH
73684: LD_VAR 0 8
73688: ARRAY
73689: IFFALSE 73711
// tmp := tmp & i & ; ;
73691: LD_ADDR_VAR 0 3
73695: PUSH
73696: LD_VAR 0 3
73700: PUSH
73701: LD_VAR 0 8
73705: STR
73706: PUSH
73707: LD_STRING ;
73709: STR
73710: ST_TO_ADDR
// end ;
73711: GO 73676
73713: POP
73714: POP
// for i = 1 to hardcoreCounter do
73715: LD_ADDR_VAR 0 8
73719: PUSH
73720: DOUBLE
73721: LD_INT 1
73723: DEC
73724: ST_TO_ADDR
73725: LD_EXP 68
73729: PUSH
73730: FOR_TO
73731: IFFALSE 73777
// begin if flags [ normalCounter + i ] then
73733: LD_VAR 0 4
73737: PUSH
73738: LD_EXP 67
73742: PUSH
73743: LD_VAR 0 8
73747: PLUS
73748: ARRAY
73749: IFFALSE 73775
// tmp := tmp & ( 100 + i ) & ; ;
73751: LD_ADDR_VAR 0 3
73755: PUSH
73756: LD_VAR 0 3
73760: PUSH
73761: LD_INT 100
73763: PUSH
73764: LD_VAR 0 8
73768: PLUS
73769: STR
73770: PUSH
73771: LD_STRING ;
73773: STR
73774: ST_TO_ADDR
// end ;
73775: GO 73730
73777: POP
73778: POP
// if tmp then
73779: LD_VAR 0 3
73783: IFFALSE 73795
// active := tmp ;
73785: LD_ADDR_VAR 0 7
73789: PUSH
73790: LD_VAR 0 3
73794: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
73795: LD_STRING getStreamItemsFromMission("
73797: PUSH
73798: LD_VAR 0 5
73802: STR
73803: PUSH
73804: LD_STRING ","
73806: STR
73807: PUSH
73808: LD_VAR 0 6
73812: STR
73813: PUSH
73814: LD_STRING ","
73816: STR
73817: PUSH
73818: LD_VAR 0 7
73822: STR
73823: PUSH
73824: LD_STRING ")
73826: STR
73827: PPUSH
73828: CALL_OW 559
// end else
73832: GO 73841
// ToLua ( getStreamItemsFromMission("","","") ) ;
73834: LD_STRING getStreamItemsFromMission("","","")
73836: PPUSH
73837: CALL_OW 559
// end ;
73841: LD_VAR 0 2
73845: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
73846: LD_EXP 66
73850: PUSH
73851: LD_EXP 71
73855: AND
73856: IFFALSE 73980
73858: GO 73860
73860: DISABLE
73861: LD_INT 0
73863: PPUSH
73864: PPUSH
// begin enable ;
73865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73866: LD_ADDR_VAR 0 2
73870: PUSH
73871: LD_INT 22
73873: PUSH
73874: LD_OWVAR 2
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PUSH
73883: LD_INT 2
73885: PUSH
73886: LD_INT 34
73888: PUSH
73889: LD_INT 7
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 34
73898: PUSH
73899: LD_INT 45
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PUSH
73906: LD_INT 34
73908: PUSH
73909: LD_INT 28
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: PUSH
73916: LD_INT 34
73918: PUSH
73919: LD_INT 47
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PPUSH
73937: CALL_OW 69
73941: ST_TO_ADDR
// if not tmp then
73942: LD_VAR 0 2
73946: NOT
73947: IFFALSE 73951
// exit ;
73949: GO 73980
// for i in tmp do
73951: LD_ADDR_VAR 0 1
73955: PUSH
73956: LD_VAR 0 2
73960: PUSH
73961: FOR_IN
73962: IFFALSE 73978
// begin SetLives ( i , 0 ) ;
73964: LD_VAR 0 1
73968: PPUSH
73969: LD_INT 0
73971: PPUSH
73972: CALL_OW 234
// end ;
73976: GO 73961
73978: POP
73979: POP
// end ;
73980: PPOPN 2
73982: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73983: LD_EXP 66
73987: PUSH
73988: LD_EXP 72
73992: AND
73993: IFFALSE 74077
73995: GO 73997
73997: DISABLE
73998: LD_INT 0
74000: PPUSH
74001: PPUSH
// begin enable ;
74002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
74003: LD_ADDR_VAR 0 2
74007: PUSH
74008: LD_INT 22
74010: PUSH
74011: LD_OWVAR 2
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 32
74022: PUSH
74023: LD_INT 3
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PPUSH
74034: CALL_OW 69
74038: ST_TO_ADDR
// if not tmp then
74039: LD_VAR 0 2
74043: NOT
74044: IFFALSE 74048
// exit ;
74046: GO 74077
// for i in tmp do
74048: LD_ADDR_VAR 0 1
74052: PUSH
74053: LD_VAR 0 2
74057: PUSH
74058: FOR_IN
74059: IFFALSE 74075
// begin SetLives ( i , 0 ) ;
74061: LD_VAR 0 1
74065: PPUSH
74066: LD_INT 0
74068: PPUSH
74069: CALL_OW 234
// end ;
74073: GO 74058
74075: POP
74076: POP
// end ;
74077: PPOPN 2
74079: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74080: LD_EXP 66
74084: PUSH
74085: LD_EXP 69
74089: AND
74090: IFFALSE 74183
74092: GO 74094
74094: DISABLE
74095: LD_INT 0
74097: PPUSH
// begin enable ;
74098: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74099: LD_ADDR_VAR 0 1
74103: PUSH
74104: LD_INT 22
74106: PUSH
74107: LD_OWVAR 2
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: LD_INT 2
74118: PUSH
74119: LD_INT 25
74121: PUSH
74122: LD_INT 5
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 25
74131: PUSH
74132: LD_INT 9
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 25
74141: PUSH
74142: LD_INT 8
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PPUSH
74159: CALL_OW 69
74163: PUSH
74164: FOR_IN
74165: IFFALSE 74181
// begin SetClass ( i , 1 ) ;
74167: LD_VAR 0 1
74171: PPUSH
74172: LD_INT 1
74174: PPUSH
74175: CALL_OW 336
// end ;
74179: GO 74164
74181: POP
74182: POP
// end ;
74183: PPOPN 1
74185: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74186: LD_EXP 66
74190: PUSH
74191: LD_EXP 70
74195: AND
74196: PUSH
74197: LD_OWVAR 65
74201: PUSH
74202: LD_INT 7
74204: LESS
74205: AND
74206: IFFALSE 74220
74208: GO 74210
74210: DISABLE
// begin enable ;
74211: ENABLE
// game_speed := 7 ;
74212: LD_ADDR_OWVAR 65
74216: PUSH
74217: LD_INT 7
74219: ST_TO_ADDR
// end ;
74220: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74221: LD_EXP 66
74225: PUSH
74226: LD_EXP 73
74230: AND
74231: IFFALSE 74433
74233: GO 74235
74235: DISABLE
74236: LD_INT 0
74238: PPUSH
74239: PPUSH
74240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74241: LD_ADDR_VAR 0 3
74245: PUSH
74246: LD_INT 81
74248: PUSH
74249: LD_OWVAR 2
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 21
74260: PUSH
74261: LD_INT 1
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: PPUSH
74272: CALL_OW 69
74276: ST_TO_ADDR
// if not tmp then
74277: LD_VAR 0 3
74281: NOT
74282: IFFALSE 74286
// exit ;
74284: GO 74433
// if tmp > 5 then
74286: LD_VAR 0 3
74290: PUSH
74291: LD_INT 5
74293: GREATER
74294: IFFALSE 74306
// k := 5 else
74296: LD_ADDR_VAR 0 2
74300: PUSH
74301: LD_INT 5
74303: ST_TO_ADDR
74304: GO 74316
// k := tmp ;
74306: LD_ADDR_VAR 0 2
74310: PUSH
74311: LD_VAR 0 3
74315: ST_TO_ADDR
// for i := 1 to k do
74316: LD_ADDR_VAR 0 1
74320: PUSH
74321: DOUBLE
74322: LD_INT 1
74324: DEC
74325: ST_TO_ADDR
74326: LD_VAR 0 2
74330: PUSH
74331: FOR_TO
74332: IFFALSE 74431
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74334: LD_VAR 0 3
74338: PUSH
74339: LD_VAR 0 1
74343: ARRAY
74344: PPUSH
74345: LD_VAR 0 1
74349: PUSH
74350: LD_INT 4
74352: MOD
74353: PUSH
74354: LD_INT 1
74356: PLUS
74357: PPUSH
74358: CALL_OW 259
74362: PUSH
74363: LD_INT 10
74365: LESS
74366: IFFALSE 74429
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74368: LD_VAR 0 3
74372: PUSH
74373: LD_VAR 0 1
74377: ARRAY
74378: PPUSH
74379: LD_VAR 0 1
74383: PUSH
74384: LD_INT 4
74386: MOD
74387: PUSH
74388: LD_INT 1
74390: PLUS
74391: PPUSH
74392: LD_VAR 0 3
74396: PUSH
74397: LD_VAR 0 1
74401: ARRAY
74402: PPUSH
74403: LD_VAR 0 1
74407: PUSH
74408: LD_INT 4
74410: MOD
74411: PUSH
74412: LD_INT 1
74414: PLUS
74415: PPUSH
74416: CALL_OW 259
74420: PUSH
74421: LD_INT 1
74423: PLUS
74424: PPUSH
74425: CALL_OW 237
74429: GO 74331
74431: POP
74432: POP
// end ;
74433: PPOPN 3
74435: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
74436: LD_EXP 66
74440: PUSH
74441: LD_EXP 74
74445: AND
74446: IFFALSE 74466
74448: GO 74450
74450: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
74451: LD_INT 4
74453: PPUSH
74454: LD_OWVAR 2
74458: PPUSH
74459: LD_INT 0
74461: PPUSH
74462: CALL_OW 324
74466: END
// every 0 0$1 trigger StreamModeActive and sShovel do
74467: LD_EXP 66
74471: PUSH
74472: LD_EXP 103
74476: AND
74477: IFFALSE 74497
74479: GO 74481
74481: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
74482: LD_INT 19
74484: PPUSH
74485: LD_OWVAR 2
74489: PPUSH
74490: LD_INT 0
74492: PPUSH
74493: CALL_OW 324
74497: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
74498: LD_EXP 66
74502: PUSH
74503: LD_EXP 75
74507: AND
74508: IFFALSE 74610
74510: GO 74512
74512: DISABLE
74513: LD_INT 0
74515: PPUSH
74516: PPUSH
// begin enable ;
74517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
74518: LD_ADDR_VAR 0 2
74522: PUSH
74523: LD_INT 22
74525: PUSH
74526: LD_OWVAR 2
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 2
74537: PUSH
74538: LD_INT 34
74540: PUSH
74541: LD_INT 11
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: LD_INT 34
74550: PUSH
74551: LD_INT 30
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: EMPTY
74559: LIST
74560: LIST
74561: LIST
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PPUSH
74567: CALL_OW 69
74571: ST_TO_ADDR
// if not tmp then
74572: LD_VAR 0 2
74576: NOT
74577: IFFALSE 74581
// exit ;
74579: GO 74610
// for i in tmp do
74581: LD_ADDR_VAR 0 1
74585: PUSH
74586: LD_VAR 0 2
74590: PUSH
74591: FOR_IN
74592: IFFALSE 74608
// begin SetLives ( i , 0 ) ;
74594: LD_VAR 0 1
74598: PPUSH
74599: LD_INT 0
74601: PPUSH
74602: CALL_OW 234
// end ;
74606: GO 74591
74608: POP
74609: POP
// end ;
74610: PPOPN 2
74612: END
// every 0 0$1 trigger StreamModeActive and sBunker do
74613: LD_EXP 66
74617: PUSH
74618: LD_EXP 76
74622: AND
74623: IFFALSE 74643
74625: GO 74627
74627: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
74628: LD_INT 32
74630: PPUSH
74631: LD_OWVAR 2
74635: PPUSH
74636: LD_INT 0
74638: PPUSH
74639: CALL_OW 324
74643: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
74644: LD_EXP 66
74648: PUSH
74649: LD_EXP 77
74653: AND
74654: IFFALSE 74835
74656: GO 74658
74658: DISABLE
74659: LD_INT 0
74661: PPUSH
74662: PPUSH
74663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
74664: LD_ADDR_VAR 0 2
74668: PUSH
74669: LD_INT 22
74671: PUSH
74672: LD_OWVAR 2
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 33
74683: PUSH
74684: LD_INT 3
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PPUSH
74695: CALL_OW 69
74699: ST_TO_ADDR
// if not tmp then
74700: LD_VAR 0 2
74704: NOT
74705: IFFALSE 74709
// exit ;
74707: GO 74835
// side := 0 ;
74709: LD_ADDR_VAR 0 3
74713: PUSH
74714: LD_INT 0
74716: ST_TO_ADDR
// for i := 1 to 8 do
74717: LD_ADDR_VAR 0 1
74721: PUSH
74722: DOUBLE
74723: LD_INT 1
74725: DEC
74726: ST_TO_ADDR
74727: LD_INT 8
74729: PUSH
74730: FOR_TO
74731: IFFALSE 74779
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
74733: LD_OWVAR 2
74737: PUSH
74738: LD_VAR 0 1
74742: NONEQUAL
74743: PUSH
74744: LD_OWVAR 2
74748: PPUSH
74749: LD_VAR 0 1
74753: PPUSH
74754: CALL_OW 81
74758: PUSH
74759: LD_INT 2
74761: EQUAL
74762: AND
74763: IFFALSE 74777
// begin side := i ;
74765: LD_ADDR_VAR 0 3
74769: PUSH
74770: LD_VAR 0 1
74774: ST_TO_ADDR
// break ;
74775: GO 74779
// end ;
74777: GO 74730
74779: POP
74780: POP
// if not side then
74781: LD_VAR 0 3
74785: NOT
74786: IFFALSE 74790
// exit ;
74788: GO 74835
// for i := 1 to tmp do
74790: LD_ADDR_VAR 0 1
74794: PUSH
74795: DOUBLE
74796: LD_INT 1
74798: DEC
74799: ST_TO_ADDR
74800: LD_VAR 0 2
74804: PUSH
74805: FOR_TO
74806: IFFALSE 74833
// if Prob ( 60 ) then
74808: LD_INT 60
74810: PPUSH
74811: CALL_OW 13
74815: IFFALSE 74831
// SetSide ( i , side ) ;
74817: LD_VAR 0 1
74821: PPUSH
74822: LD_VAR 0 3
74826: PPUSH
74827: CALL_OW 235
74831: GO 74805
74833: POP
74834: POP
// end ;
74835: PPOPN 3
74837: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
74838: LD_EXP 66
74842: PUSH
74843: LD_EXP 79
74847: AND
74848: IFFALSE 74967
74850: GO 74852
74852: DISABLE
74853: LD_INT 0
74855: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74856: LD_ADDR_VAR 0 1
74860: PUSH
74861: LD_INT 22
74863: PUSH
74864: LD_OWVAR 2
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: PUSH
74873: LD_INT 21
74875: PUSH
74876: LD_INT 1
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: PUSH
74883: LD_INT 3
74885: PUSH
74886: LD_INT 23
74888: PUSH
74889: LD_INT 0
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: PPUSH
74905: CALL_OW 69
74909: PUSH
74910: FOR_IN
74911: IFFALSE 74965
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74913: LD_VAR 0 1
74917: PPUSH
74918: CALL_OW 257
74922: PUSH
74923: LD_INT 1
74925: PUSH
74926: LD_INT 2
74928: PUSH
74929: LD_INT 3
74931: PUSH
74932: LD_INT 4
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: IN
74941: IFFALSE 74963
// SetClass ( un , rand ( 1 , 4 ) ) ;
74943: LD_VAR 0 1
74947: PPUSH
74948: LD_INT 1
74950: PPUSH
74951: LD_INT 4
74953: PPUSH
74954: CALL_OW 12
74958: PPUSH
74959: CALL_OW 336
74963: GO 74910
74965: POP
74966: POP
// end ;
74967: PPOPN 1
74969: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74970: LD_EXP 66
74974: PUSH
74975: LD_EXP 78
74979: AND
74980: IFFALSE 75059
74982: GO 74984
74984: DISABLE
74985: LD_INT 0
74987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74988: LD_ADDR_VAR 0 1
74992: PUSH
74993: LD_INT 22
74995: PUSH
74996: LD_OWVAR 2
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 21
75007: PUSH
75008: LD_INT 3
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PPUSH
75019: CALL_OW 69
75023: ST_TO_ADDR
// if not tmp then
75024: LD_VAR 0 1
75028: NOT
75029: IFFALSE 75033
// exit ;
75031: GO 75059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
75033: LD_VAR 0 1
75037: PUSH
75038: LD_INT 1
75040: PPUSH
75041: LD_VAR 0 1
75045: PPUSH
75046: CALL_OW 12
75050: ARRAY
75051: PPUSH
75052: LD_INT 100
75054: PPUSH
75055: CALL_OW 234
// end ;
75059: PPOPN 1
75061: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75062: LD_EXP 66
75066: PUSH
75067: LD_EXP 80
75071: AND
75072: IFFALSE 75170
75074: GO 75076
75076: DISABLE
75077: LD_INT 0
75079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75080: LD_ADDR_VAR 0 1
75084: PUSH
75085: LD_INT 22
75087: PUSH
75088: LD_OWVAR 2
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 21
75099: PUSH
75100: LD_INT 1
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PPUSH
75111: CALL_OW 69
75115: ST_TO_ADDR
// if not tmp then
75116: LD_VAR 0 1
75120: NOT
75121: IFFALSE 75125
// exit ;
75123: GO 75170
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75125: LD_VAR 0 1
75129: PUSH
75130: LD_INT 1
75132: PPUSH
75133: LD_VAR 0 1
75137: PPUSH
75138: CALL_OW 12
75142: ARRAY
75143: PPUSH
75144: LD_INT 1
75146: PPUSH
75147: LD_INT 4
75149: PPUSH
75150: CALL_OW 12
75154: PPUSH
75155: LD_INT 3000
75157: PPUSH
75158: LD_INT 9000
75160: PPUSH
75161: CALL_OW 12
75165: PPUSH
75166: CALL_OW 492
// end ;
75170: PPOPN 1
75172: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75173: LD_EXP 66
75177: PUSH
75178: LD_EXP 81
75182: AND
75183: IFFALSE 75203
75185: GO 75187
75187: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75188: LD_INT 1
75190: PPUSH
75191: LD_OWVAR 2
75195: PPUSH
75196: LD_INT 0
75198: PPUSH
75199: CALL_OW 324
75203: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75204: LD_EXP 66
75208: PUSH
75209: LD_EXP 82
75213: AND
75214: IFFALSE 75297
75216: GO 75218
75218: DISABLE
75219: LD_INT 0
75221: PPUSH
75222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75223: LD_ADDR_VAR 0 2
75227: PUSH
75228: LD_INT 22
75230: PUSH
75231: LD_OWVAR 2
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PUSH
75240: LD_INT 21
75242: PUSH
75243: LD_INT 3
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PPUSH
75254: CALL_OW 69
75258: ST_TO_ADDR
// if not tmp then
75259: LD_VAR 0 2
75263: NOT
75264: IFFALSE 75268
// exit ;
75266: GO 75297
// for i in tmp do
75268: LD_ADDR_VAR 0 1
75272: PUSH
75273: LD_VAR 0 2
75277: PUSH
75278: FOR_IN
75279: IFFALSE 75295
// SetBLevel ( i , 10 ) ;
75281: LD_VAR 0 1
75285: PPUSH
75286: LD_INT 10
75288: PPUSH
75289: CALL_OW 241
75293: GO 75278
75295: POP
75296: POP
// end ;
75297: PPOPN 2
75299: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75300: LD_EXP 66
75304: PUSH
75305: LD_EXP 83
75309: AND
75310: IFFALSE 75421
75312: GO 75314
75314: DISABLE
75315: LD_INT 0
75317: PPUSH
75318: PPUSH
75319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75320: LD_ADDR_VAR 0 3
75324: PUSH
75325: LD_INT 22
75327: PUSH
75328: LD_OWVAR 2
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: LD_INT 25
75339: PUSH
75340: LD_INT 1
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: PPUSH
75351: CALL_OW 69
75355: ST_TO_ADDR
// if not tmp then
75356: LD_VAR 0 3
75360: NOT
75361: IFFALSE 75365
// exit ;
75363: GO 75421
// un := tmp [ rand ( 1 , tmp ) ] ;
75365: LD_ADDR_VAR 0 2
75369: PUSH
75370: LD_VAR 0 3
75374: PUSH
75375: LD_INT 1
75377: PPUSH
75378: LD_VAR 0 3
75382: PPUSH
75383: CALL_OW 12
75387: ARRAY
75388: ST_TO_ADDR
// if Crawls ( un ) then
75389: LD_VAR 0 2
75393: PPUSH
75394: CALL_OW 318
75398: IFFALSE 75409
// ComWalk ( un ) ;
75400: LD_VAR 0 2
75404: PPUSH
75405: CALL_OW 138
// SetClass ( un , class_sniper ) ;
75409: LD_VAR 0 2
75413: PPUSH
75414: LD_INT 5
75416: PPUSH
75417: CALL_OW 336
// end ;
75421: PPOPN 3
75423: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
75424: LD_EXP 66
75428: PUSH
75429: LD_EXP 84
75433: AND
75434: PUSH
75435: LD_OWVAR 67
75439: PUSH
75440: LD_INT 4
75442: LESS
75443: AND
75444: IFFALSE 75463
75446: GO 75448
75448: DISABLE
// begin Difficulty := Difficulty + 1 ;
75449: LD_ADDR_OWVAR 67
75453: PUSH
75454: LD_OWVAR 67
75458: PUSH
75459: LD_INT 1
75461: PLUS
75462: ST_TO_ADDR
// end ;
75463: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
75464: LD_EXP 66
75468: PUSH
75469: LD_EXP 85
75473: AND
75474: IFFALSE 75577
75476: GO 75478
75478: DISABLE
75479: LD_INT 0
75481: PPUSH
// begin for i := 1 to 5 do
75482: LD_ADDR_VAR 0 1
75486: PUSH
75487: DOUBLE
75488: LD_INT 1
75490: DEC
75491: ST_TO_ADDR
75492: LD_INT 5
75494: PUSH
75495: FOR_TO
75496: IFFALSE 75575
// begin uc_nation := nation_nature ;
75498: LD_ADDR_OWVAR 21
75502: PUSH
75503: LD_INT 0
75505: ST_TO_ADDR
// uc_side := 0 ;
75506: LD_ADDR_OWVAR 20
75510: PUSH
75511: LD_INT 0
75513: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75514: LD_ADDR_OWVAR 29
75518: PUSH
75519: LD_INT 12
75521: PUSH
75522: LD_INT 12
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: ST_TO_ADDR
// hc_agressivity := 20 ;
75529: LD_ADDR_OWVAR 35
75533: PUSH
75534: LD_INT 20
75536: ST_TO_ADDR
// hc_class := class_tiger ;
75537: LD_ADDR_OWVAR 28
75541: PUSH
75542: LD_INT 14
75544: ST_TO_ADDR
// hc_gallery :=  ;
75545: LD_ADDR_OWVAR 33
75549: PUSH
75550: LD_STRING 
75552: ST_TO_ADDR
// hc_name :=  ;
75553: LD_ADDR_OWVAR 26
75557: PUSH
75558: LD_STRING 
75560: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
75561: CALL_OW 44
75565: PPUSH
75566: LD_INT 0
75568: PPUSH
75569: CALL_OW 51
// end ;
75573: GO 75495
75575: POP
75576: POP
// end ;
75577: PPOPN 1
75579: END
// every 0 0$1 trigger StreamModeActive and sBomb do
75580: LD_EXP 66
75584: PUSH
75585: LD_EXP 86
75589: AND
75590: IFFALSE 75599
75592: GO 75594
75594: DISABLE
// StreamSibBomb ;
75595: CALL 75600 0 0
75599: END
// export function StreamSibBomb ; var i , x , y ; begin
75600: LD_INT 0
75602: PPUSH
75603: PPUSH
75604: PPUSH
75605: PPUSH
// result := false ;
75606: LD_ADDR_VAR 0 1
75610: PUSH
75611: LD_INT 0
75613: ST_TO_ADDR
// for i := 1 to 16 do
75614: LD_ADDR_VAR 0 2
75618: PUSH
75619: DOUBLE
75620: LD_INT 1
75622: DEC
75623: ST_TO_ADDR
75624: LD_INT 16
75626: PUSH
75627: FOR_TO
75628: IFFALSE 75827
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75630: LD_ADDR_VAR 0 3
75634: PUSH
75635: LD_INT 10
75637: PUSH
75638: LD_INT 20
75640: PUSH
75641: LD_INT 30
75643: PUSH
75644: LD_INT 40
75646: PUSH
75647: LD_INT 50
75649: PUSH
75650: LD_INT 60
75652: PUSH
75653: LD_INT 70
75655: PUSH
75656: LD_INT 80
75658: PUSH
75659: LD_INT 90
75661: PUSH
75662: LD_INT 100
75664: PUSH
75665: LD_INT 110
75667: PUSH
75668: LD_INT 120
75670: PUSH
75671: LD_INT 130
75673: PUSH
75674: LD_INT 140
75676: PUSH
75677: LD_INT 150
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: LIST
75696: PUSH
75697: LD_INT 1
75699: PPUSH
75700: LD_INT 15
75702: PPUSH
75703: CALL_OW 12
75707: ARRAY
75708: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75709: LD_ADDR_VAR 0 4
75713: PUSH
75714: LD_INT 10
75716: PUSH
75717: LD_INT 20
75719: PUSH
75720: LD_INT 30
75722: PUSH
75723: LD_INT 40
75725: PUSH
75726: LD_INT 50
75728: PUSH
75729: LD_INT 60
75731: PUSH
75732: LD_INT 70
75734: PUSH
75735: LD_INT 80
75737: PUSH
75738: LD_INT 90
75740: PUSH
75741: LD_INT 100
75743: PUSH
75744: LD_INT 110
75746: PUSH
75747: LD_INT 120
75749: PUSH
75750: LD_INT 130
75752: PUSH
75753: LD_INT 140
75755: PUSH
75756: LD_INT 150
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: LIST
75773: LIST
75774: LIST
75775: PUSH
75776: LD_INT 1
75778: PPUSH
75779: LD_INT 15
75781: PPUSH
75782: CALL_OW 12
75786: ARRAY
75787: ST_TO_ADDR
// if ValidHex ( x , y ) then
75788: LD_VAR 0 3
75792: PPUSH
75793: LD_VAR 0 4
75797: PPUSH
75798: CALL_OW 488
75802: IFFALSE 75825
// begin result := [ x , y ] ;
75804: LD_ADDR_VAR 0 1
75808: PUSH
75809: LD_VAR 0 3
75813: PUSH
75814: LD_VAR 0 4
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: ST_TO_ADDR
// break ;
75823: GO 75827
// end ; end ;
75825: GO 75627
75827: POP
75828: POP
// if result then
75829: LD_VAR 0 1
75833: IFFALSE 75893
// begin ToLua ( playSibBomb() ) ;
75835: LD_STRING playSibBomb()
75837: PPUSH
75838: CALL_OW 559
// wait ( 0 0$14 ) ;
75842: LD_INT 490
75844: PPUSH
75845: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
75849: LD_VAR 0 1
75853: PUSH
75854: LD_INT 1
75856: ARRAY
75857: PPUSH
75858: LD_VAR 0 1
75862: PUSH
75863: LD_INT 2
75865: ARRAY
75866: PPUSH
75867: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75871: LD_VAR 0 1
75875: PUSH
75876: LD_INT 1
75878: ARRAY
75879: PPUSH
75880: LD_VAR 0 1
75884: PUSH
75885: LD_INT 2
75887: ARRAY
75888: PPUSH
75889: CALL_OW 429
// end ; end ;
75893: LD_VAR 0 1
75897: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75898: LD_EXP 66
75902: PUSH
75903: LD_EXP 88
75907: AND
75908: IFFALSE 75920
75910: GO 75912
75912: DISABLE
// YouLost (  ) ;
75913: LD_STRING 
75915: PPUSH
75916: CALL_OW 104
75920: END
// every 0 0$1 trigger StreamModeActive and sFog do
75921: LD_EXP 66
75925: PUSH
75926: LD_EXP 87
75930: AND
75931: IFFALSE 75945
75933: GO 75935
75935: DISABLE
// FogOff ( your_side ) ;
75936: LD_OWVAR 2
75940: PPUSH
75941: CALL_OW 344
75945: END
// every 0 0$1 trigger StreamModeActive and sSun do
75946: LD_EXP 66
75950: PUSH
75951: LD_EXP 89
75955: AND
75956: IFFALSE 75984
75958: GO 75960
75960: DISABLE
// begin solar_recharge_percent := 0 ;
75961: LD_ADDR_OWVAR 79
75965: PUSH
75966: LD_INT 0
75968: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75969: LD_INT 10500
75971: PPUSH
75972: CALL_OW 67
// solar_recharge_percent := 100 ;
75976: LD_ADDR_OWVAR 79
75980: PUSH
75981: LD_INT 100
75983: ST_TO_ADDR
// end ;
75984: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75985: LD_EXP 66
75989: PUSH
75990: LD_EXP 90
75994: AND
75995: IFFALSE 76234
75997: GO 75999
75999: DISABLE
76000: LD_INT 0
76002: PPUSH
76003: PPUSH
76004: PPUSH
// begin tmp := [ ] ;
76005: LD_ADDR_VAR 0 3
76009: PUSH
76010: EMPTY
76011: ST_TO_ADDR
// for i := 1 to 6 do
76012: LD_ADDR_VAR 0 1
76016: PUSH
76017: DOUBLE
76018: LD_INT 1
76020: DEC
76021: ST_TO_ADDR
76022: LD_INT 6
76024: PUSH
76025: FOR_TO
76026: IFFALSE 76131
// begin uc_nation := nation_nature ;
76028: LD_ADDR_OWVAR 21
76032: PUSH
76033: LD_INT 0
76035: ST_TO_ADDR
// uc_side := 0 ;
76036: LD_ADDR_OWVAR 20
76040: PUSH
76041: LD_INT 0
76043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76044: LD_ADDR_OWVAR 29
76048: PUSH
76049: LD_INT 12
76051: PUSH
76052: LD_INT 12
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: ST_TO_ADDR
// hc_agressivity := 20 ;
76059: LD_ADDR_OWVAR 35
76063: PUSH
76064: LD_INT 20
76066: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76067: LD_ADDR_OWVAR 28
76071: PUSH
76072: LD_INT 17
76074: ST_TO_ADDR
// hc_gallery :=  ;
76075: LD_ADDR_OWVAR 33
76079: PUSH
76080: LD_STRING 
76082: ST_TO_ADDR
// hc_name :=  ;
76083: LD_ADDR_OWVAR 26
76087: PUSH
76088: LD_STRING 
76090: ST_TO_ADDR
// un := CreateHuman ;
76091: LD_ADDR_VAR 0 2
76095: PUSH
76096: CALL_OW 44
76100: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76101: LD_VAR 0 2
76105: PPUSH
76106: LD_INT 1
76108: PPUSH
76109: CALL_OW 51
// tmp := tmp ^ un ;
76113: LD_ADDR_VAR 0 3
76117: PUSH
76118: LD_VAR 0 3
76122: PUSH
76123: LD_VAR 0 2
76127: ADD
76128: ST_TO_ADDR
// end ;
76129: GO 76025
76131: POP
76132: POP
// repeat wait ( 0 0$1 ) ;
76133: LD_INT 35
76135: PPUSH
76136: CALL_OW 67
// for un in tmp do
76140: LD_ADDR_VAR 0 2
76144: PUSH
76145: LD_VAR 0 3
76149: PUSH
76150: FOR_IN
76151: IFFALSE 76225
// begin if IsDead ( un ) then
76153: LD_VAR 0 2
76157: PPUSH
76158: CALL_OW 301
76162: IFFALSE 76182
// begin tmp := tmp diff un ;
76164: LD_ADDR_VAR 0 3
76168: PUSH
76169: LD_VAR 0 3
76173: PUSH
76174: LD_VAR 0 2
76178: DIFF
76179: ST_TO_ADDR
// continue ;
76180: GO 76150
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76182: LD_VAR 0 2
76186: PPUSH
76187: LD_INT 3
76189: PUSH
76190: LD_INT 22
76192: PUSH
76193: LD_INT 0
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: PPUSH
76204: CALL_OW 69
76208: PPUSH
76209: LD_VAR 0 2
76213: PPUSH
76214: CALL_OW 74
76218: PPUSH
76219: CALL_OW 115
// end ;
76223: GO 76150
76225: POP
76226: POP
// until not tmp ;
76227: LD_VAR 0 3
76231: NOT
76232: IFFALSE 76133
// end ;
76234: PPOPN 3
76236: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76237: LD_EXP 66
76241: PUSH
76242: LD_EXP 91
76246: AND
76247: IFFALSE 76301
76249: GO 76251
76251: DISABLE
// begin ToLua ( displayTroll(); ) ;
76252: LD_STRING displayTroll();
76254: PPUSH
76255: CALL_OW 559
// wait ( 3 3$00 ) ;
76259: LD_INT 6300
76261: PPUSH
76262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76266: LD_STRING hideTroll();
76268: PPUSH
76269: CALL_OW 559
// wait ( 1 1$00 ) ;
76273: LD_INT 2100
76275: PPUSH
76276: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76280: LD_STRING displayTroll();
76282: PPUSH
76283: CALL_OW 559
// wait ( 1 1$00 ) ;
76287: LD_INT 2100
76289: PPUSH
76290: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76294: LD_STRING hideTroll();
76296: PPUSH
76297: CALL_OW 559
// end ;
76301: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76302: LD_EXP 66
76306: PUSH
76307: LD_EXP 92
76311: AND
76312: IFFALSE 76375
76314: GO 76316
76316: DISABLE
76317: LD_INT 0
76319: PPUSH
// begin p := 0 ;
76320: LD_ADDR_VAR 0 1
76324: PUSH
76325: LD_INT 0
76327: ST_TO_ADDR
// repeat game_speed := 1 ;
76328: LD_ADDR_OWVAR 65
76332: PUSH
76333: LD_INT 1
76335: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76336: LD_INT 35
76338: PPUSH
76339: CALL_OW 67
// p := p + 1 ;
76343: LD_ADDR_VAR 0 1
76347: PUSH
76348: LD_VAR 0 1
76352: PUSH
76353: LD_INT 1
76355: PLUS
76356: ST_TO_ADDR
// until p >= 60 ;
76357: LD_VAR 0 1
76361: PUSH
76362: LD_INT 60
76364: GREATEREQUAL
76365: IFFALSE 76328
// game_speed := 4 ;
76367: LD_ADDR_OWVAR 65
76371: PUSH
76372: LD_INT 4
76374: ST_TO_ADDR
// end ;
76375: PPOPN 1
76377: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76378: LD_EXP 66
76382: PUSH
76383: LD_EXP 93
76387: AND
76388: IFFALSE 76534
76390: GO 76392
76392: DISABLE
76393: LD_INT 0
76395: PPUSH
76396: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76397: LD_ADDR_VAR 0 1
76401: PUSH
76402: LD_INT 22
76404: PUSH
76405: LD_OWVAR 2
76409: PUSH
76410: EMPTY
76411: LIST
76412: LIST
76413: PUSH
76414: LD_INT 2
76416: PUSH
76417: LD_INT 30
76419: PUSH
76420: LD_INT 0
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: PUSH
76427: LD_INT 30
76429: PUSH
76430: LD_INT 1
76432: PUSH
76433: EMPTY
76434: LIST
76435: LIST
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: LIST
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PPUSH
76446: CALL_OW 69
76450: ST_TO_ADDR
// if not depot then
76451: LD_VAR 0 1
76455: NOT
76456: IFFALSE 76460
// exit ;
76458: GO 76534
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
76460: LD_ADDR_VAR 0 2
76464: PUSH
76465: LD_VAR 0 1
76469: PUSH
76470: LD_INT 1
76472: PPUSH
76473: LD_VAR 0 1
76477: PPUSH
76478: CALL_OW 12
76482: ARRAY
76483: PPUSH
76484: CALL_OW 274
76488: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
76489: LD_VAR 0 2
76493: PPUSH
76494: LD_INT 1
76496: PPUSH
76497: LD_INT 0
76499: PPUSH
76500: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
76504: LD_VAR 0 2
76508: PPUSH
76509: LD_INT 2
76511: PPUSH
76512: LD_INT 0
76514: PPUSH
76515: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
76519: LD_VAR 0 2
76523: PPUSH
76524: LD_INT 3
76526: PPUSH
76527: LD_INT 0
76529: PPUSH
76530: CALL_OW 277
// end ;
76534: PPOPN 2
76536: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
76537: LD_EXP 66
76541: PUSH
76542: LD_EXP 94
76546: AND
76547: IFFALSE 76644
76549: GO 76551
76551: DISABLE
76552: LD_INT 0
76554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76555: LD_ADDR_VAR 0 1
76559: PUSH
76560: LD_INT 22
76562: PUSH
76563: LD_OWVAR 2
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: PUSH
76572: LD_INT 21
76574: PUSH
76575: LD_INT 1
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 3
76584: PUSH
76585: LD_INT 23
76587: PUSH
76588: LD_INT 0
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PUSH
76595: EMPTY
76596: LIST
76597: LIST
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: LIST
76603: PPUSH
76604: CALL_OW 69
76608: ST_TO_ADDR
// if not tmp then
76609: LD_VAR 0 1
76613: NOT
76614: IFFALSE 76618
// exit ;
76616: GO 76644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
76618: LD_VAR 0 1
76622: PUSH
76623: LD_INT 1
76625: PPUSH
76626: LD_VAR 0 1
76630: PPUSH
76631: CALL_OW 12
76635: ARRAY
76636: PPUSH
76637: LD_INT 200
76639: PPUSH
76640: CALL_OW 234
// end ;
76644: PPOPN 1
76646: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
76647: LD_EXP 66
76651: PUSH
76652: LD_EXP 95
76656: AND
76657: IFFALSE 76736
76659: GO 76661
76661: DISABLE
76662: LD_INT 0
76664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
76665: LD_ADDR_VAR 0 1
76669: PUSH
76670: LD_INT 22
76672: PUSH
76673: LD_OWVAR 2
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: PUSH
76682: LD_INT 21
76684: PUSH
76685: LD_INT 2
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: PUSH
76692: EMPTY
76693: LIST
76694: LIST
76695: PPUSH
76696: CALL_OW 69
76700: ST_TO_ADDR
// if not tmp then
76701: LD_VAR 0 1
76705: NOT
76706: IFFALSE 76710
// exit ;
76708: GO 76736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
76710: LD_VAR 0 1
76714: PUSH
76715: LD_INT 1
76717: PPUSH
76718: LD_VAR 0 1
76722: PPUSH
76723: CALL_OW 12
76727: ARRAY
76728: PPUSH
76729: LD_INT 60
76731: PPUSH
76732: CALL_OW 234
// end ;
76736: PPOPN 1
76738: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
76739: LD_EXP 66
76743: PUSH
76744: LD_EXP 96
76748: AND
76749: IFFALSE 76848
76751: GO 76753
76753: DISABLE
76754: LD_INT 0
76756: PPUSH
76757: PPUSH
// begin enable ;
76758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
76759: LD_ADDR_VAR 0 1
76763: PUSH
76764: LD_INT 22
76766: PUSH
76767: LD_OWVAR 2
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 61
76778: PUSH
76779: EMPTY
76780: LIST
76781: PUSH
76782: LD_INT 33
76784: PUSH
76785: LD_INT 2
76787: PUSH
76788: EMPTY
76789: LIST
76790: LIST
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: LIST
76796: PPUSH
76797: CALL_OW 69
76801: ST_TO_ADDR
// if not tmp then
76802: LD_VAR 0 1
76806: NOT
76807: IFFALSE 76811
// exit ;
76809: GO 76848
// for i in tmp do
76811: LD_ADDR_VAR 0 2
76815: PUSH
76816: LD_VAR 0 1
76820: PUSH
76821: FOR_IN
76822: IFFALSE 76846
// if IsControledBy ( i ) then
76824: LD_VAR 0 2
76828: PPUSH
76829: CALL_OW 312
76833: IFFALSE 76844
// ComUnlink ( i ) ;
76835: LD_VAR 0 2
76839: PPUSH
76840: CALL_OW 136
76844: GO 76821
76846: POP
76847: POP
// end ;
76848: PPOPN 2
76850: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
76851: LD_EXP 66
76855: PUSH
76856: LD_EXP 97
76860: AND
76861: IFFALSE 77001
76863: GO 76865
76865: DISABLE
76866: LD_INT 0
76868: PPUSH
76869: PPUSH
// begin ToLua ( displayPowell(); ) ;
76870: LD_STRING displayPowell();
76872: PPUSH
76873: CALL_OW 559
// uc_side := 0 ;
76877: LD_ADDR_OWVAR 20
76881: PUSH
76882: LD_INT 0
76884: ST_TO_ADDR
// uc_nation := 2 ;
76885: LD_ADDR_OWVAR 21
76889: PUSH
76890: LD_INT 2
76892: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76893: LD_ADDR_OWVAR 37
76897: PUSH
76898: LD_INT 14
76900: ST_TO_ADDR
// vc_engine := engine_siberite ;
76901: LD_ADDR_OWVAR 39
76905: PUSH
76906: LD_INT 3
76908: ST_TO_ADDR
// vc_control := control_apeman ;
76909: LD_ADDR_OWVAR 38
76913: PUSH
76914: LD_INT 5
76916: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76917: LD_ADDR_OWVAR 40
76921: PUSH
76922: LD_INT 29
76924: ST_TO_ADDR
// un := CreateVehicle ;
76925: LD_ADDR_VAR 0 2
76929: PUSH
76930: CALL_OW 45
76934: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76935: LD_VAR 0 2
76939: PPUSH
76940: LD_INT 1
76942: PPUSH
76943: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76947: LD_INT 35
76949: PPUSH
76950: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76954: LD_VAR 0 2
76958: PPUSH
76959: LD_INT 22
76961: PUSH
76962: LD_OWVAR 2
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PPUSH
76971: CALL_OW 69
76975: PPUSH
76976: LD_VAR 0 2
76980: PPUSH
76981: CALL_OW 74
76985: PPUSH
76986: CALL_OW 115
// until IsDead ( un ) ;
76990: LD_VAR 0 2
76994: PPUSH
76995: CALL_OW 301
76999: IFFALSE 76947
// end ;
77001: PPOPN 2
77003: END
// every 0 0$1 trigger StreamModeActive and sStu do
77004: LD_EXP 66
77008: PUSH
77009: LD_EXP 105
77013: AND
77014: IFFALSE 77030
77016: GO 77018
77018: DISABLE
// begin ToLua ( displayStucuk(); ) ;
77019: LD_STRING displayStucuk();
77021: PPUSH
77022: CALL_OW 559
// ResetFog ;
77026: CALL_OW 335
// end ;
77030: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
77031: LD_EXP 66
77035: PUSH
77036: LD_EXP 98
77040: AND
77041: IFFALSE 77182
77043: GO 77045
77045: DISABLE
77046: LD_INT 0
77048: PPUSH
77049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77050: LD_ADDR_VAR 0 2
77054: PUSH
77055: LD_INT 22
77057: PUSH
77058: LD_OWVAR 2
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: PUSH
77067: LD_INT 21
77069: PUSH
77070: LD_INT 1
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: PPUSH
77081: CALL_OW 69
77085: ST_TO_ADDR
// if not tmp then
77086: LD_VAR 0 2
77090: NOT
77091: IFFALSE 77095
// exit ;
77093: GO 77182
// un := tmp [ rand ( 1 , tmp ) ] ;
77095: LD_ADDR_VAR 0 1
77099: PUSH
77100: LD_VAR 0 2
77104: PUSH
77105: LD_INT 1
77107: PPUSH
77108: LD_VAR 0 2
77112: PPUSH
77113: CALL_OW 12
77117: ARRAY
77118: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77119: LD_VAR 0 1
77123: PPUSH
77124: LD_INT 0
77126: PPUSH
77127: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77131: LD_VAR 0 1
77135: PPUSH
77136: LD_OWVAR 3
77140: PUSH
77141: LD_VAR 0 1
77145: DIFF
77146: PPUSH
77147: LD_VAR 0 1
77151: PPUSH
77152: CALL_OW 74
77156: PPUSH
77157: CALL_OW 115
// wait ( 0 0$20 ) ;
77161: LD_INT 700
77163: PPUSH
77164: CALL_OW 67
// SetSide ( un , your_side ) ;
77168: LD_VAR 0 1
77172: PPUSH
77173: LD_OWVAR 2
77177: PPUSH
77178: CALL_OW 235
// end ;
77182: PPOPN 2
77184: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77185: LD_EXP 66
77189: PUSH
77190: LD_EXP 99
77194: AND
77195: IFFALSE 77301
77197: GO 77199
77199: DISABLE
77200: LD_INT 0
77202: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77203: LD_ADDR_VAR 0 1
77207: PUSH
77208: LD_INT 22
77210: PUSH
77211: LD_OWVAR 2
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: PUSH
77220: LD_INT 2
77222: PUSH
77223: LD_INT 30
77225: PUSH
77226: LD_INT 0
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PUSH
77233: LD_INT 30
77235: PUSH
77236: LD_INT 1
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: LIST
77247: PUSH
77248: EMPTY
77249: LIST
77250: LIST
77251: PPUSH
77252: CALL_OW 69
77256: ST_TO_ADDR
// if not depot then
77257: LD_VAR 0 1
77261: NOT
77262: IFFALSE 77266
// exit ;
77264: GO 77301
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77266: LD_VAR 0 1
77270: PUSH
77271: LD_INT 1
77273: ARRAY
77274: PPUSH
77275: CALL_OW 250
77279: PPUSH
77280: LD_VAR 0 1
77284: PUSH
77285: LD_INT 1
77287: ARRAY
77288: PPUSH
77289: CALL_OW 251
77293: PPUSH
77294: LD_INT 70
77296: PPUSH
77297: CALL_OW 495
// end ;
77301: PPOPN 1
77303: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77304: LD_EXP 66
77308: PUSH
77309: LD_EXP 100
77313: AND
77314: IFFALSE 77525
77316: GO 77318
77318: DISABLE
77319: LD_INT 0
77321: PPUSH
77322: PPUSH
77323: PPUSH
77324: PPUSH
77325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77326: LD_ADDR_VAR 0 5
77330: PUSH
77331: LD_INT 22
77333: PUSH
77334: LD_OWVAR 2
77338: PUSH
77339: EMPTY
77340: LIST
77341: LIST
77342: PUSH
77343: LD_INT 21
77345: PUSH
77346: LD_INT 1
77348: PUSH
77349: EMPTY
77350: LIST
77351: LIST
77352: PUSH
77353: EMPTY
77354: LIST
77355: LIST
77356: PPUSH
77357: CALL_OW 69
77361: ST_TO_ADDR
// if not tmp then
77362: LD_VAR 0 5
77366: NOT
77367: IFFALSE 77371
// exit ;
77369: GO 77525
// for i in tmp do
77371: LD_ADDR_VAR 0 1
77375: PUSH
77376: LD_VAR 0 5
77380: PUSH
77381: FOR_IN
77382: IFFALSE 77523
// begin d := rand ( 0 , 5 ) ;
77384: LD_ADDR_VAR 0 4
77388: PUSH
77389: LD_INT 0
77391: PPUSH
77392: LD_INT 5
77394: PPUSH
77395: CALL_OW 12
77399: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
77400: LD_ADDR_VAR 0 2
77404: PUSH
77405: LD_VAR 0 1
77409: PPUSH
77410: CALL_OW 250
77414: PPUSH
77415: LD_VAR 0 4
77419: PPUSH
77420: LD_INT 3
77422: PPUSH
77423: LD_INT 12
77425: PPUSH
77426: CALL_OW 12
77430: PPUSH
77431: CALL_OW 272
77435: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
77436: LD_ADDR_VAR 0 3
77440: PUSH
77441: LD_VAR 0 1
77445: PPUSH
77446: CALL_OW 251
77450: PPUSH
77451: LD_VAR 0 4
77455: PPUSH
77456: LD_INT 3
77458: PPUSH
77459: LD_INT 12
77461: PPUSH
77462: CALL_OW 12
77466: PPUSH
77467: CALL_OW 273
77471: ST_TO_ADDR
// if ValidHex ( x , y ) then
77472: LD_VAR 0 2
77476: PPUSH
77477: LD_VAR 0 3
77481: PPUSH
77482: CALL_OW 488
77486: IFFALSE 77521
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
77488: LD_VAR 0 1
77492: PPUSH
77493: LD_VAR 0 2
77497: PPUSH
77498: LD_VAR 0 3
77502: PPUSH
77503: LD_INT 3
77505: PPUSH
77506: LD_INT 6
77508: PPUSH
77509: CALL_OW 12
77513: PPUSH
77514: LD_INT 1
77516: PPUSH
77517: CALL_OW 483
// end ;
77521: GO 77381
77523: POP
77524: POP
// end ;
77525: PPOPN 5
77527: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
77528: LD_EXP 66
77532: PUSH
77533: LD_EXP 101
77537: AND
77538: IFFALSE 77632
77540: GO 77542
77542: DISABLE
77543: LD_INT 0
77545: PPUSH
77546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
77547: LD_ADDR_VAR 0 2
77551: PUSH
77552: LD_INT 22
77554: PUSH
77555: LD_OWVAR 2
77559: PUSH
77560: EMPTY
77561: LIST
77562: LIST
77563: PUSH
77564: LD_INT 32
77566: PUSH
77567: LD_INT 1
77569: PUSH
77570: EMPTY
77571: LIST
77572: LIST
77573: PUSH
77574: LD_INT 21
77576: PUSH
77577: LD_INT 2
77579: PUSH
77580: EMPTY
77581: LIST
77582: LIST
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: LIST
77588: PPUSH
77589: CALL_OW 69
77593: ST_TO_ADDR
// if not tmp then
77594: LD_VAR 0 2
77598: NOT
77599: IFFALSE 77603
// exit ;
77601: GO 77632
// for i in tmp do
77603: LD_ADDR_VAR 0 1
77607: PUSH
77608: LD_VAR 0 2
77612: PUSH
77613: FOR_IN
77614: IFFALSE 77630
// SetFuel ( i , 0 ) ;
77616: LD_VAR 0 1
77620: PPUSH
77621: LD_INT 0
77623: PPUSH
77624: CALL_OW 240
77628: GO 77613
77630: POP
77631: POP
// end ;
77632: PPOPN 2
77634: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
77635: LD_EXP 66
77639: PUSH
77640: LD_EXP 102
77644: AND
77645: IFFALSE 77711
77647: GO 77649
77649: DISABLE
77650: LD_INT 0
77652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77653: LD_ADDR_VAR 0 1
77657: PUSH
77658: LD_INT 22
77660: PUSH
77661: LD_OWVAR 2
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PUSH
77670: LD_INT 30
77672: PUSH
77673: LD_INT 29
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PPUSH
77684: CALL_OW 69
77688: ST_TO_ADDR
// if not tmp then
77689: LD_VAR 0 1
77693: NOT
77694: IFFALSE 77698
// exit ;
77696: GO 77711
// DestroyUnit ( tmp [ 1 ] ) ;
77698: LD_VAR 0 1
77702: PUSH
77703: LD_INT 1
77705: ARRAY
77706: PPUSH
77707: CALL_OW 65
// end ;
77711: PPOPN 1
77713: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
77714: LD_EXP 66
77718: PUSH
77719: LD_EXP 104
77723: AND
77724: IFFALSE 77853
77726: GO 77728
77728: DISABLE
77729: LD_INT 0
77731: PPUSH
// begin uc_side := 0 ;
77732: LD_ADDR_OWVAR 20
77736: PUSH
77737: LD_INT 0
77739: ST_TO_ADDR
// uc_nation := nation_arabian ;
77740: LD_ADDR_OWVAR 21
77744: PUSH
77745: LD_INT 2
77747: ST_TO_ADDR
// hc_gallery :=  ;
77748: LD_ADDR_OWVAR 33
77752: PUSH
77753: LD_STRING 
77755: ST_TO_ADDR
// hc_name :=  ;
77756: LD_ADDR_OWVAR 26
77760: PUSH
77761: LD_STRING 
77763: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
77764: LD_INT 1
77766: PPUSH
77767: LD_INT 11
77769: PPUSH
77770: LD_INT 10
77772: PPUSH
77773: CALL_OW 380
// un := CreateHuman ;
77777: LD_ADDR_VAR 0 1
77781: PUSH
77782: CALL_OW 44
77786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77787: LD_VAR 0 1
77791: PPUSH
77792: LD_INT 1
77794: PPUSH
77795: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77799: LD_INT 35
77801: PPUSH
77802: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77806: LD_VAR 0 1
77810: PPUSH
77811: LD_INT 22
77813: PUSH
77814: LD_OWVAR 2
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: PPUSH
77823: CALL_OW 69
77827: PPUSH
77828: LD_VAR 0 1
77832: PPUSH
77833: CALL_OW 74
77837: PPUSH
77838: CALL_OW 115
// until IsDead ( un ) ;
77842: LD_VAR 0 1
77846: PPUSH
77847: CALL_OW 301
77851: IFFALSE 77799
// end ;
77853: PPOPN 1
77855: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77856: LD_EXP 66
77860: PUSH
77861: LD_EXP 106
77865: AND
77866: IFFALSE 77878
77868: GO 77870
77870: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77871: LD_STRING earthquake(getX(game), 0, 32)
77873: PPUSH
77874: CALL_OW 559
77878: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77879: LD_EXP 66
77883: PUSH
77884: LD_EXP 107
77888: AND
77889: IFFALSE 77980
77891: GO 77893
77893: DISABLE
77894: LD_INT 0
77896: PPUSH
// begin enable ;
77897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77898: LD_ADDR_VAR 0 1
77902: PUSH
77903: LD_INT 22
77905: PUSH
77906: LD_OWVAR 2
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: LD_INT 21
77917: PUSH
77918: LD_INT 2
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PUSH
77925: LD_INT 33
77927: PUSH
77928: LD_INT 3
77930: PUSH
77931: EMPTY
77932: LIST
77933: LIST
77934: PUSH
77935: EMPTY
77936: LIST
77937: LIST
77938: LIST
77939: PPUSH
77940: CALL_OW 69
77944: ST_TO_ADDR
// if not tmp then
77945: LD_VAR 0 1
77949: NOT
77950: IFFALSE 77954
// exit ;
77952: GO 77980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77954: LD_VAR 0 1
77958: PUSH
77959: LD_INT 1
77961: PPUSH
77962: LD_VAR 0 1
77966: PPUSH
77967: CALL_OW 12
77971: ARRAY
77972: PPUSH
77973: LD_INT 1
77975: PPUSH
77976: CALL_OW 234
// end ;
77980: PPOPN 1
77982: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77983: LD_EXP 66
77987: PUSH
77988: LD_EXP 108
77992: AND
77993: IFFALSE 78134
77995: GO 77997
77997: DISABLE
77998: LD_INT 0
78000: PPUSH
78001: PPUSH
78002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78003: LD_ADDR_VAR 0 3
78007: PUSH
78008: LD_INT 22
78010: PUSH
78011: LD_OWVAR 2
78015: PUSH
78016: EMPTY
78017: LIST
78018: LIST
78019: PUSH
78020: LD_INT 25
78022: PUSH
78023: LD_INT 1
78025: PUSH
78026: EMPTY
78027: LIST
78028: LIST
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: PPUSH
78034: CALL_OW 69
78038: ST_TO_ADDR
// if not tmp then
78039: LD_VAR 0 3
78043: NOT
78044: IFFALSE 78048
// exit ;
78046: GO 78134
// un := tmp [ rand ( 1 , tmp ) ] ;
78048: LD_ADDR_VAR 0 2
78052: PUSH
78053: LD_VAR 0 3
78057: PUSH
78058: LD_INT 1
78060: PPUSH
78061: LD_VAR 0 3
78065: PPUSH
78066: CALL_OW 12
78070: ARRAY
78071: ST_TO_ADDR
// if Crawls ( un ) then
78072: LD_VAR 0 2
78076: PPUSH
78077: CALL_OW 318
78081: IFFALSE 78092
// ComWalk ( un ) ;
78083: LD_VAR 0 2
78087: PPUSH
78088: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78092: LD_VAR 0 2
78096: PPUSH
78097: LD_INT 9
78099: PPUSH
78100: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78104: LD_INT 28
78106: PPUSH
78107: LD_OWVAR 2
78111: PPUSH
78112: LD_INT 2
78114: PPUSH
78115: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78119: LD_INT 29
78121: PPUSH
78122: LD_OWVAR 2
78126: PPUSH
78127: LD_INT 2
78129: PPUSH
78130: CALL_OW 322
// end ;
78134: PPOPN 3
78136: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78137: LD_EXP 66
78141: PUSH
78142: LD_EXP 109
78146: AND
78147: IFFALSE 78258
78149: GO 78151
78151: DISABLE
78152: LD_INT 0
78154: PPUSH
78155: PPUSH
78156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78157: LD_ADDR_VAR 0 3
78161: PUSH
78162: LD_INT 22
78164: PUSH
78165: LD_OWVAR 2
78169: PUSH
78170: EMPTY
78171: LIST
78172: LIST
78173: PUSH
78174: LD_INT 25
78176: PUSH
78177: LD_INT 1
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: PPUSH
78188: CALL_OW 69
78192: ST_TO_ADDR
// if not tmp then
78193: LD_VAR 0 3
78197: NOT
78198: IFFALSE 78202
// exit ;
78200: GO 78258
// un := tmp [ rand ( 1 , tmp ) ] ;
78202: LD_ADDR_VAR 0 2
78206: PUSH
78207: LD_VAR 0 3
78211: PUSH
78212: LD_INT 1
78214: PPUSH
78215: LD_VAR 0 3
78219: PPUSH
78220: CALL_OW 12
78224: ARRAY
78225: ST_TO_ADDR
// if Crawls ( un ) then
78226: LD_VAR 0 2
78230: PPUSH
78231: CALL_OW 318
78235: IFFALSE 78246
// ComWalk ( un ) ;
78237: LD_VAR 0 2
78241: PPUSH
78242: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78246: LD_VAR 0 2
78250: PPUSH
78251: LD_INT 8
78253: PPUSH
78254: CALL_OW 336
// end ;
78258: PPOPN 3
78260: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78261: LD_EXP 66
78265: PUSH
78266: LD_EXP 110
78270: AND
78271: IFFALSE 78415
78273: GO 78275
78275: DISABLE
78276: LD_INT 0
78278: PPUSH
78279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78280: LD_ADDR_VAR 0 2
78284: PUSH
78285: LD_INT 22
78287: PUSH
78288: LD_OWVAR 2
78292: PUSH
78293: EMPTY
78294: LIST
78295: LIST
78296: PUSH
78297: LD_INT 21
78299: PUSH
78300: LD_INT 2
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: PUSH
78307: LD_INT 2
78309: PUSH
78310: LD_INT 34
78312: PUSH
78313: LD_INT 12
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PUSH
78320: LD_INT 34
78322: PUSH
78323: LD_INT 51
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: PUSH
78330: LD_INT 34
78332: PUSH
78333: LD_INT 32
78335: PUSH
78336: EMPTY
78337: LIST
78338: LIST
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: LIST
78344: LIST
78345: PUSH
78346: EMPTY
78347: LIST
78348: LIST
78349: LIST
78350: PPUSH
78351: CALL_OW 69
78355: ST_TO_ADDR
// if not tmp then
78356: LD_VAR 0 2
78360: NOT
78361: IFFALSE 78365
// exit ;
78363: GO 78415
// for i in tmp do
78365: LD_ADDR_VAR 0 1
78369: PUSH
78370: LD_VAR 0 2
78374: PUSH
78375: FOR_IN
78376: IFFALSE 78413
// if GetCargo ( i , mat_artifact ) = 0 then
78378: LD_VAR 0 1
78382: PPUSH
78383: LD_INT 4
78385: PPUSH
78386: CALL_OW 289
78390: PUSH
78391: LD_INT 0
78393: EQUAL
78394: IFFALSE 78411
// SetCargo ( i , mat_siberit , 100 ) ;
78396: LD_VAR 0 1
78400: PPUSH
78401: LD_INT 3
78403: PPUSH
78404: LD_INT 100
78406: PPUSH
78407: CALL_OW 290
78411: GO 78375
78413: POP
78414: POP
// end ;
78415: PPOPN 2
78417: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
78418: LD_EXP 66
78422: PUSH
78423: LD_EXP 111
78427: AND
78428: IFFALSE 78611
78430: GO 78432
78432: DISABLE
78433: LD_INT 0
78435: PPUSH
78436: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78437: LD_ADDR_VAR 0 2
78441: PUSH
78442: LD_INT 22
78444: PUSH
78445: LD_OWVAR 2
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PPUSH
78454: CALL_OW 69
78458: ST_TO_ADDR
// if not tmp then
78459: LD_VAR 0 2
78463: NOT
78464: IFFALSE 78468
// exit ;
78466: GO 78611
// for i := 1 to 2 do
78468: LD_ADDR_VAR 0 1
78472: PUSH
78473: DOUBLE
78474: LD_INT 1
78476: DEC
78477: ST_TO_ADDR
78478: LD_INT 2
78480: PUSH
78481: FOR_TO
78482: IFFALSE 78609
// begin uc_side := your_side ;
78484: LD_ADDR_OWVAR 20
78488: PUSH
78489: LD_OWVAR 2
78493: ST_TO_ADDR
// uc_nation := nation_american ;
78494: LD_ADDR_OWVAR 21
78498: PUSH
78499: LD_INT 1
78501: ST_TO_ADDR
// vc_chassis := us_morphling ;
78502: LD_ADDR_OWVAR 37
78506: PUSH
78507: LD_INT 5
78509: ST_TO_ADDR
// vc_engine := engine_siberite ;
78510: LD_ADDR_OWVAR 39
78514: PUSH
78515: LD_INT 3
78517: ST_TO_ADDR
// vc_control := control_computer ;
78518: LD_ADDR_OWVAR 38
78522: PUSH
78523: LD_INT 3
78525: ST_TO_ADDR
// vc_weapon := us_double_laser ;
78526: LD_ADDR_OWVAR 40
78530: PUSH
78531: LD_INT 10
78533: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
78534: LD_VAR 0 2
78538: PUSH
78539: LD_INT 1
78541: ARRAY
78542: PPUSH
78543: CALL_OW 310
78547: NOT
78548: IFFALSE 78595
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
78550: CALL_OW 45
78554: PPUSH
78555: LD_VAR 0 2
78559: PUSH
78560: LD_INT 1
78562: ARRAY
78563: PPUSH
78564: CALL_OW 250
78568: PPUSH
78569: LD_VAR 0 2
78573: PUSH
78574: LD_INT 1
78576: ARRAY
78577: PPUSH
78578: CALL_OW 251
78582: PPUSH
78583: LD_INT 12
78585: PPUSH
78586: LD_INT 1
78588: PPUSH
78589: CALL_OW 50
78593: GO 78607
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
78595: CALL_OW 45
78599: PPUSH
78600: LD_INT 1
78602: PPUSH
78603: CALL_OW 51
// end ;
78607: GO 78481
78609: POP
78610: POP
// end ;
78611: PPOPN 2
78613: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
78614: LD_EXP 66
78618: PUSH
78619: LD_EXP 112
78623: AND
78624: IFFALSE 78846
78626: GO 78628
78628: DISABLE
78629: LD_INT 0
78631: PPUSH
78632: PPUSH
78633: PPUSH
78634: PPUSH
78635: PPUSH
78636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78637: LD_ADDR_VAR 0 6
78641: PUSH
78642: LD_INT 22
78644: PUSH
78645: LD_OWVAR 2
78649: PUSH
78650: EMPTY
78651: LIST
78652: LIST
78653: PUSH
78654: LD_INT 21
78656: PUSH
78657: LD_INT 1
78659: PUSH
78660: EMPTY
78661: LIST
78662: LIST
78663: PUSH
78664: LD_INT 3
78666: PUSH
78667: LD_INT 23
78669: PUSH
78670: LD_INT 0
78672: PUSH
78673: EMPTY
78674: LIST
78675: LIST
78676: PUSH
78677: EMPTY
78678: LIST
78679: LIST
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: LIST
78685: PPUSH
78686: CALL_OW 69
78690: ST_TO_ADDR
// if not tmp then
78691: LD_VAR 0 6
78695: NOT
78696: IFFALSE 78700
// exit ;
78698: GO 78846
// s1 := rand ( 1 , 4 ) ;
78700: LD_ADDR_VAR 0 2
78704: PUSH
78705: LD_INT 1
78707: PPUSH
78708: LD_INT 4
78710: PPUSH
78711: CALL_OW 12
78715: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
78716: LD_ADDR_VAR 0 4
78720: PUSH
78721: LD_VAR 0 6
78725: PUSH
78726: LD_INT 1
78728: ARRAY
78729: PPUSH
78730: LD_VAR 0 2
78734: PPUSH
78735: CALL_OW 259
78739: ST_TO_ADDR
// if s1 = 1 then
78740: LD_VAR 0 2
78744: PUSH
78745: LD_INT 1
78747: EQUAL
78748: IFFALSE 78768
// s2 := rand ( 2 , 4 ) else
78750: LD_ADDR_VAR 0 3
78754: PUSH
78755: LD_INT 2
78757: PPUSH
78758: LD_INT 4
78760: PPUSH
78761: CALL_OW 12
78765: ST_TO_ADDR
78766: GO 78776
// s2 := 1 ;
78768: LD_ADDR_VAR 0 3
78772: PUSH
78773: LD_INT 1
78775: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
78776: LD_ADDR_VAR 0 5
78780: PUSH
78781: LD_VAR 0 6
78785: PUSH
78786: LD_INT 1
78788: ARRAY
78789: PPUSH
78790: LD_VAR 0 3
78794: PPUSH
78795: CALL_OW 259
78799: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78800: LD_VAR 0 6
78804: PUSH
78805: LD_INT 1
78807: ARRAY
78808: PPUSH
78809: LD_VAR 0 2
78813: PPUSH
78814: LD_VAR 0 5
78818: PPUSH
78819: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78823: LD_VAR 0 6
78827: PUSH
78828: LD_INT 1
78830: ARRAY
78831: PPUSH
78832: LD_VAR 0 3
78836: PPUSH
78837: LD_VAR 0 4
78841: PPUSH
78842: CALL_OW 237
// end ;
78846: PPOPN 6
78848: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
78849: LD_EXP 66
78853: PUSH
78854: LD_EXP 113
78858: AND
78859: IFFALSE 78938
78861: GO 78863
78863: DISABLE
78864: LD_INT 0
78866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78867: LD_ADDR_VAR 0 1
78871: PUSH
78872: LD_INT 22
78874: PUSH
78875: LD_OWVAR 2
78879: PUSH
78880: EMPTY
78881: LIST
78882: LIST
78883: PUSH
78884: LD_INT 30
78886: PUSH
78887: LD_INT 3
78889: PUSH
78890: EMPTY
78891: LIST
78892: LIST
78893: PUSH
78894: EMPTY
78895: LIST
78896: LIST
78897: PPUSH
78898: CALL_OW 69
78902: ST_TO_ADDR
// if not tmp then
78903: LD_VAR 0 1
78907: NOT
78908: IFFALSE 78912
// exit ;
78910: GO 78938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78912: LD_VAR 0 1
78916: PUSH
78917: LD_INT 1
78919: PPUSH
78920: LD_VAR 0 1
78924: PPUSH
78925: CALL_OW 12
78929: ARRAY
78930: PPUSH
78931: LD_INT 1
78933: PPUSH
78934: CALL_OW 234
// end ;
78938: PPOPN 1
78940: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78941: LD_EXP 66
78945: PUSH
78946: LD_EXP 114
78950: AND
78951: IFFALSE 79063
78953: GO 78955
78955: DISABLE
78956: LD_INT 0
78958: PPUSH
78959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78960: LD_ADDR_VAR 0 2
78964: PUSH
78965: LD_INT 22
78967: PUSH
78968: LD_OWVAR 2
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PUSH
78977: LD_INT 2
78979: PUSH
78980: LD_INT 30
78982: PUSH
78983: LD_INT 27
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: LD_INT 30
78992: PUSH
78993: LD_INT 26
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: PUSH
79000: LD_INT 30
79002: PUSH
79003: LD_INT 28
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: EMPTY
79011: LIST
79012: LIST
79013: LIST
79014: LIST
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PPUSH
79020: CALL_OW 69
79024: ST_TO_ADDR
// if not tmp then
79025: LD_VAR 0 2
79029: NOT
79030: IFFALSE 79034
// exit ;
79032: GO 79063
// for i in tmp do
79034: LD_ADDR_VAR 0 1
79038: PUSH
79039: LD_VAR 0 2
79043: PUSH
79044: FOR_IN
79045: IFFALSE 79061
// SetLives ( i , 1 ) ;
79047: LD_VAR 0 1
79051: PPUSH
79052: LD_INT 1
79054: PPUSH
79055: CALL_OW 234
79059: GO 79044
79061: POP
79062: POP
// end ;
79063: PPOPN 2
79065: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79066: LD_EXP 66
79070: PUSH
79071: LD_EXP 115
79075: AND
79076: IFFALSE 79363
79078: GO 79080
79080: DISABLE
79081: LD_INT 0
79083: PPUSH
79084: PPUSH
79085: PPUSH
// begin i := rand ( 1 , 7 ) ;
79086: LD_ADDR_VAR 0 1
79090: PUSH
79091: LD_INT 1
79093: PPUSH
79094: LD_INT 7
79096: PPUSH
79097: CALL_OW 12
79101: ST_TO_ADDR
// case i of 1 :
79102: LD_VAR 0 1
79106: PUSH
79107: LD_INT 1
79109: DOUBLE
79110: EQUAL
79111: IFTRUE 79115
79113: GO 79125
79115: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79116: LD_STRING earthquake(getX(game), 0, 32)
79118: PPUSH
79119: CALL_OW 559
79123: GO 79363
79125: LD_INT 2
79127: DOUBLE
79128: EQUAL
79129: IFTRUE 79133
79131: GO 79147
79133: POP
// begin ToLua ( displayStucuk(); ) ;
79134: LD_STRING displayStucuk();
79136: PPUSH
79137: CALL_OW 559
// ResetFog ;
79141: CALL_OW 335
// end ; 3 :
79145: GO 79363
79147: LD_INT 3
79149: DOUBLE
79150: EQUAL
79151: IFTRUE 79155
79153: GO 79259
79155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79156: LD_ADDR_VAR 0 2
79160: PUSH
79161: LD_INT 22
79163: PUSH
79164: LD_OWVAR 2
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: PUSH
79173: LD_INT 25
79175: PUSH
79176: LD_INT 1
79178: PUSH
79179: EMPTY
79180: LIST
79181: LIST
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: PPUSH
79187: CALL_OW 69
79191: ST_TO_ADDR
// if not tmp then
79192: LD_VAR 0 2
79196: NOT
79197: IFFALSE 79201
// exit ;
79199: GO 79363
// un := tmp [ rand ( 1 , tmp ) ] ;
79201: LD_ADDR_VAR 0 3
79205: PUSH
79206: LD_VAR 0 2
79210: PUSH
79211: LD_INT 1
79213: PPUSH
79214: LD_VAR 0 2
79218: PPUSH
79219: CALL_OW 12
79223: ARRAY
79224: ST_TO_ADDR
// if Crawls ( un ) then
79225: LD_VAR 0 3
79229: PPUSH
79230: CALL_OW 318
79234: IFFALSE 79245
// ComWalk ( un ) ;
79236: LD_VAR 0 3
79240: PPUSH
79241: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79245: LD_VAR 0 3
79249: PPUSH
79250: LD_INT 8
79252: PPUSH
79253: CALL_OW 336
// end ; 4 :
79257: GO 79363
79259: LD_INT 4
79261: DOUBLE
79262: EQUAL
79263: IFTRUE 79267
79265: GO 79341
79267: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79268: LD_ADDR_VAR 0 2
79272: PUSH
79273: LD_INT 22
79275: PUSH
79276: LD_OWVAR 2
79280: PUSH
79281: EMPTY
79282: LIST
79283: LIST
79284: PUSH
79285: LD_INT 30
79287: PUSH
79288: LD_INT 29
79290: PUSH
79291: EMPTY
79292: LIST
79293: LIST
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: PPUSH
79299: CALL_OW 69
79303: ST_TO_ADDR
// if not tmp then
79304: LD_VAR 0 2
79308: NOT
79309: IFFALSE 79313
// exit ;
79311: GO 79363
// CenterNowOnUnits ( tmp [ 1 ] ) ;
79313: LD_VAR 0 2
79317: PUSH
79318: LD_INT 1
79320: ARRAY
79321: PPUSH
79322: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
79326: LD_VAR 0 2
79330: PUSH
79331: LD_INT 1
79333: ARRAY
79334: PPUSH
79335: CALL_OW 65
// end ; 5 .. 7 :
79339: GO 79363
79341: LD_INT 5
79343: DOUBLE
79344: GREATEREQUAL
79345: IFFALSE 79353
79347: LD_INT 7
79349: DOUBLE
79350: LESSEQUAL
79351: IFTRUE 79355
79353: GO 79362
79355: POP
// StreamSibBomb ; end ;
79356: CALL 75600 0 0
79360: GO 79363
79362: POP
// end ;
79363: PPOPN 3
79365: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79366: LD_EXP 66
79370: PUSH
79371: LD_EXP 116
79375: AND
79376: IFFALSE 79532
79378: GO 79380
79380: DISABLE
79381: LD_INT 0
79383: PPUSH
79384: PPUSH
79385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79386: LD_ADDR_VAR 0 2
79390: PUSH
79391: LD_INT 81
79393: PUSH
79394: LD_OWVAR 2
79398: PUSH
79399: EMPTY
79400: LIST
79401: LIST
79402: PUSH
79403: LD_INT 2
79405: PUSH
79406: LD_INT 21
79408: PUSH
79409: LD_INT 1
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: PUSH
79416: LD_INT 21
79418: PUSH
79419: LD_INT 2
79421: PUSH
79422: EMPTY
79423: LIST
79424: LIST
79425: PUSH
79426: EMPTY
79427: LIST
79428: LIST
79429: LIST
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: PPUSH
79435: CALL_OW 69
79439: ST_TO_ADDR
// if not tmp then
79440: LD_VAR 0 2
79444: NOT
79445: IFFALSE 79449
// exit ;
79447: GO 79532
// p := 0 ;
79449: LD_ADDR_VAR 0 3
79453: PUSH
79454: LD_INT 0
79456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79457: LD_INT 35
79459: PPUSH
79460: CALL_OW 67
// p := p + 1 ;
79464: LD_ADDR_VAR 0 3
79468: PUSH
79469: LD_VAR 0 3
79473: PUSH
79474: LD_INT 1
79476: PLUS
79477: ST_TO_ADDR
// for i in tmp do
79478: LD_ADDR_VAR 0 1
79482: PUSH
79483: LD_VAR 0 2
79487: PUSH
79488: FOR_IN
79489: IFFALSE 79520
// if GetLives ( i ) < 1000 then
79491: LD_VAR 0 1
79495: PPUSH
79496: CALL_OW 256
79500: PUSH
79501: LD_INT 1000
79503: LESS
79504: IFFALSE 79518
// SetLives ( i , 1000 ) ;
79506: LD_VAR 0 1
79510: PPUSH
79511: LD_INT 1000
79513: PPUSH
79514: CALL_OW 234
79518: GO 79488
79520: POP
79521: POP
// until p > 20 ;
79522: LD_VAR 0 3
79526: PUSH
79527: LD_INT 20
79529: GREATER
79530: IFFALSE 79457
// end ;
79532: PPOPN 3
79534: END
// every 0 0$1 trigger StreamModeActive and sTime do
79535: LD_EXP 66
79539: PUSH
79540: LD_EXP 117
79544: AND
79545: IFFALSE 79580
79547: GO 79549
79549: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
79550: LD_INT 28
79552: PPUSH
79553: LD_OWVAR 2
79557: PPUSH
79558: LD_INT 2
79560: PPUSH
79561: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
79565: LD_INT 30
79567: PPUSH
79568: LD_OWVAR 2
79572: PPUSH
79573: LD_INT 2
79575: PPUSH
79576: CALL_OW 322
// end ;
79580: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
79581: LD_EXP 66
79585: PUSH
79586: LD_EXP 118
79590: AND
79591: IFFALSE 79712
79593: GO 79595
79595: DISABLE
79596: LD_INT 0
79598: PPUSH
79599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79600: LD_ADDR_VAR 0 2
79604: PUSH
79605: LD_INT 22
79607: PUSH
79608: LD_OWVAR 2
79612: PUSH
79613: EMPTY
79614: LIST
79615: LIST
79616: PUSH
79617: LD_INT 21
79619: PUSH
79620: LD_INT 1
79622: PUSH
79623: EMPTY
79624: LIST
79625: LIST
79626: PUSH
79627: LD_INT 3
79629: PUSH
79630: LD_INT 23
79632: PUSH
79633: LD_INT 0
79635: PUSH
79636: EMPTY
79637: LIST
79638: LIST
79639: PUSH
79640: EMPTY
79641: LIST
79642: LIST
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: LIST
79648: PPUSH
79649: CALL_OW 69
79653: ST_TO_ADDR
// if not tmp then
79654: LD_VAR 0 2
79658: NOT
79659: IFFALSE 79663
// exit ;
79661: GO 79712
// for i in tmp do
79663: LD_ADDR_VAR 0 1
79667: PUSH
79668: LD_VAR 0 2
79672: PUSH
79673: FOR_IN
79674: IFFALSE 79710
// begin if Crawls ( i ) then
79676: LD_VAR 0 1
79680: PPUSH
79681: CALL_OW 318
79685: IFFALSE 79696
// ComWalk ( i ) ;
79687: LD_VAR 0 1
79691: PPUSH
79692: CALL_OW 138
// SetClass ( i , 2 ) ;
79696: LD_VAR 0 1
79700: PPUSH
79701: LD_INT 2
79703: PPUSH
79704: CALL_OW 336
// end ;
79708: GO 79673
79710: POP
79711: POP
// end ;
79712: PPOPN 2
79714: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
79715: LD_EXP 66
79719: PUSH
79720: LD_EXP 119
79724: AND
79725: IFFALSE 80013
79727: GO 79729
79729: DISABLE
79730: LD_INT 0
79732: PPUSH
79733: PPUSH
79734: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
79735: LD_OWVAR 2
79739: PPUSH
79740: LD_INT 9
79742: PPUSH
79743: LD_INT 1
79745: PPUSH
79746: LD_INT 1
79748: PPUSH
79749: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
79753: LD_INT 9
79755: PPUSH
79756: LD_OWVAR 2
79760: PPUSH
79761: CALL_OW 343
// uc_side := 9 ;
79765: LD_ADDR_OWVAR 20
79769: PUSH
79770: LD_INT 9
79772: ST_TO_ADDR
// uc_nation := 2 ;
79773: LD_ADDR_OWVAR 21
79777: PUSH
79778: LD_INT 2
79780: ST_TO_ADDR
// hc_name := Dark Warrior ;
79781: LD_ADDR_OWVAR 26
79785: PUSH
79786: LD_STRING Dark Warrior
79788: ST_TO_ADDR
// hc_gallery :=  ;
79789: LD_ADDR_OWVAR 33
79793: PUSH
79794: LD_STRING 
79796: ST_TO_ADDR
// hc_noskilllimit := true ;
79797: LD_ADDR_OWVAR 76
79801: PUSH
79802: LD_INT 1
79804: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79805: LD_ADDR_OWVAR 31
79809: PUSH
79810: LD_INT 30
79812: PUSH
79813: LD_INT 30
79815: PUSH
79816: LD_INT 30
79818: PUSH
79819: LD_INT 30
79821: PUSH
79822: EMPTY
79823: LIST
79824: LIST
79825: LIST
79826: LIST
79827: ST_TO_ADDR
// un := CreateHuman ;
79828: LD_ADDR_VAR 0 3
79832: PUSH
79833: CALL_OW 44
79837: ST_TO_ADDR
// hc_noskilllimit := false ;
79838: LD_ADDR_OWVAR 76
79842: PUSH
79843: LD_INT 0
79845: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79846: LD_VAR 0 3
79850: PPUSH
79851: LD_INT 1
79853: PPUSH
79854: CALL_OW 51
// ToLua ( playRanger() ) ;
79858: LD_STRING playRanger()
79860: PPUSH
79861: CALL_OW 559
// p := 0 ;
79865: LD_ADDR_VAR 0 2
79869: PUSH
79870: LD_INT 0
79872: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79873: LD_INT 35
79875: PPUSH
79876: CALL_OW 67
// p := p + 1 ;
79880: LD_ADDR_VAR 0 2
79884: PUSH
79885: LD_VAR 0 2
79889: PUSH
79890: LD_INT 1
79892: PLUS
79893: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79894: LD_VAR 0 3
79898: PPUSH
79899: CALL_OW 256
79903: PUSH
79904: LD_INT 1000
79906: LESS
79907: IFFALSE 79921
// SetLives ( un , 1000 ) ;
79909: LD_VAR 0 3
79913: PPUSH
79914: LD_INT 1000
79916: PPUSH
79917: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79921: LD_VAR 0 3
79925: PPUSH
79926: LD_INT 81
79928: PUSH
79929: LD_OWVAR 2
79933: PUSH
79934: EMPTY
79935: LIST
79936: LIST
79937: PUSH
79938: LD_INT 91
79940: PUSH
79941: LD_VAR 0 3
79945: PUSH
79946: LD_INT 30
79948: PUSH
79949: EMPTY
79950: LIST
79951: LIST
79952: LIST
79953: PUSH
79954: EMPTY
79955: LIST
79956: LIST
79957: PPUSH
79958: CALL_OW 69
79962: PPUSH
79963: LD_VAR 0 3
79967: PPUSH
79968: CALL_OW 74
79972: PPUSH
79973: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
79977: LD_VAR 0 2
79981: PUSH
79982: LD_INT 80
79984: GREATER
79985: PUSH
79986: LD_VAR 0 3
79990: PPUSH
79991: CALL_OW 301
79995: OR
79996: IFFALSE 79873
// if un then
79998: LD_VAR 0 3
80002: IFFALSE 80013
// RemoveUnit ( un ) ;
80004: LD_VAR 0 3
80008: PPUSH
80009: CALL_OW 64
// end ;
80013: PPOPN 3
80015: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
80016: LD_EXP 120
80020: IFFALSE 80136
80022: GO 80024
80024: DISABLE
80025: LD_INT 0
80027: PPUSH
80028: PPUSH
80029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80030: LD_ADDR_VAR 0 2
80034: PUSH
80035: LD_INT 81
80037: PUSH
80038: LD_OWVAR 2
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: PUSH
80047: LD_INT 21
80049: PUSH
80050: LD_INT 1
80052: PUSH
80053: EMPTY
80054: LIST
80055: LIST
80056: PUSH
80057: EMPTY
80058: LIST
80059: LIST
80060: PPUSH
80061: CALL_OW 69
80065: ST_TO_ADDR
// ToLua ( playComputer() ) ;
80066: LD_STRING playComputer()
80068: PPUSH
80069: CALL_OW 559
// if not tmp then
80073: LD_VAR 0 2
80077: NOT
80078: IFFALSE 80082
// exit ;
80080: GO 80136
// for i in tmp do
80082: LD_ADDR_VAR 0 1
80086: PUSH
80087: LD_VAR 0 2
80091: PUSH
80092: FOR_IN
80093: IFFALSE 80134
// for j := 1 to 4 do
80095: LD_ADDR_VAR 0 3
80099: PUSH
80100: DOUBLE
80101: LD_INT 1
80103: DEC
80104: ST_TO_ADDR
80105: LD_INT 4
80107: PUSH
80108: FOR_TO
80109: IFFALSE 80130
// SetSkill ( i , j , 10 ) ;
80111: LD_VAR 0 1
80115: PPUSH
80116: LD_VAR 0 3
80120: PPUSH
80121: LD_INT 10
80123: PPUSH
80124: CALL_OW 237
80128: GO 80108
80130: POP
80131: POP
80132: GO 80092
80134: POP
80135: POP
// end ;
80136: PPOPN 3
80138: END
// every 0 0$1 trigger s30 do var i , tmp ;
80139: LD_EXP 121
80143: IFFALSE 80212
80145: GO 80147
80147: DISABLE
80148: LD_INT 0
80150: PPUSH
80151: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80152: LD_ADDR_VAR 0 2
80156: PUSH
80157: LD_INT 22
80159: PUSH
80160: LD_OWVAR 2
80164: PUSH
80165: EMPTY
80166: LIST
80167: LIST
80168: PPUSH
80169: CALL_OW 69
80173: ST_TO_ADDR
// if not tmp then
80174: LD_VAR 0 2
80178: NOT
80179: IFFALSE 80183
// exit ;
80181: GO 80212
// for i in tmp do
80183: LD_ADDR_VAR 0 1
80187: PUSH
80188: LD_VAR 0 2
80192: PUSH
80193: FOR_IN
80194: IFFALSE 80210
// SetLives ( i , 300 ) ;
80196: LD_VAR 0 1
80200: PPUSH
80201: LD_INT 300
80203: PPUSH
80204: CALL_OW 234
80208: GO 80193
80210: POP
80211: POP
// end ;
80212: PPOPN 2
80214: END
// every 0 0$1 trigger s60 do var i , tmp ;
80215: LD_EXP 122
80219: IFFALSE 80288
80221: GO 80223
80223: DISABLE
80224: LD_INT 0
80226: PPUSH
80227: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80228: LD_ADDR_VAR 0 2
80232: PUSH
80233: LD_INT 22
80235: PUSH
80236: LD_OWVAR 2
80240: PUSH
80241: EMPTY
80242: LIST
80243: LIST
80244: PPUSH
80245: CALL_OW 69
80249: ST_TO_ADDR
// if not tmp then
80250: LD_VAR 0 2
80254: NOT
80255: IFFALSE 80259
// exit ;
80257: GO 80288
// for i in tmp do
80259: LD_ADDR_VAR 0 1
80263: PUSH
80264: LD_VAR 0 2
80268: PUSH
80269: FOR_IN
80270: IFFALSE 80286
// SetLives ( i , 600 ) ;
80272: LD_VAR 0 1
80276: PPUSH
80277: LD_INT 600
80279: PPUSH
80280: CALL_OW 234
80284: GO 80269
80286: POP
80287: POP
// end ;
80288: PPOPN 2
80290: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
80291: LD_INT 0
80293: PPUSH
// case cmd of 301 :
80294: LD_VAR 0 1
80298: PUSH
80299: LD_INT 301
80301: DOUBLE
80302: EQUAL
80303: IFTRUE 80307
80305: GO 80339
80307: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
80308: LD_VAR 0 6
80312: PPUSH
80313: LD_VAR 0 7
80317: PPUSH
80318: LD_VAR 0 8
80322: PPUSH
80323: LD_VAR 0 4
80327: PPUSH
80328: LD_VAR 0 5
80332: PPUSH
80333: CALL 81540 0 5
80337: GO 80460
80339: LD_INT 302
80341: DOUBLE
80342: EQUAL
80343: IFTRUE 80347
80345: GO 80384
80347: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
80348: LD_VAR 0 6
80352: PPUSH
80353: LD_VAR 0 7
80357: PPUSH
80358: LD_VAR 0 8
80362: PPUSH
80363: LD_VAR 0 9
80367: PPUSH
80368: LD_VAR 0 4
80372: PPUSH
80373: LD_VAR 0 5
80377: PPUSH
80378: CALL 81631 0 6
80382: GO 80460
80384: LD_INT 303
80386: DOUBLE
80387: EQUAL
80388: IFTRUE 80392
80390: GO 80429
80392: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
80393: LD_VAR 0 6
80397: PPUSH
80398: LD_VAR 0 7
80402: PPUSH
80403: LD_VAR 0 8
80407: PPUSH
80408: LD_VAR 0 9
80412: PPUSH
80413: LD_VAR 0 4
80417: PPUSH
80418: LD_VAR 0 5
80422: PPUSH
80423: CALL 80465 0 6
80427: GO 80460
80429: LD_INT 304
80431: DOUBLE
80432: EQUAL
80433: IFTRUE 80437
80435: GO 80459
80437: POP
// hHackTeleport ( unit , x , y ) ; end ;
80438: LD_VAR 0 2
80442: PPUSH
80443: LD_VAR 0 4
80447: PPUSH
80448: LD_VAR 0 5
80452: PPUSH
80453: CALL 82224 0 3
80457: GO 80460
80459: POP
// end ;
80460: LD_VAR 0 12
80464: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
80465: LD_INT 0
80467: PPUSH
80468: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
80469: LD_VAR 0 1
80473: PUSH
80474: LD_INT 1
80476: LESS
80477: PUSH
80478: LD_VAR 0 1
80482: PUSH
80483: LD_INT 3
80485: GREATER
80486: OR
80487: PUSH
80488: LD_VAR 0 5
80492: PPUSH
80493: LD_VAR 0 6
80497: PPUSH
80498: CALL_OW 428
80502: OR
80503: IFFALSE 80507
// exit ;
80505: GO 81227
// uc_side := your_side ;
80507: LD_ADDR_OWVAR 20
80511: PUSH
80512: LD_OWVAR 2
80516: ST_TO_ADDR
// uc_nation := nation ;
80517: LD_ADDR_OWVAR 21
80521: PUSH
80522: LD_VAR 0 1
80526: ST_TO_ADDR
// bc_level = 1 ;
80527: LD_ADDR_OWVAR 43
80531: PUSH
80532: LD_INT 1
80534: ST_TO_ADDR
// case btype of 1 :
80535: LD_VAR 0 2
80539: PUSH
80540: LD_INT 1
80542: DOUBLE
80543: EQUAL
80544: IFTRUE 80548
80546: GO 80559
80548: POP
// bc_type := b_depot ; 2 :
80549: LD_ADDR_OWVAR 42
80553: PUSH
80554: LD_INT 0
80556: ST_TO_ADDR
80557: GO 81171
80559: LD_INT 2
80561: DOUBLE
80562: EQUAL
80563: IFTRUE 80567
80565: GO 80578
80567: POP
// bc_type := b_warehouse ; 3 :
80568: LD_ADDR_OWVAR 42
80572: PUSH
80573: LD_INT 1
80575: ST_TO_ADDR
80576: GO 81171
80578: LD_INT 3
80580: DOUBLE
80581: EQUAL
80582: IFTRUE 80586
80584: GO 80597
80586: POP
// bc_type := b_lab ; 4 .. 9 :
80587: LD_ADDR_OWVAR 42
80591: PUSH
80592: LD_INT 6
80594: ST_TO_ADDR
80595: GO 81171
80597: LD_INT 4
80599: DOUBLE
80600: GREATEREQUAL
80601: IFFALSE 80609
80603: LD_INT 9
80605: DOUBLE
80606: LESSEQUAL
80607: IFTRUE 80611
80609: GO 80663
80611: POP
// begin bc_type := b_lab_half ;
80612: LD_ADDR_OWVAR 42
80616: PUSH
80617: LD_INT 7
80619: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
80620: LD_ADDR_OWVAR 44
80624: PUSH
80625: LD_INT 10
80627: PUSH
80628: LD_INT 11
80630: PUSH
80631: LD_INT 12
80633: PUSH
80634: LD_INT 15
80636: PUSH
80637: LD_INT 14
80639: PUSH
80640: LD_INT 13
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: LIST
80647: LIST
80648: LIST
80649: LIST
80650: PUSH
80651: LD_VAR 0 2
80655: PUSH
80656: LD_INT 3
80658: MINUS
80659: ARRAY
80660: ST_TO_ADDR
// end ; 10 .. 13 :
80661: GO 81171
80663: LD_INT 10
80665: DOUBLE
80666: GREATEREQUAL
80667: IFFALSE 80675
80669: LD_INT 13
80671: DOUBLE
80672: LESSEQUAL
80673: IFTRUE 80677
80675: GO 80754
80677: POP
// begin bc_type := b_lab_full ;
80678: LD_ADDR_OWVAR 42
80682: PUSH
80683: LD_INT 8
80685: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
80686: LD_ADDR_OWVAR 44
80690: PUSH
80691: LD_INT 10
80693: PUSH
80694: LD_INT 12
80696: PUSH
80697: LD_INT 14
80699: PUSH
80700: LD_INT 13
80702: PUSH
80703: EMPTY
80704: LIST
80705: LIST
80706: LIST
80707: LIST
80708: PUSH
80709: LD_VAR 0 2
80713: PUSH
80714: LD_INT 9
80716: MINUS
80717: ARRAY
80718: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
80719: LD_ADDR_OWVAR 45
80723: PUSH
80724: LD_INT 11
80726: PUSH
80727: LD_INT 15
80729: PUSH
80730: LD_INT 12
80732: PUSH
80733: LD_INT 15
80735: PUSH
80736: EMPTY
80737: LIST
80738: LIST
80739: LIST
80740: LIST
80741: PUSH
80742: LD_VAR 0 2
80746: PUSH
80747: LD_INT 9
80749: MINUS
80750: ARRAY
80751: ST_TO_ADDR
// end ; 14 :
80752: GO 81171
80754: LD_INT 14
80756: DOUBLE
80757: EQUAL
80758: IFTRUE 80762
80760: GO 80773
80762: POP
// bc_type := b_workshop ; 15 :
80763: LD_ADDR_OWVAR 42
80767: PUSH
80768: LD_INT 2
80770: ST_TO_ADDR
80771: GO 81171
80773: LD_INT 15
80775: DOUBLE
80776: EQUAL
80777: IFTRUE 80781
80779: GO 80792
80781: POP
// bc_type := b_factory ; 16 :
80782: LD_ADDR_OWVAR 42
80786: PUSH
80787: LD_INT 3
80789: ST_TO_ADDR
80790: GO 81171
80792: LD_INT 16
80794: DOUBLE
80795: EQUAL
80796: IFTRUE 80800
80798: GO 80811
80800: POP
// bc_type := b_ext_gun ; 17 :
80801: LD_ADDR_OWVAR 42
80805: PUSH
80806: LD_INT 17
80808: ST_TO_ADDR
80809: GO 81171
80811: LD_INT 17
80813: DOUBLE
80814: EQUAL
80815: IFTRUE 80819
80817: GO 80847
80819: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
80820: LD_ADDR_OWVAR 42
80824: PUSH
80825: LD_INT 19
80827: PUSH
80828: LD_INT 23
80830: PUSH
80831: LD_INT 19
80833: PUSH
80834: EMPTY
80835: LIST
80836: LIST
80837: LIST
80838: PUSH
80839: LD_VAR 0 1
80843: ARRAY
80844: ST_TO_ADDR
80845: GO 81171
80847: LD_INT 18
80849: DOUBLE
80850: EQUAL
80851: IFTRUE 80855
80853: GO 80866
80855: POP
// bc_type := b_ext_radar ; 19 :
80856: LD_ADDR_OWVAR 42
80860: PUSH
80861: LD_INT 20
80863: ST_TO_ADDR
80864: GO 81171
80866: LD_INT 19
80868: DOUBLE
80869: EQUAL
80870: IFTRUE 80874
80872: GO 80885
80874: POP
// bc_type := b_ext_radio ; 20 :
80875: LD_ADDR_OWVAR 42
80879: PUSH
80880: LD_INT 22
80882: ST_TO_ADDR
80883: GO 81171
80885: LD_INT 20
80887: DOUBLE
80888: EQUAL
80889: IFTRUE 80893
80891: GO 80904
80893: POP
// bc_type := b_ext_siberium ; 21 :
80894: LD_ADDR_OWVAR 42
80898: PUSH
80899: LD_INT 21
80901: ST_TO_ADDR
80902: GO 81171
80904: LD_INT 21
80906: DOUBLE
80907: EQUAL
80908: IFTRUE 80912
80910: GO 80923
80912: POP
// bc_type := b_ext_computer ; 22 :
80913: LD_ADDR_OWVAR 42
80917: PUSH
80918: LD_INT 24
80920: ST_TO_ADDR
80921: GO 81171
80923: LD_INT 22
80925: DOUBLE
80926: EQUAL
80927: IFTRUE 80931
80929: GO 80942
80931: POP
// bc_type := b_ext_track ; 23 :
80932: LD_ADDR_OWVAR 42
80936: PUSH
80937: LD_INT 16
80939: ST_TO_ADDR
80940: GO 81171
80942: LD_INT 23
80944: DOUBLE
80945: EQUAL
80946: IFTRUE 80950
80948: GO 80961
80950: POP
// bc_type := b_ext_laser ; 24 :
80951: LD_ADDR_OWVAR 42
80955: PUSH
80956: LD_INT 25
80958: ST_TO_ADDR
80959: GO 81171
80961: LD_INT 24
80963: DOUBLE
80964: EQUAL
80965: IFTRUE 80969
80967: GO 80980
80969: POP
// bc_type := b_control_tower ; 25 :
80970: LD_ADDR_OWVAR 42
80974: PUSH
80975: LD_INT 36
80977: ST_TO_ADDR
80978: GO 81171
80980: LD_INT 25
80982: DOUBLE
80983: EQUAL
80984: IFTRUE 80988
80986: GO 80999
80988: POP
// bc_type := b_breastwork ; 26 :
80989: LD_ADDR_OWVAR 42
80993: PUSH
80994: LD_INT 31
80996: ST_TO_ADDR
80997: GO 81171
80999: LD_INT 26
81001: DOUBLE
81002: EQUAL
81003: IFTRUE 81007
81005: GO 81018
81007: POP
// bc_type := b_bunker ; 27 :
81008: LD_ADDR_OWVAR 42
81012: PUSH
81013: LD_INT 32
81015: ST_TO_ADDR
81016: GO 81171
81018: LD_INT 27
81020: DOUBLE
81021: EQUAL
81022: IFTRUE 81026
81024: GO 81037
81026: POP
// bc_type := b_turret ; 28 :
81027: LD_ADDR_OWVAR 42
81031: PUSH
81032: LD_INT 33
81034: ST_TO_ADDR
81035: GO 81171
81037: LD_INT 28
81039: DOUBLE
81040: EQUAL
81041: IFTRUE 81045
81043: GO 81056
81045: POP
// bc_type := b_armoury ; 29 :
81046: LD_ADDR_OWVAR 42
81050: PUSH
81051: LD_INT 4
81053: ST_TO_ADDR
81054: GO 81171
81056: LD_INT 29
81058: DOUBLE
81059: EQUAL
81060: IFTRUE 81064
81062: GO 81075
81064: POP
// bc_type := b_barracks ; 30 :
81065: LD_ADDR_OWVAR 42
81069: PUSH
81070: LD_INT 5
81072: ST_TO_ADDR
81073: GO 81171
81075: LD_INT 30
81077: DOUBLE
81078: EQUAL
81079: IFTRUE 81083
81081: GO 81094
81083: POP
// bc_type := b_solar_power ; 31 :
81084: LD_ADDR_OWVAR 42
81088: PUSH
81089: LD_INT 27
81091: ST_TO_ADDR
81092: GO 81171
81094: LD_INT 31
81096: DOUBLE
81097: EQUAL
81098: IFTRUE 81102
81100: GO 81113
81102: POP
// bc_type := b_oil_power ; 32 :
81103: LD_ADDR_OWVAR 42
81107: PUSH
81108: LD_INT 26
81110: ST_TO_ADDR
81111: GO 81171
81113: LD_INT 32
81115: DOUBLE
81116: EQUAL
81117: IFTRUE 81121
81119: GO 81132
81121: POP
// bc_type := b_siberite_power ; 33 :
81122: LD_ADDR_OWVAR 42
81126: PUSH
81127: LD_INT 28
81129: ST_TO_ADDR
81130: GO 81171
81132: LD_INT 33
81134: DOUBLE
81135: EQUAL
81136: IFTRUE 81140
81138: GO 81151
81140: POP
// bc_type := b_oil_mine ; 34 :
81141: LD_ADDR_OWVAR 42
81145: PUSH
81146: LD_INT 29
81148: ST_TO_ADDR
81149: GO 81171
81151: LD_INT 34
81153: DOUBLE
81154: EQUAL
81155: IFTRUE 81159
81157: GO 81170
81159: POP
// bc_type := b_siberite_mine ; end ;
81160: LD_ADDR_OWVAR 42
81164: PUSH
81165: LD_INT 30
81167: ST_TO_ADDR
81168: GO 81171
81170: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
81171: LD_ADDR_VAR 0 8
81175: PUSH
81176: LD_VAR 0 5
81180: PPUSH
81181: LD_VAR 0 6
81185: PPUSH
81186: LD_VAR 0 3
81190: PPUSH
81191: CALL_OW 47
81195: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
81196: LD_OWVAR 42
81200: PUSH
81201: LD_INT 32
81203: PUSH
81204: LD_INT 33
81206: PUSH
81207: EMPTY
81208: LIST
81209: LIST
81210: IN
81211: IFFALSE 81227
// PlaceWeaponTurret ( b , weapon ) ;
81213: LD_VAR 0 8
81217: PPUSH
81218: LD_VAR 0 4
81222: PPUSH
81223: CALL_OW 431
// end ;
81227: LD_VAR 0 7
81231: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
81232: LD_INT 0
81234: PPUSH
81235: PPUSH
81236: PPUSH
81237: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81238: LD_ADDR_VAR 0 4
81242: PUSH
81243: LD_INT 22
81245: PUSH
81246: LD_OWVAR 2
81250: PUSH
81251: EMPTY
81252: LIST
81253: LIST
81254: PUSH
81255: LD_INT 2
81257: PUSH
81258: LD_INT 30
81260: PUSH
81261: LD_INT 0
81263: PUSH
81264: EMPTY
81265: LIST
81266: LIST
81267: PUSH
81268: LD_INT 30
81270: PUSH
81271: LD_INT 1
81273: PUSH
81274: EMPTY
81275: LIST
81276: LIST
81277: PUSH
81278: EMPTY
81279: LIST
81280: LIST
81281: LIST
81282: PUSH
81283: EMPTY
81284: LIST
81285: LIST
81286: PPUSH
81287: CALL_OW 69
81291: ST_TO_ADDR
// if not tmp then
81292: LD_VAR 0 4
81296: NOT
81297: IFFALSE 81301
// exit ;
81299: GO 81360
// for i in tmp do
81301: LD_ADDR_VAR 0 2
81305: PUSH
81306: LD_VAR 0 4
81310: PUSH
81311: FOR_IN
81312: IFFALSE 81358
// for j = 1 to 3 do
81314: LD_ADDR_VAR 0 3
81318: PUSH
81319: DOUBLE
81320: LD_INT 1
81322: DEC
81323: ST_TO_ADDR
81324: LD_INT 3
81326: PUSH
81327: FOR_TO
81328: IFFALSE 81354
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
81330: LD_VAR 0 2
81334: PPUSH
81335: CALL_OW 274
81339: PPUSH
81340: LD_VAR 0 3
81344: PPUSH
81345: LD_INT 99999
81347: PPUSH
81348: CALL_OW 277
81352: GO 81327
81354: POP
81355: POP
81356: GO 81311
81358: POP
81359: POP
// end ;
81360: LD_VAR 0 1
81364: RET
// export function hHackSetLevel10 ; var i , j ; begin
81365: LD_INT 0
81367: PPUSH
81368: PPUSH
81369: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81370: LD_ADDR_VAR 0 2
81374: PUSH
81375: LD_INT 21
81377: PUSH
81378: LD_INT 1
81380: PUSH
81381: EMPTY
81382: LIST
81383: LIST
81384: PPUSH
81385: CALL_OW 69
81389: PUSH
81390: FOR_IN
81391: IFFALSE 81443
// if IsSelected ( i ) then
81393: LD_VAR 0 2
81397: PPUSH
81398: CALL_OW 306
81402: IFFALSE 81441
// begin for j := 1 to 4 do
81404: LD_ADDR_VAR 0 3
81408: PUSH
81409: DOUBLE
81410: LD_INT 1
81412: DEC
81413: ST_TO_ADDR
81414: LD_INT 4
81416: PUSH
81417: FOR_TO
81418: IFFALSE 81439
// SetSkill ( i , j , 10 ) ;
81420: LD_VAR 0 2
81424: PPUSH
81425: LD_VAR 0 3
81429: PPUSH
81430: LD_INT 10
81432: PPUSH
81433: CALL_OW 237
81437: GO 81417
81439: POP
81440: POP
// end ;
81441: GO 81390
81443: POP
81444: POP
// end ;
81445: LD_VAR 0 1
81449: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
81450: LD_INT 0
81452: PPUSH
81453: PPUSH
81454: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
81455: LD_ADDR_VAR 0 2
81459: PUSH
81460: LD_INT 22
81462: PUSH
81463: LD_OWVAR 2
81467: PUSH
81468: EMPTY
81469: LIST
81470: LIST
81471: PUSH
81472: LD_INT 21
81474: PUSH
81475: LD_INT 1
81477: PUSH
81478: EMPTY
81479: LIST
81480: LIST
81481: PUSH
81482: EMPTY
81483: LIST
81484: LIST
81485: PPUSH
81486: CALL_OW 69
81490: PUSH
81491: FOR_IN
81492: IFFALSE 81533
// begin for j := 1 to 4 do
81494: LD_ADDR_VAR 0 3
81498: PUSH
81499: DOUBLE
81500: LD_INT 1
81502: DEC
81503: ST_TO_ADDR
81504: LD_INT 4
81506: PUSH
81507: FOR_TO
81508: IFFALSE 81529
// SetSkill ( i , j , 10 ) ;
81510: LD_VAR 0 2
81514: PPUSH
81515: LD_VAR 0 3
81519: PPUSH
81520: LD_INT 10
81522: PPUSH
81523: CALL_OW 237
81527: GO 81507
81529: POP
81530: POP
// end ;
81531: GO 81491
81533: POP
81534: POP
// end ;
81535: LD_VAR 0 1
81539: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
81540: LD_INT 0
81542: PPUSH
// uc_side := your_side ;
81543: LD_ADDR_OWVAR 20
81547: PUSH
81548: LD_OWVAR 2
81552: ST_TO_ADDR
// uc_nation := nation ;
81553: LD_ADDR_OWVAR 21
81557: PUSH
81558: LD_VAR 0 1
81562: ST_TO_ADDR
// InitHc ;
81563: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
81567: LD_INT 0
81569: PPUSH
81570: LD_VAR 0 2
81574: PPUSH
81575: LD_VAR 0 3
81579: PPUSH
81580: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
81584: LD_VAR 0 4
81588: PPUSH
81589: LD_VAR 0 5
81593: PPUSH
81594: CALL_OW 428
81598: PUSH
81599: LD_INT 0
81601: EQUAL
81602: IFFALSE 81626
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
81604: CALL_OW 44
81608: PPUSH
81609: LD_VAR 0 4
81613: PPUSH
81614: LD_VAR 0 5
81618: PPUSH
81619: LD_INT 1
81621: PPUSH
81622: CALL_OW 48
// end ;
81626: LD_VAR 0 6
81630: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
81631: LD_INT 0
81633: PPUSH
81634: PPUSH
// uc_side := your_side ;
81635: LD_ADDR_OWVAR 20
81639: PUSH
81640: LD_OWVAR 2
81644: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
81645: LD_VAR 0 1
81649: PUSH
81650: LD_INT 1
81652: PUSH
81653: LD_INT 2
81655: PUSH
81656: LD_INT 3
81658: PUSH
81659: LD_INT 4
81661: PUSH
81662: LD_INT 5
81664: PUSH
81665: EMPTY
81666: LIST
81667: LIST
81668: LIST
81669: LIST
81670: LIST
81671: IN
81672: IFFALSE 81684
// uc_nation := nation_american else
81674: LD_ADDR_OWVAR 21
81678: PUSH
81679: LD_INT 1
81681: ST_TO_ADDR
81682: GO 81727
// if chassis in [ 11 , 12 , 13 , 14 ] then
81684: LD_VAR 0 1
81688: PUSH
81689: LD_INT 11
81691: PUSH
81692: LD_INT 12
81694: PUSH
81695: LD_INT 13
81697: PUSH
81698: LD_INT 14
81700: PUSH
81701: EMPTY
81702: LIST
81703: LIST
81704: LIST
81705: LIST
81706: IN
81707: IFFALSE 81719
// uc_nation := nation_arabian else
81709: LD_ADDR_OWVAR 21
81713: PUSH
81714: LD_INT 2
81716: ST_TO_ADDR
81717: GO 81727
// uc_nation := nation_russian ;
81719: LD_ADDR_OWVAR 21
81723: PUSH
81724: LD_INT 3
81726: ST_TO_ADDR
// vc_chassis := chassis ;
81727: LD_ADDR_OWVAR 37
81731: PUSH
81732: LD_VAR 0 1
81736: ST_TO_ADDR
// vc_engine := engine ;
81737: LD_ADDR_OWVAR 39
81741: PUSH
81742: LD_VAR 0 2
81746: ST_TO_ADDR
// vc_control := control ;
81747: LD_ADDR_OWVAR 38
81751: PUSH
81752: LD_VAR 0 3
81756: ST_TO_ADDR
// vc_weapon := weapon ;
81757: LD_ADDR_OWVAR 40
81761: PUSH
81762: LD_VAR 0 4
81766: ST_TO_ADDR
// un := CreateVehicle ;
81767: LD_ADDR_VAR 0 8
81771: PUSH
81772: CALL_OW 45
81776: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
81777: LD_VAR 0 8
81781: PPUSH
81782: LD_INT 0
81784: PPUSH
81785: LD_INT 5
81787: PPUSH
81788: CALL_OW 12
81792: PPUSH
81793: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
81797: LD_VAR 0 8
81801: PPUSH
81802: LD_VAR 0 5
81806: PPUSH
81807: LD_VAR 0 6
81811: PPUSH
81812: LD_INT 1
81814: PPUSH
81815: CALL_OW 48
// end ;
81819: LD_VAR 0 7
81823: RET
// export hInvincible ; every 1 do
81824: GO 81826
81826: DISABLE
// hInvincible := [ ] ;
81827: LD_ADDR_EXP 123
81831: PUSH
81832: EMPTY
81833: ST_TO_ADDR
81834: END
// every 10 do var i ;
81835: GO 81837
81837: DISABLE
81838: LD_INT 0
81840: PPUSH
// begin enable ;
81841: ENABLE
// if not hInvincible then
81842: LD_EXP 123
81846: NOT
81847: IFFALSE 81851
// exit ;
81849: GO 81895
// for i in hInvincible do
81851: LD_ADDR_VAR 0 1
81855: PUSH
81856: LD_EXP 123
81860: PUSH
81861: FOR_IN
81862: IFFALSE 81893
// if GetLives ( i ) < 1000 then
81864: LD_VAR 0 1
81868: PPUSH
81869: CALL_OW 256
81873: PUSH
81874: LD_INT 1000
81876: LESS
81877: IFFALSE 81891
// SetLives ( i , 1000 ) ;
81879: LD_VAR 0 1
81883: PPUSH
81884: LD_INT 1000
81886: PPUSH
81887: CALL_OW 234
81891: GO 81861
81893: POP
81894: POP
// end ;
81895: PPOPN 1
81897: END
// export function hHackInvincible ; var i ; begin
81898: LD_INT 0
81900: PPUSH
81901: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
81902: LD_ADDR_VAR 0 2
81906: PUSH
81907: LD_INT 2
81909: PUSH
81910: LD_INT 21
81912: PUSH
81913: LD_INT 1
81915: PUSH
81916: EMPTY
81917: LIST
81918: LIST
81919: PUSH
81920: LD_INT 21
81922: PUSH
81923: LD_INT 2
81925: PUSH
81926: EMPTY
81927: LIST
81928: LIST
81929: PUSH
81930: EMPTY
81931: LIST
81932: LIST
81933: LIST
81934: PPUSH
81935: CALL_OW 69
81939: PUSH
81940: FOR_IN
81941: IFFALSE 82002
// if IsSelected ( i ) then
81943: LD_VAR 0 2
81947: PPUSH
81948: CALL_OW 306
81952: IFFALSE 82000
// begin if i in hInvincible then
81954: LD_VAR 0 2
81958: PUSH
81959: LD_EXP 123
81963: IN
81964: IFFALSE 81984
// hInvincible := hInvincible diff i else
81966: LD_ADDR_EXP 123
81970: PUSH
81971: LD_EXP 123
81975: PUSH
81976: LD_VAR 0 2
81980: DIFF
81981: ST_TO_ADDR
81982: GO 82000
// hInvincible := hInvincible union i ;
81984: LD_ADDR_EXP 123
81988: PUSH
81989: LD_EXP 123
81993: PUSH
81994: LD_VAR 0 2
81998: UNION
81999: ST_TO_ADDR
// end ;
82000: GO 81940
82002: POP
82003: POP
// end ;
82004: LD_VAR 0 1
82008: RET
// export function hHackInvisible ; var i , j ; begin
82009: LD_INT 0
82011: PPUSH
82012: PPUSH
82013: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82014: LD_ADDR_VAR 0 2
82018: PUSH
82019: LD_INT 21
82021: PUSH
82022: LD_INT 1
82024: PUSH
82025: EMPTY
82026: LIST
82027: LIST
82028: PPUSH
82029: CALL_OW 69
82033: PUSH
82034: FOR_IN
82035: IFFALSE 82059
// if IsSelected ( i ) then
82037: LD_VAR 0 2
82041: PPUSH
82042: CALL_OW 306
82046: IFFALSE 82057
// ComForceInvisible ( i ) ;
82048: LD_VAR 0 2
82052: PPUSH
82053: CALL_OW 496
82057: GO 82034
82059: POP
82060: POP
// end ;
82061: LD_VAR 0 1
82065: RET
// export function hHackChangeYourSide ; begin
82066: LD_INT 0
82068: PPUSH
// if your_side = 8 then
82069: LD_OWVAR 2
82073: PUSH
82074: LD_INT 8
82076: EQUAL
82077: IFFALSE 82089
// your_side := 0 else
82079: LD_ADDR_OWVAR 2
82083: PUSH
82084: LD_INT 0
82086: ST_TO_ADDR
82087: GO 82103
// your_side := your_side + 1 ;
82089: LD_ADDR_OWVAR 2
82093: PUSH
82094: LD_OWVAR 2
82098: PUSH
82099: LD_INT 1
82101: PLUS
82102: ST_TO_ADDR
// end ;
82103: LD_VAR 0 1
82107: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82108: LD_INT 0
82110: PPUSH
82111: PPUSH
82112: PPUSH
// for i in all_units do
82113: LD_ADDR_VAR 0 2
82117: PUSH
82118: LD_OWVAR 3
82122: PUSH
82123: FOR_IN
82124: IFFALSE 82202
// if IsSelected ( i ) then
82126: LD_VAR 0 2
82130: PPUSH
82131: CALL_OW 306
82135: IFFALSE 82200
// begin j := GetSide ( i ) ;
82137: LD_ADDR_VAR 0 3
82141: PUSH
82142: LD_VAR 0 2
82146: PPUSH
82147: CALL_OW 255
82151: ST_TO_ADDR
// if j = 8 then
82152: LD_VAR 0 3
82156: PUSH
82157: LD_INT 8
82159: EQUAL
82160: IFFALSE 82172
// j := 0 else
82162: LD_ADDR_VAR 0 3
82166: PUSH
82167: LD_INT 0
82169: ST_TO_ADDR
82170: GO 82186
// j := j + 1 ;
82172: LD_ADDR_VAR 0 3
82176: PUSH
82177: LD_VAR 0 3
82181: PUSH
82182: LD_INT 1
82184: PLUS
82185: ST_TO_ADDR
// SetSide ( i , j ) ;
82186: LD_VAR 0 2
82190: PPUSH
82191: LD_VAR 0 3
82195: PPUSH
82196: CALL_OW 235
// end ;
82200: GO 82123
82202: POP
82203: POP
// end ;
82204: LD_VAR 0 1
82208: RET
// export function hHackFog ; begin
82209: LD_INT 0
82211: PPUSH
// FogOff ( true ) ;
82212: LD_INT 1
82214: PPUSH
82215: CALL_OW 344
// end ;
82219: LD_VAR 0 1
82223: RET
// export function hHackTeleport ( unit , x , y ) ; begin
82224: LD_INT 0
82226: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
82227: LD_VAR 0 1
82231: PPUSH
82232: LD_VAR 0 2
82236: PPUSH
82237: LD_VAR 0 3
82241: PPUSH
82242: LD_INT 1
82244: PPUSH
82245: LD_INT 1
82247: PPUSH
82248: CALL_OW 483
// CenterOnXY ( x , y ) ;
82252: LD_VAR 0 2
82256: PPUSH
82257: LD_VAR 0 3
82261: PPUSH
82262: CALL_OW 84
// end ;
82266: LD_VAR 0 4
82270: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
82271: LD_INT 0
82273: PPUSH
82274: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
82275: LD_VAR 0 1
82279: NOT
82280: PUSH
82281: LD_VAR 0 2
82285: PPUSH
82286: LD_VAR 0 3
82290: PPUSH
82291: CALL_OW 488
82295: NOT
82296: OR
82297: PUSH
82298: LD_VAR 0 1
82302: PPUSH
82303: CALL_OW 266
82307: PUSH
82308: LD_INT 3
82310: NONEQUAL
82311: PUSH
82312: LD_VAR 0 1
82316: PPUSH
82317: CALL_OW 247
82321: PUSH
82322: LD_INT 1
82324: EQUAL
82325: NOT
82326: AND
82327: OR
82328: IFFALSE 82332
// exit ;
82330: GO 82481
// if GetType ( factory ) = unit_human then
82332: LD_VAR 0 1
82336: PPUSH
82337: CALL_OW 247
82341: PUSH
82342: LD_INT 1
82344: EQUAL
82345: IFFALSE 82362
// factory := IsInUnit ( factory ) ;
82347: LD_ADDR_VAR 0 1
82351: PUSH
82352: LD_VAR 0 1
82356: PPUSH
82357: CALL_OW 310
82361: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
82362: LD_VAR 0 1
82366: PPUSH
82367: CALL_OW 266
82371: PUSH
82372: LD_INT 3
82374: NONEQUAL
82375: IFFALSE 82379
// exit ;
82377: GO 82481
// if HexInfo ( x , y ) = factory then
82379: LD_VAR 0 2
82383: PPUSH
82384: LD_VAR 0 3
82388: PPUSH
82389: CALL_OW 428
82393: PUSH
82394: LD_VAR 0 1
82398: EQUAL
82399: IFFALSE 82426
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
82401: LD_ADDR_EXP 124
82405: PUSH
82406: LD_EXP 124
82410: PPUSH
82411: LD_VAR 0 1
82415: PPUSH
82416: LD_INT 0
82418: PPUSH
82419: CALL_OW 1
82423: ST_TO_ADDR
82424: GO 82477
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
82426: LD_ADDR_EXP 124
82430: PUSH
82431: LD_EXP 124
82435: PPUSH
82436: LD_VAR 0 1
82440: PPUSH
82441: LD_VAR 0 1
82445: PPUSH
82446: CALL_OW 255
82450: PUSH
82451: LD_VAR 0 1
82455: PUSH
82456: LD_VAR 0 2
82460: PUSH
82461: LD_VAR 0 3
82465: PUSH
82466: EMPTY
82467: LIST
82468: LIST
82469: LIST
82470: LIST
82471: PPUSH
82472: CALL_OW 1
82476: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82477: CALL 82486 0 0
// end ;
82481: LD_VAR 0 4
82485: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
82486: LD_INT 0
82488: PPUSH
82489: PPUSH
82490: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
82491: LD_STRING resetFactoryWaypoint();
82493: PPUSH
82494: CALL_OW 559
// if factoryWaypoints then
82498: LD_EXP 124
82502: IFFALSE 82628
// begin list := PrepareArray ( factoryWaypoints ) ;
82504: LD_ADDR_VAR 0 3
82508: PUSH
82509: LD_EXP 124
82513: PPUSH
82514: CALL 67772 0 1
82518: ST_TO_ADDR
// for i := 1 to list do
82519: LD_ADDR_VAR 0 2
82523: PUSH
82524: DOUBLE
82525: LD_INT 1
82527: DEC
82528: ST_TO_ADDR
82529: LD_VAR 0 3
82533: PUSH
82534: FOR_TO
82535: IFFALSE 82626
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82537: LD_STRING setFactoryWaypointXY(
82539: PUSH
82540: LD_VAR 0 3
82544: PUSH
82545: LD_VAR 0 2
82549: ARRAY
82550: PUSH
82551: LD_INT 1
82553: ARRAY
82554: STR
82555: PUSH
82556: LD_STRING ,
82558: STR
82559: PUSH
82560: LD_VAR 0 3
82564: PUSH
82565: LD_VAR 0 2
82569: ARRAY
82570: PUSH
82571: LD_INT 2
82573: ARRAY
82574: STR
82575: PUSH
82576: LD_STRING ,
82578: STR
82579: PUSH
82580: LD_VAR 0 3
82584: PUSH
82585: LD_VAR 0 2
82589: ARRAY
82590: PUSH
82591: LD_INT 3
82593: ARRAY
82594: STR
82595: PUSH
82596: LD_STRING ,
82598: STR
82599: PUSH
82600: LD_VAR 0 3
82604: PUSH
82605: LD_VAR 0 2
82609: ARRAY
82610: PUSH
82611: LD_INT 4
82613: ARRAY
82614: STR
82615: PUSH
82616: LD_STRING )
82618: STR
82619: PPUSH
82620: CALL_OW 559
82624: GO 82534
82626: POP
82627: POP
// end ; end ;
82628: LD_VAR 0 1
82632: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
82633: LD_INT 0
82635: PPUSH
// if HexInfo ( x , y ) = warehouse then
82636: LD_VAR 0 2
82640: PPUSH
82641: LD_VAR 0 3
82645: PPUSH
82646: CALL_OW 428
82650: PUSH
82651: LD_VAR 0 1
82655: EQUAL
82656: IFFALSE 82683
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
82658: LD_ADDR_EXP 125
82662: PUSH
82663: LD_EXP 125
82667: PPUSH
82668: LD_VAR 0 1
82672: PPUSH
82673: LD_INT 0
82675: PPUSH
82676: CALL_OW 1
82680: ST_TO_ADDR
82681: GO 82734
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
82683: LD_ADDR_EXP 125
82687: PUSH
82688: LD_EXP 125
82692: PPUSH
82693: LD_VAR 0 1
82697: PPUSH
82698: LD_VAR 0 1
82702: PPUSH
82703: CALL_OW 255
82707: PUSH
82708: LD_VAR 0 1
82712: PUSH
82713: LD_VAR 0 2
82717: PUSH
82718: LD_VAR 0 3
82722: PUSH
82723: EMPTY
82724: LIST
82725: LIST
82726: LIST
82727: LIST
82728: PPUSH
82729: CALL_OW 1
82733: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
82734: CALL 82743 0 0
// end ;
82738: LD_VAR 0 4
82742: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
82743: LD_INT 0
82745: PPUSH
82746: PPUSH
82747: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
82748: LD_STRING resetWarehouseGatheringPoints();
82750: PPUSH
82751: CALL_OW 559
// if warehouseGatheringPoints then
82755: LD_EXP 125
82759: IFFALSE 82885
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
82761: LD_ADDR_VAR 0 3
82765: PUSH
82766: LD_EXP 125
82770: PPUSH
82771: CALL 67772 0 1
82775: ST_TO_ADDR
// for i := 1 to list do
82776: LD_ADDR_VAR 0 2
82780: PUSH
82781: DOUBLE
82782: LD_INT 1
82784: DEC
82785: ST_TO_ADDR
82786: LD_VAR 0 3
82790: PUSH
82791: FOR_TO
82792: IFFALSE 82883
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82794: LD_STRING setWarehouseGatheringPointXY(
82796: PUSH
82797: LD_VAR 0 3
82801: PUSH
82802: LD_VAR 0 2
82806: ARRAY
82807: PUSH
82808: LD_INT 1
82810: ARRAY
82811: STR
82812: PUSH
82813: LD_STRING ,
82815: STR
82816: PUSH
82817: LD_VAR 0 3
82821: PUSH
82822: LD_VAR 0 2
82826: ARRAY
82827: PUSH
82828: LD_INT 2
82830: ARRAY
82831: STR
82832: PUSH
82833: LD_STRING ,
82835: STR
82836: PUSH
82837: LD_VAR 0 3
82841: PUSH
82842: LD_VAR 0 2
82846: ARRAY
82847: PUSH
82848: LD_INT 3
82850: ARRAY
82851: STR
82852: PUSH
82853: LD_STRING ,
82855: STR
82856: PUSH
82857: LD_VAR 0 3
82861: PUSH
82862: LD_VAR 0 2
82866: ARRAY
82867: PUSH
82868: LD_INT 4
82870: ARRAY
82871: STR
82872: PUSH
82873: LD_STRING )
82875: STR
82876: PPUSH
82877: CALL_OW 559
82881: GO 82791
82883: POP
82884: POP
// end ; end ;
82885: LD_VAR 0 1
82889: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
82890: LD_EXP 125
82894: IFFALSE 83579
82896: GO 82898
82898: DISABLE
82899: LD_INT 0
82901: PPUSH
82902: PPUSH
82903: PPUSH
82904: PPUSH
82905: PPUSH
82906: PPUSH
82907: PPUSH
82908: PPUSH
82909: PPUSH
// begin enable ;
82910: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
82911: LD_ADDR_VAR 0 3
82915: PUSH
82916: LD_EXP 125
82920: PPUSH
82921: CALL 67772 0 1
82925: ST_TO_ADDR
// if not list then
82926: LD_VAR 0 3
82930: NOT
82931: IFFALSE 82935
// exit ;
82933: GO 83579
// for i := 1 to list do
82935: LD_ADDR_VAR 0 1
82939: PUSH
82940: DOUBLE
82941: LD_INT 1
82943: DEC
82944: ST_TO_ADDR
82945: LD_VAR 0 3
82949: PUSH
82950: FOR_TO
82951: IFFALSE 83577
// begin depot := list [ i ] [ 2 ] ;
82953: LD_ADDR_VAR 0 8
82957: PUSH
82958: LD_VAR 0 3
82962: PUSH
82963: LD_VAR 0 1
82967: ARRAY
82968: PUSH
82969: LD_INT 2
82971: ARRAY
82972: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
82973: LD_ADDR_VAR 0 5
82977: PUSH
82978: LD_VAR 0 3
82982: PUSH
82983: LD_VAR 0 1
82987: ARRAY
82988: PUSH
82989: LD_INT 1
82991: ARRAY
82992: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
82993: LD_VAR 0 8
82997: PPUSH
82998: CALL_OW 301
83002: PUSH
83003: LD_VAR 0 5
83007: PUSH
83008: LD_VAR 0 8
83012: PPUSH
83013: CALL_OW 255
83017: NONEQUAL
83018: OR
83019: IFFALSE 83048
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
83021: LD_ADDR_EXP 125
83025: PUSH
83026: LD_EXP 125
83030: PPUSH
83031: LD_VAR 0 8
83035: PPUSH
83036: LD_INT 0
83038: PPUSH
83039: CALL_OW 1
83043: ST_TO_ADDR
// exit ;
83044: POP
83045: POP
83046: GO 83579
// end ; x := list [ i ] [ 3 ] ;
83048: LD_ADDR_VAR 0 6
83052: PUSH
83053: LD_VAR 0 3
83057: PUSH
83058: LD_VAR 0 1
83062: ARRAY
83063: PUSH
83064: LD_INT 3
83066: ARRAY
83067: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
83068: LD_ADDR_VAR 0 7
83072: PUSH
83073: LD_VAR 0 3
83077: PUSH
83078: LD_VAR 0 1
83082: ARRAY
83083: PUSH
83084: LD_INT 4
83086: ARRAY
83087: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
83088: LD_ADDR_VAR 0 9
83092: PUSH
83093: LD_VAR 0 6
83097: PPUSH
83098: LD_VAR 0 7
83102: PPUSH
83103: LD_INT 16
83105: PPUSH
83106: CALL 66360 0 3
83110: ST_TO_ADDR
// if not cratesNearbyPoint then
83111: LD_VAR 0 9
83115: NOT
83116: IFFALSE 83122
// exit ;
83118: POP
83119: POP
83120: GO 83579
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
83122: LD_ADDR_VAR 0 4
83126: PUSH
83127: LD_INT 22
83129: PUSH
83130: LD_VAR 0 5
83134: PUSH
83135: EMPTY
83136: LIST
83137: LIST
83138: PUSH
83139: LD_INT 3
83141: PUSH
83142: LD_INT 60
83144: PUSH
83145: EMPTY
83146: LIST
83147: PUSH
83148: EMPTY
83149: LIST
83150: LIST
83151: PUSH
83152: LD_INT 91
83154: PUSH
83155: LD_VAR 0 8
83159: PUSH
83160: LD_INT 6
83162: PUSH
83163: EMPTY
83164: LIST
83165: LIST
83166: LIST
83167: PUSH
83168: LD_INT 2
83170: PUSH
83171: LD_INT 25
83173: PUSH
83174: LD_INT 2
83176: PUSH
83177: EMPTY
83178: LIST
83179: LIST
83180: PUSH
83181: LD_INT 25
83183: PUSH
83184: LD_INT 16
83186: PUSH
83187: EMPTY
83188: LIST
83189: LIST
83190: PUSH
83191: EMPTY
83192: LIST
83193: LIST
83194: LIST
83195: PUSH
83196: EMPTY
83197: LIST
83198: LIST
83199: LIST
83200: LIST
83201: PPUSH
83202: CALL_OW 69
83206: PUSH
83207: LD_VAR 0 8
83211: PPUSH
83212: CALL_OW 313
83216: PPUSH
83217: LD_INT 3
83219: PUSH
83220: LD_INT 60
83222: PUSH
83223: EMPTY
83224: LIST
83225: PUSH
83226: EMPTY
83227: LIST
83228: LIST
83229: PUSH
83230: LD_INT 2
83232: PUSH
83233: LD_INT 25
83235: PUSH
83236: LD_INT 2
83238: PUSH
83239: EMPTY
83240: LIST
83241: LIST
83242: PUSH
83243: LD_INT 25
83245: PUSH
83246: LD_INT 16
83248: PUSH
83249: EMPTY
83250: LIST
83251: LIST
83252: PUSH
83253: EMPTY
83254: LIST
83255: LIST
83256: LIST
83257: PUSH
83258: EMPTY
83259: LIST
83260: LIST
83261: PPUSH
83262: CALL_OW 72
83266: UNION
83267: ST_TO_ADDR
// if tmp then
83268: LD_VAR 0 4
83272: IFFALSE 83352
// begin tmp := ShrinkArray ( tmp , 3 ) ;
83274: LD_ADDR_VAR 0 4
83278: PUSH
83279: LD_VAR 0 4
83283: PPUSH
83284: LD_INT 3
83286: PPUSH
83287: CALL 64329 0 2
83291: ST_TO_ADDR
// for j in tmp do
83292: LD_ADDR_VAR 0 2
83296: PUSH
83297: LD_VAR 0 4
83301: PUSH
83302: FOR_IN
83303: IFFALSE 83346
// begin if IsInUnit ( j ) then
83305: LD_VAR 0 2
83309: PPUSH
83310: CALL_OW 310
83314: IFFALSE 83325
// ComExit ( j ) ;
83316: LD_VAR 0 2
83320: PPUSH
83321: CALL 64412 0 1
// AddComCollect ( j , x , y ) ;
83325: LD_VAR 0 2
83329: PPUSH
83330: LD_VAR 0 6
83334: PPUSH
83335: LD_VAR 0 7
83339: PPUSH
83340: CALL_OW 177
// end ;
83344: GO 83302
83346: POP
83347: POP
// exit ;
83348: POP
83349: POP
83350: GO 83579
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
83352: LD_ADDR_VAR 0 4
83356: PUSH
83357: LD_INT 22
83359: PUSH
83360: LD_VAR 0 5
83364: PUSH
83365: EMPTY
83366: LIST
83367: LIST
83368: PUSH
83369: LD_INT 91
83371: PUSH
83372: LD_VAR 0 8
83376: PUSH
83377: LD_INT 8
83379: PUSH
83380: EMPTY
83381: LIST
83382: LIST
83383: LIST
83384: PUSH
83385: LD_INT 2
83387: PUSH
83388: LD_INT 34
83390: PUSH
83391: LD_INT 12
83393: PUSH
83394: EMPTY
83395: LIST
83396: LIST
83397: PUSH
83398: LD_INT 34
83400: PUSH
83401: LD_INT 51
83403: PUSH
83404: EMPTY
83405: LIST
83406: LIST
83407: PUSH
83408: LD_INT 34
83410: PUSH
83411: LD_INT 32
83413: PUSH
83414: EMPTY
83415: LIST
83416: LIST
83417: PUSH
83418: LD_INT 34
83420: PUSH
83421: LD_INT 89
83423: PUSH
83424: EMPTY
83425: LIST
83426: LIST
83427: PUSH
83428: EMPTY
83429: LIST
83430: LIST
83431: LIST
83432: LIST
83433: LIST
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: LIST
83439: PPUSH
83440: CALL_OW 69
83444: ST_TO_ADDR
// if tmp then
83445: LD_VAR 0 4
83449: IFFALSE 83575
// begin for j in tmp do
83451: LD_ADDR_VAR 0 2
83455: PUSH
83456: LD_VAR 0 4
83460: PUSH
83461: FOR_IN
83462: IFFALSE 83573
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
83464: LD_VAR 0 2
83468: PPUSH
83469: CALL_OW 262
83473: PUSH
83474: LD_INT 3
83476: EQUAL
83477: PUSH
83478: LD_VAR 0 2
83482: PPUSH
83483: CALL_OW 261
83487: PUSH
83488: LD_INT 20
83490: GREATER
83491: OR
83492: PUSH
83493: LD_VAR 0 2
83497: PPUSH
83498: CALL_OW 314
83502: NOT
83503: AND
83504: PUSH
83505: LD_VAR 0 2
83509: PPUSH
83510: CALL_OW 263
83514: PUSH
83515: LD_INT 1
83517: NONEQUAL
83518: PUSH
83519: LD_VAR 0 2
83523: PPUSH
83524: CALL_OW 311
83528: OR
83529: AND
83530: IFFALSE 83571
// begin ComCollect ( j , x , y ) ;
83532: LD_VAR 0 2
83536: PPUSH
83537: LD_VAR 0 6
83541: PPUSH
83542: LD_VAR 0 7
83546: PPUSH
83547: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
83551: LD_VAR 0 2
83555: PPUSH
83556: LD_VAR 0 8
83560: PPUSH
83561: CALL_OW 172
// exit ;
83565: POP
83566: POP
83567: POP
83568: POP
83569: GO 83579
// end ;
83571: GO 83461
83573: POP
83574: POP
// end ; end ;
83575: GO 82950
83577: POP
83578: POP
// end ; end_of_file
83579: PPOPN 9
83581: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83582: LD_VAR 0 1
83586: PUSH
83587: LD_INT 200
83589: DOUBLE
83590: GREATEREQUAL
83591: IFFALSE 83599
83593: LD_INT 299
83595: DOUBLE
83596: LESSEQUAL
83597: IFTRUE 83601
83599: GO 83633
83601: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83602: LD_VAR 0 1
83606: PPUSH
83607: LD_VAR 0 2
83611: PPUSH
83612: LD_VAR 0 3
83616: PPUSH
83617: LD_VAR 0 4
83621: PPUSH
83622: LD_VAR 0 5
83626: PPUSH
83627: CALL 84121 0 5
83631: GO 83710
83633: LD_INT 300
83635: DOUBLE
83636: GREATEREQUAL
83637: IFFALSE 83645
83639: LD_INT 399
83641: DOUBLE
83642: LESSEQUAL
83643: IFTRUE 83647
83645: GO 83709
83647: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83648: LD_VAR 0 1
83652: PPUSH
83653: LD_VAR 0 2
83657: PPUSH
83658: LD_VAR 0 3
83662: PPUSH
83663: LD_VAR 0 4
83667: PPUSH
83668: LD_VAR 0 5
83672: PPUSH
83673: LD_VAR 0 6
83677: PPUSH
83678: LD_VAR 0 7
83682: PPUSH
83683: LD_VAR 0 8
83687: PPUSH
83688: LD_VAR 0 9
83692: PPUSH
83693: LD_VAR 0 10
83697: PPUSH
83698: LD_VAR 0 11
83702: PPUSH
83703: CALL 80291 0 11
83707: GO 83710
83709: POP
// end ;
83710: PPOPN 11
83712: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83713: LD_VAR 0 1
83717: PPUSH
83718: LD_VAR 0 2
83722: PPUSH
83723: LD_VAR 0 3
83727: PPUSH
83728: LD_VAR 0 4
83732: PPUSH
83733: LD_VAR 0 5
83737: PPUSH
83738: CALL 83857 0 5
// end ; end_of_file
83742: PPOPN 5
83744: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
83745: LD_INT 0
83747: PPUSH
83748: PPUSH
83749: PPUSH
83750: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
83751: LD_VAR 0 1
83755: PPUSH
83756: CALL_OW 264
83760: PUSH
83761: LD_INT 91
83763: EQUAL
83764: IFFALSE 83836
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
83766: LD_INT 68
83768: PPUSH
83769: LD_VAR 0 1
83773: PPUSH
83774: CALL_OW 255
83778: PPUSH
83779: CALL_OW 321
83783: PUSH
83784: LD_INT 2
83786: EQUAL
83787: IFFALSE 83799
// eff := 70 else
83789: LD_ADDR_VAR 0 4
83793: PUSH
83794: LD_INT 70
83796: ST_TO_ADDR
83797: GO 83807
// eff := 30 ;
83799: LD_ADDR_VAR 0 4
83803: PUSH
83804: LD_INT 30
83806: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
83807: LD_VAR 0 1
83811: PPUSH
83812: CALL_OW 250
83816: PPUSH
83817: LD_VAR 0 1
83821: PPUSH
83822: CALL_OW 251
83826: PPUSH
83827: LD_VAR 0 4
83831: PPUSH
83832: CALL_OW 495
// end ; end ;
83836: LD_VAR 0 2
83840: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
83841: LD_INT 0
83843: PPUSH
// end ;
83844: LD_VAR 0 4
83848: RET
// export function SOS_Command ( cmd ) ; begin
83849: LD_INT 0
83851: PPUSH
// end ;
83852: LD_VAR 0 2
83856: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
83857: LD_INT 0
83859: PPUSH
// end ;
83860: LD_VAR 0 6
83864: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
83865: LD_INT 0
83867: PPUSH
83868: PPUSH
// if not vehicle or not factory then
83869: LD_VAR 0 1
83873: NOT
83874: PUSH
83875: LD_VAR 0 2
83879: NOT
83880: OR
83881: IFFALSE 83885
// exit ;
83883: GO 84116
// if factoryWaypoints >= factory then
83885: LD_EXP 124
83889: PUSH
83890: LD_VAR 0 2
83894: GREATEREQUAL
83895: IFFALSE 84116
// if factoryWaypoints [ factory ] then
83897: LD_EXP 124
83901: PUSH
83902: LD_VAR 0 2
83906: ARRAY
83907: IFFALSE 84116
// begin if GetControl ( vehicle ) = control_manual then
83909: LD_VAR 0 1
83913: PPUSH
83914: CALL_OW 263
83918: PUSH
83919: LD_INT 1
83921: EQUAL
83922: IFFALSE 84003
// begin driver := IsDrivenBy ( vehicle ) ;
83924: LD_ADDR_VAR 0 4
83928: PUSH
83929: LD_VAR 0 1
83933: PPUSH
83934: CALL_OW 311
83938: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
83939: LD_VAR 0 4
83943: PPUSH
83944: LD_EXP 124
83948: PUSH
83949: LD_VAR 0 2
83953: ARRAY
83954: PUSH
83955: LD_INT 3
83957: ARRAY
83958: PPUSH
83959: LD_EXP 124
83963: PUSH
83964: LD_VAR 0 2
83968: ARRAY
83969: PUSH
83970: LD_INT 4
83972: ARRAY
83973: PPUSH
83974: CALL_OW 171
// AddComExitVehicle ( driver ) ;
83978: LD_VAR 0 4
83982: PPUSH
83983: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
83987: LD_VAR 0 4
83991: PPUSH
83992: LD_VAR 0 2
83996: PPUSH
83997: CALL_OW 180
// end else
84001: GO 84116
// if GetControl ( vehicle ) = control_remote then
84003: LD_VAR 0 1
84007: PPUSH
84008: CALL_OW 263
84012: PUSH
84013: LD_INT 2
84015: EQUAL
84016: IFFALSE 84077
// begin wait ( 0 0$2 ) ;
84018: LD_INT 70
84020: PPUSH
84021: CALL_OW 67
// if Connect ( vehicle ) then
84025: LD_VAR 0 1
84029: PPUSH
84030: CALL 34671 0 1
84034: IFFALSE 84075
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84036: LD_VAR 0 1
84040: PPUSH
84041: LD_EXP 124
84045: PUSH
84046: LD_VAR 0 2
84050: ARRAY
84051: PUSH
84052: LD_INT 3
84054: ARRAY
84055: PPUSH
84056: LD_EXP 124
84060: PUSH
84061: LD_VAR 0 2
84065: ARRAY
84066: PUSH
84067: LD_INT 4
84069: ARRAY
84070: PPUSH
84071: CALL_OW 171
// end else
84075: GO 84116
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84077: LD_VAR 0 1
84081: PPUSH
84082: LD_EXP 124
84086: PUSH
84087: LD_VAR 0 2
84091: ARRAY
84092: PUSH
84093: LD_INT 3
84095: ARRAY
84096: PPUSH
84097: LD_EXP 124
84101: PUSH
84102: LD_VAR 0 2
84106: ARRAY
84107: PUSH
84108: LD_INT 4
84110: ARRAY
84111: PPUSH
84112: CALL_OW 171
// end ; end ;
84116: LD_VAR 0 3
84120: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84121: LD_INT 0
84123: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
84124: LD_VAR 0 1
84128: PUSH
84129: LD_INT 250
84131: EQUAL
84132: PUSH
84133: LD_VAR 0 2
84137: PPUSH
84138: CALL_OW 264
84142: PUSH
84143: LD_INT 81
84145: EQUAL
84146: AND
84147: IFFALSE 84168
// MinerPlaceMine ( unit , x , y ) ;
84149: LD_VAR 0 2
84153: PPUSH
84154: LD_VAR 0 4
84158: PPUSH
84159: LD_VAR 0 5
84163: PPUSH
84164: CALL 86553 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
84168: LD_VAR 0 1
84172: PUSH
84173: LD_INT 251
84175: EQUAL
84176: PUSH
84177: LD_VAR 0 2
84181: PPUSH
84182: CALL_OW 264
84186: PUSH
84187: LD_INT 81
84189: EQUAL
84190: AND
84191: IFFALSE 84212
// MinerDetonateMine ( unit , x , y ) ;
84193: LD_VAR 0 2
84197: PPUSH
84198: LD_VAR 0 4
84202: PPUSH
84203: LD_VAR 0 5
84207: PPUSH
84208: CALL 86828 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
84212: LD_VAR 0 1
84216: PUSH
84217: LD_INT 252
84219: EQUAL
84220: PUSH
84221: LD_VAR 0 2
84225: PPUSH
84226: CALL_OW 264
84230: PUSH
84231: LD_INT 81
84233: EQUAL
84234: AND
84235: IFFALSE 84256
// MinerCreateMinefield ( unit , x , y ) ;
84237: LD_VAR 0 2
84241: PPUSH
84242: LD_VAR 0 4
84246: PPUSH
84247: LD_VAR 0 5
84251: PPUSH
84252: CALL 87245 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
84256: LD_VAR 0 1
84260: PUSH
84261: LD_INT 253
84263: EQUAL
84264: PUSH
84265: LD_VAR 0 2
84269: PPUSH
84270: CALL_OW 257
84274: PUSH
84275: LD_INT 5
84277: EQUAL
84278: AND
84279: IFFALSE 84300
// ComBinocular ( unit , x , y ) ;
84281: LD_VAR 0 2
84285: PPUSH
84286: LD_VAR 0 4
84290: PPUSH
84291: LD_VAR 0 5
84295: PPUSH
84296: CALL 87614 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
84300: LD_VAR 0 1
84304: PUSH
84305: LD_INT 254
84307: EQUAL
84308: PUSH
84309: LD_VAR 0 2
84313: PPUSH
84314: CALL_OW 264
84318: PUSH
84319: LD_INT 99
84321: EQUAL
84322: AND
84323: PUSH
84324: LD_VAR 0 3
84328: PPUSH
84329: CALL_OW 263
84333: PUSH
84334: LD_INT 3
84336: EQUAL
84337: AND
84338: IFFALSE 84354
// HackDestroyVehicle ( unit , selectedUnit ) ;
84340: LD_VAR 0 2
84344: PPUSH
84345: LD_VAR 0 3
84349: PPUSH
84350: CALL 85917 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
84354: LD_VAR 0 1
84358: PUSH
84359: LD_INT 255
84361: EQUAL
84362: PUSH
84363: LD_VAR 0 2
84367: PPUSH
84368: CALL_OW 264
84372: PUSH
84373: LD_INT 14
84375: PUSH
84376: LD_INT 53
84378: PUSH
84379: EMPTY
84380: LIST
84381: LIST
84382: IN
84383: AND
84384: PUSH
84385: LD_VAR 0 4
84389: PPUSH
84390: LD_VAR 0 5
84394: PPUSH
84395: CALL_OW 488
84399: AND
84400: IFFALSE 84424
// CutTreeXYR ( unit , x , y , 12 ) ;
84402: LD_VAR 0 2
84406: PPUSH
84407: LD_VAR 0 4
84411: PPUSH
84412: LD_VAR 0 5
84416: PPUSH
84417: LD_INT 12
84419: PPUSH
84420: CALL 84487 0 4
// if cmd = 256 then
84424: LD_VAR 0 1
84428: PUSH
84429: LD_INT 256
84431: EQUAL
84432: IFFALSE 84453
// SetFactoryWaypoint ( unit , x , y ) ;
84434: LD_VAR 0 2
84438: PPUSH
84439: LD_VAR 0 4
84443: PPUSH
84444: LD_VAR 0 5
84448: PPUSH
84449: CALL 82271 0 3
// if cmd = 257 then
84453: LD_VAR 0 1
84457: PUSH
84458: LD_INT 257
84460: EQUAL
84461: IFFALSE 84482
// SetWarehouseGatheringPoint ( unit , x , y ) ;
84463: LD_VAR 0 2
84467: PPUSH
84468: LD_VAR 0 4
84472: PPUSH
84473: LD_VAR 0 5
84477: PPUSH
84478: CALL 82633 0 3
// end ;
84482: LD_VAR 0 6
84486: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84487: LD_INT 0
84489: PPUSH
84490: PPUSH
84491: PPUSH
84492: PPUSH
84493: PPUSH
84494: PPUSH
84495: PPUSH
84496: PPUSH
84497: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84498: LD_VAR 0 1
84502: NOT
84503: PUSH
84504: LD_VAR 0 2
84508: PPUSH
84509: LD_VAR 0 3
84513: PPUSH
84514: CALL_OW 488
84518: NOT
84519: OR
84520: PUSH
84521: LD_VAR 0 4
84525: NOT
84526: OR
84527: IFFALSE 84531
// exit ;
84529: GO 84871
// list := [ ] ;
84531: LD_ADDR_VAR 0 13
84535: PUSH
84536: EMPTY
84537: ST_TO_ADDR
// if x - r < 0 then
84538: LD_VAR 0 2
84542: PUSH
84543: LD_VAR 0 4
84547: MINUS
84548: PUSH
84549: LD_INT 0
84551: LESS
84552: IFFALSE 84564
// min_x := 0 else
84554: LD_ADDR_VAR 0 7
84558: PUSH
84559: LD_INT 0
84561: ST_TO_ADDR
84562: GO 84580
// min_x := x - r ;
84564: LD_ADDR_VAR 0 7
84568: PUSH
84569: LD_VAR 0 2
84573: PUSH
84574: LD_VAR 0 4
84578: MINUS
84579: ST_TO_ADDR
// if y - r < 0 then
84580: LD_VAR 0 3
84584: PUSH
84585: LD_VAR 0 4
84589: MINUS
84590: PUSH
84591: LD_INT 0
84593: LESS
84594: IFFALSE 84606
// min_y := 0 else
84596: LD_ADDR_VAR 0 8
84600: PUSH
84601: LD_INT 0
84603: ST_TO_ADDR
84604: GO 84622
// min_y := y - r ;
84606: LD_ADDR_VAR 0 8
84610: PUSH
84611: LD_VAR 0 3
84615: PUSH
84616: LD_VAR 0 4
84620: MINUS
84621: ST_TO_ADDR
// max_x := x + r ;
84622: LD_ADDR_VAR 0 9
84626: PUSH
84627: LD_VAR 0 2
84631: PUSH
84632: LD_VAR 0 4
84636: PLUS
84637: ST_TO_ADDR
// max_y := y + r ;
84638: LD_ADDR_VAR 0 10
84642: PUSH
84643: LD_VAR 0 3
84647: PUSH
84648: LD_VAR 0 4
84652: PLUS
84653: ST_TO_ADDR
// for _x = min_x to max_x do
84654: LD_ADDR_VAR 0 11
84658: PUSH
84659: DOUBLE
84660: LD_VAR 0 7
84664: DEC
84665: ST_TO_ADDR
84666: LD_VAR 0 9
84670: PUSH
84671: FOR_TO
84672: IFFALSE 84789
// for _y = min_y to max_y do
84674: LD_ADDR_VAR 0 12
84678: PUSH
84679: DOUBLE
84680: LD_VAR 0 8
84684: DEC
84685: ST_TO_ADDR
84686: LD_VAR 0 10
84690: PUSH
84691: FOR_TO
84692: IFFALSE 84785
// begin if not ValidHex ( _x , _y ) then
84694: LD_VAR 0 11
84698: PPUSH
84699: LD_VAR 0 12
84703: PPUSH
84704: CALL_OW 488
84708: NOT
84709: IFFALSE 84713
// continue ;
84711: GO 84691
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
84713: LD_VAR 0 11
84717: PPUSH
84718: LD_VAR 0 12
84722: PPUSH
84723: CALL_OW 351
84727: PUSH
84728: LD_VAR 0 11
84732: PPUSH
84733: LD_VAR 0 12
84737: PPUSH
84738: CALL_OW 554
84742: AND
84743: IFFALSE 84783
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
84745: LD_ADDR_VAR 0 13
84749: PUSH
84750: LD_VAR 0 13
84754: PPUSH
84755: LD_VAR 0 13
84759: PUSH
84760: LD_INT 1
84762: PLUS
84763: PPUSH
84764: LD_VAR 0 11
84768: PUSH
84769: LD_VAR 0 12
84773: PUSH
84774: EMPTY
84775: LIST
84776: LIST
84777: PPUSH
84778: CALL_OW 2
84782: ST_TO_ADDR
// end ;
84783: GO 84691
84785: POP
84786: POP
84787: GO 84671
84789: POP
84790: POP
// if not list then
84791: LD_VAR 0 13
84795: NOT
84796: IFFALSE 84800
// exit ;
84798: GO 84871
// for i in list do
84800: LD_ADDR_VAR 0 6
84804: PUSH
84805: LD_VAR 0 13
84809: PUSH
84810: FOR_IN
84811: IFFALSE 84869
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
84813: LD_VAR 0 1
84817: PPUSH
84818: LD_STRING M
84820: PUSH
84821: LD_VAR 0 6
84825: PUSH
84826: LD_INT 1
84828: ARRAY
84829: PUSH
84830: LD_VAR 0 6
84834: PUSH
84835: LD_INT 2
84837: ARRAY
84838: PUSH
84839: LD_INT 0
84841: PUSH
84842: LD_INT 0
84844: PUSH
84845: LD_INT 0
84847: PUSH
84848: LD_INT 0
84850: PUSH
84851: EMPTY
84852: LIST
84853: LIST
84854: LIST
84855: LIST
84856: LIST
84857: LIST
84858: LIST
84859: PUSH
84860: EMPTY
84861: LIST
84862: PPUSH
84863: CALL_OW 447
84867: GO 84810
84869: POP
84870: POP
// end ;
84871: LD_VAR 0 5
84875: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
84876: LD_EXP 127
84880: NOT
84881: IFFALSE 84931
84883: GO 84885
84885: DISABLE
// begin initHack := true ;
84886: LD_ADDR_EXP 127
84890: PUSH
84891: LD_INT 1
84893: ST_TO_ADDR
// hackTanks := [ ] ;
84894: LD_ADDR_EXP 128
84898: PUSH
84899: EMPTY
84900: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
84901: LD_ADDR_EXP 129
84905: PUSH
84906: EMPTY
84907: ST_TO_ADDR
// hackLimit := 3 ;
84908: LD_ADDR_EXP 130
84912: PUSH
84913: LD_INT 3
84915: ST_TO_ADDR
// hackDist := 12 ;
84916: LD_ADDR_EXP 131
84920: PUSH
84921: LD_INT 12
84923: ST_TO_ADDR
// hackCounter := [ ] ;
84924: LD_ADDR_EXP 132
84928: PUSH
84929: EMPTY
84930: ST_TO_ADDR
// end ;
84931: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
84932: LD_EXP 127
84936: PUSH
84937: LD_INT 34
84939: PUSH
84940: LD_INT 99
84942: PUSH
84943: EMPTY
84944: LIST
84945: LIST
84946: PPUSH
84947: CALL_OW 69
84951: AND
84952: IFFALSE 85205
84954: GO 84956
84956: DISABLE
84957: LD_INT 0
84959: PPUSH
84960: PPUSH
// begin enable ;
84961: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
84962: LD_ADDR_VAR 0 1
84966: PUSH
84967: LD_INT 34
84969: PUSH
84970: LD_INT 99
84972: PUSH
84973: EMPTY
84974: LIST
84975: LIST
84976: PPUSH
84977: CALL_OW 69
84981: PUSH
84982: FOR_IN
84983: IFFALSE 85203
// begin if not i in hackTanks then
84985: LD_VAR 0 1
84989: PUSH
84990: LD_EXP 128
84994: IN
84995: NOT
84996: IFFALSE 85079
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
84998: LD_ADDR_EXP 128
85002: PUSH
85003: LD_EXP 128
85007: PPUSH
85008: LD_EXP 128
85012: PUSH
85013: LD_INT 1
85015: PLUS
85016: PPUSH
85017: LD_VAR 0 1
85021: PPUSH
85022: CALL_OW 1
85026: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
85027: LD_ADDR_EXP 129
85031: PUSH
85032: LD_EXP 129
85036: PPUSH
85037: LD_EXP 129
85041: PUSH
85042: LD_INT 1
85044: PLUS
85045: PPUSH
85046: EMPTY
85047: PPUSH
85048: CALL_OW 1
85052: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
85053: LD_ADDR_EXP 132
85057: PUSH
85058: LD_EXP 132
85062: PPUSH
85063: LD_EXP 132
85067: PUSH
85068: LD_INT 1
85070: PLUS
85071: PPUSH
85072: EMPTY
85073: PPUSH
85074: CALL_OW 1
85078: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85079: LD_VAR 0 1
85083: PPUSH
85084: CALL_OW 302
85088: NOT
85089: IFFALSE 85102
// begin HackUnlinkAll ( i ) ;
85091: LD_VAR 0 1
85095: PPUSH
85096: CALL 85208 0 1
// continue ;
85100: GO 84982
// end ; HackCheckCapturedStatus ( i ) ;
85102: LD_VAR 0 1
85106: PPUSH
85107: CALL 85651 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85111: LD_ADDR_VAR 0 2
85115: PUSH
85116: LD_INT 81
85118: PUSH
85119: LD_VAR 0 1
85123: PPUSH
85124: CALL_OW 255
85128: PUSH
85129: EMPTY
85130: LIST
85131: LIST
85132: PUSH
85133: LD_INT 33
85135: PUSH
85136: LD_INT 3
85138: PUSH
85139: EMPTY
85140: LIST
85141: LIST
85142: PUSH
85143: LD_INT 91
85145: PUSH
85146: LD_VAR 0 1
85150: PUSH
85151: LD_EXP 131
85155: PUSH
85156: EMPTY
85157: LIST
85158: LIST
85159: LIST
85160: PUSH
85161: LD_INT 50
85163: PUSH
85164: EMPTY
85165: LIST
85166: PUSH
85167: EMPTY
85168: LIST
85169: LIST
85170: LIST
85171: LIST
85172: PPUSH
85173: CALL_OW 69
85177: ST_TO_ADDR
// if not tmp then
85178: LD_VAR 0 2
85182: NOT
85183: IFFALSE 85187
// continue ;
85185: GO 84982
// HackLink ( i , tmp ) ;
85187: LD_VAR 0 1
85191: PPUSH
85192: LD_VAR 0 2
85196: PPUSH
85197: CALL 85344 0 2
// end ;
85201: GO 84982
85203: POP
85204: POP
// end ;
85205: PPOPN 2
85207: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
85208: LD_INT 0
85210: PPUSH
85211: PPUSH
85212: PPUSH
// if not hack in hackTanks then
85213: LD_VAR 0 1
85217: PUSH
85218: LD_EXP 128
85222: IN
85223: NOT
85224: IFFALSE 85228
// exit ;
85226: GO 85339
// index := GetElementIndex ( hackTanks , hack ) ;
85228: LD_ADDR_VAR 0 4
85232: PUSH
85233: LD_EXP 128
85237: PPUSH
85238: LD_VAR 0 1
85242: PPUSH
85243: CALL 31487 0 2
85247: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
85248: LD_EXP 129
85252: PUSH
85253: LD_VAR 0 4
85257: ARRAY
85258: IFFALSE 85339
// begin for i in hackTanksCaptured [ index ] do
85260: LD_ADDR_VAR 0 3
85264: PUSH
85265: LD_EXP 129
85269: PUSH
85270: LD_VAR 0 4
85274: ARRAY
85275: PUSH
85276: FOR_IN
85277: IFFALSE 85303
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
85279: LD_VAR 0 3
85283: PUSH
85284: LD_INT 1
85286: ARRAY
85287: PPUSH
85288: LD_VAR 0 3
85292: PUSH
85293: LD_INT 2
85295: ARRAY
85296: PPUSH
85297: CALL_OW 235
85301: GO 85276
85303: POP
85304: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
85305: LD_ADDR_EXP 129
85309: PUSH
85310: LD_EXP 129
85314: PPUSH
85315: LD_VAR 0 4
85319: PPUSH
85320: EMPTY
85321: PPUSH
85322: CALL_OW 1
85326: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
85327: LD_VAR 0 1
85331: PPUSH
85332: LD_INT 0
85334: PPUSH
85335: CALL_OW 505
// end ; end ;
85339: LD_VAR 0 2
85343: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
85344: LD_INT 0
85346: PPUSH
85347: PPUSH
85348: PPUSH
// if not hack in hackTanks or not vehicles then
85349: LD_VAR 0 1
85353: PUSH
85354: LD_EXP 128
85358: IN
85359: NOT
85360: PUSH
85361: LD_VAR 0 2
85365: NOT
85366: OR
85367: IFFALSE 85371
// exit ;
85369: GO 85646
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
85371: LD_ADDR_VAR 0 2
85375: PUSH
85376: LD_VAR 0 1
85380: PPUSH
85381: LD_VAR 0 2
85385: PPUSH
85386: LD_INT 1
85388: PPUSH
85389: LD_INT 1
85391: PPUSH
85392: CALL 32137 0 4
85396: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
85397: LD_ADDR_VAR 0 5
85401: PUSH
85402: LD_EXP 128
85406: PPUSH
85407: LD_VAR 0 1
85411: PPUSH
85412: CALL 31487 0 2
85416: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
85417: LD_EXP 129
85421: PUSH
85422: LD_VAR 0 5
85426: ARRAY
85427: PUSH
85428: LD_EXP 130
85432: LESS
85433: IFFALSE 85622
// begin for i := 1 to vehicles do
85435: LD_ADDR_VAR 0 4
85439: PUSH
85440: DOUBLE
85441: LD_INT 1
85443: DEC
85444: ST_TO_ADDR
85445: LD_VAR 0 2
85449: PUSH
85450: FOR_TO
85451: IFFALSE 85620
// begin if hackTanksCaptured [ index ] = hackLimit then
85453: LD_EXP 129
85457: PUSH
85458: LD_VAR 0 5
85462: ARRAY
85463: PUSH
85464: LD_EXP 130
85468: EQUAL
85469: IFFALSE 85473
// break ;
85471: GO 85620
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
85473: LD_ADDR_EXP 132
85477: PUSH
85478: LD_EXP 132
85482: PPUSH
85483: LD_VAR 0 5
85487: PPUSH
85488: LD_EXP 132
85492: PUSH
85493: LD_VAR 0 5
85497: ARRAY
85498: PUSH
85499: LD_INT 1
85501: PLUS
85502: PPUSH
85503: CALL_OW 1
85507: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
85508: LD_ADDR_EXP 129
85512: PUSH
85513: LD_EXP 129
85517: PPUSH
85518: LD_VAR 0 5
85522: PUSH
85523: LD_EXP 129
85527: PUSH
85528: LD_VAR 0 5
85532: ARRAY
85533: PUSH
85534: LD_INT 1
85536: PLUS
85537: PUSH
85538: EMPTY
85539: LIST
85540: LIST
85541: PPUSH
85542: LD_VAR 0 2
85546: PUSH
85547: LD_VAR 0 4
85551: ARRAY
85552: PUSH
85553: LD_VAR 0 2
85557: PUSH
85558: LD_VAR 0 4
85562: ARRAY
85563: PPUSH
85564: CALL_OW 255
85568: PUSH
85569: EMPTY
85570: LIST
85571: LIST
85572: PPUSH
85573: CALL 31702 0 3
85577: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
85578: LD_VAR 0 2
85582: PUSH
85583: LD_VAR 0 4
85587: ARRAY
85588: PPUSH
85589: LD_VAR 0 1
85593: PPUSH
85594: CALL_OW 255
85598: PPUSH
85599: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
85603: LD_VAR 0 2
85607: PUSH
85608: LD_VAR 0 4
85612: ARRAY
85613: PPUSH
85614: CALL_OW 141
// end ;
85618: GO 85450
85620: POP
85621: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85622: LD_VAR 0 1
85626: PPUSH
85627: LD_EXP 129
85631: PUSH
85632: LD_VAR 0 5
85636: ARRAY
85637: PUSH
85638: LD_INT 0
85640: PLUS
85641: PPUSH
85642: CALL_OW 505
// end ;
85646: LD_VAR 0 3
85650: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
85651: LD_INT 0
85653: PPUSH
85654: PPUSH
85655: PPUSH
85656: PPUSH
// if not hack in hackTanks then
85657: LD_VAR 0 1
85661: PUSH
85662: LD_EXP 128
85666: IN
85667: NOT
85668: IFFALSE 85672
// exit ;
85670: GO 85912
// index := GetElementIndex ( hackTanks , hack ) ;
85672: LD_ADDR_VAR 0 4
85676: PUSH
85677: LD_EXP 128
85681: PPUSH
85682: LD_VAR 0 1
85686: PPUSH
85687: CALL 31487 0 2
85691: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
85692: LD_ADDR_VAR 0 3
85696: PUSH
85697: DOUBLE
85698: LD_EXP 129
85702: PUSH
85703: LD_VAR 0 4
85707: ARRAY
85708: INC
85709: ST_TO_ADDR
85710: LD_INT 1
85712: PUSH
85713: FOR_DOWNTO
85714: IFFALSE 85886
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
85716: LD_ADDR_VAR 0 5
85720: PUSH
85721: LD_EXP 129
85725: PUSH
85726: LD_VAR 0 4
85730: ARRAY
85731: PUSH
85732: LD_VAR 0 3
85736: ARRAY
85737: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
85738: LD_VAR 0 5
85742: PUSH
85743: LD_INT 1
85745: ARRAY
85746: PPUSH
85747: CALL_OW 302
85751: NOT
85752: PUSH
85753: LD_VAR 0 5
85757: PUSH
85758: LD_INT 1
85760: ARRAY
85761: PPUSH
85762: CALL_OW 255
85766: PUSH
85767: LD_VAR 0 1
85771: PPUSH
85772: CALL_OW 255
85776: NONEQUAL
85777: OR
85778: IFFALSE 85884
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
85780: LD_VAR 0 5
85784: PUSH
85785: LD_INT 1
85787: ARRAY
85788: PPUSH
85789: CALL_OW 305
85793: PUSH
85794: LD_VAR 0 5
85798: PUSH
85799: LD_INT 1
85801: ARRAY
85802: PPUSH
85803: CALL_OW 255
85807: PUSH
85808: LD_VAR 0 1
85812: PPUSH
85813: CALL_OW 255
85817: EQUAL
85818: AND
85819: IFFALSE 85843
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
85821: LD_VAR 0 5
85825: PUSH
85826: LD_INT 1
85828: ARRAY
85829: PPUSH
85830: LD_VAR 0 5
85834: PUSH
85835: LD_INT 2
85837: ARRAY
85838: PPUSH
85839: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
85843: LD_ADDR_EXP 129
85847: PUSH
85848: LD_EXP 129
85852: PPUSH
85853: LD_VAR 0 4
85857: PPUSH
85858: LD_EXP 129
85862: PUSH
85863: LD_VAR 0 4
85867: ARRAY
85868: PPUSH
85869: LD_VAR 0 3
85873: PPUSH
85874: CALL_OW 3
85878: PPUSH
85879: CALL_OW 1
85883: ST_TO_ADDR
// end ; end ;
85884: GO 85713
85886: POP
85887: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85888: LD_VAR 0 1
85892: PPUSH
85893: LD_EXP 129
85897: PUSH
85898: LD_VAR 0 4
85902: ARRAY
85903: PUSH
85904: LD_INT 0
85906: PLUS
85907: PPUSH
85908: CALL_OW 505
// end ;
85912: LD_VAR 0 2
85916: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
85917: LD_INT 0
85919: PPUSH
85920: PPUSH
85921: PPUSH
85922: PPUSH
// if not hack in hackTanks then
85923: LD_VAR 0 1
85927: PUSH
85928: LD_EXP 128
85932: IN
85933: NOT
85934: IFFALSE 85938
// exit ;
85936: GO 86023
// index := GetElementIndex ( hackTanks , hack ) ;
85938: LD_ADDR_VAR 0 5
85942: PUSH
85943: LD_EXP 128
85947: PPUSH
85948: LD_VAR 0 1
85952: PPUSH
85953: CALL 31487 0 2
85957: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
85958: LD_ADDR_VAR 0 4
85962: PUSH
85963: DOUBLE
85964: LD_INT 1
85966: DEC
85967: ST_TO_ADDR
85968: LD_EXP 129
85972: PUSH
85973: LD_VAR 0 5
85977: ARRAY
85978: PUSH
85979: FOR_TO
85980: IFFALSE 86021
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
85982: LD_EXP 129
85986: PUSH
85987: LD_VAR 0 5
85991: ARRAY
85992: PUSH
85993: LD_VAR 0 4
85997: ARRAY
85998: PUSH
85999: LD_INT 1
86001: ARRAY
86002: PUSH
86003: LD_VAR 0 2
86007: EQUAL
86008: IFFALSE 86019
// KillUnit ( vehicle ) ;
86010: LD_VAR 0 2
86014: PPUSH
86015: CALL_OW 66
86019: GO 85979
86021: POP
86022: POP
// end ;
86023: LD_VAR 0 3
86027: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
86028: LD_EXP 133
86032: NOT
86033: IFFALSE 86068
86035: GO 86037
86037: DISABLE
// begin initMiner := true ;
86038: LD_ADDR_EXP 133
86042: PUSH
86043: LD_INT 1
86045: ST_TO_ADDR
// minersList := [ ] ;
86046: LD_ADDR_EXP 134
86050: PUSH
86051: EMPTY
86052: ST_TO_ADDR
// minerMinesList := [ ] ;
86053: LD_ADDR_EXP 135
86057: PUSH
86058: EMPTY
86059: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86060: LD_ADDR_EXP 136
86064: PUSH
86065: LD_INT 5
86067: ST_TO_ADDR
// end ;
86068: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86069: LD_EXP 133
86073: PUSH
86074: LD_INT 34
86076: PUSH
86077: LD_INT 81
86079: PUSH
86080: EMPTY
86081: LIST
86082: LIST
86083: PPUSH
86084: CALL_OW 69
86088: AND
86089: IFFALSE 86550
86091: GO 86093
86093: DISABLE
86094: LD_INT 0
86096: PPUSH
86097: PPUSH
86098: PPUSH
86099: PPUSH
// begin enable ;
86100: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86101: LD_ADDR_VAR 0 1
86105: PUSH
86106: LD_INT 34
86108: PUSH
86109: LD_INT 81
86111: PUSH
86112: EMPTY
86113: LIST
86114: LIST
86115: PPUSH
86116: CALL_OW 69
86120: PUSH
86121: FOR_IN
86122: IFFALSE 86194
// begin if not i in minersList then
86124: LD_VAR 0 1
86128: PUSH
86129: LD_EXP 134
86133: IN
86134: NOT
86135: IFFALSE 86192
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
86137: LD_ADDR_EXP 134
86141: PUSH
86142: LD_EXP 134
86146: PPUSH
86147: LD_EXP 134
86151: PUSH
86152: LD_INT 1
86154: PLUS
86155: PPUSH
86156: LD_VAR 0 1
86160: PPUSH
86161: CALL_OW 1
86165: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
86166: LD_ADDR_EXP 135
86170: PUSH
86171: LD_EXP 135
86175: PPUSH
86176: LD_EXP 135
86180: PUSH
86181: LD_INT 1
86183: PLUS
86184: PPUSH
86185: EMPTY
86186: PPUSH
86187: CALL_OW 1
86191: ST_TO_ADDR
// end end ;
86192: GO 86121
86194: POP
86195: POP
// for i := minerMinesList downto 1 do
86196: LD_ADDR_VAR 0 1
86200: PUSH
86201: DOUBLE
86202: LD_EXP 135
86206: INC
86207: ST_TO_ADDR
86208: LD_INT 1
86210: PUSH
86211: FOR_DOWNTO
86212: IFFALSE 86548
// begin if IsLive ( minersList [ i ] ) then
86214: LD_EXP 134
86218: PUSH
86219: LD_VAR 0 1
86223: ARRAY
86224: PPUSH
86225: CALL_OW 300
86229: IFFALSE 86257
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
86231: LD_EXP 134
86235: PUSH
86236: LD_VAR 0 1
86240: ARRAY
86241: PPUSH
86242: LD_EXP 135
86246: PUSH
86247: LD_VAR 0 1
86251: ARRAY
86252: PPUSH
86253: CALL_OW 505
// if not minerMinesList [ i ] then
86257: LD_EXP 135
86261: PUSH
86262: LD_VAR 0 1
86266: ARRAY
86267: NOT
86268: IFFALSE 86272
// continue ;
86270: GO 86211
// for j := minerMinesList [ i ] downto 1 do
86272: LD_ADDR_VAR 0 2
86276: PUSH
86277: DOUBLE
86278: LD_EXP 135
86282: PUSH
86283: LD_VAR 0 1
86287: ARRAY
86288: INC
86289: ST_TO_ADDR
86290: LD_INT 1
86292: PUSH
86293: FOR_DOWNTO
86294: IFFALSE 86544
// begin side := GetSide ( minersList [ i ] ) ;
86296: LD_ADDR_VAR 0 3
86300: PUSH
86301: LD_EXP 134
86305: PUSH
86306: LD_VAR 0 1
86310: ARRAY
86311: PPUSH
86312: CALL_OW 255
86316: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
86317: LD_ADDR_VAR 0 4
86321: PUSH
86322: LD_EXP 135
86326: PUSH
86327: LD_VAR 0 1
86331: ARRAY
86332: PUSH
86333: LD_VAR 0 2
86337: ARRAY
86338: PUSH
86339: LD_INT 1
86341: ARRAY
86342: PPUSH
86343: LD_EXP 135
86347: PUSH
86348: LD_VAR 0 1
86352: ARRAY
86353: PUSH
86354: LD_VAR 0 2
86358: ARRAY
86359: PUSH
86360: LD_INT 2
86362: ARRAY
86363: PPUSH
86364: CALL_OW 428
86368: ST_TO_ADDR
// if not tmp then
86369: LD_VAR 0 4
86373: NOT
86374: IFFALSE 86378
// continue ;
86376: GO 86293
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
86378: LD_VAR 0 4
86382: PUSH
86383: LD_INT 81
86385: PUSH
86386: LD_VAR 0 3
86390: PUSH
86391: EMPTY
86392: LIST
86393: LIST
86394: PPUSH
86395: CALL_OW 69
86399: IN
86400: PUSH
86401: LD_EXP 135
86405: PUSH
86406: LD_VAR 0 1
86410: ARRAY
86411: PUSH
86412: LD_VAR 0 2
86416: ARRAY
86417: PUSH
86418: LD_INT 1
86420: ARRAY
86421: PPUSH
86422: LD_EXP 135
86426: PUSH
86427: LD_VAR 0 1
86431: ARRAY
86432: PUSH
86433: LD_VAR 0 2
86437: ARRAY
86438: PUSH
86439: LD_INT 2
86441: ARRAY
86442: PPUSH
86443: CALL_OW 458
86447: AND
86448: IFFALSE 86542
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
86450: LD_EXP 135
86454: PUSH
86455: LD_VAR 0 1
86459: ARRAY
86460: PUSH
86461: LD_VAR 0 2
86465: ARRAY
86466: PUSH
86467: LD_INT 1
86469: ARRAY
86470: PPUSH
86471: LD_EXP 135
86475: PUSH
86476: LD_VAR 0 1
86480: ARRAY
86481: PUSH
86482: LD_VAR 0 2
86486: ARRAY
86487: PUSH
86488: LD_INT 2
86490: ARRAY
86491: PPUSH
86492: LD_VAR 0 3
86496: PPUSH
86497: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
86501: LD_ADDR_EXP 135
86505: PUSH
86506: LD_EXP 135
86510: PPUSH
86511: LD_VAR 0 1
86515: PPUSH
86516: LD_EXP 135
86520: PUSH
86521: LD_VAR 0 1
86525: ARRAY
86526: PPUSH
86527: LD_VAR 0 2
86531: PPUSH
86532: CALL_OW 3
86536: PPUSH
86537: CALL_OW 1
86541: ST_TO_ADDR
// end ; end ;
86542: GO 86293
86544: POP
86545: POP
// end ;
86546: GO 86211
86548: POP
86549: POP
// end ;
86550: PPOPN 4
86552: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
86553: LD_INT 0
86555: PPUSH
86556: PPUSH
// result := false ;
86557: LD_ADDR_VAR 0 4
86561: PUSH
86562: LD_INT 0
86564: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
86565: LD_VAR 0 1
86569: PPUSH
86570: CALL_OW 264
86574: PUSH
86575: LD_INT 81
86577: EQUAL
86578: NOT
86579: IFFALSE 86583
// exit ;
86581: GO 86823
// index := GetElementIndex ( minersList , unit ) ;
86583: LD_ADDR_VAR 0 5
86587: PUSH
86588: LD_EXP 134
86592: PPUSH
86593: LD_VAR 0 1
86597: PPUSH
86598: CALL 31487 0 2
86602: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
86603: LD_EXP 135
86607: PUSH
86608: LD_VAR 0 5
86612: ARRAY
86613: PUSH
86614: LD_EXP 136
86618: GREATEREQUAL
86619: IFFALSE 86623
// exit ;
86621: GO 86823
// ComMoveXY ( unit , x , y ) ;
86623: LD_VAR 0 1
86627: PPUSH
86628: LD_VAR 0 2
86632: PPUSH
86633: LD_VAR 0 3
86637: PPUSH
86638: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86642: LD_INT 35
86644: PPUSH
86645: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
86649: LD_VAR 0 1
86653: PPUSH
86654: LD_VAR 0 2
86658: PPUSH
86659: LD_VAR 0 3
86663: PPUSH
86664: CALL 62823 0 3
86668: NOT
86669: PUSH
86670: LD_VAR 0 1
86674: PPUSH
86675: CALL_OW 314
86679: AND
86680: IFFALSE 86684
// exit ;
86682: GO 86823
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
86684: LD_VAR 0 2
86688: PPUSH
86689: LD_VAR 0 3
86693: PPUSH
86694: CALL_OW 428
86698: PUSH
86699: LD_VAR 0 1
86703: EQUAL
86704: PUSH
86705: LD_VAR 0 1
86709: PPUSH
86710: CALL_OW 314
86714: NOT
86715: AND
86716: IFFALSE 86642
// PlaySoundXY ( x , y , PlantMine ) ;
86718: LD_VAR 0 2
86722: PPUSH
86723: LD_VAR 0 3
86727: PPUSH
86728: LD_STRING PlantMine
86730: PPUSH
86731: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
86735: LD_VAR 0 2
86739: PPUSH
86740: LD_VAR 0 3
86744: PPUSH
86745: LD_VAR 0 1
86749: PPUSH
86750: CALL_OW 255
86754: PPUSH
86755: LD_INT 0
86757: PPUSH
86758: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
86762: LD_ADDR_EXP 135
86766: PUSH
86767: LD_EXP 135
86771: PPUSH
86772: LD_VAR 0 5
86776: PUSH
86777: LD_EXP 135
86781: PUSH
86782: LD_VAR 0 5
86786: ARRAY
86787: PUSH
86788: LD_INT 1
86790: PLUS
86791: PUSH
86792: EMPTY
86793: LIST
86794: LIST
86795: PPUSH
86796: LD_VAR 0 2
86800: PUSH
86801: LD_VAR 0 3
86805: PUSH
86806: EMPTY
86807: LIST
86808: LIST
86809: PPUSH
86810: CALL 31702 0 3
86814: ST_TO_ADDR
// result := true ;
86815: LD_ADDR_VAR 0 4
86819: PUSH
86820: LD_INT 1
86822: ST_TO_ADDR
// end ;
86823: LD_VAR 0 4
86827: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
86828: LD_INT 0
86830: PPUSH
86831: PPUSH
86832: PPUSH
// if not unit in minersList then
86833: LD_VAR 0 1
86837: PUSH
86838: LD_EXP 134
86842: IN
86843: NOT
86844: IFFALSE 86848
// exit ;
86846: GO 87240
// index := GetElementIndex ( minersList , unit ) ;
86848: LD_ADDR_VAR 0 6
86852: PUSH
86853: LD_EXP 134
86857: PPUSH
86858: LD_VAR 0 1
86862: PPUSH
86863: CALL 31487 0 2
86867: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
86868: LD_ADDR_VAR 0 5
86872: PUSH
86873: DOUBLE
86874: LD_EXP 135
86878: PUSH
86879: LD_VAR 0 6
86883: ARRAY
86884: INC
86885: ST_TO_ADDR
86886: LD_INT 1
86888: PUSH
86889: FOR_DOWNTO
86890: IFFALSE 87051
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
86892: LD_EXP 135
86896: PUSH
86897: LD_VAR 0 6
86901: ARRAY
86902: PUSH
86903: LD_VAR 0 5
86907: ARRAY
86908: PUSH
86909: LD_INT 1
86911: ARRAY
86912: PUSH
86913: LD_VAR 0 2
86917: EQUAL
86918: PUSH
86919: LD_EXP 135
86923: PUSH
86924: LD_VAR 0 6
86928: ARRAY
86929: PUSH
86930: LD_VAR 0 5
86934: ARRAY
86935: PUSH
86936: LD_INT 2
86938: ARRAY
86939: PUSH
86940: LD_VAR 0 3
86944: EQUAL
86945: AND
86946: IFFALSE 87049
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86948: LD_EXP 135
86952: PUSH
86953: LD_VAR 0 6
86957: ARRAY
86958: PUSH
86959: LD_VAR 0 5
86963: ARRAY
86964: PUSH
86965: LD_INT 1
86967: ARRAY
86968: PPUSH
86969: LD_EXP 135
86973: PUSH
86974: LD_VAR 0 6
86978: ARRAY
86979: PUSH
86980: LD_VAR 0 5
86984: ARRAY
86985: PUSH
86986: LD_INT 2
86988: ARRAY
86989: PPUSH
86990: LD_VAR 0 1
86994: PPUSH
86995: CALL_OW 255
86999: PPUSH
87000: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87004: LD_ADDR_EXP 135
87008: PUSH
87009: LD_EXP 135
87013: PPUSH
87014: LD_VAR 0 6
87018: PPUSH
87019: LD_EXP 135
87023: PUSH
87024: LD_VAR 0 6
87028: ARRAY
87029: PPUSH
87030: LD_VAR 0 5
87034: PPUSH
87035: CALL_OW 3
87039: PPUSH
87040: CALL_OW 1
87044: ST_TO_ADDR
// exit ;
87045: POP
87046: POP
87047: GO 87240
// end ; end ;
87049: GO 86889
87051: POP
87052: POP
// for i := minerMinesList [ index ] downto 1 do
87053: LD_ADDR_VAR 0 5
87057: PUSH
87058: DOUBLE
87059: LD_EXP 135
87063: PUSH
87064: LD_VAR 0 6
87068: ARRAY
87069: INC
87070: ST_TO_ADDR
87071: LD_INT 1
87073: PUSH
87074: FOR_DOWNTO
87075: IFFALSE 87238
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87077: LD_EXP 135
87081: PUSH
87082: LD_VAR 0 6
87086: ARRAY
87087: PUSH
87088: LD_VAR 0 5
87092: ARRAY
87093: PUSH
87094: LD_INT 1
87096: ARRAY
87097: PPUSH
87098: LD_EXP 135
87102: PUSH
87103: LD_VAR 0 6
87107: ARRAY
87108: PUSH
87109: LD_VAR 0 5
87113: ARRAY
87114: PUSH
87115: LD_INT 2
87117: ARRAY
87118: PPUSH
87119: LD_VAR 0 2
87123: PPUSH
87124: LD_VAR 0 3
87128: PPUSH
87129: CALL_OW 298
87133: PUSH
87134: LD_INT 6
87136: LESS
87137: IFFALSE 87236
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87139: LD_EXP 135
87143: PUSH
87144: LD_VAR 0 6
87148: ARRAY
87149: PUSH
87150: LD_VAR 0 5
87154: ARRAY
87155: PUSH
87156: LD_INT 1
87158: ARRAY
87159: PPUSH
87160: LD_EXP 135
87164: PUSH
87165: LD_VAR 0 6
87169: ARRAY
87170: PUSH
87171: LD_VAR 0 5
87175: ARRAY
87176: PUSH
87177: LD_INT 2
87179: ARRAY
87180: PPUSH
87181: LD_VAR 0 1
87185: PPUSH
87186: CALL_OW 255
87190: PPUSH
87191: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87195: LD_ADDR_EXP 135
87199: PUSH
87200: LD_EXP 135
87204: PPUSH
87205: LD_VAR 0 6
87209: PPUSH
87210: LD_EXP 135
87214: PUSH
87215: LD_VAR 0 6
87219: ARRAY
87220: PPUSH
87221: LD_VAR 0 5
87225: PPUSH
87226: CALL_OW 3
87230: PPUSH
87231: CALL_OW 1
87235: ST_TO_ADDR
// end ; end ;
87236: GO 87074
87238: POP
87239: POP
// end ;
87240: LD_VAR 0 4
87244: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
87245: LD_INT 0
87247: PPUSH
87248: PPUSH
87249: PPUSH
87250: PPUSH
87251: PPUSH
87252: PPUSH
87253: PPUSH
87254: PPUSH
87255: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
87256: LD_VAR 0 1
87260: PPUSH
87261: CALL_OW 264
87265: PUSH
87266: LD_INT 81
87268: EQUAL
87269: NOT
87270: PUSH
87271: LD_VAR 0 1
87275: PUSH
87276: LD_EXP 134
87280: IN
87281: NOT
87282: OR
87283: IFFALSE 87287
// exit ;
87285: GO 87609
// index := GetElementIndex ( minersList , unit ) ;
87287: LD_ADDR_VAR 0 6
87291: PUSH
87292: LD_EXP 134
87296: PPUSH
87297: LD_VAR 0 1
87301: PPUSH
87302: CALL 31487 0 2
87306: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
87307: LD_ADDR_VAR 0 8
87311: PUSH
87312: LD_EXP 136
87316: PUSH
87317: LD_EXP 135
87321: PUSH
87322: LD_VAR 0 6
87326: ARRAY
87327: MINUS
87328: ST_TO_ADDR
// if not minesFreeAmount then
87329: LD_VAR 0 8
87333: NOT
87334: IFFALSE 87338
// exit ;
87336: GO 87609
// tmp := [ ] ;
87338: LD_ADDR_VAR 0 7
87342: PUSH
87343: EMPTY
87344: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
87345: LD_ADDR_VAR 0 5
87349: PUSH
87350: DOUBLE
87351: LD_INT 1
87353: DEC
87354: ST_TO_ADDR
87355: LD_VAR 0 8
87359: PUSH
87360: FOR_TO
87361: IFFALSE 87556
// begin _d := rand ( 0 , 5 ) ;
87363: LD_ADDR_VAR 0 11
87367: PUSH
87368: LD_INT 0
87370: PPUSH
87371: LD_INT 5
87373: PPUSH
87374: CALL_OW 12
87378: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
87379: LD_ADDR_VAR 0 12
87383: PUSH
87384: LD_INT 2
87386: PPUSH
87387: LD_INT 6
87389: PPUSH
87390: CALL_OW 12
87394: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
87395: LD_ADDR_VAR 0 9
87399: PUSH
87400: LD_VAR 0 2
87404: PPUSH
87405: LD_VAR 0 11
87409: PPUSH
87410: LD_VAR 0 12
87414: PPUSH
87415: CALL_OW 272
87419: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
87420: LD_ADDR_VAR 0 10
87424: PUSH
87425: LD_VAR 0 3
87429: PPUSH
87430: LD_VAR 0 11
87434: PPUSH
87435: LD_VAR 0 12
87439: PPUSH
87440: CALL_OW 273
87444: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
87445: LD_VAR 0 9
87449: PPUSH
87450: LD_VAR 0 10
87454: PPUSH
87455: CALL_OW 488
87459: PUSH
87460: LD_VAR 0 9
87464: PUSH
87465: LD_VAR 0 10
87469: PUSH
87470: EMPTY
87471: LIST
87472: LIST
87473: PUSH
87474: LD_VAR 0 7
87478: IN
87479: NOT
87480: AND
87481: PUSH
87482: LD_VAR 0 9
87486: PPUSH
87487: LD_VAR 0 10
87491: PPUSH
87492: CALL_OW 458
87496: NOT
87497: AND
87498: IFFALSE 87540
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
87500: LD_ADDR_VAR 0 7
87504: PUSH
87505: LD_VAR 0 7
87509: PPUSH
87510: LD_VAR 0 7
87514: PUSH
87515: LD_INT 1
87517: PLUS
87518: PPUSH
87519: LD_VAR 0 9
87523: PUSH
87524: LD_VAR 0 10
87528: PUSH
87529: EMPTY
87530: LIST
87531: LIST
87532: PPUSH
87533: CALL_OW 1
87537: ST_TO_ADDR
87538: GO 87554
// i := i - 1 ;
87540: LD_ADDR_VAR 0 5
87544: PUSH
87545: LD_VAR 0 5
87549: PUSH
87550: LD_INT 1
87552: MINUS
87553: ST_TO_ADDR
// end ;
87554: GO 87360
87556: POP
87557: POP
// for i in tmp do
87558: LD_ADDR_VAR 0 5
87562: PUSH
87563: LD_VAR 0 7
87567: PUSH
87568: FOR_IN
87569: IFFALSE 87607
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
87571: LD_VAR 0 1
87575: PPUSH
87576: LD_VAR 0 5
87580: PUSH
87581: LD_INT 1
87583: ARRAY
87584: PPUSH
87585: LD_VAR 0 5
87589: PUSH
87590: LD_INT 2
87592: ARRAY
87593: PPUSH
87594: CALL 86553 0 3
87598: NOT
87599: IFFALSE 87605
// exit ;
87601: POP
87602: POP
87603: GO 87609
87605: GO 87568
87607: POP
87608: POP
// end ;
87609: LD_VAR 0 4
87613: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
87614: LD_INT 0
87616: PPUSH
87617: PPUSH
87618: PPUSH
87619: PPUSH
87620: PPUSH
87621: PPUSH
87622: PPUSH
// if not GetClass ( unit ) = class_sniper then
87623: LD_VAR 0 1
87627: PPUSH
87628: CALL_OW 257
87632: PUSH
87633: LD_INT 5
87635: EQUAL
87636: NOT
87637: IFFALSE 87641
// exit ;
87639: GO 88029
// dist := 8 ;
87641: LD_ADDR_VAR 0 5
87645: PUSH
87646: LD_INT 8
87648: ST_TO_ADDR
// viewRange := 12 ;
87649: LD_ADDR_VAR 0 7
87653: PUSH
87654: LD_INT 12
87656: ST_TO_ADDR
// side := GetSide ( unit ) ;
87657: LD_ADDR_VAR 0 6
87661: PUSH
87662: LD_VAR 0 1
87666: PPUSH
87667: CALL_OW 255
87671: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
87672: LD_INT 61
87674: PPUSH
87675: LD_VAR 0 6
87679: PPUSH
87680: CALL_OW 321
87684: PUSH
87685: LD_INT 2
87687: EQUAL
87688: IFFALSE 87698
// viewRange := 16 ;
87690: LD_ADDR_VAR 0 7
87694: PUSH
87695: LD_INT 16
87697: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
87698: LD_VAR 0 1
87702: PPUSH
87703: LD_VAR 0 2
87707: PPUSH
87708: LD_VAR 0 3
87712: PPUSH
87713: CALL_OW 297
87717: PUSH
87718: LD_VAR 0 5
87722: GREATER
87723: IFFALSE 87802
// begin ComMoveXY ( unit , x , y ) ;
87725: LD_VAR 0 1
87729: PPUSH
87730: LD_VAR 0 2
87734: PPUSH
87735: LD_VAR 0 3
87739: PPUSH
87740: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87744: LD_INT 35
87746: PPUSH
87747: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
87751: LD_VAR 0 1
87755: PPUSH
87756: LD_VAR 0 2
87760: PPUSH
87761: LD_VAR 0 3
87765: PPUSH
87766: CALL 62823 0 3
87770: NOT
87771: IFFALSE 87775
// exit ;
87773: GO 88029
// until GetDistUnitXY ( unit , x , y ) < dist ;
87775: LD_VAR 0 1
87779: PPUSH
87780: LD_VAR 0 2
87784: PPUSH
87785: LD_VAR 0 3
87789: PPUSH
87790: CALL_OW 297
87794: PUSH
87795: LD_VAR 0 5
87799: LESS
87800: IFFALSE 87744
// end ; ComTurnXY ( unit , x , y ) ;
87802: LD_VAR 0 1
87806: PPUSH
87807: LD_VAR 0 2
87811: PPUSH
87812: LD_VAR 0 3
87816: PPUSH
87817: CALL_OW 118
// wait ( 5 ) ;
87821: LD_INT 5
87823: PPUSH
87824: CALL_OW 67
// _d := GetDir ( unit ) ;
87828: LD_ADDR_VAR 0 10
87832: PUSH
87833: LD_VAR 0 1
87837: PPUSH
87838: CALL_OW 254
87842: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
87843: LD_ADDR_VAR 0 8
87847: PUSH
87848: LD_VAR 0 1
87852: PPUSH
87853: CALL_OW 250
87857: PPUSH
87858: LD_VAR 0 10
87862: PPUSH
87863: LD_VAR 0 5
87867: PPUSH
87868: CALL_OW 272
87872: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
87873: LD_ADDR_VAR 0 9
87877: PUSH
87878: LD_VAR 0 1
87882: PPUSH
87883: CALL_OW 251
87887: PPUSH
87888: LD_VAR 0 10
87892: PPUSH
87893: LD_VAR 0 5
87897: PPUSH
87898: CALL_OW 273
87902: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87903: LD_VAR 0 8
87907: PPUSH
87908: LD_VAR 0 9
87912: PPUSH
87913: CALL_OW 488
87917: NOT
87918: IFFALSE 87922
// exit ;
87920: GO 88029
// ComAnimCustom ( unit , 1 ) ;
87922: LD_VAR 0 1
87926: PPUSH
87927: LD_INT 1
87929: PPUSH
87930: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
87934: LD_VAR 0 8
87938: PPUSH
87939: LD_VAR 0 9
87943: PPUSH
87944: LD_VAR 0 6
87948: PPUSH
87949: LD_VAR 0 7
87953: PPUSH
87954: CALL_OW 330
// repeat wait ( 1 ) ;
87958: LD_INT 1
87960: PPUSH
87961: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
87965: LD_VAR 0 1
87969: PPUSH
87970: CALL_OW 316
87974: PUSH
87975: LD_VAR 0 1
87979: PPUSH
87980: CALL_OW 314
87984: OR
87985: PUSH
87986: LD_VAR 0 1
87990: PPUSH
87991: CALL_OW 302
87995: NOT
87996: OR
87997: PUSH
87998: LD_VAR 0 1
88002: PPUSH
88003: CALL_OW 301
88007: OR
88008: IFFALSE 87958
// RemoveSeeing ( _x , _y , side ) ;
88010: LD_VAR 0 8
88014: PPUSH
88015: LD_VAR 0 9
88019: PPUSH
88020: LD_VAR 0 6
88024: PPUSH
88025: CALL_OW 331
// end ; end_of_file
88029: LD_VAR 0 4
88033: RET
// export function StopOriginalMusic ; begin
88034: LD_INT 0
88036: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
88037: LD_STRING OW_FORCEMUSICDISABLE(true);
88039: PPUSH
88040: CALL_OW 559
// end ;
88044: LD_VAR 0 1
88048: RET
// export function PlayOriginalMusic ; begin
88049: LD_INT 0
88051: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
88052: LD_STRING OW_FORCEMUSICDISABLE(false);
88054: PPUSH
88055: CALL_OW 559
// end ;
88059: LD_VAR 0 1
88063: RET
// export function PlayCustomMusic ( track , callback ) ; begin
88064: LD_INT 0
88066: PPUSH
// StopOriginalMusic ;
88067: CALL 88034 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
88071: LD_STRING playMusic("
88073: PUSH
88074: LD_VAR 0 1
88078: STR
88079: PUSH
88080: LD_STRING ", "
88082: STR
88083: PUSH
88084: LD_VAR 0 2
88088: STR
88089: PUSH
88090: LD_STRING ")
88092: STR
88093: PPUSH
88094: CALL_OW 559
// end ;
88098: LD_VAR 0 3
88102: RET
