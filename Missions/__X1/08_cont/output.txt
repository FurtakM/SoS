// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20614 0 0
// PrepareRussian ;
  12: CALL 2026 0 0
// PrepareArabian ;
  16: CALL 446 0 0
// Action ;
  20: CALL 3769 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin , kaiaWeaponHidden ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// kaiaWeaponHidden := 0 ;
 427: LD_ADDR_EXP 45
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// enable ( entranceEvent ) ;
 435: LD_INT 1
 437: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 438: LD_INT 2
 440: DISABLE_MARKED
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
// uc_side := 4 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 4
 457: ST_TO_ADDR
// uc_nation := 1 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 466: LD_ADDR_EXP 58
 470: PUSH
 471: LD_STRING 07_Americans
 473: PPUSH
 474: CALL_OW 31
 478: ST_TO_ADDR
// if americanSquad < 5 then
 479: LD_EXP 58
 483: PUSH
 484: LD_INT 5
 486: LESS
 487: IFFALSE 581
// begin if not americanSquad then
 489: LD_EXP 58
 493: NOT
 494: IFFALSE 503
// americanSquad := [ ] ;
 496: LD_ADDR_EXP 58
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: DOUBLE
 509: LD_EXP 58
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 2
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: PUSH
 539: FOR_TO
 540: IFFALSE 577
// begin PrepareHuman ( false , 2 , 6 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 2
 547: PPUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 555: LD_ADDR_EXP 58
 559: PUSH
 560: LD_EXP 58
 564: PPUSH
 565: CALL_OW 44
 569: PPUSH
 570: CALL 66962 0 2
 574: ST_TO_ADDR
// end ;
 575: GO 539
 577: POP
 578: POP
// end else
 579: GO 628
// for i := Count ( americanSquad ) downto 5 do
 581: LD_ADDR_VAR 0 2
 585: PUSH
 586: DOUBLE
 587: LD_EXP 58
 591: PPUSH
 592: CALL 31373 0 1
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 5
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 626
// americanSquad := Delete ( americanSquad , i ) ;
 604: LD_ADDR_EXP 58
 608: PUSH
 609: LD_EXP 58
 613: PPUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: CALL_OW 3
 623: ST_TO_ADDR
 624: GO 601
 626: POP
 627: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 628: LD_ADDR_EXP 60
 632: PUSH
 633: LD_STRING UsCommander
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_STRING 07_
 644: PPUSH
 645: CALL 29271 0 3
 649: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 650: LD_INT 1
 652: PPUSH
 653: LD_INT 6
 655: PPUSH
 656: CALL_OW 381
// Jerry := CreateHuman ;
 660: LD_ADDR_EXP 61
 664: PUSH
 665: CALL_OW 44
 669: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// if not Doug then
 682: LD_EXP 60
 686: NOT
 687: IFFALSE 709
// begin PrepareSoldier ( sex_male , 6 ) ;
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 6
 694: PPUSH
 695: CALL_OW 381
// Doug := CreateHuman ;
 699: LD_ADDR_EXP 60
 703: PUSH
 704: CALL_OW 44
 708: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 709: LD_EXP 60
 713: PPUSH
 714: LD_INT 33
 716: PPUSH
 717: CALL_OW 336
// if johnnySaved or debug then
 721: LD_EXP 3
 725: PUSH
 726: LD_EXP 1
 730: OR
 731: IFFALSE 758
// begin Harris := NewCharacter ( Harris ) ;
 733: LD_ADDR_EXP 59
 737: PUSH
 738: LD_STRING Harris
 740: PPUSH
 741: CALL_OW 25
 745: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 746: LD_EXP 59
 750: PPUSH
 751: LD_INT 33
 753: PPUSH
 754: CALL_OW 336
// end ; uc_side := 2 ;
 758: LD_ADDR_OWVAR 20
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// uc_nation := 2 ;
 766: LD_ADDR_OWVAR 21
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 774: LD_ADDR_EXP 46
 778: PUSH
 779: LD_STRING Heike
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 2
 792: PPUSH
 793: CALL 29271 0 3
 797: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 798: LD_ADDR_EXP 49
 802: PUSH
 803: LD_STRING Ibrahim
 805: PPUSH
 806: LD_EXP 1
 810: NOT
 811: PPUSH
 812: LD_EXP 2
 816: PPUSH
 817: CALL 29271 0 3
 821: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 822: LD_ADDR_EXP 47
 826: PUSH
 827: LD_STRING Givi
 829: PPUSH
 830: LD_EXP 1
 834: NOT
 835: PPUSH
 836: LD_EXP 2
 840: PPUSH
 841: CALL 29271 0 3
 845: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 846: LD_ADDR_EXP 50
 850: PUSH
 851: LD_STRING Kamil
 853: PPUSH
 854: LD_EXP 1
 858: NOT
 859: PPUSH
 860: LD_EXP 2
 864: PPUSH
 865: CALL 29271 0 3
 869: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 870: LD_ADDR_EXP 51
 874: PUSH
 875: LD_STRING Kaia
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: LD_EXP 2
 888: PPUSH
 889: CALL 29271 0 3
 893: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 894: LD_ADDR_EXP 52
 898: PUSH
 899: LD_STRING Sophia
 901: PPUSH
 902: LD_EXP 1
 906: NOT
 907: PPUSH
 908: LD_EXP 2
 912: PPUSH
 913: CALL 29271 0 3
 917: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 918: LD_ADDR_EXP 53
 922: PUSH
 923: LD_STRING Markov
 925: PPUSH
 926: LD_EXP 1
 930: NOT
 931: PPUSH
 932: LD_EXP 2
 936: PPUSH
 937: CALL 29271 0 3
 941: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 942: LD_ADDR_EXP 56
 946: PUSH
 947: LD_STRING Aviradze
 949: PPUSH
 950: LD_EXP 1
 954: NOT
 955: PPUSH
 956: LD_EXP 2
 960: PPUSH
 961: CALL 29271 0 3
 965: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 966: LD_ADDR_EXP 55
 970: PUSH
 971: LD_STRING Kurt
 973: PPUSH
 974: LD_EXP 1
 978: NOT
 979: PPUSH
 980: LD_EXP 2
 984: PPUSH
 985: CALL 29271 0 3
 989: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 990: LD_ADDR_EXP 48
 994: PUSH
 995: LD_STRING Mike
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 2
1008: PPUSH
1009: CALL 29271 0 3
1013: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1014: LD_ADDR_EXP 54
1018: PUSH
1019: LD_STRING Olaf
1021: PPUSH
1022: LD_EXP 1
1026: NOT
1027: PPUSH
1028: LD_EXP 2
1032: PPUSH
1033: CALL 29271 0 3
1037: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1038: LD_ADDR_EXP 57
1042: PUSH
1043: LD_STRING 07_others
1045: PPUSH
1046: CALL_OW 31
1050: ST_TO_ADDR
// end ;
1051: LD_VAR 0 1
1055: RET
// export function PrepareGame ; var i ; begin
1056: LD_INT 0
1058: PPUSH
1059: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1060: LD_EXP 46
1064: PPUSH
1065: LD_INT 23
1067: PPUSH
1068: CALL_OW 52
// if Givi then
1072: LD_EXP 47
1076: IFFALSE 1114
// begin SetSide ( Givi , 5 ) ;
1078: LD_EXP 47
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1090: LD_EXP 47
1094: PPUSH
1095: LD_INT 9
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 49
// ComHold ( Givi ) ;
1105: LD_EXP 47
1109: PPUSH
1110: CALL_OW 140
// end ; if Markov then
1114: LD_EXP 53
1118: IFFALSE 1156
// begin SetSide ( Markov , 5 ) ;
1120: LD_EXP 53
1124: PPUSH
1125: LD_INT 5
1127: PPUSH
1128: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1132: LD_EXP 53
1136: PPUSH
1137: LD_INT 3
1139: PPUSH
1140: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1144: LD_EXP 53
1148: PPUSH
1149: LD_INT 61
1151: PPUSH
1152: CALL_OW 52
// end ; if Mike then
1156: LD_EXP 48
1160: IFFALSE 1198
// begin SetSide ( Mike , 5 ) ;
1162: LD_EXP 48
1166: PPUSH
1167: LD_INT 5
1169: PPUSH
1170: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1174: LD_EXP 48
1178: PPUSH
1179: LD_INT 17
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 49
// ComHold ( Mike ) ;
1189: LD_EXP 48
1193: PPUSH
1194: CALL_OW 140
// end ; if Olaf then
1198: LD_EXP 54
1202: IFFALSE 1243
// begin SetSide ( Olaf , 5 ) ;
1204: LD_EXP 54
1208: PPUSH
1209: LD_INT 5
1211: PPUSH
1212: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1216: LD_EXP 54
1220: PPUSH
1221: LD_INT 16
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1231: LD_EXP 54
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL 70114 0 2
// end ; if Kamil then
1243: LD_EXP 50
1247: IFFALSE 1273
// begin SetSide ( Kamil , 5 ) ;
1249: LD_EXP 50
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1261: LD_EXP 50
1265: PPUSH
1266: LD_INT 109
1268: PPUSH
1269: CALL_OW 52
// end ; if Kurt then
1273: LD_EXP 55
1277: IFFALSE 1303
// begin SetSide ( Kurt , 5 ) ;
1279: LD_EXP 55
1283: PPUSH
1284: LD_INT 5
1286: PPUSH
1287: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1291: LD_EXP 55
1295: PPUSH
1296: LD_INT 169
1298: PPUSH
1299: CALL_OW 52
// end ; if Kaia then
1303: LD_EXP 51
1307: IFFALSE 1333
// begin SetSide ( Kaia , 5 ) ;
1309: LD_EXP 51
1313: PPUSH
1314: LD_INT 5
1316: PPUSH
1317: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1321: LD_EXP 51
1325: PPUSH
1326: LD_INT 147
1328: PPUSH
1329: CALL_OW 52
// end ; if Sophia then
1333: LD_EXP 52
1337: IFFALSE 1378
// begin SetSide ( Sophia , 5 ) ;
1339: LD_EXP 52
1343: PPUSH
1344: LD_INT 5
1346: PPUSH
1347: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1351: LD_EXP 52
1355: PPUSH
1356: LD_INT 142
1358: PPUSH
1359: LD_INT 96
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 48
// ComHold ( Sophia ) ;
1369: LD_EXP 52
1373: PPUSH
1374: CALL_OW 140
// end ; if Harris then
1378: LD_EXP 59
1382: IFFALSE 1420
// begin SetSide ( Harris , 4 ) ;
1384: LD_EXP 59
1388: PPUSH
1389: LD_INT 4
1391: PPUSH
1392: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1396: LD_EXP 59
1400: PPUSH
1401: LD_INT 20
1403: PPUSH
1404: LD_INT 0
1406: PPUSH
1407: CALL_OW 49
// ComHold ( i ) ;
1411: LD_VAR 0 2
1415: PPUSH
1416: CALL_OW 140
// end ; if Doug then
1420: LD_EXP 60
1424: IFFALSE 1450
// begin SetSide ( Doug , 4 ) ;
1426: LD_EXP 60
1430: PPUSH
1431: LD_INT 4
1433: PPUSH
1434: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1438: LD_EXP 60
1442: PPUSH
1443: LD_INT 106
1445: PPUSH
1446: CALL_OW 52
// end ; if Aviradze then
1450: LD_EXP 56
1454: IFFALSE 1480
// begin SetSide ( Aviradze , 5 ) ;
1456: LD_EXP 56
1460: PPUSH
1461: LD_INT 5
1463: PPUSH
1464: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1468: LD_EXP 56
1472: PPUSH
1473: LD_INT 119
1475: PPUSH
1476: CALL_OW 52
// end ; if Ibrahim then
1480: LD_EXP 49
1484: IFFALSE 1510
// begin SetSide ( Ibrahim , 5 ) ;
1486: LD_EXP 49
1490: PPUSH
1491: LD_INT 5
1493: PPUSH
1494: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1498: LD_EXP 49
1502: PPUSH
1503: LD_INT 119
1505: PPUSH
1506: CALL_OW 52
// end ; if Jerry then
1510: LD_EXP 61
1514: IFFALSE 1555
// begin SetSide ( Jerry , 4 ) ;
1516: LD_EXP 61
1520: PPUSH
1521: LD_INT 4
1523: PPUSH
1524: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1528: LD_EXP 61
1532: PPUSH
1533: LD_INT 119
1535: PPUSH
1536: LD_INT 59
1538: PPUSH
1539: LD_INT 0
1541: PPUSH
1542: CALL_OW 48
// ComHold ( Jerry ) ;
1546: LD_EXP 61
1550: PPUSH
1551: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1555: LD_EXP 65
1559: PPUSH
1560: LD_INT 119
1562: PPUSH
1563: CALL_OW 52
// for i in americanSquad do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_EXP 58
1576: PUSH
1577: FOR_IN
1578: IFFALSE 1606
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1580: LD_VAR 0 2
1584: PPUSH
1585: LD_INT 21
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 49
// ComHold ( i ) ;
1595: LD_VAR 0 2
1599: PPUSH
1600: CALL_OW 140
// end ;
1604: GO 1577
1606: POP
1607: POP
// for i in heikeSecondSquad do
1608: LD_ADDR_VAR 0 2
1612: PUSH
1613: LD_EXP 57
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1659
// begin SetSide ( i , 5 ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 5
1628: PPUSH
1629: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1633: LD_VAR 0 2
1637: PPUSH
1638: LD_INT 22
1640: PPUSH
1641: LD_INT 0
1643: PPUSH
1644: CALL_OW 49
// ComHold ( i ) ;
1648: LD_VAR 0 2
1652: PPUSH
1653: CALL_OW 140
// end ;
1657: GO 1618
1659: POP
1660: POP
// if not hasVodka then
1661: LD_EXP 4
1665: NOT
1666: IFFALSE 1725
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1668: LD_ADDR_VAR 0 2
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 2
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 5
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL_OW 69
1705: PUSH
1706: FOR_IN
1707: IFFALSE 1723
// SetLives ( i , 500 ) ;
1709: LD_VAR 0 2
1713: PPUSH
1714: LD_INT 500
1716: PPUSH
1717: CALL_OW 234
1721: GO 1706
1723: POP
1724: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1725: LD_ADDR_VAR 0 2
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_INT 4
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 69
1744: PUSH
1745: FOR_IN
1746: IFFALSE 1762
// SetLives ( i , 500 ) ;
1748: LD_VAR 0 2
1752: PPUSH
1753: LD_INT 500
1755: PPUSH
1756: CALL_OW 234
1760: GO 1745
1762: POP
1763: POP
// end ;
1764: LD_VAR 0 1
1768: RET
// export function SetClassKaiaRevolver ; begin
1769: LD_INT 0
1771: PPUSH
// if not IsOk ( Kaia ) then
1772: LD_EXP 51
1776: PPUSH
1777: CALL_OW 302
1781: NOT
1782: IFFALSE 1786
// exit ;
1784: GO 1805
// SetClass ( Kaia , class_revolver ) ;
1786: LD_EXP 51
1790: PPUSH
1791: LD_INT 34
1793: PPUSH
1794: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1798: LD_STRING ACH_REVOLVER
1800: PPUSH
1801: CALL_OW 543
// end ;
1805: LD_VAR 0 1
1809: RET
// export function SpawnHeikeAsRussian ; begin
1810: LD_INT 0
1812: PPUSH
// RemoveUnit ( Heike ) ;
1813: LD_EXP 46
1817: PPUSH
1818: CALL_OW 64
// heikeTmp := Heike ;
1822: LD_ADDR_EXP 62
1826: PUSH
1827: LD_EXP 46
1831: ST_TO_ADDR
// uc_side := 2 ;
1832: LD_ADDR_OWVAR 20
1836: PUSH
1837: LD_INT 2
1839: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1840: LD_ADDR_EXP 46
1844: PUSH
1845: LD_STRING HeikeRu
1847: PPUSH
1848: CALL_OW 25
1852: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1853: LD_EXP 62
1857: PPUSH
1858: LD_EXP 46
1862: PPUSH
1863: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1867: LD_EXP 46
1871: PPUSH
1872: LD_INT 165
1874: PPUSH
1875: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1879: LD_EXP 46
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 336
// heikeAsRussian := true ;
1891: LD_ADDR_EXP 27
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1899: LD_STRING M1-laundry-out
1901: PPUSH
1902: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1906: LD_STRING ACH_HEIKERU
1908: PPUSH
1909: CALL_OW 543
// end ;
1913: LD_VAR 0 1
1917: RET
// export function SpawnGiviAsRussian ; begin
1918: LD_INT 0
1920: PPUSH
// RemoveUnit ( Givi ) ;
1921: LD_EXP 47
1925: PPUSH
1926: CALL_OW 64
// giviTmp := Givi ;
1930: LD_ADDR_EXP 63
1934: PUSH
1935: LD_EXP 47
1939: ST_TO_ADDR
// uc_side := 2 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 2
1947: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1948: LD_ADDR_EXP 47
1952: PUSH
1953: LD_STRING GiviRu
1955: PPUSH
1956: CALL_OW 25
1960: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1961: LD_EXP 63
1965: PPUSH
1966: LD_EXP 47
1970: PPUSH
1971: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1975: LD_EXP 47
1979: PPUSH
1980: LD_INT 165
1982: PPUSH
1983: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1987: LD_EXP 47
1991: PPUSH
1992: LD_INT 1
1994: PPUSH
1995: CALL_OW 336
// giviAsRussian := true ;
1999: LD_ADDR_EXP 28
2003: PUSH
2004: LD_INT 1
2006: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
2007: LD_STRING M1-laundry-out
2009: PPUSH
2010: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2014: LD_STRING ACH_GIVIRU
2016: PPUSH
2017: CALL_OW 543
// end ; end_of_file
2021: LD_VAR 0 1
2025: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
2031: PPUSH
2032: PPUSH
// uc_side := 3 ;
2033: LD_ADDR_OWVAR 20
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// uc_nation := 3 ;
2041: LD_ADDR_OWVAR 21
2045: PUSH
2046: LD_INT 3
2048: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2049: LD_INT 192
2051: PPUSH
2052: LD_STRING kitchen
2054: PPUSH
2055: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2059: LD_INT 165
2061: PPUSH
2062: LD_STRING laundry
2064: PPUSH
2065: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2069: LD_INT 54
2071: PPUSH
2072: LD_STRING adminSection
2074: PPUSH
2075: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2079: LD_ADDR_VAR 0 2
2083: PUSH
2084: LD_INT 21
2086: PUSH
2087: LD_INT 3
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 69
2098: PUSH
2099: FOR_IN
2100: IFFALSE 2116
// SetBLevel ( i , 7 ) ;
2102: LD_VAR 0 2
2106: PPUSH
2107: LD_INT 7
2109: PPUSH
2110: CALL_OW 241
2114: GO 2099
2116: POP
2117: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_INT 22
2125: PUSH
2126: LD_INT 3
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 2
2135: PUSH
2136: LD_INT 30
2138: PUSH
2139: LD_INT 0
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: PUSH
2146: LD_INT 30
2148: PUSH
2149: LD_INT 1
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PPUSH
2165: CALL_OW 69
2169: PUSH
2170: FOR_IN
2171: IFFALSE 2235
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2173: LD_VAR 0 2
2177: PPUSH
2178: CALL_OW 274
2182: PPUSH
2183: LD_INT 1
2185: PPUSH
2186: LD_INT 1000
2188: PPUSH
2189: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 274
2202: PPUSH
2203: LD_INT 2
2205: PPUSH
2206: LD_INT 1000
2208: PPUSH
2209: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2213: LD_VAR 0 2
2217: PPUSH
2218: CALL_OW 274
2222: PPUSH
2223: LD_INT 3
2225: PPUSH
2226: LD_INT 100
2228: PPUSH
2229: CALL_OW 277
// end ;
2233: GO 2170
2235: POP
2236: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2237: LD_ADDR_VAR 0 2
2241: PUSH
2242: LD_INT 22
2244: PUSH
2245: LD_INT 3
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 30
2254: PUSH
2255: LD_INT 32
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2306
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 5
2279: PUSH
2280: LD_OWVAR 67
2284: PLUS
2285: PPUSH
2286: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2290: CALL_OW 44
2294: PPUSH
2295: LD_VAR 0 2
2299: PPUSH
2300: CALL_OW 52
// end ;
2304: GO 2271
2306: POP
2307: POP
// for i := 1 to 2 do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_INT 2
2320: PUSH
2321: FOR_TO
2322: IFFALSE 2374
// begin PrepareMechanic ( false , 8 ) ;
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 8
2329: PPUSH
2330: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2334: LD_ADDR_EXP 67
2338: PUSH
2339: LD_EXP 67
2343: PPUSH
2344: CALL_OW 44
2348: PPUSH
2349: CALL 66962 0 2
2353: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2354: LD_EXP 67
2358: PUSH
2359: LD_EXP 67
2363: ARRAY
2364: PPUSH
2365: LD_INT 61
2367: PPUSH
2368: CALL_OW 52
// end ;
2372: GO 2321
2374: POP
2375: POP
// PrepareMechanic ( sex_male , 8 ) ;
2376: LD_INT 1
2378: PPUSH
2379: LD_INT 8
2381: PPUSH
2382: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2386: LD_ADDR_EXP 68
2390: PUSH
2391: LD_EXP 68
2395: PPUSH
2396: CALL_OW 44
2400: PPUSH
2401: CALL 66962 0 2
2405: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2406: LD_EXP 68
2410: PUSH
2411: LD_EXP 68
2415: ARRAY
2416: PPUSH
2417: LD_INT 196
2419: PPUSH
2420: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2424: LD_INT 1
2426: PPUSH
2427: LD_INT 8
2429: PPUSH
2430: CALL_OW 383
// hc_name := Stiepan Simonov ;
2434: LD_ADDR_OWVAR 26
2438: PUSH
2439: LD_STRING Stiepan Simonov
2441: ST_TO_ADDR
// Stiopa := CreateHuman ;
2442: LD_ADDR_EXP 69
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2452: LD_INT 2
2454: PPUSH
2455: LD_INT 8
2457: PPUSH
2458: CALL_OW 383
// hc_name := Laura Dragunov ;
2462: LD_ADDR_OWVAR 26
2466: PUSH
2467: LD_STRING Laura Dragunov
2469: ST_TO_ADDR
// Laura := CreateHuman ;
2470: LD_ADDR_EXP 70
2474: PUSH
2475: CALL_OW 44
2479: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2480: LD_EXP 70
2484: PPUSH
2485: LD_INT 196
2487: PPUSH
2488: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2492: LD_INT 1
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2502: LD_ADDR_EXP 67
2506: PUSH
2507: LD_EXP 67
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 44
2519: PPUSH
2520: CALL_OW 2
2524: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2525: LD_EXP 67
2529: PUSH
2530: LD_INT 1
2532: ARRAY
2533: PPUSH
2534: LD_INT 61
2536: PPUSH
2537: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2541: LD_INT 1
2543: PPUSH
2544: LD_INT 8
2546: PPUSH
2547: CALL_OW 381
// hc_name := Pavel Muchin ;
2551: LD_ADDR_OWVAR 26
2555: PUSH
2556: LD_STRING Pavel Muchin
2558: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2559: LD_ADDR_OWVAR 29
2563: PUSH
2564: LD_INT 13
2566: PUSH
2567: LD_INT 13
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2574: LD_ADDR_EXP 66
2578: PUSH
2579: CALL_OW 44
2583: ST_TO_ADDR
// InitHC_All ( ) ;
2584: CALL_OW 584
// if Difficulty > 1 then
2588: LD_OWVAR 67
2592: PUSH
2593: LD_INT 1
2595: GREATER
2596: IFFALSE 2716
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2598: LD_ADDR_VAR 0 2
2602: PUSH
2603: DOUBLE
2604: LD_INT 1
2606: DEC
2607: ST_TO_ADDR
2608: LD_INT 3
2610: PUSH
2611: LD_INT 4
2613: PUSH
2614: LD_INT 5
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: PUSH
2627: LD_INT 1
2629: PLUS
2630: ARRAY
2631: PUSH
2632: FOR_TO
2633: IFFALSE 2714
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 5
2640: PUSH
2641: LD_INT 6
2643: PUSH
2644: LD_INT 7
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_OWVAR 67
2656: PUSH
2657: LD_INT 1
2659: PLUS
2660: ARRAY
2661: PPUSH
2662: CALL_OW 381
// un := CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 62
2683: PUSH
2684: LD_INT 63
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_VAR 0 2
2695: PUSH
2696: LD_INT 2
2698: MOD
2699: PUSH
2700: LD_INT 1
2702: PLUS
2703: ARRAY
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// end ;
2712: GO 2632
2714: POP
2715: POP
// end ; uc_side := 6 ;
2716: LD_ADDR_OWVAR 20
2720: PUSH
2721: LD_INT 6
2723: ST_TO_ADDR
// uc_nation := 3 ;
2724: LD_ADDR_OWVAR 21
2728: PUSH
2729: LD_INT 3
2731: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2732: LD_ADDR_VAR 0 5
2736: PUSH
2737: LD_INT 14
2739: PUSH
2740: LD_INT 15
2742: PUSH
2743: LD_INT 48
2745: PUSH
2746: LD_INT 24
2748: PUSH
2749: LD_INT 149
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: ST_TO_ADDR
// for i in tmp do
2759: LD_ADDR_VAR 0 2
2763: PUSH
2764: LD_VAR 0 5
2768: PUSH
2769: FOR_IN
2770: IFFALSE 2818
// begin for j := 1 to 2 do
2772: LD_ADDR_VAR 0 3
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 2
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2814
// begin PrepareSoldier ( false , 7 ) ;
2788: LD_INT 0
2790: PPUSH
2791: LD_INT 7
2793: PPUSH
2794: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2798: CALL_OW 44
2802: PPUSH
2803: LD_VAR 0 2
2807: PPUSH
2808: CALL_OW 52
// end ;
2812: GO 2785
2814: POP
2815: POP
// end ;
2816: GO 2769
2818: POP
2819: POP
// end ;
2820: LD_VAR 0 1
2824: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2825: LD_INT 0
2827: PPUSH
2828: PPUSH
2829: PPUSH
2830: PPUSH
// uc_side := 3 ;
2831: LD_ADDR_OWVAR 20
2835: PUSH
2836: LD_INT 3
2838: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2839: LD_ADDR_OWVAR 21
2843: PUSH
2844: LD_INT 1
2846: PPUSH
2847: LD_INT 3
2849: PPUSH
2850: CALL_OW 12
2854: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2855: LD_ADDR_VAR 0 4
2859: PUSH
2860: LD_INT 5
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 517
2870: ST_TO_ADDR
// for i := 1 to 3 do
2871: LD_ADDR_VAR 0 2
2875: PUSH
2876: DOUBLE
2877: LD_INT 1
2879: DEC
2880: ST_TO_ADDR
2881: LD_INT 3
2883: PUSH
2884: FOR_TO
2885: IFFALSE 2954
// begin PrepareHuman ( false , 33 , 0 ) ;
2887: LD_INT 0
2889: PPUSH
2890: LD_INT 33
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL_OW 380
// un := CreateHuman ;
2900: LD_ADDR_VAR 0 3
2904: PUSH
2905: CALL_OW 44
2909: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_VAR 0 4
2919: PUSH
2920: LD_INT 1
2922: ARRAY
2923: PUSH
2924: LD_VAR 0 2
2928: ARRAY
2929: PPUSH
2930: LD_VAR 0 4
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PUSH
2939: LD_VAR 0 2
2943: ARRAY
2944: PPUSH
2945: LD_INT 1
2947: PPUSH
2948: CALL_OW 601
// end ;
2952: GO 2884
2954: POP
2955: POP
// end ;
2956: LD_VAR 0 1
2960: RET
// export function PrepareFirstScene ; var i , un ; begin
2961: LD_INT 0
2963: PPUSH
2964: PPUSH
2965: PPUSH
// uc_side := 4 ;
2966: LD_ADDR_OWVAR 20
2970: PUSH
2971: LD_INT 4
2973: ST_TO_ADDR
// uc_nation := 1 ;
2974: LD_ADDR_OWVAR 21
2978: PUSH
2979: LD_INT 1
2981: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 33
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 380
// for i := 1 to 2 do
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 2
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3074
// begin un := CreateHuman ;
3011: LD_ADDR_VAR 0 3
3015: PUSH
3016: CALL_OW 44
3020: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3021: LD_VAR 0 3
3025: PPUSH
3026: LD_INT 1
3028: PPUSH
3029: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_INT 6
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3048: LD_VAR 0 3
3052: PPUSH
3053: LD_INT 1
3055: PPUSH
3056: CALL 70114 0 2
// SetLives ( un , 300 ) ;
3060: LD_VAR 0 3
3064: PPUSH
3065: LD_INT 300
3067: PPUSH
3068: CALL_OW 234
// end ;
3072: GO 3008
3074: POP
3075: POP
// uc_side := 3 ;
3076: LD_ADDR_OWVAR 20
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// uc_nation := 3 ;
3084: LD_ADDR_OWVAR 21
3088: PUSH
3089: LD_INT 3
3091: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 5
3097: PPUSH
3098: CALL_OW 381
// for i := 1 to 3 do
3102: LD_ADDR_VAR 0 2
3106: PUSH
3107: DOUBLE
3108: LD_INT 1
3110: DEC
3111: ST_TO_ADDR
3112: LD_INT 3
3114: PUSH
3115: FOR_TO
3116: IFFALSE 3189
// begin un := CreateHuman ;
3118: LD_ADDR_VAR 0 3
3122: PUSH
3123: CALL_OW 44
3127: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3128: LD_ADDR_EXP 64
3132: PUSH
3133: LD_EXP 64
3137: PPUSH
3138: LD_VAR 0 3
3142: PPUSH
3143: CALL 66962 0 2
3147: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3148: LD_VAR 0 3
3152: PPUSH
3153: LD_INT 4
3155: PPUSH
3156: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3160: LD_VAR 0 3
3164: PPUSH
3165: LD_INT 7
3167: PPUSH
3168: LD_INT 0
3170: PPUSH
3171: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3175: LD_VAR 0 3
3179: PPUSH
3180: LD_INT 4
3182: PPUSH
3183: CALL 70114 0 2
// end ;
3187: GO 3115
3189: POP
3190: POP
// ruCommisar := CreateHuman ;
3191: LD_ADDR_EXP 65
3195: PUSH
3196: CALL_OW 44
3200: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3201: LD_EXP 65
3205: PPUSH
3206: LD_INT 124
3208: PPUSH
3209: LD_INT 37
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3219: LD_EXP 65
3223: PPUSH
3224: LD_INT 3
3226: PPUSH
3227: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3231: LD_EXP 65
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: CALL 70114 0 2
// end ;
3243: LD_VAR 0 1
3247: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3248: LD_INT 0
3250: PPUSH
3251: PPUSH
3252: PPUSH
3253: PPUSH
// uc_side := 6 ;
3254: LD_ADDR_OWVAR 20
3258: PUSH
3259: LD_INT 6
3261: ST_TO_ADDR
// uc_nation := 3 ;
3262: LD_ADDR_OWVAR 21
3266: PUSH
3267: LD_INT 3
3269: ST_TO_ADDR
// ruPatrol := [ ] ;
3270: LD_ADDR_EXP 71
3274: PUSH
3275: EMPTY
3276: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3277: LD_ADDR_VAR 0 4
3281: PUSH
3282: LD_INT 26
3284: PUSH
3285: LD_INT 30
3287: PUSH
3288: LD_INT 39
3290: PUSH
3291: LD_INT 43
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: ST_TO_ADDR
// for i := 1 to spawn do
3300: LD_ADDR_VAR 0 2
3304: PUSH
3305: DOUBLE
3306: LD_INT 1
3308: DEC
3309: ST_TO_ADDR
3310: LD_VAR 0 4
3314: PUSH
3315: FOR_TO
3316: IFFALSE 3427
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3318: LD_INT 0
3320: PPUSH
3321: LD_INT 4
3323: PUSH
3324: LD_INT 5
3326: PUSH
3327: LD_INT 6
3329: PUSH
3330: LD_INT 7
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: PUSH
3339: LD_OWVAR 67
3343: ARRAY
3344: PPUSH
3345: CALL_OW 381
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 3
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// SetTag ( un , i ) ;
3359: LD_VAR 0 3
3363: PPUSH
3364: LD_VAR 0 2
3368: PPUSH
3369: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3373: LD_ADDR_EXP 71
3377: PUSH
3378: LD_EXP 71
3382: PPUSH
3383: LD_VAR 0 3
3387: PPUSH
3388: CALL 66962 0 2
3392: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_VAR 0 4
3402: PUSH
3403: LD_VAR 0 2
3407: ARRAY
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: CALL_OW 49
// ComHold ( un ) ;
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL_OW 140
// end ;
3425: GO 3315
3427: POP
3428: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3429: LD_ADDR_VAR 0 4
3433: PUSH
3434: LD_INT 48
3436: PUSH
3437: LD_INT 49
3439: PUSH
3440: LD_INT 50
3442: PUSH
3443: LD_INT 51
3445: PUSH
3446: LD_INT 52
3448: PUSH
3449: LD_INT 53
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: ST_TO_ADDR
// for i := 1 to spawn do
3460: LD_ADDR_VAR 0 2
3464: PUSH
3465: DOUBLE
3466: LD_INT 1
3468: DEC
3469: ST_TO_ADDR
3470: LD_VAR 0 4
3474: PUSH
3475: FOR_TO
3476: IFFALSE 3585
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3478: LD_INT 0
3480: PPUSH
3481: LD_INT 4
3483: PUSH
3484: LD_INT 5
3486: PUSH
3487: LD_INT 6
3489: PUSH
3490: LD_INT 7
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: LD_OWVAR 67
3503: ARRAY
3504: PPUSH
3505: CALL_OW 381
// un := CreateHuman ;
3509: LD_ADDR_VAR 0 3
3513: PUSH
3514: CALL_OW 44
3518: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3531: LD_ADDR_EXP 71
3535: PUSH
3536: LD_EXP 71
3540: PPUSH
3541: LD_VAR 0 3
3545: PPUSH
3546: CALL 66962 0 2
3550: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_VAR 0 4
3560: PUSH
3561: LD_VAR 0 2
3565: ARRAY
3566: PPUSH
3567: LD_INT 0
3569: PPUSH
3570: CALL_OW 49
// ComHold ( un ) ;
3574: LD_VAR 0 3
3578: PPUSH
3579: CALL_OW 140
// end ;
3583: GO 3475
3585: POP
3586: POP
// end ;
3587: LD_VAR 0 1
3591: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3592: LD_INT 0
3594: PPUSH
3595: PPUSH
3596: PPUSH
3597: PPUSH
// uc_side := 6 ;
3598: LD_ADDR_OWVAR 20
3602: PUSH
3603: LD_INT 6
3605: ST_TO_ADDR
// uc_nation := nation_russian ;
3606: LD_ADDR_OWVAR 21
3610: PUSH
3611: LD_INT 3
3613: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: LD_INT 54
3621: PUSH
3622: LD_INT 55
3624: PUSH
3625: LD_INT 56
3627: PUSH
3628: LD_INT 57
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: ST_TO_ADDR
// for i := 1 to spawn do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_VAR 0 4
3651: PUSH
3652: FOR_TO
3653: IFFALSE 3762
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3655: LD_INT 0
3657: PPUSH
3658: LD_INT 4
3660: PUSH
3661: LD_INT 5
3663: PUSH
3664: LD_INT 6
3666: PUSH
3667: LD_INT 7
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: PUSH
3676: LD_OWVAR 67
3680: ARRAY
3681: PPUSH
3682: CALL_OW 381
// un := CreateHuman ;
3686: LD_ADDR_VAR 0 3
3690: PUSH
3691: CALL_OW 44
3695: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3696: LD_VAR 0 3
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3708: LD_ADDR_EXP 71
3712: PUSH
3713: LD_EXP 71
3717: PPUSH
3718: LD_VAR 0 3
3722: PPUSH
3723: CALL 66962 0 2
3727: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3728: LD_VAR 0 3
3732: PPUSH
3733: LD_VAR 0 4
3737: PUSH
3738: LD_VAR 0 2
3742: ARRAY
3743: PPUSH
3744: LD_INT 0
3746: PPUSH
3747: CALL_OW 49
// ComHold ( un ) ;
3751: LD_VAR 0 3
3755: PPUSH
3756: CALL_OW 140
// end ;
3760: GO 3652
3762: POP
3763: POP
// end ; end_of_file
3764: LD_VAR 0 1
3768: RET
// export function Action ; var speaker , i , tmp ; begin
3769: LD_INT 0
3771: PPUSH
3772: PPUSH
3773: PPUSH
3774: PPUSH
// Video ( true ) ;
3775: LD_INT 1
3777: PPUSH
3778: CALL 66934 0 1
// hasNormalScene := Kaia or Givi ;
3782: LD_ADDR_EXP 5
3786: PUSH
3787: LD_EXP 51
3791: PUSH
3792: LD_EXP 47
3796: OR
3797: ST_TO_ADDR
// if hasNormalScene then
3798: LD_EXP 5
3802: IFFALSE 4043
// begin for i in americanSquad do
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: LD_EXP 58
3813: PUSH
3814: FOR_IN
3815: IFFALSE 3861
// begin SetClass ( i , class_prison ) ;
3817: LD_VAR 0 3
3821: PPUSH
3822: LD_INT 33
3824: PPUSH
3825: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: LD_INT 78
3836: PPUSH
3837: LD_INT 16
3839: PPUSH
3840: LD_INT 5
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL_OW 50
// ComHold ( i ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: CALL_OW 140
// end ;
3859: GO 3814
3861: POP
3862: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3863: LD_ADDR_VAR 0 4
3867: PUSH
3868: LD_EXP 48
3872: PUSH
3873: LD_EXP 49
3877: PUSH
3878: LD_EXP 50
3882: PUSH
3883: LD_EXP 51
3887: PUSH
3888: LD_EXP 52
3892: PUSH
3893: LD_EXP 53
3897: PUSH
3898: LD_EXP 54
3902: PUSH
3903: LD_EXP 55
3907: PUSH
3908: LD_EXP 47
3912: PUSH
3913: LD_EXP 56
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_EXP 57
3934: UNION
3935: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3936: LD_EXP 46
3940: PPUSH
3941: LD_INT 33
3943: PPUSH
3944: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3948: LD_EXP 46
3952: PPUSH
3953: LD_INT 117
3955: PPUSH
3956: LD_INT 24
3958: PPUSH
3959: LD_INT 3
3961: PPUSH
3962: LD_INT 0
3964: PPUSH
3965: CALL 69102 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3969: LD_EXP 46
3973: PPUSH
3974: LD_INT 123
3976: PPUSH
3977: LD_INT 39
3979: PPUSH
3980: CALL_OW 118
// for i in tmp do
3984: LD_ADDR_VAR 0 3
3988: PUSH
3989: LD_VAR 0 4
3993: PUSH
3994: FOR_IN
3995: IFFALSE 4041
// begin SetClass ( i , class_prison ) ;
3997: LD_VAR 0 3
4001: PPUSH
4002: LD_INT 33
4004: PPUSH
4005: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_INT 3
4016: PPUSH
4017: LD_INT 0
4019: PPUSH
4020: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4024: LD_VAR 0 3
4028: PPUSH
4029: LD_INT 113
4031: PPUSH
4032: LD_INT 16
4034: PPUSH
4035: CALL_OW 118
// end ;
4039: GO 3994
4041: POP
4042: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4043: LD_INT 124
4045: PPUSH
4046: LD_INT 39
4048: PPUSH
4049: CALL_OW 86
// PrepareDeadBodies ;
4053: CALL 2825 0 0
// PrepareFirstScene ;
4057: CALL 2961 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4061: LD_INT 152
4063: PPUSH
4064: LD_INT 65
4066: PPUSH
4067: LD_INT 2
4069: PPUSH
4070: LD_INT 70
4072: NEG
4073: PPUSH
4074: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4078: LD_INT 152
4080: PPUSH
4081: LD_INT 65
4083: PPUSH
4084: LD_INT 2
4086: PPUSH
4087: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4091: LD_INT 122
4093: PPUSH
4094: LD_INT 40
4096: PPUSH
4097: LD_INT 2
4099: PPUSH
4100: LD_INT 8
4102: NEG
4103: PPUSH
4104: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4108: LD_INT 124
4110: PPUSH
4111: LD_INT 37
4113: PPUSH
4114: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4118: LD_EXP 65
4122: PPUSH
4123: LD_STRING DRum-Execution-1
4125: PPUSH
4126: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4130: LD_EXP 65
4134: PPUSH
4135: LD_STRING DRum-Execution-2
4137: PPUSH
4138: CALL_OW 88
// wait ( 0 0$01 ) ;
4142: LD_INT 35
4144: PPUSH
4145: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4149: LD_EXP 65
4153: PPUSH
4154: LD_STRING DRum-Execution-3
4156: PPUSH
4157: CALL_OW 88
// wait ( 0 0$1 ) ;
4161: LD_INT 35
4163: PPUSH
4164: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4168: LD_EXP 65
4172: PPUSH
4173: LD_STRING DRum-Execution-4
4175: PPUSH
4176: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4180: LD_EXP 64
4184: PUSH
4185: LD_INT 1
4187: ARRAY
4188: PPUSH
4189: LD_INT 122
4191: PPUSH
4192: LD_INT 39
4194: PPUSH
4195: CALL_OW 428
4199: PPUSH
4200: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4204: LD_EXP 64
4208: PUSH
4209: LD_INT 2
4211: ARRAY
4212: PPUSH
4213: LD_INT 123
4215: PPUSH
4216: LD_INT 41
4218: PPUSH
4219: CALL_OW 428
4223: PPUSH
4224: CALL_OW 115
// AddComHold ( russianKillers ) ;
4228: LD_EXP 64
4232: PPUSH
4233: CALL_OW 200
// wait ( 0 0$1 ) ;
4237: LD_INT 35
4239: PPUSH
4240: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4244: LD_INT 122
4246: PPUSH
4247: LD_INT 40
4249: PPUSH
4250: LD_INT 2
4252: PPUSH
4253: CALL_OW 331
// for i in russianKillers union ruCommisar do
4257: LD_ADDR_VAR 0 3
4261: PUSH
4262: LD_EXP 64
4266: PUSH
4267: LD_EXP 65
4271: UNION
4272: PUSH
4273: FOR_IN
4274: IFFALSE 4287
// RemoveUnit ( i ) ;
4276: LD_VAR 0 3
4280: PPUSH
4281: CALL_OW 64
4285: GO 4273
4287: POP
4288: POP
// if hasNormalScene then
4289: LD_EXP 5
4293: IFFALSE 4301
// ActionNormal else
4295: CALL 4310 0 0
4299: GO 4305
// ActionAdditional ;
4301: CALL 6128 0 0
// end ;
4305: LD_VAR 0 1
4309: RET
// function ActionNormal ; var i , tmp ; begin
4310: LD_INT 0
4312: PPUSH
4313: PPUSH
4314: PPUSH
// CenterNowOnUnits ( Heike ) ;
4315: LD_EXP 46
4319: PPUSH
4320: CALL_OW 87
// wait ( 0 0$1 ) ;
4324: LD_INT 35
4326: PPUSH
4327: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4331: LD_EXP 46
4335: PPUSH
4336: LD_INT 115
4338: PPUSH
4339: LD_INT 19
4341: PPUSH
4342: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4346: LD_EXP 46
4350: PPUSH
4351: LD_INT 113
4353: PPUSH
4354: LD_INT 16
4356: PPUSH
4357: CALL_OW 178
// wait ( 0 0$2 ) ;
4361: LD_INT 70
4363: PPUSH
4364: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4368: LD_EXP 46
4372: PPUSH
4373: LD_STRING DH-Conspiracy-1
4375: PPUSH
4376: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4380: LD_EXP 51
4384: PPUSH
4385: LD_STRING DK-Conspiracy-2
4387: PPUSH
4388: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4392: LD_EXP 47
4396: PPUSH
4397: LD_STRING DG-Conspiracy-3
4399: PPUSH
4400: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4404: LD_EXP 47
4408: PPUSH
4409: LD_STRING DG-Conspiracy-4
4411: PPUSH
4412: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4416: LD_EXP 46
4420: PPUSH
4421: LD_STRING DH-Conspiracy-5
4423: PPUSH
4424: CALL_OW 88
// if IsOk ( Kamil ) then
4428: LD_EXP 50
4432: PPUSH
4433: CALL_OW 302
4437: IFFALSE 4495
// begin hasVodka := true ;
4439: LD_ADDR_EXP 4
4443: PUSH
4444: LD_INT 1
4446: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4447: LD_EXP 50
4451: PPUSH
4452: LD_STRING DKam-Conspiracy-6
4454: PPUSH
4455: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4459: LD_EXP 50
4463: PPUSH
4464: LD_STRING DKam-Conspiracy-7
4466: PPUSH
4467: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4471: LD_EXP 50
4475: PPUSH
4476: LD_STRING DKam-Conspiracy-8
4478: PPUSH
4479: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4483: LD_EXP 50
4487: PPUSH
4488: LD_STRING DKam-Conspiracy-9
4490: PPUSH
4491: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4495: LD_EXP 52
4499: PPUSH
4500: CALL_OW 302
4504: IFFALSE 4685
// begin americanContact := true ;
4506: LD_ADDR_EXP 10
4510: PUSH
4511: LD_INT 1
4513: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4514: LD_STRING M1-american
4516: PPUSH
4517: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4521: LD_EXP 52
4525: PPUSH
4526: LD_STRING DS-Conspiracy-10
4528: PPUSH
4529: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4533: LD_EXP 53
4537: PPUSH
4538: LD_STRING DM-Conspiracy-11
4540: PPUSH
4541: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4545: LD_EXP 52
4549: PPUSH
4550: LD_STRING DS-Conspiracy-12
4552: PPUSH
4553: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4557: LD_INT 84
4559: PPUSH
4560: LD_INT 19
4562: PPUSH
4563: LD_INT 105
4565: PPUSH
4566: CALL 19975 0 3
// if johnnySaved then
4570: LD_EXP 3
4574: IFFALSE 4614
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4576: LD_EXP 52
4580: PPUSH
4581: LD_STRING DS-Conspiracy-13
4583: PPUSH
4584: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4588: LD_EXP 46
4592: PPUSH
4593: LD_STRING DH-Conspiracy-14
4595: PPUSH
4596: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4600: LD_EXP 46
4604: PPUSH
4605: LD_STRING DH-Conspiracy-15
4607: PPUSH
4608: CALL_OW 88
// end else
4612: GO 4650
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4614: LD_EXP 52
4618: PPUSH
4619: LD_STRING DS-Conspiracy-a-13
4621: PPUSH
4622: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4626: LD_EXP 46
4630: PPUSH
4631: LD_STRING DH-Conspiracy-a-14
4633: PPUSH
4634: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4638: LD_EXP 46
4642: PPUSH
4643: LD_STRING DH-Conspiracy-a-15
4645: PPUSH
4646: CALL_OW 88
// end ; if IsOk ( Givi ) then
4650: LD_EXP 47
4654: PPUSH
4655: CALL_OW 302
4659: IFFALSE 4685
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4661: LD_EXP 47
4665: PPUSH
4666: LD_STRING DG-Conspiracy-a-16
4668: PPUSH
4669: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4673: LD_EXP 46
4677: PPUSH
4678: LD_STRING DH-Conspiracy-a-17
4680: PPUSH
4681: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4685: LD_EXP 46
4689: PPUSH
4690: LD_STRING DH-Conspiracy-16
4692: PPUSH
4693: CALL_OW 88
// if IsOk ( Givi ) then
4697: LD_EXP 47
4701: PPUSH
4702: CALL_OW 302
4706: IFFALSE 4978
// begin hasStimDrugs := true ;
4708: LD_ADDR_EXP 9
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4716: LD_STRING M1-drugs
4718: PPUSH
4719: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4723: LD_EXP 47
4727: PPUSH
4728: LD_STRING DG-Conspiracy-17
4730: PPUSH
4731: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4735: LD_INT 162
4737: PPUSH
4738: LD_INT 2
4740: PPUSH
4741: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4745: LD_INT 194
4747: PPUSH
4748: LD_INT 98
4750: PPUSH
4751: LD_INT 105
4753: PPUSH
4754: CALL 19975 0 3
// SetSide ( drugsLab , 3 ) ;
4758: LD_INT 162
4760: PPUSH
4761: LD_INT 3
4763: PPUSH
4764: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4768: LD_EXP 47
4772: PPUSH
4773: LD_STRING DG-Conspiracy-18
4775: PPUSH
4776: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4780: LD_EXP 47
4784: PPUSH
4785: LD_STRING DG-Conspiracy-19
4787: PPUSH
4788: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4792: LD_EXP 47
4796: PPUSH
4797: LD_STRING DG-Conspiracy-20
4799: PPUSH
4800: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4804: LD_EXP 46
4808: PPUSH
4809: LD_STRING DH-Conspiracy-21
4811: PPUSH
4812: CALL_OW 88
// if IsOk ( Kaia ) then
4816: LD_EXP 51
4820: PPUSH
4821: CALL_OW 302
4825: IFFALSE 4899
// begin hasExplosions := true ;
4827: LD_ADDR_EXP 6
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4835: LD_STRING M1-explosive
4837: PPUSH
4838: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4842: LD_EXP 51
4846: PPUSH
4847: LD_STRING DK-Conspiracy-22
4849: PPUSH
4850: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4854: LD_INT 73
4856: PPUSH
4857: LD_INT 2
4859: PPUSH
4860: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4864: LD_INT 170
4866: PPUSH
4867: LD_INT 104
4869: PPUSH
4870: LD_INT 105
4872: PPUSH
4873: CALL 19975 0 3
// SetSide ( barExplosion , 3 ) ;
4877: LD_INT 73
4879: PPUSH
4880: LD_INT 3
4882: PPUSH
4883: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4887: LD_EXP 51
4891: PPUSH
4892: LD_STRING DK-Conspiracy-23
4894: PPUSH
4895: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4899: LD_EXP 54
4903: PPUSH
4904: CALL_OW 302
4908: IFFALSE 4978
// begin hasExplosionsInFactory := true ;
4910: LD_ADDR_EXP 7
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4918: LD_EXP 54
4922: PPUSH
4923: LD_STRING DO-Conspiracy-24
4925: PPUSH
4926: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4930: LD_INT 175
4932: PPUSH
4933: LD_INT 54
4935: PPUSH
4936: LD_INT 70
4938: PPUSH
4939: CALL 19975 0 3
// if IsOk ( Markov ) then
4943: LD_EXP 53
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4978
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4954: LD_EXP 53
4958: PPUSH
4959: LD_STRING DMar-Conspiracy-25
4961: PPUSH
4962: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4966: LD_EXP 53
4970: PPUSH
4971: LD_STRING DMar-Conspiracy-26
4973: PPUSH
4974: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4978: LD_EXP 55
4982: PPUSH
4983: CALL_OW 302
4987: PUSH
4988: LD_EXP 51
4992: PPUSH
4993: CALL_OW 302
4997: AND
4998: IFFALSE 5458
// begin hasWeapons := true ;
5000: LD_ADDR_EXP 19
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// hasRevolver := true ;
5008: LD_ADDR_EXP 8
5012: PUSH
5013: LD_INT 1
5015: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5016: LD_STRING M1-weapons
5018: PPUSH
5019: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5023: LD_EXP 55
5027: PPUSH
5028: LD_STRING DKs-Conspiracy-27
5030: PPUSH
5031: CALL_OW 88
// if IsOk ( Givi ) then
5035: LD_EXP 47
5039: PPUSH
5040: CALL_OW 302
5044: IFFALSE 5060
// Say ( Givi , DG-Conspiracy-28 ) else
5046: LD_EXP 47
5050: PPUSH
5051: LD_STRING DG-Conspiracy-28
5053: PPUSH
5054: CALL_OW 88
5058: GO 5125
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5060: LD_EXP 57
5064: PPUSH
5065: LD_INT 26
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PPUSH
5075: CALL_OW 72
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PPUSH
5084: LD_STRING DArm-Conspiracy-a-28
5086: PPUSH
5087: CALL_OW 88
5091: NOT
5092: IFFALSE 5125
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5094: LD_EXP 57
5098: PPUSH
5099: LD_INT 26
5101: PUSH
5102: LD_INT 2
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL_OW 72
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PPUSH
5118: LD_STRING DArf-Conspiracy-a-28
5120: PPUSH
5121: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5125: LD_EXP 55
5129: PPUSH
5130: LD_STRING DKs-Conspiracy-29
5132: PPUSH
5133: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5137: LD_INT 192
5139: PPUSH
5140: LD_INT 122
5142: PPUSH
5143: LD_INT 105
5145: PPUSH
5146: CALL 19975 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5150: LD_EXP 55
5154: PPUSH
5155: LD_STRING DKs-Conspiracy-30
5157: PPUSH
5158: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5162: LD_EXP 51
5166: PPUSH
5167: LD_STRING DK-Conspiracy-31
5169: PPUSH
5170: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5174: LD_EXP 53
5178: PPUSH
5179: LD_STRING DMar-Conspiracy-33
5181: PPUSH
5182: CALL_OW 88
5186: NOT
5187: PUSH
5188: LD_EXP 57
5192: AND
5193: IFFALSE 5260
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5195: LD_EXP 57
5199: PPUSH
5200: LD_INT 26
5202: PUSH
5203: LD_INT 1
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 72
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: LD_STRING DArm-Conspiracy-a-34
5221: PPUSH
5222: CALL_OW 88
5226: NOT
5227: IFFALSE 5260
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5229: LD_EXP 57
5233: PPUSH
5234: LD_INT 26
5236: PUSH
5237: LD_INT 2
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PPUSH
5244: CALL_OW 72
5248: PUSH
5249: LD_INT 1
5251: ARRAY
5252: PPUSH
5253: LD_STRING DArf-Conspiracy-a-34
5255: PPUSH
5256: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5260: LD_EXP 51
5264: PPUSH
5265: LD_STRING DK-Conspiracy-34
5267: PPUSH
5268: CALL_OW 88
// if IsOk ( Markov ) then
5272: LD_EXP 53
5276: PPUSH
5277: CALL_OW 302
5281: IFFALSE 5366
// begin hasSniperRifle := true ;
5283: LD_ADDR_EXP 11
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5291: LD_EXP 53
5295: PPUSH
5296: LD_STRING DMar-Conspiracy-35
5298: PPUSH
5299: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5303: LD_EXP 51
5307: PPUSH
5308: LD_STRING DK-Conspiracy-36
5310: PPUSH
5311: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5315: LD_EXP 53
5319: PPUSH
5320: LD_STRING DMar-Conspiracy-37
5322: PPUSH
5323: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5327: LD_EXP 53
5331: PPUSH
5332: LD_STRING DMar-Conspiracy-38
5334: PPUSH
5335: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5339: LD_INT 137
5341: PPUSH
5342: LD_INT 98
5344: PPUSH
5345: LD_INT 105
5347: PPUSH
5348: CALL 19975 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5352: LD_EXP 53
5356: PPUSH
5357: LD_STRING DMar-Conspiracy-39
5359: PPUSH
5360: CALL_OW 88
// end else
5364: GO 5458
// if heikeSecondSquad then
5366: LD_EXP 57
5370: IFFALSE 5458
// begin hasSniperRifle := true ;
5372: LD_ADDR_EXP 11
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5380: LD_INT 137
5382: PPUSH
5383: LD_INT 98
5385: PPUSH
5386: LD_INT 105
5388: PPUSH
5389: CALL 19975 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5393: LD_EXP 57
5397: PPUSH
5398: LD_INT 26
5400: PUSH
5401: LD_INT 1
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PPUSH
5408: CALL_OW 72
5412: PUSH
5413: LD_INT 1
5415: ARRAY
5416: PPUSH
5417: LD_STRING DArm-Conspiracy-a-35
5419: PPUSH
5420: CALL_OW 88
5424: NOT
5425: IFFALSE 5458
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5427: LD_EXP 57
5431: PPUSH
5432: LD_INT 26
5434: PUSH
5435: LD_INT 2
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PPUSH
5442: CALL_OW 72
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: PPUSH
5451: LD_STRING DArf-Conspiracy-a-35
5453: PPUSH
5454: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5458: LD_EXP 46
5462: PPUSH
5463: LD_STRING DH-Conspiracy-40
5465: PPUSH
5466: CALL_OW 88
// if IsOk ( Mike ) then
5470: LD_EXP 48
5474: PPUSH
5475: CALL_OW 302
5479: IFFALSE 5538
// begin hasScout := true ;
5481: LD_ADDR_EXP 12
5485: PUSH
5486: LD_INT 1
5488: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5489: LD_EXP 48
5493: PPUSH
5494: LD_STRING DM-Conspiracy-41
5496: PPUSH
5497: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5501: LD_EXP 48
5505: PPUSH
5506: LD_STRING DM-Conspiracy-42
5508: PPUSH
5509: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5513: LD_INT 73
5515: PPUSH
5516: LD_INT 102
5518: PPUSH
5519: LD_INT 105
5521: PPUSH
5522: CALL 19975 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5526: LD_EXP 48
5530: PPUSH
5531: LD_STRING DM-Conspiracy-43
5533: PPUSH
5534: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5538: LD_EXP 4
5542: PUSH
5543: LD_EXP 51
5547: PPUSH
5548: CALL_OW 302
5552: AND
5553: PUSH
5554: LD_EXP 55
5558: PPUSH
5559: CALL_OW 302
5563: AND
5564: IFFALSE 5610
// begin hasMethanol := true ;
5566: LD_ADDR_EXP 13
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5574: LD_EXP 51
5578: PPUSH
5579: LD_STRING DK-Conspiracy-44
5581: PPUSH
5582: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5586: LD_EXP 51
5590: PPUSH
5591: LD_STRING DK-Conspiracy-45
5593: PPUSH
5594: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5598: LD_EXP 50
5602: PPUSH
5603: LD_STRING DKam-Conspiracy-46
5605: PPUSH
5606: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5610: LD_EXP 46
5614: PPUSH
5615: LD_STRING DH-Conspiracy-47
5617: PPUSH
5618: CALL_OW 88
// wait ( 0 0$1 ) ;
5622: LD_INT 35
5624: PPUSH
5625: CALL_OW 67
// your_side := 8 ;
5629: LD_ADDR_OWVAR 2
5633: PUSH
5634: LD_INT 8
5636: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5637: LD_INT 1
5639: PPUSH
5640: LD_INT 1
5642: PPUSH
5643: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5647: LD_ADDR_VAR 0 2
5651: PUSH
5652: LD_INT 2
5654: PUSH
5655: LD_INT 22
5657: PUSH
5658: LD_INT 2
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PUSH
5665: LD_INT 22
5667: PUSH
5668: LD_INT 4
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PPUSH
5694: CALL_OW 69
5698: PUSH
5699: FOR_IN
5700: IFFALSE 5713
// RemoveUnit ( i ) ;
5702: LD_VAR 0 2
5706: PPUSH
5707: CALL_OW 64
5711: GO 5699
5713: POP
5714: POP
// wait ( 0 0$0.3 ) ;
5715: LD_INT 10
5717: PPUSH
5718: CALL_OW 67
// Query ( StartInfo1 ) ;
5722: LD_STRING StartInfo1
5724: PPUSH
5725: CALL_OW 97
// wait ( 0 0$1 ) ;
5729: LD_INT 35
5731: PPUSH
5732: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5736: LD_STRING colors_night.txt
5738: PPUSH
5739: CALL_OW 544
// Query ( StartInfo2 ) ;
5743: LD_STRING StartInfo2
5745: PPUSH
5746: CALL_OW 97
// PrepareGame ;
5750: CALL 1056 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5754: LD_INT 152
5756: PPUSH
5757: LD_INT 65
5759: PPUSH
5760: LD_INT 2
5762: PPUSH
5763: LD_INT 70
5765: NEG
5766: PPUSH
5767: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5771: LD_INT 152
5773: PPUSH
5774: LD_INT 65
5776: PPUSH
5777: LD_INT 2
5779: PPUSH
5780: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5784: LD_INT 133
5786: PPUSH
5787: LD_INT 76
5789: PPUSH
5790: LD_INT 2
5792: PPUSH
5793: LD_INT 6
5795: NEG
5796: PPUSH
5797: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5801: LD_INT 152
5803: PPUSH
5804: LD_INT 65
5806: PPUSH
5807: LD_INT 8
5809: PPUSH
5810: LD_INT 70
5812: NEG
5813: PPUSH
5814: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5818: LD_INT 152
5820: PPUSH
5821: LD_INT 65
5823: PPUSH
5824: LD_INT 8
5826: PPUSH
5827: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5831: LD_INT 133
5833: PPUSH
5834: LD_INT 76
5836: PPUSH
5837: LD_INT 8
5839: PPUSH
5840: LD_INT 6
5842: NEG
5843: PPUSH
5844: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5848: LD_INT 23
5850: PPUSH
5851: CALL_OW 87
// dialogue_skipped := false ;
5855: LD_ADDR_OWVAR 59
5859: PUSH
5860: LD_INT 0
5862: ST_TO_ADDR
// InitRuPatrols ;
5863: CALL 3248 0 0
// Say ( Heike , DH-Escape-1 ) ;
5867: LD_EXP 46
5871: PPUSH
5872: LD_STRING DH-Escape-1
5874: PPUSH
5875: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5879: LD_EXP 46
5883: PPUSH
5884: LD_STRING DH-Escape-2
5886: PPUSH
5887: CALL_OW 88
// StartLockerMinigame ;
5891: CALL 20760 0 0
// wait ( 0 0$1 ) ;
5895: LD_INT 35
5897: PPUSH
5898: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5902: LD_EXP 46
5906: PPUSH
5907: LD_STRING DH-Escape-4
5909: PPUSH
5910: CALL_OW 88
// wait ( 0 0$3 ) ;
5914: LD_INT 105
5916: PPUSH
5917: CALL_OW 67
// your_side := 2 ;
5921: LD_ADDR_OWVAR 2
5925: PUSH
5926: LD_INT 2
5928: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5929: LD_EXP 46
5933: PPUSH
5934: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5938: LD_INT 152
5940: PPUSH
5941: LD_INT 65
5943: PPUSH
5944: LD_INT 2
5946: PPUSH
5947: LD_INT 70
5949: NEG
5950: PPUSH
5951: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5955: LD_INT 152
5957: PPUSH
5958: LD_INT 65
5960: PPUSH
5961: LD_INT 2
5963: PPUSH
5964: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5968: LD_INT 133
5970: PPUSH
5971: LD_INT 76
5973: PPUSH
5974: LD_INT 8
5976: PPUSH
5977: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5981: LD_EXP 46
5985: PPUSH
5986: LD_INT 128
5988: PPUSH
5989: LD_INT 64
5991: PPUSH
5992: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5996: LD_INT 35
5998: PPUSH
5999: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
6003: LD_EXP 46
6007: PPUSH
6008: LD_INT 128
6010: PPUSH
6011: LD_INT 64
6013: PPUSH
6014: CALL_OW 307
6018: IFFALSE 5996
// ComHold ( Heike ) ;
6020: LD_EXP 46
6024: PPUSH
6025: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6029: LD_EXP 46
6033: PPUSH
6034: LD_STRING DH-Start-1
6036: PPUSH
6037: CALL_OW 88
// if not americanContact then
6041: LD_EXP 10
6045: NOT
6046: IFFALSE 6062
// Say ( Heike , DH-Start-c-2 ) else
6048: LD_EXP 46
6052: PPUSH
6053: LD_STRING DH-Start-c-2
6055: PPUSH
6056: CALL_OW 88
6060: GO 6094
// if johnnySaved then
6062: LD_EXP 3
6066: IFFALSE 6082
// Say ( Heike , DH-Start-a-2 ) else
6068: LD_EXP 46
6072: PPUSH
6073: LD_STRING DH-Start-a-2
6075: PPUSH
6076: CALL_OW 88
6080: GO 6094
// Say ( Heike , DH-Start-b-2 ) ;
6082: LD_EXP 46
6086: PPUSH
6087: LD_STRING DH-Start-b-2
6089: PPUSH
6090: CALL_OW 88
// Video ( false ) ;
6094: LD_INT 0
6096: PPUSH
6097: CALL 66934 0 1
// tick := 0 ;
6101: LD_ADDR_OWVAR 1
6105: PUSH
6106: LD_INT 0
6108: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6109: LD_STRING M1
6111: PPUSH
6112: CALL_OW 337
// enable ( gameStartEvent ) ;
6116: LD_INT 2
6118: ENABLE_MARKED
// SaveForQuickRestart ;
6119: CALL_OW 22
// end ;
6123: LD_VAR 0 1
6127: RET
// function ActionAdditional ; var i , un , tmp ; begin
6128: LD_INT 0
6130: PPUSH
6131: PPUSH
6132: PPUSH
6133: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6134: LD_INT 115
6136: PPUSH
6137: LD_INT 27
6139: PPUSH
6140: LD_INT 2
6142: PPUSH
6143: LD_INT 6
6145: NEG
6146: PPUSH
6147: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6151: LD_EXP 46
6155: PPUSH
6156: LD_INT 115
6158: PPUSH
6159: LD_INT 27
6161: PPUSH
6162: CALL_OW 428
6166: PPUSH
6167: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6171: LD_EXP 46
6175: PPUSH
6176: LD_INT 33
6178: PPUSH
6179: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6183: LD_INT 124
6185: PPUSH
6186: LD_INT 39
6188: PPUSH
6189: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6193: LD_EXP 46
6197: PPUSH
6198: LD_STRING DH-Fail-1
6200: PPUSH
6201: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6205: LD_INT 3
6207: PPUSH
6208: CALL_OW 427
// ComExit ( Heike ) ;
6212: LD_EXP 46
6216: PPUSH
6217: CALL 67360 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6221: LD_EXP 46
6225: PPUSH
6226: LD_INT 109
6228: PPUSH
6229: LD_INT 33
6231: PPUSH
6232: CALL_OW 171
// AddComHold ( Heike ) ;
6236: LD_EXP 46
6240: PPUSH
6241: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6245: LD_INT 115
6247: PPUSH
6248: LD_INT 27
6250: PPUSH
6251: LD_INT 2
6253: PPUSH
6254: CALL_OW 331
// wait ( 0 0$2 ) ;
6258: LD_INT 70
6260: PPUSH
6261: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6265: LD_INT 35
6267: PPUSH
6268: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6272: LD_EXP 46
6276: PPUSH
6277: LD_INT 109
6279: PPUSH
6280: LD_INT 33
6282: PPUSH
6283: CALL_OW 307
6287: IFFALSE 6265
// Say ( Heike , DH-Fail-2 ) ;
6289: LD_EXP 46
6293: PPUSH
6294: LD_STRING DH-Fail-2
6296: PPUSH
6297: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6301: LD_EXP 46
6305: PPUSH
6306: LD_INT 111
6308: PPUSH
6309: LD_INT 48
6311: PPUSH
6312: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6316: LD_INT 35
6318: PPUSH
6319: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6323: LD_EXP 46
6327: PPUSH
6328: LD_INT 111
6330: PPUSH
6331: LD_INT 48
6333: PPUSH
6334: CALL_OW 297
6338: PUSH
6339: LD_INT 4
6341: LESS
6342: IFFALSE 6316
// AddComMoveXY ( Heike , 106 , 72 ) ;
6344: LD_EXP 46
6348: PPUSH
6349: LD_INT 106
6351: PPUSH
6352: LD_INT 72
6354: PPUSH
6355: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6359: LD_EXP 46
6363: PPUSH
6364: LD_INT 103
6366: PPUSH
6367: LD_INT 80
6369: PPUSH
6370: CALL_OW 171
// uc_side := 3 ;
6374: LD_ADDR_OWVAR 20
6378: PUSH
6379: LD_INT 3
6381: ST_TO_ADDR
// uc_nation := 3 ;
6382: LD_ADDR_OWVAR 21
6386: PUSH
6387: LD_INT 3
6389: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6390: LD_INT 1
6392: PPUSH
6393: LD_INT 1
6395: PPUSH
6396: LD_INT 6
6398: PPUSH
6399: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6403: LD_ADDR_OWVAR 29
6407: PUSH
6408: LD_INT 12
6410: PUSH
6411: LD_INT 12
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: ST_TO_ADDR
// un := CreateHuman ;
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: CALL_OW 44
6427: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_INT 134
6435: PPUSH
6436: LD_INT 52
6438: PPUSH
6439: LD_INT 4
6441: PPUSH
6442: LD_INT 0
6444: PPUSH
6445: CALL 69102 0 5
// ComTurnUnit ( un , Heike ) ;
6449: LD_VAR 0 3
6453: PPUSH
6454: LD_EXP 46
6458: PPUSH
6459: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6463: LD_VAR 0 3
6467: PPUSH
6468: LD_EXP 46
6472: PPUSH
6473: CALL_OW 112
// if GetSex ( un ) = sex_male then
6477: LD_VAR 0 3
6481: PPUSH
6482: CALL_OW 258
6486: PUSH
6487: LD_INT 1
6489: EQUAL
6490: IFFALSE 6506
// Say ( un , DRum-Fail-3 ) else
6492: LD_VAR 0 3
6496: PPUSH
6497: LD_STRING DRum-Fail-3
6499: PPUSH
6500: CALL_OW 88
6504: GO 6518
// Say ( un , DRuf-Fail-3 ) ;
6506: LD_VAR 0 3
6510: PPUSH
6511: LD_STRING DRuf-Fail-3
6513: PPUSH
6514: CALL_OW 88
// for i := 1 to 3 do
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 3
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6605
// begin PrepareSoldier ( false , 10 ) ;
6534: LD_INT 0
6536: PPUSH
6537: LD_INT 10
6539: PPUSH
6540: CALL_OW 381
// un := CreateHuman ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: CALL_OW 44
6553: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6554: LD_ADDR_VAR 0 4
6558: PUSH
6559: LD_VAR 0 4
6563: PPUSH
6564: LD_VAR 0 3
6568: PPUSH
6569: CALL 66962 0 2
6573: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6574: LD_VAR 0 3
6578: PPUSH
6579: LD_INT 8
6581: PPUSH
6582: LD_INT 0
6584: PPUSH
6585: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6589: LD_VAR 0 3
6593: PPUSH
6594: LD_EXP 46
6598: PPUSH
6599: CALL_OW 119
// end ;
6603: GO 6531
6605: POP
6606: POP
// repeat wait ( 0 0$1 ) ;
6607: LD_INT 35
6609: PPUSH
6610: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6614: LD_VAR 0 4
6618: PPUSH
6619: LD_INT 101
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PPUSH
6629: CALL_OW 72
6633: PUSH
6634: LD_INT 1
6636: GREATER
6637: IFFALSE 6607
// wait ( 0 0$1 ) ;
6639: LD_INT 35
6641: PPUSH
6642: CALL_OW 67
// DialogueOn ;
6646: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6650: LD_EXP 46
6654: PPUSH
6655: LD_STRING DH-Fail-4
6657: PPUSH
6658: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6662: LD_EXP 46
6666: PPUSH
6667: LD_STRING DH-Fail-5
6669: PPUSH
6670: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6674: LD_EXP 46
6678: PPUSH
6679: LD_STRING DH-Fail-6
6681: PPUSH
6682: CALL_OW 88
// DialogueOff ;
6686: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6690: LD_VAR 0 4
6694: PPUSH
6695: LD_EXP 46
6699: PPUSH
6700: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6704: LD_INT 35
6706: PPUSH
6707: CALL_OW 67
// until IsDying ( Heike ) ;
6711: LD_EXP 46
6715: PPUSH
6716: CALL_OW 303
6720: IFFALSE 6704
// KillUnit ( Heike ) ;
6722: LD_EXP 46
6726: PPUSH
6727: CALL_OW 66
// wait ( 0 0$4 ) ;
6731: LD_INT 140
6733: PPUSH
6734: CALL_OW 67
// ResetFog ;
6738: CALL_OW 335
// DialogueOn ;
6742: CALL_OW 6
// dwait ( 0 0$1 ) ;
6746: LD_INT 35
6748: PPUSH
6749: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6753: LD_ADDR_EXP 46
6757: PUSH
6758: LD_STRING Heike
6760: PPUSH
6761: LD_EXP 1
6765: NOT
6766: PPUSH
6767: LD_EXP 2
6771: PPUSH
6772: CALL 29271 0 3
6776: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6777: LD_EXP 46
6781: PPUSH
6782: LD_STRING DH-Fail-7
6784: PPUSH
6785: CALL_OW 89
// DialogueOff ;
6789: CALL_OW 7
// YouLost ( Fail ) ;
6793: LD_STRING Fail
6795: PPUSH
6796: CALL_OW 104
// end ;
6800: LD_VAR 0 1
6804: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6805: LD_INT 2
6807: PPUSH
6808: LD_INT 173
6810: PPUSH
6811: LD_INT 29
6813: PPUSH
6814: CALL_OW 293
6818: PUSH
6819: LD_EXP 46
6823: PPUSH
6824: LD_INT 173
6826: PPUSH
6827: LD_INT 29
6829: PPUSH
6830: CALL_OW 297
6834: PUSH
6835: LD_INT 6
6837: LESS
6838: AND
6839: IFFALSE 6856
6841: GO 6843
6843: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6844: LD_EXP 46
6848: PPUSH
6849: LD_STRING DH-EastRoad
6851: PPUSH
6852: CALL_OW 88
6856: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6857: LD_INT 2
6859: PPUSH
6860: LD_INT 149
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: CALL_OW 293
6870: PUSH
6871: LD_EXP 46
6875: PPUSH
6876: LD_INT 149
6878: PPUSH
6879: LD_INT 3
6881: PPUSH
6882: CALL_OW 297
6886: PUSH
6887: LD_INT 6
6889: LESS
6890: AND
6891: IFFALSE 6908
6893: GO 6895
6895: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6896: LD_EXP 46
6900: PPUSH
6901: LD_STRING DH-EastRoad
6903: PPUSH
6904: CALL_OW 88
6908: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6909: LD_INT 2
6911: PPUSH
6912: LD_INT 217
6914: PPUSH
6915: LD_INT 120
6917: PPUSH
6918: CALL_OW 293
6922: PUSH
6923: LD_EXP 46
6927: PPUSH
6928: LD_INT 217
6930: PPUSH
6931: LD_INT 120
6933: PPUSH
6934: CALL_OW 297
6938: PUSH
6939: LD_INT 6
6941: LESS
6942: AND
6943: IFFALSE 6960
6945: GO 6947
6947: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6948: LD_EXP 46
6952: PPUSH
6953: LD_STRING DH-EastEnd
6955: PPUSH
6956: CALL_OW 88
6960: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6961: LD_EXP 46
6965: PPUSH
6966: LD_INT 11
6968: PPUSH
6969: CALL_OW 308
6973: IFFALSE 7011
6975: GO 6977
6977: DISABLE
// begin if not heikeSquad then
6978: LD_EXP 14
6982: NOT
6983: IFFALSE 6999
// Say ( Heike , DH-Hill ) else
6985: LD_EXP 46
6989: PPUSH
6990: LD_STRING DH-Hill
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Heike , DH-Hill-a ) ;
6999: LD_EXP 46
7003: PPUSH
7004: LD_STRING DH-Hill-a
7006: PPUSH
7007: CALL_OW 88
// end ;
7011: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7012: LD_EXP 46
7016: PPUSH
7017: LD_INT 12
7019: PPUSH
7020: CALL_OW 308
7024: IFFALSE 7211
7026: GO 7028
7028: DISABLE
7029: LD_INT 0
7031: PPUSH
7032: PPUSH
7033: PPUSH
// begin DialogueOn ;
7034: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7038: LD_EXP 46
7042: PPUSH
7043: CALL_OW 87
// x := GetX ( Heike ) ;
7047: LD_ADDR_VAR 0 1
7051: PUSH
7052: LD_EXP 46
7056: PPUSH
7057: CALL_OW 250
7061: ST_TO_ADDR
// y := GetY ( Heike ) ;
7062: LD_ADDR_VAR 0 2
7066: PUSH
7067: LD_EXP 46
7071: PPUSH
7072: CALL_OW 251
7076: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7077: LD_VAR 0 1
7081: PPUSH
7082: LD_VAR 0 2
7086: PPUSH
7087: LD_INT 2
7089: PPUSH
7090: LD_INT 12
7092: NEG
7093: PPUSH
7094: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7098: LD_VAR 0 1
7102: PPUSH
7103: LD_VAR 0 2
7107: PPUSH
7108: LD_INT 2
7110: PPUSH
7111: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7115: LD_INT 101
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 32
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 30
7140: PUSH
7141: LD_INT 33
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PPUSH
7157: CALL_OW 69
7161: IFFALSE 7173
// v := 3 else
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_INT 3
7170: ST_TO_ADDR
7171: GO 7181
// v := 2 ;
7173: LD_ADDR_VAR 0 3
7177: PUSH
7178: LD_INT 2
7180: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7181: LD_EXP 46
7185: PPUSH
7186: LD_STRING DH-Outpost-
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_VAR 0 3
7196: PPUSH
7197: CALL_OW 12
7201: STR
7202: PPUSH
7203: CALL_OW 88
// DialogueOff ;
7207: CALL_OW 7
// end ;
7211: PPOPN 3
7213: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7214: LD_EXP 46
7218: PPUSH
7219: LD_INT 64
7221: PPUSH
7222: CALL_OW 308
7226: IFFALSE 7413
7228: GO 7230
7230: DISABLE
7231: LD_INT 0
7233: PPUSH
7234: PPUSH
7235: PPUSH
// begin DialogueOn ;
7236: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7240: LD_EXP 46
7244: PPUSH
7245: CALL_OW 87
// x := GetX ( Heike ) ;
7249: LD_ADDR_VAR 0 1
7253: PUSH
7254: LD_EXP 46
7258: PPUSH
7259: CALL_OW 250
7263: ST_TO_ADDR
// y := GetY ( Heike ) ;
7264: LD_ADDR_VAR 0 2
7268: PUSH
7269: LD_EXP 46
7273: PPUSH
7274: CALL_OW 251
7278: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7279: LD_VAR 0 1
7283: PPUSH
7284: LD_VAR 0 2
7288: PPUSH
7289: LD_INT 2
7291: PPUSH
7292: LD_INT 12
7294: NEG
7295: PPUSH
7296: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_VAR 0 2
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7317: LD_INT 101
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 2
7329: PUSH
7330: LD_INT 30
7332: PUSH
7333: LD_INT 32
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: LD_INT 30
7342: PUSH
7343: LD_INT 33
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PPUSH
7359: CALL_OW 69
7363: IFFALSE 7375
// v := 3 else
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: LD_INT 3
7372: ST_TO_ADDR
7373: GO 7383
// v := 2 ;
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 2
7382: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7383: LD_EXP 46
7387: PPUSH
7388: LD_STRING DH-Outpost-
7390: PUSH
7391: LD_INT 1
7393: PPUSH
7394: LD_VAR 0 3
7398: PPUSH
7399: CALL_OW 12
7403: STR
7404: PPUSH
7405: CALL_OW 88
// DialogueOff ;
7409: CALL_OW 7
// end ;
7413: PPOPN 3
7415: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7416: LD_EXP 46
7420: PPUSH
7421: LD_INT 19
7423: PPUSH
7424: CALL_OW 308
7428: PUSH
7429: LD_EXP 22
7433: NOT
7434: AND
7435: PUSH
7436: LD_EXP 30
7440: NOT
7441: AND
7442: IFFALSE 7515
7444: GO 7446
7446: DISABLE
// begin DialogueOn ;
7447: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7451: LD_INT 152
7453: PPUSH
7454: LD_INT 115
7456: PPUSH
7457: LD_INT 2
7459: PPUSH
7460: LD_INT 16
7462: NEG
7463: PPUSH
7464: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7468: LD_INT 152
7470: PPUSH
7471: LD_INT 115
7473: PPUSH
7474: LD_INT 2
7476: PPUSH
7477: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7481: LD_INT 152
7483: PPUSH
7484: LD_INT 115
7486: PPUSH
7487: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7491: LD_EXP 46
7495: PPUSH
7496: LD_STRING DH-Stealth-1
7498: PPUSH
7499: CALL_OW 88
// DialogueOff ;
7503: CALL_OW 7
// adminAreaDiscovered := true ;
7507: LD_ADDR_EXP 22
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// end ;
7515: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7516: LD_INT 2
7518: PPUSH
7519: LD_EXP 47
7523: PPUSH
7524: CALL_OW 292
7528: PUSH
7529: LD_EXP 46
7533: PPUSH
7534: LD_EXP 47
7538: PPUSH
7539: CALL_OW 296
7543: PUSH
7544: LD_INT 6
7546: LESS
7547: AND
7548: PUSH
7549: LD_EXP 17
7553: NOT
7554: AND
7555: PUSH
7556: LD_EXP 30
7560: NOT
7561: AND
7562: IFFALSE 7668
7564: GO 7566
7566: DISABLE
// begin DialogueOn ;
7567: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7571: LD_EXP 47
7575: PPUSH
7576: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7580: LD_EXP 47
7584: PPUSH
7585: LD_EXP 46
7589: PPUSH
7590: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7594: LD_EXP 46
7598: PPUSH
7599: LD_EXP 47
7603: PPUSH
7604: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7608: LD_EXP 46
7612: PPUSH
7613: LD_STRING DH-Givi-1
7615: PPUSH
7616: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7620: LD_EXP 47
7624: PPUSH
7625: LD_STRING DG-Givi-2
7627: PPUSH
7628: CALL_OW 88
// DialogueOff ;
7632: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7636: LD_EXP 47
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7648: LD_ADDR_EXP 14
7652: PUSH
7653: LD_EXP 14
7657: PPUSH
7658: LD_EXP 47
7662: PPUSH
7663: CALL 66962 0 2
7667: ST_TO_ADDR
// end ;
7668: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7669: LD_INT 2
7671: PPUSH
7672: LD_EXP 52
7676: PPUSH
7677: CALL_OW 292
7681: PUSH
7682: LD_EXP 46
7686: PPUSH
7687: LD_EXP 52
7691: PPUSH
7692: CALL_OW 296
7696: PUSH
7697: LD_INT 6
7699: LESS
7700: AND
7701: PUSH
7702: LD_EXP 17
7706: NOT
7707: AND
7708: PUSH
7709: LD_EXP 30
7713: NOT
7714: AND
7715: IFFALSE 7821
7717: GO 7719
7719: DISABLE
// begin DialogueOn ;
7720: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7724: LD_EXP 52
7728: PPUSH
7729: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7733: LD_EXP 52
7737: PPUSH
7738: LD_EXP 46
7742: PPUSH
7743: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7747: LD_EXP 46
7751: PPUSH
7752: LD_EXP 52
7756: PPUSH
7757: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7761: LD_EXP 46
7765: PPUSH
7766: LD_STRING DH-Sophia-1
7768: PPUSH
7769: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7773: LD_EXP 52
7777: PPUSH
7778: LD_STRING DS-Sophia-2
7780: PPUSH
7781: CALL_OW 88
// DialogueOff ;
7785: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7789: LD_EXP 52
7793: PPUSH
7794: LD_INT 2
7796: PPUSH
7797: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7801: LD_ADDR_EXP 14
7805: PUSH
7806: LD_EXP 14
7810: PPUSH
7811: LD_EXP 52
7815: PPUSH
7816: CALL 66962 0 2
7820: ST_TO_ADDR
// end ;
7821: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7822: LD_INT 2
7824: PPUSH
7825: LD_EXP 54
7829: PPUSH
7830: CALL_OW 292
7834: PUSH
7835: LD_EXP 46
7839: PPUSH
7840: LD_EXP 54
7844: PPUSH
7845: CALL_OW 296
7849: PUSH
7850: LD_INT 6
7852: LESS
7853: AND
7854: PUSH
7855: LD_EXP 17
7859: NOT
7860: AND
7861: PUSH
7862: LD_EXP 30
7866: NOT
7867: AND
7868: IFFALSE 7964
7870: GO 7872
7872: DISABLE
// begin DialogueOn ;
7873: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7877: LD_EXP 54
7881: PPUSH
7882: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7886: LD_EXP 46
7890: PPUSH
7891: LD_STRING DH-Olaf-1
7893: PPUSH
7894: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7898: LD_EXP 54
7902: PPUSH
7903: LD_STRING DO-Olaf-2
7905: PPUSH
7906: CALL_OW 88
// if explosionsTakenByRussians then
7910: LD_EXP 21
7914: IFFALSE 7928
// Say ( Olaf , DO-Olaf-a-3 ) ;
7916: LD_EXP 54
7920: PPUSH
7921: LD_STRING DO-Olaf-a-3
7923: PPUSH
7924: CALL_OW 88
// DialogueOff ;
7928: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7932: LD_EXP 54
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7944: LD_ADDR_EXP 14
7948: PUSH
7949: LD_EXP 14
7953: PPUSH
7954: LD_EXP 54
7958: PPUSH
7959: CALL 66962 0 2
7963: ST_TO_ADDR
// end ;
7964: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7965: LD_INT 2
7967: PPUSH
7968: LD_EXP 48
7972: PPUSH
7973: CALL_OW 292
7977: PUSH
7978: LD_EXP 46
7982: PPUSH
7983: LD_EXP 48
7987: PPUSH
7988: CALL_OW 296
7992: PUSH
7993: LD_INT 6
7995: LESS
7996: AND
7997: PUSH
7998: LD_EXP 17
8002: NOT
8003: AND
8004: PUSH
8005: LD_EXP 30
8009: NOT
8010: AND
8011: IFFALSE 8239
8013: GO 8015
8015: DISABLE
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
// begin DialogueOn ;
8020: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8024: LD_EXP 48
8028: PPUSH
8029: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8033: LD_ADDR_VAR 0 2
8037: PUSH
8038: LD_INT 18
8040: PPUSH
8041: LD_INT 0
8043: PPUSH
8044: CALL_OW 517
8048: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8049: LD_ADDR_VAR 0 1
8053: PUSH
8054: DOUBLE
8055: LD_INT 1
8057: DEC
8058: ST_TO_ADDR
8059: LD_VAR 0 2
8063: PUSH
8064: LD_INT 1
8066: ARRAY
8067: PUSH
8068: FOR_TO
8069: IFFALSE 8151
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8071: LD_VAR 0 2
8075: PUSH
8076: LD_INT 1
8078: ARRAY
8079: PUSH
8080: LD_VAR 0 1
8084: ARRAY
8085: PPUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_INT 2
8093: ARRAY
8094: PUSH
8095: LD_VAR 0 1
8099: ARRAY
8100: PPUSH
8101: LD_INT 2
8103: PPUSH
8104: LD_INT 3
8106: NEG
8107: PPUSH
8108: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 1
8119: ARRAY
8120: PUSH
8121: LD_VAR 0 1
8125: ARRAY
8126: PPUSH
8127: LD_VAR 0 2
8131: PUSH
8132: LD_INT 2
8134: ARRAY
8135: PUSH
8136: LD_VAR 0 1
8140: ARRAY
8141: PPUSH
8142: LD_INT 2
8144: PPUSH
8145: CALL_OW 331
// end ;
8149: GO 8068
8151: POP
8152: POP
// Say ( Mike , DM-Mike-1 ) ;
8153: LD_EXP 48
8157: PPUSH
8158: LD_STRING DM-Mike-1
8160: PPUSH
8161: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8165: LD_EXP 46
8169: PPUSH
8170: LD_STRING DH-Mike-2
8172: PPUSH
8173: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8177: LD_INT 78
8179: PPUSH
8180: LD_INT 104
8182: PPUSH
8183: CALL_OW 84
// dwait ( 0 0$1 ) ;
8187: LD_INT 35
8189: PPUSH
8190: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8194: LD_EXP 46
8198: PPUSH
8199: CALL_OW 87
// DialogueOff ;
8203: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8207: LD_EXP 48
8211: PPUSH
8212: LD_INT 2
8214: PPUSH
8215: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8219: LD_ADDR_EXP 14
8223: PUSH
8224: LD_EXP 14
8228: PPUSH
8229: LD_EXP 48
8233: PPUSH
8234: CALL 66962 0 2
8238: ST_TO_ADDR
// end ;
8239: PPOPN 2
8241: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8242: LD_EXP 46
8246: PPUSH
8247: LD_EXP 51
8251: PPUSH
8252: CALL_OW 296
8256: PUSH
8257: LD_INT 6
8259: LESS
8260: PUSH
8261: LD_EXP 51
8265: PPUSH
8266: CALL_OW 257
8270: PUSH
8271: LD_INT 33
8273: EQUAL
8274: AND
8275: PUSH
8276: LD_EXP 17
8280: NOT
8281: AND
8282: PUSH
8283: LD_EXP 30
8287: NOT
8288: AND
8289: PUSH
8290: LD_EXP 51
8294: PPUSH
8295: CALL_OW 302
8299: AND
8300: PUSH
8301: LD_EXP 20
8305: AND
8306: PUSH
8307: LD_EXP 51
8311: PUSH
8312: LD_EXP 14
8316: IN
8317: AND
8318: PUSH
8319: LD_EXP 51
8323: PPUSH
8324: CALL_OW 255
8328: PUSH
8329: LD_INT 2
8331: EQUAL
8332: AND
8333: IFFALSE 8362
8335: GO 8337
8337: DISABLE
// begin DialogueOn ;
8338: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8342: LD_EXP 46
8346: PPUSH
8347: LD_STRING DH-Kaia-Revolver-2
8349: PPUSH
8350: CALL_OW 88
// SetClassKaiaRevolver ;
8354: CALL 1769 0 0
// DialogueOff ;
8358: CALL_OW 7
// end ;
8362: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8363: LD_EXP 49
8367: PUSH
8368: LD_EXP 56
8372: AND
8373: PUSH
8374: LD_EXP 56
8378: PPUSH
8379: CALL_OW 255
8383: PUSH
8384: LD_INT 2
8386: NONEQUAL
8387: AND
8388: PUSH
8389: LD_EXP 49
8393: PPUSH
8394: CALL_OW 255
8398: PUSH
8399: LD_INT 2
8401: NONEQUAL
8402: AND
8403: PUSH
8404: LD_EXP 14
8408: PPUSH
8409: LD_INT 22
8411: PUSH
8412: LD_INT 2
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 72
8423: PUSH
8424: LD_INT 5
8426: GREATER
8427: AND
8428: PUSH
8429: LD_EXP 17
8433: NOT
8434: AND
8435: PUSH
8436: LD_EXP 30
8440: NOT
8441: AND
8442: IFFALSE 9159
8444: GO 8446
8446: DISABLE
8447: LD_INT 0
8449: PPUSH
8450: PPUSH
// begin DialogueOn ;
8451: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8455: LD_ADDR_VAR 0 2
8459: PUSH
8460: LD_EXP 47
8464: PPUSH
8465: CALL_OW 302
8469: PUSH
8470: LD_EXP 47
8474: PUSH
8475: LD_EXP 14
8479: IN
8480: AND
8481: PUSH
8482: LD_EXP 47
8486: PPUSH
8487: CALL_OW 255
8491: PUSH
8492: LD_INT 2
8494: EQUAL
8495: AND
8496: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8497: LD_EXP 46
8501: PPUSH
8502: LD_STRING DH-Med-1
8504: PPUSH
8505: CALL_OW 88
// if hasGivi then
8509: LD_VAR 0 2
8513: IFFALSE 8529
// Say ( Givi , DG-Med-2 ) else
8515: LD_EXP 47
8519: PPUSH
8520: LD_STRING DG-Med-2
8522: PPUSH
8523: CALL_OW 88
8527: GO 8634
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8529: LD_EXP 14
8533: PUSH
8534: LD_EXP 57
8538: ISECT
8539: PPUSH
8540: LD_INT 22
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 26
8552: PUSH
8553: LD_INT 1
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 72
8568: PUSH
8569: LD_INT 1
8571: ARRAY
8572: PPUSH
8573: LD_STRING DArm-Med-e-2
8575: PPUSH
8576: CALL_OW 88
8580: NOT
8581: IFFALSE 8634
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8583: LD_EXP 14
8587: PUSH
8588: LD_EXP 57
8592: ISECT
8593: PPUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 2
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 26
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 72
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PPUSH
8627: LD_STRING DArf-Med-e-2
8629: PPUSH
8630: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8634: LD_INT 154
8636: PPUSH
8637: LD_INT 119
8639: PPUSH
8640: LD_INT 70
8642: PPUSH
8643: CALL 19975 0 3
// Say ( Heike , DH-Med-3 ) ;
8647: LD_EXP 46
8651: PPUSH
8652: LD_STRING DH-Med-3
8654: PPUSH
8655: CALL_OW 88
// if hasGivi then
8659: LD_VAR 0 2
8663: IFFALSE 8679
// Say ( Givi , DG-Med-4 ) else
8665: LD_EXP 47
8669: PPUSH
8670: LD_STRING DG-Med-4
8672: PPUSH
8673: CALL_OW 88
8677: GO 8784
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8679: LD_EXP 14
8683: PUSH
8684: LD_EXP 57
8688: ISECT
8689: PPUSH
8690: LD_INT 22
8692: PUSH
8693: LD_INT 2
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 26
8702: PUSH
8703: LD_INT 1
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 72
8718: PUSH
8719: LD_INT 1
8721: ARRAY
8722: PPUSH
8723: LD_STRING DArm-Med-e-4
8725: PPUSH
8726: CALL_OW 88
8730: NOT
8731: IFFALSE 8784
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8733: LD_EXP 14
8737: PUSH
8738: LD_EXP 57
8742: ISECT
8743: PPUSH
8744: LD_INT 22
8746: PUSH
8747: LD_INT 2
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 26
8756: PUSH
8757: LD_INT 2
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PPUSH
8768: CALL_OW 72
8772: PUSH
8773: LD_INT 1
8775: ARRAY
8776: PPUSH
8777: LD_STRING DArf-Med-e-4
8779: PPUSH
8780: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8784: LD_ADDR_VAR 0 1
8788: PUSH
8789: LD_EXP 51
8793: PPUSH
8794: CALL_OW 302
8798: PUSH
8799: LD_EXP 51
8803: PUSH
8804: LD_EXP 14
8808: IN
8809: AND
8810: PUSH
8811: LD_EXP 51
8815: PPUSH
8816: CALL_OW 255
8820: PUSH
8821: LD_INT 2
8823: EQUAL
8824: AND
8825: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8826: LD_EXP 48
8830: PPUSH
8831: CALL_OW 302
8835: PUSH
8836: LD_EXP 48
8840: PUSH
8841: LD_EXP 14
8845: IN
8846: AND
8847: PUSH
8848: LD_EXP 51
8852: PPUSH
8853: CALL_OW 255
8857: PUSH
8858: LD_INT 2
8860: EQUAL
8861: AND
8862: IFFALSE 8894
// begin Say ( Mike , DM-Med-5 ) ;
8864: LD_EXP 48
8868: PPUSH
8869: LD_STRING DM-Med-5
8871: PPUSH
8872: CALL_OW 88
// if hasKaia then
8876: LD_VAR 0 1
8880: IFFALSE 8894
// Say ( Kaia , DK-Med-6 ) ;
8882: LD_EXP 51
8886: PPUSH
8887: LD_STRING DK-Med-6
8889: PPUSH
8890: CALL_OW 88
// end ; if hasKaia then
8894: LD_VAR 0 1
8898: IFFALSE 9139
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8900: LD_INT 175
8902: PPUSH
8903: LD_INT 123
8905: PPUSH
8906: LD_INT 2
8908: PPUSH
8909: LD_INT 8
8911: NEG
8912: PPUSH
8913: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8917: LD_INT 175
8919: PPUSH
8920: LD_INT 123
8922: PPUSH
8923: LD_INT 2
8925: PPUSH
8926: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8930: LD_INT 175
8932: PPUSH
8933: LD_INT 123
8935: PPUSH
8936: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8940: LD_EXP 51
8944: PPUSH
8945: LD_STRING DK-Med-7
8947: PPUSH
8948: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8952: LD_EXP 51
8956: PPUSH
8957: LD_STRING DK-Med-8
8959: PPUSH
8960: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8964: LD_EXP 53
8968: PPUSH
8969: CALL_OW 302
8973: PUSH
8974: LD_EXP 53
8978: PUSH
8979: LD_EXP 14
8983: IN
8984: AND
8985: PUSH
8986: LD_EXP 53
8990: PPUSH
8991: CALL_OW 255
8995: PUSH
8996: LD_INT 2
8998: EQUAL
8999: AND
9000: IFFALSE 9058
// begin Say ( Markov , DMar-Med-9 ) ;
9002: LD_EXP 53
9006: PPUSH
9007: LD_STRING DMar-Med-9
9009: PPUSH
9010: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9014: LD_EXP 51
9018: PPUSH
9019: LD_STRING DK-Med-10
9021: PPUSH
9022: CALL_OW 88
// if hasGivi then
9026: LD_VAR 0 2
9030: IFFALSE 9046
// Say ( Kaia , DK-Med-11 ) else
9032: LD_EXP 51
9036: PPUSH
9037: LD_STRING DK-Med-11
9039: PPUSH
9040: CALL_OW 88
9044: GO 9058
// Say ( Kaia , DK-Med-a-11 ) ;
9046: LD_EXP 51
9050: PPUSH
9051: LD_STRING DK-Med-a-11
9053: PPUSH
9054: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9058: LD_EXP 50
9062: PPUSH
9063: CALL_OW 302
9067: PUSH
9068: LD_EXP 50
9072: PUSH
9073: LD_EXP 14
9077: IN
9078: AND
9079: PUSH
9080: LD_EXP 50
9084: PPUSH
9085: CALL_OW 255
9089: PUSH
9090: LD_INT 2
9092: EQUAL
9093: AND
9094: IFFALSE 9139
// begin Say ( Kamil , DKam-Med-12 ) ;
9096: LD_EXP 50
9100: PPUSH
9101: LD_STRING DKam-Med-12
9103: PPUSH
9104: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9108: LD_EXP 50
9112: PPUSH
9113: LD_STRING DKam-Med-13
9115: PPUSH
9116: CALL_OW 88
// if not hasExplosionCollected then
9120: LD_EXP 23
9124: NOT
9125: IFFALSE 9139
// Say ( Heike , DH-Med-d-14 ) ;
9127: LD_EXP 46
9131: PPUSH
9132: LD_STRING DH-Med-d-14
9134: PPUSH
9135: CALL_OW 88
// end ; end ; DialogueOff ;
9139: CALL_OW 7
// adminAreaDiscovered := true ;
9143: LD_ADDR_EXP 22
9147: PUSH
9148: LD_INT 1
9150: ST_TO_ADDR
// laundryAllowed := true ;
9151: LD_ADDR_EXP 26
9155: PUSH
9156: LD_INT 1
9158: ST_TO_ADDR
// end ;
9159: PPOPN 2
9161: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9162: LD_EXP 49
9166: NOT
9167: PUSH
9168: LD_EXP 56
9172: AND
9173: PUSH
9174: LD_EXP 56
9178: PUSH
9179: LD_EXP 14
9183: IN
9184: NOT
9185: AND
9186: PUSH
9187: LD_EXP 14
9191: PPUSH
9192: LD_INT 22
9194: PUSH
9195: LD_INT 2
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PPUSH
9202: CALL_OW 72
9206: PUSH
9207: LD_INT 4
9209: GREATER
9210: AND
9211: PUSH
9212: LD_EXP 17
9216: NOT
9217: AND
9218: PUSH
9219: LD_EXP 30
9223: NOT
9224: AND
9225: IFFALSE 9942
9227: GO 9229
9229: DISABLE
9230: LD_INT 0
9232: PPUSH
9233: PPUSH
// begin DialogueOn ;
9234: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9238: LD_ADDR_VAR 0 1
9242: PUSH
9243: LD_EXP 47
9247: PPUSH
9248: CALL_OW 302
9252: PUSH
9253: LD_EXP 47
9257: PUSH
9258: LD_EXP 14
9262: IN
9263: AND
9264: PUSH
9265: LD_EXP 47
9269: PPUSH
9270: CALL_OW 255
9274: PUSH
9275: LD_INT 2
9277: EQUAL
9278: AND
9279: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9280: LD_EXP 46
9284: PPUSH
9285: LD_STRING DH-Med-a-1
9287: PPUSH
9288: CALL_OW 88
// if hasGivi then
9292: LD_VAR 0 1
9296: IFFALSE 9312
// Say ( Givi , DG-Med-a-2 ) else
9298: LD_EXP 47
9302: PPUSH
9303: LD_STRING DG-Med-a-2
9305: PPUSH
9306: CALL_OW 88
9310: GO 9417
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9312: LD_EXP 14
9316: PUSH
9317: LD_EXP 57
9321: ISECT
9322: PPUSH
9323: LD_INT 22
9325: PUSH
9326: LD_INT 2
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 26
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PPUSH
9347: CALL_OW 72
9351: PUSH
9352: LD_INT 1
9354: ARRAY
9355: PPUSH
9356: LD_STRING DArm-Med-f-2
9358: PPUSH
9359: CALL_OW 88
9363: NOT
9364: IFFALSE 9417
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9366: LD_EXP 14
9370: PUSH
9371: LD_EXP 57
9375: ISECT
9376: PPUSH
9377: LD_INT 22
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 26
9389: PUSH
9390: LD_INT 2
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: CALL_OW 72
9405: PUSH
9406: LD_INT 1
9408: ARRAY
9409: PPUSH
9410: LD_STRING DArf-Med-f-2
9412: PPUSH
9413: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9417: LD_INT 154
9419: PPUSH
9420: LD_INT 119
9422: PPUSH
9423: LD_INT 70
9425: PPUSH
9426: CALL 19975 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9430: LD_EXP 46
9434: PPUSH
9435: LD_STRING DH-Med-a-3
9437: PPUSH
9438: CALL_OW 88
// if hasGivi then
9442: LD_VAR 0 1
9446: IFFALSE 9462
// Say ( Givi , DG-Med-a-4 ) else
9448: LD_EXP 47
9452: PPUSH
9453: LD_STRING DG-Med-a-4
9455: PPUSH
9456: CALL_OW 88
9460: GO 9567
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9462: LD_EXP 14
9466: PUSH
9467: LD_EXP 57
9471: ISECT
9472: PPUSH
9473: LD_INT 22
9475: PUSH
9476: LD_INT 2
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 26
9485: PUSH
9486: LD_INT 1
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PPUSH
9497: CALL_OW 72
9501: PUSH
9502: LD_INT 1
9504: ARRAY
9505: PPUSH
9506: LD_STRING DArm-Med-f-4
9508: PPUSH
9509: CALL_OW 88
9513: NOT
9514: IFFALSE 9567
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9516: LD_EXP 14
9520: PUSH
9521: LD_EXP 57
9525: ISECT
9526: PPUSH
9527: LD_INT 22
9529: PUSH
9530: LD_INT 2
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 26
9539: PUSH
9540: LD_INT 2
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 72
9555: PUSH
9556: LD_INT 1
9558: ARRAY
9559: PPUSH
9560: LD_STRING DArf-Med-f-4
9562: PPUSH
9563: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9567: LD_ADDR_VAR 0 2
9571: PUSH
9572: LD_EXP 51
9576: PPUSH
9577: CALL_OW 302
9581: PUSH
9582: LD_EXP 51
9586: PUSH
9587: LD_EXP 14
9591: IN
9592: AND
9593: PUSH
9594: LD_EXP 51
9598: PPUSH
9599: CALL_OW 255
9603: PUSH
9604: LD_INT 2
9606: EQUAL
9607: AND
9608: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9609: LD_EXP 48
9613: PPUSH
9614: CALL_OW 302
9618: PUSH
9619: LD_EXP 48
9623: PUSH
9624: LD_EXP 14
9628: IN
9629: AND
9630: PUSH
9631: LD_EXP 48
9635: PPUSH
9636: CALL_OW 255
9640: PUSH
9641: LD_INT 2
9643: EQUAL
9644: AND
9645: IFFALSE 9677
// begin Say ( Mike , DM-Med-5 ) ;
9647: LD_EXP 48
9651: PPUSH
9652: LD_STRING DM-Med-5
9654: PPUSH
9655: CALL_OW 88
// if hasKaia then
9659: LD_VAR 0 2
9663: IFFALSE 9677
// Say ( Kaia , DK-Med-6 ) ;
9665: LD_EXP 51
9669: PPUSH
9670: LD_STRING DK-Med-6
9672: PPUSH
9673: CALL_OW 88
// end ; if hasKaia then
9677: LD_VAR 0 2
9681: IFFALSE 9922
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9683: LD_INT 175
9685: PPUSH
9686: LD_INT 123
9688: PPUSH
9689: LD_INT 2
9691: PPUSH
9692: LD_INT 8
9694: NEG
9695: PPUSH
9696: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9700: LD_INT 175
9702: PPUSH
9703: LD_INT 123
9705: PPUSH
9706: LD_INT 2
9708: PPUSH
9709: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9713: LD_INT 175
9715: PPUSH
9716: LD_INT 123
9718: PPUSH
9719: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9723: LD_EXP 51
9727: PPUSH
9728: LD_STRING DK-Med-7
9730: PPUSH
9731: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9735: LD_EXP 51
9739: PPUSH
9740: LD_STRING DK-Med-8
9742: PPUSH
9743: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9747: LD_EXP 53
9751: PPUSH
9752: CALL_OW 302
9756: PUSH
9757: LD_EXP 53
9761: PUSH
9762: LD_EXP 14
9766: IN
9767: AND
9768: PUSH
9769: LD_EXP 53
9773: PPUSH
9774: CALL_OW 255
9778: PUSH
9779: LD_INT 2
9781: EQUAL
9782: AND
9783: IFFALSE 9841
// begin Say ( Markov , DMar-Med-9 ) ;
9785: LD_EXP 53
9789: PPUSH
9790: LD_STRING DMar-Med-9
9792: PPUSH
9793: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9797: LD_EXP 51
9801: PPUSH
9802: LD_STRING DK-Med-10
9804: PPUSH
9805: CALL_OW 88
// if hasGivi then
9809: LD_VAR 0 1
9813: IFFALSE 9829
// Say ( Kaia , DK-Med-11 ) else
9815: LD_EXP 51
9819: PPUSH
9820: LD_STRING DK-Med-11
9822: PPUSH
9823: CALL_OW 88
9827: GO 9841
// Say ( Kaia , DK-Med-a-11 ) ;
9829: LD_EXP 51
9833: PPUSH
9834: LD_STRING DK-Med-a-11
9836: PPUSH
9837: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9841: LD_EXP 50
9845: PPUSH
9846: CALL_OW 302
9850: PUSH
9851: LD_EXP 50
9855: PUSH
9856: LD_EXP 14
9860: IN
9861: AND
9862: PUSH
9863: LD_EXP 50
9867: PPUSH
9868: CALL_OW 255
9872: PUSH
9873: LD_INT 2
9875: EQUAL
9876: AND
9877: IFFALSE 9922
// begin Say ( Kamil , DKam-Med-12 ) ;
9879: LD_EXP 50
9883: PPUSH
9884: LD_STRING DKam-Med-12
9886: PPUSH
9887: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9891: LD_EXP 50
9895: PPUSH
9896: LD_STRING DKam-Med-13
9898: PPUSH
9899: CALL_OW 88
// if not hasExplosionCollected then
9903: LD_EXP 23
9907: NOT
9908: IFFALSE 9922
// Say ( Heike , DH-Med-d-14 ) ;
9910: LD_EXP 46
9914: PPUSH
9915: LD_STRING DH-Med-d-14
9917: PPUSH
9918: CALL_OW 88
// end ; end ; DialogueOff ;
9922: CALL_OW 7
// adminAreaDiscovered := true ;
9926: LD_ADDR_EXP 22
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// laundryAllowed := true ;
9934: LD_ADDR_EXP 26
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// end ;
9942: PPOPN 2
9944: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9945: LD_EXP 49
9949: PUSH
9950: LD_EXP 56
9954: NOT
9955: AND
9956: PUSH
9957: LD_EXP 49
9961: PUSH
9962: LD_EXP 14
9966: IN
9967: NOT
9968: AND
9969: PUSH
9970: LD_EXP 14
9974: PPUSH
9975: LD_INT 22
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 72
9989: PUSH
9990: LD_INT 4
9992: GREATER
9993: AND
9994: PUSH
9995: LD_EXP 17
9999: NOT
10000: AND
10001: PUSH
10002: LD_EXP 30
10006: NOT
10007: AND
10008: IFFALSE 10725
10010: GO 10012
10012: DISABLE
10013: LD_INT 0
10015: PPUSH
10016: PPUSH
// begin DialogueOn ;
10017: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10021: LD_ADDR_VAR 0 1
10025: PUSH
10026: LD_EXP 47
10030: PPUSH
10031: CALL_OW 302
10035: PUSH
10036: LD_EXP 47
10040: PUSH
10041: LD_EXP 14
10045: IN
10046: AND
10047: PUSH
10048: LD_EXP 47
10052: PPUSH
10053: CALL_OW 255
10057: PUSH
10058: LD_INT 2
10060: EQUAL
10061: AND
10062: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10063: LD_EXP 46
10067: PPUSH
10068: LD_STRING DH-Med-b-1
10070: PPUSH
10071: CALL_OW 88
// if hasGivi then
10075: LD_VAR 0 1
10079: IFFALSE 10095
// Say ( Givi , DG-Med-a-2 ) else
10081: LD_EXP 47
10085: PPUSH
10086: LD_STRING DG-Med-a-2
10088: PPUSH
10089: CALL_OW 88
10093: GO 10200
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10095: LD_EXP 14
10099: PUSH
10100: LD_EXP 57
10104: ISECT
10105: PPUSH
10106: LD_INT 22
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 26
10118: PUSH
10119: LD_INT 1
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PPUSH
10130: CALL_OW 72
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: PPUSH
10139: LD_STRING DArm-Med-f-2
10141: PPUSH
10142: CALL_OW 88
10146: NOT
10147: IFFALSE 10200
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10149: LD_EXP 14
10153: PUSH
10154: LD_EXP 57
10158: ISECT
10159: PPUSH
10160: LD_INT 22
10162: PUSH
10163: LD_INT 2
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 26
10172: PUSH
10173: LD_INT 2
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 72
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: LD_STRING DArf-Med-f-2
10195: PPUSH
10196: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10200: LD_INT 154
10202: PPUSH
10203: LD_INT 119
10205: PPUSH
10206: LD_INT 70
10208: PPUSH
10209: CALL 19975 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10213: LD_EXP 46
10217: PPUSH
10218: LD_STRING DH-Med-a-3
10220: PPUSH
10221: CALL_OW 88
// if hasGivi then
10225: LD_VAR 0 1
10229: IFFALSE 10245
// Say ( Givi , DG-Med-a-4 ) else
10231: LD_EXP 47
10235: PPUSH
10236: LD_STRING DG-Med-a-4
10238: PPUSH
10239: CALL_OW 88
10243: GO 10350
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10245: LD_EXP 14
10249: PUSH
10250: LD_EXP 57
10254: ISECT
10255: PPUSH
10256: LD_INT 22
10258: PUSH
10259: LD_INT 2
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 26
10268: PUSH
10269: LD_INT 1
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PPUSH
10280: CALL_OW 72
10284: PUSH
10285: LD_INT 1
10287: ARRAY
10288: PPUSH
10289: LD_STRING DArm-Med-f-4
10291: PPUSH
10292: CALL_OW 88
10296: NOT
10297: IFFALSE 10350
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10299: LD_EXP 14
10303: PUSH
10304: LD_EXP 57
10308: ISECT
10309: PPUSH
10310: LD_INT 22
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 26
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PPUSH
10334: CALL_OW 72
10338: PUSH
10339: LD_INT 1
10341: ARRAY
10342: PPUSH
10343: LD_STRING DArf-Med-f-4
10345: PPUSH
10346: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10350: LD_ADDR_VAR 0 2
10354: PUSH
10355: LD_EXP 51
10359: PPUSH
10360: CALL_OW 302
10364: PUSH
10365: LD_EXP 51
10369: PUSH
10370: LD_EXP 14
10374: IN
10375: AND
10376: PUSH
10377: LD_EXP 51
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 2
10389: EQUAL
10390: AND
10391: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10392: LD_EXP 48
10396: PPUSH
10397: CALL_OW 302
10401: PUSH
10402: LD_EXP 48
10406: PUSH
10407: LD_EXP 14
10411: IN
10412: AND
10413: PUSH
10414: LD_EXP 48
10418: PPUSH
10419: CALL_OW 255
10423: PUSH
10424: LD_INT 2
10426: EQUAL
10427: AND
10428: IFFALSE 10460
// begin Say ( Mike , DM-Med-5 ) ;
10430: LD_EXP 48
10434: PPUSH
10435: LD_STRING DM-Med-5
10437: PPUSH
10438: CALL_OW 88
// if hasKaia then
10442: LD_VAR 0 2
10446: IFFALSE 10460
// Say ( Kaia , DK-Med-6 ) ;
10448: LD_EXP 51
10452: PPUSH
10453: LD_STRING DK-Med-6
10455: PPUSH
10456: CALL_OW 88
// end ; if hasKaia then
10460: LD_VAR 0 2
10464: IFFALSE 10705
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10466: LD_INT 175
10468: PPUSH
10469: LD_INT 123
10471: PPUSH
10472: LD_INT 2
10474: PPUSH
10475: LD_INT 8
10477: NEG
10478: PPUSH
10479: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10483: LD_INT 175
10485: PPUSH
10486: LD_INT 123
10488: PPUSH
10489: LD_INT 2
10491: PPUSH
10492: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10496: LD_INT 175
10498: PPUSH
10499: LD_INT 123
10501: PPUSH
10502: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10506: LD_EXP 51
10510: PPUSH
10511: LD_STRING DK-Med-7
10513: PPUSH
10514: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10518: LD_EXP 51
10522: PPUSH
10523: LD_STRING DK-Med-8
10525: PPUSH
10526: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10530: LD_EXP 53
10534: PPUSH
10535: CALL_OW 302
10539: PUSH
10540: LD_EXP 53
10544: PUSH
10545: LD_EXP 14
10549: IN
10550: AND
10551: PUSH
10552: LD_EXP 53
10556: PPUSH
10557: CALL_OW 255
10561: PUSH
10562: LD_INT 2
10564: EQUAL
10565: AND
10566: IFFALSE 10624
// begin Say ( Markov , DMar-Med-9 ) ;
10568: LD_EXP 53
10572: PPUSH
10573: LD_STRING DMar-Med-9
10575: PPUSH
10576: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10580: LD_EXP 51
10584: PPUSH
10585: LD_STRING DK-Med-10
10587: PPUSH
10588: CALL_OW 88
// if hasGivi then
10592: LD_VAR 0 1
10596: IFFALSE 10612
// Say ( Kaia , DK-Med-11 ) else
10598: LD_EXP 51
10602: PPUSH
10603: LD_STRING DK-Med-11
10605: PPUSH
10606: CALL_OW 88
10610: GO 10624
// Say ( Kaia , DK-Med-a-11 ) ;
10612: LD_EXP 51
10616: PPUSH
10617: LD_STRING DK-Med-a-11
10619: PPUSH
10620: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10624: LD_EXP 50
10628: PPUSH
10629: CALL_OW 302
10633: PUSH
10634: LD_EXP 50
10638: PUSH
10639: LD_EXP 14
10643: IN
10644: AND
10645: PUSH
10646: LD_EXP 50
10650: PPUSH
10651: CALL_OW 255
10655: PUSH
10656: LD_INT 2
10658: EQUAL
10659: AND
10660: IFFALSE 10705
// begin Say ( Kamil , DKam-Med-12 ) ;
10662: LD_EXP 50
10666: PPUSH
10667: LD_STRING DKam-Med-12
10669: PPUSH
10670: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10674: LD_EXP 50
10678: PPUSH
10679: LD_STRING DKam-Med-13
10681: PPUSH
10682: CALL_OW 88
// if not hasExplosionCollected then
10686: LD_EXP 23
10690: NOT
10691: IFFALSE 10705
// Say ( Heike , DH-Med-d-14 ) ;
10693: LD_EXP 46
10697: PPUSH
10698: LD_STRING DH-Med-d-14
10700: PPUSH
10701: CALL_OW 88
// end ; end ; DialogueOff ;
10705: CALL_OW 7
// adminAreaDiscovered := true ;
10709: LD_ADDR_EXP 22
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// laundryAllowed := true ;
10717: LD_ADDR_EXP 26
10721: PUSH
10722: LD_INT 1
10724: ST_TO_ADDR
// end ;
10725: PPOPN 2
10727: END
// every 0 0$1 trigger laundryAllowed do
10728: LD_EXP 26
10732: IFFALSE 10744
10734: GO 10736
10736: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10737: LD_STRING M1-laundry
10739: PPUSH
10740: CALL_OW 337
10744: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10745: LD_EXP 49
10749: NOT
10750: PUSH
10751: LD_EXP 56
10755: NOT
10756: AND
10757: PUSH
10758: LD_EXP 54
10762: PPUSH
10763: CALL_OW 302
10767: AND
10768: PUSH
10769: LD_EXP 54
10773: PUSH
10774: LD_EXP 14
10778: IN
10779: AND
10780: PUSH
10781: LD_EXP 54
10785: PPUSH
10786: CALL_OW 255
10790: PUSH
10791: LD_INT 2
10793: EQUAL
10794: AND
10795: PUSH
10796: LD_EXP 17
10800: NOT
10801: AND
10802: PUSH
10803: LD_EXP 30
10807: NOT
10808: AND
10809: IFFALSE 10965
10811: GO 10813
10813: DISABLE
// begin DialogueOn ;
10814: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10818: LD_INT 152
10820: PPUSH
10821: LD_INT 115
10823: PPUSH
10824: LD_INT 2
10826: PPUSH
10827: LD_INT 16
10829: NEG
10830: PPUSH
10831: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10835: LD_INT 152
10837: PPUSH
10838: LD_INT 115
10840: PPUSH
10841: LD_INT 2
10843: PPUSH
10844: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10848: LD_INT 152
10850: PPUSH
10851: LD_INT 115
10853: PPUSH
10854: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10858: LD_EXP 54
10862: PPUSH
10863: LD_STRING DO-Med-c-1
10865: PPUSH
10866: CALL_OW 88
// if not hasExplosionCollected then
10870: LD_EXP 23
10874: NOT
10875: IFFALSE 10891
// Say ( Heike , DH-Med-d-14 ) else
10877: LD_EXP 46
10881: PPUSH
10882: LD_STRING DH-Med-d-14
10884: PPUSH
10885: CALL_OW 88
10889: GO 10953
// begin Say ( Heike , DH-Med-c-2 ) ;
10891: LD_EXP 46
10895: PPUSH
10896: LD_STRING DH-Med-c-2
10898: PPUSH
10899: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10903: LD_EXP 51
10907: PPUSH
10908: CALL_OW 302
10912: PUSH
10913: LD_EXP 51
10917: PUSH
10918: LD_EXP 14
10922: IN
10923: AND
10924: PUSH
10925: LD_EXP 51
10929: PPUSH
10930: CALL_OW 255
10934: PUSH
10935: LD_INT 2
10937: EQUAL
10938: AND
10939: IFFALSE 10953
// Say ( Kaia , DK-Med-c-3 ) ;
10941: LD_EXP 51
10945: PPUSH
10946: LD_STRING DK-Med-c-3
10948: PPUSH
10949: CALL_OW 88
// end ; DialogueOff ;
10953: CALL_OW 7
// adminAreaDiscovered := true ;
10957: LD_ADDR_EXP 22
10961: PUSH
10962: LD_INT 1
10964: ST_TO_ADDR
// end ;
10965: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10966: LD_EXP 51
10970: PPUSH
10971: CALL_OW 256
10975: PUSH
10976: LD_INT 250
10978: LESS
10979: PUSH
10980: LD_EXP 51
10984: PUSH
10985: LD_EXP 14
10989: IN
10990: AND
10991: PUSH
10992: LD_EXP 17
10996: AND
10997: PUSH
10998: LD_EXP 24
11002: AND
11003: IFFALSE 11132
11005: GO 11007
11007: DISABLE
// begin DialogueOn ;
11008: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11012: LD_EXP 51
11016: PPUSH
11017: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11021: LD_EXP 51
11025: PPUSH
11026: LD_STRING DK-death-1
11028: PPUSH
11029: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11033: LD_EXP 46
11037: PPUSH
11038: LD_STRING DH-death-2
11040: PPUSH
11041: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11045: LD_EXP 51
11049: PPUSH
11050: LD_STRING DK-death-3
11052: PPUSH
11053: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11057: LD_EXP 51
11061: PPUSH
11062: LD_STRING DK-death-4
11064: PPUSH
11065: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11069: LD_EXP 51
11073: PPUSH
11074: LD_INT 8
11076: PPUSH
11077: CALL_OW 235
// ComStop ( Kaia ) ;
11081: LD_EXP 51
11085: PPUSH
11086: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11090: LD_INT 8
11092: PPUSH
11093: LD_INT 2
11095: PPUSH
11096: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11100: LD_ADDR_EXP 14
11104: PUSH
11105: LD_EXP 14
11109: PUSH
11110: LD_EXP 51
11114: DIFF
11115: ST_TO_ADDR
// DialogueOff ;
11116: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11120: LD_EXP 48
11124: PPUSH
11125: LD_STRING DM-death-5
11127: PPUSH
11128: CALL_OW 88
// end ;
11132: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11133: LD_EXP 25
11137: NOT
11138: PUSH
11139: LD_EXP 30
11143: NOT
11144: AND
11145: PUSH
11146: LD_EXP 59
11150: PUSH
11151: LD_EXP 14
11155: IN
11156: NOT
11157: AND
11158: PUSH
11159: LD_INT 2
11161: PPUSH
11162: LD_EXP 59
11166: PPUSH
11167: CALL_OW 292
11171: AND
11172: PUSH
11173: LD_EXP 46
11177: PPUSH
11178: LD_EXP 59
11182: PPUSH
11183: CALL_OW 296
11187: PUSH
11188: LD_INT 6
11190: LESS
11191: AND
11192: PUSH
11193: LD_EXP 17
11197: NOT
11198: AND
11199: IFFALSE 11423
11201: GO 11203
11203: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11204: LD_EXP 59
11208: PPUSH
11209: LD_EXP 46
11213: PPUSH
11214: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11218: LD_EXP 46
11222: PPUSH
11223: LD_EXP 59
11227: PPUSH
11228: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11232: LD_INT 10
11234: PPUSH
11235: CALL_OW 67
// DialogueOn ;
11239: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11243: LD_EXP 59
11247: PPUSH
11248: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11252: LD_EXP 46
11256: PPUSH
11257: LD_STRING DH-Deal-1
11259: PPUSH
11260: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11264: LD_EXP 59
11268: PPUSH
11269: LD_STRING DJ-Deal-2
11271: PPUSH
11272: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11276: LD_EXP 46
11280: PPUSH
11281: LD_STRING DH-Deal-3
11283: PPUSH
11284: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11288: LD_EXP 59
11292: PPUSH
11293: LD_STRING DJ-Deal-4
11295: PPUSH
11296: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11300: LD_EXP 59
11304: PPUSH
11305: LD_STRING DJ-Deal-5
11307: PPUSH
11308: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11312: LD_EXP 59
11316: PPUSH
11317: LD_STRING DJ-Deal-6
11319: PPUSH
11320: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11324: LD_EXP 59
11328: PPUSH
11329: LD_STRING DJ-Deal-7
11331: PPUSH
11332: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11336: LD_EXP 46
11340: PPUSH
11341: LD_STRING DH-Deal-8
11343: PPUSH
11344: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11348: LD_EXP 46
11352: PPUSH
11353: LD_STRING DH-Deal-9
11355: PPUSH
11356: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11360: LD_EXP 59
11364: PPUSH
11365: LD_STRING DJ-Deal-10
11367: PPUSH
11368: CALL_OW 88
// DialogueOff ;
11372: CALL_OW 7
// contactWithAmerican := true ;
11376: LD_ADDR_EXP 25
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11384: LD_STRING M1-american-out
11386: PPUSH
11387: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11391: LD_EXP 59
11395: PPUSH
11396: LD_INT 2
11398: PPUSH
11399: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11403: LD_ADDR_EXP 14
11407: PUSH
11408: LD_EXP 14
11412: PPUSH
11413: LD_EXP 59
11417: PPUSH
11418: CALL 66962 0 2
11422: ST_TO_ADDR
// end ;
11423: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11424: LD_EXP 25
11428: PUSH
11429: LD_EXP 30
11433: NOT
11434: AND
11435: PUSH
11436: LD_EXP 59
11440: PUSH
11441: LD_EXP 14
11445: IN
11446: NOT
11447: AND
11448: PUSH
11449: LD_INT 2
11451: PPUSH
11452: LD_EXP 59
11456: PPUSH
11457: CALL_OW 292
11461: AND
11462: PUSH
11463: LD_EXP 46
11467: PPUSH
11468: LD_EXP 59
11472: PPUSH
11473: CALL_OW 296
11477: PUSH
11478: LD_INT 6
11480: LESS
11481: AND
11482: PUSH
11483: LD_EXP 17
11487: NOT
11488: AND
11489: IFFALSE 11614
11491: GO 11493
11493: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11494: LD_EXP 59
11498: PPUSH
11499: LD_EXP 46
11503: PPUSH
11504: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11508: LD_EXP 46
11512: PPUSH
11513: LD_EXP 59
11517: PPUSH
11518: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11522: LD_INT 10
11524: PPUSH
11525: CALL_OW 67
// DialogueOn ;
11529: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11533: LD_EXP 59
11537: PPUSH
11538: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11542: LD_EXP 59
11546: PPUSH
11547: LD_STRING DJ-Escort-1
11549: PPUSH
11550: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11554: LD_EXP 46
11558: PPUSH
11559: LD_STRING DH-Escort-2
11561: PPUSH
11562: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11566: LD_EXP 59
11570: PPUSH
11571: LD_STRING DJ-Escort-3
11573: PPUSH
11574: CALL_OW 88
// DialogueOff ;
11578: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11582: LD_EXP 59
11586: PPUSH
11587: LD_INT 2
11589: PPUSH
11590: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11594: LD_ADDR_EXP 14
11598: PUSH
11599: LD_EXP 14
11603: PPUSH
11604: LD_EXP 59
11608: PPUSH
11609: CALL 66962 0 2
11613: ST_TO_ADDR
// end ;
11614: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11615: LD_EXP 25
11619: PUSH
11620: LD_EXP 30
11624: NOT
11625: AND
11626: PUSH
11627: LD_EXP 58
11631: PUSH
11632: LD_EXP 14
11636: DIFF
11637: PPUSH
11638: LD_INT 22
11640: PUSH
11641: LD_INT 4
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 3
11650: PUSH
11651: LD_INT 120
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 101
11667: PUSH
11668: LD_INT 2
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: PPUSH
11680: CALL_OW 72
11684: AND
11685: PUSH
11686: LD_EXP 17
11690: NOT
11691: AND
11692: IFFALSE 11919
11694: GO 11696
11696: DISABLE
11697: LD_INT 0
11699: PPUSH
// begin enable ;
11700: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11701: LD_ADDR_VAR 0 1
11705: PUSH
11706: LD_EXP 58
11710: PUSH
11711: LD_EXP 14
11715: DIFF
11716: PPUSH
11717: LD_INT 22
11719: PUSH
11720: LD_INT 4
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 91
11729: PUSH
11730: LD_EXP 46
11734: PUSH
11735: LD_INT 6
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 101
11745: PUSH
11746: LD_INT 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: PPUSH
11758: CALL_OW 72
11762: PPUSH
11763: LD_EXP 46
11767: PPUSH
11768: CALL_OW 74
11772: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11773: LD_VAR 0 1
11777: PPUSH
11778: LD_EXP 46
11782: PPUSH
11783: CALL_OW 296
11787: PUSH
11788: LD_INT 6
11790: LESS
11791: IFFALSE 11919
// begin DialogueOn ;
11793: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11806: LD_EXP 46
11810: PPUSH
11811: LD_STRING DH-USsol-1
11813: PPUSH
11814: CALL_OW 88
// if un <> Jerry then
11818: LD_VAR 0 1
11822: PUSH
11823: LD_EXP 61
11827: NONEQUAL
11828: IFFALSE 11871
// if GetSex ( un ) = sex_male then
11830: LD_VAR 0 1
11834: PPUSH
11835: CALL_OW 258
11839: PUSH
11840: LD_INT 1
11842: EQUAL
11843: IFFALSE 11859
// Say ( un , DUSM-USsol-2 ) else
11845: LD_VAR 0 1
11849: PPUSH
11850: LD_STRING DUSM-USsol-2
11852: PPUSH
11853: CALL_OW 88
11857: GO 11871
// Say ( un , DUSF-USsol-2 ) ;
11859: LD_VAR 0 1
11863: PPUSH
11864: LD_STRING DUSF-USsol-2
11866: PPUSH
11867: CALL_OW 88
// DialogueOff ;
11871: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11875: LD_ADDR_EXP 14
11879: PUSH
11880: LD_EXP 14
11884: PPUSH
11885: LD_VAR 0 1
11889: PPUSH
11890: CALL 66962 0 2
11894: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 109
// SetSide ( un , 2 ) ;
11907: LD_VAR 0 1
11911: PPUSH
11912: LD_INT 2
11914: PPUSH
11915: CALL_OW 235
// end ; end ;
11919: PPOPN 1
11921: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11922: LD_EXP 57
11926: PUSH
11927: LD_EXP 30
11931: NOT
11932: AND
11933: PUSH
11934: LD_EXP 57
11938: PUSH
11939: LD_EXP 14
11943: DIFF
11944: PPUSH
11945: LD_INT 3
11947: PUSH
11948: LD_INT 120
11950: PUSH
11951: LD_INT 1
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 91
11964: PUSH
11965: LD_EXP 46
11969: PUSH
11970: LD_INT 6
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 101
11980: PUSH
11981: LD_INT 2
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: PPUSH
11993: CALL_OW 72
11997: AND
11998: PUSH
11999: LD_EXP 17
12003: NOT
12004: AND
12005: IFFALSE 12220
12007: GO 12009
12009: DISABLE
12010: LD_INT 0
12012: PPUSH
// begin enable ;
12013: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12014: LD_ADDR_VAR 0 1
12018: PUSH
12019: LD_EXP 57
12023: PUSH
12024: LD_EXP 14
12028: DIFF
12029: PPUSH
12030: LD_INT 22
12032: PUSH
12033: LD_INT 5
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 91
12042: PUSH
12043: LD_EXP 46
12047: PUSH
12048: LD_INT 6
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 101
12058: PUSH
12059: LD_INT 2
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 72
12075: PPUSH
12076: LD_EXP 46
12080: PPUSH
12081: CALL_OW 74
12085: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12086: LD_VAR 0 1
12090: PPUSH
12091: LD_EXP 46
12095: PPUSH
12096: CALL_OW 296
12100: PUSH
12101: LD_INT 6
12103: LESS
12104: IFFALSE 12220
// begin DialogueOn ;
12106: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12110: LD_VAR 0 1
12114: PPUSH
12115: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12119: LD_EXP 46
12123: PPUSH
12124: LD_STRING DH-USsol-1
12126: PPUSH
12127: CALL_OW 88
// if GetSex ( un ) = sex_male then
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 258
12140: PUSH
12141: LD_INT 1
12143: EQUAL
12144: IFFALSE 12160
// Say ( un , DArm-USsol-2 ) else
12146: LD_VAR 0 1
12150: PPUSH
12151: LD_STRING DArm-USsol-2
12153: PPUSH
12154: CALL_OW 88
12158: GO 12172
// Say ( un , DArf-USsol-3 ) ;
12160: LD_VAR 0 1
12164: PPUSH
12165: LD_STRING DArf-USsol-3
12167: PPUSH
12168: CALL_OW 88
// DialogueOff ;
12172: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12176: LD_ADDR_EXP 14
12180: PUSH
12181: LD_EXP 14
12185: PPUSH
12186: LD_VAR 0 1
12190: PPUSH
12191: CALL 66962 0 2
12195: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12196: LD_VAR 0 1
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 109
// SetSide ( un , 2 ) ;
12208: LD_VAR 0 1
12212: PPUSH
12213: LD_INT 2
12215: PPUSH
12216: CALL_OW 235
// end ; end ;
12220: PPOPN 1
12222: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12223: LD_EXP 58
12227: PPUSH
12228: LD_INT 101
12230: PUSH
12231: LD_INT 2
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PPUSH
12238: CALL_OW 72
12242: PUSH
12243: LD_EXP 14
12247: PPUSH
12248: LD_INT 22
12250: PUSH
12251: LD_INT 2
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PPUSH
12258: CALL_OW 72
12262: PUSH
12263: LD_INT 5
12265: GREATER
12266: AND
12267: PUSH
12268: LD_EXP 10
12272: NOT
12273: AND
12274: PUSH
12275: LD_EXP 30
12279: NOT
12280: AND
12281: PUSH
12282: LD_EXP 25
12286: NOT
12287: AND
12288: PUSH
12289: LD_EXP 17
12293: NOT
12294: AND
12295: IFFALSE 12410
12297: GO 12299
12299: DISABLE
12300: LD_INT 0
12302: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12303: LD_ADDR_VAR 0 1
12307: PUSH
12308: LD_EXP 58
12312: PPUSH
12313: LD_INT 22
12315: PUSH
12316: LD_INT 4
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 101
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PPUSH
12337: CALL_OW 72
12341: PUSH
12342: LD_INT 1
12344: ARRAY
12345: ST_TO_ADDR
// DialogueOn ;
12346: CALL_OW 6
// if GetSex ( un ) = sex_male then
12350: LD_VAR 0 1
12354: PPUSH
12355: CALL_OW 258
12359: PUSH
12360: LD_INT 1
12362: EQUAL
12363: IFFALSE 12379
// Say ( un , DUSm-USsol-a-2 ) else
12365: LD_VAR 0 1
12369: PPUSH
12370: LD_STRING DUSm-USsol-a-2
12372: PPUSH
12373: CALL_OW 88
12377: GO 12391
// Say ( un , DUSf-USsol-a-2 ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: LD_STRING DUSf-USsol-a-2
12386: PPUSH
12387: CALL_OW 88
// DialogueOff ;
12391: CALL_OW 7
// wait ( 0 0$2 ) ;
12395: LD_INT 70
12397: PPUSH
12398: CALL_OW 67
// isAlarm := true ;
12402: LD_ADDR_EXP 17
12406: PUSH
12407: LD_INT 1
12409: ST_TO_ADDR
// end ;
12410: PPOPN 1
12412: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12413: LD_EXP 17
12417: NOT
12418: PUSH
12419: LD_EXP 47
12423: PPUSH
12424: CALL_OW 302
12428: AND
12429: PUSH
12430: LD_EXP 47
12434: PPUSH
12435: CALL_OW 255
12439: PUSH
12440: LD_INT 2
12442: EQUAL
12443: AND
12444: PUSH
12445: LD_EXP 26
12449: AND
12450: PUSH
12451: LD_EXP 28
12455: NOT
12456: AND
12457: PUSH
12458: LD_EXP 27
12462: NOT
12463: AND
12464: PUSH
12465: LD_EXP 30
12469: NOT
12470: AND
12471: PUSH
12472: LD_EXP 47
12476: PPUSH
12477: LD_INT 165
12479: PPUSH
12480: CALL 20288 0 2
12484: AND
12485: IFFALSE 12617
12487: GO 12489
12489: DISABLE
// begin enable ;
12490: ENABLE
// InGameOn ;
12491: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12495: LD_EXP 47
12499: PPUSH
12500: LD_INT 5
12502: PPUSH
12503: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12507: LD_INT 165
12509: PPUSH
12510: LD_INT 5
12512: PPUSH
12513: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12517: LD_EXP 47
12521: PPUSH
12522: LD_INT 165
12524: PPUSH
12525: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12529: LD_INT 35
12531: PPUSH
12532: CALL_OW 67
// until IsInUnit ( Givi ) ;
12536: LD_EXP 47
12540: PPUSH
12541: CALL_OW 310
12545: IFFALSE 12529
// case Query ( GiviInLaundry ) of 1 :
12547: LD_STRING GiviInLaundry
12549: PPUSH
12550: CALL_OW 97
12554: PUSH
12555: LD_INT 1
12557: DOUBLE
12558: EQUAL
12559: IFTRUE 12563
12561: GO 12570
12563: POP
// SpawnGiviAsRussian ; 2 :
12564: CALL 1918 0 0
12568: GO 12582
12570: LD_INT 2
12572: DOUBLE
12573: EQUAL
12574: IFTRUE 12578
12576: GO 12581
12578: POP
// ; end ;
12579: GO 12582
12581: POP
// ComExitBuilding ( Givi ) ;
12582: LD_EXP 47
12586: PPUSH
12587: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12591: LD_EXP 47
12595: PPUSH
12596: LD_INT 2
12598: PPUSH
12599: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12603: LD_INT 165
12605: PPUSH
12606: LD_INT 3
12608: PPUSH
12609: CALL_OW 235
// InGameOff ;
12613: CALL_OW 9
// end ;
12617: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12618: LD_EXP 17
12622: NOT
12623: PUSH
12624: LD_EXP 28
12628: AND
12629: PUSH
12630: LD_EXP 47
12634: PPUSH
12635: CALL_OW 255
12639: PUSH
12640: LD_INT 2
12642: EQUAL
12643: AND
12644: PUSH
12645: LD_EXP 47
12649: PPUSH
12650: CALL_OW 248
12654: PUSH
12655: LD_INT 3
12657: EQUAL
12658: AND
12659: PUSH
12660: LD_EXP 47
12664: PPUSH
12665: LD_INT 119
12667: PPUSH
12668: CALL 20288 0 2
12672: AND
12673: PUSH
12674: LD_EXP 30
12678: NOT
12679: AND
12680: IFFALSE 12934
12682: GO 12684
12684: DISABLE
// begin InGameOn ;
12685: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12689: LD_EXP 47
12693: PPUSH
12694: LD_INT 3
12696: PPUSH
12697: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12701: LD_INT 10
12703: PPUSH
12704: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12708: LD_EXP 47
12712: PPUSH
12713: LD_INT 119
12715: PPUSH
12716: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12720: LD_INT 35
12722: PPUSH
12723: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12727: LD_EXP 47
12731: PPUSH
12732: LD_INT 119
12734: PPUSH
12735: CALL_OW 120
// until IsInUnit ( Givi ) ;
12739: LD_EXP 47
12743: PPUSH
12744: CALL_OW 310
12748: IFFALSE 12720
// DialogueOn ;
12750: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12754: LD_EXP 47
12758: PPUSH
12759: LD_STRING DG-Captive-1
12761: PPUSH
12762: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12766: LD_EXP 65
12770: PPUSH
12771: LD_STRING DCom-Captive-2
12773: PPUSH
12774: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12778: LD_EXP 47
12782: PPUSH
12783: LD_STRING DG-Captive-3
12785: PPUSH
12786: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12790: LD_EXP 65
12794: PPUSH
12795: LD_STRING DCom-Captive-4
12797: PPUSH
12798: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12802: LD_EXP 65
12806: PPUSH
12807: CALL_OW 64
// DialogueOff ;
12811: CALL_OW 7
// InGameOff ;
12815: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12819: LD_EXP 47
12823: PPUSH
12824: LD_INT 2
12826: PPUSH
12827: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12831: LD_EXP 47
12835: PPUSH
12836: CALL_OW 122
// if Aviradze then
12840: LD_EXP 56
12844: IFFALSE 12887
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12846: LD_ADDR_EXP 14
12850: PUSH
12851: LD_EXP 14
12855: PPUSH
12856: LD_EXP 56
12860: PPUSH
12861: CALL 66962 0 2
12865: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12866: LD_EXP 56
12870: PPUSH
12871: LD_INT 2
12873: PPUSH
12874: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12878: LD_EXP 56
12882: PPUSH
12883: CALL_OW 122
// end ; if Ibrahim then
12887: LD_EXP 49
12891: IFFALSE 12934
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12893: LD_ADDR_EXP 14
12897: PUSH
12898: LD_EXP 14
12902: PPUSH
12903: LD_EXP 49
12907: PPUSH
12908: CALL 66962 0 2
12912: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12913: LD_EXP 49
12917: PPUSH
12918: LD_INT 2
12920: PPUSH
12921: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12925: LD_EXP 49
12929: PPUSH
12930: CALL_OW 122
// end ; end ;
12934: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12935: LD_EXP 17
12939: NOT
12940: PUSH
12941: LD_EXP 27
12945: AND
12946: PUSH
12947: LD_EXP 46
12951: PPUSH
12952: CALL_OW 248
12956: PUSH
12957: LD_INT 3
12959: EQUAL
12960: AND
12961: PUSH
12962: LD_EXP 46
12966: PPUSH
12967: LD_INT 119
12969: PPUSH
12970: CALL 20288 0 2
12974: AND
12975: PUSH
12976: LD_EXP 30
12980: NOT
12981: AND
12982: IFFALSE 13281
12984: GO 12986
12986: DISABLE
// begin InGameOn ;
12987: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12991: LD_EXP 46
12995: PPUSH
12996: LD_INT 3
12998: PPUSH
12999: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13003: LD_INT 10
13005: PPUSH
13006: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13010: LD_EXP 46
13014: PPUSH
13015: LD_INT 119
13017: PPUSH
13018: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13022: LD_INT 35
13024: PPUSH
13025: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13029: LD_EXP 46
13033: PPUSH
13034: LD_INT 119
13036: PPUSH
13037: CALL_OW 120
// until IsInUnit ( Heike ) ;
13041: LD_EXP 46
13045: PPUSH
13046: CALL_OW 310
13050: IFFALSE 13022
// wait ( 0 0$1 ) ;
13052: LD_INT 35
13054: PPUSH
13055: CALL_OW 67
// DialogueOn ;
13059: CALL_OW 6
// if Aviradze and Ibrahim then
13063: LD_EXP 56
13067: PUSH
13068: LD_EXP 49
13072: AND
13073: IFFALSE 13089
// Say ( Heike , DH-Captive-a-1 ) else
13075: LD_EXP 46
13079: PPUSH
13080: LD_STRING DH-Captive-a-1
13082: PPUSH
13083: CALL_OW 88
13087: GO 13101
// Say ( Heike , DH-Captive-a-b-1 ) ;
13089: LD_EXP 46
13093: PPUSH
13094: LD_STRING DH-Captive-a-b-1
13096: PPUSH
13097: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13101: LD_EXP 65
13105: PPUSH
13106: LD_STRING DCom-Captive-a-2
13108: PPUSH
13109: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13113: LD_EXP 46
13117: PPUSH
13118: LD_STRING DH-Captive-a-3
13120: PPUSH
13121: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13125: LD_EXP 65
13129: PPUSH
13130: LD_STRING DCom-Captive-a-4
13132: PPUSH
13133: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13137: LD_EXP 46
13141: PPUSH
13142: LD_STRING DH-Captive-a-5
13144: PPUSH
13145: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13149: LD_EXP 65
13153: PPUSH
13154: CALL_OW 64
// DialogueOff ;
13158: CALL_OW 7
// InGameOff ;
13162: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13166: LD_EXP 46
13170: PPUSH
13171: LD_INT 2
13173: PPUSH
13174: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13178: LD_EXP 46
13182: PPUSH
13183: CALL_OW 122
// if Aviradze then
13187: LD_EXP 56
13191: IFFALSE 13234
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13193: LD_ADDR_EXP 14
13197: PUSH
13198: LD_EXP 14
13202: PPUSH
13203: LD_EXP 56
13207: PPUSH
13208: CALL 66962 0 2
13212: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13213: LD_EXP 56
13217: PPUSH
13218: LD_INT 2
13220: PPUSH
13221: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13225: LD_EXP 56
13229: PPUSH
13230: CALL_OW 122
// end ; if Ibrahim then
13234: LD_EXP 49
13238: IFFALSE 13281
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13240: LD_ADDR_EXP 14
13244: PUSH
13245: LD_EXP 14
13249: PPUSH
13250: LD_EXP 49
13254: PPUSH
13255: CALL 66962 0 2
13259: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13260: LD_EXP 49
13264: PPUSH
13265: LD_INT 2
13267: PPUSH
13268: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13272: LD_EXP 49
13276: PPUSH
13277: CALL_OW 122
// end ; end ;
13281: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13282: LD_INT 2
13284: PUSH
13285: LD_INT 25
13287: PUSH
13288: LD_INT 32
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 25
13297: PUSH
13298: LD_INT 34
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: IFFALSE 13326
13316: GO 13318
13318: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13319: LD_STRING M1-weapons-out
13321: PPUSH
13322: CALL_OW 604
13326: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13327: LD_INT 2
13329: PPUSH
13330: LD_EXP 61
13334: PPUSH
13335: CALL_OW 292
13339: PUSH
13340: LD_EXP 46
13344: PPUSH
13345: LD_EXP 61
13349: PPUSH
13350: CALL_OW 296
13354: AND
13355: PUSH
13356: LD_EXP 17
13360: NOT
13361: AND
13362: PUSH
13363: LD_EXP 30
13367: NOT
13368: AND
13369: IFFALSE 14227
13371: GO 13373
13373: DISABLE
13374: LD_INT 0
13376: PPUSH
13377: PPUSH
// begin if contactWithAmerican then
13378: LD_EXP 25
13382: IFFALSE 13479
// begin DialogueOn ;
13384: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13388: LD_EXP 61
13392: PPUSH
13393: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13397: LD_EXP 46
13401: PPUSH
13402: LD_STRING DH-USsol-1
13404: PPUSH
13405: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13409: LD_EXP 61
13413: PPUSH
13414: LD_INT 2
13416: PPUSH
13417: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13421: LD_ADDR_EXP 58
13425: PUSH
13426: LD_EXP 58
13430: PPUSH
13431: LD_EXP 61
13435: PPUSH
13436: CALL 66962 0 2
13440: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13441: LD_ADDR_EXP 14
13445: PUSH
13446: LD_EXP 14
13450: PPUSH
13451: LD_EXP 48
13455: PPUSH
13456: CALL 66962 0 2
13460: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13461: LD_EXP 61
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: CALL_OW 109
// DialogueOff ;
13473: CALL_OW 7
// exit ;
13477: GO 14227
// end ; DialogueOn ;
13479: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13483: LD_EXP 61
13487: PPUSH
13488: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13492: LD_EXP 61
13496: PPUSH
13497: LD_STRING DJy-Food-1
13499: PPUSH
13500: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13504: LD_EXP 46
13508: PPUSH
13509: LD_STRING DH-Food-2
13511: PPUSH
13512: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13516: LD_EXP 61
13520: PPUSH
13521: LD_STRING DJy-Food-3
13523: PPUSH
13524: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13528: LD_EXP 61
13532: PPUSH
13533: LD_STRING DJy-Food-4
13535: PPUSH
13536: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13540: LD_EXP 46
13544: PPUSH
13545: LD_STRING DH-Food-5
13547: PPUSH
13548: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13552: LD_EXP 61
13556: PPUSH
13557: LD_STRING DJy-Food-6
13559: PPUSH
13560: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13564: LD_EXP 61
13568: PPUSH
13569: LD_STRING DJy-Food-7
13571: PPUSH
13572: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13576: LD_EXP 61
13580: PPUSH
13581: LD_STRING DJy-Food-8
13583: PPUSH
13584: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13588: LD_EXP 46
13592: PPUSH
13593: LD_STRING DH-Food-9
13595: PPUSH
13596: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13600: LD_EXP 61
13604: PPUSH
13605: LD_STRING DJy-Food-10
13607: PPUSH
13608: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13612: LD_EXP 46
13616: PPUSH
13617: LD_STRING DH-Food-11
13619: PPUSH
13620: CALL_OW 88
// DialogueOff ;
13624: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13628: LD_STRING M3
13630: PPUSH
13631: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13635: LD_INT 5
13637: PPUSH
13638: LD_INT 215
13640: PPUSH
13641: LD_INT 117
13643: PPUSH
13644: LD_INT 0
13646: PPUSH
13647: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13651: LD_INT 215
13653: PPUSH
13654: LD_INT 118
13656: PPUSH
13657: LD_INT 2
13659: PPUSH
13660: LD_INT 6
13662: NEG
13663: PPUSH
13664: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13668: LD_INT 215
13670: PPUSH
13671: LD_INT 118
13673: PPUSH
13674: LD_INT 2
13676: PPUSH
13677: CALL_OW 331
// foodDelivered := false ;
13681: LD_ADDR_VAR 0 2
13685: PUSH
13686: LD_INT 0
13688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13689: LD_INT 35
13691: PPUSH
13692: CALL_OW 67
// if hasMuchin then
13696: LD_EXP 30
13700: IFFALSE 13704
// continue ;
13702: GO 13689
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13704: LD_ADDR_VAR 0 1
13708: PUSH
13709: LD_EXP 14
13713: PUSH
13714: LD_EXP 46
13718: UNION
13719: PPUSH
13720: LD_INT 91
13722: PUSH
13723: LD_EXP 61
13727: PUSH
13728: LD_INT 6
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 25
13738: PUSH
13739: LD_INT 33
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PPUSH
13750: CALL_OW 72
13754: PUSH
13755: FOR_IN
13756: IFFALSE 13956
// if Carry ( i ) then
13758: LD_VAR 0 1
13762: PPUSH
13763: CALL_OW 281
13767: IFFALSE 13954
// begin DialogueOn ;
13769: CALL_OW 6
// foodDelivered := true ;
13773: LD_ADDR_VAR 0 2
13777: PUSH
13778: LD_INT 1
13780: ST_TO_ADDR
// case i of Heike :
13781: LD_VAR 0 1
13785: PUSH
13786: LD_EXP 46
13790: DOUBLE
13791: EQUAL
13792: IFTRUE 13796
13794: GO 13811
13796: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13797: LD_EXP 46
13801: PPUSH
13802: LD_STRING DH-Food-12
13804: PPUSH
13805: CALL_OW 88
13809: GO 13937
13811: LD_EXP 51
13815: DOUBLE
13816: EQUAL
13817: IFTRUE 13821
13819: GO 13836
13821: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13822: LD_EXP 51
13826: PPUSH
13827: LD_STRING DK-Food-a-12
13829: PPUSH
13830: CALL_OW 88
13834: GO 13937
13836: LD_EXP 53
13840: DOUBLE
13841: EQUAL
13842: IFTRUE 13846
13844: GO 13861
13846: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13847: LD_EXP 53
13851: PPUSH
13852: LD_STRING DMar-Food-a-12
13854: PPUSH
13855: CALL_OW 88
13859: GO 13937
13861: LD_EXP 47
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 13886
13871: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13872: LD_EXP 47
13876: PPUSH
13877: LD_STRING DG-Food-a-14
13879: PPUSH
13880: CALL_OW 88
13884: GO 13937
13886: LD_EXP 48
13890: DOUBLE
13891: EQUAL
13892: IFTRUE 13896
13894: GO 13911
13896: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13897: LD_EXP 48
13901: PPUSH
13902: LD_STRING DM-Food-a-15
13904: PPUSH
13905: CALL_OW 88
13909: GO 13937
13911: LD_EXP 50
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13921
13919: GO 13936
13921: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13922: LD_EXP 50
13926: PPUSH
13927: LD_STRING DKam-Food-a-16
13929: PPUSH
13930: CALL_OW 88
13934: GO 13937
13936: POP
// SetCargo ( i , mat_cans , 0 ) ;
13937: LD_VAR 0 1
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: LD_INT 0
13947: PPUSH
13948: CALL_OW 290
// break ;
13952: GO 13956
// end ;
13954: GO 13755
13956: POP
13957: POP
// until foodDelivered ;
13958: LD_VAR 0 2
13962: IFFALSE 13689
// givenFood := true ;
13964: LD_ADDR_EXP 33
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13972: LD_EXP 61
13976: PPUSH
13977: LD_STRING DJy-Food-13
13979: PPUSH
13980: CALL_OW 88
// hasVirus := true ;
13984: LD_ADDR_EXP 31
13988: PUSH
13989: LD_INT 1
13991: ST_TO_ADDR
// if not americanContact then
13992: LD_EXP 10
13996: NOT
13997: IFFALSE 14047
// begin Say ( Heike , DH-Food-14 ) ;
13999: LD_EXP 46
14003: PPUSH
14004: LD_STRING DH-Food-14
14006: PPUSH
14007: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14011: LD_EXP 61
14015: PPUSH
14016: LD_STRING DJy-Food-15
14018: PPUSH
14019: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14023: LD_EXP 61
14027: PPUSH
14028: LD_STRING DJy-Food-16
14030: PPUSH
14031: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14035: LD_EXP 61
14039: PPUSH
14040: LD_STRING DJy-Food-17
14042: PPUSH
14043: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14047: LD_STRING M3-out
14049: PPUSH
14050: CALL_OW 337
// DialogueOff ;
14054: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14058: LD_EXP 61
14062: PPUSH
14063: LD_INT 1
14065: PPUSH
14066: LD_INT 10
14068: PPUSH
14069: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14073: LD_EXP 61
14077: PPUSH
14078: LD_INT 95
14080: PPUSH
14081: LD_INT 17
14083: PPUSH
14084: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14088: LD_INT 35
14090: PPUSH
14091: CALL_OW 67
// if not HasTask ( Jerry ) then
14095: LD_EXP 61
14099: PPUSH
14100: CALL_OW 314
14104: NOT
14105: IFFALSE 14122
// ComMoveXY ( Jerry , 95 , 17 ) ;
14107: LD_EXP 61
14111: PPUSH
14112: LD_INT 95
14114: PPUSH
14115: LD_INT 17
14117: PPUSH
14118: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14122: LD_EXP 61
14126: PPUSH
14127: LD_INT 95
14129: PPUSH
14130: LD_INT 17
14132: PPUSH
14133: CALL_OW 307
14137: IFFALSE 14088
// SetCargo ( Jerry , mat_cans , 0 ) ;
14139: LD_EXP 61
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_INT 0
14149: PPUSH
14150: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14154: LD_ADDR_EXP 58
14158: PUSH
14159: LD_EXP 58
14163: PPUSH
14164: LD_EXP 61
14168: PPUSH
14169: CALL 66962 0 2
14173: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14174: LD_ADDR_VAR 0 1
14178: PUSH
14179: LD_INT 22
14181: PUSH
14182: LD_INT 4
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 23
14191: PUSH
14192: LD_INT 1
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PPUSH
14203: CALL_OW 69
14207: PUSH
14208: FOR_IN
14209: IFFALSE 14225
// SetLives ( i , 1000 ) ;
14211: LD_VAR 0 1
14215: PPUSH
14216: LD_INT 1000
14218: PPUSH
14219: CALL_OW 234
14223: GO 14208
14225: POP
14226: POP
// end ;
14227: PPOPN 2
14229: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14230: LD_EXP 30
14234: NOT
14235: PUSH
14236: LD_EXP 6
14240: AND
14241: IFFALSE 14667
14243: GO 14245
14245: DISABLE
14246: LD_INT 0
14248: PPUSH
14249: PPUSH
// begin tmp := [ ] ;
14250: LD_ADDR_VAR 0 2
14254: PUSH
14255: EMPTY
14256: ST_TO_ADDR
// uc_side := 3 ;
14257: LD_ADDR_OWVAR 20
14261: PUSH
14262: LD_INT 3
14264: ST_TO_ADDR
// uc_nation := 3 ;
14265: LD_ADDR_OWVAR 21
14269: PUSH
14270: LD_INT 3
14272: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14273: LD_INT 1
14275: PPUSH
14276: LD_INT 8
14278: PPUSH
14279: CALL_OW 381
// un := CreateHuman ;
14283: LD_ADDR_VAR 0 1
14287: PUSH
14288: CALL_OW 44
14292: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 173
14300: PPUSH
14301: LD_INT 104
14303: PPUSH
14304: LD_INT 0
14306: PPUSH
14307: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: LD_VAR 0 2
14320: PPUSH
14321: LD_VAR 0 1
14325: PPUSH
14326: CALL 66962 0 2
14330: ST_TO_ADDR
// un := CreateHuman ;
14331: LD_ADDR_VAR 0 1
14335: PUSH
14336: CALL_OW 44
14340: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14341: LD_VAR 0 1
14345: PPUSH
14346: LD_INT 73
14348: PPUSH
14349: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: LD_VAR 0 2
14362: PPUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL 66962 0 2
14372: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14373: LD_INT 35
14375: PPUSH
14376: CALL_OW 67
// if isAlarm then
14380: LD_EXP 17
14384: IFFALSE 14388
// exit ;
14386: GO 14667
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 12 ;
14388: LD_EXP 51
14392: PPUSH
14393: CALL_OW 255
14397: PUSH
14398: LD_INT 2
14400: EQUAL
14401: PUSH
14402: LD_EXP 51
14406: PPUSH
14407: LD_INT 73
14409: PPUSH
14410: CALL_OW 296
14414: PUSH
14415: LD_INT 12
14417: LESS
14418: AND
14419: IFFALSE 14373
// InGameOn ;
14421: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14425: LD_INT 73
14427: PPUSH
14428: CALL_OW 250
14432: PPUSH
14433: LD_INT 73
14435: PPUSH
14436: CALL_OW 251
14440: PPUSH
14441: LD_INT 2
14443: PPUSH
14444: LD_INT 9
14446: NEG
14447: PPUSH
14448: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14452: LD_INT 73
14454: PPUSH
14455: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14459: LD_EXP 51
14463: PPUSH
14464: LD_INT 73
14466: PPUSH
14467: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14471: LD_EXP 51
14475: PPUSH
14476: LD_STRING DK-Plastic-1
14478: PPUSH
14479: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14483: LD_EXP 51
14487: PPUSH
14488: LD_STRING DK-Plastic-2
14490: PPUSH
14491: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14495: LD_EXP 51
14499: PPUSH
14500: LD_INT 73
14502: PPUSH
14503: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14507: LD_INT 35
14509: PPUSH
14510: CALL_OW 67
// if isAlarm then
14514: LD_EXP 17
14518: IFFALSE 14522
// exit ;
14520: GO 14667
// until GetDistUnits ( Kaia , barExplosion ) < 8 ;
14522: LD_EXP 51
14526: PPUSH
14527: LD_INT 73
14529: PPUSH
14530: CALL_OW 296
14534: PUSH
14535: LD_INT 8
14537: LESS
14538: IFFALSE 14507
// ComHold ( Kaia ) ;
14540: LD_EXP 51
14544: PPUSH
14545: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14549: LD_VAR 0 2
14553: PUSH
14554: LD_INT 1
14556: ARRAY
14557: PPUSH
14558: LD_STRING DRum-Plastic-3
14560: PPUSH
14561: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14565: LD_VAR 0 2
14569: PUSH
14570: LD_INT 2
14572: ARRAY
14573: PPUSH
14574: LD_STRING DRum2-Plastic-4
14576: PPUSH
14577: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14581: LD_VAR 0 2
14585: PUSH
14586: LD_INT 1
14588: ARRAY
14589: PPUSH
14590: LD_STRING DRum-Plastic-5
14592: PPUSH
14593: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14597: LD_VAR 0 2
14601: PUSH
14602: LD_INT 2
14604: ARRAY
14605: PPUSH
14606: LD_STRING DRum2-Plastic-6
14608: PPUSH
14609: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14613: LD_EXP 51
14617: PPUSH
14618: LD_STRING DK-Plastic-7
14620: PPUSH
14621: CALL_OW 88
// InGameOff ;
14625: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14629: LD_INT 73
14631: PPUSH
14632: CALL_OW 250
14636: PPUSH
14637: LD_INT 73
14639: PPUSH
14640: CALL_OW 251
14644: PPUSH
14645: LD_INT 2
14647: PPUSH
14648: CALL_OW 331
// explosionsTakenByRussians := true ;
14652: LD_ADDR_EXP 21
14656: PUSH
14657: LD_INT 1
14659: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14660: LD_STRING ExplosivesInfo
14662: PPUSH
14663: CALL_OW 97
// end ;
14667: PPOPN 2
14669: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do var class ;
14670: LD_EXP 21
14674: PUSH
14675: LD_EXP 51
14679: PPUSH
14680: CALL_OW 255
14684: PUSH
14685: LD_INT 2
14687: EQUAL
14688: AND
14689: PUSH
14690: LD_EXP 51
14694: PPUSH
14695: LD_INT 61
14697: PPUSH
14698: CALL 20288 0 2
14702: AND
14703: PUSH
14704: LD_EXP 17
14708: NOT
14709: AND
14710: PUSH
14711: LD_EXP 30
14715: NOT
14716: AND
14717: IFFALSE 15000
14719: GO 14721
14721: DISABLE
14722: LD_INT 0
14724: PPUSH
// begin class := GetClass ( Kaia ) ;
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: LD_EXP 51
14734: PPUSH
14735: CALL_OW 257
14739: ST_TO_ADDR
// if class <> class_prison then
14740: LD_VAR 0 1
14744: PUSH
14745: LD_INT 33
14747: NONEQUAL
14748: IFFALSE 14841
// begin Query ( QKaiaWeapon ) ;
14750: LD_STRING QKaiaWeapon
14752: PPUSH
14753: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
14757: LD_INT 67
14759: PPUSH
14760: LD_INT 1
14762: PPUSH
14763: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
14767: LD_INT 192
14769: PPUSH
14770: LD_INT 71
14772: PPUSH
14773: CALL_OW 86
// kaiaWeaponHidden := class ;
14777: LD_ADDR_EXP 45
14781: PUSH
14782: LD_VAR 0 1
14786: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14787: LD_INT 35
14789: PPUSH
14790: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
14794: LD_EXP 51
14798: PPUSH
14799: LD_INT 67
14801: PPUSH
14802: CALL_OW 308
14806: IFFALSE 14787
// SetClass ( Kaia , class_prison ) ;
14808: LD_EXP 51
14812: PPUSH
14813: LD_INT 33
14815: PPUSH
14816: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
14820: LD_INT 35
14822: PPUSH
14823: CALL_OW 67
// until InEntrance ( Kaia , ruFac ) ;
14827: LD_EXP 51
14831: PPUSH
14832: LD_INT 61
14834: PPUSH
14835: CALL 20288 0 2
14839: IFFALSE 14820
// end ; if knowWhereExplosivesAre then
14841: LD_EXP 34
14845: IFFALSE 14849
// exit ;
14847: GO 15000
// InGameOn ;
14849: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14853: LD_INT 61
14855: PPUSH
14856: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14860: LD_EXP 51
14864: PPUSH
14865: LD_INT 3
14867: PPUSH
14868: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14872: LD_EXP 51
14876: PPUSH
14877: LD_INT 61
14879: PPUSH
14880: CALL_OW 120
// wait ( 0 0$2 ) ;
14884: LD_INT 70
14886: PPUSH
14887: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14891: LD_EXP 51
14895: PPUSH
14896: LD_STRING DK-Plastic-8
14898: PPUSH
14899: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14903: LD_EXP 67
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: LD_STRING DRuMch-Plastic-9
14914: PPUSH
14915: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14919: LD_EXP 51
14923: PPUSH
14924: LD_STRING DK-Plastic-10
14926: PPUSH
14927: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14931: LD_EXP 67
14935: PUSH
14936: LD_INT 1
14938: ARRAY
14939: PPUSH
14940: LD_STRING DRuMch-Plastic-a-11
14942: PPUSH
14943: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14947: LD_EXP 51
14951: PPUSH
14952: LD_STRING DK-Plastic-a-12
14954: PPUSH
14955: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14959: LD_EXP 67
14963: PUSH
14964: LD_INT 1
14966: ARRAY
14967: PPUSH
14968: LD_STRING DRuMch-Plastic-a-13
14970: PPUSH
14971: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14975: LD_EXP 51
14979: PPUSH
14980: LD_INT 2
14982: PPUSH
14983: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14987: LD_EXP 51
14991: PPUSH
14992: CALL_OW 122
// InGameOff ;
14996: CALL_OW 9
// end ;
15000: PPOPN 1
15002: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do var class ;
15003: LD_EXP 21
15007: PUSH
15008: LD_EXP 51
15012: PPUSH
15013: CALL_OW 255
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: AND
15022: PUSH
15023: LD_EXP 51
15027: PPUSH
15028: LD_INT 196
15030: PPUSH
15031: CALL 20288 0 2
15035: AND
15036: PUSH
15037: LD_EXP 17
15041: NOT
15042: AND
15043: PUSH
15044: LD_EXP 30
15048: NOT
15049: AND
15050: IFFALSE 15508
15052: GO 15054
15054: DISABLE
15055: LD_INT 0
15057: PPUSH
// begin class := GetClass ( Kaia ) ;
15058: LD_ADDR_VAR 0 1
15062: PUSH
15063: LD_EXP 51
15067: PPUSH
15068: CALL_OW 257
15072: ST_TO_ADDR
// if class <> class_prison then
15073: LD_VAR 0 1
15077: PUSH
15078: LD_INT 33
15080: NONEQUAL
15081: IFFALSE 15174
// begin Query ( QKaiaWeapon ) ;
15083: LD_STRING QKaiaWeapon
15085: PPUSH
15086: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15090: LD_INT 67
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15100: LD_INT 192
15102: PPUSH
15103: LD_INT 71
15105: PPUSH
15106: CALL_OW 86
// kaiaWeaponHidden := class ;
15110: LD_ADDR_EXP 45
15114: PUSH
15115: LD_VAR 0 1
15119: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15120: LD_INT 35
15122: PPUSH
15123: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15127: LD_EXP 51
15131: PPUSH
15132: LD_INT 67
15134: PPUSH
15135: CALL_OW 308
15139: IFFALSE 15120
// SetClass ( Kaia , class_prison ) ;
15141: LD_EXP 51
15145: PPUSH
15146: LD_INT 33
15148: PPUSH
15149: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15153: LD_INT 35
15155: PPUSH
15156: CALL_OW 67
// until InEntrance ( Kaia , ruWorkshop ) ;
15160: LD_EXP 51
15164: PPUSH
15165: LD_INT 196
15167: PPUSH
15168: CALL 20288 0 2
15172: IFFALSE 15153
// end ; InGameOn ;
15174: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
15178: LD_INT 196
15180: PPUSH
15181: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15185: LD_EXP 51
15189: PPUSH
15190: LD_INT 3
15192: PPUSH
15193: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
15197: LD_EXP 51
15201: PPUSH
15202: LD_INT 196
15204: PPUSH
15205: CALL_OW 120
// wait ( 0 0$2 ) ;
15209: LD_INT 70
15211: PPUSH
15212: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15216: LD_EXP 51
15220: PPUSH
15221: LD_STRING DK-Plastic-8
15223: PPUSH
15224: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15228: LD_EXP 68
15232: PUSH
15233: LD_INT 1
15235: ARRAY
15236: PPUSH
15237: LD_STRING DRuMch-Plastic-9
15239: PPUSH
15240: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15244: LD_EXP 51
15248: PPUSH
15249: LD_STRING DK-Plastic-10
15251: PPUSH
15252: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15256: LD_EXP 68
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DRuMch-Plastic-11
15267: PPUSH
15268: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15272: LD_EXP 51
15276: PPUSH
15277: LD_STRING DK-Plastic-12
15279: PPUSH
15280: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15284: LD_EXP 51
15288: PPUSH
15289: LD_STRING DK-Plastic-13
15291: PPUSH
15292: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15296: LD_EXP 68
15300: PUSH
15301: LD_INT 1
15303: ARRAY
15304: PPUSH
15305: LD_STRING DRuMch-Plastic-14
15307: PPUSH
15308: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15312: LD_EXP 69
15316: PPUSH
15317: LD_INT 167
15319: PPUSH
15320: LD_INT 34
15322: PPUSH
15323: LD_INT 3
15325: PPUSH
15326: LD_INT 0
15328: PPUSH
15329: CALL 69102 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15333: LD_EXP 69
15337: PPUSH
15338: LD_INT 196
15340: PPUSH
15341: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15345: LD_INT 35
15347: PPUSH
15348: CALL_OW 67
// if not HasTask ( Stiopa ) then
15352: LD_EXP 69
15356: PPUSH
15357: CALL_OW 314
15361: NOT
15362: IFFALSE 15376
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15364: LD_EXP 69
15368: PPUSH
15369: LD_INT 196
15371: PPUSH
15372: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15376: LD_EXP 69
15380: PPUSH
15381: CALL_OW 310
15385: IFFALSE 15345
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15387: LD_EXP 69
15391: PPUSH
15392: LD_STRING DSpn-Plastic-15
15394: PPUSH
15395: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15399: LD_EXP 70
15403: PPUSH
15404: LD_STRING DLr-Plastic-16
15406: PPUSH
15407: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15411: LD_EXP 51
15415: PPUSH
15416: LD_STRING DK-Plastic-17
15418: PPUSH
15419: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15423: LD_INT 10
15425: PPUSH
15426: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15430: LD_INT 196
15432: PPUSH
15433: CALL 20014 0 1
// SetSide ( Kaia , 2 ) ;
15437: LD_EXP 51
15441: PPUSH
15442: LD_INT 2
15444: PPUSH
15445: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15449: LD_EXP 51
15453: PPUSH
15454: CALL_OW 122
// InGameOff ;
15458: CALL_OW 9
// explosionsTakenByRussians := false ;
15462: LD_ADDR_EXP 21
15466: PUSH
15467: LD_INT 0
15469: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15470: LD_INT 170
15472: PPUSH
15473: LD_INT 28
15475: PPUSH
15476: LD_INT 2
15478: PPUSH
15479: LD_INT 6
15481: NEG
15482: PPUSH
15483: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15487: LD_INT 170
15489: PPUSH
15490: LD_INT 28
15492: PPUSH
15493: LD_INT 2
15495: PPUSH
15496: CALL_OW 331
// knowWhereExplosivesAre := true ;
15500: LD_ADDR_EXP 34
15504: PUSH
15505: LD_INT 1
15507: ST_TO_ADDR
// end ;
15508: PPOPN 1
15510: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15511: LD_EXP 34
15515: PUSH
15516: LD_EXP 51
15520: PPUSH
15521: CALL_OW 255
15525: PUSH
15526: LD_INT 2
15528: EQUAL
15529: AND
15530: PUSH
15531: LD_EXP 51
15535: PPUSH
15536: LD_INT 195
15538: PPUSH
15539: CALL 20288 0 2
15543: AND
15544: PUSH
15545: LD_EXP 17
15549: NOT
15550: AND
15551: PUSH
15552: LD_EXP 30
15556: NOT
15557: AND
15558: IFFALSE 15664
15560: GO 15562
15562: DISABLE
// begin InGameOn ;
15563: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15567: LD_EXP 51
15571: PPUSH
15572: LD_INT 3
15574: PPUSH
15575: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15579: LD_EXP 51
15583: PPUSH
15584: LD_INT 195
15586: PPUSH
15587: CALL_OW 120
// wait ( 0 0$1 ) ;
15591: LD_INT 35
15593: PPUSH
15594: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15598: LD_EXP 51
15602: PPUSH
15603: LD_STRING DK-Plastic-18
15605: PPUSH
15606: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15610: LD_STRING ExplosivesInfoUsage
15612: PPUSH
15613: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15617: LD_INT 195
15619: PPUSH
15620: CALL 20014 0 1
// SetSide ( Kaia , 2 ) ;
15624: LD_EXP 51
15628: PPUSH
15629: LD_INT 2
15631: PPUSH
15632: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15636: LD_EXP 51
15640: PPUSH
15641: CALL_OW 122
// InGameOff ;
15645: CALL_OW 9
// hasExplosionCollected := true ;
15649: LD_ADDR_EXP 23
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15657: LD_STRING M1-explosive-out
15659: PPUSH
15660: CALL_OW 337
// end ;
15664: END
// every 0 0$2 trigger kaiaWeaponHidden marked gameStartEvent do
15665: LD_EXP 45
15669: IFFALSE 15706
15671: GO 15673
15673: DISABLE
// begin enable ;
15674: ENABLE
// if not kaiaWeaponHidden then
15675: LD_EXP 45
15679: NOT
15680: IFFALSE 15684
// exit ;
15682: GO 15706
// SetClass ( Kaia , kaiaWeaponHidden ) ;
15684: LD_EXP 51
15688: PPUSH
15689: LD_EXP 45
15693: PPUSH
15694: CALL_OW 336
// kaiaWeaponHidden := 0 ;
15698: LD_ADDR_EXP 45
15702: PUSH
15703: LD_INT 0
15705: ST_TO_ADDR
// end ;
15706: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15707: LD_EXP 23
15711: PUSH
15712: LD_EXP 17
15716: NOT
15717: AND
15718: PUSH
15719: LD_EXP 30
15723: NOT
15724: AND
15725: IFFALSE 15900
15727: GO 15729
15729: DISABLE
15730: LD_INT 0
15732: PPUSH
15733: PPUSH
// begin for i in importantBuildingsList do
15734: LD_ADDR_VAR 0 1
15738: PUSH
15739: LD_EXP 35
15743: PUSH
15744: FOR_IN
15745: IFFALSE 15761
// MarkBuilding ( i , true ) ;
15747: LD_VAR 0 1
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL 20662 0 2
15759: GO 15744
15761: POP
15762: POP
// repeat wait ( 0 0$1 ) ;
15763: LD_INT 35
15765: PPUSH
15766: CALL_OW 67
// for i in importantBuildingsList do
15770: LD_ADDR_VAR 0 1
15774: PUSH
15775: LD_EXP 35
15779: PUSH
15780: FOR_IN
15781: IFFALSE 15891
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15783: LD_EXP 46
15787: PUSH
15788: LD_EXP 14
15792: UNION
15793: PPUSH
15794: LD_INT 22
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 21
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 91
15816: PUSH
15817: LD_VAR 0 1
15821: PUSH
15822: LD_INT 6
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: PPUSH
15835: CALL_OW 72
15839: IFFALSE 15889
// begin CenterNowOnUnits ( i ) ;
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 87
// PlaceExplosives ( i ) ;
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL 20559 0 1
// MarkBuilding ( i , false ) ;
15859: LD_VAR 0 1
15863: PPUSH
15864: LD_INT 0
15866: PPUSH
15867: CALL 20662 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15871: LD_ADDR_EXP 35
15875: PUSH
15876: LD_EXP 35
15880: PUSH
15881: LD_VAR 0 1
15885: DIFF
15886: ST_TO_ADDR
// continue ;
15887: GO 15780
// end ; end ;
15889: GO 15780
15891: POP
15892: POP
// until not importantBuildingsList ;
15893: LD_EXP 35
15897: NOT
15898: IFFALSE 15763
// end ;
15900: PPOPN 2
15902: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15903: LD_EXP 14
15907: PPUSH
15908: LD_INT 22
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 95
15920: PUSH
15921: LD_INT 23
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 72
15936: PUSH
15937: LD_EXP 46
15941: PPUSH
15942: CALL_OW 302
15946: AND
15947: PUSH
15948: LD_EXP 30
15952: NOT
15953: AND
15954: IFFALSE 15982
15956: GO 15958
15958: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15959: LD_EXP 46
15963: PPUSH
15964: LD_STRING DH-End-1
15966: PPUSH
15967: CALL_OW 88
// if not activeExplosives then
15971: LD_EXP 36
15975: NOT
15976: IFFALSE 15982
// Explode ;
15978: CALL 23432 0 0
// end ;
15982: END
// function SayHEmpty ( ) ; begin
15983: LD_INT 0
15985: PPUSH
// case rand ( 1 , 3 ) of 1 :
15986: LD_INT 1
15988: PPUSH
15989: LD_INT 3
15991: PPUSH
15992: CALL_OW 12
15996: PUSH
15997: LD_INT 1
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16020
16005: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
16006: LD_EXP 46
16010: PPUSH
16011: LD_STRING DH-Empty-1
16013: PPUSH
16014: CALL_OW 88
16018: GO 16067
16020: LD_INT 2
16022: DOUBLE
16023: EQUAL
16024: IFTRUE 16028
16026: GO 16043
16028: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
16029: LD_EXP 46
16033: PPUSH
16034: LD_STRING DH-Empty-2
16036: PPUSH
16037: CALL_OW 88
16041: GO 16067
16043: LD_INT 3
16045: DOUBLE
16046: EQUAL
16047: IFTRUE 16051
16049: GO 16066
16051: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
16052: LD_EXP 46
16056: PPUSH
16057: LD_STRING DH-Empty-3
16059: PPUSH
16060: CALL_OW 88
16064: GO 16067
16066: POP
// end ;
16067: LD_VAR 0 1
16071: RET
// function SayHVisited ( ) ; begin
16072: LD_INT 0
16074: PPUSH
// case rand ( 1 , 3 ) of 1 :
16075: LD_INT 1
16077: PPUSH
16078: LD_INT 3
16080: PPUSH
16081: CALL_OW 12
16085: PUSH
16086: LD_INT 1
16088: DOUBLE
16089: EQUAL
16090: IFTRUE 16094
16092: GO 16109
16094: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
16095: LD_EXP 46
16099: PPUSH
16100: LD_STRING DH-Visited-1
16102: PPUSH
16103: CALL_OW 88
16107: GO 16156
16109: LD_INT 2
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16132
16117: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
16118: LD_EXP 46
16122: PPUSH
16123: LD_STRING DH-Visited-2
16125: PPUSH
16126: CALL_OW 88
16130: GO 16156
16132: LD_INT 3
16134: DOUBLE
16135: EQUAL
16136: IFTRUE 16140
16138: GO 16155
16140: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
16141: LD_EXP 46
16145: PPUSH
16146: LD_STRING DH-Visited-3
16148: PPUSH
16149: CALL_OW 88
16153: GO 16156
16155: POP
// end ;
16156: LD_VAR 0 1
16160: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
16161: LD_EXP 17
16165: NOT
16166: PUSH
16167: LD_EXP 15
16171: AND
16172: PUSH
16173: LD_EXP 46
16177: PPUSH
16178: CALL_OW 255
16182: PUSH
16183: LD_INT 2
16185: EQUAL
16186: AND
16187: PUSH
16188: LD_EXP 46
16192: PPUSH
16193: CALL_OW 302
16197: AND
16198: PUSH
16199: LD_EXP 46
16203: PPUSH
16204: CALL_OW 316
16208: AND
16209: PUSH
16210: LD_EXP 30
16214: NOT
16215: AND
16216: IFFALSE 16282
16218: GO 16220
16220: DISABLE
16221: LD_INT 0
16223: PPUSH
// begin enable ;
16224: ENABLE
// for i in entranceAllowedList do
16225: LD_ADDR_VAR 0 1
16229: PUSH
16230: LD_EXP 15
16234: PUSH
16235: FOR_IN
16236: IFFALSE 16280
// if InEntrance ( Heike , i ) then
16238: LD_EXP 46
16242: PPUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL 20288 0 2
16252: IFFALSE 16278
// begin disable ( entranceEvent ) ;
16254: LD_INT 1
16256: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL 16285 0 1
// wait ( 0 0$3 ) ;
16266: LD_INT 105
16268: PPUSH
16269: CALL_OW 67
// enable ( entranceEvent ) ;
16273: LD_INT 1
16275: ENABLE_MARKED
// break ;
16276: GO 16280
// end ;
16278: GO 16235
16280: POP
16281: POP
// end ;
16282: PPOPN 1
16284: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
16285: LD_INT 0
16287: PPUSH
16288: PPUSH
16289: PPUSH
16290: PPUSH
// if not building then
16291: LD_VAR 0 1
16295: NOT
16296: IFFALSE 16300
// exit ;
16298: GO 18925
// if building in entranceVisitedList then
16300: LD_VAR 0 1
16304: PUSH
16305: LD_EXP 16
16309: IN
16310: IFFALSE 16318
// begin SayHVisited ( ) ;
16312: CALL 16072 0 0
// exit ;
16316: GO 18925
// end ; case Query ( EnterBuilding ) of 1 :
16318: LD_STRING EnterBuilding
16320: PPUSH
16321: CALL_OW 97
16325: PUSH
16326: LD_INT 1
16328: DOUBLE
16329: EQUAL
16330: IFTRUE 16334
16332: GO 16337
16334: POP
// ; 2 :
16335: GO 16351
16337: LD_INT 2
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16350
16345: POP
// exit ; end ;
16346: GO 18925
16348: GO 16351
16350: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16351: LD_ADDR_EXP 16
16355: PUSH
16356: LD_EXP 16
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL 66962 0 2
16370: ST_TO_ADDR
// InGameOn ;
16371: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16375: LD_EXP 46
16379: PPUSH
16380: LD_INT 5
16382: PPUSH
16383: CALL_OW 235
// SetSide ( building , 5 ) ;
16387: LD_VAR 0 1
16391: PPUSH
16392: LD_INT 5
16394: PPUSH
16395: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16399: LD_EXP 46
16403: PPUSH
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 120
// wait ( 0 0$3 ) ;
16413: LD_INT 105
16415: PPUSH
16416: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16420: LD_ADDR_VAR 0 4
16424: PUSH
16425: LD_INT 165
16427: PUSH
16428: LD_INT 106
16430: PUSH
16431: LD_INT 135
16433: PUSH
16434: LD_INT 162
16436: PUSH
16437: LD_INT 61
16439: PUSH
16440: LD_INT 109
16442: PUSH
16443: LD_INT 169
16445: PUSH
16446: LD_INT 13
16448: PUSH
16449: LD_INT 147
16451: PUSH
16452: LD_INT 137
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: ST_TO_ADDR
// if not building in tmp then
16467: LD_VAR 0 1
16471: PUSH
16472: LD_VAR 0 4
16476: IN
16477: NOT
16478: IFFALSE 16486
// SayHEmpty ( ) else
16480: CALL 15983 0 0
16484: GO 18872
// case building of laundry :
16486: LD_VAR 0 1
16490: PUSH
16491: LD_INT 165
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16499
16497: GO 16603
16499: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16500: LD_EXP 26
16504: PUSH
16505: LD_EXP 27
16509: NOT
16510: AND
16511: PUSH
16512: LD_EXP 28
16516: NOT
16517: AND
16518: IFFALSE 16573
// begin case Query ( HeikeInLaundry ) of 1 :
16520: LD_STRING HeikeInLaundry
16522: PPUSH
16523: CALL_OW 97
16527: PUSH
16528: LD_INT 1
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16536
16534: GO 16543
16536: POP
// SpawnHeikeAsRussian ; 2 :
16537: CALL 1810 0 0
16541: GO 16571
16543: LD_INT 2
16545: DOUBLE
16546: EQUAL
16547: IFTRUE 16551
16549: GO 16570
16551: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16552: LD_ADDR_EXP 16
16556: PUSH
16557: LD_EXP 16
16561: PUSH
16562: LD_VAR 0 1
16566: DIFF
16567: ST_TO_ADDR
16568: GO 16571
16570: POP
// end else
16571: GO 16601
// begin entranceVisitedList := entranceVisitedList diff building ;
16573: LD_ADDR_EXP 16
16577: PUSH
16578: LD_EXP 16
16582: PUSH
16583: LD_VAR 0 1
16587: DIFF
16588: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16589: LD_EXP 46
16593: PPUSH
16594: LD_STRING DH-Locked
16596: PPUSH
16597: CALL_OW 88
// end ; end ; dougBar :
16601: GO 18872
16603: LD_INT 106
16605: DOUBLE
16606: EQUAL
16607: IFTRUE 16611
16609: GO 16973
16611: POP
// begin if contactWithAmerican and americanContact then
16612: LD_EXP 25
16616: PUSH
16617: LD_EXP 10
16621: AND
16622: IFFALSE 16686
// begin Say ( Heike , DH-Escort-a-1 ) ;
16624: LD_EXP 46
16628: PPUSH
16629: LD_STRING DH-Escort-a-1
16631: PPUSH
16632: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16636: LD_EXP 60
16640: PPUSH
16641: LD_STRING DCa-Escort-a-2
16643: PPUSH
16644: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16648: LD_EXP 60
16652: PPUSH
16653: LD_STRING DCa-Escort-a-3
16655: PPUSH
16656: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16660: LD_EXP 46
16664: PPUSH
16665: LD_STRING DH-Escort-a-4
16667: PPUSH
16668: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16672: LD_EXP 46
16676: PPUSH
16677: LD_STRING DH-Escort-a-5
16679: PPUSH
16680: CALL_OW 88
// end else
16684: GO 16930
// if contactWithAmerican then
16686: LD_EXP 25
16690: IFFALSE 16730
// begin Say ( Heike , DH-Escort-b-1 ) ;
16692: LD_EXP 46
16696: PPUSH
16697: LD_STRING DH-Escort-b-1
16699: PPUSH
16700: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16704: LD_EXP 60
16708: PPUSH
16709: LD_STRING DCa-Escort-b-2
16711: PPUSH
16712: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16716: LD_EXP 60
16720: PPUSH
16721: LD_STRING DCa-Escort-b-3
16723: PPUSH
16724: CALL_OW 88
// end else
16728: GO 16930
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16730: LD_EXP 60
16734: PPUSH
16735: LD_STRING DCa-Deal-a-1
16737: PPUSH
16738: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16742: LD_EXP 60
16746: PPUSH
16747: LD_STRING DCa-Deal-a-2
16749: PPUSH
16750: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16754: LD_EXP 46
16758: PPUSH
16759: LD_STRING DH-Deal-a-3
16761: PPUSH
16762: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16766: LD_EXP 60
16770: PPUSH
16771: LD_STRING DCa-Deal-a-4
16773: PPUSH
16774: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16778: LD_EXP 46
16782: PPUSH
16783: LD_STRING DH-Deal-a-5
16785: PPUSH
16786: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16790: LD_EXP 60
16794: PPUSH
16795: LD_STRING DCa-Deal-a-6
16797: PPUSH
16798: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16802: LD_EXP 60
16806: PPUSH
16807: LD_STRING DCa-Deal-a-7
16809: PPUSH
16810: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16814: LD_EXP 60
16818: PPUSH
16819: LD_STRING DCa-Deal-a-8
16821: PPUSH
16822: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16826: LD_EXP 60
16830: PPUSH
16831: LD_STRING DCa-Deal-a-9
16833: PPUSH
16834: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16838: LD_EXP 60
16842: PPUSH
16843: LD_STRING DCa-Deal-a-10
16845: PPUSH
16846: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16850: LD_EXP 60
16854: PPUSH
16855: LD_STRING DCa-Deal-a-11
16857: PPUSH
16858: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16862: LD_INT 10
16864: PPUSH
16865: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16869: LD_EXP 60
16873: PPUSH
16874: LD_STRING DCa-Deal-a-12
16876: PPUSH
16877: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16881: LD_EXP 46
16885: PPUSH
16886: LD_STRING DH-Deal-a-13
16888: PPUSH
16889: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16893: LD_EXP 46
16897: PPUSH
16898: LD_STRING DH-Deal-a-14
16900: PPUSH
16901: CALL_OW 88
// contactWithAmerican := true ;
16905: LD_ADDR_EXP 25
16909: PUSH
16910: LD_INT 1
16912: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16913: LD_INT 1
16915: PPUSH
16916: LD_STRING 08_DealWithDoug
16918: PPUSH
16919: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16923: LD_STRING M1-american-out
16925: PPUSH
16926: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16930: LD_EXP 60
16934: PPUSH
16935: LD_INT 2
16937: PPUSH
16938: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16942: LD_ADDR_EXP 14
16946: PUSH
16947: LD_EXP 14
16951: PPUSH
16952: LD_EXP 60
16956: PPUSH
16957: CALL 66962 0 2
16961: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16962: LD_EXP 60
16966: PPUSH
16967: CALL_OW 122
// end ; usLab :
16971: GO 18872
16973: LD_INT 135
16975: DOUBLE
16976: EQUAL
16977: IFTRUE 16981
16979: GO 17300
16981: POP
// begin if hasSniperRifle then
16982: LD_EXP 11
16986: IFFALSE 17298
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16988: LD_EXP 51
16992: PPUSH
16993: CALL_OW 302
16997: PUSH
16998: LD_EXP 51
17002: PUSH
17003: LD_EXP 14
17007: IN
17008: AND
17009: PUSH
17010: LD_EXP 51
17014: PPUSH
17015: CALL_OW 255
17019: PUSH
17020: LD_INT 2
17022: EQUAL
17023: AND
17024: IFFALSE 17272
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
17026: LD_EXP 46
17030: PPUSH
17031: LD_EXP 51
17035: PPUSH
17036: CALL_OW 296
17040: PUSH
17041: LD_INT 10
17043: GREATER
17044: IFFALSE 17069
// begin Query ( KaiaDistance ) ;
17046: LD_STRING KaiaDistance
17048: PPUSH
17049: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
17053: LD_ADDR_EXP 16
17057: PUSH
17058: LD_EXP 16
17062: PUSH
17063: LD_INT 135
17065: DIFF
17066: ST_TO_ADDR
// end else
17067: GO 17270
// begin SetSide ( Kaia , 5 ) ;
17069: LD_EXP 51
17073: PPUSH
17074: LD_INT 5
17076: PPUSH
17077: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
17081: LD_EXP 51
17085: PPUSH
17086: LD_INT 135
17088: PPUSH
17089: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17093: LD_INT 35
17095: PPUSH
17096: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17100: LD_EXP 51
17104: PPUSH
17105: CALL_OW 310
17109: IFFALSE 17093
// Say ( Kaia , DK-Sniper-1 ) ;
17111: LD_EXP 51
17115: PPUSH
17116: LD_STRING DK-Sniper-1
17118: PPUSH
17119: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
17123: LD_EXP 51
17127: PPUSH
17128: CALL_OW 257
17132: PUSH
17133: LD_INT 34
17135: EQUAL
17136: PUSH
17137: LD_EXP 48
17141: PUSH
17142: LD_EXP 14
17146: IN
17147: AND
17148: PUSH
17149: LD_EXP 48
17153: PPUSH
17154: CALL_OW 302
17158: AND
17159: IFFALSE 17190
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
17161: LD_EXP 51
17165: PPUSH
17166: LD_STRING DK-Sniper-a-2
17168: PPUSH
17169: CALL_OW 88
// giveSniperRifleToMike := true ;
17173: LD_ADDR_EXP 42
17177: PUSH
17178: LD_INT 1
17180: ST_TO_ADDR
// Query ( QSniperMike ) ;
17181: LD_STRING QSniperMike
17183: PPUSH
17184: CALL_OW 97
// end else
17188: GO 17249
// begin Say ( Kaia , DK-Sniper-2 ) ;
17190: LD_EXP 51
17194: PPUSH
17195: LD_STRING DK-Sniper-2
17197: PPUSH
17198: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
17202: LD_EXP 51
17206: PPUSH
17207: LD_INT 32
17209: PPUSH
17210: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
17214: LD_EXP 53
17218: PPUSH
17219: CALL_OW 302
17223: PUSH
17224: LD_EXP 53
17228: PUSH
17229: LD_EXP 14
17233: IN
17234: AND
17235: IFFALSE 17249
// Say ( Markov , DMar-Sniper-3 ) ;
17237: LD_EXP 53
17241: PPUSH
17242: LD_STRING DMar-Sniper-3
17244: PPUSH
17245: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17249: LD_EXP 51
17253: PPUSH
17254: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17258: LD_EXP 51
17262: PPUSH
17263: LD_INT 2
17265: PPUSH
17266: CALL_OW 235
// end ; end else
17270: GO 17298
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17272: LD_ADDR_EXP 16
17276: PUSH
17277: LD_EXP 16
17281: PUSH
17282: LD_INT 135
17284: DIFF
17285: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17286: LD_EXP 46
17290: PPUSH
17291: LD_STRING DH-Locked
17293: PPUSH
17294: CALL_OW 88
// end ; end ; end ; drugsLab :
17298: GO 18872
17300: LD_INT 162
17302: DOUBLE
17303: EQUAL
17304: IFTRUE 17308
17306: GO 17441
17308: POP
// begin if hasStimDrugs then
17309: LD_EXP 9
17313: IFFALSE 17427
// begin wait ( 0 0$1 ) ;
17315: LD_INT 35
17317: PPUSH
17318: CALL_OW 67
// if not hasStimDrugsCollected then
17322: LD_EXP 24
17326: NOT
17327: IFFALSE 17369
// begin Say ( Heike , DH-Lab-1 ) ;
17329: LD_EXP 46
17333: PPUSH
17334: LD_STRING DH-Lab-1
17336: PPUSH
17337: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17341: LD_INT 5
17343: PPUSH
17344: LD_INT 2
17346: PPUSH
17347: LD_INT 2
17349: PPUSH
17350: CALL_OW 322
// hasStimDrugsCollected := true ;
17354: LD_ADDR_EXP 24
17358: PUSH
17359: LD_INT 1
17361: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17362: LD_STRING M1-drugs-out
17364: PPUSH
17365: CALL_OW 604
// end ; if not hasExplosionCollected then
17369: LD_EXP 23
17373: NOT
17374: IFFALSE 17392
// entranceVisitedList := entranceVisitedList diff drugsLab else
17376: LD_ADDR_EXP 16
17380: PUSH
17381: LD_EXP 16
17385: PUSH
17386: LD_INT 162
17388: DIFF
17389: ST_TO_ADDR
17390: GO 17425
// begin wait ( 0 0$3 ) ;
17392: LD_INT 105
17394: PPUSH
17395: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17399: LD_EXP 46
17403: PPUSH
17404: LD_STRING DH-Lab-2
17406: PPUSH
17407: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17411: LD_STRING M1-drugsLab-out
17413: PPUSH
17414: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17418: LD_INT 162
17420: PPUSH
17421: CALL 20559 0 1
// end ; end else
17425: GO 17439
// Say ( Heike , DH-Locked ) ;
17427: LD_EXP 46
17431: PPUSH
17432: LD_STRING DH-Locked
17434: PPUSH
17435: CALL_OW 88
// end ; ruFac :
17439: GO 18872
17441: LD_INT 61
17443: DOUBLE
17444: EQUAL
17445: IFTRUE 17449
17447: GO 17559
17449: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17450: LD_EXP 53
17454: PPUSH
17455: CALL_OW 302
17459: PUSH
17460: LD_EXP 53
17464: PUSH
17465: LD_EXP 14
17469: IN
17470: NOT
17471: AND
17472: IFFALSE 17553
// begin Say ( Heike , DH-Krastyo-1 ) ;
17474: LD_EXP 46
17478: PPUSH
17479: LD_STRING DH-Krastyo-1
17481: PPUSH
17482: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17486: LD_EXP 53
17490: PPUSH
17491: LD_STRING DMar-Krastyo-2
17493: PPUSH
17494: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17498: LD_EXP 53
17502: PPUSH
17503: LD_STRING DMar-Krastyo-3
17505: PPUSH
17506: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17510: LD_EXP 53
17514: PPUSH
17515: LD_INT 2
17517: PPUSH
17518: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17522: LD_ADDR_EXP 14
17526: PUSH
17527: LD_EXP 14
17531: PPUSH
17532: LD_EXP 53
17536: PPUSH
17537: CALL 66962 0 2
17541: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17542: LD_EXP 53
17546: PPUSH
17547: CALL_OW 122
// end else
17551: GO 17557
// SayHEmpty ( ) ;
17553: CALL 15983 0 0
// end ; ruBarKam :
17557: GO 18872
17559: LD_INT 109
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17714
17567: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17568: LD_EXP 50
17572: PPUSH
17573: CALL_OW 302
17577: PUSH
17578: LD_EXP 50
17582: PUSH
17583: LD_EXP 14
17587: IN
17588: NOT
17589: AND
17590: IFFALSE 17708
// begin Say ( Heike , DH-Kamil-1 ) ;
17592: LD_EXP 46
17596: PPUSH
17597: LD_STRING DH-Kamil-1
17599: PPUSH
17600: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17604: LD_EXP 50
17608: PPUSH
17609: LD_STRING DKam-Kamil-2
17611: PPUSH
17612: CALL_OW 88
// if IsOk ( Sophia ) then
17616: LD_EXP 52
17620: PPUSH
17621: CALL_OW 302
17625: IFFALSE 17665
// if Sophia in heikeSquad then
17627: LD_EXP 52
17631: PUSH
17632: LD_EXP 14
17636: IN
17637: IFFALSE 17653
// Say ( Kamil , DKam-Kamil-a-3 ) else
17639: LD_EXP 50
17643: PPUSH
17644: LD_STRING DKam-Kamil-a-3
17646: PPUSH
17647: CALL_OW 88
17651: GO 17665
// Say ( Kamil , DKam-Kamil-3 ) ;
17653: LD_EXP 50
17657: PPUSH
17658: LD_STRING DKam-Kamil-3
17660: PPUSH
17661: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17665: LD_EXP 50
17669: PPUSH
17670: LD_INT 2
17672: PPUSH
17673: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17677: LD_ADDR_EXP 14
17681: PUSH
17682: LD_EXP 14
17686: PPUSH
17687: LD_EXP 50
17691: PPUSH
17692: CALL 66962 0 2
17696: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17697: LD_EXP 50
17701: PPUSH
17702: CALL_OW 122
// end else
17706: GO 17712
// SayHEmpty ( ) ;
17708: CALL 15983 0 0
// end ; ruOutpost1 :
17712: GO 18872
17714: LD_INT 169
17716: DOUBLE
17717: EQUAL
17718: IFTRUE 17722
17720: GO 17959
17722: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17723: LD_EXP 55
17727: PPUSH
17728: CALL_OW 302
17732: PUSH
17733: LD_EXP 55
17737: PUSH
17738: LD_EXP 14
17742: IN
17743: NOT
17744: AND
17745: IFFALSE 17953
// begin if hasMethanol then
17747: LD_EXP 13
17751: IFFALSE 17882
// begin Say ( Heike , DH-Kurt-1 ) ;
17753: LD_EXP 46
17757: PPUSH
17758: LD_STRING DH-Kurt-1
17760: PPUSH
17761: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17765: LD_EXP 55
17769: PPUSH
17770: LD_STRING DKs-Kurt-2
17772: PPUSH
17773: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17777: LD_EXP 47
17781: PPUSH
17782: LD_INT 169
17784: PPUSH
17785: CALL_OW 296
17789: PUSH
17790: LD_INT 10
17792: LESS
17793: PUSH
17794: LD_EXP 47
17798: PUSH
17799: LD_EXP 14
17803: IN
17804: AND
17805: IFFALSE 17880
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17807: LD_EXP 47
17811: PPUSH
17812: LD_INT 100
17814: PPUSH
17815: LD_INT 37
17817: PPUSH
17818: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17822: LD_EXP 47
17826: PPUSH
17827: LD_INT 169
17829: PPUSH
17830: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17834: LD_INT 35
17836: PPUSH
17837: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17841: LD_EXP 47
17845: PPUSH
17846: LD_INT 169
17848: PPUSH
17849: CALL_OW 296
17853: PUSH
17854: LD_INT 7
17856: LESS
17857: IFFALSE 17834
// Say ( Givi , DG-Kurt-3 ) ;
17859: LD_EXP 47
17863: PPUSH
17864: LD_STRING DG-Kurt-3
17866: PPUSH
17867: CALL_OW 88
// ComStop ( Givi ) ;
17871: LD_EXP 47
17875: PPUSH
17876: CALL_OW 141
// end ; end else
17880: GO 17910
// begin Say ( Heike , DH-Kurt-1 ) ;
17882: LD_EXP 46
17886: PPUSH
17887: LD_STRING DH-Kurt-1
17889: PPUSH
17890: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17894: LD_EXP 55
17898: PPUSH
17899: LD_STRING DKs-Kurt-2
17901: PPUSH
17902: CALL_OW 88
// SpawnAdditionalRuGuards ;
17906: CALL 3592 0 0
// end ; SetSide ( Kurt , 2 ) ;
17910: LD_EXP 55
17914: PPUSH
17915: LD_INT 2
17917: PPUSH
17918: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17922: LD_ADDR_EXP 14
17926: PUSH
17927: LD_EXP 14
17931: PPUSH
17932: LD_EXP 55
17936: PPUSH
17937: CALL 66962 0 2
17941: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17942: LD_EXP 55
17946: PPUSH
17947: CALL_OW 122
// end else
17951: GO 17957
// SayHEmpty ( ) ;
17953: CALL 15983 0 0
// end ; ruOutpostBar :
17957: GO 18872
17959: LD_INT 13
17961: DOUBLE
17962: EQUAL
17963: IFTRUE 17967
17965: GO 18013
17967: POP
// begin if not hasGuardPatrolPlan then
17968: LD_EXP 18
17972: NOT
17973: IFFALSE 18007
// begin Say ( Heike , DH-PatrolPlan ) ;
17975: LD_EXP 46
17979: PPUSH
17980: LD_STRING DH-PatrolPlan
17982: PPUSH
17983: CALL_OW 88
// hasGuardPatrolPlan := true ;
17987: LD_ADDR_EXP 18
17991: PUSH
17992: LD_INT 1
17994: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17995: LD_INT 6
17997: PPUSH
17998: LD_INT 2
18000: PPUSH
18001: CALL_OW 343
// end else
18005: GO 18011
// SayHEmpty ( ) ;
18007: CALL 15983 0 0
// end ; ruKaiaBar :
18011: GO 18872
18013: LD_INT 147
18015: DOUBLE
18016: EQUAL
18017: IFTRUE 18021
18019: GO 18168
18021: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
18022: LD_EXP 51
18026: PPUSH
18027: CALL_OW 302
18031: PUSH
18032: LD_EXP 51
18036: PUSH
18037: LD_EXP 14
18041: IN
18042: NOT
18043: AND
18044: IFFALSE 18166
// begin Say ( Heike , DH-Kaia-1 ) ;
18046: LD_EXP 46
18050: PPUSH
18051: LD_STRING DH-Kaia-1
18053: PPUSH
18054: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
18058: LD_EXP 51
18062: PPUSH
18063: LD_STRING DK-Kaia-2
18065: PPUSH
18066: CALL_OW 88
// if hasSniperRifle then
18070: LD_EXP 11
18074: IFFALSE 18125
// begin if IsOk ( Markov ) then
18076: LD_EXP 53
18080: PPUSH
18081: CALL_OW 302
18085: IFFALSE 18101
// Say ( Kaia , DK-Kaia-3 ) else
18087: LD_EXP 51
18091: PPUSH
18092: LD_STRING DK-Kaia-3
18094: PPUSH
18095: CALL_OW 88
18099: GO 18113
// Say ( Kaia , DK-Kaia-a-3 ) ;
18101: LD_EXP 51
18105: PPUSH
18106: LD_STRING DK-Kaia-a-3
18108: PPUSH
18109: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
18113: LD_EXP 46
18117: PPUSH
18118: LD_STRING DH-Kaia-4
18120: PPUSH
18121: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
18125: LD_EXP 51
18129: PPUSH
18130: LD_INT 2
18132: PPUSH
18133: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
18137: LD_ADDR_EXP 14
18141: PUSH
18142: LD_EXP 14
18146: PPUSH
18147: LD_EXP 51
18151: PPUSH
18152: CALL 66962 0 2
18156: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
18157: LD_EXP 51
18161: PPUSH
18162: CALL_OW 122
// end ; end ; ruWeaponsBar :
18166: GO 18872
18168: LD_INT 137
18170: DOUBLE
18171: EQUAL
18172: IFTRUE 18176
18174: GO 18871
18176: POP
// begin if hasWeapons then
18177: LD_EXP 19
18181: IFFALSE 18857
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
18183: LD_ADDR_EXP 16
18187: PUSH
18188: LD_EXP 16
18192: PUSH
18193: LD_INT 137
18195: DIFF
18196: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
18197: LD_ADDR_VAR 0 4
18201: PUSH
18202: LD_EXP 14
18206: PPUSH
18207: LD_INT 91
18209: PUSH
18210: LD_EXP 46
18214: PUSH
18215: LD_INT 8
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 72
18227: ST_TO_ADDR
// if not heikeSquad or not tmp then
18228: LD_EXP 14
18232: NOT
18233: PUSH
18234: LD_VAR 0 4
18238: NOT
18239: OR
18240: IFFALSE 18256
// Say ( Heike , DH-Weapons-Alone ) else
18242: LD_EXP 46
18246: PPUSH
18247: LD_STRING DH-Weapons-Alone
18249: PPUSH
18250: CALL_OW 88
18254: GO 18855
// begin if not firstArmouryDialog then
18256: LD_EXP 39
18260: NOT
18261: IFFALSE 18320
// begin Say ( Heike , DH-Weapons-1 ) ;
18263: LD_EXP 46
18267: PPUSH
18268: LD_STRING DH-Weapons-1
18270: PPUSH
18271: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18275: LD_EXP 46
18279: PPUSH
18280: LD_STRING DH-Weapons-2
18282: PPUSH
18283: CALL_OW 88
// Query ( Weapons ) ;
18287: LD_STRING Weapons
18289: PPUSH
18290: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18294: LD_INT 65
18296: PPUSH
18297: LD_INT 1
18299: PPUSH
18300: CALL_OW 424
// canEquipWeapons := true ;
18304: LD_ADDR_EXP 41
18308: PUSH
18309: LD_INT 1
18311: ST_TO_ADDR
// firstArmouryDialog := true ;
18312: LD_ADDR_EXP 39
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18320: LD_EXP 8
18324: PUSH
18325: LD_EXP 51
18329: PUSH
18330: LD_VAR 0 4
18334: IN
18335: AND
18336: PUSH
18337: LD_EXP 51
18341: PPUSH
18342: CALL_OW 257
18346: PUSH
18347: LD_INT 34
18349: NONEQUAL
18350: AND
18351: IFFALSE 18497
// begin SetSide ( Kaia , 5 ) ;
18353: LD_EXP 51
18357: PPUSH
18358: LD_INT 5
18360: PPUSH
18361: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18365: LD_EXP 51
18369: PPUSH
18370: LD_INT 137
18372: PPUSH
18373: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18377: LD_INT 35
18379: PPUSH
18380: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18384: LD_EXP 51
18388: PPUSH
18389: CALL_OW 310
18393: IFFALSE 18377
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18395: LD_EXP 46
18399: PPUSH
18400: LD_STRING DH-Kaia-Revolver-2
18402: PPUSH
18403: CALL_OW 88
// SetClassKaiaRevolver ;
18407: CALL 1769 0 0
// hasRevolver := false ;
18411: LD_ADDR_EXP 8
18415: PUSH
18416: LD_INT 0
18418: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18419: LD_EXP 51
18423: PPUSH
18424: LD_INT 2
18426: PPUSH
18427: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18431: LD_EXP 51
18435: PPUSH
18436: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18440: LD_EXP 51
18444: PPUSH
18445: CALL_OW 257
18449: PUSH
18450: LD_INT 32
18452: EQUAL
18453: PUSH
18454: LD_EXP 48
18458: PUSH
18459: LD_EXP 14
18463: IN
18464: AND
18465: PUSH
18466: LD_EXP 48
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 2
18478: EQUAL
18479: AND
18480: IFFALSE 18497
// begin giveSniperRifleToMike := true ;
18482: LD_ADDR_EXP 42
18486: PUSH
18487: LD_INT 1
18489: ST_TO_ADDR
// Query ( QSniperMike ) ;
18490: LD_STRING QSniperMike
18492: PPUSH
18493: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18497: LD_EXP 47
18501: PUSH
18502: LD_VAR 0 4
18506: IN
18507: PUSH
18508: LD_EXP 47
18512: PPUSH
18513: CALL_OW 257
18517: PUSH
18518: LD_INT 33
18520: EQUAL
18521: AND
18522: IFFALSE 18663
// begin SetSide ( Givi , 5 ) ;
18524: LD_EXP 47
18528: PPUSH
18529: LD_INT 5
18531: PPUSH
18532: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18536: LD_EXP 47
18540: PPUSH
18541: LD_INT 137
18543: PPUSH
18544: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18548: LD_INT 35
18550: PPUSH
18551: CALL_OW 67
// until IsInUnit ( Givi ) ;
18555: LD_EXP 47
18559: PPUSH
18560: CALL_OW 310
18564: IFFALSE 18548
// Say ( Givi , DG-Weapons-3 ) ;
18566: LD_EXP 47
18570: PPUSH
18571: LD_STRING DG-Weapons-3
18573: PPUSH
18574: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18578: LD_EXP 46
18582: PPUSH
18583: LD_STRING DH-Weapons-4
18585: PPUSH
18586: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18590: LD_EXP 47
18594: PPUSH
18595: LD_STRING DG-Weapons-5
18597: PPUSH
18598: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18602: LD_EXP 47
18606: PPUSH
18607: LD_INT 11
18609: PPUSH
18610: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18614: LD_EXP 47
18618: PPUSH
18619: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18623: LD_EXP 47
18627: PPUSH
18628: LD_INT 2
18630: PPUSH
18631: CALL_OW 235
// if hasRevolver then
18635: LD_EXP 8
18639: IFFALSE 18661
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18641: LD_EXP 46
18645: PPUSH
18646: LD_STRING DH-Kaia-Revolver-1
18648: PPUSH
18649: CALL_OW 88
// heikeHasRevolver := true ;
18653: LD_ADDR_EXP 20
18657: PUSH
18658: LD_INT 1
18660: ST_TO_ADDR
// end ; end else
18661: GO 18855
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18663: LD_EXP 50
18667: PUSH
18668: LD_VAR 0 4
18672: IN
18673: PUSH
18674: LD_EXP 50
18678: PPUSH
18679: CALL_OW 257
18683: PUSH
18684: LD_INT 33
18686: EQUAL
18687: AND
18688: IFFALSE 18817
// begin SetSide ( Kamil , 5 ) ;
18690: LD_EXP 50
18694: PPUSH
18695: LD_INT 5
18697: PPUSH
18698: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18702: LD_EXP 50
18706: PPUSH
18707: LD_INT 137
18709: PPUSH
18710: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18714: LD_INT 35
18716: PPUSH
18717: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18721: LD_EXP 50
18725: PPUSH
18726: CALL_OW 310
18730: IFFALSE 18714
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18732: LD_EXP 50
18736: PPUSH
18737: LD_STRING DKam-Weapons-a-3
18739: PPUSH
18740: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18744: LD_EXP 46
18748: PPUSH
18749: LD_STRING DH-Weapons-a-4
18751: PPUSH
18752: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18756: LD_EXP 50
18760: PPUSH
18761: LD_INT 11
18763: PPUSH
18764: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18768: LD_EXP 50
18772: PPUSH
18773: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18777: LD_EXP 50
18781: PPUSH
18782: LD_INT 2
18784: PPUSH
18785: CALL_OW 235
// if hasRevolver then
18789: LD_EXP 8
18793: IFFALSE 18815
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18795: LD_EXP 46
18799: PPUSH
18800: LD_STRING DH-Kaia-Revolver-1
18802: PPUSH
18803: CALL_OW 88
// heikeHasRevolver := true ;
18807: LD_ADDR_EXP 20
18811: PUSH
18812: LD_INT 1
18814: ST_TO_ADDR
// end ; end else
18815: GO 18855
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18817: LD_EXP 46
18821: PPUSH
18822: LD_STRING DH-Weapons-Alone-2
18824: PPUSH
18825: CALL_OW 88
// if hasRevolver then
18829: LD_EXP 8
18833: IFFALSE 18855
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18835: LD_EXP 46
18839: PPUSH
18840: LD_STRING DH-Kaia-Revolver-1a
18842: PPUSH
18843: CALL_OW 88
// heikeHasRevolver := true ;
18847: LD_ADDR_EXP 20
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// end ; end ; end ; end else
18855: GO 18869
// Say ( Heike , DH-Locked ) ;
18857: LD_EXP 46
18861: PPUSH
18862: LD_STRING DH-Locked
18864: PPUSH
18865: CALL_OW 88
// end ; end ;
18869: GO 18872
18871: POP
// SetSide ( building , 3 ) ;
18872: LD_VAR 0 1
18876: PPUSH
18877: LD_INT 3
18879: PPUSH
18880: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18884: LD_VAR 0 1
18888: PPUSH
18889: CALL 20014 0 1
// wait ( 0 0$0.3 ) ;
18893: LD_INT 10
18895: PPUSH
18896: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18900: LD_EXP 46
18904: PPUSH
18905: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18909: LD_EXP 46
18913: PPUSH
18914: LD_INT 2
18916: PPUSH
18917: CALL_OW 235
// InGameOff ;
18921: CALL_OW 9
// end ;
18925: LD_VAR 0 2
18929: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18930: LD_EXP 30
18934: NOT
18935: PUSH
18936: LD_EXP 17
18940: NOT
18941: AND
18942: PUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 5
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 21
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PPUSH
18967: CALL_OW 69
18971: PUSH
18972: LD_INT 0
18974: EQUAL
18975: AND
18976: PUSH
18977: LD_INT 22
18979: PUSH
18980: LD_INT 4
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 21
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PPUSH
19001: CALL_OW 69
19005: PUSH
19006: LD_INT 0
19008: EQUAL
19009: PUSH
19010: LD_EXP 25
19014: AND
19015: PUSH
19016: LD_EXP 25
19020: NOT
19021: OR
19022: AND
19023: IFFALSE 19055
19025: GO 19027
19027: DISABLE
// begin DialogueOn ;
19028: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
19032: LD_EXP 46
19036: PPUSH
19037: LD_STRING DH-Alarm-2
19039: PPUSH
19040: CALL_OW 88
// DialogueOff ;
19044: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
19048: LD_STRING M1-people-out
19050: PPUSH
19051: CALL_OW 337
// end ;
19055: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
19056: LD_EXP 48
19060: PPUSH
19061: CALL_OW 255
19065: PUSH
19066: LD_INT 2
19068: EQUAL
19069: PUSH
19070: LD_EXP 48
19074: PUSH
19075: LD_EXP 14
19079: IN
19080: AND
19081: PUSH
19082: LD_EXP 46
19086: PPUSH
19087: LD_EXP 48
19091: PPUSH
19092: CALL_OW 296
19096: PUSH
19097: LD_INT 6
19099: LESS
19100: AND
19101: PUSH
19102: LD_EXP 30
19106: NOT
19107: AND
19108: PUSH
19109: LD_EXP 42
19113: AND
19114: IFFALSE 19131
19116: GO 19118
19118: DISABLE
// SetClass ( Mike , class_hunter ) ;
19119: LD_EXP 48
19123: PPUSH
19124: LD_INT 32
19126: PPUSH
19127: CALL_OW 336
19131: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
19132: LD_EXP 41
19136: PUSH
19137: LD_EXP 40
19141: AND
19142: PUSH
19143: LD_INT 137
19145: PPUSH
19146: CALL_OW 255
19150: PUSH
19151: LD_INT 3
19153: EQUAL
19154: AND
19155: PUSH
19156: LD_EXP 14
19160: PPUSH
19161: LD_INT 95
19163: PUSH
19164: LD_INT 65
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 22
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 25
19183: PUSH
19184: LD_INT 33
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: PPUSH
19196: CALL_OW 72
19200: AND
19201: PUSH
19202: LD_INT 2
19204: PPUSH
19205: LD_INT 3
19207: PPUSH
19208: CALL_OW 81
19212: PUSH
19213: LD_INT 2
19215: EQUAL
19216: NOT
19217: AND
19218: PUSH
19219: LD_EXP 66
19223: PPUSH
19224: LD_INT 137
19226: PPUSH
19227: CALL_OW 296
19231: PUSH
19232: LD_INT 12
19234: LESS
19235: NOT
19236: AND
19237: IFFALSE 19491
19239: GO 19241
19241: DISABLE
19242: LD_INT 0
19244: PPUSH
19245: PPUSH
// begin enable ;
19246: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
19247: LD_ADDR_VAR 0 2
19251: PUSH
19252: LD_EXP 14
19256: PPUSH
19257: LD_INT 95
19259: PUSH
19260: LD_INT 65
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 22
19269: PUSH
19270: LD_INT 2
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 25
19279: PUSH
19280: LD_INT 33
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: PPUSH
19292: CALL_OW 72
19296: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19297: LD_STRING QWeapons
19299: PPUSH
19300: CALL_OW 97
19304: PUSH
19305: LD_INT 1
19307: EQUAL
19308: IFFALSE 19491
// begin for i in tmp do
19310: LD_ADDR_VAR 0 1
19314: PUSH
19315: LD_VAR 0 2
19319: PUSH
19320: FOR_IN
19321: IFFALSE 19489
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19323: LD_INT 137
19325: PPUSH
19326: CALL_OW 313
19330: PUSH
19331: LD_INT 6
19333: EQUAL
19334: IFFALSE 19338
// continue ;
19336: GO 19320
// SetSide ( i , 3 ) ;
19338: LD_VAR 0 1
19342: PPUSH
19343: LD_INT 3
19345: PPUSH
19346: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19350: LD_VAR 0 1
19354: PPUSH
19355: LD_INT 137
19357: PPUSH
19358: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19362: LD_ADDR_EXP 40
19366: PUSH
19367: LD_EXP 40
19371: PPUSH
19372: CALL 68345 0 1
19376: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19377: LD_INT 10
19379: PPUSH
19380: CALL_OW 67
// until IsInUnit ( i ) ;
19384: LD_VAR 0 1
19388: PPUSH
19389: CALL_OW 310
19393: IFFALSE 19377
// SetClass ( i , class_soldier ) ;
19395: LD_VAR 0 1
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19407: LD_VAR 0 1
19411: PPUSH
19412: CALL_OW 122
// wait ( 0 0$1 ) ;
19416: LD_INT 35
19418: PPUSH
19419: CALL_OW 67
// until not IsInUnit ( i ) ;
19423: LD_VAR 0 1
19427: PPUSH
19428: CALL_OW 310
19432: NOT
19433: IFFALSE 19407
// SetSide ( i , 2 ) ;
19435: LD_VAR 0 1
19439: PPUSH
19440: LD_INT 2
19442: PPUSH
19443: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19447: LD_VAR 0 1
19451: PPUSH
19452: LD_INT 191
19454: PPUSH
19455: LD_INT 126
19457: PPUSH
19458: CALL_OW 171
// if weaponsAmount = 0 then
19462: LD_EXP 40
19466: PUSH
19467: LD_INT 0
19469: EQUAL
19470: IFFALSE 19487
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19472: LD_INT 65
19474: PPUSH
19475: LD_INT 0
19477: PPUSH
19478: CALL_OW 424
// disable ;
19482: DISABLE
// exit ;
19483: POP
19484: POP
19485: GO 19491
// end ; end ;
19487: GO 19320
19489: POP
19490: POP
// end ; end ; end_of_file
19491: PPOPN 2
19493: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19494: LD_VAR 0 1
19498: PUSH
19499: LD_INT 3
19501: DOUBLE
19502: EQUAL
19503: IFTRUE 19507
19505: GO 19537
19507: POP
// begin repeat wait ( 0 0$1 ) ;
19508: LD_INT 35
19510: PPUSH
19511: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19515: LD_EXP 46
19519: PPUSH
19520: CALL_OW 85
// until IsDying ( Heike ) ;
19524: LD_EXP 46
19528: PPUSH
19529: CALL_OW 303
19533: IFFALSE 19508
// end ; end ;
19535: GO 19538
19537: POP
// end ;
19538: PPOPN 1
19540: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19541: LD_OWVAR 59
19545: IFFALSE 19549
// exit ;
19547: GO 19623
// if showPlaceEvent then
19549: LD_INT 4
19551: IFFALSE 19623
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19553: LD_VAR 0 2
19557: PPUSH
19558: LD_VAR 0 3
19562: PPUSH
19563: LD_INT 2
19565: PPUSH
19566: LD_INT 6
19568: NEG
19569: PPUSH
19570: CALL_OW 330
// CenterOnXY ( x , y ) ;
19574: LD_VAR 0 2
19578: PPUSH
19579: LD_VAR 0 3
19583: PPUSH
19584: CALL_OW 84
// wait ( time ) ;
19588: LD_VAR 0 4
19592: PPUSH
19593: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19597: LD_EXP 46
19601: PPUSH
19602: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19606: LD_VAR 0 2
19610: PPUSH
19611: LD_VAR 0 3
19615: PPUSH
19616: LD_INT 2
19618: PPUSH
19619: CALL_OW 331
// end ; end ;
19623: PPOPN 7
19625: END
// on UnitDestroyed ( un ) do var x , y ;
19626: LD_INT 0
19628: PPUSH
19629: PPUSH
// begin if un = Heike and hasNormalScene then
19630: LD_VAR 0 1
19634: PUSH
19635: LD_EXP 46
19639: EQUAL
19640: PUSH
19641: LD_EXP 5
19645: AND
19646: IFFALSE 19670
// if loseCounter then
19648: LD_EXP 32
19652: IFFALSE 19663
// YouLost ( HeikeNoSurrender ) else
19654: LD_STRING HeikeNoSurrender
19656: PPUSH
19657: CALL_OW 104
19661: GO 19670
// YouLost ( Heike ) ;
19663: LD_STRING Heike
19665: PPUSH
19666: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 255
19679: PUSH
19680: LD_INT 2
19682: EQUAL
19683: PUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 247
19693: PUSH
19694: LD_INT 1
19696: EQUAL
19697: AND
19698: IFFALSE 19715
// loseCounter := Inc ( loseCounter ) ;
19700: LD_ADDR_EXP 32
19704: PUSH
19705: LD_EXP 32
19709: PPUSH
19710: CALL 68323 0 1
19714: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19715: LD_VAR 0 1
19719: PPUSH
19720: CALL_OW 255
19724: PUSH
19725: LD_INT 6
19727: EQUAL
19728: PUSH
19729: LD_EXP 17
19733: NOT
19734: AND
19735: PUSH
19736: LD_VAR 0 1
19740: PUSH
19741: LD_EXP 71
19745: IN
19746: AND
19747: IFFALSE 19851
// begin x := GetX ( un ) ;
19749: LD_ADDR_VAR 0 2
19753: PUSH
19754: LD_VAR 0 1
19758: PPUSH
19759: CALL_OW 250
19763: ST_TO_ADDR
// y := GetY ( un ) ;
19764: LD_ADDR_VAR 0 3
19768: PUSH
19769: LD_VAR 0 1
19773: PPUSH
19774: CALL_OW 251
19778: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19779: LD_ADDR_EXP 43
19783: PUSH
19784: LD_EXP 43
19788: PPUSH
19789: LD_VAR 0 2
19793: PUSH
19794: LD_VAR 0 3
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL 66962 0 2
19807: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19808: LD_ADDR_EXP 71
19812: PUSH
19813: LD_EXP 71
19817: PUSH
19818: LD_VAR 0 1
19822: DIFF
19823: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19824: LD_INT 3
19826: PPUSH
19827: LD_VAR 0 2
19831: PPUSH
19832: LD_VAR 0 3
19836: PPUSH
19837: CALL_OW 293
19841: IFFALSE 19851
// isAlarm := true ;
19843: LD_ADDR_EXP 17
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// end ; end ;
19851: PPOPN 3
19853: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
19854: LD_EXP 44
19858: IFFALSE 19862
// exit ;
19860: GO 19910
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19862: LD_VAR 0 1
19866: PUSH
19867: LD_INT 2
19869: EQUAL
19870: PUSH
19871: LD_VAR 0 2
19875: PUSH
19876: LD_INT 3
19878: EQUAL
19879: AND
19880: PUSH
19881: LD_VAR 0 1
19885: PUSH
19886: LD_INT 3
19888: EQUAL
19889: PUSH
19890: LD_VAR 0 2
19894: PUSH
19895: LD_INT 2
19897: EQUAL
19898: AND
19899: OR
19900: IFFALSE 19910
// isAlarm := true ;
19902: LD_ADDR_EXP 17
19906: PUSH
19907: LD_INT 1
19909: ST_TO_ADDR
// end ; end_of_file
19910: PPOPN 2
19912: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19913: LD_INT 0
19915: PPUSH
19916: PPUSH
19917: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19918: LD_ADDR_VAR 0 4
19922: PUSH
19923: LD_VAR 0 1
19927: PPUSH
19928: CALL_OW 310
19932: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19933: LD_ADDR_VAR 0 5
19937: PUSH
19938: LD_VAR 0 2
19942: PPUSH
19943: CALL_OW 310
19947: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19948: LD_ADDR_VAR 0 3
19952: PUSH
19953: LD_VAR 0 4
19957: PUSH
19958: LD_VAR 0 4
19962: PUSH
19963: LD_VAR 0 5
19967: EQUAL
19968: AND
19969: ST_TO_ADDR
// end ;
19970: LD_VAR 0 3
19974: RET
// export function ShowPlace ( x , y , time ) ; begin
19975: LD_INT 0
19977: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
19978: LD_INT 4
19980: PPUSH
19981: LD_VAR 0 1
19985: PPUSH
19986: LD_VAR 0 2
19990: PPUSH
19991: LD_VAR 0 3
19995: PPUSH
19996: LD_INT 0
19998: PPUSH
19999: LD_INT 0
20001: PPUSH
20002: LD_INT 0
20004: PPUSH
20005: CALL_OW 595
// end ;
20009: LD_VAR 0 4
20013: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
20014: LD_INT 0
20016: PPUSH
20017: PPUSH
20018: PPUSH
20019: PPUSH
20020: PPUSH
20021: PPUSH
// if not IsOk ( building ) then
20022: LD_VAR 0 1
20026: PPUSH
20027: CALL_OW 302
20031: NOT
20032: IFFALSE 20036
// exit ;
20034: GO 20283
// x := GetX ( building ) ;
20036: LD_ADDR_VAR 0 4
20040: PUSH
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 250
20050: ST_TO_ADDR
// y := GetY ( building ) ;
20051: LD_ADDR_VAR 0 5
20055: PUSH
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 251
20065: ST_TO_ADDR
// d := GetDir ( building ) ;
20066: LD_ADDR_VAR 0 6
20070: PUSH
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 254
20080: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20081: LD_ADDR_VAR 0 7
20085: PUSH
20086: LD_VAR 0 4
20090: PPUSH
20091: LD_VAR 0 6
20095: PPUSH
20096: LD_INT 3
20098: PPUSH
20099: CALL_OW 272
20103: PUSH
20104: LD_VAR 0 5
20108: PPUSH
20109: LD_VAR 0 6
20113: PPUSH
20114: LD_INT 3
20116: PPUSH
20117: CALL_OW 273
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20126: LD_VAR 0 7
20130: PUSH
20131: LD_INT 1
20133: ARRAY
20134: PPUSH
20135: LD_VAR 0 7
20139: PUSH
20140: LD_INT 2
20142: ARRAY
20143: PPUSH
20144: CALL_OW 488
20148: NOT
20149: IFFALSE 20153
// exit ;
20151: GO 20283
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
20153: LD_ADDR_VAR 0 2
20157: PUSH
20158: LD_INT 92
20160: PUSH
20161: LD_VAR 0 4
20165: PUSH
20166: LD_VAR 0 5
20170: PUSH
20171: LD_INT 4
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 3
20182: PUSH
20183: LD_INT 54
20185: PUSH
20186: EMPTY
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PPUSH
20197: CALL_OW 69
20201: ST_TO_ADDR
// if not result then
20202: LD_VAR 0 2
20206: NOT
20207: IFFALSE 20211
// exit ;
20209: GO 20283
// for i in result do
20211: LD_ADDR_VAR 0 3
20215: PUSH
20216: LD_VAR 0 2
20220: PUSH
20221: FOR_IN
20222: IFFALSE 20281
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
20224: LD_VAR 0 3
20228: PPUSH
20229: LD_VAR 0 3
20233: PPUSH
20234: CALL_OW 250
20238: PPUSH
20239: LD_VAR 0 6
20243: PPUSH
20244: LD_INT 3
20246: PPUSH
20247: CALL_OW 272
20251: PPUSH
20252: LD_VAR 0 3
20256: PPUSH
20257: CALL_OW 251
20261: PPUSH
20262: LD_VAR 0 6
20266: PPUSH
20267: LD_INT 3
20269: PPUSH
20270: CALL_OW 273
20274: PPUSH
20275: CALL_OW 111
20279: GO 20221
20281: POP
20282: POP
// end ;
20283: LD_VAR 0 2
20287: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
20288: LD_INT 0
20290: PPUSH
20291: PPUSH
20292: PPUSH
20293: PPUSH
20294: PPUSH
20295: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
20296: LD_VAR 0 1
20300: PPUSH
20301: CALL_OW 302
20305: NOT
20306: PUSH
20307: LD_VAR 0 2
20311: PPUSH
20312: CALL_OW 302
20316: NOT
20317: OR
20318: PUSH
20319: LD_VAR 0 2
20323: PPUSH
20324: CALL_OW 313
20328: PUSH
20329: LD_INT 6
20331: EQUAL
20332: OR
20333: IFFALSE 20337
// exit ;
20335: GO 20554
// btype := GetBType ( building ) ;
20337: LD_ADDR_VAR 0 8
20341: PUSH
20342: LD_VAR 0 2
20346: PPUSH
20347: CALL_OW 266
20351: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
20352: LD_VAR 0 8
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 2
20365: PUSH
20366: LD_INT 4
20368: PUSH
20369: LD_INT 5
20371: PUSH
20372: LD_INT 3
20374: PUSH
20375: LD_INT 6
20377: PUSH
20378: LD_INT 7
20380: PUSH
20381: LD_INT 8
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: IN
20395: NOT
20396: IFFALSE 20400
// exit ;
20398: GO 20554
// x := GetX ( building ) ;
20400: LD_ADDR_VAR 0 4
20404: PUSH
20405: LD_VAR 0 2
20409: PPUSH
20410: CALL_OW 250
20414: ST_TO_ADDR
// y := GetY ( building ) ;
20415: LD_ADDR_VAR 0 5
20419: PUSH
20420: LD_VAR 0 2
20424: PPUSH
20425: CALL_OW 251
20429: ST_TO_ADDR
// d := GetDir ( building ) ;
20430: LD_ADDR_VAR 0 6
20434: PUSH
20435: LD_VAR 0 2
20439: PPUSH
20440: CALL_OW 254
20444: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20445: LD_ADDR_VAR 0 7
20449: PUSH
20450: LD_VAR 0 4
20454: PPUSH
20455: LD_VAR 0 6
20459: PPUSH
20460: LD_INT 3
20462: PPUSH
20463: CALL_OW 272
20467: PUSH
20468: LD_VAR 0 5
20472: PPUSH
20473: LD_VAR 0 6
20477: PPUSH
20478: LD_INT 3
20480: PPUSH
20481: CALL_OW 273
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20490: LD_VAR 0 7
20494: PUSH
20495: LD_INT 1
20497: ARRAY
20498: PPUSH
20499: LD_VAR 0 7
20503: PUSH
20504: LD_INT 2
20506: ARRAY
20507: PPUSH
20508: CALL_OW 488
20512: NOT
20513: IFFALSE 20517
// exit ;
20515: GO 20554
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20517: LD_ADDR_VAR 0 3
20521: PUSH
20522: LD_VAR 0 1
20526: PPUSH
20527: LD_VAR 0 7
20531: PUSH
20532: LD_INT 1
20534: ARRAY
20535: PPUSH
20536: LD_VAR 0 7
20540: PUSH
20541: LD_INT 2
20543: ARRAY
20544: PPUSH
20545: CALL_OW 297
20549: PUSH
20550: LD_INT 4
20552: LESS
20553: ST_TO_ADDR
// end ;
20554: LD_VAR 0 3
20558: RET
// export function PlaceExplosives ( building ) ; begin
20559: LD_INT 0
20561: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20562: LD_ADDR_EXP 29
20566: PUSH
20567: LD_EXP 29
20571: PPUSH
20572: LD_VAR 0 1
20576: PPUSH
20577: CALL 66962 0 2
20581: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL_OW 250
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: CALL_OW 251
20601: PPUSH
20602: LD_STRING PlantBomb
20604: PPUSH
20605: CALL_OW 366
// end ;
20609: LD_VAR 0 2
20613: RET
// export function CreateNature ; var i ; begin
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
// PrepareFrog ;
20618: CALL 63439 0 0
// for i := 1 to 3 do
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: DOUBLE
20628: LD_INT 1
20630: DEC
20631: ST_TO_ADDR
20632: LD_INT 3
20634: PUSH
20635: FOR_TO
20636: IFFALSE 20655
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20638: CALL_OW 44
20642: PPUSH
20643: LD_INT 24
20645: PPUSH
20646: LD_INT 0
20648: PPUSH
20649: CALL_OW 49
20653: GO 20635
20655: POP
20656: POP
// end ;
20657: LD_VAR 0 1
20661: RET
// export function MarkBuilding ( building , marker ) ; begin
20662: LD_INT 0
20664: PPUSH
// if marker then
20665: LD_VAR 0 2
20669: IFFALSE 20716
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20671: LD_VAR 0 1
20675: PPUSH
20676: CALL_OW 250
20680: PPUSH
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 251
20690: PPUSH
20691: LD_INT 2
20693: PPUSH
20694: LD_INT 3
20696: NEG
20697: PPUSH
20698: CALL_OW 330
// SetBName ( building , target ) ;
20702: LD_VAR 0 1
20706: PPUSH
20707: LD_STRING target
20709: PPUSH
20710: CALL_OW 500
// end else
20714: GO 20755
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 250
20725: PPUSH
20726: LD_VAR 0 1
20730: PPUSH
20731: CALL_OW 251
20735: PPUSH
20736: LD_INT 2
20738: PPUSH
20739: CALL_OW 331
// SetBName ( building ,  ) ;
20743: LD_VAR 0 1
20747: PPUSH
20748: LD_STRING 
20750: PPUSH
20751: CALL_OW 500
// end ; end ; end_of_file
20755: LD_VAR 0 3
20759: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20760: LD_INT 0
20762: PPUSH
// lockerCodeValid := false ;
20763: LD_ADDR_EXP 72
20767: PUSH
20768: LD_INT 0
20770: ST_TO_ADDR
// if not step then
20771: LD_LOC 1
20775: NOT
20776: IFFALSE 20786
// step := 1 ;
20778: LD_ADDR_LOC 1
20782: PUSH
20783: LD_INT 1
20785: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20786: LD_STRING HEscape
20788: PUSH
20789: LD_LOC 1
20793: STR
20794: PPUSH
20795: CALL_OW 97
20799: PUSH
20800: LD_INT 1
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 20815
20808: POP
// LockerMinigameSearch ; 2 :
20809: CALL 20848 0 0
20813: GO 20831
20815: LD_INT 2
20817: DOUBLE
20818: EQUAL
20819: IFTRUE 20823
20821: GO 20830
20823: POP
// LockerMinigameSetCode ; end ;
20824: CALL 20922 0 0
20828: GO 20831
20830: POP
// if lockerCodeValid then
20831: LD_EXP 72
20835: IFFALSE 20839
// exit ;
20837: GO 20843
// StartLockerMinigame ;
20839: CALL 20760 0 0
// end ;
20843: LD_VAR 0 1
20847: RET
// function LockerMinigameSearch ; begin
20848: LD_INT 0
20850: PPUSH
// if code then
20851: LD_LOC 2
20855: IFFALSE 20871
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20857: LD_EXP 46
20861: PPUSH
20862: LD_STRING DH-Escape-3-Hint-0
20864: PPUSH
20865: CALL_OW 88
// exit ;
20869: GO 20917
// end ; Randomize ;
20871: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20875: LD_ADDR_LOC 2
20879: PUSH
20880: LD_INT 1
20882: PPUSH
20883: LD_INT 5
20885: PPUSH
20886: CALL_OW 12
20890: ST_TO_ADDR
// step := 2 ;
20891: LD_ADDR_LOC 1
20895: PUSH
20896: LD_INT 2
20898: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20899: LD_EXP 46
20903: PPUSH
20904: LD_STRING DH-Escape-3-Hint-
20906: PUSH
20907: LD_LOC 2
20911: STR
20912: PPUSH
20913: CALL_OW 88
// end ;
20917: LD_VAR 0 1
20921: RET
// function LockerMinigameSetCode ; begin
20922: LD_INT 0
20924: PPUSH
// if not code then
20925: LD_LOC 2
20929: NOT
20930: IFFALSE 20940
// code := 0 ;
20932: LD_ADDR_LOC 2
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// lockerBusy := true ;
20940: LD_ADDR_EXP 73
20944: PUSH
20945: LD_INT 1
20947: ST_TO_ADDR
// InGameOff ;
20948: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20952: LD_STRING initLockerMinigame("
20954: PUSH
20955: LD_LOC 2
20959: STR
20960: PUSH
20961: LD_STRING ")
20963: STR
20964: PPUSH
20965: CALL_OW 559
// step := 3 ;
20969: LD_ADDR_LOC 1
20973: PUSH
20974: LD_INT 3
20976: ST_TO_ADDR
// repeat wait ( 1 ) ;
20977: LD_INT 1
20979: PPUSH
20980: CALL_OW 67
// until not lockerBusy ;
20984: LD_EXP 73
20988: NOT
20989: IFFALSE 20977
// InGameOn ;
20991: CALL_OW 8
// if not lockerCodeValid then
20995: LD_EXP 72
20999: NOT
21000: IFFALSE 21026
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
21002: LD_EXP 46
21006: PPUSH
21007: LD_STRING DH-Escape-3-Fail-
21009: PUSH
21010: LD_INT 1
21012: PPUSH
21013: LD_INT 2
21015: PPUSH
21016: CALL_OW 12
21020: STR
21021: PPUSH
21022: CALL_OW 88
// end ; end_of_file
21026: LD_VAR 0 1
21030: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
21031: LD_VAR 0 2
21035: PUSH
21036: LD_INT 102
21038: EQUAL
21039: IFFALSE 21061
// begin lockerBusy := false ;
21041: LD_ADDR_EXP 73
21045: PUSH
21046: LD_INT 0
21048: ST_TO_ADDR
// lockerCodeValid := p3 ;
21049: LD_ADDR_EXP 72
21053: PUSH
21054: LD_VAR 0 3
21058: ST_TO_ADDR
// end else
21059: GO 21115
// if p2 = 103 then
21061: LD_VAR 0 2
21065: PUSH
21066: LD_INT 103
21068: EQUAL
21069: IFFALSE 21081
// begin weatherBusy := false ;
21071: LD_ADDR_EXP 37
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// end else
21079: GO 21115
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21081: LD_VAR 0 1
21085: PPUSH
21086: LD_VAR 0 2
21090: PPUSH
21091: LD_VAR 0 3
21095: PPUSH
21096: LD_VAR 0 4
21100: PPUSH
21101: LD_VAR 0 5
21105: PPUSH
21106: LD_VAR 0 6
21110: PPUSH
21111: CALL 72214 0 6
// end ;
21115: PPOPN 6
21117: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
21118: LD_STRING killGameMusic();
21120: PPUSH
21121: CALL_OW 559
// PlayOriginalMusic ;
21125: CALL 92933 0 0
// SOS_MapStart ( ) ;
21129: CALL 72101 0 0
// end ; end_of_file
21133: PPOPN 1
21135: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
21136: LD_EXP 17
21140: NOT
21141: PUSH
21142: LD_EXP 71
21146: AND
21147: IFFALSE 21727
21149: GO 21151
21151: DISABLE
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
21156: PPUSH
21157: PPUSH
21158: PPUSH
// begin enable ;
21159: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
21160: LD_ADDR_VAR 0 3
21164: PUSH
21165: LD_INT 26
21167: PUSH
21168: LD_INT 27
21170: PUSH
21171: LD_INT 28
21173: PUSH
21174: LD_INT 29
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 30
21185: PUSH
21186: LD_INT 31
21188: PUSH
21189: LD_INT 32
21191: PUSH
21192: LD_INT 33
21194: PUSH
21195: LD_INT 34
21197: PUSH
21198: LD_INT 35
21200: PUSH
21201: LD_INT 36
21203: PUSH
21204: LD_INT 37
21206: PUSH
21207: LD_INT 38
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 39
21223: PUSH
21224: LD_INT 40
21226: PUSH
21227: LD_INT 41
21229: PUSH
21230: LD_INT 42
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 43
21241: PUSH
21242: LD_INT 44
21244: PUSH
21245: LD_INT 45
21247: PUSH
21248: LD_INT 46
21250: PUSH
21251: LD_INT 47
21253: PUSH
21254: LD_INT 46
21256: PUSH
21257: LD_INT 45
21259: PUSH
21260: LD_INT 44
21262: PUSH
21263: LD_INT 43
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: ST_TO_ADDR
// for i in ruPatrol do
21283: LD_ADDR_VAR 0 1
21287: PUSH
21288: LD_EXP 71
21292: PUSH
21293: FOR_IN
21294: IFFALSE 21725
// begin if not IsOk ( i ) then
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 302
21305: NOT
21306: IFFALSE 21310
// continue ;
21308: GO 21293
// if Count ( ruKilledHex ) then
21310: LD_EXP 43
21314: PPUSH
21315: CALL 31373 0 1
21319: IFFALSE 21392
// for j in ruKilledHex do
21321: LD_ADDR_VAR 0 2
21325: PUSH
21326: LD_EXP 43
21330: PUSH
21331: FOR_IN
21332: IFFALSE 21390
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
21334: LD_VAR 0 1
21338: PPUSH
21339: LD_VAR 0 2
21343: PUSH
21344: LD_INT 1
21346: ARRAY
21347: PPUSH
21348: LD_VAR 0 2
21352: PUSH
21353: LD_INT 2
21355: ARRAY
21356: PPUSH
21357: CALL_OW 297
21361: PUSH
21362: LD_INT 6
21364: LESS
21365: IFFALSE 21388
// begin Query ( QBody ) ;
21367: LD_STRING QBody
21369: PPUSH
21370: CALL_OW 97
// isAlarm := true ;
21374: LD_ADDR_EXP 17
21378: PUSH
21379: LD_INT 1
21381: ST_TO_ADDR
// exit ;
21382: POP
21383: POP
21384: POP
21385: POP
21386: GO 21727
// end ;
21388: GO 21331
21390: POP
21391: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
21392: LD_ADDR_VAR 0 5
21396: PUSH
21397: LD_INT 22
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 21
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 91
21419: PUSH
21420: LD_VAR 0 1
21424: PUSH
21425: LD_INT 7
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: LIST
21437: PPUSH
21438: CALL_OW 69
21442: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21443: LD_INT 2
21445: PPUSH
21446: LD_VAR 0 1
21450: PPUSH
21451: CALL_OW 292
21455: PUSH
21456: LD_VAR 0 5
21460: AND
21461: IFFALSE 21611
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21463: LD_EXP 30
21467: PUSH
21468: LD_VAR 0 1
21472: PPUSH
21473: LD_EXP 66
21477: PPUSH
21478: CALL_OW 296
21482: PUSH
21483: LD_INT 16
21485: LESS
21486: AND
21487: PUSH
21488: LD_EXP 38
21492: OR
21493: IFFALSE 21497
// continue ;
21495: GO 21293
// for j in tmp do
21497: LD_ADDR_VAR 0 2
21501: PUSH
21502: LD_VAR 0 5
21506: PUSH
21507: FOR_IN
21508: IFFALSE 21569
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21510: LD_ADDR_VAR 0 5
21514: PUSH
21515: LD_VAR 0 5
21519: PUSH
21520: LD_INT 22
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 21
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 91
21542: PUSH
21543: LD_VAR 0 2
21547: PUSH
21548: LD_INT 4
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: LIST
21560: PPUSH
21561: CALL_OW 69
21565: UNION
21566: ST_TO_ADDR
21567: GO 21507
21569: POP
21570: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21571: LD_VAR 0 1
21575: PPUSH
21576: LD_VAR 0 5
21580: PPUSH
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 74
21590: PPUSH
21591: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21595: LD_VAR 0 1
21599: PPUSH
21600: LD_VAR 0 5
21604: PPUSH
21605: CALL 21730 0 2
// continue ;
21609: GO 21293
// end ; if HasTask ( i ) then
21611: LD_VAR 0 1
21615: PPUSH
21616: CALL_OW 314
21620: IFFALSE 21624
// continue ;
21622: GO 21293
// tag := GetTag ( i ) ;
21624: LD_ADDR_VAR 0 4
21628: PUSH
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 110
21638: ST_TO_ADDR
// if not tag then
21639: LD_VAR 0 4
21643: NOT
21644: IFFALSE 21657
// begin ComHold ( i ) ;
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 140
// continue ;
21655: GO 21293
// end ; for j := 1 to points [ tag ] do
21657: LD_ADDR_VAR 0 2
21661: PUSH
21662: DOUBLE
21663: LD_INT 1
21665: DEC
21666: ST_TO_ADDR
21667: LD_VAR 0 3
21671: PUSH
21672: LD_VAR 0 4
21676: ARRAY
21677: PUSH
21678: FOR_TO
21679: IFFALSE 21721
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21681: LD_VAR 0 1
21685: PPUSH
21686: LD_VAR 0 3
21690: PUSH
21691: LD_VAR 0 4
21695: ARRAY
21696: PUSH
21697: LD_VAR 0 2
21701: ARRAY
21702: PPUSH
21703: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21707: LD_VAR 0 1
21711: PPUSH
21712: LD_INT 70
21714: PPUSH
21715: CALL_OW 202
// end ;
21719: GO 21678
21721: POP
21722: POP
// end ;
21723: GO 21293
21725: POP
21726: POP
// end ;
21727: PPOPN 5
21729: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
21734: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21735: LD_VAR 0 2
21739: PPUSH
21740: LD_INT 23
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 25
21765: PUSH
21766: LD_INT 11
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 25
21775: PUSH
21776: LD_INT 34
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 25
21785: PUSH
21786: LD_INT 32
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PPUSH
21804: CALL_OW 72
21808: IFFALSE 21921
// begin blockPatrolThread := true ;
21810: LD_ADDR_EXP 38
21814: PUSH
21815: LD_INT 1
21817: ST_TO_ADDR
// DialogueOn ;
21818: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21822: LD_VAR 0 1
21826: PPUSH
21827: CALL_OW 258
21831: PUSH
21832: LD_INT 1
21834: DOUBLE
21835: EQUAL
21836: IFTRUE 21840
21838: GO 21855
21840: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_STRING DRum-Fail-3
21848: PPUSH
21849: CALL_OW 88
21853: GO 21879
21855: LD_INT 2
21857: DOUBLE
21858: EQUAL
21859: IFTRUE 21863
21861: GO 21878
21863: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
21864: LD_VAR 0 1
21868: PPUSH
21869: LD_STRING DRuf-Fail-3
21871: PPUSH
21872: CALL_OW 88
21876: GO 21879
21878: POP
// DialogueOff ;
21879: CALL_OW 7
// wait ( 0 0$5 ) ;
21883: LD_INT 175
21885: PPUSH
21886: CALL_OW 67
// if IsOk ( guard ) then
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 302
21899: IFFALSE 21911
// isAlarm := true else
21901: LD_ADDR_EXP 17
21905: PUSH
21906: LD_INT 1
21908: ST_TO_ADDR
21909: GO 21919
// blockPatrolThread := false ;
21911: LD_ADDR_EXP 38
21915: PUSH
21916: LD_INT 0
21918: ST_TO_ADDR
// exit ;
21919: GO 22922
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
21921: LD_VAR 0 2
21925: PPUSH
21926: LD_INT 23
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PPUSH
21936: CALL_OW 72
21940: PUSH
21941: LD_VAR 0 2
21945: PPUSH
21946: LD_INT 95
21948: PUSH
21949: LD_INT 61
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PPUSH
21956: CALL_OW 72
21960: OR
21961: IFFALSE 21965
// exit ;
21963: GO 22922
// DialogueOn ;
21965: CALL_OW 6
// blockPatrolThread := true ;
21969: LD_ADDR_EXP 38
21973: PUSH
21974: LD_INT 1
21976: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 87
// if not Heike in units then
21986: LD_EXP 46
21990: PUSH
21991: LD_VAR 0 2
21995: IN
21996: NOT
21997: IFFALSE 22363
// begin case GetSex ( guard ) of sex_male :
21999: LD_VAR 0 1
22003: PPUSH
22004: CALL_OW 258
22008: PUSH
22009: LD_INT 1
22011: DOUBLE
22012: EQUAL
22013: IFTRUE 22017
22015: GO 22032
22017: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
22018: LD_VAR 0 1
22022: PPUSH
22023: LD_STRING DRum-Guard-1
22025: PPUSH
22026: CALL_OW 88
22030: GO 22056
22032: LD_INT 2
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22055
22040: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
22041: LD_VAR 0 1
22045: PPUSH
22046: LD_STRING DRuf-Guard-1
22048: PPUSH
22049: CALL_OW 88
22053: GO 22056
22055: POP
// case Query ( SurrenderInfoPeople ) of 1 :
22056: LD_STRING SurrenderInfoPeople
22058: PPUSH
22059: CALL_OW 97
22063: PUSH
22064: LD_INT 1
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22181
22072: POP
// begin Query ( CaughtSquadInfo ) ;
22073: LD_STRING CaughtSquadInfo
22075: PPUSH
22076: CALL_OW 97
// for i in units do
22080: LD_ADDR_VAR 0 4
22084: PUSH
22085: LD_VAR 0 2
22089: PUSH
22090: FOR_IN
22091: IFFALSE 22148
// begin if Carry ( i ) then
22093: LD_VAR 0 4
22097: PPUSH
22098: CALL_OW 281
22102: IFFALSE 22119
// SetCargo ( i , mat_cans , 0 ) ;
22104: LD_VAR 0 4
22108: PPUSH
22109: LD_INT 1
22111: PPUSH
22112: LD_INT 0
22114: PPUSH
22115: CALL_OW 290
// SetSide ( i , 5 ) ;
22119: LD_VAR 0 4
22123: PPUSH
22124: LD_INT 5
22126: PPUSH
22127: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
22131: LD_VAR 0 4
22135: PPUSH
22136: LD_INT 113
22138: PPUSH
22139: LD_INT 17
22141: PPUSH
22142: CALL_OW 111
// end ;
22146: GO 22090
22148: POP
22149: POP
// ComMoveXY ( guard , 117 , 25 ) ;
22150: LD_VAR 0 1
22154: PPUSH
22155: LD_INT 117
22157: PPUSH
22158: LD_INT 25
22160: PPUSH
22161: CALL_OW 111
// DialogueOff ;
22165: CALL_OW 7
// blockPatrolThread := false ;
22169: LD_ADDR_EXP 38
22173: PUSH
22174: LD_INT 0
22176: ST_TO_ADDR
// exit ;
22177: GO 22922
// end ; 2 :
22179: GO 22363
22181: LD_INT 2
22183: DOUBLE
22184: EQUAL
22185: IFTRUE 22189
22187: GO 22362
22189: POP
// begin DialogueOff ;
22190: CALL_OW 7
// wait ( 0 0$2 ) ;
22194: LD_INT 70
22196: PPUSH
22197: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22201: LD_INT 6
22203: PPUSH
22204: LD_INT 2
22206: PPUSH
22207: LD_INT 2
22209: PPUSH
22210: LD_INT 1
22212: PPUSH
22213: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
22217: LD_VAR 0 1
22221: PPUSH
22222: LD_VAR 0 2
22226: PUSH
22227: LD_INT 1
22229: ARRAY
22230: PPUSH
22231: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL_OW 258
22244: PUSH
22245: LD_INT 1
22247: DOUBLE
22248: EQUAL
22249: IFTRUE 22253
22251: GO 22268
22253: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22254: LD_VAR 0 1
22258: PPUSH
22259: LD_STRING DRum-Fail-3
22261: PPUSH
22262: CALL_OW 88
22266: GO 22292
22268: LD_INT 2
22270: DOUBLE
22271: EQUAL
22272: IFTRUE 22276
22274: GO 22291
22276: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22277: LD_VAR 0 1
22281: PPUSH
22282: LD_STRING DRum-Fail-3
22284: PPUSH
22285: CALL_OW 88
22289: GO 22292
22291: POP
// wait ( 0 0$5 ) ;
22292: LD_INT 175
22294: PPUSH
22295: CALL_OW 67
// if IsOk ( guard ) then
22299: LD_VAR 0 1
22303: PPUSH
22304: CALL_OW 302
22308: IFFALSE 22320
// isAlarm := true else
22310: LD_ADDR_EXP 17
22314: PUSH
22315: LD_INT 1
22317: ST_TO_ADDR
22318: GO 22352
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22320: LD_INT 6
22322: PPUSH
22323: LD_INT 2
22325: PPUSH
22326: LD_INT 0
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22336: LD_INT 3
22338: PPUSH
22339: LD_INT 2
22341: PPUSH
22342: LD_INT 0
22344: PPUSH
22345: LD_INT 1
22347: PPUSH
22348: CALL_OW 80
// end ; blockPatrolThread := false ;
22352: LD_ADDR_EXP 38
22356: PUSH
22357: LD_INT 0
22359: ST_TO_ADDR
// end ; end ;
22360: GO 22363
22362: POP
// end ; if Carry ( Heike ) then
22363: LD_EXP 46
22367: PPUSH
22368: CALL_OW 281
22372: IFFALSE 22448
// begin case GetSex ( guard ) of sex_male :
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL_OW 258
22383: PUSH
22384: LD_INT 1
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22407
22392: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
22393: LD_VAR 0 1
22397: PPUSH
22398: LD_STRING DRum-FoodFail-1
22400: PPUSH
22401: CALL_OW 88
22405: GO 22431
22407: LD_INT 2
22409: DOUBLE
22410: EQUAL
22411: IFTRUE 22415
22413: GO 22430
22415: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22416: LD_VAR 0 1
22420: PPUSH
22421: LD_STRING DRuf-FoodFail-2
22423: PPUSH
22424: CALL_OW 88
22428: GO 22431
22430: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22431: LD_EXP 46
22435: PPUSH
22436: LD_INT 1
22438: PPUSH
22439: LD_INT 0
22441: PPUSH
22442: CALL_OW 290
// end else
22446: GO 22505
// begin case GetSex ( guard ) of sex_male :
22448: LD_VAR 0 1
22452: PPUSH
22453: CALL_OW 258
22457: PUSH
22458: LD_INT 1
22460: DOUBLE
22461: EQUAL
22462: IFTRUE 22466
22464: GO 22481
22466: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22467: LD_VAR 0 1
22471: PPUSH
22472: LD_STRING DRum-Seen-1
22474: PPUSH
22475: CALL_OW 88
22479: GO 22505
22481: LD_INT 2
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22504
22489: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22490: LD_VAR 0 1
22494: PPUSH
22495: LD_STRING DRuf-Seen-1
22497: PPUSH
22498: CALL_OW 88
22502: GO 22505
22504: POP
// end ; alone := ( units = 1 ) ;
22505: LD_ADDR_VAR 0 5
22509: PUSH
22510: LD_VAR 0 2
22514: PUSH
22515: LD_INT 1
22517: EQUAL
22518: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22519: LD_STRING SurrenderInfo
22521: PPUSH
22522: CALL_OW 97
22526: PUSH
22527: LD_INT 1
22529: DOUBLE
22530: EQUAL
22531: IFTRUE 22535
22533: GO 22724
22535: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22536: LD_INT 23
22538: PPUSH
22539: CALL_OW 87
// RemoveUnit ( Heike ) ;
22543: LD_EXP 46
22547: PPUSH
22548: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22552: LD_EXP 46
22556: PPUSH
22557: LD_INT 23
22559: PPUSH
22560: CALL_OW 52
// if not alone then
22564: LD_VAR 0 5
22568: NOT
22569: IFFALSE 22636
// for i in units diff Heike do
22571: LD_ADDR_VAR 0 4
22575: PUSH
22576: LD_VAR 0 2
22580: PUSH
22581: LD_EXP 46
22585: DIFF
22586: PUSH
22587: FOR_IN
22588: IFFALSE 22634
// begin RemoveUnit ( i ) ;
22590: LD_VAR 0 4
22594: PPUSH
22595: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22599: LD_VAR 0 4
22603: PPUSH
22604: LD_INT 114
22606: PPUSH
22607: LD_INT 17
22609: PPUSH
22610: LD_INT 10
22612: PPUSH
22613: LD_INT 0
22615: PPUSH
22616: CALL_OW 50
// SetSide ( i , 5 ) ;
22620: LD_VAR 0 4
22624: PPUSH
22625: LD_INT 5
22627: PPUSH
22628: CALL_OW 235
// end ;
22632: GO 22587
22634: POP
22635: POP
// wait ( 0 0$0.3 ) ;
22636: LD_INT 10
22638: PPUSH
22639: CALL_OW 67
// if alone then
22643: LD_VAR 0 5
22647: IFFALSE 22658
// Query ( CaughtInfoAlone ) else
22649: LD_STRING CaughtInfoAlone
22651: PPUSH
22652: CALL_OW 97
22656: GO 22665
// Query ( CaughtInfo ) ;
22658: LD_STRING CaughtInfo
22660: PPUSH
22661: CALL_OW 97
// wait ( 0 0$2 ) ;
22665: LD_INT 70
22667: PPUSH
22668: CALL_OW 67
// StartLockerMinigame ;
22672: CALL 20760 0 0
// Say ( Heike , DH-Reset ) ;
22676: LD_EXP 46
22680: PPUSH
22681: LD_STRING DH-Reset
22683: PPUSH
22684: CALL_OW 88
// DialogueOff ;
22688: CALL_OW 7
// InGameOff ;
22692: CALL_OW 9
// blockPatrolThread := false ;
22696: LD_ADDR_EXP 38
22700: PUSH
22701: LD_INT 0
22703: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22704: LD_EXP 46
22708: PPUSH
22709: CALL_OW 122
// ComFree ( guard ) ;
22713: LD_VAR 0 1
22717: PPUSH
22718: CALL_OW 139
// end ; 2 :
22722: GO 22914
22724: LD_INT 2
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 22913
22732: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22733: LD_EXP 46
22737: PPUSH
22738: LD_STRING DH-Guard-2
22740: PPUSH
22741: CALL_OW 88
// DialogueOff ;
22745: CALL_OW 7
// wait ( 0 0$2 ) ;
22749: LD_INT 70
22751: PPUSH
22752: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22756: LD_INT 6
22758: PPUSH
22759: LD_INT 2
22761: PPUSH
22762: LD_INT 2
22764: PPUSH
22765: LD_INT 1
22767: PPUSH
22768: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22772: LD_VAR 0 1
22776: PPUSH
22777: LD_EXP 46
22781: PPUSH
22782: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22786: LD_VAR 0 1
22790: PPUSH
22791: CALL_OW 258
22795: PUSH
22796: LD_INT 1
22798: DOUBLE
22799: EQUAL
22800: IFTRUE 22804
22802: GO 22819
22804: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22805: LD_VAR 0 1
22809: PPUSH
22810: LD_STRING DRum-Fail-3
22812: PPUSH
22813: CALL_OW 88
22817: GO 22843
22819: LD_INT 2
22821: DOUBLE
22822: EQUAL
22823: IFTRUE 22827
22825: GO 22842
22827: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22828: LD_VAR 0 1
22832: PPUSH
22833: LD_STRING DRum-Fail-3
22835: PPUSH
22836: CALL_OW 88
22840: GO 22843
22842: POP
// wait ( 0 0$5 ) ;
22843: LD_INT 175
22845: PPUSH
22846: CALL_OW 67
// if IsOk ( guard ) then
22850: LD_VAR 0 1
22854: PPUSH
22855: CALL_OW 302
22859: IFFALSE 22871
// isAlarm := true else
22861: LD_ADDR_EXP 17
22865: PUSH
22866: LD_INT 1
22868: ST_TO_ADDR
22869: GO 22903
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22871: LD_INT 6
22873: PPUSH
22874: LD_INT 2
22876: PPUSH
22877: LD_INT 0
22879: PPUSH
22880: LD_INT 1
22882: PPUSH
22883: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22887: LD_INT 3
22889: PPUSH
22890: LD_INT 2
22892: PPUSH
22893: LD_INT 0
22895: PPUSH
22896: LD_INT 1
22898: PPUSH
22899: CALL_OW 80
// end ; blockPatrolThread := false ;
22903: LD_ADDR_EXP 38
22907: PUSH
22908: LD_INT 0
22910: ST_TO_ADDR
// end ; end ;
22911: GO 22914
22913: POP
// blockPatrolThread := false ;
22914: LD_ADDR_EXP 38
22918: PUSH
22919: LD_INT 0
22921: ST_TO_ADDR
// end ;
22922: LD_VAR 0 3
22926: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22927: LD_EXP 14
22931: PPUSH
22932: LD_INT 22
22934: PUSH
22935: LD_INT 5
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 3
22944: PUSH
22945: LD_INT 101
22947: PUSH
22948: LD_INT 6
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 92
22961: PUSH
22962: LD_INT 113
22964: PUSH
22965: LD_INT 16
22967: PUSH
22968: LD_INT 12
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 91
22979: PUSH
22980: LD_EXP 46
22984: PUSH
22985: LD_INT 6
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: PPUSH
22999: CALL_OW 72
23003: PUSH
23004: LD_EXP 30
23008: NOT
23009: AND
23010: IFFALSE 23115
23012: GO 23014
23014: DISABLE
23015: LD_INT 0
23017: PPUSH
// begin enable ;
23018: ENABLE
// DialogueOn ;
23019: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
23023: LD_EXP 46
23027: PPUSH
23028: LD_STRING DH-Join-
23030: PUSH
23031: LD_INT 1
23033: PPUSH
23034: LD_INT 3
23036: PPUSH
23037: CALL_OW 12
23041: STR
23042: PPUSH
23043: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
23047: LD_ADDR_VAR 0 1
23051: PUSH
23052: LD_EXP 14
23056: PPUSH
23057: LD_INT 22
23059: PUSH
23060: LD_INT 5
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 91
23069: PUSH
23070: LD_EXP 46
23074: PUSH
23075: LD_INT 10
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PPUSH
23087: CALL_OW 72
23091: PUSH
23092: FOR_IN
23093: IFFALSE 23109
// SetSide ( i , 2 ) ;
23095: LD_VAR 0 1
23099: PPUSH
23100: LD_INT 2
23102: PPUSH
23103: CALL_OW 235
23107: GO 23092
23109: POP
23110: POP
// DialogueOff ;
23111: CALL_OW 7
// end ; end_of_file
23115: PPOPN 1
23117: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
23118: LD_EXP 17
23122: PUSH
23123: LD_EXP 5
23127: AND
23128: IFFALSE 23429
23130: GO 23132
23132: DISABLE
23133: LD_INT 0
23135: PPUSH
23136: PPUSH
23137: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
23138: LD_INT 1
23140: NEG
23141: PPUSH
23142: LD_INT 1
23144: NEG
23145: PPUSH
23146: LD_STRING alarm
23148: PPUSH
23149: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
23153: LD_INT 3
23155: PPUSH
23156: LD_INT 2
23158: PPUSH
23159: LD_INT 2
23161: PPUSH
23162: LD_INT 1
23164: PPUSH
23165: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23169: LD_INT 6
23171: PPUSH
23172: LD_INT 2
23174: PPUSH
23175: LD_INT 2
23177: PPUSH
23178: LD_INT 1
23180: PPUSH
23181: CALL_OW 80
// DialogueOn ;
23185: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
23189: LD_EXP 46
23193: PPUSH
23194: LD_STRING DH-Alarm-1
23196: PPUSH
23197: CALL_OW 88
// DialogueOff ;
23201: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
23205: LD_ADDR_VAR 0 2
23209: PUSH
23210: LD_INT 107
23212: PUSH
23213: LD_INT 39
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 143
23222: PUSH
23223: LD_INT 33
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 180
23232: PUSH
23233: LD_INT 115
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 96
23242: PUSH
23243: LD_INT 90
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 59
23252: PUSH
23253: LD_INT 52
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 16
23262: PUSH
23263: LD_INT 15
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 90
23272: PUSH
23273: LD_INT 120
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: LD_INT 22
23296: PUSH
23297: LD_INT 6
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 25
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PPUSH
23318: CALL_OW 69
23322: ST_TO_ADDR
// for i in tmp do
23323: LD_ADDR_VAR 0 1
23327: PUSH
23328: LD_VAR 0 3
23332: PUSH
23333: FOR_IN
23334: IFFALSE 23402
// begin ComExit ( i ) ;
23336: LD_VAR 0 1
23340: PPUSH
23341: CALL 67360 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
23345: LD_VAR 0 1
23349: PPUSH
23350: LD_VAR 0 2
23354: PUSH
23355: LD_VAR 0 1
23359: PUSH
23360: LD_INT 7
23362: MOD
23363: PUSH
23364: LD_INT 1
23366: PLUS
23367: ARRAY
23368: PUSH
23369: LD_INT 1
23371: ARRAY
23372: PPUSH
23373: LD_VAR 0 2
23377: PUSH
23378: LD_VAR 0 1
23382: PUSH
23383: LD_INT 7
23385: MOD
23386: PUSH
23387: LD_INT 1
23389: PLUS
23390: ARRAY
23391: PUSH
23392: LD_INT 2
23394: ARRAY
23395: PPUSH
23396: CALL_OW 174
// end ;
23400: GO 23333
23402: POP
23403: POP
// Explode ;
23404: CALL 23432 0 0
// wait ( 0 0$45 ) ;
23408: LD_INT 1575
23410: PPUSH
23411: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23415: LD_VAR 0 3
23419: PPUSH
23420: LD_EXP 46
23424: PPUSH
23425: CALL_OW 175
// end ;
23429: PPOPN 3
23431: END
// export function Explode ; var i , x , y , j ; begin
23432: LD_INT 0
23434: PPUSH
23435: PPUSH
23436: PPUSH
23437: PPUSH
23438: PPUSH
// if hasExplosionsInFactory then
23439: LD_EXP 7
23443: IFFALSE 23463
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23445: LD_ADDR_EXP 29
23449: PUSH
23450: LD_EXP 29
23454: PPUSH
23455: LD_INT 61
23457: PPUSH
23458: CALL 66962 0 2
23462: ST_TO_ADDR
// if explosivePlantedList then
23463: LD_EXP 29
23467: IFFALSE 23615
// begin for i in explosivePlantedList do
23469: LD_ADDR_VAR 0 2
23473: PUSH
23474: LD_EXP 29
23478: PUSH
23479: FOR_IN
23480: IFFALSE 23583
// begin x := GetX ( i ) ;
23482: LD_ADDR_VAR 0 3
23486: PUSH
23487: LD_VAR 0 2
23491: PPUSH
23492: CALL_OW 250
23496: ST_TO_ADDR
// y := GetY ( i ) ;
23497: LD_ADDR_VAR 0 4
23501: PUSH
23502: LD_VAR 0 2
23506: PPUSH
23507: CALL_OW 251
23511: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23512: LD_ADDR_VAR 0 5
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: LD_INT 3
23522: PUSH
23523: LD_INT 5
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: FOR_IN
23532: IFFALSE 23579
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23534: LD_VAR 0 3
23538: PPUSH
23539: LD_VAR 0 5
23543: PPUSH
23544: LD_INT 2
23546: PPUSH
23547: CALL_OW 272
23551: PPUSH
23552: LD_VAR 0 4
23556: PPUSH
23557: LD_VAR 0 5
23561: PPUSH
23562: LD_INT 2
23564: PPUSH
23565: CALL_OW 273
23569: PPUSH
23570: LD_INT 1
23572: PPUSH
23573: CALL_OW 453
23577: GO 23531
23579: POP
23580: POP
// end ;
23581: GO 23479
23583: POP
23584: POP
// Say ( Heike , DH-End-2 ) ;
23585: LD_EXP 46
23589: PPUSH
23590: LD_STRING DH-End-2
23592: PPUSH
23593: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23597: LD_INT 175
23599: PUSH
23600: LD_EXP 29
23604: PPUSH
23605: CALL 31373 0 1
23609: MUL
23610: PPUSH
23611: CALL_OW 67
// end ; if not isAlarm then
23615: LD_EXP 17
23619: NOT
23620: IFFALSE 23630
// isAlarm := true ;
23622: LD_ADDR_EXP 17
23626: PUSH
23627: LD_INT 1
23629: ST_TO_ADDR
// end ;
23630: LD_VAR 0 1
23634: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23635: LD_INT 22
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 21
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 2
23657: PUSH
23658: LD_INT 101
23660: PUSH
23661: LD_INT 3
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 101
23670: PUSH
23671: LD_INT 6
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: LIST
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: PPUSH
23688: CALL_OW 69
23692: IFFALSE 23705
23694: GO 23696
23696: DISABLE
// isAlarm := true ; end_of_file
23697: LD_ADDR_EXP 17
23701: PUSH
23702: LD_INT 1
23704: ST_TO_ADDR
23705: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23706: LD_EXP 14
23710: PPUSH
23711: LD_INT 22
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PPUSH
23721: CALL_OW 72
23725: PUSH
23726: LD_INT 3
23728: GREATER
23729: PUSH
23730: LD_EXP 17
23734: NOT
23735: AND
23736: IFFALSE 27781
23738: GO 23740
23740: DISABLE
23741: LD_INT 0
23743: PPUSH
23744: PPUSH
23745: PPUSH
23746: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23747: LD_EXP 66
23751: PPUSH
23752: LD_INT 155
23754: PPUSH
23755: LD_INT 68
23757: PPUSH
23758: LD_INT 0
23760: PPUSH
23761: CALL_OW 48
// wait ( 0 0$1 ) ;
23765: LD_INT 35
23767: PPUSH
23768: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23772: LD_INT 35
23774: PPUSH
23775: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23779: LD_EXP 66
23783: PPUSH
23784: CALL_OW 314
23788: NOT
23789: IFFALSE 23805
// ComMoveUnit ( ruDisturb , Heike ) ;
23791: LD_EXP 66
23795: PPUSH
23796: LD_EXP 46
23800: PPUSH
23801: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23805: LD_EXP 46
23809: PPUSH
23810: LD_EXP 66
23814: PPUSH
23815: CALL_OW 296
23819: PUSH
23820: LD_INT 6
23822: LESS
23823: PUSH
23824: LD_EXP 66
23828: PPUSH
23829: CALL_OW 302
23833: AND
23834: IFFALSE 23772
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23836: LD_EXP 46
23840: PPUSH
23841: CALL_OW 257
23845: PUSH
23846: LD_INT 33
23848: NONEQUAL
23849: PUSH
23850: LD_EXP 14
23854: PPUSH
23855: LD_INT 22
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 91
23867: PUSH
23868: LD_EXP 66
23872: PUSH
23873: LD_INT 8
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: LD_INT 25
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 25
23896: PUSH
23897: LD_INT 11
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 25
23906: PUSH
23907: LD_INT 32
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 25
23916: PUSH
23917: LD_INT 34
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: PPUSH
23936: CALL_OW 72
23940: OR
23941: IFFALSE 23951
// isAlarm := true ;
23943: LD_ADDR_EXP 17
23947: PUSH
23948: LD_INT 1
23950: ST_TO_ADDR
// if isAlarm then
23951: LD_EXP 17
23955: IFFALSE 23959
// exit ;
23957: GO 27781
// DialogueOn ;
23959: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23963: LD_EXP 66
23967: PPUSH
23968: LD_STRING DMcn-Interrupt-1
23970: PPUSH
23971: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23975: LD_EXP 66
23979: PPUSH
23980: LD_STRING DMcn-Interrupt-2
23982: PPUSH
23983: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
23987: LD_EXP 66
23991: PPUSH
23992: LD_STRING DMcn-Interrupt-3
23994: PPUSH
23995: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
23999: LD_EXP 46
24003: PPUSH
24004: LD_STRING DH-Interrupt-a-4
24006: PPUSH
24007: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
24011: LD_EXP 66
24015: PPUSH
24016: LD_STRING DMcn-Interrupt-a-5
24018: PPUSH
24019: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
24023: LD_EXP 46
24027: PPUSH
24028: LD_STRING DH-Interrupt-a-6
24030: PPUSH
24031: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
24035: LD_EXP 66
24039: PPUSH
24040: LD_STRING DMcn-Interrupt-a-7
24042: PPUSH
24043: CALL_OW 88
// DialogueOff ;
24047: CALL_OW 7
// hasMuchin := true ;
24051: LD_ADDR_EXP 30
24055: PUSH
24056: LD_INT 1
24058: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24059: LD_STRING MuchinInfo
24061: PPUSH
24062: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
24066: LD_STRING M2a
24068: PPUSH
24069: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
24073: LD_INT 105
24075: PPUSH
24076: LD_INT 55
24078: PPUSH
24079: CALL_OW 428
24083: PPUSH
24084: LD_INT 2
24086: PPUSH
24087: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
24091: LD_INT 115
24093: PPUSH
24094: LD_INT 65
24096: PPUSH
24097: CALL_OW 428
24101: PPUSH
24102: LD_INT 2
24104: PPUSH
24105: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
24109: LD_INT 109
24111: PPUSH
24112: LD_INT 59
24114: PPUSH
24115: LD_INT 2
24117: PPUSH
24118: LD_INT 10
24120: NEG
24121: PPUSH
24122: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
24126: LD_INT 109
24128: PPUSH
24129: LD_INT 59
24131: PPUSH
24132: CALL_OW 84
// wait ( 0 0$2 ) ;
24136: LD_INT 70
24138: PPUSH
24139: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
24143: LD_INT 109
24145: PPUSH
24146: LD_INT 59
24148: PPUSH
24149: LD_INT 2
24151: PPUSH
24152: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
24156: LD_INT 35
24158: PPUSH
24159: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24163: LD_EXP 66
24167: PPUSH
24168: LD_EXP 46
24172: PPUSH
24173: CALL_OW 296
24177: PUSH
24178: LD_INT 6
24180: GREATER
24181: IFFALSE 24197
// ComMoveUnit ( ruDisturb , Heike ) ;
24183: LD_EXP 66
24187: PPUSH
24188: LD_EXP 46
24192: PPUSH
24193: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24197: LD_EXP 46
24201: PPUSH
24202: CALL_OW 257
24206: PUSH
24207: LD_INT 33
24209: NONEQUAL
24210: PUSH
24211: LD_EXP 14
24215: PPUSH
24216: LD_INT 22
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 91
24228: PUSH
24229: LD_EXP 66
24233: PUSH
24234: LD_INT 8
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: LD_INT 25
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 25
24257: PUSH
24258: LD_INT 11
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 25
24267: PUSH
24268: LD_INT 32
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 25
24277: PUSH
24278: LD_INT 34
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: PPUSH
24297: CALL_OW 72
24301: OR
24302: IFFALSE 24314
// begin isAlarm := true ;
24304: LD_ADDR_EXP 17
24308: PUSH
24309: LD_INT 1
24311: ST_TO_ADDR
// exit ;
24312: GO 27781
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
24314: LD_INT 105
24316: PPUSH
24317: LD_INT 55
24319: PPUSH
24320: CALL_OW 428
24324: NOT
24325: PUSH
24326: LD_INT 115
24328: PPUSH
24329: LD_INT 65
24331: PPUSH
24332: CALL_OW 428
24336: NOT
24337: OR
24338: IFFALSE 24350
// begin isAlarm := true ;
24340: LD_ADDR_EXP 17
24344: PUSH
24345: LD_INT 1
24347: ST_TO_ADDR
// exit ;
24348: GO 27781
// end ; until not BuildingsInProgress ( 2 ) ;
24350: LD_INT 2
24352: PPUSH
24353: CALL_OW 345
24357: NOT
24358: IFFALSE 24156
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
24360: LD_INT 105
24362: PPUSH
24363: LD_INT 55
24365: PPUSH
24366: CALL_OW 428
24370: PPUSH
24371: LD_INT 3
24373: PPUSH
24374: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
24378: LD_INT 115
24380: PPUSH
24381: LD_INT 65
24383: PPUSH
24384: CALL_OW 428
24388: PPUSH
24389: LD_INT 3
24391: PPUSH
24392: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
24396: LD_STRING M2a-out
24398: PPUSH
24399: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24403: LD_EXP 66
24407: PPUSH
24408: LD_INT 2
24410: PPUSH
24411: CALL_OW 120
// wait ( 0 0$3 ) ;
24415: LD_INT 105
24417: PPUSH
24418: CALL_OW 67
// hasMuchin := false ;
24422: LD_ADDR_EXP 30
24426: PUSH
24427: LD_INT 0
24429: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24430: LD_INT 4200
24432: PPUSH
24433: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24437: LD_INT 35
24439: PPUSH
24440: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24444: LD_EXP 66
24448: PPUSH
24449: CALL_OW 314
24453: NOT
24454: IFFALSE 24470
// ComMoveUnit ( ruDisturb , Heike ) ;
24456: LD_EXP 66
24460: PPUSH
24461: LD_EXP 46
24465: PPUSH
24466: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24470: LD_EXP 46
24474: PPUSH
24475: LD_EXP 66
24479: PPUSH
24480: CALL_OW 296
24484: PUSH
24485: LD_INT 6
24487: LESS
24488: PUSH
24489: LD_EXP 66
24493: PPUSH
24494: CALL_OW 302
24498: AND
24499: IFFALSE 24437
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24501: LD_EXP 46
24505: PPUSH
24506: CALL_OW 257
24510: PUSH
24511: LD_INT 33
24513: NONEQUAL
24514: PUSH
24515: LD_EXP 14
24519: PPUSH
24520: LD_INT 22
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 91
24532: PUSH
24533: LD_EXP 66
24537: PUSH
24538: LD_INT 8
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 2
24548: PUSH
24549: LD_INT 25
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 25
24561: PUSH
24562: LD_INT 11
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 25
24571: PUSH
24572: LD_INT 32
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 25
24581: PUSH
24582: LD_INT 34
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: LIST
24600: PPUSH
24601: CALL_OW 72
24605: OR
24606: IFFALSE 24616
// isAlarm := true ;
24608: LD_ADDR_EXP 17
24612: PUSH
24613: LD_INT 1
24615: ST_TO_ADDR
// if isAlarm then
24616: LD_EXP 17
24620: IFFALSE 24624
// exit ;
24622: GO 27781
// DialogueOn ;
24624: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24628: LD_EXP 66
24632: PPUSH
24633: LD_STRING DMcn-Interrupt-1
24635: PPUSH
24636: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24640: LD_EXP 66
24644: PPUSH
24645: LD_STRING DMcn-Interrupt-2
24647: PPUSH
24648: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24652: LD_INT 176
24654: PPUSH
24655: LD_INT 54
24657: PPUSH
24658: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24662: LD_INT 176
24664: PPUSH
24665: LD_INT 54
24667: PPUSH
24668: LD_INT 2
24670: PPUSH
24671: LD_INT 6
24673: NEG
24674: PPUSH
24675: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24679: LD_INT 10
24681: PPUSH
24682: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24686: LD_EXP 66
24690: PPUSH
24691: LD_STRING DMcn-Interrupt-b-3
24693: PPUSH
24694: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24698: LD_EXP 46
24702: PPUSH
24703: LD_STRING DH-Interrupt-b-4
24705: PPUSH
24706: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24710: LD_EXP 66
24714: PPUSH
24715: LD_STRING DMcn-Interrupt-b-5
24717: PPUSH
24718: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24722: LD_EXP 46
24726: PPUSH
24727: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24731: LD_INT 176
24733: PPUSH
24734: LD_INT 54
24736: PPUSH
24737: LD_INT 2
24739: PPUSH
24740: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24744: LD_EXP 66
24748: PPUSH
24749: LD_STRING DMcn-Interrupt-b-6
24751: PPUSH
24752: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24756: LD_EXP 46
24760: PPUSH
24761: LD_STRING DH-Interrupt-b-7
24763: PPUSH
24764: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24768: LD_EXP 66
24772: PPUSH
24773: LD_STRING DMcn-Interrupt-b-8
24775: PPUSH
24776: CALL_OW 88
// DialogueOff ;
24780: CALL_OW 7
// Query ( MuchinInfo ) ;
24784: LD_STRING MuchinInfo
24786: PPUSH
24787: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24791: LD_STRING M2b
24793: PPUSH
24794: CALL_OW 337
// hasMuchin := true ;
24798: LD_ADDR_EXP 30
24802: PUSH
24803: LD_INT 1
24805: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24806: LD_INT 35
24808: PPUSH
24809: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24813: LD_EXP 66
24817: PPUSH
24818: LD_EXP 46
24822: PPUSH
24823: CALL_OW 296
24827: PUSH
24828: LD_INT 6
24830: GREATER
24831: IFFALSE 24847
// ComMoveUnit ( ruDisturb , Heike ) ;
24833: LD_EXP 66
24837: PPUSH
24838: LD_EXP 46
24842: PPUSH
24843: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24847: LD_EXP 46
24851: PPUSH
24852: CALL_OW 257
24856: PUSH
24857: LD_INT 33
24859: NONEQUAL
24860: PUSH
24861: LD_EXP 14
24865: PPUSH
24866: LD_INT 22
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 91
24878: PUSH
24879: LD_EXP 66
24883: PUSH
24884: LD_INT 8
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 25
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 25
24907: PUSH
24908: LD_INT 11
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 25
24917: PUSH
24918: LD_INT 32
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 25
24927: PUSH
24928: LD_INT 34
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: PPUSH
24947: CALL_OW 72
24951: OR
24952: IFFALSE 24964
// begin isAlarm := true ;
24954: LD_ADDR_EXP 17
24958: PUSH
24959: LD_INT 1
24961: ST_TO_ADDR
// exit ;
24962: GO 27781
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
24964: LD_EXP 46
24968: PPUSH
24969: LD_INT 61
24971: PPUSH
24972: CALL_OW 296
24976: PUSH
24977: LD_INT 4
24979: LESS
24980: IFFALSE 24806
// InGameOn ;
24982: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
24986: LD_INT 173
24988: PPUSH
24989: LD_INT 54
24991: PPUSH
24992: LD_INT 2
24994: PPUSH
24995: LD_INT 8
24997: NEG
24998: PPUSH
24999: CALL_OW 330
// SetSide ( Heike , 3 ) ;
25003: LD_EXP 46
25007: PPUSH
25008: LD_INT 3
25010: PPUSH
25011: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
25015: LD_EXP 46
25019: PPUSH
25020: LD_INT 61
25022: PPUSH
25023: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
25027: LD_EXP 66
25031: PPUSH
25032: LD_INT 61
25034: PPUSH
25035: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
25039: LD_EXP 53
25043: PUSH
25044: LD_EXP 14
25048: IN
25049: PUSH
25050: LD_EXP 53
25054: PPUSH
25055: LD_INT 61
25057: PPUSH
25058: CALL_OW 296
25062: PUSH
25063: LD_INT 12
25065: LESS
25066: AND
25067: IFFALSE 25111
// begin SetSide ( Markov , 3 ) ;
25069: LD_EXP 53
25073: PPUSH
25074: LD_INT 3
25076: PPUSH
25077: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
25081: LD_EXP 53
25085: PPUSH
25086: LD_INT 61
25088: PPUSH
25089: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
25093: LD_INT 35
25095: PPUSH
25096: CALL_OW 67
// until IsInUnit ( Markov ) ;
25100: LD_EXP 53
25104: PPUSH
25105: CALL_OW 310
25109: IFFALSE 25093
// end ; repeat wait ( 0 0$1 ) ;
25111: LD_INT 35
25113: PPUSH
25114: CALL_OW 67
// until IsInUnit ( Heike ) ;
25118: LD_EXP 46
25122: PPUSH
25123: CALL_OW 310
25127: IFFALSE 25111
// SetClass ( Heike , class_mechanic ) ;
25129: LD_EXP 46
25133: PPUSH
25134: LD_INT 3
25136: PPUSH
25137: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
25141: LD_INT 61
25143: PPUSH
25144: LD_INT 21
25146: PPUSH
25147: LD_INT 3
25149: PPUSH
25150: LD_INT 3
25152: PPUSH
25153: LD_INT 43
25155: PPUSH
25156: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
25160: LD_EXP 31
25164: PUSH
25165: LD_EXP 53
25169: PUSH
25170: LD_EXP 14
25174: IN
25175: PUSH
25176: LD_EXP 53
25180: PPUSH
25181: CALL_OW 310
25185: PUSH
25186: LD_INT 61
25188: EQUAL
25189: OR
25190: AND
25191: IFFALSE 25681
// begin wait ( 0 0$5 ) ;
25193: LD_INT 175
25195: PPUSH
25196: CALL_OW 67
// SetSide ( Heike , 2 ) ;
25200: LD_EXP 46
25204: PPUSH
25205: LD_INT 2
25207: PPUSH
25208: CALL_OW 235
// SetSide ( Markov , 2 ) ;
25212: LD_EXP 53
25216: PPUSH
25217: LD_INT 2
25219: PPUSH
25220: CALL_OW 235
// if not Markov in heikeSquad then
25224: LD_EXP 53
25228: PUSH
25229: LD_EXP 14
25233: IN
25234: NOT
25235: IFFALSE 25257
// heikeSquad := Join ( heikeSquad , Markov ) ;
25237: LD_ADDR_EXP 14
25241: PUSH
25242: LD_EXP 14
25246: PPUSH
25247: LD_EXP 53
25251: PPUSH
25252: CALL 66962 0 2
25256: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
25257: LD_EXP 53
25261: PPUSH
25262: LD_STRING DMar-Factory-1
25264: PPUSH
25265: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
25269: LD_INT 61
25271: PPUSH
25272: LD_INT 99
25274: PPUSH
25275: CALL_OW 329
// game_speed := 4 ;
25279: LD_ADDR_OWVAR 65
25283: PUSH
25284: LD_INT 4
25286: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
25287: LD_EXP 66
25291: PPUSH
25292: CALL_OW 122
// ComExitBuilding ( Markov ) ;
25296: LD_EXP 53
25300: PPUSH
25301: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
25305: LD_EXP 66
25309: PPUSH
25310: LD_INT 171
25312: PPUSH
25313: LD_INT 51
25315: PPUSH
25316: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
25320: LD_EXP 53
25324: PPUSH
25325: LD_INT 167
25327: PPUSH
25328: LD_INT 50
25330: PPUSH
25331: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
25335: LD_EXP 53
25339: PPUSH
25340: LD_EXP 66
25344: PPUSH
25345: CALL_OW 179
// wait ( 0 0$5 ) ;
25349: LD_INT 175
25351: PPUSH
25352: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
25356: LD_EXP 53
25360: PPUSH
25361: LD_STRING DMar-Factory-2
25363: PPUSH
25364: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
25368: LD_ADDR_VAR 0 2
25372: PUSH
25373: LD_INT 22
25375: PUSH
25376: LD_INT 3
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 33
25385: PUSH
25386: LD_INT 3
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PPUSH
25397: CALL_OW 69
25401: PUSH
25402: LD_INT 1
25404: ARRAY
25405: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
25406: LD_EXP 66
25410: PPUSH
25411: LD_VAR 0 2
25415: PPUSH
25416: CALL_OW 119
// game_speed := 4 ;
25420: LD_ADDR_OWVAR 65
25424: PUSH
25425: LD_INT 4
25427: ST_TO_ADDR
// async ;
25428: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
25429: LD_EXP 66
25433: PPUSH
25434: LD_STRING DMcn-Factory-3
25436: PPUSH
25437: CALL_OW 88
// wait ( 0 0$0.9 ) ;
25441: LD_INT 32
25443: PPUSH
25444: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
25448: LD_VAR 0 2
25452: PPUSH
25453: LD_EXP 66
25457: PPUSH
25458: CALL_OW 115
// sync ;
25462: SYNC
// wait ( 0 0$1 ) ;
25463: LD_INT 35
25465: PPUSH
25466: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25470: LD_EXP 66
25474: PPUSH
25475: CALL_OW 66
// SetSide ( veh , 7 ) ;
25479: LD_VAR 0 2
25483: PPUSH
25484: LD_INT 7
25486: PPUSH
25487: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25491: LD_VAR 0 2
25495: PPUSH
25496: LD_INT 84
25498: PPUSH
25499: LD_INT 38
25501: PPUSH
25502: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25506: LD_EXP 67
25510: PUSH
25511: LD_INT 1
25513: ARRAY
25514: PPUSH
25515: CALL_OW 258
25519: PUSH
25520: LD_INT 1
25522: EQUAL
25523: IFFALSE 25543
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25525: LD_EXP 67
25529: PUSH
25530: LD_INT 1
25532: ARRAY
25533: PPUSH
25534: LD_STRING DRum-Factory-4
25536: PPUSH
25537: CALL_OW 88
25541: GO 25559
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25543: LD_EXP 67
25547: PUSH
25548: LD_INT 1
25550: ARRAY
25551: PPUSH
25552: LD_STRING DRuf-Factory-4
25554: PPUSH
25555: CALL_OW 88
// wait ( 0 0$1 ) ;
25559: LD_INT 35
25561: PPUSH
25562: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25566: LD_EXP 67
25570: PPUSH
25571: LD_INT 26
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PPUSH
25581: CALL_OW 72
25585: PUSH
25586: LD_INT 1
25588: ARRAY
25589: PPUSH
25590: LD_STRING DRum-Factory-6
25592: PPUSH
25593: CALL_OW 88
// wait ( 0 0$2 ) ;
25597: LD_INT 70
25599: PPUSH
25600: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25604: LD_EXP 46
25608: PPUSH
25609: LD_INT 33
25611: PPUSH
25612: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25616: LD_EXP 46
25620: PPUSH
25621: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25625: LD_EXP 46
25629: PPUSH
25630: LD_INT 168
25632: PPUSH
25633: LD_INT 54
25635: PPUSH
25636: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25640: LD_INT 173
25642: PPUSH
25643: LD_INT 54
25645: PPUSH
25646: LD_INT 2
25648: PPUSH
25649: CALL_OW 331
// InGameOff ;
25653: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25657: LD_STRING M2b-out
25659: PPUSH
25660: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25664: LD_STRING ACH_TOY
25666: PPUSH
25667: CALL_OW 543
// hasMuchin := false ;
25671: LD_ADDR_EXP 30
25675: PUSH
25676: LD_INT 0
25678: ST_TO_ADDR
// exit ;
25679: GO 27781
// end ; wait ( 0 0$5 ) ;
25681: LD_INT 175
25683: PPUSH
25684: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25688: LD_INT 61
25690: PPUSH
25691: LD_INT 99
25693: PPUSH
25694: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25698: LD_EXP 53
25702: PUSH
25703: LD_EXP 14
25707: IN
25708: PUSH
25709: LD_EXP 53
25713: PPUSH
25714: CALL_OW 255
25718: PUSH
25719: LD_INT 3
25721: EQUAL
25722: AND
25723: IFFALSE 25746
// begin SetSide ( Markov , 2 ) ;
25725: LD_EXP 53
25729: PPUSH
25730: LD_INT 2
25732: PPUSH
25733: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25737: LD_EXP 53
25741: PPUSH
25742: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25746: LD_EXP 46
25750: PPUSH
25751: LD_INT 2
25753: PPUSH
25754: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25758: LD_EXP 46
25762: PPUSH
25763: LD_INT 33
25765: PPUSH
25766: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25770: LD_EXP 66
25774: PPUSH
25775: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25779: LD_EXP 46
25783: PPUSH
25784: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25788: LD_EXP 46
25792: PPUSH
25793: LD_INT 168
25795: PPUSH
25796: LD_INT 54
25798: PPUSH
25799: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25803: LD_INT 173
25805: PPUSH
25806: LD_INT 54
25808: PPUSH
25809: LD_INT 2
25811: PPUSH
25812: CALL_OW 331
// InGameOff ;
25816: CALL_OW 9
// wait ( 3 ) ;
25820: LD_INT 3
25822: PPUSH
25823: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25827: LD_EXP 66
25831: PPUSH
25832: LD_INT 2
25834: PPUSH
25835: CALL_OW 120
// wait ( 0 0$3 ) ;
25839: LD_INT 105
25841: PPUSH
25842: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
25846: LD_STRING M2b-out
25848: PPUSH
25849: CALL_OW 337
// hasMuchin := false ;
25853: LD_ADDR_EXP 30
25857: PUSH
25858: LD_INT 0
25860: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25861: LD_INT 4200
25863: PPUSH
25864: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25868: LD_INT 35
25870: PPUSH
25871: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25875: LD_EXP 66
25879: PPUSH
25880: CALL_OW 314
25884: NOT
25885: IFFALSE 25901
// ComMoveUnit ( ruDisturb , Heike ) ;
25887: LD_EXP 66
25891: PPUSH
25892: LD_EXP 46
25896: PPUSH
25897: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
25901: LD_EXP 46
25905: PPUSH
25906: LD_EXP 66
25910: PPUSH
25911: CALL_OW 296
25915: PUSH
25916: LD_INT 2
25918: LESS
25919: PUSH
25920: LD_EXP 66
25924: PPUSH
25925: CALL_OW 302
25929: AND
25930: IFFALSE 25868
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25932: LD_EXP 46
25936: PPUSH
25937: CALL_OW 257
25941: PUSH
25942: LD_INT 33
25944: NONEQUAL
25945: PUSH
25946: LD_EXP 14
25950: PPUSH
25951: LD_INT 22
25953: PUSH
25954: LD_INT 2
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 91
25963: PUSH
25964: LD_EXP 66
25968: PUSH
25969: LD_INT 8
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: LD_INT 25
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 25
25992: PUSH
25993: LD_INT 11
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 25
26002: PUSH
26003: LD_INT 32
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 25
26012: PUSH
26013: LD_INT 34
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: PPUSH
26032: CALL_OW 72
26036: OR
26037: IFFALSE 26047
// isAlarm := true ;
26039: LD_ADDR_EXP 17
26043: PUSH
26044: LD_INT 1
26046: ST_TO_ADDR
// if isAlarm then
26047: LD_EXP 17
26051: IFFALSE 26055
// exit ;
26053: GO 27781
// ComTurnUnit ( Heike , ruDisturb ) ;
26055: LD_EXP 46
26059: PPUSH
26060: LD_EXP 66
26064: PPUSH
26065: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
26069: LD_EXP 66
26073: PPUSH
26074: LD_EXP 46
26078: PPUSH
26079: CALL_OW 119
// wait ( 3 ) ;
26083: LD_INT 3
26085: PPUSH
26086: CALL_OW 67
// for i := 1 to 3 do
26090: LD_ADDR_VAR 0 1
26094: PUSH
26095: DOUBLE
26096: LD_INT 1
26098: DEC
26099: ST_TO_ADDR
26100: LD_INT 3
26102: PUSH
26103: FOR_TO
26104: IFFALSE 26121
// CreateCratesArea ( 5 , cratesArea , false ) ;
26106: LD_INT 5
26108: PPUSH
26109: LD_INT 58
26111: PPUSH
26112: LD_INT 0
26114: PPUSH
26115: CALL_OW 55
26119: GO 26103
26121: POP
26122: POP
// uc_side := 3 ;
26123: LD_ADDR_OWVAR 20
26127: PUSH
26128: LD_INT 3
26130: ST_TO_ADDR
// uc_nation := nation_russian ;
26131: LD_ADDR_OWVAR 21
26135: PUSH
26136: LD_INT 3
26138: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
26139: LD_INT 21
26141: PPUSH
26142: LD_INT 3
26144: PPUSH
26145: LD_INT 1
26147: PPUSH
26148: LD_INT 51
26150: PPUSH
26151: LD_INT 100
26153: PPUSH
26154: CALL 34111 0 5
// veh := CreateVehicle ;
26158: LD_ADDR_VAR 0 2
26162: PUSH
26163: CALL_OW 45
26167: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
26168: LD_VAR 0 2
26172: PPUSH
26173: LD_INT 104
26175: PPUSH
26176: LD_INT 41
26178: PPUSH
26179: LD_INT 3
26181: PPUSH
26182: LD_INT 0
26184: PPUSH
26185: CALL 69102 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
26189: LD_VAR 0 2
26193: PPUSH
26194: LD_INT 1
26196: PPUSH
26197: LD_INT 100
26199: PPUSH
26200: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
26204: CALL_OW 44
26208: PPUSH
26209: LD_VAR 0 2
26213: PPUSH
26214: CALL_OW 52
// DialogueOn ;
26218: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
26222: LD_EXP 66
26226: PPUSH
26227: LD_STRING DMcn-Interrupt-1
26229: PPUSH
26230: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
26234: LD_EXP 66
26238: PPUSH
26239: LD_STRING DMcn-Interrupt-2
26241: PPUSH
26242: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
26246: LD_EXP 66
26250: PPUSH
26251: LD_STRING DMcn-Interrupt-c-3
26253: PPUSH
26254: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
26258: LD_INT 101
26260: PPUSH
26261: LD_INT 38
26263: PPUSH
26264: LD_INT 2
26266: PPUSH
26267: LD_INT 10
26269: NEG
26270: PPUSH
26271: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
26275: LD_INT 101
26277: PPUSH
26278: LD_INT 38
26280: PPUSH
26281: CALL_OW 84
// wait ( 0 0$2 ) ;
26285: LD_INT 70
26287: PPUSH
26288: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
26292: LD_INT 101
26294: PPUSH
26295: LD_INT 38
26297: PPUSH
26298: LD_INT 2
26300: PPUSH
26301: CALL_OW 331
// RemoveUnit ( veh ) ;
26305: LD_VAR 0 2
26309: PPUSH
26310: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
26314: LD_EXP 66
26318: PPUSH
26319: LD_STRING DMcn-Interrupt-c-4
26321: PPUSH
26322: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
26326: LD_EXP 46
26330: PPUSH
26331: LD_STRING DH-Interrupt-c-5
26333: PPUSH
26334: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
26338: LD_EXP 66
26342: PPUSH
26343: LD_STRING DMcn-Interrupt-c-6
26345: PPUSH
26346: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
26350: LD_EXP 46
26354: PPUSH
26355: LD_STRING DH-Interrupt-c-7
26357: PPUSH
26358: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
26362: LD_EXP 66
26366: PPUSH
26367: LD_STRING DMcn-Interrupt-c-8
26369: PPUSH
26370: CALL_OW 88
// DialogueOff ;
26374: CALL_OW 7
// hasMuchin := true ;
26378: LD_ADDR_EXP 30
26382: PUSH
26383: LD_INT 1
26385: ST_TO_ADDR
// Query ( MuchinInfo ) ;
26386: LD_STRING MuchinInfo
26388: PPUSH
26389: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
26393: LD_STRING M2c
26395: PPUSH
26396: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
26400: LD_INT 35
26402: PPUSH
26403: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
26407: LD_EXP 66
26411: PPUSH
26412: LD_EXP 46
26416: PPUSH
26417: CALL_OW 296
26421: PUSH
26422: LD_INT 6
26424: GREATER
26425: IFFALSE 26441
// ComMoveUnit ( ruDisturb , Heike ) ;
26427: LD_EXP 66
26431: PPUSH
26432: LD_EXP 46
26436: PPUSH
26437: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26441: LD_EXP 46
26445: PPUSH
26446: CALL_OW 257
26450: PUSH
26451: LD_INT 33
26453: NONEQUAL
26454: PUSH
26455: LD_EXP 14
26459: PPUSH
26460: LD_INT 22
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 91
26472: PUSH
26473: LD_EXP 66
26477: PUSH
26478: LD_INT 8
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: LD_INT 25
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 25
26501: PUSH
26502: LD_INT 11
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 25
26511: PUSH
26512: LD_INT 32
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 25
26521: PUSH
26522: LD_INT 34
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: PPUSH
26541: CALL_OW 72
26545: OR
26546: IFFALSE 26558
// begin isAlarm := true ;
26548: LD_ADDR_EXP 17
26552: PUSH
26553: LD_INT 1
26555: ST_TO_ADDR
// exit ;
26556: GO 27781
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26558: LD_EXP 14
26562: PUSH
26563: LD_EXP 46
26567: UNION
26568: PPUSH
26569: LD_INT 92
26571: PUSH
26572: LD_INT 100
26574: PUSH
26575: LD_INT 37
26577: PUSH
26578: LD_INT 6
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: PPUSH
26587: CALL_OW 72
26591: IFFALSE 26400
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26593: LD_INT 100
26595: PPUSH
26596: LD_INT 37
26598: PPUSH
26599: LD_INT 3
26601: PPUSH
26602: LD_INT 10
26604: NEG
26605: PPUSH
26606: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26610: LD_ADDR_VAR 0 3
26614: PUSH
26615: LD_EXP 14
26619: PUSH
26620: LD_EXP 46
26624: UNION
26625: PPUSH
26626: LD_INT 25
26628: PUSH
26629: LD_INT 33
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 91
26638: PUSH
26639: LD_INT 6
26641: PUSH
26642: LD_INT 12
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PPUSH
26654: CALL_OW 72
26658: ST_TO_ADDR
// for i in tmp do
26659: LD_ADDR_VAR 0 1
26663: PUSH
26664: LD_VAR 0 3
26668: PUSH
26669: FOR_IN
26670: IFFALSE 26701
// begin SetSide ( i , 3 ) ;
26672: LD_VAR 0 1
26676: PPUSH
26677: LD_INT 3
26679: PPUSH
26680: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26684: LD_VAR 0 1
26688: PPUSH
26689: LD_INT 101
26691: PPUSH
26692: LD_INT 38
26694: PPUSH
26695: CALL_OW 111
// end ;
26699: GO 26669
26701: POP
26702: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26703: LD_EXP 66
26707: PPUSH
26708: LD_INT 104
26710: PPUSH
26711: LD_INT 37
26713: PPUSH
26714: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26718: LD_EXP 66
26722: PPUSH
26723: LD_EXP 46
26727: PPUSH
26728: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26732: LD_INT 35
26734: PPUSH
26735: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26739: LD_ADDR_VAR 0 4
26743: PUSH
26744: LD_INT 58
26746: PPUSH
26747: CALL_OW 435
26751: ST_TO_ADDR
// for i in tmp do
26752: LD_ADDR_VAR 0 1
26756: PUSH
26757: LD_VAR 0 3
26761: PUSH
26762: FOR_IN
26763: IFFALSE 26806
// if not HasTask ( i ) then
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 314
26774: NOT
26775: IFFALSE 26804
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26777: LD_VAR 0 1
26781: PPUSH
26782: LD_VAR 0 4
26786: PUSH
26787: LD_INT 1
26789: ARRAY
26790: PPUSH
26791: LD_VAR 0 4
26795: PUSH
26796: LD_INT 2
26798: ARRAY
26799: PPUSH
26800: CALL_OW 117
26804: GO 26762
26806: POP
26807: POP
// until not cr ;
26808: LD_VAR 0 4
26812: NOT
26813: IFFALSE 26732
// wait ( 0 0$2 ) ;
26815: LD_INT 70
26817: PPUSH
26818: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
26822: LD_INT 100
26824: PPUSH
26825: LD_INT 37
26827: PPUSH
26828: LD_INT 3
26830: PPUSH
26831: CALL_OW 331
// for i in tmp do
26835: LD_ADDR_VAR 0 1
26839: PUSH
26840: LD_VAR 0 3
26844: PUSH
26845: FOR_IN
26846: IFFALSE 26862
// SetSide ( i , 2 ) ;
26848: LD_VAR 0 1
26852: PPUSH
26853: LD_INT 2
26855: PPUSH
26856: CALL_OW 235
26860: GO 26845
26862: POP
26863: POP
// if Kaia in tmp then
26864: LD_EXP 51
26868: PUSH
26869: LD_VAR 0 3
26873: IN
26874: IFFALSE 27175
// begin InGameOn ;
26876: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
26880: LD_EXP 51
26884: PPUSH
26885: LD_EXP 66
26889: PPUSH
26890: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
26894: LD_EXP 66
26898: PPUSH
26899: LD_EXP 51
26903: PPUSH
26904: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
26908: LD_EXP 51
26912: PPUSH
26913: LD_EXP 66
26917: PPUSH
26918: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
26922: LD_EXP 51
26926: PPUSH
26927: LD_STRING DK-Assassin-1
26929: PPUSH
26930: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
26934: LD_EXP 66
26938: PPUSH
26939: LD_STRING DMcn-Assassin-2
26941: PPUSH
26942: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
26946: LD_EXP 51
26950: PPUSH
26951: LD_STRING DK-Assassin-3
26953: PPUSH
26954: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
26958: LD_EXP 66
26962: PPUSH
26963: LD_STRING DMcn-Assassin-4
26965: PPUSH
26966: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
26970: LD_EXP 51
26974: PPUSH
26975: LD_STRING DK-Assassin-5
26977: PPUSH
26978: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
26982: LD_EXP 66
26986: PPUSH
26987: LD_STRING DMcn-Assassin-6
26989: PPUSH
26990: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
26994: LD_EXP 51
26998: PPUSH
26999: LD_INT 3
27001: PPUSH
27002: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
27006: LD_EXP 51
27010: PUSH
27011: LD_EXP 66
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PPUSH
27020: LD_INT 6
27022: PPUSH
27023: CALL_OW 120
// wait ( 0 0$5 ) ;
27027: LD_INT 175
27029: PPUSH
27030: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
27034: LD_EXP 51
27038: PPUSH
27039: LD_STRING DK-Assassin-7
27041: PPUSH
27042: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
27046: LD_EXP 66
27050: PPUSH
27051: LD_STRING DMcn-Assassin-8
27053: PPUSH
27054: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27058: LD_INT 10
27060: PPUSH
27061: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
27065: LD_EXP 51
27069: PPUSH
27070: LD_STRING DK-Assassin-9
27072: PPUSH
27073: CALL_OW 88
// wait ( 0 0$2 ) ;
27077: LD_INT 70
27079: PPUSH
27080: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
27084: LD_EXP 51
27088: PPUSH
27089: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
27093: LD_EXP 66
27097: PPUSH
27098: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
27102: LD_EXP 51
27106: PPUSH
27107: LD_INT 2
27109: PPUSH
27110: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
27114: LD_EXP 51
27118: PPUSH
27119: LD_EXP 46
27123: PPUSH
27124: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
27128: LD_EXP 51
27132: PPUSH
27133: LD_STRING DK-Assasin-10
27135: PPUSH
27136: CALL_OW 88
// InGameOff ;
27140: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
27144: LD_STRING ACH_POKER
27146: PPUSH
27147: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
27151: LD_STRING M2c-out
27153: PPUSH
27154: CALL_OW 337
// wait ( 0 0$3 ) ;
27158: LD_INT 105
27160: PPUSH
27161: CALL_OW 67
// hasMuchin := false ;
27165: LD_ADDR_EXP 30
27169: PUSH
27170: LD_INT 0
27172: ST_TO_ADDR
// exit ;
27173: GO 27781
// end ; ChangeMissionObjectives ( M2c-out ) ;
27175: LD_STRING M2c-out
27177: PPUSH
27178: CALL_OW 337
// meetWithMuchin := true ;
27182: LD_ADDR_EXP 44
27186: PUSH
27187: LD_INT 1
27189: ST_TO_ADDR
// InGameOn ;
27190: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
27194: LD_EXP 66
27198: PPUSH
27199: LD_STRING DMcn-Fail-1
27201: PPUSH
27202: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
27206: LD_VAR 0 3
27210: PPUSH
27211: LD_INT 114
27213: PPUSH
27214: LD_INT 17
27216: PPUSH
27217: CALL_OW 111
// wait ( 0 0$1 ) ;
27221: LD_INT 35
27223: PPUSH
27224: CALL_OW 67
// async ;
27228: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27229: LD_EXP 66
27233: PPUSH
27234: LD_EXP 46
27238: PPUSH
27239: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
27243: LD_EXP 66
27247: PPUSH
27248: LD_STRING DMcn-Fail-2
27250: PPUSH
27251: CALL_OW 88
// ComStop ( Heike ) ;
27255: LD_EXP 46
27259: PPUSH
27260: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
27264: LD_EXP 46
27268: PPUSH
27269: LD_EXP 66
27273: PPUSH
27274: CALL_OW 179
// sync ;
27278: SYNC
// Say ( Heike , DH-Fail-3 ) ;
27279: LD_EXP 46
27283: PPUSH
27284: LD_STRING DH-Fail-3
27286: PPUSH
27287: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
27291: LD_EXP 66
27295: PPUSH
27296: LD_STRING DMcn-Fail-4
27298: PPUSH
27299: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
27303: LD_EXP 46
27307: PUSH
27308: LD_EXP 66
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PPUSH
27317: LD_INT 41
27319: PPUSH
27320: LD_INT 19
27322: PPUSH
27323: CALL_OW 111
// wait ( 0 0$2 ) ;
27327: LD_INT 70
27329: PPUSH
27330: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
27334: LD_EXP 66
27338: PPUSH
27339: LD_INT 40
27341: PPUSH
27342: LD_INT 19
27344: PPUSH
27345: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
27349: LD_EXP 46
27353: PPUSH
27354: LD_INT 43
27356: PPUSH
27357: LD_INT 21
27359: PPUSH
27360: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27364: LD_EXP 66
27368: PPUSH
27369: LD_EXP 46
27373: PPUSH
27374: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
27378: LD_EXP 46
27382: PPUSH
27383: LD_EXP 66
27387: PPUSH
27388: CALL_OW 179
// wait ( 0 0$2 ) ;
27392: LD_INT 70
27394: PPUSH
27395: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
27399: LD_EXP 66
27403: PPUSH
27404: LD_STRING DMcn-Fail-5
27406: PPUSH
27407: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27411: LD_EXP 46
27415: PPUSH
27416: CALL_OW 87
// wait ( 0 0$2 ) ;
27420: LD_INT 70
27422: PPUSH
27423: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
27427: LD_EXP 66
27431: PPUSH
27432: LD_STRING DMcn-Fail-6
27434: PPUSH
27435: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27439: LD_EXP 46
27443: PPUSH
27444: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
27448: LD_INT 35
27450: PPUSH
27451: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
27455: LD_EXP 46
27459: PPUSH
27460: LD_INT 43
27462: PPUSH
27463: LD_INT 21
27465: PPUSH
27466: CALL_OW 307
27470: IFFALSE 27448
// CenterNowOnUnits ( Heike ) ;
27472: LD_EXP 46
27476: PPUSH
27477: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
27481: LD_STRING MuchinQuestion
27483: PPUSH
27484: CALL_OW 97
27488: PUSH
27489: LD_INT 1
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27597
27497: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
27498: LD_EXP 66
27502: PPUSH
27503: LD_STRING DMcn-Fail-7
27505: PPUSH
27506: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
27510: LD_EXP 46
27514: PPUSH
27515: LD_STRING DH-Fail-8
27517: PPUSH
27518: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27522: LD_INT 10
27524: PPUSH
27525: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
27529: LD_EXP 46
27533: PPUSH
27534: LD_STRING DH-Fail-9
27536: PPUSH
27537: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27541: LD_EXP 46
27545: PPUSH
27546: LD_STRING DH-Fail-10
27548: PPUSH
27549: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27553: LD_EXP 66
27557: PPUSH
27558: LD_STRING DMcn-Fail-11
27560: PPUSH
27561: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27565: LD_EXP 66
27569: PPUSH
27570: LD_EXP 46
27574: PPUSH
27575: CALL_OW 115
// wait ( 0 0$2 ) ;
27579: LD_INT 70
27581: PPUSH
27582: CALL_OW 67
// KillUnit ( Heike ) ;
27586: LD_EXP 46
27590: PPUSH
27591: CALL_OW 66
// end ; 2 :
27595: GO 27777
27597: LD_INT 2
27599: DOUBLE
27600: EQUAL
27601: IFTRUE 27605
27603: GO 27776
27605: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27606: LD_EXP 46
27610: PPUSH
27611: LD_STRING DH-Fail-a-8
27613: PPUSH
27614: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27618: LD_EXP 46
27622: PPUSH
27623: LD_STRING DH-Fail-a-9
27625: PPUSH
27626: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27630: LD_EXP 46
27634: PPUSH
27635: LD_STRING DH-Fail-10
27637: PPUSH
27638: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27642: LD_EXP 46
27646: PPUSH
27647: LD_STRING DH-Fail-a-11
27649: PPUSH
27650: CALL_OW 88
// async ;
27654: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27655: LD_EXP 66
27659: PPUSH
27660: LD_EXP 46
27664: PPUSH
27665: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27669: LD_EXP 66
27673: PPUSH
27674: LD_EXP 46
27678: PPUSH
27679: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27683: LD_EXP 66
27687: PPUSH
27688: LD_STRING DH-Fail-12
27690: PPUSH
27691: CALL_OW 88
// sync ;
27695: SYNC
// wait ( 0 0$1 ) ;
27696: LD_INT 35
27698: PPUSH
27699: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27703: LD_EXP 46
27707: PPUSH
27708: LD_STRING DH-Fail-a-13
27710: PPUSH
27711: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27715: LD_EXP 66
27719: PPUSH
27720: LD_INT 100
27722: PPUSH
27723: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27727: LD_EXP 66
27731: PPUSH
27732: LD_STRING DMcn-Fail-a-14
27734: PPUSH
27735: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27739: LD_EXP 66
27743: PPUSH
27744: CALL_OW 66
// wait ( 0 0$1 ) ;
27748: LD_INT 35
27750: PPUSH
27751: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27755: LD_EXP 46
27759: PPUSH
27760: LD_STRING DH-Fail-a-15
27762: PPUSH
27763: CALL_OW 88
// YouLost ( FailMuchin ) ;
27767: LD_STRING FailMuchin
27769: PPUSH
27770: CALL_OW 104
// end ; end ;
27774: GO 27777
27776: POP
// InGameOff ;
27777: CALL_OW 9
// end ;
27781: PPOPN 4
27783: END
// every 0 0$1 trigger FilterUnitsInArea ( baseOutsideBorderArea , [ f_side , 2 ] ) and not meetWithMuchin and hasMuchin marked gameStartEvent do
27784: LD_INT 23
27786: PPUSH
27787: LD_INT 22
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PPUSH
27797: CALL_OW 70
27801: PUSH
27802: LD_EXP 44
27806: NOT
27807: AND
27808: PUSH
27809: LD_EXP 30
27813: AND
27814: IFFALSE 27827
27816: GO 27818
27818: DISABLE
// isAlarm := true ; end_of_file
27819: LD_ADDR_EXP 17
27823: PUSH
27824: LD_INT 1
27826: ST_TO_ADDR
27827: END
// every 0 0$1 marked gameStartEvent do
27828: GO 27830
27830: DISABLE
// begin enable ;
27831: ENABLE
// if not contactWithAmerican then
27832: LD_EXP 25
27836: NOT
27837: IFFALSE 27882
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
27839: LD_ADDR_OWVAR 47
27843: PUSH
27844: LD_STRING #X108-1
27846: PUSH
27847: LD_INT 22
27849: PUSH
27850: LD_INT 5
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 21
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PPUSH
27871: CALL_OW 69
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: ST_TO_ADDR
27880: GO 27971
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
27882: LD_ADDR_OWVAR 47
27886: PUSH
27887: LD_STRING #X108-1
27889: PUSH
27890: LD_INT 22
27892: PUSH
27893: LD_INT 5
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 21
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 50
27912: PUSH
27913: EMPTY
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: PUSH
27926: LD_STRING #X108-2
27928: PUSH
27929: LD_INT 22
27931: PUSH
27932: LD_INT 4
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 21
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 50
27951: PUSH
27952: EMPTY
27953: LIST
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: PPUSH
27960: CALL_OW 69
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: ST_TO_ADDR
// end ; end_of_file
27971: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
27972: LD_EXP 46
27976: PPUSH
27977: LD_INT 59
27979: PPUSH
27980: CALL_OW 308
27984: IFFALSE 28106
27986: GO 27988
27988: DISABLE
// begin Query ( FinalInfo ) ;
27989: LD_STRING FinalInfo
27991: PPUSH
27992: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
27996: LD_INT 59
27998: PPUSH
27999: LD_INT 1
28001: PPUSH
28002: CALL_OW 424
// end_the_mission_allowed := true ;
28006: LD_ADDR_OWVAR 57
28010: PUSH
28011: LD_INT 1
28013: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28014: LD_INT 35
28016: PPUSH
28017: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
28021: LD_INT 22
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 21
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 95
28043: PUSH
28044: LD_INT 59
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: PPUSH
28056: CALL_OW 69
28060: PPUSH
28061: CALL 31373 0 1
28065: PUSH
28066: LD_INT 22
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 21
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PPUSH
28090: CALL_OW 69
28094: PPUSH
28095: CALL 31373 0 1
28099: EQUAL
28100: IFFALSE 28014
// EndMission ;
28102: CALL 28114 0 0
// end ;
28106: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
28107: CALL 28114 0 0
// end ;
28111: PPOPN 1
28113: END
// function EndMission ; var tmp ; begin
28114: LD_INT 0
28116: PPUSH
28117: PPUSH
// PlayOriginalMusic ;
28118: CALL 92933 0 0
// if not IsInArea ( Heike , finalArea ) then
28122: LD_EXP 46
28126: PPUSH
28127: LD_INT 59
28129: PPUSH
28130: CALL_OW 308
28134: NOT
28135: IFFALSE 28146
// begin Query ( HeikeOutOfArea ) ;
28137: LD_STRING HeikeOutOfArea
28139: PPUSH
28140: CALL_OW 97
// exit ;
28144: GO 29069
// end ; if not IsOk ( Heike ) then
28146: LD_EXP 46
28150: PPUSH
28151: CALL_OW 302
28155: NOT
28156: IFFALSE 28167
// begin Query ( HeikeIsHurt ) ;
28158: LD_STRING HeikeIsHurt
28160: PPUSH
28161: CALL_OW 97
// exit ;
28165: GO 29069
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
28167: LD_INT 22
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 21
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 50
28189: PUSH
28190: EMPTY
28191: LIST
28192: PUSH
28193: LD_INT 95
28195: PUSH
28196: LD_INT 59
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL_OW 69
28213: PPUSH
28214: CALL 31373 0 1
28218: PUSH
28219: LD_INT 6
28221: LESS
28222: IFFALSE 28231
// YouLost ( NeedMorePep ) ;
28224: LD_STRING NeedMorePep
28226: PPUSH
28227: CALL_OW 104
// if tick < 20 20$00 then
28231: LD_OWVAR 1
28235: PUSH
28236: LD_INT 42000
28238: LESS
28239: IFFALSE 28248
// SetAchievement ( ACH_HSPEED_8 ) ;
28241: LD_STRING ACH_HSPEED_8
28243: PPUSH
28244: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
28248: LD_INT 22
28250: PUSH
28251: LD_INT 5
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 21
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PPUSH
28272: CALL_OW 69
28276: PUSH
28277: LD_INT 0
28279: EQUAL
28280: PUSH
28281: LD_EXP 32
28285: PUSH
28286: LD_INT 0
28288: EQUAL
28289: AND
28290: IFFALSE 28304
// AddMedal ( med1 , 1 ) else
28292: LD_STRING med1
28294: PPUSH
28295: LD_INT 1
28297: PPUSH
28298: CALL_OW 101
28302: GO 28315
// AddMedal ( med1 , - 1 ) ;
28304: LD_STRING med1
28306: PPUSH
28307: LD_INT 1
28309: NEG
28310: PPUSH
28311: CALL_OW 101
// if explosivePlantedList >= 3 then
28315: LD_EXP 29
28319: PUSH
28320: LD_INT 3
28322: GREATEREQUAL
28323: IFFALSE 28337
// AddMedal ( med2 , 1 ) else
28325: LD_STRING med2
28327: PPUSH
28328: LD_INT 1
28330: PPUSH
28331: CALL_OW 101
28335: GO 28371
// if explosivePlantedList < 3 then
28337: LD_EXP 29
28341: PUSH
28342: LD_INT 3
28344: LESS
28345: IFFALSE 28360
// AddMedal ( med2 , - 2 ) else
28347: LD_STRING med2
28349: PPUSH
28350: LD_INT 2
28352: NEG
28353: PPUSH
28354: CALL_OW 101
28358: GO 28371
// AddMedal ( med2 , - 1 ) ;
28360: LD_STRING med2
28362: PPUSH
28363: LD_INT 1
28365: NEG
28366: PPUSH
28367: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
28371: LD_INT 5
28373: PPUSH
28374: LD_INT 2
28376: PPUSH
28377: CALL_OW 321
28381: PUSH
28382: LD_INT 2
28384: EQUAL
28385: IFFALSE 28399
// AddMedal ( med3 , 1 ) else
28387: LD_STRING med3
28389: PPUSH
28390: LD_INT 1
28392: PPUSH
28393: CALL_OW 101
28397: GO 28410
// AddMedal ( med3 , - 1 ) ;
28399: LD_STRING med3
28401: PPUSH
28402: LD_INT 1
28404: NEG
28405: PPUSH
28406: CALL_OW 101
// GiveMedals ( MAIN ) ;
28410: LD_STRING MAIN
28412: PPUSH
28413: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ;
28417: LD_ADDR_VAR 0 2
28421: PUSH
28422: LD_INT 22
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 21
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 50
28444: PUSH
28445: EMPTY
28446: LIST
28447: PUSH
28448: LD_INT 95
28450: PUSH
28451: LD_INT 59
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: PPUSH
28464: CALL_OW 69
28468: ST_TO_ADDR
// RewardPeople ( UnitFilter ( tmp , [ f_nation , 2 ] ) ) ;
28469: LD_VAR 0 2
28473: PPUSH
28474: LD_INT 23
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PPUSH
28484: CALL_OW 72
28488: PPUSH
28489: CALL_OW 43
// if Doug and Doug in tmp then
28493: LD_EXP 60
28497: PUSH
28498: LD_EXP 60
28502: PUSH
28503: LD_VAR 0 2
28507: IN
28508: AND
28509: IFFALSE 28523
// SaveCharacters ( Doug , 08_UsCommander ) ;
28511: LD_EXP 60
28515: PPUSH
28516: LD_STRING 08_UsCommander
28518: PPUSH
28519: CALL_OW 38
// if Harris and Harris in tmp then
28523: LD_EXP 59
28527: PUSH
28528: LD_EXP 59
28532: PUSH
28533: LD_VAR 0 2
28537: IN
28538: AND
28539: IFFALSE 28553
// SaveCharacters ( Harris , 08_Harris ) ;
28541: LD_EXP 59
28545: PPUSH
28546: LD_STRING 08_Harris
28548: PPUSH
28549: CALL_OW 38
// SaveCharacters ( UnitFilter ( tmp , [ f_nation , 1 ] ) diff [ Doug , Harris ] , 08_Americans ) ;
28553: LD_VAR 0 2
28557: PPUSH
28558: LD_INT 23
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PPUSH
28568: CALL_OW 72
28572: PUSH
28573: LD_EXP 60
28577: PUSH
28578: LD_EXP 59
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: DIFF
28587: PPUSH
28588: LD_STRING 08_Americans
28590: PPUSH
28591: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
28595: LD_EXP 46
28599: PPUSH
28600: CALL_OW 248
28604: PUSH
28605: LD_INT 3
28607: EQUAL
28608: IFFALSE 28638
// begin CopySkills ( Heike , HeikeTmp ) ;
28610: LD_EXP 46
28614: PPUSH
28615: LD_EXP 62
28619: PPUSH
28620: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28624: LD_EXP 62
28628: PPUSH
28629: LD_STRING 08_Heike
28631: PPUSH
28632: CALL_OW 38
// end else
28636: GO 28650
// SaveCharacters ( Heike , 08_Heike ) ;
28638: LD_EXP 46
28642: PPUSH
28643: LD_STRING 08_Heike
28645: PPUSH
28646: CALL_OW 38
// if Aviradze and Aviradze in tmp then
28650: LD_EXP 56
28654: PUSH
28655: LD_EXP 56
28659: PUSH
28660: LD_VAR 0 2
28664: IN
28665: AND
28666: IFFALSE 28680
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28668: LD_EXP 56
28672: PPUSH
28673: LD_STRING 08_Aviradze
28675: PPUSH
28676: CALL_OW 38
// if Ibrahim and Ibrahim in tmp then
28680: LD_EXP 49
28684: PUSH
28685: LD_EXP 49
28689: PUSH
28690: LD_VAR 0 2
28694: IN
28695: AND
28696: IFFALSE 28710
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28698: LD_EXP 49
28702: PPUSH
28703: LD_STRING 08_Ibrahim
28705: PPUSH
28706: CALL_OW 38
// if Kamil and Kamil in tmp then
28710: LD_EXP 50
28714: PUSH
28715: LD_EXP 50
28719: PUSH
28720: LD_VAR 0 2
28724: IN
28725: AND
28726: IFFALSE 28740
// SaveCharacters ( Kamil , 08_Kamil ) ;
28728: LD_EXP 50
28732: PPUSH
28733: LD_STRING 08_Kamil
28735: PPUSH
28736: CALL_OW 38
// if Sophia and Sophia in tmp then
28740: LD_EXP 52
28744: PUSH
28745: LD_EXP 52
28749: PUSH
28750: LD_VAR 0 2
28754: IN
28755: AND
28756: IFFALSE 28770
// SaveCharacters ( Sophia , 08_Sophia ) ;
28758: LD_EXP 52
28762: PPUSH
28763: LD_STRING 08_Sophia
28765: PPUSH
28766: CALL_OW 38
// if Kaia and Kaia in tmp then
28770: LD_EXP 51
28774: PUSH
28775: LD_EXP 51
28779: PUSH
28780: LD_VAR 0 2
28784: IN
28785: AND
28786: IFFALSE 28800
// SaveCharacters ( Kaia , 08_Kaia ) ;
28788: LD_EXP 51
28792: PPUSH
28793: LD_STRING 08_Kaia
28795: PPUSH
28796: CALL_OW 38
// if Givi and Givi in tmp then
28800: LD_EXP 47
28804: PUSH
28805: LD_EXP 47
28809: PUSH
28810: LD_VAR 0 2
28814: IN
28815: AND
28816: IFFALSE 28873
// if GetNation ( Givi ) = nation_russian then
28818: LD_EXP 47
28822: PPUSH
28823: CALL_OW 248
28827: PUSH
28828: LD_INT 3
28830: EQUAL
28831: IFFALSE 28861
// begin CopySkills ( Givi , GiviTmp ) ;
28833: LD_EXP 47
28837: PPUSH
28838: LD_EXP 63
28842: PPUSH
28843: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
28847: LD_EXP 63
28851: PPUSH
28852: LD_STRING 08_Givi
28854: PPUSH
28855: CALL_OW 38
// end else
28859: GO 28873
// SaveCharacters ( Givi , 08_Givi ) ;
28861: LD_EXP 47
28865: PPUSH
28866: LD_STRING 08_Givi
28868: PPUSH
28869: CALL_OW 38
// if Mike and Mike in tmp then
28873: LD_EXP 48
28877: PUSH
28878: LD_EXP 48
28882: PUSH
28883: LD_VAR 0 2
28887: IN
28888: AND
28889: IFFALSE 28903
// SaveCharacters ( Mike , 08_Mike ) ;
28891: LD_EXP 48
28895: PPUSH
28896: LD_STRING 08_Mike
28898: PPUSH
28899: CALL_OW 38
// if Markov and Markov in tmp then
28903: LD_EXP 53
28907: PUSH
28908: LD_EXP 53
28912: PUSH
28913: LD_VAR 0 2
28917: IN
28918: AND
28919: IFFALSE 28933
// SaveCharacters ( Markov , 08_Markov ) ;
28921: LD_EXP 53
28925: PPUSH
28926: LD_STRING 08_Markov
28928: PPUSH
28929: CALL_OW 38
// if Kurt and Kurt in tmp then
28933: LD_EXP 55
28937: PUSH
28938: LD_EXP 55
28942: PUSH
28943: LD_VAR 0 2
28947: IN
28948: AND
28949: IFFALSE 28963
// SaveCharacters ( Kurt , 08_Kurt ) ;
28951: LD_EXP 55
28955: PPUSH
28956: LD_STRING 08_Kurt
28958: PPUSH
28959: CALL_OW 38
// if Olaf and Olaf in tmp then
28963: LD_EXP 54
28967: PUSH
28968: LD_EXP 54
28972: PUSH
28973: LD_VAR 0 2
28977: IN
28978: AND
28979: IFFALSE 28993
// SaveCharacters ( Olaf , 08_Olaf ) ;
28981: LD_EXP 54
28985: PPUSH
28986: LD_STRING 08_Olaf
28988: PPUSH
28989: CALL_OW 38
// if UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) then
28993: LD_EXP 57
28997: PPUSH
28998: LD_INT 95
29000: PUSH
29001: LD_INT 59
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 50
29010: PUSH
29011: EMPTY
29012: LIST
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PPUSH
29018: CALL_OW 72
29022: IFFALSE 29061
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) , 08_others ) ;
29024: LD_EXP 57
29028: PPUSH
29029: LD_INT 95
29031: PUSH
29032: LD_INT 59
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 50
29041: PUSH
29042: EMPTY
29043: LIST
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PPUSH
29049: CALL_OW 72
29053: PPUSH
29054: LD_STRING 08_others
29056: PPUSH
29057: CALL_OW 38
// YouWin ;
29061: CALL_OW 103
// DialogueOff ;
29065: CALL_OW 7
// end ; end_of_file
29069: LD_VAR 0 1
29073: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
29074: LD_EXP 5
29078: IFFALSE 29268
29080: GO 29082
29082: DISABLE
29083: LD_INT 0
29085: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
29086: LD_INT 35
29088: PPUSH
29089: LD_INT 2100
29091: PPUSH
29092: CALL_OW 12
29096: PPUSH
29097: CALL_OW 67
// StopOriginalMusic ;
29101: CALL 92918 0 0
// weatherBusy := true ;
29105: LD_ADDR_EXP 37
29109: PUSH
29110: LD_INT 1
29112: ST_TO_ADDR
// for i := 1 to 3 do
29113: LD_ADDR_VAR 0 1
29117: PUSH
29118: DOUBLE
29119: LD_INT 1
29121: DEC
29122: ST_TO_ADDR
29123: LD_INT 3
29125: PUSH
29126: FOR_TO
29127: IFFALSE 29161
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
29129: LD_INT 1
29131: PPUSH
29132: LD_INT 100
29134: PUSH
29135: LD_INT 100
29137: PUSH
29138: LD_VAR 0 1
29142: MUL
29143: PLUS
29144: PPUSH
29145: LD_INT 60
29147: PPUSH
29148: CALL_OW 550
// wait ( 0 0$2 ) ;
29152: LD_INT 70
29154: PPUSH
29155: CALL_OW 67
// end ;
29159: GO 29126
29161: POP
29162: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
29163: LD_STRING ArStormRain.wav
29165: PPUSH
29166: LD_STRING OW_CUSTOM_COMMAND(103);
29168: PPUSH
29169: CALL 92948 0 2
// wait ( 0 0$3 ) ;
29173: LD_INT 105
29175: PPUSH
29176: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
29180: LD_INT 1
29182: PPUSH
29183: LD_INT 900
29185: PPUSH
29186: LD_INT 120
29188: PPUSH
29189: CALL_OW 550
// wait ( 0 0$10 ) ;
29193: LD_INT 350
29195: PPUSH
29196: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
29200: LD_INT 1
29202: PPUSH
29203: LD_INT 1500
29205: PPUSH
29206: LD_INT 300
29208: PPUSH
29209: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
29213: LD_INT 35
29215: PPUSH
29216: CALL_OW 67
// until not weatherBusy ;
29220: LD_EXP 37
29224: NOT
29225: IFFALSE 29213
// SetWeather ( 0 , 0 , 0 ) ;
29227: LD_INT 0
29229: PPUSH
29230: LD_INT 0
29232: PPUSH
29233: LD_INT 0
29235: PPUSH
29236: CALL_OW 550
// wait ( 5 5$00 ) ;
29240: LD_INT 10500
29242: PPUSH
29243: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
29247: LD_STRING ArStormNormal.wav
29249: PPUSH
29250: LD_STRING OW_CUSTOM_COMMAND(103);
29252: PPUSH
29253: CALL 92948 0 2
// wait ( 5 5$00 ) ;
29257: LD_INT 10500
29259: PPUSH
29260: CALL_OW 67
// PlayOriginalMusic ;
29264: CALL 92933 0 0
// end ; end_of_file
29268: PPOPN 1
29270: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
// if exist_mode then
29275: LD_VAR 0 2
29279: IFFALSE 29304
// unit := CreateCharacter ( prefix & ident ) else
29281: LD_ADDR_VAR 0 5
29285: PUSH
29286: LD_VAR 0 3
29290: PUSH
29291: LD_VAR 0 1
29295: STR
29296: PPUSH
29297: CALL_OW 34
29301: ST_TO_ADDR
29302: GO 29319
// unit := NewCharacter ( ident ) ;
29304: LD_ADDR_VAR 0 5
29308: PUSH
29309: LD_VAR 0 1
29313: PPUSH
29314: CALL_OW 25
29318: ST_TO_ADDR
// result := unit ;
29319: LD_ADDR_VAR 0 4
29323: PUSH
29324: LD_VAR 0 5
29328: ST_TO_ADDR
// end ;
29329: LD_VAR 0 4
29333: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29334: LD_INT 0
29336: PPUSH
29337: PPUSH
// if not side or not nation then
29338: LD_VAR 0 1
29342: NOT
29343: PUSH
29344: LD_VAR 0 2
29348: NOT
29349: OR
29350: IFFALSE 29354
// exit ;
29352: GO 30122
// case nation of nation_american :
29354: LD_VAR 0 2
29358: PUSH
29359: LD_INT 1
29361: DOUBLE
29362: EQUAL
29363: IFTRUE 29367
29365: GO 29581
29367: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29368: LD_ADDR_VAR 0 4
29372: PUSH
29373: LD_INT 35
29375: PUSH
29376: LD_INT 45
29378: PUSH
29379: LD_INT 46
29381: PUSH
29382: LD_INT 47
29384: PUSH
29385: LD_INT 82
29387: PUSH
29388: LD_INT 83
29390: PUSH
29391: LD_INT 84
29393: PUSH
29394: LD_INT 85
29396: PUSH
29397: LD_INT 86
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 6
29408: PUSH
29409: LD_INT 15
29411: PUSH
29412: LD_INT 16
29414: PUSH
29415: LD_INT 7
29417: PUSH
29418: LD_INT 12
29420: PUSH
29421: LD_INT 13
29423: PUSH
29424: LD_INT 10
29426: PUSH
29427: LD_INT 14
29429: PUSH
29430: LD_INT 20
29432: PUSH
29433: LD_INT 21
29435: PUSH
29436: LD_INT 22
29438: PUSH
29439: LD_INT 25
29441: PUSH
29442: LD_INT 32
29444: PUSH
29445: LD_INT 27
29447: PUSH
29448: LD_INT 36
29450: PUSH
29451: LD_INT 69
29453: PUSH
29454: LD_INT 39
29456: PUSH
29457: LD_INT 34
29459: PUSH
29460: LD_INT 40
29462: PUSH
29463: LD_INT 48
29465: PUSH
29466: LD_INT 49
29468: PUSH
29469: LD_INT 50
29471: PUSH
29472: LD_INT 51
29474: PUSH
29475: LD_INT 52
29477: PUSH
29478: LD_INT 53
29480: PUSH
29481: LD_INT 54
29483: PUSH
29484: LD_INT 55
29486: PUSH
29487: LD_INT 56
29489: PUSH
29490: LD_INT 57
29492: PUSH
29493: LD_INT 58
29495: PUSH
29496: LD_INT 59
29498: PUSH
29499: LD_INT 60
29501: PUSH
29502: LD_INT 61
29504: PUSH
29505: LD_INT 62
29507: PUSH
29508: LD_INT 80
29510: PUSH
29511: LD_INT 82
29513: PUSH
29514: LD_INT 83
29516: PUSH
29517: LD_INT 84
29519: PUSH
29520: LD_INT 85
29522: PUSH
29523: LD_INT 86
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: ST_TO_ADDR
29579: GO 30046
29581: LD_INT 2
29583: DOUBLE
29584: EQUAL
29585: IFTRUE 29589
29587: GO 29815
29589: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29590: LD_ADDR_VAR 0 4
29594: PUSH
29595: LD_INT 35
29597: PUSH
29598: LD_INT 45
29600: PUSH
29601: LD_INT 46
29603: PUSH
29604: LD_INT 47
29606: PUSH
29607: LD_INT 82
29609: PUSH
29610: LD_INT 83
29612: PUSH
29613: LD_INT 84
29615: PUSH
29616: LD_INT 85
29618: PUSH
29619: LD_INT 87
29621: PUSH
29622: LD_INT 70
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: LD_INT 11
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: LD_INT 4
29636: PUSH
29637: LD_INT 5
29639: PUSH
29640: LD_INT 6
29642: PUSH
29643: LD_INT 15
29645: PUSH
29646: LD_INT 18
29648: PUSH
29649: LD_INT 7
29651: PUSH
29652: LD_INT 17
29654: PUSH
29655: LD_INT 8
29657: PUSH
29658: LD_INT 20
29660: PUSH
29661: LD_INT 21
29663: PUSH
29664: LD_INT 22
29666: PUSH
29667: LD_INT 72
29669: PUSH
29670: LD_INT 26
29672: PUSH
29673: LD_INT 69
29675: PUSH
29676: LD_INT 39
29678: PUSH
29679: LD_INT 40
29681: PUSH
29682: LD_INT 41
29684: PUSH
29685: LD_INT 42
29687: PUSH
29688: LD_INT 43
29690: PUSH
29691: LD_INT 48
29693: PUSH
29694: LD_INT 49
29696: PUSH
29697: LD_INT 50
29699: PUSH
29700: LD_INT 51
29702: PUSH
29703: LD_INT 52
29705: PUSH
29706: LD_INT 53
29708: PUSH
29709: LD_INT 54
29711: PUSH
29712: LD_INT 55
29714: PUSH
29715: LD_INT 56
29717: PUSH
29718: LD_INT 60
29720: PUSH
29721: LD_INT 61
29723: PUSH
29724: LD_INT 62
29726: PUSH
29727: LD_INT 66
29729: PUSH
29730: LD_INT 67
29732: PUSH
29733: LD_INT 68
29735: PUSH
29736: LD_INT 81
29738: PUSH
29739: LD_INT 82
29741: PUSH
29742: LD_INT 83
29744: PUSH
29745: LD_INT 84
29747: PUSH
29748: LD_INT 85
29750: PUSH
29751: LD_INT 87
29753: PUSH
29754: LD_INT 88
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
29813: GO 30046
29815: LD_INT 3
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 30045
29823: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29824: LD_ADDR_VAR 0 4
29828: PUSH
29829: LD_INT 46
29831: PUSH
29832: LD_INT 47
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 82
29843: PUSH
29844: LD_INT 83
29846: PUSH
29847: LD_INT 84
29849: PUSH
29850: LD_INT 85
29852: PUSH
29853: LD_INT 86
29855: PUSH
29856: LD_INT 11
29858: PUSH
29859: LD_INT 9
29861: PUSH
29862: LD_INT 20
29864: PUSH
29865: LD_INT 19
29867: PUSH
29868: LD_INT 21
29870: PUSH
29871: LD_INT 24
29873: PUSH
29874: LD_INT 22
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 28
29882: PUSH
29883: LD_INT 29
29885: PUSH
29886: LD_INT 30
29888: PUSH
29889: LD_INT 31
29891: PUSH
29892: LD_INT 37
29894: PUSH
29895: LD_INT 38
29897: PUSH
29898: LD_INT 32
29900: PUSH
29901: LD_INT 27
29903: PUSH
29904: LD_INT 33
29906: PUSH
29907: LD_INT 69
29909: PUSH
29910: LD_INT 39
29912: PUSH
29913: LD_INT 34
29915: PUSH
29916: LD_INT 40
29918: PUSH
29919: LD_INT 71
29921: PUSH
29922: LD_INT 23
29924: PUSH
29925: LD_INT 44
29927: PUSH
29928: LD_INT 48
29930: PUSH
29931: LD_INT 49
29933: PUSH
29934: LD_INT 50
29936: PUSH
29937: LD_INT 51
29939: PUSH
29940: LD_INT 52
29942: PUSH
29943: LD_INT 53
29945: PUSH
29946: LD_INT 54
29948: PUSH
29949: LD_INT 55
29951: PUSH
29952: LD_INT 56
29954: PUSH
29955: LD_INT 57
29957: PUSH
29958: LD_INT 58
29960: PUSH
29961: LD_INT 59
29963: PUSH
29964: LD_INT 63
29966: PUSH
29967: LD_INT 64
29969: PUSH
29970: LD_INT 65
29972: PUSH
29973: LD_INT 82
29975: PUSH
29976: LD_INT 83
29978: PUSH
29979: LD_INT 84
29981: PUSH
29982: LD_INT 85
29984: PUSH
29985: LD_INT 86
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: ST_TO_ADDR
30043: GO 30046
30045: POP
// if state > - 1 and state < 3 then
30046: LD_VAR 0 3
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: GREATER
30055: PUSH
30056: LD_VAR 0 3
30060: PUSH
30061: LD_INT 3
30063: LESS
30064: AND
30065: IFFALSE 30122
// for i in result do
30067: LD_ADDR_VAR 0 5
30071: PUSH
30072: LD_VAR 0 4
30076: PUSH
30077: FOR_IN
30078: IFFALSE 30120
// if GetTech ( i , side ) <> state then
30080: LD_VAR 0 5
30084: PPUSH
30085: LD_VAR 0 1
30089: PPUSH
30090: CALL_OW 321
30094: PUSH
30095: LD_VAR 0 3
30099: NONEQUAL
30100: IFFALSE 30118
// result := result diff i ;
30102: LD_ADDR_VAR 0 4
30106: PUSH
30107: LD_VAR 0 4
30111: PUSH
30112: LD_VAR 0 5
30116: DIFF
30117: ST_TO_ADDR
30118: GO 30077
30120: POP
30121: POP
// end ;
30122: LD_VAR 0 4
30126: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30127: LD_INT 0
30129: PPUSH
30130: PPUSH
30131: PPUSH
// result := true ;
30132: LD_ADDR_VAR 0 3
30136: PUSH
30137: LD_INT 1
30139: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30140: LD_ADDR_VAR 0 5
30144: PUSH
30145: LD_VAR 0 2
30149: PPUSH
30150: CALL_OW 480
30154: ST_TO_ADDR
// if not tmp then
30155: LD_VAR 0 5
30159: NOT
30160: IFFALSE 30164
// exit ;
30162: GO 30213
// for i in tmp do
30164: LD_ADDR_VAR 0 4
30168: PUSH
30169: LD_VAR 0 5
30173: PUSH
30174: FOR_IN
30175: IFFALSE 30211
// if GetTech ( i , side ) <> state_researched then
30177: LD_VAR 0 4
30181: PPUSH
30182: LD_VAR 0 1
30186: PPUSH
30187: CALL_OW 321
30191: PUSH
30192: LD_INT 2
30194: NONEQUAL
30195: IFFALSE 30209
// begin result := false ;
30197: LD_ADDR_VAR 0 3
30201: PUSH
30202: LD_INT 0
30204: ST_TO_ADDR
// exit ;
30205: POP
30206: POP
30207: GO 30213
// end ;
30209: GO 30174
30211: POP
30212: POP
// end ;
30213: LD_VAR 0 3
30217: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30218: LD_INT 0
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
30230: PPUSH
30231: PPUSH
30232: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30233: LD_VAR 0 1
30237: NOT
30238: PUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 257
30248: PUSH
30249: LD_INT 9
30251: NONEQUAL
30252: OR
30253: IFFALSE 30257
// exit ;
30255: GO 30830
// side := GetSide ( unit ) ;
30257: LD_ADDR_VAR 0 9
30261: PUSH
30262: LD_VAR 0 1
30266: PPUSH
30267: CALL_OW 255
30271: ST_TO_ADDR
// tech_space := tech_spacanom ;
30272: LD_ADDR_VAR 0 12
30276: PUSH
30277: LD_INT 29
30279: ST_TO_ADDR
// tech_time := tech_taurad ;
30280: LD_ADDR_VAR 0 13
30284: PUSH
30285: LD_INT 28
30287: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30288: LD_ADDR_VAR 0 11
30292: PUSH
30293: LD_VAR 0 1
30297: PPUSH
30298: CALL_OW 310
30302: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30303: LD_VAR 0 11
30307: PPUSH
30308: CALL_OW 247
30312: PUSH
30313: LD_INT 2
30315: EQUAL
30316: IFFALSE 30320
// exit ;
30318: GO 30830
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30320: LD_ADDR_VAR 0 8
30324: PUSH
30325: LD_INT 81
30327: PUSH
30328: LD_VAR 0 9
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 21
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PPUSH
30358: CALL_OW 69
30362: ST_TO_ADDR
// if not tmp then
30363: LD_VAR 0 8
30367: NOT
30368: IFFALSE 30372
// exit ;
30370: GO 30830
// if in_unit then
30372: LD_VAR 0 11
30376: IFFALSE 30400
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30378: LD_ADDR_VAR 0 10
30382: PUSH
30383: LD_VAR 0 8
30387: PPUSH
30388: LD_VAR 0 11
30392: PPUSH
30393: CALL_OW 74
30397: ST_TO_ADDR
30398: GO 30420
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30400: LD_ADDR_VAR 0 10
30404: PUSH
30405: LD_VAR 0 8
30409: PPUSH
30410: LD_VAR 0 1
30414: PPUSH
30415: CALL_OW 74
30419: ST_TO_ADDR
// if not enemy then
30420: LD_VAR 0 10
30424: NOT
30425: IFFALSE 30429
// exit ;
30427: GO 30830
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30429: LD_VAR 0 11
30433: PUSH
30434: LD_VAR 0 11
30438: PPUSH
30439: LD_VAR 0 10
30443: PPUSH
30444: CALL_OW 296
30448: PUSH
30449: LD_INT 13
30451: GREATER
30452: AND
30453: PUSH
30454: LD_VAR 0 1
30458: PPUSH
30459: LD_VAR 0 10
30463: PPUSH
30464: CALL_OW 296
30468: PUSH
30469: LD_INT 12
30471: GREATER
30472: OR
30473: IFFALSE 30477
// exit ;
30475: GO 30830
// missile := [ 1 ] ;
30477: LD_ADDR_VAR 0 14
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: EMPTY
30486: LIST
30487: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30488: LD_VAR 0 9
30492: PPUSH
30493: LD_VAR 0 12
30497: PPUSH
30498: CALL_OW 325
30502: IFFALSE 30531
// missile := Replace ( missile , missile + 1 , 2 ) ;
30504: LD_ADDR_VAR 0 14
30508: PUSH
30509: LD_VAR 0 14
30513: PPUSH
30514: LD_VAR 0 14
30518: PUSH
30519: LD_INT 1
30521: PLUS
30522: PPUSH
30523: LD_INT 2
30525: PPUSH
30526: CALL_OW 1
30530: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30531: LD_VAR 0 9
30535: PPUSH
30536: LD_VAR 0 13
30540: PPUSH
30541: CALL_OW 325
30545: PUSH
30546: LD_VAR 0 10
30550: PPUSH
30551: CALL_OW 255
30555: PPUSH
30556: LD_VAR 0 13
30560: PPUSH
30561: CALL_OW 325
30565: NOT
30566: AND
30567: IFFALSE 30596
// missile := Replace ( missile , missile + 1 , 3 ) ;
30569: LD_ADDR_VAR 0 14
30573: PUSH
30574: LD_VAR 0 14
30578: PPUSH
30579: LD_VAR 0 14
30583: PUSH
30584: LD_INT 1
30586: PLUS
30587: PPUSH
30588: LD_INT 3
30590: PPUSH
30591: CALL_OW 1
30595: ST_TO_ADDR
// if missile < 2 then
30596: LD_VAR 0 14
30600: PUSH
30601: LD_INT 2
30603: LESS
30604: IFFALSE 30608
// exit ;
30606: GO 30830
// x := GetX ( enemy ) ;
30608: LD_ADDR_VAR 0 4
30612: PUSH
30613: LD_VAR 0 10
30617: PPUSH
30618: CALL_OW 250
30622: ST_TO_ADDR
// y := GetY ( enemy ) ;
30623: LD_ADDR_VAR 0 5
30627: PUSH
30628: LD_VAR 0 10
30632: PPUSH
30633: CALL_OW 251
30637: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30638: LD_ADDR_VAR 0 6
30642: PUSH
30643: LD_VAR 0 4
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PPUSH
30652: LD_INT 1
30654: PPUSH
30655: CALL_OW 12
30659: PLUS
30660: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30661: LD_ADDR_VAR 0 7
30665: PUSH
30666: LD_VAR 0 5
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PPUSH
30675: LD_INT 1
30677: PPUSH
30678: CALL_OW 12
30682: PLUS
30683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30684: LD_VAR 0 6
30688: PPUSH
30689: LD_VAR 0 7
30693: PPUSH
30694: CALL_OW 488
30698: NOT
30699: IFFALSE 30721
// begin _x := x ;
30701: LD_ADDR_VAR 0 6
30705: PUSH
30706: LD_VAR 0 4
30710: ST_TO_ADDR
// _y := y ;
30711: LD_ADDR_VAR 0 7
30715: PUSH
30716: LD_VAR 0 5
30720: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 1
30728: PPUSH
30729: LD_VAR 0 14
30733: PPUSH
30734: CALL_OW 12
30738: ST_TO_ADDR
// case i of 1 :
30739: LD_VAR 0 3
30743: PUSH
30744: LD_INT 1
30746: DOUBLE
30747: EQUAL
30748: IFTRUE 30752
30750: GO 30769
30752: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_VAR 0 10
30762: PPUSH
30763: CALL_OW 115
30767: GO 30830
30769: LD_INT 2
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30777
30775: GO 30799
30777: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30778: LD_VAR 0 1
30782: PPUSH
30783: LD_VAR 0 6
30787: PPUSH
30788: LD_VAR 0 7
30792: PPUSH
30793: CALL_OW 153
30797: GO 30830
30799: LD_INT 3
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30829
30807: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30808: LD_VAR 0 1
30812: PPUSH
30813: LD_VAR 0 6
30817: PPUSH
30818: LD_VAR 0 7
30822: PPUSH
30823: CALL_OW 154
30827: GO 30830
30829: POP
// end ;
30830: LD_VAR 0 2
30834: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30835: LD_INT 0
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
30841: PPUSH
30842: PPUSH
// if not unit or not building then
30843: LD_VAR 0 1
30847: NOT
30848: PUSH
30849: LD_VAR 0 2
30853: NOT
30854: OR
30855: IFFALSE 30859
// exit ;
30857: GO 31017
// x := GetX ( building ) ;
30859: LD_ADDR_VAR 0 5
30863: PUSH
30864: LD_VAR 0 2
30868: PPUSH
30869: CALL_OW 250
30873: ST_TO_ADDR
// y := GetY ( building ) ;
30874: LD_ADDR_VAR 0 6
30878: PUSH
30879: LD_VAR 0 2
30883: PPUSH
30884: CALL_OW 251
30888: ST_TO_ADDR
// for i = 0 to 5 do
30889: LD_ADDR_VAR 0 4
30893: PUSH
30894: DOUBLE
30895: LD_INT 0
30897: DEC
30898: ST_TO_ADDR
30899: LD_INT 5
30901: PUSH
30902: FOR_TO
30903: IFFALSE 31015
// begin _x := ShiftX ( x , i , 3 ) ;
30905: LD_ADDR_VAR 0 7
30909: PUSH
30910: LD_VAR 0 5
30914: PPUSH
30915: LD_VAR 0 4
30919: PPUSH
30920: LD_INT 3
30922: PPUSH
30923: CALL_OW 272
30927: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30928: LD_ADDR_VAR 0 8
30932: PUSH
30933: LD_VAR 0 6
30937: PPUSH
30938: LD_VAR 0 4
30942: PPUSH
30943: LD_INT 3
30945: PPUSH
30946: CALL_OW 273
30950: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30951: LD_VAR 0 7
30955: PPUSH
30956: LD_VAR 0 8
30960: PPUSH
30961: CALL_OW 488
30965: NOT
30966: IFFALSE 30970
// continue ;
30968: GO 30902
// if HexInfo ( _x , _y ) = 0 then
30970: LD_VAR 0 7
30974: PPUSH
30975: LD_VAR 0 8
30979: PPUSH
30980: CALL_OW 428
30984: PUSH
30985: LD_INT 0
30987: EQUAL
30988: IFFALSE 31013
// begin ComMoveXY ( unit , _x , _y ) ;
30990: LD_VAR 0 1
30994: PPUSH
30995: LD_VAR 0 7
30999: PPUSH
31000: LD_VAR 0 8
31004: PPUSH
31005: CALL_OW 111
// exit ;
31009: POP
31010: POP
31011: GO 31017
// end ; end ;
31013: GO 30902
31015: POP
31016: POP
// end ;
31017: LD_VAR 0 3
31021: RET
// export function ScanBase ( side , base_area ) ; begin
31022: LD_INT 0
31024: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: LD_VAR 0 2
31034: PPUSH
31035: LD_INT 81
31037: PUSH
31038: LD_VAR 0 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PPUSH
31047: CALL_OW 70
31051: ST_TO_ADDR
// end ;
31052: LD_VAR 0 3
31056: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31057: LD_INT 0
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
// result := false ;
31063: LD_ADDR_VAR 0 2
31067: PUSH
31068: LD_INT 0
31070: ST_TO_ADDR
// side := GetSide ( unit ) ;
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 255
31085: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31086: LD_ADDR_VAR 0 4
31090: PUSH
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 248
31100: ST_TO_ADDR
// case nat of 1 :
31101: LD_VAR 0 4
31105: PUSH
31106: LD_INT 1
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31125
31114: POP
// tech := tech_lassight ; 2 :
31115: LD_ADDR_VAR 0 5
31119: PUSH
31120: LD_INT 12
31122: ST_TO_ADDR
31123: GO 31164
31125: LD_INT 2
31127: DOUBLE
31128: EQUAL
31129: IFTRUE 31133
31131: GO 31144
31133: POP
// tech := tech_mortar ; 3 :
31134: LD_ADDR_VAR 0 5
31138: PUSH
31139: LD_INT 41
31141: ST_TO_ADDR
31142: GO 31164
31144: LD_INT 3
31146: DOUBLE
31147: EQUAL
31148: IFTRUE 31152
31150: GO 31163
31152: POP
// tech := tech_bazooka ; end ;
31153: LD_ADDR_VAR 0 5
31157: PUSH
31158: LD_INT 44
31160: ST_TO_ADDR
31161: GO 31164
31163: POP
// if Researched ( side , tech ) then
31164: LD_VAR 0 3
31168: PPUSH
31169: LD_VAR 0 5
31173: PPUSH
31174: CALL_OW 325
31178: IFFALSE 31205
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31180: LD_ADDR_VAR 0 2
31184: PUSH
31185: LD_INT 5
31187: PUSH
31188: LD_INT 8
31190: PUSH
31191: LD_INT 9
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: PUSH
31199: LD_VAR 0 4
31203: ARRAY
31204: ST_TO_ADDR
// end ;
31205: LD_VAR 0 2
31209: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31210: LD_INT 0
31212: PPUSH
31213: PPUSH
31214: PPUSH
// if not mines then
31215: LD_VAR 0 2
31219: NOT
31220: IFFALSE 31224
// exit ;
31222: GO 31368
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31224: LD_ADDR_VAR 0 5
31228: PUSH
31229: LD_INT 81
31231: PUSH
31232: LD_VAR 0 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: LD_INT 21
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PPUSH
31262: CALL_OW 69
31266: ST_TO_ADDR
// for i in mines do
31267: LD_ADDR_VAR 0 4
31271: PUSH
31272: LD_VAR 0 2
31276: PUSH
31277: FOR_IN
31278: IFFALSE 31366
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31280: LD_VAR 0 4
31284: PUSH
31285: LD_INT 1
31287: ARRAY
31288: PPUSH
31289: LD_VAR 0 4
31293: PUSH
31294: LD_INT 2
31296: ARRAY
31297: PPUSH
31298: CALL_OW 458
31302: NOT
31303: IFFALSE 31307
// continue ;
31305: GO 31277
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31307: LD_VAR 0 4
31311: PUSH
31312: LD_INT 1
31314: ARRAY
31315: PPUSH
31316: LD_VAR 0 4
31320: PUSH
31321: LD_INT 2
31323: ARRAY
31324: PPUSH
31325: CALL_OW 428
31329: PUSH
31330: LD_VAR 0 5
31334: IN
31335: IFFALSE 31364
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31337: LD_VAR 0 4
31341: PUSH
31342: LD_INT 1
31344: ARRAY
31345: PPUSH
31346: LD_VAR 0 4
31350: PUSH
31351: LD_INT 2
31353: ARRAY
31354: PPUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL_OW 456
// end ;
31364: GO 31277
31366: POP
31367: POP
// end ;
31368: LD_VAR 0 3
31372: RET
// export function Count ( array ) ; begin
31373: LD_INT 0
31375: PPUSH
// result := array + 0 ;
31376: LD_ADDR_VAR 0 2
31380: PUSH
31381: LD_VAR 0 1
31385: PUSH
31386: LD_INT 0
31388: PLUS
31389: ST_TO_ADDR
// end ;
31390: LD_VAR 0 2
31394: RET
// export function IsEmpty ( building ) ; begin
31395: LD_INT 0
31397: PPUSH
// if not building then
31398: LD_VAR 0 1
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 31450
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31407: LD_ADDR_VAR 0 2
31411: PUSH
31412: LD_VAR 0 1
31416: PUSH
31417: LD_INT 22
31419: PUSH
31420: LD_VAR 0 1
31424: PPUSH
31425: CALL_OW 255
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 58
31436: PUSH
31437: EMPTY
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PPUSH
31444: CALL_OW 69
31448: IN
31449: ST_TO_ADDR
// end ;
31450: LD_VAR 0 2
31454: RET
// export function IsNotFull ( building ) ; var places ; begin
31455: LD_INT 0
31457: PPUSH
31458: PPUSH
// if not building then
31459: LD_VAR 0 1
31463: NOT
31464: IFFALSE 31468
// exit ;
31466: GO 31496
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31468: LD_ADDR_VAR 0 2
31472: PUSH
31473: LD_VAR 0 1
31477: PPUSH
31478: LD_INT 3
31480: PUSH
31481: LD_INT 62
31483: PUSH
31484: EMPTY
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PPUSH
31491: CALL_OW 72
31495: ST_TO_ADDR
// end ;
31496: LD_VAR 0 2
31500: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31501: LD_INT 0
31503: PPUSH
31504: PPUSH
31505: PPUSH
31506: PPUSH
// tmp := [ ] ;
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: EMPTY
31513: ST_TO_ADDR
// list := [ ] ;
31514: LD_ADDR_VAR 0 5
31518: PUSH
31519: EMPTY
31520: ST_TO_ADDR
// for i = 16 to 25 do
31521: LD_ADDR_VAR 0 4
31525: PUSH
31526: DOUBLE
31527: LD_INT 16
31529: DEC
31530: ST_TO_ADDR
31531: LD_INT 25
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31608
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_VAR 0 3
31546: PUSH
31547: LD_INT 22
31549: PUSH
31550: LD_VAR 0 1
31554: PPUSH
31555: CALL_OW 255
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 91
31566: PUSH
31567: LD_VAR 0 1
31571: PUSH
31572: LD_INT 6
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 30
31582: PUSH
31583: LD_VAR 0 4
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: PPUSH
31600: CALL_OW 69
31604: ADD
31605: ST_TO_ADDR
31606: GO 31534
31608: POP
31609: POP
// for i = 1 to tmp do
31610: LD_ADDR_VAR 0 4
31614: PUSH
31615: DOUBLE
31616: LD_INT 1
31618: DEC
31619: ST_TO_ADDR
31620: LD_VAR 0 3
31624: PUSH
31625: FOR_TO
31626: IFFALSE 31714
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31628: LD_ADDR_VAR 0 5
31632: PUSH
31633: LD_VAR 0 5
31637: PUSH
31638: LD_VAR 0 3
31642: PUSH
31643: LD_VAR 0 4
31647: ARRAY
31648: PPUSH
31649: CALL_OW 266
31653: PUSH
31654: LD_VAR 0 3
31658: PUSH
31659: LD_VAR 0 4
31663: ARRAY
31664: PPUSH
31665: CALL_OW 250
31669: PUSH
31670: LD_VAR 0 3
31674: PUSH
31675: LD_VAR 0 4
31679: ARRAY
31680: PPUSH
31681: CALL_OW 251
31685: PUSH
31686: LD_VAR 0 3
31690: PUSH
31691: LD_VAR 0 4
31695: ARRAY
31696: PPUSH
31697: CALL_OW 254
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: PUSH
31708: EMPTY
31709: LIST
31710: ADD
31711: ST_TO_ADDR
31712: GO 31625
31714: POP
31715: POP
// result := list ;
31716: LD_ADDR_VAR 0 2
31720: PUSH
31721: LD_VAR 0 5
31725: ST_TO_ADDR
// end ;
31726: LD_VAR 0 2
31730: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31731: LD_INT 0
31733: PPUSH
31734: PPUSH
31735: PPUSH
31736: PPUSH
31737: PPUSH
31738: PPUSH
31739: PPUSH
// if not factory then
31740: LD_VAR 0 1
31744: NOT
31745: IFFALSE 31749
// exit ;
31747: GO 32342
// if control = control_apeman then
31749: LD_VAR 0 4
31753: PUSH
31754: LD_INT 5
31756: EQUAL
31757: IFFALSE 31866
// begin tmp := UnitsInside ( factory ) ;
31759: LD_ADDR_VAR 0 8
31763: PUSH
31764: LD_VAR 0 1
31768: PPUSH
31769: CALL_OW 313
31773: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31774: LD_VAR 0 8
31778: PPUSH
31779: LD_INT 25
31781: PUSH
31782: LD_INT 12
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PPUSH
31789: CALL_OW 72
31793: NOT
31794: IFFALSE 31804
// control := control_manual ;
31796: LD_ADDR_VAR 0 4
31800: PUSH
31801: LD_INT 1
31803: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31804: LD_ADDR_VAR 0 8
31808: PUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL 31501 0 1
31818: ST_TO_ADDR
// if tmp then
31819: LD_VAR 0 8
31823: IFFALSE 31866
// begin for i in tmp do
31825: LD_ADDR_VAR 0 7
31829: PUSH
31830: LD_VAR 0 8
31834: PUSH
31835: FOR_IN
31836: IFFALSE 31864
// if i [ 1 ] = b_ext_radio then
31838: LD_VAR 0 7
31842: PUSH
31843: LD_INT 1
31845: ARRAY
31846: PUSH
31847: LD_INT 22
31849: EQUAL
31850: IFFALSE 31862
// begin control := control_remote ;
31852: LD_ADDR_VAR 0 4
31856: PUSH
31857: LD_INT 2
31859: ST_TO_ADDR
// break ;
31860: GO 31864
// end ;
31862: GO 31835
31864: POP
31865: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31866: LD_VAR 0 1
31870: PPUSH
31871: LD_VAR 0 2
31875: PPUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: LD_VAR 0 4
31885: PPUSH
31886: LD_VAR 0 5
31890: PPUSH
31891: CALL_OW 448
31895: IFFALSE 31930
// begin result := [ chassis , engine , control , weapon ] ;
31897: LD_ADDR_VAR 0 6
31901: PUSH
31902: LD_VAR 0 2
31906: PUSH
31907: LD_VAR 0 3
31911: PUSH
31912: LD_VAR 0 4
31916: PUSH
31917: LD_VAR 0 5
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// exit ;
31928: GO 32342
// end ; _chassis := AvailableChassisList ( factory ) ;
31930: LD_ADDR_VAR 0 9
31934: PUSH
31935: LD_VAR 0 1
31939: PPUSH
31940: CALL_OW 475
31944: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31945: LD_ADDR_VAR 0 11
31949: PUSH
31950: LD_VAR 0 1
31954: PPUSH
31955: CALL_OW 476
31959: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31960: LD_ADDR_VAR 0 12
31964: PUSH
31965: LD_VAR 0 1
31969: PPUSH
31970: CALL_OW 477
31974: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31975: LD_ADDR_VAR 0 10
31979: PUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 478
31989: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31990: LD_VAR 0 9
31994: NOT
31995: PUSH
31996: LD_VAR 0 11
32000: NOT
32001: OR
32002: PUSH
32003: LD_VAR 0 12
32007: NOT
32008: OR
32009: PUSH
32010: LD_VAR 0 10
32014: NOT
32015: OR
32016: IFFALSE 32051
// begin result := [ chassis , engine , control , weapon ] ;
32018: LD_ADDR_VAR 0 6
32022: PUSH
32023: LD_VAR 0 2
32027: PUSH
32028: LD_VAR 0 3
32032: PUSH
32033: LD_VAR 0 4
32037: PUSH
32038: LD_VAR 0 5
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: ST_TO_ADDR
// exit ;
32049: GO 32342
// end ; if not chassis in _chassis then
32051: LD_VAR 0 2
32055: PUSH
32056: LD_VAR 0 9
32060: IN
32061: NOT
32062: IFFALSE 32088
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32064: LD_ADDR_VAR 0 2
32068: PUSH
32069: LD_VAR 0 9
32073: PUSH
32074: LD_INT 1
32076: PPUSH
32077: LD_VAR 0 9
32081: PPUSH
32082: CALL_OW 12
32086: ARRAY
32087: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32088: LD_VAR 0 2
32092: PPUSH
32093: LD_VAR 0 3
32097: PPUSH
32098: CALL 32347 0 2
32102: NOT
32103: IFFALSE 32162
// repeat engine := _engine [ 1 ] ;
32105: LD_ADDR_VAR 0 3
32109: PUSH
32110: LD_VAR 0 11
32114: PUSH
32115: LD_INT 1
32117: ARRAY
32118: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32119: LD_ADDR_VAR 0 11
32123: PUSH
32124: LD_VAR 0 11
32128: PPUSH
32129: LD_INT 1
32131: PPUSH
32132: CALL_OW 3
32136: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32137: LD_VAR 0 2
32141: PPUSH
32142: LD_VAR 0 3
32146: PPUSH
32147: CALL 32347 0 2
32151: PUSH
32152: LD_VAR 0 11
32156: PUSH
32157: EMPTY
32158: EQUAL
32159: OR
32160: IFFALSE 32105
// if not control in _control then
32162: LD_VAR 0 4
32166: PUSH
32167: LD_VAR 0 12
32171: IN
32172: NOT
32173: IFFALSE 32199
// control := _control [ rand ( 1 , _control ) ] ;
32175: LD_ADDR_VAR 0 4
32179: PUSH
32180: LD_VAR 0 12
32184: PUSH
32185: LD_INT 1
32187: PPUSH
32188: LD_VAR 0 12
32192: PPUSH
32193: CALL_OW 12
32197: ARRAY
32198: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32199: LD_VAR 0 2
32203: PPUSH
32204: LD_VAR 0 5
32208: PPUSH
32209: CALL 32567 0 2
32213: NOT
32214: IFFALSE 32273
// repeat weapon := _weapon [ 1 ] ;
32216: LD_ADDR_VAR 0 5
32220: PUSH
32221: LD_VAR 0 10
32225: PUSH
32226: LD_INT 1
32228: ARRAY
32229: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32230: LD_ADDR_VAR 0 10
32234: PUSH
32235: LD_VAR 0 10
32239: PPUSH
32240: LD_INT 1
32242: PPUSH
32243: CALL_OW 3
32247: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32248: LD_VAR 0 2
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: CALL 32567 0 2
32262: PUSH
32263: LD_VAR 0 10
32267: PUSH
32268: EMPTY
32269: EQUAL
32270: OR
32271: IFFALSE 32216
// result := [ ] ;
32273: LD_ADDR_VAR 0 6
32277: PUSH
32278: EMPTY
32279: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32280: LD_VAR 0 1
32284: PPUSH
32285: LD_VAR 0 2
32289: PPUSH
32290: LD_VAR 0 3
32294: PPUSH
32295: LD_VAR 0 4
32299: PPUSH
32300: LD_VAR 0 5
32304: PPUSH
32305: CALL_OW 448
32309: IFFALSE 32342
// result := [ chassis , engine , control , weapon ] ;
32311: LD_ADDR_VAR 0 6
32315: PUSH
32316: LD_VAR 0 2
32320: PUSH
32321: LD_VAR 0 3
32325: PUSH
32326: LD_VAR 0 4
32330: PUSH
32331: LD_VAR 0 5
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: ST_TO_ADDR
// end ;
32342: LD_VAR 0 6
32346: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32347: LD_INT 0
32349: PPUSH
// if not chassis or not engine then
32350: LD_VAR 0 1
32354: NOT
32355: PUSH
32356: LD_VAR 0 2
32360: NOT
32361: OR
32362: IFFALSE 32366
// exit ;
32364: GO 32562
// case engine of engine_solar :
32366: LD_VAR 0 2
32370: PUSH
32371: LD_INT 2
32373: DOUBLE
32374: EQUAL
32375: IFTRUE 32379
32377: GO 32417
32379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: LD_INT 11
32387: PUSH
32388: LD_INT 12
32390: PUSH
32391: LD_INT 13
32393: PUSH
32394: LD_INT 14
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: LD_INT 2
32402: PUSH
32403: LD_INT 3
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: ST_TO_ADDR
32415: GO 32546
32417: LD_INT 1
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32487
32425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32426: LD_ADDR_VAR 0 3
32430: PUSH
32431: LD_INT 11
32433: PUSH
32434: LD_INT 12
32436: PUSH
32437: LD_INT 13
32439: PUSH
32440: LD_INT 14
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: LD_INT 3
32451: PUSH
32452: LD_INT 4
32454: PUSH
32455: LD_INT 5
32457: PUSH
32458: LD_INT 21
32460: PUSH
32461: LD_INT 23
32463: PUSH
32464: LD_INT 22
32466: PUSH
32467: LD_INT 24
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
32485: GO 32546
32487: LD_INT 3
32489: DOUBLE
32490: EQUAL
32491: IFTRUE 32495
32493: GO 32545
32495: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32496: LD_ADDR_VAR 0 3
32500: PUSH
32501: LD_INT 13
32503: PUSH
32504: LD_INT 14
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: LD_INT 4
32515: PUSH
32516: LD_INT 5
32518: PUSH
32519: LD_INT 21
32521: PUSH
32522: LD_INT 22
32524: PUSH
32525: LD_INT 23
32527: PUSH
32528: LD_INT 24
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: ST_TO_ADDR
32543: GO 32546
32545: POP
// result := ( chassis in result ) ;
32546: LD_ADDR_VAR 0 3
32550: PUSH
32551: LD_VAR 0 1
32555: PUSH
32556: LD_VAR 0 3
32560: IN
32561: ST_TO_ADDR
// end ;
32562: LD_VAR 0 3
32566: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32567: LD_INT 0
32569: PPUSH
// if not chassis or not weapon then
32570: LD_VAR 0 1
32574: NOT
32575: PUSH
32576: LD_VAR 0 2
32580: NOT
32581: OR
32582: IFFALSE 32586
// exit ;
32584: GO 33646
// case weapon of us_machine_gun :
32586: LD_VAR 0 2
32590: PUSH
32591: LD_INT 2
32593: DOUBLE
32594: EQUAL
32595: IFTRUE 32599
32597: GO 32629
32599: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32600: LD_ADDR_VAR 0 3
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: LD_INT 4
32616: PUSH
32617: LD_INT 5
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
32627: GO 33630
32629: LD_INT 3
32631: DOUBLE
32632: EQUAL
32633: IFTRUE 32637
32635: GO 32667
32637: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: LD_INT 5
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: ST_TO_ADDR
32665: GO 33630
32667: LD_INT 11
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32705
32675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: LD_INT 3
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: LD_INT 5
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: ST_TO_ADDR
32703: GO 33630
32705: LD_INT 4
32707: DOUBLE
32708: EQUAL
32709: IFTRUE 32713
32711: GO 32739
32713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32714: LD_ADDR_VAR 0 3
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: LD_INT 4
32727: PUSH
32728: LD_INT 5
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: ST_TO_ADDR
32737: GO 33630
32739: LD_INT 5
32741: DOUBLE
32742: EQUAL
32743: IFTRUE 32747
32745: GO 32773
32747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32748: LD_ADDR_VAR 0 3
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 3
32758: PUSH
32759: LD_INT 4
32761: PUSH
32762: LD_INT 5
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: ST_TO_ADDR
32771: GO 33630
32773: LD_INT 9
32775: DOUBLE
32776: EQUAL
32777: IFTRUE 32781
32779: GO 32807
32781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32782: LD_ADDR_VAR 0 3
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: LD_INT 4
32795: PUSH
32796: LD_INT 5
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: ST_TO_ADDR
32805: GO 33630
32807: LD_INT 7
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32815
32813: GO 32841
32815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32816: LD_ADDR_VAR 0 3
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 3
32826: PUSH
32827: LD_INT 4
32829: PUSH
32830: LD_INT 5
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
32839: GO 33630
32841: LD_INT 12
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32849
32847: GO 32875
32849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32850: LD_ADDR_VAR 0 3
32854: PUSH
32855: LD_INT 2
32857: PUSH
32858: LD_INT 3
32860: PUSH
32861: LD_INT 4
32863: PUSH
32864: LD_INT 5
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
32873: GO 33630
32875: LD_INT 13
32877: DOUBLE
32878: EQUAL
32879: IFTRUE 32883
32881: GO 32909
32883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32884: LD_ADDR_VAR 0 3
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 4
32897: PUSH
32898: LD_INT 5
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: ST_TO_ADDR
32907: GO 33630
32909: LD_INT 14
32911: DOUBLE
32912: EQUAL
32913: IFTRUE 32917
32915: GO 32935
32917: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32918: LD_ADDR_VAR 0 3
32922: PUSH
32923: LD_INT 4
32925: PUSH
32926: LD_INT 5
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: ST_TO_ADDR
32933: GO 33630
32935: LD_INT 6
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32961
32943: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32944: LD_ADDR_VAR 0 3
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 5
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: ST_TO_ADDR
32959: GO 33630
32961: LD_INT 10
32963: DOUBLE
32964: EQUAL
32965: IFTRUE 32969
32967: GO 32987
32969: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32970: LD_ADDR_VAR 0 3
32974: PUSH
32975: LD_INT 4
32977: PUSH
32978: LD_INT 5
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: ST_TO_ADDR
32985: GO 33630
32987: LD_INT 22
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33021
32995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32996: LD_ADDR_VAR 0 3
33000: PUSH
33001: LD_INT 11
33003: PUSH
33004: LD_INT 12
33006: PUSH
33007: LD_INT 13
33009: PUSH
33010: LD_INT 14
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: ST_TO_ADDR
33019: GO 33630
33021: LD_INT 23
33023: DOUBLE
33024: EQUAL
33025: IFTRUE 33029
33027: GO 33055
33029: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33030: LD_ADDR_VAR 0 3
33034: PUSH
33035: LD_INT 11
33037: PUSH
33038: LD_INT 12
33040: PUSH
33041: LD_INT 13
33043: PUSH
33044: LD_INT 14
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: ST_TO_ADDR
33053: GO 33630
33055: LD_INT 24
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33063
33061: GO 33089
33063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33064: LD_ADDR_VAR 0 3
33068: PUSH
33069: LD_INT 11
33071: PUSH
33072: LD_INT 12
33074: PUSH
33075: LD_INT 13
33077: PUSH
33078: LD_INT 14
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: ST_TO_ADDR
33087: GO 33630
33089: LD_INT 30
33091: DOUBLE
33092: EQUAL
33093: IFTRUE 33097
33095: GO 33123
33097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33098: LD_ADDR_VAR 0 3
33102: PUSH
33103: LD_INT 11
33105: PUSH
33106: LD_INT 12
33108: PUSH
33109: LD_INT 13
33111: PUSH
33112: LD_INT 14
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: ST_TO_ADDR
33121: GO 33630
33123: LD_INT 25
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33149
33131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_INT 13
33139: PUSH
33140: LD_INT 14
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: ST_TO_ADDR
33147: GO 33630
33149: LD_INT 27
33151: DOUBLE
33152: EQUAL
33153: IFTRUE 33157
33155: GO 33175
33157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33158: LD_ADDR_VAR 0 3
33162: PUSH
33163: LD_INT 13
33165: PUSH
33166: LD_INT 14
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: ST_TO_ADDR
33173: GO 33630
33175: LD_INT 92
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33209
33183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_INT 11
33191: PUSH
33192: LD_INT 12
33194: PUSH
33195: LD_INT 13
33197: PUSH
33198: LD_INT 14
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: ST_TO_ADDR
33207: GO 33630
33209: LD_INT 28
33211: DOUBLE
33212: EQUAL
33213: IFTRUE 33217
33215: GO 33235
33217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33218: LD_ADDR_VAR 0 3
33222: PUSH
33223: LD_INT 13
33225: PUSH
33226: LD_INT 14
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: ST_TO_ADDR
33233: GO 33630
33235: LD_INT 29
33237: DOUBLE
33238: EQUAL
33239: IFTRUE 33243
33241: GO 33261
33243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33244: LD_ADDR_VAR 0 3
33248: PUSH
33249: LD_INT 13
33251: PUSH
33252: LD_INT 14
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: ST_TO_ADDR
33259: GO 33630
33261: LD_INT 31
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33269
33267: GO 33287
33269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33270: LD_ADDR_VAR 0 3
33274: PUSH
33275: LD_INT 13
33277: PUSH
33278: LD_INT 14
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: ST_TO_ADDR
33285: GO 33630
33287: LD_INT 26
33289: DOUBLE
33290: EQUAL
33291: IFTRUE 33295
33293: GO 33313
33295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33296: LD_ADDR_VAR 0 3
33300: PUSH
33301: LD_INT 13
33303: PUSH
33304: LD_INT 14
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: ST_TO_ADDR
33311: GO 33630
33313: LD_INT 42
33315: DOUBLE
33316: EQUAL
33317: IFTRUE 33321
33319: GO 33347
33321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_INT 21
33329: PUSH
33330: LD_INT 22
33332: PUSH
33333: LD_INT 23
33335: PUSH
33336: LD_INT 24
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: ST_TO_ADDR
33345: GO 33630
33347: LD_INT 43
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33381
33355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33356: LD_ADDR_VAR 0 3
33360: PUSH
33361: LD_INT 21
33363: PUSH
33364: LD_INT 22
33366: PUSH
33367: LD_INT 23
33369: PUSH
33370: LD_INT 24
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: ST_TO_ADDR
33379: GO 33630
33381: LD_INT 44
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33389
33387: GO 33415
33389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33390: LD_ADDR_VAR 0 3
33394: PUSH
33395: LD_INT 21
33397: PUSH
33398: LD_INT 22
33400: PUSH
33401: LD_INT 23
33403: PUSH
33404: LD_INT 24
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: ST_TO_ADDR
33413: GO 33630
33415: LD_INT 45
33417: DOUBLE
33418: EQUAL
33419: IFTRUE 33423
33421: GO 33449
33423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33424: LD_ADDR_VAR 0 3
33428: PUSH
33429: LD_INT 21
33431: PUSH
33432: LD_INT 22
33434: PUSH
33435: LD_INT 23
33437: PUSH
33438: LD_INT 24
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: ST_TO_ADDR
33447: GO 33630
33449: LD_INT 49
33451: DOUBLE
33452: EQUAL
33453: IFTRUE 33457
33455: GO 33483
33457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33458: LD_ADDR_VAR 0 3
33462: PUSH
33463: LD_INT 21
33465: PUSH
33466: LD_INT 22
33468: PUSH
33469: LD_INT 23
33471: PUSH
33472: LD_INT 24
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: ST_TO_ADDR
33481: GO 33630
33483: LD_INT 51
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33491
33489: GO 33517
33491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33492: LD_ADDR_VAR 0 3
33496: PUSH
33497: LD_INT 21
33499: PUSH
33500: LD_INT 22
33502: PUSH
33503: LD_INT 23
33505: PUSH
33506: LD_INT 24
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: ST_TO_ADDR
33515: GO 33630
33517: LD_INT 52
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33551
33525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: LD_INT 21
33533: PUSH
33534: LD_INT 22
33536: PUSH
33537: LD_INT 23
33539: PUSH
33540: LD_INT 24
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: ST_TO_ADDR
33549: GO 33630
33551: LD_INT 53
33553: DOUBLE
33554: EQUAL
33555: IFTRUE 33559
33557: GO 33577
33559: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33560: LD_ADDR_VAR 0 3
33564: PUSH
33565: LD_INT 23
33567: PUSH
33568: LD_INT 24
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: ST_TO_ADDR
33575: GO 33630
33577: LD_INT 46
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33585
33583: GO 33603
33585: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_INT 23
33593: PUSH
33594: LD_INT 24
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: ST_TO_ADDR
33601: GO 33630
33603: LD_INT 47
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33629
33611: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33612: LD_ADDR_VAR 0 3
33616: PUSH
33617: LD_INT 23
33619: PUSH
33620: LD_INT 24
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: ST_TO_ADDR
33627: GO 33630
33629: POP
// result := ( chassis in result ) ;
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_VAR 0 1
33639: PUSH
33640: LD_VAR 0 3
33644: IN
33645: ST_TO_ADDR
// end ;
33646: LD_VAR 0 3
33650: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33651: LD_INT 0
33653: PPUSH
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
// result := array ;
33660: LD_ADDR_VAR 0 5
33664: PUSH
33665: LD_VAR 0 1
33669: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33670: LD_VAR 0 1
33674: NOT
33675: PUSH
33676: LD_VAR 0 2
33680: NOT
33681: OR
33682: PUSH
33683: LD_VAR 0 3
33687: NOT
33688: OR
33689: PUSH
33690: LD_VAR 0 2
33694: PUSH
33695: LD_VAR 0 1
33699: GREATER
33700: OR
33701: PUSH
33702: LD_VAR 0 3
33706: PUSH
33707: LD_VAR 0 1
33711: GREATER
33712: OR
33713: IFFALSE 33717
// exit ;
33715: GO 34013
// if direction then
33717: LD_VAR 0 4
33721: IFFALSE 33785
// begin d := 1 ;
33723: LD_ADDR_VAR 0 9
33727: PUSH
33728: LD_INT 1
33730: ST_TO_ADDR
// if i_from > i_to then
33731: LD_VAR 0 2
33735: PUSH
33736: LD_VAR 0 3
33740: GREATER
33741: IFFALSE 33767
// length := ( array - i_from ) + i_to else
33743: LD_ADDR_VAR 0 11
33747: PUSH
33748: LD_VAR 0 1
33752: PUSH
33753: LD_VAR 0 2
33757: MINUS
33758: PUSH
33759: LD_VAR 0 3
33763: PLUS
33764: ST_TO_ADDR
33765: GO 33783
// length := i_to - i_from ;
33767: LD_ADDR_VAR 0 11
33771: PUSH
33772: LD_VAR 0 3
33776: PUSH
33777: LD_VAR 0 2
33781: MINUS
33782: ST_TO_ADDR
// end else
33783: GO 33846
// begin d := - 1 ;
33785: LD_ADDR_VAR 0 9
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: ST_TO_ADDR
// if i_from > i_to then
33794: LD_VAR 0 2
33798: PUSH
33799: LD_VAR 0 3
33803: GREATER
33804: IFFALSE 33824
// length := i_from - i_to else
33806: LD_ADDR_VAR 0 11
33810: PUSH
33811: LD_VAR 0 2
33815: PUSH
33816: LD_VAR 0 3
33820: MINUS
33821: ST_TO_ADDR
33822: GO 33846
// length := ( array - i_to ) + i_from ;
33824: LD_ADDR_VAR 0 11
33828: PUSH
33829: LD_VAR 0 1
33833: PUSH
33834: LD_VAR 0 3
33838: MINUS
33839: PUSH
33840: LD_VAR 0 2
33844: PLUS
33845: ST_TO_ADDR
// end ; if not length then
33846: LD_VAR 0 11
33850: NOT
33851: IFFALSE 33855
// exit ;
33853: GO 34013
// tmp := array ;
33855: LD_ADDR_VAR 0 10
33859: PUSH
33860: LD_VAR 0 1
33864: ST_TO_ADDR
// for i = 1 to length do
33865: LD_ADDR_VAR 0 6
33869: PUSH
33870: DOUBLE
33871: LD_INT 1
33873: DEC
33874: ST_TO_ADDR
33875: LD_VAR 0 11
33879: PUSH
33880: FOR_TO
33881: IFFALSE 34001
// begin for j = 1 to array do
33883: LD_ADDR_VAR 0 7
33887: PUSH
33888: DOUBLE
33889: LD_INT 1
33891: DEC
33892: ST_TO_ADDR
33893: LD_VAR 0 1
33897: PUSH
33898: FOR_TO
33899: IFFALSE 33987
// begin k := j + d ;
33901: LD_ADDR_VAR 0 8
33905: PUSH
33906: LD_VAR 0 7
33910: PUSH
33911: LD_VAR 0 9
33915: PLUS
33916: ST_TO_ADDR
// if k > array then
33917: LD_VAR 0 8
33921: PUSH
33922: LD_VAR 0 1
33926: GREATER
33927: IFFALSE 33937
// k := 1 ;
33929: LD_ADDR_VAR 0 8
33933: PUSH
33934: LD_INT 1
33936: ST_TO_ADDR
// if not k then
33937: LD_VAR 0 8
33941: NOT
33942: IFFALSE 33954
// k := array ;
33944: LD_ADDR_VAR 0 8
33948: PUSH
33949: LD_VAR 0 1
33953: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33954: LD_ADDR_VAR 0 10
33958: PUSH
33959: LD_VAR 0 10
33963: PPUSH
33964: LD_VAR 0 8
33968: PPUSH
33969: LD_VAR 0 1
33973: PUSH
33974: LD_VAR 0 7
33978: ARRAY
33979: PPUSH
33980: CALL_OW 1
33984: ST_TO_ADDR
// end ;
33985: GO 33898
33987: POP
33988: POP
// array := tmp ;
33989: LD_ADDR_VAR 0 1
33993: PUSH
33994: LD_VAR 0 10
33998: ST_TO_ADDR
// end ;
33999: GO 33880
34001: POP
34002: POP
// result := array ;
34003: LD_ADDR_VAR 0 5
34007: PUSH
34008: LD_VAR 0 1
34012: ST_TO_ADDR
// end ;
34013: LD_VAR 0 5
34017: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34018: LD_INT 0
34020: PPUSH
34021: PPUSH
// result := 0 ;
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: LD_INT 0
34029: ST_TO_ADDR
// if not array or not value in array then
34030: LD_VAR 0 1
34034: NOT
34035: PUSH
34036: LD_VAR 0 2
34040: PUSH
34041: LD_VAR 0 1
34045: IN
34046: NOT
34047: OR
34048: IFFALSE 34052
// exit ;
34050: GO 34106
// for i = 1 to array do
34052: LD_ADDR_VAR 0 4
34056: PUSH
34057: DOUBLE
34058: LD_INT 1
34060: DEC
34061: ST_TO_ADDR
34062: LD_VAR 0 1
34066: PUSH
34067: FOR_TO
34068: IFFALSE 34104
// if value = array [ i ] then
34070: LD_VAR 0 2
34074: PUSH
34075: LD_VAR 0 1
34079: PUSH
34080: LD_VAR 0 4
34084: ARRAY
34085: EQUAL
34086: IFFALSE 34102
// begin result := i ;
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: LD_VAR 0 4
34097: ST_TO_ADDR
// exit ;
34098: POP
34099: POP
34100: GO 34106
// end ;
34102: GO 34067
34104: POP
34105: POP
// end ;
34106: LD_VAR 0 3
34110: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34111: LD_INT 0
34113: PPUSH
// vc_chassis := chassis ;
34114: LD_ADDR_OWVAR 37
34118: PUSH
34119: LD_VAR 0 1
34123: ST_TO_ADDR
// vc_engine := engine ;
34124: LD_ADDR_OWVAR 39
34128: PUSH
34129: LD_VAR 0 2
34133: ST_TO_ADDR
// vc_control := control ;
34134: LD_ADDR_OWVAR 38
34138: PUSH
34139: LD_VAR 0 3
34143: ST_TO_ADDR
// vc_weapon := weapon ;
34144: LD_ADDR_OWVAR 40
34148: PUSH
34149: LD_VAR 0 4
34153: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34154: LD_ADDR_OWVAR 41
34158: PUSH
34159: LD_VAR 0 5
34163: ST_TO_ADDR
// end ;
34164: LD_VAR 0 6
34168: RET
// export function WantPlant ( unit ) ; var task ; begin
34169: LD_INT 0
34171: PPUSH
34172: PPUSH
// result := false ;
34173: LD_ADDR_VAR 0 2
34177: PUSH
34178: LD_INT 0
34180: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34181: LD_ADDR_VAR 0 3
34185: PUSH
34186: LD_VAR 0 1
34190: PPUSH
34191: CALL_OW 437
34195: ST_TO_ADDR
// if task then
34196: LD_VAR 0 3
34200: IFFALSE 34228
// if task [ 1 ] [ 1 ] = p then
34202: LD_VAR 0 3
34206: PUSH
34207: LD_INT 1
34209: ARRAY
34210: PUSH
34211: LD_INT 1
34213: ARRAY
34214: PUSH
34215: LD_STRING p
34217: EQUAL
34218: IFFALSE 34228
// result := true ;
34220: LD_ADDR_VAR 0 2
34224: PUSH
34225: LD_INT 1
34227: ST_TO_ADDR
// end ;
34228: LD_VAR 0 2
34232: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
// if pos < 1 then
34239: LD_VAR 0 2
34243: PUSH
34244: LD_INT 1
34246: LESS
34247: IFFALSE 34251
// exit ;
34249: GO 34554
// if pos = 1 then
34251: LD_VAR 0 2
34255: PUSH
34256: LD_INT 1
34258: EQUAL
34259: IFFALSE 34292
// result := Replace ( arr , pos [ 1 ] , value ) else
34261: LD_ADDR_VAR 0 4
34265: PUSH
34266: LD_VAR 0 1
34270: PPUSH
34271: LD_VAR 0 2
34275: PUSH
34276: LD_INT 1
34278: ARRAY
34279: PPUSH
34280: LD_VAR 0 3
34284: PPUSH
34285: CALL_OW 1
34289: ST_TO_ADDR
34290: GO 34554
// begin tmp := arr ;
34292: LD_ADDR_VAR 0 6
34296: PUSH
34297: LD_VAR 0 1
34301: ST_TO_ADDR
// s_arr := [ tmp ] ;
34302: LD_ADDR_VAR 0 7
34306: PUSH
34307: LD_VAR 0 6
34311: PUSH
34312: EMPTY
34313: LIST
34314: ST_TO_ADDR
// for i = 1 to pos - 1 do
34315: LD_ADDR_VAR 0 5
34319: PUSH
34320: DOUBLE
34321: LD_INT 1
34323: DEC
34324: ST_TO_ADDR
34325: LD_VAR 0 2
34329: PUSH
34330: LD_INT 1
34332: MINUS
34333: PUSH
34334: FOR_TO
34335: IFFALSE 34380
// begin tmp := tmp [ pos [ i ] ] ;
34337: LD_ADDR_VAR 0 6
34341: PUSH
34342: LD_VAR 0 6
34346: PUSH
34347: LD_VAR 0 2
34351: PUSH
34352: LD_VAR 0 5
34356: ARRAY
34357: ARRAY
34358: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34359: LD_ADDR_VAR 0 7
34363: PUSH
34364: LD_VAR 0 7
34368: PUSH
34369: LD_VAR 0 6
34373: PUSH
34374: EMPTY
34375: LIST
34376: ADD
34377: ST_TO_ADDR
// end ;
34378: GO 34334
34380: POP
34381: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34382: LD_ADDR_VAR 0 6
34386: PUSH
34387: LD_VAR 0 6
34391: PPUSH
34392: LD_VAR 0 2
34396: PUSH
34397: LD_VAR 0 2
34401: ARRAY
34402: PPUSH
34403: LD_VAR 0 3
34407: PPUSH
34408: CALL_OW 1
34412: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34413: LD_ADDR_VAR 0 7
34417: PUSH
34418: LD_VAR 0 7
34422: PPUSH
34423: LD_VAR 0 7
34427: PPUSH
34428: LD_VAR 0 6
34432: PPUSH
34433: CALL_OW 1
34437: ST_TO_ADDR
// for i = s_arr downto 2 do
34438: LD_ADDR_VAR 0 5
34442: PUSH
34443: DOUBLE
34444: LD_VAR 0 7
34448: INC
34449: ST_TO_ADDR
34450: LD_INT 2
34452: PUSH
34453: FOR_DOWNTO
34454: IFFALSE 34538
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34456: LD_ADDR_VAR 0 6
34460: PUSH
34461: LD_VAR 0 7
34465: PUSH
34466: LD_VAR 0 5
34470: PUSH
34471: LD_INT 1
34473: MINUS
34474: ARRAY
34475: PPUSH
34476: LD_VAR 0 2
34480: PUSH
34481: LD_VAR 0 5
34485: PUSH
34486: LD_INT 1
34488: MINUS
34489: ARRAY
34490: PPUSH
34491: LD_VAR 0 7
34495: PUSH
34496: LD_VAR 0 5
34500: ARRAY
34501: PPUSH
34502: CALL_OW 1
34506: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34507: LD_ADDR_VAR 0 7
34511: PUSH
34512: LD_VAR 0 7
34516: PPUSH
34517: LD_VAR 0 5
34521: PUSH
34522: LD_INT 1
34524: MINUS
34525: PPUSH
34526: LD_VAR 0 6
34530: PPUSH
34531: CALL_OW 1
34535: ST_TO_ADDR
// end ;
34536: GO 34453
34538: POP
34539: POP
// result := s_arr [ 1 ] ;
34540: LD_ADDR_VAR 0 4
34544: PUSH
34545: LD_VAR 0 7
34549: PUSH
34550: LD_INT 1
34552: ARRAY
34553: ST_TO_ADDR
// end ; end ;
34554: LD_VAR 0 4
34558: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34559: LD_INT 0
34561: PPUSH
34562: PPUSH
// if not list then
34563: LD_VAR 0 1
34567: NOT
34568: IFFALSE 34572
// exit ;
34570: GO 34663
// i := list [ pos1 ] ;
34572: LD_ADDR_VAR 0 5
34576: PUSH
34577: LD_VAR 0 1
34581: PUSH
34582: LD_VAR 0 2
34586: ARRAY
34587: ST_TO_ADDR
// if not i then
34588: LD_VAR 0 5
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 34663
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34597: LD_ADDR_VAR 0 1
34601: PUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: LD_VAR 0 2
34611: PPUSH
34612: LD_VAR 0 1
34616: PUSH
34617: LD_VAR 0 3
34621: ARRAY
34622: PPUSH
34623: CALL_OW 1
34627: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34628: LD_ADDR_VAR 0 1
34632: PUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: LD_VAR 0 3
34642: PPUSH
34643: LD_VAR 0 5
34647: PPUSH
34648: CALL_OW 1
34652: ST_TO_ADDR
// result := list ;
34653: LD_ADDR_VAR 0 4
34657: PUSH
34658: LD_VAR 0 1
34662: ST_TO_ADDR
// end ;
34663: LD_VAR 0 4
34667: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34668: LD_INT 0
34670: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34671: LD_ADDR_VAR 0 5
34675: PUSH
34676: LD_VAR 0 1
34680: PPUSH
34681: CALL_OW 250
34685: PPUSH
34686: LD_VAR 0 1
34690: PPUSH
34691: CALL_OW 251
34695: PPUSH
34696: LD_VAR 0 2
34700: PPUSH
34701: LD_VAR 0 3
34705: PPUSH
34706: LD_VAR 0 4
34710: PPUSH
34711: CALL 35089 0 5
34715: ST_TO_ADDR
// end ;
34716: LD_VAR 0 5
34720: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34721: LD_INT 0
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
// if not list or not unit then
34727: LD_VAR 0 2
34731: NOT
34732: PUSH
34733: LD_VAR 0 1
34737: NOT
34738: OR
34739: IFFALSE 34743
// exit ;
34741: GO 35084
// result := [ ] ;
34743: LD_ADDR_VAR 0 5
34747: PUSH
34748: EMPTY
34749: ST_TO_ADDR
// for i in list do
34750: LD_ADDR_VAR 0 6
34754: PUSH
34755: LD_VAR 0 2
34759: PUSH
34760: FOR_IN
34761: IFFALSE 34979
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34763: LD_ADDR_VAR 0 8
34767: PUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: LD_VAR 0 6
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: PPUSH
34782: LD_VAR 0 6
34786: PUSH
34787: LD_INT 2
34789: ARRAY
34790: PPUSH
34791: CALL_OW 297
34795: ST_TO_ADDR
// if not Count ( result ) then
34796: LD_VAR 0 5
34800: PPUSH
34801: CALL 31373 0 1
34805: NOT
34806: IFFALSE 34839
// begin result := Join ( result , [ i , tmp ] ) ;
34808: LD_ADDR_VAR 0 5
34812: PUSH
34813: LD_VAR 0 5
34817: PPUSH
34818: LD_VAR 0 6
34822: PUSH
34823: LD_VAR 0 8
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PPUSH
34832: CALL 66962 0 2
34836: ST_TO_ADDR
// continue ;
34837: GO 34760
// end ; if result [ result ] [ 2 ] <= tmp then
34839: LD_VAR 0 5
34843: PUSH
34844: LD_VAR 0 5
34848: ARRAY
34849: PUSH
34850: LD_INT 2
34852: ARRAY
34853: PUSH
34854: LD_VAR 0 8
34858: LESSEQUAL
34859: IFFALSE 34892
// result := Join ( result , [ i , tmp ] ) else
34861: LD_ADDR_VAR 0 5
34865: PUSH
34866: LD_VAR 0 5
34870: PPUSH
34871: LD_VAR 0 6
34875: PUSH
34876: LD_VAR 0 8
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PPUSH
34885: CALL 66962 0 2
34889: ST_TO_ADDR
34890: GO 34977
// begin for j := 1 to Count ( result ) do
34892: LD_ADDR_VAR 0 7
34896: PUSH
34897: DOUBLE
34898: LD_INT 1
34900: DEC
34901: ST_TO_ADDR
34902: LD_VAR 0 5
34906: PPUSH
34907: CALL 31373 0 1
34911: PUSH
34912: FOR_TO
34913: IFFALSE 34975
// begin if tmp < result [ j ] [ 2 ] then
34915: LD_VAR 0 8
34919: PUSH
34920: LD_VAR 0 5
34924: PUSH
34925: LD_VAR 0 7
34929: ARRAY
34930: PUSH
34931: LD_INT 2
34933: ARRAY
34934: LESS
34935: IFFALSE 34973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34937: LD_ADDR_VAR 0 5
34941: PUSH
34942: LD_VAR 0 5
34946: PPUSH
34947: LD_VAR 0 7
34951: PPUSH
34952: LD_VAR 0 6
34956: PUSH
34957: LD_VAR 0 8
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PPUSH
34966: CALL_OW 2
34970: ST_TO_ADDR
// break ;
34971: GO 34975
// end ; end ;
34973: GO 34912
34975: POP
34976: POP
// end ; end ;
34977: GO 34760
34979: POP
34980: POP
// if result and not asc then
34981: LD_VAR 0 5
34985: PUSH
34986: LD_VAR 0 3
34990: NOT
34991: AND
34992: IFFALSE 35009
// result := ReverseArray ( result ) ;
34994: LD_ADDR_VAR 0 5
34998: PUSH
34999: LD_VAR 0 5
35003: PPUSH
35004: CALL 62249 0 1
35008: ST_TO_ADDR
// tmp := [ ] ;
35009: LD_ADDR_VAR 0 8
35013: PUSH
35014: EMPTY
35015: ST_TO_ADDR
// if mode then
35016: LD_VAR 0 4
35020: IFFALSE 35084
// begin for i := 1 to result do
35022: LD_ADDR_VAR 0 6
35026: PUSH
35027: DOUBLE
35028: LD_INT 1
35030: DEC
35031: ST_TO_ADDR
35032: LD_VAR 0 5
35036: PUSH
35037: FOR_TO
35038: IFFALSE 35072
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35040: LD_ADDR_VAR 0 8
35044: PUSH
35045: LD_VAR 0 8
35049: PPUSH
35050: LD_VAR 0 5
35054: PUSH
35055: LD_VAR 0 6
35059: ARRAY
35060: PUSH
35061: LD_INT 1
35063: ARRAY
35064: PPUSH
35065: CALL 66962 0 2
35069: ST_TO_ADDR
35070: GO 35037
35072: POP
35073: POP
// result := tmp ;
35074: LD_ADDR_VAR 0 5
35078: PUSH
35079: LD_VAR 0 8
35083: ST_TO_ADDR
// end ; end ;
35084: LD_VAR 0 5
35088: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35089: LD_INT 0
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
// if not list then
35095: LD_VAR 0 3
35099: NOT
35100: IFFALSE 35104
// exit ;
35102: GO 35492
// result := [ ] ;
35104: LD_ADDR_VAR 0 6
35108: PUSH
35109: EMPTY
35110: ST_TO_ADDR
// for i in list do
35111: LD_ADDR_VAR 0 7
35115: PUSH
35116: LD_VAR 0 3
35120: PUSH
35121: FOR_IN
35122: IFFALSE 35324
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35124: LD_ADDR_VAR 0 9
35128: PUSH
35129: LD_VAR 0 7
35133: PPUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: LD_VAR 0 2
35143: PPUSH
35144: CALL_OW 297
35148: ST_TO_ADDR
// if not result then
35149: LD_VAR 0 6
35153: NOT
35154: IFFALSE 35180
// result := [ [ i , tmp ] ] else
35156: LD_ADDR_VAR 0 6
35160: PUSH
35161: LD_VAR 0 7
35165: PUSH
35166: LD_VAR 0 9
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: EMPTY
35176: LIST
35177: ST_TO_ADDR
35178: GO 35322
// begin if result [ result ] [ 2 ] < tmp then
35180: LD_VAR 0 6
35184: PUSH
35185: LD_VAR 0 6
35189: ARRAY
35190: PUSH
35191: LD_INT 2
35193: ARRAY
35194: PUSH
35195: LD_VAR 0 9
35199: LESS
35200: IFFALSE 35242
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35202: LD_ADDR_VAR 0 6
35206: PUSH
35207: LD_VAR 0 6
35211: PPUSH
35212: LD_VAR 0 6
35216: PUSH
35217: LD_INT 1
35219: PLUS
35220: PPUSH
35221: LD_VAR 0 7
35225: PUSH
35226: LD_VAR 0 9
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PPUSH
35235: CALL_OW 2
35239: ST_TO_ADDR
35240: GO 35322
// for j = 1 to result do
35242: LD_ADDR_VAR 0 8
35246: PUSH
35247: DOUBLE
35248: LD_INT 1
35250: DEC
35251: ST_TO_ADDR
35252: LD_VAR 0 6
35256: PUSH
35257: FOR_TO
35258: IFFALSE 35320
// begin if tmp < result [ j ] [ 2 ] then
35260: LD_VAR 0 9
35264: PUSH
35265: LD_VAR 0 6
35269: PUSH
35270: LD_VAR 0 8
35274: ARRAY
35275: PUSH
35276: LD_INT 2
35278: ARRAY
35279: LESS
35280: IFFALSE 35318
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35282: LD_ADDR_VAR 0 6
35286: PUSH
35287: LD_VAR 0 6
35291: PPUSH
35292: LD_VAR 0 8
35296: PPUSH
35297: LD_VAR 0 7
35301: PUSH
35302: LD_VAR 0 9
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PPUSH
35311: CALL_OW 2
35315: ST_TO_ADDR
// break ;
35316: GO 35320
// end ; end ;
35318: GO 35257
35320: POP
35321: POP
// end ; end ;
35322: GO 35121
35324: POP
35325: POP
// if result and not asc then
35326: LD_VAR 0 6
35330: PUSH
35331: LD_VAR 0 4
35335: NOT
35336: AND
35337: IFFALSE 35412
// begin tmp := result ;
35339: LD_ADDR_VAR 0 9
35343: PUSH
35344: LD_VAR 0 6
35348: ST_TO_ADDR
// for i = tmp downto 1 do
35349: LD_ADDR_VAR 0 7
35353: PUSH
35354: DOUBLE
35355: LD_VAR 0 9
35359: INC
35360: ST_TO_ADDR
35361: LD_INT 1
35363: PUSH
35364: FOR_DOWNTO
35365: IFFALSE 35410
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35367: LD_ADDR_VAR 0 6
35371: PUSH
35372: LD_VAR 0 6
35376: PPUSH
35377: LD_VAR 0 9
35381: PUSH
35382: LD_VAR 0 7
35386: MINUS
35387: PUSH
35388: LD_INT 1
35390: PLUS
35391: PPUSH
35392: LD_VAR 0 9
35396: PUSH
35397: LD_VAR 0 7
35401: ARRAY
35402: PPUSH
35403: CALL_OW 1
35407: ST_TO_ADDR
35408: GO 35364
35410: POP
35411: POP
// end ; tmp := [ ] ;
35412: LD_ADDR_VAR 0 9
35416: PUSH
35417: EMPTY
35418: ST_TO_ADDR
// if mode then
35419: LD_VAR 0 5
35423: IFFALSE 35492
// begin for i = 1 to result do
35425: LD_ADDR_VAR 0 7
35429: PUSH
35430: DOUBLE
35431: LD_INT 1
35433: DEC
35434: ST_TO_ADDR
35435: LD_VAR 0 6
35439: PUSH
35440: FOR_TO
35441: IFFALSE 35480
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_VAR 0 9
35452: PPUSH
35453: LD_VAR 0 7
35457: PPUSH
35458: LD_VAR 0 6
35462: PUSH
35463: LD_VAR 0 7
35467: ARRAY
35468: PUSH
35469: LD_INT 1
35471: ARRAY
35472: PPUSH
35473: CALL_OW 1
35477: ST_TO_ADDR
35478: GO 35440
35480: POP
35481: POP
// result := tmp ;
35482: LD_ADDR_VAR 0 6
35486: PUSH
35487: LD_VAR 0 9
35491: ST_TO_ADDR
// end ; end ;
35492: LD_VAR 0 6
35496: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35497: LD_INT 0
35499: PPUSH
35500: PPUSH
35501: PPUSH
35502: PPUSH
35503: PPUSH
35504: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35505: LD_ADDR_VAR 0 5
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
// if not x or not y then
35527: LD_VAR 0 2
35531: NOT
35532: PUSH
35533: LD_VAR 0 3
35537: NOT
35538: OR
35539: IFFALSE 35543
// exit ;
35541: GO 37193
// if not range then
35543: LD_VAR 0 4
35547: NOT
35548: IFFALSE 35558
// range := 10 ;
35550: LD_ADDR_VAR 0 4
35554: PUSH
35555: LD_INT 10
35557: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35558: LD_ADDR_VAR 0 8
35562: PUSH
35563: LD_INT 81
35565: PUSH
35566: LD_VAR 0 1
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 92
35577: PUSH
35578: LD_VAR 0 2
35582: PUSH
35583: LD_VAR 0 3
35587: PUSH
35588: LD_VAR 0 4
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: LD_INT 21
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: PPUSH
35621: CALL_OW 69
35625: ST_TO_ADDR
// if not tmp then
35626: LD_VAR 0 8
35630: NOT
35631: IFFALSE 35635
// exit ;
35633: GO 37193
// for i in tmp do
35635: LD_ADDR_VAR 0 6
35639: PUSH
35640: LD_VAR 0 8
35644: PUSH
35645: FOR_IN
35646: IFFALSE 37168
// begin points := [ 0 , 0 , 0 ] ;
35648: LD_ADDR_VAR 0 9
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// bpoints := 1 ;
35667: LD_ADDR_VAR 0 10
35671: PUSH
35672: LD_INT 1
35674: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35675: LD_VAR 0 6
35679: PPUSH
35680: CALL_OW 247
35684: PUSH
35685: LD_INT 1
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35693
35691: GO 36271
35693: POP
// begin if GetClass ( i ) = 1 then
35694: LD_VAR 0 6
35698: PPUSH
35699: CALL_OW 257
35703: PUSH
35704: LD_INT 1
35706: EQUAL
35707: IFFALSE 35728
// points := [ 10 , 5 , 3 ] ;
35709: LD_ADDR_VAR 0 9
35713: PUSH
35714: LD_INT 10
35716: PUSH
35717: LD_INT 5
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35728: LD_VAR 0 6
35732: PPUSH
35733: CALL_OW 257
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 3
35743: PUSH
35744: LD_INT 4
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: IN
35752: IFFALSE 35773
// points := [ 3 , 2 , 1 ] ;
35754: LD_ADDR_VAR 0 9
35758: PUSH
35759: LD_INT 3
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35773: LD_VAR 0 6
35777: PPUSH
35778: CALL_OW 257
35782: PUSH
35783: LD_INT 5
35785: EQUAL
35786: IFFALSE 35807
// points := [ 130 , 5 , 2 ] ;
35788: LD_ADDR_VAR 0 9
35792: PUSH
35793: LD_INT 130
35795: PUSH
35796: LD_INT 5
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35807: LD_VAR 0 6
35811: PPUSH
35812: CALL_OW 257
35816: PUSH
35817: LD_INT 8
35819: EQUAL
35820: IFFALSE 35841
// points := [ 35 , 35 , 30 ] ;
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: LD_INT 35
35829: PUSH
35830: LD_INT 35
35832: PUSH
35833: LD_INT 30
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35841: LD_VAR 0 6
35845: PPUSH
35846: CALL_OW 257
35850: PUSH
35851: LD_INT 9
35853: EQUAL
35854: IFFALSE 35875
// points := [ 20 , 55 , 40 ] ;
35856: LD_ADDR_VAR 0 9
35860: PUSH
35861: LD_INT 20
35863: PUSH
35864: LD_INT 55
35866: PUSH
35867: LD_INT 40
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35875: LD_VAR 0 6
35879: PPUSH
35880: CALL_OW 257
35884: PUSH
35885: LD_INT 12
35887: PUSH
35888: LD_INT 16
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: IN
35895: IFFALSE 35916
// points := [ 5 , 3 , 2 ] ;
35897: LD_ADDR_VAR 0 9
35901: PUSH
35902: LD_INT 5
35904: PUSH
35905: LD_INT 3
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35916: LD_VAR 0 6
35920: PPUSH
35921: CALL_OW 257
35925: PUSH
35926: LD_INT 17
35928: EQUAL
35929: IFFALSE 35950
// points := [ 100 , 50 , 75 ] ;
35931: LD_ADDR_VAR 0 9
35935: PUSH
35936: LD_INT 100
35938: PUSH
35939: LD_INT 50
35941: PUSH
35942: LD_INT 75
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35950: LD_VAR 0 6
35954: PPUSH
35955: CALL_OW 257
35959: PUSH
35960: LD_INT 15
35962: EQUAL
35963: IFFALSE 35984
// points := [ 10 , 5 , 3 ] ;
35965: LD_ADDR_VAR 0 9
35969: PUSH
35970: LD_INT 10
35972: PUSH
35973: LD_INT 5
35975: PUSH
35976: LD_INT 3
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35984: LD_VAR 0 6
35988: PPUSH
35989: CALL_OW 257
35993: PUSH
35994: LD_INT 14
35996: EQUAL
35997: IFFALSE 36018
// points := [ 10 , 0 , 0 ] ;
35999: LD_ADDR_VAR 0 9
36003: PUSH
36004: LD_INT 10
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36018: LD_VAR 0 6
36022: PPUSH
36023: CALL_OW 257
36027: PUSH
36028: LD_INT 11
36030: EQUAL
36031: IFFALSE 36052
// points := [ 30 , 10 , 5 ] ;
36033: LD_ADDR_VAR 0 9
36037: PUSH
36038: LD_INT 30
36040: PUSH
36041: LD_INT 10
36043: PUSH
36044: LD_INT 5
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36052: LD_VAR 0 1
36056: PPUSH
36057: LD_INT 5
36059: PPUSH
36060: CALL_OW 321
36064: PUSH
36065: LD_INT 2
36067: EQUAL
36068: IFFALSE 36085
// bpoints := bpoints * 1.8 ;
36070: LD_ADDR_VAR 0 10
36074: PUSH
36075: LD_VAR 0 10
36079: PUSH
36080: LD_REAL  1.80000000000000E+0000
36083: MUL
36084: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36085: LD_VAR 0 6
36089: PPUSH
36090: CALL_OW 257
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: LD_INT 4
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: IN
36113: PUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: LD_INT 51
36121: PPUSH
36122: CALL_OW 321
36126: PUSH
36127: LD_INT 2
36129: EQUAL
36130: AND
36131: IFFALSE 36148
// bpoints := bpoints * 1.2 ;
36133: LD_ADDR_VAR 0 10
36137: PUSH
36138: LD_VAR 0 10
36142: PUSH
36143: LD_REAL  1.20000000000000E+0000
36146: MUL
36147: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36148: LD_VAR 0 6
36152: PPUSH
36153: CALL_OW 257
36157: PUSH
36158: LD_INT 5
36160: PUSH
36161: LD_INT 7
36163: PUSH
36164: LD_INT 9
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: IN
36172: PUSH
36173: LD_VAR 0 1
36177: PPUSH
36178: LD_INT 52
36180: PPUSH
36181: CALL_OW 321
36185: PUSH
36186: LD_INT 2
36188: EQUAL
36189: AND
36190: IFFALSE 36207
// bpoints := bpoints * 1.5 ;
36192: LD_ADDR_VAR 0 10
36196: PUSH
36197: LD_VAR 0 10
36201: PUSH
36202: LD_REAL  1.50000000000000E+0000
36205: MUL
36206: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36207: LD_VAR 0 1
36211: PPUSH
36212: LD_INT 66
36214: PPUSH
36215: CALL_OW 321
36219: PUSH
36220: LD_INT 2
36222: EQUAL
36223: IFFALSE 36240
// bpoints := bpoints * 1.1 ;
36225: LD_ADDR_VAR 0 10
36229: PUSH
36230: LD_VAR 0 10
36234: PUSH
36235: LD_REAL  1.10000000000000E+0000
36238: MUL
36239: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36240: LD_ADDR_VAR 0 10
36244: PUSH
36245: LD_VAR 0 10
36249: PUSH
36250: LD_VAR 0 6
36254: PPUSH
36255: LD_INT 1
36257: PPUSH
36258: CALL_OW 259
36262: PUSH
36263: LD_REAL  1.15000000000000E+0000
36266: MUL
36267: MUL
36268: ST_TO_ADDR
// end ; unit_vehicle :
36269: GO 37097
36271: LD_INT 2
36273: DOUBLE
36274: EQUAL
36275: IFTRUE 36279
36277: GO 37085
36279: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36280: LD_VAR 0 6
36284: PPUSH
36285: CALL_OW 264
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: LD_INT 42
36295: PUSH
36296: LD_INT 24
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: IN
36304: IFFALSE 36325
// points := [ 25 , 5 , 3 ] ;
36306: LD_ADDR_VAR 0 9
36310: PUSH
36311: LD_INT 25
36313: PUSH
36314: LD_INT 5
36316: PUSH
36317: LD_INT 3
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36325: LD_VAR 0 6
36329: PPUSH
36330: CALL_OW 264
36334: PUSH
36335: LD_INT 4
36337: PUSH
36338: LD_INT 43
36340: PUSH
36341: LD_INT 25
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: IN
36349: IFFALSE 36370
// points := [ 40 , 15 , 5 ] ;
36351: LD_ADDR_VAR 0 9
36355: PUSH
36356: LD_INT 40
36358: PUSH
36359: LD_INT 15
36361: PUSH
36362: LD_INT 5
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36370: LD_VAR 0 6
36374: PPUSH
36375: CALL_OW 264
36379: PUSH
36380: LD_INT 3
36382: PUSH
36383: LD_INT 23
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: IN
36390: IFFALSE 36411
// points := [ 7 , 25 , 8 ] ;
36392: LD_ADDR_VAR 0 9
36396: PUSH
36397: LD_INT 7
36399: PUSH
36400: LD_INT 25
36402: PUSH
36403: LD_INT 8
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36411: LD_VAR 0 6
36415: PPUSH
36416: CALL_OW 264
36420: PUSH
36421: LD_INT 5
36423: PUSH
36424: LD_INT 27
36426: PUSH
36427: LD_INT 44
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: IN
36435: IFFALSE 36456
// points := [ 14 , 50 , 16 ] ;
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_INT 14
36444: PUSH
36445: LD_INT 50
36447: PUSH
36448: LD_INT 16
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36456: LD_VAR 0 6
36460: PPUSH
36461: CALL_OW 264
36465: PUSH
36466: LD_INT 6
36468: PUSH
36469: LD_INT 46
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: IN
36476: IFFALSE 36497
// points := [ 32 , 120 , 70 ] ;
36478: LD_ADDR_VAR 0 9
36482: PUSH
36483: LD_INT 32
36485: PUSH
36486: LD_INT 120
36488: PUSH
36489: LD_INT 70
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36497: LD_VAR 0 6
36501: PPUSH
36502: CALL_OW 264
36506: PUSH
36507: LD_INT 7
36509: PUSH
36510: LD_INT 28
36512: PUSH
36513: LD_INT 45
36515: PUSH
36516: LD_INT 92
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: IN
36525: IFFALSE 36546
// points := [ 35 , 20 , 45 ] ;
36527: LD_ADDR_VAR 0 9
36531: PUSH
36532: LD_INT 35
36534: PUSH
36535: LD_INT 20
36537: PUSH
36538: LD_INT 45
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36546: LD_VAR 0 6
36550: PPUSH
36551: CALL_OW 264
36555: PUSH
36556: LD_INT 47
36558: PUSH
36559: EMPTY
36560: LIST
36561: IN
36562: IFFALSE 36583
// points := [ 67 , 45 , 75 ] ;
36564: LD_ADDR_VAR 0 9
36568: PUSH
36569: LD_INT 67
36571: PUSH
36572: LD_INT 45
36574: PUSH
36575: LD_INT 75
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36583: LD_VAR 0 6
36587: PPUSH
36588: CALL_OW 264
36592: PUSH
36593: LD_INT 26
36595: PUSH
36596: EMPTY
36597: LIST
36598: IN
36599: IFFALSE 36620
// points := [ 120 , 30 , 80 ] ;
36601: LD_ADDR_VAR 0 9
36605: PUSH
36606: LD_INT 120
36608: PUSH
36609: LD_INT 30
36611: PUSH
36612: LD_INT 80
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36620: LD_VAR 0 6
36624: PPUSH
36625: CALL_OW 264
36629: PUSH
36630: LD_INT 22
36632: PUSH
36633: EMPTY
36634: LIST
36635: IN
36636: IFFALSE 36657
// points := [ 40 , 1 , 1 ] ;
36638: LD_ADDR_VAR 0 9
36642: PUSH
36643: LD_INT 40
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36657: LD_VAR 0 6
36661: PPUSH
36662: CALL_OW 264
36666: PUSH
36667: LD_INT 29
36669: PUSH
36670: EMPTY
36671: LIST
36672: IN
36673: IFFALSE 36694
// points := [ 70 , 200 , 400 ] ;
36675: LD_ADDR_VAR 0 9
36679: PUSH
36680: LD_INT 70
36682: PUSH
36683: LD_INT 200
36685: PUSH
36686: LD_INT 400
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36694: LD_VAR 0 6
36698: PPUSH
36699: CALL_OW 264
36703: PUSH
36704: LD_INT 14
36706: PUSH
36707: LD_INT 53
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: IN
36714: IFFALSE 36735
// points := [ 40 , 10 , 20 ] ;
36716: LD_ADDR_VAR 0 9
36720: PUSH
36721: LD_INT 40
36723: PUSH
36724: LD_INT 10
36726: PUSH
36727: LD_INT 20
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36735: LD_VAR 0 6
36739: PPUSH
36740: CALL_OW 264
36744: PUSH
36745: LD_INT 9
36747: PUSH
36748: EMPTY
36749: LIST
36750: IN
36751: IFFALSE 36772
// points := [ 5 , 70 , 20 ] ;
36753: LD_ADDR_VAR 0 9
36757: PUSH
36758: LD_INT 5
36760: PUSH
36761: LD_INT 70
36763: PUSH
36764: LD_INT 20
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36772: LD_VAR 0 6
36776: PPUSH
36777: CALL_OW 264
36781: PUSH
36782: LD_INT 10
36784: PUSH
36785: EMPTY
36786: LIST
36787: IN
36788: IFFALSE 36809
// points := [ 35 , 110 , 70 ] ;
36790: LD_ADDR_VAR 0 9
36794: PUSH
36795: LD_INT 35
36797: PUSH
36798: LD_INT 110
36800: PUSH
36801: LD_INT 70
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36809: LD_VAR 0 6
36813: PPUSH
36814: CALL_OW 265
36818: PUSH
36819: LD_INT 25
36821: EQUAL
36822: IFFALSE 36843
// points := [ 80 , 65 , 100 ] ;
36824: LD_ADDR_VAR 0 9
36828: PUSH
36829: LD_INT 80
36831: PUSH
36832: LD_INT 65
36834: PUSH
36835: LD_INT 100
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36843: LD_VAR 0 6
36847: PPUSH
36848: CALL_OW 263
36852: PUSH
36853: LD_INT 1
36855: EQUAL
36856: IFFALSE 36891
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36858: LD_ADDR_VAR 0 10
36862: PUSH
36863: LD_VAR 0 10
36867: PUSH
36868: LD_VAR 0 6
36872: PPUSH
36873: CALL_OW 311
36877: PPUSH
36878: LD_INT 3
36880: PPUSH
36881: CALL_OW 259
36885: PUSH
36886: LD_INT 4
36888: MUL
36889: MUL
36890: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36891: LD_VAR 0 6
36895: PPUSH
36896: CALL_OW 263
36900: PUSH
36901: LD_INT 2
36903: EQUAL
36904: IFFALSE 36955
// begin j := IsControledBy ( i ) ;
36906: LD_ADDR_VAR 0 7
36910: PUSH
36911: LD_VAR 0 6
36915: PPUSH
36916: CALL_OW 312
36920: ST_TO_ADDR
// if j then
36921: LD_VAR 0 7
36925: IFFALSE 36955
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36927: LD_ADDR_VAR 0 10
36931: PUSH
36932: LD_VAR 0 10
36936: PUSH
36937: LD_VAR 0 7
36941: PPUSH
36942: LD_INT 3
36944: PPUSH
36945: CALL_OW 259
36949: PUSH
36950: LD_INT 3
36952: MUL
36953: MUL
36954: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36955: LD_VAR 0 6
36959: PPUSH
36960: CALL_OW 264
36964: PUSH
36965: LD_INT 5
36967: PUSH
36968: LD_INT 6
36970: PUSH
36971: LD_INT 46
36973: PUSH
36974: LD_INT 44
36976: PUSH
36977: LD_INT 47
36979: PUSH
36980: LD_INT 45
36982: PUSH
36983: LD_INT 28
36985: PUSH
36986: LD_INT 7
36988: PUSH
36989: LD_INT 27
36991: PUSH
36992: LD_INT 29
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: IN
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: LD_INT 52
37015: PPUSH
37016: CALL_OW 321
37020: PUSH
37021: LD_INT 2
37023: EQUAL
37024: AND
37025: IFFALSE 37042
// bpoints := bpoints * 1.2 ;
37027: LD_ADDR_VAR 0 10
37031: PUSH
37032: LD_VAR 0 10
37036: PUSH
37037: LD_REAL  1.20000000000000E+0000
37040: MUL
37041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37042: LD_VAR 0 6
37046: PPUSH
37047: CALL_OW 264
37051: PUSH
37052: LD_INT 6
37054: PUSH
37055: LD_INT 46
37057: PUSH
37058: LD_INT 47
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: IN
37066: IFFALSE 37083
// bpoints := bpoints * 1.2 ;
37068: LD_ADDR_VAR 0 10
37072: PUSH
37073: LD_VAR 0 10
37077: PUSH
37078: LD_REAL  1.20000000000000E+0000
37081: MUL
37082: ST_TO_ADDR
// end ; unit_building :
37083: GO 37097
37085: LD_INT 3
37087: DOUBLE
37088: EQUAL
37089: IFTRUE 37093
37091: GO 37096
37093: POP
// ; end ;
37094: GO 37097
37096: POP
// for j = 1 to 3 do
37097: LD_ADDR_VAR 0 7
37101: PUSH
37102: DOUBLE
37103: LD_INT 1
37105: DEC
37106: ST_TO_ADDR
37107: LD_INT 3
37109: PUSH
37110: FOR_TO
37111: IFFALSE 37164
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37113: LD_ADDR_VAR 0 5
37117: PUSH
37118: LD_VAR 0 5
37122: PPUSH
37123: LD_VAR 0 7
37127: PPUSH
37128: LD_VAR 0 5
37132: PUSH
37133: LD_VAR 0 7
37137: ARRAY
37138: PUSH
37139: LD_VAR 0 9
37143: PUSH
37144: LD_VAR 0 7
37148: ARRAY
37149: PUSH
37150: LD_VAR 0 10
37154: MUL
37155: PLUS
37156: PPUSH
37157: CALL_OW 1
37161: ST_TO_ADDR
37162: GO 37110
37164: POP
37165: POP
// end ;
37166: GO 35645
37168: POP
37169: POP
// result := Replace ( result , 4 , tmp ) ;
37170: LD_ADDR_VAR 0 5
37174: PUSH
37175: LD_VAR 0 5
37179: PPUSH
37180: LD_INT 4
37182: PPUSH
37183: LD_VAR 0 8
37187: PPUSH
37188: CALL_OW 1
37192: ST_TO_ADDR
// end ;
37193: LD_VAR 0 5
37197: RET
// export function DangerAtRange ( unit , range ) ; begin
37198: LD_INT 0
37200: PPUSH
// if not unit then
37201: LD_VAR 0 1
37205: NOT
37206: IFFALSE 37210
// exit ;
37208: GO 37255
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 255
37224: PPUSH
37225: LD_VAR 0 1
37229: PPUSH
37230: CALL_OW 250
37234: PPUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 251
37244: PPUSH
37245: LD_VAR 0 2
37249: PPUSH
37250: CALL 35497 0 4
37254: ST_TO_ADDR
// end ;
37255: LD_VAR 0 3
37259: RET
// export function DangerInArea ( side , area ) ; begin
37260: LD_INT 0
37262: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37263: LD_ADDR_VAR 0 3
37267: PUSH
37268: LD_VAR 0 2
37272: PPUSH
37273: LD_INT 81
37275: PUSH
37276: LD_VAR 0 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PPUSH
37285: CALL_OW 70
37289: ST_TO_ADDR
// end ;
37290: LD_VAR 0 3
37294: RET
// export function IsExtension ( b ) ; begin
37295: LD_INT 0
37297: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37298: LD_ADDR_VAR 0 2
37302: PUSH
37303: LD_VAR 0 1
37307: PUSH
37308: LD_INT 23
37310: PUSH
37311: LD_INT 20
37313: PUSH
37314: LD_INT 22
37316: PUSH
37317: LD_INT 17
37319: PUSH
37320: LD_INT 24
37322: PUSH
37323: LD_INT 21
37325: PUSH
37326: LD_INT 19
37328: PUSH
37329: LD_INT 16
37331: PUSH
37332: LD_INT 25
37334: PUSH
37335: LD_INT 18
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: IN
37350: ST_TO_ADDR
// end ;
37351: LD_VAR 0 2
37355: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37356: LD_INT 0
37358: PPUSH
37359: PPUSH
37360: PPUSH
// result := [ ] ;
37361: LD_ADDR_VAR 0 4
37365: PUSH
37366: EMPTY
37367: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37368: LD_ADDR_VAR 0 5
37372: PUSH
37373: LD_VAR 0 2
37377: PPUSH
37378: LD_INT 21
37380: PUSH
37381: LD_INT 3
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PPUSH
37388: CALL_OW 70
37392: ST_TO_ADDR
// if not tmp then
37393: LD_VAR 0 5
37397: NOT
37398: IFFALSE 37402
// exit ;
37400: GO 37466
// if checkLink then
37402: LD_VAR 0 3
37406: IFFALSE 37456
// begin for i in tmp do
37408: LD_ADDR_VAR 0 6
37412: PUSH
37413: LD_VAR 0 5
37417: PUSH
37418: FOR_IN
37419: IFFALSE 37454
// if GetBase ( i ) <> base then
37421: LD_VAR 0 6
37425: PPUSH
37426: CALL_OW 274
37430: PUSH
37431: LD_VAR 0 1
37435: NONEQUAL
37436: IFFALSE 37452
// ComLinkToBase ( base , i ) ;
37438: LD_VAR 0 1
37442: PPUSH
37443: LD_VAR 0 6
37447: PPUSH
37448: CALL_OW 169
37452: GO 37418
37454: POP
37455: POP
// end ; result := tmp ;
37456: LD_ADDR_VAR 0 4
37460: PUSH
37461: LD_VAR 0 5
37465: ST_TO_ADDR
// end ;
37466: LD_VAR 0 4
37470: RET
// export function ComComplete ( units , b ) ; var i ; begin
37471: LD_INT 0
37473: PPUSH
37474: PPUSH
// if not units then
37475: LD_VAR 0 1
37479: NOT
37480: IFFALSE 37484
// exit ;
37482: GO 37574
// for i in units do
37484: LD_ADDR_VAR 0 4
37488: PUSH
37489: LD_VAR 0 1
37493: PUSH
37494: FOR_IN
37495: IFFALSE 37572
// if BuildingStatus ( b ) = bs_build then
37497: LD_VAR 0 2
37501: PPUSH
37502: CALL_OW 461
37506: PUSH
37507: LD_INT 1
37509: EQUAL
37510: IFFALSE 37570
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37512: LD_VAR 0 4
37516: PPUSH
37517: LD_STRING h
37519: PUSH
37520: LD_VAR 0 2
37524: PPUSH
37525: CALL_OW 250
37529: PUSH
37530: LD_VAR 0 2
37534: PPUSH
37535: CALL_OW 251
37539: PUSH
37540: LD_VAR 0 2
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: PPUSH
37566: CALL_OW 446
37570: GO 37494
37572: POP
37573: POP
// end ;
37574: LD_VAR 0 3
37578: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37579: LD_INT 0
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37587: LD_VAR 0 1
37591: NOT
37592: PUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: CALL_OW 263
37602: PUSH
37603: LD_INT 2
37605: NONEQUAL
37606: OR
37607: IFFALSE 37611
// exit ;
37609: GO 37927
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37611: LD_ADDR_VAR 0 6
37615: PUSH
37616: LD_INT 22
37618: PUSH
37619: LD_VAR 0 1
37623: PPUSH
37624: CALL_OW 255
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 30
37638: PUSH
37639: LD_INT 36
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 34
37648: PUSH
37649: LD_INT 31
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PPUSH
37665: CALL_OW 69
37669: ST_TO_ADDR
// if not tmp then
37670: LD_VAR 0 6
37674: NOT
37675: IFFALSE 37679
// exit ;
37677: GO 37927
// result := [ ] ;
37679: LD_ADDR_VAR 0 2
37683: PUSH
37684: EMPTY
37685: ST_TO_ADDR
// for i in tmp do
37686: LD_ADDR_VAR 0 3
37690: PUSH
37691: LD_VAR 0 6
37695: PUSH
37696: FOR_IN
37697: IFFALSE 37768
// begin t := UnitsInside ( i ) ;
37699: LD_ADDR_VAR 0 4
37703: PUSH
37704: LD_VAR 0 3
37708: PPUSH
37709: CALL_OW 313
37713: ST_TO_ADDR
// if t then
37714: LD_VAR 0 4
37718: IFFALSE 37766
// for j in t do
37720: LD_ADDR_VAR 0 7
37724: PUSH
37725: LD_VAR 0 4
37729: PUSH
37730: FOR_IN
37731: IFFALSE 37764
// result := Replace ( result , result + 1 , j ) ;
37733: LD_ADDR_VAR 0 2
37737: PUSH
37738: LD_VAR 0 2
37742: PPUSH
37743: LD_VAR 0 2
37747: PUSH
37748: LD_INT 1
37750: PLUS
37751: PPUSH
37752: LD_VAR 0 7
37756: PPUSH
37757: CALL_OW 1
37761: ST_TO_ADDR
37762: GO 37730
37764: POP
37765: POP
// end ;
37766: GO 37696
37768: POP
37769: POP
// if not result then
37770: LD_VAR 0 2
37774: NOT
37775: IFFALSE 37779
// exit ;
37777: GO 37927
// mech := result [ 1 ] ;
37779: LD_ADDR_VAR 0 5
37783: PUSH
37784: LD_VAR 0 2
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: ST_TO_ADDR
// if result > 1 then
37793: LD_VAR 0 2
37797: PUSH
37798: LD_INT 1
37800: GREATER
37801: IFFALSE 37913
// begin for i = 2 to result do
37803: LD_ADDR_VAR 0 3
37807: PUSH
37808: DOUBLE
37809: LD_INT 2
37811: DEC
37812: ST_TO_ADDR
37813: LD_VAR 0 2
37817: PUSH
37818: FOR_TO
37819: IFFALSE 37911
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37821: LD_ADDR_VAR 0 4
37825: PUSH
37826: LD_VAR 0 2
37830: PUSH
37831: LD_VAR 0 3
37835: ARRAY
37836: PPUSH
37837: LD_INT 3
37839: PPUSH
37840: CALL_OW 259
37844: PUSH
37845: LD_VAR 0 2
37849: PUSH
37850: LD_VAR 0 3
37854: ARRAY
37855: PPUSH
37856: CALL_OW 432
37860: MINUS
37861: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37862: LD_VAR 0 4
37866: PUSH
37867: LD_VAR 0 5
37871: PPUSH
37872: LD_INT 3
37874: PPUSH
37875: CALL_OW 259
37879: PUSH
37880: LD_VAR 0 5
37884: PPUSH
37885: CALL_OW 432
37889: MINUS
37890: GREATEREQUAL
37891: IFFALSE 37909
// mech := result [ i ] ;
37893: LD_ADDR_VAR 0 5
37897: PUSH
37898: LD_VAR 0 2
37902: PUSH
37903: LD_VAR 0 3
37907: ARRAY
37908: ST_TO_ADDR
// end ;
37909: GO 37818
37911: POP
37912: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37913: LD_VAR 0 1
37917: PPUSH
37918: LD_VAR 0 5
37922: PPUSH
37923: CALL_OW 135
// end ;
37927: LD_VAR 0 2
37931: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
37941: PPUSH
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
// result := [ ] ;
37947: LD_ADDR_VAR 0 7
37951: PUSH
37952: EMPTY
37953: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 266
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: IN
37974: NOT
37975: IFFALSE 37979
// exit ;
37977: GO 39613
// if name then
37979: LD_VAR 0 3
37983: IFFALSE 37999
// SetBName ( base_dep , name ) ;
37985: LD_VAR 0 1
37989: PPUSH
37990: LD_VAR 0 3
37994: PPUSH
37995: CALL_OW 500
// base := GetBase ( base_dep ) ;
37999: LD_ADDR_VAR 0 15
38003: PUSH
38004: LD_VAR 0 1
38008: PPUSH
38009: CALL_OW 274
38013: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38014: LD_ADDR_VAR 0 16
38018: PUSH
38019: LD_VAR 0 1
38023: PPUSH
38024: CALL_OW 255
38028: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38029: LD_ADDR_VAR 0 17
38033: PUSH
38034: LD_VAR 0 1
38038: PPUSH
38039: CALL_OW 248
38043: ST_TO_ADDR
// if sources then
38044: LD_VAR 0 5
38048: IFFALSE 38095
// for i = 1 to 3 do
38050: LD_ADDR_VAR 0 8
38054: PUSH
38055: DOUBLE
38056: LD_INT 1
38058: DEC
38059: ST_TO_ADDR
38060: LD_INT 3
38062: PUSH
38063: FOR_TO
38064: IFFALSE 38093
// AddResourceType ( base , i , sources [ i ] ) ;
38066: LD_VAR 0 15
38070: PPUSH
38071: LD_VAR 0 8
38075: PPUSH
38076: LD_VAR 0 5
38080: PUSH
38081: LD_VAR 0 8
38085: ARRAY
38086: PPUSH
38087: CALL_OW 276
38091: GO 38063
38093: POP
38094: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38095: LD_ADDR_VAR 0 18
38099: PUSH
38100: LD_VAR 0 15
38104: PPUSH
38105: LD_VAR 0 2
38109: PPUSH
38110: LD_INT 1
38112: PPUSH
38113: CALL 37356 0 3
38117: ST_TO_ADDR
// InitHc ;
38118: CALL_OW 19
// InitUc ;
38122: CALL_OW 18
// uc_side := side ;
38126: LD_ADDR_OWVAR 20
38130: PUSH
38131: LD_VAR 0 16
38135: ST_TO_ADDR
// uc_nation := nation ;
38136: LD_ADDR_OWVAR 21
38140: PUSH
38141: LD_VAR 0 17
38145: ST_TO_ADDR
// if buildings then
38146: LD_VAR 0 18
38150: IFFALSE 39472
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38152: LD_ADDR_VAR 0 19
38156: PUSH
38157: LD_VAR 0 18
38161: PPUSH
38162: LD_INT 2
38164: PUSH
38165: LD_INT 30
38167: PUSH
38168: LD_INT 29
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 30
38177: PUSH
38178: LD_INT 30
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: PPUSH
38190: CALL_OW 72
38194: ST_TO_ADDR
// if tmp then
38195: LD_VAR 0 19
38199: IFFALSE 38247
// for i in tmp do
38201: LD_ADDR_VAR 0 8
38205: PUSH
38206: LD_VAR 0 19
38210: PUSH
38211: FOR_IN
38212: IFFALSE 38245
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38214: LD_VAR 0 8
38218: PPUSH
38219: CALL_OW 250
38223: PPUSH
38224: LD_VAR 0 8
38228: PPUSH
38229: CALL_OW 251
38233: PPUSH
38234: LD_VAR 0 16
38238: PPUSH
38239: CALL_OW 441
38243: GO 38211
38245: POP
38246: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38247: LD_VAR 0 18
38251: PPUSH
38252: LD_INT 2
38254: PUSH
38255: LD_INT 30
38257: PUSH
38258: LD_INT 32
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 30
38267: PUSH
38268: LD_INT 33
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: PPUSH
38280: CALL_OW 72
38284: IFFALSE 38372
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38286: LD_ADDR_VAR 0 8
38290: PUSH
38291: LD_VAR 0 18
38295: PPUSH
38296: LD_INT 2
38298: PUSH
38299: LD_INT 30
38301: PUSH
38302: LD_INT 32
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 30
38311: PUSH
38312: LD_INT 33
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: PPUSH
38324: CALL_OW 72
38328: PUSH
38329: FOR_IN
38330: IFFALSE 38370
// begin if not GetBWeapon ( i ) then
38332: LD_VAR 0 8
38336: PPUSH
38337: CALL_OW 269
38341: NOT
38342: IFFALSE 38368
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38344: LD_VAR 0 8
38348: PPUSH
38349: LD_VAR 0 8
38353: PPUSH
38354: LD_VAR 0 2
38358: PPUSH
38359: CALL 39618 0 2
38363: PPUSH
38364: CALL_OW 431
// end ;
38368: GO 38329
38370: POP
38371: POP
// end ; for i = 1 to personel do
38372: LD_ADDR_VAR 0 8
38376: PUSH
38377: DOUBLE
38378: LD_INT 1
38380: DEC
38381: ST_TO_ADDR
38382: LD_VAR 0 6
38386: PUSH
38387: FOR_TO
38388: IFFALSE 39452
// begin if i > 4 then
38390: LD_VAR 0 8
38394: PUSH
38395: LD_INT 4
38397: GREATER
38398: IFFALSE 38402
// break ;
38400: GO 39452
// case i of 1 :
38402: LD_VAR 0 8
38406: PUSH
38407: LD_INT 1
38409: DOUBLE
38410: EQUAL
38411: IFTRUE 38415
38413: GO 38495
38415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38416: LD_ADDR_VAR 0 12
38420: PUSH
38421: LD_VAR 0 18
38425: PPUSH
38426: LD_INT 22
38428: PUSH
38429: LD_VAR 0 16
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 58
38440: PUSH
38441: EMPTY
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: LD_INT 30
38449: PUSH
38450: LD_INT 32
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 30
38459: PUSH
38460: LD_INT 4
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 30
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: PPUSH
38488: CALL_OW 72
38492: ST_TO_ADDR
38493: GO 38717
38495: LD_INT 2
38497: DOUBLE
38498: EQUAL
38499: IFTRUE 38503
38501: GO 38565
38503: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38504: LD_ADDR_VAR 0 12
38508: PUSH
38509: LD_VAR 0 18
38513: PPUSH
38514: LD_INT 22
38516: PUSH
38517: LD_VAR 0 16
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 30
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PPUSH
38558: CALL_OW 72
38562: ST_TO_ADDR
38563: GO 38717
38565: LD_INT 3
38567: DOUBLE
38568: EQUAL
38569: IFTRUE 38573
38571: GO 38635
38573: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38574: LD_ADDR_VAR 0 12
38578: PUSH
38579: LD_VAR 0 18
38583: PPUSH
38584: LD_INT 22
38586: PUSH
38587: LD_VAR 0 16
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: LD_INT 30
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 30
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL_OW 72
38632: ST_TO_ADDR
38633: GO 38717
38635: LD_INT 4
38637: DOUBLE
38638: EQUAL
38639: IFTRUE 38643
38641: GO 38716
38643: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38644: LD_ADDR_VAR 0 12
38648: PUSH
38649: LD_VAR 0 18
38653: PPUSH
38654: LD_INT 22
38656: PUSH
38657: LD_VAR 0 16
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 30
38671: PUSH
38672: LD_INT 6
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 30
38681: PUSH
38682: LD_INT 7
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 30
38691: PUSH
38692: LD_INT 8
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PPUSH
38709: CALL_OW 72
38713: ST_TO_ADDR
38714: GO 38717
38716: POP
// if i = 1 then
38717: LD_VAR 0 8
38721: PUSH
38722: LD_INT 1
38724: EQUAL
38725: IFFALSE 38836
// begin tmp := [ ] ;
38727: LD_ADDR_VAR 0 19
38731: PUSH
38732: EMPTY
38733: ST_TO_ADDR
// for j in f do
38734: LD_ADDR_VAR 0 9
38738: PUSH
38739: LD_VAR 0 12
38743: PUSH
38744: FOR_IN
38745: IFFALSE 38818
// if GetBType ( j ) = b_bunker then
38747: LD_VAR 0 9
38751: PPUSH
38752: CALL_OW 266
38756: PUSH
38757: LD_INT 32
38759: EQUAL
38760: IFFALSE 38787
// tmp := Insert ( tmp , 1 , j ) else
38762: LD_ADDR_VAR 0 19
38766: PUSH
38767: LD_VAR 0 19
38771: PPUSH
38772: LD_INT 1
38774: PPUSH
38775: LD_VAR 0 9
38779: PPUSH
38780: CALL_OW 2
38784: ST_TO_ADDR
38785: GO 38816
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38787: LD_ADDR_VAR 0 19
38791: PUSH
38792: LD_VAR 0 19
38796: PPUSH
38797: LD_VAR 0 19
38801: PUSH
38802: LD_INT 1
38804: PLUS
38805: PPUSH
38806: LD_VAR 0 9
38810: PPUSH
38811: CALL_OW 2
38815: ST_TO_ADDR
38816: GO 38744
38818: POP
38819: POP
// if tmp then
38820: LD_VAR 0 19
38824: IFFALSE 38836
// f := tmp ;
38826: LD_ADDR_VAR 0 12
38830: PUSH
38831: LD_VAR 0 19
38835: ST_TO_ADDR
// end ; x := personel [ i ] ;
38836: LD_ADDR_VAR 0 13
38840: PUSH
38841: LD_VAR 0 6
38845: PUSH
38846: LD_VAR 0 8
38850: ARRAY
38851: ST_TO_ADDR
// if x = - 1 then
38852: LD_VAR 0 13
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: EQUAL
38861: IFFALSE 39070
// begin for j in f do
38863: LD_ADDR_VAR 0 9
38867: PUSH
38868: LD_VAR 0 12
38872: PUSH
38873: FOR_IN
38874: IFFALSE 39066
// repeat InitHc ;
38876: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38880: LD_VAR 0 9
38884: PPUSH
38885: CALL_OW 266
38889: PUSH
38890: LD_INT 5
38892: EQUAL
38893: IFFALSE 38963
// begin if UnitsInside ( j ) < 3 then
38895: LD_VAR 0 9
38899: PPUSH
38900: CALL_OW 313
38904: PUSH
38905: LD_INT 3
38907: LESS
38908: IFFALSE 38944
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38910: LD_INT 0
38912: PPUSH
38913: LD_INT 5
38915: PUSH
38916: LD_INT 8
38918: PUSH
38919: LD_INT 9
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: PUSH
38927: LD_VAR 0 17
38931: ARRAY
38932: PPUSH
38933: LD_VAR 0 4
38937: PPUSH
38938: CALL_OW 380
38942: GO 38961
// PrepareHuman ( false , i , skill ) ;
38944: LD_INT 0
38946: PPUSH
38947: LD_VAR 0 8
38951: PPUSH
38952: LD_VAR 0 4
38956: PPUSH
38957: CALL_OW 380
// end else
38961: GO 38980
// PrepareHuman ( false , i , skill ) ;
38963: LD_INT 0
38965: PPUSH
38966: LD_VAR 0 8
38970: PPUSH
38971: LD_VAR 0 4
38975: PPUSH
38976: CALL_OW 380
// un := CreateHuman ;
38980: LD_ADDR_VAR 0 14
38984: PUSH
38985: CALL_OW 44
38989: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38990: LD_ADDR_VAR 0 7
38994: PUSH
38995: LD_VAR 0 7
38999: PPUSH
39000: LD_INT 1
39002: PPUSH
39003: LD_VAR 0 14
39007: PPUSH
39008: CALL_OW 2
39012: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39013: LD_VAR 0 14
39017: PPUSH
39018: LD_VAR 0 9
39022: PPUSH
39023: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39027: LD_VAR 0 9
39031: PPUSH
39032: CALL_OW 313
39036: PUSH
39037: LD_INT 6
39039: EQUAL
39040: PUSH
39041: LD_VAR 0 9
39045: PPUSH
39046: CALL_OW 266
39050: PUSH
39051: LD_INT 32
39053: PUSH
39054: LD_INT 31
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: IN
39061: OR
39062: IFFALSE 38876
39064: GO 38873
39066: POP
39067: POP
// end else
39068: GO 39450
// for j = 1 to x do
39070: LD_ADDR_VAR 0 9
39074: PUSH
39075: DOUBLE
39076: LD_INT 1
39078: DEC
39079: ST_TO_ADDR
39080: LD_VAR 0 13
39084: PUSH
39085: FOR_TO
39086: IFFALSE 39448
// begin InitHc ;
39088: CALL_OW 19
// if not f then
39092: LD_VAR 0 12
39096: NOT
39097: IFFALSE 39186
// begin PrepareHuman ( false , i , skill ) ;
39099: LD_INT 0
39101: PPUSH
39102: LD_VAR 0 8
39106: PPUSH
39107: LD_VAR 0 4
39111: PPUSH
39112: CALL_OW 380
// un := CreateHuman ;
39116: LD_ADDR_VAR 0 14
39120: PUSH
39121: CALL_OW 44
39125: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39126: LD_ADDR_VAR 0 7
39130: PUSH
39131: LD_VAR 0 7
39135: PPUSH
39136: LD_INT 1
39138: PPUSH
39139: LD_VAR 0 14
39143: PPUSH
39144: CALL_OW 2
39148: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39149: LD_VAR 0 14
39153: PPUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: CALL_OW 250
39163: PPUSH
39164: LD_VAR 0 1
39168: PPUSH
39169: CALL_OW 251
39173: PPUSH
39174: LD_INT 10
39176: PPUSH
39177: LD_INT 0
39179: PPUSH
39180: CALL_OW 50
// continue ;
39184: GO 39085
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39186: LD_VAR 0 12
39190: PUSH
39191: LD_INT 1
39193: ARRAY
39194: PPUSH
39195: CALL_OW 313
39199: PUSH
39200: LD_VAR 0 12
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: CALL_OW 266
39213: PUSH
39214: LD_INT 32
39216: PUSH
39217: LD_INT 31
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: IN
39224: AND
39225: PUSH
39226: LD_VAR 0 12
39230: PUSH
39231: LD_INT 1
39233: ARRAY
39234: PPUSH
39235: CALL_OW 313
39239: PUSH
39240: LD_INT 6
39242: EQUAL
39243: OR
39244: IFFALSE 39264
// f := Delete ( f , 1 ) ;
39246: LD_ADDR_VAR 0 12
39250: PUSH
39251: LD_VAR 0 12
39255: PPUSH
39256: LD_INT 1
39258: PPUSH
39259: CALL_OW 3
39263: ST_TO_ADDR
// if not f then
39264: LD_VAR 0 12
39268: NOT
39269: IFFALSE 39287
// begin x := x + 2 ;
39271: LD_ADDR_VAR 0 13
39275: PUSH
39276: LD_VAR 0 13
39280: PUSH
39281: LD_INT 2
39283: PLUS
39284: ST_TO_ADDR
// continue ;
39285: GO 39085
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39287: LD_VAR 0 12
39291: PUSH
39292: LD_INT 1
39294: ARRAY
39295: PPUSH
39296: CALL_OW 266
39300: PUSH
39301: LD_INT 5
39303: EQUAL
39304: IFFALSE 39378
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39306: LD_VAR 0 12
39310: PUSH
39311: LD_INT 1
39313: ARRAY
39314: PPUSH
39315: CALL_OW 313
39319: PUSH
39320: LD_INT 3
39322: LESS
39323: IFFALSE 39359
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39325: LD_INT 0
39327: PPUSH
39328: LD_INT 5
39330: PUSH
39331: LD_INT 8
39333: PUSH
39334: LD_INT 9
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: PUSH
39342: LD_VAR 0 17
39346: ARRAY
39347: PPUSH
39348: LD_VAR 0 4
39352: PPUSH
39353: CALL_OW 380
39357: GO 39376
// PrepareHuman ( false , i , skill ) ;
39359: LD_INT 0
39361: PPUSH
39362: LD_VAR 0 8
39366: PPUSH
39367: LD_VAR 0 4
39371: PPUSH
39372: CALL_OW 380
// end else
39376: GO 39395
// PrepareHuman ( false , i , skill ) ;
39378: LD_INT 0
39380: PPUSH
39381: LD_VAR 0 8
39385: PPUSH
39386: LD_VAR 0 4
39390: PPUSH
39391: CALL_OW 380
// un := CreateHuman ;
39395: LD_ADDR_VAR 0 14
39399: PUSH
39400: CALL_OW 44
39404: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39405: LD_ADDR_VAR 0 7
39409: PUSH
39410: LD_VAR 0 7
39414: PPUSH
39415: LD_INT 1
39417: PPUSH
39418: LD_VAR 0 14
39422: PPUSH
39423: CALL_OW 2
39427: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39428: LD_VAR 0 14
39432: PPUSH
39433: LD_VAR 0 12
39437: PUSH
39438: LD_INT 1
39440: ARRAY
39441: PPUSH
39442: CALL_OW 52
// end ;
39446: GO 39085
39448: POP
39449: POP
// end ;
39450: GO 38387
39452: POP
39453: POP
// result := result ^ buildings ;
39454: LD_ADDR_VAR 0 7
39458: PUSH
39459: LD_VAR 0 7
39463: PUSH
39464: LD_VAR 0 18
39468: ADD
39469: ST_TO_ADDR
// end else
39470: GO 39613
// begin for i = 1 to personel do
39472: LD_ADDR_VAR 0 8
39476: PUSH
39477: DOUBLE
39478: LD_INT 1
39480: DEC
39481: ST_TO_ADDR
39482: LD_VAR 0 6
39486: PUSH
39487: FOR_TO
39488: IFFALSE 39611
// begin if i > 4 then
39490: LD_VAR 0 8
39494: PUSH
39495: LD_INT 4
39497: GREATER
39498: IFFALSE 39502
// break ;
39500: GO 39611
// x := personel [ i ] ;
39502: LD_ADDR_VAR 0 13
39506: PUSH
39507: LD_VAR 0 6
39511: PUSH
39512: LD_VAR 0 8
39516: ARRAY
39517: ST_TO_ADDR
// if x = - 1 then
39518: LD_VAR 0 13
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: EQUAL
39527: IFFALSE 39531
// continue ;
39529: GO 39487
// PrepareHuman ( false , i , skill ) ;
39531: LD_INT 0
39533: PPUSH
39534: LD_VAR 0 8
39538: PPUSH
39539: LD_VAR 0 4
39543: PPUSH
39544: CALL_OW 380
// un := CreateHuman ;
39548: LD_ADDR_VAR 0 14
39552: PUSH
39553: CALL_OW 44
39557: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39558: LD_VAR 0 14
39562: PPUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 250
39572: PPUSH
39573: LD_VAR 0 1
39577: PPUSH
39578: CALL_OW 251
39582: PPUSH
39583: LD_INT 10
39585: PPUSH
39586: LD_INT 0
39588: PPUSH
39589: CALL_OW 50
// result := result ^ un ;
39593: LD_ADDR_VAR 0 7
39597: PUSH
39598: LD_VAR 0 7
39602: PUSH
39603: LD_VAR 0 14
39607: ADD
39608: ST_TO_ADDR
// end ;
39609: GO 39487
39611: POP
39612: POP
// end ; end ;
39613: LD_VAR 0 7
39617: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39618: LD_INT 0
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
39633: PPUSH
39634: PPUSH
39635: PPUSH
// result := false ;
39636: LD_ADDR_VAR 0 3
39640: PUSH
39641: LD_INT 0
39643: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39644: LD_VAR 0 1
39648: NOT
39649: PUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 266
39659: PUSH
39660: LD_INT 32
39662: PUSH
39663: LD_INT 33
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: IN
39670: NOT
39671: OR
39672: IFFALSE 39676
// exit ;
39674: GO 40785
// nat := GetNation ( tower ) ;
39676: LD_ADDR_VAR 0 12
39680: PUSH
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 248
39690: ST_TO_ADDR
// side := GetSide ( tower ) ;
39691: LD_ADDR_VAR 0 16
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: CALL_OW 255
39705: ST_TO_ADDR
// x := GetX ( tower ) ;
39706: LD_ADDR_VAR 0 10
39710: PUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 250
39720: ST_TO_ADDR
// y := GetY ( tower ) ;
39721: LD_ADDR_VAR 0 11
39725: PUSH
39726: LD_VAR 0 1
39730: PPUSH
39731: CALL_OW 251
39735: ST_TO_ADDR
// if not x or not y then
39736: LD_VAR 0 10
39740: NOT
39741: PUSH
39742: LD_VAR 0 11
39746: NOT
39747: OR
39748: IFFALSE 39752
// exit ;
39750: GO 40785
// weapon := 0 ;
39752: LD_ADDR_VAR 0 18
39756: PUSH
39757: LD_INT 0
39759: ST_TO_ADDR
// fac_list := [ ] ;
39760: LD_ADDR_VAR 0 17
39764: PUSH
39765: EMPTY
39766: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39767: LD_ADDR_VAR 0 6
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 274
39781: PPUSH
39782: LD_VAR 0 2
39786: PPUSH
39787: LD_INT 0
39789: PPUSH
39790: CALL 37356 0 3
39794: PPUSH
39795: LD_INT 30
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PPUSH
39805: CALL_OW 72
39809: ST_TO_ADDR
// if not factories then
39810: LD_VAR 0 6
39814: NOT
39815: IFFALSE 39819
// exit ;
39817: GO 40785
// for i in factories do
39819: LD_ADDR_VAR 0 8
39823: PUSH
39824: LD_VAR 0 6
39828: PUSH
39829: FOR_IN
39830: IFFALSE 39855
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39832: LD_ADDR_VAR 0 17
39836: PUSH
39837: LD_VAR 0 17
39841: PUSH
39842: LD_VAR 0 8
39846: PPUSH
39847: CALL_OW 478
39851: UNION
39852: ST_TO_ADDR
39853: GO 39829
39855: POP
39856: POP
// if not fac_list then
39857: LD_VAR 0 17
39861: NOT
39862: IFFALSE 39866
// exit ;
39864: GO 40785
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39866: LD_ADDR_VAR 0 5
39870: PUSH
39871: LD_INT 4
39873: PUSH
39874: LD_INT 5
39876: PUSH
39877: LD_INT 9
39879: PUSH
39880: LD_INT 10
39882: PUSH
39883: LD_INT 6
39885: PUSH
39886: LD_INT 7
39888: PUSH
39889: LD_INT 11
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 27
39903: PUSH
39904: LD_INT 28
39906: PUSH
39907: LD_INT 26
39909: PUSH
39910: LD_INT 30
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 43
39921: PUSH
39922: LD_INT 44
39924: PUSH
39925: LD_INT 46
39927: PUSH
39928: LD_INT 45
39930: PUSH
39931: LD_INT 47
39933: PUSH
39934: LD_INT 49
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: PUSH
39950: LD_VAR 0 12
39954: ARRAY
39955: ST_TO_ADDR
// list := list isect fac_list ;
39956: LD_ADDR_VAR 0 5
39960: PUSH
39961: LD_VAR 0 5
39965: PUSH
39966: LD_VAR 0 17
39970: ISECT
39971: ST_TO_ADDR
// if not list then
39972: LD_VAR 0 5
39976: NOT
39977: IFFALSE 39981
// exit ;
39979: GO 40785
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39981: LD_VAR 0 12
39985: PUSH
39986: LD_INT 3
39988: EQUAL
39989: PUSH
39990: LD_INT 49
39992: PUSH
39993: LD_VAR 0 5
39997: IN
39998: AND
39999: PUSH
40000: LD_INT 31
40002: PPUSH
40003: LD_VAR 0 16
40007: PPUSH
40008: CALL_OW 321
40012: PUSH
40013: LD_INT 2
40015: EQUAL
40016: AND
40017: IFFALSE 40077
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40019: LD_INT 22
40021: PUSH
40022: LD_VAR 0 16
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 35
40033: PUSH
40034: LD_INT 49
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 91
40043: PUSH
40044: LD_VAR 0 1
40048: PUSH
40049: LD_INT 10
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: PPUSH
40062: CALL_OW 69
40066: NOT
40067: IFFALSE 40077
// weapon := ru_time_lapser ;
40069: LD_ADDR_VAR 0 18
40073: PUSH
40074: LD_INT 49
40076: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40077: LD_VAR 0 12
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: IN
40092: PUSH
40093: LD_INT 11
40095: PUSH
40096: LD_VAR 0 5
40100: IN
40101: PUSH
40102: LD_INT 30
40104: PUSH
40105: LD_VAR 0 5
40109: IN
40110: OR
40111: AND
40112: PUSH
40113: LD_INT 6
40115: PPUSH
40116: LD_VAR 0 16
40120: PPUSH
40121: CALL_OW 321
40125: PUSH
40126: LD_INT 2
40128: EQUAL
40129: AND
40130: IFFALSE 40295
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40132: LD_INT 22
40134: PUSH
40135: LD_VAR 0 16
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: LD_INT 35
40149: PUSH
40150: LD_INT 11
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 35
40159: PUSH
40160: LD_INT 30
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 91
40174: PUSH
40175: LD_VAR 0 1
40179: PUSH
40180: LD_INT 18
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: PPUSH
40193: CALL_OW 69
40197: NOT
40198: PUSH
40199: LD_INT 22
40201: PUSH
40202: LD_VAR 0 16
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 30
40216: PUSH
40217: LD_INT 32
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 30
40226: PUSH
40227: LD_INT 33
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 91
40241: PUSH
40242: LD_VAR 0 1
40246: PUSH
40247: LD_INT 12
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: PUSH
40260: EMPTY
40261: LIST
40262: PPUSH
40263: CALL_OW 69
40267: PUSH
40268: LD_INT 2
40270: GREATER
40271: AND
40272: IFFALSE 40295
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40274: LD_ADDR_VAR 0 18
40278: PUSH
40279: LD_INT 11
40281: PUSH
40282: LD_INT 30
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_VAR 0 12
40293: ARRAY
40294: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40295: LD_VAR 0 18
40299: NOT
40300: PUSH
40301: LD_INT 40
40303: PPUSH
40304: LD_VAR 0 16
40308: PPUSH
40309: CALL_OW 321
40313: PUSH
40314: LD_INT 2
40316: EQUAL
40317: AND
40318: PUSH
40319: LD_INT 7
40321: PUSH
40322: LD_VAR 0 5
40326: IN
40327: PUSH
40328: LD_INT 28
40330: PUSH
40331: LD_VAR 0 5
40335: IN
40336: OR
40337: PUSH
40338: LD_INT 45
40340: PUSH
40341: LD_VAR 0 5
40345: IN
40346: OR
40347: AND
40348: IFFALSE 40602
// begin hex := GetHexInfo ( x , y ) ;
40350: LD_ADDR_VAR 0 4
40354: PUSH
40355: LD_VAR 0 10
40359: PPUSH
40360: LD_VAR 0 11
40364: PPUSH
40365: CALL_OW 546
40369: ST_TO_ADDR
// if hex [ 1 ] then
40370: LD_VAR 0 4
40374: PUSH
40375: LD_INT 1
40377: ARRAY
40378: IFFALSE 40382
// exit ;
40380: GO 40785
// height := hex [ 2 ] ;
40382: LD_ADDR_VAR 0 15
40386: PUSH
40387: LD_VAR 0 4
40391: PUSH
40392: LD_INT 2
40394: ARRAY
40395: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40396: LD_ADDR_VAR 0 14
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 3
40409: PUSH
40410: LD_INT 5
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: ST_TO_ADDR
// for i in tmp do
40419: LD_ADDR_VAR 0 8
40423: PUSH
40424: LD_VAR 0 14
40428: PUSH
40429: FOR_IN
40430: IFFALSE 40600
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40432: LD_ADDR_VAR 0 9
40436: PUSH
40437: LD_VAR 0 10
40441: PPUSH
40442: LD_VAR 0 8
40446: PPUSH
40447: LD_INT 5
40449: PPUSH
40450: CALL_OW 272
40454: PUSH
40455: LD_VAR 0 11
40459: PPUSH
40460: LD_VAR 0 8
40464: PPUSH
40465: LD_INT 5
40467: PPUSH
40468: CALL_OW 273
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40477: LD_VAR 0 9
40481: PUSH
40482: LD_INT 1
40484: ARRAY
40485: PPUSH
40486: LD_VAR 0 9
40490: PUSH
40491: LD_INT 2
40493: ARRAY
40494: PPUSH
40495: CALL_OW 488
40499: IFFALSE 40598
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40501: LD_ADDR_VAR 0 4
40505: PUSH
40506: LD_VAR 0 9
40510: PUSH
40511: LD_INT 1
40513: ARRAY
40514: PPUSH
40515: LD_VAR 0 9
40519: PUSH
40520: LD_INT 2
40522: ARRAY
40523: PPUSH
40524: CALL_OW 546
40528: ST_TO_ADDR
// if hex [ 1 ] then
40529: LD_VAR 0 4
40533: PUSH
40534: LD_INT 1
40536: ARRAY
40537: IFFALSE 40541
// continue ;
40539: GO 40429
// h := hex [ 2 ] ;
40541: LD_ADDR_VAR 0 13
40545: PUSH
40546: LD_VAR 0 4
40550: PUSH
40551: LD_INT 2
40553: ARRAY
40554: ST_TO_ADDR
// if h + 7 < height then
40555: LD_VAR 0 13
40559: PUSH
40560: LD_INT 7
40562: PLUS
40563: PUSH
40564: LD_VAR 0 15
40568: LESS
40569: IFFALSE 40598
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40571: LD_ADDR_VAR 0 18
40575: PUSH
40576: LD_INT 7
40578: PUSH
40579: LD_INT 28
40581: PUSH
40582: LD_INT 45
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: PUSH
40590: LD_VAR 0 12
40594: ARRAY
40595: ST_TO_ADDR
// break ;
40596: GO 40600
// end ; end ; end ;
40598: GO 40429
40600: POP
40601: POP
// end ; if not weapon then
40602: LD_VAR 0 18
40606: NOT
40607: IFFALSE 40667
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40609: LD_ADDR_VAR 0 5
40613: PUSH
40614: LD_VAR 0 5
40618: PUSH
40619: LD_INT 11
40621: PUSH
40622: LD_INT 30
40624: PUSH
40625: LD_INT 49
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: DIFF
40633: ST_TO_ADDR
// if not list then
40634: LD_VAR 0 5
40638: NOT
40639: IFFALSE 40643
// exit ;
40641: GO 40785
// weapon := list [ rand ( 1 , list ) ] ;
40643: LD_ADDR_VAR 0 18
40647: PUSH
40648: LD_VAR 0 5
40652: PUSH
40653: LD_INT 1
40655: PPUSH
40656: LD_VAR 0 5
40660: PPUSH
40661: CALL_OW 12
40665: ARRAY
40666: ST_TO_ADDR
// end ; if weapon then
40667: LD_VAR 0 18
40671: IFFALSE 40785
// begin tmp := CostOfWeapon ( weapon ) ;
40673: LD_ADDR_VAR 0 14
40677: PUSH
40678: LD_VAR 0 18
40682: PPUSH
40683: CALL_OW 451
40687: ST_TO_ADDR
// j := GetBase ( tower ) ;
40688: LD_ADDR_VAR 0 9
40692: PUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: CALL_OW 274
40702: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40703: LD_VAR 0 9
40707: PPUSH
40708: LD_INT 1
40710: PPUSH
40711: CALL_OW 275
40715: PUSH
40716: LD_VAR 0 14
40720: PUSH
40721: LD_INT 1
40723: ARRAY
40724: GREATEREQUAL
40725: PUSH
40726: LD_VAR 0 9
40730: PPUSH
40731: LD_INT 2
40733: PPUSH
40734: CALL_OW 275
40738: PUSH
40739: LD_VAR 0 14
40743: PUSH
40744: LD_INT 2
40746: ARRAY
40747: GREATEREQUAL
40748: AND
40749: PUSH
40750: LD_VAR 0 9
40754: PPUSH
40755: LD_INT 3
40757: PPUSH
40758: CALL_OW 275
40762: PUSH
40763: LD_VAR 0 14
40767: PUSH
40768: LD_INT 3
40770: ARRAY
40771: GREATEREQUAL
40772: AND
40773: IFFALSE 40785
// result := weapon ;
40775: LD_ADDR_VAR 0 3
40779: PUSH
40780: LD_VAR 0 18
40784: ST_TO_ADDR
// end ; end ;
40785: LD_VAR 0 3
40789: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
// result := true ;
40794: LD_ADDR_VAR 0 3
40798: PUSH
40799: LD_INT 1
40801: ST_TO_ADDR
// if array1 = array2 then
40802: LD_VAR 0 1
40806: PUSH
40807: LD_VAR 0 2
40811: EQUAL
40812: IFFALSE 40872
// begin for i = 1 to array1 do
40814: LD_ADDR_VAR 0 4
40818: PUSH
40819: DOUBLE
40820: LD_INT 1
40822: DEC
40823: ST_TO_ADDR
40824: LD_VAR 0 1
40828: PUSH
40829: FOR_TO
40830: IFFALSE 40868
// if array1 [ i ] <> array2 [ i ] then
40832: LD_VAR 0 1
40836: PUSH
40837: LD_VAR 0 4
40841: ARRAY
40842: PUSH
40843: LD_VAR 0 2
40847: PUSH
40848: LD_VAR 0 4
40852: ARRAY
40853: NONEQUAL
40854: IFFALSE 40866
// begin result := false ;
40856: LD_ADDR_VAR 0 3
40860: PUSH
40861: LD_INT 0
40863: ST_TO_ADDR
// break ;
40864: GO 40868
// end ;
40866: GO 40829
40868: POP
40869: POP
// end else
40870: GO 40880
// result := false ;
40872: LD_ADDR_VAR 0 3
40876: PUSH
40877: LD_INT 0
40879: ST_TO_ADDR
// end ;
40880: LD_VAR 0 3
40884: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40885: LD_INT 0
40887: PPUSH
40888: PPUSH
// if not array1 or not array2 then
40889: LD_VAR 0 1
40893: NOT
40894: PUSH
40895: LD_VAR 0 2
40899: NOT
40900: OR
40901: IFFALSE 40905
// exit ;
40903: GO 40969
// result := true ;
40905: LD_ADDR_VAR 0 3
40909: PUSH
40910: LD_INT 1
40912: ST_TO_ADDR
// for i = 1 to array1 do
40913: LD_ADDR_VAR 0 4
40917: PUSH
40918: DOUBLE
40919: LD_INT 1
40921: DEC
40922: ST_TO_ADDR
40923: LD_VAR 0 1
40927: PUSH
40928: FOR_TO
40929: IFFALSE 40967
// if array1 [ i ] <> array2 [ i ] then
40931: LD_VAR 0 1
40935: PUSH
40936: LD_VAR 0 4
40940: ARRAY
40941: PUSH
40942: LD_VAR 0 2
40946: PUSH
40947: LD_VAR 0 4
40951: ARRAY
40952: NONEQUAL
40953: IFFALSE 40965
// begin result := false ;
40955: LD_ADDR_VAR 0 3
40959: PUSH
40960: LD_INT 0
40962: ST_TO_ADDR
// break ;
40963: GO 40967
// end ;
40965: GO 40928
40967: POP
40968: POP
// end ;
40969: LD_VAR 0 3
40973: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40974: LD_INT 0
40976: PPUSH
40977: PPUSH
40978: PPUSH
// pom := GetBase ( fac ) ;
40979: LD_ADDR_VAR 0 5
40983: PUSH
40984: LD_VAR 0 1
40988: PPUSH
40989: CALL_OW 274
40993: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40994: LD_ADDR_VAR 0 4
40998: PUSH
40999: LD_VAR 0 2
41003: PUSH
41004: LD_INT 1
41006: ARRAY
41007: PPUSH
41008: LD_VAR 0 2
41012: PUSH
41013: LD_INT 2
41015: ARRAY
41016: PPUSH
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 3
41024: ARRAY
41025: PPUSH
41026: LD_VAR 0 2
41030: PUSH
41031: LD_INT 4
41033: ARRAY
41034: PPUSH
41035: CALL_OW 449
41039: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_VAR 0 5
41049: PPUSH
41050: LD_INT 1
41052: PPUSH
41053: CALL_OW 275
41057: PUSH
41058: LD_VAR 0 4
41062: PUSH
41063: LD_INT 1
41065: ARRAY
41066: GREATEREQUAL
41067: PUSH
41068: LD_VAR 0 5
41072: PPUSH
41073: LD_INT 2
41075: PPUSH
41076: CALL_OW 275
41080: PUSH
41081: LD_VAR 0 4
41085: PUSH
41086: LD_INT 2
41088: ARRAY
41089: GREATEREQUAL
41090: AND
41091: PUSH
41092: LD_VAR 0 5
41096: PPUSH
41097: LD_INT 3
41099: PPUSH
41100: CALL_OW 275
41104: PUSH
41105: LD_VAR 0 4
41109: PUSH
41110: LD_INT 3
41112: ARRAY
41113: GREATEREQUAL
41114: AND
41115: ST_TO_ADDR
// end ;
41116: LD_VAR 0 3
41120: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41121: LD_INT 0
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
// pom := GetBase ( building ) ;
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 274
41141: ST_TO_ADDR
// if not pom then
41142: LD_VAR 0 3
41146: NOT
41147: IFFALSE 41151
// exit ;
41149: GO 41321
// btype := GetBType ( building ) ;
41151: LD_ADDR_VAR 0 5
41155: PUSH
41156: LD_VAR 0 1
41160: PPUSH
41161: CALL_OW 266
41165: ST_TO_ADDR
// if btype = b_armoury then
41166: LD_VAR 0 5
41170: PUSH
41171: LD_INT 4
41173: EQUAL
41174: IFFALSE 41184
// btype := b_barracks ;
41176: LD_ADDR_VAR 0 5
41180: PUSH
41181: LD_INT 5
41183: ST_TO_ADDR
// if btype = b_depot then
41184: LD_VAR 0 5
41188: PUSH
41189: LD_INT 0
41191: EQUAL
41192: IFFALSE 41202
// btype := b_warehouse ;
41194: LD_ADDR_VAR 0 5
41198: PUSH
41199: LD_INT 1
41201: ST_TO_ADDR
// if btype = b_workshop then
41202: LD_VAR 0 5
41206: PUSH
41207: LD_INT 2
41209: EQUAL
41210: IFFALSE 41220
// btype := b_factory ;
41212: LD_ADDR_VAR 0 5
41216: PUSH
41217: LD_INT 3
41219: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41220: LD_ADDR_VAR 0 4
41224: PUSH
41225: LD_VAR 0 5
41229: PPUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 248
41239: PPUSH
41240: CALL_OW 450
41244: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41245: LD_ADDR_VAR 0 2
41249: PUSH
41250: LD_VAR 0 3
41254: PPUSH
41255: LD_INT 1
41257: PPUSH
41258: CALL_OW 275
41262: PUSH
41263: LD_VAR 0 4
41267: PUSH
41268: LD_INT 1
41270: ARRAY
41271: GREATEREQUAL
41272: PUSH
41273: LD_VAR 0 3
41277: PPUSH
41278: LD_INT 2
41280: PPUSH
41281: CALL_OW 275
41285: PUSH
41286: LD_VAR 0 4
41290: PUSH
41291: LD_INT 2
41293: ARRAY
41294: GREATEREQUAL
41295: AND
41296: PUSH
41297: LD_VAR 0 3
41301: PPUSH
41302: LD_INT 3
41304: PPUSH
41305: CALL_OW 275
41309: PUSH
41310: LD_VAR 0 4
41314: PUSH
41315: LD_INT 3
41317: ARRAY
41318: GREATEREQUAL
41319: AND
41320: ST_TO_ADDR
// end ;
41321: LD_VAR 0 2
41325: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41326: LD_INT 0
41328: PPUSH
41329: PPUSH
41330: PPUSH
// pom := GetBase ( building ) ;
41331: LD_ADDR_VAR 0 4
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 274
41345: ST_TO_ADDR
// if not pom then
41346: LD_VAR 0 4
41350: NOT
41351: IFFALSE 41355
// exit ;
41353: GO 41456
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41355: LD_ADDR_VAR 0 5
41359: PUSH
41360: LD_VAR 0 2
41364: PPUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: CALL_OW 248
41374: PPUSH
41375: CALL_OW 450
41379: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41380: LD_ADDR_VAR 0 3
41384: PUSH
41385: LD_VAR 0 4
41389: PPUSH
41390: LD_INT 1
41392: PPUSH
41393: CALL_OW 275
41397: PUSH
41398: LD_VAR 0 5
41402: PUSH
41403: LD_INT 1
41405: ARRAY
41406: GREATEREQUAL
41407: PUSH
41408: LD_VAR 0 4
41412: PPUSH
41413: LD_INT 2
41415: PPUSH
41416: CALL_OW 275
41420: PUSH
41421: LD_VAR 0 5
41425: PUSH
41426: LD_INT 2
41428: ARRAY
41429: GREATEREQUAL
41430: AND
41431: PUSH
41432: LD_VAR 0 4
41436: PPUSH
41437: LD_INT 3
41439: PPUSH
41440: CALL_OW 275
41444: PUSH
41445: LD_VAR 0 5
41449: PUSH
41450: LD_INT 3
41452: ARRAY
41453: GREATEREQUAL
41454: AND
41455: ST_TO_ADDR
// end ;
41456: LD_VAR 0 3
41460: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41461: LD_INT 0
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
// result := false ;
41474: LD_ADDR_VAR 0 8
41478: PUSH
41479: LD_INT 0
41481: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41482: LD_VAR 0 5
41486: NOT
41487: PUSH
41488: LD_VAR 0 1
41492: NOT
41493: OR
41494: PUSH
41495: LD_VAR 0 2
41499: NOT
41500: OR
41501: PUSH
41502: LD_VAR 0 3
41506: NOT
41507: OR
41508: IFFALSE 41512
// exit ;
41510: GO 42326
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41512: LD_ADDR_VAR 0 14
41516: PUSH
41517: LD_VAR 0 1
41521: PPUSH
41522: LD_VAR 0 2
41526: PPUSH
41527: LD_VAR 0 3
41531: PPUSH
41532: LD_VAR 0 4
41536: PPUSH
41537: LD_VAR 0 5
41541: PUSH
41542: LD_INT 1
41544: ARRAY
41545: PPUSH
41546: CALL_OW 248
41550: PPUSH
41551: LD_INT 0
41553: PPUSH
41554: CALL 43579 0 6
41558: ST_TO_ADDR
// if not hexes then
41559: LD_VAR 0 14
41563: NOT
41564: IFFALSE 41568
// exit ;
41566: GO 42326
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41568: LD_ADDR_VAR 0 17
41572: PUSH
41573: LD_VAR 0 5
41577: PPUSH
41578: LD_INT 22
41580: PUSH
41581: LD_VAR 0 13
41585: PPUSH
41586: CALL_OW 255
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 30
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 30
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PPUSH
41627: CALL_OW 72
41631: ST_TO_ADDR
// for i = 1 to hexes do
41632: LD_ADDR_VAR 0 9
41636: PUSH
41637: DOUBLE
41638: LD_INT 1
41640: DEC
41641: ST_TO_ADDR
41642: LD_VAR 0 14
41646: PUSH
41647: FOR_TO
41648: IFFALSE 42324
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41650: LD_ADDR_VAR 0 13
41654: PUSH
41655: LD_VAR 0 14
41659: PUSH
41660: LD_VAR 0 9
41664: ARRAY
41665: PUSH
41666: LD_INT 1
41668: ARRAY
41669: PPUSH
41670: LD_VAR 0 14
41674: PUSH
41675: LD_VAR 0 9
41679: ARRAY
41680: PUSH
41681: LD_INT 2
41683: ARRAY
41684: PPUSH
41685: CALL_OW 428
41689: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41690: LD_VAR 0 14
41694: PUSH
41695: LD_VAR 0 9
41699: ARRAY
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: PPUSH
41705: LD_VAR 0 14
41709: PUSH
41710: LD_VAR 0 9
41714: ARRAY
41715: PUSH
41716: LD_INT 2
41718: ARRAY
41719: PPUSH
41720: CALL_OW 351
41724: PUSH
41725: LD_VAR 0 14
41729: PUSH
41730: LD_VAR 0 9
41734: ARRAY
41735: PUSH
41736: LD_INT 1
41738: ARRAY
41739: PPUSH
41740: LD_VAR 0 14
41744: PUSH
41745: LD_VAR 0 9
41749: ARRAY
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: PPUSH
41755: CALL_OW 488
41759: NOT
41760: OR
41761: PUSH
41762: LD_VAR 0 13
41766: PPUSH
41767: CALL_OW 247
41771: PUSH
41772: LD_INT 3
41774: EQUAL
41775: OR
41776: IFFALSE 41782
// exit ;
41778: POP
41779: POP
41780: GO 42326
// if not tmp then
41782: LD_VAR 0 13
41786: NOT
41787: IFFALSE 41791
// continue ;
41789: GO 41647
// result := true ;
41791: LD_ADDR_VAR 0 8
41795: PUSH
41796: LD_INT 1
41798: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41799: LD_VAR 0 6
41803: PUSH
41804: LD_VAR 0 13
41808: PPUSH
41809: CALL_OW 247
41813: PUSH
41814: LD_INT 2
41816: EQUAL
41817: AND
41818: PUSH
41819: LD_VAR 0 13
41823: PPUSH
41824: CALL_OW 263
41828: PUSH
41829: LD_INT 1
41831: EQUAL
41832: AND
41833: IFFALSE 41997
// begin if IsDrivenBy ( tmp ) then
41835: LD_VAR 0 13
41839: PPUSH
41840: CALL_OW 311
41844: IFFALSE 41848
// continue ;
41846: GO 41647
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41848: LD_VAR 0 6
41852: PPUSH
41853: LD_INT 3
41855: PUSH
41856: LD_INT 60
41858: PUSH
41859: EMPTY
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 3
41868: PUSH
41869: LD_INT 55
41871: PUSH
41872: EMPTY
41873: LIST
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PPUSH
41883: CALL_OW 72
41887: IFFALSE 41995
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41889: LD_ADDR_VAR 0 18
41893: PUSH
41894: LD_VAR 0 6
41898: PPUSH
41899: LD_INT 3
41901: PUSH
41902: LD_INT 60
41904: PUSH
41905: EMPTY
41906: LIST
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 3
41914: PUSH
41915: LD_INT 55
41917: PUSH
41918: EMPTY
41919: LIST
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PPUSH
41929: CALL_OW 72
41933: PUSH
41934: LD_INT 1
41936: ARRAY
41937: ST_TO_ADDR
// if IsInUnit ( driver ) then
41938: LD_VAR 0 18
41942: PPUSH
41943: CALL_OW 310
41947: IFFALSE 41958
// ComExit ( driver ) ;
41949: LD_VAR 0 18
41953: PPUSH
41954: CALL 67360 0 1
// AddComEnterUnit ( driver , tmp ) ;
41958: LD_VAR 0 18
41962: PPUSH
41963: LD_VAR 0 13
41967: PPUSH
41968: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41972: LD_VAR 0 18
41976: PPUSH
41977: LD_VAR 0 7
41981: PPUSH
41982: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41986: LD_VAR 0 18
41990: PPUSH
41991: CALL_OW 181
// end ; continue ;
41995: GO 41647
// end ; if not cleaners or not tmp in cleaners then
41997: LD_VAR 0 6
42001: NOT
42002: PUSH
42003: LD_VAR 0 13
42007: PUSH
42008: LD_VAR 0 6
42012: IN
42013: NOT
42014: OR
42015: IFFALSE 42322
// begin if dep then
42017: LD_VAR 0 17
42021: IFFALSE 42157
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42023: LD_ADDR_VAR 0 16
42027: PUSH
42028: LD_VAR 0 17
42032: PUSH
42033: LD_INT 1
42035: ARRAY
42036: PPUSH
42037: CALL_OW 250
42041: PPUSH
42042: LD_VAR 0 17
42046: PUSH
42047: LD_INT 1
42049: ARRAY
42050: PPUSH
42051: CALL_OW 254
42055: PPUSH
42056: LD_INT 5
42058: PPUSH
42059: CALL_OW 272
42063: PUSH
42064: LD_VAR 0 17
42068: PUSH
42069: LD_INT 1
42071: ARRAY
42072: PPUSH
42073: CALL_OW 251
42077: PPUSH
42078: LD_VAR 0 17
42082: PUSH
42083: LD_INT 1
42085: ARRAY
42086: PPUSH
42087: CALL_OW 254
42091: PPUSH
42092: LD_INT 5
42094: PPUSH
42095: CALL_OW 273
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42104: LD_VAR 0 16
42108: PUSH
42109: LD_INT 1
42111: ARRAY
42112: PPUSH
42113: LD_VAR 0 16
42117: PUSH
42118: LD_INT 2
42120: ARRAY
42121: PPUSH
42122: CALL_OW 488
42126: IFFALSE 42157
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42128: LD_VAR 0 13
42132: PPUSH
42133: LD_VAR 0 16
42137: PUSH
42138: LD_INT 1
42140: ARRAY
42141: PPUSH
42142: LD_VAR 0 16
42146: PUSH
42147: LD_INT 2
42149: ARRAY
42150: PPUSH
42151: CALL_OW 111
// continue ;
42155: GO 41647
// end ; end ; r := GetDir ( tmp ) ;
42157: LD_ADDR_VAR 0 15
42161: PUSH
42162: LD_VAR 0 13
42166: PPUSH
42167: CALL_OW 254
42171: ST_TO_ADDR
// if r = 5 then
42172: LD_VAR 0 15
42176: PUSH
42177: LD_INT 5
42179: EQUAL
42180: IFFALSE 42190
// r := 0 ;
42182: LD_ADDR_VAR 0 15
42186: PUSH
42187: LD_INT 0
42189: ST_TO_ADDR
// for j = r to 5 do
42190: LD_ADDR_VAR 0 10
42194: PUSH
42195: DOUBLE
42196: LD_VAR 0 15
42200: DEC
42201: ST_TO_ADDR
42202: LD_INT 5
42204: PUSH
42205: FOR_TO
42206: IFFALSE 42320
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42208: LD_ADDR_VAR 0 11
42212: PUSH
42213: LD_VAR 0 13
42217: PPUSH
42218: CALL_OW 250
42222: PPUSH
42223: LD_VAR 0 10
42227: PPUSH
42228: LD_INT 2
42230: PPUSH
42231: CALL_OW 272
42235: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42236: LD_ADDR_VAR 0 12
42240: PUSH
42241: LD_VAR 0 13
42245: PPUSH
42246: CALL_OW 251
42250: PPUSH
42251: LD_VAR 0 10
42255: PPUSH
42256: LD_INT 2
42258: PPUSH
42259: CALL_OW 273
42263: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42264: LD_VAR 0 11
42268: PPUSH
42269: LD_VAR 0 12
42273: PPUSH
42274: CALL_OW 488
42278: PUSH
42279: LD_VAR 0 11
42283: PPUSH
42284: LD_VAR 0 12
42288: PPUSH
42289: CALL_OW 428
42293: NOT
42294: AND
42295: IFFALSE 42318
// begin ComMoveXY ( tmp , _x , _y ) ;
42297: LD_VAR 0 13
42301: PPUSH
42302: LD_VAR 0 11
42306: PPUSH
42307: LD_VAR 0 12
42311: PPUSH
42312: CALL_OW 111
// break ;
42316: GO 42320
// end ; end ;
42318: GO 42205
42320: POP
42321: POP
// end ; end ;
42322: GO 41647
42324: POP
42325: POP
// end ;
42326: LD_VAR 0 8
42330: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42331: LD_INT 0
42333: PPUSH
// result := true ;
42334: LD_ADDR_VAR 0 3
42338: PUSH
42339: LD_INT 1
42341: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42342: LD_VAR 0 2
42346: PUSH
42347: LD_INT 24
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42361
42353: LD_INT 33
42355: DOUBLE
42356: EQUAL
42357: IFTRUE 42361
42359: GO 42386
42361: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42362: LD_ADDR_VAR 0 3
42366: PUSH
42367: LD_INT 32
42369: PPUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: CALL_OW 321
42379: PUSH
42380: LD_INT 2
42382: EQUAL
42383: ST_TO_ADDR
42384: GO 42702
42386: LD_INT 20
42388: DOUBLE
42389: EQUAL
42390: IFTRUE 42394
42392: GO 42419
42394: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_INT 6
42402: PPUSH
42403: LD_VAR 0 1
42407: PPUSH
42408: CALL_OW 321
42412: PUSH
42413: LD_INT 2
42415: EQUAL
42416: ST_TO_ADDR
42417: GO 42702
42419: LD_INT 22
42421: DOUBLE
42422: EQUAL
42423: IFTRUE 42433
42425: LD_INT 36
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42433
42431: GO 42458
42433: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_INT 15
42441: PPUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 321
42451: PUSH
42452: LD_INT 2
42454: EQUAL
42455: ST_TO_ADDR
42456: GO 42702
42458: LD_INT 30
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42466
42464: GO 42491
42466: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_INT 20
42474: PPUSH
42475: LD_VAR 0 1
42479: PPUSH
42480: CALL_OW 321
42484: PUSH
42485: LD_INT 2
42487: EQUAL
42488: ST_TO_ADDR
42489: GO 42702
42491: LD_INT 28
42493: DOUBLE
42494: EQUAL
42495: IFTRUE 42505
42497: LD_INT 21
42499: DOUBLE
42500: EQUAL
42501: IFTRUE 42505
42503: GO 42530
42505: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42506: LD_ADDR_VAR 0 3
42510: PUSH
42511: LD_INT 21
42513: PPUSH
42514: LD_VAR 0 1
42518: PPUSH
42519: CALL_OW 321
42523: PUSH
42524: LD_INT 2
42526: EQUAL
42527: ST_TO_ADDR
42528: GO 42702
42530: LD_INT 16
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42538
42536: GO 42563
42538: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_INT 84
42546: PPUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: CALL_OW 321
42556: PUSH
42557: LD_INT 2
42559: EQUAL
42560: ST_TO_ADDR
42561: GO 42702
42563: LD_INT 19
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42577
42569: LD_INT 23
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42577
42575: GO 42602
42577: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42578: LD_ADDR_VAR 0 3
42582: PUSH
42583: LD_INT 83
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 321
42595: PUSH
42596: LD_INT 2
42598: EQUAL
42599: ST_TO_ADDR
42600: GO 42702
42602: LD_INT 17
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42635
42610: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 39
42618: PPUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: CALL_OW 321
42628: PUSH
42629: LD_INT 2
42631: EQUAL
42632: ST_TO_ADDR
42633: GO 42702
42635: LD_INT 18
42637: DOUBLE
42638: EQUAL
42639: IFTRUE 42643
42641: GO 42668
42643: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42644: LD_ADDR_VAR 0 3
42648: PUSH
42649: LD_INT 40
42651: PPUSH
42652: LD_VAR 0 1
42656: PPUSH
42657: CALL_OW 321
42661: PUSH
42662: LD_INT 2
42664: EQUAL
42665: ST_TO_ADDR
42666: GO 42702
42668: LD_INT 27
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42676
42674: GO 42701
42676: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42677: LD_ADDR_VAR 0 3
42681: PUSH
42682: LD_INT 35
42684: PPUSH
42685: LD_VAR 0 1
42689: PPUSH
42690: CALL_OW 321
42694: PUSH
42695: LD_INT 2
42697: EQUAL
42698: ST_TO_ADDR
42699: GO 42702
42701: POP
// end ;
42702: LD_VAR 0 3
42706: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42707: LD_INT 0
42709: PPUSH
42710: PPUSH
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
// result := false ;
42720: LD_ADDR_VAR 0 6
42724: PUSH
42725: LD_INT 0
42727: ST_TO_ADDR
// if btype = b_depot then
42728: LD_VAR 0 2
42732: PUSH
42733: LD_INT 0
42735: EQUAL
42736: IFFALSE 42748
// begin result := true ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_INT 1
42745: ST_TO_ADDR
// exit ;
42746: GO 43574
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42748: LD_VAR 0 1
42752: NOT
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 266
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: IN
42774: NOT
42775: OR
42776: PUSH
42777: LD_VAR 0 2
42781: NOT
42782: OR
42783: PUSH
42784: LD_VAR 0 5
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: LD_INT 4
42803: PUSH
42804: LD_INT 5
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: IN
42815: NOT
42816: OR
42817: PUSH
42818: LD_VAR 0 3
42822: PPUSH
42823: LD_VAR 0 4
42827: PPUSH
42828: CALL_OW 488
42832: NOT
42833: OR
42834: IFFALSE 42838
// exit ;
42836: GO 43574
// side := GetSide ( depot ) ;
42838: LD_ADDR_VAR 0 9
42842: PUSH
42843: LD_VAR 0 1
42847: PPUSH
42848: CALL_OW 255
42852: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42853: LD_VAR 0 9
42857: PPUSH
42858: LD_VAR 0 2
42862: PPUSH
42863: CALL 42331 0 2
42867: NOT
42868: IFFALSE 42872
// exit ;
42870: GO 43574
// pom := GetBase ( depot ) ;
42872: LD_ADDR_VAR 0 10
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 274
42886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42887: LD_ADDR_VAR 0 11
42891: PUSH
42892: LD_VAR 0 2
42896: PPUSH
42897: LD_VAR 0 1
42901: PPUSH
42902: CALL_OW 248
42906: PPUSH
42907: CALL_OW 450
42911: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42912: LD_VAR 0 10
42916: PPUSH
42917: LD_INT 1
42919: PPUSH
42920: CALL_OW 275
42924: PUSH
42925: LD_VAR 0 11
42929: PUSH
42930: LD_INT 1
42932: ARRAY
42933: GREATEREQUAL
42934: PUSH
42935: LD_VAR 0 10
42939: PPUSH
42940: LD_INT 2
42942: PPUSH
42943: CALL_OW 275
42947: PUSH
42948: LD_VAR 0 11
42952: PUSH
42953: LD_INT 2
42955: ARRAY
42956: GREATEREQUAL
42957: AND
42958: PUSH
42959: LD_VAR 0 10
42963: PPUSH
42964: LD_INT 3
42966: PPUSH
42967: CALL_OW 275
42971: PUSH
42972: LD_VAR 0 11
42976: PUSH
42977: LD_INT 3
42979: ARRAY
42980: GREATEREQUAL
42981: AND
42982: NOT
42983: IFFALSE 42987
// exit ;
42985: GO 43574
// if GetBType ( depot ) = b_depot then
42987: LD_VAR 0 1
42991: PPUSH
42992: CALL_OW 266
42996: PUSH
42997: LD_INT 0
42999: EQUAL
43000: IFFALSE 43012
// dist := 28 else
43002: LD_ADDR_VAR 0 14
43006: PUSH
43007: LD_INT 28
43009: ST_TO_ADDR
43010: GO 43020
// dist := 36 ;
43012: LD_ADDR_VAR 0 14
43016: PUSH
43017: LD_INT 36
43019: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43020: LD_VAR 0 1
43024: PPUSH
43025: LD_VAR 0 3
43029: PPUSH
43030: LD_VAR 0 4
43034: PPUSH
43035: CALL_OW 297
43039: PUSH
43040: LD_VAR 0 14
43044: GREATER
43045: IFFALSE 43049
// exit ;
43047: GO 43574
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43049: LD_ADDR_VAR 0 12
43053: PUSH
43054: LD_VAR 0 2
43058: PPUSH
43059: LD_VAR 0 3
43063: PPUSH
43064: LD_VAR 0 4
43068: PPUSH
43069: LD_VAR 0 5
43073: PPUSH
43074: LD_VAR 0 1
43078: PPUSH
43079: CALL_OW 248
43083: PPUSH
43084: LD_INT 0
43086: PPUSH
43087: CALL 43579 0 6
43091: ST_TO_ADDR
// if not hexes then
43092: LD_VAR 0 12
43096: NOT
43097: IFFALSE 43101
// exit ;
43099: GO 43574
// hex := GetHexInfo ( x , y ) ;
43101: LD_ADDR_VAR 0 15
43105: PUSH
43106: LD_VAR 0 3
43110: PPUSH
43111: LD_VAR 0 4
43115: PPUSH
43116: CALL_OW 546
43120: ST_TO_ADDR
// if hex [ 1 ] then
43121: LD_VAR 0 15
43125: PUSH
43126: LD_INT 1
43128: ARRAY
43129: IFFALSE 43133
// exit ;
43131: GO 43574
// height := hex [ 2 ] ;
43133: LD_ADDR_VAR 0 13
43137: PUSH
43138: LD_VAR 0 15
43142: PUSH
43143: LD_INT 2
43145: ARRAY
43146: ST_TO_ADDR
// for i = 1 to hexes do
43147: LD_ADDR_VAR 0 7
43151: PUSH
43152: DOUBLE
43153: LD_INT 1
43155: DEC
43156: ST_TO_ADDR
43157: LD_VAR 0 12
43161: PUSH
43162: FOR_TO
43163: IFFALSE 43493
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43165: LD_VAR 0 12
43169: PUSH
43170: LD_VAR 0 7
43174: ARRAY
43175: PUSH
43176: LD_INT 1
43178: ARRAY
43179: PPUSH
43180: LD_VAR 0 12
43184: PUSH
43185: LD_VAR 0 7
43189: ARRAY
43190: PUSH
43191: LD_INT 2
43193: ARRAY
43194: PPUSH
43195: CALL_OW 488
43199: NOT
43200: PUSH
43201: LD_VAR 0 12
43205: PUSH
43206: LD_VAR 0 7
43210: ARRAY
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: PPUSH
43216: LD_VAR 0 12
43220: PUSH
43221: LD_VAR 0 7
43225: ARRAY
43226: PUSH
43227: LD_INT 2
43229: ARRAY
43230: PPUSH
43231: CALL_OW 428
43235: PUSH
43236: LD_INT 0
43238: GREATER
43239: OR
43240: PUSH
43241: LD_VAR 0 12
43245: PUSH
43246: LD_VAR 0 7
43250: ARRAY
43251: PUSH
43252: LD_INT 1
43254: ARRAY
43255: PPUSH
43256: LD_VAR 0 12
43260: PUSH
43261: LD_VAR 0 7
43265: ARRAY
43266: PUSH
43267: LD_INT 2
43269: ARRAY
43270: PPUSH
43271: CALL_OW 351
43275: OR
43276: IFFALSE 43282
// exit ;
43278: POP
43279: POP
43280: GO 43574
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43282: LD_ADDR_VAR 0 8
43286: PUSH
43287: LD_VAR 0 12
43291: PUSH
43292: LD_VAR 0 7
43296: ARRAY
43297: PUSH
43298: LD_INT 1
43300: ARRAY
43301: PPUSH
43302: LD_VAR 0 12
43306: PUSH
43307: LD_VAR 0 7
43311: ARRAY
43312: PUSH
43313: LD_INT 2
43315: ARRAY
43316: PPUSH
43317: CALL_OW 546
43321: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43322: LD_VAR 0 8
43326: PUSH
43327: LD_INT 1
43329: ARRAY
43330: PUSH
43331: LD_VAR 0 8
43335: PUSH
43336: LD_INT 2
43338: ARRAY
43339: PUSH
43340: LD_VAR 0 13
43344: PUSH
43345: LD_INT 2
43347: PLUS
43348: GREATER
43349: OR
43350: PUSH
43351: LD_VAR 0 8
43355: PUSH
43356: LD_INT 2
43358: ARRAY
43359: PUSH
43360: LD_VAR 0 13
43364: PUSH
43365: LD_INT 2
43367: MINUS
43368: LESS
43369: OR
43370: PUSH
43371: LD_VAR 0 8
43375: PUSH
43376: LD_INT 3
43378: ARRAY
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 8
43385: PUSH
43386: LD_INT 9
43388: PUSH
43389: LD_INT 10
43391: PUSH
43392: LD_INT 11
43394: PUSH
43395: LD_INT 12
43397: PUSH
43398: LD_INT 13
43400: PUSH
43401: LD_INT 16
43403: PUSH
43404: LD_INT 17
43406: PUSH
43407: LD_INT 18
43409: PUSH
43410: LD_INT 19
43412: PUSH
43413: LD_INT 20
43415: PUSH
43416: LD_INT 21
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: IN
43434: NOT
43435: OR
43436: PUSH
43437: LD_VAR 0 8
43441: PUSH
43442: LD_INT 5
43444: ARRAY
43445: NOT
43446: OR
43447: PUSH
43448: LD_VAR 0 8
43452: PUSH
43453: LD_INT 6
43455: ARRAY
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 7
43465: PUSH
43466: LD_INT 9
43468: PUSH
43469: LD_INT 10
43471: PUSH
43472: LD_INT 11
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: IN
43483: NOT
43484: OR
43485: IFFALSE 43491
// exit ;
43487: POP
43488: POP
43489: GO 43574
// end ;
43491: GO 43162
43493: POP
43494: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43495: LD_VAR 0 9
43499: PPUSH
43500: LD_VAR 0 3
43504: PPUSH
43505: LD_VAR 0 4
43509: PPUSH
43510: LD_INT 20
43512: PPUSH
43513: CALL 35497 0 4
43517: PUSH
43518: LD_INT 4
43520: ARRAY
43521: IFFALSE 43525
// exit ;
43523: GO 43574
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43525: LD_VAR 0 2
43529: PUSH
43530: LD_INT 29
43532: PUSH
43533: LD_INT 30
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: IN
43540: PUSH
43541: LD_VAR 0 3
43545: PPUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: LD_VAR 0 9
43555: PPUSH
43556: CALL_OW 440
43560: NOT
43561: AND
43562: IFFALSE 43566
// exit ;
43564: GO 43574
// result := true ;
43566: LD_ADDR_VAR 0 6
43570: PUSH
43571: LD_INT 1
43573: ST_TO_ADDR
// end ;
43574: LD_VAR 0 6
43578: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43579: LD_INT 0
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
43632: PPUSH
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
// result = [ ] ;
43639: LD_ADDR_VAR 0 7
43643: PUSH
43644: EMPTY
43645: ST_TO_ADDR
// temp_list = [ ] ;
43646: LD_ADDR_VAR 0 9
43650: PUSH
43651: EMPTY
43652: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43653: LD_VAR 0 4
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: LD_INT 3
43669: PUSH
43670: LD_INT 4
43672: PUSH
43673: LD_INT 5
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: IN
43684: NOT
43685: PUSH
43686: LD_VAR 0 1
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: IN
43701: PUSH
43702: LD_VAR 0 5
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: IN
43721: NOT
43722: AND
43723: OR
43724: IFFALSE 43728
// exit ;
43726: GO 62119
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43728: LD_VAR 0 1
43732: PUSH
43733: LD_INT 6
43735: PUSH
43736: LD_INT 7
43738: PUSH
43739: LD_INT 8
43741: PUSH
43742: LD_INT 13
43744: PUSH
43745: LD_INT 12
43747: PUSH
43748: LD_INT 15
43750: PUSH
43751: LD_INT 11
43753: PUSH
43754: LD_INT 14
43756: PUSH
43757: LD_INT 10
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: IN
43771: IFFALSE 43781
// btype = b_lab ;
43773: LD_ADDR_VAR 0 1
43777: PUSH
43778: LD_INT 6
43780: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43781: LD_VAR 0 6
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: IN
43800: NOT
43801: PUSH
43802: LD_VAR 0 1
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: LD_INT 6
43821: PUSH
43822: LD_INT 36
43824: PUSH
43825: LD_INT 4
43827: PUSH
43828: LD_INT 5
43830: PUSH
43831: LD_INT 31
43833: PUSH
43834: LD_INT 32
43836: PUSH
43837: LD_INT 33
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: IN
43853: NOT
43854: PUSH
43855: LD_VAR 0 6
43859: PUSH
43860: LD_INT 1
43862: EQUAL
43863: AND
43864: OR
43865: PUSH
43866: LD_VAR 0 1
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: IN
43881: NOT
43882: PUSH
43883: LD_VAR 0 6
43887: PUSH
43888: LD_INT 2
43890: EQUAL
43891: AND
43892: OR
43893: IFFALSE 43903
// mode = 0 ;
43895: LD_ADDR_VAR 0 6
43899: PUSH
43900: LD_INT 0
43902: ST_TO_ADDR
// case mode of 0 :
43903: LD_VAR 0 6
43907: PUSH
43908: LD_INT 0
43910: DOUBLE
43911: EQUAL
43912: IFTRUE 43916
43914: GO 55369
43916: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43917: LD_ADDR_VAR 0 11
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44110: LD_ADDR_VAR 0 12
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 3
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44306: LD_ADDR_VAR 0 13
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 3
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: NEG
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44505: LD_ADDR_VAR 0 14
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 3
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44701: LD_ADDR_VAR 0 15
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 3
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44894: LD_ADDR_VAR 0 16
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 3
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45087: LD_ADDR_VAR 0 17
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45317: LD_ADDR_VAR 0 18
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45547: LD_ADDR_VAR 0 19
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45777: LD_ADDR_VAR 0 20
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46007: LD_ADDR_VAR 0 21
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46237: LD_ADDR_VAR 0 22
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46467: LD_ADDR_VAR 0 23
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 3
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46747: LD_ADDR_VAR 0 24
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47023: LD_ADDR_VAR 0 25
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 2
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 3
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 3
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47297: LD_ADDR_VAR 0 26
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47573: LD_ADDR_VAR 0 27
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47853: LD_ADDR_VAR 0 28
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48135: LD_ADDR_VAR 0 29
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 3
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48414: LD_ADDR_VAR 0 30
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 3
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48692: LD_ADDR_VAR 0 31
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 3
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48970: LD_ADDR_VAR 0 32
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49248: LD_ADDR_VAR 0 33
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49527: LD_ADDR_VAR 0 34
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49807: LD_ADDR_VAR 0 35
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49919: LD_ADDR_VAR 0 36
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50031: LD_ADDR_VAR 0 37
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50143: LD_ADDR_VAR 0 38
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50255: LD_ADDR_VAR 0 39
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50367: LD_ADDR_VAR 0 40
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50479: LD_ADDR_VAR 0 41
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50829: LD_ADDR_VAR 0 42
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51179: LD_ADDR_VAR 0 43
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 3
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51527: LD_ADDR_VAR 0 44
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 2
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: LD_INT 3
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51877: LD_ADDR_VAR 0 45
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: LD_INT 3
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 3
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52227: LD_ADDR_VAR 0 46
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 3
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 3
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 3
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 3
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52575: LD_ADDR_VAR 0 47
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52726: LD_ADDR_VAR 0 48
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52873: LD_ADDR_VAR 0 49
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53017: LD_ADDR_VAR 0 50
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53161: LD_ADDR_VAR 0 51
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53308: LD_ADDR_VAR 0 52
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53459: LD_ADDR_VAR 0 53
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53689: LD_ADDR_VAR 0 54
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53919: LD_ADDR_VAR 0 55
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 2
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54149: LD_ADDR_VAR 0 56
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54379: LD_ADDR_VAR 0 57
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54609: LD_ADDR_VAR 0 58
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54839: LD_ADDR_VAR 0 59
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54927: LD_ADDR_VAR 0 60
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55015: LD_ADDR_VAR 0 61
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55103: LD_ADDR_VAR 0 62
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55191: LD_ADDR_VAR 0 63
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55279: LD_ADDR_VAR 0 64
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: ST_TO_ADDR
// end ; 1 :
55367: GO 61264
55369: LD_INT 1
55371: DOUBLE
55372: EQUAL
55373: IFTRUE 55377
55375: GO 58000
55377: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55378: LD_ADDR_VAR 0 11
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55422: LD_ADDR_VAR 0 12
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55463: LD_ADDR_VAR 0 13
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55503: LD_ADDR_VAR 0 14
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55544: LD_ADDR_VAR 0 15
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55588: LD_ADDR_VAR 0 16
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55634: LD_ADDR_VAR 0 17
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55678: LD_ADDR_VAR 0 18
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 3
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55719: LD_ADDR_VAR 0 19
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55759: LD_ADDR_VAR 0 20
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55800: LD_ADDR_VAR 0 21
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: NEG
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55844: LD_ADDR_VAR 0 22
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 3
55875: NEG
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55890: LD_ADDR_VAR 0 23
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: LIST
55933: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55934: LD_ADDR_VAR 0 24
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 4
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55975: LD_ADDR_VAR 0 25
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 4
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: LD_INT 4
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56015: LD_ADDR_VAR 0 26
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56056: LD_ADDR_VAR 0 27
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56100: LD_ADDR_VAR 0 28
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 4
56131: NEG
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56146: LD_ADDR_VAR 0 29
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 3
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 4
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 4
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: LD_INT 5
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 5
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 4
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 6
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 6
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 5
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56301: LD_ADDR_VAR 0 30
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 4
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 5
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 5
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 5
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 6
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 6
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56444: LD_ADDR_VAR 0 31
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 4
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 4
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: LD_INT 4
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 5
56511: PUSH
56512: LD_INT 4
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 5
56521: PUSH
56522: LD_INT 5
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 4
56531: PUSH
56532: LD_INT 5
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 6
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 6
56551: PUSH
56552: LD_INT 6
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 5
56561: PUSH
56562: LD_INT 6
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56583: LD_ADDR_VAR 0 32
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 3
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 5
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 5
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 4
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 6
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 6
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 5
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56726: LD_ADDR_VAR 0 33
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 4
56778: NEG
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 4
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 5
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 5
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 5
56835: NEG
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 6
56846: NEG
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 6
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56881: LD_ADDR_VAR 0 34
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: LD_INT 4
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 4
56948: NEG
56949: PUSH
56950: LD_INT 4
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: LD_INT 5
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 5
56972: NEG
56973: PUSH
56974: LD_INT 4
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 5
56984: NEG
56985: PUSH
56986: LD_INT 5
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 5
56996: NEG
56997: PUSH
56998: LD_INT 6
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 6
57008: NEG
57009: PUSH
57010: LD_INT 5
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 6
57020: NEG
57021: PUSH
57022: LD_INT 6
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57044: LD_ADDR_VAR 0 41
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: LIST
57087: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57088: LD_ADDR_VAR 0 42
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57129: LD_ADDR_VAR 0 43
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57169: LD_ADDR_VAR 0 44
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: LIST
57209: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57210: LD_ADDR_VAR 0 45
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57254: LD_ADDR_VAR 0 46
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57300: LD_ADDR_VAR 0 47
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57333: LD_ADDR_VAR 0 48
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57364: LD_ADDR_VAR 0 49
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57393: LD_ADDR_VAR 0 50
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57422: LD_ADDR_VAR 0 51
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57453: LD_ADDR_VAR 0 52
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57486: LD_ADDR_VAR 0 53
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57530: LD_ADDR_VAR 0 54
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57571: LD_ADDR_VAR 0 55
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: LD_INT 3
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: LIST
57610: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57611: LD_ADDR_VAR 0 56
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57652: LD_ADDR_VAR 0 57
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57696: LD_ADDR_VAR 0 58
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: NEG
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57742: LD_ADDR_VAR 0 59
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57786: LD_ADDR_VAR 0 60
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57827: LD_ADDR_VAR 0 61
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57867: LD_ADDR_VAR 0 62
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57908: LD_ADDR_VAR 0 63
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57952: LD_ADDR_VAR 0 64
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: ST_TO_ADDR
// end ; 2 :
57998: GO 61264
58000: LD_INT 2
58002: DOUBLE
58003: EQUAL
58004: IFTRUE 58008
58006: GO 61263
58008: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58009: LD_ADDR_VAR 0 29
58013: PUSH
58014: LD_INT 4
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 5
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 5
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 4
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 4
58139: PUSH
58140: LD_INT 4
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: LD_INT 4
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 4
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 5
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 5
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 5
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 4
58348: NEG
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 4
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 4
58371: NEG
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: NEG
58395: PUSH
58396: LD_INT 4
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: LD_INT 5
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: NEG
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 3
58430: NEG
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 4
58442: NEG
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 5
58454: NEG
58455: PUSH
58456: LD_INT 4
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 5
58466: NEG
58467: PUSH
58468: LD_INT 5
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 3
58478: NEG
58479: PUSH
58480: LD_INT 5
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 5
58490: NEG
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58547: LD_ADDR_VAR 0 30
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: LD_INT 4
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 5
58574: PUSH
58575: LD_INT 4
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 5
58584: PUSH
58585: LD_INT 5
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: LD_INT 5
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 4
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 5
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: PUSH
58635: LD_INT 5
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 4
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 4
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 4
58737: NEG
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 4
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 4
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: NEG
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 5
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 5
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: LD_INT 4
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 4
58899: NEG
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 4
58911: NEG
58912: PUSH
58913: LD_INT 4
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: LD_INT 4
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 4
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 4
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 5
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 4
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 5
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 5
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59094: LD_ADDR_VAR 0 31
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 4
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 4
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: LD_INT 5
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 5
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 4
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: LD_INT 5
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 4
59250: NEG
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 4
59261: NEG
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 4
59296: NEG
59297: PUSH
59298: LD_INT 4
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 5
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: LD_INT 4
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 4
59344: NEG
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 5
59356: NEG
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 5
59368: NEG
59369: PUSH
59370: LD_INT 5
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 5
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 5
59392: NEG
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 4
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 4
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 4
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 5
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 5
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 4
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 3
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 5
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59644: LD_ADDR_VAR 0 32
59648: PUSH
59649: LD_INT 4
59651: NEG
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 4
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 4
59696: NEG
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 5
59707: NEG
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 5
59718: NEG
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 5
59730: NEG
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: LD_INT 4
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: LD_INT 3
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 4
59813: NEG
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 4
59825: NEG
59826: PUSH
59827: LD_INT 4
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: LD_INT 4
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 4
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 5
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 4
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 5
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: LD_INT 5
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 4
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 4
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 4
60056: PUSH
60057: LD_INT 4
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 4
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 5
60076: PUSH
60077: LD_INT 4
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 5
60086: PUSH
60087: LD_INT 5
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 4
60096: PUSH
60097: LD_INT 5
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 4
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 5
60126: PUSH
60127: LD_INT 3
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: LD_INT 5
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60191: LD_ADDR_VAR 0 33
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 4
60210: NEG
60211: PUSH
60212: LD_INT 5
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: LD_INT 4
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 4
60246: NEG
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 5
60258: NEG
60259: PUSH
60260: LD_INT 4
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 5
60270: NEG
60271: PUSH
60272: LD_INT 5
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: NEG
60283: PUSH
60284: LD_INT 5
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 5
60294: NEG
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 4
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 4
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 4
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 5
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 5
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 5
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 4
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 4
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 5
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 5
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60729: LD_ADDR_VAR 0 34
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 4
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 5
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 4
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: LD_INT 3
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 3
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: LD_INT 4
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 5
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 2
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: LD_INT 5
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 4
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 4
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 4
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 4
60931: PUSH
60932: LD_INT 4
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 4
60941: PUSH
60942: LD_INT 3
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 5
60951: PUSH
60952: LD_INT 4
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 5
60961: PUSH
60962: LD_INT 5
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: PUSH
60982: LD_INT 4
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 5
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 3
61011: PUSH
61012: LD_INT 5
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: LD_INT 4
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 4
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 4
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 4
61114: NEG
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 4
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 3
61137: NEG
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 4
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 5
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 5
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 5
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 3
61205: NEG
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: ST_TO_ADDR
// end ; end ;
61261: GO 61264
61263: POP
// case btype of b_depot , b_warehouse :
61264: LD_VAR 0 1
61268: PUSH
61269: LD_INT 0
61271: DOUBLE
61272: EQUAL
61273: IFTRUE 61283
61275: LD_INT 1
61277: DOUBLE
61278: EQUAL
61279: IFTRUE 61283
61281: GO 61484
61283: POP
// case nation of nation_american :
61284: LD_VAR 0 5
61288: PUSH
61289: LD_INT 1
61291: DOUBLE
61292: EQUAL
61293: IFTRUE 61297
61295: GO 61353
61297: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61298: LD_ADDR_VAR 0 9
61302: PUSH
61303: LD_VAR 0 11
61307: PUSH
61308: LD_VAR 0 12
61312: PUSH
61313: LD_VAR 0 13
61317: PUSH
61318: LD_VAR 0 14
61322: PUSH
61323: LD_VAR 0 15
61327: PUSH
61328: LD_VAR 0 16
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: PUSH
61341: LD_VAR 0 4
61345: PUSH
61346: LD_INT 1
61348: PLUS
61349: ARRAY
61350: ST_TO_ADDR
61351: GO 61482
61353: LD_INT 2
61355: DOUBLE
61356: EQUAL
61357: IFTRUE 61361
61359: GO 61417
61361: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61362: LD_ADDR_VAR 0 9
61366: PUSH
61367: LD_VAR 0 17
61371: PUSH
61372: LD_VAR 0 18
61376: PUSH
61377: LD_VAR 0 19
61381: PUSH
61382: LD_VAR 0 20
61386: PUSH
61387: LD_VAR 0 21
61391: PUSH
61392: LD_VAR 0 22
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: PUSH
61405: LD_VAR 0 4
61409: PUSH
61410: LD_INT 1
61412: PLUS
61413: ARRAY
61414: ST_TO_ADDR
61415: GO 61482
61417: LD_INT 3
61419: DOUBLE
61420: EQUAL
61421: IFTRUE 61425
61423: GO 61481
61425: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61426: LD_ADDR_VAR 0 9
61430: PUSH
61431: LD_VAR 0 23
61435: PUSH
61436: LD_VAR 0 24
61440: PUSH
61441: LD_VAR 0 25
61445: PUSH
61446: LD_VAR 0 26
61450: PUSH
61451: LD_VAR 0 27
61455: PUSH
61456: LD_VAR 0 28
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: LD_VAR 0 4
61473: PUSH
61474: LD_INT 1
61476: PLUS
61477: ARRAY
61478: ST_TO_ADDR
61479: GO 61482
61481: POP
61482: GO 62037
61484: LD_INT 2
61486: DOUBLE
61487: EQUAL
61488: IFTRUE 61498
61490: LD_INT 3
61492: DOUBLE
61493: EQUAL
61494: IFTRUE 61498
61496: GO 61554
61498: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61499: LD_ADDR_VAR 0 9
61503: PUSH
61504: LD_VAR 0 29
61508: PUSH
61509: LD_VAR 0 30
61513: PUSH
61514: LD_VAR 0 31
61518: PUSH
61519: LD_VAR 0 32
61523: PUSH
61524: LD_VAR 0 33
61528: PUSH
61529: LD_VAR 0 34
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: PUSH
61542: LD_VAR 0 4
61546: PUSH
61547: LD_INT 1
61549: PLUS
61550: ARRAY
61551: ST_TO_ADDR
61552: GO 62037
61554: LD_INT 16
61556: DOUBLE
61557: EQUAL
61558: IFTRUE 61616
61560: LD_INT 17
61562: DOUBLE
61563: EQUAL
61564: IFTRUE 61616
61566: LD_INT 18
61568: DOUBLE
61569: EQUAL
61570: IFTRUE 61616
61572: LD_INT 19
61574: DOUBLE
61575: EQUAL
61576: IFTRUE 61616
61578: LD_INT 22
61580: DOUBLE
61581: EQUAL
61582: IFTRUE 61616
61584: LD_INT 20
61586: DOUBLE
61587: EQUAL
61588: IFTRUE 61616
61590: LD_INT 21
61592: DOUBLE
61593: EQUAL
61594: IFTRUE 61616
61596: LD_INT 23
61598: DOUBLE
61599: EQUAL
61600: IFTRUE 61616
61602: LD_INT 24
61604: DOUBLE
61605: EQUAL
61606: IFTRUE 61616
61608: LD_INT 25
61610: DOUBLE
61611: EQUAL
61612: IFTRUE 61616
61614: GO 61672
61616: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61617: LD_ADDR_VAR 0 9
61621: PUSH
61622: LD_VAR 0 35
61626: PUSH
61627: LD_VAR 0 36
61631: PUSH
61632: LD_VAR 0 37
61636: PUSH
61637: LD_VAR 0 38
61641: PUSH
61642: LD_VAR 0 39
61646: PUSH
61647: LD_VAR 0 40
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: PUSH
61660: LD_VAR 0 4
61664: PUSH
61665: LD_INT 1
61667: PLUS
61668: ARRAY
61669: ST_TO_ADDR
61670: GO 62037
61672: LD_INT 6
61674: DOUBLE
61675: EQUAL
61676: IFTRUE 61728
61678: LD_INT 7
61680: DOUBLE
61681: EQUAL
61682: IFTRUE 61728
61684: LD_INT 8
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61728
61690: LD_INT 13
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61728
61696: LD_INT 12
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61728
61702: LD_INT 15
61704: DOUBLE
61705: EQUAL
61706: IFTRUE 61728
61708: LD_INT 11
61710: DOUBLE
61711: EQUAL
61712: IFTRUE 61728
61714: LD_INT 14
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61728
61720: LD_INT 10
61722: DOUBLE
61723: EQUAL
61724: IFTRUE 61728
61726: GO 61784
61728: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61729: LD_ADDR_VAR 0 9
61733: PUSH
61734: LD_VAR 0 41
61738: PUSH
61739: LD_VAR 0 42
61743: PUSH
61744: LD_VAR 0 43
61748: PUSH
61749: LD_VAR 0 44
61753: PUSH
61754: LD_VAR 0 45
61758: PUSH
61759: LD_VAR 0 46
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: PUSH
61772: LD_VAR 0 4
61776: PUSH
61777: LD_INT 1
61779: PLUS
61780: ARRAY
61781: ST_TO_ADDR
61782: GO 62037
61784: LD_INT 36
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61792
61790: GO 61848
61792: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61793: LD_ADDR_VAR 0 9
61797: PUSH
61798: LD_VAR 0 47
61802: PUSH
61803: LD_VAR 0 48
61807: PUSH
61808: LD_VAR 0 49
61812: PUSH
61813: LD_VAR 0 50
61817: PUSH
61818: LD_VAR 0 51
61822: PUSH
61823: LD_VAR 0 52
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: LD_VAR 0 4
61840: PUSH
61841: LD_INT 1
61843: PLUS
61844: ARRAY
61845: ST_TO_ADDR
61846: GO 62037
61848: LD_INT 4
61850: DOUBLE
61851: EQUAL
61852: IFTRUE 61874
61854: LD_INT 5
61856: DOUBLE
61857: EQUAL
61858: IFTRUE 61874
61860: LD_INT 34
61862: DOUBLE
61863: EQUAL
61864: IFTRUE 61874
61866: LD_INT 37
61868: DOUBLE
61869: EQUAL
61870: IFTRUE 61874
61872: GO 61930
61874: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61875: LD_ADDR_VAR 0 9
61879: PUSH
61880: LD_VAR 0 53
61884: PUSH
61885: LD_VAR 0 54
61889: PUSH
61890: LD_VAR 0 55
61894: PUSH
61895: LD_VAR 0 56
61899: PUSH
61900: LD_VAR 0 57
61904: PUSH
61905: LD_VAR 0 58
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: PUSH
61918: LD_VAR 0 4
61922: PUSH
61923: LD_INT 1
61925: PLUS
61926: ARRAY
61927: ST_TO_ADDR
61928: GO 62037
61930: LD_INT 31
61932: DOUBLE
61933: EQUAL
61934: IFTRUE 61980
61936: LD_INT 32
61938: DOUBLE
61939: EQUAL
61940: IFTRUE 61980
61942: LD_INT 33
61944: DOUBLE
61945: EQUAL
61946: IFTRUE 61980
61948: LD_INT 27
61950: DOUBLE
61951: EQUAL
61952: IFTRUE 61980
61954: LD_INT 26
61956: DOUBLE
61957: EQUAL
61958: IFTRUE 61980
61960: LD_INT 28
61962: DOUBLE
61963: EQUAL
61964: IFTRUE 61980
61966: LD_INT 29
61968: DOUBLE
61969: EQUAL
61970: IFTRUE 61980
61972: LD_INT 30
61974: DOUBLE
61975: EQUAL
61976: IFTRUE 61980
61978: GO 62036
61980: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61981: LD_ADDR_VAR 0 9
61985: PUSH
61986: LD_VAR 0 59
61990: PUSH
61991: LD_VAR 0 60
61995: PUSH
61996: LD_VAR 0 61
62000: PUSH
62001: LD_VAR 0 62
62005: PUSH
62006: LD_VAR 0 63
62010: PUSH
62011: LD_VAR 0 64
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: PUSH
62024: LD_VAR 0 4
62028: PUSH
62029: LD_INT 1
62031: PLUS
62032: ARRAY
62033: ST_TO_ADDR
62034: GO 62037
62036: POP
// temp_list2 = [ ] ;
62037: LD_ADDR_VAR 0 10
62041: PUSH
62042: EMPTY
62043: ST_TO_ADDR
// for i in temp_list do
62044: LD_ADDR_VAR 0 8
62048: PUSH
62049: LD_VAR 0 9
62053: PUSH
62054: FOR_IN
62055: IFFALSE 62107
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62057: LD_ADDR_VAR 0 10
62061: PUSH
62062: LD_VAR 0 10
62066: PUSH
62067: LD_VAR 0 8
62071: PUSH
62072: LD_INT 1
62074: ARRAY
62075: PUSH
62076: LD_VAR 0 2
62080: PLUS
62081: PUSH
62082: LD_VAR 0 8
62086: PUSH
62087: LD_INT 2
62089: ARRAY
62090: PUSH
62091: LD_VAR 0 3
62095: PLUS
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: EMPTY
62102: LIST
62103: ADD
62104: ST_TO_ADDR
62105: GO 62054
62107: POP
62108: POP
// result = temp_list2 ;
62109: LD_ADDR_VAR 0 7
62113: PUSH
62114: LD_VAR 0 10
62118: ST_TO_ADDR
// end ;
62119: LD_VAR 0 7
62123: RET
// export function EnemyInRange ( unit , dist ) ; begin
62124: LD_INT 0
62126: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62127: LD_ADDR_VAR 0 3
62131: PUSH
62132: LD_VAR 0 1
62136: PPUSH
62137: CALL_OW 255
62141: PPUSH
62142: LD_VAR 0 1
62146: PPUSH
62147: CALL_OW 250
62151: PPUSH
62152: LD_VAR 0 1
62156: PPUSH
62157: CALL_OW 251
62161: PPUSH
62162: LD_VAR 0 2
62166: PPUSH
62167: CALL 35497 0 4
62171: PUSH
62172: LD_INT 4
62174: ARRAY
62175: ST_TO_ADDR
// end ;
62176: LD_VAR 0 3
62180: RET
// export function PlayerSeeMe ( unit ) ; begin
62181: LD_INT 0
62183: PPUSH
// result := See ( your_side , unit ) ;
62184: LD_ADDR_VAR 0 2
62188: PUSH
62189: LD_OWVAR 2
62193: PPUSH
62194: LD_VAR 0 1
62198: PPUSH
62199: CALL_OW 292
62203: ST_TO_ADDR
// end ;
62204: LD_VAR 0 2
62208: RET
// export function ReverseDir ( unit ) ; begin
62209: LD_INT 0
62211: PPUSH
// if not unit then
62212: LD_VAR 0 1
62216: NOT
62217: IFFALSE 62221
// exit ;
62219: GO 62244
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62221: LD_ADDR_VAR 0 2
62225: PUSH
62226: LD_VAR 0 1
62230: PPUSH
62231: CALL_OW 254
62235: PUSH
62236: LD_INT 3
62238: PLUS
62239: PUSH
62240: LD_INT 6
62242: MOD
62243: ST_TO_ADDR
// end ;
62244: LD_VAR 0 2
62248: RET
// export function ReverseArray ( array ) ; var i ; begin
62249: LD_INT 0
62251: PPUSH
62252: PPUSH
// if not array then
62253: LD_VAR 0 1
62257: NOT
62258: IFFALSE 62262
// exit ;
62260: GO 62317
// result := [ ] ;
62262: LD_ADDR_VAR 0 2
62266: PUSH
62267: EMPTY
62268: ST_TO_ADDR
// for i := array downto 1 do
62269: LD_ADDR_VAR 0 3
62273: PUSH
62274: DOUBLE
62275: LD_VAR 0 1
62279: INC
62280: ST_TO_ADDR
62281: LD_INT 1
62283: PUSH
62284: FOR_DOWNTO
62285: IFFALSE 62315
// result := Join ( result , array [ i ] ) ;
62287: LD_ADDR_VAR 0 2
62291: PUSH
62292: LD_VAR 0 2
62296: PPUSH
62297: LD_VAR 0 1
62301: PUSH
62302: LD_VAR 0 3
62306: ARRAY
62307: PPUSH
62308: CALL 66962 0 2
62312: ST_TO_ADDR
62313: GO 62284
62315: POP
62316: POP
// end ;
62317: LD_VAR 0 2
62321: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62322: LD_INT 0
62324: PPUSH
62325: PPUSH
62326: PPUSH
62327: PPUSH
62328: PPUSH
62329: PPUSH
// if not unit or not hexes then
62330: LD_VAR 0 1
62334: NOT
62335: PUSH
62336: LD_VAR 0 2
62340: NOT
62341: OR
62342: IFFALSE 62346
// exit ;
62344: GO 62469
// dist := 9999 ;
62346: LD_ADDR_VAR 0 5
62350: PUSH
62351: LD_INT 9999
62353: ST_TO_ADDR
// for i = 1 to hexes do
62354: LD_ADDR_VAR 0 4
62358: PUSH
62359: DOUBLE
62360: LD_INT 1
62362: DEC
62363: ST_TO_ADDR
62364: LD_VAR 0 2
62368: PUSH
62369: FOR_TO
62370: IFFALSE 62457
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62372: LD_ADDR_VAR 0 6
62376: PUSH
62377: LD_VAR 0 1
62381: PPUSH
62382: LD_VAR 0 2
62386: PUSH
62387: LD_VAR 0 4
62391: ARRAY
62392: PUSH
62393: LD_INT 1
62395: ARRAY
62396: PPUSH
62397: LD_VAR 0 2
62401: PUSH
62402: LD_VAR 0 4
62406: ARRAY
62407: PUSH
62408: LD_INT 2
62410: ARRAY
62411: PPUSH
62412: CALL_OW 297
62416: ST_TO_ADDR
// if tdist < dist then
62417: LD_VAR 0 6
62421: PUSH
62422: LD_VAR 0 5
62426: LESS
62427: IFFALSE 62455
// begin hex := hexes [ i ] ;
62429: LD_ADDR_VAR 0 8
62433: PUSH
62434: LD_VAR 0 2
62438: PUSH
62439: LD_VAR 0 4
62443: ARRAY
62444: ST_TO_ADDR
// dist := tdist ;
62445: LD_ADDR_VAR 0 5
62449: PUSH
62450: LD_VAR 0 6
62454: ST_TO_ADDR
// end ; end ;
62455: GO 62369
62457: POP
62458: POP
// result := hex ;
62459: LD_ADDR_VAR 0 3
62463: PUSH
62464: LD_VAR 0 8
62468: ST_TO_ADDR
// end ;
62469: LD_VAR 0 3
62473: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62474: LD_INT 0
62476: PPUSH
62477: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62478: LD_VAR 0 1
62482: NOT
62483: PUSH
62484: LD_VAR 0 1
62488: PUSH
62489: LD_INT 21
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 23
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PPUSH
62513: CALL_OW 69
62517: IN
62518: NOT
62519: OR
62520: IFFALSE 62524
// exit ;
62522: GO 62571
// for i = 1 to 3 do
62524: LD_ADDR_VAR 0 3
62528: PUSH
62529: DOUBLE
62530: LD_INT 1
62532: DEC
62533: ST_TO_ADDR
62534: LD_INT 3
62536: PUSH
62537: FOR_TO
62538: IFFALSE 62569
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62540: LD_VAR 0 1
62544: PPUSH
62545: CALL_OW 250
62549: PPUSH
62550: LD_VAR 0 1
62554: PPUSH
62555: CALL_OW 251
62559: PPUSH
62560: LD_INT 1
62562: PPUSH
62563: CALL_OW 453
62567: GO 62537
62569: POP
62570: POP
// end ;
62571: LD_VAR 0 2
62575: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62576: LD_INT 0
62578: PPUSH
62579: PPUSH
62580: PPUSH
62581: PPUSH
62582: PPUSH
62583: PPUSH
// if not unit or not enemy_unit then
62584: LD_VAR 0 1
62588: NOT
62589: PUSH
62590: LD_VAR 0 2
62594: NOT
62595: OR
62596: IFFALSE 62600
// exit ;
62598: GO 63067
// if GetLives ( i ) < 250 then
62600: LD_VAR 0 4
62604: PPUSH
62605: CALL_OW 256
62609: PUSH
62610: LD_INT 250
62612: LESS
62613: IFFALSE 62626
// begin ComAutodestruct ( i ) ;
62615: LD_VAR 0 4
62619: PPUSH
62620: CALL 62474 0 1
// exit ;
62624: GO 63067
// end ; x := GetX ( enemy_unit ) ;
62626: LD_ADDR_VAR 0 7
62630: PUSH
62631: LD_VAR 0 2
62635: PPUSH
62636: CALL_OW 250
62640: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62641: LD_ADDR_VAR 0 8
62645: PUSH
62646: LD_VAR 0 2
62650: PPUSH
62651: CALL_OW 251
62655: ST_TO_ADDR
// if not x or not y then
62656: LD_VAR 0 7
62660: NOT
62661: PUSH
62662: LD_VAR 0 8
62666: NOT
62667: OR
62668: IFFALSE 62672
// exit ;
62670: GO 63067
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62672: LD_ADDR_VAR 0 6
62676: PUSH
62677: LD_VAR 0 7
62681: PPUSH
62682: LD_INT 0
62684: PPUSH
62685: LD_INT 4
62687: PPUSH
62688: CALL_OW 272
62692: PUSH
62693: LD_VAR 0 8
62697: PPUSH
62698: LD_INT 0
62700: PPUSH
62701: LD_INT 4
62703: PPUSH
62704: CALL_OW 273
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_VAR 0 7
62717: PPUSH
62718: LD_INT 1
62720: PPUSH
62721: LD_INT 4
62723: PPUSH
62724: CALL_OW 272
62728: PUSH
62729: LD_VAR 0 8
62733: PPUSH
62734: LD_INT 1
62736: PPUSH
62737: LD_INT 4
62739: PPUSH
62740: CALL_OW 273
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_VAR 0 7
62753: PPUSH
62754: LD_INT 2
62756: PPUSH
62757: LD_INT 4
62759: PPUSH
62760: CALL_OW 272
62764: PUSH
62765: LD_VAR 0 8
62769: PPUSH
62770: LD_INT 2
62772: PPUSH
62773: LD_INT 4
62775: PPUSH
62776: CALL_OW 273
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_VAR 0 7
62789: PPUSH
62790: LD_INT 3
62792: PPUSH
62793: LD_INT 4
62795: PPUSH
62796: CALL_OW 272
62800: PUSH
62801: LD_VAR 0 8
62805: PPUSH
62806: LD_INT 3
62808: PPUSH
62809: LD_INT 4
62811: PPUSH
62812: CALL_OW 273
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_VAR 0 7
62825: PPUSH
62826: LD_INT 4
62828: PPUSH
62829: LD_INT 4
62831: PPUSH
62832: CALL_OW 272
62836: PUSH
62837: LD_VAR 0 8
62841: PPUSH
62842: LD_INT 4
62844: PPUSH
62845: LD_INT 4
62847: PPUSH
62848: CALL_OW 273
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_VAR 0 7
62861: PPUSH
62862: LD_INT 5
62864: PPUSH
62865: LD_INT 4
62867: PPUSH
62868: CALL_OW 272
62872: PUSH
62873: LD_VAR 0 8
62877: PPUSH
62878: LD_INT 5
62880: PPUSH
62881: LD_INT 4
62883: PPUSH
62884: CALL_OW 273
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: ST_TO_ADDR
// for i = tmp downto 1 do
62901: LD_ADDR_VAR 0 4
62905: PUSH
62906: DOUBLE
62907: LD_VAR 0 6
62911: INC
62912: ST_TO_ADDR
62913: LD_INT 1
62915: PUSH
62916: FOR_DOWNTO
62917: IFFALSE 63018
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62919: LD_VAR 0 6
62923: PUSH
62924: LD_VAR 0 4
62928: ARRAY
62929: PUSH
62930: LD_INT 1
62932: ARRAY
62933: PPUSH
62934: LD_VAR 0 6
62938: PUSH
62939: LD_VAR 0 4
62943: ARRAY
62944: PUSH
62945: LD_INT 2
62947: ARRAY
62948: PPUSH
62949: CALL_OW 488
62953: NOT
62954: PUSH
62955: LD_VAR 0 6
62959: PUSH
62960: LD_VAR 0 4
62964: ARRAY
62965: PUSH
62966: LD_INT 1
62968: ARRAY
62969: PPUSH
62970: LD_VAR 0 6
62974: PUSH
62975: LD_VAR 0 4
62979: ARRAY
62980: PUSH
62981: LD_INT 2
62983: ARRAY
62984: PPUSH
62985: CALL_OW 428
62989: PUSH
62990: LD_INT 0
62992: NONEQUAL
62993: OR
62994: IFFALSE 63016
// tmp := Delete ( tmp , i ) ;
62996: LD_ADDR_VAR 0 6
63000: PUSH
63001: LD_VAR 0 6
63005: PPUSH
63006: LD_VAR 0 4
63010: PPUSH
63011: CALL_OW 3
63015: ST_TO_ADDR
63016: GO 62916
63018: POP
63019: POP
// j := GetClosestHex ( unit , tmp ) ;
63020: LD_ADDR_VAR 0 5
63024: PUSH
63025: LD_VAR 0 1
63029: PPUSH
63030: LD_VAR 0 6
63034: PPUSH
63035: CALL 62322 0 2
63039: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63040: LD_VAR 0 1
63044: PPUSH
63045: LD_VAR 0 5
63049: PUSH
63050: LD_INT 1
63052: ARRAY
63053: PPUSH
63054: LD_VAR 0 5
63058: PUSH
63059: LD_INT 2
63061: ARRAY
63062: PPUSH
63063: CALL_OW 111
// end ;
63067: LD_VAR 0 3
63071: RET
// export function PrepareApemanSoldier ( ) ; begin
63072: LD_INT 0
63074: PPUSH
// uc_nation := 0 ;
63075: LD_ADDR_OWVAR 21
63079: PUSH
63080: LD_INT 0
63082: ST_TO_ADDR
// hc_sex := sex_male ;
63083: LD_ADDR_OWVAR 27
63087: PUSH
63088: LD_INT 1
63090: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63091: LD_ADDR_OWVAR 28
63095: PUSH
63096: LD_INT 15
63098: ST_TO_ADDR
// hc_gallery :=  ;
63099: LD_ADDR_OWVAR 33
63103: PUSH
63104: LD_STRING 
63106: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63107: LD_ADDR_OWVAR 31
63111: PUSH
63112: LD_INT 0
63114: PPUSH
63115: LD_INT 3
63117: PPUSH
63118: CALL_OW 12
63122: PUSH
63123: LD_INT 0
63125: PPUSH
63126: LD_INT 3
63128: PPUSH
63129: CALL_OW 12
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: ST_TO_ADDR
// end ;
63146: LD_VAR 0 1
63150: RET
// export function PrepareApemanEngineer ( ) ; begin
63151: LD_INT 0
63153: PPUSH
// uc_nation := 0 ;
63154: LD_ADDR_OWVAR 21
63158: PUSH
63159: LD_INT 0
63161: ST_TO_ADDR
// hc_sex := sex_male ;
63162: LD_ADDR_OWVAR 27
63166: PUSH
63167: LD_INT 1
63169: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63170: LD_ADDR_OWVAR 28
63174: PUSH
63175: LD_INT 16
63177: ST_TO_ADDR
// hc_gallery :=  ;
63178: LD_ADDR_OWVAR 33
63182: PUSH
63183: LD_STRING 
63185: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63186: LD_ADDR_OWVAR 31
63190: PUSH
63191: LD_INT 0
63193: PPUSH
63194: LD_INT 3
63196: PPUSH
63197: CALL_OW 12
63201: PUSH
63202: LD_INT 0
63204: PPUSH
63205: LD_INT 3
63207: PPUSH
63208: CALL_OW 12
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: ST_TO_ADDR
// end ;
63225: LD_VAR 0 1
63229: RET
// export function PrepareApeman ( agressivity ) ; begin
63230: LD_INT 0
63232: PPUSH
// uc_side := 0 ;
63233: LD_ADDR_OWVAR 20
63237: PUSH
63238: LD_INT 0
63240: ST_TO_ADDR
// uc_nation := 0 ;
63241: LD_ADDR_OWVAR 21
63245: PUSH
63246: LD_INT 0
63248: ST_TO_ADDR
// hc_sex := sex_male ;
63249: LD_ADDR_OWVAR 27
63253: PUSH
63254: LD_INT 1
63256: ST_TO_ADDR
// hc_class := class_apeman ;
63257: LD_ADDR_OWVAR 28
63261: PUSH
63262: LD_INT 12
63264: ST_TO_ADDR
// hc_gallery :=  ;
63265: LD_ADDR_OWVAR 33
63269: PUSH
63270: LD_STRING 
63272: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63273: LD_ADDR_OWVAR 35
63277: PUSH
63278: LD_VAR 0 1
63282: NEG
63283: PPUSH
63284: LD_VAR 0 1
63288: PPUSH
63289: CALL_OW 12
63293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63294: LD_ADDR_OWVAR 31
63298: PUSH
63299: LD_INT 0
63301: PPUSH
63302: LD_INT 3
63304: PPUSH
63305: CALL_OW 12
63309: PUSH
63310: LD_INT 0
63312: PPUSH
63313: LD_INT 3
63315: PPUSH
63316: CALL_OW 12
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: ST_TO_ADDR
// end ;
63333: LD_VAR 0 2
63337: RET
// export function PrepareTiger ( agressivity ) ; begin
63338: LD_INT 0
63340: PPUSH
// uc_side := 0 ;
63341: LD_ADDR_OWVAR 20
63345: PUSH
63346: LD_INT 0
63348: ST_TO_ADDR
// uc_nation := 0 ;
63349: LD_ADDR_OWVAR 21
63353: PUSH
63354: LD_INT 0
63356: ST_TO_ADDR
// hc_class := class_tiger ;
63357: LD_ADDR_OWVAR 28
63361: PUSH
63362: LD_INT 14
63364: ST_TO_ADDR
// hc_gallery :=  ;
63365: LD_ADDR_OWVAR 33
63369: PUSH
63370: LD_STRING 
63372: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63373: LD_ADDR_OWVAR 35
63377: PUSH
63378: LD_VAR 0 1
63382: NEG
63383: PPUSH
63384: LD_VAR 0 1
63388: PPUSH
63389: CALL_OW 12
63393: ST_TO_ADDR
// end ;
63394: LD_VAR 0 2
63398: RET
// export function PrepareEnchidna ( ) ; begin
63399: LD_INT 0
63401: PPUSH
// uc_side := 0 ;
63402: LD_ADDR_OWVAR 20
63406: PUSH
63407: LD_INT 0
63409: ST_TO_ADDR
// uc_nation := 0 ;
63410: LD_ADDR_OWVAR 21
63414: PUSH
63415: LD_INT 0
63417: ST_TO_ADDR
// hc_class := class_baggie ;
63418: LD_ADDR_OWVAR 28
63422: PUSH
63423: LD_INT 13
63425: ST_TO_ADDR
// hc_gallery :=  ;
63426: LD_ADDR_OWVAR 33
63430: PUSH
63431: LD_STRING 
63433: ST_TO_ADDR
// end ;
63434: LD_VAR 0 1
63438: RET
// export function PrepareFrog ( ) ; begin
63439: LD_INT 0
63441: PPUSH
// uc_side := 0 ;
63442: LD_ADDR_OWVAR 20
63446: PUSH
63447: LD_INT 0
63449: ST_TO_ADDR
// uc_nation := 0 ;
63450: LD_ADDR_OWVAR 21
63454: PUSH
63455: LD_INT 0
63457: ST_TO_ADDR
// hc_class := class_frog ;
63458: LD_ADDR_OWVAR 28
63462: PUSH
63463: LD_INT 19
63465: ST_TO_ADDR
// hc_gallery :=  ;
63466: LD_ADDR_OWVAR 33
63470: PUSH
63471: LD_STRING 
63473: ST_TO_ADDR
// end ;
63474: LD_VAR 0 1
63478: RET
// export function PrepareFish ( ) ; begin
63479: LD_INT 0
63481: PPUSH
// uc_side := 0 ;
63482: LD_ADDR_OWVAR 20
63486: PUSH
63487: LD_INT 0
63489: ST_TO_ADDR
// uc_nation := 0 ;
63490: LD_ADDR_OWVAR 21
63494: PUSH
63495: LD_INT 0
63497: ST_TO_ADDR
// hc_class := class_fish ;
63498: LD_ADDR_OWVAR 28
63502: PUSH
63503: LD_INT 20
63505: ST_TO_ADDR
// hc_gallery :=  ;
63506: LD_ADDR_OWVAR 33
63510: PUSH
63511: LD_STRING 
63513: ST_TO_ADDR
// end ;
63514: LD_VAR 0 1
63518: RET
// export function PrepareBird ( ) ; begin
63519: LD_INT 0
63521: PPUSH
// uc_side := 0 ;
63522: LD_ADDR_OWVAR 20
63526: PUSH
63527: LD_INT 0
63529: ST_TO_ADDR
// uc_nation := 0 ;
63530: LD_ADDR_OWVAR 21
63534: PUSH
63535: LD_INT 0
63537: ST_TO_ADDR
// hc_class := class_phororhacos ;
63538: LD_ADDR_OWVAR 28
63542: PUSH
63543: LD_INT 18
63545: ST_TO_ADDR
// hc_gallery :=  ;
63546: LD_ADDR_OWVAR 33
63550: PUSH
63551: LD_STRING 
63553: ST_TO_ADDR
// end ;
63554: LD_VAR 0 1
63558: RET
// export function PrepareHorse ( ) ; begin
63559: LD_INT 0
63561: PPUSH
// uc_side := 0 ;
63562: LD_ADDR_OWVAR 20
63566: PUSH
63567: LD_INT 0
63569: ST_TO_ADDR
// uc_nation := 0 ;
63570: LD_ADDR_OWVAR 21
63574: PUSH
63575: LD_INT 0
63577: ST_TO_ADDR
// hc_class := class_horse ;
63578: LD_ADDR_OWVAR 28
63582: PUSH
63583: LD_INT 21
63585: ST_TO_ADDR
// hc_gallery :=  ;
63586: LD_ADDR_OWVAR 33
63590: PUSH
63591: LD_STRING 
63593: ST_TO_ADDR
// end ;
63594: LD_VAR 0 1
63598: RET
// export function PrepareMastodont ( ) ; begin
63599: LD_INT 0
63601: PPUSH
// uc_side := 0 ;
63602: LD_ADDR_OWVAR 20
63606: PUSH
63607: LD_INT 0
63609: ST_TO_ADDR
// uc_nation := 0 ;
63610: LD_ADDR_OWVAR 21
63614: PUSH
63615: LD_INT 0
63617: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63618: LD_ADDR_OWVAR 37
63622: PUSH
63623: LD_INT 31
63625: ST_TO_ADDR
// vc_control := control_rider ;
63626: LD_ADDR_OWVAR 38
63630: PUSH
63631: LD_INT 4
63633: ST_TO_ADDR
// end ;
63634: LD_VAR 0 1
63638: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63639: LD_INT 0
63641: PPUSH
63642: PPUSH
63643: PPUSH
// uc_side = 0 ;
63644: LD_ADDR_OWVAR 20
63648: PUSH
63649: LD_INT 0
63651: ST_TO_ADDR
// uc_nation = 0 ;
63652: LD_ADDR_OWVAR 21
63656: PUSH
63657: LD_INT 0
63659: ST_TO_ADDR
// InitHc_All ( ) ;
63660: CALL_OW 584
// InitVc ;
63664: CALL_OW 20
// if mastodonts then
63668: LD_VAR 0 6
63672: IFFALSE 63739
// for i = 1 to mastodonts do
63674: LD_ADDR_VAR 0 11
63678: PUSH
63679: DOUBLE
63680: LD_INT 1
63682: DEC
63683: ST_TO_ADDR
63684: LD_VAR 0 6
63688: PUSH
63689: FOR_TO
63690: IFFALSE 63737
// begin vc_chassis := 31 ;
63692: LD_ADDR_OWVAR 37
63696: PUSH
63697: LD_INT 31
63699: ST_TO_ADDR
// vc_control := control_rider ;
63700: LD_ADDR_OWVAR 38
63704: PUSH
63705: LD_INT 4
63707: ST_TO_ADDR
// animal := CreateVehicle ;
63708: LD_ADDR_VAR 0 12
63712: PUSH
63713: CALL_OW 45
63717: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63718: LD_VAR 0 12
63722: PPUSH
63723: LD_VAR 0 8
63727: PPUSH
63728: LD_INT 0
63730: PPUSH
63731: CALL 65867 0 3
// end ;
63735: GO 63689
63737: POP
63738: POP
// if horses then
63739: LD_VAR 0 5
63743: IFFALSE 63810
// for i = 1 to horses do
63745: LD_ADDR_VAR 0 11
63749: PUSH
63750: DOUBLE
63751: LD_INT 1
63753: DEC
63754: ST_TO_ADDR
63755: LD_VAR 0 5
63759: PUSH
63760: FOR_TO
63761: IFFALSE 63808
// begin hc_class := 21 ;
63763: LD_ADDR_OWVAR 28
63767: PUSH
63768: LD_INT 21
63770: ST_TO_ADDR
// hc_gallery :=  ;
63771: LD_ADDR_OWVAR 33
63775: PUSH
63776: LD_STRING 
63778: ST_TO_ADDR
// animal := CreateHuman ;
63779: LD_ADDR_VAR 0 12
63783: PUSH
63784: CALL_OW 44
63788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63789: LD_VAR 0 12
63793: PPUSH
63794: LD_VAR 0 8
63798: PPUSH
63799: LD_INT 0
63801: PPUSH
63802: CALL 65867 0 3
// end ;
63806: GO 63760
63808: POP
63809: POP
// if birds then
63810: LD_VAR 0 1
63814: IFFALSE 63881
// for i = 1 to birds do
63816: LD_ADDR_VAR 0 11
63820: PUSH
63821: DOUBLE
63822: LD_INT 1
63824: DEC
63825: ST_TO_ADDR
63826: LD_VAR 0 1
63830: PUSH
63831: FOR_TO
63832: IFFALSE 63879
// begin hc_class := 18 ;
63834: LD_ADDR_OWVAR 28
63838: PUSH
63839: LD_INT 18
63841: ST_TO_ADDR
// hc_gallery =  ;
63842: LD_ADDR_OWVAR 33
63846: PUSH
63847: LD_STRING 
63849: ST_TO_ADDR
// animal := CreateHuman ;
63850: LD_ADDR_VAR 0 12
63854: PUSH
63855: CALL_OW 44
63859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63860: LD_VAR 0 12
63864: PPUSH
63865: LD_VAR 0 8
63869: PPUSH
63870: LD_INT 0
63872: PPUSH
63873: CALL 65867 0 3
// end ;
63877: GO 63831
63879: POP
63880: POP
// if tigers then
63881: LD_VAR 0 2
63885: IFFALSE 63969
// for i = 1 to tigers do
63887: LD_ADDR_VAR 0 11
63891: PUSH
63892: DOUBLE
63893: LD_INT 1
63895: DEC
63896: ST_TO_ADDR
63897: LD_VAR 0 2
63901: PUSH
63902: FOR_TO
63903: IFFALSE 63967
// begin hc_class = class_tiger ;
63905: LD_ADDR_OWVAR 28
63909: PUSH
63910: LD_INT 14
63912: ST_TO_ADDR
// hc_gallery =  ;
63913: LD_ADDR_OWVAR 33
63917: PUSH
63918: LD_STRING 
63920: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63921: LD_ADDR_OWVAR 35
63925: PUSH
63926: LD_INT 7
63928: NEG
63929: PPUSH
63930: LD_INT 7
63932: PPUSH
63933: CALL_OW 12
63937: ST_TO_ADDR
// animal := CreateHuman ;
63938: LD_ADDR_VAR 0 12
63942: PUSH
63943: CALL_OW 44
63947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63948: LD_VAR 0 12
63952: PPUSH
63953: LD_VAR 0 8
63957: PPUSH
63958: LD_INT 0
63960: PPUSH
63961: CALL 65867 0 3
// end ;
63965: GO 63902
63967: POP
63968: POP
// if apemans then
63969: LD_VAR 0 3
63973: IFFALSE 64096
// for i = 1 to apemans do
63975: LD_ADDR_VAR 0 11
63979: PUSH
63980: DOUBLE
63981: LD_INT 1
63983: DEC
63984: ST_TO_ADDR
63985: LD_VAR 0 3
63989: PUSH
63990: FOR_TO
63991: IFFALSE 64094
// begin hc_class = class_apeman ;
63993: LD_ADDR_OWVAR 28
63997: PUSH
63998: LD_INT 12
64000: ST_TO_ADDR
// hc_gallery =  ;
64001: LD_ADDR_OWVAR 33
64005: PUSH
64006: LD_STRING 
64008: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64009: LD_ADDR_OWVAR 35
64013: PUSH
64014: LD_INT 2
64016: NEG
64017: PPUSH
64018: LD_INT 2
64020: PPUSH
64021: CALL_OW 12
64025: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64026: LD_ADDR_OWVAR 31
64030: PUSH
64031: LD_INT 1
64033: PPUSH
64034: LD_INT 3
64036: PPUSH
64037: CALL_OW 12
64041: PUSH
64042: LD_INT 1
64044: PPUSH
64045: LD_INT 3
64047: PPUSH
64048: CALL_OW 12
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: ST_TO_ADDR
// animal := CreateHuman ;
64065: LD_ADDR_VAR 0 12
64069: PUSH
64070: CALL_OW 44
64074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64075: LD_VAR 0 12
64079: PPUSH
64080: LD_VAR 0 8
64084: PPUSH
64085: LD_INT 0
64087: PPUSH
64088: CALL 65867 0 3
// end ;
64092: GO 63990
64094: POP
64095: POP
// if enchidnas then
64096: LD_VAR 0 4
64100: IFFALSE 64167
// for i = 1 to enchidnas do
64102: LD_ADDR_VAR 0 11
64106: PUSH
64107: DOUBLE
64108: LD_INT 1
64110: DEC
64111: ST_TO_ADDR
64112: LD_VAR 0 4
64116: PUSH
64117: FOR_TO
64118: IFFALSE 64165
// begin hc_class = 13 ;
64120: LD_ADDR_OWVAR 28
64124: PUSH
64125: LD_INT 13
64127: ST_TO_ADDR
// hc_gallery =  ;
64128: LD_ADDR_OWVAR 33
64132: PUSH
64133: LD_STRING 
64135: ST_TO_ADDR
// animal := CreateHuman ;
64136: LD_ADDR_VAR 0 12
64140: PUSH
64141: CALL_OW 44
64145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64146: LD_VAR 0 12
64150: PPUSH
64151: LD_VAR 0 8
64155: PPUSH
64156: LD_INT 0
64158: PPUSH
64159: CALL 65867 0 3
// end ;
64163: GO 64117
64165: POP
64166: POP
// if fishes then
64167: LD_VAR 0 7
64171: IFFALSE 64238
// for i = 1 to fishes do
64173: LD_ADDR_VAR 0 11
64177: PUSH
64178: DOUBLE
64179: LD_INT 1
64181: DEC
64182: ST_TO_ADDR
64183: LD_VAR 0 7
64187: PUSH
64188: FOR_TO
64189: IFFALSE 64236
// begin hc_class = 20 ;
64191: LD_ADDR_OWVAR 28
64195: PUSH
64196: LD_INT 20
64198: ST_TO_ADDR
// hc_gallery =  ;
64199: LD_ADDR_OWVAR 33
64203: PUSH
64204: LD_STRING 
64206: ST_TO_ADDR
// animal := CreateHuman ;
64207: LD_ADDR_VAR 0 12
64211: PUSH
64212: CALL_OW 44
64216: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64217: LD_VAR 0 12
64221: PPUSH
64222: LD_VAR 0 9
64226: PPUSH
64227: LD_INT 0
64229: PPUSH
64230: CALL 65867 0 3
// end ;
64234: GO 64188
64236: POP
64237: POP
// end ;
64238: LD_VAR 0 10
64242: RET
// export function WantHeal ( sci , unit ) ; begin
64243: LD_INT 0
64245: PPUSH
// if GetTaskList ( sci ) > 0 then
64246: LD_VAR 0 1
64250: PPUSH
64251: CALL_OW 437
64255: PUSH
64256: LD_INT 0
64258: GREATER
64259: IFFALSE 64329
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64261: LD_VAR 0 1
64265: PPUSH
64266: CALL_OW 437
64270: PUSH
64271: LD_INT 1
64273: ARRAY
64274: PUSH
64275: LD_INT 1
64277: ARRAY
64278: PUSH
64279: LD_STRING l
64281: EQUAL
64282: PUSH
64283: LD_VAR 0 1
64287: PPUSH
64288: CALL_OW 437
64292: PUSH
64293: LD_INT 1
64295: ARRAY
64296: PUSH
64297: LD_INT 4
64299: ARRAY
64300: PUSH
64301: LD_VAR 0 2
64305: EQUAL
64306: AND
64307: IFFALSE 64319
// result := true else
64309: LD_ADDR_VAR 0 3
64313: PUSH
64314: LD_INT 1
64316: ST_TO_ADDR
64317: GO 64327
// result := false ;
64319: LD_ADDR_VAR 0 3
64323: PUSH
64324: LD_INT 0
64326: ST_TO_ADDR
// end else
64327: GO 64337
// result := false ;
64329: LD_ADDR_VAR 0 3
64333: PUSH
64334: LD_INT 0
64336: ST_TO_ADDR
// end ;
64337: LD_VAR 0 3
64341: RET
// export function HealTarget ( sci ) ; begin
64342: LD_INT 0
64344: PPUSH
// if not sci then
64345: LD_VAR 0 1
64349: NOT
64350: IFFALSE 64354
// exit ;
64352: GO 64419
// result := 0 ;
64354: LD_ADDR_VAR 0 2
64358: PUSH
64359: LD_INT 0
64361: ST_TO_ADDR
// if GetTaskList ( sci ) then
64362: LD_VAR 0 1
64366: PPUSH
64367: CALL_OW 437
64371: IFFALSE 64419
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64373: LD_VAR 0 1
64377: PPUSH
64378: CALL_OW 437
64382: PUSH
64383: LD_INT 1
64385: ARRAY
64386: PUSH
64387: LD_INT 1
64389: ARRAY
64390: PUSH
64391: LD_STRING l
64393: EQUAL
64394: IFFALSE 64419
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64396: LD_ADDR_VAR 0 2
64400: PUSH
64401: LD_VAR 0 1
64405: PPUSH
64406: CALL_OW 437
64410: PUSH
64411: LD_INT 1
64413: ARRAY
64414: PUSH
64415: LD_INT 4
64417: ARRAY
64418: ST_TO_ADDR
// end ;
64419: LD_VAR 0 2
64423: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64424: LD_INT 0
64426: PPUSH
64427: PPUSH
64428: PPUSH
64429: PPUSH
// if not base_units then
64430: LD_VAR 0 1
64434: NOT
64435: IFFALSE 64439
// exit ;
64437: GO 64526
// result := false ;
64439: LD_ADDR_VAR 0 2
64443: PUSH
64444: LD_INT 0
64446: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64447: LD_ADDR_VAR 0 5
64451: PUSH
64452: LD_VAR 0 1
64456: PPUSH
64457: LD_INT 21
64459: PUSH
64460: LD_INT 3
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PPUSH
64467: CALL_OW 72
64471: ST_TO_ADDR
// if not tmp then
64472: LD_VAR 0 5
64476: NOT
64477: IFFALSE 64481
// exit ;
64479: GO 64526
// for i in tmp do
64481: LD_ADDR_VAR 0 3
64485: PUSH
64486: LD_VAR 0 5
64490: PUSH
64491: FOR_IN
64492: IFFALSE 64524
// begin result := EnemyInRange ( i , 22 ) ;
64494: LD_ADDR_VAR 0 2
64498: PUSH
64499: LD_VAR 0 3
64503: PPUSH
64504: LD_INT 22
64506: PPUSH
64507: CALL 62124 0 2
64511: ST_TO_ADDR
// if result then
64512: LD_VAR 0 2
64516: IFFALSE 64522
// exit ;
64518: POP
64519: POP
64520: GO 64526
// end ;
64522: GO 64491
64524: POP
64525: POP
// end ;
64526: LD_VAR 0 2
64530: RET
// export function FilterByTag ( units , tag ) ; begin
64531: LD_INT 0
64533: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64534: LD_ADDR_VAR 0 3
64538: PUSH
64539: LD_VAR 0 1
64543: PPUSH
64544: LD_INT 120
64546: PUSH
64547: LD_VAR 0 2
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PPUSH
64556: CALL_OW 72
64560: ST_TO_ADDR
// end ;
64561: LD_VAR 0 3
64565: RET
// export function IsDriver ( un ) ; begin
64566: LD_INT 0
64568: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64569: LD_ADDR_VAR 0 2
64573: PUSH
64574: LD_VAR 0 1
64578: PUSH
64579: LD_INT 55
64581: PUSH
64582: EMPTY
64583: LIST
64584: PPUSH
64585: CALL_OW 69
64589: IN
64590: ST_TO_ADDR
// end ;
64591: LD_VAR 0 2
64595: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64596: LD_INT 0
64598: PPUSH
64599: PPUSH
// list := [ ] ;
64600: LD_ADDR_VAR 0 5
64604: PUSH
64605: EMPTY
64606: ST_TO_ADDR
// case d of 0 :
64607: LD_VAR 0 3
64611: PUSH
64612: LD_INT 0
64614: DOUBLE
64615: EQUAL
64616: IFTRUE 64620
64618: GO 64753
64620: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64621: LD_ADDR_VAR 0 5
64625: PUSH
64626: LD_VAR 0 1
64630: PUSH
64631: LD_INT 4
64633: MINUS
64634: PUSH
64635: LD_VAR 0 2
64639: PUSH
64640: LD_INT 4
64642: MINUS
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: LIST
64651: PUSH
64652: LD_VAR 0 1
64656: PUSH
64657: LD_INT 3
64659: MINUS
64660: PUSH
64661: LD_VAR 0 2
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: LIST
64673: PUSH
64674: LD_VAR 0 1
64678: PUSH
64679: LD_INT 4
64681: PLUS
64682: PUSH
64683: LD_VAR 0 2
64687: PUSH
64688: LD_INT 4
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: LIST
64695: PUSH
64696: LD_VAR 0 1
64700: PUSH
64701: LD_INT 3
64703: PLUS
64704: PUSH
64705: LD_VAR 0 2
64709: PUSH
64710: LD_INT 3
64712: PLUS
64713: PUSH
64714: LD_INT 5
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: PUSH
64722: LD_VAR 0 1
64726: PUSH
64727: LD_VAR 0 2
64731: PUSH
64732: LD_INT 4
64734: PLUS
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: LIST
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: ST_TO_ADDR
// end ; 1 :
64751: GO 65451
64753: LD_INT 1
64755: DOUBLE
64756: EQUAL
64757: IFTRUE 64761
64759: GO 64894
64761: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64762: LD_ADDR_VAR 0 5
64766: PUSH
64767: LD_VAR 0 1
64771: PUSH
64772: LD_VAR 0 2
64776: PUSH
64777: LD_INT 4
64779: MINUS
64780: PUSH
64781: LD_INT 3
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: LIST
64788: PUSH
64789: LD_VAR 0 1
64793: PUSH
64794: LD_INT 3
64796: MINUS
64797: PUSH
64798: LD_VAR 0 2
64802: PUSH
64803: LD_INT 3
64805: MINUS
64806: PUSH
64807: LD_INT 2
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: LIST
64814: PUSH
64815: LD_VAR 0 1
64819: PUSH
64820: LD_INT 4
64822: MINUS
64823: PUSH
64824: LD_VAR 0 2
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: LIST
64836: PUSH
64837: LD_VAR 0 1
64841: PUSH
64842: LD_VAR 0 2
64846: PUSH
64847: LD_INT 3
64849: PLUS
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: PUSH
64859: LD_VAR 0 1
64863: PUSH
64864: LD_INT 4
64866: PLUS
64867: PUSH
64868: LD_VAR 0 2
64872: PUSH
64873: LD_INT 4
64875: PLUS
64876: PUSH
64877: LD_INT 5
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: ST_TO_ADDR
// end ; 2 :
64892: GO 65451
64894: LD_INT 2
64896: DOUBLE
64897: EQUAL
64898: IFTRUE 64902
64900: GO 65031
64902: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64903: LD_ADDR_VAR 0 5
64907: PUSH
64908: LD_VAR 0 1
64912: PUSH
64913: LD_VAR 0 2
64917: PUSH
64918: LD_INT 3
64920: MINUS
64921: PUSH
64922: LD_INT 3
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: PUSH
64930: LD_VAR 0 1
64934: PUSH
64935: LD_INT 4
64937: PLUS
64938: PUSH
64939: LD_VAR 0 2
64943: PUSH
64944: LD_INT 4
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: PUSH
64952: LD_VAR 0 1
64956: PUSH
64957: LD_VAR 0 2
64961: PUSH
64962: LD_INT 4
64964: PLUS
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: PUSH
64974: LD_VAR 0 1
64978: PUSH
64979: LD_INT 3
64981: MINUS
64982: PUSH
64983: LD_VAR 0 2
64987: PUSH
64988: LD_INT 1
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: PUSH
64996: LD_VAR 0 1
65000: PUSH
65001: LD_INT 4
65003: MINUS
65004: PUSH
65005: LD_VAR 0 2
65009: PUSH
65010: LD_INT 4
65012: MINUS
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: ST_TO_ADDR
// end ; 3 :
65029: GO 65451
65031: LD_INT 3
65033: DOUBLE
65034: EQUAL
65035: IFTRUE 65039
65037: GO 65172
65039: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65040: LD_ADDR_VAR 0 5
65044: PUSH
65045: LD_VAR 0 1
65049: PUSH
65050: LD_INT 3
65052: PLUS
65053: PUSH
65054: LD_VAR 0 2
65058: PUSH
65059: LD_INT 4
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: LIST
65066: PUSH
65067: LD_VAR 0 1
65071: PUSH
65072: LD_INT 4
65074: PLUS
65075: PUSH
65076: LD_VAR 0 2
65080: PUSH
65081: LD_INT 4
65083: PLUS
65084: PUSH
65085: LD_INT 5
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: PUSH
65093: LD_VAR 0 1
65097: PUSH
65098: LD_INT 4
65100: MINUS
65101: PUSH
65102: LD_VAR 0 2
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: PUSH
65115: LD_VAR 0 1
65119: PUSH
65120: LD_VAR 0 2
65124: PUSH
65125: LD_INT 4
65127: MINUS
65128: PUSH
65129: LD_INT 3
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: PUSH
65137: LD_VAR 0 1
65141: PUSH
65142: LD_INT 3
65144: MINUS
65145: PUSH
65146: LD_VAR 0 2
65150: PUSH
65151: LD_INT 3
65153: MINUS
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: LIST
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: ST_TO_ADDR
// end ; 4 :
65170: GO 65451
65172: LD_INT 4
65174: DOUBLE
65175: EQUAL
65176: IFTRUE 65180
65178: GO 65313
65180: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65181: LD_ADDR_VAR 0 5
65185: PUSH
65186: LD_VAR 0 1
65190: PUSH
65191: LD_VAR 0 2
65195: PUSH
65196: LD_INT 4
65198: PLUS
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: PUSH
65208: LD_VAR 0 1
65212: PUSH
65213: LD_INT 3
65215: PLUS
65216: PUSH
65217: LD_VAR 0 2
65221: PUSH
65222: LD_INT 3
65224: PLUS
65225: PUSH
65226: LD_INT 5
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: LIST
65233: PUSH
65234: LD_VAR 0 1
65238: PUSH
65239: LD_INT 4
65241: PLUS
65242: PUSH
65243: LD_VAR 0 2
65247: PUSH
65248: LD_INT 4
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: LIST
65255: PUSH
65256: LD_VAR 0 1
65260: PUSH
65261: LD_VAR 0 2
65265: PUSH
65266: LD_INT 3
65268: MINUS
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: LIST
65277: PUSH
65278: LD_VAR 0 1
65282: PUSH
65283: LD_INT 4
65285: MINUS
65286: PUSH
65287: LD_VAR 0 2
65291: PUSH
65292: LD_INT 4
65294: MINUS
65295: PUSH
65296: LD_INT 2
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: ST_TO_ADDR
// end ; 5 :
65311: GO 65451
65313: LD_INT 5
65315: DOUBLE
65316: EQUAL
65317: IFTRUE 65321
65319: GO 65450
65321: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65322: LD_ADDR_VAR 0 5
65326: PUSH
65327: LD_VAR 0 1
65331: PUSH
65332: LD_INT 4
65334: MINUS
65335: PUSH
65336: LD_VAR 0 2
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: LIST
65348: PUSH
65349: LD_VAR 0 1
65353: PUSH
65354: LD_VAR 0 2
65358: PUSH
65359: LD_INT 4
65361: MINUS
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: PUSH
65371: LD_VAR 0 1
65375: PUSH
65376: LD_INT 4
65378: PLUS
65379: PUSH
65380: LD_VAR 0 2
65384: PUSH
65385: LD_INT 4
65387: PLUS
65388: PUSH
65389: LD_INT 5
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: LIST
65396: PUSH
65397: LD_VAR 0 1
65401: PUSH
65402: LD_INT 3
65404: PLUS
65405: PUSH
65406: LD_VAR 0 2
65410: PUSH
65411: LD_INT 4
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: PUSH
65419: LD_VAR 0 1
65423: PUSH
65424: LD_VAR 0 2
65428: PUSH
65429: LD_INT 3
65431: PLUS
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: LIST
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: ST_TO_ADDR
// end ; end ;
65448: GO 65451
65450: POP
// result := list ;
65451: LD_ADDR_VAR 0 4
65455: PUSH
65456: LD_VAR 0 5
65460: ST_TO_ADDR
// end ;
65461: LD_VAR 0 4
65465: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65466: LD_INT 0
65468: PPUSH
65469: PPUSH
65470: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65471: LD_VAR 0 1
65475: NOT
65476: PUSH
65477: LD_VAR 0 2
65481: PUSH
65482: LD_INT 1
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: LD_INT 3
65490: PUSH
65491: LD_INT 4
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: IN
65500: NOT
65501: OR
65502: IFFALSE 65506
// exit ;
65504: GO 65589
// tmp := [ ] ;
65506: LD_ADDR_VAR 0 5
65510: PUSH
65511: EMPTY
65512: ST_TO_ADDR
// for i in units do
65513: LD_ADDR_VAR 0 4
65517: PUSH
65518: LD_VAR 0 1
65522: PUSH
65523: FOR_IN
65524: IFFALSE 65558
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65526: LD_ADDR_VAR 0 5
65530: PUSH
65531: LD_VAR 0 5
65535: PPUSH
65536: LD_VAR 0 4
65540: PPUSH
65541: LD_VAR 0 2
65545: PPUSH
65546: CALL_OW 259
65550: PPUSH
65551: CALL 66962 0 2
65555: ST_TO_ADDR
65556: GO 65523
65558: POP
65559: POP
// if not tmp then
65560: LD_VAR 0 5
65564: NOT
65565: IFFALSE 65569
// exit ;
65567: GO 65589
// result := SortListByListDesc ( units , tmp ) ;
65569: LD_ADDR_VAR 0 3
65573: PUSH
65574: LD_VAR 0 1
65578: PPUSH
65579: LD_VAR 0 5
65583: PPUSH
65584: CALL_OW 77
65588: ST_TO_ADDR
// end ;
65589: LD_VAR 0 3
65593: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65594: LD_INT 0
65596: PPUSH
65597: PPUSH
65598: PPUSH
// result := false ;
65599: LD_ADDR_VAR 0 3
65603: PUSH
65604: LD_INT 0
65606: ST_TO_ADDR
// if not building then
65607: LD_VAR 0 2
65611: NOT
65612: IFFALSE 65616
// exit ;
65614: GO 65754
// x := GetX ( building ) ;
65616: LD_ADDR_VAR 0 4
65620: PUSH
65621: LD_VAR 0 2
65625: PPUSH
65626: CALL_OW 250
65630: ST_TO_ADDR
// y := GetY ( building ) ;
65631: LD_ADDR_VAR 0 5
65635: PUSH
65636: LD_VAR 0 2
65640: PPUSH
65641: CALL_OW 251
65645: ST_TO_ADDR
// if not x or not y then
65646: LD_VAR 0 4
65650: NOT
65651: PUSH
65652: LD_VAR 0 5
65656: NOT
65657: OR
65658: IFFALSE 65662
// exit ;
65660: GO 65754
// if GetTaskList ( unit ) then
65662: LD_VAR 0 1
65666: PPUSH
65667: CALL_OW 437
65671: IFFALSE 65754
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65673: LD_STRING e
65675: PUSH
65676: LD_VAR 0 1
65680: PPUSH
65681: CALL_OW 437
65685: PUSH
65686: LD_INT 1
65688: ARRAY
65689: PUSH
65690: LD_INT 1
65692: ARRAY
65693: EQUAL
65694: PUSH
65695: LD_VAR 0 4
65699: PUSH
65700: LD_VAR 0 1
65704: PPUSH
65705: CALL_OW 437
65709: PUSH
65710: LD_INT 1
65712: ARRAY
65713: PUSH
65714: LD_INT 2
65716: ARRAY
65717: EQUAL
65718: AND
65719: PUSH
65720: LD_VAR 0 5
65724: PUSH
65725: LD_VAR 0 1
65729: PPUSH
65730: CALL_OW 437
65734: PUSH
65735: LD_INT 1
65737: ARRAY
65738: PUSH
65739: LD_INT 3
65741: ARRAY
65742: EQUAL
65743: AND
65744: IFFALSE 65754
// result := true end ;
65746: LD_ADDR_VAR 0 3
65750: PUSH
65751: LD_INT 1
65753: ST_TO_ADDR
// end ;
65754: LD_VAR 0 3
65758: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65759: LD_INT 0
65761: PPUSH
// result := false ;
65762: LD_ADDR_VAR 0 4
65766: PUSH
65767: LD_INT 0
65769: ST_TO_ADDR
// if GetTaskList ( unit ) then
65770: LD_VAR 0 1
65774: PPUSH
65775: CALL_OW 437
65779: IFFALSE 65862
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65781: LD_STRING M
65783: PUSH
65784: LD_VAR 0 1
65788: PPUSH
65789: CALL_OW 437
65793: PUSH
65794: LD_INT 1
65796: ARRAY
65797: PUSH
65798: LD_INT 1
65800: ARRAY
65801: EQUAL
65802: PUSH
65803: LD_VAR 0 2
65807: PUSH
65808: LD_VAR 0 1
65812: PPUSH
65813: CALL_OW 437
65817: PUSH
65818: LD_INT 1
65820: ARRAY
65821: PUSH
65822: LD_INT 2
65824: ARRAY
65825: EQUAL
65826: AND
65827: PUSH
65828: LD_VAR 0 3
65832: PUSH
65833: LD_VAR 0 1
65837: PPUSH
65838: CALL_OW 437
65842: PUSH
65843: LD_INT 1
65845: ARRAY
65846: PUSH
65847: LD_INT 3
65849: ARRAY
65850: EQUAL
65851: AND
65852: IFFALSE 65862
// result := true ;
65854: LD_ADDR_VAR 0 4
65858: PUSH
65859: LD_INT 1
65861: ST_TO_ADDR
// end ; end ;
65862: LD_VAR 0 4
65866: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65867: LD_INT 0
65869: PPUSH
65870: PPUSH
65871: PPUSH
65872: PPUSH
// if not unit or not area then
65873: LD_VAR 0 1
65877: NOT
65878: PUSH
65879: LD_VAR 0 2
65883: NOT
65884: OR
65885: IFFALSE 65889
// exit ;
65887: GO 66065
// tmp := AreaToList ( area , i ) ;
65889: LD_ADDR_VAR 0 6
65893: PUSH
65894: LD_VAR 0 2
65898: PPUSH
65899: LD_VAR 0 5
65903: PPUSH
65904: CALL_OW 517
65908: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65909: LD_ADDR_VAR 0 5
65913: PUSH
65914: DOUBLE
65915: LD_INT 1
65917: DEC
65918: ST_TO_ADDR
65919: LD_VAR 0 6
65923: PUSH
65924: LD_INT 1
65926: ARRAY
65927: PUSH
65928: FOR_TO
65929: IFFALSE 66063
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65931: LD_ADDR_VAR 0 7
65935: PUSH
65936: LD_VAR 0 6
65940: PUSH
65941: LD_INT 1
65943: ARRAY
65944: PUSH
65945: LD_VAR 0 5
65949: ARRAY
65950: PUSH
65951: LD_VAR 0 6
65955: PUSH
65956: LD_INT 2
65958: ARRAY
65959: PUSH
65960: LD_VAR 0 5
65964: ARRAY
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65970: LD_INT 92
65972: PUSH
65973: LD_VAR 0 7
65977: PUSH
65978: LD_INT 1
65980: ARRAY
65981: PUSH
65982: LD_VAR 0 7
65986: PUSH
65987: LD_INT 2
65989: ARRAY
65990: PUSH
65991: LD_INT 2
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: PPUSH
66000: CALL_OW 69
66004: PUSH
66005: LD_INT 0
66007: EQUAL
66008: IFFALSE 66061
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66010: LD_VAR 0 1
66014: PPUSH
66015: LD_VAR 0 7
66019: PUSH
66020: LD_INT 1
66022: ARRAY
66023: PPUSH
66024: LD_VAR 0 7
66028: PUSH
66029: LD_INT 2
66031: ARRAY
66032: PPUSH
66033: LD_VAR 0 3
66037: PPUSH
66038: CALL_OW 48
// result := IsPlaced ( unit ) ;
66042: LD_ADDR_VAR 0 4
66046: PUSH
66047: LD_VAR 0 1
66051: PPUSH
66052: CALL_OW 305
66056: ST_TO_ADDR
// exit ;
66057: POP
66058: POP
66059: GO 66065
// end ; end ;
66061: GO 65928
66063: POP
66064: POP
// end ;
66065: LD_VAR 0 4
66069: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66070: LD_INT 0
66072: PPUSH
66073: PPUSH
66074: PPUSH
// if not side or side > 8 then
66075: LD_VAR 0 1
66079: NOT
66080: PUSH
66081: LD_VAR 0 1
66085: PUSH
66086: LD_INT 8
66088: GREATER
66089: OR
66090: IFFALSE 66094
// exit ;
66092: GO 66281
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66094: LD_ADDR_VAR 0 4
66098: PUSH
66099: LD_INT 22
66101: PUSH
66102: LD_VAR 0 1
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 21
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PPUSH
66125: CALL_OW 69
66129: ST_TO_ADDR
// if not tmp then
66130: LD_VAR 0 4
66134: NOT
66135: IFFALSE 66139
// exit ;
66137: GO 66281
// enable_addtolog := true ;
66139: LD_ADDR_OWVAR 81
66143: PUSH
66144: LD_INT 1
66146: ST_TO_ADDR
// AddToLog ( [ ) ;
66147: LD_STRING [
66149: PPUSH
66150: CALL_OW 561
// for i in tmp do
66154: LD_ADDR_VAR 0 3
66158: PUSH
66159: LD_VAR 0 4
66163: PUSH
66164: FOR_IN
66165: IFFALSE 66272
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66167: LD_STRING [
66169: PUSH
66170: LD_VAR 0 3
66174: PPUSH
66175: CALL_OW 266
66179: STR
66180: PUSH
66181: LD_STRING , 
66183: STR
66184: PUSH
66185: LD_VAR 0 3
66189: PPUSH
66190: CALL_OW 250
66194: STR
66195: PUSH
66196: LD_STRING , 
66198: STR
66199: PUSH
66200: LD_VAR 0 3
66204: PPUSH
66205: CALL_OW 251
66209: STR
66210: PUSH
66211: LD_STRING , 
66213: STR
66214: PUSH
66215: LD_VAR 0 3
66219: PPUSH
66220: CALL_OW 254
66224: STR
66225: PUSH
66226: LD_STRING , 
66228: STR
66229: PUSH
66230: LD_VAR 0 3
66234: PPUSH
66235: LD_INT 1
66237: PPUSH
66238: CALL_OW 268
66242: STR
66243: PUSH
66244: LD_STRING , 
66246: STR
66247: PUSH
66248: LD_VAR 0 3
66252: PPUSH
66253: LD_INT 2
66255: PPUSH
66256: CALL_OW 268
66260: STR
66261: PUSH
66262: LD_STRING ],
66264: STR
66265: PPUSH
66266: CALL_OW 561
// end ;
66270: GO 66164
66272: POP
66273: POP
// AddToLog ( ]; ) ;
66274: LD_STRING ];
66276: PPUSH
66277: CALL_OW 561
// end ;
66281: LD_VAR 0 2
66285: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66286: LD_INT 0
66288: PPUSH
66289: PPUSH
66290: PPUSH
66291: PPUSH
66292: PPUSH
// if not area or not rate or not max then
66293: LD_VAR 0 1
66297: NOT
66298: PUSH
66299: LD_VAR 0 2
66303: NOT
66304: OR
66305: PUSH
66306: LD_VAR 0 4
66310: NOT
66311: OR
66312: IFFALSE 66316
// exit ;
66314: GO 66505
// while 1 do
66316: LD_INT 1
66318: IFFALSE 66505
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66320: LD_ADDR_VAR 0 9
66324: PUSH
66325: LD_VAR 0 1
66329: PPUSH
66330: LD_INT 1
66332: PPUSH
66333: CALL_OW 287
66337: PUSH
66338: LD_INT 10
66340: MUL
66341: ST_TO_ADDR
// r := rate / 10 ;
66342: LD_ADDR_VAR 0 7
66346: PUSH
66347: LD_VAR 0 2
66351: PUSH
66352: LD_INT 10
66354: DIVREAL
66355: ST_TO_ADDR
// time := 1 1$00 ;
66356: LD_ADDR_VAR 0 8
66360: PUSH
66361: LD_INT 2100
66363: ST_TO_ADDR
// if amount < min then
66364: LD_VAR 0 9
66368: PUSH
66369: LD_VAR 0 3
66373: LESS
66374: IFFALSE 66392
// r := r * 2 else
66376: LD_ADDR_VAR 0 7
66380: PUSH
66381: LD_VAR 0 7
66385: PUSH
66386: LD_INT 2
66388: MUL
66389: ST_TO_ADDR
66390: GO 66418
// if amount > max then
66392: LD_VAR 0 9
66396: PUSH
66397: LD_VAR 0 4
66401: GREATER
66402: IFFALSE 66418
// r := r / 2 ;
66404: LD_ADDR_VAR 0 7
66408: PUSH
66409: LD_VAR 0 7
66413: PUSH
66414: LD_INT 2
66416: DIVREAL
66417: ST_TO_ADDR
// time := time / r ;
66418: LD_ADDR_VAR 0 8
66422: PUSH
66423: LD_VAR 0 8
66427: PUSH
66428: LD_VAR 0 7
66432: DIVREAL
66433: ST_TO_ADDR
// if time < 0 then
66434: LD_VAR 0 8
66438: PUSH
66439: LD_INT 0
66441: LESS
66442: IFFALSE 66459
// time := time * - 1 ;
66444: LD_ADDR_VAR 0 8
66448: PUSH
66449: LD_VAR 0 8
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: MUL
66458: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66459: LD_VAR 0 8
66463: PUSH
66464: LD_INT 35
66466: PPUSH
66467: LD_INT 875
66469: PPUSH
66470: CALL_OW 12
66474: PLUS
66475: PPUSH
66476: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66480: LD_INT 1
66482: PPUSH
66483: LD_INT 5
66485: PPUSH
66486: CALL_OW 12
66490: PPUSH
66491: LD_VAR 0 1
66495: PPUSH
66496: LD_INT 1
66498: PPUSH
66499: CALL_OW 55
// end ;
66503: GO 66316
// end ;
66505: LD_VAR 0 5
66509: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66510: LD_INT 0
66512: PPUSH
66513: PPUSH
66514: PPUSH
66515: PPUSH
66516: PPUSH
66517: PPUSH
66518: PPUSH
66519: PPUSH
// if not turrets or not factories then
66520: LD_VAR 0 1
66524: NOT
66525: PUSH
66526: LD_VAR 0 2
66530: NOT
66531: OR
66532: IFFALSE 66536
// exit ;
66534: GO 66843
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66536: LD_ADDR_VAR 0 10
66540: PUSH
66541: LD_INT 5
66543: PUSH
66544: LD_INT 6
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 2
66553: PUSH
66554: LD_INT 4
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: LD_INT 5
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 24
66578: PUSH
66579: LD_INT 25
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 23
66588: PUSH
66589: LD_INT 27
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 42
66602: PUSH
66603: LD_INT 43
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 44
66612: PUSH
66613: LD_INT 46
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 45
66622: PUSH
66623: LD_INT 47
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: LIST
66639: ST_TO_ADDR
// result := [ ] ;
66640: LD_ADDR_VAR 0 3
66644: PUSH
66645: EMPTY
66646: ST_TO_ADDR
// for i in turrets do
66647: LD_ADDR_VAR 0 4
66651: PUSH
66652: LD_VAR 0 1
66656: PUSH
66657: FOR_IN
66658: IFFALSE 66841
// begin nat := GetNation ( i ) ;
66660: LD_ADDR_VAR 0 7
66664: PUSH
66665: LD_VAR 0 4
66669: PPUSH
66670: CALL_OW 248
66674: ST_TO_ADDR
// weapon := 0 ;
66675: LD_ADDR_VAR 0 8
66679: PUSH
66680: LD_INT 0
66682: ST_TO_ADDR
// if not nat then
66683: LD_VAR 0 7
66687: NOT
66688: IFFALSE 66692
// continue ;
66690: GO 66657
// for j in list [ nat ] do
66692: LD_ADDR_VAR 0 5
66696: PUSH
66697: LD_VAR 0 10
66701: PUSH
66702: LD_VAR 0 7
66706: ARRAY
66707: PUSH
66708: FOR_IN
66709: IFFALSE 66750
// if GetBWeapon ( i ) = j [ 1 ] then
66711: LD_VAR 0 4
66715: PPUSH
66716: CALL_OW 269
66720: PUSH
66721: LD_VAR 0 5
66725: PUSH
66726: LD_INT 1
66728: ARRAY
66729: EQUAL
66730: IFFALSE 66748
// begin weapon := j [ 2 ] ;
66732: LD_ADDR_VAR 0 8
66736: PUSH
66737: LD_VAR 0 5
66741: PUSH
66742: LD_INT 2
66744: ARRAY
66745: ST_TO_ADDR
// break ;
66746: GO 66750
// end ;
66748: GO 66708
66750: POP
66751: POP
// if not weapon then
66752: LD_VAR 0 8
66756: NOT
66757: IFFALSE 66761
// continue ;
66759: GO 66657
// for k in factories do
66761: LD_ADDR_VAR 0 6
66765: PUSH
66766: LD_VAR 0 2
66770: PUSH
66771: FOR_IN
66772: IFFALSE 66837
// begin weapons := AvailableWeaponList ( k ) ;
66774: LD_ADDR_VAR 0 9
66778: PUSH
66779: LD_VAR 0 6
66783: PPUSH
66784: CALL_OW 478
66788: ST_TO_ADDR
// if not weapons then
66789: LD_VAR 0 9
66793: NOT
66794: IFFALSE 66798
// continue ;
66796: GO 66771
// if weapon in weapons then
66798: LD_VAR 0 8
66802: PUSH
66803: LD_VAR 0 9
66807: IN
66808: IFFALSE 66835
// begin result := [ i , weapon ] ;
66810: LD_ADDR_VAR 0 3
66814: PUSH
66815: LD_VAR 0 4
66819: PUSH
66820: LD_VAR 0 8
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// exit ;
66829: POP
66830: POP
66831: POP
66832: POP
66833: GO 66843
// end ; end ;
66835: GO 66771
66837: POP
66838: POP
// end ;
66839: GO 66657
66841: POP
66842: POP
// end ;
66843: LD_VAR 0 3
66847: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66848: LD_INT 0
66850: PPUSH
// if not side or side > 8 then
66851: LD_VAR 0 3
66855: NOT
66856: PUSH
66857: LD_VAR 0 3
66861: PUSH
66862: LD_INT 8
66864: GREATER
66865: OR
66866: IFFALSE 66870
// exit ;
66868: GO 66929
// if not range then
66870: LD_VAR 0 4
66874: NOT
66875: IFFALSE 66886
// range := - 12 ;
66877: LD_ADDR_VAR 0 4
66881: PUSH
66882: LD_INT 12
66884: NEG
66885: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66886: LD_VAR 0 1
66890: PPUSH
66891: LD_VAR 0 2
66895: PPUSH
66896: LD_VAR 0 3
66900: PPUSH
66901: LD_VAR 0 4
66905: PPUSH
66906: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66910: LD_VAR 0 1
66914: PPUSH
66915: LD_VAR 0 2
66919: PPUSH
66920: LD_VAR 0 3
66924: PPUSH
66925: CALL_OW 331
// end ;
66929: LD_VAR 0 5
66933: RET
// export function Video ( mode ) ; begin
66934: LD_INT 0
66936: PPUSH
// ingame_video = mode ;
66937: LD_ADDR_OWVAR 52
66941: PUSH
66942: LD_VAR 0 1
66946: ST_TO_ADDR
// interface_hidden = mode ;
66947: LD_ADDR_OWVAR 54
66951: PUSH
66952: LD_VAR 0 1
66956: ST_TO_ADDR
// end ;
66957: LD_VAR 0 2
66961: RET
// export function Join ( array , element ) ; begin
66962: LD_INT 0
66964: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66965: LD_ADDR_VAR 0 3
66969: PUSH
66970: LD_VAR 0 1
66974: PPUSH
66975: LD_VAR 0 1
66979: PUSH
66980: LD_INT 1
66982: PLUS
66983: PPUSH
66984: LD_VAR 0 2
66988: PPUSH
66989: CALL_OW 1
66993: ST_TO_ADDR
// end ;
66994: LD_VAR 0 3
66998: RET
// export function JoinUnion ( array , element ) ; begin
66999: LD_INT 0
67001: PPUSH
// result := array union element ;
67002: LD_ADDR_VAR 0 3
67006: PUSH
67007: LD_VAR 0 1
67011: PUSH
67012: LD_VAR 0 2
67016: UNION
67017: ST_TO_ADDR
// end ;
67018: LD_VAR 0 3
67022: RET
// export function GetBehemoths ( side ) ; begin
67023: LD_INT 0
67025: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67026: LD_ADDR_VAR 0 2
67030: PUSH
67031: LD_INT 22
67033: PUSH
67034: LD_VAR 0 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 31
67045: PUSH
67046: LD_INT 25
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PPUSH
67057: CALL_OW 69
67061: ST_TO_ADDR
// end ;
67062: LD_VAR 0 2
67066: RET
// export function Shuffle ( array ) ; var i , index ; begin
67067: LD_INT 0
67069: PPUSH
67070: PPUSH
67071: PPUSH
// result := [ ] ;
67072: LD_ADDR_VAR 0 2
67076: PUSH
67077: EMPTY
67078: ST_TO_ADDR
// if not array then
67079: LD_VAR 0 1
67083: NOT
67084: IFFALSE 67088
// exit ;
67086: GO 67187
// Randomize ;
67088: CALL_OW 10
// for i = array downto 1 do
67092: LD_ADDR_VAR 0 3
67096: PUSH
67097: DOUBLE
67098: LD_VAR 0 1
67102: INC
67103: ST_TO_ADDR
67104: LD_INT 1
67106: PUSH
67107: FOR_DOWNTO
67108: IFFALSE 67185
// begin index := rand ( 1 , array ) ;
67110: LD_ADDR_VAR 0 4
67114: PUSH
67115: LD_INT 1
67117: PPUSH
67118: LD_VAR 0 1
67122: PPUSH
67123: CALL_OW 12
67127: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: LD_VAR 0 2
67137: PPUSH
67138: LD_VAR 0 2
67142: PUSH
67143: LD_INT 1
67145: PLUS
67146: PPUSH
67147: LD_VAR 0 1
67151: PUSH
67152: LD_VAR 0 4
67156: ARRAY
67157: PPUSH
67158: CALL_OW 2
67162: ST_TO_ADDR
// array := Delete ( array , index ) ;
67163: LD_ADDR_VAR 0 1
67167: PUSH
67168: LD_VAR 0 1
67172: PPUSH
67173: LD_VAR 0 4
67177: PPUSH
67178: CALL_OW 3
67182: ST_TO_ADDR
// end ;
67183: GO 67107
67185: POP
67186: POP
// end ;
67187: LD_VAR 0 2
67191: RET
// export function GetBaseMaterials ( base ) ; begin
67192: LD_INT 0
67194: PPUSH
// result := [ 0 , 0 , 0 ] ;
67195: LD_ADDR_VAR 0 2
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: LIST
67213: ST_TO_ADDR
// if not base then
67214: LD_VAR 0 1
67218: NOT
67219: IFFALSE 67223
// exit ;
67221: GO 67272
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67223: LD_ADDR_VAR 0 2
67227: PUSH
67228: LD_VAR 0 1
67232: PPUSH
67233: LD_INT 1
67235: PPUSH
67236: CALL_OW 275
67240: PUSH
67241: LD_VAR 0 1
67245: PPUSH
67246: LD_INT 2
67248: PPUSH
67249: CALL_OW 275
67253: PUSH
67254: LD_VAR 0 1
67258: PPUSH
67259: LD_INT 3
67261: PPUSH
67262: CALL_OW 275
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// end ;
67272: LD_VAR 0 2
67276: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67277: LD_INT 0
67279: PPUSH
67280: PPUSH
// result := array ;
67281: LD_ADDR_VAR 0 3
67285: PUSH
67286: LD_VAR 0 1
67290: ST_TO_ADDR
// if size >= result then
67291: LD_VAR 0 2
67295: PUSH
67296: LD_VAR 0 3
67300: GREATEREQUAL
67301: IFFALSE 67305
// exit ;
67303: GO 67355
// if size then
67305: LD_VAR 0 2
67309: IFFALSE 67355
// for i := array downto size do
67311: LD_ADDR_VAR 0 4
67315: PUSH
67316: DOUBLE
67317: LD_VAR 0 1
67321: INC
67322: ST_TO_ADDR
67323: LD_VAR 0 2
67327: PUSH
67328: FOR_DOWNTO
67329: IFFALSE 67353
// result := Delete ( result , result ) ;
67331: LD_ADDR_VAR 0 3
67335: PUSH
67336: LD_VAR 0 3
67340: PPUSH
67341: LD_VAR 0 3
67345: PPUSH
67346: CALL_OW 3
67350: ST_TO_ADDR
67351: GO 67328
67353: POP
67354: POP
// end ;
67355: LD_VAR 0 3
67359: RET
// export function ComExit ( unit ) ; var tmp ; begin
67360: LD_INT 0
67362: PPUSH
67363: PPUSH
// if not IsInUnit ( unit ) then
67364: LD_VAR 0 1
67368: PPUSH
67369: CALL_OW 310
67373: NOT
67374: IFFALSE 67378
// exit ;
67376: GO 67438
// tmp := IsInUnit ( unit ) ;
67378: LD_ADDR_VAR 0 3
67382: PUSH
67383: LD_VAR 0 1
67387: PPUSH
67388: CALL_OW 310
67392: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67393: LD_VAR 0 3
67397: PPUSH
67398: CALL_OW 247
67402: PUSH
67403: LD_INT 2
67405: EQUAL
67406: IFFALSE 67419
// ComExitVehicle ( unit ) else
67408: LD_VAR 0 1
67412: PPUSH
67413: CALL_OW 121
67417: GO 67428
// ComExitBuilding ( unit ) ;
67419: LD_VAR 0 1
67423: PPUSH
67424: CALL_OW 122
// result := tmp ;
67428: LD_ADDR_VAR 0 2
67432: PUSH
67433: LD_VAR 0 3
67437: ST_TO_ADDR
// end ;
67438: LD_VAR 0 2
67442: RET
// export function ComExitAll ( units ) ; var i ; begin
67443: LD_INT 0
67445: PPUSH
67446: PPUSH
// if not units then
67447: LD_VAR 0 1
67451: NOT
67452: IFFALSE 67456
// exit ;
67454: GO 67482
// for i in units do
67456: LD_ADDR_VAR 0 3
67460: PUSH
67461: LD_VAR 0 1
67465: PUSH
67466: FOR_IN
67467: IFFALSE 67480
// ComExit ( i ) ;
67469: LD_VAR 0 3
67473: PPUSH
67474: CALL 67360 0 1
67478: GO 67466
67480: POP
67481: POP
// end ;
67482: LD_VAR 0 2
67486: RET
// export function ResetHc ; begin
67487: LD_INT 0
67489: PPUSH
// InitHc ;
67490: CALL_OW 19
// hc_importance := 0 ;
67494: LD_ADDR_OWVAR 32
67498: PUSH
67499: LD_INT 0
67501: ST_TO_ADDR
// end ;
67502: LD_VAR 0 1
67506: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67507: LD_INT 0
67509: PPUSH
67510: PPUSH
67511: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67512: LD_ADDR_VAR 0 6
67516: PUSH
67517: LD_VAR 0 1
67521: PUSH
67522: LD_VAR 0 3
67526: PLUS
67527: PUSH
67528: LD_INT 2
67530: DIV
67531: ST_TO_ADDR
// if _x < 0 then
67532: LD_VAR 0 6
67536: PUSH
67537: LD_INT 0
67539: LESS
67540: IFFALSE 67557
// _x := _x * - 1 ;
67542: LD_ADDR_VAR 0 6
67546: PUSH
67547: LD_VAR 0 6
67551: PUSH
67552: LD_INT 1
67554: NEG
67555: MUL
67556: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67557: LD_ADDR_VAR 0 7
67561: PUSH
67562: LD_VAR 0 2
67566: PUSH
67567: LD_VAR 0 4
67571: PLUS
67572: PUSH
67573: LD_INT 2
67575: DIV
67576: ST_TO_ADDR
// if _y < 0 then
67577: LD_VAR 0 7
67581: PUSH
67582: LD_INT 0
67584: LESS
67585: IFFALSE 67602
// _y := _y * - 1 ;
67587: LD_ADDR_VAR 0 7
67591: PUSH
67592: LD_VAR 0 7
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: MUL
67601: ST_TO_ADDR
// result := [ _x , _y ] ;
67602: LD_ADDR_VAR 0 5
67606: PUSH
67607: LD_VAR 0 6
67611: PUSH
67612: LD_VAR 0 7
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// end ;
67621: LD_VAR 0 5
67625: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67626: LD_INT 0
67628: PPUSH
67629: PPUSH
67630: PPUSH
67631: PPUSH
// task := GetTaskList ( unit ) ;
67632: LD_ADDR_VAR 0 7
67636: PUSH
67637: LD_VAR 0 1
67641: PPUSH
67642: CALL_OW 437
67646: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67647: LD_VAR 0 7
67651: NOT
67652: PUSH
67653: LD_VAR 0 1
67657: PPUSH
67658: LD_VAR 0 2
67662: PPUSH
67663: CALL_OW 308
67667: NOT
67668: AND
67669: IFFALSE 67673
// exit ;
67671: GO 67791
// if IsInArea ( unit , area ) then
67673: LD_VAR 0 1
67677: PPUSH
67678: LD_VAR 0 2
67682: PPUSH
67683: CALL_OW 308
67687: IFFALSE 67705
// begin ComMoveToArea ( unit , goAway ) ;
67689: LD_VAR 0 1
67693: PPUSH
67694: LD_VAR 0 3
67698: PPUSH
67699: CALL_OW 113
// exit ;
67703: GO 67791
// end ; if task [ 1 ] [ 1 ] <> M then
67705: LD_VAR 0 7
67709: PUSH
67710: LD_INT 1
67712: ARRAY
67713: PUSH
67714: LD_INT 1
67716: ARRAY
67717: PUSH
67718: LD_STRING M
67720: NONEQUAL
67721: IFFALSE 67725
// exit ;
67723: GO 67791
// x := task [ 1 ] [ 2 ] ;
67725: LD_ADDR_VAR 0 5
67729: PUSH
67730: LD_VAR 0 7
67734: PUSH
67735: LD_INT 1
67737: ARRAY
67738: PUSH
67739: LD_INT 2
67741: ARRAY
67742: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67743: LD_ADDR_VAR 0 6
67747: PUSH
67748: LD_VAR 0 7
67752: PUSH
67753: LD_INT 1
67755: ARRAY
67756: PUSH
67757: LD_INT 3
67759: ARRAY
67760: ST_TO_ADDR
// if InArea ( x , y , area ) then
67761: LD_VAR 0 5
67765: PPUSH
67766: LD_VAR 0 6
67770: PPUSH
67771: LD_VAR 0 2
67775: PPUSH
67776: CALL_OW 309
67780: IFFALSE 67791
// ComStop ( unit ) ;
67782: LD_VAR 0 1
67786: PPUSH
67787: CALL_OW 141
// end ;
67791: LD_VAR 0 4
67795: RET
// export function Abs ( value ) ; begin
67796: LD_INT 0
67798: PPUSH
// result := value ;
67799: LD_ADDR_VAR 0 2
67803: PUSH
67804: LD_VAR 0 1
67808: ST_TO_ADDR
// if value < 0 then
67809: LD_VAR 0 1
67813: PUSH
67814: LD_INT 0
67816: LESS
67817: IFFALSE 67834
// result := value * - 1 ;
67819: LD_ADDR_VAR 0 2
67823: PUSH
67824: LD_VAR 0 1
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: MUL
67833: ST_TO_ADDR
// end ;
67834: LD_VAR 0 2
67838: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67839: LD_INT 0
67841: PPUSH
67842: PPUSH
67843: PPUSH
67844: PPUSH
67845: PPUSH
67846: PPUSH
67847: PPUSH
67848: PPUSH
// if not unit or not building then
67849: LD_VAR 0 1
67853: NOT
67854: PUSH
67855: LD_VAR 0 2
67859: NOT
67860: OR
67861: IFFALSE 67865
// exit ;
67863: GO 68091
// x := GetX ( building ) ;
67865: LD_ADDR_VAR 0 4
67869: PUSH
67870: LD_VAR 0 2
67874: PPUSH
67875: CALL_OW 250
67879: ST_TO_ADDR
// y := GetY ( building ) ;
67880: LD_ADDR_VAR 0 6
67884: PUSH
67885: LD_VAR 0 2
67889: PPUSH
67890: CALL_OW 251
67894: ST_TO_ADDR
// d := GetDir ( building ) ;
67895: LD_ADDR_VAR 0 8
67899: PUSH
67900: LD_VAR 0 2
67904: PPUSH
67905: CALL_OW 254
67909: ST_TO_ADDR
// r := 4 ;
67910: LD_ADDR_VAR 0 9
67914: PUSH
67915: LD_INT 4
67917: ST_TO_ADDR
// for i := 1 to 5 do
67918: LD_ADDR_VAR 0 10
67922: PUSH
67923: DOUBLE
67924: LD_INT 1
67926: DEC
67927: ST_TO_ADDR
67928: LD_INT 5
67930: PUSH
67931: FOR_TO
67932: IFFALSE 68089
// begin _x := ShiftX ( x , d , r + i ) ;
67934: LD_ADDR_VAR 0 5
67938: PUSH
67939: LD_VAR 0 4
67943: PPUSH
67944: LD_VAR 0 8
67948: PPUSH
67949: LD_VAR 0 9
67953: PUSH
67954: LD_VAR 0 10
67958: PLUS
67959: PPUSH
67960: CALL_OW 272
67964: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67965: LD_ADDR_VAR 0 7
67969: PUSH
67970: LD_VAR 0 6
67974: PPUSH
67975: LD_VAR 0 8
67979: PPUSH
67980: LD_VAR 0 9
67984: PUSH
67985: LD_VAR 0 10
67989: PLUS
67990: PPUSH
67991: CALL_OW 273
67995: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67996: LD_VAR 0 5
68000: PPUSH
68001: LD_VAR 0 7
68005: PPUSH
68006: CALL_OW 488
68010: PUSH
68011: LD_VAR 0 5
68015: PPUSH
68016: LD_VAR 0 7
68020: PPUSH
68021: CALL_OW 428
68025: PPUSH
68026: CALL_OW 247
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: IN
68041: NOT
68042: AND
68043: IFFALSE 68087
// begin ComMoveXY ( unit , _x , _y ) ;
68045: LD_VAR 0 1
68049: PPUSH
68050: LD_VAR 0 5
68054: PPUSH
68055: LD_VAR 0 7
68059: PPUSH
68060: CALL_OW 111
// result := [ _x , _y ] ;
68064: LD_ADDR_VAR 0 3
68068: PUSH
68069: LD_VAR 0 5
68073: PUSH
68074: LD_VAR 0 7
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: ST_TO_ADDR
// exit ;
68083: POP
68084: POP
68085: GO 68091
// end ; end ;
68087: GO 67931
68089: POP
68090: POP
// end ;
68091: LD_VAR 0 3
68095: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68096: LD_INT 0
68098: PPUSH
68099: PPUSH
68100: PPUSH
// result := 0 ;
68101: LD_ADDR_VAR 0 3
68105: PUSH
68106: LD_INT 0
68108: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68109: LD_VAR 0 1
68113: PUSH
68114: LD_INT 0
68116: LESS
68117: PUSH
68118: LD_VAR 0 1
68122: PUSH
68123: LD_INT 8
68125: GREATER
68126: OR
68127: PUSH
68128: LD_VAR 0 2
68132: PUSH
68133: LD_INT 0
68135: LESS
68136: OR
68137: PUSH
68138: LD_VAR 0 2
68142: PUSH
68143: LD_INT 8
68145: GREATER
68146: OR
68147: IFFALSE 68151
// exit ;
68149: GO 68226
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68151: LD_ADDR_VAR 0 4
68155: PUSH
68156: LD_INT 22
68158: PUSH
68159: LD_VAR 0 2
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PPUSH
68168: CALL_OW 69
68172: PUSH
68173: FOR_IN
68174: IFFALSE 68224
// begin un := UnitShoot ( i ) ;
68176: LD_ADDR_VAR 0 5
68180: PUSH
68181: LD_VAR 0 4
68185: PPUSH
68186: CALL_OW 504
68190: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68191: LD_VAR 0 5
68195: PPUSH
68196: CALL_OW 255
68200: PUSH
68201: LD_VAR 0 1
68205: EQUAL
68206: IFFALSE 68222
// begin result := un ;
68208: LD_ADDR_VAR 0 3
68212: PUSH
68213: LD_VAR 0 5
68217: ST_TO_ADDR
// exit ;
68218: POP
68219: POP
68220: GO 68226
// end ; end ;
68222: GO 68173
68224: POP
68225: POP
// end ;
68226: LD_VAR 0 3
68230: RET
// export function GetCargoBay ( units ) ; begin
68231: LD_INT 0
68233: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68234: LD_ADDR_VAR 0 2
68238: PUSH
68239: LD_VAR 0 1
68243: PPUSH
68244: LD_INT 2
68246: PUSH
68247: LD_INT 34
68249: PUSH
68250: LD_INT 12
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 34
68259: PUSH
68260: LD_INT 51
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 34
68269: PUSH
68270: LD_INT 32
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 34
68279: PUSH
68280: LD_INT 89
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: PPUSH
68294: CALL_OW 72
68298: ST_TO_ADDR
// end ;
68299: LD_VAR 0 2
68303: RET
// export function Negate ( value ) ; begin
68304: LD_INT 0
68306: PPUSH
// result := not value ;
68307: LD_ADDR_VAR 0 2
68311: PUSH
68312: LD_VAR 0 1
68316: NOT
68317: ST_TO_ADDR
// end ;
68318: LD_VAR 0 2
68322: RET
// export function Inc ( value ) ; begin
68323: LD_INT 0
68325: PPUSH
// result := value + 1 ;
68326: LD_ADDR_VAR 0 2
68330: PUSH
68331: LD_VAR 0 1
68335: PUSH
68336: LD_INT 1
68338: PLUS
68339: ST_TO_ADDR
// end ;
68340: LD_VAR 0 2
68344: RET
// export function Dec ( value ) ; begin
68345: LD_INT 0
68347: PPUSH
// result := value - 1 ;
68348: LD_ADDR_VAR 0 2
68352: PUSH
68353: LD_VAR 0 1
68357: PUSH
68358: LD_INT 1
68360: MINUS
68361: ST_TO_ADDR
// end ;
68362: LD_VAR 0 2
68366: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68367: LD_INT 0
68369: PPUSH
68370: PPUSH
68371: PPUSH
68372: PPUSH
68373: PPUSH
68374: PPUSH
68375: PPUSH
68376: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68377: LD_VAR 0 1
68381: PPUSH
68382: LD_VAR 0 2
68386: PPUSH
68387: CALL_OW 488
68391: NOT
68392: PUSH
68393: LD_VAR 0 3
68397: PPUSH
68398: LD_VAR 0 4
68402: PPUSH
68403: CALL_OW 488
68407: NOT
68408: OR
68409: IFFALSE 68422
// begin result := - 1 ;
68411: LD_ADDR_VAR 0 5
68415: PUSH
68416: LD_INT 1
68418: NEG
68419: ST_TO_ADDR
// exit ;
68420: GO 68657
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68422: LD_ADDR_VAR 0 12
68426: PUSH
68427: LD_VAR 0 1
68431: PPUSH
68432: LD_VAR 0 2
68436: PPUSH
68437: LD_VAR 0 3
68441: PPUSH
68442: LD_VAR 0 4
68446: PPUSH
68447: CALL 67507 0 4
68451: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68452: LD_ADDR_VAR 0 11
68456: PUSH
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_VAR 0 2
68466: PPUSH
68467: LD_VAR 0 12
68471: PUSH
68472: LD_INT 1
68474: ARRAY
68475: PPUSH
68476: LD_VAR 0 12
68480: PUSH
68481: LD_INT 2
68483: ARRAY
68484: PPUSH
68485: CALL_OW 298
68489: ST_TO_ADDR
// distance := 9999 ;
68490: LD_ADDR_VAR 0 10
68494: PUSH
68495: LD_INT 9999
68497: ST_TO_ADDR
// for i := 0 to 5 do
68498: LD_ADDR_VAR 0 6
68502: PUSH
68503: DOUBLE
68504: LD_INT 0
68506: DEC
68507: ST_TO_ADDR
68508: LD_INT 5
68510: PUSH
68511: FOR_TO
68512: IFFALSE 68655
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68514: LD_ADDR_VAR 0 7
68518: PUSH
68519: LD_VAR 0 1
68523: PPUSH
68524: LD_VAR 0 6
68528: PPUSH
68529: LD_VAR 0 11
68533: PPUSH
68534: CALL_OW 272
68538: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68539: LD_ADDR_VAR 0 8
68543: PUSH
68544: LD_VAR 0 2
68548: PPUSH
68549: LD_VAR 0 6
68553: PPUSH
68554: LD_VAR 0 11
68558: PPUSH
68559: CALL_OW 273
68563: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68564: LD_VAR 0 7
68568: PPUSH
68569: LD_VAR 0 8
68573: PPUSH
68574: CALL_OW 488
68578: NOT
68579: IFFALSE 68583
// continue ;
68581: GO 68511
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68583: LD_ADDR_VAR 0 9
68587: PUSH
68588: LD_VAR 0 12
68592: PUSH
68593: LD_INT 1
68595: ARRAY
68596: PPUSH
68597: LD_VAR 0 12
68601: PUSH
68602: LD_INT 2
68604: ARRAY
68605: PPUSH
68606: LD_VAR 0 7
68610: PPUSH
68611: LD_VAR 0 8
68615: PPUSH
68616: CALL_OW 298
68620: ST_TO_ADDR
// if tmp < distance then
68621: LD_VAR 0 9
68625: PUSH
68626: LD_VAR 0 10
68630: LESS
68631: IFFALSE 68653
// begin result := i ;
68633: LD_ADDR_VAR 0 5
68637: PUSH
68638: LD_VAR 0 6
68642: ST_TO_ADDR
// distance := tmp ;
68643: LD_ADDR_VAR 0 10
68647: PUSH
68648: LD_VAR 0 9
68652: ST_TO_ADDR
// end ; end ;
68653: GO 68511
68655: POP
68656: POP
// end ;
68657: LD_VAR 0 5
68661: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68662: LD_INT 0
68664: PPUSH
68665: PPUSH
// if not driver or not IsInUnit ( driver ) then
68666: LD_VAR 0 1
68670: NOT
68671: PUSH
68672: LD_VAR 0 1
68676: PPUSH
68677: CALL_OW 310
68681: NOT
68682: OR
68683: IFFALSE 68687
// exit ;
68685: GO 68777
// vehicle := IsInUnit ( driver ) ;
68687: LD_ADDR_VAR 0 3
68691: PUSH
68692: LD_VAR 0 1
68696: PPUSH
68697: CALL_OW 310
68701: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68702: LD_VAR 0 1
68706: PPUSH
68707: LD_STRING \
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: LD_INT 0
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 0
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: PUSH
68737: LD_STRING E
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: LD_VAR 0 3
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PPUSH
68773: CALL_OW 446
// end ;
68777: LD_VAR 0 2
68781: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68782: LD_INT 0
68784: PPUSH
68785: PPUSH
// if not driver or not IsInUnit ( driver ) then
68786: LD_VAR 0 1
68790: NOT
68791: PUSH
68792: LD_VAR 0 1
68796: PPUSH
68797: CALL_OW 310
68801: NOT
68802: OR
68803: IFFALSE 68807
// exit ;
68805: GO 68897
// vehicle := IsInUnit ( driver ) ;
68807: LD_ADDR_VAR 0 3
68811: PUSH
68812: LD_VAR 0 1
68816: PPUSH
68817: CALL_OW 310
68821: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68822: LD_VAR 0 1
68826: PPUSH
68827: LD_STRING \
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: LD_INT 0
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: PUSH
68857: LD_STRING E
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: LD_VAR 0 3
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PPUSH
68893: CALL_OW 447
// end ;
68897: LD_VAR 0 2
68901: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68902: LD_INT 0
68904: PPUSH
68905: PPUSH
68906: PPUSH
// tmp := [ ] ;
68907: LD_ADDR_VAR 0 5
68911: PUSH
68912: EMPTY
68913: ST_TO_ADDR
// for i in units do
68914: LD_ADDR_VAR 0 4
68918: PUSH
68919: LD_VAR 0 1
68923: PUSH
68924: FOR_IN
68925: IFFALSE 68963
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68927: LD_ADDR_VAR 0 5
68931: PUSH
68932: LD_VAR 0 5
68936: PPUSH
68937: LD_VAR 0 5
68941: PUSH
68942: LD_INT 1
68944: PLUS
68945: PPUSH
68946: LD_VAR 0 4
68950: PPUSH
68951: CALL_OW 256
68955: PPUSH
68956: CALL_OW 2
68960: ST_TO_ADDR
68961: GO 68924
68963: POP
68964: POP
// if not tmp then
68965: LD_VAR 0 5
68969: NOT
68970: IFFALSE 68974
// exit ;
68972: GO 69022
// if asc then
68974: LD_VAR 0 2
68978: IFFALSE 69002
// result := SortListByListAsc ( units , tmp ) else
68980: LD_ADDR_VAR 0 3
68984: PUSH
68985: LD_VAR 0 1
68989: PPUSH
68990: LD_VAR 0 5
68994: PPUSH
68995: CALL_OW 76
68999: ST_TO_ADDR
69000: GO 69022
// result := SortListByListDesc ( units , tmp ) ;
69002: LD_ADDR_VAR 0 3
69006: PUSH
69007: LD_VAR 0 1
69011: PPUSH
69012: LD_VAR 0 5
69016: PPUSH
69017: CALL_OW 77
69021: ST_TO_ADDR
// end ;
69022: LD_VAR 0 3
69026: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69027: LD_INT 0
69029: PPUSH
69030: PPUSH
// task := GetTaskList ( mech ) ;
69031: LD_ADDR_VAR 0 4
69035: PUSH
69036: LD_VAR 0 1
69040: PPUSH
69041: CALL_OW 437
69045: ST_TO_ADDR
// if not task then
69046: LD_VAR 0 4
69050: NOT
69051: IFFALSE 69055
// exit ;
69053: GO 69097
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69055: LD_ADDR_VAR 0 3
69059: PUSH
69060: LD_VAR 0 4
69064: PUSH
69065: LD_INT 1
69067: ARRAY
69068: PUSH
69069: LD_INT 1
69071: ARRAY
69072: PUSH
69073: LD_STRING r
69075: EQUAL
69076: PUSH
69077: LD_VAR 0 4
69081: PUSH
69082: LD_INT 1
69084: ARRAY
69085: PUSH
69086: LD_INT 4
69088: ARRAY
69089: PUSH
69090: LD_VAR 0 2
69094: EQUAL
69095: AND
69096: ST_TO_ADDR
// end ;
69097: LD_VAR 0 3
69101: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69102: LD_INT 0
69104: PPUSH
// SetDir ( unit , d ) ;
69105: LD_VAR 0 1
69109: PPUSH
69110: LD_VAR 0 4
69114: PPUSH
69115: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69119: LD_VAR 0 1
69123: PPUSH
69124: LD_VAR 0 2
69128: PPUSH
69129: LD_VAR 0 3
69133: PPUSH
69134: LD_VAR 0 5
69138: PPUSH
69139: CALL_OW 48
// end ;
69143: LD_VAR 0 6
69147: RET
// export function ToNaturalNumber ( number ) ; begin
69148: LD_INT 0
69150: PPUSH
// result := number div 1 ;
69151: LD_ADDR_VAR 0 2
69155: PUSH
69156: LD_VAR 0 1
69160: PUSH
69161: LD_INT 1
69163: DIV
69164: ST_TO_ADDR
// if number < 0 then
69165: LD_VAR 0 1
69169: PUSH
69170: LD_INT 0
69172: LESS
69173: IFFALSE 69183
// result := 0 ;
69175: LD_ADDR_VAR 0 2
69179: PUSH
69180: LD_INT 0
69182: ST_TO_ADDR
// end ;
69183: LD_VAR 0 2
69187: RET
// export function SortByClass ( units , class ) ; var un ; begin
69188: LD_INT 0
69190: PPUSH
69191: PPUSH
// if not units or not class then
69192: LD_VAR 0 1
69196: NOT
69197: PUSH
69198: LD_VAR 0 2
69202: NOT
69203: OR
69204: IFFALSE 69208
// exit ;
69206: GO 69303
// result := [ ] ;
69208: LD_ADDR_VAR 0 3
69212: PUSH
69213: EMPTY
69214: ST_TO_ADDR
// for un in units do
69215: LD_ADDR_VAR 0 4
69219: PUSH
69220: LD_VAR 0 1
69224: PUSH
69225: FOR_IN
69226: IFFALSE 69301
// if GetClass ( un ) = class then
69228: LD_VAR 0 4
69232: PPUSH
69233: CALL_OW 257
69237: PUSH
69238: LD_VAR 0 2
69242: EQUAL
69243: IFFALSE 69270
// result := Insert ( result , 1 , un ) else
69245: LD_ADDR_VAR 0 3
69249: PUSH
69250: LD_VAR 0 3
69254: PPUSH
69255: LD_INT 1
69257: PPUSH
69258: LD_VAR 0 4
69262: PPUSH
69263: CALL_OW 2
69267: ST_TO_ADDR
69268: GO 69299
// result := Replace ( result , result + 1 , un ) ;
69270: LD_ADDR_VAR 0 3
69274: PUSH
69275: LD_VAR 0 3
69279: PPUSH
69280: LD_VAR 0 3
69284: PUSH
69285: LD_INT 1
69287: PLUS
69288: PPUSH
69289: LD_VAR 0 4
69293: PPUSH
69294: CALL_OW 1
69298: ST_TO_ADDR
69299: GO 69225
69301: POP
69302: POP
// end ;
69303: LD_VAR 0 3
69307: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69308: LD_INT 0
69310: PPUSH
69311: PPUSH
69312: PPUSH
69313: PPUSH
69314: PPUSH
69315: PPUSH
69316: PPUSH
// result := [ ] ;
69317: LD_ADDR_VAR 0 4
69321: PUSH
69322: EMPTY
69323: ST_TO_ADDR
// if x - r < 0 then
69324: LD_VAR 0 1
69328: PUSH
69329: LD_VAR 0 3
69333: MINUS
69334: PUSH
69335: LD_INT 0
69337: LESS
69338: IFFALSE 69350
// min_x := 0 else
69340: LD_ADDR_VAR 0 8
69344: PUSH
69345: LD_INT 0
69347: ST_TO_ADDR
69348: GO 69366
// min_x := x - r ;
69350: LD_ADDR_VAR 0 8
69354: PUSH
69355: LD_VAR 0 1
69359: PUSH
69360: LD_VAR 0 3
69364: MINUS
69365: ST_TO_ADDR
// if y - r < 0 then
69366: LD_VAR 0 2
69370: PUSH
69371: LD_VAR 0 3
69375: MINUS
69376: PUSH
69377: LD_INT 0
69379: LESS
69380: IFFALSE 69392
// min_y := 0 else
69382: LD_ADDR_VAR 0 7
69386: PUSH
69387: LD_INT 0
69389: ST_TO_ADDR
69390: GO 69408
// min_y := y - r ;
69392: LD_ADDR_VAR 0 7
69396: PUSH
69397: LD_VAR 0 2
69401: PUSH
69402: LD_VAR 0 3
69406: MINUS
69407: ST_TO_ADDR
// max_x := x + r ;
69408: LD_ADDR_VAR 0 9
69412: PUSH
69413: LD_VAR 0 1
69417: PUSH
69418: LD_VAR 0 3
69422: PLUS
69423: ST_TO_ADDR
// max_y := y + r ;
69424: LD_ADDR_VAR 0 10
69428: PUSH
69429: LD_VAR 0 2
69433: PUSH
69434: LD_VAR 0 3
69438: PLUS
69439: ST_TO_ADDR
// for _x = min_x to max_x do
69440: LD_ADDR_VAR 0 5
69444: PUSH
69445: DOUBLE
69446: LD_VAR 0 8
69450: DEC
69451: ST_TO_ADDR
69452: LD_VAR 0 9
69456: PUSH
69457: FOR_TO
69458: IFFALSE 69559
// for _y = min_y to max_y do
69460: LD_ADDR_VAR 0 6
69464: PUSH
69465: DOUBLE
69466: LD_VAR 0 7
69470: DEC
69471: ST_TO_ADDR
69472: LD_VAR 0 10
69476: PUSH
69477: FOR_TO
69478: IFFALSE 69555
// begin if not ValidHex ( _x , _y ) then
69480: LD_VAR 0 5
69484: PPUSH
69485: LD_VAR 0 6
69489: PPUSH
69490: CALL_OW 488
69494: NOT
69495: IFFALSE 69499
// continue ;
69497: GO 69477
// if GetResourceTypeXY ( _x , _y ) then
69499: LD_VAR 0 5
69503: PPUSH
69504: LD_VAR 0 6
69508: PPUSH
69509: CALL_OW 283
69513: IFFALSE 69553
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69515: LD_ADDR_VAR 0 4
69519: PUSH
69520: LD_VAR 0 4
69524: PPUSH
69525: LD_VAR 0 4
69529: PUSH
69530: LD_INT 1
69532: PLUS
69533: PPUSH
69534: LD_VAR 0 5
69538: PUSH
69539: LD_VAR 0 6
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PPUSH
69548: CALL_OW 1
69552: ST_TO_ADDR
// end ;
69553: GO 69477
69555: POP
69556: POP
69557: GO 69457
69559: POP
69560: POP
// end ;
69561: LD_VAR 0 4
69565: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69566: LD_INT 0
69568: PPUSH
69569: PPUSH
69570: PPUSH
69571: PPUSH
69572: PPUSH
69573: PPUSH
69574: PPUSH
69575: PPUSH
// if not units then
69576: LD_VAR 0 1
69580: NOT
69581: IFFALSE 69585
// exit ;
69583: GO 70109
// result := UnitFilter ( units , [ f_ok ] ) ;
69585: LD_ADDR_VAR 0 3
69589: PUSH
69590: LD_VAR 0 1
69594: PPUSH
69595: LD_INT 50
69597: PUSH
69598: EMPTY
69599: LIST
69600: PPUSH
69601: CALL_OW 72
69605: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69606: LD_ADDR_VAR 0 8
69610: PUSH
69611: LD_VAR 0 1
69615: PUSH
69616: LD_INT 1
69618: ARRAY
69619: PPUSH
69620: CALL_OW 255
69624: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69625: LD_ADDR_VAR 0 10
69629: PUSH
69630: LD_INT 29
69632: PUSH
69633: LD_INT 91
69635: PUSH
69636: LD_INT 49
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: LIST
69643: ST_TO_ADDR
// if not result then
69644: LD_VAR 0 3
69648: NOT
69649: IFFALSE 69653
// exit ;
69651: GO 70109
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69653: LD_ADDR_VAR 0 5
69657: PUSH
69658: LD_INT 81
69660: PUSH
69661: LD_VAR 0 8
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PPUSH
69670: CALL_OW 69
69674: ST_TO_ADDR
// for i in result do
69675: LD_ADDR_VAR 0 4
69679: PUSH
69680: LD_VAR 0 3
69684: PUSH
69685: FOR_IN
69686: IFFALSE 70107
// begin tag := GetTag ( i ) + 1 ;
69688: LD_ADDR_VAR 0 9
69692: PUSH
69693: LD_VAR 0 4
69697: PPUSH
69698: CALL_OW 110
69702: PUSH
69703: LD_INT 1
69705: PLUS
69706: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69707: LD_ADDR_VAR 0 7
69711: PUSH
69712: LD_VAR 0 4
69716: PPUSH
69717: CALL_OW 250
69721: PPUSH
69722: LD_VAR 0 4
69726: PPUSH
69727: CALL_OW 251
69731: PPUSH
69732: LD_INT 6
69734: PPUSH
69735: CALL 69308 0 3
69739: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69740: LD_VAR 0 4
69744: PPUSH
69745: CALL_OW 247
69749: PUSH
69750: LD_INT 2
69752: EQUAL
69753: PUSH
69754: LD_VAR 0 7
69758: AND
69759: PUSH
69760: LD_VAR 0 4
69764: PPUSH
69765: CALL_OW 264
69769: PUSH
69770: LD_VAR 0 10
69774: IN
69775: NOT
69776: AND
69777: IFFALSE 69816
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69779: LD_VAR 0 4
69783: PPUSH
69784: LD_VAR 0 7
69788: PUSH
69789: LD_INT 1
69791: ARRAY
69792: PUSH
69793: LD_INT 1
69795: ARRAY
69796: PPUSH
69797: LD_VAR 0 7
69801: PUSH
69802: LD_INT 1
69804: ARRAY
69805: PUSH
69806: LD_INT 2
69808: ARRAY
69809: PPUSH
69810: CALL_OW 116
69814: GO 70105
// if path > tag then
69816: LD_VAR 0 2
69820: PUSH
69821: LD_VAR 0 9
69825: GREATER
69826: IFFALSE 70034
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69828: LD_ADDR_VAR 0 6
69832: PUSH
69833: LD_VAR 0 5
69837: PPUSH
69838: LD_INT 91
69840: PUSH
69841: LD_VAR 0 4
69845: PUSH
69846: LD_INT 8
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: PPUSH
69854: CALL_OW 72
69858: ST_TO_ADDR
// if nearEnemy then
69859: LD_VAR 0 6
69863: IFFALSE 69932
// begin if GetWeapon ( i ) = ru_time_lapser then
69865: LD_VAR 0 4
69869: PPUSH
69870: CALL_OW 264
69874: PUSH
69875: LD_INT 49
69877: EQUAL
69878: IFFALSE 69906
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69880: LD_VAR 0 4
69884: PPUSH
69885: LD_VAR 0 6
69889: PPUSH
69890: LD_VAR 0 4
69894: PPUSH
69895: CALL_OW 74
69899: PPUSH
69900: CALL_OW 112
69904: GO 69930
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69906: LD_VAR 0 4
69910: PPUSH
69911: LD_VAR 0 6
69915: PPUSH
69916: LD_VAR 0 4
69920: PPUSH
69921: CALL_OW 74
69925: PPUSH
69926: CALL 71034 0 2
// end else
69930: GO 70032
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69932: LD_VAR 0 4
69936: PPUSH
69937: LD_VAR 0 2
69941: PUSH
69942: LD_VAR 0 9
69946: ARRAY
69947: PUSH
69948: LD_INT 1
69950: ARRAY
69951: PPUSH
69952: LD_VAR 0 2
69956: PUSH
69957: LD_VAR 0 9
69961: ARRAY
69962: PUSH
69963: LD_INT 2
69965: ARRAY
69966: PPUSH
69967: CALL_OW 297
69971: PUSH
69972: LD_INT 6
69974: GREATER
69975: IFFALSE 70018
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69977: LD_VAR 0 4
69981: PPUSH
69982: LD_VAR 0 2
69986: PUSH
69987: LD_VAR 0 9
69991: ARRAY
69992: PUSH
69993: LD_INT 1
69995: ARRAY
69996: PPUSH
69997: LD_VAR 0 2
70001: PUSH
70002: LD_VAR 0 9
70006: ARRAY
70007: PUSH
70008: LD_INT 2
70010: ARRAY
70011: PPUSH
70012: CALL_OW 114
70016: GO 70032
// SetTag ( i , tag ) ;
70018: LD_VAR 0 4
70022: PPUSH
70023: LD_VAR 0 9
70027: PPUSH
70028: CALL_OW 109
// end else
70032: GO 70105
// if enemy then
70034: LD_VAR 0 5
70038: IFFALSE 70105
// begin if GetWeapon ( i ) = ru_time_lapser then
70040: LD_VAR 0 4
70044: PPUSH
70045: CALL_OW 264
70049: PUSH
70050: LD_INT 49
70052: EQUAL
70053: IFFALSE 70081
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70055: LD_VAR 0 4
70059: PPUSH
70060: LD_VAR 0 5
70064: PPUSH
70065: LD_VAR 0 4
70069: PPUSH
70070: CALL_OW 74
70074: PPUSH
70075: CALL_OW 112
70079: GO 70105
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70081: LD_VAR 0 4
70085: PPUSH
70086: LD_VAR 0 5
70090: PPUSH
70091: LD_VAR 0 4
70095: PPUSH
70096: CALL_OW 74
70100: PPUSH
70101: CALL 71034 0 2
// end ; end ;
70105: GO 69685
70107: POP
70108: POP
// end ;
70109: LD_VAR 0 3
70113: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70114: LD_INT 0
70116: PPUSH
70117: PPUSH
70118: PPUSH
// if not unit or IsInUnit ( unit ) then
70119: LD_VAR 0 1
70123: NOT
70124: PUSH
70125: LD_VAR 0 1
70129: PPUSH
70130: CALL_OW 310
70134: OR
70135: IFFALSE 70139
// exit ;
70137: GO 70230
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70139: LD_ADDR_VAR 0 4
70143: PUSH
70144: LD_VAR 0 1
70148: PPUSH
70149: CALL_OW 250
70153: PPUSH
70154: LD_VAR 0 2
70158: PPUSH
70159: LD_INT 1
70161: PPUSH
70162: CALL_OW 272
70166: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70167: LD_ADDR_VAR 0 5
70171: PUSH
70172: LD_VAR 0 1
70176: PPUSH
70177: CALL_OW 251
70181: PPUSH
70182: LD_VAR 0 2
70186: PPUSH
70187: LD_INT 1
70189: PPUSH
70190: CALL_OW 273
70194: ST_TO_ADDR
// if ValidHex ( x , y ) then
70195: LD_VAR 0 4
70199: PPUSH
70200: LD_VAR 0 5
70204: PPUSH
70205: CALL_OW 488
70209: IFFALSE 70230
// ComTurnXY ( unit , x , y ) ;
70211: LD_VAR 0 1
70215: PPUSH
70216: LD_VAR 0 4
70220: PPUSH
70221: LD_VAR 0 5
70225: PPUSH
70226: CALL_OW 118
// end ;
70230: LD_VAR 0 3
70234: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70235: LD_INT 0
70237: PPUSH
70238: PPUSH
// result := false ;
70239: LD_ADDR_VAR 0 3
70243: PUSH
70244: LD_INT 0
70246: ST_TO_ADDR
// if not units then
70247: LD_VAR 0 2
70251: NOT
70252: IFFALSE 70256
// exit ;
70254: GO 70301
// for i in units do
70256: LD_ADDR_VAR 0 4
70260: PUSH
70261: LD_VAR 0 2
70265: PUSH
70266: FOR_IN
70267: IFFALSE 70299
// if See ( side , i ) then
70269: LD_VAR 0 1
70273: PPUSH
70274: LD_VAR 0 4
70278: PPUSH
70279: CALL_OW 292
70283: IFFALSE 70297
// begin result := true ;
70285: LD_ADDR_VAR 0 3
70289: PUSH
70290: LD_INT 1
70292: ST_TO_ADDR
// exit ;
70293: POP
70294: POP
70295: GO 70301
// end ;
70297: GO 70266
70299: POP
70300: POP
// end ;
70301: LD_VAR 0 3
70305: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70306: LD_INT 0
70308: PPUSH
70309: PPUSH
70310: PPUSH
70311: PPUSH
// if not unit or not points then
70312: LD_VAR 0 1
70316: NOT
70317: PUSH
70318: LD_VAR 0 2
70322: NOT
70323: OR
70324: IFFALSE 70328
// exit ;
70326: GO 70418
// dist := 99999 ;
70328: LD_ADDR_VAR 0 5
70332: PUSH
70333: LD_INT 99999
70335: ST_TO_ADDR
// for i in points do
70336: LD_ADDR_VAR 0 4
70340: PUSH
70341: LD_VAR 0 2
70345: PUSH
70346: FOR_IN
70347: IFFALSE 70416
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70349: LD_ADDR_VAR 0 6
70353: PUSH
70354: LD_VAR 0 1
70358: PPUSH
70359: LD_VAR 0 4
70363: PUSH
70364: LD_INT 1
70366: ARRAY
70367: PPUSH
70368: LD_VAR 0 4
70372: PUSH
70373: LD_INT 2
70375: ARRAY
70376: PPUSH
70377: CALL_OW 297
70381: ST_TO_ADDR
// if tmpDist < dist then
70382: LD_VAR 0 6
70386: PUSH
70387: LD_VAR 0 5
70391: LESS
70392: IFFALSE 70414
// begin result := i ;
70394: LD_ADDR_VAR 0 3
70398: PUSH
70399: LD_VAR 0 4
70403: ST_TO_ADDR
// dist := tmpDist ;
70404: LD_ADDR_VAR 0 5
70408: PUSH
70409: LD_VAR 0 6
70413: ST_TO_ADDR
// end ; end ;
70414: GO 70346
70416: POP
70417: POP
// end ;
70418: LD_VAR 0 3
70422: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70423: LD_INT 0
70425: PPUSH
// uc_side := side ;
70426: LD_ADDR_OWVAR 20
70430: PUSH
70431: LD_VAR 0 1
70435: ST_TO_ADDR
// uc_nation := 3 ;
70436: LD_ADDR_OWVAR 21
70440: PUSH
70441: LD_INT 3
70443: ST_TO_ADDR
// vc_chassis := 25 ;
70444: LD_ADDR_OWVAR 37
70448: PUSH
70449: LD_INT 25
70451: ST_TO_ADDR
// vc_engine := engine_siberite ;
70452: LD_ADDR_OWVAR 39
70456: PUSH
70457: LD_INT 3
70459: ST_TO_ADDR
// vc_control := control_computer ;
70460: LD_ADDR_OWVAR 38
70464: PUSH
70465: LD_INT 3
70467: ST_TO_ADDR
// vc_weapon := 59 ;
70468: LD_ADDR_OWVAR 40
70472: PUSH
70473: LD_INT 59
70475: ST_TO_ADDR
// result := CreateVehicle ;
70476: LD_ADDR_VAR 0 5
70480: PUSH
70481: CALL_OW 45
70485: ST_TO_ADDR
// SetDir ( result , d ) ;
70486: LD_VAR 0 5
70490: PPUSH
70491: LD_VAR 0 4
70495: PPUSH
70496: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70500: LD_VAR 0 5
70504: PPUSH
70505: LD_VAR 0 2
70509: PPUSH
70510: LD_VAR 0 3
70514: PPUSH
70515: LD_INT 0
70517: PPUSH
70518: CALL_OW 48
// end ;
70522: LD_VAR 0 5
70526: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70527: LD_INT 0
70529: PPUSH
70530: PPUSH
70531: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70532: LD_ADDR_VAR 0 2
70536: PUSH
70537: LD_INT 0
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: LD_INT 0
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70555: LD_VAR 0 1
70559: NOT
70560: PUSH
70561: LD_VAR 0 1
70565: PPUSH
70566: CALL_OW 264
70570: PUSH
70571: LD_INT 12
70573: PUSH
70574: LD_INT 51
70576: PUSH
70577: LD_INT 32
70579: PUSH
70580: LD_INT 89
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: IN
70589: NOT
70590: OR
70591: IFFALSE 70595
// exit ;
70593: GO 70693
// for i := 1 to 3 do
70595: LD_ADDR_VAR 0 3
70599: PUSH
70600: DOUBLE
70601: LD_INT 1
70603: DEC
70604: ST_TO_ADDR
70605: LD_INT 3
70607: PUSH
70608: FOR_TO
70609: IFFALSE 70691
// begin tmp := GetCargo ( cargo , i ) ;
70611: LD_ADDR_VAR 0 4
70615: PUSH
70616: LD_VAR 0 1
70620: PPUSH
70621: LD_VAR 0 3
70625: PPUSH
70626: CALL_OW 289
70630: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70631: LD_ADDR_VAR 0 2
70635: PUSH
70636: LD_VAR 0 2
70640: PPUSH
70641: LD_VAR 0 3
70645: PPUSH
70646: LD_VAR 0 4
70650: PPUSH
70651: CALL_OW 1
70655: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70656: LD_ADDR_VAR 0 2
70660: PUSH
70661: LD_VAR 0 2
70665: PPUSH
70666: LD_INT 4
70668: PPUSH
70669: LD_VAR 0 2
70673: PUSH
70674: LD_INT 4
70676: ARRAY
70677: PUSH
70678: LD_VAR 0 4
70682: PLUS
70683: PPUSH
70684: CALL_OW 1
70688: ST_TO_ADDR
// end ;
70689: GO 70608
70691: POP
70692: POP
// end ;
70693: LD_VAR 0 2
70697: RET
// export function Length ( array ) ; begin
70698: LD_INT 0
70700: PPUSH
// result := array + 0 ;
70701: LD_ADDR_VAR 0 2
70705: PUSH
70706: LD_VAR 0 1
70710: PUSH
70711: LD_INT 0
70713: PLUS
70714: ST_TO_ADDR
// end ;
70715: LD_VAR 0 2
70719: RET
// export function PrepareArray ( array ) ; begin
70720: LD_INT 0
70722: PPUSH
// result := array diff 0 ;
70723: LD_ADDR_VAR 0 2
70727: PUSH
70728: LD_VAR 0 1
70732: PUSH
70733: LD_INT 0
70735: DIFF
70736: ST_TO_ADDR
// if not result [ 1 ] then
70737: LD_VAR 0 2
70741: PUSH
70742: LD_INT 1
70744: ARRAY
70745: NOT
70746: IFFALSE 70766
// result := Delete ( result , 1 ) ;
70748: LD_ADDR_VAR 0 2
70752: PUSH
70753: LD_VAR 0 2
70757: PPUSH
70758: LD_INT 1
70760: PPUSH
70761: CALL_OW 3
70765: ST_TO_ADDR
// end ;
70766: LD_VAR 0 2
70770: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70771: LD_INT 0
70773: PPUSH
70774: PPUSH
70775: PPUSH
70776: PPUSH
// sibRocketRange := 25 ;
70777: LD_ADDR_VAR 0 6
70781: PUSH
70782: LD_INT 25
70784: ST_TO_ADDR
// result := false ;
70785: LD_ADDR_VAR 0 4
70789: PUSH
70790: LD_INT 0
70792: ST_TO_ADDR
// for i := 0 to 5 do
70793: LD_ADDR_VAR 0 5
70797: PUSH
70798: DOUBLE
70799: LD_INT 0
70801: DEC
70802: ST_TO_ADDR
70803: LD_INT 5
70805: PUSH
70806: FOR_TO
70807: IFFALSE 70874
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70809: LD_VAR 0 1
70813: PPUSH
70814: LD_VAR 0 5
70818: PPUSH
70819: LD_VAR 0 6
70823: PPUSH
70824: CALL_OW 272
70828: PPUSH
70829: LD_VAR 0 2
70833: PPUSH
70834: LD_VAR 0 5
70838: PPUSH
70839: LD_VAR 0 6
70843: PPUSH
70844: CALL_OW 273
70848: PPUSH
70849: LD_VAR 0 3
70853: PPUSH
70854: CALL_OW 309
70858: IFFALSE 70872
// begin result := true ;
70860: LD_ADDR_VAR 0 4
70864: PUSH
70865: LD_INT 1
70867: ST_TO_ADDR
// exit ;
70868: POP
70869: POP
70870: GO 70876
// end ;
70872: GO 70806
70874: POP
70875: POP
// end ;
70876: LD_VAR 0 4
70880: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70881: LD_INT 0
70883: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70884: LD_VAR 0 1
70888: PPUSH
70889: LD_VAR 0 2
70893: PPUSH
70894: LD_INT 0
70896: PPUSH
70897: LD_INT 0
70899: PPUSH
70900: LD_INT 1
70902: PPUSH
70903: LD_INT 0
70905: PPUSH
70906: CALL_OW 587
// end ;
70910: LD_VAR 0 3
70914: RET
// export function CenterOnNow ( unit ) ; begin
70915: LD_INT 0
70917: PPUSH
// result := IsInUnit ( unit ) ;
70918: LD_ADDR_VAR 0 2
70922: PUSH
70923: LD_VAR 0 1
70927: PPUSH
70928: CALL_OW 310
70932: ST_TO_ADDR
// if not result then
70933: LD_VAR 0 2
70937: NOT
70938: IFFALSE 70950
// result := unit ;
70940: LD_ADDR_VAR 0 2
70944: PUSH
70945: LD_VAR 0 1
70949: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70950: LD_VAR 0 1
70954: PPUSH
70955: CALL_OW 87
// end ;
70959: LD_VAR 0 2
70963: RET
// export function ComMoveHex ( unit , hex ) ; begin
70964: LD_INT 0
70966: PPUSH
// if not hex then
70967: LD_VAR 0 2
70971: NOT
70972: IFFALSE 70976
// exit ;
70974: GO 71029
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70976: LD_VAR 0 2
70980: PUSH
70981: LD_INT 1
70983: ARRAY
70984: PPUSH
70985: LD_VAR 0 2
70989: PUSH
70990: LD_INT 2
70992: ARRAY
70993: PPUSH
70994: CALL_OW 428
70998: IFFALSE 71002
// exit ;
71000: GO 71029
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71002: LD_VAR 0 1
71006: PPUSH
71007: LD_VAR 0 2
71011: PUSH
71012: LD_INT 1
71014: ARRAY
71015: PPUSH
71016: LD_VAR 0 2
71020: PUSH
71021: LD_INT 2
71023: ARRAY
71024: PPUSH
71025: CALL_OW 111
// end ;
71029: LD_VAR 0 3
71033: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71034: LD_INT 0
71036: PPUSH
71037: PPUSH
71038: PPUSH
// if not unit or not enemy then
71039: LD_VAR 0 1
71043: NOT
71044: PUSH
71045: LD_VAR 0 2
71049: NOT
71050: OR
71051: IFFALSE 71055
// exit ;
71053: GO 71179
// x := GetX ( enemy ) ;
71055: LD_ADDR_VAR 0 4
71059: PUSH
71060: LD_VAR 0 2
71064: PPUSH
71065: CALL_OW 250
71069: ST_TO_ADDR
// y := GetY ( enemy ) ;
71070: LD_ADDR_VAR 0 5
71074: PUSH
71075: LD_VAR 0 2
71079: PPUSH
71080: CALL_OW 251
71084: ST_TO_ADDR
// if ValidHex ( x , y ) then
71085: LD_VAR 0 4
71089: PPUSH
71090: LD_VAR 0 5
71094: PPUSH
71095: CALL_OW 488
71099: IFFALSE 71179
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71101: LD_VAR 0 2
71105: PPUSH
71106: CALL_OW 247
71110: PUSH
71111: LD_INT 3
71113: PUSH
71114: LD_INT 2
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: IN
71121: PUSH
71122: LD_VAR 0 1
71126: PPUSH
71127: CALL_OW 255
71131: PPUSH
71132: LD_VAR 0 2
71136: PPUSH
71137: CALL_OW 292
71141: OR
71142: IFFALSE 71160
// ComAttackUnit ( unit , enemy ) else
71144: LD_VAR 0 1
71148: PPUSH
71149: LD_VAR 0 2
71153: PPUSH
71154: CALL_OW 115
71158: GO 71179
// ComAgressiveMove ( unit , x , y ) ;
71160: LD_VAR 0 1
71164: PPUSH
71165: LD_VAR 0 4
71169: PPUSH
71170: LD_VAR 0 5
71174: PPUSH
71175: CALL_OW 114
// end ;
71179: LD_VAR 0 3
71183: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71184: LD_INT 0
71186: PPUSH
71187: PPUSH
71188: PPUSH
// list := AreaToList ( area , 0 ) ;
71189: LD_ADDR_VAR 0 5
71193: PUSH
71194: LD_VAR 0 1
71198: PPUSH
71199: LD_INT 0
71201: PPUSH
71202: CALL_OW 517
71206: ST_TO_ADDR
// if not list then
71207: LD_VAR 0 5
71211: NOT
71212: IFFALSE 71216
// exit ;
71214: GO 71346
// if all then
71216: LD_VAR 0 2
71220: IFFALSE 71308
// begin for i := 1 to list [ 1 ] do
71222: LD_ADDR_VAR 0 4
71226: PUSH
71227: DOUBLE
71228: LD_INT 1
71230: DEC
71231: ST_TO_ADDR
71232: LD_VAR 0 5
71236: PUSH
71237: LD_INT 1
71239: ARRAY
71240: PUSH
71241: FOR_TO
71242: IFFALSE 71304
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71244: LD_ADDR_VAR 0 3
71248: PUSH
71249: LD_VAR 0 3
71253: PPUSH
71254: LD_VAR 0 3
71258: PUSH
71259: LD_INT 1
71261: PLUS
71262: PPUSH
71263: LD_VAR 0 5
71267: PUSH
71268: LD_INT 1
71270: ARRAY
71271: PUSH
71272: LD_VAR 0 4
71276: ARRAY
71277: PUSH
71278: LD_VAR 0 5
71282: PUSH
71283: LD_INT 2
71285: ARRAY
71286: PUSH
71287: LD_VAR 0 4
71291: ARRAY
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PPUSH
71297: CALL_OW 1
71301: ST_TO_ADDR
71302: GO 71241
71304: POP
71305: POP
// exit ;
71306: GO 71346
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71308: LD_ADDR_VAR 0 3
71312: PUSH
71313: LD_VAR 0 5
71317: PUSH
71318: LD_INT 1
71320: ARRAY
71321: PUSH
71322: LD_INT 1
71324: ARRAY
71325: PUSH
71326: LD_VAR 0 5
71330: PUSH
71331: LD_INT 2
71333: ARRAY
71334: PUSH
71335: LD_INT 1
71337: ARRAY
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: EMPTY
71344: LIST
71345: ST_TO_ADDR
// end ;
71346: LD_VAR 0 3
71350: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71351: LD_INT 0
71353: PPUSH
71354: PPUSH
// list := AreaToList ( area , 0 ) ;
71355: LD_ADDR_VAR 0 4
71359: PUSH
71360: LD_VAR 0 1
71364: PPUSH
71365: LD_INT 0
71367: PPUSH
71368: CALL_OW 517
71372: ST_TO_ADDR
// if not list then
71373: LD_VAR 0 4
71377: NOT
71378: IFFALSE 71382
// exit ;
71380: GO 71423
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71382: LD_ADDR_VAR 0 3
71386: PUSH
71387: LD_VAR 0 4
71391: PUSH
71392: LD_INT 1
71394: ARRAY
71395: PUSH
71396: LD_INT 1
71398: ARRAY
71399: PUSH
71400: LD_VAR 0 4
71404: PUSH
71405: LD_INT 2
71407: ARRAY
71408: PUSH
71409: LD_INT 1
71411: ARRAY
71412: PUSH
71413: LD_VAR 0 2
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: LIST
71422: ST_TO_ADDR
// end ;
71423: LD_VAR 0 3
71427: RET
// export function First ( array ) ; begin
71428: LD_INT 0
71430: PPUSH
// if not array then
71431: LD_VAR 0 1
71435: NOT
71436: IFFALSE 71440
// exit ;
71438: GO 71454
// result := array [ 1 ] ;
71440: LD_ADDR_VAR 0 2
71444: PUSH
71445: LD_VAR 0 1
71449: PUSH
71450: LD_INT 1
71452: ARRAY
71453: ST_TO_ADDR
// end ;
71454: LD_VAR 0 2
71458: RET
// export function Last ( array ) ; begin
71459: LD_INT 0
71461: PPUSH
// if not array then
71462: LD_VAR 0 1
71466: NOT
71467: IFFALSE 71471
// exit ;
71469: GO 71487
// result := array [ array ] ;
71471: LD_ADDR_VAR 0 2
71475: PUSH
71476: LD_VAR 0 1
71480: PUSH
71481: LD_VAR 0 1
71485: ARRAY
71486: ST_TO_ADDR
// end ;
71487: LD_VAR 0 2
71491: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71492: LD_INT 0
71494: PPUSH
71495: PPUSH
// result := [ ] ;
71496: LD_ADDR_VAR 0 5
71500: PUSH
71501: EMPTY
71502: ST_TO_ADDR
// if not array then
71503: LD_VAR 0 1
71507: NOT
71508: IFFALSE 71512
// exit ;
71510: GO 71624
// for i := 1 to array do
71512: LD_ADDR_VAR 0 6
71516: PUSH
71517: DOUBLE
71518: LD_INT 1
71520: DEC
71521: ST_TO_ADDR
71522: LD_VAR 0 1
71526: PUSH
71527: FOR_TO
71528: IFFALSE 71622
// if array [ i ] [ index ] = value then
71530: LD_VAR 0 1
71534: PUSH
71535: LD_VAR 0 6
71539: ARRAY
71540: PUSH
71541: LD_VAR 0 2
71545: ARRAY
71546: PUSH
71547: LD_VAR 0 3
71551: EQUAL
71552: IFFALSE 71620
// begin if indexColumn then
71554: LD_VAR 0 4
71558: IFFALSE 71594
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71560: LD_ADDR_VAR 0 5
71564: PUSH
71565: LD_VAR 0 5
71569: PPUSH
71570: LD_VAR 0 1
71574: PUSH
71575: LD_VAR 0 6
71579: ARRAY
71580: PUSH
71581: LD_VAR 0 4
71585: ARRAY
71586: PPUSH
71587: CALL 66962 0 2
71591: ST_TO_ADDR
71592: GO 71620
// result := Join ( result , array [ i ] ) ;
71594: LD_ADDR_VAR 0 5
71598: PUSH
71599: LD_VAR 0 5
71603: PPUSH
71604: LD_VAR 0 1
71608: PUSH
71609: LD_VAR 0 6
71613: ARRAY
71614: PPUSH
71615: CALL 66962 0 2
71619: ST_TO_ADDR
// end ;
71620: GO 71527
71622: POP
71623: POP
// end ;
71624: LD_VAR 0 5
71628: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71629: LD_INT 0
71631: PPUSH
71632: PPUSH
71633: PPUSH
// if btype = b_depot then
71634: LD_VAR 0 2
71638: PUSH
71639: LD_INT 0
71641: EQUAL
71642: IFFALSE 71654
// begin result := true ;
71644: LD_ADDR_VAR 0 3
71648: PUSH
71649: LD_INT 1
71651: ST_TO_ADDR
// exit ;
71652: GO 71770
// end ; pom := GetBase ( depot ) ;
71654: LD_ADDR_VAR 0 4
71658: PUSH
71659: LD_VAR 0 1
71663: PPUSH
71664: CALL_OW 274
71668: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71669: LD_ADDR_VAR 0 5
71673: PUSH
71674: LD_VAR 0 2
71678: PPUSH
71679: LD_VAR 0 1
71683: PPUSH
71684: CALL_OW 248
71688: PPUSH
71689: CALL_OW 450
71693: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71694: LD_ADDR_VAR 0 3
71698: PUSH
71699: LD_VAR 0 4
71703: PPUSH
71704: LD_INT 1
71706: PPUSH
71707: CALL_OW 275
71711: PUSH
71712: LD_VAR 0 5
71716: PUSH
71717: LD_INT 1
71719: ARRAY
71720: GREATEREQUAL
71721: PUSH
71722: LD_VAR 0 4
71726: PPUSH
71727: LD_INT 2
71729: PPUSH
71730: CALL_OW 275
71734: PUSH
71735: LD_VAR 0 5
71739: PUSH
71740: LD_INT 2
71742: ARRAY
71743: GREATEREQUAL
71744: AND
71745: PUSH
71746: LD_VAR 0 4
71750: PPUSH
71751: LD_INT 3
71753: PPUSH
71754: CALL_OW 275
71758: PUSH
71759: LD_VAR 0 5
71763: PUSH
71764: LD_INT 3
71766: ARRAY
71767: GREATEREQUAL
71768: AND
71769: ST_TO_ADDR
// end ;
71770: LD_VAR 0 3
71774: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71775: LD_INT 0
71777: PPUSH
// if not vehicles or not parkingPoint then
71778: LD_VAR 0 1
71782: NOT
71783: PUSH
71784: LD_VAR 0 2
71788: NOT
71789: OR
71790: IFFALSE 71794
// exit ;
71792: GO 71892
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71794: LD_ADDR_VAR 0 1
71798: PUSH
71799: LD_VAR 0 1
71803: PPUSH
71804: LD_INT 50
71806: PUSH
71807: EMPTY
71808: LIST
71809: PUSH
71810: LD_INT 3
71812: PUSH
71813: LD_INT 92
71815: PUSH
71816: LD_VAR 0 2
71820: PUSH
71821: LD_INT 1
71823: ARRAY
71824: PUSH
71825: LD_VAR 0 2
71829: PUSH
71830: LD_INT 2
71832: ARRAY
71833: PUSH
71834: LD_INT 8
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PPUSH
71851: CALL_OW 72
71855: ST_TO_ADDR
// if not vehicles then
71856: LD_VAR 0 1
71860: NOT
71861: IFFALSE 71865
// exit ;
71863: GO 71892
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71865: LD_VAR 0 1
71869: PPUSH
71870: LD_VAR 0 2
71874: PUSH
71875: LD_INT 1
71877: ARRAY
71878: PPUSH
71879: LD_VAR 0 2
71883: PUSH
71884: LD_INT 2
71886: ARRAY
71887: PPUSH
71888: CALL_OW 111
// end ;
71892: LD_VAR 0 3
71896: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71897: LD_INT 0
71899: PPUSH
71900: PPUSH
71901: PPUSH
// if not side or not area then
71902: LD_VAR 0 1
71906: NOT
71907: PUSH
71908: LD_VAR 0 2
71912: NOT
71913: OR
71914: IFFALSE 71918
// exit ;
71916: GO 72037
// tmp := AreaToList ( area , 0 ) ;
71918: LD_ADDR_VAR 0 5
71922: PUSH
71923: LD_VAR 0 2
71927: PPUSH
71928: LD_INT 0
71930: PPUSH
71931: CALL_OW 517
71935: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71936: LD_ADDR_VAR 0 4
71940: PUSH
71941: DOUBLE
71942: LD_INT 1
71944: DEC
71945: ST_TO_ADDR
71946: LD_VAR 0 5
71950: PUSH
71951: LD_INT 1
71953: ARRAY
71954: PUSH
71955: FOR_TO
71956: IFFALSE 72035
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71958: LD_VAR 0 5
71962: PUSH
71963: LD_INT 1
71965: ARRAY
71966: PUSH
71967: LD_VAR 0 4
71971: ARRAY
71972: PPUSH
71973: LD_VAR 0 5
71977: PUSH
71978: LD_INT 2
71980: ARRAY
71981: PUSH
71982: LD_VAR 0 4
71986: ARRAY
71987: PPUSH
71988: CALL_OW 351
71992: IFFALSE 72033
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71994: LD_VAR 0 5
71998: PUSH
71999: LD_INT 1
72001: ARRAY
72002: PUSH
72003: LD_VAR 0 4
72007: ARRAY
72008: PPUSH
72009: LD_VAR 0 5
72013: PUSH
72014: LD_INT 2
72016: ARRAY
72017: PUSH
72018: LD_VAR 0 4
72022: ARRAY
72023: PPUSH
72024: LD_VAR 0 1
72028: PPUSH
72029: CALL_OW 244
// end ;
72033: GO 71955
72035: POP
72036: POP
// end ; end_of_file
72037: LD_VAR 0 3
72041: RET
// export globalGameSaveCounter ; every 0 0$1 do
72042: GO 72044
72044: DISABLE
// begin enable ;
72045: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
72046: LD_STRING updateTimer(
72048: PUSH
72049: LD_OWVAR 1
72053: STR
72054: PUSH
72055: LD_STRING );
72057: STR
72058: PPUSH
72059: CALL_OW 559
// end ;
72063: END
// every 0 0$1 do
72064: GO 72066
72066: DISABLE
// begin globalGameSaveCounter := 0 ;
72067: LD_ADDR_EXP 74
72071: PUSH
72072: LD_INT 0
72074: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
72075: LD_STRING setGameSaveCounter(0)
72077: PPUSH
72078: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
72082: LD_STRING initStreamRollete();
72084: PPUSH
72085: CALL_OW 559
// InitStreamMode ;
72089: CALL 73432 0 0
// DefineStreamItems ( false ) ;
72093: LD_INT 0
72095: PPUSH
72096: CALL 73896 0 1
// end ;
72100: END
// export function SOS_MapStart ( ) ; begin
72101: LD_INT 0
72103: PPUSH
// if streamModeActive then
72104: LD_EXP 75
72108: IFFALSE 72117
// DefineStreamItems ( true ) ;
72110: LD_INT 1
72112: PPUSH
72113: CALL 73896 0 1
// UpdateLuaVariables ( ) ;
72117: CALL 72134 0 0
// UpdateFactoryWaypoints ( ) ;
72121: CALL 86765 0 0
// UpdateWarehouseGatheringPoints ( ) ;
72125: CALL 87022 0 0
// end ;
72129: LD_VAR 0 1
72133: RET
// function UpdateLuaVariables ( ) ; begin
72134: LD_INT 0
72136: PPUSH
// if globalGameSaveCounter then
72137: LD_EXP 74
72141: IFFALSE 72175
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
72143: LD_ADDR_EXP 74
72147: PUSH
72148: LD_EXP 74
72152: PPUSH
72153: CALL 68323 0 1
72157: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72158: LD_STRING setGameSaveCounter(
72160: PUSH
72161: LD_EXP 74
72165: STR
72166: PUSH
72167: LD_STRING )
72169: STR
72170: PPUSH
72171: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
72175: LD_STRING setGameDifficulty(
72177: PUSH
72178: LD_OWVAR 67
72182: STR
72183: PUSH
72184: LD_STRING )
72186: STR
72187: PPUSH
72188: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
72192: LD_STRING displayDifficulty(
72194: PUSH
72195: LD_OWVAR 67
72199: STR
72200: PUSH
72201: LD_STRING )
72203: STR
72204: PPUSH
72205: CALL_OW 559
// end ;
72209: LD_VAR 0 1
72213: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72214: LD_INT 0
72216: PPUSH
// if p2 = stream_mode then
72217: LD_VAR 0 2
72221: PUSH
72222: LD_INT 100
72224: EQUAL
72225: IFFALSE 73228
// begin if not StreamModeActive then
72227: LD_EXP 75
72231: NOT
72232: IFFALSE 72242
// StreamModeActive := true ;
72234: LD_ADDR_EXP 75
72238: PUSH
72239: LD_INT 1
72241: ST_TO_ADDR
// if p3 = 0 then
72242: LD_VAR 0 3
72246: PUSH
72247: LD_INT 0
72249: EQUAL
72250: IFFALSE 72256
// InitStreamMode ;
72252: CALL 73432 0 0
// if p3 = 1 then
72256: LD_VAR 0 3
72260: PUSH
72261: LD_INT 1
72263: EQUAL
72264: IFFALSE 72274
// sRocket := true ;
72266: LD_ADDR_EXP 80
72270: PUSH
72271: LD_INT 1
72273: ST_TO_ADDR
// if p3 = 2 then
72274: LD_VAR 0 3
72278: PUSH
72279: LD_INT 2
72281: EQUAL
72282: IFFALSE 72292
// sSpeed := true ;
72284: LD_ADDR_EXP 79
72288: PUSH
72289: LD_INT 1
72291: ST_TO_ADDR
// if p3 = 3 then
72292: LD_VAR 0 3
72296: PUSH
72297: LD_INT 3
72299: EQUAL
72300: IFFALSE 72310
// sEngine := true ;
72302: LD_ADDR_EXP 81
72306: PUSH
72307: LD_INT 1
72309: ST_TO_ADDR
// if p3 = 4 then
72310: LD_VAR 0 3
72314: PUSH
72315: LD_INT 4
72317: EQUAL
72318: IFFALSE 72328
// sSpec := true ;
72320: LD_ADDR_EXP 78
72324: PUSH
72325: LD_INT 1
72327: ST_TO_ADDR
// if p3 = 5 then
72328: LD_VAR 0 3
72332: PUSH
72333: LD_INT 5
72335: EQUAL
72336: IFFALSE 72346
// sLevel := true ;
72338: LD_ADDR_EXP 82
72342: PUSH
72343: LD_INT 1
72345: ST_TO_ADDR
// if p3 = 6 then
72346: LD_VAR 0 3
72350: PUSH
72351: LD_INT 6
72353: EQUAL
72354: IFFALSE 72364
// sArmoury := true ;
72356: LD_ADDR_EXP 83
72360: PUSH
72361: LD_INT 1
72363: ST_TO_ADDR
// if p3 = 7 then
72364: LD_VAR 0 3
72368: PUSH
72369: LD_INT 7
72371: EQUAL
72372: IFFALSE 72382
// sRadar := true ;
72374: LD_ADDR_EXP 84
72378: PUSH
72379: LD_INT 1
72381: ST_TO_ADDR
// if p3 = 8 then
72382: LD_VAR 0 3
72386: PUSH
72387: LD_INT 8
72389: EQUAL
72390: IFFALSE 72400
// sBunker := true ;
72392: LD_ADDR_EXP 85
72396: PUSH
72397: LD_INT 1
72399: ST_TO_ADDR
// if p3 = 9 then
72400: LD_VAR 0 3
72404: PUSH
72405: LD_INT 9
72407: EQUAL
72408: IFFALSE 72418
// sHack := true ;
72410: LD_ADDR_EXP 86
72414: PUSH
72415: LD_INT 1
72417: ST_TO_ADDR
// if p3 = 10 then
72418: LD_VAR 0 3
72422: PUSH
72423: LD_INT 10
72425: EQUAL
72426: IFFALSE 72436
// sFire := true ;
72428: LD_ADDR_EXP 87
72432: PUSH
72433: LD_INT 1
72435: ST_TO_ADDR
// if p3 = 11 then
72436: LD_VAR 0 3
72440: PUSH
72441: LD_INT 11
72443: EQUAL
72444: IFFALSE 72454
// sRefresh := true ;
72446: LD_ADDR_EXP 88
72450: PUSH
72451: LD_INT 1
72453: ST_TO_ADDR
// if p3 = 12 then
72454: LD_VAR 0 3
72458: PUSH
72459: LD_INT 12
72461: EQUAL
72462: IFFALSE 72472
// sExp := true ;
72464: LD_ADDR_EXP 89
72468: PUSH
72469: LD_INT 1
72471: ST_TO_ADDR
// if p3 = 13 then
72472: LD_VAR 0 3
72476: PUSH
72477: LD_INT 13
72479: EQUAL
72480: IFFALSE 72490
// sDepot := true ;
72482: LD_ADDR_EXP 90
72486: PUSH
72487: LD_INT 1
72489: ST_TO_ADDR
// if p3 = 14 then
72490: LD_VAR 0 3
72494: PUSH
72495: LD_INT 14
72497: EQUAL
72498: IFFALSE 72508
// sFlag := true ;
72500: LD_ADDR_EXP 91
72504: PUSH
72505: LD_INT 1
72507: ST_TO_ADDR
// if p3 = 15 then
72508: LD_VAR 0 3
72512: PUSH
72513: LD_INT 15
72515: EQUAL
72516: IFFALSE 72526
// sKamikadze := true ;
72518: LD_ADDR_EXP 99
72522: PUSH
72523: LD_INT 1
72525: ST_TO_ADDR
// if p3 = 16 then
72526: LD_VAR 0 3
72530: PUSH
72531: LD_INT 16
72533: EQUAL
72534: IFFALSE 72544
// sTroll := true ;
72536: LD_ADDR_EXP 100
72540: PUSH
72541: LD_INT 1
72543: ST_TO_ADDR
// if p3 = 17 then
72544: LD_VAR 0 3
72548: PUSH
72549: LD_INT 17
72551: EQUAL
72552: IFFALSE 72562
// sSlow := true ;
72554: LD_ADDR_EXP 101
72558: PUSH
72559: LD_INT 1
72561: ST_TO_ADDR
// if p3 = 18 then
72562: LD_VAR 0 3
72566: PUSH
72567: LD_INT 18
72569: EQUAL
72570: IFFALSE 72580
// sLack := true ;
72572: LD_ADDR_EXP 102
72576: PUSH
72577: LD_INT 1
72579: ST_TO_ADDR
// if p3 = 19 then
72580: LD_VAR 0 3
72584: PUSH
72585: LD_INT 19
72587: EQUAL
72588: IFFALSE 72598
// sTank := true ;
72590: LD_ADDR_EXP 104
72594: PUSH
72595: LD_INT 1
72597: ST_TO_ADDR
// if p3 = 20 then
72598: LD_VAR 0 3
72602: PUSH
72603: LD_INT 20
72605: EQUAL
72606: IFFALSE 72616
// sRemote := true ;
72608: LD_ADDR_EXP 105
72612: PUSH
72613: LD_INT 1
72615: ST_TO_ADDR
// if p3 = 21 then
72616: LD_VAR 0 3
72620: PUSH
72621: LD_INT 21
72623: EQUAL
72624: IFFALSE 72634
// sPowell := true ;
72626: LD_ADDR_EXP 106
72630: PUSH
72631: LD_INT 1
72633: ST_TO_ADDR
// if p3 = 22 then
72634: LD_VAR 0 3
72638: PUSH
72639: LD_INT 22
72641: EQUAL
72642: IFFALSE 72652
// sTeleport := true ;
72644: LD_ADDR_EXP 109
72648: PUSH
72649: LD_INT 1
72651: ST_TO_ADDR
// if p3 = 23 then
72652: LD_VAR 0 3
72656: PUSH
72657: LD_INT 23
72659: EQUAL
72660: IFFALSE 72670
// sOilTower := true ;
72662: LD_ADDR_EXP 111
72666: PUSH
72667: LD_INT 1
72669: ST_TO_ADDR
// if p3 = 24 then
72670: LD_VAR 0 3
72674: PUSH
72675: LD_INT 24
72677: EQUAL
72678: IFFALSE 72688
// sShovel := true ;
72680: LD_ADDR_EXP 112
72684: PUSH
72685: LD_INT 1
72687: ST_TO_ADDR
// if p3 = 25 then
72688: LD_VAR 0 3
72692: PUSH
72693: LD_INT 25
72695: EQUAL
72696: IFFALSE 72706
// sSheik := true ;
72698: LD_ADDR_EXP 113
72702: PUSH
72703: LD_INT 1
72705: ST_TO_ADDR
// if p3 = 26 then
72706: LD_VAR 0 3
72710: PUSH
72711: LD_INT 26
72713: EQUAL
72714: IFFALSE 72724
// sEarthquake := true ;
72716: LD_ADDR_EXP 115
72720: PUSH
72721: LD_INT 1
72723: ST_TO_ADDR
// if p3 = 27 then
72724: LD_VAR 0 3
72728: PUSH
72729: LD_INT 27
72731: EQUAL
72732: IFFALSE 72742
// sAI := true ;
72734: LD_ADDR_EXP 116
72738: PUSH
72739: LD_INT 1
72741: ST_TO_ADDR
// if p3 = 28 then
72742: LD_VAR 0 3
72746: PUSH
72747: LD_INT 28
72749: EQUAL
72750: IFFALSE 72760
// sCargo := true ;
72752: LD_ADDR_EXP 119
72756: PUSH
72757: LD_INT 1
72759: ST_TO_ADDR
// if p3 = 29 then
72760: LD_VAR 0 3
72764: PUSH
72765: LD_INT 29
72767: EQUAL
72768: IFFALSE 72778
// sDLaser := true ;
72770: LD_ADDR_EXP 120
72774: PUSH
72775: LD_INT 1
72777: ST_TO_ADDR
// if p3 = 30 then
72778: LD_VAR 0 3
72782: PUSH
72783: LD_INT 30
72785: EQUAL
72786: IFFALSE 72796
// sExchange := true ;
72788: LD_ADDR_EXP 121
72792: PUSH
72793: LD_INT 1
72795: ST_TO_ADDR
// if p3 = 31 then
72796: LD_VAR 0 3
72800: PUSH
72801: LD_INT 31
72803: EQUAL
72804: IFFALSE 72814
// sFac := true ;
72806: LD_ADDR_EXP 122
72810: PUSH
72811: LD_INT 1
72813: ST_TO_ADDR
// if p3 = 32 then
72814: LD_VAR 0 3
72818: PUSH
72819: LD_INT 32
72821: EQUAL
72822: IFFALSE 72832
// sPower := true ;
72824: LD_ADDR_EXP 123
72828: PUSH
72829: LD_INT 1
72831: ST_TO_ADDR
// if p3 = 33 then
72832: LD_VAR 0 3
72836: PUSH
72837: LD_INT 33
72839: EQUAL
72840: IFFALSE 72850
// sRandom := true ;
72842: LD_ADDR_EXP 124
72846: PUSH
72847: LD_INT 1
72849: ST_TO_ADDR
// if p3 = 34 then
72850: LD_VAR 0 3
72854: PUSH
72855: LD_INT 34
72857: EQUAL
72858: IFFALSE 72868
// sShield := true ;
72860: LD_ADDR_EXP 125
72864: PUSH
72865: LD_INT 1
72867: ST_TO_ADDR
// if p3 = 35 then
72868: LD_VAR 0 3
72872: PUSH
72873: LD_INT 35
72875: EQUAL
72876: IFFALSE 72886
// sTime := true ;
72878: LD_ADDR_EXP 126
72882: PUSH
72883: LD_INT 1
72885: ST_TO_ADDR
// if p3 = 36 then
72886: LD_VAR 0 3
72890: PUSH
72891: LD_INT 36
72893: EQUAL
72894: IFFALSE 72904
// sTools := true ;
72896: LD_ADDR_EXP 127
72900: PUSH
72901: LD_INT 1
72903: ST_TO_ADDR
// if p3 = 101 then
72904: LD_VAR 0 3
72908: PUSH
72909: LD_INT 101
72911: EQUAL
72912: IFFALSE 72922
// sSold := true ;
72914: LD_ADDR_EXP 92
72918: PUSH
72919: LD_INT 1
72921: ST_TO_ADDR
// if p3 = 102 then
72922: LD_VAR 0 3
72926: PUSH
72927: LD_INT 102
72929: EQUAL
72930: IFFALSE 72940
// sDiff := true ;
72932: LD_ADDR_EXP 93
72936: PUSH
72937: LD_INT 1
72939: ST_TO_ADDR
// if p3 = 103 then
72940: LD_VAR 0 3
72944: PUSH
72945: LD_INT 103
72947: EQUAL
72948: IFFALSE 72958
// sFog := true ;
72950: LD_ADDR_EXP 96
72954: PUSH
72955: LD_INT 1
72957: ST_TO_ADDR
// if p3 = 104 then
72958: LD_VAR 0 3
72962: PUSH
72963: LD_INT 104
72965: EQUAL
72966: IFFALSE 72976
// sReset := true ;
72968: LD_ADDR_EXP 97
72972: PUSH
72973: LD_INT 1
72975: ST_TO_ADDR
// if p3 = 105 then
72976: LD_VAR 0 3
72980: PUSH
72981: LD_INT 105
72983: EQUAL
72984: IFFALSE 72994
// sSun := true ;
72986: LD_ADDR_EXP 98
72990: PUSH
72991: LD_INT 1
72993: ST_TO_ADDR
// if p3 = 106 then
72994: LD_VAR 0 3
72998: PUSH
72999: LD_INT 106
73001: EQUAL
73002: IFFALSE 73012
// sTiger := true ;
73004: LD_ADDR_EXP 94
73008: PUSH
73009: LD_INT 1
73011: ST_TO_ADDR
// if p3 = 107 then
73012: LD_VAR 0 3
73016: PUSH
73017: LD_INT 107
73019: EQUAL
73020: IFFALSE 73030
// sBomb := true ;
73022: LD_ADDR_EXP 95
73026: PUSH
73027: LD_INT 1
73029: ST_TO_ADDR
// if p3 = 108 then
73030: LD_VAR 0 3
73034: PUSH
73035: LD_INT 108
73037: EQUAL
73038: IFFALSE 73048
// sWound := true ;
73040: LD_ADDR_EXP 103
73044: PUSH
73045: LD_INT 1
73047: ST_TO_ADDR
// if p3 = 109 then
73048: LD_VAR 0 3
73052: PUSH
73053: LD_INT 109
73055: EQUAL
73056: IFFALSE 73066
// sBetray := true ;
73058: LD_ADDR_EXP 107
73062: PUSH
73063: LD_INT 1
73065: ST_TO_ADDR
// if p3 = 110 then
73066: LD_VAR 0 3
73070: PUSH
73071: LD_INT 110
73073: EQUAL
73074: IFFALSE 73084
// sContamin := true ;
73076: LD_ADDR_EXP 108
73080: PUSH
73081: LD_INT 1
73083: ST_TO_ADDR
// if p3 = 111 then
73084: LD_VAR 0 3
73088: PUSH
73089: LD_INT 111
73091: EQUAL
73092: IFFALSE 73102
// sOil := true ;
73094: LD_ADDR_EXP 110
73098: PUSH
73099: LD_INT 1
73101: ST_TO_ADDR
// if p3 = 112 then
73102: LD_VAR 0 3
73106: PUSH
73107: LD_INT 112
73109: EQUAL
73110: IFFALSE 73120
// sStu := true ;
73112: LD_ADDR_EXP 114
73116: PUSH
73117: LD_INT 1
73119: ST_TO_ADDR
// if p3 = 113 then
73120: LD_VAR 0 3
73124: PUSH
73125: LD_INT 113
73127: EQUAL
73128: IFFALSE 73138
// sBazooka := true ;
73130: LD_ADDR_EXP 117
73134: PUSH
73135: LD_INT 1
73137: ST_TO_ADDR
// if p3 = 114 then
73138: LD_VAR 0 3
73142: PUSH
73143: LD_INT 114
73145: EQUAL
73146: IFFALSE 73156
// sMortar := true ;
73148: LD_ADDR_EXP 118
73152: PUSH
73153: LD_INT 1
73155: ST_TO_ADDR
// if p3 = 115 then
73156: LD_VAR 0 3
73160: PUSH
73161: LD_INT 115
73163: EQUAL
73164: IFFALSE 73174
// sRanger := true ;
73166: LD_ADDR_EXP 128
73170: PUSH
73171: LD_INT 1
73173: ST_TO_ADDR
// if p3 = 116 then
73174: LD_VAR 0 3
73178: PUSH
73179: LD_INT 116
73181: EQUAL
73182: IFFALSE 73192
// sComputer := true ;
73184: LD_ADDR_EXP 129
73188: PUSH
73189: LD_INT 1
73191: ST_TO_ADDR
// if p3 = 117 then
73192: LD_VAR 0 3
73196: PUSH
73197: LD_INT 117
73199: EQUAL
73200: IFFALSE 73210
// s30 := true ;
73202: LD_ADDR_EXP 130
73206: PUSH
73207: LD_INT 1
73209: ST_TO_ADDR
// if p3 = 118 then
73210: LD_VAR 0 3
73214: PUSH
73215: LD_INT 118
73217: EQUAL
73218: IFFALSE 73228
// s60 := true ;
73220: LD_ADDR_EXP 131
73224: PUSH
73225: LD_INT 1
73227: ST_TO_ADDR
// end ; if p2 = hack_mode then
73228: LD_VAR 0 2
73232: PUSH
73233: LD_INT 101
73235: EQUAL
73236: IFFALSE 73364
// begin case p3 of 1 :
73238: LD_VAR 0 3
73242: PUSH
73243: LD_INT 1
73245: DOUBLE
73246: EQUAL
73247: IFTRUE 73251
73249: GO 73258
73251: POP
// hHackUnlimitedResources ; 2 :
73252: CALL 85511 0 0
73256: GO 73364
73258: LD_INT 2
73260: DOUBLE
73261: EQUAL
73262: IFTRUE 73266
73264: GO 73273
73266: POP
// hHackSetLevel10 ; 3 :
73267: CALL 85644 0 0
73271: GO 73364
73273: LD_INT 3
73275: DOUBLE
73276: EQUAL
73277: IFTRUE 73281
73279: GO 73288
73281: POP
// hHackSetLevel10YourUnits ; 4 :
73282: CALL 85729 0 0
73286: GO 73364
73288: LD_INT 4
73290: DOUBLE
73291: EQUAL
73292: IFTRUE 73296
73294: GO 73303
73296: POP
// hHackInvincible ; 5 :
73297: CALL 86177 0 0
73301: GO 73364
73303: LD_INT 5
73305: DOUBLE
73306: EQUAL
73307: IFTRUE 73311
73309: GO 73318
73311: POP
// hHackInvisible ; 6 :
73312: CALL 86288 0 0
73316: GO 73364
73318: LD_INT 6
73320: DOUBLE
73321: EQUAL
73322: IFTRUE 73326
73324: GO 73333
73326: POP
// hHackChangeYourSide ; 7 :
73327: CALL 86345 0 0
73331: GO 73364
73333: LD_INT 7
73335: DOUBLE
73336: EQUAL
73337: IFTRUE 73341
73339: GO 73348
73341: POP
// hHackChangeUnitSide ; 8 :
73342: CALL 86387 0 0
73346: GO 73364
73348: LD_INT 8
73350: DOUBLE
73351: EQUAL
73352: IFTRUE 73356
73354: GO 73363
73356: POP
// hHackFog ; end ;
73357: CALL 86488 0 0
73361: GO 73364
73363: POP
// end ; if p2 = game_save_mode then
73364: LD_VAR 0 2
73368: PUSH
73369: LD_INT 102
73371: EQUAL
73372: IFFALSE 73427
// begin if p3 = 1 then
73374: LD_VAR 0 3
73378: PUSH
73379: LD_INT 1
73381: EQUAL
73382: IFFALSE 73394
// globalGameSaveCounter := p4 ;
73384: LD_ADDR_EXP 74
73388: PUSH
73389: LD_VAR 0 4
73393: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
73394: LD_VAR 0 3
73398: PUSH
73399: LD_INT 2
73401: EQUAL
73402: PUSH
73403: LD_EXP 74
73407: AND
73408: IFFALSE 73427
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73410: LD_STRING setGameSaveCounter(
73412: PUSH
73413: LD_EXP 74
73417: STR
73418: PUSH
73419: LD_STRING )
73421: STR
73422: PPUSH
73423: CALL_OW 559
// end ; end ;
73427: LD_VAR 0 7
73431: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
73432: LD_INT 0
73434: PPUSH
// streamModeActive := false ;
73435: LD_ADDR_EXP 75
73439: PUSH
73440: LD_INT 0
73442: ST_TO_ADDR
// normalCounter := 36 ;
73443: LD_ADDR_EXP 76
73447: PUSH
73448: LD_INT 36
73450: ST_TO_ADDR
// hardcoreCounter := 18 ;
73451: LD_ADDR_EXP 77
73455: PUSH
73456: LD_INT 18
73458: ST_TO_ADDR
// sRocket := false ;
73459: LD_ADDR_EXP 80
73463: PUSH
73464: LD_INT 0
73466: ST_TO_ADDR
// sSpeed := false ;
73467: LD_ADDR_EXP 79
73471: PUSH
73472: LD_INT 0
73474: ST_TO_ADDR
// sEngine := false ;
73475: LD_ADDR_EXP 81
73479: PUSH
73480: LD_INT 0
73482: ST_TO_ADDR
// sSpec := false ;
73483: LD_ADDR_EXP 78
73487: PUSH
73488: LD_INT 0
73490: ST_TO_ADDR
// sLevel := false ;
73491: LD_ADDR_EXP 82
73495: PUSH
73496: LD_INT 0
73498: ST_TO_ADDR
// sArmoury := false ;
73499: LD_ADDR_EXP 83
73503: PUSH
73504: LD_INT 0
73506: ST_TO_ADDR
// sRadar := false ;
73507: LD_ADDR_EXP 84
73511: PUSH
73512: LD_INT 0
73514: ST_TO_ADDR
// sBunker := false ;
73515: LD_ADDR_EXP 85
73519: PUSH
73520: LD_INT 0
73522: ST_TO_ADDR
// sHack := false ;
73523: LD_ADDR_EXP 86
73527: PUSH
73528: LD_INT 0
73530: ST_TO_ADDR
// sFire := false ;
73531: LD_ADDR_EXP 87
73535: PUSH
73536: LD_INT 0
73538: ST_TO_ADDR
// sRefresh := false ;
73539: LD_ADDR_EXP 88
73543: PUSH
73544: LD_INT 0
73546: ST_TO_ADDR
// sExp := false ;
73547: LD_ADDR_EXP 89
73551: PUSH
73552: LD_INT 0
73554: ST_TO_ADDR
// sDepot := false ;
73555: LD_ADDR_EXP 90
73559: PUSH
73560: LD_INT 0
73562: ST_TO_ADDR
// sFlag := false ;
73563: LD_ADDR_EXP 91
73567: PUSH
73568: LD_INT 0
73570: ST_TO_ADDR
// sKamikadze := false ;
73571: LD_ADDR_EXP 99
73575: PUSH
73576: LD_INT 0
73578: ST_TO_ADDR
// sTroll := false ;
73579: LD_ADDR_EXP 100
73583: PUSH
73584: LD_INT 0
73586: ST_TO_ADDR
// sSlow := false ;
73587: LD_ADDR_EXP 101
73591: PUSH
73592: LD_INT 0
73594: ST_TO_ADDR
// sLack := false ;
73595: LD_ADDR_EXP 102
73599: PUSH
73600: LD_INT 0
73602: ST_TO_ADDR
// sTank := false ;
73603: LD_ADDR_EXP 104
73607: PUSH
73608: LD_INT 0
73610: ST_TO_ADDR
// sRemote := false ;
73611: LD_ADDR_EXP 105
73615: PUSH
73616: LD_INT 0
73618: ST_TO_ADDR
// sPowell := false ;
73619: LD_ADDR_EXP 106
73623: PUSH
73624: LD_INT 0
73626: ST_TO_ADDR
// sTeleport := false ;
73627: LD_ADDR_EXP 109
73631: PUSH
73632: LD_INT 0
73634: ST_TO_ADDR
// sOilTower := false ;
73635: LD_ADDR_EXP 111
73639: PUSH
73640: LD_INT 0
73642: ST_TO_ADDR
// sShovel := false ;
73643: LD_ADDR_EXP 112
73647: PUSH
73648: LD_INT 0
73650: ST_TO_ADDR
// sSheik := false ;
73651: LD_ADDR_EXP 113
73655: PUSH
73656: LD_INT 0
73658: ST_TO_ADDR
// sEarthquake := false ;
73659: LD_ADDR_EXP 115
73663: PUSH
73664: LD_INT 0
73666: ST_TO_ADDR
// sAI := false ;
73667: LD_ADDR_EXP 116
73671: PUSH
73672: LD_INT 0
73674: ST_TO_ADDR
// sCargo := false ;
73675: LD_ADDR_EXP 119
73679: PUSH
73680: LD_INT 0
73682: ST_TO_ADDR
// sDLaser := false ;
73683: LD_ADDR_EXP 120
73687: PUSH
73688: LD_INT 0
73690: ST_TO_ADDR
// sExchange := false ;
73691: LD_ADDR_EXP 121
73695: PUSH
73696: LD_INT 0
73698: ST_TO_ADDR
// sFac := false ;
73699: LD_ADDR_EXP 122
73703: PUSH
73704: LD_INT 0
73706: ST_TO_ADDR
// sPower := false ;
73707: LD_ADDR_EXP 123
73711: PUSH
73712: LD_INT 0
73714: ST_TO_ADDR
// sRandom := false ;
73715: LD_ADDR_EXP 124
73719: PUSH
73720: LD_INT 0
73722: ST_TO_ADDR
// sShield := false ;
73723: LD_ADDR_EXP 125
73727: PUSH
73728: LD_INT 0
73730: ST_TO_ADDR
// sTime := false ;
73731: LD_ADDR_EXP 126
73735: PUSH
73736: LD_INT 0
73738: ST_TO_ADDR
// sTools := false ;
73739: LD_ADDR_EXP 127
73743: PUSH
73744: LD_INT 0
73746: ST_TO_ADDR
// sSold := false ;
73747: LD_ADDR_EXP 92
73751: PUSH
73752: LD_INT 0
73754: ST_TO_ADDR
// sDiff := false ;
73755: LD_ADDR_EXP 93
73759: PUSH
73760: LD_INT 0
73762: ST_TO_ADDR
// sFog := false ;
73763: LD_ADDR_EXP 96
73767: PUSH
73768: LD_INT 0
73770: ST_TO_ADDR
// sReset := false ;
73771: LD_ADDR_EXP 97
73775: PUSH
73776: LD_INT 0
73778: ST_TO_ADDR
// sSun := false ;
73779: LD_ADDR_EXP 98
73783: PUSH
73784: LD_INT 0
73786: ST_TO_ADDR
// sTiger := false ;
73787: LD_ADDR_EXP 94
73791: PUSH
73792: LD_INT 0
73794: ST_TO_ADDR
// sBomb := false ;
73795: LD_ADDR_EXP 95
73799: PUSH
73800: LD_INT 0
73802: ST_TO_ADDR
// sWound := false ;
73803: LD_ADDR_EXP 103
73807: PUSH
73808: LD_INT 0
73810: ST_TO_ADDR
// sBetray := false ;
73811: LD_ADDR_EXP 107
73815: PUSH
73816: LD_INT 0
73818: ST_TO_ADDR
// sContamin := false ;
73819: LD_ADDR_EXP 108
73823: PUSH
73824: LD_INT 0
73826: ST_TO_ADDR
// sOil := false ;
73827: LD_ADDR_EXP 110
73831: PUSH
73832: LD_INT 0
73834: ST_TO_ADDR
// sStu := false ;
73835: LD_ADDR_EXP 114
73839: PUSH
73840: LD_INT 0
73842: ST_TO_ADDR
// sBazooka := false ;
73843: LD_ADDR_EXP 117
73847: PUSH
73848: LD_INT 0
73850: ST_TO_ADDR
// sMortar := false ;
73851: LD_ADDR_EXP 118
73855: PUSH
73856: LD_INT 0
73858: ST_TO_ADDR
// sRanger := false ;
73859: LD_ADDR_EXP 128
73863: PUSH
73864: LD_INT 0
73866: ST_TO_ADDR
// sComputer := false ;
73867: LD_ADDR_EXP 129
73871: PUSH
73872: LD_INT 0
73874: ST_TO_ADDR
// s30 := false ;
73875: LD_ADDR_EXP 130
73879: PUSH
73880: LD_INT 0
73882: ST_TO_ADDR
// s60 := false ;
73883: LD_ADDR_EXP 131
73887: PUSH
73888: LD_INT 0
73890: ST_TO_ADDR
// end ;
73891: LD_VAR 0 1
73895: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
73896: LD_INT 0
73898: PPUSH
73899: PPUSH
73900: PPUSH
73901: PPUSH
73902: PPUSH
73903: PPUSH
73904: PPUSH
// result := [ ] ;
73905: LD_ADDR_VAR 0 2
73909: PUSH
73910: EMPTY
73911: ST_TO_ADDR
// if campaign_id = 1 then
73912: LD_OWVAR 69
73916: PUSH
73917: LD_INT 1
73919: EQUAL
73920: IFFALSE 77086
// begin case mission_number of 1 :
73922: LD_OWVAR 70
73926: PUSH
73927: LD_INT 1
73929: DOUBLE
73930: EQUAL
73931: IFTRUE 73935
73933: GO 74011
73935: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
73936: LD_ADDR_VAR 0 2
73940: PUSH
73941: LD_INT 2
73943: PUSH
73944: LD_INT 4
73946: PUSH
73947: LD_INT 11
73949: PUSH
73950: LD_INT 12
73952: PUSH
73953: LD_INT 15
73955: PUSH
73956: LD_INT 16
73958: PUSH
73959: LD_INT 22
73961: PUSH
73962: LD_INT 23
73964: PUSH
73965: LD_INT 26
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 101
73981: PUSH
73982: LD_INT 102
73984: PUSH
73985: LD_INT 106
73987: PUSH
73988: LD_INT 116
73990: PUSH
73991: LD_INT 117
73993: PUSH
73994: LD_INT 118
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: ST_TO_ADDR
74009: GO 77084
74011: LD_INT 2
74013: DOUBLE
74014: EQUAL
74015: IFTRUE 74019
74017: GO 74103
74019: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
74020: LD_ADDR_VAR 0 2
74024: PUSH
74025: LD_INT 2
74027: PUSH
74028: LD_INT 4
74030: PUSH
74031: LD_INT 11
74033: PUSH
74034: LD_INT 12
74036: PUSH
74037: LD_INT 15
74039: PUSH
74040: LD_INT 16
74042: PUSH
74043: LD_INT 22
74045: PUSH
74046: LD_INT 23
74048: PUSH
74049: LD_INT 26
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: LIST
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: PUSH
74063: LD_INT 101
74065: PUSH
74066: LD_INT 102
74068: PUSH
74069: LD_INT 105
74071: PUSH
74072: LD_INT 106
74074: PUSH
74075: LD_INT 108
74077: PUSH
74078: LD_INT 116
74080: PUSH
74081: LD_INT 117
74083: PUSH
74084: LD_INT 118
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: ST_TO_ADDR
74101: GO 77084
74103: LD_INT 3
74105: DOUBLE
74106: EQUAL
74107: IFTRUE 74111
74109: GO 74199
74111: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
74112: LD_ADDR_VAR 0 2
74116: PUSH
74117: LD_INT 2
74119: PUSH
74120: LD_INT 4
74122: PUSH
74123: LD_INT 5
74125: PUSH
74126: LD_INT 11
74128: PUSH
74129: LD_INT 12
74131: PUSH
74132: LD_INT 15
74134: PUSH
74135: LD_INT 16
74137: PUSH
74138: LD_INT 22
74140: PUSH
74141: LD_INT 26
74143: PUSH
74144: LD_INT 36
74146: PUSH
74147: EMPTY
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 101
74161: PUSH
74162: LD_INT 102
74164: PUSH
74165: LD_INT 105
74167: PUSH
74168: LD_INT 106
74170: PUSH
74171: LD_INT 108
74173: PUSH
74174: LD_INT 116
74176: PUSH
74177: LD_INT 117
74179: PUSH
74180: LD_INT 118
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: ST_TO_ADDR
74197: GO 77084
74199: LD_INT 4
74201: DOUBLE
74202: EQUAL
74203: IFTRUE 74207
74205: GO 74303
74207: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
74208: LD_ADDR_VAR 0 2
74212: PUSH
74213: LD_INT 2
74215: PUSH
74216: LD_INT 4
74218: PUSH
74219: LD_INT 5
74221: PUSH
74222: LD_INT 8
74224: PUSH
74225: LD_INT 11
74227: PUSH
74228: LD_INT 12
74230: PUSH
74231: LD_INT 15
74233: PUSH
74234: LD_INT 16
74236: PUSH
74237: LD_INT 22
74239: PUSH
74240: LD_INT 23
74242: PUSH
74243: LD_INT 26
74245: PUSH
74246: LD_INT 36
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: PUSH
74263: LD_INT 101
74265: PUSH
74266: LD_INT 102
74268: PUSH
74269: LD_INT 105
74271: PUSH
74272: LD_INT 106
74274: PUSH
74275: LD_INT 108
74277: PUSH
74278: LD_INT 116
74280: PUSH
74281: LD_INT 117
74283: PUSH
74284: LD_INT 118
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: ST_TO_ADDR
74301: GO 77084
74303: LD_INT 5
74305: DOUBLE
74306: EQUAL
74307: IFTRUE 74311
74309: GO 74423
74311: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
74312: LD_ADDR_VAR 0 2
74316: PUSH
74317: LD_INT 2
74319: PUSH
74320: LD_INT 4
74322: PUSH
74323: LD_INT 5
74325: PUSH
74326: LD_INT 6
74328: PUSH
74329: LD_INT 8
74331: PUSH
74332: LD_INT 11
74334: PUSH
74335: LD_INT 12
74337: PUSH
74338: LD_INT 15
74340: PUSH
74341: LD_INT 16
74343: PUSH
74344: LD_INT 22
74346: PUSH
74347: LD_INT 23
74349: PUSH
74350: LD_INT 25
74352: PUSH
74353: LD_INT 26
74355: PUSH
74356: LD_INT 36
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 101
74377: PUSH
74378: LD_INT 102
74380: PUSH
74381: LD_INT 105
74383: PUSH
74384: LD_INT 106
74386: PUSH
74387: LD_INT 108
74389: PUSH
74390: LD_INT 109
74392: PUSH
74393: LD_INT 112
74395: PUSH
74396: LD_INT 116
74398: PUSH
74399: LD_INT 117
74401: PUSH
74402: LD_INT 118
74404: PUSH
74405: EMPTY
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: PUSH
74417: EMPTY
74418: LIST
74419: LIST
74420: ST_TO_ADDR
74421: GO 77084
74423: LD_INT 6
74425: DOUBLE
74426: EQUAL
74427: IFTRUE 74431
74429: GO 74563
74431: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
74432: LD_ADDR_VAR 0 2
74436: PUSH
74437: LD_INT 2
74439: PUSH
74440: LD_INT 4
74442: PUSH
74443: LD_INT 5
74445: PUSH
74446: LD_INT 6
74448: PUSH
74449: LD_INT 8
74451: PUSH
74452: LD_INT 11
74454: PUSH
74455: LD_INT 12
74457: PUSH
74458: LD_INT 15
74460: PUSH
74461: LD_INT 16
74463: PUSH
74464: LD_INT 20
74466: PUSH
74467: LD_INT 21
74469: PUSH
74470: LD_INT 22
74472: PUSH
74473: LD_INT 23
74475: PUSH
74476: LD_INT 25
74478: PUSH
74479: LD_INT 26
74481: PUSH
74482: LD_INT 30
74484: PUSH
74485: LD_INT 31
74487: PUSH
74488: LD_INT 32
74490: PUSH
74491: LD_INT 36
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 101
74517: PUSH
74518: LD_INT 102
74520: PUSH
74521: LD_INT 105
74523: PUSH
74524: LD_INT 106
74526: PUSH
74527: LD_INT 108
74529: PUSH
74530: LD_INT 109
74532: PUSH
74533: LD_INT 112
74535: PUSH
74536: LD_INT 116
74538: PUSH
74539: LD_INT 117
74541: PUSH
74542: LD_INT 118
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: ST_TO_ADDR
74561: GO 77084
74563: LD_INT 7
74565: DOUBLE
74566: EQUAL
74567: IFTRUE 74571
74569: GO 74683
74571: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74572: LD_ADDR_VAR 0 2
74576: PUSH
74577: LD_INT 2
74579: PUSH
74580: LD_INT 4
74582: PUSH
74583: LD_INT 5
74585: PUSH
74586: LD_INT 7
74588: PUSH
74589: LD_INT 11
74591: PUSH
74592: LD_INT 12
74594: PUSH
74595: LD_INT 15
74597: PUSH
74598: LD_INT 16
74600: PUSH
74601: LD_INT 20
74603: PUSH
74604: LD_INT 21
74606: PUSH
74607: LD_INT 22
74609: PUSH
74610: LD_INT 23
74612: PUSH
74613: LD_INT 25
74615: PUSH
74616: LD_INT 26
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: PUSH
74635: LD_INT 101
74637: PUSH
74638: LD_INT 102
74640: PUSH
74641: LD_INT 103
74643: PUSH
74644: LD_INT 105
74646: PUSH
74647: LD_INT 106
74649: PUSH
74650: LD_INT 108
74652: PUSH
74653: LD_INT 112
74655: PUSH
74656: LD_INT 116
74658: PUSH
74659: LD_INT 117
74661: PUSH
74662: LD_INT 118
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: ST_TO_ADDR
74681: GO 77084
74683: LD_INT 8
74685: DOUBLE
74686: EQUAL
74687: IFTRUE 74691
74689: GO 74831
74691: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74692: LD_ADDR_VAR 0 2
74696: PUSH
74697: LD_INT 2
74699: PUSH
74700: LD_INT 4
74702: PUSH
74703: LD_INT 5
74705: PUSH
74706: LD_INT 6
74708: PUSH
74709: LD_INT 7
74711: PUSH
74712: LD_INT 8
74714: PUSH
74715: LD_INT 11
74717: PUSH
74718: LD_INT 12
74720: PUSH
74721: LD_INT 15
74723: PUSH
74724: LD_INT 16
74726: PUSH
74727: LD_INT 20
74729: PUSH
74730: LD_INT 21
74732: PUSH
74733: LD_INT 22
74735: PUSH
74736: LD_INT 23
74738: PUSH
74739: LD_INT 25
74741: PUSH
74742: LD_INT 26
74744: PUSH
74745: LD_INT 30
74747: PUSH
74748: LD_INT 31
74750: PUSH
74751: LD_INT 32
74753: PUSH
74754: LD_INT 36
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: LIST
74775: LIST
74776: LIST
74777: LIST
74778: PUSH
74779: LD_INT 101
74781: PUSH
74782: LD_INT 102
74784: PUSH
74785: LD_INT 103
74787: PUSH
74788: LD_INT 105
74790: PUSH
74791: LD_INT 106
74793: PUSH
74794: LD_INT 108
74796: PUSH
74797: LD_INT 109
74799: PUSH
74800: LD_INT 112
74802: PUSH
74803: LD_INT 116
74805: PUSH
74806: LD_INT 117
74808: PUSH
74809: LD_INT 118
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: ST_TO_ADDR
74829: GO 77084
74831: LD_INT 9
74833: DOUBLE
74834: EQUAL
74835: IFTRUE 74839
74837: GO 74987
74839: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
74840: LD_ADDR_VAR 0 2
74844: PUSH
74845: LD_INT 2
74847: PUSH
74848: LD_INT 4
74850: PUSH
74851: LD_INT 5
74853: PUSH
74854: LD_INT 6
74856: PUSH
74857: LD_INT 7
74859: PUSH
74860: LD_INT 8
74862: PUSH
74863: LD_INT 11
74865: PUSH
74866: LD_INT 12
74868: PUSH
74869: LD_INT 15
74871: PUSH
74872: LD_INT 16
74874: PUSH
74875: LD_INT 20
74877: PUSH
74878: LD_INT 21
74880: PUSH
74881: LD_INT 22
74883: PUSH
74884: LD_INT 23
74886: PUSH
74887: LD_INT 25
74889: PUSH
74890: LD_INT 26
74892: PUSH
74893: LD_INT 28
74895: PUSH
74896: LD_INT 30
74898: PUSH
74899: LD_INT 31
74901: PUSH
74902: LD_INT 32
74904: PUSH
74905: LD_INT 36
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: PUSH
74931: LD_INT 101
74933: PUSH
74934: LD_INT 102
74936: PUSH
74937: LD_INT 103
74939: PUSH
74940: LD_INT 105
74942: PUSH
74943: LD_INT 106
74945: PUSH
74946: LD_INT 108
74948: PUSH
74949: LD_INT 109
74951: PUSH
74952: LD_INT 112
74954: PUSH
74955: LD_INT 114
74957: PUSH
74958: LD_INT 116
74960: PUSH
74961: LD_INT 117
74963: PUSH
74964: LD_INT 118
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: ST_TO_ADDR
74985: GO 77084
74987: LD_INT 10
74989: DOUBLE
74990: EQUAL
74991: IFTRUE 74995
74993: GO 75191
74995: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
74996: LD_ADDR_VAR 0 2
75000: PUSH
75001: LD_INT 2
75003: PUSH
75004: LD_INT 4
75006: PUSH
75007: LD_INT 5
75009: PUSH
75010: LD_INT 6
75012: PUSH
75013: LD_INT 7
75015: PUSH
75016: LD_INT 8
75018: PUSH
75019: LD_INT 9
75021: PUSH
75022: LD_INT 10
75024: PUSH
75025: LD_INT 11
75027: PUSH
75028: LD_INT 12
75030: PUSH
75031: LD_INT 13
75033: PUSH
75034: LD_INT 14
75036: PUSH
75037: LD_INT 15
75039: PUSH
75040: LD_INT 16
75042: PUSH
75043: LD_INT 17
75045: PUSH
75046: LD_INT 18
75048: PUSH
75049: LD_INT 19
75051: PUSH
75052: LD_INT 20
75054: PUSH
75055: LD_INT 21
75057: PUSH
75058: LD_INT 22
75060: PUSH
75061: LD_INT 23
75063: PUSH
75064: LD_INT 24
75066: PUSH
75067: LD_INT 25
75069: PUSH
75070: LD_INT 26
75072: PUSH
75073: LD_INT 28
75075: PUSH
75076: LD_INT 30
75078: PUSH
75079: LD_INT 31
75081: PUSH
75082: LD_INT 32
75084: PUSH
75085: LD_INT 36
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: LIST
75102: LIST
75103: LIST
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 101
75121: PUSH
75122: LD_INT 102
75124: PUSH
75125: LD_INT 103
75127: PUSH
75128: LD_INT 104
75130: PUSH
75131: LD_INT 105
75133: PUSH
75134: LD_INT 106
75136: PUSH
75137: LD_INT 107
75139: PUSH
75140: LD_INT 108
75142: PUSH
75143: LD_INT 109
75145: PUSH
75146: LD_INT 110
75148: PUSH
75149: LD_INT 111
75151: PUSH
75152: LD_INT 112
75154: PUSH
75155: LD_INT 114
75157: PUSH
75158: LD_INT 116
75160: PUSH
75161: LD_INT 117
75163: PUSH
75164: LD_INT 118
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: ST_TO_ADDR
75189: GO 77084
75191: LD_INT 11
75193: DOUBLE
75194: EQUAL
75195: IFTRUE 75199
75197: GO 75403
75199: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
75200: LD_ADDR_VAR 0 2
75204: PUSH
75205: LD_INT 2
75207: PUSH
75208: LD_INT 3
75210: PUSH
75211: LD_INT 4
75213: PUSH
75214: LD_INT 5
75216: PUSH
75217: LD_INT 6
75219: PUSH
75220: LD_INT 7
75222: PUSH
75223: LD_INT 8
75225: PUSH
75226: LD_INT 9
75228: PUSH
75229: LD_INT 10
75231: PUSH
75232: LD_INT 11
75234: PUSH
75235: LD_INT 12
75237: PUSH
75238: LD_INT 13
75240: PUSH
75241: LD_INT 14
75243: PUSH
75244: LD_INT 15
75246: PUSH
75247: LD_INT 16
75249: PUSH
75250: LD_INT 17
75252: PUSH
75253: LD_INT 18
75255: PUSH
75256: LD_INT 19
75258: PUSH
75259: LD_INT 20
75261: PUSH
75262: LD_INT 21
75264: PUSH
75265: LD_INT 22
75267: PUSH
75268: LD_INT 23
75270: PUSH
75271: LD_INT 24
75273: PUSH
75274: LD_INT 25
75276: PUSH
75277: LD_INT 26
75279: PUSH
75280: LD_INT 28
75282: PUSH
75283: LD_INT 30
75285: PUSH
75286: LD_INT 31
75288: PUSH
75289: LD_INT 32
75291: PUSH
75292: LD_INT 34
75294: PUSH
75295: LD_INT 36
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: LIST
75302: LIST
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 101
75333: PUSH
75334: LD_INT 102
75336: PUSH
75337: LD_INT 103
75339: PUSH
75340: LD_INT 104
75342: PUSH
75343: LD_INT 105
75345: PUSH
75346: LD_INT 106
75348: PUSH
75349: LD_INT 107
75351: PUSH
75352: LD_INT 108
75354: PUSH
75355: LD_INT 109
75357: PUSH
75358: LD_INT 110
75360: PUSH
75361: LD_INT 111
75363: PUSH
75364: LD_INT 112
75366: PUSH
75367: LD_INT 114
75369: PUSH
75370: LD_INT 116
75372: PUSH
75373: LD_INT 117
75375: PUSH
75376: LD_INT 118
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: ST_TO_ADDR
75401: GO 77084
75403: LD_INT 12
75405: DOUBLE
75406: EQUAL
75407: IFTRUE 75411
75409: GO 75631
75411: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
75412: LD_ADDR_VAR 0 2
75416: PUSH
75417: LD_INT 1
75419: PUSH
75420: LD_INT 2
75422: PUSH
75423: LD_INT 3
75425: PUSH
75426: LD_INT 4
75428: PUSH
75429: LD_INT 5
75431: PUSH
75432: LD_INT 6
75434: PUSH
75435: LD_INT 7
75437: PUSH
75438: LD_INT 8
75440: PUSH
75441: LD_INT 9
75443: PUSH
75444: LD_INT 10
75446: PUSH
75447: LD_INT 11
75449: PUSH
75450: LD_INT 12
75452: PUSH
75453: LD_INT 13
75455: PUSH
75456: LD_INT 14
75458: PUSH
75459: LD_INT 15
75461: PUSH
75462: LD_INT 16
75464: PUSH
75465: LD_INT 17
75467: PUSH
75468: LD_INT 18
75470: PUSH
75471: LD_INT 19
75473: PUSH
75474: LD_INT 20
75476: PUSH
75477: LD_INT 21
75479: PUSH
75480: LD_INT 22
75482: PUSH
75483: LD_INT 23
75485: PUSH
75486: LD_INT 24
75488: PUSH
75489: LD_INT 25
75491: PUSH
75492: LD_INT 26
75494: PUSH
75495: LD_INT 27
75497: PUSH
75498: LD_INT 28
75500: PUSH
75501: LD_INT 30
75503: PUSH
75504: LD_INT 31
75506: PUSH
75507: LD_INT 32
75509: PUSH
75510: LD_INT 33
75512: PUSH
75513: LD_INT 34
75515: PUSH
75516: LD_INT 36
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: PUSH
75555: LD_INT 101
75557: PUSH
75558: LD_INT 102
75560: PUSH
75561: LD_INT 103
75563: PUSH
75564: LD_INT 104
75566: PUSH
75567: LD_INT 105
75569: PUSH
75570: LD_INT 106
75572: PUSH
75573: LD_INT 107
75575: PUSH
75576: LD_INT 108
75578: PUSH
75579: LD_INT 109
75581: PUSH
75582: LD_INT 110
75584: PUSH
75585: LD_INT 111
75587: PUSH
75588: LD_INT 112
75590: PUSH
75591: LD_INT 113
75593: PUSH
75594: LD_INT 114
75596: PUSH
75597: LD_INT 116
75599: PUSH
75600: LD_INT 117
75602: PUSH
75603: LD_INT 118
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: LIST
75619: LIST
75620: LIST
75621: LIST
75622: LIST
75623: LIST
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: ST_TO_ADDR
75629: GO 77084
75631: LD_INT 13
75633: DOUBLE
75634: EQUAL
75635: IFTRUE 75639
75637: GO 75847
75639: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75640: LD_ADDR_VAR 0 2
75644: PUSH
75645: LD_INT 1
75647: PUSH
75648: LD_INT 2
75650: PUSH
75651: LD_INT 3
75653: PUSH
75654: LD_INT 4
75656: PUSH
75657: LD_INT 5
75659: PUSH
75660: LD_INT 8
75662: PUSH
75663: LD_INT 9
75665: PUSH
75666: LD_INT 10
75668: PUSH
75669: LD_INT 11
75671: PUSH
75672: LD_INT 12
75674: PUSH
75675: LD_INT 14
75677: PUSH
75678: LD_INT 15
75680: PUSH
75681: LD_INT 16
75683: PUSH
75684: LD_INT 17
75686: PUSH
75687: LD_INT 18
75689: PUSH
75690: LD_INT 19
75692: PUSH
75693: LD_INT 20
75695: PUSH
75696: LD_INT 21
75698: PUSH
75699: LD_INT 22
75701: PUSH
75702: LD_INT 23
75704: PUSH
75705: LD_INT 24
75707: PUSH
75708: LD_INT 25
75710: PUSH
75711: LD_INT 26
75713: PUSH
75714: LD_INT 27
75716: PUSH
75717: LD_INT 28
75719: PUSH
75720: LD_INT 30
75722: PUSH
75723: LD_INT 31
75725: PUSH
75726: LD_INT 32
75728: PUSH
75729: LD_INT 33
75731: PUSH
75732: LD_INT 34
75734: PUSH
75735: LD_INT 36
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: LIST
75759: LIST
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 101
75773: PUSH
75774: LD_INT 102
75776: PUSH
75777: LD_INT 103
75779: PUSH
75780: LD_INT 104
75782: PUSH
75783: LD_INT 105
75785: PUSH
75786: LD_INT 106
75788: PUSH
75789: LD_INT 107
75791: PUSH
75792: LD_INT 108
75794: PUSH
75795: LD_INT 109
75797: PUSH
75798: LD_INT 110
75800: PUSH
75801: LD_INT 111
75803: PUSH
75804: LD_INT 112
75806: PUSH
75807: LD_INT 113
75809: PUSH
75810: LD_INT 114
75812: PUSH
75813: LD_INT 116
75815: PUSH
75816: LD_INT 117
75818: PUSH
75819: LD_INT 118
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: ST_TO_ADDR
75845: GO 77084
75847: LD_INT 14
75849: DOUBLE
75850: EQUAL
75851: IFTRUE 75855
75853: GO 76079
75855: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
75856: LD_ADDR_VAR 0 2
75860: PUSH
75861: LD_INT 1
75863: PUSH
75864: LD_INT 2
75866: PUSH
75867: LD_INT 3
75869: PUSH
75870: LD_INT 4
75872: PUSH
75873: LD_INT 5
75875: PUSH
75876: LD_INT 6
75878: PUSH
75879: LD_INT 7
75881: PUSH
75882: LD_INT 8
75884: PUSH
75885: LD_INT 9
75887: PUSH
75888: LD_INT 10
75890: PUSH
75891: LD_INT 11
75893: PUSH
75894: LD_INT 12
75896: PUSH
75897: LD_INT 13
75899: PUSH
75900: LD_INT 14
75902: PUSH
75903: LD_INT 15
75905: PUSH
75906: LD_INT 16
75908: PUSH
75909: LD_INT 17
75911: PUSH
75912: LD_INT 18
75914: PUSH
75915: LD_INT 19
75917: PUSH
75918: LD_INT 20
75920: PUSH
75921: LD_INT 21
75923: PUSH
75924: LD_INT 22
75926: PUSH
75927: LD_INT 23
75929: PUSH
75930: LD_INT 24
75932: PUSH
75933: LD_INT 25
75935: PUSH
75936: LD_INT 26
75938: PUSH
75939: LD_INT 27
75941: PUSH
75942: LD_INT 28
75944: PUSH
75945: LD_INT 29
75947: PUSH
75948: LD_INT 30
75950: PUSH
75951: LD_INT 31
75953: PUSH
75954: LD_INT 32
75956: PUSH
75957: LD_INT 33
75959: PUSH
75960: LD_INT 34
75962: PUSH
75963: LD_INT 36
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: PUSH
76003: LD_INT 101
76005: PUSH
76006: LD_INT 102
76008: PUSH
76009: LD_INT 103
76011: PUSH
76012: LD_INT 104
76014: PUSH
76015: LD_INT 105
76017: PUSH
76018: LD_INT 106
76020: PUSH
76021: LD_INT 107
76023: PUSH
76024: LD_INT 108
76026: PUSH
76027: LD_INT 109
76029: PUSH
76030: LD_INT 110
76032: PUSH
76033: LD_INT 111
76035: PUSH
76036: LD_INT 112
76038: PUSH
76039: LD_INT 113
76041: PUSH
76042: LD_INT 114
76044: PUSH
76045: LD_INT 116
76047: PUSH
76048: LD_INT 117
76050: PUSH
76051: LD_INT 118
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: ST_TO_ADDR
76077: GO 77084
76079: LD_INT 15
76081: DOUBLE
76082: EQUAL
76083: IFTRUE 76087
76085: GO 76311
76087: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
76088: LD_ADDR_VAR 0 2
76092: PUSH
76093: LD_INT 1
76095: PUSH
76096: LD_INT 2
76098: PUSH
76099: LD_INT 3
76101: PUSH
76102: LD_INT 4
76104: PUSH
76105: LD_INT 5
76107: PUSH
76108: LD_INT 6
76110: PUSH
76111: LD_INT 7
76113: PUSH
76114: LD_INT 8
76116: PUSH
76117: LD_INT 9
76119: PUSH
76120: LD_INT 10
76122: PUSH
76123: LD_INT 11
76125: PUSH
76126: LD_INT 12
76128: PUSH
76129: LD_INT 13
76131: PUSH
76132: LD_INT 14
76134: PUSH
76135: LD_INT 15
76137: PUSH
76138: LD_INT 16
76140: PUSH
76141: LD_INT 17
76143: PUSH
76144: LD_INT 18
76146: PUSH
76147: LD_INT 19
76149: PUSH
76150: LD_INT 20
76152: PUSH
76153: LD_INT 21
76155: PUSH
76156: LD_INT 22
76158: PUSH
76159: LD_INT 23
76161: PUSH
76162: LD_INT 24
76164: PUSH
76165: LD_INT 25
76167: PUSH
76168: LD_INT 26
76170: PUSH
76171: LD_INT 27
76173: PUSH
76174: LD_INT 28
76176: PUSH
76177: LD_INT 29
76179: PUSH
76180: LD_INT 30
76182: PUSH
76183: LD_INT 31
76185: PUSH
76186: LD_INT 32
76188: PUSH
76189: LD_INT 33
76191: PUSH
76192: LD_INT 34
76194: PUSH
76195: LD_INT 36
76197: PUSH
76198: EMPTY
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: PUSH
76235: LD_INT 101
76237: PUSH
76238: LD_INT 102
76240: PUSH
76241: LD_INT 103
76243: PUSH
76244: LD_INT 104
76246: PUSH
76247: LD_INT 105
76249: PUSH
76250: LD_INT 106
76252: PUSH
76253: LD_INT 107
76255: PUSH
76256: LD_INT 108
76258: PUSH
76259: LD_INT 109
76261: PUSH
76262: LD_INT 110
76264: PUSH
76265: LD_INT 111
76267: PUSH
76268: LD_INT 112
76270: PUSH
76271: LD_INT 113
76273: PUSH
76274: LD_INT 114
76276: PUSH
76277: LD_INT 116
76279: PUSH
76280: LD_INT 117
76282: PUSH
76283: LD_INT 118
76285: PUSH
76286: EMPTY
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: ST_TO_ADDR
76309: GO 77084
76311: LD_INT 16
76313: DOUBLE
76314: EQUAL
76315: IFTRUE 76319
76317: GO 76455
76319: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
76320: LD_ADDR_VAR 0 2
76324: PUSH
76325: LD_INT 2
76327: PUSH
76328: LD_INT 4
76330: PUSH
76331: LD_INT 5
76333: PUSH
76334: LD_INT 7
76336: PUSH
76337: LD_INT 11
76339: PUSH
76340: LD_INT 12
76342: PUSH
76343: LD_INT 15
76345: PUSH
76346: LD_INT 16
76348: PUSH
76349: LD_INT 20
76351: PUSH
76352: LD_INT 21
76354: PUSH
76355: LD_INT 22
76357: PUSH
76358: LD_INT 23
76360: PUSH
76361: LD_INT 25
76363: PUSH
76364: LD_INT 26
76366: PUSH
76367: LD_INT 30
76369: PUSH
76370: LD_INT 31
76372: PUSH
76373: LD_INT 32
76375: PUSH
76376: LD_INT 33
76378: PUSH
76379: LD_INT 34
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: PUSH
76403: LD_INT 101
76405: PUSH
76406: LD_INT 102
76408: PUSH
76409: LD_INT 103
76411: PUSH
76412: LD_INT 106
76414: PUSH
76415: LD_INT 108
76417: PUSH
76418: LD_INT 112
76420: PUSH
76421: LD_INT 113
76423: PUSH
76424: LD_INT 114
76426: PUSH
76427: LD_INT 116
76429: PUSH
76430: LD_INT 117
76432: PUSH
76433: LD_INT 118
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: ST_TO_ADDR
76453: GO 77084
76455: LD_INT 17
76457: DOUBLE
76458: EQUAL
76459: IFTRUE 76463
76461: GO 76687
76463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
76464: LD_ADDR_VAR 0 2
76468: PUSH
76469: LD_INT 1
76471: PUSH
76472: LD_INT 2
76474: PUSH
76475: LD_INT 3
76477: PUSH
76478: LD_INT 4
76480: PUSH
76481: LD_INT 5
76483: PUSH
76484: LD_INT 6
76486: PUSH
76487: LD_INT 7
76489: PUSH
76490: LD_INT 8
76492: PUSH
76493: LD_INT 9
76495: PUSH
76496: LD_INT 10
76498: PUSH
76499: LD_INT 11
76501: PUSH
76502: LD_INT 12
76504: PUSH
76505: LD_INT 13
76507: PUSH
76508: LD_INT 14
76510: PUSH
76511: LD_INT 15
76513: PUSH
76514: LD_INT 16
76516: PUSH
76517: LD_INT 17
76519: PUSH
76520: LD_INT 18
76522: PUSH
76523: LD_INT 19
76525: PUSH
76526: LD_INT 20
76528: PUSH
76529: LD_INT 21
76531: PUSH
76532: LD_INT 22
76534: PUSH
76535: LD_INT 23
76537: PUSH
76538: LD_INT 24
76540: PUSH
76541: LD_INT 25
76543: PUSH
76544: LD_INT 26
76546: PUSH
76547: LD_INT 27
76549: PUSH
76550: LD_INT 28
76552: PUSH
76553: LD_INT 29
76555: PUSH
76556: LD_INT 30
76558: PUSH
76559: LD_INT 31
76561: PUSH
76562: LD_INT 32
76564: PUSH
76565: LD_INT 33
76567: PUSH
76568: LD_INT 34
76570: PUSH
76571: LD_INT 36
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: LIST
76584: LIST
76585: LIST
76586: LIST
76587: LIST
76588: LIST
76589: LIST
76590: LIST
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: LIST
76600: LIST
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: LIST
76607: LIST
76608: LIST
76609: LIST
76610: PUSH
76611: LD_INT 101
76613: PUSH
76614: LD_INT 102
76616: PUSH
76617: LD_INT 103
76619: PUSH
76620: LD_INT 104
76622: PUSH
76623: LD_INT 105
76625: PUSH
76626: LD_INT 106
76628: PUSH
76629: LD_INT 107
76631: PUSH
76632: LD_INT 108
76634: PUSH
76635: LD_INT 109
76637: PUSH
76638: LD_INT 110
76640: PUSH
76641: LD_INT 111
76643: PUSH
76644: LD_INT 112
76646: PUSH
76647: LD_INT 113
76649: PUSH
76650: LD_INT 114
76652: PUSH
76653: LD_INT 116
76655: PUSH
76656: LD_INT 117
76658: PUSH
76659: LD_INT 118
76661: PUSH
76662: EMPTY
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: LIST
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: ST_TO_ADDR
76685: GO 77084
76687: LD_INT 18
76689: DOUBLE
76690: EQUAL
76691: IFTRUE 76695
76693: GO 76843
76695: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76696: LD_ADDR_VAR 0 2
76700: PUSH
76701: LD_INT 2
76703: PUSH
76704: LD_INT 4
76706: PUSH
76707: LD_INT 5
76709: PUSH
76710: LD_INT 7
76712: PUSH
76713: LD_INT 11
76715: PUSH
76716: LD_INT 12
76718: PUSH
76719: LD_INT 15
76721: PUSH
76722: LD_INT 16
76724: PUSH
76725: LD_INT 20
76727: PUSH
76728: LD_INT 21
76730: PUSH
76731: LD_INT 22
76733: PUSH
76734: LD_INT 23
76736: PUSH
76737: LD_INT 25
76739: PUSH
76740: LD_INT 26
76742: PUSH
76743: LD_INT 30
76745: PUSH
76746: LD_INT 31
76748: PUSH
76749: LD_INT 32
76751: PUSH
76752: LD_INT 33
76754: PUSH
76755: LD_INT 34
76757: PUSH
76758: LD_INT 35
76760: PUSH
76761: LD_INT 36
76763: PUSH
76764: EMPTY
76765: LIST
76766: LIST
76767: LIST
76768: LIST
76769: LIST
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: LIST
76775: LIST
76776: LIST
76777: LIST
76778: LIST
76779: LIST
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 101
76789: PUSH
76790: LD_INT 102
76792: PUSH
76793: LD_INT 103
76795: PUSH
76796: LD_INT 106
76798: PUSH
76799: LD_INT 108
76801: PUSH
76802: LD_INT 112
76804: PUSH
76805: LD_INT 113
76807: PUSH
76808: LD_INT 114
76810: PUSH
76811: LD_INT 115
76813: PUSH
76814: LD_INT 116
76816: PUSH
76817: LD_INT 117
76819: PUSH
76820: LD_INT 118
76822: PUSH
76823: EMPTY
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: LIST
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: LIST
76836: PUSH
76837: EMPTY
76838: LIST
76839: LIST
76840: ST_TO_ADDR
76841: GO 77084
76843: LD_INT 19
76845: DOUBLE
76846: EQUAL
76847: IFTRUE 76851
76849: GO 77083
76851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
76852: LD_ADDR_VAR 0 2
76856: PUSH
76857: LD_INT 1
76859: PUSH
76860: LD_INT 2
76862: PUSH
76863: LD_INT 3
76865: PUSH
76866: LD_INT 4
76868: PUSH
76869: LD_INT 5
76871: PUSH
76872: LD_INT 6
76874: PUSH
76875: LD_INT 7
76877: PUSH
76878: LD_INT 8
76880: PUSH
76881: LD_INT 9
76883: PUSH
76884: LD_INT 10
76886: PUSH
76887: LD_INT 11
76889: PUSH
76890: LD_INT 12
76892: PUSH
76893: LD_INT 13
76895: PUSH
76896: LD_INT 14
76898: PUSH
76899: LD_INT 15
76901: PUSH
76902: LD_INT 16
76904: PUSH
76905: LD_INT 17
76907: PUSH
76908: LD_INT 18
76910: PUSH
76911: LD_INT 19
76913: PUSH
76914: LD_INT 20
76916: PUSH
76917: LD_INT 21
76919: PUSH
76920: LD_INT 22
76922: PUSH
76923: LD_INT 23
76925: PUSH
76926: LD_INT 24
76928: PUSH
76929: LD_INT 25
76931: PUSH
76932: LD_INT 26
76934: PUSH
76935: LD_INT 27
76937: PUSH
76938: LD_INT 28
76940: PUSH
76941: LD_INT 29
76943: PUSH
76944: LD_INT 30
76946: PUSH
76947: LD_INT 31
76949: PUSH
76950: LD_INT 32
76952: PUSH
76953: LD_INT 33
76955: PUSH
76956: LD_INT 34
76958: PUSH
76959: LD_INT 35
76961: PUSH
76962: LD_INT 36
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: LIST
76969: LIST
76970: LIST
76971: LIST
76972: LIST
76973: LIST
76974: LIST
76975: LIST
76976: LIST
76977: LIST
76978: LIST
76979: LIST
76980: LIST
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: LIST
77000: LIST
77001: LIST
77002: PUSH
77003: LD_INT 101
77005: PUSH
77006: LD_INT 102
77008: PUSH
77009: LD_INT 103
77011: PUSH
77012: LD_INT 104
77014: PUSH
77015: LD_INT 105
77017: PUSH
77018: LD_INT 106
77020: PUSH
77021: LD_INT 107
77023: PUSH
77024: LD_INT 108
77026: PUSH
77027: LD_INT 109
77029: PUSH
77030: LD_INT 110
77032: PUSH
77033: LD_INT 111
77035: PUSH
77036: LD_INT 112
77038: PUSH
77039: LD_INT 113
77041: PUSH
77042: LD_INT 114
77044: PUSH
77045: LD_INT 115
77047: PUSH
77048: LD_INT 116
77050: PUSH
77051: LD_INT 117
77053: PUSH
77054: LD_INT 118
77056: PUSH
77057: EMPTY
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: LIST
77063: LIST
77064: LIST
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: ST_TO_ADDR
77081: GO 77084
77083: POP
// end else
77084: GO 77315
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
77086: LD_ADDR_VAR 0 2
77090: PUSH
77091: LD_INT 1
77093: PUSH
77094: LD_INT 2
77096: PUSH
77097: LD_INT 3
77099: PUSH
77100: LD_INT 4
77102: PUSH
77103: LD_INT 5
77105: PUSH
77106: LD_INT 6
77108: PUSH
77109: LD_INT 7
77111: PUSH
77112: LD_INT 8
77114: PUSH
77115: LD_INT 9
77117: PUSH
77118: LD_INT 10
77120: PUSH
77121: LD_INT 11
77123: PUSH
77124: LD_INT 12
77126: PUSH
77127: LD_INT 13
77129: PUSH
77130: LD_INT 14
77132: PUSH
77133: LD_INT 15
77135: PUSH
77136: LD_INT 16
77138: PUSH
77139: LD_INT 17
77141: PUSH
77142: LD_INT 18
77144: PUSH
77145: LD_INT 19
77147: PUSH
77148: LD_INT 20
77150: PUSH
77151: LD_INT 21
77153: PUSH
77154: LD_INT 22
77156: PUSH
77157: LD_INT 23
77159: PUSH
77160: LD_INT 24
77162: PUSH
77163: LD_INT 25
77165: PUSH
77166: LD_INT 26
77168: PUSH
77169: LD_INT 27
77171: PUSH
77172: LD_INT 28
77174: PUSH
77175: LD_INT 29
77177: PUSH
77178: LD_INT 30
77180: PUSH
77181: LD_INT 31
77183: PUSH
77184: LD_INT 32
77186: PUSH
77187: LD_INT 33
77189: PUSH
77190: LD_INT 34
77192: PUSH
77193: LD_INT 35
77195: PUSH
77196: LD_INT 36
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: PUSH
77237: LD_INT 101
77239: PUSH
77240: LD_INT 102
77242: PUSH
77243: LD_INT 103
77245: PUSH
77246: LD_INT 104
77248: PUSH
77249: LD_INT 105
77251: PUSH
77252: LD_INT 106
77254: PUSH
77255: LD_INT 107
77257: PUSH
77258: LD_INT 108
77260: PUSH
77261: LD_INT 109
77263: PUSH
77264: LD_INT 110
77266: PUSH
77267: LD_INT 111
77269: PUSH
77270: LD_INT 112
77272: PUSH
77273: LD_INT 113
77275: PUSH
77276: LD_INT 114
77278: PUSH
77279: LD_INT 115
77281: PUSH
77282: LD_INT 116
77284: PUSH
77285: LD_INT 117
77287: PUSH
77288: LD_INT 118
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: ST_TO_ADDR
// if result then
77315: LD_VAR 0 2
77319: IFFALSE 78105
// begin normal :=  ;
77321: LD_ADDR_VAR 0 5
77325: PUSH
77326: LD_STRING 
77328: ST_TO_ADDR
// hardcore :=  ;
77329: LD_ADDR_VAR 0 6
77333: PUSH
77334: LD_STRING 
77336: ST_TO_ADDR
// active :=  ;
77337: LD_ADDR_VAR 0 7
77341: PUSH
77342: LD_STRING 
77344: ST_TO_ADDR
// for i = 1 to normalCounter do
77345: LD_ADDR_VAR 0 8
77349: PUSH
77350: DOUBLE
77351: LD_INT 1
77353: DEC
77354: ST_TO_ADDR
77355: LD_EXP 76
77359: PUSH
77360: FOR_TO
77361: IFFALSE 77462
// begin tmp := 0 ;
77363: LD_ADDR_VAR 0 3
77367: PUSH
77368: LD_STRING 0
77370: ST_TO_ADDR
// if result [ 1 ] then
77371: LD_VAR 0 2
77375: PUSH
77376: LD_INT 1
77378: ARRAY
77379: IFFALSE 77444
// if result [ 1 ] [ 1 ] = i then
77381: LD_VAR 0 2
77385: PUSH
77386: LD_INT 1
77388: ARRAY
77389: PUSH
77390: LD_INT 1
77392: ARRAY
77393: PUSH
77394: LD_VAR 0 8
77398: EQUAL
77399: IFFALSE 77444
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
77401: LD_ADDR_VAR 0 2
77405: PUSH
77406: LD_VAR 0 2
77410: PPUSH
77411: LD_INT 1
77413: PPUSH
77414: LD_VAR 0 2
77418: PUSH
77419: LD_INT 1
77421: ARRAY
77422: PPUSH
77423: LD_INT 1
77425: PPUSH
77426: CALL_OW 3
77430: PPUSH
77431: CALL_OW 1
77435: ST_TO_ADDR
// tmp := 1 ;
77436: LD_ADDR_VAR 0 3
77440: PUSH
77441: LD_STRING 1
77443: ST_TO_ADDR
// end ; normal := normal & tmp ;
77444: LD_ADDR_VAR 0 5
77448: PUSH
77449: LD_VAR 0 5
77453: PUSH
77454: LD_VAR 0 3
77458: STR
77459: ST_TO_ADDR
// end ;
77460: GO 77360
77462: POP
77463: POP
// for i = 1 to hardcoreCounter do
77464: LD_ADDR_VAR 0 8
77468: PUSH
77469: DOUBLE
77470: LD_INT 1
77472: DEC
77473: ST_TO_ADDR
77474: LD_EXP 77
77478: PUSH
77479: FOR_TO
77480: IFFALSE 77585
// begin tmp := 0 ;
77482: LD_ADDR_VAR 0 3
77486: PUSH
77487: LD_STRING 0
77489: ST_TO_ADDR
// if result [ 2 ] then
77490: LD_VAR 0 2
77494: PUSH
77495: LD_INT 2
77497: ARRAY
77498: IFFALSE 77567
// if result [ 2 ] [ 1 ] = 100 + i then
77500: LD_VAR 0 2
77504: PUSH
77505: LD_INT 2
77507: ARRAY
77508: PUSH
77509: LD_INT 1
77511: ARRAY
77512: PUSH
77513: LD_INT 100
77515: PUSH
77516: LD_VAR 0 8
77520: PLUS
77521: EQUAL
77522: IFFALSE 77567
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
77524: LD_ADDR_VAR 0 2
77528: PUSH
77529: LD_VAR 0 2
77533: PPUSH
77534: LD_INT 2
77536: PPUSH
77537: LD_VAR 0 2
77541: PUSH
77542: LD_INT 2
77544: ARRAY
77545: PPUSH
77546: LD_INT 1
77548: PPUSH
77549: CALL_OW 3
77553: PPUSH
77554: CALL_OW 1
77558: ST_TO_ADDR
// tmp := 1 ;
77559: LD_ADDR_VAR 0 3
77563: PUSH
77564: LD_STRING 1
77566: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77567: LD_ADDR_VAR 0 6
77571: PUSH
77572: LD_VAR 0 6
77576: PUSH
77577: LD_VAR 0 3
77581: STR
77582: ST_TO_ADDR
// end ;
77583: GO 77479
77585: POP
77586: POP
// if isGameLoad then
77587: LD_VAR 0 1
77591: IFFALSE 78066
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77593: LD_ADDR_VAR 0 4
77597: PUSH
77598: LD_EXP 80
77602: PUSH
77603: LD_EXP 79
77607: PUSH
77608: LD_EXP 81
77612: PUSH
77613: LD_EXP 78
77617: PUSH
77618: LD_EXP 82
77622: PUSH
77623: LD_EXP 83
77627: PUSH
77628: LD_EXP 84
77632: PUSH
77633: LD_EXP 85
77637: PUSH
77638: LD_EXP 86
77642: PUSH
77643: LD_EXP 87
77647: PUSH
77648: LD_EXP 88
77652: PUSH
77653: LD_EXP 89
77657: PUSH
77658: LD_EXP 90
77662: PUSH
77663: LD_EXP 91
77667: PUSH
77668: LD_EXP 99
77672: PUSH
77673: LD_EXP 100
77677: PUSH
77678: LD_EXP 101
77682: PUSH
77683: LD_EXP 102
77687: PUSH
77688: LD_EXP 104
77692: PUSH
77693: LD_EXP 105
77697: PUSH
77698: LD_EXP 106
77702: PUSH
77703: LD_EXP 109
77707: PUSH
77708: LD_EXP 111
77712: PUSH
77713: LD_EXP 112
77717: PUSH
77718: LD_EXP 113
77722: PUSH
77723: LD_EXP 115
77727: PUSH
77728: LD_EXP 116
77732: PUSH
77733: LD_EXP 119
77737: PUSH
77738: LD_EXP 120
77742: PUSH
77743: LD_EXP 121
77747: PUSH
77748: LD_EXP 122
77752: PUSH
77753: LD_EXP 123
77757: PUSH
77758: LD_EXP 124
77762: PUSH
77763: LD_EXP 125
77767: PUSH
77768: LD_EXP 126
77772: PUSH
77773: LD_EXP 127
77777: PUSH
77778: LD_EXP 92
77782: PUSH
77783: LD_EXP 93
77787: PUSH
77788: LD_EXP 96
77792: PUSH
77793: LD_EXP 97
77797: PUSH
77798: LD_EXP 98
77802: PUSH
77803: LD_EXP 94
77807: PUSH
77808: LD_EXP 95
77812: PUSH
77813: LD_EXP 103
77817: PUSH
77818: LD_EXP 107
77822: PUSH
77823: LD_EXP 108
77827: PUSH
77828: LD_EXP 110
77832: PUSH
77833: LD_EXP 114
77837: PUSH
77838: LD_EXP 117
77842: PUSH
77843: LD_EXP 118
77847: PUSH
77848: LD_EXP 128
77852: PUSH
77853: LD_EXP 129
77857: PUSH
77858: LD_EXP 130
77862: PUSH
77863: LD_EXP 131
77867: PUSH
77868: EMPTY
77869: LIST
77870: LIST
77871: LIST
77872: LIST
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: LIST
77878: LIST
77879: LIST
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: LIST
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: LIST
77892: LIST
77893: LIST
77894: LIST
77895: LIST
77896: LIST
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: LIST
77902: LIST
77903: LIST
77904: LIST
77905: LIST
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: LIST
77911: LIST
77912: LIST
77913: LIST
77914: LIST
77915: LIST
77916: LIST
77917: LIST
77918: LIST
77919: LIST
77920: LIST
77921: LIST
77922: LIST
77923: ST_TO_ADDR
// tmp :=  ;
77924: LD_ADDR_VAR 0 3
77928: PUSH
77929: LD_STRING 
77931: ST_TO_ADDR
// for i = 1 to normalCounter do
77932: LD_ADDR_VAR 0 8
77936: PUSH
77937: DOUBLE
77938: LD_INT 1
77940: DEC
77941: ST_TO_ADDR
77942: LD_EXP 76
77946: PUSH
77947: FOR_TO
77948: IFFALSE 77984
// begin if flags [ i ] then
77950: LD_VAR 0 4
77954: PUSH
77955: LD_VAR 0 8
77959: ARRAY
77960: IFFALSE 77982
// tmp := tmp & i & ; ;
77962: LD_ADDR_VAR 0 3
77966: PUSH
77967: LD_VAR 0 3
77971: PUSH
77972: LD_VAR 0 8
77976: STR
77977: PUSH
77978: LD_STRING ;
77980: STR
77981: ST_TO_ADDR
// end ;
77982: GO 77947
77984: POP
77985: POP
// for i = 1 to hardcoreCounter do
77986: LD_ADDR_VAR 0 8
77990: PUSH
77991: DOUBLE
77992: LD_INT 1
77994: DEC
77995: ST_TO_ADDR
77996: LD_EXP 77
78000: PUSH
78001: FOR_TO
78002: IFFALSE 78048
// begin if flags [ normalCounter + i ] then
78004: LD_VAR 0 4
78008: PUSH
78009: LD_EXP 76
78013: PUSH
78014: LD_VAR 0 8
78018: PLUS
78019: ARRAY
78020: IFFALSE 78046
// tmp := tmp & ( 100 + i ) & ; ;
78022: LD_ADDR_VAR 0 3
78026: PUSH
78027: LD_VAR 0 3
78031: PUSH
78032: LD_INT 100
78034: PUSH
78035: LD_VAR 0 8
78039: PLUS
78040: STR
78041: PUSH
78042: LD_STRING ;
78044: STR
78045: ST_TO_ADDR
// end ;
78046: GO 78001
78048: POP
78049: POP
// if tmp then
78050: LD_VAR 0 3
78054: IFFALSE 78066
// active := tmp ;
78056: LD_ADDR_VAR 0 7
78060: PUSH
78061: LD_VAR 0 3
78065: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
78066: LD_STRING getStreamItemsFromMission("
78068: PUSH
78069: LD_VAR 0 5
78073: STR
78074: PUSH
78075: LD_STRING ","
78077: STR
78078: PUSH
78079: LD_VAR 0 6
78083: STR
78084: PUSH
78085: LD_STRING ","
78087: STR
78088: PUSH
78089: LD_VAR 0 7
78093: STR
78094: PUSH
78095: LD_STRING ")
78097: STR
78098: PPUSH
78099: CALL_OW 559
// end else
78103: GO 78112
// ToLua ( getStreamItemsFromMission("","","") ) ;
78105: LD_STRING getStreamItemsFromMission("","","")
78107: PPUSH
78108: CALL_OW 559
// end ;
78112: LD_VAR 0 2
78116: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
78117: LD_EXP 75
78121: PUSH
78122: LD_EXP 80
78126: AND
78127: IFFALSE 78251
78129: GO 78131
78131: DISABLE
78132: LD_INT 0
78134: PPUSH
78135: PPUSH
// begin enable ;
78136: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
78137: LD_ADDR_VAR 0 2
78141: PUSH
78142: LD_INT 22
78144: PUSH
78145: LD_OWVAR 2
78149: PUSH
78150: EMPTY
78151: LIST
78152: LIST
78153: PUSH
78154: LD_INT 2
78156: PUSH
78157: LD_INT 34
78159: PUSH
78160: LD_INT 7
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: PUSH
78167: LD_INT 34
78169: PUSH
78170: LD_INT 45
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: PUSH
78177: LD_INT 34
78179: PUSH
78180: LD_INT 28
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: PUSH
78187: LD_INT 34
78189: PUSH
78190: LD_INT 47
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PPUSH
78208: CALL_OW 69
78212: ST_TO_ADDR
// if not tmp then
78213: LD_VAR 0 2
78217: NOT
78218: IFFALSE 78222
// exit ;
78220: GO 78251
// for i in tmp do
78222: LD_ADDR_VAR 0 1
78226: PUSH
78227: LD_VAR 0 2
78231: PUSH
78232: FOR_IN
78233: IFFALSE 78249
// begin SetLives ( i , 0 ) ;
78235: LD_VAR 0 1
78239: PPUSH
78240: LD_INT 0
78242: PPUSH
78243: CALL_OW 234
// end ;
78247: GO 78232
78249: POP
78250: POP
// end ;
78251: PPOPN 2
78253: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
78254: LD_EXP 75
78258: PUSH
78259: LD_EXP 81
78263: AND
78264: IFFALSE 78348
78266: GO 78268
78268: DISABLE
78269: LD_INT 0
78271: PPUSH
78272: PPUSH
// begin enable ;
78273: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
78274: LD_ADDR_VAR 0 2
78278: PUSH
78279: LD_INT 22
78281: PUSH
78282: LD_OWVAR 2
78286: PUSH
78287: EMPTY
78288: LIST
78289: LIST
78290: PUSH
78291: LD_INT 32
78293: PUSH
78294: LD_INT 3
78296: PUSH
78297: EMPTY
78298: LIST
78299: LIST
78300: PUSH
78301: EMPTY
78302: LIST
78303: LIST
78304: PPUSH
78305: CALL_OW 69
78309: ST_TO_ADDR
// if not tmp then
78310: LD_VAR 0 2
78314: NOT
78315: IFFALSE 78319
// exit ;
78317: GO 78348
// for i in tmp do
78319: LD_ADDR_VAR 0 1
78323: PUSH
78324: LD_VAR 0 2
78328: PUSH
78329: FOR_IN
78330: IFFALSE 78346
// begin SetLives ( i , 0 ) ;
78332: LD_VAR 0 1
78336: PPUSH
78337: LD_INT 0
78339: PPUSH
78340: CALL_OW 234
// end ;
78344: GO 78329
78346: POP
78347: POP
// end ;
78348: PPOPN 2
78350: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
78351: LD_EXP 75
78355: PUSH
78356: LD_EXP 78
78360: AND
78361: IFFALSE 78454
78363: GO 78365
78365: DISABLE
78366: LD_INT 0
78368: PPUSH
// begin enable ;
78369: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
78370: LD_ADDR_VAR 0 1
78374: PUSH
78375: LD_INT 22
78377: PUSH
78378: LD_OWVAR 2
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: LD_INT 2
78389: PUSH
78390: LD_INT 25
78392: PUSH
78393: LD_INT 5
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: PUSH
78400: LD_INT 25
78402: PUSH
78403: LD_INT 9
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PUSH
78410: LD_INT 25
78412: PUSH
78413: LD_INT 8
78415: PUSH
78416: EMPTY
78417: LIST
78418: LIST
78419: PUSH
78420: EMPTY
78421: LIST
78422: LIST
78423: LIST
78424: LIST
78425: PUSH
78426: EMPTY
78427: LIST
78428: LIST
78429: PPUSH
78430: CALL_OW 69
78434: PUSH
78435: FOR_IN
78436: IFFALSE 78452
// begin SetClass ( i , 1 ) ;
78438: LD_VAR 0 1
78442: PPUSH
78443: LD_INT 1
78445: PPUSH
78446: CALL_OW 336
// end ;
78450: GO 78435
78452: POP
78453: POP
// end ;
78454: PPOPN 1
78456: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
78457: LD_EXP 75
78461: PUSH
78462: LD_EXP 79
78466: AND
78467: PUSH
78468: LD_OWVAR 65
78472: PUSH
78473: LD_INT 7
78475: LESS
78476: AND
78477: IFFALSE 78491
78479: GO 78481
78481: DISABLE
// begin enable ;
78482: ENABLE
// game_speed := 7 ;
78483: LD_ADDR_OWVAR 65
78487: PUSH
78488: LD_INT 7
78490: ST_TO_ADDR
// end ;
78491: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
78492: LD_EXP 75
78496: PUSH
78497: LD_EXP 82
78501: AND
78502: IFFALSE 78704
78504: GO 78506
78506: DISABLE
78507: LD_INT 0
78509: PPUSH
78510: PPUSH
78511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78512: LD_ADDR_VAR 0 3
78516: PUSH
78517: LD_INT 81
78519: PUSH
78520: LD_OWVAR 2
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: LD_INT 21
78531: PUSH
78532: LD_INT 1
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: PUSH
78539: EMPTY
78540: LIST
78541: LIST
78542: PPUSH
78543: CALL_OW 69
78547: ST_TO_ADDR
// if not tmp then
78548: LD_VAR 0 3
78552: NOT
78553: IFFALSE 78557
// exit ;
78555: GO 78704
// if tmp > 5 then
78557: LD_VAR 0 3
78561: PUSH
78562: LD_INT 5
78564: GREATER
78565: IFFALSE 78577
// k := 5 else
78567: LD_ADDR_VAR 0 2
78571: PUSH
78572: LD_INT 5
78574: ST_TO_ADDR
78575: GO 78587
// k := tmp ;
78577: LD_ADDR_VAR 0 2
78581: PUSH
78582: LD_VAR 0 3
78586: ST_TO_ADDR
// for i := 1 to k do
78587: LD_ADDR_VAR 0 1
78591: PUSH
78592: DOUBLE
78593: LD_INT 1
78595: DEC
78596: ST_TO_ADDR
78597: LD_VAR 0 2
78601: PUSH
78602: FOR_TO
78603: IFFALSE 78702
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78605: LD_VAR 0 3
78609: PUSH
78610: LD_VAR 0 1
78614: ARRAY
78615: PPUSH
78616: LD_VAR 0 1
78620: PUSH
78621: LD_INT 4
78623: MOD
78624: PUSH
78625: LD_INT 1
78627: PLUS
78628: PPUSH
78629: CALL_OW 259
78633: PUSH
78634: LD_INT 10
78636: LESS
78637: IFFALSE 78700
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78639: LD_VAR 0 3
78643: PUSH
78644: LD_VAR 0 1
78648: ARRAY
78649: PPUSH
78650: LD_VAR 0 1
78654: PUSH
78655: LD_INT 4
78657: MOD
78658: PUSH
78659: LD_INT 1
78661: PLUS
78662: PPUSH
78663: LD_VAR 0 3
78667: PUSH
78668: LD_VAR 0 1
78672: ARRAY
78673: PPUSH
78674: LD_VAR 0 1
78678: PUSH
78679: LD_INT 4
78681: MOD
78682: PUSH
78683: LD_INT 1
78685: PLUS
78686: PPUSH
78687: CALL_OW 259
78691: PUSH
78692: LD_INT 1
78694: PLUS
78695: PPUSH
78696: CALL_OW 237
78700: GO 78602
78702: POP
78703: POP
// end ;
78704: PPOPN 3
78706: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78707: LD_EXP 75
78711: PUSH
78712: LD_EXP 83
78716: AND
78717: IFFALSE 78737
78719: GO 78721
78721: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78722: LD_INT 4
78724: PPUSH
78725: LD_OWVAR 2
78729: PPUSH
78730: LD_INT 0
78732: PPUSH
78733: CALL_OW 324
78737: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78738: LD_EXP 75
78742: PUSH
78743: LD_EXP 112
78747: AND
78748: IFFALSE 78768
78750: GO 78752
78752: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78753: LD_INT 19
78755: PPUSH
78756: LD_OWVAR 2
78760: PPUSH
78761: LD_INT 0
78763: PPUSH
78764: CALL_OW 324
78768: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
78769: LD_EXP 75
78773: PUSH
78774: LD_EXP 84
78778: AND
78779: IFFALSE 78881
78781: GO 78783
78783: DISABLE
78784: LD_INT 0
78786: PPUSH
78787: PPUSH
// begin enable ;
78788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
78789: LD_ADDR_VAR 0 2
78793: PUSH
78794: LD_INT 22
78796: PUSH
78797: LD_OWVAR 2
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 2
78808: PUSH
78809: LD_INT 34
78811: PUSH
78812: LD_INT 11
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 34
78821: PUSH
78822: LD_INT 30
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: EMPTY
78830: LIST
78831: LIST
78832: LIST
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PPUSH
78838: CALL_OW 69
78842: ST_TO_ADDR
// if not tmp then
78843: LD_VAR 0 2
78847: NOT
78848: IFFALSE 78852
// exit ;
78850: GO 78881
// for i in tmp do
78852: LD_ADDR_VAR 0 1
78856: PUSH
78857: LD_VAR 0 2
78861: PUSH
78862: FOR_IN
78863: IFFALSE 78879
// begin SetLives ( i , 0 ) ;
78865: LD_VAR 0 1
78869: PPUSH
78870: LD_INT 0
78872: PPUSH
78873: CALL_OW 234
// end ;
78877: GO 78862
78879: POP
78880: POP
// end ;
78881: PPOPN 2
78883: END
// every 0 0$1 trigger StreamModeActive and sBunker do
78884: LD_EXP 75
78888: PUSH
78889: LD_EXP 85
78893: AND
78894: IFFALSE 78914
78896: GO 78898
78898: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
78899: LD_INT 32
78901: PPUSH
78902: LD_OWVAR 2
78906: PPUSH
78907: LD_INT 0
78909: PPUSH
78910: CALL_OW 324
78914: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
78915: LD_EXP 75
78919: PUSH
78920: LD_EXP 86
78924: AND
78925: IFFALSE 79106
78927: GO 78929
78929: DISABLE
78930: LD_INT 0
78932: PPUSH
78933: PPUSH
78934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
78935: LD_ADDR_VAR 0 2
78939: PUSH
78940: LD_INT 22
78942: PUSH
78943: LD_OWVAR 2
78947: PUSH
78948: EMPTY
78949: LIST
78950: LIST
78951: PUSH
78952: LD_INT 33
78954: PUSH
78955: LD_INT 3
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: PPUSH
78966: CALL_OW 69
78970: ST_TO_ADDR
// if not tmp then
78971: LD_VAR 0 2
78975: NOT
78976: IFFALSE 78980
// exit ;
78978: GO 79106
// side := 0 ;
78980: LD_ADDR_VAR 0 3
78984: PUSH
78985: LD_INT 0
78987: ST_TO_ADDR
// for i := 1 to 8 do
78988: LD_ADDR_VAR 0 1
78992: PUSH
78993: DOUBLE
78994: LD_INT 1
78996: DEC
78997: ST_TO_ADDR
78998: LD_INT 8
79000: PUSH
79001: FOR_TO
79002: IFFALSE 79050
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
79004: LD_OWVAR 2
79008: PUSH
79009: LD_VAR 0 1
79013: NONEQUAL
79014: PUSH
79015: LD_OWVAR 2
79019: PPUSH
79020: LD_VAR 0 1
79024: PPUSH
79025: CALL_OW 81
79029: PUSH
79030: LD_INT 2
79032: EQUAL
79033: AND
79034: IFFALSE 79048
// begin side := i ;
79036: LD_ADDR_VAR 0 3
79040: PUSH
79041: LD_VAR 0 1
79045: ST_TO_ADDR
// break ;
79046: GO 79050
// end ;
79048: GO 79001
79050: POP
79051: POP
// if not side then
79052: LD_VAR 0 3
79056: NOT
79057: IFFALSE 79061
// exit ;
79059: GO 79106
// for i := 1 to tmp do
79061: LD_ADDR_VAR 0 1
79065: PUSH
79066: DOUBLE
79067: LD_INT 1
79069: DEC
79070: ST_TO_ADDR
79071: LD_VAR 0 2
79075: PUSH
79076: FOR_TO
79077: IFFALSE 79104
// if Prob ( 60 ) then
79079: LD_INT 60
79081: PPUSH
79082: CALL_OW 13
79086: IFFALSE 79102
// SetSide ( i , side ) ;
79088: LD_VAR 0 1
79092: PPUSH
79093: LD_VAR 0 3
79097: PPUSH
79098: CALL_OW 235
79102: GO 79076
79104: POP
79105: POP
// end ;
79106: PPOPN 3
79108: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
79109: LD_EXP 75
79113: PUSH
79114: LD_EXP 88
79118: AND
79119: IFFALSE 79238
79121: GO 79123
79123: DISABLE
79124: LD_INT 0
79126: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
79127: LD_ADDR_VAR 0 1
79131: PUSH
79132: LD_INT 22
79134: PUSH
79135: LD_OWVAR 2
79139: PUSH
79140: EMPTY
79141: LIST
79142: LIST
79143: PUSH
79144: LD_INT 21
79146: PUSH
79147: LD_INT 1
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: PUSH
79154: LD_INT 3
79156: PUSH
79157: LD_INT 23
79159: PUSH
79160: LD_INT 0
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: LIST
79175: PPUSH
79176: CALL_OW 69
79180: PUSH
79181: FOR_IN
79182: IFFALSE 79236
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
79184: LD_VAR 0 1
79188: PPUSH
79189: CALL_OW 257
79193: PUSH
79194: LD_INT 1
79196: PUSH
79197: LD_INT 2
79199: PUSH
79200: LD_INT 3
79202: PUSH
79203: LD_INT 4
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: LIST
79210: LIST
79211: IN
79212: IFFALSE 79234
// SetClass ( un , rand ( 1 , 4 ) ) ;
79214: LD_VAR 0 1
79218: PPUSH
79219: LD_INT 1
79221: PPUSH
79222: LD_INT 4
79224: PPUSH
79225: CALL_OW 12
79229: PPUSH
79230: CALL_OW 336
79234: GO 79181
79236: POP
79237: POP
// end ;
79238: PPOPN 1
79240: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
79241: LD_EXP 75
79245: PUSH
79246: LD_EXP 87
79250: AND
79251: IFFALSE 79330
79253: GO 79255
79255: DISABLE
79256: LD_INT 0
79258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79259: LD_ADDR_VAR 0 1
79263: PUSH
79264: LD_INT 22
79266: PUSH
79267: LD_OWVAR 2
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PUSH
79276: LD_INT 21
79278: PUSH
79279: LD_INT 3
79281: PUSH
79282: EMPTY
79283: LIST
79284: LIST
79285: PUSH
79286: EMPTY
79287: LIST
79288: LIST
79289: PPUSH
79290: CALL_OW 69
79294: ST_TO_ADDR
// if not tmp then
79295: LD_VAR 0 1
79299: NOT
79300: IFFALSE 79304
// exit ;
79302: GO 79330
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
79304: LD_VAR 0 1
79308: PUSH
79309: LD_INT 1
79311: PPUSH
79312: LD_VAR 0 1
79316: PPUSH
79317: CALL_OW 12
79321: ARRAY
79322: PPUSH
79323: LD_INT 100
79325: PPUSH
79326: CALL_OW 234
// end ;
79330: PPOPN 1
79332: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
79333: LD_EXP 75
79337: PUSH
79338: LD_EXP 89
79342: AND
79343: IFFALSE 79441
79345: GO 79347
79347: DISABLE
79348: LD_INT 0
79350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79351: LD_ADDR_VAR 0 1
79355: PUSH
79356: LD_INT 22
79358: PUSH
79359: LD_OWVAR 2
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: PUSH
79368: LD_INT 21
79370: PUSH
79371: LD_INT 1
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: PPUSH
79382: CALL_OW 69
79386: ST_TO_ADDR
// if not tmp then
79387: LD_VAR 0 1
79391: NOT
79392: IFFALSE 79396
// exit ;
79394: GO 79441
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
79396: LD_VAR 0 1
79400: PUSH
79401: LD_INT 1
79403: PPUSH
79404: LD_VAR 0 1
79408: PPUSH
79409: CALL_OW 12
79413: ARRAY
79414: PPUSH
79415: LD_INT 1
79417: PPUSH
79418: LD_INT 4
79420: PPUSH
79421: CALL_OW 12
79425: PPUSH
79426: LD_INT 3000
79428: PPUSH
79429: LD_INT 9000
79431: PPUSH
79432: CALL_OW 12
79436: PPUSH
79437: CALL_OW 492
// end ;
79441: PPOPN 1
79443: END
// every 0 0$1 trigger StreamModeActive and sDepot do
79444: LD_EXP 75
79448: PUSH
79449: LD_EXP 90
79453: AND
79454: IFFALSE 79474
79456: GO 79458
79458: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
79459: LD_INT 1
79461: PPUSH
79462: LD_OWVAR 2
79466: PPUSH
79467: LD_INT 0
79469: PPUSH
79470: CALL_OW 324
79474: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
79475: LD_EXP 75
79479: PUSH
79480: LD_EXP 91
79484: AND
79485: IFFALSE 79568
79487: GO 79489
79489: DISABLE
79490: LD_INT 0
79492: PPUSH
79493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79494: LD_ADDR_VAR 0 2
79498: PUSH
79499: LD_INT 22
79501: PUSH
79502: LD_OWVAR 2
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: PUSH
79511: LD_INT 21
79513: PUSH
79514: LD_INT 3
79516: PUSH
79517: EMPTY
79518: LIST
79519: LIST
79520: PUSH
79521: EMPTY
79522: LIST
79523: LIST
79524: PPUSH
79525: CALL_OW 69
79529: ST_TO_ADDR
// if not tmp then
79530: LD_VAR 0 2
79534: NOT
79535: IFFALSE 79539
// exit ;
79537: GO 79568
// for i in tmp do
79539: LD_ADDR_VAR 0 1
79543: PUSH
79544: LD_VAR 0 2
79548: PUSH
79549: FOR_IN
79550: IFFALSE 79566
// SetBLevel ( i , 10 ) ;
79552: LD_VAR 0 1
79556: PPUSH
79557: LD_INT 10
79559: PPUSH
79560: CALL_OW 241
79564: GO 79549
79566: POP
79567: POP
// end ;
79568: PPOPN 2
79570: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79571: LD_EXP 75
79575: PUSH
79576: LD_EXP 92
79580: AND
79581: IFFALSE 79692
79583: GO 79585
79585: DISABLE
79586: LD_INT 0
79588: PPUSH
79589: PPUSH
79590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79591: LD_ADDR_VAR 0 3
79595: PUSH
79596: LD_INT 22
79598: PUSH
79599: LD_OWVAR 2
79603: PUSH
79604: EMPTY
79605: LIST
79606: LIST
79607: PUSH
79608: LD_INT 25
79610: PUSH
79611: LD_INT 1
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: PPUSH
79622: CALL_OW 69
79626: ST_TO_ADDR
// if not tmp then
79627: LD_VAR 0 3
79631: NOT
79632: IFFALSE 79636
// exit ;
79634: GO 79692
// un := tmp [ rand ( 1 , tmp ) ] ;
79636: LD_ADDR_VAR 0 2
79640: PUSH
79641: LD_VAR 0 3
79645: PUSH
79646: LD_INT 1
79648: PPUSH
79649: LD_VAR 0 3
79653: PPUSH
79654: CALL_OW 12
79658: ARRAY
79659: ST_TO_ADDR
// if Crawls ( un ) then
79660: LD_VAR 0 2
79664: PPUSH
79665: CALL_OW 318
79669: IFFALSE 79680
// ComWalk ( un ) ;
79671: LD_VAR 0 2
79675: PPUSH
79676: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79680: LD_VAR 0 2
79684: PPUSH
79685: LD_INT 5
79687: PPUSH
79688: CALL_OW 336
// end ;
79692: PPOPN 3
79694: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79695: LD_EXP 75
79699: PUSH
79700: LD_EXP 93
79704: AND
79705: PUSH
79706: LD_OWVAR 67
79710: PUSH
79711: LD_INT 4
79713: LESS
79714: AND
79715: IFFALSE 79734
79717: GO 79719
79719: DISABLE
// begin Difficulty := Difficulty + 1 ;
79720: LD_ADDR_OWVAR 67
79724: PUSH
79725: LD_OWVAR 67
79729: PUSH
79730: LD_INT 1
79732: PLUS
79733: ST_TO_ADDR
// end ;
79734: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79735: LD_EXP 75
79739: PUSH
79740: LD_EXP 94
79744: AND
79745: IFFALSE 79848
79747: GO 79749
79749: DISABLE
79750: LD_INT 0
79752: PPUSH
// begin for i := 1 to 5 do
79753: LD_ADDR_VAR 0 1
79757: PUSH
79758: DOUBLE
79759: LD_INT 1
79761: DEC
79762: ST_TO_ADDR
79763: LD_INT 5
79765: PUSH
79766: FOR_TO
79767: IFFALSE 79846
// begin uc_nation := nation_nature ;
79769: LD_ADDR_OWVAR 21
79773: PUSH
79774: LD_INT 0
79776: ST_TO_ADDR
// uc_side := 0 ;
79777: LD_ADDR_OWVAR 20
79781: PUSH
79782: LD_INT 0
79784: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79785: LD_ADDR_OWVAR 29
79789: PUSH
79790: LD_INT 12
79792: PUSH
79793: LD_INT 12
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: ST_TO_ADDR
// hc_agressivity := 20 ;
79800: LD_ADDR_OWVAR 35
79804: PUSH
79805: LD_INT 20
79807: ST_TO_ADDR
// hc_class := class_tiger ;
79808: LD_ADDR_OWVAR 28
79812: PUSH
79813: LD_INT 14
79815: ST_TO_ADDR
// hc_gallery :=  ;
79816: LD_ADDR_OWVAR 33
79820: PUSH
79821: LD_STRING 
79823: ST_TO_ADDR
// hc_name :=  ;
79824: LD_ADDR_OWVAR 26
79828: PUSH
79829: LD_STRING 
79831: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
79832: CALL_OW 44
79836: PPUSH
79837: LD_INT 0
79839: PPUSH
79840: CALL_OW 51
// end ;
79844: GO 79766
79846: POP
79847: POP
// end ;
79848: PPOPN 1
79850: END
// every 0 0$1 trigger StreamModeActive and sBomb do
79851: LD_EXP 75
79855: PUSH
79856: LD_EXP 95
79860: AND
79861: IFFALSE 79870
79863: GO 79865
79865: DISABLE
// StreamSibBomb ;
79866: CALL 79871 0 0
79870: END
// export function StreamSibBomb ; var i , x , y ; begin
79871: LD_INT 0
79873: PPUSH
79874: PPUSH
79875: PPUSH
79876: PPUSH
// result := false ;
79877: LD_ADDR_VAR 0 1
79881: PUSH
79882: LD_INT 0
79884: ST_TO_ADDR
// for i := 1 to 16 do
79885: LD_ADDR_VAR 0 2
79889: PUSH
79890: DOUBLE
79891: LD_INT 1
79893: DEC
79894: ST_TO_ADDR
79895: LD_INT 16
79897: PUSH
79898: FOR_TO
79899: IFFALSE 80098
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79901: LD_ADDR_VAR 0 3
79905: PUSH
79906: LD_INT 10
79908: PUSH
79909: LD_INT 20
79911: PUSH
79912: LD_INT 30
79914: PUSH
79915: LD_INT 40
79917: PUSH
79918: LD_INT 50
79920: PUSH
79921: LD_INT 60
79923: PUSH
79924: LD_INT 70
79926: PUSH
79927: LD_INT 80
79929: PUSH
79930: LD_INT 90
79932: PUSH
79933: LD_INT 100
79935: PUSH
79936: LD_INT 110
79938: PUSH
79939: LD_INT 120
79941: PUSH
79942: LD_INT 130
79944: PUSH
79945: LD_INT 140
79947: PUSH
79948: LD_INT 150
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: LIST
79960: LIST
79961: LIST
79962: LIST
79963: LIST
79964: LIST
79965: LIST
79966: LIST
79967: PUSH
79968: LD_INT 1
79970: PPUSH
79971: LD_INT 15
79973: PPUSH
79974: CALL_OW 12
79978: ARRAY
79979: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79980: LD_ADDR_VAR 0 4
79984: PUSH
79985: LD_INT 10
79987: PUSH
79988: LD_INT 20
79990: PUSH
79991: LD_INT 30
79993: PUSH
79994: LD_INT 40
79996: PUSH
79997: LD_INT 50
79999: PUSH
80000: LD_INT 60
80002: PUSH
80003: LD_INT 70
80005: PUSH
80006: LD_INT 80
80008: PUSH
80009: LD_INT 90
80011: PUSH
80012: LD_INT 100
80014: PUSH
80015: LD_INT 110
80017: PUSH
80018: LD_INT 120
80020: PUSH
80021: LD_INT 130
80023: PUSH
80024: LD_INT 140
80026: PUSH
80027: LD_INT 150
80029: PUSH
80030: EMPTY
80031: LIST
80032: LIST
80033: LIST
80034: LIST
80035: LIST
80036: LIST
80037: LIST
80038: LIST
80039: LIST
80040: LIST
80041: LIST
80042: LIST
80043: LIST
80044: LIST
80045: LIST
80046: PUSH
80047: LD_INT 1
80049: PPUSH
80050: LD_INT 15
80052: PPUSH
80053: CALL_OW 12
80057: ARRAY
80058: ST_TO_ADDR
// if ValidHex ( x , y ) then
80059: LD_VAR 0 3
80063: PPUSH
80064: LD_VAR 0 4
80068: PPUSH
80069: CALL_OW 488
80073: IFFALSE 80096
// begin result := [ x , y ] ;
80075: LD_ADDR_VAR 0 1
80079: PUSH
80080: LD_VAR 0 3
80084: PUSH
80085: LD_VAR 0 4
80089: PUSH
80090: EMPTY
80091: LIST
80092: LIST
80093: ST_TO_ADDR
// break ;
80094: GO 80098
// end ; end ;
80096: GO 79898
80098: POP
80099: POP
// if result then
80100: LD_VAR 0 1
80104: IFFALSE 80164
// begin ToLua ( playSibBomb() ) ;
80106: LD_STRING playSibBomb()
80108: PPUSH
80109: CALL_OW 559
// wait ( 0 0$14 ) ;
80113: LD_INT 490
80115: PPUSH
80116: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
80120: LD_VAR 0 1
80124: PUSH
80125: LD_INT 1
80127: ARRAY
80128: PPUSH
80129: LD_VAR 0 1
80133: PUSH
80134: LD_INT 2
80136: ARRAY
80137: PPUSH
80138: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
80142: LD_VAR 0 1
80146: PUSH
80147: LD_INT 1
80149: ARRAY
80150: PPUSH
80151: LD_VAR 0 1
80155: PUSH
80156: LD_INT 2
80158: ARRAY
80159: PPUSH
80160: CALL_OW 429
// end ; end ;
80164: LD_VAR 0 1
80168: RET
// every 0 0$1 trigger StreamModeActive and sReset do
80169: LD_EXP 75
80173: PUSH
80174: LD_EXP 97
80178: AND
80179: IFFALSE 80191
80181: GO 80183
80183: DISABLE
// YouLost (  ) ;
80184: LD_STRING 
80186: PPUSH
80187: CALL_OW 104
80191: END
// every 0 0$1 trigger StreamModeActive and sFog do
80192: LD_EXP 75
80196: PUSH
80197: LD_EXP 96
80201: AND
80202: IFFALSE 80216
80204: GO 80206
80206: DISABLE
// FogOff ( your_side ) ;
80207: LD_OWVAR 2
80211: PPUSH
80212: CALL_OW 344
80216: END
// every 0 0$1 trigger StreamModeActive and sSun do
80217: LD_EXP 75
80221: PUSH
80222: LD_EXP 98
80226: AND
80227: IFFALSE 80255
80229: GO 80231
80231: DISABLE
// begin solar_recharge_percent := 0 ;
80232: LD_ADDR_OWVAR 79
80236: PUSH
80237: LD_INT 0
80239: ST_TO_ADDR
// wait ( 5 5$00 ) ;
80240: LD_INT 10500
80242: PPUSH
80243: CALL_OW 67
// solar_recharge_percent := 100 ;
80247: LD_ADDR_OWVAR 79
80251: PUSH
80252: LD_INT 100
80254: ST_TO_ADDR
// end ;
80255: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
80256: LD_EXP 75
80260: PUSH
80261: LD_EXP 99
80265: AND
80266: IFFALSE 80505
80268: GO 80270
80270: DISABLE
80271: LD_INT 0
80273: PPUSH
80274: PPUSH
80275: PPUSH
// begin tmp := [ ] ;
80276: LD_ADDR_VAR 0 3
80280: PUSH
80281: EMPTY
80282: ST_TO_ADDR
// for i := 1 to 6 do
80283: LD_ADDR_VAR 0 1
80287: PUSH
80288: DOUBLE
80289: LD_INT 1
80291: DEC
80292: ST_TO_ADDR
80293: LD_INT 6
80295: PUSH
80296: FOR_TO
80297: IFFALSE 80402
// begin uc_nation := nation_nature ;
80299: LD_ADDR_OWVAR 21
80303: PUSH
80304: LD_INT 0
80306: ST_TO_ADDR
// uc_side := 0 ;
80307: LD_ADDR_OWVAR 20
80311: PUSH
80312: LD_INT 0
80314: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80315: LD_ADDR_OWVAR 29
80319: PUSH
80320: LD_INT 12
80322: PUSH
80323: LD_INT 12
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: ST_TO_ADDR
// hc_agressivity := 20 ;
80330: LD_ADDR_OWVAR 35
80334: PUSH
80335: LD_INT 20
80337: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
80338: LD_ADDR_OWVAR 28
80342: PUSH
80343: LD_INT 17
80345: ST_TO_ADDR
// hc_gallery :=  ;
80346: LD_ADDR_OWVAR 33
80350: PUSH
80351: LD_STRING 
80353: ST_TO_ADDR
// hc_name :=  ;
80354: LD_ADDR_OWVAR 26
80358: PUSH
80359: LD_STRING 
80361: ST_TO_ADDR
// un := CreateHuman ;
80362: LD_ADDR_VAR 0 2
80366: PUSH
80367: CALL_OW 44
80371: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
80372: LD_VAR 0 2
80376: PPUSH
80377: LD_INT 1
80379: PPUSH
80380: CALL_OW 51
// tmp := tmp ^ un ;
80384: LD_ADDR_VAR 0 3
80388: PUSH
80389: LD_VAR 0 3
80393: PUSH
80394: LD_VAR 0 2
80398: ADD
80399: ST_TO_ADDR
// end ;
80400: GO 80296
80402: POP
80403: POP
// repeat wait ( 0 0$1 ) ;
80404: LD_INT 35
80406: PPUSH
80407: CALL_OW 67
// for un in tmp do
80411: LD_ADDR_VAR 0 2
80415: PUSH
80416: LD_VAR 0 3
80420: PUSH
80421: FOR_IN
80422: IFFALSE 80496
// begin if IsDead ( un ) then
80424: LD_VAR 0 2
80428: PPUSH
80429: CALL_OW 301
80433: IFFALSE 80453
// begin tmp := tmp diff un ;
80435: LD_ADDR_VAR 0 3
80439: PUSH
80440: LD_VAR 0 3
80444: PUSH
80445: LD_VAR 0 2
80449: DIFF
80450: ST_TO_ADDR
// continue ;
80451: GO 80421
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
80453: LD_VAR 0 2
80457: PPUSH
80458: LD_INT 3
80460: PUSH
80461: LD_INT 22
80463: PUSH
80464: LD_INT 0
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: EMPTY
80472: LIST
80473: LIST
80474: PPUSH
80475: CALL_OW 69
80479: PPUSH
80480: LD_VAR 0 2
80484: PPUSH
80485: CALL_OW 74
80489: PPUSH
80490: CALL_OW 115
// end ;
80494: GO 80421
80496: POP
80497: POP
// until not tmp ;
80498: LD_VAR 0 3
80502: NOT
80503: IFFALSE 80404
// end ;
80505: PPOPN 3
80507: END
// every 0 0$1 trigger StreamModeActive and sTroll do
80508: LD_EXP 75
80512: PUSH
80513: LD_EXP 100
80517: AND
80518: IFFALSE 80572
80520: GO 80522
80522: DISABLE
// begin ToLua ( displayTroll(); ) ;
80523: LD_STRING displayTroll();
80525: PPUSH
80526: CALL_OW 559
// wait ( 3 3$00 ) ;
80530: LD_INT 6300
80532: PPUSH
80533: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80537: LD_STRING hideTroll();
80539: PPUSH
80540: CALL_OW 559
// wait ( 1 1$00 ) ;
80544: LD_INT 2100
80546: PPUSH
80547: CALL_OW 67
// ToLua ( displayTroll(); ) ;
80551: LD_STRING displayTroll();
80553: PPUSH
80554: CALL_OW 559
// wait ( 1 1$00 ) ;
80558: LD_INT 2100
80560: PPUSH
80561: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80565: LD_STRING hideTroll();
80567: PPUSH
80568: CALL_OW 559
// end ;
80572: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80573: LD_EXP 75
80577: PUSH
80578: LD_EXP 101
80582: AND
80583: IFFALSE 80646
80585: GO 80587
80587: DISABLE
80588: LD_INT 0
80590: PPUSH
// begin p := 0 ;
80591: LD_ADDR_VAR 0 1
80595: PUSH
80596: LD_INT 0
80598: ST_TO_ADDR
// repeat game_speed := 1 ;
80599: LD_ADDR_OWVAR 65
80603: PUSH
80604: LD_INT 1
80606: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80607: LD_INT 35
80609: PPUSH
80610: CALL_OW 67
// p := p + 1 ;
80614: LD_ADDR_VAR 0 1
80618: PUSH
80619: LD_VAR 0 1
80623: PUSH
80624: LD_INT 1
80626: PLUS
80627: ST_TO_ADDR
// until p >= 60 ;
80628: LD_VAR 0 1
80632: PUSH
80633: LD_INT 60
80635: GREATEREQUAL
80636: IFFALSE 80599
// game_speed := 4 ;
80638: LD_ADDR_OWVAR 65
80642: PUSH
80643: LD_INT 4
80645: ST_TO_ADDR
// end ;
80646: PPOPN 1
80648: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80649: LD_EXP 75
80653: PUSH
80654: LD_EXP 102
80658: AND
80659: IFFALSE 80805
80661: GO 80663
80663: DISABLE
80664: LD_INT 0
80666: PPUSH
80667: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80668: LD_ADDR_VAR 0 1
80672: PUSH
80673: LD_INT 22
80675: PUSH
80676: LD_OWVAR 2
80680: PUSH
80681: EMPTY
80682: LIST
80683: LIST
80684: PUSH
80685: LD_INT 2
80687: PUSH
80688: LD_INT 30
80690: PUSH
80691: LD_INT 0
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: PUSH
80698: LD_INT 30
80700: PUSH
80701: LD_INT 1
80703: PUSH
80704: EMPTY
80705: LIST
80706: LIST
80707: PUSH
80708: EMPTY
80709: LIST
80710: LIST
80711: LIST
80712: PUSH
80713: EMPTY
80714: LIST
80715: LIST
80716: PPUSH
80717: CALL_OW 69
80721: ST_TO_ADDR
// if not depot then
80722: LD_VAR 0 1
80726: NOT
80727: IFFALSE 80731
// exit ;
80729: GO 80805
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80731: LD_ADDR_VAR 0 2
80735: PUSH
80736: LD_VAR 0 1
80740: PUSH
80741: LD_INT 1
80743: PPUSH
80744: LD_VAR 0 1
80748: PPUSH
80749: CALL_OW 12
80753: ARRAY
80754: PPUSH
80755: CALL_OW 274
80759: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
80760: LD_VAR 0 2
80764: PPUSH
80765: LD_INT 1
80767: PPUSH
80768: LD_INT 0
80770: PPUSH
80771: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
80775: LD_VAR 0 2
80779: PPUSH
80780: LD_INT 2
80782: PPUSH
80783: LD_INT 0
80785: PPUSH
80786: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
80790: LD_VAR 0 2
80794: PPUSH
80795: LD_INT 3
80797: PPUSH
80798: LD_INT 0
80800: PPUSH
80801: CALL_OW 277
// end ;
80805: PPOPN 2
80807: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
80808: LD_EXP 75
80812: PUSH
80813: LD_EXP 103
80817: AND
80818: IFFALSE 80915
80820: GO 80822
80822: DISABLE
80823: LD_INT 0
80825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80826: LD_ADDR_VAR 0 1
80830: PUSH
80831: LD_INT 22
80833: PUSH
80834: LD_OWVAR 2
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: PUSH
80843: LD_INT 21
80845: PUSH
80846: LD_INT 1
80848: PUSH
80849: EMPTY
80850: LIST
80851: LIST
80852: PUSH
80853: LD_INT 3
80855: PUSH
80856: LD_INT 23
80858: PUSH
80859: LD_INT 0
80861: PUSH
80862: EMPTY
80863: LIST
80864: LIST
80865: PUSH
80866: EMPTY
80867: LIST
80868: LIST
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: LIST
80874: PPUSH
80875: CALL_OW 69
80879: ST_TO_ADDR
// if not tmp then
80880: LD_VAR 0 1
80884: NOT
80885: IFFALSE 80889
// exit ;
80887: GO 80915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
80889: LD_VAR 0 1
80893: PUSH
80894: LD_INT 1
80896: PPUSH
80897: LD_VAR 0 1
80901: PPUSH
80902: CALL_OW 12
80906: ARRAY
80907: PPUSH
80908: LD_INT 200
80910: PPUSH
80911: CALL_OW 234
// end ;
80915: PPOPN 1
80917: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
80918: LD_EXP 75
80922: PUSH
80923: LD_EXP 104
80927: AND
80928: IFFALSE 81007
80930: GO 80932
80932: DISABLE
80933: LD_INT 0
80935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
80936: LD_ADDR_VAR 0 1
80940: PUSH
80941: LD_INT 22
80943: PUSH
80944: LD_OWVAR 2
80948: PUSH
80949: EMPTY
80950: LIST
80951: LIST
80952: PUSH
80953: LD_INT 21
80955: PUSH
80956: LD_INT 2
80958: PUSH
80959: EMPTY
80960: LIST
80961: LIST
80962: PUSH
80963: EMPTY
80964: LIST
80965: LIST
80966: PPUSH
80967: CALL_OW 69
80971: ST_TO_ADDR
// if not tmp then
80972: LD_VAR 0 1
80976: NOT
80977: IFFALSE 80981
// exit ;
80979: GO 81007
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
80981: LD_VAR 0 1
80985: PUSH
80986: LD_INT 1
80988: PPUSH
80989: LD_VAR 0 1
80993: PPUSH
80994: CALL_OW 12
80998: ARRAY
80999: PPUSH
81000: LD_INT 60
81002: PPUSH
81003: CALL_OW 234
// end ;
81007: PPOPN 1
81009: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
81010: LD_EXP 75
81014: PUSH
81015: LD_EXP 105
81019: AND
81020: IFFALSE 81119
81022: GO 81024
81024: DISABLE
81025: LD_INT 0
81027: PPUSH
81028: PPUSH
// begin enable ;
81029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
81030: LD_ADDR_VAR 0 1
81034: PUSH
81035: LD_INT 22
81037: PUSH
81038: LD_OWVAR 2
81042: PUSH
81043: EMPTY
81044: LIST
81045: LIST
81046: PUSH
81047: LD_INT 61
81049: PUSH
81050: EMPTY
81051: LIST
81052: PUSH
81053: LD_INT 33
81055: PUSH
81056: LD_INT 2
81058: PUSH
81059: EMPTY
81060: LIST
81061: LIST
81062: PUSH
81063: EMPTY
81064: LIST
81065: LIST
81066: LIST
81067: PPUSH
81068: CALL_OW 69
81072: ST_TO_ADDR
// if not tmp then
81073: LD_VAR 0 1
81077: NOT
81078: IFFALSE 81082
// exit ;
81080: GO 81119
// for i in tmp do
81082: LD_ADDR_VAR 0 2
81086: PUSH
81087: LD_VAR 0 1
81091: PUSH
81092: FOR_IN
81093: IFFALSE 81117
// if IsControledBy ( i ) then
81095: LD_VAR 0 2
81099: PPUSH
81100: CALL_OW 312
81104: IFFALSE 81115
// ComUnlink ( i ) ;
81106: LD_VAR 0 2
81110: PPUSH
81111: CALL_OW 136
81115: GO 81092
81117: POP
81118: POP
// end ;
81119: PPOPN 2
81121: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
81122: LD_EXP 75
81126: PUSH
81127: LD_EXP 106
81131: AND
81132: IFFALSE 81272
81134: GO 81136
81136: DISABLE
81137: LD_INT 0
81139: PPUSH
81140: PPUSH
// begin ToLua ( displayPowell(); ) ;
81141: LD_STRING displayPowell();
81143: PPUSH
81144: CALL_OW 559
// uc_side := 0 ;
81148: LD_ADDR_OWVAR 20
81152: PUSH
81153: LD_INT 0
81155: ST_TO_ADDR
// uc_nation := 2 ;
81156: LD_ADDR_OWVAR 21
81160: PUSH
81161: LD_INT 2
81163: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
81164: LD_ADDR_OWVAR 37
81168: PUSH
81169: LD_INT 14
81171: ST_TO_ADDR
// vc_engine := engine_siberite ;
81172: LD_ADDR_OWVAR 39
81176: PUSH
81177: LD_INT 3
81179: ST_TO_ADDR
// vc_control := control_apeman ;
81180: LD_ADDR_OWVAR 38
81184: PUSH
81185: LD_INT 5
81187: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
81188: LD_ADDR_OWVAR 40
81192: PUSH
81193: LD_INT 29
81195: ST_TO_ADDR
// un := CreateVehicle ;
81196: LD_ADDR_VAR 0 2
81200: PUSH
81201: CALL_OW 45
81205: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81206: LD_VAR 0 2
81210: PPUSH
81211: LD_INT 1
81213: PPUSH
81214: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81218: LD_INT 35
81220: PPUSH
81221: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81225: LD_VAR 0 2
81229: PPUSH
81230: LD_INT 22
81232: PUSH
81233: LD_OWVAR 2
81237: PUSH
81238: EMPTY
81239: LIST
81240: LIST
81241: PPUSH
81242: CALL_OW 69
81246: PPUSH
81247: LD_VAR 0 2
81251: PPUSH
81252: CALL_OW 74
81256: PPUSH
81257: CALL_OW 115
// until IsDead ( un ) ;
81261: LD_VAR 0 2
81265: PPUSH
81266: CALL_OW 301
81270: IFFALSE 81218
// end ;
81272: PPOPN 2
81274: END
// every 0 0$1 trigger StreamModeActive and sStu do
81275: LD_EXP 75
81279: PUSH
81280: LD_EXP 114
81284: AND
81285: IFFALSE 81301
81287: GO 81289
81289: DISABLE
// begin ToLua ( displayStucuk(); ) ;
81290: LD_STRING displayStucuk();
81292: PPUSH
81293: CALL_OW 559
// ResetFog ;
81297: CALL_OW 335
// end ;
81301: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
81302: LD_EXP 75
81306: PUSH
81307: LD_EXP 107
81311: AND
81312: IFFALSE 81453
81314: GO 81316
81316: DISABLE
81317: LD_INT 0
81319: PPUSH
81320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81321: LD_ADDR_VAR 0 2
81325: PUSH
81326: LD_INT 22
81328: PUSH
81329: LD_OWVAR 2
81333: PUSH
81334: EMPTY
81335: LIST
81336: LIST
81337: PUSH
81338: LD_INT 21
81340: PUSH
81341: LD_INT 1
81343: PUSH
81344: EMPTY
81345: LIST
81346: LIST
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: PPUSH
81352: CALL_OW 69
81356: ST_TO_ADDR
// if not tmp then
81357: LD_VAR 0 2
81361: NOT
81362: IFFALSE 81366
// exit ;
81364: GO 81453
// un := tmp [ rand ( 1 , tmp ) ] ;
81366: LD_ADDR_VAR 0 1
81370: PUSH
81371: LD_VAR 0 2
81375: PUSH
81376: LD_INT 1
81378: PPUSH
81379: LD_VAR 0 2
81383: PPUSH
81384: CALL_OW 12
81388: ARRAY
81389: ST_TO_ADDR
// SetSide ( un , 0 ) ;
81390: LD_VAR 0 1
81394: PPUSH
81395: LD_INT 0
81397: PPUSH
81398: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
81402: LD_VAR 0 1
81406: PPUSH
81407: LD_OWVAR 3
81411: PUSH
81412: LD_VAR 0 1
81416: DIFF
81417: PPUSH
81418: LD_VAR 0 1
81422: PPUSH
81423: CALL_OW 74
81427: PPUSH
81428: CALL_OW 115
// wait ( 0 0$20 ) ;
81432: LD_INT 700
81434: PPUSH
81435: CALL_OW 67
// SetSide ( un , your_side ) ;
81439: LD_VAR 0 1
81443: PPUSH
81444: LD_OWVAR 2
81448: PPUSH
81449: CALL_OW 235
// end ;
81453: PPOPN 2
81455: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
81456: LD_EXP 75
81460: PUSH
81461: LD_EXP 108
81465: AND
81466: IFFALSE 81572
81468: GO 81470
81470: DISABLE
81471: LD_INT 0
81473: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81474: LD_ADDR_VAR 0 1
81478: PUSH
81479: LD_INT 22
81481: PUSH
81482: LD_OWVAR 2
81486: PUSH
81487: EMPTY
81488: LIST
81489: LIST
81490: PUSH
81491: LD_INT 2
81493: PUSH
81494: LD_INT 30
81496: PUSH
81497: LD_INT 0
81499: PUSH
81500: EMPTY
81501: LIST
81502: LIST
81503: PUSH
81504: LD_INT 30
81506: PUSH
81507: LD_INT 1
81509: PUSH
81510: EMPTY
81511: LIST
81512: LIST
81513: PUSH
81514: EMPTY
81515: LIST
81516: LIST
81517: LIST
81518: PUSH
81519: EMPTY
81520: LIST
81521: LIST
81522: PPUSH
81523: CALL_OW 69
81527: ST_TO_ADDR
// if not depot then
81528: LD_VAR 0 1
81532: NOT
81533: IFFALSE 81537
// exit ;
81535: GO 81572
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
81537: LD_VAR 0 1
81541: PUSH
81542: LD_INT 1
81544: ARRAY
81545: PPUSH
81546: CALL_OW 250
81550: PPUSH
81551: LD_VAR 0 1
81555: PUSH
81556: LD_INT 1
81558: ARRAY
81559: PPUSH
81560: CALL_OW 251
81564: PPUSH
81565: LD_INT 70
81567: PPUSH
81568: CALL_OW 495
// end ;
81572: PPOPN 1
81574: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81575: LD_EXP 75
81579: PUSH
81580: LD_EXP 109
81584: AND
81585: IFFALSE 81796
81587: GO 81589
81589: DISABLE
81590: LD_INT 0
81592: PPUSH
81593: PPUSH
81594: PPUSH
81595: PPUSH
81596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81597: LD_ADDR_VAR 0 5
81601: PUSH
81602: LD_INT 22
81604: PUSH
81605: LD_OWVAR 2
81609: PUSH
81610: EMPTY
81611: LIST
81612: LIST
81613: PUSH
81614: LD_INT 21
81616: PUSH
81617: LD_INT 1
81619: PUSH
81620: EMPTY
81621: LIST
81622: LIST
81623: PUSH
81624: EMPTY
81625: LIST
81626: LIST
81627: PPUSH
81628: CALL_OW 69
81632: ST_TO_ADDR
// if not tmp then
81633: LD_VAR 0 5
81637: NOT
81638: IFFALSE 81642
// exit ;
81640: GO 81796
// for i in tmp do
81642: LD_ADDR_VAR 0 1
81646: PUSH
81647: LD_VAR 0 5
81651: PUSH
81652: FOR_IN
81653: IFFALSE 81794
// begin d := rand ( 0 , 5 ) ;
81655: LD_ADDR_VAR 0 4
81659: PUSH
81660: LD_INT 0
81662: PPUSH
81663: LD_INT 5
81665: PPUSH
81666: CALL_OW 12
81670: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81671: LD_ADDR_VAR 0 2
81675: PUSH
81676: LD_VAR 0 1
81680: PPUSH
81681: CALL_OW 250
81685: PPUSH
81686: LD_VAR 0 4
81690: PPUSH
81691: LD_INT 3
81693: PPUSH
81694: LD_INT 12
81696: PPUSH
81697: CALL_OW 12
81701: PPUSH
81702: CALL_OW 272
81706: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81707: LD_ADDR_VAR 0 3
81711: PUSH
81712: LD_VAR 0 1
81716: PPUSH
81717: CALL_OW 251
81721: PPUSH
81722: LD_VAR 0 4
81726: PPUSH
81727: LD_INT 3
81729: PPUSH
81730: LD_INT 12
81732: PPUSH
81733: CALL_OW 12
81737: PPUSH
81738: CALL_OW 273
81742: ST_TO_ADDR
// if ValidHex ( x , y ) then
81743: LD_VAR 0 2
81747: PPUSH
81748: LD_VAR 0 3
81752: PPUSH
81753: CALL_OW 488
81757: IFFALSE 81792
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
81759: LD_VAR 0 1
81763: PPUSH
81764: LD_VAR 0 2
81768: PPUSH
81769: LD_VAR 0 3
81773: PPUSH
81774: LD_INT 3
81776: PPUSH
81777: LD_INT 6
81779: PPUSH
81780: CALL_OW 12
81784: PPUSH
81785: LD_INT 1
81787: PPUSH
81788: CALL_OW 483
// end ;
81792: GO 81652
81794: POP
81795: POP
// end ;
81796: PPOPN 5
81798: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
81799: LD_EXP 75
81803: PUSH
81804: LD_EXP 110
81808: AND
81809: IFFALSE 81903
81811: GO 81813
81813: DISABLE
81814: LD_INT 0
81816: PPUSH
81817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
81818: LD_ADDR_VAR 0 2
81822: PUSH
81823: LD_INT 22
81825: PUSH
81826: LD_OWVAR 2
81830: PUSH
81831: EMPTY
81832: LIST
81833: LIST
81834: PUSH
81835: LD_INT 32
81837: PUSH
81838: LD_INT 1
81840: PUSH
81841: EMPTY
81842: LIST
81843: LIST
81844: PUSH
81845: LD_INT 21
81847: PUSH
81848: LD_INT 2
81850: PUSH
81851: EMPTY
81852: LIST
81853: LIST
81854: PUSH
81855: EMPTY
81856: LIST
81857: LIST
81858: LIST
81859: PPUSH
81860: CALL_OW 69
81864: ST_TO_ADDR
// if not tmp then
81865: LD_VAR 0 2
81869: NOT
81870: IFFALSE 81874
// exit ;
81872: GO 81903
// for i in tmp do
81874: LD_ADDR_VAR 0 1
81878: PUSH
81879: LD_VAR 0 2
81883: PUSH
81884: FOR_IN
81885: IFFALSE 81901
// SetFuel ( i , 0 ) ;
81887: LD_VAR 0 1
81891: PPUSH
81892: LD_INT 0
81894: PPUSH
81895: CALL_OW 240
81899: GO 81884
81901: POP
81902: POP
// end ;
81903: PPOPN 2
81905: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
81906: LD_EXP 75
81910: PUSH
81911: LD_EXP 111
81915: AND
81916: IFFALSE 81982
81918: GO 81920
81920: DISABLE
81921: LD_INT 0
81923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81924: LD_ADDR_VAR 0 1
81928: PUSH
81929: LD_INT 22
81931: PUSH
81932: LD_OWVAR 2
81936: PUSH
81937: EMPTY
81938: LIST
81939: LIST
81940: PUSH
81941: LD_INT 30
81943: PUSH
81944: LD_INT 29
81946: PUSH
81947: EMPTY
81948: LIST
81949: LIST
81950: PUSH
81951: EMPTY
81952: LIST
81953: LIST
81954: PPUSH
81955: CALL_OW 69
81959: ST_TO_ADDR
// if not tmp then
81960: LD_VAR 0 1
81964: NOT
81965: IFFALSE 81969
// exit ;
81967: GO 81982
// DestroyUnit ( tmp [ 1 ] ) ;
81969: LD_VAR 0 1
81973: PUSH
81974: LD_INT 1
81976: ARRAY
81977: PPUSH
81978: CALL_OW 65
// end ;
81982: PPOPN 1
81984: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
81985: LD_EXP 75
81989: PUSH
81990: LD_EXP 113
81994: AND
81995: IFFALSE 82124
81997: GO 81999
81999: DISABLE
82000: LD_INT 0
82002: PPUSH
// begin uc_side := 0 ;
82003: LD_ADDR_OWVAR 20
82007: PUSH
82008: LD_INT 0
82010: ST_TO_ADDR
// uc_nation := nation_arabian ;
82011: LD_ADDR_OWVAR 21
82015: PUSH
82016: LD_INT 2
82018: ST_TO_ADDR
// hc_gallery :=  ;
82019: LD_ADDR_OWVAR 33
82023: PUSH
82024: LD_STRING 
82026: ST_TO_ADDR
// hc_name :=  ;
82027: LD_ADDR_OWVAR 26
82031: PUSH
82032: LD_STRING 
82034: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
82035: LD_INT 1
82037: PPUSH
82038: LD_INT 11
82040: PPUSH
82041: LD_INT 10
82043: PPUSH
82044: CALL_OW 380
// un := CreateHuman ;
82048: LD_ADDR_VAR 0 1
82052: PUSH
82053: CALL_OW 44
82057: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82058: LD_VAR 0 1
82062: PPUSH
82063: LD_INT 1
82065: PPUSH
82066: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82070: LD_INT 35
82072: PPUSH
82073: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82077: LD_VAR 0 1
82081: PPUSH
82082: LD_INT 22
82084: PUSH
82085: LD_OWVAR 2
82089: PUSH
82090: EMPTY
82091: LIST
82092: LIST
82093: PPUSH
82094: CALL_OW 69
82098: PPUSH
82099: LD_VAR 0 1
82103: PPUSH
82104: CALL_OW 74
82108: PPUSH
82109: CALL_OW 115
// until IsDead ( un ) ;
82113: LD_VAR 0 1
82117: PPUSH
82118: CALL_OW 301
82122: IFFALSE 82070
// end ;
82124: PPOPN 1
82126: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
82127: LD_EXP 75
82131: PUSH
82132: LD_EXP 115
82136: AND
82137: IFFALSE 82149
82139: GO 82141
82141: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
82142: LD_STRING earthquake(getX(game), 0, 32)
82144: PPUSH
82145: CALL_OW 559
82149: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
82150: LD_EXP 75
82154: PUSH
82155: LD_EXP 116
82159: AND
82160: IFFALSE 82251
82162: GO 82164
82164: DISABLE
82165: LD_INT 0
82167: PPUSH
// begin enable ;
82168: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
82169: LD_ADDR_VAR 0 1
82173: PUSH
82174: LD_INT 22
82176: PUSH
82177: LD_OWVAR 2
82181: PUSH
82182: EMPTY
82183: LIST
82184: LIST
82185: PUSH
82186: LD_INT 21
82188: PUSH
82189: LD_INT 2
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: PUSH
82196: LD_INT 33
82198: PUSH
82199: LD_INT 3
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: PUSH
82206: EMPTY
82207: LIST
82208: LIST
82209: LIST
82210: PPUSH
82211: CALL_OW 69
82215: ST_TO_ADDR
// if not tmp then
82216: LD_VAR 0 1
82220: NOT
82221: IFFALSE 82225
// exit ;
82223: GO 82251
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82225: LD_VAR 0 1
82229: PUSH
82230: LD_INT 1
82232: PPUSH
82233: LD_VAR 0 1
82237: PPUSH
82238: CALL_OW 12
82242: ARRAY
82243: PPUSH
82244: LD_INT 1
82246: PPUSH
82247: CALL_OW 234
// end ;
82251: PPOPN 1
82253: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
82254: LD_EXP 75
82258: PUSH
82259: LD_EXP 117
82263: AND
82264: IFFALSE 82405
82266: GO 82268
82268: DISABLE
82269: LD_INT 0
82271: PPUSH
82272: PPUSH
82273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82274: LD_ADDR_VAR 0 3
82278: PUSH
82279: LD_INT 22
82281: PUSH
82282: LD_OWVAR 2
82286: PUSH
82287: EMPTY
82288: LIST
82289: LIST
82290: PUSH
82291: LD_INT 25
82293: PUSH
82294: LD_INT 1
82296: PUSH
82297: EMPTY
82298: LIST
82299: LIST
82300: PUSH
82301: EMPTY
82302: LIST
82303: LIST
82304: PPUSH
82305: CALL_OW 69
82309: ST_TO_ADDR
// if not tmp then
82310: LD_VAR 0 3
82314: NOT
82315: IFFALSE 82319
// exit ;
82317: GO 82405
// un := tmp [ rand ( 1 , tmp ) ] ;
82319: LD_ADDR_VAR 0 2
82323: PUSH
82324: LD_VAR 0 3
82328: PUSH
82329: LD_INT 1
82331: PPUSH
82332: LD_VAR 0 3
82336: PPUSH
82337: CALL_OW 12
82341: ARRAY
82342: ST_TO_ADDR
// if Crawls ( un ) then
82343: LD_VAR 0 2
82347: PPUSH
82348: CALL_OW 318
82352: IFFALSE 82363
// ComWalk ( un ) ;
82354: LD_VAR 0 2
82358: PPUSH
82359: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
82363: LD_VAR 0 2
82367: PPUSH
82368: LD_INT 9
82370: PPUSH
82371: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
82375: LD_INT 28
82377: PPUSH
82378: LD_OWVAR 2
82382: PPUSH
82383: LD_INT 2
82385: PPUSH
82386: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
82390: LD_INT 29
82392: PPUSH
82393: LD_OWVAR 2
82397: PPUSH
82398: LD_INT 2
82400: PPUSH
82401: CALL_OW 322
// end ;
82405: PPOPN 3
82407: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
82408: LD_EXP 75
82412: PUSH
82413: LD_EXP 118
82417: AND
82418: IFFALSE 82529
82420: GO 82422
82422: DISABLE
82423: LD_INT 0
82425: PPUSH
82426: PPUSH
82427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82428: LD_ADDR_VAR 0 3
82432: PUSH
82433: LD_INT 22
82435: PUSH
82436: LD_OWVAR 2
82440: PUSH
82441: EMPTY
82442: LIST
82443: LIST
82444: PUSH
82445: LD_INT 25
82447: PUSH
82448: LD_INT 1
82450: PUSH
82451: EMPTY
82452: LIST
82453: LIST
82454: PUSH
82455: EMPTY
82456: LIST
82457: LIST
82458: PPUSH
82459: CALL_OW 69
82463: ST_TO_ADDR
// if not tmp then
82464: LD_VAR 0 3
82468: NOT
82469: IFFALSE 82473
// exit ;
82471: GO 82529
// un := tmp [ rand ( 1 , tmp ) ] ;
82473: LD_ADDR_VAR 0 2
82477: PUSH
82478: LD_VAR 0 3
82482: PUSH
82483: LD_INT 1
82485: PPUSH
82486: LD_VAR 0 3
82490: PPUSH
82491: CALL_OW 12
82495: ARRAY
82496: ST_TO_ADDR
// if Crawls ( un ) then
82497: LD_VAR 0 2
82501: PPUSH
82502: CALL_OW 318
82506: IFFALSE 82517
// ComWalk ( un ) ;
82508: LD_VAR 0 2
82512: PPUSH
82513: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82517: LD_VAR 0 2
82521: PPUSH
82522: LD_INT 8
82524: PPUSH
82525: CALL_OW 336
// end ;
82529: PPOPN 3
82531: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
82532: LD_EXP 75
82536: PUSH
82537: LD_EXP 119
82541: AND
82542: IFFALSE 82686
82544: GO 82546
82546: DISABLE
82547: LD_INT 0
82549: PPUSH
82550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
82551: LD_ADDR_VAR 0 2
82555: PUSH
82556: LD_INT 22
82558: PUSH
82559: LD_OWVAR 2
82563: PUSH
82564: EMPTY
82565: LIST
82566: LIST
82567: PUSH
82568: LD_INT 21
82570: PUSH
82571: LD_INT 2
82573: PUSH
82574: EMPTY
82575: LIST
82576: LIST
82577: PUSH
82578: LD_INT 2
82580: PUSH
82581: LD_INT 34
82583: PUSH
82584: LD_INT 12
82586: PUSH
82587: EMPTY
82588: LIST
82589: LIST
82590: PUSH
82591: LD_INT 34
82593: PUSH
82594: LD_INT 51
82596: PUSH
82597: EMPTY
82598: LIST
82599: LIST
82600: PUSH
82601: LD_INT 34
82603: PUSH
82604: LD_INT 32
82606: PUSH
82607: EMPTY
82608: LIST
82609: LIST
82610: PUSH
82611: EMPTY
82612: LIST
82613: LIST
82614: LIST
82615: LIST
82616: PUSH
82617: EMPTY
82618: LIST
82619: LIST
82620: LIST
82621: PPUSH
82622: CALL_OW 69
82626: ST_TO_ADDR
// if not tmp then
82627: LD_VAR 0 2
82631: NOT
82632: IFFALSE 82636
// exit ;
82634: GO 82686
// for i in tmp do
82636: LD_ADDR_VAR 0 1
82640: PUSH
82641: LD_VAR 0 2
82645: PUSH
82646: FOR_IN
82647: IFFALSE 82684
// if GetCargo ( i , mat_artifact ) = 0 then
82649: LD_VAR 0 1
82653: PPUSH
82654: LD_INT 4
82656: PPUSH
82657: CALL_OW 289
82661: PUSH
82662: LD_INT 0
82664: EQUAL
82665: IFFALSE 82682
// SetCargo ( i , mat_siberit , 100 ) ;
82667: LD_VAR 0 1
82671: PPUSH
82672: LD_INT 3
82674: PPUSH
82675: LD_INT 100
82677: PPUSH
82678: CALL_OW 290
82682: GO 82646
82684: POP
82685: POP
// end ;
82686: PPOPN 2
82688: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82689: LD_EXP 75
82693: PUSH
82694: LD_EXP 120
82698: AND
82699: IFFALSE 82882
82701: GO 82703
82703: DISABLE
82704: LD_INT 0
82706: PPUSH
82707: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82708: LD_ADDR_VAR 0 2
82712: PUSH
82713: LD_INT 22
82715: PUSH
82716: LD_OWVAR 2
82720: PUSH
82721: EMPTY
82722: LIST
82723: LIST
82724: PPUSH
82725: CALL_OW 69
82729: ST_TO_ADDR
// if not tmp then
82730: LD_VAR 0 2
82734: NOT
82735: IFFALSE 82739
// exit ;
82737: GO 82882
// for i := 1 to 2 do
82739: LD_ADDR_VAR 0 1
82743: PUSH
82744: DOUBLE
82745: LD_INT 1
82747: DEC
82748: ST_TO_ADDR
82749: LD_INT 2
82751: PUSH
82752: FOR_TO
82753: IFFALSE 82880
// begin uc_side := your_side ;
82755: LD_ADDR_OWVAR 20
82759: PUSH
82760: LD_OWVAR 2
82764: ST_TO_ADDR
// uc_nation := nation_american ;
82765: LD_ADDR_OWVAR 21
82769: PUSH
82770: LD_INT 1
82772: ST_TO_ADDR
// vc_chassis := us_morphling ;
82773: LD_ADDR_OWVAR 37
82777: PUSH
82778: LD_INT 5
82780: ST_TO_ADDR
// vc_engine := engine_siberite ;
82781: LD_ADDR_OWVAR 39
82785: PUSH
82786: LD_INT 3
82788: ST_TO_ADDR
// vc_control := control_computer ;
82789: LD_ADDR_OWVAR 38
82793: PUSH
82794: LD_INT 3
82796: ST_TO_ADDR
// vc_weapon := us_double_laser ;
82797: LD_ADDR_OWVAR 40
82801: PUSH
82802: LD_INT 10
82804: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
82805: LD_VAR 0 2
82809: PUSH
82810: LD_INT 1
82812: ARRAY
82813: PPUSH
82814: CALL_OW 310
82818: NOT
82819: IFFALSE 82866
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
82821: CALL_OW 45
82825: PPUSH
82826: LD_VAR 0 2
82830: PUSH
82831: LD_INT 1
82833: ARRAY
82834: PPUSH
82835: CALL_OW 250
82839: PPUSH
82840: LD_VAR 0 2
82844: PUSH
82845: LD_INT 1
82847: ARRAY
82848: PPUSH
82849: CALL_OW 251
82853: PPUSH
82854: LD_INT 12
82856: PPUSH
82857: LD_INT 1
82859: PPUSH
82860: CALL_OW 50
82864: GO 82878
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
82866: CALL_OW 45
82870: PPUSH
82871: LD_INT 1
82873: PPUSH
82874: CALL_OW 51
// end ;
82878: GO 82752
82880: POP
82881: POP
// end ;
82882: PPOPN 2
82884: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
82885: LD_EXP 75
82889: PUSH
82890: LD_EXP 121
82894: AND
82895: IFFALSE 83117
82897: GO 82899
82899: DISABLE
82900: LD_INT 0
82902: PPUSH
82903: PPUSH
82904: PPUSH
82905: PPUSH
82906: PPUSH
82907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82908: LD_ADDR_VAR 0 6
82912: PUSH
82913: LD_INT 22
82915: PUSH
82916: LD_OWVAR 2
82920: PUSH
82921: EMPTY
82922: LIST
82923: LIST
82924: PUSH
82925: LD_INT 21
82927: PUSH
82928: LD_INT 1
82930: PUSH
82931: EMPTY
82932: LIST
82933: LIST
82934: PUSH
82935: LD_INT 3
82937: PUSH
82938: LD_INT 23
82940: PUSH
82941: LD_INT 0
82943: PUSH
82944: EMPTY
82945: LIST
82946: LIST
82947: PUSH
82948: EMPTY
82949: LIST
82950: LIST
82951: PUSH
82952: EMPTY
82953: LIST
82954: LIST
82955: LIST
82956: PPUSH
82957: CALL_OW 69
82961: ST_TO_ADDR
// if not tmp then
82962: LD_VAR 0 6
82966: NOT
82967: IFFALSE 82971
// exit ;
82969: GO 83117
// s1 := rand ( 1 , 4 ) ;
82971: LD_ADDR_VAR 0 2
82975: PUSH
82976: LD_INT 1
82978: PPUSH
82979: LD_INT 4
82981: PPUSH
82982: CALL_OW 12
82986: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
82987: LD_ADDR_VAR 0 4
82991: PUSH
82992: LD_VAR 0 6
82996: PUSH
82997: LD_INT 1
82999: ARRAY
83000: PPUSH
83001: LD_VAR 0 2
83005: PPUSH
83006: CALL_OW 259
83010: ST_TO_ADDR
// if s1 = 1 then
83011: LD_VAR 0 2
83015: PUSH
83016: LD_INT 1
83018: EQUAL
83019: IFFALSE 83039
// s2 := rand ( 2 , 4 ) else
83021: LD_ADDR_VAR 0 3
83025: PUSH
83026: LD_INT 2
83028: PPUSH
83029: LD_INT 4
83031: PPUSH
83032: CALL_OW 12
83036: ST_TO_ADDR
83037: GO 83047
// s2 := 1 ;
83039: LD_ADDR_VAR 0 3
83043: PUSH
83044: LD_INT 1
83046: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
83047: LD_ADDR_VAR 0 5
83051: PUSH
83052: LD_VAR 0 6
83056: PUSH
83057: LD_INT 1
83059: ARRAY
83060: PPUSH
83061: LD_VAR 0 3
83065: PPUSH
83066: CALL_OW 259
83070: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
83071: LD_VAR 0 6
83075: PUSH
83076: LD_INT 1
83078: ARRAY
83079: PPUSH
83080: LD_VAR 0 2
83084: PPUSH
83085: LD_VAR 0 5
83089: PPUSH
83090: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
83094: LD_VAR 0 6
83098: PUSH
83099: LD_INT 1
83101: ARRAY
83102: PPUSH
83103: LD_VAR 0 3
83107: PPUSH
83108: LD_VAR 0 4
83112: PPUSH
83113: CALL_OW 237
// end ;
83117: PPOPN 6
83119: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
83120: LD_EXP 75
83124: PUSH
83125: LD_EXP 122
83129: AND
83130: IFFALSE 83209
83132: GO 83134
83134: DISABLE
83135: LD_INT 0
83137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
83138: LD_ADDR_VAR 0 1
83142: PUSH
83143: LD_INT 22
83145: PUSH
83146: LD_OWVAR 2
83150: PUSH
83151: EMPTY
83152: LIST
83153: LIST
83154: PUSH
83155: LD_INT 30
83157: PUSH
83158: LD_INT 3
83160: PUSH
83161: EMPTY
83162: LIST
83163: LIST
83164: PUSH
83165: EMPTY
83166: LIST
83167: LIST
83168: PPUSH
83169: CALL_OW 69
83173: ST_TO_ADDR
// if not tmp then
83174: LD_VAR 0 1
83178: NOT
83179: IFFALSE 83183
// exit ;
83181: GO 83209
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83183: LD_VAR 0 1
83187: PUSH
83188: LD_INT 1
83190: PPUSH
83191: LD_VAR 0 1
83195: PPUSH
83196: CALL_OW 12
83200: ARRAY
83201: PPUSH
83202: LD_INT 1
83204: PPUSH
83205: CALL_OW 234
// end ;
83209: PPOPN 1
83211: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
83212: LD_EXP 75
83216: PUSH
83217: LD_EXP 123
83221: AND
83222: IFFALSE 83334
83224: GO 83226
83226: DISABLE
83227: LD_INT 0
83229: PPUSH
83230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
83231: LD_ADDR_VAR 0 2
83235: PUSH
83236: LD_INT 22
83238: PUSH
83239: LD_OWVAR 2
83243: PUSH
83244: EMPTY
83245: LIST
83246: LIST
83247: PUSH
83248: LD_INT 2
83250: PUSH
83251: LD_INT 30
83253: PUSH
83254: LD_INT 27
83256: PUSH
83257: EMPTY
83258: LIST
83259: LIST
83260: PUSH
83261: LD_INT 30
83263: PUSH
83264: LD_INT 26
83266: PUSH
83267: EMPTY
83268: LIST
83269: LIST
83270: PUSH
83271: LD_INT 30
83273: PUSH
83274: LD_INT 28
83276: PUSH
83277: EMPTY
83278: LIST
83279: LIST
83280: PUSH
83281: EMPTY
83282: LIST
83283: LIST
83284: LIST
83285: LIST
83286: PUSH
83287: EMPTY
83288: LIST
83289: LIST
83290: PPUSH
83291: CALL_OW 69
83295: ST_TO_ADDR
// if not tmp then
83296: LD_VAR 0 2
83300: NOT
83301: IFFALSE 83305
// exit ;
83303: GO 83334
// for i in tmp do
83305: LD_ADDR_VAR 0 1
83309: PUSH
83310: LD_VAR 0 2
83314: PUSH
83315: FOR_IN
83316: IFFALSE 83332
// SetLives ( i , 1 ) ;
83318: LD_VAR 0 1
83322: PPUSH
83323: LD_INT 1
83325: PPUSH
83326: CALL_OW 234
83330: GO 83315
83332: POP
83333: POP
// end ;
83334: PPOPN 2
83336: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
83337: LD_EXP 75
83341: PUSH
83342: LD_EXP 124
83346: AND
83347: IFFALSE 83634
83349: GO 83351
83351: DISABLE
83352: LD_INT 0
83354: PPUSH
83355: PPUSH
83356: PPUSH
// begin i := rand ( 1 , 7 ) ;
83357: LD_ADDR_VAR 0 1
83361: PUSH
83362: LD_INT 1
83364: PPUSH
83365: LD_INT 7
83367: PPUSH
83368: CALL_OW 12
83372: ST_TO_ADDR
// case i of 1 :
83373: LD_VAR 0 1
83377: PUSH
83378: LD_INT 1
83380: DOUBLE
83381: EQUAL
83382: IFTRUE 83386
83384: GO 83396
83386: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
83387: LD_STRING earthquake(getX(game), 0, 32)
83389: PPUSH
83390: CALL_OW 559
83394: GO 83634
83396: LD_INT 2
83398: DOUBLE
83399: EQUAL
83400: IFTRUE 83404
83402: GO 83418
83404: POP
// begin ToLua ( displayStucuk(); ) ;
83405: LD_STRING displayStucuk();
83407: PPUSH
83408: CALL_OW 559
// ResetFog ;
83412: CALL_OW 335
// end ; 3 :
83416: GO 83634
83418: LD_INT 3
83420: DOUBLE
83421: EQUAL
83422: IFTRUE 83426
83424: GO 83530
83426: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83427: LD_ADDR_VAR 0 2
83431: PUSH
83432: LD_INT 22
83434: PUSH
83435: LD_OWVAR 2
83439: PUSH
83440: EMPTY
83441: LIST
83442: LIST
83443: PUSH
83444: LD_INT 25
83446: PUSH
83447: LD_INT 1
83449: PUSH
83450: EMPTY
83451: LIST
83452: LIST
83453: PUSH
83454: EMPTY
83455: LIST
83456: LIST
83457: PPUSH
83458: CALL_OW 69
83462: ST_TO_ADDR
// if not tmp then
83463: LD_VAR 0 2
83467: NOT
83468: IFFALSE 83472
// exit ;
83470: GO 83634
// un := tmp [ rand ( 1 , tmp ) ] ;
83472: LD_ADDR_VAR 0 3
83476: PUSH
83477: LD_VAR 0 2
83481: PUSH
83482: LD_INT 1
83484: PPUSH
83485: LD_VAR 0 2
83489: PPUSH
83490: CALL_OW 12
83494: ARRAY
83495: ST_TO_ADDR
// if Crawls ( un ) then
83496: LD_VAR 0 3
83500: PPUSH
83501: CALL_OW 318
83505: IFFALSE 83516
// ComWalk ( un ) ;
83507: LD_VAR 0 3
83511: PPUSH
83512: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83516: LD_VAR 0 3
83520: PPUSH
83521: LD_INT 8
83523: PPUSH
83524: CALL_OW 336
// end ; 4 :
83528: GO 83634
83530: LD_INT 4
83532: DOUBLE
83533: EQUAL
83534: IFTRUE 83538
83536: GO 83612
83538: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83539: LD_ADDR_VAR 0 2
83543: PUSH
83544: LD_INT 22
83546: PUSH
83547: LD_OWVAR 2
83551: PUSH
83552: EMPTY
83553: LIST
83554: LIST
83555: PUSH
83556: LD_INT 30
83558: PUSH
83559: LD_INT 29
83561: PUSH
83562: EMPTY
83563: LIST
83564: LIST
83565: PUSH
83566: EMPTY
83567: LIST
83568: LIST
83569: PPUSH
83570: CALL_OW 69
83574: ST_TO_ADDR
// if not tmp then
83575: LD_VAR 0 2
83579: NOT
83580: IFFALSE 83584
// exit ;
83582: GO 83634
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83584: LD_VAR 0 2
83588: PUSH
83589: LD_INT 1
83591: ARRAY
83592: PPUSH
83593: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83597: LD_VAR 0 2
83601: PUSH
83602: LD_INT 1
83604: ARRAY
83605: PPUSH
83606: CALL_OW 65
// end ; 5 .. 7 :
83610: GO 83634
83612: LD_INT 5
83614: DOUBLE
83615: GREATEREQUAL
83616: IFFALSE 83624
83618: LD_INT 7
83620: DOUBLE
83621: LESSEQUAL
83622: IFTRUE 83626
83624: GO 83633
83626: POP
// StreamSibBomb ; end ;
83627: CALL 79871 0 0
83631: GO 83634
83633: POP
// end ;
83634: PPOPN 3
83636: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83637: LD_EXP 75
83641: PUSH
83642: LD_EXP 125
83646: AND
83647: IFFALSE 83803
83649: GO 83651
83651: DISABLE
83652: LD_INT 0
83654: PPUSH
83655: PPUSH
83656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83657: LD_ADDR_VAR 0 2
83661: PUSH
83662: LD_INT 81
83664: PUSH
83665: LD_OWVAR 2
83669: PUSH
83670: EMPTY
83671: LIST
83672: LIST
83673: PUSH
83674: LD_INT 2
83676: PUSH
83677: LD_INT 21
83679: PUSH
83680: LD_INT 1
83682: PUSH
83683: EMPTY
83684: LIST
83685: LIST
83686: PUSH
83687: LD_INT 21
83689: PUSH
83690: LD_INT 2
83692: PUSH
83693: EMPTY
83694: LIST
83695: LIST
83696: PUSH
83697: EMPTY
83698: LIST
83699: LIST
83700: LIST
83701: PUSH
83702: EMPTY
83703: LIST
83704: LIST
83705: PPUSH
83706: CALL_OW 69
83710: ST_TO_ADDR
// if not tmp then
83711: LD_VAR 0 2
83715: NOT
83716: IFFALSE 83720
// exit ;
83718: GO 83803
// p := 0 ;
83720: LD_ADDR_VAR 0 3
83724: PUSH
83725: LD_INT 0
83727: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83728: LD_INT 35
83730: PPUSH
83731: CALL_OW 67
// p := p + 1 ;
83735: LD_ADDR_VAR 0 3
83739: PUSH
83740: LD_VAR 0 3
83744: PUSH
83745: LD_INT 1
83747: PLUS
83748: ST_TO_ADDR
// for i in tmp do
83749: LD_ADDR_VAR 0 1
83753: PUSH
83754: LD_VAR 0 2
83758: PUSH
83759: FOR_IN
83760: IFFALSE 83791
// if GetLives ( i ) < 1000 then
83762: LD_VAR 0 1
83766: PPUSH
83767: CALL_OW 256
83771: PUSH
83772: LD_INT 1000
83774: LESS
83775: IFFALSE 83789
// SetLives ( i , 1000 ) ;
83777: LD_VAR 0 1
83781: PPUSH
83782: LD_INT 1000
83784: PPUSH
83785: CALL_OW 234
83789: GO 83759
83791: POP
83792: POP
// until p > 20 ;
83793: LD_VAR 0 3
83797: PUSH
83798: LD_INT 20
83800: GREATER
83801: IFFALSE 83728
// end ;
83803: PPOPN 3
83805: END
// every 0 0$1 trigger StreamModeActive and sTime do
83806: LD_EXP 75
83810: PUSH
83811: LD_EXP 126
83815: AND
83816: IFFALSE 83851
83818: GO 83820
83820: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
83821: LD_INT 28
83823: PPUSH
83824: LD_OWVAR 2
83828: PPUSH
83829: LD_INT 2
83831: PPUSH
83832: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
83836: LD_INT 30
83838: PPUSH
83839: LD_OWVAR 2
83843: PPUSH
83844: LD_INT 2
83846: PPUSH
83847: CALL_OW 322
// end ;
83851: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
83852: LD_EXP 75
83856: PUSH
83857: LD_EXP 127
83861: AND
83862: IFFALSE 83983
83864: GO 83866
83866: DISABLE
83867: LD_INT 0
83869: PPUSH
83870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83871: LD_ADDR_VAR 0 2
83875: PUSH
83876: LD_INT 22
83878: PUSH
83879: LD_OWVAR 2
83883: PUSH
83884: EMPTY
83885: LIST
83886: LIST
83887: PUSH
83888: LD_INT 21
83890: PUSH
83891: LD_INT 1
83893: PUSH
83894: EMPTY
83895: LIST
83896: LIST
83897: PUSH
83898: LD_INT 3
83900: PUSH
83901: LD_INT 23
83903: PUSH
83904: LD_INT 0
83906: PUSH
83907: EMPTY
83908: LIST
83909: LIST
83910: PUSH
83911: EMPTY
83912: LIST
83913: LIST
83914: PUSH
83915: EMPTY
83916: LIST
83917: LIST
83918: LIST
83919: PPUSH
83920: CALL_OW 69
83924: ST_TO_ADDR
// if not tmp then
83925: LD_VAR 0 2
83929: NOT
83930: IFFALSE 83934
// exit ;
83932: GO 83983
// for i in tmp do
83934: LD_ADDR_VAR 0 1
83938: PUSH
83939: LD_VAR 0 2
83943: PUSH
83944: FOR_IN
83945: IFFALSE 83981
// begin if Crawls ( i ) then
83947: LD_VAR 0 1
83951: PPUSH
83952: CALL_OW 318
83956: IFFALSE 83967
// ComWalk ( i ) ;
83958: LD_VAR 0 1
83962: PPUSH
83963: CALL_OW 138
// SetClass ( i , 2 ) ;
83967: LD_VAR 0 1
83971: PPUSH
83972: LD_INT 2
83974: PPUSH
83975: CALL_OW 336
// end ;
83979: GO 83944
83981: POP
83982: POP
// end ;
83983: PPOPN 2
83985: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
83986: LD_EXP 75
83990: PUSH
83991: LD_EXP 128
83995: AND
83996: IFFALSE 84284
83998: GO 84000
84000: DISABLE
84001: LD_INT 0
84003: PPUSH
84004: PPUSH
84005: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
84006: LD_OWVAR 2
84010: PPUSH
84011: LD_INT 9
84013: PPUSH
84014: LD_INT 1
84016: PPUSH
84017: LD_INT 1
84019: PPUSH
84020: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
84024: LD_INT 9
84026: PPUSH
84027: LD_OWVAR 2
84031: PPUSH
84032: CALL_OW 343
// uc_side := 9 ;
84036: LD_ADDR_OWVAR 20
84040: PUSH
84041: LD_INT 9
84043: ST_TO_ADDR
// uc_nation := 2 ;
84044: LD_ADDR_OWVAR 21
84048: PUSH
84049: LD_INT 2
84051: ST_TO_ADDR
// hc_name := Dark Warrior ;
84052: LD_ADDR_OWVAR 26
84056: PUSH
84057: LD_STRING Dark Warrior
84059: ST_TO_ADDR
// hc_gallery :=  ;
84060: LD_ADDR_OWVAR 33
84064: PUSH
84065: LD_STRING 
84067: ST_TO_ADDR
// hc_noskilllimit := true ;
84068: LD_ADDR_OWVAR 76
84072: PUSH
84073: LD_INT 1
84075: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
84076: LD_ADDR_OWVAR 31
84080: PUSH
84081: LD_INT 30
84083: PUSH
84084: LD_INT 30
84086: PUSH
84087: LD_INT 30
84089: PUSH
84090: LD_INT 30
84092: PUSH
84093: EMPTY
84094: LIST
84095: LIST
84096: LIST
84097: LIST
84098: ST_TO_ADDR
// un := CreateHuman ;
84099: LD_ADDR_VAR 0 3
84103: PUSH
84104: CALL_OW 44
84108: ST_TO_ADDR
// hc_noskilllimit := false ;
84109: LD_ADDR_OWVAR 76
84113: PUSH
84114: LD_INT 0
84116: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
84117: LD_VAR 0 3
84121: PPUSH
84122: LD_INT 1
84124: PPUSH
84125: CALL_OW 51
// ToLua ( playRanger() ) ;
84129: LD_STRING playRanger()
84131: PPUSH
84132: CALL_OW 559
// p := 0 ;
84136: LD_ADDR_VAR 0 2
84140: PUSH
84141: LD_INT 0
84143: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84144: LD_INT 35
84146: PPUSH
84147: CALL_OW 67
// p := p + 1 ;
84151: LD_ADDR_VAR 0 2
84155: PUSH
84156: LD_VAR 0 2
84160: PUSH
84161: LD_INT 1
84163: PLUS
84164: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
84165: LD_VAR 0 3
84169: PPUSH
84170: CALL_OW 256
84174: PUSH
84175: LD_INT 1000
84177: LESS
84178: IFFALSE 84192
// SetLives ( un , 1000 ) ;
84180: LD_VAR 0 3
84184: PPUSH
84185: LD_INT 1000
84187: PPUSH
84188: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
84192: LD_VAR 0 3
84196: PPUSH
84197: LD_INT 81
84199: PUSH
84200: LD_OWVAR 2
84204: PUSH
84205: EMPTY
84206: LIST
84207: LIST
84208: PUSH
84209: LD_INT 91
84211: PUSH
84212: LD_VAR 0 3
84216: PUSH
84217: LD_INT 30
84219: PUSH
84220: EMPTY
84221: LIST
84222: LIST
84223: LIST
84224: PUSH
84225: EMPTY
84226: LIST
84227: LIST
84228: PPUSH
84229: CALL_OW 69
84233: PPUSH
84234: LD_VAR 0 3
84238: PPUSH
84239: CALL_OW 74
84243: PPUSH
84244: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
84248: LD_VAR 0 2
84252: PUSH
84253: LD_INT 80
84255: GREATER
84256: PUSH
84257: LD_VAR 0 3
84261: PPUSH
84262: CALL_OW 301
84266: OR
84267: IFFALSE 84144
// if un then
84269: LD_VAR 0 3
84273: IFFALSE 84284
// RemoveUnit ( un ) ;
84275: LD_VAR 0 3
84279: PPUSH
84280: CALL_OW 64
// end ;
84284: PPOPN 3
84286: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
84287: LD_EXP 129
84291: IFFALSE 84407
84293: GO 84295
84295: DISABLE
84296: LD_INT 0
84298: PPUSH
84299: PPUSH
84300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84301: LD_ADDR_VAR 0 2
84305: PUSH
84306: LD_INT 81
84308: PUSH
84309: LD_OWVAR 2
84313: PUSH
84314: EMPTY
84315: LIST
84316: LIST
84317: PUSH
84318: LD_INT 21
84320: PUSH
84321: LD_INT 1
84323: PUSH
84324: EMPTY
84325: LIST
84326: LIST
84327: PUSH
84328: EMPTY
84329: LIST
84330: LIST
84331: PPUSH
84332: CALL_OW 69
84336: ST_TO_ADDR
// ToLua ( playComputer() ) ;
84337: LD_STRING playComputer()
84339: PPUSH
84340: CALL_OW 559
// if not tmp then
84344: LD_VAR 0 2
84348: NOT
84349: IFFALSE 84353
// exit ;
84351: GO 84407
// for i in tmp do
84353: LD_ADDR_VAR 0 1
84357: PUSH
84358: LD_VAR 0 2
84362: PUSH
84363: FOR_IN
84364: IFFALSE 84405
// for j := 1 to 4 do
84366: LD_ADDR_VAR 0 3
84370: PUSH
84371: DOUBLE
84372: LD_INT 1
84374: DEC
84375: ST_TO_ADDR
84376: LD_INT 4
84378: PUSH
84379: FOR_TO
84380: IFFALSE 84401
// SetSkill ( i , j , 10 ) ;
84382: LD_VAR 0 1
84386: PPUSH
84387: LD_VAR 0 3
84391: PPUSH
84392: LD_INT 10
84394: PPUSH
84395: CALL_OW 237
84399: GO 84379
84401: POP
84402: POP
84403: GO 84363
84405: POP
84406: POP
// end ;
84407: PPOPN 3
84409: END
// every 0 0$1 trigger s30 do var i , tmp ;
84410: LD_EXP 130
84414: IFFALSE 84483
84416: GO 84418
84418: DISABLE
84419: LD_INT 0
84421: PPUSH
84422: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84423: LD_ADDR_VAR 0 2
84427: PUSH
84428: LD_INT 22
84430: PUSH
84431: LD_OWVAR 2
84435: PUSH
84436: EMPTY
84437: LIST
84438: LIST
84439: PPUSH
84440: CALL_OW 69
84444: ST_TO_ADDR
// if not tmp then
84445: LD_VAR 0 2
84449: NOT
84450: IFFALSE 84454
// exit ;
84452: GO 84483
// for i in tmp do
84454: LD_ADDR_VAR 0 1
84458: PUSH
84459: LD_VAR 0 2
84463: PUSH
84464: FOR_IN
84465: IFFALSE 84481
// SetLives ( i , 300 ) ;
84467: LD_VAR 0 1
84471: PPUSH
84472: LD_INT 300
84474: PPUSH
84475: CALL_OW 234
84479: GO 84464
84481: POP
84482: POP
// end ;
84483: PPOPN 2
84485: END
// every 0 0$1 trigger s60 do var i , tmp ;
84486: LD_EXP 131
84490: IFFALSE 84559
84492: GO 84494
84494: DISABLE
84495: LD_INT 0
84497: PPUSH
84498: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84499: LD_ADDR_VAR 0 2
84503: PUSH
84504: LD_INT 22
84506: PUSH
84507: LD_OWVAR 2
84511: PUSH
84512: EMPTY
84513: LIST
84514: LIST
84515: PPUSH
84516: CALL_OW 69
84520: ST_TO_ADDR
// if not tmp then
84521: LD_VAR 0 2
84525: NOT
84526: IFFALSE 84530
// exit ;
84528: GO 84559
// for i in tmp do
84530: LD_ADDR_VAR 0 1
84534: PUSH
84535: LD_VAR 0 2
84539: PUSH
84540: FOR_IN
84541: IFFALSE 84557
// SetLives ( i , 600 ) ;
84543: LD_VAR 0 1
84547: PPUSH
84548: LD_INT 600
84550: PPUSH
84551: CALL_OW 234
84555: GO 84540
84557: POP
84558: POP
// end ;
84559: PPOPN 2
84561: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84562: LD_INT 0
84564: PPUSH
// case cmd of 301 :
84565: LD_VAR 0 1
84569: PUSH
84570: LD_INT 301
84572: DOUBLE
84573: EQUAL
84574: IFTRUE 84578
84576: GO 84610
84578: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84579: LD_VAR 0 6
84583: PPUSH
84584: LD_VAR 0 7
84588: PPUSH
84589: LD_VAR 0 8
84593: PPUSH
84594: LD_VAR 0 4
84598: PPUSH
84599: LD_VAR 0 5
84603: PPUSH
84604: CALL 85819 0 5
84608: GO 84731
84610: LD_INT 302
84612: DOUBLE
84613: EQUAL
84614: IFTRUE 84618
84616: GO 84655
84618: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84619: LD_VAR 0 6
84623: PPUSH
84624: LD_VAR 0 7
84628: PPUSH
84629: LD_VAR 0 8
84633: PPUSH
84634: LD_VAR 0 9
84638: PPUSH
84639: LD_VAR 0 4
84643: PPUSH
84644: LD_VAR 0 5
84648: PPUSH
84649: CALL 85910 0 6
84653: GO 84731
84655: LD_INT 303
84657: DOUBLE
84658: EQUAL
84659: IFTRUE 84663
84661: GO 84700
84663: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84664: LD_VAR 0 6
84668: PPUSH
84669: LD_VAR 0 7
84673: PPUSH
84674: LD_VAR 0 8
84678: PPUSH
84679: LD_VAR 0 9
84683: PPUSH
84684: LD_VAR 0 4
84688: PPUSH
84689: LD_VAR 0 5
84693: PPUSH
84694: CALL 84736 0 6
84698: GO 84731
84700: LD_INT 304
84702: DOUBLE
84703: EQUAL
84704: IFTRUE 84708
84706: GO 84730
84708: POP
// hHackTeleport ( unit , x , y ) ; end ;
84709: LD_VAR 0 2
84713: PPUSH
84714: LD_VAR 0 4
84718: PPUSH
84719: LD_VAR 0 5
84723: PPUSH
84724: CALL 86503 0 3
84728: GO 84731
84730: POP
// end ;
84731: LD_VAR 0 12
84735: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84736: LD_INT 0
84738: PPUSH
84739: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84740: LD_VAR 0 1
84744: PUSH
84745: LD_INT 1
84747: LESS
84748: PUSH
84749: LD_VAR 0 1
84753: PUSH
84754: LD_INT 3
84756: GREATER
84757: OR
84758: PUSH
84759: LD_VAR 0 5
84763: PPUSH
84764: LD_VAR 0 6
84768: PPUSH
84769: CALL_OW 428
84773: OR
84774: IFFALSE 84778
// exit ;
84776: GO 85506
// uc_side := your_side ;
84778: LD_ADDR_OWVAR 20
84782: PUSH
84783: LD_OWVAR 2
84787: ST_TO_ADDR
// uc_nation := nation ;
84788: LD_ADDR_OWVAR 21
84792: PUSH
84793: LD_VAR 0 1
84797: ST_TO_ADDR
// bc_level = 1 ;
84798: LD_ADDR_OWVAR 43
84802: PUSH
84803: LD_INT 1
84805: ST_TO_ADDR
// case btype of 1 :
84806: LD_VAR 0 2
84810: PUSH
84811: LD_INT 1
84813: DOUBLE
84814: EQUAL
84815: IFTRUE 84819
84817: GO 84830
84819: POP
// bc_type := b_depot ; 2 :
84820: LD_ADDR_OWVAR 42
84824: PUSH
84825: LD_INT 0
84827: ST_TO_ADDR
84828: GO 85450
84830: LD_INT 2
84832: DOUBLE
84833: EQUAL
84834: IFTRUE 84838
84836: GO 84849
84838: POP
// bc_type := b_warehouse ; 3 :
84839: LD_ADDR_OWVAR 42
84843: PUSH
84844: LD_INT 1
84846: ST_TO_ADDR
84847: GO 85450
84849: LD_INT 3
84851: DOUBLE
84852: EQUAL
84853: IFTRUE 84857
84855: GO 84868
84857: POP
// bc_type := b_lab ; 4 .. 9 :
84858: LD_ADDR_OWVAR 42
84862: PUSH
84863: LD_INT 6
84865: ST_TO_ADDR
84866: GO 85450
84868: LD_INT 4
84870: DOUBLE
84871: GREATEREQUAL
84872: IFFALSE 84880
84874: LD_INT 9
84876: DOUBLE
84877: LESSEQUAL
84878: IFTRUE 84882
84880: GO 84942
84882: POP
// begin bc_type := b_lab_half ;
84883: LD_ADDR_OWVAR 42
84887: PUSH
84888: LD_INT 7
84890: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
84891: LD_ADDR_OWVAR 44
84895: PUSH
84896: LD_INT 10
84898: PUSH
84899: LD_INT 11
84901: PUSH
84902: LD_INT 12
84904: PUSH
84905: LD_INT 15
84907: PUSH
84908: LD_INT 14
84910: PUSH
84911: LD_INT 13
84913: PUSH
84914: EMPTY
84915: LIST
84916: LIST
84917: LIST
84918: LIST
84919: LIST
84920: LIST
84921: PUSH
84922: LD_VAR 0 2
84926: PUSH
84927: LD_INT 3
84929: MINUS
84930: ARRAY
84931: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
84932: LD_ADDR_OWVAR 45
84936: PUSH
84937: LD_INT 9
84939: ST_TO_ADDR
// end ; 10 .. 13 :
84940: GO 85450
84942: LD_INT 10
84944: DOUBLE
84945: GREATEREQUAL
84946: IFFALSE 84954
84948: LD_INT 13
84950: DOUBLE
84951: LESSEQUAL
84952: IFTRUE 84956
84954: GO 85033
84956: POP
// begin bc_type := b_lab_full ;
84957: LD_ADDR_OWVAR 42
84961: PUSH
84962: LD_INT 8
84964: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
84965: LD_ADDR_OWVAR 44
84969: PUSH
84970: LD_INT 10
84972: PUSH
84973: LD_INT 12
84975: PUSH
84976: LD_INT 14
84978: PUSH
84979: LD_INT 13
84981: PUSH
84982: EMPTY
84983: LIST
84984: LIST
84985: LIST
84986: LIST
84987: PUSH
84988: LD_VAR 0 2
84992: PUSH
84993: LD_INT 9
84995: MINUS
84996: ARRAY
84997: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
84998: LD_ADDR_OWVAR 45
85002: PUSH
85003: LD_INT 11
85005: PUSH
85006: LD_INT 15
85008: PUSH
85009: LD_INT 12
85011: PUSH
85012: LD_INT 15
85014: PUSH
85015: EMPTY
85016: LIST
85017: LIST
85018: LIST
85019: LIST
85020: PUSH
85021: LD_VAR 0 2
85025: PUSH
85026: LD_INT 9
85028: MINUS
85029: ARRAY
85030: ST_TO_ADDR
// end ; 14 :
85031: GO 85450
85033: LD_INT 14
85035: DOUBLE
85036: EQUAL
85037: IFTRUE 85041
85039: GO 85052
85041: POP
// bc_type := b_workshop ; 15 :
85042: LD_ADDR_OWVAR 42
85046: PUSH
85047: LD_INT 2
85049: ST_TO_ADDR
85050: GO 85450
85052: LD_INT 15
85054: DOUBLE
85055: EQUAL
85056: IFTRUE 85060
85058: GO 85071
85060: POP
// bc_type := b_factory ; 16 :
85061: LD_ADDR_OWVAR 42
85065: PUSH
85066: LD_INT 3
85068: ST_TO_ADDR
85069: GO 85450
85071: LD_INT 16
85073: DOUBLE
85074: EQUAL
85075: IFTRUE 85079
85077: GO 85090
85079: POP
// bc_type := b_ext_gun ; 17 :
85080: LD_ADDR_OWVAR 42
85084: PUSH
85085: LD_INT 17
85087: ST_TO_ADDR
85088: GO 85450
85090: LD_INT 17
85092: DOUBLE
85093: EQUAL
85094: IFTRUE 85098
85096: GO 85126
85098: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
85099: LD_ADDR_OWVAR 42
85103: PUSH
85104: LD_INT 19
85106: PUSH
85107: LD_INT 23
85109: PUSH
85110: LD_INT 19
85112: PUSH
85113: EMPTY
85114: LIST
85115: LIST
85116: LIST
85117: PUSH
85118: LD_VAR 0 1
85122: ARRAY
85123: ST_TO_ADDR
85124: GO 85450
85126: LD_INT 18
85128: DOUBLE
85129: EQUAL
85130: IFTRUE 85134
85132: GO 85145
85134: POP
// bc_type := b_ext_radar ; 19 :
85135: LD_ADDR_OWVAR 42
85139: PUSH
85140: LD_INT 20
85142: ST_TO_ADDR
85143: GO 85450
85145: LD_INT 19
85147: DOUBLE
85148: EQUAL
85149: IFTRUE 85153
85151: GO 85164
85153: POP
// bc_type := b_ext_radio ; 20 :
85154: LD_ADDR_OWVAR 42
85158: PUSH
85159: LD_INT 22
85161: ST_TO_ADDR
85162: GO 85450
85164: LD_INT 20
85166: DOUBLE
85167: EQUAL
85168: IFTRUE 85172
85170: GO 85183
85172: POP
// bc_type := b_ext_siberium ; 21 :
85173: LD_ADDR_OWVAR 42
85177: PUSH
85178: LD_INT 21
85180: ST_TO_ADDR
85181: GO 85450
85183: LD_INT 21
85185: DOUBLE
85186: EQUAL
85187: IFTRUE 85191
85189: GO 85202
85191: POP
// bc_type := b_ext_computer ; 22 :
85192: LD_ADDR_OWVAR 42
85196: PUSH
85197: LD_INT 24
85199: ST_TO_ADDR
85200: GO 85450
85202: LD_INT 22
85204: DOUBLE
85205: EQUAL
85206: IFTRUE 85210
85208: GO 85221
85210: POP
// bc_type := b_ext_track ; 23 :
85211: LD_ADDR_OWVAR 42
85215: PUSH
85216: LD_INT 16
85218: ST_TO_ADDR
85219: GO 85450
85221: LD_INT 23
85223: DOUBLE
85224: EQUAL
85225: IFTRUE 85229
85227: GO 85240
85229: POP
// bc_type := b_ext_laser ; 24 :
85230: LD_ADDR_OWVAR 42
85234: PUSH
85235: LD_INT 25
85237: ST_TO_ADDR
85238: GO 85450
85240: LD_INT 24
85242: DOUBLE
85243: EQUAL
85244: IFTRUE 85248
85246: GO 85259
85248: POP
// bc_type := b_control_tower ; 25 :
85249: LD_ADDR_OWVAR 42
85253: PUSH
85254: LD_INT 36
85256: ST_TO_ADDR
85257: GO 85450
85259: LD_INT 25
85261: DOUBLE
85262: EQUAL
85263: IFTRUE 85267
85265: GO 85278
85267: POP
// bc_type := b_breastwork ; 26 :
85268: LD_ADDR_OWVAR 42
85272: PUSH
85273: LD_INT 31
85275: ST_TO_ADDR
85276: GO 85450
85278: LD_INT 26
85280: DOUBLE
85281: EQUAL
85282: IFTRUE 85286
85284: GO 85297
85286: POP
// bc_type := b_bunker ; 27 :
85287: LD_ADDR_OWVAR 42
85291: PUSH
85292: LD_INT 32
85294: ST_TO_ADDR
85295: GO 85450
85297: LD_INT 27
85299: DOUBLE
85300: EQUAL
85301: IFTRUE 85305
85303: GO 85316
85305: POP
// bc_type := b_turret ; 28 :
85306: LD_ADDR_OWVAR 42
85310: PUSH
85311: LD_INT 33
85313: ST_TO_ADDR
85314: GO 85450
85316: LD_INT 28
85318: DOUBLE
85319: EQUAL
85320: IFTRUE 85324
85322: GO 85335
85324: POP
// bc_type := b_armoury ; 29 :
85325: LD_ADDR_OWVAR 42
85329: PUSH
85330: LD_INT 4
85332: ST_TO_ADDR
85333: GO 85450
85335: LD_INT 29
85337: DOUBLE
85338: EQUAL
85339: IFTRUE 85343
85341: GO 85354
85343: POP
// bc_type := b_barracks ; 30 :
85344: LD_ADDR_OWVAR 42
85348: PUSH
85349: LD_INT 5
85351: ST_TO_ADDR
85352: GO 85450
85354: LD_INT 30
85356: DOUBLE
85357: EQUAL
85358: IFTRUE 85362
85360: GO 85373
85362: POP
// bc_type := b_solar_power ; 31 :
85363: LD_ADDR_OWVAR 42
85367: PUSH
85368: LD_INT 27
85370: ST_TO_ADDR
85371: GO 85450
85373: LD_INT 31
85375: DOUBLE
85376: EQUAL
85377: IFTRUE 85381
85379: GO 85392
85381: POP
// bc_type := b_oil_power ; 32 :
85382: LD_ADDR_OWVAR 42
85386: PUSH
85387: LD_INT 26
85389: ST_TO_ADDR
85390: GO 85450
85392: LD_INT 32
85394: DOUBLE
85395: EQUAL
85396: IFTRUE 85400
85398: GO 85411
85400: POP
// bc_type := b_siberite_power ; 33 :
85401: LD_ADDR_OWVAR 42
85405: PUSH
85406: LD_INT 28
85408: ST_TO_ADDR
85409: GO 85450
85411: LD_INT 33
85413: DOUBLE
85414: EQUAL
85415: IFTRUE 85419
85417: GO 85430
85419: POP
// bc_type := b_oil_mine ; 34 :
85420: LD_ADDR_OWVAR 42
85424: PUSH
85425: LD_INT 29
85427: ST_TO_ADDR
85428: GO 85450
85430: LD_INT 34
85432: DOUBLE
85433: EQUAL
85434: IFTRUE 85438
85436: GO 85449
85438: POP
// bc_type := b_siberite_mine ; end ;
85439: LD_ADDR_OWVAR 42
85443: PUSH
85444: LD_INT 30
85446: ST_TO_ADDR
85447: GO 85450
85449: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
85450: LD_ADDR_VAR 0 8
85454: PUSH
85455: LD_VAR 0 5
85459: PPUSH
85460: LD_VAR 0 6
85464: PPUSH
85465: LD_VAR 0 3
85469: PPUSH
85470: CALL_OW 47
85474: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
85475: LD_OWVAR 42
85479: PUSH
85480: LD_INT 32
85482: PUSH
85483: LD_INT 33
85485: PUSH
85486: EMPTY
85487: LIST
85488: LIST
85489: IN
85490: IFFALSE 85506
// PlaceWeaponTurret ( b , weapon ) ;
85492: LD_VAR 0 8
85496: PPUSH
85497: LD_VAR 0 4
85501: PPUSH
85502: CALL_OW 431
// end ;
85506: LD_VAR 0 7
85510: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
85511: LD_INT 0
85513: PPUSH
85514: PPUSH
85515: PPUSH
85516: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85517: LD_ADDR_VAR 0 4
85521: PUSH
85522: LD_INT 22
85524: PUSH
85525: LD_OWVAR 2
85529: PUSH
85530: EMPTY
85531: LIST
85532: LIST
85533: PUSH
85534: LD_INT 2
85536: PUSH
85537: LD_INT 30
85539: PUSH
85540: LD_INT 0
85542: PUSH
85543: EMPTY
85544: LIST
85545: LIST
85546: PUSH
85547: LD_INT 30
85549: PUSH
85550: LD_INT 1
85552: PUSH
85553: EMPTY
85554: LIST
85555: LIST
85556: PUSH
85557: EMPTY
85558: LIST
85559: LIST
85560: LIST
85561: PUSH
85562: EMPTY
85563: LIST
85564: LIST
85565: PPUSH
85566: CALL_OW 69
85570: ST_TO_ADDR
// if not tmp then
85571: LD_VAR 0 4
85575: NOT
85576: IFFALSE 85580
// exit ;
85578: GO 85639
// for i in tmp do
85580: LD_ADDR_VAR 0 2
85584: PUSH
85585: LD_VAR 0 4
85589: PUSH
85590: FOR_IN
85591: IFFALSE 85637
// for j = 1 to 3 do
85593: LD_ADDR_VAR 0 3
85597: PUSH
85598: DOUBLE
85599: LD_INT 1
85601: DEC
85602: ST_TO_ADDR
85603: LD_INT 3
85605: PUSH
85606: FOR_TO
85607: IFFALSE 85633
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85609: LD_VAR 0 2
85613: PPUSH
85614: CALL_OW 274
85618: PPUSH
85619: LD_VAR 0 3
85623: PPUSH
85624: LD_INT 99999
85626: PPUSH
85627: CALL_OW 277
85631: GO 85606
85633: POP
85634: POP
85635: GO 85590
85637: POP
85638: POP
// end ;
85639: LD_VAR 0 1
85643: RET
// export function hHackSetLevel10 ; var i , j ; begin
85644: LD_INT 0
85646: PPUSH
85647: PPUSH
85648: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85649: LD_ADDR_VAR 0 2
85653: PUSH
85654: LD_INT 21
85656: PUSH
85657: LD_INT 1
85659: PUSH
85660: EMPTY
85661: LIST
85662: LIST
85663: PPUSH
85664: CALL_OW 69
85668: PUSH
85669: FOR_IN
85670: IFFALSE 85722
// if IsSelected ( i ) then
85672: LD_VAR 0 2
85676: PPUSH
85677: CALL_OW 306
85681: IFFALSE 85720
// begin for j := 1 to 4 do
85683: LD_ADDR_VAR 0 3
85687: PUSH
85688: DOUBLE
85689: LD_INT 1
85691: DEC
85692: ST_TO_ADDR
85693: LD_INT 4
85695: PUSH
85696: FOR_TO
85697: IFFALSE 85718
// SetSkill ( i , j , 10 ) ;
85699: LD_VAR 0 2
85703: PPUSH
85704: LD_VAR 0 3
85708: PPUSH
85709: LD_INT 10
85711: PPUSH
85712: CALL_OW 237
85716: GO 85696
85718: POP
85719: POP
// end ;
85720: GO 85669
85722: POP
85723: POP
// end ;
85724: LD_VAR 0 1
85728: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85729: LD_INT 0
85731: PPUSH
85732: PPUSH
85733: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85734: LD_ADDR_VAR 0 2
85738: PUSH
85739: LD_INT 22
85741: PUSH
85742: LD_OWVAR 2
85746: PUSH
85747: EMPTY
85748: LIST
85749: LIST
85750: PUSH
85751: LD_INT 21
85753: PUSH
85754: LD_INT 1
85756: PUSH
85757: EMPTY
85758: LIST
85759: LIST
85760: PUSH
85761: EMPTY
85762: LIST
85763: LIST
85764: PPUSH
85765: CALL_OW 69
85769: PUSH
85770: FOR_IN
85771: IFFALSE 85812
// begin for j := 1 to 4 do
85773: LD_ADDR_VAR 0 3
85777: PUSH
85778: DOUBLE
85779: LD_INT 1
85781: DEC
85782: ST_TO_ADDR
85783: LD_INT 4
85785: PUSH
85786: FOR_TO
85787: IFFALSE 85808
// SetSkill ( i , j , 10 ) ;
85789: LD_VAR 0 2
85793: PPUSH
85794: LD_VAR 0 3
85798: PPUSH
85799: LD_INT 10
85801: PPUSH
85802: CALL_OW 237
85806: GO 85786
85808: POP
85809: POP
// end ;
85810: GO 85770
85812: POP
85813: POP
// end ;
85814: LD_VAR 0 1
85818: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
85819: LD_INT 0
85821: PPUSH
// uc_side := your_side ;
85822: LD_ADDR_OWVAR 20
85826: PUSH
85827: LD_OWVAR 2
85831: ST_TO_ADDR
// uc_nation := nation ;
85832: LD_ADDR_OWVAR 21
85836: PUSH
85837: LD_VAR 0 1
85841: ST_TO_ADDR
// InitHc ;
85842: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
85846: LD_INT 0
85848: PPUSH
85849: LD_VAR 0 2
85853: PPUSH
85854: LD_VAR 0 3
85858: PPUSH
85859: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
85863: LD_VAR 0 4
85867: PPUSH
85868: LD_VAR 0 5
85872: PPUSH
85873: CALL_OW 428
85877: PUSH
85878: LD_INT 0
85880: EQUAL
85881: IFFALSE 85905
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
85883: CALL_OW 44
85887: PPUSH
85888: LD_VAR 0 4
85892: PPUSH
85893: LD_VAR 0 5
85897: PPUSH
85898: LD_INT 1
85900: PPUSH
85901: CALL_OW 48
// end ;
85905: LD_VAR 0 6
85909: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
85910: LD_INT 0
85912: PPUSH
85913: PPUSH
// uc_side := your_side ;
85914: LD_ADDR_OWVAR 20
85918: PUSH
85919: LD_OWVAR 2
85923: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
85924: LD_VAR 0 1
85928: PUSH
85929: LD_INT 1
85931: PUSH
85932: LD_INT 2
85934: PUSH
85935: LD_INT 3
85937: PUSH
85938: LD_INT 4
85940: PUSH
85941: LD_INT 5
85943: PUSH
85944: EMPTY
85945: LIST
85946: LIST
85947: LIST
85948: LIST
85949: LIST
85950: IN
85951: IFFALSE 85963
// uc_nation := nation_american else
85953: LD_ADDR_OWVAR 21
85957: PUSH
85958: LD_INT 1
85960: ST_TO_ADDR
85961: GO 86006
// if chassis in [ 11 , 12 , 13 , 14 ] then
85963: LD_VAR 0 1
85967: PUSH
85968: LD_INT 11
85970: PUSH
85971: LD_INT 12
85973: PUSH
85974: LD_INT 13
85976: PUSH
85977: LD_INT 14
85979: PUSH
85980: EMPTY
85981: LIST
85982: LIST
85983: LIST
85984: LIST
85985: IN
85986: IFFALSE 85998
// uc_nation := nation_arabian else
85988: LD_ADDR_OWVAR 21
85992: PUSH
85993: LD_INT 2
85995: ST_TO_ADDR
85996: GO 86006
// uc_nation := nation_russian ;
85998: LD_ADDR_OWVAR 21
86002: PUSH
86003: LD_INT 3
86005: ST_TO_ADDR
// vc_chassis := chassis ;
86006: LD_ADDR_OWVAR 37
86010: PUSH
86011: LD_VAR 0 1
86015: ST_TO_ADDR
// vc_engine := engine ;
86016: LD_ADDR_OWVAR 39
86020: PUSH
86021: LD_VAR 0 2
86025: ST_TO_ADDR
// vc_control := control ;
86026: LD_ADDR_OWVAR 38
86030: PUSH
86031: LD_VAR 0 3
86035: ST_TO_ADDR
// vc_weapon := weapon ;
86036: LD_ADDR_OWVAR 40
86040: PUSH
86041: LD_VAR 0 4
86045: ST_TO_ADDR
// un := CreateVehicle ;
86046: LD_ADDR_VAR 0 8
86050: PUSH
86051: CALL_OW 45
86055: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
86056: LD_VAR 0 8
86060: PPUSH
86061: LD_INT 0
86063: PPUSH
86064: LD_INT 5
86066: PPUSH
86067: CALL_OW 12
86071: PPUSH
86072: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
86076: LD_VAR 0 8
86080: PPUSH
86081: LD_VAR 0 5
86085: PPUSH
86086: LD_VAR 0 6
86090: PPUSH
86091: LD_INT 1
86093: PPUSH
86094: CALL_OW 48
// end ;
86098: LD_VAR 0 7
86102: RET
// export hInvincible ; every 1 do
86103: GO 86105
86105: DISABLE
// hInvincible := [ ] ;
86106: LD_ADDR_EXP 132
86110: PUSH
86111: EMPTY
86112: ST_TO_ADDR
86113: END
// every 10 do var i ;
86114: GO 86116
86116: DISABLE
86117: LD_INT 0
86119: PPUSH
// begin enable ;
86120: ENABLE
// if not hInvincible then
86121: LD_EXP 132
86125: NOT
86126: IFFALSE 86130
// exit ;
86128: GO 86174
// for i in hInvincible do
86130: LD_ADDR_VAR 0 1
86134: PUSH
86135: LD_EXP 132
86139: PUSH
86140: FOR_IN
86141: IFFALSE 86172
// if GetLives ( i ) < 1000 then
86143: LD_VAR 0 1
86147: PPUSH
86148: CALL_OW 256
86152: PUSH
86153: LD_INT 1000
86155: LESS
86156: IFFALSE 86170
// SetLives ( i , 1000 ) ;
86158: LD_VAR 0 1
86162: PPUSH
86163: LD_INT 1000
86165: PPUSH
86166: CALL_OW 234
86170: GO 86140
86172: POP
86173: POP
// end ;
86174: PPOPN 1
86176: END
// export function hHackInvincible ; var i ; begin
86177: LD_INT 0
86179: PPUSH
86180: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
86181: LD_ADDR_VAR 0 2
86185: PUSH
86186: LD_INT 2
86188: PUSH
86189: LD_INT 21
86191: PUSH
86192: LD_INT 1
86194: PUSH
86195: EMPTY
86196: LIST
86197: LIST
86198: PUSH
86199: LD_INT 21
86201: PUSH
86202: LD_INT 2
86204: PUSH
86205: EMPTY
86206: LIST
86207: LIST
86208: PUSH
86209: EMPTY
86210: LIST
86211: LIST
86212: LIST
86213: PPUSH
86214: CALL_OW 69
86218: PUSH
86219: FOR_IN
86220: IFFALSE 86281
// if IsSelected ( i ) then
86222: LD_VAR 0 2
86226: PPUSH
86227: CALL_OW 306
86231: IFFALSE 86279
// begin if i in hInvincible then
86233: LD_VAR 0 2
86237: PUSH
86238: LD_EXP 132
86242: IN
86243: IFFALSE 86263
// hInvincible := hInvincible diff i else
86245: LD_ADDR_EXP 132
86249: PUSH
86250: LD_EXP 132
86254: PUSH
86255: LD_VAR 0 2
86259: DIFF
86260: ST_TO_ADDR
86261: GO 86279
// hInvincible := hInvincible union i ;
86263: LD_ADDR_EXP 132
86267: PUSH
86268: LD_EXP 132
86272: PUSH
86273: LD_VAR 0 2
86277: UNION
86278: ST_TO_ADDR
// end ;
86279: GO 86219
86281: POP
86282: POP
// end ;
86283: LD_VAR 0 1
86287: RET
// export function hHackInvisible ; var i , j ; begin
86288: LD_INT 0
86290: PPUSH
86291: PPUSH
86292: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86293: LD_ADDR_VAR 0 2
86297: PUSH
86298: LD_INT 21
86300: PUSH
86301: LD_INT 1
86303: PUSH
86304: EMPTY
86305: LIST
86306: LIST
86307: PPUSH
86308: CALL_OW 69
86312: PUSH
86313: FOR_IN
86314: IFFALSE 86338
// if IsSelected ( i ) then
86316: LD_VAR 0 2
86320: PPUSH
86321: CALL_OW 306
86325: IFFALSE 86336
// ComForceInvisible ( i ) ;
86327: LD_VAR 0 2
86331: PPUSH
86332: CALL_OW 496
86336: GO 86313
86338: POP
86339: POP
// end ;
86340: LD_VAR 0 1
86344: RET
// export function hHackChangeYourSide ; begin
86345: LD_INT 0
86347: PPUSH
// if your_side = 8 then
86348: LD_OWVAR 2
86352: PUSH
86353: LD_INT 8
86355: EQUAL
86356: IFFALSE 86368
// your_side := 0 else
86358: LD_ADDR_OWVAR 2
86362: PUSH
86363: LD_INT 0
86365: ST_TO_ADDR
86366: GO 86382
// your_side := your_side + 1 ;
86368: LD_ADDR_OWVAR 2
86372: PUSH
86373: LD_OWVAR 2
86377: PUSH
86378: LD_INT 1
86380: PLUS
86381: ST_TO_ADDR
// end ;
86382: LD_VAR 0 1
86386: RET
// export function hHackChangeUnitSide ; var i , j ; begin
86387: LD_INT 0
86389: PPUSH
86390: PPUSH
86391: PPUSH
// for i in all_units do
86392: LD_ADDR_VAR 0 2
86396: PUSH
86397: LD_OWVAR 3
86401: PUSH
86402: FOR_IN
86403: IFFALSE 86481
// if IsSelected ( i ) then
86405: LD_VAR 0 2
86409: PPUSH
86410: CALL_OW 306
86414: IFFALSE 86479
// begin j := GetSide ( i ) ;
86416: LD_ADDR_VAR 0 3
86420: PUSH
86421: LD_VAR 0 2
86425: PPUSH
86426: CALL_OW 255
86430: ST_TO_ADDR
// if j = 8 then
86431: LD_VAR 0 3
86435: PUSH
86436: LD_INT 8
86438: EQUAL
86439: IFFALSE 86451
// j := 0 else
86441: LD_ADDR_VAR 0 3
86445: PUSH
86446: LD_INT 0
86448: ST_TO_ADDR
86449: GO 86465
// j := j + 1 ;
86451: LD_ADDR_VAR 0 3
86455: PUSH
86456: LD_VAR 0 3
86460: PUSH
86461: LD_INT 1
86463: PLUS
86464: ST_TO_ADDR
// SetSide ( i , j ) ;
86465: LD_VAR 0 2
86469: PPUSH
86470: LD_VAR 0 3
86474: PPUSH
86475: CALL_OW 235
// end ;
86479: GO 86402
86481: POP
86482: POP
// end ;
86483: LD_VAR 0 1
86487: RET
// export function hHackFog ; begin
86488: LD_INT 0
86490: PPUSH
// FogOff ( true ) ;
86491: LD_INT 1
86493: PPUSH
86494: CALL_OW 344
// end ;
86498: LD_VAR 0 1
86502: RET
// export function hHackTeleport ( unit , x , y ) ; begin
86503: LD_INT 0
86505: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
86506: LD_VAR 0 1
86510: PPUSH
86511: LD_VAR 0 2
86515: PPUSH
86516: LD_VAR 0 3
86520: PPUSH
86521: LD_INT 1
86523: PPUSH
86524: LD_INT 1
86526: PPUSH
86527: CALL_OW 483
// CenterOnXY ( x , y ) ;
86531: LD_VAR 0 2
86535: PPUSH
86536: LD_VAR 0 3
86540: PPUSH
86541: CALL_OW 84
// end ;
86545: LD_VAR 0 4
86549: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
86550: LD_INT 0
86552: PPUSH
86553: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
86554: LD_VAR 0 1
86558: NOT
86559: PUSH
86560: LD_VAR 0 2
86564: PPUSH
86565: LD_VAR 0 3
86569: PPUSH
86570: CALL_OW 488
86574: NOT
86575: OR
86576: PUSH
86577: LD_VAR 0 1
86581: PPUSH
86582: CALL_OW 266
86586: PUSH
86587: LD_INT 3
86589: NONEQUAL
86590: PUSH
86591: LD_VAR 0 1
86595: PPUSH
86596: CALL_OW 247
86600: PUSH
86601: LD_INT 1
86603: EQUAL
86604: NOT
86605: AND
86606: OR
86607: IFFALSE 86611
// exit ;
86609: GO 86760
// if GetType ( factory ) = unit_human then
86611: LD_VAR 0 1
86615: PPUSH
86616: CALL_OW 247
86620: PUSH
86621: LD_INT 1
86623: EQUAL
86624: IFFALSE 86641
// factory := IsInUnit ( factory ) ;
86626: LD_ADDR_VAR 0 1
86630: PUSH
86631: LD_VAR 0 1
86635: PPUSH
86636: CALL_OW 310
86640: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86641: LD_VAR 0 1
86645: PPUSH
86646: CALL_OW 266
86650: PUSH
86651: LD_INT 3
86653: NONEQUAL
86654: IFFALSE 86658
// exit ;
86656: GO 86760
// if HexInfo ( x , y ) = factory then
86658: LD_VAR 0 2
86662: PPUSH
86663: LD_VAR 0 3
86667: PPUSH
86668: CALL_OW 428
86672: PUSH
86673: LD_VAR 0 1
86677: EQUAL
86678: IFFALSE 86705
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
86680: LD_ADDR_EXP 133
86684: PUSH
86685: LD_EXP 133
86689: PPUSH
86690: LD_VAR 0 1
86694: PPUSH
86695: LD_INT 0
86697: PPUSH
86698: CALL_OW 1
86702: ST_TO_ADDR
86703: GO 86756
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
86705: LD_ADDR_EXP 133
86709: PUSH
86710: LD_EXP 133
86714: PPUSH
86715: LD_VAR 0 1
86719: PPUSH
86720: LD_VAR 0 1
86724: PPUSH
86725: CALL_OW 255
86729: PUSH
86730: LD_VAR 0 1
86734: PUSH
86735: LD_VAR 0 2
86739: PUSH
86740: LD_VAR 0 3
86744: PUSH
86745: EMPTY
86746: LIST
86747: LIST
86748: LIST
86749: LIST
86750: PPUSH
86751: CALL_OW 1
86755: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86756: CALL 86765 0 0
// end ;
86760: LD_VAR 0 4
86764: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
86765: LD_INT 0
86767: PPUSH
86768: PPUSH
86769: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
86770: LD_STRING resetFactoryWaypoint();
86772: PPUSH
86773: CALL_OW 559
// if factoryWaypoints then
86777: LD_EXP 133
86781: IFFALSE 86907
// begin list := PrepareArray ( factoryWaypoints ) ;
86783: LD_ADDR_VAR 0 3
86787: PUSH
86788: LD_EXP 133
86792: PPUSH
86793: CALL 70720 0 1
86797: ST_TO_ADDR
// for i := 1 to list do
86798: LD_ADDR_VAR 0 2
86802: PUSH
86803: DOUBLE
86804: LD_INT 1
86806: DEC
86807: ST_TO_ADDR
86808: LD_VAR 0 3
86812: PUSH
86813: FOR_TO
86814: IFFALSE 86905
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86816: LD_STRING setFactoryWaypointXY(
86818: PUSH
86819: LD_VAR 0 3
86823: PUSH
86824: LD_VAR 0 2
86828: ARRAY
86829: PUSH
86830: LD_INT 1
86832: ARRAY
86833: STR
86834: PUSH
86835: LD_STRING ,
86837: STR
86838: PUSH
86839: LD_VAR 0 3
86843: PUSH
86844: LD_VAR 0 2
86848: ARRAY
86849: PUSH
86850: LD_INT 2
86852: ARRAY
86853: STR
86854: PUSH
86855: LD_STRING ,
86857: STR
86858: PUSH
86859: LD_VAR 0 3
86863: PUSH
86864: LD_VAR 0 2
86868: ARRAY
86869: PUSH
86870: LD_INT 3
86872: ARRAY
86873: STR
86874: PUSH
86875: LD_STRING ,
86877: STR
86878: PUSH
86879: LD_VAR 0 3
86883: PUSH
86884: LD_VAR 0 2
86888: ARRAY
86889: PUSH
86890: LD_INT 4
86892: ARRAY
86893: STR
86894: PUSH
86895: LD_STRING )
86897: STR
86898: PPUSH
86899: CALL_OW 559
86903: GO 86813
86905: POP
86906: POP
// end ; end ;
86907: LD_VAR 0 1
86911: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
86912: LD_INT 0
86914: PPUSH
// if HexInfo ( x , y ) = warehouse then
86915: LD_VAR 0 2
86919: PPUSH
86920: LD_VAR 0 3
86924: PPUSH
86925: CALL_OW 428
86929: PUSH
86930: LD_VAR 0 1
86934: EQUAL
86935: IFFALSE 86962
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
86937: LD_ADDR_EXP 134
86941: PUSH
86942: LD_EXP 134
86946: PPUSH
86947: LD_VAR 0 1
86951: PPUSH
86952: LD_INT 0
86954: PPUSH
86955: CALL_OW 1
86959: ST_TO_ADDR
86960: GO 87013
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
86962: LD_ADDR_EXP 134
86966: PUSH
86967: LD_EXP 134
86971: PPUSH
86972: LD_VAR 0 1
86976: PPUSH
86977: LD_VAR 0 1
86981: PPUSH
86982: CALL_OW 255
86986: PUSH
86987: LD_VAR 0 1
86991: PUSH
86992: LD_VAR 0 2
86996: PUSH
86997: LD_VAR 0 3
87001: PUSH
87002: EMPTY
87003: LIST
87004: LIST
87005: LIST
87006: LIST
87007: PPUSH
87008: CALL_OW 1
87012: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
87013: CALL 87022 0 0
// end ;
87017: LD_VAR 0 4
87021: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
87022: LD_INT 0
87024: PPUSH
87025: PPUSH
87026: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
87027: LD_STRING resetWarehouseGatheringPoints();
87029: PPUSH
87030: CALL_OW 559
// if warehouseGatheringPoints then
87034: LD_EXP 134
87038: IFFALSE 87164
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
87040: LD_ADDR_VAR 0 3
87044: PUSH
87045: LD_EXP 134
87049: PPUSH
87050: CALL 70720 0 1
87054: ST_TO_ADDR
// for i := 1 to list do
87055: LD_ADDR_VAR 0 2
87059: PUSH
87060: DOUBLE
87061: LD_INT 1
87063: DEC
87064: ST_TO_ADDR
87065: LD_VAR 0 3
87069: PUSH
87070: FOR_TO
87071: IFFALSE 87162
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87073: LD_STRING setWarehouseGatheringPointXY(
87075: PUSH
87076: LD_VAR 0 3
87080: PUSH
87081: LD_VAR 0 2
87085: ARRAY
87086: PUSH
87087: LD_INT 1
87089: ARRAY
87090: STR
87091: PUSH
87092: LD_STRING ,
87094: STR
87095: PUSH
87096: LD_VAR 0 3
87100: PUSH
87101: LD_VAR 0 2
87105: ARRAY
87106: PUSH
87107: LD_INT 2
87109: ARRAY
87110: STR
87111: PUSH
87112: LD_STRING ,
87114: STR
87115: PUSH
87116: LD_VAR 0 3
87120: PUSH
87121: LD_VAR 0 2
87125: ARRAY
87126: PUSH
87127: LD_INT 3
87129: ARRAY
87130: STR
87131: PUSH
87132: LD_STRING ,
87134: STR
87135: PUSH
87136: LD_VAR 0 3
87140: PUSH
87141: LD_VAR 0 2
87145: ARRAY
87146: PUSH
87147: LD_INT 4
87149: ARRAY
87150: STR
87151: PUSH
87152: LD_STRING )
87154: STR
87155: PPUSH
87156: CALL_OW 559
87160: GO 87070
87162: POP
87163: POP
// end ; end ;
87164: LD_VAR 0 1
87168: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
87169: LD_EXP 134
87173: IFFALSE 87858
87175: GO 87177
87177: DISABLE
87178: LD_INT 0
87180: PPUSH
87181: PPUSH
87182: PPUSH
87183: PPUSH
87184: PPUSH
87185: PPUSH
87186: PPUSH
87187: PPUSH
87188: PPUSH
// begin enable ;
87189: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
87190: LD_ADDR_VAR 0 3
87194: PUSH
87195: LD_EXP 134
87199: PPUSH
87200: CALL 70720 0 1
87204: ST_TO_ADDR
// if not list then
87205: LD_VAR 0 3
87209: NOT
87210: IFFALSE 87214
// exit ;
87212: GO 87858
// for i := 1 to list do
87214: LD_ADDR_VAR 0 1
87218: PUSH
87219: DOUBLE
87220: LD_INT 1
87222: DEC
87223: ST_TO_ADDR
87224: LD_VAR 0 3
87228: PUSH
87229: FOR_TO
87230: IFFALSE 87856
// begin depot := list [ i ] [ 2 ] ;
87232: LD_ADDR_VAR 0 8
87236: PUSH
87237: LD_VAR 0 3
87241: PUSH
87242: LD_VAR 0 1
87246: ARRAY
87247: PUSH
87248: LD_INT 2
87250: ARRAY
87251: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
87252: LD_ADDR_VAR 0 5
87256: PUSH
87257: LD_VAR 0 3
87261: PUSH
87262: LD_VAR 0 1
87266: ARRAY
87267: PUSH
87268: LD_INT 1
87270: ARRAY
87271: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
87272: LD_VAR 0 8
87276: PPUSH
87277: CALL_OW 301
87281: PUSH
87282: LD_VAR 0 5
87286: PUSH
87287: LD_VAR 0 8
87291: PPUSH
87292: CALL_OW 255
87296: NONEQUAL
87297: OR
87298: IFFALSE 87327
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
87300: LD_ADDR_EXP 134
87304: PUSH
87305: LD_EXP 134
87309: PPUSH
87310: LD_VAR 0 8
87314: PPUSH
87315: LD_INT 0
87317: PPUSH
87318: CALL_OW 1
87322: ST_TO_ADDR
// exit ;
87323: POP
87324: POP
87325: GO 87858
// end ; x := list [ i ] [ 3 ] ;
87327: LD_ADDR_VAR 0 6
87331: PUSH
87332: LD_VAR 0 3
87336: PUSH
87337: LD_VAR 0 1
87341: ARRAY
87342: PUSH
87343: LD_INT 3
87345: ARRAY
87346: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
87347: LD_ADDR_VAR 0 7
87351: PUSH
87352: LD_VAR 0 3
87356: PUSH
87357: LD_VAR 0 1
87361: ARRAY
87362: PUSH
87363: LD_INT 4
87365: ARRAY
87366: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
87367: LD_ADDR_VAR 0 9
87371: PUSH
87372: LD_VAR 0 6
87376: PPUSH
87377: LD_VAR 0 7
87381: PPUSH
87382: LD_INT 16
87384: PPUSH
87385: CALL 69308 0 3
87389: ST_TO_ADDR
// if not cratesNearbyPoint then
87390: LD_VAR 0 9
87394: NOT
87395: IFFALSE 87401
// exit ;
87397: POP
87398: POP
87399: GO 87858
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
87401: LD_ADDR_VAR 0 4
87405: PUSH
87406: LD_INT 22
87408: PUSH
87409: LD_VAR 0 5
87413: PUSH
87414: EMPTY
87415: LIST
87416: LIST
87417: PUSH
87418: LD_INT 3
87420: PUSH
87421: LD_INT 60
87423: PUSH
87424: EMPTY
87425: LIST
87426: PUSH
87427: EMPTY
87428: LIST
87429: LIST
87430: PUSH
87431: LD_INT 91
87433: PUSH
87434: LD_VAR 0 8
87438: PUSH
87439: LD_INT 6
87441: PUSH
87442: EMPTY
87443: LIST
87444: LIST
87445: LIST
87446: PUSH
87447: LD_INT 2
87449: PUSH
87450: LD_INT 25
87452: PUSH
87453: LD_INT 2
87455: PUSH
87456: EMPTY
87457: LIST
87458: LIST
87459: PUSH
87460: LD_INT 25
87462: PUSH
87463: LD_INT 16
87465: PUSH
87466: EMPTY
87467: LIST
87468: LIST
87469: PUSH
87470: EMPTY
87471: LIST
87472: LIST
87473: LIST
87474: PUSH
87475: EMPTY
87476: LIST
87477: LIST
87478: LIST
87479: LIST
87480: PPUSH
87481: CALL_OW 69
87485: PUSH
87486: LD_VAR 0 8
87490: PPUSH
87491: CALL_OW 313
87495: PPUSH
87496: LD_INT 3
87498: PUSH
87499: LD_INT 60
87501: PUSH
87502: EMPTY
87503: LIST
87504: PUSH
87505: EMPTY
87506: LIST
87507: LIST
87508: PUSH
87509: LD_INT 2
87511: PUSH
87512: LD_INT 25
87514: PUSH
87515: LD_INT 2
87517: PUSH
87518: EMPTY
87519: LIST
87520: LIST
87521: PUSH
87522: LD_INT 25
87524: PUSH
87525: LD_INT 16
87527: PUSH
87528: EMPTY
87529: LIST
87530: LIST
87531: PUSH
87532: EMPTY
87533: LIST
87534: LIST
87535: LIST
87536: PUSH
87537: EMPTY
87538: LIST
87539: LIST
87540: PPUSH
87541: CALL_OW 72
87545: UNION
87546: ST_TO_ADDR
// if tmp then
87547: LD_VAR 0 4
87551: IFFALSE 87631
// begin tmp := ShrinkArray ( tmp , 3 ) ;
87553: LD_ADDR_VAR 0 4
87557: PUSH
87558: LD_VAR 0 4
87562: PPUSH
87563: LD_INT 3
87565: PPUSH
87566: CALL 67277 0 2
87570: ST_TO_ADDR
// for j in tmp do
87571: LD_ADDR_VAR 0 2
87575: PUSH
87576: LD_VAR 0 4
87580: PUSH
87581: FOR_IN
87582: IFFALSE 87625
// begin if IsInUnit ( j ) then
87584: LD_VAR 0 2
87588: PPUSH
87589: CALL_OW 310
87593: IFFALSE 87604
// ComExit ( j ) ;
87595: LD_VAR 0 2
87599: PPUSH
87600: CALL 67360 0 1
// AddComCollect ( j , x , y ) ;
87604: LD_VAR 0 2
87608: PPUSH
87609: LD_VAR 0 6
87613: PPUSH
87614: LD_VAR 0 7
87618: PPUSH
87619: CALL_OW 177
// end ;
87623: GO 87581
87625: POP
87626: POP
// exit ;
87627: POP
87628: POP
87629: GO 87858
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
87631: LD_ADDR_VAR 0 4
87635: PUSH
87636: LD_INT 22
87638: PUSH
87639: LD_VAR 0 5
87643: PUSH
87644: EMPTY
87645: LIST
87646: LIST
87647: PUSH
87648: LD_INT 91
87650: PUSH
87651: LD_VAR 0 8
87655: PUSH
87656: LD_INT 8
87658: PUSH
87659: EMPTY
87660: LIST
87661: LIST
87662: LIST
87663: PUSH
87664: LD_INT 2
87666: PUSH
87667: LD_INT 34
87669: PUSH
87670: LD_INT 12
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: PUSH
87677: LD_INT 34
87679: PUSH
87680: LD_INT 51
87682: PUSH
87683: EMPTY
87684: LIST
87685: LIST
87686: PUSH
87687: LD_INT 34
87689: PUSH
87690: LD_INT 32
87692: PUSH
87693: EMPTY
87694: LIST
87695: LIST
87696: PUSH
87697: LD_INT 34
87699: PUSH
87700: LD_INT 89
87702: PUSH
87703: EMPTY
87704: LIST
87705: LIST
87706: PUSH
87707: EMPTY
87708: LIST
87709: LIST
87710: LIST
87711: LIST
87712: LIST
87713: PUSH
87714: EMPTY
87715: LIST
87716: LIST
87717: LIST
87718: PPUSH
87719: CALL_OW 69
87723: ST_TO_ADDR
// if tmp then
87724: LD_VAR 0 4
87728: IFFALSE 87854
// begin for j in tmp do
87730: LD_ADDR_VAR 0 2
87734: PUSH
87735: LD_VAR 0 4
87739: PUSH
87740: FOR_IN
87741: IFFALSE 87852
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
87743: LD_VAR 0 2
87747: PPUSH
87748: CALL_OW 262
87752: PUSH
87753: LD_INT 3
87755: EQUAL
87756: PUSH
87757: LD_VAR 0 2
87761: PPUSH
87762: CALL_OW 261
87766: PUSH
87767: LD_INT 20
87769: GREATER
87770: OR
87771: PUSH
87772: LD_VAR 0 2
87776: PPUSH
87777: CALL_OW 314
87781: NOT
87782: AND
87783: PUSH
87784: LD_VAR 0 2
87788: PPUSH
87789: CALL_OW 263
87793: PUSH
87794: LD_INT 1
87796: NONEQUAL
87797: PUSH
87798: LD_VAR 0 2
87802: PPUSH
87803: CALL_OW 311
87807: OR
87808: AND
87809: IFFALSE 87850
// begin ComCollect ( j , x , y ) ;
87811: LD_VAR 0 2
87815: PPUSH
87816: LD_VAR 0 6
87820: PPUSH
87821: LD_VAR 0 7
87825: PPUSH
87826: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
87830: LD_VAR 0 2
87834: PPUSH
87835: LD_VAR 0 8
87839: PPUSH
87840: CALL_OW 172
// exit ;
87844: POP
87845: POP
87846: POP
87847: POP
87848: GO 87858
// end ;
87850: GO 87740
87852: POP
87853: POP
// end ; end ;
87854: GO 87229
87856: POP
87857: POP
// end ; end_of_file
87858: PPOPN 9
87860: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87861: LD_VAR 0 1
87865: PUSH
87866: LD_INT 200
87868: DOUBLE
87869: GREATEREQUAL
87870: IFFALSE 87878
87872: LD_INT 299
87874: DOUBLE
87875: LESSEQUAL
87876: IFTRUE 87880
87878: GO 87912
87880: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87881: LD_VAR 0 1
87885: PPUSH
87886: LD_VAR 0 2
87890: PPUSH
87891: LD_VAR 0 3
87895: PPUSH
87896: LD_VAR 0 4
87900: PPUSH
87901: LD_VAR 0 5
87905: PPUSH
87906: CALL 88400 0 5
87910: GO 87989
87912: LD_INT 300
87914: DOUBLE
87915: GREATEREQUAL
87916: IFFALSE 87924
87918: LD_INT 399
87920: DOUBLE
87921: LESSEQUAL
87922: IFTRUE 87926
87924: GO 87988
87926: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87927: LD_VAR 0 1
87931: PPUSH
87932: LD_VAR 0 2
87936: PPUSH
87937: LD_VAR 0 3
87941: PPUSH
87942: LD_VAR 0 4
87946: PPUSH
87947: LD_VAR 0 5
87951: PPUSH
87952: LD_VAR 0 6
87956: PPUSH
87957: LD_VAR 0 7
87961: PPUSH
87962: LD_VAR 0 8
87966: PPUSH
87967: LD_VAR 0 9
87971: PPUSH
87972: LD_VAR 0 10
87976: PPUSH
87977: LD_VAR 0 11
87981: PPUSH
87982: CALL 84562 0 11
87986: GO 87989
87988: POP
// end ;
87989: PPOPN 11
87991: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87992: LD_VAR 0 1
87996: PPUSH
87997: LD_VAR 0 2
88001: PPUSH
88002: LD_VAR 0 3
88006: PPUSH
88007: LD_VAR 0 4
88011: PPUSH
88012: LD_VAR 0 5
88016: PPUSH
88017: CALL 88136 0 5
// end ; end_of_file
88021: PPOPN 5
88023: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
88024: LD_INT 0
88026: PPUSH
88027: PPUSH
88028: PPUSH
88029: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
88030: LD_VAR 0 1
88034: PPUSH
88035: CALL_OW 264
88039: PUSH
88040: LD_INT 91
88042: EQUAL
88043: IFFALSE 88115
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
88045: LD_INT 68
88047: PPUSH
88048: LD_VAR 0 1
88052: PPUSH
88053: CALL_OW 255
88057: PPUSH
88058: CALL_OW 321
88062: PUSH
88063: LD_INT 2
88065: EQUAL
88066: IFFALSE 88078
// eff := 70 else
88068: LD_ADDR_VAR 0 4
88072: PUSH
88073: LD_INT 70
88075: ST_TO_ADDR
88076: GO 88086
// eff := 30 ;
88078: LD_ADDR_VAR 0 4
88082: PUSH
88083: LD_INT 30
88085: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
88086: LD_VAR 0 1
88090: PPUSH
88091: CALL_OW 250
88095: PPUSH
88096: LD_VAR 0 1
88100: PPUSH
88101: CALL_OW 251
88105: PPUSH
88106: LD_VAR 0 4
88110: PPUSH
88111: CALL_OW 495
// end ; end ;
88115: LD_VAR 0 2
88119: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88120: LD_INT 0
88122: PPUSH
// end ;
88123: LD_VAR 0 4
88127: RET
// export function SOS_Command ( cmd ) ; begin
88128: LD_INT 0
88130: PPUSH
// end ;
88131: LD_VAR 0 2
88135: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
88136: LD_INT 0
88138: PPUSH
// end ;
88139: LD_VAR 0 6
88143: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
88144: LD_INT 0
88146: PPUSH
88147: PPUSH
// if not vehicle or not factory then
88148: LD_VAR 0 1
88152: NOT
88153: PUSH
88154: LD_VAR 0 2
88158: NOT
88159: OR
88160: IFFALSE 88164
// exit ;
88162: GO 88395
// if factoryWaypoints >= factory then
88164: LD_EXP 133
88168: PUSH
88169: LD_VAR 0 2
88173: GREATEREQUAL
88174: IFFALSE 88395
// if factoryWaypoints [ factory ] then
88176: LD_EXP 133
88180: PUSH
88181: LD_VAR 0 2
88185: ARRAY
88186: IFFALSE 88395
// begin if GetControl ( vehicle ) = control_manual then
88188: LD_VAR 0 1
88192: PPUSH
88193: CALL_OW 263
88197: PUSH
88198: LD_INT 1
88200: EQUAL
88201: IFFALSE 88282
// begin driver := IsDrivenBy ( vehicle ) ;
88203: LD_ADDR_VAR 0 4
88207: PUSH
88208: LD_VAR 0 1
88212: PPUSH
88213: CALL_OW 311
88217: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
88218: LD_VAR 0 4
88222: PPUSH
88223: LD_EXP 133
88227: PUSH
88228: LD_VAR 0 2
88232: ARRAY
88233: PUSH
88234: LD_INT 3
88236: ARRAY
88237: PPUSH
88238: LD_EXP 133
88242: PUSH
88243: LD_VAR 0 2
88247: ARRAY
88248: PUSH
88249: LD_INT 4
88251: ARRAY
88252: PPUSH
88253: CALL_OW 171
// AddComExitVehicle ( driver ) ;
88257: LD_VAR 0 4
88261: PPUSH
88262: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
88266: LD_VAR 0 4
88270: PPUSH
88271: LD_VAR 0 2
88275: PPUSH
88276: CALL_OW 180
// end else
88280: GO 88395
// if GetControl ( vehicle ) = control_remote then
88282: LD_VAR 0 1
88286: PPUSH
88287: CALL_OW 263
88291: PUSH
88292: LD_INT 2
88294: EQUAL
88295: IFFALSE 88356
// begin wait ( 0 0$2 ) ;
88297: LD_INT 70
88299: PPUSH
88300: CALL_OW 67
// if Connect ( vehicle ) then
88304: LD_VAR 0 1
88308: PPUSH
88309: CALL 37579 0 1
88313: IFFALSE 88354
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
88315: LD_VAR 0 1
88319: PPUSH
88320: LD_EXP 133
88324: PUSH
88325: LD_VAR 0 2
88329: ARRAY
88330: PUSH
88331: LD_INT 3
88333: ARRAY
88334: PPUSH
88335: LD_EXP 133
88339: PUSH
88340: LD_VAR 0 2
88344: ARRAY
88345: PUSH
88346: LD_INT 4
88348: ARRAY
88349: PPUSH
88350: CALL_OW 171
// end else
88354: GO 88395
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
88356: LD_VAR 0 1
88360: PPUSH
88361: LD_EXP 133
88365: PUSH
88366: LD_VAR 0 2
88370: ARRAY
88371: PUSH
88372: LD_INT 3
88374: ARRAY
88375: PPUSH
88376: LD_EXP 133
88380: PUSH
88381: LD_VAR 0 2
88385: ARRAY
88386: PUSH
88387: LD_INT 4
88389: ARRAY
88390: PPUSH
88391: CALL_OW 171
// end ; end ;
88395: LD_VAR 0 3
88399: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
88400: LD_INT 0
88402: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
88403: LD_VAR 0 1
88407: PUSH
88408: LD_INT 250
88410: EQUAL
88411: PUSH
88412: LD_VAR 0 2
88416: PPUSH
88417: CALL_OW 264
88421: PUSH
88422: LD_INT 81
88424: EQUAL
88425: AND
88426: IFFALSE 88447
// MinerPlaceMine ( unit , x , y ) ;
88428: LD_VAR 0 2
88432: PPUSH
88433: LD_VAR 0 4
88437: PPUSH
88438: LD_VAR 0 5
88442: PPUSH
88443: CALL 91437 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
88447: LD_VAR 0 1
88451: PUSH
88452: LD_INT 251
88454: EQUAL
88455: PUSH
88456: LD_VAR 0 2
88460: PPUSH
88461: CALL_OW 264
88465: PUSH
88466: LD_INT 81
88468: EQUAL
88469: AND
88470: IFFALSE 88491
// MinerDetonateMine ( unit , x , y ) ;
88472: LD_VAR 0 2
88476: PPUSH
88477: LD_VAR 0 4
88481: PPUSH
88482: LD_VAR 0 5
88486: PPUSH
88487: CALL 91712 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
88491: LD_VAR 0 1
88495: PUSH
88496: LD_INT 252
88498: EQUAL
88499: PUSH
88500: LD_VAR 0 2
88504: PPUSH
88505: CALL_OW 264
88509: PUSH
88510: LD_INT 81
88512: EQUAL
88513: AND
88514: IFFALSE 88535
// MinerCreateMinefield ( unit , x , y ) ;
88516: LD_VAR 0 2
88520: PPUSH
88521: LD_VAR 0 4
88525: PPUSH
88526: LD_VAR 0 5
88530: PPUSH
88531: CALL 92129 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
88535: LD_VAR 0 1
88539: PUSH
88540: LD_INT 253
88542: EQUAL
88543: PUSH
88544: LD_VAR 0 2
88548: PPUSH
88549: CALL_OW 257
88553: PUSH
88554: LD_INT 5
88556: EQUAL
88557: AND
88558: IFFALSE 88579
// ComBinocular ( unit , x , y ) ;
88560: LD_VAR 0 2
88564: PPUSH
88565: LD_VAR 0 4
88569: PPUSH
88570: LD_VAR 0 5
88574: PPUSH
88575: CALL 92498 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
88579: LD_VAR 0 1
88583: PUSH
88584: LD_INT 254
88586: EQUAL
88587: PUSH
88588: LD_VAR 0 2
88592: PPUSH
88593: CALL_OW 264
88597: PUSH
88598: LD_INT 99
88600: EQUAL
88601: AND
88602: PUSH
88603: LD_VAR 0 3
88607: PPUSH
88608: CALL_OW 263
88612: PUSH
88613: LD_INT 3
88615: EQUAL
88616: AND
88617: IFFALSE 88633
// HackDestroyVehicle ( unit , selectedUnit ) ;
88619: LD_VAR 0 2
88623: PPUSH
88624: LD_VAR 0 3
88628: PPUSH
88629: CALL 90801 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
88633: LD_VAR 0 1
88637: PUSH
88638: LD_INT 255
88640: EQUAL
88641: PUSH
88642: LD_VAR 0 2
88646: PPUSH
88647: CALL_OW 264
88651: PUSH
88652: LD_INT 14
88654: PUSH
88655: LD_INT 53
88657: PUSH
88658: EMPTY
88659: LIST
88660: LIST
88661: IN
88662: AND
88663: PUSH
88664: LD_VAR 0 4
88668: PPUSH
88669: LD_VAR 0 5
88673: PPUSH
88674: CALL_OW 488
88678: AND
88679: IFFALSE 88703
// CutTreeXYR ( unit , x , y , 12 ) ;
88681: LD_VAR 0 2
88685: PPUSH
88686: LD_VAR 0 4
88690: PPUSH
88691: LD_VAR 0 5
88695: PPUSH
88696: LD_INT 12
88698: PPUSH
88699: CALL 88798 0 4
// if cmd = 256 then
88703: LD_VAR 0 1
88707: PUSH
88708: LD_INT 256
88710: EQUAL
88711: IFFALSE 88732
// SetFactoryWaypoint ( unit , x , y ) ;
88713: LD_VAR 0 2
88717: PPUSH
88718: LD_VAR 0 4
88722: PPUSH
88723: LD_VAR 0 5
88727: PPUSH
88728: CALL 86550 0 3
// if cmd = 257 then
88732: LD_VAR 0 1
88736: PUSH
88737: LD_INT 257
88739: EQUAL
88740: IFFALSE 88761
// SetWarehouseGatheringPoint ( unit , x , y ) ;
88742: LD_VAR 0 2
88746: PPUSH
88747: LD_VAR 0 4
88751: PPUSH
88752: LD_VAR 0 5
88756: PPUSH
88757: CALL 86912 0 3
// if cmd = 258 then
88761: LD_VAR 0 1
88765: PUSH
88766: LD_INT 258
88768: EQUAL
88769: IFFALSE 88793
// BurnTreeXYR ( unit , x , y , 8 ) ;
88771: LD_VAR 0 2
88775: PPUSH
88776: LD_VAR 0 4
88780: PPUSH
88781: LD_VAR 0 5
88785: PPUSH
88786: LD_INT 8
88788: PPUSH
88789: CALL 89192 0 4
// end ;
88793: LD_VAR 0 6
88797: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88798: LD_INT 0
88800: PPUSH
88801: PPUSH
88802: PPUSH
88803: PPUSH
88804: PPUSH
88805: PPUSH
88806: PPUSH
88807: PPUSH
88808: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
88809: LD_VAR 0 1
88813: PPUSH
88814: CALL_OW 302
88818: NOT
88819: PUSH
88820: LD_VAR 0 2
88824: PPUSH
88825: LD_VAR 0 3
88829: PPUSH
88830: CALL_OW 488
88834: NOT
88835: OR
88836: PUSH
88837: LD_VAR 0 4
88841: NOT
88842: OR
88843: IFFALSE 88847
// exit ;
88845: GO 89187
// list := [ ] ;
88847: LD_ADDR_VAR 0 13
88851: PUSH
88852: EMPTY
88853: ST_TO_ADDR
// if x - r < 0 then
88854: LD_VAR 0 2
88858: PUSH
88859: LD_VAR 0 4
88863: MINUS
88864: PUSH
88865: LD_INT 0
88867: LESS
88868: IFFALSE 88880
// min_x := 0 else
88870: LD_ADDR_VAR 0 7
88874: PUSH
88875: LD_INT 0
88877: ST_TO_ADDR
88878: GO 88896
// min_x := x - r ;
88880: LD_ADDR_VAR 0 7
88884: PUSH
88885: LD_VAR 0 2
88889: PUSH
88890: LD_VAR 0 4
88894: MINUS
88895: ST_TO_ADDR
// if y - r < 0 then
88896: LD_VAR 0 3
88900: PUSH
88901: LD_VAR 0 4
88905: MINUS
88906: PUSH
88907: LD_INT 0
88909: LESS
88910: IFFALSE 88922
// min_y := 0 else
88912: LD_ADDR_VAR 0 8
88916: PUSH
88917: LD_INT 0
88919: ST_TO_ADDR
88920: GO 88938
// min_y := y - r ;
88922: LD_ADDR_VAR 0 8
88926: PUSH
88927: LD_VAR 0 3
88931: PUSH
88932: LD_VAR 0 4
88936: MINUS
88937: ST_TO_ADDR
// max_x := x + r ;
88938: LD_ADDR_VAR 0 9
88942: PUSH
88943: LD_VAR 0 2
88947: PUSH
88948: LD_VAR 0 4
88952: PLUS
88953: ST_TO_ADDR
// max_y := y + r ;
88954: LD_ADDR_VAR 0 10
88958: PUSH
88959: LD_VAR 0 3
88963: PUSH
88964: LD_VAR 0 4
88968: PLUS
88969: ST_TO_ADDR
// for _x = min_x to max_x do
88970: LD_ADDR_VAR 0 11
88974: PUSH
88975: DOUBLE
88976: LD_VAR 0 7
88980: DEC
88981: ST_TO_ADDR
88982: LD_VAR 0 9
88986: PUSH
88987: FOR_TO
88988: IFFALSE 89105
// for _y = min_y to max_y do
88990: LD_ADDR_VAR 0 12
88994: PUSH
88995: DOUBLE
88996: LD_VAR 0 8
89000: DEC
89001: ST_TO_ADDR
89002: LD_VAR 0 10
89006: PUSH
89007: FOR_TO
89008: IFFALSE 89101
// begin if not ValidHex ( _x , _y ) then
89010: LD_VAR 0 11
89014: PPUSH
89015: LD_VAR 0 12
89019: PPUSH
89020: CALL_OW 488
89024: NOT
89025: IFFALSE 89029
// continue ;
89027: GO 89007
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89029: LD_VAR 0 11
89033: PPUSH
89034: LD_VAR 0 12
89038: PPUSH
89039: CALL_OW 351
89043: PUSH
89044: LD_VAR 0 11
89048: PPUSH
89049: LD_VAR 0 12
89053: PPUSH
89054: CALL_OW 554
89058: AND
89059: IFFALSE 89099
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89061: LD_ADDR_VAR 0 13
89065: PUSH
89066: LD_VAR 0 13
89070: PPUSH
89071: LD_VAR 0 13
89075: PUSH
89076: LD_INT 1
89078: PLUS
89079: PPUSH
89080: LD_VAR 0 11
89084: PUSH
89085: LD_VAR 0 12
89089: PUSH
89090: EMPTY
89091: LIST
89092: LIST
89093: PPUSH
89094: CALL_OW 2
89098: ST_TO_ADDR
// end ;
89099: GO 89007
89101: POP
89102: POP
89103: GO 88987
89105: POP
89106: POP
// if not list then
89107: LD_VAR 0 13
89111: NOT
89112: IFFALSE 89116
// exit ;
89114: GO 89187
// for i in list do
89116: LD_ADDR_VAR 0 6
89120: PUSH
89121: LD_VAR 0 13
89125: PUSH
89126: FOR_IN
89127: IFFALSE 89185
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89129: LD_VAR 0 1
89133: PPUSH
89134: LD_STRING M
89136: PUSH
89137: LD_VAR 0 6
89141: PUSH
89142: LD_INT 1
89144: ARRAY
89145: PUSH
89146: LD_VAR 0 6
89150: PUSH
89151: LD_INT 2
89153: ARRAY
89154: PUSH
89155: LD_INT 0
89157: PUSH
89158: LD_INT 0
89160: PUSH
89161: LD_INT 0
89163: PUSH
89164: LD_INT 0
89166: PUSH
89167: EMPTY
89168: LIST
89169: LIST
89170: LIST
89171: LIST
89172: LIST
89173: LIST
89174: LIST
89175: PUSH
89176: EMPTY
89177: LIST
89178: PPUSH
89179: CALL_OW 447
89183: GO 89126
89185: POP
89186: POP
// end ;
89187: LD_VAR 0 5
89191: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
89192: LD_INT 0
89194: PPUSH
89195: PPUSH
89196: PPUSH
89197: PPUSH
89198: PPUSH
89199: PPUSH
89200: PPUSH
89201: PPUSH
89202: PPUSH
89203: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
89204: LD_VAR 0 1
89208: PPUSH
89209: CALL_OW 302
89213: NOT
89214: PUSH
89215: LD_VAR 0 2
89219: PPUSH
89220: LD_VAR 0 3
89224: PPUSH
89225: CALL_OW 488
89229: NOT
89230: OR
89231: PUSH
89232: LD_VAR 0 4
89236: NOT
89237: OR
89238: IFFALSE 89242
// exit ;
89240: GO 89755
// list := [ ] ;
89242: LD_ADDR_VAR 0 13
89246: PUSH
89247: EMPTY
89248: ST_TO_ADDR
// if x - r < 0 then
89249: LD_VAR 0 2
89253: PUSH
89254: LD_VAR 0 4
89258: MINUS
89259: PUSH
89260: LD_INT 0
89262: LESS
89263: IFFALSE 89275
// min_x := 0 else
89265: LD_ADDR_VAR 0 7
89269: PUSH
89270: LD_INT 0
89272: ST_TO_ADDR
89273: GO 89291
// min_x := x - r ;
89275: LD_ADDR_VAR 0 7
89279: PUSH
89280: LD_VAR 0 2
89284: PUSH
89285: LD_VAR 0 4
89289: MINUS
89290: ST_TO_ADDR
// if y - r < 0 then
89291: LD_VAR 0 3
89295: PUSH
89296: LD_VAR 0 4
89300: MINUS
89301: PUSH
89302: LD_INT 0
89304: LESS
89305: IFFALSE 89317
// min_y := 0 else
89307: LD_ADDR_VAR 0 8
89311: PUSH
89312: LD_INT 0
89314: ST_TO_ADDR
89315: GO 89333
// min_y := y - r ;
89317: LD_ADDR_VAR 0 8
89321: PUSH
89322: LD_VAR 0 3
89326: PUSH
89327: LD_VAR 0 4
89331: MINUS
89332: ST_TO_ADDR
// max_x := x + r ;
89333: LD_ADDR_VAR 0 9
89337: PUSH
89338: LD_VAR 0 2
89342: PUSH
89343: LD_VAR 0 4
89347: PLUS
89348: ST_TO_ADDR
// max_y := y + r ;
89349: LD_ADDR_VAR 0 10
89353: PUSH
89354: LD_VAR 0 3
89358: PUSH
89359: LD_VAR 0 4
89363: PLUS
89364: ST_TO_ADDR
// for _x = min_x to max_x do
89365: LD_ADDR_VAR 0 11
89369: PUSH
89370: DOUBLE
89371: LD_VAR 0 7
89375: DEC
89376: ST_TO_ADDR
89377: LD_VAR 0 9
89381: PUSH
89382: FOR_TO
89383: IFFALSE 89500
// for _y = min_y to max_y do
89385: LD_ADDR_VAR 0 12
89389: PUSH
89390: DOUBLE
89391: LD_VAR 0 8
89395: DEC
89396: ST_TO_ADDR
89397: LD_VAR 0 10
89401: PUSH
89402: FOR_TO
89403: IFFALSE 89496
// begin if not ValidHex ( _x , _y ) then
89405: LD_VAR 0 11
89409: PPUSH
89410: LD_VAR 0 12
89414: PPUSH
89415: CALL_OW 488
89419: NOT
89420: IFFALSE 89424
// continue ;
89422: GO 89402
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89424: LD_VAR 0 11
89428: PPUSH
89429: LD_VAR 0 12
89433: PPUSH
89434: CALL_OW 351
89438: PUSH
89439: LD_VAR 0 11
89443: PPUSH
89444: LD_VAR 0 12
89448: PPUSH
89449: CALL_OW 554
89453: AND
89454: IFFALSE 89494
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89456: LD_ADDR_VAR 0 13
89460: PUSH
89461: LD_VAR 0 13
89465: PPUSH
89466: LD_VAR 0 13
89470: PUSH
89471: LD_INT 1
89473: PLUS
89474: PPUSH
89475: LD_VAR 0 11
89479: PUSH
89480: LD_VAR 0 12
89484: PUSH
89485: EMPTY
89486: LIST
89487: LIST
89488: PPUSH
89489: CALL_OW 2
89493: ST_TO_ADDR
// end ;
89494: GO 89402
89496: POP
89497: POP
89498: GO 89382
89500: POP
89501: POP
// if not list then
89502: LD_VAR 0 13
89506: NOT
89507: IFFALSE 89511
// exit ;
89509: GO 89755
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
89511: LD_ADDR_VAR 0 13
89515: PUSH
89516: LD_VAR 0 1
89520: PPUSH
89521: LD_VAR 0 13
89525: PPUSH
89526: LD_INT 1
89528: PPUSH
89529: LD_INT 1
89531: PPUSH
89532: CALL 34721 0 4
89536: ST_TO_ADDR
// ComStop ( flame ) ;
89537: LD_VAR 0 1
89541: PPUSH
89542: CALL_OW 141
// for i in list do
89546: LD_ADDR_VAR 0 6
89550: PUSH
89551: LD_VAR 0 13
89555: PUSH
89556: FOR_IN
89557: IFFALSE 89588
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
89559: LD_VAR 0 1
89563: PPUSH
89564: LD_VAR 0 6
89568: PUSH
89569: LD_INT 1
89571: ARRAY
89572: PPUSH
89573: LD_VAR 0 6
89577: PUSH
89578: LD_INT 2
89580: ARRAY
89581: PPUSH
89582: CALL_OW 176
89586: GO 89556
89588: POP
89589: POP
// repeat wait ( 0 0$1 ) ;
89590: LD_INT 35
89592: PPUSH
89593: CALL_OW 67
// task := GetTaskList ( flame ) ;
89597: LD_ADDR_VAR 0 14
89601: PUSH
89602: LD_VAR 0 1
89606: PPUSH
89607: CALL_OW 437
89611: ST_TO_ADDR
// if not task then
89612: LD_VAR 0 14
89616: NOT
89617: IFFALSE 89621
// exit ;
89619: GO 89755
// if task [ 1 ] [ 1 ] <> | then
89621: LD_VAR 0 14
89625: PUSH
89626: LD_INT 1
89628: ARRAY
89629: PUSH
89630: LD_INT 1
89632: ARRAY
89633: PUSH
89634: LD_STRING |
89636: NONEQUAL
89637: IFFALSE 89641
// exit ;
89639: GO 89755
// _x := task [ 1 ] [ 2 ] ;
89641: LD_ADDR_VAR 0 11
89645: PUSH
89646: LD_VAR 0 14
89650: PUSH
89651: LD_INT 1
89653: ARRAY
89654: PUSH
89655: LD_INT 2
89657: ARRAY
89658: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
89659: LD_ADDR_VAR 0 12
89663: PUSH
89664: LD_VAR 0 14
89668: PUSH
89669: LD_INT 1
89671: ARRAY
89672: PUSH
89673: LD_INT 3
89675: ARRAY
89676: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
89677: LD_VAR 0 11
89681: PPUSH
89682: LD_VAR 0 12
89686: PPUSH
89687: CALL_OW 351
89691: NOT
89692: PUSH
89693: LD_VAR 0 11
89697: PPUSH
89698: LD_VAR 0 12
89702: PPUSH
89703: CALL_OW 554
89707: NOT
89708: OR
89709: IFFALSE 89743
// begin task := Delete ( task , 1 ) ;
89711: LD_ADDR_VAR 0 14
89715: PUSH
89716: LD_VAR 0 14
89720: PPUSH
89721: LD_INT 1
89723: PPUSH
89724: CALL_OW 3
89728: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
89729: LD_VAR 0 1
89733: PPUSH
89734: LD_VAR 0 14
89738: PPUSH
89739: CALL_OW 446
// end ; until not HasTask ( flame ) ;
89743: LD_VAR 0 1
89747: PPUSH
89748: CALL_OW 314
89752: NOT
89753: IFFALSE 89590
// end ;
89755: LD_VAR 0 5
89759: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
89760: LD_EXP 136
89764: NOT
89765: IFFALSE 89815
89767: GO 89769
89769: DISABLE
// begin initHack := true ;
89770: LD_ADDR_EXP 136
89774: PUSH
89775: LD_INT 1
89777: ST_TO_ADDR
// hackTanks := [ ] ;
89778: LD_ADDR_EXP 137
89782: PUSH
89783: EMPTY
89784: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
89785: LD_ADDR_EXP 138
89789: PUSH
89790: EMPTY
89791: ST_TO_ADDR
// hackLimit := 3 ;
89792: LD_ADDR_EXP 139
89796: PUSH
89797: LD_INT 3
89799: ST_TO_ADDR
// hackDist := 12 ;
89800: LD_ADDR_EXP 140
89804: PUSH
89805: LD_INT 12
89807: ST_TO_ADDR
// hackCounter := [ ] ;
89808: LD_ADDR_EXP 141
89812: PUSH
89813: EMPTY
89814: ST_TO_ADDR
// end ;
89815: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
89816: LD_EXP 136
89820: PUSH
89821: LD_INT 34
89823: PUSH
89824: LD_INT 99
89826: PUSH
89827: EMPTY
89828: LIST
89829: LIST
89830: PPUSH
89831: CALL_OW 69
89835: AND
89836: IFFALSE 90089
89838: GO 89840
89840: DISABLE
89841: LD_INT 0
89843: PPUSH
89844: PPUSH
// begin enable ;
89845: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
89846: LD_ADDR_VAR 0 1
89850: PUSH
89851: LD_INT 34
89853: PUSH
89854: LD_INT 99
89856: PUSH
89857: EMPTY
89858: LIST
89859: LIST
89860: PPUSH
89861: CALL_OW 69
89865: PUSH
89866: FOR_IN
89867: IFFALSE 90087
// begin if not i in hackTanks then
89869: LD_VAR 0 1
89873: PUSH
89874: LD_EXP 137
89878: IN
89879: NOT
89880: IFFALSE 89963
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
89882: LD_ADDR_EXP 137
89886: PUSH
89887: LD_EXP 137
89891: PPUSH
89892: LD_EXP 137
89896: PUSH
89897: LD_INT 1
89899: PLUS
89900: PPUSH
89901: LD_VAR 0 1
89905: PPUSH
89906: CALL_OW 1
89910: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
89911: LD_ADDR_EXP 138
89915: PUSH
89916: LD_EXP 138
89920: PPUSH
89921: LD_EXP 138
89925: PUSH
89926: LD_INT 1
89928: PLUS
89929: PPUSH
89930: EMPTY
89931: PPUSH
89932: CALL_OW 1
89936: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
89937: LD_ADDR_EXP 141
89941: PUSH
89942: LD_EXP 141
89946: PPUSH
89947: LD_EXP 141
89951: PUSH
89952: LD_INT 1
89954: PLUS
89955: PPUSH
89956: EMPTY
89957: PPUSH
89958: CALL_OW 1
89962: ST_TO_ADDR
// end ; if not IsOk ( i ) then
89963: LD_VAR 0 1
89967: PPUSH
89968: CALL_OW 302
89972: NOT
89973: IFFALSE 89986
// begin HackUnlinkAll ( i ) ;
89975: LD_VAR 0 1
89979: PPUSH
89980: CALL 90092 0 1
// continue ;
89984: GO 89866
// end ; HackCheckCapturedStatus ( i ) ;
89986: LD_VAR 0 1
89990: PPUSH
89991: CALL 90535 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
89995: LD_ADDR_VAR 0 2
89999: PUSH
90000: LD_INT 81
90002: PUSH
90003: LD_VAR 0 1
90007: PPUSH
90008: CALL_OW 255
90012: PUSH
90013: EMPTY
90014: LIST
90015: LIST
90016: PUSH
90017: LD_INT 33
90019: PUSH
90020: LD_INT 3
90022: PUSH
90023: EMPTY
90024: LIST
90025: LIST
90026: PUSH
90027: LD_INT 91
90029: PUSH
90030: LD_VAR 0 1
90034: PUSH
90035: LD_EXP 140
90039: PUSH
90040: EMPTY
90041: LIST
90042: LIST
90043: LIST
90044: PUSH
90045: LD_INT 50
90047: PUSH
90048: EMPTY
90049: LIST
90050: PUSH
90051: EMPTY
90052: LIST
90053: LIST
90054: LIST
90055: LIST
90056: PPUSH
90057: CALL_OW 69
90061: ST_TO_ADDR
// if not tmp then
90062: LD_VAR 0 2
90066: NOT
90067: IFFALSE 90071
// continue ;
90069: GO 89866
// HackLink ( i , tmp ) ;
90071: LD_VAR 0 1
90075: PPUSH
90076: LD_VAR 0 2
90080: PPUSH
90081: CALL 90228 0 2
// end ;
90085: GO 89866
90087: POP
90088: POP
// end ;
90089: PPOPN 2
90091: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
90092: LD_INT 0
90094: PPUSH
90095: PPUSH
90096: PPUSH
// if not hack in hackTanks then
90097: LD_VAR 0 1
90101: PUSH
90102: LD_EXP 137
90106: IN
90107: NOT
90108: IFFALSE 90112
// exit ;
90110: GO 90223
// index := GetElementIndex ( hackTanks , hack ) ;
90112: LD_ADDR_VAR 0 4
90116: PUSH
90117: LD_EXP 137
90121: PPUSH
90122: LD_VAR 0 1
90126: PPUSH
90127: CALL 34018 0 2
90131: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
90132: LD_EXP 138
90136: PUSH
90137: LD_VAR 0 4
90141: ARRAY
90142: IFFALSE 90223
// begin for i in hackTanksCaptured [ index ] do
90144: LD_ADDR_VAR 0 3
90148: PUSH
90149: LD_EXP 138
90153: PUSH
90154: LD_VAR 0 4
90158: ARRAY
90159: PUSH
90160: FOR_IN
90161: IFFALSE 90187
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
90163: LD_VAR 0 3
90167: PUSH
90168: LD_INT 1
90170: ARRAY
90171: PPUSH
90172: LD_VAR 0 3
90176: PUSH
90177: LD_INT 2
90179: ARRAY
90180: PPUSH
90181: CALL_OW 235
90185: GO 90160
90187: POP
90188: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
90189: LD_ADDR_EXP 138
90193: PUSH
90194: LD_EXP 138
90198: PPUSH
90199: LD_VAR 0 4
90203: PPUSH
90204: EMPTY
90205: PPUSH
90206: CALL_OW 1
90210: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
90211: LD_VAR 0 1
90215: PPUSH
90216: LD_INT 0
90218: PPUSH
90219: CALL_OW 505
// end ; end ;
90223: LD_VAR 0 2
90227: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
90228: LD_INT 0
90230: PPUSH
90231: PPUSH
90232: PPUSH
// if not hack in hackTanks or not vehicles then
90233: LD_VAR 0 1
90237: PUSH
90238: LD_EXP 137
90242: IN
90243: NOT
90244: PUSH
90245: LD_VAR 0 2
90249: NOT
90250: OR
90251: IFFALSE 90255
// exit ;
90253: GO 90530
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
90255: LD_ADDR_VAR 0 2
90259: PUSH
90260: LD_VAR 0 1
90264: PPUSH
90265: LD_VAR 0 2
90269: PPUSH
90270: LD_INT 1
90272: PPUSH
90273: LD_INT 1
90275: PPUSH
90276: CALL 34668 0 4
90280: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
90281: LD_ADDR_VAR 0 5
90285: PUSH
90286: LD_EXP 137
90290: PPUSH
90291: LD_VAR 0 1
90295: PPUSH
90296: CALL 34018 0 2
90300: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
90301: LD_EXP 138
90305: PUSH
90306: LD_VAR 0 5
90310: ARRAY
90311: PUSH
90312: LD_EXP 139
90316: LESS
90317: IFFALSE 90506
// begin for i := 1 to vehicles do
90319: LD_ADDR_VAR 0 4
90323: PUSH
90324: DOUBLE
90325: LD_INT 1
90327: DEC
90328: ST_TO_ADDR
90329: LD_VAR 0 2
90333: PUSH
90334: FOR_TO
90335: IFFALSE 90504
// begin if hackTanksCaptured [ index ] = hackLimit then
90337: LD_EXP 138
90341: PUSH
90342: LD_VAR 0 5
90346: ARRAY
90347: PUSH
90348: LD_EXP 139
90352: EQUAL
90353: IFFALSE 90357
// break ;
90355: GO 90504
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
90357: LD_ADDR_EXP 141
90361: PUSH
90362: LD_EXP 141
90366: PPUSH
90367: LD_VAR 0 5
90371: PPUSH
90372: LD_EXP 141
90376: PUSH
90377: LD_VAR 0 5
90381: ARRAY
90382: PUSH
90383: LD_INT 1
90385: PLUS
90386: PPUSH
90387: CALL_OW 1
90391: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
90392: LD_ADDR_EXP 138
90396: PUSH
90397: LD_EXP 138
90401: PPUSH
90402: LD_VAR 0 5
90406: PUSH
90407: LD_EXP 138
90411: PUSH
90412: LD_VAR 0 5
90416: ARRAY
90417: PUSH
90418: LD_INT 1
90420: PLUS
90421: PUSH
90422: EMPTY
90423: LIST
90424: LIST
90425: PPUSH
90426: LD_VAR 0 2
90430: PUSH
90431: LD_VAR 0 4
90435: ARRAY
90436: PUSH
90437: LD_VAR 0 2
90441: PUSH
90442: LD_VAR 0 4
90446: ARRAY
90447: PPUSH
90448: CALL_OW 255
90452: PUSH
90453: EMPTY
90454: LIST
90455: LIST
90456: PPUSH
90457: CALL 34233 0 3
90461: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
90462: LD_VAR 0 2
90466: PUSH
90467: LD_VAR 0 4
90471: ARRAY
90472: PPUSH
90473: LD_VAR 0 1
90477: PPUSH
90478: CALL_OW 255
90482: PPUSH
90483: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
90487: LD_VAR 0 2
90491: PUSH
90492: LD_VAR 0 4
90496: ARRAY
90497: PPUSH
90498: CALL_OW 141
// end ;
90502: GO 90334
90504: POP
90505: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
90506: LD_VAR 0 1
90510: PPUSH
90511: LD_EXP 138
90515: PUSH
90516: LD_VAR 0 5
90520: ARRAY
90521: PUSH
90522: LD_INT 0
90524: PLUS
90525: PPUSH
90526: CALL_OW 505
// end ;
90530: LD_VAR 0 3
90534: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
90535: LD_INT 0
90537: PPUSH
90538: PPUSH
90539: PPUSH
90540: PPUSH
// if not hack in hackTanks then
90541: LD_VAR 0 1
90545: PUSH
90546: LD_EXP 137
90550: IN
90551: NOT
90552: IFFALSE 90556
// exit ;
90554: GO 90796
// index := GetElementIndex ( hackTanks , hack ) ;
90556: LD_ADDR_VAR 0 4
90560: PUSH
90561: LD_EXP 137
90565: PPUSH
90566: LD_VAR 0 1
90570: PPUSH
90571: CALL 34018 0 2
90575: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
90576: LD_ADDR_VAR 0 3
90580: PUSH
90581: DOUBLE
90582: LD_EXP 138
90586: PUSH
90587: LD_VAR 0 4
90591: ARRAY
90592: INC
90593: ST_TO_ADDR
90594: LD_INT 1
90596: PUSH
90597: FOR_DOWNTO
90598: IFFALSE 90770
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
90600: LD_ADDR_VAR 0 5
90604: PUSH
90605: LD_EXP 138
90609: PUSH
90610: LD_VAR 0 4
90614: ARRAY
90615: PUSH
90616: LD_VAR 0 3
90620: ARRAY
90621: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
90622: LD_VAR 0 5
90626: PUSH
90627: LD_INT 1
90629: ARRAY
90630: PPUSH
90631: CALL_OW 302
90635: NOT
90636: PUSH
90637: LD_VAR 0 5
90641: PUSH
90642: LD_INT 1
90644: ARRAY
90645: PPUSH
90646: CALL_OW 255
90650: PUSH
90651: LD_VAR 0 1
90655: PPUSH
90656: CALL_OW 255
90660: NONEQUAL
90661: OR
90662: IFFALSE 90768
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
90664: LD_VAR 0 5
90668: PUSH
90669: LD_INT 1
90671: ARRAY
90672: PPUSH
90673: CALL_OW 305
90677: PUSH
90678: LD_VAR 0 5
90682: PUSH
90683: LD_INT 1
90685: ARRAY
90686: PPUSH
90687: CALL_OW 255
90691: PUSH
90692: LD_VAR 0 1
90696: PPUSH
90697: CALL_OW 255
90701: EQUAL
90702: AND
90703: IFFALSE 90727
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
90705: LD_VAR 0 5
90709: PUSH
90710: LD_INT 1
90712: ARRAY
90713: PPUSH
90714: LD_VAR 0 5
90718: PUSH
90719: LD_INT 2
90721: ARRAY
90722: PPUSH
90723: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
90727: LD_ADDR_EXP 138
90731: PUSH
90732: LD_EXP 138
90736: PPUSH
90737: LD_VAR 0 4
90741: PPUSH
90742: LD_EXP 138
90746: PUSH
90747: LD_VAR 0 4
90751: ARRAY
90752: PPUSH
90753: LD_VAR 0 3
90757: PPUSH
90758: CALL_OW 3
90762: PPUSH
90763: CALL_OW 1
90767: ST_TO_ADDR
// end ; end ;
90768: GO 90597
90770: POP
90771: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
90772: LD_VAR 0 1
90776: PPUSH
90777: LD_EXP 138
90781: PUSH
90782: LD_VAR 0 4
90786: ARRAY
90787: PUSH
90788: LD_INT 0
90790: PLUS
90791: PPUSH
90792: CALL_OW 505
// end ;
90796: LD_VAR 0 2
90800: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
90801: LD_INT 0
90803: PPUSH
90804: PPUSH
90805: PPUSH
90806: PPUSH
// if not hack in hackTanks then
90807: LD_VAR 0 1
90811: PUSH
90812: LD_EXP 137
90816: IN
90817: NOT
90818: IFFALSE 90822
// exit ;
90820: GO 90907
// index := GetElementIndex ( hackTanks , hack ) ;
90822: LD_ADDR_VAR 0 5
90826: PUSH
90827: LD_EXP 137
90831: PPUSH
90832: LD_VAR 0 1
90836: PPUSH
90837: CALL 34018 0 2
90841: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
90842: LD_ADDR_VAR 0 4
90846: PUSH
90847: DOUBLE
90848: LD_INT 1
90850: DEC
90851: ST_TO_ADDR
90852: LD_EXP 138
90856: PUSH
90857: LD_VAR 0 5
90861: ARRAY
90862: PUSH
90863: FOR_TO
90864: IFFALSE 90905
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
90866: LD_EXP 138
90870: PUSH
90871: LD_VAR 0 5
90875: ARRAY
90876: PUSH
90877: LD_VAR 0 4
90881: ARRAY
90882: PUSH
90883: LD_INT 1
90885: ARRAY
90886: PUSH
90887: LD_VAR 0 2
90891: EQUAL
90892: IFFALSE 90903
// KillUnit ( vehicle ) ;
90894: LD_VAR 0 2
90898: PPUSH
90899: CALL_OW 66
90903: GO 90863
90905: POP
90906: POP
// end ;
90907: LD_VAR 0 3
90911: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
90912: LD_EXP 142
90916: NOT
90917: IFFALSE 90952
90919: GO 90921
90921: DISABLE
// begin initMiner := true ;
90922: LD_ADDR_EXP 142
90926: PUSH
90927: LD_INT 1
90929: ST_TO_ADDR
// minersList := [ ] ;
90930: LD_ADDR_EXP 143
90934: PUSH
90935: EMPTY
90936: ST_TO_ADDR
// minerMinesList := [ ] ;
90937: LD_ADDR_EXP 144
90941: PUSH
90942: EMPTY
90943: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
90944: LD_ADDR_EXP 145
90948: PUSH
90949: LD_INT 5
90951: ST_TO_ADDR
// end ;
90952: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
90953: LD_EXP 142
90957: PUSH
90958: LD_INT 34
90960: PUSH
90961: LD_INT 81
90963: PUSH
90964: EMPTY
90965: LIST
90966: LIST
90967: PPUSH
90968: CALL_OW 69
90972: AND
90973: IFFALSE 91434
90975: GO 90977
90977: DISABLE
90978: LD_INT 0
90980: PPUSH
90981: PPUSH
90982: PPUSH
90983: PPUSH
// begin enable ;
90984: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
90985: LD_ADDR_VAR 0 1
90989: PUSH
90990: LD_INT 34
90992: PUSH
90993: LD_INT 81
90995: PUSH
90996: EMPTY
90997: LIST
90998: LIST
90999: PPUSH
91000: CALL_OW 69
91004: PUSH
91005: FOR_IN
91006: IFFALSE 91078
// begin if not i in minersList then
91008: LD_VAR 0 1
91012: PUSH
91013: LD_EXP 143
91017: IN
91018: NOT
91019: IFFALSE 91076
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
91021: LD_ADDR_EXP 143
91025: PUSH
91026: LD_EXP 143
91030: PPUSH
91031: LD_EXP 143
91035: PUSH
91036: LD_INT 1
91038: PLUS
91039: PPUSH
91040: LD_VAR 0 1
91044: PPUSH
91045: CALL_OW 1
91049: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
91050: LD_ADDR_EXP 144
91054: PUSH
91055: LD_EXP 144
91059: PPUSH
91060: LD_EXP 144
91064: PUSH
91065: LD_INT 1
91067: PLUS
91068: PPUSH
91069: EMPTY
91070: PPUSH
91071: CALL_OW 1
91075: ST_TO_ADDR
// end end ;
91076: GO 91005
91078: POP
91079: POP
// for i := minerMinesList downto 1 do
91080: LD_ADDR_VAR 0 1
91084: PUSH
91085: DOUBLE
91086: LD_EXP 144
91090: INC
91091: ST_TO_ADDR
91092: LD_INT 1
91094: PUSH
91095: FOR_DOWNTO
91096: IFFALSE 91432
// begin if IsLive ( minersList [ i ] ) then
91098: LD_EXP 143
91102: PUSH
91103: LD_VAR 0 1
91107: ARRAY
91108: PPUSH
91109: CALL_OW 300
91113: IFFALSE 91141
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
91115: LD_EXP 143
91119: PUSH
91120: LD_VAR 0 1
91124: ARRAY
91125: PPUSH
91126: LD_EXP 144
91130: PUSH
91131: LD_VAR 0 1
91135: ARRAY
91136: PPUSH
91137: CALL_OW 505
// if not minerMinesList [ i ] then
91141: LD_EXP 144
91145: PUSH
91146: LD_VAR 0 1
91150: ARRAY
91151: NOT
91152: IFFALSE 91156
// continue ;
91154: GO 91095
// for j := minerMinesList [ i ] downto 1 do
91156: LD_ADDR_VAR 0 2
91160: PUSH
91161: DOUBLE
91162: LD_EXP 144
91166: PUSH
91167: LD_VAR 0 1
91171: ARRAY
91172: INC
91173: ST_TO_ADDR
91174: LD_INT 1
91176: PUSH
91177: FOR_DOWNTO
91178: IFFALSE 91428
// begin side := GetSide ( minersList [ i ] ) ;
91180: LD_ADDR_VAR 0 3
91184: PUSH
91185: LD_EXP 143
91189: PUSH
91190: LD_VAR 0 1
91194: ARRAY
91195: PPUSH
91196: CALL_OW 255
91200: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
91201: LD_ADDR_VAR 0 4
91205: PUSH
91206: LD_EXP 144
91210: PUSH
91211: LD_VAR 0 1
91215: ARRAY
91216: PUSH
91217: LD_VAR 0 2
91221: ARRAY
91222: PUSH
91223: LD_INT 1
91225: ARRAY
91226: PPUSH
91227: LD_EXP 144
91231: PUSH
91232: LD_VAR 0 1
91236: ARRAY
91237: PUSH
91238: LD_VAR 0 2
91242: ARRAY
91243: PUSH
91244: LD_INT 2
91246: ARRAY
91247: PPUSH
91248: CALL_OW 428
91252: ST_TO_ADDR
// if not tmp then
91253: LD_VAR 0 4
91257: NOT
91258: IFFALSE 91262
// continue ;
91260: GO 91177
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
91262: LD_VAR 0 4
91266: PUSH
91267: LD_INT 81
91269: PUSH
91270: LD_VAR 0 3
91274: PUSH
91275: EMPTY
91276: LIST
91277: LIST
91278: PPUSH
91279: CALL_OW 69
91283: IN
91284: PUSH
91285: LD_EXP 144
91289: PUSH
91290: LD_VAR 0 1
91294: ARRAY
91295: PUSH
91296: LD_VAR 0 2
91300: ARRAY
91301: PUSH
91302: LD_INT 1
91304: ARRAY
91305: PPUSH
91306: LD_EXP 144
91310: PUSH
91311: LD_VAR 0 1
91315: ARRAY
91316: PUSH
91317: LD_VAR 0 2
91321: ARRAY
91322: PUSH
91323: LD_INT 2
91325: ARRAY
91326: PPUSH
91327: CALL_OW 458
91331: AND
91332: IFFALSE 91426
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
91334: LD_EXP 144
91338: PUSH
91339: LD_VAR 0 1
91343: ARRAY
91344: PUSH
91345: LD_VAR 0 2
91349: ARRAY
91350: PUSH
91351: LD_INT 1
91353: ARRAY
91354: PPUSH
91355: LD_EXP 144
91359: PUSH
91360: LD_VAR 0 1
91364: ARRAY
91365: PUSH
91366: LD_VAR 0 2
91370: ARRAY
91371: PUSH
91372: LD_INT 2
91374: ARRAY
91375: PPUSH
91376: LD_VAR 0 3
91380: PPUSH
91381: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
91385: LD_ADDR_EXP 144
91389: PUSH
91390: LD_EXP 144
91394: PPUSH
91395: LD_VAR 0 1
91399: PPUSH
91400: LD_EXP 144
91404: PUSH
91405: LD_VAR 0 1
91409: ARRAY
91410: PPUSH
91411: LD_VAR 0 2
91415: PPUSH
91416: CALL_OW 3
91420: PPUSH
91421: CALL_OW 1
91425: ST_TO_ADDR
// end ; end ;
91426: GO 91177
91428: POP
91429: POP
// end ;
91430: GO 91095
91432: POP
91433: POP
// end ;
91434: PPOPN 4
91436: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
91437: LD_INT 0
91439: PPUSH
91440: PPUSH
// result := false ;
91441: LD_ADDR_VAR 0 4
91445: PUSH
91446: LD_INT 0
91448: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
91449: LD_VAR 0 1
91453: PPUSH
91454: CALL_OW 264
91458: PUSH
91459: LD_INT 81
91461: EQUAL
91462: NOT
91463: IFFALSE 91467
// exit ;
91465: GO 91707
// index := GetElementIndex ( minersList , unit ) ;
91467: LD_ADDR_VAR 0 5
91471: PUSH
91472: LD_EXP 143
91476: PPUSH
91477: LD_VAR 0 1
91481: PPUSH
91482: CALL 34018 0 2
91486: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
91487: LD_EXP 144
91491: PUSH
91492: LD_VAR 0 5
91496: ARRAY
91497: PUSH
91498: LD_EXP 145
91502: GREATEREQUAL
91503: IFFALSE 91507
// exit ;
91505: GO 91707
// ComMoveXY ( unit , x , y ) ;
91507: LD_VAR 0 1
91511: PPUSH
91512: LD_VAR 0 2
91516: PPUSH
91517: LD_VAR 0 3
91521: PPUSH
91522: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
91526: LD_INT 35
91528: PPUSH
91529: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
91533: LD_VAR 0 1
91537: PPUSH
91538: LD_VAR 0 2
91542: PPUSH
91543: LD_VAR 0 3
91547: PPUSH
91548: CALL 65759 0 3
91552: NOT
91553: PUSH
91554: LD_VAR 0 1
91558: PPUSH
91559: CALL_OW 314
91563: AND
91564: IFFALSE 91568
// exit ;
91566: GO 91707
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
91568: LD_VAR 0 2
91572: PPUSH
91573: LD_VAR 0 3
91577: PPUSH
91578: CALL_OW 428
91582: PUSH
91583: LD_VAR 0 1
91587: EQUAL
91588: PUSH
91589: LD_VAR 0 1
91593: PPUSH
91594: CALL_OW 314
91598: NOT
91599: AND
91600: IFFALSE 91526
// PlaySoundXY ( x , y , PlantMine ) ;
91602: LD_VAR 0 2
91606: PPUSH
91607: LD_VAR 0 3
91611: PPUSH
91612: LD_STRING PlantMine
91614: PPUSH
91615: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
91619: LD_VAR 0 2
91623: PPUSH
91624: LD_VAR 0 3
91628: PPUSH
91629: LD_VAR 0 1
91633: PPUSH
91634: CALL_OW 255
91638: PPUSH
91639: LD_INT 0
91641: PPUSH
91642: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
91646: LD_ADDR_EXP 144
91650: PUSH
91651: LD_EXP 144
91655: PPUSH
91656: LD_VAR 0 5
91660: PUSH
91661: LD_EXP 144
91665: PUSH
91666: LD_VAR 0 5
91670: ARRAY
91671: PUSH
91672: LD_INT 1
91674: PLUS
91675: PUSH
91676: EMPTY
91677: LIST
91678: LIST
91679: PPUSH
91680: LD_VAR 0 2
91684: PUSH
91685: LD_VAR 0 3
91689: PUSH
91690: EMPTY
91691: LIST
91692: LIST
91693: PPUSH
91694: CALL 34233 0 3
91698: ST_TO_ADDR
// result := true ;
91699: LD_ADDR_VAR 0 4
91703: PUSH
91704: LD_INT 1
91706: ST_TO_ADDR
// end ;
91707: LD_VAR 0 4
91711: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
91712: LD_INT 0
91714: PPUSH
91715: PPUSH
91716: PPUSH
// if not unit in minersList then
91717: LD_VAR 0 1
91721: PUSH
91722: LD_EXP 143
91726: IN
91727: NOT
91728: IFFALSE 91732
// exit ;
91730: GO 92124
// index := GetElementIndex ( minersList , unit ) ;
91732: LD_ADDR_VAR 0 6
91736: PUSH
91737: LD_EXP 143
91741: PPUSH
91742: LD_VAR 0 1
91746: PPUSH
91747: CALL 34018 0 2
91751: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
91752: LD_ADDR_VAR 0 5
91756: PUSH
91757: DOUBLE
91758: LD_EXP 144
91762: PUSH
91763: LD_VAR 0 6
91767: ARRAY
91768: INC
91769: ST_TO_ADDR
91770: LD_INT 1
91772: PUSH
91773: FOR_DOWNTO
91774: IFFALSE 91935
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
91776: LD_EXP 144
91780: PUSH
91781: LD_VAR 0 6
91785: ARRAY
91786: PUSH
91787: LD_VAR 0 5
91791: ARRAY
91792: PUSH
91793: LD_INT 1
91795: ARRAY
91796: PUSH
91797: LD_VAR 0 2
91801: EQUAL
91802: PUSH
91803: LD_EXP 144
91807: PUSH
91808: LD_VAR 0 6
91812: ARRAY
91813: PUSH
91814: LD_VAR 0 5
91818: ARRAY
91819: PUSH
91820: LD_INT 2
91822: ARRAY
91823: PUSH
91824: LD_VAR 0 3
91828: EQUAL
91829: AND
91830: IFFALSE 91933
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
91832: LD_EXP 144
91836: PUSH
91837: LD_VAR 0 6
91841: ARRAY
91842: PUSH
91843: LD_VAR 0 5
91847: ARRAY
91848: PUSH
91849: LD_INT 1
91851: ARRAY
91852: PPUSH
91853: LD_EXP 144
91857: PUSH
91858: LD_VAR 0 6
91862: ARRAY
91863: PUSH
91864: LD_VAR 0 5
91868: ARRAY
91869: PUSH
91870: LD_INT 2
91872: ARRAY
91873: PPUSH
91874: LD_VAR 0 1
91878: PPUSH
91879: CALL_OW 255
91883: PPUSH
91884: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91888: LD_ADDR_EXP 144
91892: PUSH
91893: LD_EXP 144
91897: PPUSH
91898: LD_VAR 0 6
91902: PPUSH
91903: LD_EXP 144
91907: PUSH
91908: LD_VAR 0 6
91912: ARRAY
91913: PPUSH
91914: LD_VAR 0 5
91918: PPUSH
91919: CALL_OW 3
91923: PPUSH
91924: CALL_OW 1
91928: ST_TO_ADDR
// exit ;
91929: POP
91930: POP
91931: GO 92124
// end ; end ;
91933: GO 91773
91935: POP
91936: POP
// for i := minerMinesList [ index ] downto 1 do
91937: LD_ADDR_VAR 0 5
91941: PUSH
91942: DOUBLE
91943: LD_EXP 144
91947: PUSH
91948: LD_VAR 0 6
91952: ARRAY
91953: INC
91954: ST_TO_ADDR
91955: LD_INT 1
91957: PUSH
91958: FOR_DOWNTO
91959: IFFALSE 92122
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
91961: LD_EXP 144
91965: PUSH
91966: LD_VAR 0 6
91970: ARRAY
91971: PUSH
91972: LD_VAR 0 5
91976: ARRAY
91977: PUSH
91978: LD_INT 1
91980: ARRAY
91981: PPUSH
91982: LD_EXP 144
91986: PUSH
91987: LD_VAR 0 6
91991: ARRAY
91992: PUSH
91993: LD_VAR 0 5
91997: ARRAY
91998: PUSH
91999: LD_INT 2
92001: ARRAY
92002: PPUSH
92003: LD_VAR 0 2
92007: PPUSH
92008: LD_VAR 0 3
92012: PPUSH
92013: CALL_OW 298
92017: PUSH
92018: LD_INT 6
92020: LESS
92021: IFFALSE 92120
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92023: LD_EXP 144
92027: PUSH
92028: LD_VAR 0 6
92032: ARRAY
92033: PUSH
92034: LD_VAR 0 5
92038: ARRAY
92039: PUSH
92040: LD_INT 1
92042: ARRAY
92043: PPUSH
92044: LD_EXP 144
92048: PUSH
92049: LD_VAR 0 6
92053: ARRAY
92054: PUSH
92055: LD_VAR 0 5
92059: ARRAY
92060: PUSH
92061: LD_INT 2
92063: ARRAY
92064: PPUSH
92065: LD_VAR 0 1
92069: PPUSH
92070: CALL_OW 255
92074: PPUSH
92075: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92079: LD_ADDR_EXP 144
92083: PUSH
92084: LD_EXP 144
92088: PPUSH
92089: LD_VAR 0 6
92093: PPUSH
92094: LD_EXP 144
92098: PUSH
92099: LD_VAR 0 6
92103: ARRAY
92104: PPUSH
92105: LD_VAR 0 5
92109: PPUSH
92110: CALL_OW 3
92114: PPUSH
92115: CALL_OW 1
92119: ST_TO_ADDR
// end ; end ;
92120: GO 91958
92122: POP
92123: POP
// end ;
92124: LD_VAR 0 4
92128: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
92129: LD_INT 0
92131: PPUSH
92132: PPUSH
92133: PPUSH
92134: PPUSH
92135: PPUSH
92136: PPUSH
92137: PPUSH
92138: PPUSH
92139: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
92140: LD_VAR 0 1
92144: PPUSH
92145: CALL_OW 264
92149: PUSH
92150: LD_INT 81
92152: EQUAL
92153: NOT
92154: PUSH
92155: LD_VAR 0 1
92159: PUSH
92160: LD_EXP 143
92164: IN
92165: NOT
92166: OR
92167: IFFALSE 92171
// exit ;
92169: GO 92493
// index := GetElementIndex ( minersList , unit ) ;
92171: LD_ADDR_VAR 0 6
92175: PUSH
92176: LD_EXP 143
92180: PPUSH
92181: LD_VAR 0 1
92185: PPUSH
92186: CALL 34018 0 2
92190: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
92191: LD_ADDR_VAR 0 8
92195: PUSH
92196: LD_EXP 145
92200: PUSH
92201: LD_EXP 144
92205: PUSH
92206: LD_VAR 0 6
92210: ARRAY
92211: MINUS
92212: ST_TO_ADDR
// if not minesFreeAmount then
92213: LD_VAR 0 8
92217: NOT
92218: IFFALSE 92222
// exit ;
92220: GO 92493
// tmp := [ ] ;
92222: LD_ADDR_VAR 0 7
92226: PUSH
92227: EMPTY
92228: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
92229: LD_ADDR_VAR 0 5
92233: PUSH
92234: DOUBLE
92235: LD_INT 1
92237: DEC
92238: ST_TO_ADDR
92239: LD_VAR 0 8
92243: PUSH
92244: FOR_TO
92245: IFFALSE 92440
// begin _d := rand ( 0 , 5 ) ;
92247: LD_ADDR_VAR 0 11
92251: PUSH
92252: LD_INT 0
92254: PPUSH
92255: LD_INT 5
92257: PPUSH
92258: CALL_OW 12
92262: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
92263: LD_ADDR_VAR 0 12
92267: PUSH
92268: LD_INT 2
92270: PPUSH
92271: LD_INT 6
92273: PPUSH
92274: CALL_OW 12
92278: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
92279: LD_ADDR_VAR 0 9
92283: PUSH
92284: LD_VAR 0 2
92288: PPUSH
92289: LD_VAR 0 11
92293: PPUSH
92294: LD_VAR 0 12
92298: PPUSH
92299: CALL_OW 272
92303: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
92304: LD_ADDR_VAR 0 10
92308: PUSH
92309: LD_VAR 0 3
92313: PPUSH
92314: LD_VAR 0 11
92318: PPUSH
92319: LD_VAR 0 12
92323: PPUSH
92324: CALL_OW 273
92328: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
92329: LD_VAR 0 9
92333: PPUSH
92334: LD_VAR 0 10
92338: PPUSH
92339: CALL_OW 488
92343: PUSH
92344: LD_VAR 0 9
92348: PUSH
92349: LD_VAR 0 10
92353: PUSH
92354: EMPTY
92355: LIST
92356: LIST
92357: PUSH
92358: LD_VAR 0 7
92362: IN
92363: NOT
92364: AND
92365: PUSH
92366: LD_VAR 0 9
92370: PPUSH
92371: LD_VAR 0 10
92375: PPUSH
92376: CALL_OW 458
92380: NOT
92381: AND
92382: IFFALSE 92424
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
92384: LD_ADDR_VAR 0 7
92388: PUSH
92389: LD_VAR 0 7
92393: PPUSH
92394: LD_VAR 0 7
92398: PUSH
92399: LD_INT 1
92401: PLUS
92402: PPUSH
92403: LD_VAR 0 9
92407: PUSH
92408: LD_VAR 0 10
92412: PUSH
92413: EMPTY
92414: LIST
92415: LIST
92416: PPUSH
92417: CALL_OW 1
92421: ST_TO_ADDR
92422: GO 92438
// i := i - 1 ;
92424: LD_ADDR_VAR 0 5
92428: PUSH
92429: LD_VAR 0 5
92433: PUSH
92434: LD_INT 1
92436: MINUS
92437: ST_TO_ADDR
// end ;
92438: GO 92244
92440: POP
92441: POP
// for i in tmp do
92442: LD_ADDR_VAR 0 5
92446: PUSH
92447: LD_VAR 0 7
92451: PUSH
92452: FOR_IN
92453: IFFALSE 92491
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
92455: LD_VAR 0 1
92459: PPUSH
92460: LD_VAR 0 5
92464: PUSH
92465: LD_INT 1
92467: ARRAY
92468: PPUSH
92469: LD_VAR 0 5
92473: PUSH
92474: LD_INT 2
92476: ARRAY
92477: PPUSH
92478: CALL 91437 0 3
92482: NOT
92483: IFFALSE 92489
// exit ;
92485: POP
92486: POP
92487: GO 92493
92489: GO 92452
92491: POP
92492: POP
// end ;
92493: LD_VAR 0 4
92497: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
92498: LD_INT 0
92500: PPUSH
92501: PPUSH
92502: PPUSH
92503: PPUSH
92504: PPUSH
92505: PPUSH
92506: PPUSH
// if not GetClass ( unit ) = class_sniper then
92507: LD_VAR 0 1
92511: PPUSH
92512: CALL_OW 257
92516: PUSH
92517: LD_INT 5
92519: EQUAL
92520: NOT
92521: IFFALSE 92525
// exit ;
92523: GO 92913
// dist := 8 ;
92525: LD_ADDR_VAR 0 5
92529: PUSH
92530: LD_INT 8
92532: ST_TO_ADDR
// viewRange := 12 ;
92533: LD_ADDR_VAR 0 7
92537: PUSH
92538: LD_INT 12
92540: ST_TO_ADDR
// side := GetSide ( unit ) ;
92541: LD_ADDR_VAR 0 6
92545: PUSH
92546: LD_VAR 0 1
92550: PPUSH
92551: CALL_OW 255
92555: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
92556: LD_INT 61
92558: PPUSH
92559: LD_VAR 0 6
92563: PPUSH
92564: CALL_OW 321
92568: PUSH
92569: LD_INT 2
92571: EQUAL
92572: IFFALSE 92582
// viewRange := 16 ;
92574: LD_ADDR_VAR 0 7
92578: PUSH
92579: LD_INT 16
92581: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
92582: LD_VAR 0 1
92586: PPUSH
92587: LD_VAR 0 2
92591: PPUSH
92592: LD_VAR 0 3
92596: PPUSH
92597: CALL_OW 297
92601: PUSH
92602: LD_VAR 0 5
92606: GREATER
92607: IFFALSE 92686
// begin ComMoveXY ( unit , x , y ) ;
92609: LD_VAR 0 1
92613: PPUSH
92614: LD_VAR 0 2
92618: PPUSH
92619: LD_VAR 0 3
92623: PPUSH
92624: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92628: LD_INT 35
92630: PPUSH
92631: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
92635: LD_VAR 0 1
92639: PPUSH
92640: LD_VAR 0 2
92644: PPUSH
92645: LD_VAR 0 3
92649: PPUSH
92650: CALL 65759 0 3
92654: NOT
92655: IFFALSE 92659
// exit ;
92657: GO 92913
// until GetDistUnitXY ( unit , x , y ) < dist ;
92659: LD_VAR 0 1
92663: PPUSH
92664: LD_VAR 0 2
92668: PPUSH
92669: LD_VAR 0 3
92673: PPUSH
92674: CALL_OW 297
92678: PUSH
92679: LD_VAR 0 5
92683: LESS
92684: IFFALSE 92628
// end ; ComTurnXY ( unit , x , y ) ;
92686: LD_VAR 0 1
92690: PPUSH
92691: LD_VAR 0 2
92695: PPUSH
92696: LD_VAR 0 3
92700: PPUSH
92701: CALL_OW 118
// wait ( 5 ) ;
92705: LD_INT 5
92707: PPUSH
92708: CALL_OW 67
// _d := GetDir ( unit ) ;
92712: LD_ADDR_VAR 0 10
92716: PUSH
92717: LD_VAR 0 1
92721: PPUSH
92722: CALL_OW 254
92726: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
92727: LD_ADDR_VAR 0 8
92731: PUSH
92732: LD_VAR 0 1
92736: PPUSH
92737: CALL_OW 250
92741: PPUSH
92742: LD_VAR 0 10
92746: PPUSH
92747: LD_VAR 0 5
92751: PPUSH
92752: CALL_OW 272
92756: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
92757: LD_ADDR_VAR 0 9
92761: PUSH
92762: LD_VAR 0 1
92766: PPUSH
92767: CALL_OW 251
92771: PPUSH
92772: LD_VAR 0 10
92776: PPUSH
92777: LD_VAR 0 5
92781: PPUSH
92782: CALL_OW 273
92786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
92787: LD_VAR 0 8
92791: PPUSH
92792: LD_VAR 0 9
92796: PPUSH
92797: CALL_OW 488
92801: NOT
92802: IFFALSE 92806
// exit ;
92804: GO 92913
// ComAnimCustom ( unit , 1 ) ;
92806: LD_VAR 0 1
92810: PPUSH
92811: LD_INT 1
92813: PPUSH
92814: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
92818: LD_VAR 0 8
92822: PPUSH
92823: LD_VAR 0 9
92827: PPUSH
92828: LD_VAR 0 6
92832: PPUSH
92833: LD_VAR 0 7
92837: PPUSH
92838: CALL_OW 330
// repeat wait ( 1 ) ;
92842: LD_INT 1
92844: PPUSH
92845: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
92849: LD_VAR 0 1
92853: PPUSH
92854: CALL_OW 316
92858: PUSH
92859: LD_VAR 0 1
92863: PPUSH
92864: CALL_OW 314
92868: OR
92869: PUSH
92870: LD_VAR 0 1
92874: PPUSH
92875: CALL_OW 302
92879: NOT
92880: OR
92881: PUSH
92882: LD_VAR 0 1
92886: PPUSH
92887: CALL_OW 301
92891: OR
92892: IFFALSE 92842
// RemoveSeeing ( _x , _y , side ) ;
92894: LD_VAR 0 8
92898: PPUSH
92899: LD_VAR 0 9
92903: PPUSH
92904: LD_VAR 0 6
92908: PPUSH
92909: CALL_OW 331
// end ; end_of_file
92913: LD_VAR 0 4
92917: RET
// export function StopOriginalMusic ; begin
92918: LD_INT 0
92920: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
92921: LD_STRING OW_FORCEMUSICDISABLE(true);
92923: PPUSH
92924: CALL_OW 559
// end ;
92928: LD_VAR 0 1
92932: RET
// export function PlayOriginalMusic ; begin
92933: LD_INT 0
92935: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
92936: LD_STRING OW_FORCEMUSICDISABLE(false);
92938: PPUSH
92939: CALL_OW 559
// end ;
92943: LD_VAR 0 1
92947: RET
// export function PlayCustomMusic ( track , callback ) ; begin
92948: LD_INT 0
92950: PPUSH
// StopOriginalMusic ;
92951: CALL 92918 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
92955: LD_STRING playMusic("
92957: PUSH
92958: LD_VAR 0 1
92962: STR
92963: PUSH
92964: LD_STRING ", "
92966: STR
92967: PUSH
92968: LD_VAR 0 2
92972: STR
92973: PUSH
92974: LD_STRING ")
92976: STR
92977: PPUSH
92978: CALL_OW 559
// end ;
92982: LD_VAR 0 3
92986: RET
