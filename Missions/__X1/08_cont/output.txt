// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20319 0 0
// PrepareRussian ;
  12: CALL 2018 0 0
// PrepareArabian ;
  16: CALL 438 0 0
// Action ;
  20: CALL 3761 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// enable ( entranceEvent ) ;
 427: LD_INT 1
 429: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 430: LD_INT 2
 432: DISABLE_MARKED
// end ; end_of_file
 433: LD_VAR 0 1
 437: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side := 4 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 4
 449: ST_TO_ADDR
// uc_nation := 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 458: LD_ADDR_EXP 57
 462: PUSH
 463: LD_STRING 07_Americans
 465: PPUSH
 466: CALL_OW 31
 470: ST_TO_ADDR
// if americanSquad < 5 then
 471: LD_EXP 57
 475: PUSH
 476: LD_INT 5
 478: LESS
 479: IFFALSE 573
// begin if not americanSquad then
 481: LD_EXP 57
 485: NOT
 486: IFFALSE 495
// americanSquad := [ ] ;
 488: LD_ADDR_EXP 57
 492: PUSH
 493: EMPTY
 494: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 495: LD_ADDR_VAR 0 2
 499: PUSH
 500: DOUBLE
 501: LD_EXP 57
 505: DEC
 506: ST_TO_ADDR
 507: LD_INT 2
 509: PUSH
 510: LD_INT 3
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 4
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PUSH
 531: FOR_TO
 532: IFFALSE 569
// begin PrepareHuman ( false , 2 , 6 ) ;
 534: LD_INT 0
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 6
 542: PPUSH
 543: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 547: LD_ADDR_EXP 57
 551: PUSH
 552: LD_EXP 57
 556: PPUSH
 557: CALL_OW 44
 561: PPUSH
 562: CALL 66596 0 2
 566: ST_TO_ADDR
// end ;
 567: GO 531
 569: POP
 570: POP
// end else
 571: GO 620
// for i := Count ( americanSquad ) downto 5 do
 573: LD_ADDR_VAR 0 2
 577: PUSH
 578: DOUBLE
 579: LD_EXP 57
 583: PPUSH
 584: CALL 30996 0 1
 588: INC
 589: ST_TO_ADDR
 590: LD_INT 5
 592: PUSH
 593: FOR_DOWNTO
 594: IFFALSE 618
// americanSquad := Delete ( americanSquad , i ) ;
 596: LD_ADDR_EXP 57
 600: PUSH
 601: LD_EXP 57
 605: PPUSH
 606: LD_VAR 0 2
 610: PPUSH
 611: CALL_OW 3
 615: ST_TO_ADDR
 616: GO 593
 618: POP
 619: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 620: LD_ADDR_EXP 59
 624: PUSH
 625: LD_STRING UsCommander
 627: PPUSH
 628: LD_EXP 1
 632: NOT
 633: PPUSH
 634: LD_STRING 07_
 636: PPUSH
 637: CALL 28894 0 3
 641: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 642: LD_INT 1
 644: PPUSH
 645: LD_INT 6
 647: PPUSH
 648: CALL_OW 381
// Jerry := CreateHuman ;
 652: LD_ADDR_EXP 60
 656: PUSH
 657: CALL_OW 44
 661: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 662: LD_EXP 60
 666: PPUSH
 667: LD_INT 33
 669: PPUSH
 670: CALL_OW 336
// if not Doug then
 674: LD_EXP 59
 678: NOT
 679: IFFALSE 701
// begin PrepareSoldier ( sex_male , 6 ) ;
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 6
 686: PPUSH
 687: CALL_OW 381
// Doug := CreateHuman ;
 691: LD_ADDR_EXP 59
 695: PUSH
 696: CALL_OW 44
 700: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 701: LD_EXP 59
 705: PPUSH
 706: LD_INT 33
 708: PPUSH
 709: CALL_OW 336
// if johnnySaved or debug then
 713: LD_EXP 3
 717: PUSH
 718: LD_EXP 1
 722: OR
 723: IFFALSE 750
// begin Harris := NewCharacter ( Harris ) ;
 725: LD_ADDR_EXP 58
 729: PUSH
 730: LD_STRING Harris
 732: PPUSH
 733: CALL_OW 25
 737: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 738: LD_EXP 58
 742: PPUSH
 743: LD_INT 33
 745: PPUSH
 746: CALL_OW 336
// end ; uc_side := 2 ;
 750: LD_ADDR_OWVAR 20
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// uc_nation := 2 ;
 758: LD_ADDR_OWVAR 21
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 766: LD_ADDR_EXP 45
 770: PUSH
 771: LD_STRING Heike
 773: PPUSH
 774: LD_EXP 1
 778: NOT
 779: PPUSH
 780: LD_EXP 2
 784: PPUSH
 785: CALL 28894 0 3
 789: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 790: LD_ADDR_EXP 48
 794: PUSH
 795: LD_STRING Ibrahim
 797: PPUSH
 798: LD_EXP 1
 802: NOT
 803: PPUSH
 804: LD_EXP 2
 808: PPUSH
 809: CALL 28894 0 3
 813: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 814: LD_ADDR_EXP 46
 818: PUSH
 819: LD_STRING Givi
 821: PPUSH
 822: LD_EXP 1
 826: NOT
 827: PPUSH
 828: LD_EXP 2
 832: PPUSH
 833: CALL 28894 0 3
 837: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING Kamil
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 2
 856: PPUSH
 857: CALL 28894 0 3
 861: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 862: LD_ADDR_EXP 50
 866: PUSH
 867: LD_STRING Kaia
 869: PPUSH
 870: LD_EXP 1
 874: NOT
 875: PPUSH
 876: LD_EXP 2
 880: PPUSH
 881: CALL 28894 0 3
 885: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 886: LD_ADDR_EXP 51
 890: PUSH
 891: LD_STRING Sophia
 893: PPUSH
 894: LD_EXP 1
 898: NOT
 899: PPUSH
 900: LD_EXP 2
 904: PPUSH
 905: CALL 28894 0 3
 909: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 910: LD_ADDR_EXP 52
 914: PUSH
 915: LD_STRING Markov
 917: PPUSH
 918: LD_EXP 1
 922: NOT
 923: PPUSH
 924: LD_EXP 2
 928: PPUSH
 929: CALL 28894 0 3
 933: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 934: LD_ADDR_EXP 55
 938: PUSH
 939: LD_STRING Aviradze
 941: PPUSH
 942: LD_EXP 1
 946: NOT
 947: PPUSH
 948: LD_EXP 2
 952: PPUSH
 953: CALL 28894 0 3
 957: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 958: LD_ADDR_EXP 54
 962: PUSH
 963: LD_STRING Kurt
 965: PPUSH
 966: LD_EXP 1
 970: NOT
 971: PPUSH
 972: LD_EXP 2
 976: PPUSH
 977: CALL 28894 0 3
 981: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 982: LD_ADDR_EXP 47
 986: PUSH
 987: LD_STRING Mike
 989: PPUSH
 990: LD_EXP 1
 994: NOT
 995: PPUSH
 996: LD_EXP 2
1000: PPUSH
1001: CALL 28894 0 3
1005: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1006: LD_ADDR_EXP 53
1010: PUSH
1011: LD_STRING Olaf
1013: PPUSH
1014: LD_EXP 1
1018: NOT
1019: PPUSH
1020: LD_EXP 2
1024: PPUSH
1025: CALL 28894 0 3
1029: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1030: LD_ADDR_EXP 56
1034: PUSH
1035: LD_STRING 07_others
1037: PPUSH
1038: CALL_OW 31
1042: ST_TO_ADDR
// end ;
1043: LD_VAR 0 1
1047: RET
// export function PrepareGame ; var i ; begin
1048: LD_INT 0
1050: PPUSH
1051: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1052: LD_EXP 45
1056: PPUSH
1057: LD_INT 23
1059: PPUSH
1060: CALL_OW 52
// if Givi then
1064: LD_EXP 46
1068: IFFALSE 1106
// begin SetSide ( Givi , 5 ) ;
1070: LD_EXP 46
1074: PPUSH
1075: LD_INT 5
1077: PPUSH
1078: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1082: LD_EXP 46
1086: PPUSH
1087: LD_INT 9
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// ComHold ( Givi ) ;
1097: LD_EXP 46
1101: PPUSH
1102: CALL_OW 140
// end ; if Markov then
1106: LD_EXP 52
1110: IFFALSE 1148
// begin SetSide ( Markov , 5 ) ;
1112: LD_EXP 52
1116: PPUSH
1117: LD_INT 5
1119: PPUSH
1120: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1124: LD_EXP 52
1128: PPUSH
1129: LD_INT 3
1131: PPUSH
1132: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1136: LD_EXP 52
1140: PPUSH
1141: LD_INT 61
1143: PPUSH
1144: CALL_OW 52
// end ; if Mike then
1148: LD_EXP 47
1152: IFFALSE 1190
// begin SetSide ( Mike , 5 ) ;
1154: LD_EXP 47
1158: PPUSH
1159: LD_INT 5
1161: PPUSH
1162: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1166: LD_EXP 47
1170: PPUSH
1171: LD_INT 17
1173: PPUSH
1174: LD_INT 0
1176: PPUSH
1177: CALL_OW 49
// ComHold ( Mike ) ;
1181: LD_EXP 47
1185: PPUSH
1186: CALL_OW 140
// end ; if Olaf then
1190: LD_EXP 53
1194: IFFALSE 1235
// begin SetSide ( Olaf , 5 ) ;
1196: LD_EXP 53
1200: PPUSH
1201: LD_INT 5
1203: PPUSH
1204: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1208: LD_EXP 53
1212: PPUSH
1213: LD_INT 16
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1223: LD_EXP 53
1227: PPUSH
1228: LD_INT 3
1230: PPUSH
1231: CALL 69748 0 2
// end ; if Kamil then
1235: LD_EXP 49
1239: IFFALSE 1265
// begin SetSide ( Kamil , 5 ) ;
1241: LD_EXP 49
1245: PPUSH
1246: LD_INT 5
1248: PPUSH
1249: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1253: LD_EXP 49
1257: PPUSH
1258: LD_INT 109
1260: PPUSH
1261: CALL_OW 52
// end ; if Kurt then
1265: LD_EXP 54
1269: IFFALSE 1295
// begin SetSide ( Kurt , 5 ) ;
1271: LD_EXP 54
1275: PPUSH
1276: LD_INT 5
1278: PPUSH
1279: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1283: LD_EXP 54
1287: PPUSH
1288: LD_INT 169
1290: PPUSH
1291: CALL_OW 52
// end ; if Kaia then
1295: LD_EXP 50
1299: IFFALSE 1325
// begin SetSide ( Kaia , 5 ) ;
1301: LD_EXP 50
1305: PPUSH
1306: LD_INT 5
1308: PPUSH
1309: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1313: LD_EXP 50
1317: PPUSH
1318: LD_INT 147
1320: PPUSH
1321: CALL_OW 52
// end ; if Sophia then
1325: LD_EXP 51
1329: IFFALSE 1370
// begin SetSide ( Sophia , 5 ) ;
1331: LD_EXP 51
1335: PPUSH
1336: LD_INT 5
1338: PPUSH
1339: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1343: LD_EXP 51
1347: PPUSH
1348: LD_INT 142
1350: PPUSH
1351: LD_INT 96
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 48
// ComHold ( Sophia ) ;
1361: LD_EXP 51
1365: PPUSH
1366: CALL_OW 140
// end ; if Harris then
1370: LD_EXP 58
1374: IFFALSE 1412
// begin SetSide ( Harris , 4 ) ;
1376: LD_EXP 58
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1388: LD_EXP 58
1392: PPUSH
1393: LD_INT 20
1395: PPUSH
1396: LD_INT 0
1398: PPUSH
1399: CALL_OW 49
// ComHold ( i ) ;
1403: LD_VAR 0 2
1407: PPUSH
1408: CALL_OW 140
// end ; if Doug then
1412: LD_EXP 59
1416: IFFALSE 1442
// begin SetSide ( Doug , 4 ) ;
1418: LD_EXP 59
1422: PPUSH
1423: LD_INT 4
1425: PPUSH
1426: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1430: LD_EXP 59
1434: PPUSH
1435: LD_INT 106
1437: PPUSH
1438: CALL_OW 52
// end ; if Aviradze then
1442: LD_EXP 55
1446: IFFALSE 1472
// begin SetSide ( Aviradze , 5 ) ;
1448: LD_EXP 55
1452: PPUSH
1453: LD_INT 5
1455: PPUSH
1456: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1460: LD_EXP 55
1464: PPUSH
1465: LD_INT 119
1467: PPUSH
1468: CALL_OW 52
// end ; if Ibrahim then
1472: LD_EXP 48
1476: IFFALSE 1502
// begin SetSide ( Ibrahim , 5 ) ;
1478: LD_EXP 48
1482: PPUSH
1483: LD_INT 5
1485: PPUSH
1486: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1490: LD_EXP 48
1494: PPUSH
1495: LD_INT 119
1497: PPUSH
1498: CALL_OW 52
// end ; if Jerry then
1502: LD_EXP 60
1506: IFFALSE 1547
// begin SetSide ( Jerry , 4 ) ;
1508: LD_EXP 60
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1520: LD_EXP 60
1524: PPUSH
1525: LD_INT 119
1527: PPUSH
1528: LD_INT 59
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 48
// ComHold ( Jerry ) ;
1538: LD_EXP 60
1542: PPUSH
1543: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1547: LD_EXP 64
1551: PPUSH
1552: LD_INT 119
1554: PPUSH
1555: CALL_OW 52
// for i in americanSquad do
1559: LD_ADDR_VAR 0 2
1563: PUSH
1564: LD_EXP 57
1568: PUSH
1569: FOR_IN
1570: IFFALSE 1598
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 21
1579: PPUSH
1580: LD_INT 0
1582: PPUSH
1583: CALL_OW 49
// ComHold ( i ) ;
1587: LD_VAR 0 2
1591: PPUSH
1592: CALL_OW 140
// end ;
1596: GO 1569
1598: POP
1599: POP
// for i in heikeSecondSquad do
1600: LD_ADDR_VAR 0 2
1604: PUSH
1605: LD_EXP 56
1609: PUSH
1610: FOR_IN
1611: IFFALSE 1651
// begin SetSide ( i , 5 ) ;
1613: LD_VAR 0 2
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1625: LD_VAR 0 2
1629: PPUSH
1630: LD_INT 22
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// ComHold ( i ) ;
1640: LD_VAR 0 2
1644: PPUSH
1645: CALL_OW 140
// end ;
1649: GO 1610
1651: POP
1652: POP
// if not hasVodka then
1653: LD_EXP 4
1657: NOT
1658: IFFALSE 1717
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1660: LD_ADDR_VAR 0 2
1664: PUSH
1665: LD_INT 2
1667: PUSH
1668: LD_INT 22
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 22
1680: PUSH
1681: LD_INT 5
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL_OW 69
1697: PUSH
1698: FOR_IN
1699: IFFALSE 1715
// SetLives ( i , 500 ) ;
1701: LD_VAR 0 2
1705: PPUSH
1706: LD_INT 500
1708: PPUSH
1709: CALL_OW 234
1713: GO 1698
1715: POP
1716: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: LD_INT 22
1724: PUSH
1725: LD_INT 4
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: FOR_IN
1738: IFFALSE 1754
// SetLives ( i , 500 ) ;
1740: LD_VAR 0 2
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: CALL_OW 234
1752: GO 1737
1754: POP
1755: POP
// end ;
1756: LD_VAR 0 1
1760: RET
// export function SetClassKaiaRevolver ; begin
1761: LD_INT 0
1763: PPUSH
// if not IsOk ( Kaia ) then
1764: LD_EXP 50
1768: PPUSH
1769: CALL_OW 302
1773: NOT
1774: IFFALSE 1778
// exit ;
1776: GO 1797
// SetClass ( Kaia , class_revolver ) ;
1778: LD_EXP 50
1782: PPUSH
1783: LD_INT 34
1785: PPUSH
1786: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1790: LD_STRING ACH_REVOLVER
1792: PPUSH
1793: CALL_OW 543
// end ;
1797: LD_VAR 0 1
1801: RET
// export function SpawnHeikeAsRussian ; begin
1802: LD_INT 0
1804: PPUSH
// RemoveUnit ( Heike ) ;
1805: LD_EXP 45
1809: PPUSH
1810: CALL_OW 64
// heikeTmp := Heike ;
1814: LD_ADDR_EXP 61
1818: PUSH
1819: LD_EXP 45
1823: ST_TO_ADDR
// uc_side := 2 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 2
1831: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1832: LD_ADDR_EXP 45
1836: PUSH
1837: LD_STRING HeikeRu
1839: PPUSH
1840: CALL_OW 25
1844: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1845: LD_EXP 61
1849: PPUSH
1850: LD_EXP 45
1854: PPUSH
1855: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1859: LD_EXP 45
1863: PPUSH
1864: LD_INT 165
1866: PPUSH
1867: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1871: LD_EXP 45
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 336
// heikeAsRussian := true ;
1883: LD_ADDR_EXP 27
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1891: LD_STRING M1-laundry-out
1893: PPUSH
1894: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1898: LD_STRING ACH_HEIKERU
1900: PPUSH
1901: CALL_OW 543
// end ;
1905: LD_VAR 0 1
1909: RET
// export function SpawnGiviAsRussian ; begin
1910: LD_INT 0
1912: PPUSH
// RemoveUnit ( Givi ) ;
1913: LD_EXP 46
1917: PPUSH
1918: CALL_OW 64
// giviTmp := Givi ;
1922: LD_ADDR_EXP 62
1926: PUSH
1927: LD_EXP 46
1931: ST_TO_ADDR
// uc_side := 2 ;
1932: LD_ADDR_OWVAR 20
1936: PUSH
1937: LD_INT 2
1939: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1940: LD_ADDR_EXP 46
1944: PUSH
1945: LD_STRING GiviRu
1947: PPUSH
1948: CALL_OW 25
1952: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1953: LD_EXP 62
1957: PPUSH
1958: LD_EXP 46
1962: PPUSH
1963: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1967: LD_EXP 46
1971: PPUSH
1972: LD_INT 165
1974: PPUSH
1975: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1979: LD_EXP 46
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: CALL_OW 336
// giviAsRussian := true ;
1991: LD_ADDR_EXP 28
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1999: LD_STRING M1-laundry-out
2001: PPUSH
2002: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2006: LD_STRING ACH_GIVIRU
2008: PPUSH
2009: CALL_OW 543
// end ; end_of_file
2013: LD_VAR 0 1
2017: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2018: LD_INT 0
2020: PPUSH
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
// uc_side := 3 ;
2025: LD_ADDR_OWVAR 20
2029: PUSH
2030: LD_INT 3
2032: ST_TO_ADDR
// uc_nation := 3 ;
2033: LD_ADDR_OWVAR 21
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2041: LD_INT 192
2043: PPUSH
2044: LD_STRING kitchen
2046: PPUSH
2047: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2051: LD_INT 165
2053: PPUSH
2054: LD_STRING laundry
2056: PPUSH
2057: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2061: LD_INT 54
2063: PPUSH
2064: LD_STRING adminSection
2066: PPUSH
2067: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 3
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2108
// SetBLevel ( i , 7 ) ;
2094: LD_VAR 0 2
2098: PPUSH
2099: LD_INT 7
2101: PPUSH
2102: CALL_OW 241
2106: GO 2091
2108: POP
2109: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2110: LD_ADDR_VAR 0 2
2114: PUSH
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 2
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 30
2140: PUSH
2141: LD_INT 1
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL_OW 69
2161: PUSH
2162: FOR_IN
2163: IFFALSE 2227
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2165: LD_VAR 0 2
2169: PPUSH
2170: CALL_OW 274
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 1000
2180: PPUSH
2181: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2185: LD_VAR 0 2
2189: PPUSH
2190: CALL_OW 274
2194: PPUSH
2195: LD_INT 2
2197: PPUSH
2198: LD_INT 1000
2200: PPUSH
2201: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: CALL_OW 274
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 100
2220: PPUSH
2221: CALL_OW 277
// end ;
2225: GO 2162
2227: POP
2228: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2229: LD_ADDR_VAR 0 2
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 3
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 30
2246: PUSH
2247: LD_INT 32
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 69
2262: PUSH
2263: FOR_IN
2264: IFFALSE 2298
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2266: LD_INT 0
2268: PPUSH
2269: LD_INT 5
2271: PUSH
2272: LD_OWVAR 67
2276: PLUS
2277: PPUSH
2278: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2282: CALL_OW 44
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: CALL_OW 52
// end ;
2296: GO 2263
2298: POP
2299: POP
// for i := 1 to 2 do
2300: LD_ADDR_VAR 0 2
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 2
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2366
// begin PrepareMechanic ( false , 8 ) ;
2316: LD_INT 0
2318: PPUSH
2319: LD_INT 8
2321: PPUSH
2322: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2326: LD_ADDR_EXP 66
2330: PUSH
2331: LD_EXP 66
2335: PPUSH
2336: CALL_OW 44
2340: PPUSH
2341: CALL 66596 0 2
2345: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2346: LD_EXP 66
2350: PUSH
2351: LD_EXP 66
2355: ARRAY
2356: PPUSH
2357: LD_INT 61
2359: PPUSH
2360: CALL_OW 52
// end ;
2364: GO 2313
2366: POP
2367: POP
// PrepareMechanic ( sex_male , 8 ) ;
2368: LD_INT 1
2370: PPUSH
2371: LD_INT 8
2373: PPUSH
2374: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2378: LD_ADDR_EXP 67
2382: PUSH
2383: LD_EXP 67
2387: PPUSH
2388: CALL_OW 44
2392: PPUSH
2393: CALL 66596 0 2
2397: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2398: LD_EXP 67
2402: PUSH
2403: LD_EXP 67
2407: ARRAY
2408: PPUSH
2409: LD_INT 196
2411: PPUSH
2412: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 383
// hc_name := Stiepan Simonov ;
2426: LD_ADDR_OWVAR 26
2430: PUSH
2431: LD_STRING Stiepan Simonov
2433: ST_TO_ADDR
// Stiopa := CreateHuman ;
2434: LD_ADDR_EXP 68
2438: PUSH
2439: CALL_OW 44
2443: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2444: LD_INT 2
2446: PPUSH
2447: LD_INT 8
2449: PPUSH
2450: CALL_OW 383
// hc_name := Laura Dragunov ;
2454: LD_ADDR_OWVAR 26
2458: PUSH
2459: LD_STRING Laura Dragunov
2461: ST_TO_ADDR
// Laura := CreateHuman ;
2462: LD_ADDR_EXP 69
2466: PUSH
2467: CALL_OW 44
2471: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2472: LD_EXP 69
2476: PPUSH
2477: LD_INT 196
2479: PPUSH
2480: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 8
2489: PPUSH
2490: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2494: LD_ADDR_EXP 66
2498: PUSH
2499: LD_EXP 66
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 44
2511: PPUSH
2512: CALL_OW 2
2516: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2517: LD_EXP 66
2521: PUSH
2522: LD_INT 1
2524: ARRAY
2525: PPUSH
2526: LD_INT 61
2528: PPUSH
2529: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 8
2538: PPUSH
2539: CALL_OW 381
// hc_name := Pavel Muchin ;
2543: LD_ADDR_OWVAR 26
2547: PUSH
2548: LD_STRING Pavel Muchin
2550: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2551: LD_ADDR_OWVAR 29
2555: PUSH
2556: LD_INT 13
2558: PUSH
2559: LD_INT 13
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2566: LD_ADDR_EXP 65
2570: PUSH
2571: CALL_OW 44
2575: ST_TO_ADDR
// InitHC_All ( ) ;
2576: CALL_OW 584
// if Difficulty > 1 then
2580: LD_OWVAR 67
2584: PUSH
2585: LD_INT 1
2587: GREATER
2588: IFFALSE 2708
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 3
2602: PUSH
2603: LD_INT 4
2605: PUSH
2606: LD_INT 5
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: PUSH
2614: LD_OWVAR 67
2618: PUSH
2619: LD_INT 1
2621: PLUS
2622: ARRAY
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2706
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2627: LD_INT 0
2629: PPUSH
2630: LD_INT 5
2632: PUSH
2633: LD_INT 6
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: PUSH
2644: LD_OWVAR 67
2648: PUSH
2649: LD_INT 1
2651: PLUS
2652: ARRAY
2653: PPUSH
2654: CALL_OW 381
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 62
2675: PUSH
2676: LD_INT 63
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 2
2690: MOD
2691: PUSH
2692: LD_INT 1
2694: PLUS
2695: ARRAY
2696: PPUSH
2697: LD_INT 0
2699: PPUSH
2700: CALL_OW 49
// end ;
2704: GO 2624
2706: POP
2707: POP
// end ; uc_side := 6 ;
2708: LD_ADDR_OWVAR 20
2712: PUSH
2713: LD_INT 6
2715: ST_TO_ADDR
// uc_nation := 3 ;
2716: LD_ADDR_OWVAR 21
2720: PUSH
2721: LD_INT 3
2723: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2724: LD_ADDR_VAR 0 5
2728: PUSH
2729: LD_INT 14
2731: PUSH
2732: LD_INT 15
2734: PUSH
2735: LD_INT 48
2737: PUSH
2738: LD_INT 24
2740: PUSH
2741: LD_INT 149
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// for i in tmp do
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: PUSH
2761: FOR_IN
2762: IFFALSE 2810
// begin for j := 1 to 2 do
2764: LD_ADDR_VAR 0 3
2768: PUSH
2769: DOUBLE
2770: LD_INT 1
2772: DEC
2773: ST_TO_ADDR
2774: LD_INT 2
2776: PUSH
2777: FOR_TO
2778: IFFALSE 2806
// begin PrepareSoldier ( false , 7 ) ;
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 7
2785: PPUSH
2786: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2790: CALL_OW 44
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// end ;
2804: GO 2777
2806: POP
2807: POP
// end ;
2808: GO 2761
2810: POP
2811: POP
// end ;
2812: LD_VAR 0 1
2816: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2817: LD_INT 0
2819: PPUSH
2820: PPUSH
2821: PPUSH
2822: PPUSH
// uc_side := 3 ;
2823: LD_ADDR_OWVAR 20
2827: PUSH
2828: LD_INT 3
2830: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2831: LD_ADDR_OWVAR 21
2835: PUSH
2836: LD_INT 1
2838: PPUSH
2839: LD_INT 3
2841: PPUSH
2842: CALL_OW 12
2846: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2847: LD_ADDR_VAR 0 4
2851: PUSH
2852: LD_INT 5
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 517
2862: ST_TO_ADDR
// for i := 1 to 3 do
2863: LD_ADDR_VAR 0 2
2867: PUSH
2868: DOUBLE
2869: LD_INT 1
2871: DEC
2872: ST_TO_ADDR
2873: LD_INT 3
2875: PUSH
2876: FOR_TO
2877: IFFALSE 2946
// begin PrepareHuman ( false , 33 , 0 ) ;
2879: LD_INT 0
2881: PPUSH
2882: LD_INT 33
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 380
// un := CreateHuman ;
2892: LD_ADDR_VAR 0 3
2896: PUSH
2897: CALL_OW 44
2901: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2902: LD_VAR 0 3
2906: PPUSH
2907: LD_VAR 0 4
2911: PUSH
2912: LD_INT 1
2914: ARRAY
2915: PUSH
2916: LD_VAR 0 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 4
2926: PUSH
2927: LD_INT 2
2929: ARRAY
2930: PUSH
2931: LD_VAR 0 2
2935: ARRAY
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: CALL_OW 601
// end ;
2944: GO 2876
2946: POP
2947: POP
// end ;
2948: LD_VAR 0 1
2952: RET
// export function PrepareFirstScene ; var i , un ; begin
2953: LD_INT 0
2955: PPUSH
2956: PPUSH
2957: PPUSH
// uc_side := 4 ;
2958: LD_ADDR_OWVAR 20
2962: PUSH
2963: LD_INT 4
2965: ST_TO_ADDR
// uc_nation := 1 ;
2966: LD_ADDR_OWVAR 21
2970: PUSH
2971: LD_INT 1
2973: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_INT 33
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 380
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3066
// begin un := CreateHuman ;
3003: LD_ADDR_VAR 0 3
3007: PUSH
3008: CALL_OW 44
3012: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3013: LD_VAR 0 3
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3025: LD_VAR 0 3
3029: PPUSH
3030: LD_INT 6
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3040: LD_VAR 0 3
3044: PPUSH
3045: LD_INT 1
3047: PPUSH
3048: CALL 69748 0 2
// SetLives ( un , 300 ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 300
3059: PPUSH
3060: CALL_OW 234
// end ;
3064: GO 3000
3066: POP
3067: POP
// uc_side := 3 ;
3068: LD_ADDR_OWVAR 20
3072: PUSH
3073: LD_INT 3
3075: ST_TO_ADDR
// uc_nation := 3 ;
3076: LD_ADDR_OWVAR 21
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 5
3089: PPUSH
3090: CALL_OW 381
// for i := 1 to 3 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 3
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3181
// begin un := CreateHuman ;
3110: LD_ADDR_VAR 0 3
3114: PUSH
3115: CALL_OW 44
3119: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3120: LD_ADDR_EXP 63
3124: PUSH
3125: LD_EXP 63
3129: PPUSH
3130: LD_VAR 0 3
3134: PPUSH
3135: CALL 66596 0 2
3139: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 4
3147: PPUSH
3148: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 7
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 4
3174: PPUSH
3175: CALL 69748 0 2
// end ;
3179: GO 3107
3181: POP
3182: POP
// ruCommisar := CreateHuman ;
3183: LD_ADDR_EXP 64
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3193: LD_EXP 64
3197: PPUSH
3198: LD_INT 124
3200: PPUSH
3201: LD_INT 37
3203: PPUSH
3204: LD_INT 0
3206: PPUSH
3207: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3211: LD_EXP 64
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3223: LD_EXP 64
3227: PPUSH
3228: LD_INT 3
3230: PPUSH
3231: CALL 69748 0 2
// end ;
3235: LD_VAR 0 1
3239: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3240: LD_INT 0
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
// uc_side := 6 ;
3246: LD_ADDR_OWVAR 20
3250: PUSH
3251: LD_INT 6
3253: ST_TO_ADDR
// uc_nation := 3 ;
3254: LD_ADDR_OWVAR 21
3258: PUSH
3259: LD_INT 3
3261: ST_TO_ADDR
// ruPatrol := [ ] ;
3262: LD_ADDR_EXP 70
3266: PUSH
3267: EMPTY
3268: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3269: LD_ADDR_VAR 0 4
3273: PUSH
3274: LD_INT 26
3276: PUSH
3277: LD_INT 30
3279: PUSH
3280: LD_INT 39
3282: PUSH
3283: LD_INT 43
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: ST_TO_ADDR
// for i := 1 to spawn do
3292: LD_ADDR_VAR 0 2
3296: PUSH
3297: DOUBLE
3298: LD_INT 1
3300: DEC
3301: ST_TO_ADDR
3302: LD_VAR 0 4
3306: PUSH
3307: FOR_TO
3308: IFFALSE 3419
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3310: LD_INT 0
3312: PPUSH
3313: LD_INT 4
3315: PUSH
3316: LD_INT 5
3318: PUSH
3319: LD_INT 6
3321: PUSH
3322: LD_INT 7
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: PUSH
3331: LD_OWVAR 67
3335: ARRAY
3336: PPUSH
3337: CALL_OW 381
// un := CreateHuman ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: CALL_OW 44
3350: ST_TO_ADDR
// SetTag ( un , i ) ;
3351: LD_VAR 0 3
3355: PPUSH
3356: LD_VAR 0 2
3360: PPUSH
3361: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3365: LD_ADDR_EXP 70
3369: PUSH
3370: LD_EXP 70
3374: PPUSH
3375: LD_VAR 0 3
3379: PPUSH
3380: CALL 66596 0 2
3384: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3385: LD_VAR 0 3
3389: PPUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: CALL_OW 49
// ComHold ( un ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: CALL_OW 140
// end ;
3417: GO 3307
3419: POP
3420: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3421: LD_ADDR_VAR 0 4
3425: PUSH
3426: LD_INT 48
3428: PUSH
3429: LD_INT 49
3431: PUSH
3432: LD_INT 50
3434: PUSH
3435: LD_INT 51
3437: PUSH
3438: LD_INT 52
3440: PUSH
3441: LD_INT 53
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: ST_TO_ADDR
// for i := 1 to spawn do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: DOUBLE
3458: LD_INT 1
3460: DEC
3461: ST_TO_ADDR
3462: LD_VAR 0 4
3466: PUSH
3467: FOR_TO
3468: IFFALSE 3577
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3470: LD_INT 0
3472: PPUSH
3473: LD_INT 4
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 6
3481: PUSH
3482: LD_INT 7
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_OWVAR 67
3495: ARRAY
3496: PPUSH
3497: CALL_OW 381
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 3
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3523: LD_ADDR_EXP 70
3527: PUSH
3528: LD_EXP 70
3532: PPUSH
3533: LD_VAR 0 3
3537: PPUSH
3538: CALL 66596 0 2
3542: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3543: LD_VAR 0 3
3547: PPUSH
3548: LD_VAR 0 4
3552: PUSH
3553: LD_VAR 0 2
3557: ARRAY
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// ComHold ( un ) ;
3566: LD_VAR 0 3
3570: PPUSH
3571: CALL_OW 140
// end ;
3575: GO 3467
3577: POP
3578: POP
// end ;
3579: LD_VAR 0 1
3583: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3584: LD_INT 0
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
// uc_side := 6 ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_INT 6
3597: ST_TO_ADDR
// uc_nation := nation_russian ;
3598: LD_ADDR_OWVAR 21
3602: PUSH
3603: LD_INT 3
3605: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3606: LD_ADDR_VAR 0 4
3610: PUSH
3611: LD_INT 54
3613: PUSH
3614: LD_INT 55
3616: PUSH
3617: LD_INT 56
3619: PUSH
3620: LD_INT 57
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: ST_TO_ADDR
// for i := 1 to spawn do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: DOUBLE
3635: LD_INT 1
3637: DEC
3638: ST_TO_ADDR
3639: LD_VAR 0 4
3643: PUSH
3644: FOR_TO
3645: IFFALSE 3754
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3647: LD_INT 0
3649: PPUSH
3650: LD_INT 4
3652: PUSH
3653: LD_INT 5
3655: PUSH
3656: LD_INT 6
3658: PUSH
3659: LD_INT 7
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_OWVAR 67
3672: ARRAY
3673: PPUSH
3674: CALL_OW 381
// un := CreateHuman ;
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: CALL_OW 44
3687: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3700: LD_ADDR_EXP 70
3704: PUSH
3705: LD_EXP 70
3709: PPUSH
3710: LD_VAR 0 3
3714: PPUSH
3715: CALL 66596 0 2
3719: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3720: LD_VAR 0 3
3724: PPUSH
3725: LD_VAR 0 4
3729: PUSH
3730: LD_VAR 0 2
3734: ARRAY
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// ComHold ( un ) ;
3743: LD_VAR 0 3
3747: PPUSH
3748: CALL_OW 140
// end ;
3752: GO 3644
3754: POP
3755: POP
// end ; end_of_file
3756: LD_VAR 0 1
3760: RET
// export function Action ; var speaker , i , tmp ; begin
3761: LD_INT 0
3763: PPUSH
3764: PPUSH
3765: PPUSH
3766: PPUSH
// Video ( true ) ;
3767: LD_INT 1
3769: PPUSH
3770: CALL 66568 0 1
// hasNormalScene := Kaia or Givi ;
3774: LD_ADDR_EXP 5
3778: PUSH
3779: LD_EXP 50
3783: PUSH
3784: LD_EXP 46
3788: OR
3789: ST_TO_ADDR
// if hasNormalScene then
3790: LD_EXP 5
3794: IFFALSE 4035
// begin for i in americanSquad do
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: LD_EXP 57
3805: PUSH
3806: FOR_IN
3807: IFFALSE 3853
// begin SetClass ( i , class_prison ) ;
3809: LD_VAR 0 3
3813: PPUSH
3814: LD_INT 33
3816: PPUSH
3817: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3821: LD_VAR 0 3
3825: PPUSH
3826: LD_INT 78
3828: PPUSH
3829: LD_INT 16
3831: PPUSH
3832: LD_INT 5
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 50
// ComHold ( i ) ;
3842: LD_VAR 0 3
3846: PPUSH
3847: CALL_OW 140
// end ;
3851: GO 3806
3853: POP
3854: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: LD_EXP 47
3864: PUSH
3865: LD_EXP 48
3869: PUSH
3870: LD_EXP 49
3874: PUSH
3875: LD_EXP 50
3879: PUSH
3880: LD_EXP 51
3884: PUSH
3885: LD_EXP 52
3889: PUSH
3890: LD_EXP 53
3894: PUSH
3895: LD_EXP 54
3899: PUSH
3900: LD_EXP 46
3904: PUSH
3905: LD_EXP 55
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: PUSH
3922: LD_EXP 56
3926: UNION
3927: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3928: LD_EXP 45
3932: PPUSH
3933: LD_INT 33
3935: PPUSH
3936: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3940: LD_EXP 45
3944: PPUSH
3945: LD_INT 117
3947: PPUSH
3948: LD_INT 24
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL 68736 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3961: LD_EXP 45
3965: PPUSH
3966: LD_INT 123
3968: PPUSH
3969: LD_INT 39
3971: PPUSH
3972: CALL_OW 118
// for i in tmp do
3976: LD_ADDR_VAR 0 3
3980: PUSH
3981: LD_VAR 0 4
3985: PUSH
3986: FOR_IN
3987: IFFALSE 4033
// begin SetClass ( i , class_prison ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 33
3996: PPUSH
3997: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4001: LD_VAR 0 3
4005: PPUSH
4006: LD_INT 3
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 113
4023: PPUSH
4024: LD_INT 16
4026: PPUSH
4027: CALL_OW 118
// end ;
4031: GO 3986
4033: POP
4034: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4035: LD_INT 124
4037: PPUSH
4038: LD_INT 39
4040: PPUSH
4041: CALL_OW 86
// PrepareDeadBodies ;
4045: CALL 2817 0 0
// PrepareFirstScene ;
4049: CALL 2953 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4053: LD_INT 152
4055: PPUSH
4056: LD_INT 65
4058: PPUSH
4059: LD_INT 2
4061: PPUSH
4062: LD_INT 70
4064: NEG
4065: PPUSH
4066: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4070: LD_INT 152
4072: PPUSH
4073: LD_INT 65
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4083: LD_INT 122
4085: PPUSH
4086: LD_INT 40
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: LD_INT 8
4094: NEG
4095: PPUSH
4096: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4100: LD_INT 124
4102: PPUSH
4103: LD_INT 37
4105: PPUSH
4106: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4110: LD_EXP 64
4114: PPUSH
4115: LD_STRING DRum-Execution-1
4117: PPUSH
4118: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4122: LD_EXP 64
4126: PPUSH
4127: LD_STRING DRum-Execution-2
4129: PPUSH
4130: CALL_OW 88
// wait ( 0 0$01 ) ;
4134: LD_INT 35
4136: PPUSH
4137: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4141: LD_EXP 64
4145: PPUSH
4146: LD_STRING DRum-Execution-3
4148: PPUSH
4149: CALL_OW 88
// wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4160: LD_EXP 64
4164: PPUSH
4165: LD_STRING DRum-Execution-4
4167: PPUSH
4168: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4172: LD_EXP 63
4176: PUSH
4177: LD_INT 1
4179: ARRAY
4180: PPUSH
4181: LD_INT 122
4183: PPUSH
4184: LD_INT 39
4186: PPUSH
4187: CALL_OW 428
4191: PPUSH
4192: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4196: LD_EXP 63
4200: PUSH
4201: LD_INT 2
4203: ARRAY
4204: PPUSH
4205: LD_INT 123
4207: PPUSH
4208: LD_INT 41
4210: PPUSH
4211: CALL_OW 428
4215: PPUSH
4216: CALL_OW 115
// AddComHold ( russianKillers ) ;
4220: LD_EXP 63
4224: PPUSH
4225: CALL_OW 200
// wait ( 0 0$1 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4236: LD_INT 122
4238: PPUSH
4239: LD_INT 40
4241: PPUSH
4242: LD_INT 2
4244: PPUSH
4245: CALL_OW 331
// for i in russianKillers union ruCommisar do
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_EXP 63
4258: PUSH
4259: LD_EXP 64
4263: UNION
4264: PUSH
4265: FOR_IN
4266: IFFALSE 4279
// RemoveUnit ( i ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: CALL_OW 64
4277: GO 4265
4279: POP
4280: POP
// if hasNormalScene then
4281: LD_EXP 5
4285: IFFALSE 4293
// ActionNormal else
4287: CALL 4302 0 0
4291: GO 4297
// ActionAdditional ;
4293: CALL 6120 0 0
// end ;
4297: LD_VAR 0 1
4301: RET
// function ActionNormal ; var i , tmp ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
// CenterNowOnUnits ( Heike ) ;
4307: LD_EXP 45
4311: PPUSH
4312: CALL_OW 87
// wait ( 0 0$1 ) ;
4316: LD_INT 35
4318: PPUSH
4319: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4323: LD_EXP 45
4327: PPUSH
4328: LD_INT 115
4330: PPUSH
4331: LD_INT 19
4333: PPUSH
4334: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4338: LD_EXP 45
4342: PPUSH
4343: LD_INT 113
4345: PPUSH
4346: LD_INT 16
4348: PPUSH
4349: CALL_OW 178
// wait ( 0 0$2 ) ;
4353: LD_INT 70
4355: PPUSH
4356: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4360: LD_EXP 45
4364: PPUSH
4365: LD_STRING DH-Conspiracy-1
4367: PPUSH
4368: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4372: LD_EXP 50
4376: PPUSH
4377: LD_STRING DK-Conspiracy-2
4379: PPUSH
4380: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4384: LD_EXP 46
4388: PPUSH
4389: LD_STRING DG-Conspiracy-3
4391: PPUSH
4392: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4396: LD_EXP 46
4400: PPUSH
4401: LD_STRING DG-Conspiracy-4
4403: PPUSH
4404: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4408: LD_EXP 45
4412: PPUSH
4413: LD_STRING DH-Conspiracy-5
4415: PPUSH
4416: CALL_OW 88
// if IsOk ( Kamil ) then
4420: LD_EXP 49
4424: PPUSH
4425: CALL_OW 302
4429: IFFALSE 4487
// begin hasVodka := true ;
4431: LD_ADDR_EXP 4
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4439: LD_EXP 49
4443: PPUSH
4444: LD_STRING DKam-Conspiracy-6
4446: PPUSH
4447: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4451: LD_EXP 49
4455: PPUSH
4456: LD_STRING DKam-Conspiracy-7
4458: PPUSH
4459: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4463: LD_EXP 49
4467: PPUSH
4468: LD_STRING DKam-Conspiracy-8
4470: PPUSH
4471: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4475: LD_EXP 49
4479: PPUSH
4480: LD_STRING DKam-Conspiracy-9
4482: PPUSH
4483: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4487: LD_EXP 51
4491: PPUSH
4492: CALL_OW 302
4496: IFFALSE 4677
// begin americanContact := true ;
4498: LD_ADDR_EXP 10
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4506: LD_STRING M1-american
4508: PPUSH
4509: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4513: LD_EXP 51
4517: PPUSH
4518: LD_STRING DS-Conspiracy-10
4520: PPUSH
4521: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4525: LD_EXP 52
4529: PPUSH
4530: LD_STRING DM-Conspiracy-11
4532: PPUSH
4533: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4537: LD_EXP 51
4541: PPUSH
4542: LD_STRING DS-Conspiracy-12
4544: PPUSH
4545: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4549: LD_INT 84
4551: PPUSH
4552: LD_INT 19
4554: PPUSH
4555: LD_INT 105
4557: PPUSH
4558: CALL 19680 0 3
// if johnnySaved then
4562: LD_EXP 3
4566: IFFALSE 4606
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4568: LD_EXP 51
4572: PPUSH
4573: LD_STRING DS-Conspiracy-13
4575: PPUSH
4576: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4580: LD_EXP 45
4584: PPUSH
4585: LD_STRING DH-Conspiracy-14
4587: PPUSH
4588: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4592: LD_EXP 45
4596: PPUSH
4597: LD_STRING DH-Conspiracy-15
4599: PPUSH
4600: CALL_OW 88
// end else
4604: GO 4642
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4606: LD_EXP 51
4610: PPUSH
4611: LD_STRING DS-Conspiracy-a-13
4613: PPUSH
4614: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4618: LD_EXP 45
4622: PPUSH
4623: LD_STRING DH-Conspiracy-a-14
4625: PPUSH
4626: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4630: LD_EXP 45
4634: PPUSH
4635: LD_STRING DH-Conspiracy-a-15
4637: PPUSH
4638: CALL_OW 88
// end ; if IsOk ( Givi ) then
4642: LD_EXP 46
4646: PPUSH
4647: CALL_OW 302
4651: IFFALSE 4677
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4653: LD_EXP 46
4657: PPUSH
4658: LD_STRING DG-Conspiracy-a-16
4660: PPUSH
4661: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4665: LD_EXP 45
4669: PPUSH
4670: LD_STRING DH-Conspiracy-a-17
4672: PPUSH
4673: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4677: LD_EXP 45
4681: PPUSH
4682: LD_STRING DH-Conspiracy-16
4684: PPUSH
4685: CALL_OW 88
// if IsOk ( Givi ) then
4689: LD_EXP 46
4693: PPUSH
4694: CALL_OW 302
4698: IFFALSE 4970
// begin hasStimDrugs := true ;
4700: LD_ADDR_EXP 9
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4708: LD_STRING M1-drugs
4710: PPUSH
4711: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4715: LD_EXP 46
4719: PPUSH
4720: LD_STRING DG-Conspiracy-17
4722: PPUSH
4723: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4727: LD_INT 162
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4737: LD_INT 194
4739: PPUSH
4740: LD_INT 98
4742: PPUSH
4743: LD_INT 105
4745: PPUSH
4746: CALL 19680 0 3
// SetSide ( drugsLab , 3 ) ;
4750: LD_INT 162
4752: PPUSH
4753: LD_INT 3
4755: PPUSH
4756: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4760: LD_EXP 46
4764: PPUSH
4765: LD_STRING DG-Conspiracy-18
4767: PPUSH
4768: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4772: LD_EXP 46
4776: PPUSH
4777: LD_STRING DG-Conspiracy-19
4779: PPUSH
4780: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4784: LD_EXP 46
4788: PPUSH
4789: LD_STRING DG-Conspiracy-20
4791: PPUSH
4792: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4796: LD_EXP 45
4800: PPUSH
4801: LD_STRING DH-Conspiracy-21
4803: PPUSH
4804: CALL_OW 88
// if IsOk ( Kaia ) then
4808: LD_EXP 50
4812: PPUSH
4813: CALL_OW 302
4817: IFFALSE 4891
// begin hasExplosions := true ;
4819: LD_ADDR_EXP 6
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4827: LD_STRING M1-explosive
4829: PPUSH
4830: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4834: LD_EXP 50
4838: PPUSH
4839: LD_STRING DK-Conspiracy-22
4841: PPUSH
4842: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4846: LD_INT 73
4848: PPUSH
4849: LD_INT 2
4851: PPUSH
4852: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4856: LD_INT 170
4858: PPUSH
4859: LD_INT 104
4861: PPUSH
4862: LD_INT 105
4864: PPUSH
4865: CALL 19680 0 3
// SetSide ( barExplosion , 3 ) ;
4869: LD_INT 73
4871: PPUSH
4872: LD_INT 3
4874: PPUSH
4875: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING DK-Conspiracy-23
4886: PPUSH
4887: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4891: LD_EXP 53
4895: PPUSH
4896: CALL_OW 302
4900: IFFALSE 4970
// begin hasExplosionsInFactory := true ;
4902: LD_ADDR_EXP 7
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4910: LD_EXP 53
4914: PPUSH
4915: LD_STRING DO-Conspiracy-24
4917: PPUSH
4918: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4922: LD_INT 175
4924: PPUSH
4925: LD_INT 54
4927: PPUSH
4928: LD_INT 70
4930: PPUSH
4931: CALL 19680 0 3
// if IsOk ( Markov ) then
4935: LD_EXP 52
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4970
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4946: LD_EXP 52
4950: PPUSH
4951: LD_STRING DMar-Conspiracy-25
4953: PPUSH
4954: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4958: LD_EXP 52
4962: PPUSH
4963: LD_STRING DMar-Conspiracy-26
4965: PPUSH
4966: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4970: LD_EXP 54
4974: PPUSH
4975: CALL_OW 302
4979: PUSH
4980: LD_EXP 50
4984: PPUSH
4985: CALL_OW 302
4989: AND
4990: IFFALSE 5450
// begin hasWeapons := true ;
4992: LD_ADDR_EXP 19
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// hasRevolver := true ;
5000: LD_ADDR_EXP 8
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5008: LD_STRING M1-weapons
5010: PPUSH
5011: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5015: LD_EXP 54
5019: PPUSH
5020: LD_STRING DKs-Conspiracy-27
5022: PPUSH
5023: CALL_OW 88
// if IsOk ( Givi ) then
5027: LD_EXP 46
5031: PPUSH
5032: CALL_OW 302
5036: IFFALSE 5052
// Say ( Givi , DG-Conspiracy-28 ) else
5038: LD_EXP 46
5042: PPUSH
5043: LD_STRING DG-Conspiracy-28
5045: PPUSH
5046: CALL_OW 88
5050: GO 5117
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5052: LD_EXP 56
5056: PPUSH
5057: LD_INT 26
5059: PUSH
5060: LD_INT 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 72
5071: PUSH
5072: LD_INT 1
5074: ARRAY
5075: PPUSH
5076: LD_STRING DArm-Conspiracy-a-28
5078: PPUSH
5079: CALL_OW 88
5083: NOT
5084: IFFALSE 5117
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5086: LD_EXP 56
5090: PPUSH
5091: LD_INT 26
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 72
5105: PUSH
5106: LD_INT 1
5108: ARRAY
5109: PPUSH
5110: LD_STRING DArf-Conspiracy-a-28
5112: PPUSH
5113: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5117: LD_EXP 54
5121: PPUSH
5122: LD_STRING DKs-Conspiracy-29
5124: PPUSH
5125: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5129: LD_INT 192
5131: PPUSH
5132: LD_INT 122
5134: PPUSH
5135: LD_INT 105
5137: PPUSH
5138: CALL 19680 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5142: LD_EXP 54
5146: PPUSH
5147: LD_STRING DKs-Conspiracy-30
5149: PPUSH
5150: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5154: LD_EXP 50
5158: PPUSH
5159: LD_STRING DK-Conspiracy-31
5161: PPUSH
5162: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5166: LD_EXP 52
5170: PPUSH
5171: LD_STRING DMar-Conspiracy-33
5173: PPUSH
5174: CALL_OW 88
5178: NOT
5179: PUSH
5180: LD_EXP 56
5184: AND
5185: IFFALSE 5252
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5187: LD_EXP 56
5191: PPUSH
5192: LD_INT 26
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 72
5206: PUSH
5207: LD_INT 1
5209: ARRAY
5210: PPUSH
5211: LD_STRING DArm-Conspiracy-a-34
5213: PPUSH
5214: CALL_OW 88
5218: NOT
5219: IFFALSE 5252
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5221: LD_EXP 56
5225: PPUSH
5226: LD_INT 26
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 72
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: LD_STRING DArf-Conspiracy-a-34
5247: PPUSH
5248: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5252: LD_EXP 50
5256: PPUSH
5257: LD_STRING DK-Conspiracy-34
5259: PPUSH
5260: CALL_OW 88
// if IsOk ( Markov ) then
5264: LD_EXP 52
5268: PPUSH
5269: CALL_OW 302
5273: IFFALSE 5358
// begin hasSniperRifle := true ;
5275: LD_ADDR_EXP 11
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5283: LD_EXP 52
5287: PPUSH
5288: LD_STRING DMar-Conspiracy-35
5290: PPUSH
5291: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5295: LD_EXP 50
5299: PPUSH
5300: LD_STRING DK-Conspiracy-36
5302: PPUSH
5303: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5307: LD_EXP 52
5311: PPUSH
5312: LD_STRING DMar-Conspiracy-37
5314: PPUSH
5315: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5319: LD_EXP 52
5323: PPUSH
5324: LD_STRING DMar-Conspiracy-38
5326: PPUSH
5327: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5331: LD_INT 137
5333: PPUSH
5334: LD_INT 98
5336: PPUSH
5337: LD_INT 105
5339: PPUSH
5340: CALL 19680 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5344: LD_EXP 52
5348: PPUSH
5349: LD_STRING DMar-Conspiracy-39
5351: PPUSH
5352: CALL_OW 88
// end else
5356: GO 5450
// if heikeSecondSquad then
5358: LD_EXP 56
5362: IFFALSE 5450
// begin hasSniperRifle := true ;
5364: LD_ADDR_EXP 11
5368: PUSH
5369: LD_INT 1
5371: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5372: LD_INT 137
5374: PPUSH
5375: LD_INT 98
5377: PPUSH
5378: LD_INT 105
5380: PPUSH
5381: CALL 19680 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5385: LD_EXP 56
5389: PPUSH
5390: LD_INT 26
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 72
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: LD_STRING DArm-Conspiracy-a-35
5411: PPUSH
5412: CALL_OW 88
5416: NOT
5417: IFFALSE 5450
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5419: LD_EXP 56
5423: PPUSH
5424: LD_INT 26
5426: PUSH
5427: LD_INT 2
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 72
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING DArf-Conspiracy-a-35
5445: PPUSH
5446: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5450: LD_EXP 45
5454: PPUSH
5455: LD_STRING DH-Conspiracy-40
5457: PPUSH
5458: CALL_OW 88
// if IsOk ( Mike ) then
5462: LD_EXP 47
5466: PPUSH
5467: CALL_OW 302
5471: IFFALSE 5530
// begin hasScout := true ;
5473: LD_ADDR_EXP 12
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5481: LD_EXP 47
5485: PPUSH
5486: LD_STRING DM-Conspiracy-41
5488: PPUSH
5489: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5493: LD_EXP 47
5497: PPUSH
5498: LD_STRING DM-Conspiracy-42
5500: PPUSH
5501: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5505: LD_INT 73
5507: PPUSH
5508: LD_INT 102
5510: PPUSH
5511: LD_INT 105
5513: PPUSH
5514: CALL 19680 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5518: LD_EXP 47
5522: PPUSH
5523: LD_STRING DM-Conspiracy-43
5525: PPUSH
5526: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5530: LD_EXP 4
5534: PUSH
5535: LD_EXP 50
5539: PPUSH
5540: CALL_OW 302
5544: AND
5545: PUSH
5546: LD_EXP 54
5550: PPUSH
5551: CALL_OW 302
5555: AND
5556: IFFALSE 5602
// begin hasMethanol := true ;
5558: LD_ADDR_EXP 13
5562: PUSH
5563: LD_INT 1
5565: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5566: LD_EXP 50
5570: PPUSH
5571: LD_STRING DK-Conspiracy-44
5573: PPUSH
5574: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5578: LD_EXP 50
5582: PPUSH
5583: LD_STRING DK-Conspiracy-45
5585: PPUSH
5586: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING DKam-Conspiracy-46
5597: PPUSH
5598: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5602: LD_EXP 45
5606: PPUSH
5607: LD_STRING DH-Conspiracy-47
5609: PPUSH
5610: CALL_OW 88
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// your_side := 8 ;
5621: LD_ADDR_OWVAR 2
5625: PUSH
5626: LD_INT 8
5628: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5629: LD_INT 1
5631: PPUSH
5632: LD_INT 1
5634: PPUSH
5635: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5639: LD_ADDR_VAR 0 2
5643: PUSH
5644: LD_INT 2
5646: PUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_INT 4
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 21
5674: PUSH
5675: LD_INT 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PPUSH
5686: CALL_OW 69
5690: PUSH
5691: FOR_IN
5692: IFFALSE 5705
// RemoveUnit ( i ) ;
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 64
5703: GO 5691
5705: POP
5706: POP
// wait ( 0 0$0.3 ) ;
5707: LD_INT 10
5709: PPUSH
5710: CALL_OW 67
// Query ( StartInfo1 ) ;
5714: LD_STRING StartInfo1
5716: PPUSH
5717: CALL_OW 97
// wait ( 0 0$1 ) ;
5721: LD_INT 35
5723: PPUSH
5724: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5728: LD_STRING colors_night.txt
5730: PPUSH
5731: CALL_OW 544
// Query ( StartInfo2 ) ;
5735: LD_STRING StartInfo2
5737: PPUSH
5738: CALL_OW 97
// PrepareGame ;
5742: CALL 1048 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5746: LD_INT 152
5748: PPUSH
5749: LD_INT 65
5751: PPUSH
5752: LD_INT 2
5754: PPUSH
5755: LD_INT 70
5757: NEG
5758: PPUSH
5759: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5763: LD_INT 152
5765: PPUSH
5766: LD_INT 65
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5776: LD_INT 133
5778: PPUSH
5779: LD_INT 76
5781: PPUSH
5782: LD_INT 2
5784: PPUSH
5785: LD_INT 6
5787: NEG
5788: PPUSH
5789: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5793: LD_INT 152
5795: PPUSH
5796: LD_INT 65
5798: PPUSH
5799: LD_INT 8
5801: PPUSH
5802: LD_INT 70
5804: NEG
5805: PPUSH
5806: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5810: LD_INT 152
5812: PPUSH
5813: LD_INT 65
5815: PPUSH
5816: LD_INT 8
5818: PPUSH
5819: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5823: LD_INT 133
5825: PPUSH
5826: LD_INT 76
5828: PPUSH
5829: LD_INT 8
5831: PPUSH
5832: LD_INT 6
5834: NEG
5835: PPUSH
5836: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5840: LD_INT 23
5842: PPUSH
5843: CALL_OW 87
// dialogue_skipped := false ;
5847: LD_ADDR_OWVAR 59
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// InitRuPatrols ;
5855: CALL 3240 0 0
// Say ( Heike , DH-Escape-1 ) ;
5859: LD_EXP 45
5863: PPUSH
5864: LD_STRING DH-Escape-1
5866: PPUSH
5867: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5871: LD_EXP 45
5875: PPUSH
5876: LD_STRING DH-Escape-2
5878: PPUSH
5879: CALL_OW 88
// StartLockerMinigame ;
5883: CALL 20465 0 0
// wait ( 0 0$1 ) ;
5887: LD_INT 35
5889: PPUSH
5890: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5894: LD_EXP 45
5898: PPUSH
5899: LD_STRING DH-Escape-4
5901: PPUSH
5902: CALL_OW 88
// wait ( 0 0$3 ) ;
5906: LD_INT 105
5908: PPUSH
5909: CALL_OW 67
// your_side := 2 ;
5913: LD_ADDR_OWVAR 2
5917: PUSH
5918: LD_INT 2
5920: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5921: LD_EXP 45
5925: PPUSH
5926: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5930: LD_INT 152
5932: PPUSH
5933: LD_INT 65
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: LD_INT 70
5941: NEG
5942: PPUSH
5943: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5947: LD_INT 152
5949: PPUSH
5950: LD_INT 65
5952: PPUSH
5953: LD_INT 2
5955: PPUSH
5956: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5960: LD_INT 133
5962: PPUSH
5963: LD_INT 76
5965: PPUSH
5966: LD_INT 8
5968: PPUSH
5969: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5973: LD_EXP 45
5977: PPUSH
5978: LD_INT 128
5980: PPUSH
5981: LD_INT 64
5983: PPUSH
5984: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5988: LD_INT 35
5990: PPUSH
5991: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5995: LD_EXP 45
5999: PPUSH
6000: LD_INT 128
6002: PPUSH
6003: LD_INT 64
6005: PPUSH
6006: CALL_OW 307
6010: IFFALSE 5988
// ComHold ( Heike ) ;
6012: LD_EXP 45
6016: PPUSH
6017: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6021: LD_EXP 45
6025: PPUSH
6026: LD_STRING DH-Start-1
6028: PPUSH
6029: CALL_OW 88
// if not americanContact then
6033: LD_EXP 10
6037: NOT
6038: IFFALSE 6054
// Say ( Heike , DH-Start-c-2 ) else
6040: LD_EXP 45
6044: PPUSH
6045: LD_STRING DH-Start-c-2
6047: PPUSH
6048: CALL_OW 88
6052: GO 6086
// if johnnySaved then
6054: LD_EXP 3
6058: IFFALSE 6074
// Say ( Heike , DH-Start-a-2 ) else
6060: LD_EXP 45
6064: PPUSH
6065: LD_STRING DH-Start-a-2
6067: PPUSH
6068: CALL_OW 88
6072: GO 6086
// Say ( Heike , DH-Start-b-2 ) ;
6074: LD_EXP 45
6078: PPUSH
6079: LD_STRING DH-Start-b-2
6081: PPUSH
6082: CALL_OW 88
// Video ( false ) ;
6086: LD_INT 0
6088: PPUSH
6089: CALL 66568 0 1
// tick := 0 ;
6093: LD_ADDR_OWVAR 1
6097: PUSH
6098: LD_INT 0
6100: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6101: LD_STRING M1
6103: PPUSH
6104: CALL_OW 337
// enable ( gameStartEvent ) ;
6108: LD_INT 2
6110: ENABLE_MARKED
// SaveForQuickRestart ;
6111: CALL_OW 22
// end ;
6115: LD_VAR 0 1
6119: RET
// function ActionAdditional ; var i , un , tmp ; begin
6120: LD_INT 0
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6126: LD_INT 115
6128: PPUSH
6129: LD_INT 27
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: LD_INT 6
6137: NEG
6138: PPUSH
6139: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6143: LD_EXP 45
6147: PPUSH
6148: LD_INT 115
6150: PPUSH
6151: LD_INT 27
6153: PPUSH
6154: CALL_OW 428
6158: PPUSH
6159: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6163: LD_EXP 45
6167: PPUSH
6168: LD_INT 33
6170: PPUSH
6171: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6175: LD_INT 124
6177: PPUSH
6178: LD_INT 39
6180: PPUSH
6181: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6185: LD_EXP 45
6189: PPUSH
6190: LD_STRING DH-Fail-1
6192: PPUSH
6193: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6197: LD_INT 3
6199: PPUSH
6200: CALL_OW 427
// ComExit ( Heike ) ;
6204: LD_EXP 45
6208: PPUSH
6209: CALL 66994 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6213: LD_EXP 45
6217: PPUSH
6218: LD_INT 109
6220: PPUSH
6221: LD_INT 33
6223: PPUSH
6224: CALL_OW 171
// AddComHold ( Heike ) ;
6228: LD_EXP 45
6232: PPUSH
6233: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6237: LD_INT 115
6239: PPUSH
6240: LD_INT 27
6242: PPUSH
6243: LD_INT 2
6245: PPUSH
6246: CALL_OW 331
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6257: LD_INT 35
6259: PPUSH
6260: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6264: LD_EXP 45
6268: PPUSH
6269: LD_INT 109
6271: PPUSH
6272: LD_INT 33
6274: PPUSH
6275: CALL_OW 307
6279: IFFALSE 6257
// Say ( Heike , DH-Fail-2 ) ;
6281: LD_EXP 45
6285: PPUSH
6286: LD_STRING DH-Fail-2
6288: PPUSH
6289: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6293: LD_EXP 45
6297: PPUSH
6298: LD_INT 111
6300: PPUSH
6301: LD_INT 48
6303: PPUSH
6304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6308: LD_INT 35
6310: PPUSH
6311: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6315: LD_EXP 45
6319: PPUSH
6320: LD_INT 111
6322: PPUSH
6323: LD_INT 48
6325: PPUSH
6326: CALL_OW 297
6330: PUSH
6331: LD_INT 4
6333: LESS
6334: IFFALSE 6308
// AddComMoveXY ( Heike , 106 , 72 ) ;
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 106
6343: PPUSH
6344: LD_INT 72
6346: PPUSH
6347: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6351: LD_EXP 45
6355: PPUSH
6356: LD_INT 103
6358: PPUSH
6359: LD_INT 80
6361: PPUSH
6362: CALL_OW 171
// uc_side := 3 ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_INT 3
6373: ST_TO_ADDR
// uc_nation := 3 ;
6374: LD_ADDR_OWVAR 21
6378: PUSH
6379: LD_INT 3
6381: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6382: LD_INT 1
6384: PPUSH
6385: LD_INT 1
6387: PPUSH
6388: LD_INT 6
6390: PPUSH
6391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6395: LD_ADDR_OWVAR 29
6399: PUSH
6400: LD_INT 12
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: ST_TO_ADDR
// un := CreateHuman ;
6410: LD_ADDR_VAR 0 3
6414: PUSH
6415: CALL_OW 44
6419: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6420: LD_VAR 0 3
6424: PPUSH
6425: LD_INT 134
6427: PPUSH
6428: LD_INT 52
6430: PPUSH
6431: LD_INT 4
6433: PPUSH
6434: LD_INT 0
6436: PPUSH
6437: CALL 68736 0 5
// ComTurnUnit ( un , Heike ) ;
6441: LD_VAR 0 3
6445: PPUSH
6446: LD_EXP 45
6450: PPUSH
6451: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6455: LD_VAR 0 3
6459: PPUSH
6460: LD_EXP 45
6464: PPUSH
6465: CALL_OW 112
// if GetSex ( un ) = sex_male then
6469: LD_VAR 0 3
6473: PPUSH
6474: CALL_OW 258
6478: PUSH
6479: LD_INT 1
6481: EQUAL
6482: IFFALSE 6498
// Say ( un , DRum-Fail-3 ) else
6484: LD_VAR 0 3
6488: PPUSH
6489: LD_STRING DRum-Fail-3
6491: PPUSH
6492: CALL_OW 88
6496: GO 6510
// Say ( un , DRuf-Fail-3 ) ;
6498: LD_VAR 0 3
6502: PPUSH
6503: LD_STRING DRuf-Fail-3
6505: PPUSH
6506: CALL_OW 88
// for i := 1 to 3 do
6510: LD_ADDR_VAR 0 2
6514: PUSH
6515: DOUBLE
6516: LD_INT 1
6518: DEC
6519: ST_TO_ADDR
6520: LD_INT 3
6522: PUSH
6523: FOR_TO
6524: IFFALSE 6597
// begin PrepareSoldier ( false , 10 ) ;
6526: LD_INT 0
6528: PPUSH
6529: LD_INT 10
6531: PPUSH
6532: CALL_OW 381
// un := CreateHuman ;
6536: LD_ADDR_VAR 0 3
6540: PUSH
6541: CALL_OW 44
6545: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6546: LD_ADDR_VAR 0 4
6550: PUSH
6551: LD_VAR 0 4
6555: PPUSH
6556: LD_VAR 0 3
6560: PPUSH
6561: CALL 66596 0 2
6565: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6566: LD_VAR 0 3
6570: PPUSH
6571: LD_INT 8
6573: PPUSH
6574: LD_INT 0
6576: PPUSH
6577: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6581: LD_VAR 0 3
6585: PPUSH
6586: LD_EXP 45
6590: PPUSH
6591: CALL_OW 119
// end ;
6595: GO 6523
6597: POP
6598: POP
// repeat wait ( 0 0$1 ) ;
6599: LD_INT 35
6601: PPUSH
6602: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6606: LD_VAR 0 4
6610: PPUSH
6611: LD_INT 101
6613: PUSH
6614: LD_INT 2
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 72
6625: PUSH
6626: LD_INT 1
6628: GREATER
6629: IFFALSE 6599
// wait ( 0 0$1 ) ;
6631: LD_INT 35
6633: PPUSH
6634: CALL_OW 67
// DialogueOn ;
6638: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6642: LD_EXP 45
6646: PPUSH
6647: LD_STRING DH-Fail-4
6649: PPUSH
6650: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6654: LD_EXP 45
6658: PPUSH
6659: LD_STRING DH-Fail-5
6661: PPUSH
6662: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6666: LD_EXP 45
6670: PPUSH
6671: LD_STRING DH-Fail-6
6673: PPUSH
6674: CALL_OW 88
// DialogueOff ;
6678: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6682: LD_VAR 0 4
6686: PPUSH
6687: LD_EXP 45
6691: PPUSH
6692: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6696: LD_INT 35
6698: PPUSH
6699: CALL_OW 67
// until IsDying ( Heike ) ;
6703: LD_EXP 45
6707: PPUSH
6708: CALL_OW 303
6712: IFFALSE 6696
// KillUnit ( Heike ) ;
6714: LD_EXP 45
6718: PPUSH
6719: CALL_OW 66
// wait ( 0 0$4 ) ;
6723: LD_INT 140
6725: PPUSH
6726: CALL_OW 67
// ResetFog ;
6730: CALL_OW 335
// DialogueOn ;
6734: CALL_OW 6
// dwait ( 0 0$1 ) ;
6738: LD_INT 35
6740: PPUSH
6741: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6745: LD_ADDR_EXP 45
6749: PUSH
6750: LD_STRING Heike
6752: PPUSH
6753: LD_EXP 1
6757: NOT
6758: PPUSH
6759: LD_EXP 2
6763: PPUSH
6764: CALL 28894 0 3
6768: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6769: LD_EXP 45
6773: PPUSH
6774: LD_STRING DH-Fail-7
6776: PPUSH
6777: CALL_OW 89
// DialogueOff ;
6781: CALL_OW 7
// YouLost ( Fail ) ;
6785: LD_STRING Fail
6787: PPUSH
6788: CALL_OW 104
// end ;
6792: LD_VAR 0 1
6796: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6797: LD_INT 2
6799: PPUSH
6800: LD_INT 173
6802: PPUSH
6803: LD_INT 29
6805: PPUSH
6806: CALL_OW 293
6810: PUSH
6811: LD_EXP 45
6815: PPUSH
6816: LD_INT 173
6818: PPUSH
6819: LD_INT 29
6821: PPUSH
6822: CALL_OW 297
6826: PUSH
6827: LD_INT 6
6829: LESS
6830: AND
6831: IFFALSE 6848
6833: GO 6835
6835: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6836: LD_EXP 45
6840: PPUSH
6841: LD_STRING DH-EastRoad
6843: PPUSH
6844: CALL_OW 88
6848: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6849: LD_INT 2
6851: PPUSH
6852: LD_INT 149
6854: PPUSH
6855: LD_INT 3
6857: PPUSH
6858: CALL_OW 293
6862: PUSH
6863: LD_EXP 45
6867: PPUSH
6868: LD_INT 149
6870: PPUSH
6871: LD_INT 3
6873: PPUSH
6874: CALL_OW 297
6878: PUSH
6879: LD_INT 6
6881: LESS
6882: AND
6883: IFFALSE 6900
6885: GO 6887
6887: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6888: LD_EXP 45
6892: PPUSH
6893: LD_STRING DH-EastRoad
6895: PPUSH
6896: CALL_OW 88
6900: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6901: LD_INT 2
6903: PPUSH
6904: LD_INT 217
6906: PPUSH
6907: LD_INT 120
6909: PPUSH
6910: CALL_OW 293
6914: PUSH
6915: LD_EXP 45
6919: PPUSH
6920: LD_INT 217
6922: PPUSH
6923: LD_INT 120
6925: PPUSH
6926: CALL_OW 297
6930: PUSH
6931: LD_INT 6
6933: LESS
6934: AND
6935: IFFALSE 6952
6937: GO 6939
6939: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6940: LD_EXP 45
6944: PPUSH
6945: LD_STRING DH-EastEnd
6947: PPUSH
6948: CALL_OW 88
6952: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6953: LD_EXP 45
6957: PPUSH
6958: LD_INT 11
6960: PPUSH
6961: CALL_OW 308
6965: IFFALSE 7003
6967: GO 6969
6969: DISABLE
// begin if not heikeSquad then
6970: LD_EXP 14
6974: NOT
6975: IFFALSE 6991
// Say ( Heike , DH-Hill ) else
6977: LD_EXP 45
6981: PPUSH
6982: LD_STRING DH-Hill
6984: PPUSH
6985: CALL_OW 88
6989: GO 7003
// Say ( Heike , DH-Hill-a ) ;
6991: LD_EXP 45
6995: PPUSH
6996: LD_STRING DH-Hill-a
6998: PPUSH
6999: CALL_OW 88
// end ;
7003: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7004: LD_EXP 45
7008: PPUSH
7009: LD_INT 12
7011: PPUSH
7012: CALL_OW 308
7016: IFFALSE 7203
7018: GO 7020
7020: DISABLE
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
// begin DialogueOn ;
7026: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7030: LD_EXP 45
7034: PPUSH
7035: CALL_OW 87
// x := GetX ( Heike ) ;
7039: LD_ADDR_VAR 0 1
7043: PUSH
7044: LD_EXP 45
7048: PPUSH
7049: CALL_OW 250
7053: ST_TO_ADDR
// y := GetY ( Heike ) ;
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_EXP 45
7063: PPUSH
7064: CALL_OW 251
7068: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7069: LD_VAR 0 1
7073: PPUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: LD_INT 2
7081: PPUSH
7082: LD_INT 12
7084: NEG
7085: PPUSH
7086: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7090: LD_VAR 0 1
7094: PPUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: LD_INT 2
7102: PPUSH
7103: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7107: LD_INT 101
7109: PUSH
7110: LD_INT 2
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 30
7122: PUSH
7123: LD_INT 32
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 30
7132: PUSH
7133: LD_INT 33
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 69
7153: IFFALSE 7165
// v := 3 else
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: LD_INT 3
7162: ST_TO_ADDR
7163: GO 7173
// v := 2 ;
7165: LD_ADDR_VAR 0 3
7169: PUSH
7170: LD_INT 2
7172: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7173: LD_EXP 45
7177: PPUSH
7178: LD_STRING DH-Outpost-
7180: PUSH
7181: LD_INT 1
7183: PPUSH
7184: LD_VAR 0 3
7188: PPUSH
7189: CALL_OW 12
7193: STR
7194: PPUSH
7195: CALL_OW 88
// DialogueOff ;
7199: CALL_OW 7
// end ;
7203: PPOPN 3
7205: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7206: LD_EXP 45
7210: PPUSH
7211: LD_INT 64
7213: PPUSH
7214: CALL_OW 308
7218: IFFALSE 7405
7220: GO 7222
7222: DISABLE
7223: LD_INT 0
7225: PPUSH
7226: PPUSH
7227: PPUSH
// begin DialogueOn ;
7228: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7232: LD_EXP 45
7236: PPUSH
7237: CALL_OW 87
// x := GetX ( Heike ) ;
7241: LD_ADDR_VAR 0 1
7245: PUSH
7246: LD_EXP 45
7250: PPUSH
7251: CALL_OW 250
7255: ST_TO_ADDR
// y := GetY ( Heike ) ;
7256: LD_ADDR_VAR 0 2
7260: PUSH
7261: LD_EXP 45
7265: PPUSH
7266: CALL_OW 251
7270: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7271: LD_VAR 0 1
7275: PPUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: LD_INT 2
7283: PPUSH
7284: LD_INT 12
7286: NEG
7287: PPUSH
7288: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7292: LD_VAR 0 1
7296: PPUSH
7297: LD_VAR 0 2
7301: PPUSH
7302: LD_INT 2
7304: PPUSH
7305: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7309: LD_INT 101
7311: PUSH
7312: LD_INT 2
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: LD_INT 30
7324: PUSH
7325: LD_INT 32
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 30
7334: PUSH
7335: LD_INT 33
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PPUSH
7351: CALL_OW 69
7355: IFFALSE 7367
// v := 3 else
7357: LD_ADDR_VAR 0 3
7361: PUSH
7362: LD_INT 3
7364: ST_TO_ADDR
7365: GO 7375
// v := 2 ;
7367: LD_ADDR_VAR 0 3
7371: PUSH
7372: LD_INT 2
7374: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7375: LD_EXP 45
7379: PPUSH
7380: LD_STRING DH-Outpost-
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: LD_VAR 0 3
7390: PPUSH
7391: CALL_OW 12
7395: STR
7396: PPUSH
7397: CALL_OW 88
// DialogueOff ;
7401: CALL_OW 7
// end ;
7405: PPOPN 3
7407: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7408: LD_EXP 45
7412: PPUSH
7413: LD_INT 19
7415: PPUSH
7416: CALL_OW 308
7420: PUSH
7421: LD_EXP 22
7425: NOT
7426: AND
7427: PUSH
7428: LD_EXP 30
7432: NOT
7433: AND
7434: IFFALSE 7507
7436: GO 7438
7438: DISABLE
// begin DialogueOn ;
7439: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7443: LD_INT 152
7445: PPUSH
7446: LD_INT 115
7448: PPUSH
7449: LD_INT 2
7451: PPUSH
7452: LD_INT 16
7454: NEG
7455: PPUSH
7456: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7460: LD_INT 152
7462: PPUSH
7463: LD_INT 115
7465: PPUSH
7466: LD_INT 2
7468: PPUSH
7469: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7473: LD_INT 152
7475: PPUSH
7476: LD_INT 115
7478: PPUSH
7479: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7483: LD_EXP 45
7487: PPUSH
7488: LD_STRING DH-Stealth-1
7490: PPUSH
7491: CALL_OW 88
// DialogueOff ;
7495: CALL_OW 7
// adminAreaDiscovered := true ;
7499: LD_ADDR_EXP 22
7503: PUSH
7504: LD_INT 1
7506: ST_TO_ADDR
// end ;
7507: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7508: LD_INT 2
7510: PPUSH
7511: LD_EXP 46
7515: PPUSH
7516: CALL_OW 292
7520: PUSH
7521: LD_EXP 45
7525: PPUSH
7526: LD_EXP 46
7530: PPUSH
7531: CALL_OW 296
7535: PUSH
7536: LD_INT 6
7538: LESS
7539: AND
7540: PUSH
7541: LD_EXP 17
7545: NOT
7546: AND
7547: PUSH
7548: LD_EXP 30
7552: NOT
7553: AND
7554: IFFALSE 7660
7556: GO 7558
7558: DISABLE
// begin DialogueOn ;
7559: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7563: LD_EXP 46
7567: PPUSH
7568: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7572: LD_EXP 46
7576: PPUSH
7577: LD_EXP 45
7581: PPUSH
7582: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7586: LD_EXP 45
7590: PPUSH
7591: LD_EXP 46
7595: PPUSH
7596: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7600: LD_EXP 45
7604: PPUSH
7605: LD_STRING DH-Givi-1
7607: PPUSH
7608: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7612: LD_EXP 46
7616: PPUSH
7617: LD_STRING DG-Givi-2
7619: PPUSH
7620: CALL_OW 88
// DialogueOff ;
7624: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7628: LD_EXP 46
7632: PPUSH
7633: LD_INT 2
7635: PPUSH
7636: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7640: LD_ADDR_EXP 14
7644: PUSH
7645: LD_EXP 14
7649: PPUSH
7650: LD_EXP 46
7654: PPUSH
7655: CALL 66596 0 2
7659: ST_TO_ADDR
// end ;
7660: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7661: LD_INT 2
7663: PPUSH
7664: LD_EXP 51
7668: PPUSH
7669: CALL_OW 292
7673: PUSH
7674: LD_EXP 45
7678: PPUSH
7679: LD_EXP 51
7683: PPUSH
7684: CALL_OW 296
7688: PUSH
7689: LD_INT 6
7691: LESS
7692: AND
7693: PUSH
7694: LD_EXP 17
7698: NOT
7699: AND
7700: PUSH
7701: LD_EXP 30
7705: NOT
7706: AND
7707: IFFALSE 7813
7709: GO 7711
7711: DISABLE
// begin DialogueOn ;
7712: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7716: LD_EXP 51
7720: PPUSH
7721: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7725: LD_EXP 51
7729: PPUSH
7730: LD_EXP 45
7734: PPUSH
7735: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7739: LD_EXP 45
7743: PPUSH
7744: LD_EXP 51
7748: PPUSH
7749: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7753: LD_EXP 45
7757: PPUSH
7758: LD_STRING DH-Sophia-1
7760: PPUSH
7761: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7765: LD_EXP 51
7769: PPUSH
7770: LD_STRING DS-Sophia-2
7772: PPUSH
7773: CALL_OW 88
// DialogueOff ;
7777: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7781: LD_EXP 51
7785: PPUSH
7786: LD_INT 2
7788: PPUSH
7789: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7793: LD_ADDR_EXP 14
7797: PUSH
7798: LD_EXP 14
7802: PPUSH
7803: LD_EXP 51
7807: PPUSH
7808: CALL 66596 0 2
7812: ST_TO_ADDR
// end ;
7813: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7814: LD_INT 2
7816: PPUSH
7817: LD_EXP 53
7821: PPUSH
7822: CALL_OW 292
7826: PUSH
7827: LD_EXP 45
7831: PPUSH
7832: LD_EXP 53
7836: PPUSH
7837: CALL_OW 296
7841: PUSH
7842: LD_INT 6
7844: LESS
7845: AND
7846: PUSH
7847: LD_EXP 17
7851: NOT
7852: AND
7853: PUSH
7854: LD_EXP 30
7858: NOT
7859: AND
7860: IFFALSE 7956
7862: GO 7864
7864: DISABLE
// begin DialogueOn ;
7865: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7869: LD_EXP 53
7873: PPUSH
7874: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7878: LD_EXP 45
7882: PPUSH
7883: LD_STRING DH-Olaf-1
7885: PPUSH
7886: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7890: LD_EXP 53
7894: PPUSH
7895: LD_STRING DO-Olaf-2
7897: PPUSH
7898: CALL_OW 88
// if explosionsTakenByRussians then
7902: LD_EXP 21
7906: IFFALSE 7920
// Say ( Olaf , DO-Olaf-a-3 ) ;
7908: LD_EXP 53
7912: PPUSH
7913: LD_STRING DO-Olaf-a-3
7915: PPUSH
7916: CALL_OW 88
// DialogueOff ;
7920: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7924: LD_EXP 53
7928: PPUSH
7929: LD_INT 2
7931: PPUSH
7932: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7936: LD_ADDR_EXP 14
7940: PUSH
7941: LD_EXP 14
7945: PPUSH
7946: LD_EXP 53
7950: PPUSH
7951: CALL 66596 0 2
7955: ST_TO_ADDR
// end ;
7956: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7957: LD_INT 2
7959: PPUSH
7960: LD_EXP 47
7964: PPUSH
7965: CALL_OW 292
7969: PUSH
7970: LD_EXP 45
7974: PPUSH
7975: LD_EXP 47
7979: PPUSH
7980: CALL_OW 296
7984: PUSH
7985: LD_INT 6
7987: LESS
7988: AND
7989: PUSH
7990: LD_EXP 17
7994: NOT
7995: AND
7996: PUSH
7997: LD_EXP 30
8001: NOT
8002: AND
8003: IFFALSE 8231
8005: GO 8007
8007: DISABLE
8008: LD_INT 0
8010: PPUSH
8011: PPUSH
// begin DialogueOn ;
8012: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8016: LD_EXP 47
8020: PPUSH
8021: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8025: LD_ADDR_VAR 0 2
8029: PUSH
8030: LD_INT 18
8032: PPUSH
8033: LD_INT 0
8035: PPUSH
8036: CALL_OW 517
8040: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8041: LD_ADDR_VAR 0 1
8045: PUSH
8046: DOUBLE
8047: LD_INT 1
8049: DEC
8050: ST_TO_ADDR
8051: LD_VAR 0 2
8055: PUSH
8056: LD_INT 1
8058: ARRAY
8059: PUSH
8060: FOR_TO
8061: IFFALSE 8143
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8063: LD_VAR 0 2
8067: PUSH
8068: LD_INT 1
8070: ARRAY
8071: PUSH
8072: LD_VAR 0 1
8076: ARRAY
8077: PPUSH
8078: LD_VAR 0 2
8082: PUSH
8083: LD_INT 2
8085: ARRAY
8086: PUSH
8087: LD_VAR 0 1
8091: ARRAY
8092: PPUSH
8093: LD_INT 2
8095: PPUSH
8096: LD_INT 3
8098: NEG
8099: PPUSH
8100: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8104: LD_VAR 0 2
8108: PUSH
8109: LD_INT 1
8111: ARRAY
8112: PUSH
8113: LD_VAR 0 1
8117: ARRAY
8118: PPUSH
8119: LD_VAR 0 2
8123: PUSH
8124: LD_INT 2
8126: ARRAY
8127: PUSH
8128: LD_VAR 0 1
8132: ARRAY
8133: PPUSH
8134: LD_INT 2
8136: PPUSH
8137: CALL_OW 331
// end ;
8141: GO 8060
8143: POP
8144: POP
// Say ( Mike , DM-Mike-1 ) ;
8145: LD_EXP 47
8149: PPUSH
8150: LD_STRING DM-Mike-1
8152: PPUSH
8153: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8157: LD_EXP 45
8161: PPUSH
8162: LD_STRING DH-Mike-2
8164: PPUSH
8165: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8169: LD_INT 78
8171: PPUSH
8172: LD_INT 104
8174: PPUSH
8175: CALL_OW 84
// dwait ( 0 0$1 ) ;
8179: LD_INT 35
8181: PPUSH
8182: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8186: LD_EXP 45
8190: PPUSH
8191: CALL_OW 87
// DialogueOff ;
8195: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8199: LD_EXP 47
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8211: LD_ADDR_EXP 14
8215: PUSH
8216: LD_EXP 14
8220: PPUSH
8221: LD_EXP 47
8225: PPUSH
8226: CALL 66596 0 2
8230: ST_TO_ADDR
// end ;
8231: PPOPN 2
8233: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8234: LD_EXP 45
8238: PPUSH
8239: LD_EXP 50
8243: PPUSH
8244: CALL_OW 296
8248: PUSH
8249: LD_INT 6
8251: LESS
8252: PUSH
8253: LD_EXP 50
8257: PPUSH
8258: CALL_OW 257
8262: PUSH
8263: LD_INT 33
8265: EQUAL
8266: AND
8267: PUSH
8268: LD_EXP 17
8272: NOT
8273: AND
8274: PUSH
8275: LD_EXP 30
8279: NOT
8280: AND
8281: PUSH
8282: LD_EXP 50
8286: PPUSH
8287: CALL_OW 302
8291: AND
8292: PUSH
8293: LD_EXP 20
8297: AND
8298: PUSH
8299: LD_EXP 50
8303: PUSH
8304: LD_EXP 14
8308: IN
8309: AND
8310: PUSH
8311: LD_EXP 50
8315: PPUSH
8316: CALL_OW 255
8320: PUSH
8321: LD_INT 2
8323: EQUAL
8324: AND
8325: IFFALSE 8354
8327: GO 8329
8329: DISABLE
// begin DialogueOn ;
8330: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8334: LD_EXP 45
8338: PPUSH
8339: LD_STRING DH-Kaia-Revolver-2
8341: PPUSH
8342: CALL_OW 88
// SetClassKaiaRevolver ;
8346: CALL 1761 0 0
// DialogueOff ;
8350: CALL_OW 7
// end ;
8354: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8355: LD_EXP 48
8359: PUSH
8360: LD_EXP 55
8364: AND
8365: PUSH
8366: LD_EXP 55
8370: PPUSH
8371: CALL_OW 255
8375: PUSH
8376: LD_INT 2
8378: NONEQUAL
8379: AND
8380: PUSH
8381: LD_EXP 48
8385: PPUSH
8386: CALL_OW 255
8390: PUSH
8391: LD_INT 2
8393: NONEQUAL
8394: AND
8395: PUSH
8396: LD_EXP 14
8400: PPUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 72
8415: PUSH
8416: LD_INT 5
8418: GREATER
8419: AND
8420: PUSH
8421: LD_EXP 17
8425: NOT
8426: AND
8427: PUSH
8428: LD_EXP 30
8432: NOT
8433: AND
8434: IFFALSE 9151
8436: GO 8438
8438: DISABLE
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// begin DialogueOn ;
8443: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8447: LD_ADDR_VAR 0 2
8451: PUSH
8452: LD_EXP 46
8456: PPUSH
8457: CALL_OW 302
8461: PUSH
8462: LD_EXP 46
8466: PUSH
8467: LD_EXP 14
8471: IN
8472: AND
8473: PUSH
8474: LD_EXP 46
8478: PPUSH
8479: CALL_OW 255
8483: PUSH
8484: LD_INT 2
8486: EQUAL
8487: AND
8488: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8489: LD_EXP 45
8493: PPUSH
8494: LD_STRING DH-Med-1
8496: PPUSH
8497: CALL_OW 88
// if hasGivi then
8501: LD_VAR 0 2
8505: IFFALSE 8521
// Say ( Givi , DG-Med-2 ) else
8507: LD_EXP 46
8511: PPUSH
8512: LD_STRING DG-Med-2
8514: PPUSH
8515: CALL_OW 88
8519: GO 8626
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8521: LD_EXP 14
8525: PUSH
8526: LD_EXP 56
8530: ISECT
8531: PPUSH
8532: LD_INT 22
8534: PUSH
8535: LD_INT 2
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 26
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL_OW 72
8560: PUSH
8561: LD_INT 1
8563: ARRAY
8564: PPUSH
8565: LD_STRING DArm-Med-e-2
8567: PPUSH
8568: CALL_OW 88
8572: NOT
8573: IFFALSE 8626
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8575: LD_EXP 14
8579: PUSH
8580: LD_EXP 56
8584: ISECT
8585: PPUSH
8586: LD_INT 22
8588: PUSH
8589: LD_INT 2
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 26
8598: PUSH
8599: LD_INT 2
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PPUSH
8610: CALL_OW 72
8614: PUSH
8615: LD_INT 1
8617: ARRAY
8618: PPUSH
8619: LD_STRING DArf-Med-e-2
8621: PPUSH
8622: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8626: LD_INT 154
8628: PPUSH
8629: LD_INT 119
8631: PPUSH
8632: LD_INT 70
8634: PPUSH
8635: CALL 19680 0 3
// Say ( Heike , DH-Med-3 ) ;
8639: LD_EXP 45
8643: PPUSH
8644: LD_STRING DH-Med-3
8646: PPUSH
8647: CALL_OW 88
// if hasGivi then
8651: LD_VAR 0 2
8655: IFFALSE 8671
// Say ( Givi , DG-Med-4 ) else
8657: LD_EXP 46
8661: PPUSH
8662: LD_STRING DG-Med-4
8664: PPUSH
8665: CALL_OW 88
8669: GO 8776
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8671: LD_EXP 14
8675: PUSH
8676: LD_EXP 56
8680: ISECT
8681: PPUSH
8682: LD_INT 22
8684: PUSH
8685: LD_INT 2
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 26
8694: PUSH
8695: LD_INT 1
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 72
8710: PUSH
8711: LD_INT 1
8713: ARRAY
8714: PPUSH
8715: LD_STRING DArm-Med-e-4
8717: PPUSH
8718: CALL_OW 88
8722: NOT
8723: IFFALSE 8776
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8725: LD_EXP 14
8729: PUSH
8730: LD_EXP 56
8734: ISECT
8735: PPUSH
8736: LD_INT 22
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 26
8748: PUSH
8749: LD_INT 2
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PPUSH
8760: CALL_OW 72
8764: PUSH
8765: LD_INT 1
8767: ARRAY
8768: PPUSH
8769: LD_STRING DArf-Med-e-4
8771: PPUSH
8772: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8776: LD_ADDR_VAR 0 1
8780: PUSH
8781: LD_EXP 50
8785: PPUSH
8786: CALL_OW 302
8790: PUSH
8791: LD_EXP 50
8795: PUSH
8796: LD_EXP 14
8800: IN
8801: AND
8802: PUSH
8803: LD_EXP 50
8807: PPUSH
8808: CALL_OW 255
8812: PUSH
8813: LD_INT 2
8815: EQUAL
8816: AND
8817: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8818: LD_EXP 47
8822: PPUSH
8823: CALL_OW 302
8827: PUSH
8828: LD_EXP 47
8832: PUSH
8833: LD_EXP 14
8837: IN
8838: AND
8839: PUSH
8840: LD_EXP 50
8844: PPUSH
8845: CALL_OW 255
8849: PUSH
8850: LD_INT 2
8852: EQUAL
8853: AND
8854: IFFALSE 8886
// begin Say ( Mike , DM-Med-5 ) ;
8856: LD_EXP 47
8860: PPUSH
8861: LD_STRING DM-Med-5
8863: PPUSH
8864: CALL_OW 88
// if hasKaia then
8868: LD_VAR 0 1
8872: IFFALSE 8886
// Say ( Kaia , DK-Med-6 ) ;
8874: LD_EXP 50
8878: PPUSH
8879: LD_STRING DK-Med-6
8881: PPUSH
8882: CALL_OW 88
// end ; if hasKaia then
8886: LD_VAR 0 1
8890: IFFALSE 9131
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8892: LD_INT 175
8894: PPUSH
8895: LD_INT 123
8897: PPUSH
8898: LD_INT 2
8900: PPUSH
8901: LD_INT 8
8903: NEG
8904: PPUSH
8905: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8909: LD_INT 175
8911: PPUSH
8912: LD_INT 123
8914: PPUSH
8915: LD_INT 2
8917: PPUSH
8918: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8922: LD_INT 175
8924: PPUSH
8925: LD_INT 123
8927: PPUSH
8928: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8932: LD_EXP 50
8936: PPUSH
8937: LD_STRING DK-Med-7
8939: PPUSH
8940: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8944: LD_EXP 50
8948: PPUSH
8949: LD_STRING DK-Med-8
8951: PPUSH
8952: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8956: LD_EXP 52
8960: PPUSH
8961: CALL_OW 302
8965: PUSH
8966: LD_EXP 52
8970: PUSH
8971: LD_EXP 14
8975: IN
8976: AND
8977: PUSH
8978: LD_EXP 52
8982: PPUSH
8983: CALL_OW 255
8987: PUSH
8988: LD_INT 2
8990: EQUAL
8991: AND
8992: IFFALSE 9050
// begin Say ( Markov , DMar-Med-9 ) ;
8994: LD_EXP 52
8998: PPUSH
8999: LD_STRING DMar-Med-9
9001: PPUSH
9002: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9006: LD_EXP 50
9010: PPUSH
9011: LD_STRING DK-Med-10
9013: PPUSH
9014: CALL_OW 88
// if hasGivi then
9018: LD_VAR 0 2
9022: IFFALSE 9038
// Say ( Kaia , DK-Med-11 ) else
9024: LD_EXP 50
9028: PPUSH
9029: LD_STRING DK-Med-11
9031: PPUSH
9032: CALL_OW 88
9036: GO 9050
// Say ( Kaia , DK-Med-a-11 ) ;
9038: LD_EXP 50
9042: PPUSH
9043: LD_STRING DK-Med-a-11
9045: PPUSH
9046: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9050: LD_EXP 49
9054: PPUSH
9055: CALL_OW 302
9059: PUSH
9060: LD_EXP 49
9064: PUSH
9065: LD_EXP 14
9069: IN
9070: AND
9071: PUSH
9072: LD_EXP 49
9076: PPUSH
9077: CALL_OW 255
9081: PUSH
9082: LD_INT 2
9084: EQUAL
9085: AND
9086: IFFALSE 9131
// begin Say ( Kamil , DKam-Med-12 ) ;
9088: LD_EXP 49
9092: PPUSH
9093: LD_STRING DKam-Med-12
9095: PPUSH
9096: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9100: LD_EXP 49
9104: PPUSH
9105: LD_STRING DKam-Med-13
9107: PPUSH
9108: CALL_OW 88
// if not hasExplosionCollected then
9112: LD_EXP 23
9116: NOT
9117: IFFALSE 9131
// Say ( Heike , DH-Med-d-14 ) ;
9119: LD_EXP 45
9123: PPUSH
9124: LD_STRING DH-Med-d-14
9126: PPUSH
9127: CALL_OW 88
// end ; end ; DialogueOff ;
9131: CALL_OW 7
// adminAreaDiscovered := true ;
9135: LD_ADDR_EXP 22
9139: PUSH
9140: LD_INT 1
9142: ST_TO_ADDR
// laundryAllowed := true ;
9143: LD_ADDR_EXP 26
9147: PUSH
9148: LD_INT 1
9150: ST_TO_ADDR
// end ;
9151: PPOPN 2
9153: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9154: LD_EXP 48
9158: NOT
9159: PUSH
9160: LD_EXP 55
9164: AND
9165: PUSH
9166: LD_EXP 55
9170: PUSH
9171: LD_EXP 14
9175: IN
9176: NOT
9177: AND
9178: PUSH
9179: LD_EXP 14
9183: PPUSH
9184: LD_INT 22
9186: PUSH
9187: LD_INT 2
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL_OW 72
9198: PUSH
9199: LD_INT 4
9201: GREATER
9202: AND
9203: PUSH
9204: LD_EXP 17
9208: NOT
9209: AND
9210: PUSH
9211: LD_EXP 30
9215: NOT
9216: AND
9217: IFFALSE 9934
9219: GO 9221
9221: DISABLE
9222: LD_INT 0
9224: PPUSH
9225: PPUSH
// begin DialogueOn ;
9226: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: LD_EXP 46
9239: PPUSH
9240: CALL_OW 302
9244: PUSH
9245: LD_EXP 46
9249: PUSH
9250: LD_EXP 14
9254: IN
9255: AND
9256: PUSH
9257: LD_EXP 46
9261: PPUSH
9262: CALL_OW 255
9266: PUSH
9267: LD_INT 2
9269: EQUAL
9270: AND
9271: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9272: LD_EXP 45
9276: PPUSH
9277: LD_STRING DH-Med-a-1
9279: PPUSH
9280: CALL_OW 88
// if hasGivi then
9284: LD_VAR 0 1
9288: IFFALSE 9304
// Say ( Givi , DG-Med-a-2 ) else
9290: LD_EXP 46
9294: PPUSH
9295: LD_STRING DG-Med-a-2
9297: PPUSH
9298: CALL_OW 88
9302: GO 9409
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9304: LD_EXP 14
9308: PUSH
9309: LD_EXP 56
9313: ISECT
9314: PPUSH
9315: LD_INT 22
9317: PUSH
9318: LD_INT 2
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 26
9327: PUSH
9328: LD_INT 1
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PPUSH
9339: CALL_OW 72
9343: PUSH
9344: LD_INT 1
9346: ARRAY
9347: PPUSH
9348: LD_STRING DArm-Med-f-2
9350: PPUSH
9351: CALL_OW 88
9355: NOT
9356: IFFALSE 9409
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9358: LD_EXP 14
9362: PUSH
9363: LD_EXP 56
9367: ISECT
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 26
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PPUSH
9393: CALL_OW 72
9397: PUSH
9398: LD_INT 1
9400: ARRAY
9401: PPUSH
9402: LD_STRING DArf-Med-f-2
9404: PPUSH
9405: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9409: LD_INT 154
9411: PPUSH
9412: LD_INT 119
9414: PPUSH
9415: LD_INT 70
9417: PPUSH
9418: CALL 19680 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9422: LD_EXP 45
9426: PPUSH
9427: LD_STRING DH-Med-a-3
9429: PPUSH
9430: CALL_OW 88
// if hasGivi then
9434: LD_VAR 0 1
9438: IFFALSE 9454
// Say ( Givi , DG-Med-a-4 ) else
9440: LD_EXP 46
9444: PPUSH
9445: LD_STRING DG-Med-a-4
9447: PPUSH
9448: CALL_OW 88
9452: GO 9559
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9454: LD_EXP 14
9458: PUSH
9459: LD_EXP 56
9463: ISECT
9464: PPUSH
9465: LD_INT 22
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 26
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PPUSH
9489: CALL_OW 72
9493: PUSH
9494: LD_INT 1
9496: ARRAY
9497: PPUSH
9498: LD_STRING DArm-Med-f-4
9500: PPUSH
9501: CALL_OW 88
9505: NOT
9506: IFFALSE 9559
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9508: LD_EXP 14
9512: PUSH
9513: LD_EXP 56
9517: ISECT
9518: PPUSH
9519: LD_INT 22
9521: PUSH
9522: LD_INT 2
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 26
9531: PUSH
9532: LD_INT 2
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PPUSH
9543: CALL_OW 72
9547: PUSH
9548: LD_INT 1
9550: ARRAY
9551: PPUSH
9552: LD_STRING DArf-Med-f-4
9554: PPUSH
9555: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9559: LD_ADDR_VAR 0 2
9563: PUSH
9564: LD_EXP 50
9568: PPUSH
9569: CALL_OW 302
9573: PUSH
9574: LD_EXP 50
9578: PUSH
9579: LD_EXP 14
9583: IN
9584: AND
9585: PUSH
9586: LD_EXP 50
9590: PPUSH
9591: CALL_OW 255
9595: PUSH
9596: LD_INT 2
9598: EQUAL
9599: AND
9600: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9601: LD_EXP 47
9605: PPUSH
9606: CALL_OW 302
9610: PUSH
9611: LD_EXP 47
9615: PUSH
9616: LD_EXP 14
9620: IN
9621: AND
9622: PUSH
9623: LD_EXP 47
9627: PPUSH
9628: CALL_OW 255
9632: PUSH
9633: LD_INT 2
9635: EQUAL
9636: AND
9637: IFFALSE 9669
// begin Say ( Mike , DM-Med-5 ) ;
9639: LD_EXP 47
9643: PPUSH
9644: LD_STRING DM-Med-5
9646: PPUSH
9647: CALL_OW 88
// if hasKaia then
9651: LD_VAR 0 2
9655: IFFALSE 9669
// Say ( Kaia , DK-Med-6 ) ;
9657: LD_EXP 50
9661: PPUSH
9662: LD_STRING DK-Med-6
9664: PPUSH
9665: CALL_OW 88
// end ; if hasKaia then
9669: LD_VAR 0 2
9673: IFFALSE 9914
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9675: LD_INT 175
9677: PPUSH
9678: LD_INT 123
9680: PPUSH
9681: LD_INT 2
9683: PPUSH
9684: LD_INT 8
9686: NEG
9687: PPUSH
9688: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9692: LD_INT 175
9694: PPUSH
9695: LD_INT 123
9697: PPUSH
9698: LD_INT 2
9700: PPUSH
9701: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9705: LD_INT 175
9707: PPUSH
9708: LD_INT 123
9710: PPUSH
9711: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9715: LD_EXP 50
9719: PPUSH
9720: LD_STRING DK-Med-7
9722: PPUSH
9723: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9727: LD_EXP 50
9731: PPUSH
9732: LD_STRING DK-Med-8
9734: PPUSH
9735: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9739: LD_EXP 52
9743: PPUSH
9744: CALL_OW 302
9748: PUSH
9749: LD_EXP 52
9753: PUSH
9754: LD_EXP 14
9758: IN
9759: AND
9760: PUSH
9761: LD_EXP 52
9765: PPUSH
9766: CALL_OW 255
9770: PUSH
9771: LD_INT 2
9773: EQUAL
9774: AND
9775: IFFALSE 9833
// begin Say ( Markov , DMar-Med-9 ) ;
9777: LD_EXP 52
9781: PPUSH
9782: LD_STRING DMar-Med-9
9784: PPUSH
9785: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9789: LD_EXP 50
9793: PPUSH
9794: LD_STRING DK-Med-10
9796: PPUSH
9797: CALL_OW 88
// if hasGivi then
9801: LD_VAR 0 1
9805: IFFALSE 9821
// Say ( Kaia , DK-Med-11 ) else
9807: LD_EXP 50
9811: PPUSH
9812: LD_STRING DK-Med-11
9814: PPUSH
9815: CALL_OW 88
9819: GO 9833
// Say ( Kaia , DK-Med-a-11 ) ;
9821: LD_EXP 50
9825: PPUSH
9826: LD_STRING DK-Med-a-11
9828: PPUSH
9829: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9833: LD_EXP 49
9837: PPUSH
9838: CALL_OW 302
9842: PUSH
9843: LD_EXP 49
9847: PUSH
9848: LD_EXP 14
9852: IN
9853: AND
9854: PUSH
9855: LD_EXP 49
9859: PPUSH
9860: CALL_OW 255
9864: PUSH
9865: LD_INT 2
9867: EQUAL
9868: AND
9869: IFFALSE 9914
// begin Say ( Kamil , DKam-Med-12 ) ;
9871: LD_EXP 49
9875: PPUSH
9876: LD_STRING DKam-Med-12
9878: PPUSH
9879: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9883: LD_EXP 49
9887: PPUSH
9888: LD_STRING DKam-Med-13
9890: PPUSH
9891: CALL_OW 88
// if not hasExplosionCollected then
9895: LD_EXP 23
9899: NOT
9900: IFFALSE 9914
// Say ( Heike , DH-Med-d-14 ) ;
9902: LD_EXP 45
9906: PPUSH
9907: LD_STRING DH-Med-d-14
9909: PPUSH
9910: CALL_OW 88
// end ; end ; DialogueOff ;
9914: CALL_OW 7
// adminAreaDiscovered := true ;
9918: LD_ADDR_EXP 22
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// laundryAllowed := true ;
9926: LD_ADDR_EXP 26
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// end ;
9934: PPOPN 2
9936: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9937: LD_EXP 48
9941: PUSH
9942: LD_EXP 55
9946: NOT
9947: AND
9948: PUSH
9949: LD_EXP 48
9953: PUSH
9954: LD_EXP 14
9958: IN
9959: NOT
9960: AND
9961: PUSH
9962: LD_EXP 14
9966: PPUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PPUSH
9977: CALL_OW 72
9981: PUSH
9982: LD_INT 4
9984: GREATER
9985: AND
9986: PUSH
9987: LD_EXP 17
9991: NOT
9992: AND
9993: PUSH
9994: LD_EXP 30
9998: NOT
9999: AND
10000: IFFALSE 10717
10002: GO 10004
10004: DISABLE
10005: LD_INT 0
10007: PPUSH
10008: PPUSH
// begin DialogueOn ;
10009: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10013: LD_ADDR_VAR 0 1
10017: PUSH
10018: LD_EXP 46
10022: PPUSH
10023: CALL_OW 302
10027: PUSH
10028: LD_EXP 46
10032: PUSH
10033: LD_EXP 14
10037: IN
10038: AND
10039: PUSH
10040: LD_EXP 46
10044: PPUSH
10045: CALL_OW 255
10049: PUSH
10050: LD_INT 2
10052: EQUAL
10053: AND
10054: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10055: LD_EXP 45
10059: PPUSH
10060: LD_STRING DH-Med-b-1
10062: PPUSH
10063: CALL_OW 88
// if hasGivi then
10067: LD_VAR 0 1
10071: IFFALSE 10087
// Say ( Givi , DG-Med-a-2 ) else
10073: LD_EXP 46
10077: PPUSH
10078: LD_STRING DG-Med-a-2
10080: PPUSH
10081: CALL_OW 88
10085: GO 10192
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10087: LD_EXP 14
10091: PUSH
10092: LD_EXP 56
10096: ISECT
10097: PPUSH
10098: LD_INT 22
10100: PUSH
10101: LD_INT 2
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 26
10110: PUSH
10111: LD_INT 1
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PPUSH
10122: CALL_OW 72
10126: PUSH
10127: LD_INT 1
10129: ARRAY
10130: PPUSH
10131: LD_STRING DArm-Med-f-2
10133: PPUSH
10134: CALL_OW 88
10138: NOT
10139: IFFALSE 10192
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10141: LD_EXP 14
10145: PUSH
10146: LD_EXP 56
10150: ISECT
10151: PPUSH
10152: LD_INT 22
10154: PUSH
10155: LD_INT 2
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 26
10164: PUSH
10165: LD_INT 2
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PPUSH
10176: CALL_OW 72
10180: PUSH
10181: LD_INT 1
10183: ARRAY
10184: PPUSH
10185: LD_STRING DArf-Med-f-2
10187: PPUSH
10188: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10192: LD_INT 154
10194: PPUSH
10195: LD_INT 119
10197: PPUSH
10198: LD_INT 70
10200: PPUSH
10201: CALL 19680 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10205: LD_EXP 45
10209: PPUSH
10210: LD_STRING DH-Med-a-3
10212: PPUSH
10213: CALL_OW 88
// if hasGivi then
10217: LD_VAR 0 1
10221: IFFALSE 10237
// Say ( Givi , DG-Med-a-4 ) else
10223: LD_EXP 46
10227: PPUSH
10228: LD_STRING DG-Med-a-4
10230: PPUSH
10231: CALL_OW 88
10235: GO 10342
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10237: LD_EXP 14
10241: PUSH
10242: LD_EXP 56
10246: ISECT
10247: PPUSH
10248: LD_INT 22
10250: PUSH
10251: LD_INT 2
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 26
10260: PUSH
10261: LD_INT 1
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL_OW 72
10276: PUSH
10277: LD_INT 1
10279: ARRAY
10280: PPUSH
10281: LD_STRING DArm-Med-f-4
10283: PPUSH
10284: CALL_OW 88
10288: NOT
10289: IFFALSE 10342
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10291: LD_EXP 14
10295: PUSH
10296: LD_EXP 56
10300: ISECT
10301: PPUSH
10302: LD_INT 22
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 26
10314: PUSH
10315: LD_INT 2
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PPUSH
10326: CALL_OW 72
10330: PUSH
10331: LD_INT 1
10333: ARRAY
10334: PPUSH
10335: LD_STRING DArf-Med-f-4
10337: PPUSH
10338: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10342: LD_ADDR_VAR 0 2
10346: PUSH
10347: LD_EXP 50
10351: PPUSH
10352: CALL_OW 302
10356: PUSH
10357: LD_EXP 50
10361: PUSH
10362: LD_EXP 14
10366: IN
10367: AND
10368: PUSH
10369: LD_EXP 50
10373: PPUSH
10374: CALL_OW 255
10378: PUSH
10379: LD_INT 2
10381: EQUAL
10382: AND
10383: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10384: LD_EXP 47
10388: PPUSH
10389: CALL_OW 302
10393: PUSH
10394: LD_EXP 47
10398: PUSH
10399: LD_EXP 14
10403: IN
10404: AND
10405: PUSH
10406: LD_EXP 47
10410: PPUSH
10411: CALL_OW 255
10415: PUSH
10416: LD_INT 2
10418: EQUAL
10419: AND
10420: IFFALSE 10452
// begin Say ( Mike , DM-Med-5 ) ;
10422: LD_EXP 47
10426: PPUSH
10427: LD_STRING DM-Med-5
10429: PPUSH
10430: CALL_OW 88
// if hasKaia then
10434: LD_VAR 0 2
10438: IFFALSE 10452
// Say ( Kaia , DK-Med-6 ) ;
10440: LD_EXP 50
10444: PPUSH
10445: LD_STRING DK-Med-6
10447: PPUSH
10448: CALL_OW 88
// end ; if hasKaia then
10452: LD_VAR 0 2
10456: IFFALSE 10697
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10458: LD_INT 175
10460: PPUSH
10461: LD_INT 123
10463: PPUSH
10464: LD_INT 2
10466: PPUSH
10467: LD_INT 8
10469: NEG
10470: PPUSH
10471: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10475: LD_INT 175
10477: PPUSH
10478: LD_INT 123
10480: PPUSH
10481: LD_INT 2
10483: PPUSH
10484: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10488: LD_INT 175
10490: PPUSH
10491: LD_INT 123
10493: PPUSH
10494: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10498: LD_EXP 50
10502: PPUSH
10503: LD_STRING DK-Med-7
10505: PPUSH
10506: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10510: LD_EXP 50
10514: PPUSH
10515: LD_STRING DK-Med-8
10517: PPUSH
10518: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10522: LD_EXP 52
10526: PPUSH
10527: CALL_OW 302
10531: PUSH
10532: LD_EXP 52
10536: PUSH
10537: LD_EXP 14
10541: IN
10542: AND
10543: PUSH
10544: LD_EXP 52
10548: PPUSH
10549: CALL_OW 255
10553: PUSH
10554: LD_INT 2
10556: EQUAL
10557: AND
10558: IFFALSE 10616
// begin Say ( Markov , DMar-Med-9 ) ;
10560: LD_EXP 52
10564: PPUSH
10565: LD_STRING DMar-Med-9
10567: PPUSH
10568: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10572: LD_EXP 50
10576: PPUSH
10577: LD_STRING DK-Med-10
10579: PPUSH
10580: CALL_OW 88
// if hasGivi then
10584: LD_VAR 0 1
10588: IFFALSE 10604
// Say ( Kaia , DK-Med-11 ) else
10590: LD_EXP 50
10594: PPUSH
10595: LD_STRING DK-Med-11
10597: PPUSH
10598: CALL_OW 88
10602: GO 10616
// Say ( Kaia , DK-Med-a-11 ) ;
10604: LD_EXP 50
10608: PPUSH
10609: LD_STRING DK-Med-a-11
10611: PPUSH
10612: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10616: LD_EXP 49
10620: PPUSH
10621: CALL_OW 302
10625: PUSH
10626: LD_EXP 49
10630: PUSH
10631: LD_EXP 14
10635: IN
10636: AND
10637: PUSH
10638: LD_EXP 49
10642: PPUSH
10643: CALL_OW 255
10647: PUSH
10648: LD_INT 2
10650: EQUAL
10651: AND
10652: IFFALSE 10697
// begin Say ( Kamil , DKam-Med-12 ) ;
10654: LD_EXP 49
10658: PPUSH
10659: LD_STRING DKam-Med-12
10661: PPUSH
10662: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10666: LD_EXP 49
10670: PPUSH
10671: LD_STRING DKam-Med-13
10673: PPUSH
10674: CALL_OW 88
// if not hasExplosionCollected then
10678: LD_EXP 23
10682: NOT
10683: IFFALSE 10697
// Say ( Heike , DH-Med-d-14 ) ;
10685: LD_EXP 45
10689: PPUSH
10690: LD_STRING DH-Med-d-14
10692: PPUSH
10693: CALL_OW 88
// end ; end ; DialogueOff ;
10697: CALL_OW 7
// adminAreaDiscovered := true ;
10701: LD_ADDR_EXP 22
10705: PUSH
10706: LD_INT 1
10708: ST_TO_ADDR
// laundryAllowed := true ;
10709: LD_ADDR_EXP 26
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// end ;
10717: PPOPN 2
10719: END
// every 0 0$1 trigger laundryAllowed do
10720: LD_EXP 26
10724: IFFALSE 10736
10726: GO 10728
10728: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10729: LD_STRING M1-laundry
10731: PPUSH
10732: CALL_OW 337
10736: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10737: LD_EXP 48
10741: NOT
10742: PUSH
10743: LD_EXP 55
10747: NOT
10748: AND
10749: PUSH
10750: LD_EXP 53
10754: PPUSH
10755: CALL_OW 302
10759: AND
10760: PUSH
10761: LD_EXP 53
10765: PUSH
10766: LD_EXP 14
10770: IN
10771: AND
10772: PUSH
10773: LD_EXP 53
10777: PPUSH
10778: CALL_OW 255
10782: PUSH
10783: LD_INT 2
10785: EQUAL
10786: AND
10787: PUSH
10788: LD_EXP 17
10792: NOT
10793: AND
10794: PUSH
10795: LD_EXP 30
10799: NOT
10800: AND
10801: IFFALSE 10957
10803: GO 10805
10805: DISABLE
// begin DialogueOn ;
10806: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10810: LD_INT 152
10812: PPUSH
10813: LD_INT 115
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: LD_INT 16
10821: NEG
10822: PPUSH
10823: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10827: LD_INT 152
10829: PPUSH
10830: LD_INT 115
10832: PPUSH
10833: LD_INT 2
10835: PPUSH
10836: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10840: LD_INT 152
10842: PPUSH
10843: LD_INT 115
10845: PPUSH
10846: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10850: LD_EXP 53
10854: PPUSH
10855: LD_STRING DO-Med-c-1
10857: PPUSH
10858: CALL_OW 88
// if not hasExplosionCollected then
10862: LD_EXP 23
10866: NOT
10867: IFFALSE 10883
// Say ( Heike , DH-Med-d-14 ) else
10869: LD_EXP 45
10873: PPUSH
10874: LD_STRING DH-Med-d-14
10876: PPUSH
10877: CALL_OW 88
10881: GO 10945
// begin Say ( Heike , DH-Med-c-2 ) ;
10883: LD_EXP 45
10887: PPUSH
10888: LD_STRING DH-Med-c-2
10890: PPUSH
10891: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10895: LD_EXP 50
10899: PPUSH
10900: CALL_OW 302
10904: PUSH
10905: LD_EXP 50
10909: PUSH
10910: LD_EXP 14
10914: IN
10915: AND
10916: PUSH
10917: LD_EXP 50
10921: PPUSH
10922: CALL_OW 255
10926: PUSH
10927: LD_INT 2
10929: EQUAL
10930: AND
10931: IFFALSE 10945
// Say ( Kaia , DK-Med-c-3 ) ;
10933: LD_EXP 50
10937: PPUSH
10938: LD_STRING DK-Med-c-3
10940: PPUSH
10941: CALL_OW 88
// end ; DialogueOff ;
10945: CALL_OW 7
// adminAreaDiscovered := true ;
10949: LD_ADDR_EXP 22
10953: PUSH
10954: LD_INT 1
10956: ST_TO_ADDR
// end ;
10957: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10958: LD_EXP 50
10962: PPUSH
10963: CALL_OW 256
10967: PUSH
10968: LD_INT 250
10970: LESS
10971: PUSH
10972: LD_EXP 50
10976: PUSH
10977: LD_EXP 14
10981: IN
10982: AND
10983: PUSH
10984: LD_EXP 17
10988: AND
10989: PUSH
10990: LD_EXP 24
10994: AND
10995: IFFALSE 11124
10997: GO 10999
10999: DISABLE
// begin DialogueOn ;
11000: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11004: LD_EXP 50
11008: PPUSH
11009: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11013: LD_EXP 50
11017: PPUSH
11018: LD_STRING DK-death-1
11020: PPUSH
11021: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11025: LD_EXP 45
11029: PPUSH
11030: LD_STRING DH-death-2
11032: PPUSH
11033: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11037: LD_EXP 50
11041: PPUSH
11042: LD_STRING DK-death-3
11044: PPUSH
11045: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11049: LD_EXP 50
11053: PPUSH
11054: LD_STRING DK-death-4
11056: PPUSH
11057: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11061: LD_EXP 50
11065: PPUSH
11066: LD_INT 8
11068: PPUSH
11069: CALL_OW 235
// ComStop ( Kaia ) ;
11073: LD_EXP 50
11077: PPUSH
11078: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11082: LD_INT 8
11084: PPUSH
11085: LD_INT 2
11087: PPUSH
11088: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11092: LD_ADDR_EXP 14
11096: PUSH
11097: LD_EXP 14
11101: PUSH
11102: LD_EXP 50
11106: DIFF
11107: ST_TO_ADDR
// DialogueOff ;
11108: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11112: LD_EXP 47
11116: PPUSH
11117: LD_STRING DM-death-5
11119: PPUSH
11120: CALL_OW 88
// end ;
11124: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11125: LD_EXP 25
11129: NOT
11130: PUSH
11131: LD_EXP 30
11135: NOT
11136: AND
11137: PUSH
11138: LD_EXP 58
11142: PUSH
11143: LD_EXP 14
11147: IN
11148: NOT
11149: AND
11150: PUSH
11151: LD_INT 2
11153: PPUSH
11154: LD_EXP 58
11158: PPUSH
11159: CALL_OW 292
11163: AND
11164: PUSH
11165: LD_EXP 45
11169: PPUSH
11170: LD_EXP 58
11174: PPUSH
11175: CALL_OW 296
11179: PUSH
11180: LD_INT 6
11182: LESS
11183: AND
11184: PUSH
11185: LD_EXP 17
11189: NOT
11190: AND
11191: IFFALSE 11415
11193: GO 11195
11195: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11196: LD_EXP 58
11200: PPUSH
11201: LD_EXP 45
11205: PPUSH
11206: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11210: LD_EXP 45
11214: PPUSH
11215: LD_EXP 58
11219: PPUSH
11220: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11224: LD_INT 10
11226: PPUSH
11227: CALL_OW 67
// DialogueOn ;
11231: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11235: LD_EXP 58
11239: PPUSH
11240: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11244: LD_EXP 45
11248: PPUSH
11249: LD_STRING DH-Deal-1
11251: PPUSH
11252: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11256: LD_EXP 58
11260: PPUSH
11261: LD_STRING DJ-Deal-2
11263: PPUSH
11264: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11268: LD_EXP 45
11272: PPUSH
11273: LD_STRING DH-Deal-3
11275: PPUSH
11276: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11280: LD_EXP 58
11284: PPUSH
11285: LD_STRING DJ-Deal-4
11287: PPUSH
11288: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11292: LD_EXP 58
11296: PPUSH
11297: LD_STRING DJ-Deal-5
11299: PPUSH
11300: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11304: LD_EXP 58
11308: PPUSH
11309: LD_STRING DJ-Deal-6
11311: PPUSH
11312: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11316: LD_EXP 58
11320: PPUSH
11321: LD_STRING DJ-Deal-7
11323: PPUSH
11324: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11328: LD_EXP 45
11332: PPUSH
11333: LD_STRING DH-Deal-8
11335: PPUSH
11336: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11340: LD_EXP 45
11344: PPUSH
11345: LD_STRING DH-Deal-9
11347: PPUSH
11348: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11352: LD_EXP 58
11356: PPUSH
11357: LD_STRING DJ-Deal-10
11359: PPUSH
11360: CALL_OW 88
// DialogueOff ;
11364: CALL_OW 7
// contactWithAmerican := true ;
11368: LD_ADDR_EXP 25
11372: PUSH
11373: LD_INT 1
11375: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11376: LD_STRING M1-american-out
11378: PPUSH
11379: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11383: LD_EXP 58
11387: PPUSH
11388: LD_INT 2
11390: PPUSH
11391: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11395: LD_ADDR_EXP 14
11399: PUSH
11400: LD_EXP 14
11404: PPUSH
11405: LD_EXP 58
11409: PPUSH
11410: CALL 66596 0 2
11414: ST_TO_ADDR
// end ;
11415: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11416: LD_EXP 25
11420: PUSH
11421: LD_EXP 30
11425: NOT
11426: AND
11427: PUSH
11428: LD_EXP 58
11432: PUSH
11433: LD_EXP 14
11437: IN
11438: NOT
11439: AND
11440: PUSH
11441: LD_INT 2
11443: PPUSH
11444: LD_EXP 58
11448: PPUSH
11449: CALL_OW 292
11453: AND
11454: PUSH
11455: LD_EXP 45
11459: PPUSH
11460: LD_EXP 58
11464: PPUSH
11465: CALL_OW 296
11469: PUSH
11470: LD_INT 6
11472: LESS
11473: AND
11474: PUSH
11475: LD_EXP 17
11479: NOT
11480: AND
11481: IFFALSE 11606
11483: GO 11485
11485: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11486: LD_EXP 58
11490: PPUSH
11491: LD_EXP 45
11495: PPUSH
11496: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11500: LD_EXP 45
11504: PPUSH
11505: LD_EXP 58
11509: PPUSH
11510: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11514: LD_INT 10
11516: PPUSH
11517: CALL_OW 67
// DialogueOn ;
11521: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11525: LD_EXP 58
11529: PPUSH
11530: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11534: LD_EXP 58
11538: PPUSH
11539: LD_STRING DJ-Escort-1
11541: PPUSH
11542: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11546: LD_EXP 45
11550: PPUSH
11551: LD_STRING DH-Escort-2
11553: PPUSH
11554: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11558: LD_EXP 58
11562: PPUSH
11563: LD_STRING DJ-Escort-3
11565: PPUSH
11566: CALL_OW 88
// DialogueOff ;
11570: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11574: LD_EXP 58
11578: PPUSH
11579: LD_INT 2
11581: PPUSH
11582: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11586: LD_ADDR_EXP 14
11590: PUSH
11591: LD_EXP 14
11595: PPUSH
11596: LD_EXP 58
11600: PPUSH
11601: CALL 66596 0 2
11605: ST_TO_ADDR
// end ;
11606: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11607: LD_EXP 25
11611: PUSH
11612: LD_EXP 30
11616: NOT
11617: AND
11618: PUSH
11619: LD_EXP 57
11623: PUSH
11624: LD_EXP 14
11628: DIFF
11629: PPUSH
11630: LD_INT 22
11632: PUSH
11633: LD_INT 4
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 120
11645: PUSH
11646: LD_INT 1
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 101
11659: PUSH
11660: LD_INT 2
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 72
11676: AND
11677: PUSH
11678: LD_EXP 17
11682: NOT
11683: AND
11684: IFFALSE 11911
11686: GO 11688
11688: DISABLE
11689: LD_INT 0
11691: PPUSH
// begin enable ;
11692: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11693: LD_ADDR_VAR 0 1
11697: PUSH
11698: LD_EXP 57
11702: PUSH
11703: LD_EXP 14
11707: DIFF
11708: PPUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 4
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 91
11721: PUSH
11722: LD_EXP 45
11726: PUSH
11727: LD_INT 6
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 101
11737: PUSH
11738: LD_INT 2
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: PPUSH
11750: CALL_OW 72
11754: PPUSH
11755: LD_EXP 45
11759: PPUSH
11760: CALL_OW 74
11764: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11765: LD_VAR 0 1
11769: PPUSH
11770: LD_EXP 45
11774: PPUSH
11775: CALL_OW 296
11779: PUSH
11780: LD_INT 6
11782: LESS
11783: IFFALSE 11911
// begin DialogueOn ;
11785: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11798: LD_EXP 45
11802: PPUSH
11803: LD_STRING DH-USsol-1
11805: PPUSH
11806: CALL_OW 88
// if un <> Jerry then
11810: LD_VAR 0 1
11814: PUSH
11815: LD_EXP 60
11819: NONEQUAL
11820: IFFALSE 11863
// if GetSex ( un ) = sex_male then
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL_OW 258
11831: PUSH
11832: LD_INT 1
11834: EQUAL
11835: IFFALSE 11851
// Say ( un , DUSM-USsol-2 ) else
11837: LD_VAR 0 1
11841: PPUSH
11842: LD_STRING DUSM-USsol-2
11844: PPUSH
11845: CALL_OW 88
11849: GO 11863
// Say ( un , DUSF-USsol-2 ) ;
11851: LD_VAR 0 1
11855: PPUSH
11856: LD_STRING DUSF-USsol-2
11858: PPUSH
11859: CALL_OW 88
// DialogueOff ;
11863: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11867: LD_ADDR_EXP 14
11871: PUSH
11872: LD_EXP 14
11876: PPUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL 66596 0 2
11886: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11887: LD_VAR 0 1
11891: PPUSH
11892: LD_INT 1
11894: PPUSH
11895: CALL_OW 109
// SetSide ( un , 2 ) ;
11899: LD_VAR 0 1
11903: PPUSH
11904: LD_INT 2
11906: PPUSH
11907: CALL_OW 235
// end ; end ;
11911: PPOPN 1
11913: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11914: LD_EXP 56
11918: PUSH
11919: LD_EXP 30
11923: NOT
11924: AND
11925: PUSH
11926: LD_EXP 56
11930: PUSH
11931: LD_EXP 14
11935: DIFF
11936: PPUSH
11937: LD_INT 3
11939: PUSH
11940: LD_INT 120
11942: PUSH
11943: LD_INT 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 91
11956: PUSH
11957: LD_EXP 45
11961: PUSH
11962: LD_INT 6
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 101
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 72
11989: AND
11990: PUSH
11991: LD_EXP 17
11995: NOT
11996: AND
11997: IFFALSE 12212
11999: GO 12001
12001: DISABLE
12002: LD_INT 0
12004: PPUSH
// begin enable ;
12005: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12006: LD_ADDR_VAR 0 1
12010: PUSH
12011: LD_EXP 56
12015: PUSH
12016: LD_EXP 14
12020: DIFF
12021: PPUSH
12022: LD_INT 22
12024: PUSH
12025: LD_INT 5
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 91
12034: PUSH
12035: LD_EXP 45
12039: PUSH
12040: LD_INT 6
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 101
12050: PUSH
12051: LD_INT 2
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: PPUSH
12063: CALL_OW 72
12067: PPUSH
12068: LD_EXP 45
12072: PPUSH
12073: CALL_OW 74
12077: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12078: LD_VAR 0 1
12082: PPUSH
12083: LD_EXP 45
12087: PPUSH
12088: CALL_OW 296
12092: PUSH
12093: LD_INT 6
12095: LESS
12096: IFFALSE 12212
// begin DialogueOn ;
12098: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12102: LD_VAR 0 1
12106: PPUSH
12107: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12111: LD_EXP 45
12115: PPUSH
12116: LD_STRING DH-USsol-1
12118: PPUSH
12119: CALL_OW 88
// if GetSex ( un ) = sex_male then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 258
12132: PUSH
12133: LD_INT 1
12135: EQUAL
12136: IFFALSE 12152
// Say ( un , DArm-USsol-2 ) else
12138: LD_VAR 0 1
12142: PPUSH
12143: LD_STRING DArm-USsol-2
12145: PPUSH
12146: CALL_OW 88
12150: GO 12164
// Say ( un , DArf-USsol-3 ) ;
12152: LD_VAR 0 1
12156: PPUSH
12157: LD_STRING DArf-USsol-3
12159: PPUSH
12160: CALL_OW 88
// DialogueOff ;
12164: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12168: LD_ADDR_EXP 14
12172: PUSH
12173: LD_EXP 14
12177: PPUSH
12178: LD_VAR 0 1
12182: PPUSH
12183: CALL 66596 0 2
12187: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12188: LD_VAR 0 1
12192: PPUSH
12193: LD_INT 1
12195: PPUSH
12196: CALL_OW 109
// SetSide ( un , 2 ) ;
12200: LD_VAR 0 1
12204: PPUSH
12205: LD_INT 2
12207: PPUSH
12208: CALL_OW 235
// end ; end ;
12212: PPOPN 1
12214: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12215: LD_EXP 57
12219: PPUSH
12220: LD_INT 101
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PPUSH
12230: CALL_OW 72
12234: PUSH
12235: LD_EXP 14
12239: PPUSH
12240: LD_INT 22
12242: PUSH
12243: LD_INT 2
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 72
12254: PUSH
12255: LD_INT 5
12257: GREATER
12258: AND
12259: PUSH
12260: LD_EXP 10
12264: NOT
12265: AND
12266: PUSH
12267: LD_EXP 30
12271: NOT
12272: AND
12273: PUSH
12274: LD_EXP 25
12278: NOT
12279: AND
12280: PUSH
12281: LD_EXP 17
12285: NOT
12286: AND
12287: IFFALSE 12402
12289: GO 12291
12291: DISABLE
12292: LD_INT 0
12294: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12295: LD_ADDR_VAR 0 1
12299: PUSH
12300: LD_EXP 57
12304: PPUSH
12305: LD_INT 22
12307: PUSH
12308: LD_INT 4
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 101
12317: PUSH
12318: LD_INT 2
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PPUSH
12329: CALL_OW 72
12333: PUSH
12334: LD_INT 1
12336: ARRAY
12337: ST_TO_ADDR
// DialogueOn ;
12338: CALL_OW 6
// if GetSex ( un ) = sex_male then
12342: LD_VAR 0 1
12346: PPUSH
12347: CALL_OW 258
12351: PUSH
12352: LD_INT 1
12354: EQUAL
12355: IFFALSE 12371
// Say ( un , DUSm-USsol-a-2 ) else
12357: LD_VAR 0 1
12361: PPUSH
12362: LD_STRING DUSm-USsol-a-2
12364: PPUSH
12365: CALL_OW 88
12369: GO 12383
// Say ( un , DUSf-USsol-a-2 ) ;
12371: LD_VAR 0 1
12375: PPUSH
12376: LD_STRING DUSf-USsol-a-2
12378: PPUSH
12379: CALL_OW 88
// DialogueOff ;
12383: CALL_OW 7
// wait ( 0 0$2 ) ;
12387: LD_INT 70
12389: PPUSH
12390: CALL_OW 67
// isAlarm := true ;
12394: LD_ADDR_EXP 17
12398: PUSH
12399: LD_INT 1
12401: ST_TO_ADDR
// end ;
12402: PPOPN 1
12404: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12405: LD_EXP 17
12409: NOT
12410: PUSH
12411: LD_EXP 46
12415: PPUSH
12416: CALL_OW 302
12420: AND
12421: PUSH
12422: LD_EXP 46
12426: PPUSH
12427: CALL_OW 255
12431: PUSH
12432: LD_INT 2
12434: EQUAL
12435: AND
12436: PUSH
12437: LD_EXP 26
12441: AND
12442: PUSH
12443: LD_EXP 28
12447: NOT
12448: AND
12449: PUSH
12450: LD_EXP 27
12454: NOT
12455: AND
12456: PUSH
12457: LD_EXP 30
12461: NOT
12462: AND
12463: PUSH
12464: LD_EXP 46
12468: PPUSH
12469: LD_INT 165
12471: PPUSH
12472: CALL 19993 0 2
12476: AND
12477: IFFALSE 12609
12479: GO 12481
12481: DISABLE
// begin enable ;
12482: ENABLE
// InGameOn ;
12483: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12487: LD_EXP 46
12491: PPUSH
12492: LD_INT 5
12494: PPUSH
12495: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12499: LD_INT 165
12501: PPUSH
12502: LD_INT 5
12504: PPUSH
12505: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12509: LD_EXP 46
12513: PPUSH
12514: LD_INT 165
12516: PPUSH
12517: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12521: LD_INT 35
12523: PPUSH
12524: CALL_OW 67
// until IsInUnit ( Givi ) ;
12528: LD_EXP 46
12532: PPUSH
12533: CALL_OW 310
12537: IFFALSE 12521
// case Query ( GiviInLaundry ) of 1 :
12539: LD_STRING GiviInLaundry
12541: PPUSH
12542: CALL_OW 97
12546: PUSH
12547: LD_INT 1
12549: DOUBLE
12550: EQUAL
12551: IFTRUE 12555
12553: GO 12562
12555: POP
// SpawnGiviAsRussian ; 2 :
12556: CALL 1910 0 0
12560: GO 12574
12562: LD_INT 2
12564: DOUBLE
12565: EQUAL
12566: IFTRUE 12570
12568: GO 12573
12570: POP
// ; end ;
12571: GO 12574
12573: POP
// ComExitBuilding ( Givi ) ;
12574: LD_EXP 46
12578: PPUSH
12579: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12583: LD_EXP 46
12587: PPUSH
12588: LD_INT 2
12590: PPUSH
12591: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12595: LD_INT 165
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: CALL_OW 235
// InGameOff ;
12605: CALL_OW 9
// end ;
12609: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12610: LD_EXP 17
12614: NOT
12615: PUSH
12616: LD_EXP 28
12620: AND
12621: PUSH
12622: LD_EXP 46
12626: PPUSH
12627: CALL_OW 255
12631: PUSH
12632: LD_INT 2
12634: EQUAL
12635: AND
12636: PUSH
12637: LD_EXP 46
12641: PPUSH
12642: CALL_OW 248
12646: PUSH
12647: LD_INT 3
12649: EQUAL
12650: AND
12651: PUSH
12652: LD_EXP 46
12656: PPUSH
12657: LD_INT 119
12659: PPUSH
12660: CALL 19993 0 2
12664: AND
12665: PUSH
12666: LD_EXP 30
12670: NOT
12671: AND
12672: IFFALSE 12926
12674: GO 12676
12676: DISABLE
// begin InGameOn ;
12677: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12681: LD_EXP 46
12685: PPUSH
12686: LD_INT 3
12688: PPUSH
12689: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12693: LD_INT 10
12695: PPUSH
12696: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12700: LD_EXP 46
12704: PPUSH
12705: LD_INT 119
12707: PPUSH
12708: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12712: LD_INT 35
12714: PPUSH
12715: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12719: LD_EXP 46
12723: PPUSH
12724: LD_INT 119
12726: PPUSH
12727: CALL_OW 120
// until IsInUnit ( Givi ) ;
12731: LD_EXP 46
12735: PPUSH
12736: CALL_OW 310
12740: IFFALSE 12712
// DialogueOn ;
12742: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12746: LD_EXP 46
12750: PPUSH
12751: LD_STRING DG-Captive-1
12753: PPUSH
12754: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12758: LD_EXP 64
12762: PPUSH
12763: LD_STRING DCom-Captive-2
12765: PPUSH
12766: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12770: LD_EXP 46
12774: PPUSH
12775: LD_STRING DG-Captive-3
12777: PPUSH
12778: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12782: LD_EXP 64
12786: PPUSH
12787: LD_STRING DCom-Captive-4
12789: PPUSH
12790: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12794: LD_EXP 64
12798: PPUSH
12799: CALL_OW 64
// DialogueOff ;
12803: CALL_OW 7
// InGameOff ;
12807: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12811: LD_EXP 46
12815: PPUSH
12816: LD_INT 2
12818: PPUSH
12819: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12823: LD_EXP 46
12827: PPUSH
12828: CALL_OW 122
// if Aviradze then
12832: LD_EXP 55
12836: IFFALSE 12879
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12838: LD_ADDR_EXP 14
12842: PUSH
12843: LD_EXP 14
12847: PPUSH
12848: LD_EXP 55
12852: PPUSH
12853: CALL 66596 0 2
12857: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12858: LD_EXP 55
12862: PPUSH
12863: LD_INT 2
12865: PPUSH
12866: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12870: LD_EXP 55
12874: PPUSH
12875: CALL_OW 122
// end ; if Ibrahim then
12879: LD_EXP 48
12883: IFFALSE 12926
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12885: LD_ADDR_EXP 14
12889: PUSH
12890: LD_EXP 14
12894: PPUSH
12895: LD_EXP 48
12899: PPUSH
12900: CALL 66596 0 2
12904: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12905: LD_EXP 48
12909: PPUSH
12910: LD_INT 2
12912: PPUSH
12913: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12917: LD_EXP 48
12921: PPUSH
12922: CALL_OW 122
// end ; end ;
12926: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12927: LD_EXP 17
12931: NOT
12932: PUSH
12933: LD_EXP 27
12937: AND
12938: PUSH
12939: LD_EXP 45
12943: PPUSH
12944: CALL_OW 248
12948: PUSH
12949: LD_INT 3
12951: EQUAL
12952: AND
12953: PUSH
12954: LD_EXP 45
12958: PPUSH
12959: LD_INT 119
12961: PPUSH
12962: CALL 19993 0 2
12966: AND
12967: PUSH
12968: LD_EXP 30
12972: NOT
12973: AND
12974: IFFALSE 13273
12976: GO 12978
12978: DISABLE
// begin InGameOn ;
12979: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12983: LD_EXP 45
12987: PPUSH
12988: LD_INT 3
12990: PPUSH
12991: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12995: LD_INT 10
12997: PPUSH
12998: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13002: LD_EXP 45
13006: PPUSH
13007: LD_INT 119
13009: PPUSH
13010: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13014: LD_INT 35
13016: PPUSH
13017: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13021: LD_EXP 45
13025: PPUSH
13026: LD_INT 119
13028: PPUSH
13029: CALL_OW 120
// until IsInUnit ( Heike ) ;
13033: LD_EXP 45
13037: PPUSH
13038: CALL_OW 310
13042: IFFALSE 13014
// wait ( 0 0$1 ) ;
13044: LD_INT 35
13046: PPUSH
13047: CALL_OW 67
// DialogueOn ;
13051: CALL_OW 6
// if Aviradze and Ibrahim then
13055: LD_EXP 55
13059: PUSH
13060: LD_EXP 48
13064: AND
13065: IFFALSE 13081
// Say ( Heike , DH-Captive-a-1 ) else
13067: LD_EXP 45
13071: PPUSH
13072: LD_STRING DH-Captive-a-1
13074: PPUSH
13075: CALL_OW 88
13079: GO 13093
// Say ( Heike , DH-Captive-a-b-1 ) ;
13081: LD_EXP 45
13085: PPUSH
13086: LD_STRING DH-Captive-a-b-1
13088: PPUSH
13089: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13093: LD_EXP 64
13097: PPUSH
13098: LD_STRING DCom-Captive-a-2
13100: PPUSH
13101: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13105: LD_EXP 45
13109: PPUSH
13110: LD_STRING DH-Captive-a-3
13112: PPUSH
13113: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13117: LD_EXP 64
13121: PPUSH
13122: LD_STRING DCom-Captive-a-4
13124: PPUSH
13125: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13129: LD_EXP 45
13133: PPUSH
13134: LD_STRING DH-Captive-a-5
13136: PPUSH
13137: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13141: LD_EXP 64
13145: PPUSH
13146: CALL_OW 64
// DialogueOff ;
13150: CALL_OW 7
// InGameOff ;
13154: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13158: LD_EXP 45
13162: PPUSH
13163: LD_INT 2
13165: PPUSH
13166: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13170: LD_EXP 45
13174: PPUSH
13175: CALL_OW 122
// if Aviradze then
13179: LD_EXP 55
13183: IFFALSE 13226
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13185: LD_ADDR_EXP 14
13189: PUSH
13190: LD_EXP 14
13194: PPUSH
13195: LD_EXP 55
13199: PPUSH
13200: CALL 66596 0 2
13204: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13205: LD_EXP 55
13209: PPUSH
13210: LD_INT 2
13212: PPUSH
13213: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13217: LD_EXP 55
13221: PPUSH
13222: CALL_OW 122
// end ; if Ibrahim then
13226: LD_EXP 48
13230: IFFALSE 13273
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13232: LD_ADDR_EXP 14
13236: PUSH
13237: LD_EXP 14
13241: PPUSH
13242: LD_EXP 48
13246: PPUSH
13247: CALL 66596 0 2
13251: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13252: LD_EXP 48
13256: PPUSH
13257: LD_INT 2
13259: PPUSH
13260: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13264: LD_EXP 48
13268: PPUSH
13269: CALL_OW 122
// end ; end ;
13273: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13274: LD_INT 2
13276: PUSH
13277: LD_INT 25
13279: PUSH
13280: LD_INT 32
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 25
13289: PUSH
13290: LD_INT 34
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 69
13306: IFFALSE 13318
13308: GO 13310
13310: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13311: LD_STRING M1-weapons-out
13313: PPUSH
13314: CALL_OW 604
13318: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13319: LD_INT 2
13321: PPUSH
13322: LD_EXP 60
13326: PPUSH
13327: CALL_OW 292
13331: PUSH
13332: LD_EXP 45
13336: PPUSH
13337: LD_EXP 60
13341: PPUSH
13342: CALL_OW 296
13346: AND
13347: PUSH
13348: LD_EXP 17
13352: NOT
13353: AND
13354: PUSH
13355: LD_EXP 30
13359: NOT
13360: AND
13361: IFFALSE 14219
13363: GO 13365
13365: DISABLE
13366: LD_INT 0
13368: PPUSH
13369: PPUSH
// begin if contactWithAmerican then
13370: LD_EXP 25
13374: IFFALSE 13471
// begin DialogueOn ;
13376: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13380: LD_EXP 60
13384: PPUSH
13385: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13389: LD_EXP 45
13393: PPUSH
13394: LD_STRING DH-USsol-1
13396: PPUSH
13397: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13401: LD_EXP 60
13405: PPUSH
13406: LD_INT 2
13408: PPUSH
13409: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13413: LD_ADDR_EXP 57
13417: PUSH
13418: LD_EXP 57
13422: PPUSH
13423: LD_EXP 60
13427: PPUSH
13428: CALL 66596 0 2
13432: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13433: LD_ADDR_EXP 14
13437: PUSH
13438: LD_EXP 14
13442: PPUSH
13443: LD_EXP 47
13447: PPUSH
13448: CALL 66596 0 2
13452: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13453: LD_EXP 60
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 109
// DialogueOff ;
13465: CALL_OW 7
// exit ;
13469: GO 14219
// end ; DialogueOn ;
13471: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13475: LD_EXP 60
13479: PPUSH
13480: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13484: LD_EXP 60
13488: PPUSH
13489: LD_STRING DJy-Food-1
13491: PPUSH
13492: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13496: LD_EXP 45
13500: PPUSH
13501: LD_STRING DH-Food-2
13503: PPUSH
13504: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13508: LD_EXP 60
13512: PPUSH
13513: LD_STRING DJy-Food-3
13515: PPUSH
13516: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13520: LD_EXP 60
13524: PPUSH
13525: LD_STRING DJy-Food-4
13527: PPUSH
13528: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13532: LD_EXP 45
13536: PPUSH
13537: LD_STRING DH-Food-5
13539: PPUSH
13540: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13544: LD_EXP 60
13548: PPUSH
13549: LD_STRING DJy-Food-6
13551: PPUSH
13552: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13556: LD_EXP 60
13560: PPUSH
13561: LD_STRING DJy-Food-7
13563: PPUSH
13564: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13568: LD_EXP 60
13572: PPUSH
13573: LD_STRING DJy-Food-8
13575: PPUSH
13576: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13580: LD_EXP 45
13584: PPUSH
13585: LD_STRING DH-Food-9
13587: PPUSH
13588: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13592: LD_EXP 60
13596: PPUSH
13597: LD_STRING DJy-Food-10
13599: PPUSH
13600: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13604: LD_EXP 45
13608: PPUSH
13609: LD_STRING DH-Food-11
13611: PPUSH
13612: CALL_OW 88
// DialogueOff ;
13616: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13620: LD_STRING M3
13622: PPUSH
13623: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13627: LD_INT 5
13629: PPUSH
13630: LD_INT 215
13632: PPUSH
13633: LD_INT 117
13635: PPUSH
13636: LD_INT 0
13638: PPUSH
13639: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13643: LD_INT 215
13645: PPUSH
13646: LD_INT 118
13648: PPUSH
13649: LD_INT 2
13651: PPUSH
13652: LD_INT 6
13654: NEG
13655: PPUSH
13656: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13660: LD_INT 215
13662: PPUSH
13663: LD_INT 118
13665: PPUSH
13666: LD_INT 2
13668: PPUSH
13669: CALL_OW 331
// foodDelivered := false ;
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_INT 0
13680: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13681: LD_INT 35
13683: PPUSH
13684: CALL_OW 67
// if hasMuchin then
13688: LD_EXP 30
13692: IFFALSE 13696
// continue ;
13694: GO 13681
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13696: LD_ADDR_VAR 0 1
13700: PUSH
13701: LD_EXP 14
13705: PUSH
13706: LD_EXP 45
13710: UNION
13711: PPUSH
13712: LD_INT 91
13714: PUSH
13715: LD_EXP 60
13719: PUSH
13720: LD_INT 6
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 33
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PPUSH
13742: CALL_OW 72
13746: PUSH
13747: FOR_IN
13748: IFFALSE 13948
// if Carry ( i ) then
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 281
13759: IFFALSE 13946
// begin DialogueOn ;
13761: CALL_OW 6
// foodDelivered := true ;
13765: LD_ADDR_VAR 0 2
13769: PUSH
13770: LD_INT 1
13772: ST_TO_ADDR
// case i of Heike :
13773: LD_VAR 0 1
13777: PUSH
13778: LD_EXP 45
13782: DOUBLE
13783: EQUAL
13784: IFTRUE 13788
13786: GO 13803
13788: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13789: LD_EXP 45
13793: PPUSH
13794: LD_STRING DH-Food-12
13796: PPUSH
13797: CALL_OW 88
13801: GO 13929
13803: LD_EXP 50
13807: DOUBLE
13808: EQUAL
13809: IFTRUE 13813
13811: GO 13828
13813: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13814: LD_EXP 50
13818: PPUSH
13819: LD_STRING DK-Food-a-12
13821: PPUSH
13822: CALL_OW 88
13826: GO 13929
13828: LD_EXP 52
13832: DOUBLE
13833: EQUAL
13834: IFTRUE 13838
13836: GO 13853
13838: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13839: LD_EXP 52
13843: PPUSH
13844: LD_STRING DMar-Food-a-12
13846: PPUSH
13847: CALL_OW 88
13851: GO 13929
13853: LD_EXP 46
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 13878
13863: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13864: LD_EXP 46
13868: PPUSH
13869: LD_STRING DG-Food-a-14
13871: PPUSH
13872: CALL_OW 88
13876: GO 13929
13878: LD_EXP 47
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 13903
13888: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13889: LD_EXP 47
13893: PPUSH
13894: LD_STRING DM-Food-a-15
13896: PPUSH
13897: CALL_OW 88
13901: GO 13929
13903: LD_EXP 49
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 13928
13913: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13914: LD_EXP 49
13918: PPUSH
13919: LD_STRING DKam-Food-a-16
13921: PPUSH
13922: CALL_OW 88
13926: GO 13929
13928: POP
// SetCargo ( i , mat_cans , 0 ) ;
13929: LD_VAR 0 1
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: LD_INT 0
13939: PPUSH
13940: CALL_OW 290
// break ;
13944: GO 13948
// end ;
13946: GO 13747
13948: POP
13949: POP
// until foodDelivered ;
13950: LD_VAR 0 2
13954: IFFALSE 13681
// givenFood := true ;
13956: LD_ADDR_EXP 33
13960: PUSH
13961: LD_INT 1
13963: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13964: LD_EXP 60
13968: PPUSH
13969: LD_STRING DJy-Food-13
13971: PPUSH
13972: CALL_OW 88
// hasVirus := true ;
13976: LD_ADDR_EXP 31
13980: PUSH
13981: LD_INT 1
13983: ST_TO_ADDR
// if not americanContact then
13984: LD_EXP 10
13988: NOT
13989: IFFALSE 14039
// begin Say ( Heike , DH-Food-14 ) ;
13991: LD_EXP 45
13995: PPUSH
13996: LD_STRING DH-Food-14
13998: PPUSH
13999: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14003: LD_EXP 60
14007: PPUSH
14008: LD_STRING DJy-Food-15
14010: PPUSH
14011: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14015: LD_EXP 60
14019: PPUSH
14020: LD_STRING DJy-Food-16
14022: PPUSH
14023: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14027: LD_EXP 60
14031: PPUSH
14032: LD_STRING DJy-Food-17
14034: PPUSH
14035: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14039: LD_STRING M3-out
14041: PPUSH
14042: CALL_OW 337
// DialogueOff ;
14046: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14050: LD_EXP 60
14054: PPUSH
14055: LD_INT 1
14057: PPUSH
14058: LD_INT 10
14060: PPUSH
14061: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14065: LD_EXP 60
14069: PPUSH
14070: LD_INT 95
14072: PPUSH
14073: LD_INT 17
14075: PPUSH
14076: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14080: LD_INT 35
14082: PPUSH
14083: CALL_OW 67
// if not HasTask ( Jerry ) then
14087: LD_EXP 60
14091: PPUSH
14092: CALL_OW 314
14096: NOT
14097: IFFALSE 14114
// ComMoveXY ( Jerry , 95 , 17 ) ;
14099: LD_EXP 60
14103: PPUSH
14104: LD_INT 95
14106: PPUSH
14107: LD_INT 17
14109: PPUSH
14110: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14114: LD_EXP 60
14118: PPUSH
14119: LD_INT 95
14121: PPUSH
14122: LD_INT 17
14124: PPUSH
14125: CALL_OW 307
14129: IFFALSE 14080
// SetCargo ( Jerry , mat_cans , 0 ) ;
14131: LD_EXP 60
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: LD_INT 0
14141: PPUSH
14142: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14146: LD_ADDR_EXP 57
14150: PUSH
14151: LD_EXP 57
14155: PPUSH
14156: LD_EXP 60
14160: PPUSH
14161: CALL 66596 0 2
14165: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14166: LD_ADDR_VAR 0 1
14170: PUSH
14171: LD_INT 22
14173: PUSH
14174: LD_INT 4
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 23
14183: PUSH
14184: LD_INT 1
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PPUSH
14195: CALL_OW 69
14199: PUSH
14200: FOR_IN
14201: IFFALSE 14217
// SetLives ( i , 1000 ) ;
14203: LD_VAR 0 1
14207: PPUSH
14208: LD_INT 1000
14210: PPUSH
14211: CALL_OW 234
14215: GO 14200
14217: POP
14218: POP
// end ;
14219: PPOPN 2
14221: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14222: LD_EXP 30
14226: NOT
14227: PUSH
14228: LD_EXP 6
14232: AND
14233: IFFALSE 14664
14235: GO 14237
14237: DISABLE
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
// begin tmp := [ ] ;
14242: LD_ADDR_VAR 0 2
14246: PUSH
14247: EMPTY
14248: ST_TO_ADDR
// uc_side := 3 ;
14249: LD_ADDR_OWVAR 20
14253: PUSH
14254: LD_INT 3
14256: ST_TO_ADDR
// uc_nation := 3 ;
14257: LD_ADDR_OWVAR 21
14261: PUSH
14262: LD_INT 3
14264: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14265: LD_INT 1
14267: PPUSH
14268: LD_INT 8
14270: PPUSH
14271: CALL_OW 381
// un := CreateHuman ;
14275: LD_ADDR_VAR 0 1
14279: PUSH
14280: CALL_OW 44
14284: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14285: LD_VAR 0 1
14289: PPUSH
14290: LD_INT 173
14292: PPUSH
14293: LD_INT 104
14295: PPUSH
14296: LD_INT 0
14298: PPUSH
14299: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14303: LD_ADDR_VAR 0 2
14307: PUSH
14308: LD_VAR 0 2
14312: PPUSH
14313: LD_VAR 0 1
14317: PPUSH
14318: CALL 66596 0 2
14322: ST_TO_ADDR
// un := CreateHuman ;
14323: LD_ADDR_VAR 0 1
14327: PUSH
14328: CALL_OW 44
14332: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14333: LD_VAR 0 1
14337: PPUSH
14338: LD_INT 73
14340: PPUSH
14341: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14345: LD_ADDR_VAR 0 2
14349: PUSH
14350: LD_VAR 0 2
14354: PPUSH
14355: LD_VAR 0 1
14359: PPUSH
14360: CALL 66596 0 2
14364: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14365: LD_INT 35
14367: PPUSH
14368: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
14372: LD_EXP 50
14376: PPUSH
14377: CALL_OW 255
14381: PUSH
14382: LD_INT 2
14384: EQUAL
14385: PUSH
14386: LD_EXP 50
14390: PPUSH
14391: LD_INT 73
14393: PPUSH
14394: CALL_OW 296
14398: PUSH
14399: LD_INT 8
14401: LESS
14402: AND
14403: PUSH
14404: LD_VAR 0 2
14408: PPUSH
14409: LD_INT 101
14411: PUSH
14412: LD_INT 2
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PPUSH
14419: CALL_OW 72
14423: AND
14424: IFFALSE 14365
// InGameOn ;
14426: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14430: LD_INT 73
14432: PPUSH
14433: CALL_OW 250
14437: PPUSH
14438: LD_INT 73
14440: PPUSH
14441: CALL_OW 251
14445: PPUSH
14446: LD_INT 2
14448: PPUSH
14449: LD_INT 9
14451: NEG
14452: PPUSH
14453: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14457: LD_INT 73
14459: PPUSH
14460: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14464: LD_EXP 50
14468: PPUSH
14469: LD_INT 73
14471: PPUSH
14472: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14476: LD_EXP 50
14480: PPUSH
14481: LD_STRING DK-Plastic-1
14483: PPUSH
14484: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14488: LD_EXP 50
14492: PPUSH
14493: LD_STRING DK-Plastic-2
14495: PPUSH
14496: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14500: LD_EXP 50
14504: PPUSH
14505: LD_INT 73
14507: PPUSH
14508: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14512: LD_INT 35
14514: PPUSH
14515: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14519: LD_EXP 50
14523: PPUSH
14524: LD_INT 73
14526: PPUSH
14527: CALL_OW 296
14531: PUSH
14532: LD_INT 6
14534: LESS
14535: IFFALSE 14512
// ComHold ( Kaia ) ;
14537: LD_EXP 50
14541: PPUSH
14542: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14546: LD_VAR 0 2
14550: PUSH
14551: LD_INT 1
14553: ARRAY
14554: PPUSH
14555: LD_STRING DRum-Plastic-3
14557: PPUSH
14558: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14562: LD_VAR 0 2
14566: PUSH
14567: LD_INT 2
14569: ARRAY
14570: PPUSH
14571: LD_STRING DRum2-Plastic-4
14573: PPUSH
14574: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14578: LD_VAR 0 2
14582: PUSH
14583: LD_INT 1
14585: ARRAY
14586: PPUSH
14587: LD_STRING DRum-Plastic-5
14589: PPUSH
14590: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14594: LD_VAR 0 2
14598: PUSH
14599: LD_INT 2
14601: ARRAY
14602: PPUSH
14603: LD_STRING DRum2-Plastic-6
14605: PPUSH
14606: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14610: LD_EXP 50
14614: PPUSH
14615: LD_STRING DK-Plastic-7
14617: PPUSH
14618: CALL_OW 88
// InGameOff ;
14622: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14626: LD_INT 73
14628: PPUSH
14629: CALL_OW 250
14633: PPUSH
14634: LD_INT 73
14636: PPUSH
14637: CALL_OW 251
14641: PPUSH
14642: LD_INT 2
14644: PPUSH
14645: CALL_OW 331
// explosionsTakenByRussians := true ;
14649: LD_ADDR_EXP 21
14653: PUSH
14654: LD_INT 1
14656: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14657: LD_STRING ExplosivesInfo
14659: PPUSH
14660: CALL_OW 97
// end ;
14664: PPOPN 2
14666: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14667: LD_EXP 21
14671: PUSH
14672: LD_EXP 50
14676: PPUSH
14677: CALL_OW 255
14681: PUSH
14682: LD_INT 2
14684: EQUAL
14685: AND
14686: PUSH
14687: LD_EXP 50
14691: PPUSH
14692: LD_INT 61
14694: PPUSH
14695: CALL 19993 0 2
14699: AND
14700: PUSH
14701: LD_EXP 17
14705: NOT
14706: AND
14707: PUSH
14708: LD_EXP 30
14712: NOT
14713: AND
14714: IFFALSE 14870
14716: GO 14718
14718: DISABLE
// begin InGameOn ;
14719: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14723: LD_INT 61
14725: PPUSH
14726: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14730: LD_EXP 50
14734: PPUSH
14735: LD_INT 3
14737: PPUSH
14738: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14742: LD_EXP 50
14746: PPUSH
14747: LD_INT 61
14749: PPUSH
14750: CALL_OW 120
// wait ( 0 0$2 ) ;
14754: LD_INT 70
14756: PPUSH
14757: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14761: LD_EXP 50
14765: PPUSH
14766: LD_STRING DK-Plastic-8
14768: PPUSH
14769: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14773: LD_EXP 66
14777: PUSH
14778: LD_INT 1
14780: ARRAY
14781: PPUSH
14782: LD_STRING DRuMch-Plastic-9
14784: PPUSH
14785: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14789: LD_EXP 50
14793: PPUSH
14794: LD_STRING DK-Plastic-10
14796: PPUSH
14797: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14801: LD_EXP 66
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: LD_STRING DRuMch-Plastic-a-11
14812: PPUSH
14813: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14817: LD_EXP 50
14821: PPUSH
14822: LD_STRING DK-Plastic-a-12
14824: PPUSH
14825: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14829: LD_EXP 66
14833: PUSH
14834: LD_INT 1
14836: ARRAY
14837: PPUSH
14838: LD_STRING DRuMch-Plastic-a-13
14840: PPUSH
14841: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14845: LD_EXP 50
14849: PPUSH
14850: LD_INT 2
14852: PPUSH
14853: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14857: LD_EXP 50
14861: PPUSH
14862: CALL_OW 122
// InGameOff ;
14866: CALL_OW 9
// end ;
14870: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14871: LD_EXP 21
14875: PUSH
14876: LD_EXP 50
14880: PPUSH
14881: CALL_OW 255
14885: PUSH
14886: LD_INT 2
14888: EQUAL
14889: AND
14890: PUSH
14891: LD_EXP 50
14895: PPUSH
14896: LD_INT 196
14898: PPUSH
14899: CALL 19993 0 2
14903: AND
14904: PUSH
14905: LD_EXP 17
14909: NOT
14910: AND
14911: PUSH
14912: LD_EXP 30
14916: NOT
14917: AND
14918: IFFALSE 15257
14920: GO 14922
14922: DISABLE
// begin InGameOn ;
14923: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14927: LD_INT 196
14929: PPUSH
14930: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14934: LD_EXP 50
14938: PPUSH
14939: LD_INT 3
14941: PPUSH
14942: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14946: LD_EXP 50
14950: PPUSH
14951: LD_INT 196
14953: PPUSH
14954: CALL_OW 120
// wait ( 0 0$2 ) ;
14958: LD_INT 70
14960: PPUSH
14961: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14965: LD_EXP 50
14969: PPUSH
14970: LD_STRING DK-Plastic-8
14972: PPUSH
14973: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14977: LD_EXP 67
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: LD_STRING DRuMch-Plastic-9
14988: PPUSH
14989: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14993: LD_EXP 50
14997: PPUSH
14998: LD_STRING DK-Plastic-10
15000: PPUSH
15001: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15005: LD_EXP 67
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: PPUSH
15014: LD_STRING DRuMch-Plastic-11
15016: PPUSH
15017: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15021: LD_EXP 50
15025: PPUSH
15026: LD_STRING DK-Plastic-12
15028: PPUSH
15029: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15033: LD_EXP 50
15037: PPUSH
15038: LD_STRING DK-Plastic-13
15040: PPUSH
15041: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15045: LD_EXP 67
15049: PUSH
15050: LD_INT 1
15052: ARRAY
15053: PPUSH
15054: LD_STRING DRuMch-Plastic-14
15056: PPUSH
15057: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15061: LD_EXP 68
15065: PPUSH
15066: LD_INT 167
15068: PPUSH
15069: LD_INT 34
15071: PPUSH
15072: LD_INT 3
15074: PPUSH
15075: LD_INT 0
15077: PPUSH
15078: CALL 68736 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15082: LD_EXP 68
15086: PPUSH
15087: LD_INT 196
15089: PPUSH
15090: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15094: LD_INT 35
15096: PPUSH
15097: CALL_OW 67
// if not HasTask ( Stiopa ) then
15101: LD_EXP 68
15105: PPUSH
15106: CALL_OW 314
15110: NOT
15111: IFFALSE 15125
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15113: LD_EXP 68
15117: PPUSH
15118: LD_INT 196
15120: PPUSH
15121: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15125: LD_EXP 68
15129: PPUSH
15130: CALL_OW 310
15134: IFFALSE 15094
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15136: LD_EXP 68
15140: PPUSH
15141: LD_STRING DSpn-Plastic-15
15143: PPUSH
15144: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15148: LD_EXP 69
15152: PPUSH
15153: LD_STRING DLr-Plastic-16
15155: PPUSH
15156: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15160: LD_EXP 50
15164: PPUSH
15165: LD_STRING DK-Plastic-17
15167: PPUSH
15168: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15172: LD_INT 10
15174: PPUSH
15175: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15179: LD_INT 196
15181: PPUSH
15182: CALL 19719 0 1
// SetSide ( Kaia , 2 ) ;
15186: LD_EXP 50
15190: PPUSH
15191: LD_INT 2
15193: PPUSH
15194: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15198: LD_EXP 50
15202: PPUSH
15203: CALL_OW 122
// InGameOff ;
15207: CALL_OW 9
// explosionsTakenByRussians := false ;
15211: LD_ADDR_EXP 21
15215: PUSH
15216: LD_INT 0
15218: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15219: LD_INT 170
15221: PPUSH
15222: LD_INT 28
15224: PPUSH
15225: LD_INT 2
15227: PPUSH
15228: LD_INT 6
15230: NEG
15231: PPUSH
15232: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15236: LD_INT 170
15238: PPUSH
15239: LD_INT 28
15241: PPUSH
15242: LD_INT 2
15244: PPUSH
15245: CALL_OW 331
// knowWhereExplosivesAre := true ;
15249: LD_ADDR_EXP 34
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// end ;
15257: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15258: LD_EXP 34
15262: PUSH
15263: LD_EXP 50
15267: PPUSH
15268: CALL_OW 255
15272: PUSH
15273: LD_INT 2
15275: EQUAL
15276: AND
15277: PUSH
15278: LD_EXP 50
15282: PPUSH
15283: LD_INT 195
15285: PPUSH
15286: CALL 19993 0 2
15290: AND
15291: PUSH
15292: LD_EXP 17
15296: NOT
15297: AND
15298: PUSH
15299: LD_EXP 30
15303: NOT
15304: AND
15305: IFFALSE 15411
15307: GO 15309
15309: DISABLE
// begin InGameOn ;
15310: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15314: LD_EXP 50
15318: PPUSH
15319: LD_INT 3
15321: PPUSH
15322: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15326: LD_EXP 50
15330: PPUSH
15331: LD_INT 195
15333: PPUSH
15334: CALL_OW 120
// wait ( 0 0$1 ) ;
15338: LD_INT 35
15340: PPUSH
15341: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15345: LD_EXP 50
15349: PPUSH
15350: LD_STRING DK-Plastic-18
15352: PPUSH
15353: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15357: LD_STRING ExplosivesInfoUsage
15359: PPUSH
15360: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15364: LD_INT 195
15366: PPUSH
15367: CALL 19719 0 1
// SetSide ( Kaia , 2 ) ;
15371: LD_EXP 50
15375: PPUSH
15376: LD_INT 2
15378: PPUSH
15379: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15383: LD_EXP 50
15387: PPUSH
15388: CALL_OW 122
// InGameOff ;
15392: CALL_OW 9
// hasExplosionCollected := true ;
15396: LD_ADDR_EXP 23
15400: PUSH
15401: LD_INT 1
15403: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15404: LD_STRING M1-explosive-out
15406: PPUSH
15407: CALL_OW 337
// end ;
15411: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15412: LD_EXP 23
15416: PUSH
15417: LD_EXP 17
15421: NOT
15422: AND
15423: PUSH
15424: LD_EXP 30
15428: NOT
15429: AND
15430: IFFALSE 15605
15432: GO 15434
15434: DISABLE
15435: LD_INT 0
15437: PPUSH
15438: PPUSH
// begin for i in importantBuildingsList do
15439: LD_ADDR_VAR 0 1
15443: PUSH
15444: LD_EXP 35
15448: PUSH
15449: FOR_IN
15450: IFFALSE 15466
// MarkBuilding ( i , true ) ;
15452: LD_VAR 0 1
15456: PPUSH
15457: LD_INT 1
15459: PPUSH
15460: CALL 20367 0 2
15464: GO 15449
15466: POP
15467: POP
// repeat wait ( 0 0$1 ) ;
15468: LD_INT 35
15470: PPUSH
15471: CALL_OW 67
// for i in importantBuildingsList do
15475: LD_ADDR_VAR 0 1
15479: PUSH
15480: LD_EXP 35
15484: PUSH
15485: FOR_IN
15486: IFFALSE 15596
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15488: LD_EXP 45
15492: PUSH
15493: LD_EXP 14
15497: UNION
15498: PPUSH
15499: LD_INT 22
15501: PUSH
15502: LD_INT 2
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 21
15511: PUSH
15512: LD_INT 1
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 91
15521: PUSH
15522: LD_VAR 0 1
15526: PUSH
15527: LD_INT 6
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 72
15544: IFFALSE 15594
// begin CenterNowOnUnits ( i ) ;
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 87
// PlaceExplosives ( i ) ;
15555: LD_VAR 0 1
15559: PPUSH
15560: CALL 20264 0 1
// MarkBuilding ( i , false ) ;
15564: LD_VAR 0 1
15568: PPUSH
15569: LD_INT 0
15571: PPUSH
15572: CALL 20367 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15576: LD_ADDR_EXP 35
15580: PUSH
15581: LD_EXP 35
15585: PUSH
15586: LD_VAR 0 1
15590: DIFF
15591: ST_TO_ADDR
// continue ;
15592: GO 15485
// end ; end ;
15594: GO 15485
15596: POP
15597: POP
// until not importantBuildingsList ;
15598: LD_EXP 35
15602: NOT
15603: IFFALSE 15468
// end ;
15605: PPOPN 2
15607: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15608: LD_EXP 14
15612: PPUSH
15613: LD_INT 22
15615: PUSH
15616: LD_INT 2
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 95
15625: PUSH
15626: LD_INT 23
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PPUSH
15637: CALL_OW 72
15641: PUSH
15642: LD_EXP 45
15646: PPUSH
15647: CALL_OW 302
15651: AND
15652: PUSH
15653: LD_EXP 30
15657: NOT
15658: AND
15659: IFFALSE 15687
15661: GO 15663
15663: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15664: LD_EXP 45
15668: PPUSH
15669: LD_STRING DH-End-1
15671: PPUSH
15672: CALL_OW 88
// if not activeExplosives then
15676: LD_EXP 36
15680: NOT
15681: IFFALSE 15687
// Explode ;
15683: CALL 23126 0 0
// end ;
15687: END
// function SayHEmpty ( ) ; begin
15688: LD_INT 0
15690: PPUSH
// case rand ( 1 , 3 ) of 1 :
15691: LD_INT 1
15693: PPUSH
15694: LD_INT 3
15696: PPUSH
15697: CALL_OW 12
15701: PUSH
15702: LD_INT 1
15704: DOUBLE
15705: EQUAL
15706: IFTRUE 15710
15708: GO 15725
15710: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15711: LD_EXP 45
15715: PPUSH
15716: LD_STRING DH-Empty-1
15718: PPUSH
15719: CALL_OW 88
15723: GO 15772
15725: LD_INT 2
15727: DOUBLE
15728: EQUAL
15729: IFTRUE 15733
15731: GO 15748
15733: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15734: LD_EXP 45
15738: PPUSH
15739: LD_STRING DH-Empty-2
15741: PPUSH
15742: CALL_OW 88
15746: GO 15772
15748: LD_INT 3
15750: DOUBLE
15751: EQUAL
15752: IFTRUE 15756
15754: GO 15771
15756: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15757: LD_EXP 45
15761: PPUSH
15762: LD_STRING DH-Empty-3
15764: PPUSH
15765: CALL_OW 88
15769: GO 15772
15771: POP
// end ;
15772: LD_VAR 0 1
15776: RET
// function SayHVisited ( ) ; begin
15777: LD_INT 0
15779: PPUSH
// case rand ( 1 , 3 ) of 1 :
15780: LD_INT 1
15782: PPUSH
15783: LD_INT 3
15785: PPUSH
15786: CALL_OW 12
15790: PUSH
15791: LD_INT 1
15793: DOUBLE
15794: EQUAL
15795: IFTRUE 15799
15797: GO 15814
15799: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15800: LD_EXP 45
15804: PPUSH
15805: LD_STRING DH-Visited-1
15807: PPUSH
15808: CALL_OW 88
15812: GO 15861
15814: LD_INT 2
15816: DOUBLE
15817: EQUAL
15818: IFTRUE 15822
15820: GO 15837
15822: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15823: LD_EXP 45
15827: PPUSH
15828: LD_STRING DH-Visited-2
15830: PPUSH
15831: CALL_OW 88
15835: GO 15861
15837: LD_INT 3
15839: DOUBLE
15840: EQUAL
15841: IFTRUE 15845
15843: GO 15860
15845: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15846: LD_EXP 45
15850: PPUSH
15851: LD_STRING DH-Visited-3
15853: PPUSH
15854: CALL_OW 88
15858: GO 15861
15860: POP
// end ;
15861: LD_VAR 0 1
15865: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15866: LD_EXP 17
15870: NOT
15871: PUSH
15872: LD_EXP 15
15876: AND
15877: PUSH
15878: LD_EXP 45
15882: PPUSH
15883: CALL_OW 255
15887: PUSH
15888: LD_INT 2
15890: EQUAL
15891: AND
15892: PUSH
15893: LD_EXP 45
15897: PPUSH
15898: CALL_OW 302
15902: AND
15903: PUSH
15904: LD_EXP 45
15908: PPUSH
15909: CALL_OW 316
15913: AND
15914: PUSH
15915: LD_EXP 30
15919: NOT
15920: AND
15921: IFFALSE 15987
15923: GO 15925
15925: DISABLE
15926: LD_INT 0
15928: PPUSH
// begin enable ;
15929: ENABLE
// for i in entranceAllowedList do
15930: LD_ADDR_VAR 0 1
15934: PUSH
15935: LD_EXP 15
15939: PUSH
15940: FOR_IN
15941: IFFALSE 15985
// if InEntrance ( Heike , i ) then
15943: LD_EXP 45
15947: PPUSH
15948: LD_VAR 0 1
15952: PPUSH
15953: CALL 19993 0 2
15957: IFFALSE 15983
// begin disable ( entranceEvent ) ;
15959: LD_INT 1
15961: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15962: LD_VAR 0 1
15966: PPUSH
15967: CALL 15990 0 1
// wait ( 0 0$3 ) ;
15971: LD_INT 105
15973: PPUSH
15974: CALL_OW 67
// enable ( entranceEvent ) ;
15978: LD_INT 1
15980: ENABLE_MARKED
// break ;
15981: GO 15985
// end ;
15983: GO 15940
15985: POP
15986: POP
// end ;
15987: PPOPN 1
15989: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
15990: LD_INT 0
15992: PPUSH
15993: PPUSH
15994: PPUSH
15995: PPUSH
// if not building then
15996: LD_VAR 0 1
16000: NOT
16001: IFFALSE 16005
// exit ;
16003: GO 18630
// if building in entranceVisitedList then
16005: LD_VAR 0 1
16009: PUSH
16010: LD_EXP 16
16014: IN
16015: IFFALSE 16023
// begin SayHVisited ( ) ;
16017: CALL 15777 0 0
// exit ;
16021: GO 18630
// end ; case Query ( EnterBuilding ) of 1 :
16023: LD_STRING EnterBuilding
16025: PPUSH
16026: CALL_OW 97
16030: PUSH
16031: LD_INT 1
16033: DOUBLE
16034: EQUAL
16035: IFTRUE 16039
16037: GO 16042
16039: POP
// ; 2 :
16040: GO 16056
16042: LD_INT 2
16044: DOUBLE
16045: EQUAL
16046: IFTRUE 16050
16048: GO 16055
16050: POP
// exit ; end ;
16051: GO 18630
16053: GO 16056
16055: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16056: LD_ADDR_EXP 16
16060: PUSH
16061: LD_EXP 16
16065: PPUSH
16066: LD_VAR 0 1
16070: PPUSH
16071: CALL 66596 0 2
16075: ST_TO_ADDR
// InGameOn ;
16076: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16080: LD_EXP 45
16084: PPUSH
16085: LD_INT 5
16087: PPUSH
16088: CALL_OW 235
// SetSide ( building , 5 ) ;
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 5
16099: PPUSH
16100: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16104: LD_EXP 45
16108: PPUSH
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 120
// wait ( 0 0$3 ) ;
16118: LD_INT 105
16120: PPUSH
16121: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16125: LD_ADDR_VAR 0 4
16129: PUSH
16130: LD_INT 165
16132: PUSH
16133: LD_INT 106
16135: PUSH
16136: LD_INT 135
16138: PUSH
16139: LD_INT 162
16141: PUSH
16142: LD_INT 61
16144: PUSH
16145: LD_INT 109
16147: PUSH
16148: LD_INT 169
16150: PUSH
16151: LD_INT 13
16153: PUSH
16154: LD_INT 147
16156: PUSH
16157: LD_INT 137
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: ST_TO_ADDR
// if not building in tmp then
16172: LD_VAR 0 1
16176: PUSH
16177: LD_VAR 0 4
16181: IN
16182: NOT
16183: IFFALSE 16191
// SayHEmpty ( ) else
16185: CALL 15688 0 0
16189: GO 18577
// case building of laundry :
16191: LD_VAR 0 1
16195: PUSH
16196: LD_INT 165
16198: DOUBLE
16199: EQUAL
16200: IFTRUE 16204
16202: GO 16308
16204: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16205: LD_EXP 26
16209: PUSH
16210: LD_EXP 27
16214: NOT
16215: AND
16216: PUSH
16217: LD_EXP 28
16221: NOT
16222: AND
16223: IFFALSE 16278
// begin case Query ( HeikeInLaundry ) of 1 :
16225: LD_STRING HeikeInLaundry
16227: PPUSH
16228: CALL_OW 97
16232: PUSH
16233: LD_INT 1
16235: DOUBLE
16236: EQUAL
16237: IFTRUE 16241
16239: GO 16248
16241: POP
// SpawnHeikeAsRussian ; 2 :
16242: CALL 1802 0 0
16246: GO 16276
16248: LD_INT 2
16250: DOUBLE
16251: EQUAL
16252: IFTRUE 16256
16254: GO 16275
16256: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16257: LD_ADDR_EXP 16
16261: PUSH
16262: LD_EXP 16
16266: PUSH
16267: LD_VAR 0 1
16271: DIFF
16272: ST_TO_ADDR
16273: GO 16276
16275: POP
// end else
16276: GO 16306
// begin entranceVisitedList := entranceVisitedList diff building ;
16278: LD_ADDR_EXP 16
16282: PUSH
16283: LD_EXP 16
16287: PUSH
16288: LD_VAR 0 1
16292: DIFF
16293: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16294: LD_EXP 45
16298: PPUSH
16299: LD_STRING DH-Locked
16301: PPUSH
16302: CALL_OW 88
// end ; end ; dougBar :
16306: GO 18577
16308: LD_INT 106
16310: DOUBLE
16311: EQUAL
16312: IFTRUE 16316
16314: GO 16678
16316: POP
// begin if contactWithAmerican and americanContact then
16317: LD_EXP 25
16321: PUSH
16322: LD_EXP 10
16326: AND
16327: IFFALSE 16391
// begin Say ( Heike , DH-Escort-a-1 ) ;
16329: LD_EXP 45
16333: PPUSH
16334: LD_STRING DH-Escort-a-1
16336: PPUSH
16337: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16341: LD_EXP 59
16345: PPUSH
16346: LD_STRING DCa-Escort-a-2
16348: PPUSH
16349: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16353: LD_EXP 59
16357: PPUSH
16358: LD_STRING DCa-Escort-a-3
16360: PPUSH
16361: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16365: LD_EXP 45
16369: PPUSH
16370: LD_STRING DH-Escort-a-4
16372: PPUSH
16373: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16377: LD_EXP 45
16381: PPUSH
16382: LD_STRING DH-Escort-a-5
16384: PPUSH
16385: CALL_OW 88
// end else
16389: GO 16635
// if contactWithAmerican then
16391: LD_EXP 25
16395: IFFALSE 16435
// begin Say ( Heike , DH-Escort-b-1 ) ;
16397: LD_EXP 45
16401: PPUSH
16402: LD_STRING DH-Escort-b-1
16404: PPUSH
16405: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16409: LD_EXP 59
16413: PPUSH
16414: LD_STRING DCa-Escort-b-2
16416: PPUSH
16417: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16421: LD_EXP 59
16425: PPUSH
16426: LD_STRING DCa-Escort-b-3
16428: PPUSH
16429: CALL_OW 88
// end else
16433: GO 16635
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16435: LD_EXP 59
16439: PPUSH
16440: LD_STRING DCa-Deal-a-1
16442: PPUSH
16443: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16447: LD_EXP 59
16451: PPUSH
16452: LD_STRING DCa-Deal-a-2
16454: PPUSH
16455: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16459: LD_EXP 45
16463: PPUSH
16464: LD_STRING DH-Deal-a-3
16466: PPUSH
16467: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16471: LD_EXP 59
16475: PPUSH
16476: LD_STRING DCa-Deal-a-4
16478: PPUSH
16479: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16483: LD_EXP 45
16487: PPUSH
16488: LD_STRING DH-Deal-a-5
16490: PPUSH
16491: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16495: LD_EXP 59
16499: PPUSH
16500: LD_STRING DCa-Deal-a-6
16502: PPUSH
16503: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16507: LD_EXP 59
16511: PPUSH
16512: LD_STRING DCa-Deal-a-7
16514: PPUSH
16515: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16519: LD_EXP 59
16523: PPUSH
16524: LD_STRING DCa-Deal-a-8
16526: PPUSH
16527: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16531: LD_EXP 59
16535: PPUSH
16536: LD_STRING DCa-Deal-a-9
16538: PPUSH
16539: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16543: LD_EXP 59
16547: PPUSH
16548: LD_STRING DCa-Deal-a-10
16550: PPUSH
16551: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16555: LD_EXP 59
16559: PPUSH
16560: LD_STRING DCa-Deal-a-11
16562: PPUSH
16563: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16567: LD_INT 10
16569: PPUSH
16570: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16574: LD_EXP 59
16578: PPUSH
16579: LD_STRING DCa-Deal-a-12
16581: PPUSH
16582: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16586: LD_EXP 45
16590: PPUSH
16591: LD_STRING DH-Deal-a-13
16593: PPUSH
16594: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16598: LD_EXP 45
16602: PPUSH
16603: LD_STRING DH-Deal-a-14
16605: PPUSH
16606: CALL_OW 88
// contactWithAmerican := true ;
16610: LD_ADDR_EXP 25
16614: PUSH
16615: LD_INT 1
16617: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16618: LD_INT 1
16620: PPUSH
16621: LD_STRING 08_DealWithDoug
16623: PPUSH
16624: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16628: LD_STRING M1-american-out
16630: PPUSH
16631: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16635: LD_EXP 59
16639: PPUSH
16640: LD_INT 2
16642: PPUSH
16643: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16647: LD_ADDR_EXP 14
16651: PUSH
16652: LD_EXP 14
16656: PPUSH
16657: LD_EXP 59
16661: PPUSH
16662: CALL 66596 0 2
16666: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16667: LD_EXP 59
16671: PPUSH
16672: CALL_OW 122
// end ; usLab :
16676: GO 18577
16678: LD_INT 135
16680: DOUBLE
16681: EQUAL
16682: IFTRUE 16686
16684: GO 17005
16686: POP
// begin if hasSniperRifle then
16687: LD_EXP 11
16691: IFFALSE 17003
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16693: LD_EXP 50
16697: PPUSH
16698: CALL_OW 302
16702: PUSH
16703: LD_EXP 50
16707: PUSH
16708: LD_EXP 14
16712: IN
16713: AND
16714: PUSH
16715: LD_EXP 50
16719: PPUSH
16720: CALL_OW 255
16724: PUSH
16725: LD_INT 2
16727: EQUAL
16728: AND
16729: IFFALSE 16977
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16731: LD_EXP 45
16735: PPUSH
16736: LD_EXP 50
16740: PPUSH
16741: CALL_OW 296
16745: PUSH
16746: LD_INT 10
16748: GREATER
16749: IFFALSE 16774
// begin Query ( KaiaDistance ) ;
16751: LD_STRING KaiaDistance
16753: PPUSH
16754: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16758: LD_ADDR_EXP 16
16762: PUSH
16763: LD_EXP 16
16767: PUSH
16768: LD_INT 135
16770: DIFF
16771: ST_TO_ADDR
// end else
16772: GO 16975
// begin SetSide ( Kaia , 5 ) ;
16774: LD_EXP 50
16778: PPUSH
16779: LD_INT 5
16781: PPUSH
16782: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16786: LD_EXP 50
16790: PPUSH
16791: LD_INT 135
16793: PPUSH
16794: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16798: LD_INT 35
16800: PPUSH
16801: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16805: LD_EXP 50
16809: PPUSH
16810: CALL_OW 310
16814: IFFALSE 16798
// Say ( Kaia , DK-Sniper-1 ) ;
16816: LD_EXP 50
16820: PPUSH
16821: LD_STRING DK-Sniper-1
16823: PPUSH
16824: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16828: LD_EXP 50
16832: PPUSH
16833: CALL_OW 257
16837: PUSH
16838: LD_INT 34
16840: EQUAL
16841: PUSH
16842: LD_EXP 47
16846: PUSH
16847: LD_EXP 14
16851: IN
16852: AND
16853: PUSH
16854: LD_EXP 47
16858: PPUSH
16859: CALL_OW 302
16863: AND
16864: IFFALSE 16895
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16866: LD_EXP 50
16870: PPUSH
16871: LD_STRING DK-Sniper-a-2
16873: PPUSH
16874: CALL_OW 88
// giveSniperRifleToMike := true ;
16878: LD_ADDR_EXP 42
16882: PUSH
16883: LD_INT 1
16885: ST_TO_ADDR
// Query ( QSniperMike ) ;
16886: LD_STRING QSniperMike
16888: PPUSH
16889: CALL_OW 97
// end else
16893: GO 16954
// begin Say ( Kaia , DK-Sniper-2 ) ;
16895: LD_EXP 50
16899: PPUSH
16900: LD_STRING DK-Sniper-2
16902: PPUSH
16903: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16907: LD_EXP 50
16911: PPUSH
16912: LD_INT 32
16914: PPUSH
16915: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16919: LD_EXP 52
16923: PPUSH
16924: CALL_OW 302
16928: PUSH
16929: LD_EXP 52
16933: PUSH
16934: LD_EXP 14
16938: IN
16939: AND
16940: IFFALSE 16954
// Say ( Markov , DMar-Sniper-3 ) ;
16942: LD_EXP 52
16946: PPUSH
16947: LD_STRING DMar-Sniper-3
16949: PPUSH
16950: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16954: LD_EXP 50
16958: PPUSH
16959: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16963: LD_EXP 50
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: CALL_OW 235
// end ; end else
16975: GO 17003
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16977: LD_ADDR_EXP 16
16981: PUSH
16982: LD_EXP 16
16986: PUSH
16987: LD_INT 135
16989: DIFF
16990: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16991: LD_EXP 45
16995: PPUSH
16996: LD_STRING DH-Locked
16998: PPUSH
16999: CALL_OW 88
// end ; end ; end ; drugsLab :
17003: GO 18577
17005: LD_INT 162
17007: DOUBLE
17008: EQUAL
17009: IFTRUE 17013
17011: GO 17146
17013: POP
// begin if hasStimDrugs then
17014: LD_EXP 9
17018: IFFALSE 17132
// begin wait ( 0 0$1 ) ;
17020: LD_INT 35
17022: PPUSH
17023: CALL_OW 67
// if not hasStimDrugsCollected then
17027: LD_EXP 24
17031: NOT
17032: IFFALSE 17074
// begin Say ( Heike , DH-Lab-1 ) ;
17034: LD_EXP 45
17038: PPUSH
17039: LD_STRING DH-Lab-1
17041: PPUSH
17042: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17046: LD_INT 5
17048: PPUSH
17049: LD_INT 2
17051: PPUSH
17052: LD_INT 2
17054: PPUSH
17055: CALL_OW 322
// hasStimDrugsCollected := true ;
17059: LD_ADDR_EXP 24
17063: PUSH
17064: LD_INT 1
17066: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17067: LD_STRING M1-drugs-out
17069: PPUSH
17070: CALL_OW 604
// end ; if not hasExplosionCollected then
17074: LD_EXP 23
17078: NOT
17079: IFFALSE 17097
// entranceVisitedList := entranceVisitedList diff drugsLab else
17081: LD_ADDR_EXP 16
17085: PUSH
17086: LD_EXP 16
17090: PUSH
17091: LD_INT 162
17093: DIFF
17094: ST_TO_ADDR
17095: GO 17130
// begin wait ( 0 0$3 ) ;
17097: LD_INT 105
17099: PPUSH
17100: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17104: LD_EXP 45
17108: PPUSH
17109: LD_STRING DH-Lab-2
17111: PPUSH
17112: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17116: LD_STRING M1-drugsLab-out
17118: PPUSH
17119: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17123: LD_INT 162
17125: PPUSH
17126: CALL 20264 0 1
// end ; end else
17130: GO 17144
// Say ( Heike , DH-Locked ) ;
17132: LD_EXP 45
17136: PPUSH
17137: LD_STRING DH-Locked
17139: PPUSH
17140: CALL_OW 88
// end ; ruFac :
17144: GO 18577
17146: LD_INT 61
17148: DOUBLE
17149: EQUAL
17150: IFTRUE 17154
17152: GO 17264
17154: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17155: LD_EXP 52
17159: PPUSH
17160: CALL_OW 302
17164: PUSH
17165: LD_EXP 52
17169: PUSH
17170: LD_EXP 14
17174: IN
17175: NOT
17176: AND
17177: IFFALSE 17258
// begin Say ( Heike , DH-Krastyo-1 ) ;
17179: LD_EXP 45
17183: PPUSH
17184: LD_STRING DH-Krastyo-1
17186: PPUSH
17187: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17191: LD_EXP 52
17195: PPUSH
17196: LD_STRING DMar-Krastyo-2
17198: PPUSH
17199: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17203: LD_EXP 52
17207: PPUSH
17208: LD_STRING DMar-Krastyo-3
17210: PPUSH
17211: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17215: LD_EXP 52
17219: PPUSH
17220: LD_INT 2
17222: PPUSH
17223: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17227: LD_ADDR_EXP 14
17231: PUSH
17232: LD_EXP 14
17236: PPUSH
17237: LD_EXP 52
17241: PPUSH
17242: CALL 66596 0 2
17246: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17247: LD_EXP 52
17251: PPUSH
17252: CALL_OW 122
// end else
17256: GO 17262
// SayHEmpty ( ) ;
17258: CALL 15688 0 0
// end ; ruBarKam :
17262: GO 18577
17264: LD_INT 109
17266: DOUBLE
17267: EQUAL
17268: IFTRUE 17272
17270: GO 17419
17272: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17273: LD_EXP 49
17277: PPUSH
17278: CALL_OW 302
17282: PUSH
17283: LD_EXP 49
17287: PUSH
17288: LD_EXP 14
17292: IN
17293: NOT
17294: AND
17295: IFFALSE 17413
// begin Say ( Heike , DH-Kamil-1 ) ;
17297: LD_EXP 45
17301: PPUSH
17302: LD_STRING DH-Kamil-1
17304: PPUSH
17305: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17309: LD_EXP 49
17313: PPUSH
17314: LD_STRING DKam-Kamil-2
17316: PPUSH
17317: CALL_OW 88
// if IsOk ( Sophia ) then
17321: LD_EXP 51
17325: PPUSH
17326: CALL_OW 302
17330: IFFALSE 17370
// if Sophia in heikeSquad then
17332: LD_EXP 51
17336: PUSH
17337: LD_EXP 14
17341: IN
17342: IFFALSE 17358
// Say ( Kamil , DKam-Kamil-a-3 ) else
17344: LD_EXP 49
17348: PPUSH
17349: LD_STRING DKam-Kamil-a-3
17351: PPUSH
17352: CALL_OW 88
17356: GO 17370
// Say ( Kamil , DKam-Kamil-3 ) ;
17358: LD_EXP 49
17362: PPUSH
17363: LD_STRING DKam-Kamil-3
17365: PPUSH
17366: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17370: LD_EXP 49
17374: PPUSH
17375: LD_INT 2
17377: PPUSH
17378: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17382: LD_ADDR_EXP 14
17386: PUSH
17387: LD_EXP 14
17391: PPUSH
17392: LD_EXP 49
17396: PPUSH
17397: CALL 66596 0 2
17401: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17402: LD_EXP 49
17406: PPUSH
17407: CALL_OW 122
// end else
17411: GO 17417
// SayHEmpty ( ) ;
17413: CALL 15688 0 0
// end ; ruOutpost1 :
17417: GO 18577
17419: LD_INT 169
17421: DOUBLE
17422: EQUAL
17423: IFTRUE 17427
17425: GO 17664
17427: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17428: LD_EXP 54
17432: PPUSH
17433: CALL_OW 302
17437: PUSH
17438: LD_EXP 54
17442: PUSH
17443: LD_EXP 14
17447: IN
17448: NOT
17449: AND
17450: IFFALSE 17658
// begin if hasMethanol then
17452: LD_EXP 13
17456: IFFALSE 17587
// begin Say ( Heike , DH-Kurt-1 ) ;
17458: LD_EXP 45
17462: PPUSH
17463: LD_STRING DH-Kurt-1
17465: PPUSH
17466: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17470: LD_EXP 54
17474: PPUSH
17475: LD_STRING DKs-Kurt-2
17477: PPUSH
17478: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17482: LD_EXP 46
17486: PPUSH
17487: LD_INT 169
17489: PPUSH
17490: CALL_OW 296
17494: PUSH
17495: LD_INT 10
17497: LESS
17498: PUSH
17499: LD_EXP 46
17503: PUSH
17504: LD_EXP 14
17508: IN
17509: AND
17510: IFFALSE 17585
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17512: LD_EXP 46
17516: PPUSH
17517: LD_INT 100
17519: PPUSH
17520: LD_INT 37
17522: PPUSH
17523: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17527: LD_EXP 46
17531: PPUSH
17532: LD_INT 169
17534: PPUSH
17535: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17539: LD_INT 35
17541: PPUSH
17542: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17546: LD_EXP 46
17550: PPUSH
17551: LD_INT 169
17553: PPUSH
17554: CALL_OW 296
17558: PUSH
17559: LD_INT 7
17561: LESS
17562: IFFALSE 17539
// Say ( Givi , DG-Kurt-3 ) ;
17564: LD_EXP 46
17568: PPUSH
17569: LD_STRING DG-Kurt-3
17571: PPUSH
17572: CALL_OW 88
// ComStop ( Givi ) ;
17576: LD_EXP 46
17580: PPUSH
17581: CALL_OW 141
// end ; end else
17585: GO 17615
// begin Say ( Heike , DH-Kurt-1 ) ;
17587: LD_EXP 45
17591: PPUSH
17592: LD_STRING DH-Kurt-1
17594: PPUSH
17595: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17599: LD_EXP 54
17603: PPUSH
17604: LD_STRING DKs-Kurt-2
17606: PPUSH
17607: CALL_OW 88
// SpawnAdditionalRuGuards ;
17611: CALL 3584 0 0
// end ; SetSide ( Kurt , 2 ) ;
17615: LD_EXP 54
17619: PPUSH
17620: LD_INT 2
17622: PPUSH
17623: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17627: LD_ADDR_EXP 14
17631: PUSH
17632: LD_EXP 14
17636: PPUSH
17637: LD_EXP 54
17641: PPUSH
17642: CALL 66596 0 2
17646: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17647: LD_EXP 54
17651: PPUSH
17652: CALL_OW 122
// end else
17656: GO 17662
// SayHEmpty ( ) ;
17658: CALL 15688 0 0
// end ; ruOutpostBar :
17662: GO 18577
17664: LD_INT 13
17666: DOUBLE
17667: EQUAL
17668: IFTRUE 17672
17670: GO 17718
17672: POP
// begin if not hasGuardPatrolPlan then
17673: LD_EXP 18
17677: NOT
17678: IFFALSE 17712
// begin Say ( Heike , DH-PatrolPlan ) ;
17680: LD_EXP 45
17684: PPUSH
17685: LD_STRING DH-PatrolPlan
17687: PPUSH
17688: CALL_OW 88
// hasGuardPatrolPlan := true ;
17692: LD_ADDR_EXP 18
17696: PUSH
17697: LD_INT 1
17699: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17700: LD_INT 6
17702: PPUSH
17703: LD_INT 2
17705: PPUSH
17706: CALL_OW 343
// end else
17710: GO 17716
// SayHEmpty ( ) ;
17712: CALL 15688 0 0
// end ; ruKaiaBar :
17716: GO 18577
17718: LD_INT 147
17720: DOUBLE
17721: EQUAL
17722: IFTRUE 17726
17724: GO 17873
17726: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17727: LD_EXP 50
17731: PPUSH
17732: CALL_OW 302
17736: PUSH
17737: LD_EXP 50
17741: PUSH
17742: LD_EXP 14
17746: IN
17747: NOT
17748: AND
17749: IFFALSE 17871
// begin Say ( Heike , DH-Kaia-1 ) ;
17751: LD_EXP 45
17755: PPUSH
17756: LD_STRING DH-Kaia-1
17758: PPUSH
17759: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17763: LD_EXP 50
17767: PPUSH
17768: LD_STRING DK-Kaia-2
17770: PPUSH
17771: CALL_OW 88
// if hasSniperRifle then
17775: LD_EXP 11
17779: IFFALSE 17830
// begin if IsOk ( Markov ) then
17781: LD_EXP 52
17785: PPUSH
17786: CALL_OW 302
17790: IFFALSE 17806
// Say ( Kaia , DK-Kaia-3 ) else
17792: LD_EXP 50
17796: PPUSH
17797: LD_STRING DK-Kaia-3
17799: PPUSH
17800: CALL_OW 88
17804: GO 17818
// Say ( Kaia , DK-Kaia-a-3 ) ;
17806: LD_EXP 50
17810: PPUSH
17811: LD_STRING DK-Kaia-a-3
17813: PPUSH
17814: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17818: LD_EXP 45
17822: PPUSH
17823: LD_STRING DH-Kaia-4
17825: PPUSH
17826: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17830: LD_EXP 50
17834: PPUSH
17835: LD_INT 2
17837: PPUSH
17838: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17842: LD_ADDR_EXP 14
17846: PUSH
17847: LD_EXP 14
17851: PPUSH
17852: LD_EXP 50
17856: PPUSH
17857: CALL 66596 0 2
17861: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17862: LD_EXP 50
17866: PPUSH
17867: CALL_OW 122
// end ; end ; ruWeaponsBar :
17871: GO 18577
17873: LD_INT 137
17875: DOUBLE
17876: EQUAL
17877: IFTRUE 17881
17879: GO 18576
17881: POP
// begin if hasWeapons then
17882: LD_EXP 19
17886: IFFALSE 18562
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17888: LD_ADDR_EXP 16
17892: PUSH
17893: LD_EXP 16
17897: PUSH
17898: LD_INT 137
17900: DIFF
17901: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17902: LD_ADDR_VAR 0 4
17906: PUSH
17907: LD_EXP 14
17911: PPUSH
17912: LD_INT 91
17914: PUSH
17915: LD_EXP 45
17919: PUSH
17920: LD_INT 8
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 72
17932: ST_TO_ADDR
// if not heikeSquad or not tmp then
17933: LD_EXP 14
17937: NOT
17938: PUSH
17939: LD_VAR 0 4
17943: NOT
17944: OR
17945: IFFALSE 17961
// Say ( Heike , DH-Weapons-Alone ) else
17947: LD_EXP 45
17951: PPUSH
17952: LD_STRING DH-Weapons-Alone
17954: PPUSH
17955: CALL_OW 88
17959: GO 18560
// begin if not firstArmouryDialog then
17961: LD_EXP 39
17965: NOT
17966: IFFALSE 18025
// begin Say ( Heike , DH-Weapons-1 ) ;
17968: LD_EXP 45
17972: PPUSH
17973: LD_STRING DH-Weapons-1
17975: PPUSH
17976: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17980: LD_EXP 45
17984: PPUSH
17985: LD_STRING DH-Weapons-2
17987: PPUSH
17988: CALL_OW 88
// Query ( Weapons ) ;
17992: LD_STRING Weapons
17994: PPUSH
17995: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
17999: LD_INT 65
18001: PPUSH
18002: LD_INT 1
18004: PPUSH
18005: CALL_OW 424
// canEquipWeapons := true ;
18009: LD_ADDR_EXP 41
18013: PUSH
18014: LD_INT 1
18016: ST_TO_ADDR
// firstArmouryDialog := true ;
18017: LD_ADDR_EXP 39
18021: PUSH
18022: LD_INT 1
18024: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18025: LD_EXP 8
18029: PUSH
18030: LD_EXP 50
18034: PUSH
18035: LD_VAR 0 4
18039: IN
18040: AND
18041: PUSH
18042: LD_EXP 50
18046: PPUSH
18047: CALL_OW 257
18051: PUSH
18052: LD_INT 34
18054: NONEQUAL
18055: AND
18056: IFFALSE 18202
// begin SetSide ( Kaia , 5 ) ;
18058: LD_EXP 50
18062: PPUSH
18063: LD_INT 5
18065: PPUSH
18066: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18070: LD_EXP 50
18074: PPUSH
18075: LD_INT 137
18077: PPUSH
18078: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18082: LD_INT 35
18084: PPUSH
18085: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18089: LD_EXP 50
18093: PPUSH
18094: CALL_OW 310
18098: IFFALSE 18082
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18100: LD_EXP 45
18104: PPUSH
18105: LD_STRING DH-Kaia-Revolver-2
18107: PPUSH
18108: CALL_OW 88
// SetClassKaiaRevolver ;
18112: CALL 1761 0 0
// hasRevolver := false ;
18116: LD_ADDR_EXP 8
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18124: LD_EXP 50
18128: PPUSH
18129: LD_INT 2
18131: PPUSH
18132: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18136: LD_EXP 50
18140: PPUSH
18141: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18145: LD_EXP 50
18149: PPUSH
18150: CALL_OW 257
18154: PUSH
18155: LD_INT 32
18157: EQUAL
18158: PUSH
18159: LD_EXP 47
18163: PUSH
18164: LD_EXP 14
18168: IN
18169: AND
18170: PUSH
18171: LD_EXP 47
18175: PPUSH
18176: CALL_OW 255
18180: PUSH
18181: LD_INT 2
18183: EQUAL
18184: AND
18185: IFFALSE 18202
// begin giveSniperRifleToMike := true ;
18187: LD_ADDR_EXP 42
18191: PUSH
18192: LD_INT 1
18194: ST_TO_ADDR
// Query ( QSniperMike ) ;
18195: LD_STRING QSniperMike
18197: PPUSH
18198: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18202: LD_EXP 46
18206: PUSH
18207: LD_VAR 0 4
18211: IN
18212: PUSH
18213: LD_EXP 46
18217: PPUSH
18218: CALL_OW 257
18222: PUSH
18223: LD_INT 33
18225: EQUAL
18226: AND
18227: IFFALSE 18368
// begin SetSide ( Givi , 5 ) ;
18229: LD_EXP 46
18233: PPUSH
18234: LD_INT 5
18236: PPUSH
18237: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18241: LD_EXP 46
18245: PPUSH
18246: LD_INT 137
18248: PPUSH
18249: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18253: LD_INT 35
18255: PPUSH
18256: CALL_OW 67
// until IsInUnit ( Givi ) ;
18260: LD_EXP 46
18264: PPUSH
18265: CALL_OW 310
18269: IFFALSE 18253
// Say ( Givi , DG-Weapons-3 ) ;
18271: LD_EXP 46
18275: PPUSH
18276: LD_STRING DG-Weapons-3
18278: PPUSH
18279: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18283: LD_EXP 45
18287: PPUSH
18288: LD_STRING DH-Weapons-4
18290: PPUSH
18291: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18295: LD_EXP 46
18299: PPUSH
18300: LD_STRING DG-Weapons-5
18302: PPUSH
18303: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18307: LD_EXP 46
18311: PPUSH
18312: LD_INT 11
18314: PPUSH
18315: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18319: LD_EXP 46
18323: PPUSH
18324: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18328: LD_EXP 46
18332: PPUSH
18333: LD_INT 2
18335: PPUSH
18336: CALL_OW 235
// if hasRevolver then
18340: LD_EXP 8
18344: IFFALSE 18366
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18346: LD_EXP 45
18350: PPUSH
18351: LD_STRING DH-Kaia-Revolver-1
18353: PPUSH
18354: CALL_OW 88
// heikeHasRevolver := true ;
18358: LD_ADDR_EXP 20
18362: PUSH
18363: LD_INT 1
18365: ST_TO_ADDR
// end ; end else
18366: GO 18560
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18368: LD_EXP 49
18372: PUSH
18373: LD_VAR 0 4
18377: IN
18378: PUSH
18379: LD_EXP 49
18383: PPUSH
18384: CALL_OW 257
18388: PUSH
18389: LD_INT 33
18391: EQUAL
18392: AND
18393: IFFALSE 18522
// begin SetSide ( Kamil , 5 ) ;
18395: LD_EXP 49
18399: PPUSH
18400: LD_INT 5
18402: PPUSH
18403: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18407: LD_EXP 49
18411: PPUSH
18412: LD_INT 137
18414: PPUSH
18415: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18419: LD_INT 35
18421: PPUSH
18422: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18426: LD_EXP 49
18430: PPUSH
18431: CALL_OW 310
18435: IFFALSE 18419
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18437: LD_EXP 49
18441: PPUSH
18442: LD_STRING DKam-Weapons-a-3
18444: PPUSH
18445: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18449: LD_EXP 45
18453: PPUSH
18454: LD_STRING DH-Weapons-a-4
18456: PPUSH
18457: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18461: LD_EXP 49
18465: PPUSH
18466: LD_INT 11
18468: PPUSH
18469: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18473: LD_EXP 49
18477: PPUSH
18478: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18482: LD_EXP 49
18486: PPUSH
18487: LD_INT 2
18489: PPUSH
18490: CALL_OW 235
// if hasRevolver then
18494: LD_EXP 8
18498: IFFALSE 18520
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18500: LD_EXP 45
18504: PPUSH
18505: LD_STRING DH-Kaia-Revolver-1
18507: PPUSH
18508: CALL_OW 88
// heikeHasRevolver := true ;
18512: LD_ADDR_EXP 20
18516: PUSH
18517: LD_INT 1
18519: ST_TO_ADDR
// end ; end else
18520: GO 18560
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18522: LD_EXP 45
18526: PPUSH
18527: LD_STRING DH-Weapons-Alone-2
18529: PPUSH
18530: CALL_OW 88
// if hasRevolver then
18534: LD_EXP 8
18538: IFFALSE 18560
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18540: LD_EXP 45
18544: PPUSH
18545: LD_STRING DH-Kaia-Revolver-1a
18547: PPUSH
18548: CALL_OW 88
// heikeHasRevolver := true ;
18552: LD_ADDR_EXP 20
18556: PUSH
18557: LD_INT 1
18559: ST_TO_ADDR
// end ; end ; end ; end else
18560: GO 18574
// Say ( Heike , DH-Locked ) ;
18562: LD_EXP 45
18566: PPUSH
18567: LD_STRING DH-Locked
18569: PPUSH
18570: CALL_OW 88
// end ; end ;
18574: GO 18577
18576: POP
// SetSide ( building , 3 ) ;
18577: LD_VAR 0 1
18581: PPUSH
18582: LD_INT 3
18584: PPUSH
18585: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL 19719 0 1
// wait ( 0 0$0.3 ) ;
18598: LD_INT 10
18600: PPUSH
18601: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18605: LD_EXP 45
18609: PPUSH
18610: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18614: LD_EXP 45
18618: PPUSH
18619: LD_INT 2
18621: PPUSH
18622: CALL_OW 235
// InGameOff ;
18626: CALL_OW 9
// end ;
18630: LD_VAR 0 2
18634: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18635: LD_EXP 30
18639: NOT
18640: PUSH
18641: LD_EXP 17
18645: NOT
18646: AND
18647: PUSH
18648: LD_INT 22
18650: PUSH
18651: LD_INT 5
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PPUSH
18672: CALL_OW 69
18676: PUSH
18677: LD_INT 0
18679: EQUAL
18680: AND
18681: PUSH
18682: LD_INT 22
18684: PUSH
18685: LD_INT 4
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 21
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: CALL_OW 69
18710: PUSH
18711: LD_INT 0
18713: EQUAL
18714: PUSH
18715: LD_EXP 25
18719: AND
18720: PUSH
18721: LD_EXP 25
18725: NOT
18726: OR
18727: AND
18728: IFFALSE 18760
18730: GO 18732
18732: DISABLE
// begin DialogueOn ;
18733: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18737: LD_EXP 45
18741: PPUSH
18742: LD_STRING DH-Alarm-2
18744: PPUSH
18745: CALL_OW 88
// DialogueOff ;
18749: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18753: LD_STRING M1-people-out
18755: PPUSH
18756: CALL_OW 337
// end ;
18760: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
18761: LD_EXP 47
18765: PPUSH
18766: CALL_OW 255
18770: PUSH
18771: LD_INT 2
18773: EQUAL
18774: PUSH
18775: LD_EXP 47
18779: PUSH
18780: LD_EXP 14
18784: IN
18785: AND
18786: PUSH
18787: LD_EXP 45
18791: PPUSH
18792: LD_EXP 47
18796: PPUSH
18797: CALL_OW 296
18801: PUSH
18802: LD_INT 6
18804: LESS
18805: AND
18806: PUSH
18807: LD_EXP 30
18811: NOT
18812: AND
18813: PUSH
18814: LD_EXP 42
18818: AND
18819: IFFALSE 18836
18821: GO 18823
18823: DISABLE
// SetClass ( Mike , class_hunter ) ;
18824: LD_EXP 47
18828: PPUSH
18829: LD_INT 32
18831: PPUSH
18832: CALL_OW 336
18836: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
18837: LD_EXP 41
18841: PUSH
18842: LD_EXP 40
18846: AND
18847: PUSH
18848: LD_INT 137
18850: PPUSH
18851: CALL_OW 255
18855: PUSH
18856: LD_INT 3
18858: EQUAL
18859: AND
18860: PUSH
18861: LD_EXP 14
18865: PPUSH
18866: LD_INT 95
18868: PUSH
18869: LD_INT 65
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 25
18888: PUSH
18889: LD_INT 33
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 72
18905: AND
18906: PUSH
18907: LD_INT 2
18909: PPUSH
18910: LD_INT 3
18912: PPUSH
18913: CALL_OW 81
18917: PUSH
18918: LD_INT 2
18920: EQUAL
18921: NOT
18922: AND
18923: PUSH
18924: LD_EXP 65
18928: PPUSH
18929: LD_INT 137
18931: PPUSH
18932: CALL_OW 296
18936: PUSH
18937: LD_INT 12
18939: LESS
18940: NOT
18941: AND
18942: IFFALSE 19196
18944: GO 18946
18946: DISABLE
18947: LD_INT 0
18949: PPUSH
18950: PPUSH
// begin enable ;
18951: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
18952: LD_ADDR_VAR 0 2
18956: PUSH
18957: LD_EXP 14
18961: PPUSH
18962: LD_INT 95
18964: PUSH
18965: LD_INT 65
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 22
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 25
18984: PUSH
18985: LD_INT 33
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: LIST
18996: PPUSH
18997: CALL_OW 72
19001: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19002: LD_STRING QWeapons
19004: PPUSH
19005: CALL_OW 97
19009: PUSH
19010: LD_INT 1
19012: EQUAL
19013: IFFALSE 19196
// begin for i in tmp do
19015: LD_ADDR_VAR 0 1
19019: PUSH
19020: LD_VAR 0 2
19024: PUSH
19025: FOR_IN
19026: IFFALSE 19194
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19028: LD_INT 137
19030: PPUSH
19031: CALL_OW 313
19035: PUSH
19036: LD_INT 6
19038: EQUAL
19039: IFFALSE 19043
// continue ;
19041: GO 19025
// SetSide ( i , 3 ) ;
19043: LD_VAR 0 1
19047: PPUSH
19048: LD_INT 3
19050: PPUSH
19051: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19055: LD_VAR 0 1
19059: PPUSH
19060: LD_INT 137
19062: PPUSH
19063: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19067: LD_ADDR_EXP 40
19071: PUSH
19072: LD_EXP 40
19076: PPUSH
19077: CALL 67979 0 1
19081: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19082: LD_INT 10
19084: PPUSH
19085: CALL_OW 67
// until IsInUnit ( i ) ;
19089: LD_VAR 0 1
19093: PPUSH
19094: CALL_OW 310
19098: IFFALSE 19082
// SetClass ( i , class_soldier ) ;
19100: LD_VAR 0 1
19104: PPUSH
19105: LD_INT 1
19107: PPUSH
19108: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19112: LD_VAR 0 1
19116: PPUSH
19117: CALL_OW 122
// wait ( 0 0$1 ) ;
19121: LD_INT 35
19123: PPUSH
19124: CALL_OW 67
// until not IsInUnit ( i ) ;
19128: LD_VAR 0 1
19132: PPUSH
19133: CALL_OW 310
19137: NOT
19138: IFFALSE 19112
// SetSide ( i , 2 ) ;
19140: LD_VAR 0 1
19144: PPUSH
19145: LD_INT 2
19147: PPUSH
19148: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19152: LD_VAR 0 1
19156: PPUSH
19157: LD_INT 191
19159: PPUSH
19160: LD_INT 126
19162: PPUSH
19163: CALL_OW 171
// if weaponsAmount = 0 then
19167: LD_EXP 40
19171: PUSH
19172: LD_INT 0
19174: EQUAL
19175: IFFALSE 19192
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19177: LD_INT 65
19179: PPUSH
19180: LD_INT 0
19182: PPUSH
19183: CALL_OW 424
// disable ;
19187: DISABLE
// exit ;
19188: POP
19189: POP
19190: GO 19196
// end ; end ;
19192: GO 19025
19194: POP
19195: POP
// end ; end ; end_of_file
19196: PPOPN 2
19198: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19199: LD_VAR 0 1
19203: PUSH
19204: LD_INT 3
19206: DOUBLE
19207: EQUAL
19208: IFTRUE 19212
19210: GO 19242
19212: POP
// begin repeat wait ( 0 0$1 ) ;
19213: LD_INT 35
19215: PPUSH
19216: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19220: LD_EXP 45
19224: PPUSH
19225: CALL_OW 85
// until IsDying ( Heike ) ;
19229: LD_EXP 45
19233: PPUSH
19234: CALL_OW 303
19238: IFFALSE 19213
// end ; end ;
19240: GO 19243
19242: POP
// end ;
19243: PPOPN 1
19245: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19246: LD_OWVAR 59
19250: IFFALSE 19254
// exit ;
19252: GO 19328
// if showPlaceEvent then
19254: LD_INT 4
19256: IFFALSE 19328
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19258: LD_VAR 0 2
19262: PPUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: LD_INT 2
19270: PPUSH
19271: LD_INT 6
19273: NEG
19274: PPUSH
19275: CALL_OW 330
// CenterOnXY ( x , y ) ;
19279: LD_VAR 0 2
19283: PPUSH
19284: LD_VAR 0 3
19288: PPUSH
19289: CALL_OW 84
// wait ( time ) ;
19293: LD_VAR 0 4
19297: PPUSH
19298: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19302: LD_EXP 45
19306: PPUSH
19307: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19311: LD_VAR 0 2
19315: PPUSH
19316: LD_VAR 0 3
19320: PPUSH
19321: LD_INT 2
19323: PPUSH
19324: CALL_OW 331
// end ; end ;
19328: PPOPN 7
19330: END
// on UnitDestroyed ( un ) do var x , y ;
19331: LD_INT 0
19333: PPUSH
19334: PPUSH
// begin if un = Heike and hasNormalScene then
19335: LD_VAR 0 1
19339: PUSH
19340: LD_EXP 45
19344: EQUAL
19345: PUSH
19346: LD_EXP 5
19350: AND
19351: IFFALSE 19375
// if loseCounter then
19353: LD_EXP 32
19357: IFFALSE 19368
// YouLost ( HeikeNoSurrender ) else
19359: LD_STRING HeikeNoSurrender
19361: PPUSH
19362: CALL_OW 104
19366: GO 19375
// YouLost ( Heike ) ;
19368: LD_STRING Heike
19370: PPUSH
19371: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19375: LD_VAR 0 1
19379: PPUSH
19380: CALL_OW 255
19384: PUSH
19385: LD_INT 2
19387: EQUAL
19388: PUSH
19389: LD_VAR 0 1
19393: PPUSH
19394: CALL_OW 247
19398: PUSH
19399: LD_INT 1
19401: EQUAL
19402: AND
19403: IFFALSE 19420
// loseCounter := Inc ( loseCounter ) ;
19405: LD_ADDR_EXP 32
19409: PUSH
19410: LD_EXP 32
19414: PPUSH
19415: CALL 67957 0 1
19419: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19420: LD_VAR 0 1
19424: PPUSH
19425: CALL_OW 255
19429: PUSH
19430: LD_INT 6
19432: EQUAL
19433: PUSH
19434: LD_EXP 17
19438: NOT
19439: AND
19440: PUSH
19441: LD_VAR 0 1
19445: PUSH
19446: LD_EXP 70
19450: IN
19451: AND
19452: IFFALSE 19556
// begin x := GetX ( un ) ;
19454: LD_ADDR_VAR 0 2
19458: PUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 250
19468: ST_TO_ADDR
// y := GetY ( un ) ;
19469: LD_ADDR_VAR 0 3
19473: PUSH
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 251
19483: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19484: LD_ADDR_EXP 43
19488: PUSH
19489: LD_EXP 43
19493: PPUSH
19494: LD_VAR 0 2
19498: PUSH
19499: LD_VAR 0 3
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PPUSH
19508: CALL 66596 0 2
19512: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19513: LD_ADDR_EXP 70
19517: PUSH
19518: LD_EXP 70
19522: PUSH
19523: LD_VAR 0 1
19527: DIFF
19528: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19529: LD_INT 3
19531: PPUSH
19532: LD_VAR 0 2
19536: PPUSH
19537: LD_VAR 0 3
19541: PPUSH
19542: CALL_OW 293
19546: IFFALSE 19556
// isAlarm := true ;
19548: LD_ADDR_EXP 17
19552: PUSH
19553: LD_INT 1
19555: ST_TO_ADDR
// end ; end ;
19556: PPOPN 3
19558: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
19559: LD_EXP 44
19563: IFFALSE 19567
// exit ;
19565: GO 19615
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19567: LD_VAR 0 1
19571: PUSH
19572: LD_INT 2
19574: EQUAL
19575: PUSH
19576: LD_VAR 0 2
19580: PUSH
19581: LD_INT 3
19583: EQUAL
19584: AND
19585: PUSH
19586: LD_VAR 0 1
19590: PUSH
19591: LD_INT 3
19593: EQUAL
19594: PUSH
19595: LD_VAR 0 2
19599: PUSH
19600: LD_INT 2
19602: EQUAL
19603: AND
19604: OR
19605: IFFALSE 19615
// isAlarm := true ;
19607: LD_ADDR_EXP 17
19611: PUSH
19612: LD_INT 1
19614: ST_TO_ADDR
// end ; end_of_file
19615: PPOPN 2
19617: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19618: LD_INT 0
19620: PPUSH
19621: PPUSH
19622: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19623: LD_ADDR_VAR 0 4
19627: PUSH
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 310
19637: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19638: LD_ADDR_VAR 0 5
19642: PUSH
19643: LD_VAR 0 2
19647: PPUSH
19648: CALL_OW 310
19652: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_VAR 0 4
19662: PUSH
19663: LD_VAR 0 4
19667: PUSH
19668: LD_VAR 0 5
19672: EQUAL
19673: AND
19674: ST_TO_ADDR
// end ;
19675: LD_VAR 0 3
19679: RET
// export function ShowPlace ( x , y , time ) ; begin
19680: LD_INT 0
19682: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
19683: LD_INT 4
19685: PPUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: LD_VAR 0 2
19695: PPUSH
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_INT 0
19703: PPUSH
19704: LD_INT 0
19706: PPUSH
19707: LD_INT 0
19709: PPUSH
19710: CALL_OW 595
// end ;
19714: LD_VAR 0 4
19718: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
19719: LD_INT 0
19721: PPUSH
19722: PPUSH
19723: PPUSH
19724: PPUSH
19725: PPUSH
19726: PPUSH
// if not IsOk ( building ) then
19727: LD_VAR 0 1
19731: PPUSH
19732: CALL_OW 302
19736: NOT
19737: IFFALSE 19741
// exit ;
19739: GO 19988
// x := GetX ( building ) ;
19741: LD_ADDR_VAR 0 4
19745: PUSH
19746: LD_VAR 0 1
19750: PPUSH
19751: CALL_OW 250
19755: ST_TO_ADDR
// y := GetY ( building ) ;
19756: LD_ADDR_VAR 0 5
19760: PUSH
19761: LD_VAR 0 1
19765: PPUSH
19766: CALL_OW 251
19770: ST_TO_ADDR
// d := GetDir ( building ) ;
19771: LD_ADDR_VAR 0 6
19775: PUSH
19776: LD_VAR 0 1
19780: PPUSH
19781: CALL_OW 254
19785: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19786: LD_ADDR_VAR 0 7
19790: PUSH
19791: LD_VAR 0 4
19795: PPUSH
19796: LD_VAR 0 6
19800: PPUSH
19801: LD_INT 3
19803: PPUSH
19804: CALL_OW 272
19808: PUSH
19809: LD_VAR 0 5
19813: PPUSH
19814: LD_VAR 0 6
19818: PPUSH
19819: LD_INT 3
19821: PPUSH
19822: CALL_OW 273
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19831: LD_VAR 0 7
19835: PUSH
19836: LD_INT 1
19838: ARRAY
19839: PPUSH
19840: LD_VAR 0 7
19844: PUSH
19845: LD_INT 2
19847: ARRAY
19848: PPUSH
19849: CALL_OW 488
19853: NOT
19854: IFFALSE 19858
// exit ;
19856: GO 19988
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
19858: LD_ADDR_VAR 0 2
19862: PUSH
19863: LD_INT 92
19865: PUSH
19866: LD_VAR 0 4
19870: PUSH
19871: LD_VAR 0 5
19875: PUSH
19876: LD_INT 4
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 3
19887: PUSH
19888: LD_INT 54
19890: PUSH
19891: EMPTY
19892: LIST
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PPUSH
19902: CALL_OW 69
19906: ST_TO_ADDR
// if not result then
19907: LD_VAR 0 2
19911: NOT
19912: IFFALSE 19916
// exit ;
19914: GO 19988
// for i in result do
19916: LD_ADDR_VAR 0 3
19920: PUSH
19921: LD_VAR 0 2
19925: PUSH
19926: FOR_IN
19927: IFFALSE 19986
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
19929: LD_VAR 0 3
19933: PPUSH
19934: LD_VAR 0 3
19938: PPUSH
19939: CALL_OW 250
19943: PPUSH
19944: LD_VAR 0 6
19948: PPUSH
19949: LD_INT 3
19951: PPUSH
19952: CALL_OW 272
19956: PPUSH
19957: LD_VAR 0 3
19961: PPUSH
19962: CALL_OW 251
19966: PPUSH
19967: LD_VAR 0 6
19971: PPUSH
19972: LD_INT 3
19974: PPUSH
19975: CALL_OW 273
19979: PPUSH
19980: CALL_OW 111
19984: GO 19926
19986: POP
19987: POP
// end ;
19988: LD_VAR 0 2
19992: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
19993: LD_INT 0
19995: PPUSH
19996: PPUSH
19997: PPUSH
19998: PPUSH
19999: PPUSH
20000: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 302
20010: NOT
20011: PUSH
20012: LD_VAR 0 2
20016: PPUSH
20017: CALL_OW 302
20021: NOT
20022: OR
20023: PUSH
20024: LD_VAR 0 2
20028: PPUSH
20029: CALL_OW 313
20033: PUSH
20034: LD_INT 6
20036: EQUAL
20037: OR
20038: IFFALSE 20042
// exit ;
20040: GO 20259
// btype := GetBType ( building ) ;
20042: LD_ADDR_VAR 0 8
20046: PUSH
20047: LD_VAR 0 2
20051: PPUSH
20052: CALL_OW 266
20056: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
20057: LD_VAR 0 8
20061: PUSH
20062: LD_INT 0
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: LD_INT 4
20073: PUSH
20074: LD_INT 5
20076: PUSH
20077: LD_INT 3
20079: PUSH
20080: LD_INT 6
20082: PUSH
20083: LD_INT 7
20085: PUSH
20086: LD_INT 8
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: IN
20100: NOT
20101: IFFALSE 20105
// exit ;
20103: GO 20259
// x := GetX ( building ) ;
20105: LD_ADDR_VAR 0 4
20109: PUSH
20110: LD_VAR 0 2
20114: PPUSH
20115: CALL_OW 250
20119: ST_TO_ADDR
// y := GetY ( building ) ;
20120: LD_ADDR_VAR 0 5
20124: PUSH
20125: LD_VAR 0 2
20129: PPUSH
20130: CALL_OW 251
20134: ST_TO_ADDR
// d := GetDir ( building ) ;
20135: LD_ADDR_VAR 0 6
20139: PUSH
20140: LD_VAR 0 2
20144: PPUSH
20145: CALL_OW 254
20149: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20150: LD_ADDR_VAR 0 7
20154: PUSH
20155: LD_VAR 0 4
20159: PPUSH
20160: LD_VAR 0 6
20164: PPUSH
20165: LD_INT 3
20167: PPUSH
20168: CALL_OW 272
20172: PUSH
20173: LD_VAR 0 5
20177: PPUSH
20178: LD_VAR 0 6
20182: PPUSH
20183: LD_INT 3
20185: PPUSH
20186: CALL_OW 273
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20195: LD_VAR 0 7
20199: PUSH
20200: LD_INT 1
20202: ARRAY
20203: PPUSH
20204: LD_VAR 0 7
20208: PUSH
20209: LD_INT 2
20211: ARRAY
20212: PPUSH
20213: CALL_OW 488
20217: NOT
20218: IFFALSE 20222
// exit ;
20220: GO 20259
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20222: LD_ADDR_VAR 0 3
20226: PUSH
20227: LD_VAR 0 1
20231: PPUSH
20232: LD_VAR 0 7
20236: PUSH
20237: LD_INT 1
20239: ARRAY
20240: PPUSH
20241: LD_VAR 0 7
20245: PUSH
20246: LD_INT 2
20248: ARRAY
20249: PPUSH
20250: CALL_OW 297
20254: PUSH
20255: LD_INT 4
20257: LESS
20258: ST_TO_ADDR
// end ;
20259: LD_VAR 0 3
20263: RET
// export function PlaceExplosives ( building ) ; begin
20264: LD_INT 0
20266: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20267: LD_ADDR_EXP 29
20271: PUSH
20272: LD_EXP 29
20276: PPUSH
20277: LD_VAR 0 1
20281: PPUSH
20282: CALL 66596 0 2
20286: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20287: LD_VAR 0 1
20291: PPUSH
20292: CALL_OW 250
20296: PPUSH
20297: LD_VAR 0 1
20301: PPUSH
20302: CALL_OW 251
20306: PPUSH
20307: LD_STRING PlantBomb
20309: PPUSH
20310: CALL_OW 366
// end ;
20314: LD_VAR 0 2
20318: RET
// export function CreateNature ; var i ; begin
20319: LD_INT 0
20321: PPUSH
20322: PPUSH
// PrepareFrog ;
20323: CALL 63073 0 0
// for i := 1 to 3 do
20327: LD_ADDR_VAR 0 2
20331: PUSH
20332: DOUBLE
20333: LD_INT 1
20335: DEC
20336: ST_TO_ADDR
20337: LD_INT 3
20339: PUSH
20340: FOR_TO
20341: IFFALSE 20360
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20343: CALL_OW 44
20347: PPUSH
20348: LD_INT 24
20350: PPUSH
20351: LD_INT 0
20353: PPUSH
20354: CALL_OW 49
20358: GO 20340
20360: POP
20361: POP
// end ;
20362: LD_VAR 0 1
20366: RET
// export function MarkBuilding ( building , marker ) ; begin
20367: LD_INT 0
20369: PPUSH
// if marker then
20370: LD_VAR 0 2
20374: IFFALSE 20421
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20376: LD_VAR 0 1
20380: PPUSH
20381: CALL_OW 250
20385: PPUSH
20386: LD_VAR 0 1
20390: PPUSH
20391: CALL_OW 251
20395: PPUSH
20396: LD_INT 2
20398: PPUSH
20399: LD_INT 3
20401: NEG
20402: PPUSH
20403: CALL_OW 330
// SetBName ( building , target ) ;
20407: LD_VAR 0 1
20411: PPUSH
20412: LD_STRING target
20414: PPUSH
20415: CALL_OW 500
// end else
20419: GO 20460
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20421: LD_VAR 0 1
20425: PPUSH
20426: CALL_OW 250
20430: PPUSH
20431: LD_VAR 0 1
20435: PPUSH
20436: CALL_OW 251
20440: PPUSH
20441: LD_INT 2
20443: PPUSH
20444: CALL_OW 331
// SetBName ( building ,  ) ;
20448: LD_VAR 0 1
20452: PPUSH
20453: LD_STRING 
20455: PPUSH
20456: CALL_OW 500
// end ; end ; end_of_file
20460: LD_VAR 0 3
20464: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20465: LD_INT 0
20467: PPUSH
// lockerCodeValid := false ;
20468: LD_ADDR_EXP 71
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// if not step then
20476: LD_LOC 1
20480: NOT
20481: IFFALSE 20491
// step := 1 ;
20483: LD_ADDR_LOC 1
20487: PUSH
20488: LD_INT 1
20490: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20491: LD_STRING HEscape
20493: PUSH
20494: LD_LOC 1
20498: STR
20499: PPUSH
20500: CALL_OW 97
20504: PUSH
20505: LD_INT 1
20507: DOUBLE
20508: EQUAL
20509: IFTRUE 20513
20511: GO 20520
20513: POP
// LockerMinigameSearch ; 2 :
20514: CALL 20553 0 0
20518: GO 20536
20520: LD_INT 2
20522: DOUBLE
20523: EQUAL
20524: IFTRUE 20528
20526: GO 20535
20528: POP
// LockerMinigameSetCode ; end ;
20529: CALL 20627 0 0
20533: GO 20536
20535: POP
// if lockerCodeValid then
20536: LD_EXP 71
20540: IFFALSE 20544
// exit ;
20542: GO 20548
// StartLockerMinigame ;
20544: CALL 20465 0 0
// end ;
20548: LD_VAR 0 1
20552: RET
// function LockerMinigameSearch ; begin
20553: LD_INT 0
20555: PPUSH
// if code then
20556: LD_LOC 2
20560: IFFALSE 20576
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20562: LD_EXP 45
20566: PPUSH
20567: LD_STRING DH-Escape-3-Hint-0
20569: PPUSH
20570: CALL_OW 88
// exit ;
20574: GO 20622
// end ; Randomize ;
20576: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20580: LD_ADDR_LOC 2
20584: PUSH
20585: LD_INT 1
20587: PPUSH
20588: LD_INT 5
20590: PPUSH
20591: CALL_OW 12
20595: ST_TO_ADDR
// step := 2 ;
20596: LD_ADDR_LOC 1
20600: PUSH
20601: LD_INT 2
20603: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20604: LD_EXP 45
20608: PPUSH
20609: LD_STRING DH-Escape-3-Hint-
20611: PUSH
20612: LD_LOC 2
20616: STR
20617: PPUSH
20618: CALL_OW 88
// end ;
20622: LD_VAR 0 1
20626: RET
// function LockerMinigameSetCode ; begin
20627: LD_INT 0
20629: PPUSH
// if not code then
20630: LD_LOC 2
20634: NOT
20635: IFFALSE 20645
// code := 0 ;
20637: LD_ADDR_LOC 2
20641: PUSH
20642: LD_INT 0
20644: ST_TO_ADDR
// lockerBusy := true ;
20645: LD_ADDR_EXP 72
20649: PUSH
20650: LD_INT 1
20652: ST_TO_ADDR
// InGameOff ;
20653: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20657: LD_STRING initLockerMinigame("
20659: PUSH
20660: LD_LOC 2
20664: STR
20665: PUSH
20666: LD_STRING ")
20668: STR
20669: PPUSH
20670: CALL_OW 559
// step := 3 ;
20674: LD_ADDR_LOC 1
20678: PUSH
20679: LD_INT 3
20681: ST_TO_ADDR
// repeat wait ( 1 ) ;
20682: LD_INT 1
20684: PPUSH
20685: CALL_OW 67
// until not lockerBusy ;
20689: LD_EXP 72
20693: NOT
20694: IFFALSE 20682
// InGameOn ;
20696: CALL_OW 8
// if not lockerCodeValid then
20700: LD_EXP 71
20704: NOT
20705: IFFALSE 20731
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
20707: LD_EXP 45
20711: PPUSH
20712: LD_STRING DH-Escape-3-Fail-
20714: PUSH
20715: LD_INT 1
20717: PPUSH
20718: LD_INT 2
20720: PPUSH
20721: CALL_OW 12
20725: STR
20726: PPUSH
20727: CALL_OW 88
// end ; end_of_file
20731: LD_VAR 0 1
20735: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
20736: LD_VAR 0 2
20740: PUSH
20741: LD_INT 102
20743: EQUAL
20744: IFFALSE 20766
// begin lockerBusy := false ;
20746: LD_ADDR_EXP 72
20750: PUSH
20751: LD_INT 0
20753: ST_TO_ADDR
// lockerCodeValid := p3 ;
20754: LD_ADDR_EXP 71
20758: PUSH
20759: LD_VAR 0 3
20763: ST_TO_ADDR
// end else
20764: GO 20820
// if p2 = 103 then
20766: LD_VAR 0 2
20770: PUSH
20771: LD_INT 103
20773: EQUAL
20774: IFFALSE 20786
// begin weatherBusy := false ;
20776: LD_ADDR_EXP 37
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// end else
20784: GO 20820
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
20786: LD_VAR 0 1
20790: PPUSH
20791: LD_VAR 0 2
20795: PPUSH
20796: LD_VAR 0 3
20800: PPUSH
20801: LD_VAR 0 4
20805: PPUSH
20806: LD_VAR 0 5
20810: PPUSH
20811: LD_VAR 0 6
20815: PPUSH
20816: CALL 70973 0 6
// end ;
20820: PPOPN 6
20822: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
20823: LD_STRING killGameMusic();
20825: PPUSH
20826: CALL_OW 559
// PlayOriginalMusic ;
20830: CALL 91526 0 0
// SOS_MapStart ( ) ;
20834: CALL 70877 0 0
// end ; end_of_file
20838: PPOPN 1
20840: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
20841: LD_EXP 17
20845: NOT
20846: PUSH
20847: LD_EXP 70
20851: AND
20852: IFFALSE 21432
20854: GO 20856
20856: DISABLE
20857: LD_INT 0
20859: PPUSH
20860: PPUSH
20861: PPUSH
20862: PPUSH
20863: PPUSH
// begin enable ;
20864: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
20865: LD_ADDR_VAR 0 3
20869: PUSH
20870: LD_INT 26
20872: PUSH
20873: LD_INT 27
20875: PUSH
20876: LD_INT 28
20878: PUSH
20879: LD_INT 29
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 30
20890: PUSH
20891: LD_INT 31
20893: PUSH
20894: LD_INT 32
20896: PUSH
20897: LD_INT 33
20899: PUSH
20900: LD_INT 34
20902: PUSH
20903: LD_INT 35
20905: PUSH
20906: LD_INT 36
20908: PUSH
20909: LD_INT 37
20911: PUSH
20912: LD_INT 38
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 39
20928: PUSH
20929: LD_INT 40
20931: PUSH
20932: LD_INT 41
20934: PUSH
20935: LD_INT 42
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 43
20946: PUSH
20947: LD_INT 44
20949: PUSH
20950: LD_INT 45
20952: PUSH
20953: LD_INT 46
20955: PUSH
20956: LD_INT 47
20958: PUSH
20959: LD_INT 46
20961: PUSH
20962: LD_INT 45
20964: PUSH
20965: LD_INT 44
20967: PUSH
20968: LD_INT 43
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: ST_TO_ADDR
// for i in ruPatrol do
20988: LD_ADDR_VAR 0 1
20992: PUSH
20993: LD_EXP 70
20997: PUSH
20998: FOR_IN
20999: IFFALSE 21430
// begin if not IsOk ( i ) then
21001: LD_VAR 0 1
21005: PPUSH
21006: CALL_OW 302
21010: NOT
21011: IFFALSE 21015
// continue ;
21013: GO 20998
// if Count ( ruKilledHex ) then
21015: LD_EXP 43
21019: PPUSH
21020: CALL 30996 0 1
21024: IFFALSE 21097
// for j in ruKilledHex do
21026: LD_ADDR_VAR 0 2
21030: PUSH
21031: LD_EXP 43
21035: PUSH
21036: FOR_IN
21037: IFFALSE 21095
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
21039: LD_VAR 0 1
21043: PPUSH
21044: LD_VAR 0 2
21048: PUSH
21049: LD_INT 1
21051: ARRAY
21052: PPUSH
21053: LD_VAR 0 2
21057: PUSH
21058: LD_INT 2
21060: ARRAY
21061: PPUSH
21062: CALL_OW 297
21066: PUSH
21067: LD_INT 6
21069: LESS
21070: IFFALSE 21093
// begin Query ( QBody ) ;
21072: LD_STRING QBody
21074: PPUSH
21075: CALL_OW 97
// isAlarm := true ;
21079: LD_ADDR_EXP 17
21083: PUSH
21084: LD_INT 1
21086: ST_TO_ADDR
// exit ;
21087: POP
21088: POP
21089: POP
21090: POP
21091: GO 21432
// end ;
21093: GO 21036
21095: POP
21096: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
21097: LD_ADDR_VAR 0 5
21101: PUSH
21102: LD_INT 22
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 21
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 91
21124: PUSH
21125: LD_VAR 0 1
21129: PUSH
21130: LD_INT 7
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: PPUSH
21143: CALL_OW 69
21147: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21148: LD_INT 2
21150: PPUSH
21151: LD_VAR 0 1
21155: PPUSH
21156: CALL_OW 292
21160: PUSH
21161: LD_VAR 0 5
21165: AND
21166: IFFALSE 21316
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21168: LD_EXP 30
21172: PUSH
21173: LD_VAR 0 1
21177: PPUSH
21178: LD_EXP 65
21182: PPUSH
21183: CALL_OW 296
21187: PUSH
21188: LD_INT 16
21190: LESS
21191: AND
21192: PUSH
21193: LD_EXP 38
21197: OR
21198: IFFALSE 21202
// continue ;
21200: GO 20998
// for j in tmp do
21202: LD_ADDR_VAR 0 2
21206: PUSH
21207: LD_VAR 0 5
21211: PUSH
21212: FOR_IN
21213: IFFALSE 21274
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21215: LD_ADDR_VAR 0 5
21219: PUSH
21220: LD_VAR 0 5
21224: PUSH
21225: LD_INT 22
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 21
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 91
21247: PUSH
21248: LD_VAR 0 2
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: PPUSH
21266: CALL_OW 69
21270: UNION
21271: ST_TO_ADDR
21272: GO 21212
21274: POP
21275: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21276: LD_VAR 0 1
21280: PPUSH
21281: LD_VAR 0 5
21285: PPUSH
21286: LD_VAR 0 1
21290: PPUSH
21291: CALL_OW 74
21295: PPUSH
21296: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21300: LD_VAR 0 1
21304: PPUSH
21305: LD_VAR 0 5
21309: PPUSH
21310: CALL 21435 0 2
// continue ;
21314: GO 20998
// end ; if HasTask ( i ) then
21316: LD_VAR 0 1
21320: PPUSH
21321: CALL_OW 314
21325: IFFALSE 21329
// continue ;
21327: GO 20998
// tag := GetTag ( i ) ;
21329: LD_ADDR_VAR 0 4
21333: PUSH
21334: LD_VAR 0 1
21338: PPUSH
21339: CALL_OW 110
21343: ST_TO_ADDR
// if not tag then
21344: LD_VAR 0 4
21348: NOT
21349: IFFALSE 21362
// begin ComHold ( i ) ;
21351: LD_VAR 0 1
21355: PPUSH
21356: CALL_OW 140
// continue ;
21360: GO 20998
// end ; for j := 1 to points [ tag ] do
21362: LD_ADDR_VAR 0 2
21366: PUSH
21367: DOUBLE
21368: LD_INT 1
21370: DEC
21371: ST_TO_ADDR
21372: LD_VAR 0 3
21376: PUSH
21377: LD_VAR 0 4
21381: ARRAY
21382: PUSH
21383: FOR_TO
21384: IFFALSE 21426
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21386: LD_VAR 0 1
21390: PPUSH
21391: LD_VAR 0 3
21395: PUSH
21396: LD_VAR 0 4
21400: ARRAY
21401: PUSH
21402: LD_VAR 0 2
21406: ARRAY
21407: PPUSH
21408: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21412: LD_VAR 0 1
21416: PPUSH
21417: LD_INT 70
21419: PPUSH
21420: CALL_OW 202
// end ;
21424: GO 21383
21426: POP
21427: POP
// end ;
21428: GO 20998
21430: POP
21431: POP
// end ;
21432: PPOPN 5
21434: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21435: LD_INT 0
21437: PPUSH
21438: PPUSH
21439: PPUSH
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21440: LD_VAR 0 2
21444: PPUSH
21445: LD_INT 2
21447: PUSH
21448: LD_INT 25
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 25
21460: PUSH
21461: LD_INT 11
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 25
21470: PUSH
21471: LD_INT 34
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 25
21480: PUSH
21481: LD_INT 32
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: PUSH
21495: EMPTY
21496: LIST
21497: PPUSH
21498: CALL_OW 72
21502: IFFALSE 21615
// begin blockPatrolThread := true ;
21504: LD_ADDR_EXP 38
21508: PUSH
21509: LD_INT 1
21511: ST_TO_ADDR
// DialogueOn ;
21512: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21516: LD_VAR 0 1
21520: PPUSH
21521: CALL_OW 258
21525: PUSH
21526: LD_INT 1
21528: DOUBLE
21529: EQUAL
21530: IFTRUE 21534
21532: GO 21549
21534: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21535: LD_VAR 0 1
21539: PPUSH
21540: LD_STRING DRum-Fail-3
21542: PPUSH
21543: CALL_OW 88
21547: GO 21573
21549: LD_INT 2
21551: DOUBLE
21552: EQUAL
21553: IFTRUE 21557
21555: GO 21572
21557: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
21558: LD_VAR 0 1
21562: PPUSH
21563: LD_STRING DRuf-Fail-3
21565: PPUSH
21566: CALL_OW 88
21570: GO 21573
21572: POP
// DialogueOff ;
21573: CALL_OW 7
// wait ( 0 0$5 ) ;
21577: LD_INT 175
21579: PPUSH
21580: CALL_OW 67
// if IsOk ( guard ) then
21584: LD_VAR 0 1
21588: PPUSH
21589: CALL_OW 302
21593: IFFALSE 21605
// isAlarm := true else
21595: LD_ADDR_EXP 17
21599: PUSH
21600: LD_INT 1
21602: ST_TO_ADDR
21603: GO 21613
// blockPatrolThread := false ;
21605: LD_ADDR_EXP 38
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// exit ;
21613: GO 22616
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
21615: LD_VAR 0 2
21619: PPUSH
21620: LD_INT 23
21622: PUSH
21623: LD_INT 3
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PPUSH
21630: CALL_OW 72
21634: PUSH
21635: LD_VAR 0 2
21639: PPUSH
21640: LD_INT 95
21642: PUSH
21643: LD_INT 61
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PPUSH
21650: CALL_OW 72
21654: OR
21655: IFFALSE 21659
// exit ;
21657: GO 22616
// DialogueOn ;
21659: CALL_OW 6
// blockPatrolThread := true ;
21663: LD_ADDR_EXP 38
21667: PUSH
21668: LD_INT 1
21670: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
21671: LD_VAR 0 1
21675: PPUSH
21676: CALL_OW 87
// if not Heike in units then
21680: LD_EXP 45
21684: PUSH
21685: LD_VAR 0 2
21689: IN
21690: NOT
21691: IFFALSE 22057
// begin case GetSex ( guard ) of sex_male :
21693: LD_VAR 0 1
21697: PPUSH
21698: CALL_OW 258
21702: PUSH
21703: LD_INT 1
21705: DOUBLE
21706: EQUAL
21707: IFTRUE 21711
21709: GO 21726
21711: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
21712: LD_VAR 0 1
21716: PPUSH
21717: LD_STRING DRum-Guard-1
21719: PPUSH
21720: CALL_OW 88
21724: GO 21750
21726: LD_INT 2
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21749
21734: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
21735: LD_VAR 0 1
21739: PPUSH
21740: LD_STRING DRuf-Guard-1
21742: PPUSH
21743: CALL_OW 88
21747: GO 21750
21749: POP
// case Query ( SurrenderInfoPeople ) of 1 :
21750: LD_STRING SurrenderInfoPeople
21752: PPUSH
21753: CALL_OW 97
21757: PUSH
21758: LD_INT 1
21760: DOUBLE
21761: EQUAL
21762: IFTRUE 21766
21764: GO 21875
21766: POP
// begin Query ( CaughtSquadInfo ) ;
21767: LD_STRING CaughtSquadInfo
21769: PPUSH
21770: CALL_OW 97
// for i in units do
21774: LD_ADDR_VAR 0 4
21778: PUSH
21779: LD_VAR 0 2
21783: PUSH
21784: FOR_IN
21785: IFFALSE 21842
// begin if Carry ( i ) then
21787: LD_VAR 0 4
21791: PPUSH
21792: CALL_OW 281
21796: IFFALSE 21813
// SetCargo ( i , mat_cans , 0 ) ;
21798: LD_VAR 0 4
21802: PPUSH
21803: LD_INT 1
21805: PPUSH
21806: LD_INT 0
21808: PPUSH
21809: CALL_OW 290
// SetSide ( i , 5 ) ;
21813: LD_VAR 0 4
21817: PPUSH
21818: LD_INT 5
21820: PPUSH
21821: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
21825: LD_VAR 0 4
21829: PPUSH
21830: LD_INT 113
21832: PPUSH
21833: LD_INT 17
21835: PPUSH
21836: CALL_OW 111
// end ;
21840: GO 21784
21842: POP
21843: POP
// ComMoveXY ( guard , 117 , 25 ) ;
21844: LD_VAR 0 1
21848: PPUSH
21849: LD_INT 117
21851: PPUSH
21852: LD_INT 25
21854: PPUSH
21855: CALL_OW 111
// DialogueOff ;
21859: CALL_OW 7
// blockPatrolThread := false ;
21863: LD_ADDR_EXP 38
21867: PUSH
21868: LD_INT 0
21870: ST_TO_ADDR
// exit ;
21871: GO 22616
// end ; 2 :
21873: GO 22057
21875: LD_INT 2
21877: DOUBLE
21878: EQUAL
21879: IFTRUE 21883
21881: GO 22056
21883: POP
// begin DialogueOff ;
21884: CALL_OW 7
// wait ( 0 0$2 ) ;
21888: LD_INT 70
21890: PPUSH
21891: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21895: LD_INT 6
21897: PPUSH
21898: LD_INT 2
21900: PPUSH
21901: LD_INT 2
21903: PPUSH
21904: LD_INT 1
21906: PPUSH
21907: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
21911: LD_VAR 0 1
21915: PPUSH
21916: LD_VAR 0 2
21920: PUSH
21921: LD_INT 1
21923: ARRAY
21924: PPUSH
21925: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21929: LD_VAR 0 1
21933: PPUSH
21934: CALL_OW 258
21938: PUSH
21939: LD_INT 1
21941: DOUBLE
21942: EQUAL
21943: IFTRUE 21947
21945: GO 21962
21947: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21948: LD_VAR 0 1
21952: PPUSH
21953: LD_STRING DRum-Fail-3
21955: PPUSH
21956: CALL_OW 88
21960: GO 21986
21962: LD_INT 2
21964: DOUBLE
21965: EQUAL
21966: IFTRUE 21970
21968: GO 21985
21970: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21971: LD_VAR 0 1
21975: PPUSH
21976: LD_STRING DRum-Fail-3
21978: PPUSH
21979: CALL_OW 88
21983: GO 21986
21985: POP
// wait ( 0 0$5 ) ;
21986: LD_INT 175
21988: PPUSH
21989: CALL_OW 67
// if IsOk ( guard ) then
21993: LD_VAR 0 1
21997: PPUSH
21998: CALL_OW 302
22002: IFFALSE 22014
// isAlarm := true else
22004: LD_ADDR_EXP 17
22008: PUSH
22009: LD_INT 1
22011: ST_TO_ADDR
22012: GO 22046
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22014: LD_INT 6
22016: PPUSH
22017: LD_INT 2
22019: PPUSH
22020: LD_INT 0
22022: PPUSH
22023: LD_INT 1
22025: PPUSH
22026: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22030: LD_INT 3
22032: PPUSH
22033: LD_INT 2
22035: PPUSH
22036: LD_INT 0
22038: PPUSH
22039: LD_INT 1
22041: PPUSH
22042: CALL_OW 80
// end ; blockPatrolThread := false ;
22046: LD_ADDR_EXP 38
22050: PUSH
22051: LD_INT 0
22053: ST_TO_ADDR
// end ; end ;
22054: GO 22057
22056: POP
// end ; if Carry ( Heike ) then
22057: LD_EXP 45
22061: PPUSH
22062: CALL_OW 281
22066: IFFALSE 22142
// begin case GetSex ( guard ) of sex_male :
22068: LD_VAR 0 1
22072: PPUSH
22073: CALL_OW 258
22077: PUSH
22078: LD_INT 1
22080: DOUBLE
22081: EQUAL
22082: IFTRUE 22086
22084: GO 22101
22086: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
22087: LD_VAR 0 1
22091: PPUSH
22092: LD_STRING DRum-FoodFail-1
22094: PPUSH
22095: CALL_OW 88
22099: GO 22125
22101: LD_INT 2
22103: DOUBLE
22104: EQUAL
22105: IFTRUE 22109
22107: GO 22124
22109: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22110: LD_VAR 0 1
22114: PPUSH
22115: LD_STRING DRuf-FoodFail-2
22117: PPUSH
22118: CALL_OW 88
22122: GO 22125
22124: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22125: LD_EXP 45
22129: PPUSH
22130: LD_INT 1
22132: PPUSH
22133: LD_INT 0
22135: PPUSH
22136: CALL_OW 290
// end else
22140: GO 22199
// begin case GetSex ( guard ) of sex_male :
22142: LD_VAR 0 1
22146: PPUSH
22147: CALL_OW 258
22151: PUSH
22152: LD_INT 1
22154: DOUBLE
22155: EQUAL
22156: IFTRUE 22160
22158: GO 22175
22160: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22161: LD_VAR 0 1
22165: PPUSH
22166: LD_STRING DRum-Seen-1
22168: PPUSH
22169: CALL_OW 88
22173: GO 22199
22175: LD_INT 2
22177: DOUBLE
22178: EQUAL
22179: IFTRUE 22183
22181: GO 22198
22183: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22184: LD_VAR 0 1
22188: PPUSH
22189: LD_STRING DRuf-Seen-1
22191: PPUSH
22192: CALL_OW 88
22196: GO 22199
22198: POP
// end ; alone := ( units = 1 ) ;
22199: LD_ADDR_VAR 0 5
22203: PUSH
22204: LD_VAR 0 2
22208: PUSH
22209: LD_INT 1
22211: EQUAL
22212: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22213: LD_STRING SurrenderInfo
22215: PPUSH
22216: CALL_OW 97
22220: PUSH
22221: LD_INT 1
22223: DOUBLE
22224: EQUAL
22225: IFTRUE 22229
22227: GO 22418
22229: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22230: LD_INT 23
22232: PPUSH
22233: CALL_OW 87
// RemoveUnit ( Heike ) ;
22237: LD_EXP 45
22241: PPUSH
22242: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22246: LD_EXP 45
22250: PPUSH
22251: LD_INT 23
22253: PPUSH
22254: CALL_OW 52
// if not alone then
22258: LD_VAR 0 5
22262: NOT
22263: IFFALSE 22330
// for i in units diff Heike do
22265: LD_ADDR_VAR 0 4
22269: PUSH
22270: LD_VAR 0 2
22274: PUSH
22275: LD_EXP 45
22279: DIFF
22280: PUSH
22281: FOR_IN
22282: IFFALSE 22328
// begin RemoveUnit ( i ) ;
22284: LD_VAR 0 4
22288: PPUSH
22289: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22293: LD_VAR 0 4
22297: PPUSH
22298: LD_INT 114
22300: PPUSH
22301: LD_INT 17
22303: PPUSH
22304: LD_INT 10
22306: PPUSH
22307: LD_INT 0
22309: PPUSH
22310: CALL_OW 50
// SetSide ( i , 5 ) ;
22314: LD_VAR 0 4
22318: PPUSH
22319: LD_INT 5
22321: PPUSH
22322: CALL_OW 235
// end ;
22326: GO 22281
22328: POP
22329: POP
// wait ( 0 0$0.3 ) ;
22330: LD_INT 10
22332: PPUSH
22333: CALL_OW 67
// if alone then
22337: LD_VAR 0 5
22341: IFFALSE 22352
// Query ( CaughtInfoAlone ) else
22343: LD_STRING CaughtInfoAlone
22345: PPUSH
22346: CALL_OW 97
22350: GO 22359
// Query ( CaughtInfo ) ;
22352: LD_STRING CaughtInfo
22354: PPUSH
22355: CALL_OW 97
// wait ( 0 0$2 ) ;
22359: LD_INT 70
22361: PPUSH
22362: CALL_OW 67
// StartLockerMinigame ;
22366: CALL 20465 0 0
// Say ( Heike , DH-Reset ) ;
22370: LD_EXP 45
22374: PPUSH
22375: LD_STRING DH-Reset
22377: PPUSH
22378: CALL_OW 88
// DialogueOff ;
22382: CALL_OW 7
// InGameOff ;
22386: CALL_OW 9
// blockPatrolThread := false ;
22390: LD_ADDR_EXP 38
22394: PUSH
22395: LD_INT 0
22397: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22398: LD_EXP 45
22402: PPUSH
22403: CALL_OW 122
// ComFree ( guard ) ;
22407: LD_VAR 0 1
22411: PPUSH
22412: CALL_OW 139
// end ; 2 :
22416: GO 22608
22418: LD_INT 2
22420: DOUBLE
22421: EQUAL
22422: IFTRUE 22426
22424: GO 22607
22426: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22427: LD_EXP 45
22431: PPUSH
22432: LD_STRING DH-Guard-2
22434: PPUSH
22435: CALL_OW 88
// DialogueOff ;
22439: CALL_OW 7
// wait ( 0 0$2 ) ;
22443: LD_INT 70
22445: PPUSH
22446: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22450: LD_INT 6
22452: PPUSH
22453: LD_INT 2
22455: PPUSH
22456: LD_INT 2
22458: PPUSH
22459: LD_INT 1
22461: PPUSH
22462: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22466: LD_VAR 0 1
22470: PPUSH
22471: LD_EXP 45
22475: PPUSH
22476: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22480: LD_VAR 0 1
22484: PPUSH
22485: CALL_OW 258
22489: PUSH
22490: LD_INT 1
22492: DOUBLE
22493: EQUAL
22494: IFTRUE 22498
22496: GO 22513
22498: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22499: LD_VAR 0 1
22503: PPUSH
22504: LD_STRING DRum-Fail-3
22506: PPUSH
22507: CALL_OW 88
22511: GO 22537
22513: LD_INT 2
22515: DOUBLE
22516: EQUAL
22517: IFTRUE 22521
22519: GO 22536
22521: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22522: LD_VAR 0 1
22526: PPUSH
22527: LD_STRING DRum-Fail-3
22529: PPUSH
22530: CALL_OW 88
22534: GO 22537
22536: POP
// wait ( 0 0$5 ) ;
22537: LD_INT 175
22539: PPUSH
22540: CALL_OW 67
// if IsOk ( guard ) then
22544: LD_VAR 0 1
22548: PPUSH
22549: CALL_OW 302
22553: IFFALSE 22565
// isAlarm := true else
22555: LD_ADDR_EXP 17
22559: PUSH
22560: LD_INT 1
22562: ST_TO_ADDR
22563: GO 22597
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22565: LD_INT 6
22567: PPUSH
22568: LD_INT 2
22570: PPUSH
22571: LD_INT 0
22573: PPUSH
22574: LD_INT 1
22576: PPUSH
22577: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22581: LD_INT 3
22583: PPUSH
22584: LD_INT 2
22586: PPUSH
22587: LD_INT 0
22589: PPUSH
22590: LD_INT 1
22592: PPUSH
22593: CALL_OW 80
// end ; blockPatrolThread := false ;
22597: LD_ADDR_EXP 38
22601: PUSH
22602: LD_INT 0
22604: ST_TO_ADDR
// end ; end ;
22605: GO 22608
22607: POP
// blockPatrolThread := false ;
22608: LD_ADDR_EXP 38
22612: PUSH
22613: LD_INT 0
22615: ST_TO_ADDR
// end ;
22616: LD_VAR 0 3
22620: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22621: LD_EXP 14
22625: PPUSH
22626: LD_INT 22
22628: PUSH
22629: LD_INT 5
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: LD_INT 101
22641: PUSH
22642: LD_INT 6
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 92
22655: PUSH
22656: LD_INT 113
22658: PUSH
22659: LD_INT 16
22661: PUSH
22662: LD_INT 12
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 91
22673: PUSH
22674: LD_EXP 45
22678: PUSH
22679: LD_INT 6
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: PPUSH
22693: CALL_OW 72
22697: PUSH
22698: LD_EXP 30
22702: NOT
22703: AND
22704: IFFALSE 22809
22706: GO 22708
22708: DISABLE
22709: LD_INT 0
22711: PPUSH
// begin enable ;
22712: ENABLE
// DialogueOn ;
22713: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
22717: LD_EXP 45
22721: PPUSH
22722: LD_STRING DH-Join-
22724: PUSH
22725: LD_INT 1
22727: PPUSH
22728: LD_INT 3
22730: PPUSH
22731: CALL_OW 12
22735: STR
22736: PPUSH
22737: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
22741: LD_ADDR_VAR 0 1
22745: PUSH
22746: LD_EXP 14
22750: PPUSH
22751: LD_INT 22
22753: PUSH
22754: LD_INT 5
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 91
22763: PUSH
22764: LD_EXP 45
22768: PUSH
22769: LD_INT 10
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: LIST
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PPUSH
22781: CALL_OW 72
22785: PUSH
22786: FOR_IN
22787: IFFALSE 22803
// SetSide ( i , 2 ) ;
22789: LD_VAR 0 1
22793: PPUSH
22794: LD_INT 2
22796: PPUSH
22797: CALL_OW 235
22801: GO 22786
22803: POP
22804: POP
// DialogueOff ;
22805: CALL_OW 7
// end ; end_of_file
22809: PPOPN 1
22811: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
22812: LD_EXP 17
22816: PUSH
22817: LD_EXP 5
22821: AND
22822: IFFALSE 23123
22824: GO 22826
22826: DISABLE
22827: LD_INT 0
22829: PPUSH
22830: PPUSH
22831: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
22832: LD_INT 1
22834: NEG
22835: PPUSH
22836: LD_INT 1
22838: NEG
22839: PPUSH
22840: LD_STRING alarm
22842: PPUSH
22843: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
22847: LD_INT 3
22849: PPUSH
22850: LD_INT 2
22852: PPUSH
22853: LD_INT 2
22855: PPUSH
22856: LD_INT 1
22858: PPUSH
22859: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22863: LD_INT 6
22865: PPUSH
22866: LD_INT 2
22868: PPUSH
22869: LD_INT 2
22871: PPUSH
22872: LD_INT 1
22874: PPUSH
22875: CALL_OW 80
// DialogueOn ;
22879: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
22883: LD_EXP 45
22887: PPUSH
22888: LD_STRING DH-Alarm-1
22890: PPUSH
22891: CALL_OW 88
// DialogueOff ;
22895: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 107
22906: PUSH
22907: LD_INT 39
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 143
22916: PUSH
22917: LD_INT 33
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 180
22926: PUSH
22927: LD_INT 115
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 96
22936: PUSH
22937: LD_INT 90
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 59
22946: PUSH
22947: LD_INT 52
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 16
22956: PUSH
22957: LD_INT 15
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 90
22966: PUSH
22967: LD_INT 120
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
22983: LD_ADDR_VAR 0 3
22987: PUSH
22988: LD_INT 22
22990: PUSH
22991: LD_INT 6
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 25
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 69
23016: ST_TO_ADDR
// for i in tmp do
23017: LD_ADDR_VAR 0 1
23021: PUSH
23022: LD_VAR 0 3
23026: PUSH
23027: FOR_IN
23028: IFFALSE 23096
// begin ComExit ( i ) ;
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL 66994 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
23039: LD_VAR 0 1
23043: PPUSH
23044: LD_VAR 0 2
23048: PUSH
23049: LD_VAR 0 1
23053: PUSH
23054: LD_INT 7
23056: MOD
23057: PUSH
23058: LD_INT 1
23060: PLUS
23061: ARRAY
23062: PUSH
23063: LD_INT 1
23065: ARRAY
23066: PPUSH
23067: LD_VAR 0 2
23071: PUSH
23072: LD_VAR 0 1
23076: PUSH
23077: LD_INT 7
23079: MOD
23080: PUSH
23081: LD_INT 1
23083: PLUS
23084: ARRAY
23085: PUSH
23086: LD_INT 2
23088: ARRAY
23089: PPUSH
23090: CALL_OW 174
// end ;
23094: GO 23027
23096: POP
23097: POP
// Explode ;
23098: CALL 23126 0 0
// wait ( 0 0$45 ) ;
23102: LD_INT 1575
23104: PPUSH
23105: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23109: LD_VAR 0 3
23113: PPUSH
23114: LD_EXP 45
23118: PPUSH
23119: CALL_OW 175
// end ;
23123: PPOPN 3
23125: END
// export function Explode ; var i , x , y , j ; begin
23126: LD_INT 0
23128: PPUSH
23129: PPUSH
23130: PPUSH
23131: PPUSH
23132: PPUSH
// if hasExplosionsInFactory then
23133: LD_EXP 7
23137: IFFALSE 23157
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23139: LD_ADDR_EXP 29
23143: PUSH
23144: LD_EXP 29
23148: PPUSH
23149: LD_INT 61
23151: PPUSH
23152: CALL 66596 0 2
23156: ST_TO_ADDR
// if explosivePlantedList then
23157: LD_EXP 29
23161: IFFALSE 23309
// begin for i in explosivePlantedList do
23163: LD_ADDR_VAR 0 2
23167: PUSH
23168: LD_EXP 29
23172: PUSH
23173: FOR_IN
23174: IFFALSE 23277
// begin x := GetX ( i ) ;
23176: LD_ADDR_VAR 0 3
23180: PUSH
23181: LD_VAR 0 2
23185: PPUSH
23186: CALL_OW 250
23190: ST_TO_ADDR
// y := GetY ( i ) ;
23191: LD_ADDR_VAR 0 4
23195: PUSH
23196: LD_VAR 0 2
23200: PPUSH
23201: CALL_OW 251
23205: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23206: LD_ADDR_VAR 0 5
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: LD_INT 3
23216: PUSH
23217: LD_INT 5
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: FOR_IN
23226: IFFALSE 23273
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23228: LD_VAR 0 3
23232: PPUSH
23233: LD_VAR 0 5
23237: PPUSH
23238: LD_INT 2
23240: PPUSH
23241: CALL_OW 272
23245: PPUSH
23246: LD_VAR 0 4
23250: PPUSH
23251: LD_VAR 0 5
23255: PPUSH
23256: LD_INT 2
23258: PPUSH
23259: CALL_OW 273
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: CALL_OW 453
23271: GO 23225
23273: POP
23274: POP
// end ;
23275: GO 23173
23277: POP
23278: POP
// Say ( Heike , DH-End-2 ) ;
23279: LD_EXP 45
23283: PPUSH
23284: LD_STRING DH-End-2
23286: PPUSH
23287: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23291: LD_INT 175
23293: PUSH
23294: LD_EXP 29
23298: PPUSH
23299: CALL 30996 0 1
23303: MUL
23304: PPUSH
23305: CALL_OW 67
// end ; if not isAlarm then
23309: LD_EXP 17
23313: NOT
23314: IFFALSE 23324
// isAlarm := true ;
23316: LD_ADDR_EXP 17
23320: PUSH
23321: LD_INT 1
23323: ST_TO_ADDR
// end ;
23324: LD_VAR 0 1
23328: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23329: LD_INT 22
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 21
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: LD_INT 101
23354: PUSH
23355: LD_INT 3
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 101
23364: PUSH
23365: LD_INT 6
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: LIST
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: PPUSH
23382: CALL_OW 69
23386: IFFALSE 23399
23388: GO 23390
23390: DISABLE
// isAlarm := true ; end_of_file
23391: LD_ADDR_EXP 17
23395: PUSH
23396: LD_INT 1
23398: ST_TO_ADDR
23399: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23400: LD_EXP 14
23404: PPUSH
23405: LD_INT 22
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PPUSH
23415: CALL_OW 72
23419: PUSH
23420: LD_INT 3
23422: GREATER
23423: PUSH
23424: LD_EXP 17
23428: NOT
23429: AND
23430: IFFALSE 27475
23432: GO 23434
23434: DISABLE
23435: LD_INT 0
23437: PPUSH
23438: PPUSH
23439: PPUSH
23440: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23441: LD_EXP 65
23445: PPUSH
23446: LD_INT 155
23448: PPUSH
23449: LD_INT 68
23451: PPUSH
23452: LD_INT 0
23454: PPUSH
23455: CALL_OW 48
// wait ( 0 0$1 ) ;
23459: LD_INT 35
23461: PPUSH
23462: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23466: LD_INT 35
23468: PPUSH
23469: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23473: LD_EXP 65
23477: PPUSH
23478: CALL_OW 314
23482: NOT
23483: IFFALSE 23499
// ComMoveUnit ( ruDisturb , Heike ) ;
23485: LD_EXP 65
23489: PPUSH
23490: LD_EXP 45
23494: PPUSH
23495: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23499: LD_EXP 45
23503: PPUSH
23504: LD_EXP 65
23508: PPUSH
23509: CALL_OW 296
23513: PUSH
23514: LD_INT 6
23516: LESS
23517: PUSH
23518: LD_EXP 65
23522: PPUSH
23523: CALL_OW 302
23527: AND
23528: IFFALSE 23466
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23530: LD_EXP 45
23534: PPUSH
23535: CALL_OW 257
23539: PUSH
23540: LD_INT 33
23542: NONEQUAL
23543: PUSH
23544: LD_EXP 14
23548: PPUSH
23549: LD_INT 22
23551: PUSH
23552: LD_INT 2
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 91
23561: PUSH
23562: LD_EXP 65
23566: PUSH
23567: LD_INT 8
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: PUSH
23578: LD_INT 25
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 25
23590: PUSH
23591: LD_INT 11
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 25
23600: PUSH
23601: LD_INT 32
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 25
23610: PUSH
23611: LD_INT 34
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: PPUSH
23630: CALL_OW 72
23634: OR
23635: IFFALSE 23645
// isAlarm := true ;
23637: LD_ADDR_EXP 17
23641: PUSH
23642: LD_INT 1
23644: ST_TO_ADDR
// if isAlarm then
23645: LD_EXP 17
23649: IFFALSE 23653
// exit ;
23651: GO 27475
// DialogueOn ;
23653: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23657: LD_EXP 65
23661: PPUSH
23662: LD_STRING DMcn-Interrupt-1
23664: PPUSH
23665: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23669: LD_EXP 65
23673: PPUSH
23674: LD_STRING DMcn-Interrupt-2
23676: PPUSH
23677: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
23681: LD_EXP 65
23685: PPUSH
23686: LD_STRING DMcn-Interrupt-3
23688: PPUSH
23689: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
23693: LD_EXP 45
23697: PPUSH
23698: LD_STRING DH-Interrupt-a-4
23700: PPUSH
23701: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
23705: LD_EXP 65
23709: PPUSH
23710: LD_STRING DMcn-Interrupt-a-5
23712: PPUSH
23713: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
23717: LD_EXP 45
23721: PPUSH
23722: LD_STRING DH-Interrupt-a-6
23724: PPUSH
23725: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
23729: LD_EXP 65
23733: PPUSH
23734: LD_STRING DMcn-Interrupt-a-7
23736: PPUSH
23737: CALL_OW 88
// DialogueOff ;
23741: CALL_OW 7
// hasMuchin := true ;
23745: LD_ADDR_EXP 30
23749: PUSH
23750: LD_INT 1
23752: ST_TO_ADDR
// Query ( MuchinInfo ) ;
23753: LD_STRING MuchinInfo
23755: PPUSH
23756: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
23760: LD_STRING M2a
23762: PPUSH
23763: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
23767: LD_INT 105
23769: PPUSH
23770: LD_INT 55
23772: PPUSH
23773: CALL_OW 428
23777: PPUSH
23778: LD_INT 2
23780: PPUSH
23781: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
23785: LD_INT 115
23787: PPUSH
23788: LD_INT 65
23790: PPUSH
23791: CALL_OW 428
23795: PPUSH
23796: LD_INT 2
23798: PPUSH
23799: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
23803: LD_INT 109
23805: PPUSH
23806: LD_INT 59
23808: PPUSH
23809: LD_INT 2
23811: PPUSH
23812: LD_INT 10
23814: NEG
23815: PPUSH
23816: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
23820: LD_INT 109
23822: PPUSH
23823: LD_INT 59
23825: PPUSH
23826: CALL_OW 84
// wait ( 0 0$2 ) ;
23830: LD_INT 70
23832: PPUSH
23833: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
23837: LD_INT 109
23839: PPUSH
23840: LD_INT 59
23842: PPUSH
23843: LD_INT 2
23845: PPUSH
23846: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
23850: LD_INT 35
23852: PPUSH
23853: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23857: LD_EXP 65
23861: PPUSH
23862: LD_EXP 45
23866: PPUSH
23867: CALL_OW 296
23871: PUSH
23872: LD_INT 6
23874: GREATER
23875: IFFALSE 23891
// ComMoveUnit ( ruDisturb , Heike ) ;
23877: LD_EXP 65
23881: PPUSH
23882: LD_EXP 45
23886: PPUSH
23887: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23891: LD_EXP 45
23895: PPUSH
23896: CALL_OW 257
23900: PUSH
23901: LD_INT 33
23903: NONEQUAL
23904: PUSH
23905: LD_EXP 14
23909: PPUSH
23910: LD_INT 22
23912: PUSH
23913: LD_INT 2
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 91
23922: PUSH
23923: LD_EXP 65
23927: PUSH
23928: LD_INT 8
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 2
23938: PUSH
23939: LD_INT 25
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 25
23951: PUSH
23952: LD_INT 11
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 25
23961: PUSH
23962: LD_INT 32
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 25
23971: PUSH
23972: LD_INT 34
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: PPUSH
23991: CALL_OW 72
23995: OR
23996: IFFALSE 24008
// begin isAlarm := true ;
23998: LD_ADDR_EXP 17
24002: PUSH
24003: LD_INT 1
24005: ST_TO_ADDR
// exit ;
24006: GO 27475
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
24008: LD_INT 105
24010: PPUSH
24011: LD_INT 55
24013: PPUSH
24014: CALL_OW 428
24018: NOT
24019: PUSH
24020: LD_INT 115
24022: PPUSH
24023: LD_INT 65
24025: PPUSH
24026: CALL_OW 428
24030: NOT
24031: OR
24032: IFFALSE 24044
// begin isAlarm := true ;
24034: LD_ADDR_EXP 17
24038: PUSH
24039: LD_INT 1
24041: ST_TO_ADDR
// exit ;
24042: GO 27475
// end ; until not BuildingsInProgress ( 2 ) ;
24044: LD_INT 2
24046: PPUSH
24047: CALL_OW 345
24051: NOT
24052: IFFALSE 23850
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
24054: LD_INT 105
24056: PPUSH
24057: LD_INT 55
24059: PPUSH
24060: CALL_OW 428
24064: PPUSH
24065: LD_INT 3
24067: PPUSH
24068: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
24072: LD_INT 115
24074: PPUSH
24075: LD_INT 65
24077: PPUSH
24078: CALL_OW 428
24082: PPUSH
24083: LD_INT 3
24085: PPUSH
24086: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
24090: LD_STRING M2a-out
24092: PPUSH
24093: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24097: LD_EXP 65
24101: PPUSH
24102: LD_INT 2
24104: PPUSH
24105: CALL_OW 120
// wait ( 0 0$3 ) ;
24109: LD_INT 105
24111: PPUSH
24112: CALL_OW 67
// hasMuchin := false ;
24116: LD_ADDR_EXP 30
24120: PUSH
24121: LD_INT 0
24123: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24124: LD_INT 4200
24126: PPUSH
24127: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24131: LD_INT 35
24133: PPUSH
24134: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24138: LD_EXP 65
24142: PPUSH
24143: CALL_OW 314
24147: NOT
24148: IFFALSE 24164
// ComMoveUnit ( ruDisturb , Heike ) ;
24150: LD_EXP 65
24154: PPUSH
24155: LD_EXP 45
24159: PPUSH
24160: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24164: LD_EXP 45
24168: PPUSH
24169: LD_EXP 65
24173: PPUSH
24174: CALL_OW 296
24178: PUSH
24179: LD_INT 6
24181: LESS
24182: PUSH
24183: LD_EXP 65
24187: PPUSH
24188: CALL_OW 302
24192: AND
24193: IFFALSE 24131
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24195: LD_EXP 45
24199: PPUSH
24200: CALL_OW 257
24204: PUSH
24205: LD_INT 33
24207: NONEQUAL
24208: PUSH
24209: LD_EXP 14
24213: PPUSH
24214: LD_INT 22
24216: PUSH
24217: LD_INT 2
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 91
24226: PUSH
24227: LD_EXP 65
24231: PUSH
24232: LD_INT 8
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 2
24242: PUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 25
24255: PUSH
24256: LD_INT 11
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 25
24265: PUSH
24266: LD_INT 32
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 25
24275: PUSH
24276: LD_INT 34
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: PPUSH
24295: CALL_OW 72
24299: OR
24300: IFFALSE 24310
// isAlarm := true ;
24302: LD_ADDR_EXP 17
24306: PUSH
24307: LD_INT 1
24309: ST_TO_ADDR
// if isAlarm then
24310: LD_EXP 17
24314: IFFALSE 24318
// exit ;
24316: GO 27475
// DialogueOn ;
24318: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24322: LD_EXP 65
24326: PPUSH
24327: LD_STRING DMcn-Interrupt-1
24329: PPUSH
24330: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24334: LD_EXP 65
24338: PPUSH
24339: LD_STRING DMcn-Interrupt-2
24341: PPUSH
24342: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24346: LD_INT 176
24348: PPUSH
24349: LD_INT 54
24351: PPUSH
24352: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24356: LD_INT 176
24358: PPUSH
24359: LD_INT 54
24361: PPUSH
24362: LD_INT 2
24364: PPUSH
24365: LD_INT 6
24367: NEG
24368: PPUSH
24369: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24373: LD_INT 10
24375: PPUSH
24376: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24380: LD_EXP 65
24384: PPUSH
24385: LD_STRING DMcn-Interrupt-b-3
24387: PPUSH
24388: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24392: LD_EXP 45
24396: PPUSH
24397: LD_STRING DH-Interrupt-b-4
24399: PPUSH
24400: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24404: LD_EXP 65
24408: PPUSH
24409: LD_STRING DMcn-Interrupt-b-5
24411: PPUSH
24412: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24416: LD_EXP 45
24420: PPUSH
24421: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24425: LD_INT 176
24427: PPUSH
24428: LD_INT 54
24430: PPUSH
24431: LD_INT 2
24433: PPUSH
24434: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24438: LD_EXP 65
24442: PPUSH
24443: LD_STRING DMcn-Interrupt-b-6
24445: PPUSH
24446: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24450: LD_EXP 45
24454: PPUSH
24455: LD_STRING DH-Interrupt-b-7
24457: PPUSH
24458: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24462: LD_EXP 65
24466: PPUSH
24467: LD_STRING DMcn-Interrupt-b-8
24469: PPUSH
24470: CALL_OW 88
// DialogueOff ;
24474: CALL_OW 7
// Query ( MuchinInfo ) ;
24478: LD_STRING MuchinInfo
24480: PPUSH
24481: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24485: LD_STRING M2b
24487: PPUSH
24488: CALL_OW 337
// hasMuchin := true ;
24492: LD_ADDR_EXP 30
24496: PUSH
24497: LD_INT 1
24499: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24500: LD_INT 35
24502: PPUSH
24503: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24507: LD_EXP 65
24511: PPUSH
24512: LD_EXP 45
24516: PPUSH
24517: CALL_OW 296
24521: PUSH
24522: LD_INT 6
24524: GREATER
24525: IFFALSE 24541
// ComMoveUnit ( ruDisturb , Heike ) ;
24527: LD_EXP 65
24531: PPUSH
24532: LD_EXP 45
24536: PPUSH
24537: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24541: LD_EXP 45
24545: PPUSH
24546: CALL_OW 257
24550: PUSH
24551: LD_INT 33
24553: NONEQUAL
24554: PUSH
24555: LD_EXP 14
24559: PPUSH
24560: LD_INT 22
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 91
24572: PUSH
24573: LD_EXP 65
24577: PUSH
24578: LD_INT 8
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: LD_INT 25
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 25
24601: PUSH
24602: LD_INT 11
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 25
24611: PUSH
24612: LD_INT 32
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 25
24621: PUSH
24622: LD_INT 34
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: PPUSH
24641: CALL_OW 72
24645: OR
24646: IFFALSE 24658
// begin isAlarm := true ;
24648: LD_ADDR_EXP 17
24652: PUSH
24653: LD_INT 1
24655: ST_TO_ADDR
// exit ;
24656: GO 27475
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
24658: LD_EXP 45
24662: PPUSH
24663: LD_INT 61
24665: PPUSH
24666: CALL_OW 296
24670: PUSH
24671: LD_INT 4
24673: LESS
24674: IFFALSE 24500
// InGameOn ;
24676: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
24680: LD_INT 173
24682: PPUSH
24683: LD_INT 54
24685: PPUSH
24686: LD_INT 2
24688: PPUSH
24689: LD_INT 8
24691: NEG
24692: PPUSH
24693: CALL_OW 330
// SetSide ( Heike , 3 ) ;
24697: LD_EXP 45
24701: PPUSH
24702: LD_INT 3
24704: PPUSH
24705: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
24709: LD_EXP 45
24713: PPUSH
24714: LD_INT 61
24716: PPUSH
24717: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
24721: LD_EXP 65
24725: PPUSH
24726: LD_INT 61
24728: PPUSH
24729: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
24733: LD_EXP 52
24737: PUSH
24738: LD_EXP 14
24742: IN
24743: PUSH
24744: LD_EXP 52
24748: PPUSH
24749: LD_INT 61
24751: PPUSH
24752: CALL_OW 296
24756: PUSH
24757: LD_INT 12
24759: LESS
24760: AND
24761: IFFALSE 24805
// begin SetSide ( Markov , 3 ) ;
24763: LD_EXP 52
24767: PPUSH
24768: LD_INT 3
24770: PPUSH
24771: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
24775: LD_EXP 52
24779: PPUSH
24780: LD_INT 61
24782: PPUSH
24783: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
24787: LD_INT 35
24789: PPUSH
24790: CALL_OW 67
// until IsInUnit ( Markov ) ;
24794: LD_EXP 52
24798: PPUSH
24799: CALL_OW 310
24803: IFFALSE 24787
// end ; repeat wait ( 0 0$1 ) ;
24805: LD_INT 35
24807: PPUSH
24808: CALL_OW 67
// until IsInUnit ( Heike ) ;
24812: LD_EXP 45
24816: PPUSH
24817: CALL_OW 310
24821: IFFALSE 24805
// SetClass ( Heike , class_mechanic ) ;
24823: LD_EXP 45
24827: PPUSH
24828: LD_INT 3
24830: PPUSH
24831: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
24835: LD_INT 61
24837: PPUSH
24838: LD_INT 21
24840: PPUSH
24841: LD_INT 3
24843: PPUSH
24844: LD_INT 3
24846: PPUSH
24847: LD_INT 43
24849: PPUSH
24850: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
24854: LD_EXP 31
24858: PUSH
24859: LD_EXP 52
24863: PUSH
24864: LD_EXP 14
24868: IN
24869: PUSH
24870: LD_EXP 52
24874: PPUSH
24875: CALL_OW 310
24879: PUSH
24880: LD_INT 61
24882: EQUAL
24883: OR
24884: AND
24885: IFFALSE 25375
// begin wait ( 0 0$5 ) ;
24887: LD_INT 175
24889: PPUSH
24890: CALL_OW 67
// SetSide ( Heike , 2 ) ;
24894: LD_EXP 45
24898: PPUSH
24899: LD_INT 2
24901: PPUSH
24902: CALL_OW 235
// SetSide ( Markov , 2 ) ;
24906: LD_EXP 52
24910: PPUSH
24911: LD_INT 2
24913: PPUSH
24914: CALL_OW 235
// if not Markov in heikeSquad then
24918: LD_EXP 52
24922: PUSH
24923: LD_EXP 14
24927: IN
24928: NOT
24929: IFFALSE 24951
// heikeSquad := Join ( heikeSquad , Markov ) ;
24931: LD_ADDR_EXP 14
24935: PUSH
24936: LD_EXP 14
24940: PPUSH
24941: LD_EXP 52
24945: PPUSH
24946: CALL 66596 0 2
24950: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
24951: LD_EXP 52
24955: PPUSH
24956: LD_STRING DMar-Factory-1
24958: PPUSH
24959: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
24963: LD_INT 61
24965: PPUSH
24966: LD_INT 99
24968: PPUSH
24969: CALL_OW 329
// game_speed := 4 ;
24973: LD_ADDR_OWVAR 65
24977: PUSH
24978: LD_INT 4
24980: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
24981: LD_EXP 65
24985: PPUSH
24986: CALL_OW 122
// ComExitBuilding ( Markov ) ;
24990: LD_EXP 52
24994: PPUSH
24995: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
24999: LD_EXP 65
25003: PPUSH
25004: LD_INT 171
25006: PPUSH
25007: LD_INT 51
25009: PPUSH
25010: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
25014: LD_EXP 52
25018: PPUSH
25019: LD_INT 167
25021: PPUSH
25022: LD_INT 50
25024: PPUSH
25025: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
25029: LD_EXP 52
25033: PPUSH
25034: LD_EXP 65
25038: PPUSH
25039: CALL_OW 179
// wait ( 0 0$5 ) ;
25043: LD_INT 175
25045: PPUSH
25046: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
25050: LD_EXP 52
25054: PPUSH
25055: LD_STRING DMar-Factory-2
25057: PPUSH
25058: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
25062: LD_ADDR_VAR 0 2
25066: PUSH
25067: LD_INT 22
25069: PUSH
25070: LD_INT 3
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 33
25079: PUSH
25080: LD_INT 3
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PPUSH
25091: CALL_OW 69
25095: PUSH
25096: LD_INT 1
25098: ARRAY
25099: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
25100: LD_EXP 65
25104: PPUSH
25105: LD_VAR 0 2
25109: PPUSH
25110: CALL_OW 119
// game_speed := 4 ;
25114: LD_ADDR_OWVAR 65
25118: PUSH
25119: LD_INT 4
25121: ST_TO_ADDR
// async ;
25122: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
25123: LD_EXP 65
25127: PPUSH
25128: LD_STRING DMcn-Factory-3
25130: PPUSH
25131: CALL_OW 88
// wait ( 0 0$0.6 ) ;
25135: LD_INT 21
25137: PPUSH
25138: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
25142: LD_VAR 0 2
25146: PPUSH
25147: LD_EXP 65
25151: PPUSH
25152: CALL_OW 115
// sync ;
25156: SYNC
// wait ( 0 0$1 ) ;
25157: LD_INT 35
25159: PPUSH
25160: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25164: LD_EXP 65
25168: PPUSH
25169: CALL_OW 66
// SetSide ( veh , 7 ) ;
25173: LD_VAR 0 2
25177: PPUSH
25178: LD_INT 7
25180: PPUSH
25181: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25185: LD_VAR 0 2
25189: PPUSH
25190: LD_INT 84
25192: PPUSH
25193: LD_INT 38
25195: PPUSH
25196: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25200: LD_EXP 66
25204: PUSH
25205: LD_INT 1
25207: ARRAY
25208: PPUSH
25209: CALL_OW 258
25213: PUSH
25214: LD_INT 1
25216: EQUAL
25217: IFFALSE 25237
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25219: LD_EXP 66
25223: PUSH
25224: LD_INT 1
25226: ARRAY
25227: PPUSH
25228: LD_STRING DRum-Factory-4
25230: PPUSH
25231: CALL_OW 88
25235: GO 25253
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25237: LD_EXP 66
25241: PUSH
25242: LD_INT 1
25244: ARRAY
25245: PPUSH
25246: LD_STRING DRuf-Factory-4
25248: PPUSH
25249: CALL_OW 88
// wait ( 0 0$1 ) ;
25253: LD_INT 35
25255: PPUSH
25256: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25260: LD_EXP 66
25264: PPUSH
25265: LD_INT 26
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PPUSH
25275: CALL_OW 72
25279: PUSH
25280: LD_INT 1
25282: ARRAY
25283: PPUSH
25284: LD_STRING DRum-Factory-6
25286: PPUSH
25287: CALL_OW 88
// wait ( 0 0$2 ) ;
25291: LD_INT 70
25293: PPUSH
25294: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25298: LD_EXP 45
25302: PPUSH
25303: LD_INT 33
25305: PPUSH
25306: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25310: LD_EXP 45
25314: PPUSH
25315: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25319: LD_EXP 45
25323: PPUSH
25324: LD_INT 168
25326: PPUSH
25327: LD_INT 54
25329: PPUSH
25330: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25334: LD_INT 173
25336: PPUSH
25337: LD_INT 54
25339: PPUSH
25340: LD_INT 2
25342: PPUSH
25343: CALL_OW 331
// InGameOff ;
25347: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25351: LD_STRING M2b-out
25353: PPUSH
25354: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25358: LD_STRING ACH_TOY
25360: PPUSH
25361: CALL_OW 543
// hasMuchin := false ;
25365: LD_ADDR_EXP 30
25369: PUSH
25370: LD_INT 0
25372: ST_TO_ADDR
// exit ;
25373: GO 27475
// end ; wait ( 0 0$5 ) ;
25375: LD_INT 175
25377: PPUSH
25378: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25382: LD_INT 61
25384: PPUSH
25385: LD_INT 99
25387: PPUSH
25388: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25392: LD_EXP 52
25396: PUSH
25397: LD_EXP 14
25401: IN
25402: PUSH
25403: LD_EXP 52
25407: PPUSH
25408: CALL_OW 255
25412: PUSH
25413: LD_INT 3
25415: EQUAL
25416: AND
25417: IFFALSE 25440
// begin SetSide ( Markov , 2 ) ;
25419: LD_EXP 52
25423: PPUSH
25424: LD_INT 2
25426: PPUSH
25427: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25431: LD_EXP 52
25435: PPUSH
25436: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25440: LD_EXP 45
25444: PPUSH
25445: LD_INT 2
25447: PPUSH
25448: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25452: LD_EXP 45
25456: PPUSH
25457: LD_INT 33
25459: PPUSH
25460: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25464: LD_EXP 65
25468: PPUSH
25469: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25473: LD_EXP 45
25477: PPUSH
25478: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25482: LD_EXP 45
25486: PPUSH
25487: LD_INT 168
25489: PPUSH
25490: LD_INT 54
25492: PPUSH
25493: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25497: LD_INT 173
25499: PPUSH
25500: LD_INT 54
25502: PPUSH
25503: LD_INT 2
25505: PPUSH
25506: CALL_OW 331
// InGameOff ;
25510: CALL_OW 9
// wait ( 3 ) ;
25514: LD_INT 3
25516: PPUSH
25517: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25521: LD_EXP 65
25525: PPUSH
25526: LD_INT 2
25528: PPUSH
25529: CALL_OW 120
// wait ( 0 0$3 ) ;
25533: LD_INT 105
25535: PPUSH
25536: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
25540: LD_STRING M2b-out
25542: PPUSH
25543: CALL_OW 337
// hasMuchin := false ;
25547: LD_ADDR_EXP 30
25551: PUSH
25552: LD_INT 0
25554: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25555: LD_INT 4200
25557: PPUSH
25558: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25562: LD_INT 35
25564: PPUSH
25565: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25569: LD_EXP 65
25573: PPUSH
25574: CALL_OW 314
25578: NOT
25579: IFFALSE 25595
// ComMoveUnit ( ruDisturb , Heike ) ;
25581: LD_EXP 65
25585: PPUSH
25586: LD_EXP 45
25590: PPUSH
25591: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
25595: LD_EXP 45
25599: PPUSH
25600: LD_EXP 65
25604: PPUSH
25605: CALL_OW 296
25609: PUSH
25610: LD_INT 2
25612: LESS
25613: PUSH
25614: LD_EXP 65
25618: PPUSH
25619: CALL_OW 302
25623: AND
25624: IFFALSE 25562
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25626: LD_EXP 45
25630: PPUSH
25631: CALL_OW 257
25635: PUSH
25636: LD_INT 33
25638: NONEQUAL
25639: PUSH
25640: LD_EXP 14
25644: PPUSH
25645: LD_INT 22
25647: PUSH
25648: LD_INT 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 91
25657: PUSH
25658: LD_EXP 65
25662: PUSH
25663: LD_INT 8
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 25
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 25
25686: PUSH
25687: LD_INT 11
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 25
25696: PUSH
25697: LD_INT 32
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 25
25706: PUSH
25707: LD_INT 34
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: LIST
25725: PPUSH
25726: CALL_OW 72
25730: OR
25731: IFFALSE 25741
// isAlarm := true ;
25733: LD_ADDR_EXP 17
25737: PUSH
25738: LD_INT 1
25740: ST_TO_ADDR
// if isAlarm then
25741: LD_EXP 17
25745: IFFALSE 25749
// exit ;
25747: GO 27475
// ComTurnUnit ( Heike , ruDisturb ) ;
25749: LD_EXP 45
25753: PPUSH
25754: LD_EXP 65
25758: PPUSH
25759: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
25763: LD_EXP 65
25767: PPUSH
25768: LD_EXP 45
25772: PPUSH
25773: CALL_OW 119
// wait ( 3 ) ;
25777: LD_INT 3
25779: PPUSH
25780: CALL_OW 67
// for i := 1 to 3 do
25784: LD_ADDR_VAR 0 1
25788: PUSH
25789: DOUBLE
25790: LD_INT 1
25792: DEC
25793: ST_TO_ADDR
25794: LD_INT 3
25796: PUSH
25797: FOR_TO
25798: IFFALSE 25815
// CreateCratesArea ( 5 , cratesArea , false ) ;
25800: LD_INT 5
25802: PPUSH
25803: LD_INT 58
25805: PPUSH
25806: LD_INT 0
25808: PPUSH
25809: CALL_OW 55
25813: GO 25797
25815: POP
25816: POP
// uc_side := 3 ;
25817: LD_ADDR_OWVAR 20
25821: PUSH
25822: LD_INT 3
25824: ST_TO_ADDR
// uc_nation := nation_russian ;
25825: LD_ADDR_OWVAR 21
25829: PUSH
25830: LD_INT 3
25832: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
25833: LD_INT 21
25835: PPUSH
25836: LD_INT 3
25838: PPUSH
25839: LD_INT 1
25841: PPUSH
25842: LD_INT 51
25844: PPUSH
25845: LD_INT 100
25847: PPUSH
25848: CALL 33734 0 5
// veh := CreateVehicle ;
25852: LD_ADDR_VAR 0 2
25856: PUSH
25857: CALL_OW 45
25861: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
25862: LD_VAR 0 2
25866: PPUSH
25867: LD_INT 104
25869: PPUSH
25870: LD_INT 41
25872: PPUSH
25873: LD_INT 3
25875: PPUSH
25876: LD_INT 0
25878: PPUSH
25879: CALL 68736 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
25883: LD_VAR 0 2
25887: PPUSH
25888: LD_INT 1
25890: PPUSH
25891: LD_INT 100
25893: PPUSH
25894: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
25898: CALL_OW 44
25902: PPUSH
25903: LD_VAR 0 2
25907: PPUSH
25908: CALL_OW 52
// DialogueOn ;
25912: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25916: LD_EXP 65
25920: PPUSH
25921: LD_STRING DMcn-Interrupt-1
25923: PPUSH
25924: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25928: LD_EXP 65
25932: PPUSH
25933: LD_STRING DMcn-Interrupt-2
25935: PPUSH
25936: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
25940: LD_EXP 65
25944: PPUSH
25945: LD_STRING DMcn-Interrupt-c-3
25947: PPUSH
25948: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
25952: LD_INT 101
25954: PPUSH
25955: LD_INT 38
25957: PPUSH
25958: LD_INT 2
25960: PPUSH
25961: LD_INT 10
25963: NEG
25964: PPUSH
25965: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
25969: LD_INT 101
25971: PPUSH
25972: LD_INT 38
25974: PPUSH
25975: CALL_OW 84
// wait ( 0 0$2 ) ;
25979: LD_INT 70
25981: PPUSH
25982: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
25986: LD_INT 101
25988: PPUSH
25989: LD_INT 38
25991: PPUSH
25992: LD_INT 2
25994: PPUSH
25995: CALL_OW 331
// RemoveUnit ( veh ) ;
25999: LD_VAR 0 2
26003: PPUSH
26004: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
26008: LD_EXP 65
26012: PPUSH
26013: LD_STRING DMcn-Interrupt-c-4
26015: PPUSH
26016: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
26020: LD_EXP 45
26024: PPUSH
26025: LD_STRING DH-Interrupt-c-5
26027: PPUSH
26028: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
26032: LD_EXP 65
26036: PPUSH
26037: LD_STRING DMcn-Interrupt-c-6
26039: PPUSH
26040: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
26044: LD_EXP 45
26048: PPUSH
26049: LD_STRING DH-Interrupt-c-7
26051: PPUSH
26052: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
26056: LD_EXP 65
26060: PPUSH
26061: LD_STRING DMcn-Interrupt-c-8
26063: PPUSH
26064: CALL_OW 88
// DialogueOff ;
26068: CALL_OW 7
// hasMuchin := true ;
26072: LD_ADDR_EXP 30
26076: PUSH
26077: LD_INT 1
26079: ST_TO_ADDR
// Query ( MuchinInfo ) ;
26080: LD_STRING MuchinInfo
26082: PPUSH
26083: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
26087: LD_STRING M2c
26089: PPUSH
26090: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
26094: LD_INT 35
26096: PPUSH
26097: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
26101: LD_EXP 65
26105: PPUSH
26106: LD_EXP 45
26110: PPUSH
26111: CALL_OW 296
26115: PUSH
26116: LD_INT 6
26118: GREATER
26119: IFFALSE 26135
// ComMoveUnit ( ruDisturb , Heike ) ;
26121: LD_EXP 65
26125: PPUSH
26126: LD_EXP 45
26130: PPUSH
26131: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26135: LD_EXP 45
26139: PPUSH
26140: CALL_OW 257
26144: PUSH
26145: LD_INT 33
26147: NONEQUAL
26148: PUSH
26149: LD_EXP 14
26153: PPUSH
26154: LD_INT 22
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 91
26166: PUSH
26167: LD_EXP 65
26171: PUSH
26172: LD_INT 8
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 2
26182: PUSH
26183: LD_INT 25
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 25
26195: PUSH
26196: LD_INT 11
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 25
26205: PUSH
26206: LD_INT 32
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 25
26215: PUSH
26216: LD_INT 34
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: PPUSH
26235: CALL_OW 72
26239: OR
26240: IFFALSE 26252
// begin isAlarm := true ;
26242: LD_ADDR_EXP 17
26246: PUSH
26247: LD_INT 1
26249: ST_TO_ADDR
// exit ;
26250: GO 27475
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26252: LD_EXP 14
26256: PUSH
26257: LD_EXP 45
26261: UNION
26262: PPUSH
26263: LD_INT 92
26265: PUSH
26266: LD_INT 100
26268: PUSH
26269: LD_INT 37
26271: PUSH
26272: LD_INT 6
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: PPUSH
26281: CALL_OW 72
26285: IFFALSE 26094
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26287: LD_INT 100
26289: PPUSH
26290: LD_INT 37
26292: PPUSH
26293: LD_INT 3
26295: PPUSH
26296: LD_INT 10
26298: NEG
26299: PPUSH
26300: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26304: LD_ADDR_VAR 0 3
26308: PUSH
26309: LD_EXP 14
26313: PUSH
26314: LD_EXP 45
26318: UNION
26319: PPUSH
26320: LD_INT 25
26322: PUSH
26323: LD_INT 33
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 91
26332: PUSH
26333: LD_INT 6
26335: PUSH
26336: LD_INT 12
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PPUSH
26348: CALL_OW 72
26352: ST_TO_ADDR
// for i in tmp do
26353: LD_ADDR_VAR 0 1
26357: PUSH
26358: LD_VAR 0 3
26362: PUSH
26363: FOR_IN
26364: IFFALSE 26395
// begin SetSide ( i , 3 ) ;
26366: LD_VAR 0 1
26370: PPUSH
26371: LD_INT 3
26373: PPUSH
26374: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26378: LD_VAR 0 1
26382: PPUSH
26383: LD_INT 101
26385: PPUSH
26386: LD_INT 38
26388: PPUSH
26389: CALL_OW 111
// end ;
26393: GO 26363
26395: POP
26396: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26397: LD_EXP 65
26401: PPUSH
26402: LD_INT 104
26404: PPUSH
26405: LD_INT 37
26407: PPUSH
26408: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26412: LD_EXP 65
26416: PPUSH
26417: LD_EXP 45
26421: PPUSH
26422: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26426: LD_INT 35
26428: PPUSH
26429: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26433: LD_ADDR_VAR 0 4
26437: PUSH
26438: LD_INT 58
26440: PPUSH
26441: CALL_OW 435
26445: ST_TO_ADDR
// for i in tmp do
26446: LD_ADDR_VAR 0 1
26450: PUSH
26451: LD_VAR 0 3
26455: PUSH
26456: FOR_IN
26457: IFFALSE 26500
// if not HasTask ( i ) then
26459: LD_VAR 0 1
26463: PPUSH
26464: CALL_OW 314
26468: NOT
26469: IFFALSE 26498
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26471: LD_VAR 0 1
26475: PPUSH
26476: LD_VAR 0 4
26480: PUSH
26481: LD_INT 1
26483: ARRAY
26484: PPUSH
26485: LD_VAR 0 4
26489: PUSH
26490: LD_INT 2
26492: ARRAY
26493: PPUSH
26494: CALL_OW 117
26498: GO 26456
26500: POP
26501: POP
// until not cr ;
26502: LD_VAR 0 4
26506: NOT
26507: IFFALSE 26426
// wait ( 0 0$2 ) ;
26509: LD_INT 70
26511: PPUSH
26512: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
26516: LD_INT 100
26518: PPUSH
26519: LD_INT 37
26521: PPUSH
26522: LD_INT 3
26524: PPUSH
26525: CALL_OW 331
// for i in tmp do
26529: LD_ADDR_VAR 0 1
26533: PUSH
26534: LD_VAR 0 3
26538: PUSH
26539: FOR_IN
26540: IFFALSE 26556
// SetSide ( i , 2 ) ;
26542: LD_VAR 0 1
26546: PPUSH
26547: LD_INT 2
26549: PPUSH
26550: CALL_OW 235
26554: GO 26539
26556: POP
26557: POP
// if Kaia in tmp then
26558: LD_EXP 50
26562: PUSH
26563: LD_VAR 0 3
26567: IN
26568: IFFALSE 26869
// begin InGameOn ;
26570: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
26574: LD_EXP 50
26578: PPUSH
26579: LD_EXP 65
26583: PPUSH
26584: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
26588: LD_EXP 65
26592: PPUSH
26593: LD_EXP 50
26597: PPUSH
26598: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
26602: LD_EXP 50
26606: PPUSH
26607: LD_EXP 65
26611: PPUSH
26612: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
26616: LD_EXP 50
26620: PPUSH
26621: LD_STRING DK-Assassin-1
26623: PPUSH
26624: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
26628: LD_EXP 65
26632: PPUSH
26633: LD_STRING DMcn-Assassin-2
26635: PPUSH
26636: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
26640: LD_EXP 50
26644: PPUSH
26645: LD_STRING DK-Assassin-3
26647: PPUSH
26648: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
26652: LD_EXP 65
26656: PPUSH
26657: LD_STRING DMcn-Assassin-4
26659: PPUSH
26660: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
26664: LD_EXP 50
26668: PPUSH
26669: LD_STRING DK-Assassin-5
26671: PPUSH
26672: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
26676: LD_EXP 65
26680: PPUSH
26681: LD_STRING DMcn-Assassin-6
26683: PPUSH
26684: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
26688: LD_EXP 50
26692: PPUSH
26693: LD_INT 3
26695: PPUSH
26696: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
26700: LD_EXP 50
26704: PUSH
26705: LD_EXP 65
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: LD_INT 6
26716: PPUSH
26717: CALL_OW 120
// wait ( 0 0$5 ) ;
26721: LD_INT 175
26723: PPUSH
26724: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
26728: LD_EXP 50
26732: PPUSH
26733: LD_STRING DK-Assassin-7
26735: PPUSH
26736: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
26740: LD_EXP 65
26744: PPUSH
26745: LD_STRING DMcn-Assassin-8
26747: PPUSH
26748: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26752: LD_INT 10
26754: PPUSH
26755: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
26759: LD_EXP 50
26763: PPUSH
26764: LD_STRING DK-Assassin-9
26766: PPUSH
26767: CALL_OW 88
// wait ( 0 0$2 ) ;
26771: LD_INT 70
26773: PPUSH
26774: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
26778: LD_EXP 50
26782: PPUSH
26783: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
26787: LD_EXP 65
26791: PPUSH
26792: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
26796: LD_EXP 50
26800: PPUSH
26801: LD_INT 2
26803: PPUSH
26804: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
26808: LD_EXP 50
26812: PPUSH
26813: LD_EXP 45
26817: PPUSH
26818: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
26822: LD_EXP 50
26826: PPUSH
26827: LD_STRING DK-Assasin-10
26829: PPUSH
26830: CALL_OW 88
// InGameOff ;
26834: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
26838: LD_STRING ACH_POKER
26840: PPUSH
26841: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
26845: LD_STRING M2c-out
26847: PPUSH
26848: CALL_OW 337
// wait ( 0 0$3 ) ;
26852: LD_INT 105
26854: PPUSH
26855: CALL_OW 67
// hasMuchin := false ;
26859: LD_ADDR_EXP 30
26863: PUSH
26864: LD_INT 0
26866: ST_TO_ADDR
// exit ;
26867: GO 27475
// end ; ChangeMissionObjectives ( M2c-out ) ;
26869: LD_STRING M2c-out
26871: PPUSH
26872: CALL_OW 337
// InGameOn ;
26876: CALL_OW 8
// meetWithMuchin := true ;
26880: LD_ADDR_EXP 44
26884: PUSH
26885: LD_INT 1
26887: ST_TO_ADDR
// Say ( ruDisturb , DMcn-Fail-1 ) ;
26888: LD_EXP 65
26892: PPUSH
26893: LD_STRING DMcn-Fail-1
26895: PPUSH
26896: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
26900: LD_VAR 0 3
26904: PPUSH
26905: LD_INT 114
26907: PPUSH
26908: LD_INT 17
26910: PPUSH
26911: CALL_OW 111
// wait ( 0 0$1 ) ;
26915: LD_INT 35
26917: PPUSH
26918: CALL_OW 67
// async ;
26922: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
26923: LD_EXP 65
26927: PPUSH
26928: LD_EXP 45
26932: PPUSH
26933: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
26937: LD_EXP 65
26941: PPUSH
26942: LD_STRING DMcn-Fail-2
26944: PPUSH
26945: CALL_OW 88
// ComStop ( Heike ) ;
26949: LD_EXP 45
26953: PPUSH
26954: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
26958: LD_EXP 45
26962: PPUSH
26963: LD_EXP 65
26967: PPUSH
26968: CALL_OW 179
// sync ;
26972: SYNC
// Say ( Heike , DH-Fail-3 ) ;
26973: LD_EXP 45
26977: PPUSH
26978: LD_STRING DH-Fail-3
26980: PPUSH
26981: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
26985: LD_EXP 65
26989: PPUSH
26990: LD_STRING DMcn-Fail-4
26992: PPUSH
26993: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
26997: LD_EXP 45
27001: PUSH
27002: LD_EXP 65
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PPUSH
27011: LD_INT 41
27013: PPUSH
27014: LD_INT 19
27016: PPUSH
27017: CALL_OW 111
// wait ( 0 0$2 ) ;
27021: LD_INT 70
27023: PPUSH
27024: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
27028: LD_EXP 65
27032: PPUSH
27033: LD_INT 40
27035: PPUSH
27036: LD_INT 19
27038: PPUSH
27039: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
27043: LD_EXP 45
27047: PPUSH
27048: LD_INT 43
27050: PPUSH
27051: LD_INT 21
27053: PPUSH
27054: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27058: LD_EXP 65
27062: PPUSH
27063: LD_EXP 45
27067: PPUSH
27068: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
27072: LD_EXP 45
27076: PPUSH
27077: LD_EXP 65
27081: PPUSH
27082: CALL_OW 179
// wait ( 0 0$2 ) ;
27086: LD_INT 70
27088: PPUSH
27089: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
27093: LD_EXP 65
27097: PPUSH
27098: LD_STRING DMcn-Fail-5
27100: PPUSH
27101: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27105: LD_EXP 45
27109: PPUSH
27110: CALL_OW 87
// wait ( 0 0$2 ) ;
27114: LD_INT 70
27116: PPUSH
27117: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
27121: LD_EXP 65
27125: PPUSH
27126: LD_STRING DMcn-Fail-6
27128: PPUSH
27129: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27133: LD_EXP 45
27137: PPUSH
27138: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
27142: LD_INT 35
27144: PPUSH
27145: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
27149: LD_EXP 45
27153: PPUSH
27154: LD_INT 43
27156: PPUSH
27157: LD_INT 21
27159: PPUSH
27160: CALL_OW 307
27164: IFFALSE 27142
// CenterNowOnUnits ( Heike ) ;
27166: LD_EXP 45
27170: PPUSH
27171: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
27175: LD_STRING MuchinQuestion
27177: PPUSH
27178: CALL_OW 97
27182: PUSH
27183: LD_INT 1
27185: DOUBLE
27186: EQUAL
27187: IFTRUE 27191
27189: GO 27291
27191: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
27192: LD_EXP 65
27196: PPUSH
27197: LD_STRING DMcn-Fail-7
27199: PPUSH
27200: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
27204: LD_EXP 45
27208: PPUSH
27209: LD_STRING DH-Fail-8
27211: PPUSH
27212: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27216: LD_INT 10
27218: PPUSH
27219: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
27223: LD_EXP 45
27227: PPUSH
27228: LD_STRING DH-Fail-9
27230: PPUSH
27231: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27235: LD_EXP 45
27239: PPUSH
27240: LD_STRING DH-Fail-10
27242: PPUSH
27243: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27247: LD_EXP 65
27251: PPUSH
27252: LD_STRING DMcn-Fail-11
27254: PPUSH
27255: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27259: LD_EXP 65
27263: PPUSH
27264: LD_EXP 45
27268: PPUSH
27269: CALL_OW 115
// wait ( 0 0$2 ) ;
27273: LD_INT 70
27275: PPUSH
27276: CALL_OW 67
// KillUnit ( Heike ) ;
27280: LD_EXP 45
27284: PPUSH
27285: CALL_OW 66
// end ; 2 :
27289: GO 27471
27291: LD_INT 2
27293: DOUBLE
27294: EQUAL
27295: IFTRUE 27299
27297: GO 27470
27299: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27300: LD_EXP 45
27304: PPUSH
27305: LD_STRING DH-Fail-a-8
27307: PPUSH
27308: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27312: LD_EXP 45
27316: PPUSH
27317: LD_STRING DH-Fail-a-9
27319: PPUSH
27320: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27324: LD_EXP 45
27328: PPUSH
27329: LD_STRING DH-Fail-10
27331: PPUSH
27332: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27336: LD_EXP 45
27340: PPUSH
27341: LD_STRING DH-Fail-a-11
27343: PPUSH
27344: CALL_OW 88
// async ;
27348: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27349: LD_EXP 65
27353: PPUSH
27354: LD_EXP 45
27358: PPUSH
27359: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27363: LD_EXP 65
27367: PPUSH
27368: LD_EXP 45
27372: PPUSH
27373: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27377: LD_EXP 65
27381: PPUSH
27382: LD_STRING DH-Fail-12
27384: PPUSH
27385: CALL_OW 88
// sync ;
27389: SYNC
// wait ( 0 0$1 ) ;
27390: LD_INT 35
27392: PPUSH
27393: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27397: LD_EXP 45
27401: PPUSH
27402: LD_STRING DH-Fail-a-13
27404: PPUSH
27405: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27409: LD_EXP 65
27413: PPUSH
27414: LD_INT 100
27416: PPUSH
27417: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27421: LD_EXP 65
27425: PPUSH
27426: LD_STRING DMcn-Fail-a-14
27428: PPUSH
27429: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27433: LD_EXP 65
27437: PPUSH
27438: CALL_OW 66
// wait ( 0 0$1 ) ;
27442: LD_INT 35
27444: PPUSH
27445: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27449: LD_EXP 45
27453: PPUSH
27454: LD_STRING DH-Fail-a-15
27456: PPUSH
27457: CALL_OW 88
// YouLost ( FailMuchin ) ;
27461: LD_STRING FailMuchin
27463: PPUSH
27464: CALL_OW 104
// end ; end ;
27468: GO 27471
27470: POP
// InGameOff ;
27471: CALL_OW 9
// end ; end_of_file
27475: PPOPN 4
27477: END
// every 0 0$1 marked gameStartEvent do
27478: GO 27480
27480: DISABLE
// begin enable ;
27481: ENABLE
// if not contactWithAmerican then
27482: LD_EXP 25
27486: NOT
27487: IFFALSE 27532
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
27489: LD_ADDR_OWVAR 47
27493: PUSH
27494: LD_STRING #X108-1
27496: PUSH
27497: LD_INT 22
27499: PUSH
27500: LD_INT 5
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 21
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PPUSH
27521: CALL_OW 69
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: ST_TO_ADDR
27530: GO 27621
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
27532: LD_ADDR_OWVAR 47
27536: PUSH
27537: LD_STRING #X108-1
27539: PUSH
27540: LD_INT 22
27542: PUSH
27543: LD_INT 5
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 21
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 50
27562: PUSH
27563: EMPTY
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: PPUSH
27571: CALL_OW 69
27575: PUSH
27576: LD_STRING #X108-2
27578: PUSH
27579: LD_INT 22
27581: PUSH
27582: LD_INT 4
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 21
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 50
27601: PUSH
27602: EMPTY
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: PPUSH
27610: CALL_OW 69
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
// end ; end_of_file
27621: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
27622: LD_EXP 45
27626: PPUSH
27627: LD_INT 59
27629: PPUSH
27630: CALL_OW 308
27634: IFFALSE 27756
27636: GO 27638
27638: DISABLE
// begin Query ( FinalInfo ) ;
27639: LD_STRING FinalInfo
27641: PPUSH
27642: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
27646: LD_INT 59
27648: PPUSH
27649: LD_INT 1
27651: PPUSH
27652: CALL_OW 424
// end_the_mission_allowed := true ;
27656: LD_ADDR_OWVAR 57
27660: PUSH
27661: LD_INT 1
27663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27664: LD_INT 35
27666: PPUSH
27667: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
27671: LD_INT 22
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 21
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 95
27693: PUSH
27694: LD_INT 59
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: PPUSH
27706: CALL_OW 69
27710: PPUSH
27711: CALL 30996 0 1
27715: PUSH
27716: LD_INT 22
27718: PUSH
27719: LD_INT 2
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 21
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PPUSH
27740: CALL_OW 69
27744: PPUSH
27745: CALL 30996 0 1
27749: EQUAL
27750: IFFALSE 27664
// EndMission ;
27752: CALL 27764 0 0
// end ;
27756: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
27757: CALL 27764 0 0
// end ;
27761: PPOPN 1
27763: END
// function EndMission ; begin
27764: LD_INT 0
27766: PPUSH
// PlayOriginalMusic ;
27767: CALL 91526 0 0
// if not IsInArea ( Heike , finalArea ) then
27771: LD_EXP 45
27775: PPUSH
27776: LD_INT 59
27778: PPUSH
27779: CALL_OW 308
27783: NOT
27784: IFFALSE 27795
// begin Query ( HeikeOutOfArea ) ;
27786: LD_STRING HeikeOutOfArea
27788: PPUSH
27789: CALL_OW 97
// exit ;
27793: GO 28692
// end ; if not IsOk ( Heike ) then
27795: LD_EXP 45
27799: PPUSH
27800: CALL_OW 302
27804: NOT
27805: IFFALSE 27816
// begin Query ( HeikeIsHurt ) ;
27807: LD_STRING HeikeIsHurt
27809: PPUSH
27810: CALL_OW 97
// exit ;
27814: GO 28692
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
27816: LD_INT 22
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 21
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 50
27838: PUSH
27839: EMPTY
27840: LIST
27841: PUSH
27842: LD_INT 95
27844: PUSH
27845: LD_INT 59
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: PPUSH
27858: CALL_OW 69
27862: PPUSH
27863: CALL 30996 0 1
27867: PUSH
27868: LD_INT 6
27870: LESS
27871: IFFALSE 27880
// YouLost ( NeedMorePep ) ;
27873: LD_STRING NeedMorePep
27875: PPUSH
27876: CALL_OW 104
// if tick < 20 20$00 then
27880: LD_OWVAR 1
27884: PUSH
27885: LD_INT 42000
27887: LESS
27888: IFFALSE 27897
// SetAchievement ( ACH_HSPEED_8 ) ;
27890: LD_STRING ACH_HSPEED_8
27892: PPUSH
27893: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
27897: LD_INT 22
27899: PUSH
27900: LD_INT 5
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 21
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: PUSH
27926: LD_INT 0
27928: EQUAL
27929: PUSH
27930: LD_EXP 32
27934: PUSH
27935: LD_INT 0
27937: EQUAL
27938: AND
27939: IFFALSE 27953
// AddMedal ( med1 , 1 ) else
27941: LD_STRING med1
27943: PPUSH
27944: LD_INT 1
27946: PPUSH
27947: CALL_OW 101
27951: GO 27964
// AddMedal ( med1 , - 1 ) ;
27953: LD_STRING med1
27955: PPUSH
27956: LD_INT 1
27958: NEG
27959: PPUSH
27960: CALL_OW 101
// if explosivePlantedList >= 3 then
27964: LD_EXP 29
27968: PUSH
27969: LD_INT 3
27971: GREATEREQUAL
27972: IFFALSE 27986
// AddMedal ( med2 , 1 ) else
27974: LD_STRING med2
27976: PPUSH
27977: LD_INT 1
27979: PPUSH
27980: CALL_OW 101
27984: GO 28020
// if explosivePlantedList < 3 then
27986: LD_EXP 29
27990: PUSH
27991: LD_INT 3
27993: LESS
27994: IFFALSE 28009
// AddMedal ( med2 , - 2 ) else
27996: LD_STRING med2
27998: PPUSH
27999: LD_INT 2
28001: NEG
28002: PPUSH
28003: CALL_OW 101
28007: GO 28020
// AddMedal ( med2 , - 1 ) ;
28009: LD_STRING med2
28011: PPUSH
28012: LD_INT 1
28014: NEG
28015: PPUSH
28016: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
28020: LD_INT 5
28022: PPUSH
28023: LD_INT 2
28025: PPUSH
28026: CALL_OW 321
28030: PUSH
28031: LD_INT 2
28033: EQUAL
28034: IFFALSE 28048
// AddMedal ( med3 , 1 ) else
28036: LD_STRING med3
28038: PPUSH
28039: LD_INT 1
28041: PPUSH
28042: CALL_OW 101
28046: GO 28059
// AddMedal ( med3 , - 1 ) ;
28048: LD_STRING med3
28050: PPUSH
28051: LD_INT 1
28053: NEG
28054: PPUSH
28055: CALL_OW 101
// GiveMedals ( MAIN ) ;
28059: LD_STRING MAIN
28061: PPUSH
28062: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
28066: LD_INT 22
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 23
28078: PUSH
28079: LD_INT 2
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 21
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: LIST
28100: PPUSH
28101: CALL_OW 69
28105: PPUSH
28106: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
28110: LD_EXP 59
28114: PUSH
28115: LD_EXP 59
28119: PPUSH
28120: CALL_OW 255
28124: PUSH
28125: LD_INT 2
28127: EQUAL
28128: AND
28129: IFFALSE 28143
// SaveCharacters ( Doug , 08_UsCommander ) ;
28131: LD_EXP 59
28135: PPUSH
28136: LD_STRING 08_UsCommander
28138: PPUSH
28139: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
28143: LD_EXP 58
28147: PUSH
28148: LD_EXP 58
28152: PPUSH
28153: CALL_OW 255
28157: PUSH
28158: LD_INT 2
28160: EQUAL
28161: AND
28162: IFFALSE 28176
// SaveCharacters ( Harris , 08_Harris ) ;
28164: LD_EXP 58
28168: PPUSH
28169: LD_STRING 08_Harris
28171: PPUSH
28172: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
28176: LD_INT 22
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 23
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 21
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: LIST
28210: PPUSH
28211: CALL_OW 69
28215: PUSH
28216: LD_EXP 59
28220: PUSH
28221: LD_EXP 58
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: DIFF
28230: PPUSH
28231: LD_STRING 08_Americans
28233: PPUSH
28234: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
28238: LD_EXP 45
28242: PPUSH
28243: CALL_OW 248
28247: PUSH
28248: LD_INT 3
28250: EQUAL
28251: IFFALSE 28281
// begin CopySkills ( Heike , HeikeTmp ) ;
28253: LD_EXP 45
28257: PPUSH
28258: LD_EXP 61
28262: PPUSH
28263: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28267: LD_EXP 61
28271: PPUSH
28272: LD_STRING 08_Heike
28274: PPUSH
28275: CALL_OW 38
// end else
28279: GO 28293
// SaveCharacters ( Heike , 08_Heike ) ;
28281: LD_EXP 45
28285: PPUSH
28286: LD_STRING 08_Heike
28288: PPUSH
28289: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
28293: LD_EXP 55
28297: PUSH
28298: LD_EXP 55
28302: PPUSH
28303: CALL_OW 255
28307: PUSH
28308: LD_INT 2
28310: EQUAL
28311: AND
28312: IFFALSE 28326
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28314: LD_EXP 55
28318: PPUSH
28319: LD_STRING 08_Aviradze
28321: PPUSH
28322: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
28326: LD_EXP 48
28330: PUSH
28331: LD_EXP 48
28335: PPUSH
28336: CALL_OW 255
28340: PUSH
28341: LD_INT 2
28343: EQUAL
28344: AND
28345: IFFALSE 28359
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28347: LD_EXP 48
28351: PPUSH
28352: LD_STRING 08_Ibrahim
28354: PPUSH
28355: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
28359: LD_EXP 49
28363: PUSH
28364: LD_EXP 49
28368: PPUSH
28369: CALL_OW 255
28373: PUSH
28374: LD_INT 2
28376: EQUAL
28377: AND
28378: IFFALSE 28392
// SaveCharacters ( Kamil , 08_Kamil ) ;
28380: LD_EXP 49
28384: PPUSH
28385: LD_STRING 08_Kamil
28387: PPUSH
28388: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
28392: LD_EXP 51
28396: PUSH
28397: LD_EXP 51
28401: PPUSH
28402: CALL_OW 255
28406: PUSH
28407: LD_INT 2
28409: EQUAL
28410: AND
28411: IFFALSE 28425
// SaveCharacters ( Sophia , 08_Sophia ) ;
28413: LD_EXP 51
28417: PPUSH
28418: LD_STRING 08_Sophia
28420: PPUSH
28421: CALL_OW 38
// if Kaia and GetSide ( Kaia ) = 2 then
28425: LD_EXP 50
28429: PUSH
28430: LD_EXP 50
28434: PPUSH
28435: CALL_OW 255
28439: PUSH
28440: LD_INT 2
28442: EQUAL
28443: AND
28444: IFFALSE 28458
// SaveCharacters ( Kaia , 08_Kaia ) ;
28446: LD_EXP 50
28450: PPUSH
28451: LD_STRING 08_Kaia
28453: PPUSH
28454: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
28458: LD_EXP 46
28462: PUSH
28463: LD_EXP 46
28467: PPUSH
28468: CALL_OW 255
28472: PUSH
28473: LD_INT 2
28475: EQUAL
28476: AND
28477: IFFALSE 28534
// if GetNation ( Givi ) = nation_russian then
28479: LD_EXP 46
28483: PPUSH
28484: CALL_OW 248
28488: PUSH
28489: LD_INT 3
28491: EQUAL
28492: IFFALSE 28522
// begin CopySkills ( Givi , GiviTmp ) ;
28494: LD_EXP 46
28498: PPUSH
28499: LD_EXP 62
28503: PPUSH
28504: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
28508: LD_EXP 62
28512: PPUSH
28513: LD_STRING 08_Givi
28515: PPUSH
28516: CALL_OW 38
// end else
28520: GO 28534
// SaveCharacters ( Givi , 08_Givi ) ;
28522: LD_EXP 46
28526: PPUSH
28527: LD_STRING 08_Givi
28529: PPUSH
28530: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
28534: LD_EXP 47
28538: PUSH
28539: LD_EXP 47
28543: PPUSH
28544: CALL_OW 255
28548: PUSH
28549: LD_INT 2
28551: EQUAL
28552: AND
28553: IFFALSE 28567
// SaveCharacters ( Mike , 08_Mike ) ;
28555: LD_EXP 47
28559: PPUSH
28560: LD_STRING 08_Mike
28562: PPUSH
28563: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
28567: LD_EXP 52
28571: PUSH
28572: LD_EXP 52
28576: PPUSH
28577: CALL_OW 255
28581: PUSH
28582: LD_INT 2
28584: EQUAL
28585: AND
28586: IFFALSE 28600
// SaveCharacters ( Markov , 08_Markov ) ;
28588: LD_EXP 52
28592: PPUSH
28593: LD_STRING 08_Markov
28595: PPUSH
28596: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
28600: LD_EXP 54
28604: PUSH
28605: LD_EXP 54
28609: PPUSH
28610: CALL_OW 255
28614: PUSH
28615: LD_INT 2
28617: EQUAL
28618: AND
28619: IFFALSE 28633
// SaveCharacters ( Kurt , 08_Kurt ) ;
28621: LD_EXP 54
28625: PPUSH
28626: LD_STRING 08_Kurt
28628: PPUSH
28629: CALL_OW 38
// if Olaf and GetSide ( Olaf ) = 2 then
28633: LD_EXP 53
28637: PUSH
28638: LD_EXP 53
28642: PPUSH
28643: CALL_OW 255
28647: PUSH
28648: LD_INT 2
28650: EQUAL
28651: AND
28652: IFFALSE 28666
// SaveCharacters ( Olaf , 08_Olaf ) ;
28654: LD_EXP 53
28658: PPUSH
28659: LD_STRING 08_Olaf
28661: PPUSH
28662: CALL_OW 38
// if heikeSecondSquad then
28666: LD_EXP 56
28670: IFFALSE 28684
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
28672: LD_EXP 56
28676: PPUSH
28677: LD_STRING 08_others
28679: PPUSH
28680: CALL_OW 38
// YouWin ;
28684: CALL_OW 103
// DialogueOff ;
28688: CALL_OW 7
// end ; end_of_file
28692: LD_VAR 0 1
28696: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
28697: LD_EXP 5
28701: IFFALSE 28891
28703: GO 28705
28705: DISABLE
28706: LD_INT 0
28708: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
28709: LD_INT 35
28711: PPUSH
28712: LD_INT 2100
28714: PPUSH
28715: CALL_OW 12
28719: PPUSH
28720: CALL_OW 67
// StopOriginalMusic ;
28724: CALL 91511 0 0
// weatherBusy := true ;
28728: LD_ADDR_EXP 37
28732: PUSH
28733: LD_INT 1
28735: ST_TO_ADDR
// for i := 1 to 3 do
28736: LD_ADDR_VAR 0 1
28740: PUSH
28741: DOUBLE
28742: LD_INT 1
28744: DEC
28745: ST_TO_ADDR
28746: LD_INT 3
28748: PUSH
28749: FOR_TO
28750: IFFALSE 28784
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
28752: LD_INT 1
28754: PPUSH
28755: LD_INT 100
28757: PUSH
28758: LD_INT 100
28760: PUSH
28761: LD_VAR 0 1
28765: MUL
28766: PLUS
28767: PPUSH
28768: LD_INT 60
28770: PPUSH
28771: CALL_OW 550
// wait ( 0 0$2 ) ;
28775: LD_INT 70
28777: PPUSH
28778: CALL_OW 67
// end ;
28782: GO 28749
28784: POP
28785: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
28786: LD_STRING ArStormRain.wav
28788: PPUSH
28789: LD_STRING OW_CUSTOM_COMMAND(103);
28791: PPUSH
28792: CALL 91541 0 2
// wait ( 0 0$3 ) ;
28796: LD_INT 105
28798: PPUSH
28799: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
28803: LD_INT 1
28805: PPUSH
28806: LD_INT 900
28808: PPUSH
28809: LD_INT 120
28811: PPUSH
28812: CALL_OW 550
// wait ( 0 0$10 ) ;
28816: LD_INT 350
28818: PPUSH
28819: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
28823: LD_INT 1
28825: PPUSH
28826: LD_INT 1500
28828: PPUSH
28829: LD_INT 300
28831: PPUSH
28832: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
28836: LD_INT 35
28838: PPUSH
28839: CALL_OW 67
// until not weatherBusy ;
28843: LD_EXP 37
28847: NOT
28848: IFFALSE 28836
// SetWeather ( 0 , 0 , 0 ) ;
28850: LD_INT 0
28852: PPUSH
28853: LD_INT 0
28855: PPUSH
28856: LD_INT 0
28858: PPUSH
28859: CALL_OW 550
// wait ( 5 5$00 ) ;
28863: LD_INT 10500
28865: PPUSH
28866: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
28870: LD_STRING ArStormNormal.wav
28872: PPUSH
28873: LD_STRING OW_CUSTOM_COMMAND(103);
28875: PPUSH
28876: CALL 91541 0 2
// wait ( 5 5$00 ) ;
28880: LD_INT 10500
28882: PPUSH
28883: CALL_OW 67
// PlayOriginalMusic ;
28887: CALL 91526 0 0
// end ; end_of_file
28891: PPOPN 1
28893: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28894: LD_INT 0
28896: PPUSH
28897: PPUSH
// if exist_mode then
28898: LD_VAR 0 2
28902: IFFALSE 28927
// unit := CreateCharacter ( prefix & ident ) else
28904: LD_ADDR_VAR 0 5
28908: PUSH
28909: LD_VAR 0 3
28913: PUSH
28914: LD_VAR 0 1
28918: STR
28919: PPUSH
28920: CALL_OW 34
28924: ST_TO_ADDR
28925: GO 28942
// unit := NewCharacter ( ident ) ;
28927: LD_ADDR_VAR 0 5
28931: PUSH
28932: LD_VAR 0 1
28936: PPUSH
28937: CALL_OW 25
28941: ST_TO_ADDR
// result := unit ;
28942: LD_ADDR_VAR 0 4
28946: PUSH
28947: LD_VAR 0 5
28951: ST_TO_ADDR
// end ;
28952: LD_VAR 0 4
28956: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28957: LD_INT 0
28959: PPUSH
28960: PPUSH
// if not side or not nation then
28961: LD_VAR 0 1
28965: NOT
28966: PUSH
28967: LD_VAR 0 2
28971: NOT
28972: OR
28973: IFFALSE 28977
// exit ;
28975: GO 29745
// case nation of nation_american :
28977: LD_VAR 0 2
28981: PUSH
28982: LD_INT 1
28984: DOUBLE
28985: EQUAL
28986: IFTRUE 28990
28988: GO 29204
28990: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28991: LD_ADDR_VAR 0 4
28995: PUSH
28996: LD_INT 35
28998: PUSH
28999: LD_INT 45
29001: PUSH
29002: LD_INT 46
29004: PUSH
29005: LD_INT 47
29007: PUSH
29008: LD_INT 82
29010: PUSH
29011: LD_INT 83
29013: PUSH
29014: LD_INT 84
29016: PUSH
29017: LD_INT 85
29019: PUSH
29020: LD_INT 86
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: LD_INT 2
29028: PUSH
29029: LD_INT 6
29031: PUSH
29032: LD_INT 15
29034: PUSH
29035: LD_INT 16
29037: PUSH
29038: LD_INT 7
29040: PUSH
29041: LD_INT 12
29043: PUSH
29044: LD_INT 13
29046: PUSH
29047: LD_INT 10
29049: PUSH
29050: LD_INT 14
29052: PUSH
29053: LD_INT 20
29055: PUSH
29056: LD_INT 21
29058: PUSH
29059: LD_INT 22
29061: PUSH
29062: LD_INT 25
29064: PUSH
29065: LD_INT 32
29067: PUSH
29068: LD_INT 27
29070: PUSH
29071: LD_INT 36
29073: PUSH
29074: LD_INT 69
29076: PUSH
29077: LD_INT 39
29079: PUSH
29080: LD_INT 34
29082: PUSH
29083: LD_INT 40
29085: PUSH
29086: LD_INT 48
29088: PUSH
29089: LD_INT 49
29091: PUSH
29092: LD_INT 50
29094: PUSH
29095: LD_INT 51
29097: PUSH
29098: LD_INT 52
29100: PUSH
29101: LD_INT 53
29103: PUSH
29104: LD_INT 54
29106: PUSH
29107: LD_INT 55
29109: PUSH
29110: LD_INT 56
29112: PUSH
29113: LD_INT 57
29115: PUSH
29116: LD_INT 58
29118: PUSH
29119: LD_INT 59
29121: PUSH
29122: LD_INT 60
29124: PUSH
29125: LD_INT 61
29127: PUSH
29128: LD_INT 62
29130: PUSH
29131: LD_INT 80
29133: PUSH
29134: LD_INT 82
29136: PUSH
29137: LD_INT 83
29139: PUSH
29140: LD_INT 84
29142: PUSH
29143: LD_INT 85
29145: PUSH
29146: LD_INT 86
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: ST_TO_ADDR
29202: GO 29669
29204: LD_INT 2
29206: DOUBLE
29207: EQUAL
29208: IFTRUE 29212
29210: GO 29438
29212: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29213: LD_ADDR_VAR 0 4
29217: PUSH
29218: LD_INT 35
29220: PUSH
29221: LD_INT 45
29223: PUSH
29224: LD_INT 46
29226: PUSH
29227: LD_INT 47
29229: PUSH
29230: LD_INT 82
29232: PUSH
29233: LD_INT 83
29235: PUSH
29236: LD_INT 84
29238: PUSH
29239: LD_INT 85
29241: PUSH
29242: LD_INT 87
29244: PUSH
29245: LD_INT 70
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: LD_INT 11
29253: PUSH
29254: LD_INT 3
29256: PUSH
29257: LD_INT 4
29259: PUSH
29260: LD_INT 5
29262: PUSH
29263: LD_INT 6
29265: PUSH
29266: LD_INT 15
29268: PUSH
29269: LD_INT 18
29271: PUSH
29272: LD_INT 7
29274: PUSH
29275: LD_INT 17
29277: PUSH
29278: LD_INT 8
29280: PUSH
29281: LD_INT 20
29283: PUSH
29284: LD_INT 21
29286: PUSH
29287: LD_INT 22
29289: PUSH
29290: LD_INT 72
29292: PUSH
29293: LD_INT 26
29295: PUSH
29296: LD_INT 69
29298: PUSH
29299: LD_INT 39
29301: PUSH
29302: LD_INT 40
29304: PUSH
29305: LD_INT 41
29307: PUSH
29308: LD_INT 42
29310: PUSH
29311: LD_INT 43
29313: PUSH
29314: LD_INT 48
29316: PUSH
29317: LD_INT 49
29319: PUSH
29320: LD_INT 50
29322: PUSH
29323: LD_INT 51
29325: PUSH
29326: LD_INT 52
29328: PUSH
29329: LD_INT 53
29331: PUSH
29332: LD_INT 54
29334: PUSH
29335: LD_INT 55
29337: PUSH
29338: LD_INT 56
29340: PUSH
29341: LD_INT 60
29343: PUSH
29344: LD_INT 61
29346: PUSH
29347: LD_INT 62
29349: PUSH
29350: LD_INT 66
29352: PUSH
29353: LD_INT 67
29355: PUSH
29356: LD_INT 68
29358: PUSH
29359: LD_INT 81
29361: PUSH
29362: LD_INT 82
29364: PUSH
29365: LD_INT 83
29367: PUSH
29368: LD_INT 84
29370: PUSH
29371: LD_INT 85
29373: PUSH
29374: LD_INT 87
29376: PUSH
29377: LD_INT 88
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: ST_TO_ADDR
29436: GO 29669
29438: LD_INT 3
29440: DOUBLE
29441: EQUAL
29442: IFTRUE 29446
29444: GO 29668
29446: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29447: LD_ADDR_VAR 0 4
29451: PUSH
29452: LD_INT 46
29454: PUSH
29455: LD_INT 47
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: LD_INT 82
29466: PUSH
29467: LD_INT 83
29469: PUSH
29470: LD_INT 84
29472: PUSH
29473: LD_INT 85
29475: PUSH
29476: LD_INT 86
29478: PUSH
29479: LD_INT 11
29481: PUSH
29482: LD_INT 9
29484: PUSH
29485: LD_INT 20
29487: PUSH
29488: LD_INT 19
29490: PUSH
29491: LD_INT 21
29493: PUSH
29494: LD_INT 24
29496: PUSH
29497: LD_INT 22
29499: PUSH
29500: LD_INT 25
29502: PUSH
29503: LD_INT 28
29505: PUSH
29506: LD_INT 29
29508: PUSH
29509: LD_INT 30
29511: PUSH
29512: LD_INT 31
29514: PUSH
29515: LD_INT 37
29517: PUSH
29518: LD_INT 38
29520: PUSH
29521: LD_INT 32
29523: PUSH
29524: LD_INT 27
29526: PUSH
29527: LD_INT 33
29529: PUSH
29530: LD_INT 69
29532: PUSH
29533: LD_INT 39
29535: PUSH
29536: LD_INT 34
29538: PUSH
29539: LD_INT 40
29541: PUSH
29542: LD_INT 71
29544: PUSH
29545: LD_INT 23
29547: PUSH
29548: LD_INT 44
29550: PUSH
29551: LD_INT 48
29553: PUSH
29554: LD_INT 49
29556: PUSH
29557: LD_INT 50
29559: PUSH
29560: LD_INT 51
29562: PUSH
29563: LD_INT 52
29565: PUSH
29566: LD_INT 53
29568: PUSH
29569: LD_INT 54
29571: PUSH
29572: LD_INT 55
29574: PUSH
29575: LD_INT 56
29577: PUSH
29578: LD_INT 57
29580: PUSH
29581: LD_INT 58
29583: PUSH
29584: LD_INT 59
29586: PUSH
29587: LD_INT 63
29589: PUSH
29590: LD_INT 64
29592: PUSH
29593: LD_INT 65
29595: PUSH
29596: LD_INT 82
29598: PUSH
29599: LD_INT 83
29601: PUSH
29602: LD_INT 84
29604: PUSH
29605: LD_INT 85
29607: PUSH
29608: LD_INT 86
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: ST_TO_ADDR
29666: GO 29669
29668: POP
// if state > - 1 and state < 3 then
29669: LD_VAR 0 3
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: GREATER
29678: PUSH
29679: LD_VAR 0 3
29683: PUSH
29684: LD_INT 3
29686: LESS
29687: AND
29688: IFFALSE 29745
// for i in result do
29690: LD_ADDR_VAR 0 5
29694: PUSH
29695: LD_VAR 0 4
29699: PUSH
29700: FOR_IN
29701: IFFALSE 29743
// if GetTech ( i , side ) <> state then
29703: LD_VAR 0 5
29707: PPUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 321
29717: PUSH
29718: LD_VAR 0 3
29722: NONEQUAL
29723: IFFALSE 29741
// result := result diff i ;
29725: LD_ADDR_VAR 0 4
29729: PUSH
29730: LD_VAR 0 4
29734: PUSH
29735: LD_VAR 0 5
29739: DIFF
29740: ST_TO_ADDR
29741: GO 29700
29743: POP
29744: POP
// end ;
29745: LD_VAR 0 4
29749: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29750: LD_INT 0
29752: PPUSH
29753: PPUSH
29754: PPUSH
// result := true ;
29755: LD_ADDR_VAR 0 3
29759: PUSH
29760: LD_INT 1
29762: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29763: LD_ADDR_VAR 0 5
29767: PUSH
29768: LD_VAR 0 2
29772: PPUSH
29773: CALL_OW 480
29777: ST_TO_ADDR
// if not tmp then
29778: LD_VAR 0 5
29782: NOT
29783: IFFALSE 29787
// exit ;
29785: GO 29836
// for i in tmp do
29787: LD_ADDR_VAR 0 4
29791: PUSH
29792: LD_VAR 0 5
29796: PUSH
29797: FOR_IN
29798: IFFALSE 29834
// if GetTech ( i , side ) <> state_researched then
29800: LD_VAR 0 4
29804: PPUSH
29805: LD_VAR 0 1
29809: PPUSH
29810: CALL_OW 321
29814: PUSH
29815: LD_INT 2
29817: NONEQUAL
29818: IFFALSE 29832
// begin result := false ;
29820: LD_ADDR_VAR 0 3
29824: PUSH
29825: LD_INT 0
29827: ST_TO_ADDR
// exit ;
29828: POP
29829: POP
29830: GO 29836
// end ;
29832: GO 29797
29834: POP
29835: POP
// end ;
29836: LD_VAR 0 3
29840: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29841: LD_INT 0
29843: PPUSH
29844: PPUSH
29845: PPUSH
29846: PPUSH
29847: PPUSH
29848: PPUSH
29849: PPUSH
29850: PPUSH
29851: PPUSH
29852: PPUSH
29853: PPUSH
29854: PPUSH
29855: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29856: LD_VAR 0 1
29860: NOT
29861: PUSH
29862: LD_VAR 0 1
29866: PPUSH
29867: CALL_OW 257
29871: PUSH
29872: LD_INT 9
29874: NONEQUAL
29875: OR
29876: IFFALSE 29880
// exit ;
29878: GO 30453
// side := GetSide ( unit ) ;
29880: LD_ADDR_VAR 0 9
29884: PUSH
29885: LD_VAR 0 1
29889: PPUSH
29890: CALL_OW 255
29894: ST_TO_ADDR
// tech_space := tech_spacanom ;
29895: LD_ADDR_VAR 0 12
29899: PUSH
29900: LD_INT 29
29902: ST_TO_ADDR
// tech_time := tech_taurad ;
29903: LD_ADDR_VAR 0 13
29907: PUSH
29908: LD_INT 28
29910: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29911: LD_ADDR_VAR 0 11
29915: PUSH
29916: LD_VAR 0 1
29920: PPUSH
29921: CALL_OW 310
29925: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29926: LD_VAR 0 11
29930: PPUSH
29931: CALL_OW 247
29935: PUSH
29936: LD_INT 2
29938: EQUAL
29939: IFFALSE 29943
// exit ;
29941: GO 30453
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29943: LD_ADDR_VAR 0 8
29947: PUSH
29948: LD_INT 81
29950: PUSH
29951: LD_VAR 0 9
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 3
29962: PUSH
29963: LD_INT 21
29965: PUSH
29966: LD_INT 3
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PPUSH
29981: CALL_OW 69
29985: ST_TO_ADDR
// if not tmp then
29986: LD_VAR 0 8
29990: NOT
29991: IFFALSE 29995
// exit ;
29993: GO 30453
// if in_unit then
29995: LD_VAR 0 11
29999: IFFALSE 30023
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30001: LD_ADDR_VAR 0 10
30005: PUSH
30006: LD_VAR 0 8
30010: PPUSH
30011: LD_VAR 0 11
30015: PPUSH
30016: CALL_OW 74
30020: ST_TO_ADDR
30021: GO 30043
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30023: LD_ADDR_VAR 0 10
30027: PUSH
30028: LD_VAR 0 8
30032: PPUSH
30033: LD_VAR 0 1
30037: PPUSH
30038: CALL_OW 74
30042: ST_TO_ADDR
// if not enemy then
30043: LD_VAR 0 10
30047: NOT
30048: IFFALSE 30052
// exit ;
30050: GO 30453
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30052: LD_VAR 0 11
30056: PUSH
30057: LD_VAR 0 11
30061: PPUSH
30062: LD_VAR 0 10
30066: PPUSH
30067: CALL_OW 296
30071: PUSH
30072: LD_INT 13
30074: GREATER
30075: AND
30076: PUSH
30077: LD_VAR 0 1
30081: PPUSH
30082: LD_VAR 0 10
30086: PPUSH
30087: CALL_OW 296
30091: PUSH
30092: LD_INT 12
30094: GREATER
30095: OR
30096: IFFALSE 30100
// exit ;
30098: GO 30453
// missile := [ 1 ] ;
30100: LD_ADDR_VAR 0 14
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30111: LD_VAR 0 9
30115: PPUSH
30116: LD_VAR 0 12
30120: PPUSH
30121: CALL_OW 325
30125: IFFALSE 30154
// missile := Replace ( missile , missile + 1 , 2 ) ;
30127: LD_ADDR_VAR 0 14
30131: PUSH
30132: LD_VAR 0 14
30136: PPUSH
30137: LD_VAR 0 14
30141: PUSH
30142: LD_INT 1
30144: PLUS
30145: PPUSH
30146: LD_INT 2
30148: PPUSH
30149: CALL_OW 1
30153: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30154: LD_VAR 0 9
30158: PPUSH
30159: LD_VAR 0 13
30163: PPUSH
30164: CALL_OW 325
30168: PUSH
30169: LD_VAR 0 10
30173: PPUSH
30174: CALL_OW 255
30178: PPUSH
30179: LD_VAR 0 13
30183: PPUSH
30184: CALL_OW 325
30188: NOT
30189: AND
30190: IFFALSE 30219
// missile := Replace ( missile , missile + 1 , 3 ) ;
30192: LD_ADDR_VAR 0 14
30196: PUSH
30197: LD_VAR 0 14
30201: PPUSH
30202: LD_VAR 0 14
30206: PUSH
30207: LD_INT 1
30209: PLUS
30210: PPUSH
30211: LD_INT 3
30213: PPUSH
30214: CALL_OW 1
30218: ST_TO_ADDR
// if missile < 2 then
30219: LD_VAR 0 14
30223: PUSH
30224: LD_INT 2
30226: LESS
30227: IFFALSE 30231
// exit ;
30229: GO 30453
// x := GetX ( enemy ) ;
30231: LD_ADDR_VAR 0 4
30235: PUSH
30236: LD_VAR 0 10
30240: PPUSH
30241: CALL_OW 250
30245: ST_TO_ADDR
// y := GetY ( enemy ) ;
30246: LD_ADDR_VAR 0 5
30250: PUSH
30251: LD_VAR 0 10
30255: PPUSH
30256: CALL_OW 251
30260: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30261: LD_ADDR_VAR 0 6
30265: PUSH
30266: LD_VAR 0 4
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PPUSH
30275: LD_INT 1
30277: PPUSH
30278: CALL_OW 12
30282: PLUS
30283: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30284: LD_ADDR_VAR 0 7
30288: PUSH
30289: LD_VAR 0 5
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PPUSH
30298: LD_INT 1
30300: PPUSH
30301: CALL_OW 12
30305: PLUS
30306: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30307: LD_VAR 0 6
30311: PPUSH
30312: LD_VAR 0 7
30316: PPUSH
30317: CALL_OW 488
30321: NOT
30322: IFFALSE 30344
// begin _x := x ;
30324: LD_ADDR_VAR 0 6
30328: PUSH
30329: LD_VAR 0 4
30333: ST_TO_ADDR
// _y := y ;
30334: LD_ADDR_VAR 0 7
30338: PUSH
30339: LD_VAR 0 5
30343: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30344: LD_ADDR_VAR 0 3
30348: PUSH
30349: LD_INT 1
30351: PPUSH
30352: LD_VAR 0 14
30356: PPUSH
30357: CALL_OW 12
30361: ST_TO_ADDR
// case i of 1 :
30362: LD_VAR 0 3
30366: PUSH
30367: LD_INT 1
30369: DOUBLE
30370: EQUAL
30371: IFTRUE 30375
30373: GO 30392
30375: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30376: LD_VAR 0 1
30380: PPUSH
30381: LD_VAR 0 10
30385: PPUSH
30386: CALL_OW 115
30390: GO 30453
30392: LD_INT 2
30394: DOUBLE
30395: EQUAL
30396: IFTRUE 30400
30398: GO 30422
30400: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30401: LD_VAR 0 1
30405: PPUSH
30406: LD_VAR 0 6
30410: PPUSH
30411: LD_VAR 0 7
30415: PPUSH
30416: CALL_OW 153
30420: GO 30453
30422: LD_INT 3
30424: DOUBLE
30425: EQUAL
30426: IFTRUE 30430
30428: GO 30452
30430: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30431: LD_VAR 0 1
30435: PPUSH
30436: LD_VAR 0 6
30440: PPUSH
30441: LD_VAR 0 7
30445: PPUSH
30446: CALL_OW 154
30450: GO 30453
30452: POP
// end ;
30453: LD_VAR 0 2
30457: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30458: LD_INT 0
30460: PPUSH
30461: PPUSH
30462: PPUSH
30463: PPUSH
30464: PPUSH
30465: PPUSH
// if not unit or not building then
30466: LD_VAR 0 1
30470: NOT
30471: PUSH
30472: LD_VAR 0 2
30476: NOT
30477: OR
30478: IFFALSE 30482
// exit ;
30480: GO 30640
// x := GetX ( building ) ;
30482: LD_ADDR_VAR 0 5
30486: PUSH
30487: LD_VAR 0 2
30491: PPUSH
30492: CALL_OW 250
30496: ST_TO_ADDR
// y := GetY ( building ) ;
30497: LD_ADDR_VAR 0 6
30501: PUSH
30502: LD_VAR 0 2
30506: PPUSH
30507: CALL_OW 251
30511: ST_TO_ADDR
// for i = 0 to 5 do
30512: LD_ADDR_VAR 0 4
30516: PUSH
30517: DOUBLE
30518: LD_INT 0
30520: DEC
30521: ST_TO_ADDR
30522: LD_INT 5
30524: PUSH
30525: FOR_TO
30526: IFFALSE 30638
// begin _x := ShiftX ( x , i , 3 ) ;
30528: LD_ADDR_VAR 0 7
30532: PUSH
30533: LD_VAR 0 5
30537: PPUSH
30538: LD_VAR 0 4
30542: PPUSH
30543: LD_INT 3
30545: PPUSH
30546: CALL_OW 272
30550: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30551: LD_ADDR_VAR 0 8
30555: PUSH
30556: LD_VAR 0 6
30560: PPUSH
30561: LD_VAR 0 4
30565: PPUSH
30566: LD_INT 3
30568: PPUSH
30569: CALL_OW 273
30573: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30574: LD_VAR 0 7
30578: PPUSH
30579: LD_VAR 0 8
30583: PPUSH
30584: CALL_OW 488
30588: NOT
30589: IFFALSE 30593
// continue ;
30591: GO 30525
// if HexInfo ( _x , _y ) = 0 then
30593: LD_VAR 0 7
30597: PPUSH
30598: LD_VAR 0 8
30602: PPUSH
30603: CALL_OW 428
30607: PUSH
30608: LD_INT 0
30610: EQUAL
30611: IFFALSE 30636
// begin ComMoveXY ( unit , _x , _y ) ;
30613: LD_VAR 0 1
30617: PPUSH
30618: LD_VAR 0 7
30622: PPUSH
30623: LD_VAR 0 8
30627: PPUSH
30628: CALL_OW 111
// exit ;
30632: POP
30633: POP
30634: GO 30640
// end ; end ;
30636: GO 30525
30638: POP
30639: POP
// end ;
30640: LD_VAR 0 3
30644: RET
// export function ScanBase ( side , base_area ) ; begin
30645: LD_INT 0
30647: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30648: LD_ADDR_VAR 0 3
30652: PUSH
30653: LD_VAR 0 2
30657: PPUSH
30658: LD_INT 81
30660: PUSH
30661: LD_VAR 0 1
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PPUSH
30670: CALL_OW 70
30674: ST_TO_ADDR
// end ;
30675: LD_VAR 0 3
30679: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30680: LD_INT 0
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
// result := false ;
30686: LD_ADDR_VAR 0 2
30690: PUSH
30691: LD_INT 0
30693: ST_TO_ADDR
// side := GetSide ( unit ) ;
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_VAR 0 1
30703: PPUSH
30704: CALL_OW 255
30708: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30709: LD_ADDR_VAR 0 4
30713: PUSH
30714: LD_VAR 0 1
30718: PPUSH
30719: CALL_OW 248
30723: ST_TO_ADDR
// case nat of 1 :
30724: LD_VAR 0 4
30728: PUSH
30729: LD_INT 1
30731: DOUBLE
30732: EQUAL
30733: IFTRUE 30737
30735: GO 30748
30737: POP
// tech := tech_lassight ; 2 :
30738: LD_ADDR_VAR 0 5
30742: PUSH
30743: LD_INT 12
30745: ST_TO_ADDR
30746: GO 30787
30748: LD_INT 2
30750: DOUBLE
30751: EQUAL
30752: IFTRUE 30756
30754: GO 30767
30756: POP
// tech := tech_mortar ; 3 :
30757: LD_ADDR_VAR 0 5
30761: PUSH
30762: LD_INT 41
30764: ST_TO_ADDR
30765: GO 30787
30767: LD_INT 3
30769: DOUBLE
30770: EQUAL
30771: IFTRUE 30775
30773: GO 30786
30775: POP
// tech := tech_bazooka ; end ;
30776: LD_ADDR_VAR 0 5
30780: PUSH
30781: LD_INT 44
30783: ST_TO_ADDR
30784: GO 30787
30786: POP
// if Researched ( side , tech ) then
30787: LD_VAR 0 3
30791: PPUSH
30792: LD_VAR 0 5
30796: PPUSH
30797: CALL_OW 325
30801: IFFALSE 30828
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30803: LD_ADDR_VAR 0 2
30807: PUSH
30808: LD_INT 5
30810: PUSH
30811: LD_INT 8
30813: PUSH
30814: LD_INT 9
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: LIST
30821: PUSH
30822: LD_VAR 0 4
30826: ARRAY
30827: ST_TO_ADDR
// end ;
30828: LD_VAR 0 2
30832: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30833: LD_INT 0
30835: PPUSH
30836: PPUSH
30837: PPUSH
// if not mines then
30838: LD_VAR 0 2
30842: NOT
30843: IFFALSE 30847
// exit ;
30845: GO 30991
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30847: LD_ADDR_VAR 0 5
30851: PUSH
30852: LD_INT 81
30854: PUSH
30855: LD_VAR 0 1
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 3
30866: PUSH
30867: LD_INT 21
30869: PUSH
30870: LD_INT 3
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PPUSH
30885: CALL_OW 69
30889: ST_TO_ADDR
// for i in mines do
30890: LD_ADDR_VAR 0 4
30894: PUSH
30895: LD_VAR 0 2
30899: PUSH
30900: FOR_IN
30901: IFFALSE 30989
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30903: LD_VAR 0 4
30907: PUSH
30908: LD_INT 1
30910: ARRAY
30911: PPUSH
30912: LD_VAR 0 4
30916: PUSH
30917: LD_INT 2
30919: ARRAY
30920: PPUSH
30921: CALL_OW 458
30925: NOT
30926: IFFALSE 30930
// continue ;
30928: GO 30900
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30930: LD_VAR 0 4
30934: PUSH
30935: LD_INT 1
30937: ARRAY
30938: PPUSH
30939: LD_VAR 0 4
30943: PUSH
30944: LD_INT 2
30946: ARRAY
30947: PPUSH
30948: CALL_OW 428
30952: PUSH
30953: LD_VAR 0 5
30957: IN
30958: IFFALSE 30987
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30960: LD_VAR 0 4
30964: PUSH
30965: LD_INT 1
30967: ARRAY
30968: PPUSH
30969: LD_VAR 0 4
30973: PUSH
30974: LD_INT 2
30976: ARRAY
30977: PPUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 456
// end ;
30987: GO 30900
30989: POP
30990: POP
// end ;
30991: LD_VAR 0 3
30995: RET
// export function Count ( array ) ; begin
30996: LD_INT 0
30998: PPUSH
// result := array + 0 ;
30999: LD_ADDR_VAR 0 2
31003: PUSH
31004: LD_VAR 0 1
31008: PUSH
31009: LD_INT 0
31011: PLUS
31012: ST_TO_ADDR
// end ;
31013: LD_VAR 0 2
31017: RET
// export function IsEmpty ( building ) ; begin
31018: LD_INT 0
31020: PPUSH
// if not building then
31021: LD_VAR 0 1
31025: NOT
31026: IFFALSE 31030
// exit ;
31028: GO 31073
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31030: LD_ADDR_VAR 0 2
31034: PUSH
31035: LD_VAR 0 1
31039: PUSH
31040: LD_INT 22
31042: PUSH
31043: LD_VAR 0 1
31047: PPUSH
31048: CALL_OW 255
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 58
31059: PUSH
31060: EMPTY
31061: LIST
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PPUSH
31067: CALL_OW 69
31071: IN
31072: ST_TO_ADDR
// end ;
31073: LD_VAR 0 2
31077: RET
// export function IsNotFull ( building ) ; var places ; begin
31078: LD_INT 0
31080: PPUSH
31081: PPUSH
// if not building then
31082: LD_VAR 0 1
31086: NOT
31087: IFFALSE 31091
// exit ;
31089: GO 31119
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31091: LD_ADDR_VAR 0 2
31095: PUSH
31096: LD_VAR 0 1
31100: PPUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 62
31106: PUSH
31107: EMPTY
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PPUSH
31114: CALL_OW 72
31118: ST_TO_ADDR
// end ;
31119: LD_VAR 0 2
31123: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31124: LD_INT 0
31126: PPUSH
31127: PPUSH
31128: PPUSH
31129: PPUSH
// tmp := [ ] ;
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: EMPTY
31136: ST_TO_ADDR
// list := [ ] ;
31137: LD_ADDR_VAR 0 5
31141: PUSH
31142: EMPTY
31143: ST_TO_ADDR
// for i = 16 to 25 do
31144: LD_ADDR_VAR 0 4
31148: PUSH
31149: DOUBLE
31150: LD_INT 16
31152: DEC
31153: ST_TO_ADDR
31154: LD_INT 25
31156: PUSH
31157: FOR_TO
31158: IFFALSE 31231
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31160: LD_ADDR_VAR 0 3
31164: PUSH
31165: LD_VAR 0 3
31169: PUSH
31170: LD_INT 22
31172: PUSH
31173: LD_VAR 0 1
31177: PPUSH
31178: CALL_OW 255
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 91
31189: PUSH
31190: LD_VAR 0 1
31194: PUSH
31195: LD_INT 6
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 30
31205: PUSH
31206: LD_VAR 0 4
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: PUSH
31220: EMPTY
31221: LIST
31222: PPUSH
31223: CALL_OW 69
31227: ADD
31228: ST_TO_ADDR
31229: GO 31157
31231: POP
31232: POP
// for i = 1 to tmp do
31233: LD_ADDR_VAR 0 4
31237: PUSH
31238: DOUBLE
31239: LD_INT 1
31241: DEC
31242: ST_TO_ADDR
31243: LD_VAR 0 3
31247: PUSH
31248: FOR_TO
31249: IFFALSE 31337
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31251: LD_ADDR_VAR 0 5
31255: PUSH
31256: LD_VAR 0 5
31260: PUSH
31261: LD_VAR 0 3
31265: PUSH
31266: LD_VAR 0 4
31270: ARRAY
31271: PPUSH
31272: CALL_OW 266
31276: PUSH
31277: LD_VAR 0 3
31281: PUSH
31282: LD_VAR 0 4
31286: ARRAY
31287: PPUSH
31288: CALL_OW 250
31292: PUSH
31293: LD_VAR 0 3
31297: PUSH
31298: LD_VAR 0 4
31302: ARRAY
31303: PPUSH
31304: CALL_OW 251
31308: PUSH
31309: LD_VAR 0 3
31313: PUSH
31314: LD_VAR 0 4
31318: ARRAY
31319: PPUSH
31320: CALL_OW 254
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: PUSH
31331: EMPTY
31332: LIST
31333: ADD
31334: ST_TO_ADDR
31335: GO 31248
31337: POP
31338: POP
// result := list ;
31339: LD_ADDR_VAR 0 2
31343: PUSH
31344: LD_VAR 0 5
31348: ST_TO_ADDR
// end ;
31349: LD_VAR 0 2
31353: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31354: LD_INT 0
31356: PPUSH
31357: PPUSH
31358: PPUSH
31359: PPUSH
31360: PPUSH
31361: PPUSH
31362: PPUSH
// if not factory then
31363: LD_VAR 0 1
31367: NOT
31368: IFFALSE 31372
// exit ;
31370: GO 31965
// if control = control_apeman then
31372: LD_VAR 0 4
31376: PUSH
31377: LD_INT 5
31379: EQUAL
31380: IFFALSE 31489
// begin tmp := UnitsInside ( factory ) ;
31382: LD_ADDR_VAR 0 8
31386: PUSH
31387: LD_VAR 0 1
31391: PPUSH
31392: CALL_OW 313
31396: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31397: LD_VAR 0 8
31401: PPUSH
31402: LD_INT 25
31404: PUSH
31405: LD_INT 12
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PPUSH
31412: CALL_OW 72
31416: NOT
31417: IFFALSE 31427
// control := control_manual ;
31419: LD_ADDR_VAR 0 4
31423: PUSH
31424: LD_INT 1
31426: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31427: LD_ADDR_VAR 0 8
31431: PUSH
31432: LD_VAR 0 1
31436: PPUSH
31437: CALL 31124 0 1
31441: ST_TO_ADDR
// if tmp then
31442: LD_VAR 0 8
31446: IFFALSE 31489
// begin for i in tmp do
31448: LD_ADDR_VAR 0 7
31452: PUSH
31453: LD_VAR 0 8
31457: PUSH
31458: FOR_IN
31459: IFFALSE 31487
// if i [ 1 ] = b_ext_radio then
31461: LD_VAR 0 7
31465: PUSH
31466: LD_INT 1
31468: ARRAY
31469: PUSH
31470: LD_INT 22
31472: EQUAL
31473: IFFALSE 31485
// begin control := control_remote ;
31475: LD_ADDR_VAR 0 4
31479: PUSH
31480: LD_INT 2
31482: ST_TO_ADDR
// break ;
31483: GO 31487
// end ;
31485: GO 31458
31487: POP
31488: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31489: LD_VAR 0 1
31493: PPUSH
31494: LD_VAR 0 2
31498: PPUSH
31499: LD_VAR 0 3
31503: PPUSH
31504: LD_VAR 0 4
31508: PPUSH
31509: LD_VAR 0 5
31513: PPUSH
31514: CALL_OW 448
31518: IFFALSE 31553
// begin result := [ chassis , engine , control , weapon ] ;
31520: LD_ADDR_VAR 0 6
31524: PUSH
31525: LD_VAR 0 2
31529: PUSH
31530: LD_VAR 0 3
31534: PUSH
31535: LD_VAR 0 4
31539: PUSH
31540: LD_VAR 0 5
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: ST_TO_ADDR
// exit ;
31551: GO 31965
// end ; _chassis := AvailableChassisList ( factory ) ;
31553: LD_ADDR_VAR 0 9
31557: PUSH
31558: LD_VAR 0 1
31562: PPUSH
31563: CALL_OW 475
31567: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31568: LD_ADDR_VAR 0 11
31572: PUSH
31573: LD_VAR 0 1
31577: PPUSH
31578: CALL_OW 476
31582: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31583: LD_ADDR_VAR 0 12
31587: PUSH
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 477
31597: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31598: LD_ADDR_VAR 0 10
31602: PUSH
31603: LD_VAR 0 1
31607: PPUSH
31608: CALL_OW 478
31612: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31613: LD_VAR 0 9
31617: NOT
31618: PUSH
31619: LD_VAR 0 11
31623: NOT
31624: OR
31625: PUSH
31626: LD_VAR 0 12
31630: NOT
31631: OR
31632: PUSH
31633: LD_VAR 0 10
31637: NOT
31638: OR
31639: IFFALSE 31674
// begin result := [ chassis , engine , control , weapon ] ;
31641: LD_ADDR_VAR 0 6
31645: PUSH
31646: LD_VAR 0 2
31650: PUSH
31651: LD_VAR 0 3
31655: PUSH
31656: LD_VAR 0 4
31660: PUSH
31661: LD_VAR 0 5
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: ST_TO_ADDR
// exit ;
31672: GO 31965
// end ; if not chassis in _chassis then
31674: LD_VAR 0 2
31678: PUSH
31679: LD_VAR 0 9
31683: IN
31684: NOT
31685: IFFALSE 31711
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31687: LD_ADDR_VAR 0 2
31691: PUSH
31692: LD_VAR 0 9
31696: PUSH
31697: LD_INT 1
31699: PPUSH
31700: LD_VAR 0 9
31704: PPUSH
31705: CALL_OW 12
31709: ARRAY
31710: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31711: LD_VAR 0 2
31715: PPUSH
31716: LD_VAR 0 3
31720: PPUSH
31721: CALL 31970 0 2
31725: NOT
31726: IFFALSE 31785
// repeat engine := _engine [ 1 ] ;
31728: LD_ADDR_VAR 0 3
31732: PUSH
31733: LD_VAR 0 11
31737: PUSH
31738: LD_INT 1
31740: ARRAY
31741: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31742: LD_ADDR_VAR 0 11
31746: PUSH
31747: LD_VAR 0 11
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 3
31759: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31760: LD_VAR 0 2
31764: PPUSH
31765: LD_VAR 0 3
31769: PPUSH
31770: CALL 31970 0 2
31774: PUSH
31775: LD_VAR 0 11
31779: PUSH
31780: EMPTY
31781: EQUAL
31782: OR
31783: IFFALSE 31728
// if not control in _control then
31785: LD_VAR 0 4
31789: PUSH
31790: LD_VAR 0 12
31794: IN
31795: NOT
31796: IFFALSE 31822
// control := _control [ rand ( 1 , _control ) ] ;
31798: LD_ADDR_VAR 0 4
31802: PUSH
31803: LD_VAR 0 12
31807: PUSH
31808: LD_INT 1
31810: PPUSH
31811: LD_VAR 0 12
31815: PPUSH
31816: CALL_OW 12
31820: ARRAY
31821: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31822: LD_VAR 0 2
31826: PPUSH
31827: LD_VAR 0 5
31831: PPUSH
31832: CALL 32190 0 2
31836: NOT
31837: IFFALSE 31896
// repeat weapon := _weapon [ 1 ] ;
31839: LD_ADDR_VAR 0 5
31843: PUSH
31844: LD_VAR 0 10
31848: PUSH
31849: LD_INT 1
31851: ARRAY
31852: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31853: LD_ADDR_VAR 0 10
31857: PUSH
31858: LD_VAR 0 10
31862: PPUSH
31863: LD_INT 1
31865: PPUSH
31866: CALL_OW 3
31870: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31871: LD_VAR 0 2
31875: PPUSH
31876: LD_VAR 0 5
31880: PPUSH
31881: CALL 32190 0 2
31885: PUSH
31886: LD_VAR 0 10
31890: PUSH
31891: EMPTY
31892: EQUAL
31893: OR
31894: IFFALSE 31839
// result := [ ] ;
31896: LD_ADDR_VAR 0 6
31900: PUSH
31901: EMPTY
31902: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31903: LD_VAR 0 1
31907: PPUSH
31908: LD_VAR 0 2
31912: PPUSH
31913: LD_VAR 0 3
31917: PPUSH
31918: LD_VAR 0 4
31922: PPUSH
31923: LD_VAR 0 5
31927: PPUSH
31928: CALL_OW 448
31932: IFFALSE 31965
// result := [ chassis , engine , control , weapon ] ;
31934: LD_ADDR_VAR 0 6
31938: PUSH
31939: LD_VAR 0 2
31943: PUSH
31944: LD_VAR 0 3
31948: PUSH
31949: LD_VAR 0 4
31953: PUSH
31954: LD_VAR 0 5
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: ST_TO_ADDR
// end ;
31965: LD_VAR 0 6
31969: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31970: LD_INT 0
31972: PPUSH
// if not chassis or not engine then
31973: LD_VAR 0 1
31977: NOT
31978: PUSH
31979: LD_VAR 0 2
31983: NOT
31984: OR
31985: IFFALSE 31989
// exit ;
31987: GO 32185
// case engine of engine_solar :
31989: LD_VAR 0 2
31993: PUSH
31994: LD_INT 2
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32040
32002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32003: LD_ADDR_VAR 0 3
32007: PUSH
32008: LD_INT 11
32010: PUSH
32011: LD_INT 12
32013: PUSH
32014: LD_INT 13
32016: PUSH
32017: LD_INT 14
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 2
32025: PUSH
32026: LD_INT 3
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
32038: GO 32169
32040: LD_INT 1
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32110
32048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32049: LD_ADDR_VAR 0 3
32053: PUSH
32054: LD_INT 11
32056: PUSH
32057: LD_INT 12
32059: PUSH
32060: LD_INT 13
32062: PUSH
32063: LD_INT 14
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: LD_INT 3
32074: PUSH
32075: LD_INT 4
32077: PUSH
32078: LD_INT 5
32080: PUSH
32081: LD_INT 21
32083: PUSH
32084: LD_INT 23
32086: PUSH
32087: LD_INT 22
32089: PUSH
32090: LD_INT 24
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: ST_TO_ADDR
32108: GO 32169
32110: LD_INT 3
32112: DOUBLE
32113: EQUAL
32114: IFTRUE 32118
32116: GO 32168
32118: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32119: LD_ADDR_VAR 0 3
32123: PUSH
32124: LD_INT 13
32126: PUSH
32127: LD_INT 14
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: LD_INT 4
32138: PUSH
32139: LD_INT 5
32141: PUSH
32142: LD_INT 21
32144: PUSH
32145: LD_INT 22
32147: PUSH
32148: LD_INT 23
32150: PUSH
32151: LD_INT 24
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: ST_TO_ADDR
32166: GO 32169
32168: POP
// result := ( chassis in result ) ;
32169: LD_ADDR_VAR 0 3
32173: PUSH
32174: LD_VAR 0 1
32178: PUSH
32179: LD_VAR 0 3
32183: IN
32184: ST_TO_ADDR
// end ;
32185: LD_VAR 0 3
32189: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32190: LD_INT 0
32192: PPUSH
// if not chassis or not weapon then
32193: LD_VAR 0 1
32197: NOT
32198: PUSH
32199: LD_VAR 0 2
32203: NOT
32204: OR
32205: IFFALSE 32209
// exit ;
32207: GO 33269
// case weapon of us_machine_gun :
32209: LD_VAR 0 2
32213: PUSH
32214: LD_INT 2
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32252
32222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: LD_INT 4
32239: PUSH
32240: LD_INT 5
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: ST_TO_ADDR
32250: GO 33253
32252: LD_INT 3
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32260
32258: GO 32290
32260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32261: LD_ADDR_VAR 0 3
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: LD_INT 4
32277: PUSH
32278: LD_INT 5
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: ST_TO_ADDR
32288: GO 33253
32290: LD_INT 11
32292: DOUBLE
32293: EQUAL
32294: IFTRUE 32298
32296: GO 32328
32298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32299: LD_ADDR_VAR 0 3
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: LD_INT 4
32315: PUSH
32316: LD_INT 5
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: ST_TO_ADDR
32326: GO 33253
32328: LD_INT 4
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32336
32334: GO 32362
32336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32337: LD_ADDR_VAR 0 3
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: LD_INT 5
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: ST_TO_ADDR
32360: GO 33253
32362: LD_INT 5
32364: DOUBLE
32365: EQUAL
32366: IFTRUE 32370
32368: GO 32396
32370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: LD_INT 3
32381: PUSH
32382: LD_INT 4
32384: PUSH
32385: LD_INT 5
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: ST_TO_ADDR
32394: GO 33253
32396: LD_INT 9
32398: DOUBLE
32399: EQUAL
32400: IFTRUE 32404
32402: GO 32430
32404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32405: LD_ADDR_VAR 0 3
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 4
32418: PUSH
32419: LD_INT 5
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: ST_TO_ADDR
32428: GO 33253
32430: LD_INT 7
32432: DOUBLE
32433: EQUAL
32434: IFTRUE 32438
32436: GO 32464
32438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32439: LD_ADDR_VAR 0 3
32443: PUSH
32444: LD_INT 2
32446: PUSH
32447: LD_INT 3
32449: PUSH
32450: LD_INT 4
32452: PUSH
32453: LD_INT 5
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: ST_TO_ADDR
32462: GO 33253
32464: LD_INT 12
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32472
32470: GO 32498
32472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32473: LD_ADDR_VAR 0 3
32477: PUSH
32478: LD_INT 2
32480: PUSH
32481: LD_INT 3
32483: PUSH
32484: LD_INT 4
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: ST_TO_ADDR
32496: GO 33253
32498: LD_INT 13
32500: DOUBLE
32501: EQUAL
32502: IFTRUE 32506
32504: GO 32532
32506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32507: LD_ADDR_VAR 0 3
32511: PUSH
32512: LD_INT 2
32514: PUSH
32515: LD_INT 3
32517: PUSH
32518: LD_INT 4
32520: PUSH
32521: LD_INT 5
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: ST_TO_ADDR
32530: GO 33253
32532: LD_INT 14
32534: DOUBLE
32535: EQUAL
32536: IFTRUE 32540
32538: GO 32558
32540: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32541: LD_ADDR_VAR 0 3
32545: PUSH
32546: LD_INT 4
32548: PUSH
32549: LD_INT 5
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: ST_TO_ADDR
32556: GO 33253
32558: LD_INT 6
32560: DOUBLE
32561: EQUAL
32562: IFTRUE 32566
32564: GO 32584
32566: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32567: LD_ADDR_VAR 0 3
32571: PUSH
32572: LD_INT 4
32574: PUSH
32575: LD_INT 5
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: ST_TO_ADDR
32582: GO 33253
32584: LD_INT 10
32586: DOUBLE
32587: EQUAL
32588: IFTRUE 32592
32590: GO 32610
32592: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32593: LD_ADDR_VAR 0 3
32597: PUSH
32598: LD_INT 4
32600: PUSH
32601: LD_INT 5
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: ST_TO_ADDR
32608: GO 33253
32610: LD_INT 22
32612: DOUBLE
32613: EQUAL
32614: IFTRUE 32618
32616: GO 32644
32618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32619: LD_ADDR_VAR 0 3
32623: PUSH
32624: LD_INT 11
32626: PUSH
32627: LD_INT 12
32629: PUSH
32630: LD_INT 13
32632: PUSH
32633: LD_INT 14
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: ST_TO_ADDR
32642: GO 33253
32644: LD_INT 23
32646: DOUBLE
32647: EQUAL
32648: IFTRUE 32652
32650: GO 32678
32652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32653: LD_ADDR_VAR 0 3
32657: PUSH
32658: LD_INT 11
32660: PUSH
32661: LD_INT 12
32663: PUSH
32664: LD_INT 13
32666: PUSH
32667: LD_INT 14
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: ST_TO_ADDR
32676: GO 33253
32678: LD_INT 24
32680: DOUBLE
32681: EQUAL
32682: IFTRUE 32686
32684: GO 32712
32686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32687: LD_ADDR_VAR 0 3
32691: PUSH
32692: LD_INT 11
32694: PUSH
32695: LD_INT 12
32697: PUSH
32698: LD_INT 13
32700: PUSH
32701: LD_INT 14
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: ST_TO_ADDR
32710: GO 33253
32712: LD_INT 30
32714: DOUBLE
32715: EQUAL
32716: IFTRUE 32720
32718: GO 32746
32720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32721: LD_ADDR_VAR 0 3
32725: PUSH
32726: LD_INT 11
32728: PUSH
32729: LD_INT 12
32731: PUSH
32732: LD_INT 13
32734: PUSH
32735: LD_INT 14
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: ST_TO_ADDR
32744: GO 33253
32746: LD_INT 25
32748: DOUBLE
32749: EQUAL
32750: IFTRUE 32754
32752: GO 32772
32754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32755: LD_ADDR_VAR 0 3
32759: PUSH
32760: LD_INT 13
32762: PUSH
32763: LD_INT 14
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: ST_TO_ADDR
32770: GO 33253
32772: LD_INT 27
32774: DOUBLE
32775: EQUAL
32776: IFTRUE 32780
32778: GO 32798
32780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32781: LD_ADDR_VAR 0 3
32785: PUSH
32786: LD_INT 13
32788: PUSH
32789: LD_INT 14
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: ST_TO_ADDR
32796: GO 33253
32798: LD_INT 92
32800: DOUBLE
32801: EQUAL
32802: IFTRUE 32806
32804: GO 32832
32806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32807: LD_ADDR_VAR 0 3
32811: PUSH
32812: LD_INT 11
32814: PUSH
32815: LD_INT 12
32817: PUSH
32818: LD_INT 13
32820: PUSH
32821: LD_INT 14
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: ST_TO_ADDR
32830: GO 33253
32832: LD_INT 28
32834: DOUBLE
32835: EQUAL
32836: IFTRUE 32840
32838: GO 32858
32840: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32841: LD_ADDR_VAR 0 3
32845: PUSH
32846: LD_INT 13
32848: PUSH
32849: LD_INT 14
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: ST_TO_ADDR
32856: GO 33253
32858: LD_INT 29
32860: DOUBLE
32861: EQUAL
32862: IFTRUE 32866
32864: GO 32884
32866: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32867: LD_ADDR_VAR 0 3
32871: PUSH
32872: LD_INT 13
32874: PUSH
32875: LD_INT 14
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: ST_TO_ADDR
32882: GO 33253
32884: LD_INT 31
32886: DOUBLE
32887: EQUAL
32888: IFTRUE 32892
32890: GO 32910
32892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32893: LD_ADDR_VAR 0 3
32897: PUSH
32898: LD_INT 13
32900: PUSH
32901: LD_INT 14
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: ST_TO_ADDR
32908: GO 33253
32910: LD_INT 26
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32918
32916: GO 32936
32918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32919: LD_ADDR_VAR 0 3
32923: PUSH
32924: LD_INT 13
32926: PUSH
32927: LD_INT 14
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: ST_TO_ADDR
32934: GO 33253
32936: LD_INT 42
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 32970
32944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32945: LD_ADDR_VAR 0 3
32949: PUSH
32950: LD_INT 21
32952: PUSH
32953: LD_INT 22
32955: PUSH
32956: LD_INT 23
32958: PUSH
32959: LD_INT 24
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
32968: GO 33253
32970: LD_INT 43
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32978
32976: GO 33004
32978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32979: LD_ADDR_VAR 0 3
32983: PUSH
32984: LD_INT 21
32986: PUSH
32987: LD_INT 22
32989: PUSH
32990: LD_INT 23
32992: PUSH
32993: LD_INT 24
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: ST_TO_ADDR
33002: GO 33253
33004: LD_INT 44
33006: DOUBLE
33007: EQUAL
33008: IFTRUE 33012
33010: GO 33038
33012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33013: LD_ADDR_VAR 0 3
33017: PUSH
33018: LD_INT 21
33020: PUSH
33021: LD_INT 22
33023: PUSH
33024: LD_INT 23
33026: PUSH
33027: LD_INT 24
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: ST_TO_ADDR
33036: GO 33253
33038: LD_INT 45
33040: DOUBLE
33041: EQUAL
33042: IFTRUE 33046
33044: GO 33072
33046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33047: LD_ADDR_VAR 0 3
33051: PUSH
33052: LD_INT 21
33054: PUSH
33055: LD_INT 22
33057: PUSH
33058: LD_INT 23
33060: PUSH
33061: LD_INT 24
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: ST_TO_ADDR
33070: GO 33253
33072: LD_INT 49
33074: DOUBLE
33075: EQUAL
33076: IFTRUE 33080
33078: GO 33106
33080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33081: LD_ADDR_VAR 0 3
33085: PUSH
33086: LD_INT 21
33088: PUSH
33089: LD_INT 22
33091: PUSH
33092: LD_INT 23
33094: PUSH
33095: LD_INT 24
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: ST_TO_ADDR
33104: GO 33253
33106: LD_INT 51
33108: DOUBLE
33109: EQUAL
33110: IFTRUE 33114
33112: GO 33140
33114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33115: LD_ADDR_VAR 0 3
33119: PUSH
33120: LD_INT 21
33122: PUSH
33123: LD_INT 22
33125: PUSH
33126: LD_INT 23
33128: PUSH
33129: LD_INT 24
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: ST_TO_ADDR
33138: GO 33253
33140: LD_INT 52
33142: DOUBLE
33143: EQUAL
33144: IFTRUE 33148
33146: GO 33174
33148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33149: LD_ADDR_VAR 0 3
33153: PUSH
33154: LD_INT 21
33156: PUSH
33157: LD_INT 22
33159: PUSH
33160: LD_INT 23
33162: PUSH
33163: LD_INT 24
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: ST_TO_ADDR
33172: GO 33253
33174: LD_INT 53
33176: DOUBLE
33177: EQUAL
33178: IFTRUE 33182
33180: GO 33200
33182: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33183: LD_ADDR_VAR 0 3
33187: PUSH
33188: LD_INT 23
33190: PUSH
33191: LD_INT 24
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: ST_TO_ADDR
33198: GO 33253
33200: LD_INT 46
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33226
33208: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33209: LD_ADDR_VAR 0 3
33213: PUSH
33214: LD_INT 23
33216: PUSH
33217: LD_INT 24
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: ST_TO_ADDR
33224: GO 33253
33226: LD_INT 47
33228: DOUBLE
33229: EQUAL
33230: IFTRUE 33234
33232: GO 33252
33234: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33235: LD_ADDR_VAR 0 3
33239: PUSH
33240: LD_INT 23
33242: PUSH
33243: LD_INT 24
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: ST_TO_ADDR
33250: GO 33253
33252: POP
// result := ( chassis in result ) ;
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_VAR 0 1
33262: PUSH
33263: LD_VAR 0 3
33267: IN
33268: ST_TO_ADDR
// end ;
33269: LD_VAR 0 3
33273: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33274: LD_INT 0
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
// result := array ;
33283: LD_ADDR_VAR 0 5
33287: PUSH
33288: LD_VAR 0 1
33292: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33293: LD_VAR 0 1
33297: NOT
33298: PUSH
33299: LD_VAR 0 2
33303: NOT
33304: OR
33305: PUSH
33306: LD_VAR 0 3
33310: NOT
33311: OR
33312: PUSH
33313: LD_VAR 0 2
33317: PUSH
33318: LD_VAR 0 1
33322: GREATER
33323: OR
33324: PUSH
33325: LD_VAR 0 3
33329: PUSH
33330: LD_VAR 0 1
33334: GREATER
33335: OR
33336: IFFALSE 33340
// exit ;
33338: GO 33636
// if direction then
33340: LD_VAR 0 4
33344: IFFALSE 33408
// begin d := 1 ;
33346: LD_ADDR_VAR 0 9
33350: PUSH
33351: LD_INT 1
33353: ST_TO_ADDR
// if i_from > i_to then
33354: LD_VAR 0 2
33358: PUSH
33359: LD_VAR 0 3
33363: GREATER
33364: IFFALSE 33390
// length := ( array - i_from ) + i_to else
33366: LD_ADDR_VAR 0 11
33370: PUSH
33371: LD_VAR 0 1
33375: PUSH
33376: LD_VAR 0 2
33380: MINUS
33381: PUSH
33382: LD_VAR 0 3
33386: PLUS
33387: ST_TO_ADDR
33388: GO 33406
// length := i_to - i_from ;
33390: LD_ADDR_VAR 0 11
33394: PUSH
33395: LD_VAR 0 3
33399: PUSH
33400: LD_VAR 0 2
33404: MINUS
33405: ST_TO_ADDR
// end else
33406: GO 33469
// begin d := - 1 ;
33408: LD_ADDR_VAR 0 9
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: ST_TO_ADDR
// if i_from > i_to then
33417: LD_VAR 0 2
33421: PUSH
33422: LD_VAR 0 3
33426: GREATER
33427: IFFALSE 33447
// length := i_from - i_to else
33429: LD_ADDR_VAR 0 11
33433: PUSH
33434: LD_VAR 0 2
33438: PUSH
33439: LD_VAR 0 3
33443: MINUS
33444: ST_TO_ADDR
33445: GO 33469
// length := ( array - i_to ) + i_from ;
33447: LD_ADDR_VAR 0 11
33451: PUSH
33452: LD_VAR 0 1
33456: PUSH
33457: LD_VAR 0 3
33461: MINUS
33462: PUSH
33463: LD_VAR 0 2
33467: PLUS
33468: ST_TO_ADDR
// end ; if not length then
33469: LD_VAR 0 11
33473: NOT
33474: IFFALSE 33478
// exit ;
33476: GO 33636
// tmp := array ;
33478: LD_ADDR_VAR 0 10
33482: PUSH
33483: LD_VAR 0 1
33487: ST_TO_ADDR
// for i = 1 to length do
33488: LD_ADDR_VAR 0 6
33492: PUSH
33493: DOUBLE
33494: LD_INT 1
33496: DEC
33497: ST_TO_ADDR
33498: LD_VAR 0 11
33502: PUSH
33503: FOR_TO
33504: IFFALSE 33624
// begin for j = 1 to array do
33506: LD_ADDR_VAR 0 7
33510: PUSH
33511: DOUBLE
33512: LD_INT 1
33514: DEC
33515: ST_TO_ADDR
33516: LD_VAR 0 1
33520: PUSH
33521: FOR_TO
33522: IFFALSE 33610
// begin k := j + d ;
33524: LD_ADDR_VAR 0 8
33528: PUSH
33529: LD_VAR 0 7
33533: PUSH
33534: LD_VAR 0 9
33538: PLUS
33539: ST_TO_ADDR
// if k > array then
33540: LD_VAR 0 8
33544: PUSH
33545: LD_VAR 0 1
33549: GREATER
33550: IFFALSE 33560
// k := 1 ;
33552: LD_ADDR_VAR 0 8
33556: PUSH
33557: LD_INT 1
33559: ST_TO_ADDR
// if not k then
33560: LD_VAR 0 8
33564: NOT
33565: IFFALSE 33577
// k := array ;
33567: LD_ADDR_VAR 0 8
33571: PUSH
33572: LD_VAR 0 1
33576: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33577: LD_ADDR_VAR 0 10
33581: PUSH
33582: LD_VAR 0 10
33586: PPUSH
33587: LD_VAR 0 8
33591: PPUSH
33592: LD_VAR 0 1
33596: PUSH
33597: LD_VAR 0 7
33601: ARRAY
33602: PPUSH
33603: CALL_OW 1
33607: ST_TO_ADDR
// end ;
33608: GO 33521
33610: POP
33611: POP
// array := tmp ;
33612: LD_ADDR_VAR 0 1
33616: PUSH
33617: LD_VAR 0 10
33621: ST_TO_ADDR
// end ;
33622: GO 33503
33624: POP
33625: POP
// result := array ;
33626: LD_ADDR_VAR 0 5
33630: PUSH
33631: LD_VAR 0 1
33635: ST_TO_ADDR
// end ;
33636: LD_VAR 0 5
33640: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33641: LD_INT 0
33643: PPUSH
33644: PPUSH
// result := 0 ;
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 0
33652: ST_TO_ADDR
// if not array or not value in array then
33653: LD_VAR 0 1
33657: NOT
33658: PUSH
33659: LD_VAR 0 2
33663: PUSH
33664: LD_VAR 0 1
33668: IN
33669: NOT
33670: OR
33671: IFFALSE 33675
// exit ;
33673: GO 33729
// for i = 1 to array do
33675: LD_ADDR_VAR 0 4
33679: PUSH
33680: DOUBLE
33681: LD_INT 1
33683: DEC
33684: ST_TO_ADDR
33685: LD_VAR 0 1
33689: PUSH
33690: FOR_TO
33691: IFFALSE 33727
// if value = array [ i ] then
33693: LD_VAR 0 2
33697: PUSH
33698: LD_VAR 0 1
33702: PUSH
33703: LD_VAR 0 4
33707: ARRAY
33708: EQUAL
33709: IFFALSE 33725
// begin result := i ;
33711: LD_ADDR_VAR 0 3
33715: PUSH
33716: LD_VAR 0 4
33720: ST_TO_ADDR
// exit ;
33721: POP
33722: POP
33723: GO 33729
// end ;
33725: GO 33690
33727: POP
33728: POP
// end ;
33729: LD_VAR 0 3
33733: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33734: LD_INT 0
33736: PPUSH
// vc_chassis := chassis ;
33737: LD_ADDR_OWVAR 37
33741: PUSH
33742: LD_VAR 0 1
33746: ST_TO_ADDR
// vc_engine := engine ;
33747: LD_ADDR_OWVAR 39
33751: PUSH
33752: LD_VAR 0 2
33756: ST_TO_ADDR
// vc_control := control ;
33757: LD_ADDR_OWVAR 38
33761: PUSH
33762: LD_VAR 0 3
33766: ST_TO_ADDR
// vc_weapon := weapon ;
33767: LD_ADDR_OWVAR 40
33771: PUSH
33772: LD_VAR 0 4
33776: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33777: LD_ADDR_OWVAR 41
33781: PUSH
33782: LD_VAR 0 5
33786: ST_TO_ADDR
// end ;
33787: LD_VAR 0 6
33791: RET
// export function WantPlant ( unit ) ; var task ; begin
33792: LD_INT 0
33794: PPUSH
33795: PPUSH
// result := false ;
33796: LD_ADDR_VAR 0 2
33800: PUSH
33801: LD_INT 0
33803: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33804: LD_ADDR_VAR 0 3
33808: PUSH
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 437
33818: ST_TO_ADDR
// if task then
33819: LD_VAR 0 3
33823: IFFALSE 33851
// if task [ 1 ] [ 1 ] = p then
33825: LD_VAR 0 3
33829: PUSH
33830: LD_INT 1
33832: ARRAY
33833: PUSH
33834: LD_INT 1
33836: ARRAY
33837: PUSH
33838: LD_STRING p
33840: EQUAL
33841: IFFALSE 33851
// result := true ;
33843: LD_ADDR_VAR 0 2
33847: PUSH
33848: LD_INT 1
33850: ST_TO_ADDR
// end ;
33851: LD_VAR 0 2
33855: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33856: LD_INT 0
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
// if pos < 1 then
33862: LD_VAR 0 2
33866: PUSH
33867: LD_INT 1
33869: LESS
33870: IFFALSE 33874
// exit ;
33872: GO 34177
// if pos = 1 then
33874: LD_VAR 0 2
33878: PUSH
33879: LD_INT 1
33881: EQUAL
33882: IFFALSE 33915
// result := Replace ( arr , pos [ 1 ] , value ) else
33884: LD_ADDR_VAR 0 4
33888: PUSH
33889: LD_VAR 0 1
33893: PPUSH
33894: LD_VAR 0 2
33898: PUSH
33899: LD_INT 1
33901: ARRAY
33902: PPUSH
33903: LD_VAR 0 3
33907: PPUSH
33908: CALL_OW 1
33912: ST_TO_ADDR
33913: GO 34177
// begin tmp := arr ;
33915: LD_ADDR_VAR 0 6
33919: PUSH
33920: LD_VAR 0 1
33924: ST_TO_ADDR
// s_arr := [ tmp ] ;
33925: LD_ADDR_VAR 0 7
33929: PUSH
33930: LD_VAR 0 6
33934: PUSH
33935: EMPTY
33936: LIST
33937: ST_TO_ADDR
// for i = 1 to pos - 1 do
33938: LD_ADDR_VAR 0 5
33942: PUSH
33943: DOUBLE
33944: LD_INT 1
33946: DEC
33947: ST_TO_ADDR
33948: LD_VAR 0 2
33952: PUSH
33953: LD_INT 1
33955: MINUS
33956: PUSH
33957: FOR_TO
33958: IFFALSE 34003
// begin tmp := tmp [ pos [ i ] ] ;
33960: LD_ADDR_VAR 0 6
33964: PUSH
33965: LD_VAR 0 6
33969: PUSH
33970: LD_VAR 0 2
33974: PUSH
33975: LD_VAR 0 5
33979: ARRAY
33980: ARRAY
33981: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33982: LD_ADDR_VAR 0 7
33986: PUSH
33987: LD_VAR 0 7
33991: PUSH
33992: LD_VAR 0 6
33996: PUSH
33997: EMPTY
33998: LIST
33999: ADD
34000: ST_TO_ADDR
// end ;
34001: GO 33957
34003: POP
34004: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34005: LD_ADDR_VAR 0 6
34009: PUSH
34010: LD_VAR 0 6
34014: PPUSH
34015: LD_VAR 0 2
34019: PUSH
34020: LD_VAR 0 2
34024: ARRAY
34025: PPUSH
34026: LD_VAR 0 3
34030: PPUSH
34031: CALL_OW 1
34035: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34036: LD_ADDR_VAR 0 7
34040: PUSH
34041: LD_VAR 0 7
34045: PPUSH
34046: LD_VAR 0 7
34050: PPUSH
34051: LD_VAR 0 6
34055: PPUSH
34056: CALL_OW 1
34060: ST_TO_ADDR
// for i = s_arr downto 2 do
34061: LD_ADDR_VAR 0 5
34065: PUSH
34066: DOUBLE
34067: LD_VAR 0 7
34071: INC
34072: ST_TO_ADDR
34073: LD_INT 2
34075: PUSH
34076: FOR_DOWNTO
34077: IFFALSE 34161
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34079: LD_ADDR_VAR 0 6
34083: PUSH
34084: LD_VAR 0 7
34088: PUSH
34089: LD_VAR 0 5
34093: PUSH
34094: LD_INT 1
34096: MINUS
34097: ARRAY
34098: PPUSH
34099: LD_VAR 0 2
34103: PUSH
34104: LD_VAR 0 5
34108: PUSH
34109: LD_INT 1
34111: MINUS
34112: ARRAY
34113: PPUSH
34114: LD_VAR 0 7
34118: PUSH
34119: LD_VAR 0 5
34123: ARRAY
34124: PPUSH
34125: CALL_OW 1
34129: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34130: LD_ADDR_VAR 0 7
34134: PUSH
34135: LD_VAR 0 7
34139: PPUSH
34140: LD_VAR 0 5
34144: PUSH
34145: LD_INT 1
34147: MINUS
34148: PPUSH
34149: LD_VAR 0 6
34153: PPUSH
34154: CALL_OW 1
34158: ST_TO_ADDR
// end ;
34159: GO 34076
34161: POP
34162: POP
// result := s_arr [ 1 ] ;
34163: LD_ADDR_VAR 0 4
34167: PUSH
34168: LD_VAR 0 7
34172: PUSH
34173: LD_INT 1
34175: ARRAY
34176: ST_TO_ADDR
// end ; end ;
34177: LD_VAR 0 4
34181: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34182: LD_INT 0
34184: PPUSH
34185: PPUSH
// if not list then
34186: LD_VAR 0 1
34190: NOT
34191: IFFALSE 34195
// exit ;
34193: GO 34286
// i := list [ pos1 ] ;
34195: LD_ADDR_VAR 0 5
34199: PUSH
34200: LD_VAR 0 1
34204: PUSH
34205: LD_VAR 0 2
34209: ARRAY
34210: ST_TO_ADDR
// if not i then
34211: LD_VAR 0 5
34215: NOT
34216: IFFALSE 34220
// exit ;
34218: GO 34286
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34220: LD_ADDR_VAR 0 1
34224: PUSH
34225: LD_VAR 0 1
34229: PPUSH
34230: LD_VAR 0 2
34234: PPUSH
34235: LD_VAR 0 1
34239: PUSH
34240: LD_VAR 0 3
34244: ARRAY
34245: PPUSH
34246: CALL_OW 1
34250: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34251: LD_ADDR_VAR 0 1
34255: PUSH
34256: LD_VAR 0 1
34260: PPUSH
34261: LD_VAR 0 3
34265: PPUSH
34266: LD_VAR 0 5
34270: PPUSH
34271: CALL_OW 1
34275: ST_TO_ADDR
// result := list ;
34276: LD_ADDR_VAR 0 4
34280: PUSH
34281: LD_VAR 0 1
34285: ST_TO_ADDR
// end ;
34286: LD_VAR 0 4
34290: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34291: LD_INT 0
34293: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34294: LD_ADDR_VAR 0 5
34298: PUSH
34299: LD_VAR 0 1
34303: PPUSH
34304: CALL_OW 250
34308: PPUSH
34309: LD_VAR 0 1
34313: PPUSH
34314: CALL_OW 251
34318: PPUSH
34319: LD_VAR 0 2
34323: PPUSH
34324: LD_VAR 0 3
34328: PPUSH
34329: LD_VAR 0 4
34333: PPUSH
34334: CALL 34712 0 5
34338: ST_TO_ADDR
// end ;
34339: LD_VAR 0 5
34343: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34344: LD_INT 0
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
// if not list or not unit then
34350: LD_VAR 0 2
34354: NOT
34355: PUSH
34356: LD_VAR 0 1
34360: NOT
34361: OR
34362: IFFALSE 34366
// exit ;
34364: GO 34707
// result := [ ] ;
34366: LD_ADDR_VAR 0 5
34370: PUSH
34371: EMPTY
34372: ST_TO_ADDR
// for i in list do
34373: LD_ADDR_VAR 0 6
34377: PUSH
34378: LD_VAR 0 2
34382: PUSH
34383: FOR_IN
34384: IFFALSE 34602
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34386: LD_ADDR_VAR 0 8
34390: PUSH
34391: LD_VAR 0 1
34395: PPUSH
34396: LD_VAR 0 6
34400: PUSH
34401: LD_INT 1
34403: ARRAY
34404: PPUSH
34405: LD_VAR 0 6
34409: PUSH
34410: LD_INT 2
34412: ARRAY
34413: PPUSH
34414: CALL_OW 297
34418: ST_TO_ADDR
// if not Count ( result ) then
34419: LD_VAR 0 5
34423: PPUSH
34424: CALL 30996 0 1
34428: NOT
34429: IFFALSE 34462
// begin result := Join ( result , [ i , tmp ] ) ;
34431: LD_ADDR_VAR 0 5
34435: PUSH
34436: LD_VAR 0 5
34440: PPUSH
34441: LD_VAR 0 6
34445: PUSH
34446: LD_VAR 0 8
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL 66596 0 2
34459: ST_TO_ADDR
// continue ;
34460: GO 34383
// end ; if result [ result ] [ 2 ] <= tmp then
34462: LD_VAR 0 5
34466: PUSH
34467: LD_VAR 0 5
34471: ARRAY
34472: PUSH
34473: LD_INT 2
34475: ARRAY
34476: PUSH
34477: LD_VAR 0 8
34481: LESSEQUAL
34482: IFFALSE 34515
// result := Join ( result , [ i , tmp ] ) else
34484: LD_ADDR_VAR 0 5
34488: PUSH
34489: LD_VAR 0 5
34493: PPUSH
34494: LD_VAR 0 6
34498: PUSH
34499: LD_VAR 0 8
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PPUSH
34508: CALL 66596 0 2
34512: ST_TO_ADDR
34513: GO 34600
// begin for j := 1 to Count ( result ) do
34515: LD_ADDR_VAR 0 7
34519: PUSH
34520: DOUBLE
34521: LD_INT 1
34523: DEC
34524: ST_TO_ADDR
34525: LD_VAR 0 5
34529: PPUSH
34530: CALL 30996 0 1
34534: PUSH
34535: FOR_TO
34536: IFFALSE 34598
// begin if tmp < result [ j ] [ 2 ] then
34538: LD_VAR 0 8
34542: PUSH
34543: LD_VAR 0 5
34547: PUSH
34548: LD_VAR 0 7
34552: ARRAY
34553: PUSH
34554: LD_INT 2
34556: ARRAY
34557: LESS
34558: IFFALSE 34596
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34560: LD_ADDR_VAR 0 5
34564: PUSH
34565: LD_VAR 0 5
34569: PPUSH
34570: LD_VAR 0 7
34574: PPUSH
34575: LD_VAR 0 6
34579: PUSH
34580: LD_VAR 0 8
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PPUSH
34589: CALL_OW 2
34593: ST_TO_ADDR
// break ;
34594: GO 34598
// end ; end ;
34596: GO 34535
34598: POP
34599: POP
// end ; end ;
34600: GO 34383
34602: POP
34603: POP
// if result and not asc then
34604: LD_VAR 0 5
34608: PUSH
34609: LD_VAR 0 3
34613: NOT
34614: AND
34615: IFFALSE 34632
// result := ReverseArray ( result ) ;
34617: LD_ADDR_VAR 0 5
34621: PUSH
34622: LD_VAR 0 5
34626: PPUSH
34627: CALL 61872 0 1
34631: ST_TO_ADDR
// tmp := [ ] ;
34632: LD_ADDR_VAR 0 8
34636: PUSH
34637: EMPTY
34638: ST_TO_ADDR
// if mode then
34639: LD_VAR 0 4
34643: IFFALSE 34707
// begin for i := 1 to result do
34645: LD_ADDR_VAR 0 6
34649: PUSH
34650: DOUBLE
34651: LD_INT 1
34653: DEC
34654: ST_TO_ADDR
34655: LD_VAR 0 5
34659: PUSH
34660: FOR_TO
34661: IFFALSE 34695
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34663: LD_ADDR_VAR 0 8
34667: PUSH
34668: LD_VAR 0 8
34672: PPUSH
34673: LD_VAR 0 5
34677: PUSH
34678: LD_VAR 0 6
34682: ARRAY
34683: PUSH
34684: LD_INT 1
34686: ARRAY
34687: PPUSH
34688: CALL 66596 0 2
34692: ST_TO_ADDR
34693: GO 34660
34695: POP
34696: POP
// result := tmp ;
34697: LD_ADDR_VAR 0 5
34701: PUSH
34702: LD_VAR 0 8
34706: ST_TO_ADDR
// end ; end ;
34707: LD_VAR 0 5
34711: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34712: LD_INT 0
34714: PPUSH
34715: PPUSH
34716: PPUSH
34717: PPUSH
// if not list then
34718: LD_VAR 0 3
34722: NOT
34723: IFFALSE 34727
// exit ;
34725: GO 35115
// result := [ ] ;
34727: LD_ADDR_VAR 0 6
34731: PUSH
34732: EMPTY
34733: ST_TO_ADDR
// for i in list do
34734: LD_ADDR_VAR 0 7
34738: PUSH
34739: LD_VAR 0 3
34743: PUSH
34744: FOR_IN
34745: IFFALSE 34947
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34747: LD_ADDR_VAR 0 9
34751: PUSH
34752: LD_VAR 0 7
34756: PPUSH
34757: LD_VAR 0 1
34761: PPUSH
34762: LD_VAR 0 2
34766: PPUSH
34767: CALL_OW 297
34771: ST_TO_ADDR
// if not result then
34772: LD_VAR 0 6
34776: NOT
34777: IFFALSE 34803
// result := [ [ i , tmp ] ] else
34779: LD_ADDR_VAR 0 6
34783: PUSH
34784: LD_VAR 0 7
34788: PUSH
34789: LD_VAR 0 9
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: EMPTY
34799: LIST
34800: ST_TO_ADDR
34801: GO 34945
// begin if result [ result ] [ 2 ] < tmp then
34803: LD_VAR 0 6
34807: PUSH
34808: LD_VAR 0 6
34812: ARRAY
34813: PUSH
34814: LD_INT 2
34816: ARRAY
34817: PUSH
34818: LD_VAR 0 9
34822: LESS
34823: IFFALSE 34865
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34825: LD_ADDR_VAR 0 6
34829: PUSH
34830: LD_VAR 0 6
34834: PPUSH
34835: LD_VAR 0 6
34839: PUSH
34840: LD_INT 1
34842: PLUS
34843: PPUSH
34844: LD_VAR 0 7
34848: PUSH
34849: LD_VAR 0 9
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PPUSH
34858: CALL_OW 2
34862: ST_TO_ADDR
34863: GO 34945
// for j = 1 to result do
34865: LD_ADDR_VAR 0 8
34869: PUSH
34870: DOUBLE
34871: LD_INT 1
34873: DEC
34874: ST_TO_ADDR
34875: LD_VAR 0 6
34879: PUSH
34880: FOR_TO
34881: IFFALSE 34943
// begin if tmp < result [ j ] [ 2 ] then
34883: LD_VAR 0 9
34887: PUSH
34888: LD_VAR 0 6
34892: PUSH
34893: LD_VAR 0 8
34897: ARRAY
34898: PUSH
34899: LD_INT 2
34901: ARRAY
34902: LESS
34903: IFFALSE 34941
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34905: LD_ADDR_VAR 0 6
34909: PUSH
34910: LD_VAR 0 6
34914: PPUSH
34915: LD_VAR 0 8
34919: PPUSH
34920: LD_VAR 0 7
34924: PUSH
34925: LD_VAR 0 9
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PPUSH
34934: CALL_OW 2
34938: ST_TO_ADDR
// break ;
34939: GO 34943
// end ; end ;
34941: GO 34880
34943: POP
34944: POP
// end ; end ;
34945: GO 34744
34947: POP
34948: POP
// if result and not asc then
34949: LD_VAR 0 6
34953: PUSH
34954: LD_VAR 0 4
34958: NOT
34959: AND
34960: IFFALSE 35035
// begin tmp := result ;
34962: LD_ADDR_VAR 0 9
34966: PUSH
34967: LD_VAR 0 6
34971: ST_TO_ADDR
// for i = tmp downto 1 do
34972: LD_ADDR_VAR 0 7
34976: PUSH
34977: DOUBLE
34978: LD_VAR 0 9
34982: INC
34983: ST_TO_ADDR
34984: LD_INT 1
34986: PUSH
34987: FOR_DOWNTO
34988: IFFALSE 35033
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34990: LD_ADDR_VAR 0 6
34994: PUSH
34995: LD_VAR 0 6
34999: PPUSH
35000: LD_VAR 0 9
35004: PUSH
35005: LD_VAR 0 7
35009: MINUS
35010: PUSH
35011: LD_INT 1
35013: PLUS
35014: PPUSH
35015: LD_VAR 0 9
35019: PUSH
35020: LD_VAR 0 7
35024: ARRAY
35025: PPUSH
35026: CALL_OW 1
35030: ST_TO_ADDR
35031: GO 34987
35033: POP
35034: POP
// end ; tmp := [ ] ;
35035: LD_ADDR_VAR 0 9
35039: PUSH
35040: EMPTY
35041: ST_TO_ADDR
// if mode then
35042: LD_VAR 0 5
35046: IFFALSE 35115
// begin for i = 1 to result do
35048: LD_ADDR_VAR 0 7
35052: PUSH
35053: DOUBLE
35054: LD_INT 1
35056: DEC
35057: ST_TO_ADDR
35058: LD_VAR 0 6
35062: PUSH
35063: FOR_TO
35064: IFFALSE 35103
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35066: LD_ADDR_VAR 0 9
35070: PUSH
35071: LD_VAR 0 9
35075: PPUSH
35076: LD_VAR 0 7
35080: PPUSH
35081: LD_VAR 0 6
35085: PUSH
35086: LD_VAR 0 7
35090: ARRAY
35091: PUSH
35092: LD_INT 1
35094: ARRAY
35095: PPUSH
35096: CALL_OW 1
35100: ST_TO_ADDR
35101: GO 35063
35103: POP
35104: POP
// result := tmp ;
35105: LD_ADDR_VAR 0 6
35109: PUSH
35110: LD_VAR 0 9
35114: ST_TO_ADDR
// end ; end ;
35115: LD_VAR 0 6
35119: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35120: LD_INT 0
35122: PPUSH
35123: PPUSH
35124: PPUSH
35125: PPUSH
35126: PPUSH
35127: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35128: LD_ADDR_VAR 0 5
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: EMPTY
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: ST_TO_ADDR
// if not x or not y then
35150: LD_VAR 0 2
35154: NOT
35155: PUSH
35156: LD_VAR 0 3
35160: NOT
35161: OR
35162: IFFALSE 35166
// exit ;
35164: GO 36816
// if not range then
35166: LD_VAR 0 4
35170: NOT
35171: IFFALSE 35181
// range := 10 ;
35173: LD_ADDR_VAR 0 4
35177: PUSH
35178: LD_INT 10
35180: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35181: LD_ADDR_VAR 0 8
35185: PUSH
35186: LD_INT 81
35188: PUSH
35189: LD_VAR 0 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 92
35200: PUSH
35201: LD_VAR 0 2
35205: PUSH
35206: LD_VAR 0 3
35210: PUSH
35211: LD_VAR 0 4
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 3
35224: PUSH
35225: LD_INT 21
35227: PUSH
35228: LD_INT 3
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: PPUSH
35244: CALL_OW 69
35248: ST_TO_ADDR
// if not tmp then
35249: LD_VAR 0 8
35253: NOT
35254: IFFALSE 35258
// exit ;
35256: GO 36816
// for i in tmp do
35258: LD_ADDR_VAR 0 6
35262: PUSH
35263: LD_VAR 0 8
35267: PUSH
35268: FOR_IN
35269: IFFALSE 36791
// begin points := [ 0 , 0 , 0 ] ;
35271: LD_ADDR_VAR 0 9
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: LIST
35289: ST_TO_ADDR
// bpoints := 1 ;
35290: LD_ADDR_VAR 0 10
35294: PUSH
35295: LD_INT 1
35297: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35298: LD_VAR 0 6
35302: PPUSH
35303: CALL_OW 247
35307: PUSH
35308: LD_INT 1
35310: DOUBLE
35311: EQUAL
35312: IFTRUE 35316
35314: GO 35894
35316: POP
// begin if GetClass ( i ) = 1 then
35317: LD_VAR 0 6
35321: PPUSH
35322: CALL_OW 257
35326: PUSH
35327: LD_INT 1
35329: EQUAL
35330: IFFALSE 35351
// points := [ 10 , 5 , 3 ] ;
35332: LD_ADDR_VAR 0 9
35336: PUSH
35337: LD_INT 10
35339: PUSH
35340: LD_INT 5
35342: PUSH
35343: LD_INT 3
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35351: LD_VAR 0 6
35355: PPUSH
35356: CALL_OW 257
35360: PUSH
35361: LD_INT 2
35363: PUSH
35364: LD_INT 3
35366: PUSH
35367: LD_INT 4
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: IN
35375: IFFALSE 35396
// points := [ 3 , 2 , 1 ] ;
35377: LD_ADDR_VAR 0 9
35381: PUSH
35382: LD_INT 3
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35396: LD_VAR 0 6
35400: PPUSH
35401: CALL_OW 257
35405: PUSH
35406: LD_INT 5
35408: EQUAL
35409: IFFALSE 35430
// points := [ 130 , 5 , 2 ] ;
35411: LD_ADDR_VAR 0 9
35415: PUSH
35416: LD_INT 130
35418: PUSH
35419: LD_INT 5
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35430: LD_VAR 0 6
35434: PPUSH
35435: CALL_OW 257
35439: PUSH
35440: LD_INT 8
35442: EQUAL
35443: IFFALSE 35464
// points := [ 35 , 35 , 30 ] ;
35445: LD_ADDR_VAR 0 9
35449: PUSH
35450: LD_INT 35
35452: PUSH
35453: LD_INT 35
35455: PUSH
35456: LD_INT 30
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35464: LD_VAR 0 6
35468: PPUSH
35469: CALL_OW 257
35473: PUSH
35474: LD_INT 9
35476: EQUAL
35477: IFFALSE 35498
// points := [ 20 , 55 , 40 ] ;
35479: LD_ADDR_VAR 0 9
35483: PUSH
35484: LD_INT 20
35486: PUSH
35487: LD_INT 55
35489: PUSH
35490: LD_INT 40
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35498: LD_VAR 0 6
35502: PPUSH
35503: CALL_OW 257
35507: PUSH
35508: LD_INT 12
35510: PUSH
35511: LD_INT 16
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: IN
35518: IFFALSE 35539
// points := [ 5 , 3 , 2 ] ;
35520: LD_ADDR_VAR 0 9
35524: PUSH
35525: LD_INT 5
35527: PUSH
35528: LD_INT 3
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35539: LD_VAR 0 6
35543: PPUSH
35544: CALL_OW 257
35548: PUSH
35549: LD_INT 17
35551: EQUAL
35552: IFFALSE 35573
// points := [ 100 , 50 , 75 ] ;
35554: LD_ADDR_VAR 0 9
35558: PUSH
35559: LD_INT 100
35561: PUSH
35562: LD_INT 50
35564: PUSH
35565: LD_INT 75
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35573: LD_VAR 0 6
35577: PPUSH
35578: CALL_OW 257
35582: PUSH
35583: LD_INT 15
35585: EQUAL
35586: IFFALSE 35607
// points := [ 10 , 5 , 3 ] ;
35588: LD_ADDR_VAR 0 9
35592: PUSH
35593: LD_INT 10
35595: PUSH
35596: LD_INT 5
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35607: LD_VAR 0 6
35611: PPUSH
35612: CALL_OW 257
35616: PUSH
35617: LD_INT 14
35619: EQUAL
35620: IFFALSE 35641
// points := [ 10 , 0 , 0 ] ;
35622: LD_ADDR_VAR 0 9
35626: PUSH
35627: LD_INT 10
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35641: LD_VAR 0 6
35645: PPUSH
35646: CALL_OW 257
35650: PUSH
35651: LD_INT 11
35653: EQUAL
35654: IFFALSE 35675
// points := [ 30 , 10 , 5 ] ;
35656: LD_ADDR_VAR 0 9
35660: PUSH
35661: LD_INT 30
35663: PUSH
35664: LD_INT 10
35666: PUSH
35667: LD_INT 5
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35675: LD_VAR 0 1
35679: PPUSH
35680: LD_INT 5
35682: PPUSH
35683: CALL_OW 321
35687: PUSH
35688: LD_INT 2
35690: EQUAL
35691: IFFALSE 35708
// bpoints := bpoints * 1.8 ;
35693: LD_ADDR_VAR 0 10
35697: PUSH
35698: LD_VAR 0 10
35702: PUSH
35703: LD_REAL  1.80000000000000E+0000
35706: MUL
35707: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35708: LD_VAR 0 6
35712: PPUSH
35713: CALL_OW 257
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: LD_INT 3
35726: PUSH
35727: LD_INT 4
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: IN
35736: PUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: LD_INT 51
35744: PPUSH
35745: CALL_OW 321
35749: PUSH
35750: LD_INT 2
35752: EQUAL
35753: AND
35754: IFFALSE 35771
// bpoints := bpoints * 1.2 ;
35756: LD_ADDR_VAR 0 10
35760: PUSH
35761: LD_VAR 0 10
35765: PUSH
35766: LD_REAL  1.20000000000000E+0000
35769: MUL
35770: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35771: LD_VAR 0 6
35775: PPUSH
35776: CALL_OW 257
35780: PUSH
35781: LD_INT 5
35783: PUSH
35784: LD_INT 7
35786: PUSH
35787: LD_INT 9
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: IN
35795: PUSH
35796: LD_VAR 0 1
35800: PPUSH
35801: LD_INT 52
35803: PPUSH
35804: CALL_OW 321
35808: PUSH
35809: LD_INT 2
35811: EQUAL
35812: AND
35813: IFFALSE 35830
// bpoints := bpoints * 1.5 ;
35815: LD_ADDR_VAR 0 10
35819: PUSH
35820: LD_VAR 0 10
35824: PUSH
35825: LD_REAL  1.50000000000000E+0000
35828: MUL
35829: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35830: LD_VAR 0 1
35834: PPUSH
35835: LD_INT 66
35837: PPUSH
35838: CALL_OW 321
35842: PUSH
35843: LD_INT 2
35845: EQUAL
35846: IFFALSE 35863
// bpoints := bpoints * 1.1 ;
35848: LD_ADDR_VAR 0 10
35852: PUSH
35853: LD_VAR 0 10
35857: PUSH
35858: LD_REAL  1.10000000000000E+0000
35861: MUL
35862: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35863: LD_ADDR_VAR 0 10
35867: PUSH
35868: LD_VAR 0 10
35872: PUSH
35873: LD_VAR 0 6
35877: PPUSH
35878: LD_INT 1
35880: PPUSH
35881: CALL_OW 259
35885: PUSH
35886: LD_REAL  1.15000000000000E+0000
35889: MUL
35890: MUL
35891: ST_TO_ADDR
// end ; unit_vehicle :
35892: GO 36720
35894: LD_INT 2
35896: DOUBLE
35897: EQUAL
35898: IFTRUE 35902
35900: GO 36708
35902: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35903: LD_VAR 0 6
35907: PPUSH
35908: CALL_OW 264
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: LD_INT 42
35918: PUSH
35919: LD_INT 24
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: IN
35927: IFFALSE 35948
// points := [ 25 , 5 , 3 ] ;
35929: LD_ADDR_VAR 0 9
35933: PUSH
35934: LD_INT 25
35936: PUSH
35937: LD_INT 5
35939: PUSH
35940: LD_INT 3
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35948: LD_VAR 0 6
35952: PPUSH
35953: CALL_OW 264
35957: PUSH
35958: LD_INT 4
35960: PUSH
35961: LD_INT 43
35963: PUSH
35964: LD_INT 25
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: IN
35972: IFFALSE 35993
// points := [ 40 , 15 , 5 ] ;
35974: LD_ADDR_VAR 0 9
35978: PUSH
35979: LD_INT 40
35981: PUSH
35982: LD_INT 15
35984: PUSH
35985: LD_INT 5
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35993: LD_VAR 0 6
35997: PPUSH
35998: CALL_OW 264
36002: PUSH
36003: LD_INT 3
36005: PUSH
36006: LD_INT 23
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: IN
36013: IFFALSE 36034
// points := [ 7 , 25 , 8 ] ;
36015: LD_ADDR_VAR 0 9
36019: PUSH
36020: LD_INT 7
36022: PUSH
36023: LD_INT 25
36025: PUSH
36026: LD_INT 8
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36034: LD_VAR 0 6
36038: PPUSH
36039: CALL_OW 264
36043: PUSH
36044: LD_INT 5
36046: PUSH
36047: LD_INT 27
36049: PUSH
36050: LD_INT 44
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: IN
36058: IFFALSE 36079
// points := [ 14 , 50 , 16 ] ;
36060: LD_ADDR_VAR 0 9
36064: PUSH
36065: LD_INT 14
36067: PUSH
36068: LD_INT 50
36070: PUSH
36071: LD_INT 16
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36079: LD_VAR 0 6
36083: PPUSH
36084: CALL_OW 264
36088: PUSH
36089: LD_INT 6
36091: PUSH
36092: LD_INT 46
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: IN
36099: IFFALSE 36120
// points := [ 32 , 120 , 70 ] ;
36101: LD_ADDR_VAR 0 9
36105: PUSH
36106: LD_INT 32
36108: PUSH
36109: LD_INT 120
36111: PUSH
36112: LD_INT 70
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36120: LD_VAR 0 6
36124: PPUSH
36125: CALL_OW 264
36129: PUSH
36130: LD_INT 7
36132: PUSH
36133: LD_INT 28
36135: PUSH
36136: LD_INT 45
36138: PUSH
36139: LD_INT 92
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: IN
36148: IFFALSE 36169
// points := [ 35 , 20 , 45 ] ;
36150: LD_ADDR_VAR 0 9
36154: PUSH
36155: LD_INT 35
36157: PUSH
36158: LD_INT 20
36160: PUSH
36161: LD_INT 45
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36169: LD_VAR 0 6
36173: PPUSH
36174: CALL_OW 264
36178: PUSH
36179: LD_INT 47
36181: PUSH
36182: EMPTY
36183: LIST
36184: IN
36185: IFFALSE 36206
// points := [ 67 , 45 , 75 ] ;
36187: LD_ADDR_VAR 0 9
36191: PUSH
36192: LD_INT 67
36194: PUSH
36195: LD_INT 45
36197: PUSH
36198: LD_INT 75
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36206: LD_VAR 0 6
36210: PPUSH
36211: CALL_OW 264
36215: PUSH
36216: LD_INT 26
36218: PUSH
36219: EMPTY
36220: LIST
36221: IN
36222: IFFALSE 36243
// points := [ 120 , 30 , 80 ] ;
36224: LD_ADDR_VAR 0 9
36228: PUSH
36229: LD_INT 120
36231: PUSH
36232: LD_INT 30
36234: PUSH
36235: LD_INT 80
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36243: LD_VAR 0 6
36247: PPUSH
36248: CALL_OW 264
36252: PUSH
36253: LD_INT 22
36255: PUSH
36256: EMPTY
36257: LIST
36258: IN
36259: IFFALSE 36280
// points := [ 40 , 1 , 1 ] ;
36261: LD_ADDR_VAR 0 9
36265: PUSH
36266: LD_INT 40
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36280: LD_VAR 0 6
36284: PPUSH
36285: CALL_OW 264
36289: PUSH
36290: LD_INT 29
36292: PUSH
36293: EMPTY
36294: LIST
36295: IN
36296: IFFALSE 36317
// points := [ 70 , 200 , 400 ] ;
36298: LD_ADDR_VAR 0 9
36302: PUSH
36303: LD_INT 70
36305: PUSH
36306: LD_INT 200
36308: PUSH
36309: LD_INT 400
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: LIST
36316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36317: LD_VAR 0 6
36321: PPUSH
36322: CALL_OW 264
36326: PUSH
36327: LD_INT 14
36329: PUSH
36330: LD_INT 53
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: IN
36337: IFFALSE 36358
// points := [ 40 , 10 , 20 ] ;
36339: LD_ADDR_VAR 0 9
36343: PUSH
36344: LD_INT 40
36346: PUSH
36347: LD_INT 10
36349: PUSH
36350: LD_INT 20
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: LIST
36357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36358: LD_VAR 0 6
36362: PPUSH
36363: CALL_OW 264
36367: PUSH
36368: LD_INT 9
36370: PUSH
36371: EMPTY
36372: LIST
36373: IN
36374: IFFALSE 36395
// points := [ 5 , 70 , 20 ] ;
36376: LD_ADDR_VAR 0 9
36380: PUSH
36381: LD_INT 5
36383: PUSH
36384: LD_INT 70
36386: PUSH
36387: LD_INT 20
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36395: LD_VAR 0 6
36399: PPUSH
36400: CALL_OW 264
36404: PUSH
36405: LD_INT 10
36407: PUSH
36408: EMPTY
36409: LIST
36410: IN
36411: IFFALSE 36432
// points := [ 35 , 110 , 70 ] ;
36413: LD_ADDR_VAR 0 9
36417: PUSH
36418: LD_INT 35
36420: PUSH
36421: LD_INT 110
36423: PUSH
36424: LD_INT 70
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36432: LD_VAR 0 6
36436: PPUSH
36437: CALL_OW 265
36441: PUSH
36442: LD_INT 25
36444: EQUAL
36445: IFFALSE 36466
// points := [ 80 , 65 , 100 ] ;
36447: LD_ADDR_VAR 0 9
36451: PUSH
36452: LD_INT 80
36454: PUSH
36455: LD_INT 65
36457: PUSH
36458: LD_INT 100
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36466: LD_VAR 0 6
36470: PPUSH
36471: CALL_OW 263
36475: PUSH
36476: LD_INT 1
36478: EQUAL
36479: IFFALSE 36514
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36481: LD_ADDR_VAR 0 10
36485: PUSH
36486: LD_VAR 0 10
36490: PUSH
36491: LD_VAR 0 6
36495: PPUSH
36496: CALL_OW 311
36500: PPUSH
36501: LD_INT 3
36503: PPUSH
36504: CALL_OW 259
36508: PUSH
36509: LD_INT 4
36511: MUL
36512: MUL
36513: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36514: LD_VAR 0 6
36518: PPUSH
36519: CALL_OW 263
36523: PUSH
36524: LD_INT 2
36526: EQUAL
36527: IFFALSE 36578
// begin j := IsControledBy ( i ) ;
36529: LD_ADDR_VAR 0 7
36533: PUSH
36534: LD_VAR 0 6
36538: PPUSH
36539: CALL_OW 312
36543: ST_TO_ADDR
// if j then
36544: LD_VAR 0 7
36548: IFFALSE 36578
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36550: LD_ADDR_VAR 0 10
36554: PUSH
36555: LD_VAR 0 10
36559: PUSH
36560: LD_VAR 0 7
36564: PPUSH
36565: LD_INT 3
36567: PPUSH
36568: CALL_OW 259
36572: PUSH
36573: LD_INT 3
36575: MUL
36576: MUL
36577: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36578: LD_VAR 0 6
36582: PPUSH
36583: CALL_OW 264
36587: PUSH
36588: LD_INT 5
36590: PUSH
36591: LD_INT 6
36593: PUSH
36594: LD_INT 46
36596: PUSH
36597: LD_INT 44
36599: PUSH
36600: LD_INT 47
36602: PUSH
36603: LD_INT 45
36605: PUSH
36606: LD_INT 28
36608: PUSH
36609: LD_INT 7
36611: PUSH
36612: LD_INT 27
36614: PUSH
36615: LD_INT 29
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: IN
36630: PUSH
36631: LD_VAR 0 1
36635: PPUSH
36636: LD_INT 52
36638: PPUSH
36639: CALL_OW 321
36643: PUSH
36644: LD_INT 2
36646: EQUAL
36647: AND
36648: IFFALSE 36665
// bpoints := bpoints * 1.2 ;
36650: LD_ADDR_VAR 0 10
36654: PUSH
36655: LD_VAR 0 10
36659: PUSH
36660: LD_REAL  1.20000000000000E+0000
36663: MUL
36664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36665: LD_VAR 0 6
36669: PPUSH
36670: CALL_OW 264
36674: PUSH
36675: LD_INT 6
36677: PUSH
36678: LD_INT 46
36680: PUSH
36681: LD_INT 47
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: IN
36689: IFFALSE 36706
// bpoints := bpoints * 1.2 ;
36691: LD_ADDR_VAR 0 10
36695: PUSH
36696: LD_VAR 0 10
36700: PUSH
36701: LD_REAL  1.20000000000000E+0000
36704: MUL
36705: ST_TO_ADDR
// end ; unit_building :
36706: GO 36720
36708: LD_INT 3
36710: DOUBLE
36711: EQUAL
36712: IFTRUE 36716
36714: GO 36719
36716: POP
// ; end ;
36717: GO 36720
36719: POP
// for j = 1 to 3 do
36720: LD_ADDR_VAR 0 7
36724: PUSH
36725: DOUBLE
36726: LD_INT 1
36728: DEC
36729: ST_TO_ADDR
36730: LD_INT 3
36732: PUSH
36733: FOR_TO
36734: IFFALSE 36787
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36736: LD_ADDR_VAR 0 5
36740: PUSH
36741: LD_VAR 0 5
36745: PPUSH
36746: LD_VAR 0 7
36750: PPUSH
36751: LD_VAR 0 5
36755: PUSH
36756: LD_VAR 0 7
36760: ARRAY
36761: PUSH
36762: LD_VAR 0 9
36766: PUSH
36767: LD_VAR 0 7
36771: ARRAY
36772: PUSH
36773: LD_VAR 0 10
36777: MUL
36778: PLUS
36779: PPUSH
36780: CALL_OW 1
36784: ST_TO_ADDR
36785: GO 36733
36787: POP
36788: POP
// end ;
36789: GO 35268
36791: POP
36792: POP
// result := Replace ( result , 4 , tmp ) ;
36793: LD_ADDR_VAR 0 5
36797: PUSH
36798: LD_VAR 0 5
36802: PPUSH
36803: LD_INT 4
36805: PPUSH
36806: LD_VAR 0 8
36810: PPUSH
36811: CALL_OW 1
36815: ST_TO_ADDR
// end ;
36816: LD_VAR 0 5
36820: RET
// export function DangerAtRange ( unit , range ) ; begin
36821: LD_INT 0
36823: PPUSH
// if not unit then
36824: LD_VAR 0 1
36828: NOT
36829: IFFALSE 36833
// exit ;
36831: GO 36878
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36833: LD_ADDR_VAR 0 3
36837: PUSH
36838: LD_VAR 0 1
36842: PPUSH
36843: CALL_OW 255
36847: PPUSH
36848: LD_VAR 0 1
36852: PPUSH
36853: CALL_OW 250
36857: PPUSH
36858: LD_VAR 0 1
36862: PPUSH
36863: CALL_OW 251
36867: PPUSH
36868: LD_VAR 0 2
36872: PPUSH
36873: CALL 35120 0 4
36877: ST_TO_ADDR
// end ;
36878: LD_VAR 0 3
36882: RET
// export function DangerInArea ( side , area ) ; begin
36883: LD_INT 0
36885: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36886: LD_ADDR_VAR 0 3
36890: PUSH
36891: LD_VAR 0 2
36895: PPUSH
36896: LD_INT 81
36898: PUSH
36899: LD_VAR 0 1
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PPUSH
36908: CALL_OW 70
36912: ST_TO_ADDR
// end ;
36913: LD_VAR 0 3
36917: RET
// export function IsExtension ( b ) ; begin
36918: LD_INT 0
36920: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36921: LD_ADDR_VAR 0 2
36925: PUSH
36926: LD_VAR 0 1
36930: PUSH
36931: LD_INT 23
36933: PUSH
36934: LD_INT 20
36936: PUSH
36937: LD_INT 22
36939: PUSH
36940: LD_INT 17
36942: PUSH
36943: LD_INT 24
36945: PUSH
36946: LD_INT 21
36948: PUSH
36949: LD_INT 19
36951: PUSH
36952: LD_INT 16
36954: PUSH
36955: LD_INT 25
36957: PUSH
36958: LD_INT 18
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: IN
36973: ST_TO_ADDR
// end ;
36974: LD_VAR 0 2
36978: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36979: LD_INT 0
36981: PPUSH
36982: PPUSH
36983: PPUSH
// result := [ ] ;
36984: LD_ADDR_VAR 0 4
36988: PUSH
36989: EMPTY
36990: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36991: LD_ADDR_VAR 0 5
36995: PUSH
36996: LD_VAR 0 2
37000: PPUSH
37001: LD_INT 21
37003: PUSH
37004: LD_INT 3
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PPUSH
37011: CALL_OW 70
37015: ST_TO_ADDR
// if not tmp then
37016: LD_VAR 0 5
37020: NOT
37021: IFFALSE 37025
// exit ;
37023: GO 37089
// if checkLink then
37025: LD_VAR 0 3
37029: IFFALSE 37079
// begin for i in tmp do
37031: LD_ADDR_VAR 0 6
37035: PUSH
37036: LD_VAR 0 5
37040: PUSH
37041: FOR_IN
37042: IFFALSE 37077
// if GetBase ( i ) <> base then
37044: LD_VAR 0 6
37048: PPUSH
37049: CALL_OW 274
37053: PUSH
37054: LD_VAR 0 1
37058: NONEQUAL
37059: IFFALSE 37075
// ComLinkToBase ( base , i ) ;
37061: LD_VAR 0 1
37065: PPUSH
37066: LD_VAR 0 6
37070: PPUSH
37071: CALL_OW 169
37075: GO 37041
37077: POP
37078: POP
// end ; result := tmp ;
37079: LD_ADDR_VAR 0 4
37083: PUSH
37084: LD_VAR 0 5
37088: ST_TO_ADDR
// end ;
37089: LD_VAR 0 4
37093: RET
// export function ComComplete ( units , b ) ; var i ; begin
37094: LD_INT 0
37096: PPUSH
37097: PPUSH
// if not units then
37098: LD_VAR 0 1
37102: NOT
37103: IFFALSE 37107
// exit ;
37105: GO 37197
// for i in units do
37107: LD_ADDR_VAR 0 4
37111: PUSH
37112: LD_VAR 0 1
37116: PUSH
37117: FOR_IN
37118: IFFALSE 37195
// if BuildingStatus ( b ) = bs_build then
37120: LD_VAR 0 2
37124: PPUSH
37125: CALL_OW 461
37129: PUSH
37130: LD_INT 1
37132: EQUAL
37133: IFFALSE 37193
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37135: LD_VAR 0 4
37139: PPUSH
37140: LD_STRING h
37142: PUSH
37143: LD_VAR 0 2
37147: PPUSH
37148: CALL_OW 250
37152: PUSH
37153: LD_VAR 0 2
37157: PPUSH
37158: CALL_OW 251
37162: PUSH
37163: LD_VAR 0 2
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: PUSH
37186: EMPTY
37187: LIST
37188: PPUSH
37189: CALL_OW 446
37193: GO 37117
37195: POP
37196: POP
// end ;
37197: LD_VAR 0 3
37201: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37202: LD_INT 0
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
37209: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37210: LD_VAR 0 1
37214: NOT
37215: PUSH
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL_OW 263
37225: PUSH
37226: LD_INT 2
37228: NONEQUAL
37229: OR
37230: IFFALSE 37234
// exit ;
37232: GO 37550
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37234: LD_ADDR_VAR 0 6
37238: PUSH
37239: LD_INT 22
37241: PUSH
37242: LD_VAR 0 1
37246: PPUSH
37247: CALL_OW 255
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: LD_INT 30
37261: PUSH
37262: LD_INT 36
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 34
37271: PUSH
37272: LD_INT 31
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PPUSH
37288: CALL_OW 69
37292: ST_TO_ADDR
// if not tmp then
37293: LD_VAR 0 6
37297: NOT
37298: IFFALSE 37302
// exit ;
37300: GO 37550
// result := [ ] ;
37302: LD_ADDR_VAR 0 2
37306: PUSH
37307: EMPTY
37308: ST_TO_ADDR
// for i in tmp do
37309: LD_ADDR_VAR 0 3
37313: PUSH
37314: LD_VAR 0 6
37318: PUSH
37319: FOR_IN
37320: IFFALSE 37391
// begin t := UnitsInside ( i ) ;
37322: LD_ADDR_VAR 0 4
37326: PUSH
37327: LD_VAR 0 3
37331: PPUSH
37332: CALL_OW 313
37336: ST_TO_ADDR
// if t then
37337: LD_VAR 0 4
37341: IFFALSE 37389
// for j in t do
37343: LD_ADDR_VAR 0 7
37347: PUSH
37348: LD_VAR 0 4
37352: PUSH
37353: FOR_IN
37354: IFFALSE 37387
// result := Replace ( result , result + 1 , j ) ;
37356: LD_ADDR_VAR 0 2
37360: PUSH
37361: LD_VAR 0 2
37365: PPUSH
37366: LD_VAR 0 2
37370: PUSH
37371: LD_INT 1
37373: PLUS
37374: PPUSH
37375: LD_VAR 0 7
37379: PPUSH
37380: CALL_OW 1
37384: ST_TO_ADDR
37385: GO 37353
37387: POP
37388: POP
// end ;
37389: GO 37319
37391: POP
37392: POP
// if not result then
37393: LD_VAR 0 2
37397: NOT
37398: IFFALSE 37402
// exit ;
37400: GO 37550
// mech := result [ 1 ] ;
37402: LD_ADDR_VAR 0 5
37406: PUSH
37407: LD_VAR 0 2
37411: PUSH
37412: LD_INT 1
37414: ARRAY
37415: ST_TO_ADDR
// if result > 1 then
37416: LD_VAR 0 2
37420: PUSH
37421: LD_INT 1
37423: GREATER
37424: IFFALSE 37536
// begin for i = 2 to result do
37426: LD_ADDR_VAR 0 3
37430: PUSH
37431: DOUBLE
37432: LD_INT 2
37434: DEC
37435: ST_TO_ADDR
37436: LD_VAR 0 2
37440: PUSH
37441: FOR_TO
37442: IFFALSE 37534
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37444: LD_ADDR_VAR 0 4
37448: PUSH
37449: LD_VAR 0 2
37453: PUSH
37454: LD_VAR 0 3
37458: ARRAY
37459: PPUSH
37460: LD_INT 3
37462: PPUSH
37463: CALL_OW 259
37467: PUSH
37468: LD_VAR 0 2
37472: PUSH
37473: LD_VAR 0 3
37477: ARRAY
37478: PPUSH
37479: CALL_OW 432
37483: MINUS
37484: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37485: LD_VAR 0 4
37489: PUSH
37490: LD_VAR 0 5
37494: PPUSH
37495: LD_INT 3
37497: PPUSH
37498: CALL_OW 259
37502: PUSH
37503: LD_VAR 0 5
37507: PPUSH
37508: CALL_OW 432
37512: MINUS
37513: GREATEREQUAL
37514: IFFALSE 37532
// mech := result [ i ] ;
37516: LD_ADDR_VAR 0 5
37520: PUSH
37521: LD_VAR 0 2
37525: PUSH
37526: LD_VAR 0 3
37530: ARRAY
37531: ST_TO_ADDR
// end ;
37532: GO 37441
37534: POP
37535: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37536: LD_VAR 0 1
37540: PPUSH
37541: LD_VAR 0 5
37545: PPUSH
37546: CALL_OW 135
// end ;
37550: LD_VAR 0 2
37554: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37555: LD_INT 0
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
// result := [ ] ;
37570: LD_ADDR_VAR 0 7
37574: PUSH
37575: EMPTY
37576: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37577: LD_VAR 0 1
37581: PPUSH
37582: CALL_OW 266
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: IN
37597: NOT
37598: IFFALSE 37602
// exit ;
37600: GO 39236
// if name then
37602: LD_VAR 0 3
37606: IFFALSE 37622
// SetBName ( base_dep , name ) ;
37608: LD_VAR 0 1
37612: PPUSH
37613: LD_VAR 0 3
37617: PPUSH
37618: CALL_OW 500
// base := GetBase ( base_dep ) ;
37622: LD_ADDR_VAR 0 15
37626: PUSH
37627: LD_VAR 0 1
37631: PPUSH
37632: CALL_OW 274
37636: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37637: LD_ADDR_VAR 0 16
37641: PUSH
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 255
37651: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37652: LD_ADDR_VAR 0 17
37656: PUSH
37657: LD_VAR 0 1
37661: PPUSH
37662: CALL_OW 248
37666: ST_TO_ADDR
// if sources then
37667: LD_VAR 0 5
37671: IFFALSE 37718
// for i = 1 to 3 do
37673: LD_ADDR_VAR 0 8
37677: PUSH
37678: DOUBLE
37679: LD_INT 1
37681: DEC
37682: ST_TO_ADDR
37683: LD_INT 3
37685: PUSH
37686: FOR_TO
37687: IFFALSE 37716
// AddResourceType ( base , i , sources [ i ] ) ;
37689: LD_VAR 0 15
37693: PPUSH
37694: LD_VAR 0 8
37698: PPUSH
37699: LD_VAR 0 5
37703: PUSH
37704: LD_VAR 0 8
37708: ARRAY
37709: PPUSH
37710: CALL_OW 276
37714: GO 37686
37716: POP
37717: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37718: LD_ADDR_VAR 0 18
37722: PUSH
37723: LD_VAR 0 15
37727: PPUSH
37728: LD_VAR 0 2
37732: PPUSH
37733: LD_INT 1
37735: PPUSH
37736: CALL 36979 0 3
37740: ST_TO_ADDR
// InitHc ;
37741: CALL_OW 19
// InitUc ;
37745: CALL_OW 18
// uc_side := side ;
37749: LD_ADDR_OWVAR 20
37753: PUSH
37754: LD_VAR 0 16
37758: ST_TO_ADDR
// uc_nation := nation ;
37759: LD_ADDR_OWVAR 21
37763: PUSH
37764: LD_VAR 0 17
37768: ST_TO_ADDR
// if buildings then
37769: LD_VAR 0 18
37773: IFFALSE 39095
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37775: LD_ADDR_VAR 0 19
37779: PUSH
37780: LD_VAR 0 18
37784: PPUSH
37785: LD_INT 2
37787: PUSH
37788: LD_INT 30
37790: PUSH
37791: LD_INT 29
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 30
37800: PUSH
37801: LD_INT 30
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: PPUSH
37813: CALL_OW 72
37817: ST_TO_ADDR
// if tmp then
37818: LD_VAR 0 19
37822: IFFALSE 37870
// for i in tmp do
37824: LD_ADDR_VAR 0 8
37828: PUSH
37829: LD_VAR 0 19
37833: PUSH
37834: FOR_IN
37835: IFFALSE 37868
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37837: LD_VAR 0 8
37841: PPUSH
37842: CALL_OW 250
37846: PPUSH
37847: LD_VAR 0 8
37851: PPUSH
37852: CALL_OW 251
37856: PPUSH
37857: LD_VAR 0 16
37861: PPUSH
37862: CALL_OW 441
37866: GO 37834
37868: POP
37869: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37870: LD_VAR 0 18
37874: PPUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 30
37880: PUSH
37881: LD_INT 32
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 30
37890: PUSH
37891: LD_INT 33
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: PPUSH
37903: CALL_OW 72
37907: IFFALSE 37995
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37909: LD_ADDR_VAR 0 8
37913: PUSH
37914: LD_VAR 0 18
37918: PPUSH
37919: LD_INT 2
37921: PUSH
37922: LD_INT 30
37924: PUSH
37925: LD_INT 32
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 30
37934: PUSH
37935: LD_INT 33
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: PPUSH
37947: CALL_OW 72
37951: PUSH
37952: FOR_IN
37953: IFFALSE 37993
// begin if not GetBWeapon ( i ) then
37955: LD_VAR 0 8
37959: PPUSH
37960: CALL_OW 269
37964: NOT
37965: IFFALSE 37991
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37967: LD_VAR 0 8
37971: PPUSH
37972: LD_VAR 0 8
37976: PPUSH
37977: LD_VAR 0 2
37981: PPUSH
37982: CALL 39241 0 2
37986: PPUSH
37987: CALL_OW 431
// end ;
37991: GO 37952
37993: POP
37994: POP
// end ; for i = 1 to personel do
37995: LD_ADDR_VAR 0 8
37999: PUSH
38000: DOUBLE
38001: LD_INT 1
38003: DEC
38004: ST_TO_ADDR
38005: LD_VAR 0 6
38009: PUSH
38010: FOR_TO
38011: IFFALSE 39075
// begin if i > 4 then
38013: LD_VAR 0 8
38017: PUSH
38018: LD_INT 4
38020: GREATER
38021: IFFALSE 38025
// break ;
38023: GO 39075
// case i of 1 :
38025: LD_VAR 0 8
38029: PUSH
38030: LD_INT 1
38032: DOUBLE
38033: EQUAL
38034: IFTRUE 38038
38036: GO 38118
38038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38039: LD_ADDR_VAR 0 12
38043: PUSH
38044: LD_VAR 0 18
38048: PPUSH
38049: LD_INT 22
38051: PUSH
38052: LD_VAR 0 16
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 58
38063: PUSH
38064: EMPTY
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: LD_INT 30
38072: PUSH
38073: LD_INT 32
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 30
38082: PUSH
38083: LD_INT 4
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 30
38092: PUSH
38093: LD_INT 5
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: PPUSH
38111: CALL_OW 72
38115: ST_TO_ADDR
38116: GO 38340
38118: LD_INT 2
38120: DOUBLE
38121: EQUAL
38122: IFTRUE 38126
38124: GO 38188
38126: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38127: LD_ADDR_VAR 0 12
38131: PUSH
38132: LD_VAR 0 18
38136: PPUSH
38137: LD_INT 22
38139: PUSH
38140: LD_VAR 0 16
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: LD_INT 30
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 30
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PPUSH
38181: CALL_OW 72
38185: ST_TO_ADDR
38186: GO 38340
38188: LD_INT 3
38190: DOUBLE
38191: EQUAL
38192: IFTRUE 38196
38194: GO 38258
38196: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38197: LD_ADDR_VAR 0 12
38201: PUSH
38202: LD_VAR 0 18
38206: PPUSH
38207: LD_INT 22
38209: PUSH
38210: LD_VAR 0 16
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: LD_INT 30
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 30
38234: PUSH
38235: LD_INT 3
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PPUSH
38251: CALL_OW 72
38255: ST_TO_ADDR
38256: GO 38340
38258: LD_INT 4
38260: DOUBLE
38261: EQUAL
38262: IFTRUE 38266
38264: GO 38339
38266: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38267: LD_ADDR_VAR 0 12
38271: PUSH
38272: LD_VAR 0 18
38276: PPUSH
38277: LD_INT 22
38279: PUSH
38280: LD_VAR 0 16
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 30
38294: PUSH
38295: LD_INT 6
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 30
38304: PUSH
38305: LD_INT 7
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 30
38314: PUSH
38315: LD_INT 8
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PPUSH
38332: CALL_OW 72
38336: ST_TO_ADDR
38337: GO 38340
38339: POP
// if i = 1 then
38340: LD_VAR 0 8
38344: PUSH
38345: LD_INT 1
38347: EQUAL
38348: IFFALSE 38459
// begin tmp := [ ] ;
38350: LD_ADDR_VAR 0 19
38354: PUSH
38355: EMPTY
38356: ST_TO_ADDR
// for j in f do
38357: LD_ADDR_VAR 0 9
38361: PUSH
38362: LD_VAR 0 12
38366: PUSH
38367: FOR_IN
38368: IFFALSE 38441
// if GetBType ( j ) = b_bunker then
38370: LD_VAR 0 9
38374: PPUSH
38375: CALL_OW 266
38379: PUSH
38380: LD_INT 32
38382: EQUAL
38383: IFFALSE 38410
// tmp := Insert ( tmp , 1 , j ) else
38385: LD_ADDR_VAR 0 19
38389: PUSH
38390: LD_VAR 0 19
38394: PPUSH
38395: LD_INT 1
38397: PPUSH
38398: LD_VAR 0 9
38402: PPUSH
38403: CALL_OW 2
38407: ST_TO_ADDR
38408: GO 38439
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38410: LD_ADDR_VAR 0 19
38414: PUSH
38415: LD_VAR 0 19
38419: PPUSH
38420: LD_VAR 0 19
38424: PUSH
38425: LD_INT 1
38427: PLUS
38428: PPUSH
38429: LD_VAR 0 9
38433: PPUSH
38434: CALL_OW 2
38438: ST_TO_ADDR
38439: GO 38367
38441: POP
38442: POP
// if tmp then
38443: LD_VAR 0 19
38447: IFFALSE 38459
// f := tmp ;
38449: LD_ADDR_VAR 0 12
38453: PUSH
38454: LD_VAR 0 19
38458: ST_TO_ADDR
// end ; x := personel [ i ] ;
38459: LD_ADDR_VAR 0 13
38463: PUSH
38464: LD_VAR 0 6
38468: PUSH
38469: LD_VAR 0 8
38473: ARRAY
38474: ST_TO_ADDR
// if x = - 1 then
38475: LD_VAR 0 13
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: EQUAL
38484: IFFALSE 38693
// begin for j in f do
38486: LD_ADDR_VAR 0 9
38490: PUSH
38491: LD_VAR 0 12
38495: PUSH
38496: FOR_IN
38497: IFFALSE 38689
// repeat InitHc ;
38499: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38503: LD_VAR 0 9
38507: PPUSH
38508: CALL_OW 266
38512: PUSH
38513: LD_INT 5
38515: EQUAL
38516: IFFALSE 38586
// begin if UnitsInside ( j ) < 3 then
38518: LD_VAR 0 9
38522: PPUSH
38523: CALL_OW 313
38527: PUSH
38528: LD_INT 3
38530: LESS
38531: IFFALSE 38567
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38533: LD_INT 0
38535: PPUSH
38536: LD_INT 5
38538: PUSH
38539: LD_INT 8
38541: PUSH
38542: LD_INT 9
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: PUSH
38550: LD_VAR 0 17
38554: ARRAY
38555: PPUSH
38556: LD_VAR 0 4
38560: PPUSH
38561: CALL_OW 380
38565: GO 38584
// PrepareHuman ( false , i , skill ) ;
38567: LD_INT 0
38569: PPUSH
38570: LD_VAR 0 8
38574: PPUSH
38575: LD_VAR 0 4
38579: PPUSH
38580: CALL_OW 380
// end else
38584: GO 38603
// PrepareHuman ( false , i , skill ) ;
38586: LD_INT 0
38588: PPUSH
38589: LD_VAR 0 8
38593: PPUSH
38594: LD_VAR 0 4
38598: PPUSH
38599: CALL_OW 380
// un := CreateHuman ;
38603: LD_ADDR_VAR 0 14
38607: PUSH
38608: CALL_OW 44
38612: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38613: LD_ADDR_VAR 0 7
38617: PUSH
38618: LD_VAR 0 7
38622: PPUSH
38623: LD_INT 1
38625: PPUSH
38626: LD_VAR 0 14
38630: PPUSH
38631: CALL_OW 2
38635: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38636: LD_VAR 0 14
38640: PPUSH
38641: LD_VAR 0 9
38645: PPUSH
38646: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38650: LD_VAR 0 9
38654: PPUSH
38655: CALL_OW 313
38659: PUSH
38660: LD_INT 6
38662: EQUAL
38663: PUSH
38664: LD_VAR 0 9
38668: PPUSH
38669: CALL_OW 266
38673: PUSH
38674: LD_INT 32
38676: PUSH
38677: LD_INT 31
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: IN
38684: OR
38685: IFFALSE 38499
38687: GO 38496
38689: POP
38690: POP
// end else
38691: GO 39073
// for j = 1 to x do
38693: LD_ADDR_VAR 0 9
38697: PUSH
38698: DOUBLE
38699: LD_INT 1
38701: DEC
38702: ST_TO_ADDR
38703: LD_VAR 0 13
38707: PUSH
38708: FOR_TO
38709: IFFALSE 39071
// begin InitHc ;
38711: CALL_OW 19
// if not f then
38715: LD_VAR 0 12
38719: NOT
38720: IFFALSE 38809
// begin PrepareHuman ( false , i , skill ) ;
38722: LD_INT 0
38724: PPUSH
38725: LD_VAR 0 8
38729: PPUSH
38730: LD_VAR 0 4
38734: PPUSH
38735: CALL_OW 380
// un := CreateHuman ;
38739: LD_ADDR_VAR 0 14
38743: PUSH
38744: CALL_OW 44
38748: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38749: LD_ADDR_VAR 0 7
38753: PUSH
38754: LD_VAR 0 7
38758: PPUSH
38759: LD_INT 1
38761: PPUSH
38762: LD_VAR 0 14
38766: PPUSH
38767: CALL_OW 2
38771: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38772: LD_VAR 0 14
38776: PPUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 250
38786: PPUSH
38787: LD_VAR 0 1
38791: PPUSH
38792: CALL_OW 251
38796: PPUSH
38797: LD_INT 10
38799: PPUSH
38800: LD_INT 0
38802: PPUSH
38803: CALL_OW 50
// continue ;
38807: GO 38708
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38809: LD_VAR 0 12
38813: PUSH
38814: LD_INT 1
38816: ARRAY
38817: PPUSH
38818: CALL_OW 313
38822: PUSH
38823: LD_VAR 0 12
38827: PUSH
38828: LD_INT 1
38830: ARRAY
38831: PPUSH
38832: CALL_OW 266
38836: PUSH
38837: LD_INT 32
38839: PUSH
38840: LD_INT 31
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: IN
38847: AND
38848: PUSH
38849: LD_VAR 0 12
38853: PUSH
38854: LD_INT 1
38856: ARRAY
38857: PPUSH
38858: CALL_OW 313
38862: PUSH
38863: LD_INT 6
38865: EQUAL
38866: OR
38867: IFFALSE 38887
// f := Delete ( f , 1 ) ;
38869: LD_ADDR_VAR 0 12
38873: PUSH
38874: LD_VAR 0 12
38878: PPUSH
38879: LD_INT 1
38881: PPUSH
38882: CALL_OW 3
38886: ST_TO_ADDR
// if not f then
38887: LD_VAR 0 12
38891: NOT
38892: IFFALSE 38910
// begin x := x + 2 ;
38894: LD_ADDR_VAR 0 13
38898: PUSH
38899: LD_VAR 0 13
38903: PUSH
38904: LD_INT 2
38906: PLUS
38907: ST_TO_ADDR
// continue ;
38908: GO 38708
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38910: LD_VAR 0 12
38914: PUSH
38915: LD_INT 1
38917: ARRAY
38918: PPUSH
38919: CALL_OW 266
38923: PUSH
38924: LD_INT 5
38926: EQUAL
38927: IFFALSE 39001
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38929: LD_VAR 0 12
38933: PUSH
38934: LD_INT 1
38936: ARRAY
38937: PPUSH
38938: CALL_OW 313
38942: PUSH
38943: LD_INT 3
38945: LESS
38946: IFFALSE 38982
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38948: LD_INT 0
38950: PPUSH
38951: LD_INT 5
38953: PUSH
38954: LD_INT 8
38956: PUSH
38957: LD_INT 9
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: PUSH
38965: LD_VAR 0 17
38969: ARRAY
38970: PPUSH
38971: LD_VAR 0 4
38975: PPUSH
38976: CALL_OW 380
38980: GO 38999
// PrepareHuman ( false , i , skill ) ;
38982: LD_INT 0
38984: PPUSH
38985: LD_VAR 0 8
38989: PPUSH
38990: LD_VAR 0 4
38994: PPUSH
38995: CALL_OW 380
// end else
38999: GO 39018
// PrepareHuman ( false , i , skill ) ;
39001: LD_INT 0
39003: PPUSH
39004: LD_VAR 0 8
39008: PPUSH
39009: LD_VAR 0 4
39013: PPUSH
39014: CALL_OW 380
// un := CreateHuman ;
39018: LD_ADDR_VAR 0 14
39022: PUSH
39023: CALL_OW 44
39027: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39028: LD_ADDR_VAR 0 7
39032: PUSH
39033: LD_VAR 0 7
39037: PPUSH
39038: LD_INT 1
39040: PPUSH
39041: LD_VAR 0 14
39045: PPUSH
39046: CALL_OW 2
39050: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39051: LD_VAR 0 14
39055: PPUSH
39056: LD_VAR 0 12
39060: PUSH
39061: LD_INT 1
39063: ARRAY
39064: PPUSH
39065: CALL_OW 52
// end ;
39069: GO 38708
39071: POP
39072: POP
// end ;
39073: GO 38010
39075: POP
39076: POP
// result := result ^ buildings ;
39077: LD_ADDR_VAR 0 7
39081: PUSH
39082: LD_VAR 0 7
39086: PUSH
39087: LD_VAR 0 18
39091: ADD
39092: ST_TO_ADDR
// end else
39093: GO 39236
// begin for i = 1 to personel do
39095: LD_ADDR_VAR 0 8
39099: PUSH
39100: DOUBLE
39101: LD_INT 1
39103: DEC
39104: ST_TO_ADDR
39105: LD_VAR 0 6
39109: PUSH
39110: FOR_TO
39111: IFFALSE 39234
// begin if i > 4 then
39113: LD_VAR 0 8
39117: PUSH
39118: LD_INT 4
39120: GREATER
39121: IFFALSE 39125
// break ;
39123: GO 39234
// x := personel [ i ] ;
39125: LD_ADDR_VAR 0 13
39129: PUSH
39130: LD_VAR 0 6
39134: PUSH
39135: LD_VAR 0 8
39139: ARRAY
39140: ST_TO_ADDR
// if x = - 1 then
39141: LD_VAR 0 13
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: EQUAL
39150: IFFALSE 39154
// continue ;
39152: GO 39110
// PrepareHuman ( false , i , skill ) ;
39154: LD_INT 0
39156: PPUSH
39157: LD_VAR 0 8
39161: PPUSH
39162: LD_VAR 0 4
39166: PPUSH
39167: CALL_OW 380
// un := CreateHuman ;
39171: LD_ADDR_VAR 0 14
39175: PUSH
39176: CALL_OW 44
39180: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39181: LD_VAR 0 14
39185: PPUSH
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 250
39195: PPUSH
39196: LD_VAR 0 1
39200: PPUSH
39201: CALL_OW 251
39205: PPUSH
39206: LD_INT 10
39208: PPUSH
39209: LD_INT 0
39211: PPUSH
39212: CALL_OW 50
// result := result ^ un ;
39216: LD_ADDR_VAR 0 7
39220: PUSH
39221: LD_VAR 0 7
39225: PUSH
39226: LD_VAR 0 14
39230: ADD
39231: ST_TO_ADDR
// end ;
39232: GO 39110
39234: POP
39235: POP
// end ; end ;
39236: LD_VAR 0 7
39240: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39241: LD_INT 0
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
39247: PPUSH
39248: PPUSH
39249: PPUSH
39250: PPUSH
39251: PPUSH
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
39257: PPUSH
39258: PPUSH
// result := false ;
39259: LD_ADDR_VAR 0 3
39263: PUSH
39264: LD_INT 0
39266: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39267: LD_VAR 0 1
39271: NOT
39272: PUSH
39273: LD_VAR 0 1
39277: PPUSH
39278: CALL_OW 266
39282: PUSH
39283: LD_INT 32
39285: PUSH
39286: LD_INT 33
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: IN
39293: NOT
39294: OR
39295: IFFALSE 39299
// exit ;
39297: GO 40408
// nat := GetNation ( tower ) ;
39299: LD_ADDR_VAR 0 12
39303: PUSH
39304: LD_VAR 0 1
39308: PPUSH
39309: CALL_OW 248
39313: ST_TO_ADDR
// side := GetSide ( tower ) ;
39314: LD_ADDR_VAR 0 16
39318: PUSH
39319: LD_VAR 0 1
39323: PPUSH
39324: CALL_OW 255
39328: ST_TO_ADDR
// x := GetX ( tower ) ;
39329: LD_ADDR_VAR 0 10
39333: PUSH
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 250
39343: ST_TO_ADDR
// y := GetY ( tower ) ;
39344: LD_ADDR_VAR 0 11
39348: PUSH
39349: LD_VAR 0 1
39353: PPUSH
39354: CALL_OW 251
39358: ST_TO_ADDR
// if not x or not y then
39359: LD_VAR 0 10
39363: NOT
39364: PUSH
39365: LD_VAR 0 11
39369: NOT
39370: OR
39371: IFFALSE 39375
// exit ;
39373: GO 40408
// weapon := 0 ;
39375: LD_ADDR_VAR 0 18
39379: PUSH
39380: LD_INT 0
39382: ST_TO_ADDR
// fac_list := [ ] ;
39383: LD_ADDR_VAR 0 17
39387: PUSH
39388: EMPTY
39389: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39390: LD_ADDR_VAR 0 6
39394: PUSH
39395: LD_VAR 0 1
39399: PPUSH
39400: CALL_OW 274
39404: PPUSH
39405: LD_VAR 0 2
39409: PPUSH
39410: LD_INT 0
39412: PPUSH
39413: CALL 36979 0 3
39417: PPUSH
39418: LD_INT 30
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PPUSH
39428: CALL_OW 72
39432: ST_TO_ADDR
// if not factories then
39433: LD_VAR 0 6
39437: NOT
39438: IFFALSE 39442
// exit ;
39440: GO 40408
// for i in factories do
39442: LD_ADDR_VAR 0 8
39446: PUSH
39447: LD_VAR 0 6
39451: PUSH
39452: FOR_IN
39453: IFFALSE 39478
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39455: LD_ADDR_VAR 0 17
39459: PUSH
39460: LD_VAR 0 17
39464: PUSH
39465: LD_VAR 0 8
39469: PPUSH
39470: CALL_OW 478
39474: UNION
39475: ST_TO_ADDR
39476: GO 39452
39478: POP
39479: POP
// if not fac_list then
39480: LD_VAR 0 17
39484: NOT
39485: IFFALSE 39489
// exit ;
39487: GO 40408
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39489: LD_ADDR_VAR 0 5
39493: PUSH
39494: LD_INT 4
39496: PUSH
39497: LD_INT 5
39499: PUSH
39500: LD_INT 9
39502: PUSH
39503: LD_INT 10
39505: PUSH
39506: LD_INT 6
39508: PUSH
39509: LD_INT 7
39511: PUSH
39512: LD_INT 11
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 27
39526: PUSH
39527: LD_INT 28
39529: PUSH
39530: LD_INT 26
39532: PUSH
39533: LD_INT 30
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 43
39544: PUSH
39545: LD_INT 44
39547: PUSH
39548: LD_INT 46
39550: PUSH
39551: LD_INT 45
39553: PUSH
39554: LD_INT 47
39556: PUSH
39557: LD_INT 49
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: PUSH
39573: LD_VAR 0 12
39577: ARRAY
39578: ST_TO_ADDR
// list := list isect fac_list ;
39579: LD_ADDR_VAR 0 5
39583: PUSH
39584: LD_VAR 0 5
39588: PUSH
39589: LD_VAR 0 17
39593: ISECT
39594: ST_TO_ADDR
// if not list then
39595: LD_VAR 0 5
39599: NOT
39600: IFFALSE 39604
// exit ;
39602: GO 40408
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39604: LD_VAR 0 12
39608: PUSH
39609: LD_INT 3
39611: EQUAL
39612: PUSH
39613: LD_INT 49
39615: PUSH
39616: LD_VAR 0 5
39620: IN
39621: AND
39622: PUSH
39623: LD_INT 31
39625: PPUSH
39626: LD_VAR 0 16
39630: PPUSH
39631: CALL_OW 321
39635: PUSH
39636: LD_INT 2
39638: EQUAL
39639: AND
39640: IFFALSE 39700
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39642: LD_INT 22
39644: PUSH
39645: LD_VAR 0 16
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 35
39656: PUSH
39657: LD_INT 49
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 91
39666: PUSH
39667: LD_VAR 0 1
39671: PUSH
39672: LD_INT 10
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: LIST
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: PPUSH
39685: CALL_OW 69
39689: NOT
39690: IFFALSE 39700
// weapon := ru_time_lapser ;
39692: LD_ADDR_VAR 0 18
39696: PUSH
39697: LD_INT 49
39699: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39700: LD_VAR 0 12
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: IN
39715: PUSH
39716: LD_INT 11
39718: PUSH
39719: LD_VAR 0 5
39723: IN
39724: PUSH
39725: LD_INT 30
39727: PUSH
39728: LD_VAR 0 5
39732: IN
39733: OR
39734: AND
39735: PUSH
39736: LD_INT 6
39738: PPUSH
39739: LD_VAR 0 16
39743: PPUSH
39744: CALL_OW 321
39748: PUSH
39749: LD_INT 2
39751: EQUAL
39752: AND
39753: IFFALSE 39918
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39755: LD_INT 22
39757: PUSH
39758: LD_VAR 0 16
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: LD_INT 35
39772: PUSH
39773: LD_INT 11
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 35
39782: PUSH
39783: LD_INT 30
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 91
39797: PUSH
39798: LD_VAR 0 1
39802: PUSH
39803: LD_INT 18
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: PPUSH
39816: CALL_OW 69
39820: NOT
39821: PUSH
39822: LD_INT 22
39824: PUSH
39825: LD_VAR 0 16
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: LD_INT 30
39839: PUSH
39840: LD_INT 32
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 30
39849: PUSH
39850: LD_INT 33
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 91
39864: PUSH
39865: LD_VAR 0 1
39869: PUSH
39870: LD_INT 12
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: LIST
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: PUSH
39883: EMPTY
39884: LIST
39885: PPUSH
39886: CALL_OW 69
39890: PUSH
39891: LD_INT 2
39893: GREATER
39894: AND
39895: IFFALSE 39918
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39897: LD_ADDR_VAR 0 18
39901: PUSH
39902: LD_INT 11
39904: PUSH
39905: LD_INT 30
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_VAR 0 12
39916: ARRAY
39917: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39918: LD_VAR 0 18
39922: NOT
39923: PUSH
39924: LD_INT 40
39926: PPUSH
39927: LD_VAR 0 16
39931: PPUSH
39932: CALL_OW 321
39936: PUSH
39937: LD_INT 2
39939: EQUAL
39940: AND
39941: PUSH
39942: LD_INT 7
39944: PUSH
39945: LD_VAR 0 5
39949: IN
39950: PUSH
39951: LD_INT 28
39953: PUSH
39954: LD_VAR 0 5
39958: IN
39959: OR
39960: PUSH
39961: LD_INT 45
39963: PUSH
39964: LD_VAR 0 5
39968: IN
39969: OR
39970: AND
39971: IFFALSE 40225
// begin hex := GetHexInfo ( x , y ) ;
39973: LD_ADDR_VAR 0 4
39977: PUSH
39978: LD_VAR 0 10
39982: PPUSH
39983: LD_VAR 0 11
39987: PPUSH
39988: CALL_OW 546
39992: ST_TO_ADDR
// if hex [ 1 ] then
39993: LD_VAR 0 4
39997: PUSH
39998: LD_INT 1
40000: ARRAY
40001: IFFALSE 40005
// exit ;
40003: GO 40408
// height := hex [ 2 ] ;
40005: LD_ADDR_VAR 0 15
40009: PUSH
40010: LD_VAR 0 4
40014: PUSH
40015: LD_INT 2
40017: ARRAY
40018: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40019: LD_ADDR_VAR 0 14
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: LD_INT 5
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: ST_TO_ADDR
// for i in tmp do
40042: LD_ADDR_VAR 0 8
40046: PUSH
40047: LD_VAR 0 14
40051: PUSH
40052: FOR_IN
40053: IFFALSE 40223
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40055: LD_ADDR_VAR 0 9
40059: PUSH
40060: LD_VAR 0 10
40064: PPUSH
40065: LD_VAR 0 8
40069: PPUSH
40070: LD_INT 5
40072: PPUSH
40073: CALL_OW 272
40077: PUSH
40078: LD_VAR 0 11
40082: PPUSH
40083: LD_VAR 0 8
40087: PPUSH
40088: LD_INT 5
40090: PPUSH
40091: CALL_OW 273
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40100: LD_VAR 0 9
40104: PUSH
40105: LD_INT 1
40107: ARRAY
40108: PPUSH
40109: LD_VAR 0 9
40113: PUSH
40114: LD_INT 2
40116: ARRAY
40117: PPUSH
40118: CALL_OW 488
40122: IFFALSE 40221
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40124: LD_ADDR_VAR 0 4
40128: PUSH
40129: LD_VAR 0 9
40133: PUSH
40134: LD_INT 1
40136: ARRAY
40137: PPUSH
40138: LD_VAR 0 9
40142: PUSH
40143: LD_INT 2
40145: ARRAY
40146: PPUSH
40147: CALL_OW 546
40151: ST_TO_ADDR
// if hex [ 1 ] then
40152: LD_VAR 0 4
40156: PUSH
40157: LD_INT 1
40159: ARRAY
40160: IFFALSE 40164
// continue ;
40162: GO 40052
// h := hex [ 2 ] ;
40164: LD_ADDR_VAR 0 13
40168: PUSH
40169: LD_VAR 0 4
40173: PUSH
40174: LD_INT 2
40176: ARRAY
40177: ST_TO_ADDR
// if h + 7 < height then
40178: LD_VAR 0 13
40182: PUSH
40183: LD_INT 7
40185: PLUS
40186: PUSH
40187: LD_VAR 0 15
40191: LESS
40192: IFFALSE 40221
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40194: LD_ADDR_VAR 0 18
40198: PUSH
40199: LD_INT 7
40201: PUSH
40202: LD_INT 28
40204: PUSH
40205: LD_INT 45
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: PUSH
40213: LD_VAR 0 12
40217: ARRAY
40218: ST_TO_ADDR
// break ;
40219: GO 40223
// end ; end ; end ;
40221: GO 40052
40223: POP
40224: POP
// end ; if not weapon then
40225: LD_VAR 0 18
40229: NOT
40230: IFFALSE 40290
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40232: LD_ADDR_VAR 0 5
40236: PUSH
40237: LD_VAR 0 5
40241: PUSH
40242: LD_INT 11
40244: PUSH
40245: LD_INT 30
40247: PUSH
40248: LD_INT 49
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: DIFF
40256: ST_TO_ADDR
// if not list then
40257: LD_VAR 0 5
40261: NOT
40262: IFFALSE 40266
// exit ;
40264: GO 40408
// weapon := list [ rand ( 1 , list ) ] ;
40266: LD_ADDR_VAR 0 18
40270: PUSH
40271: LD_VAR 0 5
40275: PUSH
40276: LD_INT 1
40278: PPUSH
40279: LD_VAR 0 5
40283: PPUSH
40284: CALL_OW 12
40288: ARRAY
40289: ST_TO_ADDR
// end ; if weapon then
40290: LD_VAR 0 18
40294: IFFALSE 40408
// begin tmp := CostOfWeapon ( weapon ) ;
40296: LD_ADDR_VAR 0 14
40300: PUSH
40301: LD_VAR 0 18
40305: PPUSH
40306: CALL_OW 451
40310: ST_TO_ADDR
// j := GetBase ( tower ) ;
40311: LD_ADDR_VAR 0 9
40315: PUSH
40316: LD_VAR 0 1
40320: PPUSH
40321: CALL_OW 274
40325: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40326: LD_VAR 0 9
40330: PPUSH
40331: LD_INT 1
40333: PPUSH
40334: CALL_OW 275
40338: PUSH
40339: LD_VAR 0 14
40343: PUSH
40344: LD_INT 1
40346: ARRAY
40347: GREATEREQUAL
40348: PUSH
40349: LD_VAR 0 9
40353: PPUSH
40354: LD_INT 2
40356: PPUSH
40357: CALL_OW 275
40361: PUSH
40362: LD_VAR 0 14
40366: PUSH
40367: LD_INT 2
40369: ARRAY
40370: GREATEREQUAL
40371: AND
40372: PUSH
40373: LD_VAR 0 9
40377: PPUSH
40378: LD_INT 3
40380: PPUSH
40381: CALL_OW 275
40385: PUSH
40386: LD_VAR 0 14
40390: PUSH
40391: LD_INT 3
40393: ARRAY
40394: GREATEREQUAL
40395: AND
40396: IFFALSE 40408
// result := weapon ;
40398: LD_ADDR_VAR 0 3
40402: PUSH
40403: LD_VAR 0 18
40407: ST_TO_ADDR
// end ; end ;
40408: LD_VAR 0 3
40412: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40413: LD_INT 0
40415: PPUSH
40416: PPUSH
// result := true ;
40417: LD_ADDR_VAR 0 3
40421: PUSH
40422: LD_INT 1
40424: ST_TO_ADDR
// if array1 = array2 then
40425: LD_VAR 0 1
40429: PUSH
40430: LD_VAR 0 2
40434: EQUAL
40435: IFFALSE 40495
// begin for i = 1 to array1 do
40437: LD_ADDR_VAR 0 4
40441: PUSH
40442: DOUBLE
40443: LD_INT 1
40445: DEC
40446: ST_TO_ADDR
40447: LD_VAR 0 1
40451: PUSH
40452: FOR_TO
40453: IFFALSE 40491
// if array1 [ i ] <> array2 [ i ] then
40455: LD_VAR 0 1
40459: PUSH
40460: LD_VAR 0 4
40464: ARRAY
40465: PUSH
40466: LD_VAR 0 2
40470: PUSH
40471: LD_VAR 0 4
40475: ARRAY
40476: NONEQUAL
40477: IFFALSE 40489
// begin result := false ;
40479: LD_ADDR_VAR 0 3
40483: PUSH
40484: LD_INT 0
40486: ST_TO_ADDR
// break ;
40487: GO 40491
// end ;
40489: GO 40452
40491: POP
40492: POP
// end else
40493: GO 40503
// result := false ;
40495: LD_ADDR_VAR 0 3
40499: PUSH
40500: LD_INT 0
40502: ST_TO_ADDR
// end ;
40503: LD_VAR 0 3
40507: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40508: LD_INT 0
40510: PPUSH
40511: PPUSH
// if not array1 or not array2 then
40512: LD_VAR 0 1
40516: NOT
40517: PUSH
40518: LD_VAR 0 2
40522: NOT
40523: OR
40524: IFFALSE 40528
// exit ;
40526: GO 40592
// result := true ;
40528: LD_ADDR_VAR 0 3
40532: PUSH
40533: LD_INT 1
40535: ST_TO_ADDR
// for i = 1 to array1 do
40536: LD_ADDR_VAR 0 4
40540: PUSH
40541: DOUBLE
40542: LD_INT 1
40544: DEC
40545: ST_TO_ADDR
40546: LD_VAR 0 1
40550: PUSH
40551: FOR_TO
40552: IFFALSE 40590
// if array1 [ i ] <> array2 [ i ] then
40554: LD_VAR 0 1
40558: PUSH
40559: LD_VAR 0 4
40563: ARRAY
40564: PUSH
40565: LD_VAR 0 2
40569: PUSH
40570: LD_VAR 0 4
40574: ARRAY
40575: NONEQUAL
40576: IFFALSE 40588
// begin result := false ;
40578: LD_ADDR_VAR 0 3
40582: PUSH
40583: LD_INT 0
40585: ST_TO_ADDR
// break ;
40586: GO 40590
// end ;
40588: GO 40551
40590: POP
40591: POP
// end ;
40592: LD_VAR 0 3
40596: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40597: LD_INT 0
40599: PPUSH
40600: PPUSH
40601: PPUSH
// pom := GetBase ( fac ) ;
40602: LD_ADDR_VAR 0 5
40606: PUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 274
40616: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40617: LD_ADDR_VAR 0 4
40621: PUSH
40622: LD_VAR 0 2
40626: PUSH
40627: LD_INT 1
40629: ARRAY
40630: PPUSH
40631: LD_VAR 0 2
40635: PUSH
40636: LD_INT 2
40638: ARRAY
40639: PPUSH
40640: LD_VAR 0 2
40644: PUSH
40645: LD_INT 3
40647: ARRAY
40648: PPUSH
40649: LD_VAR 0 2
40653: PUSH
40654: LD_INT 4
40656: ARRAY
40657: PPUSH
40658: CALL_OW 449
40662: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40663: LD_ADDR_VAR 0 3
40667: PUSH
40668: LD_VAR 0 5
40672: PPUSH
40673: LD_INT 1
40675: PPUSH
40676: CALL_OW 275
40680: PUSH
40681: LD_VAR 0 4
40685: PUSH
40686: LD_INT 1
40688: ARRAY
40689: GREATEREQUAL
40690: PUSH
40691: LD_VAR 0 5
40695: PPUSH
40696: LD_INT 2
40698: PPUSH
40699: CALL_OW 275
40703: PUSH
40704: LD_VAR 0 4
40708: PUSH
40709: LD_INT 2
40711: ARRAY
40712: GREATEREQUAL
40713: AND
40714: PUSH
40715: LD_VAR 0 5
40719: PPUSH
40720: LD_INT 3
40722: PPUSH
40723: CALL_OW 275
40727: PUSH
40728: LD_VAR 0 4
40732: PUSH
40733: LD_INT 3
40735: ARRAY
40736: GREATEREQUAL
40737: AND
40738: ST_TO_ADDR
// end ;
40739: LD_VAR 0 3
40743: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40744: LD_INT 0
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
// pom := GetBase ( building ) ;
40750: LD_ADDR_VAR 0 3
40754: PUSH
40755: LD_VAR 0 1
40759: PPUSH
40760: CALL_OW 274
40764: ST_TO_ADDR
// if not pom then
40765: LD_VAR 0 3
40769: NOT
40770: IFFALSE 40774
// exit ;
40772: GO 40944
// btype := GetBType ( building ) ;
40774: LD_ADDR_VAR 0 5
40778: PUSH
40779: LD_VAR 0 1
40783: PPUSH
40784: CALL_OW 266
40788: ST_TO_ADDR
// if btype = b_armoury then
40789: LD_VAR 0 5
40793: PUSH
40794: LD_INT 4
40796: EQUAL
40797: IFFALSE 40807
// btype := b_barracks ;
40799: LD_ADDR_VAR 0 5
40803: PUSH
40804: LD_INT 5
40806: ST_TO_ADDR
// if btype = b_depot then
40807: LD_VAR 0 5
40811: PUSH
40812: LD_INT 0
40814: EQUAL
40815: IFFALSE 40825
// btype := b_warehouse ;
40817: LD_ADDR_VAR 0 5
40821: PUSH
40822: LD_INT 1
40824: ST_TO_ADDR
// if btype = b_workshop then
40825: LD_VAR 0 5
40829: PUSH
40830: LD_INT 2
40832: EQUAL
40833: IFFALSE 40843
// btype := b_factory ;
40835: LD_ADDR_VAR 0 5
40839: PUSH
40840: LD_INT 3
40842: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40843: LD_ADDR_VAR 0 4
40847: PUSH
40848: LD_VAR 0 5
40852: PPUSH
40853: LD_VAR 0 1
40857: PPUSH
40858: CALL_OW 248
40862: PPUSH
40863: CALL_OW 450
40867: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40868: LD_ADDR_VAR 0 2
40872: PUSH
40873: LD_VAR 0 3
40877: PPUSH
40878: LD_INT 1
40880: PPUSH
40881: CALL_OW 275
40885: PUSH
40886: LD_VAR 0 4
40890: PUSH
40891: LD_INT 1
40893: ARRAY
40894: GREATEREQUAL
40895: PUSH
40896: LD_VAR 0 3
40900: PPUSH
40901: LD_INT 2
40903: PPUSH
40904: CALL_OW 275
40908: PUSH
40909: LD_VAR 0 4
40913: PUSH
40914: LD_INT 2
40916: ARRAY
40917: GREATEREQUAL
40918: AND
40919: PUSH
40920: LD_VAR 0 3
40924: PPUSH
40925: LD_INT 3
40927: PPUSH
40928: CALL_OW 275
40932: PUSH
40933: LD_VAR 0 4
40937: PUSH
40938: LD_INT 3
40940: ARRAY
40941: GREATEREQUAL
40942: AND
40943: ST_TO_ADDR
// end ;
40944: LD_VAR 0 2
40948: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40949: LD_INT 0
40951: PPUSH
40952: PPUSH
40953: PPUSH
// pom := GetBase ( building ) ;
40954: LD_ADDR_VAR 0 4
40958: PUSH
40959: LD_VAR 0 1
40963: PPUSH
40964: CALL_OW 274
40968: ST_TO_ADDR
// if not pom then
40969: LD_VAR 0 4
40973: NOT
40974: IFFALSE 40978
// exit ;
40976: GO 41079
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40978: LD_ADDR_VAR 0 5
40982: PUSH
40983: LD_VAR 0 2
40987: PPUSH
40988: LD_VAR 0 1
40992: PPUSH
40993: CALL_OW 248
40997: PPUSH
40998: CALL_OW 450
41002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41003: LD_ADDR_VAR 0 3
41007: PUSH
41008: LD_VAR 0 4
41012: PPUSH
41013: LD_INT 1
41015: PPUSH
41016: CALL_OW 275
41020: PUSH
41021: LD_VAR 0 5
41025: PUSH
41026: LD_INT 1
41028: ARRAY
41029: GREATEREQUAL
41030: PUSH
41031: LD_VAR 0 4
41035: PPUSH
41036: LD_INT 2
41038: PPUSH
41039: CALL_OW 275
41043: PUSH
41044: LD_VAR 0 5
41048: PUSH
41049: LD_INT 2
41051: ARRAY
41052: GREATEREQUAL
41053: AND
41054: PUSH
41055: LD_VAR 0 4
41059: PPUSH
41060: LD_INT 3
41062: PPUSH
41063: CALL_OW 275
41067: PUSH
41068: LD_VAR 0 5
41072: PUSH
41073: LD_INT 3
41075: ARRAY
41076: GREATEREQUAL
41077: AND
41078: ST_TO_ADDR
// end ;
41079: LD_VAR 0 3
41083: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41084: LD_INT 0
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
// result := false ;
41097: LD_ADDR_VAR 0 8
41101: PUSH
41102: LD_INT 0
41104: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41105: LD_VAR 0 5
41109: NOT
41110: PUSH
41111: LD_VAR 0 1
41115: NOT
41116: OR
41117: PUSH
41118: LD_VAR 0 2
41122: NOT
41123: OR
41124: PUSH
41125: LD_VAR 0 3
41129: NOT
41130: OR
41131: IFFALSE 41135
// exit ;
41133: GO 41949
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41135: LD_ADDR_VAR 0 14
41139: PUSH
41140: LD_VAR 0 1
41144: PPUSH
41145: LD_VAR 0 2
41149: PPUSH
41150: LD_VAR 0 3
41154: PPUSH
41155: LD_VAR 0 4
41159: PPUSH
41160: LD_VAR 0 5
41164: PUSH
41165: LD_INT 1
41167: ARRAY
41168: PPUSH
41169: CALL_OW 248
41173: PPUSH
41174: LD_INT 0
41176: PPUSH
41177: CALL 43202 0 6
41181: ST_TO_ADDR
// if not hexes then
41182: LD_VAR 0 14
41186: NOT
41187: IFFALSE 41191
// exit ;
41189: GO 41949
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41191: LD_ADDR_VAR 0 17
41195: PUSH
41196: LD_VAR 0 5
41200: PPUSH
41201: LD_INT 22
41203: PUSH
41204: LD_VAR 0 13
41208: PPUSH
41209: CALL_OW 255
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 30
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 30
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PPUSH
41250: CALL_OW 72
41254: ST_TO_ADDR
// for i = 1 to hexes do
41255: LD_ADDR_VAR 0 9
41259: PUSH
41260: DOUBLE
41261: LD_INT 1
41263: DEC
41264: ST_TO_ADDR
41265: LD_VAR 0 14
41269: PUSH
41270: FOR_TO
41271: IFFALSE 41947
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41273: LD_ADDR_VAR 0 13
41277: PUSH
41278: LD_VAR 0 14
41282: PUSH
41283: LD_VAR 0 9
41287: ARRAY
41288: PUSH
41289: LD_INT 1
41291: ARRAY
41292: PPUSH
41293: LD_VAR 0 14
41297: PUSH
41298: LD_VAR 0 9
41302: ARRAY
41303: PUSH
41304: LD_INT 2
41306: ARRAY
41307: PPUSH
41308: CALL_OW 428
41312: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41313: LD_VAR 0 14
41317: PUSH
41318: LD_VAR 0 9
41322: ARRAY
41323: PUSH
41324: LD_INT 1
41326: ARRAY
41327: PPUSH
41328: LD_VAR 0 14
41332: PUSH
41333: LD_VAR 0 9
41337: ARRAY
41338: PUSH
41339: LD_INT 2
41341: ARRAY
41342: PPUSH
41343: CALL_OW 351
41347: PUSH
41348: LD_VAR 0 14
41352: PUSH
41353: LD_VAR 0 9
41357: ARRAY
41358: PUSH
41359: LD_INT 1
41361: ARRAY
41362: PPUSH
41363: LD_VAR 0 14
41367: PUSH
41368: LD_VAR 0 9
41372: ARRAY
41373: PUSH
41374: LD_INT 2
41376: ARRAY
41377: PPUSH
41378: CALL_OW 488
41382: NOT
41383: OR
41384: PUSH
41385: LD_VAR 0 13
41389: PPUSH
41390: CALL_OW 247
41394: PUSH
41395: LD_INT 3
41397: EQUAL
41398: OR
41399: IFFALSE 41405
// exit ;
41401: POP
41402: POP
41403: GO 41949
// if not tmp then
41405: LD_VAR 0 13
41409: NOT
41410: IFFALSE 41414
// continue ;
41412: GO 41270
// result := true ;
41414: LD_ADDR_VAR 0 8
41418: PUSH
41419: LD_INT 1
41421: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41422: LD_VAR 0 6
41426: PUSH
41427: LD_VAR 0 13
41431: PPUSH
41432: CALL_OW 247
41436: PUSH
41437: LD_INT 2
41439: EQUAL
41440: AND
41441: PUSH
41442: LD_VAR 0 13
41446: PPUSH
41447: CALL_OW 263
41451: PUSH
41452: LD_INT 1
41454: EQUAL
41455: AND
41456: IFFALSE 41620
// begin if IsDrivenBy ( tmp ) then
41458: LD_VAR 0 13
41462: PPUSH
41463: CALL_OW 311
41467: IFFALSE 41471
// continue ;
41469: GO 41270
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41471: LD_VAR 0 6
41475: PPUSH
41476: LD_INT 3
41478: PUSH
41479: LD_INT 60
41481: PUSH
41482: EMPTY
41483: LIST
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 3
41491: PUSH
41492: LD_INT 55
41494: PUSH
41495: EMPTY
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PPUSH
41506: CALL_OW 72
41510: IFFALSE 41618
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41512: LD_ADDR_VAR 0 18
41516: PUSH
41517: LD_VAR 0 6
41521: PPUSH
41522: LD_INT 3
41524: PUSH
41525: LD_INT 60
41527: PUSH
41528: EMPTY
41529: LIST
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 3
41537: PUSH
41538: LD_INT 55
41540: PUSH
41541: EMPTY
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PPUSH
41552: CALL_OW 72
41556: PUSH
41557: LD_INT 1
41559: ARRAY
41560: ST_TO_ADDR
// if IsInUnit ( driver ) then
41561: LD_VAR 0 18
41565: PPUSH
41566: CALL_OW 310
41570: IFFALSE 41581
// ComExit ( driver ) ;
41572: LD_VAR 0 18
41576: PPUSH
41577: CALL 66994 0 1
// AddComEnterUnit ( driver , tmp ) ;
41581: LD_VAR 0 18
41585: PPUSH
41586: LD_VAR 0 13
41590: PPUSH
41591: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41595: LD_VAR 0 18
41599: PPUSH
41600: LD_VAR 0 7
41604: PPUSH
41605: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41609: LD_VAR 0 18
41613: PPUSH
41614: CALL_OW 181
// end ; continue ;
41618: GO 41270
// end ; if not cleaners or not tmp in cleaners then
41620: LD_VAR 0 6
41624: NOT
41625: PUSH
41626: LD_VAR 0 13
41630: PUSH
41631: LD_VAR 0 6
41635: IN
41636: NOT
41637: OR
41638: IFFALSE 41945
// begin if dep then
41640: LD_VAR 0 17
41644: IFFALSE 41780
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41646: LD_ADDR_VAR 0 16
41650: PUSH
41651: LD_VAR 0 17
41655: PUSH
41656: LD_INT 1
41658: ARRAY
41659: PPUSH
41660: CALL_OW 250
41664: PPUSH
41665: LD_VAR 0 17
41669: PUSH
41670: LD_INT 1
41672: ARRAY
41673: PPUSH
41674: CALL_OW 254
41678: PPUSH
41679: LD_INT 5
41681: PPUSH
41682: CALL_OW 272
41686: PUSH
41687: LD_VAR 0 17
41691: PUSH
41692: LD_INT 1
41694: ARRAY
41695: PPUSH
41696: CALL_OW 251
41700: PPUSH
41701: LD_VAR 0 17
41705: PUSH
41706: LD_INT 1
41708: ARRAY
41709: PPUSH
41710: CALL_OW 254
41714: PPUSH
41715: LD_INT 5
41717: PPUSH
41718: CALL_OW 273
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41727: LD_VAR 0 16
41731: PUSH
41732: LD_INT 1
41734: ARRAY
41735: PPUSH
41736: LD_VAR 0 16
41740: PUSH
41741: LD_INT 2
41743: ARRAY
41744: PPUSH
41745: CALL_OW 488
41749: IFFALSE 41780
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41751: LD_VAR 0 13
41755: PPUSH
41756: LD_VAR 0 16
41760: PUSH
41761: LD_INT 1
41763: ARRAY
41764: PPUSH
41765: LD_VAR 0 16
41769: PUSH
41770: LD_INT 2
41772: ARRAY
41773: PPUSH
41774: CALL_OW 111
// continue ;
41778: GO 41270
// end ; end ; r := GetDir ( tmp ) ;
41780: LD_ADDR_VAR 0 15
41784: PUSH
41785: LD_VAR 0 13
41789: PPUSH
41790: CALL_OW 254
41794: ST_TO_ADDR
// if r = 5 then
41795: LD_VAR 0 15
41799: PUSH
41800: LD_INT 5
41802: EQUAL
41803: IFFALSE 41813
// r := 0 ;
41805: LD_ADDR_VAR 0 15
41809: PUSH
41810: LD_INT 0
41812: ST_TO_ADDR
// for j = r to 5 do
41813: LD_ADDR_VAR 0 10
41817: PUSH
41818: DOUBLE
41819: LD_VAR 0 15
41823: DEC
41824: ST_TO_ADDR
41825: LD_INT 5
41827: PUSH
41828: FOR_TO
41829: IFFALSE 41943
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41831: LD_ADDR_VAR 0 11
41835: PUSH
41836: LD_VAR 0 13
41840: PPUSH
41841: CALL_OW 250
41845: PPUSH
41846: LD_VAR 0 10
41850: PPUSH
41851: LD_INT 2
41853: PPUSH
41854: CALL_OW 272
41858: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41859: LD_ADDR_VAR 0 12
41863: PUSH
41864: LD_VAR 0 13
41868: PPUSH
41869: CALL_OW 251
41873: PPUSH
41874: LD_VAR 0 10
41878: PPUSH
41879: LD_INT 2
41881: PPUSH
41882: CALL_OW 273
41886: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41887: LD_VAR 0 11
41891: PPUSH
41892: LD_VAR 0 12
41896: PPUSH
41897: CALL_OW 488
41901: PUSH
41902: LD_VAR 0 11
41906: PPUSH
41907: LD_VAR 0 12
41911: PPUSH
41912: CALL_OW 428
41916: NOT
41917: AND
41918: IFFALSE 41941
// begin ComMoveXY ( tmp , _x , _y ) ;
41920: LD_VAR 0 13
41924: PPUSH
41925: LD_VAR 0 11
41929: PPUSH
41930: LD_VAR 0 12
41934: PPUSH
41935: CALL_OW 111
// break ;
41939: GO 41943
// end ; end ;
41941: GO 41828
41943: POP
41944: POP
// end ; end ;
41945: GO 41270
41947: POP
41948: POP
// end ;
41949: LD_VAR 0 8
41953: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41954: LD_INT 0
41956: PPUSH
// result := true ;
41957: LD_ADDR_VAR 0 3
41961: PUSH
41962: LD_INT 1
41964: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41965: LD_VAR 0 2
41969: PUSH
41970: LD_INT 24
41972: DOUBLE
41973: EQUAL
41974: IFTRUE 41984
41976: LD_INT 33
41978: DOUBLE
41979: EQUAL
41980: IFTRUE 41984
41982: GO 42009
41984: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41985: LD_ADDR_VAR 0 3
41989: PUSH
41990: LD_INT 32
41992: PPUSH
41993: LD_VAR 0 1
41997: PPUSH
41998: CALL_OW 321
42002: PUSH
42003: LD_INT 2
42005: EQUAL
42006: ST_TO_ADDR
42007: GO 42325
42009: LD_INT 20
42011: DOUBLE
42012: EQUAL
42013: IFTRUE 42017
42015: GO 42042
42017: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42018: LD_ADDR_VAR 0 3
42022: PUSH
42023: LD_INT 6
42025: PPUSH
42026: LD_VAR 0 1
42030: PPUSH
42031: CALL_OW 321
42035: PUSH
42036: LD_INT 2
42038: EQUAL
42039: ST_TO_ADDR
42040: GO 42325
42042: LD_INT 22
42044: DOUBLE
42045: EQUAL
42046: IFTRUE 42056
42048: LD_INT 36
42050: DOUBLE
42051: EQUAL
42052: IFTRUE 42056
42054: GO 42081
42056: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42057: LD_ADDR_VAR 0 3
42061: PUSH
42062: LD_INT 15
42064: PPUSH
42065: LD_VAR 0 1
42069: PPUSH
42070: CALL_OW 321
42074: PUSH
42075: LD_INT 2
42077: EQUAL
42078: ST_TO_ADDR
42079: GO 42325
42081: LD_INT 30
42083: DOUBLE
42084: EQUAL
42085: IFTRUE 42089
42087: GO 42114
42089: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42090: LD_ADDR_VAR 0 3
42094: PUSH
42095: LD_INT 20
42097: PPUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: CALL_OW 321
42107: PUSH
42108: LD_INT 2
42110: EQUAL
42111: ST_TO_ADDR
42112: GO 42325
42114: LD_INT 28
42116: DOUBLE
42117: EQUAL
42118: IFTRUE 42128
42120: LD_INT 21
42122: DOUBLE
42123: EQUAL
42124: IFTRUE 42128
42126: GO 42153
42128: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42129: LD_ADDR_VAR 0 3
42133: PUSH
42134: LD_INT 21
42136: PPUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: CALL_OW 321
42146: PUSH
42147: LD_INT 2
42149: EQUAL
42150: ST_TO_ADDR
42151: GO 42325
42153: LD_INT 16
42155: DOUBLE
42156: EQUAL
42157: IFTRUE 42161
42159: GO 42186
42161: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42162: LD_ADDR_VAR 0 3
42166: PUSH
42167: LD_INT 84
42169: PPUSH
42170: LD_VAR 0 1
42174: PPUSH
42175: CALL_OW 321
42179: PUSH
42180: LD_INT 2
42182: EQUAL
42183: ST_TO_ADDR
42184: GO 42325
42186: LD_INT 19
42188: DOUBLE
42189: EQUAL
42190: IFTRUE 42200
42192: LD_INT 23
42194: DOUBLE
42195: EQUAL
42196: IFTRUE 42200
42198: GO 42225
42200: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42201: LD_ADDR_VAR 0 3
42205: PUSH
42206: LD_INT 83
42208: PPUSH
42209: LD_VAR 0 1
42213: PPUSH
42214: CALL_OW 321
42218: PUSH
42219: LD_INT 2
42221: EQUAL
42222: ST_TO_ADDR
42223: GO 42325
42225: LD_INT 17
42227: DOUBLE
42228: EQUAL
42229: IFTRUE 42233
42231: GO 42258
42233: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42234: LD_ADDR_VAR 0 3
42238: PUSH
42239: LD_INT 39
42241: PPUSH
42242: LD_VAR 0 1
42246: PPUSH
42247: CALL_OW 321
42251: PUSH
42252: LD_INT 2
42254: EQUAL
42255: ST_TO_ADDR
42256: GO 42325
42258: LD_INT 18
42260: DOUBLE
42261: EQUAL
42262: IFTRUE 42266
42264: GO 42291
42266: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42267: LD_ADDR_VAR 0 3
42271: PUSH
42272: LD_INT 40
42274: PPUSH
42275: LD_VAR 0 1
42279: PPUSH
42280: CALL_OW 321
42284: PUSH
42285: LD_INT 2
42287: EQUAL
42288: ST_TO_ADDR
42289: GO 42325
42291: LD_INT 27
42293: DOUBLE
42294: EQUAL
42295: IFTRUE 42299
42297: GO 42324
42299: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42300: LD_ADDR_VAR 0 3
42304: PUSH
42305: LD_INT 35
42307: PPUSH
42308: LD_VAR 0 1
42312: PPUSH
42313: CALL_OW 321
42317: PUSH
42318: LD_INT 2
42320: EQUAL
42321: ST_TO_ADDR
42322: GO 42325
42324: POP
// end ;
42325: LD_VAR 0 3
42329: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42330: LD_INT 0
42332: PPUSH
42333: PPUSH
42334: PPUSH
42335: PPUSH
42336: PPUSH
42337: PPUSH
42338: PPUSH
42339: PPUSH
42340: PPUSH
42341: PPUSH
42342: PPUSH
// result := false ;
42343: LD_ADDR_VAR 0 6
42347: PUSH
42348: LD_INT 0
42350: ST_TO_ADDR
// if btype = b_depot then
42351: LD_VAR 0 2
42355: PUSH
42356: LD_INT 0
42358: EQUAL
42359: IFFALSE 42371
// begin result := true ;
42361: LD_ADDR_VAR 0 6
42365: PUSH
42366: LD_INT 1
42368: ST_TO_ADDR
// exit ;
42369: GO 43197
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42371: LD_VAR 0 1
42375: NOT
42376: PUSH
42377: LD_VAR 0 1
42381: PPUSH
42382: CALL_OW 266
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: IN
42397: NOT
42398: OR
42399: PUSH
42400: LD_VAR 0 2
42404: NOT
42405: OR
42406: PUSH
42407: LD_VAR 0 5
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: LD_INT 4
42426: PUSH
42427: LD_INT 5
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: IN
42438: NOT
42439: OR
42440: PUSH
42441: LD_VAR 0 3
42445: PPUSH
42446: LD_VAR 0 4
42450: PPUSH
42451: CALL_OW 488
42455: NOT
42456: OR
42457: IFFALSE 42461
// exit ;
42459: GO 43197
// side := GetSide ( depot ) ;
42461: LD_ADDR_VAR 0 9
42465: PUSH
42466: LD_VAR 0 1
42470: PPUSH
42471: CALL_OW 255
42475: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42476: LD_VAR 0 9
42480: PPUSH
42481: LD_VAR 0 2
42485: PPUSH
42486: CALL 41954 0 2
42490: NOT
42491: IFFALSE 42495
// exit ;
42493: GO 43197
// pom := GetBase ( depot ) ;
42495: LD_ADDR_VAR 0 10
42499: PUSH
42500: LD_VAR 0 1
42504: PPUSH
42505: CALL_OW 274
42509: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42510: LD_ADDR_VAR 0 11
42514: PUSH
42515: LD_VAR 0 2
42519: PPUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: CALL_OW 248
42529: PPUSH
42530: CALL_OW 450
42534: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42535: LD_VAR 0 10
42539: PPUSH
42540: LD_INT 1
42542: PPUSH
42543: CALL_OW 275
42547: PUSH
42548: LD_VAR 0 11
42552: PUSH
42553: LD_INT 1
42555: ARRAY
42556: GREATEREQUAL
42557: PUSH
42558: LD_VAR 0 10
42562: PPUSH
42563: LD_INT 2
42565: PPUSH
42566: CALL_OW 275
42570: PUSH
42571: LD_VAR 0 11
42575: PUSH
42576: LD_INT 2
42578: ARRAY
42579: GREATEREQUAL
42580: AND
42581: PUSH
42582: LD_VAR 0 10
42586: PPUSH
42587: LD_INT 3
42589: PPUSH
42590: CALL_OW 275
42594: PUSH
42595: LD_VAR 0 11
42599: PUSH
42600: LD_INT 3
42602: ARRAY
42603: GREATEREQUAL
42604: AND
42605: NOT
42606: IFFALSE 42610
// exit ;
42608: GO 43197
// if GetBType ( depot ) = b_depot then
42610: LD_VAR 0 1
42614: PPUSH
42615: CALL_OW 266
42619: PUSH
42620: LD_INT 0
42622: EQUAL
42623: IFFALSE 42635
// dist := 28 else
42625: LD_ADDR_VAR 0 14
42629: PUSH
42630: LD_INT 28
42632: ST_TO_ADDR
42633: GO 42643
// dist := 36 ;
42635: LD_ADDR_VAR 0 14
42639: PUSH
42640: LD_INT 36
42642: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42643: LD_VAR 0 1
42647: PPUSH
42648: LD_VAR 0 3
42652: PPUSH
42653: LD_VAR 0 4
42657: PPUSH
42658: CALL_OW 297
42662: PUSH
42663: LD_VAR 0 14
42667: GREATER
42668: IFFALSE 42672
// exit ;
42670: GO 43197
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42672: LD_ADDR_VAR 0 12
42676: PUSH
42677: LD_VAR 0 2
42681: PPUSH
42682: LD_VAR 0 3
42686: PPUSH
42687: LD_VAR 0 4
42691: PPUSH
42692: LD_VAR 0 5
42696: PPUSH
42697: LD_VAR 0 1
42701: PPUSH
42702: CALL_OW 248
42706: PPUSH
42707: LD_INT 0
42709: PPUSH
42710: CALL 43202 0 6
42714: ST_TO_ADDR
// if not hexes then
42715: LD_VAR 0 12
42719: NOT
42720: IFFALSE 42724
// exit ;
42722: GO 43197
// hex := GetHexInfo ( x , y ) ;
42724: LD_ADDR_VAR 0 15
42728: PUSH
42729: LD_VAR 0 3
42733: PPUSH
42734: LD_VAR 0 4
42738: PPUSH
42739: CALL_OW 546
42743: ST_TO_ADDR
// if hex [ 1 ] then
42744: LD_VAR 0 15
42748: PUSH
42749: LD_INT 1
42751: ARRAY
42752: IFFALSE 42756
// exit ;
42754: GO 43197
// height := hex [ 2 ] ;
42756: LD_ADDR_VAR 0 13
42760: PUSH
42761: LD_VAR 0 15
42765: PUSH
42766: LD_INT 2
42768: ARRAY
42769: ST_TO_ADDR
// for i = 1 to hexes do
42770: LD_ADDR_VAR 0 7
42774: PUSH
42775: DOUBLE
42776: LD_INT 1
42778: DEC
42779: ST_TO_ADDR
42780: LD_VAR 0 12
42784: PUSH
42785: FOR_TO
42786: IFFALSE 43116
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42788: LD_VAR 0 12
42792: PUSH
42793: LD_VAR 0 7
42797: ARRAY
42798: PUSH
42799: LD_INT 1
42801: ARRAY
42802: PPUSH
42803: LD_VAR 0 12
42807: PUSH
42808: LD_VAR 0 7
42812: ARRAY
42813: PUSH
42814: LD_INT 2
42816: ARRAY
42817: PPUSH
42818: CALL_OW 488
42822: NOT
42823: PUSH
42824: LD_VAR 0 12
42828: PUSH
42829: LD_VAR 0 7
42833: ARRAY
42834: PUSH
42835: LD_INT 1
42837: ARRAY
42838: PPUSH
42839: LD_VAR 0 12
42843: PUSH
42844: LD_VAR 0 7
42848: ARRAY
42849: PUSH
42850: LD_INT 2
42852: ARRAY
42853: PPUSH
42854: CALL_OW 428
42858: PUSH
42859: LD_INT 0
42861: GREATER
42862: OR
42863: PUSH
42864: LD_VAR 0 12
42868: PUSH
42869: LD_VAR 0 7
42873: ARRAY
42874: PUSH
42875: LD_INT 1
42877: ARRAY
42878: PPUSH
42879: LD_VAR 0 12
42883: PUSH
42884: LD_VAR 0 7
42888: ARRAY
42889: PUSH
42890: LD_INT 2
42892: ARRAY
42893: PPUSH
42894: CALL_OW 351
42898: OR
42899: IFFALSE 42905
// exit ;
42901: POP
42902: POP
42903: GO 43197
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42905: LD_ADDR_VAR 0 8
42909: PUSH
42910: LD_VAR 0 12
42914: PUSH
42915: LD_VAR 0 7
42919: ARRAY
42920: PUSH
42921: LD_INT 1
42923: ARRAY
42924: PPUSH
42925: LD_VAR 0 12
42929: PUSH
42930: LD_VAR 0 7
42934: ARRAY
42935: PUSH
42936: LD_INT 2
42938: ARRAY
42939: PPUSH
42940: CALL_OW 546
42944: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42945: LD_VAR 0 8
42949: PUSH
42950: LD_INT 1
42952: ARRAY
42953: PUSH
42954: LD_VAR 0 8
42958: PUSH
42959: LD_INT 2
42961: ARRAY
42962: PUSH
42963: LD_VAR 0 13
42967: PUSH
42968: LD_INT 2
42970: PLUS
42971: GREATER
42972: OR
42973: PUSH
42974: LD_VAR 0 8
42978: PUSH
42979: LD_INT 2
42981: ARRAY
42982: PUSH
42983: LD_VAR 0 13
42987: PUSH
42988: LD_INT 2
42990: MINUS
42991: LESS
42992: OR
42993: PUSH
42994: LD_VAR 0 8
42998: PUSH
42999: LD_INT 3
43001: ARRAY
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 8
43008: PUSH
43009: LD_INT 9
43011: PUSH
43012: LD_INT 10
43014: PUSH
43015: LD_INT 11
43017: PUSH
43018: LD_INT 12
43020: PUSH
43021: LD_INT 13
43023: PUSH
43024: LD_INT 16
43026: PUSH
43027: LD_INT 17
43029: PUSH
43030: LD_INT 18
43032: PUSH
43033: LD_INT 19
43035: PUSH
43036: LD_INT 20
43038: PUSH
43039: LD_INT 21
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: IN
43057: NOT
43058: OR
43059: PUSH
43060: LD_VAR 0 8
43064: PUSH
43065: LD_INT 5
43067: ARRAY
43068: NOT
43069: OR
43070: PUSH
43071: LD_VAR 0 8
43075: PUSH
43076: LD_INT 6
43078: ARRAY
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 7
43088: PUSH
43089: LD_INT 9
43091: PUSH
43092: LD_INT 10
43094: PUSH
43095: LD_INT 11
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: IN
43106: NOT
43107: OR
43108: IFFALSE 43114
// exit ;
43110: POP
43111: POP
43112: GO 43197
// end ;
43114: GO 42785
43116: POP
43117: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43118: LD_VAR 0 9
43122: PPUSH
43123: LD_VAR 0 3
43127: PPUSH
43128: LD_VAR 0 4
43132: PPUSH
43133: LD_INT 20
43135: PPUSH
43136: CALL 35120 0 4
43140: PUSH
43141: LD_INT 4
43143: ARRAY
43144: IFFALSE 43148
// exit ;
43146: GO 43197
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43148: LD_VAR 0 2
43152: PUSH
43153: LD_INT 29
43155: PUSH
43156: LD_INT 30
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: IN
43163: PUSH
43164: LD_VAR 0 3
43168: PPUSH
43169: LD_VAR 0 4
43173: PPUSH
43174: LD_VAR 0 9
43178: PPUSH
43179: CALL_OW 440
43183: NOT
43184: AND
43185: IFFALSE 43189
// exit ;
43187: GO 43197
// result := true ;
43189: LD_ADDR_VAR 0 6
43193: PUSH
43194: LD_INT 1
43196: ST_TO_ADDR
// end ;
43197: LD_VAR 0 6
43201: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43202: LD_INT 0
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
43212: PPUSH
43213: PPUSH
43214: PPUSH
43215: PPUSH
43216: PPUSH
43217: PPUSH
43218: PPUSH
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
43230: PPUSH
43231: PPUSH
43232: PPUSH
43233: PPUSH
43234: PPUSH
43235: PPUSH
43236: PPUSH
43237: PPUSH
43238: PPUSH
43239: PPUSH
43240: PPUSH
43241: PPUSH
43242: PPUSH
43243: PPUSH
43244: PPUSH
43245: PPUSH
43246: PPUSH
43247: PPUSH
43248: PPUSH
43249: PPUSH
43250: PPUSH
43251: PPUSH
43252: PPUSH
43253: PPUSH
43254: PPUSH
43255: PPUSH
43256: PPUSH
43257: PPUSH
43258: PPUSH
43259: PPUSH
43260: PPUSH
43261: PPUSH
// result = [ ] ;
43262: LD_ADDR_VAR 0 7
43266: PUSH
43267: EMPTY
43268: ST_TO_ADDR
// temp_list = [ ] ;
43269: LD_ADDR_VAR 0 9
43273: PUSH
43274: EMPTY
43275: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43276: LD_VAR 0 4
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 3
43292: PUSH
43293: LD_INT 4
43295: PUSH
43296: LD_INT 5
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: IN
43307: NOT
43308: PUSH
43309: LD_VAR 0 1
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: IN
43324: PUSH
43325: LD_VAR 0 5
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: LIST
43343: IN
43344: NOT
43345: AND
43346: OR
43347: IFFALSE 43351
// exit ;
43349: GO 61742
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43351: LD_VAR 0 1
43355: PUSH
43356: LD_INT 6
43358: PUSH
43359: LD_INT 7
43361: PUSH
43362: LD_INT 8
43364: PUSH
43365: LD_INT 13
43367: PUSH
43368: LD_INT 12
43370: PUSH
43371: LD_INT 15
43373: PUSH
43374: LD_INT 11
43376: PUSH
43377: LD_INT 14
43379: PUSH
43380: LD_INT 10
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: IN
43394: IFFALSE 43404
// btype = b_lab ;
43396: LD_ADDR_VAR 0 1
43400: PUSH
43401: LD_INT 6
43403: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43404: LD_VAR 0 6
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: IN
43423: NOT
43424: PUSH
43425: LD_VAR 0 1
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: LD_INT 3
43441: PUSH
43442: LD_INT 6
43444: PUSH
43445: LD_INT 36
43447: PUSH
43448: LD_INT 4
43450: PUSH
43451: LD_INT 5
43453: PUSH
43454: LD_INT 31
43456: PUSH
43457: LD_INT 32
43459: PUSH
43460: LD_INT 33
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: IN
43476: NOT
43477: PUSH
43478: LD_VAR 0 6
43482: PUSH
43483: LD_INT 1
43485: EQUAL
43486: AND
43487: OR
43488: PUSH
43489: LD_VAR 0 1
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 3
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: IN
43504: NOT
43505: PUSH
43506: LD_VAR 0 6
43510: PUSH
43511: LD_INT 2
43513: EQUAL
43514: AND
43515: OR
43516: IFFALSE 43526
// mode = 0 ;
43518: LD_ADDR_VAR 0 6
43522: PUSH
43523: LD_INT 0
43525: ST_TO_ADDR
// case mode of 0 :
43526: LD_VAR 0 6
43530: PUSH
43531: LD_INT 0
43533: DOUBLE
43534: EQUAL
43535: IFTRUE 43539
43537: GO 54992
43539: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43540: LD_ADDR_VAR 0 11
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 3
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 3
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43733: LD_ADDR_VAR 0 12
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 3
43890: NEG
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 3
43901: NEG
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43929: LD_ADDR_VAR 0 13
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 3
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 3
44088: NEG
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: NEG
44101: PUSH
44102: LD_INT 3
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44128: LD_ADDR_VAR 0 14
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 3
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44324: LD_ADDR_VAR 0 15
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 3
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44517: LD_ADDR_VAR 0 16
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 3
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 3
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44710: LD_ADDR_VAR 0 17
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44940: LD_ADDR_VAR 0 18
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45170: LD_ADDR_VAR 0 19
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45400: LD_ADDR_VAR 0 20
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45630: LD_ADDR_VAR 0 21
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45860: LD_ADDR_VAR 0 22
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46090: LD_ADDR_VAR 0 23
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 3
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: LD_INT 3
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46370: LD_ADDR_VAR 0 24
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 3
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 3
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46646: LD_ADDR_VAR 0 25
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 3
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46920: LD_ADDR_VAR 0 26
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 3
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 3
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47196: LD_ADDR_VAR 0 27
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 3
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 3
47441: NEG
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47476: LD_ADDR_VAR 0 28
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: LD_INT 3
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 3
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: NEG
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 3
47723: NEG
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47758: LD_ADDR_VAR 0 29
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 3
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 3
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48037: LD_ADDR_VAR 0 30
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 3
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: LD_INT 3
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48315: LD_ADDR_VAR 0 31
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: LD_INT 3
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 3
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48593: LD_ADDR_VAR 0 32
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 3
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 3
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 3
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48871: LD_ADDR_VAR 0 33
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 3
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49150: LD_ADDR_VAR 0 34
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: LD_INT 3
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49430: LD_ADDR_VAR 0 35
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49542: LD_ADDR_VAR 0 36
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49654: LD_ADDR_VAR 0 37
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49766: LD_ADDR_VAR 0 38
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49878: LD_ADDR_VAR 0 39
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49990: LD_ADDR_VAR 0 40
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50102: LD_ADDR_VAR 0 41
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 3
50399: NEG
50400: PUSH
50401: LD_INT 2
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: LD_INT 3
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50452: LD_ADDR_VAR 0 42
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: LD_INT 3
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 3
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 3
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 3
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 3
50761: NEG
50762: PUSH
50763: LD_INT 3
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50802: LD_ADDR_VAR 0 43
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 3
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 3
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 3
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 3
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 3
51098: NEG
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51150: LD_ADDR_VAR 0 44
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: LD_INT 3
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51500: LD_ADDR_VAR 0 45
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 3
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 3
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 3
51797: NEG
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51850: LD_ADDR_VAR 0 46
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 3
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 3
52146: NEG
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 3
52157: NEG
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52198: LD_ADDR_VAR 0 47
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52349: LD_ADDR_VAR 0 48
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52496: LD_ADDR_VAR 0 49
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52640: LD_ADDR_VAR 0 50
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52784: LD_ADDR_VAR 0 51
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52931: LD_ADDR_VAR 0 52
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53082: LD_ADDR_VAR 0 53
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53312: LD_ADDR_VAR 0 54
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53542: LD_ADDR_VAR 0 55
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53772: LD_ADDR_VAR 0 56
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54002: LD_ADDR_VAR 0 57
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54232: LD_ADDR_VAR 0 58
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54462: LD_ADDR_VAR 0 59
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54550: LD_ADDR_VAR 0 60
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54638: LD_ADDR_VAR 0 61
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54726: LD_ADDR_VAR 0 62
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54814: LD_ADDR_VAR 0 63
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54902: LD_ADDR_VAR 0 64
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// end ; 1 :
54990: GO 60887
54992: LD_INT 1
54994: DOUBLE
54995: EQUAL
54996: IFTRUE 55000
54998: GO 57623
55000: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55001: LD_ADDR_VAR 0 11
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 3
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55045: LD_ADDR_VAR 0 12
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55086: LD_ADDR_VAR 0 13
55090: PUSH
55091: LD_INT 3
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55126: LD_ADDR_VAR 0 14
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55167: LD_ADDR_VAR 0 15
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55211: LD_ADDR_VAR 0 16
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 3
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: LD_INT 3
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55257: LD_ADDR_VAR 0 17
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 3
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 3
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55301: LD_ADDR_VAR 0 18
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55342: LD_ADDR_VAR 0 19
55346: PUSH
55347: LD_INT 3
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: LIST
55381: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55382: LD_ADDR_VAR 0 20
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 3
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55423: LD_ADDR_VAR 0 21
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 3
55441: NEG
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55467: LD_ADDR_VAR 0 22
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: NEG
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: NEG
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: LIST
55512: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55513: LD_ADDR_VAR 0 23
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 4
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 3
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55557: LD_ADDR_VAR 0 24
55561: PUSH
55562: LD_INT 3
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55598: LD_ADDR_VAR 0 25
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 4
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55638: LD_ADDR_VAR 0 26
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 4
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: LIST
55678: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55679: LD_ADDR_VAR 0 27
55683: PUSH
55684: LD_INT 3
55686: NEG
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 3
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 4
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55723: LD_ADDR_VAR 0 28
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: LD_INT 3
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 3
55742: NEG
55743: PUSH
55744: LD_INT 4
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 4
55754: NEG
55755: PUSH
55756: LD_INT 3
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55769: LD_ADDR_VAR 0 29
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: LD_INT 3
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 4
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 4
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 3
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 5
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 5
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 4
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 6
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 6
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: LD_INT 5
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55924: LD_ADDR_VAR 0 30
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 4
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 4
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 5
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 5
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 5
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 6
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 6
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56067: LD_ADDR_VAR 0 31
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 4
56114: PUSH
56115: LD_INT 4
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 3
56124: PUSH
56125: LD_INT 4
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 5
56134: PUSH
56135: LD_INT 4
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 5
56144: PUSH
56145: LD_INT 5
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 4
56154: PUSH
56155: LD_INT 5
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 6
56164: PUSH
56165: LD_INT 5
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 6
56174: PUSH
56175: LD_INT 6
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 5
56184: PUSH
56185: LD_INT 6
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56206: LD_ADDR_VAR 0 32
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 4
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 5
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 4
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: LD_INT 6
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 6
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 5
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56349: LD_ADDR_VAR 0 33
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 3
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 3
56390: NEG
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 4
56401: NEG
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 4
56412: NEG
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 4
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 5
56435: NEG
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 5
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 5
56458: NEG
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 6
56469: NEG
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 6
56480: NEG
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56504: LD_ADDR_VAR 0 34
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: LD_INT 3
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: LD_INT 4
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 4
56559: NEG
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 4
56571: NEG
56572: PUSH
56573: LD_INT 4
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 4
56583: NEG
56584: PUSH
56585: LD_INT 5
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 5
56595: NEG
56596: PUSH
56597: LD_INT 4
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 5
56607: NEG
56608: PUSH
56609: LD_INT 5
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 5
56619: NEG
56620: PUSH
56621: LD_INT 6
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 6
56631: NEG
56632: PUSH
56633: LD_INT 5
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 6
56643: NEG
56644: PUSH
56645: LD_INT 6
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56667: LD_ADDR_VAR 0 41
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: LD_INT 3
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56711: LD_ADDR_VAR 0 42
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56752: LD_ADDR_VAR 0 43
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 3
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: LIST
56791: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56792: LD_ADDR_VAR 0 44
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56833: LD_ADDR_VAR 0 45
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56877: LD_ADDR_VAR 0 46
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56923: LD_ADDR_VAR 0 47
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: LD_INT 3
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 3
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56956: LD_ADDR_VAR 0 48
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56987: LD_ADDR_VAR 0 49
56991: PUSH
56992: LD_INT 3
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 3
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57016: LD_ADDR_VAR 0 50
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: LD_INT 3
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 3
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57045: LD_ADDR_VAR 0 51
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57076: LD_ADDR_VAR 0 52
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 3
57095: NEG
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57109: LD_ADDR_VAR 0 53
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 3
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57153: LD_ADDR_VAR 0 54
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: LIST
57193: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57194: LD_ADDR_VAR 0 55
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57234: LD_ADDR_VAR 0 56
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: LIST
57274: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57275: LD_ADDR_VAR 0 57
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57319: LD_ADDR_VAR 0 58
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: LD_INT 3
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 3
57338: NEG
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 3
57350: NEG
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57365: LD_ADDR_VAR 0 59
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: LIST
57408: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57409: LD_ADDR_VAR 0 60
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57450: LD_ADDR_VAR 0 61
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57490: LD_ADDR_VAR 0 62
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57531: LD_ADDR_VAR 0 63
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57575: LD_ADDR_VAR 0 64
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// end ; 2 :
57621: GO 60887
57623: LD_INT 2
57625: DOUBLE
57626: EQUAL
57627: IFTRUE 57631
57629: GO 60886
57631: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57632: LD_ADDR_VAR 0 29
57636: PUSH
57637: LD_INT 4
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 4
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 5
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 5
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 4
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 5
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 3
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 4
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 4
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: LD_INT 4
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 4
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 4
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 5
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 5
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 5
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 3
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 4
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 4
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 4
57994: NEG
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 4
58017: NEG
58018: PUSH
58019: LD_INT 4
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 4
58029: NEG
58030: PUSH
58031: LD_INT 5
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 3
58041: NEG
58042: PUSH
58043: LD_INT 4
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 3
58053: NEG
58054: PUSH
58055: LD_INT 3
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 4
58065: NEG
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 5
58077: NEG
58078: PUSH
58079: LD_INT 4
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 5
58089: NEG
58090: PUSH
58091: LD_INT 5
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: LD_INT 5
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 5
58113: NEG
58114: PUSH
58115: LD_INT 3
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58170: LD_ADDR_VAR 0 30
58174: PUSH
58175: LD_INT 4
58177: PUSH
58178: LD_INT 4
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 4
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 5
58197: PUSH
58198: LD_INT 4
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 5
58207: PUSH
58208: LD_INT 5
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 4
58217: PUSH
58218: LD_INT 5
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: LD_INT 4
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: LD_INT 3
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 5
58247: PUSH
58248: LD_INT 3
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: LD_INT 5
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 3
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: LD_INT 3
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 4
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 4
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 4
58360: NEG
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 4
58371: NEG
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 4
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 5
58416: NEG
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 5
58427: NEG
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 5
58439: NEG
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: NEG
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 3
58462: NEG
58463: PUSH
58464: LD_INT 3
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: LD_INT 4
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 4
58522: NEG
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 4
58534: NEG
58535: PUSH
58536: LD_INT 4
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: LD_INT 4
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 4
58558: NEG
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 4
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 5
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 4
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 3
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 4
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: LD_INT 5
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: LD_INT 3
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: LD_INT 5
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58717: LD_ADDR_VAR 0 31
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 4
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 4
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 5
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 5
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: LD_INT 5
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 4
58873: NEG
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 4
58884: NEG
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 4
58896: NEG
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 4
58919: NEG
58920: PUSH
58921: LD_INT 4
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 4
58931: NEG
58932: PUSH
58933: LD_INT 5
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: LD_INT 4
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 3
58955: NEG
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 4
58967: NEG
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 5
58979: NEG
58980: PUSH
58981: LD_INT 4
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 5
58991: NEG
58992: PUSH
58993: LD_INT 5
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: LD_INT 5
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 5
59015: NEG
59016: PUSH
59017: LD_INT 3
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 3
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 4
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: LD_INT 4
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 4
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 4
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 5
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 5
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 4
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 5
59212: PUSH
59213: LD_INT 2
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59267: LD_ADDR_VAR 0 32
59271: PUSH
59272: LD_INT 4
59274: NEG
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 4
59285: NEG
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 4
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 5
59330: NEG
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 5
59341: NEG
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 5
59353: NEG
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: NEG
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: LD_INT 4
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: LD_INT 3
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 4
59436: NEG
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 4
59448: NEG
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 4
59472: NEG
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: LD_INT 4
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 5
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 4
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 3
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 4
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: LD_INT 5
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: LD_INT 5
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 4
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 4
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 4
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 4
59679: PUSH
59680: LD_INT 4
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 4
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 5
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 5
59709: PUSH
59710: LD_INT 5
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 4
59719: PUSH
59720: LD_INT 5
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: LD_INT 4
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 3
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 5
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: LD_INT 5
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59814: LD_ADDR_VAR 0 33
59818: PUSH
59819: LD_INT 4
59821: NEG
59822: PUSH
59823: LD_INT 4
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 4
59833: NEG
59834: PUSH
59835: LD_INT 5
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: NEG
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 4
59869: NEG
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 5
59881: NEG
59882: PUSH
59883: LD_INT 4
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 5
59893: NEG
59894: PUSH
59895: LD_INT 5
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 3
59905: NEG
59906: PUSH
59907: LD_INT 5
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 5
59917: NEG
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 4
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 3
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 4
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: LD_INT 4
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 4
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 5
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 5
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 4
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 3
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 3
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 5
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 3
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 3
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 4
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 4
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: LD_INT 4
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 4
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: LD_INT 4
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 4
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 4
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 5
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 5
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: LD_INT 5
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60352: LD_ADDR_VAR 0 34
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 4
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 5
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 4
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: LD_INT 4
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 5
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 2
60438: PUSH
60439: LD_INT 3
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: LD_INT 5
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 3
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 4
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 4
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 3
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 4
60554: PUSH
60555: LD_INT 4
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 5
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 5
60584: PUSH
60585: LD_INT 5
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: LD_INT 5
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: LD_INT 4
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 3
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: LD_INT 5
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 3
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: LD_INT 4
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 4
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 3
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: LD_INT 4
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: NEG
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 4
60737: NEG
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 4
60748: NEG
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 3
60760: NEG
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 4
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 5
60793: NEG
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 5
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 5
60816: NEG
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: NEG
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: ST_TO_ADDR
// end ; end ;
60884: GO 60887
60886: POP
// case btype of b_depot , b_warehouse :
60887: LD_VAR 0 1
60891: PUSH
60892: LD_INT 0
60894: DOUBLE
60895: EQUAL
60896: IFTRUE 60906
60898: LD_INT 1
60900: DOUBLE
60901: EQUAL
60902: IFTRUE 60906
60904: GO 61107
60906: POP
// case nation of nation_american :
60907: LD_VAR 0 5
60911: PUSH
60912: LD_INT 1
60914: DOUBLE
60915: EQUAL
60916: IFTRUE 60920
60918: GO 60976
60920: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60921: LD_ADDR_VAR 0 9
60925: PUSH
60926: LD_VAR 0 11
60930: PUSH
60931: LD_VAR 0 12
60935: PUSH
60936: LD_VAR 0 13
60940: PUSH
60941: LD_VAR 0 14
60945: PUSH
60946: LD_VAR 0 15
60950: PUSH
60951: LD_VAR 0 16
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: PUSH
60964: LD_VAR 0 4
60968: PUSH
60969: LD_INT 1
60971: PLUS
60972: ARRAY
60973: ST_TO_ADDR
60974: GO 61105
60976: LD_INT 2
60978: DOUBLE
60979: EQUAL
60980: IFTRUE 60984
60982: GO 61040
60984: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60985: LD_ADDR_VAR 0 9
60989: PUSH
60990: LD_VAR 0 17
60994: PUSH
60995: LD_VAR 0 18
60999: PUSH
61000: LD_VAR 0 19
61004: PUSH
61005: LD_VAR 0 20
61009: PUSH
61010: LD_VAR 0 21
61014: PUSH
61015: LD_VAR 0 22
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: PUSH
61028: LD_VAR 0 4
61032: PUSH
61033: LD_INT 1
61035: PLUS
61036: ARRAY
61037: ST_TO_ADDR
61038: GO 61105
61040: LD_INT 3
61042: DOUBLE
61043: EQUAL
61044: IFTRUE 61048
61046: GO 61104
61048: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61049: LD_ADDR_VAR 0 9
61053: PUSH
61054: LD_VAR 0 23
61058: PUSH
61059: LD_VAR 0 24
61063: PUSH
61064: LD_VAR 0 25
61068: PUSH
61069: LD_VAR 0 26
61073: PUSH
61074: LD_VAR 0 27
61078: PUSH
61079: LD_VAR 0 28
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: PUSH
61092: LD_VAR 0 4
61096: PUSH
61097: LD_INT 1
61099: PLUS
61100: ARRAY
61101: ST_TO_ADDR
61102: GO 61105
61104: POP
61105: GO 61660
61107: LD_INT 2
61109: DOUBLE
61110: EQUAL
61111: IFTRUE 61121
61113: LD_INT 3
61115: DOUBLE
61116: EQUAL
61117: IFTRUE 61121
61119: GO 61177
61121: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61122: LD_ADDR_VAR 0 9
61126: PUSH
61127: LD_VAR 0 29
61131: PUSH
61132: LD_VAR 0 30
61136: PUSH
61137: LD_VAR 0 31
61141: PUSH
61142: LD_VAR 0 32
61146: PUSH
61147: LD_VAR 0 33
61151: PUSH
61152: LD_VAR 0 34
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: PUSH
61165: LD_VAR 0 4
61169: PUSH
61170: LD_INT 1
61172: PLUS
61173: ARRAY
61174: ST_TO_ADDR
61175: GO 61660
61177: LD_INT 16
61179: DOUBLE
61180: EQUAL
61181: IFTRUE 61239
61183: LD_INT 17
61185: DOUBLE
61186: EQUAL
61187: IFTRUE 61239
61189: LD_INT 18
61191: DOUBLE
61192: EQUAL
61193: IFTRUE 61239
61195: LD_INT 19
61197: DOUBLE
61198: EQUAL
61199: IFTRUE 61239
61201: LD_INT 22
61203: DOUBLE
61204: EQUAL
61205: IFTRUE 61239
61207: LD_INT 20
61209: DOUBLE
61210: EQUAL
61211: IFTRUE 61239
61213: LD_INT 21
61215: DOUBLE
61216: EQUAL
61217: IFTRUE 61239
61219: LD_INT 23
61221: DOUBLE
61222: EQUAL
61223: IFTRUE 61239
61225: LD_INT 24
61227: DOUBLE
61228: EQUAL
61229: IFTRUE 61239
61231: LD_INT 25
61233: DOUBLE
61234: EQUAL
61235: IFTRUE 61239
61237: GO 61295
61239: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61240: LD_ADDR_VAR 0 9
61244: PUSH
61245: LD_VAR 0 35
61249: PUSH
61250: LD_VAR 0 36
61254: PUSH
61255: LD_VAR 0 37
61259: PUSH
61260: LD_VAR 0 38
61264: PUSH
61265: LD_VAR 0 39
61269: PUSH
61270: LD_VAR 0 40
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: PUSH
61283: LD_VAR 0 4
61287: PUSH
61288: LD_INT 1
61290: PLUS
61291: ARRAY
61292: ST_TO_ADDR
61293: GO 61660
61295: LD_INT 6
61297: DOUBLE
61298: EQUAL
61299: IFTRUE 61351
61301: LD_INT 7
61303: DOUBLE
61304: EQUAL
61305: IFTRUE 61351
61307: LD_INT 8
61309: DOUBLE
61310: EQUAL
61311: IFTRUE 61351
61313: LD_INT 13
61315: DOUBLE
61316: EQUAL
61317: IFTRUE 61351
61319: LD_INT 12
61321: DOUBLE
61322: EQUAL
61323: IFTRUE 61351
61325: LD_INT 15
61327: DOUBLE
61328: EQUAL
61329: IFTRUE 61351
61331: LD_INT 11
61333: DOUBLE
61334: EQUAL
61335: IFTRUE 61351
61337: LD_INT 14
61339: DOUBLE
61340: EQUAL
61341: IFTRUE 61351
61343: LD_INT 10
61345: DOUBLE
61346: EQUAL
61347: IFTRUE 61351
61349: GO 61407
61351: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61352: LD_ADDR_VAR 0 9
61356: PUSH
61357: LD_VAR 0 41
61361: PUSH
61362: LD_VAR 0 42
61366: PUSH
61367: LD_VAR 0 43
61371: PUSH
61372: LD_VAR 0 44
61376: PUSH
61377: LD_VAR 0 45
61381: PUSH
61382: LD_VAR 0 46
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: PUSH
61395: LD_VAR 0 4
61399: PUSH
61400: LD_INT 1
61402: PLUS
61403: ARRAY
61404: ST_TO_ADDR
61405: GO 61660
61407: LD_INT 36
61409: DOUBLE
61410: EQUAL
61411: IFTRUE 61415
61413: GO 61471
61415: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61416: LD_ADDR_VAR 0 9
61420: PUSH
61421: LD_VAR 0 47
61425: PUSH
61426: LD_VAR 0 48
61430: PUSH
61431: LD_VAR 0 49
61435: PUSH
61436: LD_VAR 0 50
61440: PUSH
61441: LD_VAR 0 51
61445: PUSH
61446: LD_VAR 0 52
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: PUSH
61459: LD_VAR 0 4
61463: PUSH
61464: LD_INT 1
61466: PLUS
61467: ARRAY
61468: ST_TO_ADDR
61469: GO 61660
61471: LD_INT 4
61473: DOUBLE
61474: EQUAL
61475: IFTRUE 61497
61477: LD_INT 5
61479: DOUBLE
61480: EQUAL
61481: IFTRUE 61497
61483: LD_INT 34
61485: DOUBLE
61486: EQUAL
61487: IFTRUE 61497
61489: LD_INT 37
61491: DOUBLE
61492: EQUAL
61493: IFTRUE 61497
61495: GO 61553
61497: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61498: LD_ADDR_VAR 0 9
61502: PUSH
61503: LD_VAR 0 53
61507: PUSH
61508: LD_VAR 0 54
61512: PUSH
61513: LD_VAR 0 55
61517: PUSH
61518: LD_VAR 0 56
61522: PUSH
61523: LD_VAR 0 57
61527: PUSH
61528: LD_VAR 0 58
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: PUSH
61541: LD_VAR 0 4
61545: PUSH
61546: LD_INT 1
61548: PLUS
61549: ARRAY
61550: ST_TO_ADDR
61551: GO 61660
61553: LD_INT 31
61555: DOUBLE
61556: EQUAL
61557: IFTRUE 61603
61559: LD_INT 32
61561: DOUBLE
61562: EQUAL
61563: IFTRUE 61603
61565: LD_INT 33
61567: DOUBLE
61568: EQUAL
61569: IFTRUE 61603
61571: LD_INT 27
61573: DOUBLE
61574: EQUAL
61575: IFTRUE 61603
61577: LD_INT 26
61579: DOUBLE
61580: EQUAL
61581: IFTRUE 61603
61583: LD_INT 28
61585: DOUBLE
61586: EQUAL
61587: IFTRUE 61603
61589: LD_INT 29
61591: DOUBLE
61592: EQUAL
61593: IFTRUE 61603
61595: LD_INT 30
61597: DOUBLE
61598: EQUAL
61599: IFTRUE 61603
61601: GO 61659
61603: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61604: LD_ADDR_VAR 0 9
61608: PUSH
61609: LD_VAR 0 59
61613: PUSH
61614: LD_VAR 0 60
61618: PUSH
61619: LD_VAR 0 61
61623: PUSH
61624: LD_VAR 0 62
61628: PUSH
61629: LD_VAR 0 63
61633: PUSH
61634: LD_VAR 0 64
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: PUSH
61647: LD_VAR 0 4
61651: PUSH
61652: LD_INT 1
61654: PLUS
61655: ARRAY
61656: ST_TO_ADDR
61657: GO 61660
61659: POP
// temp_list2 = [ ] ;
61660: LD_ADDR_VAR 0 10
61664: PUSH
61665: EMPTY
61666: ST_TO_ADDR
// for i in temp_list do
61667: LD_ADDR_VAR 0 8
61671: PUSH
61672: LD_VAR 0 9
61676: PUSH
61677: FOR_IN
61678: IFFALSE 61730
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61680: LD_ADDR_VAR 0 10
61684: PUSH
61685: LD_VAR 0 10
61689: PUSH
61690: LD_VAR 0 8
61694: PUSH
61695: LD_INT 1
61697: ARRAY
61698: PUSH
61699: LD_VAR 0 2
61703: PLUS
61704: PUSH
61705: LD_VAR 0 8
61709: PUSH
61710: LD_INT 2
61712: ARRAY
61713: PUSH
61714: LD_VAR 0 3
61718: PLUS
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: EMPTY
61725: LIST
61726: ADD
61727: ST_TO_ADDR
61728: GO 61677
61730: POP
61731: POP
// result = temp_list2 ;
61732: LD_ADDR_VAR 0 7
61736: PUSH
61737: LD_VAR 0 10
61741: ST_TO_ADDR
// end ;
61742: LD_VAR 0 7
61746: RET
// export function EnemyInRange ( unit , dist ) ; begin
61747: LD_INT 0
61749: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61750: LD_ADDR_VAR 0 3
61754: PUSH
61755: LD_VAR 0 1
61759: PPUSH
61760: CALL_OW 255
61764: PPUSH
61765: LD_VAR 0 1
61769: PPUSH
61770: CALL_OW 250
61774: PPUSH
61775: LD_VAR 0 1
61779: PPUSH
61780: CALL_OW 251
61784: PPUSH
61785: LD_VAR 0 2
61789: PPUSH
61790: CALL 35120 0 4
61794: PUSH
61795: LD_INT 4
61797: ARRAY
61798: ST_TO_ADDR
// end ;
61799: LD_VAR 0 3
61803: RET
// export function PlayerSeeMe ( unit ) ; begin
61804: LD_INT 0
61806: PPUSH
// result := See ( your_side , unit ) ;
61807: LD_ADDR_VAR 0 2
61811: PUSH
61812: LD_OWVAR 2
61816: PPUSH
61817: LD_VAR 0 1
61821: PPUSH
61822: CALL_OW 292
61826: ST_TO_ADDR
// end ;
61827: LD_VAR 0 2
61831: RET
// export function ReverseDir ( unit ) ; begin
61832: LD_INT 0
61834: PPUSH
// if not unit then
61835: LD_VAR 0 1
61839: NOT
61840: IFFALSE 61844
// exit ;
61842: GO 61867
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61844: LD_ADDR_VAR 0 2
61848: PUSH
61849: LD_VAR 0 1
61853: PPUSH
61854: CALL_OW 254
61858: PUSH
61859: LD_INT 3
61861: PLUS
61862: PUSH
61863: LD_INT 6
61865: MOD
61866: ST_TO_ADDR
// end ;
61867: LD_VAR 0 2
61871: RET
// export function ReverseArray ( array ) ; var i ; begin
61872: LD_INT 0
61874: PPUSH
61875: PPUSH
// if not array then
61876: LD_VAR 0 1
61880: NOT
61881: IFFALSE 61885
// exit ;
61883: GO 61940
// result := [ ] ;
61885: LD_ADDR_VAR 0 2
61889: PUSH
61890: EMPTY
61891: ST_TO_ADDR
// for i := array downto 1 do
61892: LD_ADDR_VAR 0 3
61896: PUSH
61897: DOUBLE
61898: LD_VAR 0 1
61902: INC
61903: ST_TO_ADDR
61904: LD_INT 1
61906: PUSH
61907: FOR_DOWNTO
61908: IFFALSE 61938
// result := Join ( result , array [ i ] ) ;
61910: LD_ADDR_VAR 0 2
61914: PUSH
61915: LD_VAR 0 2
61919: PPUSH
61920: LD_VAR 0 1
61924: PUSH
61925: LD_VAR 0 3
61929: ARRAY
61930: PPUSH
61931: CALL 66596 0 2
61935: ST_TO_ADDR
61936: GO 61907
61938: POP
61939: POP
// end ;
61940: LD_VAR 0 2
61944: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61945: LD_INT 0
61947: PPUSH
61948: PPUSH
61949: PPUSH
61950: PPUSH
61951: PPUSH
61952: PPUSH
// if not unit or not hexes then
61953: LD_VAR 0 1
61957: NOT
61958: PUSH
61959: LD_VAR 0 2
61963: NOT
61964: OR
61965: IFFALSE 61969
// exit ;
61967: GO 62092
// dist := 9999 ;
61969: LD_ADDR_VAR 0 5
61973: PUSH
61974: LD_INT 9999
61976: ST_TO_ADDR
// for i = 1 to hexes do
61977: LD_ADDR_VAR 0 4
61981: PUSH
61982: DOUBLE
61983: LD_INT 1
61985: DEC
61986: ST_TO_ADDR
61987: LD_VAR 0 2
61991: PUSH
61992: FOR_TO
61993: IFFALSE 62080
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61995: LD_ADDR_VAR 0 6
61999: PUSH
62000: LD_VAR 0 1
62004: PPUSH
62005: LD_VAR 0 2
62009: PUSH
62010: LD_VAR 0 4
62014: ARRAY
62015: PUSH
62016: LD_INT 1
62018: ARRAY
62019: PPUSH
62020: LD_VAR 0 2
62024: PUSH
62025: LD_VAR 0 4
62029: ARRAY
62030: PUSH
62031: LD_INT 2
62033: ARRAY
62034: PPUSH
62035: CALL_OW 297
62039: ST_TO_ADDR
// if tdist < dist then
62040: LD_VAR 0 6
62044: PUSH
62045: LD_VAR 0 5
62049: LESS
62050: IFFALSE 62078
// begin hex := hexes [ i ] ;
62052: LD_ADDR_VAR 0 8
62056: PUSH
62057: LD_VAR 0 2
62061: PUSH
62062: LD_VAR 0 4
62066: ARRAY
62067: ST_TO_ADDR
// dist := tdist ;
62068: LD_ADDR_VAR 0 5
62072: PUSH
62073: LD_VAR 0 6
62077: ST_TO_ADDR
// end ; end ;
62078: GO 61992
62080: POP
62081: POP
// result := hex ;
62082: LD_ADDR_VAR 0 3
62086: PUSH
62087: LD_VAR 0 8
62091: ST_TO_ADDR
// end ;
62092: LD_VAR 0 3
62096: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62097: LD_INT 0
62099: PPUSH
62100: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62101: LD_VAR 0 1
62105: NOT
62106: PUSH
62107: LD_VAR 0 1
62111: PUSH
62112: LD_INT 21
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 23
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PPUSH
62136: CALL_OW 69
62140: IN
62141: NOT
62142: OR
62143: IFFALSE 62147
// exit ;
62145: GO 62194
// for i = 1 to 3 do
62147: LD_ADDR_VAR 0 3
62151: PUSH
62152: DOUBLE
62153: LD_INT 1
62155: DEC
62156: ST_TO_ADDR
62157: LD_INT 3
62159: PUSH
62160: FOR_TO
62161: IFFALSE 62192
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62163: LD_VAR 0 1
62167: PPUSH
62168: CALL_OW 250
62172: PPUSH
62173: LD_VAR 0 1
62177: PPUSH
62178: CALL_OW 251
62182: PPUSH
62183: LD_INT 1
62185: PPUSH
62186: CALL_OW 453
62190: GO 62160
62192: POP
62193: POP
// end ;
62194: LD_VAR 0 2
62198: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62199: LD_INT 0
62201: PPUSH
62202: PPUSH
62203: PPUSH
62204: PPUSH
62205: PPUSH
62206: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62207: LD_VAR 0 1
62211: NOT
62212: PUSH
62213: LD_VAR 0 2
62217: NOT
62218: OR
62219: PUSH
62220: LD_VAR 0 1
62224: PPUSH
62225: CALL_OW 314
62229: OR
62230: IFFALSE 62234
// exit ;
62232: GO 62701
// if GetLives ( i ) < 250 then
62234: LD_VAR 0 4
62238: PPUSH
62239: CALL_OW 256
62243: PUSH
62244: LD_INT 250
62246: LESS
62247: IFFALSE 62260
// begin ComAutodestruct ( i ) ;
62249: LD_VAR 0 4
62253: PPUSH
62254: CALL 62097 0 1
// exit ;
62258: GO 62701
// end ; x := GetX ( enemy_unit ) ;
62260: LD_ADDR_VAR 0 7
62264: PUSH
62265: LD_VAR 0 2
62269: PPUSH
62270: CALL_OW 250
62274: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62275: LD_ADDR_VAR 0 8
62279: PUSH
62280: LD_VAR 0 2
62284: PPUSH
62285: CALL_OW 251
62289: ST_TO_ADDR
// if not x or not y then
62290: LD_VAR 0 7
62294: NOT
62295: PUSH
62296: LD_VAR 0 8
62300: NOT
62301: OR
62302: IFFALSE 62306
// exit ;
62304: GO 62701
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62306: LD_ADDR_VAR 0 6
62310: PUSH
62311: LD_VAR 0 7
62315: PPUSH
62316: LD_INT 0
62318: PPUSH
62319: LD_INT 4
62321: PPUSH
62322: CALL_OW 272
62326: PUSH
62327: LD_VAR 0 8
62331: PPUSH
62332: LD_INT 0
62334: PPUSH
62335: LD_INT 4
62337: PPUSH
62338: CALL_OW 273
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_VAR 0 7
62351: PPUSH
62352: LD_INT 1
62354: PPUSH
62355: LD_INT 4
62357: PPUSH
62358: CALL_OW 272
62362: PUSH
62363: LD_VAR 0 8
62367: PPUSH
62368: LD_INT 1
62370: PPUSH
62371: LD_INT 4
62373: PPUSH
62374: CALL_OW 273
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_VAR 0 7
62387: PPUSH
62388: LD_INT 2
62390: PPUSH
62391: LD_INT 4
62393: PPUSH
62394: CALL_OW 272
62398: PUSH
62399: LD_VAR 0 8
62403: PPUSH
62404: LD_INT 2
62406: PPUSH
62407: LD_INT 4
62409: PPUSH
62410: CALL_OW 273
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_VAR 0 7
62423: PPUSH
62424: LD_INT 3
62426: PPUSH
62427: LD_INT 4
62429: PPUSH
62430: CALL_OW 272
62434: PUSH
62435: LD_VAR 0 8
62439: PPUSH
62440: LD_INT 3
62442: PPUSH
62443: LD_INT 4
62445: PPUSH
62446: CALL_OW 273
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_VAR 0 7
62459: PPUSH
62460: LD_INT 4
62462: PPUSH
62463: LD_INT 4
62465: PPUSH
62466: CALL_OW 272
62470: PUSH
62471: LD_VAR 0 8
62475: PPUSH
62476: LD_INT 4
62478: PPUSH
62479: LD_INT 4
62481: PPUSH
62482: CALL_OW 273
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_VAR 0 7
62495: PPUSH
62496: LD_INT 5
62498: PPUSH
62499: LD_INT 4
62501: PPUSH
62502: CALL_OW 272
62506: PUSH
62507: LD_VAR 0 8
62511: PPUSH
62512: LD_INT 5
62514: PPUSH
62515: LD_INT 4
62517: PPUSH
62518: CALL_OW 273
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// for i = tmp downto 1 do
62535: LD_ADDR_VAR 0 4
62539: PUSH
62540: DOUBLE
62541: LD_VAR 0 6
62545: INC
62546: ST_TO_ADDR
62547: LD_INT 1
62549: PUSH
62550: FOR_DOWNTO
62551: IFFALSE 62652
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62553: LD_VAR 0 6
62557: PUSH
62558: LD_VAR 0 4
62562: ARRAY
62563: PUSH
62564: LD_INT 1
62566: ARRAY
62567: PPUSH
62568: LD_VAR 0 6
62572: PUSH
62573: LD_VAR 0 4
62577: ARRAY
62578: PUSH
62579: LD_INT 2
62581: ARRAY
62582: PPUSH
62583: CALL_OW 488
62587: NOT
62588: PUSH
62589: LD_VAR 0 6
62593: PUSH
62594: LD_VAR 0 4
62598: ARRAY
62599: PUSH
62600: LD_INT 1
62602: ARRAY
62603: PPUSH
62604: LD_VAR 0 6
62608: PUSH
62609: LD_VAR 0 4
62613: ARRAY
62614: PUSH
62615: LD_INT 2
62617: ARRAY
62618: PPUSH
62619: CALL_OW 428
62623: PUSH
62624: LD_INT 0
62626: NONEQUAL
62627: OR
62628: IFFALSE 62650
// tmp := Delete ( tmp , i ) ;
62630: LD_ADDR_VAR 0 6
62634: PUSH
62635: LD_VAR 0 6
62639: PPUSH
62640: LD_VAR 0 4
62644: PPUSH
62645: CALL_OW 3
62649: ST_TO_ADDR
62650: GO 62550
62652: POP
62653: POP
// j := GetClosestHex ( unit , tmp ) ;
62654: LD_ADDR_VAR 0 5
62658: PUSH
62659: LD_VAR 0 1
62663: PPUSH
62664: LD_VAR 0 6
62668: PPUSH
62669: CALL 61945 0 2
62673: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62674: LD_VAR 0 1
62678: PPUSH
62679: LD_VAR 0 5
62683: PUSH
62684: LD_INT 1
62686: ARRAY
62687: PPUSH
62688: LD_VAR 0 5
62692: PUSH
62693: LD_INT 2
62695: ARRAY
62696: PPUSH
62697: CALL_OW 111
// end ;
62701: LD_VAR 0 3
62705: RET
// export function PrepareApemanSoldier ( ) ; begin
62706: LD_INT 0
62708: PPUSH
// uc_nation := 0 ;
62709: LD_ADDR_OWVAR 21
62713: PUSH
62714: LD_INT 0
62716: ST_TO_ADDR
// hc_sex := sex_male ;
62717: LD_ADDR_OWVAR 27
62721: PUSH
62722: LD_INT 1
62724: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62725: LD_ADDR_OWVAR 28
62729: PUSH
62730: LD_INT 15
62732: ST_TO_ADDR
// hc_gallery :=  ;
62733: LD_ADDR_OWVAR 33
62737: PUSH
62738: LD_STRING 
62740: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62741: LD_ADDR_OWVAR 31
62745: PUSH
62746: LD_INT 0
62748: PPUSH
62749: LD_INT 3
62751: PPUSH
62752: CALL_OW 12
62756: PUSH
62757: LD_INT 0
62759: PPUSH
62760: LD_INT 3
62762: PPUSH
62763: CALL_OW 12
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: ST_TO_ADDR
// end ;
62780: LD_VAR 0 1
62784: RET
// export function PrepareApemanEngineer ( ) ; begin
62785: LD_INT 0
62787: PPUSH
// uc_nation := 0 ;
62788: LD_ADDR_OWVAR 21
62792: PUSH
62793: LD_INT 0
62795: ST_TO_ADDR
// hc_sex := sex_male ;
62796: LD_ADDR_OWVAR 27
62800: PUSH
62801: LD_INT 1
62803: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62804: LD_ADDR_OWVAR 28
62808: PUSH
62809: LD_INT 16
62811: ST_TO_ADDR
// hc_gallery :=  ;
62812: LD_ADDR_OWVAR 33
62816: PUSH
62817: LD_STRING 
62819: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62820: LD_ADDR_OWVAR 31
62824: PUSH
62825: LD_INT 0
62827: PPUSH
62828: LD_INT 3
62830: PPUSH
62831: CALL_OW 12
62835: PUSH
62836: LD_INT 0
62838: PPUSH
62839: LD_INT 3
62841: PPUSH
62842: CALL_OW 12
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: ST_TO_ADDR
// end ;
62859: LD_VAR 0 1
62863: RET
// export function PrepareApeman ( agressivity ) ; begin
62864: LD_INT 0
62866: PPUSH
// uc_side := 0 ;
62867: LD_ADDR_OWVAR 20
62871: PUSH
62872: LD_INT 0
62874: ST_TO_ADDR
// uc_nation := 0 ;
62875: LD_ADDR_OWVAR 21
62879: PUSH
62880: LD_INT 0
62882: ST_TO_ADDR
// hc_sex := sex_male ;
62883: LD_ADDR_OWVAR 27
62887: PUSH
62888: LD_INT 1
62890: ST_TO_ADDR
// hc_class := class_apeman ;
62891: LD_ADDR_OWVAR 28
62895: PUSH
62896: LD_INT 12
62898: ST_TO_ADDR
// hc_gallery :=  ;
62899: LD_ADDR_OWVAR 33
62903: PUSH
62904: LD_STRING 
62906: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62907: LD_ADDR_OWVAR 35
62911: PUSH
62912: LD_VAR 0 1
62916: NEG
62917: PPUSH
62918: LD_VAR 0 1
62922: PPUSH
62923: CALL_OW 12
62927: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62928: LD_ADDR_OWVAR 31
62932: PUSH
62933: LD_INT 0
62935: PPUSH
62936: LD_INT 3
62938: PPUSH
62939: CALL_OW 12
62943: PUSH
62944: LD_INT 0
62946: PPUSH
62947: LD_INT 3
62949: PPUSH
62950: CALL_OW 12
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: ST_TO_ADDR
// end ;
62967: LD_VAR 0 2
62971: RET
// export function PrepareTiger ( agressivity ) ; begin
62972: LD_INT 0
62974: PPUSH
// uc_side := 0 ;
62975: LD_ADDR_OWVAR 20
62979: PUSH
62980: LD_INT 0
62982: ST_TO_ADDR
// uc_nation := 0 ;
62983: LD_ADDR_OWVAR 21
62987: PUSH
62988: LD_INT 0
62990: ST_TO_ADDR
// hc_class := class_tiger ;
62991: LD_ADDR_OWVAR 28
62995: PUSH
62996: LD_INT 14
62998: ST_TO_ADDR
// hc_gallery :=  ;
62999: LD_ADDR_OWVAR 33
63003: PUSH
63004: LD_STRING 
63006: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63007: LD_ADDR_OWVAR 35
63011: PUSH
63012: LD_VAR 0 1
63016: NEG
63017: PPUSH
63018: LD_VAR 0 1
63022: PPUSH
63023: CALL_OW 12
63027: ST_TO_ADDR
// end ;
63028: LD_VAR 0 2
63032: RET
// export function PrepareEnchidna ( ) ; begin
63033: LD_INT 0
63035: PPUSH
// uc_side := 0 ;
63036: LD_ADDR_OWVAR 20
63040: PUSH
63041: LD_INT 0
63043: ST_TO_ADDR
// uc_nation := 0 ;
63044: LD_ADDR_OWVAR 21
63048: PUSH
63049: LD_INT 0
63051: ST_TO_ADDR
// hc_class := class_baggie ;
63052: LD_ADDR_OWVAR 28
63056: PUSH
63057: LD_INT 13
63059: ST_TO_ADDR
// hc_gallery :=  ;
63060: LD_ADDR_OWVAR 33
63064: PUSH
63065: LD_STRING 
63067: ST_TO_ADDR
// end ;
63068: LD_VAR 0 1
63072: RET
// export function PrepareFrog ( ) ; begin
63073: LD_INT 0
63075: PPUSH
// uc_side := 0 ;
63076: LD_ADDR_OWVAR 20
63080: PUSH
63081: LD_INT 0
63083: ST_TO_ADDR
// uc_nation := 0 ;
63084: LD_ADDR_OWVAR 21
63088: PUSH
63089: LD_INT 0
63091: ST_TO_ADDR
// hc_class := class_frog ;
63092: LD_ADDR_OWVAR 28
63096: PUSH
63097: LD_INT 19
63099: ST_TO_ADDR
// hc_gallery :=  ;
63100: LD_ADDR_OWVAR 33
63104: PUSH
63105: LD_STRING 
63107: ST_TO_ADDR
// end ;
63108: LD_VAR 0 1
63112: RET
// export function PrepareFish ( ) ; begin
63113: LD_INT 0
63115: PPUSH
// uc_side := 0 ;
63116: LD_ADDR_OWVAR 20
63120: PUSH
63121: LD_INT 0
63123: ST_TO_ADDR
// uc_nation := 0 ;
63124: LD_ADDR_OWVAR 21
63128: PUSH
63129: LD_INT 0
63131: ST_TO_ADDR
// hc_class := class_fish ;
63132: LD_ADDR_OWVAR 28
63136: PUSH
63137: LD_INT 20
63139: ST_TO_ADDR
// hc_gallery :=  ;
63140: LD_ADDR_OWVAR 33
63144: PUSH
63145: LD_STRING 
63147: ST_TO_ADDR
// end ;
63148: LD_VAR 0 1
63152: RET
// export function PrepareBird ( ) ; begin
63153: LD_INT 0
63155: PPUSH
// uc_side := 0 ;
63156: LD_ADDR_OWVAR 20
63160: PUSH
63161: LD_INT 0
63163: ST_TO_ADDR
// uc_nation := 0 ;
63164: LD_ADDR_OWVAR 21
63168: PUSH
63169: LD_INT 0
63171: ST_TO_ADDR
// hc_class := class_phororhacos ;
63172: LD_ADDR_OWVAR 28
63176: PUSH
63177: LD_INT 18
63179: ST_TO_ADDR
// hc_gallery :=  ;
63180: LD_ADDR_OWVAR 33
63184: PUSH
63185: LD_STRING 
63187: ST_TO_ADDR
// end ;
63188: LD_VAR 0 1
63192: RET
// export function PrepareHorse ( ) ; begin
63193: LD_INT 0
63195: PPUSH
// uc_side := 0 ;
63196: LD_ADDR_OWVAR 20
63200: PUSH
63201: LD_INT 0
63203: ST_TO_ADDR
// uc_nation := 0 ;
63204: LD_ADDR_OWVAR 21
63208: PUSH
63209: LD_INT 0
63211: ST_TO_ADDR
// hc_class := class_horse ;
63212: LD_ADDR_OWVAR 28
63216: PUSH
63217: LD_INT 21
63219: ST_TO_ADDR
// hc_gallery :=  ;
63220: LD_ADDR_OWVAR 33
63224: PUSH
63225: LD_STRING 
63227: ST_TO_ADDR
// end ;
63228: LD_VAR 0 1
63232: RET
// export function PrepareMastodont ( ) ; begin
63233: LD_INT 0
63235: PPUSH
// uc_side := 0 ;
63236: LD_ADDR_OWVAR 20
63240: PUSH
63241: LD_INT 0
63243: ST_TO_ADDR
// uc_nation := 0 ;
63244: LD_ADDR_OWVAR 21
63248: PUSH
63249: LD_INT 0
63251: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63252: LD_ADDR_OWVAR 37
63256: PUSH
63257: LD_INT 31
63259: ST_TO_ADDR
// vc_control := control_rider ;
63260: LD_ADDR_OWVAR 38
63264: PUSH
63265: LD_INT 4
63267: ST_TO_ADDR
// end ;
63268: LD_VAR 0 1
63272: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63273: LD_INT 0
63275: PPUSH
63276: PPUSH
63277: PPUSH
// uc_side = 0 ;
63278: LD_ADDR_OWVAR 20
63282: PUSH
63283: LD_INT 0
63285: ST_TO_ADDR
// uc_nation = 0 ;
63286: LD_ADDR_OWVAR 21
63290: PUSH
63291: LD_INT 0
63293: ST_TO_ADDR
// InitHc_All ( ) ;
63294: CALL_OW 584
// InitVc ;
63298: CALL_OW 20
// if mastodonts then
63302: LD_VAR 0 6
63306: IFFALSE 63373
// for i = 1 to mastodonts do
63308: LD_ADDR_VAR 0 11
63312: PUSH
63313: DOUBLE
63314: LD_INT 1
63316: DEC
63317: ST_TO_ADDR
63318: LD_VAR 0 6
63322: PUSH
63323: FOR_TO
63324: IFFALSE 63371
// begin vc_chassis := 31 ;
63326: LD_ADDR_OWVAR 37
63330: PUSH
63331: LD_INT 31
63333: ST_TO_ADDR
// vc_control := control_rider ;
63334: LD_ADDR_OWVAR 38
63338: PUSH
63339: LD_INT 4
63341: ST_TO_ADDR
// animal := CreateVehicle ;
63342: LD_ADDR_VAR 0 12
63346: PUSH
63347: CALL_OW 45
63351: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63352: LD_VAR 0 12
63356: PPUSH
63357: LD_VAR 0 8
63361: PPUSH
63362: LD_INT 0
63364: PPUSH
63365: CALL 65501 0 3
// end ;
63369: GO 63323
63371: POP
63372: POP
// if horses then
63373: LD_VAR 0 5
63377: IFFALSE 63444
// for i = 1 to horses do
63379: LD_ADDR_VAR 0 11
63383: PUSH
63384: DOUBLE
63385: LD_INT 1
63387: DEC
63388: ST_TO_ADDR
63389: LD_VAR 0 5
63393: PUSH
63394: FOR_TO
63395: IFFALSE 63442
// begin hc_class := 21 ;
63397: LD_ADDR_OWVAR 28
63401: PUSH
63402: LD_INT 21
63404: ST_TO_ADDR
// hc_gallery :=  ;
63405: LD_ADDR_OWVAR 33
63409: PUSH
63410: LD_STRING 
63412: ST_TO_ADDR
// animal := CreateHuman ;
63413: LD_ADDR_VAR 0 12
63417: PUSH
63418: CALL_OW 44
63422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63423: LD_VAR 0 12
63427: PPUSH
63428: LD_VAR 0 8
63432: PPUSH
63433: LD_INT 0
63435: PPUSH
63436: CALL 65501 0 3
// end ;
63440: GO 63394
63442: POP
63443: POP
// if birds then
63444: LD_VAR 0 1
63448: IFFALSE 63515
// for i = 1 to birds do
63450: LD_ADDR_VAR 0 11
63454: PUSH
63455: DOUBLE
63456: LD_INT 1
63458: DEC
63459: ST_TO_ADDR
63460: LD_VAR 0 1
63464: PUSH
63465: FOR_TO
63466: IFFALSE 63513
// begin hc_class := 18 ;
63468: LD_ADDR_OWVAR 28
63472: PUSH
63473: LD_INT 18
63475: ST_TO_ADDR
// hc_gallery =  ;
63476: LD_ADDR_OWVAR 33
63480: PUSH
63481: LD_STRING 
63483: ST_TO_ADDR
// animal := CreateHuman ;
63484: LD_ADDR_VAR 0 12
63488: PUSH
63489: CALL_OW 44
63493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63494: LD_VAR 0 12
63498: PPUSH
63499: LD_VAR 0 8
63503: PPUSH
63504: LD_INT 0
63506: PPUSH
63507: CALL 65501 0 3
// end ;
63511: GO 63465
63513: POP
63514: POP
// if tigers then
63515: LD_VAR 0 2
63519: IFFALSE 63603
// for i = 1 to tigers do
63521: LD_ADDR_VAR 0 11
63525: PUSH
63526: DOUBLE
63527: LD_INT 1
63529: DEC
63530: ST_TO_ADDR
63531: LD_VAR 0 2
63535: PUSH
63536: FOR_TO
63537: IFFALSE 63601
// begin hc_class = class_tiger ;
63539: LD_ADDR_OWVAR 28
63543: PUSH
63544: LD_INT 14
63546: ST_TO_ADDR
// hc_gallery =  ;
63547: LD_ADDR_OWVAR 33
63551: PUSH
63552: LD_STRING 
63554: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63555: LD_ADDR_OWVAR 35
63559: PUSH
63560: LD_INT 7
63562: NEG
63563: PPUSH
63564: LD_INT 7
63566: PPUSH
63567: CALL_OW 12
63571: ST_TO_ADDR
// animal := CreateHuman ;
63572: LD_ADDR_VAR 0 12
63576: PUSH
63577: CALL_OW 44
63581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63582: LD_VAR 0 12
63586: PPUSH
63587: LD_VAR 0 8
63591: PPUSH
63592: LD_INT 0
63594: PPUSH
63595: CALL 65501 0 3
// end ;
63599: GO 63536
63601: POP
63602: POP
// if apemans then
63603: LD_VAR 0 3
63607: IFFALSE 63730
// for i = 1 to apemans do
63609: LD_ADDR_VAR 0 11
63613: PUSH
63614: DOUBLE
63615: LD_INT 1
63617: DEC
63618: ST_TO_ADDR
63619: LD_VAR 0 3
63623: PUSH
63624: FOR_TO
63625: IFFALSE 63728
// begin hc_class = class_apeman ;
63627: LD_ADDR_OWVAR 28
63631: PUSH
63632: LD_INT 12
63634: ST_TO_ADDR
// hc_gallery =  ;
63635: LD_ADDR_OWVAR 33
63639: PUSH
63640: LD_STRING 
63642: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63643: LD_ADDR_OWVAR 35
63647: PUSH
63648: LD_INT 2
63650: NEG
63651: PPUSH
63652: LD_INT 2
63654: PPUSH
63655: CALL_OW 12
63659: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63660: LD_ADDR_OWVAR 31
63664: PUSH
63665: LD_INT 1
63667: PPUSH
63668: LD_INT 3
63670: PPUSH
63671: CALL_OW 12
63675: PUSH
63676: LD_INT 1
63678: PPUSH
63679: LD_INT 3
63681: PPUSH
63682: CALL_OW 12
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: ST_TO_ADDR
// animal := CreateHuman ;
63699: LD_ADDR_VAR 0 12
63703: PUSH
63704: CALL_OW 44
63708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63709: LD_VAR 0 12
63713: PPUSH
63714: LD_VAR 0 8
63718: PPUSH
63719: LD_INT 0
63721: PPUSH
63722: CALL 65501 0 3
// end ;
63726: GO 63624
63728: POP
63729: POP
// if enchidnas then
63730: LD_VAR 0 4
63734: IFFALSE 63801
// for i = 1 to enchidnas do
63736: LD_ADDR_VAR 0 11
63740: PUSH
63741: DOUBLE
63742: LD_INT 1
63744: DEC
63745: ST_TO_ADDR
63746: LD_VAR 0 4
63750: PUSH
63751: FOR_TO
63752: IFFALSE 63799
// begin hc_class = 13 ;
63754: LD_ADDR_OWVAR 28
63758: PUSH
63759: LD_INT 13
63761: ST_TO_ADDR
// hc_gallery =  ;
63762: LD_ADDR_OWVAR 33
63766: PUSH
63767: LD_STRING 
63769: ST_TO_ADDR
// animal := CreateHuman ;
63770: LD_ADDR_VAR 0 12
63774: PUSH
63775: CALL_OW 44
63779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63780: LD_VAR 0 12
63784: PPUSH
63785: LD_VAR 0 8
63789: PPUSH
63790: LD_INT 0
63792: PPUSH
63793: CALL 65501 0 3
// end ;
63797: GO 63751
63799: POP
63800: POP
// if fishes then
63801: LD_VAR 0 7
63805: IFFALSE 63872
// for i = 1 to fishes do
63807: LD_ADDR_VAR 0 11
63811: PUSH
63812: DOUBLE
63813: LD_INT 1
63815: DEC
63816: ST_TO_ADDR
63817: LD_VAR 0 7
63821: PUSH
63822: FOR_TO
63823: IFFALSE 63870
// begin hc_class = 20 ;
63825: LD_ADDR_OWVAR 28
63829: PUSH
63830: LD_INT 20
63832: ST_TO_ADDR
// hc_gallery =  ;
63833: LD_ADDR_OWVAR 33
63837: PUSH
63838: LD_STRING 
63840: ST_TO_ADDR
// animal := CreateHuman ;
63841: LD_ADDR_VAR 0 12
63845: PUSH
63846: CALL_OW 44
63850: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63851: LD_VAR 0 12
63855: PPUSH
63856: LD_VAR 0 9
63860: PPUSH
63861: LD_INT 0
63863: PPUSH
63864: CALL 65501 0 3
// end ;
63868: GO 63822
63870: POP
63871: POP
// end ;
63872: LD_VAR 0 10
63876: RET
// export function WantHeal ( sci , unit ) ; begin
63877: LD_INT 0
63879: PPUSH
// if GetTaskList ( sci ) > 0 then
63880: LD_VAR 0 1
63884: PPUSH
63885: CALL_OW 437
63889: PUSH
63890: LD_INT 0
63892: GREATER
63893: IFFALSE 63963
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63895: LD_VAR 0 1
63899: PPUSH
63900: CALL_OW 437
63904: PUSH
63905: LD_INT 1
63907: ARRAY
63908: PUSH
63909: LD_INT 1
63911: ARRAY
63912: PUSH
63913: LD_STRING l
63915: EQUAL
63916: PUSH
63917: LD_VAR 0 1
63921: PPUSH
63922: CALL_OW 437
63926: PUSH
63927: LD_INT 1
63929: ARRAY
63930: PUSH
63931: LD_INT 4
63933: ARRAY
63934: PUSH
63935: LD_VAR 0 2
63939: EQUAL
63940: AND
63941: IFFALSE 63953
// result := true else
63943: LD_ADDR_VAR 0 3
63947: PUSH
63948: LD_INT 1
63950: ST_TO_ADDR
63951: GO 63961
// result := false ;
63953: LD_ADDR_VAR 0 3
63957: PUSH
63958: LD_INT 0
63960: ST_TO_ADDR
// end else
63961: GO 63971
// result := false ;
63963: LD_ADDR_VAR 0 3
63967: PUSH
63968: LD_INT 0
63970: ST_TO_ADDR
// end ;
63971: LD_VAR 0 3
63975: RET
// export function HealTarget ( sci ) ; begin
63976: LD_INT 0
63978: PPUSH
// if not sci then
63979: LD_VAR 0 1
63983: NOT
63984: IFFALSE 63988
// exit ;
63986: GO 64053
// result := 0 ;
63988: LD_ADDR_VAR 0 2
63992: PUSH
63993: LD_INT 0
63995: ST_TO_ADDR
// if GetTaskList ( sci ) then
63996: LD_VAR 0 1
64000: PPUSH
64001: CALL_OW 437
64005: IFFALSE 64053
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64007: LD_VAR 0 1
64011: PPUSH
64012: CALL_OW 437
64016: PUSH
64017: LD_INT 1
64019: ARRAY
64020: PUSH
64021: LD_INT 1
64023: ARRAY
64024: PUSH
64025: LD_STRING l
64027: EQUAL
64028: IFFALSE 64053
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64030: LD_ADDR_VAR 0 2
64034: PUSH
64035: LD_VAR 0 1
64039: PPUSH
64040: CALL_OW 437
64044: PUSH
64045: LD_INT 1
64047: ARRAY
64048: PUSH
64049: LD_INT 4
64051: ARRAY
64052: ST_TO_ADDR
// end ;
64053: LD_VAR 0 2
64057: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64058: LD_INT 0
64060: PPUSH
64061: PPUSH
64062: PPUSH
64063: PPUSH
// if not base_units then
64064: LD_VAR 0 1
64068: NOT
64069: IFFALSE 64073
// exit ;
64071: GO 64160
// result := false ;
64073: LD_ADDR_VAR 0 2
64077: PUSH
64078: LD_INT 0
64080: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64081: LD_ADDR_VAR 0 5
64085: PUSH
64086: LD_VAR 0 1
64090: PPUSH
64091: LD_INT 21
64093: PUSH
64094: LD_INT 3
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PPUSH
64101: CALL_OW 72
64105: ST_TO_ADDR
// if not tmp then
64106: LD_VAR 0 5
64110: NOT
64111: IFFALSE 64115
// exit ;
64113: GO 64160
// for i in tmp do
64115: LD_ADDR_VAR 0 3
64119: PUSH
64120: LD_VAR 0 5
64124: PUSH
64125: FOR_IN
64126: IFFALSE 64158
// begin result := EnemyInRange ( i , 22 ) ;
64128: LD_ADDR_VAR 0 2
64132: PUSH
64133: LD_VAR 0 3
64137: PPUSH
64138: LD_INT 22
64140: PPUSH
64141: CALL 61747 0 2
64145: ST_TO_ADDR
// if result then
64146: LD_VAR 0 2
64150: IFFALSE 64156
// exit ;
64152: POP
64153: POP
64154: GO 64160
// end ;
64156: GO 64125
64158: POP
64159: POP
// end ;
64160: LD_VAR 0 2
64164: RET
// export function FilterByTag ( units , tag ) ; begin
64165: LD_INT 0
64167: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64168: LD_ADDR_VAR 0 3
64172: PUSH
64173: LD_VAR 0 1
64177: PPUSH
64178: LD_INT 120
64180: PUSH
64181: LD_VAR 0 2
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PPUSH
64190: CALL_OW 72
64194: ST_TO_ADDR
// end ;
64195: LD_VAR 0 3
64199: RET
// export function IsDriver ( un ) ; begin
64200: LD_INT 0
64202: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64203: LD_ADDR_VAR 0 2
64207: PUSH
64208: LD_VAR 0 1
64212: PUSH
64213: LD_INT 55
64215: PUSH
64216: EMPTY
64217: LIST
64218: PPUSH
64219: CALL_OW 69
64223: IN
64224: ST_TO_ADDR
// end ;
64225: LD_VAR 0 2
64229: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64230: LD_INT 0
64232: PPUSH
64233: PPUSH
// list := [ ] ;
64234: LD_ADDR_VAR 0 5
64238: PUSH
64239: EMPTY
64240: ST_TO_ADDR
// case d of 0 :
64241: LD_VAR 0 3
64245: PUSH
64246: LD_INT 0
64248: DOUBLE
64249: EQUAL
64250: IFTRUE 64254
64252: GO 64387
64254: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64255: LD_ADDR_VAR 0 5
64259: PUSH
64260: LD_VAR 0 1
64264: PUSH
64265: LD_INT 4
64267: MINUS
64268: PUSH
64269: LD_VAR 0 2
64273: PUSH
64274: LD_INT 4
64276: MINUS
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: LIST
64285: PUSH
64286: LD_VAR 0 1
64290: PUSH
64291: LD_INT 3
64293: MINUS
64294: PUSH
64295: LD_VAR 0 2
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: PUSH
64308: LD_VAR 0 1
64312: PUSH
64313: LD_INT 4
64315: PLUS
64316: PUSH
64317: LD_VAR 0 2
64321: PUSH
64322: LD_INT 4
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: PUSH
64330: LD_VAR 0 1
64334: PUSH
64335: LD_INT 3
64337: PLUS
64338: PUSH
64339: LD_VAR 0 2
64343: PUSH
64344: LD_INT 3
64346: PLUS
64347: PUSH
64348: LD_INT 5
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: LIST
64355: PUSH
64356: LD_VAR 0 1
64360: PUSH
64361: LD_VAR 0 2
64365: PUSH
64366: LD_INT 4
64368: PLUS
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: LIST
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: ST_TO_ADDR
// end ; 1 :
64385: GO 65085
64387: LD_INT 1
64389: DOUBLE
64390: EQUAL
64391: IFTRUE 64395
64393: GO 64528
64395: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64396: LD_ADDR_VAR 0 5
64400: PUSH
64401: LD_VAR 0 1
64405: PUSH
64406: LD_VAR 0 2
64410: PUSH
64411: LD_INT 4
64413: MINUS
64414: PUSH
64415: LD_INT 3
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: PUSH
64423: LD_VAR 0 1
64427: PUSH
64428: LD_INT 3
64430: MINUS
64431: PUSH
64432: LD_VAR 0 2
64436: PUSH
64437: LD_INT 3
64439: MINUS
64440: PUSH
64441: LD_INT 2
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: LIST
64448: PUSH
64449: LD_VAR 0 1
64453: PUSH
64454: LD_INT 4
64456: MINUS
64457: PUSH
64458: LD_VAR 0 2
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: PUSH
64471: LD_VAR 0 1
64475: PUSH
64476: LD_VAR 0 2
64480: PUSH
64481: LD_INT 3
64483: PLUS
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: PUSH
64493: LD_VAR 0 1
64497: PUSH
64498: LD_INT 4
64500: PLUS
64501: PUSH
64502: LD_VAR 0 2
64506: PUSH
64507: LD_INT 4
64509: PLUS
64510: PUSH
64511: LD_INT 5
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: LIST
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: ST_TO_ADDR
// end ; 2 :
64526: GO 65085
64528: LD_INT 2
64530: DOUBLE
64531: EQUAL
64532: IFTRUE 64536
64534: GO 64665
64536: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64537: LD_ADDR_VAR 0 5
64541: PUSH
64542: LD_VAR 0 1
64546: PUSH
64547: LD_VAR 0 2
64551: PUSH
64552: LD_INT 3
64554: MINUS
64555: PUSH
64556: LD_INT 3
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: LIST
64563: PUSH
64564: LD_VAR 0 1
64568: PUSH
64569: LD_INT 4
64571: PLUS
64572: PUSH
64573: LD_VAR 0 2
64577: PUSH
64578: LD_INT 4
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: PUSH
64586: LD_VAR 0 1
64590: PUSH
64591: LD_VAR 0 2
64595: PUSH
64596: LD_INT 4
64598: PLUS
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: PUSH
64608: LD_VAR 0 1
64612: PUSH
64613: LD_INT 3
64615: MINUS
64616: PUSH
64617: LD_VAR 0 2
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: PUSH
64630: LD_VAR 0 1
64634: PUSH
64635: LD_INT 4
64637: MINUS
64638: PUSH
64639: LD_VAR 0 2
64643: PUSH
64644: LD_INT 4
64646: MINUS
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: ST_TO_ADDR
// end ; 3 :
64663: GO 65085
64665: LD_INT 3
64667: DOUBLE
64668: EQUAL
64669: IFTRUE 64673
64671: GO 64806
64673: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64674: LD_ADDR_VAR 0 5
64678: PUSH
64679: LD_VAR 0 1
64683: PUSH
64684: LD_INT 3
64686: PLUS
64687: PUSH
64688: LD_VAR 0 2
64692: PUSH
64693: LD_INT 4
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: PUSH
64701: LD_VAR 0 1
64705: PUSH
64706: LD_INT 4
64708: PLUS
64709: PUSH
64710: LD_VAR 0 2
64714: PUSH
64715: LD_INT 4
64717: PLUS
64718: PUSH
64719: LD_INT 5
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: PUSH
64727: LD_VAR 0 1
64731: PUSH
64732: LD_INT 4
64734: MINUS
64735: PUSH
64736: LD_VAR 0 2
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: PUSH
64749: LD_VAR 0 1
64753: PUSH
64754: LD_VAR 0 2
64758: PUSH
64759: LD_INT 4
64761: MINUS
64762: PUSH
64763: LD_INT 3
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: LIST
64770: PUSH
64771: LD_VAR 0 1
64775: PUSH
64776: LD_INT 3
64778: MINUS
64779: PUSH
64780: LD_VAR 0 2
64784: PUSH
64785: LD_INT 3
64787: MINUS
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: ST_TO_ADDR
// end ; 4 :
64804: GO 65085
64806: LD_INT 4
64808: DOUBLE
64809: EQUAL
64810: IFTRUE 64814
64812: GO 64947
64814: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64815: LD_ADDR_VAR 0 5
64819: PUSH
64820: LD_VAR 0 1
64824: PUSH
64825: LD_VAR 0 2
64829: PUSH
64830: LD_INT 4
64832: PLUS
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: PUSH
64842: LD_VAR 0 1
64846: PUSH
64847: LD_INT 3
64849: PLUS
64850: PUSH
64851: LD_VAR 0 2
64855: PUSH
64856: LD_INT 3
64858: PLUS
64859: PUSH
64860: LD_INT 5
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: PUSH
64868: LD_VAR 0 1
64872: PUSH
64873: LD_INT 4
64875: PLUS
64876: PUSH
64877: LD_VAR 0 2
64881: PUSH
64882: LD_INT 4
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: PUSH
64890: LD_VAR 0 1
64894: PUSH
64895: LD_VAR 0 2
64899: PUSH
64900: LD_INT 3
64902: MINUS
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: PUSH
64912: LD_VAR 0 1
64916: PUSH
64917: LD_INT 4
64919: MINUS
64920: PUSH
64921: LD_VAR 0 2
64925: PUSH
64926: LD_INT 4
64928: MINUS
64929: PUSH
64930: LD_INT 2
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: LIST
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: ST_TO_ADDR
// end ; 5 :
64945: GO 65085
64947: LD_INT 5
64949: DOUBLE
64950: EQUAL
64951: IFTRUE 64955
64953: GO 65084
64955: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64956: LD_ADDR_VAR 0 5
64960: PUSH
64961: LD_VAR 0 1
64965: PUSH
64966: LD_INT 4
64968: MINUS
64969: PUSH
64970: LD_VAR 0 2
64974: PUSH
64975: LD_INT 1
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: PUSH
64983: LD_VAR 0 1
64987: PUSH
64988: LD_VAR 0 2
64992: PUSH
64993: LD_INT 4
64995: MINUS
64996: PUSH
64997: LD_INT 3
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: LIST
65004: PUSH
65005: LD_VAR 0 1
65009: PUSH
65010: LD_INT 4
65012: PLUS
65013: PUSH
65014: LD_VAR 0 2
65018: PUSH
65019: LD_INT 4
65021: PLUS
65022: PUSH
65023: LD_INT 5
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: LIST
65030: PUSH
65031: LD_VAR 0 1
65035: PUSH
65036: LD_INT 3
65038: PLUS
65039: PUSH
65040: LD_VAR 0 2
65044: PUSH
65045: LD_INT 4
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: LIST
65052: PUSH
65053: LD_VAR 0 1
65057: PUSH
65058: LD_VAR 0 2
65062: PUSH
65063: LD_INT 3
65065: PLUS
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: LIST
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: ST_TO_ADDR
// end ; end ;
65082: GO 65085
65084: POP
// result := list ;
65085: LD_ADDR_VAR 0 4
65089: PUSH
65090: LD_VAR 0 5
65094: ST_TO_ADDR
// end ;
65095: LD_VAR 0 4
65099: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65100: LD_INT 0
65102: PPUSH
65103: PPUSH
65104: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65105: LD_VAR 0 1
65109: NOT
65110: PUSH
65111: LD_VAR 0 2
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: LD_INT 2
65121: PUSH
65122: LD_INT 3
65124: PUSH
65125: LD_INT 4
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: IN
65134: NOT
65135: OR
65136: IFFALSE 65140
// exit ;
65138: GO 65223
// tmp := [ ] ;
65140: LD_ADDR_VAR 0 5
65144: PUSH
65145: EMPTY
65146: ST_TO_ADDR
// for i in units do
65147: LD_ADDR_VAR 0 4
65151: PUSH
65152: LD_VAR 0 1
65156: PUSH
65157: FOR_IN
65158: IFFALSE 65192
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65160: LD_ADDR_VAR 0 5
65164: PUSH
65165: LD_VAR 0 5
65169: PPUSH
65170: LD_VAR 0 4
65174: PPUSH
65175: LD_VAR 0 2
65179: PPUSH
65180: CALL_OW 259
65184: PPUSH
65185: CALL 66596 0 2
65189: ST_TO_ADDR
65190: GO 65157
65192: POP
65193: POP
// if not tmp then
65194: LD_VAR 0 5
65198: NOT
65199: IFFALSE 65203
// exit ;
65201: GO 65223
// result := SortListByListDesc ( units , tmp ) ;
65203: LD_ADDR_VAR 0 3
65207: PUSH
65208: LD_VAR 0 1
65212: PPUSH
65213: LD_VAR 0 5
65217: PPUSH
65218: CALL_OW 77
65222: ST_TO_ADDR
// end ;
65223: LD_VAR 0 3
65227: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65228: LD_INT 0
65230: PPUSH
65231: PPUSH
65232: PPUSH
// result := false ;
65233: LD_ADDR_VAR 0 3
65237: PUSH
65238: LD_INT 0
65240: ST_TO_ADDR
// if not building then
65241: LD_VAR 0 2
65245: NOT
65246: IFFALSE 65250
// exit ;
65248: GO 65388
// x := GetX ( building ) ;
65250: LD_ADDR_VAR 0 4
65254: PUSH
65255: LD_VAR 0 2
65259: PPUSH
65260: CALL_OW 250
65264: ST_TO_ADDR
// y := GetY ( building ) ;
65265: LD_ADDR_VAR 0 5
65269: PUSH
65270: LD_VAR 0 2
65274: PPUSH
65275: CALL_OW 251
65279: ST_TO_ADDR
// if not x or not y then
65280: LD_VAR 0 4
65284: NOT
65285: PUSH
65286: LD_VAR 0 5
65290: NOT
65291: OR
65292: IFFALSE 65296
// exit ;
65294: GO 65388
// if GetTaskList ( unit ) then
65296: LD_VAR 0 1
65300: PPUSH
65301: CALL_OW 437
65305: IFFALSE 65388
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65307: LD_STRING e
65309: PUSH
65310: LD_VAR 0 1
65314: PPUSH
65315: CALL_OW 437
65319: PUSH
65320: LD_INT 1
65322: ARRAY
65323: PUSH
65324: LD_INT 1
65326: ARRAY
65327: EQUAL
65328: PUSH
65329: LD_VAR 0 4
65333: PUSH
65334: LD_VAR 0 1
65338: PPUSH
65339: CALL_OW 437
65343: PUSH
65344: LD_INT 1
65346: ARRAY
65347: PUSH
65348: LD_INT 2
65350: ARRAY
65351: EQUAL
65352: AND
65353: PUSH
65354: LD_VAR 0 5
65358: PUSH
65359: LD_VAR 0 1
65363: PPUSH
65364: CALL_OW 437
65368: PUSH
65369: LD_INT 1
65371: ARRAY
65372: PUSH
65373: LD_INT 3
65375: ARRAY
65376: EQUAL
65377: AND
65378: IFFALSE 65388
// result := true end ;
65380: LD_ADDR_VAR 0 3
65384: PUSH
65385: LD_INT 1
65387: ST_TO_ADDR
// end ;
65388: LD_VAR 0 3
65392: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65393: LD_INT 0
65395: PPUSH
// result := false ;
65396: LD_ADDR_VAR 0 4
65400: PUSH
65401: LD_INT 0
65403: ST_TO_ADDR
// if GetTaskList ( unit ) then
65404: LD_VAR 0 1
65408: PPUSH
65409: CALL_OW 437
65413: IFFALSE 65496
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65415: LD_STRING M
65417: PUSH
65418: LD_VAR 0 1
65422: PPUSH
65423: CALL_OW 437
65427: PUSH
65428: LD_INT 1
65430: ARRAY
65431: PUSH
65432: LD_INT 1
65434: ARRAY
65435: EQUAL
65436: PUSH
65437: LD_VAR 0 2
65441: PUSH
65442: LD_VAR 0 1
65446: PPUSH
65447: CALL_OW 437
65451: PUSH
65452: LD_INT 1
65454: ARRAY
65455: PUSH
65456: LD_INT 2
65458: ARRAY
65459: EQUAL
65460: AND
65461: PUSH
65462: LD_VAR 0 3
65466: PUSH
65467: LD_VAR 0 1
65471: PPUSH
65472: CALL_OW 437
65476: PUSH
65477: LD_INT 1
65479: ARRAY
65480: PUSH
65481: LD_INT 3
65483: ARRAY
65484: EQUAL
65485: AND
65486: IFFALSE 65496
// result := true ;
65488: LD_ADDR_VAR 0 4
65492: PUSH
65493: LD_INT 1
65495: ST_TO_ADDR
// end ; end ;
65496: LD_VAR 0 4
65500: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65501: LD_INT 0
65503: PPUSH
65504: PPUSH
65505: PPUSH
65506: PPUSH
// if not unit or not area then
65507: LD_VAR 0 1
65511: NOT
65512: PUSH
65513: LD_VAR 0 2
65517: NOT
65518: OR
65519: IFFALSE 65523
// exit ;
65521: GO 65699
// tmp := AreaToList ( area , i ) ;
65523: LD_ADDR_VAR 0 6
65527: PUSH
65528: LD_VAR 0 2
65532: PPUSH
65533: LD_VAR 0 5
65537: PPUSH
65538: CALL_OW 517
65542: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65543: LD_ADDR_VAR 0 5
65547: PUSH
65548: DOUBLE
65549: LD_INT 1
65551: DEC
65552: ST_TO_ADDR
65553: LD_VAR 0 6
65557: PUSH
65558: LD_INT 1
65560: ARRAY
65561: PUSH
65562: FOR_TO
65563: IFFALSE 65697
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65565: LD_ADDR_VAR 0 7
65569: PUSH
65570: LD_VAR 0 6
65574: PUSH
65575: LD_INT 1
65577: ARRAY
65578: PUSH
65579: LD_VAR 0 5
65583: ARRAY
65584: PUSH
65585: LD_VAR 0 6
65589: PUSH
65590: LD_INT 2
65592: ARRAY
65593: PUSH
65594: LD_VAR 0 5
65598: ARRAY
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65604: LD_INT 92
65606: PUSH
65607: LD_VAR 0 7
65611: PUSH
65612: LD_INT 1
65614: ARRAY
65615: PUSH
65616: LD_VAR 0 7
65620: PUSH
65621: LD_INT 2
65623: ARRAY
65624: PUSH
65625: LD_INT 2
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: PPUSH
65634: CALL_OW 69
65638: PUSH
65639: LD_INT 0
65641: EQUAL
65642: IFFALSE 65695
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65644: LD_VAR 0 1
65648: PPUSH
65649: LD_VAR 0 7
65653: PUSH
65654: LD_INT 1
65656: ARRAY
65657: PPUSH
65658: LD_VAR 0 7
65662: PUSH
65663: LD_INT 2
65665: ARRAY
65666: PPUSH
65667: LD_VAR 0 3
65671: PPUSH
65672: CALL_OW 48
// result := IsPlaced ( unit ) ;
65676: LD_ADDR_VAR 0 4
65680: PUSH
65681: LD_VAR 0 1
65685: PPUSH
65686: CALL_OW 305
65690: ST_TO_ADDR
// exit ;
65691: POP
65692: POP
65693: GO 65699
// end ; end ;
65695: GO 65562
65697: POP
65698: POP
// end ;
65699: LD_VAR 0 4
65703: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65704: LD_INT 0
65706: PPUSH
65707: PPUSH
65708: PPUSH
// if not side or side > 8 then
65709: LD_VAR 0 1
65713: NOT
65714: PUSH
65715: LD_VAR 0 1
65719: PUSH
65720: LD_INT 8
65722: GREATER
65723: OR
65724: IFFALSE 65728
// exit ;
65726: GO 65915
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65728: LD_ADDR_VAR 0 4
65732: PUSH
65733: LD_INT 22
65735: PUSH
65736: LD_VAR 0 1
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 21
65747: PUSH
65748: LD_INT 3
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PPUSH
65759: CALL_OW 69
65763: ST_TO_ADDR
// if not tmp then
65764: LD_VAR 0 4
65768: NOT
65769: IFFALSE 65773
// exit ;
65771: GO 65915
// enable_addtolog := true ;
65773: LD_ADDR_OWVAR 81
65777: PUSH
65778: LD_INT 1
65780: ST_TO_ADDR
// AddToLog ( [ ) ;
65781: LD_STRING [
65783: PPUSH
65784: CALL_OW 561
// for i in tmp do
65788: LD_ADDR_VAR 0 3
65792: PUSH
65793: LD_VAR 0 4
65797: PUSH
65798: FOR_IN
65799: IFFALSE 65906
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65801: LD_STRING [
65803: PUSH
65804: LD_VAR 0 3
65808: PPUSH
65809: CALL_OW 266
65813: STR
65814: PUSH
65815: LD_STRING , 
65817: STR
65818: PUSH
65819: LD_VAR 0 3
65823: PPUSH
65824: CALL_OW 250
65828: STR
65829: PUSH
65830: LD_STRING , 
65832: STR
65833: PUSH
65834: LD_VAR 0 3
65838: PPUSH
65839: CALL_OW 251
65843: STR
65844: PUSH
65845: LD_STRING , 
65847: STR
65848: PUSH
65849: LD_VAR 0 3
65853: PPUSH
65854: CALL_OW 254
65858: STR
65859: PUSH
65860: LD_STRING , 
65862: STR
65863: PUSH
65864: LD_VAR 0 3
65868: PPUSH
65869: LD_INT 1
65871: PPUSH
65872: CALL_OW 268
65876: STR
65877: PUSH
65878: LD_STRING , 
65880: STR
65881: PUSH
65882: LD_VAR 0 3
65886: PPUSH
65887: LD_INT 2
65889: PPUSH
65890: CALL_OW 268
65894: STR
65895: PUSH
65896: LD_STRING ],
65898: STR
65899: PPUSH
65900: CALL_OW 561
// end ;
65904: GO 65798
65906: POP
65907: POP
// AddToLog ( ]; ) ;
65908: LD_STRING ];
65910: PPUSH
65911: CALL_OW 561
// end ;
65915: LD_VAR 0 2
65919: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65920: LD_INT 0
65922: PPUSH
65923: PPUSH
65924: PPUSH
65925: PPUSH
65926: PPUSH
// if not area or not rate or not max then
65927: LD_VAR 0 1
65931: NOT
65932: PUSH
65933: LD_VAR 0 2
65937: NOT
65938: OR
65939: PUSH
65940: LD_VAR 0 4
65944: NOT
65945: OR
65946: IFFALSE 65950
// exit ;
65948: GO 66139
// while 1 do
65950: LD_INT 1
65952: IFFALSE 66139
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65954: LD_ADDR_VAR 0 9
65958: PUSH
65959: LD_VAR 0 1
65963: PPUSH
65964: LD_INT 1
65966: PPUSH
65967: CALL_OW 287
65971: PUSH
65972: LD_INT 10
65974: MUL
65975: ST_TO_ADDR
// r := rate / 10 ;
65976: LD_ADDR_VAR 0 7
65980: PUSH
65981: LD_VAR 0 2
65985: PUSH
65986: LD_INT 10
65988: DIVREAL
65989: ST_TO_ADDR
// time := 1 1$00 ;
65990: LD_ADDR_VAR 0 8
65994: PUSH
65995: LD_INT 2100
65997: ST_TO_ADDR
// if amount < min then
65998: LD_VAR 0 9
66002: PUSH
66003: LD_VAR 0 3
66007: LESS
66008: IFFALSE 66026
// r := r * 2 else
66010: LD_ADDR_VAR 0 7
66014: PUSH
66015: LD_VAR 0 7
66019: PUSH
66020: LD_INT 2
66022: MUL
66023: ST_TO_ADDR
66024: GO 66052
// if amount > max then
66026: LD_VAR 0 9
66030: PUSH
66031: LD_VAR 0 4
66035: GREATER
66036: IFFALSE 66052
// r := r / 2 ;
66038: LD_ADDR_VAR 0 7
66042: PUSH
66043: LD_VAR 0 7
66047: PUSH
66048: LD_INT 2
66050: DIVREAL
66051: ST_TO_ADDR
// time := time / r ;
66052: LD_ADDR_VAR 0 8
66056: PUSH
66057: LD_VAR 0 8
66061: PUSH
66062: LD_VAR 0 7
66066: DIVREAL
66067: ST_TO_ADDR
// if time < 0 then
66068: LD_VAR 0 8
66072: PUSH
66073: LD_INT 0
66075: LESS
66076: IFFALSE 66093
// time := time * - 1 ;
66078: LD_ADDR_VAR 0 8
66082: PUSH
66083: LD_VAR 0 8
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: MUL
66092: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66093: LD_VAR 0 8
66097: PUSH
66098: LD_INT 35
66100: PPUSH
66101: LD_INT 875
66103: PPUSH
66104: CALL_OW 12
66108: PLUS
66109: PPUSH
66110: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66114: LD_INT 1
66116: PPUSH
66117: LD_INT 5
66119: PPUSH
66120: CALL_OW 12
66124: PPUSH
66125: LD_VAR 0 1
66129: PPUSH
66130: LD_INT 1
66132: PPUSH
66133: CALL_OW 55
// end ;
66137: GO 65950
// end ;
66139: LD_VAR 0 5
66143: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66144: LD_INT 0
66146: PPUSH
66147: PPUSH
66148: PPUSH
66149: PPUSH
66150: PPUSH
66151: PPUSH
66152: PPUSH
66153: PPUSH
// if not turrets or not factories then
66154: LD_VAR 0 1
66158: NOT
66159: PUSH
66160: LD_VAR 0 2
66164: NOT
66165: OR
66166: IFFALSE 66170
// exit ;
66168: GO 66477
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66170: LD_ADDR_VAR 0 10
66174: PUSH
66175: LD_INT 5
66177: PUSH
66178: LD_INT 6
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: LD_INT 4
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: LD_INT 5
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 24
66212: PUSH
66213: LD_INT 25
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 23
66222: PUSH
66223: LD_INT 27
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 42
66236: PUSH
66237: LD_INT 43
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 44
66246: PUSH
66247: LD_INT 46
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 45
66256: PUSH
66257: LD_INT 47
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: ST_TO_ADDR
// result := [ ] ;
66274: LD_ADDR_VAR 0 3
66278: PUSH
66279: EMPTY
66280: ST_TO_ADDR
// for i in turrets do
66281: LD_ADDR_VAR 0 4
66285: PUSH
66286: LD_VAR 0 1
66290: PUSH
66291: FOR_IN
66292: IFFALSE 66475
// begin nat := GetNation ( i ) ;
66294: LD_ADDR_VAR 0 7
66298: PUSH
66299: LD_VAR 0 4
66303: PPUSH
66304: CALL_OW 248
66308: ST_TO_ADDR
// weapon := 0 ;
66309: LD_ADDR_VAR 0 8
66313: PUSH
66314: LD_INT 0
66316: ST_TO_ADDR
// if not nat then
66317: LD_VAR 0 7
66321: NOT
66322: IFFALSE 66326
// continue ;
66324: GO 66291
// for j in list [ nat ] do
66326: LD_ADDR_VAR 0 5
66330: PUSH
66331: LD_VAR 0 10
66335: PUSH
66336: LD_VAR 0 7
66340: ARRAY
66341: PUSH
66342: FOR_IN
66343: IFFALSE 66384
// if GetBWeapon ( i ) = j [ 1 ] then
66345: LD_VAR 0 4
66349: PPUSH
66350: CALL_OW 269
66354: PUSH
66355: LD_VAR 0 5
66359: PUSH
66360: LD_INT 1
66362: ARRAY
66363: EQUAL
66364: IFFALSE 66382
// begin weapon := j [ 2 ] ;
66366: LD_ADDR_VAR 0 8
66370: PUSH
66371: LD_VAR 0 5
66375: PUSH
66376: LD_INT 2
66378: ARRAY
66379: ST_TO_ADDR
// break ;
66380: GO 66384
// end ;
66382: GO 66342
66384: POP
66385: POP
// if not weapon then
66386: LD_VAR 0 8
66390: NOT
66391: IFFALSE 66395
// continue ;
66393: GO 66291
// for k in factories do
66395: LD_ADDR_VAR 0 6
66399: PUSH
66400: LD_VAR 0 2
66404: PUSH
66405: FOR_IN
66406: IFFALSE 66471
// begin weapons := AvailableWeaponList ( k ) ;
66408: LD_ADDR_VAR 0 9
66412: PUSH
66413: LD_VAR 0 6
66417: PPUSH
66418: CALL_OW 478
66422: ST_TO_ADDR
// if not weapons then
66423: LD_VAR 0 9
66427: NOT
66428: IFFALSE 66432
// continue ;
66430: GO 66405
// if weapon in weapons then
66432: LD_VAR 0 8
66436: PUSH
66437: LD_VAR 0 9
66441: IN
66442: IFFALSE 66469
// begin result := [ i , weapon ] ;
66444: LD_ADDR_VAR 0 3
66448: PUSH
66449: LD_VAR 0 4
66453: PUSH
66454: LD_VAR 0 8
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: ST_TO_ADDR
// exit ;
66463: POP
66464: POP
66465: POP
66466: POP
66467: GO 66477
// end ; end ;
66469: GO 66405
66471: POP
66472: POP
// end ;
66473: GO 66291
66475: POP
66476: POP
// end ;
66477: LD_VAR 0 3
66481: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66482: LD_INT 0
66484: PPUSH
// if not side or side > 8 then
66485: LD_VAR 0 3
66489: NOT
66490: PUSH
66491: LD_VAR 0 3
66495: PUSH
66496: LD_INT 8
66498: GREATER
66499: OR
66500: IFFALSE 66504
// exit ;
66502: GO 66563
// if not range then
66504: LD_VAR 0 4
66508: NOT
66509: IFFALSE 66520
// range := - 12 ;
66511: LD_ADDR_VAR 0 4
66515: PUSH
66516: LD_INT 12
66518: NEG
66519: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66520: LD_VAR 0 1
66524: PPUSH
66525: LD_VAR 0 2
66529: PPUSH
66530: LD_VAR 0 3
66534: PPUSH
66535: LD_VAR 0 4
66539: PPUSH
66540: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66544: LD_VAR 0 1
66548: PPUSH
66549: LD_VAR 0 2
66553: PPUSH
66554: LD_VAR 0 3
66558: PPUSH
66559: CALL_OW 331
// end ;
66563: LD_VAR 0 5
66567: RET
// export function Video ( mode ) ; begin
66568: LD_INT 0
66570: PPUSH
// ingame_video = mode ;
66571: LD_ADDR_OWVAR 52
66575: PUSH
66576: LD_VAR 0 1
66580: ST_TO_ADDR
// interface_hidden = mode ;
66581: LD_ADDR_OWVAR 54
66585: PUSH
66586: LD_VAR 0 1
66590: ST_TO_ADDR
// end ;
66591: LD_VAR 0 2
66595: RET
// export function Join ( array , element ) ; begin
66596: LD_INT 0
66598: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66599: LD_ADDR_VAR 0 3
66603: PUSH
66604: LD_VAR 0 1
66608: PPUSH
66609: LD_VAR 0 1
66613: PUSH
66614: LD_INT 1
66616: PLUS
66617: PPUSH
66618: LD_VAR 0 2
66622: PPUSH
66623: CALL_OW 1
66627: ST_TO_ADDR
// end ;
66628: LD_VAR 0 3
66632: RET
// export function JoinUnion ( array , element ) ; begin
66633: LD_INT 0
66635: PPUSH
// result := array union element ;
66636: LD_ADDR_VAR 0 3
66640: PUSH
66641: LD_VAR 0 1
66645: PUSH
66646: LD_VAR 0 2
66650: UNION
66651: ST_TO_ADDR
// end ;
66652: LD_VAR 0 3
66656: RET
// export function GetBehemoths ( side ) ; begin
66657: LD_INT 0
66659: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66660: LD_ADDR_VAR 0 2
66664: PUSH
66665: LD_INT 22
66667: PUSH
66668: LD_VAR 0 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 31
66679: PUSH
66680: LD_INT 25
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PPUSH
66691: CALL_OW 69
66695: ST_TO_ADDR
// end ;
66696: LD_VAR 0 2
66700: RET
// export function Shuffle ( array ) ; var i , index ; begin
66701: LD_INT 0
66703: PPUSH
66704: PPUSH
66705: PPUSH
// result := [ ] ;
66706: LD_ADDR_VAR 0 2
66710: PUSH
66711: EMPTY
66712: ST_TO_ADDR
// if not array then
66713: LD_VAR 0 1
66717: NOT
66718: IFFALSE 66722
// exit ;
66720: GO 66821
// Randomize ;
66722: CALL_OW 10
// for i = array downto 1 do
66726: LD_ADDR_VAR 0 3
66730: PUSH
66731: DOUBLE
66732: LD_VAR 0 1
66736: INC
66737: ST_TO_ADDR
66738: LD_INT 1
66740: PUSH
66741: FOR_DOWNTO
66742: IFFALSE 66819
// begin index := rand ( 1 , array ) ;
66744: LD_ADDR_VAR 0 4
66748: PUSH
66749: LD_INT 1
66751: PPUSH
66752: LD_VAR 0 1
66756: PPUSH
66757: CALL_OW 12
66761: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66762: LD_ADDR_VAR 0 2
66766: PUSH
66767: LD_VAR 0 2
66771: PPUSH
66772: LD_VAR 0 2
66776: PUSH
66777: LD_INT 1
66779: PLUS
66780: PPUSH
66781: LD_VAR 0 1
66785: PUSH
66786: LD_VAR 0 4
66790: ARRAY
66791: PPUSH
66792: CALL_OW 2
66796: ST_TO_ADDR
// array := Delete ( array , index ) ;
66797: LD_ADDR_VAR 0 1
66801: PUSH
66802: LD_VAR 0 1
66806: PPUSH
66807: LD_VAR 0 4
66811: PPUSH
66812: CALL_OW 3
66816: ST_TO_ADDR
// end ;
66817: GO 66741
66819: POP
66820: POP
// end ;
66821: LD_VAR 0 2
66825: RET
// export function GetBaseMaterials ( base ) ; begin
66826: LD_INT 0
66828: PPUSH
// result := [ 0 , 0 , 0 ] ;
66829: LD_ADDR_VAR 0 2
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: LIST
66847: ST_TO_ADDR
// if not base then
66848: LD_VAR 0 1
66852: NOT
66853: IFFALSE 66857
// exit ;
66855: GO 66906
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66857: LD_ADDR_VAR 0 2
66861: PUSH
66862: LD_VAR 0 1
66866: PPUSH
66867: LD_INT 1
66869: PPUSH
66870: CALL_OW 275
66874: PUSH
66875: LD_VAR 0 1
66879: PPUSH
66880: LD_INT 2
66882: PPUSH
66883: CALL_OW 275
66887: PUSH
66888: LD_VAR 0 1
66892: PPUSH
66893: LD_INT 3
66895: PPUSH
66896: CALL_OW 275
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: LIST
66905: ST_TO_ADDR
// end ;
66906: LD_VAR 0 2
66910: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66911: LD_INT 0
66913: PPUSH
66914: PPUSH
// result := array ;
66915: LD_ADDR_VAR 0 3
66919: PUSH
66920: LD_VAR 0 1
66924: ST_TO_ADDR
// if size >= result then
66925: LD_VAR 0 2
66929: PUSH
66930: LD_VAR 0 3
66934: GREATEREQUAL
66935: IFFALSE 66939
// exit ;
66937: GO 66989
// if size then
66939: LD_VAR 0 2
66943: IFFALSE 66989
// for i := array downto size do
66945: LD_ADDR_VAR 0 4
66949: PUSH
66950: DOUBLE
66951: LD_VAR 0 1
66955: INC
66956: ST_TO_ADDR
66957: LD_VAR 0 2
66961: PUSH
66962: FOR_DOWNTO
66963: IFFALSE 66987
// result := Delete ( result , result ) ;
66965: LD_ADDR_VAR 0 3
66969: PUSH
66970: LD_VAR 0 3
66974: PPUSH
66975: LD_VAR 0 3
66979: PPUSH
66980: CALL_OW 3
66984: ST_TO_ADDR
66985: GO 66962
66987: POP
66988: POP
// end ;
66989: LD_VAR 0 3
66993: RET
// export function ComExit ( unit ) ; var tmp ; begin
66994: LD_INT 0
66996: PPUSH
66997: PPUSH
// if not IsInUnit ( unit ) then
66998: LD_VAR 0 1
67002: PPUSH
67003: CALL_OW 310
67007: NOT
67008: IFFALSE 67012
// exit ;
67010: GO 67072
// tmp := IsInUnit ( unit ) ;
67012: LD_ADDR_VAR 0 3
67016: PUSH
67017: LD_VAR 0 1
67021: PPUSH
67022: CALL_OW 310
67026: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67027: LD_VAR 0 3
67031: PPUSH
67032: CALL_OW 247
67036: PUSH
67037: LD_INT 2
67039: EQUAL
67040: IFFALSE 67053
// ComExitVehicle ( unit ) else
67042: LD_VAR 0 1
67046: PPUSH
67047: CALL_OW 121
67051: GO 67062
// ComExitBuilding ( unit ) ;
67053: LD_VAR 0 1
67057: PPUSH
67058: CALL_OW 122
// result := tmp ;
67062: LD_ADDR_VAR 0 2
67066: PUSH
67067: LD_VAR 0 3
67071: ST_TO_ADDR
// end ;
67072: LD_VAR 0 2
67076: RET
// export function ComExitAll ( units ) ; var i ; begin
67077: LD_INT 0
67079: PPUSH
67080: PPUSH
// if not units then
67081: LD_VAR 0 1
67085: NOT
67086: IFFALSE 67090
// exit ;
67088: GO 67116
// for i in units do
67090: LD_ADDR_VAR 0 3
67094: PUSH
67095: LD_VAR 0 1
67099: PUSH
67100: FOR_IN
67101: IFFALSE 67114
// ComExit ( i ) ;
67103: LD_VAR 0 3
67107: PPUSH
67108: CALL 66994 0 1
67112: GO 67100
67114: POP
67115: POP
// end ;
67116: LD_VAR 0 2
67120: RET
// export function ResetHc ; begin
67121: LD_INT 0
67123: PPUSH
// InitHc ;
67124: CALL_OW 19
// hc_importance := 0 ;
67128: LD_ADDR_OWVAR 32
67132: PUSH
67133: LD_INT 0
67135: ST_TO_ADDR
// end ;
67136: LD_VAR 0 1
67140: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67141: LD_INT 0
67143: PPUSH
67144: PPUSH
67145: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67146: LD_ADDR_VAR 0 6
67150: PUSH
67151: LD_VAR 0 1
67155: PUSH
67156: LD_VAR 0 3
67160: PLUS
67161: PUSH
67162: LD_INT 2
67164: DIV
67165: ST_TO_ADDR
// if _x < 0 then
67166: LD_VAR 0 6
67170: PUSH
67171: LD_INT 0
67173: LESS
67174: IFFALSE 67191
// _x := _x * - 1 ;
67176: LD_ADDR_VAR 0 6
67180: PUSH
67181: LD_VAR 0 6
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: MUL
67190: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67191: LD_ADDR_VAR 0 7
67195: PUSH
67196: LD_VAR 0 2
67200: PUSH
67201: LD_VAR 0 4
67205: PLUS
67206: PUSH
67207: LD_INT 2
67209: DIV
67210: ST_TO_ADDR
// if _y < 0 then
67211: LD_VAR 0 7
67215: PUSH
67216: LD_INT 0
67218: LESS
67219: IFFALSE 67236
// _y := _y * - 1 ;
67221: LD_ADDR_VAR 0 7
67225: PUSH
67226: LD_VAR 0 7
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: MUL
67235: ST_TO_ADDR
// result := [ _x , _y ] ;
67236: LD_ADDR_VAR 0 5
67240: PUSH
67241: LD_VAR 0 6
67245: PUSH
67246: LD_VAR 0 7
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: ST_TO_ADDR
// end ;
67255: LD_VAR 0 5
67259: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67260: LD_INT 0
67262: PPUSH
67263: PPUSH
67264: PPUSH
67265: PPUSH
// task := GetTaskList ( unit ) ;
67266: LD_ADDR_VAR 0 7
67270: PUSH
67271: LD_VAR 0 1
67275: PPUSH
67276: CALL_OW 437
67280: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67281: LD_VAR 0 7
67285: NOT
67286: PUSH
67287: LD_VAR 0 1
67291: PPUSH
67292: LD_VAR 0 2
67296: PPUSH
67297: CALL_OW 308
67301: NOT
67302: AND
67303: IFFALSE 67307
// exit ;
67305: GO 67425
// if IsInArea ( unit , area ) then
67307: LD_VAR 0 1
67311: PPUSH
67312: LD_VAR 0 2
67316: PPUSH
67317: CALL_OW 308
67321: IFFALSE 67339
// begin ComMoveToArea ( unit , goAway ) ;
67323: LD_VAR 0 1
67327: PPUSH
67328: LD_VAR 0 3
67332: PPUSH
67333: CALL_OW 113
// exit ;
67337: GO 67425
// end ; if task [ 1 ] [ 1 ] <> M then
67339: LD_VAR 0 7
67343: PUSH
67344: LD_INT 1
67346: ARRAY
67347: PUSH
67348: LD_INT 1
67350: ARRAY
67351: PUSH
67352: LD_STRING M
67354: NONEQUAL
67355: IFFALSE 67359
// exit ;
67357: GO 67425
// x := task [ 1 ] [ 2 ] ;
67359: LD_ADDR_VAR 0 5
67363: PUSH
67364: LD_VAR 0 7
67368: PUSH
67369: LD_INT 1
67371: ARRAY
67372: PUSH
67373: LD_INT 2
67375: ARRAY
67376: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67377: LD_ADDR_VAR 0 6
67381: PUSH
67382: LD_VAR 0 7
67386: PUSH
67387: LD_INT 1
67389: ARRAY
67390: PUSH
67391: LD_INT 3
67393: ARRAY
67394: ST_TO_ADDR
// if InArea ( x , y , area ) then
67395: LD_VAR 0 5
67399: PPUSH
67400: LD_VAR 0 6
67404: PPUSH
67405: LD_VAR 0 2
67409: PPUSH
67410: CALL_OW 309
67414: IFFALSE 67425
// ComStop ( unit ) ;
67416: LD_VAR 0 1
67420: PPUSH
67421: CALL_OW 141
// end ;
67425: LD_VAR 0 4
67429: RET
// export function Abs ( value ) ; begin
67430: LD_INT 0
67432: PPUSH
// result := value ;
67433: LD_ADDR_VAR 0 2
67437: PUSH
67438: LD_VAR 0 1
67442: ST_TO_ADDR
// if value < 0 then
67443: LD_VAR 0 1
67447: PUSH
67448: LD_INT 0
67450: LESS
67451: IFFALSE 67468
// result := value * - 1 ;
67453: LD_ADDR_VAR 0 2
67457: PUSH
67458: LD_VAR 0 1
67462: PUSH
67463: LD_INT 1
67465: NEG
67466: MUL
67467: ST_TO_ADDR
// end ;
67468: LD_VAR 0 2
67472: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67473: LD_INT 0
67475: PPUSH
67476: PPUSH
67477: PPUSH
67478: PPUSH
67479: PPUSH
67480: PPUSH
67481: PPUSH
67482: PPUSH
// if not unit or not building then
67483: LD_VAR 0 1
67487: NOT
67488: PUSH
67489: LD_VAR 0 2
67493: NOT
67494: OR
67495: IFFALSE 67499
// exit ;
67497: GO 67725
// x := GetX ( building ) ;
67499: LD_ADDR_VAR 0 4
67503: PUSH
67504: LD_VAR 0 2
67508: PPUSH
67509: CALL_OW 250
67513: ST_TO_ADDR
// y := GetY ( building ) ;
67514: LD_ADDR_VAR 0 6
67518: PUSH
67519: LD_VAR 0 2
67523: PPUSH
67524: CALL_OW 251
67528: ST_TO_ADDR
// d := GetDir ( building ) ;
67529: LD_ADDR_VAR 0 8
67533: PUSH
67534: LD_VAR 0 2
67538: PPUSH
67539: CALL_OW 254
67543: ST_TO_ADDR
// r := 4 ;
67544: LD_ADDR_VAR 0 9
67548: PUSH
67549: LD_INT 4
67551: ST_TO_ADDR
// for i := 1 to 5 do
67552: LD_ADDR_VAR 0 10
67556: PUSH
67557: DOUBLE
67558: LD_INT 1
67560: DEC
67561: ST_TO_ADDR
67562: LD_INT 5
67564: PUSH
67565: FOR_TO
67566: IFFALSE 67723
// begin _x := ShiftX ( x , d , r + i ) ;
67568: LD_ADDR_VAR 0 5
67572: PUSH
67573: LD_VAR 0 4
67577: PPUSH
67578: LD_VAR 0 8
67582: PPUSH
67583: LD_VAR 0 9
67587: PUSH
67588: LD_VAR 0 10
67592: PLUS
67593: PPUSH
67594: CALL_OW 272
67598: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67599: LD_ADDR_VAR 0 7
67603: PUSH
67604: LD_VAR 0 6
67608: PPUSH
67609: LD_VAR 0 8
67613: PPUSH
67614: LD_VAR 0 9
67618: PUSH
67619: LD_VAR 0 10
67623: PLUS
67624: PPUSH
67625: CALL_OW 273
67629: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67630: LD_VAR 0 5
67634: PPUSH
67635: LD_VAR 0 7
67639: PPUSH
67640: CALL_OW 488
67644: PUSH
67645: LD_VAR 0 5
67649: PPUSH
67650: LD_VAR 0 7
67654: PPUSH
67655: CALL_OW 428
67659: PPUSH
67660: CALL_OW 247
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: IN
67675: NOT
67676: AND
67677: IFFALSE 67721
// begin ComMoveXY ( unit , _x , _y ) ;
67679: LD_VAR 0 1
67683: PPUSH
67684: LD_VAR 0 5
67688: PPUSH
67689: LD_VAR 0 7
67693: PPUSH
67694: CALL_OW 111
// result := [ _x , _y ] ;
67698: LD_ADDR_VAR 0 3
67702: PUSH
67703: LD_VAR 0 5
67707: PUSH
67708: LD_VAR 0 7
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: ST_TO_ADDR
// exit ;
67717: POP
67718: POP
67719: GO 67725
// end ; end ;
67721: GO 67565
67723: POP
67724: POP
// end ;
67725: LD_VAR 0 3
67729: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67730: LD_INT 0
67732: PPUSH
67733: PPUSH
67734: PPUSH
// result := 0 ;
67735: LD_ADDR_VAR 0 3
67739: PUSH
67740: LD_INT 0
67742: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67743: LD_VAR 0 1
67747: PUSH
67748: LD_INT 0
67750: LESS
67751: PUSH
67752: LD_VAR 0 1
67756: PUSH
67757: LD_INT 8
67759: GREATER
67760: OR
67761: PUSH
67762: LD_VAR 0 2
67766: PUSH
67767: LD_INT 0
67769: LESS
67770: OR
67771: PUSH
67772: LD_VAR 0 2
67776: PUSH
67777: LD_INT 8
67779: GREATER
67780: OR
67781: IFFALSE 67785
// exit ;
67783: GO 67860
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67785: LD_ADDR_VAR 0 4
67789: PUSH
67790: LD_INT 22
67792: PUSH
67793: LD_VAR 0 2
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PPUSH
67802: CALL_OW 69
67806: PUSH
67807: FOR_IN
67808: IFFALSE 67858
// begin un := UnitShoot ( i ) ;
67810: LD_ADDR_VAR 0 5
67814: PUSH
67815: LD_VAR 0 4
67819: PPUSH
67820: CALL_OW 504
67824: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67825: LD_VAR 0 5
67829: PPUSH
67830: CALL_OW 255
67834: PUSH
67835: LD_VAR 0 1
67839: EQUAL
67840: IFFALSE 67856
// begin result := un ;
67842: LD_ADDR_VAR 0 3
67846: PUSH
67847: LD_VAR 0 5
67851: ST_TO_ADDR
// exit ;
67852: POP
67853: POP
67854: GO 67860
// end ; end ;
67856: GO 67807
67858: POP
67859: POP
// end ;
67860: LD_VAR 0 3
67864: RET
// export function GetCargoBay ( units ) ; begin
67865: LD_INT 0
67867: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67868: LD_ADDR_VAR 0 2
67872: PUSH
67873: LD_VAR 0 1
67877: PPUSH
67878: LD_INT 2
67880: PUSH
67881: LD_INT 34
67883: PUSH
67884: LD_INT 12
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 34
67893: PUSH
67894: LD_INT 51
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 34
67903: PUSH
67904: LD_INT 32
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 34
67913: PUSH
67914: LD_INT 89
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: PPUSH
67928: CALL_OW 72
67932: ST_TO_ADDR
// end ;
67933: LD_VAR 0 2
67937: RET
// export function Negate ( value ) ; begin
67938: LD_INT 0
67940: PPUSH
// result := not value ;
67941: LD_ADDR_VAR 0 2
67945: PUSH
67946: LD_VAR 0 1
67950: NOT
67951: ST_TO_ADDR
// end ;
67952: LD_VAR 0 2
67956: RET
// export function Inc ( value ) ; begin
67957: LD_INT 0
67959: PPUSH
// result := value + 1 ;
67960: LD_ADDR_VAR 0 2
67964: PUSH
67965: LD_VAR 0 1
67969: PUSH
67970: LD_INT 1
67972: PLUS
67973: ST_TO_ADDR
// end ;
67974: LD_VAR 0 2
67978: RET
// export function Dec ( value ) ; begin
67979: LD_INT 0
67981: PPUSH
// result := value - 1 ;
67982: LD_ADDR_VAR 0 2
67986: PUSH
67987: LD_VAR 0 1
67991: PUSH
67992: LD_INT 1
67994: MINUS
67995: ST_TO_ADDR
// end ;
67996: LD_VAR 0 2
68000: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68001: LD_INT 0
68003: PPUSH
68004: PPUSH
68005: PPUSH
68006: PPUSH
68007: PPUSH
68008: PPUSH
68009: PPUSH
68010: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68011: LD_VAR 0 1
68015: PPUSH
68016: LD_VAR 0 2
68020: PPUSH
68021: CALL_OW 488
68025: NOT
68026: PUSH
68027: LD_VAR 0 3
68031: PPUSH
68032: LD_VAR 0 4
68036: PPUSH
68037: CALL_OW 488
68041: NOT
68042: OR
68043: IFFALSE 68056
// begin result := - 1 ;
68045: LD_ADDR_VAR 0 5
68049: PUSH
68050: LD_INT 1
68052: NEG
68053: ST_TO_ADDR
// exit ;
68054: GO 68291
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68056: LD_ADDR_VAR 0 12
68060: PUSH
68061: LD_VAR 0 1
68065: PPUSH
68066: LD_VAR 0 2
68070: PPUSH
68071: LD_VAR 0 3
68075: PPUSH
68076: LD_VAR 0 4
68080: PPUSH
68081: CALL 67141 0 4
68085: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68086: LD_ADDR_VAR 0 11
68090: PUSH
68091: LD_VAR 0 1
68095: PPUSH
68096: LD_VAR 0 2
68100: PPUSH
68101: LD_VAR 0 12
68105: PUSH
68106: LD_INT 1
68108: ARRAY
68109: PPUSH
68110: LD_VAR 0 12
68114: PUSH
68115: LD_INT 2
68117: ARRAY
68118: PPUSH
68119: CALL_OW 298
68123: ST_TO_ADDR
// distance := 9999 ;
68124: LD_ADDR_VAR 0 10
68128: PUSH
68129: LD_INT 9999
68131: ST_TO_ADDR
// for i := 0 to 5 do
68132: LD_ADDR_VAR 0 6
68136: PUSH
68137: DOUBLE
68138: LD_INT 0
68140: DEC
68141: ST_TO_ADDR
68142: LD_INT 5
68144: PUSH
68145: FOR_TO
68146: IFFALSE 68289
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68148: LD_ADDR_VAR 0 7
68152: PUSH
68153: LD_VAR 0 1
68157: PPUSH
68158: LD_VAR 0 6
68162: PPUSH
68163: LD_VAR 0 11
68167: PPUSH
68168: CALL_OW 272
68172: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68173: LD_ADDR_VAR 0 8
68177: PUSH
68178: LD_VAR 0 2
68182: PPUSH
68183: LD_VAR 0 6
68187: PPUSH
68188: LD_VAR 0 11
68192: PPUSH
68193: CALL_OW 273
68197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68198: LD_VAR 0 7
68202: PPUSH
68203: LD_VAR 0 8
68207: PPUSH
68208: CALL_OW 488
68212: NOT
68213: IFFALSE 68217
// continue ;
68215: GO 68145
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68217: LD_ADDR_VAR 0 9
68221: PUSH
68222: LD_VAR 0 12
68226: PUSH
68227: LD_INT 1
68229: ARRAY
68230: PPUSH
68231: LD_VAR 0 12
68235: PUSH
68236: LD_INT 2
68238: ARRAY
68239: PPUSH
68240: LD_VAR 0 7
68244: PPUSH
68245: LD_VAR 0 8
68249: PPUSH
68250: CALL_OW 298
68254: ST_TO_ADDR
// if tmp < distance then
68255: LD_VAR 0 9
68259: PUSH
68260: LD_VAR 0 10
68264: LESS
68265: IFFALSE 68287
// begin result := i ;
68267: LD_ADDR_VAR 0 5
68271: PUSH
68272: LD_VAR 0 6
68276: ST_TO_ADDR
// distance := tmp ;
68277: LD_ADDR_VAR 0 10
68281: PUSH
68282: LD_VAR 0 9
68286: ST_TO_ADDR
// end ; end ;
68287: GO 68145
68289: POP
68290: POP
// end ;
68291: LD_VAR 0 5
68295: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68296: LD_INT 0
68298: PPUSH
68299: PPUSH
// if not driver or not IsInUnit ( driver ) then
68300: LD_VAR 0 1
68304: NOT
68305: PUSH
68306: LD_VAR 0 1
68310: PPUSH
68311: CALL_OW 310
68315: NOT
68316: OR
68317: IFFALSE 68321
// exit ;
68319: GO 68411
// vehicle := IsInUnit ( driver ) ;
68321: LD_ADDR_VAR 0 3
68325: PUSH
68326: LD_VAR 0 1
68330: PPUSH
68331: CALL_OW 310
68335: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68336: LD_VAR 0 1
68340: PPUSH
68341: LD_STRING \
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: PUSH
68371: LD_STRING E
68373: PUSH
68374: LD_INT 0
68376: PUSH
68377: LD_INT 0
68379: PUSH
68380: LD_VAR 0 3
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: LD_INT 0
68390: PUSH
68391: LD_INT 0
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PPUSH
68407: CALL_OW 446
// end ;
68411: LD_VAR 0 2
68415: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68416: LD_INT 0
68418: PPUSH
68419: PPUSH
// if not driver or not IsInUnit ( driver ) then
68420: LD_VAR 0 1
68424: NOT
68425: PUSH
68426: LD_VAR 0 1
68430: PPUSH
68431: CALL_OW 310
68435: NOT
68436: OR
68437: IFFALSE 68441
// exit ;
68439: GO 68531
// vehicle := IsInUnit ( driver ) ;
68441: LD_ADDR_VAR 0 3
68445: PUSH
68446: LD_VAR 0 1
68450: PPUSH
68451: CALL_OW 310
68455: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68456: LD_VAR 0 1
68460: PPUSH
68461: LD_STRING \
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: LD_INT 0
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: PUSH
68491: LD_STRING E
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: LD_INT 0
68499: PUSH
68500: LD_VAR 0 3
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: LD_INT 0
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PPUSH
68527: CALL_OW 447
// end ;
68531: LD_VAR 0 2
68535: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68536: LD_INT 0
68538: PPUSH
68539: PPUSH
68540: PPUSH
// tmp := [ ] ;
68541: LD_ADDR_VAR 0 5
68545: PUSH
68546: EMPTY
68547: ST_TO_ADDR
// for i in units do
68548: LD_ADDR_VAR 0 4
68552: PUSH
68553: LD_VAR 0 1
68557: PUSH
68558: FOR_IN
68559: IFFALSE 68597
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68561: LD_ADDR_VAR 0 5
68565: PUSH
68566: LD_VAR 0 5
68570: PPUSH
68571: LD_VAR 0 5
68575: PUSH
68576: LD_INT 1
68578: PLUS
68579: PPUSH
68580: LD_VAR 0 4
68584: PPUSH
68585: CALL_OW 256
68589: PPUSH
68590: CALL_OW 2
68594: ST_TO_ADDR
68595: GO 68558
68597: POP
68598: POP
// if not tmp then
68599: LD_VAR 0 5
68603: NOT
68604: IFFALSE 68608
// exit ;
68606: GO 68656
// if asc then
68608: LD_VAR 0 2
68612: IFFALSE 68636
// result := SortListByListAsc ( units , tmp ) else
68614: LD_ADDR_VAR 0 3
68618: PUSH
68619: LD_VAR 0 1
68623: PPUSH
68624: LD_VAR 0 5
68628: PPUSH
68629: CALL_OW 76
68633: ST_TO_ADDR
68634: GO 68656
// result := SortListByListDesc ( units , tmp ) ;
68636: LD_ADDR_VAR 0 3
68640: PUSH
68641: LD_VAR 0 1
68645: PPUSH
68646: LD_VAR 0 5
68650: PPUSH
68651: CALL_OW 77
68655: ST_TO_ADDR
// end ;
68656: LD_VAR 0 3
68660: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68661: LD_INT 0
68663: PPUSH
68664: PPUSH
// task := GetTaskList ( mech ) ;
68665: LD_ADDR_VAR 0 4
68669: PUSH
68670: LD_VAR 0 1
68674: PPUSH
68675: CALL_OW 437
68679: ST_TO_ADDR
// if not task then
68680: LD_VAR 0 4
68684: NOT
68685: IFFALSE 68689
// exit ;
68687: GO 68731
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68689: LD_ADDR_VAR 0 3
68693: PUSH
68694: LD_VAR 0 4
68698: PUSH
68699: LD_INT 1
68701: ARRAY
68702: PUSH
68703: LD_INT 1
68705: ARRAY
68706: PUSH
68707: LD_STRING r
68709: EQUAL
68710: PUSH
68711: LD_VAR 0 4
68715: PUSH
68716: LD_INT 1
68718: ARRAY
68719: PUSH
68720: LD_INT 4
68722: ARRAY
68723: PUSH
68724: LD_VAR 0 2
68728: EQUAL
68729: AND
68730: ST_TO_ADDR
// end ;
68731: LD_VAR 0 3
68735: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68736: LD_INT 0
68738: PPUSH
// SetDir ( unit , d ) ;
68739: LD_VAR 0 1
68743: PPUSH
68744: LD_VAR 0 4
68748: PPUSH
68749: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68753: LD_VAR 0 1
68757: PPUSH
68758: LD_VAR 0 2
68762: PPUSH
68763: LD_VAR 0 3
68767: PPUSH
68768: LD_VAR 0 5
68772: PPUSH
68773: CALL_OW 48
// end ;
68777: LD_VAR 0 6
68781: RET
// export function ToNaturalNumber ( number ) ; begin
68782: LD_INT 0
68784: PPUSH
// result := number div 1 ;
68785: LD_ADDR_VAR 0 2
68789: PUSH
68790: LD_VAR 0 1
68794: PUSH
68795: LD_INT 1
68797: DIV
68798: ST_TO_ADDR
// if number < 0 then
68799: LD_VAR 0 1
68803: PUSH
68804: LD_INT 0
68806: LESS
68807: IFFALSE 68817
// result := 0 ;
68809: LD_ADDR_VAR 0 2
68813: PUSH
68814: LD_INT 0
68816: ST_TO_ADDR
// end ;
68817: LD_VAR 0 2
68821: RET
// export function SortByClass ( units , class ) ; var un ; begin
68822: LD_INT 0
68824: PPUSH
68825: PPUSH
// if not units or not class then
68826: LD_VAR 0 1
68830: NOT
68831: PUSH
68832: LD_VAR 0 2
68836: NOT
68837: OR
68838: IFFALSE 68842
// exit ;
68840: GO 68937
// result := [ ] ;
68842: LD_ADDR_VAR 0 3
68846: PUSH
68847: EMPTY
68848: ST_TO_ADDR
// for un in units do
68849: LD_ADDR_VAR 0 4
68853: PUSH
68854: LD_VAR 0 1
68858: PUSH
68859: FOR_IN
68860: IFFALSE 68935
// if GetClass ( un ) = class then
68862: LD_VAR 0 4
68866: PPUSH
68867: CALL_OW 257
68871: PUSH
68872: LD_VAR 0 2
68876: EQUAL
68877: IFFALSE 68904
// result := Insert ( result , 1 , un ) else
68879: LD_ADDR_VAR 0 3
68883: PUSH
68884: LD_VAR 0 3
68888: PPUSH
68889: LD_INT 1
68891: PPUSH
68892: LD_VAR 0 4
68896: PPUSH
68897: CALL_OW 2
68901: ST_TO_ADDR
68902: GO 68933
// result := Replace ( result , result + 1 , un ) ;
68904: LD_ADDR_VAR 0 3
68908: PUSH
68909: LD_VAR 0 3
68913: PPUSH
68914: LD_VAR 0 3
68918: PUSH
68919: LD_INT 1
68921: PLUS
68922: PPUSH
68923: LD_VAR 0 4
68927: PPUSH
68928: CALL_OW 1
68932: ST_TO_ADDR
68933: GO 68859
68935: POP
68936: POP
// end ;
68937: LD_VAR 0 3
68941: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68942: LD_INT 0
68944: PPUSH
68945: PPUSH
68946: PPUSH
68947: PPUSH
68948: PPUSH
68949: PPUSH
68950: PPUSH
// result := [ ] ;
68951: LD_ADDR_VAR 0 4
68955: PUSH
68956: EMPTY
68957: ST_TO_ADDR
// if x - r < 0 then
68958: LD_VAR 0 1
68962: PUSH
68963: LD_VAR 0 3
68967: MINUS
68968: PUSH
68969: LD_INT 0
68971: LESS
68972: IFFALSE 68984
// min_x := 0 else
68974: LD_ADDR_VAR 0 8
68978: PUSH
68979: LD_INT 0
68981: ST_TO_ADDR
68982: GO 69000
// min_x := x - r ;
68984: LD_ADDR_VAR 0 8
68988: PUSH
68989: LD_VAR 0 1
68993: PUSH
68994: LD_VAR 0 3
68998: MINUS
68999: ST_TO_ADDR
// if y - r < 0 then
69000: LD_VAR 0 2
69004: PUSH
69005: LD_VAR 0 3
69009: MINUS
69010: PUSH
69011: LD_INT 0
69013: LESS
69014: IFFALSE 69026
// min_y := 0 else
69016: LD_ADDR_VAR 0 7
69020: PUSH
69021: LD_INT 0
69023: ST_TO_ADDR
69024: GO 69042
// min_y := y - r ;
69026: LD_ADDR_VAR 0 7
69030: PUSH
69031: LD_VAR 0 2
69035: PUSH
69036: LD_VAR 0 3
69040: MINUS
69041: ST_TO_ADDR
// max_x := x + r ;
69042: LD_ADDR_VAR 0 9
69046: PUSH
69047: LD_VAR 0 1
69051: PUSH
69052: LD_VAR 0 3
69056: PLUS
69057: ST_TO_ADDR
// max_y := y + r ;
69058: LD_ADDR_VAR 0 10
69062: PUSH
69063: LD_VAR 0 2
69067: PUSH
69068: LD_VAR 0 3
69072: PLUS
69073: ST_TO_ADDR
// for _x = min_x to max_x do
69074: LD_ADDR_VAR 0 5
69078: PUSH
69079: DOUBLE
69080: LD_VAR 0 8
69084: DEC
69085: ST_TO_ADDR
69086: LD_VAR 0 9
69090: PUSH
69091: FOR_TO
69092: IFFALSE 69193
// for _y = min_y to max_y do
69094: LD_ADDR_VAR 0 6
69098: PUSH
69099: DOUBLE
69100: LD_VAR 0 7
69104: DEC
69105: ST_TO_ADDR
69106: LD_VAR 0 10
69110: PUSH
69111: FOR_TO
69112: IFFALSE 69189
// begin if not ValidHex ( _x , _y ) then
69114: LD_VAR 0 5
69118: PPUSH
69119: LD_VAR 0 6
69123: PPUSH
69124: CALL_OW 488
69128: NOT
69129: IFFALSE 69133
// continue ;
69131: GO 69111
// if GetResourceTypeXY ( _x , _y ) then
69133: LD_VAR 0 5
69137: PPUSH
69138: LD_VAR 0 6
69142: PPUSH
69143: CALL_OW 283
69147: IFFALSE 69187
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69149: LD_ADDR_VAR 0 4
69153: PUSH
69154: LD_VAR 0 4
69158: PPUSH
69159: LD_VAR 0 4
69163: PUSH
69164: LD_INT 1
69166: PLUS
69167: PPUSH
69168: LD_VAR 0 5
69172: PUSH
69173: LD_VAR 0 6
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PPUSH
69182: CALL_OW 1
69186: ST_TO_ADDR
// end ;
69187: GO 69111
69189: POP
69190: POP
69191: GO 69091
69193: POP
69194: POP
// end ;
69195: LD_VAR 0 4
69199: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69200: LD_INT 0
69202: PPUSH
69203: PPUSH
69204: PPUSH
69205: PPUSH
69206: PPUSH
69207: PPUSH
69208: PPUSH
69209: PPUSH
// if not units then
69210: LD_VAR 0 1
69214: NOT
69215: IFFALSE 69219
// exit ;
69217: GO 69743
// result := UnitFilter ( units , [ f_ok ] ) ;
69219: LD_ADDR_VAR 0 3
69223: PUSH
69224: LD_VAR 0 1
69228: PPUSH
69229: LD_INT 50
69231: PUSH
69232: EMPTY
69233: LIST
69234: PPUSH
69235: CALL_OW 72
69239: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69240: LD_ADDR_VAR 0 8
69244: PUSH
69245: LD_VAR 0 1
69249: PUSH
69250: LD_INT 1
69252: ARRAY
69253: PPUSH
69254: CALL_OW 255
69258: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69259: LD_ADDR_VAR 0 10
69263: PUSH
69264: LD_INT 29
69266: PUSH
69267: LD_INT 91
69269: PUSH
69270: LD_INT 49
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: LIST
69277: ST_TO_ADDR
// if not result then
69278: LD_VAR 0 3
69282: NOT
69283: IFFALSE 69287
// exit ;
69285: GO 69743
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69287: LD_ADDR_VAR 0 5
69291: PUSH
69292: LD_INT 81
69294: PUSH
69295: LD_VAR 0 8
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PPUSH
69304: CALL_OW 69
69308: ST_TO_ADDR
// for i in result do
69309: LD_ADDR_VAR 0 4
69313: PUSH
69314: LD_VAR 0 3
69318: PUSH
69319: FOR_IN
69320: IFFALSE 69741
// begin tag := GetTag ( i ) + 1 ;
69322: LD_ADDR_VAR 0 9
69326: PUSH
69327: LD_VAR 0 4
69331: PPUSH
69332: CALL_OW 110
69336: PUSH
69337: LD_INT 1
69339: PLUS
69340: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69341: LD_ADDR_VAR 0 7
69345: PUSH
69346: LD_VAR 0 4
69350: PPUSH
69351: CALL_OW 250
69355: PPUSH
69356: LD_VAR 0 4
69360: PPUSH
69361: CALL_OW 251
69365: PPUSH
69366: LD_INT 6
69368: PPUSH
69369: CALL 68942 0 3
69373: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69374: LD_VAR 0 4
69378: PPUSH
69379: CALL_OW 247
69383: PUSH
69384: LD_INT 2
69386: EQUAL
69387: PUSH
69388: LD_VAR 0 7
69392: AND
69393: PUSH
69394: LD_VAR 0 4
69398: PPUSH
69399: CALL_OW 264
69403: PUSH
69404: LD_VAR 0 10
69408: IN
69409: NOT
69410: AND
69411: IFFALSE 69450
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69413: LD_VAR 0 4
69417: PPUSH
69418: LD_VAR 0 7
69422: PUSH
69423: LD_INT 1
69425: ARRAY
69426: PUSH
69427: LD_INT 1
69429: ARRAY
69430: PPUSH
69431: LD_VAR 0 7
69435: PUSH
69436: LD_INT 1
69438: ARRAY
69439: PUSH
69440: LD_INT 2
69442: ARRAY
69443: PPUSH
69444: CALL_OW 116
69448: GO 69739
// if path > tag then
69450: LD_VAR 0 2
69454: PUSH
69455: LD_VAR 0 9
69459: GREATER
69460: IFFALSE 69668
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69462: LD_ADDR_VAR 0 6
69466: PUSH
69467: LD_VAR 0 5
69471: PPUSH
69472: LD_INT 91
69474: PUSH
69475: LD_VAR 0 4
69479: PUSH
69480: LD_INT 8
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: LIST
69487: PPUSH
69488: CALL_OW 72
69492: ST_TO_ADDR
// if nearEnemy then
69493: LD_VAR 0 6
69497: IFFALSE 69566
// begin if GetWeapon ( i ) = ru_time_lapser then
69499: LD_VAR 0 4
69503: PPUSH
69504: CALL_OW 264
69508: PUSH
69509: LD_INT 49
69511: EQUAL
69512: IFFALSE 69540
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69514: LD_VAR 0 4
69518: PPUSH
69519: LD_VAR 0 6
69523: PPUSH
69524: LD_VAR 0 4
69528: PPUSH
69529: CALL_OW 74
69533: PPUSH
69534: CALL_OW 112
69538: GO 69564
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69540: LD_VAR 0 4
69544: PPUSH
69545: LD_VAR 0 6
69549: PPUSH
69550: LD_VAR 0 4
69554: PPUSH
69555: CALL_OW 74
69559: PPUSH
69560: CALL 70668 0 2
// end else
69564: GO 69666
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69566: LD_VAR 0 4
69570: PPUSH
69571: LD_VAR 0 2
69575: PUSH
69576: LD_VAR 0 9
69580: ARRAY
69581: PUSH
69582: LD_INT 1
69584: ARRAY
69585: PPUSH
69586: LD_VAR 0 2
69590: PUSH
69591: LD_VAR 0 9
69595: ARRAY
69596: PUSH
69597: LD_INT 2
69599: ARRAY
69600: PPUSH
69601: CALL_OW 297
69605: PUSH
69606: LD_INT 6
69608: GREATER
69609: IFFALSE 69652
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69611: LD_VAR 0 4
69615: PPUSH
69616: LD_VAR 0 2
69620: PUSH
69621: LD_VAR 0 9
69625: ARRAY
69626: PUSH
69627: LD_INT 1
69629: ARRAY
69630: PPUSH
69631: LD_VAR 0 2
69635: PUSH
69636: LD_VAR 0 9
69640: ARRAY
69641: PUSH
69642: LD_INT 2
69644: ARRAY
69645: PPUSH
69646: CALL_OW 114
69650: GO 69666
// SetTag ( i , tag ) ;
69652: LD_VAR 0 4
69656: PPUSH
69657: LD_VAR 0 9
69661: PPUSH
69662: CALL_OW 109
// end else
69666: GO 69739
// if enemy then
69668: LD_VAR 0 5
69672: IFFALSE 69739
// begin if GetWeapon ( i ) = ru_time_lapser then
69674: LD_VAR 0 4
69678: PPUSH
69679: CALL_OW 264
69683: PUSH
69684: LD_INT 49
69686: EQUAL
69687: IFFALSE 69715
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69689: LD_VAR 0 4
69693: PPUSH
69694: LD_VAR 0 5
69698: PPUSH
69699: LD_VAR 0 4
69703: PPUSH
69704: CALL_OW 74
69708: PPUSH
69709: CALL_OW 112
69713: GO 69739
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69715: LD_VAR 0 4
69719: PPUSH
69720: LD_VAR 0 5
69724: PPUSH
69725: LD_VAR 0 4
69729: PPUSH
69730: CALL_OW 74
69734: PPUSH
69735: CALL 70668 0 2
// end ; end ;
69739: GO 69319
69741: POP
69742: POP
// end ;
69743: LD_VAR 0 3
69747: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69748: LD_INT 0
69750: PPUSH
69751: PPUSH
69752: PPUSH
// if not unit or IsInUnit ( unit ) then
69753: LD_VAR 0 1
69757: NOT
69758: PUSH
69759: LD_VAR 0 1
69763: PPUSH
69764: CALL_OW 310
69768: OR
69769: IFFALSE 69773
// exit ;
69771: GO 69864
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69773: LD_ADDR_VAR 0 4
69777: PUSH
69778: LD_VAR 0 1
69782: PPUSH
69783: CALL_OW 250
69787: PPUSH
69788: LD_VAR 0 2
69792: PPUSH
69793: LD_INT 1
69795: PPUSH
69796: CALL_OW 272
69800: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69801: LD_ADDR_VAR 0 5
69805: PUSH
69806: LD_VAR 0 1
69810: PPUSH
69811: CALL_OW 251
69815: PPUSH
69816: LD_VAR 0 2
69820: PPUSH
69821: LD_INT 1
69823: PPUSH
69824: CALL_OW 273
69828: ST_TO_ADDR
// if ValidHex ( x , y ) then
69829: LD_VAR 0 4
69833: PPUSH
69834: LD_VAR 0 5
69838: PPUSH
69839: CALL_OW 488
69843: IFFALSE 69864
// ComTurnXY ( unit , x , y ) ;
69845: LD_VAR 0 1
69849: PPUSH
69850: LD_VAR 0 4
69854: PPUSH
69855: LD_VAR 0 5
69859: PPUSH
69860: CALL_OW 118
// end ;
69864: LD_VAR 0 3
69868: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69869: LD_INT 0
69871: PPUSH
69872: PPUSH
// result := false ;
69873: LD_ADDR_VAR 0 3
69877: PUSH
69878: LD_INT 0
69880: ST_TO_ADDR
// if not units then
69881: LD_VAR 0 2
69885: NOT
69886: IFFALSE 69890
// exit ;
69888: GO 69935
// for i in units do
69890: LD_ADDR_VAR 0 4
69894: PUSH
69895: LD_VAR 0 2
69899: PUSH
69900: FOR_IN
69901: IFFALSE 69933
// if See ( side , i ) then
69903: LD_VAR 0 1
69907: PPUSH
69908: LD_VAR 0 4
69912: PPUSH
69913: CALL_OW 292
69917: IFFALSE 69931
// begin result := true ;
69919: LD_ADDR_VAR 0 3
69923: PUSH
69924: LD_INT 1
69926: ST_TO_ADDR
// exit ;
69927: POP
69928: POP
69929: GO 69935
// end ;
69931: GO 69900
69933: POP
69934: POP
// end ;
69935: LD_VAR 0 3
69939: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69940: LD_INT 0
69942: PPUSH
69943: PPUSH
69944: PPUSH
69945: PPUSH
// if not unit or not points then
69946: LD_VAR 0 1
69950: NOT
69951: PUSH
69952: LD_VAR 0 2
69956: NOT
69957: OR
69958: IFFALSE 69962
// exit ;
69960: GO 70052
// dist := 99999 ;
69962: LD_ADDR_VAR 0 5
69966: PUSH
69967: LD_INT 99999
69969: ST_TO_ADDR
// for i in points do
69970: LD_ADDR_VAR 0 4
69974: PUSH
69975: LD_VAR 0 2
69979: PUSH
69980: FOR_IN
69981: IFFALSE 70050
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69983: LD_ADDR_VAR 0 6
69987: PUSH
69988: LD_VAR 0 1
69992: PPUSH
69993: LD_VAR 0 4
69997: PUSH
69998: LD_INT 1
70000: ARRAY
70001: PPUSH
70002: LD_VAR 0 4
70006: PUSH
70007: LD_INT 2
70009: ARRAY
70010: PPUSH
70011: CALL_OW 297
70015: ST_TO_ADDR
// if tmpDist < dist then
70016: LD_VAR 0 6
70020: PUSH
70021: LD_VAR 0 5
70025: LESS
70026: IFFALSE 70048
// begin result := i ;
70028: LD_ADDR_VAR 0 3
70032: PUSH
70033: LD_VAR 0 4
70037: ST_TO_ADDR
// dist := tmpDist ;
70038: LD_ADDR_VAR 0 5
70042: PUSH
70043: LD_VAR 0 6
70047: ST_TO_ADDR
// end ; end ;
70048: GO 69980
70050: POP
70051: POP
// end ;
70052: LD_VAR 0 3
70056: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70057: LD_INT 0
70059: PPUSH
// uc_side := side ;
70060: LD_ADDR_OWVAR 20
70064: PUSH
70065: LD_VAR 0 1
70069: ST_TO_ADDR
// uc_nation := 3 ;
70070: LD_ADDR_OWVAR 21
70074: PUSH
70075: LD_INT 3
70077: ST_TO_ADDR
// vc_chassis := 25 ;
70078: LD_ADDR_OWVAR 37
70082: PUSH
70083: LD_INT 25
70085: ST_TO_ADDR
// vc_engine := engine_siberite ;
70086: LD_ADDR_OWVAR 39
70090: PUSH
70091: LD_INT 3
70093: ST_TO_ADDR
// vc_control := control_computer ;
70094: LD_ADDR_OWVAR 38
70098: PUSH
70099: LD_INT 3
70101: ST_TO_ADDR
// vc_weapon := 59 ;
70102: LD_ADDR_OWVAR 40
70106: PUSH
70107: LD_INT 59
70109: ST_TO_ADDR
// result := CreateVehicle ;
70110: LD_ADDR_VAR 0 5
70114: PUSH
70115: CALL_OW 45
70119: ST_TO_ADDR
// SetDir ( result , d ) ;
70120: LD_VAR 0 5
70124: PPUSH
70125: LD_VAR 0 4
70129: PPUSH
70130: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70134: LD_VAR 0 5
70138: PPUSH
70139: LD_VAR 0 2
70143: PPUSH
70144: LD_VAR 0 3
70148: PPUSH
70149: LD_INT 0
70151: PPUSH
70152: CALL_OW 48
// end ;
70156: LD_VAR 0 5
70160: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70161: LD_INT 0
70163: PPUSH
70164: PPUSH
70165: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70166: LD_ADDR_VAR 0 2
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: LD_INT 0
70179: PUSH
70180: LD_INT 0
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70189: LD_VAR 0 1
70193: NOT
70194: PUSH
70195: LD_VAR 0 1
70199: PPUSH
70200: CALL_OW 264
70204: PUSH
70205: LD_INT 12
70207: PUSH
70208: LD_INT 51
70210: PUSH
70211: LD_INT 32
70213: PUSH
70214: LD_INT 89
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: IN
70223: NOT
70224: OR
70225: IFFALSE 70229
// exit ;
70227: GO 70327
// for i := 1 to 3 do
70229: LD_ADDR_VAR 0 3
70233: PUSH
70234: DOUBLE
70235: LD_INT 1
70237: DEC
70238: ST_TO_ADDR
70239: LD_INT 3
70241: PUSH
70242: FOR_TO
70243: IFFALSE 70325
// begin tmp := GetCargo ( cargo , i ) ;
70245: LD_ADDR_VAR 0 4
70249: PUSH
70250: LD_VAR 0 1
70254: PPUSH
70255: LD_VAR 0 3
70259: PPUSH
70260: CALL_OW 289
70264: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70265: LD_ADDR_VAR 0 2
70269: PUSH
70270: LD_VAR 0 2
70274: PPUSH
70275: LD_VAR 0 3
70279: PPUSH
70280: LD_VAR 0 4
70284: PPUSH
70285: CALL_OW 1
70289: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70290: LD_ADDR_VAR 0 2
70294: PUSH
70295: LD_VAR 0 2
70299: PPUSH
70300: LD_INT 4
70302: PPUSH
70303: LD_VAR 0 2
70307: PUSH
70308: LD_INT 4
70310: ARRAY
70311: PUSH
70312: LD_VAR 0 4
70316: PLUS
70317: PPUSH
70318: CALL_OW 1
70322: ST_TO_ADDR
// end ;
70323: GO 70242
70325: POP
70326: POP
// end ;
70327: LD_VAR 0 2
70331: RET
// export function Length ( array ) ; begin
70332: LD_INT 0
70334: PPUSH
// result := array + 0 ;
70335: LD_ADDR_VAR 0 2
70339: PUSH
70340: LD_VAR 0 1
70344: PUSH
70345: LD_INT 0
70347: PLUS
70348: ST_TO_ADDR
// end ;
70349: LD_VAR 0 2
70353: RET
// export function PrepareArray ( array ) ; begin
70354: LD_INT 0
70356: PPUSH
// result := array diff 0 ;
70357: LD_ADDR_VAR 0 2
70361: PUSH
70362: LD_VAR 0 1
70366: PUSH
70367: LD_INT 0
70369: DIFF
70370: ST_TO_ADDR
// if not result [ 1 ] then
70371: LD_VAR 0 2
70375: PUSH
70376: LD_INT 1
70378: ARRAY
70379: NOT
70380: IFFALSE 70400
// result := Delete ( result , 1 ) ;
70382: LD_ADDR_VAR 0 2
70386: PUSH
70387: LD_VAR 0 2
70391: PPUSH
70392: LD_INT 1
70394: PPUSH
70395: CALL_OW 3
70399: ST_TO_ADDR
// end ;
70400: LD_VAR 0 2
70404: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70405: LD_INT 0
70407: PPUSH
70408: PPUSH
70409: PPUSH
70410: PPUSH
// sibRocketRange := 25 ;
70411: LD_ADDR_VAR 0 6
70415: PUSH
70416: LD_INT 25
70418: ST_TO_ADDR
// result := false ;
70419: LD_ADDR_VAR 0 4
70423: PUSH
70424: LD_INT 0
70426: ST_TO_ADDR
// for i := 0 to 5 do
70427: LD_ADDR_VAR 0 5
70431: PUSH
70432: DOUBLE
70433: LD_INT 0
70435: DEC
70436: ST_TO_ADDR
70437: LD_INT 5
70439: PUSH
70440: FOR_TO
70441: IFFALSE 70508
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70443: LD_VAR 0 1
70447: PPUSH
70448: LD_VAR 0 5
70452: PPUSH
70453: LD_VAR 0 6
70457: PPUSH
70458: CALL_OW 272
70462: PPUSH
70463: LD_VAR 0 2
70467: PPUSH
70468: LD_VAR 0 5
70472: PPUSH
70473: LD_VAR 0 6
70477: PPUSH
70478: CALL_OW 273
70482: PPUSH
70483: LD_VAR 0 3
70487: PPUSH
70488: CALL_OW 309
70492: IFFALSE 70506
// begin result := true ;
70494: LD_ADDR_VAR 0 4
70498: PUSH
70499: LD_INT 1
70501: ST_TO_ADDR
// exit ;
70502: POP
70503: POP
70504: GO 70510
// end ;
70506: GO 70440
70508: POP
70509: POP
// end ;
70510: LD_VAR 0 4
70514: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70515: LD_INT 0
70517: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70518: LD_VAR 0 1
70522: PPUSH
70523: LD_VAR 0 2
70527: PPUSH
70528: LD_INT 0
70530: PPUSH
70531: LD_INT 0
70533: PPUSH
70534: LD_INT 1
70536: PPUSH
70537: LD_INT 0
70539: PPUSH
70540: CALL_OW 587
// end ;
70544: LD_VAR 0 3
70548: RET
// export function CenterOnNow ( unit ) ; begin
70549: LD_INT 0
70551: PPUSH
// result := IsInUnit ( unit ) ;
70552: LD_ADDR_VAR 0 2
70556: PUSH
70557: LD_VAR 0 1
70561: PPUSH
70562: CALL_OW 310
70566: ST_TO_ADDR
// if not result then
70567: LD_VAR 0 2
70571: NOT
70572: IFFALSE 70584
// result := unit ;
70574: LD_ADDR_VAR 0 2
70578: PUSH
70579: LD_VAR 0 1
70583: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70584: LD_VAR 0 1
70588: PPUSH
70589: CALL_OW 87
// end ;
70593: LD_VAR 0 2
70597: RET
// export function ComMoveHex ( unit , hex ) ; begin
70598: LD_INT 0
70600: PPUSH
// if not hex then
70601: LD_VAR 0 2
70605: NOT
70606: IFFALSE 70610
// exit ;
70608: GO 70663
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70610: LD_VAR 0 2
70614: PUSH
70615: LD_INT 1
70617: ARRAY
70618: PPUSH
70619: LD_VAR 0 2
70623: PUSH
70624: LD_INT 2
70626: ARRAY
70627: PPUSH
70628: CALL_OW 428
70632: IFFALSE 70636
// exit ;
70634: GO 70663
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70636: LD_VAR 0 1
70640: PPUSH
70641: LD_VAR 0 2
70645: PUSH
70646: LD_INT 1
70648: ARRAY
70649: PPUSH
70650: LD_VAR 0 2
70654: PUSH
70655: LD_INT 2
70657: ARRAY
70658: PPUSH
70659: CALL_OW 111
// end ;
70663: LD_VAR 0 3
70667: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70668: LD_INT 0
70670: PPUSH
70671: PPUSH
70672: PPUSH
// if not unit or not enemy then
70673: LD_VAR 0 1
70677: NOT
70678: PUSH
70679: LD_VAR 0 2
70683: NOT
70684: OR
70685: IFFALSE 70689
// exit ;
70687: GO 70813
// x := GetX ( enemy ) ;
70689: LD_ADDR_VAR 0 4
70693: PUSH
70694: LD_VAR 0 2
70698: PPUSH
70699: CALL_OW 250
70703: ST_TO_ADDR
// y := GetY ( enemy ) ;
70704: LD_ADDR_VAR 0 5
70708: PUSH
70709: LD_VAR 0 2
70713: PPUSH
70714: CALL_OW 251
70718: ST_TO_ADDR
// if ValidHex ( x , y ) then
70719: LD_VAR 0 4
70723: PPUSH
70724: LD_VAR 0 5
70728: PPUSH
70729: CALL_OW 488
70733: IFFALSE 70813
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
70735: LD_VAR 0 2
70739: PPUSH
70740: CALL_OW 247
70744: PUSH
70745: LD_INT 3
70747: PUSH
70748: LD_INT 2
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: IN
70755: PUSH
70756: LD_VAR 0 1
70760: PPUSH
70761: CALL_OW 255
70765: PPUSH
70766: LD_VAR 0 2
70770: PPUSH
70771: CALL_OW 292
70775: AND
70776: IFFALSE 70794
// ComAttackUnit ( unit , enemy ) else
70778: LD_VAR 0 1
70782: PPUSH
70783: LD_VAR 0 2
70787: PPUSH
70788: CALL_OW 115
70792: GO 70813
// ComAgressiveMove ( unit , x , y ) ;
70794: LD_VAR 0 1
70798: PPUSH
70799: LD_VAR 0 4
70803: PPUSH
70804: LD_VAR 0 5
70808: PPUSH
70809: CALL_OW 114
// end ; end_of_file
70813: LD_VAR 0 3
70817: RET
// export globalGameSaveCounter ; every 0 0$1 do
70818: GO 70820
70820: DISABLE
// begin enable ;
70821: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70822: LD_STRING updateTimer(
70824: PUSH
70825: LD_OWVAR 1
70829: STR
70830: PUSH
70831: LD_STRING );
70833: STR
70834: PPUSH
70835: CALL_OW 559
// end ;
70839: END
// every 0 0$1 do
70840: GO 70842
70842: DISABLE
// begin globalGameSaveCounter := 0 ;
70843: LD_ADDR_EXP 73
70847: PUSH
70848: LD_INT 0
70850: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
70851: LD_STRING setGameSaveCounter(0)
70853: PPUSH
70854: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
70858: LD_STRING initStreamRollete();
70860: PPUSH
70861: CALL_OW 559
// InitStreamMode ;
70865: CALL 72191 0 0
// DefineStreamItems ( false ) ;
70869: LD_INT 0
70871: PPUSH
70872: CALL 72655 0 1
// end ;
70876: END
// export function SOS_MapStart ( ) ; begin
70877: LD_INT 0
70879: PPUSH
// if streamModeActive then
70880: LD_EXP 74
70884: IFFALSE 70893
// DefineStreamItems ( true ) ;
70886: LD_INT 1
70888: PPUSH
70889: CALL 72655 0 1
// UpdateLuaVariables ( ) ;
70893: CALL 70910 0 0
// UpdateFactoryWaypoints ( ) ;
70897: CALL 85524 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70901: CALL 85781 0 0
// end ;
70905: LD_VAR 0 1
70909: RET
// function UpdateLuaVariables ( ) ; begin
70910: LD_INT 0
70912: PPUSH
// if globalGameSaveCounter then
70913: LD_EXP 73
70917: IFFALSE 70951
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
70919: LD_ADDR_EXP 73
70923: PUSH
70924: LD_EXP 73
70928: PPUSH
70929: CALL 67957 0 1
70933: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70934: LD_STRING setGameSaveCounter(
70936: PUSH
70937: LD_EXP 73
70941: STR
70942: PUSH
70943: LD_STRING )
70945: STR
70946: PPUSH
70947: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70951: LD_STRING setGameDifficulty(
70953: PUSH
70954: LD_OWVAR 67
70958: STR
70959: PUSH
70960: LD_STRING )
70962: STR
70963: PPUSH
70964: CALL_OW 559
// end ;
70968: LD_VAR 0 1
70972: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70973: LD_INT 0
70975: PPUSH
// if p2 = stream_mode then
70976: LD_VAR 0 2
70980: PUSH
70981: LD_INT 100
70983: EQUAL
70984: IFFALSE 71987
// begin if not StreamModeActive then
70986: LD_EXP 74
70990: NOT
70991: IFFALSE 71001
// StreamModeActive := true ;
70993: LD_ADDR_EXP 74
70997: PUSH
70998: LD_INT 1
71000: ST_TO_ADDR
// if p3 = 0 then
71001: LD_VAR 0 3
71005: PUSH
71006: LD_INT 0
71008: EQUAL
71009: IFFALSE 71015
// InitStreamMode ;
71011: CALL 72191 0 0
// if p3 = 1 then
71015: LD_VAR 0 3
71019: PUSH
71020: LD_INT 1
71022: EQUAL
71023: IFFALSE 71033
// sRocket := true ;
71025: LD_ADDR_EXP 79
71029: PUSH
71030: LD_INT 1
71032: ST_TO_ADDR
// if p3 = 2 then
71033: LD_VAR 0 3
71037: PUSH
71038: LD_INT 2
71040: EQUAL
71041: IFFALSE 71051
// sSpeed := true ;
71043: LD_ADDR_EXP 78
71047: PUSH
71048: LD_INT 1
71050: ST_TO_ADDR
// if p3 = 3 then
71051: LD_VAR 0 3
71055: PUSH
71056: LD_INT 3
71058: EQUAL
71059: IFFALSE 71069
// sEngine := true ;
71061: LD_ADDR_EXP 80
71065: PUSH
71066: LD_INT 1
71068: ST_TO_ADDR
// if p3 = 4 then
71069: LD_VAR 0 3
71073: PUSH
71074: LD_INT 4
71076: EQUAL
71077: IFFALSE 71087
// sSpec := true ;
71079: LD_ADDR_EXP 77
71083: PUSH
71084: LD_INT 1
71086: ST_TO_ADDR
// if p3 = 5 then
71087: LD_VAR 0 3
71091: PUSH
71092: LD_INT 5
71094: EQUAL
71095: IFFALSE 71105
// sLevel := true ;
71097: LD_ADDR_EXP 81
71101: PUSH
71102: LD_INT 1
71104: ST_TO_ADDR
// if p3 = 6 then
71105: LD_VAR 0 3
71109: PUSH
71110: LD_INT 6
71112: EQUAL
71113: IFFALSE 71123
// sArmoury := true ;
71115: LD_ADDR_EXP 82
71119: PUSH
71120: LD_INT 1
71122: ST_TO_ADDR
// if p3 = 7 then
71123: LD_VAR 0 3
71127: PUSH
71128: LD_INT 7
71130: EQUAL
71131: IFFALSE 71141
// sRadar := true ;
71133: LD_ADDR_EXP 83
71137: PUSH
71138: LD_INT 1
71140: ST_TO_ADDR
// if p3 = 8 then
71141: LD_VAR 0 3
71145: PUSH
71146: LD_INT 8
71148: EQUAL
71149: IFFALSE 71159
// sBunker := true ;
71151: LD_ADDR_EXP 84
71155: PUSH
71156: LD_INT 1
71158: ST_TO_ADDR
// if p3 = 9 then
71159: LD_VAR 0 3
71163: PUSH
71164: LD_INT 9
71166: EQUAL
71167: IFFALSE 71177
// sHack := true ;
71169: LD_ADDR_EXP 85
71173: PUSH
71174: LD_INT 1
71176: ST_TO_ADDR
// if p3 = 10 then
71177: LD_VAR 0 3
71181: PUSH
71182: LD_INT 10
71184: EQUAL
71185: IFFALSE 71195
// sFire := true ;
71187: LD_ADDR_EXP 86
71191: PUSH
71192: LD_INT 1
71194: ST_TO_ADDR
// if p3 = 11 then
71195: LD_VAR 0 3
71199: PUSH
71200: LD_INT 11
71202: EQUAL
71203: IFFALSE 71213
// sRefresh := true ;
71205: LD_ADDR_EXP 87
71209: PUSH
71210: LD_INT 1
71212: ST_TO_ADDR
// if p3 = 12 then
71213: LD_VAR 0 3
71217: PUSH
71218: LD_INT 12
71220: EQUAL
71221: IFFALSE 71231
// sExp := true ;
71223: LD_ADDR_EXP 88
71227: PUSH
71228: LD_INT 1
71230: ST_TO_ADDR
// if p3 = 13 then
71231: LD_VAR 0 3
71235: PUSH
71236: LD_INT 13
71238: EQUAL
71239: IFFALSE 71249
// sDepot := true ;
71241: LD_ADDR_EXP 89
71245: PUSH
71246: LD_INT 1
71248: ST_TO_ADDR
// if p3 = 14 then
71249: LD_VAR 0 3
71253: PUSH
71254: LD_INT 14
71256: EQUAL
71257: IFFALSE 71267
// sFlag := true ;
71259: LD_ADDR_EXP 90
71263: PUSH
71264: LD_INT 1
71266: ST_TO_ADDR
// if p3 = 15 then
71267: LD_VAR 0 3
71271: PUSH
71272: LD_INT 15
71274: EQUAL
71275: IFFALSE 71285
// sKamikadze := true ;
71277: LD_ADDR_EXP 98
71281: PUSH
71282: LD_INT 1
71284: ST_TO_ADDR
// if p3 = 16 then
71285: LD_VAR 0 3
71289: PUSH
71290: LD_INT 16
71292: EQUAL
71293: IFFALSE 71303
// sTroll := true ;
71295: LD_ADDR_EXP 99
71299: PUSH
71300: LD_INT 1
71302: ST_TO_ADDR
// if p3 = 17 then
71303: LD_VAR 0 3
71307: PUSH
71308: LD_INT 17
71310: EQUAL
71311: IFFALSE 71321
// sSlow := true ;
71313: LD_ADDR_EXP 100
71317: PUSH
71318: LD_INT 1
71320: ST_TO_ADDR
// if p3 = 18 then
71321: LD_VAR 0 3
71325: PUSH
71326: LD_INT 18
71328: EQUAL
71329: IFFALSE 71339
// sLack := true ;
71331: LD_ADDR_EXP 101
71335: PUSH
71336: LD_INT 1
71338: ST_TO_ADDR
// if p3 = 19 then
71339: LD_VAR 0 3
71343: PUSH
71344: LD_INT 19
71346: EQUAL
71347: IFFALSE 71357
// sTank := true ;
71349: LD_ADDR_EXP 103
71353: PUSH
71354: LD_INT 1
71356: ST_TO_ADDR
// if p3 = 20 then
71357: LD_VAR 0 3
71361: PUSH
71362: LD_INT 20
71364: EQUAL
71365: IFFALSE 71375
// sRemote := true ;
71367: LD_ADDR_EXP 104
71371: PUSH
71372: LD_INT 1
71374: ST_TO_ADDR
// if p3 = 21 then
71375: LD_VAR 0 3
71379: PUSH
71380: LD_INT 21
71382: EQUAL
71383: IFFALSE 71393
// sPowell := true ;
71385: LD_ADDR_EXP 105
71389: PUSH
71390: LD_INT 1
71392: ST_TO_ADDR
// if p3 = 22 then
71393: LD_VAR 0 3
71397: PUSH
71398: LD_INT 22
71400: EQUAL
71401: IFFALSE 71411
// sTeleport := true ;
71403: LD_ADDR_EXP 108
71407: PUSH
71408: LD_INT 1
71410: ST_TO_ADDR
// if p3 = 23 then
71411: LD_VAR 0 3
71415: PUSH
71416: LD_INT 23
71418: EQUAL
71419: IFFALSE 71429
// sOilTower := true ;
71421: LD_ADDR_EXP 110
71425: PUSH
71426: LD_INT 1
71428: ST_TO_ADDR
// if p3 = 24 then
71429: LD_VAR 0 3
71433: PUSH
71434: LD_INT 24
71436: EQUAL
71437: IFFALSE 71447
// sShovel := true ;
71439: LD_ADDR_EXP 111
71443: PUSH
71444: LD_INT 1
71446: ST_TO_ADDR
// if p3 = 25 then
71447: LD_VAR 0 3
71451: PUSH
71452: LD_INT 25
71454: EQUAL
71455: IFFALSE 71465
// sSheik := true ;
71457: LD_ADDR_EXP 112
71461: PUSH
71462: LD_INT 1
71464: ST_TO_ADDR
// if p3 = 26 then
71465: LD_VAR 0 3
71469: PUSH
71470: LD_INT 26
71472: EQUAL
71473: IFFALSE 71483
// sEarthquake := true ;
71475: LD_ADDR_EXP 114
71479: PUSH
71480: LD_INT 1
71482: ST_TO_ADDR
// if p3 = 27 then
71483: LD_VAR 0 3
71487: PUSH
71488: LD_INT 27
71490: EQUAL
71491: IFFALSE 71501
// sAI := true ;
71493: LD_ADDR_EXP 115
71497: PUSH
71498: LD_INT 1
71500: ST_TO_ADDR
// if p3 = 28 then
71501: LD_VAR 0 3
71505: PUSH
71506: LD_INT 28
71508: EQUAL
71509: IFFALSE 71519
// sCargo := true ;
71511: LD_ADDR_EXP 118
71515: PUSH
71516: LD_INT 1
71518: ST_TO_ADDR
// if p3 = 29 then
71519: LD_VAR 0 3
71523: PUSH
71524: LD_INT 29
71526: EQUAL
71527: IFFALSE 71537
// sDLaser := true ;
71529: LD_ADDR_EXP 119
71533: PUSH
71534: LD_INT 1
71536: ST_TO_ADDR
// if p3 = 30 then
71537: LD_VAR 0 3
71541: PUSH
71542: LD_INT 30
71544: EQUAL
71545: IFFALSE 71555
// sExchange := true ;
71547: LD_ADDR_EXP 120
71551: PUSH
71552: LD_INT 1
71554: ST_TO_ADDR
// if p3 = 31 then
71555: LD_VAR 0 3
71559: PUSH
71560: LD_INT 31
71562: EQUAL
71563: IFFALSE 71573
// sFac := true ;
71565: LD_ADDR_EXP 121
71569: PUSH
71570: LD_INT 1
71572: ST_TO_ADDR
// if p3 = 32 then
71573: LD_VAR 0 3
71577: PUSH
71578: LD_INT 32
71580: EQUAL
71581: IFFALSE 71591
// sPower := true ;
71583: LD_ADDR_EXP 122
71587: PUSH
71588: LD_INT 1
71590: ST_TO_ADDR
// if p3 = 33 then
71591: LD_VAR 0 3
71595: PUSH
71596: LD_INT 33
71598: EQUAL
71599: IFFALSE 71609
// sRandom := true ;
71601: LD_ADDR_EXP 123
71605: PUSH
71606: LD_INT 1
71608: ST_TO_ADDR
// if p3 = 34 then
71609: LD_VAR 0 3
71613: PUSH
71614: LD_INT 34
71616: EQUAL
71617: IFFALSE 71627
// sShield := true ;
71619: LD_ADDR_EXP 124
71623: PUSH
71624: LD_INT 1
71626: ST_TO_ADDR
// if p3 = 35 then
71627: LD_VAR 0 3
71631: PUSH
71632: LD_INT 35
71634: EQUAL
71635: IFFALSE 71645
// sTime := true ;
71637: LD_ADDR_EXP 125
71641: PUSH
71642: LD_INT 1
71644: ST_TO_ADDR
// if p3 = 36 then
71645: LD_VAR 0 3
71649: PUSH
71650: LD_INT 36
71652: EQUAL
71653: IFFALSE 71663
// sTools := true ;
71655: LD_ADDR_EXP 126
71659: PUSH
71660: LD_INT 1
71662: ST_TO_ADDR
// if p3 = 101 then
71663: LD_VAR 0 3
71667: PUSH
71668: LD_INT 101
71670: EQUAL
71671: IFFALSE 71681
// sSold := true ;
71673: LD_ADDR_EXP 91
71677: PUSH
71678: LD_INT 1
71680: ST_TO_ADDR
// if p3 = 102 then
71681: LD_VAR 0 3
71685: PUSH
71686: LD_INT 102
71688: EQUAL
71689: IFFALSE 71699
// sDiff := true ;
71691: LD_ADDR_EXP 92
71695: PUSH
71696: LD_INT 1
71698: ST_TO_ADDR
// if p3 = 103 then
71699: LD_VAR 0 3
71703: PUSH
71704: LD_INT 103
71706: EQUAL
71707: IFFALSE 71717
// sFog := true ;
71709: LD_ADDR_EXP 95
71713: PUSH
71714: LD_INT 1
71716: ST_TO_ADDR
// if p3 = 104 then
71717: LD_VAR 0 3
71721: PUSH
71722: LD_INT 104
71724: EQUAL
71725: IFFALSE 71735
// sReset := true ;
71727: LD_ADDR_EXP 96
71731: PUSH
71732: LD_INT 1
71734: ST_TO_ADDR
// if p3 = 105 then
71735: LD_VAR 0 3
71739: PUSH
71740: LD_INT 105
71742: EQUAL
71743: IFFALSE 71753
// sSun := true ;
71745: LD_ADDR_EXP 97
71749: PUSH
71750: LD_INT 1
71752: ST_TO_ADDR
// if p3 = 106 then
71753: LD_VAR 0 3
71757: PUSH
71758: LD_INT 106
71760: EQUAL
71761: IFFALSE 71771
// sTiger := true ;
71763: LD_ADDR_EXP 93
71767: PUSH
71768: LD_INT 1
71770: ST_TO_ADDR
// if p3 = 107 then
71771: LD_VAR 0 3
71775: PUSH
71776: LD_INT 107
71778: EQUAL
71779: IFFALSE 71789
// sBomb := true ;
71781: LD_ADDR_EXP 94
71785: PUSH
71786: LD_INT 1
71788: ST_TO_ADDR
// if p3 = 108 then
71789: LD_VAR 0 3
71793: PUSH
71794: LD_INT 108
71796: EQUAL
71797: IFFALSE 71807
// sWound := true ;
71799: LD_ADDR_EXP 102
71803: PUSH
71804: LD_INT 1
71806: ST_TO_ADDR
// if p3 = 109 then
71807: LD_VAR 0 3
71811: PUSH
71812: LD_INT 109
71814: EQUAL
71815: IFFALSE 71825
// sBetray := true ;
71817: LD_ADDR_EXP 106
71821: PUSH
71822: LD_INT 1
71824: ST_TO_ADDR
// if p3 = 110 then
71825: LD_VAR 0 3
71829: PUSH
71830: LD_INT 110
71832: EQUAL
71833: IFFALSE 71843
// sContamin := true ;
71835: LD_ADDR_EXP 107
71839: PUSH
71840: LD_INT 1
71842: ST_TO_ADDR
// if p3 = 111 then
71843: LD_VAR 0 3
71847: PUSH
71848: LD_INT 111
71850: EQUAL
71851: IFFALSE 71861
// sOil := true ;
71853: LD_ADDR_EXP 109
71857: PUSH
71858: LD_INT 1
71860: ST_TO_ADDR
// if p3 = 112 then
71861: LD_VAR 0 3
71865: PUSH
71866: LD_INT 112
71868: EQUAL
71869: IFFALSE 71879
// sStu := true ;
71871: LD_ADDR_EXP 113
71875: PUSH
71876: LD_INT 1
71878: ST_TO_ADDR
// if p3 = 113 then
71879: LD_VAR 0 3
71883: PUSH
71884: LD_INT 113
71886: EQUAL
71887: IFFALSE 71897
// sBazooka := true ;
71889: LD_ADDR_EXP 116
71893: PUSH
71894: LD_INT 1
71896: ST_TO_ADDR
// if p3 = 114 then
71897: LD_VAR 0 3
71901: PUSH
71902: LD_INT 114
71904: EQUAL
71905: IFFALSE 71915
// sMortar := true ;
71907: LD_ADDR_EXP 117
71911: PUSH
71912: LD_INT 1
71914: ST_TO_ADDR
// if p3 = 115 then
71915: LD_VAR 0 3
71919: PUSH
71920: LD_INT 115
71922: EQUAL
71923: IFFALSE 71933
// sRanger := true ;
71925: LD_ADDR_EXP 127
71929: PUSH
71930: LD_INT 1
71932: ST_TO_ADDR
// if p3 = 116 then
71933: LD_VAR 0 3
71937: PUSH
71938: LD_INT 116
71940: EQUAL
71941: IFFALSE 71951
// sComputer := true ;
71943: LD_ADDR_EXP 128
71947: PUSH
71948: LD_INT 1
71950: ST_TO_ADDR
// if p3 = 117 then
71951: LD_VAR 0 3
71955: PUSH
71956: LD_INT 117
71958: EQUAL
71959: IFFALSE 71969
// s30 := true ;
71961: LD_ADDR_EXP 129
71965: PUSH
71966: LD_INT 1
71968: ST_TO_ADDR
// if p3 = 118 then
71969: LD_VAR 0 3
71973: PUSH
71974: LD_INT 118
71976: EQUAL
71977: IFFALSE 71987
// s60 := true ;
71979: LD_ADDR_EXP 130
71983: PUSH
71984: LD_INT 1
71986: ST_TO_ADDR
// end ; if p2 = hack_mode then
71987: LD_VAR 0 2
71991: PUSH
71992: LD_INT 101
71994: EQUAL
71995: IFFALSE 72123
// begin case p3 of 1 :
71997: LD_VAR 0 3
72001: PUSH
72002: LD_INT 1
72004: DOUBLE
72005: EQUAL
72006: IFTRUE 72010
72008: GO 72017
72010: POP
// hHackUnlimitedResources ; 2 :
72011: CALL 84270 0 0
72015: GO 72123
72017: LD_INT 2
72019: DOUBLE
72020: EQUAL
72021: IFTRUE 72025
72023: GO 72032
72025: POP
// hHackSetLevel10 ; 3 :
72026: CALL 84403 0 0
72030: GO 72123
72032: LD_INT 3
72034: DOUBLE
72035: EQUAL
72036: IFTRUE 72040
72038: GO 72047
72040: POP
// hHackSetLevel10YourUnits ; 4 :
72041: CALL 84488 0 0
72045: GO 72123
72047: LD_INT 4
72049: DOUBLE
72050: EQUAL
72051: IFTRUE 72055
72053: GO 72062
72055: POP
// hHackInvincible ; 5 :
72056: CALL 84936 0 0
72060: GO 72123
72062: LD_INT 5
72064: DOUBLE
72065: EQUAL
72066: IFTRUE 72070
72068: GO 72077
72070: POP
// hHackInvisible ; 6 :
72071: CALL 85047 0 0
72075: GO 72123
72077: LD_INT 6
72079: DOUBLE
72080: EQUAL
72081: IFTRUE 72085
72083: GO 72092
72085: POP
// hHackChangeYourSide ; 7 :
72086: CALL 85104 0 0
72090: GO 72123
72092: LD_INT 7
72094: DOUBLE
72095: EQUAL
72096: IFTRUE 72100
72098: GO 72107
72100: POP
// hHackChangeUnitSide ; 8 :
72101: CALL 85146 0 0
72105: GO 72123
72107: LD_INT 8
72109: DOUBLE
72110: EQUAL
72111: IFTRUE 72115
72113: GO 72122
72115: POP
// hHackFog ; end ;
72116: CALL 85247 0 0
72120: GO 72123
72122: POP
// end ; if p2 = game_save_mode then
72123: LD_VAR 0 2
72127: PUSH
72128: LD_INT 102
72130: EQUAL
72131: IFFALSE 72186
// begin if p3 = 1 then
72133: LD_VAR 0 3
72137: PUSH
72138: LD_INT 1
72140: EQUAL
72141: IFFALSE 72153
// globalGameSaveCounter := p4 ;
72143: LD_ADDR_EXP 73
72147: PUSH
72148: LD_VAR 0 4
72152: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
72153: LD_VAR 0 3
72157: PUSH
72158: LD_INT 2
72160: EQUAL
72161: PUSH
72162: LD_EXP 73
72166: AND
72167: IFFALSE 72186
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72169: LD_STRING setGameSaveCounter(
72171: PUSH
72172: LD_EXP 73
72176: STR
72177: PUSH
72178: LD_STRING )
72180: STR
72181: PPUSH
72182: CALL_OW 559
// end ; end ;
72186: LD_VAR 0 7
72190: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
72191: LD_INT 0
72193: PPUSH
// streamModeActive := false ;
72194: LD_ADDR_EXP 74
72198: PUSH
72199: LD_INT 0
72201: ST_TO_ADDR
// normalCounter := 36 ;
72202: LD_ADDR_EXP 75
72206: PUSH
72207: LD_INT 36
72209: ST_TO_ADDR
// hardcoreCounter := 18 ;
72210: LD_ADDR_EXP 76
72214: PUSH
72215: LD_INT 18
72217: ST_TO_ADDR
// sRocket := false ;
72218: LD_ADDR_EXP 79
72222: PUSH
72223: LD_INT 0
72225: ST_TO_ADDR
// sSpeed := false ;
72226: LD_ADDR_EXP 78
72230: PUSH
72231: LD_INT 0
72233: ST_TO_ADDR
// sEngine := false ;
72234: LD_ADDR_EXP 80
72238: PUSH
72239: LD_INT 0
72241: ST_TO_ADDR
// sSpec := false ;
72242: LD_ADDR_EXP 77
72246: PUSH
72247: LD_INT 0
72249: ST_TO_ADDR
// sLevel := false ;
72250: LD_ADDR_EXP 81
72254: PUSH
72255: LD_INT 0
72257: ST_TO_ADDR
// sArmoury := false ;
72258: LD_ADDR_EXP 82
72262: PUSH
72263: LD_INT 0
72265: ST_TO_ADDR
// sRadar := false ;
72266: LD_ADDR_EXP 83
72270: PUSH
72271: LD_INT 0
72273: ST_TO_ADDR
// sBunker := false ;
72274: LD_ADDR_EXP 84
72278: PUSH
72279: LD_INT 0
72281: ST_TO_ADDR
// sHack := false ;
72282: LD_ADDR_EXP 85
72286: PUSH
72287: LD_INT 0
72289: ST_TO_ADDR
// sFire := false ;
72290: LD_ADDR_EXP 86
72294: PUSH
72295: LD_INT 0
72297: ST_TO_ADDR
// sRefresh := false ;
72298: LD_ADDR_EXP 87
72302: PUSH
72303: LD_INT 0
72305: ST_TO_ADDR
// sExp := false ;
72306: LD_ADDR_EXP 88
72310: PUSH
72311: LD_INT 0
72313: ST_TO_ADDR
// sDepot := false ;
72314: LD_ADDR_EXP 89
72318: PUSH
72319: LD_INT 0
72321: ST_TO_ADDR
// sFlag := false ;
72322: LD_ADDR_EXP 90
72326: PUSH
72327: LD_INT 0
72329: ST_TO_ADDR
// sKamikadze := false ;
72330: LD_ADDR_EXP 98
72334: PUSH
72335: LD_INT 0
72337: ST_TO_ADDR
// sTroll := false ;
72338: LD_ADDR_EXP 99
72342: PUSH
72343: LD_INT 0
72345: ST_TO_ADDR
// sSlow := false ;
72346: LD_ADDR_EXP 100
72350: PUSH
72351: LD_INT 0
72353: ST_TO_ADDR
// sLack := false ;
72354: LD_ADDR_EXP 101
72358: PUSH
72359: LD_INT 0
72361: ST_TO_ADDR
// sTank := false ;
72362: LD_ADDR_EXP 103
72366: PUSH
72367: LD_INT 0
72369: ST_TO_ADDR
// sRemote := false ;
72370: LD_ADDR_EXP 104
72374: PUSH
72375: LD_INT 0
72377: ST_TO_ADDR
// sPowell := false ;
72378: LD_ADDR_EXP 105
72382: PUSH
72383: LD_INT 0
72385: ST_TO_ADDR
// sTeleport := false ;
72386: LD_ADDR_EXP 108
72390: PUSH
72391: LD_INT 0
72393: ST_TO_ADDR
// sOilTower := false ;
72394: LD_ADDR_EXP 110
72398: PUSH
72399: LD_INT 0
72401: ST_TO_ADDR
// sShovel := false ;
72402: LD_ADDR_EXP 111
72406: PUSH
72407: LD_INT 0
72409: ST_TO_ADDR
// sSheik := false ;
72410: LD_ADDR_EXP 112
72414: PUSH
72415: LD_INT 0
72417: ST_TO_ADDR
// sEarthquake := false ;
72418: LD_ADDR_EXP 114
72422: PUSH
72423: LD_INT 0
72425: ST_TO_ADDR
// sAI := false ;
72426: LD_ADDR_EXP 115
72430: PUSH
72431: LD_INT 0
72433: ST_TO_ADDR
// sCargo := false ;
72434: LD_ADDR_EXP 118
72438: PUSH
72439: LD_INT 0
72441: ST_TO_ADDR
// sDLaser := false ;
72442: LD_ADDR_EXP 119
72446: PUSH
72447: LD_INT 0
72449: ST_TO_ADDR
// sExchange := false ;
72450: LD_ADDR_EXP 120
72454: PUSH
72455: LD_INT 0
72457: ST_TO_ADDR
// sFac := false ;
72458: LD_ADDR_EXP 121
72462: PUSH
72463: LD_INT 0
72465: ST_TO_ADDR
// sPower := false ;
72466: LD_ADDR_EXP 122
72470: PUSH
72471: LD_INT 0
72473: ST_TO_ADDR
// sRandom := false ;
72474: LD_ADDR_EXP 123
72478: PUSH
72479: LD_INT 0
72481: ST_TO_ADDR
// sShield := false ;
72482: LD_ADDR_EXP 124
72486: PUSH
72487: LD_INT 0
72489: ST_TO_ADDR
// sTime := false ;
72490: LD_ADDR_EXP 125
72494: PUSH
72495: LD_INT 0
72497: ST_TO_ADDR
// sTools := false ;
72498: LD_ADDR_EXP 126
72502: PUSH
72503: LD_INT 0
72505: ST_TO_ADDR
// sSold := false ;
72506: LD_ADDR_EXP 91
72510: PUSH
72511: LD_INT 0
72513: ST_TO_ADDR
// sDiff := false ;
72514: LD_ADDR_EXP 92
72518: PUSH
72519: LD_INT 0
72521: ST_TO_ADDR
// sFog := false ;
72522: LD_ADDR_EXP 95
72526: PUSH
72527: LD_INT 0
72529: ST_TO_ADDR
// sReset := false ;
72530: LD_ADDR_EXP 96
72534: PUSH
72535: LD_INT 0
72537: ST_TO_ADDR
// sSun := false ;
72538: LD_ADDR_EXP 97
72542: PUSH
72543: LD_INT 0
72545: ST_TO_ADDR
// sTiger := false ;
72546: LD_ADDR_EXP 93
72550: PUSH
72551: LD_INT 0
72553: ST_TO_ADDR
// sBomb := false ;
72554: LD_ADDR_EXP 94
72558: PUSH
72559: LD_INT 0
72561: ST_TO_ADDR
// sWound := false ;
72562: LD_ADDR_EXP 102
72566: PUSH
72567: LD_INT 0
72569: ST_TO_ADDR
// sBetray := false ;
72570: LD_ADDR_EXP 106
72574: PUSH
72575: LD_INT 0
72577: ST_TO_ADDR
// sContamin := false ;
72578: LD_ADDR_EXP 107
72582: PUSH
72583: LD_INT 0
72585: ST_TO_ADDR
// sOil := false ;
72586: LD_ADDR_EXP 109
72590: PUSH
72591: LD_INT 0
72593: ST_TO_ADDR
// sStu := false ;
72594: LD_ADDR_EXP 113
72598: PUSH
72599: LD_INT 0
72601: ST_TO_ADDR
// sBazooka := false ;
72602: LD_ADDR_EXP 116
72606: PUSH
72607: LD_INT 0
72609: ST_TO_ADDR
// sMortar := false ;
72610: LD_ADDR_EXP 117
72614: PUSH
72615: LD_INT 0
72617: ST_TO_ADDR
// sRanger := false ;
72618: LD_ADDR_EXP 127
72622: PUSH
72623: LD_INT 0
72625: ST_TO_ADDR
// sComputer := false ;
72626: LD_ADDR_EXP 128
72630: PUSH
72631: LD_INT 0
72633: ST_TO_ADDR
// s30 := false ;
72634: LD_ADDR_EXP 129
72638: PUSH
72639: LD_INT 0
72641: ST_TO_ADDR
// s60 := false ;
72642: LD_ADDR_EXP 130
72646: PUSH
72647: LD_INT 0
72649: ST_TO_ADDR
// end ;
72650: LD_VAR 0 1
72654: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72655: LD_INT 0
72657: PPUSH
72658: PPUSH
72659: PPUSH
72660: PPUSH
72661: PPUSH
72662: PPUSH
72663: PPUSH
// result := [ ] ;
72664: LD_ADDR_VAR 0 2
72668: PUSH
72669: EMPTY
72670: ST_TO_ADDR
// if campaign_id = 1 then
72671: LD_OWVAR 69
72675: PUSH
72676: LD_INT 1
72678: EQUAL
72679: IFFALSE 75845
// begin case mission_number of 1 :
72681: LD_OWVAR 70
72685: PUSH
72686: LD_INT 1
72688: DOUBLE
72689: EQUAL
72690: IFTRUE 72694
72692: GO 72770
72694: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72695: LD_ADDR_VAR 0 2
72699: PUSH
72700: LD_INT 2
72702: PUSH
72703: LD_INT 4
72705: PUSH
72706: LD_INT 11
72708: PUSH
72709: LD_INT 12
72711: PUSH
72712: LD_INT 15
72714: PUSH
72715: LD_INT 16
72717: PUSH
72718: LD_INT 22
72720: PUSH
72721: LD_INT 23
72723: PUSH
72724: LD_INT 26
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 101
72740: PUSH
72741: LD_INT 102
72743: PUSH
72744: LD_INT 106
72746: PUSH
72747: LD_INT 116
72749: PUSH
72750: LD_INT 117
72752: PUSH
72753: LD_INT 118
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: ST_TO_ADDR
72768: GO 75843
72770: LD_INT 2
72772: DOUBLE
72773: EQUAL
72774: IFTRUE 72778
72776: GO 72862
72778: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72779: LD_ADDR_VAR 0 2
72783: PUSH
72784: LD_INT 2
72786: PUSH
72787: LD_INT 4
72789: PUSH
72790: LD_INT 11
72792: PUSH
72793: LD_INT 12
72795: PUSH
72796: LD_INT 15
72798: PUSH
72799: LD_INT 16
72801: PUSH
72802: LD_INT 22
72804: PUSH
72805: LD_INT 23
72807: PUSH
72808: LD_INT 26
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 101
72824: PUSH
72825: LD_INT 102
72827: PUSH
72828: LD_INT 105
72830: PUSH
72831: LD_INT 106
72833: PUSH
72834: LD_INT 108
72836: PUSH
72837: LD_INT 116
72839: PUSH
72840: LD_INT 117
72842: PUSH
72843: LD_INT 118
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: ST_TO_ADDR
72860: GO 75843
72862: LD_INT 3
72864: DOUBLE
72865: EQUAL
72866: IFTRUE 72870
72868: GO 72958
72870: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72871: LD_ADDR_VAR 0 2
72875: PUSH
72876: LD_INT 2
72878: PUSH
72879: LD_INT 4
72881: PUSH
72882: LD_INT 5
72884: PUSH
72885: LD_INT 11
72887: PUSH
72888: LD_INT 12
72890: PUSH
72891: LD_INT 15
72893: PUSH
72894: LD_INT 16
72896: PUSH
72897: LD_INT 22
72899: PUSH
72900: LD_INT 26
72902: PUSH
72903: LD_INT 36
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 101
72920: PUSH
72921: LD_INT 102
72923: PUSH
72924: LD_INT 105
72926: PUSH
72927: LD_INT 106
72929: PUSH
72930: LD_INT 108
72932: PUSH
72933: LD_INT 116
72935: PUSH
72936: LD_INT 117
72938: PUSH
72939: LD_INT 118
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: ST_TO_ADDR
72956: GO 75843
72958: LD_INT 4
72960: DOUBLE
72961: EQUAL
72962: IFTRUE 72966
72964: GO 73062
72966: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
72967: LD_ADDR_VAR 0 2
72971: PUSH
72972: LD_INT 2
72974: PUSH
72975: LD_INT 4
72977: PUSH
72978: LD_INT 5
72980: PUSH
72981: LD_INT 8
72983: PUSH
72984: LD_INT 11
72986: PUSH
72987: LD_INT 12
72989: PUSH
72990: LD_INT 15
72992: PUSH
72993: LD_INT 16
72995: PUSH
72996: LD_INT 22
72998: PUSH
72999: LD_INT 23
73001: PUSH
73002: LD_INT 26
73004: PUSH
73005: LD_INT 36
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 101
73024: PUSH
73025: LD_INT 102
73027: PUSH
73028: LD_INT 105
73030: PUSH
73031: LD_INT 106
73033: PUSH
73034: LD_INT 108
73036: PUSH
73037: LD_INT 116
73039: PUSH
73040: LD_INT 117
73042: PUSH
73043: LD_INT 118
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: ST_TO_ADDR
73060: GO 75843
73062: LD_INT 5
73064: DOUBLE
73065: EQUAL
73066: IFTRUE 73070
73068: GO 73182
73070: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
73071: LD_ADDR_VAR 0 2
73075: PUSH
73076: LD_INT 2
73078: PUSH
73079: LD_INT 4
73081: PUSH
73082: LD_INT 5
73084: PUSH
73085: LD_INT 6
73087: PUSH
73088: LD_INT 8
73090: PUSH
73091: LD_INT 11
73093: PUSH
73094: LD_INT 12
73096: PUSH
73097: LD_INT 15
73099: PUSH
73100: LD_INT 16
73102: PUSH
73103: LD_INT 22
73105: PUSH
73106: LD_INT 23
73108: PUSH
73109: LD_INT 25
73111: PUSH
73112: LD_INT 26
73114: PUSH
73115: LD_INT 36
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 101
73136: PUSH
73137: LD_INT 102
73139: PUSH
73140: LD_INT 105
73142: PUSH
73143: LD_INT 106
73145: PUSH
73146: LD_INT 108
73148: PUSH
73149: LD_INT 109
73151: PUSH
73152: LD_INT 112
73154: PUSH
73155: LD_INT 116
73157: PUSH
73158: LD_INT 117
73160: PUSH
73161: LD_INT 118
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: ST_TO_ADDR
73180: GO 75843
73182: LD_INT 6
73184: DOUBLE
73185: EQUAL
73186: IFTRUE 73190
73188: GO 73322
73190: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
73191: LD_ADDR_VAR 0 2
73195: PUSH
73196: LD_INT 2
73198: PUSH
73199: LD_INT 4
73201: PUSH
73202: LD_INT 5
73204: PUSH
73205: LD_INT 6
73207: PUSH
73208: LD_INT 8
73210: PUSH
73211: LD_INT 11
73213: PUSH
73214: LD_INT 12
73216: PUSH
73217: LD_INT 15
73219: PUSH
73220: LD_INT 16
73222: PUSH
73223: LD_INT 20
73225: PUSH
73226: LD_INT 21
73228: PUSH
73229: LD_INT 22
73231: PUSH
73232: LD_INT 23
73234: PUSH
73235: LD_INT 25
73237: PUSH
73238: LD_INT 26
73240: PUSH
73241: LD_INT 30
73243: PUSH
73244: LD_INT 31
73246: PUSH
73247: LD_INT 32
73249: PUSH
73250: LD_INT 36
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 101
73276: PUSH
73277: LD_INT 102
73279: PUSH
73280: LD_INT 105
73282: PUSH
73283: LD_INT 106
73285: PUSH
73286: LD_INT 108
73288: PUSH
73289: LD_INT 109
73291: PUSH
73292: LD_INT 112
73294: PUSH
73295: LD_INT 116
73297: PUSH
73298: LD_INT 117
73300: PUSH
73301: LD_INT 118
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: ST_TO_ADDR
73320: GO 75843
73322: LD_INT 7
73324: DOUBLE
73325: EQUAL
73326: IFTRUE 73330
73328: GO 73442
73330: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
73331: LD_ADDR_VAR 0 2
73335: PUSH
73336: LD_INT 2
73338: PUSH
73339: LD_INT 4
73341: PUSH
73342: LD_INT 5
73344: PUSH
73345: LD_INT 7
73347: PUSH
73348: LD_INT 11
73350: PUSH
73351: LD_INT 12
73353: PUSH
73354: LD_INT 15
73356: PUSH
73357: LD_INT 16
73359: PUSH
73360: LD_INT 20
73362: PUSH
73363: LD_INT 21
73365: PUSH
73366: LD_INT 22
73368: PUSH
73369: LD_INT 23
73371: PUSH
73372: LD_INT 25
73374: PUSH
73375: LD_INT 26
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: LIST
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: LIST
73392: LIST
73393: PUSH
73394: LD_INT 101
73396: PUSH
73397: LD_INT 102
73399: PUSH
73400: LD_INT 103
73402: PUSH
73403: LD_INT 105
73405: PUSH
73406: LD_INT 106
73408: PUSH
73409: LD_INT 108
73411: PUSH
73412: LD_INT 112
73414: PUSH
73415: LD_INT 116
73417: PUSH
73418: LD_INT 117
73420: PUSH
73421: LD_INT 118
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: ST_TO_ADDR
73440: GO 75843
73442: LD_INT 8
73444: DOUBLE
73445: EQUAL
73446: IFTRUE 73450
73448: GO 73590
73450: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73451: LD_ADDR_VAR 0 2
73455: PUSH
73456: LD_INT 2
73458: PUSH
73459: LD_INT 4
73461: PUSH
73462: LD_INT 5
73464: PUSH
73465: LD_INT 6
73467: PUSH
73468: LD_INT 7
73470: PUSH
73471: LD_INT 8
73473: PUSH
73474: LD_INT 11
73476: PUSH
73477: LD_INT 12
73479: PUSH
73480: LD_INT 15
73482: PUSH
73483: LD_INT 16
73485: PUSH
73486: LD_INT 20
73488: PUSH
73489: LD_INT 21
73491: PUSH
73492: LD_INT 22
73494: PUSH
73495: LD_INT 23
73497: PUSH
73498: LD_INT 25
73500: PUSH
73501: LD_INT 26
73503: PUSH
73504: LD_INT 30
73506: PUSH
73507: LD_INT 31
73509: PUSH
73510: LD_INT 32
73512: PUSH
73513: LD_INT 36
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: PUSH
73538: LD_INT 101
73540: PUSH
73541: LD_INT 102
73543: PUSH
73544: LD_INT 103
73546: PUSH
73547: LD_INT 105
73549: PUSH
73550: LD_INT 106
73552: PUSH
73553: LD_INT 108
73555: PUSH
73556: LD_INT 109
73558: PUSH
73559: LD_INT 112
73561: PUSH
73562: LD_INT 116
73564: PUSH
73565: LD_INT 117
73567: PUSH
73568: LD_INT 118
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: ST_TO_ADDR
73588: GO 75843
73590: LD_INT 9
73592: DOUBLE
73593: EQUAL
73594: IFTRUE 73598
73596: GO 73746
73598: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73599: LD_ADDR_VAR 0 2
73603: PUSH
73604: LD_INT 2
73606: PUSH
73607: LD_INT 4
73609: PUSH
73610: LD_INT 5
73612: PUSH
73613: LD_INT 6
73615: PUSH
73616: LD_INT 7
73618: PUSH
73619: LD_INT 8
73621: PUSH
73622: LD_INT 11
73624: PUSH
73625: LD_INT 12
73627: PUSH
73628: LD_INT 15
73630: PUSH
73631: LD_INT 16
73633: PUSH
73634: LD_INT 20
73636: PUSH
73637: LD_INT 21
73639: PUSH
73640: LD_INT 22
73642: PUSH
73643: LD_INT 23
73645: PUSH
73646: LD_INT 25
73648: PUSH
73649: LD_INT 26
73651: PUSH
73652: LD_INT 28
73654: PUSH
73655: LD_INT 30
73657: PUSH
73658: LD_INT 31
73660: PUSH
73661: LD_INT 32
73663: PUSH
73664: LD_INT 36
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 101
73692: PUSH
73693: LD_INT 102
73695: PUSH
73696: LD_INT 103
73698: PUSH
73699: LD_INT 105
73701: PUSH
73702: LD_INT 106
73704: PUSH
73705: LD_INT 108
73707: PUSH
73708: LD_INT 109
73710: PUSH
73711: LD_INT 112
73713: PUSH
73714: LD_INT 114
73716: PUSH
73717: LD_INT 116
73719: PUSH
73720: LD_INT 117
73722: PUSH
73723: LD_INT 118
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: ST_TO_ADDR
73744: GO 75843
73746: LD_INT 10
73748: DOUBLE
73749: EQUAL
73750: IFTRUE 73754
73752: GO 73950
73754: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73755: LD_ADDR_VAR 0 2
73759: PUSH
73760: LD_INT 2
73762: PUSH
73763: LD_INT 4
73765: PUSH
73766: LD_INT 5
73768: PUSH
73769: LD_INT 6
73771: PUSH
73772: LD_INT 7
73774: PUSH
73775: LD_INT 8
73777: PUSH
73778: LD_INT 9
73780: PUSH
73781: LD_INT 10
73783: PUSH
73784: LD_INT 11
73786: PUSH
73787: LD_INT 12
73789: PUSH
73790: LD_INT 13
73792: PUSH
73793: LD_INT 14
73795: PUSH
73796: LD_INT 15
73798: PUSH
73799: LD_INT 16
73801: PUSH
73802: LD_INT 17
73804: PUSH
73805: LD_INT 18
73807: PUSH
73808: LD_INT 19
73810: PUSH
73811: LD_INT 20
73813: PUSH
73814: LD_INT 21
73816: PUSH
73817: LD_INT 22
73819: PUSH
73820: LD_INT 23
73822: PUSH
73823: LD_INT 24
73825: PUSH
73826: LD_INT 25
73828: PUSH
73829: LD_INT 26
73831: PUSH
73832: LD_INT 28
73834: PUSH
73835: LD_INT 30
73837: PUSH
73838: LD_INT 31
73840: PUSH
73841: LD_INT 32
73843: PUSH
73844: LD_INT 36
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: PUSH
73878: LD_INT 101
73880: PUSH
73881: LD_INT 102
73883: PUSH
73884: LD_INT 103
73886: PUSH
73887: LD_INT 104
73889: PUSH
73890: LD_INT 105
73892: PUSH
73893: LD_INT 106
73895: PUSH
73896: LD_INT 107
73898: PUSH
73899: LD_INT 108
73901: PUSH
73902: LD_INT 109
73904: PUSH
73905: LD_INT 110
73907: PUSH
73908: LD_INT 111
73910: PUSH
73911: LD_INT 112
73913: PUSH
73914: LD_INT 114
73916: PUSH
73917: LD_INT 116
73919: PUSH
73920: LD_INT 117
73922: PUSH
73923: LD_INT 118
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: PUSH
73944: EMPTY
73945: LIST
73946: LIST
73947: ST_TO_ADDR
73948: GO 75843
73950: LD_INT 11
73952: DOUBLE
73953: EQUAL
73954: IFTRUE 73958
73956: GO 74162
73958: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
73959: LD_ADDR_VAR 0 2
73963: PUSH
73964: LD_INT 2
73966: PUSH
73967: LD_INT 3
73969: PUSH
73970: LD_INT 4
73972: PUSH
73973: LD_INT 5
73975: PUSH
73976: LD_INT 6
73978: PUSH
73979: LD_INT 7
73981: PUSH
73982: LD_INT 8
73984: PUSH
73985: LD_INT 9
73987: PUSH
73988: LD_INT 10
73990: PUSH
73991: LD_INT 11
73993: PUSH
73994: LD_INT 12
73996: PUSH
73997: LD_INT 13
73999: PUSH
74000: LD_INT 14
74002: PUSH
74003: LD_INT 15
74005: PUSH
74006: LD_INT 16
74008: PUSH
74009: LD_INT 17
74011: PUSH
74012: LD_INT 18
74014: PUSH
74015: LD_INT 19
74017: PUSH
74018: LD_INT 20
74020: PUSH
74021: LD_INT 21
74023: PUSH
74024: LD_INT 22
74026: PUSH
74027: LD_INT 23
74029: PUSH
74030: LD_INT 24
74032: PUSH
74033: LD_INT 25
74035: PUSH
74036: LD_INT 26
74038: PUSH
74039: LD_INT 28
74041: PUSH
74042: LD_INT 30
74044: PUSH
74045: LD_INT 31
74047: PUSH
74048: LD_INT 32
74050: PUSH
74051: LD_INT 34
74053: PUSH
74054: LD_INT 36
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: PUSH
74090: LD_INT 101
74092: PUSH
74093: LD_INT 102
74095: PUSH
74096: LD_INT 103
74098: PUSH
74099: LD_INT 104
74101: PUSH
74102: LD_INT 105
74104: PUSH
74105: LD_INT 106
74107: PUSH
74108: LD_INT 107
74110: PUSH
74111: LD_INT 108
74113: PUSH
74114: LD_INT 109
74116: PUSH
74117: LD_INT 110
74119: PUSH
74120: LD_INT 111
74122: PUSH
74123: LD_INT 112
74125: PUSH
74126: LD_INT 114
74128: PUSH
74129: LD_INT 116
74131: PUSH
74132: LD_INT 117
74134: PUSH
74135: LD_INT 118
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: ST_TO_ADDR
74160: GO 75843
74162: LD_INT 12
74164: DOUBLE
74165: EQUAL
74166: IFTRUE 74170
74168: GO 74390
74170: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
74171: LD_ADDR_VAR 0 2
74175: PUSH
74176: LD_INT 1
74178: PUSH
74179: LD_INT 2
74181: PUSH
74182: LD_INT 3
74184: PUSH
74185: LD_INT 4
74187: PUSH
74188: LD_INT 5
74190: PUSH
74191: LD_INT 6
74193: PUSH
74194: LD_INT 7
74196: PUSH
74197: LD_INT 8
74199: PUSH
74200: LD_INT 9
74202: PUSH
74203: LD_INT 10
74205: PUSH
74206: LD_INT 11
74208: PUSH
74209: LD_INT 12
74211: PUSH
74212: LD_INT 13
74214: PUSH
74215: LD_INT 14
74217: PUSH
74218: LD_INT 15
74220: PUSH
74221: LD_INT 16
74223: PUSH
74224: LD_INT 17
74226: PUSH
74227: LD_INT 18
74229: PUSH
74230: LD_INT 19
74232: PUSH
74233: LD_INT 20
74235: PUSH
74236: LD_INT 21
74238: PUSH
74239: LD_INT 22
74241: PUSH
74242: LD_INT 23
74244: PUSH
74245: LD_INT 24
74247: PUSH
74248: LD_INT 25
74250: PUSH
74251: LD_INT 26
74253: PUSH
74254: LD_INT 27
74256: PUSH
74257: LD_INT 28
74259: PUSH
74260: LD_INT 30
74262: PUSH
74263: LD_INT 31
74265: PUSH
74266: LD_INT 32
74268: PUSH
74269: LD_INT 33
74271: PUSH
74272: LD_INT 34
74274: PUSH
74275: LD_INT 36
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 101
74316: PUSH
74317: LD_INT 102
74319: PUSH
74320: LD_INT 103
74322: PUSH
74323: LD_INT 104
74325: PUSH
74326: LD_INT 105
74328: PUSH
74329: LD_INT 106
74331: PUSH
74332: LD_INT 107
74334: PUSH
74335: LD_INT 108
74337: PUSH
74338: LD_INT 109
74340: PUSH
74341: LD_INT 110
74343: PUSH
74344: LD_INT 111
74346: PUSH
74347: LD_INT 112
74349: PUSH
74350: LD_INT 113
74352: PUSH
74353: LD_INT 114
74355: PUSH
74356: LD_INT 116
74358: PUSH
74359: LD_INT 117
74361: PUSH
74362: LD_INT 118
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: ST_TO_ADDR
74388: GO 75843
74390: LD_INT 13
74392: DOUBLE
74393: EQUAL
74394: IFTRUE 74398
74396: GO 74606
74398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74399: LD_ADDR_VAR 0 2
74403: PUSH
74404: LD_INT 1
74406: PUSH
74407: LD_INT 2
74409: PUSH
74410: LD_INT 3
74412: PUSH
74413: LD_INT 4
74415: PUSH
74416: LD_INT 5
74418: PUSH
74419: LD_INT 8
74421: PUSH
74422: LD_INT 9
74424: PUSH
74425: LD_INT 10
74427: PUSH
74428: LD_INT 11
74430: PUSH
74431: LD_INT 12
74433: PUSH
74434: LD_INT 14
74436: PUSH
74437: LD_INT 15
74439: PUSH
74440: LD_INT 16
74442: PUSH
74443: LD_INT 17
74445: PUSH
74446: LD_INT 18
74448: PUSH
74449: LD_INT 19
74451: PUSH
74452: LD_INT 20
74454: PUSH
74455: LD_INT 21
74457: PUSH
74458: LD_INT 22
74460: PUSH
74461: LD_INT 23
74463: PUSH
74464: LD_INT 24
74466: PUSH
74467: LD_INT 25
74469: PUSH
74470: LD_INT 26
74472: PUSH
74473: LD_INT 27
74475: PUSH
74476: LD_INT 28
74478: PUSH
74479: LD_INT 30
74481: PUSH
74482: LD_INT 31
74484: PUSH
74485: LD_INT 32
74487: PUSH
74488: LD_INT 33
74490: PUSH
74491: LD_INT 34
74493: PUSH
74494: LD_INT 36
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 101
74532: PUSH
74533: LD_INT 102
74535: PUSH
74536: LD_INT 103
74538: PUSH
74539: LD_INT 104
74541: PUSH
74542: LD_INT 105
74544: PUSH
74545: LD_INT 106
74547: PUSH
74548: LD_INT 107
74550: PUSH
74551: LD_INT 108
74553: PUSH
74554: LD_INT 109
74556: PUSH
74557: LD_INT 110
74559: PUSH
74560: LD_INT 111
74562: PUSH
74563: LD_INT 112
74565: PUSH
74566: LD_INT 113
74568: PUSH
74569: LD_INT 114
74571: PUSH
74572: LD_INT 116
74574: PUSH
74575: LD_INT 117
74577: PUSH
74578: LD_INT 118
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: LIST
74596: LIST
74597: LIST
74598: LIST
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: ST_TO_ADDR
74604: GO 75843
74606: LD_INT 14
74608: DOUBLE
74609: EQUAL
74610: IFTRUE 74614
74612: GO 74838
74614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74615: LD_ADDR_VAR 0 2
74619: PUSH
74620: LD_INT 1
74622: PUSH
74623: LD_INT 2
74625: PUSH
74626: LD_INT 3
74628: PUSH
74629: LD_INT 4
74631: PUSH
74632: LD_INT 5
74634: PUSH
74635: LD_INT 6
74637: PUSH
74638: LD_INT 7
74640: PUSH
74641: LD_INT 8
74643: PUSH
74644: LD_INT 9
74646: PUSH
74647: LD_INT 10
74649: PUSH
74650: LD_INT 11
74652: PUSH
74653: LD_INT 12
74655: PUSH
74656: LD_INT 13
74658: PUSH
74659: LD_INT 14
74661: PUSH
74662: LD_INT 15
74664: PUSH
74665: LD_INT 16
74667: PUSH
74668: LD_INT 17
74670: PUSH
74671: LD_INT 18
74673: PUSH
74674: LD_INT 19
74676: PUSH
74677: LD_INT 20
74679: PUSH
74680: LD_INT 21
74682: PUSH
74683: LD_INT 22
74685: PUSH
74686: LD_INT 23
74688: PUSH
74689: LD_INT 24
74691: PUSH
74692: LD_INT 25
74694: PUSH
74695: LD_INT 26
74697: PUSH
74698: LD_INT 27
74700: PUSH
74701: LD_INT 28
74703: PUSH
74704: LD_INT 29
74706: PUSH
74707: LD_INT 30
74709: PUSH
74710: LD_INT 31
74712: PUSH
74713: LD_INT 32
74715: PUSH
74716: LD_INT 33
74718: PUSH
74719: LD_INT 34
74721: PUSH
74722: LD_INT 36
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: LIST
74732: LIST
74733: LIST
74734: LIST
74735: LIST
74736: LIST
74737: LIST
74738: LIST
74739: LIST
74740: LIST
74741: LIST
74742: LIST
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: PUSH
74762: LD_INT 101
74764: PUSH
74765: LD_INT 102
74767: PUSH
74768: LD_INT 103
74770: PUSH
74771: LD_INT 104
74773: PUSH
74774: LD_INT 105
74776: PUSH
74777: LD_INT 106
74779: PUSH
74780: LD_INT 107
74782: PUSH
74783: LD_INT 108
74785: PUSH
74786: LD_INT 109
74788: PUSH
74789: LD_INT 110
74791: PUSH
74792: LD_INT 111
74794: PUSH
74795: LD_INT 112
74797: PUSH
74798: LD_INT 113
74800: PUSH
74801: LD_INT 114
74803: PUSH
74804: LD_INT 116
74806: PUSH
74807: LD_INT 117
74809: PUSH
74810: LD_INT 118
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: ST_TO_ADDR
74836: GO 75843
74838: LD_INT 15
74840: DOUBLE
74841: EQUAL
74842: IFTRUE 74846
74844: GO 75070
74846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74847: LD_ADDR_VAR 0 2
74851: PUSH
74852: LD_INT 1
74854: PUSH
74855: LD_INT 2
74857: PUSH
74858: LD_INT 3
74860: PUSH
74861: LD_INT 4
74863: PUSH
74864: LD_INT 5
74866: PUSH
74867: LD_INT 6
74869: PUSH
74870: LD_INT 7
74872: PUSH
74873: LD_INT 8
74875: PUSH
74876: LD_INT 9
74878: PUSH
74879: LD_INT 10
74881: PUSH
74882: LD_INT 11
74884: PUSH
74885: LD_INT 12
74887: PUSH
74888: LD_INT 13
74890: PUSH
74891: LD_INT 14
74893: PUSH
74894: LD_INT 15
74896: PUSH
74897: LD_INT 16
74899: PUSH
74900: LD_INT 17
74902: PUSH
74903: LD_INT 18
74905: PUSH
74906: LD_INT 19
74908: PUSH
74909: LD_INT 20
74911: PUSH
74912: LD_INT 21
74914: PUSH
74915: LD_INT 22
74917: PUSH
74918: LD_INT 23
74920: PUSH
74921: LD_INT 24
74923: PUSH
74924: LD_INT 25
74926: PUSH
74927: LD_INT 26
74929: PUSH
74930: LD_INT 27
74932: PUSH
74933: LD_INT 28
74935: PUSH
74936: LD_INT 29
74938: PUSH
74939: LD_INT 30
74941: PUSH
74942: LD_INT 31
74944: PUSH
74945: LD_INT 32
74947: PUSH
74948: LD_INT 33
74950: PUSH
74951: LD_INT 34
74953: PUSH
74954: LD_INT 36
74956: PUSH
74957: EMPTY
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 101
74996: PUSH
74997: LD_INT 102
74999: PUSH
75000: LD_INT 103
75002: PUSH
75003: LD_INT 104
75005: PUSH
75006: LD_INT 105
75008: PUSH
75009: LD_INT 106
75011: PUSH
75012: LD_INT 107
75014: PUSH
75015: LD_INT 108
75017: PUSH
75018: LD_INT 109
75020: PUSH
75021: LD_INT 110
75023: PUSH
75024: LD_INT 111
75026: PUSH
75027: LD_INT 112
75029: PUSH
75030: LD_INT 113
75032: PUSH
75033: LD_INT 114
75035: PUSH
75036: LD_INT 116
75038: PUSH
75039: LD_INT 117
75041: PUSH
75042: LD_INT 118
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: ST_TO_ADDR
75068: GO 75843
75070: LD_INT 16
75072: DOUBLE
75073: EQUAL
75074: IFTRUE 75078
75076: GO 75214
75078: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
75079: LD_ADDR_VAR 0 2
75083: PUSH
75084: LD_INT 2
75086: PUSH
75087: LD_INT 4
75089: PUSH
75090: LD_INT 5
75092: PUSH
75093: LD_INT 7
75095: PUSH
75096: LD_INT 11
75098: PUSH
75099: LD_INT 12
75101: PUSH
75102: LD_INT 15
75104: PUSH
75105: LD_INT 16
75107: PUSH
75108: LD_INT 20
75110: PUSH
75111: LD_INT 21
75113: PUSH
75114: LD_INT 22
75116: PUSH
75117: LD_INT 23
75119: PUSH
75120: LD_INT 25
75122: PUSH
75123: LD_INT 26
75125: PUSH
75126: LD_INT 30
75128: PUSH
75129: LD_INT 31
75131: PUSH
75132: LD_INT 32
75134: PUSH
75135: LD_INT 33
75137: PUSH
75138: LD_INT 34
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: LIST
75159: LIST
75160: LIST
75161: PUSH
75162: LD_INT 101
75164: PUSH
75165: LD_INT 102
75167: PUSH
75168: LD_INT 103
75170: PUSH
75171: LD_INT 106
75173: PUSH
75174: LD_INT 108
75176: PUSH
75177: LD_INT 112
75179: PUSH
75180: LD_INT 113
75182: PUSH
75183: LD_INT 114
75185: PUSH
75186: LD_INT 116
75188: PUSH
75189: LD_INT 117
75191: PUSH
75192: LD_INT 118
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: ST_TO_ADDR
75212: GO 75843
75214: LD_INT 17
75216: DOUBLE
75217: EQUAL
75218: IFTRUE 75222
75220: GO 75446
75222: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
75223: LD_ADDR_VAR 0 2
75227: PUSH
75228: LD_INT 1
75230: PUSH
75231: LD_INT 2
75233: PUSH
75234: LD_INT 3
75236: PUSH
75237: LD_INT 4
75239: PUSH
75240: LD_INT 5
75242: PUSH
75243: LD_INT 6
75245: PUSH
75246: LD_INT 7
75248: PUSH
75249: LD_INT 8
75251: PUSH
75252: LD_INT 9
75254: PUSH
75255: LD_INT 10
75257: PUSH
75258: LD_INT 11
75260: PUSH
75261: LD_INT 12
75263: PUSH
75264: LD_INT 13
75266: PUSH
75267: LD_INT 14
75269: PUSH
75270: LD_INT 15
75272: PUSH
75273: LD_INT 16
75275: PUSH
75276: LD_INT 17
75278: PUSH
75279: LD_INT 18
75281: PUSH
75282: LD_INT 19
75284: PUSH
75285: LD_INT 20
75287: PUSH
75288: LD_INT 21
75290: PUSH
75291: LD_INT 22
75293: PUSH
75294: LD_INT 23
75296: PUSH
75297: LD_INT 24
75299: PUSH
75300: LD_INT 25
75302: PUSH
75303: LD_INT 26
75305: PUSH
75306: LD_INT 27
75308: PUSH
75309: LD_INT 28
75311: PUSH
75312: LD_INT 29
75314: PUSH
75315: LD_INT 30
75317: PUSH
75318: LD_INT 31
75320: PUSH
75321: LD_INT 32
75323: PUSH
75324: LD_INT 33
75326: PUSH
75327: LD_INT 34
75329: PUSH
75330: LD_INT 36
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: PUSH
75370: LD_INT 101
75372: PUSH
75373: LD_INT 102
75375: PUSH
75376: LD_INT 103
75378: PUSH
75379: LD_INT 104
75381: PUSH
75382: LD_INT 105
75384: PUSH
75385: LD_INT 106
75387: PUSH
75388: LD_INT 107
75390: PUSH
75391: LD_INT 108
75393: PUSH
75394: LD_INT 109
75396: PUSH
75397: LD_INT 110
75399: PUSH
75400: LD_INT 111
75402: PUSH
75403: LD_INT 112
75405: PUSH
75406: LD_INT 113
75408: PUSH
75409: LD_INT 114
75411: PUSH
75412: LD_INT 116
75414: PUSH
75415: LD_INT 117
75417: PUSH
75418: LD_INT 118
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: ST_TO_ADDR
75444: GO 75843
75446: LD_INT 18
75448: DOUBLE
75449: EQUAL
75450: IFTRUE 75454
75452: GO 75602
75454: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75455: LD_ADDR_VAR 0 2
75459: PUSH
75460: LD_INT 2
75462: PUSH
75463: LD_INT 4
75465: PUSH
75466: LD_INT 5
75468: PUSH
75469: LD_INT 7
75471: PUSH
75472: LD_INT 11
75474: PUSH
75475: LD_INT 12
75477: PUSH
75478: LD_INT 15
75480: PUSH
75481: LD_INT 16
75483: PUSH
75484: LD_INT 20
75486: PUSH
75487: LD_INT 21
75489: PUSH
75490: LD_INT 22
75492: PUSH
75493: LD_INT 23
75495: PUSH
75496: LD_INT 25
75498: PUSH
75499: LD_INT 26
75501: PUSH
75502: LD_INT 30
75504: PUSH
75505: LD_INT 31
75507: PUSH
75508: LD_INT 32
75510: PUSH
75511: LD_INT 33
75513: PUSH
75514: LD_INT 34
75516: PUSH
75517: LD_INT 35
75519: PUSH
75520: LD_INT 36
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: PUSH
75546: LD_INT 101
75548: PUSH
75549: LD_INT 102
75551: PUSH
75552: LD_INT 103
75554: PUSH
75555: LD_INT 106
75557: PUSH
75558: LD_INT 108
75560: PUSH
75561: LD_INT 112
75563: PUSH
75564: LD_INT 113
75566: PUSH
75567: LD_INT 114
75569: PUSH
75570: LD_INT 115
75572: PUSH
75573: LD_INT 116
75575: PUSH
75576: LD_INT 117
75578: PUSH
75579: LD_INT 118
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: ST_TO_ADDR
75600: GO 75843
75602: LD_INT 19
75604: DOUBLE
75605: EQUAL
75606: IFTRUE 75610
75608: GO 75842
75610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75611: LD_ADDR_VAR 0 2
75615: PUSH
75616: LD_INT 1
75618: PUSH
75619: LD_INT 2
75621: PUSH
75622: LD_INT 3
75624: PUSH
75625: LD_INT 4
75627: PUSH
75628: LD_INT 5
75630: PUSH
75631: LD_INT 6
75633: PUSH
75634: LD_INT 7
75636: PUSH
75637: LD_INT 8
75639: PUSH
75640: LD_INT 9
75642: PUSH
75643: LD_INT 10
75645: PUSH
75646: LD_INT 11
75648: PUSH
75649: LD_INT 12
75651: PUSH
75652: LD_INT 13
75654: PUSH
75655: LD_INT 14
75657: PUSH
75658: LD_INT 15
75660: PUSH
75661: LD_INT 16
75663: PUSH
75664: LD_INT 17
75666: PUSH
75667: LD_INT 18
75669: PUSH
75670: LD_INT 19
75672: PUSH
75673: LD_INT 20
75675: PUSH
75676: LD_INT 21
75678: PUSH
75679: LD_INT 22
75681: PUSH
75682: LD_INT 23
75684: PUSH
75685: LD_INT 24
75687: PUSH
75688: LD_INT 25
75690: PUSH
75691: LD_INT 26
75693: PUSH
75694: LD_INT 27
75696: PUSH
75697: LD_INT 28
75699: PUSH
75700: LD_INT 29
75702: PUSH
75703: LD_INT 30
75705: PUSH
75706: LD_INT 31
75708: PUSH
75709: LD_INT 32
75711: PUSH
75712: LD_INT 33
75714: PUSH
75715: LD_INT 34
75717: PUSH
75718: LD_INT 35
75720: PUSH
75721: LD_INT 36
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: LIST
75759: LIST
75760: LIST
75761: PUSH
75762: LD_INT 101
75764: PUSH
75765: LD_INT 102
75767: PUSH
75768: LD_INT 103
75770: PUSH
75771: LD_INT 104
75773: PUSH
75774: LD_INT 105
75776: PUSH
75777: LD_INT 106
75779: PUSH
75780: LD_INT 107
75782: PUSH
75783: LD_INT 108
75785: PUSH
75786: LD_INT 109
75788: PUSH
75789: LD_INT 110
75791: PUSH
75792: LD_INT 111
75794: PUSH
75795: LD_INT 112
75797: PUSH
75798: LD_INT 113
75800: PUSH
75801: LD_INT 114
75803: PUSH
75804: LD_INT 115
75806: PUSH
75807: LD_INT 116
75809: PUSH
75810: LD_INT 117
75812: PUSH
75813: LD_INT 118
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: ST_TO_ADDR
75840: GO 75843
75842: POP
// end else
75843: GO 76074
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75845: LD_ADDR_VAR 0 2
75849: PUSH
75850: LD_INT 1
75852: PUSH
75853: LD_INT 2
75855: PUSH
75856: LD_INT 3
75858: PUSH
75859: LD_INT 4
75861: PUSH
75862: LD_INT 5
75864: PUSH
75865: LD_INT 6
75867: PUSH
75868: LD_INT 7
75870: PUSH
75871: LD_INT 8
75873: PUSH
75874: LD_INT 9
75876: PUSH
75877: LD_INT 10
75879: PUSH
75880: LD_INT 11
75882: PUSH
75883: LD_INT 12
75885: PUSH
75886: LD_INT 13
75888: PUSH
75889: LD_INT 14
75891: PUSH
75892: LD_INT 15
75894: PUSH
75895: LD_INT 16
75897: PUSH
75898: LD_INT 17
75900: PUSH
75901: LD_INT 18
75903: PUSH
75904: LD_INT 19
75906: PUSH
75907: LD_INT 20
75909: PUSH
75910: LD_INT 21
75912: PUSH
75913: LD_INT 22
75915: PUSH
75916: LD_INT 23
75918: PUSH
75919: LD_INT 24
75921: PUSH
75922: LD_INT 25
75924: PUSH
75925: LD_INT 26
75927: PUSH
75928: LD_INT 27
75930: PUSH
75931: LD_INT 28
75933: PUSH
75934: LD_INT 29
75936: PUSH
75937: LD_INT 30
75939: PUSH
75940: LD_INT 31
75942: PUSH
75943: LD_INT 32
75945: PUSH
75946: LD_INT 33
75948: PUSH
75949: LD_INT 34
75951: PUSH
75952: LD_INT 35
75954: PUSH
75955: LD_INT 36
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: PUSH
75996: LD_INT 101
75998: PUSH
75999: LD_INT 102
76001: PUSH
76002: LD_INT 103
76004: PUSH
76005: LD_INT 104
76007: PUSH
76008: LD_INT 105
76010: PUSH
76011: LD_INT 106
76013: PUSH
76014: LD_INT 107
76016: PUSH
76017: LD_INT 108
76019: PUSH
76020: LD_INT 109
76022: PUSH
76023: LD_INT 110
76025: PUSH
76026: LD_INT 111
76028: PUSH
76029: LD_INT 112
76031: PUSH
76032: LD_INT 113
76034: PUSH
76035: LD_INT 114
76037: PUSH
76038: LD_INT 115
76040: PUSH
76041: LD_INT 116
76043: PUSH
76044: LD_INT 117
76046: PUSH
76047: LD_INT 118
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: ST_TO_ADDR
// if result then
76074: LD_VAR 0 2
76078: IFFALSE 76864
// begin normal :=  ;
76080: LD_ADDR_VAR 0 5
76084: PUSH
76085: LD_STRING 
76087: ST_TO_ADDR
// hardcore :=  ;
76088: LD_ADDR_VAR 0 6
76092: PUSH
76093: LD_STRING 
76095: ST_TO_ADDR
// active :=  ;
76096: LD_ADDR_VAR 0 7
76100: PUSH
76101: LD_STRING 
76103: ST_TO_ADDR
// for i = 1 to normalCounter do
76104: LD_ADDR_VAR 0 8
76108: PUSH
76109: DOUBLE
76110: LD_INT 1
76112: DEC
76113: ST_TO_ADDR
76114: LD_EXP 75
76118: PUSH
76119: FOR_TO
76120: IFFALSE 76221
// begin tmp := 0 ;
76122: LD_ADDR_VAR 0 3
76126: PUSH
76127: LD_STRING 0
76129: ST_TO_ADDR
// if result [ 1 ] then
76130: LD_VAR 0 2
76134: PUSH
76135: LD_INT 1
76137: ARRAY
76138: IFFALSE 76203
// if result [ 1 ] [ 1 ] = i then
76140: LD_VAR 0 2
76144: PUSH
76145: LD_INT 1
76147: ARRAY
76148: PUSH
76149: LD_INT 1
76151: ARRAY
76152: PUSH
76153: LD_VAR 0 8
76157: EQUAL
76158: IFFALSE 76203
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
76160: LD_ADDR_VAR 0 2
76164: PUSH
76165: LD_VAR 0 2
76169: PPUSH
76170: LD_INT 1
76172: PPUSH
76173: LD_VAR 0 2
76177: PUSH
76178: LD_INT 1
76180: ARRAY
76181: PPUSH
76182: LD_INT 1
76184: PPUSH
76185: CALL_OW 3
76189: PPUSH
76190: CALL_OW 1
76194: ST_TO_ADDR
// tmp := 1 ;
76195: LD_ADDR_VAR 0 3
76199: PUSH
76200: LD_STRING 1
76202: ST_TO_ADDR
// end ; normal := normal & tmp ;
76203: LD_ADDR_VAR 0 5
76207: PUSH
76208: LD_VAR 0 5
76212: PUSH
76213: LD_VAR 0 3
76217: STR
76218: ST_TO_ADDR
// end ;
76219: GO 76119
76221: POP
76222: POP
// for i = 1 to hardcoreCounter do
76223: LD_ADDR_VAR 0 8
76227: PUSH
76228: DOUBLE
76229: LD_INT 1
76231: DEC
76232: ST_TO_ADDR
76233: LD_EXP 76
76237: PUSH
76238: FOR_TO
76239: IFFALSE 76344
// begin tmp := 0 ;
76241: LD_ADDR_VAR 0 3
76245: PUSH
76246: LD_STRING 0
76248: ST_TO_ADDR
// if result [ 2 ] then
76249: LD_VAR 0 2
76253: PUSH
76254: LD_INT 2
76256: ARRAY
76257: IFFALSE 76326
// if result [ 2 ] [ 1 ] = 100 + i then
76259: LD_VAR 0 2
76263: PUSH
76264: LD_INT 2
76266: ARRAY
76267: PUSH
76268: LD_INT 1
76270: ARRAY
76271: PUSH
76272: LD_INT 100
76274: PUSH
76275: LD_VAR 0 8
76279: PLUS
76280: EQUAL
76281: IFFALSE 76326
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76283: LD_ADDR_VAR 0 2
76287: PUSH
76288: LD_VAR 0 2
76292: PPUSH
76293: LD_INT 2
76295: PPUSH
76296: LD_VAR 0 2
76300: PUSH
76301: LD_INT 2
76303: ARRAY
76304: PPUSH
76305: LD_INT 1
76307: PPUSH
76308: CALL_OW 3
76312: PPUSH
76313: CALL_OW 1
76317: ST_TO_ADDR
// tmp := 1 ;
76318: LD_ADDR_VAR 0 3
76322: PUSH
76323: LD_STRING 1
76325: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76326: LD_ADDR_VAR 0 6
76330: PUSH
76331: LD_VAR 0 6
76335: PUSH
76336: LD_VAR 0 3
76340: STR
76341: ST_TO_ADDR
// end ;
76342: GO 76238
76344: POP
76345: POP
// if isGameLoad then
76346: LD_VAR 0 1
76350: IFFALSE 76825
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
76352: LD_ADDR_VAR 0 4
76356: PUSH
76357: LD_EXP 79
76361: PUSH
76362: LD_EXP 78
76366: PUSH
76367: LD_EXP 80
76371: PUSH
76372: LD_EXP 77
76376: PUSH
76377: LD_EXP 81
76381: PUSH
76382: LD_EXP 82
76386: PUSH
76387: LD_EXP 83
76391: PUSH
76392: LD_EXP 84
76396: PUSH
76397: LD_EXP 85
76401: PUSH
76402: LD_EXP 86
76406: PUSH
76407: LD_EXP 87
76411: PUSH
76412: LD_EXP 88
76416: PUSH
76417: LD_EXP 89
76421: PUSH
76422: LD_EXP 90
76426: PUSH
76427: LD_EXP 98
76431: PUSH
76432: LD_EXP 99
76436: PUSH
76437: LD_EXP 100
76441: PUSH
76442: LD_EXP 101
76446: PUSH
76447: LD_EXP 103
76451: PUSH
76452: LD_EXP 104
76456: PUSH
76457: LD_EXP 105
76461: PUSH
76462: LD_EXP 108
76466: PUSH
76467: LD_EXP 110
76471: PUSH
76472: LD_EXP 111
76476: PUSH
76477: LD_EXP 112
76481: PUSH
76482: LD_EXP 114
76486: PUSH
76487: LD_EXP 115
76491: PUSH
76492: LD_EXP 118
76496: PUSH
76497: LD_EXP 119
76501: PUSH
76502: LD_EXP 120
76506: PUSH
76507: LD_EXP 121
76511: PUSH
76512: LD_EXP 122
76516: PUSH
76517: LD_EXP 123
76521: PUSH
76522: LD_EXP 124
76526: PUSH
76527: LD_EXP 125
76531: PUSH
76532: LD_EXP 126
76536: PUSH
76537: LD_EXP 91
76541: PUSH
76542: LD_EXP 92
76546: PUSH
76547: LD_EXP 95
76551: PUSH
76552: LD_EXP 96
76556: PUSH
76557: LD_EXP 97
76561: PUSH
76562: LD_EXP 93
76566: PUSH
76567: LD_EXP 94
76571: PUSH
76572: LD_EXP 102
76576: PUSH
76577: LD_EXP 106
76581: PUSH
76582: LD_EXP 107
76586: PUSH
76587: LD_EXP 109
76591: PUSH
76592: LD_EXP 113
76596: PUSH
76597: LD_EXP 116
76601: PUSH
76602: LD_EXP 117
76606: PUSH
76607: LD_EXP 127
76611: PUSH
76612: LD_EXP 128
76616: PUSH
76617: LD_EXP 129
76621: PUSH
76622: LD_EXP 130
76626: PUSH
76627: EMPTY
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: LIST
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: LIST
76680: LIST
76681: LIST
76682: ST_TO_ADDR
// tmp :=  ;
76683: LD_ADDR_VAR 0 3
76687: PUSH
76688: LD_STRING 
76690: ST_TO_ADDR
// for i = 1 to normalCounter do
76691: LD_ADDR_VAR 0 8
76695: PUSH
76696: DOUBLE
76697: LD_INT 1
76699: DEC
76700: ST_TO_ADDR
76701: LD_EXP 75
76705: PUSH
76706: FOR_TO
76707: IFFALSE 76743
// begin if flags [ i ] then
76709: LD_VAR 0 4
76713: PUSH
76714: LD_VAR 0 8
76718: ARRAY
76719: IFFALSE 76741
// tmp := tmp & i & ; ;
76721: LD_ADDR_VAR 0 3
76725: PUSH
76726: LD_VAR 0 3
76730: PUSH
76731: LD_VAR 0 8
76735: STR
76736: PUSH
76737: LD_STRING ;
76739: STR
76740: ST_TO_ADDR
// end ;
76741: GO 76706
76743: POP
76744: POP
// for i = 1 to hardcoreCounter do
76745: LD_ADDR_VAR 0 8
76749: PUSH
76750: DOUBLE
76751: LD_INT 1
76753: DEC
76754: ST_TO_ADDR
76755: LD_EXP 76
76759: PUSH
76760: FOR_TO
76761: IFFALSE 76807
// begin if flags [ normalCounter + i ] then
76763: LD_VAR 0 4
76767: PUSH
76768: LD_EXP 75
76772: PUSH
76773: LD_VAR 0 8
76777: PLUS
76778: ARRAY
76779: IFFALSE 76805
// tmp := tmp & ( 100 + i ) & ; ;
76781: LD_ADDR_VAR 0 3
76785: PUSH
76786: LD_VAR 0 3
76790: PUSH
76791: LD_INT 100
76793: PUSH
76794: LD_VAR 0 8
76798: PLUS
76799: STR
76800: PUSH
76801: LD_STRING ;
76803: STR
76804: ST_TO_ADDR
// end ;
76805: GO 76760
76807: POP
76808: POP
// if tmp then
76809: LD_VAR 0 3
76813: IFFALSE 76825
// active := tmp ;
76815: LD_ADDR_VAR 0 7
76819: PUSH
76820: LD_VAR 0 3
76824: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76825: LD_STRING getStreamItemsFromMission("
76827: PUSH
76828: LD_VAR 0 5
76832: STR
76833: PUSH
76834: LD_STRING ","
76836: STR
76837: PUSH
76838: LD_VAR 0 6
76842: STR
76843: PUSH
76844: LD_STRING ","
76846: STR
76847: PUSH
76848: LD_VAR 0 7
76852: STR
76853: PUSH
76854: LD_STRING ")
76856: STR
76857: PPUSH
76858: CALL_OW 559
// end else
76862: GO 76871
// ToLua ( getStreamItemsFromMission("","","") ) ;
76864: LD_STRING getStreamItemsFromMission("","","")
76866: PPUSH
76867: CALL_OW 559
// end ;
76871: LD_VAR 0 2
76875: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76876: LD_EXP 74
76880: PUSH
76881: LD_EXP 79
76885: AND
76886: IFFALSE 77010
76888: GO 76890
76890: DISABLE
76891: LD_INT 0
76893: PPUSH
76894: PPUSH
// begin enable ;
76895: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76896: LD_ADDR_VAR 0 2
76900: PUSH
76901: LD_INT 22
76903: PUSH
76904: LD_OWVAR 2
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: PUSH
76913: LD_INT 2
76915: PUSH
76916: LD_INT 34
76918: PUSH
76919: LD_INT 7
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 34
76928: PUSH
76929: LD_INT 45
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PUSH
76936: LD_INT 34
76938: PUSH
76939: LD_INT 28
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: PUSH
76946: LD_INT 34
76948: PUSH
76949: LD_INT 47
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: LIST
76960: LIST
76961: LIST
76962: PUSH
76963: EMPTY
76964: LIST
76965: LIST
76966: PPUSH
76967: CALL_OW 69
76971: ST_TO_ADDR
// if not tmp then
76972: LD_VAR 0 2
76976: NOT
76977: IFFALSE 76981
// exit ;
76979: GO 77010
// for i in tmp do
76981: LD_ADDR_VAR 0 1
76985: PUSH
76986: LD_VAR 0 2
76990: PUSH
76991: FOR_IN
76992: IFFALSE 77008
// begin SetLives ( i , 0 ) ;
76994: LD_VAR 0 1
76998: PPUSH
76999: LD_INT 0
77001: PPUSH
77002: CALL_OW 234
// end ;
77006: GO 76991
77008: POP
77009: POP
// end ;
77010: PPOPN 2
77012: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77013: LD_EXP 74
77017: PUSH
77018: LD_EXP 80
77022: AND
77023: IFFALSE 77107
77025: GO 77027
77027: DISABLE
77028: LD_INT 0
77030: PPUSH
77031: PPUSH
// begin enable ;
77032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77033: LD_ADDR_VAR 0 2
77037: PUSH
77038: LD_INT 22
77040: PUSH
77041: LD_OWVAR 2
77045: PUSH
77046: EMPTY
77047: LIST
77048: LIST
77049: PUSH
77050: LD_INT 32
77052: PUSH
77053: LD_INT 3
77055: PUSH
77056: EMPTY
77057: LIST
77058: LIST
77059: PUSH
77060: EMPTY
77061: LIST
77062: LIST
77063: PPUSH
77064: CALL_OW 69
77068: ST_TO_ADDR
// if not tmp then
77069: LD_VAR 0 2
77073: NOT
77074: IFFALSE 77078
// exit ;
77076: GO 77107
// for i in tmp do
77078: LD_ADDR_VAR 0 1
77082: PUSH
77083: LD_VAR 0 2
77087: PUSH
77088: FOR_IN
77089: IFFALSE 77105
// begin SetLives ( i , 0 ) ;
77091: LD_VAR 0 1
77095: PPUSH
77096: LD_INT 0
77098: PPUSH
77099: CALL_OW 234
// end ;
77103: GO 77088
77105: POP
77106: POP
// end ;
77107: PPOPN 2
77109: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77110: LD_EXP 74
77114: PUSH
77115: LD_EXP 77
77119: AND
77120: IFFALSE 77213
77122: GO 77124
77124: DISABLE
77125: LD_INT 0
77127: PPUSH
// begin enable ;
77128: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77129: LD_ADDR_VAR 0 1
77133: PUSH
77134: LD_INT 22
77136: PUSH
77137: LD_OWVAR 2
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: PUSH
77146: LD_INT 2
77148: PUSH
77149: LD_INT 25
77151: PUSH
77152: LD_INT 5
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: PUSH
77159: LD_INT 25
77161: PUSH
77162: LD_INT 9
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: PUSH
77169: LD_INT 25
77171: PUSH
77172: LD_INT 8
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PPUSH
77189: CALL_OW 69
77193: PUSH
77194: FOR_IN
77195: IFFALSE 77211
// begin SetClass ( i , 1 ) ;
77197: LD_VAR 0 1
77201: PPUSH
77202: LD_INT 1
77204: PPUSH
77205: CALL_OW 336
// end ;
77209: GO 77194
77211: POP
77212: POP
// end ;
77213: PPOPN 1
77215: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77216: LD_EXP 74
77220: PUSH
77221: LD_EXP 78
77225: AND
77226: PUSH
77227: LD_OWVAR 65
77231: PUSH
77232: LD_INT 7
77234: LESS
77235: AND
77236: IFFALSE 77250
77238: GO 77240
77240: DISABLE
// begin enable ;
77241: ENABLE
// game_speed := 7 ;
77242: LD_ADDR_OWVAR 65
77246: PUSH
77247: LD_INT 7
77249: ST_TO_ADDR
// end ;
77250: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77251: LD_EXP 74
77255: PUSH
77256: LD_EXP 81
77260: AND
77261: IFFALSE 77463
77263: GO 77265
77265: DISABLE
77266: LD_INT 0
77268: PPUSH
77269: PPUSH
77270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77271: LD_ADDR_VAR 0 3
77275: PUSH
77276: LD_INT 81
77278: PUSH
77279: LD_OWVAR 2
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: PUSH
77288: LD_INT 21
77290: PUSH
77291: LD_INT 1
77293: PUSH
77294: EMPTY
77295: LIST
77296: LIST
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: PPUSH
77302: CALL_OW 69
77306: ST_TO_ADDR
// if not tmp then
77307: LD_VAR 0 3
77311: NOT
77312: IFFALSE 77316
// exit ;
77314: GO 77463
// if tmp > 5 then
77316: LD_VAR 0 3
77320: PUSH
77321: LD_INT 5
77323: GREATER
77324: IFFALSE 77336
// k := 5 else
77326: LD_ADDR_VAR 0 2
77330: PUSH
77331: LD_INT 5
77333: ST_TO_ADDR
77334: GO 77346
// k := tmp ;
77336: LD_ADDR_VAR 0 2
77340: PUSH
77341: LD_VAR 0 3
77345: ST_TO_ADDR
// for i := 1 to k do
77346: LD_ADDR_VAR 0 1
77350: PUSH
77351: DOUBLE
77352: LD_INT 1
77354: DEC
77355: ST_TO_ADDR
77356: LD_VAR 0 2
77360: PUSH
77361: FOR_TO
77362: IFFALSE 77461
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77364: LD_VAR 0 3
77368: PUSH
77369: LD_VAR 0 1
77373: ARRAY
77374: PPUSH
77375: LD_VAR 0 1
77379: PUSH
77380: LD_INT 4
77382: MOD
77383: PUSH
77384: LD_INT 1
77386: PLUS
77387: PPUSH
77388: CALL_OW 259
77392: PUSH
77393: LD_INT 10
77395: LESS
77396: IFFALSE 77459
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77398: LD_VAR 0 3
77402: PUSH
77403: LD_VAR 0 1
77407: ARRAY
77408: PPUSH
77409: LD_VAR 0 1
77413: PUSH
77414: LD_INT 4
77416: MOD
77417: PUSH
77418: LD_INT 1
77420: PLUS
77421: PPUSH
77422: LD_VAR 0 3
77426: PUSH
77427: LD_VAR 0 1
77431: ARRAY
77432: PPUSH
77433: LD_VAR 0 1
77437: PUSH
77438: LD_INT 4
77440: MOD
77441: PUSH
77442: LD_INT 1
77444: PLUS
77445: PPUSH
77446: CALL_OW 259
77450: PUSH
77451: LD_INT 1
77453: PLUS
77454: PPUSH
77455: CALL_OW 237
77459: GO 77361
77461: POP
77462: POP
// end ;
77463: PPOPN 3
77465: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77466: LD_EXP 74
77470: PUSH
77471: LD_EXP 82
77475: AND
77476: IFFALSE 77496
77478: GO 77480
77480: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77481: LD_INT 4
77483: PPUSH
77484: LD_OWVAR 2
77488: PPUSH
77489: LD_INT 0
77491: PPUSH
77492: CALL_OW 324
77496: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77497: LD_EXP 74
77501: PUSH
77502: LD_EXP 111
77506: AND
77507: IFFALSE 77527
77509: GO 77511
77511: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77512: LD_INT 19
77514: PPUSH
77515: LD_OWVAR 2
77519: PPUSH
77520: LD_INT 0
77522: PPUSH
77523: CALL_OW 324
77527: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77528: LD_EXP 74
77532: PUSH
77533: LD_EXP 83
77537: AND
77538: IFFALSE 77640
77540: GO 77542
77542: DISABLE
77543: LD_INT 0
77545: PPUSH
77546: PPUSH
// begin enable ;
77547: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77548: LD_ADDR_VAR 0 2
77552: PUSH
77553: LD_INT 22
77555: PUSH
77556: LD_OWVAR 2
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: PUSH
77565: LD_INT 2
77567: PUSH
77568: LD_INT 34
77570: PUSH
77571: LD_INT 11
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 34
77580: PUSH
77581: LD_INT 30
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: PUSH
77588: EMPTY
77589: LIST
77590: LIST
77591: LIST
77592: PUSH
77593: EMPTY
77594: LIST
77595: LIST
77596: PPUSH
77597: CALL_OW 69
77601: ST_TO_ADDR
// if not tmp then
77602: LD_VAR 0 2
77606: NOT
77607: IFFALSE 77611
// exit ;
77609: GO 77640
// for i in tmp do
77611: LD_ADDR_VAR 0 1
77615: PUSH
77616: LD_VAR 0 2
77620: PUSH
77621: FOR_IN
77622: IFFALSE 77638
// begin SetLives ( i , 0 ) ;
77624: LD_VAR 0 1
77628: PPUSH
77629: LD_INT 0
77631: PPUSH
77632: CALL_OW 234
// end ;
77636: GO 77621
77638: POP
77639: POP
// end ;
77640: PPOPN 2
77642: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77643: LD_EXP 74
77647: PUSH
77648: LD_EXP 84
77652: AND
77653: IFFALSE 77673
77655: GO 77657
77657: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77658: LD_INT 32
77660: PPUSH
77661: LD_OWVAR 2
77665: PPUSH
77666: LD_INT 0
77668: PPUSH
77669: CALL_OW 324
77673: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77674: LD_EXP 74
77678: PUSH
77679: LD_EXP 85
77683: AND
77684: IFFALSE 77865
77686: GO 77688
77688: DISABLE
77689: LD_INT 0
77691: PPUSH
77692: PPUSH
77693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77694: LD_ADDR_VAR 0 2
77698: PUSH
77699: LD_INT 22
77701: PUSH
77702: LD_OWVAR 2
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: LD_INT 33
77713: PUSH
77714: LD_INT 3
77716: PUSH
77717: EMPTY
77718: LIST
77719: LIST
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PPUSH
77725: CALL_OW 69
77729: ST_TO_ADDR
// if not tmp then
77730: LD_VAR 0 2
77734: NOT
77735: IFFALSE 77739
// exit ;
77737: GO 77865
// side := 0 ;
77739: LD_ADDR_VAR 0 3
77743: PUSH
77744: LD_INT 0
77746: ST_TO_ADDR
// for i := 1 to 8 do
77747: LD_ADDR_VAR 0 1
77751: PUSH
77752: DOUBLE
77753: LD_INT 1
77755: DEC
77756: ST_TO_ADDR
77757: LD_INT 8
77759: PUSH
77760: FOR_TO
77761: IFFALSE 77809
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77763: LD_OWVAR 2
77767: PUSH
77768: LD_VAR 0 1
77772: NONEQUAL
77773: PUSH
77774: LD_OWVAR 2
77778: PPUSH
77779: LD_VAR 0 1
77783: PPUSH
77784: CALL_OW 81
77788: PUSH
77789: LD_INT 2
77791: EQUAL
77792: AND
77793: IFFALSE 77807
// begin side := i ;
77795: LD_ADDR_VAR 0 3
77799: PUSH
77800: LD_VAR 0 1
77804: ST_TO_ADDR
// break ;
77805: GO 77809
// end ;
77807: GO 77760
77809: POP
77810: POP
// if not side then
77811: LD_VAR 0 3
77815: NOT
77816: IFFALSE 77820
// exit ;
77818: GO 77865
// for i := 1 to tmp do
77820: LD_ADDR_VAR 0 1
77824: PUSH
77825: DOUBLE
77826: LD_INT 1
77828: DEC
77829: ST_TO_ADDR
77830: LD_VAR 0 2
77834: PUSH
77835: FOR_TO
77836: IFFALSE 77863
// if Prob ( 60 ) then
77838: LD_INT 60
77840: PPUSH
77841: CALL_OW 13
77845: IFFALSE 77861
// SetSide ( i , side ) ;
77847: LD_VAR 0 1
77851: PPUSH
77852: LD_VAR 0 3
77856: PPUSH
77857: CALL_OW 235
77861: GO 77835
77863: POP
77864: POP
// end ;
77865: PPOPN 3
77867: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77868: LD_EXP 74
77872: PUSH
77873: LD_EXP 87
77877: AND
77878: IFFALSE 77997
77880: GO 77882
77882: DISABLE
77883: LD_INT 0
77885: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77886: LD_ADDR_VAR 0 1
77890: PUSH
77891: LD_INT 22
77893: PUSH
77894: LD_OWVAR 2
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PUSH
77903: LD_INT 21
77905: PUSH
77906: LD_INT 1
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: PUSH
77913: LD_INT 3
77915: PUSH
77916: LD_INT 23
77918: PUSH
77919: LD_INT 0
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: PUSH
77926: EMPTY
77927: LIST
77928: LIST
77929: PUSH
77930: EMPTY
77931: LIST
77932: LIST
77933: LIST
77934: PPUSH
77935: CALL_OW 69
77939: PUSH
77940: FOR_IN
77941: IFFALSE 77995
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77943: LD_VAR 0 1
77947: PPUSH
77948: CALL_OW 257
77952: PUSH
77953: LD_INT 1
77955: PUSH
77956: LD_INT 2
77958: PUSH
77959: LD_INT 3
77961: PUSH
77962: LD_INT 4
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: LIST
77969: LIST
77970: IN
77971: IFFALSE 77993
// SetClass ( un , rand ( 1 , 4 ) ) ;
77973: LD_VAR 0 1
77977: PPUSH
77978: LD_INT 1
77980: PPUSH
77981: LD_INT 4
77983: PPUSH
77984: CALL_OW 12
77988: PPUSH
77989: CALL_OW 336
77993: GO 77940
77995: POP
77996: POP
// end ;
77997: PPOPN 1
77999: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78000: LD_EXP 74
78004: PUSH
78005: LD_EXP 86
78009: AND
78010: IFFALSE 78089
78012: GO 78014
78014: DISABLE
78015: LD_INT 0
78017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78018: LD_ADDR_VAR 0 1
78022: PUSH
78023: LD_INT 22
78025: PUSH
78026: LD_OWVAR 2
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: LD_INT 21
78037: PUSH
78038: LD_INT 3
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: PUSH
78045: EMPTY
78046: LIST
78047: LIST
78048: PPUSH
78049: CALL_OW 69
78053: ST_TO_ADDR
// if not tmp then
78054: LD_VAR 0 1
78058: NOT
78059: IFFALSE 78063
// exit ;
78061: GO 78089
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78063: LD_VAR 0 1
78067: PUSH
78068: LD_INT 1
78070: PPUSH
78071: LD_VAR 0 1
78075: PPUSH
78076: CALL_OW 12
78080: ARRAY
78081: PPUSH
78082: LD_INT 100
78084: PPUSH
78085: CALL_OW 234
// end ;
78089: PPOPN 1
78091: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78092: LD_EXP 74
78096: PUSH
78097: LD_EXP 88
78101: AND
78102: IFFALSE 78200
78104: GO 78106
78106: DISABLE
78107: LD_INT 0
78109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78110: LD_ADDR_VAR 0 1
78114: PUSH
78115: LD_INT 22
78117: PUSH
78118: LD_OWVAR 2
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: PUSH
78127: LD_INT 21
78129: PUSH
78130: LD_INT 1
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: PPUSH
78141: CALL_OW 69
78145: ST_TO_ADDR
// if not tmp then
78146: LD_VAR 0 1
78150: NOT
78151: IFFALSE 78155
// exit ;
78153: GO 78200
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
78155: LD_VAR 0 1
78159: PUSH
78160: LD_INT 1
78162: PPUSH
78163: LD_VAR 0 1
78167: PPUSH
78168: CALL_OW 12
78172: ARRAY
78173: PPUSH
78174: LD_INT 1
78176: PPUSH
78177: LD_INT 4
78179: PPUSH
78180: CALL_OW 12
78184: PPUSH
78185: LD_INT 3000
78187: PPUSH
78188: LD_INT 9000
78190: PPUSH
78191: CALL_OW 12
78195: PPUSH
78196: CALL_OW 492
// end ;
78200: PPOPN 1
78202: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78203: LD_EXP 74
78207: PUSH
78208: LD_EXP 89
78212: AND
78213: IFFALSE 78233
78215: GO 78217
78217: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78218: LD_INT 1
78220: PPUSH
78221: LD_OWVAR 2
78225: PPUSH
78226: LD_INT 0
78228: PPUSH
78229: CALL_OW 324
78233: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78234: LD_EXP 74
78238: PUSH
78239: LD_EXP 90
78243: AND
78244: IFFALSE 78327
78246: GO 78248
78248: DISABLE
78249: LD_INT 0
78251: PPUSH
78252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78253: LD_ADDR_VAR 0 2
78257: PUSH
78258: LD_INT 22
78260: PUSH
78261: LD_OWVAR 2
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: PUSH
78270: LD_INT 21
78272: PUSH
78273: LD_INT 3
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: PUSH
78280: EMPTY
78281: LIST
78282: LIST
78283: PPUSH
78284: CALL_OW 69
78288: ST_TO_ADDR
// if not tmp then
78289: LD_VAR 0 2
78293: NOT
78294: IFFALSE 78298
// exit ;
78296: GO 78327
// for i in tmp do
78298: LD_ADDR_VAR 0 1
78302: PUSH
78303: LD_VAR 0 2
78307: PUSH
78308: FOR_IN
78309: IFFALSE 78325
// SetBLevel ( i , 10 ) ;
78311: LD_VAR 0 1
78315: PPUSH
78316: LD_INT 10
78318: PPUSH
78319: CALL_OW 241
78323: GO 78308
78325: POP
78326: POP
// end ;
78327: PPOPN 2
78329: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78330: LD_EXP 74
78334: PUSH
78335: LD_EXP 91
78339: AND
78340: IFFALSE 78451
78342: GO 78344
78344: DISABLE
78345: LD_INT 0
78347: PPUSH
78348: PPUSH
78349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78350: LD_ADDR_VAR 0 3
78354: PUSH
78355: LD_INT 22
78357: PUSH
78358: LD_OWVAR 2
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: PUSH
78367: LD_INT 25
78369: PUSH
78370: LD_INT 1
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: PPUSH
78381: CALL_OW 69
78385: ST_TO_ADDR
// if not tmp then
78386: LD_VAR 0 3
78390: NOT
78391: IFFALSE 78395
// exit ;
78393: GO 78451
// un := tmp [ rand ( 1 , tmp ) ] ;
78395: LD_ADDR_VAR 0 2
78399: PUSH
78400: LD_VAR 0 3
78404: PUSH
78405: LD_INT 1
78407: PPUSH
78408: LD_VAR 0 3
78412: PPUSH
78413: CALL_OW 12
78417: ARRAY
78418: ST_TO_ADDR
// if Crawls ( un ) then
78419: LD_VAR 0 2
78423: PPUSH
78424: CALL_OW 318
78428: IFFALSE 78439
// ComWalk ( un ) ;
78430: LD_VAR 0 2
78434: PPUSH
78435: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78439: LD_VAR 0 2
78443: PPUSH
78444: LD_INT 5
78446: PPUSH
78447: CALL_OW 336
// end ;
78451: PPOPN 3
78453: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78454: LD_EXP 74
78458: PUSH
78459: LD_EXP 92
78463: AND
78464: PUSH
78465: LD_OWVAR 67
78469: PUSH
78470: LD_INT 4
78472: LESS
78473: AND
78474: IFFALSE 78493
78476: GO 78478
78478: DISABLE
// begin Difficulty := Difficulty + 1 ;
78479: LD_ADDR_OWVAR 67
78483: PUSH
78484: LD_OWVAR 67
78488: PUSH
78489: LD_INT 1
78491: PLUS
78492: ST_TO_ADDR
// end ;
78493: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78494: LD_EXP 74
78498: PUSH
78499: LD_EXP 93
78503: AND
78504: IFFALSE 78607
78506: GO 78508
78508: DISABLE
78509: LD_INT 0
78511: PPUSH
// begin for i := 1 to 5 do
78512: LD_ADDR_VAR 0 1
78516: PUSH
78517: DOUBLE
78518: LD_INT 1
78520: DEC
78521: ST_TO_ADDR
78522: LD_INT 5
78524: PUSH
78525: FOR_TO
78526: IFFALSE 78605
// begin uc_nation := nation_nature ;
78528: LD_ADDR_OWVAR 21
78532: PUSH
78533: LD_INT 0
78535: ST_TO_ADDR
// uc_side := 0 ;
78536: LD_ADDR_OWVAR 20
78540: PUSH
78541: LD_INT 0
78543: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78544: LD_ADDR_OWVAR 29
78548: PUSH
78549: LD_INT 12
78551: PUSH
78552: LD_INT 12
78554: PUSH
78555: EMPTY
78556: LIST
78557: LIST
78558: ST_TO_ADDR
// hc_agressivity := 20 ;
78559: LD_ADDR_OWVAR 35
78563: PUSH
78564: LD_INT 20
78566: ST_TO_ADDR
// hc_class := class_tiger ;
78567: LD_ADDR_OWVAR 28
78571: PUSH
78572: LD_INT 14
78574: ST_TO_ADDR
// hc_gallery :=  ;
78575: LD_ADDR_OWVAR 33
78579: PUSH
78580: LD_STRING 
78582: ST_TO_ADDR
// hc_name :=  ;
78583: LD_ADDR_OWVAR 26
78587: PUSH
78588: LD_STRING 
78590: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78591: CALL_OW 44
78595: PPUSH
78596: LD_INT 0
78598: PPUSH
78599: CALL_OW 51
// end ;
78603: GO 78525
78605: POP
78606: POP
// end ;
78607: PPOPN 1
78609: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78610: LD_EXP 74
78614: PUSH
78615: LD_EXP 94
78619: AND
78620: IFFALSE 78629
78622: GO 78624
78624: DISABLE
// StreamSibBomb ;
78625: CALL 78630 0 0
78629: END
// export function StreamSibBomb ; var i , x , y ; begin
78630: LD_INT 0
78632: PPUSH
78633: PPUSH
78634: PPUSH
78635: PPUSH
// result := false ;
78636: LD_ADDR_VAR 0 1
78640: PUSH
78641: LD_INT 0
78643: ST_TO_ADDR
// for i := 1 to 16 do
78644: LD_ADDR_VAR 0 2
78648: PUSH
78649: DOUBLE
78650: LD_INT 1
78652: DEC
78653: ST_TO_ADDR
78654: LD_INT 16
78656: PUSH
78657: FOR_TO
78658: IFFALSE 78857
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78660: LD_ADDR_VAR 0 3
78664: PUSH
78665: LD_INT 10
78667: PUSH
78668: LD_INT 20
78670: PUSH
78671: LD_INT 30
78673: PUSH
78674: LD_INT 40
78676: PUSH
78677: LD_INT 50
78679: PUSH
78680: LD_INT 60
78682: PUSH
78683: LD_INT 70
78685: PUSH
78686: LD_INT 80
78688: PUSH
78689: LD_INT 90
78691: PUSH
78692: LD_INT 100
78694: PUSH
78695: LD_INT 110
78697: PUSH
78698: LD_INT 120
78700: PUSH
78701: LD_INT 130
78703: PUSH
78704: LD_INT 140
78706: PUSH
78707: LD_INT 150
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: LIST
78714: LIST
78715: LIST
78716: LIST
78717: LIST
78718: LIST
78719: LIST
78720: LIST
78721: LIST
78722: LIST
78723: LIST
78724: LIST
78725: LIST
78726: PUSH
78727: LD_INT 1
78729: PPUSH
78730: LD_INT 15
78732: PPUSH
78733: CALL_OW 12
78737: ARRAY
78738: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78739: LD_ADDR_VAR 0 4
78743: PUSH
78744: LD_INT 10
78746: PUSH
78747: LD_INT 20
78749: PUSH
78750: LD_INT 30
78752: PUSH
78753: LD_INT 40
78755: PUSH
78756: LD_INT 50
78758: PUSH
78759: LD_INT 60
78761: PUSH
78762: LD_INT 70
78764: PUSH
78765: LD_INT 80
78767: PUSH
78768: LD_INT 90
78770: PUSH
78771: LD_INT 100
78773: PUSH
78774: LD_INT 110
78776: PUSH
78777: LD_INT 120
78779: PUSH
78780: LD_INT 130
78782: PUSH
78783: LD_INT 140
78785: PUSH
78786: LD_INT 150
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: LIST
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: LIST
78801: LIST
78802: LIST
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 1
78808: PPUSH
78809: LD_INT 15
78811: PPUSH
78812: CALL_OW 12
78816: ARRAY
78817: ST_TO_ADDR
// if ValidHex ( x , y ) then
78818: LD_VAR 0 3
78822: PPUSH
78823: LD_VAR 0 4
78827: PPUSH
78828: CALL_OW 488
78832: IFFALSE 78855
// begin result := [ x , y ] ;
78834: LD_ADDR_VAR 0 1
78838: PUSH
78839: LD_VAR 0 3
78843: PUSH
78844: LD_VAR 0 4
78848: PUSH
78849: EMPTY
78850: LIST
78851: LIST
78852: ST_TO_ADDR
// break ;
78853: GO 78857
// end ; end ;
78855: GO 78657
78857: POP
78858: POP
// if result then
78859: LD_VAR 0 1
78863: IFFALSE 78923
// begin ToLua ( playSibBomb() ) ;
78865: LD_STRING playSibBomb()
78867: PPUSH
78868: CALL_OW 559
// wait ( 0 0$14 ) ;
78872: LD_INT 490
78874: PPUSH
78875: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78879: LD_VAR 0 1
78883: PUSH
78884: LD_INT 1
78886: ARRAY
78887: PPUSH
78888: LD_VAR 0 1
78892: PUSH
78893: LD_INT 2
78895: ARRAY
78896: PPUSH
78897: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78901: LD_VAR 0 1
78905: PUSH
78906: LD_INT 1
78908: ARRAY
78909: PPUSH
78910: LD_VAR 0 1
78914: PUSH
78915: LD_INT 2
78917: ARRAY
78918: PPUSH
78919: CALL_OW 429
// end ; end ;
78923: LD_VAR 0 1
78927: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78928: LD_EXP 74
78932: PUSH
78933: LD_EXP 96
78937: AND
78938: IFFALSE 78950
78940: GO 78942
78942: DISABLE
// YouLost (  ) ;
78943: LD_STRING 
78945: PPUSH
78946: CALL_OW 104
78950: END
// every 0 0$1 trigger StreamModeActive and sFog do
78951: LD_EXP 74
78955: PUSH
78956: LD_EXP 95
78960: AND
78961: IFFALSE 78975
78963: GO 78965
78965: DISABLE
// FogOff ( your_side ) ;
78966: LD_OWVAR 2
78970: PPUSH
78971: CALL_OW 344
78975: END
// every 0 0$1 trigger StreamModeActive and sSun do
78976: LD_EXP 74
78980: PUSH
78981: LD_EXP 97
78985: AND
78986: IFFALSE 79014
78988: GO 78990
78990: DISABLE
// begin solar_recharge_percent := 0 ;
78991: LD_ADDR_OWVAR 79
78995: PUSH
78996: LD_INT 0
78998: ST_TO_ADDR
// wait ( 5 5$00 ) ;
78999: LD_INT 10500
79001: PPUSH
79002: CALL_OW 67
// solar_recharge_percent := 100 ;
79006: LD_ADDR_OWVAR 79
79010: PUSH
79011: LD_INT 100
79013: ST_TO_ADDR
// end ;
79014: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79015: LD_EXP 74
79019: PUSH
79020: LD_EXP 98
79024: AND
79025: IFFALSE 79264
79027: GO 79029
79029: DISABLE
79030: LD_INT 0
79032: PPUSH
79033: PPUSH
79034: PPUSH
// begin tmp := [ ] ;
79035: LD_ADDR_VAR 0 3
79039: PUSH
79040: EMPTY
79041: ST_TO_ADDR
// for i := 1 to 6 do
79042: LD_ADDR_VAR 0 1
79046: PUSH
79047: DOUBLE
79048: LD_INT 1
79050: DEC
79051: ST_TO_ADDR
79052: LD_INT 6
79054: PUSH
79055: FOR_TO
79056: IFFALSE 79161
// begin uc_nation := nation_nature ;
79058: LD_ADDR_OWVAR 21
79062: PUSH
79063: LD_INT 0
79065: ST_TO_ADDR
// uc_side := 0 ;
79066: LD_ADDR_OWVAR 20
79070: PUSH
79071: LD_INT 0
79073: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79074: LD_ADDR_OWVAR 29
79078: PUSH
79079: LD_INT 12
79081: PUSH
79082: LD_INT 12
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: ST_TO_ADDR
// hc_agressivity := 20 ;
79089: LD_ADDR_OWVAR 35
79093: PUSH
79094: LD_INT 20
79096: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79097: LD_ADDR_OWVAR 28
79101: PUSH
79102: LD_INT 17
79104: ST_TO_ADDR
// hc_gallery :=  ;
79105: LD_ADDR_OWVAR 33
79109: PUSH
79110: LD_STRING 
79112: ST_TO_ADDR
// hc_name :=  ;
79113: LD_ADDR_OWVAR 26
79117: PUSH
79118: LD_STRING 
79120: ST_TO_ADDR
// un := CreateHuman ;
79121: LD_ADDR_VAR 0 2
79125: PUSH
79126: CALL_OW 44
79130: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79131: LD_VAR 0 2
79135: PPUSH
79136: LD_INT 1
79138: PPUSH
79139: CALL_OW 51
// tmp := tmp ^ un ;
79143: LD_ADDR_VAR 0 3
79147: PUSH
79148: LD_VAR 0 3
79152: PUSH
79153: LD_VAR 0 2
79157: ADD
79158: ST_TO_ADDR
// end ;
79159: GO 79055
79161: POP
79162: POP
// repeat wait ( 0 0$1 ) ;
79163: LD_INT 35
79165: PPUSH
79166: CALL_OW 67
// for un in tmp do
79170: LD_ADDR_VAR 0 2
79174: PUSH
79175: LD_VAR 0 3
79179: PUSH
79180: FOR_IN
79181: IFFALSE 79255
// begin if IsDead ( un ) then
79183: LD_VAR 0 2
79187: PPUSH
79188: CALL_OW 301
79192: IFFALSE 79212
// begin tmp := tmp diff un ;
79194: LD_ADDR_VAR 0 3
79198: PUSH
79199: LD_VAR 0 3
79203: PUSH
79204: LD_VAR 0 2
79208: DIFF
79209: ST_TO_ADDR
// continue ;
79210: GO 79180
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79212: LD_VAR 0 2
79216: PPUSH
79217: LD_INT 3
79219: PUSH
79220: LD_INT 22
79222: PUSH
79223: LD_INT 0
79225: PUSH
79226: EMPTY
79227: LIST
79228: LIST
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: PPUSH
79234: CALL_OW 69
79238: PPUSH
79239: LD_VAR 0 2
79243: PPUSH
79244: CALL_OW 74
79248: PPUSH
79249: CALL_OW 115
// end ;
79253: GO 79180
79255: POP
79256: POP
// until not tmp ;
79257: LD_VAR 0 3
79261: NOT
79262: IFFALSE 79163
// end ;
79264: PPOPN 3
79266: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79267: LD_EXP 74
79271: PUSH
79272: LD_EXP 99
79276: AND
79277: IFFALSE 79331
79279: GO 79281
79281: DISABLE
// begin ToLua ( displayTroll(); ) ;
79282: LD_STRING displayTroll();
79284: PPUSH
79285: CALL_OW 559
// wait ( 3 3$00 ) ;
79289: LD_INT 6300
79291: PPUSH
79292: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79296: LD_STRING hideTroll();
79298: PPUSH
79299: CALL_OW 559
// wait ( 1 1$00 ) ;
79303: LD_INT 2100
79305: PPUSH
79306: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79310: LD_STRING displayTroll();
79312: PPUSH
79313: CALL_OW 559
// wait ( 1 1$00 ) ;
79317: LD_INT 2100
79319: PPUSH
79320: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79324: LD_STRING hideTroll();
79326: PPUSH
79327: CALL_OW 559
// end ;
79331: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79332: LD_EXP 74
79336: PUSH
79337: LD_EXP 100
79341: AND
79342: IFFALSE 79405
79344: GO 79346
79346: DISABLE
79347: LD_INT 0
79349: PPUSH
// begin p := 0 ;
79350: LD_ADDR_VAR 0 1
79354: PUSH
79355: LD_INT 0
79357: ST_TO_ADDR
// repeat game_speed := 1 ;
79358: LD_ADDR_OWVAR 65
79362: PUSH
79363: LD_INT 1
79365: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79366: LD_INT 35
79368: PPUSH
79369: CALL_OW 67
// p := p + 1 ;
79373: LD_ADDR_VAR 0 1
79377: PUSH
79378: LD_VAR 0 1
79382: PUSH
79383: LD_INT 1
79385: PLUS
79386: ST_TO_ADDR
// until p >= 60 ;
79387: LD_VAR 0 1
79391: PUSH
79392: LD_INT 60
79394: GREATEREQUAL
79395: IFFALSE 79358
// game_speed := 4 ;
79397: LD_ADDR_OWVAR 65
79401: PUSH
79402: LD_INT 4
79404: ST_TO_ADDR
// end ;
79405: PPOPN 1
79407: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79408: LD_EXP 74
79412: PUSH
79413: LD_EXP 101
79417: AND
79418: IFFALSE 79564
79420: GO 79422
79422: DISABLE
79423: LD_INT 0
79425: PPUSH
79426: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79427: LD_ADDR_VAR 0 1
79431: PUSH
79432: LD_INT 22
79434: PUSH
79435: LD_OWVAR 2
79439: PUSH
79440: EMPTY
79441: LIST
79442: LIST
79443: PUSH
79444: LD_INT 2
79446: PUSH
79447: LD_INT 30
79449: PUSH
79450: LD_INT 0
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: PUSH
79457: LD_INT 30
79459: PUSH
79460: LD_INT 1
79462: PUSH
79463: EMPTY
79464: LIST
79465: LIST
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: LIST
79471: PUSH
79472: EMPTY
79473: LIST
79474: LIST
79475: PPUSH
79476: CALL_OW 69
79480: ST_TO_ADDR
// if not depot then
79481: LD_VAR 0 1
79485: NOT
79486: IFFALSE 79490
// exit ;
79488: GO 79564
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79490: LD_ADDR_VAR 0 2
79494: PUSH
79495: LD_VAR 0 1
79499: PUSH
79500: LD_INT 1
79502: PPUSH
79503: LD_VAR 0 1
79507: PPUSH
79508: CALL_OW 12
79512: ARRAY
79513: PPUSH
79514: CALL_OW 274
79518: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79519: LD_VAR 0 2
79523: PPUSH
79524: LD_INT 1
79526: PPUSH
79527: LD_INT 0
79529: PPUSH
79530: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79534: LD_VAR 0 2
79538: PPUSH
79539: LD_INT 2
79541: PPUSH
79542: LD_INT 0
79544: PPUSH
79545: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79549: LD_VAR 0 2
79553: PPUSH
79554: LD_INT 3
79556: PPUSH
79557: LD_INT 0
79559: PPUSH
79560: CALL_OW 277
// end ;
79564: PPOPN 2
79566: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79567: LD_EXP 74
79571: PUSH
79572: LD_EXP 102
79576: AND
79577: IFFALSE 79674
79579: GO 79581
79581: DISABLE
79582: LD_INT 0
79584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79585: LD_ADDR_VAR 0 1
79589: PUSH
79590: LD_INT 22
79592: PUSH
79593: LD_OWVAR 2
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 21
79604: PUSH
79605: LD_INT 1
79607: PUSH
79608: EMPTY
79609: LIST
79610: LIST
79611: PUSH
79612: LD_INT 3
79614: PUSH
79615: LD_INT 23
79617: PUSH
79618: LD_INT 0
79620: PUSH
79621: EMPTY
79622: LIST
79623: LIST
79624: PUSH
79625: EMPTY
79626: LIST
79627: LIST
79628: PUSH
79629: EMPTY
79630: LIST
79631: LIST
79632: LIST
79633: PPUSH
79634: CALL_OW 69
79638: ST_TO_ADDR
// if not tmp then
79639: LD_VAR 0 1
79643: NOT
79644: IFFALSE 79648
// exit ;
79646: GO 79674
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79648: LD_VAR 0 1
79652: PUSH
79653: LD_INT 1
79655: PPUSH
79656: LD_VAR 0 1
79660: PPUSH
79661: CALL_OW 12
79665: ARRAY
79666: PPUSH
79667: LD_INT 200
79669: PPUSH
79670: CALL_OW 234
// end ;
79674: PPOPN 1
79676: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79677: LD_EXP 74
79681: PUSH
79682: LD_EXP 103
79686: AND
79687: IFFALSE 79766
79689: GO 79691
79691: DISABLE
79692: LD_INT 0
79694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79695: LD_ADDR_VAR 0 1
79699: PUSH
79700: LD_INT 22
79702: PUSH
79703: LD_OWVAR 2
79707: PUSH
79708: EMPTY
79709: LIST
79710: LIST
79711: PUSH
79712: LD_INT 21
79714: PUSH
79715: LD_INT 2
79717: PUSH
79718: EMPTY
79719: LIST
79720: LIST
79721: PUSH
79722: EMPTY
79723: LIST
79724: LIST
79725: PPUSH
79726: CALL_OW 69
79730: ST_TO_ADDR
// if not tmp then
79731: LD_VAR 0 1
79735: NOT
79736: IFFALSE 79740
// exit ;
79738: GO 79766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79740: LD_VAR 0 1
79744: PUSH
79745: LD_INT 1
79747: PPUSH
79748: LD_VAR 0 1
79752: PPUSH
79753: CALL_OW 12
79757: ARRAY
79758: PPUSH
79759: LD_INT 60
79761: PPUSH
79762: CALL_OW 234
// end ;
79766: PPOPN 1
79768: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79769: LD_EXP 74
79773: PUSH
79774: LD_EXP 104
79778: AND
79779: IFFALSE 79878
79781: GO 79783
79783: DISABLE
79784: LD_INT 0
79786: PPUSH
79787: PPUSH
// begin enable ;
79788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79789: LD_ADDR_VAR 0 1
79793: PUSH
79794: LD_INT 22
79796: PUSH
79797: LD_OWVAR 2
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: PUSH
79806: LD_INT 61
79808: PUSH
79809: EMPTY
79810: LIST
79811: PUSH
79812: LD_INT 33
79814: PUSH
79815: LD_INT 2
79817: PUSH
79818: EMPTY
79819: LIST
79820: LIST
79821: PUSH
79822: EMPTY
79823: LIST
79824: LIST
79825: LIST
79826: PPUSH
79827: CALL_OW 69
79831: ST_TO_ADDR
// if not tmp then
79832: LD_VAR 0 1
79836: NOT
79837: IFFALSE 79841
// exit ;
79839: GO 79878
// for i in tmp do
79841: LD_ADDR_VAR 0 2
79845: PUSH
79846: LD_VAR 0 1
79850: PUSH
79851: FOR_IN
79852: IFFALSE 79876
// if IsControledBy ( i ) then
79854: LD_VAR 0 2
79858: PPUSH
79859: CALL_OW 312
79863: IFFALSE 79874
// ComUnlink ( i ) ;
79865: LD_VAR 0 2
79869: PPUSH
79870: CALL_OW 136
79874: GO 79851
79876: POP
79877: POP
// end ;
79878: PPOPN 2
79880: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79881: LD_EXP 74
79885: PUSH
79886: LD_EXP 105
79890: AND
79891: IFFALSE 80031
79893: GO 79895
79895: DISABLE
79896: LD_INT 0
79898: PPUSH
79899: PPUSH
// begin ToLua ( displayPowell(); ) ;
79900: LD_STRING displayPowell();
79902: PPUSH
79903: CALL_OW 559
// uc_side := 0 ;
79907: LD_ADDR_OWVAR 20
79911: PUSH
79912: LD_INT 0
79914: ST_TO_ADDR
// uc_nation := 2 ;
79915: LD_ADDR_OWVAR 21
79919: PUSH
79920: LD_INT 2
79922: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79923: LD_ADDR_OWVAR 37
79927: PUSH
79928: LD_INT 14
79930: ST_TO_ADDR
// vc_engine := engine_siberite ;
79931: LD_ADDR_OWVAR 39
79935: PUSH
79936: LD_INT 3
79938: ST_TO_ADDR
// vc_control := control_apeman ;
79939: LD_ADDR_OWVAR 38
79943: PUSH
79944: LD_INT 5
79946: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
79947: LD_ADDR_OWVAR 40
79951: PUSH
79952: LD_INT 29
79954: ST_TO_ADDR
// un := CreateVehicle ;
79955: LD_ADDR_VAR 0 2
79959: PUSH
79960: CALL_OW 45
79964: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79965: LD_VAR 0 2
79969: PPUSH
79970: LD_INT 1
79972: PPUSH
79973: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79977: LD_INT 35
79979: PPUSH
79980: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79984: LD_VAR 0 2
79988: PPUSH
79989: LD_INT 22
79991: PUSH
79992: LD_OWVAR 2
79996: PUSH
79997: EMPTY
79998: LIST
79999: LIST
80000: PPUSH
80001: CALL_OW 69
80005: PPUSH
80006: LD_VAR 0 2
80010: PPUSH
80011: CALL_OW 74
80015: PPUSH
80016: CALL_OW 115
// until IsDead ( un ) ;
80020: LD_VAR 0 2
80024: PPUSH
80025: CALL_OW 301
80029: IFFALSE 79977
// end ;
80031: PPOPN 2
80033: END
// every 0 0$1 trigger StreamModeActive and sStu do
80034: LD_EXP 74
80038: PUSH
80039: LD_EXP 113
80043: AND
80044: IFFALSE 80060
80046: GO 80048
80048: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80049: LD_STRING displayStucuk();
80051: PPUSH
80052: CALL_OW 559
// ResetFog ;
80056: CALL_OW 335
// end ;
80060: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80061: LD_EXP 74
80065: PUSH
80066: LD_EXP 106
80070: AND
80071: IFFALSE 80212
80073: GO 80075
80075: DISABLE
80076: LD_INT 0
80078: PPUSH
80079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80080: LD_ADDR_VAR 0 2
80084: PUSH
80085: LD_INT 22
80087: PUSH
80088: LD_OWVAR 2
80092: PUSH
80093: EMPTY
80094: LIST
80095: LIST
80096: PUSH
80097: LD_INT 21
80099: PUSH
80100: LD_INT 1
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: EMPTY
80108: LIST
80109: LIST
80110: PPUSH
80111: CALL_OW 69
80115: ST_TO_ADDR
// if not tmp then
80116: LD_VAR 0 2
80120: NOT
80121: IFFALSE 80125
// exit ;
80123: GO 80212
// un := tmp [ rand ( 1 , tmp ) ] ;
80125: LD_ADDR_VAR 0 1
80129: PUSH
80130: LD_VAR 0 2
80134: PUSH
80135: LD_INT 1
80137: PPUSH
80138: LD_VAR 0 2
80142: PPUSH
80143: CALL_OW 12
80147: ARRAY
80148: ST_TO_ADDR
// SetSide ( un , 0 ) ;
80149: LD_VAR 0 1
80153: PPUSH
80154: LD_INT 0
80156: PPUSH
80157: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
80161: LD_VAR 0 1
80165: PPUSH
80166: LD_OWVAR 3
80170: PUSH
80171: LD_VAR 0 1
80175: DIFF
80176: PPUSH
80177: LD_VAR 0 1
80181: PPUSH
80182: CALL_OW 74
80186: PPUSH
80187: CALL_OW 115
// wait ( 0 0$20 ) ;
80191: LD_INT 700
80193: PPUSH
80194: CALL_OW 67
// SetSide ( un , your_side ) ;
80198: LD_VAR 0 1
80202: PPUSH
80203: LD_OWVAR 2
80207: PPUSH
80208: CALL_OW 235
// end ;
80212: PPOPN 2
80214: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80215: LD_EXP 74
80219: PUSH
80220: LD_EXP 107
80224: AND
80225: IFFALSE 80331
80227: GO 80229
80229: DISABLE
80230: LD_INT 0
80232: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80233: LD_ADDR_VAR 0 1
80237: PUSH
80238: LD_INT 22
80240: PUSH
80241: LD_OWVAR 2
80245: PUSH
80246: EMPTY
80247: LIST
80248: LIST
80249: PUSH
80250: LD_INT 2
80252: PUSH
80253: LD_INT 30
80255: PUSH
80256: LD_INT 0
80258: PUSH
80259: EMPTY
80260: LIST
80261: LIST
80262: PUSH
80263: LD_INT 30
80265: PUSH
80266: LD_INT 1
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: PUSH
80273: EMPTY
80274: LIST
80275: LIST
80276: LIST
80277: PUSH
80278: EMPTY
80279: LIST
80280: LIST
80281: PPUSH
80282: CALL_OW 69
80286: ST_TO_ADDR
// if not depot then
80287: LD_VAR 0 1
80291: NOT
80292: IFFALSE 80296
// exit ;
80294: GO 80331
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80296: LD_VAR 0 1
80300: PUSH
80301: LD_INT 1
80303: ARRAY
80304: PPUSH
80305: CALL_OW 250
80309: PPUSH
80310: LD_VAR 0 1
80314: PUSH
80315: LD_INT 1
80317: ARRAY
80318: PPUSH
80319: CALL_OW 251
80323: PPUSH
80324: LD_INT 70
80326: PPUSH
80327: CALL_OW 495
// end ;
80331: PPOPN 1
80333: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80334: LD_EXP 74
80338: PUSH
80339: LD_EXP 108
80343: AND
80344: IFFALSE 80555
80346: GO 80348
80348: DISABLE
80349: LD_INT 0
80351: PPUSH
80352: PPUSH
80353: PPUSH
80354: PPUSH
80355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80356: LD_ADDR_VAR 0 5
80360: PUSH
80361: LD_INT 22
80363: PUSH
80364: LD_OWVAR 2
80368: PUSH
80369: EMPTY
80370: LIST
80371: LIST
80372: PUSH
80373: LD_INT 21
80375: PUSH
80376: LD_INT 1
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PUSH
80383: EMPTY
80384: LIST
80385: LIST
80386: PPUSH
80387: CALL_OW 69
80391: ST_TO_ADDR
// if not tmp then
80392: LD_VAR 0 5
80396: NOT
80397: IFFALSE 80401
// exit ;
80399: GO 80555
// for i in tmp do
80401: LD_ADDR_VAR 0 1
80405: PUSH
80406: LD_VAR 0 5
80410: PUSH
80411: FOR_IN
80412: IFFALSE 80553
// begin d := rand ( 0 , 5 ) ;
80414: LD_ADDR_VAR 0 4
80418: PUSH
80419: LD_INT 0
80421: PPUSH
80422: LD_INT 5
80424: PPUSH
80425: CALL_OW 12
80429: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80430: LD_ADDR_VAR 0 2
80434: PUSH
80435: LD_VAR 0 1
80439: PPUSH
80440: CALL_OW 250
80444: PPUSH
80445: LD_VAR 0 4
80449: PPUSH
80450: LD_INT 3
80452: PPUSH
80453: LD_INT 12
80455: PPUSH
80456: CALL_OW 12
80460: PPUSH
80461: CALL_OW 272
80465: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80466: LD_ADDR_VAR 0 3
80470: PUSH
80471: LD_VAR 0 1
80475: PPUSH
80476: CALL_OW 251
80480: PPUSH
80481: LD_VAR 0 4
80485: PPUSH
80486: LD_INT 3
80488: PPUSH
80489: LD_INT 12
80491: PPUSH
80492: CALL_OW 12
80496: PPUSH
80497: CALL_OW 273
80501: ST_TO_ADDR
// if ValidHex ( x , y ) then
80502: LD_VAR 0 2
80506: PPUSH
80507: LD_VAR 0 3
80511: PPUSH
80512: CALL_OW 488
80516: IFFALSE 80551
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80518: LD_VAR 0 1
80522: PPUSH
80523: LD_VAR 0 2
80527: PPUSH
80528: LD_VAR 0 3
80532: PPUSH
80533: LD_INT 3
80535: PPUSH
80536: LD_INT 6
80538: PPUSH
80539: CALL_OW 12
80543: PPUSH
80544: LD_INT 1
80546: PPUSH
80547: CALL_OW 483
// end ;
80551: GO 80411
80553: POP
80554: POP
// end ;
80555: PPOPN 5
80557: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80558: LD_EXP 74
80562: PUSH
80563: LD_EXP 109
80567: AND
80568: IFFALSE 80662
80570: GO 80572
80572: DISABLE
80573: LD_INT 0
80575: PPUSH
80576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80577: LD_ADDR_VAR 0 2
80581: PUSH
80582: LD_INT 22
80584: PUSH
80585: LD_OWVAR 2
80589: PUSH
80590: EMPTY
80591: LIST
80592: LIST
80593: PUSH
80594: LD_INT 32
80596: PUSH
80597: LD_INT 1
80599: PUSH
80600: EMPTY
80601: LIST
80602: LIST
80603: PUSH
80604: LD_INT 21
80606: PUSH
80607: LD_INT 2
80609: PUSH
80610: EMPTY
80611: LIST
80612: LIST
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: LIST
80618: PPUSH
80619: CALL_OW 69
80623: ST_TO_ADDR
// if not tmp then
80624: LD_VAR 0 2
80628: NOT
80629: IFFALSE 80633
// exit ;
80631: GO 80662
// for i in tmp do
80633: LD_ADDR_VAR 0 1
80637: PUSH
80638: LD_VAR 0 2
80642: PUSH
80643: FOR_IN
80644: IFFALSE 80660
// SetFuel ( i , 0 ) ;
80646: LD_VAR 0 1
80650: PPUSH
80651: LD_INT 0
80653: PPUSH
80654: CALL_OW 240
80658: GO 80643
80660: POP
80661: POP
// end ;
80662: PPOPN 2
80664: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80665: LD_EXP 74
80669: PUSH
80670: LD_EXP 110
80674: AND
80675: IFFALSE 80741
80677: GO 80679
80679: DISABLE
80680: LD_INT 0
80682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80683: LD_ADDR_VAR 0 1
80687: PUSH
80688: LD_INT 22
80690: PUSH
80691: LD_OWVAR 2
80695: PUSH
80696: EMPTY
80697: LIST
80698: LIST
80699: PUSH
80700: LD_INT 30
80702: PUSH
80703: LD_INT 29
80705: PUSH
80706: EMPTY
80707: LIST
80708: LIST
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: PPUSH
80714: CALL_OW 69
80718: ST_TO_ADDR
// if not tmp then
80719: LD_VAR 0 1
80723: NOT
80724: IFFALSE 80728
// exit ;
80726: GO 80741
// DestroyUnit ( tmp [ 1 ] ) ;
80728: LD_VAR 0 1
80732: PUSH
80733: LD_INT 1
80735: ARRAY
80736: PPUSH
80737: CALL_OW 65
// end ;
80741: PPOPN 1
80743: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80744: LD_EXP 74
80748: PUSH
80749: LD_EXP 112
80753: AND
80754: IFFALSE 80883
80756: GO 80758
80758: DISABLE
80759: LD_INT 0
80761: PPUSH
// begin uc_side := 0 ;
80762: LD_ADDR_OWVAR 20
80766: PUSH
80767: LD_INT 0
80769: ST_TO_ADDR
// uc_nation := nation_arabian ;
80770: LD_ADDR_OWVAR 21
80774: PUSH
80775: LD_INT 2
80777: ST_TO_ADDR
// hc_gallery :=  ;
80778: LD_ADDR_OWVAR 33
80782: PUSH
80783: LD_STRING 
80785: ST_TO_ADDR
// hc_name :=  ;
80786: LD_ADDR_OWVAR 26
80790: PUSH
80791: LD_STRING 
80793: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80794: LD_INT 1
80796: PPUSH
80797: LD_INT 11
80799: PPUSH
80800: LD_INT 10
80802: PPUSH
80803: CALL_OW 380
// un := CreateHuman ;
80807: LD_ADDR_VAR 0 1
80811: PUSH
80812: CALL_OW 44
80816: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80817: LD_VAR 0 1
80821: PPUSH
80822: LD_INT 1
80824: PPUSH
80825: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80829: LD_INT 35
80831: PPUSH
80832: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80836: LD_VAR 0 1
80840: PPUSH
80841: LD_INT 22
80843: PUSH
80844: LD_OWVAR 2
80848: PUSH
80849: EMPTY
80850: LIST
80851: LIST
80852: PPUSH
80853: CALL_OW 69
80857: PPUSH
80858: LD_VAR 0 1
80862: PPUSH
80863: CALL_OW 74
80867: PPUSH
80868: CALL_OW 115
// until IsDead ( un ) ;
80872: LD_VAR 0 1
80876: PPUSH
80877: CALL_OW 301
80881: IFFALSE 80829
// end ;
80883: PPOPN 1
80885: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80886: LD_EXP 74
80890: PUSH
80891: LD_EXP 114
80895: AND
80896: IFFALSE 80908
80898: GO 80900
80900: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80901: LD_STRING earthquake(getX(game), 0, 32)
80903: PPUSH
80904: CALL_OW 559
80908: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80909: LD_EXP 74
80913: PUSH
80914: LD_EXP 115
80918: AND
80919: IFFALSE 81010
80921: GO 80923
80923: DISABLE
80924: LD_INT 0
80926: PPUSH
// begin enable ;
80927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80928: LD_ADDR_VAR 0 1
80932: PUSH
80933: LD_INT 22
80935: PUSH
80936: LD_OWVAR 2
80940: PUSH
80941: EMPTY
80942: LIST
80943: LIST
80944: PUSH
80945: LD_INT 21
80947: PUSH
80948: LD_INT 2
80950: PUSH
80951: EMPTY
80952: LIST
80953: LIST
80954: PUSH
80955: LD_INT 33
80957: PUSH
80958: LD_INT 3
80960: PUSH
80961: EMPTY
80962: LIST
80963: LIST
80964: PUSH
80965: EMPTY
80966: LIST
80967: LIST
80968: LIST
80969: PPUSH
80970: CALL_OW 69
80974: ST_TO_ADDR
// if not tmp then
80975: LD_VAR 0 1
80979: NOT
80980: IFFALSE 80984
// exit ;
80982: GO 81010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80984: LD_VAR 0 1
80988: PUSH
80989: LD_INT 1
80991: PPUSH
80992: LD_VAR 0 1
80996: PPUSH
80997: CALL_OW 12
81001: ARRAY
81002: PPUSH
81003: LD_INT 1
81005: PPUSH
81006: CALL_OW 234
// end ;
81010: PPOPN 1
81012: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81013: LD_EXP 74
81017: PUSH
81018: LD_EXP 116
81022: AND
81023: IFFALSE 81164
81025: GO 81027
81027: DISABLE
81028: LD_INT 0
81030: PPUSH
81031: PPUSH
81032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81033: LD_ADDR_VAR 0 3
81037: PUSH
81038: LD_INT 22
81040: PUSH
81041: LD_OWVAR 2
81045: PUSH
81046: EMPTY
81047: LIST
81048: LIST
81049: PUSH
81050: LD_INT 25
81052: PUSH
81053: LD_INT 1
81055: PUSH
81056: EMPTY
81057: LIST
81058: LIST
81059: PUSH
81060: EMPTY
81061: LIST
81062: LIST
81063: PPUSH
81064: CALL_OW 69
81068: ST_TO_ADDR
// if not tmp then
81069: LD_VAR 0 3
81073: NOT
81074: IFFALSE 81078
// exit ;
81076: GO 81164
// un := tmp [ rand ( 1 , tmp ) ] ;
81078: LD_ADDR_VAR 0 2
81082: PUSH
81083: LD_VAR 0 3
81087: PUSH
81088: LD_INT 1
81090: PPUSH
81091: LD_VAR 0 3
81095: PPUSH
81096: CALL_OW 12
81100: ARRAY
81101: ST_TO_ADDR
// if Crawls ( un ) then
81102: LD_VAR 0 2
81106: PPUSH
81107: CALL_OW 318
81111: IFFALSE 81122
// ComWalk ( un ) ;
81113: LD_VAR 0 2
81117: PPUSH
81118: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81122: LD_VAR 0 2
81126: PPUSH
81127: LD_INT 9
81129: PPUSH
81130: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81134: LD_INT 28
81136: PPUSH
81137: LD_OWVAR 2
81141: PPUSH
81142: LD_INT 2
81144: PPUSH
81145: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
81149: LD_INT 29
81151: PPUSH
81152: LD_OWVAR 2
81156: PPUSH
81157: LD_INT 2
81159: PPUSH
81160: CALL_OW 322
// end ;
81164: PPOPN 3
81166: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
81167: LD_EXP 74
81171: PUSH
81172: LD_EXP 117
81176: AND
81177: IFFALSE 81288
81179: GO 81181
81181: DISABLE
81182: LD_INT 0
81184: PPUSH
81185: PPUSH
81186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81187: LD_ADDR_VAR 0 3
81191: PUSH
81192: LD_INT 22
81194: PUSH
81195: LD_OWVAR 2
81199: PUSH
81200: EMPTY
81201: LIST
81202: LIST
81203: PUSH
81204: LD_INT 25
81206: PUSH
81207: LD_INT 1
81209: PUSH
81210: EMPTY
81211: LIST
81212: LIST
81213: PUSH
81214: EMPTY
81215: LIST
81216: LIST
81217: PPUSH
81218: CALL_OW 69
81222: ST_TO_ADDR
// if not tmp then
81223: LD_VAR 0 3
81227: NOT
81228: IFFALSE 81232
// exit ;
81230: GO 81288
// un := tmp [ rand ( 1 , tmp ) ] ;
81232: LD_ADDR_VAR 0 2
81236: PUSH
81237: LD_VAR 0 3
81241: PUSH
81242: LD_INT 1
81244: PPUSH
81245: LD_VAR 0 3
81249: PPUSH
81250: CALL_OW 12
81254: ARRAY
81255: ST_TO_ADDR
// if Crawls ( un ) then
81256: LD_VAR 0 2
81260: PPUSH
81261: CALL_OW 318
81265: IFFALSE 81276
// ComWalk ( un ) ;
81267: LD_VAR 0 2
81271: PPUSH
81272: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81276: LD_VAR 0 2
81280: PPUSH
81281: LD_INT 8
81283: PPUSH
81284: CALL_OW 336
// end ;
81288: PPOPN 3
81290: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81291: LD_EXP 74
81295: PUSH
81296: LD_EXP 118
81300: AND
81301: IFFALSE 81445
81303: GO 81305
81305: DISABLE
81306: LD_INT 0
81308: PPUSH
81309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81310: LD_ADDR_VAR 0 2
81314: PUSH
81315: LD_INT 22
81317: PUSH
81318: LD_OWVAR 2
81322: PUSH
81323: EMPTY
81324: LIST
81325: LIST
81326: PUSH
81327: LD_INT 21
81329: PUSH
81330: LD_INT 2
81332: PUSH
81333: EMPTY
81334: LIST
81335: LIST
81336: PUSH
81337: LD_INT 2
81339: PUSH
81340: LD_INT 34
81342: PUSH
81343: LD_INT 12
81345: PUSH
81346: EMPTY
81347: LIST
81348: LIST
81349: PUSH
81350: LD_INT 34
81352: PUSH
81353: LD_INT 51
81355: PUSH
81356: EMPTY
81357: LIST
81358: LIST
81359: PUSH
81360: LD_INT 34
81362: PUSH
81363: LD_INT 32
81365: PUSH
81366: EMPTY
81367: LIST
81368: LIST
81369: PUSH
81370: EMPTY
81371: LIST
81372: LIST
81373: LIST
81374: LIST
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: LIST
81380: PPUSH
81381: CALL_OW 69
81385: ST_TO_ADDR
// if not tmp then
81386: LD_VAR 0 2
81390: NOT
81391: IFFALSE 81395
// exit ;
81393: GO 81445
// for i in tmp do
81395: LD_ADDR_VAR 0 1
81399: PUSH
81400: LD_VAR 0 2
81404: PUSH
81405: FOR_IN
81406: IFFALSE 81443
// if GetCargo ( i , mat_artifact ) = 0 then
81408: LD_VAR 0 1
81412: PPUSH
81413: LD_INT 4
81415: PPUSH
81416: CALL_OW 289
81420: PUSH
81421: LD_INT 0
81423: EQUAL
81424: IFFALSE 81441
// SetCargo ( i , mat_siberit , 100 ) ;
81426: LD_VAR 0 1
81430: PPUSH
81431: LD_INT 3
81433: PPUSH
81434: LD_INT 100
81436: PPUSH
81437: CALL_OW 290
81441: GO 81405
81443: POP
81444: POP
// end ;
81445: PPOPN 2
81447: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81448: LD_EXP 74
81452: PUSH
81453: LD_EXP 119
81457: AND
81458: IFFALSE 81641
81460: GO 81462
81462: DISABLE
81463: LD_INT 0
81465: PPUSH
81466: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81467: LD_ADDR_VAR 0 2
81471: PUSH
81472: LD_INT 22
81474: PUSH
81475: LD_OWVAR 2
81479: PUSH
81480: EMPTY
81481: LIST
81482: LIST
81483: PPUSH
81484: CALL_OW 69
81488: ST_TO_ADDR
// if not tmp then
81489: LD_VAR 0 2
81493: NOT
81494: IFFALSE 81498
// exit ;
81496: GO 81641
// for i := 1 to 2 do
81498: LD_ADDR_VAR 0 1
81502: PUSH
81503: DOUBLE
81504: LD_INT 1
81506: DEC
81507: ST_TO_ADDR
81508: LD_INT 2
81510: PUSH
81511: FOR_TO
81512: IFFALSE 81639
// begin uc_side := your_side ;
81514: LD_ADDR_OWVAR 20
81518: PUSH
81519: LD_OWVAR 2
81523: ST_TO_ADDR
// uc_nation := nation_american ;
81524: LD_ADDR_OWVAR 21
81528: PUSH
81529: LD_INT 1
81531: ST_TO_ADDR
// vc_chassis := us_morphling ;
81532: LD_ADDR_OWVAR 37
81536: PUSH
81537: LD_INT 5
81539: ST_TO_ADDR
// vc_engine := engine_siberite ;
81540: LD_ADDR_OWVAR 39
81544: PUSH
81545: LD_INT 3
81547: ST_TO_ADDR
// vc_control := control_computer ;
81548: LD_ADDR_OWVAR 38
81552: PUSH
81553: LD_INT 3
81555: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81556: LD_ADDR_OWVAR 40
81560: PUSH
81561: LD_INT 10
81563: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81564: LD_VAR 0 2
81568: PUSH
81569: LD_INT 1
81571: ARRAY
81572: PPUSH
81573: CALL_OW 310
81577: NOT
81578: IFFALSE 81625
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81580: CALL_OW 45
81584: PPUSH
81585: LD_VAR 0 2
81589: PUSH
81590: LD_INT 1
81592: ARRAY
81593: PPUSH
81594: CALL_OW 250
81598: PPUSH
81599: LD_VAR 0 2
81603: PUSH
81604: LD_INT 1
81606: ARRAY
81607: PPUSH
81608: CALL_OW 251
81612: PPUSH
81613: LD_INT 12
81615: PPUSH
81616: LD_INT 1
81618: PPUSH
81619: CALL_OW 50
81623: GO 81637
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81625: CALL_OW 45
81629: PPUSH
81630: LD_INT 1
81632: PPUSH
81633: CALL_OW 51
// end ;
81637: GO 81511
81639: POP
81640: POP
// end ;
81641: PPOPN 2
81643: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81644: LD_EXP 74
81648: PUSH
81649: LD_EXP 120
81653: AND
81654: IFFALSE 81876
81656: GO 81658
81658: DISABLE
81659: LD_INT 0
81661: PPUSH
81662: PPUSH
81663: PPUSH
81664: PPUSH
81665: PPUSH
81666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81667: LD_ADDR_VAR 0 6
81671: PUSH
81672: LD_INT 22
81674: PUSH
81675: LD_OWVAR 2
81679: PUSH
81680: EMPTY
81681: LIST
81682: LIST
81683: PUSH
81684: LD_INT 21
81686: PUSH
81687: LD_INT 1
81689: PUSH
81690: EMPTY
81691: LIST
81692: LIST
81693: PUSH
81694: LD_INT 3
81696: PUSH
81697: LD_INT 23
81699: PUSH
81700: LD_INT 0
81702: PUSH
81703: EMPTY
81704: LIST
81705: LIST
81706: PUSH
81707: EMPTY
81708: LIST
81709: LIST
81710: PUSH
81711: EMPTY
81712: LIST
81713: LIST
81714: LIST
81715: PPUSH
81716: CALL_OW 69
81720: ST_TO_ADDR
// if not tmp then
81721: LD_VAR 0 6
81725: NOT
81726: IFFALSE 81730
// exit ;
81728: GO 81876
// s1 := rand ( 1 , 4 ) ;
81730: LD_ADDR_VAR 0 2
81734: PUSH
81735: LD_INT 1
81737: PPUSH
81738: LD_INT 4
81740: PPUSH
81741: CALL_OW 12
81745: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81746: LD_ADDR_VAR 0 4
81750: PUSH
81751: LD_VAR 0 6
81755: PUSH
81756: LD_INT 1
81758: ARRAY
81759: PPUSH
81760: LD_VAR 0 2
81764: PPUSH
81765: CALL_OW 259
81769: ST_TO_ADDR
// if s1 = 1 then
81770: LD_VAR 0 2
81774: PUSH
81775: LD_INT 1
81777: EQUAL
81778: IFFALSE 81798
// s2 := rand ( 2 , 4 ) else
81780: LD_ADDR_VAR 0 3
81784: PUSH
81785: LD_INT 2
81787: PPUSH
81788: LD_INT 4
81790: PPUSH
81791: CALL_OW 12
81795: ST_TO_ADDR
81796: GO 81806
// s2 := 1 ;
81798: LD_ADDR_VAR 0 3
81802: PUSH
81803: LD_INT 1
81805: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81806: LD_ADDR_VAR 0 5
81810: PUSH
81811: LD_VAR 0 6
81815: PUSH
81816: LD_INT 1
81818: ARRAY
81819: PPUSH
81820: LD_VAR 0 3
81824: PPUSH
81825: CALL_OW 259
81829: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81830: LD_VAR 0 6
81834: PUSH
81835: LD_INT 1
81837: ARRAY
81838: PPUSH
81839: LD_VAR 0 2
81843: PPUSH
81844: LD_VAR 0 5
81848: PPUSH
81849: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81853: LD_VAR 0 6
81857: PUSH
81858: LD_INT 1
81860: ARRAY
81861: PPUSH
81862: LD_VAR 0 3
81866: PPUSH
81867: LD_VAR 0 4
81871: PPUSH
81872: CALL_OW 237
// end ;
81876: PPOPN 6
81878: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81879: LD_EXP 74
81883: PUSH
81884: LD_EXP 121
81888: AND
81889: IFFALSE 81968
81891: GO 81893
81893: DISABLE
81894: LD_INT 0
81896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81897: LD_ADDR_VAR 0 1
81901: PUSH
81902: LD_INT 22
81904: PUSH
81905: LD_OWVAR 2
81909: PUSH
81910: EMPTY
81911: LIST
81912: LIST
81913: PUSH
81914: LD_INT 30
81916: PUSH
81917: LD_INT 3
81919: PUSH
81920: EMPTY
81921: LIST
81922: LIST
81923: PUSH
81924: EMPTY
81925: LIST
81926: LIST
81927: PPUSH
81928: CALL_OW 69
81932: ST_TO_ADDR
// if not tmp then
81933: LD_VAR 0 1
81937: NOT
81938: IFFALSE 81942
// exit ;
81940: GO 81968
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81942: LD_VAR 0 1
81946: PUSH
81947: LD_INT 1
81949: PPUSH
81950: LD_VAR 0 1
81954: PPUSH
81955: CALL_OW 12
81959: ARRAY
81960: PPUSH
81961: LD_INT 1
81963: PPUSH
81964: CALL_OW 234
// end ;
81968: PPOPN 1
81970: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
81971: LD_EXP 74
81975: PUSH
81976: LD_EXP 122
81980: AND
81981: IFFALSE 82093
81983: GO 81985
81985: DISABLE
81986: LD_INT 0
81988: PPUSH
81989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
81990: LD_ADDR_VAR 0 2
81994: PUSH
81995: LD_INT 22
81997: PUSH
81998: LD_OWVAR 2
82002: PUSH
82003: EMPTY
82004: LIST
82005: LIST
82006: PUSH
82007: LD_INT 2
82009: PUSH
82010: LD_INT 30
82012: PUSH
82013: LD_INT 27
82015: PUSH
82016: EMPTY
82017: LIST
82018: LIST
82019: PUSH
82020: LD_INT 30
82022: PUSH
82023: LD_INT 26
82025: PUSH
82026: EMPTY
82027: LIST
82028: LIST
82029: PUSH
82030: LD_INT 30
82032: PUSH
82033: LD_INT 28
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: PUSH
82040: EMPTY
82041: LIST
82042: LIST
82043: LIST
82044: LIST
82045: PUSH
82046: EMPTY
82047: LIST
82048: LIST
82049: PPUSH
82050: CALL_OW 69
82054: ST_TO_ADDR
// if not tmp then
82055: LD_VAR 0 2
82059: NOT
82060: IFFALSE 82064
// exit ;
82062: GO 82093
// for i in tmp do
82064: LD_ADDR_VAR 0 1
82068: PUSH
82069: LD_VAR 0 2
82073: PUSH
82074: FOR_IN
82075: IFFALSE 82091
// SetLives ( i , 1 ) ;
82077: LD_VAR 0 1
82081: PPUSH
82082: LD_INT 1
82084: PPUSH
82085: CALL_OW 234
82089: GO 82074
82091: POP
82092: POP
// end ;
82093: PPOPN 2
82095: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82096: LD_EXP 74
82100: PUSH
82101: LD_EXP 123
82105: AND
82106: IFFALSE 82393
82108: GO 82110
82110: DISABLE
82111: LD_INT 0
82113: PPUSH
82114: PPUSH
82115: PPUSH
// begin i := rand ( 1 , 7 ) ;
82116: LD_ADDR_VAR 0 1
82120: PUSH
82121: LD_INT 1
82123: PPUSH
82124: LD_INT 7
82126: PPUSH
82127: CALL_OW 12
82131: ST_TO_ADDR
// case i of 1 :
82132: LD_VAR 0 1
82136: PUSH
82137: LD_INT 1
82139: DOUBLE
82140: EQUAL
82141: IFTRUE 82145
82143: GO 82155
82145: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
82146: LD_STRING earthquake(getX(game), 0, 32)
82148: PPUSH
82149: CALL_OW 559
82153: GO 82393
82155: LD_INT 2
82157: DOUBLE
82158: EQUAL
82159: IFTRUE 82163
82161: GO 82177
82163: POP
// begin ToLua ( displayStucuk(); ) ;
82164: LD_STRING displayStucuk();
82166: PPUSH
82167: CALL_OW 559
// ResetFog ;
82171: CALL_OW 335
// end ; 3 :
82175: GO 82393
82177: LD_INT 3
82179: DOUBLE
82180: EQUAL
82181: IFTRUE 82185
82183: GO 82289
82185: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82186: LD_ADDR_VAR 0 2
82190: PUSH
82191: LD_INT 22
82193: PUSH
82194: LD_OWVAR 2
82198: PUSH
82199: EMPTY
82200: LIST
82201: LIST
82202: PUSH
82203: LD_INT 25
82205: PUSH
82206: LD_INT 1
82208: PUSH
82209: EMPTY
82210: LIST
82211: LIST
82212: PUSH
82213: EMPTY
82214: LIST
82215: LIST
82216: PPUSH
82217: CALL_OW 69
82221: ST_TO_ADDR
// if not tmp then
82222: LD_VAR 0 2
82226: NOT
82227: IFFALSE 82231
// exit ;
82229: GO 82393
// un := tmp [ rand ( 1 , tmp ) ] ;
82231: LD_ADDR_VAR 0 3
82235: PUSH
82236: LD_VAR 0 2
82240: PUSH
82241: LD_INT 1
82243: PPUSH
82244: LD_VAR 0 2
82248: PPUSH
82249: CALL_OW 12
82253: ARRAY
82254: ST_TO_ADDR
// if Crawls ( un ) then
82255: LD_VAR 0 3
82259: PPUSH
82260: CALL_OW 318
82264: IFFALSE 82275
// ComWalk ( un ) ;
82266: LD_VAR 0 3
82270: PPUSH
82271: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82275: LD_VAR 0 3
82279: PPUSH
82280: LD_INT 8
82282: PPUSH
82283: CALL_OW 336
// end ; 4 :
82287: GO 82393
82289: LD_INT 4
82291: DOUBLE
82292: EQUAL
82293: IFTRUE 82297
82295: GO 82371
82297: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82298: LD_ADDR_VAR 0 2
82302: PUSH
82303: LD_INT 22
82305: PUSH
82306: LD_OWVAR 2
82310: PUSH
82311: EMPTY
82312: LIST
82313: LIST
82314: PUSH
82315: LD_INT 30
82317: PUSH
82318: LD_INT 29
82320: PUSH
82321: EMPTY
82322: LIST
82323: LIST
82324: PUSH
82325: EMPTY
82326: LIST
82327: LIST
82328: PPUSH
82329: CALL_OW 69
82333: ST_TO_ADDR
// if not tmp then
82334: LD_VAR 0 2
82338: NOT
82339: IFFALSE 82343
// exit ;
82341: GO 82393
// CenterNowOnUnits ( tmp [ 1 ] ) ;
82343: LD_VAR 0 2
82347: PUSH
82348: LD_INT 1
82350: ARRAY
82351: PPUSH
82352: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
82356: LD_VAR 0 2
82360: PUSH
82361: LD_INT 1
82363: ARRAY
82364: PPUSH
82365: CALL_OW 65
// end ; 5 .. 7 :
82369: GO 82393
82371: LD_INT 5
82373: DOUBLE
82374: GREATEREQUAL
82375: IFFALSE 82383
82377: LD_INT 7
82379: DOUBLE
82380: LESSEQUAL
82381: IFTRUE 82385
82383: GO 82392
82385: POP
// StreamSibBomb ; end ;
82386: CALL 78630 0 0
82390: GO 82393
82392: POP
// end ;
82393: PPOPN 3
82395: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82396: LD_EXP 74
82400: PUSH
82401: LD_EXP 124
82405: AND
82406: IFFALSE 82562
82408: GO 82410
82410: DISABLE
82411: LD_INT 0
82413: PPUSH
82414: PPUSH
82415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82416: LD_ADDR_VAR 0 2
82420: PUSH
82421: LD_INT 81
82423: PUSH
82424: LD_OWVAR 2
82428: PUSH
82429: EMPTY
82430: LIST
82431: LIST
82432: PUSH
82433: LD_INT 2
82435: PUSH
82436: LD_INT 21
82438: PUSH
82439: LD_INT 1
82441: PUSH
82442: EMPTY
82443: LIST
82444: LIST
82445: PUSH
82446: LD_INT 21
82448: PUSH
82449: LD_INT 2
82451: PUSH
82452: EMPTY
82453: LIST
82454: LIST
82455: PUSH
82456: EMPTY
82457: LIST
82458: LIST
82459: LIST
82460: PUSH
82461: EMPTY
82462: LIST
82463: LIST
82464: PPUSH
82465: CALL_OW 69
82469: ST_TO_ADDR
// if not tmp then
82470: LD_VAR 0 2
82474: NOT
82475: IFFALSE 82479
// exit ;
82477: GO 82562
// p := 0 ;
82479: LD_ADDR_VAR 0 3
82483: PUSH
82484: LD_INT 0
82486: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82487: LD_INT 35
82489: PPUSH
82490: CALL_OW 67
// p := p + 1 ;
82494: LD_ADDR_VAR 0 3
82498: PUSH
82499: LD_VAR 0 3
82503: PUSH
82504: LD_INT 1
82506: PLUS
82507: ST_TO_ADDR
// for i in tmp do
82508: LD_ADDR_VAR 0 1
82512: PUSH
82513: LD_VAR 0 2
82517: PUSH
82518: FOR_IN
82519: IFFALSE 82550
// if GetLives ( i ) < 1000 then
82521: LD_VAR 0 1
82525: PPUSH
82526: CALL_OW 256
82530: PUSH
82531: LD_INT 1000
82533: LESS
82534: IFFALSE 82548
// SetLives ( i , 1000 ) ;
82536: LD_VAR 0 1
82540: PPUSH
82541: LD_INT 1000
82543: PPUSH
82544: CALL_OW 234
82548: GO 82518
82550: POP
82551: POP
// until p > 20 ;
82552: LD_VAR 0 3
82556: PUSH
82557: LD_INT 20
82559: GREATER
82560: IFFALSE 82487
// end ;
82562: PPOPN 3
82564: END
// every 0 0$1 trigger StreamModeActive and sTime do
82565: LD_EXP 74
82569: PUSH
82570: LD_EXP 125
82574: AND
82575: IFFALSE 82610
82577: GO 82579
82579: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82580: LD_INT 28
82582: PPUSH
82583: LD_OWVAR 2
82587: PPUSH
82588: LD_INT 2
82590: PPUSH
82591: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82595: LD_INT 30
82597: PPUSH
82598: LD_OWVAR 2
82602: PPUSH
82603: LD_INT 2
82605: PPUSH
82606: CALL_OW 322
// end ;
82610: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82611: LD_EXP 74
82615: PUSH
82616: LD_EXP 126
82620: AND
82621: IFFALSE 82742
82623: GO 82625
82625: DISABLE
82626: LD_INT 0
82628: PPUSH
82629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82630: LD_ADDR_VAR 0 2
82634: PUSH
82635: LD_INT 22
82637: PUSH
82638: LD_OWVAR 2
82642: PUSH
82643: EMPTY
82644: LIST
82645: LIST
82646: PUSH
82647: LD_INT 21
82649: PUSH
82650: LD_INT 1
82652: PUSH
82653: EMPTY
82654: LIST
82655: LIST
82656: PUSH
82657: LD_INT 3
82659: PUSH
82660: LD_INT 23
82662: PUSH
82663: LD_INT 0
82665: PUSH
82666: EMPTY
82667: LIST
82668: LIST
82669: PUSH
82670: EMPTY
82671: LIST
82672: LIST
82673: PUSH
82674: EMPTY
82675: LIST
82676: LIST
82677: LIST
82678: PPUSH
82679: CALL_OW 69
82683: ST_TO_ADDR
// if not tmp then
82684: LD_VAR 0 2
82688: NOT
82689: IFFALSE 82693
// exit ;
82691: GO 82742
// for i in tmp do
82693: LD_ADDR_VAR 0 1
82697: PUSH
82698: LD_VAR 0 2
82702: PUSH
82703: FOR_IN
82704: IFFALSE 82740
// begin if Crawls ( i ) then
82706: LD_VAR 0 1
82710: PPUSH
82711: CALL_OW 318
82715: IFFALSE 82726
// ComWalk ( i ) ;
82717: LD_VAR 0 1
82721: PPUSH
82722: CALL_OW 138
// SetClass ( i , 2 ) ;
82726: LD_VAR 0 1
82730: PPUSH
82731: LD_INT 2
82733: PPUSH
82734: CALL_OW 336
// end ;
82738: GO 82703
82740: POP
82741: POP
// end ;
82742: PPOPN 2
82744: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82745: LD_EXP 74
82749: PUSH
82750: LD_EXP 127
82754: AND
82755: IFFALSE 83043
82757: GO 82759
82759: DISABLE
82760: LD_INT 0
82762: PPUSH
82763: PPUSH
82764: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82765: LD_OWVAR 2
82769: PPUSH
82770: LD_INT 9
82772: PPUSH
82773: LD_INT 1
82775: PPUSH
82776: LD_INT 1
82778: PPUSH
82779: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82783: LD_INT 9
82785: PPUSH
82786: LD_OWVAR 2
82790: PPUSH
82791: CALL_OW 343
// uc_side := 9 ;
82795: LD_ADDR_OWVAR 20
82799: PUSH
82800: LD_INT 9
82802: ST_TO_ADDR
// uc_nation := 2 ;
82803: LD_ADDR_OWVAR 21
82807: PUSH
82808: LD_INT 2
82810: ST_TO_ADDR
// hc_name := Dark Warrior ;
82811: LD_ADDR_OWVAR 26
82815: PUSH
82816: LD_STRING Dark Warrior
82818: ST_TO_ADDR
// hc_gallery :=  ;
82819: LD_ADDR_OWVAR 33
82823: PUSH
82824: LD_STRING 
82826: ST_TO_ADDR
// hc_noskilllimit := true ;
82827: LD_ADDR_OWVAR 76
82831: PUSH
82832: LD_INT 1
82834: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82835: LD_ADDR_OWVAR 31
82839: PUSH
82840: LD_INT 30
82842: PUSH
82843: LD_INT 30
82845: PUSH
82846: LD_INT 30
82848: PUSH
82849: LD_INT 30
82851: PUSH
82852: EMPTY
82853: LIST
82854: LIST
82855: LIST
82856: LIST
82857: ST_TO_ADDR
// un := CreateHuman ;
82858: LD_ADDR_VAR 0 3
82862: PUSH
82863: CALL_OW 44
82867: ST_TO_ADDR
// hc_noskilllimit := false ;
82868: LD_ADDR_OWVAR 76
82872: PUSH
82873: LD_INT 0
82875: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82876: LD_VAR 0 3
82880: PPUSH
82881: LD_INT 1
82883: PPUSH
82884: CALL_OW 51
// ToLua ( playRanger() ) ;
82888: LD_STRING playRanger()
82890: PPUSH
82891: CALL_OW 559
// p := 0 ;
82895: LD_ADDR_VAR 0 2
82899: PUSH
82900: LD_INT 0
82902: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82903: LD_INT 35
82905: PPUSH
82906: CALL_OW 67
// p := p + 1 ;
82910: LD_ADDR_VAR 0 2
82914: PUSH
82915: LD_VAR 0 2
82919: PUSH
82920: LD_INT 1
82922: PLUS
82923: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82924: LD_VAR 0 3
82928: PPUSH
82929: CALL_OW 256
82933: PUSH
82934: LD_INT 1000
82936: LESS
82937: IFFALSE 82951
// SetLives ( un , 1000 ) ;
82939: LD_VAR 0 3
82943: PPUSH
82944: LD_INT 1000
82946: PPUSH
82947: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
82951: LD_VAR 0 3
82955: PPUSH
82956: LD_INT 81
82958: PUSH
82959: LD_OWVAR 2
82963: PUSH
82964: EMPTY
82965: LIST
82966: LIST
82967: PUSH
82968: LD_INT 91
82970: PUSH
82971: LD_VAR 0 3
82975: PUSH
82976: LD_INT 30
82978: PUSH
82979: EMPTY
82980: LIST
82981: LIST
82982: LIST
82983: PUSH
82984: EMPTY
82985: LIST
82986: LIST
82987: PPUSH
82988: CALL_OW 69
82992: PPUSH
82993: LD_VAR 0 3
82997: PPUSH
82998: CALL_OW 74
83002: PPUSH
83003: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
83007: LD_VAR 0 2
83011: PUSH
83012: LD_INT 80
83014: GREATER
83015: PUSH
83016: LD_VAR 0 3
83020: PPUSH
83021: CALL_OW 301
83025: OR
83026: IFFALSE 82903
// if un then
83028: LD_VAR 0 3
83032: IFFALSE 83043
// RemoveUnit ( un ) ;
83034: LD_VAR 0 3
83038: PPUSH
83039: CALL_OW 64
// end ;
83043: PPOPN 3
83045: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
83046: LD_EXP 128
83050: IFFALSE 83166
83052: GO 83054
83054: DISABLE
83055: LD_INT 0
83057: PPUSH
83058: PPUSH
83059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
83060: LD_ADDR_VAR 0 2
83064: PUSH
83065: LD_INT 81
83067: PUSH
83068: LD_OWVAR 2
83072: PUSH
83073: EMPTY
83074: LIST
83075: LIST
83076: PUSH
83077: LD_INT 21
83079: PUSH
83080: LD_INT 1
83082: PUSH
83083: EMPTY
83084: LIST
83085: LIST
83086: PUSH
83087: EMPTY
83088: LIST
83089: LIST
83090: PPUSH
83091: CALL_OW 69
83095: ST_TO_ADDR
// ToLua ( playComputer() ) ;
83096: LD_STRING playComputer()
83098: PPUSH
83099: CALL_OW 559
// if not tmp then
83103: LD_VAR 0 2
83107: NOT
83108: IFFALSE 83112
// exit ;
83110: GO 83166
// for i in tmp do
83112: LD_ADDR_VAR 0 1
83116: PUSH
83117: LD_VAR 0 2
83121: PUSH
83122: FOR_IN
83123: IFFALSE 83164
// for j := 1 to 4 do
83125: LD_ADDR_VAR 0 3
83129: PUSH
83130: DOUBLE
83131: LD_INT 1
83133: DEC
83134: ST_TO_ADDR
83135: LD_INT 4
83137: PUSH
83138: FOR_TO
83139: IFFALSE 83160
// SetSkill ( i , j , 10 ) ;
83141: LD_VAR 0 1
83145: PPUSH
83146: LD_VAR 0 3
83150: PPUSH
83151: LD_INT 10
83153: PPUSH
83154: CALL_OW 237
83158: GO 83138
83160: POP
83161: POP
83162: GO 83122
83164: POP
83165: POP
// end ;
83166: PPOPN 3
83168: END
// every 0 0$1 trigger s30 do var i , tmp ;
83169: LD_EXP 129
83173: IFFALSE 83242
83175: GO 83177
83177: DISABLE
83178: LD_INT 0
83180: PPUSH
83181: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83182: LD_ADDR_VAR 0 2
83186: PUSH
83187: LD_INT 22
83189: PUSH
83190: LD_OWVAR 2
83194: PUSH
83195: EMPTY
83196: LIST
83197: LIST
83198: PPUSH
83199: CALL_OW 69
83203: ST_TO_ADDR
// if not tmp then
83204: LD_VAR 0 2
83208: NOT
83209: IFFALSE 83213
// exit ;
83211: GO 83242
// for i in tmp do
83213: LD_ADDR_VAR 0 1
83217: PUSH
83218: LD_VAR 0 2
83222: PUSH
83223: FOR_IN
83224: IFFALSE 83240
// SetLives ( i , 300 ) ;
83226: LD_VAR 0 1
83230: PPUSH
83231: LD_INT 300
83233: PPUSH
83234: CALL_OW 234
83238: GO 83223
83240: POP
83241: POP
// end ;
83242: PPOPN 2
83244: END
// every 0 0$1 trigger s60 do var i , tmp ;
83245: LD_EXP 130
83249: IFFALSE 83318
83251: GO 83253
83253: DISABLE
83254: LD_INT 0
83256: PPUSH
83257: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83258: LD_ADDR_VAR 0 2
83262: PUSH
83263: LD_INT 22
83265: PUSH
83266: LD_OWVAR 2
83270: PUSH
83271: EMPTY
83272: LIST
83273: LIST
83274: PPUSH
83275: CALL_OW 69
83279: ST_TO_ADDR
// if not tmp then
83280: LD_VAR 0 2
83284: NOT
83285: IFFALSE 83289
// exit ;
83287: GO 83318
// for i in tmp do
83289: LD_ADDR_VAR 0 1
83293: PUSH
83294: LD_VAR 0 2
83298: PUSH
83299: FOR_IN
83300: IFFALSE 83316
// SetLives ( i , 600 ) ;
83302: LD_VAR 0 1
83306: PPUSH
83307: LD_INT 600
83309: PPUSH
83310: CALL_OW 234
83314: GO 83299
83316: POP
83317: POP
// end ;
83318: PPOPN 2
83320: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83321: LD_INT 0
83323: PPUSH
// case cmd of 301 :
83324: LD_VAR 0 1
83328: PUSH
83329: LD_INT 301
83331: DOUBLE
83332: EQUAL
83333: IFTRUE 83337
83335: GO 83369
83337: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83338: LD_VAR 0 6
83342: PPUSH
83343: LD_VAR 0 7
83347: PPUSH
83348: LD_VAR 0 8
83352: PPUSH
83353: LD_VAR 0 4
83357: PPUSH
83358: LD_VAR 0 5
83362: PPUSH
83363: CALL 84578 0 5
83367: GO 83490
83369: LD_INT 302
83371: DOUBLE
83372: EQUAL
83373: IFTRUE 83377
83375: GO 83414
83377: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83378: LD_VAR 0 6
83382: PPUSH
83383: LD_VAR 0 7
83387: PPUSH
83388: LD_VAR 0 8
83392: PPUSH
83393: LD_VAR 0 9
83397: PPUSH
83398: LD_VAR 0 4
83402: PPUSH
83403: LD_VAR 0 5
83407: PPUSH
83408: CALL 84669 0 6
83412: GO 83490
83414: LD_INT 303
83416: DOUBLE
83417: EQUAL
83418: IFTRUE 83422
83420: GO 83459
83422: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83423: LD_VAR 0 6
83427: PPUSH
83428: LD_VAR 0 7
83432: PPUSH
83433: LD_VAR 0 8
83437: PPUSH
83438: LD_VAR 0 9
83442: PPUSH
83443: LD_VAR 0 4
83447: PPUSH
83448: LD_VAR 0 5
83452: PPUSH
83453: CALL 83495 0 6
83457: GO 83490
83459: LD_INT 304
83461: DOUBLE
83462: EQUAL
83463: IFTRUE 83467
83465: GO 83489
83467: POP
// hHackTeleport ( unit , x , y ) ; end ;
83468: LD_VAR 0 2
83472: PPUSH
83473: LD_VAR 0 4
83477: PPUSH
83478: LD_VAR 0 5
83482: PPUSH
83483: CALL 85262 0 3
83487: GO 83490
83489: POP
// end ;
83490: LD_VAR 0 12
83494: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83495: LD_INT 0
83497: PPUSH
83498: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83499: LD_VAR 0 1
83503: PUSH
83504: LD_INT 1
83506: LESS
83507: PUSH
83508: LD_VAR 0 1
83512: PUSH
83513: LD_INT 3
83515: GREATER
83516: OR
83517: PUSH
83518: LD_VAR 0 5
83522: PPUSH
83523: LD_VAR 0 6
83527: PPUSH
83528: CALL_OW 428
83532: OR
83533: IFFALSE 83537
// exit ;
83535: GO 84265
// uc_side := your_side ;
83537: LD_ADDR_OWVAR 20
83541: PUSH
83542: LD_OWVAR 2
83546: ST_TO_ADDR
// uc_nation := nation ;
83547: LD_ADDR_OWVAR 21
83551: PUSH
83552: LD_VAR 0 1
83556: ST_TO_ADDR
// bc_level = 1 ;
83557: LD_ADDR_OWVAR 43
83561: PUSH
83562: LD_INT 1
83564: ST_TO_ADDR
// case btype of 1 :
83565: LD_VAR 0 2
83569: PUSH
83570: LD_INT 1
83572: DOUBLE
83573: EQUAL
83574: IFTRUE 83578
83576: GO 83589
83578: POP
// bc_type := b_depot ; 2 :
83579: LD_ADDR_OWVAR 42
83583: PUSH
83584: LD_INT 0
83586: ST_TO_ADDR
83587: GO 84209
83589: LD_INT 2
83591: DOUBLE
83592: EQUAL
83593: IFTRUE 83597
83595: GO 83608
83597: POP
// bc_type := b_warehouse ; 3 :
83598: LD_ADDR_OWVAR 42
83602: PUSH
83603: LD_INT 1
83605: ST_TO_ADDR
83606: GO 84209
83608: LD_INT 3
83610: DOUBLE
83611: EQUAL
83612: IFTRUE 83616
83614: GO 83627
83616: POP
// bc_type := b_lab ; 4 .. 9 :
83617: LD_ADDR_OWVAR 42
83621: PUSH
83622: LD_INT 6
83624: ST_TO_ADDR
83625: GO 84209
83627: LD_INT 4
83629: DOUBLE
83630: GREATEREQUAL
83631: IFFALSE 83639
83633: LD_INT 9
83635: DOUBLE
83636: LESSEQUAL
83637: IFTRUE 83641
83639: GO 83701
83641: POP
// begin bc_type := b_lab_half ;
83642: LD_ADDR_OWVAR 42
83646: PUSH
83647: LD_INT 7
83649: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83650: LD_ADDR_OWVAR 44
83654: PUSH
83655: LD_INT 10
83657: PUSH
83658: LD_INT 11
83660: PUSH
83661: LD_INT 12
83663: PUSH
83664: LD_INT 15
83666: PUSH
83667: LD_INT 14
83669: PUSH
83670: LD_INT 13
83672: PUSH
83673: EMPTY
83674: LIST
83675: LIST
83676: LIST
83677: LIST
83678: LIST
83679: LIST
83680: PUSH
83681: LD_VAR 0 2
83685: PUSH
83686: LD_INT 3
83688: MINUS
83689: ARRAY
83690: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
83691: LD_ADDR_OWVAR 45
83695: PUSH
83696: LD_INT 9
83698: ST_TO_ADDR
// end ; 10 .. 13 :
83699: GO 84209
83701: LD_INT 10
83703: DOUBLE
83704: GREATEREQUAL
83705: IFFALSE 83713
83707: LD_INT 13
83709: DOUBLE
83710: LESSEQUAL
83711: IFTRUE 83715
83713: GO 83792
83715: POP
// begin bc_type := b_lab_full ;
83716: LD_ADDR_OWVAR 42
83720: PUSH
83721: LD_INT 8
83723: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83724: LD_ADDR_OWVAR 44
83728: PUSH
83729: LD_INT 10
83731: PUSH
83732: LD_INT 12
83734: PUSH
83735: LD_INT 14
83737: PUSH
83738: LD_INT 13
83740: PUSH
83741: EMPTY
83742: LIST
83743: LIST
83744: LIST
83745: LIST
83746: PUSH
83747: LD_VAR 0 2
83751: PUSH
83752: LD_INT 9
83754: MINUS
83755: ARRAY
83756: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83757: LD_ADDR_OWVAR 45
83761: PUSH
83762: LD_INT 11
83764: PUSH
83765: LD_INT 15
83767: PUSH
83768: LD_INT 12
83770: PUSH
83771: LD_INT 15
83773: PUSH
83774: EMPTY
83775: LIST
83776: LIST
83777: LIST
83778: LIST
83779: PUSH
83780: LD_VAR 0 2
83784: PUSH
83785: LD_INT 9
83787: MINUS
83788: ARRAY
83789: ST_TO_ADDR
// end ; 14 :
83790: GO 84209
83792: LD_INT 14
83794: DOUBLE
83795: EQUAL
83796: IFTRUE 83800
83798: GO 83811
83800: POP
// bc_type := b_workshop ; 15 :
83801: LD_ADDR_OWVAR 42
83805: PUSH
83806: LD_INT 2
83808: ST_TO_ADDR
83809: GO 84209
83811: LD_INT 15
83813: DOUBLE
83814: EQUAL
83815: IFTRUE 83819
83817: GO 83830
83819: POP
// bc_type := b_factory ; 16 :
83820: LD_ADDR_OWVAR 42
83824: PUSH
83825: LD_INT 3
83827: ST_TO_ADDR
83828: GO 84209
83830: LD_INT 16
83832: DOUBLE
83833: EQUAL
83834: IFTRUE 83838
83836: GO 83849
83838: POP
// bc_type := b_ext_gun ; 17 :
83839: LD_ADDR_OWVAR 42
83843: PUSH
83844: LD_INT 17
83846: ST_TO_ADDR
83847: GO 84209
83849: LD_INT 17
83851: DOUBLE
83852: EQUAL
83853: IFTRUE 83857
83855: GO 83885
83857: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83858: LD_ADDR_OWVAR 42
83862: PUSH
83863: LD_INT 19
83865: PUSH
83866: LD_INT 23
83868: PUSH
83869: LD_INT 19
83871: PUSH
83872: EMPTY
83873: LIST
83874: LIST
83875: LIST
83876: PUSH
83877: LD_VAR 0 1
83881: ARRAY
83882: ST_TO_ADDR
83883: GO 84209
83885: LD_INT 18
83887: DOUBLE
83888: EQUAL
83889: IFTRUE 83893
83891: GO 83904
83893: POP
// bc_type := b_ext_radar ; 19 :
83894: LD_ADDR_OWVAR 42
83898: PUSH
83899: LD_INT 20
83901: ST_TO_ADDR
83902: GO 84209
83904: LD_INT 19
83906: DOUBLE
83907: EQUAL
83908: IFTRUE 83912
83910: GO 83923
83912: POP
// bc_type := b_ext_radio ; 20 :
83913: LD_ADDR_OWVAR 42
83917: PUSH
83918: LD_INT 22
83920: ST_TO_ADDR
83921: GO 84209
83923: LD_INT 20
83925: DOUBLE
83926: EQUAL
83927: IFTRUE 83931
83929: GO 83942
83931: POP
// bc_type := b_ext_siberium ; 21 :
83932: LD_ADDR_OWVAR 42
83936: PUSH
83937: LD_INT 21
83939: ST_TO_ADDR
83940: GO 84209
83942: LD_INT 21
83944: DOUBLE
83945: EQUAL
83946: IFTRUE 83950
83948: GO 83961
83950: POP
// bc_type := b_ext_computer ; 22 :
83951: LD_ADDR_OWVAR 42
83955: PUSH
83956: LD_INT 24
83958: ST_TO_ADDR
83959: GO 84209
83961: LD_INT 22
83963: DOUBLE
83964: EQUAL
83965: IFTRUE 83969
83967: GO 83980
83969: POP
// bc_type := b_ext_track ; 23 :
83970: LD_ADDR_OWVAR 42
83974: PUSH
83975: LD_INT 16
83977: ST_TO_ADDR
83978: GO 84209
83980: LD_INT 23
83982: DOUBLE
83983: EQUAL
83984: IFTRUE 83988
83986: GO 83999
83988: POP
// bc_type := b_ext_laser ; 24 :
83989: LD_ADDR_OWVAR 42
83993: PUSH
83994: LD_INT 25
83996: ST_TO_ADDR
83997: GO 84209
83999: LD_INT 24
84001: DOUBLE
84002: EQUAL
84003: IFTRUE 84007
84005: GO 84018
84007: POP
// bc_type := b_control_tower ; 25 :
84008: LD_ADDR_OWVAR 42
84012: PUSH
84013: LD_INT 36
84015: ST_TO_ADDR
84016: GO 84209
84018: LD_INT 25
84020: DOUBLE
84021: EQUAL
84022: IFTRUE 84026
84024: GO 84037
84026: POP
// bc_type := b_breastwork ; 26 :
84027: LD_ADDR_OWVAR 42
84031: PUSH
84032: LD_INT 31
84034: ST_TO_ADDR
84035: GO 84209
84037: LD_INT 26
84039: DOUBLE
84040: EQUAL
84041: IFTRUE 84045
84043: GO 84056
84045: POP
// bc_type := b_bunker ; 27 :
84046: LD_ADDR_OWVAR 42
84050: PUSH
84051: LD_INT 32
84053: ST_TO_ADDR
84054: GO 84209
84056: LD_INT 27
84058: DOUBLE
84059: EQUAL
84060: IFTRUE 84064
84062: GO 84075
84064: POP
// bc_type := b_turret ; 28 :
84065: LD_ADDR_OWVAR 42
84069: PUSH
84070: LD_INT 33
84072: ST_TO_ADDR
84073: GO 84209
84075: LD_INT 28
84077: DOUBLE
84078: EQUAL
84079: IFTRUE 84083
84081: GO 84094
84083: POP
// bc_type := b_armoury ; 29 :
84084: LD_ADDR_OWVAR 42
84088: PUSH
84089: LD_INT 4
84091: ST_TO_ADDR
84092: GO 84209
84094: LD_INT 29
84096: DOUBLE
84097: EQUAL
84098: IFTRUE 84102
84100: GO 84113
84102: POP
// bc_type := b_barracks ; 30 :
84103: LD_ADDR_OWVAR 42
84107: PUSH
84108: LD_INT 5
84110: ST_TO_ADDR
84111: GO 84209
84113: LD_INT 30
84115: DOUBLE
84116: EQUAL
84117: IFTRUE 84121
84119: GO 84132
84121: POP
// bc_type := b_solar_power ; 31 :
84122: LD_ADDR_OWVAR 42
84126: PUSH
84127: LD_INT 27
84129: ST_TO_ADDR
84130: GO 84209
84132: LD_INT 31
84134: DOUBLE
84135: EQUAL
84136: IFTRUE 84140
84138: GO 84151
84140: POP
// bc_type := b_oil_power ; 32 :
84141: LD_ADDR_OWVAR 42
84145: PUSH
84146: LD_INT 26
84148: ST_TO_ADDR
84149: GO 84209
84151: LD_INT 32
84153: DOUBLE
84154: EQUAL
84155: IFTRUE 84159
84157: GO 84170
84159: POP
// bc_type := b_siberite_power ; 33 :
84160: LD_ADDR_OWVAR 42
84164: PUSH
84165: LD_INT 28
84167: ST_TO_ADDR
84168: GO 84209
84170: LD_INT 33
84172: DOUBLE
84173: EQUAL
84174: IFTRUE 84178
84176: GO 84189
84178: POP
// bc_type := b_oil_mine ; 34 :
84179: LD_ADDR_OWVAR 42
84183: PUSH
84184: LD_INT 29
84186: ST_TO_ADDR
84187: GO 84209
84189: LD_INT 34
84191: DOUBLE
84192: EQUAL
84193: IFTRUE 84197
84195: GO 84208
84197: POP
// bc_type := b_siberite_mine ; end ;
84198: LD_ADDR_OWVAR 42
84202: PUSH
84203: LD_INT 30
84205: ST_TO_ADDR
84206: GO 84209
84208: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84209: LD_ADDR_VAR 0 8
84213: PUSH
84214: LD_VAR 0 5
84218: PPUSH
84219: LD_VAR 0 6
84223: PPUSH
84224: LD_VAR 0 3
84228: PPUSH
84229: CALL_OW 47
84233: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84234: LD_OWVAR 42
84238: PUSH
84239: LD_INT 32
84241: PUSH
84242: LD_INT 33
84244: PUSH
84245: EMPTY
84246: LIST
84247: LIST
84248: IN
84249: IFFALSE 84265
// PlaceWeaponTurret ( b , weapon ) ;
84251: LD_VAR 0 8
84255: PPUSH
84256: LD_VAR 0 4
84260: PPUSH
84261: CALL_OW 431
// end ;
84265: LD_VAR 0 7
84269: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84270: LD_INT 0
84272: PPUSH
84273: PPUSH
84274: PPUSH
84275: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84276: LD_ADDR_VAR 0 4
84280: PUSH
84281: LD_INT 22
84283: PUSH
84284: LD_OWVAR 2
84288: PUSH
84289: EMPTY
84290: LIST
84291: LIST
84292: PUSH
84293: LD_INT 2
84295: PUSH
84296: LD_INT 30
84298: PUSH
84299: LD_INT 0
84301: PUSH
84302: EMPTY
84303: LIST
84304: LIST
84305: PUSH
84306: LD_INT 30
84308: PUSH
84309: LD_INT 1
84311: PUSH
84312: EMPTY
84313: LIST
84314: LIST
84315: PUSH
84316: EMPTY
84317: LIST
84318: LIST
84319: LIST
84320: PUSH
84321: EMPTY
84322: LIST
84323: LIST
84324: PPUSH
84325: CALL_OW 69
84329: ST_TO_ADDR
// if not tmp then
84330: LD_VAR 0 4
84334: NOT
84335: IFFALSE 84339
// exit ;
84337: GO 84398
// for i in tmp do
84339: LD_ADDR_VAR 0 2
84343: PUSH
84344: LD_VAR 0 4
84348: PUSH
84349: FOR_IN
84350: IFFALSE 84396
// for j = 1 to 3 do
84352: LD_ADDR_VAR 0 3
84356: PUSH
84357: DOUBLE
84358: LD_INT 1
84360: DEC
84361: ST_TO_ADDR
84362: LD_INT 3
84364: PUSH
84365: FOR_TO
84366: IFFALSE 84392
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84368: LD_VAR 0 2
84372: PPUSH
84373: CALL_OW 274
84377: PPUSH
84378: LD_VAR 0 3
84382: PPUSH
84383: LD_INT 99999
84385: PPUSH
84386: CALL_OW 277
84390: GO 84365
84392: POP
84393: POP
84394: GO 84349
84396: POP
84397: POP
// end ;
84398: LD_VAR 0 1
84402: RET
// export function hHackSetLevel10 ; var i , j ; begin
84403: LD_INT 0
84405: PPUSH
84406: PPUSH
84407: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84408: LD_ADDR_VAR 0 2
84412: PUSH
84413: LD_INT 21
84415: PUSH
84416: LD_INT 1
84418: PUSH
84419: EMPTY
84420: LIST
84421: LIST
84422: PPUSH
84423: CALL_OW 69
84427: PUSH
84428: FOR_IN
84429: IFFALSE 84481
// if IsSelected ( i ) then
84431: LD_VAR 0 2
84435: PPUSH
84436: CALL_OW 306
84440: IFFALSE 84479
// begin for j := 1 to 4 do
84442: LD_ADDR_VAR 0 3
84446: PUSH
84447: DOUBLE
84448: LD_INT 1
84450: DEC
84451: ST_TO_ADDR
84452: LD_INT 4
84454: PUSH
84455: FOR_TO
84456: IFFALSE 84477
// SetSkill ( i , j , 10 ) ;
84458: LD_VAR 0 2
84462: PPUSH
84463: LD_VAR 0 3
84467: PPUSH
84468: LD_INT 10
84470: PPUSH
84471: CALL_OW 237
84475: GO 84455
84477: POP
84478: POP
// end ;
84479: GO 84428
84481: POP
84482: POP
// end ;
84483: LD_VAR 0 1
84487: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84488: LD_INT 0
84490: PPUSH
84491: PPUSH
84492: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84493: LD_ADDR_VAR 0 2
84497: PUSH
84498: LD_INT 22
84500: PUSH
84501: LD_OWVAR 2
84505: PUSH
84506: EMPTY
84507: LIST
84508: LIST
84509: PUSH
84510: LD_INT 21
84512: PUSH
84513: LD_INT 1
84515: PUSH
84516: EMPTY
84517: LIST
84518: LIST
84519: PUSH
84520: EMPTY
84521: LIST
84522: LIST
84523: PPUSH
84524: CALL_OW 69
84528: PUSH
84529: FOR_IN
84530: IFFALSE 84571
// begin for j := 1 to 4 do
84532: LD_ADDR_VAR 0 3
84536: PUSH
84537: DOUBLE
84538: LD_INT 1
84540: DEC
84541: ST_TO_ADDR
84542: LD_INT 4
84544: PUSH
84545: FOR_TO
84546: IFFALSE 84567
// SetSkill ( i , j , 10 ) ;
84548: LD_VAR 0 2
84552: PPUSH
84553: LD_VAR 0 3
84557: PPUSH
84558: LD_INT 10
84560: PPUSH
84561: CALL_OW 237
84565: GO 84545
84567: POP
84568: POP
// end ;
84569: GO 84529
84571: POP
84572: POP
// end ;
84573: LD_VAR 0 1
84577: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84578: LD_INT 0
84580: PPUSH
// uc_side := your_side ;
84581: LD_ADDR_OWVAR 20
84585: PUSH
84586: LD_OWVAR 2
84590: ST_TO_ADDR
// uc_nation := nation ;
84591: LD_ADDR_OWVAR 21
84595: PUSH
84596: LD_VAR 0 1
84600: ST_TO_ADDR
// InitHc ;
84601: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84605: LD_INT 0
84607: PPUSH
84608: LD_VAR 0 2
84612: PPUSH
84613: LD_VAR 0 3
84617: PPUSH
84618: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84622: LD_VAR 0 4
84626: PPUSH
84627: LD_VAR 0 5
84631: PPUSH
84632: CALL_OW 428
84636: PUSH
84637: LD_INT 0
84639: EQUAL
84640: IFFALSE 84664
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84642: CALL_OW 44
84646: PPUSH
84647: LD_VAR 0 4
84651: PPUSH
84652: LD_VAR 0 5
84656: PPUSH
84657: LD_INT 1
84659: PPUSH
84660: CALL_OW 48
// end ;
84664: LD_VAR 0 6
84668: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84669: LD_INT 0
84671: PPUSH
84672: PPUSH
// uc_side := your_side ;
84673: LD_ADDR_OWVAR 20
84677: PUSH
84678: LD_OWVAR 2
84682: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84683: LD_VAR 0 1
84687: PUSH
84688: LD_INT 1
84690: PUSH
84691: LD_INT 2
84693: PUSH
84694: LD_INT 3
84696: PUSH
84697: LD_INT 4
84699: PUSH
84700: LD_INT 5
84702: PUSH
84703: EMPTY
84704: LIST
84705: LIST
84706: LIST
84707: LIST
84708: LIST
84709: IN
84710: IFFALSE 84722
// uc_nation := nation_american else
84712: LD_ADDR_OWVAR 21
84716: PUSH
84717: LD_INT 1
84719: ST_TO_ADDR
84720: GO 84765
// if chassis in [ 11 , 12 , 13 , 14 ] then
84722: LD_VAR 0 1
84726: PUSH
84727: LD_INT 11
84729: PUSH
84730: LD_INT 12
84732: PUSH
84733: LD_INT 13
84735: PUSH
84736: LD_INT 14
84738: PUSH
84739: EMPTY
84740: LIST
84741: LIST
84742: LIST
84743: LIST
84744: IN
84745: IFFALSE 84757
// uc_nation := nation_arabian else
84747: LD_ADDR_OWVAR 21
84751: PUSH
84752: LD_INT 2
84754: ST_TO_ADDR
84755: GO 84765
// uc_nation := nation_russian ;
84757: LD_ADDR_OWVAR 21
84761: PUSH
84762: LD_INT 3
84764: ST_TO_ADDR
// vc_chassis := chassis ;
84765: LD_ADDR_OWVAR 37
84769: PUSH
84770: LD_VAR 0 1
84774: ST_TO_ADDR
// vc_engine := engine ;
84775: LD_ADDR_OWVAR 39
84779: PUSH
84780: LD_VAR 0 2
84784: ST_TO_ADDR
// vc_control := control ;
84785: LD_ADDR_OWVAR 38
84789: PUSH
84790: LD_VAR 0 3
84794: ST_TO_ADDR
// vc_weapon := weapon ;
84795: LD_ADDR_OWVAR 40
84799: PUSH
84800: LD_VAR 0 4
84804: ST_TO_ADDR
// un := CreateVehicle ;
84805: LD_ADDR_VAR 0 8
84809: PUSH
84810: CALL_OW 45
84814: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84815: LD_VAR 0 8
84819: PPUSH
84820: LD_INT 0
84822: PPUSH
84823: LD_INT 5
84825: PPUSH
84826: CALL_OW 12
84830: PPUSH
84831: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84835: LD_VAR 0 8
84839: PPUSH
84840: LD_VAR 0 5
84844: PPUSH
84845: LD_VAR 0 6
84849: PPUSH
84850: LD_INT 1
84852: PPUSH
84853: CALL_OW 48
// end ;
84857: LD_VAR 0 7
84861: RET
// export hInvincible ; every 1 do
84862: GO 84864
84864: DISABLE
// hInvincible := [ ] ;
84865: LD_ADDR_EXP 131
84869: PUSH
84870: EMPTY
84871: ST_TO_ADDR
84872: END
// every 10 do var i ;
84873: GO 84875
84875: DISABLE
84876: LD_INT 0
84878: PPUSH
// begin enable ;
84879: ENABLE
// if not hInvincible then
84880: LD_EXP 131
84884: NOT
84885: IFFALSE 84889
// exit ;
84887: GO 84933
// for i in hInvincible do
84889: LD_ADDR_VAR 0 1
84893: PUSH
84894: LD_EXP 131
84898: PUSH
84899: FOR_IN
84900: IFFALSE 84931
// if GetLives ( i ) < 1000 then
84902: LD_VAR 0 1
84906: PPUSH
84907: CALL_OW 256
84911: PUSH
84912: LD_INT 1000
84914: LESS
84915: IFFALSE 84929
// SetLives ( i , 1000 ) ;
84917: LD_VAR 0 1
84921: PPUSH
84922: LD_INT 1000
84924: PPUSH
84925: CALL_OW 234
84929: GO 84899
84931: POP
84932: POP
// end ;
84933: PPOPN 1
84935: END
// export function hHackInvincible ; var i ; begin
84936: LD_INT 0
84938: PPUSH
84939: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84940: LD_ADDR_VAR 0 2
84944: PUSH
84945: LD_INT 2
84947: PUSH
84948: LD_INT 21
84950: PUSH
84951: LD_INT 1
84953: PUSH
84954: EMPTY
84955: LIST
84956: LIST
84957: PUSH
84958: LD_INT 21
84960: PUSH
84961: LD_INT 2
84963: PUSH
84964: EMPTY
84965: LIST
84966: LIST
84967: PUSH
84968: EMPTY
84969: LIST
84970: LIST
84971: LIST
84972: PPUSH
84973: CALL_OW 69
84977: PUSH
84978: FOR_IN
84979: IFFALSE 85040
// if IsSelected ( i ) then
84981: LD_VAR 0 2
84985: PPUSH
84986: CALL_OW 306
84990: IFFALSE 85038
// begin if i in hInvincible then
84992: LD_VAR 0 2
84996: PUSH
84997: LD_EXP 131
85001: IN
85002: IFFALSE 85022
// hInvincible := hInvincible diff i else
85004: LD_ADDR_EXP 131
85008: PUSH
85009: LD_EXP 131
85013: PUSH
85014: LD_VAR 0 2
85018: DIFF
85019: ST_TO_ADDR
85020: GO 85038
// hInvincible := hInvincible union i ;
85022: LD_ADDR_EXP 131
85026: PUSH
85027: LD_EXP 131
85031: PUSH
85032: LD_VAR 0 2
85036: UNION
85037: ST_TO_ADDR
// end ;
85038: GO 84978
85040: POP
85041: POP
// end ;
85042: LD_VAR 0 1
85046: RET
// export function hHackInvisible ; var i , j ; begin
85047: LD_INT 0
85049: PPUSH
85050: PPUSH
85051: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85052: LD_ADDR_VAR 0 2
85056: PUSH
85057: LD_INT 21
85059: PUSH
85060: LD_INT 1
85062: PUSH
85063: EMPTY
85064: LIST
85065: LIST
85066: PPUSH
85067: CALL_OW 69
85071: PUSH
85072: FOR_IN
85073: IFFALSE 85097
// if IsSelected ( i ) then
85075: LD_VAR 0 2
85079: PPUSH
85080: CALL_OW 306
85084: IFFALSE 85095
// ComForceInvisible ( i ) ;
85086: LD_VAR 0 2
85090: PPUSH
85091: CALL_OW 496
85095: GO 85072
85097: POP
85098: POP
// end ;
85099: LD_VAR 0 1
85103: RET
// export function hHackChangeYourSide ; begin
85104: LD_INT 0
85106: PPUSH
// if your_side = 8 then
85107: LD_OWVAR 2
85111: PUSH
85112: LD_INT 8
85114: EQUAL
85115: IFFALSE 85127
// your_side := 0 else
85117: LD_ADDR_OWVAR 2
85121: PUSH
85122: LD_INT 0
85124: ST_TO_ADDR
85125: GO 85141
// your_side := your_side + 1 ;
85127: LD_ADDR_OWVAR 2
85131: PUSH
85132: LD_OWVAR 2
85136: PUSH
85137: LD_INT 1
85139: PLUS
85140: ST_TO_ADDR
// end ;
85141: LD_VAR 0 1
85145: RET
// export function hHackChangeUnitSide ; var i , j ; begin
85146: LD_INT 0
85148: PPUSH
85149: PPUSH
85150: PPUSH
// for i in all_units do
85151: LD_ADDR_VAR 0 2
85155: PUSH
85156: LD_OWVAR 3
85160: PUSH
85161: FOR_IN
85162: IFFALSE 85240
// if IsSelected ( i ) then
85164: LD_VAR 0 2
85168: PPUSH
85169: CALL_OW 306
85173: IFFALSE 85238
// begin j := GetSide ( i ) ;
85175: LD_ADDR_VAR 0 3
85179: PUSH
85180: LD_VAR 0 2
85184: PPUSH
85185: CALL_OW 255
85189: ST_TO_ADDR
// if j = 8 then
85190: LD_VAR 0 3
85194: PUSH
85195: LD_INT 8
85197: EQUAL
85198: IFFALSE 85210
// j := 0 else
85200: LD_ADDR_VAR 0 3
85204: PUSH
85205: LD_INT 0
85207: ST_TO_ADDR
85208: GO 85224
// j := j + 1 ;
85210: LD_ADDR_VAR 0 3
85214: PUSH
85215: LD_VAR 0 3
85219: PUSH
85220: LD_INT 1
85222: PLUS
85223: ST_TO_ADDR
// SetSide ( i , j ) ;
85224: LD_VAR 0 2
85228: PPUSH
85229: LD_VAR 0 3
85233: PPUSH
85234: CALL_OW 235
// end ;
85238: GO 85161
85240: POP
85241: POP
// end ;
85242: LD_VAR 0 1
85246: RET
// export function hHackFog ; begin
85247: LD_INT 0
85249: PPUSH
// FogOff ( true ) ;
85250: LD_INT 1
85252: PPUSH
85253: CALL_OW 344
// end ;
85257: LD_VAR 0 1
85261: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85262: LD_INT 0
85264: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85265: LD_VAR 0 1
85269: PPUSH
85270: LD_VAR 0 2
85274: PPUSH
85275: LD_VAR 0 3
85279: PPUSH
85280: LD_INT 1
85282: PPUSH
85283: LD_INT 1
85285: PPUSH
85286: CALL_OW 483
// CenterOnXY ( x , y ) ;
85290: LD_VAR 0 2
85294: PPUSH
85295: LD_VAR 0 3
85299: PPUSH
85300: CALL_OW 84
// end ;
85304: LD_VAR 0 4
85308: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85309: LD_INT 0
85311: PPUSH
85312: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85313: LD_VAR 0 1
85317: NOT
85318: PUSH
85319: LD_VAR 0 2
85323: PPUSH
85324: LD_VAR 0 3
85328: PPUSH
85329: CALL_OW 488
85333: NOT
85334: OR
85335: PUSH
85336: LD_VAR 0 1
85340: PPUSH
85341: CALL_OW 266
85345: PUSH
85346: LD_INT 3
85348: NONEQUAL
85349: PUSH
85350: LD_VAR 0 1
85354: PPUSH
85355: CALL_OW 247
85359: PUSH
85360: LD_INT 1
85362: EQUAL
85363: NOT
85364: AND
85365: OR
85366: IFFALSE 85370
// exit ;
85368: GO 85519
// if GetType ( factory ) = unit_human then
85370: LD_VAR 0 1
85374: PPUSH
85375: CALL_OW 247
85379: PUSH
85380: LD_INT 1
85382: EQUAL
85383: IFFALSE 85400
// factory := IsInUnit ( factory ) ;
85385: LD_ADDR_VAR 0 1
85389: PUSH
85390: LD_VAR 0 1
85394: PPUSH
85395: CALL_OW 310
85399: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85400: LD_VAR 0 1
85404: PPUSH
85405: CALL_OW 266
85409: PUSH
85410: LD_INT 3
85412: NONEQUAL
85413: IFFALSE 85417
// exit ;
85415: GO 85519
// if HexInfo ( x , y ) = factory then
85417: LD_VAR 0 2
85421: PPUSH
85422: LD_VAR 0 3
85426: PPUSH
85427: CALL_OW 428
85431: PUSH
85432: LD_VAR 0 1
85436: EQUAL
85437: IFFALSE 85464
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85439: LD_ADDR_EXP 132
85443: PUSH
85444: LD_EXP 132
85448: PPUSH
85449: LD_VAR 0 1
85453: PPUSH
85454: LD_INT 0
85456: PPUSH
85457: CALL_OW 1
85461: ST_TO_ADDR
85462: GO 85515
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
85464: LD_ADDR_EXP 132
85468: PUSH
85469: LD_EXP 132
85473: PPUSH
85474: LD_VAR 0 1
85478: PPUSH
85479: LD_VAR 0 1
85483: PPUSH
85484: CALL_OW 255
85488: PUSH
85489: LD_VAR 0 1
85493: PUSH
85494: LD_VAR 0 2
85498: PUSH
85499: LD_VAR 0 3
85503: PUSH
85504: EMPTY
85505: LIST
85506: LIST
85507: LIST
85508: LIST
85509: PPUSH
85510: CALL_OW 1
85514: ST_TO_ADDR
// UpdateFactoryWaypoints ;
85515: CALL 85524 0 0
// end ;
85519: LD_VAR 0 4
85523: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85524: LD_INT 0
85526: PPUSH
85527: PPUSH
85528: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85529: LD_STRING resetFactoryWaypoint();
85531: PPUSH
85532: CALL_OW 559
// if factoryWaypoints then
85536: LD_EXP 132
85540: IFFALSE 85666
// begin list := PrepareArray ( factoryWaypoints ) ;
85542: LD_ADDR_VAR 0 3
85546: PUSH
85547: LD_EXP 132
85551: PPUSH
85552: CALL 70354 0 1
85556: ST_TO_ADDR
// for i := 1 to list do
85557: LD_ADDR_VAR 0 2
85561: PUSH
85562: DOUBLE
85563: LD_INT 1
85565: DEC
85566: ST_TO_ADDR
85567: LD_VAR 0 3
85571: PUSH
85572: FOR_TO
85573: IFFALSE 85664
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85575: LD_STRING setFactoryWaypointXY(
85577: PUSH
85578: LD_VAR 0 3
85582: PUSH
85583: LD_VAR 0 2
85587: ARRAY
85588: PUSH
85589: LD_INT 1
85591: ARRAY
85592: STR
85593: PUSH
85594: LD_STRING ,
85596: STR
85597: PUSH
85598: LD_VAR 0 3
85602: PUSH
85603: LD_VAR 0 2
85607: ARRAY
85608: PUSH
85609: LD_INT 2
85611: ARRAY
85612: STR
85613: PUSH
85614: LD_STRING ,
85616: STR
85617: PUSH
85618: LD_VAR 0 3
85622: PUSH
85623: LD_VAR 0 2
85627: ARRAY
85628: PUSH
85629: LD_INT 3
85631: ARRAY
85632: STR
85633: PUSH
85634: LD_STRING ,
85636: STR
85637: PUSH
85638: LD_VAR 0 3
85642: PUSH
85643: LD_VAR 0 2
85647: ARRAY
85648: PUSH
85649: LD_INT 4
85651: ARRAY
85652: STR
85653: PUSH
85654: LD_STRING )
85656: STR
85657: PPUSH
85658: CALL_OW 559
85662: GO 85572
85664: POP
85665: POP
// end ; end ;
85666: LD_VAR 0 1
85670: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85671: LD_INT 0
85673: PPUSH
// if HexInfo ( x , y ) = warehouse then
85674: LD_VAR 0 2
85678: PPUSH
85679: LD_VAR 0 3
85683: PPUSH
85684: CALL_OW 428
85688: PUSH
85689: LD_VAR 0 1
85693: EQUAL
85694: IFFALSE 85721
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85696: LD_ADDR_EXP 133
85700: PUSH
85701: LD_EXP 133
85705: PPUSH
85706: LD_VAR 0 1
85710: PPUSH
85711: LD_INT 0
85713: PPUSH
85714: CALL_OW 1
85718: ST_TO_ADDR
85719: GO 85772
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85721: LD_ADDR_EXP 133
85725: PUSH
85726: LD_EXP 133
85730: PPUSH
85731: LD_VAR 0 1
85735: PPUSH
85736: LD_VAR 0 1
85740: PPUSH
85741: CALL_OW 255
85745: PUSH
85746: LD_VAR 0 1
85750: PUSH
85751: LD_VAR 0 2
85755: PUSH
85756: LD_VAR 0 3
85760: PUSH
85761: EMPTY
85762: LIST
85763: LIST
85764: LIST
85765: LIST
85766: PPUSH
85767: CALL_OW 1
85771: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85772: CALL 85781 0 0
// end ;
85776: LD_VAR 0 4
85780: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85781: LD_INT 0
85783: PPUSH
85784: PPUSH
85785: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85786: LD_STRING resetWarehouseGatheringPoints();
85788: PPUSH
85789: CALL_OW 559
// if warehouseGatheringPoints then
85793: LD_EXP 133
85797: IFFALSE 85923
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85799: LD_ADDR_VAR 0 3
85803: PUSH
85804: LD_EXP 133
85808: PPUSH
85809: CALL 70354 0 1
85813: ST_TO_ADDR
// for i := 1 to list do
85814: LD_ADDR_VAR 0 2
85818: PUSH
85819: DOUBLE
85820: LD_INT 1
85822: DEC
85823: ST_TO_ADDR
85824: LD_VAR 0 3
85828: PUSH
85829: FOR_TO
85830: IFFALSE 85921
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85832: LD_STRING setWarehouseGatheringPointXY(
85834: PUSH
85835: LD_VAR 0 3
85839: PUSH
85840: LD_VAR 0 2
85844: ARRAY
85845: PUSH
85846: LD_INT 1
85848: ARRAY
85849: STR
85850: PUSH
85851: LD_STRING ,
85853: STR
85854: PUSH
85855: LD_VAR 0 3
85859: PUSH
85860: LD_VAR 0 2
85864: ARRAY
85865: PUSH
85866: LD_INT 2
85868: ARRAY
85869: STR
85870: PUSH
85871: LD_STRING ,
85873: STR
85874: PUSH
85875: LD_VAR 0 3
85879: PUSH
85880: LD_VAR 0 2
85884: ARRAY
85885: PUSH
85886: LD_INT 3
85888: ARRAY
85889: STR
85890: PUSH
85891: LD_STRING ,
85893: STR
85894: PUSH
85895: LD_VAR 0 3
85899: PUSH
85900: LD_VAR 0 2
85904: ARRAY
85905: PUSH
85906: LD_INT 4
85908: ARRAY
85909: STR
85910: PUSH
85911: LD_STRING )
85913: STR
85914: PPUSH
85915: CALL_OW 559
85919: GO 85829
85921: POP
85922: POP
// end ; end ;
85923: LD_VAR 0 1
85927: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85928: LD_EXP 133
85932: IFFALSE 86617
85934: GO 85936
85936: DISABLE
85937: LD_INT 0
85939: PPUSH
85940: PPUSH
85941: PPUSH
85942: PPUSH
85943: PPUSH
85944: PPUSH
85945: PPUSH
85946: PPUSH
85947: PPUSH
// begin enable ;
85948: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85949: LD_ADDR_VAR 0 3
85953: PUSH
85954: LD_EXP 133
85958: PPUSH
85959: CALL 70354 0 1
85963: ST_TO_ADDR
// if not list then
85964: LD_VAR 0 3
85968: NOT
85969: IFFALSE 85973
// exit ;
85971: GO 86617
// for i := 1 to list do
85973: LD_ADDR_VAR 0 1
85977: PUSH
85978: DOUBLE
85979: LD_INT 1
85981: DEC
85982: ST_TO_ADDR
85983: LD_VAR 0 3
85987: PUSH
85988: FOR_TO
85989: IFFALSE 86615
// begin depot := list [ i ] [ 2 ] ;
85991: LD_ADDR_VAR 0 8
85995: PUSH
85996: LD_VAR 0 3
86000: PUSH
86001: LD_VAR 0 1
86005: ARRAY
86006: PUSH
86007: LD_INT 2
86009: ARRAY
86010: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
86011: LD_ADDR_VAR 0 5
86015: PUSH
86016: LD_VAR 0 3
86020: PUSH
86021: LD_VAR 0 1
86025: ARRAY
86026: PUSH
86027: LD_INT 1
86029: ARRAY
86030: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
86031: LD_VAR 0 8
86035: PPUSH
86036: CALL_OW 301
86040: PUSH
86041: LD_VAR 0 5
86045: PUSH
86046: LD_VAR 0 8
86050: PPUSH
86051: CALL_OW 255
86055: NONEQUAL
86056: OR
86057: IFFALSE 86086
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
86059: LD_ADDR_EXP 133
86063: PUSH
86064: LD_EXP 133
86068: PPUSH
86069: LD_VAR 0 8
86073: PPUSH
86074: LD_INT 0
86076: PPUSH
86077: CALL_OW 1
86081: ST_TO_ADDR
// exit ;
86082: POP
86083: POP
86084: GO 86617
// end ; x := list [ i ] [ 3 ] ;
86086: LD_ADDR_VAR 0 6
86090: PUSH
86091: LD_VAR 0 3
86095: PUSH
86096: LD_VAR 0 1
86100: ARRAY
86101: PUSH
86102: LD_INT 3
86104: ARRAY
86105: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
86106: LD_ADDR_VAR 0 7
86110: PUSH
86111: LD_VAR 0 3
86115: PUSH
86116: LD_VAR 0 1
86120: ARRAY
86121: PUSH
86122: LD_INT 4
86124: ARRAY
86125: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
86126: LD_ADDR_VAR 0 9
86130: PUSH
86131: LD_VAR 0 6
86135: PPUSH
86136: LD_VAR 0 7
86140: PPUSH
86141: LD_INT 16
86143: PPUSH
86144: CALL 68942 0 3
86148: ST_TO_ADDR
// if not cratesNearbyPoint then
86149: LD_VAR 0 9
86153: NOT
86154: IFFALSE 86160
// exit ;
86156: POP
86157: POP
86158: GO 86617
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
86160: LD_ADDR_VAR 0 4
86164: PUSH
86165: LD_INT 22
86167: PUSH
86168: LD_VAR 0 5
86172: PUSH
86173: EMPTY
86174: LIST
86175: LIST
86176: PUSH
86177: LD_INT 3
86179: PUSH
86180: LD_INT 60
86182: PUSH
86183: EMPTY
86184: LIST
86185: PUSH
86186: EMPTY
86187: LIST
86188: LIST
86189: PUSH
86190: LD_INT 91
86192: PUSH
86193: LD_VAR 0 8
86197: PUSH
86198: LD_INT 6
86200: PUSH
86201: EMPTY
86202: LIST
86203: LIST
86204: LIST
86205: PUSH
86206: LD_INT 2
86208: PUSH
86209: LD_INT 25
86211: PUSH
86212: LD_INT 2
86214: PUSH
86215: EMPTY
86216: LIST
86217: LIST
86218: PUSH
86219: LD_INT 25
86221: PUSH
86222: LD_INT 16
86224: PUSH
86225: EMPTY
86226: LIST
86227: LIST
86228: PUSH
86229: EMPTY
86230: LIST
86231: LIST
86232: LIST
86233: PUSH
86234: EMPTY
86235: LIST
86236: LIST
86237: LIST
86238: LIST
86239: PPUSH
86240: CALL_OW 69
86244: PUSH
86245: LD_VAR 0 8
86249: PPUSH
86250: CALL_OW 313
86254: PPUSH
86255: LD_INT 3
86257: PUSH
86258: LD_INT 60
86260: PUSH
86261: EMPTY
86262: LIST
86263: PUSH
86264: EMPTY
86265: LIST
86266: LIST
86267: PUSH
86268: LD_INT 2
86270: PUSH
86271: LD_INT 25
86273: PUSH
86274: LD_INT 2
86276: PUSH
86277: EMPTY
86278: LIST
86279: LIST
86280: PUSH
86281: LD_INT 25
86283: PUSH
86284: LD_INT 16
86286: PUSH
86287: EMPTY
86288: LIST
86289: LIST
86290: PUSH
86291: EMPTY
86292: LIST
86293: LIST
86294: LIST
86295: PUSH
86296: EMPTY
86297: LIST
86298: LIST
86299: PPUSH
86300: CALL_OW 72
86304: UNION
86305: ST_TO_ADDR
// if tmp then
86306: LD_VAR 0 4
86310: IFFALSE 86390
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86312: LD_ADDR_VAR 0 4
86316: PUSH
86317: LD_VAR 0 4
86321: PPUSH
86322: LD_INT 3
86324: PPUSH
86325: CALL 66911 0 2
86329: ST_TO_ADDR
// for j in tmp do
86330: LD_ADDR_VAR 0 2
86334: PUSH
86335: LD_VAR 0 4
86339: PUSH
86340: FOR_IN
86341: IFFALSE 86384
// begin if IsInUnit ( j ) then
86343: LD_VAR 0 2
86347: PPUSH
86348: CALL_OW 310
86352: IFFALSE 86363
// ComExit ( j ) ;
86354: LD_VAR 0 2
86358: PPUSH
86359: CALL 66994 0 1
// AddComCollect ( j , x , y ) ;
86363: LD_VAR 0 2
86367: PPUSH
86368: LD_VAR 0 6
86372: PPUSH
86373: LD_VAR 0 7
86377: PPUSH
86378: CALL_OW 177
// end ;
86382: GO 86340
86384: POP
86385: POP
// exit ;
86386: POP
86387: POP
86388: GO 86617
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
86390: LD_ADDR_VAR 0 4
86394: PUSH
86395: LD_INT 22
86397: PUSH
86398: LD_VAR 0 5
86402: PUSH
86403: EMPTY
86404: LIST
86405: LIST
86406: PUSH
86407: LD_INT 91
86409: PUSH
86410: LD_VAR 0 8
86414: PUSH
86415: LD_INT 8
86417: PUSH
86418: EMPTY
86419: LIST
86420: LIST
86421: LIST
86422: PUSH
86423: LD_INT 2
86425: PUSH
86426: LD_INT 34
86428: PUSH
86429: LD_INT 12
86431: PUSH
86432: EMPTY
86433: LIST
86434: LIST
86435: PUSH
86436: LD_INT 34
86438: PUSH
86439: LD_INT 51
86441: PUSH
86442: EMPTY
86443: LIST
86444: LIST
86445: PUSH
86446: LD_INT 34
86448: PUSH
86449: LD_INT 32
86451: PUSH
86452: EMPTY
86453: LIST
86454: LIST
86455: PUSH
86456: LD_INT 34
86458: PUSH
86459: LD_INT 89
86461: PUSH
86462: EMPTY
86463: LIST
86464: LIST
86465: PUSH
86466: EMPTY
86467: LIST
86468: LIST
86469: LIST
86470: LIST
86471: LIST
86472: PUSH
86473: EMPTY
86474: LIST
86475: LIST
86476: LIST
86477: PPUSH
86478: CALL_OW 69
86482: ST_TO_ADDR
// if tmp then
86483: LD_VAR 0 4
86487: IFFALSE 86613
// begin for j in tmp do
86489: LD_ADDR_VAR 0 2
86493: PUSH
86494: LD_VAR 0 4
86498: PUSH
86499: FOR_IN
86500: IFFALSE 86611
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
86502: LD_VAR 0 2
86506: PPUSH
86507: CALL_OW 262
86511: PUSH
86512: LD_INT 3
86514: EQUAL
86515: PUSH
86516: LD_VAR 0 2
86520: PPUSH
86521: CALL_OW 261
86525: PUSH
86526: LD_INT 20
86528: GREATER
86529: OR
86530: PUSH
86531: LD_VAR 0 2
86535: PPUSH
86536: CALL_OW 314
86540: NOT
86541: AND
86542: PUSH
86543: LD_VAR 0 2
86547: PPUSH
86548: CALL_OW 263
86552: PUSH
86553: LD_INT 1
86555: NONEQUAL
86556: PUSH
86557: LD_VAR 0 2
86561: PPUSH
86562: CALL_OW 311
86566: OR
86567: AND
86568: IFFALSE 86609
// begin ComCollect ( j , x , y ) ;
86570: LD_VAR 0 2
86574: PPUSH
86575: LD_VAR 0 6
86579: PPUSH
86580: LD_VAR 0 7
86584: PPUSH
86585: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86589: LD_VAR 0 2
86593: PPUSH
86594: LD_VAR 0 8
86598: PPUSH
86599: CALL_OW 172
// exit ;
86603: POP
86604: POP
86605: POP
86606: POP
86607: GO 86617
// end ;
86609: GO 86499
86611: POP
86612: POP
// end ; end ;
86613: GO 85988
86615: POP
86616: POP
// end ; end_of_file
86617: PPOPN 9
86619: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86620: LD_VAR 0 1
86624: PUSH
86625: LD_INT 200
86627: DOUBLE
86628: GREATEREQUAL
86629: IFFALSE 86637
86631: LD_INT 299
86633: DOUBLE
86634: LESSEQUAL
86635: IFTRUE 86639
86637: GO 86671
86639: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86640: LD_VAR 0 1
86644: PPUSH
86645: LD_VAR 0 2
86649: PPUSH
86650: LD_VAR 0 3
86654: PPUSH
86655: LD_VAR 0 4
86659: PPUSH
86660: LD_VAR 0 5
86664: PPUSH
86665: CALL 87159 0 5
86669: GO 86748
86671: LD_INT 300
86673: DOUBLE
86674: GREATEREQUAL
86675: IFFALSE 86683
86677: LD_INT 399
86679: DOUBLE
86680: LESSEQUAL
86681: IFTRUE 86685
86683: GO 86747
86685: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86686: LD_VAR 0 1
86690: PPUSH
86691: LD_VAR 0 2
86695: PPUSH
86696: LD_VAR 0 3
86700: PPUSH
86701: LD_VAR 0 4
86705: PPUSH
86706: LD_VAR 0 5
86710: PPUSH
86711: LD_VAR 0 6
86715: PPUSH
86716: LD_VAR 0 7
86720: PPUSH
86721: LD_VAR 0 8
86725: PPUSH
86726: LD_VAR 0 9
86730: PPUSH
86731: LD_VAR 0 10
86735: PPUSH
86736: LD_VAR 0 11
86740: PPUSH
86741: CALL 83321 0 11
86745: GO 86748
86747: POP
// end ;
86748: PPOPN 11
86750: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86751: LD_VAR 0 1
86755: PPUSH
86756: LD_VAR 0 2
86760: PPUSH
86761: LD_VAR 0 3
86765: PPUSH
86766: LD_VAR 0 4
86770: PPUSH
86771: LD_VAR 0 5
86775: PPUSH
86776: CALL 86895 0 5
// end ; end_of_file
86780: PPOPN 5
86782: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86783: LD_INT 0
86785: PPUSH
86786: PPUSH
86787: PPUSH
86788: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86789: LD_VAR 0 1
86793: PPUSH
86794: CALL_OW 264
86798: PUSH
86799: LD_INT 91
86801: EQUAL
86802: IFFALSE 86874
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86804: LD_INT 68
86806: PPUSH
86807: LD_VAR 0 1
86811: PPUSH
86812: CALL_OW 255
86816: PPUSH
86817: CALL_OW 321
86821: PUSH
86822: LD_INT 2
86824: EQUAL
86825: IFFALSE 86837
// eff := 70 else
86827: LD_ADDR_VAR 0 4
86831: PUSH
86832: LD_INT 70
86834: ST_TO_ADDR
86835: GO 86845
// eff := 30 ;
86837: LD_ADDR_VAR 0 4
86841: PUSH
86842: LD_INT 30
86844: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86845: LD_VAR 0 1
86849: PPUSH
86850: CALL_OW 250
86854: PPUSH
86855: LD_VAR 0 1
86859: PPUSH
86860: CALL_OW 251
86864: PPUSH
86865: LD_VAR 0 4
86869: PPUSH
86870: CALL_OW 495
// end ; end ;
86874: LD_VAR 0 2
86878: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86879: LD_INT 0
86881: PPUSH
// end ;
86882: LD_VAR 0 4
86886: RET
// export function SOS_Command ( cmd ) ; begin
86887: LD_INT 0
86889: PPUSH
// end ;
86890: LD_VAR 0 2
86894: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86895: LD_INT 0
86897: PPUSH
// end ;
86898: LD_VAR 0 6
86902: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86903: LD_INT 0
86905: PPUSH
86906: PPUSH
// if not vehicle or not factory then
86907: LD_VAR 0 1
86911: NOT
86912: PUSH
86913: LD_VAR 0 2
86917: NOT
86918: OR
86919: IFFALSE 86923
// exit ;
86921: GO 87154
// if factoryWaypoints >= factory then
86923: LD_EXP 132
86927: PUSH
86928: LD_VAR 0 2
86932: GREATEREQUAL
86933: IFFALSE 87154
// if factoryWaypoints [ factory ] then
86935: LD_EXP 132
86939: PUSH
86940: LD_VAR 0 2
86944: ARRAY
86945: IFFALSE 87154
// begin if GetControl ( vehicle ) = control_manual then
86947: LD_VAR 0 1
86951: PPUSH
86952: CALL_OW 263
86956: PUSH
86957: LD_INT 1
86959: EQUAL
86960: IFFALSE 87041
// begin driver := IsDrivenBy ( vehicle ) ;
86962: LD_ADDR_VAR 0 4
86966: PUSH
86967: LD_VAR 0 1
86971: PPUSH
86972: CALL_OW 311
86976: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86977: LD_VAR 0 4
86981: PPUSH
86982: LD_EXP 132
86986: PUSH
86987: LD_VAR 0 2
86991: ARRAY
86992: PUSH
86993: LD_INT 3
86995: ARRAY
86996: PPUSH
86997: LD_EXP 132
87001: PUSH
87002: LD_VAR 0 2
87006: ARRAY
87007: PUSH
87008: LD_INT 4
87010: ARRAY
87011: PPUSH
87012: CALL_OW 171
// AddComExitVehicle ( driver ) ;
87016: LD_VAR 0 4
87020: PPUSH
87021: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
87025: LD_VAR 0 4
87029: PPUSH
87030: LD_VAR 0 2
87034: PPUSH
87035: CALL_OW 180
// end else
87039: GO 87154
// if GetControl ( vehicle ) = control_remote then
87041: LD_VAR 0 1
87045: PPUSH
87046: CALL_OW 263
87050: PUSH
87051: LD_INT 2
87053: EQUAL
87054: IFFALSE 87115
// begin wait ( 0 0$2 ) ;
87056: LD_INT 70
87058: PPUSH
87059: CALL_OW 67
// if Connect ( vehicle ) then
87063: LD_VAR 0 1
87067: PPUSH
87068: CALL 37202 0 1
87072: IFFALSE 87113
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87074: LD_VAR 0 1
87078: PPUSH
87079: LD_EXP 132
87083: PUSH
87084: LD_VAR 0 2
87088: ARRAY
87089: PUSH
87090: LD_INT 3
87092: ARRAY
87093: PPUSH
87094: LD_EXP 132
87098: PUSH
87099: LD_VAR 0 2
87103: ARRAY
87104: PUSH
87105: LD_INT 4
87107: ARRAY
87108: PPUSH
87109: CALL_OW 171
// end else
87113: GO 87154
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87115: LD_VAR 0 1
87119: PPUSH
87120: LD_EXP 132
87124: PUSH
87125: LD_VAR 0 2
87129: ARRAY
87130: PUSH
87131: LD_INT 3
87133: ARRAY
87134: PPUSH
87135: LD_EXP 132
87139: PUSH
87140: LD_VAR 0 2
87144: ARRAY
87145: PUSH
87146: LD_INT 4
87148: ARRAY
87149: PPUSH
87150: CALL_OW 171
// end ; end ;
87154: LD_VAR 0 3
87158: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
87159: LD_INT 0
87161: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
87162: LD_VAR 0 1
87166: PUSH
87167: LD_INT 250
87169: EQUAL
87170: PUSH
87171: LD_VAR 0 2
87175: PPUSH
87176: CALL_OW 264
87180: PUSH
87181: LD_INT 81
87183: EQUAL
87184: AND
87185: IFFALSE 87206
// MinerPlaceMine ( unit , x , y ) ;
87187: LD_VAR 0 2
87191: PPUSH
87192: LD_VAR 0 4
87196: PPUSH
87197: LD_VAR 0 5
87201: PPUSH
87202: CALL 90030 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
87206: LD_VAR 0 1
87210: PUSH
87211: LD_INT 251
87213: EQUAL
87214: PUSH
87215: LD_VAR 0 2
87219: PPUSH
87220: CALL_OW 264
87224: PUSH
87225: LD_INT 81
87227: EQUAL
87228: AND
87229: IFFALSE 87250
// MinerDetonateMine ( unit , x , y ) ;
87231: LD_VAR 0 2
87235: PPUSH
87236: LD_VAR 0 4
87240: PPUSH
87241: LD_VAR 0 5
87245: PPUSH
87246: CALL 90305 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
87250: LD_VAR 0 1
87254: PUSH
87255: LD_INT 252
87257: EQUAL
87258: PUSH
87259: LD_VAR 0 2
87263: PPUSH
87264: CALL_OW 264
87268: PUSH
87269: LD_INT 81
87271: EQUAL
87272: AND
87273: IFFALSE 87294
// MinerCreateMinefield ( unit , x , y ) ;
87275: LD_VAR 0 2
87279: PPUSH
87280: LD_VAR 0 4
87284: PPUSH
87285: LD_VAR 0 5
87289: PPUSH
87290: CALL 90722 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
87294: LD_VAR 0 1
87298: PUSH
87299: LD_INT 253
87301: EQUAL
87302: PUSH
87303: LD_VAR 0 2
87307: PPUSH
87308: CALL_OW 257
87312: PUSH
87313: LD_INT 5
87315: EQUAL
87316: AND
87317: IFFALSE 87338
// ComBinocular ( unit , x , y ) ;
87319: LD_VAR 0 2
87323: PPUSH
87324: LD_VAR 0 4
87328: PPUSH
87329: LD_VAR 0 5
87333: PPUSH
87334: CALL 91091 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
87338: LD_VAR 0 1
87342: PUSH
87343: LD_INT 254
87345: EQUAL
87346: PUSH
87347: LD_VAR 0 2
87351: PPUSH
87352: CALL_OW 264
87356: PUSH
87357: LD_INT 99
87359: EQUAL
87360: AND
87361: PUSH
87362: LD_VAR 0 3
87366: PPUSH
87367: CALL_OW 263
87371: PUSH
87372: LD_INT 3
87374: EQUAL
87375: AND
87376: IFFALSE 87392
// HackDestroyVehicle ( unit , selectedUnit ) ;
87378: LD_VAR 0 2
87382: PPUSH
87383: LD_VAR 0 3
87387: PPUSH
87388: CALL 89394 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
87392: LD_VAR 0 1
87396: PUSH
87397: LD_INT 255
87399: EQUAL
87400: PUSH
87401: LD_VAR 0 2
87405: PPUSH
87406: CALL_OW 264
87410: PUSH
87411: LD_INT 14
87413: PUSH
87414: LD_INT 53
87416: PUSH
87417: EMPTY
87418: LIST
87419: LIST
87420: IN
87421: AND
87422: PUSH
87423: LD_VAR 0 4
87427: PPUSH
87428: LD_VAR 0 5
87432: PPUSH
87433: CALL_OW 488
87437: AND
87438: IFFALSE 87462
// CutTreeXYR ( unit , x , y , 12 ) ;
87440: LD_VAR 0 2
87444: PPUSH
87445: LD_VAR 0 4
87449: PPUSH
87450: LD_VAR 0 5
87454: PPUSH
87455: LD_INT 12
87457: PPUSH
87458: CALL 87557 0 4
// if cmd = 256 then
87462: LD_VAR 0 1
87466: PUSH
87467: LD_INT 256
87469: EQUAL
87470: IFFALSE 87491
// SetFactoryWaypoint ( unit , x , y ) ;
87472: LD_VAR 0 2
87476: PPUSH
87477: LD_VAR 0 4
87481: PPUSH
87482: LD_VAR 0 5
87486: PPUSH
87487: CALL 85309 0 3
// if cmd = 257 then
87491: LD_VAR 0 1
87495: PUSH
87496: LD_INT 257
87498: EQUAL
87499: IFFALSE 87520
// SetWarehouseGatheringPoint ( unit , x , y ) ;
87501: LD_VAR 0 2
87505: PPUSH
87506: LD_VAR 0 4
87510: PPUSH
87511: LD_VAR 0 5
87515: PPUSH
87516: CALL 85671 0 3
// if cmd = 258 then
87520: LD_VAR 0 1
87524: PUSH
87525: LD_INT 258
87527: EQUAL
87528: IFFALSE 87552
// BurnTreeXYR ( unit , x , y , 8 ) ;
87530: LD_VAR 0 2
87534: PPUSH
87535: LD_VAR 0 4
87539: PPUSH
87540: LD_VAR 0 5
87544: PPUSH
87545: LD_INT 8
87547: PPUSH
87548: CALL 87951 0 4
// end ;
87552: LD_VAR 0 6
87556: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87557: LD_INT 0
87559: PPUSH
87560: PPUSH
87561: PPUSH
87562: PPUSH
87563: PPUSH
87564: PPUSH
87565: PPUSH
87566: PPUSH
87567: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
87568: LD_VAR 0 1
87572: PPUSH
87573: CALL_OW 302
87577: NOT
87578: PUSH
87579: LD_VAR 0 2
87583: PPUSH
87584: LD_VAR 0 3
87588: PPUSH
87589: CALL_OW 488
87593: NOT
87594: OR
87595: PUSH
87596: LD_VAR 0 4
87600: NOT
87601: OR
87602: IFFALSE 87606
// exit ;
87604: GO 87946
// list := [ ] ;
87606: LD_ADDR_VAR 0 13
87610: PUSH
87611: EMPTY
87612: ST_TO_ADDR
// if x - r < 0 then
87613: LD_VAR 0 2
87617: PUSH
87618: LD_VAR 0 4
87622: MINUS
87623: PUSH
87624: LD_INT 0
87626: LESS
87627: IFFALSE 87639
// min_x := 0 else
87629: LD_ADDR_VAR 0 7
87633: PUSH
87634: LD_INT 0
87636: ST_TO_ADDR
87637: GO 87655
// min_x := x - r ;
87639: LD_ADDR_VAR 0 7
87643: PUSH
87644: LD_VAR 0 2
87648: PUSH
87649: LD_VAR 0 4
87653: MINUS
87654: ST_TO_ADDR
// if y - r < 0 then
87655: LD_VAR 0 3
87659: PUSH
87660: LD_VAR 0 4
87664: MINUS
87665: PUSH
87666: LD_INT 0
87668: LESS
87669: IFFALSE 87681
// min_y := 0 else
87671: LD_ADDR_VAR 0 8
87675: PUSH
87676: LD_INT 0
87678: ST_TO_ADDR
87679: GO 87697
// min_y := y - r ;
87681: LD_ADDR_VAR 0 8
87685: PUSH
87686: LD_VAR 0 3
87690: PUSH
87691: LD_VAR 0 4
87695: MINUS
87696: ST_TO_ADDR
// max_x := x + r ;
87697: LD_ADDR_VAR 0 9
87701: PUSH
87702: LD_VAR 0 2
87706: PUSH
87707: LD_VAR 0 4
87711: PLUS
87712: ST_TO_ADDR
// max_y := y + r ;
87713: LD_ADDR_VAR 0 10
87717: PUSH
87718: LD_VAR 0 3
87722: PUSH
87723: LD_VAR 0 4
87727: PLUS
87728: ST_TO_ADDR
// for _x = min_x to max_x do
87729: LD_ADDR_VAR 0 11
87733: PUSH
87734: DOUBLE
87735: LD_VAR 0 7
87739: DEC
87740: ST_TO_ADDR
87741: LD_VAR 0 9
87745: PUSH
87746: FOR_TO
87747: IFFALSE 87864
// for _y = min_y to max_y do
87749: LD_ADDR_VAR 0 12
87753: PUSH
87754: DOUBLE
87755: LD_VAR 0 8
87759: DEC
87760: ST_TO_ADDR
87761: LD_VAR 0 10
87765: PUSH
87766: FOR_TO
87767: IFFALSE 87860
// begin if not ValidHex ( _x , _y ) then
87769: LD_VAR 0 11
87773: PPUSH
87774: LD_VAR 0 12
87778: PPUSH
87779: CALL_OW 488
87783: NOT
87784: IFFALSE 87788
// continue ;
87786: GO 87766
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87788: LD_VAR 0 11
87792: PPUSH
87793: LD_VAR 0 12
87797: PPUSH
87798: CALL_OW 351
87802: PUSH
87803: LD_VAR 0 11
87807: PPUSH
87808: LD_VAR 0 12
87812: PPUSH
87813: CALL_OW 554
87817: AND
87818: IFFALSE 87858
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87820: LD_ADDR_VAR 0 13
87824: PUSH
87825: LD_VAR 0 13
87829: PPUSH
87830: LD_VAR 0 13
87834: PUSH
87835: LD_INT 1
87837: PLUS
87838: PPUSH
87839: LD_VAR 0 11
87843: PUSH
87844: LD_VAR 0 12
87848: PUSH
87849: EMPTY
87850: LIST
87851: LIST
87852: PPUSH
87853: CALL_OW 2
87857: ST_TO_ADDR
// end ;
87858: GO 87766
87860: POP
87861: POP
87862: GO 87746
87864: POP
87865: POP
// if not list then
87866: LD_VAR 0 13
87870: NOT
87871: IFFALSE 87875
// exit ;
87873: GO 87946
// for i in list do
87875: LD_ADDR_VAR 0 6
87879: PUSH
87880: LD_VAR 0 13
87884: PUSH
87885: FOR_IN
87886: IFFALSE 87944
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87888: LD_VAR 0 1
87892: PPUSH
87893: LD_STRING M
87895: PUSH
87896: LD_VAR 0 6
87900: PUSH
87901: LD_INT 1
87903: ARRAY
87904: PUSH
87905: LD_VAR 0 6
87909: PUSH
87910: LD_INT 2
87912: ARRAY
87913: PUSH
87914: LD_INT 0
87916: PUSH
87917: LD_INT 0
87919: PUSH
87920: LD_INT 0
87922: PUSH
87923: LD_INT 0
87925: PUSH
87926: EMPTY
87927: LIST
87928: LIST
87929: LIST
87930: LIST
87931: LIST
87932: LIST
87933: LIST
87934: PUSH
87935: EMPTY
87936: LIST
87937: PPUSH
87938: CALL_OW 447
87942: GO 87885
87944: POP
87945: POP
// end ;
87946: LD_VAR 0 5
87950: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87951: LD_INT 0
87953: PPUSH
87954: PPUSH
87955: PPUSH
87956: PPUSH
87957: PPUSH
87958: PPUSH
87959: PPUSH
87960: PPUSH
87961: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
87962: LD_VAR 0 1
87966: PPUSH
87967: CALL_OW 302
87971: NOT
87972: PUSH
87973: LD_VAR 0 2
87977: PPUSH
87978: LD_VAR 0 3
87982: PPUSH
87983: CALL_OW 488
87987: NOT
87988: OR
87989: PUSH
87990: LD_VAR 0 4
87994: NOT
87995: OR
87996: IFFALSE 88000
// exit ;
87998: GO 88348
// list := [ ] ;
88000: LD_ADDR_VAR 0 13
88004: PUSH
88005: EMPTY
88006: ST_TO_ADDR
// if x - r < 0 then
88007: LD_VAR 0 2
88011: PUSH
88012: LD_VAR 0 4
88016: MINUS
88017: PUSH
88018: LD_INT 0
88020: LESS
88021: IFFALSE 88033
// min_x := 0 else
88023: LD_ADDR_VAR 0 7
88027: PUSH
88028: LD_INT 0
88030: ST_TO_ADDR
88031: GO 88049
// min_x := x - r ;
88033: LD_ADDR_VAR 0 7
88037: PUSH
88038: LD_VAR 0 2
88042: PUSH
88043: LD_VAR 0 4
88047: MINUS
88048: ST_TO_ADDR
// if y - r < 0 then
88049: LD_VAR 0 3
88053: PUSH
88054: LD_VAR 0 4
88058: MINUS
88059: PUSH
88060: LD_INT 0
88062: LESS
88063: IFFALSE 88075
// min_y := 0 else
88065: LD_ADDR_VAR 0 8
88069: PUSH
88070: LD_INT 0
88072: ST_TO_ADDR
88073: GO 88091
// min_y := y - r ;
88075: LD_ADDR_VAR 0 8
88079: PUSH
88080: LD_VAR 0 3
88084: PUSH
88085: LD_VAR 0 4
88089: MINUS
88090: ST_TO_ADDR
// max_x := x + r ;
88091: LD_ADDR_VAR 0 9
88095: PUSH
88096: LD_VAR 0 2
88100: PUSH
88101: LD_VAR 0 4
88105: PLUS
88106: ST_TO_ADDR
// max_y := y + r ;
88107: LD_ADDR_VAR 0 10
88111: PUSH
88112: LD_VAR 0 3
88116: PUSH
88117: LD_VAR 0 4
88121: PLUS
88122: ST_TO_ADDR
// for _x = min_x to max_x do
88123: LD_ADDR_VAR 0 11
88127: PUSH
88128: DOUBLE
88129: LD_VAR 0 7
88133: DEC
88134: ST_TO_ADDR
88135: LD_VAR 0 9
88139: PUSH
88140: FOR_TO
88141: IFFALSE 88258
// for _y = min_y to max_y do
88143: LD_ADDR_VAR 0 12
88147: PUSH
88148: DOUBLE
88149: LD_VAR 0 8
88153: DEC
88154: ST_TO_ADDR
88155: LD_VAR 0 10
88159: PUSH
88160: FOR_TO
88161: IFFALSE 88254
// begin if not ValidHex ( _x , _y ) then
88163: LD_VAR 0 11
88167: PPUSH
88168: LD_VAR 0 12
88172: PPUSH
88173: CALL_OW 488
88177: NOT
88178: IFFALSE 88182
// continue ;
88180: GO 88160
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88182: LD_VAR 0 11
88186: PPUSH
88187: LD_VAR 0 12
88191: PPUSH
88192: CALL_OW 351
88196: PUSH
88197: LD_VAR 0 11
88201: PPUSH
88202: LD_VAR 0 12
88206: PPUSH
88207: CALL_OW 554
88211: AND
88212: IFFALSE 88252
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88214: LD_ADDR_VAR 0 13
88218: PUSH
88219: LD_VAR 0 13
88223: PPUSH
88224: LD_VAR 0 13
88228: PUSH
88229: LD_INT 1
88231: PLUS
88232: PPUSH
88233: LD_VAR 0 11
88237: PUSH
88238: LD_VAR 0 12
88242: PUSH
88243: EMPTY
88244: LIST
88245: LIST
88246: PPUSH
88247: CALL_OW 2
88251: ST_TO_ADDR
// end ;
88252: GO 88160
88254: POP
88255: POP
88256: GO 88140
88258: POP
88259: POP
// if not list then
88260: LD_VAR 0 13
88264: NOT
88265: IFFALSE 88269
// exit ;
88267: GO 88348
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
88269: LD_ADDR_VAR 0 13
88273: PUSH
88274: LD_VAR 0 1
88278: PPUSH
88279: LD_VAR 0 13
88283: PPUSH
88284: LD_INT 1
88286: PPUSH
88287: LD_INT 1
88289: PPUSH
88290: CALL 34344 0 4
88294: ST_TO_ADDR
// ComStop ( flame ) ;
88295: LD_VAR 0 1
88299: PPUSH
88300: CALL_OW 141
// for i in list do
88304: LD_ADDR_VAR 0 6
88308: PUSH
88309: LD_VAR 0 13
88313: PUSH
88314: FOR_IN
88315: IFFALSE 88346
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
88317: LD_VAR 0 1
88321: PPUSH
88322: LD_VAR 0 6
88326: PUSH
88327: LD_INT 1
88329: ARRAY
88330: PPUSH
88331: LD_VAR 0 6
88335: PUSH
88336: LD_INT 2
88338: ARRAY
88339: PPUSH
88340: CALL_OW 176
88344: GO 88314
88346: POP
88347: POP
// end ;
88348: LD_VAR 0 5
88352: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
88353: LD_EXP 135
88357: NOT
88358: IFFALSE 88408
88360: GO 88362
88362: DISABLE
// begin initHack := true ;
88363: LD_ADDR_EXP 135
88367: PUSH
88368: LD_INT 1
88370: ST_TO_ADDR
// hackTanks := [ ] ;
88371: LD_ADDR_EXP 136
88375: PUSH
88376: EMPTY
88377: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
88378: LD_ADDR_EXP 137
88382: PUSH
88383: EMPTY
88384: ST_TO_ADDR
// hackLimit := 3 ;
88385: LD_ADDR_EXP 138
88389: PUSH
88390: LD_INT 3
88392: ST_TO_ADDR
// hackDist := 12 ;
88393: LD_ADDR_EXP 139
88397: PUSH
88398: LD_INT 12
88400: ST_TO_ADDR
// hackCounter := [ ] ;
88401: LD_ADDR_EXP 140
88405: PUSH
88406: EMPTY
88407: ST_TO_ADDR
// end ;
88408: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
88409: LD_EXP 135
88413: PUSH
88414: LD_INT 34
88416: PUSH
88417: LD_INT 99
88419: PUSH
88420: EMPTY
88421: LIST
88422: LIST
88423: PPUSH
88424: CALL_OW 69
88428: AND
88429: IFFALSE 88682
88431: GO 88433
88433: DISABLE
88434: LD_INT 0
88436: PPUSH
88437: PPUSH
// begin enable ;
88438: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
88439: LD_ADDR_VAR 0 1
88443: PUSH
88444: LD_INT 34
88446: PUSH
88447: LD_INT 99
88449: PUSH
88450: EMPTY
88451: LIST
88452: LIST
88453: PPUSH
88454: CALL_OW 69
88458: PUSH
88459: FOR_IN
88460: IFFALSE 88680
// begin if not i in hackTanks then
88462: LD_VAR 0 1
88466: PUSH
88467: LD_EXP 136
88471: IN
88472: NOT
88473: IFFALSE 88556
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
88475: LD_ADDR_EXP 136
88479: PUSH
88480: LD_EXP 136
88484: PPUSH
88485: LD_EXP 136
88489: PUSH
88490: LD_INT 1
88492: PLUS
88493: PPUSH
88494: LD_VAR 0 1
88498: PPUSH
88499: CALL_OW 1
88503: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
88504: LD_ADDR_EXP 137
88508: PUSH
88509: LD_EXP 137
88513: PPUSH
88514: LD_EXP 137
88518: PUSH
88519: LD_INT 1
88521: PLUS
88522: PPUSH
88523: EMPTY
88524: PPUSH
88525: CALL_OW 1
88529: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
88530: LD_ADDR_EXP 140
88534: PUSH
88535: LD_EXP 140
88539: PPUSH
88540: LD_EXP 140
88544: PUSH
88545: LD_INT 1
88547: PLUS
88548: PPUSH
88549: EMPTY
88550: PPUSH
88551: CALL_OW 1
88555: ST_TO_ADDR
// end ; if not IsOk ( i ) then
88556: LD_VAR 0 1
88560: PPUSH
88561: CALL_OW 302
88565: NOT
88566: IFFALSE 88579
// begin HackUnlinkAll ( i ) ;
88568: LD_VAR 0 1
88572: PPUSH
88573: CALL 88685 0 1
// continue ;
88577: GO 88459
// end ; HackCheckCapturedStatus ( i ) ;
88579: LD_VAR 0 1
88583: PPUSH
88584: CALL 89128 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
88588: LD_ADDR_VAR 0 2
88592: PUSH
88593: LD_INT 81
88595: PUSH
88596: LD_VAR 0 1
88600: PPUSH
88601: CALL_OW 255
88605: PUSH
88606: EMPTY
88607: LIST
88608: LIST
88609: PUSH
88610: LD_INT 33
88612: PUSH
88613: LD_INT 3
88615: PUSH
88616: EMPTY
88617: LIST
88618: LIST
88619: PUSH
88620: LD_INT 91
88622: PUSH
88623: LD_VAR 0 1
88627: PUSH
88628: LD_EXP 139
88632: PUSH
88633: EMPTY
88634: LIST
88635: LIST
88636: LIST
88637: PUSH
88638: LD_INT 50
88640: PUSH
88641: EMPTY
88642: LIST
88643: PUSH
88644: EMPTY
88645: LIST
88646: LIST
88647: LIST
88648: LIST
88649: PPUSH
88650: CALL_OW 69
88654: ST_TO_ADDR
// if not tmp then
88655: LD_VAR 0 2
88659: NOT
88660: IFFALSE 88664
// continue ;
88662: GO 88459
// HackLink ( i , tmp ) ;
88664: LD_VAR 0 1
88668: PPUSH
88669: LD_VAR 0 2
88673: PPUSH
88674: CALL 88821 0 2
// end ;
88678: GO 88459
88680: POP
88681: POP
// end ;
88682: PPOPN 2
88684: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
88685: LD_INT 0
88687: PPUSH
88688: PPUSH
88689: PPUSH
// if not hack in hackTanks then
88690: LD_VAR 0 1
88694: PUSH
88695: LD_EXP 136
88699: IN
88700: NOT
88701: IFFALSE 88705
// exit ;
88703: GO 88816
// index := GetElementIndex ( hackTanks , hack ) ;
88705: LD_ADDR_VAR 0 4
88709: PUSH
88710: LD_EXP 136
88714: PPUSH
88715: LD_VAR 0 1
88719: PPUSH
88720: CALL 33641 0 2
88724: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
88725: LD_EXP 137
88729: PUSH
88730: LD_VAR 0 4
88734: ARRAY
88735: IFFALSE 88816
// begin for i in hackTanksCaptured [ index ] do
88737: LD_ADDR_VAR 0 3
88741: PUSH
88742: LD_EXP 137
88746: PUSH
88747: LD_VAR 0 4
88751: ARRAY
88752: PUSH
88753: FOR_IN
88754: IFFALSE 88780
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
88756: LD_VAR 0 3
88760: PUSH
88761: LD_INT 1
88763: ARRAY
88764: PPUSH
88765: LD_VAR 0 3
88769: PUSH
88770: LD_INT 2
88772: ARRAY
88773: PPUSH
88774: CALL_OW 235
88778: GO 88753
88780: POP
88781: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
88782: LD_ADDR_EXP 137
88786: PUSH
88787: LD_EXP 137
88791: PPUSH
88792: LD_VAR 0 4
88796: PPUSH
88797: EMPTY
88798: PPUSH
88799: CALL_OW 1
88803: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
88804: LD_VAR 0 1
88808: PPUSH
88809: LD_INT 0
88811: PPUSH
88812: CALL_OW 505
// end ; end ;
88816: LD_VAR 0 2
88820: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
88821: LD_INT 0
88823: PPUSH
88824: PPUSH
88825: PPUSH
// if not hack in hackTanks or not vehicles then
88826: LD_VAR 0 1
88830: PUSH
88831: LD_EXP 136
88835: IN
88836: NOT
88837: PUSH
88838: LD_VAR 0 2
88842: NOT
88843: OR
88844: IFFALSE 88848
// exit ;
88846: GO 89123
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
88848: LD_ADDR_VAR 0 2
88852: PUSH
88853: LD_VAR 0 1
88857: PPUSH
88858: LD_VAR 0 2
88862: PPUSH
88863: LD_INT 1
88865: PPUSH
88866: LD_INT 1
88868: PPUSH
88869: CALL 34291 0 4
88873: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
88874: LD_ADDR_VAR 0 5
88878: PUSH
88879: LD_EXP 136
88883: PPUSH
88884: LD_VAR 0 1
88888: PPUSH
88889: CALL 33641 0 2
88893: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
88894: LD_EXP 137
88898: PUSH
88899: LD_VAR 0 5
88903: ARRAY
88904: PUSH
88905: LD_EXP 138
88909: LESS
88910: IFFALSE 89099
// begin for i := 1 to vehicles do
88912: LD_ADDR_VAR 0 4
88916: PUSH
88917: DOUBLE
88918: LD_INT 1
88920: DEC
88921: ST_TO_ADDR
88922: LD_VAR 0 2
88926: PUSH
88927: FOR_TO
88928: IFFALSE 89097
// begin if hackTanksCaptured [ index ] = hackLimit then
88930: LD_EXP 137
88934: PUSH
88935: LD_VAR 0 5
88939: ARRAY
88940: PUSH
88941: LD_EXP 138
88945: EQUAL
88946: IFFALSE 88950
// break ;
88948: GO 89097
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
88950: LD_ADDR_EXP 140
88954: PUSH
88955: LD_EXP 140
88959: PPUSH
88960: LD_VAR 0 5
88964: PPUSH
88965: LD_EXP 140
88969: PUSH
88970: LD_VAR 0 5
88974: ARRAY
88975: PUSH
88976: LD_INT 1
88978: PLUS
88979: PPUSH
88980: CALL_OW 1
88984: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88985: LD_ADDR_EXP 137
88989: PUSH
88990: LD_EXP 137
88994: PPUSH
88995: LD_VAR 0 5
88999: PUSH
89000: LD_EXP 137
89004: PUSH
89005: LD_VAR 0 5
89009: ARRAY
89010: PUSH
89011: LD_INT 1
89013: PLUS
89014: PUSH
89015: EMPTY
89016: LIST
89017: LIST
89018: PPUSH
89019: LD_VAR 0 2
89023: PUSH
89024: LD_VAR 0 4
89028: ARRAY
89029: PUSH
89030: LD_VAR 0 2
89034: PUSH
89035: LD_VAR 0 4
89039: ARRAY
89040: PPUSH
89041: CALL_OW 255
89045: PUSH
89046: EMPTY
89047: LIST
89048: LIST
89049: PPUSH
89050: CALL 33856 0 3
89054: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
89055: LD_VAR 0 2
89059: PUSH
89060: LD_VAR 0 4
89064: ARRAY
89065: PPUSH
89066: LD_VAR 0 1
89070: PPUSH
89071: CALL_OW 255
89075: PPUSH
89076: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
89080: LD_VAR 0 2
89084: PUSH
89085: LD_VAR 0 4
89089: ARRAY
89090: PPUSH
89091: CALL_OW 141
// end ;
89095: GO 88927
89097: POP
89098: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89099: LD_VAR 0 1
89103: PPUSH
89104: LD_EXP 137
89108: PUSH
89109: LD_VAR 0 5
89113: ARRAY
89114: PUSH
89115: LD_INT 0
89117: PLUS
89118: PPUSH
89119: CALL_OW 505
// end ;
89123: LD_VAR 0 3
89127: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
89128: LD_INT 0
89130: PPUSH
89131: PPUSH
89132: PPUSH
89133: PPUSH
// if not hack in hackTanks then
89134: LD_VAR 0 1
89138: PUSH
89139: LD_EXP 136
89143: IN
89144: NOT
89145: IFFALSE 89149
// exit ;
89147: GO 89389
// index := GetElementIndex ( hackTanks , hack ) ;
89149: LD_ADDR_VAR 0 4
89153: PUSH
89154: LD_EXP 136
89158: PPUSH
89159: LD_VAR 0 1
89163: PPUSH
89164: CALL 33641 0 2
89168: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
89169: LD_ADDR_VAR 0 3
89173: PUSH
89174: DOUBLE
89175: LD_EXP 137
89179: PUSH
89180: LD_VAR 0 4
89184: ARRAY
89185: INC
89186: ST_TO_ADDR
89187: LD_INT 1
89189: PUSH
89190: FOR_DOWNTO
89191: IFFALSE 89363
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
89193: LD_ADDR_VAR 0 5
89197: PUSH
89198: LD_EXP 137
89202: PUSH
89203: LD_VAR 0 4
89207: ARRAY
89208: PUSH
89209: LD_VAR 0 3
89213: ARRAY
89214: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
89215: LD_VAR 0 5
89219: PUSH
89220: LD_INT 1
89222: ARRAY
89223: PPUSH
89224: CALL_OW 302
89228: NOT
89229: PUSH
89230: LD_VAR 0 5
89234: PUSH
89235: LD_INT 1
89237: ARRAY
89238: PPUSH
89239: CALL_OW 255
89243: PUSH
89244: LD_VAR 0 1
89248: PPUSH
89249: CALL_OW 255
89253: NONEQUAL
89254: OR
89255: IFFALSE 89361
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
89257: LD_VAR 0 5
89261: PUSH
89262: LD_INT 1
89264: ARRAY
89265: PPUSH
89266: CALL_OW 305
89270: PUSH
89271: LD_VAR 0 5
89275: PUSH
89276: LD_INT 1
89278: ARRAY
89279: PPUSH
89280: CALL_OW 255
89284: PUSH
89285: LD_VAR 0 1
89289: PPUSH
89290: CALL_OW 255
89294: EQUAL
89295: AND
89296: IFFALSE 89320
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
89298: LD_VAR 0 5
89302: PUSH
89303: LD_INT 1
89305: ARRAY
89306: PPUSH
89307: LD_VAR 0 5
89311: PUSH
89312: LD_INT 2
89314: ARRAY
89315: PPUSH
89316: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
89320: LD_ADDR_EXP 137
89324: PUSH
89325: LD_EXP 137
89329: PPUSH
89330: LD_VAR 0 4
89334: PPUSH
89335: LD_EXP 137
89339: PUSH
89340: LD_VAR 0 4
89344: ARRAY
89345: PPUSH
89346: LD_VAR 0 3
89350: PPUSH
89351: CALL_OW 3
89355: PPUSH
89356: CALL_OW 1
89360: ST_TO_ADDR
// end ; end ;
89361: GO 89190
89363: POP
89364: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89365: LD_VAR 0 1
89369: PPUSH
89370: LD_EXP 137
89374: PUSH
89375: LD_VAR 0 4
89379: ARRAY
89380: PUSH
89381: LD_INT 0
89383: PLUS
89384: PPUSH
89385: CALL_OW 505
// end ;
89389: LD_VAR 0 2
89393: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
89394: LD_INT 0
89396: PPUSH
89397: PPUSH
89398: PPUSH
89399: PPUSH
// if not hack in hackTanks then
89400: LD_VAR 0 1
89404: PUSH
89405: LD_EXP 136
89409: IN
89410: NOT
89411: IFFALSE 89415
// exit ;
89413: GO 89500
// index := GetElementIndex ( hackTanks , hack ) ;
89415: LD_ADDR_VAR 0 5
89419: PUSH
89420: LD_EXP 136
89424: PPUSH
89425: LD_VAR 0 1
89429: PPUSH
89430: CALL 33641 0 2
89434: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
89435: LD_ADDR_VAR 0 4
89439: PUSH
89440: DOUBLE
89441: LD_INT 1
89443: DEC
89444: ST_TO_ADDR
89445: LD_EXP 137
89449: PUSH
89450: LD_VAR 0 5
89454: ARRAY
89455: PUSH
89456: FOR_TO
89457: IFFALSE 89498
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
89459: LD_EXP 137
89463: PUSH
89464: LD_VAR 0 5
89468: ARRAY
89469: PUSH
89470: LD_VAR 0 4
89474: ARRAY
89475: PUSH
89476: LD_INT 1
89478: ARRAY
89479: PUSH
89480: LD_VAR 0 2
89484: EQUAL
89485: IFFALSE 89496
// KillUnit ( vehicle ) ;
89487: LD_VAR 0 2
89491: PPUSH
89492: CALL_OW 66
89496: GO 89456
89498: POP
89499: POP
// end ;
89500: LD_VAR 0 3
89504: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
89505: LD_EXP 141
89509: NOT
89510: IFFALSE 89545
89512: GO 89514
89514: DISABLE
// begin initMiner := true ;
89515: LD_ADDR_EXP 141
89519: PUSH
89520: LD_INT 1
89522: ST_TO_ADDR
// minersList := [ ] ;
89523: LD_ADDR_EXP 142
89527: PUSH
89528: EMPTY
89529: ST_TO_ADDR
// minerMinesList := [ ] ;
89530: LD_ADDR_EXP 143
89534: PUSH
89535: EMPTY
89536: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
89537: LD_ADDR_EXP 144
89541: PUSH
89542: LD_INT 5
89544: ST_TO_ADDR
// end ;
89545: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
89546: LD_EXP 141
89550: PUSH
89551: LD_INT 34
89553: PUSH
89554: LD_INT 81
89556: PUSH
89557: EMPTY
89558: LIST
89559: LIST
89560: PPUSH
89561: CALL_OW 69
89565: AND
89566: IFFALSE 90027
89568: GO 89570
89570: DISABLE
89571: LD_INT 0
89573: PPUSH
89574: PPUSH
89575: PPUSH
89576: PPUSH
// begin enable ;
89577: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
89578: LD_ADDR_VAR 0 1
89582: PUSH
89583: LD_INT 34
89585: PUSH
89586: LD_INT 81
89588: PUSH
89589: EMPTY
89590: LIST
89591: LIST
89592: PPUSH
89593: CALL_OW 69
89597: PUSH
89598: FOR_IN
89599: IFFALSE 89671
// begin if not i in minersList then
89601: LD_VAR 0 1
89605: PUSH
89606: LD_EXP 142
89610: IN
89611: NOT
89612: IFFALSE 89669
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
89614: LD_ADDR_EXP 142
89618: PUSH
89619: LD_EXP 142
89623: PPUSH
89624: LD_EXP 142
89628: PUSH
89629: LD_INT 1
89631: PLUS
89632: PPUSH
89633: LD_VAR 0 1
89637: PPUSH
89638: CALL_OW 1
89642: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
89643: LD_ADDR_EXP 143
89647: PUSH
89648: LD_EXP 143
89652: PPUSH
89653: LD_EXP 143
89657: PUSH
89658: LD_INT 1
89660: PLUS
89661: PPUSH
89662: EMPTY
89663: PPUSH
89664: CALL_OW 1
89668: ST_TO_ADDR
// end end ;
89669: GO 89598
89671: POP
89672: POP
// for i := minerMinesList downto 1 do
89673: LD_ADDR_VAR 0 1
89677: PUSH
89678: DOUBLE
89679: LD_EXP 143
89683: INC
89684: ST_TO_ADDR
89685: LD_INT 1
89687: PUSH
89688: FOR_DOWNTO
89689: IFFALSE 90025
// begin if IsLive ( minersList [ i ] ) then
89691: LD_EXP 142
89695: PUSH
89696: LD_VAR 0 1
89700: ARRAY
89701: PPUSH
89702: CALL_OW 300
89706: IFFALSE 89734
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
89708: LD_EXP 142
89712: PUSH
89713: LD_VAR 0 1
89717: ARRAY
89718: PPUSH
89719: LD_EXP 143
89723: PUSH
89724: LD_VAR 0 1
89728: ARRAY
89729: PPUSH
89730: CALL_OW 505
// if not minerMinesList [ i ] then
89734: LD_EXP 143
89738: PUSH
89739: LD_VAR 0 1
89743: ARRAY
89744: NOT
89745: IFFALSE 89749
// continue ;
89747: GO 89688
// for j := minerMinesList [ i ] downto 1 do
89749: LD_ADDR_VAR 0 2
89753: PUSH
89754: DOUBLE
89755: LD_EXP 143
89759: PUSH
89760: LD_VAR 0 1
89764: ARRAY
89765: INC
89766: ST_TO_ADDR
89767: LD_INT 1
89769: PUSH
89770: FOR_DOWNTO
89771: IFFALSE 90021
// begin side := GetSide ( minersList [ i ] ) ;
89773: LD_ADDR_VAR 0 3
89777: PUSH
89778: LD_EXP 142
89782: PUSH
89783: LD_VAR 0 1
89787: ARRAY
89788: PPUSH
89789: CALL_OW 255
89793: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
89794: LD_ADDR_VAR 0 4
89798: PUSH
89799: LD_EXP 143
89803: PUSH
89804: LD_VAR 0 1
89808: ARRAY
89809: PUSH
89810: LD_VAR 0 2
89814: ARRAY
89815: PUSH
89816: LD_INT 1
89818: ARRAY
89819: PPUSH
89820: LD_EXP 143
89824: PUSH
89825: LD_VAR 0 1
89829: ARRAY
89830: PUSH
89831: LD_VAR 0 2
89835: ARRAY
89836: PUSH
89837: LD_INT 2
89839: ARRAY
89840: PPUSH
89841: CALL_OW 428
89845: ST_TO_ADDR
// if not tmp then
89846: LD_VAR 0 4
89850: NOT
89851: IFFALSE 89855
// continue ;
89853: GO 89770
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
89855: LD_VAR 0 4
89859: PUSH
89860: LD_INT 81
89862: PUSH
89863: LD_VAR 0 3
89867: PUSH
89868: EMPTY
89869: LIST
89870: LIST
89871: PPUSH
89872: CALL_OW 69
89876: IN
89877: PUSH
89878: LD_EXP 143
89882: PUSH
89883: LD_VAR 0 1
89887: ARRAY
89888: PUSH
89889: LD_VAR 0 2
89893: ARRAY
89894: PUSH
89895: LD_INT 1
89897: ARRAY
89898: PPUSH
89899: LD_EXP 143
89903: PUSH
89904: LD_VAR 0 1
89908: ARRAY
89909: PUSH
89910: LD_VAR 0 2
89914: ARRAY
89915: PUSH
89916: LD_INT 2
89918: ARRAY
89919: PPUSH
89920: CALL_OW 458
89924: AND
89925: IFFALSE 90019
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
89927: LD_EXP 143
89931: PUSH
89932: LD_VAR 0 1
89936: ARRAY
89937: PUSH
89938: LD_VAR 0 2
89942: ARRAY
89943: PUSH
89944: LD_INT 1
89946: ARRAY
89947: PPUSH
89948: LD_EXP 143
89952: PUSH
89953: LD_VAR 0 1
89957: ARRAY
89958: PUSH
89959: LD_VAR 0 2
89963: ARRAY
89964: PUSH
89965: LD_INT 2
89967: ARRAY
89968: PPUSH
89969: LD_VAR 0 3
89973: PPUSH
89974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89978: LD_ADDR_EXP 143
89982: PUSH
89983: LD_EXP 143
89987: PPUSH
89988: LD_VAR 0 1
89992: PPUSH
89993: LD_EXP 143
89997: PUSH
89998: LD_VAR 0 1
90002: ARRAY
90003: PPUSH
90004: LD_VAR 0 2
90008: PPUSH
90009: CALL_OW 3
90013: PPUSH
90014: CALL_OW 1
90018: ST_TO_ADDR
// end ; end ;
90019: GO 89770
90021: POP
90022: POP
// end ;
90023: GO 89688
90025: POP
90026: POP
// end ;
90027: PPOPN 4
90029: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
90030: LD_INT 0
90032: PPUSH
90033: PPUSH
// result := false ;
90034: LD_ADDR_VAR 0 4
90038: PUSH
90039: LD_INT 0
90041: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
90042: LD_VAR 0 1
90046: PPUSH
90047: CALL_OW 264
90051: PUSH
90052: LD_INT 81
90054: EQUAL
90055: NOT
90056: IFFALSE 90060
// exit ;
90058: GO 90300
// index := GetElementIndex ( minersList , unit ) ;
90060: LD_ADDR_VAR 0 5
90064: PUSH
90065: LD_EXP 142
90069: PPUSH
90070: LD_VAR 0 1
90074: PPUSH
90075: CALL 33641 0 2
90079: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
90080: LD_EXP 143
90084: PUSH
90085: LD_VAR 0 5
90089: ARRAY
90090: PUSH
90091: LD_EXP 144
90095: GREATEREQUAL
90096: IFFALSE 90100
// exit ;
90098: GO 90300
// ComMoveXY ( unit , x , y ) ;
90100: LD_VAR 0 1
90104: PPUSH
90105: LD_VAR 0 2
90109: PPUSH
90110: LD_VAR 0 3
90114: PPUSH
90115: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90119: LD_INT 35
90121: PPUSH
90122: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
90126: LD_VAR 0 1
90130: PPUSH
90131: LD_VAR 0 2
90135: PPUSH
90136: LD_VAR 0 3
90140: PPUSH
90141: CALL 65393 0 3
90145: NOT
90146: PUSH
90147: LD_VAR 0 1
90151: PPUSH
90152: CALL_OW 314
90156: AND
90157: IFFALSE 90161
// exit ;
90159: GO 90300
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
90161: LD_VAR 0 2
90165: PPUSH
90166: LD_VAR 0 3
90170: PPUSH
90171: CALL_OW 428
90175: PUSH
90176: LD_VAR 0 1
90180: EQUAL
90181: PUSH
90182: LD_VAR 0 1
90186: PPUSH
90187: CALL_OW 314
90191: NOT
90192: AND
90193: IFFALSE 90119
// PlaySoundXY ( x , y , PlantMine ) ;
90195: LD_VAR 0 2
90199: PPUSH
90200: LD_VAR 0 3
90204: PPUSH
90205: LD_STRING PlantMine
90207: PPUSH
90208: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
90212: LD_VAR 0 2
90216: PPUSH
90217: LD_VAR 0 3
90221: PPUSH
90222: LD_VAR 0 1
90226: PPUSH
90227: CALL_OW 255
90231: PPUSH
90232: LD_INT 0
90234: PPUSH
90235: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
90239: LD_ADDR_EXP 143
90243: PUSH
90244: LD_EXP 143
90248: PPUSH
90249: LD_VAR 0 5
90253: PUSH
90254: LD_EXP 143
90258: PUSH
90259: LD_VAR 0 5
90263: ARRAY
90264: PUSH
90265: LD_INT 1
90267: PLUS
90268: PUSH
90269: EMPTY
90270: LIST
90271: LIST
90272: PPUSH
90273: LD_VAR 0 2
90277: PUSH
90278: LD_VAR 0 3
90282: PUSH
90283: EMPTY
90284: LIST
90285: LIST
90286: PPUSH
90287: CALL 33856 0 3
90291: ST_TO_ADDR
// result := true ;
90292: LD_ADDR_VAR 0 4
90296: PUSH
90297: LD_INT 1
90299: ST_TO_ADDR
// end ;
90300: LD_VAR 0 4
90304: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
90305: LD_INT 0
90307: PPUSH
90308: PPUSH
90309: PPUSH
// if not unit in minersList then
90310: LD_VAR 0 1
90314: PUSH
90315: LD_EXP 142
90319: IN
90320: NOT
90321: IFFALSE 90325
// exit ;
90323: GO 90717
// index := GetElementIndex ( minersList , unit ) ;
90325: LD_ADDR_VAR 0 6
90329: PUSH
90330: LD_EXP 142
90334: PPUSH
90335: LD_VAR 0 1
90339: PPUSH
90340: CALL 33641 0 2
90344: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
90345: LD_ADDR_VAR 0 5
90349: PUSH
90350: DOUBLE
90351: LD_EXP 143
90355: PUSH
90356: LD_VAR 0 6
90360: ARRAY
90361: INC
90362: ST_TO_ADDR
90363: LD_INT 1
90365: PUSH
90366: FOR_DOWNTO
90367: IFFALSE 90528
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
90369: LD_EXP 143
90373: PUSH
90374: LD_VAR 0 6
90378: ARRAY
90379: PUSH
90380: LD_VAR 0 5
90384: ARRAY
90385: PUSH
90386: LD_INT 1
90388: ARRAY
90389: PUSH
90390: LD_VAR 0 2
90394: EQUAL
90395: PUSH
90396: LD_EXP 143
90400: PUSH
90401: LD_VAR 0 6
90405: ARRAY
90406: PUSH
90407: LD_VAR 0 5
90411: ARRAY
90412: PUSH
90413: LD_INT 2
90415: ARRAY
90416: PUSH
90417: LD_VAR 0 3
90421: EQUAL
90422: AND
90423: IFFALSE 90526
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90425: LD_EXP 143
90429: PUSH
90430: LD_VAR 0 6
90434: ARRAY
90435: PUSH
90436: LD_VAR 0 5
90440: ARRAY
90441: PUSH
90442: LD_INT 1
90444: ARRAY
90445: PPUSH
90446: LD_EXP 143
90450: PUSH
90451: LD_VAR 0 6
90455: ARRAY
90456: PUSH
90457: LD_VAR 0 5
90461: ARRAY
90462: PUSH
90463: LD_INT 2
90465: ARRAY
90466: PPUSH
90467: LD_VAR 0 1
90471: PPUSH
90472: CALL_OW 255
90476: PPUSH
90477: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90481: LD_ADDR_EXP 143
90485: PUSH
90486: LD_EXP 143
90490: PPUSH
90491: LD_VAR 0 6
90495: PPUSH
90496: LD_EXP 143
90500: PUSH
90501: LD_VAR 0 6
90505: ARRAY
90506: PPUSH
90507: LD_VAR 0 5
90511: PPUSH
90512: CALL_OW 3
90516: PPUSH
90517: CALL_OW 1
90521: ST_TO_ADDR
// exit ;
90522: POP
90523: POP
90524: GO 90717
// end ; end ;
90526: GO 90366
90528: POP
90529: POP
// for i := minerMinesList [ index ] downto 1 do
90530: LD_ADDR_VAR 0 5
90534: PUSH
90535: DOUBLE
90536: LD_EXP 143
90540: PUSH
90541: LD_VAR 0 6
90545: ARRAY
90546: INC
90547: ST_TO_ADDR
90548: LD_INT 1
90550: PUSH
90551: FOR_DOWNTO
90552: IFFALSE 90715
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
90554: LD_EXP 143
90558: PUSH
90559: LD_VAR 0 6
90563: ARRAY
90564: PUSH
90565: LD_VAR 0 5
90569: ARRAY
90570: PUSH
90571: LD_INT 1
90573: ARRAY
90574: PPUSH
90575: LD_EXP 143
90579: PUSH
90580: LD_VAR 0 6
90584: ARRAY
90585: PUSH
90586: LD_VAR 0 5
90590: ARRAY
90591: PUSH
90592: LD_INT 2
90594: ARRAY
90595: PPUSH
90596: LD_VAR 0 2
90600: PPUSH
90601: LD_VAR 0 3
90605: PPUSH
90606: CALL_OW 298
90610: PUSH
90611: LD_INT 6
90613: LESS
90614: IFFALSE 90713
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90616: LD_EXP 143
90620: PUSH
90621: LD_VAR 0 6
90625: ARRAY
90626: PUSH
90627: LD_VAR 0 5
90631: ARRAY
90632: PUSH
90633: LD_INT 1
90635: ARRAY
90636: PPUSH
90637: LD_EXP 143
90641: PUSH
90642: LD_VAR 0 6
90646: ARRAY
90647: PUSH
90648: LD_VAR 0 5
90652: ARRAY
90653: PUSH
90654: LD_INT 2
90656: ARRAY
90657: PPUSH
90658: LD_VAR 0 1
90662: PPUSH
90663: CALL_OW 255
90667: PPUSH
90668: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90672: LD_ADDR_EXP 143
90676: PUSH
90677: LD_EXP 143
90681: PPUSH
90682: LD_VAR 0 6
90686: PPUSH
90687: LD_EXP 143
90691: PUSH
90692: LD_VAR 0 6
90696: ARRAY
90697: PPUSH
90698: LD_VAR 0 5
90702: PPUSH
90703: CALL_OW 3
90707: PPUSH
90708: CALL_OW 1
90712: ST_TO_ADDR
// end ; end ;
90713: GO 90551
90715: POP
90716: POP
// end ;
90717: LD_VAR 0 4
90721: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
90722: LD_INT 0
90724: PPUSH
90725: PPUSH
90726: PPUSH
90727: PPUSH
90728: PPUSH
90729: PPUSH
90730: PPUSH
90731: PPUSH
90732: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
90733: LD_VAR 0 1
90737: PPUSH
90738: CALL_OW 264
90742: PUSH
90743: LD_INT 81
90745: EQUAL
90746: NOT
90747: PUSH
90748: LD_VAR 0 1
90752: PUSH
90753: LD_EXP 142
90757: IN
90758: NOT
90759: OR
90760: IFFALSE 90764
// exit ;
90762: GO 91086
// index := GetElementIndex ( minersList , unit ) ;
90764: LD_ADDR_VAR 0 6
90768: PUSH
90769: LD_EXP 142
90773: PPUSH
90774: LD_VAR 0 1
90778: PPUSH
90779: CALL 33641 0 2
90783: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
90784: LD_ADDR_VAR 0 8
90788: PUSH
90789: LD_EXP 144
90793: PUSH
90794: LD_EXP 143
90798: PUSH
90799: LD_VAR 0 6
90803: ARRAY
90804: MINUS
90805: ST_TO_ADDR
// if not minesFreeAmount then
90806: LD_VAR 0 8
90810: NOT
90811: IFFALSE 90815
// exit ;
90813: GO 91086
// tmp := [ ] ;
90815: LD_ADDR_VAR 0 7
90819: PUSH
90820: EMPTY
90821: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
90822: LD_ADDR_VAR 0 5
90826: PUSH
90827: DOUBLE
90828: LD_INT 1
90830: DEC
90831: ST_TO_ADDR
90832: LD_VAR 0 8
90836: PUSH
90837: FOR_TO
90838: IFFALSE 91033
// begin _d := rand ( 0 , 5 ) ;
90840: LD_ADDR_VAR 0 11
90844: PUSH
90845: LD_INT 0
90847: PPUSH
90848: LD_INT 5
90850: PPUSH
90851: CALL_OW 12
90855: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
90856: LD_ADDR_VAR 0 12
90860: PUSH
90861: LD_INT 2
90863: PPUSH
90864: LD_INT 6
90866: PPUSH
90867: CALL_OW 12
90871: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
90872: LD_ADDR_VAR 0 9
90876: PUSH
90877: LD_VAR 0 2
90881: PPUSH
90882: LD_VAR 0 11
90886: PPUSH
90887: LD_VAR 0 12
90891: PPUSH
90892: CALL_OW 272
90896: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
90897: LD_ADDR_VAR 0 10
90901: PUSH
90902: LD_VAR 0 3
90906: PPUSH
90907: LD_VAR 0 11
90911: PPUSH
90912: LD_VAR 0 12
90916: PPUSH
90917: CALL_OW 273
90921: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
90922: LD_VAR 0 9
90926: PPUSH
90927: LD_VAR 0 10
90931: PPUSH
90932: CALL_OW 488
90936: PUSH
90937: LD_VAR 0 9
90941: PUSH
90942: LD_VAR 0 10
90946: PUSH
90947: EMPTY
90948: LIST
90949: LIST
90950: PUSH
90951: LD_VAR 0 7
90955: IN
90956: NOT
90957: AND
90958: PUSH
90959: LD_VAR 0 9
90963: PPUSH
90964: LD_VAR 0 10
90968: PPUSH
90969: CALL_OW 458
90973: NOT
90974: AND
90975: IFFALSE 91017
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90977: LD_ADDR_VAR 0 7
90981: PUSH
90982: LD_VAR 0 7
90986: PPUSH
90987: LD_VAR 0 7
90991: PUSH
90992: LD_INT 1
90994: PLUS
90995: PPUSH
90996: LD_VAR 0 9
91000: PUSH
91001: LD_VAR 0 10
91005: PUSH
91006: EMPTY
91007: LIST
91008: LIST
91009: PPUSH
91010: CALL_OW 1
91014: ST_TO_ADDR
91015: GO 91031
// i := i - 1 ;
91017: LD_ADDR_VAR 0 5
91021: PUSH
91022: LD_VAR 0 5
91026: PUSH
91027: LD_INT 1
91029: MINUS
91030: ST_TO_ADDR
// end ;
91031: GO 90837
91033: POP
91034: POP
// for i in tmp do
91035: LD_ADDR_VAR 0 5
91039: PUSH
91040: LD_VAR 0 7
91044: PUSH
91045: FOR_IN
91046: IFFALSE 91084
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
91048: LD_VAR 0 1
91052: PPUSH
91053: LD_VAR 0 5
91057: PUSH
91058: LD_INT 1
91060: ARRAY
91061: PPUSH
91062: LD_VAR 0 5
91066: PUSH
91067: LD_INT 2
91069: ARRAY
91070: PPUSH
91071: CALL 90030 0 3
91075: NOT
91076: IFFALSE 91082
// exit ;
91078: POP
91079: POP
91080: GO 91086
91082: GO 91045
91084: POP
91085: POP
// end ;
91086: LD_VAR 0 4
91090: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
91091: LD_INT 0
91093: PPUSH
91094: PPUSH
91095: PPUSH
91096: PPUSH
91097: PPUSH
91098: PPUSH
91099: PPUSH
// if not GetClass ( unit ) = class_sniper then
91100: LD_VAR 0 1
91104: PPUSH
91105: CALL_OW 257
91109: PUSH
91110: LD_INT 5
91112: EQUAL
91113: NOT
91114: IFFALSE 91118
// exit ;
91116: GO 91506
// dist := 8 ;
91118: LD_ADDR_VAR 0 5
91122: PUSH
91123: LD_INT 8
91125: ST_TO_ADDR
// viewRange := 12 ;
91126: LD_ADDR_VAR 0 7
91130: PUSH
91131: LD_INT 12
91133: ST_TO_ADDR
// side := GetSide ( unit ) ;
91134: LD_ADDR_VAR 0 6
91138: PUSH
91139: LD_VAR 0 1
91143: PPUSH
91144: CALL_OW 255
91148: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
91149: LD_INT 61
91151: PPUSH
91152: LD_VAR 0 6
91156: PPUSH
91157: CALL_OW 321
91161: PUSH
91162: LD_INT 2
91164: EQUAL
91165: IFFALSE 91175
// viewRange := 16 ;
91167: LD_ADDR_VAR 0 7
91171: PUSH
91172: LD_INT 16
91174: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
91175: LD_VAR 0 1
91179: PPUSH
91180: LD_VAR 0 2
91184: PPUSH
91185: LD_VAR 0 3
91189: PPUSH
91190: CALL_OW 297
91194: PUSH
91195: LD_VAR 0 5
91199: GREATER
91200: IFFALSE 91279
// begin ComMoveXY ( unit , x , y ) ;
91202: LD_VAR 0 1
91206: PPUSH
91207: LD_VAR 0 2
91211: PPUSH
91212: LD_VAR 0 3
91216: PPUSH
91217: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
91221: LD_INT 35
91223: PPUSH
91224: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
91228: LD_VAR 0 1
91232: PPUSH
91233: LD_VAR 0 2
91237: PPUSH
91238: LD_VAR 0 3
91242: PPUSH
91243: CALL 65393 0 3
91247: NOT
91248: IFFALSE 91252
// exit ;
91250: GO 91506
// until GetDistUnitXY ( unit , x , y ) < dist ;
91252: LD_VAR 0 1
91256: PPUSH
91257: LD_VAR 0 2
91261: PPUSH
91262: LD_VAR 0 3
91266: PPUSH
91267: CALL_OW 297
91271: PUSH
91272: LD_VAR 0 5
91276: LESS
91277: IFFALSE 91221
// end ; ComTurnXY ( unit , x , y ) ;
91279: LD_VAR 0 1
91283: PPUSH
91284: LD_VAR 0 2
91288: PPUSH
91289: LD_VAR 0 3
91293: PPUSH
91294: CALL_OW 118
// wait ( 5 ) ;
91298: LD_INT 5
91300: PPUSH
91301: CALL_OW 67
// _d := GetDir ( unit ) ;
91305: LD_ADDR_VAR 0 10
91309: PUSH
91310: LD_VAR 0 1
91314: PPUSH
91315: CALL_OW 254
91319: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
91320: LD_ADDR_VAR 0 8
91324: PUSH
91325: LD_VAR 0 1
91329: PPUSH
91330: CALL_OW 250
91334: PPUSH
91335: LD_VAR 0 10
91339: PPUSH
91340: LD_VAR 0 5
91344: PPUSH
91345: CALL_OW 272
91349: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
91350: LD_ADDR_VAR 0 9
91354: PUSH
91355: LD_VAR 0 1
91359: PPUSH
91360: CALL_OW 251
91364: PPUSH
91365: LD_VAR 0 10
91369: PPUSH
91370: LD_VAR 0 5
91374: PPUSH
91375: CALL_OW 273
91379: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
91380: LD_VAR 0 8
91384: PPUSH
91385: LD_VAR 0 9
91389: PPUSH
91390: CALL_OW 488
91394: NOT
91395: IFFALSE 91399
// exit ;
91397: GO 91506
// ComAnimCustom ( unit , 1 ) ;
91399: LD_VAR 0 1
91403: PPUSH
91404: LD_INT 1
91406: PPUSH
91407: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
91411: LD_VAR 0 8
91415: PPUSH
91416: LD_VAR 0 9
91420: PPUSH
91421: LD_VAR 0 6
91425: PPUSH
91426: LD_VAR 0 7
91430: PPUSH
91431: CALL_OW 330
// repeat wait ( 1 ) ;
91435: LD_INT 1
91437: PPUSH
91438: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
91442: LD_VAR 0 1
91446: PPUSH
91447: CALL_OW 316
91451: PUSH
91452: LD_VAR 0 1
91456: PPUSH
91457: CALL_OW 314
91461: OR
91462: PUSH
91463: LD_VAR 0 1
91467: PPUSH
91468: CALL_OW 302
91472: NOT
91473: OR
91474: PUSH
91475: LD_VAR 0 1
91479: PPUSH
91480: CALL_OW 301
91484: OR
91485: IFFALSE 91435
// RemoveSeeing ( _x , _y , side ) ;
91487: LD_VAR 0 8
91491: PPUSH
91492: LD_VAR 0 9
91496: PPUSH
91497: LD_VAR 0 6
91501: PPUSH
91502: CALL_OW 331
// end ; end_of_file
91506: LD_VAR 0 4
91510: RET
// export function StopOriginalMusic ; begin
91511: LD_INT 0
91513: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
91514: LD_STRING OW_FORCEMUSICDISABLE(true);
91516: PPUSH
91517: CALL_OW 559
// end ;
91521: LD_VAR 0 1
91525: RET
// export function PlayOriginalMusic ; begin
91526: LD_INT 0
91528: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
91529: LD_STRING OW_FORCEMUSICDISABLE(false);
91531: PPUSH
91532: CALL_OW 559
// end ;
91536: LD_VAR 0 1
91540: RET
// export function PlayCustomMusic ( track , callback ) ; begin
91541: LD_INT 0
91543: PPUSH
// StopOriginalMusic ;
91544: CALL 91511 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
91548: LD_STRING playMusic("
91550: PUSH
91551: LD_VAR 0 1
91555: STR
91556: PUSH
91557: LD_STRING ", "
91559: STR
91560: PUSH
91561: LD_VAR 0 2
91565: STR
91566: PUSH
91567: LD_STRING ")
91569: STR
91570: PPUSH
91571: CALL_OW 559
// end ;
91575: LD_VAR 0 3
91579: RET
