// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 14105 0 0
// PrepareRussian ;
  12: CALL 1581 0 0
// PrepareArabian ;
  16: CALL 291 0 0
// Action ;
  20: CALL 2271 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 170: LD_ADDR_EXP 16
 174: PUSH
 175: EMPTY
 176: ST_TO_ADDR
// isAlarm := false ;
 177: LD_ADDR_EXP 17
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 185: LD_ADDR_EXP 18
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// hasRevolver := false ;
 193: LD_ADDR_EXP 8
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// heikeHasRevolver := false ;
 201: LD_ADDR_EXP 20
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 209: LD_ADDR_EXP 21
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// adminAreaDiscovered := false ;
 217: LD_ADDR_EXP 22
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// hasExplosionCollected := false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// contactWithAmerican := false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// laundryAllowed := false ;
 249: LD_ADDR_EXP 26
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// heikeAsRussian := false ;
 257: LD_ADDR_EXP 27
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// giviAsRussian := false ;
 265: LD_ADDR_EXP 28
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 273: LD_ADDR_EXP 29
 277: PUSH
 278: EMPTY
 279: ST_TO_ADDR
// enable ( entranceEvent ) ;
 280: LD_INT 1
 282: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 283: LD_INT 2
 285: DISABLE_MARKED
// end ; end_of_file
 286: LD_VAR 0 1
 290: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
// uc_side := 4 ;
 295: LD_ADDR_OWVAR 20
 299: PUSH
 300: LD_INT 4
 302: ST_TO_ADDR
// uc_nation := 1 ;
 303: LD_ADDR_OWVAR 21
 307: PUSH
 308: LD_INT 1
 310: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 311: LD_ADDR_EXP 42
 315: PUSH
 316: LD_STRING 07_Americans
 318: PPUSH
 319: CALL_OW 31
 323: ST_TO_ADDR
// if americanSquad < 5 then
 324: LD_EXP 42
 328: PUSH
 329: LD_INT 5
 331: LESS
 332: IFFALSE 424
// begin if not americanSquad then
 334: LD_EXP 42
 338: NOT
 339: IFFALSE 348
// americanSquad := [ ] ;
 341: LD_ADDR_EXP 42
 345: PUSH
 346: EMPTY
 347: ST_TO_ADDR
// for i := americanSquad to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
 348: LD_ADDR_VAR 0 2
 352: PUSH
 353: DOUBLE
 354: LD_EXP 42
 358: DEC
 359: ST_TO_ADDR
 360: LD_INT 3
 362: PUSH
 363: LD_INT 4
 365: PUSH
 366: LD_INT 5
 368: PUSH
 369: LD_INT 5
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: LIST
 376: LIST
 377: PUSH
 378: LD_OWVAR 67
 382: ARRAY
 383: PUSH
 384: FOR_TO
 385: IFFALSE 422
// begin PrepareHuman ( false , 2 , 6 ) ;
 387: LD_INT 0
 389: PPUSH
 390: LD_INT 2
 392: PPUSH
 393: LD_INT 6
 395: PPUSH
 396: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 400: LD_ADDR_EXP 42
 404: PUSH
 405: LD_EXP 42
 409: PPUSH
 410: CALL_OW 44
 414: PPUSH
 415: CALL 51866 0 2
 419: ST_TO_ADDR
// end ;
 420: GO 384
 422: POP
 423: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 424: LD_ADDR_EXP 44
 428: PUSH
 429: LD_STRING UsCommander
 431: PPUSH
 432: LD_EXP 1
 436: NOT
 437: PPUSH
 438: LD_STRING 07_
 440: PPUSH
 441: CALL 14490 0 3
 445: ST_TO_ADDR
// if not Doug then
 446: LD_EXP 44
 450: NOT
 451: IFFALSE 485
// begin PrepareSoldier ( sex_male , 6 ) ;
 453: LD_INT 1
 455: PPUSH
 456: LD_INT 6
 458: PPUSH
 459: CALL_OW 381
// Doug := CreateHuman ;
 463: LD_ADDR_EXP 44
 467: PUSH
 468: CALL_OW 44
 472: ST_TO_ADDR
// SetClass ( Doug , class_prison ) ;
 473: LD_EXP 44
 477: PPUSH
 478: LD_INT 33
 480: PPUSH
 481: CALL_OW 336
// end ; if johnnySaved or debug then
 485: LD_EXP 3
 489: PUSH
 490: LD_EXP 1
 494: OR
 495: IFFALSE 522
// begin Harris := NewCharacter ( Harris ) ;
 497: LD_ADDR_EXP 43
 501: PUSH
 502: LD_STRING Harris
 504: PPUSH
 505: CALL_OW 25
 509: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 510: LD_EXP 43
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: CALL_OW 336
// end ; uc_side := 2 ;
 522: LD_ADDR_OWVAR 20
 526: PUSH
 527: LD_INT 2
 529: ST_TO_ADDR
// uc_nation := 2 ;
 530: LD_ADDR_OWVAR 21
 534: PUSH
 535: LD_INT 2
 537: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 538: LD_ADDR_EXP 30
 542: PUSH
 543: LD_STRING Heike
 545: PPUSH
 546: LD_EXP 1
 550: NOT
 551: PPUSH
 552: LD_EXP 2
 556: PPUSH
 557: CALL 14490 0 3
 561: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 562: LD_ADDR_EXP 33
 566: PUSH
 567: LD_STRING Ibrahim
 569: PPUSH
 570: LD_EXP 1
 574: NOT
 575: PPUSH
 576: LD_EXP 2
 580: PPUSH
 581: CALL 14490 0 3
 585: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 586: LD_ADDR_EXP 31
 590: PUSH
 591: LD_STRING Givi
 593: PPUSH
 594: LD_EXP 1
 598: NOT
 599: PPUSH
 600: LD_EXP 2
 604: PPUSH
 605: CALL 14490 0 3
 609: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 610: LD_ADDR_EXP 34
 614: PUSH
 615: LD_STRING Kamil
 617: PPUSH
 618: LD_EXP 1
 622: NOT
 623: PPUSH
 624: LD_EXP 2
 628: PPUSH
 629: CALL 14490 0 3
 633: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 634: LD_ADDR_EXP 35
 638: PUSH
 639: LD_STRING Kaia
 641: PPUSH
 642: LD_EXP 1
 646: NOT
 647: PPUSH
 648: LD_EXP 2
 652: PPUSH
 653: CALL 14490 0 3
 657: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 658: LD_ADDR_EXP 36
 662: PUSH
 663: LD_STRING Sophia
 665: PPUSH
 666: LD_EXP 1
 670: NOT
 671: PPUSH
 672: LD_EXP 2
 676: PPUSH
 677: CALL 14490 0 3
 681: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 682: LD_ADDR_EXP 37
 686: PUSH
 687: LD_STRING Markov
 689: PPUSH
 690: LD_EXP 1
 694: NOT
 695: PPUSH
 696: LD_EXP 2
 700: PPUSH
 701: CALL 14490 0 3
 705: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 706: LD_ADDR_EXP 40
 710: PUSH
 711: LD_STRING Aviradze
 713: PPUSH
 714: LD_EXP 1
 718: NOT
 719: PPUSH
 720: LD_EXP 2
 724: PPUSH
 725: CALL 14490 0 3
 729: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 730: LD_ADDR_EXP 39
 734: PUSH
 735: LD_STRING Kurt
 737: PPUSH
 738: LD_EXP 1
 742: NOT
 743: PPUSH
 744: LD_EXP 2
 748: PPUSH
 749: CALL 14490 0 3
 753: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 754: LD_ADDR_EXP 32
 758: PUSH
 759: LD_STRING Mike
 761: PPUSH
 762: LD_EXP 1
 766: NOT
 767: PPUSH
 768: LD_EXP 2
 772: PPUSH
 773: CALL 14490 0 3
 777: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 778: LD_ADDR_EXP 38
 782: PUSH
 783: LD_STRING Olaf
 785: PPUSH
 786: LD_INT 0
 788: PPUSH
 789: LD_STRING 
 791: PPUSH
 792: CALL 14490 0 3
 796: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 797: LD_ADDR_EXP 41
 801: PUSH
 802: LD_STRING 07_others
 804: PPUSH
 805: CALL_OW 31
 809: ST_TO_ADDR
// end ;
 810: LD_VAR 0 1
 814: RET
// export function PrepareGame ; var i ; begin
 815: LD_INT 0
 817: PPUSH
 818: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 819: LD_EXP 30
 823: PPUSH
 824: LD_INT 23
 826: PPUSH
 827: CALL_OW 52
// if Givi then
 831: LD_EXP 31
 835: IFFALSE 873
// begin SetSide ( Givi , 5 ) ;
 837: LD_EXP 31
 841: PPUSH
 842: LD_INT 5
 844: PPUSH
 845: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 849: LD_EXP 31
 853: PPUSH
 854: LD_INT 9
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL_OW 49
// ComHold ( Givi ) ;
 864: LD_EXP 31
 868: PPUSH
 869: CALL_OW 140
// end ; if Markov then
 873: LD_EXP 37
 877: IFFALSE 903
// begin SetSide ( Markov , 5 ) ;
 879: LD_EXP 37
 883: PPUSH
 884: LD_INT 5
 886: PPUSH
 887: CALL_OW 235
// PlaceHumanInUnit ( Markov , ruFac ) ;
 891: LD_EXP 37
 895: PPUSH
 896: LD_INT 61
 898: PPUSH
 899: CALL_OW 52
// end ; if Olaf then
 903: LD_EXP 38
 907: IFFALSE 948
// begin SetSide ( Olaf , 5 ) ;
 909: LD_EXP 38
 913: PPUSH
 914: LD_INT 5
 916: PPUSH
 917: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
 921: LD_EXP 38
 925: PPUSH
 926: LD_INT 16
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
 936: LD_EXP 38
 940: PPUSH
 941: LD_INT 3
 943: PPUSH
 944: CALL 55018 0 2
// end ; if Kamil then
 948: LD_EXP 34
 952: IFFALSE 978
// begin SetSide ( Kamil , 5 ) ;
 954: LD_EXP 34
 958: PPUSH
 959: LD_INT 5
 961: PPUSH
 962: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
 966: LD_EXP 34
 970: PPUSH
 971: LD_INT 109
 973: PPUSH
 974: CALL_OW 52
// end ; if Kurt then
 978: LD_EXP 39
 982: IFFALSE 1008
// begin SetSide ( Kurt , 5 ) ;
 984: LD_EXP 39
 988: PPUSH
 989: LD_INT 5
 991: PPUSH
 992: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
 996: LD_EXP 39
1000: PPUSH
1001: LD_INT 169
1003: PPUSH
1004: CALL_OW 52
// end ; if Kaia then
1008: LD_EXP 35
1012: IFFALSE 1038
// begin SetSide ( Kaia , 5 ) ;
1014: LD_EXP 35
1018: PPUSH
1019: LD_INT 5
1021: PPUSH
1022: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1026: LD_EXP 35
1030: PPUSH
1031: LD_INT 147
1033: PPUSH
1034: CALL_OW 52
// end ; if Harris then
1038: LD_EXP 43
1042: IFFALSE 1080
// begin SetSide ( Harris , 4 ) ;
1044: LD_EXP 43
1048: PPUSH
1049: LD_INT 4
1051: PPUSH
1052: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1056: LD_EXP 43
1060: PPUSH
1061: LD_INT 20
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: CALL_OW 49
// ComHold ( i ) ;
1071: LD_VAR 0 2
1075: PPUSH
1076: CALL_OW 140
// end ; if Doug then
1080: LD_EXP 44
1084: IFFALSE 1110
// begin SetSide ( Doug , 4 ) ;
1086: LD_EXP 44
1090: PPUSH
1091: LD_INT 4
1093: PPUSH
1094: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1098: LD_EXP 44
1102: PPUSH
1103: LD_INT 106
1105: PPUSH
1106: CALL_OW 52
// end ; if Aviradze then
1110: LD_EXP 40
1114: IFFALSE 1140
// begin SetSide ( Aviradze , 5 ) ;
1116: LD_EXP 40
1120: PPUSH
1121: LD_INT 5
1123: PPUSH
1124: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1128: LD_EXP 40
1132: PPUSH
1133: LD_INT 119
1135: PPUSH
1136: CALL_OW 52
// end ; if Ibrahim then
1140: LD_EXP 33
1144: IFFALSE 1170
// begin SetSide ( Ibrahim , 5 ) ;
1146: LD_EXP 33
1150: PPUSH
1151: LD_INT 5
1153: PPUSH
1154: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1158: LD_EXP 33
1162: PPUSH
1163: LD_INT 119
1165: PPUSH
1166: CALL_OW 52
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1170: LD_EXP 48
1174: PPUSH
1175: LD_INT 119
1177: PPUSH
1178: CALL_OW 52
// for i in americanSquad do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_EXP 42
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1221
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1195: LD_VAR 0 2
1199: PPUSH
1200: LD_INT 21
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 49
// ComHold ( i ) ;
1210: LD_VAR 0 2
1214: PPUSH
1215: CALL_OW 140
// end ;
1219: GO 1192
1221: POP
1222: POP
// for i in heikeSecondSquad do
1223: LD_ADDR_VAR 0 2
1227: PUSH
1228: LD_EXP 41
1232: PUSH
1233: FOR_IN
1234: IFFALSE 1262
// begin PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1236: LD_VAR 0 2
1240: PPUSH
1241: LD_INT 22
1243: PPUSH
1244: LD_INT 0
1246: PPUSH
1247: CALL_OW 49
// ComHold ( i ) ;
1251: LD_VAR 0 2
1255: PPUSH
1256: CALL_OW 140
// end ;
1260: GO 1233
1262: POP
1263: POP
// if not hasVodka then
1264: LD_EXP 4
1268: NOT
1269: IFFALSE 1328
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1271: LD_ADDR_VAR 0 2
1275: PUSH
1276: LD_INT 2
1278: PUSH
1279: LD_INT 22
1281: PUSH
1282: LD_INT 2
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 22
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: PPUSH
1304: CALL_OW 69
1308: PUSH
1309: FOR_IN
1310: IFFALSE 1326
// SetLives ( i , 500 ) ;
1312: LD_VAR 0 2
1316: PPUSH
1317: LD_INT 500
1319: PPUSH
1320: CALL_OW 234
1324: GO 1309
1326: POP
1327: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1328: LD_ADDR_VAR 0 2
1332: PUSH
1333: LD_INT 22
1335: PUSH
1336: LD_INT 4
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PPUSH
1343: CALL_OW 69
1347: PUSH
1348: FOR_IN
1349: IFFALSE 1365
// SetLives ( i , 500 ) ;
1351: LD_VAR 0 2
1355: PPUSH
1356: LD_INT 500
1358: PPUSH
1359: CALL_OW 234
1363: GO 1348
1365: POP
1366: POP
// end ;
1367: LD_VAR 0 1
1371: RET
// export function SetClassKaiaRevolver ; begin
1372: LD_INT 0
1374: PPUSH
// if IsOk ( Kaia ) then
1375: LD_EXP 35
1379: PPUSH
1380: CALL_OW 302
1384: IFFALSE 1398
// SetClass ( Kaia , class_revolver ) ;
1386: LD_EXP 35
1390: PPUSH
1391: LD_INT 34
1393: PPUSH
1394: CALL_OW 336
// end ;
1398: LD_VAR 0 1
1402: RET
// export function SpawnHeikeAsRussian ; begin
1403: LD_INT 0
1405: PPUSH
// RemoveUnit ( Heike ) ;
1406: LD_EXP 30
1410: PPUSH
1411: CALL_OW 64
// heikeTmp := Heike ;
1415: LD_ADDR_EXP 45
1419: PUSH
1420: LD_EXP 30
1424: ST_TO_ADDR
// uc_side := 2 ;
1425: LD_ADDR_OWVAR 20
1429: PUSH
1430: LD_INT 2
1432: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1433: LD_ADDR_EXP 30
1437: PUSH
1438: LD_STRING HeikeRu
1440: PPUSH
1441: CALL_OW 25
1445: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1446: LD_EXP 45
1450: PPUSH
1451: LD_EXP 30
1455: PPUSH
1456: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1460: LD_EXP 30
1464: PPUSH
1465: LD_INT 165
1467: PPUSH
1468: CALL_OW 52
// heikeAsRussian := true ;
1472: LD_ADDR_EXP 27
1476: PUSH
1477: LD_INT 1
1479: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1480: LD_STRING M1-laundry-out
1482: PPUSH
1483: CALL_OW 604
// end ;
1487: LD_VAR 0 1
1491: RET
// export function SpawnGiviAsRussian ; begin
1492: LD_INT 0
1494: PPUSH
// RemoveUnit ( Givi ) ;
1495: LD_EXP 31
1499: PPUSH
1500: CALL_OW 64
// giviTmp := Givi ;
1504: LD_ADDR_EXP 46
1508: PUSH
1509: LD_EXP 31
1513: ST_TO_ADDR
// uc_side := 2 ;
1514: LD_ADDR_OWVAR 20
1518: PUSH
1519: LD_INT 2
1521: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1522: LD_ADDR_EXP 31
1526: PUSH
1527: LD_STRING GiviRu
1529: PPUSH
1530: CALL_OW 25
1534: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1535: LD_EXP 46
1539: PPUSH
1540: LD_EXP 31
1544: PPUSH
1545: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1549: LD_EXP 31
1553: PPUSH
1554: LD_INT 165
1556: PPUSH
1557: CALL_OW 52
// giviAsRussian := true ;
1561: LD_ADDR_EXP 28
1565: PUSH
1566: LD_INT 1
1568: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1569: LD_STRING M1-laundry-out
1571: PPUSH
1572: CALL_OW 604
// end ; end_of_file
1576: LD_VAR 0 1
1580: RET
// export russianKillers , ruCommisar ; export function PrepareRussian ; var i , tmp ; begin
1581: LD_INT 0
1583: PPUSH
1584: PPUSH
1585: PPUSH
// uc_side := 3 ;
1586: LD_ADDR_OWVAR 20
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// uc_nation := 3 ;
1594: LD_ADDR_OWVAR 21
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: LD_INT 21
1609: PUSH
1610: LD_INT 3
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 69
1621: PUSH
1622: FOR_IN
1623: IFFALSE 1639
// SetBLevel ( i , 7 ) ;
1625: LD_VAR 0 2
1629: PPUSH
1630: LD_INT 7
1632: PPUSH
1633: CALL_OW 241
1637: GO 1622
1639: POP
1640: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1641: LD_ADDR_VAR 0 2
1645: PUSH
1646: LD_INT 22
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 2
1658: PUSH
1659: LD_INT 30
1661: PUSH
1662: LD_INT 0
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 30
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PPUSH
1688: CALL_OW 69
1692: PUSH
1693: FOR_IN
1694: IFFALSE 1738
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
1696: LD_VAR 0 2
1700: PPUSH
1701: CALL_OW 274
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 1000
1711: PPUSH
1712: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
1716: LD_VAR 0 2
1720: PPUSH
1721: CALL_OW 274
1725: PPUSH
1726: LD_INT 2
1728: PPUSH
1729: LD_INT 1000
1731: PPUSH
1732: CALL_OW 277
// end ;
1736: GO 1693
1738: POP
1739: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1740: LD_ADDR_VAR 0 2
1744: PUSH
1745: LD_INT 22
1747: PUSH
1748: LD_INT 3
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 32
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PPUSH
1769: CALL_OW 69
1773: PUSH
1774: FOR_IN
1775: IFFALSE 1809
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
1777: LD_INT 0
1779: PPUSH
1780: LD_INT 5
1782: PUSH
1783: LD_OWVAR 67
1787: PLUS
1788: PPUSH
1789: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
1793: CALL_OW 44
1797: PPUSH
1798: LD_VAR 0 2
1802: PPUSH
1803: CALL_OW 52
// end ;
1807: GO 1774
1809: POP
1810: POP
// end ;
1811: LD_VAR 0 1
1815: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
1816: LD_INT 0
1818: PPUSH
1819: PPUSH
1820: PPUSH
1821: PPUSH
// uc_side := 3 ;
1822: LD_ADDR_OWVAR 20
1826: PUSH
1827: LD_INT 3
1829: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
1830: LD_ADDR_OWVAR 21
1834: PUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 3
1840: PPUSH
1841: CALL_OW 12
1845: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
1846: LD_ADDR_VAR 0 4
1850: PUSH
1851: LD_INT 5
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL_OW 517
1861: ST_TO_ADDR
// for i := 1 to 3 do
1862: LD_ADDR_VAR 0 2
1866: PUSH
1867: DOUBLE
1868: LD_INT 1
1870: DEC
1871: ST_TO_ADDR
1872: LD_INT 3
1874: PUSH
1875: FOR_TO
1876: IFFALSE 1945
// begin PrepareHuman ( false , 33 , 0 ) ;
1878: LD_INT 0
1880: PPUSH
1881: LD_INT 33
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL_OW 380
// un := CreateHuman ;
1891: LD_ADDR_VAR 0 3
1895: PUSH
1896: CALL_OW 44
1900: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
1901: LD_VAR 0 3
1905: PPUSH
1906: LD_VAR 0 4
1910: PUSH
1911: LD_INT 1
1913: ARRAY
1914: PUSH
1915: LD_VAR 0 2
1919: ARRAY
1920: PPUSH
1921: LD_VAR 0 4
1925: PUSH
1926: LD_INT 2
1928: ARRAY
1929: PUSH
1930: LD_VAR 0 2
1934: ARRAY
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: CALL_OW 601
// end ;
1943: GO 1875
1945: POP
1946: POP
// end ;
1947: LD_VAR 0 1
1951: RET
// export function PrepareFirstScene ; var i , un ; begin
1952: LD_INT 0
1954: PPUSH
1955: PPUSH
1956: PPUSH
// uc_side := 4 ;
1957: LD_ADDR_OWVAR 20
1961: PUSH
1962: LD_INT 4
1964: ST_TO_ADDR
// uc_nation := 1 ;
1965: LD_ADDR_OWVAR 21
1969: PUSH
1970: LD_INT 1
1972: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
1973: LD_INT 0
1975: PPUSH
1976: LD_INT 33
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 380
// for i := 1 to 2 do
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: DOUBLE
1992: LD_INT 1
1994: DEC
1995: ST_TO_ADDR
1996: LD_INT 2
1998: PUSH
1999: FOR_TO
2000: IFFALSE 2065
// begin un := CreateHuman ;
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: CALL_OW 44
2011: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2012: LD_VAR 0 3
2016: PPUSH
2017: LD_INT 1
2019: PPUSH
2020: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2024: LD_VAR 0 3
2028: PPUSH
2029: LD_INT 6
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2039: LD_VAR 0 3
2043: PPUSH
2044: LD_INT 1
2046: PPUSH
2047: CALL 55018 0 2
// SetLives ( un , 300 ) ;
2051: LD_VAR 0 3
2055: PPUSH
2056: LD_INT 300
2058: PPUSH
2059: CALL_OW 234
// end ;
2063: GO 1999
2065: POP
2066: POP
// uc_side := 3 ;
2067: LD_ADDR_OWVAR 20
2071: PUSH
2072: LD_INT 3
2074: ST_TO_ADDR
// uc_nation := 3 ;
2075: LD_ADDR_OWVAR 21
2079: PUSH
2080: LD_INT 3
2082: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
2083: LD_INT 1
2085: PPUSH
2086: LD_INT 5
2088: PPUSH
2089: CALL_OW 381
// for i := 1 to 3 do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: DOUBLE
2099: LD_INT 1
2101: DEC
2102: ST_TO_ADDR
2103: LD_INT 3
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2180
// begin un := CreateHuman ;
2109: LD_ADDR_VAR 0 3
2113: PUSH
2114: CALL_OW 44
2118: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
2119: LD_ADDR_EXP 47
2123: PUSH
2124: LD_EXP 47
2128: PPUSH
2129: LD_VAR 0 3
2133: PPUSH
2134: CALL 51866 0 2
2138: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2139: LD_VAR 0 3
2143: PPUSH
2144: LD_INT 4
2146: PPUSH
2147: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
2151: LD_VAR 0 3
2155: PPUSH
2156: LD_INT 7
2158: PPUSH
2159: LD_INT 0
2161: PPUSH
2162: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
2166: LD_VAR 0 3
2170: PPUSH
2171: LD_INT 4
2173: PPUSH
2174: CALL 55018 0 2
// end ;
2178: GO 2106
2180: POP
2181: POP
// ruCommisar := CreateHuman ;
2182: LD_ADDR_EXP 48
2186: PUSH
2187: CALL_OW 44
2191: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
2192: LD_EXP 48
2196: PPUSH
2197: LD_INT 124
2199: PPUSH
2200: LD_INT 37
2202: PPUSH
2203: LD_INT 0
2205: PPUSH
2206: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
2210: LD_EXP 48
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
2222: LD_EXP 48
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: CALL 55018 0 2
// end ;
2234: LD_VAR 0 1
2238: RET
// export function InitRuPatrols ; begin
2239: LD_INT 0
2241: PPUSH
// uc_side := 6 ;
2242: LD_ADDR_OWVAR 20
2246: PUSH
2247: LD_INT 6
2249: ST_TO_ADDR
// uc_nation := 3 ;
2250: LD_ADDR_OWVAR 21
2254: PUSH
2255: LD_INT 3
2257: ST_TO_ADDR
// end ;
2258: LD_VAR 0 1
2262: RET
// export function SpawnAdditionalRuGuards ; begin
2263: LD_INT 0
2265: PPUSH
// end ; end_of_file
2266: LD_VAR 0 1
2270: RET
// export function Action ; var speaker , i , tmp ; begin
2271: LD_INT 0
2273: PPUSH
2274: PPUSH
2275: PPUSH
2276: PPUSH
// Video ( true ) ;
2277: LD_INT 1
2279: PPUSH
2280: CALL 51838 0 1
// hasNormalScene := Kaia or Givi ;
2284: LD_ADDR_EXP 5
2288: PUSH
2289: LD_EXP 35
2293: PUSH
2294: LD_EXP 31
2298: OR
2299: ST_TO_ADDR
// if hasNormalScene then
2300: LD_EXP 5
2304: IFFALSE 2539
// begin for i in americanSquad do
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_EXP 42
2315: PUSH
2316: FOR_IN
2317: IFFALSE 2363
// begin SetClass ( i , 33 ) ;
2319: LD_VAR 0 3
2323: PPUSH
2324: LD_INT 33
2326: PPUSH
2327: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
2331: LD_VAR 0 3
2335: PPUSH
2336: LD_INT 78
2338: PPUSH
2339: LD_INT 16
2341: PPUSH
2342: LD_INT 5
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL_OW 50
// ComHold ( i ) ;
2352: LD_VAR 0 3
2356: PPUSH
2357: CALL_OW 140
// end ;
2361: GO 2316
2363: POP
2364: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
2365: LD_ADDR_VAR 0 4
2369: PUSH
2370: LD_EXP 32
2374: PUSH
2375: LD_EXP 33
2379: PUSH
2380: LD_EXP 34
2384: PUSH
2385: LD_EXP 35
2389: PUSH
2390: LD_EXP 36
2394: PUSH
2395: LD_EXP 37
2399: PUSH
2400: LD_EXP 38
2404: PUSH
2405: LD_EXP 39
2409: PUSH
2410: LD_EXP 31
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: PUSH
2426: LD_EXP 41
2430: UNION
2431: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
2432: LD_EXP 30
2436: PPUSH
2437: LD_INT 33
2439: PPUSH
2440: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
2444: LD_EXP 30
2448: PPUSH
2449: LD_INT 117
2451: PPUSH
2452: LD_INT 24
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL 54006 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
2465: LD_EXP 30
2469: PPUSH
2470: LD_INT 123
2472: PPUSH
2473: LD_INT 39
2475: PPUSH
2476: CALL_OW 118
// for i in tmp do
2480: LD_ADDR_VAR 0 3
2484: PUSH
2485: LD_VAR 0 4
2489: PUSH
2490: FOR_IN
2491: IFFALSE 2537
// begin SetClass ( i , 33 ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 33
2500: PPUSH
2501: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
2505: LD_VAR 0 3
2509: PPUSH
2510: LD_INT 3
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 113
2527: PPUSH
2528: LD_INT 16
2530: PPUSH
2531: CALL_OW 118
// end ;
2535: GO 2490
2537: POP
2538: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
2539: LD_INT 124
2541: PPUSH
2542: LD_INT 39
2544: PPUSH
2545: CALL_OW 86
// PrepareDeadBodies ;
2549: CALL 1816 0 0
// PrepareFirstScene ;
2553: CALL 1952 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
2557: LD_INT 152
2559: PPUSH
2560: LD_INT 65
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: LD_INT 70
2568: NEG
2569: PPUSH
2570: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
2574: LD_INT 152
2576: PPUSH
2577: LD_INT 65
2579: PPUSH
2580: LD_INT 2
2582: PPUSH
2583: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
2587: LD_INT 122
2589: PPUSH
2590: LD_INT 40
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: LD_INT 8
2598: NEG
2599: PPUSH
2600: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
2604: LD_INT 124
2606: PPUSH
2607: LD_INT 37
2609: PPUSH
2610: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
2614: LD_EXP 48
2618: PPUSH
2619: LD_STRING DRum-Execution-1
2621: PPUSH
2622: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
2626: LD_EXP 48
2630: PPUSH
2631: LD_STRING DRum-Execution-2
2633: PPUSH
2634: CALL_OW 88
// wait ( 0 0$01 ) ;
2638: LD_INT 35
2640: PPUSH
2641: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
2645: LD_EXP 48
2649: PPUSH
2650: LD_STRING DRum-Execution-3
2652: PPUSH
2653: CALL_OW 88
// wait ( 0 0$1 ) ;
2657: LD_INT 35
2659: PPUSH
2660: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
2664: LD_EXP 48
2668: PPUSH
2669: LD_STRING DRum-Execution-4
2671: PPUSH
2672: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
2676: LD_EXP 47
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: LD_INT 122
2687: PPUSH
2688: LD_INT 39
2690: PPUSH
2691: CALL_OW 428
2695: PPUSH
2696: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
2700: LD_EXP 47
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: LD_INT 123
2711: PPUSH
2712: LD_INT 41
2714: PPUSH
2715: CALL_OW 428
2719: PPUSH
2720: CALL_OW 115
// AddComHold ( russianKillers ) ;
2724: LD_EXP 47
2728: PPUSH
2729: CALL_OW 200
// wait ( 0 0$1 ) ;
2733: LD_INT 35
2735: PPUSH
2736: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
2740: LD_INT 122
2742: PPUSH
2743: LD_INT 40
2745: PPUSH
2746: LD_INT 2
2748: PPUSH
2749: CALL_OW 331
// for i in russianKillers union ruCommisar do
2753: LD_ADDR_VAR 0 3
2757: PUSH
2758: LD_EXP 47
2762: PUSH
2763: LD_EXP 48
2767: UNION
2768: PUSH
2769: FOR_IN
2770: IFFALSE 2783
// RemoveUnit ( i ) ;
2772: LD_VAR 0 3
2776: PPUSH
2777: CALL_OW 64
2781: GO 2769
2783: POP
2784: POP
// if hasNormalScene then
2785: LD_EXP 5
2789: IFFALSE 2797
// ActionNormal else
2791: CALL 2806 0 0
2795: GO 2801
// ActionAdditional ;
2797: CALL 4569 0 0
// end ;
2801: LD_VAR 0 1
2805: RET
// function ActionNormal ; var i , tmp ; begin
2806: LD_INT 0
2808: PPUSH
2809: PPUSH
2810: PPUSH
// CenterNowOnUnits ( Heike ) ;
2811: LD_EXP 30
2815: PPUSH
2816: CALL_OW 87
// wait ( 0 0$1 ) ;
2820: LD_INT 35
2822: PPUSH
2823: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
2827: LD_EXP 30
2831: PPUSH
2832: LD_INT 115
2834: PPUSH
2835: LD_INT 19
2837: PPUSH
2838: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
2842: LD_EXP 30
2846: PPUSH
2847: LD_INT 113
2849: PPUSH
2850: LD_INT 16
2852: PPUSH
2853: CALL_OW 178
// wait ( 0 0$2 ) ;
2857: LD_INT 70
2859: PPUSH
2860: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
2864: LD_EXP 30
2868: PPUSH
2869: LD_STRING DH-Conspiracy-1
2871: PPUSH
2872: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
2876: LD_EXP 35
2880: PPUSH
2881: LD_STRING DK-Conspiracy-2
2883: PPUSH
2884: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
2888: LD_EXP 31
2892: PPUSH
2893: LD_STRING DG-Conspiracy-3
2895: PPUSH
2896: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
2900: LD_EXP 31
2904: PPUSH
2905: LD_STRING DG-Conspiracy-4
2907: PPUSH
2908: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
2912: LD_EXP 30
2916: PPUSH
2917: LD_STRING DH-Conspiracy-5
2919: PPUSH
2920: CALL_OW 88
// if IsOk ( Kamil ) then
2924: LD_EXP 34
2928: PPUSH
2929: CALL_OW 302
2933: IFFALSE 2991
// begin hasVodka := true ;
2935: LD_ADDR_EXP 4
2939: PUSH
2940: LD_INT 1
2942: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
2943: LD_EXP 34
2947: PPUSH
2948: LD_STRING DKam-Conspiracy-6
2950: PPUSH
2951: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
2955: LD_EXP 34
2959: PPUSH
2960: LD_STRING DKam-Conspiracy-7
2962: PPUSH
2963: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
2967: LD_EXP 34
2971: PPUSH
2972: LD_STRING DKam-Conspiracy-8
2974: PPUSH
2975: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
2979: LD_EXP 34
2983: PPUSH
2984: LD_STRING DKam-Conspiracy-9
2986: PPUSH
2987: CALL_OW 88
// end ; if IsOk ( Sophia ) then
2991: LD_EXP 36
2995: PPUSH
2996: CALL_OW 302
3000: IFFALSE 3181
// begin americanContact := true ;
3002: LD_ADDR_EXP 10
3006: PUSH
3007: LD_INT 1
3009: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
3010: LD_STRING M1-american
3012: PPUSH
3013: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
3017: LD_EXP 36
3021: PPUSH
3022: LD_STRING DS-Conspiracy-10
3024: PPUSH
3025: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
3029: LD_EXP 37
3033: PPUSH
3034: LD_STRING DM-Conspiracy-11
3036: PPUSH
3037: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
3041: LD_EXP 36
3045: PPUSH
3046: LD_STRING DS-Conspiracy-12
3048: PPUSH
3049: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
3053: LD_INT 84
3055: PPUSH
3056: LD_INT 19
3058: PPUSH
3059: LD_INT 105
3061: PPUSH
3062: CALL 13746 0 3
// if johnnySaved then
3066: LD_EXP 3
3070: IFFALSE 3110
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
3072: LD_EXP 36
3076: PPUSH
3077: LD_STRING DS-Conspiracy-13
3079: PPUSH
3080: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
3084: LD_EXP 30
3088: PPUSH
3089: LD_STRING DH-Conspiracy-14
3091: PPUSH
3092: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
3096: LD_EXP 36
3100: PPUSH
3101: LD_STRING DH-Conspiracy-15
3103: PPUSH
3104: CALL_OW 88
// end else
3108: GO 3146
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
3110: LD_EXP 36
3114: PPUSH
3115: LD_STRING DS-Conspiracy-a-13
3117: PPUSH
3118: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
3122: LD_EXP 30
3126: PPUSH
3127: LD_STRING DH-Conspiracy-a-14
3129: PPUSH
3130: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
3134: LD_EXP 36
3138: PPUSH
3139: LD_STRING DH-Conspiracy-a-15
3141: PPUSH
3142: CALL_OW 88
// end ; if IsOk ( Givi ) then
3146: LD_EXP 31
3150: PPUSH
3151: CALL_OW 302
3155: IFFALSE 3181
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
3157: LD_EXP 31
3161: PPUSH
3162: LD_STRING DG-Conspiracy-a-16
3164: PPUSH
3165: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
3169: LD_EXP 30
3173: PPUSH
3174: LD_STRING DH-Conspiracy-a-17
3176: PPUSH
3177: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
3181: LD_EXP 30
3185: PPUSH
3186: LD_STRING DH-Conspiracy-16
3188: PPUSH
3189: CALL_OW 88
// if IsOk ( Givi ) then
3193: LD_EXP 31
3197: PPUSH
3198: CALL_OW 302
3202: IFFALSE 3474
// begin hasStimDrugs := true ;
3204: LD_ADDR_EXP 9
3208: PUSH
3209: LD_INT 1
3211: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
3212: LD_STRING M1-drugs
3214: PPUSH
3215: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
3219: LD_EXP 31
3223: PPUSH
3224: LD_STRING DG-Conspiracy-17
3226: PPUSH
3227: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
3231: LD_INT 162
3233: PPUSH
3234: LD_INT 2
3236: PPUSH
3237: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
3241: LD_INT 184
3243: PPUSH
3244: LD_INT 95
3246: PPUSH
3247: LD_INT 105
3249: PPUSH
3250: CALL 13746 0 3
// SetSide ( drugsLab , 3 ) ;
3254: LD_INT 162
3256: PPUSH
3257: LD_INT 3
3259: PPUSH
3260: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
3264: LD_EXP 31
3268: PPUSH
3269: LD_STRING DG-Conspiracy-18
3271: PPUSH
3272: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
3276: LD_EXP 31
3280: PPUSH
3281: LD_STRING DG-Conspiracy-19
3283: PPUSH
3284: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
3288: LD_EXP 31
3292: PPUSH
3293: LD_STRING DG-Conspiracy-20
3295: PPUSH
3296: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
3300: LD_EXP 30
3304: PPUSH
3305: LD_STRING DH-Conspiracy-21
3307: PPUSH
3308: CALL_OW 88
// if IsOk ( Kaia ) then
3312: LD_EXP 35
3316: PPUSH
3317: CALL_OW 302
3321: IFFALSE 3395
// begin hasExplosions := true ;
3323: LD_ADDR_EXP 6
3327: PUSH
3328: LD_INT 1
3330: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
3331: LD_STRING M1-explosive
3333: PPUSH
3334: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
3338: LD_EXP 35
3342: PPUSH
3343: LD_STRING DK-Conspiracy-22
3345: PPUSH
3346: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
3350: LD_INT 73
3352: PPUSH
3353: LD_INT 2
3355: PPUSH
3356: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
3360: LD_INT 170
3362: PPUSH
3363: LD_INT 104
3365: PPUSH
3366: LD_INT 105
3368: PPUSH
3369: CALL 13746 0 3
// SetSide ( barExplosion , 3 ) ;
3373: LD_INT 73
3375: PPUSH
3376: LD_INT 3
3378: PPUSH
3379: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
3383: LD_EXP 35
3387: PPUSH
3388: LD_STRING DK-Conspiracy-23
3390: PPUSH
3391: CALL_OW 88
// end ; if IsOk ( Olaf ) then
3395: LD_EXP 38
3399: PPUSH
3400: CALL_OW 302
3404: IFFALSE 3474
// begin hasExplosionsInFactory := true ;
3406: LD_ADDR_EXP 7
3410: PUSH
3411: LD_INT 1
3413: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
3414: LD_EXP 38
3418: PPUSH
3419: LD_STRING DO-Conspiracy-24
3421: PPUSH
3422: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
3426: LD_INT 175
3428: PPUSH
3429: LD_INT 54
3431: PPUSH
3432: LD_INT 70
3434: PPUSH
3435: CALL 13746 0 3
// if IsOk ( Markov ) then
3439: LD_EXP 37
3443: PPUSH
3444: CALL_OW 302
3448: IFFALSE 3474
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
3450: LD_EXP 37
3454: PPUSH
3455: LD_STRING DMar-Conspiracy-25
3457: PPUSH
3458: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
3462: LD_EXP 37
3466: PPUSH
3467: LD_STRING DMar-Conspiracy-26
3469: PPUSH
3470: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
3474: LD_EXP 39
3478: PPUSH
3479: CALL_OW 302
3483: PUSH
3484: LD_EXP 35
3488: PPUSH
3489: CALL_OW 302
3493: AND
3494: IFFALSE 3946
// begin hasWeapons := true ;
3496: LD_ADDR_EXP 19
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
3504: LD_STRING M1-weapons
3506: PPUSH
3507: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
3511: LD_EXP 39
3515: PPUSH
3516: LD_STRING DKs-Conspiracy-27
3518: PPUSH
3519: CALL_OW 88
// if IsOk ( Givi ) then
3523: LD_EXP 31
3527: PPUSH
3528: CALL_OW 302
3532: IFFALSE 3548
// Say ( Givi , DG-Conspiracy-28 ) else
3534: LD_EXP 31
3538: PPUSH
3539: LD_STRING DG-Conspiracy-28
3541: PPUSH
3542: CALL_OW 88
3546: GO 3613
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
3548: LD_EXP 41
3552: PPUSH
3553: LD_INT 26
3555: PUSH
3556: LD_INT 1
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PPUSH
3563: CALL_OW 72
3567: PUSH
3568: LD_INT 1
3570: ARRAY
3571: PPUSH
3572: LD_STRING DArm-Conspiracy-a-28
3574: PPUSH
3575: CALL_OW 88
3579: NOT
3580: IFFALSE 3613
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
3582: LD_EXP 41
3586: PPUSH
3587: LD_INT 26
3589: PUSH
3590: LD_INT 2
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PPUSH
3597: CALL_OW 72
3601: PUSH
3602: LD_INT 1
3604: ARRAY
3605: PPUSH
3606: LD_STRING DArf-Conspiracy-a-28
3608: PPUSH
3609: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
3613: LD_EXP 39
3617: PPUSH
3618: LD_STRING DKs-Conspiracy-29
3620: PPUSH
3621: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
3625: LD_INT 192
3627: PPUSH
3628: LD_INT 122
3630: PPUSH
3631: LD_INT 105
3633: PPUSH
3634: CALL 13746 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
3638: LD_EXP 39
3642: PPUSH
3643: LD_STRING DKs-Conspiracy-30
3645: PPUSH
3646: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
3650: LD_EXP 35
3654: PPUSH
3655: LD_STRING DK-Conspiracy-31
3657: PPUSH
3658: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
3662: LD_EXP 37
3666: PPUSH
3667: LD_STRING DMar-Conspiracy-33
3669: PPUSH
3670: CALL_OW 88
3674: NOT
3675: PUSH
3676: LD_EXP 41
3680: AND
3681: IFFALSE 3748
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
3683: LD_EXP 41
3687: PPUSH
3688: LD_INT 26
3690: PUSH
3691: LD_INT 1
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PPUSH
3698: CALL_OW 72
3702: PUSH
3703: LD_INT 1
3705: ARRAY
3706: PPUSH
3707: LD_STRING DArm-Conspiracy-a-34
3709: PPUSH
3710: CALL_OW 88
3714: NOT
3715: IFFALSE 3748
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
3717: LD_EXP 41
3721: PPUSH
3722: LD_INT 26
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL_OW 72
3736: PUSH
3737: LD_INT 1
3739: ARRAY
3740: PPUSH
3741: LD_STRING DArf-Conspiracy-a-34
3743: PPUSH
3744: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
3748: LD_EXP 35
3752: PPUSH
3753: LD_STRING DK-Conspiracy-34
3755: PPUSH
3756: CALL_OW 88
// if IsOk ( Markov ) then
3760: LD_EXP 37
3764: PPUSH
3765: CALL_OW 302
3769: IFFALSE 3854
// begin hasSniperRifle := true ;
3771: LD_ADDR_EXP 11
3775: PUSH
3776: LD_INT 1
3778: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
3779: LD_EXP 37
3783: PPUSH
3784: LD_STRING DMar-Conspiracy-35
3786: PPUSH
3787: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
3791: LD_EXP 35
3795: PPUSH
3796: LD_STRING DK-Conspiracy-36
3798: PPUSH
3799: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
3803: LD_EXP 37
3807: PPUSH
3808: LD_STRING DMar-Conspiracy-37
3810: PPUSH
3811: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
3815: LD_EXP 37
3819: PPUSH
3820: LD_STRING DMar-Conspiracy-38
3822: PPUSH
3823: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
3827: LD_INT 137
3829: PPUSH
3830: LD_INT 98
3832: PPUSH
3833: LD_INT 105
3835: PPUSH
3836: CALL 13746 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
3840: LD_EXP 37
3844: PPUSH
3845: LD_STRING DMar-Conspiracy-39
3847: PPUSH
3848: CALL_OW 88
// end else
3852: GO 3946
// if heikeSecondSquad then
3854: LD_EXP 41
3858: IFFALSE 3946
// begin hasSniperRifle := true ;
3860: LD_ADDR_EXP 11
3864: PUSH
3865: LD_INT 1
3867: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
3868: LD_INT 137
3870: PPUSH
3871: LD_INT 98
3873: PPUSH
3874: LD_INT 105
3876: PPUSH
3877: CALL 13746 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
3881: LD_EXP 41
3885: PPUSH
3886: LD_INT 26
3888: PUSH
3889: LD_INT 1
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PPUSH
3896: CALL_OW 72
3900: PUSH
3901: LD_INT 1
3903: ARRAY
3904: PPUSH
3905: LD_STRING DArm-Conspiracy-a-35
3907: PPUSH
3908: CALL_OW 88
3912: NOT
3913: IFFALSE 3946
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
3915: LD_EXP 41
3919: PPUSH
3920: LD_INT 26
3922: PUSH
3923: LD_INT 2
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PPUSH
3930: CALL_OW 72
3934: PUSH
3935: LD_INT 1
3937: ARRAY
3938: PPUSH
3939: LD_STRING DArf-Conspiracy-a-35
3941: PPUSH
3942: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
3946: LD_EXP 30
3950: PPUSH
3951: LD_STRING DH-Conspiracy-40
3953: PPUSH
3954: CALL_OW 88
// if IsOk ( Mike ) then
3958: LD_EXP 32
3962: PPUSH
3963: CALL_OW 302
3967: IFFALSE 4026
// begin hasScout := true ;
3969: LD_ADDR_EXP 12
3973: PUSH
3974: LD_INT 1
3976: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
3977: LD_EXP 32
3981: PPUSH
3982: LD_STRING DM-Conspiracy-41
3984: PPUSH
3985: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
3989: LD_EXP 32
3993: PPUSH
3994: LD_STRING DM-Conspiracy-42
3996: PPUSH
3997: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
4001: LD_INT 73
4003: PPUSH
4004: LD_INT 102
4006: PPUSH
4007: LD_INT 105
4009: PPUSH
4010: CALL 13746 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
4014: LD_EXP 32
4018: PPUSH
4019: LD_STRING DM-Conspiracy-43
4021: PPUSH
4022: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
4026: LD_EXP 4
4030: PUSH
4031: LD_EXP 35
4035: PPUSH
4036: CALL_OW 302
4040: AND
4041: PUSH
4042: LD_EXP 39
4046: PPUSH
4047: CALL_OW 302
4051: AND
4052: IFFALSE 4098
// begin hasMethanol := true ;
4054: LD_ADDR_EXP 13
4058: PUSH
4059: LD_INT 1
4061: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
4062: LD_EXP 35
4066: PPUSH
4067: LD_STRING DK-Conspiracy-44
4069: PPUSH
4070: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
4074: LD_EXP 35
4078: PPUSH
4079: LD_STRING DK-Conspiracy-45
4081: PPUSH
4082: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
4086: LD_EXP 34
4090: PPUSH
4091: LD_STRING DKam-Conspiracy-46
4093: PPUSH
4094: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
4098: LD_EXP 30
4102: PPUSH
4103: LD_STRING DH-Conspiracy-47
4105: PPUSH
4106: CALL_OW 88
// wait ( 0 0$1 ) ;
4110: LD_INT 35
4112: PPUSH
4113: CALL_OW 67
// your_side := 8 ;
4117: LD_ADDR_OWVAR 2
4121: PUSH
4122: LD_INT 8
4124: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
4125: LD_INT 1
4127: PPUSH
4128: LD_INT 1
4130: PPUSH
4131: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
4135: LD_ADDR_VAR 0 2
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 22
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: PUSH
4153: LD_INT 22
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 21
4170: PUSH
4171: LD_INT 1
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 69
4186: PUSH
4187: FOR_IN
4188: IFFALSE 4201
// RemoveUnit ( i ) ;
4190: LD_VAR 0 2
4194: PPUSH
4195: CALL_OW 64
4199: GO 4187
4201: POP
4202: POP
// wait ( 0 0$0.3 ) ;
4203: LD_INT 10
4205: PPUSH
4206: CALL_OW 67
// Query ( StartInfo1 ) ;
4210: LD_STRING StartInfo1
4212: PPUSH
4213: CALL_OW 97
// wait ( 0 0$1 ) ;
4217: LD_INT 35
4219: PPUSH
4220: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
4224: LD_STRING colors_night.txt
4226: PPUSH
4227: CALL_OW 544
// Query ( StartInfo2 ) ;
4231: LD_STRING StartInfo2
4233: PPUSH
4234: CALL_OW 97
// PrepareGame ;
4238: CALL 815 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4242: LD_INT 152
4244: PPUSH
4245: LD_INT 65
4247: PPUSH
4248: LD_INT 2
4250: PPUSH
4251: LD_INT 70
4253: NEG
4254: PPUSH
4255: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4259: LD_INT 152
4261: PPUSH
4262: LD_INT 65
4264: PPUSH
4265: LD_INT 2
4267: PPUSH
4268: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
4272: LD_INT 133
4274: PPUSH
4275: LD_INT 76
4277: PPUSH
4278: LD_INT 2
4280: PPUSH
4281: LD_INT 6
4283: NEG
4284: PPUSH
4285: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
4289: LD_INT 152
4291: PPUSH
4292: LD_INT 65
4294: PPUSH
4295: LD_INT 8
4297: PPUSH
4298: LD_INT 70
4300: NEG
4301: PPUSH
4302: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
4306: LD_INT 152
4308: PPUSH
4309: LD_INT 65
4311: PPUSH
4312: LD_INT 8
4314: PPUSH
4315: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
4319: LD_INT 133
4321: PPUSH
4322: LD_INT 76
4324: PPUSH
4325: LD_INT 8
4327: PPUSH
4328: LD_INT 6
4330: NEG
4331: PPUSH
4332: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
4336: LD_INT 23
4338: PPUSH
4339: CALL_OW 87
// dialogue_skipped := false ;
4343: LD_ADDR_OWVAR 59
4347: PUSH
4348: LD_INT 0
4350: ST_TO_ADDR
// Say ( Heike , DH-Escape-1 ) ;
4351: LD_EXP 30
4355: PPUSH
4356: LD_STRING DH-Escape-1
4358: PPUSH
4359: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
4363: LD_EXP 30
4367: PPUSH
4368: LD_STRING DH-Escape-2
4370: PPUSH
4371: CALL_OW 88
// StartLockerMinigame ;
4375: CALL 14153 0 0
// wait ( 0 0$1 ) ;
4379: LD_INT 35
4381: PPUSH
4382: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
4386: LD_EXP 30
4390: PPUSH
4391: LD_STRING DH-Escape-4
4393: PPUSH
4394: CALL_OW 88
// wait ( 0 0$3 ) ;
4398: LD_INT 105
4400: PPUSH
4401: CALL_OW 67
// your_side := 2 ;
4405: LD_ADDR_OWVAR 2
4409: PUSH
4410: LD_INT 2
4412: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
4413: LD_EXP 30
4417: PPUSH
4418: CALL_OW 122
// AddComMoveXY ( Heike , 128 , 64 ) ;
4422: LD_EXP 30
4426: PPUSH
4427: LD_INT 128
4429: PPUSH
4430: LD_INT 64
4432: PPUSH
4433: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4437: LD_INT 35
4439: PPUSH
4440: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
4444: LD_EXP 30
4448: PPUSH
4449: LD_INT 128
4451: PPUSH
4452: LD_INT 64
4454: PPUSH
4455: CALL_OW 307
4459: IFFALSE 4437
// ComHold ( Heike ) ;
4461: LD_EXP 30
4465: PPUSH
4466: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
4470: LD_EXP 30
4474: PPUSH
4475: LD_STRING DH-Start-1
4477: PPUSH
4478: CALL_OW 88
// if not americanContact then
4482: LD_EXP 10
4486: NOT
4487: IFFALSE 4503
// Say ( Heike , DH-Start-c-2 ) else
4489: LD_EXP 30
4493: PPUSH
4494: LD_STRING DH-Start-c-2
4496: PPUSH
4497: CALL_OW 88
4501: GO 4535
// if johnnySaved then
4503: LD_EXP 3
4507: IFFALSE 4523
// Say ( Heike , DH-Start-a-2 ) else
4509: LD_EXP 30
4513: PPUSH
4514: LD_STRING DH-Start-a-2
4516: PPUSH
4517: CALL_OW 88
4521: GO 4535
// Say ( Heike , DH-Start-b-2 ) ;
4523: LD_EXP 30
4527: PPUSH
4528: LD_STRING DH-Start-b-2
4530: PPUSH
4531: CALL_OW 88
// Video ( false ) ;
4535: LD_INT 0
4537: PPUSH
4538: CALL 51838 0 1
// tick := 0 ;
4542: LD_ADDR_OWVAR 1
4546: PUSH
4547: LD_INT 0
4549: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
4550: LD_STRING M1
4552: PPUSH
4553: CALL_OW 337
// enable ( gameStartEvent ) ;
4557: LD_INT 2
4559: ENABLE_MARKED
// SaveForQuickRestart ;
4560: CALL_OW 22
// end ;
4564: LD_VAR 0 1
4568: RET
// function ActionAdditional ; var i , un , tmp ; begin
4569: LD_INT 0
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
4575: LD_INT 115
4577: PPUSH
4578: LD_INT 27
4580: PPUSH
4581: LD_INT 2
4583: PPUSH
4584: LD_INT 6
4586: NEG
4587: PPUSH
4588: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
4592: LD_EXP 30
4596: PPUSH
4597: LD_INT 115
4599: PPUSH
4600: LD_INT 27
4602: PPUSH
4603: CALL_OW 428
4607: PPUSH
4608: CALL_OW 52
// SetClass ( Heike , 33 ) ;
4612: LD_EXP 30
4616: PPUSH
4617: LD_INT 33
4619: PPUSH
4620: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
4624: LD_INT 124
4626: PPUSH
4627: LD_INT 39
4629: PPUSH
4630: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
4634: LD_EXP 30
4638: PPUSH
4639: LD_STRING DH-Fail-1
4641: PPUSH
4642: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
4646: LD_INT 3
4648: PPUSH
4649: CALL_OW 427
// ComExit ( Heike ) ;
4653: LD_EXP 30
4657: PPUSH
4658: CALL 52264 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
4662: LD_EXP 30
4666: PPUSH
4667: LD_INT 109
4669: PPUSH
4670: LD_INT 33
4672: PPUSH
4673: CALL_OW 171
// AddComHold ( Heike ) ;
4677: LD_EXP 30
4681: PPUSH
4682: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
4686: LD_INT 115
4688: PPUSH
4689: LD_INT 27
4691: PPUSH
4692: LD_INT 2
4694: PPUSH
4695: CALL_OW 331
// wait ( 0 0$2 ) ;
4699: LD_INT 70
4701: PPUSH
4702: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4706: LD_INT 35
4708: PPUSH
4709: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
4713: LD_EXP 30
4717: PPUSH
4718: LD_INT 109
4720: PPUSH
4721: LD_INT 33
4723: PPUSH
4724: CALL_OW 307
4728: IFFALSE 4706
// Say ( Heike , DH-Fail-2 ) ;
4730: LD_EXP 30
4734: PPUSH
4735: LD_STRING DH-Fail-2
4737: PPUSH
4738: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
4742: LD_EXP 30
4746: PPUSH
4747: LD_INT 111
4749: PPUSH
4750: LD_INT 48
4752: PPUSH
4753: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4757: LD_INT 35
4759: PPUSH
4760: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
4764: LD_EXP 30
4768: PPUSH
4769: LD_INT 111
4771: PPUSH
4772: LD_INT 48
4774: PPUSH
4775: CALL_OW 297
4779: PUSH
4780: LD_INT 4
4782: LESS
4783: IFFALSE 4757
// AddComMoveXY ( Heike , 106 , 72 ) ;
4785: LD_EXP 30
4789: PPUSH
4790: LD_INT 106
4792: PPUSH
4793: LD_INT 72
4795: PPUSH
4796: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
4800: LD_EXP 30
4804: PPUSH
4805: LD_INT 103
4807: PPUSH
4808: LD_INT 80
4810: PPUSH
4811: CALL_OW 171
// uc_side := 3 ;
4815: LD_ADDR_OWVAR 20
4819: PUSH
4820: LD_INT 3
4822: ST_TO_ADDR
// uc_nation := 3 ;
4823: LD_ADDR_OWVAR 21
4827: PUSH
4828: LD_INT 3
4830: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
4831: LD_INT 1
4833: PPUSH
4834: LD_INT 1
4836: PPUSH
4837: LD_INT 6
4839: PPUSH
4840: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
4844: LD_ADDR_OWVAR 29
4848: PUSH
4849: LD_INT 12
4851: PUSH
4852: LD_INT 12
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: ST_TO_ADDR
// un := CreateHuman ;
4859: LD_ADDR_VAR 0 3
4863: PUSH
4864: CALL_OW 44
4868: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
4869: LD_VAR 0 3
4873: PPUSH
4874: LD_INT 134
4876: PPUSH
4877: LD_INT 52
4879: PPUSH
4880: LD_INT 4
4882: PPUSH
4883: LD_INT 0
4885: PPUSH
4886: CALL 54006 0 5
// ComTurnUnit ( un , Heike ) ;
4890: LD_VAR 0 3
4894: PPUSH
4895: LD_EXP 30
4899: PPUSH
4900: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
4904: LD_VAR 0 3
4908: PPUSH
4909: LD_EXP 30
4913: PPUSH
4914: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
4918: LD_VAR 0 3
4922: PPUSH
4923: LD_STRING DRum-Fail-3
4925: PPUSH
4926: CALL_OW 88
// for i := 1 to 3 do
4930: LD_ADDR_VAR 0 2
4934: PUSH
4935: DOUBLE
4936: LD_INT 1
4938: DEC
4939: ST_TO_ADDR
4940: LD_INT 3
4942: PUSH
4943: FOR_TO
4944: IFFALSE 5017
// begin PrepareSoldier ( false , 10 ) ;
4946: LD_INT 0
4948: PPUSH
4949: LD_INT 10
4951: PPUSH
4952: CALL_OW 381
// un := CreateHuman ;
4956: LD_ADDR_VAR 0 3
4960: PUSH
4961: CALL_OW 44
4965: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4966: LD_ADDR_VAR 0 4
4970: PUSH
4971: LD_VAR 0 4
4975: PPUSH
4976: LD_VAR 0 3
4980: PPUSH
4981: CALL 51866 0 2
4985: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
4986: LD_VAR 0 3
4990: PPUSH
4991: LD_INT 8
4993: PPUSH
4994: LD_INT 0
4996: PPUSH
4997: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: LD_EXP 30
5010: PPUSH
5011: CALL_OW 119
// end ;
5015: GO 4943
5017: POP
5018: POP
// repeat wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
5026: LD_VAR 0 4
5030: PPUSH
5031: LD_INT 101
5033: PUSH
5034: LD_INT 2
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PPUSH
5041: CALL_OW 72
5045: PUSH
5046: LD_INT 1
5048: GREATER
5049: IFFALSE 5019
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// DialogueOn ;
5058: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
5062: LD_EXP 30
5066: PPUSH
5067: LD_STRING DH-Fail-4
5069: PPUSH
5070: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
5074: LD_EXP 30
5078: PPUSH
5079: LD_STRING DH-Fail-5
5081: PPUSH
5082: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
5086: LD_EXP 30
5090: PPUSH
5091: LD_STRING DH-Fail-6
5093: PPUSH
5094: CALL_OW 88
// DialogueOff ;
5098: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
5102: LD_VAR 0 4
5106: PPUSH
5107: LD_EXP 30
5111: PPUSH
5112: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
5116: LD_INT 35
5118: PPUSH
5119: CALL_OW 67
// until IsDying ( Heike ) ;
5123: LD_EXP 30
5127: PPUSH
5128: CALL_OW 303
5132: IFFALSE 5116
// KillUnit ( Heike ) ;
5134: LD_EXP 30
5138: PPUSH
5139: CALL_OW 66
// wait ( 0 0$4 ) ;
5143: LD_INT 140
5145: PPUSH
5146: CALL_OW 67
// ResetFog ;
5150: CALL_OW 335
// DialogueOn ;
5154: CALL_OW 6
// dwait ( 0 0$1 ) ;
5158: LD_INT 35
5160: PPUSH
5161: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
5165: LD_ADDR_EXP 30
5169: PUSH
5170: LD_STRING Heike
5172: PPUSH
5173: LD_EXP 1
5177: NOT
5178: PPUSH
5179: LD_EXP 2
5183: PPUSH
5184: CALL 14490 0 3
5188: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
5189: LD_EXP 30
5193: PPUSH
5194: LD_STRING DH-Fail-7
5196: PPUSH
5197: CALL_OW 89
// DialogueOff ;
5201: CALL_OW 7
// YouLost ( Fail ) ;
5205: LD_STRING Fail
5207: PPUSH
5208: CALL_OW 104
// end ;
5212: LD_VAR 0 1
5216: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
5217: LD_INT 2
5219: PPUSH
5220: LD_INT 173
5222: PPUSH
5223: LD_INT 29
5225: PPUSH
5226: CALL_OW 293
5230: PUSH
5231: LD_EXP 30
5235: PPUSH
5236: LD_INT 173
5238: PPUSH
5239: LD_INT 29
5241: PPUSH
5242: CALL_OW 297
5246: PUSH
5247: LD_INT 6
5249: LESS
5250: AND
5251: IFFALSE 5268
5253: GO 5255
5255: DISABLE
// Say ( Heike , DH-EastRoad ) ;
5256: LD_EXP 30
5260: PPUSH
5261: LD_STRING DH-EastRoad
5263: PPUSH
5264: CALL_OW 88
5268: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
5269: LD_INT 2
5271: PPUSH
5272: LD_INT 149
5274: PPUSH
5275: LD_INT 3
5277: PPUSH
5278: CALL_OW 293
5282: PUSH
5283: LD_EXP 30
5287: PPUSH
5288: LD_INT 149
5290: PPUSH
5291: LD_INT 3
5293: PPUSH
5294: CALL_OW 297
5298: PUSH
5299: LD_INT 6
5301: LESS
5302: AND
5303: IFFALSE 5320
5305: GO 5307
5307: DISABLE
// Say ( Heike , DH-EastRoad ) ;
5308: LD_EXP 30
5312: PPUSH
5313: LD_STRING DH-EastRoad
5315: PPUSH
5316: CALL_OW 88
5320: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
5321: LD_INT 2
5323: PPUSH
5324: LD_INT 217
5326: PPUSH
5327: LD_INT 120
5329: PPUSH
5330: CALL_OW 293
5334: PUSH
5335: LD_EXP 30
5339: PPUSH
5340: LD_INT 217
5342: PPUSH
5343: LD_INT 120
5345: PPUSH
5346: CALL_OW 297
5350: PUSH
5351: LD_INT 6
5353: LESS
5354: AND
5355: IFFALSE 5372
5357: GO 5359
5359: DISABLE
// Say ( Heike , DH-EastEnd ) ;
5360: LD_EXP 30
5364: PPUSH
5365: LD_STRING DH-EastEnd
5367: PPUSH
5368: CALL_OW 88
5372: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
5373: LD_EXP 30
5377: PPUSH
5378: LD_INT 11
5380: PPUSH
5381: CALL_OW 308
5385: IFFALSE 5423
5387: GO 5389
5389: DISABLE
// begin if not heikeSquad then
5390: LD_EXP 14
5394: NOT
5395: IFFALSE 5411
// Say ( Heike , DH-Hill ) else
5397: LD_EXP 30
5401: PPUSH
5402: LD_STRING DH-Hill
5404: PPUSH
5405: CALL_OW 88
5409: GO 5423
// Say ( Heike , DH-Hill-a ) ;
5411: LD_EXP 30
5415: PPUSH
5416: LD_STRING DH-Hill-a
5418: PPUSH
5419: CALL_OW 88
// end ;
5423: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
5424: LD_EXP 30
5428: PPUSH
5429: LD_INT 12
5431: PPUSH
5432: CALL_OW 308
5436: IFFALSE 5618
5438: GO 5440
5440: DISABLE
5441: LD_INT 0
5443: PPUSH
5444: PPUSH
5445: PPUSH
// begin DialogueOn ;
5446: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
5450: LD_EXP 30
5454: PPUSH
5455: CALL_OW 87
// x := GetX ( Heike ) ;
5459: LD_ADDR_VAR 0 1
5463: PUSH
5464: LD_EXP 30
5468: PPUSH
5469: CALL_OW 250
5473: ST_TO_ADDR
// y := GetY ( Heike ) ;
5474: LD_ADDR_VAR 0 2
5478: PUSH
5479: LD_EXP 30
5483: PPUSH
5484: CALL_OW 251
5488: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
5489: LD_VAR 0 1
5493: PPUSH
5494: LD_VAR 0 2
5498: PPUSH
5499: LD_INT 2
5501: PPUSH
5502: LD_INT 12
5504: NEG
5505: PPUSH
5506: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
5510: LD_VAR 0 1
5514: PPUSH
5515: LD_VAR 0 2
5519: PPUSH
5520: LD_INT 2
5522: PPUSH
5523: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
5527: LD_INT 2
5529: PUSH
5530: LD_INT 30
5532: PUSH
5533: LD_INT 32
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: LD_INT 30
5542: PUSH
5543: LD_INT 33
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: LIST
5554: PPUSH
5555: CALL_OW 69
5559: IFFALSE 5571
// v := 3 else
5561: LD_ADDR_VAR 0 3
5565: PUSH
5566: LD_INT 3
5568: ST_TO_ADDR
5569: GO 5579
// v := 2 ;
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: LD_INT 2
5578: ST_TO_ADDR
// disable ;
5579: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
5580: LD_EXP 30
5584: PPUSH
5585: LD_STRING DH-Outpost-
5587: PUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_VAR 0 3
5595: PPUSH
5596: CALL_OW 12
5600: STR
5601: PPUSH
5602: CALL_OW 88
// DialogueOff ;
5606: CALL_OW 7
// wait ( 0 0$10 ) ;
5610: LD_INT 350
5612: PPUSH
5613: CALL_OW 67
// enable ;
5617: ENABLE
// end ;
5618: PPOPN 3
5620: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered marked gameStartEvent do
5621: LD_EXP 30
5625: PPUSH
5626: LD_INT 19
5628: PPUSH
5629: CALL_OW 308
5633: PUSH
5634: LD_EXP 22
5638: NOT
5639: AND
5640: IFFALSE 5713
5642: GO 5644
5644: DISABLE
// begin DialogueOn ;
5645: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
5649: LD_INT 152
5651: PPUSH
5652: LD_INT 115
5654: PPUSH
5655: LD_INT 2
5657: PPUSH
5658: LD_INT 16
5660: NEG
5661: PPUSH
5662: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
5666: LD_INT 152
5668: PPUSH
5669: LD_INT 115
5671: PPUSH
5672: LD_INT 2
5674: PPUSH
5675: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
5679: LD_INT 152
5681: PPUSH
5682: LD_INT 115
5684: PPUSH
5685: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
5689: LD_EXP 30
5693: PPUSH
5694: LD_STRING DH-Stealth-1
5696: PPUSH
5697: CALL_OW 88
// DialogueOff ;
5701: CALL_OW 7
// adminAreaDiscovered := true ;
5705: LD_ADDR_EXP 22
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// end ;
5713: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm marked gameStartEvent do
5714: LD_INT 2
5716: PPUSH
5717: LD_EXP 31
5721: PPUSH
5722: CALL_OW 292
5726: PUSH
5727: LD_EXP 30
5731: PPUSH
5732: LD_EXP 31
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 6
5744: LESS
5745: AND
5746: PUSH
5747: LD_EXP 17
5751: NOT
5752: AND
5753: IFFALSE 5859
5755: GO 5757
5757: DISABLE
// begin DialogueOn ;
5758: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
5762: LD_EXP 31
5766: PPUSH
5767: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
5771: LD_EXP 31
5775: PPUSH
5776: LD_EXP 30
5780: PPUSH
5781: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
5785: LD_EXP 30
5789: PPUSH
5790: LD_EXP 31
5794: PPUSH
5795: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
5799: LD_EXP 30
5803: PPUSH
5804: LD_STRING DH-Givi-1
5806: PPUSH
5807: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
5811: LD_EXP 31
5815: PPUSH
5816: LD_STRING DG-Givi-2
5818: PPUSH
5819: CALL_OW 88
// DialogueOff ;
5823: CALL_OW 7
// SetSide ( Givi , 2 ) ;
5827: LD_EXP 31
5831: PPUSH
5832: LD_INT 2
5834: PPUSH
5835: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
5839: LD_ADDR_EXP 14
5843: PUSH
5844: LD_EXP 14
5848: PPUSH
5849: LD_EXP 31
5853: PPUSH
5854: CALL 51866 0 2
5858: ST_TO_ADDR
// end ;
5859: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm marked gameStartEvent do
5860: LD_INT 2
5862: PPUSH
5863: LD_EXP 38
5867: PPUSH
5868: CALL_OW 292
5872: PUSH
5873: LD_EXP 30
5877: PPUSH
5878: LD_EXP 38
5882: PPUSH
5883: CALL_OW 296
5887: PUSH
5888: LD_INT 6
5890: LESS
5891: AND
5892: PUSH
5893: LD_EXP 17
5897: NOT
5898: AND
5899: IFFALSE 5995
5901: GO 5903
5903: DISABLE
// begin DialogueOn ;
5904: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
5908: LD_EXP 38
5912: PPUSH
5913: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
5917: LD_EXP 30
5921: PPUSH
5922: LD_STRING DH-Olaf-1
5924: PPUSH
5925: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
5929: LD_EXP 38
5933: PPUSH
5934: LD_STRING DO-Olaf-2
5936: PPUSH
5937: CALL_OW 88
// if explosionsTakenByRussians then
5941: LD_EXP 21
5945: IFFALSE 5959
// Say ( Olaf , DO-Olaf-a-3 ) ;
5947: LD_EXP 38
5951: PPUSH
5952: LD_STRING DO-Olaf-a-3
5954: PPUSH
5955: CALL_OW 88
// DialogueOff ;
5959: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
5963: LD_EXP 38
5967: PPUSH
5968: LD_INT 2
5970: PPUSH
5971: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
5975: LD_ADDR_EXP 14
5979: PUSH
5980: LD_EXP 14
5984: PPUSH
5985: LD_EXP 38
5989: PPUSH
5990: CALL 51866 0 2
5994: ST_TO_ADDR
// end ;
5995: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm marked gameStartEvent do var i , xy ;
5996: LD_INT 2
5998: PPUSH
5999: LD_EXP 32
6003: PPUSH
6004: CALL_OW 292
6008: PUSH
6009: LD_EXP 30
6013: PPUSH
6014: LD_EXP 32
6018: PPUSH
6019: CALL_OW 296
6023: PUSH
6024: LD_INT 6
6026: LESS
6027: AND
6028: PUSH
6029: LD_EXP 17
6033: NOT
6034: AND
6035: IFFALSE 6263
6037: GO 6039
6039: DISABLE
6040: LD_INT 0
6042: PPUSH
6043: PPUSH
// begin DialogueOn ;
6044: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
6048: LD_EXP 32
6052: PPUSH
6053: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_INT 18
6064: PPUSH
6065: LD_INT 0
6067: PPUSH
6068: CALL_OW 517
6072: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
6073: LD_ADDR_VAR 0 1
6077: PUSH
6078: DOUBLE
6079: LD_INT 1
6081: DEC
6082: ST_TO_ADDR
6083: LD_VAR 0 2
6087: PUSH
6088: LD_INT 1
6090: ARRAY
6091: PUSH
6092: FOR_TO
6093: IFFALSE 6175
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
6095: LD_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ARRAY
6103: PUSH
6104: LD_VAR 0 1
6108: ARRAY
6109: PPUSH
6110: LD_VAR 0 2
6114: PUSH
6115: LD_INT 2
6117: ARRAY
6118: PUSH
6119: LD_VAR 0 1
6123: ARRAY
6124: PPUSH
6125: LD_INT 2
6127: PPUSH
6128: LD_INT 3
6130: NEG
6131: PPUSH
6132: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
6136: LD_VAR 0 2
6140: PUSH
6141: LD_INT 1
6143: ARRAY
6144: PUSH
6145: LD_VAR 0 1
6149: ARRAY
6150: PPUSH
6151: LD_VAR 0 2
6155: PUSH
6156: LD_INT 2
6158: ARRAY
6159: PUSH
6160: LD_VAR 0 1
6164: ARRAY
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 331
// end ;
6173: GO 6092
6175: POP
6176: POP
// Say ( Mike , DM-Mike-1 ) ;
6177: LD_EXP 32
6181: PPUSH
6182: LD_STRING DM-Mike-1
6184: PPUSH
6185: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
6189: LD_EXP 30
6193: PPUSH
6194: LD_STRING DH-Mike-2
6196: PPUSH
6197: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
6201: LD_INT 78
6203: PPUSH
6204: LD_INT 104
6206: PPUSH
6207: CALL_OW 84
// dwait ( 0 0$1 ) ;
6211: LD_INT 35
6213: PPUSH
6214: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
6218: LD_EXP 30
6222: PPUSH
6223: CALL_OW 87
// DialogueOff ;
6227: CALL_OW 7
// SetSide ( Mike , 2 ) ;
6231: LD_EXP 32
6235: PPUSH
6236: LD_INT 2
6238: PPUSH
6239: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
6243: LD_ADDR_EXP 14
6247: PUSH
6248: LD_EXP 14
6252: PPUSH
6253: LD_EXP 32
6257: PPUSH
6258: CALL 51866 0 2
6262: ST_TO_ADDR
// end ;
6263: PPOPN 2
6265: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad marked gameStartEvent do
6266: LD_EXP 30
6270: PPUSH
6271: LD_EXP 35
6275: PPUSH
6276: CALL_OW 296
6280: PUSH
6281: LD_INT 6
6283: LESS
6284: PUSH
6285: LD_EXP 35
6289: PPUSH
6290: CALL_OW 257
6294: PUSH
6295: LD_INT 33
6297: EQUAL
6298: AND
6299: PUSH
6300: LD_EXP 17
6304: NOT
6305: AND
6306: PUSH
6307: LD_EXP 35
6311: PPUSH
6312: CALL_OW 302
6316: AND
6317: PUSH
6318: LD_EXP 20
6322: AND
6323: PUSH
6324: LD_EXP 35
6328: PUSH
6329: LD_EXP 14
6333: IN
6334: AND
6335: IFFALSE 6364
6337: GO 6339
6339: DISABLE
// begin DialogueOn ;
6340: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
6344: LD_EXP 30
6348: PPUSH
6349: LD_STRING DH-Kaia-Revolver-2
6351: PPUSH
6352: CALL_OW 88
// SetClassKaiaRevolver ;
6356: CALL 1372 0 0
// DialogueOff ;
6360: CALL_OW 7
// end ;
6364: END
// every 0 0$3 trigger Ibrahim and Aviradze and not [ Ibrahim , Aviradze ] in heikeSquad and heikeSquad > 5 and not isAlarm marked gameStartEvent do var hasKaia , hasGivi ;
6365: LD_EXP 33
6369: PUSH
6370: LD_EXP 40
6374: AND
6375: PUSH
6376: LD_EXP 33
6380: PUSH
6381: LD_EXP 40
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_EXP 14
6394: IN
6395: NOT
6396: AND
6397: PUSH
6398: LD_EXP 14
6402: PUSH
6403: LD_INT 5
6405: GREATER
6406: AND
6407: PUSH
6408: LD_EXP 17
6412: NOT
6413: AND
6414: IFFALSE 6998
6416: GO 6418
6418: DISABLE
6419: LD_INT 0
6421: PPUSH
6422: PPUSH
// begin DialogueOn ;
6423: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad ;
6427: LD_ADDR_VAR 0 2
6431: PUSH
6432: LD_EXP 31
6436: PPUSH
6437: CALL_OW 302
6441: PUSH
6442: LD_EXP 31
6446: PUSH
6447: LD_EXP 14
6451: IN
6452: AND
6453: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
6454: LD_EXP 30
6458: PPUSH
6459: LD_STRING DH-Med-1
6461: PPUSH
6462: CALL_OW 88
// if hasGivi then
6466: LD_VAR 0 2
6470: IFFALSE 6486
// Say ( Givi , DG-Med-2 ) else
6472: LD_EXP 31
6476: PPUSH
6477: LD_STRING DG-Med-2
6479: PPUSH
6480: CALL_OW 88
6484: GO 6562
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-e-2 ) then
6486: LD_EXP 14
6490: PUSH
6491: LD_EXP 41
6495: ISECT
6496: PPUSH
6497: LD_INT 26
6499: PUSH
6500: LD_INT 1
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 72
6511: PUSH
6512: LD_INT 1
6514: ARRAY
6515: PPUSH
6516: LD_STRING DArm-Med-e-2
6518: PPUSH
6519: CALL_OW 88
6523: IFFALSE 6562
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-e-2 ) ;
6525: LD_EXP 14
6529: PUSH
6530: LD_EXP 41
6534: ISECT
6535: PPUSH
6536: LD_INT 26
6538: PUSH
6539: LD_INT 2
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PPUSH
6546: CALL_OW 72
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PPUSH
6555: LD_STRING DArf-Med-e-2
6557: PPUSH
6558: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
6562: LD_INT 154
6564: PPUSH
6565: LD_INT 119
6567: PPUSH
6568: LD_INT 70
6570: PPUSH
6571: CALL 13746 0 3
// Say ( Heike , DH-Med-3 ) ;
6575: LD_EXP 30
6579: PPUSH
6580: LD_STRING DH-Med-3
6582: PPUSH
6583: CALL_OW 88
// if hasGivi then
6587: LD_VAR 0 2
6591: IFFALSE 6607
// Say ( Givi , DG-Med-4 ) else
6593: LD_EXP 31
6597: PPUSH
6598: LD_STRING DG-Med-4
6600: PPUSH
6601: CALL_OW 88
6605: GO 6683
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-e-4 ) then
6607: LD_EXP 14
6611: PUSH
6612: LD_EXP 41
6616: ISECT
6617: PPUSH
6618: LD_INT 26
6620: PUSH
6621: LD_INT 1
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PPUSH
6628: CALL_OW 72
6632: PUSH
6633: LD_INT 1
6635: ARRAY
6636: PPUSH
6637: LD_STRING DArm-Med-e-4
6639: PPUSH
6640: CALL_OW 88
6644: IFFALSE 6683
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-e-4 ) ;
6646: LD_EXP 14
6650: PUSH
6651: LD_EXP 41
6655: ISECT
6656: PPUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 2
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PPUSH
6667: CALL_OW 72
6671: PUSH
6672: LD_INT 1
6674: ARRAY
6675: PPUSH
6676: LD_STRING DArf-Med-e-4
6678: PPUSH
6679: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad ;
6683: LD_ADDR_VAR 0 1
6687: PUSH
6688: LD_EXP 35
6692: PPUSH
6693: CALL_OW 302
6697: PUSH
6698: LD_EXP 35
6702: PUSH
6703: LD_EXP 14
6707: IN
6708: AND
6709: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad then
6710: LD_EXP 32
6714: PPUSH
6715: CALL_OW 302
6719: PUSH
6720: LD_EXP 32
6724: PUSH
6725: LD_EXP 14
6729: IN
6730: AND
6731: IFFALSE 6763
// begin Say ( Mike , DM-Med-5 ) ;
6733: LD_EXP 32
6737: PPUSH
6738: LD_STRING DM-Med-5
6740: PPUSH
6741: CALL_OW 88
// if hasKaia then
6745: LD_VAR 0 1
6749: IFFALSE 6763
// Say ( Kaia , DK-Med-6 ) ;
6751: LD_EXP 35
6755: PPUSH
6756: LD_STRING DK-Med-6
6758: PPUSH
6759: CALL_OW 88
// end ; if hasKaia then
6763: LD_VAR 0 1
6767: IFFALSE 6986
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
6769: LD_INT 175
6771: PPUSH
6772: LD_INT 123
6774: PPUSH
6775: LD_INT 2
6777: PPUSH
6778: LD_INT 8
6780: NEG
6781: PPUSH
6782: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
6786: LD_INT 175
6788: PPUSH
6789: LD_INT 123
6791: PPUSH
6792: LD_INT 2
6794: PPUSH
6795: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
6799: LD_INT 175
6801: PPUSH
6802: LD_INT 123
6804: PPUSH
6805: CALL_OW 86
// laundryAllowed := true ;
6809: LD_ADDR_EXP 26
6813: PUSH
6814: LD_INT 1
6816: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
6817: LD_EXP 35
6821: PPUSH
6822: LD_STRING DK-Med-7
6824: PPUSH
6825: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
6829: LD_EXP 35
6833: PPUSH
6834: LD_STRING DK-Med-8
6836: PPUSH
6837: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad then
6841: LD_EXP 37
6845: PPUSH
6846: CALL_OW 302
6850: PUSH
6851: LD_EXP 37
6855: PUSH
6856: LD_EXP 14
6860: IN
6861: AND
6862: IFFALSE 6920
// begin Say ( Markov , DMar-Med-9 ) ;
6864: LD_EXP 37
6868: PPUSH
6869: LD_STRING DMar-Med-9
6871: PPUSH
6872: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
6876: LD_EXP 35
6880: PPUSH
6881: LD_STRING DK-Med-10
6883: PPUSH
6884: CALL_OW 88
// if hasGivi then
6888: LD_VAR 0 2
6892: IFFALSE 6908
// Say ( Kaia , DK-Med-11 ) else
6894: LD_EXP 35
6898: PPUSH
6899: LD_STRING DK-Med-11
6901: PPUSH
6902: CALL_OW 88
6906: GO 6920
// Say ( Kaia , DK-Med-a-11 ) ;
6908: LD_EXP 35
6912: PPUSH
6913: LD_STRING DK-Med-a-11
6915: PPUSH
6916: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad then
6920: LD_EXP 34
6924: PPUSH
6925: CALL_OW 302
6929: PUSH
6930: LD_EXP 34
6934: PUSH
6935: LD_EXP 14
6939: IN
6940: AND
6941: IFFALSE 6986
// begin Say ( Kamil , DKam-Med-12 ) ;
6943: LD_EXP 34
6947: PPUSH
6948: LD_STRING DKam-Med-12
6950: PPUSH
6951: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
6955: LD_EXP 34
6959: PPUSH
6960: LD_STRING DKam-Med-13
6962: PPUSH
6963: CALL_OW 88
// if not hasExplosionCollected then
6967: LD_EXP 23
6971: NOT
6972: IFFALSE 6986
// Say ( Heike , DH-Med-d-14 ) ;
6974: LD_EXP 30
6978: PPUSH
6979: LD_STRING DH-Med-d-14
6981: PPUSH
6982: CALL_OW 88
// end ; end ; DialogueOff ;
6986: CALL_OW 7
// adminAreaDiscovered := true ;
6990: LD_ADDR_EXP 22
6994: PUSH
6995: LD_INT 1
6997: ST_TO_ADDR
// end ;
6998: PPOPN 2
7000: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and heikeSquad > 4 and not isAlarm marked gameStartEvent do var hasGivi , hasKaia ;
7001: LD_EXP 33
7005: NOT
7006: PUSH
7007: LD_EXP 40
7011: AND
7012: PUSH
7013: LD_EXP 40
7017: PUSH
7018: LD_EXP 14
7022: IN
7023: NOT
7024: AND
7025: PUSH
7026: LD_EXP 14
7030: PUSH
7031: LD_INT 4
7033: GREATER
7034: AND
7035: PUSH
7036: LD_EXP 17
7040: NOT
7041: AND
7042: IFFALSE 7626
7044: GO 7046
7046: DISABLE
7047: LD_INT 0
7049: PPUSH
7050: PPUSH
// begin DialogueOn ;
7051: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad ;
7055: LD_ADDR_VAR 0 1
7059: PUSH
7060: LD_EXP 31
7064: PPUSH
7065: CALL_OW 302
7069: PUSH
7070: LD_EXP 31
7074: PUSH
7075: LD_EXP 14
7079: IN
7080: AND
7081: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
7082: LD_EXP 30
7086: PPUSH
7087: LD_STRING DH-Med-a-1
7089: PPUSH
7090: CALL_OW 88
// if hasGivi then
7094: LD_VAR 0 1
7098: IFFALSE 7114
// Say ( Givi , DG-Med-a-2 ) else
7100: LD_EXP 31
7104: PPUSH
7105: LD_STRING DG-Med-a-2
7107: PPUSH
7108: CALL_OW 88
7112: GO 7190
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-2 ) then
7114: LD_EXP 14
7118: PUSH
7119: LD_EXP 41
7123: ISECT
7124: PPUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 1
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PPUSH
7135: CALL_OW 72
7139: PUSH
7140: LD_INT 1
7142: ARRAY
7143: PPUSH
7144: LD_STRING DArm-Med-f-2
7146: PPUSH
7147: CALL_OW 88
7151: IFFALSE 7190
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-2 ) ;
7153: LD_EXP 14
7157: PUSH
7158: LD_EXP 41
7162: ISECT
7163: PPUSH
7164: LD_INT 26
7166: PUSH
7167: LD_INT 2
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PPUSH
7174: CALL_OW 72
7178: PUSH
7179: LD_INT 1
7181: ARRAY
7182: PPUSH
7183: LD_STRING DArf-Med-f-2
7185: PPUSH
7186: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
7190: LD_INT 154
7192: PPUSH
7193: LD_INT 119
7195: PPUSH
7196: LD_INT 70
7198: PPUSH
7199: CALL 13746 0 3
// Say ( Heike , DH-Med-a-3 ) ;
7203: LD_EXP 30
7207: PPUSH
7208: LD_STRING DH-Med-a-3
7210: PPUSH
7211: CALL_OW 88
// if hasGivi then
7215: LD_VAR 0 1
7219: IFFALSE 7235
// Say ( Givi , DG-Med-a-4 ) else
7221: LD_EXP 31
7225: PPUSH
7226: LD_STRING DG-Med-a-4
7228: PPUSH
7229: CALL_OW 88
7233: GO 7311
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-4 ) then
7235: LD_EXP 14
7239: PUSH
7240: LD_EXP 41
7244: ISECT
7245: PPUSH
7246: LD_INT 26
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 72
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PPUSH
7265: LD_STRING DArm-Med-f-4
7267: PPUSH
7268: CALL_OW 88
7272: IFFALSE 7311
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-4 ) ;
7274: LD_EXP 14
7278: PUSH
7279: LD_EXP 41
7283: ISECT
7284: PPUSH
7285: LD_INT 26
7287: PUSH
7288: LD_INT 2
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 72
7299: PUSH
7300: LD_INT 1
7302: ARRAY
7303: PPUSH
7304: LD_STRING DArf-Med-f-4
7306: PPUSH
7307: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad ;
7311: LD_ADDR_VAR 0 2
7315: PUSH
7316: LD_EXP 35
7320: PPUSH
7321: CALL_OW 302
7325: PUSH
7326: LD_EXP 35
7330: PUSH
7331: LD_EXP 14
7335: IN
7336: AND
7337: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad then
7338: LD_EXP 32
7342: PPUSH
7343: CALL_OW 302
7347: PUSH
7348: LD_EXP 32
7352: PUSH
7353: LD_EXP 14
7357: IN
7358: AND
7359: IFFALSE 7391
// begin Say ( Mike , DM-Med-5 ) ;
7361: LD_EXP 32
7365: PPUSH
7366: LD_STRING DM-Med-5
7368: PPUSH
7369: CALL_OW 88
// if hasKaia then
7373: LD_VAR 0 2
7377: IFFALSE 7391
// Say ( Kaia , DK-Med-6 ) ;
7379: LD_EXP 35
7383: PPUSH
7384: LD_STRING DK-Med-6
7386: PPUSH
7387: CALL_OW 88
// end ; if hasKaia then
7391: LD_VAR 0 2
7395: IFFALSE 7614
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
7397: LD_INT 175
7399: PPUSH
7400: LD_INT 123
7402: PPUSH
7403: LD_INT 2
7405: PPUSH
7406: LD_INT 8
7408: NEG
7409: PPUSH
7410: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
7414: LD_INT 175
7416: PPUSH
7417: LD_INT 123
7419: PPUSH
7420: LD_INT 2
7422: PPUSH
7423: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
7427: LD_INT 175
7429: PPUSH
7430: LD_INT 123
7432: PPUSH
7433: CALL_OW 86
// laundryAllowed := true ;
7437: LD_ADDR_EXP 26
7441: PUSH
7442: LD_INT 1
7444: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
7445: LD_EXP 35
7449: PPUSH
7450: LD_STRING DK-Med-7
7452: PPUSH
7453: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
7457: LD_EXP 35
7461: PPUSH
7462: LD_STRING DK-Med-8
7464: PPUSH
7465: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad then
7469: LD_EXP 37
7473: PPUSH
7474: CALL_OW 302
7478: PUSH
7479: LD_EXP 37
7483: PUSH
7484: LD_EXP 14
7488: IN
7489: AND
7490: IFFALSE 7548
// begin Say ( Markov , DMar-Med-9 ) ;
7492: LD_EXP 37
7496: PPUSH
7497: LD_STRING DMar-Med-9
7499: PPUSH
7500: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
7504: LD_EXP 35
7508: PPUSH
7509: LD_STRING DK-Med-10
7511: PPUSH
7512: CALL_OW 88
// if hasGivi then
7516: LD_VAR 0 1
7520: IFFALSE 7536
// Say ( Kaia , DK-Med-11 ) else
7522: LD_EXP 35
7526: PPUSH
7527: LD_STRING DK-Med-11
7529: PPUSH
7530: CALL_OW 88
7534: GO 7548
// Say ( Kaia , DK-Med-a-11 ) ;
7536: LD_EXP 35
7540: PPUSH
7541: LD_STRING DK-Med-a-11
7543: PPUSH
7544: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad then
7548: LD_EXP 34
7552: PPUSH
7553: CALL_OW 302
7557: PUSH
7558: LD_EXP 34
7562: PUSH
7563: LD_EXP 14
7567: IN
7568: AND
7569: IFFALSE 7614
// begin Say ( Kamil , DKam-Med-12 ) ;
7571: LD_EXP 34
7575: PPUSH
7576: LD_STRING DKam-Med-12
7578: PPUSH
7579: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
7583: LD_EXP 34
7587: PPUSH
7588: LD_STRING DKam-Med-13
7590: PPUSH
7591: CALL_OW 88
// if not hasExplosionCollected then
7595: LD_EXP 23
7599: NOT
7600: IFFALSE 7614
// Say ( Heike , DH-Med-d-14 ) ;
7602: LD_EXP 30
7606: PPUSH
7607: LD_STRING DH-Med-d-14
7609: PPUSH
7610: CALL_OW 88
// end ; end ; DialogueOff ;
7614: CALL_OW 7
// adminAreaDiscovered := true ;
7618: LD_ADDR_EXP 22
7622: PUSH
7623: LD_INT 1
7625: ST_TO_ADDR
// end ;
7626: PPOPN 2
7628: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and heikeSquad > 4 and not isAlarm marked gameStartEvent do var hasGivi , hasKaia ;
7629: LD_EXP 33
7633: PUSH
7634: LD_EXP 40
7638: NOT
7639: AND
7640: PUSH
7641: LD_EXP 33
7645: PUSH
7646: LD_EXP 14
7650: IN
7651: NOT
7652: AND
7653: PUSH
7654: LD_EXP 14
7658: PUSH
7659: LD_INT 4
7661: GREATER
7662: AND
7663: PUSH
7664: LD_EXP 17
7668: NOT
7669: AND
7670: IFFALSE 8254
7672: GO 7674
7674: DISABLE
7675: LD_INT 0
7677: PPUSH
7678: PPUSH
// begin DialogueOn ;
7679: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad ;
7683: LD_ADDR_VAR 0 1
7687: PUSH
7688: LD_EXP 31
7692: PPUSH
7693: CALL_OW 302
7697: PUSH
7698: LD_EXP 31
7702: PUSH
7703: LD_EXP 14
7707: IN
7708: AND
7709: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
7710: LD_EXP 30
7714: PPUSH
7715: LD_STRING DH-Med-b-1
7717: PPUSH
7718: CALL_OW 88
// if hasGivi then
7722: LD_VAR 0 1
7726: IFFALSE 7742
// Say ( Givi , DG-Med-a-2 ) else
7728: LD_EXP 31
7732: PPUSH
7733: LD_STRING DG-Med-a-2
7735: PPUSH
7736: CALL_OW 88
7740: GO 7818
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-2 ) then
7742: LD_EXP 14
7746: PUSH
7747: LD_EXP 41
7751: ISECT
7752: PPUSH
7753: LD_INT 26
7755: PUSH
7756: LD_INT 1
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PPUSH
7763: CALL_OW 72
7767: PUSH
7768: LD_INT 1
7770: ARRAY
7771: PPUSH
7772: LD_STRING DArm-Med-f-2
7774: PPUSH
7775: CALL_OW 88
7779: IFFALSE 7818
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-2 ) ;
7781: LD_EXP 14
7785: PUSH
7786: LD_EXP 41
7790: ISECT
7791: PPUSH
7792: LD_INT 26
7794: PUSH
7795: LD_INT 2
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 72
7806: PUSH
7807: LD_INT 1
7809: ARRAY
7810: PPUSH
7811: LD_STRING DArf-Med-f-2
7813: PPUSH
7814: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
7818: LD_INT 154
7820: PPUSH
7821: LD_INT 119
7823: PPUSH
7824: LD_INT 70
7826: PPUSH
7827: CALL 13746 0 3
// Say ( Heike , DH-Med-a-3 ) ;
7831: LD_EXP 30
7835: PPUSH
7836: LD_STRING DH-Med-a-3
7838: PPUSH
7839: CALL_OW 88
// if hasGivi then
7843: LD_VAR 0 1
7847: IFFALSE 7863
// Say ( Givi , DG-Med-a-4 ) else
7849: LD_EXP 31
7853: PPUSH
7854: LD_STRING DG-Med-a-4
7856: PPUSH
7857: CALL_OW 88
7861: GO 7939
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Med-f-4 ) then
7863: LD_EXP 14
7867: PUSH
7868: LD_EXP 41
7872: ISECT
7873: PPUSH
7874: LD_INT 26
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PPUSH
7884: CALL_OW 72
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_STRING DArm-Med-f-4
7895: PPUSH
7896: CALL_OW 88
7900: IFFALSE 7939
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Med-f-4 ) ;
7902: LD_EXP 14
7906: PUSH
7907: LD_EXP 41
7911: ISECT
7912: PPUSH
7913: LD_INT 26
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PPUSH
7923: CALL_OW 72
7927: PUSH
7928: LD_INT 1
7930: ARRAY
7931: PPUSH
7932: LD_STRING DArf-Med-f-4
7934: PPUSH
7935: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad ;
7939: LD_ADDR_VAR 0 2
7943: PUSH
7944: LD_EXP 35
7948: PPUSH
7949: CALL_OW 302
7953: PUSH
7954: LD_EXP 35
7958: PUSH
7959: LD_EXP 14
7963: IN
7964: AND
7965: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad then
7966: LD_EXP 32
7970: PPUSH
7971: CALL_OW 302
7975: PUSH
7976: LD_EXP 32
7980: PUSH
7981: LD_EXP 14
7985: IN
7986: AND
7987: IFFALSE 8019
// begin Say ( Mike , DM-Med-5 ) ;
7989: LD_EXP 32
7993: PPUSH
7994: LD_STRING DM-Med-5
7996: PPUSH
7997: CALL_OW 88
// if hasKaia then
8001: LD_VAR 0 2
8005: IFFALSE 8019
// Say ( Kaia , DK-Med-6 ) ;
8007: LD_EXP 35
8011: PPUSH
8012: LD_STRING DK-Med-6
8014: PPUSH
8015: CALL_OW 88
// end ; if hasKaia then
8019: LD_VAR 0 2
8023: IFFALSE 8242
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8025: LD_INT 175
8027: PPUSH
8028: LD_INT 123
8030: PPUSH
8031: LD_INT 2
8033: PPUSH
8034: LD_INT 8
8036: NEG
8037: PPUSH
8038: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8042: LD_INT 175
8044: PPUSH
8045: LD_INT 123
8047: PPUSH
8048: LD_INT 2
8050: PPUSH
8051: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8055: LD_INT 175
8057: PPUSH
8058: LD_INT 123
8060: PPUSH
8061: CALL_OW 86
// laundryAllowed := true ;
8065: LD_ADDR_EXP 26
8069: PUSH
8070: LD_INT 1
8072: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
8073: LD_EXP 35
8077: PPUSH
8078: LD_STRING DK-Med-7
8080: PPUSH
8081: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8085: LD_EXP 35
8089: PPUSH
8090: LD_STRING DK-Med-8
8092: PPUSH
8093: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad then
8097: LD_EXP 37
8101: PPUSH
8102: CALL_OW 302
8106: PUSH
8107: LD_EXP 37
8111: PUSH
8112: LD_EXP 14
8116: IN
8117: AND
8118: IFFALSE 8176
// begin Say ( Markov , DMar-Med-9 ) ;
8120: LD_EXP 37
8124: PPUSH
8125: LD_STRING DMar-Med-9
8127: PPUSH
8128: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8132: LD_EXP 35
8136: PPUSH
8137: LD_STRING DK-Med-10
8139: PPUSH
8140: CALL_OW 88
// if hasGivi then
8144: LD_VAR 0 1
8148: IFFALSE 8164
// Say ( Kaia , DK-Med-11 ) else
8150: LD_EXP 35
8154: PPUSH
8155: LD_STRING DK-Med-11
8157: PPUSH
8158: CALL_OW 88
8162: GO 8176
// Say ( Kaia , DK-Med-a-11 ) ;
8164: LD_EXP 35
8168: PPUSH
8169: LD_STRING DK-Med-a-11
8171: PPUSH
8172: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad then
8176: LD_EXP 34
8180: PPUSH
8181: CALL_OW 302
8185: PUSH
8186: LD_EXP 34
8190: PUSH
8191: LD_EXP 14
8195: IN
8196: AND
8197: IFFALSE 8242
// begin Say ( Kamil , DKam-Med-12 ) ;
8199: LD_EXP 34
8203: PPUSH
8204: LD_STRING DKam-Med-12
8206: PPUSH
8207: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8211: LD_EXP 34
8215: PPUSH
8216: LD_STRING DKam-Med-13
8218: PPUSH
8219: CALL_OW 88
// if not hasExplosionCollected then
8223: LD_EXP 23
8227: NOT
8228: IFFALSE 8242
// Say ( Heike , DH-Med-d-14 ) ;
8230: LD_EXP 30
8234: PPUSH
8235: LD_STRING DH-Med-d-14
8237: PPUSH
8238: CALL_OW 88
// end ; end ; DialogueOff ;
8242: CALL_OW 7
// adminAreaDiscovered := true ;
8246: LD_ADDR_EXP 22
8250: PUSH
8251: LD_INT 1
8253: ST_TO_ADDR
// end ;
8254: PPOPN 2
8256: END
// every 0 0$1 trigger laundryAllowed do
8257: LD_EXP 26
8261: IFFALSE 8273
8263: GO 8265
8265: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
8266: LD_STRING M1-laundry
8268: PPUSH
8269: CALL_OW 337
8273: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and not isAlarm marked gameStartEvent do
8274: LD_EXP 33
8278: NOT
8279: PUSH
8280: LD_EXP 40
8284: NOT
8285: AND
8286: PUSH
8287: LD_EXP 38
8291: PPUSH
8292: CALL_OW 302
8296: AND
8297: PUSH
8298: LD_EXP 38
8302: PUSH
8303: LD_EXP 14
8307: IN
8308: AND
8309: PUSH
8310: LD_EXP 17
8314: NOT
8315: AND
8316: IFFALSE 8457
8318: GO 8320
8320: DISABLE
// begin DialogueOn ;
8321: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
8325: LD_INT 152
8327: PPUSH
8328: LD_INT 115
8330: PPUSH
8331: LD_INT 2
8333: PPUSH
8334: LD_INT 16
8336: NEG
8337: PPUSH
8338: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
8342: LD_INT 152
8344: PPUSH
8345: LD_INT 115
8347: PPUSH
8348: LD_INT 2
8350: PPUSH
8351: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
8355: LD_INT 152
8357: PPUSH
8358: LD_INT 115
8360: PPUSH
8361: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
8365: LD_EXP 38
8369: PPUSH
8370: LD_STRING DO-Med-c-1
8372: PPUSH
8373: CALL_OW 88
// if not hasExplosionCollected then
8377: LD_EXP 23
8381: NOT
8382: IFFALSE 8398
// Say ( Heike , DH-Med-d-14 ) else
8384: LD_EXP 30
8388: PPUSH
8389: LD_STRING DH-Med-d-14
8391: PPUSH
8392: CALL_OW 88
8396: GO 8445
// begin Say ( Heike , DH-Med-c-2 ) ;
8398: LD_EXP 30
8402: PPUSH
8403: LD_STRING DH-Med-c-2
8405: PPUSH
8406: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad then
8410: LD_EXP 35
8414: PPUSH
8415: CALL_OW 302
8419: PUSH
8420: LD_EXP 35
8424: PUSH
8425: LD_EXP 14
8429: IN
8430: AND
8431: IFFALSE 8445
// Say ( Kaia , DK-Med-c-3 ) ;
8433: LD_EXP 35
8437: PPUSH
8438: LD_STRING DK-Med-c-3
8440: PPUSH
8441: CALL_OW 88
// end ; DialogueOff ;
8445: CALL_OW 7
// adminAreaDiscovered := true ;
8449: LD_ADDR_EXP 22
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// end ;
8457: END
// every 0 0$1 trigger IsDying ( Kaia ) and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
8458: LD_EXP 35
8462: PPUSH
8463: CALL_OW 303
8467: PUSH
8468: LD_EXP 35
8472: PUSH
8473: LD_EXP 14
8477: IN
8478: AND
8479: PUSH
8480: LD_EXP 17
8484: AND
8485: PUSH
8486: LD_EXP 24
8490: AND
8491: IFFALSE 8620
8493: GO 8495
8495: DISABLE
// begin DialogueOn ;
8496: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8500: LD_EXP 35
8504: PPUSH
8505: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
8509: LD_EXP 35
8513: PPUSH
8514: LD_STRING DK-death-1
8516: PPUSH
8517: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
8521: LD_EXP 30
8525: PPUSH
8526: LD_STRING DH-death-2
8528: PPUSH
8529: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
8533: LD_EXP 35
8537: PPUSH
8538: LD_STRING DK-death-3
8540: PPUSH
8541: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
8545: LD_EXP 35
8549: PPUSH
8550: LD_STRING DK-death-4
8552: PPUSH
8553: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
8557: LD_EXP 35
8561: PPUSH
8562: LD_INT 8
8564: PPUSH
8565: CALL_OW 235
// ComStop ( Kaia ) ;
8569: LD_EXP 35
8573: PPUSH
8574: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
8578: LD_INT 8
8580: PPUSH
8581: LD_INT 2
8583: PPUSH
8584: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
8588: LD_ADDR_EXP 14
8592: PUSH
8593: LD_EXP 14
8597: PUSH
8598: LD_EXP 35
8602: DIFF
8603: ST_TO_ADDR
// DialogueOff ;
8604: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
8608: LD_EXP 32
8612: PPUSH
8613: LD_STRING DM-death-5
8615: PPUSH
8616: CALL_OW 88
// end ;
8620: END
// every 0 0$2 trigger not contactWithAmerican and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
8621: LD_EXP 25
8625: NOT
8626: PUSH
8627: LD_EXP 43
8631: PUSH
8632: LD_EXP 14
8636: IN
8637: NOT
8638: AND
8639: PUSH
8640: LD_INT 2
8642: PPUSH
8643: LD_EXP 43
8647: PPUSH
8648: CALL_OW 292
8652: AND
8653: PUSH
8654: LD_EXP 30
8658: PPUSH
8659: LD_EXP 43
8663: PPUSH
8664: CALL_OW 296
8668: PUSH
8669: LD_INT 6
8671: LESS
8672: AND
8673: PUSH
8674: LD_EXP 17
8678: NOT
8679: AND
8680: IFFALSE 8904
8682: GO 8684
8684: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
8685: LD_EXP 43
8689: PPUSH
8690: LD_EXP 30
8694: PPUSH
8695: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
8699: LD_EXP 30
8703: PPUSH
8704: LD_EXP 43
8708: PPUSH
8709: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8713: LD_INT 10
8715: PPUSH
8716: CALL_OW 67
// DialogueOn ;
8720: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
8724: LD_EXP 43
8728: PPUSH
8729: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
8733: LD_EXP 30
8737: PPUSH
8738: LD_STRING DH-Deal-1
8740: PPUSH
8741: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
8745: LD_EXP 43
8749: PPUSH
8750: LD_STRING DJ-Deal-2
8752: PPUSH
8753: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
8757: LD_EXP 30
8761: PPUSH
8762: LD_STRING DH-Deal-3
8764: PPUSH
8765: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
8769: LD_EXP 43
8773: PPUSH
8774: LD_STRING DJ-Deal-4
8776: PPUSH
8777: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
8781: LD_EXP 43
8785: PPUSH
8786: LD_STRING DJ-Deal-5
8788: PPUSH
8789: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
8793: LD_EXP 43
8797: PPUSH
8798: LD_STRING DJ-Deal-6
8800: PPUSH
8801: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
8805: LD_EXP 43
8809: PPUSH
8810: LD_STRING DJ-Deal-7
8812: PPUSH
8813: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
8817: LD_EXP 30
8821: PPUSH
8822: LD_STRING DH-Deal-8
8824: PPUSH
8825: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
8829: LD_EXP 30
8833: PPUSH
8834: LD_STRING DH-Deal-9
8836: PPUSH
8837: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
8841: LD_EXP 43
8845: PPUSH
8846: LD_STRING DJ-Deal-10
8848: PPUSH
8849: CALL_OW 88
// DialogueOff ;
8853: CALL_OW 7
// contactWithAmerican := true ;
8857: LD_ADDR_EXP 25
8861: PUSH
8862: LD_INT 1
8864: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
8865: LD_STRING M1-american-out
8867: PPUSH
8868: CALL_OW 604
// SetSide ( Harris , 2 ) ;
8872: LD_EXP 43
8876: PPUSH
8877: LD_INT 2
8879: PPUSH
8880: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
8884: LD_ADDR_EXP 14
8888: PUSH
8889: LD_EXP 14
8893: PPUSH
8894: LD_EXP 43
8898: PPUSH
8899: CALL 51866 0 2
8903: ST_TO_ADDR
// end ;
8904: END
// every 0 0$2 trigger contactWithAmerican and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
8905: LD_EXP 25
8909: PUSH
8910: LD_EXP 43
8914: PUSH
8915: LD_EXP 14
8919: IN
8920: NOT
8921: AND
8922: PUSH
8923: LD_INT 2
8925: PPUSH
8926: LD_EXP 43
8930: PPUSH
8931: CALL_OW 292
8935: AND
8936: PUSH
8937: LD_EXP 30
8941: PPUSH
8942: LD_EXP 43
8946: PPUSH
8947: CALL_OW 296
8951: PUSH
8952: LD_INT 6
8954: LESS
8955: AND
8956: PUSH
8957: LD_EXP 17
8961: NOT
8962: AND
8963: IFFALSE 9088
8965: GO 8967
8967: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
8968: LD_EXP 43
8972: PPUSH
8973: LD_EXP 30
8977: PPUSH
8978: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
8982: LD_EXP 30
8986: PPUSH
8987: LD_EXP 43
8991: PPUSH
8992: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8996: LD_INT 10
8998: PPUSH
8999: CALL_OW 67
// DialogueOn ;
9003: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
9007: LD_EXP 43
9011: PPUSH
9012: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
9016: LD_EXP 43
9020: PPUSH
9021: LD_STRING DJ-Escort-1
9023: PPUSH
9024: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
9028: LD_EXP 30
9032: PPUSH
9033: LD_STRING DH-Escort-2
9035: PPUSH
9036: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
9040: LD_EXP 43
9044: PPUSH
9045: LD_STRING DJ-Escort-3
9047: PPUSH
9048: CALL_OW 88
// DialogueOff ;
9052: CALL_OW 7
// SetSide ( Harris , 2 ) ;
9056: LD_EXP 43
9060: PPUSH
9061: LD_INT 2
9063: PPUSH
9064: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
9068: LD_ADDR_EXP 14
9072: PUSH
9073: LD_EXP 14
9077: PPUSH
9078: LD_EXP 43
9082: PPUSH
9083: CALL 51866 0 2
9087: ST_TO_ADDR
// end ;
9088: END
// every 0 0$2 trigger contactWithAmerican and UnitFilter ( americanSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
9089: LD_EXP 25
9093: PUSH
9094: LD_EXP 42
9098: PUSH
9099: LD_EXP 14
9103: DIFF
9104: PPUSH
9105: LD_INT 3
9107: PUSH
9108: LD_INT 120
9110: PUSH
9111: LD_INT 1
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 101
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PPUSH
9136: CALL_OW 72
9140: AND
9141: PUSH
9142: LD_EXP 17
9146: NOT
9147: AND
9148: IFFALSE 9332
9150: GO 9152
9152: DISABLE
9153: LD_INT 0
9155: PPUSH
// begin enable ;
9156: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ f_see , 2 ] ) , Heike ) ;
9157: LD_ADDR_VAR 0 1
9161: PUSH
9162: LD_EXP 42
9166: PUSH
9167: LD_EXP 14
9171: DIFF
9172: PPUSH
9173: LD_INT 101
9175: PUSH
9176: LD_INT 2
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PPUSH
9183: CALL_OW 72
9187: PPUSH
9188: LD_EXP 30
9192: PPUSH
9193: CALL_OW 74
9197: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
9198: LD_VAR 0 1
9202: PPUSH
9203: LD_EXP 30
9207: PPUSH
9208: CALL_OW 296
9212: PUSH
9213: LD_INT 6
9215: LESS
9216: IFFALSE 9332
// begin DialogueOn ;
9218: CALL_OW 6
// CenterNowOnUnits ( un ) ;
9222: LD_VAR 0 1
9226: PPUSH
9227: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
9231: LD_EXP 30
9235: PPUSH
9236: LD_STRING DH-USsol-1
9238: PPUSH
9239: CALL_OW 88
// if GetSex ( un ) = sex_male then
9243: LD_VAR 0 1
9247: PPUSH
9248: CALL_OW 258
9252: PUSH
9253: LD_INT 1
9255: EQUAL
9256: IFFALSE 9272
// Say ( un , DUSM-USsol-2 ) else
9258: LD_VAR 0 1
9262: PPUSH
9263: LD_STRING DUSM-USsol-2
9265: PPUSH
9266: CALL_OW 88
9270: GO 9284
// Say ( un , DUSF-USsol-2 ) ;
9272: LD_VAR 0 1
9276: PPUSH
9277: LD_STRING DUSF-USsol-2
9279: PPUSH
9280: CALL_OW 88
// DialogueOff ;
9284: CALL_OW 7
// un := Join ( heikeSquad , un ) ;
9288: LD_ADDR_VAR 0 1
9292: PUSH
9293: LD_EXP 14
9297: PPUSH
9298: LD_VAR 0 1
9302: PPUSH
9303: CALL 51866 0 2
9307: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
9308: LD_VAR 0 1
9312: PPUSH
9313: LD_INT 1
9315: PPUSH
9316: CALL_OW 109
// SetSide ( un , 2 ) ;
9320: LD_VAR 0 1
9324: PPUSH
9325: LD_INT 2
9327: PPUSH
9328: CALL_OW 235
// end ; end ;
9332: PPOPN 1
9334: END
// every 0 0$2 trigger heikeSecondSquad and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
9335: LD_EXP 41
9339: PUSH
9340: LD_EXP 41
9344: PUSH
9345: LD_EXP 14
9349: DIFF
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 120
9356: PUSH
9357: LD_INT 1
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PUSH
9368: LD_INT 101
9370: PUSH
9371: LD_INT 2
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PPUSH
9382: CALL_OW 72
9386: AND
9387: PUSH
9388: LD_EXP 17
9392: NOT
9393: AND
9394: IFFALSE 9578
9396: GO 9398
9398: DISABLE
9399: LD_INT 0
9401: PPUSH
// begin enable ;
9402: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ f_see , 2 ] ) , Heike ) ;
9403: LD_ADDR_VAR 0 1
9407: PUSH
9408: LD_EXP 41
9412: PUSH
9413: LD_EXP 14
9417: DIFF
9418: PPUSH
9419: LD_INT 101
9421: PUSH
9422: LD_INT 2
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 72
9433: PPUSH
9434: LD_EXP 30
9438: PPUSH
9439: CALL_OW 74
9443: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
9444: LD_VAR 0 1
9448: PPUSH
9449: LD_EXP 30
9453: PPUSH
9454: CALL_OW 296
9458: PUSH
9459: LD_INT 6
9461: LESS
9462: IFFALSE 9578
// begin DialogueOn ;
9464: CALL_OW 6
// CenterNowOnUnits ( un ) ;
9468: LD_VAR 0 1
9472: PPUSH
9473: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
9477: LD_EXP 30
9481: PPUSH
9482: LD_STRING DH-USsol-1
9484: PPUSH
9485: CALL_OW 88
// if GetSex ( un ) = sex_male then
9489: LD_VAR 0 1
9493: PPUSH
9494: CALL_OW 258
9498: PUSH
9499: LD_INT 1
9501: EQUAL
9502: IFFALSE 9518
// Say ( un , DArm-USsol-2 ) else
9504: LD_VAR 0 1
9508: PPUSH
9509: LD_STRING DArm-USsol-2
9511: PPUSH
9512: CALL_OW 88
9516: GO 9530
// Say ( un , DArf-USsol-3 ) ;
9518: LD_VAR 0 1
9522: PPUSH
9523: LD_STRING DArf-USsol-3
9525: PPUSH
9526: CALL_OW 88
// DialogueOff ;
9530: CALL_OW 7
// un := Join ( heikeSquad , un ) ;
9534: LD_ADDR_VAR 0 1
9538: PUSH
9539: LD_EXP 14
9543: PPUSH
9544: LD_VAR 0 1
9548: PPUSH
9549: CALL 51866 0 2
9553: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
9554: LD_VAR 0 1
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 109
// SetSide ( un , 2 ) ;
9566: LD_VAR 0 1
9570: PPUSH
9571: LD_INT 2
9573: PPUSH
9574: CALL_OW 235
// end ; end ;
9578: PPOPN 1
9580: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and heikeSquad > 5 and not americanContact and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
9581: LD_EXP 42
9585: PPUSH
9586: LD_INT 101
9588: PUSH
9589: LD_INT 2
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PPUSH
9596: CALL_OW 72
9600: PUSH
9601: LD_EXP 14
9605: PUSH
9606: LD_INT 5
9608: GREATER
9609: AND
9610: PUSH
9611: LD_EXP 10
9615: NOT
9616: AND
9617: PUSH
9618: LD_EXP 25
9622: NOT
9623: AND
9624: PUSH
9625: LD_EXP 17
9629: NOT
9630: AND
9631: IFFALSE 9732
9633: GO 9635
9635: DISABLE
9636: LD_INT 0
9638: PPUSH
// begin un := UnitFilter ( americanSquad , [ f_see , 2 ] ) [ 1 ] ;
9639: LD_ADDR_VAR 0 1
9643: PUSH
9644: LD_EXP 42
9648: PPUSH
9649: LD_INT 101
9651: PUSH
9652: LD_INT 2
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PPUSH
9659: CALL_OW 72
9663: PUSH
9664: LD_INT 1
9666: ARRAY
9667: ST_TO_ADDR
// DialogueOn ;
9668: CALL_OW 6
// if GetSex ( un ) = sex_male then
9672: LD_VAR 0 1
9676: PPUSH
9677: CALL_OW 258
9681: PUSH
9682: LD_INT 1
9684: EQUAL
9685: IFFALSE 9701
// Say ( un , DUSm-USsol-a-2 ) else
9687: LD_VAR 0 1
9691: PPUSH
9692: LD_STRING DUSm-USsol-a-2
9694: PPUSH
9695: CALL_OW 88
9699: GO 9713
// Say ( un , DUSf-USsol-a-2 ) ;
9701: LD_VAR 0 1
9705: PPUSH
9706: LD_STRING DUSf-USsol-a-2
9708: PPUSH
9709: CALL_OW 88
// DialogueOff ;
9713: CALL_OW 7
// wait ( 0 0$2 ) ;
9717: LD_INT 70
9719: PPUSH
9720: CALL_OW 67
// isAlarm := true ;
9724: LD_ADDR_EXP 17
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// end ;
9732: PPOPN 1
9734: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and laundryAllowed and not giviAsRussian and not heikeAsRussian and InEntrance ( Givi , laundry ) marked gameStartEvent do
9735: LD_EXP 17
9739: NOT
9740: PUSH
9741: LD_EXP 31
9745: PPUSH
9746: CALL_OW 302
9750: AND
9751: PUSH
9752: LD_EXP 26
9756: AND
9757: PUSH
9758: LD_EXP 28
9762: NOT
9763: AND
9764: PUSH
9765: LD_EXP 27
9769: NOT
9770: AND
9771: PUSH
9772: LD_EXP 31
9776: PPUSH
9777: LD_INT 165
9779: PPUSH
9780: CALL 13785 0 2
9784: AND
9785: IFFALSE 9917
9787: GO 9789
9789: DISABLE
// begin enable ;
9790: ENABLE
// InGameOn ;
9791: CALL_OW 8
// SetSide ( Givi , 5 ) ;
9795: LD_EXP 31
9799: PPUSH
9800: LD_INT 5
9802: PPUSH
9803: CALL_OW 235
// SetSide ( laundry , 5 ) ;
9807: LD_INT 165
9809: PPUSH
9810: LD_INT 5
9812: PPUSH
9813: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
9817: LD_EXP 31
9821: PPUSH
9822: LD_INT 165
9824: PPUSH
9825: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
9829: LD_INT 35
9831: PPUSH
9832: CALL_OW 67
// until IsInUnit ( Givi ) ;
9836: LD_EXP 31
9840: PPUSH
9841: CALL_OW 310
9845: IFFALSE 9829
// case Query ( HeikeInLaundry ) of 1 :
9847: LD_STRING HeikeInLaundry
9849: PPUSH
9850: CALL_OW 97
9854: PUSH
9855: LD_INT 1
9857: DOUBLE
9858: EQUAL
9859: IFTRUE 9863
9861: GO 9870
9863: POP
// SpawnGiviAsRussian ; 2 :
9864: CALL 1492 0 0
9868: GO 9882
9870: LD_INT 2
9872: DOUBLE
9873: EQUAL
9874: IFTRUE 9878
9876: GO 9881
9878: POP
// ; end ;
9879: GO 9882
9881: POP
// ComExitBuilding ( Givi ) ;
9882: LD_EXP 31
9886: PPUSH
9887: CALL_OW 122
// SetSide ( Givi , 2 ) ;
9891: LD_EXP 31
9895: PPUSH
9896: LD_INT 2
9898: PPUSH
9899: CALL_OW 235
// SetSide ( laundry , 3 ) ;
9903: LD_INT 165
9905: PPUSH
9906: LD_INT 3
9908: PPUSH
9909: CALL_OW 235
// InGameOff ;
9913: CALL_OW 9
// end ;
9917: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) do
9918: LD_EXP 17
9922: NOT
9923: PUSH
9924: LD_EXP 28
9928: AND
9929: PUSH
9930: LD_EXP 31
9934: PPUSH
9935: CALL_OW 248
9939: PUSH
9940: LD_INT 3
9942: EQUAL
9943: AND
9944: PUSH
9945: LD_EXP 31
9949: PPUSH
9950: LD_INT 119
9952: PPUSH
9953: CALL 13785 0 2
9957: AND
9958: IFFALSE 10146
9960: GO 9962
9962: DISABLE
// begin InGameOn ;
9963: CALL_OW 8
// wait ( 0 0$1 ) ;
9967: LD_INT 35
9969: PPUSH
9970: CALL_OW 67
// DialogueOn ;
9974: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
9978: LD_EXP 31
9982: PPUSH
9983: LD_STRING DG-Captive-1
9985: PPUSH
9986: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
9990: LD_EXP 48
9994: PPUSH
9995: LD_STRING DCom-Captive-2
9997: PPUSH
9998: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
10002: LD_EXP 31
10006: PPUSH
10007: LD_STRING DG-Captive-3
10009: PPUSH
10010: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
10014: LD_EXP 48
10018: PPUSH
10019: LD_STRING DCom-Captive-4
10021: PPUSH
10022: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
10026: LD_EXP 48
10030: PPUSH
10031: CALL_OW 64
// DialogueOff ;
10035: CALL_OW 7
// InGameOff ;
10039: CALL_OW 9
// ComExitBuilding ( Givi ) ;
10043: LD_EXP 31
10047: PPUSH
10048: CALL_OW 122
// if Aviradze then
10052: LD_EXP 40
10056: IFFALSE 10099
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
10058: LD_ADDR_EXP 14
10062: PUSH
10063: LD_EXP 14
10067: PPUSH
10068: LD_EXP 40
10072: PPUSH
10073: CALL 51866 0 2
10077: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
10078: LD_EXP 40
10082: PPUSH
10083: LD_INT 2
10085: PPUSH
10086: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
10090: LD_EXP 40
10094: PPUSH
10095: CALL_OW 122
// end ; if Ibrahim then
10099: LD_EXP 33
10103: IFFALSE 10146
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
10105: LD_ADDR_EXP 14
10109: PUSH
10110: LD_EXP 14
10114: PPUSH
10115: LD_EXP 33
10119: PPUSH
10120: CALL 51866 0 2
10124: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
10125: LD_EXP 33
10129: PPUSH
10130: LD_INT 2
10132: PPUSH
10133: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
10137: LD_EXP 33
10141: PPUSH
10142: CALL_OW 122
// end ; end ;
10146: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) do
10147: LD_EXP 17
10151: NOT
10152: PUSH
10153: LD_EXP 27
10157: AND
10158: PUSH
10159: LD_EXP 30
10163: PPUSH
10164: CALL_OW 248
10168: PUSH
10169: LD_INT 3
10171: EQUAL
10172: AND
10173: PUSH
10174: LD_EXP 30
10178: PPUSH
10179: LD_INT 119
10181: PPUSH
10182: CALL 13785 0 2
10186: AND
10187: IFFALSE 10425
10189: GO 10191
10191: DISABLE
// begin InGameOn ;
10192: CALL_OW 8
// wait ( 0 0$1 ) ;
10196: LD_INT 35
10198: PPUSH
10199: CALL_OW 67
// DialogueOn ;
10203: CALL_OW 6
// if Aviradze and Ibrahim then
10207: LD_EXP 40
10211: PUSH
10212: LD_EXP 33
10216: AND
10217: IFFALSE 10233
// Say ( Heike , DH-Captive-a-1 ) else
10219: LD_EXP 30
10223: PPUSH
10224: LD_STRING DH-Captive-a-1
10226: PPUSH
10227: CALL_OW 88
10231: GO 10245
// Say ( Heike , DH-Captive-a-b-1 ) ;
10233: LD_EXP 30
10237: PPUSH
10238: LD_STRING DH-Captive-a-b-1
10240: PPUSH
10241: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
10245: LD_EXP 48
10249: PPUSH
10250: LD_STRING DCom-Captive-a-2
10252: PPUSH
10253: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
10257: LD_EXP 30
10261: PPUSH
10262: LD_STRING DH-Captive-a-3
10264: PPUSH
10265: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
10269: LD_EXP 48
10273: PPUSH
10274: LD_STRING DCom-Captive-a-4
10276: PPUSH
10277: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
10281: LD_EXP 30
10285: PPUSH
10286: LD_STRING DH-Captive-a-5
10288: PPUSH
10289: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-6 ) ;
10293: LD_EXP 48
10297: PPUSH
10298: LD_STRING DCom-Captive-a-6
10300: PPUSH
10301: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
10305: LD_EXP 48
10309: PPUSH
10310: CALL_OW 64
// DialogueOff ;
10314: CALL_OW 7
// InGameOff ;
10318: CALL_OW 9
// ComExitBuilding ( Heike ) ;
10322: LD_EXP 30
10326: PPUSH
10327: CALL_OW 122
// if Aviradze then
10331: LD_EXP 40
10335: IFFALSE 10378
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
10337: LD_ADDR_EXP 14
10341: PUSH
10342: LD_EXP 14
10346: PPUSH
10347: LD_EXP 40
10351: PPUSH
10352: CALL 51866 0 2
10356: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
10357: LD_EXP 40
10361: PPUSH
10362: LD_INT 2
10364: PPUSH
10365: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
10369: LD_EXP 40
10373: PPUSH
10374: CALL_OW 122
// end ; if Ibrahim then
10378: LD_EXP 33
10382: IFFALSE 10425
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
10384: LD_ADDR_EXP 14
10388: PUSH
10389: LD_EXP 14
10393: PPUSH
10394: LD_EXP 33
10398: PPUSH
10399: CALL 51866 0 2
10403: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
10404: LD_EXP 33
10408: PPUSH
10409: LD_INT 2
10411: PPUSH
10412: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
10416: LD_EXP 33
10420: PPUSH
10421: CALL_OW 122
// end ; end ;
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
10426: LD_INT 2
10428: PUSH
10429: LD_INT 25
10431: PUSH
10432: LD_INT 32
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 25
10441: PUSH
10442: LD_INT 34
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 69
10458: IFFALSE 10470
10460: GO 10462
10462: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
10463: LD_STRING M1-weapons-out
10465: PPUSH
10466: CALL_OW 604
10470: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ f_inarea , baseOutsideBorderArea ] ) and IsOk ( Heike ) marked gameStartEvent do var i , j , x , y ;
10471: LD_EXP 14
10475: PPUSH
10476: LD_INT 95
10478: PUSH
10479: LD_INT 23
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 72
10490: PUSH
10491: LD_EXP 30
10495: PPUSH
10496: CALL_OW 302
10500: AND
10501: IFFALSE 10673
10503: GO 10505
10505: DISABLE
10506: LD_INT 0
10508: PPUSH
10509: PPUSH
10510: PPUSH
10511: PPUSH
// begin Say ( Heike , DH-End-1 ) ;
10512: LD_EXP 30
10516: PPUSH
10517: LD_STRING DH-End-1
10519: PPUSH
10520: CALL_OW 88
// if explosivePlantedList then
10524: LD_EXP 29
10528: IFFALSE 10658
// begin for i in explosivePlantedList do
10530: LD_ADDR_VAR 0 1
10534: PUSH
10535: LD_EXP 29
10539: PUSH
10540: FOR_IN
10541: IFFALSE 10644
// begin x := GetX ( i ) ;
10543: LD_ADDR_VAR 0 3
10547: PUSH
10548: LD_VAR 0 1
10552: PPUSH
10553: CALL_OW 250
10557: ST_TO_ADDR
// y := GetY ( i ) ;
10558: LD_ADDR_VAR 0 4
10562: PUSH
10563: LD_VAR 0 1
10567: PPUSH
10568: CALL_OW 251
10572: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
10573: LD_ADDR_VAR 0 2
10577: PUSH
10578: LD_INT 1
10580: PUSH
10581: LD_INT 3
10583: PUSH
10584: LD_INT 5
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: FOR_IN
10593: IFFALSE 10640
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
10595: LD_VAR 0 3
10599: PPUSH
10600: LD_VAR 0 2
10604: PPUSH
10605: LD_INT 2
10607: PPUSH
10608: CALL_OW 272
10612: PPUSH
10613: LD_VAR 0 4
10617: PPUSH
10618: LD_VAR 0 2
10622: PPUSH
10623: LD_INT 2
10625: PPUSH
10626: CALL_OW 273
10630: PPUSH
10631: LD_INT 1
10633: PPUSH
10634: CALL_OW 453
10638: GO 10592
10640: POP
10641: POP
// end ;
10642: GO 10540
10644: POP
10645: POP
// Say ( Heike , DH-End-2 ) ;
10646: LD_EXP 30
10650: PPUSH
10651: LD_STRING DH-End-2
10653: PPUSH
10654: CALL_OW 88
// end ; if not isAlarm then
10658: LD_EXP 17
10662: NOT
10663: IFFALSE 10673
// isAlarm := true ;
10665: LD_ADDR_EXP 17
10669: PUSH
10670: LD_INT 1
10672: ST_TO_ADDR
// end ;
10673: PPOPN 4
10675: END
// function SayHEmpty ( ) ; begin
10676: LD_INT 0
10678: PPUSH
// case rand ( 1 , 3 ) of 1 :
10679: LD_INT 1
10681: PPUSH
10682: LD_INT 3
10684: PPUSH
10685: CALL_OW 12
10689: PUSH
10690: LD_INT 1
10692: DOUBLE
10693: EQUAL
10694: IFTRUE 10698
10696: GO 10713
10698: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
10699: LD_EXP 30
10703: PPUSH
10704: LD_STRING DH-Empty-1
10706: PPUSH
10707: CALL_OW 88
10711: GO 10760
10713: LD_INT 2
10715: DOUBLE
10716: EQUAL
10717: IFTRUE 10721
10719: GO 10736
10721: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
10722: LD_EXP 30
10726: PPUSH
10727: LD_STRING DH-Empty-2
10729: PPUSH
10730: CALL_OW 88
10734: GO 10760
10736: LD_INT 3
10738: DOUBLE
10739: EQUAL
10740: IFTRUE 10744
10742: GO 10759
10744: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
10745: LD_EXP 30
10749: PPUSH
10750: LD_STRING DH-Empty-3
10752: PPUSH
10753: CALL_OW 88
10757: GO 10760
10759: POP
// end ;
10760: LD_VAR 0 1
10764: RET
// function SayHVisited ( ) ; begin
10765: LD_INT 0
10767: PPUSH
// case rand ( 1 , 3 ) of 1 :
10768: LD_INT 1
10770: PPUSH
10771: LD_INT 3
10773: PPUSH
10774: CALL_OW 12
10778: PUSH
10779: LD_INT 1
10781: DOUBLE
10782: EQUAL
10783: IFTRUE 10787
10785: GO 10802
10787: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
10788: LD_EXP 30
10792: PPUSH
10793: LD_STRING DH-Visited-1
10795: PPUSH
10796: CALL_OW 88
10800: GO 10849
10802: LD_INT 2
10804: DOUBLE
10805: EQUAL
10806: IFTRUE 10810
10808: GO 10825
10810: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
10811: LD_EXP 30
10815: PPUSH
10816: LD_STRING DH-Visited-2
10818: PPUSH
10819: CALL_OW 88
10823: GO 10849
10825: LD_INT 3
10827: DOUBLE
10828: EQUAL
10829: IFTRUE 10833
10831: GO 10848
10833: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
10834: LD_EXP 30
10838: PPUSH
10839: LD_STRING DH-Visited-3
10841: PPUSH
10842: CALL_OW 88
10846: GO 10849
10848: POP
// end ;
10849: LD_VAR 0 1
10853: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and IsOk ( Heike ) and IsIdle ( Heike ) marked entranceEvent do var i ;
10854: LD_EXP 17
10858: NOT
10859: PUSH
10860: LD_EXP 15
10864: AND
10865: PUSH
10866: LD_EXP 30
10870: PPUSH
10871: CALL_OW 302
10875: AND
10876: PUSH
10877: LD_EXP 30
10881: PPUSH
10882: CALL_OW 316
10886: AND
10887: IFFALSE 10953
10889: GO 10891
10891: DISABLE
10892: LD_INT 0
10894: PPUSH
// begin enable ;
10895: ENABLE
// for i in entranceAllowedList do
10896: LD_ADDR_VAR 0 1
10900: PUSH
10901: LD_EXP 15
10905: PUSH
10906: FOR_IN
10907: IFFALSE 10951
// if InEntrance ( Heike , i ) then
10909: LD_EXP 30
10913: PPUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL 13785 0 2
10923: IFFALSE 10949
// begin disable ( entranceEvent ) ;
10925: LD_INT 1
10927: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
10928: LD_VAR 0 1
10932: PPUSH
10933: CALL 10956 0 1
// wait ( 0 0$3 ) ;
10937: LD_INT 105
10939: PPUSH
10940: CALL_OW 67
// enable ( entranceEvent ) ;
10944: LD_INT 1
10946: ENABLE_MARKED
// break ;
10947: GO 10951
// end ;
10949: GO 10906
10951: POP
10952: POP
// end ;
10953: PPOPN 1
10955: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
10956: LD_INT 0
10958: PPUSH
10959: PPUSH
// if not building then
10960: LD_VAR 0 1
10964: NOT
10965: IFFALSE 10969
// exit ;
10967: GO 13519
// if building in entranceVisitedList then
10969: LD_VAR 0 1
10973: PUSH
10974: LD_EXP 16
10978: IN
10979: IFFALSE 10987
// begin SayHVisited ( ) ;
10981: CALL 10765 0 0
// exit ;
10985: GO 13519
// end ; case Query ( EnterBuilding ) of 1 :
10987: LD_STRING EnterBuilding
10989: PPUSH
10990: CALL_OW 97
10994: PUSH
10995: LD_INT 1
10997: DOUBLE
10998: EQUAL
10999: IFTRUE 11003
11001: GO 11006
11003: POP
// ; 2 :
11004: GO 11020
11006: LD_INT 2
11008: DOUBLE
11009: EQUAL
11010: IFTRUE 11014
11012: GO 11019
11014: POP
// exit ; end ;
11015: GO 13519
11017: GO 11020
11019: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
11020: LD_ADDR_EXP 16
11024: PUSH
11025: LD_EXP 16
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL 51866 0 2
11039: ST_TO_ADDR
// InGameOn ;
11040: CALL_OW 8
// SetSide ( Heike , 5 ) ;
11044: LD_EXP 30
11048: PPUSH
11049: LD_INT 5
11051: PPUSH
11052: CALL_OW 235
// SetSide ( building , 5 ) ;
11056: LD_VAR 0 1
11060: PPUSH
11061: LD_INT 5
11063: PPUSH
11064: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
11068: LD_EXP 30
11072: PPUSH
11073: LD_VAR 0 1
11077: PPUSH
11078: CALL_OW 120
// wait ( 0 0$3 ) ;
11082: LD_INT 105
11084: PPUSH
11085: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar , barExplosion ] ;
11089: LD_ADDR_VAR 0 3
11093: PUSH
11094: LD_INT 165
11096: PUSH
11097: LD_INT 106
11099: PUSH
11100: LD_INT 135
11102: PUSH
11103: LD_INT 162
11105: PUSH
11106: LD_INT 61
11108: PUSH
11109: LD_INT 109
11111: PUSH
11112: LD_INT 169
11114: PUSH
11115: LD_INT 13
11117: PUSH
11118: LD_INT 147
11120: PUSH
11121: LD_INT 137
11123: PUSH
11124: LD_INT 73
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: ST_TO_ADDR
// if not building in tmp then
11140: LD_VAR 0 1
11144: PUSH
11145: LD_VAR 0 3
11149: IN
11150: NOT
11151: IFFALSE 11159
// SayHEmpty ( ) else
11153: CALL 10676 0 0
11157: GO 13482
// case building of laundry :
11159: LD_VAR 0 1
11163: PUSH
11164: LD_INT 165
11166: DOUBLE
11167: EQUAL
11168: IFTRUE 11172
11170: GO 11260
11172: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
11173: LD_EXP 26
11177: PUSH
11178: LD_EXP 27
11182: NOT
11183: AND
11184: PUSH
11185: LD_EXP 28
11189: NOT
11190: AND
11191: IFFALSE 11246
// begin case Query ( HeikeInLaundry ) of 1 :
11193: LD_STRING HeikeInLaundry
11195: PPUSH
11196: CALL_OW 97
11200: PUSH
11201: LD_INT 1
11203: DOUBLE
11204: EQUAL
11205: IFTRUE 11209
11207: GO 11216
11209: POP
// SpawnHeikeAsRussian ; 2 :
11210: CALL 1403 0 0
11214: GO 11244
11216: LD_INT 2
11218: DOUBLE
11219: EQUAL
11220: IFTRUE 11224
11222: GO 11243
11224: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
11225: LD_ADDR_EXP 16
11229: PUSH
11230: LD_EXP 16
11234: PUSH
11235: LD_VAR 0 1
11239: DIFF
11240: ST_TO_ADDR
11241: GO 11244
11243: POP
// end else
11244: GO 11258
// Say ( Heike , DH-Locked ) ;
11246: LD_EXP 30
11250: PPUSH
11251: LD_STRING DH-Locked
11253: PPUSH
11254: CALL_OW 88
// end ; dougBar :
11258: GO 13482
11260: LD_INT 106
11262: DOUBLE
11263: EQUAL
11264: IFTRUE 11268
11266: GO 11620
11268: POP
// begin if contactWithAmerican and americanContact then
11269: LD_EXP 25
11273: PUSH
11274: LD_EXP 10
11278: AND
11279: IFFALSE 11343
// begin Say ( Heike , DH-Escort-a-1 ) ;
11281: LD_EXP 30
11285: PPUSH
11286: LD_STRING DH-Escort-a-1
11288: PPUSH
11289: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
11293: LD_EXP 44
11297: PPUSH
11298: LD_STRING DCa-Escort-a-2
11300: PPUSH
11301: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
11305: LD_EXP 44
11309: PPUSH
11310: LD_STRING DCa-Escort-a-3
11312: PPUSH
11313: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
11317: LD_EXP 30
11321: PPUSH
11322: LD_STRING DH-Escort-a-4
11324: PPUSH
11325: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
11329: LD_EXP 30
11333: PPUSH
11334: LD_STRING DH-Escort-a-5
11336: PPUSH
11337: CALL_OW 88
// end else
11341: GO 11577
// if contactWithAmerican then
11343: LD_EXP 25
11347: IFFALSE 11387
// begin Say ( Heike , DH-Escort-b-1 ) ;
11349: LD_EXP 30
11353: PPUSH
11354: LD_STRING DH-Escort-b-1
11356: PPUSH
11357: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
11361: LD_EXP 44
11365: PPUSH
11366: LD_STRING DCa-Escort-b-2
11368: PPUSH
11369: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
11373: LD_EXP 44
11377: PPUSH
11378: LD_STRING DCa-Escort-b-3
11380: PPUSH
11381: CALL_OW 88
// end else
11385: GO 11577
// begin Say ( Doug , DCa-Deal-a-1 ) ;
11387: LD_EXP 44
11391: PPUSH
11392: LD_STRING DCa-Deal-a-1
11394: PPUSH
11395: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
11399: LD_EXP 44
11403: PPUSH
11404: LD_STRING DCa-Deal-a-2
11406: PPUSH
11407: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
11411: LD_EXP 30
11415: PPUSH
11416: LD_STRING DH-Deal-a-3
11418: PPUSH
11419: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
11423: LD_EXP 44
11427: PPUSH
11428: LD_STRING DCa-Deal-a-4
11430: PPUSH
11431: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
11435: LD_EXP 30
11439: PPUSH
11440: LD_STRING DH-Deal-a-5
11442: PPUSH
11443: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
11447: LD_EXP 44
11451: PPUSH
11452: LD_STRING DCa-Deal-a-6
11454: PPUSH
11455: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
11459: LD_EXP 44
11463: PPUSH
11464: LD_STRING DCa-Deal-a-7
11466: PPUSH
11467: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
11471: LD_EXP 44
11475: PPUSH
11476: LD_STRING DCa-Deal-a-8
11478: PPUSH
11479: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
11483: LD_EXP 44
11487: PPUSH
11488: LD_STRING DCa-Deal-a-9
11490: PPUSH
11491: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
11495: LD_EXP 44
11499: PPUSH
11500: LD_STRING DCa-Deal-a-10
11502: PPUSH
11503: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
11507: LD_EXP 44
11511: PPUSH
11512: LD_STRING DCa-Deal-a-11
11514: PPUSH
11515: CALL_OW 88
// wait ( 0 0$0.3 ) ;
11519: LD_INT 10
11521: PPUSH
11522: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
11526: LD_EXP 44
11530: PPUSH
11531: LD_STRING DCa-Deal-a-12
11533: PPUSH
11534: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
11538: LD_EXP 30
11542: PPUSH
11543: LD_STRING DH-Deal-a-13
11545: PPUSH
11546: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
11550: LD_EXP 30
11554: PPUSH
11555: LD_STRING DH-Deal-a-14
11557: PPUSH
11558: CALL_OW 88
// contactWithAmerican := true ;
11562: LD_ADDR_EXP 25
11566: PUSH
11567: LD_INT 1
11569: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11570: LD_STRING M1-american-out
11572: PPUSH
11573: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
11577: LD_EXP 44
11581: PPUSH
11582: LD_INT 2
11584: PPUSH
11585: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
11589: LD_ADDR_EXP 14
11593: PUSH
11594: LD_EXP 14
11598: PPUSH
11599: LD_EXP 44
11603: PPUSH
11604: CALL 51866 0 2
11608: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
11609: LD_EXP 44
11613: PPUSH
11614: CALL_OW 122
// end ; usLab :
11618: GO 13482
11620: LD_INT 135
11622: DOUBLE
11623: EQUAL
11624: IFTRUE 11628
11626: GO 11929
11628: POP
// begin if hasSniperRifle then
11629: LD_EXP 11
11633: IFFALSE 11927
// begin if IsOK ( Kaia ) and Kaia in heikeSquad then
11635: LD_EXP 35
11639: PPUSH
11640: CALL_OW 302
11644: PUSH
11645: LD_EXP 35
11649: PUSH
11650: LD_EXP 14
11654: IN
11655: AND
11656: IFFALSE 11901
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
11658: LD_EXP 30
11662: PPUSH
11663: LD_EXP 35
11667: PPUSH
11668: CALL_OW 296
11672: PUSH
11673: LD_INT 10
11675: GREATER
11676: IFFALSE 11701
// begin Query ( KaiaDistance ) ;
11678: LD_STRING KaiaDistance
11680: PPUSH
11681: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
11685: LD_ADDR_EXP 16
11689: PUSH
11690: LD_EXP 16
11694: PUSH
11695: LD_INT 135
11697: DIFF
11698: ST_TO_ADDR
// end else
11699: GO 11899
// begin SetSide ( Kaia , 5 ) ;
11701: LD_EXP 35
11705: PPUSH
11706: LD_INT 5
11708: PPUSH
11709: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
11713: LD_EXP 35
11717: PPUSH
11718: LD_INT 135
11720: PPUSH
11721: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
11725: LD_INT 35
11727: PPUSH
11728: CALL_OW 67
// until IsInUnit ( Kaia ) ;
11732: LD_EXP 35
11736: PPUSH
11737: CALL_OW 310
11741: IFFALSE 11725
// Say ( Kaia , DK-Sniper-1 ) ;
11743: LD_EXP 35
11747: PPUSH
11748: LD_STRING DK-Sniper-1
11750: PPUSH
11751: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
11755: LD_EXP 35
11759: PPUSH
11760: CALL_OW 257
11764: PUSH
11765: LD_INT 34
11767: EQUAL
11768: PUSH
11769: LD_EXP 32
11773: PUSH
11774: LD_EXP 14
11778: IN
11779: AND
11780: PUSH
11781: LD_EXP 32
11785: PPUSH
11786: CALL_OW 302
11790: AND
11791: IFFALSE 11819
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
11793: LD_EXP 35
11797: PPUSH
11798: LD_STRING DK-Sniper-a-2
11800: PPUSH
11801: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
11805: LD_EXP 32
11809: PPUSH
11810: LD_INT 32
11812: PPUSH
11813: CALL_OW 336
// end else
11817: GO 11878
// begin Say ( Kaia , DK-Sniper-2 ) ;
11819: LD_EXP 35
11823: PPUSH
11824: LD_STRING DK-Sniper-2
11826: PPUSH
11827: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
11831: LD_EXP 35
11835: PPUSH
11836: LD_INT 32
11838: PPUSH
11839: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
11843: LD_EXP 37
11847: PPUSH
11848: CALL_OW 302
11852: PUSH
11853: LD_EXP 37
11857: PUSH
11858: LD_EXP 14
11862: IN
11863: AND
11864: IFFALSE 11878
// Say ( Markov , DMar-Sniper-3 ) ;
11866: LD_EXP 37
11870: PPUSH
11871: LD_STRING DMar-Sniper-3
11873: PPUSH
11874: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
11878: LD_EXP 35
11882: PPUSH
11883: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
11887: LD_EXP 35
11891: PPUSH
11892: LD_INT 2
11894: PPUSH
11895: CALL_OW 235
// end ; end else
11899: GO 11927
// begin Say ( Heike , DH-Locked ) ;
11901: LD_EXP 30
11905: PPUSH
11906: LD_STRING DH-Locked
11908: PPUSH
11909: CALL_OW 88
// entranceVisitedList := entranceVisitedList diff usLab ;
11913: LD_ADDR_EXP 16
11917: PUSH
11918: LD_EXP 16
11922: PUSH
11923: LD_INT 135
11925: DIFF
11926: ST_TO_ADDR
// end ; end ; end ; drugsLab :
11927: GO 13482
11929: LD_INT 162
11931: DOUBLE
11932: EQUAL
11933: IFTRUE 11937
11935: GO 12070
11937: POP
// begin if hasStimDrugs then
11938: LD_EXP 9
11942: IFFALSE 12056
// begin wait ( 0 0$1 ) ;
11944: LD_INT 35
11946: PPUSH
11947: CALL_OW 67
// if not hasStimDrugsCollected then
11951: LD_EXP 24
11955: NOT
11956: IFFALSE 11998
// begin Say ( Heike , DH-Lab-1 ) ;
11958: LD_EXP 30
11962: PPUSH
11963: LD_STRING DH-Lab-1
11965: PPUSH
11966: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
11970: LD_INT 5
11972: PPUSH
11973: LD_INT 2
11975: PPUSH
11976: LD_INT 2
11978: PPUSH
11979: CALL_OW 322
// hasStimDrugsCollected := true ;
11983: LD_ADDR_EXP 24
11987: PUSH
11988: LD_INT 1
11990: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
11991: LD_STRING M1-drugs-out
11993: PPUSH
11994: CALL_OW 604
// end ; if not hasExplosionCollected then
11998: LD_EXP 23
12002: NOT
12003: IFFALSE 12021
// entranceVisitedList := entranceVisitedList diff drugsLab else
12005: LD_ADDR_EXP 16
12009: PUSH
12010: LD_EXP 16
12014: PUSH
12015: LD_INT 162
12017: DIFF
12018: ST_TO_ADDR
12019: GO 12054
// begin wait ( 0 0$3 ) ;
12021: LD_INT 105
12023: PPUSH
12024: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
12028: LD_EXP 30
12032: PPUSH
12033: LD_STRING DH-Lab-2
12035: PPUSH
12036: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
12040: LD_STRING M1-drugsLab-out
12042: PPUSH
12043: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
12047: LD_INT 162
12049: PPUSH
12050: CALL 14052 0 1
// end ; end else
12054: GO 12068
// Say ( Heike , DH-Locked ) ;
12056: LD_EXP 30
12060: PPUSH
12061: LD_STRING DH-Locked
12063: PPUSH
12064: CALL_OW 88
// end ; ruFac :
12068: GO 13482
12070: LD_INT 61
12072: DOUBLE
12073: EQUAL
12074: IFTRUE 12078
12076: GO 12188
12078: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
12079: LD_EXP 37
12083: PPUSH
12084: CALL_OW 302
12088: PUSH
12089: LD_EXP 37
12093: PUSH
12094: LD_EXP 14
12098: IN
12099: NOT
12100: AND
12101: IFFALSE 12182
// begin Say ( Heike , DH-Krastyo-1 ) ;
12103: LD_EXP 30
12107: PPUSH
12108: LD_STRING DH-Krastyo-1
12110: PPUSH
12111: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
12115: LD_EXP 37
12119: PPUSH
12120: LD_STRING DMar-Krastyo-2
12122: PPUSH
12123: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
12127: LD_EXP 37
12131: PPUSH
12132: LD_STRING DMar-Krastyo-3
12134: PPUSH
12135: CALL_OW 88
// SetSide ( Markov , 2 ) ;
12139: LD_EXP 37
12143: PPUSH
12144: LD_INT 2
12146: PPUSH
12147: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
12151: LD_ADDR_EXP 14
12155: PUSH
12156: LD_EXP 14
12160: PPUSH
12161: LD_EXP 37
12165: PPUSH
12166: CALL 51866 0 2
12170: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
12171: LD_EXP 37
12175: PPUSH
12176: CALL_OW 122
// end else
12180: GO 12186
// SayHEmpty ( ) ;
12182: CALL 10676 0 0
// end ; ruBarKam :
12186: GO 13482
12188: LD_INT 109
12190: DOUBLE
12191: EQUAL
12192: IFTRUE 12196
12194: GO 12343
12196: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
12197: LD_EXP 34
12201: PPUSH
12202: CALL_OW 302
12206: PUSH
12207: LD_EXP 34
12211: PUSH
12212: LD_EXP 14
12216: IN
12217: NOT
12218: AND
12219: IFFALSE 12337
// begin Say ( Heike , DH-Kamil-1 ) ;
12221: LD_EXP 30
12225: PPUSH
12226: LD_STRING DH-Kamil-1
12228: PPUSH
12229: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
12233: LD_EXP 34
12237: PPUSH
12238: LD_STRING DKam-Kamil-2
12240: PPUSH
12241: CALL_OW 88
// if IsOk ( Sophia ) then
12245: LD_EXP 36
12249: PPUSH
12250: CALL_OW 302
12254: IFFALSE 12294
// if Sophia in heikeSquad then
12256: LD_EXP 36
12260: PUSH
12261: LD_EXP 14
12265: IN
12266: IFFALSE 12282
// Say ( Kamil , DKam-Kamil-a-3 ) else
12268: LD_EXP 34
12272: PPUSH
12273: LD_STRING DKam-Kamil-a-3
12275: PPUSH
12276: CALL_OW 88
12280: GO 12294
// Say ( Kamil , DKam-Kamil-3 ) ;
12282: LD_EXP 34
12286: PPUSH
12287: LD_STRING DKam-Kamil-3
12289: PPUSH
12290: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
12294: LD_EXP 34
12298: PPUSH
12299: LD_INT 2
12301: PPUSH
12302: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
12306: LD_ADDR_EXP 14
12310: PUSH
12311: LD_EXP 14
12315: PPUSH
12316: LD_EXP 34
12320: PPUSH
12321: CALL 51866 0 2
12325: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
12326: LD_EXP 34
12330: PPUSH
12331: CALL_OW 122
// end else
12335: GO 12341
// SayHEmpty ( ) ;
12337: CALL 10676 0 0
// end ; ruOutpost1 :
12341: GO 13482
12343: LD_INT 169
12345: DOUBLE
12346: EQUAL
12347: IFTRUE 12351
12349: GO 12693
12351: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
12352: LD_EXP 39
12356: PPUSH
12357: CALL_OW 302
12361: PUSH
12362: LD_EXP 39
12366: PUSH
12367: LD_EXP 14
12371: IN
12372: NOT
12373: AND
12374: IFFALSE 12687
// begin if hasMethanol then
12376: LD_EXP 13
12380: IFFALSE 12616
// begin Say ( Heike , DH-Kurt-1 ) ;
12382: LD_EXP 30
12386: PPUSH
12387: LD_STRING DH-Kurt-1
12389: PPUSH
12390: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
12394: LD_EXP 39
12398: PPUSH
12399: LD_STRING DKs-Kurt-2
12401: PPUSH
12402: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
12406: LD_EXP 31
12410: PPUSH
12411: LD_INT 169
12413: PPUSH
12414: CALL_OW 296
12418: PUSH
12419: LD_INT 10
12421: LESS
12422: PUSH
12423: LD_EXP 31
12427: PUSH
12428: LD_EXP 14
12432: IN
12433: AND
12434: IFFALSE 12511
// begin ComMoveXY ( Givi , 100 , 37 ) ;
12436: LD_EXP 31
12440: PPUSH
12441: LD_INT 100
12443: PPUSH
12444: LD_INT 37
12446: PPUSH
12447: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
12451: LD_EXP 31
12455: PPUSH
12456: LD_INT 169
12458: PPUSH
12459: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12463: LD_INT 35
12465: PPUSH
12466: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
12470: LD_EXP 31
12474: PPUSH
12475: LD_INT 169
12477: PPUSH
12478: CALL_OW 296
12482: PUSH
12483: LD_INT 7
12485: LESS
12486: IFFALSE 12463
// Say ( Givi , DG-Kurt-3 ) ;
12488: LD_EXP 31
12492: PPUSH
12493: LD_STRING DG-Kurt-3
12495: PPUSH
12496: CALL_OW 88
// ComStop ( Givi ) ;
12500: LD_EXP 31
12504: PPUSH
12505: CALL_OW 141
// end else
12509: GO 12614
// if GetDistUnits ( Olaf , ruOutpost1 ) < 10 and Olaf in heikeSquad then
12511: LD_EXP 38
12515: PPUSH
12516: LD_INT 169
12518: PPUSH
12519: CALL_OW 296
12523: PUSH
12524: LD_INT 10
12526: LESS
12527: PUSH
12528: LD_EXP 38
12532: PUSH
12533: LD_EXP 14
12537: IN
12538: AND
12539: IFFALSE 12614
// begin ComMoveXY ( Olaf , 100 , 37 ) ;
12541: LD_EXP 38
12545: PPUSH
12546: LD_INT 100
12548: PPUSH
12549: LD_INT 37
12551: PPUSH
12552: CALL_OW 111
// AddComTurnUnit ( Olaf , ruOutpost1 ) ;
12556: LD_EXP 38
12560: PPUSH
12561: LD_INT 169
12563: PPUSH
12564: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12568: LD_INT 35
12570: PPUSH
12571: CALL_OW 67
// until GetDistUnits ( Olaf , ruOutpost1 ) < 7 ;
12575: LD_EXP 38
12579: PPUSH
12580: LD_INT 169
12582: PPUSH
12583: CALL_OW 296
12587: PUSH
12588: LD_INT 7
12590: LESS
12591: IFFALSE 12568
// Say ( Olaf , DO-Kurt-a-3 ) ;
12593: LD_EXP 38
12597: PPUSH
12598: LD_STRING DO-Kurt-a-3
12600: PPUSH
12601: CALL_OW 88
// ComStop ( Olaf ) ;
12605: LD_EXP 38
12609: PPUSH
12610: CALL_OW 141
// end ; end else
12614: GO 12644
// begin Say ( Heike , DH-Kurt-1 ) ;
12616: LD_EXP 30
12620: PPUSH
12621: LD_STRING DH-Kurt-1
12623: PPUSH
12624: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
12628: LD_EXP 39
12632: PPUSH
12633: LD_STRING DKs-Kurt-2
12635: PPUSH
12636: CALL_OW 88
// SpawnAdditionalRuGuards ;
12640: CALL 2263 0 0
// end ; SetSide ( Kurt , 2 ) ;
12644: LD_EXP 39
12648: PPUSH
12649: LD_INT 2
12651: PPUSH
12652: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
12656: LD_ADDR_EXP 14
12660: PUSH
12661: LD_EXP 14
12665: PPUSH
12666: LD_EXP 39
12670: PPUSH
12671: CALL 51866 0 2
12675: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 122
// end else
12685: GO 12691
// SayHEmpty ( ) ;
12687: CALL 10676 0 0
// end ; ruOutpostBar :
12691: GO 13482
12693: LD_INT 13
12695: DOUBLE
12696: EQUAL
12697: IFTRUE 12701
12699: GO 12747
12701: POP
// begin if not hasGuardPatrolPlan then
12702: LD_EXP 18
12706: NOT
12707: IFFALSE 12741
// begin Say ( Heike , DH-PatrolPlan ) ;
12709: LD_EXP 30
12713: PPUSH
12714: LD_STRING DH-PatrolPlan
12716: PPUSH
12717: CALL_OW 88
// hasGuardPatrolPlan := true ;
12721: LD_ADDR_EXP 18
12725: PUSH
12726: LD_INT 1
12728: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
12729: LD_INT 6
12731: PPUSH
12732: LD_INT 2
12734: PPUSH
12735: CALL_OW 343
// end else
12739: GO 12745
// SayHEmpty ( ) ;
12741: CALL 10676 0 0
// end ; ruKaiaBar :
12745: GO 13482
12747: LD_INT 147
12749: DOUBLE
12750: EQUAL
12751: IFTRUE 12755
12753: GO 12902
12755: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
12756: LD_EXP 35
12760: PPUSH
12761: CALL_OW 302
12765: PUSH
12766: LD_EXP 35
12770: PUSH
12771: LD_EXP 14
12775: IN
12776: NOT
12777: AND
12778: IFFALSE 12900
// begin Say ( Heike , DH-Kaia-1 ) ;
12780: LD_EXP 30
12784: PPUSH
12785: LD_STRING DH-Kaia-1
12787: PPUSH
12788: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
12792: LD_EXP 35
12796: PPUSH
12797: LD_STRING DK-Kaia-2
12799: PPUSH
12800: CALL_OW 88
// if hasSniperRifle then
12804: LD_EXP 11
12808: IFFALSE 12859
// begin if IsOk ( Markov ) then
12810: LD_EXP 37
12814: PPUSH
12815: CALL_OW 302
12819: IFFALSE 12835
// Say ( Kaia , DK-Kaia-3 ) else
12821: LD_EXP 35
12825: PPUSH
12826: LD_STRING DK-Kaia-3
12828: PPUSH
12829: CALL_OW 88
12833: GO 12847
// Say ( Kaia , DK-Kaia-a-3 ) ;
12835: LD_EXP 35
12839: PPUSH
12840: LD_STRING DK-Kaia-a-3
12842: PPUSH
12843: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
12847: LD_EXP 30
12851: PPUSH
12852: LD_STRING DH-Kaia-4
12854: PPUSH
12855: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
12859: LD_EXP 35
12863: PPUSH
12864: LD_INT 2
12866: PPUSH
12867: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
12871: LD_ADDR_EXP 14
12875: PUSH
12876: LD_EXP 14
12880: PPUSH
12881: LD_EXP 35
12885: PPUSH
12886: CALL 51866 0 2
12890: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
12891: LD_EXP 35
12895: PPUSH
12896: CALL_OW 122
// end ; end ; ruWeaponsBar :
12900: GO 13482
12902: LD_INT 137
12904: DOUBLE
12905: EQUAL
12906: IFTRUE 12910
12908: GO 13481
12910: POP
// begin if hasWeapons then
12911: LD_EXP 19
12915: IFFALSE 13467
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
12917: LD_ADDR_EXP 16
12921: PUSH
12922: LD_EXP 16
12926: PUSH
12927: LD_INT 137
12929: DIFF
12930: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
12931: LD_ADDR_VAR 0 3
12935: PUSH
12936: LD_EXP 14
12940: PPUSH
12941: LD_INT 91
12943: PUSH
12944: LD_EXP 30
12948: PUSH
12949: LD_INT 8
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: PPUSH
12957: CALL_OW 72
12961: ST_TO_ADDR
// if not heikeSquad or not tmp then
12962: LD_EXP 14
12966: NOT
12967: PUSH
12968: LD_VAR 0 3
12972: NOT
12973: OR
12974: IFFALSE 12990
// Say ( Heike , DH-Weapons-Alone ) else
12976: LD_EXP 30
12980: PPUSH
12981: LD_STRING DH-Weapons-Alone
12983: PPUSH
12984: CALL_OW 88
12988: GO 13465
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
12990: LD_ADDR_EXP 16
12994: PUSH
12995: LD_EXP 16
12999: PPUSH
13000: LD_INT 137
13002: PPUSH
13003: CALL 51866 0 2
13007: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
13008: LD_EXP 30
13012: PPUSH
13013: LD_STRING DH-Weapons-1
13015: PPUSH
13016: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
13020: LD_EXP 30
13024: PPUSH
13025: LD_STRING DH-Weapons-2
13027: PPUSH
13028: CALL_OW 88
// if hasRevolver and Kaia in tmp then
13032: LD_EXP 8
13036: PUSH
13037: LD_EXP 35
13041: PUSH
13042: LD_VAR 0 3
13046: IN
13047: AND
13048: IFFALSE 13137
// begin SetSide ( Kaia , 5 ) ;
13050: LD_EXP 35
13054: PPUSH
13055: LD_INT 5
13057: PPUSH
13058: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
13062: LD_EXP 35
13066: PPUSH
13067: LD_INT 137
13069: PPUSH
13070: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13074: LD_INT 35
13076: PPUSH
13077: CALL_OW 67
// until IsInUnit ( Kaia ) ;
13081: LD_EXP 35
13085: PPUSH
13086: CALL_OW 310
13090: IFFALSE 13074
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
13092: LD_EXP 30
13096: PPUSH
13097: LD_STRING DH-Kaia-Revolver-2
13099: PPUSH
13100: CALL_OW 88
// SetClassKaiaRevolver ;
13104: CALL 1372 0 0
// hasRevolver := false ;
13108: LD_ADDR_EXP 8
13112: PUSH
13113: LD_INT 0
13115: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
13116: LD_EXP 35
13120: PPUSH
13121: LD_INT 2
13123: PPUSH
13124: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
13128: LD_EXP 35
13132: PPUSH
13133: CALL_OW 122
// end ; if Givi in tmp then
13137: LD_EXP 31
13141: PUSH
13142: LD_VAR 0 3
13146: IN
13147: IFFALSE 13288
// begin SetSide ( Givi , 5 ) ;
13149: LD_EXP 31
13153: PPUSH
13154: LD_INT 5
13156: PPUSH
13157: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
13161: LD_EXP 31
13165: PPUSH
13166: LD_INT 137
13168: PPUSH
13169: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13173: LD_INT 35
13175: PPUSH
13176: CALL_OW 67
// until IsInUnit ( Givi ) ;
13180: LD_EXP 31
13184: PPUSH
13185: CALL_OW 310
13189: IFFALSE 13173
// Say ( Givi , DG-Weapons-3 ) ;
13191: LD_EXP 31
13195: PPUSH
13196: LD_STRING DG-Weapons-3
13198: PPUSH
13199: CALL_OW 88
// Say ( Givi , DH-Weapons-4 ) ;
13203: LD_EXP 31
13207: PPUSH
13208: LD_STRING DH-Weapons-4
13210: PPUSH
13211: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
13215: LD_EXP 31
13219: PPUSH
13220: LD_STRING DG-Weapons-5
13222: PPUSH
13223: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
13227: LD_EXP 31
13231: PPUSH
13232: LD_INT 11
13234: PPUSH
13235: CALL_OW 336
// ComExitBuilding ( Givi ) ;
13239: LD_EXP 31
13243: PPUSH
13244: CALL_OW 122
// SetSide ( Givi , 2 ) ;
13248: LD_EXP 31
13252: PPUSH
13253: LD_INT 2
13255: PPUSH
13256: CALL_OW 235
// if hasRevolver then
13260: LD_EXP 8
13264: IFFALSE 13286
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
13266: LD_EXP 30
13270: PPUSH
13271: LD_STRING DH-Kaia-Revolver-1
13273: PPUSH
13274: CALL_OW 88
// heikeHasRevolver := true ;
13278: LD_ADDR_EXP 20
13282: PUSH
13283: LD_INT 1
13285: ST_TO_ADDR
// end ; end else
13286: GO 13465
// if Kamil in tmp then
13288: LD_EXP 34
13292: PUSH
13293: LD_VAR 0 3
13297: IN
13298: IFFALSE 13427
// begin SetSide ( Kamil , 5 ) ;
13300: LD_EXP 34
13304: PPUSH
13305: LD_INT 5
13307: PPUSH
13308: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
13312: LD_EXP 34
13316: PPUSH
13317: LD_INT 137
13319: PPUSH
13320: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13324: LD_INT 35
13326: PPUSH
13327: CALL_OW 67
// until IsInUnit ( Kamil ) ;
13331: LD_EXP 34
13335: PPUSH
13336: CALL_OW 310
13340: IFFALSE 13324
// Say ( Kamil , DKam-Weapons-a-3 ) ;
13342: LD_EXP 34
13346: PPUSH
13347: LD_STRING DKam-Weapons-a-3
13349: PPUSH
13350: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
13354: LD_EXP 30
13358: PPUSH
13359: LD_STRING DH-Weapons-a-4
13361: PPUSH
13362: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
13366: LD_EXP 34
13370: PPUSH
13371: LD_INT 11
13373: PPUSH
13374: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
13378: LD_EXP 34
13382: PPUSH
13383: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
13387: LD_EXP 34
13391: PPUSH
13392: LD_INT 2
13394: PPUSH
13395: CALL_OW 235
// if hasRevolver then
13399: LD_EXP 8
13403: IFFALSE 13425
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
13405: LD_EXP 30
13409: PPUSH
13410: LD_STRING DH-Kaia-Revolver-1
13412: PPUSH
13413: CALL_OW 88
// heikeHasRevolver := true ;
13417: LD_ADDR_EXP 20
13421: PUSH
13422: LD_INT 1
13424: ST_TO_ADDR
// end ; end else
13425: GO 13465
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
13427: LD_EXP 30
13431: PPUSH
13432: LD_STRING DH-Weapons-Alone-2
13434: PPUSH
13435: CALL_OW 88
// if hasRevolver then
13439: LD_EXP 8
13443: IFFALSE 13465
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
13445: LD_EXP 30
13449: PPUSH
13450: LD_STRING DH-Kaia-Revolver-1a
13452: PPUSH
13453: CALL_OW 88
// heikeHasRevolver := true ;
13457: LD_ADDR_EXP 20
13461: PUSH
13462: LD_INT 1
13464: ST_TO_ADDR
// end ; end ; end ; end else
13465: GO 13479
// Say ( Heike , DH-Locked ) ;
13467: LD_EXP 30
13471: PPUSH
13472: LD_STRING DH-Locked
13474: PPUSH
13475: CALL_OW 88
// end ; end ;
13479: GO 13482
13481: POP
// ComExitBuilding ( Heike ) ;
13482: LD_EXP 30
13486: PPUSH
13487: CALL_OW 122
// SetSide ( Heike , 2 ) ;
13491: LD_EXP 30
13495: PPUSH
13496: LD_INT 2
13498: PPUSH
13499: CALL_OW 235
// SetSide ( building , 3 ) ;
13503: LD_VAR 0 1
13507: PPUSH
13508: LD_INT 3
13510: PPUSH
13511: CALL_OW 235
// InGameOff ;
13515: CALL_OW 9
// end ; end_of_file
13519: LD_VAR 0 2
13523: RET
// on SailEvent ( event ) do begin case event of centerCamEvent :
13524: LD_VAR 0 1
13528: PUSH
13529: LD_INT 3
13531: DOUBLE
13532: EQUAL
13533: IFTRUE 13537
13535: GO 13567
13537: POP
// begin repeat wait ( 0 0$1 ) ;
13538: LD_INT 35
13540: PPUSH
13541: CALL_OW 67
// CenterOnUnits ( Heike ) ;
13545: LD_EXP 30
13549: PPUSH
13550: CALL_OW 85
// until IsDying ( Heike ) ;
13554: LD_EXP 30
13558: PPUSH
13559: CALL_OW 303
13563: IFFALSE 13538
// end ; end ;
13565: GO 13568
13567: POP
// end ;
13568: PPOPN 1
13570: END
// on SaiLEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
13571: LD_OWVAR 59
13575: IFFALSE 13579
// exit ;
13577: GO 13653
// if showPlaceEvent then
13579: LD_INT 4
13581: IFFALSE 13653
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
13583: LD_VAR 0 2
13587: PPUSH
13588: LD_VAR 0 3
13592: PPUSH
13593: LD_INT 2
13595: PPUSH
13596: LD_INT 6
13598: NEG
13599: PPUSH
13600: CALL_OW 330
// CenterOnXY ( x , y ) ;
13604: LD_VAR 0 2
13608: PPUSH
13609: LD_VAR 0 3
13613: PPUSH
13614: CALL_OW 84
// wait ( time ) ;
13618: LD_VAR 0 4
13622: PPUSH
13623: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
13627: LD_EXP 30
13631: PPUSH
13632: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
13636: LD_VAR 0 2
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: LD_INT 2
13648: PPUSH
13649: CALL_OW 331
// end ; end ;
13653: PPOPN 7
13655: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
13656: LD_VAR 0 1
13660: PUSH
13661: LD_EXP 30
13665: EQUAL
13666: PUSH
13667: LD_EXP 5
13671: AND
13672: IFFALSE 13681
// YouLost ( Heike ) ;
13674: LD_STRING Heike
13676: PPUSH
13677: CALL_OW 104
// end ; end_of_file
13681: PPOPN 1
13683: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
13684: LD_INT 0
13686: PPUSH
13687: PPUSH
13688: PPUSH
// u1 := IsInUnit ( unit1 ) ;
13689: LD_ADDR_VAR 0 4
13693: PUSH
13694: LD_VAR 0 1
13698: PPUSH
13699: CALL_OW 310
13703: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
13704: LD_ADDR_VAR 0 5
13708: PUSH
13709: LD_VAR 0 2
13713: PPUSH
13714: CALL_OW 310
13718: ST_TO_ADDR
// result := u1 and u1 = u2 ;
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: LD_VAR 0 4
13728: PUSH
13729: LD_VAR 0 4
13733: PUSH
13734: LD_VAR 0 5
13738: EQUAL
13739: AND
13740: ST_TO_ADDR
// end ;
13741: LD_VAR 0 3
13745: RET
// export function ShowPlace ( x , y , time ) ; begin
13746: LD_INT 0
13748: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
13749: LD_INT 4
13751: PPUSH
13752: LD_VAR 0 1
13756: PPUSH
13757: LD_VAR 0 2
13761: PPUSH
13762: LD_VAR 0 3
13766: PPUSH
13767: LD_INT 0
13769: PPUSH
13770: LD_INT 0
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 595
// end ;
13780: LD_VAR 0 4
13784: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
13785: LD_INT 0
13787: PPUSH
13788: PPUSH
13789: PPUSH
13790: PPUSH
13791: PPUSH
13792: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
13793: LD_VAR 0 1
13797: PPUSH
13798: CALL_OW 302
13802: NOT
13803: PUSH
13804: LD_VAR 0 2
13808: PPUSH
13809: CALL_OW 302
13813: NOT
13814: OR
13815: PUSH
13816: LD_VAR 0 2
13820: PPUSH
13821: CALL_OW 313
13825: PUSH
13826: LD_INT 6
13828: EQUAL
13829: OR
13830: IFFALSE 13834
// exit ;
13832: GO 14047
// btype := GetBType ( building ) ;
13834: LD_ADDR_VAR 0 8
13838: PUSH
13839: LD_VAR 0 2
13843: PPUSH
13844: CALL_OW 266
13848: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
13849: LD_VAR 0 8
13853: PUSH
13854: LD_INT 0
13856: PUSH
13857: LD_INT 1
13859: PUSH
13860: LD_INT 4
13862: PUSH
13863: LD_INT 5
13865: PUSH
13866: LD_INT 3
13868: PUSH
13869: LD_INT 6
13871: PUSH
13872: LD_INT 7
13874: PUSH
13875: LD_INT 8
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: IN
13888: NOT
13889: IFFALSE 13893
// exit ;
13891: GO 14047
// x := GetX ( building ) ;
13893: LD_ADDR_VAR 0 4
13897: PUSH
13898: LD_VAR 0 2
13902: PPUSH
13903: CALL_OW 250
13907: ST_TO_ADDR
// y := GetY ( building ) ;
13908: LD_ADDR_VAR 0 5
13912: PUSH
13913: LD_VAR 0 2
13917: PPUSH
13918: CALL_OW 251
13922: ST_TO_ADDR
// d := GetDir ( building ) ;
13923: LD_ADDR_VAR 0 6
13927: PUSH
13928: LD_VAR 0 2
13932: PPUSH
13933: CALL_OW 254
13937: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
13938: LD_ADDR_VAR 0 7
13942: PUSH
13943: LD_VAR 0 4
13947: PPUSH
13948: LD_VAR 0 6
13952: PPUSH
13953: LD_INT 3
13955: PPUSH
13956: CALL_OW 272
13960: PUSH
13961: LD_VAR 0 5
13965: PPUSH
13966: LD_VAR 0 6
13970: PPUSH
13971: LD_INT 3
13973: PPUSH
13974: CALL_OW 273
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
13983: LD_VAR 0 7
13987: PUSH
13988: LD_INT 1
13990: ARRAY
13991: PPUSH
13992: LD_VAR 0 7
13996: PUSH
13997: LD_INT 2
13999: ARRAY
14000: PPUSH
14001: CALL_OW 488
14005: NOT
14006: IFFALSE 14010
// exit ;
14008: GO 14047
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 5 ;
14010: LD_ADDR_VAR 0 3
14014: PUSH
14015: LD_VAR 0 1
14019: PPUSH
14020: LD_VAR 0 7
14024: PUSH
14025: LD_INT 1
14027: ARRAY
14028: PPUSH
14029: LD_VAR 0 7
14033: PUSH
14034: LD_INT 2
14036: ARRAY
14037: PPUSH
14038: CALL_OW 297
14042: PUSH
14043: LD_INT 5
14045: LESS
14046: ST_TO_ADDR
// end ;
14047: LD_VAR 0 3
14051: RET
// export function PlaceExplosives ( building ) ; begin
14052: LD_INT 0
14054: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , drugsLab ) ;
14055: LD_ADDR_EXP 29
14059: PUSH
14060: LD_EXP 29
14064: PPUSH
14065: LD_INT 162
14067: PPUSH
14068: CALL 51866 0 2
14072: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
14073: LD_VAR 0 1
14077: PPUSH
14078: CALL_OW 250
14082: PPUSH
14083: LD_VAR 0 1
14087: PPUSH
14088: CALL_OW 251
14092: PPUSH
14093: LD_STRING PlantBomb
14095: PPUSH
14096: CALL_OW 366
// end ;
14100: LD_VAR 0 2
14104: RET
// export function CreateNature ; var i ; begin
14105: LD_INT 0
14107: PPUSH
14108: PPUSH
// PrepareFrog ;
14109: CALL 48348 0 0
// for i := 1 to 3 do
14113: LD_ADDR_VAR 0 2
14117: PUSH
14118: DOUBLE
14119: LD_INT 1
14121: DEC
14122: ST_TO_ADDR
14123: LD_INT 3
14125: PUSH
14126: FOR_TO
14127: IFFALSE 14146
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
14129: CALL_OW 44
14133: PPUSH
14134: LD_INT 24
14136: PPUSH
14137: LD_INT 0
14139: PPUSH
14140: CALL_OW 49
14144: GO 14126
14146: POP
14147: POP
// end ; end_of_file
14148: LD_VAR 0 1
14152: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
14153: LD_INT 0
14155: PPUSH
// if not step then
14156: LD_LOC 1
14160: NOT
14161: IFFALSE 14171
// step := 1 ;
14163: LD_ADDR_LOC 1
14167: PUSH
14168: LD_INT 1
14170: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
14171: LD_STRING HEscape
14173: PUSH
14174: LD_LOC 1
14178: STR
14179: PPUSH
14180: CALL_OW 97
14184: PUSH
14185: LD_INT 1
14187: DOUBLE
14188: EQUAL
14189: IFTRUE 14193
14191: GO 14200
14193: POP
// LockerMinigameSearch ; 2 :
14194: CALL 14233 0 0
14198: GO 14216
14200: LD_INT 2
14202: DOUBLE
14203: EQUAL
14204: IFTRUE 14208
14206: GO 14215
14208: POP
// LockerMinigameSetCode ; end ;
14209: CALL 14307 0 0
14213: GO 14216
14215: POP
// if lockerCodeValid then
14216: LD_EXP 49
14220: IFFALSE 14224
// exit ;
14222: GO 14228
// StartLockerMinigame ;
14224: CALL 14153 0 0
// end ;
14228: LD_VAR 0 1
14232: RET
// function LockerMinigameSearch ; begin
14233: LD_INT 0
14235: PPUSH
// if code then
14236: LD_LOC 2
14240: IFFALSE 14256
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
14242: LD_EXP 30
14246: PPUSH
14247: LD_STRING DH-Escape-3-Hint-0
14249: PPUSH
14250: CALL_OW 88
// exit ;
14254: GO 14302
// end ; Randomize ;
14256: CALL_OW 10
// code := rand ( 1 , 5 ) ;
14260: LD_ADDR_LOC 2
14264: PUSH
14265: LD_INT 1
14267: PPUSH
14268: LD_INT 5
14270: PPUSH
14271: CALL_OW 12
14275: ST_TO_ADDR
// step := 2 ;
14276: LD_ADDR_LOC 1
14280: PUSH
14281: LD_INT 2
14283: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
14284: LD_EXP 30
14288: PPUSH
14289: LD_STRING DH-Escape-3-Hint-
14291: PUSH
14292: LD_LOC 2
14296: STR
14297: PPUSH
14298: CALL_OW 88
// end ;
14302: LD_VAR 0 1
14306: RET
// function LockerMinigameSetCode ; begin
14307: LD_INT 0
14309: PPUSH
// if not code then
14310: LD_LOC 2
14314: NOT
14315: IFFALSE 14325
// code := 0 ;
14317: LD_ADDR_LOC 2
14321: PUSH
14322: LD_INT 0
14324: ST_TO_ADDR
// lockerBusy := true ;
14325: LD_ADDR_EXP 50
14329: PUSH
14330: LD_INT 1
14332: ST_TO_ADDR
// InGameOff ;
14333: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
14337: LD_STRING initLockerMinigame("
14339: PUSH
14340: LD_LOC 2
14344: STR
14345: PUSH
14346: LD_STRING ")
14348: STR
14349: PPUSH
14350: CALL_OW 559
// step := 3 ;
14354: LD_ADDR_LOC 1
14358: PUSH
14359: LD_INT 3
14361: ST_TO_ADDR
// repeat wait ( 1 ) ;
14362: LD_INT 1
14364: PPUSH
14365: CALL_OW 67
// until not lockerBusy ;
14369: LD_EXP 50
14373: NOT
14374: IFFALSE 14362
// InGameOn ;
14376: CALL_OW 8
// if not lockerCodeValid then
14380: LD_EXP 49
14384: NOT
14385: IFFALSE 14411
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
14387: LD_EXP 30
14391: PPUSH
14392: LD_STRING DH-Escape-3-Fail-
14394: PUSH
14395: LD_INT 1
14397: PPUSH
14398: LD_INT 2
14400: PPUSH
14401: CALL_OW 12
14405: STR
14406: PPUSH
14407: CALL_OW 88
// end ; end_of_file
14411: LD_VAR 0 1
14415: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
14416: LD_VAR 0 2
14420: PUSH
14421: LD_INT 102
14423: EQUAL
14424: IFFALSE 14446
// begin lockerBusy := false ;
14426: LD_ADDR_EXP 50
14430: PUSH
14431: LD_INT 0
14433: ST_TO_ADDR
// lockerCodeValid := p3 ;
14434: LD_ADDR_EXP 49
14438: PUSH
14439: LD_VAR 0 3
14443: ST_TO_ADDR
// end else
14444: GO 14480
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
14446: LD_VAR 0 1
14450: PPUSH
14451: LD_VAR 0 2
14455: PPUSH
14456: LD_VAR 0 3
14460: PPUSH
14461: LD_VAR 0 4
14465: PPUSH
14466: LD_VAR 0 5
14470: PPUSH
14471: LD_VAR 0 6
14475: PPUSH
14476: CALL 55726 0 6
// end ;
14480: PPOPN 6
14482: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
14483: CALL 55697 0 0
// end ; end_of_file
14487: PPOPN 1
14489: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
14490: LD_INT 0
14492: PPUSH
14493: PPUSH
// if exist_mode then
14494: LD_VAR 0 2
14498: IFFALSE 14523
// unit := CreateCharacter ( prefix & ident ) else
14500: LD_ADDR_VAR 0 5
14504: PUSH
14505: LD_VAR 0 3
14509: PUSH
14510: LD_VAR 0 1
14514: STR
14515: PPUSH
14516: CALL_OW 34
14520: ST_TO_ADDR
14521: GO 14538
// unit := NewCharacter ( ident ) ;
14523: LD_ADDR_VAR 0 5
14527: PUSH
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 25
14537: ST_TO_ADDR
// result := unit ;
14538: LD_ADDR_VAR 0 4
14542: PUSH
14543: LD_VAR 0 5
14547: ST_TO_ADDR
// end ;
14548: LD_VAR 0 4
14552: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
14553: LD_INT 0
14555: PPUSH
14556: PPUSH
// if not side or not nation then
14557: LD_VAR 0 1
14561: NOT
14562: PUSH
14563: LD_VAR 0 2
14567: NOT
14568: OR
14569: IFFALSE 14573
// exit ;
14571: GO 15341
// case nation of nation_american :
14573: LD_VAR 0 2
14577: PUSH
14578: LD_INT 1
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14586
14584: GO 14800
14586: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
14587: LD_ADDR_VAR 0 4
14591: PUSH
14592: LD_INT 35
14594: PUSH
14595: LD_INT 45
14597: PUSH
14598: LD_INT 46
14600: PUSH
14601: LD_INT 47
14603: PUSH
14604: LD_INT 82
14606: PUSH
14607: LD_INT 83
14609: PUSH
14610: LD_INT 84
14612: PUSH
14613: LD_INT 85
14615: PUSH
14616: LD_INT 86
14618: PUSH
14619: LD_INT 1
14621: PUSH
14622: LD_INT 2
14624: PUSH
14625: LD_INT 6
14627: PUSH
14628: LD_INT 15
14630: PUSH
14631: LD_INT 16
14633: PUSH
14634: LD_INT 7
14636: PUSH
14637: LD_INT 12
14639: PUSH
14640: LD_INT 13
14642: PUSH
14643: LD_INT 10
14645: PUSH
14646: LD_INT 14
14648: PUSH
14649: LD_INT 20
14651: PUSH
14652: LD_INT 21
14654: PUSH
14655: LD_INT 22
14657: PUSH
14658: LD_INT 25
14660: PUSH
14661: LD_INT 32
14663: PUSH
14664: LD_INT 27
14666: PUSH
14667: LD_INT 36
14669: PUSH
14670: LD_INT 69
14672: PUSH
14673: LD_INT 39
14675: PUSH
14676: LD_INT 34
14678: PUSH
14679: LD_INT 40
14681: PUSH
14682: LD_INT 48
14684: PUSH
14685: LD_INT 49
14687: PUSH
14688: LD_INT 50
14690: PUSH
14691: LD_INT 51
14693: PUSH
14694: LD_INT 52
14696: PUSH
14697: LD_INT 53
14699: PUSH
14700: LD_INT 54
14702: PUSH
14703: LD_INT 55
14705: PUSH
14706: LD_INT 56
14708: PUSH
14709: LD_INT 57
14711: PUSH
14712: LD_INT 58
14714: PUSH
14715: LD_INT 59
14717: PUSH
14718: LD_INT 60
14720: PUSH
14721: LD_INT 61
14723: PUSH
14724: LD_INT 62
14726: PUSH
14727: LD_INT 80
14729: PUSH
14730: LD_INT 82
14732: PUSH
14733: LD_INT 83
14735: PUSH
14736: LD_INT 84
14738: PUSH
14739: LD_INT 85
14741: PUSH
14742: LD_INT 86
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: ST_TO_ADDR
14798: GO 15265
14800: LD_INT 2
14802: DOUBLE
14803: EQUAL
14804: IFTRUE 14808
14806: GO 15034
14808: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
14809: LD_ADDR_VAR 0 4
14813: PUSH
14814: LD_INT 35
14816: PUSH
14817: LD_INT 45
14819: PUSH
14820: LD_INT 46
14822: PUSH
14823: LD_INT 47
14825: PUSH
14826: LD_INT 82
14828: PUSH
14829: LD_INT 83
14831: PUSH
14832: LD_INT 84
14834: PUSH
14835: LD_INT 85
14837: PUSH
14838: LD_INT 87
14840: PUSH
14841: LD_INT 70
14843: PUSH
14844: LD_INT 1
14846: PUSH
14847: LD_INT 11
14849: PUSH
14850: LD_INT 3
14852: PUSH
14853: LD_INT 4
14855: PUSH
14856: LD_INT 5
14858: PUSH
14859: LD_INT 6
14861: PUSH
14862: LD_INT 15
14864: PUSH
14865: LD_INT 18
14867: PUSH
14868: LD_INT 7
14870: PUSH
14871: LD_INT 17
14873: PUSH
14874: LD_INT 8
14876: PUSH
14877: LD_INT 20
14879: PUSH
14880: LD_INT 21
14882: PUSH
14883: LD_INT 22
14885: PUSH
14886: LD_INT 72
14888: PUSH
14889: LD_INT 26
14891: PUSH
14892: LD_INT 69
14894: PUSH
14895: LD_INT 39
14897: PUSH
14898: LD_INT 40
14900: PUSH
14901: LD_INT 41
14903: PUSH
14904: LD_INT 42
14906: PUSH
14907: LD_INT 43
14909: PUSH
14910: LD_INT 48
14912: PUSH
14913: LD_INT 49
14915: PUSH
14916: LD_INT 50
14918: PUSH
14919: LD_INT 51
14921: PUSH
14922: LD_INT 52
14924: PUSH
14925: LD_INT 53
14927: PUSH
14928: LD_INT 54
14930: PUSH
14931: LD_INT 55
14933: PUSH
14934: LD_INT 56
14936: PUSH
14937: LD_INT 60
14939: PUSH
14940: LD_INT 61
14942: PUSH
14943: LD_INT 62
14945: PUSH
14946: LD_INT 66
14948: PUSH
14949: LD_INT 67
14951: PUSH
14952: LD_INT 68
14954: PUSH
14955: LD_INT 81
14957: PUSH
14958: LD_INT 82
14960: PUSH
14961: LD_INT 83
14963: PUSH
14964: LD_INT 84
14966: PUSH
14967: LD_INT 85
14969: PUSH
14970: LD_INT 87
14972: PUSH
14973: LD_INT 88
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: ST_TO_ADDR
15032: GO 15265
15034: LD_INT 3
15036: DOUBLE
15037: EQUAL
15038: IFTRUE 15042
15040: GO 15264
15042: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15043: LD_ADDR_VAR 0 4
15047: PUSH
15048: LD_INT 46
15050: PUSH
15051: LD_INT 47
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: LD_INT 2
15059: PUSH
15060: LD_INT 82
15062: PUSH
15063: LD_INT 83
15065: PUSH
15066: LD_INT 84
15068: PUSH
15069: LD_INT 85
15071: PUSH
15072: LD_INT 86
15074: PUSH
15075: LD_INT 11
15077: PUSH
15078: LD_INT 9
15080: PUSH
15081: LD_INT 20
15083: PUSH
15084: LD_INT 19
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 24
15092: PUSH
15093: LD_INT 22
15095: PUSH
15096: LD_INT 25
15098: PUSH
15099: LD_INT 28
15101: PUSH
15102: LD_INT 29
15104: PUSH
15105: LD_INT 30
15107: PUSH
15108: LD_INT 31
15110: PUSH
15111: LD_INT 37
15113: PUSH
15114: LD_INT 38
15116: PUSH
15117: LD_INT 32
15119: PUSH
15120: LD_INT 27
15122: PUSH
15123: LD_INT 33
15125: PUSH
15126: LD_INT 69
15128: PUSH
15129: LD_INT 39
15131: PUSH
15132: LD_INT 34
15134: PUSH
15135: LD_INT 40
15137: PUSH
15138: LD_INT 71
15140: PUSH
15141: LD_INT 23
15143: PUSH
15144: LD_INT 44
15146: PUSH
15147: LD_INT 48
15149: PUSH
15150: LD_INT 49
15152: PUSH
15153: LD_INT 50
15155: PUSH
15156: LD_INT 51
15158: PUSH
15159: LD_INT 52
15161: PUSH
15162: LD_INT 53
15164: PUSH
15165: LD_INT 54
15167: PUSH
15168: LD_INT 55
15170: PUSH
15171: LD_INT 56
15173: PUSH
15174: LD_INT 57
15176: PUSH
15177: LD_INT 58
15179: PUSH
15180: LD_INT 59
15182: PUSH
15183: LD_INT 63
15185: PUSH
15186: LD_INT 64
15188: PUSH
15189: LD_INT 65
15191: PUSH
15192: LD_INT 82
15194: PUSH
15195: LD_INT 83
15197: PUSH
15198: LD_INT 84
15200: PUSH
15201: LD_INT 85
15203: PUSH
15204: LD_INT 86
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: ST_TO_ADDR
15262: GO 15265
15264: POP
// if state > - 1 and state < 3 then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 1
15272: NEG
15273: GREATER
15274: PUSH
15275: LD_VAR 0 3
15279: PUSH
15280: LD_INT 3
15282: LESS
15283: AND
15284: IFFALSE 15341
// for i in result do
15286: LD_ADDR_VAR 0 5
15290: PUSH
15291: LD_VAR 0 4
15295: PUSH
15296: FOR_IN
15297: IFFALSE 15339
// if GetTech ( i , side ) <> state then
15299: LD_VAR 0 5
15303: PPUSH
15304: LD_VAR 0 1
15308: PPUSH
15309: CALL_OW 321
15313: PUSH
15314: LD_VAR 0 3
15318: NONEQUAL
15319: IFFALSE 15337
// result := result diff i ;
15321: LD_ADDR_VAR 0 4
15325: PUSH
15326: LD_VAR 0 4
15330: PUSH
15331: LD_VAR 0 5
15335: DIFF
15336: ST_TO_ADDR
15337: GO 15296
15339: POP
15340: POP
// end ;
15341: LD_VAR 0 4
15345: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15346: LD_INT 0
15348: PPUSH
15349: PPUSH
15350: PPUSH
// result := true ;
15351: LD_ADDR_VAR 0 3
15355: PUSH
15356: LD_INT 1
15358: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15359: LD_ADDR_VAR 0 5
15363: PUSH
15364: LD_VAR 0 2
15368: PPUSH
15369: CALL_OW 480
15373: ST_TO_ADDR
// if not tmp then
15374: LD_VAR 0 5
15378: NOT
15379: IFFALSE 15383
// exit ;
15381: GO 15432
// for i in tmp do
15383: LD_ADDR_VAR 0 4
15387: PUSH
15388: LD_VAR 0 5
15392: PUSH
15393: FOR_IN
15394: IFFALSE 15430
// if GetTech ( i , side ) <> state_researched then
15396: LD_VAR 0 4
15400: PPUSH
15401: LD_VAR 0 1
15405: PPUSH
15406: CALL_OW 321
15410: PUSH
15411: LD_INT 2
15413: NONEQUAL
15414: IFFALSE 15428
// begin result := false ;
15416: LD_ADDR_VAR 0 3
15420: PUSH
15421: LD_INT 0
15423: ST_TO_ADDR
// exit ;
15424: POP
15425: POP
15426: GO 15432
// end ;
15428: GO 15393
15430: POP
15431: POP
// end ;
15432: LD_VAR 0 3
15436: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
15437: LD_INT 0
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
15452: LD_VAR 0 1
15456: NOT
15457: PUSH
15458: LD_VAR 0 1
15462: PPUSH
15463: CALL_OW 257
15467: PUSH
15468: LD_INT 9
15470: NONEQUAL
15471: OR
15472: IFFALSE 15476
// exit ;
15474: GO 16049
// side := GetSide ( unit ) ;
15476: LD_ADDR_VAR 0 9
15480: PUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 255
15490: ST_TO_ADDR
// tech_space := tech_spacanom ;
15491: LD_ADDR_VAR 0 12
15495: PUSH
15496: LD_INT 29
15498: ST_TO_ADDR
// tech_time := tech_taurad ;
15499: LD_ADDR_VAR 0 13
15503: PUSH
15504: LD_INT 28
15506: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
15507: LD_ADDR_VAR 0 11
15511: PUSH
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 310
15521: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
15522: LD_VAR 0 11
15526: PPUSH
15527: CALL_OW 247
15531: PUSH
15532: LD_INT 2
15534: EQUAL
15535: IFFALSE 15539
// exit ;
15537: GO 16049
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15539: LD_ADDR_VAR 0 8
15543: PUSH
15544: LD_INT 81
15546: PUSH
15547: LD_VAR 0 9
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 3
15558: PUSH
15559: LD_INT 21
15561: PUSH
15562: LD_INT 3
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 69
15581: ST_TO_ADDR
// if not tmp then
15582: LD_VAR 0 8
15586: NOT
15587: IFFALSE 15591
// exit ;
15589: GO 16049
// if in_unit then
15591: LD_VAR 0 11
15595: IFFALSE 15619
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
15597: LD_ADDR_VAR 0 10
15601: PUSH
15602: LD_VAR 0 8
15606: PPUSH
15607: LD_VAR 0 11
15611: PPUSH
15612: CALL_OW 74
15616: ST_TO_ADDR
15617: GO 15639
// enemy := NearestUnitToUnit ( tmp , unit ) ;
15619: LD_ADDR_VAR 0 10
15623: PUSH
15624: LD_VAR 0 8
15628: PPUSH
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 74
15638: ST_TO_ADDR
// if not enemy then
15639: LD_VAR 0 10
15643: NOT
15644: IFFALSE 15648
// exit ;
15646: GO 16049
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
15648: LD_VAR 0 11
15652: PUSH
15653: LD_VAR 0 11
15657: PPUSH
15658: LD_VAR 0 10
15662: PPUSH
15663: CALL_OW 296
15667: PUSH
15668: LD_INT 13
15670: GREATER
15671: AND
15672: PUSH
15673: LD_VAR 0 1
15677: PPUSH
15678: LD_VAR 0 10
15682: PPUSH
15683: CALL_OW 296
15687: PUSH
15688: LD_INT 12
15690: GREATER
15691: OR
15692: IFFALSE 15696
// exit ;
15694: GO 16049
// missile := [ 1 ] ;
15696: LD_ADDR_VAR 0 14
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: ST_TO_ADDR
// if Researched ( side , tech_space ) then
15707: LD_VAR 0 9
15711: PPUSH
15712: LD_VAR 0 12
15716: PPUSH
15717: CALL_OW 325
15721: IFFALSE 15750
// missile := Replace ( missile , missile + 1 , 2 ) ;
15723: LD_ADDR_VAR 0 14
15727: PUSH
15728: LD_VAR 0 14
15732: PPUSH
15733: LD_VAR 0 14
15737: PUSH
15738: LD_INT 1
15740: PLUS
15741: PPUSH
15742: LD_INT 2
15744: PPUSH
15745: CALL_OW 1
15749: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
15750: LD_VAR 0 9
15754: PPUSH
15755: LD_VAR 0 13
15759: PPUSH
15760: CALL_OW 325
15764: PUSH
15765: LD_VAR 0 10
15769: PPUSH
15770: CALL_OW 255
15774: PPUSH
15775: LD_VAR 0 13
15779: PPUSH
15780: CALL_OW 325
15784: NOT
15785: AND
15786: IFFALSE 15815
// missile := Replace ( missile , missile + 1 , 3 ) ;
15788: LD_ADDR_VAR 0 14
15792: PUSH
15793: LD_VAR 0 14
15797: PPUSH
15798: LD_VAR 0 14
15802: PUSH
15803: LD_INT 1
15805: PLUS
15806: PPUSH
15807: LD_INT 3
15809: PPUSH
15810: CALL_OW 1
15814: ST_TO_ADDR
// if missile < 2 then
15815: LD_VAR 0 14
15819: PUSH
15820: LD_INT 2
15822: LESS
15823: IFFALSE 15827
// exit ;
15825: GO 16049
// x := GetX ( enemy ) ;
15827: LD_ADDR_VAR 0 4
15831: PUSH
15832: LD_VAR 0 10
15836: PPUSH
15837: CALL_OW 250
15841: ST_TO_ADDR
// y := GetY ( enemy ) ;
15842: LD_ADDR_VAR 0 5
15846: PUSH
15847: LD_VAR 0 10
15851: PPUSH
15852: CALL_OW 251
15856: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
15857: LD_ADDR_VAR 0 6
15861: PUSH
15862: LD_VAR 0 4
15866: PUSH
15867: LD_INT 1
15869: NEG
15870: PPUSH
15871: LD_INT 1
15873: PPUSH
15874: CALL_OW 12
15878: PLUS
15879: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
15880: LD_ADDR_VAR 0 7
15884: PUSH
15885: LD_VAR 0 5
15889: PUSH
15890: LD_INT 1
15892: NEG
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 12
15901: PLUS
15902: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15903: LD_VAR 0 6
15907: PPUSH
15908: LD_VAR 0 7
15912: PPUSH
15913: CALL_OW 488
15917: NOT
15918: IFFALSE 15940
// begin _x := x ;
15920: LD_ADDR_VAR 0 6
15924: PUSH
15925: LD_VAR 0 4
15929: ST_TO_ADDR
// _y := y ;
15930: LD_ADDR_VAR 0 7
15934: PUSH
15935: LD_VAR 0 5
15939: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: LD_INT 1
15947: PPUSH
15948: LD_VAR 0 14
15952: PPUSH
15953: CALL_OW 12
15957: ST_TO_ADDR
// case i of 1 :
15958: LD_VAR 0 3
15962: PUSH
15963: LD_INT 1
15965: DOUBLE
15966: EQUAL
15967: IFTRUE 15971
15969: GO 15988
15971: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15972: LD_VAR 0 1
15976: PPUSH
15977: LD_VAR 0 10
15981: PPUSH
15982: CALL_OW 115
15986: GO 16049
15988: LD_INT 2
15990: DOUBLE
15991: EQUAL
15992: IFTRUE 15996
15994: GO 16018
15996: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15997: LD_VAR 0 1
16001: PPUSH
16002: LD_VAR 0 6
16006: PPUSH
16007: LD_VAR 0 7
16011: PPUSH
16012: CALL_OW 153
16016: GO 16049
16018: LD_INT 3
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16026
16024: GO 16048
16026: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16027: LD_VAR 0 1
16031: PPUSH
16032: LD_VAR 0 6
16036: PPUSH
16037: LD_VAR 0 7
16041: PPUSH
16042: CALL_OW 154
16046: GO 16049
16048: POP
// end ;
16049: LD_VAR 0 2
16053: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16054: LD_INT 0
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
// if not unit or not building then
16062: LD_VAR 0 1
16066: NOT
16067: PUSH
16068: LD_VAR 0 2
16072: NOT
16073: OR
16074: IFFALSE 16078
// exit ;
16076: GO 16236
// x := GetX ( building ) ;
16078: LD_ADDR_VAR 0 5
16082: PUSH
16083: LD_VAR 0 2
16087: PPUSH
16088: CALL_OW 250
16092: ST_TO_ADDR
// y := GetY ( building ) ;
16093: LD_ADDR_VAR 0 6
16097: PUSH
16098: LD_VAR 0 2
16102: PPUSH
16103: CALL_OW 251
16107: ST_TO_ADDR
// for i = 0 to 5 do
16108: LD_ADDR_VAR 0 4
16112: PUSH
16113: DOUBLE
16114: LD_INT 0
16116: DEC
16117: ST_TO_ADDR
16118: LD_INT 5
16120: PUSH
16121: FOR_TO
16122: IFFALSE 16234
// begin _x := ShiftX ( x , i , 3 ) ;
16124: LD_ADDR_VAR 0 7
16128: PUSH
16129: LD_VAR 0 5
16133: PPUSH
16134: LD_VAR 0 4
16138: PPUSH
16139: LD_INT 3
16141: PPUSH
16142: CALL_OW 272
16146: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16147: LD_ADDR_VAR 0 8
16151: PUSH
16152: LD_VAR 0 6
16156: PPUSH
16157: LD_VAR 0 4
16161: PPUSH
16162: LD_INT 3
16164: PPUSH
16165: CALL_OW 273
16169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16170: LD_VAR 0 7
16174: PPUSH
16175: LD_VAR 0 8
16179: PPUSH
16180: CALL_OW 488
16184: NOT
16185: IFFALSE 16189
// continue ;
16187: GO 16121
// if HexInfo ( _x , _y ) = 0 then
16189: LD_VAR 0 7
16193: PPUSH
16194: LD_VAR 0 8
16198: PPUSH
16199: CALL_OW 428
16203: PUSH
16204: LD_INT 0
16206: EQUAL
16207: IFFALSE 16232
// begin ComMoveXY ( unit , _x , _y ) ;
16209: LD_VAR 0 1
16213: PPUSH
16214: LD_VAR 0 7
16218: PPUSH
16219: LD_VAR 0 8
16223: PPUSH
16224: CALL_OW 111
// exit ;
16228: POP
16229: POP
16230: GO 16236
// end ; end ;
16232: GO 16121
16234: POP
16235: POP
// end ;
16236: LD_VAR 0 3
16240: RET
// export function ScanBase ( side , base_area ) ; begin
16241: LD_INT 0
16243: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16244: LD_ADDR_VAR 0 3
16248: PUSH
16249: LD_VAR 0 2
16253: PPUSH
16254: LD_INT 81
16256: PUSH
16257: LD_VAR 0 1
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL_OW 70
16270: ST_TO_ADDR
// end ;
16271: LD_VAR 0 3
16275: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16276: LD_INT 0
16278: PPUSH
16279: PPUSH
16280: PPUSH
16281: PPUSH
// result := false ;
16282: LD_ADDR_VAR 0 2
16286: PUSH
16287: LD_INT 0
16289: ST_TO_ADDR
// side := GetSide ( unit ) ;
16290: LD_ADDR_VAR 0 3
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 255
16304: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16305: LD_ADDR_VAR 0 4
16309: PUSH
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 248
16319: ST_TO_ADDR
// case nat of 1 :
16320: LD_VAR 0 4
16324: PUSH
16325: LD_INT 1
16327: DOUBLE
16328: EQUAL
16329: IFTRUE 16333
16331: GO 16344
16333: POP
// tech := tech_lassight ; 2 :
16334: LD_ADDR_VAR 0 5
16338: PUSH
16339: LD_INT 12
16341: ST_TO_ADDR
16342: GO 16383
16344: LD_INT 2
16346: DOUBLE
16347: EQUAL
16348: IFTRUE 16352
16350: GO 16363
16352: POP
// tech := tech_mortar ; 3 :
16353: LD_ADDR_VAR 0 5
16357: PUSH
16358: LD_INT 41
16360: ST_TO_ADDR
16361: GO 16383
16363: LD_INT 3
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16382
16371: POP
// tech := tech_bazooka ; end ;
16372: LD_ADDR_VAR 0 5
16376: PUSH
16377: LD_INT 44
16379: ST_TO_ADDR
16380: GO 16383
16382: POP
// if Researched ( side , tech ) then
16383: LD_VAR 0 3
16387: PPUSH
16388: LD_VAR 0 5
16392: PPUSH
16393: CALL_OW 325
16397: IFFALSE 16424
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16399: LD_ADDR_VAR 0 2
16403: PUSH
16404: LD_INT 5
16406: PUSH
16407: LD_INT 8
16409: PUSH
16410: LD_INT 9
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: LIST
16417: PUSH
16418: LD_VAR 0 4
16422: ARRAY
16423: ST_TO_ADDR
// end ;
16424: LD_VAR 0 2
16428: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16429: LD_INT 0
16431: PPUSH
16432: PPUSH
16433: PPUSH
// if not mines then
16434: LD_VAR 0 2
16438: NOT
16439: IFFALSE 16443
// exit ;
16441: GO 16587
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16443: LD_ADDR_VAR 0 5
16447: PUSH
16448: LD_INT 81
16450: PUSH
16451: LD_VAR 0 1
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 3
16462: PUSH
16463: LD_INT 21
16465: PUSH
16466: LD_INT 3
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PPUSH
16481: CALL_OW 69
16485: ST_TO_ADDR
// for i in mines do
16486: LD_ADDR_VAR 0 4
16490: PUSH
16491: LD_VAR 0 2
16495: PUSH
16496: FOR_IN
16497: IFFALSE 16585
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16499: LD_VAR 0 4
16503: PUSH
16504: LD_INT 1
16506: ARRAY
16507: PPUSH
16508: LD_VAR 0 4
16512: PUSH
16513: LD_INT 2
16515: ARRAY
16516: PPUSH
16517: CALL_OW 458
16521: NOT
16522: IFFALSE 16526
// continue ;
16524: GO 16496
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16526: LD_VAR 0 4
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PPUSH
16535: LD_VAR 0 4
16539: PUSH
16540: LD_INT 2
16542: ARRAY
16543: PPUSH
16544: CALL_OW 428
16548: PUSH
16549: LD_VAR 0 5
16553: IN
16554: IFFALSE 16583
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16556: LD_VAR 0 4
16560: PUSH
16561: LD_INT 1
16563: ARRAY
16564: PPUSH
16565: LD_VAR 0 4
16569: PUSH
16570: LD_INT 2
16572: ARRAY
16573: PPUSH
16574: LD_VAR 0 1
16578: PPUSH
16579: CALL_OW 456
// end ;
16583: GO 16496
16585: POP
16586: POP
// end ;
16587: LD_VAR 0 3
16591: RET
// export function Count ( array ) ; var i ; begin
16592: LD_INT 0
16594: PPUSH
16595: PPUSH
// result := 0 ;
16596: LD_ADDR_VAR 0 2
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// for i in array do
16604: LD_ADDR_VAR 0 3
16608: PUSH
16609: LD_VAR 0 1
16613: PUSH
16614: FOR_IN
16615: IFFALSE 16639
// if i then
16617: LD_VAR 0 3
16621: IFFALSE 16637
// result := result + 1 ;
16623: LD_ADDR_VAR 0 2
16627: PUSH
16628: LD_VAR 0 2
16632: PUSH
16633: LD_INT 1
16635: PLUS
16636: ST_TO_ADDR
16637: GO 16614
16639: POP
16640: POP
// end ;
16641: LD_VAR 0 2
16645: RET
// export function IsEmpty ( building ) ; begin
16646: LD_INT 0
16648: PPUSH
// if not building then
16649: LD_VAR 0 1
16653: NOT
16654: IFFALSE 16658
// exit ;
16656: GO 16701
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
16658: LD_ADDR_VAR 0 2
16662: PUSH
16663: LD_VAR 0 1
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 255
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 58
16687: PUSH
16688: EMPTY
16689: LIST
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PPUSH
16695: CALL_OW 69
16699: IN
16700: ST_TO_ADDR
// end ;
16701: LD_VAR 0 2
16705: RET
// export function IsNotFull ( building ) ; var places ; begin
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
// if not building then
16710: LD_VAR 0 1
16714: NOT
16715: IFFALSE 16719
// exit ;
16717: GO 16890
// result := false ;
16719: LD_ADDR_VAR 0 2
16723: PUSH
16724: LD_INT 0
16726: ST_TO_ADDR
// places := 0 ;
16727: LD_ADDR_VAR 0 3
16731: PUSH
16732: LD_INT 0
16734: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
16735: LD_VAR 0 1
16739: PPUSH
16740: CALL_OW 266
16744: PUSH
16745: LD_INT 0
16747: DOUBLE
16748: EQUAL
16749: IFTRUE 16807
16751: LD_INT 1
16753: DOUBLE
16754: EQUAL
16755: IFTRUE 16807
16757: LD_INT 6
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16807
16763: LD_INT 7
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16807
16769: LD_INT 8
16771: DOUBLE
16772: EQUAL
16773: IFTRUE 16807
16775: LD_INT 4
16777: DOUBLE
16778: EQUAL
16779: IFTRUE 16807
16781: LD_INT 5
16783: DOUBLE
16784: EQUAL
16785: IFTRUE 16807
16787: LD_INT 2
16789: DOUBLE
16790: EQUAL
16791: IFTRUE 16807
16793: LD_INT 3
16795: DOUBLE
16796: EQUAL
16797: IFTRUE 16807
16799: LD_INT 35
16801: DOUBLE
16802: EQUAL
16803: IFTRUE 16807
16805: GO 16818
16807: POP
// places := 6 ; b_bunker , b_breastwork :
16808: LD_ADDR_VAR 0 3
16812: PUSH
16813: LD_INT 6
16815: ST_TO_ADDR
16816: GO 16863
16818: LD_INT 32
16820: DOUBLE
16821: EQUAL
16822: IFTRUE 16832
16824: LD_INT 31
16826: DOUBLE
16827: EQUAL
16828: IFTRUE 16832
16830: GO 16843
16832: POP
// places := 1 ; b_control_tower :
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: LD_INT 1
16840: ST_TO_ADDR
16841: GO 16863
16843: LD_INT 36
16845: DOUBLE
16846: EQUAL
16847: IFTRUE 16851
16849: GO 16862
16851: POP
// places := 3 ; end ;
16852: LD_ADDR_VAR 0 3
16856: PUSH
16857: LD_INT 3
16859: ST_TO_ADDR
16860: GO 16863
16862: POP
// if places then
16863: LD_VAR 0 3
16867: IFFALSE 16890
// result := UnitsInside ( building ) < places ;
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 313
16883: PUSH
16884: LD_VAR 0 3
16888: LESS
16889: ST_TO_ADDR
// end ;
16890: LD_VAR 0 2
16894: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
16895: LD_INT 0
16897: PPUSH
16898: PPUSH
16899: PPUSH
16900: PPUSH
// tmp := [ ] ;
16901: LD_ADDR_VAR 0 3
16905: PUSH
16906: EMPTY
16907: ST_TO_ADDR
// list := [ ] ;
16908: LD_ADDR_VAR 0 5
16912: PUSH
16913: EMPTY
16914: ST_TO_ADDR
// for i = 16 to 25 do
16915: LD_ADDR_VAR 0 4
16919: PUSH
16920: DOUBLE
16921: LD_INT 16
16923: DEC
16924: ST_TO_ADDR
16925: LD_INT 25
16927: PUSH
16928: FOR_TO
16929: IFFALSE 17002
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
16931: LD_ADDR_VAR 0 3
16935: PUSH
16936: LD_VAR 0 3
16940: PUSH
16941: LD_INT 22
16943: PUSH
16944: LD_VAR 0 1
16948: PPUSH
16949: CALL_OW 255
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 91
16960: PUSH
16961: LD_VAR 0 1
16965: PUSH
16966: LD_INT 6
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 30
16976: PUSH
16977: LD_VAR 0 4
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: PUSH
16991: EMPTY
16992: LIST
16993: PPUSH
16994: CALL_OW 69
16998: ADD
16999: ST_TO_ADDR
17000: GO 16928
17002: POP
17003: POP
// for i = 1 to tmp do
17004: LD_ADDR_VAR 0 4
17008: PUSH
17009: DOUBLE
17010: LD_INT 1
17012: DEC
17013: ST_TO_ADDR
17014: LD_VAR 0 3
17018: PUSH
17019: FOR_TO
17020: IFFALSE 17108
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17022: LD_ADDR_VAR 0 5
17026: PUSH
17027: LD_VAR 0 5
17031: PUSH
17032: LD_VAR 0 3
17036: PUSH
17037: LD_VAR 0 4
17041: ARRAY
17042: PPUSH
17043: CALL_OW 266
17047: PUSH
17048: LD_VAR 0 3
17052: PUSH
17053: LD_VAR 0 4
17057: ARRAY
17058: PPUSH
17059: CALL_OW 250
17063: PUSH
17064: LD_VAR 0 3
17068: PUSH
17069: LD_VAR 0 4
17073: ARRAY
17074: PPUSH
17075: CALL_OW 251
17079: PUSH
17080: LD_VAR 0 3
17084: PUSH
17085: LD_VAR 0 4
17089: ARRAY
17090: PPUSH
17091: CALL_OW 254
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: PUSH
17102: EMPTY
17103: LIST
17104: ADD
17105: ST_TO_ADDR
17106: GO 17019
17108: POP
17109: POP
// result := list ;
17110: LD_ADDR_VAR 0 2
17114: PUSH
17115: LD_VAR 0 5
17119: ST_TO_ADDR
// end ;
17120: LD_VAR 0 2
17124: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17125: LD_INT 0
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
// if not factory then
17134: LD_VAR 0 1
17138: NOT
17139: IFFALSE 17143
// exit ;
17141: GO 17736
// if control = control_apeman then
17143: LD_VAR 0 4
17147: PUSH
17148: LD_INT 5
17150: EQUAL
17151: IFFALSE 17260
// begin tmp := UnitsInside ( factory ) ;
17153: LD_ADDR_VAR 0 8
17157: PUSH
17158: LD_VAR 0 1
17162: PPUSH
17163: CALL_OW 313
17167: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17168: LD_VAR 0 8
17172: PPUSH
17173: LD_INT 25
17175: PUSH
17176: LD_INT 12
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PPUSH
17183: CALL_OW 72
17187: NOT
17188: IFFALSE 17198
// control := control_manual ;
17190: LD_ADDR_VAR 0 4
17194: PUSH
17195: LD_INT 1
17197: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17198: LD_ADDR_VAR 0 8
17202: PUSH
17203: LD_VAR 0 1
17207: PPUSH
17208: CALL 16895 0 1
17212: ST_TO_ADDR
// if tmp then
17213: LD_VAR 0 8
17217: IFFALSE 17260
// begin for i in tmp do
17219: LD_ADDR_VAR 0 7
17223: PUSH
17224: LD_VAR 0 8
17228: PUSH
17229: FOR_IN
17230: IFFALSE 17258
// if i [ 1 ] = b_ext_radio then
17232: LD_VAR 0 7
17236: PUSH
17237: LD_INT 1
17239: ARRAY
17240: PUSH
17241: LD_INT 22
17243: EQUAL
17244: IFFALSE 17256
// begin control := control_remote ;
17246: LD_ADDR_VAR 0 4
17250: PUSH
17251: LD_INT 2
17253: ST_TO_ADDR
// break ;
17254: GO 17258
// end ;
17256: GO 17229
17258: POP
17259: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17260: LD_VAR 0 1
17264: PPUSH
17265: LD_VAR 0 2
17269: PPUSH
17270: LD_VAR 0 3
17274: PPUSH
17275: LD_VAR 0 4
17279: PPUSH
17280: LD_VAR 0 5
17284: PPUSH
17285: CALL_OW 448
17289: IFFALSE 17324
// begin result := [ chassis , engine , control , weapon ] ;
17291: LD_ADDR_VAR 0 6
17295: PUSH
17296: LD_VAR 0 2
17300: PUSH
17301: LD_VAR 0 3
17305: PUSH
17306: LD_VAR 0 4
17310: PUSH
17311: LD_VAR 0 5
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: ST_TO_ADDR
// exit ;
17322: GO 17736
// end ; _chassis := AvailableChassisList ( factory ) ;
17324: LD_ADDR_VAR 0 9
17328: PUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: CALL_OW 475
17338: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17339: LD_ADDR_VAR 0 11
17343: PUSH
17344: LD_VAR 0 1
17348: PPUSH
17349: CALL_OW 476
17353: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17354: LD_ADDR_VAR 0 12
17358: PUSH
17359: LD_VAR 0 1
17363: PPUSH
17364: CALL_OW 477
17368: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17369: LD_ADDR_VAR 0 10
17373: PUSH
17374: LD_VAR 0 1
17378: PPUSH
17379: CALL_OW 478
17383: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17384: LD_VAR 0 9
17388: NOT
17389: PUSH
17390: LD_VAR 0 11
17394: NOT
17395: OR
17396: PUSH
17397: LD_VAR 0 12
17401: NOT
17402: OR
17403: PUSH
17404: LD_VAR 0 10
17408: NOT
17409: OR
17410: IFFALSE 17445
// begin result := [ chassis , engine , control , weapon ] ;
17412: LD_ADDR_VAR 0 6
17416: PUSH
17417: LD_VAR 0 2
17421: PUSH
17422: LD_VAR 0 3
17426: PUSH
17427: LD_VAR 0 4
17431: PUSH
17432: LD_VAR 0 5
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: ST_TO_ADDR
// exit ;
17443: GO 17736
// end ; if not chassis in _chassis then
17445: LD_VAR 0 2
17449: PUSH
17450: LD_VAR 0 9
17454: IN
17455: NOT
17456: IFFALSE 17482
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_VAR 0 9
17467: PUSH
17468: LD_INT 1
17470: PPUSH
17471: LD_VAR 0 9
17475: PPUSH
17476: CALL_OW 12
17480: ARRAY
17481: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17482: LD_VAR 0 2
17486: PPUSH
17487: LD_VAR 0 3
17491: PPUSH
17492: CALL 17741 0 2
17496: NOT
17497: IFFALSE 17556
// repeat engine := _engine [ 1 ] ;
17499: LD_ADDR_VAR 0 3
17503: PUSH
17504: LD_VAR 0 11
17508: PUSH
17509: LD_INT 1
17511: ARRAY
17512: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17513: LD_ADDR_VAR 0 11
17517: PUSH
17518: LD_VAR 0 11
17522: PPUSH
17523: LD_INT 1
17525: PPUSH
17526: CALL_OW 3
17530: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17531: LD_VAR 0 2
17535: PPUSH
17536: LD_VAR 0 3
17540: PPUSH
17541: CALL 17741 0 2
17545: PUSH
17546: LD_VAR 0 11
17550: PUSH
17551: EMPTY
17552: EQUAL
17553: OR
17554: IFFALSE 17499
// if not control in _control then
17556: LD_VAR 0 4
17560: PUSH
17561: LD_VAR 0 12
17565: IN
17566: NOT
17567: IFFALSE 17593
// control := _control [ rand ( 1 , _control ) ] ;
17569: LD_ADDR_VAR 0 4
17573: PUSH
17574: LD_VAR 0 12
17578: PUSH
17579: LD_INT 1
17581: PPUSH
17582: LD_VAR 0 12
17586: PPUSH
17587: CALL_OW 12
17591: ARRAY
17592: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17593: LD_VAR 0 2
17597: PPUSH
17598: LD_VAR 0 5
17602: PPUSH
17603: CALL 17961 0 2
17607: NOT
17608: IFFALSE 17667
// repeat weapon := _weapon [ 1 ] ;
17610: LD_ADDR_VAR 0 5
17614: PUSH
17615: LD_VAR 0 10
17619: PUSH
17620: LD_INT 1
17622: ARRAY
17623: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17624: LD_ADDR_VAR 0 10
17628: PUSH
17629: LD_VAR 0 10
17633: PPUSH
17634: LD_INT 1
17636: PPUSH
17637: CALL_OW 3
17641: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17642: LD_VAR 0 2
17646: PPUSH
17647: LD_VAR 0 5
17651: PPUSH
17652: CALL 17961 0 2
17656: PUSH
17657: LD_VAR 0 10
17661: PUSH
17662: EMPTY
17663: EQUAL
17664: OR
17665: IFFALSE 17610
// result := [ ] ;
17667: LD_ADDR_VAR 0 6
17671: PUSH
17672: EMPTY
17673: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17674: LD_VAR 0 1
17678: PPUSH
17679: LD_VAR 0 2
17683: PPUSH
17684: LD_VAR 0 3
17688: PPUSH
17689: LD_VAR 0 4
17693: PPUSH
17694: LD_VAR 0 5
17698: PPUSH
17699: CALL_OW 448
17703: IFFALSE 17736
// result := [ chassis , engine , control , weapon ] ;
17705: LD_ADDR_VAR 0 6
17709: PUSH
17710: LD_VAR 0 2
17714: PUSH
17715: LD_VAR 0 3
17719: PUSH
17720: LD_VAR 0 4
17724: PUSH
17725: LD_VAR 0 5
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: ST_TO_ADDR
// end ;
17736: LD_VAR 0 6
17740: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17741: LD_INT 0
17743: PPUSH
// if not chassis or not engine then
17744: LD_VAR 0 1
17748: NOT
17749: PUSH
17750: LD_VAR 0 2
17754: NOT
17755: OR
17756: IFFALSE 17760
// exit ;
17758: GO 17956
// case engine of engine_solar :
17760: LD_VAR 0 2
17764: PUSH
17765: LD_INT 2
17767: DOUBLE
17768: EQUAL
17769: IFTRUE 17773
17771: GO 17811
17773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17774: LD_ADDR_VAR 0 3
17778: PUSH
17779: LD_INT 11
17781: PUSH
17782: LD_INT 12
17784: PUSH
17785: LD_INT 13
17787: PUSH
17788: LD_INT 14
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: LD_INT 2
17796: PUSH
17797: LD_INT 3
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: ST_TO_ADDR
17809: GO 17940
17811: LD_INT 1
17813: DOUBLE
17814: EQUAL
17815: IFTRUE 17819
17817: GO 17881
17819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17820: LD_ADDR_VAR 0 3
17824: PUSH
17825: LD_INT 11
17827: PUSH
17828: LD_INT 12
17830: PUSH
17831: LD_INT 13
17833: PUSH
17834: LD_INT 14
17836: PUSH
17837: LD_INT 1
17839: PUSH
17840: LD_INT 2
17842: PUSH
17843: LD_INT 3
17845: PUSH
17846: LD_INT 4
17848: PUSH
17849: LD_INT 5
17851: PUSH
17852: LD_INT 21
17854: PUSH
17855: LD_INT 23
17857: PUSH
17858: LD_INT 22
17860: PUSH
17861: LD_INT 24
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: ST_TO_ADDR
17879: GO 17940
17881: LD_INT 3
17883: DOUBLE
17884: EQUAL
17885: IFTRUE 17889
17887: GO 17939
17889: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17890: LD_ADDR_VAR 0 3
17894: PUSH
17895: LD_INT 13
17897: PUSH
17898: LD_INT 14
17900: PUSH
17901: LD_INT 2
17903: PUSH
17904: LD_INT 3
17906: PUSH
17907: LD_INT 4
17909: PUSH
17910: LD_INT 5
17912: PUSH
17913: LD_INT 21
17915: PUSH
17916: LD_INT 22
17918: PUSH
17919: LD_INT 23
17921: PUSH
17922: LD_INT 24
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: ST_TO_ADDR
17937: GO 17940
17939: POP
// result := ( chassis in result ) ;
17940: LD_ADDR_VAR 0 3
17944: PUSH
17945: LD_VAR 0 1
17949: PUSH
17950: LD_VAR 0 3
17954: IN
17955: ST_TO_ADDR
// end ;
17956: LD_VAR 0 3
17960: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
17961: LD_INT 0
17963: PPUSH
// if not chassis or not weapon then
17964: LD_VAR 0 1
17968: NOT
17969: PUSH
17970: LD_VAR 0 2
17974: NOT
17975: OR
17976: IFFALSE 17980
// exit ;
17978: GO 19040
// case weapon of us_machine_gun :
17980: LD_VAR 0 2
17984: PUSH
17985: LD_INT 2
17987: DOUBLE
17988: EQUAL
17989: IFTRUE 17993
17991: GO 18023
17993: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
17994: LD_ADDR_VAR 0 3
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: LD_INT 2
18004: PUSH
18005: LD_INT 3
18007: PUSH
18008: LD_INT 4
18010: PUSH
18011: LD_INT 5
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: ST_TO_ADDR
18021: GO 19024
18023: LD_INT 3
18025: DOUBLE
18026: EQUAL
18027: IFTRUE 18031
18029: GO 18061
18031: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18032: LD_ADDR_VAR 0 3
18036: PUSH
18037: LD_INT 1
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: LD_INT 3
18045: PUSH
18046: LD_INT 4
18048: PUSH
18049: LD_INT 5
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: ST_TO_ADDR
18059: GO 19024
18061: LD_INT 11
18063: DOUBLE
18064: EQUAL
18065: IFTRUE 18069
18067: GO 18099
18069: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18070: LD_ADDR_VAR 0 3
18074: PUSH
18075: LD_INT 1
18077: PUSH
18078: LD_INT 2
18080: PUSH
18081: LD_INT 3
18083: PUSH
18084: LD_INT 4
18086: PUSH
18087: LD_INT 5
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: ST_TO_ADDR
18097: GO 19024
18099: LD_INT 4
18101: DOUBLE
18102: EQUAL
18103: IFTRUE 18107
18105: GO 18133
18107: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18108: LD_ADDR_VAR 0 3
18112: PUSH
18113: LD_INT 2
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: LD_INT 4
18121: PUSH
18122: LD_INT 5
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: ST_TO_ADDR
18131: GO 19024
18133: LD_INT 5
18135: DOUBLE
18136: EQUAL
18137: IFTRUE 18141
18139: GO 18167
18141: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18142: LD_ADDR_VAR 0 3
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 3
18152: PUSH
18153: LD_INT 4
18155: PUSH
18156: LD_INT 5
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: ST_TO_ADDR
18165: GO 19024
18167: LD_INT 9
18169: DOUBLE
18170: EQUAL
18171: IFTRUE 18175
18173: GO 18201
18175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18176: LD_ADDR_VAR 0 3
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: LD_INT 4
18189: PUSH
18190: LD_INT 5
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: ST_TO_ADDR
18199: GO 19024
18201: LD_INT 7
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18235
18209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18210: LD_ADDR_VAR 0 3
18214: PUSH
18215: LD_INT 2
18217: PUSH
18218: LD_INT 3
18220: PUSH
18221: LD_INT 4
18223: PUSH
18224: LD_INT 5
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: ST_TO_ADDR
18233: GO 19024
18235: LD_INT 12
18237: DOUBLE
18238: EQUAL
18239: IFTRUE 18243
18241: GO 18269
18243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18244: LD_ADDR_VAR 0 3
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: LD_INT 3
18254: PUSH
18255: LD_INT 4
18257: PUSH
18258: LD_INT 5
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: ST_TO_ADDR
18267: GO 19024
18269: LD_INT 13
18271: DOUBLE
18272: EQUAL
18273: IFTRUE 18277
18275: GO 18303
18277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18278: LD_ADDR_VAR 0 3
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 3
18288: PUSH
18289: LD_INT 4
18291: PUSH
18292: LD_INT 5
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: ST_TO_ADDR
18301: GO 19024
18303: LD_INT 14
18305: DOUBLE
18306: EQUAL
18307: IFTRUE 18311
18309: GO 18329
18311: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18312: LD_ADDR_VAR 0 3
18316: PUSH
18317: LD_INT 4
18319: PUSH
18320: LD_INT 5
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: ST_TO_ADDR
18327: GO 19024
18329: LD_INT 6
18331: DOUBLE
18332: EQUAL
18333: IFTRUE 18337
18335: GO 18355
18337: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18338: LD_ADDR_VAR 0 3
18342: PUSH
18343: LD_INT 4
18345: PUSH
18346: LD_INT 5
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: ST_TO_ADDR
18353: GO 19024
18355: LD_INT 10
18357: DOUBLE
18358: EQUAL
18359: IFTRUE 18363
18361: GO 18381
18363: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18364: LD_ADDR_VAR 0 3
18368: PUSH
18369: LD_INT 4
18371: PUSH
18372: LD_INT 5
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: ST_TO_ADDR
18379: GO 19024
18381: LD_INT 22
18383: DOUBLE
18384: EQUAL
18385: IFTRUE 18389
18387: GO 18415
18389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18390: LD_ADDR_VAR 0 3
18394: PUSH
18395: LD_INT 11
18397: PUSH
18398: LD_INT 12
18400: PUSH
18401: LD_INT 13
18403: PUSH
18404: LD_INT 14
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: ST_TO_ADDR
18413: GO 19024
18415: LD_INT 23
18417: DOUBLE
18418: EQUAL
18419: IFTRUE 18423
18421: GO 18449
18423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18424: LD_ADDR_VAR 0 3
18428: PUSH
18429: LD_INT 11
18431: PUSH
18432: LD_INT 12
18434: PUSH
18435: LD_INT 13
18437: PUSH
18438: LD_INT 14
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: ST_TO_ADDR
18447: GO 19024
18449: LD_INT 24
18451: DOUBLE
18452: EQUAL
18453: IFTRUE 18457
18455: GO 18483
18457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18458: LD_ADDR_VAR 0 3
18462: PUSH
18463: LD_INT 11
18465: PUSH
18466: LD_INT 12
18468: PUSH
18469: LD_INT 13
18471: PUSH
18472: LD_INT 14
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: ST_TO_ADDR
18481: GO 19024
18483: LD_INT 30
18485: DOUBLE
18486: EQUAL
18487: IFTRUE 18491
18489: GO 18517
18491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18492: LD_ADDR_VAR 0 3
18496: PUSH
18497: LD_INT 11
18499: PUSH
18500: LD_INT 12
18502: PUSH
18503: LD_INT 13
18505: PUSH
18506: LD_INT 14
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: ST_TO_ADDR
18515: GO 19024
18517: LD_INT 25
18519: DOUBLE
18520: EQUAL
18521: IFTRUE 18525
18523: GO 18543
18525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18526: LD_ADDR_VAR 0 3
18530: PUSH
18531: LD_INT 13
18533: PUSH
18534: LD_INT 14
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: ST_TO_ADDR
18541: GO 19024
18543: LD_INT 27
18545: DOUBLE
18546: EQUAL
18547: IFTRUE 18551
18549: GO 18569
18551: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18552: LD_ADDR_VAR 0 3
18556: PUSH
18557: LD_INT 13
18559: PUSH
18560: LD_INT 14
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: ST_TO_ADDR
18567: GO 19024
18569: LD_INT 92
18571: DOUBLE
18572: EQUAL
18573: IFTRUE 18577
18575: GO 18603
18577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18578: LD_ADDR_VAR 0 3
18582: PUSH
18583: LD_INT 11
18585: PUSH
18586: LD_INT 12
18588: PUSH
18589: LD_INT 13
18591: PUSH
18592: LD_INT 14
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: ST_TO_ADDR
18601: GO 19024
18603: LD_INT 28
18605: DOUBLE
18606: EQUAL
18607: IFTRUE 18611
18609: GO 18629
18611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18612: LD_ADDR_VAR 0 3
18616: PUSH
18617: LD_INT 13
18619: PUSH
18620: LD_INT 14
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: ST_TO_ADDR
18627: GO 19024
18629: LD_INT 29
18631: DOUBLE
18632: EQUAL
18633: IFTRUE 18637
18635: GO 18655
18637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18638: LD_ADDR_VAR 0 3
18642: PUSH
18643: LD_INT 13
18645: PUSH
18646: LD_INT 14
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: ST_TO_ADDR
18653: GO 19024
18655: LD_INT 31
18657: DOUBLE
18658: EQUAL
18659: IFTRUE 18663
18661: GO 18681
18663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18664: LD_ADDR_VAR 0 3
18668: PUSH
18669: LD_INT 13
18671: PUSH
18672: LD_INT 14
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: ST_TO_ADDR
18679: GO 19024
18681: LD_INT 26
18683: DOUBLE
18684: EQUAL
18685: IFTRUE 18689
18687: GO 18707
18689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18690: LD_ADDR_VAR 0 3
18694: PUSH
18695: LD_INT 13
18697: PUSH
18698: LD_INT 14
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: ST_TO_ADDR
18705: GO 19024
18707: LD_INT 42
18709: DOUBLE
18710: EQUAL
18711: IFTRUE 18715
18713: GO 18741
18715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18716: LD_ADDR_VAR 0 3
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 22
18726: PUSH
18727: LD_INT 23
18729: PUSH
18730: LD_INT 24
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: ST_TO_ADDR
18739: GO 19024
18741: LD_INT 43
18743: DOUBLE
18744: EQUAL
18745: IFTRUE 18749
18747: GO 18775
18749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18750: LD_ADDR_VAR 0 3
18754: PUSH
18755: LD_INT 21
18757: PUSH
18758: LD_INT 22
18760: PUSH
18761: LD_INT 23
18763: PUSH
18764: LD_INT 24
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: ST_TO_ADDR
18773: GO 19024
18775: LD_INT 44
18777: DOUBLE
18778: EQUAL
18779: IFTRUE 18783
18781: GO 18809
18783: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18784: LD_ADDR_VAR 0 3
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 22
18794: PUSH
18795: LD_INT 23
18797: PUSH
18798: LD_INT 24
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: ST_TO_ADDR
18807: GO 19024
18809: LD_INT 45
18811: DOUBLE
18812: EQUAL
18813: IFTRUE 18817
18815: GO 18843
18817: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18818: LD_ADDR_VAR 0 3
18822: PUSH
18823: LD_INT 21
18825: PUSH
18826: LD_INT 22
18828: PUSH
18829: LD_INT 23
18831: PUSH
18832: LD_INT 24
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: ST_TO_ADDR
18841: GO 19024
18843: LD_INT 49
18845: DOUBLE
18846: EQUAL
18847: IFTRUE 18851
18849: GO 18877
18851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18852: LD_ADDR_VAR 0 3
18856: PUSH
18857: LD_INT 21
18859: PUSH
18860: LD_INT 22
18862: PUSH
18863: LD_INT 23
18865: PUSH
18866: LD_INT 24
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: ST_TO_ADDR
18875: GO 19024
18877: LD_INT 51
18879: DOUBLE
18880: EQUAL
18881: IFTRUE 18885
18883: GO 18911
18885: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18886: LD_ADDR_VAR 0 3
18890: PUSH
18891: LD_INT 21
18893: PUSH
18894: LD_INT 22
18896: PUSH
18897: LD_INT 23
18899: PUSH
18900: LD_INT 24
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: ST_TO_ADDR
18909: GO 19024
18911: LD_INT 52
18913: DOUBLE
18914: EQUAL
18915: IFTRUE 18919
18917: GO 18945
18919: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18920: LD_ADDR_VAR 0 3
18924: PUSH
18925: LD_INT 21
18927: PUSH
18928: LD_INT 22
18930: PUSH
18931: LD_INT 23
18933: PUSH
18934: LD_INT 24
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: ST_TO_ADDR
18943: GO 19024
18945: LD_INT 53
18947: DOUBLE
18948: EQUAL
18949: IFTRUE 18953
18951: GO 18971
18953: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
18954: LD_ADDR_VAR 0 3
18958: PUSH
18959: LD_INT 23
18961: PUSH
18962: LD_INT 24
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: ST_TO_ADDR
18969: GO 19024
18971: LD_INT 46
18973: DOUBLE
18974: EQUAL
18975: IFTRUE 18979
18977: GO 18997
18979: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
18980: LD_ADDR_VAR 0 3
18984: PUSH
18985: LD_INT 23
18987: PUSH
18988: LD_INT 24
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: ST_TO_ADDR
18995: GO 19024
18997: LD_INT 47
18999: DOUBLE
19000: EQUAL
19001: IFTRUE 19005
19003: GO 19023
19005: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19006: LD_ADDR_VAR 0 3
19010: PUSH
19011: LD_INT 23
19013: PUSH
19014: LD_INT 24
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: ST_TO_ADDR
19021: GO 19024
19023: POP
// result := ( chassis in result ) ;
19024: LD_ADDR_VAR 0 3
19028: PUSH
19029: LD_VAR 0 1
19033: PUSH
19034: LD_VAR 0 3
19038: IN
19039: ST_TO_ADDR
// end ;
19040: LD_VAR 0 3
19044: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
19051: PPUSH
19052: PPUSH
19053: PPUSH
// result := array ;
19054: LD_ADDR_VAR 0 5
19058: PUSH
19059: LD_VAR 0 1
19063: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19064: LD_VAR 0 1
19068: NOT
19069: PUSH
19070: LD_VAR 0 2
19074: NOT
19075: OR
19076: PUSH
19077: LD_VAR 0 3
19081: NOT
19082: OR
19083: PUSH
19084: LD_VAR 0 2
19088: PUSH
19089: LD_VAR 0 1
19093: GREATER
19094: OR
19095: PUSH
19096: LD_VAR 0 3
19100: PUSH
19101: LD_VAR 0 1
19105: GREATER
19106: OR
19107: IFFALSE 19111
// exit ;
19109: GO 19407
// if direction then
19111: LD_VAR 0 4
19115: IFFALSE 19179
// begin d := 1 ;
19117: LD_ADDR_VAR 0 9
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// if i_from > i_to then
19125: LD_VAR 0 2
19129: PUSH
19130: LD_VAR 0 3
19134: GREATER
19135: IFFALSE 19161
// length := ( array - i_from ) + i_to else
19137: LD_ADDR_VAR 0 11
19141: PUSH
19142: LD_VAR 0 1
19146: PUSH
19147: LD_VAR 0 2
19151: MINUS
19152: PUSH
19153: LD_VAR 0 3
19157: PLUS
19158: ST_TO_ADDR
19159: GO 19177
// length := i_to - i_from ;
19161: LD_ADDR_VAR 0 11
19165: PUSH
19166: LD_VAR 0 3
19170: PUSH
19171: LD_VAR 0 2
19175: MINUS
19176: ST_TO_ADDR
// end else
19177: GO 19240
// begin d := - 1 ;
19179: LD_ADDR_VAR 0 9
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: ST_TO_ADDR
// if i_from > i_to then
19188: LD_VAR 0 2
19192: PUSH
19193: LD_VAR 0 3
19197: GREATER
19198: IFFALSE 19218
// length := i_from - i_to else
19200: LD_ADDR_VAR 0 11
19204: PUSH
19205: LD_VAR 0 2
19209: PUSH
19210: LD_VAR 0 3
19214: MINUS
19215: ST_TO_ADDR
19216: GO 19240
// length := ( array - i_to ) + i_from ;
19218: LD_ADDR_VAR 0 11
19222: PUSH
19223: LD_VAR 0 1
19227: PUSH
19228: LD_VAR 0 3
19232: MINUS
19233: PUSH
19234: LD_VAR 0 2
19238: PLUS
19239: ST_TO_ADDR
// end ; if not length then
19240: LD_VAR 0 11
19244: NOT
19245: IFFALSE 19249
// exit ;
19247: GO 19407
// tmp := array ;
19249: LD_ADDR_VAR 0 10
19253: PUSH
19254: LD_VAR 0 1
19258: ST_TO_ADDR
// for i = 1 to length do
19259: LD_ADDR_VAR 0 6
19263: PUSH
19264: DOUBLE
19265: LD_INT 1
19267: DEC
19268: ST_TO_ADDR
19269: LD_VAR 0 11
19273: PUSH
19274: FOR_TO
19275: IFFALSE 19395
// begin for j = 1 to array do
19277: LD_ADDR_VAR 0 7
19281: PUSH
19282: DOUBLE
19283: LD_INT 1
19285: DEC
19286: ST_TO_ADDR
19287: LD_VAR 0 1
19291: PUSH
19292: FOR_TO
19293: IFFALSE 19381
// begin k := j + d ;
19295: LD_ADDR_VAR 0 8
19299: PUSH
19300: LD_VAR 0 7
19304: PUSH
19305: LD_VAR 0 9
19309: PLUS
19310: ST_TO_ADDR
// if k > array then
19311: LD_VAR 0 8
19315: PUSH
19316: LD_VAR 0 1
19320: GREATER
19321: IFFALSE 19331
// k := 1 ;
19323: LD_ADDR_VAR 0 8
19327: PUSH
19328: LD_INT 1
19330: ST_TO_ADDR
// if not k then
19331: LD_VAR 0 8
19335: NOT
19336: IFFALSE 19348
// k := array ;
19338: LD_ADDR_VAR 0 8
19342: PUSH
19343: LD_VAR 0 1
19347: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19348: LD_ADDR_VAR 0 10
19352: PUSH
19353: LD_VAR 0 10
19357: PPUSH
19358: LD_VAR 0 8
19362: PPUSH
19363: LD_VAR 0 1
19367: PUSH
19368: LD_VAR 0 7
19372: ARRAY
19373: PPUSH
19374: CALL_OW 1
19378: ST_TO_ADDR
// end ;
19379: GO 19292
19381: POP
19382: POP
// array := tmp ;
19383: LD_ADDR_VAR 0 1
19387: PUSH
19388: LD_VAR 0 10
19392: ST_TO_ADDR
// end ;
19393: GO 19274
19395: POP
19396: POP
// result := array ;
19397: LD_ADDR_VAR 0 5
19401: PUSH
19402: LD_VAR 0 1
19406: ST_TO_ADDR
// end ;
19407: LD_VAR 0 5
19411: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19412: LD_INT 0
19414: PPUSH
19415: PPUSH
// result := 0 ;
19416: LD_ADDR_VAR 0 3
19420: PUSH
19421: LD_INT 0
19423: ST_TO_ADDR
// if not array or not value in array then
19424: LD_VAR 0 1
19428: NOT
19429: PUSH
19430: LD_VAR 0 2
19434: PUSH
19435: LD_VAR 0 1
19439: IN
19440: NOT
19441: OR
19442: IFFALSE 19446
// exit ;
19444: GO 19500
// for i = 1 to array do
19446: LD_ADDR_VAR 0 4
19450: PUSH
19451: DOUBLE
19452: LD_INT 1
19454: DEC
19455: ST_TO_ADDR
19456: LD_VAR 0 1
19460: PUSH
19461: FOR_TO
19462: IFFALSE 19498
// if value = array [ i ] then
19464: LD_VAR 0 2
19468: PUSH
19469: LD_VAR 0 1
19473: PUSH
19474: LD_VAR 0 4
19478: ARRAY
19479: EQUAL
19480: IFFALSE 19496
// begin result := i ;
19482: LD_ADDR_VAR 0 3
19486: PUSH
19487: LD_VAR 0 4
19491: ST_TO_ADDR
// exit ;
19492: POP
19493: POP
19494: GO 19500
// end ;
19496: GO 19461
19498: POP
19499: POP
// end ;
19500: LD_VAR 0 3
19504: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19505: LD_INT 0
19507: PPUSH
// vc_chassis := chassis ;
19508: LD_ADDR_OWVAR 37
19512: PUSH
19513: LD_VAR 0 1
19517: ST_TO_ADDR
// vc_engine := engine ;
19518: LD_ADDR_OWVAR 39
19522: PUSH
19523: LD_VAR 0 2
19527: ST_TO_ADDR
// vc_control := control ;
19528: LD_ADDR_OWVAR 38
19532: PUSH
19533: LD_VAR 0 3
19537: ST_TO_ADDR
// vc_weapon := weapon ;
19538: LD_ADDR_OWVAR 40
19542: PUSH
19543: LD_VAR 0 4
19547: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19548: LD_ADDR_OWVAR 41
19552: PUSH
19553: LD_VAR 0 5
19557: ST_TO_ADDR
// end ;
19558: LD_VAR 0 6
19562: RET
// export function WantPlant ( unit ) ; var task ; begin
19563: LD_INT 0
19565: PPUSH
19566: PPUSH
// result := false ;
19567: LD_ADDR_VAR 0 2
19571: PUSH
19572: LD_INT 0
19574: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19575: LD_ADDR_VAR 0 3
19579: PUSH
19580: LD_VAR 0 1
19584: PPUSH
19585: CALL_OW 437
19589: ST_TO_ADDR
// if task then
19590: LD_VAR 0 3
19594: IFFALSE 19622
// if task [ 1 ] [ 1 ] = p then
19596: LD_VAR 0 3
19600: PUSH
19601: LD_INT 1
19603: ARRAY
19604: PUSH
19605: LD_INT 1
19607: ARRAY
19608: PUSH
19609: LD_STRING p
19611: EQUAL
19612: IFFALSE 19622
// result := true ;
19614: LD_ADDR_VAR 0 2
19618: PUSH
19619: LD_INT 1
19621: ST_TO_ADDR
// end ;
19622: LD_VAR 0 2
19626: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19627: LD_INT 0
19629: PPUSH
19630: PPUSH
19631: PPUSH
19632: PPUSH
// if pos < 1 then
19633: LD_VAR 0 2
19637: PUSH
19638: LD_INT 1
19640: LESS
19641: IFFALSE 19645
// exit ;
19643: GO 19948
// if pos = 1 then
19645: LD_VAR 0 2
19649: PUSH
19650: LD_INT 1
19652: EQUAL
19653: IFFALSE 19686
// result := Replace ( arr , pos [ 1 ] , value ) else
19655: LD_ADDR_VAR 0 4
19659: PUSH
19660: LD_VAR 0 1
19664: PPUSH
19665: LD_VAR 0 2
19669: PUSH
19670: LD_INT 1
19672: ARRAY
19673: PPUSH
19674: LD_VAR 0 3
19678: PPUSH
19679: CALL_OW 1
19683: ST_TO_ADDR
19684: GO 19948
// begin tmp := arr ;
19686: LD_ADDR_VAR 0 6
19690: PUSH
19691: LD_VAR 0 1
19695: ST_TO_ADDR
// s_arr := [ tmp ] ;
19696: LD_ADDR_VAR 0 7
19700: PUSH
19701: LD_VAR 0 6
19705: PUSH
19706: EMPTY
19707: LIST
19708: ST_TO_ADDR
// for i = 1 to pos - 1 do
19709: LD_ADDR_VAR 0 5
19713: PUSH
19714: DOUBLE
19715: LD_INT 1
19717: DEC
19718: ST_TO_ADDR
19719: LD_VAR 0 2
19723: PUSH
19724: LD_INT 1
19726: MINUS
19727: PUSH
19728: FOR_TO
19729: IFFALSE 19774
// begin tmp := tmp [ pos [ i ] ] ;
19731: LD_ADDR_VAR 0 6
19735: PUSH
19736: LD_VAR 0 6
19740: PUSH
19741: LD_VAR 0 2
19745: PUSH
19746: LD_VAR 0 5
19750: ARRAY
19751: ARRAY
19752: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19753: LD_ADDR_VAR 0 7
19757: PUSH
19758: LD_VAR 0 7
19762: PUSH
19763: LD_VAR 0 6
19767: PUSH
19768: EMPTY
19769: LIST
19770: ADD
19771: ST_TO_ADDR
// end ;
19772: GO 19728
19774: POP
19775: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19776: LD_ADDR_VAR 0 6
19780: PUSH
19781: LD_VAR 0 6
19785: PPUSH
19786: LD_VAR 0 2
19790: PUSH
19791: LD_VAR 0 2
19795: ARRAY
19796: PPUSH
19797: LD_VAR 0 3
19801: PPUSH
19802: CALL_OW 1
19806: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19807: LD_ADDR_VAR 0 7
19811: PUSH
19812: LD_VAR 0 7
19816: PPUSH
19817: LD_VAR 0 7
19821: PPUSH
19822: LD_VAR 0 6
19826: PPUSH
19827: CALL_OW 1
19831: ST_TO_ADDR
// for i = s_arr downto 2 do
19832: LD_ADDR_VAR 0 5
19836: PUSH
19837: DOUBLE
19838: LD_VAR 0 7
19842: INC
19843: ST_TO_ADDR
19844: LD_INT 2
19846: PUSH
19847: FOR_DOWNTO
19848: IFFALSE 19932
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19850: LD_ADDR_VAR 0 6
19854: PUSH
19855: LD_VAR 0 7
19859: PUSH
19860: LD_VAR 0 5
19864: PUSH
19865: LD_INT 1
19867: MINUS
19868: ARRAY
19869: PPUSH
19870: LD_VAR 0 2
19874: PUSH
19875: LD_VAR 0 5
19879: PUSH
19880: LD_INT 1
19882: MINUS
19883: ARRAY
19884: PPUSH
19885: LD_VAR 0 7
19889: PUSH
19890: LD_VAR 0 5
19894: ARRAY
19895: PPUSH
19896: CALL_OW 1
19900: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19901: LD_ADDR_VAR 0 7
19905: PUSH
19906: LD_VAR 0 7
19910: PPUSH
19911: LD_VAR 0 5
19915: PUSH
19916: LD_INT 1
19918: MINUS
19919: PPUSH
19920: LD_VAR 0 6
19924: PPUSH
19925: CALL_OW 1
19929: ST_TO_ADDR
// end ;
19930: GO 19847
19932: POP
19933: POP
// result := s_arr [ 1 ] ;
19934: LD_ADDR_VAR 0 4
19938: PUSH
19939: LD_VAR 0 7
19943: PUSH
19944: LD_INT 1
19946: ARRAY
19947: ST_TO_ADDR
// end ; end ;
19948: LD_VAR 0 4
19952: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
19953: LD_INT 0
19955: PPUSH
19956: PPUSH
// if not list then
19957: LD_VAR 0 1
19961: NOT
19962: IFFALSE 19966
// exit ;
19964: GO 20057
// i := list [ pos1 ] ;
19966: LD_ADDR_VAR 0 5
19970: PUSH
19971: LD_VAR 0 1
19975: PUSH
19976: LD_VAR 0 2
19980: ARRAY
19981: ST_TO_ADDR
// if not i then
19982: LD_VAR 0 5
19986: NOT
19987: IFFALSE 19991
// exit ;
19989: GO 20057
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
19991: LD_ADDR_VAR 0 1
19995: PUSH
19996: LD_VAR 0 1
20000: PPUSH
20001: LD_VAR 0 2
20005: PPUSH
20006: LD_VAR 0 1
20010: PUSH
20011: LD_VAR 0 3
20015: ARRAY
20016: PPUSH
20017: CALL_OW 1
20021: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20022: LD_ADDR_VAR 0 1
20026: PUSH
20027: LD_VAR 0 1
20031: PPUSH
20032: LD_VAR 0 3
20036: PPUSH
20037: LD_VAR 0 5
20041: PPUSH
20042: CALL_OW 1
20046: ST_TO_ADDR
// result := list ;
20047: LD_ADDR_VAR 0 4
20051: PUSH
20052: LD_VAR 0 1
20056: ST_TO_ADDR
// end ;
20057: LD_VAR 0 4
20061: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20062: LD_INT 0
20064: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20065: LD_ADDR_VAR 0 5
20069: PUSH
20070: LD_VAR 0 1
20074: PPUSH
20075: CALL_OW 250
20079: PPUSH
20080: LD_VAR 0 1
20084: PPUSH
20085: CALL_OW 251
20089: PPUSH
20090: LD_VAR 0 2
20094: PPUSH
20095: LD_VAR 0 3
20099: PPUSH
20100: LD_VAR 0 4
20104: PPUSH
20105: CALL 20115 0 5
20109: ST_TO_ADDR
// end ;
20110: LD_VAR 0 5
20114: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20115: LD_INT 0
20117: PPUSH
20118: PPUSH
20119: PPUSH
20120: PPUSH
// if not list then
20121: LD_VAR 0 3
20125: NOT
20126: IFFALSE 20130
// exit ;
20128: GO 20518
// result := [ ] ;
20130: LD_ADDR_VAR 0 6
20134: PUSH
20135: EMPTY
20136: ST_TO_ADDR
// for i in list do
20137: LD_ADDR_VAR 0 7
20141: PUSH
20142: LD_VAR 0 3
20146: PUSH
20147: FOR_IN
20148: IFFALSE 20350
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20150: LD_ADDR_VAR 0 9
20154: PUSH
20155: LD_VAR 0 7
20159: PPUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: LD_VAR 0 2
20169: PPUSH
20170: CALL_OW 297
20174: ST_TO_ADDR
// if not result then
20175: LD_VAR 0 6
20179: NOT
20180: IFFALSE 20206
// result := [ [ i , tmp ] ] else
20182: LD_ADDR_VAR 0 6
20186: PUSH
20187: LD_VAR 0 7
20191: PUSH
20192: LD_VAR 0 9
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: EMPTY
20202: LIST
20203: ST_TO_ADDR
20204: GO 20348
// begin if result [ result ] [ 2 ] < tmp then
20206: LD_VAR 0 6
20210: PUSH
20211: LD_VAR 0 6
20215: ARRAY
20216: PUSH
20217: LD_INT 2
20219: ARRAY
20220: PUSH
20221: LD_VAR 0 9
20225: LESS
20226: IFFALSE 20268
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20228: LD_ADDR_VAR 0 6
20232: PUSH
20233: LD_VAR 0 6
20237: PPUSH
20238: LD_VAR 0 6
20242: PUSH
20243: LD_INT 1
20245: PLUS
20246: PPUSH
20247: LD_VAR 0 7
20251: PUSH
20252: LD_VAR 0 9
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PPUSH
20261: CALL_OW 2
20265: ST_TO_ADDR
20266: GO 20348
// for j = 1 to result do
20268: LD_ADDR_VAR 0 8
20272: PUSH
20273: DOUBLE
20274: LD_INT 1
20276: DEC
20277: ST_TO_ADDR
20278: LD_VAR 0 6
20282: PUSH
20283: FOR_TO
20284: IFFALSE 20346
// begin if tmp < result [ j ] [ 2 ] then
20286: LD_VAR 0 9
20290: PUSH
20291: LD_VAR 0 6
20295: PUSH
20296: LD_VAR 0 8
20300: ARRAY
20301: PUSH
20302: LD_INT 2
20304: ARRAY
20305: LESS
20306: IFFALSE 20344
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20308: LD_ADDR_VAR 0 6
20312: PUSH
20313: LD_VAR 0 6
20317: PPUSH
20318: LD_VAR 0 8
20322: PPUSH
20323: LD_VAR 0 7
20327: PUSH
20328: LD_VAR 0 9
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PPUSH
20337: CALL_OW 2
20341: ST_TO_ADDR
// break ;
20342: GO 20346
// end ; end ;
20344: GO 20283
20346: POP
20347: POP
// end ; end ;
20348: GO 20147
20350: POP
20351: POP
// if result and not asc then
20352: LD_VAR 0 6
20356: PUSH
20357: LD_VAR 0 4
20361: NOT
20362: AND
20363: IFFALSE 20438
// begin tmp := result ;
20365: LD_ADDR_VAR 0 9
20369: PUSH
20370: LD_VAR 0 6
20374: ST_TO_ADDR
// for i = tmp downto 1 do
20375: LD_ADDR_VAR 0 7
20379: PUSH
20380: DOUBLE
20381: LD_VAR 0 9
20385: INC
20386: ST_TO_ADDR
20387: LD_INT 1
20389: PUSH
20390: FOR_DOWNTO
20391: IFFALSE 20436
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20393: LD_ADDR_VAR 0 6
20397: PUSH
20398: LD_VAR 0 6
20402: PPUSH
20403: LD_VAR 0 9
20407: PUSH
20408: LD_VAR 0 7
20412: MINUS
20413: PUSH
20414: LD_INT 1
20416: PLUS
20417: PPUSH
20418: LD_VAR 0 9
20422: PUSH
20423: LD_VAR 0 7
20427: ARRAY
20428: PPUSH
20429: CALL_OW 1
20433: ST_TO_ADDR
20434: GO 20390
20436: POP
20437: POP
// end ; tmp := [ ] ;
20438: LD_ADDR_VAR 0 9
20442: PUSH
20443: EMPTY
20444: ST_TO_ADDR
// if mode then
20445: LD_VAR 0 5
20449: IFFALSE 20518
// begin for i = 1 to result do
20451: LD_ADDR_VAR 0 7
20455: PUSH
20456: DOUBLE
20457: LD_INT 1
20459: DEC
20460: ST_TO_ADDR
20461: LD_VAR 0 6
20465: PUSH
20466: FOR_TO
20467: IFFALSE 20506
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20469: LD_ADDR_VAR 0 9
20473: PUSH
20474: LD_VAR 0 9
20478: PPUSH
20479: LD_VAR 0 7
20483: PPUSH
20484: LD_VAR 0 6
20488: PUSH
20489: LD_VAR 0 7
20493: ARRAY
20494: PUSH
20495: LD_INT 1
20497: ARRAY
20498: PPUSH
20499: CALL_OW 1
20503: ST_TO_ADDR
20504: GO 20466
20506: POP
20507: POP
// result := tmp ;
20508: LD_ADDR_VAR 0 6
20512: PUSH
20513: LD_VAR 0 9
20517: ST_TO_ADDR
// end ; end ;
20518: LD_VAR 0 6
20522: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20523: LD_INT 0
20525: PPUSH
20526: PPUSH
20527: PPUSH
20528: PPUSH
20529: PPUSH
20530: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20531: LD_ADDR_VAR 0 5
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 0
20544: PUSH
20545: EMPTY
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: ST_TO_ADDR
// if not x or not y then
20553: LD_VAR 0 2
20557: NOT
20558: PUSH
20559: LD_VAR 0 3
20563: NOT
20564: OR
20565: IFFALSE 20569
// exit ;
20567: GO 22219
// if not range then
20569: LD_VAR 0 4
20573: NOT
20574: IFFALSE 20584
// range := 10 ;
20576: LD_ADDR_VAR 0 4
20580: PUSH
20581: LD_INT 10
20583: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20584: LD_ADDR_VAR 0 8
20588: PUSH
20589: LD_INT 81
20591: PUSH
20592: LD_VAR 0 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 92
20603: PUSH
20604: LD_VAR 0 2
20608: PUSH
20609: LD_VAR 0 3
20613: PUSH
20614: LD_VAR 0 4
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 3
20627: PUSH
20628: LD_INT 21
20630: PUSH
20631: LD_INT 3
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: PPUSH
20647: CALL_OW 69
20651: ST_TO_ADDR
// if not tmp then
20652: LD_VAR 0 8
20656: NOT
20657: IFFALSE 20661
// exit ;
20659: GO 22219
// for i in tmp do
20661: LD_ADDR_VAR 0 6
20665: PUSH
20666: LD_VAR 0 8
20670: PUSH
20671: FOR_IN
20672: IFFALSE 22194
// begin points := [ 0 , 0 , 0 ] ;
20674: LD_ADDR_VAR 0 9
20678: PUSH
20679: LD_INT 0
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: ST_TO_ADDR
// bpoints := 1 ;
20693: LD_ADDR_VAR 0 10
20697: PUSH
20698: LD_INT 1
20700: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20701: LD_VAR 0 6
20705: PPUSH
20706: CALL_OW 247
20710: PUSH
20711: LD_INT 1
20713: DOUBLE
20714: EQUAL
20715: IFTRUE 20719
20717: GO 21297
20719: POP
// begin if GetClass ( i ) = 1 then
20720: LD_VAR 0 6
20724: PPUSH
20725: CALL_OW 257
20729: PUSH
20730: LD_INT 1
20732: EQUAL
20733: IFFALSE 20754
// points := [ 10 , 5 , 3 ] ;
20735: LD_ADDR_VAR 0 9
20739: PUSH
20740: LD_INT 10
20742: PUSH
20743: LD_INT 5
20745: PUSH
20746: LD_INT 3
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20754: LD_VAR 0 6
20758: PPUSH
20759: CALL_OW 257
20763: PUSH
20764: LD_INT 2
20766: PUSH
20767: LD_INT 3
20769: PUSH
20770: LD_INT 4
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: IN
20778: IFFALSE 20799
// points := [ 3 , 2 , 1 ] ;
20780: LD_ADDR_VAR 0 9
20784: PUSH
20785: LD_INT 3
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20799: LD_VAR 0 6
20803: PPUSH
20804: CALL_OW 257
20808: PUSH
20809: LD_INT 5
20811: EQUAL
20812: IFFALSE 20833
// points := [ 130 , 5 , 2 ] ;
20814: LD_ADDR_VAR 0 9
20818: PUSH
20819: LD_INT 130
20821: PUSH
20822: LD_INT 5
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20833: LD_VAR 0 6
20837: PPUSH
20838: CALL_OW 257
20842: PUSH
20843: LD_INT 8
20845: EQUAL
20846: IFFALSE 20867
// points := [ 35 , 35 , 30 ] ;
20848: LD_ADDR_VAR 0 9
20852: PUSH
20853: LD_INT 35
20855: PUSH
20856: LD_INT 35
20858: PUSH
20859: LD_INT 30
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20867: LD_VAR 0 6
20871: PPUSH
20872: CALL_OW 257
20876: PUSH
20877: LD_INT 9
20879: EQUAL
20880: IFFALSE 20901
// points := [ 20 , 55 , 40 ] ;
20882: LD_ADDR_VAR 0 9
20886: PUSH
20887: LD_INT 20
20889: PUSH
20890: LD_INT 55
20892: PUSH
20893: LD_INT 40
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20901: LD_VAR 0 6
20905: PPUSH
20906: CALL_OW 257
20910: PUSH
20911: LD_INT 12
20913: PUSH
20914: LD_INT 16
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: IN
20921: IFFALSE 20942
// points := [ 5 , 3 , 2 ] ;
20923: LD_ADDR_VAR 0 9
20927: PUSH
20928: LD_INT 5
20930: PUSH
20931: LD_INT 3
20933: PUSH
20934: LD_INT 2
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20942: LD_VAR 0 6
20946: PPUSH
20947: CALL_OW 257
20951: PUSH
20952: LD_INT 17
20954: EQUAL
20955: IFFALSE 20976
// points := [ 100 , 50 , 75 ] ;
20957: LD_ADDR_VAR 0 9
20961: PUSH
20962: LD_INT 100
20964: PUSH
20965: LD_INT 50
20967: PUSH
20968: LD_INT 75
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20976: LD_VAR 0 6
20980: PPUSH
20981: CALL_OW 257
20985: PUSH
20986: LD_INT 15
20988: EQUAL
20989: IFFALSE 21010
// points := [ 10 , 5 , 3 ] ;
20991: LD_ADDR_VAR 0 9
20995: PUSH
20996: LD_INT 10
20998: PUSH
20999: LD_INT 5
21001: PUSH
21002: LD_INT 3
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21010: LD_VAR 0 6
21014: PPUSH
21015: CALL_OW 257
21019: PUSH
21020: LD_INT 14
21022: EQUAL
21023: IFFALSE 21044
// points := [ 10 , 0 , 0 ] ;
21025: LD_ADDR_VAR 0 9
21029: PUSH
21030: LD_INT 10
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: LD_INT 0
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21044: LD_VAR 0 6
21048: PPUSH
21049: CALL_OW 257
21053: PUSH
21054: LD_INT 11
21056: EQUAL
21057: IFFALSE 21078
// points := [ 30 , 10 , 5 ] ;
21059: LD_ADDR_VAR 0 9
21063: PUSH
21064: LD_INT 30
21066: PUSH
21067: LD_INT 10
21069: PUSH
21070: LD_INT 5
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21078: LD_VAR 0 1
21082: PPUSH
21083: LD_INT 5
21085: PPUSH
21086: CALL_OW 321
21090: PUSH
21091: LD_INT 2
21093: EQUAL
21094: IFFALSE 21111
// bpoints := bpoints * 1.8 ;
21096: LD_ADDR_VAR 0 10
21100: PUSH
21101: LD_VAR 0 10
21105: PUSH
21106: LD_REAL  1.80000000000000E+0000
21109: MUL
21110: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21111: LD_VAR 0 6
21115: PPUSH
21116: CALL_OW 257
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: LD_INT 3
21129: PUSH
21130: LD_INT 4
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: IN
21139: PUSH
21140: LD_VAR 0 1
21144: PPUSH
21145: LD_INT 51
21147: PPUSH
21148: CALL_OW 321
21152: PUSH
21153: LD_INT 2
21155: EQUAL
21156: AND
21157: IFFALSE 21174
// bpoints := bpoints * 1.2 ;
21159: LD_ADDR_VAR 0 10
21163: PUSH
21164: LD_VAR 0 10
21168: PUSH
21169: LD_REAL  1.20000000000000E+0000
21172: MUL
21173: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21174: LD_VAR 0 6
21178: PPUSH
21179: CALL_OW 257
21183: PUSH
21184: LD_INT 5
21186: PUSH
21187: LD_INT 7
21189: PUSH
21190: LD_INT 9
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: IN
21198: PUSH
21199: LD_VAR 0 1
21203: PPUSH
21204: LD_INT 52
21206: PPUSH
21207: CALL_OW 321
21211: PUSH
21212: LD_INT 2
21214: EQUAL
21215: AND
21216: IFFALSE 21233
// bpoints := bpoints * 1.5 ;
21218: LD_ADDR_VAR 0 10
21222: PUSH
21223: LD_VAR 0 10
21227: PUSH
21228: LD_REAL  1.50000000000000E+0000
21231: MUL
21232: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21233: LD_VAR 0 1
21237: PPUSH
21238: LD_INT 66
21240: PPUSH
21241: CALL_OW 321
21245: PUSH
21246: LD_INT 2
21248: EQUAL
21249: IFFALSE 21266
// bpoints := bpoints * 1.1 ;
21251: LD_ADDR_VAR 0 10
21255: PUSH
21256: LD_VAR 0 10
21260: PUSH
21261: LD_REAL  1.10000000000000E+0000
21264: MUL
21265: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21266: LD_ADDR_VAR 0 10
21270: PUSH
21271: LD_VAR 0 10
21275: PUSH
21276: LD_VAR 0 6
21280: PPUSH
21281: LD_INT 1
21283: PPUSH
21284: CALL_OW 259
21288: PUSH
21289: LD_REAL  1.15000000000000E+0000
21292: MUL
21293: MUL
21294: ST_TO_ADDR
// end ; unit_vehicle :
21295: GO 22123
21297: LD_INT 2
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 22111
21305: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21306: LD_VAR 0 6
21310: PPUSH
21311: CALL_OW 264
21315: PUSH
21316: LD_INT 2
21318: PUSH
21319: LD_INT 42
21321: PUSH
21322: LD_INT 24
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: IN
21330: IFFALSE 21351
// points := [ 25 , 5 , 3 ] ;
21332: LD_ADDR_VAR 0 9
21336: PUSH
21337: LD_INT 25
21339: PUSH
21340: LD_INT 5
21342: PUSH
21343: LD_INT 3
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21351: LD_VAR 0 6
21355: PPUSH
21356: CALL_OW 264
21360: PUSH
21361: LD_INT 4
21363: PUSH
21364: LD_INT 43
21366: PUSH
21367: LD_INT 25
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: IN
21375: IFFALSE 21396
// points := [ 40 , 15 , 5 ] ;
21377: LD_ADDR_VAR 0 9
21381: PUSH
21382: LD_INT 40
21384: PUSH
21385: LD_INT 15
21387: PUSH
21388: LD_INT 5
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21396: LD_VAR 0 6
21400: PPUSH
21401: CALL_OW 264
21405: PUSH
21406: LD_INT 3
21408: PUSH
21409: LD_INT 23
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: IN
21416: IFFALSE 21437
// points := [ 7 , 25 , 8 ] ;
21418: LD_ADDR_VAR 0 9
21422: PUSH
21423: LD_INT 7
21425: PUSH
21426: LD_INT 25
21428: PUSH
21429: LD_INT 8
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21437: LD_VAR 0 6
21441: PPUSH
21442: CALL_OW 264
21446: PUSH
21447: LD_INT 5
21449: PUSH
21450: LD_INT 27
21452: PUSH
21453: LD_INT 44
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: IN
21461: IFFALSE 21482
// points := [ 14 , 50 , 16 ] ;
21463: LD_ADDR_VAR 0 9
21467: PUSH
21468: LD_INT 14
21470: PUSH
21471: LD_INT 50
21473: PUSH
21474: LD_INT 16
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21482: LD_VAR 0 6
21486: PPUSH
21487: CALL_OW 264
21491: PUSH
21492: LD_INT 6
21494: PUSH
21495: LD_INT 46
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: IN
21502: IFFALSE 21523
// points := [ 32 , 120 , 70 ] ;
21504: LD_ADDR_VAR 0 9
21508: PUSH
21509: LD_INT 32
21511: PUSH
21512: LD_INT 120
21514: PUSH
21515: LD_INT 70
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
21523: LD_VAR 0 6
21527: PPUSH
21528: CALL_OW 264
21532: PUSH
21533: LD_INT 7
21535: PUSH
21536: LD_INT 28
21538: PUSH
21539: LD_INT 45
21541: PUSH
21542: LD_INT 92
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: IN
21551: IFFALSE 21572
// points := [ 35 , 20 , 45 ] ;
21553: LD_ADDR_VAR 0 9
21557: PUSH
21558: LD_INT 35
21560: PUSH
21561: LD_INT 20
21563: PUSH
21564: LD_INT 45
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21572: LD_VAR 0 6
21576: PPUSH
21577: CALL_OW 264
21581: PUSH
21582: LD_INT 47
21584: PUSH
21585: EMPTY
21586: LIST
21587: IN
21588: IFFALSE 21609
// points := [ 67 , 45 , 75 ] ;
21590: LD_ADDR_VAR 0 9
21594: PUSH
21595: LD_INT 67
21597: PUSH
21598: LD_INT 45
21600: PUSH
21601: LD_INT 75
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21609: LD_VAR 0 6
21613: PPUSH
21614: CALL_OW 264
21618: PUSH
21619: LD_INT 26
21621: PUSH
21622: EMPTY
21623: LIST
21624: IN
21625: IFFALSE 21646
// points := [ 120 , 30 , 80 ] ;
21627: LD_ADDR_VAR 0 9
21631: PUSH
21632: LD_INT 120
21634: PUSH
21635: LD_INT 30
21637: PUSH
21638: LD_INT 80
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21646: LD_VAR 0 6
21650: PPUSH
21651: CALL_OW 264
21655: PUSH
21656: LD_INT 22
21658: PUSH
21659: EMPTY
21660: LIST
21661: IN
21662: IFFALSE 21683
// points := [ 40 , 1 , 1 ] ;
21664: LD_ADDR_VAR 0 9
21668: PUSH
21669: LD_INT 40
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21683: LD_VAR 0 6
21687: PPUSH
21688: CALL_OW 264
21692: PUSH
21693: LD_INT 29
21695: PUSH
21696: EMPTY
21697: LIST
21698: IN
21699: IFFALSE 21720
// points := [ 70 , 200 , 400 ] ;
21701: LD_ADDR_VAR 0 9
21705: PUSH
21706: LD_INT 70
21708: PUSH
21709: LD_INT 200
21711: PUSH
21712: LD_INT 400
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21720: LD_VAR 0 6
21724: PPUSH
21725: CALL_OW 264
21729: PUSH
21730: LD_INT 14
21732: PUSH
21733: LD_INT 53
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: IN
21740: IFFALSE 21761
// points := [ 40 , 10 , 20 ] ;
21742: LD_ADDR_VAR 0 9
21746: PUSH
21747: LD_INT 40
21749: PUSH
21750: LD_INT 10
21752: PUSH
21753: LD_INT 20
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21761: LD_VAR 0 6
21765: PPUSH
21766: CALL_OW 264
21770: PUSH
21771: LD_INT 9
21773: PUSH
21774: EMPTY
21775: LIST
21776: IN
21777: IFFALSE 21798
// points := [ 5 , 70 , 20 ] ;
21779: LD_ADDR_VAR 0 9
21783: PUSH
21784: LD_INT 5
21786: PUSH
21787: LD_INT 70
21789: PUSH
21790: LD_INT 20
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21798: LD_VAR 0 6
21802: PPUSH
21803: CALL_OW 264
21807: PUSH
21808: LD_INT 10
21810: PUSH
21811: EMPTY
21812: LIST
21813: IN
21814: IFFALSE 21835
// points := [ 35 , 110 , 70 ] ;
21816: LD_ADDR_VAR 0 9
21820: PUSH
21821: LD_INT 35
21823: PUSH
21824: LD_INT 110
21826: PUSH
21827: LD_INT 70
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: LIST
21834: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21835: LD_VAR 0 6
21839: PPUSH
21840: CALL_OW 265
21844: PUSH
21845: LD_INT 25
21847: EQUAL
21848: IFFALSE 21869
// points := [ 80 , 65 , 100 ] ;
21850: LD_ADDR_VAR 0 9
21854: PUSH
21855: LD_INT 80
21857: PUSH
21858: LD_INT 65
21860: PUSH
21861: LD_INT 100
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21869: LD_VAR 0 6
21873: PPUSH
21874: CALL_OW 263
21878: PUSH
21879: LD_INT 1
21881: EQUAL
21882: IFFALSE 21917
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21884: LD_ADDR_VAR 0 10
21888: PUSH
21889: LD_VAR 0 10
21893: PUSH
21894: LD_VAR 0 6
21898: PPUSH
21899: CALL_OW 311
21903: PPUSH
21904: LD_INT 3
21906: PPUSH
21907: CALL_OW 259
21911: PUSH
21912: LD_INT 4
21914: MUL
21915: MUL
21916: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21917: LD_VAR 0 6
21921: PPUSH
21922: CALL_OW 263
21926: PUSH
21927: LD_INT 2
21929: EQUAL
21930: IFFALSE 21981
// begin j := IsControledBy ( i ) ;
21932: LD_ADDR_VAR 0 7
21936: PUSH
21937: LD_VAR 0 6
21941: PPUSH
21942: CALL_OW 312
21946: ST_TO_ADDR
// if j then
21947: LD_VAR 0 7
21951: IFFALSE 21981
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21953: LD_ADDR_VAR 0 10
21957: PUSH
21958: LD_VAR 0 10
21962: PUSH
21963: LD_VAR 0 7
21967: PPUSH
21968: LD_INT 3
21970: PPUSH
21971: CALL_OW 259
21975: PUSH
21976: LD_INT 3
21978: MUL
21979: MUL
21980: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21981: LD_VAR 0 6
21985: PPUSH
21986: CALL_OW 264
21990: PUSH
21991: LD_INT 5
21993: PUSH
21994: LD_INT 6
21996: PUSH
21997: LD_INT 46
21999: PUSH
22000: LD_INT 44
22002: PUSH
22003: LD_INT 47
22005: PUSH
22006: LD_INT 45
22008: PUSH
22009: LD_INT 28
22011: PUSH
22012: LD_INT 7
22014: PUSH
22015: LD_INT 27
22017: PUSH
22018: LD_INT 29
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: IN
22033: PUSH
22034: LD_VAR 0 1
22038: PPUSH
22039: LD_INT 52
22041: PPUSH
22042: CALL_OW 321
22046: PUSH
22047: LD_INT 2
22049: EQUAL
22050: AND
22051: IFFALSE 22068
// bpoints := bpoints * 1.2 ;
22053: LD_ADDR_VAR 0 10
22057: PUSH
22058: LD_VAR 0 10
22062: PUSH
22063: LD_REAL  1.20000000000000E+0000
22066: MUL
22067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22068: LD_VAR 0 6
22072: PPUSH
22073: CALL_OW 264
22077: PUSH
22078: LD_INT 6
22080: PUSH
22081: LD_INT 46
22083: PUSH
22084: LD_INT 47
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: LIST
22091: IN
22092: IFFALSE 22109
// bpoints := bpoints * 1.2 ;
22094: LD_ADDR_VAR 0 10
22098: PUSH
22099: LD_VAR 0 10
22103: PUSH
22104: LD_REAL  1.20000000000000E+0000
22107: MUL
22108: ST_TO_ADDR
// end ; unit_building :
22109: GO 22123
22111: LD_INT 3
22113: DOUBLE
22114: EQUAL
22115: IFTRUE 22119
22117: GO 22122
22119: POP
// ; end ;
22120: GO 22123
22122: POP
// for j = 1 to 3 do
22123: LD_ADDR_VAR 0 7
22127: PUSH
22128: DOUBLE
22129: LD_INT 1
22131: DEC
22132: ST_TO_ADDR
22133: LD_INT 3
22135: PUSH
22136: FOR_TO
22137: IFFALSE 22190
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22139: LD_ADDR_VAR 0 5
22143: PUSH
22144: LD_VAR 0 5
22148: PPUSH
22149: LD_VAR 0 7
22153: PPUSH
22154: LD_VAR 0 5
22158: PUSH
22159: LD_VAR 0 7
22163: ARRAY
22164: PUSH
22165: LD_VAR 0 9
22169: PUSH
22170: LD_VAR 0 7
22174: ARRAY
22175: PUSH
22176: LD_VAR 0 10
22180: MUL
22181: PLUS
22182: PPUSH
22183: CALL_OW 1
22187: ST_TO_ADDR
22188: GO 22136
22190: POP
22191: POP
// end ;
22192: GO 20671
22194: POP
22195: POP
// result := Replace ( result , 4 , tmp ) ;
22196: LD_ADDR_VAR 0 5
22200: PUSH
22201: LD_VAR 0 5
22205: PPUSH
22206: LD_INT 4
22208: PPUSH
22209: LD_VAR 0 8
22213: PPUSH
22214: CALL_OW 1
22218: ST_TO_ADDR
// end ;
22219: LD_VAR 0 5
22223: RET
// export function DangerAtRange ( unit , range ) ; begin
22224: LD_INT 0
22226: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22227: LD_ADDR_VAR 0 3
22231: PUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 255
22241: PPUSH
22242: LD_VAR 0 1
22246: PPUSH
22247: CALL_OW 250
22251: PPUSH
22252: LD_VAR 0 1
22256: PPUSH
22257: CALL_OW 251
22261: PPUSH
22262: LD_VAR 0 2
22266: PPUSH
22267: CALL 20523 0 4
22271: ST_TO_ADDR
// end ;
22272: LD_VAR 0 3
22276: RET
// export function DangerInArea ( side , area ) ; begin
22277: LD_INT 0
22279: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22280: LD_ADDR_VAR 0 3
22284: PUSH
22285: LD_VAR 0 2
22289: PPUSH
22290: LD_INT 81
22292: PUSH
22293: LD_VAR 0 1
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PPUSH
22302: CALL_OW 70
22306: ST_TO_ADDR
// end ;
22307: LD_VAR 0 3
22311: RET
// export function IsExtension ( b ) ; begin
22312: LD_INT 0
22314: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22315: LD_ADDR_VAR 0 2
22319: PUSH
22320: LD_VAR 0 1
22324: PUSH
22325: LD_INT 23
22327: PUSH
22328: LD_INT 20
22330: PUSH
22331: LD_INT 22
22333: PUSH
22334: LD_INT 17
22336: PUSH
22337: LD_INT 24
22339: PUSH
22340: LD_INT 21
22342: PUSH
22343: LD_INT 19
22345: PUSH
22346: LD_INT 16
22348: PUSH
22349: LD_INT 25
22351: PUSH
22352: LD_INT 18
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: IN
22367: ST_TO_ADDR
// end ;
22368: LD_VAR 0 2
22372: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
22373: LD_INT 0
22375: PPUSH
22376: PPUSH
22377: PPUSH
// result := [ ] ;
22378: LD_ADDR_VAR 0 4
22382: PUSH
22383: EMPTY
22384: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22385: LD_ADDR_VAR 0 5
22389: PUSH
22390: LD_VAR 0 2
22394: PPUSH
22395: LD_INT 21
22397: PUSH
22398: LD_INT 3
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PPUSH
22405: CALL_OW 70
22409: ST_TO_ADDR
// if not tmp then
22410: LD_VAR 0 5
22414: NOT
22415: IFFALSE 22419
// exit ;
22417: GO 22483
// if checkLink then
22419: LD_VAR 0 3
22423: IFFALSE 22473
// begin for i in tmp do
22425: LD_ADDR_VAR 0 6
22429: PUSH
22430: LD_VAR 0 5
22434: PUSH
22435: FOR_IN
22436: IFFALSE 22471
// if GetBase ( i ) <> base then
22438: LD_VAR 0 6
22442: PPUSH
22443: CALL_OW 274
22447: PUSH
22448: LD_VAR 0 1
22452: NONEQUAL
22453: IFFALSE 22469
// ComLinkToBase ( base , i ) ;
22455: LD_VAR 0 1
22459: PPUSH
22460: LD_VAR 0 6
22464: PPUSH
22465: CALL_OW 169
22469: GO 22435
22471: POP
22472: POP
// end ; result := tmp ;
22473: LD_ADDR_VAR 0 4
22477: PUSH
22478: LD_VAR 0 5
22482: ST_TO_ADDR
// end ;
22483: LD_VAR 0 4
22487: RET
// export function ComComplete ( units , b ) ; var i ; begin
22488: LD_INT 0
22490: PPUSH
22491: PPUSH
// if not units then
22492: LD_VAR 0 1
22496: NOT
22497: IFFALSE 22501
// exit ;
22499: GO 22591
// for i in units do
22501: LD_ADDR_VAR 0 4
22505: PUSH
22506: LD_VAR 0 1
22510: PUSH
22511: FOR_IN
22512: IFFALSE 22589
// if BuildingStatus ( b ) = bs_build then
22514: LD_VAR 0 2
22518: PPUSH
22519: CALL_OW 461
22523: PUSH
22524: LD_INT 1
22526: EQUAL
22527: IFFALSE 22587
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22529: LD_VAR 0 4
22533: PPUSH
22534: LD_STRING h
22536: PUSH
22537: LD_VAR 0 2
22541: PPUSH
22542: CALL_OW 250
22546: PUSH
22547: LD_VAR 0 2
22551: PPUSH
22552: CALL_OW 251
22556: PUSH
22557: LD_VAR 0 2
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 0
22567: PUSH
22568: LD_INT 0
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: PPUSH
22583: CALL_OW 446
22587: GO 22511
22589: POP
22590: POP
// end ;
22591: LD_VAR 0 3
22595: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22596: LD_INT 0
22598: PPUSH
22599: PPUSH
22600: PPUSH
22601: PPUSH
22602: PPUSH
22603: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
22604: LD_VAR 0 1
22608: NOT
22609: PUSH
22610: LD_VAR 0 1
22614: PPUSH
22615: CALL_OW 263
22619: PUSH
22620: LD_INT 2
22622: NONEQUAL
22623: OR
22624: IFFALSE 22628
// exit ;
22626: GO 22944
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22628: LD_ADDR_VAR 0 6
22632: PUSH
22633: LD_INT 22
22635: PUSH
22636: LD_VAR 0 1
22640: PPUSH
22641: CALL_OW 255
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: LD_INT 30
22655: PUSH
22656: LD_INT 36
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 34
22665: PUSH
22666: LD_INT 31
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PPUSH
22682: CALL_OW 69
22686: ST_TO_ADDR
// if not tmp then
22687: LD_VAR 0 6
22691: NOT
22692: IFFALSE 22696
// exit ;
22694: GO 22944
// result := [ ] ;
22696: LD_ADDR_VAR 0 2
22700: PUSH
22701: EMPTY
22702: ST_TO_ADDR
// for i in tmp do
22703: LD_ADDR_VAR 0 3
22707: PUSH
22708: LD_VAR 0 6
22712: PUSH
22713: FOR_IN
22714: IFFALSE 22785
// begin t := UnitsInside ( i ) ;
22716: LD_ADDR_VAR 0 4
22720: PUSH
22721: LD_VAR 0 3
22725: PPUSH
22726: CALL_OW 313
22730: ST_TO_ADDR
// if t then
22731: LD_VAR 0 4
22735: IFFALSE 22783
// for j in t do
22737: LD_ADDR_VAR 0 7
22741: PUSH
22742: LD_VAR 0 4
22746: PUSH
22747: FOR_IN
22748: IFFALSE 22781
// result := Replace ( result , result + 1 , j ) ;
22750: LD_ADDR_VAR 0 2
22754: PUSH
22755: LD_VAR 0 2
22759: PPUSH
22760: LD_VAR 0 2
22764: PUSH
22765: LD_INT 1
22767: PLUS
22768: PPUSH
22769: LD_VAR 0 7
22773: PPUSH
22774: CALL_OW 1
22778: ST_TO_ADDR
22779: GO 22747
22781: POP
22782: POP
// end ;
22783: GO 22713
22785: POP
22786: POP
// if not result then
22787: LD_VAR 0 2
22791: NOT
22792: IFFALSE 22796
// exit ;
22794: GO 22944
// mech := result [ 1 ] ;
22796: LD_ADDR_VAR 0 5
22800: PUSH
22801: LD_VAR 0 2
22805: PUSH
22806: LD_INT 1
22808: ARRAY
22809: ST_TO_ADDR
// if result > 1 then
22810: LD_VAR 0 2
22814: PUSH
22815: LD_INT 1
22817: GREATER
22818: IFFALSE 22930
// begin for i = 2 to result do
22820: LD_ADDR_VAR 0 3
22824: PUSH
22825: DOUBLE
22826: LD_INT 2
22828: DEC
22829: ST_TO_ADDR
22830: LD_VAR 0 2
22834: PUSH
22835: FOR_TO
22836: IFFALSE 22928
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22838: LD_ADDR_VAR 0 4
22842: PUSH
22843: LD_VAR 0 2
22847: PUSH
22848: LD_VAR 0 3
22852: ARRAY
22853: PPUSH
22854: LD_INT 3
22856: PPUSH
22857: CALL_OW 259
22861: PUSH
22862: LD_VAR 0 2
22866: PUSH
22867: LD_VAR 0 3
22871: ARRAY
22872: PPUSH
22873: CALL_OW 432
22877: MINUS
22878: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22879: LD_VAR 0 4
22883: PUSH
22884: LD_VAR 0 5
22888: PPUSH
22889: LD_INT 3
22891: PPUSH
22892: CALL_OW 259
22896: PUSH
22897: LD_VAR 0 5
22901: PPUSH
22902: CALL_OW 432
22906: MINUS
22907: GREATEREQUAL
22908: IFFALSE 22926
// mech := result [ i ] ;
22910: LD_ADDR_VAR 0 5
22914: PUSH
22915: LD_VAR 0 2
22919: PUSH
22920: LD_VAR 0 3
22924: ARRAY
22925: ST_TO_ADDR
// end ;
22926: GO 22835
22928: POP
22929: POP
// end ; ComLinkTo ( vehicle , mech ) ;
22930: LD_VAR 0 1
22934: PPUSH
22935: LD_VAR 0 5
22939: PPUSH
22940: CALL_OW 135
// end ;
22944: LD_VAR 0 2
22948: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
22949: LD_INT 0
22951: PPUSH
22952: PPUSH
22953: PPUSH
22954: PPUSH
22955: PPUSH
22956: PPUSH
22957: PPUSH
22958: PPUSH
22959: PPUSH
22960: PPUSH
22961: PPUSH
22962: PPUSH
22963: PPUSH
// result := [ ] ;
22964: LD_ADDR_VAR 0 7
22968: PUSH
22969: EMPTY
22970: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 266
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: IN
22991: NOT
22992: IFFALSE 22996
// exit ;
22994: GO 24630
// if name then
22996: LD_VAR 0 3
23000: IFFALSE 23016
// SetBName ( base_dep , name ) ;
23002: LD_VAR 0 1
23006: PPUSH
23007: LD_VAR 0 3
23011: PPUSH
23012: CALL_OW 500
// base := GetBase ( base_dep ) ;
23016: LD_ADDR_VAR 0 15
23020: PUSH
23021: LD_VAR 0 1
23025: PPUSH
23026: CALL_OW 274
23030: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23031: LD_ADDR_VAR 0 16
23035: PUSH
23036: LD_VAR 0 1
23040: PPUSH
23041: CALL_OW 255
23045: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23046: LD_ADDR_VAR 0 17
23050: PUSH
23051: LD_VAR 0 1
23055: PPUSH
23056: CALL_OW 248
23060: ST_TO_ADDR
// if sources then
23061: LD_VAR 0 5
23065: IFFALSE 23112
// for i = 1 to 3 do
23067: LD_ADDR_VAR 0 8
23071: PUSH
23072: DOUBLE
23073: LD_INT 1
23075: DEC
23076: ST_TO_ADDR
23077: LD_INT 3
23079: PUSH
23080: FOR_TO
23081: IFFALSE 23110
// AddResourceType ( base , i , sources [ i ] ) ;
23083: LD_VAR 0 15
23087: PPUSH
23088: LD_VAR 0 8
23092: PPUSH
23093: LD_VAR 0 5
23097: PUSH
23098: LD_VAR 0 8
23102: ARRAY
23103: PPUSH
23104: CALL_OW 276
23108: GO 23080
23110: POP
23111: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23112: LD_ADDR_VAR 0 18
23116: PUSH
23117: LD_VAR 0 15
23121: PPUSH
23122: LD_VAR 0 2
23126: PPUSH
23127: LD_INT 1
23129: PPUSH
23130: CALL 22373 0 3
23134: ST_TO_ADDR
// InitHc ;
23135: CALL_OW 19
// InitUc ;
23139: CALL_OW 18
// uc_side := side ;
23143: LD_ADDR_OWVAR 20
23147: PUSH
23148: LD_VAR 0 16
23152: ST_TO_ADDR
// uc_nation := nation ;
23153: LD_ADDR_OWVAR 21
23157: PUSH
23158: LD_VAR 0 17
23162: ST_TO_ADDR
// if buildings then
23163: LD_VAR 0 18
23167: IFFALSE 24489
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23169: LD_ADDR_VAR 0 19
23173: PUSH
23174: LD_VAR 0 18
23178: PPUSH
23179: LD_INT 2
23181: PUSH
23182: LD_INT 30
23184: PUSH
23185: LD_INT 29
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 30
23194: PUSH
23195: LD_INT 30
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: LIST
23206: PPUSH
23207: CALL_OW 72
23211: ST_TO_ADDR
// if tmp then
23212: LD_VAR 0 19
23216: IFFALSE 23264
// for i in tmp do
23218: LD_ADDR_VAR 0 8
23222: PUSH
23223: LD_VAR 0 19
23227: PUSH
23228: FOR_IN
23229: IFFALSE 23262
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23231: LD_VAR 0 8
23235: PPUSH
23236: CALL_OW 250
23240: PPUSH
23241: LD_VAR 0 8
23245: PPUSH
23246: CALL_OW 251
23250: PPUSH
23251: LD_VAR 0 16
23255: PPUSH
23256: CALL_OW 441
23260: GO 23228
23262: POP
23263: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23264: LD_VAR 0 18
23268: PPUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 30
23274: PUSH
23275: LD_INT 32
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 30
23284: PUSH
23285: LD_INT 33
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 72
23301: IFFALSE 23389
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23303: LD_ADDR_VAR 0 8
23307: PUSH
23308: LD_VAR 0 18
23312: PPUSH
23313: LD_INT 2
23315: PUSH
23316: LD_INT 30
23318: PUSH
23319: LD_INT 32
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 30
23328: PUSH
23329: LD_INT 33
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: LIST
23340: PPUSH
23341: CALL_OW 72
23345: PUSH
23346: FOR_IN
23347: IFFALSE 23387
// begin if not GetBWeapon ( i ) then
23349: LD_VAR 0 8
23353: PPUSH
23354: CALL_OW 269
23358: NOT
23359: IFFALSE 23385
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23361: LD_VAR 0 8
23365: PPUSH
23366: LD_VAR 0 8
23370: PPUSH
23371: LD_VAR 0 2
23375: PPUSH
23376: CALL 24635 0 2
23380: PPUSH
23381: CALL_OW 431
// end ;
23385: GO 23346
23387: POP
23388: POP
// end ; for i = 1 to personel do
23389: LD_ADDR_VAR 0 8
23393: PUSH
23394: DOUBLE
23395: LD_INT 1
23397: DEC
23398: ST_TO_ADDR
23399: LD_VAR 0 6
23403: PUSH
23404: FOR_TO
23405: IFFALSE 24469
// begin if i > 4 then
23407: LD_VAR 0 8
23411: PUSH
23412: LD_INT 4
23414: GREATER
23415: IFFALSE 23419
// break ;
23417: GO 24469
// case i of 1 :
23419: LD_VAR 0 8
23423: PUSH
23424: LD_INT 1
23426: DOUBLE
23427: EQUAL
23428: IFTRUE 23432
23430: GO 23512
23432: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23433: LD_ADDR_VAR 0 12
23437: PUSH
23438: LD_VAR 0 18
23442: PPUSH
23443: LD_INT 22
23445: PUSH
23446: LD_VAR 0 16
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 58
23457: PUSH
23458: EMPTY
23459: LIST
23460: PUSH
23461: LD_INT 2
23463: PUSH
23464: LD_INT 30
23466: PUSH
23467: LD_INT 32
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 30
23476: PUSH
23477: LD_INT 4
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 30
23486: PUSH
23487: LD_INT 5
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: PPUSH
23505: CALL_OW 72
23509: ST_TO_ADDR
23510: GO 23734
23512: LD_INT 2
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23582
23520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23521: LD_ADDR_VAR 0 12
23525: PUSH
23526: LD_VAR 0 18
23530: PPUSH
23531: LD_INT 22
23533: PUSH
23534: LD_VAR 0 16
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 2
23545: PUSH
23546: LD_INT 30
23548: PUSH
23549: LD_INT 0
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 30
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PPUSH
23575: CALL_OW 72
23579: ST_TO_ADDR
23580: GO 23734
23582: LD_INT 3
23584: DOUBLE
23585: EQUAL
23586: IFTRUE 23590
23588: GO 23652
23590: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23591: LD_ADDR_VAR 0 12
23595: PUSH
23596: LD_VAR 0 18
23600: PPUSH
23601: LD_INT 22
23603: PUSH
23604: LD_VAR 0 16
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: LD_INT 30
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 30
23628: PUSH
23629: LD_INT 3
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PPUSH
23645: CALL_OW 72
23649: ST_TO_ADDR
23650: GO 23734
23652: LD_INT 4
23654: DOUBLE
23655: EQUAL
23656: IFTRUE 23660
23658: GO 23733
23660: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23661: LD_ADDR_VAR 0 12
23665: PUSH
23666: LD_VAR 0 18
23670: PPUSH
23671: LD_INT 22
23673: PUSH
23674: LD_VAR 0 16
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 2
23685: PUSH
23686: LD_INT 30
23688: PUSH
23689: LD_INT 6
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 30
23698: PUSH
23699: LD_INT 7
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 30
23708: PUSH
23709: LD_INT 8
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 72
23730: ST_TO_ADDR
23731: GO 23734
23733: POP
// if i = 1 then
23734: LD_VAR 0 8
23738: PUSH
23739: LD_INT 1
23741: EQUAL
23742: IFFALSE 23853
// begin tmp := [ ] ;
23744: LD_ADDR_VAR 0 19
23748: PUSH
23749: EMPTY
23750: ST_TO_ADDR
// for j in f do
23751: LD_ADDR_VAR 0 9
23755: PUSH
23756: LD_VAR 0 12
23760: PUSH
23761: FOR_IN
23762: IFFALSE 23835
// if GetBType ( j ) = b_bunker then
23764: LD_VAR 0 9
23768: PPUSH
23769: CALL_OW 266
23773: PUSH
23774: LD_INT 32
23776: EQUAL
23777: IFFALSE 23804
// tmp := Insert ( tmp , 1 , j ) else
23779: LD_ADDR_VAR 0 19
23783: PUSH
23784: LD_VAR 0 19
23788: PPUSH
23789: LD_INT 1
23791: PPUSH
23792: LD_VAR 0 9
23796: PPUSH
23797: CALL_OW 2
23801: ST_TO_ADDR
23802: GO 23833
// tmp := Insert ( tmp , tmp + 1 , j ) ;
23804: LD_ADDR_VAR 0 19
23808: PUSH
23809: LD_VAR 0 19
23813: PPUSH
23814: LD_VAR 0 19
23818: PUSH
23819: LD_INT 1
23821: PLUS
23822: PPUSH
23823: LD_VAR 0 9
23827: PPUSH
23828: CALL_OW 2
23832: ST_TO_ADDR
23833: GO 23761
23835: POP
23836: POP
// if tmp then
23837: LD_VAR 0 19
23841: IFFALSE 23853
// f := tmp ;
23843: LD_ADDR_VAR 0 12
23847: PUSH
23848: LD_VAR 0 19
23852: ST_TO_ADDR
// end ; x := personel [ i ] ;
23853: LD_ADDR_VAR 0 13
23857: PUSH
23858: LD_VAR 0 6
23862: PUSH
23863: LD_VAR 0 8
23867: ARRAY
23868: ST_TO_ADDR
// if x = - 1 then
23869: LD_VAR 0 13
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: EQUAL
23878: IFFALSE 24087
// begin for j in f do
23880: LD_ADDR_VAR 0 9
23884: PUSH
23885: LD_VAR 0 12
23889: PUSH
23890: FOR_IN
23891: IFFALSE 24083
// repeat InitHc ;
23893: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23897: LD_VAR 0 9
23901: PPUSH
23902: CALL_OW 266
23906: PUSH
23907: LD_INT 5
23909: EQUAL
23910: IFFALSE 23980
// begin if UnitsInside ( j ) < 3 then
23912: LD_VAR 0 9
23916: PPUSH
23917: CALL_OW 313
23921: PUSH
23922: LD_INT 3
23924: LESS
23925: IFFALSE 23961
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23927: LD_INT 0
23929: PPUSH
23930: LD_INT 5
23932: PUSH
23933: LD_INT 8
23935: PUSH
23936: LD_INT 9
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: LIST
23943: PUSH
23944: LD_VAR 0 17
23948: ARRAY
23949: PPUSH
23950: LD_VAR 0 4
23954: PPUSH
23955: CALL_OW 380
23959: GO 23978
// PrepareHuman ( false , i , skill ) ;
23961: LD_INT 0
23963: PPUSH
23964: LD_VAR 0 8
23968: PPUSH
23969: LD_VAR 0 4
23973: PPUSH
23974: CALL_OW 380
// end else
23978: GO 23997
// PrepareHuman ( false , i , skill ) ;
23980: LD_INT 0
23982: PPUSH
23983: LD_VAR 0 8
23987: PPUSH
23988: LD_VAR 0 4
23992: PPUSH
23993: CALL_OW 380
// un := CreateHuman ;
23997: LD_ADDR_VAR 0 14
24001: PUSH
24002: CALL_OW 44
24006: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24007: LD_ADDR_VAR 0 7
24011: PUSH
24012: LD_VAR 0 7
24016: PPUSH
24017: LD_INT 1
24019: PPUSH
24020: LD_VAR 0 14
24024: PPUSH
24025: CALL_OW 2
24029: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24030: LD_VAR 0 14
24034: PPUSH
24035: LD_VAR 0 9
24039: PPUSH
24040: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24044: LD_VAR 0 9
24048: PPUSH
24049: CALL_OW 313
24053: PUSH
24054: LD_INT 6
24056: EQUAL
24057: PUSH
24058: LD_VAR 0 9
24062: PPUSH
24063: CALL_OW 266
24067: PUSH
24068: LD_INT 32
24070: PUSH
24071: LD_INT 31
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: IN
24078: OR
24079: IFFALSE 23893
24081: GO 23890
24083: POP
24084: POP
// end else
24085: GO 24467
// for j = 1 to x do
24087: LD_ADDR_VAR 0 9
24091: PUSH
24092: DOUBLE
24093: LD_INT 1
24095: DEC
24096: ST_TO_ADDR
24097: LD_VAR 0 13
24101: PUSH
24102: FOR_TO
24103: IFFALSE 24465
// begin InitHc ;
24105: CALL_OW 19
// if not f then
24109: LD_VAR 0 12
24113: NOT
24114: IFFALSE 24203
// begin PrepareHuman ( false , i , skill ) ;
24116: LD_INT 0
24118: PPUSH
24119: LD_VAR 0 8
24123: PPUSH
24124: LD_VAR 0 4
24128: PPUSH
24129: CALL_OW 380
// un := CreateHuman ;
24133: LD_ADDR_VAR 0 14
24137: PUSH
24138: CALL_OW 44
24142: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24143: LD_ADDR_VAR 0 7
24147: PUSH
24148: LD_VAR 0 7
24152: PPUSH
24153: LD_INT 1
24155: PPUSH
24156: LD_VAR 0 14
24160: PPUSH
24161: CALL_OW 2
24165: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24166: LD_VAR 0 14
24170: PPUSH
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL_OW 250
24180: PPUSH
24181: LD_VAR 0 1
24185: PPUSH
24186: CALL_OW 251
24190: PPUSH
24191: LD_INT 10
24193: PPUSH
24194: LD_INT 0
24196: PPUSH
24197: CALL_OW 50
// continue ;
24201: GO 24102
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24203: LD_VAR 0 12
24207: PUSH
24208: LD_INT 1
24210: ARRAY
24211: PPUSH
24212: CALL_OW 313
24216: PUSH
24217: LD_VAR 0 12
24221: PUSH
24222: LD_INT 1
24224: ARRAY
24225: PPUSH
24226: CALL_OW 266
24230: PUSH
24231: LD_INT 32
24233: PUSH
24234: LD_INT 31
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: IN
24241: AND
24242: PUSH
24243: LD_VAR 0 12
24247: PUSH
24248: LD_INT 1
24250: ARRAY
24251: PPUSH
24252: CALL_OW 313
24256: PUSH
24257: LD_INT 6
24259: EQUAL
24260: OR
24261: IFFALSE 24281
// f := Delete ( f , 1 ) ;
24263: LD_ADDR_VAR 0 12
24267: PUSH
24268: LD_VAR 0 12
24272: PPUSH
24273: LD_INT 1
24275: PPUSH
24276: CALL_OW 3
24280: ST_TO_ADDR
// if not f then
24281: LD_VAR 0 12
24285: NOT
24286: IFFALSE 24304
// begin x := x + 2 ;
24288: LD_ADDR_VAR 0 13
24292: PUSH
24293: LD_VAR 0 13
24297: PUSH
24298: LD_INT 2
24300: PLUS
24301: ST_TO_ADDR
// continue ;
24302: GO 24102
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24304: LD_VAR 0 12
24308: PUSH
24309: LD_INT 1
24311: ARRAY
24312: PPUSH
24313: CALL_OW 266
24317: PUSH
24318: LD_INT 5
24320: EQUAL
24321: IFFALSE 24395
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24323: LD_VAR 0 12
24327: PUSH
24328: LD_INT 1
24330: ARRAY
24331: PPUSH
24332: CALL_OW 313
24336: PUSH
24337: LD_INT 3
24339: LESS
24340: IFFALSE 24376
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24342: LD_INT 0
24344: PPUSH
24345: LD_INT 5
24347: PUSH
24348: LD_INT 8
24350: PUSH
24351: LD_INT 9
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: PUSH
24359: LD_VAR 0 17
24363: ARRAY
24364: PPUSH
24365: LD_VAR 0 4
24369: PPUSH
24370: CALL_OW 380
24374: GO 24393
// PrepareHuman ( false , i , skill ) ;
24376: LD_INT 0
24378: PPUSH
24379: LD_VAR 0 8
24383: PPUSH
24384: LD_VAR 0 4
24388: PPUSH
24389: CALL_OW 380
// end else
24393: GO 24412
// PrepareHuman ( false , i , skill ) ;
24395: LD_INT 0
24397: PPUSH
24398: LD_VAR 0 8
24402: PPUSH
24403: LD_VAR 0 4
24407: PPUSH
24408: CALL_OW 380
// un := CreateHuman ;
24412: LD_ADDR_VAR 0 14
24416: PUSH
24417: CALL_OW 44
24421: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24422: LD_ADDR_VAR 0 7
24426: PUSH
24427: LD_VAR 0 7
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: LD_VAR 0 14
24439: PPUSH
24440: CALL_OW 2
24444: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24445: LD_VAR 0 14
24449: PPUSH
24450: LD_VAR 0 12
24454: PUSH
24455: LD_INT 1
24457: ARRAY
24458: PPUSH
24459: CALL_OW 52
// end ;
24463: GO 24102
24465: POP
24466: POP
// end ;
24467: GO 23404
24469: POP
24470: POP
// result := result ^ buildings ;
24471: LD_ADDR_VAR 0 7
24475: PUSH
24476: LD_VAR 0 7
24480: PUSH
24481: LD_VAR 0 18
24485: ADD
24486: ST_TO_ADDR
// end else
24487: GO 24630
// begin for i = 1 to personel do
24489: LD_ADDR_VAR 0 8
24493: PUSH
24494: DOUBLE
24495: LD_INT 1
24497: DEC
24498: ST_TO_ADDR
24499: LD_VAR 0 6
24503: PUSH
24504: FOR_TO
24505: IFFALSE 24628
// begin if i > 4 then
24507: LD_VAR 0 8
24511: PUSH
24512: LD_INT 4
24514: GREATER
24515: IFFALSE 24519
// break ;
24517: GO 24628
// x := personel [ i ] ;
24519: LD_ADDR_VAR 0 13
24523: PUSH
24524: LD_VAR 0 6
24528: PUSH
24529: LD_VAR 0 8
24533: ARRAY
24534: ST_TO_ADDR
// if x = - 1 then
24535: LD_VAR 0 13
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: EQUAL
24544: IFFALSE 24548
// continue ;
24546: GO 24504
// PrepareHuman ( false , i , skill ) ;
24548: LD_INT 0
24550: PPUSH
24551: LD_VAR 0 8
24555: PPUSH
24556: LD_VAR 0 4
24560: PPUSH
24561: CALL_OW 380
// un := CreateHuman ;
24565: LD_ADDR_VAR 0 14
24569: PUSH
24570: CALL_OW 44
24574: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24575: LD_VAR 0 14
24579: PPUSH
24580: LD_VAR 0 1
24584: PPUSH
24585: CALL_OW 250
24589: PPUSH
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 251
24599: PPUSH
24600: LD_INT 10
24602: PPUSH
24603: LD_INT 0
24605: PPUSH
24606: CALL_OW 50
// result := result ^ un ;
24610: LD_ADDR_VAR 0 7
24614: PUSH
24615: LD_VAR 0 7
24619: PUSH
24620: LD_VAR 0 14
24624: ADD
24625: ST_TO_ADDR
// end ;
24626: GO 24504
24628: POP
24629: POP
// end ; end ;
24630: LD_VAR 0 7
24634: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24635: LD_INT 0
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
24650: PPUSH
24651: PPUSH
24652: PPUSH
// result := false ;
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_INT 0
24660: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24661: LD_VAR 0 1
24665: NOT
24666: PUSH
24667: LD_VAR 0 1
24671: PPUSH
24672: CALL_OW 266
24676: PUSH
24677: LD_INT 32
24679: PUSH
24680: LD_INT 33
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: IN
24687: NOT
24688: OR
24689: IFFALSE 24693
// exit ;
24691: GO 25802
// nat := GetNation ( tower ) ;
24693: LD_ADDR_VAR 0 12
24697: PUSH
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 248
24707: ST_TO_ADDR
// side := GetSide ( tower ) ;
24708: LD_ADDR_VAR 0 16
24712: PUSH
24713: LD_VAR 0 1
24717: PPUSH
24718: CALL_OW 255
24722: ST_TO_ADDR
// x := GetX ( tower ) ;
24723: LD_ADDR_VAR 0 10
24727: PUSH
24728: LD_VAR 0 1
24732: PPUSH
24733: CALL_OW 250
24737: ST_TO_ADDR
// y := GetY ( tower ) ;
24738: LD_ADDR_VAR 0 11
24742: PUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 251
24752: ST_TO_ADDR
// if not x or not y then
24753: LD_VAR 0 10
24757: NOT
24758: PUSH
24759: LD_VAR 0 11
24763: NOT
24764: OR
24765: IFFALSE 24769
// exit ;
24767: GO 25802
// weapon := 0 ;
24769: LD_ADDR_VAR 0 18
24773: PUSH
24774: LD_INT 0
24776: ST_TO_ADDR
// fac_list := [ ] ;
24777: LD_ADDR_VAR 0 17
24781: PUSH
24782: EMPTY
24783: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
24784: LD_ADDR_VAR 0 6
24788: PUSH
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL_OW 274
24798: PPUSH
24799: LD_VAR 0 2
24803: PPUSH
24804: LD_INT 0
24806: PPUSH
24807: CALL 22373 0 3
24811: PPUSH
24812: LD_INT 30
24814: PUSH
24815: LD_INT 3
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 72
24826: ST_TO_ADDR
// if not factories then
24827: LD_VAR 0 6
24831: NOT
24832: IFFALSE 24836
// exit ;
24834: GO 25802
// for i in factories do
24836: LD_ADDR_VAR 0 8
24840: PUSH
24841: LD_VAR 0 6
24845: PUSH
24846: FOR_IN
24847: IFFALSE 24872
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24849: LD_ADDR_VAR 0 17
24853: PUSH
24854: LD_VAR 0 17
24858: PUSH
24859: LD_VAR 0 8
24863: PPUSH
24864: CALL_OW 478
24868: UNION
24869: ST_TO_ADDR
24870: GO 24846
24872: POP
24873: POP
// if not fac_list then
24874: LD_VAR 0 17
24878: NOT
24879: IFFALSE 24883
// exit ;
24881: GO 25802
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24883: LD_ADDR_VAR 0 5
24887: PUSH
24888: LD_INT 4
24890: PUSH
24891: LD_INT 5
24893: PUSH
24894: LD_INT 9
24896: PUSH
24897: LD_INT 10
24899: PUSH
24900: LD_INT 6
24902: PUSH
24903: LD_INT 7
24905: PUSH
24906: LD_INT 11
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 27
24920: PUSH
24921: LD_INT 28
24923: PUSH
24924: LD_INT 26
24926: PUSH
24927: LD_INT 30
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 43
24938: PUSH
24939: LD_INT 44
24941: PUSH
24942: LD_INT 46
24944: PUSH
24945: LD_INT 45
24947: PUSH
24948: LD_INT 47
24950: PUSH
24951: LD_INT 49
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: PUSH
24967: LD_VAR 0 12
24971: ARRAY
24972: ST_TO_ADDR
// list := list isect fac_list ;
24973: LD_ADDR_VAR 0 5
24977: PUSH
24978: LD_VAR 0 5
24982: PUSH
24983: LD_VAR 0 17
24987: ISECT
24988: ST_TO_ADDR
// if not list then
24989: LD_VAR 0 5
24993: NOT
24994: IFFALSE 24998
// exit ;
24996: GO 25802
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24998: LD_VAR 0 12
25002: PUSH
25003: LD_INT 3
25005: EQUAL
25006: PUSH
25007: LD_INT 49
25009: PUSH
25010: LD_VAR 0 5
25014: IN
25015: AND
25016: PUSH
25017: LD_INT 31
25019: PPUSH
25020: LD_VAR 0 16
25024: PPUSH
25025: CALL_OW 321
25029: PUSH
25030: LD_INT 2
25032: EQUAL
25033: AND
25034: IFFALSE 25094
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25036: LD_INT 22
25038: PUSH
25039: LD_VAR 0 16
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 35
25050: PUSH
25051: LD_INT 49
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 91
25060: PUSH
25061: LD_VAR 0 1
25065: PUSH
25066: LD_INT 10
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: LIST
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: LIST
25078: PPUSH
25079: CALL_OW 69
25083: NOT
25084: IFFALSE 25094
// weapon := ru_time_lapser ;
25086: LD_ADDR_VAR 0 18
25090: PUSH
25091: LD_INT 49
25093: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25094: LD_VAR 0 12
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: LD_INT 2
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: IN
25109: PUSH
25110: LD_INT 11
25112: PUSH
25113: LD_VAR 0 5
25117: IN
25118: PUSH
25119: LD_INT 30
25121: PUSH
25122: LD_VAR 0 5
25126: IN
25127: OR
25128: AND
25129: PUSH
25130: LD_INT 6
25132: PPUSH
25133: LD_VAR 0 16
25137: PPUSH
25138: CALL_OW 321
25142: PUSH
25143: LD_INT 2
25145: EQUAL
25146: AND
25147: IFFALSE 25312
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25149: LD_INT 22
25151: PUSH
25152: LD_VAR 0 16
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 35
25166: PUSH
25167: LD_INT 11
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 35
25176: PUSH
25177: LD_INT 30
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 91
25191: PUSH
25192: LD_VAR 0 1
25196: PUSH
25197: LD_INT 18
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: LIST
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: PPUSH
25210: CALL_OW 69
25214: NOT
25215: PUSH
25216: LD_INT 22
25218: PUSH
25219: LD_VAR 0 16
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: LD_INT 30
25233: PUSH
25234: LD_INT 32
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 30
25243: PUSH
25244: LD_INT 33
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 91
25258: PUSH
25259: LD_VAR 0 1
25263: PUSH
25264: LD_INT 12
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: LIST
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: LIST
25276: PUSH
25277: EMPTY
25278: LIST
25279: PPUSH
25280: CALL_OW 69
25284: PUSH
25285: LD_INT 2
25287: GREATER
25288: AND
25289: IFFALSE 25312
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25291: LD_ADDR_VAR 0 18
25295: PUSH
25296: LD_INT 11
25298: PUSH
25299: LD_INT 30
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_VAR 0 12
25310: ARRAY
25311: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25312: LD_VAR 0 18
25316: NOT
25317: PUSH
25318: LD_INT 40
25320: PPUSH
25321: LD_VAR 0 16
25325: PPUSH
25326: CALL_OW 321
25330: PUSH
25331: LD_INT 2
25333: EQUAL
25334: AND
25335: PUSH
25336: LD_INT 7
25338: PUSH
25339: LD_VAR 0 5
25343: IN
25344: PUSH
25345: LD_INT 28
25347: PUSH
25348: LD_VAR 0 5
25352: IN
25353: OR
25354: PUSH
25355: LD_INT 45
25357: PUSH
25358: LD_VAR 0 5
25362: IN
25363: OR
25364: AND
25365: IFFALSE 25619
// begin hex := GetHexInfo ( x , y ) ;
25367: LD_ADDR_VAR 0 4
25371: PUSH
25372: LD_VAR 0 10
25376: PPUSH
25377: LD_VAR 0 11
25381: PPUSH
25382: CALL_OW 546
25386: ST_TO_ADDR
// if hex [ 1 ] then
25387: LD_VAR 0 4
25391: PUSH
25392: LD_INT 1
25394: ARRAY
25395: IFFALSE 25399
// exit ;
25397: GO 25802
// height := hex [ 2 ] ;
25399: LD_ADDR_VAR 0 15
25403: PUSH
25404: LD_VAR 0 4
25408: PUSH
25409: LD_INT 2
25411: ARRAY
25412: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25413: LD_ADDR_VAR 0 14
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 2
25423: PUSH
25424: LD_INT 3
25426: PUSH
25427: LD_INT 5
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: ST_TO_ADDR
// for i in tmp do
25436: LD_ADDR_VAR 0 8
25440: PUSH
25441: LD_VAR 0 14
25445: PUSH
25446: FOR_IN
25447: IFFALSE 25617
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25449: LD_ADDR_VAR 0 9
25453: PUSH
25454: LD_VAR 0 10
25458: PPUSH
25459: LD_VAR 0 8
25463: PPUSH
25464: LD_INT 5
25466: PPUSH
25467: CALL_OW 272
25471: PUSH
25472: LD_VAR 0 11
25476: PPUSH
25477: LD_VAR 0 8
25481: PPUSH
25482: LD_INT 5
25484: PPUSH
25485: CALL_OW 273
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25494: LD_VAR 0 9
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: PPUSH
25503: LD_VAR 0 9
25507: PUSH
25508: LD_INT 2
25510: ARRAY
25511: PPUSH
25512: CALL_OW 488
25516: IFFALSE 25615
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25518: LD_ADDR_VAR 0 4
25522: PUSH
25523: LD_VAR 0 9
25527: PUSH
25528: LD_INT 1
25530: ARRAY
25531: PPUSH
25532: LD_VAR 0 9
25536: PUSH
25537: LD_INT 2
25539: ARRAY
25540: PPUSH
25541: CALL_OW 546
25545: ST_TO_ADDR
// if hex [ 1 ] then
25546: LD_VAR 0 4
25550: PUSH
25551: LD_INT 1
25553: ARRAY
25554: IFFALSE 25558
// continue ;
25556: GO 25446
// h := hex [ 2 ] ;
25558: LD_ADDR_VAR 0 13
25562: PUSH
25563: LD_VAR 0 4
25567: PUSH
25568: LD_INT 2
25570: ARRAY
25571: ST_TO_ADDR
// if h + 7 < height then
25572: LD_VAR 0 13
25576: PUSH
25577: LD_INT 7
25579: PLUS
25580: PUSH
25581: LD_VAR 0 15
25585: LESS
25586: IFFALSE 25615
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25588: LD_ADDR_VAR 0 18
25592: PUSH
25593: LD_INT 7
25595: PUSH
25596: LD_INT 28
25598: PUSH
25599: LD_INT 45
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: LIST
25606: PUSH
25607: LD_VAR 0 12
25611: ARRAY
25612: ST_TO_ADDR
// break ;
25613: GO 25617
// end ; end ; end ;
25615: GO 25446
25617: POP
25618: POP
// end ; if not weapon then
25619: LD_VAR 0 18
25623: NOT
25624: IFFALSE 25684
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25626: LD_ADDR_VAR 0 5
25630: PUSH
25631: LD_VAR 0 5
25635: PUSH
25636: LD_INT 11
25638: PUSH
25639: LD_INT 30
25641: PUSH
25642: LD_INT 49
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: DIFF
25650: ST_TO_ADDR
// if not list then
25651: LD_VAR 0 5
25655: NOT
25656: IFFALSE 25660
// exit ;
25658: GO 25802
// weapon := list [ rand ( 1 , list ) ] ;
25660: LD_ADDR_VAR 0 18
25664: PUSH
25665: LD_VAR 0 5
25669: PUSH
25670: LD_INT 1
25672: PPUSH
25673: LD_VAR 0 5
25677: PPUSH
25678: CALL_OW 12
25682: ARRAY
25683: ST_TO_ADDR
// end ; if weapon then
25684: LD_VAR 0 18
25688: IFFALSE 25802
// begin tmp := CostOfWeapon ( weapon ) ;
25690: LD_ADDR_VAR 0 14
25694: PUSH
25695: LD_VAR 0 18
25699: PPUSH
25700: CALL_OW 451
25704: ST_TO_ADDR
// j := GetBase ( tower ) ;
25705: LD_ADDR_VAR 0 9
25709: PUSH
25710: LD_VAR 0 1
25714: PPUSH
25715: CALL_OW 274
25719: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25720: LD_VAR 0 9
25724: PPUSH
25725: LD_INT 1
25727: PPUSH
25728: CALL_OW 275
25732: PUSH
25733: LD_VAR 0 14
25737: PUSH
25738: LD_INT 1
25740: ARRAY
25741: GREATEREQUAL
25742: PUSH
25743: LD_VAR 0 9
25747: PPUSH
25748: LD_INT 2
25750: PPUSH
25751: CALL_OW 275
25755: PUSH
25756: LD_VAR 0 14
25760: PUSH
25761: LD_INT 2
25763: ARRAY
25764: GREATEREQUAL
25765: AND
25766: PUSH
25767: LD_VAR 0 9
25771: PPUSH
25772: LD_INT 3
25774: PPUSH
25775: CALL_OW 275
25779: PUSH
25780: LD_VAR 0 14
25784: PUSH
25785: LD_INT 3
25787: ARRAY
25788: GREATEREQUAL
25789: AND
25790: IFFALSE 25802
// result := weapon ;
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_VAR 0 18
25801: ST_TO_ADDR
// end ; end ;
25802: LD_VAR 0 3
25806: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
// result := true ;
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_INT 1
25818: ST_TO_ADDR
// if array1 = array2 then
25819: LD_VAR 0 1
25823: PUSH
25824: LD_VAR 0 2
25828: EQUAL
25829: IFFALSE 25889
// begin for i = 1 to array1 do
25831: LD_ADDR_VAR 0 4
25835: PUSH
25836: DOUBLE
25837: LD_INT 1
25839: DEC
25840: ST_TO_ADDR
25841: LD_VAR 0 1
25845: PUSH
25846: FOR_TO
25847: IFFALSE 25885
// if array1 [ i ] <> array2 [ i ] then
25849: LD_VAR 0 1
25853: PUSH
25854: LD_VAR 0 4
25858: ARRAY
25859: PUSH
25860: LD_VAR 0 2
25864: PUSH
25865: LD_VAR 0 4
25869: ARRAY
25870: NONEQUAL
25871: IFFALSE 25883
// begin result := false ;
25873: LD_ADDR_VAR 0 3
25877: PUSH
25878: LD_INT 0
25880: ST_TO_ADDR
// break ;
25881: GO 25885
// end ;
25883: GO 25846
25885: POP
25886: POP
// end else
25887: GO 25897
// result := false ;
25889: LD_ADDR_VAR 0 3
25893: PUSH
25894: LD_INT 0
25896: ST_TO_ADDR
// end ;
25897: LD_VAR 0 3
25901: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
25902: LD_INT 0
25904: PPUSH
25905: PPUSH
// if not array1 or not array2 then
25906: LD_VAR 0 1
25910: NOT
25911: PUSH
25912: LD_VAR 0 2
25916: NOT
25917: OR
25918: IFFALSE 25922
// exit ;
25920: GO 25986
// result := true ;
25922: LD_ADDR_VAR 0 3
25926: PUSH
25927: LD_INT 1
25929: ST_TO_ADDR
// for i = 1 to array1 do
25930: LD_ADDR_VAR 0 4
25934: PUSH
25935: DOUBLE
25936: LD_INT 1
25938: DEC
25939: ST_TO_ADDR
25940: LD_VAR 0 1
25944: PUSH
25945: FOR_TO
25946: IFFALSE 25984
// if array1 [ i ] <> array2 [ i ] then
25948: LD_VAR 0 1
25952: PUSH
25953: LD_VAR 0 4
25957: ARRAY
25958: PUSH
25959: LD_VAR 0 2
25963: PUSH
25964: LD_VAR 0 4
25968: ARRAY
25969: NONEQUAL
25970: IFFALSE 25982
// begin result := false ;
25972: LD_ADDR_VAR 0 3
25976: PUSH
25977: LD_INT 0
25979: ST_TO_ADDR
// break ;
25980: GO 25984
// end ;
25982: GO 25945
25984: POP
25985: POP
// end ;
25986: LD_VAR 0 3
25990: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25991: LD_INT 0
25993: PPUSH
25994: PPUSH
25995: PPUSH
// pom := GetBase ( fac ) ;
25996: LD_ADDR_VAR 0 5
26000: PUSH
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 274
26010: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26011: LD_ADDR_VAR 0 4
26015: PUSH
26016: LD_VAR 0 2
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: PPUSH
26025: LD_VAR 0 2
26029: PUSH
26030: LD_INT 2
26032: ARRAY
26033: PPUSH
26034: LD_VAR 0 2
26038: PUSH
26039: LD_INT 3
26041: ARRAY
26042: PPUSH
26043: LD_VAR 0 2
26047: PUSH
26048: LD_INT 4
26050: ARRAY
26051: PPUSH
26052: CALL_OW 449
26056: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26057: LD_ADDR_VAR 0 3
26061: PUSH
26062: LD_VAR 0 5
26066: PPUSH
26067: LD_INT 1
26069: PPUSH
26070: CALL_OW 275
26074: PUSH
26075: LD_VAR 0 4
26079: PUSH
26080: LD_INT 1
26082: ARRAY
26083: GREATEREQUAL
26084: PUSH
26085: LD_VAR 0 5
26089: PPUSH
26090: LD_INT 2
26092: PPUSH
26093: CALL_OW 275
26097: PUSH
26098: LD_VAR 0 4
26102: PUSH
26103: LD_INT 2
26105: ARRAY
26106: GREATEREQUAL
26107: AND
26108: PUSH
26109: LD_VAR 0 5
26113: PPUSH
26114: LD_INT 3
26116: PPUSH
26117: CALL_OW 275
26121: PUSH
26122: LD_VAR 0 4
26126: PUSH
26127: LD_INT 3
26129: ARRAY
26130: GREATEREQUAL
26131: AND
26132: ST_TO_ADDR
// end ;
26133: LD_VAR 0 3
26137: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26138: LD_INT 0
26140: PPUSH
26141: PPUSH
26142: PPUSH
26143: PPUSH
// pom := GetBase ( building ) ;
26144: LD_ADDR_VAR 0 3
26148: PUSH
26149: LD_VAR 0 1
26153: PPUSH
26154: CALL_OW 274
26158: ST_TO_ADDR
// if not pom then
26159: LD_VAR 0 3
26163: NOT
26164: IFFALSE 26168
// exit ;
26166: GO 26338
// btype := GetBType ( building ) ;
26168: LD_ADDR_VAR 0 5
26172: PUSH
26173: LD_VAR 0 1
26177: PPUSH
26178: CALL_OW 266
26182: ST_TO_ADDR
// if btype = b_armoury then
26183: LD_VAR 0 5
26187: PUSH
26188: LD_INT 4
26190: EQUAL
26191: IFFALSE 26201
// btype := b_barracks ;
26193: LD_ADDR_VAR 0 5
26197: PUSH
26198: LD_INT 5
26200: ST_TO_ADDR
// if btype = b_depot then
26201: LD_VAR 0 5
26205: PUSH
26206: LD_INT 0
26208: EQUAL
26209: IFFALSE 26219
// btype := b_warehouse ;
26211: LD_ADDR_VAR 0 5
26215: PUSH
26216: LD_INT 1
26218: ST_TO_ADDR
// if btype = b_workshop then
26219: LD_VAR 0 5
26223: PUSH
26224: LD_INT 2
26226: EQUAL
26227: IFFALSE 26237
// btype := b_factory ;
26229: LD_ADDR_VAR 0 5
26233: PUSH
26234: LD_INT 3
26236: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26237: LD_ADDR_VAR 0 4
26241: PUSH
26242: LD_VAR 0 5
26246: PPUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 248
26256: PPUSH
26257: CALL_OW 450
26261: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26262: LD_ADDR_VAR 0 2
26266: PUSH
26267: LD_VAR 0 3
26271: PPUSH
26272: LD_INT 1
26274: PPUSH
26275: CALL_OW 275
26279: PUSH
26280: LD_VAR 0 4
26284: PUSH
26285: LD_INT 1
26287: ARRAY
26288: GREATEREQUAL
26289: PUSH
26290: LD_VAR 0 3
26294: PPUSH
26295: LD_INT 2
26297: PPUSH
26298: CALL_OW 275
26302: PUSH
26303: LD_VAR 0 4
26307: PUSH
26308: LD_INT 2
26310: ARRAY
26311: GREATEREQUAL
26312: AND
26313: PUSH
26314: LD_VAR 0 3
26318: PPUSH
26319: LD_INT 3
26321: PPUSH
26322: CALL_OW 275
26326: PUSH
26327: LD_VAR 0 4
26331: PUSH
26332: LD_INT 3
26334: ARRAY
26335: GREATEREQUAL
26336: AND
26337: ST_TO_ADDR
// end ;
26338: LD_VAR 0 2
26342: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26343: LD_INT 0
26345: PPUSH
26346: PPUSH
26347: PPUSH
// pom := GetBase ( building ) ;
26348: LD_ADDR_VAR 0 4
26352: PUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 274
26362: ST_TO_ADDR
// if not pom then
26363: LD_VAR 0 4
26367: NOT
26368: IFFALSE 26372
// exit ;
26370: GO 26473
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26372: LD_ADDR_VAR 0 5
26376: PUSH
26377: LD_VAR 0 2
26381: PPUSH
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL_OW 248
26391: PPUSH
26392: CALL_OW 450
26396: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26397: LD_ADDR_VAR 0 3
26401: PUSH
26402: LD_VAR 0 4
26406: PPUSH
26407: LD_INT 1
26409: PPUSH
26410: CALL_OW 275
26414: PUSH
26415: LD_VAR 0 5
26419: PUSH
26420: LD_INT 1
26422: ARRAY
26423: GREATEREQUAL
26424: PUSH
26425: LD_VAR 0 4
26429: PPUSH
26430: LD_INT 2
26432: PPUSH
26433: CALL_OW 275
26437: PUSH
26438: LD_VAR 0 5
26442: PUSH
26443: LD_INT 2
26445: ARRAY
26446: GREATEREQUAL
26447: AND
26448: PUSH
26449: LD_VAR 0 4
26453: PPUSH
26454: LD_INT 3
26456: PPUSH
26457: CALL_OW 275
26461: PUSH
26462: LD_VAR 0 5
26466: PUSH
26467: LD_INT 3
26469: ARRAY
26470: GREATEREQUAL
26471: AND
26472: ST_TO_ADDR
// end ;
26473: LD_VAR 0 3
26477: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
26478: LD_INT 0
26480: PPUSH
26481: PPUSH
26482: PPUSH
26483: PPUSH
26484: PPUSH
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
26490: PPUSH
// result := false ;
26491: LD_ADDR_VAR 0 8
26495: PUSH
26496: LD_INT 0
26498: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
26499: LD_VAR 0 5
26503: NOT
26504: PUSH
26505: LD_VAR 0 1
26509: NOT
26510: OR
26511: PUSH
26512: LD_VAR 0 2
26516: NOT
26517: OR
26518: PUSH
26519: LD_VAR 0 3
26523: NOT
26524: OR
26525: IFFALSE 26529
// exit ;
26527: GO 27343
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
26529: LD_ADDR_VAR 0 14
26533: PUSH
26534: LD_VAR 0 1
26538: PPUSH
26539: LD_VAR 0 2
26543: PPUSH
26544: LD_VAR 0 3
26548: PPUSH
26549: LD_VAR 0 4
26553: PPUSH
26554: LD_VAR 0 5
26558: PUSH
26559: LD_INT 1
26561: ARRAY
26562: PPUSH
26563: CALL_OW 248
26567: PPUSH
26568: LD_INT 0
26570: PPUSH
26571: CALL 28576 0 6
26575: ST_TO_ADDR
// if not hexes then
26576: LD_VAR 0 14
26580: NOT
26581: IFFALSE 26585
// exit ;
26583: GO 27343
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26585: LD_ADDR_VAR 0 17
26589: PUSH
26590: LD_VAR 0 5
26594: PPUSH
26595: LD_INT 22
26597: PUSH
26598: LD_VAR 0 13
26602: PPUSH
26603: CALL_OW 255
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: LD_INT 30
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 30
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PPUSH
26644: CALL_OW 72
26648: ST_TO_ADDR
// for i = 1 to hexes do
26649: LD_ADDR_VAR 0 9
26653: PUSH
26654: DOUBLE
26655: LD_INT 1
26657: DEC
26658: ST_TO_ADDR
26659: LD_VAR 0 14
26663: PUSH
26664: FOR_TO
26665: IFFALSE 27341
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26667: LD_ADDR_VAR 0 13
26671: PUSH
26672: LD_VAR 0 14
26676: PUSH
26677: LD_VAR 0 9
26681: ARRAY
26682: PUSH
26683: LD_INT 1
26685: ARRAY
26686: PPUSH
26687: LD_VAR 0 14
26691: PUSH
26692: LD_VAR 0 9
26696: ARRAY
26697: PUSH
26698: LD_INT 2
26700: ARRAY
26701: PPUSH
26702: CALL_OW 428
26706: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
26707: LD_VAR 0 14
26711: PUSH
26712: LD_VAR 0 9
26716: ARRAY
26717: PUSH
26718: LD_INT 1
26720: ARRAY
26721: PPUSH
26722: LD_VAR 0 14
26726: PUSH
26727: LD_VAR 0 9
26731: ARRAY
26732: PUSH
26733: LD_INT 2
26735: ARRAY
26736: PPUSH
26737: CALL_OW 351
26741: PUSH
26742: LD_VAR 0 14
26746: PUSH
26747: LD_VAR 0 9
26751: ARRAY
26752: PUSH
26753: LD_INT 1
26755: ARRAY
26756: PPUSH
26757: LD_VAR 0 14
26761: PUSH
26762: LD_VAR 0 9
26766: ARRAY
26767: PUSH
26768: LD_INT 2
26770: ARRAY
26771: PPUSH
26772: CALL_OW 488
26776: NOT
26777: OR
26778: PUSH
26779: LD_VAR 0 13
26783: PPUSH
26784: CALL_OW 247
26788: PUSH
26789: LD_INT 3
26791: EQUAL
26792: OR
26793: IFFALSE 26799
// exit ;
26795: POP
26796: POP
26797: GO 27343
// if not tmp then
26799: LD_VAR 0 13
26803: NOT
26804: IFFALSE 26808
// continue ;
26806: GO 26664
// result := true ;
26808: LD_ADDR_VAR 0 8
26812: PUSH
26813: LD_INT 1
26815: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
26816: LD_VAR 0 6
26820: PUSH
26821: LD_VAR 0 13
26825: PPUSH
26826: CALL_OW 247
26830: PUSH
26831: LD_INT 2
26833: EQUAL
26834: AND
26835: PUSH
26836: LD_VAR 0 13
26840: PPUSH
26841: CALL_OW 263
26845: PUSH
26846: LD_INT 1
26848: EQUAL
26849: AND
26850: IFFALSE 27014
// begin if IsDrivenBy ( tmp ) then
26852: LD_VAR 0 13
26856: PPUSH
26857: CALL_OW 311
26861: IFFALSE 26865
// continue ;
26863: GO 26664
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
26865: LD_VAR 0 6
26869: PPUSH
26870: LD_INT 3
26872: PUSH
26873: LD_INT 60
26875: PUSH
26876: EMPTY
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 3
26885: PUSH
26886: LD_INT 55
26888: PUSH
26889: EMPTY
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PPUSH
26900: CALL_OW 72
26904: IFFALSE 27012
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
26906: LD_ADDR_VAR 0 18
26910: PUSH
26911: LD_VAR 0 6
26915: PPUSH
26916: LD_INT 3
26918: PUSH
26919: LD_INT 60
26921: PUSH
26922: EMPTY
26923: LIST
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: LD_INT 55
26934: PUSH
26935: EMPTY
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PPUSH
26946: CALL_OW 72
26950: PUSH
26951: LD_INT 1
26953: ARRAY
26954: ST_TO_ADDR
// if IsInUnit ( driver ) then
26955: LD_VAR 0 18
26959: PPUSH
26960: CALL_OW 310
26964: IFFALSE 26975
// ComExit ( driver ) ;
26966: LD_VAR 0 18
26970: PPUSH
26971: CALL 52264 0 1
// AddComEnterUnit ( driver , tmp ) ;
26975: LD_VAR 0 18
26979: PPUSH
26980: LD_VAR 0 13
26984: PPUSH
26985: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
26989: LD_VAR 0 18
26993: PPUSH
26994: LD_VAR 0 7
26998: PPUSH
26999: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27003: LD_VAR 0 18
27007: PPUSH
27008: CALL_OW 181
// end ; continue ;
27012: GO 26664
// end ; if not cleaners or not tmp in cleaners then
27014: LD_VAR 0 6
27018: NOT
27019: PUSH
27020: LD_VAR 0 13
27024: PUSH
27025: LD_VAR 0 6
27029: IN
27030: NOT
27031: OR
27032: IFFALSE 27339
// begin if dep then
27034: LD_VAR 0 17
27038: IFFALSE 27174
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27040: LD_ADDR_VAR 0 16
27044: PUSH
27045: LD_VAR 0 17
27049: PUSH
27050: LD_INT 1
27052: ARRAY
27053: PPUSH
27054: CALL_OW 250
27058: PPUSH
27059: LD_VAR 0 17
27063: PUSH
27064: LD_INT 1
27066: ARRAY
27067: PPUSH
27068: CALL_OW 254
27072: PPUSH
27073: LD_INT 5
27075: PPUSH
27076: CALL_OW 272
27080: PUSH
27081: LD_VAR 0 17
27085: PUSH
27086: LD_INT 1
27088: ARRAY
27089: PPUSH
27090: CALL_OW 251
27094: PPUSH
27095: LD_VAR 0 17
27099: PUSH
27100: LD_INT 1
27102: ARRAY
27103: PPUSH
27104: CALL_OW 254
27108: PPUSH
27109: LD_INT 5
27111: PPUSH
27112: CALL_OW 273
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27121: LD_VAR 0 16
27125: PUSH
27126: LD_INT 1
27128: ARRAY
27129: PPUSH
27130: LD_VAR 0 16
27134: PUSH
27135: LD_INT 2
27137: ARRAY
27138: PPUSH
27139: CALL_OW 488
27143: IFFALSE 27174
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27145: LD_VAR 0 13
27149: PPUSH
27150: LD_VAR 0 16
27154: PUSH
27155: LD_INT 1
27157: ARRAY
27158: PPUSH
27159: LD_VAR 0 16
27163: PUSH
27164: LD_INT 2
27166: ARRAY
27167: PPUSH
27168: CALL_OW 111
// continue ;
27172: GO 26664
// end ; end ; r := GetDir ( tmp ) ;
27174: LD_ADDR_VAR 0 15
27178: PUSH
27179: LD_VAR 0 13
27183: PPUSH
27184: CALL_OW 254
27188: ST_TO_ADDR
// if r = 5 then
27189: LD_VAR 0 15
27193: PUSH
27194: LD_INT 5
27196: EQUAL
27197: IFFALSE 27207
// r := 0 ;
27199: LD_ADDR_VAR 0 15
27203: PUSH
27204: LD_INT 0
27206: ST_TO_ADDR
// for j = r to 5 do
27207: LD_ADDR_VAR 0 10
27211: PUSH
27212: DOUBLE
27213: LD_VAR 0 15
27217: DEC
27218: ST_TO_ADDR
27219: LD_INT 5
27221: PUSH
27222: FOR_TO
27223: IFFALSE 27337
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27225: LD_ADDR_VAR 0 11
27229: PUSH
27230: LD_VAR 0 13
27234: PPUSH
27235: CALL_OW 250
27239: PPUSH
27240: LD_VAR 0 10
27244: PPUSH
27245: LD_INT 2
27247: PPUSH
27248: CALL_OW 272
27252: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27253: LD_ADDR_VAR 0 12
27257: PUSH
27258: LD_VAR 0 13
27262: PPUSH
27263: CALL_OW 251
27267: PPUSH
27268: LD_VAR 0 10
27272: PPUSH
27273: LD_INT 2
27275: PPUSH
27276: CALL_OW 273
27280: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27281: LD_VAR 0 11
27285: PPUSH
27286: LD_VAR 0 12
27290: PPUSH
27291: CALL_OW 488
27295: PUSH
27296: LD_VAR 0 11
27300: PPUSH
27301: LD_VAR 0 12
27305: PPUSH
27306: CALL_OW 428
27310: NOT
27311: AND
27312: IFFALSE 27335
// begin ComMoveXY ( tmp , _x , _y ) ;
27314: LD_VAR 0 13
27318: PPUSH
27319: LD_VAR 0 11
27323: PPUSH
27324: LD_VAR 0 12
27328: PPUSH
27329: CALL_OW 111
// break ;
27333: GO 27337
// end ; end ;
27335: GO 27222
27337: POP
27338: POP
// end ; end ;
27339: GO 26664
27341: POP
27342: POP
// end ;
27343: LD_VAR 0 8
27347: RET
// export function BuildingTechInvented ( side , btype ) ; begin
27348: LD_INT 0
27350: PPUSH
// result := true ;
27351: LD_ADDR_VAR 0 3
27355: PUSH
27356: LD_INT 1
27358: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
27359: LD_VAR 0 2
27363: PUSH
27364: LD_INT 24
27366: DOUBLE
27367: EQUAL
27368: IFTRUE 27378
27370: LD_INT 33
27372: DOUBLE
27373: EQUAL
27374: IFTRUE 27378
27376: GO 27403
27378: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
27379: LD_ADDR_VAR 0 3
27383: PUSH
27384: LD_INT 32
27386: PPUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 321
27396: PUSH
27397: LD_INT 2
27399: EQUAL
27400: ST_TO_ADDR
27401: GO 27719
27403: LD_INT 20
27405: DOUBLE
27406: EQUAL
27407: IFTRUE 27411
27409: GO 27436
27411: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
27412: LD_ADDR_VAR 0 3
27416: PUSH
27417: LD_INT 6
27419: PPUSH
27420: LD_VAR 0 1
27424: PPUSH
27425: CALL_OW 321
27429: PUSH
27430: LD_INT 2
27432: EQUAL
27433: ST_TO_ADDR
27434: GO 27719
27436: LD_INT 22
27438: DOUBLE
27439: EQUAL
27440: IFTRUE 27450
27442: LD_INT 36
27444: DOUBLE
27445: EQUAL
27446: IFTRUE 27450
27448: GO 27475
27450: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: LD_INT 15
27458: PPUSH
27459: LD_VAR 0 1
27463: PPUSH
27464: CALL_OW 321
27468: PUSH
27469: LD_INT 2
27471: EQUAL
27472: ST_TO_ADDR
27473: GO 27719
27475: LD_INT 30
27477: DOUBLE
27478: EQUAL
27479: IFTRUE 27483
27481: GO 27508
27483: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
27484: LD_ADDR_VAR 0 3
27488: PUSH
27489: LD_INT 20
27491: PPUSH
27492: LD_VAR 0 1
27496: PPUSH
27497: CALL_OW 321
27501: PUSH
27502: LD_INT 2
27504: EQUAL
27505: ST_TO_ADDR
27506: GO 27719
27508: LD_INT 28
27510: DOUBLE
27511: EQUAL
27512: IFTRUE 27522
27514: LD_INT 21
27516: DOUBLE
27517: EQUAL
27518: IFTRUE 27522
27520: GO 27547
27522: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
27523: LD_ADDR_VAR 0 3
27527: PUSH
27528: LD_INT 21
27530: PPUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 321
27540: PUSH
27541: LD_INT 2
27543: EQUAL
27544: ST_TO_ADDR
27545: GO 27719
27547: LD_INT 16
27549: DOUBLE
27550: EQUAL
27551: IFTRUE 27555
27553: GO 27580
27555: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
27556: LD_ADDR_VAR 0 3
27560: PUSH
27561: LD_INT 84
27563: PPUSH
27564: LD_VAR 0 1
27568: PPUSH
27569: CALL_OW 321
27573: PUSH
27574: LD_INT 2
27576: EQUAL
27577: ST_TO_ADDR
27578: GO 27719
27580: LD_INT 19
27582: DOUBLE
27583: EQUAL
27584: IFTRUE 27594
27586: LD_INT 23
27588: DOUBLE
27589: EQUAL
27590: IFTRUE 27594
27592: GO 27619
27594: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
27595: LD_ADDR_VAR 0 3
27599: PUSH
27600: LD_INT 83
27602: PPUSH
27603: LD_VAR 0 1
27607: PPUSH
27608: CALL_OW 321
27612: PUSH
27613: LD_INT 2
27615: EQUAL
27616: ST_TO_ADDR
27617: GO 27719
27619: LD_INT 17
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27627
27625: GO 27652
27627: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
27628: LD_ADDR_VAR 0 3
27632: PUSH
27633: LD_INT 39
27635: PPUSH
27636: LD_VAR 0 1
27640: PPUSH
27641: CALL_OW 321
27645: PUSH
27646: LD_INT 2
27648: EQUAL
27649: ST_TO_ADDR
27650: GO 27719
27652: LD_INT 18
27654: DOUBLE
27655: EQUAL
27656: IFTRUE 27660
27658: GO 27685
27660: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
27661: LD_ADDR_VAR 0 3
27665: PUSH
27666: LD_INT 40
27668: PPUSH
27669: LD_VAR 0 1
27673: PPUSH
27674: CALL_OW 321
27678: PUSH
27679: LD_INT 2
27681: EQUAL
27682: ST_TO_ADDR
27683: GO 27719
27685: LD_INT 27
27687: DOUBLE
27688: EQUAL
27689: IFTRUE 27693
27691: GO 27718
27693: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
27694: LD_ADDR_VAR 0 3
27698: PUSH
27699: LD_INT 35
27701: PPUSH
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL_OW 321
27711: PUSH
27712: LD_INT 2
27714: EQUAL
27715: ST_TO_ADDR
27716: GO 27719
27718: POP
// end ;
27719: LD_VAR 0 3
27723: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
27724: LD_INT 0
27726: PPUSH
27727: PPUSH
27728: PPUSH
27729: PPUSH
27730: PPUSH
27731: PPUSH
27732: PPUSH
27733: PPUSH
27734: PPUSH
27735: PPUSH
27736: PPUSH
// result := false ;
27737: LD_ADDR_VAR 0 6
27741: PUSH
27742: LD_INT 0
27744: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
27745: LD_VAR 0 1
27749: NOT
27750: PUSH
27751: LD_VAR 0 1
27755: PPUSH
27756: CALL_OW 266
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: IN
27771: NOT
27772: OR
27773: PUSH
27774: LD_VAR 0 2
27778: NOT
27779: OR
27780: PUSH
27781: LD_VAR 0 5
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: LD_INT 4
27800: PUSH
27801: LD_INT 5
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: IN
27812: NOT
27813: OR
27814: PUSH
27815: LD_VAR 0 3
27819: PPUSH
27820: LD_VAR 0 4
27824: PPUSH
27825: CALL_OW 488
27829: NOT
27830: OR
27831: IFFALSE 27835
// exit ;
27833: GO 28571
// side := GetSide ( depot ) ;
27835: LD_ADDR_VAR 0 9
27839: PUSH
27840: LD_VAR 0 1
27844: PPUSH
27845: CALL_OW 255
27849: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
27850: LD_VAR 0 9
27854: PPUSH
27855: LD_VAR 0 2
27859: PPUSH
27860: CALL 27348 0 2
27864: NOT
27865: IFFALSE 27869
// exit ;
27867: GO 28571
// pom := GetBase ( depot ) ;
27869: LD_ADDR_VAR 0 10
27873: PUSH
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL_OW 274
27883: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27884: LD_ADDR_VAR 0 11
27888: PUSH
27889: LD_VAR 0 2
27893: PPUSH
27894: LD_VAR 0 1
27898: PPUSH
27899: CALL_OW 248
27903: PPUSH
27904: CALL_OW 450
27908: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27909: LD_VAR 0 10
27913: PPUSH
27914: LD_INT 1
27916: PPUSH
27917: CALL_OW 275
27921: PUSH
27922: LD_VAR 0 11
27926: PUSH
27927: LD_INT 1
27929: ARRAY
27930: GREATEREQUAL
27931: PUSH
27932: LD_VAR 0 10
27936: PPUSH
27937: LD_INT 2
27939: PPUSH
27940: CALL_OW 275
27944: PUSH
27945: LD_VAR 0 11
27949: PUSH
27950: LD_INT 2
27952: ARRAY
27953: GREATEREQUAL
27954: AND
27955: PUSH
27956: LD_VAR 0 10
27960: PPUSH
27961: LD_INT 3
27963: PPUSH
27964: CALL_OW 275
27968: PUSH
27969: LD_VAR 0 11
27973: PUSH
27974: LD_INT 3
27976: ARRAY
27977: GREATEREQUAL
27978: AND
27979: NOT
27980: IFFALSE 27984
// exit ;
27982: GO 28571
// if GetBType ( depot ) = b_depot then
27984: LD_VAR 0 1
27988: PPUSH
27989: CALL_OW 266
27993: PUSH
27994: LD_INT 0
27996: EQUAL
27997: IFFALSE 28009
// dist := 28 else
27999: LD_ADDR_VAR 0 14
28003: PUSH
28004: LD_INT 28
28006: ST_TO_ADDR
28007: GO 28017
// dist := 36 ;
28009: LD_ADDR_VAR 0 14
28013: PUSH
28014: LD_INT 36
28016: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28017: LD_VAR 0 1
28021: PPUSH
28022: LD_VAR 0 3
28026: PPUSH
28027: LD_VAR 0 4
28031: PPUSH
28032: CALL_OW 297
28036: PUSH
28037: LD_VAR 0 14
28041: GREATER
28042: IFFALSE 28046
// exit ;
28044: GO 28571
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28046: LD_ADDR_VAR 0 12
28050: PUSH
28051: LD_VAR 0 2
28055: PPUSH
28056: LD_VAR 0 3
28060: PPUSH
28061: LD_VAR 0 4
28065: PPUSH
28066: LD_VAR 0 5
28070: PPUSH
28071: LD_VAR 0 1
28075: PPUSH
28076: CALL_OW 248
28080: PPUSH
28081: LD_INT 0
28083: PPUSH
28084: CALL 28576 0 6
28088: ST_TO_ADDR
// if not hexes then
28089: LD_VAR 0 12
28093: NOT
28094: IFFALSE 28098
// exit ;
28096: GO 28571
// hex := GetHexInfo ( x , y ) ;
28098: LD_ADDR_VAR 0 15
28102: PUSH
28103: LD_VAR 0 3
28107: PPUSH
28108: LD_VAR 0 4
28112: PPUSH
28113: CALL_OW 546
28117: ST_TO_ADDR
// if hex [ 1 ] then
28118: LD_VAR 0 15
28122: PUSH
28123: LD_INT 1
28125: ARRAY
28126: IFFALSE 28130
// exit ;
28128: GO 28571
// height := hex [ 2 ] ;
28130: LD_ADDR_VAR 0 13
28134: PUSH
28135: LD_VAR 0 15
28139: PUSH
28140: LD_INT 2
28142: ARRAY
28143: ST_TO_ADDR
// for i = 1 to hexes do
28144: LD_ADDR_VAR 0 7
28148: PUSH
28149: DOUBLE
28150: LD_INT 1
28152: DEC
28153: ST_TO_ADDR
28154: LD_VAR 0 12
28158: PUSH
28159: FOR_TO
28160: IFFALSE 28490
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28162: LD_VAR 0 12
28166: PUSH
28167: LD_VAR 0 7
28171: ARRAY
28172: PUSH
28173: LD_INT 1
28175: ARRAY
28176: PPUSH
28177: LD_VAR 0 12
28181: PUSH
28182: LD_VAR 0 7
28186: ARRAY
28187: PUSH
28188: LD_INT 2
28190: ARRAY
28191: PPUSH
28192: CALL_OW 488
28196: NOT
28197: PUSH
28198: LD_VAR 0 12
28202: PUSH
28203: LD_VAR 0 7
28207: ARRAY
28208: PUSH
28209: LD_INT 1
28211: ARRAY
28212: PPUSH
28213: LD_VAR 0 12
28217: PUSH
28218: LD_VAR 0 7
28222: ARRAY
28223: PUSH
28224: LD_INT 2
28226: ARRAY
28227: PPUSH
28228: CALL_OW 428
28232: PUSH
28233: LD_INT 0
28235: GREATER
28236: OR
28237: PUSH
28238: LD_VAR 0 12
28242: PUSH
28243: LD_VAR 0 7
28247: ARRAY
28248: PUSH
28249: LD_INT 1
28251: ARRAY
28252: PPUSH
28253: LD_VAR 0 12
28257: PUSH
28258: LD_VAR 0 7
28262: ARRAY
28263: PUSH
28264: LD_INT 2
28266: ARRAY
28267: PPUSH
28268: CALL_OW 351
28272: OR
28273: IFFALSE 28279
// exit ;
28275: POP
28276: POP
28277: GO 28571
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28279: LD_ADDR_VAR 0 8
28283: PUSH
28284: LD_VAR 0 12
28288: PUSH
28289: LD_VAR 0 7
28293: ARRAY
28294: PUSH
28295: LD_INT 1
28297: ARRAY
28298: PPUSH
28299: LD_VAR 0 12
28303: PUSH
28304: LD_VAR 0 7
28308: ARRAY
28309: PUSH
28310: LD_INT 2
28312: ARRAY
28313: PPUSH
28314: CALL_OW 546
28318: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28319: LD_VAR 0 8
28323: PUSH
28324: LD_INT 1
28326: ARRAY
28327: PUSH
28328: LD_VAR 0 8
28332: PUSH
28333: LD_INT 2
28335: ARRAY
28336: PUSH
28337: LD_VAR 0 13
28341: PUSH
28342: LD_INT 2
28344: PLUS
28345: GREATER
28346: OR
28347: PUSH
28348: LD_VAR 0 8
28352: PUSH
28353: LD_INT 2
28355: ARRAY
28356: PUSH
28357: LD_VAR 0 13
28361: PUSH
28362: LD_INT 2
28364: MINUS
28365: LESS
28366: OR
28367: PUSH
28368: LD_VAR 0 8
28372: PUSH
28373: LD_INT 3
28375: ARRAY
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: LD_INT 8
28382: PUSH
28383: LD_INT 9
28385: PUSH
28386: LD_INT 10
28388: PUSH
28389: LD_INT 11
28391: PUSH
28392: LD_INT 12
28394: PUSH
28395: LD_INT 13
28397: PUSH
28398: LD_INT 16
28400: PUSH
28401: LD_INT 17
28403: PUSH
28404: LD_INT 18
28406: PUSH
28407: LD_INT 19
28409: PUSH
28410: LD_INT 20
28412: PUSH
28413: LD_INT 21
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: IN
28431: NOT
28432: OR
28433: PUSH
28434: LD_VAR 0 8
28438: PUSH
28439: LD_INT 5
28441: ARRAY
28442: NOT
28443: OR
28444: PUSH
28445: LD_VAR 0 8
28449: PUSH
28450: LD_INT 6
28452: ARRAY
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 7
28462: PUSH
28463: LD_INT 9
28465: PUSH
28466: LD_INT 10
28468: PUSH
28469: LD_INT 11
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: IN
28480: NOT
28481: OR
28482: IFFALSE 28488
// exit ;
28484: POP
28485: POP
28486: GO 28571
// end ;
28488: GO 28159
28490: POP
28491: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28492: LD_VAR 0 9
28496: PPUSH
28497: LD_VAR 0 3
28501: PPUSH
28502: LD_VAR 0 4
28506: PPUSH
28507: LD_INT 20
28509: PPUSH
28510: CALL 20523 0 4
28514: PUSH
28515: LD_INT 4
28517: ARRAY
28518: IFFALSE 28522
// exit ;
28520: GO 28571
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28522: LD_VAR 0 2
28526: PUSH
28527: LD_INT 29
28529: PUSH
28530: LD_INT 30
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: IN
28537: PUSH
28538: LD_VAR 0 3
28542: PPUSH
28543: LD_VAR 0 4
28547: PPUSH
28548: LD_VAR 0 9
28552: PPUSH
28553: CALL_OW 440
28557: NOT
28558: AND
28559: IFFALSE 28563
// exit ;
28561: GO 28571
// result := true ;
28563: LD_ADDR_VAR 0 6
28567: PUSH
28568: LD_INT 1
28570: ST_TO_ADDR
// end ;
28571: LD_VAR 0 6
28575: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
28576: LD_INT 0
28578: PPUSH
28579: PPUSH
28580: PPUSH
28581: PPUSH
28582: PPUSH
28583: PPUSH
28584: PPUSH
28585: PPUSH
28586: PPUSH
28587: PPUSH
28588: PPUSH
28589: PPUSH
28590: PPUSH
28591: PPUSH
28592: PPUSH
28593: PPUSH
28594: PPUSH
28595: PPUSH
28596: PPUSH
28597: PPUSH
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
28605: PPUSH
28606: PPUSH
28607: PPUSH
28608: PPUSH
28609: PPUSH
28610: PPUSH
28611: PPUSH
28612: PPUSH
28613: PPUSH
28614: PPUSH
28615: PPUSH
28616: PPUSH
28617: PPUSH
28618: PPUSH
28619: PPUSH
28620: PPUSH
28621: PPUSH
28622: PPUSH
28623: PPUSH
28624: PPUSH
28625: PPUSH
28626: PPUSH
28627: PPUSH
28628: PPUSH
28629: PPUSH
28630: PPUSH
28631: PPUSH
28632: PPUSH
28633: PPUSH
28634: PPUSH
28635: PPUSH
// result = [ ] ;
28636: LD_ADDR_VAR 0 7
28640: PUSH
28641: EMPTY
28642: ST_TO_ADDR
// temp_list = [ ] ;
28643: LD_ADDR_VAR 0 9
28647: PUSH
28648: EMPTY
28649: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
28650: LD_VAR 0 4
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 3
28666: PUSH
28667: LD_INT 4
28669: PUSH
28670: LD_INT 5
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: IN
28681: NOT
28682: PUSH
28683: LD_VAR 0 1
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: IN
28698: PUSH
28699: LD_VAR 0 5
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: LD_INT 3
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: LIST
28717: IN
28718: NOT
28719: AND
28720: OR
28721: IFFALSE 28725
// exit ;
28723: GO 47116
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
28725: LD_VAR 0 1
28729: PUSH
28730: LD_INT 6
28732: PUSH
28733: LD_INT 7
28735: PUSH
28736: LD_INT 8
28738: PUSH
28739: LD_INT 13
28741: PUSH
28742: LD_INT 12
28744: PUSH
28745: LD_INT 15
28747: PUSH
28748: LD_INT 11
28750: PUSH
28751: LD_INT 14
28753: PUSH
28754: LD_INT 10
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: IN
28768: IFFALSE 28778
// btype = b_lab ;
28770: LD_ADDR_VAR 0 1
28774: PUSH
28775: LD_INT 6
28777: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
28778: LD_VAR 0 6
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: IN
28797: NOT
28798: PUSH
28799: LD_VAR 0 1
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: LD_INT 3
28815: PUSH
28816: LD_INT 6
28818: PUSH
28819: LD_INT 36
28821: PUSH
28822: LD_INT 4
28824: PUSH
28825: LD_INT 5
28827: PUSH
28828: LD_INT 31
28830: PUSH
28831: LD_INT 32
28833: PUSH
28834: LD_INT 33
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: IN
28850: NOT
28851: PUSH
28852: LD_VAR 0 6
28856: PUSH
28857: LD_INT 1
28859: EQUAL
28860: AND
28861: OR
28862: PUSH
28863: LD_VAR 0 1
28867: PUSH
28868: LD_INT 2
28870: PUSH
28871: LD_INT 3
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: IN
28878: NOT
28879: PUSH
28880: LD_VAR 0 6
28884: PUSH
28885: LD_INT 2
28887: EQUAL
28888: AND
28889: OR
28890: IFFALSE 28900
// mode = 0 ;
28892: LD_ADDR_VAR 0 6
28896: PUSH
28897: LD_INT 0
28899: ST_TO_ADDR
// case mode of 0 :
28900: LD_VAR 0 6
28904: PUSH
28905: LD_INT 0
28907: DOUBLE
28908: EQUAL
28909: IFTRUE 28913
28911: GO 40366
28913: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28914: LD_ADDR_VAR 0 11
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: LD_INT 2
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 1
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: LD_INT 3
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29107: LD_ADDR_VAR 0 12
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 1
29165: NEG
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: LD_INT 1
29180: NEG
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: LD_INT 1
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 2
29230: NEG
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 2
29241: NEG
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 2
29253: NEG
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 3
29264: NEG
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 3
29275: NEG
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29303: LD_ADDR_VAR 0 13
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: NEG
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: NEG
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: LD_INT 2
29442: NEG
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 2
29450: NEG
29451: PUSH
29452: LD_INT 3
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 3
29462: NEG
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 3
29474: NEG
29475: PUSH
29476: LD_INT 3
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29502: LD_ADDR_VAR 0 14
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: LD_INT 1
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 1
29571: NEG
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 1
29583: NEG
29584: PUSH
29585: LD_INT 2
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: LD_INT 2
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: LD_INT 2
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: LD_INT 3
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: LD_INT 2
29674: NEG
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29698: LD_ADDR_VAR 0 15
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: LD_INT 1
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: LD_INT 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: LD_INT 1
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 2
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 2
29821: NEG
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 2
29832: NEG
29833: PUSH
29834: LD_INT 1
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 2
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 3
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29891: LD_ADDR_VAR 0 16
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 2
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 3
30038: PUSH
30039: LD_INT 2
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 3
30048: PUSH
30049: LD_INT 3
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 3
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30084: LD_ADDR_VAR 0 17
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: LD_INT 2
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 2
30219: PUSH
30220: LD_INT 2
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: NEG
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 2
30271: NEG
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: LD_INT 2
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30314: LD_ADDR_VAR 0 18
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: LD_INT 2
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 2
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 2
30501: NEG
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 2
30513: NEG
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30544: LD_ADDR_VAR 0 19
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: LD_INT 0
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: LD_INT 2
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: LD_INT 2
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: LD_INT 1
30651: NEG
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: LD_INT 2
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 1
30709: NEG
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: NEG
30721: PUSH
30722: LD_INT 0
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: LD_INT 2
30747: NEG
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30774: LD_ADDR_VAR 0 20
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: NEG
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 0
30867: PUSH
30868: LD_INT 2
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 2
30973: NEG
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31004: LD_ADDR_VAR 0 21
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: LD_INT 2
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 2
31119: PUSH
31120: LD_INT 0
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 2
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 2
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 2
31180: NEG
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 2
31203: NEG
31204: PUSH
31205: LD_INT 2
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31234: LD_ADDR_VAR 0 22
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 2
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 2
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 2
31410: NEG
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 2
31433: NEG
31434: PUSH
31435: LD_INT 2
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31464: LD_ADDR_VAR 0 23
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 3
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: LD_INT 3
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
31744: LD_ADDR_VAR 0 24
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: LD_INT 2
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: LD_INT 2
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: NEG
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 3
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32020: LD_ADDR_VAR 0 25
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 1
32089: NEG
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: LD_INT 2
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 2
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 2
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 2
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 2
32155: PUSH
32156: LD_INT 2
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: LD_INT 2
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 2
32196: NEG
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 2
32207: NEG
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 2
32219: NEG
32220: PUSH
32221: LD_INT 2
32223: NEG
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 3
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 3
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 3
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: LD_INT 3
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32294: LD_ADDR_VAR 0 26
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 1
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 2
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 2
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 2
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: NEG
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: LD_INT 3
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: LD_INT 3
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: NEG
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32570: LD_ADDR_VAR 0 27
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: LD_INT 2
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 2
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 1
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 2
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 2
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 3
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32850: LD_ADDR_VAR 0 28
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 2
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 2
33037: NEG
33038: PUSH
33039: LD_INT 1
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: LD_INT 2
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: LD_INT 3
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: LD_INT 3
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 3
33085: NEG
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 3
33097: NEG
33098: PUSH
33099: LD_INT 2
33101: NEG
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33132: LD_ADDR_VAR 0 29
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: LD_INT 2
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 2
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 2
33298: NEG
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 2
33322: NEG
33323: PUSH
33324: LD_INT 3
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 3
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: LD_INT 3
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 3
33376: NEG
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33411: LD_ADDR_VAR 0 30
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: NEG
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 2
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 2
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 2
33577: NEG
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 2
33588: NEG
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: LD_INT 3
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: LD_INT 2
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 3
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: LD_INT 3
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 2
33643: NEG
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 3
33654: NEG
33655: PUSH
33656: LD_INT 1
33658: NEG
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33689: LD_ADDR_VAR 0 31
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 1
33770: NEG
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: LD_INT 0
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: NEG
33855: PUSH
33856: LD_INT 1
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 2
33878: NEG
33879: PUSH
33880: LD_INT 3
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 2
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: LD_INT 3
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 3
33932: NEG
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33967: LD_ADDR_VAR 0 32
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: LD_INT 2
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: LD_INT 2
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: LD_INT 3
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: PUSH
34169: LD_INT 2
34171: NEG
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 3
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: PUSH
34190: LD_INT 3
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: NEG
34200: PUSH
34201: LD_INT 1
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 3
34210: NEG
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34245: LD_ADDR_VAR 0 33
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: NEG
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 2
34423: NEG
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: NEG
34436: PUSH
34437: LD_INT 3
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 3
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 3
34489: NEG
34490: PUSH
34491: LD_INT 2
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34524: LD_ADDR_VAR 0 34
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: LD_INT 1
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: NEG
34606: PUSH
34607: LD_INT 2
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: LD_INT 1
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 2
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 2
34680: NEG
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 3
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 3
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: LD_INT 3
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: NEG
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34804: LD_ADDR_VAR 0 35
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34916: LD_ADDR_VAR 0 36
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35028: LD_ADDR_VAR 0 37
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35140: LD_ADDR_VAR 0 38
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 1
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 2
35231: NEG
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35252: LD_ADDR_VAR 0 39
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: LD_INT 2
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35364: LD_ADDR_VAR 0 40
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: LD_INT 1
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35476: LD_ADDR_VAR 0 41
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 2
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: NEG
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 2
35642: NEG
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 2
35654: NEG
35655: PUSH
35656: LD_INT 2
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 2
35666: NEG
35667: PUSH
35668: LD_INT 3
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 3
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 3
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 3
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: LD_INT 3
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: NEG
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 3
35750: NEG
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 3
35761: NEG
35762: PUSH
35763: LD_INT 1
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 3
35773: NEG
35774: PUSH
35775: LD_INT 2
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 3
35785: NEG
35786: PUSH
35787: LD_INT 3
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35826: LD_ADDR_VAR 0 42
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: NEG
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: LD_INT 2
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: LD_INT 2
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: NEG
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: NEG
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: LD_INT 3
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: LD_INT 3
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 3
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 2
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 3
36072: PUSH
36073: LD_INT 3
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: LD_INT 3
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 3
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 3
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 3
36123: NEG
36124: PUSH
36125: LD_INT 2
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 3
36135: NEG
36136: PUSH
36137: LD_INT 3
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36176: LD_ADDR_VAR 0 43
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: LD_INT 2
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: LD_INT 3
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 3
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 3
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 3
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: LD_INT 3
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: LD_INT 3
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 3
36472: NEG
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 3
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36524: LD_ADDR_VAR 0 44
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 2
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: LD_INT 3
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 3
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: PUSH
36778: LD_INT 3
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 2
36787: NEG
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 3
36798: NEG
36799: PUSH
36800: LD_INT 0
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 3
36809: NEG
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 3
36821: NEG
36822: PUSH
36823: LD_INT 2
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 3
36833: NEG
36834: PUSH
36835: LD_INT 3
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36874: LD_ADDR_VAR 0 45
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 2
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 2
37040: NEG
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 2
37064: NEG
37065: PUSH
37066: LD_INT 3
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 3
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 3
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 2
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 3
37120: PUSH
37121: LD_INT 3
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 3
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 3
37171: NEG
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 3
37183: NEG
37184: PUSH
37185: LD_INT 3
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37224: LD_ADDR_VAR 0 46
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: LD_INT 2
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: NEG
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: LD_INT 3
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 3
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: LD_INT 2
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 3
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 3
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 3
37520: NEG
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 3
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37572: LD_ADDR_VAR 0 47
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 1
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 2
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 2
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 2
37699: NEG
37700: PUSH
37701: LD_INT 2
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37723: LD_ADDR_VAR 0 48
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37870: LD_ADDR_VAR 0 49
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38014: LD_ADDR_VAR 0 50
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: LD_INT 2
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38158: LD_ADDR_VAR 0 51
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38305: LD_ADDR_VAR 0 52
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: NEG
38387: PUSH
38388: LD_INT 2
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: LD_INT 2
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38456: LD_ADDR_VAR 0 53
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 0
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 2
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: LD_INT 2
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 2
38632: NEG
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38686: LD_ADDR_VAR 0 54
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38916: LD_ADDR_VAR 0 55
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: LD_INT 2
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: LD_INT 2
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: LD_INT 1
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39146: LD_ADDR_VAR 0 56
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: NEG
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: LD_INT 2
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39376: LD_ADDR_VAR 0 57
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: LD_INT 2
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 2
39563: NEG
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: LD_INT 2
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39606: LD_ADDR_VAR 0 58
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 2
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 2
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39836: LD_ADDR_VAR 0 59
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39924: LD_ADDR_VAR 0 60
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40012: LD_ADDR_VAR 0 61
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40100: LD_ADDR_VAR 0 62
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40188: LD_ADDR_VAR 0 63
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40276: LD_ADDR_VAR 0 64
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: ST_TO_ADDR
// end ; 1 :
40364: GO 46261
40366: LD_INT 1
40368: DOUBLE
40369: EQUAL
40370: IFTRUE 40374
40372: GO 42997
40374: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40375: LD_ADDR_VAR 0 11
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 3
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 3
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40419: LD_ADDR_VAR 0 12
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 3
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 3
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: LIST
40459: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40460: LD_ADDR_VAR 0 13
40464: PUSH
40465: LD_INT 3
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: PUSH
40478: LD_INT 3
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: PUSH
40488: LD_INT 3
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40500: LD_ADDR_VAR 0 14
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: LD_INT 3
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40541: LD_ADDR_VAR 0 15
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 3
40559: NEG
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40585: LD_ADDR_VAR 0 16
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: LD_INT 3
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 3
40604: NEG
40605: PUSH
40606: LD_INT 2
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 3
40616: NEG
40617: PUSH
40618: LD_INT 3
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40631: LD_ADDR_VAR 0 17
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 3
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 3
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40675: LD_ADDR_VAR 0 18
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 3
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 3
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: LIST
40715: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40716: LD_ADDR_VAR 0 19
40720: PUSH
40721: LD_INT 3
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 3
40733: PUSH
40734: LD_INT 3
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40756: LD_ADDR_VAR 0 20
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 3
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: LIST
40796: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40797: LD_ADDR_VAR 0 21
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 3
40815: NEG
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40841: LD_ADDR_VAR 0 22
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: LD_INT 3
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 3
40860: NEG
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 3
40872: NEG
40873: PUSH
40874: LD_INT 3
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40887: LD_ADDR_VAR 0 23
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 3
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 4
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 3
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40931: LD_ADDR_VAR 0 24
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 3
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 4
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40972: LD_ADDR_VAR 0 25
40976: PUSH
40977: LD_INT 3
40979: PUSH
40980: LD_INT 3
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 4
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 3
40999: PUSH
41000: LD_INT 4
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41012: LD_ADDR_VAR 0 26
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: LD_INT 3
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 4
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: LIST
41052: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41053: LD_ADDR_VAR 0 27
41057: PUSH
41058: LD_INT 3
41060: NEG
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 3
41071: NEG
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 4
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: LIST
41096: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41097: LD_ADDR_VAR 0 28
41101: PUSH
41102: LD_INT 3
41104: NEG
41105: PUSH
41106: LD_INT 3
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 3
41116: NEG
41117: PUSH
41118: LD_INT 4
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 4
41128: NEG
41129: PUSH
41130: LD_INT 3
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: LIST
41142: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41143: LD_ADDR_VAR 0 29
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: LD_INT 3
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 3
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 4
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 4
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: LD_INT 3
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 5
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: LD_INT 5
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 4
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: LD_INT 6
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 6
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 5
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41298: LD_ADDR_VAR 0 30
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 3
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 4
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 4
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 4
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 5
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 5
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 5
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 6
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 6
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41441: LD_ADDR_VAR 0 31
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 3
41458: PUSH
41459: LD_INT 3
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 4
41478: PUSH
41479: LD_INT 3
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 4
41488: PUSH
41489: LD_INT 4
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: LD_INT 4
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 5
41508: PUSH
41509: LD_INT 4
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 5
41518: PUSH
41519: LD_INT 5
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 4
41528: PUSH
41529: LD_INT 5
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 6
41538: PUSH
41539: LD_INT 5
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 6
41548: PUSH
41549: LD_INT 6
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 5
41558: PUSH
41559: LD_INT 6
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
41580: LD_ADDR_VAR 0 32
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: LD_INT 3
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 3
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 4
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 4
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 3
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 5
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 5
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 4
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 6
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: LD_INT 6
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: LD_INT 5
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
41723: LD_ADDR_VAR 0 33
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 3
41741: NEG
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 3
41752: NEG
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 3
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 4
41775: NEG
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 4
41786: NEG
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 4
41798: NEG
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 5
41809: NEG
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 5
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 5
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 6
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 6
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41878: LD_ADDR_VAR 0 34
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: LD_INT 3
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: NEG
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 3
41909: NEG
41910: PUSH
41911: LD_INT 3
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 3
41921: NEG
41922: PUSH
41923: LD_INT 4
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 4
41933: NEG
41934: PUSH
41935: LD_INT 3
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 4
41945: NEG
41946: PUSH
41947: LD_INT 4
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 4
41957: NEG
41958: PUSH
41959: LD_INT 5
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 5
41969: NEG
41970: PUSH
41971: LD_INT 4
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 5
41981: NEG
41982: PUSH
41983: LD_INT 5
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 5
41993: NEG
41994: PUSH
41995: LD_INT 6
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 6
42005: NEG
42006: PUSH
42007: LD_INT 5
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 6
42017: NEG
42018: PUSH
42019: LD_INT 6
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42041: LD_ADDR_VAR 0 41
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 3
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42085: LD_ADDR_VAR 0 42
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 2
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 3
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42126: LD_ADDR_VAR 0 43
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 3
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42166: LD_ADDR_VAR 0 44
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: LIST
42206: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42207: LD_ADDR_VAR 0 45
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 3
42236: NEG
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: LIST
42250: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42251: LD_ADDR_VAR 0 46
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: NEG
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42297: LD_ADDR_VAR 0 47
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: LD_INT 3
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 3
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42330: LD_ADDR_VAR 0 48
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42361: LD_ADDR_VAR 0 49
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
42390: LD_ADDR_VAR 0 50
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: LD_INT 3
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 3
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42419: LD_ADDR_VAR 0 51
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42450: LD_ADDR_VAR 0 52
42454: PUSH
42455: LD_INT 3
42457: NEG
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42483: LD_ADDR_VAR 0 53
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 3
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 3
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42527: LD_ADDR_VAR 0 54
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42568: LD_ADDR_VAR 0 55
42572: PUSH
42573: LD_INT 3
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 3
42585: PUSH
42586: LD_INT 3
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 3
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42608: LD_ADDR_VAR 0 56
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 3
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 3
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42649: LD_ADDR_VAR 0 57
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 3
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: LIST
42692: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42693: LD_ADDR_VAR 0 58
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: LD_INT 3
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 3
42712: NEG
42713: PUSH
42714: LD_INT 2
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 3
42724: NEG
42725: PUSH
42726: LD_INT 3
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
42739: LD_ADDR_VAR 0 59
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42783: LD_ADDR_VAR 0 60
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42824: LD_ADDR_VAR 0 61
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42864: LD_ADDR_VAR 0 62
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42905: LD_ADDR_VAR 0 63
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42949: LD_ADDR_VAR 0 64
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
// end ; 2 :
42995: GO 46261
42997: LD_INT 2
42999: DOUBLE
43000: EQUAL
43001: IFTRUE 43005
43003: GO 46260
43005: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43006: LD_ADDR_VAR 0 29
43010: PUSH
43011: LD_INT 4
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 4
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 5
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 5
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 4
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 3
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 5
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: LD_INT 3
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 3
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 4
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 4
43136: PUSH
43137: LD_INT 4
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: LD_INT 4
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 3
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 4
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: LD_INT 4
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: LD_INT 4
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: LD_INT 3
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 4
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: LD_INT 5
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 5
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 4
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 3
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: LD_INT 5
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 3
43289: NEG
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 3
43300: NEG
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 2
43323: NEG
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 3
43334: NEG
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 4
43345: NEG
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 4
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 4
43368: NEG
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 4
43391: NEG
43392: PUSH
43393: LD_INT 4
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 4
43403: NEG
43404: PUSH
43405: LD_INT 5
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 3
43415: NEG
43416: PUSH
43417: LD_INT 4
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 3
43427: NEG
43428: PUSH
43429: LD_INT 3
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 4
43439: NEG
43440: PUSH
43441: LD_INT 3
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 5
43451: NEG
43452: PUSH
43453: LD_INT 4
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 5
43463: NEG
43464: PUSH
43465: LD_INT 5
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 3
43475: NEG
43476: PUSH
43477: LD_INT 5
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 5
43487: NEG
43488: PUSH
43489: LD_INT 3
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43544: LD_ADDR_VAR 0 30
43548: PUSH
43549: LD_INT 4
43551: PUSH
43552: LD_INT 4
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 4
43561: PUSH
43562: LD_INT 3
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 5
43571: PUSH
43572: LD_INT 4
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 5
43581: PUSH
43582: LD_INT 5
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 4
43591: PUSH
43592: LD_INT 5
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 3
43601: PUSH
43602: LD_INT 4
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 3
43611: PUSH
43612: LD_INT 3
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 5
43621: PUSH
43622: LD_INT 3
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 3
43631: PUSH
43632: LD_INT 5
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 3
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 3
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 4
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 4
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 3
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 4
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 4
43734: NEG
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 4
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 3
43757: NEG
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 4
43779: NEG
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 5
43790: NEG
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 5
43801: NEG
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 5
43813: NEG
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 3
43825: NEG
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: NEG
43837: PUSH
43838: LD_INT 3
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 3
43848: NEG
43849: PUSH
43850: LD_INT 4
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: LD_INT 3
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: NEG
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 4
43896: NEG
43897: PUSH
43898: LD_INT 3
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 4
43908: NEG
43909: PUSH
43910: LD_INT 4
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: LD_INT 4
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 4
43932: NEG
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 4
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 5
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 4
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 3
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 3
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: LD_INT 4
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 5
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 3
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: LD_INT 5
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44091: LD_ADDR_VAR 0 31
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: LD_INT 4
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 3
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 4
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 5
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 5
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 4
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 3
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 5
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: LD_INT 3
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 3
44202: NEG
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 3
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 4
44247: NEG
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 4
44258: NEG
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 4
44270: NEG
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 4
44293: NEG
44294: PUSH
44295: LD_INT 4
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 4
44305: NEG
44306: PUSH
44307: LD_INT 5
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 3
44317: NEG
44318: PUSH
44319: LD_INT 4
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: LD_INT 3
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 4
44341: NEG
44342: PUSH
44343: LD_INT 3
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 5
44353: NEG
44354: PUSH
44355: LD_INT 4
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 5
44365: NEG
44366: PUSH
44367: LD_INT 5
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 3
44377: NEG
44378: PUSH
44379: LD_INT 5
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 5
44389: NEG
44390: PUSH
44391: LD_INT 3
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 3
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 4
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 3
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 4
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 4
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 4
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 4
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 5
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 5
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 4
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 3
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 3
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 3
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 5
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
44641: LD_ADDR_VAR 0 32
44645: PUSH
44646: LD_INT 4
44648: NEG
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 4
44659: NEG
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 3
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 3
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 4
44693: NEG
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 5
44704: NEG
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 5
44715: NEG
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 5
44727: NEG
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: NEG
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 3
44762: NEG
44763: PUSH
44764: LD_INT 4
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 3
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 4
44810: NEG
44811: PUSH
44812: LD_INT 3
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 4
44822: NEG
44823: PUSH
44824: LD_INT 4
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 4
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 4
44846: NEG
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 4
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 5
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 4
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 3
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 3
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 4
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 5
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 3
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: LD_INT 5
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 3
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 3
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 4
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 4
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 3
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 4
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 4
45053: PUSH
45054: LD_INT 4
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 4
45063: PUSH
45064: LD_INT 3
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 5
45073: PUSH
45074: LD_INT 4
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 5
45083: PUSH
45084: LD_INT 5
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 4
45093: PUSH
45094: LD_INT 5
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 4
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 5
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 3
45133: PUSH
45134: LD_INT 5
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45188: LD_ADDR_VAR 0 33
45192: PUSH
45193: LD_INT 4
45195: NEG
45196: PUSH
45197: LD_INT 4
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 4
45207: NEG
45208: PUSH
45209: LD_INT 5
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 3
45219: NEG
45220: PUSH
45221: LD_INT 4
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 3
45231: NEG
45232: PUSH
45233: LD_INT 3
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 4
45243: NEG
45244: PUSH
45245: LD_INT 3
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 5
45255: NEG
45256: PUSH
45257: LD_INT 4
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 5
45267: NEG
45268: PUSH
45269: LD_INT 5
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 3
45279: NEG
45280: PUSH
45281: LD_INT 5
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 5
45291: NEG
45292: PUSH
45293: LD_INT 3
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 4
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 3
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 3
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 4
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: LD_INT 4
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 4
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 4
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 5
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 5
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 4
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 3
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 5
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 3
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 4
45518: PUSH
45519: LD_INT 3
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 4
45528: PUSH
45529: LD_INT 4
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: LD_INT 4
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 4
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 4
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 4
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 3
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 4
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 5
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 5
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 4
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 3
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 5
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
45726: LD_ADDR_VAR 0 34
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 4
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 5
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: LD_INT 4
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 3
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 4
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 5
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 3
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 5
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 4
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 4
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 4
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 4
45928: PUSH
45929: LD_INT 4
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 4
45938: PUSH
45939: LD_INT 3
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 5
45948: PUSH
45949: LD_INT 4
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 5
45958: PUSH
45959: LD_INT 5
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 4
45968: PUSH
45969: LD_INT 5
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: LD_INT 4
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 3
45988: PUSH
45989: LD_INT 3
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 5
45998: PUSH
45999: LD_INT 3
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: LD_INT 5
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 3
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 4
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 4
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 3
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 4
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 4
46111: NEG
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 4
46122: NEG
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 3
46134: NEG
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 3
46145: NEG
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 4
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 5
46167: NEG
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 5
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 5
46190: NEG
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: ST_TO_ADDR
// end ; end ;
46258: GO 46261
46260: POP
// case btype of b_depot , b_warehouse :
46261: LD_VAR 0 1
46265: PUSH
46266: LD_INT 0
46268: DOUBLE
46269: EQUAL
46270: IFTRUE 46280
46272: LD_INT 1
46274: DOUBLE
46275: EQUAL
46276: IFTRUE 46280
46278: GO 46481
46280: POP
// case nation of nation_american :
46281: LD_VAR 0 5
46285: PUSH
46286: LD_INT 1
46288: DOUBLE
46289: EQUAL
46290: IFTRUE 46294
46292: GO 46350
46294: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46295: LD_ADDR_VAR 0 9
46299: PUSH
46300: LD_VAR 0 11
46304: PUSH
46305: LD_VAR 0 12
46309: PUSH
46310: LD_VAR 0 13
46314: PUSH
46315: LD_VAR 0 14
46319: PUSH
46320: LD_VAR 0 15
46324: PUSH
46325: LD_VAR 0 16
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: PUSH
46338: LD_VAR 0 4
46342: PUSH
46343: LD_INT 1
46345: PLUS
46346: ARRAY
46347: ST_TO_ADDR
46348: GO 46479
46350: LD_INT 2
46352: DOUBLE
46353: EQUAL
46354: IFTRUE 46358
46356: GO 46414
46358: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46359: LD_ADDR_VAR 0 9
46363: PUSH
46364: LD_VAR 0 17
46368: PUSH
46369: LD_VAR 0 18
46373: PUSH
46374: LD_VAR 0 19
46378: PUSH
46379: LD_VAR 0 20
46383: PUSH
46384: LD_VAR 0 21
46388: PUSH
46389: LD_VAR 0 22
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: PUSH
46402: LD_VAR 0 4
46406: PUSH
46407: LD_INT 1
46409: PLUS
46410: ARRAY
46411: ST_TO_ADDR
46412: GO 46479
46414: LD_INT 3
46416: DOUBLE
46417: EQUAL
46418: IFTRUE 46422
46420: GO 46478
46422: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
46423: LD_ADDR_VAR 0 9
46427: PUSH
46428: LD_VAR 0 23
46432: PUSH
46433: LD_VAR 0 24
46437: PUSH
46438: LD_VAR 0 25
46442: PUSH
46443: LD_VAR 0 26
46447: PUSH
46448: LD_VAR 0 27
46452: PUSH
46453: LD_VAR 0 28
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: PUSH
46466: LD_VAR 0 4
46470: PUSH
46471: LD_INT 1
46473: PLUS
46474: ARRAY
46475: ST_TO_ADDR
46476: GO 46479
46478: POP
46479: GO 47034
46481: LD_INT 2
46483: DOUBLE
46484: EQUAL
46485: IFTRUE 46495
46487: LD_INT 3
46489: DOUBLE
46490: EQUAL
46491: IFTRUE 46495
46493: GO 46551
46495: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46496: LD_ADDR_VAR 0 9
46500: PUSH
46501: LD_VAR 0 29
46505: PUSH
46506: LD_VAR 0 30
46510: PUSH
46511: LD_VAR 0 31
46515: PUSH
46516: LD_VAR 0 32
46520: PUSH
46521: LD_VAR 0 33
46525: PUSH
46526: LD_VAR 0 34
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: PUSH
46539: LD_VAR 0 4
46543: PUSH
46544: LD_INT 1
46546: PLUS
46547: ARRAY
46548: ST_TO_ADDR
46549: GO 47034
46551: LD_INT 16
46553: DOUBLE
46554: EQUAL
46555: IFTRUE 46613
46557: LD_INT 17
46559: DOUBLE
46560: EQUAL
46561: IFTRUE 46613
46563: LD_INT 18
46565: DOUBLE
46566: EQUAL
46567: IFTRUE 46613
46569: LD_INT 19
46571: DOUBLE
46572: EQUAL
46573: IFTRUE 46613
46575: LD_INT 22
46577: DOUBLE
46578: EQUAL
46579: IFTRUE 46613
46581: LD_INT 20
46583: DOUBLE
46584: EQUAL
46585: IFTRUE 46613
46587: LD_INT 21
46589: DOUBLE
46590: EQUAL
46591: IFTRUE 46613
46593: LD_INT 23
46595: DOUBLE
46596: EQUAL
46597: IFTRUE 46613
46599: LD_INT 24
46601: DOUBLE
46602: EQUAL
46603: IFTRUE 46613
46605: LD_INT 25
46607: DOUBLE
46608: EQUAL
46609: IFTRUE 46613
46611: GO 46669
46613: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
46614: LD_ADDR_VAR 0 9
46618: PUSH
46619: LD_VAR 0 35
46623: PUSH
46624: LD_VAR 0 36
46628: PUSH
46629: LD_VAR 0 37
46633: PUSH
46634: LD_VAR 0 38
46638: PUSH
46639: LD_VAR 0 39
46643: PUSH
46644: LD_VAR 0 40
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: PUSH
46657: LD_VAR 0 4
46661: PUSH
46662: LD_INT 1
46664: PLUS
46665: ARRAY
46666: ST_TO_ADDR
46667: GO 47034
46669: LD_INT 6
46671: DOUBLE
46672: EQUAL
46673: IFTRUE 46725
46675: LD_INT 7
46677: DOUBLE
46678: EQUAL
46679: IFTRUE 46725
46681: LD_INT 8
46683: DOUBLE
46684: EQUAL
46685: IFTRUE 46725
46687: LD_INT 13
46689: DOUBLE
46690: EQUAL
46691: IFTRUE 46725
46693: LD_INT 12
46695: DOUBLE
46696: EQUAL
46697: IFTRUE 46725
46699: LD_INT 15
46701: DOUBLE
46702: EQUAL
46703: IFTRUE 46725
46705: LD_INT 11
46707: DOUBLE
46708: EQUAL
46709: IFTRUE 46725
46711: LD_INT 14
46713: DOUBLE
46714: EQUAL
46715: IFTRUE 46725
46717: LD_INT 10
46719: DOUBLE
46720: EQUAL
46721: IFTRUE 46725
46723: GO 46781
46725: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
46726: LD_ADDR_VAR 0 9
46730: PUSH
46731: LD_VAR 0 41
46735: PUSH
46736: LD_VAR 0 42
46740: PUSH
46741: LD_VAR 0 43
46745: PUSH
46746: LD_VAR 0 44
46750: PUSH
46751: LD_VAR 0 45
46755: PUSH
46756: LD_VAR 0 46
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: PUSH
46769: LD_VAR 0 4
46773: PUSH
46774: LD_INT 1
46776: PLUS
46777: ARRAY
46778: ST_TO_ADDR
46779: GO 47034
46781: LD_INT 36
46783: DOUBLE
46784: EQUAL
46785: IFTRUE 46789
46787: GO 46845
46789: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
46790: LD_ADDR_VAR 0 9
46794: PUSH
46795: LD_VAR 0 47
46799: PUSH
46800: LD_VAR 0 48
46804: PUSH
46805: LD_VAR 0 49
46809: PUSH
46810: LD_VAR 0 50
46814: PUSH
46815: LD_VAR 0 51
46819: PUSH
46820: LD_VAR 0 52
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: PUSH
46833: LD_VAR 0 4
46837: PUSH
46838: LD_INT 1
46840: PLUS
46841: ARRAY
46842: ST_TO_ADDR
46843: GO 47034
46845: LD_INT 4
46847: DOUBLE
46848: EQUAL
46849: IFTRUE 46871
46851: LD_INT 5
46853: DOUBLE
46854: EQUAL
46855: IFTRUE 46871
46857: LD_INT 34
46859: DOUBLE
46860: EQUAL
46861: IFTRUE 46871
46863: LD_INT 37
46865: DOUBLE
46866: EQUAL
46867: IFTRUE 46871
46869: GO 46927
46871: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46872: LD_ADDR_VAR 0 9
46876: PUSH
46877: LD_VAR 0 53
46881: PUSH
46882: LD_VAR 0 54
46886: PUSH
46887: LD_VAR 0 55
46891: PUSH
46892: LD_VAR 0 56
46896: PUSH
46897: LD_VAR 0 57
46901: PUSH
46902: LD_VAR 0 58
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: PUSH
46915: LD_VAR 0 4
46919: PUSH
46920: LD_INT 1
46922: PLUS
46923: ARRAY
46924: ST_TO_ADDR
46925: GO 47034
46927: LD_INT 31
46929: DOUBLE
46930: EQUAL
46931: IFTRUE 46977
46933: LD_INT 32
46935: DOUBLE
46936: EQUAL
46937: IFTRUE 46977
46939: LD_INT 33
46941: DOUBLE
46942: EQUAL
46943: IFTRUE 46977
46945: LD_INT 27
46947: DOUBLE
46948: EQUAL
46949: IFTRUE 46977
46951: LD_INT 26
46953: DOUBLE
46954: EQUAL
46955: IFTRUE 46977
46957: LD_INT 28
46959: DOUBLE
46960: EQUAL
46961: IFTRUE 46977
46963: LD_INT 29
46965: DOUBLE
46966: EQUAL
46967: IFTRUE 46977
46969: LD_INT 30
46971: DOUBLE
46972: EQUAL
46973: IFTRUE 46977
46975: GO 47033
46977: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
46978: LD_ADDR_VAR 0 9
46982: PUSH
46983: LD_VAR 0 59
46987: PUSH
46988: LD_VAR 0 60
46992: PUSH
46993: LD_VAR 0 61
46997: PUSH
46998: LD_VAR 0 62
47002: PUSH
47003: LD_VAR 0 63
47007: PUSH
47008: LD_VAR 0 64
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: PUSH
47021: LD_VAR 0 4
47025: PUSH
47026: LD_INT 1
47028: PLUS
47029: ARRAY
47030: ST_TO_ADDR
47031: GO 47034
47033: POP
// temp_list2 = [ ] ;
47034: LD_ADDR_VAR 0 10
47038: PUSH
47039: EMPTY
47040: ST_TO_ADDR
// for i in temp_list do
47041: LD_ADDR_VAR 0 8
47045: PUSH
47046: LD_VAR 0 9
47050: PUSH
47051: FOR_IN
47052: IFFALSE 47104
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47054: LD_ADDR_VAR 0 10
47058: PUSH
47059: LD_VAR 0 10
47063: PUSH
47064: LD_VAR 0 8
47068: PUSH
47069: LD_INT 1
47071: ARRAY
47072: PUSH
47073: LD_VAR 0 2
47077: PLUS
47078: PUSH
47079: LD_VAR 0 8
47083: PUSH
47084: LD_INT 2
47086: ARRAY
47087: PUSH
47088: LD_VAR 0 3
47092: PLUS
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: ADD
47101: ST_TO_ADDR
47102: GO 47051
47104: POP
47105: POP
// result = temp_list2 ;
47106: LD_ADDR_VAR 0 7
47110: PUSH
47111: LD_VAR 0 10
47115: ST_TO_ADDR
// end ;
47116: LD_VAR 0 7
47120: RET
// export function EnemyInRange ( unit , dist ) ; begin
47121: LD_INT 0
47123: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47124: LD_ADDR_VAR 0 3
47128: PUSH
47129: LD_VAR 0 1
47133: PPUSH
47134: CALL_OW 255
47138: PPUSH
47139: LD_VAR 0 1
47143: PPUSH
47144: CALL_OW 250
47148: PPUSH
47149: LD_VAR 0 1
47153: PPUSH
47154: CALL_OW 251
47158: PPUSH
47159: LD_VAR 0 2
47163: PPUSH
47164: CALL 20523 0 4
47168: PUSH
47169: LD_INT 4
47171: ARRAY
47172: ST_TO_ADDR
// end ;
47173: LD_VAR 0 3
47177: RET
// export function PlayerSeeMe ( unit ) ; begin
47178: LD_INT 0
47180: PPUSH
// result := See ( your_side , unit ) ;
47181: LD_ADDR_VAR 0 2
47185: PUSH
47186: LD_OWVAR 2
47190: PPUSH
47191: LD_VAR 0 1
47195: PPUSH
47196: CALL_OW 292
47200: ST_TO_ADDR
// end ;
47201: LD_VAR 0 2
47205: RET
// export function ReverseDir ( unit ) ; begin
47206: LD_INT 0
47208: PPUSH
// if not unit then
47209: LD_VAR 0 1
47213: NOT
47214: IFFALSE 47218
// exit ;
47216: GO 47241
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47218: LD_ADDR_VAR 0 2
47222: PUSH
47223: LD_VAR 0 1
47227: PPUSH
47228: CALL_OW 254
47232: PUSH
47233: LD_INT 3
47235: PLUS
47236: PUSH
47237: LD_INT 6
47239: MOD
47240: ST_TO_ADDR
// end ;
47241: LD_VAR 0 2
47245: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
47246: LD_INT 0
47248: PPUSH
47249: PPUSH
47250: PPUSH
47251: PPUSH
47252: PPUSH
47253: PPUSH
// if not unit or not hexes then
47254: LD_VAR 0 1
47258: NOT
47259: PUSH
47260: LD_VAR 0 2
47264: NOT
47265: OR
47266: IFFALSE 47270
// exit ;
47268: GO 47393
// dist := 9999 ;
47270: LD_ADDR_VAR 0 5
47274: PUSH
47275: LD_INT 9999
47277: ST_TO_ADDR
// for i = 1 to hexes do
47278: LD_ADDR_VAR 0 4
47282: PUSH
47283: DOUBLE
47284: LD_INT 1
47286: DEC
47287: ST_TO_ADDR
47288: LD_VAR 0 2
47292: PUSH
47293: FOR_TO
47294: IFFALSE 47381
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47296: LD_ADDR_VAR 0 6
47300: PUSH
47301: LD_VAR 0 1
47305: PPUSH
47306: LD_VAR 0 2
47310: PUSH
47311: LD_VAR 0 4
47315: ARRAY
47316: PUSH
47317: LD_INT 1
47319: ARRAY
47320: PPUSH
47321: LD_VAR 0 2
47325: PUSH
47326: LD_VAR 0 4
47330: ARRAY
47331: PUSH
47332: LD_INT 2
47334: ARRAY
47335: PPUSH
47336: CALL_OW 297
47340: ST_TO_ADDR
// if tdist < dist then
47341: LD_VAR 0 6
47345: PUSH
47346: LD_VAR 0 5
47350: LESS
47351: IFFALSE 47379
// begin hex := hexes [ i ] ;
47353: LD_ADDR_VAR 0 8
47357: PUSH
47358: LD_VAR 0 2
47362: PUSH
47363: LD_VAR 0 4
47367: ARRAY
47368: ST_TO_ADDR
// dist := tdist ;
47369: LD_ADDR_VAR 0 5
47373: PUSH
47374: LD_VAR 0 6
47378: ST_TO_ADDR
// end ; end ;
47379: GO 47293
47381: POP
47382: POP
// result := hex ;
47383: LD_ADDR_VAR 0 3
47387: PUSH
47388: LD_VAR 0 8
47392: ST_TO_ADDR
// end ;
47393: LD_VAR 0 3
47397: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47398: LD_INT 0
47400: PPUSH
47401: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47402: LD_VAR 0 1
47406: NOT
47407: PUSH
47408: LD_VAR 0 1
47412: PUSH
47413: LD_INT 21
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 23
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PPUSH
47437: CALL_OW 69
47441: IN
47442: NOT
47443: OR
47444: IFFALSE 47448
// exit ;
47446: GO 47495
// for i = 1 to 3 do
47448: LD_ADDR_VAR 0 3
47452: PUSH
47453: DOUBLE
47454: LD_INT 1
47456: DEC
47457: ST_TO_ADDR
47458: LD_INT 3
47460: PUSH
47461: FOR_TO
47462: IFFALSE 47493
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47464: LD_VAR 0 1
47468: PPUSH
47469: CALL_OW 250
47473: PPUSH
47474: LD_VAR 0 1
47478: PPUSH
47479: CALL_OW 251
47483: PPUSH
47484: LD_INT 1
47486: PPUSH
47487: CALL_OW 453
47491: GO 47461
47493: POP
47494: POP
// end ;
47495: LD_VAR 0 2
47499: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47500: LD_INT 0
47502: PPUSH
47503: PPUSH
47504: PPUSH
47505: PPUSH
47506: PPUSH
47507: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
47508: LD_VAR 0 1
47512: NOT
47513: PUSH
47514: LD_VAR 0 2
47518: NOT
47519: OR
47520: PUSH
47521: LD_VAR 0 1
47525: PPUSH
47526: CALL_OW 314
47530: OR
47531: IFFALSE 47535
// exit ;
47533: GO 47976
// x := GetX ( enemy_unit ) ;
47535: LD_ADDR_VAR 0 7
47539: PUSH
47540: LD_VAR 0 2
47544: PPUSH
47545: CALL_OW 250
47549: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47550: LD_ADDR_VAR 0 8
47554: PUSH
47555: LD_VAR 0 2
47559: PPUSH
47560: CALL_OW 251
47564: ST_TO_ADDR
// if not x or not y then
47565: LD_VAR 0 7
47569: NOT
47570: PUSH
47571: LD_VAR 0 8
47575: NOT
47576: OR
47577: IFFALSE 47581
// exit ;
47579: GO 47976
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
47581: LD_ADDR_VAR 0 6
47585: PUSH
47586: LD_VAR 0 7
47590: PPUSH
47591: LD_INT 0
47593: PPUSH
47594: LD_INT 4
47596: PPUSH
47597: CALL_OW 272
47601: PUSH
47602: LD_VAR 0 8
47606: PPUSH
47607: LD_INT 0
47609: PPUSH
47610: LD_INT 4
47612: PPUSH
47613: CALL_OW 273
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_VAR 0 7
47626: PPUSH
47627: LD_INT 1
47629: PPUSH
47630: LD_INT 4
47632: PPUSH
47633: CALL_OW 272
47637: PUSH
47638: LD_VAR 0 8
47642: PPUSH
47643: LD_INT 1
47645: PPUSH
47646: LD_INT 4
47648: PPUSH
47649: CALL_OW 273
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_VAR 0 7
47662: PPUSH
47663: LD_INT 2
47665: PPUSH
47666: LD_INT 4
47668: PPUSH
47669: CALL_OW 272
47673: PUSH
47674: LD_VAR 0 8
47678: PPUSH
47679: LD_INT 2
47681: PPUSH
47682: LD_INT 4
47684: PPUSH
47685: CALL_OW 273
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_VAR 0 7
47698: PPUSH
47699: LD_INT 3
47701: PPUSH
47702: LD_INT 4
47704: PPUSH
47705: CALL_OW 272
47709: PUSH
47710: LD_VAR 0 8
47714: PPUSH
47715: LD_INT 3
47717: PPUSH
47718: LD_INT 4
47720: PPUSH
47721: CALL_OW 273
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_VAR 0 7
47734: PPUSH
47735: LD_INT 4
47737: PPUSH
47738: LD_INT 4
47740: PPUSH
47741: CALL_OW 272
47745: PUSH
47746: LD_VAR 0 8
47750: PPUSH
47751: LD_INT 4
47753: PPUSH
47754: LD_INT 4
47756: PPUSH
47757: CALL_OW 273
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_VAR 0 7
47770: PPUSH
47771: LD_INT 5
47773: PPUSH
47774: LD_INT 4
47776: PPUSH
47777: CALL_OW 272
47781: PUSH
47782: LD_VAR 0 8
47786: PPUSH
47787: LD_INT 5
47789: PPUSH
47790: LD_INT 4
47792: PPUSH
47793: CALL_OW 273
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: ST_TO_ADDR
// for i = tmp downto 1 do
47810: LD_ADDR_VAR 0 4
47814: PUSH
47815: DOUBLE
47816: LD_VAR 0 6
47820: INC
47821: ST_TO_ADDR
47822: LD_INT 1
47824: PUSH
47825: FOR_DOWNTO
47826: IFFALSE 47927
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47828: LD_VAR 0 6
47832: PUSH
47833: LD_VAR 0 4
47837: ARRAY
47838: PUSH
47839: LD_INT 1
47841: ARRAY
47842: PPUSH
47843: LD_VAR 0 6
47847: PUSH
47848: LD_VAR 0 4
47852: ARRAY
47853: PUSH
47854: LD_INT 2
47856: ARRAY
47857: PPUSH
47858: CALL_OW 488
47862: NOT
47863: PUSH
47864: LD_VAR 0 6
47868: PUSH
47869: LD_VAR 0 4
47873: ARRAY
47874: PUSH
47875: LD_INT 1
47877: ARRAY
47878: PPUSH
47879: LD_VAR 0 6
47883: PUSH
47884: LD_VAR 0 4
47888: ARRAY
47889: PUSH
47890: LD_INT 2
47892: ARRAY
47893: PPUSH
47894: CALL_OW 428
47898: PUSH
47899: LD_INT 0
47901: NONEQUAL
47902: OR
47903: IFFALSE 47925
// tmp := Delete ( tmp , i ) ;
47905: LD_ADDR_VAR 0 6
47909: PUSH
47910: LD_VAR 0 6
47914: PPUSH
47915: LD_VAR 0 4
47919: PPUSH
47920: CALL_OW 3
47924: ST_TO_ADDR
47925: GO 47825
47927: POP
47928: POP
// j := GetClosestHex ( unit , tmp ) ;
47929: LD_ADDR_VAR 0 5
47933: PUSH
47934: LD_VAR 0 1
47938: PPUSH
47939: LD_VAR 0 6
47943: PPUSH
47944: CALL 47246 0 2
47948: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47949: LD_VAR 0 1
47953: PPUSH
47954: LD_VAR 0 5
47958: PUSH
47959: LD_INT 1
47961: ARRAY
47962: PPUSH
47963: LD_VAR 0 5
47967: PUSH
47968: LD_INT 2
47970: ARRAY
47971: PPUSH
47972: CALL_OW 111
// end ;
47976: LD_VAR 0 3
47980: RET
// export function PrepareApemanSoldier ( ) ; begin
47981: LD_INT 0
47983: PPUSH
// uc_nation := 0 ;
47984: LD_ADDR_OWVAR 21
47988: PUSH
47989: LD_INT 0
47991: ST_TO_ADDR
// hc_sex := sex_male ;
47992: LD_ADDR_OWVAR 27
47996: PUSH
47997: LD_INT 1
47999: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48000: LD_ADDR_OWVAR 28
48004: PUSH
48005: LD_INT 15
48007: ST_TO_ADDR
// hc_gallery :=  ;
48008: LD_ADDR_OWVAR 33
48012: PUSH
48013: LD_STRING 
48015: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48016: LD_ADDR_OWVAR 31
48020: PUSH
48021: LD_INT 0
48023: PPUSH
48024: LD_INT 3
48026: PPUSH
48027: CALL_OW 12
48031: PUSH
48032: LD_INT 0
48034: PPUSH
48035: LD_INT 3
48037: PPUSH
48038: CALL_OW 12
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: ST_TO_ADDR
// end ;
48055: LD_VAR 0 1
48059: RET
// export function PrepareApemanEngineer ( ) ; begin
48060: LD_INT 0
48062: PPUSH
// uc_nation := 0 ;
48063: LD_ADDR_OWVAR 21
48067: PUSH
48068: LD_INT 0
48070: ST_TO_ADDR
// hc_sex := sex_male ;
48071: LD_ADDR_OWVAR 27
48075: PUSH
48076: LD_INT 1
48078: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48079: LD_ADDR_OWVAR 28
48083: PUSH
48084: LD_INT 16
48086: ST_TO_ADDR
// hc_gallery :=  ;
48087: LD_ADDR_OWVAR 33
48091: PUSH
48092: LD_STRING 
48094: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48095: LD_ADDR_OWVAR 31
48099: PUSH
48100: LD_INT 0
48102: PPUSH
48103: LD_INT 3
48105: PPUSH
48106: CALL_OW 12
48110: PUSH
48111: LD_INT 0
48113: PPUSH
48114: LD_INT 3
48116: PPUSH
48117: CALL_OW 12
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// end ;
48134: LD_VAR 0 1
48138: RET
// export function PrepareApeman ( agressivity ) ; begin
48139: LD_INT 0
48141: PPUSH
// uc_side := 0 ;
48142: LD_ADDR_OWVAR 20
48146: PUSH
48147: LD_INT 0
48149: ST_TO_ADDR
// uc_nation := 0 ;
48150: LD_ADDR_OWVAR 21
48154: PUSH
48155: LD_INT 0
48157: ST_TO_ADDR
// hc_sex := sex_male ;
48158: LD_ADDR_OWVAR 27
48162: PUSH
48163: LD_INT 1
48165: ST_TO_ADDR
// hc_class := class_apeman ;
48166: LD_ADDR_OWVAR 28
48170: PUSH
48171: LD_INT 12
48173: ST_TO_ADDR
// hc_gallery :=  ;
48174: LD_ADDR_OWVAR 33
48178: PUSH
48179: LD_STRING 
48181: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48182: LD_ADDR_OWVAR 35
48186: PUSH
48187: LD_VAR 0 1
48191: NEG
48192: PPUSH
48193: LD_VAR 0 1
48197: PPUSH
48198: CALL_OW 12
48202: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48203: LD_ADDR_OWVAR 31
48207: PUSH
48208: LD_INT 0
48210: PPUSH
48211: LD_INT 3
48213: PPUSH
48214: CALL_OW 12
48218: PUSH
48219: LD_INT 0
48221: PPUSH
48222: LD_INT 3
48224: PPUSH
48225: CALL_OW 12
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// end ;
48242: LD_VAR 0 2
48246: RET
// export function PrepareTiger ( agressivity ) ; begin
48247: LD_INT 0
48249: PPUSH
// uc_side := 0 ;
48250: LD_ADDR_OWVAR 20
48254: PUSH
48255: LD_INT 0
48257: ST_TO_ADDR
// uc_nation := 0 ;
48258: LD_ADDR_OWVAR 21
48262: PUSH
48263: LD_INT 0
48265: ST_TO_ADDR
// hc_class := class_tiger ;
48266: LD_ADDR_OWVAR 28
48270: PUSH
48271: LD_INT 14
48273: ST_TO_ADDR
// hc_gallery :=  ;
48274: LD_ADDR_OWVAR 33
48278: PUSH
48279: LD_STRING 
48281: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48282: LD_ADDR_OWVAR 35
48286: PUSH
48287: LD_VAR 0 1
48291: NEG
48292: PPUSH
48293: LD_VAR 0 1
48297: PPUSH
48298: CALL_OW 12
48302: ST_TO_ADDR
// end ;
48303: LD_VAR 0 2
48307: RET
// export function PrepareEnchidna ( ) ; begin
48308: LD_INT 0
48310: PPUSH
// uc_side := 0 ;
48311: LD_ADDR_OWVAR 20
48315: PUSH
48316: LD_INT 0
48318: ST_TO_ADDR
// uc_nation := 0 ;
48319: LD_ADDR_OWVAR 21
48323: PUSH
48324: LD_INT 0
48326: ST_TO_ADDR
// hc_class := class_baggie ;
48327: LD_ADDR_OWVAR 28
48331: PUSH
48332: LD_INT 13
48334: ST_TO_ADDR
// hc_gallery :=  ;
48335: LD_ADDR_OWVAR 33
48339: PUSH
48340: LD_STRING 
48342: ST_TO_ADDR
// end ;
48343: LD_VAR 0 1
48347: RET
// export function PrepareFrog ( ) ; begin
48348: LD_INT 0
48350: PPUSH
// uc_side := 0 ;
48351: LD_ADDR_OWVAR 20
48355: PUSH
48356: LD_INT 0
48358: ST_TO_ADDR
// uc_nation := 0 ;
48359: LD_ADDR_OWVAR 21
48363: PUSH
48364: LD_INT 0
48366: ST_TO_ADDR
// hc_class := class_frog ;
48367: LD_ADDR_OWVAR 28
48371: PUSH
48372: LD_INT 19
48374: ST_TO_ADDR
// hc_gallery :=  ;
48375: LD_ADDR_OWVAR 33
48379: PUSH
48380: LD_STRING 
48382: ST_TO_ADDR
// end ;
48383: LD_VAR 0 1
48387: RET
// export function PrepareFish ( ) ; begin
48388: LD_INT 0
48390: PPUSH
// uc_side := 0 ;
48391: LD_ADDR_OWVAR 20
48395: PUSH
48396: LD_INT 0
48398: ST_TO_ADDR
// uc_nation := 0 ;
48399: LD_ADDR_OWVAR 21
48403: PUSH
48404: LD_INT 0
48406: ST_TO_ADDR
// hc_class := class_fish ;
48407: LD_ADDR_OWVAR 28
48411: PUSH
48412: LD_INT 20
48414: ST_TO_ADDR
// hc_gallery :=  ;
48415: LD_ADDR_OWVAR 33
48419: PUSH
48420: LD_STRING 
48422: ST_TO_ADDR
// end ;
48423: LD_VAR 0 1
48427: RET
// export function PrepareBird ( ) ; begin
48428: LD_INT 0
48430: PPUSH
// uc_side := 0 ;
48431: LD_ADDR_OWVAR 20
48435: PUSH
48436: LD_INT 0
48438: ST_TO_ADDR
// uc_nation := 0 ;
48439: LD_ADDR_OWVAR 21
48443: PUSH
48444: LD_INT 0
48446: ST_TO_ADDR
// hc_class := class_phororhacos ;
48447: LD_ADDR_OWVAR 28
48451: PUSH
48452: LD_INT 18
48454: ST_TO_ADDR
// hc_gallery :=  ;
48455: LD_ADDR_OWVAR 33
48459: PUSH
48460: LD_STRING 
48462: ST_TO_ADDR
// end ;
48463: LD_VAR 0 1
48467: RET
// export function PrepareHorse ( ) ; begin
48468: LD_INT 0
48470: PPUSH
// uc_side := 0 ;
48471: LD_ADDR_OWVAR 20
48475: PUSH
48476: LD_INT 0
48478: ST_TO_ADDR
// uc_nation := 0 ;
48479: LD_ADDR_OWVAR 21
48483: PUSH
48484: LD_INT 0
48486: ST_TO_ADDR
// hc_class := class_horse ;
48487: LD_ADDR_OWVAR 28
48491: PUSH
48492: LD_INT 21
48494: ST_TO_ADDR
// hc_gallery :=  ;
48495: LD_ADDR_OWVAR 33
48499: PUSH
48500: LD_STRING 
48502: ST_TO_ADDR
// end ;
48503: LD_VAR 0 1
48507: RET
// export function PrepareMastodont ( ) ; begin
48508: LD_INT 0
48510: PPUSH
// uc_side := 0 ;
48511: LD_ADDR_OWVAR 20
48515: PUSH
48516: LD_INT 0
48518: ST_TO_ADDR
// uc_nation := 0 ;
48519: LD_ADDR_OWVAR 21
48523: PUSH
48524: LD_INT 0
48526: ST_TO_ADDR
// vc_chassis := class_mastodont ;
48527: LD_ADDR_OWVAR 37
48531: PUSH
48532: LD_INT 31
48534: ST_TO_ADDR
// vc_control := control_rider ;
48535: LD_ADDR_OWVAR 38
48539: PUSH
48540: LD_INT 4
48542: ST_TO_ADDR
// end ;
48543: LD_VAR 0 1
48547: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48548: LD_INT 0
48550: PPUSH
48551: PPUSH
48552: PPUSH
// uc_side = 0 ;
48553: LD_ADDR_OWVAR 20
48557: PUSH
48558: LD_INT 0
48560: ST_TO_ADDR
// uc_nation = 0 ;
48561: LD_ADDR_OWVAR 21
48565: PUSH
48566: LD_INT 0
48568: ST_TO_ADDR
// InitHc_All ( ) ;
48569: CALL_OW 584
// InitVc ;
48573: CALL_OW 20
// if mastodonts then
48577: LD_VAR 0 6
48581: IFFALSE 48648
// for i = 1 to mastodonts do
48583: LD_ADDR_VAR 0 11
48587: PUSH
48588: DOUBLE
48589: LD_INT 1
48591: DEC
48592: ST_TO_ADDR
48593: LD_VAR 0 6
48597: PUSH
48598: FOR_TO
48599: IFFALSE 48646
// begin vc_chassis := 31 ;
48601: LD_ADDR_OWVAR 37
48605: PUSH
48606: LD_INT 31
48608: ST_TO_ADDR
// vc_control := control_rider ;
48609: LD_ADDR_OWVAR 38
48613: PUSH
48614: LD_INT 4
48616: ST_TO_ADDR
// animal := CreateVehicle ;
48617: LD_ADDR_VAR 0 12
48621: PUSH
48622: CALL_OW 45
48626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48627: LD_VAR 0 12
48631: PPUSH
48632: LD_VAR 0 8
48636: PPUSH
48637: LD_INT 0
48639: PPUSH
48640: CALL 50783 0 3
// end ;
48644: GO 48598
48646: POP
48647: POP
// if horses then
48648: LD_VAR 0 5
48652: IFFALSE 48719
// for i = 1 to horses do
48654: LD_ADDR_VAR 0 11
48658: PUSH
48659: DOUBLE
48660: LD_INT 1
48662: DEC
48663: ST_TO_ADDR
48664: LD_VAR 0 5
48668: PUSH
48669: FOR_TO
48670: IFFALSE 48717
// begin hc_class := 21 ;
48672: LD_ADDR_OWVAR 28
48676: PUSH
48677: LD_INT 21
48679: ST_TO_ADDR
// hc_gallery :=  ;
48680: LD_ADDR_OWVAR 33
48684: PUSH
48685: LD_STRING 
48687: ST_TO_ADDR
// animal := CreateHuman ;
48688: LD_ADDR_VAR 0 12
48692: PUSH
48693: CALL_OW 44
48697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48698: LD_VAR 0 12
48702: PPUSH
48703: LD_VAR 0 8
48707: PPUSH
48708: LD_INT 0
48710: PPUSH
48711: CALL 50783 0 3
// end ;
48715: GO 48669
48717: POP
48718: POP
// if birds then
48719: LD_VAR 0 1
48723: IFFALSE 48790
// for i = 1 to birds do
48725: LD_ADDR_VAR 0 11
48729: PUSH
48730: DOUBLE
48731: LD_INT 1
48733: DEC
48734: ST_TO_ADDR
48735: LD_VAR 0 1
48739: PUSH
48740: FOR_TO
48741: IFFALSE 48788
// begin hc_class = 18 ;
48743: LD_ADDR_OWVAR 28
48747: PUSH
48748: LD_INT 18
48750: ST_TO_ADDR
// hc_gallery =  ;
48751: LD_ADDR_OWVAR 33
48755: PUSH
48756: LD_STRING 
48758: ST_TO_ADDR
// animal := CreateHuman ;
48759: LD_ADDR_VAR 0 12
48763: PUSH
48764: CALL_OW 44
48768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48769: LD_VAR 0 12
48773: PPUSH
48774: LD_VAR 0 8
48778: PPUSH
48779: LD_INT 0
48781: PPUSH
48782: CALL 50783 0 3
// end ;
48786: GO 48740
48788: POP
48789: POP
// if tigers then
48790: LD_VAR 0 2
48794: IFFALSE 48878
// for i = 1 to tigers do
48796: LD_ADDR_VAR 0 11
48800: PUSH
48801: DOUBLE
48802: LD_INT 1
48804: DEC
48805: ST_TO_ADDR
48806: LD_VAR 0 2
48810: PUSH
48811: FOR_TO
48812: IFFALSE 48876
// begin hc_class = class_tiger ;
48814: LD_ADDR_OWVAR 28
48818: PUSH
48819: LD_INT 14
48821: ST_TO_ADDR
// hc_gallery =  ;
48822: LD_ADDR_OWVAR 33
48826: PUSH
48827: LD_STRING 
48829: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48830: LD_ADDR_OWVAR 35
48834: PUSH
48835: LD_INT 7
48837: NEG
48838: PPUSH
48839: LD_INT 7
48841: PPUSH
48842: CALL_OW 12
48846: ST_TO_ADDR
// animal := CreateHuman ;
48847: LD_ADDR_VAR 0 12
48851: PUSH
48852: CALL_OW 44
48856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48857: LD_VAR 0 12
48861: PPUSH
48862: LD_VAR 0 8
48866: PPUSH
48867: LD_INT 0
48869: PPUSH
48870: CALL 50783 0 3
// end ;
48874: GO 48811
48876: POP
48877: POP
// if apemans then
48878: LD_VAR 0 3
48882: IFFALSE 49005
// for i = 1 to apemans do
48884: LD_ADDR_VAR 0 11
48888: PUSH
48889: DOUBLE
48890: LD_INT 1
48892: DEC
48893: ST_TO_ADDR
48894: LD_VAR 0 3
48898: PUSH
48899: FOR_TO
48900: IFFALSE 49003
// begin hc_class = class_apeman ;
48902: LD_ADDR_OWVAR 28
48906: PUSH
48907: LD_INT 12
48909: ST_TO_ADDR
// hc_gallery =  ;
48910: LD_ADDR_OWVAR 33
48914: PUSH
48915: LD_STRING 
48917: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48918: LD_ADDR_OWVAR 35
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PPUSH
48927: LD_INT 2
48929: PPUSH
48930: CALL_OW 12
48934: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48935: LD_ADDR_OWVAR 31
48939: PUSH
48940: LD_INT 1
48942: PPUSH
48943: LD_INT 3
48945: PPUSH
48946: CALL_OW 12
48950: PUSH
48951: LD_INT 1
48953: PPUSH
48954: LD_INT 3
48956: PPUSH
48957: CALL_OW 12
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// animal := CreateHuman ;
48974: LD_ADDR_VAR 0 12
48978: PUSH
48979: CALL_OW 44
48983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48984: LD_VAR 0 12
48988: PPUSH
48989: LD_VAR 0 8
48993: PPUSH
48994: LD_INT 0
48996: PPUSH
48997: CALL 50783 0 3
// end ;
49001: GO 48899
49003: POP
49004: POP
// if enchidnas then
49005: LD_VAR 0 4
49009: IFFALSE 49076
// for i = 1 to enchidnas do
49011: LD_ADDR_VAR 0 11
49015: PUSH
49016: DOUBLE
49017: LD_INT 1
49019: DEC
49020: ST_TO_ADDR
49021: LD_VAR 0 4
49025: PUSH
49026: FOR_TO
49027: IFFALSE 49074
// begin hc_class = 13 ;
49029: LD_ADDR_OWVAR 28
49033: PUSH
49034: LD_INT 13
49036: ST_TO_ADDR
// hc_gallery =  ;
49037: LD_ADDR_OWVAR 33
49041: PUSH
49042: LD_STRING 
49044: ST_TO_ADDR
// animal := CreateHuman ;
49045: LD_ADDR_VAR 0 12
49049: PUSH
49050: CALL_OW 44
49054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49055: LD_VAR 0 12
49059: PPUSH
49060: LD_VAR 0 8
49064: PPUSH
49065: LD_INT 0
49067: PPUSH
49068: CALL 50783 0 3
// end ;
49072: GO 49026
49074: POP
49075: POP
// if fishes then
49076: LD_VAR 0 7
49080: IFFALSE 49147
// for i = 1 to fishes do
49082: LD_ADDR_VAR 0 11
49086: PUSH
49087: DOUBLE
49088: LD_INT 1
49090: DEC
49091: ST_TO_ADDR
49092: LD_VAR 0 7
49096: PUSH
49097: FOR_TO
49098: IFFALSE 49145
// begin hc_class = 20 ;
49100: LD_ADDR_OWVAR 28
49104: PUSH
49105: LD_INT 20
49107: ST_TO_ADDR
// hc_gallery =  ;
49108: LD_ADDR_OWVAR 33
49112: PUSH
49113: LD_STRING 
49115: ST_TO_ADDR
// animal := CreateHuman ;
49116: LD_ADDR_VAR 0 12
49120: PUSH
49121: CALL_OW 44
49125: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49126: LD_VAR 0 12
49130: PPUSH
49131: LD_VAR 0 9
49135: PPUSH
49136: LD_INT 0
49138: PPUSH
49139: CALL 50783 0 3
// end ;
49143: GO 49097
49145: POP
49146: POP
// end ;
49147: LD_VAR 0 10
49151: RET
// export function WantHeal ( sci , unit ) ; begin
49152: LD_INT 0
49154: PPUSH
// if GetTaskList ( sci ) > 0 then
49155: LD_VAR 0 1
49159: PPUSH
49160: CALL_OW 437
49164: PUSH
49165: LD_INT 0
49167: GREATER
49168: IFFALSE 49238
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49170: LD_VAR 0 1
49174: PPUSH
49175: CALL_OW 437
49179: PUSH
49180: LD_INT 1
49182: ARRAY
49183: PUSH
49184: LD_INT 1
49186: ARRAY
49187: PUSH
49188: LD_STRING l
49190: EQUAL
49191: PUSH
49192: LD_VAR 0 1
49196: PPUSH
49197: CALL_OW 437
49201: PUSH
49202: LD_INT 1
49204: ARRAY
49205: PUSH
49206: LD_INT 4
49208: ARRAY
49209: PUSH
49210: LD_VAR 0 2
49214: EQUAL
49215: AND
49216: IFFALSE 49228
// result := true else
49218: LD_ADDR_VAR 0 3
49222: PUSH
49223: LD_INT 1
49225: ST_TO_ADDR
49226: GO 49236
// result := false ;
49228: LD_ADDR_VAR 0 3
49232: PUSH
49233: LD_INT 0
49235: ST_TO_ADDR
// end else
49236: GO 49246
// result := false ;
49238: LD_ADDR_VAR 0 3
49242: PUSH
49243: LD_INT 0
49245: ST_TO_ADDR
// end ;
49246: LD_VAR 0 3
49250: RET
// export function HealTarget ( sci ) ; begin
49251: LD_INT 0
49253: PPUSH
// if not sci then
49254: LD_VAR 0 1
49258: NOT
49259: IFFALSE 49263
// exit ;
49261: GO 49328
// result := 0 ;
49263: LD_ADDR_VAR 0 2
49267: PUSH
49268: LD_INT 0
49270: ST_TO_ADDR
// if GetTaskList ( sci ) then
49271: LD_VAR 0 1
49275: PPUSH
49276: CALL_OW 437
49280: IFFALSE 49328
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49282: LD_VAR 0 1
49286: PPUSH
49287: CALL_OW 437
49291: PUSH
49292: LD_INT 1
49294: ARRAY
49295: PUSH
49296: LD_INT 1
49298: ARRAY
49299: PUSH
49300: LD_STRING l
49302: EQUAL
49303: IFFALSE 49328
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49305: LD_ADDR_VAR 0 2
49309: PUSH
49310: LD_VAR 0 1
49314: PPUSH
49315: CALL_OW 437
49319: PUSH
49320: LD_INT 1
49322: ARRAY
49323: PUSH
49324: LD_INT 4
49326: ARRAY
49327: ST_TO_ADDR
// end ;
49328: LD_VAR 0 2
49332: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49333: LD_INT 0
49335: PPUSH
49336: PPUSH
49337: PPUSH
49338: PPUSH
// if not base_units then
49339: LD_VAR 0 1
49343: NOT
49344: IFFALSE 49348
// exit ;
49346: GO 49435
// result := false ;
49348: LD_ADDR_VAR 0 2
49352: PUSH
49353: LD_INT 0
49355: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49356: LD_ADDR_VAR 0 5
49360: PUSH
49361: LD_VAR 0 1
49365: PPUSH
49366: LD_INT 21
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PPUSH
49376: CALL_OW 72
49380: ST_TO_ADDR
// if not tmp then
49381: LD_VAR 0 5
49385: NOT
49386: IFFALSE 49390
// exit ;
49388: GO 49435
// for i in tmp do
49390: LD_ADDR_VAR 0 3
49394: PUSH
49395: LD_VAR 0 5
49399: PUSH
49400: FOR_IN
49401: IFFALSE 49433
// begin result := EnemyInRange ( i , 22 ) ;
49403: LD_ADDR_VAR 0 2
49407: PUSH
49408: LD_VAR 0 3
49412: PPUSH
49413: LD_INT 22
49415: PPUSH
49416: CALL 47121 0 2
49420: ST_TO_ADDR
// if result then
49421: LD_VAR 0 2
49425: IFFALSE 49431
// exit ;
49427: POP
49428: POP
49429: GO 49435
// end ;
49431: GO 49400
49433: POP
49434: POP
// end ;
49435: LD_VAR 0 2
49439: RET
// export function FilterByTag ( units , tag ) ; begin
49440: LD_INT 0
49442: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
49443: LD_ADDR_VAR 0 3
49447: PUSH
49448: LD_VAR 0 1
49452: PPUSH
49453: LD_INT 120
49455: PUSH
49456: LD_VAR 0 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PPUSH
49465: CALL_OW 72
49469: ST_TO_ADDR
// end ;
49470: LD_VAR 0 3
49474: RET
// export function IsDriver ( un ) ; begin
49475: LD_INT 0
49477: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49478: LD_ADDR_VAR 0 2
49482: PUSH
49483: LD_VAR 0 1
49487: PUSH
49488: LD_INT 55
49490: PUSH
49491: EMPTY
49492: LIST
49493: PPUSH
49494: CALL_OW 69
49498: IN
49499: ST_TO_ADDR
// end ;
49500: LD_VAR 0 2
49504: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49505: LD_INT 0
49507: PPUSH
49508: PPUSH
// list := [ ] ;
49509: LD_ADDR_VAR 0 5
49513: PUSH
49514: EMPTY
49515: ST_TO_ADDR
// case d of 0 :
49516: LD_VAR 0 3
49520: PUSH
49521: LD_INT 0
49523: DOUBLE
49524: EQUAL
49525: IFTRUE 49529
49527: GO 49662
49529: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49530: LD_ADDR_VAR 0 5
49534: PUSH
49535: LD_VAR 0 1
49539: PUSH
49540: LD_INT 4
49542: MINUS
49543: PUSH
49544: LD_VAR 0 2
49548: PUSH
49549: LD_INT 4
49551: MINUS
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: PUSH
49561: LD_VAR 0 1
49565: PUSH
49566: LD_INT 3
49568: MINUS
49569: PUSH
49570: LD_VAR 0 2
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: PUSH
49583: LD_VAR 0 1
49587: PUSH
49588: LD_INT 4
49590: PLUS
49591: PUSH
49592: LD_VAR 0 2
49596: PUSH
49597: LD_INT 4
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: PUSH
49605: LD_VAR 0 1
49609: PUSH
49610: LD_INT 3
49612: PLUS
49613: PUSH
49614: LD_VAR 0 2
49618: PUSH
49619: LD_INT 3
49621: PLUS
49622: PUSH
49623: LD_INT 5
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: LIST
49630: PUSH
49631: LD_VAR 0 1
49635: PUSH
49636: LD_VAR 0 2
49640: PUSH
49641: LD_INT 4
49643: PLUS
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: ST_TO_ADDR
// end ; 1 :
49660: GO 50360
49662: LD_INT 1
49664: DOUBLE
49665: EQUAL
49666: IFTRUE 49670
49668: GO 49803
49670: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49671: LD_ADDR_VAR 0 5
49675: PUSH
49676: LD_VAR 0 1
49680: PUSH
49681: LD_VAR 0 2
49685: PUSH
49686: LD_INT 4
49688: MINUS
49689: PUSH
49690: LD_INT 3
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: PUSH
49698: LD_VAR 0 1
49702: PUSH
49703: LD_INT 3
49705: MINUS
49706: PUSH
49707: LD_VAR 0 2
49711: PUSH
49712: LD_INT 3
49714: MINUS
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: PUSH
49724: LD_VAR 0 1
49728: PUSH
49729: LD_INT 4
49731: MINUS
49732: PUSH
49733: LD_VAR 0 2
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: PUSH
49746: LD_VAR 0 1
49750: PUSH
49751: LD_VAR 0 2
49755: PUSH
49756: LD_INT 3
49758: PLUS
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: LIST
49767: PUSH
49768: LD_VAR 0 1
49772: PUSH
49773: LD_INT 4
49775: PLUS
49776: PUSH
49777: LD_VAR 0 2
49781: PUSH
49782: LD_INT 4
49784: PLUS
49785: PUSH
49786: LD_INT 5
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: LIST
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// end ; 2 :
49801: GO 50360
49803: LD_INT 2
49805: DOUBLE
49806: EQUAL
49807: IFTRUE 49811
49809: GO 49940
49811: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49812: LD_ADDR_VAR 0 5
49816: PUSH
49817: LD_VAR 0 1
49821: PUSH
49822: LD_VAR 0 2
49826: PUSH
49827: LD_INT 3
49829: MINUS
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: LIST
49838: PUSH
49839: LD_VAR 0 1
49843: PUSH
49844: LD_INT 4
49846: PLUS
49847: PUSH
49848: LD_VAR 0 2
49852: PUSH
49853: LD_INT 4
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: PUSH
49861: LD_VAR 0 1
49865: PUSH
49866: LD_VAR 0 2
49870: PUSH
49871: LD_INT 4
49873: PLUS
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: LIST
49882: PUSH
49883: LD_VAR 0 1
49887: PUSH
49888: LD_INT 3
49890: MINUS
49891: PUSH
49892: LD_VAR 0 2
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: PUSH
49905: LD_VAR 0 1
49909: PUSH
49910: LD_INT 4
49912: MINUS
49913: PUSH
49914: LD_VAR 0 2
49918: PUSH
49919: LD_INT 4
49921: MINUS
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: ST_TO_ADDR
// end ; 3 :
49938: GO 50360
49940: LD_INT 3
49942: DOUBLE
49943: EQUAL
49944: IFTRUE 49948
49946: GO 50081
49948: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49949: LD_ADDR_VAR 0 5
49953: PUSH
49954: LD_VAR 0 1
49958: PUSH
49959: LD_INT 3
49961: PLUS
49962: PUSH
49963: LD_VAR 0 2
49967: PUSH
49968: LD_INT 4
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: PUSH
49976: LD_VAR 0 1
49980: PUSH
49981: LD_INT 4
49983: PLUS
49984: PUSH
49985: LD_VAR 0 2
49989: PUSH
49990: LD_INT 4
49992: PLUS
49993: PUSH
49994: LD_INT 5
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: PUSH
50002: LD_VAR 0 1
50006: PUSH
50007: LD_INT 4
50009: MINUS
50010: PUSH
50011: LD_VAR 0 2
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: PUSH
50024: LD_VAR 0 1
50028: PUSH
50029: LD_VAR 0 2
50033: PUSH
50034: LD_INT 4
50036: MINUS
50037: PUSH
50038: LD_INT 3
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: LIST
50045: PUSH
50046: LD_VAR 0 1
50050: PUSH
50051: LD_INT 3
50053: MINUS
50054: PUSH
50055: LD_VAR 0 2
50059: PUSH
50060: LD_INT 3
50062: MINUS
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: ST_TO_ADDR
// end ; 4 :
50079: GO 50360
50081: LD_INT 4
50083: DOUBLE
50084: EQUAL
50085: IFTRUE 50089
50087: GO 50222
50089: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50090: LD_ADDR_VAR 0 5
50094: PUSH
50095: LD_VAR 0 1
50099: PUSH
50100: LD_VAR 0 2
50104: PUSH
50105: LD_INT 4
50107: PLUS
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: PUSH
50117: LD_VAR 0 1
50121: PUSH
50122: LD_INT 3
50124: PLUS
50125: PUSH
50126: LD_VAR 0 2
50130: PUSH
50131: LD_INT 3
50133: PLUS
50134: PUSH
50135: LD_INT 5
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: PUSH
50143: LD_VAR 0 1
50147: PUSH
50148: LD_INT 4
50150: PLUS
50151: PUSH
50152: LD_VAR 0 2
50156: PUSH
50157: LD_INT 4
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: PUSH
50165: LD_VAR 0 1
50169: PUSH
50170: LD_VAR 0 2
50174: PUSH
50175: LD_INT 3
50177: MINUS
50178: PUSH
50179: LD_INT 3
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: PUSH
50187: LD_VAR 0 1
50191: PUSH
50192: LD_INT 4
50194: MINUS
50195: PUSH
50196: LD_VAR 0 2
50200: PUSH
50201: LD_INT 4
50203: MINUS
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: ST_TO_ADDR
// end ; 5 :
50220: GO 50360
50222: LD_INT 5
50224: DOUBLE
50225: EQUAL
50226: IFTRUE 50230
50228: GO 50359
50230: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50231: LD_ADDR_VAR 0 5
50235: PUSH
50236: LD_VAR 0 1
50240: PUSH
50241: LD_INT 4
50243: MINUS
50244: PUSH
50245: LD_VAR 0 2
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: PUSH
50258: LD_VAR 0 1
50262: PUSH
50263: LD_VAR 0 2
50267: PUSH
50268: LD_INT 4
50270: MINUS
50271: PUSH
50272: LD_INT 3
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: PUSH
50280: LD_VAR 0 1
50284: PUSH
50285: LD_INT 4
50287: PLUS
50288: PUSH
50289: LD_VAR 0 2
50293: PUSH
50294: LD_INT 4
50296: PLUS
50297: PUSH
50298: LD_INT 5
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: PUSH
50306: LD_VAR 0 1
50310: PUSH
50311: LD_INT 3
50313: PLUS
50314: PUSH
50315: LD_VAR 0 2
50319: PUSH
50320: LD_INT 4
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: PUSH
50328: LD_VAR 0 1
50332: PUSH
50333: LD_VAR 0 2
50337: PUSH
50338: LD_INT 3
50340: PLUS
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: ST_TO_ADDR
// end ; end ;
50357: GO 50360
50359: POP
// result := list ;
50360: LD_ADDR_VAR 0 4
50364: PUSH
50365: LD_VAR 0 5
50369: ST_TO_ADDR
// end ;
50370: LD_VAR 0 4
50374: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50375: LD_INT 0
50377: PPUSH
50378: PPUSH
50379: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50380: LD_VAR 0 1
50384: NOT
50385: PUSH
50386: LD_VAR 0 2
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: LD_INT 3
50399: PUSH
50400: LD_INT 4
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: IN
50409: NOT
50410: OR
50411: IFFALSE 50415
// exit ;
50413: GO 50507
// tmp := [ ] ;
50415: LD_ADDR_VAR 0 5
50419: PUSH
50420: EMPTY
50421: ST_TO_ADDR
// for i in units do
50422: LD_ADDR_VAR 0 4
50426: PUSH
50427: LD_VAR 0 1
50431: PUSH
50432: FOR_IN
50433: IFFALSE 50476
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
50435: LD_ADDR_VAR 0 5
50439: PUSH
50440: LD_VAR 0 5
50444: PPUSH
50445: LD_VAR 0 5
50449: PUSH
50450: LD_INT 1
50452: PLUS
50453: PPUSH
50454: LD_VAR 0 4
50458: PPUSH
50459: LD_VAR 0 2
50463: PPUSH
50464: CALL_OW 259
50468: PPUSH
50469: CALL_OW 2
50473: ST_TO_ADDR
50474: GO 50432
50476: POP
50477: POP
// if not tmp then
50478: LD_VAR 0 5
50482: NOT
50483: IFFALSE 50487
// exit ;
50485: GO 50507
// result := SortListByListDesc ( units , tmp ) ;
50487: LD_ADDR_VAR 0 3
50491: PUSH
50492: LD_VAR 0 1
50496: PPUSH
50497: LD_VAR 0 5
50501: PPUSH
50502: CALL_OW 77
50506: ST_TO_ADDR
// end ;
50507: LD_VAR 0 3
50511: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50512: LD_INT 0
50514: PPUSH
50515: PPUSH
50516: PPUSH
// result := false ;
50517: LD_ADDR_VAR 0 3
50521: PUSH
50522: LD_INT 0
50524: ST_TO_ADDR
// x := GetX ( building ) ;
50525: LD_ADDR_VAR 0 4
50529: PUSH
50530: LD_VAR 0 2
50534: PPUSH
50535: CALL_OW 250
50539: ST_TO_ADDR
// y := GetY ( building ) ;
50540: LD_ADDR_VAR 0 5
50544: PUSH
50545: LD_VAR 0 2
50549: PPUSH
50550: CALL_OW 251
50554: ST_TO_ADDR
// if not building or not x or not y then
50555: LD_VAR 0 2
50559: NOT
50560: PUSH
50561: LD_VAR 0 4
50565: NOT
50566: OR
50567: PUSH
50568: LD_VAR 0 5
50572: NOT
50573: OR
50574: IFFALSE 50578
// exit ;
50576: GO 50670
// if GetTaskList ( unit ) then
50578: LD_VAR 0 1
50582: PPUSH
50583: CALL_OW 437
50587: IFFALSE 50670
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50589: LD_STRING e
50591: PUSH
50592: LD_VAR 0 1
50596: PPUSH
50597: CALL_OW 437
50601: PUSH
50602: LD_INT 1
50604: ARRAY
50605: PUSH
50606: LD_INT 1
50608: ARRAY
50609: EQUAL
50610: PUSH
50611: LD_VAR 0 4
50615: PUSH
50616: LD_VAR 0 1
50620: PPUSH
50621: CALL_OW 437
50625: PUSH
50626: LD_INT 1
50628: ARRAY
50629: PUSH
50630: LD_INT 2
50632: ARRAY
50633: EQUAL
50634: AND
50635: PUSH
50636: LD_VAR 0 5
50640: PUSH
50641: LD_VAR 0 1
50645: PPUSH
50646: CALL_OW 437
50650: PUSH
50651: LD_INT 1
50653: ARRAY
50654: PUSH
50655: LD_INT 3
50657: ARRAY
50658: EQUAL
50659: AND
50660: IFFALSE 50670
// result := true end ;
50662: LD_ADDR_VAR 0 3
50666: PUSH
50667: LD_INT 1
50669: ST_TO_ADDR
// end ;
50670: LD_VAR 0 3
50674: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50675: LD_INT 0
50677: PPUSH
// result := false ;
50678: LD_ADDR_VAR 0 4
50682: PUSH
50683: LD_INT 0
50685: ST_TO_ADDR
// if GetTaskList ( unit ) then
50686: LD_VAR 0 1
50690: PPUSH
50691: CALL_OW 437
50695: IFFALSE 50778
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50697: LD_STRING M
50699: PUSH
50700: LD_VAR 0 1
50704: PPUSH
50705: CALL_OW 437
50709: PUSH
50710: LD_INT 1
50712: ARRAY
50713: PUSH
50714: LD_INT 1
50716: ARRAY
50717: EQUAL
50718: PUSH
50719: LD_VAR 0 2
50723: PUSH
50724: LD_VAR 0 1
50728: PPUSH
50729: CALL_OW 437
50733: PUSH
50734: LD_INT 1
50736: ARRAY
50737: PUSH
50738: LD_INT 2
50740: ARRAY
50741: EQUAL
50742: AND
50743: PUSH
50744: LD_VAR 0 3
50748: PUSH
50749: LD_VAR 0 1
50753: PPUSH
50754: CALL_OW 437
50758: PUSH
50759: LD_INT 1
50761: ARRAY
50762: PUSH
50763: LD_INT 3
50765: ARRAY
50766: EQUAL
50767: AND
50768: IFFALSE 50778
// result := true ;
50770: LD_ADDR_VAR 0 4
50774: PUSH
50775: LD_INT 1
50777: ST_TO_ADDR
// end ; end ;
50778: LD_VAR 0 4
50782: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50783: LD_INT 0
50785: PPUSH
50786: PPUSH
50787: PPUSH
50788: PPUSH
// if not unit or not area then
50789: LD_VAR 0 1
50793: NOT
50794: PUSH
50795: LD_VAR 0 2
50799: NOT
50800: OR
50801: IFFALSE 50805
// exit ;
50803: GO 50969
// tmp := AreaToList ( area , i ) ;
50805: LD_ADDR_VAR 0 6
50809: PUSH
50810: LD_VAR 0 2
50814: PPUSH
50815: LD_VAR 0 5
50819: PPUSH
50820: CALL_OW 517
50824: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50825: LD_ADDR_VAR 0 5
50829: PUSH
50830: DOUBLE
50831: LD_INT 1
50833: DEC
50834: ST_TO_ADDR
50835: LD_VAR 0 6
50839: PUSH
50840: LD_INT 1
50842: ARRAY
50843: PUSH
50844: FOR_TO
50845: IFFALSE 50967
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50847: LD_ADDR_VAR 0 7
50851: PUSH
50852: LD_VAR 0 6
50856: PUSH
50857: LD_INT 1
50859: ARRAY
50860: PUSH
50861: LD_VAR 0 5
50865: ARRAY
50866: PUSH
50867: LD_VAR 0 6
50871: PUSH
50872: LD_INT 2
50874: ARRAY
50875: PUSH
50876: LD_VAR 0 5
50880: ARRAY
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
50886: LD_VAR 0 7
50890: PUSH
50891: LD_INT 1
50893: ARRAY
50894: PPUSH
50895: LD_VAR 0 7
50899: PUSH
50900: LD_INT 2
50902: ARRAY
50903: PPUSH
50904: CALL_OW 428
50908: PUSH
50909: LD_INT 0
50911: EQUAL
50912: IFFALSE 50965
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50914: LD_VAR 0 1
50918: PPUSH
50919: LD_VAR 0 7
50923: PUSH
50924: LD_INT 1
50926: ARRAY
50927: PPUSH
50928: LD_VAR 0 7
50932: PUSH
50933: LD_INT 2
50935: ARRAY
50936: PPUSH
50937: LD_VAR 0 3
50941: PPUSH
50942: CALL_OW 48
// result := IsPlaced ( unit ) ;
50946: LD_ADDR_VAR 0 4
50950: PUSH
50951: LD_VAR 0 1
50955: PPUSH
50956: CALL_OW 305
50960: ST_TO_ADDR
// exit ;
50961: POP
50962: POP
50963: GO 50969
// end ; end ;
50965: GO 50844
50967: POP
50968: POP
// end ;
50969: LD_VAR 0 4
50973: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50974: LD_INT 0
50976: PPUSH
50977: PPUSH
50978: PPUSH
// if not side or side > 8 then
50979: LD_VAR 0 1
50983: NOT
50984: PUSH
50985: LD_VAR 0 1
50989: PUSH
50990: LD_INT 8
50992: GREATER
50993: OR
50994: IFFALSE 50998
// exit ;
50996: GO 51185
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50998: LD_ADDR_VAR 0 4
51002: PUSH
51003: LD_INT 22
51005: PUSH
51006: LD_VAR 0 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 21
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PPUSH
51029: CALL_OW 69
51033: ST_TO_ADDR
// if not tmp then
51034: LD_VAR 0 4
51038: NOT
51039: IFFALSE 51043
// exit ;
51041: GO 51185
// enable_addtolog := true ;
51043: LD_ADDR_OWVAR 81
51047: PUSH
51048: LD_INT 1
51050: ST_TO_ADDR
// AddToLog ( [ ) ;
51051: LD_STRING [
51053: PPUSH
51054: CALL_OW 561
// for i in tmp do
51058: LD_ADDR_VAR 0 3
51062: PUSH
51063: LD_VAR 0 4
51067: PUSH
51068: FOR_IN
51069: IFFALSE 51176
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51071: LD_STRING [
51073: PUSH
51074: LD_VAR 0 3
51078: PPUSH
51079: CALL_OW 266
51083: STR
51084: PUSH
51085: LD_STRING , 
51087: STR
51088: PUSH
51089: LD_VAR 0 3
51093: PPUSH
51094: CALL_OW 250
51098: STR
51099: PUSH
51100: LD_STRING , 
51102: STR
51103: PUSH
51104: LD_VAR 0 3
51108: PPUSH
51109: CALL_OW 251
51113: STR
51114: PUSH
51115: LD_STRING , 
51117: STR
51118: PUSH
51119: LD_VAR 0 3
51123: PPUSH
51124: CALL_OW 254
51128: STR
51129: PUSH
51130: LD_STRING , 
51132: STR
51133: PUSH
51134: LD_VAR 0 3
51138: PPUSH
51139: LD_INT 1
51141: PPUSH
51142: CALL_OW 268
51146: STR
51147: PUSH
51148: LD_STRING , 
51150: STR
51151: PUSH
51152: LD_VAR 0 3
51156: PPUSH
51157: LD_INT 2
51159: PPUSH
51160: CALL_OW 268
51164: STR
51165: PUSH
51166: LD_STRING ],
51168: STR
51169: PPUSH
51170: CALL_OW 561
// end ;
51174: GO 51068
51176: POP
51177: POP
// AddToLog ( ]; ) ;
51178: LD_STRING ];
51180: PPUSH
51181: CALL_OW 561
// end ;
51185: LD_VAR 0 2
51189: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51190: LD_INT 0
51192: PPUSH
51193: PPUSH
51194: PPUSH
51195: PPUSH
51196: PPUSH
// if not area or not rate or not max then
51197: LD_VAR 0 1
51201: NOT
51202: PUSH
51203: LD_VAR 0 2
51207: NOT
51208: OR
51209: PUSH
51210: LD_VAR 0 4
51214: NOT
51215: OR
51216: IFFALSE 51220
// exit ;
51218: GO 51409
// while 1 do
51220: LD_INT 1
51222: IFFALSE 51409
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51224: LD_ADDR_VAR 0 9
51228: PUSH
51229: LD_VAR 0 1
51233: PPUSH
51234: LD_INT 1
51236: PPUSH
51237: CALL_OW 287
51241: PUSH
51242: LD_INT 10
51244: MUL
51245: ST_TO_ADDR
// r := rate / 10 ;
51246: LD_ADDR_VAR 0 7
51250: PUSH
51251: LD_VAR 0 2
51255: PUSH
51256: LD_INT 10
51258: DIVREAL
51259: ST_TO_ADDR
// time := 1 1$00 ;
51260: LD_ADDR_VAR 0 8
51264: PUSH
51265: LD_INT 2100
51267: ST_TO_ADDR
// if amount < min then
51268: LD_VAR 0 9
51272: PUSH
51273: LD_VAR 0 3
51277: LESS
51278: IFFALSE 51296
// r := r * 2 else
51280: LD_ADDR_VAR 0 7
51284: PUSH
51285: LD_VAR 0 7
51289: PUSH
51290: LD_INT 2
51292: MUL
51293: ST_TO_ADDR
51294: GO 51322
// if amount > max then
51296: LD_VAR 0 9
51300: PUSH
51301: LD_VAR 0 4
51305: GREATER
51306: IFFALSE 51322
// r := r / 2 ;
51308: LD_ADDR_VAR 0 7
51312: PUSH
51313: LD_VAR 0 7
51317: PUSH
51318: LD_INT 2
51320: DIVREAL
51321: ST_TO_ADDR
// time := time / r ;
51322: LD_ADDR_VAR 0 8
51326: PUSH
51327: LD_VAR 0 8
51331: PUSH
51332: LD_VAR 0 7
51336: DIVREAL
51337: ST_TO_ADDR
// if time < 0 then
51338: LD_VAR 0 8
51342: PUSH
51343: LD_INT 0
51345: LESS
51346: IFFALSE 51363
// time := time * - 1 ;
51348: LD_ADDR_VAR 0 8
51352: PUSH
51353: LD_VAR 0 8
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: MUL
51362: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
51363: LD_VAR 0 8
51367: PUSH
51368: LD_INT 35
51370: PPUSH
51371: LD_INT 875
51373: PPUSH
51374: CALL_OW 12
51378: PLUS
51379: PPUSH
51380: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51384: LD_INT 1
51386: PPUSH
51387: LD_INT 5
51389: PPUSH
51390: CALL_OW 12
51394: PPUSH
51395: LD_VAR 0 1
51399: PPUSH
51400: LD_INT 1
51402: PPUSH
51403: CALL_OW 55
// end ;
51407: GO 51220
// end ;
51409: LD_VAR 0 5
51413: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51414: LD_INT 0
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
// if not turrets or not factories then
51424: LD_VAR 0 1
51428: NOT
51429: PUSH
51430: LD_VAR 0 2
51434: NOT
51435: OR
51436: IFFALSE 51440
// exit ;
51438: GO 51747
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51440: LD_ADDR_VAR 0 10
51444: PUSH
51445: LD_INT 5
51447: PUSH
51448: LD_INT 6
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 4
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: LD_INT 5
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 24
51482: PUSH
51483: LD_INT 25
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 23
51492: PUSH
51493: LD_INT 27
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 42
51506: PUSH
51507: LD_INT 43
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 44
51516: PUSH
51517: LD_INT 46
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 45
51526: PUSH
51527: LD_INT 47
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: ST_TO_ADDR
// result := [ ] ;
51544: LD_ADDR_VAR 0 3
51548: PUSH
51549: EMPTY
51550: ST_TO_ADDR
// for i in turrets do
51551: LD_ADDR_VAR 0 4
51555: PUSH
51556: LD_VAR 0 1
51560: PUSH
51561: FOR_IN
51562: IFFALSE 51745
// begin nat := GetNation ( i ) ;
51564: LD_ADDR_VAR 0 7
51568: PUSH
51569: LD_VAR 0 4
51573: PPUSH
51574: CALL_OW 248
51578: ST_TO_ADDR
// weapon := 0 ;
51579: LD_ADDR_VAR 0 8
51583: PUSH
51584: LD_INT 0
51586: ST_TO_ADDR
// if not nat then
51587: LD_VAR 0 7
51591: NOT
51592: IFFALSE 51596
// continue ;
51594: GO 51561
// for j in list [ nat ] do
51596: LD_ADDR_VAR 0 5
51600: PUSH
51601: LD_VAR 0 10
51605: PUSH
51606: LD_VAR 0 7
51610: ARRAY
51611: PUSH
51612: FOR_IN
51613: IFFALSE 51654
// if GetBWeapon ( i ) = j [ 1 ] then
51615: LD_VAR 0 4
51619: PPUSH
51620: CALL_OW 269
51624: PUSH
51625: LD_VAR 0 5
51629: PUSH
51630: LD_INT 1
51632: ARRAY
51633: EQUAL
51634: IFFALSE 51652
// begin weapon := j [ 2 ] ;
51636: LD_ADDR_VAR 0 8
51640: PUSH
51641: LD_VAR 0 5
51645: PUSH
51646: LD_INT 2
51648: ARRAY
51649: ST_TO_ADDR
// break ;
51650: GO 51654
// end ;
51652: GO 51612
51654: POP
51655: POP
// if not weapon then
51656: LD_VAR 0 8
51660: NOT
51661: IFFALSE 51665
// continue ;
51663: GO 51561
// for k in factories do
51665: LD_ADDR_VAR 0 6
51669: PUSH
51670: LD_VAR 0 2
51674: PUSH
51675: FOR_IN
51676: IFFALSE 51741
// begin weapons := AvailableWeaponList ( k ) ;
51678: LD_ADDR_VAR 0 9
51682: PUSH
51683: LD_VAR 0 6
51687: PPUSH
51688: CALL_OW 478
51692: ST_TO_ADDR
// if not weapons then
51693: LD_VAR 0 9
51697: NOT
51698: IFFALSE 51702
// continue ;
51700: GO 51675
// if weapon in weapons then
51702: LD_VAR 0 8
51706: PUSH
51707: LD_VAR 0 9
51711: IN
51712: IFFALSE 51739
// begin result := [ i , weapon ] ;
51714: LD_ADDR_VAR 0 3
51718: PUSH
51719: LD_VAR 0 4
51723: PUSH
51724: LD_VAR 0 8
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: ST_TO_ADDR
// exit ;
51733: POP
51734: POP
51735: POP
51736: POP
51737: GO 51747
// end ; end ;
51739: GO 51675
51741: POP
51742: POP
// end ;
51743: GO 51561
51745: POP
51746: POP
// end ;
51747: LD_VAR 0 3
51751: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51752: LD_INT 0
51754: PPUSH
// if not side or side > 8 then
51755: LD_VAR 0 3
51759: NOT
51760: PUSH
51761: LD_VAR 0 3
51765: PUSH
51766: LD_INT 8
51768: GREATER
51769: OR
51770: IFFALSE 51774
// exit ;
51772: GO 51833
// if not range then
51774: LD_VAR 0 4
51778: NOT
51779: IFFALSE 51790
// range := - 12 ;
51781: LD_ADDR_VAR 0 4
51785: PUSH
51786: LD_INT 12
51788: NEG
51789: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51790: LD_VAR 0 1
51794: PPUSH
51795: LD_VAR 0 2
51799: PPUSH
51800: LD_VAR 0 3
51804: PPUSH
51805: LD_VAR 0 4
51809: PPUSH
51810: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51814: LD_VAR 0 1
51818: PPUSH
51819: LD_VAR 0 2
51823: PPUSH
51824: LD_VAR 0 3
51828: PPUSH
51829: CALL_OW 331
// end ;
51833: LD_VAR 0 5
51837: RET
// export function Video ( mode ) ; begin
51838: LD_INT 0
51840: PPUSH
// ingame_video = mode ;
51841: LD_ADDR_OWVAR 52
51845: PUSH
51846: LD_VAR 0 1
51850: ST_TO_ADDR
// interface_hidden = mode ;
51851: LD_ADDR_OWVAR 54
51855: PUSH
51856: LD_VAR 0 1
51860: ST_TO_ADDR
// end ;
51861: LD_VAR 0 2
51865: RET
// export function Join ( array , element ) ; begin
51866: LD_INT 0
51868: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51869: LD_ADDR_VAR 0 3
51873: PUSH
51874: LD_VAR 0 1
51878: PPUSH
51879: LD_VAR 0 1
51883: PUSH
51884: LD_INT 1
51886: PLUS
51887: PPUSH
51888: LD_VAR 0 2
51892: PPUSH
51893: CALL_OW 1
51897: ST_TO_ADDR
// end ;
51898: LD_VAR 0 3
51902: RET
// export function JoinUnion ( array , element ) ; begin
51903: LD_INT 0
51905: PPUSH
// result := array union element ;
51906: LD_ADDR_VAR 0 3
51910: PUSH
51911: LD_VAR 0 1
51915: PUSH
51916: LD_VAR 0 2
51920: UNION
51921: ST_TO_ADDR
// end ;
51922: LD_VAR 0 3
51926: RET
// export function GetBehemoths ( side ) ; begin
51927: LD_INT 0
51929: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
51930: LD_ADDR_VAR 0 2
51934: PUSH
51935: LD_INT 22
51937: PUSH
51938: LD_VAR 0 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 31
51949: PUSH
51950: LD_INT 25
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PPUSH
51961: CALL_OW 69
51965: ST_TO_ADDR
// end ;
51966: LD_VAR 0 2
51970: RET
// export function Shuffle ( array ) ; var i , index ; begin
51971: LD_INT 0
51973: PPUSH
51974: PPUSH
51975: PPUSH
// result := [ ] ;
51976: LD_ADDR_VAR 0 2
51980: PUSH
51981: EMPTY
51982: ST_TO_ADDR
// if not array then
51983: LD_VAR 0 1
51987: NOT
51988: IFFALSE 51992
// exit ;
51990: GO 52091
// Randomize ;
51992: CALL_OW 10
// for i = array downto 1 do
51996: LD_ADDR_VAR 0 3
52000: PUSH
52001: DOUBLE
52002: LD_VAR 0 1
52006: INC
52007: ST_TO_ADDR
52008: LD_INT 1
52010: PUSH
52011: FOR_DOWNTO
52012: IFFALSE 52089
// begin index := rand ( 1 , array ) ;
52014: LD_ADDR_VAR 0 4
52018: PUSH
52019: LD_INT 1
52021: PPUSH
52022: LD_VAR 0 1
52026: PPUSH
52027: CALL_OW 12
52031: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52032: LD_ADDR_VAR 0 2
52036: PUSH
52037: LD_VAR 0 2
52041: PPUSH
52042: LD_VAR 0 2
52046: PUSH
52047: LD_INT 1
52049: PLUS
52050: PPUSH
52051: LD_VAR 0 1
52055: PUSH
52056: LD_VAR 0 4
52060: ARRAY
52061: PPUSH
52062: CALL_OW 2
52066: ST_TO_ADDR
// array := Delete ( array , index ) ;
52067: LD_ADDR_VAR 0 1
52071: PUSH
52072: LD_VAR 0 1
52076: PPUSH
52077: LD_VAR 0 4
52081: PPUSH
52082: CALL_OW 3
52086: ST_TO_ADDR
// end ;
52087: GO 52011
52089: POP
52090: POP
// end ;
52091: LD_VAR 0 2
52095: RET
// export function GetBaseMaterials ( base ) ; begin
52096: LD_INT 0
52098: PPUSH
// result := [ 0 , 0 , 0 ] ;
52099: LD_ADDR_VAR 0 2
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: ST_TO_ADDR
// if not base then
52118: LD_VAR 0 1
52122: NOT
52123: IFFALSE 52127
// exit ;
52125: GO 52176
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52127: LD_ADDR_VAR 0 2
52131: PUSH
52132: LD_VAR 0 1
52136: PPUSH
52137: LD_INT 1
52139: PPUSH
52140: CALL_OW 275
52144: PUSH
52145: LD_VAR 0 1
52149: PPUSH
52150: LD_INT 2
52152: PPUSH
52153: CALL_OW 275
52157: PUSH
52158: LD_VAR 0 1
52162: PPUSH
52163: LD_INT 3
52165: PPUSH
52166: CALL_OW 275
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// end ;
52176: LD_VAR 0 2
52180: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52181: LD_INT 0
52183: PPUSH
52184: PPUSH
// result := array ;
52185: LD_ADDR_VAR 0 3
52189: PUSH
52190: LD_VAR 0 1
52194: ST_TO_ADDR
// if size >= result then
52195: LD_VAR 0 2
52199: PUSH
52200: LD_VAR 0 3
52204: GREATEREQUAL
52205: IFFALSE 52209
// exit ;
52207: GO 52259
// if size then
52209: LD_VAR 0 2
52213: IFFALSE 52259
// for i := array downto size do
52215: LD_ADDR_VAR 0 4
52219: PUSH
52220: DOUBLE
52221: LD_VAR 0 1
52225: INC
52226: ST_TO_ADDR
52227: LD_VAR 0 2
52231: PUSH
52232: FOR_DOWNTO
52233: IFFALSE 52257
// result := Delete ( result , result ) ;
52235: LD_ADDR_VAR 0 3
52239: PUSH
52240: LD_VAR 0 3
52244: PPUSH
52245: LD_VAR 0 3
52249: PPUSH
52250: CALL_OW 3
52254: ST_TO_ADDR
52255: GO 52232
52257: POP
52258: POP
// end ;
52259: LD_VAR 0 3
52263: RET
// export function ComExit ( unit ) ; var tmp ; begin
52264: LD_INT 0
52266: PPUSH
52267: PPUSH
// if not IsInUnit ( unit ) then
52268: LD_VAR 0 1
52272: PPUSH
52273: CALL_OW 310
52277: NOT
52278: IFFALSE 52282
// exit ;
52280: GO 52342
// tmp := IsInUnit ( unit ) ;
52282: LD_ADDR_VAR 0 3
52286: PUSH
52287: LD_VAR 0 1
52291: PPUSH
52292: CALL_OW 310
52296: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52297: LD_VAR 0 3
52301: PPUSH
52302: CALL_OW 247
52306: PUSH
52307: LD_INT 2
52309: EQUAL
52310: IFFALSE 52323
// ComExitVehicle ( unit ) else
52312: LD_VAR 0 1
52316: PPUSH
52317: CALL_OW 121
52321: GO 52332
// ComExitBuilding ( unit ) ;
52323: LD_VAR 0 1
52327: PPUSH
52328: CALL_OW 122
// result := tmp ;
52332: LD_ADDR_VAR 0 2
52336: PUSH
52337: LD_VAR 0 3
52341: ST_TO_ADDR
// end ;
52342: LD_VAR 0 2
52346: RET
// export function ComExitAll ( units ) ; var i ; begin
52347: LD_INT 0
52349: PPUSH
52350: PPUSH
// if not units then
52351: LD_VAR 0 1
52355: NOT
52356: IFFALSE 52360
// exit ;
52358: GO 52386
// for i in units do
52360: LD_ADDR_VAR 0 3
52364: PUSH
52365: LD_VAR 0 1
52369: PUSH
52370: FOR_IN
52371: IFFALSE 52384
// ComExit ( i ) ;
52373: LD_VAR 0 3
52377: PPUSH
52378: CALL 52264 0 1
52382: GO 52370
52384: POP
52385: POP
// end ;
52386: LD_VAR 0 2
52390: RET
// export function ResetHc ; begin
52391: LD_INT 0
52393: PPUSH
// InitHc ;
52394: CALL_OW 19
// hc_importance := 0 ;
52398: LD_ADDR_OWVAR 32
52402: PUSH
52403: LD_INT 0
52405: ST_TO_ADDR
// end ;
52406: LD_VAR 0 1
52410: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52411: LD_INT 0
52413: PPUSH
52414: PPUSH
52415: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52416: LD_ADDR_VAR 0 6
52420: PUSH
52421: LD_VAR 0 1
52425: PUSH
52426: LD_VAR 0 3
52430: PLUS
52431: PUSH
52432: LD_INT 2
52434: DIV
52435: ST_TO_ADDR
// if _x < 0 then
52436: LD_VAR 0 6
52440: PUSH
52441: LD_INT 0
52443: LESS
52444: IFFALSE 52461
// _x := _x * - 1 ;
52446: LD_ADDR_VAR 0 6
52450: PUSH
52451: LD_VAR 0 6
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: MUL
52460: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
52461: LD_ADDR_VAR 0 7
52465: PUSH
52466: LD_VAR 0 2
52470: PUSH
52471: LD_VAR 0 4
52475: PLUS
52476: PUSH
52477: LD_INT 2
52479: DIV
52480: ST_TO_ADDR
// if _y < 0 then
52481: LD_VAR 0 7
52485: PUSH
52486: LD_INT 0
52488: LESS
52489: IFFALSE 52506
// _y := _y * - 1 ;
52491: LD_ADDR_VAR 0 7
52495: PUSH
52496: LD_VAR 0 7
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: MUL
52505: ST_TO_ADDR
// result := [ _x , _y ] ;
52506: LD_ADDR_VAR 0 5
52510: PUSH
52511: LD_VAR 0 6
52515: PUSH
52516: LD_VAR 0 7
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: ST_TO_ADDR
// end ;
52525: LD_VAR 0 5
52529: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52530: LD_INT 0
52532: PPUSH
52533: PPUSH
52534: PPUSH
52535: PPUSH
// task := GetTaskList ( unit ) ;
52536: LD_ADDR_VAR 0 7
52540: PUSH
52541: LD_VAR 0 1
52545: PPUSH
52546: CALL_OW 437
52550: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52551: LD_VAR 0 7
52555: NOT
52556: PUSH
52557: LD_VAR 0 1
52561: PPUSH
52562: LD_VAR 0 2
52566: PPUSH
52567: CALL_OW 308
52571: NOT
52572: AND
52573: IFFALSE 52577
// exit ;
52575: GO 52695
// if IsInArea ( unit , area ) then
52577: LD_VAR 0 1
52581: PPUSH
52582: LD_VAR 0 2
52586: PPUSH
52587: CALL_OW 308
52591: IFFALSE 52609
// begin ComMoveToArea ( unit , goAway ) ;
52593: LD_VAR 0 1
52597: PPUSH
52598: LD_VAR 0 3
52602: PPUSH
52603: CALL_OW 113
// exit ;
52607: GO 52695
// end ; if task [ 1 ] [ 1 ] <> M then
52609: LD_VAR 0 7
52613: PUSH
52614: LD_INT 1
52616: ARRAY
52617: PUSH
52618: LD_INT 1
52620: ARRAY
52621: PUSH
52622: LD_STRING M
52624: NONEQUAL
52625: IFFALSE 52629
// exit ;
52627: GO 52695
// x := task [ 1 ] [ 2 ] ;
52629: LD_ADDR_VAR 0 5
52633: PUSH
52634: LD_VAR 0 7
52638: PUSH
52639: LD_INT 1
52641: ARRAY
52642: PUSH
52643: LD_INT 2
52645: ARRAY
52646: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52647: LD_ADDR_VAR 0 6
52651: PUSH
52652: LD_VAR 0 7
52656: PUSH
52657: LD_INT 1
52659: ARRAY
52660: PUSH
52661: LD_INT 3
52663: ARRAY
52664: ST_TO_ADDR
// if InArea ( x , y , area ) then
52665: LD_VAR 0 5
52669: PPUSH
52670: LD_VAR 0 6
52674: PPUSH
52675: LD_VAR 0 2
52679: PPUSH
52680: CALL_OW 309
52684: IFFALSE 52695
// ComStop ( unit ) ;
52686: LD_VAR 0 1
52690: PPUSH
52691: CALL_OW 141
// end ;
52695: LD_VAR 0 4
52699: RET
// export function Abs ( value ) ; begin
52700: LD_INT 0
52702: PPUSH
// result := value ;
52703: LD_ADDR_VAR 0 2
52707: PUSH
52708: LD_VAR 0 1
52712: ST_TO_ADDR
// if value < 0 then
52713: LD_VAR 0 1
52717: PUSH
52718: LD_INT 0
52720: LESS
52721: IFFALSE 52738
// result := value * - 1 ;
52723: LD_ADDR_VAR 0 2
52727: PUSH
52728: LD_VAR 0 1
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: MUL
52737: ST_TO_ADDR
// end ;
52738: LD_VAR 0 2
52742: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52743: LD_INT 0
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
52752: PPUSH
// if not unit or not building then
52753: LD_VAR 0 1
52757: NOT
52758: PUSH
52759: LD_VAR 0 2
52763: NOT
52764: OR
52765: IFFALSE 52769
// exit ;
52767: GO 52995
// x := GetX ( building ) ;
52769: LD_ADDR_VAR 0 4
52773: PUSH
52774: LD_VAR 0 2
52778: PPUSH
52779: CALL_OW 250
52783: ST_TO_ADDR
// y := GetY ( building ) ;
52784: LD_ADDR_VAR 0 6
52788: PUSH
52789: LD_VAR 0 2
52793: PPUSH
52794: CALL_OW 251
52798: ST_TO_ADDR
// d := GetDir ( building ) ;
52799: LD_ADDR_VAR 0 8
52803: PUSH
52804: LD_VAR 0 2
52808: PPUSH
52809: CALL_OW 254
52813: ST_TO_ADDR
// r := 4 ;
52814: LD_ADDR_VAR 0 9
52818: PUSH
52819: LD_INT 4
52821: ST_TO_ADDR
// for i := 1 to 5 do
52822: LD_ADDR_VAR 0 10
52826: PUSH
52827: DOUBLE
52828: LD_INT 1
52830: DEC
52831: ST_TO_ADDR
52832: LD_INT 5
52834: PUSH
52835: FOR_TO
52836: IFFALSE 52993
// begin _x := ShiftX ( x , d , r + i ) ;
52838: LD_ADDR_VAR 0 5
52842: PUSH
52843: LD_VAR 0 4
52847: PPUSH
52848: LD_VAR 0 8
52852: PPUSH
52853: LD_VAR 0 9
52857: PUSH
52858: LD_VAR 0 10
52862: PLUS
52863: PPUSH
52864: CALL_OW 272
52868: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52869: LD_ADDR_VAR 0 7
52873: PUSH
52874: LD_VAR 0 6
52878: PPUSH
52879: LD_VAR 0 8
52883: PPUSH
52884: LD_VAR 0 9
52888: PUSH
52889: LD_VAR 0 10
52893: PLUS
52894: PPUSH
52895: CALL_OW 273
52899: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52900: LD_VAR 0 5
52904: PPUSH
52905: LD_VAR 0 7
52909: PPUSH
52910: CALL_OW 488
52914: PUSH
52915: LD_VAR 0 5
52919: PPUSH
52920: LD_VAR 0 7
52924: PPUSH
52925: CALL_OW 428
52929: PPUSH
52930: CALL_OW 247
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: IN
52945: NOT
52946: AND
52947: IFFALSE 52991
// begin ComMoveXY ( unit , _x , _y ) ;
52949: LD_VAR 0 1
52953: PPUSH
52954: LD_VAR 0 5
52958: PPUSH
52959: LD_VAR 0 7
52963: PPUSH
52964: CALL_OW 111
// result := [ _x , _y ] ;
52968: LD_ADDR_VAR 0 3
52972: PUSH
52973: LD_VAR 0 5
52977: PUSH
52978: LD_VAR 0 7
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// exit ;
52987: POP
52988: POP
52989: GO 52995
// end ; end ;
52991: GO 52835
52993: POP
52994: POP
// end ;
52995: LD_VAR 0 3
52999: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53000: LD_INT 0
53002: PPUSH
53003: PPUSH
53004: PPUSH
// result := 0 ;
53005: LD_ADDR_VAR 0 3
53009: PUSH
53010: LD_INT 0
53012: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53013: LD_VAR 0 1
53017: PUSH
53018: LD_INT 0
53020: LESS
53021: PUSH
53022: LD_VAR 0 1
53026: PUSH
53027: LD_INT 8
53029: GREATER
53030: OR
53031: PUSH
53032: LD_VAR 0 2
53036: PUSH
53037: LD_INT 0
53039: LESS
53040: OR
53041: PUSH
53042: LD_VAR 0 2
53046: PUSH
53047: LD_INT 8
53049: GREATER
53050: OR
53051: IFFALSE 53055
// exit ;
53053: GO 53130
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53055: LD_ADDR_VAR 0 4
53059: PUSH
53060: LD_INT 22
53062: PUSH
53063: LD_VAR 0 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PPUSH
53072: CALL_OW 69
53076: PUSH
53077: FOR_IN
53078: IFFALSE 53128
// begin un := UnitShoot ( i ) ;
53080: LD_ADDR_VAR 0 5
53084: PUSH
53085: LD_VAR 0 4
53089: PPUSH
53090: CALL_OW 504
53094: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53095: LD_VAR 0 5
53099: PPUSH
53100: CALL_OW 255
53104: PUSH
53105: LD_VAR 0 1
53109: EQUAL
53110: IFFALSE 53126
// begin result := un ;
53112: LD_ADDR_VAR 0 3
53116: PUSH
53117: LD_VAR 0 5
53121: ST_TO_ADDR
// exit ;
53122: POP
53123: POP
53124: GO 53130
// end ; end ;
53126: GO 53077
53128: POP
53129: POP
// end ;
53130: LD_VAR 0 3
53134: RET
// export function GetCargoBay ( units ) ; begin
53135: LD_INT 0
53137: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53138: LD_ADDR_VAR 0 2
53142: PUSH
53143: LD_VAR 0 1
53147: PPUSH
53148: LD_INT 2
53150: PUSH
53151: LD_INT 34
53153: PUSH
53154: LD_INT 12
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 34
53163: PUSH
53164: LD_INT 51
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 34
53173: PUSH
53174: LD_INT 32
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 34
53183: PUSH
53184: LD_INT 89
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: PPUSH
53198: CALL_OW 72
53202: ST_TO_ADDR
// end ;
53203: LD_VAR 0 2
53207: RET
// export function Negate ( value ) ; begin
53208: LD_INT 0
53210: PPUSH
// result := not value ;
53211: LD_ADDR_VAR 0 2
53215: PUSH
53216: LD_VAR 0 1
53220: NOT
53221: ST_TO_ADDR
// end ;
53222: LD_VAR 0 2
53226: RET
// export function Inc ( value ) ; begin
53227: LD_INT 0
53229: PPUSH
// result := value + 1 ;
53230: LD_ADDR_VAR 0 2
53234: PUSH
53235: LD_VAR 0 1
53239: PUSH
53240: LD_INT 1
53242: PLUS
53243: ST_TO_ADDR
// end ;
53244: LD_VAR 0 2
53248: RET
// export function Dec ( value ) ; begin
53249: LD_INT 0
53251: PPUSH
// result := value - 1 ;
53252: LD_ADDR_VAR 0 2
53256: PUSH
53257: LD_VAR 0 1
53261: PUSH
53262: LD_INT 1
53264: MINUS
53265: ST_TO_ADDR
// end ;
53266: LD_VAR 0 2
53270: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
53271: LD_INT 0
53273: PPUSH
53274: PPUSH
53275: PPUSH
53276: PPUSH
53277: PPUSH
53278: PPUSH
53279: PPUSH
53280: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
53281: LD_VAR 0 1
53285: PPUSH
53286: LD_VAR 0 2
53290: PPUSH
53291: CALL_OW 488
53295: NOT
53296: PUSH
53297: LD_VAR 0 3
53301: PPUSH
53302: LD_VAR 0 4
53306: PPUSH
53307: CALL_OW 488
53311: NOT
53312: OR
53313: IFFALSE 53326
// begin result := - 1 ;
53315: LD_ADDR_VAR 0 5
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: ST_TO_ADDR
// exit ;
53324: GO 53561
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
53326: LD_ADDR_VAR 0 12
53330: PUSH
53331: LD_VAR 0 1
53335: PPUSH
53336: LD_VAR 0 2
53340: PPUSH
53341: LD_VAR 0 3
53345: PPUSH
53346: LD_VAR 0 4
53350: PPUSH
53351: CALL 52411 0 4
53355: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
53356: LD_ADDR_VAR 0 11
53360: PUSH
53361: LD_VAR 0 1
53365: PPUSH
53366: LD_VAR 0 2
53370: PPUSH
53371: LD_VAR 0 12
53375: PUSH
53376: LD_INT 1
53378: ARRAY
53379: PPUSH
53380: LD_VAR 0 12
53384: PUSH
53385: LD_INT 2
53387: ARRAY
53388: PPUSH
53389: CALL_OW 298
53393: ST_TO_ADDR
// distance := 9999 ;
53394: LD_ADDR_VAR 0 10
53398: PUSH
53399: LD_INT 9999
53401: ST_TO_ADDR
// for i := 0 to 5 do
53402: LD_ADDR_VAR 0 6
53406: PUSH
53407: DOUBLE
53408: LD_INT 0
53410: DEC
53411: ST_TO_ADDR
53412: LD_INT 5
53414: PUSH
53415: FOR_TO
53416: IFFALSE 53559
// begin _x := ShiftX ( x1 , i , centerDist ) ;
53418: LD_ADDR_VAR 0 7
53422: PUSH
53423: LD_VAR 0 1
53427: PPUSH
53428: LD_VAR 0 6
53432: PPUSH
53433: LD_VAR 0 11
53437: PPUSH
53438: CALL_OW 272
53442: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
53443: LD_ADDR_VAR 0 8
53447: PUSH
53448: LD_VAR 0 2
53452: PPUSH
53453: LD_VAR 0 6
53457: PPUSH
53458: LD_VAR 0 11
53462: PPUSH
53463: CALL_OW 273
53467: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
53468: LD_VAR 0 7
53472: PPUSH
53473: LD_VAR 0 8
53477: PPUSH
53478: CALL_OW 488
53482: NOT
53483: IFFALSE 53487
// continue ;
53485: GO 53415
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
53487: LD_ADDR_VAR 0 9
53491: PUSH
53492: LD_VAR 0 12
53496: PUSH
53497: LD_INT 1
53499: ARRAY
53500: PPUSH
53501: LD_VAR 0 12
53505: PUSH
53506: LD_INT 2
53508: ARRAY
53509: PPUSH
53510: LD_VAR 0 7
53514: PPUSH
53515: LD_VAR 0 8
53519: PPUSH
53520: CALL_OW 298
53524: ST_TO_ADDR
// if tmp < distance then
53525: LD_VAR 0 9
53529: PUSH
53530: LD_VAR 0 10
53534: LESS
53535: IFFALSE 53557
// begin result := i ;
53537: LD_ADDR_VAR 0 5
53541: PUSH
53542: LD_VAR 0 6
53546: ST_TO_ADDR
// distance := tmp ;
53547: LD_ADDR_VAR 0 10
53551: PUSH
53552: LD_VAR 0 9
53556: ST_TO_ADDR
// end ; end ;
53557: GO 53415
53559: POP
53560: POP
// end ;
53561: LD_VAR 0 5
53565: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53566: LD_INT 0
53568: PPUSH
53569: PPUSH
// if not driver or not IsInUnit ( driver ) then
53570: LD_VAR 0 1
53574: NOT
53575: PUSH
53576: LD_VAR 0 1
53580: PPUSH
53581: CALL_OW 310
53585: NOT
53586: OR
53587: IFFALSE 53591
// exit ;
53589: GO 53681
// vehicle := IsInUnit ( driver ) ;
53591: LD_ADDR_VAR 0 3
53595: PUSH
53596: LD_VAR 0 1
53600: PPUSH
53601: CALL_OW 310
53605: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53606: LD_VAR 0 1
53610: PPUSH
53611: LD_STRING \
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: PUSH
53641: LD_STRING E
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_VAR 0 3
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PPUSH
53677: CALL_OW 446
// end ;
53681: LD_VAR 0 2
53685: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53686: LD_INT 0
53688: PPUSH
53689: PPUSH
// if not driver or not IsInUnit ( driver ) then
53690: LD_VAR 0 1
53694: NOT
53695: PUSH
53696: LD_VAR 0 1
53700: PPUSH
53701: CALL_OW 310
53705: NOT
53706: OR
53707: IFFALSE 53711
// exit ;
53709: GO 53801
// vehicle := IsInUnit ( driver ) ;
53711: LD_ADDR_VAR 0 3
53715: PUSH
53716: LD_VAR 0 1
53720: PPUSH
53721: CALL_OW 310
53725: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53726: LD_VAR 0 1
53730: PPUSH
53731: LD_STRING \
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: PUSH
53761: LD_STRING E
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_VAR 0 3
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PPUSH
53797: CALL_OW 447
// end ;
53801: LD_VAR 0 2
53805: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53806: LD_INT 0
53808: PPUSH
53809: PPUSH
53810: PPUSH
// tmp := [ ] ;
53811: LD_ADDR_VAR 0 5
53815: PUSH
53816: EMPTY
53817: ST_TO_ADDR
// for i in units do
53818: LD_ADDR_VAR 0 4
53822: PUSH
53823: LD_VAR 0 1
53827: PUSH
53828: FOR_IN
53829: IFFALSE 53867
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53831: LD_ADDR_VAR 0 5
53835: PUSH
53836: LD_VAR 0 5
53840: PPUSH
53841: LD_VAR 0 5
53845: PUSH
53846: LD_INT 1
53848: PLUS
53849: PPUSH
53850: LD_VAR 0 4
53854: PPUSH
53855: CALL_OW 256
53859: PPUSH
53860: CALL_OW 2
53864: ST_TO_ADDR
53865: GO 53828
53867: POP
53868: POP
// if not tmp then
53869: LD_VAR 0 5
53873: NOT
53874: IFFALSE 53878
// exit ;
53876: GO 53926
// if asc then
53878: LD_VAR 0 2
53882: IFFALSE 53906
// result := SortListByListAsc ( units , tmp ) else
53884: LD_ADDR_VAR 0 3
53888: PUSH
53889: LD_VAR 0 1
53893: PPUSH
53894: LD_VAR 0 5
53898: PPUSH
53899: CALL_OW 76
53903: ST_TO_ADDR
53904: GO 53926
// result := SortListByListDesc ( units , tmp ) ;
53906: LD_ADDR_VAR 0 3
53910: PUSH
53911: LD_VAR 0 1
53915: PPUSH
53916: LD_VAR 0 5
53920: PPUSH
53921: CALL_OW 77
53925: ST_TO_ADDR
// end ;
53926: LD_VAR 0 3
53930: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53931: LD_INT 0
53933: PPUSH
53934: PPUSH
// task := GetTaskList ( mech ) ;
53935: LD_ADDR_VAR 0 4
53939: PUSH
53940: LD_VAR 0 1
53944: PPUSH
53945: CALL_OW 437
53949: ST_TO_ADDR
// if not task then
53950: LD_VAR 0 4
53954: NOT
53955: IFFALSE 53959
// exit ;
53957: GO 54001
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53959: LD_ADDR_VAR 0 3
53963: PUSH
53964: LD_VAR 0 4
53968: PUSH
53969: LD_INT 1
53971: ARRAY
53972: PUSH
53973: LD_INT 1
53975: ARRAY
53976: PUSH
53977: LD_STRING r
53979: EQUAL
53980: PUSH
53981: LD_VAR 0 4
53985: PUSH
53986: LD_INT 1
53988: ARRAY
53989: PUSH
53990: LD_INT 4
53992: ARRAY
53993: PUSH
53994: LD_VAR 0 2
53998: EQUAL
53999: AND
54000: ST_TO_ADDR
// end ;
54001: LD_VAR 0 3
54005: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54006: LD_INT 0
54008: PPUSH
// SetDir ( unit , d ) ;
54009: LD_VAR 0 1
54013: PPUSH
54014: LD_VAR 0 4
54018: PPUSH
54019: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54023: LD_VAR 0 1
54027: PPUSH
54028: LD_VAR 0 2
54032: PPUSH
54033: LD_VAR 0 3
54037: PPUSH
54038: LD_VAR 0 5
54042: PPUSH
54043: CALL_OW 48
// end ;
54047: LD_VAR 0 6
54051: RET
// export function ToNaturalNumber ( number ) ; begin
54052: LD_INT 0
54054: PPUSH
// result := number div 1 ;
54055: LD_ADDR_VAR 0 2
54059: PUSH
54060: LD_VAR 0 1
54064: PUSH
54065: LD_INT 1
54067: DIV
54068: ST_TO_ADDR
// if number < 0 then
54069: LD_VAR 0 1
54073: PUSH
54074: LD_INT 0
54076: LESS
54077: IFFALSE 54087
// result := 0 ;
54079: LD_ADDR_VAR 0 2
54083: PUSH
54084: LD_INT 0
54086: ST_TO_ADDR
// end ;
54087: LD_VAR 0 2
54091: RET
// export function SortByClass ( units , class ) ; var un ; begin
54092: LD_INT 0
54094: PPUSH
54095: PPUSH
// if not units or not class then
54096: LD_VAR 0 1
54100: NOT
54101: PUSH
54102: LD_VAR 0 2
54106: NOT
54107: OR
54108: IFFALSE 54112
// exit ;
54110: GO 54207
// result := [ ] ;
54112: LD_ADDR_VAR 0 3
54116: PUSH
54117: EMPTY
54118: ST_TO_ADDR
// for un in units do
54119: LD_ADDR_VAR 0 4
54123: PUSH
54124: LD_VAR 0 1
54128: PUSH
54129: FOR_IN
54130: IFFALSE 54205
// if GetClass ( un ) = class then
54132: LD_VAR 0 4
54136: PPUSH
54137: CALL_OW 257
54141: PUSH
54142: LD_VAR 0 2
54146: EQUAL
54147: IFFALSE 54174
// result := Insert ( result , 1 , un ) else
54149: LD_ADDR_VAR 0 3
54153: PUSH
54154: LD_VAR 0 3
54158: PPUSH
54159: LD_INT 1
54161: PPUSH
54162: LD_VAR 0 4
54166: PPUSH
54167: CALL_OW 2
54171: ST_TO_ADDR
54172: GO 54203
// result := Replace ( result , result + 1 , un ) ;
54174: LD_ADDR_VAR 0 3
54178: PUSH
54179: LD_VAR 0 3
54183: PPUSH
54184: LD_VAR 0 3
54188: PUSH
54189: LD_INT 1
54191: PLUS
54192: PPUSH
54193: LD_VAR 0 4
54197: PPUSH
54198: CALL_OW 1
54202: ST_TO_ADDR
54203: GO 54129
54205: POP
54206: POP
// end ;
54207: LD_VAR 0 3
54211: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54212: LD_INT 0
54214: PPUSH
54215: PPUSH
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
// result := [ ] ;
54221: LD_ADDR_VAR 0 4
54225: PUSH
54226: EMPTY
54227: ST_TO_ADDR
// if x - r < 0 then
54228: LD_VAR 0 1
54232: PUSH
54233: LD_VAR 0 3
54237: MINUS
54238: PUSH
54239: LD_INT 0
54241: LESS
54242: IFFALSE 54254
// min_x := 0 else
54244: LD_ADDR_VAR 0 8
54248: PUSH
54249: LD_INT 0
54251: ST_TO_ADDR
54252: GO 54270
// min_x := x - r ;
54254: LD_ADDR_VAR 0 8
54258: PUSH
54259: LD_VAR 0 1
54263: PUSH
54264: LD_VAR 0 3
54268: MINUS
54269: ST_TO_ADDR
// if y - r < 0 then
54270: LD_VAR 0 2
54274: PUSH
54275: LD_VAR 0 3
54279: MINUS
54280: PUSH
54281: LD_INT 0
54283: LESS
54284: IFFALSE 54296
// min_y := 0 else
54286: LD_ADDR_VAR 0 7
54290: PUSH
54291: LD_INT 0
54293: ST_TO_ADDR
54294: GO 54312
// min_y := y - r ;
54296: LD_ADDR_VAR 0 7
54300: PUSH
54301: LD_VAR 0 2
54305: PUSH
54306: LD_VAR 0 3
54310: MINUS
54311: ST_TO_ADDR
// max_x := x + r ;
54312: LD_ADDR_VAR 0 9
54316: PUSH
54317: LD_VAR 0 1
54321: PUSH
54322: LD_VAR 0 3
54326: PLUS
54327: ST_TO_ADDR
// max_y := y + r ;
54328: LD_ADDR_VAR 0 10
54332: PUSH
54333: LD_VAR 0 2
54337: PUSH
54338: LD_VAR 0 3
54342: PLUS
54343: ST_TO_ADDR
// for _x = min_x to max_x do
54344: LD_ADDR_VAR 0 5
54348: PUSH
54349: DOUBLE
54350: LD_VAR 0 8
54354: DEC
54355: ST_TO_ADDR
54356: LD_VAR 0 9
54360: PUSH
54361: FOR_TO
54362: IFFALSE 54463
// for _y = min_y to max_y do
54364: LD_ADDR_VAR 0 6
54368: PUSH
54369: DOUBLE
54370: LD_VAR 0 7
54374: DEC
54375: ST_TO_ADDR
54376: LD_VAR 0 10
54380: PUSH
54381: FOR_TO
54382: IFFALSE 54459
// begin if not ValidHex ( _x , _y ) then
54384: LD_VAR 0 5
54388: PPUSH
54389: LD_VAR 0 6
54393: PPUSH
54394: CALL_OW 488
54398: NOT
54399: IFFALSE 54403
// continue ;
54401: GO 54381
// if GetResourceTypeXY ( _x , _y ) then
54403: LD_VAR 0 5
54407: PPUSH
54408: LD_VAR 0 6
54412: PPUSH
54413: CALL_OW 283
54417: IFFALSE 54457
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54419: LD_ADDR_VAR 0 4
54423: PUSH
54424: LD_VAR 0 4
54428: PPUSH
54429: LD_VAR 0 4
54433: PUSH
54434: LD_INT 1
54436: PLUS
54437: PPUSH
54438: LD_VAR 0 5
54442: PUSH
54443: LD_VAR 0 6
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PPUSH
54452: CALL_OW 1
54456: ST_TO_ADDR
// end ;
54457: GO 54381
54459: POP
54460: POP
54461: GO 54361
54463: POP
54464: POP
// end ;
54465: LD_VAR 0 4
54469: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
54470: LD_INT 0
54472: PPUSH
54473: PPUSH
54474: PPUSH
54475: PPUSH
54476: PPUSH
54477: PPUSH
54478: PPUSH
54479: PPUSH
// if not units then
54480: LD_VAR 0 1
54484: NOT
54485: IFFALSE 54489
// exit ;
54487: GO 55013
// result := UnitFilter ( units , [ f_ok ] ) ;
54489: LD_ADDR_VAR 0 3
54493: PUSH
54494: LD_VAR 0 1
54498: PPUSH
54499: LD_INT 50
54501: PUSH
54502: EMPTY
54503: LIST
54504: PPUSH
54505: CALL_OW 72
54509: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54510: LD_ADDR_VAR 0 8
54514: PUSH
54515: LD_VAR 0 1
54519: PUSH
54520: LD_INT 1
54522: ARRAY
54523: PPUSH
54524: CALL_OW 255
54528: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
54529: LD_ADDR_VAR 0 10
54533: PUSH
54534: LD_INT 29
54536: PUSH
54537: LD_INT 91
54539: PUSH
54540: LD_INT 49
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: ST_TO_ADDR
// if not result then
54548: LD_VAR 0 3
54552: NOT
54553: IFFALSE 54557
// exit ;
54555: GO 55013
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54557: LD_ADDR_VAR 0 5
54561: PUSH
54562: LD_INT 81
54564: PUSH
54565: LD_VAR 0 8
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PPUSH
54574: CALL_OW 69
54578: ST_TO_ADDR
// for i in result do
54579: LD_ADDR_VAR 0 4
54583: PUSH
54584: LD_VAR 0 3
54588: PUSH
54589: FOR_IN
54590: IFFALSE 55011
// begin tag := GetTag ( i ) + 1 ;
54592: LD_ADDR_VAR 0 9
54596: PUSH
54597: LD_VAR 0 4
54601: PPUSH
54602: CALL_OW 110
54606: PUSH
54607: LD_INT 1
54609: PLUS
54610: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
54611: LD_ADDR_VAR 0 7
54615: PUSH
54616: LD_VAR 0 4
54620: PPUSH
54621: CALL_OW 250
54625: PPUSH
54626: LD_VAR 0 4
54630: PPUSH
54631: CALL_OW 251
54635: PPUSH
54636: LD_INT 6
54638: PPUSH
54639: CALL 54212 0 3
54643: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
54644: LD_VAR 0 4
54648: PPUSH
54649: CALL_OW 247
54653: PUSH
54654: LD_INT 2
54656: EQUAL
54657: PUSH
54658: LD_VAR 0 7
54662: AND
54663: PUSH
54664: LD_VAR 0 4
54668: PPUSH
54669: CALL_OW 264
54673: PUSH
54674: LD_VAR 0 10
54678: IN
54679: NOT
54680: AND
54681: IFFALSE 54720
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54683: LD_VAR 0 4
54687: PPUSH
54688: LD_VAR 0 7
54692: PUSH
54693: LD_INT 1
54695: ARRAY
54696: PUSH
54697: LD_INT 1
54699: ARRAY
54700: PPUSH
54701: LD_VAR 0 7
54705: PUSH
54706: LD_INT 1
54708: ARRAY
54709: PUSH
54710: LD_INT 2
54712: ARRAY
54713: PPUSH
54714: CALL_OW 116
54718: GO 55009
// if path > tag then
54720: LD_VAR 0 2
54724: PUSH
54725: LD_VAR 0 9
54729: GREATER
54730: IFFALSE 54938
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
54732: LD_ADDR_VAR 0 6
54736: PUSH
54737: LD_VAR 0 5
54741: PPUSH
54742: LD_INT 91
54744: PUSH
54745: LD_VAR 0 4
54749: PUSH
54750: LD_INT 8
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: LIST
54757: PPUSH
54758: CALL_OW 72
54762: ST_TO_ADDR
// if nearEnemy then
54763: LD_VAR 0 6
54767: IFFALSE 54836
// begin if GetWeapon ( i ) = ru_time_lapser then
54769: LD_VAR 0 4
54773: PPUSH
54774: CALL_OW 264
54778: PUSH
54779: LD_INT 49
54781: EQUAL
54782: IFFALSE 54810
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54784: LD_VAR 0 4
54788: PPUSH
54789: LD_VAR 0 6
54793: PPUSH
54794: LD_VAR 0 4
54798: PPUSH
54799: CALL_OW 74
54803: PPUSH
54804: CALL_OW 112
54808: GO 54834
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
54810: LD_VAR 0 4
54814: PPUSH
54815: LD_VAR 0 6
54819: PPUSH
54820: LD_VAR 0 4
54824: PPUSH
54825: CALL_OW 74
54829: PPUSH
54830: CALL_OW 115
// end else
54834: GO 54936
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54836: LD_VAR 0 4
54840: PPUSH
54841: LD_VAR 0 2
54845: PUSH
54846: LD_VAR 0 9
54850: ARRAY
54851: PUSH
54852: LD_INT 1
54854: ARRAY
54855: PPUSH
54856: LD_VAR 0 2
54860: PUSH
54861: LD_VAR 0 9
54865: ARRAY
54866: PUSH
54867: LD_INT 2
54869: ARRAY
54870: PPUSH
54871: CALL_OW 297
54875: PUSH
54876: LD_INT 6
54878: GREATER
54879: IFFALSE 54922
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54881: LD_VAR 0 4
54885: PPUSH
54886: LD_VAR 0 2
54890: PUSH
54891: LD_VAR 0 9
54895: ARRAY
54896: PUSH
54897: LD_INT 1
54899: ARRAY
54900: PPUSH
54901: LD_VAR 0 2
54905: PUSH
54906: LD_VAR 0 9
54910: ARRAY
54911: PUSH
54912: LD_INT 2
54914: ARRAY
54915: PPUSH
54916: CALL_OW 114
54920: GO 54936
// SetTag ( i , tag ) ;
54922: LD_VAR 0 4
54926: PPUSH
54927: LD_VAR 0 9
54931: PPUSH
54932: CALL_OW 109
// end else
54936: GO 55009
// if enemy then
54938: LD_VAR 0 5
54942: IFFALSE 55009
// begin if GetWeapon ( i ) = ru_time_lapser then
54944: LD_VAR 0 4
54948: PPUSH
54949: CALL_OW 264
54953: PUSH
54954: LD_INT 49
54956: EQUAL
54957: IFFALSE 54985
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54959: LD_VAR 0 4
54963: PPUSH
54964: LD_VAR 0 5
54968: PPUSH
54969: LD_VAR 0 4
54973: PPUSH
54974: CALL_OW 74
54978: PPUSH
54979: CALL_OW 112
54983: GO 55009
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54985: LD_VAR 0 4
54989: PPUSH
54990: LD_VAR 0 5
54994: PPUSH
54995: LD_VAR 0 4
54999: PPUSH
55000: CALL_OW 74
55004: PPUSH
55005: CALL_OW 115
// end ; end ;
55009: GO 54589
55011: POP
55012: POP
// end ;
55013: LD_VAR 0 3
55017: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55018: LD_INT 0
55020: PPUSH
55021: PPUSH
55022: PPUSH
// if not unit or IsInUnit ( unit ) then
55023: LD_VAR 0 1
55027: NOT
55028: PUSH
55029: LD_VAR 0 1
55033: PPUSH
55034: CALL_OW 310
55038: OR
55039: IFFALSE 55043
// exit ;
55041: GO 55134
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55043: LD_ADDR_VAR 0 4
55047: PUSH
55048: LD_VAR 0 1
55052: PPUSH
55053: CALL_OW 250
55057: PPUSH
55058: LD_VAR 0 2
55062: PPUSH
55063: LD_INT 1
55065: PPUSH
55066: CALL_OW 272
55070: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55071: LD_ADDR_VAR 0 5
55075: PUSH
55076: LD_VAR 0 1
55080: PPUSH
55081: CALL_OW 251
55085: PPUSH
55086: LD_VAR 0 2
55090: PPUSH
55091: LD_INT 1
55093: PPUSH
55094: CALL_OW 273
55098: ST_TO_ADDR
// if ValidHex ( x , y ) then
55099: LD_VAR 0 4
55103: PPUSH
55104: LD_VAR 0 5
55108: PPUSH
55109: CALL_OW 488
55113: IFFALSE 55134
// ComTurnXY ( unit , x , y ) ;
55115: LD_VAR 0 1
55119: PPUSH
55120: LD_VAR 0 4
55124: PPUSH
55125: LD_VAR 0 5
55129: PPUSH
55130: CALL_OW 118
// end ;
55134: LD_VAR 0 3
55138: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55139: LD_INT 0
55141: PPUSH
55142: PPUSH
// result := false ;
55143: LD_ADDR_VAR 0 3
55147: PUSH
55148: LD_INT 0
55150: ST_TO_ADDR
// if not units then
55151: LD_VAR 0 2
55155: NOT
55156: IFFALSE 55160
// exit ;
55158: GO 55205
// for i in units do
55160: LD_ADDR_VAR 0 4
55164: PUSH
55165: LD_VAR 0 2
55169: PUSH
55170: FOR_IN
55171: IFFALSE 55203
// if See ( side , i ) then
55173: LD_VAR 0 1
55177: PPUSH
55178: LD_VAR 0 4
55182: PPUSH
55183: CALL_OW 292
55187: IFFALSE 55201
// begin result := true ;
55189: LD_ADDR_VAR 0 3
55193: PUSH
55194: LD_INT 1
55196: ST_TO_ADDR
// exit ;
55197: POP
55198: POP
55199: GO 55205
// end ;
55201: GO 55170
55203: POP
55204: POP
// end ;
55205: LD_VAR 0 3
55209: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55210: LD_INT 0
55212: PPUSH
55213: PPUSH
55214: PPUSH
55215: PPUSH
// if not unit or not points then
55216: LD_VAR 0 1
55220: NOT
55221: PUSH
55222: LD_VAR 0 2
55226: NOT
55227: OR
55228: IFFALSE 55232
// exit ;
55230: GO 55322
// dist := 99999 ;
55232: LD_ADDR_VAR 0 5
55236: PUSH
55237: LD_INT 99999
55239: ST_TO_ADDR
// for i in points do
55240: LD_ADDR_VAR 0 4
55244: PUSH
55245: LD_VAR 0 2
55249: PUSH
55250: FOR_IN
55251: IFFALSE 55320
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
55253: LD_ADDR_VAR 0 6
55257: PUSH
55258: LD_VAR 0 1
55262: PPUSH
55263: LD_VAR 0 4
55267: PUSH
55268: LD_INT 1
55270: ARRAY
55271: PPUSH
55272: LD_VAR 0 4
55276: PUSH
55277: LD_INT 2
55279: ARRAY
55280: PPUSH
55281: CALL_OW 297
55285: ST_TO_ADDR
// if tmpDist < dist then
55286: LD_VAR 0 6
55290: PUSH
55291: LD_VAR 0 5
55295: LESS
55296: IFFALSE 55318
// begin result := i ;
55298: LD_ADDR_VAR 0 3
55302: PUSH
55303: LD_VAR 0 4
55307: ST_TO_ADDR
// dist := tmpDist ;
55308: LD_ADDR_VAR 0 5
55312: PUSH
55313: LD_VAR 0 6
55317: ST_TO_ADDR
// end ; end ;
55318: GO 55250
55320: POP
55321: POP
// end ;
55322: LD_VAR 0 3
55326: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
55327: LD_INT 0
55329: PPUSH
// uc_side := side ;
55330: LD_ADDR_OWVAR 20
55334: PUSH
55335: LD_VAR 0 1
55339: ST_TO_ADDR
// uc_nation := 3 ;
55340: LD_ADDR_OWVAR 21
55344: PUSH
55345: LD_INT 3
55347: ST_TO_ADDR
// vc_chassis := 25 ;
55348: LD_ADDR_OWVAR 37
55352: PUSH
55353: LD_INT 25
55355: ST_TO_ADDR
// vc_engine := engine_siberite ;
55356: LD_ADDR_OWVAR 39
55360: PUSH
55361: LD_INT 3
55363: ST_TO_ADDR
// vc_control := control_computer ;
55364: LD_ADDR_OWVAR 38
55368: PUSH
55369: LD_INT 3
55371: ST_TO_ADDR
// vc_weapon := 59 ;
55372: LD_ADDR_OWVAR 40
55376: PUSH
55377: LD_INT 59
55379: ST_TO_ADDR
// result := CreateVehicle ;
55380: LD_ADDR_VAR 0 5
55384: PUSH
55385: CALL_OW 45
55389: ST_TO_ADDR
// SetDir ( result , d ) ;
55390: LD_VAR 0 5
55394: PPUSH
55395: LD_VAR 0 4
55399: PPUSH
55400: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
55404: LD_VAR 0 5
55408: PPUSH
55409: LD_VAR 0 2
55413: PPUSH
55414: LD_VAR 0 3
55418: PPUSH
55419: LD_INT 0
55421: PPUSH
55422: CALL_OW 48
// end ;
55426: LD_VAR 0 5
55430: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
55431: LD_INT 0
55433: PPUSH
55434: PPUSH
55435: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
55436: LD_ADDR_VAR 0 2
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
55459: LD_VAR 0 1
55463: NOT
55464: PUSH
55465: LD_VAR 0 1
55469: PPUSH
55470: CALL_OW 264
55474: PUSH
55475: LD_INT 12
55477: PUSH
55478: LD_INT 51
55480: PUSH
55481: LD_INT 32
55483: PUSH
55484: LD_INT 89
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: IN
55493: NOT
55494: OR
55495: IFFALSE 55499
// exit ;
55497: GO 55597
// for i := 1 to 3 do
55499: LD_ADDR_VAR 0 3
55503: PUSH
55504: DOUBLE
55505: LD_INT 1
55507: DEC
55508: ST_TO_ADDR
55509: LD_INT 3
55511: PUSH
55512: FOR_TO
55513: IFFALSE 55595
// begin tmp := GetCargo ( cargo , i ) ;
55515: LD_ADDR_VAR 0 4
55519: PUSH
55520: LD_VAR 0 1
55524: PPUSH
55525: LD_VAR 0 3
55529: PPUSH
55530: CALL_OW 289
55534: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
55535: LD_ADDR_VAR 0 2
55539: PUSH
55540: LD_VAR 0 2
55544: PPUSH
55545: LD_VAR 0 3
55549: PPUSH
55550: LD_VAR 0 4
55554: PPUSH
55555: CALL_OW 1
55559: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
55560: LD_ADDR_VAR 0 2
55564: PUSH
55565: LD_VAR 0 2
55569: PPUSH
55570: LD_INT 4
55572: PPUSH
55573: LD_VAR 0 2
55577: PUSH
55578: LD_INT 4
55580: ARRAY
55581: PUSH
55582: LD_VAR 0 4
55586: PLUS
55587: PPUSH
55588: CALL_OW 1
55592: ST_TO_ADDR
// end ;
55593: GO 55512
55595: POP
55596: POP
// end ;
55597: LD_VAR 0 2
55601: RET
// export function Length ( array ) ; begin
55602: LD_INT 0
55604: PPUSH
// result := array + 0 ;
55605: LD_ADDR_VAR 0 2
55609: PUSH
55610: LD_VAR 0 1
55614: PUSH
55615: LD_INT 0
55617: PLUS
55618: ST_TO_ADDR
// end ;
55619: LD_VAR 0 2
55623: RET
// export function PrepareArray ( array ) ; begin
55624: LD_INT 0
55626: PPUSH
// result := array diff 0 ;
55627: LD_ADDR_VAR 0 2
55631: PUSH
55632: LD_VAR 0 1
55636: PUSH
55637: LD_INT 0
55639: DIFF
55640: ST_TO_ADDR
// if not result [ 1 ] then
55641: LD_VAR 0 2
55645: PUSH
55646: LD_INT 1
55648: ARRAY
55649: NOT
55650: IFFALSE 55670
// result := Delete ( result , 1 ) ;
55652: LD_ADDR_VAR 0 2
55656: PUSH
55657: LD_VAR 0 2
55661: PPUSH
55662: LD_INT 1
55664: PPUSH
55665: CALL_OW 3
55669: ST_TO_ADDR
// end ; end_of_file
55670: LD_VAR 0 2
55674: RET
// every 0 0$1 do
55675: GO 55677
55677: DISABLE
// begin enable ;
55678: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
55679: LD_STRING updateTimer(
55681: PUSH
55682: LD_OWVAR 1
55686: STR
55687: PUSH
55688: LD_STRING );
55690: STR
55691: PPUSH
55692: CALL_OW 559
// end ;
55696: END
// export function SOS_MapStart ( ) ; begin
55697: LD_INT 0
55699: PPUSH
// if streamModeActive then
55700: LD_EXP 51
55704: IFFALSE 55713
// DefineStreamItems ( true ) ;
55706: LD_INT 1
55708: PPUSH
55709: CALL 57367 0 1
// UpdateFactoryWaypoints ( ) ;
55713: CALL 70228 0 0
// UpdateWarehouseGatheringPoints ( ) ;
55717: CALL 70485 0 0
// end ;
55721: LD_VAR 0 1
55725: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
55726: LD_INT 0
55728: PPUSH
// if p2 = 100 then
55729: LD_VAR 0 2
55733: PUSH
55734: LD_INT 100
55736: EQUAL
55737: IFFALSE 56740
// begin if not StreamModeActive then
55739: LD_EXP 51
55743: NOT
55744: IFFALSE 55754
// StreamModeActive := true ;
55746: LD_ADDR_EXP 51
55750: PUSH
55751: LD_INT 1
55753: ST_TO_ADDR
// if p3 = 0 then
55754: LD_VAR 0 3
55758: PUSH
55759: LD_INT 0
55761: EQUAL
55762: IFFALSE 55768
// InitStreamMode ;
55764: CALL 56903 0 0
// if p3 = 1 then
55768: LD_VAR 0 3
55772: PUSH
55773: LD_INT 1
55775: EQUAL
55776: IFFALSE 55786
// sRocket := true ;
55778: LD_ADDR_EXP 56
55782: PUSH
55783: LD_INT 1
55785: ST_TO_ADDR
// if p3 = 2 then
55786: LD_VAR 0 3
55790: PUSH
55791: LD_INT 2
55793: EQUAL
55794: IFFALSE 55804
// sSpeed := true ;
55796: LD_ADDR_EXP 55
55800: PUSH
55801: LD_INT 1
55803: ST_TO_ADDR
// if p3 = 3 then
55804: LD_VAR 0 3
55808: PUSH
55809: LD_INT 3
55811: EQUAL
55812: IFFALSE 55822
// sEngine := true ;
55814: LD_ADDR_EXP 57
55818: PUSH
55819: LD_INT 1
55821: ST_TO_ADDR
// if p3 = 4 then
55822: LD_VAR 0 3
55826: PUSH
55827: LD_INT 4
55829: EQUAL
55830: IFFALSE 55840
// sSpec := true ;
55832: LD_ADDR_EXP 54
55836: PUSH
55837: LD_INT 1
55839: ST_TO_ADDR
// if p3 = 5 then
55840: LD_VAR 0 3
55844: PUSH
55845: LD_INT 5
55847: EQUAL
55848: IFFALSE 55858
// sLevel := true ;
55850: LD_ADDR_EXP 58
55854: PUSH
55855: LD_INT 1
55857: ST_TO_ADDR
// if p3 = 6 then
55858: LD_VAR 0 3
55862: PUSH
55863: LD_INT 6
55865: EQUAL
55866: IFFALSE 55876
// sArmoury := true ;
55868: LD_ADDR_EXP 59
55872: PUSH
55873: LD_INT 1
55875: ST_TO_ADDR
// if p3 = 7 then
55876: LD_VAR 0 3
55880: PUSH
55881: LD_INT 7
55883: EQUAL
55884: IFFALSE 55894
// sRadar := true ;
55886: LD_ADDR_EXP 60
55890: PUSH
55891: LD_INT 1
55893: ST_TO_ADDR
// if p3 = 8 then
55894: LD_VAR 0 3
55898: PUSH
55899: LD_INT 8
55901: EQUAL
55902: IFFALSE 55912
// sBunker := true ;
55904: LD_ADDR_EXP 61
55908: PUSH
55909: LD_INT 1
55911: ST_TO_ADDR
// if p3 = 9 then
55912: LD_VAR 0 3
55916: PUSH
55917: LD_INT 9
55919: EQUAL
55920: IFFALSE 55930
// sHack := true ;
55922: LD_ADDR_EXP 62
55926: PUSH
55927: LD_INT 1
55929: ST_TO_ADDR
// if p3 = 10 then
55930: LD_VAR 0 3
55934: PUSH
55935: LD_INT 10
55937: EQUAL
55938: IFFALSE 55948
// sFire := true ;
55940: LD_ADDR_EXP 63
55944: PUSH
55945: LD_INT 1
55947: ST_TO_ADDR
// if p3 = 11 then
55948: LD_VAR 0 3
55952: PUSH
55953: LD_INT 11
55955: EQUAL
55956: IFFALSE 55966
// sRefresh := true ;
55958: LD_ADDR_EXP 64
55962: PUSH
55963: LD_INT 1
55965: ST_TO_ADDR
// if p3 = 12 then
55966: LD_VAR 0 3
55970: PUSH
55971: LD_INT 12
55973: EQUAL
55974: IFFALSE 55984
// sExp := true ;
55976: LD_ADDR_EXP 65
55980: PUSH
55981: LD_INT 1
55983: ST_TO_ADDR
// if p3 = 13 then
55984: LD_VAR 0 3
55988: PUSH
55989: LD_INT 13
55991: EQUAL
55992: IFFALSE 56002
// sDepot := true ;
55994: LD_ADDR_EXP 66
55998: PUSH
55999: LD_INT 1
56001: ST_TO_ADDR
// if p3 = 14 then
56002: LD_VAR 0 3
56006: PUSH
56007: LD_INT 14
56009: EQUAL
56010: IFFALSE 56020
// sFlag := true ;
56012: LD_ADDR_EXP 67
56016: PUSH
56017: LD_INT 1
56019: ST_TO_ADDR
// if p3 = 15 then
56020: LD_VAR 0 3
56024: PUSH
56025: LD_INT 15
56027: EQUAL
56028: IFFALSE 56038
// sKamikadze := true ;
56030: LD_ADDR_EXP 75
56034: PUSH
56035: LD_INT 1
56037: ST_TO_ADDR
// if p3 = 16 then
56038: LD_VAR 0 3
56042: PUSH
56043: LD_INT 16
56045: EQUAL
56046: IFFALSE 56056
// sTroll := true ;
56048: LD_ADDR_EXP 76
56052: PUSH
56053: LD_INT 1
56055: ST_TO_ADDR
// if p3 = 17 then
56056: LD_VAR 0 3
56060: PUSH
56061: LD_INT 17
56063: EQUAL
56064: IFFALSE 56074
// sSlow := true ;
56066: LD_ADDR_EXP 77
56070: PUSH
56071: LD_INT 1
56073: ST_TO_ADDR
// if p3 = 18 then
56074: LD_VAR 0 3
56078: PUSH
56079: LD_INT 18
56081: EQUAL
56082: IFFALSE 56092
// sLack := true ;
56084: LD_ADDR_EXP 78
56088: PUSH
56089: LD_INT 1
56091: ST_TO_ADDR
// if p3 = 19 then
56092: LD_VAR 0 3
56096: PUSH
56097: LD_INT 19
56099: EQUAL
56100: IFFALSE 56110
// sTank := true ;
56102: LD_ADDR_EXP 80
56106: PUSH
56107: LD_INT 1
56109: ST_TO_ADDR
// if p3 = 20 then
56110: LD_VAR 0 3
56114: PUSH
56115: LD_INT 20
56117: EQUAL
56118: IFFALSE 56128
// sRemote := true ;
56120: LD_ADDR_EXP 81
56124: PUSH
56125: LD_INT 1
56127: ST_TO_ADDR
// if p3 = 21 then
56128: LD_VAR 0 3
56132: PUSH
56133: LD_INT 21
56135: EQUAL
56136: IFFALSE 56146
// sPowell := true ;
56138: LD_ADDR_EXP 82
56142: PUSH
56143: LD_INT 1
56145: ST_TO_ADDR
// if p3 = 22 then
56146: LD_VAR 0 3
56150: PUSH
56151: LD_INT 22
56153: EQUAL
56154: IFFALSE 56164
// sTeleport := true ;
56156: LD_ADDR_EXP 85
56160: PUSH
56161: LD_INT 1
56163: ST_TO_ADDR
// if p3 = 23 then
56164: LD_VAR 0 3
56168: PUSH
56169: LD_INT 23
56171: EQUAL
56172: IFFALSE 56182
// sOilTower := true ;
56174: LD_ADDR_EXP 87
56178: PUSH
56179: LD_INT 1
56181: ST_TO_ADDR
// if p3 = 24 then
56182: LD_VAR 0 3
56186: PUSH
56187: LD_INT 24
56189: EQUAL
56190: IFFALSE 56200
// sShovel := true ;
56192: LD_ADDR_EXP 88
56196: PUSH
56197: LD_INT 1
56199: ST_TO_ADDR
// if p3 = 25 then
56200: LD_VAR 0 3
56204: PUSH
56205: LD_INT 25
56207: EQUAL
56208: IFFALSE 56218
// sSheik := true ;
56210: LD_ADDR_EXP 89
56214: PUSH
56215: LD_INT 1
56217: ST_TO_ADDR
// if p3 = 26 then
56218: LD_VAR 0 3
56222: PUSH
56223: LD_INT 26
56225: EQUAL
56226: IFFALSE 56236
// sEarthquake := true ;
56228: LD_ADDR_EXP 91
56232: PUSH
56233: LD_INT 1
56235: ST_TO_ADDR
// if p3 = 27 then
56236: LD_VAR 0 3
56240: PUSH
56241: LD_INT 27
56243: EQUAL
56244: IFFALSE 56254
// sAI := true ;
56246: LD_ADDR_EXP 92
56250: PUSH
56251: LD_INT 1
56253: ST_TO_ADDR
// if p3 = 28 then
56254: LD_VAR 0 3
56258: PUSH
56259: LD_INT 28
56261: EQUAL
56262: IFFALSE 56272
// sCargo := true ;
56264: LD_ADDR_EXP 95
56268: PUSH
56269: LD_INT 1
56271: ST_TO_ADDR
// if p3 = 29 then
56272: LD_VAR 0 3
56276: PUSH
56277: LD_INT 29
56279: EQUAL
56280: IFFALSE 56290
// sDLaser := true ;
56282: LD_ADDR_EXP 96
56286: PUSH
56287: LD_INT 1
56289: ST_TO_ADDR
// if p3 = 30 then
56290: LD_VAR 0 3
56294: PUSH
56295: LD_INT 30
56297: EQUAL
56298: IFFALSE 56308
// sExchange := true ;
56300: LD_ADDR_EXP 97
56304: PUSH
56305: LD_INT 1
56307: ST_TO_ADDR
// if p3 = 31 then
56308: LD_VAR 0 3
56312: PUSH
56313: LD_INT 31
56315: EQUAL
56316: IFFALSE 56326
// sFac := true ;
56318: LD_ADDR_EXP 98
56322: PUSH
56323: LD_INT 1
56325: ST_TO_ADDR
// if p3 = 32 then
56326: LD_VAR 0 3
56330: PUSH
56331: LD_INT 32
56333: EQUAL
56334: IFFALSE 56344
// sPower := true ;
56336: LD_ADDR_EXP 99
56340: PUSH
56341: LD_INT 1
56343: ST_TO_ADDR
// if p3 = 33 then
56344: LD_VAR 0 3
56348: PUSH
56349: LD_INT 33
56351: EQUAL
56352: IFFALSE 56362
// sRandom := true ;
56354: LD_ADDR_EXP 100
56358: PUSH
56359: LD_INT 1
56361: ST_TO_ADDR
// if p3 = 34 then
56362: LD_VAR 0 3
56366: PUSH
56367: LD_INT 34
56369: EQUAL
56370: IFFALSE 56380
// sShield := true ;
56372: LD_ADDR_EXP 101
56376: PUSH
56377: LD_INT 1
56379: ST_TO_ADDR
// if p3 = 35 then
56380: LD_VAR 0 3
56384: PUSH
56385: LD_INT 35
56387: EQUAL
56388: IFFALSE 56398
// sTime := true ;
56390: LD_ADDR_EXP 102
56394: PUSH
56395: LD_INT 1
56397: ST_TO_ADDR
// if p3 = 36 then
56398: LD_VAR 0 3
56402: PUSH
56403: LD_INT 36
56405: EQUAL
56406: IFFALSE 56416
// sTools := true ;
56408: LD_ADDR_EXP 103
56412: PUSH
56413: LD_INT 1
56415: ST_TO_ADDR
// if p3 = 101 then
56416: LD_VAR 0 3
56420: PUSH
56421: LD_INT 101
56423: EQUAL
56424: IFFALSE 56434
// sSold := true ;
56426: LD_ADDR_EXP 68
56430: PUSH
56431: LD_INT 1
56433: ST_TO_ADDR
// if p3 = 102 then
56434: LD_VAR 0 3
56438: PUSH
56439: LD_INT 102
56441: EQUAL
56442: IFFALSE 56452
// sDiff := true ;
56444: LD_ADDR_EXP 69
56448: PUSH
56449: LD_INT 1
56451: ST_TO_ADDR
// if p3 = 103 then
56452: LD_VAR 0 3
56456: PUSH
56457: LD_INT 103
56459: EQUAL
56460: IFFALSE 56470
// sFog := true ;
56462: LD_ADDR_EXP 72
56466: PUSH
56467: LD_INT 1
56469: ST_TO_ADDR
// if p3 = 104 then
56470: LD_VAR 0 3
56474: PUSH
56475: LD_INT 104
56477: EQUAL
56478: IFFALSE 56488
// sReset := true ;
56480: LD_ADDR_EXP 73
56484: PUSH
56485: LD_INT 1
56487: ST_TO_ADDR
// if p3 = 105 then
56488: LD_VAR 0 3
56492: PUSH
56493: LD_INT 105
56495: EQUAL
56496: IFFALSE 56506
// sSun := true ;
56498: LD_ADDR_EXP 74
56502: PUSH
56503: LD_INT 1
56505: ST_TO_ADDR
// if p3 = 106 then
56506: LD_VAR 0 3
56510: PUSH
56511: LD_INT 106
56513: EQUAL
56514: IFFALSE 56524
// sTiger := true ;
56516: LD_ADDR_EXP 70
56520: PUSH
56521: LD_INT 1
56523: ST_TO_ADDR
// if p3 = 107 then
56524: LD_VAR 0 3
56528: PUSH
56529: LD_INT 107
56531: EQUAL
56532: IFFALSE 56542
// sBomb := true ;
56534: LD_ADDR_EXP 71
56538: PUSH
56539: LD_INT 1
56541: ST_TO_ADDR
// if p3 = 108 then
56542: LD_VAR 0 3
56546: PUSH
56547: LD_INT 108
56549: EQUAL
56550: IFFALSE 56560
// sWound := true ;
56552: LD_ADDR_EXP 79
56556: PUSH
56557: LD_INT 1
56559: ST_TO_ADDR
// if p3 = 109 then
56560: LD_VAR 0 3
56564: PUSH
56565: LD_INT 109
56567: EQUAL
56568: IFFALSE 56578
// sBetray := true ;
56570: LD_ADDR_EXP 83
56574: PUSH
56575: LD_INT 1
56577: ST_TO_ADDR
// if p3 = 110 then
56578: LD_VAR 0 3
56582: PUSH
56583: LD_INT 110
56585: EQUAL
56586: IFFALSE 56596
// sContamin := true ;
56588: LD_ADDR_EXP 84
56592: PUSH
56593: LD_INT 1
56595: ST_TO_ADDR
// if p3 = 111 then
56596: LD_VAR 0 3
56600: PUSH
56601: LD_INT 111
56603: EQUAL
56604: IFFALSE 56614
// sOil := true ;
56606: LD_ADDR_EXP 86
56610: PUSH
56611: LD_INT 1
56613: ST_TO_ADDR
// if p3 = 112 then
56614: LD_VAR 0 3
56618: PUSH
56619: LD_INT 112
56621: EQUAL
56622: IFFALSE 56632
// sStu := true ;
56624: LD_ADDR_EXP 90
56628: PUSH
56629: LD_INT 1
56631: ST_TO_ADDR
// if p3 = 113 then
56632: LD_VAR 0 3
56636: PUSH
56637: LD_INT 113
56639: EQUAL
56640: IFFALSE 56650
// sBazooka := true ;
56642: LD_ADDR_EXP 93
56646: PUSH
56647: LD_INT 1
56649: ST_TO_ADDR
// if p3 = 114 then
56650: LD_VAR 0 3
56654: PUSH
56655: LD_INT 114
56657: EQUAL
56658: IFFALSE 56668
// sMortar := true ;
56660: LD_ADDR_EXP 94
56664: PUSH
56665: LD_INT 1
56667: ST_TO_ADDR
// if p3 = 115 then
56668: LD_VAR 0 3
56672: PUSH
56673: LD_INT 115
56675: EQUAL
56676: IFFALSE 56686
// sRanger := true ;
56678: LD_ADDR_EXP 104
56682: PUSH
56683: LD_INT 1
56685: ST_TO_ADDR
// if p3 = 116 then
56686: LD_VAR 0 3
56690: PUSH
56691: LD_INT 116
56693: EQUAL
56694: IFFALSE 56704
// sComputer := true ;
56696: LD_ADDR_EXP 105
56700: PUSH
56701: LD_INT 1
56703: ST_TO_ADDR
// if p3 = 117 then
56704: LD_VAR 0 3
56708: PUSH
56709: LD_INT 117
56711: EQUAL
56712: IFFALSE 56722
// s30 := true ;
56714: LD_ADDR_EXP 106
56718: PUSH
56719: LD_INT 1
56721: ST_TO_ADDR
// if p3 = 118 then
56722: LD_VAR 0 3
56726: PUSH
56727: LD_INT 118
56729: EQUAL
56730: IFFALSE 56740
// s60 := true ;
56732: LD_ADDR_EXP 107
56736: PUSH
56737: LD_INT 1
56739: ST_TO_ADDR
// end ; if p2 = 101 then
56740: LD_VAR 0 2
56744: PUSH
56745: LD_INT 101
56747: EQUAL
56748: IFFALSE 56876
// begin case p3 of 1 :
56750: LD_VAR 0 3
56754: PUSH
56755: LD_INT 1
56757: DOUBLE
56758: EQUAL
56759: IFTRUE 56763
56761: GO 56770
56763: POP
// hHackUnlimitedResources ; 2 :
56764: CALL 68974 0 0
56768: GO 56876
56770: LD_INT 2
56772: DOUBLE
56773: EQUAL
56774: IFTRUE 56778
56776: GO 56785
56778: POP
// hHackSetLevel10 ; 3 :
56779: CALL 69107 0 0
56783: GO 56876
56785: LD_INT 3
56787: DOUBLE
56788: EQUAL
56789: IFTRUE 56793
56791: GO 56800
56793: POP
// hHackSetLevel10YourUnits ; 4 :
56794: CALL 69192 0 0
56798: GO 56876
56800: LD_INT 4
56802: DOUBLE
56803: EQUAL
56804: IFTRUE 56808
56806: GO 56815
56808: POP
// hHackInvincible ; 5 :
56809: CALL 69640 0 0
56813: GO 56876
56815: LD_INT 5
56817: DOUBLE
56818: EQUAL
56819: IFTRUE 56823
56821: GO 56830
56823: POP
// hHackInvisible ; 6 :
56824: CALL 69751 0 0
56828: GO 56876
56830: LD_INT 6
56832: DOUBLE
56833: EQUAL
56834: IFTRUE 56838
56836: GO 56845
56838: POP
// hHackChangeYourSide ; 7 :
56839: CALL 69808 0 0
56843: GO 56876
56845: LD_INT 7
56847: DOUBLE
56848: EQUAL
56849: IFTRUE 56853
56851: GO 56860
56853: POP
// hHackChangeUnitSide ; 8 :
56854: CALL 69850 0 0
56858: GO 56876
56860: LD_INT 8
56862: DOUBLE
56863: EQUAL
56864: IFTRUE 56868
56866: GO 56875
56868: POP
// hHackFog ; end ;
56869: CALL 69951 0 0
56873: GO 56876
56875: POP
// end ; end ;
56876: LD_VAR 0 7
56880: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
56881: GO 56883
56883: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
56884: LD_STRING initStreamRollete();
56886: PPUSH
56887: CALL_OW 559
// InitStreamMode ;
56891: CALL 56903 0 0
// DefineStreamItems ( false ) ;
56895: LD_INT 0
56897: PPUSH
56898: CALL 57367 0 1
// end ;
56902: END
// function InitStreamMode ; begin
56903: LD_INT 0
56905: PPUSH
// streamModeActive := false ;
56906: LD_ADDR_EXP 51
56910: PUSH
56911: LD_INT 0
56913: ST_TO_ADDR
// normalCounter := 36 ;
56914: LD_ADDR_EXP 52
56918: PUSH
56919: LD_INT 36
56921: ST_TO_ADDR
// hardcoreCounter := 18 ;
56922: LD_ADDR_EXP 53
56926: PUSH
56927: LD_INT 18
56929: ST_TO_ADDR
// sRocket := false ;
56930: LD_ADDR_EXP 56
56934: PUSH
56935: LD_INT 0
56937: ST_TO_ADDR
// sSpeed := false ;
56938: LD_ADDR_EXP 55
56942: PUSH
56943: LD_INT 0
56945: ST_TO_ADDR
// sEngine := false ;
56946: LD_ADDR_EXP 57
56950: PUSH
56951: LD_INT 0
56953: ST_TO_ADDR
// sSpec := false ;
56954: LD_ADDR_EXP 54
56958: PUSH
56959: LD_INT 0
56961: ST_TO_ADDR
// sLevel := false ;
56962: LD_ADDR_EXP 58
56966: PUSH
56967: LD_INT 0
56969: ST_TO_ADDR
// sArmoury := false ;
56970: LD_ADDR_EXP 59
56974: PUSH
56975: LD_INT 0
56977: ST_TO_ADDR
// sRadar := false ;
56978: LD_ADDR_EXP 60
56982: PUSH
56983: LD_INT 0
56985: ST_TO_ADDR
// sBunker := false ;
56986: LD_ADDR_EXP 61
56990: PUSH
56991: LD_INT 0
56993: ST_TO_ADDR
// sHack := false ;
56994: LD_ADDR_EXP 62
56998: PUSH
56999: LD_INT 0
57001: ST_TO_ADDR
// sFire := false ;
57002: LD_ADDR_EXP 63
57006: PUSH
57007: LD_INT 0
57009: ST_TO_ADDR
// sRefresh := false ;
57010: LD_ADDR_EXP 64
57014: PUSH
57015: LD_INT 0
57017: ST_TO_ADDR
// sExp := false ;
57018: LD_ADDR_EXP 65
57022: PUSH
57023: LD_INT 0
57025: ST_TO_ADDR
// sDepot := false ;
57026: LD_ADDR_EXP 66
57030: PUSH
57031: LD_INT 0
57033: ST_TO_ADDR
// sFlag := false ;
57034: LD_ADDR_EXP 67
57038: PUSH
57039: LD_INT 0
57041: ST_TO_ADDR
// sKamikadze := false ;
57042: LD_ADDR_EXP 75
57046: PUSH
57047: LD_INT 0
57049: ST_TO_ADDR
// sTroll := false ;
57050: LD_ADDR_EXP 76
57054: PUSH
57055: LD_INT 0
57057: ST_TO_ADDR
// sSlow := false ;
57058: LD_ADDR_EXP 77
57062: PUSH
57063: LD_INT 0
57065: ST_TO_ADDR
// sLack := false ;
57066: LD_ADDR_EXP 78
57070: PUSH
57071: LD_INT 0
57073: ST_TO_ADDR
// sTank := false ;
57074: LD_ADDR_EXP 80
57078: PUSH
57079: LD_INT 0
57081: ST_TO_ADDR
// sRemote := false ;
57082: LD_ADDR_EXP 81
57086: PUSH
57087: LD_INT 0
57089: ST_TO_ADDR
// sPowell := false ;
57090: LD_ADDR_EXP 82
57094: PUSH
57095: LD_INT 0
57097: ST_TO_ADDR
// sTeleport := false ;
57098: LD_ADDR_EXP 85
57102: PUSH
57103: LD_INT 0
57105: ST_TO_ADDR
// sOilTower := false ;
57106: LD_ADDR_EXP 87
57110: PUSH
57111: LD_INT 0
57113: ST_TO_ADDR
// sShovel := false ;
57114: LD_ADDR_EXP 88
57118: PUSH
57119: LD_INT 0
57121: ST_TO_ADDR
// sSheik := false ;
57122: LD_ADDR_EXP 89
57126: PUSH
57127: LD_INT 0
57129: ST_TO_ADDR
// sEarthquake := false ;
57130: LD_ADDR_EXP 91
57134: PUSH
57135: LD_INT 0
57137: ST_TO_ADDR
// sAI := false ;
57138: LD_ADDR_EXP 92
57142: PUSH
57143: LD_INT 0
57145: ST_TO_ADDR
// sCargo := false ;
57146: LD_ADDR_EXP 95
57150: PUSH
57151: LD_INT 0
57153: ST_TO_ADDR
// sDLaser := false ;
57154: LD_ADDR_EXP 96
57158: PUSH
57159: LD_INT 0
57161: ST_TO_ADDR
// sExchange := false ;
57162: LD_ADDR_EXP 97
57166: PUSH
57167: LD_INT 0
57169: ST_TO_ADDR
// sFac := false ;
57170: LD_ADDR_EXP 98
57174: PUSH
57175: LD_INT 0
57177: ST_TO_ADDR
// sPower := false ;
57178: LD_ADDR_EXP 99
57182: PUSH
57183: LD_INT 0
57185: ST_TO_ADDR
// sRandom := false ;
57186: LD_ADDR_EXP 100
57190: PUSH
57191: LD_INT 0
57193: ST_TO_ADDR
// sShield := false ;
57194: LD_ADDR_EXP 101
57198: PUSH
57199: LD_INT 0
57201: ST_TO_ADDR
// sTime := false ;
57202: LD_ADDR_EXP 102
57206: PUSH
57207: LD_INT 0
57209: ST_TO_ADDR
// sTools := false ;
57210: LD_ADDR_EXP 103
57214: PUSH
57215: LD_INT 0
57217: ST_TO_ADDR
// sSold := false ;
57218: LD_ADDR_EXP 68
57222: PUSH
57223: LD_INT 0
57225: ST_TO_ADDR
// sDiff := false ;
57226: LD_ADDR_EXP 69
57230: PUSH
57231: LD_INT 0
57233: ST_TO_ADDR
// sFog := false ;
57234: LD_ADDR_EXP 72
57238: PUSH
57239: LD_INT 0
57241: ST_TO_ADDR
// sReset := false ;
57242: LD_ADDR_EXP 73
57246: PUSH
57247: LD_INT 0
57249: ST_TO_ADDR
// sSun := false ;
57250: LD_ADDR_EXP 74
57254: PUSH
57255: LD_INT 0
57257: ST_TO_ADDR
// sTiger := false ;
57258: LD_ADDR_EXP 70
57262: PUSH
57263: LD_INT 0
57265: ST_TO_ADDR
// sBomb := false ;
57266: LD_ADDR_EXP 71
57270: PUSH
57271: LD_INT 0
57273: ST_TO_ADDR
// sWound := false ;
57274: LD_ADDR_EXP 79
57278: PUSH
57279: LD_INT 0
57281: ST_TO_ADDR
// sBetray := false ;
57282: LD_ADDR_EXP 83
57286: PUSH
57287: LD_INT 0
57289: ST_TO_ADDR
// sContamin := false ;
57290: LD_ADDR_EXP 84
57294: PUSH
57295: LD_INT 0
57297: ST_TO_ADDR
// sOil := false ;
57298: LD_ADDR_EXP 86
57302: PUSH
57303: LD_INT 0
57305: ST_TO_ADDR
// sStu := false ;
57306: LD_ADDR_EXP 90
57310: PUSH
57311: LD_INT 0
57313: ST_TO_ADDR
// sBazooka := false ;
57314: LD_ADDR_EXP 93
57318: PUSH
57319: LD_INT 0
57321: ST_TO_ADDR
// sMortar := false ;
57322: LD_ADDR_EXP 94
57326: PUSH
57327: LD_INT 0
57329: ST_TO_ADDR
// sRanger := false ;
57330: LD_ADDR_EXP 104
57334: PUSH
57335: LD_INT 0
57337: ST_TO_ADDR
// sComputer := false ;
57338: LD_ADDR_EXP 105
57342: PUSH
57343: LD_INT 0
57345: ST_TO_ADDR
// s30 := false ;
57346: LD_ADDR_EXP 106
57350: PUSH
57351: LD_INT 0
57353: ST_TO_ADDR
// s60 := false ;
57354: LD_ADDR_EXP 107
57358: PUSH
57359: LD_INT 0
57361: ST_TO_ADDR
// end ;
57362: LD_VAR 0 1
57366: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
57367: LD_INT 0
57369: PPUSH
57370: PPUSH
57371: PPUSH
57372: PPUSH
57373: PPUSH
57374: PPUSH
57375: PPUSH
// result := [ ] ;
57376: LD_ADDR_VAR 0 2
57380: PUSH
57381: EMPTY
57382: ST_TO_ADDR
// if campaign_id = 1 then
57383: LD_OWVAR 69
57387: PUSH
57388: LD_INT 1
57390: EQUAL
57391: IFFALSE 60557
// begin case mission_number of 1 :
57393: LD_OWVAR 70
57397: PUSH
57398: LD_INT 1
57400: DOUBLE
57401: EQUAL
57402: IFTRUE 57406
57404: GO 57482
57406: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
57407: LD_ADDR_VAR 0 2
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 4
57417: PUSH
57418: LD_INT 11
57420: PUSH
57421: LD_INT 12
57423: PUSH
57424: LD_INT 15
57426: PUSH
57427: LD_INT 16
57429: PUSH
57430: LD_INT 22
57432: PUSH
57433: LD_INT 23
57435: PUSH
57436: LD_INT 26
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 101
57452: PUSH
57453: LD_INT 102
57455: PUSH
57456: LD_INT 106
57458: PUSH
57459: LD_INT 116
57461: PUSH
57462: LD_INT 117
57464: PUSH
57465: LD_INT 118
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: ST_TO_ADDR
57480: GO 60555
57482: LD_INT 2
57484: DOUBLE
57485: EQUAL
57486: IFTRUE 57490
57488: GO 57574
57490: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
57491: LD_ADDR_VAR 0 2
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 4
57501: PUSH
57502: LD_INT 11
57504: PUSH
57505: LD_INT 12
57507: PUSH
57508: LD_INT 15
57510: PUSH
57511: LD_INT 16
57513: PUSH
57514: LD_INT 22
57516: PUSH
57517: LD_INT 23
57519: PUSH
57520: LD_INT 26
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 101
57536: PUSH
57537: LD_INT 102
57539: PUSH
57540: LD_INT 105
57542: PUSH
57543: LD_INT 106
57545: PUSH
57546: LD_INT 108
57548: PUSH
57549: LD_INT 116
57551: PUSH
57552: LD_INT 117
57554: PUSH
57555: LD_INT 118
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: ST_TO_ADDR
57572: GO 60555
57574: LD_INT 3
57576: DOUBLE
57577: EQUAL
57578: IFTRUE 57582
57580: GO 57670
57582: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
57583: LD_ADDR_VAR 0 2
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: LD_INT 5
57596: PUSH
57597: LD_INT 11
57599: PUSH
57600: LD_INT 12
57602: PUSH
57603: LD_INT 15
57605: PUSH
57606: LD_INT 16
57608: PUSH
57609: LD_INT 22
57611: PUSH
57612: LD_INT 26
57614: PUSH
57615: LD_INT 36
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 101
57632: PUSH
57633: LD_INT 102
57635: PUSH
57636: LD_INT 105
57638: PUSH
57639: LD_INT 106
57641: PUSH
57642: LD_INT 108
57644: PUSH
57645: LD_INT 116
57647: PUSH
57648: LD_INT 117
57650: PUSH
57651: LD_INT 118
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: ST_TO_ADDR
57668: GO 60555
57670: LD_INT 4
57672: DOUBLE
57673: EQUAL
57674: IFTRUE 57678
57676: GO 57774
57678: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
57679: LD_ADDR_VAR 0 2
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: LD_INT 4
57689: PUSH
57690: LD_INT 5
57692: PUSH
57693: LD_INT 8
57695: PUSH
57696: LD_INT 11
57698: PUSH
57699: LD_INT 12
57701: PUSH
57702: LD_INT 15
57704: PUSH
57705: LD_INT 16
57707: PUSH
57708: LD_INT 22
57710: PUSH
57711: LD_INT 23
57713: PUSH
57714: LD_INT 26
57716: PUSH
57717: LD_INT 36
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 101
57736: PUSH
57737: LD_INT 102
57739: PUSH
57740: LD_INT 105
57742: PUSH
57743: LD_INT 106
57745: PUSH
57746: LD_INT 108
57748: PUSH
57749: LD_INT 116
57751: PUSH
57752: LD_INT 117
57754: PUSH
57755: LD_INT 118
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: ST_TO_ADDR
57772: GO 60555
57774: LD_INT 5
57776: DOUBLE
57777: EQUAL
57778: IFTRUE 57782
57780: GO 57894
57782: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
57783: LD_ADDR_VAR 0 2
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 4
57793: PUSH
57794: LD_INT 5
57796: PUSH
57797: LD_INT 6
57799: PUSH
57800: LD_INT 8
57802: PUSH
57803: LD_INT 11
57805: PUSH
57806: LD_INT 12
57808: PUSH
57809: LD_INT 15
57811: PUSH
57812: LD_INT 16
57814: PUSH
57815: LD_INT 22
57817: PUSH
57818: LD_INT 23
57820: PUSH
57821: LD_INT 25
57823: PUSH
57824: LD_INT 26
57826: PUSH
57827: LD_INT 36
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 101
57848: PUSH
57849: LD_INT 102
57851: PUSH
57852: LD_INT 105
57854: PUSH
57855: LD_INT 106
57857: PUSH
57858: LD_INT 108
57860: PUSH
57861: LD_INT 109
57863: PUSH
57864: LD_INT 112
57866: PUSH
57867: LD_INT 116
57869: PUSH
57870: LD_INT 117
57872: PUSH
57873: LD_INT 118
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: ST_TO_ADDR
57892: GO 60555
57894: LD_INT 6
57896: DOUBLE
57897: EQUAL
57898: IFTRUE 57902
57900: GO 58034
57902: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
57903: LD_ADDR_VAR 0 2
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 4
57913: PUSH
57914: LD_INT 5
57916: PUSH
57917: LD_INT 6
57919: PUSH
57920: LD_INT 8
57922: PUSH
57923: LD_INT 11
57925: PUSH
57926: LD_INT 12
57928: PUSH
57929: LD_INT 15
57931: PUSH
57932: LD_INT 16
57934: PUSH
57935: LD_INT 20
57937: PUSH
57938: LD_INT 21
57940: PUSH
57941: LD_INT 22
57943: PUSH
57944: LD_INT 23
57946: PUSH
57947: LD_INT 25
57949: PUSH
57950: LD_INT 26
57952: PUSH
57953: LD_INT 30
57955: PUSH
57956: LD_INT 31
57958: PUSH
57959: LD_INT 32
57961: PUSH
57962: LD_INT 36
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 101
57988: PUSH
57989: LD_INT 102
57991: PUSH
57992: LD_INT 105
57994: PUSH
57995: LD_INT 106
57997: PUSH
57998: LD_INT 108
58000: PUSH
58001: LD_INT 109
58003: PUSH
58004: LD_INT 112
58006: PUSH
58007: LD_INT 116
58009: PUSH
58010: LD_INT 117
58012: PUSH
58013: LD_INT 118
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: ST_TO_ADDR
58032: GO 60555
58034: LD_INT 7
58036: DOUBLE
58037: EQUAL
58038: IFTRUE 58042
58040: GO 58154
58042: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
58043: LD_ADDR_VAR 0 2
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: LD_INT 4
58053: PUSH
58054: LD_INT 5
58056: PUSH
58057: LD_INT 7
58059: PUSH
58060: LD_INT 11
58062: PUSH
58063: LD_INT 12
58065: PUSH
58066: LD_INT 15
58068: PUSH
58069: LD_INT 16
58071: PUSH
58072: LD_INT 20
58074: PUSH
58075: LD_INT 21
58077: PUSH
58078: LD_INT 22
58080: PUSH
58081: LD_INT 23
58083: PUSH
58084: LD_INT 25
58086: PUSH
58087: LD_INT 26
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 101
58108: PUSH
58109: LD_INT 102
58111: PUSH
58112: LD_INT 103
58114: PUSH
58115: LD_INT 105
58117: PUSH
58118: LD_INT 106
58120: PUSH
58121: LD_INT 108
58123: PUSH
58124: LD_INT 112
58126: PUSH
58127: LD_INT 116
58129: PUSH
58130: LD_INT 117
58132: PUSH
58133: LD_INT 118
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: ST_TO_ADDR
58152: GO 60555
58154: LD_INT 8
58156: DOUBLE
58157: EQUAL
58158: IFTRUE 58162
58160: GO 58302
58162: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
58163: LD_ADDR_VAR 0 2
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 4
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: LD_INT 6
58179: PUSH
58180: LD_INT 7
58182: PUSH
58183: LD_INT 8
58185: PUSH
58186: LD_INT 11
58188: PUSH
58189: LD_INT 12
58191: PUSH
58192: LD_INT 15
58194: PUSH
58195: LD_INT 16
58197: PUSH
58198: LD_INT 20
58200: PUSH
58201: LD_INT 21
58203: PUSH
58204: LD_INT 22
58206: PUSH
58207: LD_INT 23
58209: PUSH
58210: LD_INT 25
58212: PUSH
58213: LD_INT 26
58215: PUSH
58216: LD_INT 30
58218: PUSH
58219: LD_INT 31
58221: PUSH
58222: LD_INT 32
58224: PUSH
58225: LD_INT 36
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 101
58252: PUSH
58253: LD_INT 102
58255: PUSH
58256: LD_INT 103
58258: PUSH
58259: LD_INT 105
58261: PUSH
58262: LD_INT 106
58264: PUSH
58265: LD_INT 108
58267: PUSH
58268: LD_INT 109
58270: PUSH
58271: LD_INT 112
58273: PUSH
58274: LD_INT 116
58276: PUSH
58277: LD_INT 117
58279: PUSH
58280: LD_INT 118
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: ST_TO_ADDR
58300: GO 60555
58302: LD_INT 9
58304: DOUBLE
58305: EQUAL
58306: IFTRUE 58310
58308: GO 58458
58310: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
58311: LD_ADDR_VAR 0 2
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 4
58321: PUSH
58322: LD_INT 5
58324: PUSH
58325: LD_INT 6
58327: PUSH
58328: LD_INT 7
58330: PUSH
58331: LD_INT 8
58333: PUSH
58334: LD_INT 11
58336: PUSH
58337: LD_INT 12
58339: PUSH
58340: LD_INT 15
58342: PUSH
58343: LD_INT 16
58345: PUSH
58346: LD_INT 20
58348: PUSH
58349: LD_INT 21
58351: PUSH
58352: LD_INT 22
58354: PUSH
58355: LD_INT 23
58357: PUSH
58358: LD_INT 25
58360: PUSH
58361: LD_INT 26
58363: PUSH
58364: LD_INT 28
58366: PUSH
58367: LD_INT 30
58369: PUSH
58370: LD_INT 31
58372: PUSH
58373: LD_INT 32
58375: PUSH
58376: LD_INT 36
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 101
58404: PUSH
58405: LD_INT 102
58407: PUSH
58408: LD_INT 103
58410: PUSH
58411: LD_INT 105
58413: PUSH
58414: LD_INT 106
58416: PUSH
58417: LD_INT 108
58419: PUSH
58420: LD_INT 109
58422: PUSH
58423: LD_INT 112
58425: PUSH
58426: LD_INT 114
58428: PUSH
58429: LD_INT 116
58431: PUSH
58432: LD_INT 117
58434: PUSH
58435: LD_INT 118
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: ST_TO_ADDR
58456: GO 60555
58458: LD_INT 10
58460: DOUBLE
58461: EQUAL
58462: IFTRUE 58466
58464: GO 58662
58466: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
58467: LD_ADDR_VAR 0 2
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 4
58477: PUSH
58478: LD_INT 5
58480: PUSH
58481: LD_INT 6
58483: PUSH
58484: LD_INT 7
58486: PUSH
58487: LD_INT 8
58489: PUSH
58490: LD_INT 9
58492: PUSH
58493: LD_INT 10
58495: PUSH
58496: LD_INT 11
58498: PUSH
58499: LD_INT 12
58501: PUSH
58502: LD_INT 13
58504: PUSH
58505: LD_INT 14
58507: PUSH
58508: LD_INT 15
58510: PUSH
58511: LD_INT 16
58513: PUSH
58514: LD_INT 17
58516: PUSH
58517: LD_INT 18
58519: PUSH
58520: LD_INT 19
58522: PUSH
58523: LD_INT 20
58525: PUSH
58526: LD_INT 21
58528: PUSH
58529: LD_INT 22
58531: PUSH
58532: LD_INT 23
58534: PUSH
58535: LD_INT 24
58537: PUSH
58538: LD_INT 25
58540: PUSH
58541: LD_INT 26
58543: PUSH
58544: LD_INT 28
58546: PUSH
58547: LD_INT 30
58549: PUSH
58550: LD_INT 31
58552: PUSH
58553: LD_INT 32
58555: PUSH
58556: LD_INT 36
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 101
58592: PUSH
58593: LD_INT 102
58595: PUSH
58596: LD_INT 103
58598: PUSH
58599: LD_INT 104
58601: PUSH
58602: LD_INT 105
58604: PUSH
58605: LD_INT 106
58607: PUSH
58608: LD_INT 107
58610: PUSH
58611: LD_INT 108
58613: PUSH
58614: LD_INT 109
58616: PUSH
58617: LD_INT 110
58619: PUSH
58620: LD_INT 111
58622: PUSH
58623: LD_INT 112
58625: PUSH
58626: LD_INT 114
58628: PUSH
58629: LD_INT 116
58631: PUSH
58632: LD_INT 117
58634: PUSH
58635: LD_INT 118
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: ST_TO_ADDR
58660: GO 60555
58662: LD_INT 11
58664: DOUBLE
58665: EQUAL
58666: IFTRUE 58670
58668: GO 58874
58670: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
58671: LD_ADDR_VAR 0 2
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: LD_INT 4
58684: PUSH
58685: LD_INT 5
58687: PUSH
58688: LD_INT 6
58690: PUSH
58691: LD_INT 7
58693: PUSH
58694: LD_INT 8
58696: PUSH
58697: LD_INT 9
58699: PUSH
58700: LD_INT 10
58702: PUSH
58703: LD_INT 11
58705: PUSH
58706: LD_INT 12
58708: PUSH
58709: LD_INT 13
58711: PUSH
58712: LD_INT 14
58714: PUSH
58715: LD_INT 15
58717: PUSH
58718: LD_INT 16
58720: PUSH
58721: LD_INT 17
58723: PUSH
58724: LD_INT 18
58726: PUSH
58727: LD_INT 19
58729: PUSH
58730: LD_INT 20
58732: PUSH
58733: LD_INT 21
58735: PUSH
58736: LD_INT 22
58738: PUSH
58739: LD_INT 23
58741: PUSH
58742: LD_INT 24
58744: PUSH
58745: LD_INT 25
58747: PUSH
58748: LD_INT 26
58750: PUSH
58751: LD_INT 28
58753: PUSH
58754: LD_INT 30
58756: PUSH
58757: LD_INT 31
58759: PUSH
58760: LD_INT 32
58762: PUSH
58763: LD_INT 34
58765: PUSH
58766: LD_INT 36
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 101
58804: PUSH
58805: LD_INT 102
58807: PUSH
58808: LD_INT 103
58810: PUSH
58811: LD_INT 104
58813: PUSH
58814: LD_INT 105
58816: PUSH
58817: LD_INT 106
58819: PUSH
58820: LD_INT 107
58822: PUSH
58823: LD_INT 108
58825: PUSH
58826: LD_INT 109
58828: PUSH
58829: LD_INT 110
58831: PUSH
58832: LD_INT 111
58834: PUSH
58835: LD_INT 112
58837: PUSH
58838: LD_INT 114
58840: PUSH
58841: LD_INT 116
58843: PUSH
58844: LD_INT 117
58846: PUSH
58847: LD_INT 118
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: ST_TO_ADDR
58872: GO 60555
58874: LD_INT 12
58876: DOUBLE
58877: EQUAL
58878: IFTRUE 58882
58880: GO 59102
58882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
58883: LD_ADDR_VAR 0 2
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: LD_INT 3
58896: PUSH
58897: LD_INT 4
58899: PUSH
58900: LD_INT 5
58902: PUSH
58903: LD_INT 6
58905: PUSH
58906: LD_INT 7
58908: PUSH
58909: LD_INT 8
58911: PUSH
58912: LD_INT 9
58914: PUSH
58915: LD_INT 10
58917: PUSH
58918: LD_INT 11
58920: PUSH
58921: LD_INT 12
58923: PUSH
58924: LD_INT 13
58926: PUSH
58927: LD_INT 14
58929: PUSH
58930: LD_INT 15
58932: PUSH
58933: LD_INT 16
58935: PUSH
58936: LD_INT 17
58938: PUSH
58939: LD_INT 18
58941: PUSH
58942: LD_INT 19
58944: PUSH
58945: LD_INT 20
58947: PUSH
58948: LD_INT 21
58950: PUSH
58951: LD_INT 22
58953: PUSH
58954: LD_INT 23
58956: PUSH
58957: LD_INT 24
58959: PUSH
58960: LD_INT 25
58962: PUSH
58963: LD_INT 26
58965: PUSH
58966: LD_INT 27
58968: PUSH
58969: LD_INT 28
58971: PUSH
58972: LD_INT 30
58974: PUSH
58975: LD_INT 31
58977: PUSH
58978: LD_INT 32
58980: PUSH
58981: LD_INT 33
58983: PUSH
58984: LD_INT 34
58986: PUSH
58987: LD_INT 36
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 101
59028: PUSH
59029: LD_INT 102
59031: PUSH
59032: LD_INT 103
59034: PUSH
59035: LD_INT 104
59037: PUSH
59038: LD_INT 105
59040: PUSH
59041: LD_INT 106
59043: PUSH
59044: LD_INT 107
59046: PUSH
59047: LD_INT 108
59049: PUSH
59050: LD_INT 109
59052: PUSH
59053: LD_INT 110
59055: PUSH
59056: LD_INT 111
59058: PUSH
59059: LD_INT 112
59061: PUSH
59062: LD_INT 113
59064: PUSH
59065: LD_INT 114
59067: PUSH
59068: LD_INT 116
59070: PUSH
59071: LD_INT 117
59073: PUSH
59074: LD_INT 118
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: ST_TO_ADDR
59100: GO 60555
59102: LD_INT 13
59104: DOUBLE
59105: EQUAL
59106: IFTRUE 59110
59108: GO 59318
59110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
59111: LD_ADDR_VAR 0 2
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: LD_INT 4
59127: PUSH
59128: LD_INT 5
59130: PUSH
59131: LD_INT 8
59133: PUSH
59134: LD_INT 9
59136: PUSH
59137: LD_INT 10
59139: PUSH
59140: LD_INT 11
59142: PUSH
59143: LD_INT 12
59145: PUSH
59146: LD_INT 14
59148: PUSH
59149: LD_INT 15
59151: PUSH
59152: LD_INT 16
59154: PUSH
59155: LD_INT 17
59157: PUSH
59158: LD_INT 18
59160: PUSH
59161: LD_INT 19
59163: PUSH
59164: LD_INT 20
59166: PUSH
59167: LD_INT 21
59169: PUSH
59170: LD_INT 22
59172: PUSH
59173: LD_INT 23
59175: PUSH
59176: LD_INT 24
59178: PUSH
59179: LD_INT 25
59181: PUSH
59182: LD_INT 26
59184: PUSH
59185: LD_INT 27
59187: PUSH
59188: LD_INT 28
59190: PUSH
59191: LD_INT 30
59193: PUSH
59194: LD_INT 31
59196: PUSH
59197: LD_INT 32
59199: PUSH
59200: LD_INT 33
59202: PUSH
59203: LD_INT 34
59205: PUSH
59206: LD_INT 36
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 101
59244: PUSH
59245: LD_INT 102
59247: PUSH
59248: LD_INT 103
59250: PUSH
59251: LD_INT 104
59253: PUSH
59254: LD_INT 105
59256: PUSH
59257: LD_INT 106
59259: PUSH
59260: LD_INT 107
59262: PUSH
59263: LD_INT 108
59265: PUSH
59266: LD_INT 109
59268: PUSH
59269: LD_INT 110
59271: PUSH
59272: LD_INT 111
59274: PUSH
59275: LD_INT 112
59277: PUSH
59278: LD_INT 113
59280: PUSH
59281: LD_INT 114
59283: PUSH
59284: LD_INT 116
59286: PUSH
59287: LD_INT 117
59289: PUSH
59290: LD_INT 118
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: ST_TO_ADDR
59316: GO 60555
59318: LD_INT 14
59320: DOUBLE
59321: EQUAL
59322: IFTRUE 59326
59324: GO 59550
59326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
59327: LD_ADDR_VAR 0 2
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: LD_INT 4
59343: PUSH
59344: LD_INT 5
59346: PUSH
59347: LD_INT 6
59349: PUSH
59350: LD_INT 7
59352: PUSH
59353: LD_INT 8
59355: PUSH
59356: LD_INT 9
59358: PUSH
59359: LD_INT 10
59361: PUSH
59362: LD_INT 11
59364: PUSH
59365: LD_INT 12
59367: PUSH
59368: LD_INT 13
59370: PUSH
59371: LD_INT 14
59373: PUSH
59374: LD_INT 15
59376: PUSH
59377: LD_INT 16
59379: PUSH
59380: LD_INT 17
59382: PUSH
59383: LD_INT 18
59385: PUSH
59386: LD_INT 19
59388: PUSH
59389: LD_INT 20
59391: PUSH
59392: LD_INT 21
59394: PUSH
59395: LD_INT 22
59397: PUSH
59398: LD_INT 23
59400: PUSH
59401: LD_INT 24
59403: PUSH
59404: LD_INT 25
59406: PUSH
59407: LD_INT 26
59409: PUSH
59410: LD_INT 27
59412: PUSH
59413: LD_INT 28
59415: PUSH
59416: LD_INT 29
59418: PUSH
59419: LD_INT 30
59421: PUSH
59422: LD_INT 31
59424: PUSH
59425: LD_INT 32
59427: PUSH
59428: LD_INT 33
59430: PUSH
59431: LD_INT 34
59433: PUSH
59434: LD_INT 36
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 101
59476: PUSH
59477: LD_INT 102
59479: PUSH
59480: LD_INT 103
59482: PUSH
59483: LD_INT 104
59485: PUSH
59486: LD_INT 105
59488: PUSH
59489: LD_INT 106
59491: PUSH
59492: LD_INT 107
59494: PUSH
59495: LD_INT 108
59497: PUSH
59498: LD_INT 109
59500: PUSH
59501: LD_INT 110
59503: PUSH
59504: LD_INT 111
59506: PUSH
59507: LD_INT 112
59509: PUSH
59510: LD_INT 113
59512: PUSH
59513: LD_INT 114
59515: PUSH
59516: LD_INT 116
59518: PUSH
59519: LD_INT 117
59521: PUSH
59522: LD_INT 118
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: ST_TO_ADDR
59548: GO 60555
59550: LD_INT 15
59552: DOUBLE
59553: EQUAL
59554: IFTRUE 59558
59556: GO 59782
59558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
59559: LD_ADDR_VAR 0 2
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: LD_INT 4
59575: PUSH
59576: LD_INT 5
59578: PUSH
59579: LD_INT 6
59581: PUSH
59582: LD_INT 7
59584: PUSH
59585: LD_INT 8
59587: PUSH
59588: LD_INT 9
59590: PUSH
59591: LD_INT 10
59593: PUSH
59594: LD_INT 11
59596: PUSH
59597: LD_INT 12
59599: PUSH
59600: LD_INT 13
59602: PUSH
59603: LD_INT 14
59605: PUSH
59606: LD_INT 15
59608: PUSH
59609: LD_INT 16
59611: PUSH
59612: LD_INT 17
59614: PUSH
59615: LD_INT 18
59617: PUSH
59618: LD_INT 19
59620: PUSH
59621: LD_INT 20
59623: PUSH
59624: LD_INT 21
59626: PUSH
59627: LD_INT 22
59629: PUSH
59630: LD_INT 23
59632: PUSH
59633: LD_INT 24
59635: PUSH
59636: LD_INT 25
59638: PUSH
59639: LD_INT 26
59641: PUSH
59642: LD_INT 27
59644: PUSH
59645: LD_INT 28
59647: PUSH
59648: LD_INT 29
59650: PUSH
59651: LD_INT 30
59653: PUSH
59654: LD_INT 31
59656: PUSH
59657: LD_INT 32
59659: PUSH
59660: LD_INT 33
59662: PUSH
59663: LD_INT 34
59665: PUSH
59666: LD_INT 36
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 101
59708: PUSH
59709: LD_INT 102
59711: PUSH
59712: LD_INT 103
59714: PUSH
59715: LD_INT 104
59717: PUSH
59718: LD_INT 105
59720: PUSH
59721: LD_INT 106
59723: PUSH
59724: LD_INT 107
59726: PUSH
59727: LD_INT 108
59729: PUSH
59730: LD_INT 109
59732: PUSH
59733: LD_INT 110
59735: PUSH
59736: LD_INT 111
59738: PUSH
59739: LD_INT 112
59741: PUSH
59742: LD_INT 113
59744: PUSH
59745: LD_INT 114
59747: PUSH
59748: LD_INT 116
59750: PUSH
59751: LD_INT 117
59753: PUSH
59754: LD_INT 118
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: ST_TO_ADDR
59780: GO 60555
59782: LD_INT 16
59784: DOUBLE
59785: EQUAL
59786: IFTRUE 59790
59788: GO 59926
59790: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
59791: LD_ADDR_VAR 0 2
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: LD_INT 4
59801: PUSH
59802: LD_INT 5
59804: PUSH
59805: LD_INT 7
59807: PUSH
59808: LD_INT 11
59810: PUSH
59811: LD_INT 12
59813: PUSH
59814: LD_INT 15
59816: PUSH
59817: LD_INT 16
59819: PUSH
59820: LD_INT 20
59822: PUSH
59823: LD_INT 21
59825: PUSH
59826: LD_INT 22
59828: PUSH
59829: LD_INT 23
59831: PUSH
59832: LD_INT 25
59834: PUSH
59835: LD_INT 26
59837: PUSH
59838: LD_INT 30
59840: PUSH
59841: LD_INT 31
59843: PUSH
59844: LD_INT 32
59846: PUSH
59847: LD_INT 33
59849: PUSH
59850: LD_INT 34
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 101
59876: PUSH
59877: LD_INT 102
59879: PUSH
59880: LD_INT 103
59882: PUSH
59883: LD_INT 106
59885: PUSH
59886: LD_INT 108
59888: PUSH
59889: LD_INT 112
59891: PUSH
59892: LD_INT 113
59894: PUSH
59895: LD_INT 114
59897: PUSH
59898: LD_INT 116
59900: PUSH
59901: LD_INT 117
59903: PUSH
59904: LD_INT 118
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: ST_TO_ADDR
59924: GO 60555
59926: LD_INT 17
59928: DOUBLE
59929: EQUAL
59930: IFTRUE 59934
59932: GO 60158
59934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
59935: LD_ADDR_VAR 0 2
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: LD_INT 5
59954: PUSH
59955: LD_INT 6
59957: PUSH
59958: LD_INT 7
59960: PUSH
59961: LD_INT 8
59963: PUSH
59964: LD_INT 9
59966: PUSH
59967: LD_INT 10
59969: PUSH
59970: LD_INT 11
59972: PUSH
59973: LD_INT 12
59975: PUSH
59976: LD_INT 13
59978: PUSH
59979: LD_INT 14
59981: PUSH
59982: LD_INT 15
59984: PUSH
59985: LD_INT 16
59987: PUSH
59988: LD_INT 17
59990: PUSH
59991: LD_INT 18
59993: PUSH
59994: LD_INT 19
59996: PUSH
59997: LD_INT 20
59999: PUSH
60000: LD_INT 21
60002: PUSH
60003: LD_INT 22
60005: PUSH
60006: LD_INT 23
60008: PUSH
60009: LD_INT 24
60011: PUSH
60012: LD_INT 25
60014: PUSH
60015: LD_INT 26
60017: PUSH
60018: LD_INT 27
60020: PUSH
60021: LD_INT 28
60023: PUSH
60024: LD_INT 29
60026: PUSH
60027: LD_INT 30
60029: PUSH
60030: LD_INT 31
60032: PUSH
60033: LD_INT 32
60035: PUSH
60036: LD_INT 33
60038: PUSH
60039: LD_INT 34
60041: PUSH
60042: LD_INT 36
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 101
60084: PUSH
60085: LD_INT 102
60087: PUSH
60088: LD_INT 103
60090: PUSH
60091: LD_INT 104
60093: PUSH
60094: LD_INT 105
60096: PUSH
60097: LD_INT 106
60099: PUSH
60100: LD_INT 107
60102: PUSH
60103: LD_INT 108
60105: PUSH
60106: LD_INT 109
60108: PUSH
60109: LD_INT 110
60111: PUSH
60112: LD_INT 111
60114: PUSH
60115: LD_INT 112
60117: PUSH
60118: LD_INT 113
60120: PUSH
60121: LD_INT 114
60123: PUSH
60124: LD_INT 116
60126: PUSH
60127: LD_INT 117
60129: PUSH
60130: LD_INT 118
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: ST_TO_ADDR
60156: GO 60555
60158: LD_INT 18
60160: DOUBLE
60161: EQUAL
60162: IFTRUE 60166
60164: GO 60314
60166: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
60167: LD_ADDR_VAR 0 2
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: LD_INT 4
60177: PUSH
60178: LD_INT 5
60180: PUSH
60181: LD_INT 7
60183: PUSH
60184: LD_INT 11
60186: PUSH
60187: LD_INT 12
60189: PUSH
60190: LD_INT 15
60192: PUSH
60193: LD_INT 16
60195: PUSH
60196: LD_INT 20
60198: PUSH
60199: LD_INT 21
60201: PUSH
60202: LD_INT 22
60204: PUSH
60205: LD_INT 23
60207: PUSH
60208: LD_INT 25
60210: PUSH
60211: LD_INT 26
60213: PUSH
60214: LD_INT 30
60216: PUSH
60217: LD_INT 31
60219: PUSH
60220: LD_INT 32
60222: PUSH
60223: LD_INT 33
60225: PUSH
60226: LD_INT 34
60228: PUSH
60229: LD_INT 35
60231: PUSH
60232: LD_INT 36
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 101
60260: PUSH
60261: LD_INT 102
60263: PUSH
60264: LD_INT 103
60266: PUSH
60267: LD_INT 106
60269: PUSH
60270: LD_INT 108
60272: PUSH
60273: LD_INT 112
60275: PUSH
60276: LD_INT 113
60278: PUSH
60279: LD_INT 114
60281: PUSH
60282: LD_INT 115
60284: PUSH
60285: LD_INT 116
60287: PUSH
60288: LD_INT 117
60290: PUSH
60291: LD_INT 118
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: ST_TO_ADDR
60312: GO 60555
60314: LD_INT 19
60316: DOUBLE
60317: EQUAL
60318: IFTRUE 60322
60320: GO 60554
60322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
60323: LD_ADDR_VAR 0 2
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: LD_INT 4
60339: PUSH
60340: LD_INT 5
60342: PUSH
60343: LD_INT 6
60345: PUSH
60346: LD_INT 7
60348: PUSH
60349: LD_INT 8
60351: PUSH
60352: LD_INT 9
60354: PUSH
60355: LD_INT 10
60357: PUSH
60358: LD_INT 11
60360: PUSH
60361: LD_INT 12
60363: PUSH
60364: LD_INT 13
60366: PUSH
60367: LD_INT 14
60369: PUSH
60370: LD_INT 15
60372: PUSH
60373: LD_INT 16
60375: PUSH
60376: LD_INT 17
60378: PUSH
60379: LD_INT 18
60381: PUSH
60382: LD_INT 19
60384: PUSH
60385: LD_INT 20
60387: PUSH
60388: LD_INT 21
60390: PUSH
60391: LD_INT 22
60393: PUSH
60394: LD_INT 23
60396: PUSH
60397: LD_INT 24
60399: PUSH
60400: LD_INT 25
60402: PUSH
60403: LD_INT 26
60405: PUSH
60406: LD_INT 27
60408: PUSH
60409: LD_INT 28
60411: PUSH
60412: LD_INT 29
60414: PUSH
60415: LD_INT 30
60417: PUSH
60418: LD_INT 31
60420: PUSH
60421: LD_INT 32
60423: PUSH
60424: LD_INT 33
60426: PUSH
60427: LD_INT 34
60429: PUSH
60430: LD_INT 35
60432: PUSH
60433: LD_INT 36
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 101
60476: PUSH
60477: LD_INT 102
60479: PUSH
60480: LD_INT 103
60482: PUSH
60483: LD_INT 104
60485: PUSH
60486: LD_INT 105
60488: PUSH
60489: LD_INT 106
60491: PUSH
60492: LD_INT 107
60494: PUSH
60495: LD_INT 108
60497: PUSH
60498: LD_INT 109
60500: PUSH
60501: LD_INT 110
60503: PUSH
60504: LD_INT 111
60506: PUSH
60507: LD_INT 112
60509: PUSH
60510: LD_INT 113
60512: PUSH
60513: LD_INT 114
60515: PUSH
60516: LD_INT 115
60518: PUSH
60519: LD_INT 116
60521: PUSH
60522: LD_INT 117
60524: PUSH
60525: LD_INT 118
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: ST_TO_ADDR
60552: GO 60555
60554: POP
// end else
60555: GO 60786
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
60557: LD_ADDR_VAR 0 2
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: LD_INT 4
60573: PUSH
60574: LD_INT 5
60576: PUSH
60577: LD_INT 6
60579: PUSH
60580: LD_INT 7
60582: PUSH
60583: LD_INT 8
60585: PUSH
60586: LD_INT 9
60588: PUSH
60589: LD_INT 10
60591: PUSH
60592: LD_INT 11
60594: PUSH
60595: LD_INT 12
60597: PUSH
60598: LD_INT 13
60600: PUSH
60601: LD_INT 14
60603: PUSH
60604: LD_INT 15
60606: PUSH
60607: LD_INT 16
60609: PUSH
60610: LD_INT 17
60612: PUSH
60613: LD_INT 18
60615: PUSH
60616: LD_INT 19
60618: PUSH
60619: LD_INT 20
60621: PUSH
60622: LD_INT 21
60624: PUSH
60625: LD_INT 22
60627: PUSH
60628: LD_INT 23
60630: PUSH
60631: LD_INT 24
60633: PUSH
60634: LD_INT 25
60636: PUSH
60637: LD_INT 26
60639: PUSH
60640: LD_INT 27
60642: PUSH
60643: LD_INT 28
60645: PUSH
60646: LD_INT 29
60648: PUSH
60649: LD_INT 30
60651: PUSH
60652: LD_INT 31
60654: PUSH
60655: LD_INT 32
60657: PUSH
60658: LD_INT 33
60660: PUSH
60661: LD_INT 34
60663: PUSH
60664: LD_INT 35
60666: PUSH
60667: LD_INT 36
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 101
60710: PUSH
60711: LD_INT 102
60713: PUSH
60714: LD_INT 103
60716: PUSH
60717: LD_INT 104
60719: PUSH
60720: LD_INT 105
60722: PUSH
60723: LD_INT 106
60725: PUSH
60726: LD_INT 107
60728: PUSH
60729: LD_INT 108
60731: PUSH
60732: LD_INT 109
60734: PUSH
60735: LD_INT 110
60737: PUSH
60738: LD_INT 111
60740: PUSH
60741: LD_INT 112
60743: PUSH
60744: LD_INT 113
60746: PUSH
60747: LD_INT 114
60749: PUSH
60750: LD_INT 115
60752: PUSH
60753: LD_INT 116
60755: PUSH
60756: LD_INT 117
60758: PUSH
60759: LD_INT 118
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: ST_TO_ADDR
// if result then
60786: LD_VAR 0 2
60790: IFFALSE 61576
// begin normal :=  ;
60792: LD_ADDR_VAR 0 5
60796: PUSH
60797: LD_STRING 
60799: ST_TO_ADDR
// hardcore :=  ;
60800: LD_ADDR_VAR 0 6
60804: PUSH
60805: LD_STRING 
60807: ST_TO_ADDR
// active :=  ;
60808: LD_ADDR_VAR 0 7
60812: PUSH
60813: LD_STRING 
60815: ST_TO_ADDR
// for i = 1 to normalCounter do
60816: LD_ADDR_VAR 0 8
60820: PUSH
60821: DOUBLE
60822: LD_INT 1
60824: DEC
60825: ST_TO_ADDR
60826: LD_EXP 52
60830: PUSH
60831: FOR_TO
60832: IFFALSE 60933
// begin tmp := 0 ;
60834: LD_ADDR_VAR 0 3
60838: PUSH
60839: LD_STRING 0
60841: ST_TO_ADDR
// if result [ 1 ] then
60842: LD_VAR 0 2
60846: PUSH
60847: LD_INT 1
60849: ARRAY
60850: IFFALSE 60915
// if result [ 1 ] [ 1 ] = i then
60852: LD_VAR 0 2
60856: PUSH
60857: LD_INT 1
60859: ARRAY
60860: PUSH
60861: LD_INT 1
60863: ARRAY
60864: PUSH
60865: LD_VAR 0 8
60869: EQUAL
60870: IFFALSE 60915
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
60872: LD_ADDR_VAR 0 2
60876: PUSH
60877: LD_VAR 0 2
60881: PPUSH
60882: LD_INT 1
60884: PPUSH
60885: LD_VAR 0 2
60889: PUSH
60890: LD_INT 1
60892: ARRAY
60893: PPUSH
60894: LD_INT 1
60896: PPUSH
60897: CALL_OW 3
60901: PPUSH
60902: CALL_OW 1
60906: ST_TO_ADDR
// tmp := 1 ;
60907: LD_ADDR_VAR 0 3
60911: PUSH
60912: LD_STRING 1
60914: ST_TO_ADDR
// end ; normal := normal & tmp ;
60915: LD_ADDR_VAR 0 5
60919: PUSH
60920: LD_VAR 0 5
60924: PUSH
60925: LD_VAR 0 3
60929: STR
60930: ST_TO_ADDR
// end ;
60931: GO 60831
60933: POP
60934: POP
// for i = 1 to hardcoreCounter do
60935: LD_ADDR_VAR 0 8
60939: PUSH
60940: DOUBLE
60941: LD_INT 1
60943: DEC
60944: ST_TO_ADDR
60945: LD_EXP 53
60949: PUSH
60950: FOR_TO
60951: IFFALSE 61056
// begin tmp := 0 ;
60953: LD_ADDR_VAR 0 3
60957: PUSH
60958: LD_STRING 0
60960: ST_TO_ADDR
// if result [ 2 ] then
60961: LD_VAR 0 2
60965: PUSH
60966: LD_INT 2
60968: ARRAY
60969: IFFALSE 61038
// if result [ 2 ] [ 1 ] = 100 + i then
60971: LD_VAR 0 2
60975: PUSH
60976: LD_INT 2
60978: ARRAY
60979: PUSH
60980: LD_INT 1
60982: ARRAY
60983: PUSH
60984: LD_INT 100
60986: PUSH
60987: LD_VAR 0 8
60991: PLUS
60992: EQUAL
60993: IFFALSE 61038
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
60995: LD_ADDR_VAR 0 2
60999: PUSH
61000: LD_VAR 0 2
61004: PPUSH
61005: LD_INT 2
61007: PPUSH
61008: LD_VAR 0 2
61012: PUSH
61013: LD_INT 2
61015: ARRAY
61016: PPUSH
61017: LD_INT 1
61019: PPUSH
61020: CALL_OW 3
61024: PPUSH
61025: CALL_OW 1
61029: ST_TO_ADDR
// tmp := 1 ;
61030: LD_ADDR_VAR 0 3
61034: PUSH
61035: LD_STRING 1
61037: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
61038: LD_ADDR_VAR 0 6
61042: PUSH
61043: LD_VAR 0 6
61047: PUSH
61048: LD_VAR 0 3
61052: STR
61053: ST_TO_ADDR
// end ;
61054: GO 60950
61056: POP
61057: POP
// if isGameLoad then
61058: LD_VAR 0 1
61062: IFFALSE 61537
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
61064: LD_ADDR_VAR 0 4
61068: PUSH
61069: LD_EXP 56
61073: PUSH
61074: LD_EXP 55
61078: PUSH
61079: LD_EXP 57
61083: PUSH
61084: LD_EXP 54
61088: PUSH
61089: LD_EXP 58
61093: PUSH
61094: LD_EXP 59
61098: PUSH
61099: LD_EXP 60
61103: PUSH
61104: LD_EXP 61
61108: PUSH
61109: LD_EXP 62
61113: PUSH
61114: LD_EXP 63
61118: PUSH
61119: LD_EXP 64
61123: PUSH
61124: LD_EXP 65
61128: PUSH
61129: LD_EXP 66
61133: PUSH
61134: LD_EXP 67
61138: PUSH
61139: LD_EXP 75
61143: PUSH
61144: LD_EXP 76
61148: PUSH
61149: LD_EXP 77
61153: PUSH
61154: LD_EXP 78
61158: PUSH
61159: LD_EXP 80
61163: PUSH
61164: LD_EXP 81
61168: PUSH
61169: LD_EXP 82
61173: PUSH
61174: LD_EXP 85
61178: PUSH
61179: LD_EXP 87
61183: PUSH
61184: LD_EXP 88
61188: PUSH
61189: LD_EXP 89
61193: PUSH
61194: LD_EXP 91
61198: PUSH
61199: LD_EXP 92
61203: PUSH
61204: LD_EXP 95
61208: PUSH
61209: LD_EXP 96
61213: PUSH
61214: LD_EXP 97
61218: PUSH
61219: LD_EXP 98
61223: PUSH
61224: LD_EXP 99
61228: PUSH
61229: LD_EXP 100
61233: PUSH
61234: LD_EXP 101
61238: PUSH
61239: LD_EXP 102
61243: PUSH
61244: LD_EXP 103
61248: PUSH
61249: LD_EXP 68
61253: PUSH
61254: LD_EXP 69
61258: PUSH
61259: LD_EXP 72
61263: PUSH
61264: LD_EXP 73
61268: PUSH
61269: LD_EXP 74
61273: PUSH
61274: LD_EXP 70
61278: PUSH
61279: LD_EXP 71
61283: PUSH
61284: LD_EXP 79
61288: PUSH
61289: LD_EXP 83
61293: PUSH
61294: LD_EXP 84
61298: PUSH
61299: LD_EXP 86
61303: PUSH
61304: LD_EXP 90
61308: PUSH
61309: LD_EXP 93
61313: PUSH
61314: LD_EXP 94
61318: PUSH
61319: LD_EXP 104
61323: PUSH
61324: LD_EXP 105
61328: PUSH
61329: LD_EXP 106
61333: PUSH
61334: LD_EXP 107
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// tmp :=  ;
61395: LD_ADDR_VAR 0 3
61399: PUSH
61400: LD_STRING 
61402: ST_TO_ADDR
// for i = 1 to normalCounter do
61403: LD_ADDR_VAR 0 8
61407: PUSH
61408: DOUBLE
61409: LD_INT 1
61411: DEC
61412: ST_TO_ADDR
61413: LD_EXP 52
61417: PUSH
61418: FOR_TO
61419: IFFALSE 61455
// begin if flags [ i ] then
61421: LD_VAR 0 4
61425: PUSH
61426: LD_VAR 0 8
61430: ARRAY
61431: IFFALSE 61453
// tmp := tmp & i & ; ;
61433: LD_ADDR_VAR 0 3
61437: PUSH
61438: LD_VAR 0 3
61442: PUSH
61443: LD_VAR 0 8
61447: STR
61448: PUSH
61449: LD_STRING ;
61451: STR
61452: ST_TO_ADDR
// end ;
61453: GO 61418
61455: POP
61456: POP
// for i = 1 to hardcoreCounter do
61457: LD_ADDR_VAR 0 8
61461: PUSH
61462: DOUBLE
61463: LD_INT 1
61465: DEC
61466: ST_TO_ADDR
61467: LD_EXP 53
61471: PUSH
61472: FOR_TO
61473: IFFALSE 61519
// begin if flags [ normalCounter + i ] then
61475: LD_VAR 0 4
61479: PUSH
61480: LD_EXP 52
61484: PUSH
61485: LD_VAR 0 8
61489: PLUS
61490: ARRAY
61491: IFFALSE 61517
// tmp := tmp & ( 100 + i ) & ; ;
61493: LD_ADDR_VAR 0 3
61497: PUSH
61498: LD_VAR 0 3
61502: PUSH
61503: LD_INT 100
61505: PUSH
61506: LD_VAR 0 8
61510: PLUS
61511: STR
61512: PUSH
61513: LD_STRING ;
61515: STR
61516: ST_TO_ADDR
// end ;
61517: GO 61472
61519: POP
61520: POP
// if tmp then
61521: LD_VAR 0 3
61525: IFFALSE 61537
// active := tmp ;
61527: LD_ADDR_VAR 0 7
61531: PUSH
61532: LD_VAR 0 3
61536: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
61537: LD_STRING getStreamItemsFromMission("
61539: PUSH
61540: LD_VAR 0 5
61544: STR
61545: PUSH
61546: LD_STRING ","
61548: STR
61549: PUSH
61550: LD_VAR 0 6
61554: STR
61555: PUSH
61556: LD_STRING ","
61558: STR
61559: PUSH
61560: LD_VAR 0 7
61564: STR
61565: PUSH
61566: LD_STRING ")
61568: STR
61569: PPUSH
61570: CALL_OW 559
// end else
61574: GO 61583
// ToLua ( getStreamItemsFromMission("","","") ) ;
61576: LD_STRING getStreamItemsFromMission("","","")
61578: PPUSH
61579: CALL_OW 559
// end ;
61583: LD_VAR 0 2
61587: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
61588: LD_EXP 51
61592: PUSH
61593: LD_EXP 56
61597: AND
61598: IFFALSE 61722
61600: GO 61602
61602: DISABLE
61603: LD_INT 0
61605: PPUSH
61606: PPUSH
// begin enable ;
61607: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
61608: LD_ADDR_VAR 0 2
61612: PUSH
61613: LD_INT 22
61615: PUSH
61616: LD_OWVAR 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: LD_INT 34
61630: PUSH
61631: LD_INT 7
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 34
61640: PUSH
61641: LD_INT 45
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 34
61650: PUSH
61651: LD_INT 28
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 34
61660: PUSH
61661: LD_INT 47
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PPUSH
61679: CALL_OW 69
61683: ST_TO_ADDR
// if not tmp then
61684: LD_VAR 0 2
61688: NOT
61689: IFFALSE 61693
// exit ;
61691: GO 61722
// for i in tmp do
61693: LD_ADDR_VAR 0 1
61697: PUSH
61698: LD_VAR 0 2
61702: PUSH
61703: FOR_IN
61704: IFFALSE 61720
// begin SetLives ( i , 0 ) ;
61706: LD_VAR 0 1
61710: PPUSH
61711: LD_INT 0
61713: PPUSH
61714: CALL_OW 234
// end ;
61718: GO 61703
61720: POP
61721: POP
// end ;
61722: PPOPN 2
61724: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
61725: LD_EXP 51
61729: PUSH
61730: LD_EXP 57
61734: AND
61735: IFFALSE 61819
61737: GO 61739
61739: DISABLE
61740: LD_INT 0
61742: PPUSH
61743: PPUSH
// begin enable ;
61744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
61745: LD_ADDR_VAR 0 2
61749: PUSH
61750: LD_INT 22
61752: PUSH
61753: LD_OWVAR 2
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 32
61764: PUSH
61765: LD_INT 3
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PPUSH
61776: CALL_OW 69
61780: ST_TO_ADDR
// if not tmp then
61781: LD_VAR 0 2
61785: NOT
61786: IFFALSE 61790
// exit ;
61788: GO 61819
// for i in tmp do
61790: LD_ADDR_VAR 0 1
61794: PUSH
61795: LD_VAR 0 2
61799: PUSH
61800: FOR_IN
61801: IFFALSE 61817
// begin SetLives ( i , 0 ) ;
61803: LD_VAR 0 1
61807: PPUSH
61808: LD_INT 0
61810: PPUSH
61811: CALL_OW 234
// end ;
61815: GO 61800
61817: POP
61818: POP
// end ;
61819: PPOPN 2
61821: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
61822: LD_EXP 51
61826: PUSH
61827: LD_EXP 54
61831: AND
61832: IFFALSE 61925
61834: GO 61836
61836: DISABLE
61837: LD_INT 0
61839: PPUSH
// begin enable ;
61840: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
61841: LD_ADDR_VAR 0 1
61845: PUSH
61846: LD_INT 22
61848: PUSH
61849: LD_OWVAR 2
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: LD_INT 25
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 25
61873: PUSH
61874: LD_INT 9
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 25
61883: PUSH
61884: LD_INT 8
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PPUSH
61901: CALL_OW 69
61905: PUSH
61906: FOR_IN
61907: IFFALSE 61923
// begin SetClass ( i , 1 ) ;
61909: LD_VAR 0 1
61913: PPUSH
61914: LD_INT 1
61916: PPUSH
61917: CALL_OW 336
// end ;
61921: GO 61906
61923: POP
61924: POP
// end ;
61925: PPOPN 1
61927: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
61928: LD_EXP 51
61932: PUSH
61933: LD_EXP 55
61937: AND
61938: PUSH
61939: LD_OWVAR 65
61943: PUSH
61944: LD_INT 7
61946: LESS
61947: AND
61948: IFFALSE 61962
61950: GO 61952
61952: DISABLE
// begin enable ;
61953: ENABLE
// game_speed := 7 ;
61954: LD_ADDR_OWVAR 65
61958: PUSH
61959: LD_INT 7
61961: ST_TO_ADDR
// end ;
61962: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
61963: LD_EXP 51
61967: PUSH
61968: LD_EXP 58
61972: AND
61973: IFFALSE 62175
61975: GO 61977
61977: DISABLE
61978: LD_INT 0
61980: PPUSH
61981: PPUSH
61982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61983: LD_ADDR_VAR 0 3
61987: PUSH
61988: LD_INT 81
61990: PUSH
61991: LD_OWVAR 2
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 21
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PPUSH
62014: CALL_OW 69
62018: ST_TO_ADDR
// if not tmp then
62019: LD_VAR 0 3
62023: NOT
62024: IFFALSE 62028
// exit ;
62026: GO 62175
// if tmp > 5 then
62028: LD_VAR 0 3
62032: PUSH
62033: LD_INT 5
62035: GREATER
62036: IFFALSE 62048
// k := 5 else
62038: LD_ADDR_VAR 0 2
62042: PUSH
62043: LD_INT 5
62045: ST_TO_ADDR
62046: GO 62058
// k := tmp ;
62048: LD_ADDR_VAR 0 2
62052: PUSH
62053: LD_VAR 0 3
62057: ST_TO_ADDR
// for i := 1 to k do
62058: LD_ADDR_VAR 0 1
62062: PUSH
62063: DOUBLE
62064: LD_INT 1
62066: DEC
62067: ST_TO_ADDR
62068: LD_VAR 0 2
62072: PUSH
62073: FOR_TO
62074: IFFALSE 62173
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
62076: LD_VAR 0 3
62080: PUSH
62081: LD_VAR 0 1
62085: ARRAY
62086: PPUSH
62087: LD_VAR 0 1
62091: PUSH
62092: LD_INT 4
62094: MOD
62095: PUSH
62096: LD_INT 1
62098: PLUS
62099: PPUSH
62100: CALL_OW 259
62104: PUSH
62105: LD_INT 10
62107: LESS
62108: IFFALSE 62171
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
62110: LD_VAR 0 3
62114: PUSH
62115: LD_VAR 0 1
62119: ARRAY
62120: PPUSH
62121: LD_VAR 0 1
62125: PUSH
62126: LD_INT 4
62128: MOD
62129: PUSH
62130: LD_INT 1
62132: PLUS
62133: PPUSH
62134: LD_VAR 0 3
62138: PUSH
62139: LD_VAR 0 1
62143: ARRAY
62144: PPUSH
62145: LD_VAR 0 1
62149: PUSH
62150: LD_INT 4
62152: MOD
62153: PUSH
62154: LD_INT 1
62156: PLUS
62157: PPUSH
62158: CALL_OW 259
62162: PUSH
62163: LD_INT 1
62165: PLUS
62166: PPUSH
62167: CALL_OW 237
62171: GO 62073
62173: POP
62174: POP
// end ;
62175: PPOPN 3
62177: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
62178: LD_EXP 51
62182: PUSH
62183: LD_EXP 59
62187: AND
62188: IFFALSE 62208
62190: GO 62192
62192: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
62193: LD_INT 4
62195: PPUSH
62196: LD_OWVAR 2
62200: PPUSH
62201: LD_INT 0
62203: PPUSH
62204: CALL_OW 324
62208: END
// every 0 0$1 trigger StreamModeActive and sShovel do
62209: LD_EXP 51
62213: PUSH
62214: LD_EXP 88
62218: AND
62219: IFFALSE 62239
62221: GO 62223
62223: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
62224: LD_INT 19
62226: PPUSH
62227: LD_OWVAR 2
62231: PPUSH
62232: LD_INT 0
62234: PPUSH
62235: CALL_OW 324
62239: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
62240: LD_EXP 51
62244: PUSH
62245: LD_EXP 60
62249: AND
62250: IFFALSE 62352
62252: GO 62254
62254: DISABLE
62255: LD_INT 0
62257: PPUSH
62258: PPUSH
// begin enable ;
62259: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
62260: LD_ADDR_VAR 0 2
62264: PUSH
62265: LD_INT 22
62267: PUSH
62268: LD_OWVAR 2
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: LD_INT 34
62282: PUSH
62283: LD_INT 11
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 34
62292: PUSH
62293: LD_INT 30
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PPUSH
62309: CALL_OW 69
62313: ST_TO_ADDR
// if not tmp then
62314: LD_VAR 0 2
62318: NOT
62319: IFFALSE 62323
// exit ;
62321: GO 62352
// for i in tmp do
62323: LD_ADDR_VAR 0 1
62327: PUSH
62328: LD_VAR 0 2
62332: PUSH
62333: FOR_IN
62334: IFFALSE 62350
// begin SetLives ( i , 0 ) ;
62336: LD_VAR 0 1
62340: PPUSH
62341: LD_INT 0
62343: PPUSH
62344: CALL_OW 234
// end ;
62348: GO 62333
62350: POP
62351: POP
// end ;
62352: PPOPN 2
62354: END
// every 0 0$1 trigger StreamModeActive and sBunker do
62355: LD_EXP 51
62359: PUSH
62360: LD_EXP 61
62364: AND
62365: IFFALSE 62385
62367: GO 62369
62369: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
62370: LD_INT 32
62372: PPUSH
62373: LD_OWVAR 2
62377: PPUSH
62378: LD_INT 0
62380: PPUSH
62381: CALL_OW 324
62385: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
62386: LD_EXP 51
62390: PUSH
62391: LD_EXP 62
62395: AND
62396: IFFALSE 62577
62398: GO 62400
62400: DISABLE
62401: LD_INT 0
62403: PPUSH
62404: PPUSH
62405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
62406: LD_ADDR_VAR 0 2
62410: PUSH
62411: LD_INT 22
62413: PUSH
62414: LD_OWVAR 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 33
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PPUSH
62437: CALL_OW 69
62441: ST_TO_ADDR
// if not tmp then
62442: LD_VAR 0 2
62446: NOT
62447: IFFALSE 62451
// exit ;
62449: GO 62577
// side := 0 ;
62451: LD_ADDR_VAR 0 3
62455: PUSH
62456: LD_INT 0
62458: ST_TO_ADDR
// for i := 1 to 8 do
62459: LD_ADDR_VAR 0 1
62463: PUSH
62464: DOUBLE
62465: LD_INT 1
62467: DEC
62468: ST_TO_ADDR
62469: LD_INT 8
62471: PUSH
62472: FOR_TO
62473: IFFALSE 62521
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
62475: LD_OWVAR 2
62479: PUSH
62480: LD_VAR 0 1
62484: NONEQUAL
62485: PUSH
62486: LD_OWVAR 2
62490: PPUSH
62491: LD_VAR 0 1
62495: PPUSH
62496: CALL_OW 81
62500: PUSH
62501: LD_INT 2
62503: EQUAL
62504: AND
62505: IFFALSE 62519
// begin side := i ;
62507: LD_ADDR_VAR 0 3
62511: PUSH
62512: LD_VAR 0 1
62516: ST_TO_ADDR
// break ;
62517: GO 62521
// end ;
62519: GO 62472
62521: POP
62522: POP
// if not side then
62523: LD_VAR 0 3
62527: NOT
62528: IFFALSE 62532
// exit ;
62530: GO 62577
// for i := 1 to tmp do
62532: LD_ADDR_VAR 0 1
62536: PUSH
62537: DOUBLE
62538: LD_INT 1
62540: DEC
62541: ST_TO_ADDR
62542: LD_VAR 0 2
62546: PUSH
62547: FOR_TO
62548: IFFALSE 62575
// if Prob ( 60 ) then
62550: LD_INT 60
62552: PPUSH
62553: CALL_OW 13
62557: IFFALSE 62573
// SetSide ( i , side ) ;
62559: LD_VAR 0 1
62563: PPUSH
62564: LD_VAR 0 3
62568: PPUSH
62569: CALL_OW 235
62573: GO 62547
62575: POP
62576: POP
// end ;
62577: PPOPN 3
62579: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
62580: LD_EXP 51
62584: PUSH
62585: LD_EXP 64
62589: AND
62590: IFFALSE 62709
62592: GO 62594
62594: DISABLE
62595: LD_INT 0
62597: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
62598: LD_ADDR_VAR 0 1
62602: PUSH
62603: LD_INT 22
62605: PUSH
62606: LD_OWVAR 2
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 21
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: LD_INT 23
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: PPUSH
62647: CALL_OW 69
62651: PUSH
62652: FOR_IN
62653: IFFALSE 62707
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
62655: LD_VAR 0 1
62659: PPUSH
62660: CALL_OW 257
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 3
62673: PUSH
62674: LD_INT 4
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: IN
62683: IFFALSE 62705
// SetClass ( un , rand ( 1 , 4 ) ) ;
62685: LD_VAR 0 1
62689: PPUSH
62690: LD_INT 1
62692: PPUSH
62693: LD_INT 4
62695: PPUSH
62696: CALL_OW 12
62700: PPUSH
62701: CALL_OW 336
62705: GO 62652
62707: POP
62708: POP
// end ;
62709: PPOPN 1
62711: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
62712: LD_EXP 51
62716: PUSH
62717: LD_EXP 63
62721: AND
62722: IFFALSE 62801
62724: GO 62726
62726: DISABLE
62727: LD_INT 0
62729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
62730: LD_ADDR_VAR 0 1
62734: PUSH
62735: LD_INT 22
62737: PUSH
62738: LD_OWVAR 2
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 21
62749: PUSH
62750: LD_INT 3
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PPUSH
62761: CALL_OW 69
62765: ST_TO_ADDR
// if not tmp then
62766: LD_VAR 0 1
62770: NOT
62771: IFFALSE 62775
// exit ;
62773: GO 62801
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
62775: LD_VAR 0 1
62779: PUSH
62780: LD_INT 1
62782: PPUSH
62783: LD_VAR 0 1
62787: PPUSH
62788: CALL_OW 12
62792: ARRAY
62793: PPUSH
62794: LD_INT 100
62796: PPUSH
62797: CALL_OW 234
// end ;
62801: PPOPN 1
62803: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
62804: LD_EXP 51
62808: PUSH
62809: LD_EXP 65
62813: AND
62814: IFFALSE 62912
62816: GO 62818
62818: DISABLE
62819: LD_INT 0
62821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62822: LD_ADDR_VAR 0 1
62826: PUSH
62827: LD_INT 22
62829: PUSH
62830: LD_OWVAR 2
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 21
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PPUSH
62853: CALL_OW 69
62857: ST_TO_ADDR
// if not tmp then
62858: LD_VAR 0 1
62862: NOT
62863: IFFALSE 62867
// exit ;
62865: GO 62912
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
62867: LD_VAR 0 1
62871: PUSH
62872: LD_INT 1
62874: PPUSH
62875: LD_VAR 0 1
62879: PPUSH
62880: CALL_OW 12
62884: ARRAY
62885: PPUSH
62886: LD_INT 1
62888: PPUSH
62889: LD_INT 4
62891: PPUSH
62892: CALL_OW 12
62896: PPUSH
62897: LD_INT 3000
62899: PPUSH
62900: LD_INT 9000
62902: PPUSH
62903: CALL_OW 12
62907: PPUSH
62908: CALL_OW 492
// end ;
62912: PPOPN 1
62914: END
// every 0 0$1 trigger StreamModeActive and sDepot do
62915: LD_EXP 51
62919: PUSH
62920: LD_EXP 66
62924: AND
62925: IFFALSE 62945
62927: GO 62929
62929: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
62930: LD_INT 1
62932: PPUSH
62933: LD_OWVAR 2
62937: PPUSH
62938: LD_INT 0
62940: PPUSH
62941: CALL_OW 324
62945: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
62946: LD_EXP 51
62950: PUSH
62951: LD_EXP 67
62955: AND
62956: IFFALSE 63039
62958: GO 62960
62960: DISABLE
62961: LD_INT 0
62963: PPUSH
62964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
62965: LD_ADDR_VAR 0 2
62969: PUSH
62970: LD_INT 22
62972: PUSH
62973: LD_OWVAR 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 21
62984: PUSH
62985: LD_INT 3
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PPUSH
62996: CALL_OW 69
63000: ST_TO_ADDR
// if not tmp then
63001: LD_VAR 0 2
63005: NOT
63006: IFFALSE 63010
// exit ;
63008: GO 63039
// for i in tmp do
63010: LD_ADDR_VAR 0 1
63014: PUSH
63015: LD_VAR 0 2
63019: PUSH
63020: FOR_IN
63021: IFFALSE 63037
// SetBLevel ( i , 10 ) ;
63023: LD_VAR 0 1
63027: PPUSH
63028: LD_INT 10
63030: PPUSH
63031: CALL_OW 241
63035: GO 63020
63037: POP
63038: POP
// end ;
63039: PPOPN 2
63041: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
63042: LD_EXP 51
63046: PUSH
63047: LD_EXP 68
63051: AND
63052: IFFALSE 63163
63054: GO 63056
63056: DISABLE
63057: LD_INT 0
63059: PPUSH
63060: PPUSH
63061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63062: LD_ADDR_VAR 0 3
63066: PUSH
63067: LD_INT 22
63069: PUSH
63070: LD_OWVAR 2
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 25
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PPUSH
63093: CALL_OW 69
63097: ST_TO_ADDR
// if not tmp then
63098: LD_VAR 0 3
63102: NOT
63103: IFFALSE 63107
// exit ;
63105: GO 63163
// un := tmp [ rand ( 1 , tmp ) ] ;
63107: LD_ADDR_VAR 0 2
63111: PUSH
63112: LD_VAR 0 3
63116: PUSH
63117: LD_INT 1
63119: PPUSH
63120: LD_VAR 0 3
63124: PPUSH
63125: CALL_OW 12
63129: ARRAY
63130: ST_TO_ADDR
// if Crawls ( un ) then
63131: LD_VAR 0 2
63135: PPUSH
63136: CALL_OW 318
63140: IFFALSE 63151
// ComWalk ( un ) ;
63142: LD_VAR 0 2
63146: PPUSH
63147: CALL_OW 138
// SetClass ( un , class_sniper ) ;
63151: LD_VAR 0 2
63155: PPUSH
63156: LD_INT 5
63158: PPUSH
63159: CALL_OW 336
// end ;
63163: PPOPN 3
63165: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
63166: LD_EXP 51
63170: PUSH
63171: LD_EXP 69
63175: AND
63176: PUSH
63177: LD_OWVAR 67
63181: PUSH
63182: LD_INT 4
63184: LESS
63185: AND
63186: IFFALSE 63205
63188: GO 63190
63190: DISABLE
// begin Difficulty := Difficulty + 1 ;
63191: LD_ADDR_OWVAR 67
63195: PUSH
63196: LD_OWVAR 67
63200: PUSH
63201: LD_INT 1
63203: PLUS
63204: ST_TO_ADDR
// end ;
63205: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
63206: LD_EXP 51
63210: PUSH
63211: LD_EXP 70
63215: AND
63216: IFFALSE 63319
63218: GO 63220
63220: DISABLE
63221: LD_INT 0
63223: PPUSH
// begin for i := 1 to 5 do
63224: LD_ADDR_VAR 0 1
63228: PUSH
63229: DOUBLE
63230: LD_INT 1
63232: DEC
63233: ST_TO_ADDR
63234: LD_INT 5
63236: PUSH
63237: FOR_TO
63238: IFFALSE 63317
// begin uc_nation := nation_nature ;
63240: LD_ADDR_OWVAR 21
63244: PUSH
63245: LD_INT 0
63247: ST_TO_ADDR
// uc_side := 0 ;
63248: LD_ADDR_OWVAR 20
63252: PUSH
63253: LD_INT 0
63255: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63256: LD_ADDR_OWVAR 29
63260: PUSH
63261: LD_INT 12
63263: PUSH
63264: LD_INT 12
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: ST_TO_ADDR
// hc_agressivity := 20 ;
63271: LD_ADDR_OWVAR 35
63275: PUSH
63276: LD_INT 20
63278: ST_TO_ADDR
// hc_class := class_tiger ;
63279: LD_ADDR_OWVAR 28
63283: PUSH
63284: LD_INT 14
63286: ST_TO_ADDR
// hc_gallery :=  ;
63287: LD_ADDR_OWVAR 33
63291: PUSH
63292: LD_STRING 
63294: ST_TO_ADDR
// hc_name :=  ;
63295: LD_ADDR_OWVAR 26
63299: PUSH
63300: LD_STRING 
63302: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
63303: CALL_OW 44
63307: PPUSH
63308: LD_INT 0
63310: PPUSH
63311: CALL_OW 51
// end ;
63315: GO 63237
63317: POP
63318: POP
// end ;
63319: PPOPN 1
63321: END
// every 0 0$1 trigger StreamModeActive and sBomb do
63322: LD_EXP 51
63326: PUSH
63327: LD_EXP 71
63331: AND
63332: IFFALSE 63341
63334: GO 63336
63336: DISABLE
// StreamSibBomb ;
63337: CALL 63342 0 0
63341: END
// export function StreamSibBomb ; var i , x , y ; begin
63342: LD_INT 0
63344: PPUSH
63345: PPUSH
63346: PPUSH
63347: PPUSH
// result := false ;
63348: LD_ADDR_VAR 0 1
63352: PUSH
63353: LD_INT 0
63355: ST_TO_ADDR
// for i := 1 to 16 do
63356: LD_ADDR_VAR 0 2
63360: PUSH
63361: DOUBLE
63362: LD_INT 1
63364: DEC
63365: ST_TO_ADDR
63366: LD_INT 16
63368: PUSH
63369: FOR_TO
63370: IFFALSE 63569
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63372: LD_ADDR_VAR 0 3
63376: PUSH
63377: LD_INT 10
63379: PUSH
63380: LD_INT 20
63382: PUSH
63383: LD_INT 30
63385: PUSH
63386: LD_INT 40
63388: PUSH
63389: LD_INT 50
63391: PUSH
63392: LD_INT 60
63394: PUSH
63395: LD_INT 70
63397: PUSH
63398: LD_INT 80
63400: PUSH
63401: LD_INT 90
63403: PUSH
63404: LD_INT 100
63406: PUSH
63407: LD_INT 110
63409: PUSH
63410: LD_INT 120
63412: PUSH
63413: LD_INT 130
63415: PUSH
63416: LD_INT 140
63418: PUSH
63419: LD_INT 150
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: PPUSH
63442: LD_INT 15
63444: PPUSH
63445: CALL_OW 12
63449: ARRAY
63450: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63451: LD_ADDR_VAR 0 4
63455: PUSH
63456: LD_INT 10
63458: PUSH
63459: LD_INT 20
63461: PUSH
63462: LD_INT 30
63464: PUSH
63465: LD_INT 40
63467: PUSH
63468: LD_INT 50
63470: PUSH
63471: LD_INT 60
63473: PUSH
63474: LD_INT 70
63476: PUSH
63477: LD_INT 80
63479: PUSH
63480: LD_INT 90
63482: PUSH
63483: LD_INT 100
63485: PUSH
63486: LD_INT 110
63488: PUSH
63489: LD_INT 120
63491: PUSH
63492: LD_INT 130
63494: PUSH
63495: LD_INT 140
63497: PUSH
63498: LD_INT 150
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: PPUSH
63521: LD_INT 15
63523: PPUSH
63524: CALL_OW 12
63528: ARRAY
63529: ST_TO_ADDR
// if ValidHex ( x , y ) then
63530: LD_VAR 0 3
63534: PPUSH
63535: LD_VAR 0 4
63539: PPUSH
63540: CALL_OW 488
63544: IFFALSE 63567
// begin result := [ x , y ] ;
63546: LD_ADDR_VAR 0 1
63550: PUSH
63551: LD_VAR 0 3
63555: PUSH
63556: LD_VAR 0 4
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: ST_TO_ADDR
// break ;
63565: GO 63569
// end ; end ;
63567: GO 63369
63569: POP
63570: POP
// if result then
63571: LD_VAR 0 1
63575: IFFALSE 63635
// begin ToLua ( playSibBomb() ) ;
63577: LD_STRING playSibBomb()
63579: PPUSH
63580: CALL_OW 559
// wait ( 0 0$14 ) ;
63584: LD_INT 490
63586: PPUSH
63587: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
63591: LD_VAR 0 1
63595: PUSH
63596: LD_INT 1
63598: ARRAY
63599: PPUSH
63600: LD_VAR 0 1
63604: PUSH
63605: LD_INT 2
63607: ARRAY
63608: PPUSH
63609: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
63613: LD_VAR 0 1
63617: PUSH
63618: LD_INT 1
63620: ARRAY
63621: PPUSH
63622: LD_VAR 0 1
63626: PUSH
63627: LD_INT 2
63629: ARRAY
63630: PPUSH
63631: CALL_OW 429
// end ; end ;
63635: LD_VAR 0 1
63639: RET
// every 0 0$1 trigger StreamModeActive and sReset do
63640: LD_EXP 51
63644: PUSH
63645: LD_EXP 73
63649: AND
63650: IFFALSE 63662
63652: GO 63654
63654: DISABLE
// YouLost (  ) ;
63655: LD_STRING 
63657: PPUSH
63658: CALL_OW 104
63662: END
// every 0 0$1 trigger StreamModeActive and sFog do
63663: LD_EXP 51
63667: PUSH
63668: LD_EXP 72
63672: AND
63673: IFFALSE 63687
63675: GO 63677
63677: DISABLE
// FogOff ( your_side ) ;
63678: LD_OWVAR 2
63682: PPUSH
63683: CALL_OW 344
63687: END
// every 0 0$1 trigger StreamModeActive and sSun do
63688: LD_EXP 51
63692: PUSH
63693: LD_EXP 74
63697: AND
63698: IFFALSE 63726
63700: GO 63702
63702: DISABLE
// begin solar_recharge_percent := 0 ;
63703: LD_ADDR_OWVAR 79
63707: PUSH
63708: LD_INT 0
63710: ST_TO_ADDR
// wait ( 5 5$00 ) ;
63711: LD_INT 10500
63713: PPUSH
63714: CALL_OW 67
// solar_recharge_percent := 100 ;
63718: LD_ADDR_OWVAR 79
63722: PUSH
63723: LD_INT 100
63725: ST_TO_ADDR
// end ;
63726: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
63727: LD_EXP 51
63731: PUSH
63732: LD_EXP 75
63736: AND
63737: IFFALSE 63976
63739: GO 63741
63741: DISABLE
63742: LD_INT 0
63744: PPUSH
63745: PPUSH
63746: PPUSH
// begin tmp := [ ] ;
63747: LD_ADDR_VAR 0 3
63751: PUSH
63752: EMPTY
63753: ST_TO_ADDR
// for i := 1 to 6 do
63754: LD_ADDR_VAR 0 1
63758: PUSH
63759: DOUBLE
63760: LD_INT 1
63762: DEC
63763: ST_TO_ADDR
63764: LD_INT 6
63766: PUSH
63767: FOR_TO
63768: IFFALSE 63873
// begin uc_nation := nation_nature ;
63770: LD_ADDR_OWVAR 21
63774: PUSH
63775: LD_INT 0
63777: ST_TO_ADDR
// uc_side := 0 ;
63778: LD_ADDR_OWVAR 20
63782: PUSH
63783: LD_INT 0
63785: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63786: LD_ADDR_OWVAR 29
63790: PUSH
63791: LD_INT 12
63793: PUSH
63794: LD_INT 12
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: ST_TO_ADDR
// hc_agressivity := 20 ;
63801: LD_ADDR_OWVAR 35
63805: PUSH
63806: LD_INT 20
63808: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
63809: LD_ADDR_OWVAR 28
63813: PUSH
63814: LD_INT 17
63816: ST_TO_ADDR
// hc_gallery :=  ;
63817: LD_ADDR_OWVAR 33
63821: PUSH
63822: LD_STRING 
63824: ST_TO_ADDR
// hc_name :=  ;
63825: LD_ADDR_OWVAR 26
63829: PUSH
63830: LD_STRING 
63832: ST_TO_ADDR
// un := CreateHuman ;
63833: LD_ADDR_VAR 0 2
63837: PUSH
63838: CALL_OW 44
63842: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
63843: LD_VAR 0 2
63847: PPUSH
63848: LD_INT 1
63850: PPUSH
63851: CALL_OW 51
// tmp := tmp ^ un ;
63855: LD_ADDR_VAR 0 3
63859: PUSH
63860: LD_VAR 0 3
63864: PUSH
63865: LD_VAR 0 2
63869: ADD
63870: ST_TO_ADDR
// end ;
63871: GO 63767
63873: POP
63874: POP
// repeat wait ( 0 0$1 ) ;
63875: LD_INT 35
63877: PPUSH
63878: CALL_OW 67
// for un in tmp do
63882: LD_ADDR_VAR 0 2
63886: PUSH
63887: LD_VAR 0 3
63891: PUSH
63892: FOR_IN
63893: IFFALSE 63967
// begin if IsDead ( un ) then
63895: LD_VAR 0 2
63899: PPUSH
63900: CALL_OW 301
63904: IFFALSE 63924
// begin tmp := tmp diff un ;
63906: LD_ADDR_VAR 0 3
63910: PUSH
63911: LD_VAR 0 3
63915: PUSH
63916: LD_VAR 0 2
63920: DIFF
63921: ST_TO_ADDR
// continue ;
63922: GO 63892
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
63924: LD_VAR 0 2
63928: PPUSH
63929: LD_INT 3
63931: PUSH
63932: LD_INT 22
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PPUSH
63946: CALL_OW 69
63950: PPUSH
63951: LD_VAR 0 2
63955: PPUSH
63956: CALL_OW 74
63960: PPUSH
63961: CALL_OW 115
// end ;
63965: GO 63892
63967: POP
63968: POP
// until not tmp ;
63969: LD_VAR 0 3
63973: NOT
63974: IFFALSE 63875
// end ;
63976: PPOPN 3
63978: END
// every 0 0$1 trigger StreamModeActive and sTroll do
63979: LD_EXP 51
63983: PUSH
63984: LD_EXP 76
63988: AND
63989: IFFALSE 64043
63991: GO 63993
63993: DISABLE
// begin ToLua ( displayTroll(); ) ;
63994: LD_STRING displayTroll();
63996: PPUSH
63997: CALL_OW 559
// wait ( 3 3$00 ) ;
64001: LD_INT 6300
64003: PPUSH
64004: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64008: LD_STRING hideTroll();
64010: PPUSH
64011: CALL_OW 559
// wait ( 1 1$00 ) ;
64015: LD_INT 2100
64017: PPUSH
64018: CALL_OW 67
// ToLua ( displayTroll(); ) ;
64022: LD_STRING displayTroll();
64024: PPUSH
64025: CALL_OW 559
// wait ( 1 1$00 ) ;
64029: LD_INT 2100
64031: PPUSH
64032: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64036: LD_STRING hideTroll();
64038: PPUSH
64039: CALL_OW 559
// end ;
64043: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
64044: LD_EXP 51
64048: PUSH
64049: LD_EXP 77
64053: AND
64054: IFFALSE 64117
64056: GO 64058
64058: DISABLE
64059: LD_INT 0
64061: PPUSH
// begin p := 0 ;
64062: LD_ADDR_VAR 0 1
64066: PUSH
64067: LD_INT 0
64069: ST_TO_ADDR
// repeat game_speed := 1 ;
64070: LD_ADDR_OWVAR 65
64074: PUSH
64075: LD_INT 1
64077: ST_TO_ADDR
// wait ( 0 0$1 ) ;
64078: LD_INT 35
64080: PPUSH
64081: CALL_OW 67
// p := p + 1 ;
64085: LD_ADDR_VAR 0 1
64089: PUSH
64090: LD_VAR 0 1
64094: PUSH
64095: LD_INT 1
64097: PLUS
64098: ST_TO_ADDR
// until p >= 60 ;
64099: LD_VAR 0 1
64103: PUSH
64104: LD_INT 60
64106: GREATEREQUAL
64107: IFFALSE 64070
// game_speed := 4 ;
64109: LD_ADDR_OWVAR 65
64113: PUSH
64114: LD_INT 4
64116: ST_TO_ADDR
// end ;
64117: PPOPN 1
64119: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
64120: LD_EXP 51
64124: PUSH
64125: LD_EXP 78
64129: AND
64130: IFFALSE 64276
64132: GO 64134
64134: DISABLE
64135: LD_INT 0
64137: PPUSH
64138: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64139: LD_ADDR_VAR 0 1
64143: PUSH
64144: LD_INT 22
64146: PUSH
64147: LD_OWVAR 2
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: LD_INT 30
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 30
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: LIST
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PPUSH
64188: CALL_OW 69
64192: ST_TO_ADDR
// if not depot then
64193: LD_VAR 0 1
64197: NOT
64198: IFFALSE 64202
// exit ;
64200: GO 64276
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
64202: LD_ADDR_VAR 0 2
64206: PUSH
64207: LD_VAR 0 1
64211: PUSH
64212: LD_INT 1
64214: PPUSH
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL_OW 12
64224: ARRAY
64225: PPUSH
64226: CALL_OW 274
64230: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
64231: LD_VAR 0 2
64235: PPUSH
64236: LD_INT 1
64238: PPUSH
64239: LD_INT 0
64241: PPUSH
64242: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
64246: LD_VAR 0 2
64250: PPUSH
64251: LD_INT 2
64253: PPUSH
64254: LD_INT 0
64256: PPUSH
64257: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
64261: LD_VAR 0 2
64265: PPUSH
64266: LD_INT 3
64268: PPUSH
64269: LD_INT 0
64271: PPUSH
64272: CALL_OW 277
// end ;
64276: PPOPN 2
64278: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
64279: LD_EXP 51
64283: PUSH
64284: LD_EXP 79
64288: AND
64289: IFFALSE 64386
64291: GO 64293
64293: DISABLE
64294: LD_INT 0
64296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64297: LD_ADDR_VAR 0 1
64301: PUSH
64302: LD_INT 22
64304: PUSH
64305: LD_OWVAR 2
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 21
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 3
64326: PUSH
64327: LD_INT 23
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: PPUSH
64346: CALL_OW 69
64350: ST_TO_ADDR
// if not tmp then
64351: LD_VAR 0 1
64355: NOT
64356: IFFALSE 64360
// exit ;
64358: GO 64386
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
64360: LD_VAR 0 1
64364: PUSH
64365: LD_INT 1
64367: PPUSH
64368: LD_VAR 0 1
64372: PPUSH
64373: CALL_OW 12
64377: ARRAY
64378: PPUSH
64379: LD_INT 200
64381: PPUSH
64382: CALL_OW 234
// end ;
64386: PPOPN 1
64388: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
64389: LD_EXP 51
64393: PUSH
64394: LD_EXP 80
64398: AND
64399: IFFALSE 64478
64401: GO 64403
64403: DISABLE
64404: LD_INT 0
64406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
64407: LD_ADDR_VAR 0 1
64411: PUSH
64412: LD_INT 22
64414: PUSH
64415: LD_OWVAR 2
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 21
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PPUSH
64438: CALL_OW 69
64442: ST_TO_ADDR
// if not tmp then
64443: LD_VAR 0 1
64447: NOT
64448: IFFALSE 64452
// exit ;
64450: GO 64478
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
64452: LD_VAR 0 1
64456: PUSH
64457: LD_INT 1
64459: PPUSH
64460: LD_VAR 0 1
64464: PPUSH
64465: CALL_OW 12
64469: ARRAY
64470: PPUSH
64471: LD_INT 60
64473: PPUSH
64474: CALL_OW 234
// end ;
64478: PPOPN 1
64480: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
64481: LD_EXP 51
64485: PUSH
64486: LD_EXP 81
64490: AND
64491: IFFALSE 64590
64493: GO 64495
64495: DISABLE
64496: LD_INT 0
64498: PPUSH
64499: PPUSH
// begin enable ;
64500: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
64501: LD_ADDR_VAR 0 1
64505: PUSH
64506: LD_INT 22
64508: PUSH
64509: LD_OWVAR 2
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 61
64520: PUSH
64521: EMPTY
64522: LIST
64523: PUSH
64524: LD_INT 33
64526: PUSH
64527: LD_INT 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: LIST
64538: PPUSH
64539: CALL_OW 69
64543: ST_TO_ADDR
// if not tmp then
64544: LD_VAR 0 1
64548: NOT
64549: IFFALSE 64553
// exit ;
64551: GO 64590
// for i in tmp do
64553: LD_ADDR_VAR 0 2
64557: PUSH
64558: LD_VAR 0 1
64562: PUSH
64563: FOR_IN
64564: IFFALSE 64588
// if IsControledBy ( i ) then
64566: LD_VAR 0 2
64570: PPUSH
64571: CALL_OW 312
64575: IFFALSE 64586
// ComUnlink ( i ) ;
64577: LD_VAR 0 2
64581: PPUSH
64582: CALL_OW 136
64586: GO 64563
64588: POP
64589: POP
// end ;
64590: PPOPN 2
64592: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
64593: LD_EXP 51
64597: PUSH
64598: LD_EXP 82
64602: AND
64603: IFFALSE 64743
64605: GO 64607
64607: DISABLE
64608: LD_INT 0
64610: PPUSH
64611: PPUSH
// begin ToLua ( displayPowell(); ) ;
64612: LD_STRING displayPowell();
64614: PPUSH
64615: CALL_OW 559
// uc_side := 0 ;
64619: LD_ADDR_OWVAR 20
64623: PUSH
64624: LD_INT 0
64626: ST_TO_ADDR
// uc_nation := 2 ;
64627: LD_ADDR_OWVAR 21
64631: PUSH
64632: LD_INT 2
64634: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
64635: LD_ADDR_OWVAR 37
64639: PUSH
64640: LD_INT 14
64642: ST_TO_ADDR
// vc_engine := engine_siberite ;
64643: LD_ADDR_OWVAR 39
64647: PUSH
64648: LD_INT 3
64650: ST_TO_ADDR
// vc_control := control_apeman ;
64651: LD_ADDR_OWVAR 38
64655: PUSH
64656: LD_INT 5
64658: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
64659: LD_ADDR_OWVAR 40
64663: PUSH
64664: LD_INT 29
64666: ST_TO_ADDR
// un := CreateVehicle ;
64667: LD_ADDR_VAR 0 2
64671: PUSH
64672: CALL_OW 45
64676: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64677: LD_VAR 0 2
64681: PPUSH
64682: LD_INT 1
64684: PPUSH
64685: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
64689: LD_INT 35
64691: PPUSH
64692: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
64696: LD_VAR 0 2
64700: PPUSH
64701: LD_INT 22
64703: PUSH
64704: LD_OWVAR 2
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PPUSH
64713: CALL_OW 69
64717: PPUSH
64718: LD_VAR 0 2
64722: PPUSH
64723: CALL_OW 74
64727: PPUSH
64728: CALL_OW 115
// until IsDead ( un ) ;
64732: LD_VAR 0 2
64736: PPUSH
64737: CALL_OW 301
64741: IFFALSE 64689
// end ;
64743: PPOPN 2
64745: END
// every 0 0$1 trigger StreamModeActive and sStu do
64746: LD_EXP 51
64750: PUSH
64751: LD_EXP 90
64755: AND
64756: IFFALSE 64772
64758: GO 64760
64760: DISABLE
// begin ToLua ( displayStucuk(); ) ;
64761: LD_STRING displayStucuk();
64763: PPUSH
64764: CALL_OW 559
// ResetFog ;
64768: CALL_OW 335
// end ;
64772: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
64773: LD_EXP 51
64777: PUSH
64778: LD_EXP 83
64782: AND
64783: IFFALSE 64924
64785: GO 64787
64787: DISABLE
64788: LD_INT 0
64790: PPUSH
64791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64792: LD_ADDR_VAR 0 2
64796: PUSH
64797: LD_INT 22
64799: PUSH
64800: LD_OWVAR 2
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 21
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PPUSH
64823: CALL_OW 69
64827: ST_TO_ADDR
// if not tmp then
64828: LD_VAR 0 2
64832: NOT
64833: IFFALSE 64837
// exit ;
64835: GO 64924
// un := tmp [ rand ( 1 , tmp ) ] ;
64837: LD_ADDR_VAR 0 1
64841: PUSH
64842: LD_VAR 0 2
64846: PUSH
64847: LD_INT 1
64849: PPUSH
64850: LD_VAR 0 2
64854: PPUSH
64855: CALL_OW 12
64859: ARRAY
64860: ST_TO_ADDR
// SetSide ( un , 0 ) ;
64861: LD_VAR 0 1
64865: PPUSH
64866: LD_INT 0
64868: PPUSH
64869: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
64873: LD_VAR 0 1
64877: PPUSH
64878: LD_OWVAR 3
64882: PUSH
64883: LD_VAR 0 1
64887: DIFF
64888: PPUSH
64889: LD_VAR 0 1
64893: PPUSH
64894: CALL_OW 74
64898: PPUSH
64899: CALL_OW 115
// wait ( 0 0$20 ) ;
64903: LD_INT 700
64905: PPUSH
64906: CALL_OW 67
// SetSide ( un , your_side ) ;
64910: LD_VAR 0 1
64914: PPUSH
64915: LD_OWVAR 2
64919: PPUSH
64920: CALL_OW 235
// end ;
64924: PPOPN 2
64926: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
64927: LD_EXP 51
64931: PUSH
64932: LD_EXP 84
64936: AND
64937: IFFALSE 65043
64939: GO 64941
64941: DISABLE
64942: LD_INT 0
64944: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64945: LD_ADDR_VAR 0 1
64949: PUSH
64950: LD_INT 22
64952: PUSH
64953: LD_OWVAR 2
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: LD_INT 30
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 30
64977: PUSH
64978: LD_INT 1
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PPUSH
64994: CALL_OW 69
64998: ST_TO_ADDR
// if not depot then
64999: LD_VAR 0 1
65003: NOT
65004: IFFALSE 65008
// exit ;
65006: GO 65043
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
65008: LD_VAR 0 1
65012: PUSH
65013: LD_INT 1
65015: ARRAY
65016: PPUSH
65017: CALL_OW 250
65021: PPUSH
65022: LD_VAR 0 1
65026: PUSH
65027: LD_INT 1
65029: ARRAY
65030: PPUSH
65031: CALL_OW 251
65035: PPUSH
65036: LD_INT 70
65038: PPUSH
65039: CALL_OW 495
// end ;
65043: PPOPN 1
65045: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
65046: LD_EXP 51
65050: PUSH
65051: LD_EXP 85
65055: AND
65056: IFFALSE 65267
65058: GO 65060
65060: DISABLE
65061: LD_INT 0
65063: PPUSH
65064: PPUSH
65065: PPUSH
65066: PPUSH
65067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65068: LD_ADDR_VAR 0 5
65072: PUSH
65073: LD_INT 22
65075: PUSH
65076: LD_OWVAR 2
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 21
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PPUSH
65099: CALL_OW 69
65103: ST_TO_ADDR
// if not tmp then
65104: LD_VAR 0 5
65108: NOT
65109: IFFALSE 65113
// exit ;
65111: GO 65267
// for i in tmp do
65113: LD_ADDR_VAR 0 1
65117: PUSH
65118: LD_VAR 0 5
65122: PUSH
65123: FOR_IN
65124: IFFALSE 65265
// begin d := rand ( 0 , 5 ) ;
65126: LD_ADDR_VAR 0 4
65130: PUSH
65131: LD_INT 0
65133: PPUSH
65134: LD_INT 5
65136: PPUSH
65137: CALL_OW 12
65141: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
65142: LD_ADDR_VAR 0 2
65146: PUSH
65147: LD_VAR 0 1
65151: PPUSH
65152: CALL_OW 250
65156: PPUSH
65157: LD_VAR 0 4
65161: PPUSH
65162: LD_INT 3
65164: PPUSH
65165: LD_INT 12
65167: PPUSH
65168: CALL_OW 12
65172: PPUSH
65173: CALL_OW 272
65177: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
65178: LD_ADDR_VAR 0 3
65182: PUSH
65183: LD_VAR 0 1
65187: PPUSH
65188: CALL_OW 251
65192: PPUSH
65193: LD_VAR 0 4
65197: PPUSH
65198: LD_INT 3
65200: PPUSH
65201: LD_INT 12
65203: PPUSH
65204: CALL_OW 12
65208: PPUSH
65209: CALL_OW 273
65213: ST_TO_ADDR
// if ValidHex ( x , y ) then
65214: LD_VAR 0 2
65218: PPUSH
65219: LD_VAR 0 3
65223: PPUSH
65224: CALL_OW 488
65228: IFFALSE 65263
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
65230: LD_VAR 0 1
65234: PPUSH
65235: LD_VAR 0 2
65239: PPUSH
65240: LD_VAR 0 3
65244: PPUSH
65245: LD_INT 3
65247: PPUSH
65248: LD_INT 6
65250: PPUSH
65251: CALL_OW 12
65255: PPUSH
65256: LD_INT 1
65258: PPUSH
65259: CALL_OW 483
// end ;
65263: GO 65123
65265: POP
65266: POP
// end ;
65267: PPOPN 5
65269: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
65270: LD_EXP 51
65274: PUSH
65275: LD_EXP 86
65279: AND
65280: IFFALSE 65374
65282: GO 65284
65284: DISABLE
65285: LD_INT 0
65287: PPUSH
65288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
65289: LD_ADDR_VAR 0 2
65293: PUSH
65294: LD_INT 22
65296: PUSH
65297: LD_OWVAR 2
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 32
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 21
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: LIST
65330: PPUSH
65331: CALL_OW 69
65335: ST_TO_ADDR
// if not tmp then
65336: LD_VAR 0 2
65340: NOT
65341: IFFALSE 65345
// exit ;
65343: GO 65374
// for i in tmp do
65345: LD_ADDR_VAR 0 1
65349: PUSH
65350: LD_VAR 0 2
65354: PUSH
65355: FOR_IN
65356: IFFALSE 65372
// SetFuel ( i , 0 ) ;
65358: LD_VAR 0 1
65362: PPUSH
65363: LD_INT 0
65365: PPUSH
65366: CALL_OW 240
65370: GO 65355
65372: POP
65373: POP
// end ;
65374: PPOPN 2
65376: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
65377: LD_EXP 51
65381: PUSH
65382: LD_EXP 87
65386: AND
65387: IFFALSE 65453
65389: GO 65391
65391: DISABLE
65392: LD_INT 0
65394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65395: LD_ADDR_VAR 0 1
65399: PUSH
65400: LD_INT 22
65402: PUSH
65403: LD_OWVAR 2
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 30
65414: PUSH
65415: LD_INT 29
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PPUSH
65426: CALL_OW 69
65430: ST_TO_ADDR
// if not tmp then
65431: LD_VAR 0 1
65435: NOT
65436: IFFALSE 65440
// exit ;
65438: GO 65453
// DestroyUnit ( tmp [ 1 ] ) ;
65440: LD_VAR 0 1
65444: PUSH
65445: LD_INT 1
65447: ARRAY
65448: PPUSH
65449: CALL_OW 65
// end ;
65453: PPOPN 1
65455: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
65456: LD_EXP 51
65460: PUSH
65461: LD_EXP 89
65465: AND
65466: IFFALSE 65595
65468: GO 65470
65470: DISABLE
65471: LD_INT 0
65473: PPUSH
// begin uc_side := 0 ;
65474: LD_ADDR_OWVAR 20
65478: PUSH
65479: LD_INT 0
65481: ST_TO_ADDR
// uc_nation := nation_arabian ;
65482: LD_ADDR_OWVAR 21
65486: PUSH
65487: LD_INT 2
65489: ST_TO_ADDR
// hc_gallery :=  ;
65490: LD_ADDR_OWVAR 33
65494: PUSH
65495: LD_STRING 
65497: ST_TO_ADDR
// hc_name :=  ;
65498: LD_ADDR_OWVAR 26
65502: PUSH
65503: LD_STRING 
65505: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
65506: LD_INT 1
65508: PPUSH
65509: LD_INT 11
65511: PPUSH
65512: LD_INT 10
65514: PPUSH
65515: CALL_OW 380
// un := CreateHuman ;
65519: LD_ADDR_VAR 0 1
65523: PUSH
65524: CALL_OW 44
65528: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65529: LD_VAR 0 1
65533: PPUSH
65534: LD_INT 1
65536: PPUSH
65537: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65541: LD_INT 35
65543: PPUSH
65544: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65548: LD_VAR 0 1
65552: PPUSH
65553: LD_INT 22
65555: PUSH
65556: LD_OWVAR 2
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PPUSH
65565: CALL_OW 69
65569: PPUSH
65570: LD_VAR 0 1
65574: PPUSH
65575: CALL_OW 74
65579: PPUSH
65580: CALL_OW 115
// until IsDead ( un ) ;
65584: LD_VAR 0 1
65588: PPUSH
65589: CALL_OW 301
65593: IFFALSE 65541
// end ;
65595: PPOPN 1
65597: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
65598: LD_EXP 51
65602: PUSH
65603: LD_EXP 91
65607: AND
65608: IFFALSE 65620
65610: GO 65612
65612: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
65613: LD_STRING earthquake(getX(game), 0, 32)
65615: PPUSH
65616: CALL_OW 559
65620: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
65621: LD_EXP 51
65625: PUSH
65626: LD_EXP 92
65630: AND
65631: IFFALSE 65722
65633: GO 65635
65635: DISABLE
65636: LD_INT 0
65638: PPUSH
// begin enable ;
65639: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
65640: LD_ADDR_VAR 0 1
65644: PUSH
65645: LD_INT 22
65647: PUSH
65648: LD_OWVAR 2
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 21
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 33
65669: PUSH
65670: LD_INT 3
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: LIST
65681: PPUSH
65682: CALL_OW 69
65686: ST_TO_ADDR
// if not tmp then
65687: LD_VAR 0 1
65691: NOT
65692: IFFALSE 65696
// exit ;
65694: GO 65722
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
65696: LD_VAR 0 1
65700: PUSH
65701: LD_INT 1
65703: PPUSH
65704: LD_VAR 0 1
65708: PPUSH
65709: CALL_OW 12
65713: ARRAY
65714: PPUSH
65715: LD_INT 1
65717: PPUSH
65718: CALL_OW 234
// end ;
65722: PPOPN 1
65724: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
65725: LD_EXP 51
65729: PUSH
65730: LD_EXP 93
65734: AND
65735: IFFALSE 65876
65737: GO 65739
65739: DISABLE
65740: LD_INT 0
65742: PPUSH
65743: PPUSH
65744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65745: LD_ADDR_VAR 0 3
65749: PUSH
65750: LD_INT 22
65752: PUSH
65753: LD_OWVAR 2
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 25
65764: PUSH
65765: LD_INT 1
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PPUSH
65776: CALL_OW 69
65780: ST_TO_ADDR
// if not tmp then
65781: LD_VAR 0 3
65785: NOT
65786: IFFALSE 65790
// exit ;
65788: GO 65876
// un := tmp [ rand ( 1 , tmp ) ] ;
65790: LD_ADDR_VAR 0 2
65794: PUSH
65795: LD_VAR 0 3
65799: PUSH
65800: LD_INT 1
65802: PPUSH
65803: LD_VAR 0 3
65807: PPUSH
65808: CALL_OW 12
65812: ARRAY
65813: ST_TO_ADDR
// if Crawls ( un ) then
65814: LD_VAR 0 2
65818: PPUSH
65819: CALL_OW 318
65823: IFFALSE 65834
// ComWalk ( un ) ;
65825: LD_VAR 0 2
65829: PPUSH
65830: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
65834: LD_VAR 0 2
65838: PPUSH
65839: LD_INT 9
65841: PPUSH
65842: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
65846: LD_INT 28
65848: PPUSH
65849: LD_OWVAR 2
65853: PPUSH
65854: LD_INT 2
65856: PPUSH
65857: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
65861: LD_INT 29
65863: PPUSH
65864: LD_OWVAR 2
65868: PPUSH
65869: LD_INT 2
65871: PPUSH
65872: CALL_OW 322
// end ;
65876: PPOPN 3
65878: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
65879: LD_EXP 51
65883: PUSH
65884: LD_EXP 94
65888: AND
65889: IFFALSE 66000
65891: GO 65893
65893: DISABLE
65894: LD_INT 0
65896: PPUSH
65897: PPUSH
65898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65899: LD_ADDR_VAR 0 3
65903: PUSH
65904: LD_INT 22
65906: PUSH
65907: LD_OWVAR 2
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 25
65918: PUSH
65919: LD_INT 1
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PPUSH
65930: CALL_OW 69
65934: ST_TO_ADDR
// if not tmp then
65935: LD_VAR 0 3
65939: NOT
65940: IFFALSE 65944
// exit ;
65942: GO 66000
// un := tmp [ rand ( 1 , tmp ) ] ;
65944: LD_ADDR_VAR 0 2
65948: PUSH
65949: LD_VAR 0 3
65953: PUSH
65954: LD_INT 1
65956: PPUSH
65957: LD_VAR 0 3
65961: PPUSH
65962: CALL_OW 12
65966: ARRAY
65967: ST_TO_ADDR
// if Crawls ( un ) then
65968: LD_VAR 0 2
65972: PPUSH
65973: CALL_OW 318
65977: IFFALSE 65988
// ComWalk ( un ) ;
65979: LD_VAR 0 2
65983: PPUSH
65984: CALL_OW 138
// SetClass ( un , class_mortar ) ;
65988: LD_VAR 0 2
65992: PPUSH
65993: LD_INT 8
65995: PPUSH
65996: CALL_OW 336
// end ;
66000: PPOPN 3
66002: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
66003: LD_EXP 51
66007: PUSH
66008: LD_EXP 95
66012: AND
66013: IFFALSE 66157
66015: GO 66017
66017: DISABLE
66018: LD_INT 0
66020: PPUSH
66021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
66022: LD_ADDR_VAR 0 2
66026: PUSH
66027: LD_INT 22
66029: PUSH
66030: LD_OWVAR 2
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 21
66041: PUSH
66042: LD_INT 2
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 2
66051: PUSH
66052: LD_INT 34
66054: PUSH
66055: LD_INT 12
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 34
66064: PUSH
66065: LD_INT 51
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 34
66074: PUSH
66075: LD_INT 32
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: PPUSH
66093: CALL_OW 69
66097: ST_TO_ADDR
// if not tmp then
66098: LD_VAR 0 2
66102: NOT
66103: IFFALSE 66107
// exit ;
66105: GO 66157
// for i in tmp do
66107: LD_ADDR_VAR 0 1
66111: PUSH
66112: LD_VAR 0 2
66116: PUSH
66117: FOR_IN
66118: IFFALSE 66155
// if GetCargo ( i , mat_artifact ) = 0 then
66120: LD_VAR 0 1
66124: PPUSH
66125: LD_INT 4
66127: PPUSH
66128: CALL_OW 289
66132: PUSH
66133: LD_INT 0
66135: EQUAL
66136: IFFALSE 66153
// SetCargo ( i , mat_siberit , 100 ) ;
66138: LD_VAR 0 1
66142: PPUSH
66143: LD_INT 3
66145: PPUSH
66146: LD_INT 100
66148: PPUSH
66149: CALL_OW 290
66153: GO 66117
66155: POP
66156: POP
// end ;
66157: PPOPN 2
66159: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
66160: LD_EXP 51
66164: PUSH
66165: LD_EXP 96
66169: AND
66170: IFFALSE 66353
66172: GO 66174
66174: DISABLE
66175: LD_INT 0
66177: PPUSH
66178: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66179: LD_ADDR_VAR 0 2
66183: PUSH
66184: LD_INT 22
66186: PUSH
66187: LD_OWVAR 2
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PPUSH
66196: CALL_OW 69
66200: ST_TO_ADDR
// if not tmp then
66201: LD_VAR 0 2
66205: NOT
66206: IFFALSE 66210
// exit ;
66208: GO 66353
// for i := 1 to 2 do
66210: LD_ADDR_VAR 0 1
66214: PUSH
66215: DOUBLE
66216: LD_INT 1
66218: DEC
66219: ST_TO_ADDR
66220: LD_INT 2
66222: PUSH
66223: FOR_TO
66224: IFFALSE 66351
// begin uc_side := your_side ;
66226: LD_ADDR_OWVAR 20
66230: PUSH
66231: LD_OWVAR 2
66235: ST_TO_ADDR
// uc_nation := nation_american ;
66236: LD_ADDR_OWVAR 21
66240: PUSH
66241: LD_INT 1
66243: ST_TO_ADDR
// vc_chassis := us_morphling ;
66244: LD_ADDR_OWVAR 37
66248: PUSH
66249: LD_INT 5
66251: ST_TO_ADDR
// vc_engine := engine_siberite ;
66252: LD_ADDR_OWVAR 39
66256: PUSH
66257: LD_INT 3
66259: ST_TO_ADDR
// vc_control := control_computer ;
66260: LD_ADDR_OWVAR 38
66264: PUSH
66265: LD_INT 3
66267: ST_TO_ADDR
// vc_weapon := us_double_laser ;
66268: LD_ADDR_OWVAR 40
66272: PUSH
66273: LD_INT 10
66275: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
66276: LD_VAR 0 2
66280: PUSH
66281: LD_INT 1
66283: ARRAY
66284: PPUSH
66285: CALL_OW 310
66289: NOT
66290: IFFALSE 66337
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
66292: CALL_OW 45
66296: PPUSH
66297: LD_VAR 0 2
66301: PUSH
66302: LD_INT 1
66304: ARRAY
66305: PPUSH
66306: CALL_OW 250
66310: PPUSH
66311: LD_VAR 0 2
66315: PUSH
66316: LD_INT 1
66318: ARRAY
66319: PPUSH
66320: CALL_OW 251
66324: PPUSH
66325: LD_INT 12
66327: PPUSH
66328: LD_INT 1
66330: PPUSH
66331: CALL_OW 50
66335: GO 66349
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
66337: CALL_OW 45
66341: PPUSH
66342: LD_INT 1
66344: PPUSH
66345: CALL_OW 51
// end ;
66349: GO 66223
66351: POP
66352: POP
// end ;
66353: PPOPN 2
66355: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
66356: LD_EXP 51
66360: PUSH
66361: LD_EXP 97
66365: AND
66366: IFFALSE 66588
66368: GO 66370
66370: DISABLE
66371: LD_INT 0
66373: PPUSH
66374: PPUSH
66375: PPUSH
66376: PPUSH
66377: PPUSH
66378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66379: LD_ADDR_VAR 0 6
66383: PUSH
66384: LD_INT 22
66386: PUSH
66387: LD_OWVAR 2
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 21
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 3
66408: PUSH
66409: LD_INT 23
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: PPUSH
66428: CALL_OW 69
66432: ST_TO_ADDR
// if not tmp then
66433: LD_VAR 0 6
66437: NOT
66438: IFFALSE 66442
// exit ;
66440: GO 66588
// s1 := rand ( 1 , 4 ) ;
66442: LD_ADDR_VAR 0 2
66446: PUSH
66447: LD_INT 1
66449: PPUSH
66450: LD_INT 4
66452: PPUSH
66453: CALL_OW 12
66457: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
66458: LD_ADDR_VAR 0 4
66462: PUSH
66463: LD_VAR 0 6
66467: PUSH
66468: LD_INT 1
66470: ARRAY
66471: PPUSH
66472: LD_VAR 0 2
66476: PPUSH
66477: CALL_OW 259
66481: ST_TO_ADDR
// if s1 = 1 then
66482: LD_VAR 0 2
66486: PUSH
66487: LD_INT 1
66489: EQUAL
66490: IFFALSE 66510
// s2 := rand ( 2 , 4 ) else
66492: LD_ADDR_VAR 0 3
66496: PUSH
66497: LD_INT 2
66499: PPUSH
66500: LD_INT 4
66502: PPUSH
66503: CALL_OW 12
66507: ST_TO_ADDR
66508: GO 66518
// s2 := 1 ;
66510: LD_ADDR_VAR 0 3
66514: PUSH
66515: LD_INT 1
66517: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
66518: LD_ADDR_VAR 0 5
66522: PUSH
66523: LD_VAR 0 6
66527: PUSH
66528: LD_INT 1
66530: ARRAY
66531: PPUSH
66532: LD_VAR 0 3
66536: PPUSH
66537: CALL_OW 259
66541: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
66542: LD_VAR 0 6
66546: PUSH
66547: LD_INT 1
66549: ARRAY
66550: PPUSH
66551: LD_VAR 0 2
66555: PPUSH
66556: LD_VAR 0 5
66560: PPUSH
66561: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
66565: LD_VAR 0 6
66569: PUSH
66570: LD_INT 1
66572: ARRAY
66573: PPUSH
66574: LD_VAR 0 3
66578: PPUSH
66579: LD_VAR 0 4
66583: PPUSH
66584: CALL_OW 237
// end ;
66588: PPOPN 6
66590: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
66591: LD_EXP 51
66595: PUSH
66596: LD_EXP 98
66600: AND
66601: IFFALSE 66680
66603: GO 66605
66605: DISABLE
66606: LD_INT 0
66608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
66609: LD_ADDR_VAR 0 1
66613: PUSH
66614: LD_INT 22
66616: PUSH
66617: LD_OWVAR 2
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 30
66628: PUSH
66629: LD_INT 3
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PPUSH
66640: CALL_OW 69
66644: ST_TO_ADDR
// if not tmp then
66645: LD_VAR 0 1
66649: NOT
66650: IFFALSE 66654
// exit ;
66652: GO 66680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66654: LD_VAR 0 1
66658: PUSH
66659: LD_INT 1
66661: PPUSH
66662: LD_VAR 0 1
66666: PPUSH
66667: CALL_OW 12
66671: ARRAY
66672: PPUSH
66673: LD_INT 1
66675: PPUSH
66676: CALL_OW 234
// end ;
66680: PPOPN 1
66682: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
66683: LD_EXP 51
66687: PUSH
66688: LD_EXP 99
66692: AND
66693: IFFALSE 66805
66695: GO 66697
66697: DISABLE
66698: LD_INT 0
66700: PPUSH
66701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
66702: LD_ADDR_VAR 0 2
66706: PUSH
66707: LD_INT 22
66709: PUSH
66710: LD_OWVAR 2
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 2
66721: PUSH
66722: LD_INT 30
66724: PUSH
66725: LD_INT 27
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 30
66734: PUSH
66735: LD_INT 26
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 30
66744: PUSH
66745: LD_INT 28
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PPUSH
66762: CALL_OW 69
66766: ST_TO_ADDR
// if not tmp then
66767: LD_VAR 0 2
66771: NOT
66772: IFFALSE 66776
// exit ;
66774: GO 66805
// for i in tmp do
66776: LD_ADDR_VAR 0 1
66780: PUSH
66781: LD_VAR 0 2
66785: PUSH
66786: FOR_IN
66787: IFFALSE 66803
// SetLives ( i , 1 ) ;
66789: LD_VAR 0 1
66793: PPUSH
66794: LD_INT 1
66796: PPUSH
66797: CALL_OW 234
66801: GO 66786
66803: POP
66804: POP
// end ;
66805: PPOPN 2
66807: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
66808: LD_EXP 51
66812: PUSH
66813: LD_EXP 100
66817: AND
66818: IFFALSE 67105
66820: GO 66822
66822: DISABLE
66823: LD_INT 0
66825: PPUSH
66826: PPUSH
66827: PPUSH
// begin i := rand ( 1 , 7 ) ;
66828: LD_ADDR_VAR 0 1
66832: PUSH
66833: LD_INT 1
66835: PPUSH
66836: LD_INT 7
66838: PPUSH
66839: CALL_OW 12
66843: ST_TO_ADDR
// case i of 1 :
66844: LD_VAR 0 1
66848: PUSH
66849: LD_INT 1
66851: DOUBLE
66852: EQUAL
66853: IFTRUE 66857
66855: GO 66867
66857: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
66858: LD_STRING earthquake(getX(game), 0, 32)
66860: PPUSH
66861: CALL_OW 559
66865: GO 67105
66867: LD_INT 2
66869: DOUBLE
66870: EQUAL
66871: IFTRUE 66875
66873: GO 66889
66875: POP
// begin ToLua ( displayStucuk(); ) ;
66876: LD_STRING displayStucuk();
66878: PPUSH
66879: CALL_OW 559
// ResetFog ;
66883: CALL_OW 335
// end ; 3 :
66887: GO 67105
66889: LD_INT 3
66891: DOUBLE
66892: EQUAL
66893: IFTRUE 66897
66895: GO 67001
66897: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66898: LD_ADDR_VAR 0 2
66902: PUSH
66903: LD_INT 22
66905: PUSH
66906: LD_OWVAR 2
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 25
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PPUSH
66929: CALL_OW 69
66933: ST_TO_ADDR
// if not tmp then
66934: LD_VAR 0 2
66938: NOT
66939: IFFALSE 66943
// exit ;
66941: GO 67105
// un := tmp [ rand ( 1 , tmp ) ] ;
66943: LD_ADDR_VAR 0 3
66947: PUSH
66948: LD_VAR 0 2
66952: PUSH
66953: LD_INT 1
66955: PPUSH
66956: LD_VAR 0 2
66960: PPUSH
66961: CALL_OW 12
66965: ARRAY
66966: ST_TO_ADDR
// if Crawls ( un ) then
66967: LD_VAR 0 3
66971: PPUSH
66972: CALL_OW 318
66976: IFFALSE 66987
// ComWalk ( un ) ;
66978: LD_VAR 0 3
66982: PPUSH
66983: CALL_OW 138
// SetClass ( un , class_mortar ) ;
66987: LD_VAR 0 3
66991: PPUSH
66992: LD_INT 8
66994: PPUSH
66995: CALL_OW 336
// end ; 4 :
66999: GO 67105
67001: LD_INT 4
67003: DOUBLE
67004: EQUAL
67005: IFTRUE 67009
67007: GO 67083
67009: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67010: LD_ADDR_VAR 0 2
67014: PUSH
67015: LD_INT 22
67017: PUSH
67018: LD_OWVAR 2
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 30
67029: PUSH
67030: LD_INT 29
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PPUSH
67041: CALL_OW 69
67045: ST_TO_ADDR
// if not tmp then
67046: LD_VAR 0 2
67050: NOT
67051: IFFALSE 67055
// exit ;
67053: GO 67105
// CenterNowOnUnits ( tmp [ 1 ] ) ;
67055: LD_VAR 0 2
67059: PUSH
67060: LD_INT 1
67062: ARRAY
67063: PPUSH
67064: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
67068: LD_VAR 0 2
67072: PUSH
67073: LD_INT 1
67075: ARRAY
67076: PPUSH
67077: CALL_OW 65
// end ; 5 .. 7 :
67081: GO 67105
67083: LD_INT 5
67085: DOUBLE
67086: GREATEREQUAL
67087: IFFALSE 67095
67089: LD_INT 7
67091: DOUBLE
67092: LESSEQUAL
67093: IFTRUE 67097
67095: GO 67104
67097: POP
// StreamSibBomb ; end ;
67098: CALL 63342 0 0
67102: GO 67105
67104: POP
// end ;
67105: PPOPN 3
67107: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
67108: LD_EXP 51
67112: PUSH
67113: LD_EXP 101
67117: AND
67118: IFFALSE 67274
67120: GO 67122
67122: DISABLE
67123: LD_INT 0
67125: PPUSH
67126: PPUSH
67127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: LD_INT 81
67135: PUSH
67136: LD_OWVAR 2
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 2
67147: PUSH
67148: LD_INT 21
67150: PUSH
67151: LD_INT 1
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 21
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PPUSH
67177: CALL_OW 69
67181: ST_TO_ADDR
// if not tmp then
67182: LD_VAR 0 2
67186: NOT
67187: IFFALSE 67191
// exit ;
67189: GO 67274
// p := 0 ;
67191: LD_ADDR_VAR 0 3
67195: PUSH
67196: LD_INT 0
67198: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67199: LD_INT 35
67201: PPUSH
67202: CALL_OW 67
// p := p + 1 ;
67206: LD_ADDR_VAR 0 3
67210: PUSH
67211: LD_VAR 0 3
67215: PUSH
67216: LD_INT 1
67218: PLUS
67219: ST_TO_ADDR
// for i in tmp do
67220: LD_ADDR_VAR 0 1
67224: PUSH
67225: LD_VAR 0 2
67229: PUSH
67230: FOR_IN
67231: IFFALSE 67262
// if GetLives ( i ) < 1000 then
67233: LD_VAR 0 1
67237: PPUSH
67238: CALL_OW 256
67242: PUSH
67243: LD_INT 1000
67245: LESS
67246: IFFALSE 67260
// SetLives ( i , 1000 ) ;
67248: LD_VAR 0 1
67252: PPUSH
67253: LD_INT 1000
67255: PPUSH
67256: CALL_OW 234
67260: GO 67230
67262: POP
67263: POP
// until p > 20 ;
67264: LD_VAR 0 3
67268: PUSH
67269: LD_INT 20
67271: GREATER
67272: IFFALSE 67199
// end ;
67274: PPOPN 3
67276: END
// every 0 0$1 trigger StreamModeActive and sTime do
67277: LD_EXP 51
67281: PUSH
67282: LD_EXP 102
67286: AND
67287: IFFALSE 67322
67289: GO 67291
67291: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
67292: LD_INT 28
67294: PPUSH
67295: LD_OWVAR 2
67299: PPUSH
67300: LD_INT 2
67302: PPUSH
67303: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
67307: LD_INT 30
67309: PPUSH
67310: LD_OWVAR 2
67314: PPUSH
67315: LD_INT 2
67317: PPUSH
67318: CALL_OW 322
// end ;
67322: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
67323: LD_EXP 51
67327: PUSH
67328: LD_EXP 103
67332: AND
67333: IFFALSE 67454
67335: GO 67337
67337: DISABLE
67338: LD_INT 0
67340: PPUSH
67341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67342: LD_ADDR_VAR 0 2
67346: PUSH
67347: LD_INT 22
67349: PUSH
67350: LD_OWVAR 2
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 21
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: PUSH
67372: LD_INT 23
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: PPUSH
67391: CALL_OW 69
67395: ST_TO_ADDR
// if not tmp then
67396: LD_VAR 0 2
67400: NOT
67401: IFFALSE 67405
// exit ;
67403: GO 67454
// for i in tmp do
67405: LD_ADDR_VAR 0 1
67409: PUSH
67410: LD_VAR 0 2
67414: PUSH
67415: FOR_IN
67416: IFFALSE 67452
// begin if Crawls ( i ) then
67418: LD_VAR 0 1
67422: PPUSH
67423: CALL_OW 318
67427: IFFALSE 67438
// ComWalk ( i ) ;
67429: LD_VAR 0 1
67433: PPUSH
67434: CALL_OW 138
// SetClass ( i , 2 ) ;
67438: LD_VAR 0 1
67442: PPUSH
67443: LD_INT 2
67445: PPUSH
67446: CALL_OW 336
// end ;
67450: GO 67415
67452: POP
67453: POP
// end ;
67454: PPOPN 2
67456: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
67457: LD_EXP 51
67461: PUSH
67462: LD_EXP 104
67466: AND
67467: IFFALSE 67755
67469: GO 67471
67471: DISABLE
67472: LD_INT 0
67474: PPUSH
67475: PPUSH
67476: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
67477: LD_OWVAR 2
67481: PPUSH
67482: LD_INT 9
67484: PPUSH
67485: LD_INT 1
67487: PPUSH
67488: LD_INT 1
67490: PPUSH
67491: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
67495: LD_INT 9
67497: PPUSH
67498: LD_OWVAR 2
67502: PPUSH
67503: CALL_OW 343
// uc_side := 9 ;
67507: LD_ADDR_OWVAR 20
67511: PUSH
67512: LD_INT 9
67514: ST_TO_ADDR
// uc_nation := 2 ;
67515: LD_ADDR_OWVAR 21
67519: PUSH
67520: LD_INT 2
67522: ST_TO_ADDR
// hc_name := Dark Warrior ;
67523: LD_ADDR_OWVAR 26
67527: PUSH
67528: LD_STRING Dark Warrior
67530: ST_TO_ADDR
// hc_gallery :=  ;
67531: LD_ADDR_OWVAR 33
67535: PUSH
67536: LD_STRING 
67538: ST_TO_ADDR
// hc_noskilllimit := true ;
67539: LD_ADDR_OWVAR 76
67543: PUSH
67544: LD_INT 1
67546: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
67547: LD_ADDR_OWVAR 31
67551: PUSH
67552: LD_INT 30
67554: PUSH
67555: LD_INT 30
67557: PUSH
67558: LD_INT 30
67560: PUSH
67561: LD_INT 30
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: ST_TO_ADDR
// un := CreateHuman ;
67570: LD_ADDR_VAR 0 3
67574: PUSH
67575: CALL_OW 44
67579: ST_TO_ADDR
// hc_noskilllimit := false ;
67580: LD_ADDR_OWVAR 76
67584: PUSH
67585: LD_INT 0
67587: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67588: LD_VAR 0 3
67592: PPUSH
67593: LD_INT 1
67595: PPUSH
67596: CALL_OW 51
// ToLua ( playRanger() ) ;
67600: LD_STRING playRanger()
67602: PPUSH
67603: CALL_OW 559
// p := 0 ;
67607: LD_ADDR_VAR 0 2
67611: PUSH
67612: LD_INT 0
67614: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67615: LD_INT 35
67617: PPUSH
67618: CALL_OW 67
// p := p + 1 ;
67622: LD_ADDR_VAR 0 2
67626: PUSH
67627: LD_VAR 0 2
67631: PUSH
67632: LD_INT 1
67634: PLUS
67635: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
67636: LD_VAR 0 3
67640: PPUSH
67641: CALL_OW 256
67645: PUSH
67646: LD_INT 1000
67648: LESS
67649: IFFALSE 67663
// SetLives ( un , 1000 ) ;
67651: LD_VAR 0 3
67655: PPUSH
67656: LD_INT 1000
67658: PPUSH
67659: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
67663: LD_VAR 0 3
67667: PPUSH
67668: LD_INT 81
67670: PUSH
67671: LD_OWVAR 2
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 91
67682: PUSH
67683: LD_VAR 0 3
67687: PUSH
67688: LD_INT 30
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: LIST
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PPUSH
67700: CALL_OW 69
67704: PPUSH
67705: LD_VAR 0 3
67709: PPUSH
67710: CALL_OW 74
67714: PPUSH
67715: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
67719: LD_VAR 0 2
67723: PUSH
67724: LD_INT 80
67726: GREATER
67727: PUSH
67728: LD_VAR 0 3
67732: PPUSH
67733: CALL_OW 301
67737: OR
67738: IFFALSE 67615
// if un then
67740: LD_VAR 0 3
67744: IFFALSE 67755
// RemoveUnit ( un ) ;
67746: LD_VAR 0 3
67750: PPUSH
67751: CALL_OW 64
// end ;
67755: PPOPN 3
67757: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
67758: LD_EXP 105
67762: IFFALSE 67878
67764: GO 67766
67766: DISABLE
67767: LD_INT 0
67769: PPUSH
67770: PPUSH
67771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67772: LD_ADDR_VAR 0 2
67776: PUSH
67777: LD_INT 81
67779: PUSH
67780: LD_OWVAR 2
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 21
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PPUSH
67803: CALL_OW 69
67807: ST_TO_ADDR
// ToLua ( playComputer() ) ;
67808: LD_STRING playComputer()
67810: PPUSH
67811: CALL_OW 559
// if not tmp then
67815: LD_VAR 0 2
67819: NOT
67820: IFFALSE 67824
// exit ;
67822: GO 67878
// for i in tmp do
67824: LD_ADDR_VAR 0 1
67828: PUSH
67829: LD_VAR 0 2
67833: PUSH
67834: FOR_IN
67835: IFFALSE 67876
// for j := 1 to 4 do
67837: LD_ADDR_VAR 0 3
67841: PUSH
67842: DOUBLE
67843: LD_INT 1
67845: DEC
67846: ST_TO_ADDR
67847: LD_INT 4
67849: PUSH
67850: FOR_TO
67851: IFFALSE 67872
// SetSkill ( i , j , 10 ) ;
67853: LD_VAR 0 1
67857: PPUSH
67858: LD_VAR 0 3
67862: PPUSH
67863: LD_INT 10
67865: PPUSH
67866: CALL_OW 237
67870: GO 67850
67872: POP
67873: POP
67874: GO 67834
67876: POP
67877: POP
// end ;
67878: PPOPN 3
67880: END
// every 0 0$1 trigger s30 do var i , tmp ;
67881: LD_EXP 106
67885: IFFALSE 67954
67887: GO 67889
67889: DISABLE
67890: LD_INT 0
67892: PPUSH
67893: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67894: LD_ADDR_VAR 0 2
67898: PUSH
67899: LD_INT 22
67901: PUSH
67902: LD_OWVAR 2
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PPUSH
67911: CALL_OW 69
67915: ST_TO_ADDR
// if not tmp then
67916: LD_VAR 0 2
67920: NOT
67921: IFFALSE 67925
// exit ;
67923: GO 67954
// for i in tmp do
67925: LD_ADDR_VAR 0 1
67929: PUSH
67930: LD_VAR 0 2
67934: PUSH
67935: FOR_IN
67936: IFFALSE 67952
// SetLives ( i , 300 ) ;
67938: LD_VAR 0 1
67942: PPUSH
67943: LD_INT 300
67945: PPUSH
67946: CALL_OW 234
67950: GO 67935
67952: POP
67953: POP
// end ;
67954: PPOPN 2
67956: END
// every 0 0$1 trigger s60 do var i , tmp ;
67957: LD_EXP 107
67961: IFFALSE 68030
67963: GO 67965
67965: DISABLE
67966: LD_INT 0
67968: PPUSH
67969: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67970: LD_ADDR_VAR 0 2
67974: PUSH
67975: LD_INT 22
67977: PUSH
67978: LD_OWVAR 2
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PPUSH
67987: CALL_OW 69
67991: ST_TO_ADDR
// if not tmp then
67992: LD_VAR 0 2
67996: NOT
67997: IFFALSE 68001
// exit ;
67999: GO 68030
// for i in tmp do
68001: LD_ADDR_VAR 0 1
68005: PUSH
68006: LD_VAR 0 2
68010: PUSH
68011: FOR_IN
68012: IFFALSE 68028
// SetLives ( i , 600 ) ;
68014: LD_VAR 0 1
68018: PPUSH
68019: LD_INT 600
68021: PPUSH
68022: CALL_OW 234
68026: GO 68011
68028: POP
68029: POP
// end ;
68030: PPOPN 2
68032: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68033: LD_INT 0
68035: PPUSH
// case cmd of 301 :
68036: LD_VAR 0 1
68040: PUSH
68041: LD_INT 301
68043: DOUBLE
68044: EQUAL
68045: IFTRUE 68049
68047: GO 68081
68049: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
68050: LD_VAR 0 6
68054: PPUSH
68055: LD_VAR 0 7
68059: PPUSH
68060: LD_VAR 0 8
68064: PPUSH
68065: LD_VAR 0 4
68069: PPUSH
68070: LD_VAR 0 5
68074: PPUSH
68075: CALL 69282 0 5
68079: GO 68202
68081: LD_INT 302
68083: DOUBLE
68084: EQUAL
68085: IFTRUE 68089
68087: GO 68126
68089: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
68090: LD_VAR 0 6
68094: PPUSH
68095: LD_VAR 0 7
68099: PPUSH
68100: LD_VAR 0 8
68104: PPUSH
68105: LD_VAR 0 9
68109: PPUSH
68110: LD_VAR 0 4
68114: PPUSH
68115: LD_VAR 0 5
68119: PPUSH
68120: CALL 69373 0 6
68124: GO 68202
68126: LD_INT 303
68128: DOUBLE
68129: EQUAL
68130: IFTRUE 68134
68132: GO 68171
68134: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
68135: LD_VAR 0 6
68139: PPUSH
68140: LD_VAR 0 7
68144: PPUSH
68145: LD_VAR 0 8
68149: PPUSH
68150: LD_VAR 0 9
68154: PPUSH
68155: LD_VAR 0 4
68159: PPUSH
68160: LD_VAR 0 5
68164: PPUSH
68165: CALL 68207 0 6
68169: GO 68202
68171: LD_INT 304
68173: DOUBLE
68174: EQUAL
68175: IFTRUE 68179
68177: GO 68201
68179: POP
// hHackTeleport ( unit , x , y ) ; end ;
68180: LD_VAR 0 2
68184: PPUSH
68185: LD_VAR 0 4
68189: PPUSH
68190: LD_VAR 0 5
68194: PPUSH
68195: CALL 69966 0 3
68199: GO 68202
68201: POP
// end ;
68202: LD_VAR 0 12
68206: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
68207: LD_INT 0
68209: PPUSH
68210: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
68211: LD_VAR 0 1
68215: PUSH
68216: LD_INT 1
68218: LESS
68219: PUSH
68220: LD_VAR 0 1
68224: PUSH
68225: LD_INT 3
68227: GREATER
68228: OR
68229: PUSH
68230: LD_VAR 0 5
68234: PPUSH
68235: LD_VAR 0 6
68239: PPUSH
68240: CALL_OW 428
68244: OR
68245: IFFALSE 68249
// exit ;
68247: GO 68969
// uc_side := your_side ;
68249: LD_ADDR_OWVAR 20
68253: PUSH
68254: LD_OWVAR 2
68258: ST_TO_ADDR
// uc_nation := nation ;
68259: LD_ADDR_OWVAR 21
68263: PUSH
68264: LD_VAR 0 1
68268: ST_TO_ADDR
// bc_level = 1 ;
68269: LD_ADDR_OWVAR 43
68273: PUSH
68274: LD_INT 1
68276: ST_TO_ADDR
// case btype of 1 :
68277: LD_VAR 0 2
68281: PUSH
68282: LD_INT 1
68284: DOUBLE
68285: EQUAL
68286: IFTRUE 68290
68288: GO 68301
68290: POP
// bc_type := b_depot ; 2 :
68291: LD_ADDR_OWVAR 42
68295: PUSH
68296: LD_INT 0
68298: ST_TO_ADDR
68299: GO 68913
68301: LD_INT 2
68303: DOUBLE
68304: EQUAL
68305: IFTRUE 68309
68307: GO 68320
68309: POP
// bc_type := b_warehouse ; 3 :
68310: LD_ADDR_OWVAR 42
68314: PUSH
68315: LD_INT 1
68317: ST_TO_ADDR
68318: GO 68913
68320: LD_INT 3
68322: DOUBLE
68323: EQUAL
68324: IFTRUE 68328
68326: GO 68339
68328: POP
// bc_type := b_lab ; 4 .. 9 :
68329: LD_ADDR_OWVAR 42
68333: PUSH
68334: LD_INT 6
68336: ST_TO_ADDR
68337: GO 68913
68339: LD_INT 4
68341: DOUBLE
68342: GREATEREQUAL
68343: IFFALSE 68351
68345: LD_INT 9
68347: DOUBLE
68348: LESSEQUAL
68349: IFTRUE 68353
68351: GO 68405
68353: POP
// begin bc_type := b_lab_half ;
68354: LD_ADDR_OWVAR 42
68358: PUSH
68359: LD_INT 7
68361: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
68362: LD_ADDR_OWVAR 44
68366: PUSH
68367: LD_INT 10
68369: PUSH
68370: LD_INT 11
68372: PUSH
68373: LD_INT 12
68375: PUSH
68376: LD_INT 15
68378: PUSH
68379: LD_INT 14
68381: PUSH
68382: LD_INT 13
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: PUSH
68393: LD_VAR 0 2
68397: PUSH
68398: LD_INT 3
68400: MINUS
68401: ARRAY
68402: ST_TO_ADDR
// end ; 10 .. 13 :
68403: GO 68913
68405: LD_INT 10
68407: DOUBLE
68408: GREATEREQUAL
68409: IFFALSE 68417
68411: LD_INT 13
68413: DOUBLE
68414: LESSEQUAL
68415: IFTRUE 68419
68417: GO 68496
68419: POP
// begin bc_type := b_lab_full ;
68420: LD_ADDR_OWVAR 42
68424: PUSH
68425: LD_INT 8
68427: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
68428: LD_ADDR_OWVAR 44
68432: PUSH
68433: LD_INT 10
68435: PUSH
68436: LD_INT 12
68438: PUSH
68439: LD_INT 14
68441: PUSH
68442: LD_INT 13
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: PUSH
68451: LD_VAR 0 2
68455: PUSH
68456: LD_INT 9
68458: MINUS
68459: ARRAY
68460: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
68461: LD_ADDR_OWVAR 45
68465: PUSH
68466: LD_INT 11
68468: PUSH
68469: LD_INT 15
68471: PUSH
68472: LD_INT 12
68474: PUSH
68475: LD_INT 15
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: PUSH
68484: LD_VAR 0 2
68488: PUSH
68489: LD_INT 9
68491: MINUS
68492: ARRAY
68493: ST_TO_ADDR
// end ; 14 :
68494: GO 68913
68496: LD_INT 14
68498: DOUBLE
68499: EQUAL
68500: IFTRUE 68504
68502: GO 68515
68504: POP
// bc_type := b_workshop ; 15 :
68505: LD_ADDR_OWVAR 42
68509: PUSH
68510: LD_INT 2
68512: ST_TO_ADDR
68513: GO 68913
68515: LD_INT 15
68517: DOUBLE
68518: EQUAL
68519: IFTRUE 68523
68521: GO 68534
68523: POP
// bc_type := b_factory ; 16 :
68524: LD_ADDR_OWVAR 42
68528: PUSH
68529: LD_INT 3
68531: ST_TO_ADDR
68532: GO 68913
68534: LD_INT 16
68536: DOUBLE
68537: EQUAL
68538: IFTRUE 68542
68540: GO 68553
68542: POP
// bc_type := b_ext_gun ; 17 :
68543: LD_ADDR_OWVAR 42
68547: PUSH
68548: LD_INT 17
68550: ST_TO_ADDR
68551: GO 68913
68553: LD_INT 17
68555: DOUBLE
68556: EQUAL
68557: IFTRUE 68561
68559: GO 68589
68561: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
68562: LD_ADDR_OWVAR 42
68566: PUSH
68567: LD_INT 19
68569: PUSH
68570: LD_INT 23
68572: PUSH
68573: LD_INT 19
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: LIST
68580: PUSH
68581: LD_VAR 0 1
68585: ARRAY
68586: ST_TO_ADDR
68587: GO 68913
68589: LD_INT 18
68591: DOUBLE
68592: EQUAL
68593: IFTRUE 68597
68595: GO 68608
68597: POP
// bc_type := b_ext_radar ; 19 :
68598: LD_ADDR_OWVAR 42
68602: PUSH
68603: LD_INT 20
68605: ST_TO_ADDR
68606: GO 68913
68608: LD_INT 19
68610: DOUBLE
68611: EQUAL
68612: IFTRUE 68616
68614: GO 68627
68616: POP
// bc_type := b_ext_radio ; 20 :
68617: LD_ADDR_OWVAR 42
68621: PUSH
68622: LD_INT 22
68624: ST_TO_ADDR
68625: GO 68913
68627: LD_INT 20
68629: DOUBLE
68630: EQUAL
68631: IFTRUE 68635
68633: GO 68646
68635: POP
// bc_type := b_ext_siberium ; 21 :
68636: LD_ADDR_OWVAR 42
68640: PUSH
68641: LD_INT 21
68643: ST_TO_ADDR
68644: GO 68913
68646: LD_INT 21
68648: DOUBLE
68649: EQUAL
68650: IFTRUE 68654
68652: GO 68665
68654: POP
// bc_type := b_ext_computer ; 22 :
68655: LD_ADDR_OWVAR 42
68659: PUSH
68660: LD_INT 24
68662: ST_TO_ADDR
68663: GO 68913
68665: LD_INT 22
68667: DOUBLE
68668: EQUAL
68669: IFTRUE 68673
68671: GO 68684
68673: POP
// bc_type := b_ext_track ; 23 :
68674: LD_ADDR_OWVAR 42
68678: PUSH
68679: LD_INT 16
68681: ST_TO_ADDR
68682: GO 68913
68684: LD_INT 23
68686: DOUBLE
68687: EQUAL
68688: IFTRUE 68692
68690: GO 68703
68692: POP
// bc_type := b_ext_laser ; 24 :
68693: LD_ADDR_OWVAR 42
68697: PUSH
68698: LD_INT 25
68700: ST_TO_ADDR
68701: GO 68913
68703: LD_INT 24
68705: DOUBLE
68706: EQUAL
68707: IFTRUE 68711
68709: GO 68722
68711: POP
// bc_type := b_control_tower ; 25 :
68712: LD_ADDR_OWVAR 42
68716: PUSH
68717: LD_INT 36
68719: ST_TO_ADDR
68720: GO 68913
68722: LD_INT 25
68724: DOUBLE
68725: EQUAL
68726: IFTRUE 68730
68728: GO 68741
68730: POP
// bc_type := b_breastwork ; 26 :
68731: LD_ADDR_OWVAR 42
68735: PUSH
68736: LD_INT 31
68738: ST_TO_ADDR
68739: GO 68913
68741: LD_INT 26
68743: DOUBLE
68744: EQUAL
68745: IFTRUE 68749
68747: GO 68760
68749: POP
// bc_type := b_bunker ; 27 :
68750: LD_ADDR_OWVAR 42
68754: PUSH
68755: LD_INT 32
68757: ST_TO_ADDR
68758: GO 68913
68760: LD_INT 27
68762: DOUBLE
68763: EQUAL
68764: IFTRUE 68768
68766: GO 68779
68768: POP
// bc_type := b_turret ; 28 :
68769: LD_ADDR_OWVAR 42
68773: PUSH
68774: LD_INT 33
68776: ST_TO_ADDR
68777: GO 68913
68779: LD_INT 28
68781: DOUBLE
68782: EQUAL
68783: IFTRUE 68787
68785: GO 68798
68787: POP
// bc_type := b_armoury ; 29 :
68788: LD_ADDR_OWVAR 42
68792: PUSH
68793: LD_INT 4
68795: ST_TO_ADDR
68796: GO 68913
68798: LD_INT 29
68800: DOUBLE
68801: EQUAL
68802: IFTRUE 68806
68804: GO 68817
68806: POP
// bc_type := b_barracks ; 30 :
68807: LD_ADDR_OWVAR 42
68811: PUSH
68812: LD_INT 5
68814: ST_TO_ADDR
68815: GO 68913
68817: LD_INT 30
68819: DOUBLE
68820: EQUAL
68821: IFTRUE 68825
68823: GO 68836
68825: POP
// bc_type := b_solar_power ; 31 :
68826: LD_ADDR_OWVAR 42
68830: PUSH
68831: LD_INT 27
68833: ST_TO_ADDR
68834: GO 68913
68836: LD_INT 31
68838: DOUBLE
68839: EQUAL
68840: IFTRUE 68844
68842: GO 68855
68844: POP
// bc_type := b_oil_power ; 32 :
68845: LD_ADDR_OWVAR 42
68849: PUSH
68850: LD_INT 26
68852: ST_TO_ADDR
68853: GO 68913
68855: LD_INT 32
68857: DOUBLE
68858: EQUAL
68859: IFTRUE 68863
68861: GO 68874
68863: POP
// bc_type := b_siberite_power ; 33 :
68864: LD_ADDR_OWVAR 42
68868: PUSH
68869: LD_INT 28
68871: ST_TO_ADDR
68872: GO 68913
68874: LD_INT 33
68876: DOUBLE
68877: EQUAL
68878: IFTRUE 68882
68880: GO 68893
68882: POP
// bc_type := b_oil_mine ; 34 :
68883: LD_ADDR_OWVAR 42
68887: PUSH
68888: LD_INT 29
68890: ST_TO_ADDR
68891: GO 68913
68893: LD_INT 34
68895: DOUBLE
68896: EQUAL
68897: IFTRUE 68901
68899: GO 68912
68901: POP
// bc_type := b_siberite_mine ; end ;
68902: LD_ADDR_OWVAR 42
68906: PUSH
68907: LD_INT 30
68909: ST_TO_ADDR
68910: GO 68913
68912: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
68913: LD_ADDR_VAR 0 8
68917: PUSH
68918: LD_VAR 0 5
68922: PPUSH
68923: LD_VAR 0 6
68927: PPUSH
68928: LD_VAR 0 3
68932: PPUSH
68933: CALL_OW 47
68937: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
68938: LD_OWVAR 42
68942: PUSH
68943: LD_INT 32
68945: PUSH
68946: LD_INT 33
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: IN
68953: IFFALSE 68969
// PlaceWeaponTurret ( b , weapon ) ;
68955: LD_VAR 0 8
68959: PPUSH
68960: LD_VAR 0 4
68964: PPUSH
68965: CALL_OW 431
// end ;
68969: LD_VAR 0 7
68973: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
68974: LD_INT 0
68976: PPUSH
68977: PPUSH
68978: PPUSH
68979: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68980: LD_ADDR_VAR 0 4
68984: PUSH
68985: LD_INT 22
68987: PUSH
68988: LD_OWVAR 2
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 2
68999: PUSH
69000: LD_INT 30
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 30
69012: PUSH
69013: LD_INT 1
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: LIST
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PPUSH
69029: CALL_OW 69
69033: ST_TO_ADDR
// if not tmp then
69034: LD_VAR 0 4
69038: NOT
69039: IFFALSE 69043
// exit ;
69041: GO 69102
// for i in tmp do
69043: LD_ADDR_VAR 0 2
69047: PUSH
69048: LD_VAR 0 4
69052: PUSH
69053: FOR_IN
69054: IFFALSE 69100
// for j = 1 to 3 do
69056: LD_ADDR_VAR 0 3
69060: PUSH
69061: DOUBLE
69062: LD_INT 1
69064: DEC
69065: ST_TO_ADDR
69066: LD_INT 3
69068: PUSH
69069: FOR_TO
69070: IFFALSE 69096
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
69072: LD_VAR 0 2
69076: PPUSH
69077: CALL_OW 274
69081: PPUSH
69082: LD_VAR 0 3
69086: PPUSH
69087: LD_INT 99999
69089: PPUSH
69090: CALL_OW 277
69094: GO 69069
69096: POP
69097: POP
69098: GO 69053
69100: POP
69101: POP
// end ;
69102: LD_VAR 0 1
69106: RET
// export function hHackSetLevel10 ; var i , j ; begin
69107: LD_INT 0
69109: PPUSH
69110: PPUSH
69111: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
69112: LD_ADDR_VAR 0 2
69116: PUSH
69117: LD_INT 21
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PPUSH
69127: CALL_OW 69
69131: PUSH
69132: FOR_IN
69133: IFFALSE 69185
// if IsSelected ( i ) then
69135: LD_VAR 0 2
69139: PPUSH
69140: CALL_OW 306
69144: IFFALSE 69183
// begin for j := 1 to 4 do
69146: LD_ADDR_VAR 0 3
69150: PUSH
69151: DOUBLE
69152: LD_INT 1
69154: DEC
69155: ST_TO_ADDR
69156: LD_INT 4
69158: PUSH
69159: FOR_TO
69160: IFFALSE 69181
// SetSkill ( i , j , 10 ) ;
69162: LD_VAR 0 2
69166: PPUSH
69167: LD_VAR 0 3
69171: PPUSH
69172: LD_INT 10
69174: PPUSH
69175: CALL_OW 237
69179: GO 69159
69181: POP
69182: POP
// end ;
69183: GO 69132
69185: POP
69186: POP
// end ;
69187: LD_VAR 0 1
69191: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
69192: LD_INT 0
69194: PPUSH
69195: PPUSH
69196: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
69197: LD_ADDR_VAR 0 2
69201: PUSH
69202: LD_INT 22
69204: PUSH
69205: LD_OWVAR 2
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 21
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PPUSH
69228: CALL_OW 69
69232: PUSH
69233: FOR_IN
69234: IFFALSE 69275
// begin for j := 1 to 4 do
69236: LD_ADDR_VAR 0 3
69240: PUSH
69241: DOUBLE
69242: LD_INT 1
69244: DEC
69245: ST_TO_ADDR
69246: LD_INT 4
69248: PUSH
69249: FOR_TO
69250: IFFALSE 69271
// SetSkill ( i , j , 10 ) ;
69252: LD_VAR 0 2
69256: PPUSH
69257: LD_VAR 0 3
69261: PPUSH
69262: LD_INT 10
69264: PPUSH
69265: CALL_OW 237
69269: GO 69249
69271: POP
69272: POP
// end ;
69273: GO 69233
69275: POP
69276: POP
// end ;
69277: LD_VAR 0 1
69281: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
69282: LD_INT 0
69284: PPUSH
// uc_side := your_side ;
69285: LD_ADDR_OWVAR 20
69289: PUSH
69290: LD_OWVAR 2
69294: ST_TO_ADDR
// uc_nation := nation ;
69295: LD_ADDR_OWVAR 21
69299: PUSH
69300: LD_VAR 0 1
69304: ST_TO_ADDR
// InitHc ;
69305: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
69309: LD_INT 0
69311: PPUSH
69312: LD_VAR 0 2
69316: PPUSH
69317: LD_VAR 0 3
69321: PPUSH
69322: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
69326: LD_VAR 0 4
69330: PPUSH
69331: LD_VAR 0 5
69335: PPUSH
69336: CALL_OW 428
69340: PUSH
69341: LD_INT 0
69343: EQUAL
69344: IFFALSE 69368
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
69346: CALL_OW 44
69350: PPUSH
69351: LD_VAR 0 4
69355: PPUSH
69356: LD_VAR 0 5
69360: PPUSH
69361: LD_INT 1
69363: PPUSH
69364: CALL_OW 48
// end ;
69368: LD_VAR 0 6
69372: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
69373: LD_INT 0
69375: PPUSH
69376: PPUSH
// uc_side := your_side ;
69377: LD_ADDR_OWVAR 20
69381: PUSH
69382: LD_OWVAR 2
69386: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
69387: LD_VAR 0 1
69391: PUSH
69392: LD_INT 1
69394: PUSH
69395: LD_INT 2
69397: PUSH
69398: LD_INT 3
69400: PUSH
69401: LD_INT 4
69403: PUSH
69404: LD_INT 5
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: IN
69414: IFFALSE 69426
// uc_nation := nation_american else
69416: LD_ADDR_OWVAR 21
69420: PUSH
69421: LD_INT 1
69423: ST_TO_ADDR
69424: GO 69469
// if chassis in [ 11 , 12 , 13 , 14 ] then
69426: LD_VAR 0 1
69430: PUSH
69431: LD_INT 11
69433: PUSH
69434: LD_INT 12
69436: PUSH
69437: LD_INT 13
69439: PUSH
69440: LD_INT 14
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: IN
69449: IFFALSE 69461
// uc_nation := nation_arabian else
69451: LD_ADDR_OWVAR 21
69455: PUSH
69456: LD_INT 2
69458: ST_TO_ADDR
69459: GO 69469
// uc_nation := nation_russian ;
69461: LD_ADDR_OWVAR 21
69465: PUSH
69466: LD_INT 3
69468: ST_TO_ADDR
// vc_chassis := chassis ;
69469: LD_ADDR_OWVAR 37
69473: PUSH
69474: LD_VAR 0 1
69478: ST_TO_ADDR
// vc_engine := engine ;
69479: LD_ADDR_OWVAR 39
69483: PUSH
69484: LD_VAR 0 2
69488: ST_TO_ADDR
// vc_control := control ;
69489: LD_ADDR_OWVAR 38
69493: PUSH
69494: LD_VAR 0 3
69498: ST_TO_ADDR
// vc_weapon := weapon ;
69499: LD_ADDR_OWVAR 40
69503: PUSH
69504: LD_VAR 0 4
69508: ST_TO_ADDR
// un := CreateVehicle ;
69509: LD_ADDR_VAR 0 8
69513: PUSH
69514: CALL_OW 45
69518: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
69519: LD_VAR 0 8
69523: PPUSH
69524: LD_INT 0
69526: PPUSH
69527: LD_INT 5
69529: PPUSH
69530: CALL_OW 12
69534: PPUSH
69535: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
69539: LD_VAR 0 8
69543: PPUSH
69544: LD_VAR 0 5
69548: PPUSH
69549: LD_VAR 0 6
69553: PPUSH
69554: LD_INT 1
69556: PPUSH
69557: CALL_OW 48
// end ;
69561: LD_VAR 0 7
69565: RET
// export hInvincible ; every 1 do
69566: GO 69568
69568: DISABLE
// hInvincible := [ ] ;
69569: LD_ADDR_EXP 108
69573: PUSH
69574: EMPTY
69575: ST_TO_ADDR
69576: END
// every 10 do var i ;
69577: GO 69579
69579: DISABLE
69580: LD_INT 0
69582: PPUSH
// begin enable ;
69583: ENABLE
// if not hInvincible then
69584: LD_EXP 108
69588: NOT
69589: IFFALSE 69593
// exit ;
69591: GO 69637
// for i in hInvincible do
69593: LD_ADDR_VAR 0 1
69597: PUSH
69598: LD_EXP 108
69602: PUSH
69603: FOR_IN
69604: IFFALSE 69635
// if GetLives ( i ) < 1000 then
69606: LD_VAR 0 1
69610: PPUSH
69611: CALL_OW 256
69615: PUSH
69616: LD_INT 1000
69618: LESS
69619: IFFALSE 69633
// SetLives ( i , 1000 ) ;
69621: LD_VAR 0 1
69625: PPUSH
69626: LD_INT 1000
69628: PPUSH
69629: CALL_OW 234
69633: GO 69603
69635: POP
69636: POP
// end ;
69637: PPOPN 1
69639: END
// export function hHackInvincible ; var i ; begin
69640: LD_INT 0
69642: PPUSH
69643: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
69644: LD_ADDR_VAR 0 2
69648: PUSH
69649: LD_INT 2
69651: PUSH
69652: LD_INT 21
69654: PUSH
69655: LD_INT 1
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 21
69664: PUSH
69665: LD_INT 2
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: LIST
69676: PPUSH
69677: CALL_OW 69
69681: PUSH
69682: FOR_IN
69683: IFFALSE 69744
// if IsSelected ( i ) then
69685: LD_VAR 0 2
69689: PPUSH
69690: CALL_OW 306
69694: IFFALSE 69742
// begin if i in hInvincible then
69696: LD_VAR 0 2
69700: PUSH
69701: LD_EXP 108
69705: IN
69706: IFFALSE 69726
// hInvincible := hInvincible diff i else
69708: LD_ADDR_EXP 108
69712: PUSH
69713: LD_EXP 108
69717: PUSH
69718: LD_VAR 0 2
69722: DIFF
69723: ST_TO_ADDR
69724: GO 69742
// hInvincible := hInvincible union i ;
69726: LD_ADDR_EXP 108
69730: PUSH
69731: LD_EXP 108
69735: PUSH
69736: LD_VAR 0 2
69740: UNION
69741: ST_TO_ADDR
// end ;
69742: GO 69682
69744: POP
69745: POP
// end ;
69746: LD_VAR 0 1
69750: RET
// export function hHackInvisible ; var i , j ; begin
69751: LD_INT 0
69753: PPUSH
69754: PPUSH
69755: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
69756: LD_ADDR_VAR 0 2
69760: PUSH
69761: LD_INT 21
69763: PUSH
69764: LD_INT 1
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PPUSH
69771: CALL_OW 69
69775: PUSH
69776: FOR_IN
69777: IFFALSE 69801
// if IsSelected ( i ) then
69779: LD_VAR 0 2
69783: PPUSH
69784: CALL_OW 306
69788: IFFALSE 69799
// ComForceInvisible ( i ) ;
69790: LD_VAR 0 2
69794: PPUSH
69795: CALL_OW 496
69799: GO 69776
69801: POP
69802: POP
// end ;
69803: LD_VAR 0 1
69807: RET
// export function hHackChangeYourSide ; begin
69808: LD_INT 0
69810: PPUSH
// if your_side = 8 then
69811: LD_OWVAR 2
69815: PUSH
69816: LD_INT 8
69818: EQUAL
69819: IFFALSE 69831
// your_side := 0 else
69821: LD_ADDR_OWVAR 2
69825: PUSH
69826: LD_INT 0
69828: ST_TO_ADDR
69829: GO 69845
// your_side := your_side + 1 ;
69831: LD_ADDR_OWVAR 2
69835: PUSH
69836: LD_OWVAR 2
69840: PUSH
69841: LD_INT 1
69843: PLUS
69844: ST_TO_ADDR
// end ;
69845: LD_VAR 0 1
69849: RET
// export function hHackChangeUnitSide ; var i , j ; begin
69850: LD_INT 0
69852: PPUSH
69853: PPUSH
69854: PPUSH
// for i in all_units do
69855: LD_ADDR_VAR 0 2
69859: PUSH
69860: LD_OWVAR 3
69864: PUSH
69865: FOR_IN
69866: IFFALSE 69944
// if IsSelected ( i ) then
69868: LD_VAR 0 2
69872: PPUSH
69873: CALL_OW 306
69877: IFFALSE 69942
// begin j := GetSide ( i ) ;
69879: LD_ADDR_VAR 0 3
69883: PUSH
69884: LD_VAR 0 2
69888: PPUSH
69889: CALL_OW 255
69893: ST_TO_ADDR
// if j = 8 then
69894: LD_VAR 0 3
69898: PUSH
69899: LD_INT 8
69901: EQUAL
69902: IFFALSE 69914
// j := 0 else
69904: LD_ADDR_VAR 0 3
69908: PUSH
69909: LD_INT 0
69911: ST_TO_ADDR
69912: GO 69928
// j := j + 1 ;
69914: LD_ADDR_VAR 0 3
69918: PUSH
69919: LD_VAR 0 3
69923: PUSH
69924: LD_INT 1
69926: PLUS
69927: ST_TO_ADDR
// SetSide ( i , j ) ;
69928: LD_VAR 0 2
69932: PPUSH
69933: LD_VAR 0 3
69937: PPUSH
69938: CALL_OW 235
// end ;
69942: GO 69865
69944: POP
69945: POP
// end ;
69946: LD_VAR 0 1
69950: RET
// export function hHackFog ; begin
69951: LD_INT 0
69953: PPUSH
// FogOff ( true ) ;
69954: LD_INT 1
69956: PPUSH
69957: CALL_OW 344
// end ;
69961: LD_VAR 0 1
69965: RET
// export function hHackTeleport ( unit , x , y ) ; begin
69966: LD_INT 0
69968: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
69969: LD_VAR 0 1
69973: PPUSH
69974: LD_VAR 0 2
69978: PPUSH
69979: LD_VAR 0 3
69983: PPUSH
69984: LD_INT 1
69986: PPUSH
69987: LD_INT 1
69989: PPUSH
69990: CALL_OW 483
// CenterOnXY ( x , y ) ;
69994: LD_VAR 0 2
69998: PPUSH
69999: LD_VAR 0 3
70003: PPUSH
70004: CALL_OW 84
// end ;
70008: LD_VAR 0 4
70012: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
70013: LD_INT 0
70015: PPUSH
70016: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
70017: LD_VAR 0 1
70021: NOT
70022: PUSH
70023: LD_VAR 0 2
70027: PPUSH
70028: LD_VAR 0 3
70032: PPUSH
70033: CALL_OW 488
70037: NOT
70038: OR
70039: PUSH
70040: LD_VAR 0 1
70044: PPUSH
70045: CALL_OW 266
70049: PUSH
70050: LD_INT 3
70052: NONEQUAL
70053: PUSH
70054: LD_VAR 0 1
70058: PPUSH
70059: CALL_OW 247
70063: PUSH
70064: LD_INT 1
70066: EQUAL
70067: NOT
70068: AND
70069: OR
70070: IFFALSE 70074
// exit ;
70072: GO 70223
// if GetType ( factory ) = unit_human then
70074: LD_VAR 0 1
70078: PPUSH
70079: CALL_OW 247
70083: PUSH
70084: LD_INT 1
70086: EQUAL
70087: IFFALSE 70104
// factory := IsInUnit ( factory ) ;
70089: LD_ADDR_VAR 0 1
70093: PUSH
70094: LD_VAR 0 1
70098: PPUSH
70099: CALL_OW 310
70103: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
70104: LD_VAR 0 1
70108: PPUSH
70109: CALL_OW 266
70113: PUSH
70114: LD_INT 3
70116: NONEQUAL
70117: IFFALSE 70121
// exit ;
70119: GO 70223
// if HexInfo ( x , y ) = factory then
70121: LD_VAR 0 2
70125: PPUSH
70126: LD_VAR 0 3
70130: PPUSH
70131: CALL_OW 428
70135: PUSH
70136: LD_VAR 0 1
70140: EQUAL
70141: IFFALSE 70168
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
70143: LD_ADDR_EXP 109
70147: PUSH
70148: LD_EXP 109
70152: PPUSH
70153: LD_VAR 0 1
70157: PPUSH
70158: LD_INT 0
70160: PPUSH
70161: CALL_OW 1
70165: ST_TO_ADDR
70166: GO 70219
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
70168: LD_ADDR_EXP 109
70172: PUSH
70173: LD_EXP 109
70177: PPUSH
70178: LD_VAR 0 1
70182: PPUSH
70183: LD_VAR 0 1
70187: PPUSH
70188: CALL_OW 255
70192: PUSH
70193: LD_VAR 0 1
70197: PUSH
70198: LD_VAR 0 2
70202: PUSH
70203: LD_VAR 0 3
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: PPUSH
70214: CALL_OW 1
70218: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70219: CALL 70228 0 0
// end ;
70223: LD_VAR 0 4
70227: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
70228: LD_INT 0
70230: PPUSH
70231: PPUSH
70232: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
70233: LD_STRING resetFactoryWaypoint();
70235: PPUSH
70236: CALL_OW 559
// if factoryWaypoints then
70240: LD_EXP 109
70244: IFFALSE 70370
// begin list := PrepareArray ( factoryWaypoints ) ;
70246: LD_ADDR_VAR 0 3
70250: PUSH
70251: LD_EXP 109
70255: PPUSH
70256: CALL 55624 0 1
70260: ST_TO_ADDR
// for i := 1 to list do
70261: LD_ADDR_VAR 0 2
70265: PUSH
70266: DOUBLE
70267: LD_INT 1
70269: DEC
70270: ST_TO_ADDR
70271: LD_VAR 0 3
70275: PUSH
70276: FOR_TO
70277: IFFALSE 70368
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70279: LD_STRING setFactoryWaypointXY(
70281: PUSH
70282: LD_VAR 0 3
70286: PUSH
70287: LD_VAR 0 2
70291: ARRAY
70292: PUSH
70293: LD_INT 1
70295: ARRAY
70296: STR
70297: PUSH
70298: LD_STRING ,
70300: STR
70301: PUSH
70302: LD_VAR 0 3
70306: PUSH
70307: LD_VAR 0 2
70311: ARRAY
70312: PUSH
70313: LD_INT 2
70315: ARRAY
70316: STR
70317: PUSH
70318: LD_STRING ,
70320: STR
70321: PUSH
70322: LD_VAR 0 3
70326: PUSH
70327: LD_VAR 0 2
70331: ARRAY
70332: PUSH
70333: LD_INT 3
70335: ARRAY
70336: STR
70337: PUSH
70338: LD_STRING ,
70340: STR
70341: PUSH
70342: LD_VAR 0 3
70346: PUSH
70347: LD_VAR 0 2
70351: ARRAY
70352: PUSH
70353: LD_INT 4
70355: ARRAY
70356: STR
70357: PUSH
70358: LD_STRING )
70360: STR
70361: PPUSH
70362: CALL_OW 559
70366: GO 70276
70368: POP
70369: POP
// end ; end ;
70370: LD_VAR 0 1
70374: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
70375: LD_INT 0
70377: PPUSH
// if HexInfo ( x , y ) = warehouse then
70378: LD_VAR 0 2
70382: PPUSH
70383: LD_VAR 0 3
70387: PPUSH
70388: CALL_OW 428
70392: PUSH
70393: LD_VAR 0 1
70397: EQUAL
70398: IFFALSE 70425
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
70400: LD_ADDR_EXP 110
70404: PUSH
70405: LD_EXP 110
70409: PPUSH
70410: LD_VAR 0 1
70414: PPUSH
70415: LD_INT 0
70417: PPUSH
70418: CALL_OW 1
70422: ST_TO_ADDR
70423: GO 70476
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
70425: LD_ADDR_EXP 110
70429: PUSH
70430: LD_EXP 110
70434: PPUSH
70435: LD_VAR 0 1
70439: PPUSH
70440: LD_VAR 0 1
70444: PPUSH
70445: CALL_OW 255
70449: PUSH
70450: LD_VAR 0 1
70454: PUSH
70455: LD_VAR 0 2
70459: PUSH
70460: LD_VAR 0 3
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: PPUSH
70471: CALL_OW 1
70475: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
70476: CALL 70485 0 0
// end ;
70480: LD_VAR 0 4
70484: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
70485: LD_INT 0
70487: PPUSH
70488: PPUSH
70489: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
70490: LD_STRING resetWarehouseGatheringPoints();
70492: PPUSH
70493: CALL_OW 559
// if warehouseGatheringPoints then
70497: LD_EXP 110
70501: IFFALSE 70627
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
70503: LD_ADDR_VAR 0 3
70507: PUSH
70508: LD_EXP 110
70512: PPUSH
70513: CALL 55624 0 1
70517: ST_TO_ADDR
// for i := 1 to list do
70518: LD_ADDR_VAR 0 2
70522: PUSH
70523: DOUBLE
70524: LD_INT 1
70526: DEC
70527: ST_TO_ADDR
70528: LD_VAR 0 3
70532: PUSH
70533: FOR_TO
70534: IFFALSE 70625
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70536: LD_STRING setWarehouseGatheringPointXY(
70538: PUSH
70539: LD_VAR 0 3
70543: PUSH
70544: LD_VAR 0 2
70548: ARRAY
70549: PUSH
70550: LD_INT 1
70552: ARRAY
70553: STR
70554: PUSH
70555: LD_STRING ,
70557: STR
70558: PUSH
70559: LD_VAR 0 3
70563: PUSH
70564: LD_VAR 0 2
70568: ARRAY
70569: PUSH
70570: LD_INT 2
70572: ARRAY
70573: STR
70574: PUSH
70575: LD_STRING ,
70577: STR
70578: PUSH
70579: LD_VAR 0 3
70583: PUSH
70584: LD_VAR 0 2
70588: ARRAY
70589: PUSH
70590: LD_INT 3
70592: ARRAY
70593: STR
70594: PUSH
70595: LD_STRING ,
70597: STR
70598: PUSH
70599: LD_VAR 0 3
70603: PUSH
70604: LD_VAR 0 2
70608: ARRAY
70609: PUSH
70610: LD_INT 4
70612: ARRAY
70613: STR
70614: PUSH
70615: LD_STRING )
70617: STR
70618: PPUSH
70619: CALL_OW 559
70623: GO 70533
70625: POP
70626: POP
// end ; end ;
70627: LD_VAR 0 1
70631: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
70632: LD_EXP 110
70636: IFFALSE 71321
70638: GO 70640
70640: DISABLE
70641: LD_INT 0
70643: PPUSH
70644: PPUSH
70645: PPUSH
70646: PPUSH
70647: PPUSH
70648: PPUSH
70649: PPUSH
70650: PPUSH
70651: PPUSH
// begin enable ;
70652: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
70653: LD_ADDR_VAR 0 3
70657: PUSH
70658: LD_EXP 110
70662: PPUSH
70663: CALL 55624 0 1
70667: ST_TO_ADDR
// if not list then
70668: LD_VAR 0 3
70672: NOT
70673: IFFALSE 70677
// exit ;
70675: GO 71321
// for i := 1 to list do
70677: LD_ADDR_VAR 0 1
70681: PUSH
70682: DOUBLE
70683: LD_INT 1
70685: DEC
70686: ST_TO_ADDR
70687: LD_VAR 0 3
70691: PUSH
70692: FOR_TO
70693: IFFALSE 71319
// begin depot := list [ i ] [ 2 ] ;
70695: LD_ADDR_VAR 0 8
70699: PUSH
70700: LD_VAR 0 3
70704: PUSH
70705: LD_VAR 0 1
70709: ARRAY
70710: PUSH
70711: LD_INT 2
70713: ARRAY
70714: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
70715: LD_ADDR_VAR 0 5
70719: PUSH
70720: LD_VAR 0 3
70724: PUSH
70725: LD_VAR 0 1
70729: ARRAY
70730: PUSH
70731: LD_INT 1
70733: ARRAY
70734: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
70735: LD_VAR 0 8
70739: PPUSH
70740: CALL_OW 301
70744: PUSH
70745: LD_VAR 0 5
70749: PUSH
70750: LD_VAR 0 8
70754: PPUSH
70755: CALL_OW 255
70759: NONEQUAL
70760: OR
70761: IFFALSE 70790
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
70763: LD_ADDR_EXP 110
70767: PUSH
70768: LD_EXP 110
70772: PPUSH
70773: LD_VAR 0 8
70777: PPUSH
70778: LD_INT 0
70780: PPUSH
70781: CALL_OW 1
70785: ST_TO_ADDR
// exit ;
70786: POP
70787: POP
70788: GO 71321
// end ; x := list [ i ] [ 3 ] ;
70790: LD_ADDR_VAR 0 6
70794: PUSH
70795: LD_VAR 0 3
70799: PUSH
70800: LD_VAR 0 1
70804: ARRAY
70805: PUSH
70806: LD_INT 3
70808: ARRAY
70809: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
70810: LD_ADDR_VAR 0 7
70814: PUSH
70815: LD_VAR 0 3
70819: PUSH
70820: LD_VAR 0 1
70824: ARRAY
70825: PUSH
70826: LD_INT 4
70828: ARRAY
70829: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
70830: LD_ADDR_VAR 0 9
70834: PUSH
70835: LD_VAR 0 6
70839: PPUSH
70840: LD_VAR 0 7
70844: PPUSH
70845: LD_INT 16
70847: PPUSH
70848: CALL 54212 0 3
70852: ST_TO_ADDR
// if not cratesNearbyPoint then
70853: LD_VAR 0 9
70857: NOT
70858: IFFALSE 70864
// exit ;
70860: POP
70861: POP
70862: GO 71321
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
70864: LD_ADDR_VAR 0 4
70868: PUSH
70869: LD_INT 22
70871: PUSH
70872: LD_VAR 0 5
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 3
70883: PUSH
70884: LD_INT 60
70886: PUSH
70887: EMPTY
70888: LIST
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 91
70896: PUSH
70897: LD_VAR 0 8
70901: PUSH
70902: LD_INT 6
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 2
70912: PUSH
70913: LD_INT 25
70915: PUSH
70916: LD_INT 2
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 25
70925: PUSH
70926: LD_INT 16
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: LIST
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: PPUSH
70944: CALL_OW 69
70948: PUSH
70949: LD_VAR 0 8
70953: PPUSH
70954: CALL_OW 313
70958: PPUSH
70959: LD_INT 3
70961: PUSH
70962: LD_INT 60
70964: PUSH
70965: EMPTY
70966: LIST
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 2
70974: PUSH
70975: LD_INT 25
70977: PUSH
70978: LD_INT 2
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 25
70987: PUSH
70988: LD_INT 16
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: LIST
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PPUSH
71004: CALL_OW 72
71008: UNION
71009: ST_TO_ADDR
// if tmp then
71010: LD_VAR 0 4
71014: IFFALSE 71094
// begin tmp := ShrinkArray ( tmp , 3 ) ;
71016: LD_ADDR_VAR 0 4
71020: PUSH
71021: LD_VAR 0 4
71025: PPUSH
71026: LD_INT 3
71028: PPUSH
71029: CALL 52181 0 2
71033: ST_TO_ADDR
// for j in tmp do
71034: LD_ADDR_VAR 0 2
71038: PUSH
71039: LD_VAR 0 4
71043: PUSH
71044: FOR_IN
71045: IFFALSE 71088
// begin if IsInUnit ( j ) then
71047: LD_VAR 0 2
71051: PPUSH
71052: CALL_OW 310
71056: IFFALSE 71067
// ComExit ( j ) ;
71058: LD_VAR 0 2
71062: PPUSH
71063: CALL 52264 0 1
// AddComCollect ( j , x , y ) ;
71067: LD_VAR 0 2
71071: PPUSH
71072: LD_VAR 0 6
71076: PPUSH
71077: LD_VAR 0 7
71081: PPUSH
71082: CALL_OW 177
// end ;
71086: GO 71044
71088: POP
71089: POP
// exit ;
71090: POP
71091: POP
71092: GO 71321
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
71094: LD_ADDR_VAR 0 4
71098: PUSH
71099: LD_INT 22
71101: PUSH
71102: LD_VAR 0 5
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 91
71113: PUSH
71114: LD_VAR 0 8
71118: PUSH
71119: LD_INT 8
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 2
71129: PUSH
71130: LD_INT 34
71132: PUSH
71133: LD_INT 12
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 34
71142: PUSH
71143: LD_INT 51
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 34
71152: PUSH
71153: LD_INT 32
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 34
71162: PUSH
71163: LD_INT 89
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: LIST
71181: PPUSH
71182: CALL_OW 69
71186: ST_TO_ADDR
// if tmp then
71187: LD_VAR 0 4
71191: IFFALSE 71317
// begin for j in tmp do
71193: LD_ADDR_VAR 0 2
71197: PUSH
71198: LD_VAR 0 4
71202: PUSH
71203: FOR_IN
71204: IFFALSE 71315
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
71206: LD_VAR 0 2
71210: PPUSH
71211: CALL_OW 262
71215: PUSH
71216: LD_INT 3
71218: EQUAL
71219: PUSH
71220: LD_VAR 0 2
71224: PPUSH
71225: CALL_OW 261
71229: PUSH
71230: LD_INT 20
71232: GREATER
71233: OR
71234: PUSH
71235: LD_VAR 0 2
71239: PPUSH
71240: CALL_OW 314
71244: NOT
71245: AND
71246: PUSH
71247: LD_VAR 0 2
71251: PPUSH
71252: CALL_OW 263
71256: PUSH
71257: LD_INT 1
71259: NONEQUAL
71260: PUSH
71261: LD_VAR 0 2
71265: PPUSH
71266: CALL_OW 311
71270: OR
71271: AND
71272: IFFALSE 71313
// begin ComCollect ( j , x , y ) ;
71274: LD_VAR 0 2
71278: PPUSH
71279: LD_VAR 0 6
71283: PPUSH
71284: LD_VAR 0 7
71288: PPUSH
71289: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
71293: LD_VAR 0 2
71297: PPUSH
71298: LD_VAR 0 8
71302: PPUSH
71303: CALL_OW 172
// exit ;
71307: POP
71308: POP
71309: POP
71310: POP
71311: GO 71321
// end ;
71313: GO 71203
71315: POP
71316: POP
// end ; end ;
71317: GO 70692
71319: POP
71320: POP
// end ; end_of_file
71321: PPOPN 9
71323: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71324: LD_VAR 0 1
71328: PUSH
71329: LD_INT 200
71331: DOUBLE
71332: GREATEREQUAL
71333: IFFALSE 71341
71335: LD_INT 299
71337: DOUBLE
71338: LESSEQUAL
71339: IFTRUE 71343
71341: GO 71375
71343: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71344: LD_VAR 0 1
71348: PPUSH
71349: LD_VAR 0 2
71353: PPUSH
71354: LD_VAR 0 3
71358: PPUSH
71359: LD_VAR 0 4
71363: PPUSH
71364: LD_VAR 0 5
71368: PPUSH
71369: CALL 71863 0 5
71373: GO 71452
71375: LD_INT 300
71377: DOUBLE
71378: GREATEREQUAL
71379: IFFALSE 71387
71381: LD_INT 399
71383: DOUBLE
71384: LESSEQUAL
71385: IFTRUE 71389
71387: GO 71451
71389: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71390: LD_VAR 0 1
71394: PPUSH
71395: LD_VAR 0 2
71399: PPUSH
71400: LD_VAR 0 3
71404: PPUSH
71405: LD_VAR 0 4
71409: PPUSH
71410: LD_VAR 0 5
71414: PPUSH
71415: LD_VAR 0 6
71419: PPUSH
71420: LD_VAR 0 7
71424: PPUSH
71425: LD_VAR 0 8
71429: PPUSH
71430: LD_VAR 0 9
71434: PPUSH
71435: LD_VAR 0 10
71439: PPUSH
71440: LD_VAR 0 11
71444: PPUSH
71445: CALL 68033 0 11
71449: GO 71452
71451: POP
// end ;
71452: PPOPN 11
71454: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71455: LD_VAR 0 1
71459: PPUSH
71460: LD_VAR 0 2
71464: PPUSH
71465: LD_VAR 0 3
71469: PPUSH
71470: LD_VAR 0 4
71474: PPUSH
71475: LD_VAR 0 5
71479: PPUSH
71480: CALL 71599 0 5
// end ; end_of_file
71484: PPOPN 5
71486: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
71487: LD_INT 0
71489: PPUSH
71490: PPUSH
71491: PPUSH
71492: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
71493: LD_VAR 0 1
71497: PPUSH
71498: CALL_OW 264
71502: PUSH
71503: LD_INT 91
71505: EQUAL
71506: IFFALSE 71578
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
71508: LD_INT 68
71510: PPUSH
71511: LD_VAR 0 1
71515: PPUSH
71516: CALL_OW 255
71520: PPUSH
71521: CALL_OW 321
71525: PUSH
71526: LD_INT 2
71528: EQUAL
71529: IFFALSE 71541
// eff := 70 else
71531: LD_ADDR_VAR 0 4
71535: PUSH
71536: LD_INT 70
71538: ST_TO_ADDR
71539: GO 71549
// eff := 30 ;
71541: LD_ADDR_VAR 0 4
71545: PUSH
71546: LD_INT 30
71548: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
71549: LD_VAR 0 1
71553: PPUSH
71554: CALL_OW 250
71558: PPUSH
71559: LD_VAR 0 1
71563: PPUSH
71564: CALL_OW 251
71568: PPUSH
71569: LD_VAR 0 4
71573: PPUSH
71574: CALL_OW 495
// end ; end ;
71578: LD_VAR 0 2
71582: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
71583: LD_INT 0
71585: PPUSH
// end ;
71586: LD_VAR 0 4
71590: RET
// export function SOS_Command ( cmd ) ; begin
71591: LD_INT 0
71593: PPUSH
// end ;
71594: LD_VAR 0 2
71598: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
71599: LD_INT 0
71601: PPUSH
// end ;
71602: LD_VAR 0 6
71606: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
71607: LD_INT 0
71609: PPUSH
71610: PPUSH
// if not vehicle or not factory then
71611: LD_VAR 0 1
71615: NOT
71616: PUSH
71617: LD_VAR 0 2
71621: NOT
71622: OR
71623: IFFALSE 71627
// exit ;
71625: GO 71858
// if factoryWaypoints >= factory then
71627: LD_EXP 109
71631: PUSH
71632: LD_VAR 0 2
71636: GREATEREQUAL
71637: IFFALSE 71858
// if factoryWaypoints [ factory ] then
71639: LD_EXP 109
71643: PUSH
71644: LD_VAR 0 2
71648: ARRAY
71649: IFFALSE 71858
// begin if GetControl ( vehicle ) = control_manual then
71651: LD_VAR 0 1
71655: PPUSH
71656: CALL_OW 263
71660: PUSH
71661: LD_INT 1
71663: EQUAL
71664: IFFALSE 71745
// begin driver := IsDrivenBy ( vehicle ) ;
71666: LD_ADDR_VAR 0 4
71670: PUSH
71671: LD_VAR 0 1
71675: PPUSH
71676: CALL_OW 311
71680: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
71681: LD_VAR 0 4
71685: PPUSH
71686: LD_EXP 109
71690: PUSH
71691: LD_VAR 0 2
71695: ARRAY
71696: PUSH
71697: LD_INT 3
71699: ARRAY
71700: PPUSH
71701: LD_EXP 109
71705: PUSH
71706: LD_VAR 0 2
71710: ARRAY
71711: PUSH
71712: LD_INT 4
71714: ARRAY
71715: PPUSH
71716: CALL_OW 171
// AddComExitVehicle ( driver ) ;
71720: LD_VAR 0 4
71724: PPUSH
71725: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
71729: LD_VAR 0 4
71733: PPUSH
71734: LD_VAR 0 2
71738: PPUSH
71739: CALL_OW 180
// end else
71743: GO 71858
// if GetControl ( vehicle ) = control_remote then
71745: LD_VAR 0 1
71749: PPUSH
71750: CALL_OW 263
71754: PUSH
71755: LD_INT 2
71757: EQUAL
71758: IFFALSE 71819
// begin wait ( 0 0$2 ) ;
71760: LD_INT 70
71762: PPUSH
71763: CALL_OW 67
// if Connect ( vehicle ) then
71767: LD_VAR 0 1
71771: PPUSH
71772: CALL 22596 0 1
71776: IFFALSE 71817
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
71778: LD_VAR 0 1
71782: PPUSH
71783: LD_EXP 109
71787: PUSH
71788: LD_VAR 0 2
71792: ARRAY
71793: PUSH
71794: LD_INT 3
71796: ARRAY
71797: PPUSH
71798: LD_EXP 109
71802: PUSH
71803: LD_VAR 0 2
71807: ARRAY
71808: PUSH
71809: LD_INT 4
71811: ARRAY
71812: PPUSH
71813: CALL_OW 171
// end else
71817: GO 71858
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
71819: LD_VAR 0 1
71823: PPUSH
71824: LD_EXP 109
71828: PUSH
71829: LD_VAR 0 2
71833: ARRAY
71834: PUSH
71835: LD_INT 3
71837: ARRAY
71838: PPUSH
71839: LD_EXP 109
71843: PUSH
71844: LD_VAR 0 2
71848: ARRAY
71849: PUSH
71850: LD_INT 4
71852: ARRAY
71853: PPUSH
71854: CALL_OW 171
// end ; end ;
71858: LD_VAR 0 3
71862: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
71863: LD_INT 0
71865: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
71866: LD_VAR 0 1
71870: PUSH
71871: LD_INT 250
71873: EQUAL
71874: PUSH
71875: LD_VAR 0 2
71879: PPUSH
71880: CALL_OW 264
71884: PUSH
71885: LD_INT 81
71887: EQUAL
71888: AND
71889: IFFALSE 71910
// MinerPlaceMine ( unit , x , y ) ;
71891: LD_VAR 0 2
71895: PPUSH
71896: LD_VAR 0 4
71900: PPUSH
71901: LD_VAR 0 5
71905: PPUSH
71906: CALL 74295 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
71910: LD_VAR 0 1
71914: PUSH
71915: LD_INT 251
71917: EQUAL
71918: PUSH
71919: LD_VAR 0 2
71923: PPUSH
71924: CALL_OW 264
71928: PUSH
71929: LD_INT 81
71931: EQUAL
71932: AND
71933: IFFALSE 71954
// MinerDetonateMine ( unit , x , y ) ;
71935: LD_VAR 0 2
71939: PPUSH
71940: LD_VAR 0 4
71944: PPUSH
71945: LD_VAR 0 5
71949: PPUSH
71950: CALL 74570 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
71954: LD_VAR 0 1
71958: PUSH
71959: LD_INT 252
71961: EQUAL
71962: PUSH
71963: LD_VAR 0 2
71967: PPUSH
71968: CALL_OW 264
71972: PUSH
71973: LD_INT 81
71975: EQUAL
71976: AND
71977: IFFALSE 71998
// MinerCreateMinefield ( unit , x , y ) ;
71979: LD_VAR 0 2
71983: PPUSH
71984: LD_VAR 0 4
71988: PPUSH
71989: LD_VAR 0 5
71993: PPUSH
71994: CALL 74987 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
71998: LD_VAR 0 1
72002: PUSH
72003: LD_INT 253
72005: EQUAL
72006: PUSH
72007: LD_VAR 0 2
72011: PPUSH
72012: CALL_OW 257
72016: PUSH
72017: LD_INT 5
72019: EQUAL
72020: AND
72021: IFFALSE 72042
// ComBinocular ( unit , x , y ) ;
72023: LD_VAR 0 2
72027: PPUSH
72028: LD_VAR 0 4
72032: PPUSH
72033: LD_VAR 0 5
72037: PPUSH
72038: CALL 75356 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
72042: LD_VAR 0 1
72046: PUSH
72047: LD_INT 254
72049: EQUAL
72050: PUSH
72051: LD_VAR 0 2
72055: PPUSH
72056: CALL_OW 264
72060: PUSH
72061: LD_INT 99
72063: EQUAL
72064: AND
72065: PUSH
72066: LD_VAR 0 3
72070: PPUSH
72071: CALL_OW 263
72075: PUSH
72076: LD_INT 3
72078: EQUAL
72079: AND
72080: IFFALSE 72096
// HackDestroyVehicle ( unit , selectedUnit ) ;
72082: LD_VAR 0 2
72086: PPUSH
72087: LD_VAR 0 3
72091: PPUSH
72092: CALL 73659 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
72096: LD_VAR 0 1
72100: PUSH
72101: LD_INT 255
72103: EQUAL
72104: PUSH
72105: LD_VAR 0 2
72109: PPUSH
72110: CALL_OW 264
72114: PUSH
72115: LD_INT 14
72117: PUSH
72118: LD_INT 53
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: IN
72125: AND
72126: PUSH
72127: LD_VAR 0 4
72131: PPUSH
72132: LD_VAR 0 5
72136: PPUSH
72137: CALL_OW 488
72141: AND
72142: IFFALSE 72166
// CutTreeXYR ( unit , x , y , 12 ) ;
72144: LD_VAR 0 2
72148: PPUSH
72149: LD_VAR 0 4
72153: PPUSH
72154: LD_VAR 0 5
72158: PPUSH
72159: LD_INT 12
72161: PPUSH
72162: CALL 72229 0 4
// if cmd = 256 then
72166: LD_VAR 0 1
72170: PUSH
72171: LD_INT 256
72173: EQUAL
72174: IFFALSE 72195
// SetFactoryWaypoint ( unit , x , y ) ;
72176: LD_VAR 0 2
72180: PPUSH
72181: LD_VAR 0 4
72185: PPUSH
72186: LD_VAR 0 5
72190: PPUSH
72191: CALL 70013 0 3
// if cmd = 257 then
72195: LD_VAR 0 1
72199: PUSH
72200: LD_INT 257
72202: EQUAL
72203: IFFALSE 72224
// SetWarehouseGatheringPoint ( unit , x , y ) ;
72205: LD_VAR 0 2
72209: PPUSH
72210: LD_VAR 0 4
72214: PPUSH
72215: LD_VAR 0 5
72219: PPUSH
72220: CALL 70375 0 3
// end ;
72224: LD_VAR 0 6
72228: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
72229: LD_INT 0
72231: PPUSH
72232: PPUSH
72233: PPUSH
72234: PPUSH
72235: PPUSH
72236: PPUSH
72237: PPUSH
72238: PPUSH
72239: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
72240: LD_VAR 0 1
72244: NOT
72245: PUSH
72246: LD_VAR 0 2
72250: PPUSH
72251: LD_VAR 0 3
72255: PPUSH
72256: CALL_OW 488
72260: NOT
72261: OR
72262: PUSH
72263: LD_VAR 0 4
72267: NOT
72268: OR
72269: IFFALSE 72273
// exit ;
72271: GO 72613
// list := [ ] ;
72273: LD_ADDR_VAR 0 13
72277: PUSH
72278: EMPTY
72279: ST_TO_ADDR
// if x - r < 0 then
72280: LD_VAR 0 2
72284: PUSH
72285: LD_VAR 0 4
72289: MINUS
72290: PUSH
72291: LD_INT 0
72293: LESS
72294: IFFALSE 72306
// min_x := 0 else
72296: LD_ADDR_VAR 0 7
72300: PUSH
72301: LD_INT 0
72303: ST_TO_ADDR
72304: GO 72322
// min_x := x - r ;
72306: LD_ADDR_VAR 0 7
72310: PUSH
72311: LD_VAR 0 2
72315: PUSH
72316: LD_VAR 0 4
72320: MINUS
72321: ST_TO_ADDR
// if y - r < 0 then
72322: LD_VAR 0 3
72326: PUSH
72327: LD_VAR 0 4
72331: MINUS
72332: PUSH
72333: LD_INT 0
72335: LESS
72336: IFFALSE 72348
// min_y := 0 else
72338: LD_ADDR_VAR 0 8
72342: PUSH
72343: LD_INT 0
72345: ST_TO_ADDR
72346: GO 72364
// min_y := y - r ;
72348: LD_ADDR_VAR 0 8
72352: PUSH
72353: LD_VAR 0 3
72357: PUSH
72358: LD_VAR 0 4
72362: MINUS
72363: ST_TO_ADDR
// max_x := x + r ;
72364: LD_ADDR_VAR 0 9
72368: PUSH
72369: LD_VAR 0 2
72373: PUSH
72374: LD_VAR 0 4
72378: PLUS
72379: ST_TO_ADDR
// max_y := y + r ;
72380: LD_ADDR_VAR 0 10
72384: PUSH
72385: LD_VAR 0 3
72389: PUSH
72390: LD_VAR 0 4
72394: PLUS
72395: ST_TO_ADDR
// for _x = min_x to max_x do
72396: LD_ADDR_VAR 0 11
72400: PUSH
72401: DOUBLE
72402: LD_VAR 0 7
72406: DEC
72407: ST_TO_ADDR
72408: LD_VAR 0 9
72412: PUSH
72413: FOR_TO
72414: IFFALSE 72531
// for _y = min_y to max_y do
72416: LD_ADDR_VAR 0 12
72420: PUSH
72421: DOUBLE
72422: LD_VAR 0 8
72426: DEC
72427: ST_TO_ADDR
72428: LD_VAR 0 10
72432: PUSH
72433: FOR_TO
72434: IFFALSE 72527
// begin if not ValidHex ( _x , _y ) then
72436: LD_VAR 0 11
72440: PPUSH
72441: LD_VAR 0 12
72445: PPUSH
72446: CALL_OW 488
72450: NOT
72451: IFFALSE 72455
// continue ;
72453: GO 72433
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
72455: LD_VAR 0 11
72459: PPUSH
72460: LD_VAR 0 12
72464: PPUSH
72465: CALL_OW 351
72469: PUSH
72470: LD_VAR 0 11
72474: PPUSH
72475: LD_VAR 0 12
72479: PPUSH
72480: CALL_OW 554
72484: AND
72485: IFFALSE 72525
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
72487: LD_ADDR_VAR 0 13
72491: PUSH
72492: LD_VAR 0 13
72496: PPUSH
72497: LD_VAR 0 13
72501: PUSH
72502: LD_INT 1
72504: PLUS
72505: PPUSH
72506: LD_VAR 0 11
72510: PUSH
72511: LD_VAR 0 12
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PPUSH
72520: CALL_OW 2
72524: ST_TO_ADDR
// end ;
72525: GO 72433
72527: POP
72528: POP
72529: GO 72413
72531: POP
72532: POP
// if not list then
72533: LD_VAR 0 13
72537: NOT
72538: IFFALSE 72542
// exit ;
72540: GO 72613
// for i in list do
72542: LD_ADDR_VAR 0 6
72546: PUSH
72547: LD_VAR 0 13
72551: PUSH
72552: FOR_IN
72553: IFFALSE 72611
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
72555: LD_VAR 0 1
72559: PPUSH
72560: LD_STRING M
72562: PUSH
72563: LD_VAR 0 6
72567: PUSH
72568: LD_INT 1
72570: ARRAY
72571: PUSH
72572: LD_VAR 0 6
72576: PUSH
72577: LD_INT 2
72579: ARRAY
72580: PUSH
72581: LD_INT 0
72583: PUSH
72584: LD_INT 0
72586: PUSH
72587: LD_INT 0
72589: PUSH
72590: LD_INT 0
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: PUSH
72602: EMPTY
72603: LIST
72604: PPUSH
72605: CALL_OW 447
72609: GO 72552
72611: POP
72612: POP
// end ;
72613: LD_VAR 0 5
72617: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
72618: LD_EXP 112
72622: NOT
72623: IFFALSE 72673
72625: GO 72627
72627: DISABLE
// begin initHack := true ;
72628: LD_ADDR_EXP 112
72632: PUSH
72633: LD_INT 1
72635: ST_TO_ADDR
// hackTanks := [ ] ;
72636: LD_ADDR_EXP 113
72640: PUSH
72641: EMPTY
72642: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
72643: LD_ADDR_EXP 114
72647: PUSH
72648: EMPTY
72649: ST_TO_ADDR
// hackLimit := 3 ;
72650: LD_ADDR_EXP 115
72654: PUSH
72655: LD_INT 3
72657: ST_TO_ADDR
// hackDist := 12 ;
72658: LD_ADDR_EXP 116
72662: PUSH
72663: LD_INT 12
72665: ST_TO_ADDR
// hackCounter := [ ] ;
72666: LD_ADDR_EXP 117
72670: PUSH
72671: EMPTY
72672: ST_TO_ADDR
// end ;
72673: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
72674: LD_EXP 112
72678: PUSH
72679: LD_INT 34
72681: PUSH
72682: LD_INT 99
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PPUSH
72689: CALL_OW 69
72693: AND
72694: IFFALSE 72947
72696: GO 72698
72698: DISABLE
72699: LD_INT 0
72701: PPUSH
72702: PPUSH
// begin enable ;
72703: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
72704: LD_ADDR_VAR 0 1
72708: PUSH
72709: LD_INT 34
72711: PUSH
72712: LD_INT 99
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PPUSH
72719: CALL_OW 69
72723: PUSH
72724: FOR_IN
72725: IFFALSE 72945
// begin if not i in hackTanks then
72727: LD_VAR 0 1
72731: PUSH
72732: LD_EXP 113
72736: IN
72737: NOT
72738: IFFALSE 72821
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
72740: LD_ADDR_EXP 113
72744: PUSH
72745: LD_EXP 113
72749: PPUSH
72750: LD_EXP 113
72754: PUSH
72755: LD_INT 1
72757: PLUS
72758: PPUSH
72759: LD_VAR 0 1
72763: PPUSH
72764: CALL_OW 1
72768: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
72769: LD_ADDR_EXP 114
72773: PUSH
72774: LD_EXP 114
72778: PPUSH
72779: LD_EXP 114
72783: PUSH
72784: LD_INT 1
72786: PLUS
72787: PPUSH
72788: EMPTY
72789: PPUSH
72790: CALL_OW 1
72794: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
72795: LD_ADDR_EXP 117
72799: PUSH
72800: LD_EXP 117
72804: PPUSH
72805: LD_EXP 117
72809: PUSH
72810: LD_INT 1
72812: PLUS
72813: PPUSH
72814: EMPTY
72815: PPUSH
72816: CALL_OW 1
72820: ST_TO_ADDR
// end ; if not IsOk ( i ) then
72821: LD_VAR 0 1
72825: PPUSH
72826: CALL_OW 302
72830: NOT
72831: IFFALSE 72844
// begin HackUnlinkAll ( i ) ;
72833: LD_VAR 0 1
72837: PPUSH
72838: CALL 72950 0 1
// continue ;
72842: GO 72724
// end ; HackCheckCapturedStatus ( i ) ;
72844: LD_VAR 0 1
72848: PPUSH
72849: CALL 73393 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
72853: LD_ADDR_VAR 0 2
72857: PUSH
72858: LD_INT 81
72860: PUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 255
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 33
72877: PUSH
72878: LD_INT 3
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 91
72887: PUSH
72888: LD_VAR 0 1
72892: PUSH
72893: LD_EXP 116
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: LIST
72902: PUSH
72903: LD_INT 50
72905: PUSH
72906: EMPTY
72907: LIST
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: PPUSH
72915: CALL_OW 69
72919: ST_TO_ADDR
// if not tmp then
72920: LD_VAR 0 2
72924: NOT
72925: IFFALSE 72929
// continue ;
72927: GO 72724
// HackLink ( i , tmp ) ;
72929: LD_VAR 0 1
72933: PPUSH
72934: LD_VAR 0 2
72938: PPUSH
72939: CALL 73086 0 2
// end ;
72943: GO 72724
72945: POP
72946: POP
// end ;
72947: PPOPN 2
72949: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
72950: LD_INT 0
72952: PPUSH
72953: PPUSH
72954: PPUSH
// if not hack in hackTanks then
72955: LD_VAR 0 1
72959: PUSH
72960: LD_EXP 113
72964: IN
72965: NOT
72966: IFFALSE 72970
// exit ;
72968: GO 73081
// index := GetElementIndex ( hackTanks , hack ) ;
72970: LD_ADDR_VAR 0 4
72974: PUSH
72975: LD_EXP 113
72979: PPUSH
72980: LD_VAR 0 1
72984: PPUSH
72985: CALL 19412 0 2
72989: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
72990: LD_EXP 114
72994: PUSH
72995: LD_VAR 0 4
72999: ARRAY
73000: IFFALSE 73081
// begin for i in hackTanksCaptured [ index ] do
73002: LD_ADDR_VAR 0 3
73006: PUSH
73007: LD_EXP 114
73011: PUSH
73012: LD_VAR 0 4
73016: ARRAY
73017: PUSH
73018: FOR_IN
73019: IFFALSE 73045
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
73021: LD_VAR 0 3
73025: PUSH
73026: LD_INT 1
73028: ARRAY
73029: PPUSH
73030: LD_VAR 0 3
73034: PUSH
73035: LD_INT 2
73037: ARRAY
73038: PPUSH
73039: CALL_OW 235
73043: GO 73018
73045: POP
73046: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
73047: LD_ADDR_EXP 114
73051: PUSH
73052: LD_EXP 114
73056: PPUSH
73057: LD_VAR 0 4
73061: PPUSH
73062: EMPTY
73063: PPUSH
73064: CALL_OW 1
73068: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
73069: LD_VAR 0 1
73073: PPUSH
73074: LD_INT 0
73076: PPUSH
73077: CALL_OW 505
// end ; end ;
73081: LD_VAR 0 2
73085: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
73086: LD_INT 0
73088: PPUSH
73089: PPUSH
73090: PPUSH
// if not hack in hackTanks or not vehicles then
73091: LD_VAR 0 1
73095: PUSH
73096: LD_EXP 113
73100: IN
73101: NOT
73102: PUSH
73103: LD_VAR 0 2
73107: NOT
73108: OR
73109: IFFALSE 73113
// exit ;
73111: GO 73388
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
73113: LD_ADDR_VAR 0 2
73117: PUSH
73118: LD_VAR 0 1
73122: PPUSH
73123: LD_VAR 0 2
73127: PPUSH
73128: LD_INT 1
73130: PPUSH
73131: LD_INT 1
73133: PPUSH
73134: CALL 20062 0 4
73138: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
73139: LD_ADDR_VAR 0 5
73143: PUSH
73144: LD_EXP 113
73148: PPUSH
73149: LD_VAR 0 1
73153: PPUSH
73154: CALL 19412 0 2
73158: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
73159: LD_EXP 114
73163: PUSH
73164: LD_VAR 0 5
73168: ARRAY
73169: PUSH
73170: LD_EXP 115
73174: LESS
73175: IFFALSE 73364
// begin for i := 1 to vehicles do
73177: LD_ADDR_VAR 0 4
73181: PUSH
73182: DOUBLE
73183: LD_INT 1
73185: DEC
73186: ST_TO_ADDR
73187: LD_VAR 0 2
73191: PUSH
73192: FOR_TO
73193: IFFALSE 73362
// begin if hackTanksCaptured [ index ] = hackLimit then
73195: LD_EXP 114
73199: PUSH
73200: LD_VAR 0 5
73204: ARRAY
73205: PUSH
73206: LD_EXP 115
73210: EQUAL
73211: IFFALSE 73215
// break ;
73213: GO 73362
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
73215: LD_ADDR_EXP 117
73219: PUSH
73220: LD_EXP 117
73224: PPUSH
73225: LD_VAR 0 5
73229: PPUSH
73230: LD_EXP 117
73234: PUSH
73235: LD_VAR 0 5
73239: ARRAY
73240: PUSH
73241: LD_INT 1
73243: PLUS
73244: PPUSH
73245: CALL_OW 1
73249: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
73250: LD_ADDR_EXP 114
73254: PUSH
73255: LD_EXP 114
73259: PPUSH
73260: LD_VAR 0 5
73264: PUSH
73265: LD_EXP 114
73269: PUSH
73270: LD_VAR 0 5
73274: ARRAY
73275: PUSH
73276: LD_INT 1
73278: PLUS
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PPUSH
73284: LD_VAR 0 2
73288: PUSH
73289: LD_VAR 0 4
73293: ARRAY
73294: PUSH
73295: LD_VAR 0 2
73299: PUSH
73300: LD_VAR 0 4
73304: ARRAY
73305: PPUSH
73306: CALL_OW 255
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PPUSH
73315: CALL 19627 0 3
73319: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
73320: LD_VAR 0 2
73324: PUSH
73325: LD_VAR 0 4
73329: ARRAY
73330: PPUSH
73331: LD_VAR 0 1
73335: PPUSH
73336: CALL_OW 255
73340: PPUSH
73341: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
73345: LD_VAR 0 2
73349: PUSH
73350: LD_VAR 0 4
73354: ARRAY
73355: PPUSH
73356: CALL_OW 141
// end ;
73360: GO 73192
73362: POP
73363: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73364: LD_VAR 0 1
73368: PPUSH
73369: LD_EXP 114
73373: PUSH
73374: LD_VAR 0 5
73378: ARRAY
73379: PUSH
73380: LD_INT 0
73382: PLUS
73383: PPUSH
73384: CALL_OW 505
// end ;
73388: LD_VAR 0 3
73392: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
73393: LD_INT 0
73395: PPUSH
73396: PPUSH
73397: PPUSH
73398: PPUSH
// if not hack in hackTanks then
73399: LD_VAR 0 1
73403: PUSH
73404: LD_EXP 113
73408: IN
73409: NOT
73410: IFFALSE 73414
// exit ;
73412: GO 73654
// index := GetElementIndex ( hackTanks , hack ) ;
73414: LD_ADDR_VAR 0 4
73418: PUSH
73419: LD_EXP 113
73423: PPUSH
73424: LD_VAR 0 1
73428: PPUSH
73429: CALL 19412 0 2
73433: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
73434: LD_ADDR_VAR 0 3
73438: PUSH
73439: DOUBLE
73440: LD_EXP 114
73444: PUSH
73445: LD_VAR 0 4
73449: ARRAY
73450: INC
73451: ST_TO_ADDR
73452: LD_INT 1
73454: PUSH
73455: FOR_DOWNTO
73456: IFFALSE 73628
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
73458: LD_ADDR_VAR 0 5
73462: PUSH
73463: LD_EXP 114
73467: PUSH
73468: LD_VAR 0 4
73472: ARRAY
73473: PUSH
73474: LD_VAR 0 3
73478: ARRAY
73479: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
73480: LD_VAR 0 5
73484: PUSH
73485: LD_INT 1
73487: ARRAY
73488: PPUSH
73489: CALL_OW 302
73493: NOT
73494: PUSH
73495: LD_VAR 0 5
73499: PUSH
73500: LD_INT 1
73502: ARRAY
73503: PPUSH
73504: CALL_OW 255
73508: PUSH
73509: LD_VAR 0 1
73513: PPUSH
73514: CALL_OW 255
73518: NONEQUAL
73519: OR
73520: IFFALSE 73626
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
73522: LD_VAR 0 5
73526: PUSH
73527: LD_INT 1
73529: ARRAY
73530: PPUSH
73531: CALL_OW 305
73535: PUSH
73536: LD_VAR 0 5
73540: PUSH
73541: LD_INT 1
73543: ARRAY
73544: PPUSH
73545: CALL_OW 255
73549: PUSH
73550: LD_VAR 0 1
73554: PPUSH
73555: CALL_OW 255
73559: EQUAL
73560: AND
73561: IFFALSE 73585
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
73563: LD_VAR 0 5
73567: PUSH
73568: LD_INT 1
73570: ARRAY
73571: PPUSH
73572: LD_VAR 0 5
73576: PUSH
73577: LD_INT 2
73579: ARRAY
73580: PPUSH
73581: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
73585: LD_ADDR_EXP 114
73589: PUSH
73590: LD_EXP 114
73594: PPUSH
73595: LD_VAR 0 4
73599: PPUSH
73600: LD_EXP 114
73604: PUSH
73605: LD_VAR 0 4
73609: ARRAY
73610: PPUSH
73611: LD_VAR 0 3
73615: PPUSH
73616: CALL_OW 3
73620: PPUSH
73621: CALL_OW 1
73625: ST_TO_ADDR
// end ; end ;
73626: GO 73455
73628: POP
73629: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73630: LD_VAR 0 1
73634: PPUSH
73635: LD_EXP 114
73639: PUSH
73640: LD_VAR 0 4
73644: ARRAY
73645: PUSH
73646: LD_INT 0
73648: PLUS
73649: PPUSH
73650: CALL_OW 505
// end ;
73654: LD_VAR 0 2
73658: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
73659: LD_INT 0
73661: PPUSH
73662: PPUSH
73663: PPUSH
73664: PPUSH
// if not hack in hackTanks then
73665: LD_VAR 0 1
73669: PUSH
73670: LD_EXP 113
73674: IN
73675: NOT
73676: IFFALSE 73680
// exit ;
73678: GO 73765
// index := GetElementIndex ( hackTanks , hack ) ;
73680: LD_ADDR_VAR 0 5
73684: PUSH
73685: LD_EXP 113
73689: PPUSH
73690: LD_VAR 0 1
73694: PPUSH
73695: CALL 19412 0 2
73699: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
73700: LD_ADDR_VAR 0 4
73704: PUSH
73705: DOUBLE
73706: LD_INT 1
73708: DEC
73709: ST_TO_ADDR
73710: LD_EXP 114
73714: PUSH
73715: LD_VAR 0 5
73719: ARRAY
73720: PUSH
73721: FOR_TO
73722: IFFALSE 73763
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
73724: LD_EXP 114
73728: PUSH
73729: LD_VAR 0 5
73733: ARRAY
73734: PUSH
73735: LD_VAR 0 4
73739: ARRAY
73740: PUSH
73741: LD_INT 1
73743: ARRAY
73744: PUSH
73745: LD_VAR 0 2
73749: EQUAL
73750: IFFALSE 73761
// KillUnit ( vehicle ) ;
73752: LD_VAR 0 2
73756: PPUSH
73757: CALL_OW 66
73761: GO 73721
73763: POP
73764: POP
// end ;
73765: LD_VAR 0 3
73769: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
73770: LD_EXP 118
73774: NOT
73775: IFFALSE 73810
73777: GO 73779
73779: DISABLE
// begin initMiner := true ;
73780: LD_ADDR_EXP 118
73784: PUSH
73785: LD_INT 1
73787: ST_TO_ADDR
// minersList := [ ] ;
73788: LD_ADDR_EXP 119
73792: PUSH
73793: EMPTY
73794: ST_TO_ADDR
// minerMinesList := [ ] ;
73795: LD_ADDR_EXP 120
73799: PUSH
73800: EMPTY
73801: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
73802: LD_ADDR_EXP 121
73806: PUSH
73807: LD_INT 5
73809: ST_TO_ADDR
// end ;
73810: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
73811: LD_EXP 118
73815: PUSH
73816: LD_INT 34
73818: PUSH
73819: LD_INT 81
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PPUSH
73826: CALL_OW 69
73830: AND
73831: IFFALSE 74292
73833: GO 73835
73835: DISABLE
73836: LD_INT 0
73838: PPUSH
73839: PPUSH
73840: PPUSH
73841: PPUSH
// begin enable ;
73842: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
73843: LD_ADDR_VAR 0 1
73847: PUSH
73848: LD_INT 34
73850: PUSH
73851: LD_INT 81
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PPUSH
73858: CALL_OW 69
73862: PUSH
73863: FOR_IN
73864: IFFALSE 73936
// begin if not i in minersList then
73866: LD_VAR 0 1
73870: PUSH
73871: LD_EXP 119
73875: IN
73876: NOT
73877: IFFALSE 73934
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
73879: LD_ADDR_EXP 119
73883: PUSH
73884: LD_EXP 119
73888: PPUSH
73889: LD_EXP 119
73893: PUSH
73894: LD_INT 1
73896: PLUS
73897: PPUSH
73898: LD_VAR 0 1
73902: PPUSH
73903: CALL_OW 1
73907: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
73908: LD_ADDR_EXP 120
73912: PUSH
73913: LD_EXP 120
73917: PPUSH
73918: LD_EXP 120
73922: PUSH
73923: LD_INT 1
73925: PLUS
73926: PPUSH
73927: EMPTY
73928: PPUSH
73929: CALL_OW 1
73933: ST_TO_ADDR
// end end ;
73934: GO 73863
73936: POP
73937: POP
// for i := minerMinesList downto 1 do
73938: LD_ADDR_VAR 0 1
73942: PUSH
73943: DOUBLE
73944: LD_EXP 120
73948: INC
73949: ST_TO_ADDR
73950: LD_INT 1
73952: PUSH
73953: FOR_DOWNTO
73954: IFFALSE 74290
// begin if IsLive ( minersList [ i ] ) then
73956: LD_EXP 119
73960: PUSH
73961: LD_VAR 0 1
73965: ARRAY
73966: PPUSH
73967: CALL_OW 300
73971: IFFALSE 73999
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
73973: LD_EXP 119
73977: PUSH
73978: LD_VAR 0 1
73982: ARRAY
73983: PPUSH
73984: LD_EXP 120
73988: PUSH
73989: LD_VAR 0 1
73993: ARRAY
73994: PPUSH
73995: CALL_OW 505
// if not minerMinesList [ i ] then
73999: LD_EXP 120
74003: PUSH
74004: LD_VAR 0 1
74008: ARRAY
74009: NOT
74010: IFFALSE 74014
// continue ;
74012: GO 73953
// for j := minerMinesList [ i ] downto 1 do
74014: LD_ADDR_VAR 0 2
74018: PUSH
74019: DOUBLE
74020: LD_EXP 120
74024: PUSH
74025: LD_VAR 0 1
74029: ARRAY
74030: INC
74031: ST_TO_ADDR
74032: LD_INT 1
74034: PUSH
74035: FOR_DOWNTO
74036: IFFALSE 74286
// begin side := GetSide ( minersList [ i ] ) ;
74038: LD_ADDR_VAR 0 3
74042: PUSH
74043: LD_EXP 119
74047: PUSH
74048: LD_VAR 0 1
74052: ARRAY
74053: PPUSH
74054: CALL_OW 255
74058: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
74059: LD_ADDR_VAR 0 4
74063: PUSH
74064: LD_EXP 120
74068: PUSH
74069: LD_VAR 0 1
74073: ARRAY
74074: PUSH
74075: LD_VAR 0 2
74079: ARRAY
74080: PUSH
74081: LD_INT 1
74083: ARRAY
74084: PPUSH
74085: LD_EXP 120
74089: PUSH
74090: LD_VAR 0 1
74094: ARRAY
74095: PUSH
74096: LD_VAR 0 2
74100: ARRAY
74101: PUSH
74102: LD_INT 2
74104: ARRAY
74105: PPUSH
74106: CALL_OW 428
74110: ST_TO_ADDR
// if not tmp then
74111: LD_VAR 0 4
74115: NOT
74116: IFFALSE 74120
// continue ;
74118: GO 74035
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
74120: LD_VAR 0 4
74124: PUSH
74125: LD_INT 81
74127: PUSH
74128: LD_VAR 0 3
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PPUSH
74137: CALL_OW 69
74141: IN
74142: PUSH
74143: LD_EXP 120
74147: PUSH
74148: LD_VAR 0 1
74152: ARRAY
74153: PUSH
74154: LD_VAR 0 2
74158: ARRAY
74159: PUSH
74160: LD_INT 1
74162: ARRAY
74163: PPUSH
74164: LD_EXP 120
74168: PUSH
74169: LD_VAR 0 1
74173: ARRAY
74174: PUSH
74175: LD_VAR 0 2
74179: ARRAY
74180: PUSH
74181: LD_INT 2
74183: ARRAY
74184: PPUSH
74185: CALL_OW 458
74189: AND
74190: IFFALSE 74284
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
74192: LD_EXP 120
74196: PUSH
74197: LD_VAR 0 1
74201: ARRAY
74202: PUSH
74203: LD_VAR 0 2
74207: ARRAY
74208: PUSH
74209: LD_INT 1
74211: ARRAY
74212: PPUSH
74213: LD_EXP 120
74217: PUSH
74218: LD_VAR 0 1
74222: ARRAY
74223: PUSH
74224: LD_VAR 0 2
74228: ARRAY
74229: PUSH
74230: LD_INT 2
74232: ARRAY
74233: PPUSH
74234: LD_VAR 0 3
74238: PPUSH
74239: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
74243: LD_ADDR_EXP 120
74247: PUSH
74248: LD_EXP 120
74252: PPUSH
74253: LD_VAR 0 1
74257: PPUSH
74258: LD_EXP 120
74262: PUSH
74263: LD_VAR 0 1
74267: ARRAY
74268: PPUSH
74269: LD_VAR 0 2
74273: PPUSH
74274: CALL_OW 3
74278: PPUSH
74279: CALL_OW 1
74283: ST_TO_ADDR
// end ; end ;
74284: GO 74035
74286: POP
74287: POP
// end ;
74288: GO 73953
74290: POP
74291: POP
// end ;
74292: PPOPN 4
74294: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
74295: LD_INT 0
74297: PPUSH
74298: PPUSH
// result := false ;
74299: LD_ADDR_VAR 0 4
74303: PUSH
74304: LD_INT 0
74306: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
74307: LD_VAR 0 1
74311: PPUSH
74312: CALL_OW 264
74316: PUSH
74317: LD_INT 81
74319: EQUAL
74320: NOT
74321: IFFALSE 74325
// exit ;
74323: GO 74565
// index := GetElementIndex ( minersList , unit ) ;
74325: LD_ADDR_VAR 0 5
74329: PUSH
74330: LD_EXP 119
74334: PPUSH
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL 19412 0 2
74344: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
74345: LD_EXP 120
74349: PUSH
74350: LD_VAR 0 5
74354: ARRAY
74355: PUSH
74356: LD_EXP 121
74360: GREATEREQUAL
74361: IFFALSE 74365
// exit ;
74363: GO 74565
// ComMoveXY ( unit , x , y ) ;
74365: LD_VAR 0 1
74369: PPUSH
74370: LD_VAR 0 2
74374: PPUSH
74375: LD_VAR 0 3
74379: PPUSH
74380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74384: LD_INT 35
74386: PPUSH
74387: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
74391: LD_VAR 0 1
74395: PPUSH
74396: LD_VAR 0 2
74400: PPUSH
74401: LD_VAR 0 3
74405: PPUSH
74406: CALL 50675 0 3
74410: NOT
74411: PUSH
74412: LD_VAR 0 1
74416: PPUSH
74417: CALL_OW 314
74421: AND
74422: IFFALSE 74426
// exit ;
74424: GO 74565
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
74426: LD_VAR 0 2
74430: PPUSH
74431: LD_VAR 0 3
74435: PPUSH
74436: CALL_OW 428
74440: PUSH
74441: LD_VAR 0 1
74445: EQUAL
74446: PUSH
74447: LD_VAR 0 1
74451: PPUSH
74452: CALL_OW 314
74456: NOT
74457: AND
74458: IFFALSE 74384
// PlaySoundXY ( x , y , PlantMine ) ;
74460: LD_VAR 0 2
74464: PPUSH
74465: LD_VAR 0 3
74469: PPUSH
74470: LD_STRING PlantMine
74472: PPUSH
74473: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
74477: LD_VAR 0 2
74481: PPUSH
74482: LD_VAR 0 3
74486: PPUSH
74487: LD_VAR 0 1
74491: PPUSH
74492: CALL_OW 255
74496: PPUSH
74497: LD_INT 0
74499: PPUSH
74500: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
74504: LD_ADDR_EXP 120
74508: PUSH
74509: LD_EXP 120
74513: PPUSH
74514: LD_VAR 0 5
74518: PUSH
74519: LD_EXP 120
74523: PUSH
74524: LD_VAR 0 5
74528: ARRAY
74529: PUSH
74530: LD_INT 1
74532: PLUS
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PPUSH
74538: LD_VAR 0 2
74542: PUSH
74543: LD_VAR 0 3
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PPUSH
74552: CALL 19627 0 3
74556: ST_TO_ADDR
// result := true ;
74557: LD_ADDR_VAR 0 4
74561: PUSH
74562: LD_INT 1
74564: ST_TO_ADDR
// end ;
74565: LD_VAR 0 4
74569: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
74570: LD_INT 0
74572: PPUSH
74573: PPUSH
74574: PPUSH
// if not unit in minersList then
74575: LD_VAR 0 1
74579: PUSH
74580: LD_EXP 119
74584: IN
74585: NOT
74586: IFFALSE 74590
// exit ;
74588: GO 74982
// index := GetElementIndex ( minersList , unit ) ;
74590: LD_ADDR_VAR 0 6
74594: PUSH
74595: LD_EXP 119
74599: PPUSH
74600: LD_VAR 0 1
74604: PPUSH
74605: CALL 19412 0 2
74609: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
74610: LD_ADDR_VAR 0 5
74614: PUSH
74615: DOUBLE
74616: LD_EXP 120
74620: PUSH
74621: LD_VAR 0 6
74625: ARRAY
74626: INC
74627: ST_TO_ADDR
74628: LD_INT 1
74630: PUSH
74631: FOR_DOWNTO
74632: IFFALSE 74793
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
74634: LD_EXP 120
74638: PUSH
74639: LD_VAR 0 6
74643: ARRAY
74644: PUSH
74645: LD_VAR 0 5
74649: ARRAY
74650: PUSH
74651: LD_INT 1
74653: ARRAY
74654: PUSH
74655: LD_VAR 0 2
74659: EQUAL
74660: PUSH
74661: LD_EXP 120
74665: PUSH
74666: LD_VAR 0 6
74670: ARRAY
74671: PUSH
74672: LD_VAR 0 5
74676: ARRAY
74677: PUSH
74678: LD_INT 2
74680: ARRAY
74681: PUSH
74682: LD_VAR 0 3
74686: EQUAL
74687: AND
74688: IFFALSE 74791
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
74690: LD_EXP 120
74694: PUSH
74695: LD_VAR 0 6
74699: ARRAY
74700: PUSH
74701: LD_VAR 0 5
74705: ARRAY
74706: PUSH
74707: LD_INT 1
74709: ARRAY
74710: PPUSH
74711: LD_EXP 120
74715: PUSH
74716: LD_VAR 0 6
74720: ARRAY
74721: PUSH
74722: LD_VAR 0 5
74726: ARRAY
74727: PUSH
74728: LD_INT 2
74730: ARRAY
74731: PPUSH
74732: LD_VAR 0 1
74736: PPUSH
74737: CALL_OW 255
74741: PPUSH
74742: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
74746: LD_ADDR_EXP 120
74750: PUSH
74751: LD_EXP 120
74755: PPUSH
74756: LD_VAR 0 6
74760: PPUSH
74761: LD_EXP 120
74765: PUSH
74766: LD_VAR 0 6
74770: ARRAY
74771: PPUSH
74772: LD_VAR 0 5
74776: PPUSH
74777: CALL_OW 3
74781: PPUSH
74782: CALL_OW 1
74786: ST_TO_ADDR
// exit ;
74787: POP
74788: POP
74789: GO 74982
// end ; end ;
74791: GO 74631
74793: POP
74794: POP
// for i := minerMinesList [ index ] downto 1 do
74795: LD_ADDR_VAR 0 5
74799: PUSH
74800: DOUBLE
74801: LD_EXP 120
74805: PUSH
74806: LD_VAR 0 6
74810: ARRAY
74811: INC
74812: ST_TO_ADDR
74813: LD_INT 1
74815: PUSH
74816: FOR_DOWNTO
74817: IFFALSE 74980
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
74819: LD_EXP 120
74823: PUSH
74824: LD_VAR 0 6
74828: ARRAY
74829: PUSH
74830: LD_VAR 0 5
74834: ARRAY
74835: PUSH
74836: LD_INT 1
74838: ARRAY
74839: PPUSH
74840: LD_EXP 120
74844: PUSH
74845: LD_VAR 0 6
74849: ARRAY
74850: PUSH
74851: LD_VAR 0 5
74855: ARRAY
74856: PUSH
74857: LD_INT 2
74859: ARRAY
74860: PPUSH
74861: LD_VAR 0 2
74865: PPUSH
74866: LD_VAR 0 3
74870: PPUSH
74871: CALL_OW 298
74875: PUSH
74876: LD_INT 6
74878: LESS
74879: IFFALSE 74978
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
74881: LD_EXP 120
74885: PUSH
74886: LD_VAR 0 6
74890: ARRAY
74891: PUSH
74892: LD_VAR 0 5
74896: ARRAY
74897: PUSH
74898: LD_INT 1
74900: ARRAY
74901: PPUSH
74902: LD_EXP 120
74906: PUSH
74907: LD_VAR 0 6
74911: ARRAY
74912: PUSH
74913: LD_VAR 0 5
74917: ARRAY
74918: PUSH
74919: LD_INT 2
74921: ARRAY
74922: PPUSH
74923: LD_VAR 0 1
74927: PPUSH
74928: CALL_OW 255
74932: PPUSH
74933: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
74937: LD_ADDR_EXP 120
74941: PUSH
74942: LD_EXP 120
74946: PPUSH
74947: LD_VAR 0 6
74951: PPUSH
74952: LD_EXP 120
74956: PUSH
74957: LD_VAR 0 6
74961: ARRAY
74962: PPUSH
74963: LD_VAR 0 5
74967: PPUSH
74968: CALL_OW 3
74972: PPUSH
74973: CALL_OW 1
74977: ST_TO_ADDR
// end ; end ;
74978: GO 74816
74980: POP
74981: POP
// end ;
74982: LD_VAR 0 4
74986: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
74987: LD_INT 0
74989: PPUSH
74990: PPUSH
74991: PPUSH
74992: PPUSH
74993: PPUSH
74994: PPUSH
74995: PPUSH
74996: PPUSH
74997: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
74998: LD_VAR 0 1
75002: PPUSH
75003: CALL_OW 264
75007: PUSH
75008: LD_INT 81
75010: EQUAL
75011: NOT
75012: PUSH
75013: LD_VAR 0 1
75017: PUSH
75018: LD_EXP 119
75022: IN
75023: NOT
75024: OR
75025: IFFALSE 75029
// exit ;
75027: GO 75351
// index := GetElementIndex ( minersList , unit ) ;
75029: LD_ADDR_VAR 0 6
75033: PUSH
75034: LD_EXP 119
75038: PPUSH
75039: LD_VAR 0 1
75043: PPUSH
75044: CALL 19412 0 2
75048: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
75049: LD_ADDR_VAR 0 8
75053: PUSH
75054: LD_EXP 121
75058: PUSH
75059: LD_EXP 120
75063: PUSH
75064: LD_VAR 0 6
75068: ARRAY
75069: MINUS
75070: ST_TO_ADDR
// if not minesFreeAmount then
75071: LD_VAR 0 8
75075: NOT
75076: IFFALSE 75080
// exit ;
75078: GO 75351
// tmp := [ ] ;
75080: LD_ADDR_VAR 0 7
75084: PUSH
75085: EMPTY
75086: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
75087: LD_ADDR_VAR 0 5
75091: PUSH
75092: DOUBLE
75093: LD_INT 1
75095: DEC
75096: ST_TO_ADDR
75097: LD_VAR 0 8
75101: PUSH
75102: FOR_TO
75103: IFFALSE 75298
// begin _d := rand ( 0 , 5 ) ;
75105: LD_ADDR_VAR 0 11
75109: PUSH
75110: LD_INT 0
75112: PPUSH
75113: LD_INT 5
75115: PPUSH
75116: CALL_OW 12
75120: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
75121: LD_ADDR_VAR 0 12
75125: PUSH
75126: LD_INT 2
75128: PPUSH
75129: LD_INT 6
75131: PPUSH
75132: CALL_OW 12
75136: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
75137: LD_ADDR_VAR 0 9
75141: PUSH
75142: LD_VAR 0 2
75146: PPUSH
75147: LD_VAR 0 11
75151: PPUSH
75152: LD_VAR 0 12
75156: PPUSH
75157: CALL_OW 272
75161: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
75162: LD_ADDR_VAR 0 10
75166: PUSH
75167: LD_VAR 0 3
75171: PPUSH
75172: LD_VAR 0 11
75176: PPUSH
75177: LD_VAR 0 12
75181: PPUSH
75182: CALL_OW 273
75186: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
75187: LD_VAR 0 9
75191: PPUSH
75192: LD_VAR 0 10
75196: PPUSH
75197: CALL_OW 488
75201: PUSH
75202: LD_VAR 0 9
75206: PUSH
75207: LD_VAR 0 10
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: PUSH
75216: LD_VAR 0 7
75220: IN
75221: NOT
75222: AND
75223: PUSH
75224: LD_VAR 0 9
75228: PPUSH
75229: LD_VAR 0 10
75233: PPUSH
75234: CALL_OW 458
75238: NOT
75239: AND
75240: IFFALSE 75282
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
75242: LD_ADDR_VAR 0 7
75246: PUSH
75247: LD_VAR 0 7
75251: PPUSH
75252: LD_VAR 0 7
75256: PUSH
75257: LD_INT 1
75259: PLUS
75260: PPUSH
75261: LD_VAR 0 9
75265: PUSH
75266: LD_VAR 0 10
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PPUSH
75275: CALL_OW 1
75279: ST_TO_ADDR
75280: GO 75296
// i := i - 1 ;
75282: LD_ADDR_VAR 0 5
75286: PUSH
75287: LD_VAR 0 5
75291: PUSH
75292: LD_INT 1
75294: MINUS
75295: ST_TO_ADDR
// end ;
75296: GO 75102
75298: POP
75299: POP
// for i in tmp do
75300: LD_ADDR_VAR 0 5
75304: PUSH
75305: LD_VAR 0 7
75309: PUSH
75310: FOR_IN
75311: IFFALSE 75349
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
75313: LD_VAR 0 1
75317: PPUSH
75318: LD_VAR 0 5
75322: PUSH
75323: LD_INT 1
75325: ARRAY
75326: PPUSH
75327: LD_VAR 0 5
75331: PUSH
75332: LD_INT 2
75334: ARRAY
75335: PPUSH
75336: CALL 74295 0 3
75340: NOT
75341: IFFALSE 75347
// exit ;
75343: POP
75344: POP
75345: GO 75351
75347: GO 75310
75349: POP
75350: POP
// end ;
75351: LD_VAR 0 4
75355: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
75356: LD_INT 0
75358: PPUSH
75359: PPUSH
75360: PPUSH
75361: PPUSH
75362: PPUSH
75363: PPUSH
75364: PPUSH
// if not GetClass ( unit ) = class_sniper then
75365: LD_VAR 0 1
75369: PPUSH
75370: CALL_OW 257
75374: PUSH
75375: LD_INT 5
75377: EQUAL
75378: NOT
75379: IFFALSE 75383
// exit ;
75381: GO 75771
// dist := 8 ;
75383: LD_ADDR_VAR 0 5
75387: PUSH
75388: LD_INT 8
75390: ST_TO_ADDR
// viewRange := 12 ;
75391: LD_ADDR_VAR 0 7
75395: PUSH
75396: LD_INT 12
75398: ST_TO_ADDR
// side := GetSide ( unit ) ;
75399: LD_ADDR_VAR 0 6
75403: PUSH
75404: LD_VAR 0 1
75408: PPUSH
75409: CALL_OW 255
75413: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
75414: LD_INT 61
75416: PPUSH
75417: LD_VAR 0 6
75421: PPUSH
75422: CALL_OW 321
75426: PUSH
75427: LD_INT 2
75429: EQUAL
75430: IFFALSE 75440
// viewRange := 16 ;
75432: LD_ADDR_VAR 0 7
75436: PUSH
75437: LD_INT 16
75439: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
75440: LD_VAR 0 1
75444: PPUSH
75445: LD_VAR 0 2
75449: PPUSH
75450: LD_VAR 0 3
75454: PPUSH
75455: CALL_OW 297
75459: PUSH
75460: LD_VAR 0 5
75464: GREATER
75465: IFFALSE 75544
// begin ComMoveXY ( unit , x , y ) ;
75467: LD_VAR 0 1
75471: PPUSH
75472: LD_VAR 0 2
75476: PPUSH
75477: LD_VAR 0 3
75481: PPUSH
75482: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75486: LD_INT 35
75488: PPUSH
75489: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
75493: LD_VAR 0 1
75497: PPUSH
75498: LD_VAR 0 2
75502: PPUSH
75503: LD_VAR 0 3
75507: PPUSH
75508: CALL 50675 0 3
75512: NOT
75513: IFFALSE 75517
// exit ;
75515: GO 75771
// until GetDistUnitXY ( unit , x , y ) < dist ;
75517: LD_VAR 0 1
75521: PPUSH
75522: LD_VAR 0 2
75526: PPUSH
75527: LD_VAR 0 3
75531: PPUSH
75532: CALL_OW 297
75536: PUSH
75537: LD_VAR 0 5
75541: LESS
75542: IFFALSE 75486
// end ; ComTurnXY ( unit , x , y ) ;
75544: LD_VAR 0 1
75548: PPUSH
75549: LD_VAR 0 2
75553: PPUSH
75554: LD_VAR 0 3
75558: PPUSH
75559: CALL_OW 118
// wait ( 5 ) ;
75563: LD_INT 5
75565: PPUSH
75566: CALL_OW 67
// _d := GetDir ( unit ) ;
75570: LD_ADDR_VAR 0 10
75574: PUSH
75575: LD_VAR 0 1
75579: PPUSH
75580: CALL_OW 254
75584: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
75585: LD_ADDR_VAR 0 8
75589: PUSH
75590: LD_VAR 0 1
75594: PPUSH
75595: CALL_OW 250
75599: PPUSH
75600: LD_VAR 0 10
75604: PPUSH
75605: LD_VAR 0 5
75609: PPUSH
75610: CALL_OW 272
75614: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
75615: LD_ADDR_VAR 0 9
75619: PUSH
75620: LD_VAR 0 1
75624: PPUSH
75625: CALL_OW 251
75629: PPUSH
75630: LD_VAR 0 10
75634: PPUSH
75635: LD_VAR 0 5
75639: PPUSH
75640: CALL_OW 273
75644: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75645: LD_VAR 0 8
75649: PPUSH
75650: LD_VAR 0 9
75654: PPUSH
75655: CALL_OW 488
75659: NOT
75660: IFFALSE 75664
// exit ;
75662: GO 75771
// ComAnimCustom ( unit , 1 ) ;
75664: LD_VAR 0 1
75668: PPUSH
75669: LD_INT 1
75671: PPUSH
75672: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
75676: LD_VAR 0 8
75680: PPUSH
75681: LD_VAR 0 9
75685: PPUSH
75686: LD_VAR 0 6
75690: PPUSH
75691: LD_VAR 0 7
75695: PPUSH
75696: CALL_OW 330
// repeat wait ( 1 ) ;
75700: LD_INT 1
75702: PPUSH
75703: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
75707: LD_VAR 0 1
75711: PPUSH
75712: CALL_OW 316
75716: PUSH
75717: LD_VAR 0 1
75721: PPUSH
75722: CALL_OW 314
75726: OR
75727: PUSH
75728: LD_VAR 0 1
75732: PPUSH
75733: CALL_OW 302
75737: NOT
75738: OR
75739: PUSH
75740: LD_VAR 0 1
75744: PPUSH
75745: CALL_OW 301
75749: OR
75750: IFFALSE 75700
// RemoveSeeing ( _x , _y , side ) ;
75752: LD_VAR 0 8
75756: PPUSH
75757: LD_VAR 0 9
75761: PPUSH
75762: LD_VAR 0 6
75766: PPUSH
75767: CALL_OW 331
// end ;
75771: LD_VAR 0 4
75775: RET
