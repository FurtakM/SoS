// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20290 0 0
// PrepareRussian ;
  12: CALL 2018 0 0
// PrepareArabian ;
  16: CALL 438 0 0
// Action ;
  20: CALL 3761 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// enable ( entranceEvent ) ;
 427: LD_INT 1
 429: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 430: LD_INT 2
 432: DISABLE_MARKED
// end ; end_of_file
 433: LD_VAR 0 1
 437: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side := 4 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 4
 449: ST_TO_ADDR
// uc_nation := 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 458: LD_ADDR_EXP 57
 462: PUSH
 463: LD_STRING 07_Americans
 465: PPUSH
 466: CALL_OW 31
 470: ST_TO_ADDR
// if americanSquad < 5 then
 471: LD_EXP 57
 475: PUSH
 476: LD_INT 5
 478: LESS
 479: IFFALSE 573
// begin if not americanSquad then
 481: LD_EXP 57
 485: NOT
 486: IFFALSE 495
// americanSquad := [ ] ;
 488: LD_ADDR_EXP 57
 492: PUSH
 493: EMPTY
 494: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 495: LD_ADDR_VAR 0 2
 499: PUSH
 500: DOUBLE
 501: LD_EXP 57
 505: DEC
 506: ST_TO_ADDR
 507: LD_INT 2
 509: PUSH
 510: LD_INT 3
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 4
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PUSH
 531: FOR_TO
 532: IFFALSE 569
// begin PrepareHuman ( false , 2 , 6 ) ;
 534: LD_INT 0
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 6
 542: PPUSH
 543: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 547: LD_ADDR_EXP 57
 551: PUSH
 552: LD_EXP 57
 556: PPUSH
 557: CALL_OW 44
 561: PPUSH
 562: CALL 66186 0 2
 566: ST_TO_ADDR
// end ;
 567: GO 531
 569: POP
 570: POP
// end else
 571: GO 620
// for i := Count ( americanSquad ) downto 5 do
 573: LD_ADDR_VAR 0 2
 577: PUSH
 578: DOUBLE
 579: LD_EXP 57
 583: PPUSH
 584: CALL 30967 0 1
 588: INC
 589: ST_TO_ADDR
 590: LD_INT 5
 592: PUSH
 593: FOR_DOWNTO
 594: IFFALSE 618
// americanSquad := Delete ( americanSquad , i ) ;
 596: LD_ADDR_EXP 57
 600: PUSH
 601: LD_EXP 57
 605: PPUSH
 606: LD_VAR 0 2
 610: PPUSH
 611: CALL_OW 3
 615: ST_TO_ADDR
 616: GO 593
 618: POP
 619: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 620: LD_ADDR_EXP 59
 624: PUSH
 625: LD_STRING UsCommander
 627: PPUSH
 628: LD_EXP 1
 632: NOT
 633: PPUSH
 634: LD_STRING 07_
 636: PPUSH
 637: CALL 28865 0 3
 641: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 642: LD_INT 1
 644: PPUSH
 645: LD_INT 6
 647: PPUSH
 648: CALL_OW 381
// Jerry := CreateHuman ;
 652: LD_ADDR_EXP 60
 656: PUSH
 657: CALL_OW 44
 661: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 662: LD_EXP 60
 666: PPUSH
 667: LD_INT 33
 669: PPUSH
 670: CALL_OW 336
// if not Doug then
 674: LD_EXP 59
 678: NOT
 679: IFFALSE 701
// begin PrepareSoldier ( sex_male , 6 ) ;
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 6
 686: PPUSH
 687: CALL_OW 381
// Doug := CreateHuman ;
 691: LD_ADDR_EXP 59
 695: PUSH
 696: CALL_OW 44
 700: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 701: LD_EXP 59
 705: PPUSH
 706: LD_INT 33
 708: PPUSH
 709: CALL_OW 336
// if johnnySaved or debug then
 713: LD_EXP 3
 717: PUSH
 718: LD_EXP 1
 722: OR
 723: IFFALSE 750
// begin Harris := NewCharacter ( Harris ) ;
 725: LD_ADDR_EXP 58
 729: PUSH
 730: LD_STRING Harris
 732: PPUSH
 733: CALL_OW 25
 737: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 738: LD_EXP 58
 742: PPUSH
 743: LD_INT 33
 745: PPUSH
 746: CALL_OW 336
// end ; uc_side := 2 ;
 750: LD_ADDR_OWVAR 20
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// uc_nation := 2 ;
 758: LD_ADDR_OWVAR 21
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 766: LD_ADDR_EXP 45
 770: PUSH
 771: LD_STRING Heike
 773: PPUSH
 774: LD_EXP 1
 778: NOT
 779: PPUSH
 780: LD_EXP 2
 784: PPUSH
 785: CALL 28865 0 3
 789: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 790: LD_ADDR_EXP 48
 794: PUSH
 795: LD_STRING Ibrahim
 797: PPUSH
 798: LD_EXP 1
 802: NOT
 803: PPUSH
 804: LD_EXP 2
 808: PPUSH
 809: CALL 28865 0 3
 813: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 814: LD_ADDR_EXP 46
 818: PUSH
 819: LD_STRING Givi
 821: PPUSH
 822: LD_EXP 1
 826: NOT
 827: PPUSH
 828: LD_EXP 2
 832: PPUSH
 833: CALL 28865 0 3
 837: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING Kamil
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 2
 856: PPUSH
 857: CALL 28865 0 3
 861: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 862: LD_ADDR_EXP 50
 866: PUSH
 867: LD_STRING Kaia
 869: PPUSH
 870: LD_EXP 1
 874: NOT
 875: PPUSH
 876: LD_EXP 2
 880: PPUSH
 881: CALL 28865 0 3
 885: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 886: LD_ADDR_EXP 51
 890: PUSH
 891: LD_STRING Sophia
 893: PPUSH
 894: LD_EXP 1
 898: NOT
 899: PPUSH
 900: LD_EXP 2
 904: PPUSH
 905: CALL 28865 0 3
 909: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 910: LD_ADDR_EXP 52
 914: PUSH
 915: LD_STRING Markov
 917: PPUSH
 918: LD_EXP 1
 922: NOT
 923: PPUSH
 924: LD_EXP 2
 928: PPUSH
 929: CALL 28865 0 3
 933: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 934: LD_ADDR_EXP 55
 938: PUSH
 939: LD_STRING Aviradze
 941: PPUSH
 942: LD_EXP 1
 946: NOT
 947: PPUSH
 948: LD_EXP 2
 952: PPUSH
 953: CALL 28865 0 3
 957: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 958: LD_ADDR_EXP 54
 962: PUSH
 963: LD_STRING Kurt
 965: PPUSH
 966: LD_EXP 1
 970: NOT
 971: PPUSH
 972: LD_EXP 2
 976: PPUSH
 977: CALL 28865 0 3
 981: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 982: LD_ADDR_EXP 47
 986: PUSH
 987: LD_STRING Mike
 989: PPUSH
 990: LD_EXP 1
 994: NOT
 995: PPUSH
 996: LD_EXP 2
1000: PPUSH
1001: CALL 28865 0 3
1005: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1006: LD_ADDR_EXP 53
1010: PUSH
1011: LD_STRING Olaf
1013: PPUSH
1014: LD_EXP 1
1018: NOT
1019: PPUSH
1020: LD_EXP 2
1024: PPUSH
1025: CALL 28865 0 3
1029: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1030: LD_ADDR_EXP 56
1034: PUSH
1035: LD_STRING 07_others
1037: PPUSH
1038: CALL_OW 31
1042: ST_TO_ADDR
// end ;
1043: LD_VAR 0 1
1047: RET
// export function PrepareGame ; var i ; begin
1048: LD_INT 0
1050: PPUSH
1051: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1052: LD_EXP 45
1056: PPUSH
1057: LD_INT 23
1059: PPUSH
1060: CALL_OW 52
// if Givi then
1064: LD_EXP 46
1068: IFFALSE 1106
// begin SetSide ( Givi , 5 ) ;
1070: LD_EXP 46
1074: PPUSH
1075: LD_INT 5
1077: PPUSH
1078: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1082: LD_EXP 46
1086: PPUSH
1087: LD_INT 9
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// ComHold ( Givi ) ;
1097: LD_EXP 46
1101: PPUSH
1102: CALL_OW 140
// end ; if Markov then
1106: LD_EXP 52
1110: IFFALSE 1148
// begin SetSide ( Markov , 5 ) ;
1112: LD_EXP 52
1116: PPUSH
1117: LD_INT 5
1119: PPUSH
1120: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1124: LD_EXP 52
1128: PPUSH
1129: LD_INT 3
1131: PPUSH
1132: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1136: LD_EXP 52
1140: PPUSH
1141: LD_INT 61
1143: PPUSH
1144: CALL_OW 52
// end ; if Mike then
1148: LD_EXP 47
1152: IFFALSE 1190
// begin SetSide ( Mike , 5 ) ;
1154: LD_EXP 47
1158: PPUSH
1159: LD_INT 5
1161: PPUSH
1162: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1166: LD_EXP 47
1170: PPUSH
1171: LD_INT 17
1173: PPUSH
1174: LD_INT 0
1176: PPUSH
1177: CALL_OW 49
// ComHold ( Mike ) ;
1181: LD_EXP 47
1185: PPUSH
1186: CALL_OW 140
// end ; if Olaf then
1190: LD_EXP 53
1194: IFFALSE 1235
// begin SetSide ( Olaf , 5 ) ;
1196: LD_EXP 53
1200: PPUSH
1201: LD_INT 5
1203: PPUSH
1204: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1208: LD_EXP 53
1212: PPUSH
1213: LD_INT 16
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1223: LD_EXP 53
1227: PPUSH
1228: LD_INT 3
1230: PPUSH
1231: CALL 69338 0 2
// end ; if Kamil then
1235: LD_EXP 49
1239: IFFALSE 1265
// begin SetSide ( Kamil , 5 ) ;
1241: LD_EXP 49
1245: PPUSH
1246: LD_INT 5
1248: PPUSH
1249: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1253: LD_EXP 49
1257: PPUSH
1258: LD_INT 109
1260: PPUSH
1261: CALL_OW 52
// end ; if Kurt then
1265: LD_EXP 54
1269: IFFALSE 1295
// begin SetSide ( Kurt , 5 ) ;
1271: LD_EXP 54
1275: PPUSH
1276: LD_INT 5
1278: PPUSH
1279: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1283: LD_EXP 54
1287: PPUSH
1288: LD_INT 169
1290: PPUSH
1291: CALL_OW 52
// end ; if Kaia then
1295: LD_EXP 50
1299: IFFALSE 1325
// begin SetSide ( Kaia , 5 ) ;
1301: LD_EXP 50
1305: PPUSH
1306: LD_INT 5
1308: PPUSH
1309: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1313: LD_EXP 50
1317: PPUSH
1318: LD_INT 147
1320: PPUSH
1321: CALL_OW 52
// end ; if Sophia then
1325: LD_EXP 51
1329: IFFALSE 1370
// begin SetSide ( Sophia , 5 ) ;
1331: LD_EXP 51
1335: PPUSH
1336: LD_INT 5
1338: PPUSH
1339: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1343: LD_EXP 51
1347: PPUSH
1348: LD_INT 142
1350: PPUSH
1351: LD_INT 96
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 48
// ComHold ( Sophia ) ;
1361: LD_EXP 51
1365: PPUSH
1366: CALL_OW 140
// end ; if Harris then
1370: LD_EXP 58
1374: IFFALSE 1412
// begin SetSide ( Harris , 4 ) ;
1376: LD_EXP 58
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1388: LD_EXP 58
1392: PPUSH
1393: LD_INT 20
1395: PPUSH
1396: LD_INT 0
1398: PPUSH
1399: CALL_OW 49
// ComHold ( i ) ;
1403: LD_VAR 0 2
1407: PPUSH
1408: CALL_OW 140
// end ; if Doug then
1412: LD_EXP 59
1416: IFFALSE 1442
// begin SetSide ( Doug , 4 ) ;
1418: LD_EXP 59
1422: PPUSH
1423: LD_INT 4
1425: PPUSH
1426: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1430: LD_EXP 59
1434: PPUSH
1435: LD_INT 106
1437: PPUSH
1438: CALL_OW 52
// end ; if Aviradze then
1442: LD_EXP 55
1446: IFFALSE 1472
// begin SetSide ( Aviradze , 5 ) ;
1448: LD_EXP 55
1452: PPUSH
1453: LD_INT 5
1455: PPUSH
1456: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1460: LD_EXP 55
1464: PPUSH
1465: LD_INT 119
1467: PPUSH
1468: CALL_OW 52
// end ; if Ibrahim then
1472: LD_EXP 48
1476: IFFALSE 1502
// begin SetSide ( Ibrahim , 5 ) ;
1478: LD_EXP 48
1482: PPUSH
1483: LD_INT 5
1485: PPUSH
1486: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1490: LD_EXP 48
1494: PPUSH
1495: LD_INT 119
1497: PPUSH
1498: CALL_OW 52
// end ; if Jerry then
1502: LD_EXP 60
1506: IFFALSE 1547
// begin SetSide ( Jerry , 4 ) ;
1508: LD_EXP 60
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1520: LD_EXP 60
1524: PPUSH
1525: LD_INT 119
1527: PPUSH
1528: LD_INT 59
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 48
// ComHold ( Jerry ) ;
1538: LD_EXP 60
1542: PPUSH
1543: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1547: LD_EXP 64
1551: PPUSH
1552: LD_INT 119
1554: PPUSH
1555: CALL_OW 52
// for i in americanSquad do
1559: LD_ADDR_VAR 0 2
1563: PUSH
1564: LD_EXP 57
1568: PUSH
1569: FOR_IN
1570: IFFALSE 1598
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 21
1579: PPUSH
1580: LD_INT 0
1582: PPUSH
1583: CALL_OW 49
// ComHold ( i ) ;
1587: LD_VAR 0 2
1591: PPUSH
1592: CALL_OW 140
// end ;
1596: GO 1569
1598: POP
1599: POP
// for i in heikeSecondSquad do
1600: LD_ADDR_VAR 0 2
1604: PUSH
1605: LD_EXP 56
1609: PUSH
1610: FOR_IN
1611: IFFALSE 1651
// begin SetSide ( i , 5 ) ;
1613: LD_VAR 0 2
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1625: LD_VAR 0 2
1629: PPUSH
1630: LD_INT 22
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// ComHold ( i ) ;
1640: LD_VAR 0 2
1644: PPUSH
1645: CALL_OW 140
// end ;
1649: GO 1610
1651: POP
1652: POP
// if not hasVodka then
1653: LD_EXP 4
1657: NOT
1658: IFFALSE 1717
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1660: LD_ADDR_VAR 0 2
1664: PUSH
1665: LD_INT 2
1667: PUSH
1668: LD_INT 22
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 22
1680: PUSH
1681: LD_INT 5
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL_OW 69
1697: PUSH
1698: FOR_IN
1699: IFFALSE 1715
// SetLives ( i , 500 ) ;
1701: LD_VAR 0 2
1705: PPUSH
1706: LD_INT 500
1708: PPUSH
1709: CALL_OW 234
1713: GO 1698
1715: POP
1716: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: LD_INT 22
1724: PUSH
1725: LD_INT 4
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: FOR_IN
1738: IFFALSE 1754
// SetLives ( i , 500 ) ;
1740: LD_VAR 0 2
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: CALL_OW 234
1752: GO 1737
1754: POP
1755: POP
// end ;
1756: LD_VAR 0 1
1760: RET
// export function SetClassKaiaRevolver ; begin
1761: LD_INT 0
1763: PPUSH
// if not IsOk ( Kaia ) then
1764: LD_EXP 50
1768: PPUSH
1769: CALL_OW 302
1773: NOT
1774: IFFALSE 1778
// exit ;
1776: GO 1797
// SetClass ( Kaia , class_revolver ) ;
1778: LD_EXP 50
1782: PPUSH
1783: LD_INT 34
1785: PPUSH
1786: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1790: LD_STRING ACH_REVOLVER
1792: PPUSH
1793: CALL_OW 543
// end ;
1797: LD_VAR 0 1
1801: RET
// export function SpawnHeikeAsRussian ; begin
1802: LD_INT 0
1804: PPUSH
// RemoveUnit ( Heike ) ;
1805: LD_EXP 45
1809: PPUSH
1810: CALL_OW 64
// heikeTmp := Heike ;
1814: LD_ADDR_EXP 61
1818: PUSH
1819: LD_EXP 45
1823: ST_TO_ADDR
// uc_side := 2 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 2
1831: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1832: LD_ADDR_EXP 45
1836: PUSH
1837: LD_STRING HeikeRu
1839: PPUSH
1840: CALL_OW 25
1844: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1845: LD_EXP 61
1849: PPUSH
1850: LD_EXP 45
1854: PPUSH
1855: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1859: LD_EXP 45
1863: PPUSH
1864: LD_INT 165
1866: PPUSH
1867: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1871: LD_EXP 45
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 336
// heikeAsRussian := true ;
1883: LD_ADDR_EXP 27
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1891: LD_STRING M1-laundry-out
1893: PPUSH
1894: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1898: LD_STRING ACH_HEIKERU
1900: PPUSH
1901: CALL_OW 543
// end ;
1905: LD_VAR 0 1
1909: RET
// export function SpawnGiviAsRussian ; begin
1910: LD_INT 0
1912: PPUSH
// RemoveUnit ( Givi ) ;
1913: LD_EXP 46
1917: PPUSH
1918: CALL_OW 64
// giviTmp := Givi ;
1922: LD_ADDR_EXP 62
1926: PUSH
1927: LD_EXP 46
1931: ST_TO_ADDR
// uc_side := 2 ;
1932: LD_ADDR_OWVAR 20
1936: PUSH
1937: LD_INT 2
1939: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1940: LD_ADDR_EXP 46
1944: PUSH
1945: LD_STRING GiviRu
1947: PPUSH
1948: CALL_OW 25
1952: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1953: LD_EXP 62
1957: PPUSH
1958: LD_EXP 46
1962: PPUSH
1963: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1967: LD_EXP 46
1971: PPUSH
1972: LD_INT 165
1974: PPUSH
1975: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1979: LD_EXP 46
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: CALL_OW 336
// giviAsRussian := true ;
1991: LD_ADDR_EXP 28
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1999: LD_STRING M1-laundry-out
2001: PPUSH
2002: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2006: LD_STRING ACH_GIVIRU
2008: PPUSH
2009: CALL_OW 543
// end ; end_of_file
2013: LD_VAR 0 1
2017: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2018: LD_INT 0
2020: PPUSH
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
// uc_side := 3 ;
2025: LD_ADDR_OWVAR 20
2029: PUSH
2030: LD_INT 3
2032: ST_TO_ADDR
// uc_nation := 3 ;
2033: LD_ADDR_OWVAR 21
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2041: LD_INT 192
2043: PPUSH
2044: LD_STRING kitchen
2046: PPUSH
2047: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2051: LD_INT 165
2053: PPUSH
2054: LD_STRING laundry
2056: PPUSH
2057: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2061: LD_INT 54
2063: PPUSH
2064: LD_STRING adminSection
2066: PPUSH
2067: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 3
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2108
// SetBLevel ( i , 7 ) ;
2094: LD_VAR 0 2
2098: PPUSH
2099: LD_INT 7
2101: PPUSH
2102: CALL_OW 241
2106: GO 2091
2108: POP
2109: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2110: LD_ADDR_VAR 0 2
2114: PUSH
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 2
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 30
2140: PUSH
2141: LD_INT 1
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL_OW 69
2161: PUSH
2162: FOR_IN
2163: IFFALSE 2227
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2165: LD_VAR 0 2
2169: PPUSH
2170: CALL_OW 274
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 1000
2180: PPUSH
2181: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2185: LD_VAR 0 2
2189: PPUSH
2190: CALL_OW 274
2194: PPUSH
2195: LD_INT 2
2197: PPUSH
2198: LD_INT 1000
2200: PPUSH
2201: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: CALL_OW 274
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 100
2220: PPUSH
2221: CALL_OW 277
// end ;
2225: GO 2162
2227: POP
2228: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2229: LD_ADDR_VAR 0 2
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 3
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 30
2246: PUSH
2247: LD_INT 32
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 69
2262: PUSH
2263: FOR_IN
2264: IFFALSE 2298
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2266: LD_INT 0
2268: PPUSH
2269: LD_INT 5
2271: PUSH
2272: LD_OWVAR 67
2276: PLUS
2277: PPUSH
2278: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2282: CALL_OW 44
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: CALL_OW 52
// end ;
2296: GO 2263
2298: POP
2299: POP
// for i := 1 to 2 do
2300: LD_ADDR_VAR 0 2
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 2
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2366
// begin PrepareMechanic ( false , 8 ) ;
2316: LD_INT 0
2318: PPUSH
2319: LD_INT 8
2321: PPUSH
2322: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2326: LD_ADDR_EXP 66
2330: PUSH
2331: LD_EXP 66
2335: PPUSH
2336: CALL_OW 44
2340: PPUSH
2341: CALL 66186 0 2
2345: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2346: LD_EXP 66
2350: PUSH
2351: LD_EXP 66
2355: ARRAY
2356: PPUSH
2357: LD_INT 61
2359: PPUSH
2360: CALL_OW 52
// end ;
2364: GO 2313
2366: POP
2367: POP
// PrepareMechanic ( sex_male , 8 ) ;
2368: LD_INT 1
2370: PPUSH
2371: LD_INT 8
2373: PPUSH
2374: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2378: LD_ADDR_EXP 67
2382: PUSH
2383: LD_EXP 67
2387: PPUSH
2388: CALL_OW 44
2392: PPUSH
2393: CALL 66186 0 2
2397: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2398: LD_EXP 67
2402: PUSH
2403: LD_EXP 67
2407: ARRAY
2408: PPUSH
2409: LD_INT 196
2411: PPUSH
2412: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 383
// hc_name := Stiepan Simonov ;
2426: LD_ADDR_OWVAR 26
2430: PUSH
2431: LD_STRING Stiepan Simonov
2433: ST_TO_ADDR
// Stiopa := CreateHuman ;
2434: LD_ADDR_EXP 68
2438: PUSH
2439: CALL_OW 44
2443: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2444: LD_INT 2
2446: PPUSH
2447: LD_INT 8
2449: PPUSH
2450: CALL_OW 383
// hc_name := Laura Dragunov ;
2454: LD_ADDR_OWVAR 26
2458: PUSH
2459: LD_STRING Laura Dragunov
2461: ST_TO_ADDR
// Laura := CreateHuman ;
2462: LD_ADDR_EXP 69
2466: PUSH
2467: CALL_OW 44
2471: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2472: LD_EXP 69
2476: PPUSH
2477: LD_INT 196
2479: PPUSH
2480: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 8
2489: PPUSH
2490: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2494: LD_ADDR_EXP 66
2498: PUSH
2499: LD_EXP 66
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 44
2511: PPUSH
2512: CALL_OW 2
2516: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2517: LD_EXP 66
2521: PUSH
2522: LD_INT 1
2524: ARRAY
2525: PPUSH
2526: LD_INT 61
2528: PPUSH
2529: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 8
2538: PPUSH
2539: CALL_OW 381
// hc_name := Pavel Muchin ;
2543: LD_ADDR_OWVAR 26
2547: PUSH
2548: LD_STRING Pavel Muchin
2550: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2551: LD_ADDR_OWVAR 29
2555: PUSH
2556: LD_INT 13
2558: PUSH
2559: LD_INT 13
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2566: LD_ADDR_EXP 65
2570: PUSH
2571: CALL_OW 44
2575: ST_TO_ADDR
// InitHC_All ( ) ;
2576: CALL_OW 584
// if Difficulty > 1 then
2580: LD_OWVAR 67
2584: PUSH
2585: LD_INT 1
2587: GREATER
2588: IFFALSE 2708
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 3
2602: PUSH
2603: LD_INT 4
2605: PUSH
2606: LD_INT 5
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: PUSH
2614: LD_OWVAR 67
2618: PUSH
2619: LD_INT 1
2621: PLUS
2622: ARRAY
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2706
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2627: LD_INT 0
2629: PPUSH
2630: LD_INT 5
2632: PUSH
2633: LD_INT 6
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: PUSH
2644: LD_OWVAR 67
2648: PUSH
2649: LD_INT 1
2651: PLUS
2652: ARRAY
2653: PPUSH
2654: CALL_OW 381
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 62
2675: PUSH
2676: LD_INT 63
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 2
2690: MOD
2691: PUSH
2692: LD_INT 1
2694: PLUS
2695: ARRAY
2696: PPUSH
2697: LD_INT 0
2699: PPUSH
2700: CALL_OW 49
// end ;
2704: GO 2624
2706: POP
2707: POP
// end ; uc_side := 6 ;
2708: LD_ADDR_OWVAR 20
2712: PUSH
2713: LD_INT 6
2715: ST_TO_ADDR
// uc_nation := 3 ;
2716: LD_ADDR_OWVAR 21
2720: PUSH
2721: LD_INT 3
2723: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2724: LD_ADDR_VAR 0 5
2728: PUSH
2729: LD_INT 14
2731: PUSH
2732: LD_INT 15
2734: PUSH
2735: LD_INT 48
2737: PUSH
2738: LD_INT 24
2740: PUSH
2741: LD_INT 149
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// for i in tmp do
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: PUSH
2761: FOR_IN
2762: IFFALSE 2810
// begin for j := 1 to 2 do
2764: LD_ADDR_VAR 0 3
2768: PUSH
2769: DOUBLE
2770: LD_INT 1
2772: DEC
2773: ST_TO_ADDR
2774: LD_INT 2
2776: PUSH
2777: FOR_TO
2778: IFFALSE 2806
// begin PrepareSoldier ( false , 7 ) ;
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 7
2785: PPUSH
2786: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2790: CALL_OW 44
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// end ;
2804: GO 2777
2806: POP
2807: POP
// end ;
2808: GO 2761
2810: POP
2811: POP
// end ;
2812: LD_VAR 0 1
2816: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2817: LD_INT 0
2819: PPUSH
2820: PPUSH
2821: PPUSH
2822: PPUSH
// uc_side := 3 ;
2823: LD_ADDR_OWVAR 20
2827: PUSH
2828: LD_INT 3
2830: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2831: LD_ADDR_OWVAR 21
2835: PUSH
2836: LD_INT 1
2838: PPUSH
2839: LD_INT 3
2841: PPUSH
2842: CALL_OW 12
2846: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2847: LD_ADDR_VAR 0 4
2851: PUSH
2852: LD_INT 5
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 517
2862: ST_TO_ADDR
// for i := 1 to 3 do
2863: LD_ADDR_VAR 0 2
2867: PUSH
2868: DOUBLE
2869: LD_INT 1
2871: DEC
2872: ST_TO_ADDR
2873: LD_INT 3
2875: PUSH
2876: FOR_TO
2877: IFFALSE 2946
// begin PrepareHuman ( false , 33 , 0 ) ;
2879: LD_INT 0
2881: PPUSH
2882: LD_INT 33
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 380
// un := CreateHuman ;
2892: LD_ADDR_VAR 0 3
2896: PUSH
2897: CALL_OW 44
2901: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2902: LD_VAR 0 3
2906: PPUSH
2907: LD_VAR 0 4
2911: PUSH
2912: LD_INT 1
2914: ARRAY
2915: PUSH
2916: LD_VAR 0 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 4
2926: PUSH
2927: LD_INT 2
2929: ARRAY
2930: PUSH
2931: LD_VAR 0 2
2935: ARRAY
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: CALL_OW 601
// end ;
2944: GO 2876
2946: POP
2947: POP
// end ;
2948: LD_VAR 0 1
2952: RET
// export function PrepareFirstScene ; var i , un ; begin
2953: LD_INT 0
2955: PPUSH
2956: PPUSH
2957: PPUSH
// uc_side := 4 ;
2958: LD_ADDR_OWVAR 20
2962: PUSH
2963: LD_INT 4
2965: ST_TO_ADDR
// uc_nation := 1 ;
2966: LD_ADDR_OWVAR 21
2970: PUSH
2971: LD_INT 1
2973: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_INT 33
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 380
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3066
// begin un := CreateHuman ;
3003: LD_ADDR_VAR 0 3
3007: PUSH
3008: CALL_OW 44
3012: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3013: LD_VAR 0 3
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3025: LD_VAR 0 3
3029: PPUSH
3030: LD_INT 6
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3040: LD_VAR 0 3
3044: PPUSH
3045: LD_INT 1
3047: PPUSH
3048: CALL 69338 0 2
// SetLives ( un , 300 ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 300
3059: PPUSH
3060: CALL_OW 234
// end ;
3064: GO 3000
3066: POP
3067: POP
// uc_side := 3 ;
3068: LD_ADDR_OWVAR 20
3072: PUSH
3073: LD_INT 3
3075: ST_TO_ADDR
// uc_nation := 3 ;
3076: LD_ADDR_OWVAR 21
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 5
3089: PPUSH
3090: CALL_OW 381
// for i := 1 to 3 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 3
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3181
// begin un := CreateHuman ;
3110: LD_ADDR_VAR 0 3
3114: PUSH
3115: CALL_OW 44
3119: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3120: LD_ADDR_EXP 63
3124: PUSH
3125: LD_EXP 63
3129: PPUSH
3130: LD_VAR 0 3
3134: PPUSH
3135: CALL 66186 0 2
3139: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 4
3147: PPUSH
3148: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 7
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 4
3174: PPUSH
3175: CALL 69338 0 2
// end ;
3179: GO 3107
3181: POP
3182: POP
// ruCommisar := CreateHuman ;
3183: LD_ADDR_EXP 64
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3193: LD_EXP 64
3197: PPUSH
3198: LD_INT 124
3200: PPUSH
3201: LD_INT 37
3203: PPUSH
3204: LD_INT 0
3206: PPUSH
3207: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3211: LD_EXP 64
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3223: LD_EXP 64
3227: PPUSH
3228: LD_INT 3
3230: PPUSH
3231: CALL 69338 0 2
// end ;
3235: LD_VAR 0 1
3239: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3240: LD_INT 0
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
// uc_side := 6 ;
3246: LD_ADDR_OWVAR 20
3250: PUSH
3251: LD_INT 6
3253: ST_TO_ADDR
// uc_nation := 3 ;
3254: LD_ADDR_OWVAR 21
3258: PUSH
3259: LD_INT 3
3261: ST_TO_ADDR
// ruPatrol := [ ] ;
3262: LD_ADDR_EXP 70
3266: PUSH
3267: EMPTY
3268: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3269: LD_ADDR_VAR 0 4
3273: PUSH
3274: LD_INT 26
3276: PUSH
3277: LD_INT 30
3279: PUSH
3280: LD_INT 39
3282: PUSH
3283: LD_INT 43
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: ST_TO_ADDR
// for i := 1 to spawn do
3292: LD_ADDR_VAR 0 2
3296: PUSH
3297: DOUBLE
3298: LD_INT 1
3300: DEC
3301: ST_TO_ADDR
3302: LD_VAR 0 4
3306: PUSH
3307: FOR_TO
3308: IFFALSE 3419
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3310: LD_INT 0
3312: PPUSH
3313: LD_INT 4
3315: PUSH
3316: LD_INT 5
3318: PUSH
3319: LD_INT 6
3321: PUSH
3322: LD_INT 7
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: PUSH
3331: LD_OWVAR 67
3335: ARRAY
3336: PPUSH
3337: CALL_OW 381
// un := CreateHuman ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: CALL_OW 44
3350: ST_TO_ADDR
// SetTag ( un , i ) ;
3351: LD_VAR 0 3
3355: PPUSH
3356: LD_VAR 0 2
3360: PPUSH
3361: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3365: LD_ADDR_EXP 70
3369: PUSH
3370: LD_EXP 70
3374: PPUSH
3375: LD_VAR 0 3
3379: PPUSH
3380: CALL 66186 0 2
3384: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3385: LD_VAR 0 3
3389: PPUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: CALL_OW 49
// ComHold ( un ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: CALL_OW 140
// end ;
3417: GO 3307
3419: POP
3420: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3421: LD_ADDR_VAR 0 4
3425: PUSH
3426: LD_INT 48
3428: PUSH
3429: LD_INT 49
3431: PUSH
3432: LD_INT 50
3434: PUSH
3435: LD_INT 51
3437: PUSH
3438: LD_INT 52
3440: PUSH
3441: LD_INT 53
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: ST_TO_ADDR
// for i := 1 to spawn do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: DOUBLE
3458: LD_INT 1
3460: DEC
3461: ST_TO_ADDR
3462: LD_VAR 0 4
3466: PUSH
3467: FOR_TO
3468: IFFALSE 3577
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3470: LD_INT 0
3472: PPUSH
3473: LD_INT 4
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 6
3481: PUSH
3482: LD_INT 7
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_OWVAR 67
3495: ARRAY
3496: PPUSH
3497: CALL_OW 381
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 3
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3523: LD_ADDR_EXP 70
3527: PUSH
3528: LD_EXP 70
3532: PPUSH
3533: LD_VAR 0 3
3537: PPUSH
3538: CALL 66186 0 2
3542: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3543: LD_VAR 0 3
3547: PPUSH
3548: LD_VAR 0 4
3552: PUSH
3553: LD_VAR 0 2
3557: ARRAY
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// ComHold ( un ) ;
3566: LD_VAR 0 3
3570: PPUSH
3571: CALL_OW 140
// end ;
3575: GO 3467
3577: POP
3578: POP
// end ;
3579: LD_VAR 0 1
3583: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3584: LD_INT 0
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
// uc_side := 6 ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_INT 6
3597: ST_TO_ADDR
// uc_nation := nation_russian ;
3598: LD_ADDR_OWVAR 21
3602: PUSH
3603: LD_INT 3
3605: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3606: LD_ADDR_VAR 0 4
3610: PUSH
3611: LD_INT 54
3613: PUSH
3614: LD_INT 55
3616: PUSH
3617: LD_INT 56
3619: PUSH
3620: LD_INT 57
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: ST_TO_ADDR
// for i := 1 to spawn do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: DOUBLE
3635: LD_INT 1
3637: DEC
3638: ST_TO_ADDR
3639: LD_VAR 0 4
3643: PUSH
3644: FOR_TO
3645: IFFALSE 3754
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3647: LD_INT 0
3649: PPUSH
3650: LD_INT 4
3652: PUSH
3653: LD_INT 5
3655: PUSH
3656: LD_INT 6
3658: PUSH
3659: LD_INT 7
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_OWVAR 67
3672: ARRAY
3673: PPUSH
3674: CALL_OW 381
// un := CreateHuman ;
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: CALL_OW 44
3687: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3700: LD_ADDR_EXP 70
3704: PUSH
3705: LD_EXP 70
3709: PPUSH
3710: LD_VAR 0 3
3714: PPUSH
3715: CALL 66186 0 2
3719: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3720: LD_VAR 0 3
3724: PPUSH
3725: LD_VAR 0 4
3729: PUSH
3730: LD_VAR 0 2
3734: ARRAY
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// ComHold ( un ) ;
3743: LD_VAR 0 3
3747: PPUSH
3748: CALL_OW 140
// end ;
3752: GO 3644
3754: POP
3755: POP
// end ; end_of_file
3756: LD_VAR 0 1
3760: RET
// export function Action ; var speaker , i , tmp ; begin
3761: LD_INT 0
3763: PPUSH
3764: PPUSH
3765: PPUSH
3766: PPUSH
// Video ( true ) ;
3767: LD_INT 1
3769: PPUSH
3770: CALL 66158 0 1
// hasNormalScene := Kaia or Givi ;
3774: LD_ADDR_EXP 5
3778: PUSH
3779: LD_EXP 50
3783: PUSH
3784: LD_EXP 46
3788: OR
3789: ST_TO_ADDR
// if hasNormalScene then
3790: LD_EXP 5
3794: IFFALSE 4035
// begin for i in americanSquad do
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: LD_EXP 57
3805: PUSH
3806: FOR_IN
3807: IFFALSE 3853
// begin SetClass ( i , class_prison ) ;
3809: LD_VAR 0 3
3813: PPUSH
3814: LD_INT 33
3816: PPUSH
3817: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3821: LD_VAR 0 3
3825: PPUSH
3826: LD_INT 78
3828: PPUSH
3829: LD_INT 16
3831: PPUSH
3832: LD_INT 5
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 50
// ComHold ( i ) ;
3842: LD_VAR 0 3
3846: PPUSH
3847: CALL_OW 140
// end ;
3851: GO 3806
3853: POP
3854: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: LD_EXP 47
3864: PUSH
3865: LD_EXP 48
3869: PUSH
3870: LD_EXP 49
3874: PUSH
3875: LD_EXP 50
3879: PUSH
3880: LD_EXP 51
3884: PUSH
3885: LD_EXP 52
3889: PUSH
3890: LD_EXP 53
3894: PUSH
3895: LD_EXP 54
3899: PUSH
3900: LD_EXP 46
3904: PUSH
3905: LD_EXP 55
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: PUSH
3922: LD_EXP 56
3926: UNION
3927: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3928: LD_EXP 45
3932: PPUSH
3933: LD_INT 33
3935: PPUSH
3936: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3940: LD_EXP 45
3944: PPUSH
3945: LD_INT 117
3947: PPUSH
3948: LD_INT 24
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL 68326 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3961: LD_EXP 45
3965: PPUSH
3966: LD_INT 123
3968: PPUSH
3969: LD_INT 39
3971: PPUSH
3972: CALL_OW 118
// for i in tmp do
3976: LD_ADDR_VAR 0 3
3980: PUSH
3981: LD_VAR 0 4
3985: PUSH
3986: FOR_IN
3987: IFFALSE 4033
// begin SetClass ( i , class_prison ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 33
3996: PPUSH
3997: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4001: LD_VAR 0 3
4005: PPUSH
4006: LD_INT 3
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 113
4023: PPUSH
4024: LD_INT 16
4026: PPUSH
4027: CALL_OW 118
// end ;
4031: GO 3986
4033: POP
4034: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4035: LD_INT 124
4037: PPUSH
4038: LD_INT 39
4040: PPUSH
4041: CALL_OW 86
// PrepareDeadBodies ;
4045: CALL 2817 0 0
// PrepareFirstScene ;
4049: CALL 2953 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4053: LD_INT 152
4055: PPUSH
4056: LD_INT 65
4058: PPUSH
4059: LD_INT 2
4061: PPUSH
4062: LD_INT 70
4064: NEG
4065: PPUSH
4066: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4070: LD_INT 152
4072: PPUSH
4073: LD_INT 65
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4083: LD_INT 122
4085: PPUSH
4086: LD_INT 40
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: LD_INT 8
4094: NEG
4095: PPUSH
4096: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4100: LD_INT 124
4102: PPUSH
4103: LD_INT 37
4105: PPUSH
4106: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4110: LD_EXP 64
4114: PPUSH
4115: LD_STRING DRum-Execution-1
4117: PPUSH
4118: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4122: LD_EXP 64
4126: PPUSH
4127: LD_STRING DRum-Execution-2
4129: PPUSH
4130: CALL_OW 88
// wait ( 0 0$01 ) ;
4134: LD_INT 35
4136: PPUSH
4137: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4141: LD_EXP 64
4145: PPUSH
4146: LD_STRING DRum-Execution-3
4148: PPUSH
4149: CALL_OW 88
// wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4160: LD_EXP 64
4164: PPUSH
4165: LD_STRING DRum-Execution-4
4167: PPUSH
4168: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4172: LD_EXP 63
4176: PUSH
4177: LD_INT 1
4179: ARRAY
4180: PPUSH
4181: LD_INT 122
4183: PPUSH
4184: LD_INT 39
4186: PPUSH
4187: CALL_OW 428
4191: PPUSH
4192: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4196: LD_EXP 63
4200: PUSH
4201: LD_INT 2
4203: ARRAY
4204: PPUSH
4205: LD_INT 123
4207: PPUSH
4208: LD_INT 41
4210: PPUSH
4211: CALL_OW 428
4215: PPUSH
4216: CALL_OW 115
// AddComHold ( russianKillers ) ;
4220: LD_EXP 63
4224: PPUSH
4225: CALL_OW 200
// wait ( 0 0$1 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4236: LD_INT 122
4238: PPUSH
4239: LD_INT 40
4241: PPUSH
4242: LD_INT 2
4244: PPUSH
4245: CALL_OW 331
// for i in russianKillers union ruCommisar do
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_EXP 63
4258: PUSH
4259: LD_EXP 64
4263: UNION
4264: PUSH
4265: FOR_IN
4266: IFFALSE 4279
// RemoveUnit ( i ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: CALL_OW 64
4277: GO 4265
4279: POP
4280: POP
// if hasNormalScene then
4281: LD_EXP 5
4285: IFFALSE 4293
// ActionNormal else
4287: CALL 4302 0 0
4291: GO 4297
// ActionAdditional ;
4293: CALL 6120 0 0
// end ;
4297: LD_VAR 0 1
4301: RET
// function ActionNormal ; var i , tmp ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
// CenterNowOnUnits ( Heike ) ;
4307: LD_EXP 45
4311: PPUSH
4312: CALL_OW 87
// wait ( 0 0$1 ) ;
4316: LD_INT 35
4318: PPUSH
4319: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4323: LD_EXP 45
4327: PPUSH
4328: LD_INT 115
4330: PPUSH
4331: LD_INT 19
4333: PPUSH
4334: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4338: LD_EXP 45
4342: PPUSH
4343: LD_INT 113
4345: PPUSH
4346: LD_INT 16
4348: PPUSH
4349: CALL_OW 178
// wait ( 0 0$2 ) ;
4353: LD_INT 70
4355: PPUSH
4356: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4360: LD_EXP 45
4364: PPUSH
4365: LD_STRING DH-Conspiracy-1
4367: PPUSH
4368: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4372: LD_EXP 50
4376: PPUSH
4377: LD_STRING DK-Conspiracy-2
4379: PPUSH
4380: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4384: LD_EXP 46
4388: PPUSH
4389: LD_STRING DG-Conspiracy-3
4391: PPUSH
4392: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4396: LD_EXP 46
4400: PPUSH
4401: LD_STRING DG-Conspiracy-4
4403: PPUSH
4404: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4408: LD_EXP 45
4412: PPUSH
4413: LD_STRING DH-Conspiracy-5
4415: PPUSH
4416: CALL_OW 88
// if IsOk ( Kamil ) then
4420: LD_EXP 49
4424: PPUSH
4425: CALL_OW 302
4429: IFFALSE 4487
// begin hasVodka := true ;
4431: LD_ADDR_EXP 4
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4439: LD_EXP 49
4443: PPUSH
4444: LD_STRING DKam-Conspiracy-6
4446: PPUSH
4447: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4451: LD_EXP 49
4455: PPUSH
4456: LD_STRING DKam-Conspiracy-7
4458: PPUSH
4459: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4463: LD_EXP 49
4467: PPUSH
4468: LD_STRING DKam-Conspiracy-8
4470: PPUSH
4471: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4475: LD_EXP 49
4479: PPUSH
4480: LD_STRING DKam-Conspiracy-9
4482: PPUSH
4483: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4487: LD_EXP 51
4491: PPUSH
4492: CALL_OW 302
4496: IFFALSE 4677
// begin americanContact := true ;
4498: LD_ADDR_EXP 10
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4506: LD_STRING M1-american
4508: PPUSH
4509: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4513: LD_EXP 51
4517: PPUSH
4518: LD_STRING DS-Conspiracy-10
4520: PPUSH
4521: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4525: LD_EXP 52
4529: PPUSH
4530: LD_STRING DM-Conspiracy-11
4532: PPUSH
4533: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4537: LD_EXP 51
4541: PPUSH
4542: LD_STRING DS-Conspiracy-12
4544: PPUSH
4545: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4549: LD_INT 84
4551: PPUSH
4552: LD_INT 19
4554: PPUSH
4555: LD_INT 105
4557: PPUSH
4558: CALL 19651 0 3
// if johnnySaved then
4562: LD_EXP 3
4566: IFFALSE 4606
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4568: LD_EXP 51
4572: PPUSH
4573: LD_STRING DS-Conspiracy-13
4575: PPUSH
4576: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4580: LD_EXP 45
4584: PPUSH
4585: LD_STRING DH-Conspiracy-14
4587: PPUSH
4588: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4592: LD_EXP 51
4596: PPUSH
4597: LD_STRING DH-Conspiracy-15
4599: PPUSH
4600: CALL_OW 88
// end else
4604: GO 4642
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4606: LD_EXP 51
4610: PPUSH
4611: LD_STRING DS-Conspiracy-a-13
4613: PPUSH
4614: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4618: LD_EXP 45
4622: PPUSH
4623: LD_STRING DH-Conspiracy-a-14
4625: PPUSH
4626: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4630: LD_EXP 45
4634: PPUSH
4635: LD_STRING DH-Conspiracy-a-15
4637: PPUSH
4638: CALL_OW 88
// end ; if IsOk ( Givi ) then
4642: LD_EXP 46
4646: PPUSH
4647: CALL_OW 302
4651: IFFALSE 4677
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4653: LD_EXP 46
4657: PPUSH
4658: LD_STRING DG-Conspiracy-a-16
4660: PPUSH
4661: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4665: LD_EXP 45
4669: PPUSH
4670: LD_STRING DH-Conspiracy-a-17
4672: PPUSH
4673: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4677: LD_EXP 45
4681: PPUSH
4682: LD_STRING DH-Conspiracy-16
4684: PPUSH
4685: CALL_OW 88
// if IsOk ( Givi ) then
4689: LD_EXP 46
4693: PPUSH
4694: CALL_OW 302
4698: IFFALSE 4970
// begin hasStimDrugs := true ;
4700: LD_ADDR_EXP 9
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4708: LD_STRING M1-drugs
4710: PPUSH
4711: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4715: LD_EXP 46
4719: PPUSH
4720: LD_STRING DG-Conspiracy-17
4722: PPUSH
4723: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4727: LD_INT 162
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4737: LD_INT 194
4739: PPUSH
4740: LD_INT 98
4742: PPUSH
4743: LD_INT 105
4745: PPUSH
4746: CALL 19651 0 3
// SetSide ( drugsLab , 3 ) ;
4750: LD_INT 162
4752: PPUSH
4753: LD_INT 3
4755: PPUSH
4756: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4760: LD_EXP 46
4764: PPUSH
4765: LD_STRING DG-Conspiracy-18
4767: PPUSH
4768: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4772: LD_EXP 46
4776: PPUSH
4777: LD_STRING DG-Conspiracy-19
4779: PPUSH
4780: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4784: LD_EXP 46
4788: PPUSH
4789: LD_STRING DG-Conspiracy-20
4791: PPUSH
4792: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4796: LD_EXP 45
4800: PPUSH
4801: LD_STRING DH-Conspiracy-21
4803: PPUSH
4804: CALL_OW 88
// if IsOk ( Kaia ) then
4808: LD_EXP 50
4812: PPUSH
4813: CALL_OW 302
4817: IFFALSE 4891
// begin hasExplosions := true ;
4819: LD_ADDR_EXP 6
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4827: LD_STRING M1-explosive
4829: PPUSH
4830: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4834: LD_EXP 50
4838: PPUSH
4839: LD_STRING DK-Conspiracy-22
4841: PPUSH
4842: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4846: LD_INT 73
4848: PPUSH
4849: LD_INT 2
4851: PPUSH
4852: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4856: LD_INT 170
4858: PPUSH
4859: LD_INT 104
4861: PPUSH
4862: LD_INT 105
4864: PPUSH
4865: CALL 19651 0 3
// SetSide ( barExplosion , 3 ) ;
4869: LD_INT 73
4871: PPUSH
4872: LD_INT 3
4874: PPUSH
4875: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING DK-Conspiracy-23
4886: PPUSH
4887: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4891: LD_EXP 53
4895: PPUSH
4896: CALL_OW 302
4900: IFFALSE 4970
// begin hasExplosionsInFactory := true ;
4902: LD_ADDR_EXP 7
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4910: LD_EXP 53
4914: PPUSH
4915: LD_STRING DO-Conspiracy-24
4917: PPUSH
4918: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4922: LD_INT 175
4924: PPUSH
4925: LD_INT 54
4927: PPUSH
4928: LD_INT 70
4930: PPUSH
4931: CALL 19651 0 3
// if IsOk ( Markov ) then
4935: LD_EXP 52
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4970
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4946: LD_EXP 52
4950: PPUSH
4951: LD_STRING DMar-Conspiracy-25
4953: PPUSH
4954: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4958: LD_EXP 52
4962: PPUSH
4963: LD_STRING DMar-Conspiracy-26
4965: PPUSH
4966: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4970: LD_EXP 54
4974: PPUSH
4975: CALL_OW 302
4979: PUSH
4980: LD_EXP 50
4984: PPUSH
4985: CALL_OW 302
4989: AND
4990: IFFALSE 5450
// begin hasWeapons := true ;
4992: LD_ADDR_EXP 19
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// hasRevolver := true ;
5000: LD_ADDR_EXP 8
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5008: LD_STRING M1-weapons
5010: PPUSH
5011: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5015: LD_EXP 54
5019: PPUSH
5020: LD_STRING DKs-Conspiracy-27
5022: PPUSH
5023: CALL_OW 88
// if IsOk ( Givi ) then
5027: LD_EXP 46
5031: PPUSH
5032: CALL_OW 302
5036: IFFALSE 5052
// Say ( Givi , DG-Conspiracy-28 ) else
5038: LD_EXP 46
5042: PPUSH
5043: LD_STRING DG-Conspiracy-28
5045: PPUSH
5046: CALL_OW 88
5050: GO 5117
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5052: LD_EXP 56
5056: PPUSH
5057: LD_INT 26
5059: PUSH
5060: LD_INT 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 72
5071: PUSH
5072: LD_INT 1
5074: ARRAY
5075: PPUSH
5076: LD_STRING DArm-Conspiracy-a-28
5078: PPUSH
5079: CALL_OW 88
5083: NOT
5084: IFFALSE 5117
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5086: LD_EXP 56
5090: PPUSH
5091: LD_INT 26
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 72
5105: PUSH
5106: LD_INT 1
5108: ARRAY
5109: PPUSH
5110: LD_STRING DArf-Conspiracy-a-28
5112: PPUSH
5113: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5117: LD_EXP 54
5121: PPUSH
5122: LD_STRING DKs-Conspiracy-29
5124: PPUSH
5125: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5129: LD_INT 192
5131: PPUSH
5132: LD_INT 122
5134: PPUSH
5135: LD_INT 105
5137: PPUSH
5138: CALL 19651 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5142: LD_EXP 54
5146: PPUSH
5147: LD_STRING DKs-Conspiracy-30
5149: PPUSH
5150: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5154: LD_EXP 50
5158: PPUSH
5159: LD_STRING DK-Conspiracy-31
5161: PPUSH
5162: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5166: LD_EXP 52
5170: PPUSH
5171: LD_STRING DMar-Conspiracy-33
5173: PPUSH
5174: CALL_OW 88
5178: NOT
5179: PUSH
5180: LD_EXP 56
5184: AND
5185: IFFALSE 5252
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5187: LD_EXP 56
5191: PPUSH
5192: LD_INT 26
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 72
5206: PUSH
5207: LD_INT 1
5209: ARRAY
5210: PPUSH
5211: LD_STRING DArm-Conspiracy-a-34
5213: PPUSH
5214: CALL_OW 88
5218: NOT
5219: IFFALSE 5252
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5221: LD_EXP 56
5225: PPUSH
5226: LD_INT 26
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 72
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: LD_STRING DArf-Conspiracy-a-34
5247: PPUSH
5248: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5252: LD_EXP 50
5256: PPUSH
5257: LD_STRING DK-Conspiracy-34
5259: PPUSH
5260: CALL_OW 88
// if IsOk ( Markov ) then
5264: LD_EXP 52
5268: PPUSH
5269: CALL_OW 302
5273: IFFALSE 5358
// begin hasSniperRifle := true ;
5275: LD_ADDR_EXP 11
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5283: LD_EXP 52
5287: PPUSH
5288: LD_STRING DMar-Conspiracy-35
5290: PPUSH
5291: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5295: LD_EXP 50
5299: PPUSH
5300: LD_STRING DK-Conspiracy-36
5302: PPUSH
5303: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5307: LD_EXP 52
5311: PPUSH
5312: LD_STRING DMar-Conspiracy-37
5314: PPUSH
5315: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5319: LD_EXP 52
5323: PPUSH
5324: LD_STRING DMar-Conspiracy-38
5326: PPUSH
5327: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5331: LD_INT 137
5333: PPUSH
5334: LD_INT 98
5336: PPUSH
5337: LD_INT 105
5339: PPUSH
5340: CALL 19651 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5344: LD_EXP 52
5348: PPUSH
5349: LD_STRING DMar-Conspiracy-39
5351: PPUSH
5352: CALL_OW 88
// end else
5356: GO 5450
// if heikeSecondSquad then
5358: LD_EXP 56
5362: IFFALSE 5450
// begin hasSniperRifle := true ;
5364: LD_ADDR_EXP 11
5368: PUSH
5369: LD_INT 1
5371: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5372: LD_INT 137
5374: PPUSH
5375: LD_INT 98
5377: PPUSH
5378: LD_INT 105
5380: PPUSH
5381: CALL 19651 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5385: LD_EXP 56
5389: PPUSH
5390: LD_INT 26
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 72
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: LD_STRING DArm-Conspiracy-a-35
5411: PPUSH
5412: CALL_OW 88
5416: NOT
5417: IFFALSE 5450
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5419: LD_EXP 56
5423: PPUSH
5424: LD_INT 26
5426: PUSH
5427: LD_INT 2
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 72
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING DArf-Conspiracy-a-35
5445: PPUSH
5446: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5450: LD_EXP 45
5454: PPUSH
5455: LD_STRING DH-Conspiracy-40
5457: PPUSH
5458: CALL_OW 88
// if IsOk ( Mike ) then
5462: LD_EXP 47
5466: PPUSH
5467: CALL_OW 302
5471: IFFALSE 5530
// begin hasScout := true ;
5473: LD_ADDR_EXP 12
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5481: LD_EXP 47
5485: PPUSH
5486: LD_STRING DM-Conspiracy-41
5488: PPUSH
5489: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5493: LD_EXP 47
5497: PPUSH
5498: LD_STRING DM-Conspiracy-42
5500: PPUSH
5501: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5505: LD_INT 73
5507: PPUSH
5508: LD_INT 102
5510: PPUSH
5511: LD_INT 105
5513: PPUSH
5514: CALL 19651 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5518: LD_EXP 47
5522: PPUSH
5523: LD_STRING DM-Conspiracy-43
5525: PPUSH
5526: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5530: LD_EXP 4
5534: PUSH
5535: LD_EXP 50
5539: PPUSH
5540: CALL_OW 302
5544: AND
5545: PUSH
5546: LD_EXP 54
5550: PPUSH
5551: CALL_OW 302
5555: AND
5556: IFFALSE 5602
// begin hasMethanol := true ;
5558: LD_ADDR_EXP 13
5562: PUSH
5563: LD_INT 1
5565: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5566: LD_EXP 50
5570: PPUSH
5571: LD_STRING DK-Conspiracy-44
5573: PPUSH
5574: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5578: LD_EXP 50
5582: PPUSH
5583: LD_STRING DK-Conspiracy-45
5585: PPUSH
5586: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING DKam-Conspiracy-46
5597: PPUSH
5598: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5602: LD_EXP 45
5606: PPUSH
5607: LD_STRING DH-Conspiracy-47
5609: PPUSH
5610: CALL_OW 88
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// your_side := 8 ;
5621: LD_ADDR_OWVAR 2
5625: PUSH
5626: LD_INT 8
5628: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5629: LD_INT 1
5631: PPUSH
5632: LD_INT 1
5634: PPUSH
5635: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5639: LD_ADDR_VAR 0 2
5643: PUSH
5644: LD_INT 2
5646: PUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_INT 4
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 21
5674: PUSH
5675: LD_INT 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PPUSH
5686: CALL_OW 69
5690: PUSH
5691: FOR_IN
5692: IFFALSE 5705
// RemoveUnit ( i ) ;
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 64
5703: GO 5691
5705: POP
5706: POP
// wait ( 0 0$0.3 ) ;
5707: LD_INT 10
5709: PPUSH
5710: CALL_OW 67
// Query ( StartInfo1 ) ;
5714: LD_STRING StartInfo1
5716: PPUSH
5717: CALL_OW 97
// wait ( 0 0$1 ) ;
5721: LD_INT 35
5723: PPUSH
5724: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5728: LD_STRING colors_night.txt
5730: PPUSH
5731: CALL_OW 544
// Query ( StartInfo2 ) ;
5735: LD_STRING StartInfo2
5737: PPUSH
5738: CALL_OW 97
// PrepareGame ;
5742: CALL 1048 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5746: LD_INT 152
5748: PPUSH
5749: LD_INT 65
5751: PPUSH
5752: LD_INT 2
5754: PPUSH
5755: LD_INT 70
5757: NEG
5758: PPUSH
5759: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5763: LD_INT 152
5765: PPUSH
5766: LD_INT 65
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5776: LD_INT 133
5778: PPUSH
5779: LD_INT 76
5781: PPUSH
5782: LD_INT 2
5784: PPUSH
5785: LD_INT 6
5787: NEG
5788: PPUSH
5789: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5793: LD_INT 152
5795: PPUSH
5796: LD_INT 65
5798: PPUSH
5799: LD_INT 8
5801: PPUSH
5802: LD_INT 70
5804: NEG
5805: PPUSH
5806: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5810: LD_INT 152
5812: PPUSH
5813: LD_INT 65
5815: PPUSH
5816: LD_INT 8
5818: PPUSH
5819: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5823: LD_INT 133
5825: PPUSH
5826: LD_INT 76
5828: PPUSH
5829: LD_INT 8
5831: PPUSH
5832: LD_INT 6
5834: NEG
5835: PPUSH
5836: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5840: LD_INT 23
5842: PPUSH
5843: CALL_OW 87
// dialogue_skipped := false ;
5847: LD_ADDR_OWVAR 59
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// InitRuPatrols ;
5855: CALL 3240 0 0
// Say ( Heike , DH-Escape-1 ) ;
5859: LD_EXP 45
5863: PPUSH
5864: LD_STRING DH-Escape-1
5866: PPUSH
5867: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5871: LD_EXP 45
5875: PPUSH
5876: LD_STRING DH-Escape-2
5878: PPUSH
5879: CALL_OW 88
// StartLockerMinigame ;
5883: CALL 20436 0 0
// wait ( 0 0$1 ) ;
5887: LD_INT 35
5889: PPUSH
5890: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5894: LD_EXP 45
5898: PPUSH
5899: LD_STRING DH-Escape-4
5901: PPUSH
5902: CALL_OW 88
// wait ( 0 0$3 ) ;
5906: LD_INT 105
5908: PPUSH
5909: CALL_OW 67
// your_side := 2 ;
5913: LD_ADDR_OWVAR 2
5917: PUSH
5918: LD_INT 2
5920: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5921: LD_EXP 45
5925: PPUSH
5926: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5930: LD_INT 152
5932: PPUSH
5933: LD_INT 65
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: LD_INT 70
5941: NEG
5942: PPUSH
5943: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5947: LD_INT 152
5949: PPUSH
5950: LD_INT 65
5952: PPUSH
5953: LD_INT 2
5955: PPUSH
5956: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5960: LD_INT 133
5962: PPUSH
5963: LD_INT 76
5965: PPUSH
5966: LD_INT 8
5968: PPUSH
5969: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5973: LD_EXP 45
5977: PPUSH
5978: LD_INT 128
5980: PPUSH
5981: LD_INT 64
5983: PPUSH
5984: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5988: LD_INT 35
5990: PPUSH
5991: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5995: LD_EXP 45
5999: PPUSH
6000: LD_INT 128
6002: PPUSH
6003: LD_INT 64
6005: PPUSH
6006: CALL_OW 307
6010: IFFALSE 5988
// ComHold ( Heike ) ;
6012: LD_EXP 45
6016: PPUSH
6017: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6021: LD_EXP 45
6025: PPUSH
6026: LD_STRING DH-Start-1
6028: PPUSH
6029: CALL_OW 88
// if not americanContact then
6033: LD_EXP 10
6037: NOT
6038: IFFALSE 6054
// Say ( Heike , DH-Start-c-2 ) else
6040: LD_EXP 45
6044: PPUSH
6045: LD_STRING DH-Start-c-2
6047: PPUSH
6048: CALL_OW 88
6052: GO 6086
// if johnnySaved then
6054: LD_EXP 3
6058: IFFALSE 6074
// Say ( Heike , DH-Start-a-2 ) else
6060: LD_EXP 45
6064: PPUSH
6065: LD_STRING DH-Start-a-2
6067: PPUSH
6068: CALL_OW 88
6072: GO 6086
// Say ( Heike , DH-Start-b-2 ) ;
6074: LD_EXP 45
6078: PPUSH
6079: LD_STRING DH-Start-b-2
6081: PPUSH
6082: CALL_OW 88
// Video ( false ) ;
6086: LD_INT 0
6088: PPUSH
6089: CALL 66158 0 1
// tick := 0 ;
6093: LD_ADDR_OWVAR 1
6097: PUSH
6098: LD_INT 0
6100: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6101: LD_STRING M1
6103: PPUSH
6104: CALL_OW 337
// enable ( gameStartEvent ) ;
6108: LD_INT 2
6110: ENABLE_MARKED
// SaveForQuickRestart ;
6111: CALL_OW 22
// end ;
6115: LD_VAR 0 1
6119: RET
// function ActionAdditional ; var i , un , tmp ; begin
6120: LD_INT 0
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6126: LD_INT 115
6128: PPUSH
6129: LD_INT 27
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: LD_INT 6
6137: NEG
6138: PPUSH
6139: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6143: LD_EXP 45
6147: PPUSH
6148: LD_INT 115
6150: PPUSH
6151: LD_INT 27
6153: PPUSH
6154: CALL_OW 428
6158: PPUSH
6159: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6163: LD_EXP 45
6167: PPUSH
6168: LD_INT 33
6170: PPUSH
6171: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6175: LD_INT 124
6177: PPUSH
6178: LD_INT 39
6180: PPUSH
6181: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6185: LD_EXP 45
6189: PPUSH
6190: LD_STRING DH-Fail-1
6192: PPUSH
6193: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6197: LD_INT 3
6199: PPUSH
6200: CALL_OW 427
// ComExit ( Heike ) ;
6204: LD_EXP 45
6208: PPUSH
6209: CALL 66584 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6213: LD_EXP 45
6217: PPUSH
6218: LD_INT 109
6220: PPUSH
6221: LD_INT 33
6223: PPUSH
6224: CALL_OW 171
// AddComHold ( Heike ) ;
6228: LD_EXP 45
6232: PPUSH
6233: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6237: LD_INT 115
6239: PPUSH
6240: LD_INT 27
6242: PPUSH
6243: LD_INT 2
6245: PPUSH
6246: CALL_OW 331
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6257: LD_INT 35
6259: PPUSH
6260: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6264: LD_EXP 45
6268: PPUSH
6269: LD_INT 109
6271: PPUSH
6272: LD_INT 33
6274: PPUSH
6275: CALL_OW 307
6279: IFFALSE 6257
// Say ( Heike , DH-Fail-2 ) ;
6281: LD_EXP 45
6285: PPUSH
6286: LD_STRING DH-Fail-2
6288: PPUSH
6289: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6293: LD_EXP 45
6297: PPUSH
6298: LD_INT 111
6300: PPUSH
6301: LD_INT 48
6303: PPUSH
6304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6308: LD_INT 35
6310: PPUSH
6311: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6315: LD_EXP 45
6319: PPUSH
6320: LD_INT 111
6322: PPUSH
6323: LD_INT 48
6325: PPUSH
6326: CALL_OW 297
6330: PUSH
6331: LD_INT 4
6333: LESS
6334: IFFALSE 6308
// AddComMoveXY ( Heike , 106 , 72 ) ;
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 106
6343: PPUSH
6344: LD_INT 72
6346: PPUSH
6347: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6351: LD_EXP 45
6355: PPUSH
6356: LD_INT 103
6358: PPUSH
6359: LD_INT 80
6361: PPUSH
6362: CALL_OW 171
// uc_side := 3 ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_INT 3
6373: ST_TO_ADDR
// uc_nation := 3 ;
6374: LD_ADDR_OWVAR 21
6378: PUSH
6379: LD_INT 3
6381: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6382: LD_INT 1
6384: PPUSH
6385: LD_INT 1
6387: PPUSH
6388: LD_INT 6
6390: PPUSH
6391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6395: LD_ADDR_OWVAR 29
6399: PUSH
6400: LD_INT 12
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: ST_TO_ADDR
// un := CreateHuman ;
6410: LD_ADDR_VAR 0 3
6414: PUSH
6415: CALL_OW 44
6419: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6420: LD_VAR 0 3
6424: PPUSH
6425: LD_INT 134
6427: PPUSH
6428: LD_INT 52
6430: PPUSH
6431: LD_INT 4
6433: PPUSH
6434: LD_INT 0
6436: PPUSH
6437: CALL 68326 0 5
// ComTurnUnit ( un , Heike ) ;
6441: LD_VAR 0 3
6445: PPUSH
6446: LD_EXP 45
6450: PPUSH
6451: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6455: LD_VAR 0 3
6459: PPUSH
6460: LD_EXP 45
6464: PPUSH
6465: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6469: LD_VAR 0 3
6473: PPUSH
6474: LD_STRING DRum-Fail-3
6476: PPUSH
6477: CALL_OW 88
// for i := 1 to 3 do
6481: LD_ADDR_VAR 0 2
6485: PUSH
6486: DOUBLE
6487: LD_INT 1
6489: DEC
6490: ST_TO_ADDR
6491: LD_INT 3
6493: PUSH
6494: FOR_TO
6495: IFFALSE 6568
// begin PrepareSoldier ( false , 10 ) ;
6497: LD_INT 0
6499: PPUSH
6500: LD_INT 10
6502: PPUSH
6503: CALL_OW 381
// un := CreateHuman ;
6507: LD_ADDR_VAR 0 3
6511: PUSH
6512: CALL_OW 44
6516: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6517: LD_ADDR_VAR 0 4
6521: PUSH
6522: LD_VAR 0 4
6526: PPUSH
6527: LD_VAR 0 3
6531: PPUSH
6532: CALL 66186 0 2
6536: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6537: LD_VAR 0 3
6541: PPUSH
6542: LD_INT 8
6544: PPUSH
6545: LD_INT 0
6547: PPUSH
6548: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6552: LD_VAR 0 3
6556: PPUSH
6557: LD_EXP 45
6561: PPUSH
6562: CALL_OW 119
// end ;
6566: GO 6494
6568: POP
6569: POP
// repeat wait ( 0 0$1 ) ;
6570: LD_INT 35
6572: PPUSH
6573: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6577: LD_VAR 0 4
6581: PPUSH
6582: LD_INT 101
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PPUSH
6592: CALL_OW 72
6596: PUSH
6597: LD_INT 1
6599: GREATER
6600: IFFALSE 6570
// wait ( 0 0$1 ) ;
6602: LD_INT 35
6604: PPUSH
6605: CALL_OW 67
// DialogueOn ;
6609: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6613: LD_EXP 45
6617: PPUSH
6618: LD_STRING DH-Fail-4
6620: PPUSH
6621: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6625: LD_EXP 45
6629: PPUSH
6630: LD_STRING DH-Fail-5
6632: PPUSH
6633: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6637: LD_EXP 45
6641: PPUSH
6642: LD_STRING DH-Fail-6
6644: PPUSH
6645: CALL_OW 88
// DialogueOff ;
6649: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6653: LD_VAR 0 4
6657: PPUSH
6658: LD_EXP 45
6662: PPUSH
6663: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6667: LD_INT 35
6669: PPUSH
6670: CALL_OW 67
// until IsDying ( Heike ) ;
6674: LD_EXP 45
6678: PPUSH
6679: CALL_OW 303
6683: IFFALSE 6667
// KillUnit ( Heike ) ;
6685: LD_EXP 45
6689: PPUSH
6690: CALL_OW 66
// wait ( 0 0$4 ) ;
6694: LD_INT 140
6696: PPUSH
6697: CALL_OW 67
// ResetFog ;
6701: CALL_OW 335
// DialogueOn ;
6705: CALL_OW 6
// dwait ( 0 0$1 ) ;
6709: LD_INT 35
6711: PPUSH
6712: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6716: LD_ADDR_EXP 45
6720: PUSH
6721: LD_STRING Heike
6723: PPUSH
6724: LD_EXP 1
6728: NOT
6729: PPUSH
6730: LD_EXP 2
6734: PPUSH
6735: CALL 28865 0 3
6739: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6740: LD_EXP 45
6744: PPUSH
6745: LD_STRING DH-Fail-7
6747: PPUSH
6748: CALL_OW 89
// DialogueOff ;
6752: CALL_OW 7
// YouLost ( Fail ) ;
6756: LD_STRING Fail
6758: PPUSH
6759: CALL_OW 104
// end ;
6763: LD_VAR 0 1
6767: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6768: LD_INT 2
6770: PPUSH
6771: LD_INT 173
6773: PPUSH
6774: LD_INT 29
6776: PPUSH
6777: CALL_OW 293
6781: PUSH
6782: LD_EXP 45
6786: PPUSH
6787: LD_INT 173
6789: PPUSH
6790: LD_INT 29
6792: PPUSH
6793: CALL_OW 297
6797: PUSH
6798: LD_INT 6
6800: LESS
6801: AND
6802: IFFALSE 6819
6804: GO 6806
6806: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6807: LD_EXP 45
6811: PPUSH
6812: LD_STRING DH-EastRoad
6814: PPUSH
6815: CALL_OW 88
6819: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6820: LD_INT 2
6822: PPUSH
6823: LD_INT 149
6825: PPUSH
6826: LD_INT 3
6828: PPUSH
6829: CALL_OW 293
6833: PUSH
6834: LD_EXP 45
6838: PPUSH
6839: LD_INT 149
6841: PPUSH
6842: LD_INT 3
6844: PPUSH
6845: CALL_OW 297
6849: PUSH
6850: LD_INT 6
6852: LESS
6853: AND
6854: IFFALSE 6871
6856: GO 6858
6858: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6859: LD_EXP 45
6863: PPUSH
6864: LD_STRING DH-EastRoad
6866: PPUSH
6867: CALL_OW 88
6871: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6872: LD_INT 2
6874: PPUSH
6875: LD_INT 217
6877: PPUSH
6878: LD_INT 120
6880: PPUSH
6881: CALL_OW 293
6885: PUSH
6886: LD_EXP 45
6890: PPUSH
6891: LD_INT 217
6893: PPUSH
6894: LD_INT 120
6896: PPUSH
6897: CALL_OW 297
6901: PUSH
6902: LD_INT 6
6904: LESS
6905: AND
6906: IFFALSE 6923
6908: GO 6910
6910: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6911: LD_EXP 45
6915: PPUSH
6916: LD_STRING DH-EastEnd
6918: PPUSH
6919: CALL_OW 88
6923: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6924: LD_EXP 45
6928: PPUSH
6929: LD_INT 11
6931: PPUSH
6932: CALL_OW 308
6936: IFFALSE 6974
6938: GO 6940
6940: DISABLE
// begin if not heikeSquad then
6941: LD_EXP 14
6945: NOT
6946: IFFALSE 6962
// Say ( Heike , DH-Hill ) else
6948: LD_EXP 45
6952: PPUSH
6953: LD_STRING DH-Hill
6955: PPUSH
6956: CALL_OW 88
6960: GO 6974
// Say ( Heike , DH-Hill-a ) ;
6962: LD_EXP 45
6966: PPUSH
6967: LD_STRING DH-Hill-a
6969: PPUSH
6970: CALL_OW 88
// end ;
6974: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6975: LD_EXP 45
6979: PPUSH
6980: LD_INT 12
6982: PPUSH
6983: CALL_OW 308
6987: IFFALSE 7174
6989: GO 6991
6991: DISABLE
6992: LD_INT 0
6994: PPUSH
6995: PPUSH
6996: PPUSH
// begin DialogueOn ;
6997: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7001: LD_EXP 45
7005: PPUSH
7006: CALL_OW 87
// x := GetX ( Heike ) ;
7010: LD_ADDR_VAR 0 1
7014: PUSH
7015: LD_EXP 45
7019: PPUSH
7020: CALL_OW 250
7024: ST_TO_ADDR
// y := GetY ( Heike ) ;
7025: LD_ADDR_VAR 0 2
7029: PUSH
7030: LD_EXP 45
7034: PPUSH
7035: CALL_OW 251
7039: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7040: LD_VAR 0 1
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_INT 2
7052: PPUSH
7053: LD_INT 12
7055: NEG
7056: PPUSH
7057: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: LD_VAR 0 2
7070: PPUSH
7071: LD_INT 2
7073: PPUSH
7074: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7078: LD_INT 101
7080: PUSH
7081: LD_INT 2
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: LD_INT 30
7093: PUSH
7094: LD_INT 32
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 30
7103: PUSH
7104: LD_INT 33
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL_OW 69
7124: IFFALSE 7136
// v := 3 else
7126: LD_ADDR_VAR 0 3
7130: PUSH
7131: LD_INT 3
7133: ST_TO_ADDR
7134: GO 7144
// v := 2 ;
7136: LD_ADDR_VAR 0 3
7140: PUSH
7141: LD_INT 2
7143: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7144: LD_EXP 45
7148: PPUSH
7149: LD_STRING DH-Outpost-
7151: PUSH
7152: LD_INT 1
7154: PPUSH
7155: LD_VAR 0 3
7159: PPUSH
7160: CALL_OW 12
7164: STR
7165: PPUSH
7166: CALL_OW 88
// DialogueOff ;
7170: CALL_OW 7
// end ;
7174: PPOPN 3
7176: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7177: LD_EXP 45
7181: PPUSH
7182: LD_INT 64
7184: PPUSH
7185: CALL_OW 308
7189: IFFALSE 7376
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin DialogueOn ;
7199: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7203: LD_EXP 45
7207: PPUSH
7208: CALL_OW 87
// x := GetX ( Heike ) ;
7212: LD_ADDR_VAR 0 1
7216: PUSH
7217: LD_EXP 45
7221: PPUSH
7222: CALL_OW 250
7226: ST_TO_ADDR
// y := GetY ( Heike ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_EXP 45
7236: PPUSH
7237: CALL_OW 251
7241: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: LD_INT 2
7254: PPUSH
7255: LD_INT 12
7257: NEG
7258: PPUSH
7259: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7263: LD_VAR 0 1
7267: PPUSH
7268: LD_VAR 0 2
7272: PPUSH
7273: LD_INT 2
7275: PPUSH
7276: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7280: LD_INT 101
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 2
7292: PUSH
7293: LD_INT 30
7295: PUSH
7296: LD_INT 32
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PUSH
7303: LD_INT 30
7305: PUSH
7306: LD_INT 33
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PPUSH
7322: CALL_OW 69
7326: IFFALSE 7338
// v := 3 else
7328: LD_ADDR_VAR 0 3
7332: PUSH
7333: LD_INT 3
7335: ST_TO_ADDR
7336: GO 7346
// v := 2 ;
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: LD_INT 2
7345: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7346: LD_EXP 45
7350: PPUSH
7351: LD_STRING DH-Outpost-
7353: PUSH
7354: LD_INT 1
7356: PPUSH
7357: LD_VAR 0 3
7361: PPUSH
7362: CALL_OW 12
7366: STR
7367: PPUSH
7368: CALL_OW 88
// DialogueOff ;
7372: CALL_OW 7
// end ;
7376: PPOPN 3
7378: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7379: LD_EXP 45
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: CALL_OW 308
7391: PUSH
7392: LD_EXP 22
7396: NOT
7397: AND
7398: PUSH
7399: LD_EXP 30
7403: NOT
7404: AND
7405: IFFALSE 7478
7407: GO 7409
7409: DISABLE
// begin DialogueOn ;
7410: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7414: LD_INT 152
7416: PPUSH
7417: LD_INT 115
7419: PPUSH
7420: LD_INT 2
7422: PPUSH
7423: LD_INT 16
7425: NEG
7426: PPUSH
7427: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7431: LD_INT 152
7433: PPUSH
7434: LD_INT 115
7436: PPUSH
7437: LD_INT 2
7439: PPUSH
7440: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7444: LD_INT 152
7446: PPUSH
7447: LD_INT 115
7449: PPUSH
7450: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7454: LD_EXP 45
7458: PPUSH
7459: LD_STRING DH-Stealth-1
7461: PPUSH
7462: CALL_OW 88
// DialogueOff ;
7466: CALL_OW 7
// adminAreaDiscovered := true ;
7470: LD_ADDR_EXP 22
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// end ;
7478: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7479: LD_INT 2
7481: PPUSH
7482: LD_EXP 46
7486: PPUSH
7487: CALL_OW 292
7491: PUSH
7492: LD_EXP 45
7496: PPUSH
7497: LD_EXP 46
7501: PPUSH
7502: CALL_OW 296
7506: PUSH
7507: LD_INT 6
7509: LESS
7510: AND
7511: PUSH
7512: LD_EXP 17
7516: NOT
7517: AND
7518: PUSH
7519: LD_EXP 30
7523: NOT
7524: AND
7525: IFFALSE 7631
7527: GO 7529
7529: DISABLE
// begin DialogueOn ;
7530: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7534: LD_EXP 46
7538: PPUSH
7539: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7543: LD_EXP 46
7547: PPUSH
7548: LD_EXP 45
7552: PPUSH
7553: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7557: LD_EXP 45
7561: PPUSH
7562: LD_EXP 46
7566: PPUSH
7567: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7571: LD_EXP 45
7575: PPUSH
7576: LD_STRING DH-Givi-1
7578: PPUSH
7579: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7583: LD_EXP 46
7587: PPUSH
7588: LD_STRING DG-Givi-2
7590: PPUSH
7591: CALL_OW 88
// DialogueOff ;
7595: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7599: LD_EXP 46
7603: PPUSH
7604: LD_INT 2
7606: PPUSH
7607: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7611: LD_ADDR_EXP 14
7615: PUSH
7616: LD_EXP 14
7620: PPUSH
7621: LD_EXP 46
7625: PPUSH
7626: CALL 66186 0 2
7630: ST_TO_ADDR
// end ;
7631: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7632: LD_INT 2
7634: PPUSH
7635: LD_EXP 51
7639: PPUSH
7640: CALL_OW 292
7644: PUSH
7645: LD_EXP 45
7649: PPUSH
7650: LD_EXP 51
7654: PPUSH
7655: CALL_OW 296
7659: PUSH
7660: LD_INT 6
7662: LESS
7663: AND
7664: PUSH
7665: LD_EXP 17
7669: NOT
7670: AND
7671: PUSH
7672: LD_EXP 30
7676: NOT
7677: AND
7678: IFFALSE 7784
7680: GO 7682
7682: DISABLE
// begin DialogueOn ;
7683: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7687: LD_EXP 51
7691: PPUSH
7692: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7696: LD_EXP 51
7700: PPUSH
7701: LD_EXP 45
7705: PPUSH
7706: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7710: LD_EXP 45
7714: PPUSH
7715: LD_EXP 51
7719: PPUSH
7720: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7724: LD_EXP 45
7728: PPUSH
7729: LD_STRING DH-Sophia-1
7731: PPUSH
7732: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7736: LD_EXP 51
7740: PPUSH
7741: LD_STRING DS-Sophia-2
7743: PPUSH
7744: CALL_OW 88
// DialogueOff ;
7748: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7752: LD_EXP 51
7756: PPUSH
7757: LD_INT 2
7759: PPUSH
7760: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7764: LD_ADDR_EXP 14
7768: PUSH
7769: LD_EXP 14
7773: PPUSH
7774: LD_EXP 51
7778: PPUSH
7779: CALL 66186 0 2
7783: ST_TO_ADDR
// end ;
7784: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7785: LD_INT 2
7787: PPUSH
7788: LD_EXP 53
7792: PPUSH
7793: CALL_OW 292
7797: PUSH
7798: LD_EXP 45
7802: PPUSH
7803: LD_EXP 53
7807: PPUSH
7808: CALL_OW 296
7812: PUSH
7813: LD_INT 6
7815: LESS
7816: AND
7817: PUSH
7818: LD_EXP 17
7822: NOT
7823: AND
7824: PUSH
7825: LD_EXP 30
7829: NOT
7830: AND
7831: IFFALSE 7927
7833: GO 7835
7835: DISABLE
// begin DialogueOn ;
7836: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7840: LD_EXP 53
7844: PPUSH
7845: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7849: LD_EXP 45
7853: PPUSH
7854: LD_STRING DH-Olaf-1
7856: PPUSH
7857: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7861: LD_EXP 53
7865: PPUSH
7866: LD_STRING DO-Olaf-2
7868: PPUSH
7869: CALL_OW 88
// if explosionsTakenByRussians then
7873: LD_EXP 21
7877: IFFALSE 7891
// Say ( Olaf , DO-Olaf-a-3 ) ;
7879: LD_EXP 53
7883: PPUSH
7884: LD_STRING DO-Olaf-a-3
7886: PPUSH
7887: CALL_OW 88
// DialogueOff ;
7891: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7895: LD_EXP 53
7899: PPUSH
7900: LD_INT 2
7902: PPUSH
7903: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7907: LD_ADDR_EXP 14
7911: PUSH
7912: LD_EXP 14
7916: PPUSH
7917: LD_EXP 53
7921: PPUSH
7922: CALL 66186 0 2
7926: ST_TO_ADDR
// end ;
7927: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7928: LD_INT 2
7930: PPUSH
7931: LD_EXP 47
7935: PPUSH
7936: CALL_OW 292
7940: PUSH
7941: LD_EXP 45
7945: PPUSH
7946: LD_EXP 47
7950: PPUSH
7951: CALL_OW 296
7955: PUSH
7956: LD_INT 6
7958: LESS
7959: AND
7960: PUSH
7961: LD_EXP 17
7965: NOT
7966: AND
7967: PUSH
7968: LD_EXP 30
7972: NOT
7973: AND
7974: IFFALSE 8202
7976: GO 7978
7978: DISABLE
7979: LD_INT 0
7981: PPUSH
7982: PPUSH
// begin DialogueOn ;
7983: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7987: LD_EXP 47
7991: PPUSH
7992: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_INT 18
8003: PPUSH
8004: LD_INT 0
8006: PPUSH
8007: CALL_OW 517
8011: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8012: LD_ADDR_VAR 0 1
8016: PUSH
8017: DOUBLE
8018: LD_INT 1
8020: DEC
8021: ST_TO_ADDR
8022: LD_VAR 0 2
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PUSH
8031: FOR_TO
8032: IFFALSE 8114
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8034: LD_VAR 0 2
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PUSH
8043: LD_VAR 0 1
8047: ARRAY
8048: PPUSH
8049: LD_VAR 0 2
8053: PUSH
8054: LD_INT 2
8056: ARRAY
8057: PUSH
8058: LD_VAR 0 1
8062: ARRAY
8063: PPUSH
8064: LD_INT 2
8066: PPUSH
8067: LD_INT 3
8069: NEG
8070: PPUSH
8071: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8075: LD_VAR 0 2
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PUSH
8084: LD_VAR 0 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 2
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PUSH
8099: LD_VAR 0 1
8103: ARRAY
8104: PPUSH
8105: LD_INT 2
8107: PPUSH
8108: CALL_OW 331
// end ;
8112: GO 8031
8114: POP
8115: POP
// Say ( Mike , DM-Mike-1 ) ;
8116: LD_EXP 47
8120: PPUSH
8121: LD_STRING DM-Mike-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8128: LD_EXP 45
8132: PPUSH
8133: LD_STRING DH-Mike-2
8135: PPUSH
8136: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8140: LD_INT 78
8142: PPUSH
8143: LD_INT 104
8145: PPUSH
8146: CALL_OW 84
// dwait ( 0 0$1 ) ;
8150: LD_INT 35
8152: PPUSH
8153: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8157: LD_EXP 45
8161: PPUSH
8162: CALL_OW 87
// DialogueOff ;
8166: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8170: LD_EXP 47
8174: PPUSH
8175: LD_INT 2
8177: PPUSH
8178: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8182: LD_ADDR_EXP 14
8186: PUSH
8187: LD_EXP 14
8191: PPUSH
8192: LD_EXP 47
8196: PPUSH
8197: CALL 66186 0 2
8201: ST_TO_ADDR
// end ;
8202: PPOPN 2
8204: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8205: LD_EXP 45
8209: PPUSH
8210: LD_EXP 50
8214: PPUSH
8215: CALL_OW 296
8219: PUSH
8220: LD_INT 6
8222: LESS
8223: PUSH
8224: LD_EXP 50
8228: PPUSH
8229: CALL_OW 257
8233: PUSH
8234: LD_INT 33
8236: EQUAL
8237: AND
8238: PUSH
8239: LD_EXP 17
8243: NOT
8244: AND
8245: PUSH
8246: LD_EXP 30
8250: NOT
8251: AND
8252: PUSH
8253: LD_EXP 50
8257: PPUSH
8258: CALL_OW 302
8262: AND
8263: PUSH
8264: LD_EXP 20
8268: AND
8269: PUSH
8270: LD_EXP 50
8274: PUSH
8275: LD_EXP 14
8279: IN
8280: AND
8281: PUSH
8282: LD_EXP 50
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 2
8294: EQUAL
8295: AND
8296: IFFALSE 8325
8298: GO 8300
8300: DISABLE
// begin DialogueOn ;
8301: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8305: LD_EXP 45
8309: PPUSH
8310: LD_STRING DH-Kaia-Revolver-2
8312: PPUSH
8313: CALL_OW 88
// SetClassKaiaRevolver ;
8317: CALL 1761 0 0
// DialogueOff ;
8321: CALL_OW 7
// end ;
8325: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8326: LD_EXP 48
8330: PUSH
8331: LD_EXP 55
8335: AND
8336: PUSH
8337: LD_EXP 55
8341: PPUSH
8342: CALL_OW 255
8346: PUSH
8347: LD_INT 2
8349: NONEQUAL
8350: AND
8351: PUSH
8352: LD_EXP 48
8356: PPUSH
8357: CALL_OW 255
8361: PUSH
8362: LD_INT 2
8364: NONEQUAL
8365: AND
8366: PUSH
8367: LD_EXP 14
8371: PPUSH
8372: LD_INT 22
8374: PUSH
8375: LD_INT 2
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PPUSH
8382: CALL_OW 72
8386: PUSH
8387: LD_INT 5
8389: GREATER
8390: AND
8391: PUSH
8392: LD_EXP 17
8396: NOT
8397: AND
8398: PUSH
8399: LD_EXP 30
8403: NOT
8404: AND
8405: IFFALSE 9122
8407: GO 8409
8409: DISABLE
8410: LD_INT 0
8412: PPUSH
8413: PPUSH
// begin DialogueOn ;
8414: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8418: LD_ADDR_VAR 0 2
8422: PUSH
8423: LD_EXP 46
8427: PPUSH
8428: CALL_OW 302
8432: PUSH
8433: LD_EXP 46
8437: PUSH
8438: LD_EXP 14
8442: IN
8443: AND
8444: PUSH
8445: LD_EXP 46
8449: PPUSH
8450: CALL_OW 255
8454: PUSH
8455: LD_INT 2
8457: EQUAL
8458: AND
8459: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8460: LD_EXP 45
8464: PPUSH
8465: LD_STRING DH-Med-1
8467: PPUSH
8468: CALL_OW 88
// if hasGivi then
8472: LD_VAR 0 2
8476: IFFALSE 8492
// Say ( Givi , DG-Med-2 ) else
8478: LD_EXP 46
8482: PPUSH
8483: LD_STRING DG-Med-2
8485: PPUSH
8486: CALL_OW 88
8490: GO 8597
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8492: LD_EXP 14
8496: PUSH
8497: LD_EXP 56
8501: ISECT
8502: PPUSH
8503: LD_INT 22
8505: PUSH
8506: LD_INT 2
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PPUSH
8527: CALL_OW 72
8531: PUSH
8532: LD_INT 1
8534: ARRAY
8535: PPUSH
8536: LD_STRING DArm-Med-e-2
8538: PPUSH
8539: CALL_OW 88
8543: NOT
8544: IFFALSE 8597
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8546: LD_EXP 14
8550: PUSH
8551: LD_EXP 56
8555: ISECT
8556: PPUSH
8557: LD_INT 22
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 26
8569: PUSH
8570: LD_INT 2
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PPUSH
8581: CALL_OW 72
8585: PUSH
8586: LD_INT 1
8588: ARRAY
8589: PPUSH
8590: LD_STRING DArf-Med-e-2
8592: PPUSH
8593: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8597: LD_INT 154
8599: PPUSH
8600: LD_INT 119
8602: PPUSH
8603: LD_INT 70
8605: PPUSH
8606: CALL 19651 0 3
// Say ( Heike , DH-Med-3 ) ;
8610: LD_EXP 45
8614: PPUSH
8615: LD_STRING DH-Med-3
8617: PPUSH
8618: CALL_OW 88
// if hasGivi then
8622: LD_VAR 0 2
8626: IFFALSE 8642
// Say ( Givi , DG-Med-4 ) else
8628: LD_EXP 46
8632: PPUSH
8633: LD_STRING DG-Med-4
8635: PPUSH
8636: CALL_OW 88
8640: GO 8747
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8642: LD_EXP 14
8646: PUSH
8647: LD_EXP 56
8651: ISECT
8652: PPUSH
8653: LD_INT 22
8655: PUSH
8656: LD_INT 2
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 26
8665: PUSH
8666: LD_INT 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 72
8681: PUSH
8682: LD_INT 1
8684: ARRAY
8685: PPUSH
8686: LD_STRING DArm-Med-e-4
8688: PPUSH
8689: CALL_OW 88
8693: NOT
8694: IFFALSE 8747
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8696: LD_EXP 14
8700: PUSH
8701: LD_EXP 56
8705: ISECT
8706: PPUSH
8707: LD_INT 22
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 26
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 72
8735: PUSH
8736: LD_INT 1
8738: ARRAY
8739: PPUSH
8740: LD_STRING DArf-Med-e-4
8742: PPUSH
8743: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_EXP 50
8756: PPUSH
8757: CALL_OW 302
8761: PUSH
8762: LD_EXP 50
8766: PUSH
8767: LD_EXP 14
8771: IN
8772: AND
8773: PUSH
8774: LD_EXP 50
8778: PPUSH
8779: CALL_OW 255
8783: PUSH
8784: LD_INT 2
8786: EQUAL
8787: AND
8788: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8789: LD_EXP 47
8793: PPUSH
8794: CALL_OW 302
8798: PUSH
8799: LD_EXP 47
8803: PUSH
8804: LD_EXP 14
8808: IN
8809: AND
8810: PUSH
8811: LD_EXP 50
8815: PPUSH
8816: CALL_OW 255
8820: PUSH
8821: LD_INT 2
8823: EQUAL
8824: AND
8825: IFFALSE 8857
// begin Say ( Mike , DM-Med-5 ) ;
8827: LD_EXP 47
8831: PPUSH
8832: LD_STRING DM-Med-5
8834: PPUSH
8835: CALL_OW 88
// if hasKaia then
8839: LD_VAR 0 1
8843: IFFALSE 8857
// Say ( Kaia , DK-Med-6 ) ;
8845: LD_EXP 50
8849: PPUSH
8850: LD_STRING DK-Med-6
8852: PPUSH
8853: CALL_OW 88
// end ; if hasKaia then
8857: LD_VAR 0 1
8861: IFFALSE 9102
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8863: LD_INT 175
8865: PPUSH
8866: LD_INT 123
8868: PPUSH
8869: LD_INT 2
8871: PPUSH
8872: LD_INT 8
8874: NEG
8875: PPUSH
8876: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8880: LD_INT 175
8882: PPUSH
8883: LD_INT 123
8885: PPUSH
8886: LD_INT 2
8888: PPUSH
8889: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8893: LD_INT 175
8895: PPUSH
8896: LD_INT 123
8898: PPUSH
8899: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8903: LD_EXP 50
8907: PPUSH
8908: LD_STRING DK-Med-7
8910: PPUSH
8911: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8915: LD_EXP 50
8919: PPUSH
8920: LD_STRING DK-Med-8
8922: PPUSH
8923: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8927: LD_EXP 52
8931: PPUSH
8932: CALL_OW 302
8936: PUSH
8937: LD_EXP 52
8941: PUSH
8942: LD_EXP 14
8946: IN
8947: AND
8948: PUSH
8949: LD_EXP 52
8953: PPUSH
8954: CALL_OW 255
8958: PUSH
8959: LD_INT 2
8961: EQUAL
8962: AND
8963: IFFALSE 9021
// begin Say ( Markov , DMar-Med-9 ) ;
8965: LD_EXP 52
8969: PPUSH
8970: LD_STRING DMar-Med-9
8972: PPUSH
8973: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8977: LD_EXP 50
8981: PPUSH
8982: LD_STRING DK-Med-10
8984: PPUSH
8985: CALL_OW 88
// if hasGivi then
8989: LD_VAR 0 2
8993: IFFALSE 9009
// Say ( Kaia , DK-Med-11 ) else
8995: LD_EXP 50
8999: PPUSH
9000: LD_STRING DK-Med-11
9002: PPUSH
9003: CALL_OW 88
9007: GO 9021
// Say ( Kaia , DK-Med-a-11 ) ;
9009: LD_EXP 50
9013: PPUSH
9014: LD_STRING DK-Med-a-11
9016: PPUSH
9017: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9021: LD_EXP 49
9025: PPUSH
9026: CALL_OW 302
9030: PUSH
9031: LD_EXP 49
9035: PUSH
9036: LD_EXP 14
9040: IN
9041: AND
9042: PUSH
9043: LD_EXP 49
9047: PPUSH
9048: CALL_OW 255
9052: PUSH
9053: LD_INT 2
9055: EQUAL
9056: AND
9057: IFFALSE 9102
// begin Say ( Kamil , DKam-Med-12 ) ;
9059: LD_EXP 49
9063: PPUSH
9064: LD_STRING DKam-Med-12
9066: PPUSH
9067: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9071: LD_EXP 49
9075: PPUSH
9076: LD_STRING DKam-Med-13
9078: PPUSH
9079: CALL_OW 88
// if not hasExplosionCollected then
9083: LD_EXP 23
9087: NOT
9088: IFFALSE 9102
// Say ( Heike , DH-Med-d-14 ) ;
9090: LD_EXP 45
9094: PPUSH
9095: LD_STRING DH-Med-d-14
9097: PPUSH
9098: CALL_OW 88
// end ; end ; DialogueOff ;
9102: CALL_OW 7
// adminAreaDiscovered := true ;
9106: LD_ADDR_EXP 22
9110: PUSH
9111: LD_INT 1
9113: ST_TO_ADDR
// laundryAllowed := true ;
9114: LD_ADDR_EXP 26
9118: PUSH
9119: LD_INT 1
9121: ST_TO_ADDR
// end ;
9122: PPOPN 2
9124: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9125: LD_EXP 48
9129: NOT
9130: PUSH
9131: LD_EXP 55
9135: AND
9136: PUSH
9137: LD_EXP 55
9141: PUSH
9142: LD_EXP 14
9146: IN
9147: NOT
9148: AND
9149: PUSH
9150: LD_EXP 14
9154: PPUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PUSH
9170: LD_INT 4
9172: GREATER
9173: AND
9174: PUSH
9175: LD_EXP 17
9179: NOT
9180: AND
9181: PUSH
9182: LD_EXP 30
9186: NOT
9187: AND
9188: IFFALSE 9905
9190: GO 9192
9192: DISABLE
9193: LD_INT 0
9195: PPUSH
9196: PPUSH
// begin DialogueOn ;
9197: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9201: LD_ADDR_VAR 0 1
9205: PUSH
9206: LD_EXP 46
9210: PPUSH
9211: CALL_OW 302
9215: PUSH
9216: LD_EXP 46
9220: PUSH
9221: LD_EXP 14
9225: IN
9226: AND
9227: PUSH
9228: LD_EXP 46
9232: PPUSH
9233: CALL_OW 255
9237: PUSH
9238: LD_INT 2
9240: EQUAL
9241: AND
9242: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9243: LD_EXP 45
9247: PPUSH
9248: LD_STRING DH-Med-a-1
9250: PPUSH
9251: CALL_OW 88
// if hasGivi then
9255: LD_VAR 0 1
9259: IFFALSE 9275
// Say ( Givi , DG-Med-a-2 ) else
9261: LD_EXP 46
9265: PPUSH
9266: LD_STRING DG-Med-a-2
9268: PPUSH
9269: CALL_OW 88
9273: GO 9380
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9275: LD_EXP 14
9279: PUSH
9280: LD_EXP 56
9284: ISECT
9285: PPUSH
9286: LD_INT 22
9288: PUSH
9289: LD_INT 2
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 26
9298: PUSH
9299: LD_INT 1
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PPUSH
9310: CALL_OW 72
9314: PUSH
9315: LD_INT 1
9317: ARRAY
9318: PPUSH
9319: LD_STRING DArm-Med-f-2
9321: PPUSH
9322: CALL_OW 88
9326: NOT
9327: IFFALSE 9380
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9329: LD_EXP 14
9333: PUSH
9334: LD_EXP 56
9338: ISECT
9339: PPUSH
9340: LD_INT 22
9342: PUSH
9343: LD_INT 2
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 26
9352: PUSH
9353: LD_INT 2
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: PUSH
9369: LD_INT 1
9371: ARRAY
9372: PPUSH
9373: LD_STRING DArf-Med-f-2
9375: PPUSH
9376: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9380: LD_INT 154
9382: PPUSH
9383: LD_INT 119
9385: PPUSH
9386: LD_INT 70
9388: PPUSH
9389: CALL 19651 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9393: LD_EXP 45
9397: PPUSH
9398: LD_STRING DH-Med-a-3
9400: PPUSH
9401: CALL_OW 88
// if hasGivi then
9405: LD_VAR 0 1
9409: IFFALSE 9425
// Say ( Givi , DG-Med-a-4 ) else
9411: LD_EXP 46
9415: PPUSH
9416: LD_STRING DG-Med-a-4
9418: PPUSH
9419: CALL_OW 88
9423: GO 9530
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9425: LD_EXP 14
9429: PUSH
9430: LD_EXP 56
9434: ISECT
9435: PPUSH
9436: LD_INT 22
9438: PUSH
9439: LD_INT 2
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 26
9448: PUSH
9449: LD_INT 1
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 72
9464: PUSH
9465: LD_INT 1
9467: ARRAY
9468: PPUSH
9469: LD_STRING DArm-Med-f-4
9471: PPUSH
9472: CALL_OW 88
9476: NOT
9477: IFFALSE 9530
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9479: LD_EXP 14
9483: PUSH
9484: LD_EXP 56
9488: ISECT
9489: PPUSH
9490: LD_INT 22
9492: PUSH
9493: LD_INT 2
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 26
9502: PUSH
9503: LD_INT 2
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PPUSH
9514: CALL_OW 72
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: PPUSH
9523: LD_STRING DArf-Med-f-4
9525: PPUSH
9526: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: LD_EXP 50
9539: PPUSH
9540: CALL_OW 302
9544: PUSH
9545: LD_EXP 50
9549: PUSH
9550: LD_EXP 14
9554: IN
9555: AND
9556: PUSH
9557: LD_EXP 50
9561: PPUSH
9562: CALL_OW 255
9566: PUSH
9567: LD_INT 2
9569: EQUAL
9570: AND
9571: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9572: LD_EXP 47
9576: PPUSH
9577: CALL_OW 302
9581: PUSH
9582: LD_EXP 47
9586: PUSH
9587: LD_EXP 14
9591: IN
9592: AND
9593: PUSH
9594: LD_EXP 47
9598: PPUSH
9599: CALL_OW 255
9603: PUSH
9604: LD_INT 2
9606: EQUAL
9607: AND
9608: IFFALSE 9640
// begin Say ( Mike , DM-Med-5 ) ;
9610: LD_EXP 47
9614: PPUSH
9615: LD_STRING DM-Med-5
9617: PPUSH
9618: CALL_OW 88
// if hasKaia then
9622: LD_VAR 0 2
9626: IFFALSE 9640
// Say ( Kaia , DK-Med-6 ) ;
9628: LD_EXP 50
9632: PPUSH
9633: LD_STRING DK-Med-6
9635: PPUSH
9636: CALL_OW 88
// end ; if hasKaia then
9640: LD_VAR 0 2
9644: IFFALSE 9885
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9646: LD_INT 175
9648: PPUSH
9649: LD_INT 123
9651: PPUSH
9652: LD_INT 2
9654: PPUSH
9655: LD_INT 8
9657: NEG
9658: PPUSH
9659: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9663: LD_INT 175
9665: PPUSH
9666: LD_INT 123
9668: PPUSH
9669: LD_INT 2
9671: PPUSH
9672: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9676: LD_INT 175
9678: PPUSH
9679: LD_INT 123
9681: PPUSH
9682: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9686: LD_EXP 50
9690: PPUSH
9691: LD_STRING DK-Med-7
9693: PPUSH
9694: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9698: LD_EXP 50
9702: PPUSH
9703: LD_STRING DK-Med-8
9705: PPUSH
9706: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9710: LD_EXP 52
9714: PPUSH
9715: CALL_OW 302
9719: PUSH
9720: LD_EXP 52
9724: PUSH
9725: LD_EXP 14
9729: IN
9730: AND
9731: PUSH
9732: LD_EXP 52
9736: PPUSH
9737: CALL_OW 255
9741: PUSH
9742: LD_INT 2
9744: EQUAL
9745: AND
9746: IFFALSE 9804
// begin Say ( Markov , DMar-Med-9 ) ;
9748: LD_EXP 52
9752: PPUSH
9753: LD_STRING DMar-Med-9
9755: PPUSH
9756: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9760: LD_EXP 50
9764: PPUSH
9765: LD_STRING DK-Med-10
9767: PPUSH
9768: CALL_OW 88
// if hasGivi then
9772: LD_VAR 0 1
9776: IFFALSE 9792
// Say ( Kaia , DK-Med-11 ) else
9778: LD_EXP 50
9782: PPUSH
9783: LD_STRING DK-Med-11
9785: PPUSH
9786: CALL_OW 88
9790: GO 9804
// Say ( Kaia , DK-Med-a-11 ) ;
9792: LD_EXP 50
9796: PPUSH
9797: LD_STRING DK-Med-a-11
9799: PPUSH
9800: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9804: LD_EXP 49
9808: PPUSH
9809: CALL_OW 302
9813: PUSH
9814: LD_EXP 49
9818: PUSH
9819: LD_EXP 14
9823: IN
9824: AND
9825: PUSH
9826: LD_EXP 49
9830: PPUSH
9831: CALL_OW 255
9835: PUSH
9836: LD_INT 2
9838: EQUAL
9839: AND
9840: IFFALSE 9885
// begin Say ( Kamil , DKam-Med-12 ) ;
9842: LD_EXP 49
9846: PPUSH
9847: LD_STRING DKam-Med-12
9849: PPUSH
9850: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9854: LD_EXP 49
9858: PPUSH
9859: LD_STRING DKam-Med-13
9861: PPUSH
9862: CALL_OW 88
// if not hasExplosionCollected then
9866: LD_EXP 23
9870: NOT
9871: IFFALSE 9885
// Say ( Heike , DH-Med-d-14 ) ;
9873: LD_EXP 45
9877: PPUSH
9878: LD_STRING DH-Med-d-14
9880: PPUSH
9881: CALL_OW 88
// end ; end ; DialogueOff ;
9885: CALL_OW 7
// adminAreaDiscovered := true ;
9889: LD_ADDR_EXP 22
9893: PUSH
9894: LD_INT 1
9896: ST_TO_ADDR
// laundryAllowed := true ;
9897: LD_ADDR_EXP 26
9901: PUSH
9902: LD_INT 1
9904: ST_TO_ADDR
// end ;
9905: PPOPN 2
9907: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9908: LD_EXP 48
9912: PUSH
9913: LD_EXP 55
9917: NOT
9918: AND
9919: PUSH
9920: LD_EXP 48
9924: PUSH
9925: LD_EXP 14
9929: IN
9930: NOT
9931: AND
9932: PUSH
9933: LD_EXP 14
9937: PPUSH
9938: LD_INT 22
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: PUSH
9953: LD_INT 4
9955: GREATER
9956: AND
9957: PUSH
9958: LD_EXP 17
9962: NOT
9963: AND
9964: PUSH
9965: LD_EXP 30
9969: NOT
9970: AND
9971: IFFALSE 10688
9973: GO 9975
9975: DISABLE
9976: LD_INT 0
9978: PPUSH
9979: PPUSH
// begin DialogueOn ;
9980: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9984: LD_ADDR_VAR 0 1
9988: PUSH
9989: LD_EXP 46
9993: PPUSH
9994: CALL_OW 302
9998: PUSH
9999: LD_EXP 46
10003: PUSH
10004: LD_EXP 14
10008: IN
10009: AND
10010: PUSH
10011: LD_EXP 46
10015: PPUSH
10016: CALL_OW 255
10020: PUSH
10021: LD_INT 2
10023: EQUAL
10024: AND
10025: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10026: LD_EXP 45
10030: PPUSH
10031: LD_STRING DH-Med-b-1
10033: PPUSH
10034: CALL_OW 88
// if hasGivi then
10038: LD_VAR 0 1
10042: IFFALSE 10058
// Say ( Givi , DG-Med-a-2 ) else
10044: LD_EXP 46
10048: PPUSH
10049: LD_STRING DG-Med-a-2
10051: PPUSH
10052: CALL_OW 88
10056: GO 10163
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10058: LD_EXP 14
10062: PUSH
10063: LD_EXP 56
10067: ISECT
10068: PPUSH
10069: LD_INT 22
10071: PUSH
10072: LD_INT 2
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 26
10081: PUSH
10082: LD_INT 1
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PPUSH
10093: CALL_OW 72
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: LD_STRING DArm-Med-f-2
10104: PPUSH
10105: CALL_OW 88
10109: NOT
10110: IFFALSE 10163
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10112: LD_EXP 14
10116: PUSH
10117: LD_EXP 56
10121: ISECT
10122: PPUSH
10123: LD_INT 22
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 26
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 72
10151: PUSH
10152: LD_INT 1
10154: ARRAY
10155: PPUSH
10156: LD_STRING DArf-Med-f-2
10158: PPUSH
10159: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10163: LD_INT 154
10165: PPUSH
10166: LD_INT 119
10168: PPUSH
10169: LD_INT 70
10171: PPUSH
10172: CALL 19651 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10176: LD_EXP 45
10180: PPUSH
10181: LD_STRING DH-Med-a-3
10183: PPUSH
10184: CALL_OW 88
// if hasGivi then
10188: LD_VAR 0 1
10192: IFFALSE 10208
// Say ( Givi , DG-Med-a-4 ) else
10194: LD_EXP 46
10198: PPUSH
10199: LD_STRING DG-Med-a-4
10201: PPUSH
10202: CALL_OW 88
10206: GO 10313
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10208: LD_EXP 14
10212: PUSH
10213: LD_EXP 56
10217: ISECT
10218: PPUSH
10219: LD_INT 22
10221: PUSH
10222: LD_INT 2
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 26
10231: PUSH
10232: LD_INT 1
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PPUSH
10243: CALL_OW 72
10247: PUSH
10248: LD_INT 1
10250: ARRAY
10251: PPUSH
10252: LD_STRING DArm-Med-f-4
10254: PPUSH
10255: CALL_OW 88
10259: NOT
10260: IFFALSE 10313
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10262: LD_EXP 14
10266: PUSH
10267: LD_EXP 56
10271: ISECT
10272: PPUSH
10273: LD_INT 22
10275: PUSH
10276: LD_INT 2
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 26
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PPUSH
10297: CALL_OW 72
10301: PUSH
10302: LD_INT 1
10304: ARRAY
10305: PPUSH
10306: LD_STRING DArf-Med-f-4
10308: PPUSH
10309: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10313: LD_ADDR_VAR 0 2
10317: PUSH
10318: LD_EXP 50
10322: PPUSH
10323: CALL_OW 302
10327: PUSH
10328: LD_EXP 50
10332: PUSH
10333: LD_EXP 14
10337: IN
10338: AND
10339: PUSH
10340: LD_EXP 50
10344: PPUSH
10345: CALL_OW 255
10349: PUSH
10350: LD_INT 2
10352: EQUAL
10353: AND
10354: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10355: LD_EXP 47
10359: PPUSH
10360: CALL_OW 302
10364: PUSH
10365: LD_EXP 47
10369: PUSH
10370: LD_EXP 14
10374: IN
10375: AND
10376: PUSH
10377: LD_EXP 47
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 2
10389: EQUAL
10390: AND
10391: IFFALSE 10423
// begin Say ( Mike , DM-Med-5 ) ;
10393: LD_EXP 47
10397: PPUSH
10398: LD_STRING DM-Med-5
10400: PPUSH
10401: CALL_OW 88
// if hasKaia then
10405: LD_VAR 0 2
10409: IFFALSE 10423
// Say ( Kaia , DK-Med-6 ) ;
10411: LD_EXP 50
10415: PPUSH
10416: LD_STRING DK-Med-6
10418: PPUSH
10419: CALL_OW 88
// end ; if hasKaia then
10423: LD_VAR 0 2
10427: IFFALSE 10668
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10429: LD_INT 175
10431: PPUSH
10432: LD_INT 123
10434: PPUSH
10435: LD_INT 2
10437: PPUSH
10438: LD_INT 8
10440: NEG
10441: PPUSH
10442: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10446: LD_INT 175
10448: PPUSH
10449: LD_INT 123
10451: PPUSH
10452: LD_INT 2
10454: PPUSH
10455: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10459: LD_INT 175
10461: PPUSH
10462: LD_INT 123
10464: PPUSH
10465: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10469: LD_EXP 50
10473: PPUSH
10474: LD_STRING DK-Med-7
10476: PPUSH
10477: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10481: LD_EXP 50
10485: PPUSH
10486: LD_STRING DK-Med-8
10488: PPUSH
10489: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10493: LD_EXP 52
10497: PPUSH
10498: CALL_OW 302
10502: PUSH
10503: LD_EXP 52
10507: PUSH
10508: LD_EXP 14
10512: IN
10513: AND
10514: PUSH
10515: LD_EXP 52
10519: PPUSH
10520: CALL_OW 255
10524: PUSH
10525: LD_INT 2
10527: EQUAL
10528: AND
10529: IFFALSE 10587
// begin Say ( Markov , DMar-Med-9 ) ;
10531: LD_EXP 52
10535: PPUSH
10536: LD_STRING DMar-Med-9
10538: PPUSH
10539: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10543: LD_EXP 50
10547: PPUSH
10548: LD_STRING DK-Med-10
10550: PPUSH
10551: CALL_OW 88
// if hasGivi then
10555: LD_VAR 0 1
10559: IFFALSE 10575
// Say ( Kaia , DK-Med-11 ) else
10561: LD_EXP 50
10565: PPUSH
10566: LD_STRING DK-Med-11
10568: PPUSH
10569: CALL_OW 88
10573: GO 10587
// Say ( Kaia , DK-Med-a-11 ) ;
10575: LD_EXP 50
10579: PPUSH
10580: LD_STRING DK-Med-a-11
10582: PPUSH
10583: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10587: LD_EXP 49
10591: PPUSH
10592: CALL_OW 302
10596: PUSH
10597: LD_EXP 49
10601: PUSH
10602: LD_EXP 14
10606: IN
10607: AND
10608: PUSH
10609: LD_EXP 49
10613: PPUSH
10614: CALL_OW 255
10618: PUSH
10619: LD_INT 2
10621: EQUAL
10622: AND
10623: IFFALSE 10668
// begin Say ( Kamil , DKam-Med-12 ) ;
10625: LD_EXP 49
10629: PPUSH
10630: LD_STRING DKam-Med-12
10632: PPUSH
10633: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10637: LD_EXP 49
10641: PPUSH
10642: LD_STRING DKam-Med-13
10644: PPUSH
10645: CALL_OW 88
// if not hasExplosionCollected then
10649: LD_EXP 23
10653: NOT
10654: IFFALSE 10668
// Say ( Heike , DH-Med-d-14 ) ;
10656: LD_EXP 45
10660: PPUSH
10661: LD_STRING DH-Med-d-14
10663: PPUSH
10664: CALL_OW 88
// end ; end ; DialogueOff ;
10668: CALL_OW 7
// adminAreaDiscovered := true ;
10672: LD_ADDR_EXP 22
10676: PUSH
10677: LD_INT 1
10679: ST_TO_ADDR
// laundryAllowed := true ;
10680: LD_ADDR_EXP 26
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
// end ;
10688: PPOPN 2
10690: END
// every 0 0$1 trigger laundryAllowed do
10691: LD_EXP 26
10695: IFFALSE 10707
10697: GO 10699
10699: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10700: LD_STRING M1-laundry
10702: PPUSH
10703: CALL_OW 337
10707: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10708: LD_EXP 48
10712: NOT
10713: PUSH
10714: LD_EXP 55
10718: NOT
10719: AND
10720: PUSH
10721: LD_EXP 53
10725: PPUSH
10726: CALL_OW 302
10730: AND
10731: PUSH
10732: LD_EXP 53
10736: PUSH
10737: LD_EXP 14
10741: IN
10742: AND
10743: PUSH
10744: LD_EXP 53
10748: PPUSH
10749: CALL_OW 255
10753: PUSH
10754: LD_INT 2
10756: EQUAL
10757: AND
10758: PUSH
10759: LD_EXP 17
10763: NOT
10764: AND
10765: PUSH
10766: LD_EXP 30
10770: NOT
10771: AND
10772: IFFALSE 10928
10774: GO 10776
10776: DISABLE
// begin DialogueOn ;
10777: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10781: LD_INT 152
10783: PPUSH
10784: LD_INT 115
10786: PPUSH
10787: LD_INT 2
10789: PPUSH
10790: LD_INT 16
10792: NEG
10793: PPUSH
10794: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10798: LD_INT 152
10800: PPUSH
10801: LD_INT 115
10803: PPUSH
10804: LD_INT 2
10806: PPUSH
10807: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10811: LD_INT 152
10813: PPUSH
10814: LD_INT 115
10816: PPUSH
10817: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10821: LD_EXP 53
10825: PPUSH
10826: LD_STRING DO-Med-c-1
10828: PPUSH
10829: CALL_OW 88
// if not hasExplosionCollected then
10833: LD_EXP 23
10837: NOT
10838: IFFALSE 10854
// Say ( Heike , DH-Med-d-14 ) else
10840: LD_EXP 45
10844: PPUSH
10845: LD_STRING DH-Med-d-14
10847: PPUSH
10848: CALL_OW 88
10852: GO 10916
// begin Say ( Heike , DH-Med-c-2 ) ;
10854: LD_EXP 45
10858: PPUSH
10859: LD_STRING DH-Med-c-2
10861: PPUSH
10862: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10866: LD_EXP 50
10870: PPUSH
10871: CALL_OW 302
10875: PUSH
10876: LD_EXP 50
10880: PUSH
10881: LD_EXP 14
10885: IN
10886: AND
10887: PUSH
10888: LD_EXP 50
10892: PPUSH
10893: CALL_OW 255
10897: PUSH
10898: LD_INT 2
10900: EQUAL
10901: AND
10902: IFFALSE 10916
// Say ( Kaia , DK-Med-c-3 ) ;
10904: LD_EXP 50
10908: PPUSH
10909: LD_STRING DK-Med-c-3
10911: PPUSH
10912: CALL_OW 88
// end ; DialogueOff ;
10916: CALL_OW 7
// adminAreaDiscovered := true ;
10920: LD_ADDR_EXP 22
10924: PUSH
10925: LD_INT 1
10927: ST_TO_ADDR
// end ;
10928: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10929: LD_EXP 50
10933: PPUSH
10934: CALL_OW 256
10938: PUSH
10939: LD_INT 250
10941: LESS
10942: PUSH
10943: LD_EXP 50
10947: PUSH
10948: LD_EXP 14
10952: IN
10953: AND
10954: PUSH
10955: LD_EXP 17
10959: AND
10960: PUSH
10961: LD_EXP 24
10965: AND
10966: IFFALSE 11095
10968: GO 10970
10970: DISABLE
// begin DialogueOn ;
10971: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10975: LD_EXP 50
10979: PPUSH
10980: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10984: LD_EXP 50
10988: PPUSH
10989: LD_STRING DK-death-1
10991: PPUSH
10992: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10996: LD_EXP 45
11000: PPUSH
11001: LD_STRING DH-death-2
11003: PPUSH
11004: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11008: LD_EXP 50
11012: PPUSH
11013: LD_STRING DK-death-3
11015: PPUSH
11016: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11020: LD_EXP 50
11024: PPUSH
11025: LD_STRING DK-death-4
11027: PPUSH
11028: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11032: LD_EXP 50
11036: PPUSH
11037: LD_INT 8
11039: PPUSH
11040: CALL_OW 235
// ComStop ( Kaia ) ;
11044: LD_EXP 50
11048: PPUSH
11049: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11053: LD_INT 8
11055: PPUSH
11056: LD_INT 2
11058: PPUSH
11059: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11063: LD_ADDR_EXP 14
11067: PUSH
11068: LD_EXP 14
11072: PUSH
11073: LD_EXP 50
11077: DIFF
11078: ST_TO_ADDR
// DialogueOff ;
11079: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11083: LD_EXP 47
11087: PPUSH
11088: LD_STRING DM-death-5
11090: PPUSH
11091: CALL_OW 88
// end ;
11095: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11096: LD_EXP 25
11100: NOT
11101: PUSH
11102: LD_EXP 30
11106: NOT
11107: AND
11108: PUSH
11109: LD_EXP 58
11113: PUSH
11114: LD_EXP 14
11118: IN
11119: NOT
11120: AND
11121: PUSH
11122: LD_INT 2
11124: PPUSH
11125: LD_EXP 58
11129: PPUSH
11130: CALL_OW 292
11134: AND
11135: PUSH
11136: LD_EXP 45
11140: PPUSH
11141: LD_EXP 58
11145: PPUSH
11146: CALL_OW 296
11150: PUSH
11151: LD_INT 6
11153: LESS
11154: AND
11155: PUSH
11156: LD_EXP 17
11160: NOT
11161: AND
11162: IFFALSE 11386
11164: GO 11166
11166: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11167: LD_EXP 58
11171: PPUSH
11172: LD_EXP 45
11176: PPUSH
11177: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11181: LD_EXP 45
11185: PPUSH
11186: LD_EXP 58
11190: PPUSH
11191: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11195: LD_INT 10
11197: PPUSH
11198: CALL_OW 67
// DialogueOn ;
11202: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11206: LD_EXP 58
11210: PPUSH
11211: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11215: LD_EXP 45
11219: PPUSH
11220: LD_STRING DH-Deal-1
11222: PPUSH
11223: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11227: LD_EXP 58
11231: PPUSH
11232: LD_STRING DJ-Deal-2
11234: PPUSH
11235: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11239: LD_EXP 45
11243: PPUSH
11244: LD_STRING DH-Deal-3
11246: PPUSH
11247: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11251: LD_EXP 58
11255: PPUSH
11256: LD_STRING DJ-Deal-4
11258: PPUSH
11259: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11263: LD_EXP 58
11267: PPUSH
11268: LD_STRING DJ-Deal-5
11270: PPUSH
11271: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11275: LD_EXP 58
11279: PPUSH
11280: LD_STRING DJ-Deal-6
11282: PPUSH
11283: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11287: LD_EXP 58
11291: PPUSH
11292: LD_STRING DJ-Deal-7
11294: PPUSH
11295: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11299: LD_EXP 45
11303: PPUSH
11304: LD_STRING DH-Deal-8
11306: PPUSH
11307: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11311: LD_EXP 45
11315: PPUSH
11316: LD_STRING DH-Deal-9
11318: PPUSH
11319: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11323: LD_EXP 58
11327: PPUSH
11328: LD_STRING DJ-Deal-10
11330: PPUSH
11331: CALL_OW 88
// DialogueOff ;
11335: CALL_OW 7
// contactWithAmerican := true ;
11339: LD_ADDR_EXP 25
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11347: LD_STRING M1-american-out
11349: PPUSH
11350: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11354: LD_EXP 58
11358: PPUSH
11359: LD_INT 2
11361: PPUSH
11362: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11366: LD_ADDR_EXP 14
11370: PUSH
11371: LD_EXP 14
11375: PPUSH
11376: LD_EXP 58
11380: PPUSH
11381: CALL 66186 0 2
11385: ST_TO_ADDR
// end ;
11386: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11387: LD_EXP 25
11391: PUSH
11392: LD_EXP 30
11396: NOT
11397: AND
11398: PUSH
11399: LD_EXP 58
11403: PUSH
11404: LD_EXP 14
11408: IN
11409: NOT
11410: AND
11411: PUSH
11412: LD_INT 2
11414: PPUSH
11415: LD_EXP 58
11419: PPUSH
11420: CALL_OW 292
11424: AND
11425: PUSH
11426: LD_EXP 45
11430: PPUSH
11431: LD_EXP 58
11435: PPUSH
11436: CALL_OW 296
11440: PUSH
11441: LD_INT 6
11443: LESS
11444: AND
11445: PUSH
11446: LD_EXP 17
11450: NOT
11451: AND
11452: IFFALSE 11577
11454: GO 11456
11456: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11457: LD_EXP 58
11461: PPUSH
11462: LD_EXP 45
11466: PPUSH
11467: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11471: LD_EXP 45
11475: PPUSH
11476: LD_EXP 58
11480: PPUSH
11481: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11485: LD_INT 10
11487: PPUSH
11488: CALL_OW 67
// DialogueOn ;
11492: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11496: LD_EXP 58
11500: PPUSH
11501: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11505: LD_EXP 58
11509: PPUSH
11510: LD_STRING DJ-Escort-1
11512: PPUSH
11513: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11517: LD_EXP 45
11521: PPUSH
11522: LD_STRING DH-Escort-2
11524: PPUSH
11525: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11529: LD_EXP 58
11533: PPUSH
11534: LD_STRING DJ-Escort-3
11536: PPUSH
11537: CALL_OW 88
// DialogueOff ;
11541: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11545: LD_EXP 58
11549: PPUSH
11550: LD_INT 2
11552: PPUSH
11553: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11557: LD_ADDR_EXP 14
11561: PUSH
11562: LD_EXP 14
11566: PPUSH
11567: LD_EXP 58
11571: PPUSH
11572: CALL 66186 0 2
11576: ST_TO_ADDR
// end ;
11577: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11578: LD_EXP 25
11582: PUSH
11583: LD_EXP 30
11587: NOT
11588: AND
11589: PUSH
11590: LD_EXP 57
11594: PUSH
11595: LD_EXP 14
11599: DIFF
11600: PPUSH
11601: LD_INT 22
11603: PUSH
11604: LD_INT 4
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 120
11616: PUSH
11617: LD_INT 1
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 101
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 72
11647: AND
11648: PUSH
11649: LD_EXP 17
11653: NOT
11654: AND
11655: IFFALSE 11882
11657: GO 11659
11659: DISABLE
11660: LD_INT 0
11662: PPUSH
// begin enable ;
11663: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11664: LD_ADDR_VAR 0 1
11668: PUSH
11669: LD_EXP 57
11673: PUSH
11674: LD_EXP 14
11678: DIFF
11679: PPUSH
11680: LD_INT 22
11682: PUSH
11683: LD_INT 4
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 91
11692: PUSH
11693: LD_EXP 45
11697: PUSH
11698: LD_INT 6
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 101
11708: PUSH
11709: LD_INT 2
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: PPUSH
11721: CALL_OW 72
11725: PPUSH
11726: LD_EXP 45
11730: PPUSH
11731: CALL_OW 74
11735: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11736: LD_VAR 0 1
11740: PPUSH
11741: LD_EXP 45
11745: PPUSH
11746: CALL_OW 296
11750: PUSH
11751: LD_INT 6
11753: LESS
11754: IFFALSE 11882
// begin DialogueOn ;
11756: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11760: LD_VAR 0 1
11764: PPUSH
11765: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11769: LD_EXP 45
11773: PPUSH
11774: LD_STRING DH-USsol-1
11776: PPUSH
11777: CALL_OW 88
// if un <> Jerry then
11781: LD_VAR 0 1
11785: PUSH
11786: LD_EXP 60
11790: NONEQUAL
11791: IFFALSE 11834
// if GetSex ( un ) = sex_male then
11793: LD_VAR 0 1
11797: PPUSH
11798: CALL_OW 258
11802: PUSH
11803: LD_INT 1
11805: EQUAL
11806: IFFALSE 11822
// Say ( un , DUSM-USsol-2 ) else
11808: LD_VAR 0 1
11812: PPUSH
11813: LD_STRING DUSM-USsol-2
11815: PPUSH
11816: CALL_OW 88
11820: GO 11834
// Say ( un , DUSF-USsol-2 ) ;
11822: LD_VAR 0 1
11826: PPUSH
11827: LD_STRING DUSF-USsol-2
11829: PPUSH
11830: CALL_OW 88
// DialogueOff ;
11834: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11838: LD_ADDR_EXP 14
11842: PUSH
11843: LD_EXP 14
11847: PPUSH
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL 66186 0 2
11857: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11858: LD_VAR 0 1
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 109
// SetSide ( un , 2 ) ;
11870: LD_VAR 0 1
11874: PPUSH
11875: LD_INT 2
11877: PPUSH
11878: CALL_OW 235
// end ; end ;
11882: PPOPN 1
11884: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11885: LD_EXP 56
11889: PUSH
11890: LD_EXP 30
11894: NOT
11895: AND
11896: PUSH
11897: LD_EXP 56
11901: PUSH
11902: LD_EXP 14
11906: DIFF
11907: PPUSH
11908: LD_INT 3
11910: PUSH
11911: LD_INT 120
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 91
11927: PUSH
11928: LD_EXP 45
11932: PUSH
11933: LD_INT 6
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 101
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 72
11960: AND
11961: PUSH
11962: LD_EXP 17
11966: NOT
11967: AND
11968: IFFALSE 12183
11970: GO 11972
11972: DISABLE
11973: LD_INT 0
11975: PPUSH
// begin enable ;
11976: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11977: LD_ADDR_VAR 0 1
11981: PUSH
11982: LD_EXP 56
11986: PUSH
11987: LD_EXP 14
11991: DIFF
11992: PPUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 5
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 91
12005: PUSH
12006: LD_EXP 45
12010: PUSH
12011: LD_INT 6
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 101
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 72
12038: PPUSH
12039: LD_EXP 45
12043: PPUSH
12044: CALL_OW 74
12048: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12049: LD_VAR 0 1
12053: PPUSH
12054: LD_EXP 45
12058: PPUSH
12059: CALL_OW 296
12063: PUSH
12064: LD_INT 6
12066: LESS
12067: IFFALSE 12183
// begin DialogueOn ;
12069: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12082: LD_EXP 45
12086: PPUSH
12087: LD_STRING DH-USsol-1
12089: PPUSH
12090: CALL_OW 88
// if GetSex ( un ) = sex_male then
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 258
12103: PUSH
12104: LD_INT 1
12106: EQUAL
12107: IFFALSE 12123
// Say ( un , DArm-USsol-2 ) else
12109: LD_VAR 0 1
12113: PPUSH
12114: LD_STRING DArm-USsol-2
12116: PPUSH
12117: CALL_OW 88
12121: GO 12135
// Say ( un , DArf-USsol-3 ) ;
12123: LD_VAR 0 1
12127: PPUSH
12128: LD_STRING DArf-USsol-3
12130: PPUSH
12131: CALL_OW 88
// DialogueOff ;
12135: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12139: LD_ADDR_EXP 14
12143: PUSH
12144: LD_EXP 14
12148: PPUSH
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL 66186 0 2
12158: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12159: LD_VAR 0 1
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 109
// SetSide ( un , 2 ) ;
12171: LD_VAR 0 1
12175: PPUSH
12176: LD_INT 2
12178: PPUSH
12179: CALL_OW 235
// end ; end ;
12183: PPOPN 1
12185: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12186: LD_EXP 57
12190: PPUSH
12191: LD_INT 101
12193: PUSH
12194: LD_INT 2
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 72
12205: PUSH
12206: LD_EXP 14
12210: PPUSH
12211: LD_INT 22
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 72
12225: PUSH
12226: LD_INT 5
12228: GREATER
12229: AND
12230: PUSH
12231: LD_EXP 10
12235: NOT
12236: AND
12237: PUSH
12238: LD_EXP 30
12242: NOT
12243: AND
12244: PUSH
12245: LD_EXP 25
12249: NOT
12250: AND
12251: PUSH
12252: LD_EXP 17
12256: NOT
12257: AND
12258: IFFALSE 12373
12260: GO 12262
12262: DISABLE
12263: LD_INT 0
12265: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: LD_EXP 57
12275: PPUSH
12276: LD_INT 22
12278: PUSH
12279: LD_INT 4
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 101
12288: PUSH
12289: LD_INT 2
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PPUSH
12300: CALL_OW 72
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: ST_TO_ADDR
// DialogueOn ;
12309: CALL_OW 6
// if GetSex ( un ) = sex_male then
12313: LD_VAR 0 1
12317: PPUSH
12318: CALL_OW 258
12322: PUSH
12323: LD_INT 1
12325: EQUAL
12326: IFFALSE 12342
// Say ( un , DUSm-USsol-a-2 ) else
12328: LD_VAR 0 1
12332: PPUSH
12333: LD_STRING DUSm-USsol-a-2
12335: PPUSH
12336: CALL_OW 88
12340: GO 12354
// Say ( un , DUSf-USsol-a-2 ) ;
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_STRING DUSf-USsol-a-2
12349: PPUSH
12350: CALL_OW 88
// DialogueOff ;
12354: CALL_OW 7
// wait ( 0 0$2 ) ;
12358: LD_INT 70
12360: PPUSH
12361: CALL_OW 67
// isAlarm := true ;
12365: LD_ADDR_EXP 17
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// end ;
12373: PPOPN 1
12375: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12376: LD_EXP 17
12380: NOT
12381: PUSH
12382: LD_EXP 46
12386: PPUSH
12387: CALL_OW 302
12391: AND
12392: PUSH
12393: LD_EXP 46
12397: PPUSH
12398: CALL_OW 255
12402: PUSH
12403: LD_INT 2
12405: EQUAL
12406: AND
12407: PUSH
12408: LD_EXP 26
12412: AND
12413: PUSH
12414: LD_EXP 28
12418: NOT
12419: AND
12420: PUSH
12421: LD_EXP 27
12425: NOT
12426: AND
12427: PUSH
12428: LD_EXP 30
12432: NOT
12433: AND
12434: PUSH
12435: LD_EXP 46
12439: PPUSH
12440: LD_INT 165
12442: PPUSH
12443: CALL 19964 0 2
12447: AND
12448: IFFALSE 12580
12450: GO 12452
12452: DISABLE
// begin enable ;
12453: ENABLE
// InGameOn ;
12454: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12458: LD_EXP 46
12462: PPUSH
12463: LD_INT 5
12465: PPUSH
12466: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12470: LD_INT 165
12472: PPUSH
12473: LD_INT 5
12475: PPUSH
12476: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12480: LD_EXP 46
12484: PPUSH
12485: LD_INT 165
12487: PPUSH
12488: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12492: LD_INT 35
12494: PPUSH
12495: CALL_OW 67
// until IsInUnit ( Givi ) ;
12499: LD_EXP 46
12503: PPUSH
12504: CALL_OW 310
12508: IFFALSE 12492
// case Query ( GiviInLaundry ) of 1 :
12510: LD_STRING GiviInLaundry
12512: PPUSH
12513: CALL_OW 97
12517: PUSH
12518: LD_INT 1
12520: DOUBLE
12521: EQUAL
12522: IFTRUE 12526
12524: GO 12533
12526: POP
// SpawnGiviAsRussian ; 2 :
12527: CALL 1910 0 0
12531: GO 12545
12533: LD_INT 2
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12544
12541: POP
// ; end ;
12542: GO 12545
12544: POP
// ComExitBuilding ( Givi ) ;
12545: LD_EXP 46
12549: PPUSH
12550: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12554: LD_EXP 46
12558: PPUSH
12559: LD_INT 2
12561: PPUSH
12562: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12566: LD_INT 165
12568: PPUSH
12569: LD_INT 3
12571: PPUSH
12572: CALL_OW 235
// InGameOff ;
12576: CALL_OW 9
// end ;
12580: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12581: LD_EXP 17
12585: NOT
12586: PUSH
12587: LD_EXP 28
12591: AND
12592: PUSH
12593: LD_EXP 46
12597: PPUSH
12598: CALL_OW 255
12602: PUSH
12603: LD_INT 2
12605: EQUAL
12606: AND
12607: PUSH
12608: LD_EXP 46
12612: PPUSH
12613: CALL_OW 248
12617: PUSH
12618: LD_INT 3
12620: EQUAL
12621: AND
12622: PUSH
12623: LD_EXP 46
12627: PPUSH
12628: LD_INT 119
12630: PPUSH
12631: CALL 19964 0 2
12635: AND
12636: PUSH
12637: LD_EXP 30
12641: NOT
12642: AND
12643: IFFALSE 12897
12645: GO 12647
12647: DISABLE
// begin InGameOn ;
12648: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12652: LD_EXP 46
12656: PPUSH
12657: LD_INT 3
12659: PPUSH
12660: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12664: LD_INT 10
12666: PPUSH
12667: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12671: LD_EXP 46
12675: PPUSH
12676: LD_INT 119
12678: PPUSH
12679: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12683: LD_INT 35
12685: PPUSH
12686: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12690: LD_EXP 46
12694: PPUSH
12695: LD_INT 119
12697: PPUSH
12698: CALL_OW 120
// until IsInUnit ( Givi ) ;
12702: LD_EXP 46
12706: PPUSH
12707: CALL_OW 310
12711: IFFALSE 12683
// DialogueOn ;
12713: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12717: LD_EXP 46
12721: PPUSH
12722: LD_STRING DG-Captive-1
12724: PPUSH
12725: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12729: LD_EXP 64
12733: PPUSH
12734: LD_STRING DCom-Captive-2
12736: PPUSH
12737: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12741: LD_EXP 46
12745: PPUSH
12746: LD_STRING DG-Captive-3
12748: PPUSH
12749: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12753: LD_EXP 64
12757: PPUSH
12758: LD_STRING DCom-Captive-4
12760: PPUSH
12761: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12765: LD_EXP 64
12769: PPUSH
12770: CALL_OW 64
// DialogueOff ;
12774: CALL_OW 7
// InGameOff ;
12778: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12782: LD_EXP 46
12786: PPUSH
12787: LD_INT 2
12789: PPUSH
12790: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12794: LD_EXP 46
12798: PPUSH
12799: CALL_OW 122
// if Aviradze then
12803: LD_EXP 55
12807: IFFALSE 12850
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12809: LD_ADDR_EXP 14
12813: PUSH
12814: LD_EXP 14
12818: PPUSH
12819: LD_EXP 55
12823: PPUSH
12824: CALL 66186 0 2
12828: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12829: LD_EXP 55
12833: PPUSH
12834: LD_INT 2
12836: PPUSH
12837: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12841: LD_EXP 55
12845: PPUSH
12846: CALL_OW 122
// end ; if Ibrahim then
12850: LD_EXP 48
12854: IFFALSE 12897
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12856: LD_ADDR_EXP 14
12860: PUSH
12861: LD_EXP 14
12865: PPUSH
12866: LD_EXP 48
12870: PPUSH
12871: CALL 66186 0 2
12875: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12876: LD_EXP 48
12880: PPUSH
12881: LD_INT 2
12883: PPUSH
12884: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12888: LD_EXP 48
12892: PPUSH
12893: CALL_OW 122
// end ; end ;
12897: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12898: LD_EXP 17
12902: NOT
12903: PUSH
12904: LD_EXP 27
12908: AND
12909: PUSH
12910: LD_EXP 45
12914: PPUSH
12915: CALL_OW 248
12919: PUSH
12920: LD_INT 3
12922: EQUAL
12923: AND
12924: PUSH
12925: LD_EXP 45
12929: PPUSH
12930: LD_INT 119
12932: PPUSH
12933: CALL 19964 0 2
12937: AND
12938: PUSH
12939: LD_EXP 30
12943: NOT
12944: AND
12945: IFFALSE 13244
12947: GO 12949
12949: DISABLE
// begin InGameOn ;
12950: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12954: LD_EXP 45
12958: PPUSH
12959: LD_INT 3
12961: PPUSH
12962: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12966: LD_INT 10
12968: PPUSH
12969: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
12973: LD_EXP 45
12977: PPUSH
12978: LD_INT 119
12980: PPUSH
12981: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12985: LD_INT 35
12987: PPUSH
12988: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
12992: LD_EXP 45
12996: PPUSH
12997: LD_INT 119
12999: PPUSH
13000: CALL_OW 120
// until IsInUnit ( Heike ) ;
13004: LD_EXP 45
13008: PPUSH
13009: CALL_OW 310
13013: IFFALSE 12985
// wait ( 0 0$1 ) ;
13015: LD_INT 35
13017: PPUSH
13018: CALL_OW 67
// DialogueOn ;
13022: CALL_OW 6
// if Aviradze and Ibrahim then
13026: LD_EXP 55
13030: PUSH
13031: LD_EXP 48
13035: AND
13036: IFFALSE 13052
// Say ( Heike , DH-Captive-a-1 ) else
13038: LD_EXP 45
13042: PPUSH
13043: LD_STRING DH-Captive-a-1
13045: PPUSH
13046: CALL_OW 88
13050: GO 13064
// Say ( Heike , DH-Captive-a-b-1 ) ;
13052: LD_EXP 45
13056: PPUSH
13057: LD_STRING DH-Captive-a-b-1
13059: PPUSH
13060: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13064: LD_EXP 64
13068: PPUSH
13069: LD_STRING DCom-Captive-a-2
13071: PPUSH
13072: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13076: LD_EXP 45
13080: PPUSH
13081: LD_STRING DH-Captive-a-3
13083: PPUSH
13084: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13088: LD_EXP 64
13092: PPUSH
13093: LD_STRING DCom-Captive-a-4
13095: PPUSH
13096: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13100: LD_EXP 45
13104: PPUSH
13105: LD_STRING DH-Captive-a-5
13107: PPUSH
13108: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13112: LD_EXP 64
13116: PPUSH
13117: CALL_OW 64
// DialogueOff ;
13121: CALL_OW 7
// InGameOff ;
13125: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13129: LD_EXP 45
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13141: LD_EXP 45
13145: PPUSH
13146: CALL_OW 122
// if Aviradze then
13150: LD_EXP 55
13154: IFFALSE 13197
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13156: LD_ADDR_EXP 14
13160: PUSH
13161: LD_EXP 14
13165: PPUSH
13166: LD_EXP 55
13170: PPUSH
13171: CALL 66186 0 2
13175: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13176: LD_EXP 55
13180: PPUSH
13181: LD_INT 2
13183: PPUSH
13184: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13188: LD_EXP 55
13192: PPUSH
13193: CALL_OW 122
// end ; if Ibrahim then
13197: LD_EXP 48
13201: IFFALSE 13244
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13203: LD_ADDR_EXP 14
13207: PUSH
13208: LD_EXP 14
13212: PPUSH
13213: LD_EXP 48
13217: PPUSH
13218: CALL 66186 0 2
13222: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13223: LD_EXP 48
13227: PPUSH
13228: LD_INT 2
13230: PPUSH
13231: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13235: LD_EXP 48
13239: PPUSH
13240: CALL_OW 122
// end ; end ;
13244: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13245: LD_INT 2
13247: PUSH
13248: LD_INT 25
13250: PUSH
13251: LD_INT 32
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 25
13260: PUSH
13261: LD_INT 34
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: IFFALSE 13289
13279: GO 13281
13281: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13282: LD_STRING M1-weapons-out
13284: PPUSH
13285: CALL_OW 604
13289: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13290: LD_INT 2
13292: PPUSH
13293: LD_EXP 60
13297: PPUSH
13298: CALL_OW 292
13302: PUSH
13303: LD_EXP 45
13307: PPUSH
13308: LD_EXP 60
13312: PPUSH
13313: CALL_OW 296
13317: AND
13318: PUSH
13319: LD_EXP 17
13323: NOT
13324: AND
13325: PUSH
13326: LD_EXP 30
13330: NOT
13331: AND
13332: IFFALSE 14190
13334: GO 13336
13336: DISABLE
13337: LD_INT 0
13339: PPUSH
13340: PPUSH
// begin if contactWithAmerican then
13341: LD_EXP 25
13345: IFFALSE 13442
// begin DialogueOn ;
13347: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13351: LD_EXP 60
13355: PPUSH
13356: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13360: LD_EXP 45
13364: PPUSH
13365: LD_STRING DH-USsol-1
13367: PPUSH
13368: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13372: LD_EXP 60
13376: PPUSH
13377: LD_INT 2
13379: PPUSH
13380: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13384: LD_ADDR_EXP 57
13388: PUSH
13389: LD_EXP 57
13393: PPUSH
13394: LD_EXP 60
13398: PPUSH
13399: CALL 66186 0 2
13403: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13404: LD_ADDR_EXP 14
13408: PUSH
13409: LD_EXP 14
13413: PPUSH
13414: LD_EXP 47
13418: PPUSH
13419: CALL 66186 0 2
13423: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13424: LD_EXP 60
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: CALL_OW 109
// DialogueOff ;
13436: CALL_OW 7
// exit ;
13440: GO 14190
// end ; DialogueOn ;
13442: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13446: LD_EXP 60
13450: PPUSH
13451: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13455: LD_EXP 60
13459: PPUSH
13460: LD_STRING DJy-Food-1
13462: PPUSH
13463: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13467: LD_EXP 45
13471: PPUSH
13472: LD_STRING DH-Food-2
13474: PPUSH
13475: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13479: LD_EXP 60
13483: PPUSH
13484: LD_STRING DJy-Food-3
13486: PPUSH
13487: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13491: LD_EXP 60
13495: PPUSH
13496: LD_STRING DJy-Food-4
13498: PPUSH
13499: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13503: LD_EXP 45
13507: PPUSH
13508: LD_STRING DH-Food-5
13510: PPUSH
13511: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13515: LD_EXP 60
13519: PPUSH
13520: LD_STRING DJy-Food-6
13522: PPUSH
13523: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13527: LD_EXP 60
13531: PPUSH
13532: LD_STRING DJy-Food-7
13534: PPUSH
13535: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13539: LD_EXP 60
13543: PPUSH
13544: LD_STRING DJy-Food-8
13546: PPUSH
13547: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13551: LD_EXP 45
13555: PPUSH
13556: LD_STRING DH-Food-9
13558: PPUSH
13559: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13563: LD_EXP 60
13567: PPUSH
13568: LD_STRING DJy-Food-10
13570: PPUSH
13571: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13575: LD_EXP 45
13579: PPUSH
13580: LD_STRING DH-Food-11
13582: PPUSH
13583: CALL_OW 88
// DialogueOff ;
13587: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13591: LD_STRING M3
13593: PPUSH
13594: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13598: LD_INT 5
13600: PPUSH
13601: LD_INT 215
13603: PPUSH
13604: LD_INT 117
13606: PPUSH
13607: LD_INT 0
13609: PPUSH
13610: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13614: LD_INT 215
13616: PPUSH
13617: LD_INT 118
13619: PPUSH
13620: LD_INT 2
13622: PPUSH
13623: LD_INT 6
13625: NEG
13626: PPUSH
13627: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13631: LD_INT 215
13633: PPUSH
13634: LD_INT 118
13636: PPUSH
13637: LD_INT 2
13639: PPUSH
13640: CALL_OW 331
// foodDelivered := false ;
13644: LD_ADDR_VAR 0 2
13648: PUSH
13649: LD_INT 0
13651: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13652: LD_INT 35
13654: PPUSH
13655: CALL_OW 67
// if hasMuchin then
13659: LD_EXP 30
13663: IFFALSE 13667
// continue ;
13665: GO 13652
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13667: LD_ADDR_VAR 0 1
13671: PUSH
13672: LD_EXP 14
13676: PUSH
13677: LD_EXP 45
13681: UNION
13682: PPUSH
13683: LD_INT 91
13685: PUSH
13686: LD_EXP 60
13690: PUSH
13691: LD_INT 6
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 25
13701: PUSH
13702: LD_INT 33
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 72
13717: PUSH
13718: FOR_IN
13719: IFFALSE 13919
// if Carry ( i ) then
13721: LD_VAR 0 1
13725: PPUSH
13726: CALL_OW 281
13730: IFFALSE 13917
// begin DialogueOn ;
13732: CALL_OW 6
// foodDelivered := true ;
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: LD_INT 1
13743: ST_TO_ADDR
// case i of Heike :
13744: LD_VAR 0 1
13748: PUSH
13749: LD_EXP 45
13753: DOUBLE
13754: EQUAL
13755: IFTRUE 13759
13757: GO 13774
13759: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13760: LD_EXP 45
13764: PPUSH
13765: LD_STRING DH-Food-12
13767: PPUSH
13768: CALL_OW 88
13772: GO 13900
13774: LD_EXP 50
13778: DOUBLE
13779: EQUAL
13780: IFTRUE 13784
13782: GO 13799
13784: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13785: LD_EXP 50
13789: PPUSH
13790: LD_STRING DK-Food-a-12
13792: PPUSH
13793: CALL_OW 88
13797: GO 13900
13799: LD_EXP 52
13803: DOUBLE
13804: EQUAL
13805: IFTRUE 13809
13807: GO 13824
13809: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13810: LD_EXP 52
13814: PPUSH
13815: LD_STRING DMar-Food-a-12
13817: PPUSH
13818: CALL_OW 88
13822: GO 13900
13824: LD_EXP 46
13828: DOUBLE
13829: EQUAL
13830: IFTRUE 13834
13832: GO 13849
13834: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13835: LD_EXP 46
13839: PPUSH
13840: LD_STRING DG-Food-a-14
13842: PPUSH
13843: CALL_OW 88
13847: GO 13900
13849: LD_EXP 47
13853: DOUBLE
13854: EQUAL
13855: IFTRUE 13859
13857: GO 13874
13859: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13860: LD_EXP 47
13864: PPUSH
13865: LD_STRING DM-Food-a-15
13867: PPUSH
13868: CALL_OW 88
13872: GO 13900
13874: LD_EXP 49
13878: DOUBLE
13879: EQUAL
13880: IFTRUE 13884
13882: GO 13899
13884: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13885: LD_EXP 49
13889: PPUSH
13890: LD_STRING DKam-Food-a-16
13892: PPUSH
13893: CALL_OW 88
13897: GO 13900
13899: POP
// SetCargo ( i , mat_cans , 0 ) ;
13900: LD_VAR 0 1
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: LD_INT 0
13910: PPUSH
13911: CALL_OW 290
// break ;
13915: GO 13919
// end ;
13917: GO 13718
13919: POP
13920: POP
// until foodDelivered ;
13921: LD_VAR 0 2
13925: IFFALSE 13652
// givenFood := true ;
13927: LD_ADDR_EXP 33
13931: PUSH
13932: LD_INT 1
13934: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13935: LD_EXP 60
13939: PPUSH
13940: LD_STRING DJy-Food-13
13942: PPUSH
13943: CALL_OW 88
// hasVirus := true ;
13947: LD_ADDR_EXP 31
13951: PUSH
13952: LD_INT 1
13954: ST_TO_ADDR
// if not americanContact then
13955: LD_EXP 10
13959: NOT
13960: IFFALSE 14010
// begin Say ( Heike , DH-Food-14 ) ;
13962: LD_EXP 45
13966: PPUSH
13967: LD_STRING DH-Food-14
13969: PPUSH
13970: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13974: LD_EXP 60
13978: PPUSH
13979: LD_STRING DJy-Food-15
13981: PPUSH
13982: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13986: LD_EXP 60
13990: PPUSH
13991: LD_STRING DJy-Food-16
13993: PPUSH
13994: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13998: LD_EXP 60
14002: PPUSH
14003: LD_STRING DJy-Food-17
14005: PPUSH
14006: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14010: LD_STRING M3-out
14012: PPUSH
14013: CALL_OW 337
// DialogueOff ;
14017: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14021: LD_EXP 60
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: LD_INT 10
14031: PPUSH
14032: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14036: LD_EXP 60
14040: PPUSH
14041: LD_INT 95
14043: PPUSH
14044: LD_INT 17
14046: PPUSH
14047: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14051: LD_INT 35
14053: PPUSH
14054: CALL_OW 67
// if not HasTask ( Jerry ) then
14058: LD_EXP 60
14062: PPUSH
14063: CALL_OW 314
14067: NOT
14068: IFFALSE 14085
// ComMoveXY ( Jerry , 95 , 17 ) ;
14070: LD_EXP 60
14074: PPUSH
14075: LD_INT 95
14077: PPUSH
14078: LD_INT 17
14080: PPUSH
14081: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14085: LD_EXP 60
14089: PPUSH
14090: LD_INT 95
14092: PPUSH
14093: LD_INT 17
14095: PPUSH
14096: CALL_OW 307
14100: IFFALSE 14051
// SetCargo ( Jerry , mat_cans , 0 ) ;
14102: LD_EXP 60
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: LD_INT 0
14112: PPUSH
14113: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14117: LD_ADDR_EXP 57
14121: PUSH
14122: LD_EXP 57
14126: PPUSH
14127: LD_EXP 60
14131: PPUSH
14132: CALL 66186 0 2
14136: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14137: LD_ADDR_VAR 0 1
14141: PUSH
14142: LD_INT 22
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 23
14154: PUSH
14155: LD_INT 1
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 69
14170: PUSH
14171: FOR_IN
14172: IFFALSE 14188
// SetLives ( i , 1000 ) ;
14174: LD_VAR 0 1
14178: PPUSH
14179: LD_INT 1000
14181: PPUSH
14182: CALL_OW 234
14186: GO 14171
14188: POP
14189: POP
// end ;
14190: PPOPN 2
14192: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14193: LD_EXP 30
14197: NOT
14198: PUSH
14199: LD_EXP 6
14203: AND
14204: IFFALSE 14635
14206: GO 14208
14208: DISABLE
14209: LD_INT 0
14211: PPUSH
14212: PPUSH
// begin tmp := [ ] ;
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: EMPTY
14219: ST_TO_ADDR
// uc_side := 3 ;
14220: LD_ADDR_OWVAR 20
14224: PUSH
14225: LD_INT 3
14227: ST_TO_ADDR
// uc_nation := 3 ;
14228: LD_ADDR_OWVAR 21
14232: PUSH
14233: LD_INT 3
14235: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14236: LD_INT 1
14238: PPUSH
14239: LD_INT 8
14241: PPUSH
14242: CALL_OW 381
// un := CreateHuman ;
14246: LD_ADDR_VAR 0 1
14250: PUSH
14251: CALL_OW 44
14255: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14256: LD_VAR 0 1
14260: PPUSH
14261: LD_INT 173
14263: PPUSH
14264: LD_INT 104
14266: PPUSH
14267: LD_INT 0
14269: PPUSH
14270: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14274: LD_ADDR_VAR 0 2
14278: PUSH
14279: LD_VAR 0 2
14283: PPUSH
14284: LD_VAR 0 1
14288: PPUSH
14289: CALL 66186 0 2
14293: ST_TO_ADDR
// un := CreateHuman ;
14294: LD_ADDR_VAR 0 1
14298: PUSH
14299: CALL_OW 44
14303: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14304: LD_VAR 0 1
14308: PPUSH
14309: LD_INT 73
14311: PPUSH
14312: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14316: LD_ADDR_VAR 0 2
14320: PUSH
14321: LD_VAR 0 2
14325: PPUSH
14326: LD_VAR 0 1
14330: PPUSH
14331: CALL 66186 0 2
14335: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14336: LD_INT 35
14338: PPUSH
14339: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
14343: LD_EXP 50
14347: PPUSH
14348: CALL_OW 255
14352: PUSH
14353: LD_INT 2
14355: EQUAL
14356: PUSH
14357: LD_EXP 50
14361: PPUSH
14362: LD_INT 73
14364: PPUSH
14365: CALL_OW 296
14369: PUSH
14370: LD_INT 8
14372: LESS
14373: AND
14374: PUSH
14375: LD_VAR 0 2
14379: PPUSH
14380: LD_INT 101
14382: PUSH
14383: LD_INT 2
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PPUSH
14390: CALL_OW 72
14394: AND
14395: IFFALSE 14336
// InGameOn ;
14397: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14401: LD_INT 73
14403: PPUSH
14404: CALL_OW 250
14408: PPUSH
14409: LD_INT 73
14411: PPUSH
14412: CALL_OW 251
14416: PPUSH
14417: LD_INT 2
14419: PPUSH
14420: LD_INT 9
14422: NEG
14423: PPUSH
14424: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14428: LD_INT 73
14430: PPUSH
14431: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14435: LD_EXP 50
14439: PPUSH
14440: LD_INT 73
14442: PPUSH
14443: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14447: LD_EXP 50
14451: PPUSH
14452: LD_STRING DK-Plastic-1
14454: PPUSH
14455: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14459: LD_EXP 50
14463: PPUSH
14464: LD_STRING DK-Plastic-2
14466: PPUSH
14467: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14471: LD_EXP 50
14475: PPUSH
14476: LD_INT 73
14478: PPUSH
14479: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14483: LD_INT 35
14485: PPUSH
14486: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14490: LD_EXP 50
14494: PPUSH
14495: LD_INT 73
14497: PPUSH
14498: CALL_OW 296
14502: PUSH
14503: LD_INT 6
14505: LESS
14506: IFFALSE 14483
// ComHold ( Kaia ) ;
14508: LD_EXP 50
14512: PPUSH
14513: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14517: LD_VAR 0 2
14521: PUSH
14522: LD_INT 1
14524: ARRAY
14525: PPUSH
14526: LD_STRING DRum-Plastic-3
14528: PPUSH
14529: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14533: LD_VAR 0 2
14537: PUSH
14538: LD_INT 2
14540: ARRAY
14541: PPUSH
14542: LD_STRING DRum2-Plastic-4
14544: PPUSH
14545: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14549: LD_VAR 0 2
14553: PUSH
14554: LD_INT 1
14556: ARRAY
14557: PPUSH
14558: LD_STRING DRum-Plastic-5
14560: PPUSH
14561: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14565: LD_VAR 0 2
14569: PUSH
14570: LD_INT 2
14572: ARRAY
14573: PPUSH
14574: LD_STRING DRum2-Plastic-6
14576: PPUSH
14577: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14581: LD_EXP 50
14585: PPUSH
14586: LD_STRING DK-Plastic-7
14588: PPUSH
14589: CALL_OW 88
// InGameOff ;
14593: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14597: LD_INT 73
14599: PPUSH
14600: CALL_OW 250
14604: PPUSH
14605: LD_INT 73
14607: PPUSH
14608: CALL_OW 251
14612: PPUSH
14613: LD_INT 2
14615: PPUSH
14616: CALL_OW 331
// explosionsTakenByRussians := true ;
14620: LD_ADDR_EXP 21
14624: PUSH
14625: LD_INT 1
14627: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14628: LD_STRING ExplosivesInfo
14630: PPUSH
14631: CALL_OW 97
// end ;
14635: PPOPN 2
14637: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14638: LD_EXP 21
14642: PUSH
14643: LD_EXP 50
14647: PPUSH
14648: CALL_OW 255
14652: PUSH
14653: LD_INT 2
14655: EQUAL
14656: AND
14657: PUSH
14658: LD_EXP 50
14662: PPUSH
14663: LD_INT 61
14665: PPUSH
14666: CALL 19964 0 2
14670: AND
14671: PUSH
14672: LD_EXP 17
14676: NOT
14677: AND
14678: PUSH
14679: LD_EXP 30
14683: NOT
14684: AND
14685: IFFALSE 14841
14687: GO 14689
14689: DISABLE
// begin InGameOn ;
14690: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14694: LD_INT 61
14696: PPUSH
14697: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14701: LD_EXP 50
14705: PPUSH
14706: LD_INT 3
14708: PPUSH
14709: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14713: LD_EXP 50
14717: PPUSH
14718: LD_INT 61
14720: PPUSH
14721: CALL_OW 120
// wait ( 0 0$2 ) ;
14725: LD_INT 70
14727: PPUSH
14728: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14732: LD_EXP 50
14736: PPUSH
14737: LD_STRING DK-Plastic-8
14739: PPUSH
14740: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14744: LD_EXP 66
14748: PUSH
14749: LD_INT 1
14751: ARRAY
14752: PPUSH
14753: LD_STRING DRuMch-Plastic-9
14755: PPUSH
14756: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14760: LD_EXP 50
14764: PPUSH
14765: LD_STRING DK-Plastic-10
14767: PPUSH
14768: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14772: LD_EXP 66
14776: PUSH
14777: LD_INT 1
14779: ARRAY
14780: PPUSH
14781: LD_STRING DRuMch-Plastic-a-11
14783: PPUSH
14784: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14788: LD_EXP 50
14792: PPUSH
14793: LD_STRING DK-Plastic-a-12
14795: PPUSH
14796: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14800: LD_EXP 66
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: PPUSH
14809: LD_STRING DRuMch-Plastic-a-13
14811: PPUSH
14812: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14816: LD_EXP 50
14820: PPUSH
14821: LD_INT 2
14823: PPUSH
14824: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14828: LD_EXP 50
14832: PPUSH
14833: CALL_OW 122
// InGameOff ;
14837: CALL_OW 9
// end ;
14841: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14842: LD_EXP 21
14846: PUSH
14847: LD_EXP 50
14851: PPUSH
14852: CALL_OW 255
14856: PUSH
14857: LD_INT 2
14859: EQUAL
14860: AND
14861: PUSH
14862: LD_EXP 50
14866: PPUSH
14867: LD_INT 196
14869: PPUSH
14870: CALL 19964 0 2
14874: AND
14875: PUSH
14876: LD_EXP 17
14880: NOT
14881: AND
14882: PUSH
14883: LD_EXP 30
14887: NOT
14888: AND
14889: IFFALSE 15228
14891: GO 14893
14893: DISABLE
// begin InGameOn ;
14894: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14898: LD_INT 196
14900: PPUSH
14901: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14905: LD_EXP 50
14909: PPUSH
14910: LD_INT 3
14912: PPUSH
14913: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14917: LD_EXP 50
14921: PPUSH
14922: LD_INT 196
14924: PPUSH
14925: CALL_OW 120
// wait ( 0 0$2 ) ;
14929: LD_INT 70
14931: PPUSH
14932: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14936: LD_EXP 50
14940: PPUSH
14941: LD_STRING DK-Plastic-8
14943: PPUSH
14944: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14948: LD_EXP 67
14952: PUSH
14953: LD_INT 1
14955: ARRAY
14956: PPUSH
14957: LD_STRING DRuMch-Plastic-9
14959: PPUSH
14960: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14964: LD_EXP 50
14968: PPUSH
14969: LD_STRING DK-Plastic-10
14971: PPUSH
14972: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14976: LD_EXP 67
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: LD_STRING DRuMch-Plastic-11
14987: PPUSH
14988: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14992: LD_EXP 50
14996: PPUSH
14997: LD_STRING DK-Plastic-12
14999: PPUSH
15000: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15004: LD_EXP 50
15008: PPUSH
15009: LD_STRING DK-Plastic-13
15011: PPUSH
15012: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15016: LD_EXP 67
15020: PUSH
15021: LD_INT 1
15023: ARRAY
15024: PPUSH
15025: LD_STRING DRuMch-Plastic-14
15027: PPUSH
15028: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15032: LD_EXP 68
15036: PPUSH
15037: LD_INT 167
15039: PPUSH
15040: LD_INT 34
15042: PPUSH
15043: LD_INT 3
15045: PPUSH
15046: LD_INT 0
15048: PPUSH
15049: CALL 68326 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15053: LD_EXP 68
15057: PPUSH
15058: LD_INT 196
15060: PPUSH
15061: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15065: LD_INT 35
15067: PPUSH
15068: CALL_OW 67
// if not HasTask ( Stiopa ) then
15072: LD_EXP 68
15076: PPUSH
15077: CALL_OW 314
15081: NOT
15082: IFFALSE 15096
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15084: LD_EXP 68
15088: PPUSH
15089: LD_INT 196
15091: PPUSH
15092: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15096: LD_EXP 68
15100: PPUSH
15101: CALL_OW 310
15105: IFFALSE 15065
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15107: LD_EXP 68
15111: PPUSH
15112: LD_STRING DSpn-Plastic-15
15114: PPUSH
15115: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15119: LD_EXP 69
15123: PPUSH
15124: LD_STRING DLr-Plastic-16
15126: PPUSH
15127: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15131: LD_EXP 50
15135: PPUSH
15136: LD_STRING DK-Plastic-17
15138: PPUSH
15139: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15143: LD_INT 10
15145: PPUSH
15146: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15150: LD_INT 196
15152: PPUSH
15153: CALL 19690 0 1
// SetSide ( Kaia , 2 ) ;
15157: LD_EXP 50
15161: PPUSH
15162: LD_INT 2
15164: PPUSH
15165: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15169: LD_EXP 50
15173: PPUSH
15174: CALL_OW 122
// InGameOff ;
15178: CALL_OW 9
// explosionsTakenByRussians := false ;
15182: LD_ADDR_EXP 21
15186: PUSH
15187: LD_INT 0
15189: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15190: LD_INT 170
15192: PPUSH
15193: LD_INT 28
15195: PPUSH
15196: LD_INT 2
15198: PPUSH
15199: LD_INT 6
15201: NEG
15202: PPUSH
15203: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15207: LD_INT 170
15209: PPUSH
15210: LD_INT 28
15212: PPUSH
15213: LD_INT 2
15215: PPUSH
15216: CALL_OW 331
// knowWhereExplosivesAre := true ;
15220: LD_ADDR_EXP 34
15224: PUSH
15225: LD_INT 1
15227: ST_TO_ADDR
// end ;
15228: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15229: LD_EXP 34
15233: PUSH
15234: LD_EXP 50
15238: PPUSH
15239: CALL_OW 255
15243: PUSH
15244: LD_INT 2
15246: EQUAL
15247: AND
15248: PUSH
15249: LD_EXP 50
15253: PPUSH
15254: LD_INT 195
15256: PPUSH
15257: CALL 19964 0 2
15261: AND
15262: PUSH
15263: LD_EXP 17
15267: NOT
15268: AND
15269: PUSH
15270: LD_EXP 30
15274: NOT
15275: AND
15276: IFFALSE 15382
15278: GO 15280
15280: DISABLE
// begin InGameOn ;
15281: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15285: LD_EXP 50
15289: PPUSH
15290: LD_INT 3
15292: PPUSH
15293: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15297: LD_EXP 50
15301: PPUSH
15302: LD_INT 195
15304: PPUSH
15305: CALL_OW 120
// wait ( 0 0$1 ) ;
15309: LD_INT 35
15311: PPUSH
15312: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15316: LD_EXP 50
15320: PPUSH
15321: LD_STRING DK-Plastic-18
15323: PPUSH
15324: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15328: LD_STRING ExplosivesInfoUsage
15330: PPUSH
15331: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15335: LD_INT 195
15337: PPUSH
15338: CALL 19690 0 1
// SetSide ( Kaia , 2 ) ;
15342: LD_EXP 50
15346: PPUSH
15347: LD_INT 2
15349: PPUSH
15350: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15354: LD_EXP 50
15358: PPUSH
15359: CALL_OW 122
// InGameOff ;
15363: CALL_OW 9
// hasExplosionCollected := true ;
15367: LD_ADDR_EXP 23
15371: PUSH
15372: LD_INT 1
15374: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15375: LD_STRING M1-explosive-out
15377: PPUSH
15378: CALL_OW 337
// end ;
15382: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15383: LD_EXP 23
15387: PUSH
15388: LD_EXP 17
15392: NOT
15393: AND
15394: PUSH
15395: LD_EXP 30
15399: NOT
15400: AND
15401: IFFALSE 15576
15403: GO 15405
15405: DISABLE
15406: LD_INT 0
15408: PPUSH
15409: PPUSH
// begin for i in importantBuildingsList do
15410: LD_ADDR_VAR 0 1
15414: PUSH
15415: LD_EXP 35
15419: PUSH
15420: FOR_IN
15421: IFFALSE 15437
// MarkBuilding ( i , true ) ;
15423: LD_VAR 0 1
15427: PPUSH
15428: LD_INT 1
15430: PPUSH
15431: CALL 20338 0 2
15435: GO 15420
15437: POP
15438: POP
// repeat wait ( 0 0$1 ) ;
15439: LD_INT 35
15441: PPUSH
15442: CALL_OW 67
// for i in importantBuildingsList do
15446: LD_ADDR_VAR 0 1
15450: PUSH
15451: LD_EXP 35
15455: PUSH
15456: FOR_IN
15457: IFFALSE 15567
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15459: LD_EXP 45
15463: PUSH
15464: LD_EXP 14
15468: UNION
15469: PPUSH
15470: LD_INT 22
15472: PUSH
15473: LD_INT 2
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 21
15482: PUSH
15483: LD_INT 1
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 91
15492: PUSH
15493: LD_VAR 0 1
15497: PUSH
15498: LD_INT 6
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 72
15515: IFFALSE 15565
// begin CenterNowOnUnits ( i ) ;
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 87
// PlaceExplosives ( i ) ;
15526: LD_VAR 0 1
15530: PPUSH
15531: CALL 20235 0 1
// MarkBuilding ( i , false ) ;
15535: LD_VAR 0 1
15539: PPUSH
15540: LD_INT 0
15542: PPUSH
15543: CALL 20338 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15547: LD_ADDR_EXP 35
15551: PUSH
15552: LD_EXP 35
15556: PUSH
15557: LD_VAR 0 1
15561: DIFF
15562: ST_TO_ADDR
// continue ;
15563: GO 15456
// end ; end ;
15565: GO 15456
15567: POP
15568: POP
// until not importantBuildingsList ;
15569: LD_EXP 35
15573: NOT
15574: IFFALSE 15439
// end ;
15576: PPOPN 2
15578: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15579: LD_EXP 14
15583: PPUSH
15584: LD_INT 22
15586: PUSH
15587: LD_INT 2
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 95
15596: PUSH
15597: LD_INT 23
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PPUSH
15608: CALL_OW 72
15612: PUSH
15613: LD_EXP 45
15617: PPUSH
15618: CALL_OW 302
15622: AND
15623: PUSH
15624: LD_EXP 30
15628: NOT
15629: AND
15630: IFFALSE 15658
15632: GO 15634
15634: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15635: LD_EXP 45
15639: PPUSH
15640: LD_STRING DH-End-1
15642: PPUSH
15643: CALL_OW 88
// if not activeExplosives then
15647: LD_EXP 36
15651: NOT
15652: IFFALSE 15658
// Explode ;
15654: CALL 23097 0 0
// end ;
15658: END
// function SayHEmpty ( ) ; begin
15659: LD_INT 0
15661: PPUSH
// case rand ( 1 , 3 ) of 1 :
15662: LD_INT 1
15664: PPUSH
15665: LD_INT 3
15667: PPUSH
15668: CALL_OW 12
15672: PUSH
15673: LD_INT 1
15675: DOUBLE
15676: EQUAL
15677: IFTRUE 15681
15679: GO 15696
15681: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15682: LD_EXP 45
15686: PPUSH
15687: LD_STRING DH-Empty-1
15689: PPUSH
15690: CALL_OW 88
15694: GO 15743
15696: LD_INT 2
15698: DOUBLE
15699: EQUAL
15700: IFTRUE 15704
15702: GO 15719
15704: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15705: LD_EXP 45
15709: PPUSH
15710: LD_STRING DH-Empty-2
15712: PPUSH
15713: CALL_OW 88
15717: GO 15743
15719: LD_INT 3
15721: DOUBLE
15722: EQUAL
15723: IFTRUE 15727
15725: GO 15742
15727: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15728: LD_EXP 45
15732: PPUSH
15733: LD_STRING DH-Empty-3
15735: PPUSH
15736: CALL_OW 88
15740: GO 15743
15742: POP
// end ;
15743: LD_VAR 0 1
15747: RET
// function SayHVisited ( ) ; begin
15748: LD_INT 0
15750: PPUSH
// case rand ( 1 , 3 ) of 1 :
15751: LD_INT 1
15753: PPUSH
15754: LD_INT 3
15756: PPUSH
15757: CALL_OW 12
15761: PUSH
15762: LD_INT 1
15764: DOUBLE
15765: EQUAL
15766: IFTRUE 15770
15768: GO 15785
15770: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15771: LD_EXP 45
15775: PPUSH
15776: LD_STRING DH-Visited-1
15778: PPUSH
15779: CALL_OW 88
15783: GO 15832
15785: LD_INT 2
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 15808
15793: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15794: LD_EXP 45
15798: PPUSH
15799: LD_STRING DH-Visited-2
15801: PPUSH
15802: CALL_OW 88
15806: GO 15832
15808: LD_INT 3
15810: DOUBLE
15811: EQUAL
15812: IFTRUE 15816
15814: GO 15831
15816: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15817: LD_EXP 45
15821: PPUSH
15822: LD_STRING DH-Visited-3
15824: PPUSH
15825: CALL_OW 88
15829: GO 15832
15831: POP
// end ;
15832: LD_VAR 0 1
15836: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15837: LD_EXP 17
15841: NOT
15842: PUSH
15843: LD_EXP 15
15847: AND
15848: PUSH
15849: LD_EXP 45
15853: PPUSH
15854: CALL_OW 255
15858: PUSH
15859: LD_INT 2
15861: EQUAL
15862: AND
15863: PUSH
15864: LD_EXP 45
15868: PPUSH
15869: CALL_OW 302
15873: AND
15874: PUSH
15875: LD_EXP 45
15879: PPUSH
15880: CALL_OW 316
15884: AND
15885: PUSH
15886: LD_EXP 30
15890: NOT
15891: AND
15892: IFFALSE 15958
15894: GO 15896
15896: DISABLE
15897: LD_INT 0
15899: PPUSH
// begin enable ;
15900: ENABLE
// for i in entranceAllowedList do
15901: LD_ADDR_VAR 0 1
15905: PUSH
15906: LD_EXP 15
15910: PUSH
15911: FOR_IN
15912: IFFALSE 15956
// if InEntrance ( Heike , i ) then
15914: LD_EXP 45
15918: PPUSH
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL 19964 0 2
15928: IFFALSE 15954
// begin disable ( entranceEvent ) ;
15930: LD_INT 1
15932: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL 15961 0 1
// wait ( 0 0$3 ) ;
15942: LD_INT 105
15944: PPUSH
15945: CALL_OW 67
// enable ( entranceEvent ) ;
15949: LD_INT 1
15951: ENABLE_MARKED
// break ;
15952: GO 15956
// end ;
15954: GO 15911
15956: POP
15957: POP
// end ;
15958: PPOPN 1
15960: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
// if not building then
15967: LD_VAR 0 1
15971: NOT
15972: IFFALSE 15976
// exit ;
15974: GO 18601
// if building in entranceVisitedList then
15976: LD_VAR 0 1
15980: PUSH
15981: LD_EXP 16
15985: IN
15986: IFFALSE 15994
// begin SayHVisited ( ) ;
15988: CALL 15748 0 0
// exit ;
15992: GO 18601
// end ; case Query ( EnterBuilding ) of 1 :
15994: LD_STRING EnterBuilding
15996: PPUSH
15997: CALL_OW 97
16001: PUSH
16002: LD_INT 1
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 16013
16010: POP
// ; 2 :
16011: GO 16027
16013: LD_INT 2
16015: DOUBLE
16016: EQUAL
16017: IFTRUE 16021
16019: GO 16026
16021: POP
// exit ; end ;
16022: GO 18601
16024: GO 16027
16026: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16027: LD_ADDR_EXP 16
16031: PUSH
16032: LD_EXP 16
16036: PPUSH
16037: LD_VAR 0 1
16041: PPUSH
16042: CALL 66186 0 2
16046: ST_TO_ADDR
// InGameOn ;
16047: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16051: LD_EXP 45
16055: PPUSH
16056: LD_INT 5
16058: PPUSH
16059: CALL_OW 235
// SetSide ( building , 5 ) ;
16063: LD_VAR 0 1
16067: PPUSH
16068: LD_INT 5
16070: PPUSH
16071: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16075: LD_EXP 45
16079: PPUSH
16080: LD_VAR 0 1
16084: PPUSH
16085: CALL_OW 120
// wait ( 0 0$3 ) ;
16089: LD_INT 105
16091: PPUSH
16092: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16096: LD_ADDR_VAR 0 4
16100: PUSH
16101: LD_INT 165
16103: PUSH
16104: LD_INT 106
16106: PUSH
16107: LD_INT 135
16109: PUSH
16110: LD_INT 162
16112: PUSH
16113: LD_INT 61
16115: PUSH
16116: LD_INT 109
16118: PUSH
16119: LD_INT 169
16121: PUSH
16122: LD_INT 13
16124: PUSH
16125: LD_INT 147
16127: PUSH
16128: LD_INT 137
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: ST_TO_ADDR
// if not building in tmp then
16143: LD_VAR 0 1
16147: PUSH
16148: LD_VAR 0 4
16152: IN
16153: NOT
16154: IFFALSE 16162
// SayHEmpty ( ) else
16156: CALL 15659 0 0
16160: GO 18548
// case building of laundry :
16162: LD_VAR 0 1
16166: PUSH
16167: LD_INT 165
16169: DOUBLE
16170: EQUAL
16171: IFTRUE 16175
16173: GO 16279
16175: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16176: LD_EXP 26
16180: PUSH
16181: LD_EXP 27
16185: NOT
16186: AND
16187: PUSH
16188: LD_EXP 28
16192: NOT
16193: AND
16194: IFFALSE 16249
// begin case Query ( HeikeInLaundry ) of 1 :
16196: LD_STRING HeikeInLaundry
16198: PPUSH
16199: CALL_OW 97
16203: PUSH
16204: LD_INT 1
16206: DOUBLE
16207: EQUAL
16208: IFTRUE 16212
16210: GO 16219
16212: POP
// SpawnHeikeAsRussian ; 2 :
16213: CALL 1802 0 0
16217: GO 16247
16219: LD_INT 2
16221: DOUBLE
16222: EQUAL
16223: IFTRUE 16227
16225: GO 16246
16227: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16228: LD_ADDR_EXP 16
16232: PUSH
16233: LD_EXP 16
16237: PUSH
16238: LD_VAR 0 1
16242: DIFF
16243: ST_TO_ADDR
16244: GO 16247
16246: POP
// end else
16247: GO 16277
// begin entranceVisitedList := entranceVisitedList diff building ;
16249: LD_ADDR_EXP 16
16253: PUSH
16254: LD_EXP 16
16258: PUSH
16259: LD_VAR 0 1
16263: DIFF
16264: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16265: LD_EXP 45
16269: PPUSH
16270: LD_STRING DH-Locked
16272: PPUSH
16273: CALL_OW 88
// end ; end ; dougBar :
16277: GO 18548
16279: LD_INT 106
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 16649
16287: POP
// begin if contactWithAmerican and americanContact then
16288: LD_EXP 25
16292: PUSH
16293: LD_EXP 10
16297: AND
16298: IFFALSE 16362
// begin Say ( Heike , DH-Escort-a-1 ) ;
16300: LD_EXP 45
16304: PPUSH
16305: LD_STRING DH-Escort-a-1
16307: PPUSH
16308: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16312: LD_EXP 59
16316: PPUSH
16317: LD_STRING DCa-Escort-a-2
16319: PPUSH
16320: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16324: LD_EXP 59
16328: PPUSH
16329: LD_STRING DCa-Escort-a-3
16331: PPUSH
16332: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16336: LD_EXP 45
16340: PPUSH
16341: LD_STRING DH-Escort-a-4
16343: PPUSH
16344: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16348: LD_EXP 45
16352: PPUSH
16353: LD_STRING DH-Escort-a-5
16355: PPUSH
16356: CALL_OW 88
// end else
16360: GO 16606
// if contactWithAmerican then
16362: LD_EXP 25
16366: IFFALSE 16406
// begin Say ( Heike , DH-Escort-b-1 ) ;
16368: LD_EXP 45
16372: PPUSH
16373: LD_STRING DH-Escort-b-1
16375: PPUSH
16376: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16380: LD_EXP 59
16384: PPUSH
16385: LD_STRING DCa-Escort-b-2
16387: PPUSH
16388: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16392: LD_EXP 59
16396: PPUSH
16397: LD_STRING DCa-Escort-b-3
16399: PPUSH
16400: CALL_OW 88
// end else
16404: GO 16606
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16406: LD_EXP 59
16410: PPUSH
16411: LD_STRING DCa-Deal-a-1
16413: PPUSH
16414: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16418: LD_EXP 59
16422: PPUSH
16423: LD_STRING DCa-Deal-a-2
16425: PPUSH
16426: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16430: LD_EXP 45
16434: PPUSH
16435: LD_STRING DH-Deal-a-3
16437: PPUSH
16438: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16442: LD_EXP 59
16446: PPUSH
16447: LD_STRING DCa-Deal-a-4
16449: PPUSH
16450: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16454: LD_EXP 45
16458: PPUSH
16459: LD_STRING DH-Deal-a-5
16461: PPUSH
16462: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16466: LD_EXP 59
16470: PPUSH
16471: LD_STRING DCa-Deal-a-6
16473: PPUSH
16474: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16478: LD_EXP 59
16482: PPUSH
16483: LD_STRING DCa-Deal-a-7
16485: PPUSH
16486: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16490: LD_EXP 59
16494: PPUSH
16495: LD_STRING DCa-Deal-a-8
16497: PPUSH
16498: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16502: LD_EXP 59
16506: PPUSH
16507: LD_STRING DCa-Deal-a-9
16509: PPUSH
16510: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16514: LD_EXP 59
16518: PPUSH
16519: LD_STRING DCa-Deal-a-10
16521: PPUSH
16522: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16526: LD_EXP 59
16530: PPUSH
16531: LD_STRING DCa-Deal-a-11
16533: PPUSH
16534: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16538: LD_INT 10
16540: PPUSH
16541: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16545: LD_EXP 59
16549: PPUSH
16550: LD_STRING DCa-Deal-a-12
16552: PPUSH
16553: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16557: LD_EXP 45
16561: PPUSH
16562: LD_STRING DH-Deal-a-13
16564: PPUSH
16565: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16569: LD_EXP 45
16573: PPUSH
16574: LD_STRING DH-Deal-a-14
16576: PPUSH
16577: CALL_OW 88
// contactWithAmerican := true ;
16581: LD_ADDR_EXP 25
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16589: LD_INT 1
16591: PPUSH
16592: LD_STRING 08_DealWithDoug
16594: PPUSH
16595: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16599: LD_STRING M1-american-out
16601: PPUSH
16602: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16606: LD_EXP 59
16610: PPUSH
16611: LD_INT 2
16613: PPUSH
16614: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16618: LD_ADDR_EXP 14
16622: PUSH
16623: LD_EXP 14
16627: PPUSH
16628: LD_EXP 59
16632: PPUSH
16633: CALL 66186 0 2
16637: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16638: LD_EXP 59
16642: PPUSH
16643: CALL_OW 122
// end ; usLab :
16647: GO 18548
16649: LD_INT 135
16651: DOUBLE
16652: EQUAL
16653: IFTRUE 16657
16655: GO 16976
16657: POP
// begin if hasSniperRifle then
16658: LD_EXP 11
16662: IFFALSE 16974
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16664: LD_EXP 50
16668: PPUSH
16669: CALL_OW 302
16673: PUSH
16674: LD_EXP 50
16678: PUSH
16679: LD_EXP 14
16683: IN
16684: AND
16685: PUSH
16686: LD_EXP 50
16690: PPUSH
16691: CALL_OW 255
16695: PUSH
16696: LD_INT 2
16698: EQUAL
16699: AND
16700: IFFALSE 16948
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16702: LD_EXP 45
16706: PPUSH
16707: LD_EXP 50
16711: PPUSH
16712: CALL_OW 296
16716: PUSH
16717: LD_INT 10
16719: GREATER
16720: IFFALSE 16745
// begin Query ( KaiaDistance ) ;
16722: LD_STRING KaiaDistance
16724: PPUSH
16725: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16729: LD_ADDR_EXP 16
16733: PUSH
16734: LD_EXP 16
16738: PUSH
16739: LD_INT 135
16741: DIFF
16742: ST_TO_ADDR
// end else
16743: GO 16946
// begin SetSide ( Kaia , 5 ) ;
16745: LD_EXP 50
16749: PPUSH
16750: LD_INT 5
16752: PPUSH
16753: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16757: LD_EXP 50
16761: PPUSH
16762: LD_INT 135
16764: PPUSH
16765: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16769: LD_INT 35
16771: PPUSH
16772: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16776: LD_EXP 50
16780: PPUSH
16781: CALL_OW 310
16785: IFFALSE 16769
// Say ( Kaia , DK-Sniper-1 ) ;
16787: LD_EXP 50
16791: PPUSH
16792: LD_STRING DK-Sniper-1
16794: PPUSH
16795: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16799: LD_EXP 50
16803: PPUSH
16804: CALL_OW 257
16808: PUSH
16809: LD_INT 34
16811: EQUAL
16812: PUSH
16813: LD_EXP 47
16817: PUSH
16818: LD_EXP 14
16822: IN
16823: AND
16824: PUSH
16825: LD_EXP 47
16829: PPUSH
16830: CALL_OW 302
16834: AND
16835: IFFALSE 16866
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16837: LD_EXP 50
16841: PPUSH
16842: LD_STRING DK-Sniper-a-2
16844: PPUSH
16845: CALL_OW 88
// giveSniperRifleToMike := true ;
16849: LD_ADDR_EXP 42
16853: PUSH
16854: LD_INT 1
16856: ST_TO_ADDR
// Query ( QSniperMike ) ;
16857: LD_STRING QSniperMike
16859: PPUSH
16860: CALL_OW 97
// end else
16864: GO 16925
// begin Say ( Kaia , DK-Sniper-2 ) ;
16866: LD_EXP 50
16870: PPUSH
16871: LD_STRING DK-Sniper-2
16873: PPUSH
16874: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16878: LD_EXP 50
16882: PPUSH
16883: LD_INT 32
16885: PPUSH
16886: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16890: LD_EXP 52
16894: PPUSH
16895: CALL_OW 302
16899: PUSH
16900: LD_EXP 52
16904: PUSH
16905: LD_EXP 14
16909: IN
16910: AND
16911: IFFALSE 16925
// Say ( Markov , DMar-Sniper-3 ) ;
16913: LD_EXP 52
16917: PPUSH
16918: LD_STRING DMar-Sniper-3
16920: PPUSH
16921: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16925: LD_EXP 50
16929: PPUSH
16930: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16934: LD_EXP 50
16938: PPUSH
16939: LD_INT 2
16941: PPUSH
16942: CALL_OW 235
// end ; end else
16946: GO 16974
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16948: LD_ADDR_EXP 16
16952: PUSH
16953: LD_EXP 16
16957: PUSH
16958: LD_INT 135
16960: DIFF
16961: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16962: LD_EXP 45
16966: PPUSH
16967: LD_STRING DH-Locked
16969: PPUSH
16970: CALL_OW 88
// end ; end ; end ; drugsLab :
16974: GO 18548
16976: LD_INT 162
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17117
16984: POP
// begin if hasStimDrugs then
16985: LD_EXP 9
16989: IFFALSE 17103
// begin wait ( 0 0$1 ) ;
16991: LD_INT 35
16993: PPUSH
16994: CALL_OW 67
// if not hasStimDrugsCollected then
16998: LD_EXP 24
17002: NOT
17003: IFFALSE 17045
// begin Say ( Heike , DH-Lab-1 ) ;
17005: LD_EXP 45
17009: PPUSH
17010: LD_STRING DH-Lab-1
17012: PPUSH
17013: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17017: LD_INT 5
17019: PPUSH
17020: LD_INT 2
17022: PPUSH
17023: LD_INT 2
17025: PPUSH
17026: CALL_OW 322
// hasStimDrugsCollected := true ;
17030: LD_ADDR_EXP 24
17034: PUSH
17035: LD_INT 1
17037: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17038: LD_STRING M1-drugs-out
17040: PPUSH
17041: CALL_OW 604
// end ; if not hasExplosionCollected then
17045: LD_EXP 23
17049: NOT
17050: IFFALSE 17068
// entranceVisitedList := entranceVisitedList diff drugsLab else
17052: LD_ADDR_EXP 16
17056: PUSH
17057: LD_EXP 16
17061: PUSH
17062: LD_INT 162
17064: DIFF
17065: ST_TO_ADDR
17066: GO 17101
// begin wait ( 0 0$3 ) ;
17068: LD_INT 105
17070: PPUSH
17071: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17075: LD_EXP 45
17079: PPUSH
17080: LD_STRING DH-Lab-2
17082: PPUSH
17083: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17087: LD_STRING M1-drugsLab-out
17089: PPUSH
17090: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17094: LD_INT 162
17096: PPUSH
17097: CALL 20235 0 1
// end ; end else
17101: GO 17115
// Say ( Heike , DH-Locked ) ;
17103: LD_EXP 45
17107: PPUSH
17108: LD_STRING DH-Locked
17110: PPUSH
17111: CALL_OW 88
// end ; ruFac :
17115: GO 18548
17117: LD_INT 61
17119: DOUBLE
17120: EQUAL
17121: IFTRUE 17125
17123: GO 17235
17125: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17126: LD_EXP 52
17130: PPUSH
17131: CALL_OW 302
17135: PUSH
17136: LD_EXP 52
17140: PUSH
17141: LD_EXP 14
17145: IN
17146: NOT
17147: AND
17148: IFFALSE 17229
// begin Say ( Heike , DH-Krastyo-1 ) ;
17150: LD_EXP 45
17154: PPUSH
17155: LD_STRING DH-Krastyo-1
17157: PPUSH
17158: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17162: LD_EXP 52
17166: PPUSH
17167: LD_STRING DMar-Krastyo-2
17169: PPUSH
17170: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17174: LD_EXP 52
17178: PPUSH
17179: LD_STRING DMar-Krastyo-3
17181: PPUSH
17182: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17186: LD_EXP 52
17190: PPUSH
17191: LD_INT 2
17193: PPUSH
17194: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17198: LD_ADDR_EXP 14
17202: PUSH
17203: LD_EXP 14
17207: PPUSH
17208: LD_EXP 52
17212: PPUSH
17213: CALL 66186 0 2
17217: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17218: LD_EXP 52
17222: PPUSH
17223: CALL_OW 122
// end else
17227: GO 17233
// SayHEmpty ( ) ;
17229: CALL 15659 0 0
// end ; ruBarKam :
17233: GO 18548
17235: LD_INT 109
17237: DOUBLE
17238: EQUAL
17239: IFTRUE 17243
17241: GO 17390
17243: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17244: LD_EXP 49
17248: PPUSH
17249: CALL_OW 302
17253: PUSH
17254: LD_EXP 49
17258: PUSH
17259: LD_EXP 14
17263: IN
17264: NOT
17265: AND
17266: IFFALSE 17384
// begin Say ( Heike , DH-Kamil-1 ) ;
17268: LD_EXP 45
17272: PPUSH
17273: LD_STRING DH-Kamil-1
17275: PPUSH
17276: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17280: LD_EXP 49
17284: PPUSH
17285: LD_STRING DKam-Kamil-2
17287: PPUSH
17288: CALL_OW 88
// if IsOk ( Sophia ) then
17292: LD_EXP 51
17296: PPUSH
17297: CALL_OW 302
17301: IFFALSE 17341
// if Sophia in heikeSquad then
17303: LD_EXP 51
17307: PUSH
17308: LD_EXP 14
17312: IN
17313: IFFALSE 17329
// Say ( Kamil , DKam-Kamil-a-3 ) else
17315: LD_EXP 49
17319: PPUSH
17320: LD_STRING DKam-Kamil-a-3
17322: PPUSH
17323: CALL_OW 88
17327: GO 17341
// Say ( Kamil , DKam-Kamil-3 ) ;
17329: LD_EXP 49
17333: PPUSH
17334: LD_STRING DKam-Kamil-3
17336: PPUSH
17337: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17341: LD_EXP 49
17345: PPUSH
17346: LD_INT 2
17348: PPUSH
17349: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17353: LD_ADDR_EXP 14
17357: PUSH
17358: LD_EXP 14
17362: PPUSH
17363: LD_EXP 49
17367: PPUSH
17368: CALL 66186 0 2
17372: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17373: LD_EXP 49
17377: PPUSH
17378: CALL_OW 122
// end else
17382: GO 17388
// SayHEmpty ( ) ;
17384: CALL 15659 0 0
// end ; ruOutpost1 :
17388: GO 18548
17390: LD_INT 169
17392: DOUBLE
17393: EQUAL
17394: IFTRUE 17398
17396: GO 17635
17398: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17399: LD_EXP 54
17403: PPUSH
17404: CALL_OW 302
17408: PUSH
17409: LD_EXP 54
17413: PUSH
17414: LD_EXP 14
17418: IN
17419: NOT
17420: AND
17421: IFFALSE 17629
// begin if hasMethanol then
17423: LD_EXP 13
17427: IFFALSE 17558
// begin Say ( Heike , DH-Kurt-1 ) ;
17429: LD_EXP 45
17433: PPUSH
17434: LD_STRING DH-Kurt-1
17436: PPUSH
17437: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17441: LD_EXP 54
17445: PPUSH
17446: LD_STRING DKs-Kurt-2
17448: PPUSH
17449: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17453: LD_EXP 46
17457: PPUSH
17458: LD_INT 169
17460: PPUSH
17461: CALL_OW 296
17465: PUSH
17466: LD_INT 10
17468: LESS
17469: PUSH
17470: LD_EXP 46
17474: PUSH
17475: LD_EXP 14
17479: IN
17480: AND
17481: IFFALSE 17556
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17483: LD_EXP 46
17487: PPUSH
17488: LD_INT 100
17490: PPUSH
17491: LD_INT 37
17493: PPUSH
17494: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17498: LD_EXP 46
17502: PPUSH
17503: LD_INT 169
17505: PPUSH
17506: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17510: LD_INT 35
17512: PPUSH
17513: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17517: LD_EXP 46
17521: PPUSH
17522: LD_INT 169
17524: PPUSH
17525: CALL_OW 296
17529: PUSH
17530: LD_INT 7
17532: LESS
17533: IFFALSE 17510
// Say ( Givi , DG-Kurt-3 ) ;
17535: LD_EXP 46
17539: PPUSH
17540: LD_STRING DG-Kurt-3
17542: PPUSH
17543: CALL_OW 88
// ComStop ( Givi ) ;
17547: LD_EXP 46
17551: PPUSH
17552: CALL_OW 141
// end ; end else
17556: GO 17586
// begin Say ( Heike , DH-Kurt-1 ) ;
17558: LD_EXP 45
17562: PPUSH
17563: LD_STRING DH-Kurt-1
17565: PPUSH
17566: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17570: LD_EXP 54
17574: PPUSH
17575: LD_STRING DKs-Kurt-2
17577: PPUSH
17578: CALL_OW 88
// SpawnAdditionalRuGuards ;
17582: CALL 3584 0 0
// end ; SetSide ( Kurt , 2 ) ;
17586: LD_EXP 54
17590: PPUSH
17591: LD_INT 2
17593: PPUSH
17594: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17598: LD_ADDR_EXP 14
17602: PUSH
17603: LD_EXP 14
17607: PPUSH
17608: LD_EXP 54
17612: PPUSH
17613: CALL 66186 0 2
17617: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17618: LD_EXP 54
17622: PPUSH
17623: CALL_OW 122
// end else
17627: GO 17633
// SayHEmpty ( ) ;
17629: CALL 15659 0 0
// end ; ruOutpostBar :
17633: GO 18548
17635: LD_INT 13
17637: DOUBLE
17638: EQUAL
17639: IFTRUE 17643
17641: GO 17689
17643: POP
// begin if not hasGuardPatrolPlan then
17644: LD_EXP 18
17648: NOT
17649: IFFALSE 17683
// begin Say ( Heike , DH-PatrolPlan ) ;
17651: LD_EXP 45
17655: PPUSH
17656: LD_STRING DH-PatrolPlan
17658: PPUSH
17659: CALL_OW 88
// hasGuardPatrolPlan := true ;
17663: LD_ADDR_EXP 18
17667: PUSH
17668: LD_INT 1
17670: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17671: LD_INT 6
17673: PPUSH
17674: LD_INT 2
17676: PPUSH
17677: CALL_OW 343
// end else
17681: GO 17687
// SayHEmpty ( ) ;
17683: CALL 15659 0 0
// end ; ruKaiaBar :
17687: GO 18548
17689: LD_INT 147
17691: DOUBLE
17692: EQUAL
17693: IFTRUE 17697
17695: GO 17844
17697: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17698: LD_EXP 50
17702: PPUSH
17703: CALL_OW 302
17707: PUSH
17708: LD_EXP 50
17712: PUSH
17713: LD_EXP 14
17717: IN
17718: NOT
17719: AND
17720: IFFALSE 17842
// begin Say ( Heike , DH-Kaia-1 ) ;
17722: LD_EXP 45
17726: PPUSH
17727: LD_STRING DH-Kaia-1
17729: PPUSH
17730: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17734: LD_EXP 50
17738: PPUSH
17739: LD_STRING DK-Kaia-2
17741: PPUSH
17742: CALL_OW 88
// if hasSniperRifle then
17746: LD_EXP 11
17750: IFFALSE 17801
// begin if IsOk ( Markov ) then
17752: LD_EXP 52
17756: PPUSH
17757: CALL_OW 302
17761: IFFALSE 17777
// Say ( Kaia , DK-Kaia-3 ) else
17763: LD_EXP 50
17767: PPUSH
17768: LD_STRING DK-Kaia-3
17770: PPUSH
17771: CALL_OW 88
17775: GO 17789
// Say ( Kaia , DK-Kaia-a-3 ) ;
17777: LD_EXP 50
17781: PPUSH
17782: LD_STRING DK-Kaia-a-3
17784: PPUSH
17785: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17789: LD_EXP 45
17793: PPUSH
17794: LD_STRING DH-Kaia-4
17796: PPUSH
17797: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17801: LD_EXP 50
17805: PPUSH
17806: LD_INT 2
17808: PPUSH
17809: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17813: LD_ADDR_EXP 14
17817: PUSH
17818: LD_EXP 14
17822: PPUSH
17823: LD_EXP 50
17827: PPUSH
17828: CALL 66186 0 2
17832: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17833: LD_EXP 50
17837: PPUSH
17838: CALL_OW 122
// end ; end ; ruWeaponsBar :
17842: GO 18548
17844: LD_INT 137
17846: DOUBLE
17847: EQUAL
17848: IFTRUE 17852
17850: GO 18547
17852: POP
// begin if hasWeapons then
17853: LD_EXP 19
17857: IFFALSE 18533
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17859: LD_ADDR_EXP 16
17863: PUSH
17864: LD_EXP 16
17868: PUSH
17869: LD_INT 137
17871: DIFF
17872: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17873: LD_ADDR_VAR 0 4
17877: PUSH
17878: LD_EXP 14
17882: PPUSH
17883: LD_INT 91
17885: PUSH
17886: LD_EXP 45
17890: PUSH
17891: LD_INT 8
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: PPUSH
17899: CALL_OW 72
17903: ST_TO_ADDR
// if not heikeSquad or not tmp then
17904: LD_EXP 14
17908: NOT
17909: PUSH
17910: LD_VAR 0 4
17914: NOT
17915: OR
17916: IFFALSE 17932
// Say ( Heike , DH-Weapons-Alone ) else
17918: LD_EXP 45
17922: PPUSH
17923: LD_STRING DH-Weapons-Alone
17925: PPUSH
17926: CALL_OW 88
17930: GO 18531
// begin if not firstArmouryDialog then
17932: LD_EXP 39
17936: NOT
17937: IFFALSE 17996
// begin Say ( Heike , DH-Weapons-1 ) ;
17939: LD_EXP 45
17943: PPUSH
17944: LD_STRING DH-Weapons-1
17946: PPUSH
17947: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17951: LD_EXP 45
17955: PPUSH
17956: LD_STRING DH-Weapons-2
17958: PPUSH
17959: CALL_OW 88
// Query ( Weapons ) ;
17963: LD_STRING Weapons
17965: PPUSH
17966: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
17970: LD_INT 65
17972: PPUSH
17973: LD_INT 1
17975: PPUSH
17976: CALL_OW 424
// canEquipWeapons := true ;
17980: LD_ADDR_EXP 41
17984: PUSH
17985: LD_INT 1
17987: ST_TO_ADDR
// firstArmouryDialog := true ;
17988: LD_ADDR_EXP 39
17992: PUSH
17993: LD_INT 1
17995: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
17996: LD_EXP 8
18000: PUSH
18001: LD_EXP 50
18005: PUSH
18006: LD_VAR 0 4
18010: IN
18011: AND
18012: PUSH
18013: LD_EXP 50
18017: PPUSH
18018: CALL_OW 257
18022: PUSH
18023: LD_INT 34
18025: NONEQUAL
18026: AND
18027: IFFALSE 18173
// begin SetSide ( Kaia , 5 ) ;
18029: LD_EXP 50
18033: PPUSH
18034: LD_INT 5
18036: PPUSH
18037: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18041: LD_EXP 50
18045: PPUSH
18046: LD_INT 137
18048: PPUSH
18049: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18053: LD_INT 35
18055: PPUSH
18056: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18060: LD_EXP 50
18064: PPUSH
18065: CALL_OW 310
18069: IFFALSE 18053
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18071: LD_EXP 45
18075: PPUSH
18076: LD_STRING DH-Kaia-Revolver-2
18078: PPUSH
18079: CALL_OW 88
// SetClassKaiaRevolver ;
18083: CALL 1761 0 0
// hasRevolver := false ;
18087: LD_ADDR_EXP 8
18091: PUSH
18092: LD_INT 0
18094: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18095: LD_EXP 50
18099: PPUSH
18100: LD_INT 2
18102: PPUSH
18103: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18107: LD_EXP 50
18111: PPUSH
18112: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18116: LD_EXP 50
18120: PPUSH
18121: CALL_OW 257
18125: PUSH
18126: LD_INT 32
18128: EQUAL
18129: PUSH
18130: LD_EXP 47
18134: PUSH
18135: LD_EXP 14
18139: IN
18140: AND
18141: PUSH
18142: LD_EXP 47
18146: PPUSH
18147: CALL_OW 255
18151: PUSH
18152: LD_INT 2
18154: EQUAL
18155: AND
18156: IFFALSE 18173
// begin giveSniperRifleToMike := true ;
18158: LD_ADDR_EXP 42
18162: PUSH
18163: LD_INT 1
18165: ST_TO_ADDR
// Query ( QSniperMike ) ;
18166: LD_STRING QSniperMike
18168: PPUSH
18169: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18173: LD_EXP 46
18177: PUSH
18178: LD_VAR 0 4
18182: IN
18183: PUSH
18184: LD_EXP 46
18188: PPUSH
18189: CALL_OW 257
18193: PUSH
18194: LD_INT 33
18196: EQUAL
18197: AND
18198: IFFALSE 18339
// begin SetSide ( Givi , 5 ) ;
18200: LD_EXP 46
18204: PPUSH
18205: LD_INT 5
18207: PPUSH
18208: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18212: LD_EXP 46
18216: PPUSH
18217: LD_INT 137
18219: PPUSH
18220: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18224: LD_INT 35
18226: PPUSH
18227: CALL_OW 67
// until IsInUnit ( Givi ) ;
18231: LD_EXP 46
18235: PPUSH
18236: CALL_OW 310
18240: IFFALSE 18224
// Say ( Givi , DG-Weapons-3 ) ;
18242: LD_EXP 46
18246: PPUSH
18247: LD_STRING DG-Weapons-3
18249: PPUSH
18250: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18254: LD_EXP 45
18258: PPUSH
18259: LD_STRING DH-Weapons-4
18261: PPUSH
18262: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18266: LD_EXP 46
18270: PPUSH
18271: LD_STRING DG-Weapons-5
18273: PPUSH
18274: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18278: LD_EXP 46
18282: PPUSH
18283: LD_INT 11
18285: PPUSH
18286: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18290: LD_EXP 46
18294: PPUSH
18295: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18299: LD_EXP 46
18303: PPUSH
18304: LD_INT 2
18306: PPUSH
18307: CALL_OW 235
// if hasRevolver then
18311: LD_EXP 8
18315: IFFALSE 18337
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18317: LD_EXP 45
18321: PPUSH
18322: LD_STRING DH-Kaia-Revolver-1
18324: PPUSH
18325: CALL_OW 88
// heikeHasRevolver := true ;
18329: LD_ADDR_EXP 20
18333: PUSH
18334: LD_INT 1
18336: ST_TO_ADDR
// end ; end else
18337: GO 18531
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18339: LD_EXP 49
18343: PUSH
18344: LD_VAR 0 4
18348: IN
18349: PUSH
18350: LD_EXP 49
18354: PPUSH
18355: CALL_OW 257
18359: PUSH
18360: LD_INT 33
18362: EQUAL
18363: AND
18364: IFFALSE 18493
// begin SetSide ( Kamil , 5 ) ;
18366: LD_EXP 49
18370: PPUSH
18371: LD_INT 5
18373: PPUSH
18374: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18378: LD_EXP 49
18382: PPUSH
18383: LD_INT 137
18385: PPUSH
18386: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18390: LD_INT 35
18392: PPUSH
18393: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18397: LD_EXP 49
18401: PPUSH
18402: CALL_OW 310
18406: IFFALSE 18390
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18408: LD_EXP 49
18412: PPUSH
18413: LD_STRING DKam-Weapons-a-3
18415: PPUSH
18416: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18420: LD_EXP 45
18424: PPUSH
18425: LD_STRING DH-Weapons-a-4
18427: PPUSH
18428: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18432: LD_EXP 49
18436: PPUSH
18437: LD_INT 11
18439: PPUSH
18440: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18444: LD_EXP 49
18448: PPUSH
18449: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18453: LD_EXP 49
18457: PPUSH
18458: LD_INT 2
18460: PPUSH
18461: CALL_OW 235
// if hasRevolver then
18465: LD_EXP 8
18469: IFFALSE 18491
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18471: LD_EXP 45
18475: PPUSH
18476: LD_STRING DH-Kaia-Revolver-1
18478: PPUSH
18479: CALL_OW 88
// heikeHasRevolver := true ;
18483: LD_ADDR_EXP 20
18487: PUSH
18488: LD_INT 1
18490: ST_TO_ADDR
// end ; end else
18491: GO 18531
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18493: LD_EXP 45
18497: PPUSH
18498: LD_STRING DH-Weapons-Alone-2
18500: PPUSH
18501: CALL_OW 88
// if hasRevolver then
18505: LD_EXP 8
18509: IFFALSE 18531
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18511: LD_EXP 45
18515: PPUSH
18516: LD_STRING DH-Kaia-Revolver-1a
18518: PPUSH
18519: CALL_OW 88
// heikeHasRevolver := true ;
18523: LD_ADDR_EXP 20
18527: PUSH
18528: LD_INT 1
18530: ST_TO_ADDR
// end ; end ; end ; end else
18531: GO 18545
// Say ( Heike , DH-Locked ) ;
18533: LD_EXP 45
18537: PPUSH
18538: LD_STRING DH-Locked
18540: PPUSH
18541: CALL_OW 88
// end ; end ;
18545: GO 18548
18547: POP
// SetSide ( building , 3 ) ;
18548: LD_VAR 0 1
18552: PPUSH
18553: LD_INT 3
18555: PPUSH
18556: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL 19690 0 1
// wait ( 0 0$0.3 ) ;
18569: LD_INT 10
18571: PPUSH
18572: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18576: LD_EXP 45
18580: PPUSH
18581: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18585: LD_EXP 45
18589: PPUSH
18590: LD_INT 2
18592: PPUSH
18593: CALL_OW 235
// InGameOff ;
18597: CALL_OW 9
// end ;
18601: LD_VAR 0 2
18605: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18606: LD_EXP 30
18610: NOT
18611: PUSH
18612: LD_EXP 17
18616: NOT
18617: AND
18618: PUSH
18619: LD_INT 22
18621: PUSH
18622: LD_INT 5
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 21
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_INT 0
18650: EQUAL
18651: AND
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 21
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PPUSH
18677: CALL_OW 69
18681: PUSH
18682: LD_INT 0
18684: EQUAL
18685: PUSH
18686: LD_EXP 25
18690: AND
18691: PUSH
18692: LD_EXP 25
18696: NOT
18697: OR
18698: AND
18699: IFFALSE 18731
18701: GO 18703
18703: DISABLE
// begin DialogueOn ;
18704: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18708: LD_EXP 45
18712: PPUSH
18713: LD_STRING DH-Alarm-2
18715: PPUSH
18716: CALL_OW 88
// DialogueOff ;
18720: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18724: LD_STRING M1-people-out
18726: PPUSH
18727: CALL_OW 337
// end ;
18731: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
18732: LD_EXP 47
18736: PPUSH
18737: CALL_OW 255
18741: PUSH
18742: LD_INT 2
18744: EQUAL
18745: PUSH
18746: LD_EXP 47
18750: PUSH
18751: LD_EXP 14
18755: IN
18756: AND
18757: PUSH
18758: LD_EXP 45
18762: PPUSH
18763: LD_EXP 47
18767: PPUSH
18768: CALL_OW 296
18772: PUSH
18773: LD_INT 6
18775: LESS
18776: AND
18777: PUSH
18778: LD_EXP 30
18782: NOT
18783: AND
18784: PUSH
18785: LD_EXP 42
18789: AND
18790: IFFALSE 18807
18792: GO 18794
18794: DISABLE
// SetClass ( Mike , class_hunter ) ;
18795: LD_EXP 47
18799: PPUSH
18800: LD_INT 32
18802: PPUSH
18803: CALL_OW 336
18807: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
18808: LD_EXP 41
18812: PUSH
18813: LD_EXP 40
18817: AND
18818: PUSH
18819: LD_INT 137
18821: PPUSH
18822: CALL_OW 255
18826: PUSH
18827: LD_INT 3
18829: EQUAL
18830: AND
18831: PUSH
18832: LD_EXP 14
18836: PPUSH
18837: LD_INT 95
18839: PUSH
18840: LD_INT 65
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 22
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 25
18859: PUSH
18860: LD_INT 33
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: PPUSH
18872: CALL_OW 72
18876: AND
18877: PUSH
18878: LD_INT 2
18880: PPUSH
18881: LD_INT 3
18883: PPUSH
18884: CALL_OW 81
18888: PUSH
18889: LD_INT 2
18891: EQUAL
18892: NOT
18893: AND
18894: PUSH
18895: LD_EXP 65
18899: PPUSH
18900: LD_INT 137
18902: PPUSH
18903: CALL_OW 296
18907: PUSH
18908: LD_INT 12
18910: LESS
18911: NOT
18912: AND
18913: IFFALSE 19167
18915: GO 18917
18917: DISABLE
18918: LD_INT 0
18920: PPUSH
18921: PPUSH
// begin enable ;
18922: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
18923: LD_ADDR_VAR 0 2
18927: PUSH
18928: LD_EXP 14
18932: PPUSH
18933: LD_INT 95
18935: PUSH
18936: LD_INT 65
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 2
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 25
18955: PUSH
18956: LD_INT 33
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 72
18972: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
18973: LD_STRING QWeapons
18975: PPUSH
18976: CALL_OW 97
18980: PUSH
18981: LD_INT 1
18983: EQUAL
18984: IFFALSE 19167
// begin for i in tmp do
18986: LD_ADDR_VAR 0 1
18990: PUSH
18991: LD_VAR 0 2
18995: PUSH
18996: FOR_IN
18997: IFFALSE 19165
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
18999: LD_INT 137
19001: PPUSH
19002: CALL_OW 313
19006: PUSH
19007: LD_INT 6
19009: EQUAL
19010: IFFALSE 19014
// continue ;
19012: GO 18996
// SetSide ( i , 3 ) ;
19014: LD_VAR 0 1
19018: PPUSH
19019: LD_INT 3
19021: PPUSH
19022: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19026: LD_VAR 0 1
19030: PPUSH
19031: LD_INT 137
19033: PPUSH
19034: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19038: LD_ADDR_EXP 40
19042: PUSH
19043: LD_EXP 40
19047: PPUSH
19048: CALL 67569 0 1
19052: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19053: LD_INT 10
19055: PPUSH
19056: CALL_OW 67
// until IsInUnit ( i ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 310
19069: IFFALSE 19053
// SetClass ( i , class_soldier ) ;
19071: LD_VAR 0 1
19075: PPUSH
19076: LD_INT 1
19078: PPUSH
19079: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19083: LD_VAR 0 1
19087: PPUSH
19088: CALL_OW 122
// wait ( 0 0$1 ) ;
19092: LD_INT 35
19094: PPUSH
19095: CALL_OW 67
// until not IsInUnit ( i ) ;
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 310
19108: NOT
19109: IFFALSE 19083
// SetSide ( i , 2 ) ;
19111: LD_VAR 0 1
19115: PPUSH
19116: LD_INT 2
19118: PPUSH
19119: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19123: LD_VAR 0 1
19127: PPUSH
19128: LD_INT 191
19130: PPUSH
19131: LD_INT 126
19133: PPUSH
19134: CALL_OW 171
// if weaponsAmount = 0 then
19138: LD_EXP 40
19142: PUSH
19143: LD_INT 0
19145: EQUAL
19146: IFFALSE 19163
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19148: LD_INT 65
19150: PPUSH
19151: LD_INT 0
19153: PPUSH
19154: CALL_OW 424
// disable ;
19158: DISABLE
// exit ;
19159: POP
19160: POP
19161: GO 19167
// end ; end ;
19163: GO 18996
19165: POP
19166: POP
// end ; end ; end_of_file
19167: PPOPN 2
19169: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19170: LD_VAR 0 1
19174: PUSH
19175: LD_INT 3
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19213
19183: POP
// begin repeat wait ( 0 0$1 ) ;
19184: LD_INT 35
19186: PPUSH
19187: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19191: LD_EXP 45
19195: PPUSH
19196: CALL_OW 85
// until IsDying ( Heike ) ;
19200: LD_EXP 45
19204: PPUSH
19205: CALL_OW 303
19209: IFFALSE 19184
// end ; end ;
19211: GO 19214
19213: POP
// end ;
19214: PPOPN 1
19216: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19217: LD_OWVAR 59
19221: IFFALSE 19225
// exit ;
19223: GO 19299
// if showPlaceEvent then
19225: LD_INT 4
19227: IFFALSE 19299
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19229: LD_VAR 0 2
19233: PPUSH
19234: LD_VAR 0 3
19238: PPUSH
19239: LD_INT 2
19241: PPUSH
19242: LD_INT 6
19244: NEG
19245: PPUSH
19246: CALL_OW 330
// CenterOnXY ( x , y ) ;
19250: LD_VAR 0 2
19254: PPUSH
19255: LD_VAR 0 3
19259: PPUSH
19260: CALL_OW 84
// wait ( time ) ;
19264: LD_VAR 0 4
19268: PPUSH
19269: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19273: LD_EXP 45
19277: PPUSH
19278: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19282: LD_VAR 0 2
19286: PPUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: LD_INT 2
19294: PPUSH
19295: CALL_OW 331
// end ; end ;
19299: PPOPN 7
19301: END
// on UnitDestroyed ( un ) do var x , y ;
19302: LD_INT 0
19304: PPUSH
19305: PPUSH
// begin if un = Heike and hasNormalScene then
19306: LD_VAR 0 1
19310: PUSH
19311: LD_EXP 45
19315: EQUAL
19316: PUSH
19317: LD_EXP 5
19321: AND
19322: IFFALSE 19346
// if loseCounter then
19324: LD_EXP 32
19328: IFFALSE 19339
// YouLost ( HeikeNoSurrender ) else
19330: LD_STRING HeikeNoSurrender
19332: PPUSH
19333: CALL_OW 104
19337: GO 19346
// YouLost ( Heike ) ;
19339: LD_STRING Heike
19341: PPUSH
19342: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL_OW 255
19355: PUSH
19356: LD_INT 2
19358: EQUAL
19359: PUSH
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 247
19369: PUSH
19370: LD_INT 1
19372: EQUAL
19373: AND
19374: IFFALSE 19391
// loseCounter := Inc ( loseCounter ) ;
19376: LD_ADDR_EXP 32
19380: PUSH
19381: LD_EXP 32
19385: PPUSH
19386: CALL 67547 0 1
19390: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19391: LD_VAR 0 1
19395: PPUSH
19396: CALL_OW 255
19400: PUSH
19401: LD_INT 6
19403: EQUAL
19404: PUSH
19405: LD_EXP 17
19409: NOT
19410: AND
19411: PUSH
19412: LD_VAR 0 1
19416: PUSH
19417: LD_EXP 70
19421: IN
19422: AND
19423: IFFALSE 19527
// begin x := GetX ( un ) ;
19425: LD_ADDR_VAR 0 2
19429: PUSH
19430: LD_VAR 0 1
19434: PPUSH
19435: CALL_OW 250
19439: ST_TO_ADDR
// y := GetY ( un ) ;
19440: LD_ADDR_VAR 0 3
19444: PUSH
19445: LD_VAR 0 1
19449: PPUSH
19450: CALL_OW 251
19454: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19455: LD_ADDR_EXP 43
19459: PUSH
19460: LD_EXP 43
19464: PPUSH
19465: LD_VAR 0 2
19469: PUSH
19470: LD_VAR 0 3
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL 66186 0 2
19483: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19484: LD_ADDR_EXP 70
19488: PUSH
19489: LD_EXP 70
19493: PUSH
19494: LD_VAR 0 1
19498: DIFF
19499: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19500: LD_INT 3
19502: PPUSH
19503: LD_VAR 0 2
19507: PPUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: CALL_OW 293
19517: IFFALSE 19527
// isAlarm := true ;
19519: LD_ADDR_EXP 17
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// end ; end ;
19527: PPOPN 3
19529: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
19530: LD_EXP 44
19534: IFFALSE 19538
// exit ;
19536: GO 19586
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19538: LD_VAR 0 1
19542: PUSH
19543: LD_INT 2
19545: EQUAL
19546: PUSH
19547: LD_VAR 0 2
19551: PUSH
19552: LD_INT 3
19554: EQUAL
19555: AND
19556: PUSH
19557: LD_VAR 0 1
19561: PUSH
19562: LD_INT 3
19564: EQUAL
19565: PUSH
19566: LD_VAR 0 2
19570: PUSH
19571: LD_INT 2
19573: EQUAL
19574: AND
19575: OR
19576: IFFALSE 19586
// isAlarm := true ;
19578: LD_ADDR_EXP 17
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
// end ; end_of_file
19586: PPOPN 2
19588: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19589: LD_INT 0
19591: PPUSH
19592: PPUSH
19593: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19594: LD_ADDR_VAR 0 4
19598: PUSH
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 310
19608: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19609: LD_ADDR_VAR 0 5
19613: PUSH
19614: LD_VAR 0 2
19618: PPUSH
19619: CALL_OW 310
19623: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19624: LD_ADDR_VAR 0 3
19628: PUSH
19629: LD_VAR 0 4
19633: PUSH
19634: LD_VAR 0 4
19638: PUSH
19639: LD_VAR 0 5
19643: EQUAL
19644: AND
19645: ST_TO_ADDR
// end ;
19646: LD_VAR 0 3
19650: RET
// export function ShowPlace ( x , y , time ) ; begin
19651: LD_INT 0
19653: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
19654: LD_INT 4
19656: PPUSH
19657: LD_VAR 0 1
19661: PPUSH
19662: LD_VAR 0 2
19666: PPUSH
19667: LD_VAR 0 3
19671: PPUSH
19672: LD_INT 0
19674: PPUSH
19675: LD_INT 0
19677: PPUSH
19678: LD_INT 0
19680: PPUSH
19681: CALL_OW 595
// end ;
19685: LD_VAR 0 4
19689: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
19690: LD_INT 0
19692: PPUSH
19693: PPUSH
19694: PPUSH
19695: PPUSH
19696: PPUSH
19697: PPUSH
// if not IsOk ( building ) then
19698: LD_VAR 0 1
19702: PPUSH
19703: CALL_OW 302
19707: NOT
19708: IFFALSE 19712
// exit ;
19710: GO 19959
// x := GetX ( building ) ;
19712: LD_ADDR_VAR 0 4
19716: PUSH
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 250
19726: ST_TO_ADDR
// y := GetY ( building ) ;
19727: LD_ADDR_VAR 0 5
19731: PUSH
19732: LD_VAR 0 1
19736: PPUSH
19737: CALL_OW 251
19741: ST_TO_ADDR
// d := GetDir ( building ) ;
19742: LD_ADDR_VAR 0 6
19746: PUSH
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL_OW 254
19756: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19757: LD_ADDR_VAR 0 7
19761: PUSH
19762: LD_VAR 0 4
19766: PPUSH
19767: LD_VAR 0 6
19771: PPUSH
19772: LD_INT 3
19774: PPUSH
19775: CALL_OW 272
19779: PUSH
19780: LD_VAR 0 5
19784: PPUSH
19785: LD_VAR 0 6
19789: PPUSH
19790: LD_INT 3
19792: PPUSH
19793: CALL_OW 273
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19802: LD_VAR 0 7
19806: PUSH
19807: LD_INT 1
19809: ARRAY
19810: PPUSH
19811: LD_VAR 0 7
19815: PUSH
19816: LD_INT 2
19818: ARRAY
19819: PPUSH
19820: CALL_OW 488
19824: NOT
19825: IFFALSE 19829
// exit ;
19827: GO 19959
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: LD_INT 92
19836: PUSH
19837: LD_VAR 0 4
19841: PUSH
19842: LD_VAR 0 5
19846: PUSH
19847: LD_INT 4
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 3
19858: PUSH
19859: LD_INT 54
19861: PUSH
19862: EMPTY
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PPUSH
19873: CALL_OW 69
19877: ST_TO_ADDR
// if not result then
19878: LD_VAR 0 2
19882: NOT
19883: IFFALSE 19887
// exit ;
19885: GO 19959
// for i in result do
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_VAR 0 2
19896: PUSH
19897: FOR_IN
19898: IFFALSE 19957
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
19900: LD_VAR 0 3
19904: PPUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: CALL_OW 250
19914: PPUSH
19915: LD_VAR 0 6
19919: PPUSH
19920: LD_INT 3
19922: PPUSH
19923: CALL_OW 272
19927: PPUSH
19928: LD_VAR 0 3
19932: PPUSH
19933: CALL_OW 251
19937: PPUSH
19938: LD_VAR 0 6
19942: PPUSH
19943: LD_INT 3
19945: PPUSH
19946: CALL_OW 273
19950: PPUSH
19951: CALL_OW 111
19955: GO 19897
19957: POP
19958: POP
// end ;
19959: LD_VAR 0 2
19963: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
19964: LD_INT 0
19966: PPUSH
19967: PPUSH
19968: PPUSH
19969: PPUSH
19970: PPUSH
19971: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
19972: LD_VAR 0 1
19976: PPUSH
19977: CALL_OW 302
19981: NOT
19982: PUSH
19983: LD_VAR 0 2
19987: PPUSH
19988: CALL_OW 302
19992: NOT
19993: OR
19994: PUSH
19995: LD_VAR 0 2
19999: PPUSH
20000: CALL_OW 313
20004: PUSH
20005: LD_INT 6
20007: EQUAL
20008: OR
20009: IFFALSE 20013
// exit ;
20011: GO 20230
// btype := GetBType ( building ) ;
20013: LD_ADDR_VAR 0 8
20017: PUSH
20018: LD_VAR 0 2
20022: PPUSH
20023: CALL_OW 266
20027: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
20028: LD_VAR 0 8
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 1
20038: PUSH
20039: LD_INT 2
20041: PUSH
20042: LD_INT 4
20044: PUSH
20045: LD_INT 5
20047: PUSH
20048: LD_INT 3
20050: PUSH
20051: LD_INT 6
20053: PUSH
20054: LD_INT 7
20056: PUSH
20057: LD_INT 8
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: IN
20071: NOT
20072: IFFALSE 20076
// exit ;
20074: GO 20230
// x := GetX ( building ) ;
20076: LD_ADDR_VAR 0 4
20080: PUSH
20081: LD_VAR 0 2
20085: PPUSH
20086: CALL_OW 250
20090: ST_TO_ADDR
// y := GetY ( building ) ;
20091: LD_ADDR_VAR 0 5
20095: PUSH
20096: LD_VAR 0 2
20100: PPUSH
20101: CALL_OW 251
20105: ST_TO_ADDR
// d := GetDir ( building ) ;
20106: LD_ADDR_VAR 0 6
20110: PUSH
20111: LD_VAR 0 2
20115: PPUSH
20116: CALL_OW 254
20120: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20121: LD_ADDR_VAR 0 7
20125: PUSH
20126: LD_VAR 0 4
20130: PPUSH
20131: LD_VAR 0 6
20135: PPUSH
20136: LD_INT 3
20138: PPUSH
20139: CALL_OW 272
20143: PUSH
20144: LD_VAR 0 5
20148: PPUSH
20149: LD_VAR 0 6
20153: PPUSH
20154: LD_INT 3
20156: PPUSH
20157: CALL_OW 273
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20166: LD_VAR 0 7
20170: PUSH
20171: LD_INT 1
20173: ARRAY
20174: PPUSH
20175: LD_VAR 0 7
20179: PUSH
20180: LD_INT 2
20182: ARRAY
20183: PPUSH
20184: CALL_OW 488
20188: NOT
20189: IFFALSE 20193
// exit ;
20191: GO 20230
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_VAR 0 1
20202: PPUSH
20203: LD_VAR 0 7
20207: PUSH
20208: LD_INT 1
20210: ARRAY
20211: PPUSH
20212: LD_VAR 0 7
20216: PUSH
20217: LD_INT 2
20219: ARRAY
20220: PPUSH
20221: CALL_OW 297
20225: PUSH
20226: LD_INT 4
20228: LESS
20229: ST_TO_ADDR
// end ;
20230: LD_VAR 0 3
20234: RET
// export function PlaceExplosives ( building ) ; begin
20235: LD_INT 0
20237: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20238: LD_ADDR_EXP 29
20242: PUSH
20243: LD_EXP 29
20247: PPUSH
20248: LD_VAR 0 1
20252: PPUSH
20253: CALL 66186 0 2
20257: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20258: LD_VAR 0 1
20262: PPUSH
20263: CALL_OW 250
20267: PPUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 251
20277: PPUSH
20278: LD_STRING PlantBomb
20280: PPUSH
20281: CALL_OW 366
// end ;
20285: LD_VAR 0 2
20289: RET
// export function CreateNature ; var i ; begin
20290: LD_INT 0
20292: PPUSH
20293: PPUSH
// PrepareFrog ;
20294: CALL 62676 0 0
// for i := 1 to 3 do
20298: LD_ADDR_VAR 0 2
20302: PUSH
20303: DOUBLE
20304: LD_INT 1
20306: DEC
20307: ST_TO_ADDR
20308: LD_INT 3
20310: PUSH
20311: FOR_TO
20312: IFFALSE 20331
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20314: CALL_OW 44
20318: PPUSH
20319: LD_INT 24
20321: PPUSH
20322: LD_INT 0
20324: PPUSH
20325: CALL_OW 49
20329: GO 20311
20331: POP
20332: POP
// end ;
20333: LD_VAR 0 1
20337: RET
// export function MarkBuilding ( building , marker ) ; begin
20338: LD_INT 0
20340: PPUSH
// if marker then
20341: LD_VAR 0 2
20345: IFFALSE 20392
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20347: LD_VAR 0 1
20351: PPUSH
20352: CALL_OW 250
20356: PPUSH
20357: LD_VAR 0 1
20361: PPUSH
20362: CALL_OW 251
20366: PPUSH
20367: LD_INT 2
20369: PPUSH
20370: LD_INT 3
20372: NEG
20373: PPUSH
20374: CALL_OW 330
// SetBName ( building , target ) ;
20378: LD_VAR 0 1
20382: PPUSH
20383: LD_STRING target
20385: PPUSH
20386: CALL_OW 500
// end else
20390: GO 20431
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20392: LD_VAR 0 1
20396: PPUSH
20397: CALL_OW 250
20401: PPUSH
20402: LD_VAR 0 1
20406: PPUSH
20407: CALL_OW 251
20411: PPUSH
20412: LD_INT 2
20414: PPUSH
20415: CALL_OW 331
// SetBName ( building ,  ) ;
20419: LD_VAR 0 1
20423: PPUSH
20424: LD_STRING 
20426: PPUSH
20427: CALL_OW 500
// end ; end ; end_of_file
20431: LD_VAR 0 3
20435: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20436: LD_INT 0
20438: PPUSH
// lockerCodeValid := false ;
20439: LD_ADDR_EXP 71
20443: PUSH
20444: LD_INT 0
20446: ST_TO_ADDR
// if not step then
20447: LD_LOC 1
20451: NOT
20452: IFFALSE 20462
// step := 1 ;
20454: LD_ADDR_LOC 1
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20462: LD_STRING HEscape
20464: PUSH
20465: LD_LOC 1
20469: STR
20470: PPUSH
20471: CALL_OW 97
20475: PUSH
20476: LD_INT 1
20478: DOUBLE
20479: EQUAL
20480: IFTRUE 20484
20482: GO 20491
20484: POP
// LockerMinigameSearch ; 2 :
20485: CALL 20524 0 0
20489: GO 20507
20491: LD_INT 2
20493: DOUBLE
20494: EQUAL
20495: IFTRUE 20499
20497: GO 20506
20499: POP
// LockerMinigameSetCode ; end ;
20500: CALL 20598 0 0
20504: GO 20507
20506: POP
// if lockerCodeValid then
20507: LD_EXP 71
20511: IFFALSE 20515
// exit ;
20513: GO 20519
// StartLockerMinigame ;
20515: CALL 20436 0 0
// end ;
20519: LD_VAR 0 1
20523: RET
// function LockerMinigameSearch ; begin
20524: LD_INT 0
20526: PPUSH
// if code then
20527: LD_LOC 2
20531: IFFALSE 20547
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20533: LD_EXP 45
20537: PPUSH
20538: LD_STRING DH-Escape-3-Hint-0
20540: PPUSH
20541: CALL_OW 88
// exit ;
20545: GO 20593
// end ; Randomize ;
20547: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20551: LD_ADDR_LOC 2
20555: PUSH
20556: LD_INT 1
20558: PPUSH
20559: LD_INT 5
20561: PPUSH
20562: CALL_OW 12
20566: ST_TO_ADDR
// step := 2 ;
20567: LD_ADDR_LOC 1
20571: PUSH
20572: LD_INT 2
20574: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20575: LD_EXP 45
20579: PPUSH
20580: LD_STRING DH-Escape-3-Hint-
20582: PUSH
20583: LD_LOC 2
20587: STR
20588: PPUSH
20589: CALL_OW 88
// end ;
20593: LD_VAR 0 1
20597: RET
// function LockerMinigameSetCode ; begin
20598: LD_INT 0
20600: PPUSH
// if not code then
20601: LD_LOC 2
20605: NOT
20606: IFFALSE 20616
// code := 0 ;
20608: LD_ADDR_LOC 2
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// lockerBusy := true ;
20616: LD_ADDR_EXP 72
20620: PUSH
20621: LD_INT 1
20623: ST_TO_ADDR
// InGameOff ;
20624: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20628: LD_STRING initLockerMinigame("
20630: PUSH
20631: LD_LOC 2
20635: STR
20636: PUSH
20637: LD_STRING ")
20639: STR
20640: PPUSH
20641: CALL_OW 559
// step := 3 ;
20645: LD_ADDR_LOC 1
20649: PUSH
20650: LD_INT 3
20652: ST_TO_ADDR
// repeat wait ( 1 ) ;
20653: LD_INT 1
20655: PPUSH
20656: CALL_OW 67
// until not lockerBusy ;
20660: LD_EXP 72
20664: NOT
20665: IFFALSE 20653
// InGameOn ;
20667: CALL_OW 8
// if not lockerCodeValid then
20671: LD_EXP 71
20675: NOT
20676: IFFALSE 20702
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
20678: LD_EXP 45
20682: PPUSH
20683: LD_STRING DH-Escape-3-Fail-
20685: PUSH
20686: LD_INT 1
20688: PPUSH
20689: LD_INT 2
20691: PPUSH
20692: CALL_OW 12
20696: STR
20697: PPUSH
20698: CALL_OW 88
// end ; end_of_file
20702: LD_VAR 0 1
20706: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
20707: LD_VAR 0 2
20711: PUSH
20712: LD_INT 102
20714: EQUAL
20715: IFFALSE 20737
// begin lockerBusy := false ;
20717: LD_ADDR_EXP 72
20721: PUSH
20722: LD_INT 0
20724: ST_TO_ADDR
// lockerCodeValid := p3 ;
20725: LD_ADDR_EXP 71
20729: PUSH
20730: LD_VAR 0 3
20734: ST_TO_ADDR
// end else
20735: GO 20791
// if p2 = 103 then
20737: LD_VAR 0 2
20741: PUSH
20742: LD_INT 103
20744: EQUAL
20745: IFFALSE 20757
// begin weatherBusy := false ;
20747: LD_ADDR_EXP 37
20751: PUSH
20752: LD_INT 0
20754: ST_TO_ADDR
// end else
20755: GO 20791
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_VAR 0 2
20766: PPUSH
20767: LD_VAR 0 3
20771: PPUSH
20772: LD_VAR 0 4
20776: PPUSH
20777: LD_VAR 0 5
20781: PPUSH
20782: LD_VAR 0 6
20786: PPUSH
20787: CALL 70563 0 6
// end ;
20791: PPOPN 6
20793: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
20794: LD_STRING killGameMusic();
20796: PPUSH
20797: CALL_OW 559
// PlayOriginalMusic ;
20801: CALL 90677 0 0
// SOS_MapStart ( ) ;
20805: CALL 70467 0 0
// end ; end_of_file
20809: PPOPN 1
20811: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
20812: LD_EXP 17
20816: NOT
20817: PUSH
20818: LD_EXP 70
20822: AND
20823: IFFALSE 21403
20825: GO 20827
20827: DISABLE
20828: LD_INT 0
20830: PPUSH
20831: PPUSH
20832: PPUSH
20833: PPUSH
20834: PPUSH
// begin enable ;
20835: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
20836: LD_ADDR_VAR 0 3
20840: PUSH
20841: LD_INT 26
20843: PUSH
20844: LD_INT 27
20846: PUSH
20847: LD_INT 28
20849: PUSH
20850: LD_INT 29
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 30
20861: PUSH
20862: LD_INT 31
20864: PUSH
20865: LD_INT 32
20867: PUSH
20868: LD_INT 33
20870: PUSH
20871: LD_INT 34
20873: PUSH
20874: LD_INT 35
20876: PUSH
20877: LD_INT 36
20879: PUSH
20880: LD_INT 37
20882: PUSH
20883: LD_INT 38
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 39
20899: PUSH
20900: LD_INT 40
20902: PUSH
20903: LD_INT 41
20905: PUSH
20906: LD_INT 42
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 43
20917: PUSH
20918: LD_INT 44
20920: PUSH
20921: LD_INT 45
20923: PUSH
20924: LD_INT 46
20926: PUSH
20927: LD_INT 47
20929: PUSH
20930: LD_INT 46
20932: PUSH
20933: LD_INT 45
20935: PUSH
20936: LD_INT 44
20938: PUSH
20939: LD_INT 43
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: ST_TO_ADDR
// for i in ruPatrol do
20959: LD_ADDR_VAR 0 1
20963: PUSH
20964: LD_EXP 70
20968: PUSH
20969: FOR_IN
20970: IFFALSE 21401
// begin if not IsOk ( i ) then
20972: LD_VAR 0 1
20976: PPUSH
20977: CALL_OW 302
20981: NOT
20982: IFFALSE 20986
// continue ;
20984: GO 20969
// if Count ( ruKilledHex ) then
20986: LD_EXP 43
20990: PPUSH
20991: CALL 30967 0 1
20995: IFFALSE 21068
// for j in ruKilledHex do
20997: LD_ADDR_VAR 0 2
21001: PUSH
21002: LD_EXP 43
21006: PUSH
21007: FOR_IN
21008: IFFALSE 21066
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
21010: LD_VAR 0 1
21014: PPUSH
21015: LD_VAR 0 2
21019: PUSH
21020: LD_INT 1
21022: ARRAY
21023: PPUSH
21024: LD_VAR 0 2
21028: PUSH
21029: LD_INT 2
21031: ARRAY
21032: PPUSH
21033: CALL_OW 297
21037: PUSH
21038: LD_INT 6
21040: LESS
21041: IFFALSE 21064
// begin Query ( QBody ) ;
21043: LD_STRING QBody
21045: PPUSH
21046: CALL_OW 97
// isAlarm := true ;
21050: LD_ADDR_EXP 17
21054: PUSH
21055: LD_INT 1
21057: ST_TO_ADDR
// exit ;
21058: POP
21059: POP
21060: POP
21061: POP
21062: GO 21403
// end ;
21064: GO 21007
21066: POP
21067: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
21068: LD_ADDR_VAR 0 5
21072: PUSH
21073: LD_INT 22
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 21
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 91
21095: PUSH
21096: LD_VAR 0 1
21100: PUSH
21101: LD_INT 7
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: PPUSH
21114: CALL_OW 69
21118: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21119: LD_INT 2
21121: PPUSH
21122: LD_VAR 0 1
21126: PPUSH
21127: CALL_OW 292
21131: PUSH
21132: LD_VAR 0 5
21136: AND
21137: IFFALSE 21287
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21139: LD_EXP 30
21143: PUSH
21144: LD_VAR 0 1
21148: PPUSH
21149: LD_EXP 65
21153: PPUSH
21154: CALL_OW 296
21158: PUSH
21159: LD_INT 16
21161: LESS
21162: AND
21163: PUSH
21164: LD_EXP 38
21168: OR
21169: IFFALSE 21173
// continue ;
21171: GO 20969
// for j in tmp do
21173: LD_ADDR_VAR 0 2
21177: PUSH
21178: LD_VAR 0 5
21182: PUSH
21183: FOR_IN
21184: IFFALSE 21245
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21186: LD_ADDR_VAR 0 5
21190: PUSH
21191: LD_VAR 0 5
21195: PUSH
21196: LD_INT 22
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 21
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 91
21218: PUSH
21219: LD_VAR 0 2
21223: PUSH
21224: LD_INT 4
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: UNION
21242: ST_TO_ADDR
21243: GO 21183
21245: POP
21246: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: LD_VAR 0 5
21256: PPUSH
21257: LD_VAR 0 1
21261: PPUSH
21262: CALL_OW 74
21266: PPUSH
21267: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21271: LD_VAR 0 1
21275: PPUSH
21276: LD_VAR 0 5
21280: PPUSH
21281: CALL 21406 0 2
// continue ;
21285: GO 20969
// end ; if HasTask ( i ) then
21287: LD_VAR 0 1
21291: PPUSH
21292: CALL_OW 314
21296: IFFALSE 21300
// continue ;
21298: GO 20969
// tag := GetTag ( i ) ;
21300: LD_ADDR_VAR 0 4
21304: PUSH
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 110
21314: ST_TO_ADDR
// if not tag then
21315: LD_VAR 0 4
21319: NOT
21320: IFFALSE 21333
// begin ComHold ( i ) ;
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 140
// continue ;
21331: GO 20969
// end ; for j := 1 to points [ tag ] do
21333: LD_ADDR_VAR 0 2
21337: PUSH
21338: DOUBLE
21339: LD_INT 1
21341: DEC
21342: ST_TO_ADDR
21343: LD_VAR 0 3
21347: PUSH
21348: LD_VAR 0 4
21352: ARRAY
21353: PUSH
21354: FOR_TO
21355: IFFALSE 21397
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21357: LD_VAR 0 1
21361: PPUSH
21362: LD_VAR 0 3
21366: PUSH
21367: LD_VAR 0 4
21371: ARRAY
21372: PUSH
21373: LD_VAR 0 2
21377: ARRAY
21378: PPUSH
21379: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21383: LD_VAR 0 1
21387: PPUSH
21388: LD_INT 70
21390: PPUSH
21391: CALL_OW 202
// end ;
21395: GO 21354
21397: POP
21398: POP
// end ;
21399: GO 20969
21401: POP
21402: POP
// end ;
21403: PPOPN 5
21405: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21406: LD_INT 0
21408: PPUSH
21409: PPUSH
21410: PPUSH
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21411: LD_VAR 0 2
21415: PPUSH
21416: LD_INT 2
21418: PUSH
21419: LD_INT 25
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 25
21431: PUSH
21432: LD_INT 11
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 25
21441: PUSH
21442: LD_INT 34
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 25
21451: PUSH
21452: LD_INT 32
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: PUSH
21466: EMPTY
21467: LIST
21468: PPUSH
21469: CALL_OW 72
21473: IFFALSE 21586
// begin blockPatrolThread := true ;
21475: LD_ADDR_EXP 38
21479: PUSH
21480: LD_INT 1
21482: ST_TO_ADDR
// DialogueOn ;
21483: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL_OW 258
21496: PUSH
21497: LD_INT 1
21499: DOUBLE
21500: EQUAL
21501: IFTRUE 21505
21503: GO 21520
21505: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21506: LD_VAR 0 1
21510: PPUSH
21511: LD_STRING DRum-Fail-3
21513: PPUSH
21514: CALL_OW 88
21518: GO 21544
21520: LD_INT 2
21522: DOUBLE
21523: EQUAL
21524: IFTRUE 21528
21526: GO 21543
21528: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
21529: LD_VAR 0 1
21533: PPUSH
21534: LD_STRING DRuf-Fail-3
21536: PPUSH
21537: CALL_OW 88
21541: GO 21544
21543: POP
// DialogueOff ;
21544: CALL_OW 7
// wait ( 0 0$5 ) ;
21548: LD_INT 175
21550: PPUSH
21551: CALL_OW 67
// if IsOk ( guard ) then
21555: LD_VAR 0 1
21559: PPUSH
21560: CALL_OW 302
21564: IFFALSE 21576
// isAlarm := true else
21566: LD_ADDR_EXP 17
21570: PUSH
21571: LD_INT 1
21573: ST_TO_ADDR
21574: GO 21584
// blockPatrolThread := false ;
21576: LD_ADDR_EXP 38
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// exit ;
21584: GO 22587
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
21586: LD_VAR 0 2
21590: PPUSH
21591: LD_INT 23
21593: PUSH
21594: LD_INT 3
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PPUSH
21601: CALL_OW 72
21605: PUSH
21606: LD_VAR 0 2
21610: PPUSH
21611: LD_INT 95
21613: PUSH
21614: LD_INT 61
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PPUSH
21621: CALL_OW 72
21625: OR
21626: IFFALSE 21630
// exit ;
21628: GO 22587
// DialogueOn ;
21630: CALL_OW 6
// blockPatrolThread := true ;
21634: LD_ADDR_EXP 38
21638: PUSH
21639: LD_INT 1
21641: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 87
// if not Heike in units then
21651: LD_EXP 45
21655: PUSH
21656: LD_VAR 0 2
21660: IN
21661: NOT
21662: IFFALSE 22028
// begin case GetSex ( guard ) of sex_male :
21664: LD_VAR 0 1
21668: PPUSH
21669: CALL_OW 258
21673: PUSH
21674: LD_INT 1
21676: DOUBLE
21677: EQUAL
21678: IFTRUE 21682
21680: GO 21697
21682: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_STRING DRum-Guard-1
21690: PPUSH
21691: CALL_OW 88
21695: GO 21721
21697: LD_INT 2
21699: DOUBLE
21700: EQUAL
21701: IFTRUE 21705
21703: GO 21720
21705: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
21706: LD_VAR 0 1
21710: PPUSH
21711: LD_STRING DRuf-Guard-1
21713: PPUSH
21714: CALL_OW 88
21718: GO 21721
21720: POP
// case Query ( SurrenderInfoPeople ) of 1 :
21721: LD_STRING SurrenderInfoPeople
21723: PPUSH
21724: CALL_OW 97
21728: PUSH
21729: LD_INT 1
21731: DOUBLE
21732: EQUAL
21733: IFTRUE 21737
21735: GO 21846
21737: POP
// begin Query ( CaughtSquadInfo ) ;
21738: LD_STRING CaughtSquadInfo
21740: PPUSH
21741: CALL_OW 97
// for i in units do
21745: LD_ADDR_VAR 0 4
21749: PUSH
21750: LD_VAR 0 2
21754: PUSH
21755: FOR_IN
21756: IFFALSE 21813
// begin if Carry ( i ) then
21758: LD_VAR 0 4
21762: PPUSH
21763: CALL_OW 281
21767: IFFALSE 21784
// SetCargo ( i , mat_cans , 0 ) ;
21769: LD_VAR 0 4
21773: PPUSH
21774: LD_INT 1
21776: PPUSH
21777: LD_INT 0
21779: PPUSH
21780: CALL_OW 290
// SetSide ( i , 5 ) ;
21784: LD_VAR 0 4
21788: PPUSH
21789: LD_INT 5
21791: PPUSH
21792: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
21796: LD_VAR 0 4
21800: PPUSH
21801: LD_INT 113
21803: PPUSH
21804: LD_INT 17
21806: PPUSH
21807: CALL_OW 111
// end ;
21811: GO 21755
21813: POP
21814: POP
// ComMoveXY ( guard , 117 , 25 ) ;
21815: LD_VAR 0 1
21819: PPUSH
21820: LD_INT 117
21822: PPUSH
21823: LD_INT 25
21825: PPUSH
21826: CALL_OW 111
// DialogueOff ;
21830: CALL_OW 7
// blockPatrolThread := false ;
21834: LD_ADDR_EXP 38
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// exit ;
21842: GO 22587
// end ; 2 :
21844: GO 22028
21846: LD_INT 2
21848: DOUBLE
21849: EQUAL
21850: IFTRUE 21854
21852: GO 22027
21854: POP
// begin DialogueOff ;
21855: CALL_OW 7
// wait ( 0 0$2 ) ;
21859: LD_INT 70
21861: PPUSH
21862: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21866: LD_INT 6
21868: PPUSH
21869: LD_INT 2
21871: PPUSH
21872: LD_INT 2
21874: PPUSH
21875: LD_INT 1
21877: PPUSH
21878: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
21882: LD_VAR 0 1
21886: PPUSH
21887: LD_VAR 0 2
21891: PUSH
21892: LD_INT 1
21894: ARRAY
21895: PPUSH
21896: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21900: LD_VAR 0 1
21904: PPUSH
21905: CALL_OW 258
21909: PUSH
21910: LD_INT 1
21912: DOUBLE
21913: EQUAL
21914: IFTRUE 21918
21916: GO 21933
21918: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21919: LD_VAR 0 1
21923: PPUSH
21924: LD_STRING DRum-Fail-3
21926: PPUSH
21927: CALL_OW 88
21931: GO 21957
21933: LD_INT 2
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 21956
21941: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21942: LD_VAR 0 1
21946: PPUSH
21947: LD_STRING DRum-Fail-3
21949: PPUSH
21950: CALL_OW 88
21954: GO 21957
21956: POP
// wait ( 0 0$5 ) ;
21957: LD_INT 175
21959: PPUSH
21960: CALL_OW 67
// if IsOk ( guard ) then
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 302
21973: IFFALSE 21985
// isAlarm := true else
21975: LD_ADDR_EXP 17
21979: PUSH
21980: LD_INT 1
21982: ST_TO_ADDR
21983: GO 22017
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
21985: LD_INT 6
21987: PPUSH
21988: LD_INT 2
21990: PPUSH
21991: LD_INT 0
21993: PPUSH
21994: LD_INT 1
21996: PPUSH
21997: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22001: LD_INT 3
22003: PPUSH
22004: LD_INT 2
22006: PPUSH
22007: LD_INT 0
22009: PPUSH
22010: LD_INT 1
22012: PPUSH
22013: CALL_OW 80
// end ; blockPatrolThread := false ;
22017: LD_ADDR_EXP 38
22021: PUSH
22022: LD_INT 0
22024: ST_TO_ADDR
// end ; end ;
22025: GO 22028
22027: POP
// end ; if Carry ( Heike ) then
22028: LD_EXP 45
22032: PPUSH
22033: CALL_OW 281
22037: IFFALSE 22113
// begin case GetSex ( guard ) of sex_male :
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 258
22048: PUSH
22049: LD_INT 1
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22072
22057: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
22058: LD_VAR 0 1
22062: PPUSH
22063: LD_STRING DRum-FoodFail-1
22065: PPUSH
22066: CALL_OW 88
22070: GO 22096
22072: LD_INT 2
22074: DOUBLE
22075: EQUAL
22076: IFTRUE 22080
22078: GO 22095
22080: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22081: LD_VAR 0 1
22085: PPUSH
22086: LD_STRING DRuf-FoodFail-2
22088: PPUSH
22089: CALL_OW 88
22093: GO 22096
22095: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22096: LD_EXP 45
22100: PPUSH
22101: LD_INT 1
22103: PPUSH
22104: LD_INT 0
22106: PPUSH
22107: CALL_OW 290
// end else
22111: GO 22170
// begin case GetSex ( guard ) of sex_male :
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL_OW 258
22122: PUSH
22123: LD_INT 1
22125: DOUBLE
22126: EQUAL
22127: IFTRUE 22131
22129: GO 22146
22131: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22132: LD_VAR 0 1
22136: PPUSH
22137: LD_STRING DRum-Seen-1
22139: PPUSH
22140: CALL_OW 88
22144: GO 22170
22146: LD_INT 2
22148: DOUBLE
22149: EQUAL
22150: IFTRUE 22154
22152: GO 22169
22154: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22155: LD_VAR 0 1
22159: PPUSH
22160: LD_STRING DRuf-Seen-1
22162: PPUSH
22163: CALL_OW 88
22167: GO 22170
22169: POP
// end ; alone := ( units = 1 ) ;
22170: LD_ADDR_VAR 0 5
22174: PUSH
22175: LD_VAR 0 2
22179: PUSH
22180: LD_INT 1
22182: EQUAL
22183: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22184: LD_STRING SurrenderInfo
22186: PPUSH
22187: CALL_OW 97
22191: PUSH
22192: LD_INT 1
22194: DOUBLE
22195: EQUAL
22196: IFTRUE 22200
22198: GO 22389
22200: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22201: LD_INT 23
22203: PPUSH
22204: CALL_OW 87
// RemoveUnit ( Heike ) ;
22208: LD_EXP 45
22212: PPUSH
22213: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22217: LD_EXP 45
22221: PPUSH
22222: LD_INT 23
22224: PPUSH
22225: CALL_OW 52
// if not alone then
22229: LD_VAR 0 5
22233: NOT
22234: IFFALSE 22301
// for i in units diff Heike do
22236: LD_ADDR_VAR 0 4
22240: PUSH
22241: LD_VAR 0 2
22245: PUSH
22246: LD_EXP 45
22250: DIFF
22251: PUSH
22252: FOR_IN
22253: IFFALSE 22299
// begin RemoveUnit ( i ) ;
22255: LD_VAR 0 4
22259: PPUSH
22260: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22264: LD_VAR 0 4
22268: PPUSH
22269: LD_INT 114
22271: PPUSH
22272: LD_INT 17
22274: PPUSH
22275: LD_INT 10
22277: PPUSH
22278: LD_INT 0
22280: PPUSH
22281: CALL_OW 50
// SetSide ( i , 5 ) ;
22285: LD_VAR 0 4
22289: PPUSH
22290: LD_INT 5
22292: PPUSH
22293: CALL_OW 235
// end ;
22297: GO 22252
22299: POP
22300: POP
// wait ( 0 0$0.3 ) ;
22301: LD_INT 10
22303: PPUSH
22304: CALL_OW 67
// if alone then
22308: LD_VAR 0 5
22312: IFFALSE 22323
// Query ( CaughtInfoAlone ) else
22314: LD_STRING CaughtInfoAlone
22316: PPUSH
22317: CALL_OW 97
22321: GO 22330
// Query ( CaughtInfo ) ;
22323: LD_STRING CaughtInfo
22325: PPUSH
22326: CALL_OW 97
// wait ( 0 0$2 ) ;
22330: LD_INT 70
22332: PPUSH
22333: CALL_OW 67
// StartLockerMinigame ;
22337: CALL 20436 0 0
// Say ( Heike , DH-Reset ) ;
22341: LD_EXP 45
22345: PPUSH
22346: LD_STRING DH-Reset
22348: PPUSH
22349: CALL_OW 88
// DialogueOff ;
22353: CALL_OW 7
// InGameOff ;
22357: CALL_OW 9
// blockPatrolThread := false ;
22361: LD_ADDR_EXP 38
22365: PUSH
22366: LD_INT 0
22368: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22369: LD_EXP 45
22373: PPUSH
22374: CALL_OW 122
// ComFree ( guard ) ;
22378: LD_VAR 0 1
22382: PPUSH
22383: CALL_OW 139
// end ; 2 :
22387: GO 22579
22389: LD_INT 2
22391: DOUBLE
22392: EQUAL
22393: IFTRUE 22397
22395: GO 22578
22397: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22398: LD_EXP 45
22402: PPUSH
22403: LD_STRING DH-Guard-2
22405: PPUSH
22406: CALL_OW 88
// DialogueOff ;
22410: CALL_OW 7
// wait ( 0 0$2 ) ;
22414: LD_INT 70
22416: PPUSH
22417: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22421: LD_INT 6
22423: PPUSH
22424: LD_INT 2
22426: PPUSH
22427: LD_INT 2
22429: PPUSH
22430: LD_INT 1
22432: PPUSH
22433: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22437: LD_VAR 0 1
22441: PPUSH
22442: LD_EXP 45
22446: PPUSH
22447: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22451: LD_VAR 0 1
22455: PPUSH
22456: CALL_OW 258
22460: PUSH
22461: LD_INT 1
22463: DOUBLE
22464: EQUAL
22465: IFTRUE 22469
22467: GO 22484
22469: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22470: LD_VAR 0 1
22474: PPUSH
22475: LD_STRING DRum-Fail-3
22477: PPUSH
22478: CALL_OW 88
22482: GO 22508
22484: LD_INT 2
22486: DOUBLE
22487: EQUAL
22488: IFTRUE 22492
22490: GO 22507
22492: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22493: LD_VAR 0 1
22497: PPUSH
22498: LD_STRING DRum-Fail-3
22500: PPUSH
22501: CALL_OW 88
22505: GO 22508
22507: POP
// wait ( 0 0$5 ) ;
22508: LD_INT 175
22510: PPUSH
22511: CALL_OW 67
// if IsOk ( guard ) then
22515: LD_VAR 0 1
22519: PPUSH
22520: CALL_OW 302
22524: IFFALSE 22536
// isAlarm := true else
22526: LD_ADDR_EXP 17
22530: PUSH
22531: LD_INT 1
22533: ST_TO_ADDR
22534: GO 22568
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22536: LD_INT 6
22538: PPUSH
22539: LD_INT 2
22541: PPUSH
22542: LD_INT 0
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22552: LD_INT 3
22554: PPUSH
22555: LD_INT 2
22557: PPUSH
22558: LD_INT 0
22560: PPUSH
22561: LD_INT 1
22563: PPUSH
22564: CALL_OW 80
// end ; blockPatrolThread := false ;
22568: LD_ADDR_EXP 38
22572: PUSH
22573: LD_INT 0
22575: ST_TO_ADDR
// end ; end ;
22576: GO 22579
22578: POP
// blockPatrolThread := false ;
22579: LD_ADDR_EXP 38
22583: PUSH
22584: LD_INT 0
22586: ST_TO_ADDR
// end ;
22587: LD_VAR 0 3
22591: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22592: LD_EXP 14
22596: PPUSH
22597: LD_INT 22
22599: PUSH
22600: LD_INT 5
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 3
22609: PUSH
22610: LD_INT 101
22612: PUSH
22613: LD_INT 6
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 92
22626: PUSH
22627: LD_INT 113
22629: PUSH
22630: LD_INT 16
22632: PUSH
22633: LD_INT 12
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 91
22644: PUSH
22645: LD_EXP 45
22649: PUSH
22650: LD_INT 6
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 72
22668: PUSH
22669: LD_EXP 30
22673: NOT
22674: AND
22675: IFFALSE 22780
22677: GO 22679
22679: DISABLE
22680: LD_INT 0
22682: PPUSH
// begin enable ;
22683: ENABLE
// DialogueOn ;
22684: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
22688: LD_EXP 45
22692: PPUSH
22693: LD_STRING DH-Join-
22695: PUSH
22696: LD_INT 1
22698: PPUSH
22699: LD_INT 3
22701: PPUSH
22702: CALL_OW 12
22706: STR
22707: PPUSH
22708: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
22712: LD_ADDR_VAR 0 1
22716: PUSH
22717: LD_EXP 14
22721: PPUSH
22722: LD_INT 22
22724: PUSH
22725: LD_INT 5
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 91
22734: PUSH
22735: LD_EXP 45
22739: PUSH
22740: LD_INT 10
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PPUSH
22752: CALL_OW 72
22756: PUSH
22757: FOR_IN
22758: IFFALSE 22774
// SetSide ( i , 2 ) ;
22760: LD_VAR 0 1
22764: PPUSH
22765: LD_INT 2
22767: PPUSH
22768: CALL_OW 235
22772: GO 22757
22774: POP
22775: POP
// DialogueOff ;
22776: CALL_OW 7
// end ; end_of_file
22780: PPOPN 1
22782: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
22783: LD_EXP 17
22787: PUSH
22788: LD_EXP 5
22792: AND
22793: IFFALSE 23094
22795: GO 22797
22797: DISABLE
22798: LD_INT 0
22800: PPUSH
22801: PPUSH
22802: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
22803: LD_INT 1
22805: NEG
22806: PPUSH
22807: LD_INT 1
22809: NEG
22810: PPUSH
22811: LD_STRING alarm
22813: PPUSH
22814: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
22818: LD_INT 3
22820: PPUSH
22821: LD_INT 2
22823: PPUSH
22824: LD_INT 2
22826: PPUSH
22827: LD_INT 1
22829: PPUSH
22830: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22834: LD_INT 6
22836: PPUSH
22837: LD_INT 2
22839: PPUSH
22840: LD_INT 2
22842: PPUSH
22843: LD_INT 1
22845: PPUSH
22846: CALL_OW 80
// DialogueOn ;
22850: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
22854: LD_EXP 45
22858: PPUSH
22859: LD_STRING DH-Alarm-1
22861: PPUSH
22862: CALL_OW 88
// DialogueOff ;
22866: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
22870: LD_ADDR_VAR 0 2
22874: PUSH
22875: LD_INT 107
22877: PUSH
22878: LD_INT 39
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 143
22887: PUSH
22888: LD_INT 33
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 180
22897: PUSH
22898: LD_INT 115
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 96
22907: PUSH
22908: LD_INT 90
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 59
22917: PUSH
22918: LD_INT 52
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 16
22927: PUSH
22928: LD_INT 15
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 90
22937: PUSH
22938: LD_INT 120
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
22954: LD_ADDR_VAR 0 3
22958: PUSH
22959: LD_INT 22
22961: PUSH
22962: LD_INT 6
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 25
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL_OW 69
22987: ST_TO_ADDR
// for i in tmp do
22988: LD_ADDR_VAR 0 1
22992: PUSH
22993: LD_VAR 0 3
22997: PUSH
22998: FOR_IN
22999: IFFALSE 23067
// begin ComExit ( i ) ;
23001: LD_VAR 0 1
23005: PPUSH
23006: CALL 66584 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
23010: LD_VAR 0 1
23014: PPUSH
23015: LD_VAR 0 2
23019: PUSH
23020: LD_VAR 0 1
23024: PUSH
23025: LD_INT 7
23027: MOD
23028: PUSH
23029: LD_INT 1
23031: PLUS
23032: ARRAY
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: PPUSH
23038: LD_VAR 0 2
23042: PUSH
23043: LD_VAR 0 1
23047: PUSH
23048: LD_INT 7
23050: MOD
23051: PUSH
23052: LD_INT 1
23054: PLUS
23055: ARRAY
23056: PUSH
23057: LD_INT 2
23059: ARRAY
23060: PPUSH
23061: CALL_OW 174
// end ;
23065: GO 22998
23067: POP
23068: POP
// Explode ;
23069: CALL 23097 0 0
// wait ( 0 0$45 ) ;
23073: LD_INT 1575
23075: PPUSH
23076: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23080: LD_VAR 0 3
23084: PPUSH
23085: LD_EXP 45
23089: PPUSH
23090: CALL_OW 175
// end ;
23094: PPOPN 3
23096: END
// export function Explode ; var i , x , y , j ; begin
23097: LD_INT 0
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
23103: PPUSH
// if hasExplosionsInFactory then
23104: LD_EXP 7
23108: IFFALSE 23128
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23110: LD_ADDR_EXP 29
23114: PUSH
23115: LD_EXP 29
23119: PPUSH
23120: LD_INT 61
23122: PPUSH
23123: CALL 66186 0 2
23127: ST_TO_ADDR
// if explosivePlantedList then
23128: LD_EXP 29
23132: IFFALSE 23280
// begin for i in explosivePlantedList do
23134: LD_ADDR_VAR 0 2
23138: PUSH
23139: LD_EXP 29
23143: PUSH
23144: FOR_IN
23145: IFFALSE 23248
// begin x := GetX ( i ) ;
23147: LD_ADDR_VAR 0 3
23151: PUSH
23152: LD_VAR 0 2
23156: PPUSH
23157: CALL_OW 250
23161: ST_TO_ADDR
// y := GetY ( i ) ;
23162: LD_ADDR_VAR 0 4
23166: PUSH
23167: LD_VAR 0 2
23171: PPUSH
23172: CALL_OW 251
23176: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23177: LD_ADDR_VAR 0 5
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: LD_INT 3
23187: PUSH
23188: LD_INT 5
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: PUSH
23196: FOR_IN
23197: IFFALSE 23244
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23199: LD_VAR 0 3
23203: PPUSH
23204: LD_VAR 0 5
23208: PPUSH
23209: LD_INT 2
23211: PPUSH
23212: CALL_OW 272
23216: PPUSH
23217: LD_VAR 0 4
23221: PPUSH
23222: LD_VAR 0 5
23226: PPUSH
23227: LD_INT 2
23229: PPUSH
23230: CALL_OW 273
23234: PPUSH
23235: LD_INT 1
23237: PPUSH
23238: CALL_OW 453
23242: GO 23196
23244: POP
23245: POP
// end ;
23246: GO 23144
23248: POP
23249: POP
// Say ( Heike , DH-End-2 ) ;
23250: LD_EXP 45
23254: PPUSH
23255: LD_STRING DH-End-2
23257: PPUSH
23258: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23262: LD_INT 175
23264: PUSH
23265: LD_EXP 29
23269: PPUSH
23270: CALL 30967 0 1
23274: MUL
23275: PPUSH
23276: CALL_OW 67
// end ; if not isAlarm then
23280: LD_EXP 17
23284: NOT
23285: IFFALSE 23295
// isAlarm := true ;
23287: LD_ADDR_EXP 17
23291: PUSH
23292: LD_INT 1
23294: ST_TO_ADDR
// end ;
23295: LD_VAR 0 1
23299: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23300: LD_INT 22
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 21
23312: PUSH
23313: LD_INT 2
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: LD_INT 101
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 101
23335: PUSH
23336: LD_INT 6
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: PPUSH
23353: CALL_OW 69
23357: IFFALSE 23370
23359: GO 23361
23361: DISABLE
// isAlarm := true ; end_of_file
23362: LD_ADDR_EXP 17
23366: PUSH
23367: LD_INT 1
23369: ST_TO_ADDR
23370: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23371: LD_EXP 14
23375: PPUSH
23376: LD_INT 22
23378: PUSH
23379: LD_INT 2
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PPUSH
23386: CALL_OW 72
23390: PUSH
23391: LD_INT 3
23393: GREATER
23394: PUSH
23395: LD_EXP 17
23399: NOT
23400: AND
23401: IFFALSE 27446
23403: GO 23405
23405: DISABLE
23406: LD_INT 0
23408: PPUSH
23409: PPUSH
23410: PPUSH
23411: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23412: LD_EXP 65
23416: PPUSH
23417: LD_INT 155
23419: PPUSH
23420: LD_INT 68
23422: PPUSH
23423: LD_INT 0
23425: PPUSH
23426: CALL_OW 48
// wait ( 0 0$1 ) ;
23430: LD_INT 35
23432: PPUSH
23433: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23437: LD_INT 35
23439: PPUSH
23440: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23444: LD_EXP 65
23448: PPUSH
23449: CALL_OW 314
23453: NOT
23454: IFFALSE 23470
// ComMoveUnit ( ruDisturb , Heike ) ;
23456: LD_EXP 65
23460: PPUSH
23461: LD_EXP 45
23465: PPUSH
23466: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23470: LD_EXP 45
23474: PPUSH
23475: LD_EXP 65
23479: PPUSH
23480: CALL_OW 296
23484: PUSH
23485: LD_INT 6
23487: LESS
23488: PUSH
23489: LD_EXP 65
23493: PPUSH
23494: CALL_OW 302
23498: AND
23499: IFFALSE 23437
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23501: LD_EXP 45
23505: PPUSH
23506: CALL_OW 257
23510: PUSH
23511: LD_INT 33
23513: NONEQUAL
23514: PUSH
23515: LD_EXP 14
23519: PPUSH
23520: LD_INT 22
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 91
23532: PUSH
23533: LD_EXP 65
23537: PUSH
23538: LD_INT 8
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 25
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 25
23561: PUSH
23562: LD_INT 11
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 25
23571: PUSH
23572: LD_INT 32
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 25
23581: PUSH
23582: LD_INT 34
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: PPUSH
23601: CALL_OW 72
23605: OR
23606: IFFALSE 23616
// isAlarm := true ;
23608: LD_ADDR_EXP 17
23612: PUSH
23613: LD_INT 1
23615: ST_TO_ADDR
// if isAlarm then
23616: LD_EXP 17
23620: IFFALSE 23624
// exit ;
23622: GO 27446
// DialogueOn ;
23624: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23628: LD_EXP 65
23632: PPUSH
23633: LD_STRING DMcn-Interrupt-1
23635: PPUSH
23636: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23640: LD_EXP 65
23644: PPUSH
23645: LD_STRING DMcn-Interrupt-2
23647: PPUSH
23648: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
23652: LD_EXP 65
23656: PPUSH
23657: LD_STRING DMcn-Interrupt-3
23659: PPUSH
23660: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
23664: LD_EXP 45
23668: PPUSH
23669: LD_STRING DH-Interrupt-a-4
23671: PPUSH
23672: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
23676: LD_EXP 65
23680: PPUSH
23681: LD_STRING DMcn-Interrupt-a-5
23683: PPUSH
23684: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
23688: LD_EXP 45
23692: PPUSH
23693: LD_STRING DH-Interrupt-a-6
23695: PPUSH
23696: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
23700: LD_EXP 65
23704: PPUSH
23705: LD_STRING DMcn-Interrupt-a-7
23707: PPUSH
23708: CALL_OW 88
// DialogueOff ;
23712: CALL_OW 7
// hasMuchin := true ;
23716: LD_ADDR_EXP 30
23720: PUSH
23721: LD_INT 1
23723: ST_TO_ADDR
// Query ( MuchinInfo ) ;
23724: LD_STRING MuchinInfo
23726: PPUSH
23727: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
23731: LD_STRING M2a
23733: PPUSH
23734: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
23738: LD_INT 105
23740: PPUSH
23741: LD_INT 55
23743: PPUSH
23744: CALL_OW 428
23748: PPUSH
23749: LD_INT 2
23751: PPUSH
23752: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
23756: LD_INT 115
23758: PPUSH
23759: LD_INT 65
23761: PPUSH
23762: CALL_OW 428
23766: PPUSH
23767: LD_INT 2
23769: PPUSH
23770: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
23774: LD_INT 109
23776: PPUSH
23777: LD_INT 59
23779: PPUSH
23780: LD_INT 2
23782: PPUSH
23783: LD_INT 10
23785: NEG
23786: PPUSH
23787: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
23791: LD_INT 109
23793: PPUSH
23794: LD_INT 59
23796: PPUSH
23797: CALL_OW 84
// wait ( 0 0$2 ) ;
23801: LD_INT 70
23803: PPUSH
23804: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
23808: LD_INT 109
23810: PPUSH
23811: LD_INT 59
23813: PPUSH
23814: LD_INT 2
23816: PPUSH
23817: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
23821: LD_INT 35
23823: PPUSH
23824: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23828: LD_EXP 65
23832: PPUSH
23833: LD_EXP 45
23837: PPUSH
23838: CALL_OW 296
23842: PUSH
23843: LD_INT 6
23845: GREATER
23846: IFFALSE 23862
// ComMoveUnit ( ruDisturb , Heike ) ;
23848: LD_EXP 65
23852: PPUSH
23853: LD_EXP 45
23857: PPUSH
23858: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23862: LD_EXP 45
23866: PPUSH
23867: CALL_OW 257
23871: PUSH
23872: LD_INT 33
23874: NONEQUAL
23875: PUSH
23876: LD_EXP 14
23880: PPUSH
23881: LD_INT 22
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 91
23893: PUSH
23894: LD_EXP 65
23898: PUSH
23899: LD_INT 8
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 2
23909: PUSH
23910: LD_INT 25
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 25
23922: PUSH
23923: LD_INT 11
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 25
23932: PUSH
23933: LD_INT 32
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 25
23942: PUSH
23943: LD_INT 34
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: PPUSH
23962: CALL_OW 72
23966: OR
23967: IFFALSE 23979
// begin isAlarm := true ;
23969: LD_ADDR_EXP 17
23973: PUSH
23974: LD_INT 1
23976: ST_TO_ADDR
// exit ;
23977: GO 27446
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
23979: LD_INT 105
23981: PPUSH
23982: LD_INT 55
23984: PPUSH
23985: CALL_OW 428
23989: NOT
23990: PUSH
23991: LD_INT 115
23993: PPUSH
23994: LD_INT 65
23996: PPUSH
23997: CALL_OW 428
24001: NOT
24002: OR
24003: IFFALSE 24015
// begin isAlarm := true ;
24005: LD_ADDR_EXP 17
24009: PUSH
24010: LD_INT 1
24012: ST_TO_ADDR
// exit ;
24013: GO 27446
// end ; until not BuildingsInProgress ( 2 ) ;
24015: LD_INT 2
24017: PPUSH
24018: CALL_OW 345
24022: NOT
24023: IFFALSE 23821
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
24025: LD_INT 105
24027: PPUSH
24028: LD_INT 55
24030: PPUSH
24031: CALL_OW 428
24035: PPUSH
24036: LD_INT 3
24038: PPUSH
24039: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
24043: LD_INT 115
24045: PPUSH
24046: LD_INT 65
24048: PPUSH
24049: CALL_OW 428
24053: PPUSH
24054: LD_INT 3
24056: PPUSH
24057: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
24061: LD_STRING M2a-out
24063: PPUSH
24064: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24068: LD_EXP 65
24072: PPUSH
24073: LD_INT 2
24075: PPUSH
24076: CALL_OW 120
// wait ( 0 0$3 ) ;
24080: LD_INT 105
24082: PPUSH
24083: CALL_OW 67
// hasMuchin := false ;
24087: LD_ADDR_EXP 30
24091: PUSH
24092: LD_INT 0
24094: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24095: LD_INT 4200
24097: PPUSH
24098: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24102: LD_INT 35
24104: PPUSH
24105: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24109: LD_EXP 65
24113: PPUSH
24114: CALL_OW 314
24118: NOT
24119: IFFALSE 24135
// ComMoveUnit ( ruDisturb , Heike ) ;
24121: LD_EXP 65
24125: PPUSH
24126: LD_EXP 45
24130: PPUSH
24131: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24135: LD_EXP 45
24139: PPUSH
24140: LD_EXP 65
24144: PPUSH
24145: CALL_OW 296
24149: PUSH
24150: LD_INT 6
24152: LESS
24153: PUSH
24154: LD_EXP 65
24158: PPUSH
24159: CALL_OW 302
24163: AND
24164: IFFALSE 24102
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24166: LD_EXP 45
24170: PPUSH
24171: CALL_OW 257
24175: PUSH
24176: LD_INT 33
24178: NONEQUAL
24179: PUSH
24180: LD_EXP 14
24184: PPUSH
24185: LD_INT 22
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 91
24197: PUSH
24198: LD_EXP 65
24202: PUSH
24203: LD_INT 8
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 25
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 25
24226: PUSH
24227: LD_INT 11
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 25
24236: PUSH
24237: LD_INT 32
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 25
24246: PUSH
24247: LD_INT 34
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 72
24270: OR
24271: IFFALSE 24281
// isAlarm := true ;
24273: LD_ADDR_EXP 17
24277: PUSH
24278: LD_INT 1
24280: ST_TO_ADDR
// if isAlarm then
24281: LD_EXP 17
24285: IFFALSE 24289
// exit ;
24287: GO 27446
// DialogueOn ;
24289: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24293: LD_EXP 65
24297: PPUSH
24298: LD_STRING DMcn-Interrupt-1
24300: PPUSH
24301: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24305: LD_EXP 65
24309: PPUSH
24310: LD_STRING DMcn-Interrupt-2
24312: PPUSH
24313: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24317: LD_INT 176
24319: PPUSH
24320: LD_INT 54
24322: PPUSH
24323: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24327: LD_INT 176
24329: PPUSH
24330: LD_INT 54
24332: PPUSH
24333: LD_INT 2
24335: PPUSH
24336: LD_INT 6
24338: NEG
24339: PPUSH
24340: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24344: LD_INT 10
24346: PPUSH
24347: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24351: LD_EXP 65
24355: PPUSH
24356: LD_STRING DMcn-Interrupt-b-3
24358: PPUSH
24359: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24363: LD_EXP 45
24367: PPUSH
24368: LD_STRING DH-Interrupt-b-4
24370: PPUSH
24371: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24375: LD_EXP 65
24379: PPUSH
24380: LD_STRING DMcn-Interrupt-b-5
24382: PPUSH
24383: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24387: LD_EXP 45
24391: PPUSH
24392: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24396: LD_INT 176
24398: PPUSH
24399: LD_INT 54
24401: PPUSH
24402: LD_INT 2
24404: PPUSH
24405: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24409: LD_EXP 65
24413: PPUSH
24414: LD_STRING DMcn-Interrupt-b-6
24416: PPUSH
24417: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24421: LD_EXP 45
24425: PPUSH
24426: LD_STRING DH-Interrupt-b-7
24428: PPUSH
24429: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24433: LD_EXP 65
24437: PPUSH
24438: LD_STRING DMcn-Interrupt-b-8
24440: PPUSH
24441: CALL_OW 88
// DialogueOff ;
24445: CALL_OW 7
// Query ( MuchinInfo ) ;
24449: LD_STRING MuchinInfo
24451: PPUSH
24452: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24456: LD_STRING M2b
24458: PPUSH
24459: CALL_OW 337
// hasMuchin := true ;
24463: LD_ADDR_EXP 30
24467: PUSH
24468: LD_INT 1
24470: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24471: LD_INT 35
24473: PPUSH
24474: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24478: LD_EXP 65
24482: PPUSH
24483: LD_EXP 45
24487: PPUSH
24488: CALL_OW 296
24492: PUSH
24493: LD_INT 6
24495: GREATER
24496: IFFALSE 24512
// ComMoveUnit ( ruDisturb , Heike ) ;
24498: LD_EXP 65
24502: PPUSH
24503: LD_EXP 45
24507: PPUSH
24508: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24512: LD_EXP 45
24516: PPUSH
24517: CALL_OW 257
24521: PUSH
24522: LD_INT 33
24524: NONEQUAL
24525: PUSH
24526: LD_EXP 14
24530: PPUSH
24531: LD_INT 22
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 91
24543: PUSH
24544: LD_EXP 65
24548: PUSH
24549: LD_INT 8
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: LD_INT 25
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 25
24572: PUSH
24573: LD_INT 11
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 25
24582: PUSH
24583: LD_INT 32
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 25
24592: PUSH
24593: LD_INT 34
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: LIST
24611: PPUSH
24612: CALL_OW 72
24616: OR
24617: IFFALSE 24629
// begin isAlarm := true ;
24619: LD_ADDR_EXP 17
24623: PUSH
24624: LD_INT 1
24626: ST_TO_ADDR
// exit ;
24627: GO 27446
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
24629: LD_EXP 45
24633: PPUSH
24634: LD_INT 61
24636: PPUSH
24637: CALL_OW 296
24641: PUSH
24642: LD_INT 4
24644: LESS
24645: IFFALSE 24471
// InGameOn ;
24647: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
24651: LD_INT 173
24653: PPUSH
24654: LD_INT 54
24656: PPUSH
24657: LD_INT 2
24659: PPUSH
24660: LD_INT 8
24662: NEG
24663: PPUSH
24664: CALL_OW 330
// SetSide ( Heike , 3 ) ;
24668: LD_EXP 45
24672: PPUSH
24673: LD_INT 3
24675: PPUSH
24676: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
24680: LD_EXP 45
24684: PPUSH
24685: LD_INT 61
24687: PPUSH
24688: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
24692: LD_EXP 65
24696: PPUSH
24697: LD_INT 61
24699: PPUSH
24700: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
24704: LD_EXP 52
24708: PUSH
24709: LD_EXP 14
24713: IN
24714: PUSH
24715: LD_EXP 52
24719: PPUSH
24720: LD_INT 61
24722: PPUSH
24723: CALL_OW 296
24727: PUSH
24728: LD_INT 12
24730: LESS
24731: AND
24732: IFFALSE 24776
// begin SetSide ( Markov , 3 ) ;
24734: LD_EXP 52
24738: PPUSH
24739: LD_INT 3
24741: PPUSH
24742: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
24746: LD_EXP 52
24750: PPUSH
24751: LD_INT 61
24753: PPUSH
24754: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
24758: LD_INT 35
24760: PPUSH
24761: CALL_OW 67
// until IsInUnit ( Markov ) ;
24765: LD_EXP 52
24769: PPUSH
24770: CALL_OW 310
24774: IFFALSE 24758
// end ; repeat wait ( 0 0$1 ) ;
24776: LD_INT 35
24778: PPUSH
24779: CALL_OW 67
// until IsInUnit ( Heike ) ;
24783: LD_EXP 45
24787: PPUSH
24788: CALL_OW 310
24792: IFFALSE 24776
// SetClass ( Heike , class_mechanic ) ;
24794: LD_EXP 45
24798: PPUSH
24799: LD_INT 3
24801: PPUSH
24802: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
24806: LD_INT 61
24808: PPUSH
24809: LD_INT 21
24811: PPUSH
24812: LD_INT 3
24814: PPUSH
24815: LD_INT 3
24817: PPUSH
24818: LD_INT 43
24820: PPUSH
24821: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
24825: LD_EXP 31
24829: PUSH
24830: LD_EXP 52
24834: PUSH
24835: LD_EXP 14
24839: IN
24840: PUSH
24841: LD_EXP 52
24845: PPUSH
24846: CALL_OW 310
24850: PUSH
24851: LD_INT 61
24853: EQUAL
24854: OR
24855: AND
24856: IFFALSE 25346
// begin wait ( 0 0$5 ) ;
24858: LD_INT 175
24860: PPUSH
24861: CALL_OW 67
// SetSide ( Heike , 2 ) ;
24865: LD_EXP 45
24869: PPUSH
24870: LD_INT 2
24872: PPUSH
24873: CALL_OW 235
// SetSide ( Markov , 2 ) ;
24877: LD_EXP 52
24881: PPUSH
24882: LD_INT 2
24884: PPUSH
24885: CALL_OW 235
// if not Markov in heikeSquad then
24889: LD_EXP 52
24893: PUSH
24894: LD_EXP 14
24898: IN
24899: NOT
24900: IFFALSE 24922
// heikeSquad := Join ( heikeSquad , Markov ) ;
24902: LD_ADDR_EXP 14
24906: PUSH
24907: LD_EXP 14
24911: PPUSH
24912: LD_EXP 52
24916: PPUSH
24917: CALL 66186 0 2
24921: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
24922: LD_EXP 52
24926: PPUSH
24927: LD_STRING DMar-Factory-1
24929: PPUSH
24930: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
24934: LD_INT 61
24936: PPUSH
24937: LD_INT 99
24939: PPUSH
24940: CALL_OW 329
// game_speed := 4 ;
24944: LD_ADDR_OWVAR 65
24948: PUSH
24949: LD_INT 4
24951: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
24952: LD_EXP 65
24956: PPUSH
24957: CALL_OW 122
// ComExitBuilding ( Markov ) ;
24961: LD_EXP 52
24965: PPUSH
24966: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
24970: LD_EXP 65
24974: PPUSH
24975: LD_INT 171
24977: PPUSH
24978: LD_INT 51
24980: PPUSH
24981: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
24985: LD_EXP 52
24989: PPUSH
24990: LD_INT 167
24992: PPUSH
24993: LD_INT 50
24995: PPUSH
24996: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
25000: LD_EXP 52
25004: PPUSH
25005: LD_EXP 65
25009: PPUSH
25010: CALL_OW 179
// wait ( 0 0$5 ) ;
25014: LD_INT 175
25016: PPUSH
25017: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
25021: LD_EXP 52
25025: PPUSH
25026: LD_STRING DMar-Factory-2
25028: PPUSH
25029: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
25033: LD_ADDR_VAR 0 2
25037: PUSH
25038: LD_INT 22
25040: PUSH
25041: LD_INT 3
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 33
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PPUSH
25062: CALL_OW 69
25066: PUSH
25067: LD_INT 1
25069: ARRAY
25070: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
25071: LD_EXP 65
25075: PPUSH
25076: LD_VAR 0 2
25080: PPUSH
25081: CALL_OW 119
// game_speed := 4 ;
25085: LD_ADDR_OWVAR 65
25089: PUSH
25090: LD_INT 4
25092: ST_TO_ADDR
// async ;
25093: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
25094: LD_EXP 65
25098: PPUSH
25099: LD_STRING DMcn-Factory-3
25101: PPUSH
25102: CALL_OW 88
// wait ( 0 0$0.6 ) ;
25106: LD_INT 21
25108: PPUSH
25109: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
25113: LD_VAR 0 2
25117: PPUSH
25118: LD_EXP 65
25122: PPUSH
25123: CALL_OW 115
// sync ;
25127: SYNC
// wait ( 0 0$1 ) ;
25128: LD_INT 35
25130: PPUSH
25131: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25135: LD_EXP 65
25139: PPUSH
25140: CALL_OW 66
// SetSide ( veh , 7 ) ;
25144: LD_VAR 0 2
25148: PPUSH
25149: LD_INT 7
25151: PPUSH
25152: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25156: LD_VAR 0 2
25160: PPUSH
25161: LD_INT 84
25163: PPUSH
25164: LD_INT 38
25166: PPUSH
25167: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25171: LD_EXP 66
25175: PUSH
25176: LD_INT 1
25178: ARRAY
25179: PPUSH
25180: CALL_OW 258
25184: PUSH
25185: LD_INT 1
25187: EQUAL
25188: IFFALSE 25208
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25190: LD_EXP 66
25194: PUSH
25195: LD_INT 1
25197: ARRAY
25198: PPUSH
25199: LD_STRING DRum-Factory-4
25201: PPUSH
25202: CALL_OW 88
25206: GO 25224
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25208: LD_EXP 66
25212: PUSH
25213: LD_INT 1
25215: ARRAY
25216: PPUSH
25217: LD_STRING DRuf-Factory-4
25219: PPUSH
25220: CALL_OW 88
// wait ( 0 0$1 ) ;
25224: LD_INT 35
25226: PPUSH
25227: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25231: LD_EXP 66
25235: PPUSH
25236: LD_INT 26
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 72
25250: PUSH
25251: LD_INT 1
25253: ARRAY
25254: PPUSH
25255: LD_STRING DRum-Factory-6
25257: PPUSH
25258: CALL_OW 88
// wait ( 0 0$2 ) ;
25262: LD_INT 70
25264: PPUSH
25265: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25269: LD_EXP 45
25273: PPUSH
25274: LD_INT 33
25276: PPUSH
25277: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25281: LD_EXP 45
25285: PPUSH
25286: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25290: LD_EXP 45
25294: PPUSH
25295: LD_INT 168
25297: PPUSH
25298: LD_INT 54
25300: PPUSH
25301: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25305: LD_INT 173
25307: PPUSH
25308: LD_INT 54
25310: PPUSH
25311: LD_INT 2
25313: PPUSH
25314: CALL_OW 331
// InGameOff ;
25318: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25322: LD_STRING M2b-out
25324: PPUSH
25325: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25329: LD_STRING ACH_TOY
25331: PPUSH
25332: CALL_OW 543
// hasMuchin := false ;
25336: LD_ADDR_EXP 30
25340: PUSH
25341: LD_INT 0
25343: ST_TO_ADDR
// exit ;
25344: GO 27446
// end ; wait ( 0 0$5 ) ;
25346: LD_INT 175
25348: PPUSH
25349: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25353: LD_INT 61
25355: PPUSH
25356: LD_INT 99
25358: PPUSH
25359: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25363: LD_EXP 52
25367: PUSH
25368: LD_EXP 14
25372: IN
25373: PUSH
25374: LD_EXP 52
25378: PPUSH
25379: CALL_OW 255
25383: PUSH
25384: LD_INT 3
25386: EQUAL
25387: AND
25388: IFFALSE 25411
// begin SetSide ( Markov , 2 ) ;
25390: LD_EXP 52
25394: PPUSH
25395: LD_INT 2
25397: PPUSH
25398: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25402: LD_EXP 52
25406: PPUSH
25407: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25411: LD_EXP 45
25415: PPUSH
25416: LD_INT 2
25418: PPUSH
25419: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25423: LD_EXP 45
25427: PPUSH
25428: LD_INT 33
25430: PPUSH
25431: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25435: LD_EXP 65
25439: PPUSH
25440: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25444: LD_EXP 45
25448: PPUSH
25449: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25453: LD_EXP 45
25457: PPUSH
25458: LD_INT 168
25460: PPUSH
25461: LD_INT 54
25463: PPUSH
25464: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25468: LD_INT 173
25470: PPUSH
25471: LD_INT 54
25473: PPUSH
25474: LD_INT 2
25476: PPUSH
25477: CALL_OW 331
// InGameOff ;
25481: CALL_OW 9
// wait ( 3 ) ;
25485: LD_INT 3
25487: PPUSH
25488: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25492: LD_EXP 65
25496: PPUSH
25497: LD_INT 2
25499: PPUSH
25500: CALL_OW 120
// wait ( 0 0$3 ) ;
25504: LD_INT 105
25506: PPUSH
25507: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
25511: LD_STRING M2b-out
25513: PPUSH
25514: CALL_OW 337
// hasMuchin := false ;
25518: LD_ADDR_EXP 30
25522: PUSH
25523: LD_INT 0
25525: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25526: LD_INT 4200
25528: PPUSH
25529: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25533: LD_INT 35
25535: PPUSH
25536: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25540: LD_EXP 65
25544: PPUSH
25545: CALL_OW 314
25549: NOT
25550: IFFALSE 25566
// ComMoveUnit ( ruDisturb , Heike ) ;
25552: LD_EXP 65
25556: PPUSH
25557: LD_EXP 45
25561: PPUSH
25562: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
25566: LD_EXP 45
25570: PPUSH
25571: LD_EXP 65
25575: PPUSH
25576: CALL_OW 296
25580: PUSH
25581: LD_INT 2
25583: LESS
25584: PUSH
25585: LD_EXP 65
25589: PPUSH
25590: CALL_OW 302
25594: AND
25595: IFFALSE 25533
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25597: LD_EXP 45
25601: PPUSH
25602: CALL_OW 257
25606: PUSH
25607: LD_INT 33
25609: NONEQUAL
25610: PUSH
25611: LD_EXP 14
25615: PPUSH
25616: LD_INT 22
25618: PUSH
25619: LD_INT 2
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 91
25628: PUSH
25629: LD_EXP 65
25633: PUSH
25634: LD_INT 8
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: LD_INT 25
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 25
25657: PUSH
25658: LD_INT 11
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 25
25667: PUSH
25668: LD_INT 32
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 25
25677: PUSH
25678: LD_INT 34
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: LIST
25696: PPUSH
25697: CALL_OW 72
25701: OR
25702: IFFALSE 25712
// isAlarm := true ;
25704: LD_ADDR_EXP 17
25708: PUSH
25709: LD_INT 1
25711: ST_TO_ADDR
// if isAlarm then
25712: LD_EXP 17
25716: IFFALSE 25720
// exit ;
25718: GO 27446
// ComTurnUnit ( Heike , ruDisturb ) ;
25720: LD_EXP 45
25724: PPUSH
25725: LD_EXP 65
25729: PPUSH
25730: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
25734: LD_EXP 65
25738: PPUSH
25739: LD_EXP 45
25743: PPUSH
25744: CALL_OW 119
// wait ( 3 ) ;
25748: LD_INT 3
25750: PPUSH
25751: CALL_OW 67
// for i := 1 to 3 do
25755: LD_ADDR_VAR 0 1
25759: PUSH
25760: DOUBLE
25761: LD_INT 1
25763: DEC
25764: ST_TO_ADDR
25765: LD_INT 3
25767: PUSH
25768: FOR_TO
25769: IFFALSE 25786
// CreateCratesArea ( 5 , cratesArea , false ) ;
25771: LD_INT 5
25773: PPUSH
25774: LD_INT 58
25776: PPUSH
25777: LD_INT 0
25779: PPUSH
25780: CALL_OW 55
25784: GO 25768
25786: POP
25787: POP
// uc_side := 3 ;
25788: LD_ADDR_OWVAR 20
25792: PUSH
25793: LD_INT 3
25795: ST_TO_ADDR
// uc_nation := nation_russian ;
25796: LD_ADDR_OWVAR 21
25800: PUSH
25801: LD_INT 3
25803: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
25804: LD_INT 21
25806: PPUSH
25807: LD_INT 3
25809: PPUSH
25810: LD_INT 1
25812: PPUSH
25813: LD_INT 51
25815: PPUSH
25816: LD_INT 100
25818: PPUSH
25819: CALL 33705 0 5
// veh := CreateVehicle ;
25823: LD_ADDR_VAR 0 2
25827: PUSH
25828: CALL_OW 45
25832: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
25833: LD_VAR 0 2
25837: PPUSH
25838: LD_INT 104
25840: PPUSH
25841: LD_INT 41
25843: PPUSH
25844: LD_INT 3
25846: PPUSH
25847: LD_INT 0
25849: PPUSH
25850: CALL 68326 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
25854: LD_VAR 0 2
25858: PPUSH
25859: LD_INT 1
25861: PPUSH
25862: LD_INT 100
25864: PPUSH
25865: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
25869: CALL_OW 44
25873: PPUSH
25874: LD_VAR 0 2
25878: PPUSH
25879: CALL_OW 52
// DialogueOn ;
25883: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25887: LD_EXP 65
25891: PPUSH
25892: LD_STRING DMcn-Interrupt-1
25894: PPUSH
25895: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25899: LD_EXP 65
25903: PPUSH
25904: LD_STRING DMcn-Interrupt-2
25906: PPUSH
25907: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
25911: LD_EXP 65
25915: PPUSH
25916: LD_STRING DMcn-Interrupt-c-3
25918: PPUSH
25919: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
25923: LD_INT 101
25925: PPUSH
25926: LD_INT 38
25928: PPUSH
25929: LD_INT 2
25931: PPUSH
25932: LD_INT 10
25934: NEG
25935: PPUSH
25936: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
25940: LD_INT 101
25942: PPUSH
25943: LD_INT 38
25945: PPUSH
25946: CALL_OW 84
// wait ( 0 0$2 ) ;
25950: LD_INT 70
25952: PPUSH
25953: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
25957: LD_INT 101
25959: PPUSH
25960: LD_INT 38
25962: PPUSH
25963: LD_INT 2
25965: PPUSH
25966: CALL_OW 331
// RemoveUnit ( veh ) ;
25970: LD_VAR 0 2
25974: PPUSH
25975: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
25979: LD_EXP 65
25983: PPUSH
25984: LD_STRING DMcn-Interrupt-c-4
25986: PPUSH
25987: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
25991: LD_EXP 45
25995: PPUSH
25996: LD_STRING DH-Interrupt-c-5
25998: PPUSH
25999: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
26003: LD_EXP 65
26007: PPUSH
26008: LD_STRING DMcn-Interrupt-c-6
26010: PPUSH
26011: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
26015: LD_EXP 45
26019: PPUSH
26020: LD_STRING DH-Interrupt-c-7
26022: PPUSH
26023: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
26027: LD_EXP 65
26031: PPUSH
26032: LD_STRING DMcn-Interrupt-c-8
26034: PPUSH
26035: CALL_OW 88
// DialogueOff ;
26039: CALL_OW 7
// hasMuchin := true ;
26043: LD_ADDR_EXP 30
26047: PUSH
26048: LD_INT 1
26050: ST_TO_ADDR
// Query ( MuchinInfo ) ;
26051: LD_STRING MuchinInfo
26053: PPUSH
26054: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
26058: LD_STRING M2c
26060: PPUSH
26061: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
26065: LD_INT 35
26067: PPUSH
26068: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
26072: LD_EXP 65
26076: PPUSH
26077: LD_EXP 45
26081: PPUSH
26082: CALL_OW 296
26086: PUSH
26087: LD_INT 6
26089: GREATER
26090: IFFALSE 26106
// ComMoveUnit ( ruDisturb , Heike ) ;
26092: LD_EXP 65
26096: PPUSH
26097: LD_EXP 45
26101: PPUSH
26102: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26106: LD_EXP 45
26110: PPUSH
26111: CALL_OW 257
26115: PUSH
26116: LD_INT 33
26118: NONEQUAL
26119: PUSH
26120: LD_EXP 14
26124: PPUSH
26125: LD_INT 22
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 91
26137: PUSH
26138: LD_EXP 65
26142: PUSH
26143: LD_INT 8
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: LD_INT 25
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 25
26166: PUSH
26167: LD_INT 11
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 25
26176: PUSH
26177: LD_INT 32
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 25
26186: PUSH
26187: LD_INT 34
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: PPUSH
26206: CALL_OW 72
26210: OR
26211: IFFALSE 26223
// begin isAlarm := true ;
26213: LD_ADDR_EXP 17
26217: PUSH
26218: LD_INT 1
26220: ST_TO_ADDR
// exit ;
26221: GO 27446
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26223: LD_EXP 14
26227: PUSH
26228: LD_EXP 45
26232: UNION
26233: PPUSH
26234: LD_INT 92
26236: PUSH
26237: LD_INT 100
26239: PUSH
26240: LD_INT 37
26242: PUSH
26243: LD_INT 6
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: PPUSH
26252: CALL_OW 72
26256: IFFALSE 26065
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26258: LD_INT 100
26260: PPUSH
26261: LD_INT 37
26263: PPUSH
26264: LD_INT 3
26266: PPUSH
26267: LD_INT 10
26269: NEG
26270: PPUSH
26271: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26275: LD_ADDR_VAR 0 3
26279: PUSH
26280: LD_EXP 14
26284: PUSH
26285: LD_EXP 45
26289: UNION
26290: PPUSH
26291: LD_INT 25
26293: PUSH
26294: LD_INT 33
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 91
26303: PUSH
26304: LD_INT 6
26306: PUSH
26307: LD_INT 12
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PPUSH
26319: CALL_OW 72
26323: ST_TO_ADDR
// for i in tmp do
26324: LD_ADDR_VAR 0 1
26328: PUSH
26329: LD_VAR 0 3
26333: PUSH
26334: FOR_IN
26335: IFFALSE 26366
// begin SetSide ( i , 3 ) ;
26337: LD_VAR 0 1
26341: PPUSH
26342: LD_INT 3
26344: PPUSH
26345: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26349: LD_VAR 0 1
26353: PPUSH
26354: LD_INT 101
26356: PPUSH
26357: LD_INT 38
26359: PPUSH
26360: CALL_OW 111
// end ;
26364: GO 26334
26366: POP
26367: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26368: LD_EXP 65
26372: PPUSH
26373: LD_INT 104
26375: PPUSH
26376: LD_INT 37
26378: PPUSH
26379: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26383: LD_EXP 65
26387: PPUSH
26388: LD_EXP 45
26392: PPUSH
26393: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26397: LD_INT 35
26399: PPUSH
26400: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26404: LD_ADDR_VAR 0 4
26408: PUSH
26409: LD_INT 58
26411: PPUSH
26412: CALL_OW 435
26416: ST_TO_ADDR
// for i in tmp do
26417: LD_ADDR_VAR 0 1
26421: PUSH
26422: LD_VAR 0 3
26426: PUSH
26427: FOR_IN
26428: IFFALSE 26471
// if not HasTask ( i ) then
26430: LD_VAR 0 1
26434: PPUSH
26435: CALL_OW 314
26439: NOT
26440: IFFALSE 26469
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26442: LD_VAR 0 1
26446: PPUSH
26447: LD_VAR 0 4
26451: PUSH
26452: LD_INT 1
26454: ARRAY
26455: PPUSH
26456: LD_VAR 0 4
26460: PUSH
26461: LD_INT 2
26463: ARRAY
26464: PPUSH
26465: CALL_OW 117
26469: GO 26427
26471: POP
26472: POP
// until not cr ;
26473: LD_VAR 0 4
26477: NOT
26478: IFFALSE 26397
// wait ( 0 0$2 ) ;
26480: LD_INT 70
26482: PPUSH
26483: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
26487: LD_INT 100
26489: PPUSH
26490: LD_INT 37
26492: PPUSH
26493: LD_INT 3
26495: PPUSH
26496: CALL_OW 331
// for i in tmp do
26500: LD_ADDR_VAR 0 1
26504: PUSH
26505: LD_VAR 0 3
26509: PUSH
26510: FOR_IN
26511: IFFALSE 26527
// SetSide ( i , 2 ) ;
26513: LD_VAR 0 1
26517: PPUSH
26518: LD_INT 2
26520: PPUSH
26521: CALL_OW 235
26525: GO 26510
26527: POP
26528: POP
// if Kaia in tmp then
26529: LD_EXP 50
26533: PUSH
26534: LD_VAR 0 3
26538: IN
26539: IFFALSE 26840
// begin InGameOn ;
26541: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
26545: LD_EXP 50
26549: PPUSH
26550: LD_EXP 65
26554: PPUSH
26555: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
26559: LD_EXP 65
26563: PPUSH
26564: LD_EXP 50
26568: PPUSH
26569: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
26573: LD_EXP 50
26577: PPUSH
26578: LD_EXP 65
26582: PPUSH
26583: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
26587: LD_EXP 50
26591: PPUSH
26592: LD_STRING DK-Assassin-1
26594: PPUSH
26595: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
26599: LD_EXP 65
26603: PPUSH
26604: LD_STRING DMcn-Assassin-2
26606: PPUSH
26607: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
26611: LD_EXP 50
26615: PPUSH
26616: LD_STRING DK-Assassin-3
26618: PPUSH
26619: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
26623: LD_EXP 65
26627: PPUSH
26628: LD_STRING DMcn-Assassin-4
26630: PPUSH
26631: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
26635: LD_EXP 50
26639: PPUSH
26640: LD_STRING DK-Assassin-5
26642: PPUSH
26643: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
26647: LD_EXP 65
26651: PPUSH
26652: LD_STRING DMcn-Assassin-6
26654: PPUSH
26655: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
26659: LD_EXP 50
26663: PPUSH
26664: LD_INT 3
26666: PPUSH
26667: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
26671: LD_EXP 50
26675: PUSH
26676: LD_EXP 65
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PPUSH
26685: LD_INT 6
26687: PPUSH
26688: CALL_OW 120
// wait ( 0 0$5 ) ;
26692: LD_INT 175
26694: PPUSH
26695: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
26699: LD_EXP 50
26703: PPUSH
26704: LD_STRING DK-Assassin-7
26706: PPUSH
26707: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
26711: LD_EXP 65
26715: PPUSH
26716: LD_STRING DMcn-Assassin-8
26718: PPUSH
26719: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26723: LD_INT 10
26725: PPUSH
26726: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
26730: LD_EXP 50
26734: PPUSH
26735: LD_STRING DK-Assassin-9
26737: PPUSH
26738: CALL_OW 88
// wait ( 0 0$2 ) ;
26742: LD_INT 70
26744: PPUSH
26745: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
26749: LD_EXP 50
26753: PPUSH
26754: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
26758: LD_EXP 65
26762: PPUSH
26763: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
26767: LD_EXP 50
26771: PPUSH
26772: LD_INT 2
26774: PPUSH
26775: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
26779: LD_EXP 50
26783: PPUSH
26784: LD_EXP 45
26788: PPUSH
26789: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
26793: LD_EXP 50
26797: PPUSH
26798: LD_STRING DK-Assasin-10
26800: PPUSH
26801: CALL_OW 88
// InGameOff ;
26805: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
26809: LD_STRING ACH_POKER
26811: PPUSH
26812: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
26816: LD_STRING M2c-out
26818: PPUSH
26819: CALL_OW 337
// wait ( 0 0$3 ) ;
26823: LD_INT 105
26825: PPUSH
26826: CALL_OW 67
// hasMuchin := false ;
26830: LD_ADDR_EXP 30
26834: PUSH
26835: LD_INT 0
26837: ST_TO_ADDR
// exit ;
26838: GO 27446
// end ; ChangeMissionObjectives ( M2c-out ) ;
26840: LD_STRING M2c-out
26842: PPUSH
26843: CALL_OW 337
// InGameOn ;
26847: CALL_OW 8
// meetWithMuchin := true ;
26851: LD_ADDR_EXP 44
26855: PUSH
26856: LD_INT 1
26858: ST_TO_ADDR
// Say ( ruDisturb , DMcn-Fail-1 ) ;
26859: LD_EXP 65
26863: PPUSH
26864: LD_STRING DMcn-Fail-1
26866: PPUSH
26867: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
26871: LD_VAR 0 3
26875: PPUSH
26876: LD_INT 114
26878: PPUSH
26879: LD_INT 17
26881: PPUSH
26882: CALL_OW 111
// wait ( 0 0$1 ) ;
26886: LD_INT 35
26888: PPUSH
26889: CALL_OW 67
// async ;
26893: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
26894: LD_EXP 65
26898: PPUSH
26899: LD_EXP 45
26903: PPUSH
26904: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
26908: LD_EXP 65
26912: PPUSH
26913: LD_STRING DMcn-Fail-2
26915: PPUSH
26916: CALL_OW 88
// ComStop ( Heike ) ;
26920: LD_EXP 45
26924: PPUSH
26925: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
26929: LD_EXP 45
26933: PPUSH
26934: LD_EXP 65
26938: PPUSH
26939: CALL_OW 179
// sync ;
26943: SYNC
// Say ( Heike , DH-Fail-3 ) ;
26944: LD_EXP 45
26948: PPUSH
26949: LD_STRING DH-Fail-3
26951: PPUSH
26952: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
26956: LD_EXP 65
26960: PPUSH
26961: LD_STRING DMcn-Fail-4
26963: PPUSH
26964: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
26968: LD_EXP 45
26972: PUSH
26973: LD_EXP 65
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PPUSH
26982: LD_INT 41
26984: PPUSH
26985: LD_INT 19
26987: PPUSH
26988: CALL_OW 111
// wait ( 0 0$2 ) ;
26992: LD_INT 70
26994: PPUSH
26995: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
26999: LD_EXP 65
27003: PPUSH
27004: LD_INT 40
27006: PPUSH
27007: LD_INT 19
27009: PPUSH
27010: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
27014: LD_EXP 45
27018: PPUSH
27019: LD_INT 43
27021: PPUSH
27022: LD_INT 21
27024: PPUSH
27025: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27029: LD_EXP 65
27033: PPUSH
27034: LD_EXP 45
27038: PPUSH
27039: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
27043: LD_EXP 45
27047: PPUSH
27048: LD_EXP 65
27052: PPUSH
27053: CALL_OW 179
// wait ( 0 0$2 ) ;
27057: LD_INT 70
27059: PPUSH
27060: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
27064: LD_EXP 65
27068: PPUSH
27069: LD_STRING DMcn-Fail-5
27071: PPUSH
27072: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27076: LD_EXP 45
27080: PPUSH
27081: CALL_OW 87
// wait ( 0 0$2 ) ;
27085: LD_INT 70
27087: PPUSH
27088: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
27092: LD_EXP 65
27096: PPUSH
27097: LD_STRING DMcn-Fail-6
27099: PPUSH
27100: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27104: LD_EXP 45
27108: PPUSH
27109: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
27113: LD_INT 35
27115: PPUSH
27116: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
27120: LD_EXP 45
27124: PPUSH
27125: LD_INT 43
27127: PPUSH
27128: LD_INT 21
27130: PPUSH
27131: CALL_OW 307
27135: IFFALSE 27113
// CenterNowOnUnits ( Heike ) ;
27137: LD_EXP 45
27141: PPUSH
27142: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
27146: LD_STRING MuchinQuestion
27148: PPUSH
27149: CALL_OW 97
27153: PUSH
27154: LD_INT 1
27156: DOUBLE
27157: EQUAL
27158: IFTRUE 27162
27160: GO 27262
27162: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
27163: LD_EXP 65
27167: PPUSH
27168: LD_STRING DMcn-Fail-7
27170: PPUSH
27171: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
27175: LD_EXP 45
27179: PPUSH
27180: LD_STRING DH-Fail-8
27182: PPUSH
27183: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27187: LD_INT 10
27189: PPUSH
27190: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
27194: LD_EXP 45
27198: PPUSH
27199: LD_STRING DH-Fail-9
27201: PPUSH
27202: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27206: LD_EXP 45
27210: PPUSH
27211: LD_STRING DH-Fail-10
27213: PPUSH
27214: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27218: LD_EXP 65
27222: PPUSH
27223: LD_STRING DMcn-Fail-11
27225: PPUSH
27226: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27230: LD_EXP 65
27234: PPUSH
27235: LD_EXP 45
27239: PPUSH
27240: CALL_OW 115
// wait ( 0 0$2 ) ;
27244: LD_INT 70
27246: PPUSH
27247: CALL_OW 67
// KillUnit ( Heike ) ;
27251: LD_EXP 45
27255: PPUSH
27256: CALL_OW 66
// end ; 2 :
27260: GO 27442
27262: LD_INT 2
27264: DOUBLE
27265: EQUAL
27266: IFTRUE 27270
27268: GO 27441
27270: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27271: LD_EXP 45
27275: PPUSH
27276: LD_STRING DH-Fail-a-8
27278: PPUSH
27279: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27283: LD_EXP 45
27287: PPUSH
27288: LD_STRING DH-Fail-a-9
27290: PPUSH
27291: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27295: LD_EXP 45
27299: PPUSH
27300: LD_STRING DH-Fail-10
27302: PPUSH
27303: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27307: LD_EXP 45
27311: PPUSH
27312: LD_STRING DH-Fail-a-11
27314: PPUSH
27315: CALL_OW 88
// async ;
27319: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27320: LD_EXP 65
27324: PPUSH
27325: LD_EXP 45
27329: PPUSH
27330: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27334: LD_EXP 65
27338: PPUSH
27339: LD_EXP 45
27343: PPUSH
27344: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27348: LD_EXP 65
27352: PPUSH
27353: LD_STRING DH-Fail-12
27355: PPUSH
27356: CALL_OW 88
// sync ;
27360: SYNC
// wait ( 0 0$1 ) ;
27361: LD_INT 35
27363: PPUSH
27364: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27368: LD_EXP 45
27372: PPUSH
27373: LD_STRING DH-Fail-a-13
27375: PPUSH
27376: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27380: LD_EXP 65
27384: PPUSH
27385: LD_INT 100
27387: PPUSH
27388: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27392: LD_EXP 65
27396: PPUSH
27397: LD_STRING DMcn-Fail-a-14
27399: PPUSH
27400: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27404: LD_EXP 65
27408: PPUSH
27409: CALL_OW 66
// wait ( 0 0$1 ) ;
27413: LD_INT 35
27415: PPUSH
27416: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27420: LD_EXP 45
27424: PPUSH
27425: LD_STRING DH-Fail-a-15
27427: PPUSH
27428: CALL_OW 88
// YouLost ( FailMuchin ) ;
27432: LD_STRING FailMuchin
27434: PPUSH
27435: CALL_OW 104
// end ; end ;
27439: GO 27442
27441: POP
// InGameOff ;
27442: CALL_OW 9
// end ; end_of_file
27446: PPOPN 4
27448: END
// every 0 0$1 marked gameStartEvent do
27449: GO 27451
27451: DISABLE
// begin enable ;
27452: ENABLE
// if not contactWithAmerican then
27453: LD_EXP 25
27457: NOT
27458: IFFALSE 27503
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
27460: LD_ADDR_OWVAR 47
27464: PUSH
27465: LD_STRING #X108-1
27467: PUSH
27468: LD_INT 22
27470: PUSH
27471: LD_INT 5
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 21
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PPUSH
27492: CALL_OW 69
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: ST_TO_ADDR
27501: GO 27592
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
27503: LD_ADDR_OWVAR 47
27507: PUSH
27508: LD_STRING #X108-1
27510: PUSH
27511: LD_INT 22
27513: PUSH
27514: LD_INT 5
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 21
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 50
27533: PUSH
27534: EMPTY
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: PUSH
27547: LD_STRING #X108-2
27549: PUSH
27550: LD_INT 22
27552: PUSH
27553: LD_INT 4
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 21
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 50
27572: PUSH
27573: EMPTY
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: LIST
27580: PPUSH
27581: CALL_OW 69
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: ST_TO_ADDR
// end ; end_of_file
27592: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
27593: LD_EXP 45
27597: PPUSH
27598: LD_INT 59
27600: PPUSH
27601: CALL_OW 308
27605: IFFALSE 27727
27607: GO 27609
27609: DISABLE
// begin Query ( FinalInfo ) ;
27610: LD_STRING FinalInfo
27612: PPUSH
27613: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
27617: LD_INT 59
27619: PPUSH
27620: LD_INT 1
27622: PPUSH
27623: CALL_OW 424
// end_the_mission_allowed := true ;
27627: LD_ADDR_OWVAR 57
27631: PUSH
27632: LD_INT 1
27634: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27635: LD_INT 35
27637: PPUSH
27638: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
27642: LD_INT 22
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 21
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 95
27664: PUSH
27665: LD_INT 59
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: PPUSH
27677: CALL_OW 69
27681: PPUSH
27682: CALL 30967 0 1
27686: PUSH
27687: LD_INT 22
27689: PUSH
27690: LD_INT 2
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 21
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PPUSH
27711: CALL_OW 69
27715: PPUSH
27716: CALL 30967 0 1
27720: EQUAL
27721: IFFALSE 27635
// EndMission ;
27723: CALL 27735 0 0
// end ;
27727: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
27728: CALL 27735 0 0
// end ;
27732: PPOPN 1
27734: END
// function EndMission ; begin
27735: LD_INT 0
27737: PPUSH
// PlayOriginalMusic ;
27738: CALL 90677 0 0
// if not IsInArea ( Heike , finalArea ) then
27742: LD_EXP 45
27746: PPUSH
27747: LD_INT 59
27749: PPUSH
27750: CALL_OW 308
27754: NOT
27755: IFFALSE 27766
// begin Query ( HeikeOutOfArea ) ;
27757: LD_STRING HeikeOutOfArea
27759: PPUSH
27760: CALL_OW 97
// exit ;
27764: GO 28663
// end ; if not IsOk ( Heike ) then
27766: LD_EXP 45
27770: PPUSH
27771: CALL_OW 302
27775: NOT
27776: IFFALSE 27787
// begin Query ( HeikeIsHurt ) ;
27778: LD_STRING HeikeIsHurt
27780: PPUSH
27781: CALL_OW 97
// exit ;
27785: GO 28663
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
27787: LD_INT 22
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 21
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 50
27809: PUSH
27810: EMPTY
27811: LIST
27812: PUSH
27813: LD_INT 95
27815: PUSH
27816: LD_INT 59
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: PPUSH
27829: CALL_OW 69
27833: PPUSH
27834: CALL 30967 0 1
27838: PUSH
27839: LD_INT 6
27841: LESS
27842: IFFALSE 27851
// YouLost ( NeedMorePep ) ;
27844: LD_STRING NeedMorePep
27846: PPUSH
27847: CALL_OW 104
// if tick < 20 20$00 then
27851: LD_OWVAR 1
27855: PUSH
27856: LD_INT 42000
27858: LESS
27859: IFFALSE 27868
// SetAchievement ( ACH_HSPEED_8 ) ;
27861: LD_STRING ACH_HSPEED_8
27863: PPUSH
27864: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
27868: LD_INT 22
27870: PUSH
27871: LD_INT 5
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 21
27880: PUSH
27881: LD_INT 1
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PPUSH
27892: CALL_OW 69
27896: PUSH
27897: LD_INT 0
27899: EQUAL
27900: PUSH
27901: LD_EXP 32
27905: PUSH
27906: LD_INT 0
27908: EQUAL
27909: AND
27910: IFFALSE 27924
// AddMedal ( med1 , 1 ) else
27912: LD_STRING med1
27914: PPUSH
27915: LD_INT 1
27917: PPUSH
27918: CALL_OW 101
27922: GO 27935
// AddMedal ( med1 , - 1 ) ;
27924: LD_STRING med1
27926: PPUSH
27927: LD_INT 1
27929: NEG
27930: PPUSH
27931: CALL_OW 101
// if explosivePlantedList >= 3 then
27935: LD_EXP 29
27939: PUSH
27940: LD_INT 3
27942: GREATEREQUAL
27943: IFFALSE 27957
// AddMedal ( med2 , 1 ) else
27945: LD_STRING med2
27947: PPUSH
27948: LD_INT 1
27950: PPUSH
27951: CALL_OW 101
27955: GO 27991
// if explosivePlantedList < 3 then
27957: LD_EXP 29
27961: PUSH
27962: LD_INT 3
27964: LESS
27965: IFFALSE 27980
// AddMedal ( med2 , - 2 ) else
27967: LD_STRING med2
27969: PPUSH
27970: LD_INT 2
27972: NEG
27973: PPUSH
27974: CALL_OW 101
27978: GO 27991
// AddMedal ( med2 , - 1 ) ;
27980: LD_STRING med2
27982: PPUSH
27983: LD_INT 1
27985: NEG
27986: PPUSH
27987: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
27991: LD_INT 5
27993: PPUSH
27994: LD_INT 2
27996: PPUSH
27997: CALL_OW 321
28001: PUSH
28002: LD_INT 2
28004: EQUAL
28005: IFFALSE 28019
// AddMedal ( med3 , 1 ) else
28007: LD_STRING med3
28009: PPUSH
28010: LD_INT 1
28012: PPUSH
28013: CALL_OW 101
28017: GO 28030
// AddMedal ( med3 , - 1 ) ;
28019: LD_STRING med3
28021: PPUSH
28022: LD_INT 1
28024: NEG
28025: PPUSH
28026: CALL_OW 101
// GiveMedals ( MAIN ) ;
28030: LD_STRING MAIN
28032: PPUSH
28033: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
28037: LD_INT 22
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 23
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 21
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: PPUSH
28072: CALL_OW 69
28076: PPUSH
28077: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
28081: LD_EXP 59
28085: PUSH
28086: LD_EXP 59
28090: PPUSH
28091: CALL_OW 255
28095: PUSH
28096: LD_INT 2
28098: EQUAL
28099: AND
28100: IFFALSE 28114
// SaveCharacters ( Doug , 08_UsCommander ) ;
28102: LD_EXP 59
28106: PPUSH
28107: LD_STRING 08_UsCommander
28109: PPUSH
28110: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
28114: LD_EXP 58
28118: PUSH
28119: LD_EXP 58
28123: PPUSH
28124: CALL_OW 255
28128: PUSH
28129: LD_INT 2
28131: EQUAL
28132: AND
28133: IFFALSE 28147
// SaveCharacters ( Harris , 08_Harris ) ;
28135: LD_EXP 58
28139: PPUSH
28140: LD_STRING 08_Harris
28142: PPUSH
28143: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
28147: LD_INT 22
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 23
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 21
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: PPUSH
28182: CALL_OW 69
28186: PUSH
28187: LD_EXP 59
28191: PUSH
28192: LD_EXP 58
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: DIFF
28201: PPUSH
28202: LD_STRING 08_Americans
28204: PPUSH
28205: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
28209: LD_EXP 45
28213: PPUSH
28214: CALL_OW 248
28218: PUSH
28219: LD_INT 3
28221: EQUAL
28222: IFFALSE 28252
// begin CopySkills ( Heike , HeikeTmp ) ;
28224: LD_EXP 45
28228: PPUSH
28229: LD_EXP 61
28233: PPUSH
28234: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28238: LD_EXP 61
28242: PPUSH
28243: LD_STRING 08_Heike
28245: PPUSH
28246: CALL_OW 38
// end else
28250: GO 28264
// SaveCharacters ( Heike , 08_Heike ) ;
28252: LD_EXP 45
28256: PPUSH
28257: LD_STRING 08_Heike
28259: PPUSH
28260: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
28264: LD_EXP 55
28268: PUSH
28269: LD_EXP 55
28273: PPUSH
28274: CALL_OW 255
28278: PUSH
28279: LD_INT 2
28281: EQUAL
28282: AND
28283: IFFALSE 28297
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28285: LD_EXP 55
28289: PPUSH
28290: LD_STRING 08_Aviradze
28292: PPUSH
28293: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
28297: LD_EXP 48
28301: PUSH
28302: LD_EXP 48
28306: PPUSH
28307: CALL_OW 255
28311: PUSH
28312: LD_INT 2
28314: EQUAL
28315: AND
28316: IFFALSE 28330
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28318: LD_EXP 48
28322: PPUSH
28323: LD_STRING 08_Ibrahim
28325: PPUSH
28326: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
28330: LD_EXP 49
28334: PUSH
28335: LD_EXP 49
28339: PPUSH
28340: CALL_OW 255
28344: PUSH
28345: LD_INT 2
28347: EQUAL
28348: AND
28349: IFFALSE 28363
// SaveCharacters ( Kamil , 08_Kamil ) ;
28351: LD_EXP 49
28355: PPUSH
28356: LD_STRING 08_Kamil
28358: PPUSH
28359: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
28363: LD_EXP 51
28367: PUSH
28368: LD_EXP 51
28372: PPUSH
28373: CALL_OW 255
28377: PUSH
28378: LD_INT 2
28380: EQUAL
28381: AND
28382: IFFALSE 28396
// SaveCharacters ( Sophia , 08_Sophia ) ;
28384: LD_EXP 51
28388: PPUSH
28389: LD_STRING 08_Sophia
28391: PPUSH
28392: CALL_OW 38
// if Kaia and GetSide ( Kaia ) = 2 then
28396: LD_EXP 50
28400: PUSH
28401: LD_EXP 50
28405: PPUSH
28406: CALL_OW 255
28410: PUSH
28411: LD_INT 2
28413: EQUAL
28414: AND
28415: IFFALSE 28429
// SaveCharacters ( Kaia , 08_Kaia ) ;
28417: LD_EXP 50
28421: PPUSH
28422: LD_STRING 08_Kaia
28424: PPUSH
28425: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
28429: LD_EXP 46
28433: PUSH
28434: LD_EXP 46
28438: PPUSH
28439: CALL_OW 255
28443: PUSH
28444: LD_INT 2
28446: EQUAL
28447: AND
28448: IFFALSE 28505
// if GetNation ( Givi ) = nation_russian then
28450: LD_EXP 46
28454: PPUSH
28455: CALL_OW 248
28459: PUSH
28460: LD_INT 3
28462: EQUAL
28463: IFFALSE 28493
// begin CopySkills ( Givi , GiviTmp ) ;
28465: LD_EXP 46
28469: PPUSH
28470: LD_EXP 62
28474: PPUSH
28475: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
28479: LD_EXP 62
28483: PPUSH
28484: LD_STRING 08_Givi
28486: PPUSH
28487: CALL_OW 38
// end else
28491: GO 28505
// SaveCharacters ( Givi , 08_Givi ) ;
28493: LD_EXP 46
28497: PPUSH
28498: LD_STRING 08_Givi
28500: PPUSH
28501: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
28505: LD_EXP 47
28509: PUSH
28510: LD_EXP 47
28514: PPUSH
28515: CALL_OW 255
28519: PUSH
28520: LD_INT 2
28522: EQUAL
28523: AND
28524: IFFALSE 28538
// SaveCharacters ( Mike , 08_Mike ) ;
28526: LD_EXP 47
28530: PPUSH
28531: LD_STRING 08_Mike
28533: PPUSH
28534: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
28538: LD_EXP 52
28542: PUSH
28543: LD_EXP 52
28547: PPUSH
28548: CALL_OW 255
28552: PUSH
28553: LD_INT 2
28555: EQUAL
28556: AND
28557: IFFALSE 28571
// SaveCharacters ( Markov , 08_Markov ) ;
28559: LD_EXP 52
28563: PPUSH
28564: LD_STRING 08_Markov
28566: PPUSH
28567: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
28571: LD_EXP 54
28575: PUSH
28576: LD_EXP 54
28580: PPUSH
28581: CALL_OW 255
28585: PUSH
28586: LD_INT 2
28588: EQUAL
28589: AND
28590: IFFALSE 28604
// SaveCharacters ( Kurt , 08_Kurt ) ;
28592: LD_EXP 54
28596: PPUSH
28597: LD_STRING 08_Kurt
28599: PPUSH
28600: CALL_OW 38
// if Olaf and GetSide ( Olaf ) = 2 then
28604: LD_EXP 53
28608: PUSH
28609: LD_EXP 53
28613: PPUSH
28614: CALL_OW 255
28618: PUSH
28619: LD_INT 2
28621: EQUAL
28622: AND
28623: IFFALSE 28637
// SaveCharacters ( Olaf , 08_Olaf ) ;
28625: LD_EXP 53
28629: PPUSH
28630: LD_STRING 08_Olaf
28632: PPUSH
28633: CALL_OW 38
// if heikeSecondSquad then
28637: LD_EXP 56
28641: IFFALSE 28655
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
28643: LD_EXP 56
28647: PPUSH
28648: LD_STRING 08_others
28650: PPUSH
28651: CALL_OW 38
// YouWin ;
28655: CALL_OW 103
// DialogueOff ;
28659: CALL_OW 7
// end ; end_of_file
28663: LD_VAR 0 1
28667: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
28668: LD_EXP 5
28672: IFFALSE 28862
28674: GO 28676
28676: DISABLE
28677: LD_INT 0
28679: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
28680: LD_INT 35
28682: PPUSH
28683: LD_INT 2100
28685: PPUSH
28686: CALL_OW 12
28690: PPUSH
28691: CALL_OW 67
// StopOriginalMusic ;
28695: CALL 90662 0 0
// weatherBusy := true ;
28699: LD_ADDR_EXP 37
28703: PUSH
28704: LD_INT 1
28706: ST_TO_ADDR
// for i := 1 to 3 do
28707: LD_ADDR_VAR 0 1
28711: PUSH
28712: DOUBLE
28713: LD_INT 1
28715: DEC
28716: ST_TO_ADDR
28717: LD_INT 3
28719: PUSH
28720: FOR_TO
28721: IFFALSE 28755
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
28723: LD_INT 1
28725: PPUSH
28726: LD_INT 100
28728: PUSH
28729: LD_INT 100
28731: PUSH
28732: LD_VAR 0 1
28736: MUL
28737: PLUS
28738: PPUSH
28739: LD_INT 60
28741: PPUSH
28742: CALL_OW 550
// wait ( 0 0$2 ) ;
28746: LD_INT 70
28748: PPUSH
28749: CALL_OW 67
// end ;
28753: GO 28720
28755: POP
28756: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
28757: LD_STRING ArStormRain.wav
28759: PPUSH
28760: LD_STRING OW_CUSTOM_COMMAND(103);
28762: PPUSH
28763: CALL 90692 0 2
// wait ( 0 0$3 ) ;
28767: LD_INT 105
28769: PPUSH
28770: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
28774: LD_INT 1
28776: PPUSH
28777: LD_INT 900
28779: PPUSH
28780: LD_INT 120
28782: PPUSH
28783: CALL_OW 550
// wait ( 0 0$10 ) ;
28787: LD_INT 350
28789: PPUSH
28790: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
28794: LD_INT 1
28796: PPUSH
28797: LD_INT 1500
28799: PPUSH
28800: LD_INT 300
28802: PPUSH
28803: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
28807: LD_INT 35
28809: PPUSH
28810: CALL_OW 67
// until not weatherBusy ;
28814: LD_EXP 37
28818: NOT
28819: IFFALSE 28807
// SetWeather ( 0 , 0 , 0 ) ;
28821: LD_INT 0
28823: PPUSH
28824: LD_INT 0
28826: PPUSH
28827: LD_INT 0
28829: PPUSH
28830: CALL_OW 550
// wait ( 5 5$00 ) ;
28834: LD_INT 10500
28836: PPUSH
28837: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
28841: LD_STRING ArStormNormal.wav
28843: PPUSH
28844: LD_STRING OW_CUSTOM_COMMAND(103);
28846: PPUSH
28847: CALL 90692 0 2
// wait ( 5 5$00 ) ;
28851: LD_INT 10500
28853: PPUSH
28854: CALL_OW 67
// PlayOriginalMusic ;
28858: CALL 90677 0 0
// end ; end_of_file
28862: PPOPN 1
28864: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28865: LD_INT 0
28867: PPUSH
28868: PPUSH
// if exist_mode then
28869: LD_VAR 0 2
28873: IFFALSE 28898
// unit := CreateCharacter ( prefix & ident ) else
28875: LD_ADDR_VAR 0 5
28879: PUSH
28880: LD_VAR 0 3
28884: PUSH
28885: LD_VAR 0 1
28889: STR
28890: PPUSH
28891: CALL_OW 34
28895: ST_TO_ADDR
28896: GO 28913
// unit := NewCharacter ( ident ) ;
28898: LD_ADDR_VAR 0 5
28902: PUSH
28903: LD_VAR 0 1
28907: PPUSH
28908: CALL_OW 25
28912: ST_TO_ADDR
// result := unit ;
28913: LD_ADDR_VAR 0 4
28917: PUSH
28918: LD_VAR 0 5
28922: ST_TO_ADDR
// end ;
28923: LD_VAR 0 4
28927: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28928: LD_INT 0
28930: PPUSH
28931: PPUSH
// if not side or not nation then
28932: LD_VAR 0 1
28936: NOT
28937: PUSH
28938: LD_VAR 0 2
28942: NOT
28943: OR
28944: IFFALSE 28948
// exit ;
28946: GO 29716
// case nation of nation_american :
28948: LD_VAR 0 2
28952: PUSH
28953: LD_INT 1
28955: DOUBLE
28956: EQUAL
28957: IFTRUE 28961
28959: GO 29175
28961: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28962: LD_ADDR_VAR 0 4
28966: PUSH
28967: LD_INT 35
28969: PUSH
28970: LD_INT 45
28972: PUSH
28973: LD_INT 46
28975: PUSH
28976: LD_INT 47
28978: PUSH
28979: LD_INT 82
28981: PUSH
28982: LD_INT 83
28984: PUSH
28985: LD_INT 84
28987: PUSH
28988: LD_INT 85
28990: PUSH
28991: LD_INT 86
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 6
29002: PUSH
29003: LD_INT 15
29005: PUSH
29006: LD_INT 16
29008: PUSH
29009: LD_INT 7
29011: PUSH
29012: LD_INT 12
29014: PUSH
29015: LD_INT 13
29017: PUSH
29018: LD_INT 10
29020: PUSH
29021: LD_INT 14
29023: PUSH
29024: LD_INT 20
29026: PUSH
29027: LD_INT 21
29029: PUSH
29030: LD_INT 22
29032: PUSH
29033: LD_INT 25
29035: PUSH
29036: LD_INT 32
29038: PUSH
29039: LD_INT 27
29041: PUSH
29042: LD_INT 36
29044: PUSH
29045: LD_INT 69
29047: PUSH
29048: LD_INT 39
29050: PUSH
29051: LD_INT 34
29053: PUSH
29054: LD_INT 40
29056: PUSH
29057: LD_INT 48
29059: PUSH
29060: LD_INT 49
29062: PUSH
29063: LD_INT 50
29065: PUSH
29066: LD_INT 51
29068: PUSH
29069: LD_INT 52
29071: PUSH
29072: LD_INT 53
29074: PUSH
29075: LD_INT 54
29077: PUSH
29078: LD_INT 55
29080: PUSH
29081: LD_INT 56
29083: PUSH
29084: LD_INT 57
29086: PUSH
29087: LD_INT 58
29089: PUSH
29090: LD_INT 59
29092: PUSH
29093: LD_INT 60
29095: PUSH
29096: LD_INT 61
29098: PUSH
29099: LD_INT 62
29101: PUSH
29102: LD_INT 80
29104: PUSH
29105: LD_INT 82
29107: PUSH
29108: LD_INT 83
29110: PUSH
29111: LD_INT 84
29113: PUSH
29114: LD_INT 85
29116: PUSH
29117: LD_INT 86
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: ST_TO_ADDR
29173: GO 29640
29175: LD_INT 2
29177: DOUBLE
29178: EQUAL
29179: IFTRUE 29183
29181: GO 29409
29183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29184: LD_ADDR_VAR 0 4
29188: PUSH
29189: LD_INT 35
29191: PUSH
29192: LD_INT 45
29194: PUSH
29195: LD_INT 46
29197: PUSH
29198: LD_INT 47
29200: PUSH
29201: LD_INT 82
29203: PUSH
29204: LD_INT 83
29206: PUSH
29207: LD_INT 84
29209: PUSH
29210: LD_INT 85
29212: PUSH
29213: LD_INT 87
29215: PUSH
29216: LD_INT 70
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 11
29224: PUSH
29225: LD_INT 3
29227: PUSH
29228: LD_INT 4
29230: PUSH
29231: LD_INT 5
29233: PUSH
29234: LD_INT 6
29236: PUSH
29237: LD_INT 15
29239: PUSH
29240: LD_INT 18
29242: PUSH
29243: LD_INT 7
29245: PUSH
29246: LD_INT 17
29248: PUSH
29249: LD_INT 8
29251: PUSH
29252: LD_INT 20
29254: PUSH
29255: LD_INT 21
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_INT 72
29263: PUSH
29264: LD_INT 26
29266: PUSH
29267: LD_INT 69
29269: PUSH
29270: LD_INT 39
29272: PUSH
29273: LD_INT 40
29275: PUSH
29276: LD_INT 41
29278: PUSH
29279: LD_INT 42
29281: PUSH
29282: LD_INT 43
29284: PUSH
29285: LD_INT 48
29287: PUSH
29288: LD_INT 49
29290: PUSH
29291: LD_INT 50
29293: PUSH
29294: LD_INT 51
29296: PUSH
29297: LD_INT 52
29299: PUSH
29300: LD_INT 53
29302: PUSH
29303: LD_INT 54
29305: PUSH
29306: LD_INT 55
29308: PUSH
29309: LD_INT 56
29311: PUSH
29312: LD_INT 60
29314: PUSH
29315: LD_INT 61
29317: PUSH
29318: LD_INT 62
29320: PUSH
29321: LD_INT 66
29323: PUSH
29324: LD_INT 67
29326: PUSH
29327: LD_INT 68
29329: PUSH
29330: LD_INT 81
29332: PUSH
29333: LD_INT 82
29335: PUSH
29336: LD_INT 83
29338: PUSH
29339: LD_INT 84
29341: PUSH
29342: LD_INT 85
29344: PUSH
29345: LD_INT 87
29347: PUSH
29348: LD_INT 88
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
29407: GO 29640
29409: LD_INT 3
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 29639
29417: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29418: LD_ADDR_VAR 0 4
29422: PUSH
29423: LD_INT 46
29425: PUSH
29426: LD_INT 47
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: LD_INT 82
29437: PUSH
29438: LD_INT 83
29440: PUSH
29441: LD_INT 84
29443: PUSH
29444: LD_INT 85
29446: PUSH
29447: LD_INT 86
29449: PUSH
29450: LD_INT 11
29452: PUSH
29453: LD_INT 9
29455: PUSH
29456: LD_INT 20
29458: PUSH
29459: LD_INT 19
29461: PUSH
29462: LD_INT 21
29464: PUSH
29465: LD_INT 24
29467: PUSH
29468: LD_INT 22
29470: PUSH
29471: LD_INT 25
29473: PUSH
29474: LD_INT 28
29476: PUSH
29477: LD_INT 29
29479: PUSH
29480: LD_INT 30
29482: PUSH
29483: LD_INT 31
29485: PUSH
29486: LD_INT 37
29488: PUSH
29489: LD_INT 38
29491: PUSH
29492: LD_INT 32
29494: PUSH
29495: LD_INT 27
29497: PUSH
29498: LD_INT 33
29500: PUSH
29501: LD_INT 69
29503: PUSH
29504: LD_INT 39
29506: PUSH
29507: LD_INT 34
29509: PUSH
29510: LD_INT 40
29512: PUSH
29513: LD_INT 71
29515: PUSH
29516: LD_INT 23
29518: PUSH
29519: LD_INT 44
29521: PUSH
29522: LD_INT 48
29524: PUSH
29525: LD_INT 49
29527: PUSH
29528: LD_INT 50
29530: PUSH
29531: LD_INT 51
29533: PUSH
29534: LD_INT 52
29536: PUSH
29537: LD_INT 53
29539: PUSH
29540: LD_INT 54
29542: PUSH
29543: LD_INT 55
29545: PUSH
29546: LD_INT 56
29548: PUSH
29549: LD_INT 57
29551: PUSH
29552: LD_INT 58
29554: PUSH
29555: LD_INT 59
29557: PUSH
29558: LD_INT 63
29560: PUSH
29561: LD_INT 64
29563: PUSH
29564: LD_INT 65
29566: PUSH
29567: LD_INT 82
29569: PUSH
29570: LD_INT 83
29572: PUSH
29573: LD_INT 84
29575: PUSH
29576: LD_INT 85
29578: PUSH
29579: LD_INT 86
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: ST_TO_ADDR
29637: GO 29640
29639: POP
// if state > - 1 and state < 3 then
29640: LD_VAR 0 3
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: GREATER
29649: PUSH
29650: LD_VAR 0 3
29654: PUSH
29655: LD_INT 3
29657: LESS
29658: AND
29659: IFFALSE 29716
// for i in result do
29661: LD_ADDR_VAR 0 5
29665: PUSH
29666: LD_VAR 0 4
29670: PUSH
29671: FOR_IN
29672: IFFALSE 29714
// if GetTech ( i , side ) <> state then
29674: LD_VAR 0 5
29678: PPUSH
29679: LD_VAR 0 1
29683: PPUSH
29684: CALL_OW 321
29688: PUSH
29689: LD_VAR 0 3
29693: NONEQUAL
29694: IFFALSE 29712
// result := result diff i ;
29696: LD_ADDR_VAR 0 4
29700: PUSH
29701: LD_VAR 0 4
29705: PUSH
29706: LD_VAR 0 5
29710: DIFF
29711: ST_TO_ADDR
29712: GO 29671
29714: POP
29715: POP
// end ;
29716: LD_VAR 0 4
29720: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29721: LD_INT 0
29723: PPUSH
29724: PPUSH
29725: PPUSH
// result := true ;
29726: LD_ADDR_VAR 0 3
29730: PUSH
29731: LD_INT 1
29733: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29734: LD_ADDR_VAR 0 5
29738: PUSH
29739: LD_VAR 0 2
29743: PPUSH
29744: CALL_OW 480
29748: ST_TO_ADDR
// if not tmp then
29749: LD_VAR 0 5
29753: NOT
29754: IFFALSE 29758
// exit ;
29756: GO 29807
// for i in tmp do
29758: LD_ADDR_VAR 0 4
29762: PUSH
29763: LD_VAR 0 5
29767: PUSH
29768: FOR_IN
29769: IFFALSE 29805
// if GetTech ( i , side ) <> state_researched then
29771: LD_VAR 0 4
29775: PPUSH
29776: LD_VAR 0 1
29780: PPUSH
29781: CALL_OW 321
29785: PUSH
29786: LD_INT 2
29788: NONEQUAL
29789: IFFALSE 29803
// begin result := false ;
29791: LD_ADDR_VAR 0 3
29795: PUSH
29796: LD_INT 0
29798: ST_TO_ADDR
// exit ;
29799: POP
29800: POP
29801: GO 29807
// end ;
29803: GO 29768
29805: POP
29806: POP
// end ;
29807: LD_VAR 0 3
29811: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29812: LD_INT 0
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29827: LD_VAR 0 1
29831: NOT
29832: PUSH
29833: LD_VAR 0 1
29837: PPUSH
29838: CALL_OW 257
29842: PUSH
29843: LD_INT 9
29845: NONEQUAL
29846: OR
29847: IFFALSE 29851
// exit ;
29849: GO 30424
// side := GetSide ( unit ) ;
29851: LD_ADDR_VAR 0 9
29855: PUSH
29856: LD_VAR 0 1
29860: PPUSH
29861: CALL_OW 255
29865: ST_TO_ADDR
// tech_space := tech_spacanom ;
29866: LD_ADDR_VAR 0 12
29870: PUSH
29871: LD_INT 29
29873: ST_TO_ADDR
// tech_time := tech_taurad ;
29874: LD_ADDR_VAR 0 13
29878: PUSH
29879: LD_INT 28
29881: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29882: LD_ADDR_VAR 0 11
29886: PUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 310
29896: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29897: LD_VAR 0 11
29901: PPUSH
29902: CALL_OW 247
29906: PUSH
29907: LD_INT 2
29909: EQUAL
29910: IFFALSE 29914
// exit ;
29912: GO 30424
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29914: LD_ADDR_VAR 0 8
29918: PUSH
29919: LD_INT 81
29921: PUSH
29922: LD_VAR 0 9
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: LD_INT 21
29936: PUSH
29937: LD_INT 3
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PPUSH
29952: CALL_OW 69
29956: ST_TO_ADDR
// if not tmp then
29957: LD_VAR 0 8
29961: NOT
29962: IFFALSE 29966
// exit ;
29964: GO 30424
// if in_unit then
29966: LD_VAR 0 11
29970: IFFALSE 29994
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29972: LD_ADDR_VAR 0 10
29976: PUSH
29977: LD_VAR 0 8
29981: PPUSH
29982: LD_VAR 0 11
29986: PPUSH
29987: CALL_OW 74
29991: ST_TO_ADDR
29992: GO 30014
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29994: LD_ADDR_VAR 0 10
29998: PUSH
29999: LD_VAR 0 8
30003: PPUSH
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 74
30013: ST_TO_ADDR
// if not enemy then
30014: LD_VAR 0 10
30018: NOT
30019: IFFALSE 30023
// exit ;
30021: GO 30424
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30023: LD_VAR 0 11
30027: PUSH
30028: LD_VAR 0 11
30032: PPUSH
30033: LD_VAR 0 10
30037: PPUSH
30038: CALL_OW 296
30042: PUSH
30043: LD_INT 13
30045: GREATER
30046: AND
30047: PUSH
30048: LD_VAR 0 1
30052: PPUSH
30053: LD_VAR 0 10
30057: PPUSH
30058: CALL_OW 296
30062: PUSH
30063: LD_INT 12
30065: GREATER
30066: OR
30067: IFFALSE 30071
// exit ;
30069: GO 30424
// missile := [ 1 ] ;
30071: LD_ADDR_VAR 0 14
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30082: LD_VAR 0 9
30086: PPUSH
30087: LD_VAR 0 12
30091: PPUSH
30092: CALL_OW 325
30096: IFFALSE 30125
// missile := Replace ( missile , missile + 1 , 2 ) ;
30098: LD_ADDR_VAR 0 14
30102: PUSH
30103: LD_VAR 0 14
30107: PPUSH
30108: LD_VAR 0 14
30112: PUSH
30113: LD_INT 1
30115: PLUS
30116: PPUSH
30117: LD_INT 2
30119: PPUSH
30120: CALL_OW 1
30124: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30125: LD_VAR 0 9
30129: PPUSH
30130: LD_VAR 0 13
30134: PPUSH
30135: CALL_OW 325
30139: PUSH
30140: LD_VAR 0 10
30144: PPUSH
30145: CALL_OW 255
30149: PPUSH
30150: LD_VAR 0 13
30154: PPUSH
30155: CALL_OW 325
30159: NOT
30160: AND
30161: IFFALSE 30190
// missile := Replace ( missile , missile + 1 , 3 ) ;
30163: LD_ADDR_VAR 0 14
30167: PUSH
30168: LD_VAR 0 14
30172: PPUSH
30173: LD_VAR 0 14
30177: PUSH
30178: LD_INT 1
30180: PLUS
30181: PPUSH
30182: LD_INT 3
30184: PPUSH
30185: CALL_OW 1
30189: ST_TO_ADDR
// if missile < 2 then
30190: LD_VAR 0 14
30194: PUSH
30195: LD_INT 2
30197: LESS
30198: IFFALSE 30202
// exit ;
30200: GO 30424
// x := GetX ( enemy ) ;
30202: LD_ADDR_VAR 0 4
30206: PUSH
30207: LD_VAR 0 10
30211: PPUSH
30212: CALL_OW 250
30216: ST_TO_ADDR
// y := GetY ( enemy ) ;
30217: LD_ADDR_VAR 0 5
30221: PUSH
30222: LD_VAR 0 10
30226: PPUSH
30227: CALL_OW 251
30231: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30232: LD_ADDR_VAR 0 6
30236: PUSH
30237: LD_VAR 0 4
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PPUSH
30246: LD_INT 1
30248: PPUSH
30249: CALL_OW 12
30253: PLUS
30254: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30255: LD_ADDR_VAR 0 7
30259: PUSH
30260: LD_VAR 0 5
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PPUSH
30269: LD_INT 1
30271: PPUSH
30272: CALL_OW 12
30276: PLUS
30277: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30278: LD_VAR 0 6
30282: PPUSH
30283: LD_VAR 0 7
30287: PPUSH
30288: CALL_OW 488
30292: NOT
30293: IFFALSE 30315
// begin _x := x ;
30295: LD_ADDR_VAR 0 6
30299: PUSH
30300: LD_VAR 0 4
30304: ST_TO_ADDR
// _y := y ;
30305: LD_ADDR_VAR 0 7
30309: PUSH
30310: LD_VAR 0 5
30314: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30315: LD_ADDR_VAR 0 3
30319: PUSH
30320: LD_INT 1
30322: PPUSH
30323: LD_VAR 0 14
30327: PPUSH
30328: CALL_OW 12
30332: ST_TO_ADDR
// case i of 1 :
30333: LD_VAR 0 3
30337: PUSH
30338: LD_INT 1
30340: DOUBLE
30341: EQUAL
30342: IFTRUE 30346
30344: GO 30363
30346: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30347: LD_VAR 0 1
30351: PPUSH
30352: LD_VAR 0 10
30356: PPUSH
30357: CALL_OW 115
30361: GO 30424
30363: LD_INT 2
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30393
30371: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30372: LD_VAR 0 1
30376: PPUSH
30377: LD_VAR 0 6
30381: PPUSH
30382: LD_VAR 0 7
30386: PPUSH
30387: CALL_OW 153
30391: GO 30424
30393: LD_INT 3
30395: DOUBLE
30396: EQUAL
30397: IFTRUE 30401
30399: GO 30423
30401: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30402: LD_VAR 0 1
30406: PPUSH
30407: LD_VAR 0 6
30411: PPUSH
30412: LD_VAR 0 7
30416: PPUSH
30417: CALL_OW 154
30421: GO 30424
30423: POP
// end ;
30424: LD_VAR 0 2
30428: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30429: LD_INT 0
30431: PPUSH
30432: PPUSH
30433: PPUSH
30434: PPUSH
30435: PPUSH
30436: PPUSH
// if not unit or not building then
30437: LD_VAR 0 1
30441: NOT
30442: PUSH
30443: LD_VAR 0 2
30447: NOT
30448: OR
30449: IFFALSE 30453
// exit ;
30451: GO 30611
// x := GetX ( building ) ;
30453: LD_ADDR_VAR 0 5
30457: PUSH
30458: LD_VAR 0 2
30462: PPUSH
30463: CALL_OW 250
30467: ST_TO_ADDR
// y := GetY ( building ) ;
30468: LD_ADDR_VAR 0 6
30472: PUSH
30473: LD_VAR 0 2
30477: PPUSH
30478: CALL_OW 251
30482: ST_TO_ADDR
// for i = 0 to 5 do
30483: LD_ADDR_VAR 0 4
30487: PUSH
30488: DOUBLE
30489: LD_INT 0
30491: DEC
30492: ST_TO_ADDR
30493: LD_INT 5
30495: PUSH
30496: FOR_TO
30497: IFFALSE 30609
// begin _x := ShiftX ( x , i , 3 ) ;
30499: LD_ADDR_VAR 0 7
30503: PUSH
30504: LD_VAR 0 5
30508: PPUSH
30509: LD_VAR 0 4
30513: PPUSH
30514: LD_INT 3
30516: PPUSH
30517: CALL_OW 272
30521: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30522: LD_ADDR_VAR 0 8
30526: PUSH
30527: LD_VAR 0 6
30531: PPUSH
30532: LD_VAR 0 4
30536: PPUSH
30537: LD_INT 3
30539: PPUSH
30540: CALL_OW 273
30544: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30545: LD_VAR 0 7
30549: PPUSH
30550: LD_VAR 0 8
30554: PPUSH
30555: CALL_OW 488
30559: NOT
30560: IFFALSE 30564
// continue ;
30562: GO 30496
// if HexInfo ( _x , _y ) = 0 then
30564: LD_VAR 0 7
30568: PPUSH
30569: LD_VAR 0 8
30573: PPUSH
30574: CALL_OW 428
30578: PUSH
30579: LD_INT 0
30581: EQUAL
30582: IFFALSE 30607
// begin ComMoveXY ( unit , _x , _y ) ;
30584: LD_VAR 0 1
30588: PPUSH
30589: LD_VAR 0 7
30593: PPUSH
30594: LD_VAR 0 8
30598: PPUSH
30599: CALL_OW 111
// exit ;
30603: POP
30604: POP
30605: GO 30611
// end ; end ;
30607: GO 30496
30609: POP
30610: POP
// end ;
30611: LD_VAR 0 3
30615: RET
// export function ScanBase ( side , base_area ) ; begin
30616: LD_INT 0
30618: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30619: LD_ADDR_VAR 0 3
30623: PUSH
30624: LD_VAR 0 2
30628: PPUSH
30629: LD_INT 81
30631: PUSH
30632: LD_VAR 0 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PPUSH
30641: CALL_OW 70
30645: ST_TO_ADDR
// end ;
30646: LD_VAR 0 3
30650: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30651: LD_INT 0
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
// result := false ;
30657: LD_ADDR_VAR 0 2
30661: PUSH
30662: LD_INT 0
30664: ST_TO_ADDR
// side := GetSide ( unit ) ;
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_VAR 0 1
30674: PPUSH
30675: CALL_OW 255
30679: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30680: LD_ADDR_VAR 0 4
30684: PUSH
30685: LD_VAR 0 1
30689: PPUSH
30690: CALL_OW 248
30694: ST_TO_ADDR
// case nat of 1 :
30695: LD_VAR 0 4
30699: PUSH
30700: LD_INT 1
30702: DOUBLE
30703: EQUAL
30704: IFTRUE 30708
30706: GO 30719
30708: POP
// tech := tech_lassight ; 2 :
30709: LD_ADDR_VAR 0 5
30713: PUSH
30714: LD_INT 12
30716: ST_TO_ADDR
30717: GO 30758
30719: LD_INT 2
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30738
30727: POP
// tech := tech_mortar ; 3 :
30728: LD_ADDR_VAR 0 5
30732: PUSH
30733: LD_INT 41
30735: ST_TO_ADDR
30736: GO 30758
30738: LD_INT 3
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30757
30746: POP
// tech := tech_bazooka ; end ;
30747: LD_ADDR_VAR 0 5
30751: PUSH
30752: LD_INT 44
30754: ST_TO_ADDR
30755: GO 30758
30757: POP
// if Researched ( side , tech ) then
30758: LD_VAR 0 3
30762: PPUSH
30763: LD_VAR 0 5
30767: PPUSH
30768: CALL_OW 325
30772: IFFALSE 30799
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30774: LD_ADDR_VAR 0 2
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: LD_INT 8
30784: PUSH
30785: LD_INT 9
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: PUSH
30793: LD_VAR 0 4
30797: ARRAY
30798: ST_TO_ADDR
// end ;
30799: LD_VAR 0 2
30803: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30804: LD_INT 0
30806: PPUSH
30807: PPUSH
30808: PPUSH
// if not mines then
30809: LD_VAR 0 2
30813: NOT
30814: IFFALSE 30818
// exit ;
30816: GO 30962
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30818: LD_ADDR_VAR 0 5
30822: PUSH
30823: LD_INT 81
30825: PUSH
30826: LD_VAR 0 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 3
30837: PUSH
30838: LD_INT 21
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PPUSH
30856: CALL_OW 69
30860: ST_TO_ADDR
// for i in mines do
30861: LD_ADDR_VAR 0 4
30865: PUSH
30866: LD_VAR 0 2
30870: PUSH
30871: FOR_IN
30872: IFFALSE 30960
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30874: LD_VAR 0 4
30878: PUSH
30879: LD_INT 1
30881: ARRAY
30882: PPUSH
30883: LD_VAR 0 4
30887: PUSH
30888: LD_INT 2
30890: ARRAY
30891: PPUSH
30892: CALL_OW 458
30896: NOT
30897: IFFALSE 30901
// continue ;
30899: GO 30871
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30901: LD_VAR 0 4
30905: PUSH
30906: LD_INT 1
30908: ARRAY
30909: PPUSH
30910: LD_VAR 0 4
30914: PUSH
30915: LD_INT 2
30917: ARRAY
30918: PPUSH
30919: CALL_OW 428
30923: PUSH
30924: LD_VAR 0 5
30928: IN
30929: IFFALSE 30958
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30931: LD_VAR 0 4
30935: PUSH
30936: LD_INT 1
30938: ARRAY
30939: PPUSH
30940: LD_VAR 0 4
30944: PUSH
30945: LD_INT 2
30947: ARRAY
30948: PPUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 456
// end ;
30958: GO 30871
30960: POP
30961: POP
// end ;
30962: LD_VAR 0 3
30966: RET
// export function Count ( array ) ; begin
30967: LD_INT 0
30969: PPUSH
// result := array + 0 ;
30970: LD_ADDR_VAR 0 2
30974: PUSH
30975: LD_VAR 0 1
30979: PUSH
30980: LD_INT 0
30982: PLUS
30983: ST_TO_ADDR
// end ;
30984: LD_VAR 0 2
30988: RET
// export function IsEmpty ( building ) ; begin
30989: LD_INT 0
30991: PPUSH
// if not building then
30992: LD_VAR 0 1
30996: NOT
30997: IFFALSE 31001
// exit ;
30999: GO 31044
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31001: LD_ADDR_VAR 0 2
31005: PUSH
31006: LD_VAR 0 1
31010: PUSH
31011: LD_INT 22
31013: PUSH
31014: LD_VAR 0 1
31018: PPUSH
31019: CALL_OW 255
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 58
31030: PUSH
31031: EMPTY
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PPUSH
31038: CALL_OW 69
31042: IN
31043: ST_TO_ADDR
// end ;
31044: LD_VAR 0 2
31048: RET
// export function IsNotFull ( building ) ; var places ; begin
31049: LD_INT 0
31051: PPUSH
31052: PPUSH
// if not building then
31053: LD_VAR 0 1
31057: NOT
31058: IFFALSE 31062
// exit ;
31060: GO 31090
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31062: LD_ADDR_VAR 0 2
31066: PUSH
31067: LD_VAR 0 1
31071: PPUSH
31072: LD_INT 3
31074: PUSH
31075: LD_INT 62
31077: PUSH
31078: EMPTY
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PPUSH
31085: CALL_OW 72
31089: ST_TO_ADDR
// end ;
31090: LD_VAR 0 2
31094: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31095: LD_INT 0
31097: PPUSH
31098: PPUSH
31099: PPUSH
31100: PPUSH
// tmp := [ ] ;
31101: LD_ADDR_VAR 0 3
31105: PUSH
31106: EMPTY
31107: ST_TO_ADDR
// list := [ ] ;
31108: LD_ADDR_VAR 0 5
31112: PUSH
31113: EMPTY
31114: ST_TO_ADDR
// for i = 16 to 25 do
31115: LD_ADDR_VAR 0 4
31119: PUSH
31120: DOUBLE
31121: LD_INT 16
31123: DEC
31124: ST_TO_ADDR
31125: LD_INT 25
31127: PUSH
31128: FOR_TO
31129: IFFALSE 31202
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31131: LD_ADDR_VAR 0 3
31135: PUSH
31136: LD_VAR 0 3
31140: PUSH
31141: LD_INT 22
31143: PUSH
31144: LD_VAR 0 1
31148: PPUSH
31149: CALL_OW 255
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 91
31160: PUSH
31161: LD_VAR 0 1
31165: PUSH
31166: LD_INT 6
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 30
31176: PUSH
31177: LD_VAR 0 4
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: PUSH
31191: EMPTY
31192: LIST
31193: PPUSH
31194: CALL_OW 69
31198: ADD
31199: ST_TO_ADDR
31200: GO 31128
31202: POP
31203: POP
// for i = 1 to tmp do
31204: LD_ADDR_VAR 0 4
31208: PUSH
31209: DOUBLE
31210: LD_INT 1
31212: DEC
31213: ST_TO_ADDR
31214: LD_VAR 0 3
31218: PUSH
31219: FOR_TO
31220: IFFALSE 31308
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31222: LD_ADDR_VAR 0 5
31226: PUSH
31227: LD_VAR 0 5
31231: PUSH
31232: LD_VAR 0 3
31236: PUSH
31237: LD_VAR 0 4
31241: ARRAY
31242: PPUSH
31243: CALL_OW 266
31247: PUSH
31248: LD_VAR 0 3
31252: PUSH
31253: LD_VAR 0 4
31257: ARRAY
31258: PPUSH
31259: CALL_OW 250
31263: PUSH
31264: LD_VAR 0 3
31268: PUSH
31269: LD_VAR 0 4
31273: ARRAY
31274: PPUSH
31275: CALL_OW 251
31279: PUSH
31280: LD_VAR 0 3
31284: PUSH
31285: LD_VAR 0 4
31289: ARRAY
31290: PPUSH
31291: CALL_OW 254
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: ADD
31305: ST_TO_ADDR
31306: GO 31219
31308: POP
31309: POP
// result := list ;
31310: LD_ADDR_VAR 0 2
31314: PUSH
31315: LD_VAR 0 5
31319: ST_TO_ADDR
// end ;
31320: LD_VAR 0 2
31324: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31325: LD_INT 0
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
// if not factory then
31334: LD_VAR 0 1
31338: NOT
31339: IFFALSE 31343
// exit ;
31341: GO 31936
// if control = control_apeman then
31343: LD_VAR 0 4
31347: PUSH
31348: LD_INT 5
31350: EQUAL
31351: IFFALSE 31460
// begin tmp := UnitsInside ( factory ) ;
31353: LD_ADDR_VAR 0 8
31357: PUSH
31358: LD_VAR 0 1
31362: PPUSH
31363: CALL_OW 313
31367: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31368: LD_VAR 0 8
31372: PPUSH
31373: LD_INT 25
31375: PUSH
31376: LD_INT 12
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PPUSH
31383: CALL_OW 72
31387: NOT
31388: IFFALSE 31398
// control := control_manual ;
31390: LD_ADDR_VAR 0 4
31394: PUSH
31395: LD_INT 1
31397: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31398: LD_ADDR_VAR 0 8
31402: PUSH
31403: LD_VAR 0 1
31407: PPUSH
31408: CALL 31095 0 1
31412: ST_TO_ADDR
// if tmp then
31413: LD_VAR 0 8
31417: IFFALSE 31460
// begin for i in tmp do
31419: LD_ADDR_VAR 0 7
31423: PUSH
31424: LD_VAR 0 8
31428: PUSH
31429: FOR_IN
31430: IFFALSE 31458
// if i [ 1 ] = b_ext_radio then
31432: LD_VAR 0 7
31436: PUSH
31437: LD_INT 1
31439: ARRAY
31440: PUSH
31441: LD_INT 22
31443: EQUAL
31444: IFFALSE 31456
// begin control := control_remote ;
31446: LD_ADDR_VAR 0 4
31450: PUSH
31451: LD_INT 2
31453: ST_TO_ADDR
// break ;
31454: GO 31458
// end ;
31456: GO 31429
31458: POP
31459: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31460: LD_VAR 0 1
31464: PPUSH
31465: LD_VAR 0 2
31469: PPUSH
31470: LD_VAR 0 3
31474: PPUSH
31475: LD_VAR 0 4
31479: PPUSH
31480: LD_VAR 0 5
31484: PPUSH
31485: CALL_OW 448
31489: IFFALSE 31524
// begin result := [ chassis , engine , control , weapon ] ;
31491: LD_ADDR_VAR 0 6
31495: PUSH
31496: LD_VAR 0 2
31500: PUSH
31501: LD_VAR 0 3
31505: PUSH
31506: LD_VAR 0 4
31510: PUSH
31511: LD_VAR 0 5
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: ST_TO_ADDR
// exit ;
31522: GO 31936
// end ; _chassis := AvailableChassisList ( factory ) ;
31524: LD_ADDR_VAR 0 9
31528: PUSH
31529: LD_VAR 0 1
31533: PPUSH
31534: CALL_OW 475
31538: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31539: LD_ADDR_VAR 0 11
31543: PUSH
31544: LD_VAR 0 1
31548: PPUSH
31549: CALL_OW 476
31553: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31554: LD_ADDR_VAR 0 12
31558: PUSH
31559: LD_VAR 0 1
31563: PPUSH
31564: CALL_OW 477
31568: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31569: LD_ADDR_VAR 0 10
31573: PUSH
31574: LD_VAR 0 1
31578: PPUSH
31579: CALL_OW 478
31583: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31584: LD_VAR 0 9
31588: NOT
31589: PUSH
31590: LD_VAR 0 11
31594: NOT
31595: OR
31596: PUSH
31597: LD_VAR 0 12
31601: NOT
31602: OR
31603: PUSH
31604: LD_VAR 0 10
31608: NOT
31609: OR
31610: IFFALSE 31645
// begin result := [ chassis , engine , control , weapon ] ;
31612: LD_ADDR_VAR 0 6
31616: PUSH
31617: LD_VAR 0 2
31621: PUSH
31622: LD_VAR 0 3
31626: PUSH
31627: LD_VAR 0 4
31631: PUSH
31632: LD_VAR 0 5
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: ST_TO_ADDR
// exit ;
31643: GO 31936
// end ; if not chassis in _chassis then
31645: LD_VAR 0 2
31649: PUSH
31650: LD_VAR 0 9
31654: IN
31655: NOT
31656: IFFALSE 31682
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31658: LD_ADDR_VAR 0 2
31662: PUSH
31663: LD_VAR 0 9
31667: PUSH
31668: LD_INT 1
31670: PPUSH
31671: LD_VAR 0 9
31675: PPUSH
31676: CALL_OW 12
31680: ARRAY
31681: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31682: LD_VAR 0 2
31686: PPUSH
31687: LD_VAR 0 3
31691: PPUSH
31692: CALL 31941 0 2
31696: NOT
31697: IFFALSE 31756
// repeat engine := _engine [ 1 ] ;
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_VAR 0 11
31708: PUSH
31709: LD_INT 1
31711: ARRAY
31712: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31713: LD_ADDR_VAR 0 11
31717: PUSH
31718: LD_VAR 0 11
31722: PPUSH
31723: LD_INT 1
31725: PPUSH
31726: CALL_OW 3
31730: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31731: LD_VAR 0 2
31735: PPUSH
31736: LD_VAR 0 3
31740: PPUSH
31741: CALL 31941 0 2
31745: PUSH
31746: LD_VAR 0 11
31750: PUSH
31751: EMPTY
31752: EQUAL
31753: OR
31754: IFFALSE 31699
// if not control in _control then
31756: LD_VAR 0 4
31760: PUSH
31761: LD_VAR 0 12
31765: IN
31766: NOT
31767: IFFALSE 31793
// control := _control [ rand ( 1 , _control ) ] ;
31769: LD_ADDR_VAR 0 4
31773: PUSH
31774: LD_VAR 0 12
31778: PUSH
31779: LD_INT 1
31781: PPUSH
31782: LD_VAR 0 12
31786: PPUSH
31787: CALL_OW 12
31791: ARRAY
31792: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31793: LD_VAR 0 2
31797: PPUSH
31798: LD_VAR 0 5
31802: PPUSH
31803: CALL 32161 0 2
31807: NOT
31808: IFFALSE 31867
// repeat weapon := _weapon [ 1 ] ;
31810: LD_ADDR_VAR 0 5
31814: PUSH
31815: LD_VAR 0 10
31819: PUSH
31820: LD_INT 1
31822: ARRAY
31823: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31824: LD_ADDR_VAR 0 10
31828: PUSH
31829: LD_VAR 0 10
31833: PPUSH
31834: LD_INT 1
31836: PPUSH
31837: CALL_OW 3
31841: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31842: LD_VAR 0 2
31846: PPUSH
31847: LD_VAR 0 5
31851: PPUSH
31852: CALL 32161 0 2
31856: PUSH
31857: LD_VAR 0 10
31861: PUSH
31862: EMPTY
31863: EQUAL
31864: OR
31865: IFFALSE 31810
// result := [ ] ;
31867: LD_ADDR_VAR 0 6
31871: PUSH
31872: EMPTY
31873: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31874: LD_VAR 0 1
31878: PPUSH
31879: LD_VAR 0 2
31883: PPUSH
31884: LD_VAR 0 3
31888: PPUSH
31889: LD_VAR 0 4
31893: PPUSH
31894: LD_VAR 0 5
31898: PPUSH
31899: CALL_OW 448
31903: IFFALSE 31936
// result := [ chassis , engine , control , weapon ] ;
31905: LD_ADDR_VAR 0 6
31909: PUSH
31910: LD_VAR 0 2
31914: PUSH
31915: LD_VAR 0 3
31919: PUSH
31920: LD_VAR 0 4
31924: PUSH
31925: LD_VAR 0 5
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: ST_TO_ADDR
// end ;
31936: LD_VAR 0 6
31940: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31941: LD_INT 0
31943: PPUSH
// if not chassis or not engine then
31944: LD_VAR 0 1
31948: NOT
31949: PUSH
31950: LD_VAR 0 2
31954: NOT
31955: OR
31956: IFFALSE 31960
// exit ;
31958: GO 32156
// case engine of engine_solar :
31960: LD_VAR 0 2
31964: PUSH
31965: LD_INT 2
31967: DOUBLE
31968: EQUAL
31969: IFTRUE 31973
31971: GO 32011
31973: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31974: LD_ADDR_VAR 0 3
31978: PUSH
31979: LD_INT 11
31981: PUSH
31982: LD_INT 12
31984: PUSH
31985: LD_INT 13
31987: PUSH
31988: LD_INT 14
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: ST_TO_ADDR
32009: GO 32140
32011: LD_INT 1
32013: DOUBLE
32014: EQUAL
32015: IFTRUE 32019
32017: GO 32081
32019: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32020: LD_ADDR_VAR 0 3
32024: PUSH
32025: LD_INT 11
32027: PUSH
32028: LD_INT 12
32030: PUSH
32031: LD_INT 13
32033: PUSH
32034: LD_INT 14
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: LD_INT 4
32048: PUSH
32049: LD_INT 5
32051: PUSH
32052: LD_INT 21
32054: PUSH
32055: LD_INT 23
32057: PUSH
32058: LD_INT 22
32060: PUSH
32061: LD_INT 24
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
32079: GO 32140
32081: LD_INT 3
32083: DOUBLE
32084: EQUAL
32085: IFTRUE 32089
32087: GO 32139
32089: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32090: LD_ADDR_VAR 0 3
32094: PUSH
32095: LD_INT 13
32097: PUSH
32098: LD_INT 14
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: LD_INT 4
32109: PUSH
32110: LD_INT 5
32112: PUSH
32113: LD_INT 21
32115: PUSH
32116: LD_INT 22
32118: PUSH
32119: LD_INT 23
32121: PUSH
32122: LD_INT 24
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: ST_TO_ADDR
32137: GO 32140
32139: POP
// result := ( chassis in result ) ;
32140: LD_ADDR_VAR 0 3
32144: PUSH
32145: LD_VAR 0 1
32149: PUSH
32150: LD_VAR 0 3
32154: IN
32155: ST_TO_ADDR
// end ;
32156: LD_VAR 0 3
32160: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32161: LD_INT 0
32163: PPUSH
// if not chassis or not weapon then
32164: LD_VAR 0 1
32168: NOT
32169: PUSH
32170: LD_VAR 0 2
32174: NOT
32175: OR
32176: IFFALSE 32180
// exit ;
32178: GO 33240
// case weapon of us_machine_gun :
32180: LD_VAR 0 2
32184: PUSH
32185: LD_INT 2
32187: DOUBLE
32188: EQUAL
32189: IFTRUE 32193
32191: GO 32223
32193: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32194: LD_ADDR_VAR 0 3
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: LD_INT 3
32207: PUSH
32208: LD_INT 4
32210: PUSH
32211: LD_INT 5
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: ST_TO_ADDR
32221: GO 33224
32223: LD_INT 3
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32231
32229: GO 32261
32231: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32232: LD_ADDR_VAR 0 3
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: LD_INT 4
32248: PUSH
32249: LD_INT 5
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: ST_TO_ADDR
32259: GO 33224
32261: LD_INT 11
32263: DOUBLE
32264: EQUAL
32265: IFTRUE 32269
32267: GO 32299
32269: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32270: LD_ADDR_VAR 0 3
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: LD_INT 3
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: LD_INT 5
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
32297: GO 33224
32299: LD_INT 4
32301: DOUBLE
32302: EQUAL
32303: IFTRUE 32307
32305: GO 32333
32307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32308: LD_ADDR_VAR 0 3
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: LD_INT 4
32321: PUSH
32322: LD_INT 5
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: ST_TO_ADDR
32331: GO 33224
32333: LD_INT 5
32335: DOUBLE
32336: EQUAL
32337: IFTRUE 32341
32339: GO 32367
32341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32342: LD_ADDR_VAR 0 3
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 4
32355: PUSH
32356: LD_INT 5
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
32365: GO 33224
32367: LD_INT 9
32369: DOUBLE
32370: EQUAL
32371: IFTRUE 32375
32373: GO 32401
32375: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 3
32386: PUSH
32387: LD_INT 4
32389: PUSH
32390: LD_INT 5
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: ST_TO_ADDR
32399: GO 33224
32401: LD_INT 7
32403: DOUBLE
32404: EQUAL
32405: IFTRUE 32409
32407: GO 32435
32409: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32410: LD_ADDR_VAR 0 3
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: LD_INT 3
32420: PUSH
32421: LD_INT 4
32423: PUSH
32424: LD_INT 5
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
32433: GO 33224
32435: LD_INT 12
32437: DOUBLE
32438: EQUAL
32439: IFTRUE 32443
32441: GO 32469
32443: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32444: LD_ADDR_VAR 0 3
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: LD_INT 3
32454: PUSH
32455: LD_INT 4
32457: PUSH
32458: LD_INT 5
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: ST_TO_ADDR
32467: GO 33224
32469: LD_INT 13
32471: DOUBLE
32472: EQUAL
32473: IFTRUE 32477
32475: GO 32503
32477: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32478: LD_ADDR_VAR 0 3
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 4
32491: PUSH
32492: LD_INT 5
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: ST_TO_ADDR
32501: GO 33224
32503: LD_INT 14
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32529
32511: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32512: LD_ADDR_VAR 0 3
32516: PUSH
32517: LD_INT 4
32519: PUSH
32520: LD_INT 5
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: ST_TO_ADDR
32527: GO 33224
32529: LD_INT 6
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32555
32537: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32538: LD_ADDR_VAR 0 3
32542: PUSH
32543: LD_INT 4
32545: PUSH
32546: LD_INT 5
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: ST_TO_ADDR
32553: GO 33224
32555: LD_INT 10
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32581
32563: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 4
32571: PUSH
32572: LD_INT 5
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: ST_TO_ADDR
32579: GO 33224
32581: LD_INT 22
32583: DOUBLE
32584: EQUAL
32585: IFTRUE 32589
32587: GO 32615
32589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32590: LD_ADDR_VAR 0 3
32594: PUSH
32595: LD_INT 11
32597: PUSH
32598: LD_INT 12
32600: PUSH
32601: LD_INT 13
32603: PUSH
32604: LD_INT 14
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: ST_TO_ADDR
32613: GO 33224
32615: LD_INT 23
32617: DOUBLE
32618: EQUAL
32619: IFTRUE 32623
32621: GO 32649
32623: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32624: LD_ADDR_VAR 0 3
32628: PUSH
32629: LD_INT 11
32631: PUSH
32632: LD_INT 12
32634: PUSH
32635: LD_INT 13
32637: PUSH
32638: LD_INT 14
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: ST_TO_ADDR
32647: GO 33224
32649: LD_INT 24
32651: DOUBLE
32652: EQUAL
32653: IFTRUE 32657
32655: GO 32683
32657: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32658: LD_ADDR_VAR 0 3
32662: PUSH
32663: LD_INT 11
32665: PUSH
32666: LD_INT 12
32668: PUSH
32669: LD_INT 13
32671: PUSH
32672: LD_INT 14
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: ST_TO_ADDR
32681: GO 33224
32683: LD_INT 30
32685: DOUBLE
32686: EQUAL
32687: IFTRUE 32691
32689: GO 32717
32691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32692: LD_ADDR_VAR 0 3
32696: PUSH
32697: LD_INT 11
32699: PUSH
32700: LD_INT 12
32702: PUSH
32703: LD_INT 13
32705: PUSH
32706: LD_INT 14
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: ST_TO_ADDR
32715: GO 33224
32717: LD_INT 25
32719: DOUBLE
32720: EQUAL
32721: IFTRUE 32725
32723: GO 32743
32725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32726: LD_ADDR_VAR 0 3
32730: PUSH
32731: LD_INT 13
32733: PUSH
32734: LD_INT 14
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: ST_TO_ADDR
32741: GO 33224
32743: LD_INT 27
32745: DOUBLE
32746: EQUAL
32747: IFTRUE 32751
32749: GO 32769
32751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32752: LD_ADDR_VAR 0 3
32756: PUSH
32757: LD_INT 13
32759: PUSH
32760: LD_INT 14
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: ST_TO_ADDR
32767: GO 33224
32769: LD_INT 92
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32777
32775: GO 32803
32777: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32778: LD_ADDR_VAR 0 3
32782: PUSH
32783: LD_INT 11
32785: PUSH
32786: LD_INT 12
32788: PUSH
32789: LD_INT 13
32791: PUSH
32792: LD_INT 14
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: ST_TO_ADDR
32801: GO 33224
32803: LD_INT 28
32805: DOUBLE
32806: EQUAL
32807: IFTRUE 32811
32809: GO 32829
32811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32812: LD_ADDR_VAR 0 3
32816: PUSH
32817: LD_INT 13
32819: PUSH
32820: LD_INT 14
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: ST_TO_ADDR
32827: GO 33224
32829: LD_INT 29
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32837
32835: GO 32855
32837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32838: LD_ADDR_VAR 0 3
32842: PUSH
32843: LD_INT 13
32845: PUSH
32846: LD_INT 14
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: ST_TO_ADDR
32853: GO 33224
32855: LD_INT 31
32857: DOUBLE
32858: EQUAL
32859: IFTRUE 32863
32861: GO 32881
32863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32864: LD_ADDR_VAR 0 3
32868: PUSH
32869: LD_INT 13
32871: PUSH
32872: LD_INT 14
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: ST_TO_ADDR
32879: GO 33224
32881: LD_INT 26
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 32907
32889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32890: LD_ADDR_VAR 0 3
32894: PUSH
32895: LD_INT 13
32897: PUSH
32898: LD_INT 14
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: ST_TO_ADDR
32905: GO 33224
32907: LD_INT 42
32909: DOUBLE
32910: EQUAL
32911: IFTRUE 32915
32913: GO 32941
32915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32916: LD_ADDR_VAR 0 3
32920: PUSH
32921: LD_INT 21
32923: PUSH
32924: LD_INT 22
32926: PUSH
32927: LD_INT 23
32929: PUSH
32930: LD_INT 24
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: ST_TO_ADDR
32939: GO 33224
32941: LD_INT 43
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 32975
32949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_INT 21
32957: PUSH
32958: LD_INT 22
32960: PUSH
32961: LD_INT 23
32963: PUSH
32964: LD_INT 24
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: ST_TO_ADDR
32973: GO 33224
32975: LD_INT 44
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 33009
32983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32984: LD_ADDR_VAR 0 3
32988: PUSH
32989: LD_INT 21
32991: PUSH
32992: LD_INT 22
32994: PUSH
32995: LD_INT 23
32997: PUSH
32998: LD_INT 24
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: ST_TO_ADDR
33007: GO 33224
33009: LD_INT 45
33011: DOUBLE
33012: EQUAL
33013: IFTRUE 33017
33015: GO 33043
33017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33018: LD_ADDR_VAR 0 3
33022: PUSH
33023: LD_INT 21
33025: PUSH
33026: LD_INT 22
33028: PUSH
33029: LD_INT 23
33031: PUSH
33032: LD_INT 24
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: ST_TO_ADDR
33041: GO 33224
33043: LD_INT 49
33045: DOUBLE
33046: EQUAL
33047: IFTRUE 33051
33049: GO 33077
33051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33052: LD_ADDR_VAR 0 3
33056: PUSH
33057: LD_INT 21
33059: PUSH
33060: LD_INT 22
33062: PUSH
33063: LD_INT 23
33065: PUSH
33066: LD_INT 24
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: ST_TO_ADDR
33075: GO 33224
33077: LD_INT 51
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33085
33083: GO 33111
33085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33086: LD_ADDR_VAR 0 3
33090: PUSH
33091: LD_INT 21
33093: PUSH
33094: LD_INT 22
33096: PUSH
33097: LD_INT 23
33099: PUSH
33100: LD_INT 24
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: ST_TO_ADDR
33109: GO 33224
33111: LD_INT 52
33113: DOUBLE
33114: EQUAL
33115: IFTRUE 33119
33117: GO 33145
33119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33120: LD_ADDR_VAR 0 3
33124: PUSH
33125: LD_INT 21
33127: PUSH
33128: LD_INT 22
33130: PUSH
33131: LD_INT 23
33133: PUSH
33134: LD_INT 24
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: ST_TO_ADDR
33143: GO 33224
33145: LD_INT 53
33147: DOUBLE
33148: EQUAL
33149: IFTRUE 33153
33151: GO 33171
33153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33154: LD_ADDR_VAR 0 3
33158: PUSH
33159: LD_INT 23
33161: PUSH
33162: LD_INT 24
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: ST_TO_ADDR
33169: GO 33224
33171: LD_INT 46
33173: DOUBLE
33174: EQUAL
33175: IFTRUE 33179
33177: GO 33197
33179: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33180: LD_ADDR_VAR 0 3
33184: PUSH
33185: LD_INT 23
33187: PUSH
33188: LD_INT 24
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: ST_TO_ADDR
33195: GO 33224
33197: LD_INT 47
33199: DOUBLE
33200: EQUAL
33201: IFTRUE 33205
33203: GO 33223
33205: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33206: LD_ADDR_VAR 0 3
33210: PUSH
33211: LD_INT 23
33213: PUSH
33214: LD_INT 24
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: ST_TO_ADDR
33221: GO 33224
33223: POP
// result := ( chassis in result ) ;
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_VAR 0 1
33233: PUSH
33234: LD_VAR 0 3
33238: IN
33239: ST_TO_ADDR
// end ;
33240: LD_VAR 0 3
33244: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33245: LD_INT 0
33247: PPUSH
33248: PPUSH
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
// result := array ;
33254: LD_ADDR_VAR 0 5
33258: PUSH
33259: LD_VAR 0 1
33263: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33264: LD_VAR 0 1
33268: NOT
33269: PUSH
33270: LD_VAR 0 2
33274: NOT
33275: OR
33276: PUSH
33277: LD_VAR 0 3
33281: NOT
33282: OR
33283: PUSH
33284: LD_VAR 0 2
33288: PUSH
33289: LD_VAR 0 1
33293: GREATER
33294: OR
33295: PUSH
33296: LD_VAR 0 3
33300: PUSH
33301: LD_VAR 0 1
33305: GREATER
33306: OR
33307: IFFALSE 33311
// exit ;
33309: GO 33607
// if direction then
33311: LD_VAR 0 4
33315: IFFALSE 33379
// begin d := 1 ;
33317: LD_ADDR_VAR 0 9
33321: PUSH
33322: LD_INT 1
33324: ST_TO_ADDR
// if i_from > i_to then
33325: LD_VAR 0 2
33329: PUSH
33330: LD_VAR 0 3
33334: GREATER
33335: IFFALSE 33361
// length := ( array - i_from ) + i_to else
33337: LD_ADDR_VAR 0 11
33341: PUSH
33342: LD_VAR 0 1
33346: PUSH
33347: LD_VAR 0 2
33351: MINUS
33352: PUSH
33353: LD_VAR 0 3
33357: PLUS
33358: ST_TO_ADDR
33359: GO 33377
// length := i_to - i_from ;
33361: LD_ADDR_VAR 0 11
33365: PUSH
33366: LD_VAR 0 3
33370: PUSH
33371: LD_VAR 0 2
33375: MINUS
33376: ST_TO_ADDR
// end else
33377: GO 33440
// begin d := - 1 ;
33379: LD_ADDR_VAR 0 9
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: ST_TO_ADDR
// if i_from > i_to then
33388: LD_VAR 0 2
33392: PUSH
33393: LD_VAR 0 3
33397: GREATER
33398: IFFALSE 33418
// length := i_from - i_to else
33400: LD_ADDR_VAR 0 11
33404: PUSH
33405: LD_VAR 0 2
33409: PUSH
33410: LD_VAR 0 3
33414: MINUS
33415: ST_TO_ADDR
33416: GO 33440
// length := ( array - i_to ) + i_from ;
33418: LD_ADDR_VAR 0 11
33422: PUSH
33423: LD_VAR 0 1
33427: PUSH
33428: LD_VAR 0 3
33432: MINUS
33433: PUSH
33434: LD_VAR 0 2
33438: PLUS
33439: ST_TO_ADDR
// end ; if not length then
33440: LD_VAR 0 11
33444: NOT
33445: IFFALSE 33449
// exit ;
33447: GO 33607
// tmp := array ;
33449: LD_ADDR_VAR 0 10
33453: PUSH
33454: LD_VAR 0 1
33458: ST_TO_ADDR
// for i = 1 to length do
33459: LD_ADDR_VAR 0 6
33463: PUSH
33464: DOUBLE
33465: LD_INT 1
33467: DEC
33468: ST_TO_ADDR
33469: LD_VAR 0 11
33473: PUSH
33474: FOR_TO
33475: IFFALSE 33595
// begin for j = 1 to array do
33477: LD_ADDR_VAR 0 7
33481: PUSH
33482: DOUBLE
33483: LD_INT 1
33485: DEC
33486: ST_TO_ADDR
33487: LD_VAR 0 1
33491: PUSH
33492: FOR_TO
33493: IFFALSE 33581
// begin k := j + d ;
33495: LD_ADDR_VAR 0 8
33499: PUSH
33500: LD_VAR 0 7
33504: PUSH
33505: LD_VAR 0 9
33509: PLUS
33510: ST_TO_ADDR
// if k > array then
33511: LD_VAR 0 8
33515: PUSH
33516: LD_VAR 0 1
33520: GREATER
33521: IFFALSE 33531
// k := 1 ;
33523: LD_ADDR_VAR 0 8
33527: PUSH
33528: LD_INT 1
33530: ST_TO_ADDR
// if not k then
33531: LD_VAR 0 8
33535: NOT
33536: IFFALSE 33548
// k := array ;
33538: LD_ADDR_VAR 0 8
33542: PUSH
33543: LD_VAR 0 1
33547: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33548: LD_ADDR_VAR 0 10
33552: PUSH
33553: LD_VAR 0 10
33557: PPUSH
33558: LD_VAR 0 8
33562: PPUSH
33563: LD_VAR 0 1
33567: PUSH
33568: LD_VAR 0 7
33572: ARRAY
33573: PPUSH
33574: CALL_OW 1
33578: ST_TO_ADDR
// end ;
33579: GO 33492
33581: POP
33582: POP
// array := tmp ;
33583: LD_ADDR_VAR 0 1
33587: PUSH
33588: LD_VAR 0 10
33592: ST_TO_ADDR
// end ;
33593: GO 33474
33595: POP
33596: POP
// result := array ;
33597: LD_ADDR_VAR 0 5
33601: PUSH
33602: LD_VAR 0 1
33606: ST_TO_ADDR
// end ;
33607: LD_VAR 0 5
33611: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33612: LD_INT 0
33614: PPUSH
33615: PPUSH
// result := 0 ;
33616: LD_ADDR_VAR 0 3
33620: PUSH
33621: LD_INT 0
33623: ST_TO_ADDR
// if not array or not value in array then
33624: LD_VAR 0 1
33628: NOT
33629: PUSH
33630: LD_VAR 0 2
33634: PUSH
33635: LD_VAR 0 1
33639: IN
33640: NOT
33641: OR
33642: IFFALSE 33646
// exit ;
33644: GO 33700
// for i = 1 to array do
33646: LD_ADDR_VAR 0 4
33650: PUSH
33651: DOUBLE
33652: LD_INT 1
33654: DEC
33655: ST_TO_ADDR
33656: LD_VAR 0 1
33660: PUSH
33661: FOR_TO
33662: IFFALSE 33698
// if value = array [ i ] then
33664: LD_VAR 0 2
33668: PUSH
33669: LD_VAR 0 1
33673: PUSH
33674: LD_VAR 0 4
33678: ARRAY
33679: EQUAL
33680: IFFALSE 33696
// begin result := i ;
33682: LD_ADDR_VAR 0 3
33686: PUSH
33687: LD_VAR 0 4
33691: ST_TO_ADDR
// exit ;
33692: POP
33693: POP
33694: GO 33700
// end ;
33696: GO 33661
33698: POP
33699: POP
// end ;
33700: LD_VAR 0 3
33704: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33705: LD_INT 0
33707: PPUSH
// vc_chassis := chassis ;
33708: LD_ADDR_OWVAR 37
33712: PUSH
33713: LD_VAR 0 1
33717: ST_TO_ADDR
// vc_engine := engine ;
33718: LD_ADDR_OWVAR 39
33722: PUSH
33723: LD_VAR 0 2
33727: ST_TO_ADDR
// vc_control := control ;
33728: LD_ADDR_OWVAR 38
33732: PUSH
33733: LD_VAR 0 3
33737: ST_TO_ADDR
// vc_weapon := weapon ;
33738: LD_ADDR_OWVAR 40
33742: PUSH
33743: LD_VAR 0 4
33747: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33748: LD_ADDR_OWVAR 41
33752: PUSH
33753: LD_VAR 0 5
33757: ST_TO_ADDR
// end ;
33758: LD_VAR 0 6
33762: RET
// export function WantPlant ( unit ) ; var task ; begin
33763: LD_INT 0
33765: PPUSH
33766: PPUSH
// result := false ;
33767: LD_ADDR_VAR 0 2
33771: PUSH
33772: LD_INT 0
33774: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33775: LD_ADDR_VAR 0 3
33779: PUSH
33780: LD_VAR 0 1
33784: PPUSH
33785: CALL_OW 437
33789: ST_TO_ADDR
// if task then
33790: LD_VAR 0 3
33794: IFFALSE 33822
// if task [ 1 ] [ 1 ] = p then
33796: LD_VAR 0 3
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: PUSH
33805: LD_INT 1
33807: ARRAY
33808: PUSH
33809: LD_STRING p
33811: EQUAL
33812: IFFALSE 33822
// result := true ;
33814: LD_ADDR_VAR 0 2
33818: PUSH
33819: LD_INT 1
33821: ST_TO_ADDR
// end ;
33822: LD_VAR 0 2
33826: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33827: LD_INT 0
33829: PPUSH
33830: PPUSH
33831: PPUSH
33832: PPUSH
// if pos < 1 then
33833: LD_VAR 0 2
33837: PUSH
33838: LD_INT 1
33840: LESS
33841: IFFALSE 33845
// exit ;
33843: GO 34148
// if pos = 1 then
33845: LD_VAR 0 2
33849: PUSH
33850: LD_INT 1
33852: EQUAL
33853: IFFALSE 33886
// result := Replace ( arr , pos [ 1 ] , value ) else
33855: LD_ADDR_VAR 0 4
33859: PUSH
33860: LD_VAR 0 1
33864: PPUSH
33865: LD_VAR 0 2
33869: PUSH
33870: LD_INT 1
33872: ARRAY
33873: PPUSH
33874: LD_VAR 0 3
33878: PPUSH
33879: CALL_OW 1
33883: ST_TO_ADDR
33884: GO 34148
// begin tmp := arr ;
33886: LD_ADDR_VAR 0 6
33890: PUSH
33891: LD_VAR 0 1
33895: ST_TO_ADDR
// s_arr := [ tmp ] ;
33896: LD_ADDR_VAR 0 7
33900: PUSH
33901: LD_VAR 0 6
33905: PUSH
33906: EMPTY
33907: LIST
33908: ST_TO_ADDR
// for i = 1 to pos - 1 do
33909: LD_ADDR_VAR 0 5
33913: PUSH
33914: DOUBLE
33915: LD_INT 1
33917: DEC
33918: ST_TO_ADDR
33919: LD_VAR 0 2
33923: PUSH
33924: LD_INT 1
33926: MINUS
33927: PUSH
33928: FOR_TO
33929: IFFALSE 33974
// begin tmp := tmp [ pos [ i ] ] ;
33931: LD_ADDR_VAR 0 6
33935: PUSH
33936: LD_VAR 0 6
33940: PUSH
33941: LD_VAR 0 2
33945: PUSH
33946: LD_VAR 0 5
33950: ARRAY
33951: ARRAY
33952: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33953: LD_ADDR_VAR 0 7
33957: PUSH
33958: LD_VAR 0 7
33962: PUSH
33963: LD_VAR 0 6
33967: PUSH
33968: EMPTY
33969: LIST
33970: ADD
33971: ST_TO_ADDR
// end ;
33972: GO 33928
33974: POP
33975: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33976: LD_ADDR_VAR 0 6
33980: PUSH
33981: LD_VAR 0 6
33985: PPUSH
33986: LD_VAR 0 2
33990: PUSH
33991: LD_VAR 0 2
33995: ARRAY
33996: PPUSH
33997: LD_VAR 0 3
34001: PPUSH
34002: CALL_OW 1
34006: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34007: LD_ADDR_VAR 0 7
34011: PUSH
34012: LD_VAR 0 7
34016: PPUSH
34017: LD_VAR 0 7
34021: PPUSH
34022: LD_VAR 0 6
34026: PPUSH
34027: CALL_OW 1
34031: ST_TO_ADDR
// for i = s_arr downto 2 do
34032: LD_ADDR_VAR 0 5
34036: PUSH
34037: DOUBLE
34038: LD_VAR 0 7
34042: INC
34043: ST_TO_ADDR
34044: LD_INT 2
34046: PUSH
34047: FOR_DOWNTO
34048: IFFALSE 34132
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34050: LD_ADDR_VAR 0 6
34054: PUSH
34055: LD_VAR 0 7
34059: PUSH
34060: LD_VAR 0 5
34064: PUSH
34065: LD_INT 1
34067: MINUS
34068: ARRAY
34069: PPUSH
34070: LD_VAR 0 2
34074: PUSH
34075: LD_VAR 0 5
34079: PUSH
34080: LD_INT 1
34082: MINUS
34083: ARRAY
34084: PPUSH
34085: LD_VAR 0 7
34089: PUSH
34090: LD_VAR 0 5
34094: ARRAY
34095: PPUSH
34096: CALL_OW 1
34100: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34101: LD_ADDR_VAR 0 7
34105: PUSH
34106: LD_VAR 0 7
34110: PPUSH
34111: LD_VAR 0 5
34115: PUSH
34116: LD_INT 1
34118: MINUS
34119: PPUSH
34120: LD_VAR 0 6
34124: PPUSH
34125: CALL_OW 1
34129: ST_TO_ADDR
// end ;
34130: GO 34047
34132: POP
34133: POP
// result := s_arr [ 1 ] ;
34134: LD_ADDR_VAR 0 4
34138: PUSH
34139: LD_VAR 0 7
34143: PUSH
34144: LD_INT 1
34146: ARRAY
34147: ST_TO_ADDR
// end ; end ;
34148: LD_VAR 0 4
34152: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34153: LD_INT 0
34155: PPUSH
34156: PPUSH
// if not list then
34157: LD_VAR 0 1
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 34257
// i := list [ pos1 ] ;
34166: LD_ADDR_VAR 0 5
34170: PUSH
34171: LD_VAR 0 1
34175: PUSH
34176: LD_VAR 0 2
34180: ARRAY
34181: ST_TO_ADDR
// if not i then
34182: LD_VAR 0 5
34186: NOT
34187: IFFALSE 34191
// exit ;
34189: GO 34257
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34191: LD_ADDR_VAR 0 1
34195: PUSH
34196: LD_VAR 0 1
34200: PPUSH
34201: LD_VAR 0 2
34205: PPUSH
34206: LD_VAR 0 1
34210: PUSH
34211: LD_VAR 0 3
34215: ARRAY
34216: PPUSH
34217: CALL_OW 1
34221: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34222: LD_ADDR_VAR 0 1
34226: PUSH
34227: LD_VAR 0 1
34231: PPUSH
34232: LD_VAR 0 3
34236: PPUSH
34237: LD_VAR 0 5
34241: PPUSH
34242: CALL_OW 1
34246: ST_TO_ADDR
// result := list ;
34247: LD_ADDR_VAR 0 4
34251: PUSH
34252: LD_VAR 0 1
34256: ST_TO_ADDR
// end ;
34257: LD_VAR 0 4
34261: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34262: LD_INT 0
34264: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34265: LD_ADDR_VAR 0 5
34269: PUSH
34270: LD_VAR 0 1
34274: PPUSH
34275: CALL_OW 250
34279: PPUSH
34280: LD_VAR 0 1
34284: PPUSH
34285: CALL_OW 251
34289: PPUSH
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 3
34299: PPUSH
34300: LD_VAR 0 4
34304: PPUSH
34305: CALL 34315 0 5
34309: ST_TO_ADDR
// end ;
34310: LD_VAR 0 5
34314: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34315: LD_INT 0
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
// if not list then
34321: LD_VAR 0 3
34325: NOT
34326: IFFALSE 34330
// exit ;
34328: GO 34718
// result := [ ] ;
34330: LD_ADDR_VAR 0 6
34334: PUSH
34335: EMPTY
34336: ST_TO_ADDR
// for i in list do
34337: LD_ADDR_VAR 0 7
34341: PUSH
34342: LD_VAR 0 3
34346: PUSH
34347: FOR_IN
34348: IFFALSE 34550
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34350: LD_ADDR_VAR 0 9
34354: PUSH
34355: LD_VAR 0 7
34359: PPUSH
34360: LD_VAR 0 1
34364: PPUSH
34365: LD_VAR 0 2
34369: PPUSH
34370: CALL_OW 297
34374: ST_TO_ADDR
// if not result then
34375: LD_VAR 0 6
34379: NOT
34380: IFFALSE 34406
// result := [ [ i , tmp ] ] else
34382: LD_ADDR_VAR 0 6
34386: PUSH
34387: LD_VAR 0 7
34391: PUSH
34392: LD_VAR 0 9
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: EMPTY
34402: LIST
34403: ST_TO_ADDR
34404: GO 34548
// begin if result [ result ] [ 2 ] < tmp then
34406: LD_VAR 0 6
34410: PUSH
34411: LD_VAR 0 6
34415: ARRAY
34416: PUSH
34417: LD_INT 2
34419: ARRAY
34420: PUSH
34421: LD_VAR 0 9
34425: LESS
34426: IFFALSE 34468
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34428: LD_ADDR_VAR 0 6
34432: PUSH
34433: LD_VAR 0 6
34437: PPUSH
34438: LD_VAR 0 6
34442: PUSH
34443: LD_INT 1
34445: PLUS
34446: PPUSH
34447: LD_VAR 0 7
34451: PUSH
34452: LD_VAR 0 9
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PPUSH
34461: CALL_OW 2
34465: ST_TO_ADDR
34466: GO 34548
// for j = 1 to result do
34468: LD_ADDR_VAR 0 8
34472: PUSH
34473: DOUBLE
34474: LD_INT 1
34476: DEC
34477: ST_TO_ADDR
34478: LD_VAR 0 6
34482: PUSH
34483: FOR_TO
34484: IFFALSE 34546
// begin if tmp < result [ j ] [ 2 ] then
34486: LD_VAR 0 9
34490: PUSH
34491: LD_VAR 0 6
34495: PUSH
34496: LD_VAR 0 8
34500: ARRAY
34501: PUSH
34502: LD_INT 2
34504: ARRAY
34505: LESS
34506: IFFALSE 34544
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34508: LD_ADDR_VAR 0 6
34512: PUSH
34513: LD_VAR 0 6
34517: PPUSH
34518: LD_VAR 0 8
34522: PPUSH
34523: LD_VAR 0 7
34527: PUSH
34528: LD_VAR 0 9
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PPUSH
34537: CALL_OW 2
34541: ST_TO_ADDR
// break ;
34542: GO 34546
// end ; end ;
34544: GO 34483
34546: POP
34547: POP
// end ; end ;
34548: GO 34347
34550: POP
34551: POP
// if result and not asc then
34552: LD_VAR 0 6
34556: PUSH
34557: LD_VAR 0 4
34561: NOT
34562: AND
34563: IFFALSE 34638
// begin tmp := result ;
34565: LD_ADDR_VAR 0 9
34569: PUSH
34570: LD_VAR 0 6
34574: ST_TO_ADDR
// for i = tmp downto 1 do
34575: LD_ADDR_VAR 0 7
34579: PUSH
34580: DOUBLE
34581: LD_VAR 0 9
34585: INC
34586: ST_TO_ADDR
34587: LD_INT 1
34589: PUSH
34590: FOR_DOWNTO
34591: IFFALSE 34636
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34593: LD_ADDR_VAR 0 6
34597: PUSH
34598: LD_VAR 0 6
34602: PPUSH
34603: LD_VAR 0 9
34607: PUSH
34608: LD_VAR 0 7
34612: MINUS
34613: PUSH
34614: LD_INT 1
34616: PLUS
34617: PPUSH
34618: LD_VAR 0 9
34622: PUSH
34623: LD_VAR 0 7
34627: ARRAY
34628: PPUSH
34629: CALL_OW 1
34633: ST_TO_ADDR
34634: GO 34590
34636: POP
34637: POP
// end ; tmp := [ ] ;
34638: LD_ADDR_VAR 0 9
34642: PUSH
34643: EMPTY
34644: ST_TO_ADDR
// if mode then
34645: LD_VAR 0 5
34649: IFFALSE 34718
// begin for i = 1 to result do
34651: LD_ADDR_VAR 0 7
34655: PUSH
34656: DOUBLE
34657: LD_INT 1
34659: DEC
34660: ST_TO_ADDR
34661: LD_VAR 0 6
34665: PUSH
34666: FOR_TO
34667: IFFALSE 34706
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34669: LD_ADDR_VAR 0 9
34673: PUSH
34674: LD_VAR 0 9
34678: PPUSH
34679: LD_VAR 0 7
34683: PPUSH
34684: LD_VAR 0 6
34688: PUSH
34689: LD_VAR 0 7
34693: ARRAY
34694: PUSH
34695: LD_INT 1
34697: ARRAY
34698: PPUSH
34699: CALL_OW 1
34703: ST_TO_ADDR
34704: GO 34666
34706: POP
34707: POP
// result := tmp ;
34708: LD_ADDR_VAR 0 6
34712: PUSH
34713: LD_VAR 0 9
34717: ST_TO_ADDR
// end ; end ;
34718: LD_VAR 0 6
34722: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34723: LD_INT 0
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34731: LD_ADDR_VAR 0 5
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: EMPTY
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: ST_TO_ADDR
// if not x or not y then
34753: LD_VAR 0 2
34757: NOT
34758: PUSH
34759: LD_VAR 0 3
34763: NOT
34764: OR
34765: IFFALSE 34769
// exit ;
34767: GO 36419
// if not range then
34769: LD_VAR 0 4
34773: NOT
34774: IFFALSE 34784
// range := 10 ;
34776: LD_ADDR_VAR 0 4
34780: PUSH
34781: LD_INT 10
34783: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34784: LD_ADDR_VAR 0 8
34788: PUSH
34789: LD_INT 81
34791: PUSH
34792: LD_VAR 0 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 92
34803: PUSH
34804: LD_VAR 0 2
34808: PUSH
34809: LD_VAR 0 3
34813: PUSH
34814: LD_VAR 0 4
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: LD_INT 21
34830: PUSH
34831: LD_INT 3
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: PPUSH
34847: CALL_OW 69
34851: ST_TO_ADDR
// if not tmp then
34852: LD_VAR 0 8
34856: NOT
34857: IFFALSE 34861
// exit ;
34859: GO 36419
// for i in tmp do
34861: LD_ADDR_VAR 0 6
34865: PUSH
34866: LD_VAR 0 8
34870: PUSH
34871: FOR_IN
34872: IFFALSE 36394
// begin points := [ 0 , 0 , 0 ] ;
34874: LD_ADDR_VAR 0 9
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: ST_TO_ADDR
// bpoints := 1 ;
34893: LD_ADDR_VAR 0 10
34897: PUSH
34898: LD_INT 1
34900: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34901: LD_VAR 0 6
34905: PPUSH
34906: CALL_OW 247
34910: PUSH
34911: LD_INT 1
34913: DOUBLE
34914: EQUAL
34915: IFTRUE 34919
34917: GO 35497
34919: POP
// begin if GetClass ( i ) = 1 then
34920: LD_VAR 0 6
34924: PPUSH
34925: CALL_OW 257
34929: PUSH
34930: LD_INT 1
34932: EQUAL
34933: IFFALSE 34954
// points := [ 10 , 5 , 3 ] ;
34935: LD_ADDR_VAR 0 9
34939: PUSH
34940: LD_INT 10
34942: PUSH
34943: LD_INT 5
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34954: LD_VAR 0 6
34958: PPUSH
34959: CALL_OW 257
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: LD_INT 4
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: IN
34978: IFFALSE 34999
// points := [ 3 , 2 , 1 ] ;
34980: LD_ADDR_VAR 0 9
34984: PUSH
34985: LD_INT 3
34987: PUSH
34988: LD_INT 2
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34999: LD_VAR 0 6
35003: PPUSH
35004: CALL_OW 257
35008: PUSH
35009: LD_INT 5
35011: EQUAL
35012: IFFALSE 35033
// points := [ 130 , 5 , 2 ] ;
35014: LD_ADDR_VAR 0 9
35018: PUSH
35019: LD_INT 130
35021: PUSH
35022: LD_INT 5
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35033: LD_VAR 0 6
35037: PPUSH
35038: CALL_OW 257
35042: PUSH
35043: LD_INT 8
35045: EQUAL
35046: IFFALSE 35067
// points := [ 35 , 35 , 30 ] ;
35048: LD_ADDR_VAR 0 9
35052: PUSH
35053: LD_INT 35
35055: PUSH
35056: LD_INT 35
35058: PUSH
35059: LD_INT 30
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35067: LD_VAR 0 6
35071: PPUSH
35072: CALL_OW 257
35076: PUSH
35077: LD_INT 9
35079: EQUAL
35080: IFFALSE 35101
// points := [ 20 , 55 , 40 ] ;
35082: LD_ADDR_VAR 0 9
35086: PUSH
35087: LD_INT 20
35089: PUSH
35090: LD_INT 55
35092: PUSH
35093: LD_INT 40
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35101: LD_VAR 0 6
35105: PPUSH
35106: CALL_OW 257
35110: PUSH
35111: LD_INT 12
35113: PUSH
35114: LD_INT 16
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: IN
35121: IFFALSE 35142
// points := [ 5 , 3 , 2 ] ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_INT 5
35130: PUSH
35131: LD_INT 3
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35142: LD_VAR 0 6
35146: PPUSH
35147: CALL_OW 257
35151: PUSH
35152: LD_INT 17
35154: EQUAL
35155: IFFALSE 35176
// points := [ 100 , 50 , 75 ] ;
35157: LD_ADDR_VAR 0 9
35161: PUSH
35162: LD_INT 100
35164: PUSH
35165: LD_INT 50
35167: PUSH
35168: LD_INT 75
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35176: LD_VAR 0 6
35180: PPUSH
35181: CALL_OW 257
35185: PUSH
35186: LD_INT 15
35188: EQUAL
35189: IFFALSE 35210
// points := [ 10 , 5 , 3 ] ;
35191: LD_ADDR_VAR 0 9
35195: PUSH
35196: LD_INT 10
35198: PUSH
35199: LD_INT 5
35201: PUSH
35202: LD_INT 3
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35210: LD_VAR 0 6
35214: PPUSH
35215: CALL_OW 257
35219: PUSH
35220: LD_INT 14
35222: EQUAL
35223: IFFALSE 35244
// points := [ 10 , 0 , 0 ] ;
35225: LD_ADDR_VAR 0 9
35229: PUSH
35230: LD_INT 10
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35244: LD_VAR 0 6
35248: PPUSH
35249: CALL_OW 257
35253: PUSH
35254: LD_INT 11
35256: EQUAL
35257: IFFALSE 35278
// points := [ 30 , 10 , 5 ] ;
35259: LD_ADDR_VAR 0 9
35263: PUSH
35264: LD_INT 30
35266: PUSH
35267: LD_INT 10
35269: PUSH
35270: LD_INT 5
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35278: LD_VAR 0 1
35282: PPUSH
35283: LD_INT 5
35285: PPUSH
35286: CALL_OW 321
35290: PUSH
35291: LD_INT 2
35293: EQUAL
35294: IFFALSE 35311
// bpoints := bpoints * 1.8 ;
35296: LD_ADDR_VAR 0 10
35300: PUSH
35301: LD_VAR 0 10
35305: PUSH
35306: LD_REAL  1.80000000000000E+0000
35309: MUL
35310: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35311: LD_VAR 0 6
35315: PPUSH
35316: CALL_OW 257
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: LD_INT 4
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: IN
35339: PUSH
35340: LD_VAR 0 1
35344: PPUSH
35345: LD_INT 51
35347: PPUSH
35348: CALL_OW 321
35352: PUSH
35353: LD_INT 2
35355: EQUAL
35356: AND
35357: IFFALSE 35374
// bpoints := bpoints * 1.2 ;
35359: LD_ADDR_VAR 0 10
35363: PUSH
35364: LD_VAR 0 10
35368: PUSH
35369: LD_REAL  1.20000000000000E+0000
35372: MUL
35373: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35374: LD_VAR 0 6
35378: PPUSH
35379: CALL_OW 257
35383: PUSH
35384: LD_INT 5
35386: PUSH
35387: LD_INT 7
35389: PUSH
35390: LD_INT 9
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: IN
35398: PUSH
35399: LD_VAR 0 1
35403: PPUSH
35404: LD_INT 52
35406: PPUSH
35407: CALL_OW 321
35411: PUSH
35412: LD_INT 2
35414: EQUAL
35415: AND
35416: IFFALSE 35433
// bpoints := bpoints * 1.5 ;
35418: LD_ADDR_VAR 0 10
35422: PUSH
35423: LD_VAR 0 10
35427: PUSH
35428: LD_REAL  1.50000000000000E+0000
35431: MUL
35432: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35433: LD_VAR 0 1
35437: PPUSH
35438: LD_INT 66
35440: PPUSH
35441: CALL_OW 321
35445: PUSH
35446: LD_INT 2
35448: EQUAL
35449: IFFALSE 35466
// bpoints := bpoints * 1.1 ;
35451: LD_ADDR_VAR 0 10
35455: PUSH
35456: LD_VAR 0 10
35460: PUSH
35461: LD_REAL  1.10000000000000E+0000
35464: MUL
35465: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35466: LD_ADDR_VAR 0 10
35470: PUSH
35471: LD_VAR 0 10
35475: PUSH
35476: LD_VAR 0 6
35480: PPUSH
35481: LD_INT 1
35483: PPUSH
35484: CALL_OW 259
35488: PUSH
35489: LD_REAL  1.15000000000000E+0000
35492: MUL
35493: MUL
35494: ST_TO_ADDR
// end ; unit_vehicle :
35495: GO 36323
35497: LD_INT 2
35499: DOUBLE
35500: EQUAL
35501: IFTRUE 35505
35503: GO 36311
35505: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35506: LD_VAR 0 6
35510: PPUSH
35511: CALL_OW 264
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: LD_INT 42
35521: PUSH
35522: LD_INT 24
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: IN
35530: IFFALSE 35551
// points := [ 25 , 5 , 3 ] ;
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_INT 25
35539: PUSH
35540: LD_INT 5
35542: PUSH
35543: LD_INT 3
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35551: LD_VAR 0 6
35555: PPUSH
35556: CALL_OW 264
35560: PUSH
35561: LD_INT 4
35563: PUSH
35564: LD_INT 43
35566: PUSH
35567: LD_INT 25
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: IN
35575: IFFALSE 35596
// points := [ 40 , 15 , 5 ] ;
35577: LD_ADDR_VAR 0 9
35581: PUSH
35582: LD_INT 40
35584: PUSH
35585: LD_INT 15
35587: PUSH
35588: LD_INT 5
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35596: LD_VAR 0 6
35600: PPUSH
35601: CALL_OW 264
35605: PUSH
35606: LD_INT 3
35608: PUSH
35609: LD_INT 23
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: IN
35616: IFFALSE 35637
// points := [ 7 , 25 , 8 ] ;
35618: LD_ADDR_VAR 0 9
35622: PUSH
35623: LD_INT 7
35625: PUSH
35626: LD_INT 25
35628: PUSH
35629: LD_INT 8
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35637: LD_VAR 0 6
35641: PPUSH
35642: CALL_OW 264
35646: PUSH
35647: LD_INT 5
35649: PUSH
35650: LD_INT 27
35652: PUSH
35653: LD_INT 44
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: IN
35661: IFFALSE 35682
// points := [ 14 , 50 , 16 ] ;
35663: LD_ADDR_VAR 0 9
35667: PUSH
35668: LD_INT 14
35670: PUSH
35671: LD_INT 50
35673: PUSH
35674: LD_INT 16
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35682: LD_VAR 0 6
35686: PPUSH
35687: CALL_OW 264
35691: PUSH
35692: LD_INT 6
35694: PUSH
35695: LD_INT 46
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: IN
35702: IFFALSE 35723
// points := [ 32 , 120 , 70 ] ;
35704: LD_ADDR_VAR 0 9
35708: PUSH
35709: LD_INT 32
35711: PUSH
35712: LD_INT 120
35714: PUSH
35715: LD_INT 70
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35723: LD_VAR 0 6
35727: PPUSH
35728: CALL_OW 264
35732: PUSH
35733: LD_INT 7
35735: PUSH
35736: LD_INT 28
35738: PUSH
35739: LD_INT 45
35741: PUSH
35742: LD_INT 92
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: IN
35751: IFFALSE 35772
// points := [ 35 , 20 , 45 ] ;
35753: LD_ADDR_VAR 0 9
35757: PUSH
35758: LD_INT 35
35760: PUSH
35761: LD_INT 20
35763: PUSH
35764: LD_INT 45
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: LIST
35771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35772: LD_VAR 0 6
35776: PPUSH
35777: CALL_OW 264
35781: PUSH
35782: LD_INT 47
35784: PUSH
35785: EMPTY
35786: LIST
35787: IN
35788: IFFALSE 35809
// points := [ 67 , 45 , 75 ] ;
35790: LD_ADDR_VAR 0 9
35794: PUSH
35795: LD_INT 67
35797: PUSH
35798: LD_INT 45
35800: PUSH
35801: LD_INT 75
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35809: LD_VAR 0 6
35813: PPUSH
35814: CALL_OW 264
35818: PUSH
35819: LD_INT 26
35821: PUSH
35822: EMPTY
35823: LIST
35824: IN
35825: IFFALSE 35846
// points := [ 120 , 30 , 80 ] ;
35827: LD_ADDR_VAR 0 9
35831: PUSH
35832: LD_INT 120
35834: PUSH
35835: LD_INT 30
35837: PUSH
35838: LD_INT 80
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35846: LD_VAR 0 6
35850: PPUSH
35851: CALL_OW 264
35855: PUSH
35856: LD_INT 22
35858: PUSH
35859: EMPTY
35860: LIST
35861: IN
35862: IFFALSE 35883
// points := [ 40 , 1 , 1 ] ;
35864: LD_ADDR_VAR 0 9
35868: PUSH
35869: LD_INT 40
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35883: LD_VAR 0 6
35887: PPUSH
35888: CALL_OW 264
35892: PUSH
35893: LD_INT 29
35895: PUSH
35896: EMPTY
35897: LIST
35898: IN
35899: IFFALSE 35920
// points := [ 70 , 200 , 400 ] ;
35901: LD_ADDR_VAR 0 9
35905: PUSH
35906: LD_INT 70
35908: PUSH
35909: LD_INT 200
35911: PUSH
35912: LD_INT 400
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35920: LD_VAR 0 6
35924: PPUSH
35925: CALL_OW 264
35929: PUSH
35930: LD_INT 14
35932: PUSH
35933: LD_INT 53
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: IN
35940: IFFALSE 35961
// points := [ 40 , 10 , 20 ] ;
35942: LD_ADDR_VAR 0 9
35946: PUSH
35947: LD_INT 40
35949: PUSH
35950: LD_INT 10
35952: PUSH
35953: LD_INT 20
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35961: LD_VAR 0 6
35965: PPUSH
35966: CALL_OW 264
35970: PUSH
35971: LD_INT 9
35973: PUSH
35974: EMPTY
35975: LIST
35976: IN
35977: IFFALSE 35998
// points := [ 5 , 70 , 20 ] ;
35979: LD_ADDR_VAR 0 9
35983: PUSH
35984: LD_INT 5
35986: PUSH
35987: LD_INT 70
35989: PUSH
35990: LD_INT 20
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35998: LD_VAR 0 6
36002: PPUSH
36003: CALL_OW 264
36007: PUSH
36008: LD_INT 10
36010: PUSH
36011: EMPTY
36012: LIST
36013: IN
36014: IFFALSE 36035
// points := [ 35 , 110 , 70 ] ;
36016: LD_ADDR_VAR 0 9
36020: PUSH
36021: LD_INT 35
36023: PUSH
36024: LD_INT 110
36026: PUSH
36027: LD_INT 70
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36035: LD_VAR 0 6
36039: PPUSH
36040: CALL_OW 265
36044: PUSH
36045: LD_INT 25
36047: EQUAL
36048: IFFALSE 36069
// points := [ 80 , 65 , 100 ] ;
36050: LD_ADDR_VAR 0 9
36054: PUSH
36055: LD_INT 80
36057: PUSH
36058: LD_INT 65
36060: PUSH
36061: LD_INT 100
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: LIST
36068: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36069: LD_VAR 0 6
36073: PPUSH
36074: CALL_OW 263
36078: PUSH
36079: LD_INT 1
36081: EQUAL
36082: IFFALSE 36117
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36084: LD_ADDR_VAR 0 10
36088: PUSH
36089: LD_VAR 0 10
36093: PUSH
36094: LD_VAR 0 6
36098: PPUSH
36099: CALL_OW 311
36103: PPUSH
36104: LD_INT 3
36106: PPUSH
36107: CALL_OW 259
36111: PUSH
36112: LD_INT 4
36114: MUL
36115: MUL
36116: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36117: LD_VAR 0 6
36121: PPUSH
36122: CALL_OW 263
36126: PUSH
36127: LD_INT 2
36129: EQUAL
36130: IFFALSE 36181
// begin j := IsControledBy ( i ) ;
36132: LD_ADDR_VAR 0 7
36136: PUSH
36137: LD_VAR 0 6
36141: PPUSH
36142: CALL_OW 312
36146: ST_TO_ADDR
// if j then
36147: LD_VAR 0 7
36151: IFFALSE 36181
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36153: LD_ADDR_VAR 0 10
36157: PUSH
36158: LD_VAR 0 10
36162: PUSH
36163: LD_VAR 0 7
36167: PPUSH
36168: LD_INT 3
36170: PPUSH
36171: CALL_OW 259
36175: PUSH
36176: LD_INT 3
36178: MUL
36179: MUL
36180: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36181: LD_VAR 0 6
36185: PPUSH
36186: CALL_OW 264
36190: PUSH
36191: LD_INT 5
36193: PUSH
36194: LD_INT 6
36196: PUSH
36197: LD_INT 46
36199: PUSH
36200: LD_INT 44
36202: PUSH
36203: LD_INT 47
36205: PUSH
36206: LD_INT 45
36208: PUSH
36209: LD_INT 28
36211: PUSH
36212: LD_INT 7
36214: PUSH
36215: LD_INT 27
36217: PUSH
36218: LD_INT 29
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: IN
36233: PUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: LD_INT 52
36241: PPUSH
36242: CALL_OW 321
36246: PUSH
36247: LD_INT 2
36249: EQUAL
36250: AND
36251: IFFALSE 36268
// bpoints := bpoints * 1.2 ;
36253: LD_ADDR_VAR 0 10
36257: PUSH
36258: LD_VAR 0 10
36262: PUSH
36263: LD_REAL  1.20000000000000E+0000
36266: MUL
36267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36268: LD_VAR 0 6
36272: PPUSH
36273: CALL_OW 264
36277: PUSH
36278: LD_INT 6
36280: PUSH
36281: LD_INT 46
36283: PUSH
36284: LD_INT 47
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: IN
36292: IFFALSE 36309
// bpoints := bpoints * 1.2 ;
36294: LD_ADDR_VAR 0 10
36298: PUSH
36299: LD_VAR 0 10
36303: PUSH
36304: LD_REAL  1.20000000000000E+0000
36307: MUL
36308: ST_TO_ADDR
// end ; unit_building :
36309: GO 36323
36311: LD_INT 3
36313: DOUBLE
36314: EQUAL
36315: IFTRUE 36319
36317: GO 36322
36319: POP
// ; end ;
36320: GO 36323
36322: POP
// for j = 1 to 3 do
36323: LD_ADDR_VAR 0 7
36327: PUSH
36328: DOUBLE
36329: LD_INT 1
36331: DEC
36332: ST_TO_ADDR
36333: LD_INT 3
36335: PUSH
36336: FOR_TO
36337: IFFALSE 36390
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36339: LD_ADDR_VAR 0 5
36343: PUSH
36344: LD_VAR 0 5
36348: PPUSH
36349: LD_VAR 0 7
36353: PPUSH
36354: LD_VAR 0 5
36358: PUSH
36359: LD_VAR 0 7
36363: ARRAY
36364: PUSH
36365: LD_VAR 0 9
36369: PUSH
36370: LD_VAR 0 7
36374: ARRAY
36375: PUSH
36376: LD_VAR 0 10
36380: MUL
36381: PLUS
36382: PPUSH
36383: CALL_OW 1
36387: ST_TO_ADDR
36388: GO 36336
36390: POP
36391: POP
// end ;
36392: GO 34871
36394: POP
36395: POP
// result := Replace ( result , 4 , tmp ) ;
36396: LD_ADDR_VAR 0 5
36400: PUSH
36401: LD_VAR 0 5
36405: PPUSH
36406: LD_INT 4
36408: PPUSH
36409: LD_VAR 0 8
36413: PPUSH
36414: CALL_OW 1
36418: ST_TO_ADDR
// end ;
36419: LD_VAR 0 5
36423: RET
// export function DangerAtRange ( unit , range ) ; begin
36424: LD_INT 0
36426: PPUSH
// if not unit then
36427: LD_VAR 0 1
36431: NOT
36432: IFFALSE 36436
// exit ;
36434: GO 36481
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36436: LD_ADDR_VAR 0 3
36440: PUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 255
36450: PPUSH
36451: LD_VAR 0 1
36455: PPUSH
36456: CALL_OW 250
36460: PPUSH
36461: LD_VAR 0 1
36465: PPUSH
36466: CALL_OW 251
36470: PPUSH
36471: LD_VAR 0 2
36475: PPUSH
36476: CALL 34723 0 4
36480: ST_TO_ADDR
// end ;
36481: LD_VAR 0 3
36485: RET
// export function DangerInArea ( side , area ) ; begin
36486: LD_INT 0
36488: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36489: LD_ADDR_VAR 0 3
36493: PUSH
36494: LD_VAR 0 2
36498: PPUSH
36499: LD_INT 81
36501: PUSH
36502: LD_VAR 0 1
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PPUSH
36511: CALL_OW 70
36515: ST_TO_ADDR
// end ;
36516: LD_VAR 0 3
36520: RET
// export function IsExtension ( b ) ; begin
36521: LD_INT 0
36523: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36524: LD_ADDR_VAR 0 2
36528: PUSH
36529: LD_VAR 0 1
36533: PUSH
36534: LD_INT 23
36536: PUSH
36537: LD_INT 20
36539: PUSH
36540: LD_INT 22
36542: PUSH
36543: LD_INT 17
36545: PUSH
36546: LD_INT 24
36548: PUSH
36549: LD_INT 21
36551: PUSH
36552: LD_INT 19
36554: PUSH
36555: LD_INT 16
36557: PUSH
36558: LD_INT 25
36560: PUSH
36561: LD_INT 18
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: IN
36576: ST_TO_ADDR
// end ;
36577: LD_VAR 0 2
36581: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36582: LD_INT 0
36584: PPUSH
36585: PPUSH
36586: PPUSH
// result := [ ] ;
36587: LD_ADDR_VAR 0 4
36591: PUSH
36592: EMPTY
36593: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36594: LD_ADDR_VAR 0 5
36598: PUSH
36599: LD_VAR 0 2
36603: PPUSH
36604: LD_INT 21
36606: PUSH
36607: LD_INT 3
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PPUSH
36614: CALL_OW 70
36618: ST_TO_ADDR
// if not tmp then
36619: LD_VAR 0 5
36623: NOT
36624: IFFALSE 36628
// exit ;
36626: GO 36692
// if checkLink then
36628: LD_VAR 0 3
36632: IFFALSE 36682
// begin for i in tmp do
36634: LD_ADDR_VAR 0 6
36638: PUSH
36639: LD_VAR 0 5
36643: PUSH
36644: FOR_IN
36645: IFFALSE 36680
// if GetBase ( i ) <> base then
36647: LD_VAR 0 6
36651: PPUSH
36652: CALL_OW 274
36656: PUSH
36657: LD_VAR 0 1
36661: NONEQUAL
36662: IFFALSE 36678
// ComLinkToBase ( base , i ) ;
36664: LD_VAR 0 1
36668: PPUSH
36669: LD_VAR 0 6
36673: PPUSH
36674: CALL_OW 169
36678: GO 36644
36680: POP
36681: POP
// end ; result := tmp ;
36682: LD_ADDR_VAR 0 4
36686: PUSH
36687: LD_VAR 0 5
36691: ST_TO_ADDR
// end ;
36692: LD_VAR 0 4
36696: RET
// export function ComComplete ( units , b ) ; var i ; begin
36697: LD_INT 0
36699: PPUSH
36700: PPUSH
// if not units then
36701: LD_VAR 0 1
36705: NOT
36706: IFFALSE 36710
// exit ;
36708: GO 36800
// for i in units do
36710: LD_ADDR_VAR 0 4
36714: PUSH
36715: LD_VAR 0 1
36719: PUSH
36720: FOR_IN
36721: IFFALSE 36798
// if BuildingStatus ( b ) = bs_build then
36723: LD_VAR 0 2
36727: PPUSH
36728: CALL_OW 461
36732: PUSH
36733: LD_INT 1
36735: EQUAL
36736: IFFALSE 36796
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36738: LD_VAR 0 4
36742: PPUSH
36743: LD_STRING h
36745: PUSH
36746: LD_VAR 0 2
36750: PPUSH
36751: CALL_OW 250
36755: PUSH
36756: LD_VAR 0 2
36760: PPUSH
36761: CALL_OW 251
36765: PUSH
36766: LD_VAR 0 2
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: PUSH
36789: EMPTY
36790: LIST
36791: PPUSH
36792: CALL_OW 446
36796: GO 36720
36798: POP
36799: POP
// end ;
36800: LD_VAR 0 3
36804: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36805: LD_INT 0
36807: PPUSH
36808: PPUSH
36809: PPUSH
36810: PPUSH
36811: PPUSH
36812: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36813: LD_VAR 0 1
36817: NOT
36818: PUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 263
36828: PUSH
36829: LD_INT 2
36831: NONEQUAL
36832: OR
36833: IFFALSE 36837
// exit ;
36835: GO 37153
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36837: LD_ADDR_VAR 0 6
36841: PUSH
36842: LD_INT 22
36844: PUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: CALL_OW 255
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 30
36864: PUSH
36865: LD_INT 36
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 34
36874: PUSH
36875: LD_INT 31
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PPUSH
36891: CALL_OW 69
36895: ST_TO_ADDR
// if not tmp then
36896: LD_VAR 0 6
36900: NOT
36901: IFFALSE 36905
// exit ;
36903: GO 37153
// result := [ ] ;
36905: LD_ADDR_VAR 0 2
36909: PUSH
36910: EMPTY
36911: ST_TO_ADDR
// for i in tmp do
36912: LD_ADDR_VAR 0 3
36916: PUSH
36917: LD_VAR 0 6
36921: PUSH
36922: FOR_IN
36923: IFFALSE 36994
// begin t := UnitsInside ( i ) ;
36925: LD_ADDR_VAR 0 4
36929: PUSH
36930: LD_VAR 0 3
36934: PPUSH
36935: CALL_OW 313
36939: ST_TO_ADDR
// if t then
36940: LD_VAR 0 4
36944: IFFALSE 36992
// for j in t do
36946: LD_ADDR_VAR 0 7
36950: PUSH
36951: LD_VAR 0 4
36955: PUSH
36956: FOR_IN
36957: IFFALSE 36990
// result := Replace ( result , result + 1 , j ) ;
36959: LD_ADDR_VAR 0 2
36963: PUSH
36964: LD_VAR 0 2
36968: PPUSH
36969: LD_VAR 0 2
36973: PUSH
36974: LD_INT 1
36976: PLUS
36977: PPUSH
36978: LD_VAR 0 7
36982: PPUSH
36983: CALL_OW 1
36987: ST_TO_ADDR
36988: GO 36956
36990: POP
36991: POP
// end ;
36992: GO 36922
36994: POP
36995: POP
// if not result then
36996: LD_VAR 0 2
37000: NOT
37001: IFFALSE 37005
// exit ;
37003: GO 37153
// mech := result [ 1 ] ;
37005: LD_ADDR_VAR 0 5
37009: PUSH
37010: LD_VAR 0 2
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: ST_TO_ADDR
// if result > 1 then
37019: LD_VAR 0 2
37023: PUSH
37024: LD_INT 1
37026: GREATER
37027: IFFALSE 37139
// begin for i = 2 to result do
37029: LD_ADDR_VAR 0 3
37033: PUSH
37034: DOUBLE
37035: LD_INT 2
37037: DEC
37038: ST_TO_ADDR
37039: LD_VAR 0 2
37043: PUSH
37044: FOR_TO
37045: IFFALSE 37137
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37047: LD_ADDR_VAR 0 4
37051: PUSH
37052: LD_VAR 0 2
37056: PUSH
37057: LD_VAR 0 3
37061: ARRAY
37062: PPUSH
37063: LD_INT 3
37065: PPUSH
37066: CALL_OW 259
37070: PUSH
37071: LD_VAR 0 2
37075: PUSH
37076: LD_VAR 0 3
37080: ARRAY
37081: PPUSH
37082: CALL_OW 432
37086: MINUS
37087: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37088: LD_VAR 0 4
37092: PUSH
37093: LD_VAR 0 5
37097: PPUSH
37098: LD_INT 3
37100: PPUSH
37101: CALL_OW 259
37105: PUSH
37106: LD_VAR 0 5
37110: PPUSH
37111: CALL_OW 432
37115: MINUS
37116: GREATEREQUAL
37117: IFFALSE 37135
// mech := result [ i ] ;
37119: LD_ADDR_VAR 0 5
37123: PUSH
37124: LD_VAR 0 2
37128: PUSH
37129: LD_VAR 0 3
37133: ARRAY
37134: ST_TO_ADDR
// end ;
37135: GO 37044
37137: POP
37138: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37139: LD_VAR 0 1
37143: PPUSH
37144: LD_VAR 0 5
37148: PPUSH
37149: CALL_OW 135
// end ;
37153: LD_VAR 0 2
37157: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37158: LD_INT 0
37160: PPUSH
37161: PPUSH
37162: PPUSH
37163: PPUSH
37164: PPUSH
37165: PPUSH
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
// result := [ ] ;
37173: LD_ADDR_VAR 0 7
37177: PUSH
37178: EMPTY
37179: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37180: LD_VAR 0 1
37184: PPUSH
37185: CALL_OW 266
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: IN
37200: NOT
37201: IFFALSE 37205
// exit ;
37203: GO 38839
// if name then
37205: LD_VAR 0 3
37209: IFFALSE 37225
// SetBName ( base_dep , name ) ;
37211: LD_VAR 0 1
37215: PPUSH
37216: LD_VAR 0 3
37220: PPUSH
37221: CALL_OW 500
// base := GetBase ( base_dep ) ;
37225: LD_ADDR_VAR 0 15
37229: PUSH
37230: LD_VAR 0 1
37234: PPUSH
37235: CALL_OW 274
37239: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37240: LD_ADDR_VAR 0 16
37244: PUSH
37245: LD_VAR 0 1
37249: PPUSH
37250: CALL_OW 255
37254: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37255: LD_ADDR_VAR 0 17
37259: PUSH
37260: LD_VAR 0 1
37264: PPUSH
37265: CALL_OW 248
37269: ST_TO_ADDR
// if sources then
37270: LD_VAR 0 5
37274: IFFALSE 37321
// for i = 1 to 3 do
37276: LD_ADDR_VAR 0 8
37280: PUSH
37281: DOUBLE
37282: LD_INT 1
37284: DEC
37285: ST_TO_ADDR
37286: LD_INT 3
37288: PUSH
37289: FOR_TO
37290: IFFALSE 37319
// AddResourceType ( base , i , sources [ i ] ) ;
37292: LD_VAR 0 15
37296: PPUSH
37297: LD_VAR 0 8
37301: PPUSH
37302: LD_VAR 0 5
37306: PUSH
37307: LD_VAR 0 8
37311: ARRAY
37312: PPUSH
37313: CALL_OW 276
37317: GO 37289
37319: POP
37320: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37321: LD_ADDR_VAR 0 18
37325: PUSH
37326: LD_VAR 0 15
37330: PPUSH
37331: LD_VAR 0 2
37335: PPUSH
37336: LD_INT 1
37338: PPUSH
37339: CALL 36582 0 3
37343: ST_TO_ADDR
// InitHc ;
37344: CALL_OW 19
// InitUc ;
37348: CALL_OW 18
// uc_side := side ;
37352: LD_ADDR_OWVAR 20
37356: PUSH
37357: LD_VAR 0 16
37361: ST_TO_ADDR
// uc_nation := nation ;
37362: LD_ADDR_OWVAR 21
37366: PUSH
37367: LD_VAR 0 17
37371: ST_TO_ADDR
// if buildings then
37372: LD_VAR 0 18
37376: IFFALSE 38698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37378: LD_ADDR_VAR 0 19
37382: PUSH
37383: LD_VAR 0 18
37387: PPUSH
37388: LD_INT 2
37390: PUSH
37391: LD_INT 30
37393: PUSH
37394: LD_INT 29
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 30
37403: PUSH
37404: LD_INT 30
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: PPUSH
37416: CALL_OW 72
37420: ST_TO_ADDR
// if tmp then
37421: LD_VAR 0 19
37425: IFFALSE 37473
// for i in tmp do
37427: LD_ADDR_VAR 0 8
37431: PUSH
37432: LD_VAR 0 19
37436: PUSH
37437: FOR_IN
37438: IFFALSE 37471
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37440: LD_VAR 0 8
37444: PPUSH
37445: CALL_OW 250
37449: PPUSH
37450: LD_VAR 0 8
37454: PPUSH
37455: CALL_OW 251
37459: PPUSH
37460: LD_VAR 0 16
37464: PPUSH
37465: CALL_OW 441
37469: GO 37437
37471: POP
37472: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37473: LD_VAR 0 18
37477: PPUSH
37478: LD_INT 2
37480: PUSH
37481: LD_INT 30
37483: PUSH
37484: LD_INT 32
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 30
37493: PUSH
37494: LD_INT 33
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: PPUSH
37506: CALL_OW 72
37510: IFFALSE 37598
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37512: LD_ADDR_VAR 0 8
37516: PUSH
37517: LD_VAR 0 18
37521: PPUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 30
37527: PUSH
37528: LD_INT 32
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 30
37537: PUSH
37538: LD_INT 33
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: PPUSH
37550: CALL_OW 72
37554: PUSH
37555: FOR_IN
37556: IFFALSE 37596
// begin if not GetBWeapon ( i ) then
37558: LD_VAR 0 8
37562: PPUSH
37563: CALL_OW 269
37567: NOT
37568: IFFALSE 37594
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37570: LD_VAR 0 8
37574: PPUSH
37575: LD_VAR 0 8
37579: PPUSH
37580: LD_VAR 0 2
37584: PPUSH
37585: CALL 38844 0 2
37589: PPUSH
37590: CALL_OW 431
// end ;
37594: GO 37555
37596: POP
37597: POP
// end ; for i = 1 to personel do
37598: LD_ADDR_VAR 0 8
37602: PUSH
37603: DOUBLE
37604: LD_INT 1
37606: DEC
37607: ST_TO_ADDR
37608: LD_VAR 0 6
37612: PUSH
37613: FOR_TO
37614: IFFALSE 38678
// begin if i > 4 then
37616: LD_VAR 0 8
37620: PUSH
37621: LD_INT 4
37623: GREATER
37624: IFFALSE 37628
// break ;
37626: GO 38678
// case i of 1 :
37628: LD_VAR 0 8
37632: PUSH
37633: LD_INT 1
37635: DOUBLE
37636: EQUAL
37637: IFTRUE 37641
37639: GO 37721
37641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37642: LD_ADDR_VAR 0 12
37646: PUSH
37647: LD_VAR 0 18
37651: PPUSH
37652: LD_INT 22
37654: PUSH
37655: LD_VAR 0 16
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 58
37666: PUSH
37667: EMPTY
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 30
37675: PUSH
37676: LD_INT 32
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 30
37685: PUSH
37686: LD_INT 4
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 30
37695: PUSH
37696: LD_INT 5
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: PPUSH
37714: CALL_OW 72
37718: ST_TO_ADDR
37719: GO 37943
37721: LD_INT 2
37723: DOUBLE
37724: EQUAL
37725: IFTRUE 37729
37727: GO 37791
37729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37730: LD_ADDR_VAR 0 12
37734: PUSH
37735: LD_VAR 0 18
37739: PPUSH
37740: LD_INT 22
37742: PUSH
37743: LD_VAR 0 16
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 30
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 30
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PPUSH
37784: CALL_OW 72
37788: ST_TO_ADDR
37789: GO 37943
37791: LD_INT 3
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 37861
37799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37800: LD_ADDR_VAR 0 12
37804: PUSH
37805: LD_VAR 0 18
37809: PPUSH
37810: LD_INT 22
37812: PUSH
37813: LD_VAR 0 16
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: LD_INT 30
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 30
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PPUSH
37854: CALL_OW 72
37858: ST_TO_ADDR
37859: GO 37943
37861: LD_INT 4
37863: DOUBLE
37864: EQUAL
37865: IFTRUE 37869
37867: GO 37942
37869: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37870: LD_ADDR_VAR 0 12
37874: PUSH
37875: LD_VAR 0 18
37879: PPUSH
37880: LD_INT 22
37882: PUSH
37883: LD_VAR 0 16
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: LD_INT 30
37897: PUSH
37898: LD_INT 6
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 30
37907: PUSH
37908: LD_INT 7
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 30
37917: PUSH
37918: LD_INT 8
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PPUSH
37935: CALL_OW 72
37939: ST_TO_ADDR
37940: GO 37943
37942: POP
// if i = 1 then
37943: LD_VAR 0 8
37947: PUSH
37948: LD_INT 1
37950: EQUAL
37951: IFFALSE 38062
// begin tmp := [ ] ;
37953: LD_ADDR_VAR 0 19
37957: PUSH
37958: EMPTY
37959: ST_TO_ADDR
// for j in f do
37960: LD_ADDR_VAR 0 9
37964: PUSH
37965: LD_VAR 0 12
37969: PUSH
37970: FOR_IN
37971: IFFALSE 38044
// if GetBType ( j ) = b_bunker then
37973: LD_VAR 0 9
37977: PPUSH
37978: CALL_OW 266
37982: PUSH
37983: LD_INT 32
37985: EQUAL
37986: IFFALSE 38013
// tmp := Insert ( tmp , 1 , j ) else
37988: LD_ADDR_VAR 0 19
37992: PUSH
37993: LD_VAR 0 19
37997: PPUSH
37998: LD_INT 1
38000: PPUSH
38001: LD_VAR 0 9
38005: PPUSH
38006: CALL_OW 2
38010: ST_TO_ADDR
38011: GO 38042
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38013: LD_ADDR_VAR 0 19
38017: PUSH
38018: LD_VAR 0 19
38022: PPUSH
38023: LD_VAR 0 19
38027: PUSH
38028: LD_INT 1
38030: PLUS
38031: PPUSH
38032: LD_VAR 0 9
38036: PPUSH
38037: CALL_OW 2
38041: ST_TO_ADDR
38042: GO 37970
38044: POP
38045: POP
// if tmp then
38046: LD_VAR 0 19
38050: IFFALSE 38062
// f := tmp ;
38052: LD_ADDR_VAR 0 12
38056: PUSH
38057: LD_VAR 0 19
38061: ST_TO_ADDR
// end ; x := personel [ i ] ;
38062: LD_ADDR_VAR 0 13
38066: PUSH
38067: LD_VAR 0 6
38071: PUSH
38072: LD_VAR 0 8
38076: ARRAY
38077: ST_TO_ADDR
// if x = - 1 then
38078: LD_VAR 0 13
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: EQUAL
38087: IFFALSE 38296
// begin for j in f do
38089: LD_ADDR_VAR 0 9
38093: PUSH
38094: LD_VAR 0 12
38098: PUSH
38099: FOR_IN
38100: IFFALSE 38292
// repeat InitHc ;
38102: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38106: LD_VAR 0 9
38110: PPUSH
38111: CALL_OW 266
38115: PUSH
38116: LD_INT 5
38118: EQUAL
38119: IFFALSE 38189
// begin if UnitsInside ( j ) < 3 then
38121: LD_VAR 0 9
38125: PPUSH
38126: CALL_OW 313
38130: PUSH
38131: LD_INT 3
38133: LESS
38134: IFFALSE 38170
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38136: LD_INT 0
38138: PPUSH
38139: LD_INT 5
38141: PUSH
38142: LD_INT 8
38144: PUSH
38145: LD_INT 9
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: PUSH
38153: LD_VAR 0 17
38157: ARRAY
38158: PPUSH
38159: LD_VAR 0 4
38163: PPUSH
38164: CALL_OW 380
38168: GO 38187
// PrepareHuman ( false , i , skill ) ;
38170: LD_INT 0
38172: PPUSH
38173: LD_VAR 0 8
38177: PPUSH
38178: LD_VAR 0 4
38182: PPUSH
38183: CALL_OW 380
// end else
38187: GO 38206
// PrepareHuman ( false , i , skill ) ;
38189: LD_INT 0
38191: PPUSH
38192: LD_VAR 0 8
38196: PPUSH
38197: LD_VAR 0 4
38201: PPUSH
38202: CALL_OW 380
// un := CreateHuman ;
38206: LD_ADDR_VAR 0 14
38210: PUSH
38211: CALL_OW 44
38215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38216: LD_ADDR_VAR 0 7
38220: PUSH
38221: LD_VAR 0 7
38225: PPUSH
38226: LD_INT 1
38228: PPUSH
38229: LD_VAR 0 14
38233: PPUSH
38234: CALL_OW 2
38238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38239: LD_VAR 0 14
38243: PPUSH
38244: LD_VAR 0 9
38248: PPUSH
38249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38253: LD_VAR 0 9
38257: PPUSH
38258: CALL_OW 313
38262: PUSH
38263: LD_INT 6
38265: EQUAL
38266: PUSH
38267: LD_VAR 0 9
38271: PPUSH
38272: CALL_OW 266
38276: PUSH
38277: LD_INT 32
38279: PUSH
38280: LD_INT 31
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: IN
38287: OR
38288: IFFALSE 38102
38290: GO 38099
38292: POP
38293: POP
// end else
38294: GO 38676
// for j = 1 to x do
38296: LD_ADDR_VAR 0 9
38300: PUSH
38301: DOUBLE
38302: LD_INT 1
38304: DEC
38305: ST_TO_ADDR
38306: LD_VAR 0 13
38310: PUSH
38311: FOR_TO
38312: IFFALSE 38674
// begin InitHc ;
38314: CALL_OW 19
// if not f then
38318: LD_VAR 0 12
38322: NOT
38323: IFFALSE 38412
// begin PrepareHuman ( false , i , skill ) ;
38325: LD_INT 0
38327: PPUSH
38328: LD_VAR 0 8
38332: PPUSH
38333: LD_VAR 0 4
38337: PPUSH
38338: CALL_OW 380
// un := CreateHuman ;
38342: LD_ADDR_VAR 0 14
38346: PUSH
38347: CALL_OW 44
38351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38352: LD_ADDR_VAR 0 7
38356: PUSH
38357: LD_VAR 0 7
38361: PPUSH
38362: LD_INT 1
38364: PPUSH
38365: LD_VAR 0 14
38369: PPUSH
38370: CALL_OW 2
38374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38375: LD_VAR 0 14
38379: PPUSH
38380: LD_VAR 0 1
38384: PPUSH
38385: CALL_OW 250
38389: PPUSH
38390: LD_VAR 0 1
38394: PPUSH
38395: CALL_OW 251
38399: PPUSH
38400: LD_INT 10
38402: PPUSH
38403: LD_INT 0
38405: PPUSH
38406: CALL_OW 50
// continue ;
38410: GO 38311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38412: LD_VAR 0 12
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: PPUSH
38421: CALL_OW 313
38425: PUSH
38426: LD_VAR 0 12
38430: PUSH
38431: LD_INT 1
38433: ARRAY
38434: PPUSH
38435: CALL_OW 266
38439: PUSH
38440: LD_INT 32
38442: PUSH
38443: LD_INT 31
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: IN
38450: AND
38451: PUSH
38452: LD_VAR 0 12
38456: PUSH
38457: LD_INT 1
38459: ARRAY
38460: PPUSH
38461: CALL_OW 313
38465: PUSH
38466: LD_INT 6
38468: EQUAL
38469: OR
38470: IFFALSE 38490
// f := Delete ( f , 1 ) ;
38472: LD_ADDR_VAR 0 12
38476: PUSH
38477: LD_VAR 0 12
38481: PPUSH
38482: LD_INT 1
38484: PPUSH
38485: CALL_OW 3
38489: ST_TO_ADDR
// if not f then
38490: LD_VAR 0 12
38494: NOT
38495: IFFALSE 38513
// begin x := x + 2 ;
38497: LD_ADDR_VAR 0 13
38501: PUSH
38502: LD_VAR 0 13
38506: PUSH
38507: LD_INT 2
38509: PLUS
38510: ST_TO_ADDR
// continue ;
38511: GO 38311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38513: LD_VAR 0 12
38517: PUSH
38518: LD_INT 1
38520: ARRAY
38521: PPUSH
38522: CALL_OW 266
38526: PUSH
38527: LD_INT 5
38529: EQUAL
38530: IFFALSE 38604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38532: LD_VAR 0 12
38536: PUSH
38537: LD_INT 1
38539: ARRAY
38540: PPUSH
38541: CALL_OW 313
38545: PUSH
38546: LD_INT 3
38548: LESS
38549: IFFALSE 38585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38551: LD_INT 0
38553: PPUSH
38554: LD_INT 5
38556: PUSH
38557: LD_INT 8
38559: PUSH
38560: LD_INT 9
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: PUSH
38568: LD_VAR 0 17
38572: ARRAY
38573: PPUSH
38574: LD_VAR 0 4
38578: PPUSH
38579: CALL_OW 380
38583: GO 38602
// PrepareHuman ( false , i , skill ) ;
38585: LD_INT 0
38587: PPUSH
38588: LD_VAR 0 8
38592: PPUSH
38593: LD_VAR 0 4
38597: PPUSH
38598: CALL_OW 380
// end else
38602: GO 38621
// PrepareHuman ( false , i , skill ) ;
38604: LD_INT 0
38606: PPUSH
38607: LD_VAR 0 8
38611: PPUSH
38612: LD_VAR 0 4
38616: PPUSH
38617: CALL_OW 380
// un := CreateHuman ;
38621: LD_ADDR_VAR 0 14
38625: PUSH
38626: CALL_OW 44
38630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38631: LD_ADDR_VAR 0 7
38635: PUSH
38636: LD_VAR 0 7
38640: PPUSH
38641: LD_INT 1
38643: PPUSH
38644: LD_VAR 0 14
38648: PPUSH
38649: CALL_OW 2
38653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38654: LD_VAR 0 14
38658: PPUSH
38659: LD_VAR 0 12
38663: PUSH
38664: LD_INT 1
38666: ARRAY
38667: PPUSH
38668: CALL_OW 52
// end ;
38672: GO 38311
38674: POP
38675: POP
// end ;
38676: GO 37613
38678: POP
38679: POP
// result := result ^ buildings ;
38680: LD_ADDR_VAR 0 7
38684: PUSH
38685: LD_VAR 0 7
38689: PUSH
38690: LD_VAR 0 18
38694: ADD
38695: ST_TO_ADDR
// end else
38696: GO 38839
// begin for i = 1 to personel do
38698: LD_ADDR_VAR 0 8
38702: PUSH
38703: DOUBLE
38704: LD_INT 1
38706: DEC
38707: ST_TO_ADDR
38708: LD_VAR 0 6
38712: PUSH
38713: FOR_TO
38714: IFFALSE 38837
// begin if i > 4 then
38716: LD_VAR 0 8
38720: PUSH
38721: LD_INT 4
38723: GREATER
38724: IFFALSE 38728
// break ;
38726: GO 38837
// x := personel [ i ] ;
38728: LD_ADDR_VAR 0 13
38732: PUSH
38733: LD_VAR 0 6
38737: PUSH
38738: LD_VAR 0 8
38742: ARRAY
38743: ST_TO_ADDR
// if x = - 1 then
38744: LD_VAR 0 13
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: EQUAL
38753: IFFALSE 38757
// continue ;
38755: GO 38713
// PrepareHuman ( false , i , skill ) ;
38757: LD_INT 0
38759: PPUSH
38760: LD_VAR 0 8
38764: PPUSH
38765: LD_VAR 0 4
38769: PPUSH
38770: CALL_OW 380
// un := CreateHuman ;
38774: LD_ADDR_VAR 0 14
38778: PUSH
38779: CALL_OW 44
38783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38784: LD_VAR 0 14
38788: PPUSH
38789: LD_VAR 0 1
38793: PPUSH
38794: CALL_OW 250
38798: PPUSH
38799: LD_VAR 0 1
38803: PPUSH
38804: CALL_OW 251
38808: PPUSH
38809: LD_INT 10
38811: PPUSH
38812: LD_INT 0
38814: PPUSH
38815: CALL_OW 50
// result := result ^ un ;
38819: LD_ADDR_VAR 0 7
38823: PUSH
38824: LD_VAR 0 7
38828: PUSH
38829: LD_VAR 0 14
38833: ADD
38834: ST_TO_ADDR
// end ;
38835: GO 38713
38837: POP
38838: POP
// end ; end ;
38839: LD_VAR 0 7
38843: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38844: LD_INT 0
38846: PPUSH
38847: PPUSH
38848: PPUSH
38849: PPUSH
38850: PPUSH
38851: PPUSH
38852: PPUSH
38853: PPUSH
38854: PPUSH
38855: PPUSH
38856: PPUSH
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
// result := false ;
38862: LD_ADDR_VAR 0 3
38866: PUSH
38867: LD_INT 0
38869: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38870: LD_VAR 0 1
38874: NOT
38875: PUSH
38876: LD_VAR 0 1
38880: PPUSH
38881: CALL_OW 266
38885: PUSH
38886: LD_INT 32
38888: PUSH
38889: LD_INT 33
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: IN
38896: NOT
38897: OR
38898: IFFALSE 38902
// exit ;
38900: GO 40011
// nat := GetNation ( tower ) ;
38902: LD_ADDR_VAR 0 12
38906: PUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 248
38916: ST_TO_ADDR
// side := GetSide ( tower ) ;
38917: LD_ADDR_VAR 0 16
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL_OW 255
38931: ST_TO_ADDR
// x := GetX ( tower ) ;
38932: LD_ADDR_VAR 0 10
38936: PUSH
38937: LD_VAR 0 1
38941: PPUSH
38942: CALL_OW 250
38946: ST_TO_ADDR
// y := GetY ( tower ) ;
38947: LD_ADDR_VAR 0 11
38951: PUSH
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL_OW 251
38961: ST_TO_ADDR
// if not x or not y then
38962: LD_VAR 0 10
38966: NOT
38967: PUSH
38968: LD_VAR 0 11
38972: NOT
38973: OR
38974: IFFALSE 38978
// exit ;
38976: GO 40011
// weapon := 0 ;
38978: LD_ADDR_VAR 0 18
38982: PUSH
38983: LD_INT 0
38985: ST_TO_ADDR
// fac_list := [ ] ;
38986: LD_ADDR_VAR 0 17
38990: PUSH
38991: EMPTY
38992: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38993: LD_ADDR_VAR 0 6
38997: PUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 274
39007: PPUSH
39008: LD_VAR 0 2
39012: PPUSH
39013: LD_INT 0
39015: PPUSH
39016: CALL 36582 0 3
39020: PPUSH
39021: LD_INT 30
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PPUSH
39031: CALL_OW 72
39035: ST_TO_ADDR
// if not factories then
39036: LD_VAR 0 6
39040: NOT
39041: IFFALSE 39045
// exit ;
39043: GO 40011
// for i in factories do
39045: LD_ADDR_VAR 0 8
39049: PUSH
39050: LD_VAR 0 6
39054: PUSH
39055: FOR_IN
39056: IFFALSE 39081
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39058: LD_ADDR_VAR 0 17
39062: PUSH
39063: LD_VAR 0 17
39067: PUSH
39068: LD_VAR 0 8
39072: PPUSH
39073: CALL_OW 478
39077: UNION
39078: ST_TO_ADDR
39079: GO 39055
39081: POP
39082: POP
// if not fac_list then
39083: LD_VAR 0 17
39087: NOT
39088: IFFALSE 39092
// exit ;
39090: GO 40011
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39092: LD_ADDR_VAR 0 5
39096: PUSH
39097: LD_INT 4
39099: PUSH
39100: LD_INT 5
39102: PUSH
39103: LD_INT 9
39105: PUSH
39106: LD_INT 10
39108: PUSH
39109: LD_INT 6
39111: PUSH
39112: LD_INT 7
39114: PUSH
39115: LD_INT 11
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 27
39129: PUSH
39130: LD_INT 28
39132: PUSH
39133: LD_INT 26
39135: PUSH
39136: LD_INT 30
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 43
39147: PUSH
39148: LD_INT 44
39150: PUSH
39151: LD_INT 46
39153: PUSH
39154: LD_INT 45
39156: PUSH
39157: LD_INT 47
39159: PUSH
39160: LD_INT 49
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: LIST
39175: PUSH
39176: LD_VAR 0 12
39180: ARRAY
39181: ST_TO_ADDR
// list := list isect fac_list ;
39182: LD_ADDR_VAR 0 5
39186: PUSH
39187: LD_VAR 0 5
39191: PUSH
39192: LD_VAR 0 17
39196: ISECT
39197: ST_TO_ADDR
// if not list then
39198: LD_VAR 0 5
39202: NOT
39203: IFFALSE 39207
// exit ;
39205: GO 40011
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39207: LD_VAR 0 12
39211: PUSH
39212: LD_INT 3
39214: EQUAL
39215: PUSH
39216: LD_INT 49
39218: PUSH
39219: LD_VAR 0 5
39223: IN
39224: AND
39225: PUSH
39226: LD_INT 31
39228: PPUSH
39229: LD_VAR 0 16
39233: PPUSH
39234: CALL_OW 321
39238: PUSH
39239: LD_INT 2
39241: EQUAL
39242: AND
39243: IFFALSE 39303
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39245: LD_INT 22
39247: PUSH
39248: LD_VAR 0 16
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 35
39259: PUSH
39260: LD_INT 49
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 91
39269: PUSH
39270: LD_VAR 0 1
39274: PUSH
39275: LD_INT 10
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: PPUSH
39288: CALL_OW 69
39292: NOT
39293: IFFALSE 39303
// weapon := ru_time_lapser ;
39295: LD_ADDR_VAR 0 18
39299: PUSH
39300: LD_INT 49
39302: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39303: LD_VAR 0 12
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: IN
39318: PUSH
39319: LD_INT 11
39321: PUSH
39322: LD_VAR 0 5
39326: IN
39327: PUSH
39328: LD_INT 30
39330: PUSH
39331: LD_VAR 0 5
39335: IN
39336: OR
39337: AND
39338: PUSH
39339: LD_INT 6
39341: PPUSH
39342: LD_VAR 0 16
39346: PPUSH
39347: CALL_OW 321
39351: PUSH
39352: LD_INT 2
39354: EQUAL
39355: AND
39356: IFFALSE 39521
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39358: LD_INT 22
39360: PUSH
39361: LD_VAR 0 16
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 35
39375: PUSH
39376: LD_INT 11
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 35
39385: PUSH
39386: LD_INT 30
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 91
39400: PUSH
39401: LD_VAR 0 1
39405: PUSH
39406: LD_INT 18
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: LIST
39418: PPUSH
39419: CALL_OW 69
39423: NOT
39424: PUSH
39425: LD_INT 22
39427: PUSH
39428: LD_VAR 0 16
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 30
39442: PUSH
39443: LD_INT 32
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 30
39452: PUSH
39453: LD_INT 33
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 91
39467: PUSH
39468: LD_VAR 0 1
39472: PUSH
39473: LD_INT 12
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: PUSH
39486: EMPTY
39487: LIST
39488: PPUSH
39489: CALL_OW 69
39493: PUSH
39494: LD_INT 2
39496: GREATER
39497: AND
39498: IFFALSE 39521
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39500: LD_ADDR_VAR 0 18
39504: PUSH
39505: LD_INT 11
39507: PUSH
39508: LD_INT 30
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_VAR 0 12
39519: ARRAY
39520: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39521: LD_VAR 0 18
39525: NOT
39526: PUSH
39527: LD_INT 40
39529: PPUSH
39530: LD_VAR 0 16
39534: PPUSH
39535: CALL_OW 321
39539: PUSH
39540: LD_INT 2
39542: EQUAL
39543: AND
39544: PUSH
39545: LD_INT 7
39547: PUSH
39548: LD_VAR 0 5
39552: IN
39553: PUSH
39554: LD_INT 28
39556: PUSH
39557: LD_VAR 0 5
39561: IN
39562: OR
39563: PUSH
39564: LD_INT 45
39566: PUSH
39567: LD_VAR 0 5
39571: IN
39572: OR
39573: AND
39574: IFFALSE 39828
// begin hex := GetHexInfo ( x , y ) ;
39576: LD_ADDR_VAR 0 4
39580: PUSH
39581: LD_VAR 0 10
39585: PPUSH
39586: LD_VAR 0 11
39590: PPUSH
39591: CALL_OW 546
39595: ST_TO_ADDR
// if hex [ 1 ] then
39596: LD_VAR 0 4
39600: PUSH
39601: LD_INT 1
39603: ARRAY
39604: IFFALSE 39608
// exit ;
39606: GO 40011
// height := hex [ 2 ] ;
39608: LD_ADDR_VAR 0 15
39612: PUSH
39613: LD_VAR 0 4
39617: PUSH
39618: LD_INT 2
39620: ARRAY
39621: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39622: LD_ADDR_VAR 0 14
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: LD_INT 5
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: ST_TO_ADDR
// for i in tmp do
39645: LD_ADDR_VAR 0 8
39649: PUSH
39650: LD_VAR 0 14
39654: PUSH
39655: FOR_IN
39656: IFFALSE 39826
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39658: LD_ADDR_VAR 0 9
39662: PUSH
39663: LD_VAR 0 10
39667: PPUSH
39668: LD_VAR 0 8
39672: PPUSH
39673: LD_INT 5
39675: PPUSH
39676: CALL_OW 272
39680: PUSH
39681: LD_VAR 0 11
39685: PPUSH
39686: LD_VAR 0 8
39690: PPUSH
39691: LD_INT 5
39693: PPUSH
39694: CALL_OW 273
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39703: LD_VAR 0 9
39707: PUSH
39708: LD_INT 1
39710: ARRAY
39711: PPUSH
39712: LD_VAR 0 9
39716: PUSH
39717: LD_INT 2
39719: ARRAY
39720: PPUSH
39721: CALL_OW 488
39725: IFFALSE 39824
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39727: LD_ADDR_VAR 0 4
39731: PUSH
39732: LD_VAR 0 9
39736: PUSH
39737: LD_INT 1
39739: ARRAY
39740: PPUSH
39741: LD_VAR 0 9
39745: PUSH
39746: LD_INT 2
39748: ARRAY
39749: PPUSH
39750: CALL_OW 546
39754: ST_TO_ADDR
// if hex [ 1 ] then
39755: LD_VAR 0 4
39759: PUSH
39760: LD_INT 1
39762: ARRAY
39763: IFFALSE 39767
// continue ;
39765: GO 39655
// h := hex [ 2 ] ;
39767: LD_ADDR_VAR 0 13
39771: PUSH
39772: LD_VAR 0 4
39776: PUSH
39777: LD_INT 2
39779: ARRAY
39780: ST_TO_ADDR
// if h + 7 < height then
39781: LD_VAR 0 13
39785: PUSH
39786: LD_INT 7
39788: PLUS
39789: PUSH
39790: LD_VAR 0 15
39794: LESS
39795: IFFALSE 39824
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39797: LD_ADDR_VAR 0 18
39801: PUSH
39802: LD_INT 7
39804: PUSH
39805: LD_INT 28
39807: PUSH
39808: LD_INT 45
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: PUSH
39816: LD_VAR 0 12
39820: ARRAY
39821: ST_TO_ADDR
// break ;
39822: GO 39826
// end ; end ; end ;
39824: GO 39655
39826: POP
39827: POP
// end ; if not weapon then
39828: LD_VAR 0 18
39832: NOT
39833: IFFALSE 39893
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39835: LD_ADDR_VAR 0 5
39839: PUSH
39840: LD_VAR 0 5
39844: PUSH
39845: LD_INT 11
39847: PUSH
39848: LD_INT 30
39850: PUSH
39851: LD_INT 49
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: DIFF
39859: ST_TO_ADDR
// if not list then
39860: LD_VAR 0 5
39864: NOT
39865: IFFALSE 39869
// exit ;
39867: GO 40011
// weapon := list [ rand ( 1 , list ) ] ;
39869: LD_ADDR_VAR 0 18
39873: PUSH
39874: LD_VAR 0 5
39878: PUSH
39879: LD_INT 1
39881: PPUSH
39882: LD_VAR 0 5
39886: PPUSH
39887: CALL_OW 12
39891: ARRAY
39892: ST_TO_ADDR
// end ; if weapon then
39893: LD_VAR 0 18
39897: IFFALSE 40011
// begin tmp := CostOfWeapon ( weapon ) ;
39899: LD_ADDR_VAR 0 14
39903: PUSH
39904: LD_VAR 0 18
39908: PPUSH
39909: CALL_OW 451
39913: ST_TO_ADDR
// j := GetBase ( tower ) ;
39914: LD_ADDR_VAR 0 9
39918: PUSH
39919: LD_VAR 0 1
39923: PPUSH
39924: CALL_OW 274
39928: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39929: LD_VAR 0 9
39933: PPUSH
39934: LD_INT 1
39936: PPUSH
39937: CALL_OW 275
39941: PUSH
39942: LD_VAR 0 14
39946: PUSH
39947: LD_INT 1
39949: ARRAY
39950: GREATEREQUAL
39951: PUSH
39952: LD_VAR 0 9
39956: PPUSH
39957: LD_INT 2
39959: PPUSH
39960: CALL_OW 275
39964: PUSH
39965: LD_VAR 0 14
39969: PUSH
39970: LD_INT 2
39972: ARRAY
39973: GREATEREQUAL
39974: AND
39975: PUSH
39976: LD_VAR 0 9
39980: PPUSH
39981: LD_INT 3
39983: PPUSH
39984: CALL_OW 275
39988: PUSH
39989: LD_VAR 0 14
39993: PUSH
39994: LD_INT 3
39996: ARRAY
39997: GREATEREQUAL
39998: AND
39999: IFFALSE 40011
// result := weapon ;
40001: LD_ADDR_VAR 0 3
40005: PUSH
40006: LD_VAR 0 18
40010: ST_TO_ADDR
// end ; end ;
40011: LD_VAR 0 3
40015: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40016: LD_INT 0
40018: PPUSH
40019: PPUSH
// result := true ;
40020: LD_ADDR_VAR 0 3
40024: PUSH
40025: LD_INT 1
40027: ST_TO_ADDR
// if array1 = array2 then
40028: LD_VAR 0 1
40032: PUSH
40033: LD_VAR 0 2
40037: EQUAL
40038: IFFALSE 40098
// begin for i = 1 to array1 do
40040: LD_ADDR_VAR 0 4
40044: PUSH
40045: DOUBLE
40046: LD_INT 1
40048: DEC
40049: ST_TO_ADDR
40050: LD_VAR 0 1
40054: PUSH
40055: FOR_TO
40056: IFFALSE 40094
// if array1 [ i ] <> array2 [ i ] then
40058: LD_VAR 0 1
40062: PUSH
40063: LD_VAR 0 4
40067: ARRAY
40068: PUSH
40069: LD_VAR 0 2
40073: PUSH
40074: LD_VAR 0 4
40078: ARRAY
40079: NONEQUAL
40080: IFFALSE 40092
// begin result := false ;
40082: LD_ADDR_VAR 0 3
40086: PUSH
40087: LD_INT 0
40089: ST_TO_ADDR
// break ;
40090: GO 40094
// end ;
40092: GO 40055
40094: POP
40095: POP
// end else
40096: GO 40106
// result := false ;
40098: LD_ADDR_VAR 0 3
40102: PUSH
40103: LD_INT 0
40105: ST_TO_ADDR
// end ;
40106: LD_VAR 0 3
40110: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40111: LD_INT 0
40113: PPUSH
40114: PPUSH
// if not array1 or not array2 then
40115: LD_VAR 0 1
40119: NOT
40120: PUSH
40121: LD_VAR 0 2
40125: NOT
40126: OR
40127: IFFALSE 40131
// exit ;
40129: GO 40195
// result := true ;
40131: LD_ADDR_VAR 0 3
40135: PUSH
40136: LD_INT 1
40138: ST_TO_ADDR
// for i = 1 to array1 do
40139: LD_ADDR_VAR 0 4
40143: PUSH
40144: DOUBLE
40145: LD_INT 1
40147: DEC
40148: ST_TO_ADDR
40149: LD_VAR 0 1
40153: PUSH
40154: FOR_TO
40155: IFFALSE 40193
// if array1 [ i ] <> array2 [ i ] then
40157: LD_VAR 0 1
40161: PUSH
40162: LD_VAR 0 4
40166: ARRAY
40167: PUSH
40168: LD_VAR 0 2
40172: PUSH
40173: LD_VAR 0 4
40177: ARRAY
40178: NONEQUAL
40179: IFFALSE 40191
// begin result := false ;
40181: LD_ADDR_VAR 0 3
40185: PUSH
40186: LD_INT 0
40188: ST_TO_ADDR
// break ;
40189: GO 40193
// end ;
40191: GO 40154
40193: POP
40194: POP
// end ;
40195: LD_VAR 0 3
40199: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40200: LD_INT 0
40202: PPUSH
40203: PPUSH
40204: PPUSH
// pom := GetBase ( fac ) ;
40205: LD_ADDR_VAR 0 5
40209: PUSH
40210: LD_VAR 0 1
40214: PPUSH
40215: CALL_OW 274
40219: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40220: LD_ADDR_VAR 0 4
40224: PUSH
40225: LD_VAR 0 2
40229: PUSH
40230: LD_INT 1
40232: ARRAY
40233: PPUSH
40234: LD_VAR 0 2
40238: PUSH
40239: LD_INT 2
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 2
40247: PUSH
40248: LD_INT 3
40250: ARRAY
40251: PPUSH
40252: LD_VAR 0 2
40256: PUSH
40257: LD_INT 4
40259: ARRAY
40260: PPUSH
40261: CALL_OW 449
40265: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40266: LD_ADDR_VAR 0 3
40270: PUSH
40271: LD_VAR 0 5
40275: PPUSH
40276: LD_INT 1
40278: PPUSH
40279: CALL_OW 275
40283: PUSH
40284: LD_VAR 0 4
40288: PUSH
40289: LD_INT 1
40291: ARRAY
40292: GREATEREQUAL
40293: PUSH
40294: LD_VAR 0 5
40298: PPUSH
40299: LD_INT 2
40301: PPUSH
40302: CALL_OW 275
40306: PUSH
40307: LD_VAR 0 4
40311: PUSH
40312: LD_INT 2
40314: ARRAY
40315: GREATEREQUAL
40316: AND
40317: PUSH
40318: LD_VAR 0 5
40322: PPUSH
40323: LD_INT 3
40325: PPUSH
40326: CALL_OW 275
40330: PUSH
40331: LD_VAR 0 4
40335: PUSH
40336: LD_INT 3
40338: ARRAY
40339: GREATEREQUAL
40340: AND
40341: ST_TO_ADDR
// end ;
40342: LD_VAR 0 3
40346: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40347: LD_INT 0
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
// pom := GetBase ( building ) ;
40353: LD_ADDR_VAR 0 3
40357: PUSH
40358: LD_VAR 0 1
40362: PPUSH
40363: CALL_OW 274
40367: ST_TO_ADDR
// if not pom then
40368: LD_VAR 0 3
40372: NOT
40373: IFFALSE 40377
// exit ;
40375: GO 40547
// btype := GetBType ( building ) ;
40377: LD_ADDR_VAR 0 5
40381: PUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 266
40391: ST_TO_ADDR
// if btype = b_armoury then
40392: LD_VAR 0 5
40396: PUSH
40397: LD_INT 4
40399: EQUAL
40400: IFFALSE 40410
// btype := b_barracks ;
40402: LD_ADDR_VAR 0 5
40406: PUSH
40407: LD_INT 5
40409: ST_TO_ADDR
// if btype = b_depot then
40410: LD_VAR 0 5
40414: PUSH
40415: LD_INT 0
40417: EQUAL
40418: IFFALSE 40428
// btype := b_warehouse ;
40420: LD_ADDR_VAR 0 5
40424: PUSH
40425: LD_INT 1
40427: ST_TO_ADDR
// if btype = b_workshop then
40428: LD_VAR 0 5
40432: PUSH
40433: LD_INT 2
40435: EQUAL
40436: IFFALSE 40446
// btype := b_factory ;
40438: LD_ADDR_VAR 0 5
40442: PUSH
40443: LD_INT 3
40445: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40446: LD_ADDR_VAR 0 4
40450: PUSH
40451: LD_VAR 0 5
40455: PPUSH
40456: LD_VAR 0 1
40460: PPUSH
40461: CALL_OW 248
40465: PPUSH
40466: CALL_OW 450
40470: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40471: LD_ADDR_VAR 0 2
40475: PUSH
40476: LD_VAR 0 3
40480: PPUSH
40481: LD_INT 1
40483: PPUSH
40484: CALL_OW 275
40488: PUSH
40489: LD_VAR 0 4
40493: PUSH
40494: LD_INT 1
40496: ARRAY
40497: GREATEREQUAL
40498: PUSH
40499: LD_VAR 0 3
40503: PPUSH
40504: LD_INT 2
40506: PPUSH
40507: CALL_OW 275
40511: PUSH
40512: LD_VAR 0 4
40516: PUSH
40517: LD_INT 2
40519: ARRAY
40520: GREATEREQUAL
40521: AND
40522: PUSH
40523: LD_VAR 0 3
40527: PPUSH
40528: LD_INT 3
40530: PPUSH
40531: CALL_OW 275
40535: PUSH
40536: LD_VAR 0 4
40540: PUSH
40541: LD_INT 3
40543: ARRAY
40544: GREATEREQUAL
40545: AND
40546: ST_TO_ADDR
// end ;
40547: LD_VAR 0 2
40551: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40552: LD_INT 0
40554: PPUSH
40555: PPUSH
40556: PPUSH
// pom := GetBase ( building ) ;
40557: LD_ADDR_VAR 0 4
40561: PUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 274
40571: ST_TO_ADDR
// if not pom then
40572: LD_VAR 0 4
40576: NOT
40577: IFFALSE 40581
// exit ;
40579: GO 40682
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40581: LD_ADDR_VAR 0 5
40585: PUSH
40586: LD_VAR 0 2
40590: PPUSH
40591: LD_VAR 0 1
40595: PPUSH
40596: CALL_OW 248
40600: PPUSH
40601: CALL_OW 450
40605: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_VAR 0 4
40615: PPUSH
40616: LD_INT 1
40618: PPUSH
40619: CALL_OW 275
40623: PUSH
40624: LD_VAR 0 5
40628: PUSH
40629: LD_INT 1
40631: ARRAY
40632: GREATEREQUAL
40633: PUSH
40634: LD_VAR 0 4
40638: PPUSH
40639: LD_INT 2
40641: PPUSH
40642: CALL_OW 275
40646: PUSH
40647: LD_VAR 0 5
40651: PUSH
40652: LD_INT 2
40654: ARRAY
40655: GREATEREQUAL
40656: AND
40657: PUSH
40658: LD_VAR 0 4
40662: PPUSH
40663: LD_INT 3
40665: PPUSH
40666: CALL_OW 275
40670: PUSH
40671: LD_VAR 0 5
40675: PUSH
40676: LD_INT 3
40678: ARRAY
40679: GREATEREQUAL
40680: AND
40681: ST_TO_ADDR
// end ;
40682: LD_VAR 0 3
40686: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40687: LD_INT 0
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
// result := false ;
40700: LD_ADDR_VAR 0 8
40704: PUSH
40705: LD_INT 0
40707: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40708: LD_VAR 0 5
40712: NOT
40713: PUSH
40714: LD_VAR 0 1
40718: NOT
40719: OR
40720: PUSH
40721: LD_VAR 0 2
40725: NOT
40726: OR
40727: PUSH
40728: LD_VAR 0 3
40732: NOT
40733: OR
40734: IFFALSE 40738
// exit ;
40736: GO 41552
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40738: LD_ADDR_VAR 0 14
40742: PUSH
40743: LD_VAR 0 1
40747: PPUSH
40748: LD_VAR 0 2
40752: PPUSH
40753: LD_VAR 0 3
40757: PPUSH
40758: LD_VAR 0 4
40762: PPUSH
40763: LD_VAR 0 5
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: PPUSH
40772: CALL_OW 248
40776: PPUSH
40777: LD_INT 0
40779: PPUSH
40780: CALL 42805 0 6
40784: ST_TO_ADDR
// if not hexes then
40785: LD_VAR 0 14
40789: NOT
40790: IFFALSE 40794
// exit ;
40792: GO 41552
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40794: LD_ADDR_VAR 0 17
40798: PUSH
40799: LD_VAR 0 5
40803: PPUSH
40804: LD_INT 22
40806: PUSH
40807: LD_VAR 0 13
40811: PPUSH
40812: CALL_OW 255
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: PUSH
40824: LD_INT 30
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 30
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PPUSH
40853: CALL_OW 72
40857: ST_TO_ADDR
// for i = 1 to hexes do
40858: LD_ADDR_VAR 0 9
40862: PUSH
40863: DOUBLE
40864: LD_INT 1
40866: DEC
40867: ST_TO_ADDR
40868: LD_VAR 0 14
40872: PUSH
40873: FOR_TO
40874: IFFALSE 41550
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40876: LD_ADDR_VAR 0 13
40880: PUSH
40881: LD_VAR 0 14
40885: PUSH
40886: LD_VAR 0 9
40890: ARRAY
40891: PUSH
40892: LD_INT 1
40894: ARRAY
40895: PPUSH
40896: LD_VAR 0 14
40900: PUSH
40901: LD_VAR 0 9
40905: ARRAY
40906: PUSH
40907: LD_INT 2
40909: ARRAY
40910: PPUSH
40911: CALL_OW 428
40915: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40916: LD_VAR 0 14
40920: PUSH
40921: LD_VAR 0 9
40925: ARRAY
40926: PUSH
40927: LD_INT 1
40929: ARRAY
40930: PPUSH
40931: LD_VAR 0 14
40935: PUSH
40936: LD_VAR 0 9
40940: ARRAY
40941: PUSH
40942: LD_INT 2
40944: ARRAY
40945: PPUSH
40946: CALL_OW 351
40950: PUSH
40951: LD_VAR 0 14
40955: PUSH
40956: LD_VAR 0 9
40960: ARRAY
40961: PUSH
40962: LD_INT 1
40964: ARRAY
40965: PPUSH
40966: LD_VAR 0 14
40970: PUSH
40971: LD_VAR 0 9
40975: ARRAY
40976: PUSH
40977: LD_INT 2
40979: ARRAY
40980: PPUSH
40981: CALL_OW 488
40985: NOT
40986: OR
40987: PUSH
40988: LD_VAR 0 13
40992: PPUSH
40993: CALL_OW 247
40997: PUSH
40998: LD_INT 3
41000: EQUAL
41001: OR
41002: IFFALSE 41008
// exit ;
41004: POP
41005: POP
41006: GO 41552
// if not tmp then
41008: LD_VAR 0 13
41012: NOT
41013: IFFALSE 41017
// continue ;
41015: GO 40873
// result := true ;
41017: LD_ADDR_VAR 0 8
41021: PUSH
41022: LD_INT 1
41024: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41025: LD_VAR 0 6
41029: PUSH
41030: LD_VAR 0 13
41034: PPUSH
41035: CALL_OW 247
41039: PUSH
41040: LD_INT 2
41042: EQUAL
41043: AND
41044: PUSH
41045: LD_VAR 0 13
41049: PPUSH
41050: CALL_OW 263
41054: PUSH
41055: LD_INT 1
41057: EQUAL
41058: AND
41059: IFFALSE 41223
// begin if IsDrivenBy ( tmp ) then
41061: LD_VAR 0 13
41065: PPUSH
41066: CALL_OW 311
41070: IFFALSE 41074
// continue ;
41072: GO 40873
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41074: LD_VAR 0 6
41078: PPUSH
41079: LD_INT 3
41081: PUSH
41082: LD_INT 60
41084: PUSH
41085: EMPTY
41086: LIST
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: LD_INT 55
41097: PUSH
41098: EMPTY
41099: LIST
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PPUSH
41109: CALL_OW 72
41113: IFFALSE 41221
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41115: LD_ADDR_VAR 0 18
41119: PUSH
41120: LD_VAR 0 6
41124: PPUSH
41125: LD_INT 3
41127: PUSH
41128: LD_INT 60
41130: PUSH
41131: EMPTY
41132: LIST
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 3
41140: PUSH
41141: LD_INT 55
41143: PUSH
41144: EMPTY
41145: LIST
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PPUSH
41155: CALL_OW 72
41159: PUSH
41160: LD_INT 1
41162: ARRAY
41163: ST_TO_ADDR
// if IsInUnit ( driver ) then
41164: LD_VAR 0 18
41168: PPUSH
41169: CALL_OW 310
41173: IFFALSE 41184
// ComExit ( driver ) ;
41175: LD_VAR 0 18
41179: PPUSH
41180: CALL 66584 0 1
// AddComEnterUnit ( driver , tmp ) ;
41184: LD_VAR 0 18
41188: PPUSH
41189: LD_VAR 0 13
41193: PPUSH
41194: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41198: LD_VAR 0 18
41202: PPUSH
41203: LD_VAR 0 7
41207: PPUSH
41208: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41212: LD_VAR 0 18
41216: PPUSH
41217: CALL_OW 181
// end ; continue ;
41221: GO 40873
// end ; if not cleaners or not tmp in cleaners then
41223: LD_VAR 0 6
41227: NOT
41228: PUSH
41229: LD_VAR 0 13
41233: PUSH
41234: LD_VAR 0 6
41238: IN
41239: NOT
41240: OR
41241: IFFALSE 41548
// begin if dep then
41243: LD_VAR 0 17
41247: IFFALSE 41383
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41249: LD_ADDR_VAR 0 16
41253: PUSH
41254: LD_VAR 0 17
41258: PUSH
41259: LD_INT 1
41261: ARRAY
41262: PPUSH
41263: CALL_OW 250
41267: PPUSH
41268: LD_VAR 0 17
41272: PUSH
41273: LD_INT 1
41275: ARRAY
41276: PPUSH
41277: CALL_OW 254
41281: PPUSH
41282: LD_INT 5
41284: PPUSH
41285: CALL_OW 272
41289: PUSH
41290: LD_VAR 0 17
41294: PUSH
41295: LD_INT 1
41297: ARRAY
41298: PPUSH
41299: CALL_OW 251
41303: PPUSH
41304: LD_VAR 0 17
41308: PUSH
41309: LD_INT 1
41311: ARRAY
41312: PPUSH
41313: CALL_OW 254
41317: PPUSH
41318: LD_INT 5
41320: PPUSH
41321: CALL_OW 273
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41330: LD_VAR 0 16
41334: PUSH
41335: LD_INT 1
41337: ARRAY
41338: PPUSH
41339: LD_VAR 0 16
41343: PUSH
41344: LD_INT 2
41346: ARRAY
41347: PPUSH
41348: CALL_OW 488
41352: IFFALSE 41383
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41354: LD_VAR 0 13
41358: PPUSH
41359: LD_VAR 0 16
41363: PUSH
41364: LD_INT 1
41366: ARRAY
41367: PPUSH
41368: LD_VAR 0 16
41372: PUSH
41373: LD_INT 2
41375: ARRAY
41376: PPUSH
41377: CALL_OW 111
// continue ;
41381: GO 40873
// end ; end ; r := GetDir ( tmp ) ;
41383: LD_ADDR_VAR 0 15
41387: PUSH
41388: LD_VAR 0 13
41392: PPUSH
41393: CALL_OW 254
41397: ST_TO_ADDR
// if r = 5 then
41398: LD_VAR 0 15
41402: PUSH
41403: LD_INT 5
41405: EQUAL
41406: IFFALSE 41416
// r := 0 ;
41408: LD_ADDR_VAR 0 15
41412: PUSH
41413: LD_INT 0
41415: ST_TO_ADDR
// for j = r to 5 do
41416: LD_ADDR_VAR 0 10
41420: PUSH
41421: DOUBLE
41422: LD_VAR 0 15
41426: DEC
41427: ST_TO_ADDR
41428: LD_INT 5
41430: PUSH
41431: FOR_TO
41432: IFFALSE 41546
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41434: LD_ADDR_VAR 0 11
41438: PUSH
41439: LD_VAR 0 13
41443: PPUSH
41444: CALL_OW 250
41448: PPUSH
41449: LD_VAR 0 10
41453: PPUSH
41454: LD_INT 2
41456: PPUSH
41457: CALL_OW 272
41461: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41462: LD_ADDR_VAR 0 12
41466: PUSH
41467: LD_VAR 0 13
41471: PPUSH
41472: CALL_OW 251
41476: PPUSH
41477: LD_VAR 0 10
41481: PPUSH
41482: LD_INT 2
41484: PPUSH
41485: CALL_OW 273
41489: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41490: LD_VAR 0 11
41494: PPUSH
41495: LD_VAR 0 12
41499: PPUSH
41500: CALL_OW 488
41504: PUSH
41505: LD_VAR 0 11
41509: PPUSH
41510: LD_VAR 0 12
41514: PPUSH
41515: CALL_OW 428
41519: NOT
41520: AND
41521: IFFALSE 41544
// begin ComMoveXY ( tmp , _x , _y ) ;
41523: LD_VAR 0 13
41527: PPUSH
41528: LD_VAR 0 11
41532: PPUSH
41533: LD_VAR 0 12
41537: PPUSH
41538: CALL_OW 111
// break ;
41542: GO 41546
// end ; end ;
41544: GO 41431
41546: POP
41547: POP
// end ; end ;
41548: GO 40873
41550: POP
41551: POP
// end ;
41552: LD_VAR 0 8
41556: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41557: LD_INT 0
41559: PPUSH
// result := true ;
41560: LD_ADDR_VAR 0 3
41564: PUSH
41565: LD_INT 1
41567: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41568: LD_VAR 0 2
41572: PUSH
41573: LD_INT 24
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41587
41579: LD_INT 33
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41587
41585: GO 41612
41587: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41588: LD_ADDR_VAR 0 3
41592: PUSH
41593: LD_INT 32
41595: PPUSH
41596: LD_VAR 0 1
41600: PPUSH
41601: CALL_OW 321
41605: PUSH
41606: LD_INT 2
41608: EQUAL
41609: ST_TO_ADDR
41610: GO 41928
41612: LD_INT 20
41614: DOUBLE
41615: EQUAL
41616: IFTRUE 41620
41618: GO 41645
41620: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41621: LD_ADDR_VAR 0 3
41625: PUSH
41626: LD_INT 6
41628: PPUSH
41629: LD_VAR 0 1
41633: PPUSH
41634: CALL_OW 321
41638: PUSH
41639: LD_INT 2
41641: EQUAL
41642: ST_TO_ADDR
41643: GO 41928
41645: LD_INT 22
41647: DOUBLE
41648: EQUAL
41649: IFTRUE 41659
41651: LD_INT 36
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41684
41659: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 15
41667: PPUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 321
41677: PUSH
41678: LD_INT 2
41680: EQUAL
41681: ST_TO_ADDR
41682: GO 41928
41684: LD_INT 30
41686: DOUBLE
41687: EQUAL
41688: IFTRUE 41692
41690: GO 41717
41692: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_INT 20
41700: PPUSH
41701: LD_VAR 0 1
41705: PPUSH
41706: CALL_OW 321
41710: PUSH
41711: LD_INT 2
41713: EQUAL
41714: ST_TO_ADDR
41715: GO 41928
41717: LD_INT 28
41719: DOUBLE
41720: EQUAL
41721: IFTRUE 41731
41723: LD_INT 21
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41731
41729: GO 41756
41731: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 21
41739: PPUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: CALL_OW 321
41749: PUSH
41750: LD_INT 2
41752: EQUAL
41753: ST_TO_ADDR
41754: GO 41928
41756: LD_INT 16
41758: DOUBLE
41759: EQUAL
41760: IFTRUE 41764
41762: GO 41789
41764: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41765: LD_ADDR_VAR 0 3
41769: PUSH
41770: LD_INT 84
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 321
41782: PUSH
41783: LD_INT 2
41785: EQUAL
41786: ST_TO_ADDR
41787: GO 41928
41789: LD_INT 19
41791: DOUBLE
41792: EQUAL
41793: IFTRUE 41803
41795: LD_INT 23
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 41828
41803: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: LD_INT 83
41811: PPUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 321
41821: PUSH
41822: LD_INT 2
41824: EQUAL
41825: ST_TO_ADDR
41826: GO 41928
41828: LD_INT 17
41830: DOUBLE
41831: EQUAL
41832: IFTRUE 41836
41834: GO 41861
41836: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_INT 39
41844: PPUSH
41845: LD_VAR 0 1
41849: PPUSH
41850: CALL_OW 321
41854: PUSH
41855: LD_INT 2
41857: EQUAL
41858: ST_TO_ADDR
41859: GO 41928
41861: LD_INT 18
41863: DOUBLE
41864: EQUAL
41865: IFTRUE 41869
41867: GO 41894
41869: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41870: LD_ADDR_VAR 0 3
41874: PUSH
41875: LD_INT 40
41877: PPUSH
41878: LD_VAR 0 1
41882: PPUSH
41883: CALL_OW 321
41887: PUSH
41888: LD_INT 2
41890: EQUAL
41891: ST_TO_ADDR
41892: GO 41928
41894: LD_INT 27
41896: DOUBLE
41897: EQUAL
41898: IFTRUE 41902
41900: GO 41927
41902: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41903: LD_ADDR_VAR 0 3
41907: PUSH
41908: LD_INT 35
41910: PPUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 321
41920: PUSH
41921: LD_INT 2
41923: EQUAL
41924: ST_TO_ADDR
41925: GO 41928
41927: POP
// end ;
41928: LD_VAR 0 3
41932: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41933: LD_INT 0
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
// result := false ;
41946: LD_ADDR_VAR 0 6
41950: PUSH
41951: LD_INT 0
41953: ST_TO_ADDR
// if btype = b_depot then
41954: LD_VAR 0 2
41958: PUSH
41959: LD_INT 0
41961: EQUAL
41962: IFFALSE 41974
// begin result := true ;
41964: LD_ADDR_VAR 0 6
41968: PUSH
41969: LD_INT 1
41971: ST_TO_ADDR
// exit ;
41972: GO 42800
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41974: LD_VAR 0 1
41978: NOT
41979: PUSH
41980: LD_VAR 0 1
41984: PPUSH
41985: CALL_OW 266
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: IN
42000: NOT
42001: OR
42002: PUSH
42003: LD_VAR 0 2
42007: NOT
42008: OR
42009: PUSH
42010: LD_VAR 0 5
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 3
42026: PUSH
42027: LD_INT 4
42029: PUSH
42030: LD_INT 5
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: IN
42041: NOT
42042: OR
42043: PUSH
42044: LD_VAR 0 3
42048: PPUSH
42049: LD_VAR 0 4
42053: PPUSH
42054: CALL_OW 488
42058: NOT
42059: OR
42060: IFFALSE 42064
// exit ;
42062: GO 42800
// side := GetSide ( depot ) ;
42064: LD_ADDR_VAR 0 9
42068: PUSH
42069: LD_VAR 0 1
42073: PPUSH
42074: CALL_OW 255
42078: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42079: LD_VAR 0 9
42083: PPUSH
42084: LD_VAR 0 2
42088: PPUSH
42089: CALL 41557 0 2
42093: NOT
42094: IFFALSE 42098
// exit ;
42096: GO 42800
// pom := GetBase ( depot ) ;
42098: LD_ADDR_VAR 0 10
42102: PUSH
42103: LD_VAR 0 1
42107: PPUSH
42108: CALL_OW 274
42112: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42113: LD_ADDR_VAR 0 11
42117: PUSH
42118: LD_VAR 0 2
42122: PPUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: CALL_OW 248
42132: PPUSH
42133: CALL_OW 450
42137: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42138: LD_VAR 0 10
42142: PPUSH
42143: LD_INT 1
42145: PPUSH
42146: CALL_OW 275
42150: PUSH
42151: LD_VAR 0 11
42155: PUSH
42156: LD_INT 1
42158: ARRAY
42159: GREATEREQUAL
42160: PUSH
42161: LD_VAR 0 10
42165: PPUSH
42166: LD_INT 2
42168: PPUSH
42169: CALL_OW 275
42173: PUSH
42174: LD_VAR 0 11
42178: PUSH
42179: LD_INT 2
42181: ARRAY
42182: GREATEREQUAL
42183: AND
42184: PUSH
42185: LD_VAR 0 10
42189: PPUSH
42190: LD_INT 3
42192: PPUSH
42193: CALL_OW 275
42197: PUSH
42198: LD_VAR 0 11
42202: PUSH
42203: LD_INT 3
42205: ARRAY
42206: GREATEREQUAL
42207: AND
42208: NOT
42209: IFFALSE 42213
// exit ;
42211: GO 42800
// if GetBType ( depot ) = b_depot then
42213: LD_VAR 0 1
42217: PPUSH
42218: CALL_OW 266
42222: PUSH
42223: LD_INT 0
42225: EQUAL
42226: IFFALSE 42238
// dist := 28 else
42228: LD_ADDR_VAR 0 14
42232: PUSH
42233: LD_INT 28
42235: ST_TO_ADDR
42236: GO 42246
// dist := 36 ;
42238: LD_ADDR_VAR 0 14
42242: PUSH
42243: LD_INT 36
42245: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42246: LD_VAR 0 1
42250: PPUSH
42251: LD_VAR 0 3
42255: PPUSH
42256: LD_VAR 0 4
42260: PPUSH
42261: CALL_OW 297
42265: PUSH
42266: LD_VAR 0 14
42270: GREATER
42271: IFFALSE 42275
// exit ;
42273: GO 42800
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42275: LD_ADDR_VAR 0 12
42279: PUSH
42280: LD_VAR 0 2
42284: PPUSH
42285: LD_VAR 0 3
42289: PPUSH
42290: LD_VAR 0 4
42294: PPUSH
42295: LD_VAR 0 5
42299: PPUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 248
42309: PPUSH
42310: LD_INT 0
42312: PPUSH
42313: CALL 42805 0 6
42317: ST_TO_ADDR
// if not hexes then
42318: LD_VAR 0 12
42322: NOT
42323: IFFALSE 42327
// exit ;
42325: GO 42800
// hex := GetHexInfo ( x , y ) ;
42327: LD_ADDR_VAR 0 15
42331: PUSH
42332: LD_VAR 0 3
42336: PPUSH
42337: LD_VAR 0 4
42341: PPUSH
42342: CALL_OW 546
42346: ST_TO_ADDR
// if hex [ 1 ] then
42347: LD_VAR 0 15
42351: PUSH
42352: LD_INT 1
42354: ARRAY
42355: IFFALSE 42359
// exit ;
42357: GO 42800
// height := hex [ 2 ] ;
42359: LD_ADDR_VAR 0 13
42363: PUSH
42364: LD_VAR 0 15
42368: PUSH
42369: LD_INT 2
42371: ARRAY
42372: ST_TO_ADDR
// for i = 1 to hexes do
42373: LD_ADDR_VAR 0 7
42377: PUSH
42378: DOUBLE
42379: LD_INT 1
42381: DEC
42382: ST_TO_ADDR
42383: LD_VAR 0 12
42387: PUSH
42388: FOR_TO
42389: IFFALSE 42719
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42391: LD_VAR 0 12
42395: PUSH
42396: LD_VAR 0 7
42400: ARRAY
42401: PUSH
42402: LD_INT 1
42404: ARRAY
42405: PPUSH
42406: LD_VAR 0 12
42410: PUSH
42411: LD_VAR 0 7
42415: ARRAY
42416: PUSH
42417: LD_INT 2
42419: ARRAY
42420: PPUSH
42421: CALL_OW 488
42425: NOT
42426: PUSH
42427: LD_VAR 0 12
42431: PUSH
42432: LD_VAR 0 7
42436: ARRAY
42437: PUSH
42438: LD_INT 1
42440: ARRAY
42441: PPUSH
42442: LD_VAR 0 12
42446: PUSH
42447: LD_VAR 0 7
42451: ARRAY
42452: PUSH
42453: LD_INT 2
42455: ARRAY
42456: PPUSH
42457: CALL_OW 428
42461: PUSH
42462: LD_INT 0
42464: GREATER
42465: OR
42466: PUSH
42467: LD_VAR 0 12
42471: PUSH
42472: LD_VAR 0 7
42476: ARRAY
42477: PUSH
42478: LD_INT 1
42480: ARRAY
42481: PPUSH
42482: LD_VAR 0 12
42486: PUSH
42487: LD_VAR 0 7
42491: ARRAY
42492: PUSH
42493: LD_INT 2
42495: ARRAY
42496: PPUSH
42497: CALL_OW 351
42501: OR
42502: IFFALSE 42508
// exit ;
42504: POP
42505: POP
42506: GO 42800
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42508: LD_ADDR_VAR 0 8
42512: PUSH
42513: LD_VAR 0 12
42517: PUSH
42518: LD_VAR 0 7
42522: ARRAY
42523: PUSH
42524: LD_INT 1
42526: ARRAY
42527: PPUSH
42528: LD_VAR 0 12
42532: PUSH
42533: LD_VAR 0 7
42537: ARRAY
42538: PUSH
42539: LD_INT 2
42541: ARRAY
42542: PPUSH
42543: CALL_OW 546
42547: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42548: LD_VAR 0 8
42552: PUSH
42553: LD_INT 1
42555: ARRAY
42556: PUSH
42557: LD_VAR 0 8
42561: PUSH
42562: LD_INT 2
42564: ARRAY
42565: PUSH
42566: LD_VAR 0 13
42570: PUSH
42571: LD_INT 2
42573: PLUS
42574: GREATER
42575: OR
42576: PUSH
42577: LD_VAR 0 8
42581: PUSH
42582: LD_INT 2
42584: ARRAY
42585: PUSH
42586: LD_VAR 0 13
42590: PUSH
42591: LD_INT 2
42593: MINUS
42594: LESS
42595: OR
42596: PUSH
42597: LD_VAR 0 8
42601: PUSH
42602: LD_INT 3
42604: ARRAY
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 8
42611: PUSH
42612: LD_INT 9
42614: PUSH
42615: LD_INT 10
42617: PUSH
42618: LD_INT 11
42620: PUSH
42621: LD_INT 12
42623: PUSH
42624: LD_INT 13
42626: PUSH
42627: LD_INT 16
42629: PUSH
42630: LD_INT 17
42632: PUSH
42633: LD_INT 18
42635: PUSH
42636: LD_INT 19
42638: PUSH
42639: LD_INT 20
42641: PUSH
42642: LD_INT 21
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: IN
42660: NOT
42661: OR
42662: PUSH
42663: LD_VAR 0 8
42667: PUSH
42668: LD_INT 5
42670: ARRAY
42671: NOT
42672: OR
42673: PUSH
42674: LD_VAR 0 8
42678: PUSH
42679: LD_INT 6
42681: ARRAY
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 7
42691: PUSH
42692: LD_INT 9
42694: PUSH
42695: LD_INT 10
42697: PUSH
42698: LD_INT 11
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: IN
42709: NOT
42710: OR
42711: IFFALSE 42717
// exit ;
42713: POP
42714: POP
42715: GO 42800
// end ;
42717: GO 42388
42719: POP
42720: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42721: LD_VAR 0 9
42725: PPUSH
42726: LD_VAR 0 3
42730: PPUSH
42731: LD_VAR 0 4
42735: PPUSH
42736: LD_INT 20
42738: PPUSH
42739: CALL 34723 0 4
42743: PUSH
42744: LD_INT 4
42746: ARRAY
42747: IFFALSE 42751
// exit ;
42749: GO 42800
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42751: LD_VAR 0 2
42755: PUSH
42756: LD_INT 29
42758: PUSH
42759: LD_INT 30
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: IN
42766: PUSH
42767: LD_VAR 0 3
42771: PPUSH
42772: LD_VAR 0 4
42776: PPUSH
42777: LD_VAR 0 9
42781: PPUSH
42782: CALL_OW 440
42786: NOT
42787: AND
42788: IFFALSE 42792
// exit ;
42790: GO 42800
// result := true ;
42792: LD_ADDR_VAR 0 6
42796: PUSH
42797: LD_INT 1
42799: ST_TO_ADDR
// end ;
42800: LD_VAR 0 6
42804: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42805: LD_INT 0
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
42811: PPUSH
42812: PPUSH
42813: PPUSH
42814: PPUSH
42815: PPUSH
42816: PPUSH
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
42832: PPUSH
42833: PPUSH
42834: PPUSH
42835: PPUSH
42836: PPUSH
42837: PPUSH
42838: PPUSH
42839: PPUSH
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
42862: PPUSH
42863: PPUSH
42864: PPUSH
// result = [ ] ;
42865: LD_ADDR_VAR 0 7
42869: PUSH
42870: EMPTY
42871: ST_TO_ADDR
// temp_list = [ ] ;
42872: LD_ADDR_VAR 0 9
42876: PUSH
42877: EMPTY
42878: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42879: LD_VAR 0 4
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: LD_INT 3
42895: PUSH
42896: LD_INT 4
42898: PUSH
42899: LD_INT 5
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: IN
42910: NOT
42911: PUSH
42912: LD_VAR 0 1
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: IN
42927: PUSH
42928: LD_VAR 0 5
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: IN
42947: NOT
42948: AND
42949: OR
42950: IFFALSE 42954
// exit ;
42952: GO 61345
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42954: LD_VAR 0 1
42958: PUSH
42959: LD_INT 6
42961: PUSH
42962: LD_INT 7
42964: PUSH
42965: LD_INT 8
42967: PUSH
42968: LD_INT 13
42970: PUSH
42971: LD_INT 12
42973: PUSH
42974: LD_INT 15
42976: PUSH
42977: LD_INT 11
42979: PUSH
42980: LD_INT 14
42982: PUSH
42983: LD_INT 10
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: IN
42997: IFFALSE 43007
// btype = b_lab ;
42999: LD_ADDR_VAR 0 1
43003: PUSH
43004: LD_INT 6
43006: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43007: LD_VAR 0 6
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: IN
43026: NOT
43027: PUSH
43028: LD_VAR 0 1
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: LD_INT 3
43044: PUSH
43045: LD_INT 6
43047: PUSH
43048: LD_INT 36
43050: PUSH
43051: LD_INT 4
43053: PUSH
43054: LD_INT 5
43056: PUSH
43057: LD_INT 31
43059: PUSH
43060: LD_INT 32
43062: PUSH
43063: LD_INT 33
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: IN
43079: NOT
43080: PUSH
43081: LD_VAR 0 6
43085: PUSH
43086: LD_INT 1
43088: EQUAL
43089: AND
43090: OR
43091: PUSH
43092: LD_VAR 0 1
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: IN
43107: NOT
43108: PUSH
43109: LD_VAR 0 6
43113: PUSH
43114: LD_INT 2
43116: EQUAL
43117: AND
43118: OR
43119: IFFALSE 43129
// mode = 0 ;
43121: LD_ADDR_VAR 0 6
43125: PUSH
43126: LD_INT 0
43128: ST_TO_ADDR
// case mode of 0 :
43129: LD_VAR 0 6
43133: PUSH
43134: LD_INT 0
43136: DOUBLE
43137: EQUAL
43138: IFTRUE 43142
43140: GO 54595
43142: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43143: LD_ADDR_VAR 0 11
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 3
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 3
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43336: LD_ADDR_VAR 0 12
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 3
43493: NEG
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 3
43504: NEG
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43532: LD_ADDR_VAR 0 13
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: LD_INT 2
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: LD_INT 3
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 3
43691: NEG
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 3
43703: NEG
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43731: LD_ADDR_VAR 0 14
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 3
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 3
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43927: LD_ADDR_VAR 0 15
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: NEG
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: NEG
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 3
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44120: LD_ADDR_VAR 0 16
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 3
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 3
44277: PUSH
44278: LD_INT 3
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 3
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44313: LD_ADDR_VAR 0 17
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44543: LD_ADDR_VAR 0 18
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 2
44719: NEG
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44773: LD_ADDR_VAR 0 19
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45003: LD_ADDR_VAR 0 20
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45233: LD_ADDR_VAR 0 21
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45463: LD_ADDR_VAR 0 22
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45693: LD_ADDR_VAR 0 23
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: LD_INT 3
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45973: LD_ADDR_VAR 0 24
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 3
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46249: LD_ADDR_VAR 0 25
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 3
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: LD_INT 3
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 3
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46523: LD_ADDR_VAR 0 26
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: LD_INT 3
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46799: LD_ADDR_VAR 0 27
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47079: LD_ADDR_VAR 0 28
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 3
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: NEG
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47361: LD_ADDR_VAR 0 29
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: NEG
47552: PUSH
47553: LD_INT 3
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 3
47605: NEG
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47640: LD_ADDR_VAR 0 30
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 3
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47918: LD_ADDR_VAR 0 31
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 3
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: NEG
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48196: LD_ADDR_VAR 0 32
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 3
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 3
48439: NEG
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48474: LD_ADDR_VAR 0 33
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 3
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 3
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48753: LD_ADDR_VAR 0 34
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 3
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 3
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49033: LD_ADDR_VAR 0 35
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49145: LD_ADDR_VAR 0 36
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49257: LD_ADDR_VAR 0 37
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49369: LD_ADDR_VAR 0 38
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49481: LD_ADDR_VAR 0 39
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49593: LD_ADDR_VAR 0 40
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49705: LD_ADDR_VAR 0 41
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 3
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 3
49948: PUSH
49949: LD_INT 3
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 3
49979: NEG
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 3
49990: NEG
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50055: LD_ADDR_VAR 0 42
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 3
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 3
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 3
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 3
50352: NEG
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: LD_INT 3
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50405: LD_ADDR_VAR 0 43
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 3
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 3
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50753: LD_ADDR_VAR 0 44
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 3
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 3
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 3
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: NEG
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51103: LD_ADDR_VAR 0 45
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: LD_INT 3
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51453: LD_ADDR_VAR 0 46
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 3
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: NEG
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51801: LD_ADDR_VAR 0 47
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51952: LD_ADDR_VAR 0 48
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52099: LD_ADDR_VAR 0 49
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52243: LD_ADDR_VAR 0 50
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52387: LD_ADDR_VAR 0 51
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52534: LD_ADDR_VAR 0 52
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52685: LD_ADDR_VAR 0 53
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52915: LD_ADDR_VAR 0 54
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53145: LD_ADDR_VAR 0 55
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53375: LD_ADDR_VAR 0 56
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53605: LD_ADDR_VAR 0 57
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: NEG
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53835: LD_ADDR_VAR 0 58
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54065: LD_ADDR_VAR 0 59
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54153: LD_ADDR_VAR 0 60
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54241: LD_ADDR_VAR 0 61
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54329: LD_ADDR_VAR 0 62
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54417: LD_ADDR_VAR 0 63
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54505: LD_ADDR_VAR 0 64
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: ST_TO_ADDR
// end ; 1 :
54593: GO 60490
54595: LD_INT 1
54597: DOUBLE
54598: EQUAL
54599: IFTRUE 54603
54601: GO 57226
54603: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54604: LD_ADDR_VAR 0 11
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 3
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54648: LD_ADDR_VAR 0 12
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 3
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 3
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54689: LD_ADDR_VAR 0 13
54693: PUSH
54694: LD_INT 3
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 3
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54729: LD_ADDR_VAR 0 14
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 3
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54770: LD_ADDR_VAR 0 15
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54814: LD_ADDR_VAR 0 16
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: LD_INT 3
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: NEG
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 3
54845: NEG
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54860: LD_ADDR_VAR 0 17
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 3
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54904: LD_ADDR_VAR 0 18
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54945: LD_ADDR_VAR 0 19
54949: PUSH
54950: LD_INT 3
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 3
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54985: LD_ADDR_VAR 0 20
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55026: LD_ADDR_VAR 0 21
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 3
55044: NEG
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55070: LD_ADDR_VAR 0 22
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 3
55101: NEG
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55116: LD_ADDR_VAR 0 23
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: LD_INT 4
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 3
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55160: LD_ADDR_VAR 0 24
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 4
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: LIST
55200: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55201: LD_ADDR_VAR 0 25
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 3
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 4
55218: PUSH
55219: LD_INT 3
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: LD_INT 4
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55241: LD_ADDR_VAR 0 26
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 4
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55282: LD_ADDR_VAR 0 27
55286: PUSH
55287: LD_INT 3
55289: NEG
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 3
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 4
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55326: LD_ADDR_VAR 0 28
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: LD_INT 3
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: NEG
55346: PUSH
55347: LD_INT 4
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 4
55357: NEG
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55372: LD_ADDR_VAR 0 29
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 3
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 4
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 4
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 3
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 5
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 5
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 4
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 6
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 6
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 5
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55527: LD_ADDR_VAR 0 30
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 4
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 4
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 5
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 5
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 5
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 6
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 6
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55670: LD_ADDR_VAR 0 31
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: LD_INT 3
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 4
55717: PUSH
55718: LD_INT 4
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 3
55727: PUSH
55728: LD_INT 4
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 5
55737: PUSH
55738: LD_INT 4
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 5
55747: PUSH
55748: LD_INT 5
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 4
55757: PUSH
55758: LD_INT 5
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 6
55767: PUSH
55768: LD_INT 5
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 6
55777: PUSH
55778: LD_INT 6
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 5
55787: PUSH
55788: LD_INT 6
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55809: LD_ADDR_VAR 0 32
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: LD_INT 4
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 4
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 5
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 5
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 4
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 6
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 6
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 5
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55952: LD_ADDR_VAR 0 33
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 3
55970: NEG
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 4
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 4
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 4
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 5
56038: NEG
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 5
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 5
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 6
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 6
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56107: LD_ADDR_VAR 0 34
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 3
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 3
56126: NEG
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: LD_INT 4
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 4
56162: NEG
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 4
56174: NEG
56175: PUSH
56176: LD_INT 4
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 4
56186: NEG
56187: PUSH
56188: LD_INT 5
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 5
56198: NEG
56199: PUSH
56200: LD_INT 4
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 5
56210: NEG
56211: PUSH
56212: LD_INT 5
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 5
56222: NEG
56223: PUSH
56224: LD_INT 6
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 6
56234: NEG
56235: PUSH
56236: LD_INT 5
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 6
56246: NEG
56247: PUSH
56248: LD_INT 6
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56270: LD_ADDR_VAR 0 41
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56314: LD_ADDR_VAR 0 42
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56355: LD_ADDR_VAR 0 43
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56395: LD_ADDR_VAR 0 44
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56436: LD_ADDR_VAR 0 45
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56480: LD_ADDR_VAR 0 46
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56526: LD_ADDR_VAR 0 47
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56559: LD_ADDR_VAR 0 48
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56590: LD_ADDR_VAR 0 49
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56619: LD_ADDR_VAR 0 50
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56648: LD_ADDR_VAR 0 51
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56679: LD_ADDR_VAR 0 52
56683: PUSH
56684: LD_INT 3
56686: NEG
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56712: LD_ADDR_VAR 0 53
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 3
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56756: LD_ADDR_VAR 0 54
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56797: LD_ADDR_VAR 0 55
56801: PUSH
56802: LD_INT 3
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56837: LD_ADDR_VAR 0 56
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56878: LD_ADDR_VAR 0 57
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56922: LD_ADDR_VAR 0 58
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: NEG
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56968: LD_ADDR_VAR 0 59
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57012: LD_ADDR_VAR 0 60
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57053: LD_ADDR_VAR 0 61
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57093: LD_ADDR_VAR 0 62
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57134: LD_ADDR_VAR 0 63
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57178: LD_ADDR_VAR 0 64
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: ST_TO_ADDR
// end ; 2 :
57224: GO 60490
57226: LD_INT 2
57228: DOUBLE
57229: EQUAL
57230: IFTRUE 57234
57232: GO 60489
57234: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57235: LD_ADDR_VAR 0 29
57239: PUSH
57240: LD_INT 4
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 4
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 5
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 5
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 5
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: LD_INT 3
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 4
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 4
57365: PUSH
57366: LD_INT 4
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: LD_INT 4
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: LD_INT 3
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 4
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 4
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 4
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 3
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 4
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 5
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 5
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 4
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: LD_INT 3
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: LD_INT 5
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 3
57518: NEG
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 3
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 4
57574: NEG
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 4
57585: NEG
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 4
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: LD_INT 4
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 4
57632: NEG
57633: PUSH
57634: LD_INT 5
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: LD_INT 4
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 4
57668: NEG
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 5
57680: NEG
57681: PUSH
57682: LD_INT 4
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 5
57692: NEG
57693: PUSH
57694: LD_INT 5
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: LD_INT 5
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 5
57716: NEG
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57773: LD_ADDR_VAR 0 30
57777: PUSH
57778: LD_INT 4
57780: PUSH
57781: LD_INT 4
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 4
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 5
57800: PUSH
57801: LD_INT 4
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 5
57810: PUSH
57811: LD_INT 5
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 4
57820: PUSH
57821: LD_INT 5
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 3
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 3
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 5
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: LD_INT 5
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 3
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: LD_INT 4
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 4
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: LD_INT 3
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 4
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 4
57963: NEG
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 4
57974: NEG
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 4
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 5
58019: NEG
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 5
58030: NEG
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 5
58042: NEG
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 3
58065: NEG
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: LD_INT 4
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 3
58113: NEG
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 4
58125: NEG
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 4
58137: NEG
58138: PUSH
58139: LD_INT 4
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: LD_INT 4
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 4
58161: NEG
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 4
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 5
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: LD_INT 4
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 3
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 4
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 5
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 5
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58320: LD_ADDR_VAR 0 31
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 4
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 3
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 4
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: LD_INT 5
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 5
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 4
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 3
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 5
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: LD_INT 3
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 3
58420: NEG
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 4
58476: NEG
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 4
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 4
58499: NEG
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 4
58522: NEG
58523: PUSH
58524: LD_INT 4
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 4
58534: NEG
58535: PUSH
58536: LD_INT 5
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: NEG
58547: PUSH
58548: LD_INT 4
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 4
58570: NEG
58571: PUSH
58572: LD_INT 3
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 5
58582: NEG
58583: PUSH
58584: LD_INT 4
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 5
58594: NEG
58595: PUSH
58596: LD_INT 5
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: LD_INT 5
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 5
58618: NEG
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 3
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 4
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 4
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 4
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 4
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 4
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 5
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 5
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 4
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 5
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58870: LD_ADDR_VAR 0 32
58874: PUSH
58875: LD_INT 4
58877: NEG
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 4
58888: NEG
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 5
58933: NEG
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 5
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 5
58956: NEG
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: NEG
58992: PUSH
58993: LD_INT 4
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 4
59039: NEG
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 4
59051: NEG
59052: PUSH
59053: LD_INT 4
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: LD_INT 4
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 4
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: LD_INT 4
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 5
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: LD_INT 4
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 4
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 5
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 3
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 5
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 3
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 3
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 4
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 4
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: LD_INT 4
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 4
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 5
59302: PUSH
59303: LD_INT 4
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 5
59312: PUSH
59313: LD_INT 5
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 4
59322: PUSH
59323: LD_INT 5
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: LD_INT 4
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 5
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: LD_INT 5
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59417: LD_ADDR_VAR 0 33
59421: PUSH
59422: LD_INT 4
59424: NEG
59425: PUSH
59426: LD_INT 4
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 4
59436: NEG
59437: PUSH
59438: LD_INT 5
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 3
59448: NEG
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: LD_INT 3
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 4
59472: NEG
59473: PUSH
59474: LD_INT 3
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: LD_INT 4
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 5
59496: NEG
59497: PUSH
59498: LD_INT 5
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: LD_INT 5
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 5
59520: NEG
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 4
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 4
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 2
59622: NEG
59623: PUSH
59624: LD_INT 4
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 4
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 4
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 5
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 5
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 3
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: LD_INT 2
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 5
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 3
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: LD_INT 3
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: LD_INT 4
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 4
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 4
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 5
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: LD_INT 5
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: LD_INT 4
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: LD_INT 5
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 3
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59955: LD_ADDR_VAR 0 34
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 4
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 5
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 4
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 3
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 4
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 5
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: LD_INT 3
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: LD_INT 5
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 3
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 4
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 4
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 4
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 5
60177: PUSH
60178: LD_INT 4
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 5
60187: PUSH
60188: LD_INT 5
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 4
60197: PUSH
60198: LD_INT 5
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: LD_INT 4
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: LD_INT 3
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 5
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: LD_INT 5
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: LD_INT 4
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 4
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: LD_INT 4
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 4
60340: NEG
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 4
60351: NEG
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 5
60396: NEG
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 5
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 5
60419: NEG
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: ST_TO_ADDR
// end ; end ;
60487: GO 60490
60489: POP
// case btype of b_depot , b_warehouse :
60490: LD_VAR 0 1
60494: PUSH
60495: LD_INT 0
60497: DOUBLE
60498: EQUAL
60499: IFTRUE 60509
60501: LD_INT 1
60503: DOUBLE
60504: EQUAL
60505: IFTRUE 60509
60507: GO 60710
60509: POP
// case nation of nation_american :
60510: LD_VAR 0 5
60514: PUSH
60515: LD_INT 1
60517: DOUBLE
60518: EQUAL
60519: IFTRUE 60523
60521: GO 60579
60523: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60524: LD_ADDR_VAR 0 9
60528: PUSH
60529: LD_VAR 0 11
60533: PUSH
60534: LD_VAR 0 12
60538: PUSH
60539: LD_VAR 0 13
60543: PUSH
60544: LD_VAR 0 14
60548: PUSH
60549: LD_VAR 0 15
60553: PUSH
60554: LD_VAR 0 16
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: PUSH
60567: LD_VAR 0 4
60571: PUSH
60572: LD_INT 1
60574: PLUS
60575: ARRAY
60576: ST_TO_ADDR
60577: GO 60708
60579: LD_INT 2
60581: DOUBLE
60582: EQUAL
60583: IFTRUE 60587
60585: GO 60643
60587: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60588: LD_ADDR_VAR 0 9
60592: PUSH
60593: LD_VAR 0 17
60597: PUSH
60598: LD_VAR 0 18
60602: PUSH
60603: LD_VAR 0 19
60607: PUSH
60608: LD_VAR 0 20
60612: PUSH
60613: LD_VAR 0 21
60617: PUSH
60618: LD_VAR 0 22
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: PUSH
60631: LD_VAR 0 4
60635: PUSH
60636: LD_INT 1
60638: PLUS
60639: ARRAY
60640: ST_TO_ADDR
60641: GO 60708
60643: LD_INT 3
60645: DOUBLE
60646: EQUAL
60647: IFTRUE 60651
60649: GO 60707
60651: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60652: LD_ADDR_VAR 0 9
60656: PUSH
60657: LD_VAR 0 23
60661: PUSH
60662: LD_VAR 0 24
60666: PUSH
60667: LD_VAR 0 25
60671: PUSH
60672: LD_VAR 0 26
60676: PUSH
60677: LD_VAR 0 27
60681: PUSH
60682: LD_VAR 0 28
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: PUSH
60695: LD_VAR 0 4
60699: PUSH
60700: LD_INT 1
60702: PLUS
60703: ARRAY
60704: ST_TO_ADDR
60705: GO 60708
60707: POP
60708: GO 61263
60710: LD_INT 2
60712: DOUBLE
60713: EQUAL
60714: IFTRUE 60724
60716: LD_INT 3
60718: DOUBLE
60719: EQUAL
60720: IFTRUE 60724
60722: GO 60780
60724: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60725: LD_ADDR_VAR 0 9
60729: PUSH
60730: LD_VAR 0 29
60734: PUSH
60735: LD_VAR 0 30
60739: PUSH
60740: LD_VAR 0 31
60744: PUSH
60745: LD_VAR 0 32
60749: PUSH
60750: LD_VAR 0 33
60754: PUSH
60755: LD_VAR 0 34
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: PUSH
60768: LD_VAR 0 4
60772: PUSH
60773: LD_INT 1
60775: PLUS
60776: ARRAY
60777: ST_TO_ADDR
60778: GO 61263
60780: LD_INT 16
60782: DOUBLE
60783: EQUAL
60784: IFTRUE 60842
60786: LD_INT 17
60788: DOUBLE
60789: EQUAL
60790: IFTRUE 60842
60792: LD_INT 18
60794: DOUBLE
60795: EQUAL
60796: IFTRUE 60842
60798: LD_INT 19
60800: DOUBLE
60801: EQUAL
60802: IFTRUE 60842
60804: LD_INT 22
60806: DOUBLE
60807: EQUAL
60808: IFTRUE 60842
60810: LD_INT 20
60812: DOUBLE
60813: EQUAL
60814: IFTRUE 60842
60816: LD_INT 21
60818: DOUBLE
60819: EQUAL
60820: IFTRUE 60842
60822: LD_INT 23
60824: DOUBLE
60825: EQUAL
60826: IFTRUE 60842
60828: LD_INT 24
60830: DOUBLE
60831: EQUAL
60832: IFTRUE 60842
60834: LD_INT 25
60836: DOUBLE
60837: EQUAL
60838: IFTRUE 60842
60840: GO 60898
60842: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60843: LD_ADDR_VAR 0 9
60847: PUSH
60848: LD_VAR 0 35
60852: PUSH
60853: LD_VAR 0 36
60857: PUSH
60858: LD_VAR 0 37
60862: PUSH
60863: LD_VAR 0 38
60867: PUSH
60868: LD_VAR 0 39
60872: PUSH
60873: LD_VAR 0 40
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: PUSH
60886: LD_VAR 0 4
60890: PUSH
60891: LD_INT 1
60893: PLUS
60894: ARRAY
60895: ST_TO_ADDR
60896: GO 61263
60898: LD_INT 6
60900: DOUBLE
60901: EQUAL
60902: IFTRUE 60954
60904: LD_INT 7
60906: DOUBLE
60907: EQUAL
60908: IFTRUE 60954
60910: LD_INT 8
60912: DOUBLE
60913: EQUAL
60914: IFTRUE 60954
60916: LD_INT 13
60918: DOUBLE
60919: EQUAL
60920: IFTRUE 60954
60922: LD_INT 12
60924: DOUBLE
60925: EQUAL
60926: IFTRUE 60954
60928: LD_INT 15
60930: DOUBLE
60931: EQUAL
60932: IFTRUE 60954
60934: LD_INT 11
60936: DOUBLE
60937: EQUAL
60938: IFTRUE 60954
60940: LD_INT 14
60942: DOUBLE
60943: EQUAL
60944: IFTRUE 60954
60946: LD_INT 10
60948: DOUBLE
60949: EQUAL
60950: IFTRUE 60954
60952: GO 61010
60954: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60955: LD_ADDR_VAR 0 9
60959: PUSH
60960: LD_VAR 0 41
60964: PUSH
60965: LD_VAR 0 42
60969: PUSH
60970: LD_VAR 0 43
60974: PUSH
60975: LD_VAR 0 44
60979: PUSH
60980: LD_VAR 0 45
60984: PUSH
60985: LD_VAR 0 46
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: PUSH
60998: LD_VAR 0 4
61002: PUSH
61003: LD_INT 1
61005: PLUS
61006: ARRAY
61007: ST_TO_ADDR
61008: GO 61263
61010: LD_INT 36
61012: DOUBLE
61013: EQUAL
61014: IFTRUE 61018
61016: GO 61074
61018: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61019: LD_ADDR_VAR 0 9
61023: PUSH
61024: LD_VAR 0 47
61028: PUSH
61029: LD_VAR 0 48
61033: PUSH
61034: LD_VAR 0 49
61038: PUSH
61039: LD_VAR 0 50
61043: PUSH
61044: LD_VAR 0 51
61048: PUSH
61049: LD_VAR 0 52
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: PUSH
61062: LD_VAR 0 4
61066: PUSH
61067: LD_INT 1
61069: PLUS
61070: ARRAY
61071: ST_TO_ADDR
61072: GO 61263
61074: LD_INT 4
61076: DOUBLE
61077: EQUAL
61078: IFTRUE 61100
61080: LD_INT 5
61082: DOUBLE
61083: EQUAL
61084: IFTRUE 61100
61086: LD_INT 34
61088: DOUBLE
61089: EQUAL
61090: IFTRUE 61100
61092: LD_INT 37
61094: DOUBLE
61095: EQUAL
61096: IFTRUE 61100
61098: GO 61156
61100: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61101: LD_ADDR_VAR 0 9
61105: PUSH
61106: LD_VAR 0 53
61110: PUSH
61111: LD_VAR 0 54
61115: PUSH
61116: LD_VAR 0 55
61120: PUSH
61121: LD_VAR 0 56
61125: PUSH
61126: LD_VAR 0 57
61130: PUSH
61131: LD_VAR 0 58
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: PUSH
61144: LD_VAR 0 4
61148: PUSH
61149: LD_INT 1
61151: PLUS
61152: ARRAY
61153: ST_TO_ADDR
61154: GO 61263
61156: LD_INT 31
61158: DOUBLE
61159: EQUAL
61160: IFTRUE 61206
61162: LD_INT 32
61164: DOUBLE
61165: EQUAL
61166: IFTRUE 61206
61168: LD_INT 33
61170: DOUBLE
61171: EQUAL
61172: IFTRUE 61206
61174: LD_INT 27
61176: DOUBLE
61177: EQUAL
61178: IFTRUE 61206
61180: LD_INT 26
61182: DOUBLE
61183: EQUAL
61184: IFTRUE 61206
61186: LD_INT 28
61188: DOUBLE
61189: EQUAL
61190: IFTRUE 61206
61192: LD_INT 29
61194: DOUBLE
61195: EQUAL
61196: IFTRUE 61206
61198: LD_INT 30
61200: DOUBLE
61201: EQUAL
61202: IFTRUE 61206
61204: GO 61262
61206: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61207: LD_ADDR_VAR 0 9
61211: PUSH
61212: LD_VAR 0 59
61216: PUSH
61217: LD_VAR 0 60
61221: PUSH
61222: LD_VAR 0 61
61226: PUSH
61227: LD_VAR 0 62
61231: PUSH
61232: LD_VAR 0 63
61236: PUSH
61237: LD_VAR 0 64
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: PUSH
61250: LD_VAR 0 4
61254: PUSH
61255: LD_INT 1
61257: PLUS
61258: ARRAY
61259: ST_TO_ADDR
61260: GO 61263
61262: POP
// temp_list2 = [ ] ;
61263: LD_ADDR_VAR 0 10
61267: PUSH
61268: EMPTY
61269: ST_TO_ADDR
// for i in temp_list do
61270: LD_ADDR_VAR 0 8
61274: PUSH
61275: LD_VAR 0 9
61279: PUSH
61280: FOR_IN
61281: IFFALSE 61333
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61283: LD_ADDR_VAR 0 10
61287: PUSH
61288: LD_VAR 0 10
61292: PUSH
61293: LD_VAR 0 8
61297: PUSH
61298: LD_INT 1
61300: ARRAY
61301: PUSH
61302: LD_VAR 0 2
61306: PLUS
61307: PUSH
61308: LD_VAR 0 8
61312: PUSH
61313: LD_INT 2
61315: ARRAY
61316: PUSH
61317: LD_VAR 0 3
61321: PLUS
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: EMPTY
61328: LIST
61329: ADD
61330: ST_TO_ADDR
61331: GO 61280
61333: POP
61334: POP
// result = temp_list2 ;
61335: LD_ADDR_VAR 0 7
61339: PUSH
61340: LD_VAR 0 10
61344: ST_TO_ADDR
// end ;
61345: LD_VAR 0 7
61349: RET
// export function EnemyInRange ( unit , dist ) ; begin
61350: LD_INT 0
61352: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61353: LD_ADDR_VAR 0 3
61357: PUSH
61358: LD_VAR 0 1
61362: PPUSH
61363: CALL_OW 255
61367: PPUSH
61368: LD_VAR 0 1
61372: PPUSH
61373: CALL_OW 250
61377: PPUSH
61378: LD_VAR 0 1
61382: PPUSH
61383: CALL_OW 251
61387: PPUSH
61388: LD_VAR 0 2
61392: PPUSH
61393: CALL 34723 0 4
61397: PUSH
61398: LD_INT 4
61400: ARRAY
61401: ST_TO_ADDR
// end ;
61402: LD_VAR 0 3
61406: RET
// export function PlayerSeeMe ( unit ) ; begin
61407: LD_INT 0
61409: PPUSH
// result := See ( your_side , unit ) ;
61410: LD_ADDR_VAR 0 2
61414: PUSH
61415: LD_OWVAR 2
61419: PPUSH
61420: LD_VAR 0 1
61424: PPUSH
61425: CALL_OW 292
61429: ST_TO_ADDR
// end ;
61430: LD_VAR 0 2
61434: RET
// export function ReverseDir ( unit ) ; begin
61435: LD_INT 0
61437: PPUSH
// if not unit then
61438: LD_VAR 0 1
61442: NOT
61443: IFFALSE 61447
// exit ;
61445: GO 61470
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61447: LD_ADDR_VAR 0 2
61451: PUSH
61452: LD_VAR 0 1
61456: PPUSH
61457: CALL_OW 254
61461: PUSH
61462: LD_INT 3
61464: PLUS
61465: PUSH
61466: LD_INT 6
61468: MOD
61469: ST_TO_ADDR
// end ;
61470: LD_VAR 0 2
61474: RET
// export function ReverseArray ( array ) ; var i ; begin
61475: LD_INT 0
61477: PPUSH
61478: PPUSH
// if not array then
61479: LD_VAR 0 1
61483: NOT
61484: IFFALSE 61488
// exit ;
61486: GO 61543
// result := [ ] ;
61488: LD_ADDR_VAR 0 2
61492: PUSH
61493: EMPTY
61494: ST_TO_ADDR
// for i := array downto 1 do
61495: LD_ADDR_VAR 0 3
61499: PUSH
61500: DOUBLE
61501: LD_VAR 0 1
61505: INC
61506: ST_TO_ADDR
61507: LD_INT 1
61509: PUSH
61510: FOR_DOWNTO
61511: IFFALSE 61541
// result := Join ( result , array [ i ] ) ;
61513: LD_ADDR_VAR 0 2
61517: PUSH
61518: LD_VAR 0 2
61522: PPUSH
61523: LD_VAR 0 1
61527: PUSH
61528: LD_VAR 0 3
61532: ARRAY
61533: PPUSH
61534: CALL 66186 0 2
61538: ST_TO_ADDR
61539: GO 61510
61541: POP
61542: POP
// end ;
61543: LD_VAR 0 2
61547: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61548: LD_INT 0
61550: PPUSH
61551: PPUSH
61552: PPUSH
61553: PPUSH
61554: PPUSH
61555: PPUSH
// if not unit or not hexes then
61556: LD_VAR 0 1
61560: NOT
61561: PUSH
61562: LD_VAR 0 2
61566: NOT
61567: OR
61568: IFFALSE 61572
// exit ;
61570: GO 61695
// dist := 9999 ;
61572: LD_ADDR_VAR 0 5
61576: PUSH
61577: LD_INT 9999
61579: ST_TO_ADDR
// for i = 1 to hexes do
61580: LD_ADDR_VAR 0 4
61584: PUSH
61585: DOUBLE
61586: LD_INT 1
61588: DEC
61589: ST_TO_ADDR
61590: LD_VAR 0 2
61594: PUSH
61595: FOR_TO
61596: IFFALSE 61683
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61598: LD_ADDR_VAR 0 6
61602: PUSH
61603: LD_VAR 0 1
61607: PPUSH
61608: LD_VAR 0 2
61612: PUSH
61613: LD_VAR 0 4
61617: ARRAY
61618: PUSH
61619: LD_INT 1
61621: ARRAY
61622: PPUSH
61623: LD_VAR 0 2
61627: PUSH
61628: LD_VAR 0 4
61632: ARRAY
61633: PUSH
61634: LD_INT 2
61636: ARRAY
61637: PPUSH
61638: CALL_OW 297
61642: ST_TO_ADDR
// if tdist < dist then
61643: LD_VAR 0 6
61647: PUSH
61648: LD_VAR 0 5
61652: LESS
61653: IFFALSE 61681
// begin hex := hexes [ i ] ;
61655: LD_ADDR_VAR 0 8
61659: PUSH
61660: LD_VAR 0 2
61664: PUSH
61665: LD_VAR 0 4
61669: ARRAY
61670: ST_TO_ADDR
// dist := tdist ;
61671: LD_ADDR_VAR 0 5
61675: PUSH
61676: LD_VAR 0 6
61680: ST_TO_ADDR
// end ; end ;
61681: GO 61595
61683: POP
61684: POP
// result := hex ;
61685: LD_ADDR_VAR 0 3
61689: PUSH
61690: LD_VAR 0 8
61694: ST_TO_ADDR
// end ;
61695: LD_VAR 0 3
61699: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61700: LD_INT 0
61702: PPUSH
61703: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61704: LD_VAR 0 1
61708: NOT
61709: PUSH
61710: LD_VAR 0 1
61714: PUSH
61715: LD_INT 21
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 23
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PPUSH
61739: CALL_OW 69
61743: IN
61744: NOT
61745: OR
61746: IFFALSE 61750
// exit ;
61748: GO 61797
// for i = 1 to 3 do
61750: LD_ADDR_VAR 0 3
61754: PUSH
61755: DOUBLE
61756: LD_INT 1
61758: DEC
61759: ST_TO_ADDR
61760: LD_INT 3
61762: PUSH
61763: FOR_TO
61764: IFFALSE 61795
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61766: LD_VAR 0 1
61770: PPUSH
61771: CALL_OW 250
61775: PPUSH
61776: LD_VAR 0 1
61780: PPUSH
61781: CALL_OW 251
61785: PPUSH
61786: LD_INT 1
61788: PPUSH
61789: CALL_OW 453
61793: GO 61763
61795: POP
61796: POP
// end ;
61797: LD_VAR 0 2
61801: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61802: LD_INT 0
61804: PPUSH
61805: PPUSH
61806: PPUSH
61807: PPUSH
61808: PPUSH
61809: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61810: LD_VAR 0 1
61814: NOT
61815: PUSH
61816: LD_VAR 0 2
61820: NOT
61821: OR
61822: PUSH
61823: LD_VAR 0 1
61827: PPUSH
61828: CALL_OW 314
61832: OR
61833: IFFALSE 61837
// exit ;
61835: GO 62304
// if GetLives ( i ) < 250 then
61837: LD_VAR 0 4
61841: PPUSH
61842: CALL_OW 256
61846: PUSH
61847: LD_INT 250
61849: LESS
61850: IFFALSE 61863
// begin ComAutodestruct ( i ) ;
61852: LD_VAR 0 4
61856: PPUSH
61857: CALL 61700 0 1
// exit ;
61861: GO 62304
// end ; x := GetX ( enemy_unit ) ;
61863: LD_ADDR_VAR 0 7
61867: PUSH
61868: LD_VAR 0 2
61872: PPUSH
61873: CALL_OW 250
61877: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61878: LD_ADDR_VAR 0 8
61882: PUSH
61883: LD_VAR 0 2
61887: PPUSH
61888: CALL_OW 251
61892: ST_TO_ADDR
// if not x or not y then
61893: LD_VAR 0 7
61897: NOT
61898: PUSH
61899: LD_VAR 0 8
61903: NOT
61904: OR
61905: IFFALSE 61909
// exit ;
61907: GO 62304
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61909: LD_ADDR_VAR 0 6
61913: PUSH
61914: LD_VAR 0 7
61918: PPUSH
61919: LD_INT 0
61921: PPUSH
61922: LD_INT 4
61924: PPUSH
61925: CALL_OW 272
61929: PUSH
61930: LD_VAR 0 8
61934: PPUSH
61935: LD_INT 0
61937: PPUSH
61938: LD_INT 4
61940: PPUSH
61941: CALL_OW 273
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_VAR 0 7
61954: PPUSH
61955: LD_INT 1
61957: PPUSH
61958: LD_INT 4
61960: PPUSH
61961: CALL_OW 272
61965: PUSH
61966: LD_VAR 0 8
61970: PPUSH
61971: LD_INT 1
61973: PPUSH
61974: LD_INT 4
61976: PPUSH
61977: CALL_OW 273
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_VAR 0 7
61990: PPUSH
61991: LD_INT 2
61993: PPUSH
61994: LD_INT 4
61996: PPUSH
61997: CALL_OW 272
62001: PUSH
62002: LD_VAR 0 8
62006: PPUSH
62007: LD_INT 2
62009: PPUSH
62010: LD_INT 4
62012: PPUSH
62013: CALL_OW 273
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_VAR 0 7
62026: PPUSH
62027: LD_INT 3
62029: PPUSH
62030: LD_INT 4
62032: PPUSH
62033: CALL_OW 272
62037: PUSH
62038: LD_VAR 0 8
62042: PPUSH
62043: LD_INT 3
62045: PPUSH
62046: LD_INT 4
62048: PPUSH
62049: CALL_OW 273
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_VAR 0 7
62062: PPUSH
62063: LD_INT 4
62065: PPUSH
62066: LD_INT 4
62068: PPUSH
62069: CALL_OW 272
62073: PUSH
62074: LD_VAR 0 8
62078: PPUSH
62079: LD_INT 4
62081: PPUSH
62082: LD_INT 4
62084: PPUSH
62085: CALL_OW 273
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_VAR 0 7
62098: PPUSH
62099: LD_INT 5
62101: PPUSH
62102: LD_INT 4
62104: PPUSH
62105: CALL_OW 272
62109: PUSH
62110: LD_VAR 0 8
62114: PPUSH
62115: LD_INT 5
62117: PPUSH
62118: LD_INT 4
62120: PPUSH
62121: CALL_OW 273
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: ST_TO_ADDR
// for i = tmp downto 1 do
62138: LD_ADDR_VAR 0 4
62142: PUSH
62143: DOUBLE
62144: LD_VAR 0 6
62148: INC
62149: ST_TO_ADDR
62150: LD_INT 1
62152: PUSH
62153: FOR_DOWNTO
62154: IFFALSE 62255
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62156: LD_VAR 0 6
62160: PUSH
62161: LD_VAR 0 4
62165: ARRAY
62166: PUSH
62167: LD_INT 1
62169: ARRAY
62170: PPUSH
62171: LD_VAR 0 6
62175: PUSH
62176: LD_VAR 0 4
62180: ARRAY
62181: PUSH
62182: LD_INT 2
62184: ARRAY
62185: PPUSH
62186: CALL_OW 488
62190: NOT
62191: PUSH
62192: LD_VAR 0 6
62196: PUSH
62197: LD_VAR 0 4
62201: ARRAY
62202: PUSH
62203: LD_INT 1
62205: ARRAY
62206: PPUSH
62207: LD_VAR 0 6
62211: PUSH
62212: LD_VAR 0 4
62216: ARRAY
62217: PUSH
62218: LD_INT 2
62220: ARRAY
62221: PPUSH
62222: CALL_OW 428
62226: PUSH
62227: LD_INT 0
62229: NONEQUAL
62230: OR
62231: IFFALSE 62253
// tmp := Delete ( tmp , i ) ;
62233: LD_ADDR_VAR 0 6
62237: PUSH
62238: LD_VAR 0 6
62242: PPUSH
62243: LD_VAR 0 4
62247: PPUSH
62248: CALL_OW 3
62252: ST_TO_ADDR
62253: GO 62153
62255: POP
62256: POP
// j := GetClosestHex ( unit , tmp ) ;
62257: LD_ADDR_VAR 0 5
62261: PUSH
62262: LD_VAR 0 1
62266: PPUSH
62267: LD_VAR 0 6
62271: PPUSH
62272: CALL 61548 0 2
62276: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62277: LD_VAR 0 1
62281: PPUSH
62282: LD_VAR 0 5
62286: PUSH
62287: LD_INT 1
62289: ARRAY
62290: PPUSH
62291: LD_VAR 0 5
62295: PUSH
62296: LD_INT 2
62298: ARRAY
62299: PPUSH
62300: CALL_OW 111
// end ;
62304: LD_VAR 0 3
62308: RET
// export function PrepareApemanSoldier ( ) ; begin
62309: LD_INT 0
62311: PPUSH
// uc_nation := 0 ;
62312: LD_ADDR_OWVAR 21
62316: PUSH
62317: LD_INT 0
62319: ST_TO_ADDR
// hc_sex := sex_male ;
62320: LD_ADDR_OWVAR 27
62324: PUSH
62325: LD_INT 1
62327: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62328: LD_ADDR_OWVAR 28
62332: PUSH
62333: LD_INT 15
62335: ST_TO_ADDR
// hc_gallery :=  ;
62336: LD_ADDR_OWVAR 33
62340: PUSH
62341: LD_STRING 
62343: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62344: LD_ADDR_OWVAR 31
62348: PUSH
62349: LD_INT 0
62351: PPUSH
62352: LD_INT 3
62354: PPUSH
62355: CALL_OW 12
62359: PUSH
62360: LD_INT 0
62362: PPUSH
62363: LD_INT 3
62365: PPUSH
62366: CALL_OW 12
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// end ;
62383: LD_VAR 0 1
62387: RET
// export function PrepareApemanEngineer ( ) ; begin
62388: LD_INT 0
62390: PPUSH
// uc_nation := 0 ;
62391: LD_ADDR_OWVAR 21
62395: PUSH
62396: LD_INT 0
62398: ST_TO_ADDR
// hc_sex := sex_male ;
62399: LD_ADDR_OWVAR 27
62403: PUSH
62404: LD_INT 1
62406: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62407: LD_ADDR_OWVAR 28
62411: PUSH
62412: LD_INT 16
62414: ST_TO_ADDR
// hc_gallery :=  ;
62415: LD_ADDR_OWVAR 33
62419: PUSH
62420: LD_STRING 
62422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62423: LD_ADDR_OWVAR 31
62427: PUSH
62428: LD_INT 0
62430: PPUSH
62431: LD_INT 3
62433: PPUSH
62434: CALL_OW 12
62438: PUSH
62439: LD_INT 0
62441: PPUSH
62442: LD_INT 3
62444: PPUSH
62445: CALL_OW 12
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: ST_TO_ADDR
// end ;
62462: LD_VAR 0 1
62466: RET
// export function PrepareApeman ( agressivity ) ; begin
62467: LD_INT 0
62469: PPUSH
// uc_side := 0 ;
62470: LD_ADDR_OWVAR 20
62474: PUSH
62475: LD_INT 0
62477: ST_TO_ADDR
// uc_nation := 0 ;
62478: LD_ADDR_OWVAR 21
62482: PUSH
62483: LD_INT 0
62485: ST_TO_ADDR
// hc_sex := sex_male ;
62486: LD_ADDR_OWVAR 27
62490: PUSH
62491: LD_INT 1
62493: ST_TO_ADDR
// hc_class := class_apeman ;
62494: LD_ADDR_OWVAR 28
62498: PUSH
62499: LD_INT 12
62501: ST_TO_ADDR
// hc_gallery :=  ;
62502: LD_ADDR_OWVAR 33
62506: PUSH
62507: LD_STRING 
62509: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62510: LD_ADDR_OWVAR 35
62514: PUSH
62515: LD_VAR 0 1
62519: NEG
62520: PPUSH
62521: LD_VAR 0 1
62525: PPUSH
62526: CALL_OW 12
62530: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62531: LD_ADDR_OWVAR 31
62535: PUSH
62536: LD_INT 0
62538: PPUSH
62539: LD_INT 3
62541: PPUSH
62542: CALL_OW 12
62546: PUSH
62547: LD_INT 0
62549: PPUSH
62550: LD_INT 3
62552: PPUSH
62553: CALL_OW 12
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: ST_TO_ADDR
// end ;
62570: LD_VAR 0 2
62574: RET
// export function PrepareTiger ( agressivity ) ; begin
62575: LD_INT 0
62577: PPUSH
// uc_side := 0 ;
62578: LD_ADDR_OWVAR 20
62582: PUSH
62583: LD_INT 0
62585: ST_TO_ADDR
// uc_nation := 0 ;
62586: LD_ADDR_OWVAR 21
62590: PUSH
62591: LD_INT 0
62593: ST_TO_ADDR
// hc_class := class_tiger ;
62594: LD_ADDR_OWVAR 28
62598: PUSH
62599: LD_INT 14
62601: ST_TO_ADDR
// hc_gallery :=  ;
62602: LD_ADDR_OWVAR 33
62606: PUSH
62607: LD_STRING 
62609: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62610: LD_ADDR_OWVAR 35
62614: PUSH
62615: LD_VAR 0 1
62619: NEG
62620: PPUSH
62621: LD_VAR 0 1
62625: PPUSH
62626: CALL_OW 12
62630: ST_TO_ADDR
// end ;
62631: LD_VAR 0 2
62635: RET
// export function PrepareEnchidna ( ) ; begin
62636: LD_INT 0
62638: PPUSH
// uc_side := 0 ;
62639: LD_ADDR_OWVAR 20
62643: PUSH
62644: LD_INT 0
62646: ST_TO_ADDR
// uc_nation := 0 ;
62647: LD_ADDR_OWVAR 21
62651: PUSH
62652: LD_INT 0
62654: ST_TO_ADDR
// hc_class := class_baggie ;
62655: LD_ADDR_OWVAR 28
62659: PUSH
62660: LD_INT 13
62662: ST_TO_ADDR
// hc_gallery :=  ;
62663: LD_ADDR_OWVAR 33
62667: PUSH
62668: LD_STRING 
62670: ST_TO_ADDR
// end ;
62671: LD_VAR 0 1
62675: RET
// export function PrepareFrog ( ) ; begin
62676: LD_INT 0
62678: PPUSH
// uc_side := 0 ;
62679: LD_ADDR_OWVAR 20
62683: PUSH
62684: LD_INT 0
62686: ST_TO_ADDR
// uc_nation := 0 ;
62687: LD_ADDR_OWVAR 21
62691: PUSH
62692: LD_INT 0
62694: ST_TO_ADDR
// hc_class := class_frog ;
62695: LD_ADDR_OWVAR 28
62699: PUSH
62700: LD_INT 19
62702: ST_TO_ADDR
// hc_gallery :=  ;
62703: LD_ADDR_OWVAR 33
62707: PUSH
62708: LD_STRING 
62710: ST_TO_ADDR
// end ;
62711: LD_VAR 0 1
62715: RET
// export function PrepareFish ( ) ; begin
62716: LD_INT 0
62718: PPUSH
// uc_side := 0 ;
62719: LD_ADDR_OWVAR 20
62723: PUSH
62724: LD_INT 0
62726: ST_TO_ADDR
// uc_nation := 0 ;
62727: LD_ADDR_OWVAR 21
62731: PUSH
62732: LD_INT 0
62734: ST_TO_ADDR
// hc_class := class_fish ;
62735: LD_ADDR_OWVAR 28
62739: PUSH
62740: LD_INT 20
62742: ST_TO_ADDR
// hc_gallery :=  ;
62743: LD_ADDR_OWVAR 33
62747: PUSH
62748: LD_STRING 
62750: ST_TO_ADDR
// end ;
62751: LD_VAR 0 1
62755: RET
// export function PrepareBird ( ) ; begin
62756: LD_INT 0
62758: PPUSH
// uc_side := 0 ;
62759: LD_ADDR_OWVAR 20
62763: PUSH
62764: LD_INT 0
62766: ST_TO_ADDR
// uc_nation := 0 ;
62767: LD_ADDR_OWVAR 21
62771: PUSH
62772: LD_INT 0
62774: ST_TO_ADDR
// hc_class := class_phororhacos ;
62775: LD_ADDR_OWVAR 28
62779: PUSH
62780: LD_INT 18
62782: ST_TO_ADDR
// hc_gallery :=  ;
62783: LD_ADDR_OWVAR 33
62787: PUSH
62788: LD_STRING 
62790: ST_TO_ADDR
// end ;
62791: LD_VAR 0 1
62795: RET
// export function PrepareHorse ( ) ; begin
62796: LD_INT 0
62798: PPUSH
// uc_side := 0 ;
62799: LD_ADDR_OWVAR 20
62803: PUSH
62804: LD_INT 0
62806: ST_TO_ADDR
// uc_nation := 0 ;
62807: LD_ADDR_OWVAR 21
62811: PUSH
62812: LD_INT 0
62814: ST_TO_ADDR
// hc_class := class_horse ;
62815: LD_ADDR_OWVAR 28
62819: PUSH
62820: LD_INT 21
62822: ST_TO_ADDR
// hc_gallery :=  ;
62823: LD_ADDR_OWVAR 33
62827: PUSH
62828: LD_STRING 
62830: ST_TO_ADDR
// end ;
62831: LD_VAR 0 1
62835: RET
// export function PrepareMastodont ( ) ; begin
62836: LD_INT 0
62838: PPUSH
// uc_side := 0 ;
62839: LD_ADDR_OWVAR 20
62843: PUSH
62844: LD_INT 0
62846: ST_TO_ADDR
// uc_nation := 0 ;
62847: LD_ADDR_OWVAR 21
62851: PUSH
62852: LD_INT 0
62854: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62855: LD_ADDR_OWVAR 37
62859: PUSH
62860: LD_INT 31
62862: ST_TO_ADDR
// vc_control := control_rider ;
62863: LD_ADDR_OWVAR 38
62867: PUSH
62868: LD_INT 4
62870: ST_TO_ADDR
// end ;
62871: LD_VAR 0 1
62875: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62876: LD_INT 0
62878: PPUSH
62879: PPUSH
62880: PPUSH
// uc_side = 0 ;
62881: LD_ADDR_OWVAR 20
62885: PUSH
62886: LD_INT 0
62888: ST_TO_ADDR
// uc_nation = 0 ;
62889: LD_ADDR_OWVAR 21
62893: PUSH
62894: LD_INT 0
62896: ST_TO_ADDR
// InitHc_All ( ) ;
62897: CALL_OW 584
// InitVc ;
62901: CALL_OW 20
// if mastodonts then
62905: LD_VAR 0 6
62909: IFFALSE 62976
// for i = 1 to mastodonts do
62911: LD_ADDR_VAR 0 11
62915: PUSH
62916: DOUBLE
62917: LD_INT 1
62919: DEC
62920: ST_TO_ADDR
62921: LD_VAR 0 6
62925: PUSH
62926: FOR_TO
62927: IFFALSE 62974
// begin vc_chassis := 31 ;
62929: LD_ADDR_OWVAR 37
62933: PUSH
62934: LD_INT 31
62936: ST_TO_ADDR
// vc_control := control_rider ;
62937: LD_ADDR_OWVAR 38
62941: PUSH
62942: LD_INT 4
62944: ST_TO_ADDR
// animal := CreateVehicle ;
62945: LD_ADDR_VAR 0 12
62949: PUSH
62950: CALL_OW 45
62954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62955: LD_VAR 0 12
62959: PPUSH
62960: LD_VAR 0 8
62964: PPUSH
62965: LD_INT 0
62967: PPUSH
62968: CALL 65104 0 3
// end ;
62972: GO 62926
62974: POP
62975: POP
// if horses then
62976: LD_VAR 0 5
62980: IFFALSE 63047
// for i = 1 to horses do
62982: LD_ADDR_VAR 0 11
62986: PUSH
62987: DOUBLE
62988: LD_INT 1
62990: DEC
62991: ST_TO_ADDR
62992: LD_VAR 0 5
62996: PUSH
62997: FOR_TO
62998: IFFALSE 63045
// begin hc_class := 21 ;
63000: LD_ADDR_OWVAR 28
63004: PUSH
63005: LD_INT 21
63007: ST_TO_ADDR
// hc_gallery :=  ;
63008: LD_ADDR_OWVAR 33
63012: PUSH
63013: LD_STRING 
63015: ST_TO_ADDR
// animal := CreateHuman ;
63016: LD_ADDR_VAR 0 12
63020: PUSH
63021: CALL_OW 44
63025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63026: LD_VAR 0 12
63030: PPUSH
63031: LD_VAR 0 8
63035: PPUSH
63036: LD_INT 0
63038: PPUSH
63039: CALL 65104 0 3
// end ;
63043: GO 62997
63045: POP
63046: POP
// if birds then
63047: LD_VAR 0 1
63051: IFFALSE 63118
// for i = 1 to birds do
63053: LD_ADDR_VAR 0 11
63057: PUSH
63058: DOUBLE
63059: LD_INT 1
63061: DEC
63062: ST_TO_ADDR
63063: LD_VAR 0 1
63067: PUSH
63068: FOR_TO
63069: IFFALSE 63116
// begin hc_class := 18 ;
63071: LD_ADDR_OWVAR 28
63075: PUSH
63076: LD_INT 18
63078: ST_TO_ADDR
// hc_gallery =  ;
63079: LD_ADDR_OWVAR 33
63083: PUSH
63084: LD_STRING 
63086: ST_TO_ADDR
// animal := CreateHuman ;
63087: LD_ADDR_VAR 0 12
63091: PUSH
63092: CALL_OW 44
63096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63097: LD_VAR 0 12
63101: PPUSH
63102: LD_VAR 0 8
63106: PPUSH
63107: LD_INT 0
63109: PPUSH
63110: CALL 65104 0 3
// end ;
63114: GO 63068
63116: POP
63117: POP
// if tigers then
63118: LD_VAR 0 2
63122: IFFALSE 63206
// for i = 1 to tigers do
63124: LD_ADDR_VAR 0 11
63128: PUSH
63129: DOUBLE
63130: LD_INT 1
63132: DEC
63133: ST_TO_ADDR
63134: LD_VAR 0 2
63138: PUSH
63139: FOR_TO
63140: IFFALSE 63204
// begin hc_class = class_tiger ;
63142: LD_ADDR_OWVAR 28
63146: PUSH
63147: LD_INT 14
63149: ST_TO_ADDR
// hc_gallery =  ;
63150: LD_ADDR_OWVAR 33
63154: PUSH
63155: LD_STRING 
63157: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63158: LD_ADDR_OWVAR 35
63162: PUSH
63163: LD_INT 7
63165: NEG
63166: PPUSH
63167: LD_INT 7
63169: PPUSH
63170: CALL_OW 12
63174: ST_TO_ADDR
// animal := CreateHuman ;
63175: LD_ADDR_VAR 0 12
63179: PUSH
63180: CALL_OW 44
63184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63185: LD_VAR 0 12
63189: PPUSH
63190: LD_VAR 0 8
63194: PPUSH
63195: LD_INT 0
63197: PPUSH
63198: CALL 65104 0 3
// end ;
63202: GO 63139
63204: POP
63205: POP
// if apemans then
63206: LD_VAR 0 3
63210: IFFALSE 63333
// for i = 1 to apemans do
63212: LD_ADDR_VAR 0 11
63216: PUSH
63217: DOUBLE
63218: LD_INT 1
63220: DEC
63221: ST_TO_ADDR
63222: LD_VAR 0 3
63226: PUSH
63227: FOR_TO
63228: IFFALSE 63331
// begin hc_class = class_apeman ;
63230: LD_ADDR_OWVAR 28
63234: PUSH
63235: LD_INT 12
63237: ST_TO_ADDR
// hc_gallery =  ;
63238: LD_ADDR_OWVAR 33
63242: PUSH
63243: LD_STRING 
63245: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63246: LD_ADDR_OWVAR 35
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PPUSH
63255: LD_INT 2
63257: PPUSH
63258: CALL_OW 12
63262: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63263: LD_ADDR_OWVAR 31
63267: PUSH
63268: LD_INT 1
63270: PPUSH
63271: LD_INT 3
63273: PPUSH
63274: CALL_OW 12
63278: PUSH
63279: LD_INT 1
63281: PPUSH
63282: LD_INT 3
63284: PPUSH
63285: CALL_OW 12
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: ST_TO_ADDR
// animal := CreateHuman ;
63302: LD_ADDR_VAR 0 12
63306: PUSH
63307: CALL_OW 44
63311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63312: LD_VAR 0 12
63316: PPUSH
63317: LD_VAR 0 8
63321: PPUSH
63322: LD_INT 0
63324: PPUSH
63325: CALL 65104 0 3
// end ;
63329: GO 63227
63331: POP
63332: POP
// if enchidnas then
63333: LD_VAR 0 4
63337: IFFALSE 63404
// for i = 1 to enchidnas do
63339: LD_ADDR_VAR 0 11
63343: PUSH
63344: DOUBLE
63345: LD_INT 1
63347: DEC
63348: ST_TO_ADDR
63349: LD_VAR 0 4
63353: PUSH
63354: FOR_TO
63355: IFFALSE 63402
// begin hc_class = 13 ;
63357: LD_ADDR_OWVAR 28
63361: PUSH
63362: LD_INT 13
63364: ST_TO_ADDR
// hc_gallery =  ;
63365: LD_ADDR_OWVAR 33
63369: PUSH
63370: LD_STRING 
63372: ST_TO_ADDR
// animal := CreateHuman ;
63373: LD_ADDR_VAR 0 12
63377: PUSH
63378: CALL_OW 44
63382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63383: LD_VAR 0 12
63387: PPUSH
63388: LD_VAR 0 8
63392: PPUSH
63393: LD_INT 0
63395: PPUSH
63396: CALL 65104 0 3
// end ;
63400: GO 63354
63402: POP
63403: POP
// if fishes then
63404: LD_VAR 0 7
63408: IFFALSE 63475
// for i = 1 to fishes do
63410: LD_ADDR_VAR 0 11
63414: PUSH
63415: DOUBLE
63416: LD_INT 1
63418: DEC
63419: ST_TO_ADDR
63420: LD_VAR 0 7
63424: PUSH
63425: FOR_TO
63426: IFFALSE 63473
// begin hc_class = 20 ;
63428: LD_ADDR_OWVAR 28
63432: PUSH
63433: LD_INT 20
63435: ST_TO_ADDR
// hc_gallery =  ;
63436: LD_ADDR_OWVAR 33
63440: PUSH
63441: LD_STRING 
63443: ST_TO_ADDR
// animal := CreateHuman ;
63444: LD_ADDR_VAR 0 12
63448: PUSH
63449: CALL_OW 44
63453: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63454: LD_VAR 0 12
63458: PPUSH
63459: LD_VAR 0 9
63463: PPUSH
63464: LD_INT 0
63466: PPUSH
63467: CALL 65104 0 3
// end ;
63471: GO 63425
63473: POP
63474: POP
// end ;
63475: LD_VAR 0 10
63479: RET
// export function WantHeal ( sci , unit ) ; begin
63480: LD_INT 0
63482: PPUSH
// if GetTaskList ( sci ) > 0 then
63483: LD_VAR 0 1
63487: PPUSH
63488: CALL_OW 437
63492: PUSH
63493: LD_INT 0
63495: GREATER
63496: IFFALSE 63566
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63498: LD_VAR 0 1
63502: PPUSH
63503: CALL_OW 437
63507: PUSH
63508: LD_INT 1
63510: ARRAY
63511: PUSH
63512: LD_INT 1
63514: ARRAY
63515: PUSH
63516: LD_STRING l
63518: EQUAL
63519: PUSH
63520: LD_VAR 0 1
63524: PPUSH
63525: CALL_OW 437
63529: PUSH
63530: LD_INT 1
63532: ARRAY
63533: PUSH
63534: LD_INT 4
63536: ARRAY
63537: PUSH
63538: LD_VAR 0 2
63542: EQUAL
63543: AND
63544: IFFALSE 63556
// result := true else
63546: LD_ADDR_VAR 0 3
63550: PUSH
63551: LD_INT 1
63553: ST_TO_ADDR
63554: GO 63564
// result := false ;
63556: LD_ADDR_VAR 0 3
63560: PUSH
63561: LD_INT 0
63563: ST_TO_ADDR
// end else
63564: GO 63574
// result := false ;
63566: LD_ADDR_VAR 0 3
63570: PUSH
63571: LD_INT 0
63573: ST_TO_ADDR
// end ;
63574: LD_VAR 0 3
63578: RET
// export function HealTarget ( sci ) ; begin
63579: LD_INT 0
63581: PPUSH
// if not sci then
63582: LD_VAR 0 1
63586: NOT
63587: IFFALSE 63591
// exit ;
63589: GO 63656
// result := 0 ;
63591: LD_ADDR_VAR 0 2
63595: PUSH
63596: LD_INT 0
63598: ST_TO_ADDR
// if GetTaskList ( sci ) then
63599: LD_VAR 0 1
63603: PPUSH
63604: CALL_OW 437
63608: IFFALSE 63656
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63610: LD_VAR 0 1
63614: PPUSH
63615: CALL_OW 437
63619: PUSH
63620: LD_INT 1
63622: ARRAY
63623: PUSH
63624: LD_INT 1
63626: ARRAY
63627: PUSH
63628: LD_STRING l
63630: EQUAL
63631: IFFALSE 63656
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63633: LD_ADDR_VAR 0 2
63637: PUSH
63638: LD_VAR 0 1
63642: PPUSH
63643: CALL_OW 437
63647: PUSH
63648: LD_INT 1
63650: ARRAY
63651: PUSH
63652: LD_INT 4
63654: ARRAY
63655: ST_TO_ADDR
// end ;
63656: LD_VAR 0 2
63660: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63661: LD_INT 0
63663: PPUSH
63664: PPUSH
63665: PPUSH
63666: PPUSH
// if not base_units then
63667: LD_VAR 0 1
63671: NOT
63672: IFFALSE 63676
// exit ;
63674: GO 63763
// result := false ;
63676: LD_ADDR_VAR 0 2
63680: PUSH
63681: LD_INT 0
63683: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63684: LD_ADDR_VAR 0 5
63688: PUSH
63689: LD_VAR 0 1
63693: PPUSH
63694: LD_INT 21
63696: PUSH
63697: LD_INT 3
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PPUSH
63704: CALL_OW 72
63708: ST_TO_ADDR
// if not tmp then
63709: LD_VAR 0 5
63713: NOT
63714: IFFALSE 63718
// exit ;
63716: GO 63763
// for i in tmp do
63718: LD_ADDR_VAR 0 3
63722: PUSH
63723: LD_VAR 0 5
63727: PUSH
63728: FOR_IN
63729: IFFALSE 63761
// begin result := EnemyInRange ( i , 22 ) ;
63731: LD_ADDR_VAR 0 2
63735: PUSH
63736: LD_VAR 0 3
63740: PPUSH
63741: LD_INT 22
63743: PPUSH
63744: CALL 61350 0 2
63748: ST_TO_ADDR
// if result then
63749: LD_VAR 0 2
63753: IFFALSE 63759
// exit ;
63755: POP
63756: POP
63757: GO 63763
// end ;
63759: GO 63728
63761: POP
63762: POP
// end ;
63763: LD_VAR 0 2
63767: RET
// export function FilterByTag ( units , tag ) ; begin
63768: LD_INT 0
63770: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63771: LD_ADDR_VAR 0 3
63775: PUSH
63776: LD_VAR 0 1
63780: PPUSH
63781: LD_INT 120
63783: PUSH
63784: LD_VAR 0 2
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PPUSH
63793: CALL_OW 72
63797: ST_TO_ADDR
// end ;
63798: LD_VAR 0 3
63802: RET
// export function IsDriver ( un ) ; begin
63803: LD_INT 0
63805: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63806: LD_ADDR_VAR 0 2
63810: PUSH
63811: LD_VAR 0 1
63815: PUSH
63816: LD_INT 55
63818: PUSH
63819: EMPTY
63820: LIST
63821: PPUSH
63822: CALL_OW 69
63826: IN
63827: ST_TO_ADDR
// end ;
63828: LD_VAR 0 2
63832: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63833: LD_INT 0
63835: PPUSH
63836: PPUSH
// list := [ ] ;
63837: LD_ADDR_VAR 0 5
63841: PUSH
63842: EMPTY
63843: ST_TO_ADDR
// case d of 0 :
63844: LD_VAR 0 3
63848: PUSH
63849: LD_INT 0
63851: DOUBLE
63852: EQUAL
63853: IFTRUE 63857
63855: GO 63990
63857: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63858: LD_ADDR_VAR 0 5
63862: PUSH
63863: LD_VAR 0 1
63867: PUSH
63868: LD_INT 4
63870: MINUS
63871: PUSH
63872: LD_VAR 0 2
63876: PUSH
63877: LD_INT 4
63879: MINUS
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: LIST
63888: PUSH
63889: LD_VAR 0 1
63893: PUSH
63894: LD_INT 3
63896: MINUS
63897: PUSH
63898: LD_VAR 0 2
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: PUSH
63911: LD_VAR 0 1
63915: PUSH
63916: LD_INT 4
63918: PLUS
63919: PUSH
63920: LD_VAR 0 2
63924: PUSH
63925: LD_INT 4
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: PUSH
63933: LD_VAR 0 1
63937: PUSH
63938: LD_INT 3
63940: PLUS
63941: PUSH
63942: LD_VAR 0 2
63946: PUSH
63947: LD_INT 3
63949: PLUS
63950: PUSH
63951: LD_INT 5
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: PUSH
63959: LD_VAR 0 1
63963: PUSH
63964: LD_VAR 0 2
63968: PUSH
63969: LD_INT 4
63971: PLUS
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: ST_TO_ADDR
// end ; 1 :
63988: GO 64688
63990: LD_INT 1
63992: DOUBLE
63993: EQUAL
63994: IFTRUE 63998
63996: GO 64131
63998: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63999: LD_ADDR_VAR 0 5
64003: PUSH
64004: LD_VAR 0 1
64008: PUSH
64009: LD_VAR 0 2
64013: PUSH
64014: LD_INT 4
64016: MINUS
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: PUSH
64026: LD_VAR 0 1
64030: PUSH
64031: LD_INT 3
64033: MINUS
64034: PUSH
64035: LD_VAR 0 2
64039: PUSH
64040: LD_INT 3
64042: MINUS
64043: PUSH
64044: LD_INT 2
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: LIST
64051: PUSH
64052: LD_VAR 0 1
64056: PUSH
64057: LD_INT 4
64059: MINUS
64060: PUSH
64061: LD_VAR 0 2
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: LIST
64073: PUSH
64074: LD_VAR 0 1
64078: PUSH
64079: LD_VAR 0 2
64083: PUSH
64084: LD_INT 3
64086: PLUS
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: LIST
64095: PUSH
64096: LD_VAR 0 1
64100: PUSH
64101: LD_INT 4
64103: PLUS
64104: PUSH
64105: LD_VAR 0 2
64109: PUSH
64110: LD_INT 4
64112: PLUS
64113: PUSH
64114: LD_INT 5
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: LIST
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: ST_TO_ADDR
// end ; 2 :
64129: GO 64688
64131: LD_INT 2
64133: DOUBLE
64134: EQUAL
64135: IFTRUE 64139
64137: GO 64268
64139: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64140: LD_ADDR_VAR 0 5
64144: PUSH
64145: LD_VAR 0 1
64149: PUSH
64150: LD_VAR 0 2
64154: PUSH
64155: LD_INT 3
64157: MINUS
64158: PUSH
64159: LD_INT 3
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: PUSH
64167: LD_VAR 0 1
64171: PUSH
64172: LD_INT 4
64174: PLUS
64175: PUSH
64176: LD_VAR 0 2
64180: PUSH
64181: LD_INT 4
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: PUSH
64189: LD_VAR 0 1
64193: PUSH
64194: LD_VAR 0 2
64198: PUSH
64199: LD_INT 4
64201: PLUS
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: LIST
64210: PUSH
64211: LD_VAR 0 1
64215: PUSH
64216: LD_INT 3
64218: MINUS
64219: PUSH
64220: LD_VAR 0 2
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: LIST
64232: PUSH
64233: LD_VAR 0 1
64237: PUSH
64238: LD_INT 4
64240: MINUS
64241: PUSH
64242: LD_VAR 0 2
64246: PUSH
64247: LD_INT 4
64249: MINUS
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: ST_TO_ADDR
// end ; 3 :
64266: GO 64688
64268: LD_INT 3
64270: DOUBLE
64271: EQUAL
64272: IFTRUE 64276
64274: GO 64409
64276: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64277: LD_ADDR_VAR 0 5
64281: PUSH
64282: LD_VAR 0 1
64286: PUSH
64287: LD_INT 3
64289: PLUS
64290: PUSH
64291: LD_VAR 0 2
64295: PUSH
64296: LD_INT 4
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: PUSH
64304: LD_VAR 0 1
64308: PUSH
64309: LD_INT 4
64311: PLUS
64312: PUSH
64313: LD_VAR 0 2
64317: PUSH
64318: LD_INT 4
64320: PLUS
64321: PUSH
64322: LD_INT 5
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: PUSH
64330: LD_VAR 0 1
64334: PUSH
64335: LD_INT 4
64337: MINUS
64338: PUSH
64339: LD_VAR 0 2
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: LIST
64351: PUSH
64352: LD_VAR 0 1
64356: PUSH
64357: LD_VAR 0 2
64361: PUSH
64362: LD_INT 4
64364: MINUS
64365: PUSH
64366: LD_INT 3
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: PUSH
64374: LD_VAR 0 1
64378: PUSH
64379: LD_INT 3
64381: MINUS
64382: PUSH
64383: LD_VAR 0 2
64387: PUSH
64388: LD_INT 3
64390: MINUS
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: ST_TO_ADDR
// end ; 4 :
64407: GO 64688
64409: LD_INT 4
64411: DOUBLE
64412: EQUAL
64413: IFTRUE 64417
64415: GO 64550
64417: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64418: LD_ADDR_VAR 0 5
64422: PUSH
64423: LD_VAR 0 1
64427: PUSH
64428: LD_VAR 0 2
64432: PUSH
64433: LD_INT 4
64435: PLUS
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: PUSH
64445: LD_VAR 0 1
64449: PUSH
64450: LD_INT 3
64452: PLUS
64453: PUSH
64454: LD_VAR 0 2
64458: PUSH
64459: LD_INT 3
64461: PLUS
64462: PUSH
64463: LD_INT 5
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: PUSH
64471: LD_VAR 0 1
64475: PUSH
64476: LD_INT 4
64478: PLUS
64479: PUSH
64480: LD_VAR 0 2
64484: PUSH
64485: LD_INT 4
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: PUSH
64493: LD_VAR 0 1
64497: PUSH
64498: LD_VAR 0 2
64502: PUSH
64503: LD_INT 3
64505: MINUS
64506: PUSH
64507: LD_INT 3
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: LIST
64514: PUSH
64515: LD_VAR 0 1
64519: PUSH
64520: LD_INT 4
64522: MINUS
64523: PUSH
64524: LD_VAR 0 2
64528: PUSH
64529: LD_INT 4
64531: MINUS
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: ST_TO_ADDR
// end ; 5 :
64548: GO 64688
64550: LD_INT 5
64552: DOUBLE
64553: EQUAL
64554: IFTRUE 64558
64556: GO 64687
64558: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64559: LD_ADDR_VAR 0 5
64563: PUSH
64564: LD_VAR 0 1
64568: PUSH
64569: LD_INT 4
64571: MINUS
64572: PUSH
64573: LD_VAR 0 2
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: PUSH
64586: LD_VAR 0 1
64590: PUSH
64591: LD_VAR 0 2
64595: PUSH
64596: LD_INT 4
64598: MINUS
64599: PUSH
64600: LD_INT 3
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: PUSH
64608: LD_VAR 0 1
64612: PUSH
64613: LD_INT 4
64615: PLUS
64616: PUSH
64617: LD_VAR 0 2
64621: PUSH
64622: LD_INT 4
64624: PLUS
64625: PUSH
64626: LD_INT 5
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: LIST
64633: PUSH
64634: LD_VAR 0 1
64638: PUSH
64639: LD_INT 3
64641: PLUS
64642: PUSH
64643: LD_VAR 0 2
64647: PUSH
64648: LD_INT 4
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: PUSH
64656: LD_VAR 0 1
64660: PUSH
64661: LD_VAR 0 2
64665: PUSH
64666: LD_INT 3
64668: PLUS
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: ST_TO_ADDR
// end ; end ;
64685: GO 64688
64687: POP
// result := list ;
64688: LD_ADDR_VAR 0 4
64692: PUSH
64693: LD_VAR 0 5
64697: ST_TO_ADDR
// end ;
64698: LD_VAR 0 4
64702: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64703: LD_INT 0
64705: PPUSH
64706: PPUSH
64707: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64708: LD_VAR 0 1
64712: NOT
64713: PUSH
64714: LD_VAR 0 2
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: LD_INT 3
64727: PUSH
64728: LD_INT 4
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: IN
64737: NOT
64738: OR
64739: IFFALSE 64743
// exit ;
64741: GO 64826
// tmp := [ ] ;
64743: LD_ADDR_VAR 0 5
64747: PUSH
64748: EMPTY
64749: ST_TO_ADDR
// for i in units do
64750: LD_ADDR_VAR 0 4
64754: PUSH
64755: LD_VAR 0 1
64759: PUSH
64760: FOR_IN
64761: IFFALSE 64795
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64763: LD_ADDR_VAR 0 5
64767: PUSH
64768: LD_VAR 0 5
64772: PPUSH
64773: LD_VAR 0 4
64777: PPUSH
64778: LD_VAR 0 2
64782: PPUSH
64783: CALL_OW 259
64787: PPUSH
64788: CALL 66186 0 2
64792: ST_TO_ADDR
64793: GO 64760
64795: POP
64796: POP
// if not tmp then
64797: LD_VAR 0 5
64801: NOT
64802: IFFALSE 64806
// exit ;
64804: GO 64826
// result := SortListByListDesc ( units , tmp ) ;
64806: LD_ADDR_VAR 0 3
64810: PUSH
64811: LD_VAR 0 1
64815: PPUSH
64816: LD_VAR 0 5
64820: PPUSH
64821: CALL_OW 77
64825: ST_TO_ADDR
// end ;
64826: LD_VAR 0 3
64830: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64831: LD_INT 0
64833: PPUSH
64834: PPUSH
64835: PPUSH
// result := false ;
64836: LD_ADDR_VAR 0 3
64840: PUSH
64841: LD_INT 0
64843: ST_TO_ADDR
// if not building then
64844: LD_VAR 0 2
64848: NOT
64849: IFFALSE 64853
// exit ;
64851: GO 64991
// x := GetX ( building ) ;
64853: LD_ADDR_VAR 0 4
64857: PUSH
64858: LD_VAR 0 2
64862: PPUSH
64863: CALL_OW 250
64867: ST_TO_ADDR
// y := GetY ( building ) ;
64868: LD_ADDR_VAR 0 5
64872: PUSH
64873: LD_VAR 0 2
64877: PPUSH
64878: CALL_OW 251
64882: ST_TO_ADDR
// if not x or not y then
64883: LD_VAR 0 4
64887: NOT
64888: PUSH
64889: LD_VAR 0 5
64893: NOT
64894: OR
64895: IFFALSE 64899
// exit ;
64897: GO 64991
// if GetTaskList ( unit ) then
64899: LD_VAR 0 1
64903: PPUSH
64904: CALL_OW 437
64908: IFFALSE 64991
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64910: LD_STRING e
64912: PUSH
64913: LD_VAR 0 1
64917: PPUSH
64918: CALL_OW 437
64922: PUSH
64923: LD_INT 1
64925: ARRAY
64926: PUSH
64927: LD_INT 1
64929: ARRAY
64930: EQUAL
64931: PUSH
64932: LD_VAR 0 4
64936: PUSH
64937: LD_VAR 0 1
64941: PPUSH
64942: CALL_OW 437
64946: PUSH
64947: LD_INT 1
64949: ARRAY
64950: PUSH
64951: LD_INT 2
64953: ARRAY
64954: EQUAL
64955: AND
64956: PUSH
64957: LD_VAR 0 5
64961: PUSH
64962: LD_VAR 0 1
64966: PPUSH
64967: CALL_OW 437
64971: PUSH
64972: LD_INT 1
64974: ARRAY
64975: PUSH
64976: LD_INT 3
64978: ARRAY
64979: EQUAL
64980: AND
64981: IFFALSE 64991
// result := true end ;
64983: LD_ADDR_VAR 0 3
64987: PUSH
64988: LD_INT 1
64990: ST_TO_ADDR
// end ;
64991: LD_VAR 0 3
64995: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64996: LD_INT 0
64998: PPUSH
// result := false ;
64999: LD_ADDR_VAR 0 4
65003: PUSH
65004: LD_INT 0
65006: ST_TO_ADDR
// if GetTaskList ( unit ) then
65007: LD_VAR 0 1
65011: PPUSH
65012: CALL_OW 437
65016: IFFALSE 65099
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65018: LD_STRING M
65020: PUSH
65021: LD_VAR 0 1
65025: PPUSH
65026: CALL_OW 437
65030: PUSH
65031: LD_INT 1
65033: ARRAY
65034: PUSH
65035: LD_INT 1
65037: ARRAY
65038: EQUAL
65039: PUSH
65040: LD_VAR 0 2
65044: PUSH
65045: LD_VAR 0 1
65049: PPUSH
65050: CALL_OW 437
65054: PUSH
65055: LD_INT 1
65057: ARRAY
65058: PUSH
65059: LD_INT 2
65061: ARRAY
65062: EQUAL
65063: AND
65064: PUSH
65065: LD_VAR 0 3
65069: PUSH
65070: LD_VAR 0 1
65074: PPUSH
65075: CALL_OW 437
65079: PUSH
65080: LD_INT 1
65082: ARRAY
65083: PUSH
65084: LD_INT 3
65086: ARRAY
65087: EQUAL
65088: AND
65089: IFFALSE 65099
// result := true ;
65091: LD_ADDR_VAR 0 4
65095: PUSH
65096: LD_INT 1
65098: ST_TO_ADDR
// end ; end ;
65099: LD_VAR 0 4
65103: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65104: LD_INT 0
65106: PPUSH
65107: PPUSH
65108: PPUSH
65109: PPUSH
// if not unit or not area then
65110: LD_VAR 0 1
65114: NOT
65115: PUSH
65116: LD_VAR 0 2
65120: NOT
65121: OR
65122: IFFALSE 65126
// exit ;
65124: GO 65289
// tmp := AreaToList ( area , i ) ;
65126: LD_ADDR_VAR 0 6
65130: PUSH
65131: LD_VAR 0 2
65135: PPUSH
65136: LD_VAR 0 5
65140: PPUSH
65141: CALL_OW 517
65145: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65146: LD_ADDR_VAR 0 5
65150: PUSH
65151: DOUBLE
65152: LD_INT 1
65154: DEC
65155: ST_TO_ADDR
65156: LD_VAR 0 6
65160: PUSH
65161: LD_INT 1
65163: ARRAY
65164: PUSH
65165: FOR_TO
65166: IFFALSE 65287
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65168: LD_ADDR_VAR 0 7
65172: PUSH
65173: LD_VAR 0 6
65177: PUSH
65178: LD_INT 1
65180: ARRAY
65181: PUSH
65182: LD_VAR 0 5
65186: ARRAY
65187: PUSH
65188: LD_VAR 0 6
65192: PUSH
65193: LD_INT 2
65195: ARRAY
65196: PUSH
65197: LD_VAR 0 5
65201: ARRAY
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65207: LD_INT 92
65209: PUSH
65210: LD_VAR 0 7
65214: PUSH
65215: LD_INT 1
65217: ARRAY
65218: PUSH
65219: LD_VAR 0 7
65223: PUSH
65224: LD_INT 2
65226: ARRAY
65227: PUSH
65228: LD_INT 3
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: PPUSH
65237: CALL_OW 69
65241: PUSH
65242: LD_INT 0
65244: EQUAL
65245: IFFALSE 65285
// begin PlaceUnitArea ( unit , area , mode ) ;
65247: LD_VAR 0 1
65251: PPUSH
65252: LD_VAR 0 2
65256: PPUSH
65257: LD_VAR 0 3
65261: PPUSH
65262: CALL_OW 49
// result := IsPlaced ( unit ) ;
65266: LD_ADDR_VAR 0 4
65270: PUSH
65271: LD_VAR 0 1
65275: PPUSH
65276: CALL_OW 305
65280: ST_TO_ADDR
// exit ;
65281: POP
65282: POP
65283: GO 65289
// end ; end ;
65285: GO 65165
65287: POP
65288: POP
// end ;
65289: LD_VAR 0 4
65293: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65294: LD_INT 0
65296: PPUSH
65297: PPUSH
65298: PPUSH
// if not side or side > 8 then
65299: LD_VAR 0 1
65303: NOT
65304: PUSH
65305: LD_VAR 0 1
65309: PUSH
65310: LD_INT 8
65312: GREATER
65313: OR
65314: IFFALSE 65318
// exit ;
65316: GO 65505
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65318: LD_ADDR_VAR 0 4
65322: PUSH
65323: LD_INT 22
65325: PUSH
65326: LD_VAR 0 1
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 21
65337: PUSH
65338: LD_INT 3
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PPUSH
65349: CALL_OW 69
65353: ST_TO_ADDR
// if not tmp then
65354: LD_VAR 0 4
65358: NOT
65359: IFFALSE 65363
// exit ;
65361: GO 65505
// enable_addtolog := true ;
65363: LD_ADDR_OWVAR 81
65367: PUSH
65368: LD_INT 1
65370: ST_TO_ADDR
// AddToLog ( [ ) ;
65371: LD_STRING [
65373: PPUSH
65374: CALL_OW 561
// for i in tmp do
65378: LD_ADDR_VAR 0 3
65382: PUSH
65383: LD_VAR 0 4
65387: PUSH
65388: FOR_IN
65389: IFFALSE 65496
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65391: LD_STRING [
65393: PUSH
65394: LD_VAR 0 3
65398: PPUSH
65399: CALL_OW 266
65403: STR
65404: PUSH
65405: LD_STRING , 
65407: STR
65408: PUSH
65409: LD_VAR 0 3
65413: PPUSH
65414: CALL_OW 250
65418: STR
65419: PUSH
65420: LD_STRING , 
65422: STR
65423: PUSH
65424: LD_VAR 0 3
65428: PPUSH
65429: CALL_OW 251
65433: STR
65434: PUSH
65435: LD_STRING , 
65437: STR
65438: PUSH
65439: LD_VAR 0 3
65443: PPUSH
65444: CALL_OW 254
65448: STR
65449: PUSH
65450: LD_STRING , 
65452: STR
65453: PUSH
65454: LD_VAR 0 3
65458: PPUSH
65459: LD_INT 1
65461: PPUSH
65462: CALL_OW 268
65466: STR
65467: PUSH
65468: LD_STRING , 
65470: STR
65471: PUSH
65472: LD_VAR 0 3
65476: PPUSH
65477: LD_INT 2
65479: PPUSH
65480: CALL_OW 268
65484: STR
65485: PUSH
65486: LD_STRING ],
65488: STR
65489: PPUSH
65490: CALL_OW 561
// end ;
65494: GO 65388
65496: POP
65497: POP
// AddToLog ( ]; ) ;
65498: LD_STRING ];
65500: PPUSH
65501: CALL_OW 561
// end ;
65505: LD_VAR 0 2
65509: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65510: LD_INT 0
65512: PPUSH
65513: PPUSH
65514: PPUSH
65515: PPUSH
65516: PPUSH
// if not area or not rate or not max then
65517: LD_VAR 0 1
65521: NOT
65522: PUSH
65523: LD_VAR 0 2
65527: NOT
65528: OR
65529: PUSH
65530: LD_VAR 0 4
65534: NOT
65535: OR
65536: IFFALSE 65540
// exit ;
65538: GO 65729
// while 1 do
65540: LD_INT 1
65542: IFFALSE 65729
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65544: LD_ADDR_VAR 0 9
65548: PUSH
65549: LD_VAR 0 1
65553: PPUSH
65554: LD_INT 1
65556: PPUSH
65557: CALL_OW 287
65561: PUSH
65562: LD_INT 10
65564: MUL
65565: ST_TO_ADDR
// r := rate / 10 ;
65566: LD_ADDR_VAR 0 7
65570: PUSH
65571: LD_VAR 0 2
65575: PUSH
65576: LD_INT 10
65578: DIVREAL
65579: ST_TO_ADDR
// time := 1 1$00 ;
65580: LD_ADDR_VAR 0 8
65584: PUSH
65585: LD_INT 2100
65587: ST_TO_ADDR
// if amount < min then
65588: LD_VAR 0 9
65592: PUSH
65593: LD_VAR 0 3
65597: LESS
65598: IFFALSE 65616
// r := r * 2 else
65600: LD_ADDR_VAR 0 7
65604: PUSH
65605: LD_VAR 0 7
65609: PUSH
65610: LD_INT 2
65612: MUL
65613: ST_TO_ADDR
65614: GO 65642
// if amount > max then
65616: LD_VAR 0 9
65620: PUSH
65621: LD_VAR 0 4
65625: GREATER
65626: IFFALSE 65642
// r := r / 2 ;
65628: LD_ADDR_VAR 0 7
65632: PUSH
65633: LD_VAR 0 7
65637: PUSH
65638: LD_INT 2
65640: DIVREAL
65641: ST_TO_ADDR
// time := time / r ;
65642: LD_ADDR_VAR 0 8
65646: PUSH
65647: LD_VAR 0 8
65651: PUSH
65652: LD_VAR 0 7
65656: DIVREAL
65657: ST_TO_ADDR
// if time < 0 then
65658: LD_VAR 0 8
65662: PUSH
65663: LD_INT 0
65665: LESS
65666: IFFALSE 65683
// time := time * - 1 ;
65668: LD_ADDR_VAR 0 8
65672: PUSH
65673: LD_VAR 0 8
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: MUL
65682: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65683: LD_VAR 0 8
65687: PUSH
65688: LD_INT 35
65690: PPUSH
65691: LD_INT 875
65693: PPUSH
65694: CALL_OW 12
65698: PLUS
65699: PPUSH
65700: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65704: LD_INT 1
65706: PPUSH
65707: LD_INT 5
65709: PPUSH
65710: CALL_OW 12
65714: PPUSH
65715: LD_VAR 0 1
65719: PPUSH
65720: LD_INT 1
65722: PPUSH
65723: CALL_OW 55
// end ;
65727: GO 65540
// end ;
65729: LD_VAR 0 5
65733: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65734: LD_INT 0
65736: PPUSH
65737: PPUSH
65738: PPUSH
65739: PPUSH
65740: PPUSH
65741: PPUSH
65742: PPUSH
65743: PPUSH
// if not turrets or not factories then
65744: LD_VAR 0 1
65748: NOT
65749: PUSH
65750: LD_VAR 0 2
65754: NOT
65755: OR
65756: IFFALSE 65760
// exit ;
65758: GO 66067
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65760: LD_ADDR_VAR 0 10
65764: PUSH
65765: LD_INT 5
65767: PUSH
65768: LD_INT 6
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: LD_INT 4
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 3
65787: PUSH
65788: LD_INT 5
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 24
65802: PUSH
65803: LD_INT 25
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 23
65812: PUSH
65813: LD_INT 27
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 42
65826: PUSH
65827: LD_INT 43
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 44
65836: PUSH
65837: LD_INT 46
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 45
65846: PUSH
65847: LD_INT 47
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: LIST
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: ST_TO_ADDR
// result := [ ] ;
65864: LD_ADDR_VAR 0 3
65868: PUSH
65869: EMPTY
65870: ST_TO_ADDR
// for i in turrets do
65871: LD_ADDR_VAR 0 4
65875: PUSH
65876: LD_VAR 0 1
65880: PUSH
65881: FOR_IN
65882: IFFALSE 66065
// begin nat := GetNation ( i ) ;
65884: LD_ADDR_VAR 0 7
65888: PUSH
65889: LD_VAR 0 4
65893: PPUSH
65894: CALL_OW 248
65898: ST_TO_ADDR
// weapon := 0 ;
65899: LD_ADDR_VAR 0 8
65903: PUSH
65904: LD_INT 0
65906: ST_TO_ADDR
// if not nat then
65907: LD_VAR 0 7
65911: NOT
65912: IFFALSE 65916
// continue ;
65914: GO 65881
// for j in list [ nat ] do
65916: LD_ADDR_VAR 0 5
65920: PUSH
65921: LD_VAR 0 10
65925: PUSH
65926: LD_VAR 0 7
65930: ARRAY
65931: PUSH
65932: FOR_IN
65933: IFFALSE 65974
// if GetBWeapon ( i ) = j [ 1 ] then
65935: LD_VAR 0 4
65939: PPUSH
65940: CALL_OW 269
65944: PUSH
65945: LD_VAR 0 5
65949: PUSH
65950: LD_INT 1
65952: ARRAY
65953: EQUAL
65954: IFFALSE 65972
// begin weapon := j [ 2 ] ;
65956: LD_ADDR_VAR 0 8
65960: PUSH
65961: LD_VAR 0 5
65965: PUSH
65966: LD_INT 2
65968: ARRAY
65969: ST_TO_ADDR
// break ;
65970: GO 65974
// end ;
65972: GO 65932
65974: POP
65975: POP
// if not weapon then
65976: LD_VAR 0 8
65980: NOT
65981: IFFALSE 65985
// continue ;
65983: GO 65881
// for k in factories do
65985: LD_ADDR_VAR 0 6
65989: PUSH
65990: LD_VAR 0 2
65994: PUSH
65995: FOR_IN
65996: IFFALSE 66061
// begin weapons := AvailableWeaponList ( k ) ;
65998: LD_ADDR_VAR 0 9
66002: PUSH
66003: LD_VAR 0 6
66007: PPUSH
66008: CALL_OW 478
66012: ST_TO_ADDR
// if not weapons then
66013: LD_VAR 0 9
66017: NOT
66018: IFFALSE 66022
// continue ;
66020: GO 65995
// if weapon in weapons then
66022: LD_VAR 0 8
66026: PUSH
66027: LD_VAR 0 9
66031: IN
66032: IFFALSE 66059
// begin result := [ i , weapon ] ;
66034: LD_ADDR_VAR 0 3
66038: PUSH
66039: LD_VAR 0 4
66043: PUSH
66044: LD_VAR 0 8
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: ST_TO_ADDR
// exit ;
66053: POP
66054: POP
66055: POP
66056: POP
66057: GO 66067
// end ; end ;
66059: GO 65995
66061: POP
66062: POP
// end ;
66063: GO 65881
66065: POP
66066: POP
// end ;
66067: LD_VAR 0 3
66071: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66072: LD_INT 0
66074: PPUSH
// if not side or side > 8 then
66075: LD_VAR 0 3
66079: NOT
66080: PUSH
66081: LD_VAR 0 3
66085: PUSH
66086: LD_INT 8
66088: GREATER
66089: OR
66090: IFFALSE 66094
// exit ;
66092: GO 66153
// if not range then
66094: LD_VAR 0 4
66098: NOT
66099: IFFALSE 66110
// range := - 12 ;
66101: LD_ADDR_VAR 0 4
66105: PUSH
66106: LD_INT 12
66108: NEG
66109: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66110: LD_VAR 0 1
66114: PPUSH
66115: LD_VAR 0 2
66119: PPUSH
66120: LD_VAR 0 3
66124: PPUSH
66125: LD_VAR 0 4
66129: PPUSH
66130: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66134: LD_VAR 0 1
66138: PPUSH
66139: LD_VAR 0 2
66143: PPUSH
66144: LD_VAR 0 3
66148: PPUSH
66149: CALL_OW 331
// end ;
66153: LD_VAR 0 5
66157: RET
// export function Video ( mode ) ; begin
66158: LD_INT 0
66160: PPUSH
// ingame_video = mode ;
66161: LD_ADDR_OWVAR 52
66165: PUSH
66166: LD_VAR 0 1
66170: ST_TO_ADDR
// interface_hidden = mode ;
66171: LD_ADDR_OWVAR 54
66175: PUSH
66176: LD_VAR 0 1
66180: ST_TO_ADDR
// end ;
66181: LD_VAR 0 2
66185: RET
// export function Join ( array , element ) ; begin
66186: LD_INT 0
66188: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66189: LD_ADDR_VAR 0 3
66193: PUSH
66194: LD_VAR 0 1
66198: PPUSH
66199: LD_VAR 0 1
66203: PUSH
66204: LD_INT 1
66206: PLUS
66207: PPUSH
66208: LD_VAR 0 2
66212: PPUSH
66213: CALL_OW 1
66217: ST_TO_ADDR
// end ;
66218: LD_VAR 0 3
66222: RET
// export function JoinUnion ( array , element ) ; begin
66223: LD_INT 0
66225: PPUSH
// result := array union element ;
66226: LD_ADDR_VAR 0 3
66230: PUSH
66231: LD_VAR 0 1
66235: PUSH
66236: LD_VAR 0 2
66240: UNION
66241: ST_TO_ADDR
// end ;
66242: LD_VAR 0 3
66246: RET
// export function GetBehemoths ( side ) ; begin
66247: LD_INT 0
66249: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66250: LD_ADDR_VAR 0 2
66254: PUSH
66255: LD_INT 22
66257: PUSH
66258: LD_VAR 0 1
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 31
66269: PUSH
66270: LD_INT 25
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PPUSH
66281: CALL_OW 69
66285: ST_TO_ADDR
// end ;
66286: LD_VAR 0 2
66290: RET
// export function Shuffle ( array ) ; var i , index ; begin
66291: LD_INT 0
66293: PPUSH
66294: PPUSH
66295: PPUSH
// result := [ ] ;
66296: LD_ADDR_VAR 0 2
66300: PUSH
66301: EMPTY
66302: ST_TO_ADDR
// if not array then
66303: LD_VAR 0 1
66307: NOT
66308: IFFALSE 66312
// exit ;
66310: GO 66411
// Randomize ;
66312: CALL_OW 10
// for i = array downto 1 do
66316: LD_ADDR_VAR 0 3
66320: PUSH
66321: DOUBLE
66322: LD_VAR 0 1
66326: INC
66327: ST_TO_ADDR
66328: LD_INT 1
66330: PUSH
66331: FOR_DOWNTO
66332: IFFALSE 66409
// begin index := rand ( 1 , array ) ;
66334: LD_ADDR_VAR 0 4
66338: PUSH
66339: LD_INT 1
66341: PPUSH
66342: LD_VAR 0 1
66346: PPUSH
66347: CALL_OW 12
66351: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66352: LD_ADDR_VAR 0 2
66356: PUSH
66357: LD_VAR 0 2
66361: PPUSH
66362: LD_VAR 0 2
66366: PUSH
66367: LD_INT 1
66369: PLUS
66370: PPUSH
66371: LD_VAR 0 1
66375: PUSH
66376: LD_VAR 0 4
66380: ARRAY
66381: PPUSH
66382: CALL_OW 2
66386: ST_TO_ADDR
// array := Delete ( array , index ) ;
66387: LD_ADDR_VAR 0 1
66391: PUSH
66392: LD_VAR 0 1
66396: PPUSH
66397: LD_VAR 0 4
66401: PPUSH
66402: CALL_OW 3
66406: ST_TO_ADDR
// end ;
66407: GO 66331
66409: POP
66410: POP
// end ;
66411: LD_VAR 0 2
66415: RET
// export function GetBaseMaterials ( base ) ; begin
66416: LD_INT 0
66418: PPUSH
// result := [ 0 , 0 , 0 ] ;
66419: LD_ADDR_VAR 0 2
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: ST_TO_ADDR
// if not base then
66438: LD_VAR 0 1
66442: NOT
66443: IFFALSE 66447
// exit ;
66445: GO 66496
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66447: LD_ADDR_VAR 0 2
66451: PUSH
66452: LD_VAR 0 1
66456: PPUSH
66457: LD_INT 1
66459: PPUSH
66460: CALL_OW 275
66464: PUSH
66465: LD_VAR 0 1
66469: PPUSH
66470: LD_INT 2
66472: PPUSH
66473: CALL_OW 275
66477: PUSH
66478: LD_VAR 0 1
66482: PPUSH
66483: LD_INT 3
66485: PPUSH
66486: CALL_OW 275
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// end ;
66496: LD_VAR 0 2
66500: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66501: LD_INT 0
66503: PPUSH
66504: PPUSH
// result := array ;
66505: LD_ADDR_VAR 0 3
66509: PUSH
66510: LD_VAR 0 1
66514: ST_TO_ADDR
// if size >= result then
66515: LD_VAR 0 2
66519: PUSH
66520: LD_VAR 0 3
66524: GREATEREQUAL
66525: IFFALSE 66529
// exit ;
66527: GO 66579
// if size then
66529: LD_VAR 0 2
66533: IFFALSE 66579
// for i := array downto size do
66535: LD_ADDR_VAR 0 4
66539: PUSH
66540: DOUBLE
66541: LD_VAR 0 1
66545: INC
66546: ST_TO_ADDR
66547: LD_VAR 0 2
66551: PUSH
66552: FOR_DOWNTO
66553: IFFALSE 66577
// result := Delete ( result , result ) ;
66555: LD_ADDR_VAR 0 3
66559: PUSH
66560: LD_VAR 0 3
66564: PPUSH
66565: LD_VAR 0 3
66569: PPUSH
66570: CALL_OW 3
66574: ST_TO_ADDR
66575: GO 66552
66577: POP
66578: POP
// end ;
66579: LD_VAR 0 3
66583: RET
// export function ComExit ( unit ) ; var tmp ; begin
66584: LD_INT 0
66586: PPUSH
66587: PPUSH
// if not IsInUnit ( unit ) then
66588: LD_VAR 0 1
66592: PPUSH
66593: CALL_OW 310
66597: NOT
66598: IFFALSE 66602
// exit ;
66600: GO 66662
// tmp := IsInUnit ( unit ) ;
66602: LD_ADDR_VAR 0 3
66606: PUSH
66607: LD_VAR 0 1
66611: PPUSH
66612: CALL_OW 310
66616: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66617: LD_VAR 0 3
66621: PPUSH
66622: CALL_OW 247
66626: PUSH
66627: LD_INT 2
66629: EQUAL
66630: IFFALSE 66643
// ComExitVehicle ( unit ) else
66632: LD_VAR 0 1
66636: PPUSH
66637: CALL_OW 121
66641: GO 66652
// ComExitBuilding ( unit ) ;
66643: LD_VAR 0 1
66647: PPUSH
66648: CALL_OW 122
// result := tmp ;
66652: LD_ADDR_VAR 0 2
66656: PUSH
66657: LD_VAR 0 3
66661: ST_TO_ADDR
// end ;
66662: LD_VAR 0 2
66666: RET
// export function ComExitAll ( units ) ; var i ; begin
66667: LD_INT 0
66669: PPUSH
66670: PPUSH
// if not units then
66671: LD_VAR 0 1
66675: NOT
66676: IFFALSE 66680
// exit ;
66678: GO 66706
// for i in units do
66680: LD_ADDR_VAR 0 3
66684: PUSH
66685: LD_VAR 0 1
66689: PUSH
66690: FOR_IN
66691: IFFALSE 66704
// ComExit ( i ) ;
66693: LD_VAR 0 3
66697: PPUSH
66698: CALL 66584 0 1
66702: GO 66690
66704: POP
66705: POP
// end ;
66706: LD_VAR 0 2
66710: RET
// export function ResetHc ; begin
66711: LD_INT 0
66713: PPUSH
// InitHc ;
66714: CALL_OW 19
// hc_importance := 0 ;
66718: LD_ADDR_OWVAR 32
66722: PUSH
66723: LD_INT 0
66725: ST_TO_ADDR
// end ;
66726: LD_VAR 0 1
66730: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66731: LD_INT 0
66733: PPUSH
66734: PPUSH
66735: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66736: LD_ADDR_VAR 0 6
66740: PUSH
66741: LD_VAR 0 1
66745: PUSH
66746: LD_VAR 0 3
66750: PLUS
66751: PUSH
66752: LD_INT 2
66754: DIV
66755: ST_TO_ADDR
// if _x < 0 then
66756: LD_VAR 0 6
66760: PUSH
66761: LD_INT 0
66763: LESS
66764: IFFALSE 66781
// _x := _x * - 1 ;
66766: LD_ADDR_VAR 0 6
66770: PUSH
66771: LD_VAR 0 6
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: MUL
66780: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66781: LD_ADDR_VAR 0 7
66785: PUSH
66786: LD_VAR 0 2
66790: PUSH
66791: LD_VAR 0 4
66795: PLUS
66796: PUSH
66797: LD_INT 2
66799: DIV
66800: ST_TO_ADDR
// if _y < 0 then
66801: LD_VAR 0 7
66805: PUSH
66806: LD_INT 0
66808: LESS
66809: IFFALSE 66826
// _y := _y * - 1 ;
66811: LD_ADDR_VAR 0 7
66815: PUSH
66816: LD_VAR 0 7
66820: PUSH
66821: LD_INT 1
66823: NEG
66824: MUL
66825: ST_TO_ADDR
// result := [ _x , _y ] ;
66826: LD_ADDR_VAR 0 5
66830: PUSH
66831: LD_VAR 0 6
66835: PUSH
66836: LD_VAR 0 7
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: ST_TO_ADDR
// end ;
66845: LD_VAR 0 5
66849: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66850: LD_INT 0
66852: PPUSH
66853: PPUSH
66854: PPUSH
66855: PPUSH
// task := GetTaskList ( unit ) ;
66856: LD_ADDR_VAR 0 7
66860: PUSH
66861: LD_VAR 0 1
66865: PPUSH
66866: CALL_OW 437
66870: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66871: LD_VAR 0 7
66875: NOT
66876: PUSH
66877: LD_VAR 0 1
66881: PPUSH
66882: LD_VAR 0 2
66886: PPUSH
66887: CALL_OW 308
66891: NOT
66892: AND
66893: IFFALSE 66897
// exit ;
66895: GO 67015
// if IsInArea ( unit , area ) then
66897: LD_VAR 0 1
66901: PPUSH
66902: LD_VAR 0 2
66906: PPUSH
66907: CALL_OW 308
66911: IFFALSE 66929
// begin ComMoveToArea ( unit , goAway ) ;
66913: LD_VAR 0 1
66917: PPUSH
66918: LD_VAR 0 3
66922: PPUSH
66923: CALL_OW 113
// exit ;
66927: GO 67015
// end ; if task [ 1 ] [ 1 ] <> M then
66929: LD_VAR 0 7
66933: PUSH
66934: LD_INT 1
66936: ARRAY
66937: PUSH
66938: LD_INT 1
66940: ARRAY
66941: PUSH
66942: LD_STRING M
66944: NONEQUAL
66945: IFFALSE 66949
// exit ;
66947: GO 67015
// x := task [ 1 ] [ 2 ] ;
66949: LD_ADDR_VAR 0 5
66953: PUSH
66954: LD_VAR 0 7
66958: PUSH
66959: LD_INT 1
66961: ARRAY
66962: PUSH
66963: LD_INT 2
66965: ARRAY
66966: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66967: LD_ADDR_VAR 0 6
66971: PUSH
66972: LD_VAR 0 7
66976: PUSH
66977: LD_INT 1
66979: ARRAY
66980: PUSH
66981: LD_INT 3
66983: ARRAY
66984: ST_TO_ADDR
// if InArea ( x , y , area ) then
66985: LD_VAR 0 5
66989: PPUSH
66990: LD_VAR 0 6
66994: PPUSH
66995: LD_VAR 0 2
66999: PPUSH
67000: CALL_OW 309
67004: IFFALSE 67015
// ComStop ( unit ) ;
67006: LD_VAR 0 1
67010: PPUSH
67011: CALL_OW 141
// end ;
67015: LD_VAR 0 4
67019: RET
// export function Abs ( value ) ; begin
67020: LD_INT 0
67022: PPUSH
// result := value ;
67023: LD_ADDR_VAR 0 2
67027: PUSH
67028: LD_VAR 0 1
67032: ST_TO_ADDR
// if value < 0 then
67033: LD_VAR 0 1
67037: PUSH
67038: LD_INT 0
67040: LESS
67041: IFFALSE 67058
// result := value * - 1 ;
67043: LD_ADDR_VAR 0 2
67047: PUSH
67048: LD_VAR 0 1
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: MUL
67057: ST_TO_ADDR
// end ;
67058: LD_VAR 0 2
67062: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67063: LD_INT 0
67065: PPUSH
67066: PPUSH
67067: PPUSH
67068: PPUSH
67069: PPUSH
67070: PPUSH
67071: PPUSH
67072: PPUSH
// if not unit or not building then
67073: LD_VAR 0 1
67077: NOT
67078: PUSH
67079: LD_VAR 0 2
67083: NOT
67084: OR
67085: IFFALSE 67089
// exit ;
67087: GO 67315
// x := GetX ( building ) ;
67089: LD_ADDR_VAR 0 4
67093: PUSH
67094: LD_VAR 0 2
67098: PPUSH
67099: CALL_OW 250
67103: ST_TO_ADDR
// y := GetY ( building ) ;
67104: LD_ADDR_VAR 0 6
67108: PUSH
67109: LD_VAR 0 2
67113: PPUSH
67114: CALL_OW 251
67118: ST_TO_ADDR
// d := GetDir ( building ) ;
67119: LD_ADDR_VAR 0 8
67123: PUSH
67124: LD_VAR 0 2
67128: PPUSH
67129: CALL_OW 254
67133: ST_TO_ADDR
// r := 4 ;
67134: LD_ADDR_VAR 0 9
67138: PUSH
67139: LD_INT 4
67141: ST_TO_ADDR
// for i := 1 to 5 do
67142: LD_ADDR_VAR 0 10
67146: PUSH
67147: DOUBLE
67148: LD_INT 1
67150: DEC
67151: ST_TO_ADDR
67152: LD_INT 5
67154: PUSH
67155: FOR_TO
67156: IFFALSE 67313
// begin _x := ShiftX ( x , d , r + i ) ;
67158: LD_ADDR_VAR 0 5
67162: PUSH
67163: LD_VAR 0 4
67167: PPUSH
67168: LD_VAR 0 8
67172: PPUSH
67173: LD_VAR 0 9
67177: PUSH
67178: LD_VAR 0 10
67182: PLUS
67183: PPUSH
67184: CALL_OW 272
67188: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67189: LD_ADDR_VAR 0 7
67193: PUSH
67194: LD_VAR 0 6
67198: PPUSH
67199: LD_VAR 0 8
67203: PPUSH
67204: LD_VAR 0 9
67208: PUSH
67209: LD_VAR 0 10
67213: PLUS
67214: PPUSH
67215: CALL_OW 273
67219: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67220: LD_VAR 0 5
67224: PPUSH
67225: LD_VAR 0 7
67229: PPUSH
67230: CALL_OW 488
67234: PUSH
67235: LD_VAR 0 5
67239: PPUSH
67240: LD_VAR 0 7
67244: PPUSH
67245: CALL_OW 428
67249: PPUSH
67250: CALL_OW 247
67254: PUSH
67255: LD_INT 3
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: IN
67265: NOT
67266: AND
67267: IFFALSE 67311
// begin ComMoveXY ( unit , _x , _y ) ;
67269: LD_VAR 0 1
67273: PPUSH
67274: LD_VAR 0 5
67278: PPUSH
67279: LD_VAR 0 7
67283: PPUSH
67284: CALL_OW 111
// result := [ _x , _y ] ;
67288: LD_ADDR_VAR 0 3
67292: PUSH
67293: LD_VAR 0 5
67297: PUSH
67298: LD_VAR 0 7
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: ST_TO_ADDR
// exit ;
67307: POP
67308: POP
67309: GO 67315
// end ; end ;
67311: GO 67155
67313: POP
67314: POP
// end ;
67315: LD_VAR 0 3
67319: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67320: LD_INT 0
67322: PPUSH
67323: PPUSH
67324: PPUSH
// result := 0 ;
67325: LD_ADDR_VAR 0 3
67329: PUSH
67330: LD_INT 0
67332: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67333: LD_VAR 0 1
67337: PUSH
67338: LD_INT 0
67340: LESS
67341: PUSH
67342: LD_VAR 0 1
67346: PUSH
67347: LD_INT 8
67349: GREATER
67350: OR
67351: PUSH
67352: LD_VAR 0 2
67356: PUSH
67357: LD_INT 0
67359: LESS
67360: OR
67361: PUSH
67362: LD_VAR 0 2
67366: PUSH
67367: LD_INT 8
67369: GREATER
67370: OR
67371: IFFALSE 67375
// exit ;
67373: GO 67450
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67375: LD_ADDR_VAR 0 4
67379: PUSH
67380: LD_INT 22
67382: PUSH
67383: LD_VAR 0 2
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PPUSH
67392: CALL_OW 69
67396: PUSH
67397: FOR_IN
67398: IFFALSE 67448
// begin un := UnitShoot ( i ) ;
67400: LD_ADDR_VAR 0 5
67404: PUSH
67405: LD_VAR 0 4
67409: PPUSH
67410: CALL_OW 504
67414: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67415: LD_VAR 0 5
67419: PPUSH
67420: CALL_OW 255
67424: PUSH
67425: LD_VAR 0 1
67429: EQUAL
67430: IFFALSE 67446
// begin result := un ;
67432: LD_ADDR_VAR 0 3
67436: PUSH
67437: LD_VAR 0 5
67441: ST_TO_ADDR
// exit ;
67442: POP
67443: POP
67444: GO 67450
// end ; end ;
67446: GO 67397
67448: POP
67449: POP
// end ;
67450: LD_VAR 0 3
67454: RET
// export function GetCargoBay ( units ) ; begin
67455: LD_INT 0
67457: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67458: LD_ADDR_VAR 0 2
67462: PUSH
67463: LD_VAR 0 1
67467: PPUSH
67468: LD_INT 2
67470: PUSH
67471: LD_INT 34
67473: PUSH
67474: LD_INT 12
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 34
67483: PUSH
67484: LD_INT 51
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 34
67493: PUSH
67494: LD_INT 32
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 34
67503: PUSH
67504: LD_INT 89
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: PPUSH
67518: CALL_OW 72
67522: ST_TO_ADDR
// end ;
67523: LD_VAR 0 2
67527: RET
// export function Negate ( value ) ; begin
67528: LD_INT 0
67530: PPUSH
// result := not value ;
67531: LD_ADDR_VAR 0 2
67535: PUSH
67536: LD_VAR 0 1
67540: NOT
67541: ST_TO_ADDR
// end ;
67542: LD_VAR 0 2
67546: RET
// export function Inc ( value ) ; begin
67547: LD_INT 0
67549: PPUSH
// result := value + 1 ;
67550: LD_ADDR_VAR 0 2
67554: PUSH
67555: LD_VAR 0 1
67559: PUSH
67560: LD_INT 1
67562: PLUS
67563: ST_TO_ADDR
// end ;
67564: LD_VAR 0 2
67568: RET
// export function Dec ( value ) ; begin
67569: LD_INT 0
67571: PPUSH
// result := value - 1 ;
67572: LD_ADDR_VAR 0 2
67576: PUSH
67577: LD_VAR 0 1
67581: PUSH
67582: LD_INT 1
67584: MINUS
67585: ST_TO_ADDR
// end ;
67586: LD_VAR 0 2
67590: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67591: LD_INT 0
67593: PPUSH
67594: PPUSH
67595: PPUSH
67596: PPUSH
67597: PPUSH
67598: PPUSH
67599: PPUSH
67600: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67601: LD_VAR 0 1
67605: PPUSH
67606: LD_VAR 0 2
67610: PPUSH
67611: CALL_OW 488
67615: NOT
67616: PUSH
67617: LD_VAR 0 3
67621: PPUSH
67622: LD_VAR 0 4
67626: PPUSH
67627: CALL_OW 488
67631: NOT
67632: OR
67633: IFFALSE 67646
// begin result := - 1 ;
67635: LD_ADDR_VAR 0 5
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: ST_TO_ADDR
// exit ;
67644: GO 67881
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67646: LD_ADDR_VAR 0 12
67650: PUSH
67651: LD_VAR 0 1
67655: PPUSH
67656: LD_VAR 0 2
67660: PPUSH
67661: LD_VAR 0 3
67665: PPUSH
67666: LD_VAR 0 4
67670: PPUSH
67671: CALL 66731 0 4
67675: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67676: LD_ADDR_VAR 0 11
67680: PUSH
67681: LD_VAR 0 1
67685: PPUSH
67686: LD_VAR 0 2
67690: PPUSH
67691: LD_VAR 0 12
67695: PUSH
67696: LD_INT 1
67698: ARRAY
67699: PPUSH
67700: LD_VAR 0 12
67704: PUSH
67705: LD_INT 2
67707: ARRAY
67708: PPUSH
67709: CALL_OW 298
67713: ST_TO_ADDR
// distance := 9999 ;
67714: LD_ADDR_VAR 0 10
67718: PUSH
67719: LD_INT 9999
67721: ST_TO_ADDR
// for i := 0 to 5 do
67722: LD_ADDR_VAR 0 6
67726: PUSH
67727: DOUBLE
67728: LD_INT 0
67730: DEC
67731: ST_TO_ADDR
67732: LD_INT 5
67734: PUSH
67735: FOR_TO
67736: IFFALSE 67879
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67738: LD_ADDR_VAR 0 7
67742: PUSH
67743: LD_VAR 0 1
67747: PPUSH
67748: LD_VAR 0 6
67752: PPUSH
67753: LD_VAR 0 11
67757: PPUSH
67758: CALL_OW 272
67762: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67763: LD_ADDR_VAR 0 8
67767: PUSH
67768: LD_VAR 0 2
67772: PPUSH
67773: LD_VAR 0 6
67777: PPUSH
67778: LD_VAR 0 11
67782: PPUSH
67783: CALL_OW 273
67787: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67788: LD_VAR 0 7
67792: PPUSH
67793: LD_VAR 0 8
67797: PPUSH
67798: CALL_OW 488
67802: NOT
67803: IFFALSE 67807
// continue ;
67805: GO 67735
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67807: LD_ADDR_VAR 0 9
67811: PUSH
67812: LD_VAR 0 12
67816: PUSH
67817: LD_INT 1
67819: ARRAY
67820: PPUSH
67821: LD_VAR 0 12
67825: PUSH
67826: LD_INT 2
67828: ARRAY
67829: PPUSH
67830: LD_VAR 0 7
67834: PPUSH
67835: LD_VAR 0 8
67839: PPUSH
67840: CALL_OW 298
67844: ST_TO_ADDR
// if tmp < distance then
67845: LD_VAR 0 9
67849: PUSH
67850: LD_VAR 0 10
67854: LESS
67855: IFFALSE 67877
// begin result := i ;
67857: LD_ADDR_VAR 0 5
67861: PUSH
67862: LD_VAR 0 6
67866: ST_TO_ADDR
// distance := tmp ;
67867: LD_ADDR_VAR 0 10
67871: PUSH
67872: LD_VAR 0 9
67876: ST_TO_ADDR
// end ; end ;
67877: GO 67735
67879: POP
67880: POP
// end ;
67881: LD_VAR 0 5
67885: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67886: LD_INT 0
67888: PPUSH
67889: PPUSH
// if not driver or not IsInUnit ( driver ) then
67890: LD_VAR 0 1
67894: NOT
67895: PUSH
67896: LD_VAR 0 1
67900: PPUSH
67901: CALL_OW 310
67905: NOT
67906: OR
67907: IFFALSE 67911
// exit ;
67909: GO 68001
// vehicle := IsInUnit ( driver ) ;
67911: LD_ADDR_VAR 0 3
67915: PUSH
67916: LD_VAR 0 1
67920: PPUSH
67921: CALL_OW 310
67925: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67926: LD_VAR 0 1
67930: PPUSH
67931: LD_STRING \
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: LD_INT 0
67942: PUSH
67943: LD_INT 0
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: PUSH
67961: LD_STRING E
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: LD_VAR 0 3
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: LD_INT 0
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PPUSH
67997: CALL_OW 446
// end ;
68001: LD_VAR 0 2
68005: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68006: LD_INT 0
68008: PPUSH
68009: PPUSH
// if not driver or not IsInUnit ( driver ) then
68010: LD_VAR 0 1
68014: NOT
68015: PUSH
68016: LD_VAR 0 1
68020: PPUSH
68021: CALL_OW 310
68025: NOT
68026: OR
68027: IFFALSE 68031
// exit ;
68029: GO 68121
// vehicle := IsInUnit ( driver ) ;
68031: LD_ADDR_VAR 0 3
68035: PUSH
68036: LD_VAR 0 1
68040: PPUSH
68041: CALL_OW 310
68045: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68046: LD_VAR 0 1
68050: PPUSH
68051: LD_STRING \
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: LD_INT 0
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: LD_INT 0
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: PUSH
68081: LD_STRING E
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: LD_VAR 0 3
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PPUSH
68117: CALL_OW 447
// end ;
68121: LD_VAR 0 2
68125: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68126: LD_INT 0
68128: PPUSH
68129: PPUSH
68130: PPUSH
// tmp := [ ] ;
68131: LD_ADDR_VAR 0 5
68135: PUSH
68136: EMPTY
68137: ST_TO_ADDR
// for i in units do
68138: LD_ADDR_VAR 0 4
68142: PUSH
68143: LD_VAR 0 1
68147: PUSH
68148: FOR_IN
68149: IFFALSE 68187
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68151: LD_ADDR_VAR 0 5
68155: PUSH
68156: LD_VAR 0 5
68160: PPUSH
68161: LD_VAR 0 5
68165: PUSH
68166: LD_INT 1
68168: PLUS
68169: PPUSH
68170: LD_VAR 0 4
68174: PPUSH
68175: CALL_OW 256
68179: PPUSH
68180: CALL_OW 2
68184: ST_TO_ADDR
68185: GO 68148
68187: POP
68188: POP
// if not tmp then
68189: LD_VAR 0 5
68193: NOT
68194: IFFALSE 68198
// exit ;
68196: GO 68246
// if asc then
68198: LD_VAR 0 2
68202: IFFALSE 68226
// result := SortListByListAsc ( units , tmp ) else
68204: LD_ADDR_VAR 0 3
68208: PUSH
68209: LD_VAR 0 1
68213: PPUSH
68214: LD_VAR 0 5
68218: PPUSH
68219: CALL_OW 76
68223: ST_TO_ADDR
68224: GO 68246
// result := SortListByListDesc ( units , tmp ) ;
68226: LD_ADDR_VAR 0 3
68230: PUSH
68231: LD_VAR 0 1
68235: PPUSH
68236: LD_VAR 0 5
68240: PPUSH
68241: CALL_OW 77
68245: ST_TO_ADDR
// end ;
68246: LD_VAR 0 3
68250: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68251: LD_INT 0
68253: PPUSH
68254: PPUSH
// task := GetTaskList ( mech ) ;
68255: LD_ADDR_VAR 0 4
68259: PUSH
68260: LD_VAR 0 1
68264: PPUSH
68265: CALL_OW 437
68269: ST_TO_ADDR
// if not task then
68270: LD_VAR 0 4
68274: NOT
68275: IFFALSE 68279
// exit ;
68277: GO 68321
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68279: LD_ADDR_VAR 0 3
68283: PUSH
68284: LD_VAR 0 4
68288: PUSH
68289: LD_INT 1
68291: ARRAY
68292: PUSH
68293: LD_INT 1
68295: ARRAY
68296: PUSH
68297: LD_STRING r
68299: EQUAL
68300: PUSH
68301: LD_VAR 0 4
68305: PUSH
68306: LD_INT 1
68308: ARRAY
68309: PUSH
68310: LD_INT 4
68312: ARRAY
68313: PUSH
68314: LD_VAR 0 2
68318: EQUAL
68319: AND
68320: ST_TO_ADDR
// end ;
68321: LD_VAR 0 3
68325: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68326: LD_INT 0
68328: PPUSH
// SetDir ( unit , d ) ;
68329: LD_VAR 0 1
68333: PPUSH
68334: LD_VAR 0 4
68338: PPUSH
68339: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68343: LD_VAR 0 1
68347: PPUSH
68348: LD_VAR 0 2
68352: PPUSH
68353: LD_VAR 0 3
68357: PPUSH
68358: LD_VAR 0 5
68362: PPUSH
68363: CALL_OW 48
// end ;
68367: LD_VAR 0 6
68371: RET
// export function ToNaturalNumber ( number ) ; begin
68372: LD_INT 0
68374: PPUSH
// result := number div 1 ;
68375: LD_ADDR_VAR 0 2
68379: PUSH
68380: LD_VAR 0 1
68384: PUSH
68385: LD_INT 1
68387: DIV
68388: ST_TO_ADDR
// if number < 0 then
68389: LD_VAR 0 1
68393: PUSH
68394: LD_INT 0
68396: LESS
68397: IFFALSE 68407
// result := 0 ;
68399: LD_ADDR_VAR 0 2
68403: PUSH
68404: LD_INT 0
68406: ST_TO_ADDR
// end ;
68407: LD_VAR 0 2
68411: RET
// export function SortByClass ( units , class ) ; var un ; begin
68412: LD_INT 0
68414: PPUSH
68415: PPUSH
// if not units or not class then
68416: LD_VAR 0 1
68420: NOT
68421: PUSH
68422: LD_VAR 0 2
68426: NOT
68427: OR
68428: IFFALSE 68432
// exit ;
68430: GO 68527
// result := [ ] ;
68432: LD_ADDR_VAR 0 3
68436: PUSH
68437: EMPTY
68438: ST_TO_ADDR
// for un in units do
68439: LD_ADDR_VAR 0 4
68443: PUSH
68444: LD_VAR 0 1
68448: PUSH
68449: FOR_IN
68450: IFFALSE 68525
// if GetClass ( un ) = class then
68452: LD_VAR 0 4
68456: PPUSH
68457: CALL_OW 257
68461: PUSH
68462: LD_VAR 0 2
68466: EQUAL
68467: IFFALSE 68494
// result := Insert ( result , 1 , un ) else
68469: LD_ADDR_VAR 0 3
68473: PUSH
68474: LD_VAR 0 3
68478: PPUSH
68479: LD_INT 1
68481: PPUSH
68482: LD_VAR 0 4
68486: PPUSH
68487: CALL_OW 2
68491: ST_TO_ADDR
68492: GO 68523
// result := Replace ( result , result + 1 , un ) ;
68494: LD_ADDR_VAR 0 3
68498: PUSH
68499: LD_VAR 0 3
68503: PPUSH
68504: LD_VAR 0 3
68508: PUSH
68509: LD_INT 1
68511: PLUS
68512: PPUSH
68513: LD_VAR 0 4
68517: PPUSH
68518: CALL_OW 1
68522: ST_TO_ADDR
68523: GO 68449
68525: POP
68526: POP
// end ;
68527: LD_VAR 0 3
68531: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68532: LD_INT 0
68534: PPUSH
68535: PPUSH
68536: PPUSH
68537: PPUSH
68538: PPUSH
68539: PPUSH
68540: PPUSH
// result := [ ] ;
68541: LD_ADDR_VAR 0 4
68545: PUSH
68546: EMPTY
68547: ST_TO_ADDR
// if x - r < 0 then
68548: LD_VAR 0 1
68552: PUSH
68553: LD_VAR 0 3
68557: MINUS
68558: PUSH
68559: LD_INT 0
68561: LESS
68562: IFFALSE 68574
// min_x := 0 else
68564: LD_ADDR_VAR 0 8
68568: PUSH
68569: LD_INT 0
68571: ST_TO_ADDR
68572: GO 68590
// min_x := x - r ;
68574: LD_ADDR_VAR 0 8
68578: PUSH
68579: LD_VAR 0 1
68583: PUSH
68584: LD_VAR 0 3
68588: MINUS
68589: ST_TO_ADDR
// if y - r < 0 then
68590: LD_VAR 0 2
68594: PUSH
68595: LD_VAR 0 3
68599: MINUS
68600: PUSH
68601: LD_INT 0
68603: LESS
68604: IFFALSE 68616
// min_y := 0 else
68606: LD_ADDR_VAR 0 7
68610: PUSH
68611: LD_INT 0
68613: ST_TO_ADDR
68614: GO 68632
// min_y := y - r ;
68616: LD_ADDR_VAR 0 7
68620: PUSH
68621: LD_VAR 0 2
68625: PUSH
68626: LD_VAR 0 3
68630: MINUS
68631: ST_TO_ADDR
// max_x := x + r ;
68632: LD_ADDR_VAR 0 9
68636: PUSH
68637: LD_VAR 0 1
68641: PUSH
68642: LD_VAR 0 3
68646: PLUS
68647: ST_TO_ADDR
// max_y := y + r ;
68648: LD_ADDR_VAR 0 10
68652: PUSH
68653: LD_VAR 0 2
68657: PUSH
68658: LD_VAR 0 3
68662: PLUS
68663: ST_TO_ADDR
// for _x = min_x to max_x do
68664: LD_ADDR_VAR 0 5
68668: PUSH
68669: DOUBLE
68670: LD_VAR 0 8
68674: DEC
68675: ST_TO_ADDR
68676: LD_VAR 0 9
68680: PUSH
68681: FOR_TO
68682: IFFALSE 68783
// for _y = min_y to max_y do
68684: LD_ADDR_VAR 0 6
68688: PUSH
68689: DOUBLE
68690: LD_VAR 0 7
68694: DEC
68695: ST_TO_ADDR
68696: LD_VAR 0 10
68700: PUSH
68701: FOR_TO
68702: IFFALSE 68779
// begin if not ValidHex ( _x , _y ) then
68704: LD_VAR 0 5
68708: PPUSH
68709: LD_VAR 0 6
68713: PPUSH
68714: CALL_OW 488
68718: NOT
68719: IFFALSE 68723
// continue ;
68721: GO 68701
// if GetResourceTypeXY ( _x , _y ) then
68723: LD_VAR 0 5
68727: PPUSH
68728: LD_VAR 0 6
68732: PPUSH
68733: CALL_OW 283
68737: IFFALSE 68777
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68739: LD_ADDR_VAR 0 4
68743: PUSH
68744: LD_VAR 0 4
68748: PPUSH
68749: LD_VAR 0 4
68753: PUSH
68754: LD_INT 1
68756: PLUS
68757: PPUSH
68758: LD_VAR 0 5
68762: PUSH
68763: LD_VAR 0 6
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PPUSH
68772: CALL_OW 1
68776: ST_TO_ADDR
// end ;
68777: GO 68701
68779: POP
68780: POP
68781: GO 68681
68783: POP
68784: POP
// end ;
68785: LD_VAR 0 4
68789: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68790: LD_INT 0
68792: PPUSH
68793: PPUSH
68794: PPUSH
68795: PPUSH
68796: PPUSH
68797: PPUSH
68798: PPUSH
68799: PPUSH
// if not units then
68800: LD_VAR 0 1
68804: NOT
68805: IFFALSE 68809
// exit ;
68807: GO 69333
// result := UnitFilter ( units , [ f_ok ] ) ;
68809: LD_ADDR_VAR 0 3
68813: PUSH
68814: LD_VAR 0 1
68818: PPUSH
68819: LD_INT 50
68821: PUSH
68822: EMPTY
68823: LIST
68824: PPUSH
68825: CALL_OW 72
68829: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68830: LD_ADDR_VAR 0 8
68834: PUSH
68835: LD_VAR 0 1
68839: PUSH
68840: LD_INT 1
68842: ARRAY
68843: PPUSH
68844: CALL_OW 255
68848: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68849: LD_ADDR_VAR 0 10
68853: PUSH
68854: LD_INT 29
68856: PUSH
68857: LD_INT 91
68859: PUSH
68860: LD_INT 49
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: LIST
68867: ST_TO_ADDR
// if not result then
68868: LD_VAR 0 3
68872: NOT
68873: IFFALSE 68877
// exit ;
68875: GO 69333
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68877: LD_ADDR_VAR 0 5
68881: PUSH
68882: LD_INT 81
68884: PUSH
68885: LD_VAR 0 8
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PPUSH
68894: CALL_OW 69
68898: ST_TO_ADDR
// for i in result do
68899: LD_ADDR_VAR 0 4
68903: PUSH
68904: LD_VAR 0 3
68908: PUSH
68909: FOR_IN
68910: IFFALSE 69331
// begin tag := GetTag ( i ) + 1 ;
68912: LD_ADDR_VAR 0 9
68916: PUSH
68917: LD_VAR 0 4
68921: PPUSH
68922: CALL_OW 110
68926: PUSH
68927: LD_INT 1
68929: PLUS
68930: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68931: LD_ADDR_VAR 0 7
68935: PUSH
68936: LD_VAR 0 4
68940: PPUSH
68941: CALL_OW 250
68945: PPUSH
68946: LD_VAR 0 4
68950: PPUSH
68951: CALL_OW 251
68955: PPUSH
68956: LD_INT 6
68958: PPUSH
68959: CALL 68532 0 3
68963: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68964: LD_VAR 0 4
68968: PPUSH
68969: CALL_OW 247
68973: PUSH
68974: LD_INT 2
68976: EQUAL
68977: PUSH
68978: LD_VAR 0 7
68982: AND
68983: PUSH
68984: LD_VAR 0 4
68988: PPUSH
68989: CALL_OW 264
68993: PUSH
68994: LD_VAR 0 10
68998: IN
68999: NOT
69000: AND
69001: IFFALSE 69040
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69003: LD_VAR 0 4
69007: PPUSH
69008: LD_VAR 0 7
69012: PUSH
69013: LD_INT 1
69015: ARRAY
69016: PUSH
69017: LD_INT 1
69019: ARRAY
69020: PPUSH
69021: LD_VAR 0 7
69025: PUSH
69026: LD_INT 1
69028: ARRAY
69029: PUSH
69030: LD_INT 2
69032: ARRAY
69033: PPUSH
69034: CALL_OW 116
69038: GO 69329
// if path > tag then
69040: LD_VAR 0 2
69044: PUSH
69045: LD_VAR 0 9
69049: GREATER
69050: IFFALSE 69258
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69052: LD_ADDR_VAR 0 6
69056: PUSH
69057: LD_VAR 0 5
69061: PPUSH
69062: LD_INT 91
69064: PUSH
69065: LD_VAR 0 4
69069: PUSH
69070: LD_INT 8
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: LIST
69077: PPUSH
69078: CALL_OW 72
69082: ST_TO_ADDR
// if nearEnemy then
69083: LD_VAR 0 6
69087: IFFALSE 69156
// begin if GetWeapon ( i ) = ru_time_lapser then
69089: LD_VAR 0 4
69093: PPUSH
69094: CALL_OW 264
69098: PUSH
69099: LD_INT 49
69101: EQUAL
69102: IFFALSE 69130
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69104: LD_VAR 0 4
69108: PPUSH
69109: LD_VAR 0 6
69113: PPUSH
69114: LD_VAR 0 4
69118: PPUSH
69119: CALL_OW 74
69123: PPUSH
69124: CALL_OW 112
69128: GO 69154
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69130: LD_VAR 0 4
69134: PPUSH
69135: LD_VAR 0 6
69139: PPUSH
69140: LD_VAR 0 4
69144: PPUSH
69145: CALL_OW 74
69149: PPUSH
69150: CALL 70258 0 2
// end else
69154: GO 69256
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69156: LD_VAR 0 4
69160: PPUSH
69161: LD_VAR 0 2
69165: PUSH
69166: LD_VAR 0 9
69170: ARRAY
69171: PUSH
69172: LD_INT 1
69174: ARRAY
69175: PPUSH
69176: LD_VAR 0 2
69180: PUSH
69181: LD_VAR 0 9
69185: ARRAY
69186: PUSH
69187: LD_INT 2
69189: ARRAY
69190: PPUSH
69191: CALL_OW 297
69195: PUSH
69196: LD_INT 6
69198: GREATER
69199: IFFALSE 69242
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69201: LD_VAR 0 4
69205: PPUSH
69206: LD_VAR 0 2
69210: PUSH
69211: LD_VAR 0 9
69215: ARRAY
69216: PUSH
69217: LD_INT 1
69219: ARRAY
69220: PPUSH
69221: LD_VAR 0 2
69225: PUSH
69226: LD_VAR 0 9
69230: ARRAY
69231: PUSH
69232: LD_INT 2
69234: ARRAY
69235: PPUSH
69236: CALL_OW 114
69240: GO 69256
// SetTag ( i , tag ) ;
69242: LD_VAR 0 4
69246: PPUSH
69247: LD_VAR 0 9
69251: PPUSH
69252: CALL_OW 109
// end else
69256: GO 69329
// if enemy then
69258: LD_VAR 0 5
69262: IFFALSE 69329
// begin if GetWeapon ( i ) = ru_time_lapser then
69264: LD_VAR 0 4
69268: PPUSH
69269: CALL_OW 264
69273: PUSH
69274: LD_INT 49
69276: EQUAL
69277: IFFALSE 69305
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69279: LD_VAR 0 4
69283: PPUSH
69284: LD_VAR 0 5
69288: PPUSH
69289: LD_VAR 0 4
69293: PPUSH
69294: CALL_OW 74
69298: PPUSH
69299: CALL_OW 112
69303: GO 69329
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69305: LD_VAR 0 4
69309: PPUSH
69310: LD_VAR 0 5
69314: PPUSH
69315: LD_VAR 0 4
69319: PPUSH
69320: CALL_OW 74
69324: PPUSH
69325: CALL 70258 0 2
// end ; end ;
69329: GO 68909
69331: POP
69332: POP
// end ;
69333: LD_VAR 0 3
69337: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69338: LD_INT 0
69340: PPUSH
69341: PPUSH
69342: PPUSH
// if not unit or IsInUnit ( unit ) then
69343: LD_VAR 0 1
69347: NOT
69348: PUSH
69349: LD_VAR 0 1
69353: PPUSH
69354: CALL_OW 310
69358: OR
69359: IFFALSE 69363
// exit ;
69361: GO 69454
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69363: LD_ADDR_VAR 0 4
69367: PUSH
69368: LD_VAR 0 1
69372: PPUSH
69373: CALL_OW 250
69377: PPUSH
69378: LD_VAR 0 2
69382: PPUSH
69383: LD_INT 1
69385: PPUSH
69386: CALL_OW 272
69390: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69391: LD_ADDR_VAR 0 5
69395: PUSH
69396: LD_VAR 0 1
69400: PPUSH
69401: CALL_OW 251
69405: PPUSH
69406: LD_VAR 0 2
69410: PPUSH
69411: LD_INT 1
69413: PPUSH
69414: CALL_OW 273
69418: ST_TO_ADDR
// if ValidHex ( x , y ) then
69419: LD_VAR 0 4
69423: PPUSH
69424: LD_VAR 0 5
69428: PPUSH
69429: CALL_OW 488
69433: IFFALSE 69454
// ComTurnXY ( unit , x , y ) ;
69435: LD_VAR 0 1
69439: PPUSH
69440: LD_VAR 0 4
69444: PPUSH
69445: LD_VAR 0 5
69449: PPUSH
69450: CALL_OW 118
// end ;
69454: LD_VAR 0 3
69458: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69459: LD_INT 0
69461: PPUSH
69462: PPUSH
// result := false ;
69463: LD_ADDR_VAR 0 3
69467: PUSH
69468: LD_INT 0
69470: ST_TO_ADDR
// if not units then
69471: LD_VAR 0 2
69475: NOT
69476: IFFALSE 69480
// exit ;
69478: GO 69525
// for i in units do
69480: LD_ADDR_VAR 0 4
69484: PUSH
69485: LD_VAR 0 2
69489: PUSH
69490: FOR_IN
69491: IFFALSE 69523
// if See ( side , i ) then
69493: LD_VAR 0 1
69497: PPUSH
69498: LD_VAR 0 4
69502: PPUSH
69503: CALL_OW 292
69507: IFFALSE 69521
// begin result := true ;
69509: LD_ADDR_VAR 0 3
69513: PUSH
69514: LD_INT 1
69516: ST_TO_ADDR
// exit ;
69517: POP
69518: POP
69519: GO 69525
// end ;
69521: GO 69490
69523: POP
69524: POP
// end ;
69525: LD_VAR 0 3
69529: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69530: LD_INT 0
69532: PPUSH
69533: PPUSH
69534: PPUSH
69535: PPUSH
// if not unit or not points then
69536: LD_VAR 0 1
69540: NOT
69541: PUSH
69542: LD_VAR 0 2
69546: NOT
69547: OR
69548: IFFALSE 69552
// exit ;
69550: GO 69642
// dist := 99999 ;
69552: LD_ADDR_VAR 0 5
69556: PUSH
69557: LD_INT 99999
69559: ST_TO_ADDR
// for i in points do
69560: LD_ADDR_VAR 0 4
69564: PUSH
69565: LD_VAR 0 2
69569: PUSH
69570: FOR_IN
69571: IFFALSE 69640
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69573: LD_ADDR_VAR 0 6
69577: PUSH
69578: LD_VAR 0 1
69582: PPUSH
69583: LD_VAR 0 4
69587: PUSH
69588: LD_INT 1
69590: ARRAY
69591: PPUSH
69592: LD_VAR 0 4
69596: PUSH
69597: LD_INT 2
69599: ARRAY
69600: PPUSH
69601: CALL_OW 297
69605: ST_TO_ADDR
// if tmpDist < dist then
69606: LD_VAR 0 6
69610: PUSH
69611: LD_VAR 0 5
69615: LESS
69616: IFFALSE 69638
// begin result := i ;
69618: LD_ADDR_VAR 0 3
69622: PUSH
69623: LD_VAR 0 4
69627: ST_TO_ADDR
// dist := tmpDist ;
69628: LD_ADDR_VAR 0 5
69632: PUSH
69633: LD_VAR 0 6
69637: ST_TO_ADDR
// end ; end ;
69638: GO 69570
69640: POP
69641: POP
// end ;
69642: LD_VAR 0 3
69646: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69647: LD_INT 0
69649: PPUSH
// uc_side := side ;
69650: LD_ADDR_OWVAR 20
69654: PUSH
69655: LD_VAR 0 1
69659: ST_TO_ADDR
// uc_nation := 3 ;
69660: LD_ADDR_OWVAR 21
69664: PUSH
69665: LD_INT 3
69667: ST_TO_ADDR
// vc_chassis := 25 ;
69668: LD_ADDR_OWVAR 37
69672: PUSH
69673: LD_INT 25
69675: ST_TO_ADDR
// vc_engine := engine_siberite ;
69676: LD_ADDR_OWVAR 39
69680: PUSH
69681: LD_INT 3
69683: ST_TO_ADDR
// vc_control := control_computer ;
69684: LD_ADDR_OWVAR 38
69688: PUSH
69689: LD_INT 3
69691: ST_TO_ADDR
// vc_weapon := 59 ;
69692: LD_ADDR_OWVAR 40
69696: PUSH
69697: LD_INT 59
69699: ST_TO_ADDR
// result := CreateVehicle ;
69700: LD_ADDR_VAR 0 5
69704: PUSH
69705: CALL_OW 45
69709: ST_TO_ADDR
// SetDir ( result , d ) ;
69710: LD_VAR 0 5
69714: PPUSH
69715: LD_VAR 0 4
69719: PPUSH
69720: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69724: LD_VAR 0 5
69728: PPUSH
69729: LD_VAR 0 2
69733: PPUSH
69734: LD_VAR 0 3
69738: PPUSH
69739: LD_INT 0
69741: PPUSH
69742: CALL_OW 48
// end ;
69746: LD_VAR 0 5
69750: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69751: LD_INT 0
69753: PPUSH
69754: PPUSH
69755: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69756: LD_ADDR_VAR 0 2
69760: PUSH
69761: LD_INT 0
69763: PUSH
69764: LD_INT 0
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69779: LD_VAR 0 1
69783: NOT
69784: PUSH
69785: LD_VAR 0 1
69789: PPUSH
69790: CALL_OW 264
69794: PUSH
69795: LD_INT 12
69797: PUSH
69798: LD_INT 51
69800: PUSH
69801: LD_INT 32
69803: PUSH
69804: LD_INT 89
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: IN
69813: NOT
69814: OR
69815: IFFALSE 69819
// exit ;
69817: GO 69917
// for i := 1 to 3 do
69819: LD_ADDR_VAR 0 3
69823: PUSH
69824: DOUBLE
69825: LD_INT 1
69827: DEC
69828: ST_TO_ADDR
69829: LD_INT 3
69831: PUSH
69832: FOR_TO
69833: IFFALSE 69915
// begin tmp := GetCargo ( cargo , i ) ;
69835: LD_ADDR_VAR 0 4
69839: PUSH
69840: LD_VAR 0 1
69844: PPUSH
69845: LD_VAR 0 3
69849: PPUSH
69850: CALL_OW 289
69854: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69855: LD_ADDR_VAR 0 2
69859: PUSH
69860: LD_VAR 0 2
69864: PPUSH
69865: LD_VAR 0 3
69869: PPUSH
69870: LD_VAR 0 4
69874: PPUSH
69875: CALL_OW 1
69879: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69880: LD_ADDR_VAR 0 2
69884: PUSH
69885: LD_VAR 0 2
69889: PPUSH
69890: LD_INT 4
69892: PPUSH
69893: LD_VAR 0 2
69897: PUSH
69898: LD_INT 4
69900: ARRAY
69901: PUSH
69902: LD_VAR 0 4
69906: PLUS
69907: PPUSH
69908: CALL_OW 1
69912: ST_TO_ADDR
// end ;
69913: GO 69832
69915: POP
69916: POP
// end ;
69917: LD_VAR 0 2
69921: RET
// export function Length ( array ) ; begin
69922: LD_INT 0
69924: PPUSH
// result := array + 0 ;
69925: LD_ADDR_VAR 0 2
69929: PUSH
69930: LD_VAR 0 1
69934: PUSH
69935: LD_INT 0
69937: PLUS
69938: ST_TO_ADDR
// end ;
69939: LD_VAR 0 2
69943: RET
// export function PrepareArray ( array ) ; begin
69944: LD_INT 0
69946: PPUSH
// result := array diff 0 ;
69947: LD_ADDR_VAR 0 2
69951: PUSH
69952: LD_VAR 0 1
69956: PUSH
69957: LD_INT 0
69959: DIFF
69960: ST_TO_ADDR
// if not result [ 1 ] then
69961: LD_VAR 0 2
69965: PUSH
69966: LD_INT 1
69968: ARRAY
69969: NOT
69970: IFFALSE 69990
// result := Delete ( result , 1 ) ;
69972: LD_ADDR_VAR 0 2
69976: PUSH
69977: LD_VAR 0 2
69981: PPUSH
69982: LD_INT 1
69984: PPUSH
69985: CALL_OW 3
69989: ST_TO_ADDR
// end ;
69990: LD_VAR 0 2
69994: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69995: LD_INT 0
69997: PPUSH
69998: PPUSH
69999: PPUSH
70000: PPUSH
// sibRocketRange := 25 ;
70001: LD_ADDR_VAR 0 6
70005: PUSH
70006: LD_INT 25
70008: ST_TO_ADDR
// result := false ;
70009: LD_ADDR_VAR 0 4
70013: PUSH
70014: LD_INT 0
70016: ST_TO_ADDR
// for i := 0 to 5 do
70017: LD_ADDR_VAR 0 5
70021: PUSH
70022: DOUBLE
70023: LD_INT 0
70025: DEC
70026: ST_TO_ADDR
70027: LD_INT 5
70029: PUSH
70030: FOR_TO
70031: IFFALSE 70098
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70033: LD_VAR 0 1
70037: PPUSH
70038: LD_VAR 0 5
70042: PPUSH
70043: LD_VAR 0 6
70047: PPUSH
70048: CALL_OW 272
70052: PPUSH
70053: LD_VAR 0 2
70057: PPUSH
70058: LD_VAR 0 5
70062: PPUSH
70063: LD_VAR 0 6
70067: PPUSH
70068: CALL_OW 273
70072: PPUSH
70073: LD_VAR 0 3
70077: PPUSH
70078: CALL_OW 309
70082: IFFALSE 70096
// begin result := true ;
70084: LD_ADDR_VAR 0 4
70088: PUSH
70089: LD_INT 1
70091: ST_TO_ADDR
// exit ;
70092: POP
70093: POP
70094: GO 70100
// end ;
70096: GO 70030
70098: POP
70099: POP
// end ;
70100: LD_VAR 0 4
70104: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70105: LD_INT 0
70107: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70108: LD_VAR 0 1
70112: PPUSH
70113: LD_VAR 0 2
70117: PPUSH
70118: LD_INT 0
70120: PPUSH
70121: LD_INT 0
70123: PPUSH
70124: LD_INT 1
70126: PPUSH
70127: LD_INT 0
70129: PPUSH
70130: CALL_OW 587
// end ;
70134: LD_VAR 0 3
70138: RET
// export function CenterOnNow ( unit ) ; begin
70139: LD_INT 0
70141: PPUSH
// result := IsInUnit ( unit ) ;
70142: LD_ADDR_VAR 0 2
70146: PUSH
70147: LD_VAR 0 1
70151: PPUSH
70152: CALL_OW 310
70156: ST_TO_ADDR
// if not result then
70157: LD_VAR 0 2
70161: NOT
70162: IFFALSE 70174
// result := unit ;
70164: LD_ADDR_VAR 0 2
70168: PUSH
70169: LD_VAR 0 1
70173: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70174: LD_VAR 0 1
70178: PPUSH
70179: CALL_OW 87
// end ;
70183: LD_VAR 0 2
70187: RET
// export function ComMoveHex ( unit , hex ) ; begin
70188: LD_INT 0
70190: PPUSH
// if not hex then
70191: LD_VAR 0 2
70195: NOT
70196: IFFALSE 70200
// exit ;
70198: GO 70253
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70200: LD_VAR 0 2
70204: PUSH
70205: LD_INT 1
70207: ARRAY
70208: PPUSH
70209: LD_VAR 0 2
70213: PUSH
70214: LD_INT 2
70216: ARRAY
70217: PPUSH
70218: CALL_OW 428
70222: IFFALSE 70226
// exit ;
70224: GO 70253
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70226: LD_VAR 0 1
70230: PPUSH
70231: LD_VAR 0 2
70235: PUSH
70236: LD_INT 1
70238: ARRAY
70239: PPUSH
70240: LD_VAR 0 2
70244: PUSH
70245: LD_INT 2
70247: ARRAY
70248: PPUSH
70249: CALL_OW 111
// end ;
70253: LD_VAR 0 3
70257: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70258: LD_INT 0
70260: PPUSH
70261: PPUSH
70262: PPUSH
// if not unit or not enemy then
70263: LD_VAR 0 1
70267: NOT
70268: PUSH
70269: LD_VAR 0 2
70273: NOT
70274: OR
70275: IFFALSE 70279
// exit ;
70277: GO 70403
// x := GetX ( enemy ) ;
70279: LD_ADDR_VAR 0 4
70283: PUSH
70284: LD_VAR 0 2
70288: PPUSH
70289: CALL_OW 250
70293: ST_TO_ADDR
// y := GetY ( enemy ) ;
70294: LD_ADDR_VAR 0 5
70298: PUSH
70299: LD_VAR 0 2
70303: PPUSH
70304: CALL_OW 251
70308: ST_TO_ADDR
// if ValidHex ( x , y ) then
70309: LD_VAR 0 4
70313: PPUSH
70314: LD_VAR 0 5
70318: PPUSH
70319: CALL_OW 488
70323: IFFALSE 70403
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
70325: LD_VAR 0 2
70329: PPUSH
70330: CALL_OW 247
70334: PUSH
70335: LD_INT 3
70337: PUSH
70338: LD_INT 2
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: IN
70345: PUSH
70346: LD_VAR 0 1
70350: PPUSH
70351: CALL_OW 255
70355: PPUSH
70356: LD_VAR 0 2
70360: PPUSH
70361: CALL_OW 292
70365: AND
70366: IFFALSE 70384
// ComAttackUnit ( unit , enemy ) else
70368: LD_VAR 0 1
70372: PPUSH
70373: LD_VAR 0 2
70377: PPUSH
70378: CALL_OW 115
70382: GO 70403
// ComAgressiveMove ( unit , x , y ) ;
70384: LD_VAR 0 1
70388: PPUSH
70389: LD_VAR 0 4
70393: PPUSH
70394: LD_VAR 0 5
70398: PPUSH
70399: CALL_OW 114
// end ; end_of_file
70403: LD_VAR 0 3
70407: RET
// export globalGameSaveCounter ; every 0 0$1 do
70408: GO 70410
70410: DISABLE
// begin enable ;
70411: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70412: LD_STRING updateTimer(
70414: PUSH
70415: LD_OWVAR 1
70419: STR
70420: PUSH
70421: LD_STRING );
70423: STR
70424: PPUSH
70425: CALL_OW 559
// end ;
70429: END
// every 0 0$1 do
70430: GO 70432
70432: DISABLE
// begin globalGameSaveCounter := 0 ;
70433: LD_ADDR_EXP 73
70437: PUSH
70438: LD_INT 0
70440: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
70441: LD_STRING setGameSaveCounter(0)
70443: PPUSH
70444: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
70448: LD_STRING initStreamRollete();
70450: PPUSH
70451: CALL_OW 559
// InitStreamMode ;
70455: CALL 71781 0 0
// DefineStreamItems ( false ) ;
70459: LD_INT 0
70461: PPUSH
70462: CALL 72245 0 1
// end ;
70466: END
// export function SOS_MapStart ( ) ; begin
70467: LD_INT 0
70469: PPUSH
// if streamModeActive then
70470: LD_EXP 74
70474: IFFALSE 70483
// DefineStreamItems ( true ) ;
70476: LD_INT 1
70478: PPUSH
70479: CALL 72245 0 1
// UpdateLuaVariables ( ) ;
70483: CALL 70500 0 0
// UpdateFactoryWaypoints ( ) ;
70487: CALL 85114 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70491: CALL 85371 0 0
// end ;
70495: LD_VAR 0 1
70499: RET
// function UpdateLuaVariables ( ) ; begin
70500: LD_INT 0
70502: PPUSH
// if globalGameSaveCounter then
70503: LD_EXP 73
70507: IFFALSE 70541
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
70509: LD_ADDR_EXP 73
70513: PUSH
70514: LD_EXP 73
70518: PPUSH
70519: CALL 67547 0 1
70523: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70524: LD_STRING setGameSaveCounter(
70526: PUSH
70527: LD_EXP 73
70531: STR
70532: PUSH
70533: LD_STRING )
70535: STR
70536: PPUSH
70537: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70541: LD_STRING setGameDifficulty(
70543: PUSH
70544: LD_OWVAR 67
70548: STR
70549: PUSH
70550: LD_STRING )
70552: STR
70553: PPUSH
70554: CALL_OW 559
// end ;
70558: LD_VAR 0 1
70562: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70563: LD_INT 0
70565: PPUSH
// if p2 = stream_mode then
70566: LD_VAR 0 2
70570: PUSH
70571: LD_INT 100
70573: EQUAL
70574: IFFALSE 71577
// begin if not StreamModeActive then
70576: LD_EXP 74
70580: NOT
70581: IFFALSE 70591
// StreamModeActive := true ;
70583: LD_ADDR_EXP 74
70587: PUSH
70588: LD_INT 1
70590: ST_TO_ADDR
// if p3 = 0 then
70591: LD_VAR 0 3
70595: PUSH
70596: LD_INT 0
70598: EQUAL
70599: IFFALSE 70605
// InitStreamMode ;
70601: CALL 71781 0 0
// if p3 = 1 then
70605: LD_VAR 0 3
70609: PUSH
70610: LD_INT 1
70612: EQUAL
70613: IFFALSE 70623
// sRocket := true ;
70615: LD_ADDR_EXP 79
70619: PUSH
70620: LD_INT 1
70622: ST_TO_ADDR
// if p3 = 2 then
70623: LD_VAR 0 3
70627: PUSH
70628: LD_INT 2
70630: EQUAL
70631: IFFALSE 70641
// sSpeed := true ;
70633: LD_ADDR_EXP 78
70637: PUSH
70638: LD_INT 1
70640: ST_TO_ADDR
// if p3 = 3 then
70641: LD_VAR 0 3
70645: PUSH
70646: LD_INT 3
70648: EQUAL
70649: IFFALSE 70659
// sEngine := true ;
70651: LD_ADDR_EXP 80
70655: PUSH
70656: LD_INT 1
70658: ST_TO_ADDR
// if p3 = 4 then
70659: LD_VAR 0 3
70663: PUSH
70664: LD_INT 4
70666: EQUAL
70667: IFFALSE 70677
// sSpec := true ;
70669: LD_ADDR_EXP 77
70673: PUSH
70674: LD_INT 1
70676: ST_TO_ADDR
// if p3 = 5 then
70677: LD_VAR 0 3
70681: PUSH
70682: LD_INT 5
70684: EQUAL
70685: IFFALSE 70695
// sLevel := true ;
70687: LD_ADDR_EXP 81
70691: PUSH
70692: LD_INT 1
70694: ST_TO_ADDR
// if p3 = 6 then
70695: LD_VAR 0 3
70699: PUSH
70700: LD_INT 6
70702: EQUAL
70703: IFFALSE 70713
// sArmoury := true ;
70705: LD_ADDR_EXP 82
70709: PUSH
70710: LD_INT 1
70712: ST_TO_ADDR
// if p3 = 7 then
70713: LD_VAR 0 3
70717: PUSH
70718: LD_INT 7
70720: EQUAL
70721: IFFALSE 70731
// sRadar := true ;
70723: LD_ADDR_EXP 83
70727: PUSH
70728: LD_INT 1
70730: ST_TO_ADDR
// if p3 = 8 then
70731: LD_VAR 0 3
70735: PUSH
70736: LD_INT 8
70738: EQUAL
70739: IFFALSE 70749
// sBunker := true ;
70741: LD_ADDR_EXP 84
70745: PUSH
70746: LD_INT 1
70748: ST_TO_ADDR
// if p3 = 9 then
70749: LD_VAR 0 3
70753: PUSH
70754: LD_INT 9
70756: EQUAL
70757: IFFALSE 70767
// sHack := true ;
70759: LD_ADDR_EXP 85
70763: PUSH
70764: LD_INT 1
70766: ST_TO_ADDR
// if p3 = 10 then
70767: LD_VAR 0 3
70771: PUSH
70772: LD_INT 10
70774: EQUAL
70775: IFFALSE 70785
// sFire := true ;
70777: LD_ADDR_EXP 86
70781: PUSH
70782: LD_INT 1
70784: ST_TO_ADDR
// if p3 = 11 then
70785: LD_VAR 0 3
70789: PUSH
70790: LD_INT 11
70792: EQUAL
70793: IFFALSE 70803
// sRefresh := true ;
70795: LD_ADDR_EXP 87
70799: PUSH
70800: LD_INT 1
70802: ST_TO_ADDR
// if p3 = 12 then
70803: LD_VAR 0 3
70807: PUSH
70808: LD_INT 12
70810: EQUAL
70811: IFFALSE 70821
// sExp := true ;
70813: LD_ADDR_EXP 88
70817: PUSH
70818: LD_INT 1
70820: ST_TO_ADDR
// if p3 = 13 then
70821: LD_VAR 0 3
70825: PUSH
70826: LD_INT 13
70828: EQUAL
70829: IFFALSE 70839
// sDepot := true ;
70831: LD_ADDR_EXP 89
70835: PUSH
70836: LD_INT 1
70838: ST_TO_ADDR
// if p3 = 14 then
70839: LD_VAR 0 3
70843: PUSH
70844: LD_INT 14
70846: EQUAL
70847: IFFALSE 70857
// sFlag := true ;
70849: LD_ADDR_EXP 90
70853: PUSH
70854: LD_INT 1
70856: ST_TO_ADDR
// if p3 = 15 then
70857: LD_VAR 0 3
70861: PUSH
70862: LD_INT 15
70864: EQUAL
70865: IFFALSE 70875
// sKamikadze := true ;
70867: LD_ADDR_EXP 98
70871: PUSH
70872: LD_INT 1
70874: ST_TO_ADDR
// if p3 = 16 then
70875: LD_VAR 0 3
70879: PUSH
70880: LD_INT 16
70882: EQUAL
70883: IFFALSE 70893
// sTroll := true ;
70885: LD_ADDR_EXP 99
70889: PUSH
70890: LD_INT 1
70892: ST_TO_ADDR
// if p3 = 17 then
70893: LD_VAR 0 3
70897: PUSH
70898: LD_INT 17
70900: EQUAL
70901: IFFALSE 70911
// sSlow := true ;
70903: LD_ADDR_EXP 100
70907: PUSH
70908: LD_INT 1
70910: ST_TO_ADDR
// if p3 = 18 then
70911: LD_VAR 0 3
70915: PUSH
70916: LD_INT 18
70918: EQUAL
70919: IFFALSE 70929
// sLack := true ;
70921: LD_ADDR_EXP 101
70925: PUSH
70926: LD_INT 1
70928: ST_TO_ADDR
// if p3 = 19 then
70929: LD_VAR 0 3
70933: PUSH
70934: LD_INT 19
70936: EQUAL
70937: IFFALSE 70947
// sTank := true ;
70939: LD_ADDR_EXP 103
70943: PUSH
70944: LD_INT 1
70946: ST_TO_ADDR
// if p3 = 20 then
70947: LD_VAR 0 3
70951: PUSH
70952: LD_INT 20
70954: EQUAL
70955: IFFALSE 70965
// sRemote := true ;
70957: LD_ADDR_EXP 104
70961: PUSH
70962: LD_INT 1
70964: ST_TO_ADDR
// if p3 = 21 then
70965: LD_VAR 0 3
70969: PUSH
70970: LD_INT 21
70972: EQUAL
70973: IFFALSE 70983
// sPowell := true ;
70975: LD_ADDR_EXP 105
70979: PUSH
70980: LD_INT 1
70982: ST_TO_ADDR
// if p3 = 22 then
70983: LD_VAR 0 3
70987: PUSH
70988: LD_INT 22
70990: EQUAL
70991: IFFALSE 71001
// sTeleport := true ;
70993: LD_ADDR_EXP 108
70997: PUSH
70998: LD_INT 1
71000: ST_TO_ADDR
// if p3 = 23 then
71001: LD_VAR 0 3
71005: PUSH
71006: LD_INT 23
71008: EQUAL
71009: IFFALSE 71019
// sOilTower := true ;
71011: LD_ADDR_EXP 110
71015: PUSH
71016: LD_INT 1
71018: ST_TO_ADDR
// if p3 = 24 then
71019: LD_VAR 0 3
71023: PUSH
71024: LD_INT 24
71026: EQUAL
71027: IFFALSE 71037
// sShovel := true ;
71029: LD_ADDR_EXP 111
71033: PUSH
71034: LD_INT 1
71036: ST_TO_ADDR
// if p3 = 25 then
71037: LD_VAR 0 3
71041: PUSH
71042: LD_INT 25
71044: EQUAL
71045: IFFALSE 71055
// sSheik := true ;
71047: LD_ADDR_EXP 112
71051: PUSH
71052: LD_INT 1
71054: ST_TO_ADDR
// if p3 = 26 then
71055: LD_VAR 0 3
71059: PUSH
71060: LD_INT 26
71062: EQUAL
71063: IFFALSE 71073
// sEarthquake := true ;
71065: LD_ADDR_EXP 114
71069: PUSH
71070: LD_INT 1
71072: ST_TO_ADDR
// if p3 = 27 then
71073: LD_VAR 0 3
71077: PUSH
71078: LD_INT 27
71080: EQUAL
71081: IFFALSE 71091
// sAI := true ;
71083: LD_ADDR_EXP 115
71087: PUSH
71088: LD_INT 1
71090: ST_TO_ADDR
// if p3 = 28 then
71091: LD_VAR 0 3
71095: PUSH
71096: LD_INT 28
71098: EQUAL
71099: IFFALSE 71109
// sCargo := true ;
71101: LD_ADDR_EXP 118
71105: PUSH
71106: LD_INT 1
71108: ST_TO_ADDR
// if p3 = 29 then
71109: LD_VAR 0 3
71113: PUSH
71114: LD_INT 29
71116: EQUAL
71117: IFFALSE 71127
// sDLaser := true ;
71119: LD_ADDR_EXP 119
71123: PUSH
71124: LD_INT 1
71126: ST_TO_ADDR
// if p3 = 30 then
71127: LD_VAR 0 3
71131: PUSH
71132: LD_INT 30
71134: EQUAL
71135: IFFALSE 71145
// sExchange := true ;
71137: LD_ADDR_EXP 120
71141: PUSH
71142: LD_INT 1
71144: ST_TO_ADDR
// if p3 = 31 then
71145: LD_VAR 0 3
71149: PUSH
71150: LD_INT 31
71152: EQUAL
71153: IFFALSE 71163
// sFac := true ;
71155: LD_ADDR_EXP 121
71159: PUSH
71160: LD_INT 1
71162: ST_TO_ADDR
// if p3 = 32 then
71163: LD_VAR 0 3
71167: PUSH
71168: LD_INT 32
71170: EQUAL
71171: IFFALSE 71181
// sPower := true ;
71173: LD_ADDR_EXP 122
71177: PUSH
71178: LD_INT 1
71180: ST_TO_ADDR
// if p3 = 33 then
71181: LD_VAR 0 3
71185: PUSH
71186: LD_INT 33
71188: EQUAL
71189: IFFALSE 71199
// sRandom := true ;
71191: LD_ADDR_EXP 123
71195: PUSH
71196: LD_INT 1
71198: ST_TO_ADDR
// if p3 = 34 then
71199: LD_VAR 0 3
71203: PUSH
71204: LD_INT 34
71206: EQUAL
71207: IFFALSE 71217
// sShield := true ;
71209: LD_ADDR_EXP 124
71213: PUSH
71214: LD_INT 1
71216: ST_TO_ADDR
// if p3 = 35 then
71217: LD_VAR 0 3
71221: PUSH
71222: LD_INT 35
71224: EQUAL
71225: IFFALSE 71235
// sTime := true ;
71227: LD_ADDR_EXP 125
71231: PUSH
71232: LD_INT 1
71234: ST_TO_ADDR
// if p3 = 36 then
71235: LD_VAR 0 3
71239: PUSH
71240: LD_INT 36
71242: EQUAL
71243: IFFALSE 71253
// sTools := true ;
71245: LD_ADDR_EXP 126
71249: PUSH
71250: LD_INT 1
71252: ST_TO_ADDR
// if p3 = 101 then
71253: LD_VAR 0 3
71257: PUSH
71258: LD_INT 101
71260: EQUAL
71261: IFFALSE 71271
// sSold := true ;
71263: LD_ADDR_EXP 91
71267: PUSH
71268: LD_INT 1
71270: ST_TO_ADDR
// if p3 = 102 then
71271: LD_VAR 0 3
71275: PUSH
71276: LD_INT 102
71278: EQUAL
71279: IFFALSE 71289
// sDiff := true ;
71281: LD_ADDR_EXP 92
71285: PUSH
71286: LD_INT 1
71288: ST_TO_ADDR
// if p3 = 103 then
71289: LD_VAR 0 3
71293: PUSH
71294: LD_INT 103
71296: EQUAL
71297: IFFALSE 71307
// sFog := true ;
71299: LD_ADDR_EXP 95
71303: PUSH
71304: LD_INT 1
71306: ST_TO_ADDR
// if p3 = 104 then
71307: LD_VAR 0 3
71311: PUSH
71312: LD_INT 104
71314: EQUAL
71315: IFFALSE 71325
// sReset := true ;
71317: LD_ADDR_EXP 96
71321: PUSH
71322: LD_INT 1
71324: ST_TO_ADDR
// if p3 = 105 then
71325: LD_VAR 0 3
71329: PUSH
71330: LD_INT 105
71332: EQUAL
71333: IFFALSE 71343
// sSun := true ;
71335: LD_ADDR_EXP 97
71339: PUSH
71340: LD_INT 1
71342: ST_TO_ADDR
// if p3 = 106 then
71343: LD_VAR 0 3
71347: PUSH
71348: LD_INT 106
71350: EQUAL
71351: IFFALSE 71361
// sTiger := true ;
71353: LD_ADDR_EXP 93
71357: PUSH
71358: LD_INT 1
71360: ST_TO_ADDR
// if p3 = 107 then
71361: LD_VAR 0 3
71365: PUSH
71366: LD_INT 107
71368: EQUAL
71369: IFFALSE 71379
// sBomb := true ;
71371: LD_ADDR_EXP 94
71375: PUSH
71376: LD_INT 1
71378: ST_TO_ADDR
// if p3 = 108 then
71379: LD_VAR 0 3
71383: PUSH
71384: LD_INT 108
71386: EQUAL
71387: IFFALSE 71397
// sWound := true ;
71389: LD_ADDR_EXP 102
71393: PUSH
71394: LD_INT 1
71396: ST_TO_ADDR
// if p3 = 109 then
71397: LD_VAR 0 3
71401: PUSH
71402: LD_INT 109
71404: EQUAL
71405: IFFALSE 71415
// sBetray := true ;
71407: LD_ADDR_EXP 106
71411: PUSH
71412: LD_INT 1
71414: ST_TO_ADDR
// if p3 = 110 then
71415: LD_VAR 0 3
71419: PUSH
71420: LD_INT 110
71422: EQUAL
71423: IFFALSE 71433
// sContamin := true ;
71425: LD_ADDR_EXP 107
71429: PUSH
71430: LD_INT 1
71432: ST_TO_ADDR
// if p3 = 111 then
71433: LD_VAR 0 3
71437: PUSH
71438: LD_INT 111
71440: EQUAL
71441: IFFALSE 71451
// sOil := true ;
71443: LD_ADDR_EXP 109
71447: PUSH
71448: LD_INT 1
71450: ST_TO_ADDR
// if p3 = 112 then
71451: LD_VAR 0 3
71455: PUSH
71456: LD_INT 112
71458: EQUAL
71459: IFFALSE 71469
// sStu := true ;
71461: LD_ADDR_EXP 113
71465: PUSH
71466: LD_INT 1
71468: ST_TO_ADDR
// if p3 = 113 then
71469: LD_VAR 0 3
71473: PUSH
71474: LD_INT 113
71476: EQUAL
71477: IFFALSE 71487
// sBazooka := true ;
71479: LD_ADDR_EXP 116
71483: PUSH
71484: LD_INT 1
71486: ST_TO_ADDR
// if p3 = 114 then
71487: LD_VAR 0 3
71491: PUSH
71492: LD_INT 114
71494: EQUAL
71495: IFFALSE 71505
// sMortar := true ;
71497: LD_ADDR_EXP 117
71501: PUSH
71502: LD_INT 1
71504: ST_TO_ADDR
// if p3 = 115 then
71505: LD_VAR 0 3
71509: PUSH
71510: LD_INT 115
71512: EQUAL
71513: IFFALSE 71523
// sRanger := true ;
71515: LD_ADDR_EXP 127
71519: PUSH
71520: LD_INT 1
71522: ST_TO_ADDR
// if p3 = 116 then
71523: LD_VAR 0 3
71527: PUSH
71528: LD_INT 116
71530: EQUAL
71531: IFFALSE 71541
// sComputer := true ;
71533: LD_ADDR_EXP 128
71537: PUSH
71538: LD_INT 1
71540: ST_TO_ADDR
// if p3 = 117 then
71541: LD_VAR 0 3
71545: PUSH
71546: LD_INT 117
71548: EQUAL
71549: IFFALSE 71559
// s30 := true ;
71551: LD_ADDR_EXP 129
71555: PUSH
71556: LD_INT 1
71558: ST_TO_ADDR
// if p3 = 118 then
71559: LD_VAR 0 3
71563: PUSH
71564: LD_INT 118
71566: EQUAL
71567: IFFALSE 71577
// s60 := true ;
71569: LD_ADDR_EXP 130
71573: PUSH
71574: LD_INT 1
71576: ST_TO_ADDR
// end ; if p2 = hack_mode then
71577: LD_VAR 0 2
71581: PUSH
71582: LD_INT 101
71584: EQUAL
71585: IFFALSE 71713
// begin case p3 of 1 :
71587: LD_VAR 0 3
71591: PUSH
71592: LD_INT 1
71594: DOUBLE
71595: EQUAL
71596: IFTRUE 71600
71598: GO 71607
71600: POP
// hHackUnlimitedResources ; 2 :
71601: CALL 83860 0 0
71605: GO 71713
71607: LD_INT 2
71609: DOUBLE
71610: EQUAL
71611: IFTRUE 71615
71613: GO 71622
71615: POP
// hHackSetLevel10 ; 3 :
71616: CALL 83993 0 0
71620: GO 71713
71622: LD_INT 3
71624: DOUBLE
71625: EQUAL
71626: IFTRUE 71630
71628: GO 71637
71630: POP
// hHackSetLevel10YourUnits ; 4 :
71631: CALL 84078 0 0
71635: GO 71713
71637: LD_INT 4
71639: DOUBLE
71640: EQUAL
71641: IFTRUE 71645
71643: GO 71652
71645: POP
// hHackInvincible ; 5 :
71646: CALL 84526 0 0
71650: GO 71713
71652: LD_INT 5
71654: DOUBLE
71655: EQUAL
71656: IFTRUE 71660
71658: GO 71667
71660: POP
// hHackInvisible ; 6 :
71661: CALL 84637 0 0
71665: GO 71713
71667: LD_INT 6
71669: DOUBLE
71670: EQUAL
71671: IFTRUE 71675
71673: GO 71682
71675: POP
// hHackChangeYourSide ; 7 :
71676: CALL 84694 0 0
71680: GO 71713
71682: LD_INT 7
71684: DOUBLE
71685: EQUAL
71686: IFTRUE 71690
71688: GO 71697
71690: POP
// hHackChangeUnitSide ; 8 :
71691: CALL 84736 0 0
71695: GO 71713
71697: LD_INT 8
71699: DOUBLE
71700: EQUAL
71701: IFTRUE 71705
71703: GO 71712
71705: POP
// hHackFog ; end ;
71706: CALL 84837 0 0
71710: GO 71713
71712: POP
// end ; if p2 = game_save_mode then
71713: LD_VAR 0 2
71717: PUSH
71718: LD_INT 102
71720: EQUAL
71721: IFFALSE 71776
// begin if p3 = 1 then
71723: LD_VAR 0 3
71727: PUSH
71728: LD_INT 1
71730: EQUAL
71731: IFFALSE 71743
// globalGameSaveCounter := p4 ;
71733: LD_ADDR_EXP 73
71737: PUSH
71738: LD_VAR 0 4
71742: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
71743: LD_VAR 0 3
71747: PUSH
71748: LD_INT 2
71750: EQUAL
71751: PUSH
71752: LD_EXP 73
71756: AND
71757: IFFALSE 71776
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71759: LD_STRING setGameSaveCounter(
71761: PUSH
71762: LD_EXP 73
71766: STR
71767: PUSH
71768: LD_STRING )
71770: STR
71771: PPUSH
71772: CALL_OW 559
// end ; end ;
71776: LD_VAR 0 7
71780: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
71781: LD_INT 0
71783: PPUSH
// streamModeActive := false ;
71784: LD_ADDR_EXP 74
71788: PUSH
71789: LD_INT 0
71791: ST_TO_ADDR
// normalCounter := 36 ;
71792: LD_ADDR_EXP 75
71796: PUSH
71797: LD_INT 36
71799: ST_TO_ADDR
// hardcoreCounter := 18 ;
71800: LD_ADDR_EXP 76
71804: PUSH
71805: LD_INT 18
71807: ST_TO_ADDR
// sRocket := false ;
71808: LD_ADDR_EXP 79
71812: PUSH
71813: LD_INT 0
71815: ST_TO_ADDR
// sSpeed := false ;
71816: LD_ADDR_EXP 78
71820: PUSH
71821: LD_INT 0
71823: ST_TO_ADDR
// sEngine := false ;
71824: LD_ADDR_EXP 80
71828: PUSH
71829: LD_INT 0
71831: ST_TO_ADDR
// sSpec := false ;
71832: LD_ADDR_EXP 77
71836: PUSH
71837: LD_INT 0
71839: ST_TO_ADDR
// sLevel := false ;
71840: LD_ADDR_EXP 81
71844: PUSH
71845: LD_INT 0
71847: ST_TO_ADDR
// sArmoury := false ;
71848: LD_ADDR_EXP 82
71852: PUSH
71853: LD_INT 0
71855: ST_TO_ADDR
// sRadar := false ;
71856: LD_ADDR_EXP 83
71860: PUSH
71861: LD_INT 0
71863: ST_TO_ADDR
// sBunker := false ;
71864: LD_ADDR_EXP 84
71868: PUSH
71869: LD_INT 0
71871: ST_TO_ADDR
// sHack := false ;
71872: LD_ADDR_EXP 85
71876: PUSH
71877: LD_INT 0
71879: ST_TO_ADDR
// sFire := false ;
71880: LD_ADDR_EXP 86
71884: PUSH
71885: LD_INT 0
71887: ST_TO_ADDR
// sRefresh := false ;
71888: LD_ADDR_EXP 87
71892: PUSH
71893: LD_INT 0
71895: ST_TO_ADDR
// sExp := false ;
71896: LD_ADDR_EXP 88
71900: PUSH
71901: LD_INT 0
71903: ST_TO_ADDR
// sDepot := false ;
71904: LD_ADDR_EXP 89
71908: PUSH
71909: LD_INT 0
71911: ST_TO_ADDR
// sFlag := false ;
71912: LD_ADDR_EXP 90
71916: PUSH
71917: LD_INT 0
71919: ST_TO_ADDR
// sKamikadze := false ;
71920: LD_ADDR_EXP 98
71924: PUSH
71925: LD_INT 0
71927: ST_TO_ADDR
// sTroll := false ;
71928: LD_ADDR_EXP 99
71932: PUSH
71933: LD_INT 0
71935: ST_TO_ADDR
// sSlow := false ;
71936: LD_ADDR_EXP 100
71940: PUSH
71941: LD_INT 0
71943: ST_TO_ADDR
// sLack := false ;
71944: LD_ADDR_EXP 101
71948: PUSH
71949: LD_INT 0
71951: ST_TO_ADDR
// sTank := false ;
71952: LD_ADDR_EXP 103
71956: PUSH
71957: LD_INT 0
71959: ST_TO_ADDR
// sRemote := false ;
71960: LD_ADDR_EXP 104
71964: PUSH
71965: LD_INT 0
71967: ST_TO_ADDR
// sPowell := false ;
71968: LD_ADDR_EXP 105
71972: PUSH
71973: LD_INT 0
71975: ST_TO_ADDR
// sTeleport := false ;
71976: LD_ADDR_EXP 108
71980: PUSH
71981: LD_INT 0
71983: ST_TO_ADDR
// sOilTower := false ;
71984: LD_ADDR_EXP 110
71988: PUSH
71989: LD_INT 0
71991: ST_TO_ADDR
// sShovel := false ;
71992: LD_ADDR_EXP 111
71996: PUSH
71997: LD_INT 0
71999: ST_TO_ADDR
// sSheik := false ;
72000: LD_ADDR_EXP 112
72004: PUSH
72005: LD_INT 0
72007: ST_TO_ADDR
// sEarthquake := false ;
72008: LD_ADDR_EXP 114
72012: PUSH
72013: LD_INT 0
72015: ST_TO_ADDR
// sAI := false ;
72016: LD_ADDR_EXP 115
72020: PUSH
72021: LD_INT 0
72023: ST_TO_ADDR
// sCargo := false ;
72024: LD_ADDR_EXP 118
72028: PUSH
72029: LD_INT 0
72031: ST_TO_ADDR
// sDLaser := false ;
72032: LD_ADDR_EXP 119
72036: PUSH
72037: LD_INT 0
72039: ST_TO_ADDR
// sExchange := false ;
72040: LD_ADDR_EXP 120
72044: PUSH
72045: LD_INT 0
72047: ST_TO_ADDR
// sFac := false ;
72048: LD_ADDR_EXP 121
72052: PUSH
72053: LD_INT 0
72055: ST_TO_ADDR
// sPower := false ;
72056: LD_ADDR_EXP 122
72060: PUSH
72061: LD_INT 0
72063: ST_TO_ADDR
// sRandom := false ;
72064: LD_ADDR_EXP 123
72068: PUSH
72069: LD_INT 0
72071: ST_TO_ADDR
// sShield := false ;
72072: LD_ADDR_EXP 124
72076: PUSH
72077: LD_INT 0
72079: ST_TO_ADDR
// sTime := false ;
72080: LD_ADDR_EXP 125
72084: PUSH
72085: LD_INT 0
72087: ST_TO_ADDR
// sTools := false ;
72088: LD_ADDR_EXP 126
72092: PUSH
72093: LD_INT 0
72095: ST_TO_ADDR
// sSold := false ;
72096: LD_ADDR_EXP 91
72100: PUSH
72101: LD_INT 0
72103: ST_TO_ADDR
// sDiff := false ;
72104: LD_ADDR_EXP 92
72108: PUSH
72109: LD_INT 0
72111: ST_TO_ADDR
// sFog := false ;
72112: LD_ADDR_EXP 95
72116: PUSH
72117: LD_INT 0
72119: ST_TO_ADDR
// sReset := false ;
72120: LD_ADDR_EXP 96
72124: PUSH
72125: LD_INT 0
72127: ST_TO_ADDR
// sSun := false ;
72128: LD_ADDR_EXP 97
72132: PUSH
72133: LD_INT 0
72135: ST_TO_ADDR
// sTiger := false ;
72136: LD_ADDR_EXP 93
72140: PUSH
72141: LD_INT 0
72143: ST_TO_ADDR
// sBomb := false ;
72144: LD_ADDR_EXP 94
72148: PUSH
72149: LD_INT 0
72151: ST_TO_ADDR
// sWound := false ;
72152: LD_ADDR_EXP 102
72156: PUSH
72157: LD_INT 0
72159: ST_TO_ADDR
// sBetray := false ;
72160: LD_ADDR_EXP 106
72164: PUSH
72165: LD_INT 0
72167: ST_TO_ADDR
// sContamin := false ;
72168: LD_ADDR_EXP 107
72172: PUSH
72173: LD_INT 0
72175: ST_TO_ADDR
// sOil := false ;
72176: LD_ADDR_EXP 109
72180: PUSH
72181: LD_INT 0
72183: ST_TO_ADDR
// sStu := false ;
72184: LD_ADDR_EXP 113
72188: PUSH
72189: LD_INT 0
72191: ST_TO_ADDR
// sBazooka := false ;
72192: LD_ADDR_EXP 116
72196: PUSH
72197: LD_INT 0
72199: ST_TO_ADDR
// sMortar := false ;
72200: LD_ADDR_EXP 117
72204: PUSH
72205: LD_INT 0
72207: ST_TO_ADDR
// sRanger := false ;
72208: LD_ADDR_EXP 127
72212: PUSH
72213: LD_INT 0
72215: ST_TO_ADDR
// sComputer := false ;
72216: LD_ADDR_EXP 128
72220: PUSH
72221: LD_INT 0
72223: ST_TO_ADDR
// s30 := false ;
72224: LD_ADDR_EXP 129
72228: PUSH
72229: LD_INT 0
72231: ST_TO_ADDR
// s60 := false ;
72232: LD_ADDR_EXP 130
72236: PUSH
72237: LD_INT 0
72239: ST_TO_ADDR
// end ;
72240: LD_VAR 0 1
72244: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72245: LD_INT 0
72247: PPUSH
72248: PPUSH
72249: PPUSH
72250: PPUSH
72251: PPUSH
72252: PPUSH
72253: PPUSH
// result := [ ] ;
72254: LD_ADDR_VAR 0 2
72258: PUSH
72259: EMPTY
72260: ST_TO_ADDR
// if campaign_id = 1 then
72261: LD_OWVAR 69
72265: PUSH
72266: LD_INT 1
72268: EQUAL
72269: IFFALSE 75435
// begin case mission_number of 1 :
72271: LD_OWVAR 70
72275: PUSH
72276: LD_INT 1
72278: DOUBLE
72279: EQUAL
72280: IFTRUE 72284
72282: GO 72360
72284: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72285: LD_ADDR_VAR 0 2
72289: PUSH
72290: LD_INT 2
72292: PUSH
72293: LD_INT 4
72295: PUSH
72296: LD_INT 11
72298: PUSH
72299: LD_INT 12
72301: PUSH
72302: LD_INT 15
72304: PUSH
72305: LD_INT 16
72307: PUSH
72308: LD_INT 22
72310: PUSH
72311: LD_INT 23
72313: PUSH
72314: LD_INT 26
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 101
72330: PUSH
72331: LD_INT 102
72333: PUSH
72334: LD_INT 106
72336: PUSH
72337: LD_INT 116
72339: PUSH
72340: LD_INT 117
72342: PUSH
72343: LD_INT 118
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: ST_TO_ADDR
72358: GO 75433
72360: LD_INT 2
72362: DOUBLE
72363: EQUAL
72364: IFTRUE 72368
72366: GO 72452
72368: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72369: LD_ADDR_VAR 0 2
72373: PUSH
72374: LD_INT 2
72376: PUSH
72377: LD_INT 4
72379: PUSH
72380: LD_INT 11
72382: PUSH
72383: LD_INT 12
72385: PUSH
72386: LD_INT 15
72388: PUSH
72389: LD_INT 16
72391: PUSH
72392: LD_INT 22
72394: PUSH
72395: LD_INT 23
72397: PUSH
72398: LD_INT 26
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 101
72414: PUSH
72415: LD_INT 102
72417: PUSH
72418: LD_INT 105
72420: PUSH
72421: LD_INT 106
72423: PUSH
72424: LD_INT 108
72426: PUSH
72427: LD_INT 116
72429: PUSH
72430: LD_INT 117
72432: PUSH
72433: LD_INT 118
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: ST_TO_ADDR
72450: GO 75433
72452: LD_INT 3
72454: DOUBLE
72455: EQUAL
72456: IFTRUE 72460
72458: GO 72548
72460: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72461: LD_ADDR_VAR 0 2
72465: PUSH
72466: LD_INT 2
72468: PUSH
72469: LD_INT 4
72471: PUSH
72472: LD_INT 5
72474: PUSH
72475: LD_INT 11
72477: PUSH
72478: LD_INT 12
72480: PUSH
72481: LD_INT 15
72483: PUSH
72484: LD_INT 16
72486: PUSH
72487: LD_INT 22
72489: PUSH
72490: LD_INT 26
72492: PUSH
72493: LD_INT 36
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 101
72510: PUSH
72511: LD_INT 102
72513: PUSH
72514: LD_INT 105
72516: PUSH
72517: LD_INT 106
72519: PUSH
72520: LD_INT 108
72522: PUSH
72523: LD_INT 116
72525: PUSH
72526: LD_INT 117
72528: PUSH
72529: LD_INT 118
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: ST_TO_ADDR
72546: GO 75433
72548: LD_INT 4
72550: DOUBLE
72551: EQUAL
72552: IFTRUE 72556
72554: GO 72652
72556: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
72557: LD_ADDR_VAR 0 2
72561: PUSH
72562: LD_INT 2
72564: PUSH
72565: LD_INT 4
72567: PUSH
72568: LD_INT 5
72570: PUSH
72571: LD_INT 8
72573: PUSH
72574: LD_INT 11
72576: PUSH
72577: LD_INT 12
72579: PUSH
72580: LD_INT 15
72582: PUSH
72583: LD_INT 16
72585: PUSH
72586: LD_INT 22
72588: PUSH
72589: LD_INT 23
72591: PUSH
72592: LD_INT 26
72594: PUSH
72595: LD_INT 36
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 101
72614: PUSH
72615: LD_INT 102
72617: PUSH
72618: LD_INT 105
72620: PUSH
72621: LD_INT 106
72623: PUSH
72624: LD_INT 108
72626: PUSH
72627: LD_INT 116
72629: PUSH
72630: LD_INT 117
72632: PUSH
72633: LD_INT 118
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: ST_TO_ADDR
72650: GO 75433
72652: LD_INT 5
72654: DOUBLE
72655: EQUAL
72656: IFTRUE 72660
72658: GO 72772
72660: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
72661: LD_ADDR_VAR 0 2
72665: PUSH
72666: LD_INT 2
72668: PUSH
72669: LD_INT 4
72671: PUSH
72672: LD_INT 5
72674: PUSH
72675: LD_INT 6
72677: PUSH
72678: LD_INT 8
72680: PUSH
72681: LD_INT 11
72683: PUSH
72684: LD_INT 12
72686: PUSH
72687: LD_INT 15
72689: PUSH
72690: LD_INT 16
72692: PUSH
72693: LD_INT 22
72695: PUSH
72696: LD_INT 23
72698: PUSH
72699: LD_INT 25
72701: PUSH
72702: LD_INT 26
72704: PUSH
72705: LD_INT 36
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 101
72726: PUSH
72727: LD_INT 102
72729: PUSH
72730: LD_INT 105
72732: PUSH
72733: LD_INT 106
72735: PUSH
72736: LD_INT 108
72738: PUSH
72739: LD_INT 109
72741: PUSH
72742: LD_INT 112
72744: PUSH
72745: LD_INT 116
72747: PUSH
72748: LD_INT 117
72750: PUSH
72751: LD_INT 118
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: ST_TO_ADDR
72770: GO 75433
72772: LD_INT 6
72774: DOUBLE
72775: EQUAL
72776: IFTRUE 72780
72778: GO 72912
72780: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
72781: LD_ADDR_VAR 0 2
72785: PUSH
72786: LD_INT 2
72788: PUSH
72789: LD_INT 4
72791: PUSH
72792: LD_INT 5
72794: PUSH
72795: LD_INT 6
72797: PUSH
72798: LD_INT 8
72800: PUSH
72801: LD_INT 11
72803: PUSH
72804: LD_INT 12
72806: PUSH
72807: LD_INT 15
72809: PUSH
72810: LD_INT 16
72812: PUSH
72813: LD_INT 20
72815: PUSH
72816: LD_INT 21
72818: PUSH
72819: LD_INT 22
72821: PUSH
72822: LD_INT 23
72824: PUSH
72825: LD_INT 25
72827: PUSH
72828: LD_INT 26
72830: PUSH
72831: LD_INT 30
72833: PUSH
72834: LD_INT 31
72836: PUSH
72837: LD_INT 32
72839: PUSH
72840: LD_INT 36
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 101
72866: PUSH
72867: LD_INT 102
72869: PUSH
72870: LD_INT 105
72872: PUSH
72873: LD_INT 106
72875: PUSH
72876: LD_INT 108
72878: PUSH
72879: LD_INT 109
72881: PUSH
72882: LD_INT 112
72884: PUSH
72885: LD_INT 116
72887: PUSH
72888: LD_INT 117
72890: PUSH
72891: LD_INT 118
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: ST_TO_ADDR
72910: GO 75433
72912: LD_INT 7
72914: DOUBLE
72915: EQUAL
72916: IFTRUE 72920
72918: GO 73032
72920: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
72921: LD_ADDR_VAR 0 2
72925: PUSH
72926: LD_INT 2
72928: PUSH
72929: LD_INT 4
72931: PUSH
72932: LD_INT 5
72934: PUSH
72935: LD_INT 7
72937: PUSH
72938: LD_INT 11
72940: PUSH
72941: LD_INT 12
72943: PUSH
72944: LD_INT 15
72946: PUSH
72947: LD_INT 16
72949: PUSH
72950: LD_INT 20
72952: PUSH
72953: LD_INT 21
72955: PUSH
72956: LD_INT 22
72958: PUSH
72959: LD_INT 23
72961: PUSH
72962: LD_INT 25
72964: PUSH
72965: LD_INT 26
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 101
72986: PUSH
72987: LD_INT 102
72989: PUSH
72990: LD_INT 103
72992: PUSH
72993: LD_INT 105
72995: PUSH
72996: LD_INT 106
72998: PUSH
72999: LD_INT 108
73001: PUSH
73002: LD_INT 112
73004: PUSH
73005: LD_INT 116
73007: PUSH
73008: LD_INT 117
73010: PUSH
73011: LD_INT 118
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: ST_TO_ADDR
73030: GO 75433
73032: LD_INT 8
73034: DOUBLE
73035: EQUAL
73036: IFTRUE 73040
73038: GO 73180
73040: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73041: LD_ADDR_VAR 0 2
73045: PUSH
73046: LD_INT 2
73048: PUSH
73049: LD_INT 4
73051: PUSH
73052: LD_INT 5
73054: PUSH
73055: LD_INT 6
73057: PUSH
73058: LD_INT 7
73060: PUSH
73061: LD_INT 8
73063: PUSH
73064: LD_INT 11
73066: PUSH
73067: LD_INT 12
73069: PUSH
73070: LD_INT 15
73072: PUSH
73073: LD_INT 16
73075: PUSH
73076: LD_INT 20
73078: PUSH
73079: LD_INT 21
73081: PUSH
73082: LD_INT 22
73084: PUSH
73085: LD_INT 23
73087: PUSH
73088: LD_INT 25
73090: PUSH
73091: LD_INT 26
73093: PUSH
73094: LD_INT 30
73096: PUSH
73097: LD_INT 31
73099: PUSH
73100: LD_INT 32
73102: PUSH
73103: LD_INT 36
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 101
73130: PUSH
73131: LD_INT 102
73133: PUSH
73134: LD_INT 103
73136: PUSH
73137: LD_INT 105
73139: PUSH
73140: LD_INT 106
73142: PUSH
73143: LD_INT 108
73145: PUSH
73146: LD_INT 109
73148: PUSH
73149: LD_INT 112
73151: PUSH
73152: LD_INT 116
73154: PUSH
73155: LD_INT 117
73157: PUSH
73158: LD_INT 118
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: ST_TO_ADDR
73178: GO 75433
73180: LD_INT 9
73182: DOUBLE
73183: EQUAL
73184: IFTRUE 73188
73186: GO 73336
73188: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73189: LD_ADDR_VAR 0 2
73193: PUSH
73194: LD_INT 2
73196: PUSH
73197: LD_INT 4
73199: PUSH
73200: LD_INT 5
73202: PUSH
73203: LD_INT 6
73205: PUSH
73206: LD_INT 7
73208: PUSH
73209: LD_INT 8
73211: PUSH
73212: LD_INT 11
73214: PUSH
73215: LD_INT 12
73217: PUSH
73218: LD_INT 15
73220: PUSH
73221: LD_INT 16
73223: PUSH
73224: LD_INT 20
73226: PUSH
73227: LD_INT 21
73229: PUSH
73230: LD_INT 22
73232: PUSH
73233: LD_INT 23
73235: PUSH
73236: LD_INT 25
73238: PUSH
73239: LD_INT 26
73241: PUSH
73242: LD_INT 28
73244: PUSH
73245: LD_INT 30
73247: PUSH
73248: LD_INT 31
73250: PUSH
73251: LD_INT 32
73253: PUSH
73254: LD_INT 36
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 101
73282: PUSH
73283: LD_INT 102
73285: PUSH
73286: LD_INT 103
73288: PUSH
73289: LD_INT 105
73291: PUSH
73292: LD_INT 106
73294: PUSH
73295: LD_INT 108
73297: PUSH
73298: LD_INT 109
73300: PUSH
73301: LD_INT 112
73303: PUSH
73304: LD_INT 114
73306: PUSH
73307: LD_INT 116
73309: PUSH
73310: LD_INT 117
73312: PUSH
73313: LD_INT 118
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: ST_TO_ADDR
73334: GO 75433
73336: LD_INT 10
73338: DOUBLE
73339: EQUAL
73340: IFTRUE 73344
73342: GO 73540
73344: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73345: LD_ADDR_VAR 0 2
73349: PUSH
73350: LD_INT 2
73352: PUSH
73353: LD_INT 4
73355: PUSH
73356: LD_INT 5
73358: PUSH
73359: LD_INT 6
73361: PUSH
73362: LD_INT 7
73364: PUSH
73365: LD_INT 8
73367: PUSH
73368: LD_INT 9
73370: PUSH
73371: LD_INT 10
73373: PUSH
73374: LD_INT 11
73376: PUSH
73377: LD_INT 12
73379: PUSH
73380: LD_INT 13
73382: PUSH
73383: LD_INT 14
73385: PUSH
73386: LD_INT 15
73388: PUSH
73389: LD_INT 16
73391: PUSH
73392: LD_INT 17
73394: PUSH
73395: LD_INT 18
73397: PUSH
73398: LD_INT 19
73400: PUSH
73401: LD_INT 20
73403: PUSH
73404: LD_INT 21
73406: PUSH
73407: LD_INT 22
73409: PUSH
73410: LD_INT 23
73412: PUSH
73413: LD_INT 24
73415: PUSH
73416: LD_INT 25
73418: PUSH
73419: LD_INT 26
73421: PUSH
73422: LD_INT 28
73424: PUSH
73425: LD_INT 30
73427: PUSH
73428: LD_INT 31
73430: PUSH
73431: LD_INT 32
73433: PUSH
73434: LD_INT 36
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: PUSH
73468: LD_INT 101
73470: PUSH
73471: LD_INT 102
73473: PUSH
73474: LD_INT 103
73476: PUSH
73477: LD_INT 104
73479: PUSH
73480: LD_INT 105
73482: PUSH
73483: LD_INT 106
73485: PUSH
73486: LD_INT 107
73488: PUSH
73489: LD_INT 108
73491: PUSH
73492: LD_INT 109
73494: PUSH
73495: LD_INT 110
73497: PUSH
73498: LD_INT 111
73500: PUSH
73501: LD_INT 112
73503: PUSH
73504: LD_INT 114
73506: PUSH
73507: LD_INT 116
73509: PUSH
73510: LD_INT 117
73512: PUSH
73513: LD_INT 118
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: ST_TO_ADDR
73538: GO 75433
73540: LD_INT 11
73542: DOUBLE
73543: EQUAL
73544: IFTRUE 73548
73546: GO 73752
73548: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
73549: LD_ADDR_VAR 0 2
73553: PUSH
73554: LD_INT 2
73556: PUSH
73557: LD_INT 3
73559: PUSH
73560: LD_INT 4
73562: PUSH
73563: LD_INT 5
73565: PUSH
73566: LD_INT 6
73568: PUSH
73569: LD_INT 7
73571: PUSH
73572: LD_INT 8
73574: PUSH
73575: LD_INT 9
73577: PUSH
73578: LD_INT 10
73580: PUSH
73581: LD_INT 11
73583: PUSH
73584: LD_INT 12
73586: PUSH
73587: LD_INT 13
73589: PUSH
73590: LD_INT 14
73592: PUSH
73593: LD_INT 15
73595: PUSH
73596: LD_INT 16
73598: PUSH
73599: LD_INT 17
73601: PUSH
73602: LD_INT 18
73604: PUSH
73605: LD_INT 19
73607: PUSH
73608: LD_INT 20
73610: PUSH
73611: LD_INT 21
73613: PUSH
73614: LD_INT 22
73616: PUSH
73617: LD_INT 23
73619: PUSH
73620: LD_INT 24
73622: PUSH
73623: LD_INT 25
73625: PUSH
73626: LD_INT 26
73628: PUSH
73629: LD_INT 28
73631: PUSH
73632: LD_INT 30
73634: PUSH
73635: LD_INT 31
73637: PUSH
73638: LD_INT 32
73640: PUSH
73641: LD_INT 34
73643: PUSH
73644: LD_INT 36
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: PUSH
73680: LD_INT 101
73682: PUSH
73683: LD_INT 102
73685: PUSH
73686: LD_INT 103
73688: PUSH
73689: LD_INT 104
73691: PUSH
73692: LD_INT 105
73694: PUSH
73695: LD_INT 106
73697: PUSH
73698: LD_INT 107
73700: PUSH
73701: LD_INT 108
73703: PUSH
73704: LD_INT 109
73706: PUSH
73707: LD_INT 110
73709: PUSH
73710: LD_INT 111
73712: PUSH
73713: LD_INT 112
73715: PUSH
73716: LD_INT 114
73718: PUSH
73719: LD_INT 116
73721: PUSH
73722: LD_INT 117
73724: PUSH
73725: LD_INT 118
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: ST_TO_ADDR
73750: GO 75433
73752: LD_INT 12
73754: DOUBLE
73755: EQUAL
73756: IFTRUE 73760
73758: GO 73980
73760: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
73761: LD_ADDR_VAR 0 2
73765: PUSH
73766: LD_INT 1
73768: PUSH
73769: LD_INT 2
73771: PUSH
73772: LD_INT 3
73774: PUSH
73775: LD_INT 4
73777: PUSH
73778: LD_INT 5
73780: PUSH
73781: LD_INT 6
73783: PUSH
73784: LD_INT 7
73786: PUSH
73787: LD_INT 8
73789: PUSH
73790: LD_INT 9
73792: PUSH
73793: LD_INT 10
73795: PUSH
73796: LD_INT 11
73798: PUSH
73799: LD_INT 12
73801: PUSH
73802: LD_INT 13
73804: PUSH
73805: LD_INT 14
73807: PUSH
73808: LD_INT 15
73810: PUSH
73811: LD_INT 16
73813: PUSH
73814: LD_INT 17
73816: PUSH
73817: LD_INT 18
73819: PUSH
73820: LD_INT 19
73822: PUSH
73823: LD_INT 20
73825: PUSH
73826: LD_INT 21
73828: PUSH
73829: LD_INT 22
73831: PUSH
73832: LD_INT 23
73834: PUSH
73835: LD_INT 24
73837: PUSH
73838: LD_INT 25
73840: PUSH
73841: LD_INT 26
73843: PUSH
73844: LD_INT 27
73846: PUSH
73847: LD_INT 28
73849: PUSH
73850: LD_INT 30
73852: PUSH
73853: LD_INT 31
73855: PUSH
73856: LD_INT 32
73858: PUSH
73859: LD_INT 33
73861: PUSH
73862: LD_INT 34
73864: PUSH
73865: LD_INT 36
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: PUSH
73904: LD_INT 101
73906: PUSH
73907: LD_INT 102
73909: PUSH
73910: LD_INT 103
73912: PUSH
73913: LD_INT 104
73915: PUSH
73916: LD_INT 105
73918: PUSH
73919: LD_INT 106
73921: PUSH
73922: LD_INT 107
73924: PUSH
73925: LD_INT 108
73927: PUSH
73928: LD_INT 109
73930: PUSH
73931: LD_INT 110
73933: PUSH
73934: LD_INT 111
73936: PUSH
73937: LD_INT 112
73939: PUSH
73940: LD_INT 113
73942: PUSH
73943: LD_INT 114
73945: PUSH
73946: LD_INT 116
73948: PUSH
73949: LD_INT 117
73951: PUSH
73952: LD_INT 118
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: ST_TO_ADDR
73978: GO 75433
73980: LD_INT 13
73982: DOUBLE
73983: EQUAL
73984: IFTRUE 73988
73986: GO 74196
73988: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
73989: LD_ADDR_VAR 0 2
73993: PUSH
73994: LD_INT 1
73996: PUSH
73997: LD_INT 2
73999: PUSH
74000: LD_INT 3
74002: PUSH
74003: LD_INT 4
74005: PUSH
74006: LD_INT 5
74008: PUSH
74009: LD_INT 8
74011: PUSH
74012: LD_INT 9
74014: PUSH
74015: LD_INT 10
74017: PUSH
74018: LD_INT 11
74020: PUSH
74021: LD_INT 12
74023: PUSH
74024: LD_INT 14
74026: PUSH
74027: LD_INT 15
74029: PUSH
74030: LD_INT 16
74032: PUSH
74033: LD_INT 17
74035: PUSH
74036: LD_INT 18
74038: PUSH
74039: LD_INT 19
74041: PUSH
74042: LD_INT 20
74044: PUSH
74045: LD_INT 21
74047: PUSH
74048: LD_INT 22
74050: PUSH
74051: LD_INT 23
74053: PUSH
74054: LD_INT 24
74056: PUSH
74057: LD_INT 25
74059: PUSH
74060: LD_INT 26
74062: PUSH
74063: LD_INT 27
74065: PUSH
74066: LD_INT 28
74068: PUSH
74069: LD_INT 30
74071: PUSH
74072: LD_INT 31
74074: PUSH
74075: LD_INT 32
74077: PUSH
74078: LD_INT 33
74080: PUSH
74081: LD_INT 34
74083: PUSH
74084: LD_INT 36
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: PUSH
74120: LD_INT 101
74122: PUSH
74123: LD_INT 102
74125: PUSH
74126: LD_INT 103
74128: PUSH
74129: LD_INT 104
74131: PUSH
74132: LD_INT 105
74134: PUSH
74135: LD_INT 106
74137: PUSH
74138: LD_INT 107
74140: PUSH
74141: LD_INT 108
74143: PUSH
74144: LD_INT 109
74146: PUSH
74147: LD_INT 110
74149: PUSH
74150: LD_INT 111
74152: PUSH
74153: LD_INT 112
74155: PUSH
74156: LD_INT 113
74158: PUSH
74159: LD_INT 114
74161: PUSH
74162: LD_INT 116
74164: PUSH
74165: LD_INT 117
74167: PUSH
74168: LD_INT 118
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: LIST
74180: LIST
74181: LIST
74182: LIST
74183: LIST
74184: LIST
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: ST_TO_ADDR
74194: GO 75433
74196: LD_INT 14
74198: DOUBLE
74199: EQUAL
74200: IFTRUE 74204
74202: GO 74428
74204: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74205: LD_ADDR_VAR 0 2
74209: PUSH
74210: LD_INT 1
74212: PUSH
74213: LD_INT 2
74215: PUSH
74216: LD_INT 3
74218: PUSH
74219: LD_INT 4
74221: PUSH
74222: LD_INT 5
74224: PUSH
74225: LD_INT 6
74227: PUSH
74228: LD_INT 7
74230: PUSH
74231: LD_INT 8
74233: PUSH
74234: LD_INT 9
74236: PUSH
74237: LD_INT 10
74239: PUSH
74240: LD_INT 11
74242: PUSH
74243: LD_INT 12
74245: PUSH
74246: LD_INT 13
74248: PUSH
74249: LD_INT 14
74251: PUSH
74252: LD_INT 15
74254: PUSH
74255: LD_INT 16
74257: PUSH
74258: LD_INT 17
74260: PUSH
74261: LD_INT 18
74263: PUSH
74264: LD_INT 19
74266: PUSH
74267: LD_INT 20
74269: PUSH
74270: LD_INT 21
74272: PUSH
74273: LD_INT 22
74275: PUSH
74276: LD_INT 23
74278: PUSH
74279: LD_INT 24
74281: PUSH
74282: LD_INT 25
74284: PUSH
74285: LD_INT 26
74287: PUSH
74288: LD_INT 27
74290: PUSH
74291: LD_INT 28
74293: PUSH
74294: LD_INT 29
74296: PUSH
74297: LD_INT 30
74299: PUSH
74300: LD_INT 31
74302: PUSH
74303: LD_INT 32
74305: PUSH
74306: LD_INT 33
74308: PUSH
74309: LD_INT 34
74311: PUSH
74312: LD_INT 36
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: PUSH
74352: LD_INT 101
74354: PUSH
74355: LD_INT 102
74357: PUSH
74358: LD_INT 103
74360: PUSH
74361: LD_INT 104
74363: PUSH
74364: LD_INT 105
74366: PUSH
74367: LD_INT 106
74369: PUSH
74370: LD_INT 107
74372: PUSH
74373: LD_INT 108
74375: PUSH
74376: LD_INT 109
74378: PUSH
74379: LD_INT 110
74381: PUSH
74382: LD_INT 111
74384: PUSH
74385: LD_INT 112
74387: PUSH
74388: LD_INT 113
74390: PUSH
74391: LD_INT 114
74393: PUSH
74394: LD_INT 116
74396: PUSH
74397: LD_INT 117
74399: PUSH
74400: LD_INT 118
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: ST_TO_ADDR
74426: GO 75433
74428: LD_INT 15
74430: DOUBLE
74431: EQUAL
74432: IFTRUE 74436
74434: GO 74660
74436: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74437: LD_ADDR_VAR 0 2
74441: PUSH
74442: LD_INT 1
74444: PUSH
74445: LD_INT 2
74447: PUSH
74448: LD_INT 3
74450: PUSH
74451: LD_INT 4
74453: PUSH
74454: LD_INT 5
74456: PUSH
74457: LD_INT 6
74459: PUSH
74460: LD_INT 7
74462: PUSH
74463: LD_INT 8
74465: PUSH
74466: LD_INT 9
74468: PUSH
74469: LD_INT 10
74471: PUSH
74472: LD_INT 11
74474: PUSH
74475: LD_INT 12
74477: PUSH
74478: LD_INT 13
74480: PUSH
74481: LD_INT 14
74483: PUSH
74484: LD_INT 15
74486: PUSH
74487: LD_INT 16
74489: PUSH
74490: LD_INT 17
74492: PUSH
74493: LD_INT 18
74495: PUSH
74496: LD_INT 19
74498: PUSH
74499: LD_INT 20
74501: PUSH
74502: LD_INT 21
74504: PUSH
74505: LD_INT 22
74507: PUSH
74508: LD_INT 23
74510: PUSH
74511: LD_INT 24
74513: PUSH
74514: LD_INT 25
74516: PUSH
74517: LD_INT 26
74519: PUSH
74520: LD_INT 27
74522: PUSH
74523: LD_INT 28
74525: PUSH
74526: LD_INT 29
74528: PUSH
74529: LD_INT 30
74531: PUSH
74532: LD_INT 31
74534: PUSH
74535: LD_INT 32
74537: PUSH
74538: LD_INT 33
74540: PUSH
74541: LD_INT 34
74543: PUSH
74544: LD_INT 36
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: PUSH
74584: LD_INT 101
74586: PUSH
74587: LD_INT 102
74589: PUSH
74590: LD_INT 103
74592: PUSH
74593: LD_INT 104
74595: PUSH
74596: LD_INT 105
74598: PUSH
74599: LD_INT 106
74601: PUSH
74602: LD_INT 107
74604: PUSH
74605: LD_INT 108
74607: PUSH
74608: LD_INT 109
74610: PUSH
74611: LD_INT 110
74613: PUSH
74614: LD_INT 111
74616: PUSH
74617: LD_INT 112
74619: PUSH
74620: LD_INT 113
74622: PUSH
74623: LD_INT 114
74625: PUSH
74626: LD_INT 116
74628: PUSH
74629: LD_INT 117
74631: PUSH
74632: LD_INT 118
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: ST_TO_ADDR
74658: GO 75433
74660: LD_INT 16
74662: DOUBLE
74663: EQUAL
74664: IFTRUE 74668
74666: GO 74804
74668: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
74669: LD_ADDR_VAR 0 2
74673: PUSH
74674: LD_INT 2
74676: PUSH
74677: LD_INT 4
74679: PUSH
74680: LD_INT 5
74682: PUSH
74683: LD_INT 7
74685: PUSH
74686: LD_INT 11
74688: PUSH
74689: LD_INT 12
74691: PUSH
74692: LD_INT 15
74694: PUSH
74695: LD_INT 16
74697: PUSH
74698: LD_INT 20
74700: PUSH
74701: LD_INT 21
74703: PUSH
74704: LD_INT 22
74706: PUSH
74707: LD_INT 23
74709: PUSH
74710: LD_INT 25
74712: PUSH
74713: LD_INT 26
74715: PUSH
74716: LD_INT 30
74718: PUSH
74719: LD_INT 31
74721: PUSH
74722: LD_INT 32
74724: PUSH
74725: LD_INT 33
74727: PUSH
74728: LD_INT 34
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: LIST
74735: LIST
74736: LIST
74737: LIST
74738: LIST
74739: LIST
74740: LIST
74741: LIST
74742: LIST
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: PUSH
74752: LD_INT 101
74754: PUSH
74755: LD_INT 102
74757: PUSH
74758: LD_INT 103
74760: PUSH
74761: LD_INT 106
74763: PUSH
74764: LD_INT 108
74766: PUSH
74767: LD_INT 112
74769: PUSH
74770: LD_INT 113
74772: PUSH
74773: LD_INT 114
74775: PUSH
74776: LD_INT 116
74778: PUSH
74779: LD_INT 117
74781: PUSH
74782: LD_INT 118
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: ST_TO_ADDR
74802: GO 75433
74804: LD_INT 17
74806: DOUBLE
74807: EQUAL
74808: IFTRUE 74812
74810: GO 75036
74812: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
74813: LD_ADDR_VAR 0 2
74817: PUSH
74818: LD_INT 1
74820: PUSH
74821: LD_INT 2
74823: PUSH
74824: LD_INT 3
74826: PUSH
74827: LD_INT 4
74829: PUSH
74830: LD_INT 5
74832: PUSH
74833: LD_INT 6
74835: PUSH
74836: LD_INT 7
74838: PUSH
74839: LD_INT 8
74841: PUSH
74842: LD_INT 9
74844: PUSH
74845: LD_INT 10
74847: PUSH
74848: LD_INT 11
74850: PUSH
74851: LD_INT 12
74853: PUSH
74854: LD_INT 13
74856: PUSH
74857: LD_INT 14
74859: PUSH
74860: LD_INT 15
74862: PUSH
74863: LD_INT 16
74865: PUSH
74866: LD_INT 17
74868: PUSH
74869: LD_INT 18
74871: PUSH
74872: LD_INT 19
74874: PUSH
74875: LD_INT 20
74877: PUSH
74878: LD_INT 21
74880: PUSH
74881: LD_INT 22
74883: PUSH
74884: LD_INT 23
74886: PUSH
74887: LD_INT 24
74889: PUSH
74890: LD_INT 25
74892: PUSH
74893: LD_INT 26
74895: PUSH
74896: LD_INT 27
74898: PUSH
74899: LD_INT 28
74901: PUSH
74902: LD_INT 29
74904: PUSH
74905: LD_INT 30
74907: PUSH
74908: LD_INT 31
74910: PUSH
74911: LD_INT 32
74913: PUSH
74914: LD_INT 33
74916: PUSH
74917: LD_INT 34
74919: PUSH
74920: LD_INT 36
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: PUSH
74960: LD_INT 101
74962: PUSH
74963: LD_INT 102
74965: PUSH
74966: LD_INT 103
74968: PUSH
74969: LD_INT 104
74971: PUSH
74972: LD_INT 105
74974: PUSH
74975: LD_INT 106
74977: PUSH
74978: LD_INT 107
74980: PUSH
74981: LD_INT 108
74983: PUSH
74984: LD_INT 109
74986: PUSH
74987: LD_INT 110
74989: PUSH
74990: LD_INT 111
74992: PUSH
74993: LD_INT 112
74995: PUSH
74996: LD_INT 113
74998: PUSH
74999: LD_INT 114
75001: PUSH
75002: LD_INT 116
75004: PUSH
75005: LD_INT 117
75007: PUSH
75008: LD_INT 118
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: ST_TO_ADDR
75034: GO 75433
75036: LD_INT 18
75038: DOUBLE
75039: EQUAL
75040: IFTRUE 75044
75042: GO 75192
75044: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75045: LD_ADDR_VAR 0 2
75049: PUSH
75050: LD_INT 2
75052: PUSH
75053: LD_INT 4
75055: PUSH
75056: LD_INT 5
75058: PUSH
75059: LD_INT 7
75061: PUSH
75062: LD_INT 11
75064: PUSH
75065: LD_INT 12
75067: PUSH
75068: LD_INT 15
75070: PUSH
75071: LD_INT 16
75073: PUSH
75074: LD_INT 20
75076: PUSH
75077: LD_INT 21
75079: PUSH
75080: LD_INT 22
75082: PUSH
75083: LD_INT 23
75085: PUSH
75086: LD_INT 25
75088: PUSH
75089: LD_INT 26
75091: PUSH
75092: LD_INT 30
75094: PUSH
75095: LD_INT 31
75097: PUSH
75098: LD_INT 32
75100: PUSH
75101: LD_INT 33
75103: PUSH
75104: LD_INT 34
75106: PUSH
75107: LD_INT 35
75109: PUSH
75110: LD_INT 36
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: PUSH
75136: LD_INT 101
75138: PUSH
75139: LD_INT 102
75141: PUSH
75142: LD_INT 103
75144: PUSH
75145: LD_INT 106
75147: PUSH
75148: LD_INT 108
75150: PUSH
75151: LD_INT 112
75153: PUSH
75154: LD_INT 113
75156: PUSH
75157: LD_INT 114
75159: PUSH
75160: LD_INT 115
75162: PUSH
75163: LD_INT 116
75165: PUSH
75166: LD_INT 117
75168: PUSH
75169: LD_INT 118
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: LIST
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: ST_TO_ADDR
75190: GO 75433
75192: LD_INT 19
75194: DOUBLE
75195: EQUAL
75196: IFTRUE 75200
75198: GO 75432
75200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75201: LD_ADDR_VAR 0 2
75205: PUSH
75206: LD_INT 1
75208: PUSH
75209: LD_INT 2
75211: PUSH
75212: LD_INT 3
75214: PUSH
75215: LD_INT 4
75217: PUSH
75218: LD_INT 5
75220: PUSH
75221: LD_INT 6
75223: PUSH
75224: LD_INT 7
75226: PUSH
75227: LD_INT 8
75229: PUSH
75230: LD_INT 9
75232: PUSH
75233: LD_INT 10
75235: PUSH
75236: LD_INT 11
75238: PUSH
75239: LD_INT 12
75241: PUSH
75242: LD_INT 13
75244: PUSH
75245: LD_INT 14
75247: PUSH
75248: LD_INT 15
75250: PUSH
75251: LD_INT 16
75253: PUSH
75254: LD_INT 17
75256: PUSH
75257: LD_INT 18
75259: PUSH
75260: LD_INT 19
75262: PUSH
75263: LD_INT 20
75265: PUSH
75266: LD_INT 21
75268: PUSH
75269: LD_INT 22
75271: PUSH
75272: LD_INT 23
75274: PUSH
75275: LD_INT 24
75277: PUSH
75278: LD_INT 25
75280: PUSH
75281: LD_INT 26
75283: PUSH
75284: LD_INT 27
75286: PUSH
75287: LD_INT 28
75289: PUSH
75290: LD_INT 29
75292: PUSH
75293: LD_INT 30
75295: PUSH
75296: LD_INT 31
75298: PUSH
75299: LD_INT 32
75301: PUSH
75302: LD_INT 33
75304: PUSH
75305: LD_INT 34
75307: PUSH
75308: LD_INT 35
75310: PUSH
75311: LD_INT 36
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: PUSH
75352: LD_INT 101
75354: PUSH
75355: LD_INT 102
75357: PUSH
75358: LD_INT 103
75360: PUSH
75361: LD_INT 104
75363: PUSH
75364: LD_INT 105
75366: PUSH
75367: LD_INT 106
75369: PUSH
75370: LD_INT 107
75372: PUSH
75373: LD_INT 108
75375: PUSH
75376: LD_INT 109
75378: PUSH
75379: LD_INT 110
75381: PUSH
75382: LD_INT 111
75384: PUSH
75385: LD_INT 112
75387: PUSH
75388: LD_INT 113
75390: PUSH
75391: LD_INT 114
75393: PUSH
75394: LD_INT 115
75396: PUSH
75397: LD_INT 116
75399: PUSH
75400: LD_INT 117
75402: PUSH
75403: LD_INT 118
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: ST_TO_ADDR
75430: GO 75433
75432: POP
// end else
75433: GO 75664
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75435: LD_ADDR_VAR 0 2
75439: PUSH
75440: LD_INT 1
75442: PUSH
75443: LD_INT 2
75445: PUSH
75446: LD_INT 3
75448: PUSH
75449: LD_INT 4
75451: PUSH
75452: LD_INT 5
75454: PUSH
75455: LD_INT 6
75457: PUSH
75458: LD_INT 7
75460: PUSH
75461: LD_INT 8
75463: PUSH
75464: LD_INT 9
75466: PUSH
75467: LD_INT 10
75469: PUSH
75470: LD_INT 11
75472: PUSH
75473: LD_INT 12
75475: PUSH
75476: LD_INT 13
75478: PUSH
75479: LD_INT 14
75481: PUSH
75482: LD_INT 15
75484: PUSH
75485: LD_INT 16
75487: PUSH
75488: LD_INT 17
75490: PUSH
75491: LD_INT 18
75493: PUSH
75494: LD_INT 19
75496: PUSH
75497: LD_INT 20
75499: PUSH
75500: LD_INT 21
75502: PUSH
75503: LD_INT 22
75505: PUSH
75506: LD_INT 23
75508: PUSH
75509: LD_INT 24
75511: PUSH
75512: LD_INT 25
75514: PUSH
75515: LD_INT 26
75517: PUSH
75518: LD_INT 27
75520: PUSH
75521: LD_INT 28
75523: PUSH
75524: LD_INT 29
75526: PUSH
75527: LD_INT 30
75529: PUSH
75530: LD_INT 31
75532: PUSH
75533: LD_INT 32
75535: PUSH
75536: LD_INT 33
75538: PUSH
75539: LD_INT 34
75541: PUSH
75542: LD_INT 35
75544: PUSH
75545: LD_INT 36
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 101
75588: PUSH
75589: LD_INT 102
75591: PUSH
75592: LD_INT 103
75594: PUSH
75595: LD_INT 104
75597: PUSH
75598: LD_INT 105
75600: PUSH
75601: LD_INT 106
75603: PUSH
75604: LD_INT 107
75606: PUSH
75607: LD_INT 108
75609: PUSH
75610: LD_INT 109
75612: PUSH
75613: LD_INT 110
75615: PUSH
75616: LD_INT 111
75618: PUSH
75619: LD_INT 112
75621: PUSH
75622: LD_INT 113
75624: PUSH
75625: LD_INT 114
75627: PUSH
75628: LD_INT 115
75630: PUSH
75631: LD_INT 116
75633: PUSH
75634: LD_INT 117
75636: PUSH
75637: LD_INT 118
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: ST_TO_ADDR
// if result then
75664: LD_VAR 0 2
75668: IFFALSE 76454
// begin normal :=  ;
75670: LD_ADDR_VAR 0 5
75674: PUSH
75675: LD_STRING 
75677: ST_TO_ADDR
// hardcore :=  ;
75678: LD_ADDR_VAR 0 6
75682: PUSH
75683: LD_STRING 
75685: ST_TO_ADDR
// active :=  ;
75686: LD_ADDR_VAR 0 7
75690: PUSH
75691: LD_STRING 
75693: ST_TO_ADDR
// for i = 1 to normalCounter do
75694: LD_ADDR_VAR 0 8
75698: PUSH
75699: DOUBLE
75700: LD_INT 1
75702: DEC
75703: ST_TO_ADDR
75704: LD_EXP 75
75708: PUSH
75709: FOR_TO
75710: IFFALSE 75811
// begin tmp := 0 ;
75712: LD_ADDR_VAR 0 3
75716: PUSH
75717: LD_STRING 0
75719: ST_TO_ADDR
// if result [ 1 ] then
75720: LD_VAR 0 2
75724: PUSH
75725: LD_INT 1
75727: ARRAY
75728: IFFALSE 75793
// if result [ 1 ] [ 1 ] = i then
75730: LD_VAR 0 2
75734: PUSH
75735: LD_INT 1
75737: ARRAY
75738: PUSH
75739: LD_INT 1
75741: ARRAY
75742: PUSH
75743: LD_VAR 0 8
75747: EQUAL
75748: IFFALSE 75793
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
75750: LD_ADDR_VAR 0 2
75754: PUSH
75755: LD_VAR 0 2
75759: PPUSH
75760: LD_INT 1
75762: PPUSH
75763: LD_VAR 0 2
75767: PUSH
75768: LD_INT 1
75770: ARRAY
75771: PPUSH
75772: LD_INT 1
75774: PPUSH
75775: CALL_OW 3
75779: PPUSH
75780: CALL_OW 1
75784: ST_TO_ADDR
// tmp := 1 ;
75785: LD_ADDR_VAR 0 3
75789: PUSH
75790: LD_STRING 1
75792: ST_TO_ADDR
// end ; normal := normal & tmp ;
75793: LD_ADDR_VAR 0 5
75797: PUSH
75798: LD_VAR 0 5
75802: PUSH
75803: LD_VAR 0 3
75807: STR
75808: ST_TO_ADDR
// end ;
75809: GO 75709
75811: POP
75812: POP
// for i = 1 to hardcoreCounter do
75813: LD_ADDR_VAR 0 8
75817: PUSH
75818: DOUBLE
75819: LD_INT 1
75821: DEC
75822: ST_TO_ADDR
75823: LD_EXP 76
75827: PUSH
75828: FOR_TO
75829: IFFALSE 75934
// begin tmp := 0 ;
75831: LD_ADDR_VAR 0 3
75835: PUSH
75836: LD_STRING 0
75838: ST_TO_ADDR
// if result [ 2 ] then
75839: LD_VAR 0 2
75843: PUSH
75844: LD_INT 2
75846: ARRAY
75847: IFFALSE 75916
// if result [ 2 ] [ 1 ] = 100 + i then
75849: LD_VAR 0 2
75853: PUSH
75854: LD_INT 2
75856: ARRAY
75857: PUSH
75858: LD_INT 1
75860: ARRAY
75861: PUSH
75862: LD_INT 100
75864: PUSH
75865: LD_VAR 0 8
75869: PLUS
75870: EQUAL
75871: IFFALSE 75916
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
75873: LD_ADDR_VAR 0 2
75877: PUSH
75878: LD_VAR 0 2
75882: PPUSH
75883: LD_INT 2
75885: PPUSH
75886: LD_VAR 0 2
75890: PUSH
75891: LD_INT 2
75893: ARRAY
75894: PPUSH
75895: LD_INT 1
75897: PPUSH
75898: CALL_OW 3
75902: PPUSH
75903: CALL_OW 1
75907: ST_TO_ADDR
// tmp := 1 ;
75908: LD_ADDR_VAR 0 3
75912: PUSH
75913: LD_STRING 1
75915: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
75916: LD_ADDR_VAR 0 6
75920: PUSH
75921: LD_VAR 0 6
75925: PUSH
75926: LD_VAR 0 3
75930: STR
75931: ST_TO_ADDR
// end ;
75932: GO 75828
75934: POP
75935: POP
// if isGameLoad then
75936: LD_VAR 0 1
75940: IFFALSE 76415
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
75942: LD_ADDR_VAR 0 4
75946: PUSH
75947: LD_EXP 79
75951: PUSH
75952: LD_EXP 78
75956: PUSH
75957: LD_EXP 80
75961: PUSH
75962: LD_EXP 77
75966: PUSH
75967: LD_EXP 81
75971: PUSH
75972: LD_EXP 82
75976: PUSH
75977: LD_EXP 83
75981: PUSH
75982: LD_EXP 84
75986: PUSH
75987: LD_EXP 85
75991: PUSH
75992: LD_EXP 86
75996: PUSH
75997: LD_EXP 87
76001: PUSH
76002: LD_EXP 88
76006: PUSH
76007: LD_EXP 89
76011: PUSH
76012: LD_EXP 90
76016: PUSH
76017: LD_EXP 98
76021: PUSH
76022: LD_EXP 99
76026: PUSH
76027: LD_EXP 100
76031: PUSH
76032: LD_EXP 101
76036: PUSH
76037: LD_EXP 103
76041: PUSH
76042: LD_EXP 104
76046: PUSH
76047: LD_EXP 105
76051: PUSH
76052: LD_EXP 108
76056: PUSH
76057: LD_EXP 110
76061: PUSH
76062: LD_EXP 111
76066: PUSH
76067: LD_EXP 112
76071: PUSH
76072: LD_EXP 114
76076: PUSH
76077: LD_EXP 115
76081: PUSH
76082: LD_EXP 118
76086: PUSH
76087: LD_EXP 119
76091: PUSH
76092: LD_EXP 120
76096: PUSH
76097: LD_EXP 121
76101: PUSH
76102: LD_EXP 122
76106: PUSH
76107: LD_EXP 123
76111: PUSH
76112: LD_EXP 124
76116: PUSH
76117: LD_EXP 125
76121: PUSH
76122: LD_EXP 126
76126: PUSH
76127: LD_EXP 91
76131: PUSH
76132: LD_EXP 92
76136: PUSH
76137: LD_EXP 95
76141: PUSH
76142: LD_EXP 96
76146: PUSH
76147: LD_EXP 97
76151: PUSH
76152: LD_EXP 93
76156: PUSH
76157: LD_EXP 94
76161: PUSH
76162: LD_EXP 102
76166: PUSH
76167: LD_EXP 106
76171: PUSH
76172: LD_EXP 107
76176: PUSH
76177: LD_EXP 109
76181: PUSH
76182: LD_EXP 113
76186: PUSH
76187: LD_EXP 116
76191: PUSH
76192: LD_EXP 117
76196: PUSH
76197: LD_EXP 127
76201: PUSH
76202: LD_EXP 128
76206: PUSH
76207: LD_EXP 129
76211: PUSH
76212: LD_EXP 130
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: LIST
76248: LIST
76249: LIST
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: ST_TO_ADDR
// tmp :=  ;
76273: LD_ADDR_VAR 0 3
76277: PUSH
76278: LD_STRING 
76280: ST_TO_ADDR
// for i = 1 to normalCounter do
76281: LD_ADDR_VAR 0 8
76285: PUSH
76286: DOUBLE
76287: LD_INT 1
76289: DEC
76290: ST_TO_ADDR
76291: LD_EXP 75
76295: PUSH
76296: FOR_TO
76297: IFFALSE 76333
// begin if flags [ i ] then
76299: LD_VAR 0 4
76303: PUSH
76304: LD_VAR 0 8
76308: ARRAY
76309: IFFALSE 76331
// tmp := tmp & i & ; ;
76311: LD_ADDR_VAR 0 3
76315: PUSH
76316: LD_VAR 0 3
76320: PUSH
76321: LD_VAR 0 8
76325: STR
76326: PUSH
76327: LD_STRING ;
76329: STR
76330: ST_TO_ADDR
// end ;
76331: GO 76296
76333: POP
76334: POP
// for i = 1 to hardcoreCounter do
76335: LD_ADDR_VAR 0 8
76339: PUSH
76340: DOUBLE
76341: LD_INT 1
76343: DEC
76344: ST_TO_ADDR
76345: LD_EXP 76
76349: PUSH
76350: FOR_TO
76351: IFFALSE 76397
// begin if flags [ normalCounter + i ] then
76353: LD_VAR 0 4
76357: PUSH
76358: LD_EXP 75
76362: PUSH
76363: LD_VAR 0 8
76367: PLUS
76368: ARRAY
76369: IFFALSE 76395
// tmp := tmp & ( 100 + i ) & ; ;
76371: LD_ADDR_VAR 0 3
76375: PUSH
76376: LD_VAR 0 3
76380: PUSH
76381: LD_INT 100
76383: PUSH
76384: LD_VAR 0 8
76388: PLUS
76389: STR
76390: PUSH
76391: LD_STRING ;
76393: STR
76394: ST_TO_ADDR
// end ;
76395: GO 76350
76397: POP
76398: POP
// if tmp then
76399: LD_VAR 0 3
76403: IFFALSE 76415
// active := tmp ;
76405: LD_ADDR_VAR 0 7
76409: PUSH
76410: LD_VAR 0 3
76414: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76415: LD_STRING getStreamItemsFromMission("
76417: PUSH
76418: LD_VAR 0 5
76422: STR
76423: PUSH
76424: LD_STRING ","
76426: STR
76427: PUSH
76428: LD_VAR 0 6
76432: STR
76433: PUSH
76434: LD_STRING ","
76436: STR
76437: PUSH
76438: LD_VAR 0 7
76442: STR
76443: PUSH
76444: LD_STRING ")
76446: STR
76447: PPUSH
76448: CALL_OW 559
// end else
76452: GO 76461
// ToLua ( getStreamItemsFromMission("","","") ) ;
76454: LD_STRING getStreamItemsFromMission("","","")
76456: PPUSH
76457: CALL_OW 559
// end ;
76461: LD_VAR 0 2
76465: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76466: LD_EXP 74
76470: PUSH
76471: LD_EXP 79
76475: AND
76476: IFFALSE 76600
76478: GO 76480
76480: DISABLE
76481: LD_INT 0
76483: PPUSH
76484: PPUSH
// begin enable ;
76485: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76486: LD_ADDR_VAR 0 2
76490: PUSH
76491: LD_INT 22
76493: PUSH
76494: LD_OWVAR 2
76498: PUSH
76499: EMPTY
76500: LIST
76501: LIST
76502: PUSH
76503: LD_INT 2
76505: PUSH
76506: LD_INT 34
76508: PUSH
76509: LD_INT 7
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: PUSH
76516: LD_INT 34
76518: PUSH
76519: LD_INT 45
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: PUSH
76526: LD_INT 34
76528: PUSH
76529: LD_INT 28
76531: PUSH
76532: EMPTY
76533: LIST
76534: LIST
76535: PUSH
76536: LD_INT 34
76538: PUSH
76539: LD_INT 47
76541: PUSH
76542: EMPTY
76543: LIST
76544: LIST
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: LIST
76550: LIST
76551: LIST
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PPUSH
76557: CALL_OW 69
76561: ST_TO_ADDR
// if not tmp then
76562: LD_VAR 0 2
76566: NOT
76567: IFFALSE 76571
// exit ;
76569: GO 76600
// for i in tmp do
76571: LD_ADDR_VAR 0 1
76575: PUSH
76576: LD_VAR 0 2
76580: PUSH
76581: FOR_IN
76582: IFFALSE 76598
// begin SetLives ( i , 0 ) ;
76584: LD_VAR 0 1
76588: PPUSH
76589: LD_INT 0
76591: PPUSH
76592: CALL_OW 234
// end ;
76596: GO 76581
76598: POP
76599: POP
// end ;
76600: PPOPN 2
76602: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
76603: LD_EXP 74
76607: PUSH
76608: LD_EXP 80
76612: AND
76613: IFFALSE 76697
76615: GO 76617
76617: DISABLE
76618: LD_INT 0
76620: PPUSH
76621: PPUSH
// begin enable ;
76622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
76623: LD_ADDR_VAR 0 2
76627: PUSH
76628: LD_INT 22
76630: PUSH
76631: LD_OWVAR 2
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: LD_INT 32
76642: PUSH
76643: LD_INT 3
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PPUSH
76654: CALL_OW 69
76658: ST_TO_ADDR
// if not tmp then
76659: LD_VAR 0 2
76663: NOT
76664: IFFALSE 76668
// exit ;
76666: GO 76697
// for i in tmp do
76668: LD_ADDR_VAR 0 1
76672: PUSH
76673: LD_VAR 0 2
76677: PUSH
76678: FOR_IN
76679: IFFALSE 76695
// begin SetLives ( i , 0 ) ;
76681: LD_VAR 0 1
76685: PPUSH
76686: LD_INT 0
76688: PPUSH
76689: CALL_OW 234
// end ;
76693: GO 76678
76695: POP
76696: POP
// end ;
76697: PPOPN 2
76699: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
76700: LD_EXP 74
76704: PUSH
76705: LD_EXP 77
76709: AND
76710: IFFALSE 76803
76712: GO 76714
76714: DISABLE
76715: LD_INT 0
76717: PPUSH
// begin enable ;
76718: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
76719: LD_ADDR_VAR 0 1
76723: PUSH
76724: LD_INT 22
76726: PUSH
76727: LD_OWVAR 2
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: LD_INT 2
76738: PUSH
76739: LD_INT 25
76741: PUSH
76742: LD_INT 5
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: PUSH
76749: LD_INT 25
76751: PUSH
76752: LD_INT 9
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: PUSH
76759: LD_INT 25
76761: PUSH
76762: LD_INT 8
76764: PUSH
76765: EMPTY
76766: LIST
76767: LIST
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: PUSH
76775: EMPTY
76776: LIST
76777: LIST
76778: PPUSH
76779: CALL_OW 69
76783: PUSH
76784: FOR_IN
76785: IFFALSE 76801
// begin SetClass ( i , 1 ) ;
76787: LD_VAR 0 1
76791: PPUSH
76792: LD_INT 1
76794: PPUSH
76795: CALL_OW 336
// end ;
76799: GO 76784
76801: POP
76802: POP
// end ;
76803: PPOPN 1
76805: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
76806: LD_EXP 74
76810: PUSH
76811: LD_EXP 78
76815: AND
76816: PUSH
76817: LD_OWVAR 65
76821: PUSH
76822: LD_INT 7
76824: LESS
76825: AND
76826: IFFALSE 76840
76828: GO 76830
76830: DISABLE
// begin enable ;
76831: ENABLE
// game_speed := 7 ;
76832: LD_ADDR_OWVAR 65
76836: PUSH
76837: LD_INT 7
76839: ST_TO_ADDR
// end ;
76840: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
76841: LD_EXP 74
76845: PUSH
76846: LD_EXP 81
76850: AND
76851: IFFALSE 77053
76853: GO 76855
76855: DISABLE
76856: LD_INT 0
76858: PPUSH
76859: PPUSH
76860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76861: LD_ADDR_VAR 0 3
76865: PUSH
76866: LD_INT 81
76868: PUSH
76869: LD_OWVAR 2
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_INT 21
76880: PUSH
76881: LD_INT 1
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: PPUSH
76892: CALL_OW 69
76896: ST_TO_ADDR
// if not tmp then
76897: LD_VAR 0 3
76901: NOT
76902: IFFALSE 76906
// exit ;
76904: GO 77053
// if tmp > 5 then
76906: LD_VAR 0 3
76910: PUSH
76911: LD_INT 5
76913: GREATER
76914: IFFALSE 76926
// k := 5 else
76916: LD_ADDR_VAR 0 2
76920: PUSH
76921: LD_INT 5
76923: ST_TO_ADDR
76924: GO 76936
// k := tmp ;
76926: LD_ADDR_VAR 0 2
76930: PUSH
76931: LD_VAR 0 3
76935: ST_TO_ADDR
// for i := 1 to k do
76936: LD_ADDR_VAR 0 1
76940: PUSH
76941: DOUBLE
76942: LD_INT 1
76944: DEC
76945: ST_TO_ADDR
76946: LD_VAR 0 2
76950: PUSH
76951: FOR_TO
76952: IFFALSE 77051
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
76954: LD_VAR 0 3
76958: PUSH
76959: LD_VAR 0 1
76963: ARRAY
76964: PPUSH
76965: LD_VAR 0 1
76969: PUSH
76970: LD_INT 4
76972: MOD
76973: PUSH
76974: LD_INT 1
76976: PLUS
76977: PPUSH
76978: CALL_OW 259
76982: PUSH
76983: LD_INT 10
76985: LESS
76986: IFFALSE 77049
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
76988: LD_VAR 0 3
76992: PUSH
76993: LD_VAR 0 1
76997: ARRAY
76998: PPUSH
76999: LD_VAR 0 1
77003: PUSH
77004: LD_INT 4
77006: MOD
77007: PUSH
77008: LD_INT 1
77010: PLUS
77011: PPUSH
77012: LD_VAR 0 3
77016: PUSH
77017: LD_VAR 0 1
77021: ARRAY
77022: PPUSH
77023: LD_VAR 0 1
77027: PUSH
77028: LD_INT 4
77030: MOD
77031: PUSH
77032: LD_INT 1
77034: PLUS
77035: PPUSH
77036: CALL_OW 259
77040: PUSH
77041: LD_INT 1
77043: PLUS
77044: PPUSH
77045: CALL_OW 237
77049: GO 76951
77051: POP
77052: POP
// end ;
77053: PPOPN 3
77055: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77056: LD_EXP 74
77060: PUSH
77061: LD_EXP 82
77065: AND
77066: IFFALSE 77086
77068: GO 77070
77070: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77071: LD_INT 4
77073: PPUSH
77074: LD_OWVAR 2
77078: PPUSH
77079: LD_INT 0
77081: PPUSH
77082: CALL_OW 324
77086: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77087: LD_EXP 74
77091: PUSH
77092: LD_EXP 111
77096: AND
77097: IFFALSE 77117
77099: GO 77101
77101: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77102: LD_INT 19
77104: PPUSH
77105: LD_OWVAR 2
77109: PPUSH
77110: LD_INT 0
77112: PPUSH
77113: CALL_OW 324
77117: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77118: LD_EXP 74
77122: PUSH
77123: LD_EXP 83
77127: AND
77128: IFFALSE 77230
77130: GO 77132
77132: DISABLE
77133: LD_INT 0
77135: PPUSH
77136: PPUSH
// begin enable ;
77137: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77138: LD_ADDR_VAR 0 2
77142: PUSH
77143: LD_INT 22
77145: PUSH
77146: LD_OWVAR 2
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 2
77157: PUSH
77158: LD_INT 34
77160: PUSH
77161: LD_INT 11
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PUSH
77168: LD_INT 34
77170: PUSH
77171: LD_INT 30
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: LIST
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: PPUSH
77187: CALL_OW 69
77191: ST_TO_ADDR
// if not tmp then
77192: LD_VAR 0 2
77196: NOT
77197: IFFALSE 77201
// exit ;
77199: GO 77230
// for i in tmp do
77201: LD_ADDR_VAR 0 1
77205: PUSH
77206: LD_VAR 0 2
77210: PUSH
77211: FOR_IN
77212: IFFALSE 77228
// begin SetLives ( i , 0 ) ;
77214: LD_VAR 0 1
77218: PPUSH
77219: LD_INT 0
77221: PPUSH
77222: CALL_OW 234
// end ;
77226: GO 77211
77228: POP
77229: POP
// end ;
77230: PPOPN 2
77232: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77233: LD_EXP 74
77237: PUSH
77238: LD_EXP 84
77242: AND
77243: IFFALSE 77263
77245: GO 77247
77247: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77248: LD_INT 32
77250: PPUSH
77251: LD_OWVAR 2
77255: PPUSH
77256: LD_INT 0
77258: PPUSH
77259: CALL_OW 324
77263: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77264: LD_EXP 74
77268: PUSH
77269: LD_EXP 85
77273: AND
77274: IFFALSE 77455
77276: GO 77278
77278: DISABLE
77279: LD_INT 0
77281: PPUSH
77282: PPUSH
77283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77284: LD_ADDR_VAR 0 2
77288: PUSH
77289: LD_INT 22
77291: PUSH
77292: LD_OWVAR 2
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: PUSH
77301: LD_INT 33
77303: PUSH
77304: LD_INT 3
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: PPUSH
77315: CALL_OW 69
77319: ST_TO_ADDR
// if not tmp then
77320: LD_VAR 0 2
77324: NOT
77325: IFFALSE 77329
// exit ;
77327: GO 77455
// side := 0 ;
77329: LD_ADDR_VAR 0 3
77333: PUSH
77334: LD_INT 0
77336: ST_TO_ADDR
// for i := 1 to 8 do
77337: LD_ADDR_VAR 0 1
77341: PUSH
77342: DOUBLE
77343: LD_INT 1
77345: DEC
77346: ST_TO_ADDR
77347: LD_INT 8
77349: PUSH
77350: FOR_TO
77351: IFFALSE 77399
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77353: LD_OWVAR 2
77357: PUSH
77358: LD_VAR 0 1
77362: NONEQUAL
77363: PUSH
77364: LD_OWVAR 2
77368: PPUSH
77369: LD_VAR 0 1
77373: PPUSH
77374: CALL_OW 81
77378: PUSH
77379: LD_INT 2
77381: EQUAL
77382: AND
77383: IFFALSE 77397
// begin side := i ;
77385: LD_ADDR_VAR 0 3
77389: PUSH
77390: LD_VAR 0 1
77394: ST_TO_ADDR
// break ;
77395: GO 77399
// end ;
77397: GO 77350
77399: POP
77400: POP
// if not side then
77401: LD_VAR 0 3
77405: NOT
77406: IFFALSE 77410
// exit ;
77408: GO 77455
// for i := 1 to tmp do
77410: LD_ADDR_VAR 0 1
77414: PUSH
77415: DOUBLE
77416: LD_INT 1
77418: DEC
77419: ST_TO_ADDR
77420: LD_VAR 0 2
77424: PUSH
77425: FOR_TO
77426: IFFALSE 77453
// if Prob ( 60 ) then
77428: LD_INT 60
77430: PPUSH
77431: CALL_OW 13
77435: IFFALSE 77451
// SetSide ( i , side ) ;
77437: LD_VAR 0 1
77441: PPUSH
77442: LD_VAR 0 3
77446: PPUSH
77447: CALL_OW 235
77451: GO 77425
77453: POP
77454: POP
// end ;
77455: PPOPN 3
77457: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77458: LD_EXP 74
77462: PUSH
77463: LD_EXP 87
77467: AND
77468: IFFALSE 77587
77470: GO 77472
77472: DISABLE
77473: LD_INT 0
77475: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77476: LD_ADDR_VAR 0 1
77480: PUSH
77481: LD_INT 22
77483: PUSH
77484: LD_OWVAR 2
77488: PUSH
77489: EMPTY
77490: LIST
77491: LIST
77492: PUSH
77493: LD_INT 21
77495: PUSH
77496: LD_INT 1
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PUSH
77503: LD_INT 3
77505: PUSH
77506: LD_INT 23
77508: PUSH
77509: LD_INT 0
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: PUSH
77520: EMPTY
77521: LIST
77522: LIST
77523: LIST
77524: PPUSH
77525: CALL_OW 69
77529: PUSH
77530: FOR_IN
77531: IFFALSE 77585
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77533: LD_VAR 0 1
77537: PPUSH
77538: CALL_OW 257
77542: PUSH
77543: LD_INT 1
77545: PUSH
77546: LD_INT 2
77548: PUSH
77549: LD_INT 3
77551: PUSH
77552: LD_INT 4
77554: PUSH
77555: EMPTY
77556: LIST
77557: LIST
77558: LIST
77559: LIST
77560: IN
77561: IFFALSE 77583
// SetClass ( un , rand ( 1 , 4 ) ) ;
77563: LD_VAR 0 1
77567: PPUSH
77568: LD_INT 1
77570: PPUSH
77571: LD_INT 4
77573: PPUSH
77574: CALL_OW 12
77578: PPUSH
77579: CALL_OW 336
77583: GO 77530
77585: POP
77586: POP
// end ;
77587: PPOPN 1
77589: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
77590: LD_EXP 74
77594: PUSH
77595: LD_EXP 86
77599: AND
77600: IFFALSE 77679
77602: GO 77604
77604: DISABLE
77605: LD_INT 0
77607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77608: LD_ADDR_VAR 0 1
77612: PUSH
77613: LD_INT 22
77615: PUSH
77616: LD_OWVAR 2
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: PUSH
77625: LD_INT 21
77627: PUSH
77628: LD_INT 3
77630: PUSH
77631: EMPTY
77632: LIST
77633: LIST
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: PPUSH
77639: CALL_OW 69
77643: ST_TO_ADDR
// if not tmp then
77644: LD_VAR 0 1
77648: NOT
77649: IFFALSE 77653
// exit ;
77651: GO 77679
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
77653: LD_VAR 0 1
77657: PUSH
77658: LD_INT 1
77660: PPUSH
77661: LD_VAR 0 1
77665: PPUSH
77666: CALL_OW 12
77670: ARRAY
77671: PPUSH
77672: LD_INT 100
77674: PPUSH
77675: CALL_OW 234
// end ;
77679: PPOPN 1
77681: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
77682: LD_EXP 74
77686: PUSH
77687: LD_EXP 88
77691: AND
77692: IFFALSE 77790
77694: GO 77696
77696: DISABLE
77697: LD_INT 0
77699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77700: LD_ADDR_VAR 0 1
77704: PUSH
77705: LD_INT 22
77707: PUSH
77708: LD_OWVAR 2
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: PUSH
77717: LD_INT 21
77719: PUSH
77720: LD_INT 1
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PUSH
77727: EMPTY
77728: LIST
77729: LIST
77730: PPUSH
77731: CALL_OW 69
77735: ST_TO_ADDR
// if not tmp then
77736: LD_VAR 0 1
77740: NOT
77741: IFFALSE 77745
// exit ;
77743: GO 77790
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
77745: LD_VAR 0 1
77749: PUSH
77750: LD_INT 1
77752: PPUSH
77753: LD_VAR 0 1
77757: PPUSH
77758: CALL_OW 12
77762: ARRAY
77763: PPUSH
77764: LD_INT 1
77766: PPUSH
77767: LD_INT 4
77769: PPUSH
77770: CALL_OW 12
77774: PPUSH
77775: LD_INT 3000
77777: PPUSH
77778: LD_INT 9000
77780: PPUSH
77781: CALL_OW 12
77785: PPUSH
77786: CALL_OW 492
// end ;
77790: PPOPN 1
77792: END
// every 0 0$1 trigger StreamModeActive and sDepot do
77793: LD_EXP 74
77797: PUSH
77798: LD_EXP 89
77802: AND
77803: IFFALSE 77823
77805: GO 77807
77807: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
77808: LD_INT 1
77810: PPUSH
77811: LD_OWVAR 2
77815: PPUSH
77816: LD_INT 0
77818: PPUSH
77819: CALL_OW 324
77823: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
77824: LD_EXP 74
77828: PUSH
77829: LD_EXP 90
77833: AND
77834: IFFALSE 77917
77836: GO 77838
77838: DISABLE
77839: LD_INT 0
77841: PPUSH
77842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77843: LD_ADDR_VAR 0 2
77847: PUSH
77848: LD_INT 22
77850: PUSH
77851: LD_OWVAR 2
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: PUSH
77860: LD_INT 21
77862: PUSH
77863: LD_INT 3
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PPUSH
77874: CALL_OW 69
77878: ST_TO_ADDR
// if not tmp then
77879: LD_VAR 0 2
77883: NOT
77884: IFFALSE 77888
// exit ;
77886: GO 77917
// for i in tmp do
77888: LD_ADDR_VAR 0 1
77892: PUSH
77893: LD_VAR 0 2
77897: PUSH
77898: FOR_IN
77899: IFFALSE 77915
// SetBLevel ( i , 10 ) ;
77901: LD_VAR 0 1
77905: PPUSH
77906: LD_INT 10
77908: PPUSH
77909: CALL_OW 241
77913: GO 77898
77915: POP
77916: POP
// end ;
77917: PPOPN 2
77919: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
77920: LD_EXP 74
77924: PUSH
77925: LD_EXP 91
77929: AND
77930: IFFALSE 78041
77932: GO 77934
77934: DISABLE
77935: LD_INT 0
77937: PPUSH
77938: PPUSH
77939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77940: LD_ADDR_VAR 0 3
77944: PUSH
77945: LD_INT 22
77947: PUSH
77948: LD_OWVAR 2
77952: PUSH
77953: EMPTY
77954: LIST
77955: LIST
77956: PUSH
77957: LD_INT 25
77959: PUSH
77960: LD_INT 1
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: PUSH
77967: EMPTY
77968: LIST
77969: LIST
77970: PPUSH
77971: CALL_OW 69
77975: ST_TO_ADDR
// if not tmp then
77976: LD_VAR 0 3
77980: NOT
77981: IFFALSE 77985
// exit ;
77983: GO 78041
// un := tmp [ rand ( 1 , tmp ) ] ;
77985: LD_ADDR_VAR 0 2
77989: PUSH
77990: LD_VAR 0 3
77994: PUSH
77995: LD_INT 1
77997: PPUSH
77998: LD_VAR 0 3
78002: PPUSH
78003: CALL_OW 12
78007: ARRAY
78008: ST_TO_ADDR
// if Crawls ( un ) then
78009: LD_VAR 0 2
78013: PPUSH
78014: CALL_OW 318
78018: IFFALSE 78029
// ComWalk ( un ) ;
78020: LD_VAR 0 2
78024: PPUSH
78025: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78029: LD_VAR 0 2
78033: PPUSH
78034: LD_INT 5
78036: PPUSH
78037: CALL_OW 336
// end ;
78041: PPOPN 3
78043: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78044: LD_EXP 74
78048: PUSH
78049: LD_EXP 92
78053: AND
78054: PUSH
78055: LD_OWVAR 67
78059: PUSH
78060: LD_INT 4
78062: LESS
78063: AND
78064: IFFALSE 78083
78066: GO 78068
78068: DISABLE
// begin Difficulty := Difficulty + 1 ;
78069: LD_ADDR_OWVAR 67
78073: PUSH
78074: LD_OWVAR 67
78078: PUSH
78079: LD_INT 1
78081: PLUS
78082: ST_TO_ADDR
// end ;
78083: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78084: LD_EXP 74
78088: PUSH
78089: LD_EXP 93
78093: AND
78094: IFFALSE 78197
78096: GO 78098
78098: DISABLE
78099: LD_INT 0
78101: PPUSH
// begin for i := 1 to 5 do
78102: LD_ADDR_VAR 0 1
78106: PUSH
78107: DOUBLE
78108: LD_INT 1
78110: DEC
78111: ST_TO_ADDR
78112: LD_INT 5
78114: PUSH
78115: FOR_TO
78116: IFFALSE 78195
// begin uc_nation := nation_nature ;
78118: LD_ADDR_OWVAR 21
78122: PUSH
78123: LD_INT 0
78125: ST_TO_ADDR
// uc_side := 0 ;
78126: LD_ADDR_OWVAR 20
78130: PUSH
78131: LD_INT 0
78133: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78134: LD_ADDR_OWVAR 29
78138: PUSH
78139: LD_INT 12
78141: PUSH
78142: LD_INT 12
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: ST_TO_ADDR
// hc_agressivity := 20 ;
78149: LD_ADDR_OWVAR 35
78153: PUSH
78154: LD_INT 20
78156: ST_TO_ADDR
// hc_class := class_tiger ;
78157: LD_ADDR_OWVAR 28
78161: PUSH
78162: LD_INT 14
78164: ST_TO_ADDR
// hc_gallery :=  ;
78165: LD_ADDR_OWVAR 33
78169: PUSH
78170: LD_STRING 
78172: ST_TO_ADDR
// hc_name :=  ;
78173: LD_ADDR_OWVAR 26
78177: PUSH
78178: LD_STRING 
78180: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78181: CALL_OW 44
78185: PPUSH
78186: LD_INT 0
78188: PPUSH
78189: CALL_OW 51
// end ;
78193: GO 78115
78195: POP
78196: POP
// end ;
78197: PPOPN 1
78199: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78200: LD_EXP 74
78204: PUSH
78205: LD_EXP 94
78209: AND
78210: IFFALSE 78219
78212: GO 78214
78214: DISABLE
// StreamSibBomb ;
78215: CALL 78220 0 0
78219: END
// export function StreamSibBomb ; var i , x , y ; begin
78220: LD_INT 0
78222: PPUSH
78223: PPUSH
78224: PPUSH
78225: PPUSH
// result := false ;
78226: LD_ADDR_VAR 0 1
78230: PUSH
78231: LD_INT 0
78233: ST_TO_ADDR
// for i := 1 to 16 do
78234: LD_ADDR_VAR 0 2
78238: PUSH
78239: DOUBLE
78240: LD_INT 1
78242: DEC
78243: ST_TO_ADDR
78244: LD_INT 16
78246: PUSH
78247: FOR_TO
78248: IFFALSE 78447
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78250: LD_ADDR_VAR 0 3
78254: PUSH
78255: LD_INT 10
78257: PUSH
78258: LD_INT 20
78260: PUSH
78261: LD_INT 30
78263: PUSH
78264: LD_INT 40
78266: PUSH
78267: LD_INT 50
78269: PUSH
78270: LD_INT 60
78272: PUSH
78273: LD_INT 70
78275: PUSH
78276: LD_INT 80
78278: PUSH
78279: LD_INT 90
78281: PUSH
78282: LD_INT 100
78284: PUSH
78285: LD_INT 110
78287: PUSH
78288: LD_INT 120
78290: PUSH
78291: LD_INT 130
78293: PUSH
78294: LD_INT 140
78296: PUSH
78297: LD_INT 150
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: LIST
78304: LIST
78305: LIST
78306: LIST
78307: LIST
78308: LIST
78309: LIST
78310: LIST
78311: LIST
78312: LIST
78313: LIST
78314: LIST
78315: LIST
78316: PUSH
78317: LD_INT 1
78319: PPUSH
78320: LD_INT 15
78322: PPUSH
78323: CALL_OW 12
78327: ARRAY
78328: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78329: LD_ADDR_VAR 0 4
78333: PUSH
78334: LD_INT 10
78336: PUSH
78337: LD_INT 20
78339: PUSH
78340: LD_INT 30
78342: PUSH
78343: LD_INT 40
78345: PUSH
78346: LD_INT 50
78348: PUSH
78349: LD_INT 60
78351: PUSH
78352: LD_INT 70
78354: PUSH
78355: LD_INT 80
78357: PUSH
78358: LD_INT 90
78360: PUSH
78361: LD_INT 100
78363: PUSH
78364: LD_INT 110
78366: PUSH
78367: LD_INT 120
78369: PUSH
78370: LD_INT 130
78372: PUSH
78373: LD_INT 140
78375: PUSH
78376: LD_INT 150
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: LIST
78383: LIST
78384: LIST
78385: LIST
78386: LIST
78387: LIST
78388: LIST
78389: LIST
78390: LIST
78391: LIST
78392: LIST
78393: LIST
78394: LIST
78395: PUSH
78396: LD_INT 1
78398: PPUSH
78399: LD_INT 15
78401: PPUSH
78402: CALL_OW 12
78406: ARRAY
78407: ST_TO_ADDR
// if ValidHex ( x , y ) then
78408: LD_VAR 0 3
78412: PPUSH
78413: LD_VAR 0 4
78417: PPUSH
78418: CALL_OW 488
78422: IFFALSE 78445
// begin result := [ x , y ] ;
78424: LD_ADDR_VAR 0 1
78428: PUSH
78429: LD_VAR 0 3
78433: PUSH
78434: LD_VAR 0 4
78438: PUSH
78439: EMPTY
78440: LIST
78441: LIST
78442: ST_TO_ADDR
// break ;
78443: GO 78447
// end ; end ;
78445: GO 78247
78447: POP
78448: POP
// if result then
78449: LD_VAR 0 1
78453: IFFALSE 78513
// begin ToLua ( playSibBomb() ) ;
78455: LD_STRING playSibBomb()
78457: PPUSH
78458: CALL_OW 559
// wait ( 0 0$14 ) ;
78462: LD_INT 490
78464: PPUSH
78465: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78469: LD_VAR 0 1
78473: PUSH
78474: LD_INT 1
78476: ARRAY
78477: PPUSH
78478: LD_VAR 0 1
78482: PUSH
78483: LD_INT 2
78485: ARRAY
78486: PPUSH
78487: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78491: LD_VAR 0 1
78495: PUSH
78496: LD_INT 1
78498: ARRAY
78499: PPUSH
78500: LD_VAR 0 1
78504: PUSH
78505: LD_INT 2
78507: ARRAY
78508: PPUSH
78509: CALL_OW 429
// end ; end ;
78513: LD_VAR 0 1
78517: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78518: LD_EXP 74
78522: PUSH
78523: LD_EXP 96
78527: AND
78528: IFFALSE 78540
78530: GO 78532
78532: DISABLE
// YouLost (  ) ;
78533: LD_STRING 
78535: PPUSH
78536: CALL_OW 104
78540: END
// every 0 0$1 trigger StreamModeActive and sFog do
78541: LD_EXP 74
78545: PUSH
78546: LD_EXP 95
78550: AND
78551: IFFALSE 78565
78553: GO 78555
78555: DISABLE
// FogOff ( your_side ) ;
78556: LD_OWVAR 2
78560: PPUSH
78561: CALL_OW 344
78565: END
// every 0 0$1 trigger StreamModeActive and sSun do
78566: LD_EXP 74
78570: PUSH
78571: LD_EXP 97
78575: AND
78576: IFFALSE 78604
78578: GO 78580
78580: DISABLE
// begin solar_recharge_percent := 0 ;
78581: LD_ADDR_OWVAR 79
78585: PUSH
78586: LD_INT 0
78588: ST_TO_ADDR
// wait ( 5 5$00 ) ;
78589: LD_INT 10500
78591: PPUSH
78592: CALL_OW 67
// solar_recharge_percent := 100 ;
78596: LD_ADDR_OWVAR 79
78600: PUSH
78601: LD_INT 100
78603: ST_TO_ADDR
// end ;
78604: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
78605: LD_EXP 74
78609: PUSH
78610: LD_EXP 98
78614: AND
78615: IFFALSE 78854
78617: GO 78619
78619: DISABLE
78620: LD_INT 0
78622: PPUSH
78623: PPUSH
78624: PPUSH
// begin tmp := [ ] ;
78625: LD_ADDR_VAR 0 3
78629: PUSH
78630: EMPTY
78631: ST_TO_ADDR
// for i := 1 to 6 do
78632: LD_ADDR_VAR 0 1
78636: PUSH
78637: DOUBLE
78638: LD_INT 1
78640: DEC
78641: ST_TO_ADDR
78642: LD_INT 6
78644: PUSH
78645: FOR_TO
78646: IFFALSE 78751
// begin uc_nation := nation_nature ;
78648: LD_ADDR_OWVAR 21
78652: PUSH
78653: LD_INT 0
78655: ST_TO_ADDR
// uc_side := 0 ;
78656: LD_ADDR_OWVAR 20
78660: PUSH
78661: LD_INT 0
78663: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78664: LD_ADDR_OWVAR 29
78668: PUSH
78669: LD_INT 12
78671: PUSH
78672: LD_INT 12
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: ST_TO_ADDR
// hc_agressivity := 20 ;
78679: LD_ADDR_OWVAR 35
78683: PUSH
78684: LD_INT 20
78686: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
78687: LD_ADDR_OWVAR 28
78691: PUSH
78692: LD_INT 17
78694: ST_TO_ADDR
// hc_gallery :=  ;
78695: LD_ADDR_OWVAR 33
78699: PUSH
78700: LD_STRING 
78702: ST_TO_ADDR
// hc_name :=  ;
78703: LD_ADDR_OWVAR 26
78707: PUSH
78708: LD_STRING 
78710: ST_TO_ADDR
// un := CreateHuman ;
78711: LD_ADDR_VAR 0 2
78715: PUSH
78716: CALL_OW 44
78720: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
78721: LD_VAR 0 2
78725: PPUSH
78726: LD_INT 1
78728: PPUSH
78729: CALL_OW 51
// tmp := tmp ^ un ;
78733: LD_ADDR_VAR 0 3
78737: PUSH
78738: LD_VAR 0 3
78742: PUSH
78743: LD_VAR 0 2
78747: ADD
78748: ST_TO_ADDR
// end ;
78749: GO 78645
78751: POP
78752: POP
// repeat wait ( 0 0$1 ) ;
78753: LD_INT 35
78755: PPUSH
78756: CALL_OW 67
// for un in tmp do
78760: LD_ADDR_VAR 0 2
78764: PUSH
78765: LD_VAR 0 3
78769: PUSH
78770: FOR_IN
78771: IFFALSE 78845
// begin if IsDead ( un ) then
78773: LD_VAR 0 2
78777: PPUSH
78778: CALL_OW 301
78782: IFFALSE 78802
// begin tmp := tmp diff un ;
78784: LD_ADDR_VAR 0 3
78788: PUSH
78789: LD_VAR 0 3
78793: PUSH
78794: LD_VAR 0 2
78798: DIFF
78799: ST_TO_ADDR
// continue ;
78800: GO 78770
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
78802: LD_VAR 0 2
78806: PPUSH
78807: LD_INT 3
78809: PUSH
78810: LD_INT 22
78812: PUSH
78813: LD_INT 0
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: PUSH
78820: EMPTY
78821: LIST
78822: LIST
78823: PPUSH
78824: CALL_OW 69
78828: PPUSH
78829: LD_VAR 0 2
78833: PPUSH
78834: CALL_OW 74
78838: PPUSH
78839: CALL_OW 115
// end ;
78843: GO 78770
78845: POP
78846: POP
// until not tmp ;
78847: LD_VAR 0 3
78851: NOT
78852: IFFALSE 78753
// end ;
78854: PPOPN 3
78856: END
// every 0 0$1 trigger StreamModeActive and sTroll do
78857: LD_EXP 74
78861: PUSH
78862: LD_EXP 99
78866: AND
78867: IFFALSE 78921
78869: GO 78871
78871: DISABLE
// begin ToLua ( displayTroll(); ) ;
78872: LD_STRING displayTroll();
78874: PPUSH
78875: CALL_OW 559
// wait ( 3 3$00 ) ;
78879: LD_INT 6300
78881: PPUSH
78882: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78886: LD_STRING hideTroll();
78888: PPUSH
78889: CALL_OW 559
// wait ( 1 1$00 ) ;
78893: LD_INT 2100
78895: PPUSH
78896: CALL_OW 67
// ToLua ( displayTroll(); ) ;
78900: LD_STRING displayTroll();
78902: PPUSH
78903: CALL_OW 559
// wait ( 1 1$00 ) ;
78907: LD_INT 2100
78909: PPUSH
78910: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78914: LD_STRING hideTroll();
78916: PPUSH
78917: CALL_OW 559
// end ;
78921: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
78922: LD_EXP 74
78926: PUSH
78927: LD_EXP 100
78931: AND
78932: IFFALSE 78995
78934: GO 78936
78936: DISABLE
78937: LD_INT 0
78939: PPUSH
// begin p := 0 ;
78940: LD_ADDR_VAR 0 1
78944: PUSH
78945: LD_INT 0
78947: ST_TO_ADDR
// repeat game_speed := 1 ;
78948: LD_ADDR_OWVAR 65
78952: PUSH
78953: LD_INT 1
78955: ST_TO_ADDR
// wait ( 0 0$1 ) ;
78956: LD_INT 35
78958: PPUSH
78959: CALL_OW 67
// p := p + 1 ;
78963: LD_ADDR_VAR 0 1
78967: PUSH
78968: LD_VAR 0 1
78972: PUSH
78973: LD_INT 1
78975: PLUS
78976: ST_TO_ADDR
// until p >= 60 ;
78977: LD_VAR 0 1
78981: PUSH
78982: LD_INT 60
78984: GREATEREQUAL
78985: IFFALSE 78948
// game_speed := 4 ;
78987: LD_ADDR_OWVAR 65
78991: PUSH
78992: LD_INT 4
78994: ST_TO_ADDR
// end ;
78995: PPOPN 1
78997: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
78998: LD_EXP 74
79002: PUSH
79003: LD_EXP 101
79007: AND
79008: IFFALSE 79154
79010: GO 79012
79012: DISABLE
79013: LD_INT 0
79015: PPUSH
79016: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79017: LD_ADDR_VAR 0 1
79021: PUSH
79022: LD_INT 22
79024: PUSH
79025: LD_OWVAR 2
79029: PUSH
79030: EMPTY
79031: LIST
79032: LIST
79033: PUSH
79034: LD_INT 2
79036: PUSH
79037: LD_INT 30
79039: PUSH
79040: LD_INT 0
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: PUSH
79047: LD_INT 30
79049: PUSH
79050: LD_INT 1
79052: PUSH
79053: EMPTY
79054: LIST
79055: LIST
79056: PUSH
79057: EMPTY
79058: LIST
79059: LIST
79060: LIST
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: PPUSH
79066: CALL_OW 69
79070: ST_TO_ADDR
// if not depot then
79071: LD_VAR 0 1
79075: NOT
79076: IFFALSE 79080
// exit ;
79078: GO 79154
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79080: LD_ADDR_VAR 0 2
79084: PUSH
79085: LD_VAR 0 1
79089: PUSH
79090: LD_INT 1
79092: PPUSH
79093: LD_VAR 0 1
79097: PPUSH
79098: CALL_OW 12
79102: ARRAY
79103: PPUSH
79104: CALL_OW 274
79108: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79109: LD_VAR 0 2
79113: PPUSH
79114: LD_INT 1
79116: PPUSH
79117: LD_INT 0
79119: PPUSH
79120: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79124: LD_VAR 0 2
79128: PPUSH
79129: LD_INT 2
79131: PPUSH
79132: LD_INT 0
79134: PPUSH
79135: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79139: LD_VAR 0 2
79143: PPUSH
79144: LD_INT 3
79146: PPUSH
79147: LD_INT 0
79149: PPUSH
79150: CALL_OW 277
// end ;
79154: PPOPN 2
79156: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79157: LD_EXP 74
79161: PUSH
79162: LD_EXP 102
79166: AND
79167: IFFALSE 79264
79169: GO 79171
79171: DISABLE
79172: LD_INT 0
79174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79175: LD_ADDR_VAR 0 1
79179: PUSH
79180: LD_INT 22
79182: PUSH
79183: LD_OWVAR 2
79187: PUSH
79188: EMPTY
79189: LIST
79190: LIST
79191: PUSH
79192: LD_INT 21
79194: PUSH
79195: LD_INT 1
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: PUSH
79202: LD_INT 3
79204: PUSH
79205: LD_INT 23
79207: PUSH
79208: LD_INT 0
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: PUSH
79219: EMPTY
79220: LIST
79221: LIST
79222: LIST
79223: PPUSH
79224: CALL_OW 69
79228: ST_TO_ADDR
// if not tmp then
79229: LD_VAR 0 1
79233: NOT
79234: IFFALSE 79238
// exit ;
79236: GO 79264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79238: LD_VAR 0 1
79242: PUSH
79243: LD_INT 1
79245: PPUSH
79246: LD_VAR 0 1
79250: PPUSH
79251: CALL_OW 12
79255: ARRAY
79256: PPUSH
79257: LD_INT 200
79259: PPUSH
79260: CALL_OW 234
// end ;
79264: PPOPN 1
79266: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79267: LD_EXP 74
79271: PUSH
79272: LD_EXP 103
79276: AND
79277: IFFALSE 79356
79279: GO 79281
79281: DISABLE
79282: LD_INT 0
79284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79285: LD_ADDR_VAR 0 1
79289: PUSH
79290: LD_INT 22
79292: PUSH
79293: LD_OWVAR 2
79297: PUSH
79298: EMPTY
79299: LIST
79300: LIST
79301: PUSH
79302: LD_INT 21
79304: PUSH
79305: LD_INT 2
79307: PUSH
79308: EMPTY
79309: LIST
79310: LIST
79311: PUSH
79312: EMPTY
79313: LIST
79314: LIST
79315: PPUSH
79316: CALL_OW 69
79320: ST_TO_ADDR
// if not tmp then
79321: LD_VAR 0 1
79325: NOT
79326: IFFALSE 79330
// exit ;
79328: GO 79356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79330: LD_VAR 0 1
79334: PUSH
79335: LD_INT 1
79337: PPUSH
79338: LD_VAR 0 1
79342: PPUSH
79343: CALL_OW 12
79347: ARRAY
79348: PPUSH
79349: LD_INT 60
79351: PPUSH
79352: CALL_OW 234
// end ;
79356: PPOPN 1
79358: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79359: LD_EXP 74
79363: PUSH
79364: LD_EXP 104
79368: AND
79369: IFFALSE 79468
79371: GO 79373
79373: DISABLE
79374: LD_INT 0
79376: PPUSH
79377: PPUSH
// begin enable ;
79378: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79379: LD_ADDR_VAR 0 1
79383: PUSH
79384: LD_INT 22
79386: PUSH
79387: LD_OWVAR 2
79391: PUSH
79392: EMPTY
79393: LIST
79394: LIST
79395: PUSH
79396: LD_INT 61
79398: PUSH
79399: EMPTY
79400: LIST
79401: PUSH
79402: LD_INT 33
79404: PUSH
79405: LD_INT 2
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: LIST
79416: PPUSH
79417: CALL_OW 69
79421: ST_TO_ADDR
// if not tmp then
79422: LD_VAR 0 1
79426: NOT
79427: IFFALSE 79431
// exit ;
79429: GO 79468
// for i in tmp do
79431: LD_ADDR_VAR 0 2
79435: PUSH
79436: LD_VAR 0 1
79440: PUSH
79441: FOR_IN
79442: IFFALSE 79466
// if IsControledBy ( i ) then
79444: LD_VAR 0 2
79448: PPUSH
79449: CALL_OW 312
79453: IFFALSE 79464
// ComUnlink ( i ) ;
79455: LD_VAR 0 2
79459: PPUSH
79460: CALL_OW 136
79464: GO 79441
79466: POP
79467: POP
// end ;
79468: PPOPN 2
79470: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79471: LD_EXP 74
79475: PUSH
79476: LD_EXP 105
79480: AND
79481: IFFALSE 79621
79483: GO 79485
79485: DISABLE
79486: LD_INT 0
79488: PPUSH
79489: PPUSH
// begin ToLua ( displayPowell(); ) ;
79490: LD_STRING displayPowell();
79492: PPUSH
79493: CALL_OW 559
// uc_side := 0 ;
79497: LD_ADDR_OWVAR 20
79501: PUSH
79502: LD_INT 0
79504: ST_TO_ADDR
// uc_nation := 2 ;
79505: LD_ADDR_OWVAR 21
79509: PUSH
79510: LD_INT 2
79512: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79513: LD_ADDR_OWVAR 37
79517: PUSH
79518: LD_INT 14
79520: ST_TO_ADDR
// vc_engine := engine_siberite ;
79521: LD_ADDR_OWVAR 39
79525: PUSH
79526: LD_INT 3
79528: ST_TO_ADDR
// vc_control := control_apeman ;
79529: LD_ADDR_OWVAR 38
79533: PUSH
79534: LD_INT 5
79536: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
79537: LD_ADDR_OWVAR 40
79541: PUSH
79542: LD_INT 29
79544: ST_TO_ADDR
// un := CreateVehicle ;
79545: LD_ADDR_VAR 0 2
79549: PUSH
79550: CALL_OW 45
79554: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79555: LD_VAR 0 2
79559: PPUSH
79560: LD_INT 1
79562: PPUSH
79563: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79567: LD_INT 35
79569: PPUSH
79570: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79574: LD_VAR 0 2
79578: PPUSH
79579: LD_INT 22
79581: PUSH
79582: LD_OWVAR 2
79586: PUSH
79587: EMPTY
79588: LIST
79589: LIST
79590: PPUSH
79591: CALL_OW 69
79595: PPUSH
79596: LD_VAR 0 2
79600: PPUSH
79601: CALL_OW 74
79605: PPUSH
79606: CALL_OW 115
// until IsDead ( un ) ;
79610: LD_VAR 0 2
79614: PPUSH
79615: CALL_OW 301
79619: IFFALSE 79567
// end ;
79621: PPOPN 2
79623: END
// every 0 0$1 trigger StreamModeActive and sStu do
79624: LD_EXP 74
79628: PUSH
79629: LD_EXP 113
79633: AND
79634: IFFALSE 79650
79636: GO 79638
79638: DISABLE
// begin ToLua ( displayStucuk(); ) ;
79639: LD_STRING displayStucuk();
79641: PPUSH
79642: CALL_OW 559
// ResetFog ;
79646: CALL_OW 335
// end ;
79650: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
79651: LD_EXP 74
79655: PUSH
79656: LD_EXP 106
79660: AND
79661: IFFALSE 79802
79663: GO 79665
79665: DISABLE
79666: LD_INT 0
79668: PPUSH
79669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79670: LD_ADDR_VAR 0 2
79674: PUSH
79675: LD_INT 22
79677: PUSH
79678: LD_OWVAR 2
79682: PUSH
79683: EMPTY
79684: LIST
79685: LIST
79686: PUSH
79687: LD_INT 21
79689: PUSH
79690: LD_INT 1
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: PUSH
79697: EMPTY
79698: LIST
79699: LIST
79700: PPUSH
79701: CALL_OW 69
79705: ST_TO_ADDR
// if not tmp then
79706: LD_VAR 0 2
79710: NOT
79711: IFFALSE 79715
// exit ;
79713: GO 79802
// un := tmp [ rand ( 1 , tmp ) ] ;
79715: LD_ADDR_VAR 0 1
79719: PUSH
79720: LD_VAR 0 2
79724: PUSH
79725: LD_INT 1
79727: PPUSH
79728: LD_VAR 0 2
79732: PPUSH
79733: CALL_OW 12
79737: ARRAY
79738: ST_TO_ADDR
// SetSide ( un , 0 ) ;
79739: LD_VAR 0 1
79743: PPUSH
79744: LD_INT 0
79746: PPUSH
79747: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
79751: LD_VAR 0 1
79755: PPUSH
79756: LD_OWVAR 3
79760: PUSH
79761: LD_VAR 0 1
79765: DIFF
79766: PPUSH
79767: LD_VAR 0 1
79771: PPUSH
79772: CALL_OW 74
79776: PPUSH
79777: CALL_OW 115
// wait ( 0 0$20 ) ;
79781: LD_INT 700
79783: PPUSH
79784: CALL_OW 67
// SetSide ( un , your_side ) ;
79788: LD_VAR 0 1
79792: PPUSH
79793: LD_OWVAR 2
79797: PPUSH
79798: CALL_OW 235
// end ;
79802: PPOPN 2
79804: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
79805: LD_EXP 74
79809: PUSH
79810: LD_EXP 107
79814: AND
79815: IFFALSE 79921
79817: GO 79819
79819: DISABLE
79820: LD_INT 0
79822: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79823: LD_ADDR_VAR 0 1
79827: PUSH
79828: LD_INT 22
79830: PUSH
79831: LD_OWVAR 2
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: PUSH
79840: LD_INT 2
79842: PUSH
79843: LD_INT 30
79845: PUSH
79846: LD_INT 0
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: PUSH
79853: LD_INT 30
79855: PUSH
79856: LD_INT 1
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: PUSH
79863: EMPTY
79864: LIST
79865: LIST
79866: LIST
79867: PUSH
79868: EMPTY
79869: LIST
79870: LIST
79871: PPUSH
79872: CALL_OW 69
79876: ST_TO_ADDR
// if not depot then
79877: LD_VAR 0 1
79881: NOT
79882: IFFALSE 79886
// exit ;
79884: GO 79921
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
79886: LD_VAR 0 1
79890: PUSH
79891: LD_INT 1
79893: ARRAY
79894: PPUSH
79895: CALL_OW 250
79899: PPUSH
79900: LD_VAR 0 1
79904: PUSH
79905: LD_INT 1
79907: ARRAY
79908: PPUSH
79909: CALL_OW 251
79913: PPUSH
79914: LD_INT 70
79916: PPUSH
79917: CALL_OW 495
// end ;
79921: PPOPN 1
79923: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
79924: LD_EXP 74
79928: PUSH
79929: LD_EXP 108
79933: AND
79934: IFFALSE 80145
79936: GO 79938
79938: DISABLE
79939: LD_INT 0
79941: PPUSH
79942: PPUSH
79943: PPUSH
79944: PPUSH
79945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79946: LD_ADDR_VAR 0 5
79950: PUSH
79951: LD_INT 22
79953: PUSH
79954: LD_OWVAR 2
79958: PUSH
79959: EMPTY
79960: LIST
79961: LIST
79962: PUSH
79963: LD_INT 21
79965: PUSH
79966: LD_INT 1
79968: PUSH
79969: EMPTY
79970: LIST
79971: LIST
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: PPUSH
79977: CALL_OW 69
79981: ST_TO_ADDR
// if not tmp then
79982: LD_VAR 0 5
79986: NOT
79987: IFFALSE 79991
// exit ;
79989: GO 80145
// for i in tmp do
79991: LD_ADDR_VAR 0 1
79995: PUSH
79996: LD_VAR 0 5
80000: PUSH
80001: FOR_IN
80002: IFFALSE 80143
// begin d := rand ( 0 , 5 ) ;
80004: LD_ADDR_VAR 0 4
80008: PUSH
80009: LD_INT 0
80011: PPUSH
80012: LD_INT 5
80014: PPUSH
80015: CALL_OW 12
80019: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80020: LD_ADDR_VAR 0 2
80024: PUSH
80025: LD_VAR 0 1
80029: PPUSH
80030: CALL_OW 250
80034: PPUSH
80035: LD_VAR 0 4
80039: PPUSH
80040: LD_INT 3
80042: PPUSH
80043: LD_INT 12
80045: PPUSH
80046: CALL_OW 12
80050: PPUSH
80051: CALL_OW 272
80055: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80056: LD_ADDR_VAR 0 3
80060: PUSH
80061: LD_VAR 0 1
80065: PPUSH
80066: CALL_OW 251
80070: PPUSH
80071: LD_VAR 0 4
80075: PPUSH
80076: LD_INT 3
80078: PPUSH
80079: LD_INT 12
80081: PPUSH
80082: CALL_OW 12
80086: PPUSH
80087: CALL_OW 273
80091: ST_TO_ADDR
// if ValidHex ( x , y ) then
80092: LD_VAR 0 2
80096: PPUSH
80097: LD_VAR 0 3
80101: PPUSH
80102: CALL_OW 488
80106: IFFALSE 80141
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80108: LD_VAR 0 1
80112: PPUSH
80113: LD_VAR 0 2
80117: PPUSH
80118: LD_VAR 0 3
80122: PPUSH
80123: LD_INT 3
80125: PPUSH
80126: LD_INT 6
80128: PPUSH
80129: CALL_OW 12
80133: PPUSH
80134: LD_INT 1
80136: PPUSH
80137: CALL_OW 483
// end ;
80141: GO 80001
80143: POP
80144: POP
// end ;
80145: PPOPN 5
80147: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80148: LD_EXP 74
80152: PUSH
80153: LD_EXP 109
80157: AND
80158: IFFALSE 80252
80160: GO 80162
80162: DISABLE
80163: LD_INT 0
80165: PPUSH
80166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80167: LD_ADDR_VAR 0 2
80171: PUSH
80172: LD_INT 22
80174: PUSH
80175: LD_OWVAR 2
80179: PUSH
80180: EMPTY
80181: LIST
80182: LIST
80183: PUSH
80184: LD_INT 32
80186: PUSH
80187: LD_INT 1
80189: PUSH
80190: EMPTY
80191: LIST
80192: LIST
80193: PUSH
80194: LD_INT 21
80196: PUSH
80197: LD_INT 2
80199: PUSH
80200: EMPTY
80201: LIST
80202: LIST
80203: PUSH
80204: EMPTY
80205: LIST
80206: LIST
80207: LIST
80208: PPUSH
80209: CALL_OW 69
80213: ST_TO_ADDR
// if not tmp then
80214: LD_VAR 0 2
80218: NOT
80219: IFFALSE 80223
// exit ;
80221: GO 80252
// for i in tmp do
80223: LD_ADDR_VAR 0 1
80227: PUSH
80228: LD_VAR 0 2
80232: PUSH
80233: FOR_IN
80234: IFFALSE 80250
// SetFuel ( i , 0 ) ;
80236: LD_VAR 0 1
80240: PPUSH
80241: LD_INT 0
80243: PPUSH
80244: CALL_OW 240
80248: GO 80233
80250: POP
80251: POP
// end ;
80252: PPOPN 2
80254: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80255: LD_EXP 74
80259: PUSH
80260: LD_EXP 110
80264: AND
80265: IFFALSE 80331
80267: GO 80269
80269: DISABLE
80270: LD_INT 0
80272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80273: LD_ADDR_VAR 0 1
80277: PUSH
80278: LD_INT 22
80280: PUSH
80281: LD_OWVAR 2
80285: PUSH
80286: EMPTY
80287: LIST
80288: LIST
80289: PUSH
80290: LD_INT 30
80292: PUSH
80293: LD_INT 29
80295: PUSH
80296: EMPTY
80297: LIST
80298: LIST
80299: PUSH
80300: EMPTY
80301: LIST
80302: LIST
80303: PPUSH
80304: CALL_OW 69
80308: ST_TO_ADDR
// if not tmp then
80309: LD_VAR 0 1
80313: NOT
80314: IFFALSE 80318
// exit ;
80316: GO 80331
// DestroyUnit ( tmp [ 1 ] ) ;
80318: LD_VAR 0 1
80322: PUSH
80323: LD_INT 1
80325: ARRAY
80326: PPUSH
80327: CALL_OW 65
// end ;
80331: PPOPN 1
80333: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80334: LD_EXP 74
80338: PUSH
80339: LD_EXP 112
80343: AND
80344: IFFALSE 80473
80346: GO 80348
80348: DISABLE
80349: LD_INT 0
80351: PPUSH
// begin uc_side := 0 ;
80352: LD_ADDR_OWVAR 20
80356: PUSH
80357: LD_INT 0
80359: ST_TO_ADDR
// uc_nation := nation_arabian ;
80360: LD_ADDR_OWVAR 21
80364: PUSH
80365: LD_INT 2
80367: ST_TO_ADDR
// hc_gallery :=  ;
80368: LD_ADDR_OWVAR 33
80372: PUSH
80373: LD_STRING 
80375: ST_TO_ADDR
// hc_name :=  ;
80376: LD_ADDR_OWVAR 26
80380: PUSH
80381: LD_STRING 
80383: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80384: LD_INT 1
80386: PPUSH
80387: LD_INT 11
80389: PPUSH
80390: LD_INT 10
80392: PPUSH
80393: CALL_OW 380
// un := CreateHuman ;
80397: LD_ADDR_VAR 0 1
80401: PUSH
80402: CALL_OW 44
80406: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80407: LD_VAR 0 1
80411: PPUSH
80412: LD_INT 1
80414: PPUSH
80415: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80419: LD_INT 35
80421: PPUSH
80422: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80426: LD_VAR 0 1
80430: PPUSH
80431: LD_INT 22
80433: PUSH
80434: LD_OWVAR 2
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: PPUSH
80443: CALL_OW 69
80447: PPUSH
80448: LD_VAR 0 1
80452: PPUSH
80453: CALL_OW 74
80457: PPUSH
80458: CALL_OW 115
// until IsDead ( un ) ;
80462: LD_VAR 0 1
80466: PPUSH
80467: CALL_OW 301
80471: IFFALSE 80419
// end ;
80473: PPOPN 1
80475: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80476: LD_EXP 74
80480: PUSH
80481: LD_EXP 114
80485: AND
80486: IFFALSE 80498
80488: GO 80490
80490: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80491: LD_STRING earthquake(getX(game), 0, 32)
80493: PPUSH
80494: CALL_OW 559
80498: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80499: LD_EXP 74
80503: PUSH
80504: LD_EXP 115
80508: AND
80509: IFFALSE 80600
80511: GO 80513
80513: DISABLE
80514: LD_INT 0
80516: PPUSH
// begin enable ;
80517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80518: LD_ADDR_VAR 0 1
80522: PUSH
80523: LD_INT 22
80525: PUSH
80526: LD_OWVAR 2
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: PUSH
80535: LD_INT 21
80537: PUSH
80538: LD_INT 2
80540: PUSH
80541: EMPTY
80542: LIST
80543: LIST
80544: PUSH
80545: LD_INT 33
80547: PUSH
80548: LD_INT 3
80550: PUSH
80551: EMPTY
80552: LIST
80553: LIST
80554: PUSH
80555: EMPTY
80556: LIST
80557: LIST
80558: LIST
80559: PPUSH
80560: CALL_OW 69
80564: ST_TO_ADDR
// if not tmp then
80565: LD_VAR 0 1
80569: NOT
80570: IFFALSE 80574
// exit ;
80572: GO 80600
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80574: LD_VAR 0 1
80578: PUSH
80579: LD_INT 1
80581: PPUSH
80582: LD_VAR 0 1
80586: PPUSH
80587: CALL_OW 12
80591: ARRAY
80592: PPUSH
80593: LD_INT 1
80595: PPUSH
80596: CALL_OW 234
// end ;
80600: PPOPN 1
80602: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
80603: LD_EXP 74
80607: PUSH
80608: LD_EXP 116
80612: AND
80613: IFFALSE 80754
80615: GO 80617
80617: DISABLE
80618: LD_INT 0
80620: PPUSH
80621: PPUSH
80622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80623: LD_ADDR_VAR 0 3
80627: PUSH
80628: LD_INT 22
80630: PUSH
80631: LD_OWVAR 2
80635: PUSH
80636: EMPTY
80637: LIST
80638: LIST
80639: PUSH
80640: LD_INT 25
80642: PUSH
80643: LD_INT 1
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PUSH
80650: EMPTY
80651: LIST
80652: LIST
80653: PPUSH
80654: CALL_OW 69
80658: ST_TO_ADDR
// if not tmp then
80659: LD_VAR 0 3
80663: NOT
80664: IFFALSE 80668
// exit ;
80666: GO 80754
// un := tmp [ rand ( 1 , tmp ) ] ;
80668: LD_ADDR_VAR 0 2
80672: PUSH
80673: LD_VAR 0 3
80677: PUSH
80678: LD_INT 1
80680: PPUSH
80681: LD_VAR 0 3
80685: PPUSH
80686: CALL_OW 12
80690: ARRAY
80691: ST_TO_ADDR
// if Crawls ( un ) then
80692: LD_VAR 0 2
80696: PPUSH
80697: CALL_OW 318
80701: IFFALSE 80712
// ComWalk ( un ) ;
80703: LD_VAR 0 2
80707: PPUSH
80708: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
80712: LD_VAR 0 2
80716: PPUSH
80717: LD_INT 9
80719: PPUSH
80720: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
80724: LD_INT 28
80726: PPUSH
80727: LD_OWVAR 2
80731: PPUSH
80732: LD_INT 2
80734: PPUSH
80735: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
80739: LD_INT 29
80741: PPUSH
80742: LD_OWVAR 2
80746: PPUSH
80747: LD_INT 2
80749: PPUSH
80750: CALL_OW 322
// end ;
80754: PPOPN 3
80756: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
80757: LD_EXP 74
80761: PUSH
80762: LD_EXP 117
80766: AND
80767: IFFALSE 80878
80769: GO 80771
80771: DISABLE
80772: LD_INT 0
80774: PPUSH
80775: PPUSH
80776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80777: LD_ADDR_VAR 0 3
80781: PUSH
80782: LD_INT 22
80784: PUSH
80785: LD_OWVAR 2
80789: PUSH
80790: EMPTY
80791: LIST
80792: LIST
80793: PUSH
80794: LD_INT 25
80796: PUSH
80797: LD_INT 1
80799: PUSH
80800: EMPTY
80801: LIST
80802: LIST
80803: PUSH
80804: EMPTY
80805: LIST
80806: LIST
80807: PPUSH
80808: CALL_OW 69
80812: ST_TO_ADDR
// if not tmp then
80813: LD_VAR 0 3
80817: NOT
80818: IFFALSE 80822
// exit ;
80820: GO 80878
// un := tmp [ rand ( 1 , tmp ) ] ;
80822: LD_ADDR_VAR 0 2
80826: PUSH
80827: LD_VAR 0 3
80831: PUSH
80832: LD_INT 1
80834: PPUSH
80835: LD_VAR 0 3
80839: PPUSH
80840: CALL_OW 12
80844: ARRAY
80845: ST_TO_ADDR
// if Crawls ( un ) then
80846: LD_VAR 0 2
80850: PPUSH
80851: CALL_OW 318
80855: IFFALSE 80866
// ComWalk ( un ) ;
80857: LD_VAR 0 2
80861: PPUSH
80862: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80866: LD_VAR 0 2
80870: PPUSH
80871: LD_INT 8
80873: PPUSH
80874: CALL_OW 336
// end ;
80878: PPOPN 3
80880: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
80881: LD_EXP 74
80885: PUSH
80886: LD_EXP 118
80890: AND
80891: IFFALSE 81035
80893: GO 80895
80895: DISABLE
80896: LD_INT 0
80898: PPUSH
80899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
80900: LD_ADDR_VAR 0 2
80904: PUSH
80905: LD_INT 22
80907: PUSH
80908: LD_OWVAR 2
80912: PUSH
80913: EMPTY
80914: LIST
80915: LIST
80916: PUSH
80917: LD_INT 21
80919: PUSH
80920: LD_INT 2
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PUSH
80927: LD_INT 2
80929: PUSH
80930: LD_INT 34
80932: PUSH
80933: LD_INT 12
80935: PUSH
80936: EMPTY
80937: LIST
80938: LIST
80939: PUSH
80940: LD_INT 34
80942: PUSH
80943: LD_INT 51
80945: PUSH
80946: EMPTY
80947: LIST
80948: LIST
80949: PUSH
80950: LD_INT 34
80952: PUSH
80953: LD_INT 32
80955: PUSH
80956: EMPTY
80957: LIST
80958: LIST
80959: PUSH
80960: EMPTY
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: PUSH
80966: EMPTY
80967: LIST
80968: LIST
80969: LIST
80970: PPUSH
80971: CALL_OW 69
80975: ST_TO_ADDR
// if not tmp then
80976: LD_VAR 0 2
80980: NOT
80981: IFFALSE 80985
// exit ;
80983: GO 81035
// for i in tmp do
80985: LD_ADDR_VAR 0 1
80989: PUSH
80990: LD_VAR 0 2
80994: PUSH
80995: FOR_IN
80996: IFFALSE 81033
// if GetCargo ( i , mat_artifact ) = 0 then
80998: LD_VAR 0 1
81002: PPUSH
81003: LD_INT 4
81005: PPUSH
81006: CALL_OW 289
81010: PUSH
81011: LD_INT 0
81013: EQUAL
81014: IFFALSE 81031
// SetCargo ( i , mat_siberit , 100 ) ;
81016: LD_VAR 0 1
81020: PPUSH
81021: LD_INT 3
81023: PPUSH
81024: LD_INT 100
81026: PPUSH
81027: CALL_OW 290
81031: GO 80995
81033: POP
81034: POP
// end ;
81035: PPOPN 2
81037: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81038: LD_EXP 74
81042: PUSH
81043: LD_EXP 119
81047: AND
81048: IFFALSE 81231
81050: GO 81052
81052: DISABLE
81053: LD_INT 0
81055: PPUSH
81056: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81057: LD_ADDR_VAR 0 2
81061: PUSH
81062: LD_INT 22
81064: PUSH
81065: LD_OWVAR 2
81069: PUSH
81070: EMPTY
81071: LIST
81072: LIST
81073: PPUSH
81074: CALL_OW 69
81078: ST_TO_ADDR
// if not tmp then
81079: LD_VAR 0 2
81083: NOT
81084: IFFALSE 81088
// exit ;
81086: GO 81231
// for i := 1 to 2 do
81088: LD_ADDR_VAR 0 1
81092: PUSH
81093: DOUBLE
81094: LD_INT 1
81096: DEC
81097: ST_TO_ADDR
81098: LD_INT 2
81100: PUSH
81101: FOR_TO
81102: IFFALSE 81229
// begin uc_side := your_side ;
81104: LD_ADDR_OWVAR 20
81108: PUSH
81109: LD_OWVAR 2
81113: ST_TO_ADDR
// uc_nation := nation_american ;
81114: LD_ADDR_OWVAR 21
81118: PUSH
81119: LD_INT 1
81121: ST_TO_ADDR
// vc_chassis := us_morphling ;
81122: LD_ADDR_OWVAR 37
81126: PUSH
81127: LD_INT 5
81129: ST_TO_ADDR
// vc_engine := engine_siberite ;
81130: LD_ADDR_OWVAR 39
81134: PUSH
81135: LD_INT 3
81137: ST_TO_ADDR
// vc_control := control_computer ;
81138: LD_ADDR_OWVAR 38
81142: PUSH
81143: LD_INT 3
81145: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81146: LD_ADDR_OWVAR 40
81150: PUSH
81151: LD_INT 10
81153: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81154: LD_VAR 0 2
81158: PUSH
81159: LD_INT 1
81161: ARRAY
81162: PPUSH
81163: CALL_OW 310
81167: NOT
81168: IFFALSE 81215
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81170: CALL_OW 45
81174: PPUSH
81175: LD_VAR 0 2
81179: PUSH
81180: LD_INT 1
81182: ARRAY
81183: PPUSH
81184: CALL_OW 250
81188: PPUSH
81189: LD_VAR 0 2
81193: PUSH
81194: LD_INT 1
81196: ARRAY
81197: PPUSH
81198: CALL_OW 251
81202: PPUSH
81203: LD_INT 12
81205: PPUSH
81206: LD_INT 1
81208: PPUSH
81209: CALL_OW 50
81213: GO 81227
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81215: CALL_OW 45
81219: PPUSH
81220: LD_INT 1
81222: PPUSH
81223: CALL_OW 51
// end ;
81227: GO 81101
81229: POP
81230: POP
// end ;
81231: PPOPN 2
81233: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81234: LD_EXP 74
81238: PUSH
81239: LD_EXP 120
81243: AND
81244: IFFALSE 81466
81246: GO 81248
81248: DISABLE
81249: LD_INT 0
81251: PPUSH
81252: PPUSH
81253: PPUSH
81254: PPUSH
81255: PPUSH
81256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81257: LD_ADDR_VAR 0 6
81261: PUSH
81262: LD_INT 22
81264: PUSH
81265: LD_OWVAR 2
81269: PUSH
81270: EMPTY
81271: LIST
81272: LIST
81273: PUSH
81274: LD_INT 21
81276: PUSH
81277: LD_INT 1
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: PUSH
81284: LD_INT 3
81286: PUSH
81287: LD_INT 23
81289: PUSH
81290: LD_INT 0
81292: PUSH
81293: EMPTY
81294: LIST
81295: LIST
81296: PUSH
81297: EMPTY
81298: LIST
81299: LIST
81300: PUSH
81301: EMPTY
81302: LIST
81303: LIST
81304: LIST
81305: PPUSH
81306: CALL_OW 69
81310: ST_TO_ADDR
// if not tmp then
81311: LD_VAR 0 6
81315: NOT
81316: IFFALSE 81320
// exit ;
81318: GO 81466
// s1 := rand ( 1 , 4 ) ;
81320: LD_ADDR_VAR 0 2
81324: PUSH
81325: LD_INT 1
81327: PPUSH
81328: LD_INT 4
81330: PPUSH
81331: CALL_OW 12
81335: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81336: LD_ADDR_VAR 0 4
81340: PUSH
81341: LD_VAR 0 6
81345: PUSH
81346: LD_INT 1
81348: ARRAY
81349: PPUSH
81350: LD_VAR 0 2
81354: PPUSH
81355: CALL_OW 259
81359: ST_TO_ADDR
// if s1 = 1 then
81360: LD_VAR 0 2
81364: PUSH
81365: LD_INT 1
81367: EQUAL
81368: IFFALSE 81388
// s2 := rand ( 2 , 4 ) else
81370: LD_ADDR_VAR 0 3
81374: PUSH
81375: LD_INT 2
81377: PPUSH
81378: LD_INT 4
81380: PPUSH
81381: CALL_OW 12
81385: ST_TO_ADDR
81386: GO 81396
// s2 := 1 ;
81388: LD_ADDR_VAR 0 3
81392: PUSH
81393: LD_INT 1
81395: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81396: LD_ADDR_VAR 0 5
81400: PUSH
81401: LD_VAR 0 6
81405: PUSH
81406: LD_INT 1
81408: ARRAY
81409: PPUSH
81410: LD_VAR 0 3
81414: PPUSH
81415: CALL_OW 259
81419: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81420: LD_VAR 0 6
81424: PUSH
81425: LD_INT 1
81427: ARRAY
81428: PPUSH
81429: LD_VAR 0 2
81433: PPUSH
81434: LD_VAR 0 5
81438: PPUSH
81439: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81443: LD_VAR 0 6
81447: PUSH
81448: LD_INT 1
81450: ARRAY
81451: PPUSH
81452: LD_VAR 0 3
81456: PPUSH
81457: LD_VAR 0 4
81461: PPUSH
81462: CALL_OW 237
// end ;
81466: PPOPN 6
81468: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81469: LD_EXP 74
81473: PUSH
81474: LD_EXP 121
81478: AND
81479: IFFALSE 81558
81481: GO 81483
81483: DISABLE
81484: LD_INT 0
81486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81487: LD_ADDR_VAR 0 1
81491: PUSH
81492: LD_INT 22
81494: PUSH
81495: LD_OWVAR 2
81499: PUSH
81500: EMPTY
81501: LIST
81502: LIST
81503: PUSH
81504: LD_INT 30
81506: PUSH
81507: LD_INT 3
81509: PUSH
81510: EMPTY
81511: LIST
81512: LIST
81513: PUSH
81514: EMPTY
81515: LIST
81516: LIST
81517: PPUSH
81518: CALL_OW 69
81522: ST_TO_ADDR
// if not tmp then
81523: LD_VAR 0 1
81527: NOT
81528: IFFALSE 81532
// exit ;
81530: GO 81558
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81532: LD_VAR 0 1
81536: PUSH
81537: LD_INT 1
81539: PPUSH
81540: LD_VAR 0 1
81544: PPUSH
81545: CALL_OW 12
81549: ARRAY
81550: PPUSH
81551: LD_INT 1
81553: PPUSH
81554: CALL_OW 234
// end ;
81558: PPOPN 1
81560: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
81561: LD_EXP 74
81565: PUSH
81566: LD_EXP 122
81570: AND
81571: IFFALSE 81683
81573: GO 81575
81575: DISABLE
81576: LD_INT 0
81578: PPUSH
81579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
81580: LD_ADDR_VAR 0 2
81584: PUSH
81585: LD_INT 22
81587: PUSH
81588: LD_OWVAR 2
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PUSH
81597: LD_INT 2
81599: PUSH
81600: LD_INT 30
81602: PUSH
81603: LD_INT 27
81605: PUSH
81606: EMPTY
81607: LIST
81608: LIST
81609: PUSH
81610: LD_INT 30
81612: PUSH
81613: LD_INT 26
81615: PUSH
81616: EMPTY
81617: LIST
81618: LIST
81619: PUSH
81620: LD_INT 30
81622: PUSH
81623: LD_INT 28
81625: PUSH
81626: EMPTY
81627: LIST
81628: LIST
81629: PUSH
81630: EMPTY
81631: LIST
81632: LIST
81633: LIST
81634: LIST
81635: PUSH
81636: EMPTY
81637: LIST
81638: LIST
81639: PPUSH
81640: CALL_OW 69
81644: ST_TO_ADDR
// if not tmp then
81645: LD_VAR 0 2
81649: NOT
81650: IFFALSE 81654
// exit ;
81652: GO 81683
// for i in tmp do
81654: LD_ADDR_VAR 0 1
81658: PUSH
81659: LD_VAR 0 2
81663: PUSH
81664: FOR_IN
81665: IFFALSE 81681
// SetLives ( i , 1 ) ;
81667: LD_VAR 0 1
81671: PPUSH
81672: LD_INT 1
81674: PPUSH
81675: CALL_OW 234
81679: GO 81664
81681: POP
81682: POP
// end ;
81683: PPOPN 2
81685: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
81686: LD_EXP 74
81690: PUSH
81691: LD_EXP 123
81695: AND
81696: IFFALSE 81983
81698: GO 81700
81700: DISABLE
81701: LD_INT 0
81703: PPUSH
81704: PPUSH
81705: PPUSH
// begin i := rand ( 1 , 7 ) ;
81706: LD_ADDR_VAR 0 1
81710: PUSH
81711: LD_INT 1
81713: PPUSH
81714: LD_INT 7
81716: PPUSH
81717: CALL_OW 12
81721: ST_TO_ADDR
// case i of 1 :
81722: LD_VAR 0 1
81726: PUSH
81727: LD_INT 1
81729: DOUBLE
81730: EQUAL
81731: IFTRUE 81735
81733: GO 81745
81735: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
81736: LD_STRING earthquake(getX(game), 0, 32)
81738: PPUSH
81739: CALL_OW 559
81743: GO 81983
81745: LD_INT 2
81747: DOUBLE
81748: EQUAL
81749: IFTRUE 81753
81751: GO 81767
81753: POP
// begin ToLua ( displayStucuk(); ) ;
81754: LD_STRING displayStucuk();
81756: PPUSH
81757: CALL_OW 559
// ResetFog ;
81761: CALL_OW 335
// end ; 3 :
81765: GO 81983
81767: LD_INT 3
81769: DOUBLE
81770: EQUAL
81771: IFTRUE 81775
81773: GO 81879
81775: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81776: LD_ADDR_VAR 0 2
81780: PUSH
81781: LD_INT 22
81783: PUSH
81784: LD_OWVAR 2
81788: PUSH
81789: EMPTY
81790: LIST
81791: LIST
81792: PUSH
81793: LD_INT 25
81795: PUSH
81796: LD_INT 1
81798: PUSH
81799: EMPTY
81800: LIST
81801: LIST
81802: PUSH
81803: EMPTY
81804: LIST
81805: LIST
81806: PPUSH
81807: CALL_OW 69
81811: ST_TO_ADDR
// if not tmp then
81812: LD_VAR 0 2
81816: NOT
81817: IFFALSE 81821
// exit ;
81819: GO 81983
// un := tmp [ rand ( 1 , tmp ) ] ;
81821: LD_ADDR_VAR 0 3
81825: PUSH
81826: LD_VAR 0 2
81830: PUSH
81831: LD_INT 1
81833: PPUSH
81834: LD_VAR 0 2
81838: PPUSH
81839: CALL_OW 12
81843: ARRAY
81844: ST_TO_ADDR
// if Crawls ( un ) then
81845: LD_VAR 0 3
81849: PPUSH
81850: CALL_OW 318
81854: IFFALSE 81865
// ComWalk ( un ) ;
81856: LD_VAR 0 3
81860: PPUSH
81861: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81865: LD_VAR 0 3
81869: PPUSH
81870: LD_INT 8
81872: PPUSH
81873: CALL_OW 336
// end ; 4 :
81877: GO 81983
81879: LD_INT 4
81881: DOUBLE
81882: EQUAL
81883: IFTRUE 81887
81885: GO 81961
81887: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81888: LD_ADDR_VAR 0 2
81892: PUSH
81893: LD_INT 22
81895: PUSH
81896: LD_OWVAR 2
81900: PUSH
81901: EMPTY
81902: LIST
81903: LIST
81904: PUSH
81905: LD_INT 30
81907: PUSH
81908: LD_INT 29
81910: PUSH
81911: EMPTY
81912: LIST
81913: LIST
81914: PUSH
81915: EMPTY
81916: LIST
81917: LIST
81918: PPUSH
81919: CALL_OW 69
81923: ST_TO_ADDR
// if not tmp then
81924: LD_VAR 0 2
81928: NOT
81929: IFFALSE 81933
// exit ;
81931: GO 81983
// CenterNowOnUnits ( tmp [ 1 ] ) ;
81933: LD_VAR 0 2
81937: PUSH
81938: LD_INT 1
81940: ARRAY
81941: PPUSH
81942: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
81946: LD_VAR 0 2
81950: PUSH
81951: LD_INT 1
81953: ARRAY
81954: PPUSH
81955: CALL_OW 65
// end ; 5 .. 7 :
81959: GO 81983
81961: LD_INT 5
81963: DOUBLE
81964: GREATEREQUAL
81965: IFFALSE 81973
81967: LD_INT 7
81969: DOUBLE
81970: LESSEQUAL
81971: IFTRUE 81975
81973: GO 81982
81975: POP
// StreamSibBomb ; end ;
81976: CALL 78220 0 0
81980: GO 81983
81982: POP
// end ;
81983: PPOPN 3
81985: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
81986: LD_EXP 74
81990: PUSH
81991: LD_EXP 124
81995: AND
81996: IFFALSE 82152
81998: GO 82000
82000: DISABLE
82001: LD_INT 0
82003: PPUSH
82004: PPUSH
82005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82006: LD_ADDR_VAR 0 2
82010: PUSH
82011: LD_INT 81
82013: PUSH
82014: LD_OWVAR 2
82018: PUSH
82019: EMPTY
82020: LIST
82021: LIST
82022: PUSH
82023: LD_INT 2
82025: PUSH
82026: LD_INT 21
82028: PUSH
82029: LD_INT 1
82031: PUSH
82032: EMPTY
82033: LIST
82034: LIST
82035: PUSH
82036: LD_INT 21
82038: PUSH
82039: LD_INT 2
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: PUSH
82046: EMPTY
82047: LIST
82048: LIST
82049: LIST
82050: PUSH
82051: EMPTY
82052: LIST
82053: LIST
82054: PPUSH
82055: CALL_OW 69
82059: ST_TO_ADDR
// if not tmp then
82060: LD_VAR 0 2
82064: NOT
82065: IFFALSE 82069
// exit ;
82067: GO 82152
// p := 0 ;
82069: LD_ADDR_VAR 0 3
82073: PUSH
82074: LD_INT 0
82076: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82077: LD_INT 35
82079: PPUSH
82080: CALL_OW 67
// p := p + 1 ;
82084: LD_ADDR_VAR 0 3
82088: PUSH
82089: LD_VAR 0 3
82093: PUSH
82094: LD_INT 1
82096: PLUS
82097: ST_TO_ADDR
// for i in tmp do
82098: LD_ADDR_VAR 0 1
82102: PUSH
82103: LD_VAR 0 2
82107: PUSH
82108: FOR_IN
82109: IFFALSE 82140
// if GetLives ( i ) < 1000 then
82111: LD_VAR 0 1
82115: PPUSH
82116: CALL_OW 256
82120: PUSH
82121: LD_INT 1000
82123: LESS
82124: IFFALSE 82138
// SetLives ( i , 1000 ) ;
82126: LD_VAR 0 1
82130: PPUSH
82131: LD_INT 1000
82133: PPUSH
82134: CALL_OW 234
82138: GO 82108
82140: POP
82141: POP
// until p > 20 ;
82142: LD_VAR 0 3
82146: PUSH
82147: LD_INT 20
82149: GREATER
82150: IFFALSE 82077
// end ;
82152: PPOPN 3
82154: END
// every 0 0$1 trigger StreamModeActive and sTime do
82155: LD_EXP 74
82159: PUSH
82160: LD_EXP 125
82164: AND
82165: IFFALSE 82200
82167: GO 82169
82169: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82170: LD_INT 28
82172: PPUSH
82173: LD_OWVAR 2
82177: PPUSH
82178: LD_INT 2
82180: PPUSH
82181: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82185: LD_INT 30
82187: PPUSH
82188: LD_OWVAR 2
82192: PPUSH
82193: LD_INT 2
82195: PPUSH
82196: CALL_OW 322
// end ;
82200: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82201: LD_EXP 74
82205: PUSH
82206: LD_EXP 126
82210: AND
82211: IFFALSE 82332
82213: GO 82215
82215: DISABLE
82216: LD_INT 0
82218: PPUSH
82219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82220: LD_ADDR_VAR 0 2
82224: PUSH
82225: LD_INT 22
82227: PUSH
82228: LD_OWVAR 2
82232: PUSH
82233: EMPTY
82234: LIST
82235: LIST
82236: PUSH
82237: LD_INT 21
82239: PUSH
82240: LD_INT 1
82242: PUSH
82243: EMPTY
82244: LIST
82245: LIST
82246: PUSH
82247: LD_INT 3
82249: PUSH
82250: LD_INT 23
82252: PUSH
82253: LD_INT 0
82255: PUSH
82256: EMPTY
82257: LIST
82258: LIST
82259: PUSH
82260: EMPTY
82261: LIST
82262: LIST
82263: PUSH
82264: EMPTY
82265: LIST
82266: LIST
82267: LIST
82268: PPUSH
82269: CALL_OW 69
82273: ST_TO_ADDR
// if not tmp then
82274: LD_VAR 0 2
82278: NOT
82279: IFFALSE 82283
// exit ;
82281: GO 82332
// for i in tmp do
82283: LD_ADDR_VAR 0 1
82287: PUSH
82288: LD_VAR 0 2
82292: PUSH
82293: FOR_IN
82294: IFFALSE 82330
// begin if Crawls ( i ) then
82296: LD_VAR 0 1
82300: PPUSH
82301: CALL_OW 318
82305: IFFALSE 82316
// ComWalk ( i ) ;
82307: LD_VAR 0 1
82311: PPUSH
82312: CALL_OW 138
// SetClass ( i , 2 ) ;
82316: LD_VAR 0 1
82320: PPUSH
82321: LD_INT 2
82323: PPUSH
82324: CALL_OW 336
// end ;
82328: GO 82293
82330: POP
82331: POP
// end ;
82332: PPOPN 2
82334: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82335: LD_EXP 74
82339: PUSH
82340: LD_EXP 127
82344: AND
82345: IFFALSE 82633
82347: GO 82349
82349: DISABLE
82350: LD_INT 0
82352: PPUSH
82353: PPUSH
82354: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82355: LD_OWVAR 2
82359: PPUSH
82360: LD_INT 9
82362: PPUSH
82363: LD_INT 1
82365: PPUSH
82366: LD_INT 1
82368: PPUSH
82369: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82373: LD_INT 9
82375: PPUSH
82376: LD_OWVAR 2
82380: PPUSH
82381: CALL_OW 343
// uc_side := 9 ;
82385: LD_ADDR_OWVAR 20
82389: PUSH
82390: LD_INT 9
82392: ST_TO_ADDR
// uc_nation := 2 ;
82393: LD_ADDR_OWVAR 21
82397: PUSH
82398: LD_INT 2
82400: ST_TO_ADDR
// hc_name := Dark Warrior ;
82401: LD_ADDR_OWVAR 26
82405: PUSH
82406: LD_STRING Dark Warrior
82408: ST_TO_ADDR
// hc_gallery :=  ;
82409: LD_ADDR_OWVAR 33
82413: PUSH
82414: LD_STRING 
82416: ST_TO_ADDR
// hc_noskilllimit := true ;
82417: LD_ADDR_OWVAR 76
82421: PUSH
82422: LD_INT 1
82424: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82425: LD_ADDR_OWVAR 31
82429: PUSH
82430: LD_INT 30
82432: PUSH
82433: LD_INT 30
82435: PUSH
82436: LD_INT 30
82438: PUSH
82439: LD_INT 30
82441: PUSH
82442: EMPTY
82443: LIST
82444: LIST
82445: LIST
82446: LIST
82447: ST_TO_ADDR
// un := CreateHuman ;
82448: LD_ADDR_VAR 0 3
82452: PUSH
82453: CALL_OW 44
82457: ST_TO_ADDR
// hc_noskilllimit := false ;
82458: LD_ADDR_OWVAR 76
82462: PUSH
82463: LD_INT 0
82465: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82466: LD_VAR 0 3
82470: PPUSH
82471: LD_INT 1
82473: PPUSH
82474: CALL_OW 51
// ToLua ( playRanger() ) ;
82478: LD_STRING playRanger()
82480: PPUSH
82481: CALL_OW 559
// p := 0 ;
82485: LD_ADDR_VAR 0 2
82489: PUSH
82490: LD_INT 0
82492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82493: LD_INT 35
82495: PPUSH
82496: CALL_OW 67
// p := p + 1 ;
82500: LD_ADDR_VAR 0 2
82504: PUSH
82505: LD_VAR 0 2
82509: PUSH
82510: LD_INT 1
82512: PLUS
82513: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82514: LD_VAR 0 3
82518: PPUSH
82519: CALL_OW 256
82523: PUSH
82524: LD_INT 1000
82526: LESS
82527: IFFALSE 82541
// SetLives ( un , 1000 ) ;
82529: LD_VAR 0 3
82533: PPUSH
82534: LD_INT 1000
82536: PPUSH
82537: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
82541: LD_VAR 0 3
82545: PPUSH
82546: LD_INT 81
82548: PUSH
82549: LD_OWVAR 2
82553: PUSH
82554: EMPTY
82555: LIST
82556: LIST
82557: PUSH
82558: LD_INT 91
82560: PUSH
82561: LD_VAR 0 3
82565: PUSH
82566: LD_INT 30
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: LIST
82573: PUSH
82574: EMPTY
82575: LIST
82576: LIST
82577: PPUSH
82578: CALL_OW 69
82582: PPUSH
82583: LD_VAR 0 3
82587: PPUSH
82588: CALL_OW 74
82592: PPUSH
82593: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
82597: LD_VAR 0 2
82601: PUSH
82602: LD_INT 80
82604: GREATER
82605: PUSH
82606: LD_VAR 0 3
82610: PPUSH
82611: CALL_OW 301
82615: OR
82616: IFFALSE 82493
// if un then
82618: LD_VAR 0 3
82622: IFFALSE 82633
// RemoveUnit ( un ) ;
82624: LD_VAR 0 3
82628: PPUSH
82629: CALL_OW 64
// end ;
82633: PPOPN 3
82635: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
82636: LD_EXP 128
82640: IFFALSE 82756
82642: GO 82644
82644: DISABLE
82645: LD_INT 0
82647: PPUSH
82648: PPUSH
82649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82650: LD_ADDR_VAR 0 2
82654: PUSH
82655: LD_INT 81
82657: PUSH
82658: LD_OWVAR 2
82662: PUSH
82663: EMPTY
82664: LIST
82665: LIST
82666: PUSH
82667: LD_INT 21
82669: PUSH
82670: LD_INT 1
82672: PUSH
82673: EMPTY
82674: LIST
82675: LIST
82676: PUSH
82677: EMPTY
82678: LIST
82679: LIST
82680: PPUSH
82681: CALL_OW 69
82685: ST_TO_ADDR
// ToLua ( playComputer() ) ;
82686: LD_STRING playComputer()
82688: PPUSH
82689: CALL_OW 559
// if not tmp then
82693: LD_VAR 0 2
82697: NOT
82698: IFFALSE 82702
// exit ;
82700: GO 82756
// for i in tmp do
82702: LD_ADDR_VAR 0 1
82706: PUSH
82707: LD_VAR 0 2
82711: PUSH
82712: FOR_IN
82713: IFFALSE 82754
// for j := 1 to 4 do
82715: LD_ADDR_VAR 0 3
82719: PUSH
82720: DOUBLE
82721: LD_INT 1
82723: DEC
82724: ST_TO_ADDR
82725: LD_INT 4
82727: PUSH
82728: FOR_TO
82729: IFFALSE 82750
// SetSkill ( i , j , 10 ) ;
82731: LD_VAR 0 1
82735: PPUSH
82736: LD_VAR 0 3
82740: PPUSH
82741: LD_INT 10
82743: PPUSH
82744: CALL_OW 237
82748: GO 82728
82750: POP
82751: POP
82752: GO 82712
82754: POP
82755: POP
// end ;
82756: PPOPN 3
82758: END
// every 0 0$1 trigger s30 do var i , tmp ;
82759: LD_EXP 129
82763: IFFALSE 82832
82765: GO 82767
82767: DISABLE
82768: LD_INT 0
82770: PPUSH
82771: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82772: LD_ADDR_VAR 0 2
82776: PUSH
82777: LD_INT 22
82779: PUSH
82780: LD_OWVAR 2
82784: PUSH
82785: EMPTY
82786: LIST
82787: LIST
82788: PPUSH
82789: CALL_OW 69
82793: ST_TO_ADDR
// if not tmp then
82794: LD_VAR 0 2
82798: NOT
82799: IFFALSE 82803
// exit ;
82801: GO 82832
// for i in tmp do
82803: LD_ADDR_VAR 0 1
82807: PUSH
82808: LD_VAR 0 2
82812: PUSH
82813: FOR_IN
82814: IFFALSE 82830
// SetLives ( i , 300 ) ;
82816: LD_VAR 0 1
82820: PPUSH
82821: LD_INT 300
82823: PPUSH
82824: CALL_OW 234
82828: GO 82813
82830: POP
82831: POP
// end ;
82832: PPOPN 2
82834: END
// every 0 0$1 trigger s60 do var i , tmp ;
82835: LD_EXP 130
82839: IFFALSE 82908
82841: GO 82843
82843: DISABLE
82844: LD_INT 0
82846: PPUSH
82847: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82848: LD_ADDR_VAR 0 2
82852: PUSH
82853: LD_INT 22
82855: PUSH
82856: LD_OWVAR 2
82860: PUSH
82861: EMPTY
82862: LIST
82863: LIST
82864: PPUSH
82865: CALL_OW 69
82869: ST_TO_ADDR
// if not tmp then
82870: LD_VAR 0 2
82874: NOT
82875: IFFALSE 82879
// exit ;
82877: GO 82908
// for i in tmp do
82879: LD_ADDR_VAR 0 1
82883: PUSH
82884: LD_VAR 0 2
82888: PUSH
82889: FOR_IN
82890: IFFALSE 82906
// SetLives ( i , 600 ) ;
82892: LD_VAR 0 1
82896: PPUSH
82897: LD_INT 600
82899: PPUSH
82900: CALL_OW 234
82904: GO 82889
82906: POP
82907: POP
// end ;
82908: PPOPN 2
82910: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
82911: LD_INT 0
82913: PPUSH
// case cmd of 301 :
82914: LD_VAR 0 1
82918: PUSH
82919: LD_INT 301
82921: DOUBLE
82922: EQUAL
82923: IFTRUE 82927
82925: GO 82959
82927: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
82928: LD_VAR 0 6
82932: PPUSH
82933: LD_VAR 0 7
82937: PPUSH
82938: LD_VAR 0 8
82942: PPUSH
82943: LD_VAR 0 4
82947: PPUSH
82948: LD_VAR 0 5
82952: PPUSH
82953: CALL 84168 0 5
82957: GO 83080
82959: LD_INT 302
82961: DOUBLE
82962: EQUAL
82963: IFTRUE 82967
82965: GO 83004
82967: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
82968: LD_VAR 0 6
82972: PPUSH
82973: LD_VAR 0 7
82977: PPUSH
82978: LD_VAR 0 8
82982: PPUSH
82983: LD_VAR 0 9
82987: PPUSH
82988: LD_VAR 0 4
82992: PPUSH
82993: LD_VAR 0 5
82997: PPUSH
82998: CALL 84259 0 6
83002: GO 83080
83004: LD_INT 303
83006: DOUBLE
83007: EQUAL
83008: IFTRUE 83012
83010: GO 83049
83012: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83013: LD_VAR 0 6
83017: PPUSH
83018: LD_VAR 0 7
83022: PPUSH
83023: LD_VAR 0 8
83027: PPUSH
83028: LD_VAR 0 9
83032: PPUSH
83033: LD_VAR 0 4
83037: PPUSH
83038: LD_VAR 0 5
83042: PPUSH
83043: CALL 83085 0 6
83047: GO 83080
83049: LD_INT 304
83051: DOUBLE
83052: EQUAL
83053: IFTRUE 83057
83055: GO 83079
83057: POP
// hHackTeleport ( unit , x , y ) ; end ;
83058: LD_VAR 0 2
83062: PPUSH
83063: LD_VAR 0 4
83067: PPUSH
83068: LD_VAR 0 5
83072: PPUSH
83073: CALL 84852 0 3
83077: GO 83080
83079: POP
// end ;
83080: LD_VAR 0 12
83084: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83085: LD_INT 0
83087: PPUSH
83088: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83089: LD_VAR 0 1
83093: PUSH
83094: LD_INT 1
83096: LESS
83097: PUSH
83098: LD_VAR 0 1
83102: PUSH
83103: LD_INT 3
83105: GREATER
83106: OR
83107: PUSH
83108: LD_VAR 0 5
83112: PPUSH
83113: LD_VAR 0 6
83117: PPUSH
83118: CALL_OW 428
83122: OR
83123: IFFALSE 83127
// exit ;
83125: GO 83855
// uc_side := your_side ;
83127: LD_ADDR_OWVAR 20
83131: PUSH
83132: LD_OWVAR 2
83136: ST_TO_ADDR
// uc_nation := nation ;
83137: LD_ADDR_OWVAR 21
83141: PUSH
83142: LD_VAR 0 1
83146: ST_TO_ADDR
// bc_level = 1 ;
83147: LD_ADDR_OWVAR 43
83151: PUSH
83152: LD_INT 1
83154: ST_TO_ADDR
// case btype of 1 :
83155: LD_VAR 0 2
83159: PUSH
83160: LD_INT 1
83162: DOUBLE
83163: EQUAL
83164: IFTRUE 83168
83166: GO 83179
83168: POP
// bc_type := b_depot ; 2 :
83169: LD_ADDR_OWVAR 42
83173: PUSH
83174: LD_INT 0
83176: ST_TO_ADDR
83177: GO 83799
83179: LD_INT 2
83181: DOUBLE
83182: EQUAL
83183: IFTRUE 83187
83185: GO 83198
83187: POP
// bc_type := b_warehouse ; 3 :
83188: LD_ADDR_OWVAR 42
83192: PUSH
83193: LD_INT 1
83195: ST_TO_ADDR
83196: GO 83799
83198: LD_INT 3
83200: DOUBLE
83201: EQUAL
83202: IFTRUE 83206
83204: GO 83217
83206: POP
// bc_type := b_lab ; 4 .. 9 :
83207: LD_ADDR_OWVAR 42
83211: PUSH
83212: LD_INT 6
83214: ST_TO_ADDR
83215: GO 83799
83217: LD_INT 4
83219: DOUBLE
83220: GREATEREQUAL
83221: IFFALSE 83229
83223: LD_INT 9
83225: DOUBLE
83226: LESSEQUAL
83227: IFTRUE 83231
83229: GO 83291
83231: POP
// begin bc_type := b_lab_half ;
83232: LD_ADDR_OWVAR 42
83236: PUSH
83237: LD_INT 7
83239: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83240: LD_ADDR_OWVAR 44
83244: PUSH
83245: LD_INT 10
83247: PUSH
83248: LD_INT 11
83250: PUSH
83251: LD_INT 12
83253: PUSH
83254: LD_INT 15
83256: PUSH
83257: LD_INT 14
83259: PUSH
83260: LD_INT 13
83262: PUSH
83263: EMPTY
83264: LIST
83265: LIST
83266: LIST
83267: LIST
83268: LIST
83269: LIST
83270: PUSH
83271: LD_VAR 0 2
83275: PUSH
83276: LD_INT 3
83278: MINUS
83279: ARRAY
83280: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
83281: LD_ADDR_OWVAR 45
83285: PUSH
83286: LD_INT 9
83288: ST_TO_ADDR
// end ; 10 .. 13 :
83289: GO 83799
83291: LD_INT 10
83293: DOUBLE
83294: GREATEREQUAL
83295: IFFALSE 83303
83297: LD_INT 13
83299: DOUBLE
83300: LESSEQUAL
83301: IFTRUE 83305
83303: GO 83382
83305: POP
// begin bc_type := b_lab_full ;
83306: LD_ADDR_OWVAR 42
83310: PUSH
83311: LD_INT 8
83313: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83314: LD_ADDR_OWVAR 44
83318: PUSH
83319: LD_INT 10
83321: PUSH
83322: LD_INT 12
83324: PUSH
83325: LD_INT 14
83327: PUSH
83328: LD_INT 13
83330: PUSH
83331: EMPTY
83332: LIST
83333: LIST
83334: LIST
83335: LIST
83336: PUSH
83337: LD_VAR 0 2
83341: PUSH
83342: LD_INT 9
83344: MINUS
83345: ARRAY
83346: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83347: LD_ADDR_OWVAR 45
83351: PUSH
83352: LD_INT 11
83354: PUSH
83355: LD_INT 15
83357: PUSH
83358: LD_INT 12
83360: PUSH
83361: LD_INT 15
83363: PUSH
83364: EMPTY
83365: LIST
83366: LIST
83367: LIST
83368: LIST
83369: PUSH
83370: LD_VAR 0 2
83374: PUSH
83375: LD_INT 9
83377: MINUS
83378: ARRAY
83379: ST_TO_ADDR
// end ; 14 :
83380: GO 83799
83382: LD_INT 14
83384: DOUBLE
83385: EQUAL
83386: IFTRUE 83390
83388: GO 83401
83390: POP
// bc_type := b_workshop ; 15 :
83391: LD_ADDR_OWVAR 42
83395: PUSH
83396: LD_INT 2
83398: ST_TO_ADDR
83399: GO 83799
83401: LD_INT 15
83403: DOUBLE
83404: EQUAL
83405: IFTRUE 83409
83407: GO 83420
83409: POP
// bc_type := b_factory ; 16 :
83410: LD_ADDR_OWVAR 42
83414: PUSH
83415: LD_INT 3
83417: ST_TO_ADDR
83418: GO 83799
83420: LD_INT 16
83422: DOUBLE
83423: EQUAL
83424: IFTRUE 83428
83426: GO 83439
83428: POP
// bc_type := b_ext_gun ; 17 :
83429: LD_ADDR_OWVAR 42
83433: PUSH
83434: LD_INT 17
83436: ST_TO_ADDR
83437: GO 83799
83439: LD_INT 17
83441: DOUBLE
83442: EQUAL
83443: IFTRUE 83447
83445: GO 83475
83447: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83448: LD_ADDR_OWVAR 42
83452: PUSH
83453: LD_INT 19
83455: PUSH
83456: LD_INT 23
83458: PUSH
83459: LD_INT 19
83461: PUSH
83462: EMPTY
83463: LIST
83464: LIST
83465: LIST
83466: PUSH
83467: LD_VAR 0 1
83471: ARRAY
83472: ST_TO_ADDR
83473: GO 83799
83475: LD_INT 18
83477: DOUBLE
83478: EQUAL
83479: IFTRUE 83483
83481: GO 83494
83483: POP
// bc_type := b_ext_radar ; 19 :
83484: LD_ADDR_OWVAR 42
83488: PUSH
83489: LD_INT 20
83491: ST_TO_ADDR
83492: GO 83799
83494: LD_INT 19
83496: DOUBLE
83497: EQUAL
83498: IFTRUE 83502
83500: GO 83513
83502: POP
// bc_type := b_ext_radio ; 20 :
83503: LD_ADDR_OWVAR 42
83507: PUSH
83508: LD_INT 22
83510: ST_TO_ADDR
83511: GO 83799
83513: LD_INT 20
83515: DOUBLE
83516: EQUAL
83517: IFTRUE 83521
83519: GO 83532
83521: POP
// bc_type := b_ext_siberium ; 21 :
83522: LD_ADDR_OWVAR 42
83526: PUSH
83527: LD_INT 21
83529: ST_TO_ADDR
83530: GO 83799
83532: LD_INT 21
83534: DOUBLE
83535: EQUAL
83536: IFTRUE 83540
83538: GO 83551
83540: POP
// bc_type := b_ext_computer ; 22 :
83541: LD_ADDR_OWVAR 42
83545: PUSH
83546: LD_INT 24
83548: ST_TO_ADDR
83549: GO 83799
83551: LD_INT 22
83553: DOUBLE
83554: EQUAL
83555: IFTRUE 83559
83557: GO 83570
83559: POP
// bc_type := b_ext_track ; 23 :
83560: LD_ADDR_OWVAR 42
83564: PUSH
83565: LD_INT 16
83567: ST_TO_ADDR
83568: GO 83799
83570: LD_INT 23
83572: DOUBLE
83573: EQUAL
83574: IFTRUE 83578
83576: GO 83589
83578: POP
// bc_type := b_ext_laser ; 24 :
83579: LD_ADDR_OWVAR 42
83583: PUSH
83584: LD_INT 25
83586: ST_TO_ADDR
83587: GO 83799
83589: LD_INT 24
83591: DOUBLE
83592: EQUAL
83593: IFTRUE 83597
83595: GO 83608
83597: POP
// bc_type := b_control_tower ; 25 :
83598: LD_ADDR_OWVAR 42
83602: PUSH
83603: LD_INT 36
83605: ST_TO_ADDR
83606: GO 83799
83608: LD_INT 25
83610: DOUBLE
83611: EQUAL
83612: IFTRUE 83616
83614: GO 83627
83616: POP
// bc_type := b_breastwork ; 26 :
83617: LD_ADDR_OWVAR 42
83621: PUSH
83622: LD_INT 31
83624: ST_TO_ADDR
83625: GO 83799
83627: LD_INT 26
83629: DOUBLE
83630: EQUAL
83631: IFTRUE 83635
83633: GO 83646
83635: POP
// bc_type := b_bunker ; 27 :
83636: LD_ADDR_OWVAR 42
83640: PUSH
83641: LD_INT 32
83643: ST_TO_ADDR
83644: GO 83799
83646: LD_INT 27
83648: DOUBLE
83649: EQUAL
83650: IFTRUE 83654
83652: GO 83665
83654: POP
// bc_type := b_turret ; 28 :
83655: LD_ADDR_OWVAR 42
83659: PUSH
83660: LD_INT 33
83662: ST_TO_ADDR
83663: GO 83799
83665: LD_INT 28
83667: DOUBLE
83668: EQUAL
83669: IFTRUE 83673
83671: GO 83684
83673: POP
// bc_type := b_armoury ; 29 :
83674: LD_ADDR_OWVAR 42
83678: PUSH
83679: LD_INT 4
83681: ST_TO_ADDR
83682: GO 83799
83684: LD_INT 29
83686: DOUBLE
83687: EQUAL
83688: IFTRUE 83692
83690: GO 83703
83692: POP
// bc_type := b_barracks ; 30 :
83693: LD_ADDR_OWVAR 42
83697: PUSH
83698: LD_INT 5
83700: ST_TO_ADDR
83701: GO 83799
83703: LD_INT 30
83705: DOUBLE
83706: EQUAL
83707: IFTRUE 83711
83709: GO 83722
83711: POP
// bc_type := b_solar_power ; 31 :
83712: LD_ADDR_OWVAR 42
83716: PUSH
83717: LD_INT 27
83719: ST_TO_ADDR
83720: GO 83799
83722: LD_INT 31
83724: DOUBLE
83725: EQUAL
83726: IFTRUE 83730
83728: GO 83741
83730: POP
// bc_type := b_oil_power ; 32 :
83731: LD_ADDR_OWVAR 42
83735: PUSH
83736: LD_INT 26
83738: ST_TO_ADDR
83739: GO 83799
83741: LD_INT 32
83743: DOUBLE
83744: EQUAL
83745: IFTRUE 83749
83747: GO 83760
83749: POP
// bc_type := b_siberite_power ; 33 :
83750: LD_ADDR_OWVAR 42
83754: PUSH
83755: LD_INT 28
83757: ST_TO_ADDR
83758: GO 83799
83760: LD_INT 33
83762: DOUBLE
83763: EQUAL
83764: IFTRUE 83768
83766: GO 83779
83768: POP
// bc_type := b_oil_mine ; 34 :
83769: LD_ADDR_OWVAR 42
83773: PUSH
83774: LD_INT 29
83776: ST_TO_ADDR
83777: GO 83799
83779: LD_INT 34
83781: DOUBLE
83782: EQUAL
83783: IFTRUE 83787
83785: GO 83798
83787: POP
// bc_type := b_siberite_mine ; end ;
83788: LD_ADDR_OWVAR 42
83792: PUSH
83793: LD_INT 30
83795: ST_TO_ADDR
83796: GO 83799
83798: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
83799: LD_ADDR_VAR 0 8
83803: PUSH
83804: LD_VAR 0 5
83808: PPUSH
83809: LD_VAR 0 6
83813: PPUSH
83814: LD_VAR 0 3
83818: PPUSH
83819: CALL_OW 47
83823: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
83824: LD_OWVAR 42
83828: PUSH
83829: LD_INT 32
83831: PUSH
83832: LD_INT 33
83834: PUSH
83835: EMPTY
83836: LIST
83837: LIST
83838: IN
83839: IFFALSE 83855
// PlaceWeaponTurret ( b , weapon ) ;
83841: LD_VAR 0 8
83845: PPUSH
83846: LD_VAR 0 4
83850: PPUSH
83851: CALL_OW 431
// end ;
83855: LD_VAR 0 7
83859: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
83860: LD_INT 0
83862: PPUSH
83863: PPUSH
83864: PPUSH
83865: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83866: LD_ADDR_VAR 0 4
83870: PUSH
83871: LD_INT 22
83873: PUSH
83874: LD_OWVAR 2
83878: PUSH
83879: EMPTY
83880: LIST
83881: LIST
83882: PUSH
83883: LD_INT 2
83885: PUSH
83886: LD_INT 30
83888: PUSH
83889: LD_INT 0
83891: PUSH
83892: EMPTY
83893: LIST
83894: LIST
83895: PUSH
83896: LD_INT 30
83898: PUSH
83899: LD_INT 1
83901: PUSH
83902: EMPTY
83903: LIST
83904: LIST
83905: PUSH
83906: EMPTY
83907: LIST
83908: LIST
83909: LIST
83910: PUSH
83911: EMPTY
83912: LIST
83913: LIST
83914: PPUSH
83915: CALL_OW 69
83919: ST_TO_ADDR
// if not tmp then
83920: LD_VAR 0 4
83924: NOT
83925: IFFALSE 83929
// exit ;
83927: GO 83988
// for i in tmp do
83929: LD_ADDR_VAR 0 2
83933: PUSH
83934: LD_VAR 0 4
83938: PUSH
83939: FOR_IN
83940: IFFALSE 83986
// for j = 1 to 3 do
83942: LD_ADDR_VAR 0 3
83946: PUSH
83947: DOUBLE
83948: LD_INT 1
83950: DEC
83951: ST_TO_ADDR
83952: LD_INT 3
83954: PUSH
83955: FOR_TO
83956: IFFALSE 83982
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
83958: LD_VAR 0 2
83962: PPUSH
83963: CALL_OW 274
83967: PPUSH
83968: LD_VAR 0 3
83972: PPUSH
83973: LD_INT 99999
83975: PPUSH
83976: CALL_OW 277
83980: GO 83955
83982: POP
83983: POP
83984: GO 83939
83986: POP
83987: POP
// end ;
83988: LD_VAR 0 1
83992: RET
// export function hHackSetLevel10 ; var i , j ; begin
83993: LD_INT 0
83995: PPUSH
83996: PPUSH
83997: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
83998: LD_ADDR_VAR 0 2
84002: PUSH
84003: LD_INT 21
84005: PUSH
84006: LD_INT 1
84008: PUSH
84009: EMPTY
84010: LIST
84011: LIST
84012: PPUSH
84013: CALL_OW 69
84017: PUSH
84018: FOR_IN
84019: IFFALSE 84071
// if IsSelected ( i ) then
84021: LD_VAR 0 2
84025: PPUSH
84026: CALL_OW 306
84030: IFFALSE 84069
// begin for j := 1 to 4 do
84032: LD_ADDR_VAR 0 3
84036: PUSH
84037: DOUBLE
84038: LD_INT 1
84040: DEC
84041: ST_TO_ADDR
84042: LD_INT 4
84044: PUSH
84045: FOR_TO
84046: IFFALSE 84067
// SetSkill ( i , j , 10 ) ;
84048: LD_VAR 0 2
84052: PPUSH
84053: LD_VAR 0 3
84057: PPUSH
84058: LD_INT 10
84060: PPUSH
84061: CALL_OW 237
84065: GO 84045
84067: POP
84068: POP
// end ;
84069: GO 84018
84071: POP
84072: POP
// end ;
84073: LD_VAR 0 1
84077: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84078: LD_INT 0
84080: PPUSH
84081: PPUSH
84082: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84083: LD_ADDR_VAR 0 2
84087: PUSH
84088: LD_INT 22
84090: PUSH
84091: LD_OWVAR 2
84095: PUSH
84096: EMPTY
84097: LIST
84098: LIST
84099: PUSH
84100: LD_INT 21
84102: PUSH
84103: LD_INT 1
84105: PUSH
84106: EMPTY
84107: LIST
84108: LIST
84109: PUSH
84110: EMPTY
84111: LIST
84112: LIST
84113: PPUSH
84114: CALL_OW 69
84118: PUSH
84119: FOR_IN
84120: IFFALSE 84161
// begin for j := 1 to 4 do
84122: LD_ADDR_VAR 0 3
84126: PUSH
84127: DOUBLE
84128: LD_INT 1
84130: DEC
84131: ST_TO_ADDR
84132: LD_INT 4
84134: PUSH
84135: FOR_TO
84136: IFFALSE 84157
// SetSkill ( i , j , 10 ) ;
84138: LD_VAR 0 2
84142: PPUSH
84143: LD_VAR 0 3
84147: PPUSH
84148: LD_INT 10
84150: PPUSH
84151: CALL_OW 237
84155: GO 84135
84157: POP
84158: POP
// end ;
84159: GO 84119
84161: POP
84162: POP
// end ;
84163: LD_VAR 0 1
84167: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84168: LD_INT 0
84170: PPUSH
// uc_side := your_side ;
84171: LD_ADDR_OWVAR 20
84175: PUSH
84176: LD_OWVAR 2
84180: ST_TO_ADDR
// uc_nation := nation ;
84181: LD_ADDR_OWVAR 21
84185: PUSH
84186: LD_VAR 0 1
84190: ST_TO_ADDR
// InitHc ;
84191: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84195: LD_INT 0
84197: PPUSH
84198: LD_VAR 0 2
84202: PPUSH
84203: LD_VAR 0 3
84207: PPUSH
84208: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84212: LD_VAR 0 4
84216: PPUSH
84217: LD_VAR 0 5
84221: PPUSH
84222: CALL_OW 428
84226: PUSH
84227: LD_INT 0
84229: EQUAL
84230: IFFALSE 84254
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84232: CALL_OW 44
84236: PPUSH
84237: LD_VAR 0 4
84241: PPUSH
84242: LD_VAR 0 5
84246: PPUSH
84247: LD_INT 1
84249: PPUSH
84250: CALL_OW 48
// end ;
84254: LD_VAR 0 6
84258: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84259: LD_INT 0
84261: PPUSH
84262: PPUSH
// uc_side := your_side ;
84263: LD_ADDR_OWVAR 20
84267: PUSH
84268: LD_OWVAR 2
84272: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84273: LD_VAR 0 1
84277: PUSH
84278: LD_INT 1
84280: PUSH
84281: LD_INT 2
84283: PUSH
84284: LD_INT 3
84286: PUSH
84287: LD_INT 4
84289: PUSH
84290: LD_INT 5
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: LIST
84297: LIST
84298: LIST
84299: IN
84300: IFFALSE 84312
// uc_nation := nation_american else
84302: LD_ADDR_OWVAR 21
84306: PUSH
84307: LD_INT 1
84309: ST_TO_ADDR
84310: GO 84355
// if chassis in [ 11 , 12 , 13 , 14 ] then
84312: LD_VAR 0 1
84316: PUSH
84317: LD_INT 11
84319: PUSH
84320: LD_INT 12
84322: PUSH
84323: LD_INT 13
84325: PUSH
84326: LD_INT 14
84328: PUSH
84329: EMPTY
84330: LIST
84331: LIST
84332: LIST
84333: LIST
84334: IN
84335: IFFALSE 84347
// uc_nation := nation_arabian else
84337: LD_ADDR_OWVAR 21
84341: PUSH
84342: LD_INT 2
84344: ST_TO_ADDR
84345: GO 84355
// uc_nation := nation_russian ;
84347: LD_ADDR_OWVAR 21
84351: PUSH
84352: LD_INT 3
84354: ST_TO_ADDR
// vc_chassis := chassis ;
84355: LD_ADDR_OWVAR 37
84359: PUSH
84360: LD_VAR 0 1
84364: ST_TO_ADDR
// vc_engine := engine ;
84365: LD_ADDR_OWVAR 39
84369: PUSH
84370: LD_VAR 0 2
84374: ST_TO_ADDR
// vc_control := control ;
84375: LD_ADDR_OWVAR 38
84379: PUSH
84380: LD_VAR 0 3
84384: ST_TO_ADDR
// vc_weapon := weapon ;
84385: LD_ADDR_OWVAR 40
84389: PUSH
84390: LD_VAR 0 4
84394: ST_TO_ADDR
// un := CreateVehicle ;
84395: LD_ADDR_VAR 0 8
84399: PUSH
84400: CALL_OW 45
84404: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84405: LD_VAR 0 8
84409: PPUSH
84410: LD_INT 0
84412: PPUSH
84413: LD_INT 5
84415: PPUSH
84416: CALL_OW 12
84420: PPUSH
84421: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84425: LD_VAR 0 8
84429: PPUSH
84430: LD_VAR 0 5
84434: PPUSH
84435: LD_VAR 0 6
84439: PPUSH
84440: LD_INT 1
84442: PPUSH
84443: CALL_OW 48
// end ;
84447: LD_VAR 0 7
84451: RET
// export hInvincible ; every 1 do
84452: GO 84454
84454: DISABLE
// hInvincible := [ ] ;
84455: LD_ADDR_EXP 131
84459: PUSH
84460: EMPTY
84461: ST_TO_ADDR
84462: END
// every 10 do var i ;
84463: GO 84465
84465: DISABLE
84466: LD_INT 0
84468: PPUSH
// begin enable ;
84469: ENABLE
// if not hInvincible then
84470: LD_EXP 131
84474: NOT
84475: IFFALSE 84479
// exit ;
84477: GO 84523
// for i in hInvincible do
84479: LD_ADDR_VAR 0 1
84483: PUSH
84484: LD_EXP 131
84488: PUSH
84489: FOR_IN
84490: IFFALSE 84521
// if GetLives ( i ) < 1000 then
84492: LD_VAR 0 1
84496: PPUSH
84497: CALL_OW 256
84501: PUSH
84502: LD_INT 1000
84504: LESS
84505: IFFALSE 84519
// SetLives ( i , 1000 ) ;
84507: LD_VAR 0 1
84511: PPUSH
84512: LD_INT 1000
84514: PPUSH
84515: CALL_OW 234
84519: GO 84489
84521: POP
84522: POP
// end ;
84523: PPOPN 1
84525: END
// export function hHackInvincible ; var i ; begin
84526: LD_INT 0
84528: PPUSH
84529: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84530: LD_ADDR_VAR 0 2
84534: PUSH
84535: LD_INT 2
84537: PUSH
84538: LD_INT 21
84540: PUSH
84541: LD_INT 1
84543: PUSH
84544: EMPTY
84545: LIST
84546: LIST
84547: PUSH
84548: LD_INT 21
84550: PUSH
84551: LD_INT 2
84553: PUSH
84554: EMPTY
84555: LIST
84556: LIST
84557: PUSH
84558: EMPTY
84559: LIST
84560: LIST
84561: LIST
84562: PPUSH
84563: CALL_OW 69
84567: PUSH
84568: FOR_IN
84569: IFFALSE 84630
// if IsSelected ( i ) then
84571: LD_VAR 0 2
84575: PPUSH
84576: CALL_OW 306
84580: IFFALSE 84628
// begin if i in hInvincible then
84582: LD_VAR 0 2
84586: PUSH
84587: LD_EXP 131
84591: IN
84592: IFFALSE 84612
// hInvincible := hInvincible diff i else
84594: LD_ADDR_EXP 131
84598: PUSH
84599: LD_EXP 131
84603: PUSH
84604: LD_VAR 0 2
84608: DIFF
84609: ST_TO_ADDR
84610: GO 84628
// hInvincible := hInvincible union i ;
84612: LD_ADDR_EXP 131
84616: PUSH
84617: LD_EXP 131
84621: PUSH
84622: LD_VAR 0 2
84626: UNION
84627: ST_TO_ADDR
// end ;
84628: GO 84568
84630: POP
84631: POP
// end ;
84632: LD_VAR 0 1
84636: RET
// export function hHackInvisible ; var i , j ; begin
84637: LD_INT 0
84639: PPUSH
84640: PPUSH
84641: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84642: LD_ADDR_VAR 0 2
84646: PUSH
84647: LD_INT 21
84649: PUSH
84650: LD_INT 1
84652: PUSH
84653: EMPTY
84654: LIST
84655: LIST
84656: PPUSH
84657: CALL_OW 69
84661: PUSH
84662: FOR_IN
84663: IFFALSE 84687
// if IsSelected ( i ) then
84665: LD_VAR 0 2
84669: PPUSH
84670: CALL_OW 306
84674: IFFALSE 84685
// ComForceInvisible ( i ) ;
84676: LD_VAR 0 2
84680: PPUSH
84681: CALL_OW 496
84685: GO 84662
84687: POP
84688: POP
// end ;
84689: LD_VAR 0 1
84693: RET
// export function hHackChangeYourSide ; begin
84694: LD_INT 0
84696: PPUSH
// if your_side = 8 then
84697: LD_OWVAR 2
84701: PUSH
84702: LD_INT 8
84704: EQUAL
84705: IFFALSE 84717
// your_side := 0 else
84707: LD_ADDR_OWVAR 2
84711: PUSH
84712: LD_INT 0
84714: ST_TO_ADDR
84715: GO 84731
// your_side := your_side + 1 ;
84717: LD_ADDR_OWVAR 2
84721: PUSH
84722: LD_OWVAR 2
84726: PUSH
84727: LD_INT 1
84729: PLUS
84730: ST_TO_ADDR
// end ;
84731: LD_VAR 0 1
84735: RET
// export function hHackChangeUnitSide ; var i , j ; begin
84736: LD_INT 0
84738: PPUSH
84739: PPUSH
84740: PPUSH
// for i in all_units do
84741: LD_ADDR_VAR 0 2
84745: PUSH
84746: LD_OWVAR 3
84750: PUSH
84751: FOR_IN
84752: IFFALSE 84830
// if IsSelected ( i ) then
84754: LD_VAR 0 2
84758: PPUSH
84759: CALL_OW 306
84763: IFFALSE 84828
// begin j := GetSide ( i ) ;
84765: LD_ADDR_VAR 0 3
84769: PUSH
84770: LD_VAR 0 2
84774: PPUSH
84775: CALL_OW 255
84779: ST_TO_ADDR
// if j = 8 then
84780: LD_VAR 0 3
84784: PUSH
84785: LD_INT 8
84787: EQUAL
84788: IFFALSE 84800
// j := 0 else
84790: LD_ADDR_VAR 0 3
84794: PUSH
84795: LD_INT 0
84797: ST_TO_ADDR
84798: GO 84814
// j := j + 1 ;
84800: LD_ADDR_VAR 0 3
84804: PUSH
84805: LD_VAR 0 3
84809: PUSH
84810: LD_INT 1
84812: PLUS
84813: ST_TO_ADDR
// SetSide ( i , j ) ;
84814: LD_VAR 0 2
84818: PPUSH
84819: LD_VAR 0 3
84823: PPUSH
84824: CALL_OW 235
// end ;
84828: GO 84751
84830: POP
84831: POP
// end ;
84832: LD_VAR 0 1
84836: RET
// export function hHackFog ; begin
84837: LD_INT 0
84839: PPUSH
// FogOff ( true ) ;
84840: LD_INT 1
84842: PPUSH
84843: CALL_OW 344
// end ;
84847: LD_VAR 0 1
84851: RET
// export function hHackTeleport ( unit , x , y ) ; begin
84852: LD_INT 0
84854: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
84855: LD_VAR 0 1
84859: PPUSH
84860: LD_VAR 0 2
84864: PPUSH
84865: LD_VAR 0 3
84869: PPUSH
84870: LD_INT 1
84872: PPUSH
84873: LD_INT 1
84875: PPUSH
84876: CALL_OW 483
// CenterOnXY ( x , y ) ;
84880: LD_VAR 0 2
84884: PPUSH
84885: LD_VAR 0 3
84889: PPUSH
84890: CALL_OW 84
// end ;
84894: LD_VAR 0 4
84898: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
84899: LD_INT 0
84901: PPUSH
84902: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
84903: LD_VAR 0 1
84907: NOT
84908: PUSH
84909: LD_VAR 0 2
84913: PPUSH
84914: LD_VAR 0 3
84918: PPUSH
84919: CALL_OW 488
84923: NOT
84924: OR
84925: PUSH
84926: LD_VAR 0 1
84930: PPUSH
84931: CALL_OW 266
84935: PUSH
84936: LD_INT 3
84938: NONEQUAL
84939: PUSH
84940: LD_VAR 0 1
84944: PPUSH
84945: CALL_OW 247
84949: PUSH
84950: LD_INT 1
84952: EQUAL
84953: NOT
84954: AND
84955: OR
84956: IFFALSE 84960
// exit ;
84958: GO 85109
// if GetType ( factory ) = unit_human then
84960: LD_VAR 0 1
84964: PPUSH
84965: CALL_OW 247
84969: PUSH
84970: LD_INT 1
84972: EQUAL
84973: IFFALSE 84990
// factory := IsInUnit ( factory ) ;
84975: LD_ADDR_VAR 0 1
84979: PUSH
84980: LD_VAR 0 1
84984: PPUSH
84985: CALL_OW 310
84989: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
84990: LD_VAR 0 1
84994: PPUSH
84995: CALL_OW 266
84999: PUSH
85000: LD_INT 3
85002: NONEQUAL
85003: IFFALSE 85007
// exit ;
85005: GO 85109
// if HexInfo ( x , y ) = factory then
85007: LD_VAR 0 2
85011: PPUSH
85012: LD_VAR 0 3
85016: PPUSH
85017: CALL_OW 428
85021: PUSH
85022: LD_VAR 0 1
85026: EQUAL
85027: IFFALSE 85054
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85029: LD_ADDR_EXP 132
85033: PUSH
85034: LD_EXP 132
85038: PPUSH
85039: LD_VAR 0 1
85043: PPUSH
85044: LD_INT 0
85046: PPUSH
85047: CALL_OW 1
85051: ST_TO_ADDR
85052: GO 85105
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
85054: LD_ADDR_EXP 132
85058: PUSH
85059: LD_EXP 132
85063: PPUSH
85064: LD_VAR 0 1
85068: PPUSH
85069: LD_VAR 0 1
85073: PPUSH
85074: CALL_OW 255
85078: PUSH
85079: LD_VAR 0 1
85083: PUSH
85084: LD_VAR 0 2
85088: PUSH
85089: LD_VAR 0 3
85093: PUSH
85094: EMPTY
85095: LIST
85096: LIST
85097: LIST
85098: LIST
85099: PPUSH
85100: CALL_OW 1
85104: ST_TO_ADDR
// UpdateFactoryWaypoints ;
85105: CALL 85114 0 0
// end ;
85109: LD_VAR 0 4
85113: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85114: LD_INT 0
85116: PPUSH
85117: PPUSH
85118: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85119: LD_STRING resetFactoryWaypoint();
85121: PPUSH
85122: CALL_OW 559
// if factoryWaypoints then
85126: LD_EXP 132
85130: IFFALSE 85256
// begin list := PrepareArray ( factoryWaypoints ) ;
85132: LD_ADDR_VAR 0 3
85136: PUSH
85137: LD_EXP 132
85141: PPUSH
85142: CALL 69944 0 1
85146: ST_TO_ADDR
// for i := 1 to list do
85147: LD_ADDR_VAR 0 2
85151: PUSH
85152: DOUBLE
85153: LD_INT 1
85155: DEC
85156: ST_TO_ADDR
85157: LD_VAR 0 3
85161: PUSH
85162: FOR_TO
85163: IFFALSE 85254
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85165: LD_STRING setFactoryWaypointXY(
85167: PUSH
85168: LD_VAR 0 3
85172: PUSH
85173: LD_VAR 0 2
85177: ARRAY
85178: PUSH
85179: LD_INT 1
85181: ARRAY
85182: STR
85183: PUSH
85184: LD_STRING ,
85186: STR
85187: PUSH
85188: LD_VAR 0 3
85192: PUSH
85193: LD_VAR 0 2
85197: ARRAY
85198: PUSH
85199: LD_INT 2
85201: ARRAY
85202: STR
85203: PUSH
85204: LD_STRING ,
85206: STR
85207: PUSH
85208: LD_VAR 0 3
85212: PUSH
85213: LD_VAR 0 2
85217: ARRAY
85218: PUSH
85219: LD_INT 3
85221: ARRAY
85222: STR
85223: PUSH
85224: LD_STRING ,
85226: STR
85227: PUSH
85228: LD_VAR 0 3
85232: PUSH
85233: LD_VAR 0 2
85237: ARRAY
85238: PUSH
85239: LD_INT 4
85241: ARRAY
85242: STR
85243: PUSH
85244: LD_STRING )
85246: STR
85247: PPUSH
85248: CALL_OW 559
85252: GO 85162
85254: POP
85255: POP
// end ; end ;
85256: LD_VAR 0 1
85260: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85261: LD_INT 0
85263: PPUSH
// if HexInfo ( x , y ) = warehouse then
85264: LD_VAR 0 2
85268: PPUSH
85269: LD_VAR 0 3
85273: PPUSH
85274: CALL_OW 428
85278: PUSH
85279: LD_VAR 0 1
85283: EQUAL
85284: IFFALSE 85311
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85286: LD_ADDR_EXP 133
85290: PUSH
85291: LD_EXP 133
85295: PPUSH
85296: LD_VAR 0 1
85300: PPUSH
85301: LD_INT 0
85303: PPUSH
85304: CALL_OW 1
85308: ST_TO_ADDR
85309: GO 85362
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85311: LD_ADDR_EXP 133
85315: PUSH
85316: LD_EXP 133
85320: PPUSH
85321: LD_VAR 0 1
85325: PPUSH
85326: LD_VAR 0 1
85330: PPUSH
85331: CALL_OW 255
85335: PUSH
85336: LD_VAR 0 1
85340: PUSH
85341: LD_VAR 0 2
85345: PUSH
85346: LD_VAR 0 3
85350: PUSH
85351: EMPTY
85352: LIST
85353: LIST
85354: LIST
85355: LIST
85356: PPUSH
85357: CALL_OW 1
85361: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85362: CALL 85371 0 0
// end ;
85366: LD_VAR 0 4
85370: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85371: LD_INT 0
85373: PPUSH
85374: PPUSH
85375: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85376: LD_STRING resetWarehouseGatheringPoints();
85378: PPUSH
85379: CALL_OW 559
// if warehouseGatheringPoints then
85383: LD_EXP 133
85387: IFFALSE 85513
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85389: LD_ADDR_VAR 0 3
85393: PUSH
85394: LD_EXP 133
85398: PPUSH
85399: CALL 69944 0 1
85403: ST_TO_ADDR
// for i := 1 to list do
85404: LD_ADDR_VAR 0 2
85408: PUSH
85409: DOUBLE
85410: LD_INT 1
85412: DEC
85413: ST_TO_ADDR
85414: LD_VAR 0 3
85418: PUSH
85419: FOR_TO
85420: IFFALSE 85511
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85422: LD_STRING setWarehouseGatheringPointXY(
85424: PUSH
85425: LD_VAR 0 3
85429: PUSH
85430: LD_VAR 0 2
85434: ARRAY
85435: PUSH
85436: LD_INT 1
85438: ARRAY
85439: STR
85440: PUSH
85441: LD_STRING ,
85443: STR
85444: PUSH
85445: LD_VAR 0 3
85449: PUSH
85450: LD_VAR 0 2
85454: ARRAY
85455: PUSH
85456: LD_INT 2
85458: ARRAY
85459: STR
85460: PUSH
85461: LD_STRING ,
85463: STR
85464: PUSH
85465: LD_VAR 0 3
85469: PUSH
85470: LD_VAR 0 2
85474: ARRAY
85475: PUSH
85476: LD_INT 3
85478: ARRAY
85479: STR
85480: PUSH
85481: LD_STRING ,
85483: STR
85484: PUSH
85485: LD_VAR 0 3
85489: PUSH
85490: LD_VAR 0 2
85494: ARRAY
85495: PUSH
85496: LD_INT 4
85498: ARRAY
85499: STR
85500: PUSH
85501: LD_STRING )
85503: STR
85504: PPUSH
85505: CALL_OW 559
85509: GO 85419
85511: POP
85512: POP
// end ; end ;
85513: LD_VAR 0 1
85517: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85518: LD_EXP 133
85522: IFFALSE 86207
85524: GO 85526
85526: DISABLE
85527: LD_INT 0
85529: PPUSH
85530: PPUSH
85531: PPUSH
85532: PPUSH
85533: PPUSH
85534: PPUSH
85535: PPUSH
85536: PPUSH
85537: PPUSH
// begin enable ;
85538: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85539: LD_ADDR_VAR 0 3
85543: PUSH
85544: LD_EXP 133
85548: PPUSH
85549: CALL 69944 0 1
85553: ST_TO_ADDR
// if not list then
85554: LD_VAR 0 3
85558: NOT
85559: IFFALSE 85563
// exit ;
85561: GO 86207
// for i := 1 to list do
85563: LD_ADDR_VAR 0 1
85567: PUSH
85568: DOUBLE
85569: LD_INT 1
85571: DEC
85572: ST_TO_ADDR
85573: LD_VAR 0 3
85577: PUSH
85578: FOR_TO
85579: IFFALSE 86205
// begin depot := list [ i ] [ 2 ] ;
85581: LD_ADDR_VAR 0 8
85585: PUSH
85586: LD_VAR 0 3
85590: PUSH
85591: LD_VAR 0 1
85595: ARRAY
85596: PUSH
85597: LD_INT 2
85599: ARRAY
85600: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
85601: LD_ADDR_VAR 0 5
85605: PUSH
85606: LD_VAR 0 3
85610: PUSH
85611: LD_VAR 0 1
85615: ARRAY
85616: PUSH
85617: LD_INT 1
85619: ARRAY
85620: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
85621: LD_VAR 0 8
85625: PPUSH
85626: CALL_OW 301
85630: PUSH
85631: LD_VAR 0 5
85635: PUSH
85636: LD_VAR 0 8
85640: PPUSH
85641: CALL_OW 255
85645: NONEQUAL
85646: OR
85647: IFFALSE 85676
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
85649: LD_ADDR_EXP 133
85653: PUSH
85654: LD_EXP 133
85658: PPUSH
85659: LD_VAR 0 8
85663: PPUSH
85664: LD_INT 0
85666: PPUSH
85667: CALL_OW 1
85671: ST_TO_ADDR
// exit ;
85672: POP
85673: POP
85674: GO 86207
// end ; x := list [ i ] [ 3 ] ;
85676: LD_ADDR_VAR 0 6
85680: PUSH
85681: LD_VAR 0 3
85685: PUSH
85686: LD_VAR 0 1
85690: ARRAY
85691: PUSH
85692: LD_INT 3
85694: ARRAY
85695: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
85696: LD_ADDR_VAR 0 7
85700: PUSH
85701: LD_VAR 0 3
85705: PUSH
85706: LD_VAR 0 1
85710: ARRAY
85711: PUSH
85712: LD_INT 4
85714: ARRAY
85715: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
85716: LD_ADDR_VAR 0 9
85720: PUSH
85721: LD_VAR 0 6
85725: PPUSH
85726: LD_VAR 0 7
85730: PPUSH
85731: LD_INT 16
85733: PPUSH
85734: CALL 68532 0 3
85738: ST_TO_ADDR
// if not cratesNearbyPoint then
85739: LD_VAR 0 9
85743: NOT
85744: IFFALSE 85750
// exit ;
85746: POP
85747: POP
85748: GO 86207
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
85750: LD_ADDR_VAR 0 4
85754: PUSH
85755: LD_INT 22
85757: PUSH
85758: LD_VAR 0 5
85762: PUSH
85763: EMPTY
85764: LIST
85765: LIST
85766: PUSH
85767: LD_INT 3
85769: PUSH
85770: LD_INT 60
85772: PUSH
85773: EMPTY
85774: LIST
85775: PUSH
85776: EMPTY
85777: LIST
85778: LIST
85779: PUSH
85780: LD_INT 91
85782: PUSH
85783: LD_VAR 0 8
85787: PUSH
85788: LD_INT 6
85790: PUSH
85791: EMPTY
85792: LIST
85793: LIST
85794: LIST
85795: PUSH
85796: LD_INT 2
85798: PUSH
85799: LD_INT 25
85801: PUSH
85802: LD_INT 2
85804: PUSH
85805: EMPTY
85806: LIST
85807: LIST
85808: PUSH
85809: LD_INT 25
85811: PUSH
85812: LD_INT 16
85814: PUSH
85815: EMPTY
85816: LIST
85817: LIST
85818: PUSH
85819: EMPTY
85820: LIST
85821: LIST
85822: LIST
85823: PUSH
85824: EMPTY
85825: LIST
85826: LIST
85827: LIST
85828: LIST
85829: PPUSH
85830: CALL_OW 69
85834: PUSH
85835: LD_VAR 0 8
85839: PPUSH
85840: CALL_OW 313
85844: PPUSH
85845: LD_INT 3
85847: PUSH
85848: LD_INT 60
85850: PUSH
85851: EMPTY
85852: LIST
85853: PUSH
85854: EMPTY
85855: LIST
85856: LIST
85857: PUSH
85858: LD_INT 2
85860: PUSH
85861: LD_INT 25
85863: PUSH
85864: LD_INT 2
85866: PUSH
85867: EMPTY
85868: LIST
85869: LIST
85870: PUSH
85871: LD_INT 25
85873: PUSH
85874: LD_INT 16
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PUSH
85881: EMPTY
85882: LIST
85883: LIST
85884: LIST
85885: PUSH
85886: EMPTY
85887: LIST
85888: LIST
85889: PPUSH
85890: CALL_OW 72
85894: UNION
85895: ST_TO_ADDR
// if tmp then
85896: LD_VAR 0 4
85900: IFFALSE 85980
// begin tmp := ShrinkArray ( tmp , 3 ) ;
85902: LD_ADDR_VAR 0 4
85906: PUSH
85907: LD_VAR 0 4
85911: PPUSH
85912: LD_INT 3
85914: PPUSH
85915: CALL 66501 0 2
85919: ST_TO_ADDR
// for j in tmp do
85920: LD_ADDR_VAR 0 2
85924: PUSH
85925: LD_VAR 0 4
85929: PUSH
85930: FOR_IN
85931: IFFALSE 85974
// begin if IsInUnit ( j ) then
85933: LD_VAR 0 2
85937: PPUSH
85938: CALL_OW 310
85942: IFFALSE 85953
// ComExit ( j ) ;
85944: LD_VAR 0 2
85948: PPUSH
85949: CALL 66584 0 1
// AddComCollect ( j , x , y ) ;
85953: LD_VAR 0 2
85957: PPUSH
85958: LD_VAR 0 6
85962: PPUSH
85963: LD_VAR 0 7
85967: PPUSH
85968: CALL_OW 177
// end ;
85972: GO 85930
85974: POP
85975: POP
// exit ;
85976: POP
85977: POP
85978: GO 86207
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
85980: LD_ADDR_VAR 0 4
85984: PUSH
85985: LD_INT 22
85987: PUSH
85988: LD_VAR 0 5
85992: PUSH
85993: EMPTY
85994: LIST
85995: LIST
85996: PUSH
85997: LD_INT 91
85999: PUSH
86000: LD_VAR 0 8
86004: PUSH
86005: LD_INT 8
86007: PUSH
86008: EMPTY
86009: LIST
86010: LIST
86011: LIST
86012: PUSH
86013: LD_INT 2
86015: PUSH
86016: LD_INT 34
86018: PUSH
86019: LD_INT 12
86021: PUSH
86022: EMPTY
86023: LIST
86024: LIST
86025: PUSH
86026: LD_INT 34
86028: PUSH
86029: LD_INT 51
86031: PUSH
86032: EMPTY
86033: LIST
86034: LIST
86035: PUSH
86036: LD_INT 34
86038: PUSH
86039: LD_INT 32
86041: PUSH
86042: EMPTY
86043: LIST
86044: LIST
86045: PUSH
86046: LD_INT 34
86048: PUSH
86049: LD_INT 89
86051: PUSH
86052: EMPTY
86053: LIST
86054: LIST
86055: PUSH
86056: EMPTY
86057: LIST
86058: LIST
86059: LIST
86060: LIST
86061: LIST
86062: PUSH
86063: EMPTY
86064: LIST
86065: LIST
86066: LIST
86067: PPUSH
86068: CALL_OW 69
86072: ST_TO_ADDR
// if tmp then
86073: LD_VAR 0 4
86077: IFFALSE 86203
// begin for j in tmp do
86079: LD_ADDR_VAR 0 2
86083: PUSH
86084: LD_VAR 0 4
86088: PUSH
86089: FOR_IN
86090: IFFALSE 86201
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
86092: LD_VAR 0 2
86096: PPUSH
86097: CALL_OW 262
86101: PUSH
86102: LD_INT 3
86104: EQUAL
86105: PUSH
86106: LD_VAR 0 2
86110: PPUSH
86111: CALL_OW 261
86115: PUSH
86116: LD_INT 20
86118: GREATER
86119: OR
86120: PUSH
86121: LD_VAR 0 2
86125: PPUSH
86126: CALL_OW 314
86130: NOT
86131: AND
86132: PUSH
86133: LD_VAR 0 2
86137: PPUSH
86138: CALL_OW 263
86142: PUSH
86143: LD_INT 1
86145: NONEQUAL
86146: PUSH
86147: LD_VAR 0 2
86151: PPUSH
86152: CALL_OW 311
86156: OR
86157: AND
86158: IFFALSE 86199
// begin ComCollect ( j , x , y ) ;
86160: LD_VAR 0 2
86164: PPUSH
86165: LD_VAR 0 6
86169: PPUSH
86170: LD_VAR 0 7
86174: PPUSH
86175: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86179: LD_VAR 0 2
86183: PPUSH
86184: LD_VAR 0 8
86188: PPUSH
86189: CALL_OW 172
// exit ;
86193: POP
86194: POP
86195: POP
86196: POP
86197: GO 86207
// end ;
86199: GO 86089
86201: POP
86202: POP
// end ; end ;
86203: GO 85578
86205: POP
86206: POP
// end ; end_of_file
86207: PPOPN 9
86209: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86210: LD_VAR 0 1
86214: PUSH
86215: LD_INT 200
86217: DOUBLE
86218: GREATEREQUAL
86219: IFFALSE 86227
86221: LD_INT 299
86223: DOUBLE
86224: LESSEQUAL
86225: IFTRUE 86229
86227: GO 86261
86229: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86230: LD_VAR 0 1
86234: PPUSH
86235: LD_VAR 0 2
86239: PPUSH
86240: LD_VAR 0 3
86244: PPUSH
86245: LD_VAR 0 4
86249: PPUSH
86250: LD_VAR 0 5
86254: PPUSH
86255: CALL 86749 0 5
86259: GO 86338
86261: LD_INT 300
86263: DOUBLE
86264: GREATEREQUAL
86265: IFFALSE 86273
86267: LD_INT 399
86269: DOUBLE
86270: LESSEQUAL
86271: IFTRUE 86275
86273: GO 86337
86275: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86276: LD_VAR 0 1
86280: PPUSH
86281: LD_VAR 0 2
86285: PPUSH
86286: LD_VAR 0 3
86290: PPUSH
86291: LD_VAR 0 4
86295: PPUSH
86296: LD_VAR 0 5
86300: PPUSH
86301: LD_VAR 0 6
86305: PPUSH
86306: LD_VAR 0 7
86310: PPUSH
86311: LD_VAR 0 8
86315: PPUSH
86316: LD_VAR 0 9
86320: PPUSH
86321: LD_VAR 0 10
86325: PPUSH
86326: LD_VAR 0 11
86330: PPUSH
86331: CALL 82911 0 11
86335: GO 86338
86337: POP
// end ;
86338: PPOPN 11
86340: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86341: LD_VAR 0 1
86345: PPUSH
86346: LD_VAR 0 2
86350: PPUSH
86351: LD_VAR 0 3
86355: PPUSH
86356: LD_VAR 0 4
86360: PPUSH
86361: LD_VAR 0 5
86365: PPUSH
86366: CALL 86485 0 5
// end ; end_of_file
86370: PPOPN 5
86372: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86373: LD_INT 0
86375: PPUSH
86376: PPUSH
86377: PPUSH
86378: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86379: LD_VAR 0 1
86383: PPUSH
86384: CALL_OW 264
86388: PUSH
86389: LD_INT 91
86391: EQUAL
86392: IFFALSE 86464
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86394: LD_INT 68
86396: PPUSH
86397: LD_VAR 0 1
86401: PPUSH
86402: CALL_OW 255
86406: PPUSH
86407: CALL_OW 321
86411: PUSH
86412: LD_INT 2
86414: EQUAL
86415: IFFALSE 86427
// eff := 70 else
86417: LD_ADDR_VAR 0 4
86421: PUSH
86422: LD_INT 70
86424: ST_TO_ADDR
86425: GO 86435
// eff := 30 ;
86427: LD_ADDR_VAR 0 4
86431: PUSH
86432: LD_INT 30
86434: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86435: LD_VAR 0 1
86439: PPUSH
86440: CALL_OW 250
86444: PPUSH
86445: LD_VAR 0 1
86449: PPUSH
86450: CALL_OW 251
86454: PPUSH
86455: LD_VAR 0 4
86459: PPUSH
86460: CALL_OW 495
// end ; end ;
86464: LD_VAR 0 2
86468: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86469: LD_INT 0
86471: PPUSH
// end ;
86472: LD_VAR 0 4
86476: RET
// export function SOS_Command ( cmd ) ; begin
86477: LD_INT 0
86479: PPUSH
// end ;
86480: LD_VAR 0 2
86484: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86485: LD_INT 0
86487: PPUSH
// end ;
86488: LD_VAR 0 6
86492: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86493: LD_INT 0
86495: PPUSH
86496: PPUSH
// if not vehicle or not factory then
86497: LD_VAR 0 1
86501: NOT
86502: PUSH
86503: LD_VAR 0 2
86507: NOT
86508: OR
86509: IFFALSE 86513
// exit ;
86511: GO 86744
// if factoryWaypoints >= factory then
86513: LD_EXP 132
86517: PUSH
86518: LD_VAR 0 2
86522: GREATEREQUAL
86523: IFFALSE 86744
// if factoryWaypoints [ factory ] then
86525: LD_EXP 132
86529: PUSH
86530: LD_VAR 0 2
86534: ARRAY
86535: IFFALSE 86744
// begin if GetControl ( vehicle ) = control_manual then
86537: LD_VAR 0 1
86541: PPUSH
86542: CALL_OW 263
86546: PUSH
86547: LD_INT 1
86549: EQUAL
86550: IFFALSE 86631
// begin driver := IsDrivenBy ( vehicle ) ;
86552: LD_ADDR_VAR 0 4
86556: PUSH
86557: LD_VAR 0 1
86561: PPUSH
86562: CALL_OW 311
86566: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86567: LD_VAR 0 4
86571: PPUSH
86572: LD_EXP 132
86576: PUSH
86577: LD_VAR 0 2
86581: ARRAY
86582: PUSH
86583: LD_INT 3
86585: ARRAY
86586: PPUSH
86587: LD_EXP 132
86591: PUSH
86592: LD_VAR 0 2
86596: ARRAY
86597: PUSH
86598: LD_INT 4
86600: ARRAY
86601: PPUSH
86602: CALL_OW 171
// AddComExitVehicle ( driver ) ;
86606: LD_VAR 0 4
86610: PPUSH
86611: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
86615: LD_VAR 0 4
86619: PPUSH
86620: LD_VAR 0 2
86624: PPUSH
86625: CALL_OW 180
// end else
86629: GO 86744
// if GetControl ( vehicle ) = control_remote then
86631: LD_VAR 0 1
86635: PPUSH
86636: CALL_OW 263
86640: PUSH
86641: LD_INT 2
86643: EQUAL
86644: IFFALSE 86705
// begin wait ( 0 0$2 ) ;
86646: LD_INT 70
86648: PPUSH
86649: CALL_OW 67
// if Connect ( vehicle ) then
86653: LD_VAR 0 1
86657: PPUSH
86658: CALL 36805 0 1
86662: IFFALSE 86703
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86664: LD_VAR 0 1
86668: PPUSH
86669: LD_EXP 132
86673: PUSH
86674: LD_VAR 0 2
86678: ARRAY
86679: PUSH
86680: LD_INT 3
86682: ARRAY
86683: PPUSH
86684: LD_EXP 132
86688: PUSH
86689: LD_VAR 0 2
86693: ARRAY
86694: PUSH
86695: LD_INT 4
86697: ARRAY
86698: PPUSH
86699: CALL_OW 171
// end else
86703: GO 86744
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86705: LD_VAR 0 1
86709: PPUSH
86710: LD_EXP 132
86714: PUSH
86715: LD_VAR 0 2
86719: ARRAY
86720: PUSH
86721: LD_INT 3
86723: ARRAY
86724: PPUSH
86725: LD_EXP 132
86729: PUSH
86730: LD_VAR 0 2
86734: ARRAY
86735: PUSH
86736: LD_INT 4
86738: ARRAY
86739: PPUSH
86740: CALL_OW 171
// end ; end ;
86744: LD_VAR 0 3
86748: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
86749: LD_INT 0
86751: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
86752: LD_VAR 0 1
86756: PUSH
86757: LD_INT 250
86759: EQUAL
86760: PUSH
86761: LD_VAR 0 2
86765: PPUSH
86766: CALL_OW 264
86770: PUSH
86771: LD_INT 81
86773: EQUAL
86774: AND
86775: IFFALSE 86796
// MinerPlaceMine ( unit , x , y ) ;
86777: LD_VAR 0 2
86781: PPUSH
86782: LD_VAR 0 4
86786: PPUSH
86787: LD_VAR 0 5
86791: PPUSH
86792: CALL 89181 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
86796: LD_VAR 0 1
86800: PUSH
86801: LD_INT 251
86803: EQUAL
86804: PUSH
86805: LD_VAR 0 2
86809: PPUSH
86810: CALL_OW 264
86814: PUSH
86815: LD_INT 81
86817: EQUAL
86818: AND
86819: IFFALSE 86840
// MinerDetonateMine ( unit , x , y ) ;
86821: LD_VAR 0 2
86825: PPUSH
86826: LD_VAR 0 4
86830: PPUSH
86831: LD_VAR 0 5
86835: PPUSH
86836: CALL 89456 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
86840: LD_VAR 0 1
86844: PUSH
86845: LD_INT 252
86847: EQUAL
86848: PUSH
86849: LD_VAR 0 2
86853: PPUSH
86854: CALL_OW 264
86858: PUSH
86859: LD_INT 81
86861: EQUAL
86862: AND
86863: IFFALSE 86884
// MinerCreateMinefield ( unit , x , y ) ;
86865: LD_VAR 0 2
86869: PPUSH
86870: LD_VAR 0 4
86874: PPUSH
86875: LD_VAR 0 5
86879: PPUSH
86880: CALL 89873 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
86884: LD_VAR 0 1
86888: PUSH
86889: LD_INT 253
86891: EQUAL
86892: PUSH
86893: LD_VAR 0 2
86897: PPUSH
86898: CALL_OW 257
86902: PUSH
86903: LD_INT 5
86905: EQUAL
86906: AND
86907: IFFALSE 86928
// ComBinocular ( unit , x , y ) ;
86909: LD_VAR 0 2
86913: PPUSH
86914: LD_VAR 0 4
86918: PPUSH
86919: LD_VAR 0 5
86923: PPUSH
86924: CALL 90242 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
86928: LD_VAR 0 1
86932: PUSH
86933: LD_INT 254
86935: EQUAL
86936: PUSH
86937: LD_VAR 0 2
86941: PPUSH
86942: CALL_OW 264
86946: PUSH
86947: LD_INT 99
86949: EQUAL
86950: AND
86951: PUSH
86952: LD_VAR 0 3
86956: PPUSH
86957: CALL_OW 263
86961: PUSH
86962: LD_INT 3
86964: EQUAL
86965: AND
86966: IFFALSE 86982
// HackDestroyVehicle ( unit , selectedUnit ) ;
86968: LD_VAR 0 2
86972: PPUSH
86973: LD_VAR 0 3
86977: PPUSH
86978: CALL 88545 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
86982: LD_VAR 0 1
86986: PUSH
86987: LD_INT 255
86989: EQUAL
86990: PUSH
86991: LD_VAR 0 2
86995: PPUSH
86996: CALL_OW 264
87000: PUSH
87001: LD_INT 14
87003: PUSH
87004: LD_INT 53
87006: PUSH
87007: EMPTY
87008: LIST
87009: LIST
87010: IN
87011: AND
87012: PUSH
87013: LD_VAR 0 4
87017: PPUSH
87018: LD_VAR 0 5
87022: PPUSH
87023: CALL_OW 488
87027: AND
87028: IFFALSE 87052
// CutTreeXYR ( unit , x , y , 12 ) ;
87030: LD_VAR 0 2
87034: PPUSH
87035: LD_VAR 0 4
87039: PPUSH
87040: LD_VAR 0 5
87044: PPUSH
87045: LD_INT 12
87047: PPUSH
87048: CALL 87115 0 4
// if cmd = 256 then
87052: LD_VAR 0 1
87056: PUSH
87057: LD_INT 256
87059: EQUAL
87060: IFFALSE 87081
// SetFactoryWaypoint ( unit , x , y ) ;
87062: LD_VAR 0 2
87066: PPUSH
87067: LD_VAR 0 4
87071: PPUSH
87072: LD_VAR 0 5
87076: PPUSH
87077: CALL 84899 0 3
// if cmd = 257 then
87081: LD_VAR 0 1
87085: PUSH
87086: LD_INT 257
87088: EQUAL
87089: IFFALSE 87110
// SetWarehouseGatheringPoint ( unit , x , y ) ;
87091: LD_VAR 0 2
87095: PPUSH
87096: LD_VAR 0 4
87100: PPUSH
87101: LD_VAR 0 5
87105: PPUSH
87106: CALL 85261 0 3
// end ;
87110: LD_VAR 0 6
87114: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87115: LD_INT 0
87117: PPUSH
87118: PPUSH
87119: PPUSH
87120: PPUSH
87121: PPUSH
87122: PPUSH
87123: PPUSH
87124: PPUSH
87125: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
87126: LD_VAR 0 1
87130: NOT
87131: PUSH
87132: LD_VAR 0 2
87136: PPUSH
87137: LD_VAR 0 3
87141: PPUSH
87142: CALL_OW 488
87146: NOT
87147: OR
87148: PUSH
87149: LD_VAR 0 4
87153: NOT
87154: OR
87155: IFFALSE 87159
// exit ;
87157: GO 87499
// list := [ ] ;
87159: LD_ADDR_VAR 0 13
87163: PUSH
87164: EMPTY
87165: ST_TO_ADDR
// if x - r < 0 then
87166: LD_VAR 0 2
87170: PUSH
87171: LD_VAR 0 4
87175: MINUS
87176: PUSH
87177: LD_INT 0
87179: LESS
87180: IFFALSE 87192
// min_x := 0 else
87182: LD_ADDR_VAR 0 7
87186: PUSH
87187: LD_INT 0
87189: ST_TO_ADDR
87190: GO 87208
// min_x := x - r ;
87192: LD_ADDR_VAR 0 7
87196: PUSH
87197: LD_VAR 0 2
87201: PUSH
87202: LD_VAR 0 4
87206: MINUS
87207: ST_TO_ADDR
// if y - r < 0 then
87208: LD_VAR 0 3
87212: PUSH
87213: LD_VAR 0 4
87217: MINUS
87218: PUSH
87219: LD_INT 0
87221: LESS
87222: IFFALSE 87234
// min_y := 0 else
87224: LD_ADDR_VAR 0 8
87228: PUSH
87229: LD_INT 0
87231: ST_TO_ADDR
87232: GO 87250
// min_y := y - r ;
87234: LD_ADDR_VAR 0 8
87238: PUSH
87239: LD_VAR 0 3
87243: PUSH
87244: LD_VAR 0 4
87248: MINUS
87249: ST_TO_ADDR
// max_x := x + r ;
87250: LD_ADDR_VAR 0 9
87254: PUSH
87255: LD_VAR 0 2
87259: PUSH
87260: LD_VAR 0 4
87264: PLUS
87265: ST_TO_ADDR
// max_y := y + r ;
87266: LD_ADDR_VAR 0 10
87270: PUSH
87271: LD_VAR 0 3
87275: PUSH
87276: LD_VAR 0 4
87280: PLUS
87281: ST_TO_ADDR
// for _x = min_x to max_x do
87282: LD_ADDR_VAR 0 11
87286: PUSH
87287: DOUBLE
87288: LD_VAR 0 7
87292: DEC
87293: ST_TO_ADDR
87294: LD_VAR 0 9
87298: PUSH
87299: FOR_TO
87300: IFFALSE 87417
// for _y = min_y to max_y do
87302: LD_ADDR_VAR 0 12
87306: PUSH
87307: DOUBLE
87308: LD_VAR 0 8
87312: DEC
87313: ST_TO_ADDR
87314: LD_VAR 0 10
87318: PUSH
87319: FOR_TO
87320: IFFALSE 87413
// begin if not ValidHex ( _x , _y ) then
87322: LD_VAR 0 11
87326: PPUSH
87327: LD_VAR 0 12
87331: PPUSH
87332: CALL_OW 488
87336: NOT
87337: IFFALSE 87341
// continue ;
87339: GO 87319
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87341: LD_VAR 0 11
87345: PPUSH
87346: LD_VAR 0 12
87350: PPUSH
87351: CALL_OW 351
87355: PUSH
87356: LD_VAR 0 11
87360: PPUSH
87361: LD_VAR 0 12
87365: PPUSH
87366: CALL_OW 554
87370: AND
87371: IFFALSE 87411
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87373: LD_ADDR_VAR 0 13
87377: PUSH
87378: LD_VAR 0 13
87382: PPUSH
87383: LD_VAR 0 13
87387: PUSH
87388: LD_INT 1
87390: PLUS
87391: PPUSH
87392: LD_VAR 0 11
87396: PUSH
87397: LD_VAR 0 12
87401: PUSH
87402: EMPTY
87403: LIST
87404: LIST
87405: PPUSH
87406: CALL_OW 2
87410: ST_TO_ADDR
// end ;
87411: GO 87319
87413: POP
87414: POP
87415: GO 87299
87417: POP
87418: POP
// if not list then
87419: LD_VAR 0 13
87423: NOT
87424: IFFALSE 87428
// exit ;
87426: GO 87499
// for i in list do
87428: LD_ADDR_VAR 0 6
87432: PUSH
87433: LD_VAR 0 13
87437: PUSH
87438: FOR_IN
87439: IFFALSE 87497
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87441: LD_VAR 0 1
87445: PPUSH
87446: LD_STRING M
87448: PUSH
87449: LD_VAR 0 6
87453: PUSH
87454: LD_INT 1
87456: ARRAY
87457: PUSH
87458: LD_VAR 0 6
87462: PUSH
87463: LD_INT 2
87465: ARRAY
87466: PUSH
87467: LD_INT 0
87469: PUSH
87470: LD_INT 0
87472: PUSH
87473: LD_INT 0
87475: PUSH
87476: LD_INT 0
87478: PUSH
87479: EMPTY
87480: LIST
87481: LIST
87482: LIST
87483: LIST
87484: LIST
87485: LIST
87486: LIST
87487: PUSH
87488: EMPTY
87489: LIST
87490: PPUSH
87491: CALL_OW 447
87495: GO 87438
87497: POP
87498: POP
// end ;
87499: LD_VAR 0 5
87503: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
87504: LD_EXP 135
87508: NOT
87509: IFFALSE 87559
87511: GO 87513
87513: DISABLE
// begin initHack := true ;
87514: LD_ADDR_EXP 135
87518: PUSH
87519: LD_INT 1
87521: ST_TO_ADDR
// hackTanks := [ ] ;
87522: LD_ADDR_EXP 136
87526: PUSH
87527: EMPTY
87528: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
87529: LD_ADDR_EXP 137
87533: PUSH
87534: EMPTY
87535: ST_TO_ADDR
// hackLimit := 3 ;
87536: LD_ADDR_EXP 138
87540: PUSH
87541: LD_INT 3
87543: ST_TO_ADDR
// hackDist := 12 ;
87544: LD_ADDR_EXP 139
87548: PUSH
87549: LD_INT 12
87551: ST_TO_ADDR
// hackCounter := [ ] ;
87552: LD_ADDR_EXP 140
87556: PUSH
87557: EMPTY
87558: ST_TO_ADDR
// end ;
87559: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
87560: LD_EXP 135
87564: PUSH
87565: LD_INT 34
87567: PUSH
87568: LD_INT 99
87570: PUSH
87571: EMPTY
87572: LIST
87573: LIST
87574: PPUSH
87575: CALL_OW 69
87579: AND
87580: IFFALSE 87833
87582: GO 87584
87584: DISABLE
87585: LD_INT 0
87587: PPUSH
87588: PPUSH
// begin enable ;
87589: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
87590: LD_ADDR_VAR 0 1
87594: PUSH
87595: LD_INT 34
87597: PUSH
87598: LD_INT 99
87600: PUSH
87601: EMPTY
87602: LIST
87603: LIST
87604: PPUSH
87605: CALL_OW 69
87609: PUSH
87610: FOR_IN
87611: IFFALSE 87831
// begin if not i in hackTanks then
87613: LD_VAR 0 1
87617: PUSH
87618: LD_EXP 136
87622: IN
87623: NOT
87624: IFFALSE 87707
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
87626: LD_ADDR_EXP 136
87630: PUSH
87631: LD_EXP 136
87635: PPUSH
87636: LD_EXP 136
87640: PUSH
87641: LD_INT 1
87643: PLUS
87644: PPUSH
87645: LD_VAR 0 1
87649: PPUSH
87650: CALL_OW 1
87654: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
87655: LD_ADDR_EXP 137
87659: PUSH
87660: LD_EXP 137
87664: PPUSH
87665: LD_EXP 137
87669: PUSH
87670: LD_INT 1
87672: PLUS
87673: PPUSH
87674: EMPTY
87675: PPUSH
87676: CALL_OW 1
87680: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
87681: LD_ADDR_EXP 140
87685: PUSH
87686: LD_EXP 140
87690: PPUSH
87691: LD_EXP 140
87695: PUSH
87696: LD_INT 1
87698: PLUS
87699: PPUSH
87700: EMPTY
87701: PPUSH
87702: CALL_OW 1
87706: ST_TO_ADDR
// end ; if not IsOk ( i ) then
87707: LD_VAR 0 1
87711: PPUSH
87712: CALL_OW 302
87716: NOT
87717: IFFALSE 87730
// begin HackUnlinkAll ( i ) ;
87719: LD_VAR 0 1
87723: PPUSH
87724: CALL 87836 0 1
// continue ;
87728: GO 87610
// end ; HackCheckCapturedStatus ( i ) ;
87730: LD_VAR 0 1
87734: PPUSH
87735: CALL 88279 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
87739: LD_ADDR_VAR 0 2
87743: PUSH
87744: LD_INT 81
87746: PUSH
87747: LD_VAR 0 1
87751: PPUSH
87752: CALL_OW 255
87756: PUSH
87757: EMPTY
87758: LIST
87759: LIST
87760: PUSH
87761: LD_INT 33
87763: PUSH
87764: LD_INT 3
87766: PUSH
87767: EMPTY
87768: LIST
87769: LIST
87770: PUSH
87771: LD_INT 91
87773: PUSH
87774: LD_VAR 0 1
87778: PUSH
87779: LD_EXP 139
87783: PUSH
87784: EMPTY
87785: LIST
87786: LIST
87787: LIST
87788: PUSH
87789: LD_INT 50
87791: PUSH
87792: EMPTY
87793: LIST
87794: PUSH
87795: EMPTY
87796: LIST
87797: LIST
87798: LIST
87799: LIST
87800: PPUSH
87801: CALL_OW 69
87805: ST_TO_ADDR
// if not tmp then
87806: LD_VAR 0 2
87810: NOT
87811: IFFALSE 87815
// continue ;
87813: GO 87610
// HackLink ( i , tmp ) ;
87815: LD_VAR 0 1
87819: PPUSH
87820: LD_VAR 0 2
87824: PPUSH
87825: CALL 87972 0 2
// end ;
87829: GO 87610
87831: POP
87832: POP
// end ;
87833: PPOPN 2
87835: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
87836: LD_INT 0
87838: PPUSH
87839: PPUSH
87840: PPUSH
// if not hack in hackTanks then
87841: LD_VAR 0 1
87845: PUSH
87846: LD_EXP 136
87850: IN
87851: NOT
87852: IFFALSE 87856
// exit ;
87854: GO 87967
// index := GetElementIndex ( hackTanks , hack ) ;
87856: LD_ADDR_VAR 0 4
87860: PUSH
87861: LD_EXP 136
87865: PPUSH
87866: LD_VAR 0 1
87870: PPUSH
87871: CALL 33612 0 2
87875: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
87876: LD_EXP 137
87880: PUSH
87881: LD_VAR 0 4
87885: ARRAY
87886: IFFALSE 87967
// begin for i in hackTanksCaptured [ index ] do
87888: LD_ADDR_VAR 0 3
87892: PUSH
87893: LD_EXP 137
87897: PUSH
87898: LD_VAR 0 4
87902: ARRAY
87903: PUSH
87904: FOR_IN
87905: IFFALSE 87931
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
87907: LD_VAR 0 3
87911: PUSH
87912: LD_INT 1
87914: ARRAY
87915: PPUSH
87916: LD_VAR 0 3
87920: PUSH
87921: LD_INT 2
87923: ARRAY
87924: PPUSH
87925: CALL_OW 235
87929: GO 87904
87931: POP
87932: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
87933: LD_ADDR_EXP 137
87937: PUSH
87938: LD_EXP 137
87942: PPUSH
87943: LD_VAR 0 4
87947: PPUSH
87948: EMPTY
87949: PPUSH
87950: CALL_OW 1
87954: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
87955: LD_VAR 0 1
87959: PPUSH
87960: LD_INT 0
87962: PPUSH
87963: CALL_OW 505
// end ; end ;
87967: LD_VAR 0 2
87971: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
87972: LD_INT 0
87974: PPUSH
87975: PPUSH
87976: PPUSH
// if not hack in hackTanks or not vehicles then
87977: LD_VAR 0 1
87981: PUSH
87982: LD_EXP 136
87986: IN
87987: NOT
87988: PUSH
87989: LD_VAR 0 2
87993: NOT
87994: OR
87995: IFFALSE 87999
// exit ;
87997: GO 88274
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
87999: LD_ADDR_VAR 0 2
88003: PUSH
88004: LD_VAR 0 1
88008: PPUSH
88009: LD_VAR 0 2
88013: PPUSH
88014: LD_INT 1
88016: PPUSH
88017: LD_INT 1
88019: PPUSH
88020: CALL 34262 0 4
88024: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
88025: LD_ADDR_VAR 0 5
88029: PUSH
88030: LD_EXP 136
88034: PPUSH
88035: LD_VAR 0 1
88039: PPUSH
88040: CALL 33612 0 2
88044: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
88045: LD_EXP 137
88049: PUSH
88050: LD_VAR 0 5
88054: ARRAY
88055: PUSH
88056: LD_EXP 138
88060: LESS
88061: IFFALSE 88250
// begin for i := 1 to vehicles do
88063: LD_ADDR_VAR 0 4
88067: PUSH
88068: DOUBLE
88069: LD_INT 1
88071: DEC
88072: ST_TO_ADDR
88073: LD_VAR 0 2
88077: PUSH
88078: FOR_TO
88079: IFFALSE 88248
// begin if hackTanksCaptured [ index ] = hackLimit then
88081: LD_EXP 137
88085: PUSH
88086: LD_VAR 0 5
88090: ARRAY
88091: PUSH
88092: LD_EXP 138
88096: EQUAL
88097: IFFALSE 88101
// break ;
88099: GO 88248
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
88101: LD_ADDR_EXP 140
88105: PUSH
88106: LD_EXP 140
88110: PPUSH
88111: LD_VAR 0 5
88115: PPUSH
88116: LD_EXP 140
88120: PUSH
88121: LD_VAR 0 5
88125: ARRAY
88126: PUSH
88127: LD_INT 1
88129: PLUS
88130: PPUSH
88131: CALL_OW 1
88135: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88136: LD_ADDR_EXP 137
88140: PUSH
88141: LD_EXP 137
88145: PPUSH
88146: LD_VAR 0 5
88150: PUSH
88151: LD_EXP 137
88155: PUSH
88156: LD_VAR 0 5
88160: ARRAY
88161: PUSH
88162: LD_INT 1
88164: PLUS
88165: PUSH
88166: EMPTY
88167: LIST
88168: LIST
88169: PPUSH
88170: LD_VAR 0 2
88174: PUSH
88175: LD_VAR 0 4
88179: ARRAY
88180: PUSH
88181: LD_VAR 0 2
88185: PUSH
88186: LD_VAR 0 4
88190: ARRAY
88191: PPUSH
88192: CALL_OW 255
88196: PUSH
88197: EMPTY
88198: LIST
88199: LIST
88200: PPUSH
88201: CALL 33827 0 3
88205: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88206: LD_VAR 0 2
88210: PUSH
88211: LD_VAR 0 4
88215: ARRAY
88216: PPUSH
88217: LD_VAR 0 1
88221: PPUSH
88222: CALL_OW 255
88226: PPUSH
88227: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88231: LD_VAR 0 2
88235: PUSH
88236: LD_VAR 0 4
88240: ARRAY
88241: PPUSH
88242: CALL_OW 141
// end ;
88246: GO 88078
88248: POP
88249: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88250: LD_VAR 0 1
88254: PPUSH
88255: LD_EXP 137
88259: PUSH
88260: LD_VAR 0 5
88264: ARRAY
88265: PUSH
88266: LD_INT 0
88268: PLUS
88269: PPUSH
88270: CALL_OW 505
// end ;
88274: LD_VAR 0 3
88278: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88279: LD_INT 0
88281: PPUSH
88282: PPUSH
88283: PPUSH
88284: PPUSH
// if not hack in hackTanks then
88285: LD_VAR 0 1
88289: PUSH
88290: LD_EXP 136
88294: IN
88295: NOT
88296: IFFALSE 88300
// exit ;
88298: GO 88540
// index := GetElementIndex ( hackTanks , hack ) ;
88300: LD_ADDR_VAR 0 4
88304: PUSH
88305: LD_EXP 136
88309: PPUSH
88310: LD_VAR 0 1
88314: PPUSH
88315: CALL 33612 0 2
88319: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88320: LD_ADDR_VAR 0 3
88324: PUSH
88325: DOUBLE
88326: LD_EXP 137
88330: PUSH
88331: LD_VAR 0 4
88335: ARRAY
88336: INC
88337: ST_TO_ADDR
88338: LD_INT 1
88340: PUSH
88341: FOR_DOWNTO
88342: IFFALSE 88514
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88344: LD_ADDR_VAR 0 5
88348: PUSH
88349: LD_EXP 137
88353: PUSH
88354: LD_VAR 0 4
88358: ARRAY
88359: PUSH
88360: LD_VAR 0 3
88364: ARRAY
88365: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88366: LD_VAR 0 5
88370: PUSH
88371: LD_INT 1
88373: ARRAY
88374: PPUSH
88375: CALL_OW 302
88379: NOT
88380: PUSH
88381: LD_VAR 0 5
88385: PUSH
88386: LD_INT 1
88388: ARRAY
88389: PPUSH
88390: CALL_OW 255
88394: PUSH
88395: LD_VAR 0 1
88399: PPUSH
88400: CALL_OW 255
88404: NONEQUAL
88405: OR
88406: IFFALSE 88512
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88408: LD_VAR 0 5
88412: PUSH
88413: LD_INT 1
88415: ARRAY
88416: PPUSH
88417: CALL_OW 305
88421: PUSH
88422: LD_VAR 0 5
88426: PUSH
88427: LD_INT 1
88429: ARRAY
88430: PPUSH
88431: CALL_OW 255
88435: PUSH
88436: LD_VAR 0 1
88440: PPUSH
88441: CALL_OW 255
88445: EQUAL
88446: AND
88447: IFFALSE 88471
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
88449: LD_VAR 0 5
88453: PUSH
88454: LD_INT 1
88456: ARRAY
88457: PPUSH
88458: LD_VAR 0 5
88462: PUSH
88463: LD_INT 2
88465: ARRAY
88466: PPUSH
88467: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
88471: LD_ADDR_EXP 137
88475: PUSH
88476: LD_EXP 137
88480: PPUSH
88481: LD_VAR 0 4
88485: PPUSH
88486: LD_EXP 137
88490: PUSH
88491: LD_VAR 0 4
88495: ARRAY
88496: PPUSH
88497: LD_VAR 0 3
88501: PPUSH
88502: CALL_OW 3
88506: PPUSH
88507: CALL_OW 1
88511: ST_TO_ADDR
// end ; end ;
88512: GO 88341
88514: POP
88515: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88516: LD_VAR 0 1
88520: PPUSH
88521: LD_EXP 137
88525: PUSH
88526: LD_VAR 0 4
88530: ARRAY
88531: PUSH
88532: LD_INT 0
88534: PLUS
88535: PPUSH
88536: CALL_OW 505
// end ;
88540: LD_VAR 0 2
88544: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
88545: LD_INT 0
88547: PPUSH
88548: PPUSH
88549: PPUSH
88550: PPUSH
// if not hack in hackTanks then
88551: LD_VAR 0 1
88555: PUSH
88556: LD_EXP 136
88560: IN
88561: NOT
88562: IFFALSE 88566
// exit ;
88564: GO 88651
// index := GetElementIndex ( hackTanks , hack ) ;
88566: LD_ADDR_VAR 0 5
88570: PUSH
88571: LD_EXP 136
88575: PPUSH
88576: LD_VAR 0 1
88580: PPUSH
88581: CALL 33612 0 2
88585: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
88586: LD_ADDR_VAR 0 4
88590: PUSH
88591: DOUBLE
88592: LD_INT 1
88594: DEC
88595: ST_TO_ADDR
88596: LD_EXP 137
88600: PUSH
88601: LD_VAR 0 5
88605: ARRAY
88606: PUSH
88607: FOR_TO
88608: IFFALSE 88649
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
88610: LD_EXP 137
88614: PUSH
88615: LD_VAR 0 5
88619: ARRAY
88620: PUSH
88621: LD_VAR 0 4
88625: ARRAY
88626: PUSH
88627: LD_INT 1
88629: ARRAY
88630: PUSH
88631: LD_VAR 0 2
88635: EQUAL
88636: IFFALSE 88647
// KillUnit ( vehicle ) ;
88638: LD_VAR 0 2
88642: PPUSH
88643: CALL_OW 66
88647: GO 88607
88649: POP
88650: POP
// end ;
88651: LD_VAR 0 3
88655: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
88656: LD_EXP 141
88660: NOT
88661: IFFALSE 88696
88663: GO 88665
88665: DISABLE
// begin initMiner := true ;
88666: LD_ADDR_EXP 141
88670: PUSH
88671: LD_INT 1
88673: ST_TO_ADDR
// minersList := [ ] ;
88674: LD_ADDR_EXP 142
88678: PUSH
88679: EMPTY
88680: ST_TO_ADDR
// minerMinesList := [ ] ;
88681: LD_ADDR_EXP 143
88685: PUSH
88686: EMPTY
88687: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
88688: LD_ADDR_EXP 144
88692: PUSH
88693: LD_INT 5
88695: ST_TO_ADDR
// end ;
88696: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
88697: LD_EXP 141
88701: PUSH
88702: LD_INT 34
88704: PUSH
88705: LD_INT 81
88707: PUSH
88708: EMPTY
88709: LIST
88710: LIST
88711: PPUSH
88712: CALL_OW 69
88716: AND
88717: IFFALSE 89178
88719: GO 88721
88721: DISABLE
88722: LD_INT 0
88724: PPUSH
88725: PPUSH
88726: PPUSH
88727: PPUSH
// begin enable ;
88728: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
88729: LD_ADDR_VAR 0 1
88733: PUSH
88734: LD_INT 34
88736: PUSH
88737: LD_INT 81
88739: PUSH
88740: EMPTY
88741: LIST
88742: LIST
88743: PPUSH
88744: CALL_OW 69
88748: PUSH
88749: FOR_IN
88750: IFFALSE 88822
// begin if not i in minersList then
88752: LD_VAR 0 1
88756: PUSH
88757: LD_EXP 142
88761: IN
88762: NOT
88763: IFFALSE 88820
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
88765: LD_ADDR_EXP 142
88769: PUSH
88770: LD_EXP 142
88774: PPUSH
88775: LD_EXP 142
88779: PUSH
88780: LD_INT 1
88782: PLUS
88783: PPUSH
88784: LD_VAR 0 1
88788: PPUSH
88789: CALL_OW 1
88793: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
88794: LD_ADDR_EXP 143
88798: PUSH
88799: LD_EXP 143
88803: PPUSH
88804: LD_EXP 143
88808: PUSH
88809: LD_INT 1
88811: PLUS
88812: PPUSH
88813: EMPTY
88814: PPUSH
88815: CALL_OW 1
88819: ST_TO_ADDR
// end end ;
88820: GO 88749
88822: POP
88823: POP
// for i := minerMinesList downto 1 do
88824: LD_ADDR_VAR 0 1
88828: PUSH
88829: DOUBLE
88830: LD_EXP 143
88834: INC
88835: ST_TO_ADDR
88836: LD_INT 1
88838: PUSH
88839: FOR_DOWNTO
88840: IFFALSE 89176
// begin if IsLive ( minersList [ i ] ) then
88842: LD_EXP 142
88846: PUSH
88847: LD_VAR 0 1
88851: ARRAY
88852: PPUSH
88853: CALL_OW 300
88857: IFFALSE 88885
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
88859: LD_EXP 142
88863: PUSH
88864: LD_VAR 0 1
88868: ARRAY
88869: PPUSH
88870: LD_EXP 143
88874: PUSH
88875: LD_VAR 0 1
88879: ARRAY
88880: PPUSH
88881: CALL_OW 505
// if not minerMinesList [ i ] then
88885: LD_EXP 143
88889: PUSH
88890: LD_VAR 0 1
88894: ARRAY
88895: NOT
88896: IFFALSE 88900
// continue ;
88898: GO 88839
// for j := minerMinesList [ i ] downto 1 do
88900: LD_ADDR_VAR 0 2
88904: PUSH
88905: DOUBLE
88906: LD_EXP 143
88910: PUSH
88911: LD_VAR 0 1
88915: ARRAY
88916: INC
88917: ST_TO_ADDR
88918: LD_INT 1
88920: PUSH
88921: FOR_DOWNTO
88922: IFFALSE 89172
// begin side := GetSide ( minersList [ i ] ) ;
88924: LD_ADDR_VAR 0 3
88928: PUSH
88929: LD_EXP 142
88933: PUSH
88934: LD_VAR 0 1
88938: ARRAY
88939: PPUSH
88940: CALL_OW 255
88944: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
88945: LD_ADDR_VAR 0 4
88949: PUSH
88950: LD_EXP 143
88954: PUSH
88955: LD_VAR 0 1
88959: ARRAY
88960: PUSH
88961: LD_VAR 0 2
88965: ARRAY
88966: PUSH
88967: LD_INT 1
88969: ARRAY
88970: PPUSH
88971: LD_EXP 143
88975: PUSH
88976: LD_VAR 0 1
88980: ARRAY
88981: PUSH
88982: LD_VAR 0 2
88986: ARRAY
88987: PUSH
88988: LD_INT 2
88990: ARRAY
88991: PPUSH
88992: CALL_OW 428
88996: ST_TO_ADDR
// if not tmp then
88997: LD_VAR 0 4
89001: NOT
89002: IFFALSE 89006
// continue ;
89004: GO 88921
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
89006: LD_VAR 0 4
89010: PUSH
89011: LD_INT 81
89013: PUSH
89014: LD_VAR 0 3
89018: PUSH
89019: EMPTY
89020: LIST
89021: LIST
89022: PPUSH
89023: CALL_OW 69
89027: IN
89028: PUSH
89029: LD_EXP 143
89033: PUSH
89034: LD_VAR 0 1
89038: ARRAY
89039: PUSH
89040: LD_VAR 0 2
89044: ARRAY
89045: PUSH
89046: LD_INT 1
89048: ARRAY
89049: PPUSH
89050: LD_EXP 143
89054: PUSH
89055: LD_VAR 0 1
89059: ARRAY
89060: PUSH
89061: LD_VAR 0 2
89065: ARRAY
89066: PUSH
89067: LD_INT 2
89069: ARRAY
89070: PPUSH
89071: CALL_OW 458
89075: AND
89076: IFFALSE 89170
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
89078: LD_EXP 143
89082: PUSH
89083: LD_VAR 0 1
89087: ARRAY
89088: PUSH
89089: LD_VAR 0 2
89093: ARRAY
89094: PUSH
89095: LD_INT 1
89097: ARRAY
89098: PPUSH
89099: LD_EXP 143
89103: PUSH
89104: LD_VAR 0 1
89108: ARRAY
89109: PUSH
89110: LD_VAR 0 2
89114: ARRAY
89115: PUSH
89116: LD_INT 2
89118: ARRAY
89119: PPUSH
89120: LD_VAR 0 3
89124: PPUSH
89125: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89129: LD_ADDR_EXP 143
89133: PUSH
89134: LD_EXP 143
89138: PPUSH
89139: LD_VAR 0 1
89143: PPUSH
89144: LD_EXP 143
89148: PUSH
89149: LD_VAR 0 1
89153: ARRAY
89154: PPUSH
89155: LD_VAR 0 2
89159: PPUSH
89160: CALL_OW 3
89164: PPUSH
89165: CALL_OW 1
89169: ST_TO_ADDR
// end ; end ;
89170: GO 88921
89172: POP
89173: POP
// end ;
89174: GO 88839
89176: POP
89177: POP
// end ;
89178: PPOPN 4
89180: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
89181: LD_INT 0
89183: PPUSH
89184: PPUSH
// result := false ;
89185: LD_ADDR_VAR 0 4
89189: PUSH
89190: LD_INT 0
89192: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
89193: LD_VAR 0 1
89197: PPUSH
89198: CALL_OW 264
89202: PUSH
89203: LD_INT 81
89205: EQUAL
89206: NOT
89207: IFFALSE 89211
// exit ;
89209: GO 89451
// index := GetElementIndex ( minersList , unit ) ;
89211: LD_ADDR_VAR 0 5
89215: PUSH
89216: LD_EXP 142
89220: PPUSH
89221: LD_VAR 0 1
89225: PPUSH
89226: CALL 33612 0 2
89230: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89231: LD_EXP 143
89235: PUSH
89236: LD_VAR 0 5
89240: ARRAY
89241: PUSH
89242: LD_EXP 144
89246: GREATEREQUAL
89247: IFFALSE 89251
// exit ;
89249: GO 89451
// ComMoveXY ( unit , x , y ) ;
89251: LD_VAR 0 1
89255: PPUSH
89256: LD_VAR 0 2
89260: PPUSH
89261: LD_VAR 0 3
89265: PPUSH
89266: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89270: LD_INT 35
89272: PPUSH
89273: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
89277: LD_VAR 0 1
89281: PPUSH
89282: LD_VAR 0 2
89286: PPUSH
89287: LD_VAR 0 3
89291: PPUSH
89292: CALL 64996 0 3
89296: NOT
89297: PUSH
89298: LD_VAR 0 1
89302: PPUSH
89303: CALL_OW 314
89307: AND
89308: IFFALSE 89312
// exit ;
89310: GO 89451
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
89312: LD_VAR 0 2
89316: PPUSH
89317: LD_VAR 0 3
89321: PPUSH
89322: CALL_OW 428
89326: PUSH
89327: LD_VAR 0 1
89331: EQUAL
89332: PUSH
89333: LD_VAR 0 1
89337: PPUSH
89338: CALL_OW 314
89342: NOT
89343: AND
89344: IFFALSE 89270
// PlaySoundXY ( x , y , PlantMine ) ;
89346: LD_VAR 0 2
89350: PPUSH
89351: LD_VAR 0 3
89355: PPUSH
89356: LD_STRING PlantMine
89358: PPUSH
89359: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89363: LD_VAR 0 2
89367: PPUSH
89368: LD_VAR 0 3
89372: PPUSH
89373: LD_VAR 0 1
89377: PPUSH
89378: CALL_OW 255
89382: PPUSH
89383: LD_INT 0
89385: PPUSH
89386: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89390: LD_ADDR_EXP 143
89394: PUSH
89395: LD_EXP 143
89399: PPUSH
89400: LD_VAR 0 5
89404: PUSH
89405: LD_EXP 143
89409: PUSH
89410: LD_VAR 0 5
89414: ARRAY
89415: PUSH
89416: LD_INT 1
89418: PLUS
89419: PUSH
89420: EMPTY
89421: LIST
89422: LIST
89423: PPUSH
89424: LD_VAR 0 2
89428: PUSH
89429: LD_VAR 0 3
89433: PUSH
89434: EMPTY
89435: LIST
89436: LIST
89437: PPUSH
89438: CALL 33827 0 3
89442: ST_TO_ADDR
// result := true ;
89443: LD_ADDR_VAR 0 4
89447: PUSH
89448: LD_INT 1
89450: ST_TO_ADDR
// end ;
89451: LD_VAR 0 4
89455: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
89456: LD_INT 0
89458: PPUSH
89459: PPUSH
89460: PPUSH
// if not unit in minersList then
89461: LD_VAR 0 1
89465: PUSH
89466: LD_EXP 142
89470: IN
89471: NOT
89472: IFFALSE 89476
// exit ;
89474: GO 89868
// index := GetElementIndex ( minersList , unit ) ;
89476: LD_ADDR_VAR 0 6
89480: PUSH
89481: LD_EXP 142
89485: PPUSH
89486: LD_VAR 0 1
89490: PPUSH
89491: CALL 33612 0 2
89495: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
89496: LD_ADDR_VAR 0 5
89500: PUSH
89501: DOUBLE
89502: LD_EXP 143
89506: PUSH
89507: LD_VAR 0 6
89511: ARRAY
89512: INC
89513: ST_TO_ADDR
89514: LD_INT 1
89516: PUSH
89517: FOR_DOWNTO
89518: IFFALSE 89679
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
89520: LD_EXP 143
89524: PUSH
89525: LD_VAR 0 6
89529: ARRAY
89530: PUSH
89531: LD_VAR 0 5
89535: ARRAY
89536: PUSH
89537: LD_INT 1
89539: ARRAY
89540: PUSH
89541: LD_VAR 0 2
89545: EQUAL
89546: PUSH
89547: LD_EXP 143
89551: PUSH
89552: LD_VAR 0 6
89556: ARRAY
89557: PUSH
89558: LD_VAR 0 5
89562: ARRAY
89563: PUSH
89564: LD_INT 2
89566: ARRAY
89567: PUSH
89568: LD_VAR 0 3
89572: EQUAL
89573: AND
89574: IFFALSE 89677
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89576: LD_EXP 143
89580: PUSH
89581: LD_VAR 0 6
89585: ARRAY
89586: PUSH
89587: LD_VAR 0 5
89591: ARRAY
89592: PUSH
89593: LD_INT 1
89595: ARRAY
89596: PPUSH
89597: LD_EXP 143
89601: PUSH
89602: LD_VAR 0 6
89606: ARRAY
89607: PUSH
89608: LD_VAR 0 5
89612: ARRAY
89613: PUSH
89614: LD_INT 2
89616: ARRAY
89617: PPUSH
89618: LD_VAR 0 1
89622: PPUSH
89623: CALL_OW 255
89627: PPUSH
89628: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89632: LD_ADDR_EXP 143
89636: PUSH
89637: LD_EXP 143
89641: PPUSH
89642: LD_VAR 0 6
89646: PPUSH
89647: LD_EXP 143
89651: PUSH
89652: LD_VAR 0 6
89656: ARRAY
89657: PPUSH
89658: LD_VAR 0 5
89662: PPUSH
89663: CALL_OW 3
89667: PPUSH
89668: CALL_OW 1
89672: ST_TO_ADDR
// exit ;
89673: POP
89674: POP
89675: GO 89868
// end ; end ;
89677: GO 89517
89679: POP
89680: POP
// for i := minerMinesList [ index ] downto 1 do
89681: LD_ADDR_VAR 0 5
89685: PUSH
89686: DOUBLE
89687: LD_EXP 143
89691: PUSH
89692: LD_VAR 0 6
89696: ARRAY
89697: INC
89698: ST_TO_ADDR
89699: LD_INT 1
89701: PUSH
89702: FOR_DOWNTO
89703: IFFALSE 89866
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
89705: LD_EXP 143
89709: PUSH
89710: LD_VAR 0 6
89714: ARRAY
89715: PUSH
89716: LD_VAR 0 5
89720: ARRAY
89721: PUSH
89722: LD_INT 1
89724: ARRAY
89725: PPUSH
89726: LD_EXP 143
89730: PUSH
89731: LD_VAR 0 6
89735: ARRAY
89736: PUSH
89737: LD_VAR 0 5
89741: ARRAY
89742: PUSH
89743: LD_INT 2
89745: ARRAY
89746: PPUSH
89747: LD_VAR 0 2
89751: PPUSH
89752: LD_VAR 0 3
89756: PPUSH
89757: CALL_OW 298
89761: PUSH
89762: LD_INT 6
89764: LESS
89765: IFFALSE 89864
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89767: LD_EXP 143
89771: PUSH
89772: LD_VAR 0 6
89776: ARRAY
89777: PUSH
89778: LD_VAR 0 5
89782: ARRAY
89783: PUSH
89784: LD_INT 1
89786: ARRAY
89787: PPUSH
89788: LD_EXP 143
89792: PUSH
89793: LD_VAR 0 6
89797: ARRAY
89798: PUSH
89799: LD_VAR 0 5
89803: ARRAY
89804: PUSH
89805: LD_INT 2
89807: ARRAY
89808: PPUSH
89809: LD_VAR 0 1
89813: PPUSH
89814: CALL_OW 255
89818: PPUSH
89819: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89823: LD_ADDR_EXP 143
89827: PUSH
89828: LD_EXP 143
89832: PPUSH
89833: LD_VAR 0 6
89837: PPUSH
89838: LD_EXP 143
89842: PUSH
89843: LD_VAR 0 6
89847: ARRAY
89848: PPUSH
89849: LD_VAR 0 5
89853: PPUSH
89854: CALL_OW 3
89858: PPUSH
89859: CALL_OW 1
89863: ST_TO_ADDR
// end ; end ;
89864: GO 89702
89866: POP
89867: POP
// end ;
89868: LD_VAR 0 4
89872: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
89873: LD_INT 0
89875: PPUSH
89876: PPUSH
89877: PPUSH
89878: PPUSH
89879: PPUSH
89880: PPUSH
89881: PPUSH
89882: PPUSH
89883: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
89884: LD_VAR 0 1
89888: PPUSH
89889: CALL_OW 264
89893: PUSH
89894: LD_INT 81
89896: EQUAL
89897: NOT
89898: PUSH
89899: LD_VAR 0 1
89903: PUSH
89904: LD_EXP 142
89908: IN
89909: NOT
89910: OR
89911: IFFALSE 89915
// exit ;
89913: GO 90237
// index := GetElementIndex ( minersList , unit ) ;
89915: LD_ADDR_VAR 0 6
89919: PUSH
89920: LD_EXP 142
89924: PPUSH
89925: LD_VAR 0 1
89929: PPUSH
89930: CALL 33612 0 2
89934: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
89935: LD_ADDR_VAR 0 8
89939: PUSH
89940: LD_EXP 144
89944: PUSH
89945: LD_EXP 143
89949: PUSH
89950: LD_VAR 0 6
89954: ARRAY
89955: MINUS
89956: ST_TO_ADDR
// if not minesFreeAmount then
89957: LD_VAR 0 8
89961: NOT
89962: IFFALSE 89966
// exit ;
89964: GO 90237
// tmp := [ ] ;
89966: LD_ADDR_VAR 0 7
89970: PUSH
89971: EMPTY
89972: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
89973: LD_ADDR_VAR 0 5
89977: PUSH
89978: DOUBLE
89979: LD_INT 1
89981: DEC
89982: ST_TO_ADDR
89983: LD_VAR 0 8
89987: PUSH
89988: FOR_TO
89989: IFFALSE 90184
// begin _d := rand ( 0 , 5 ) ;
89991: LD_ADDR_VAR 0 11
89995: PUSH
89996: LD_INT 0
89998: PPUSH
89999: LD_INT 5
90001: PPUSH
90002: CALL_OW 12
90006: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
90007: LD_ADDR_VAR 0 12
90011: PUSH
90012: LD_INT 2
90014: PPUSH
90015: LD_INT 6
90017: PPUSH
90018: CALL_OW 12
90022: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
90023: LD_ADDR_VAR 0 9
90027: PUSH
90028: LD_VAR 0 2
90032: PPUSH
90033: LD_VAR 0 11
90037: PPUSH
90038: LD_VAR 0 12
90042: PPUSH
90043: CALL_OW 272
90047: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
90048: LD_ADDR_VAR 0 10
90052: PUSH
90053: LD_VAR 0 3
90057: PPUSH
90058: LD_VAR 0 11
90062: PPUSH
90063: LD_VAR 0 12
90067: PPUSH
90068: CALL_OW 273
90072: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
90073: LD_VAR 0 9
90077: PPUSH
90078: LD_VAR 0 10
90082: PPUSH
90083: CALL_OW 488
90087: PUSH
90088: LD_VAR 0 9
90092: PUSH
90093: LD_VAR 0 10
90097: PUSH
90098: EMPTY
90099: LIST
90100: LIST
90101: PUSH
90102: LD_VAR 0 7
90106: IN
90107: NOT
90108: AND
90109: PUSH
90110: LD_VAR 0 9
90114: PPUSH
90115: LD_VAR 0 10
90119: PPUSH
90120: CALL_OW 458
90124: NOT
90125: AND
90126: IFFALSE 90168
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90128: LD_ADDR_VAR 0 7
90132: PUSH
90133: LD_VAR 0 7
90137: PPUSH
90138: LD_VAR 0 7
90142: PUSH
90143: LD_INT 1
90145: PLUS
90146: PPUSH
90147: LD_VAR 0 9
90151: PUSH
90152: LD_VAR 0 10
90156: PUSH
90157: EMPTY
90158: LIST
90159: LIST
90160: PPUSH
90161: CALL_OW 1
90165: ST_TO_ADDR
90166: GO 90182
// i := i - 1 ;
90168: LD_ADDR_VAR 0 5
90172: PUSH
90173: LD_VAR 0 5
90177: PUSH
90178: LD_INT 1
90180: MINUS
90181: ST_TO_ADDR
// end ;
90182: GO 89988
90184: POP
90185: POP
// for i in tmp do
90186: LD_ADDR_VAR 0 5
90190: PUSH
90191: LD_VAR 0 7
90195: PUSH
90196: FOR_IN
90197: IFFALSE 90235
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
90199: LD_VAR 0 1
90203: PPUSH
90204: LD_VAR 0 5
90208: PUSH
90209: LD_INT 1
90211: ARRAY
90212: PPUSH
90213: LD_VAR 0 5
90217: PUSH
90218: LD_INT 2
90220: ARRAY
90221: PPUSH
90222: CALL 89181 0 3
90226: NOT
90227: IFFALSE 90233
// exit ;
90229: POP
90230: POP
90231: GO 90237
90233: GO 90196
90235: POP
90236: POP
// end ;
90237: LD_VAR 0 4
90241: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
90242: LD_INT 0
90244: PPUSH
90245: PPUSH
90246: PPUSH
90247: PPUSH
90248: PPUSH
90249: PPUSH
90250: PPUSH
// if not GetClass ( unit ) = class_sniper then
90251: LD_VAR 0 1
90255: PPUSH
90256: CALL_OW 257
90260: PUSH
90261: LD_INT 5
90263: EQUAL
90264: NOT
90265: IFFALSE 90269
// exit ;
90267: GO 90657
// dist := 8 ;
90269: LD_ADDR_VAR 0 5
90273: PUSH
90274: LD_INT 8
90276: ST_TO_ADDR
// viewRange := 12 ;
90277: LD_ADDR_VAR 0 7
90281: PUSH
90282: LD_INT 12
90284: ST_TO_ADDR
// side := GetSide ( unit ) ;
90285: LD_ADDR_VAR 0 6
90289: PUSH
90290: LD_VAR 0 1
90294: PPUSH
90295: CALL_OW 255
90299: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
90300: LD_INT 61
90302: PPUSH
90303: LD_VAR 0 6
90307: PPUSH
90308: CALL_OW 321
90312: PUSH
90313: LD_INT 2
90315: EQUAL
90316: IFFALSE 90326
// viewRange := 16 ;
90318: LD_ADDR_VAR 0 7
90322: PUSH
90323: LD_INT 16
90325: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
90326: LD_VAR 0 1
90330: PPUSH
90331: LD_VAR 0 2
90335: PPUSH
90336: LD_VAR 0 3
90340: PPUSH
90341: CALL_OW 297
90345: PUSH
90346: LD_VAR 0 5
90350: GREATER
90351: IFFALSE 90430
// begin ComMoveXY ( unit , x , y ) ;
90353: LD_VAR 0 1
90357: PPUSH
90358: LD_VAR 0 2
90362: PPUSH
90363: LD_VAR 0 3
90367: PPUSH
90368: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90372: LD_INT 35
90374: PPUSH
90375: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90379: LD_VAR 0 1
90383: PPUSH
90384: LD_VAR 0 2
90388: PPUSH
90389: LD_VAR 0 3
90393: PPUSH
90394: CALL 64996 0 3
90398: NOT
90399: IFFALSE 90403
// exit ;
90401: GO 90657
// until GetDistUnitXY ( unit , x , y ) < dist ;
90403: LD_VAR 0 1
90407: PPUSH
90408: LD_VAR 0 2
90412: PPUSH
90413: LD_VAR 0 3
90417: PPUSH
90418: CALL_OW 297
90422: PUSH
90423: LD_VAR 0 5
90427: LESS
90428: IFFALSE 90372
// end ; ComTurnXY ( unit , x , y ) ;
90430: LD_VAR 0 1
90434: PPUSH
90435: LD_VAR 0 2
90439: PPUSH
90440: LD_VAR 0 3
90444: PPUSH
90445: CALL_OW 118
// wait ( 5 ) ;
90449: LD_INT 5
90451: PPUSH
90452: CALL_OW 67
// _d := GetDir ( unit ) ;
90456: LD_ADDR_VAR 0 10
90460: PUSH
90461: LD_VAR 0 1
90465: PPUSH
90466: CALL_OW 254
90470: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
90471: LD_ADDR_VAR 0 8
90475: PUSH
90476: LD_VAR 0 1
90480: PPUSH
90481: CALL_OW 250
90485: PPUSH
90486: LD_VAR 0 10
90490: PPUSH
90491: LD_VAR 0 5
90495: PPUSH
90496: CALL_OW 272
90500: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
90501: LD_ADDR_VAR 0 9
90505: PUSH
90506: LD_VAR 0 1
90510: PPUSH
90511: CALL_OW 251
90515: PPUSH
90516: LD_VAR 0 10
90520: PPUSH
90521: LD_VAR 0 5
90525: PPUSH
90526: CALL_OW 273
90530: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90531: LD_VAR 0 8
90535: PPUSH
90536: LD_VAR 0 9
90540: PPUSH
90541: CALL_OW 488
90545: NOT
90546: IFFALSE 90550
// exit ;
90548: GO 90657
// ComAnimCustom ( unit , 1 ) ;
90550: LD_VAR 0 1
90554: PPUSH
90555: LD_INT 1
90557: PPUSH
90558: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
90562: LD_VAR 0 8
90566: PPUSH
90567: LD_VAR 0 9
90571: PPUSH
90572: LD_VAR 0 6
90576: PPUSH
90577: LD_VAR 0 7
90581: PPUSH
90582: CALL_OW 330
// repeat wait ( 1 ) ;
90586: LD_INT 1
90588: PPUSH
90589: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
90593: LD_VAR 0 1
90597: PPUSH
90598: CALL_OW 316
90602: PUSH
90603: LD_VAR 0 1
90607: PPUSH
90608: CALL_OW 314
90612: OR
90613: PUSH
90614: LD_VAR 0 1
90618: PPUSH
90619: CALL_OW 302
90623: NOT
90624: OR
90625: PUSH
90626: LD_VAR 0 1
90630: PPUSH
90631: CALL_OW 301
90635: OR
90636: IFFALSE 90586
// RemoveSeeing ( _x , _y , side ) ;
90638: LD_VAR 0 8
90642: PPUSH
90643: LD_VAR 0 9
90647: PPUSH
90648: LD_VAR 0 6
90652: PPUSH
90653: CALL_OW 331
// end ; end_of_file
90657: LD_VAR 0 4
90661: RET
// export function StopOriginalMusic ; begin
90662: LD_INT 0
90664: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
90665: LD_STRING OW_FORCEMUSICDISABLE(true);
90667: PPUSH
90668: CALL_OW 559
// end ;
90672: LD_VAR 0 1
90676: RET
// export function PlayOriginalMusic ; begin
90677: LD_INT 0
90679: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
90680: LD_STRING OW_FORCEMUSICDISABLE(false);
90682: PPUSH
90683: CALL_OW 559
// end ;
90687: LD_VAR 0 1
90691: RET
// export function PlayCustomMusic ( track , callback ) ; begin
90692: LD_INT 0
90694: PPUSH
// StopOriginalMusic ;
90695: CALL 90662 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
90699: LD_STRING playMusic("
90701: PUSH
90702: LD_VAR 0 1
90706: STR
90707: PUSH
90708: LD_STRING ", "
90710: STR
90711: PUSH
90712: LD_VAR 0 2
90716: STR
90717: PUSH
90718: LD_STRING ")
90720: STR
90721: PPUSH
90722: CALL_OW 559
// end ;
90726: LD_VAR 0 3
90730: RET
