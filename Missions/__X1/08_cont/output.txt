// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 18774 0 0
// PrepareRussian ;
  12: CALL 1926 0 0
// PrepareArabian ;
  16: CALL 370 0 0
// Action ;
  20: CALL 3669 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// enable ( entranceEvent ) ;
 359: LD_INT 1
 361: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 362: LD_INT 2
 364: DISABLE_MARKED
// end ; end_of_file
 365: LD_VAR 0 1
 369: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 370: LD_INT 0
 372: PPUSH
 373: PPUSH
// uc_side := 4 ;
 374: LD_ADDR_OWVAR 20
 378: PUSH
 379: LD_INT 4
 381: ST_TO_ADDR
// uc_nation := 1 ;
 382: LD_ADDR_OWVAR 21
 386: PUSH
 387: LD_INT 1
 389: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 390: LD_ADDR_EXP 50
 394: PUSH
 395: LD_STRING 07_Americans
 397: PPUSH
 398: CALL_OW 31
 402: ST_TO_ADDR
// if americanSquad < 5 then
 403: LD_EXP 50
 407: PUSH
 408: LD_INT 5
 410: LESS
 411: IFFALSE 505
// begin if not americanSquad then
 413: LD_EXP 50
 417: NOT
 418: IFFALSE 427
// americanSquad := [ ] ;
 420: LD_ADDR_EXP 50
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 427: LD_ADDR_VAR 0 2
 431: PUSH
 432: DOUBLE
 433: LD_EXP 50
 437: DEC
 438: ST_TO_ADDR
 439: LD_INT 2
 441: PUSH
 442: LD_INT 3
 444: PUSH
 445: LD_INT 4
 447: PUSH
 448: LD_INT 4
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: PUSH
 463: FOR_TO
 464: IFFALSE 501
// begin PrepareHuman ( false , 2 , 6 ) ;
 466: LD_INT 0
 468: PPUSH
 469: LD_INT 2
 471: PPUSH
 472: LD_INT 6
 474: PPUSH
 475: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 479: LD_ADDR_EXP 50
 483: PUSH
 484: LD_EXP 50
 488: PPUSH
 489: CALL_OW 44
 493: PPUSH
 494: CALL 64192 0 2
 498: ST_TO_ADDR
// end ;
 499: GO 463
 501: POP
 502: POP
// end else
 503: GO 552
// for i := Count ( americanSquad ) downto 5 do
 505: LD_ADDR_VAR 0 2
 509: PUSH
 510: DOUBLE
 511: LD_EXP 50
 515: PPUSH
 516: CALL 28845 0 1
 520: INC
 521: ST_TO_ADDR
 522: LD_INT 5
 524: PUSH
 525: FOR_DOWNTO
 526: IFFALSE 550
// americanSquad := Delete ( americanSquad , i ) ;
 528: LD_ADDR_EXP 50
 532: PUSH
 533: LD_EXP 50
 537: PPUSH
 538: LD_VAR 0 2
 542: PPUSH
 543: CALL_OW 3
 547: ST_TO_ADDR
 548: GO 525
 550: POP
 551: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 552: LD_ADDR_EXP 52
 556: PUSH
 557: LD_STRING UsCommander
 559: PPUSH
 560: LD_EXP 1
 564: NOT
 565: PPUSH
 566: LD_STRING 07_
 568: PPUSH
 569: CALL 26743 0 3
 573: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 574: LD_INT 1
 576: PPUSH
 577: LD_INT 6
 579: PPUSH
 580: CALL_OW 381
// Jerry := CreateHuman ;
 584: LD_ADDR_EXP 53
 588: PUSH
 589: CALL_OW 44
 593: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 594: LD_EXP 53
 598: PPUSH
 599: LD_INT 33
 601: PPUSH
 602: CALL_OW 336
// if not Doug then
 606: LD_EXP 52
 610: NOT
 611: IFFALSE 633
// begin PrepareSoldier ( sex_male , 6 ) ;
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 6
 618: PPUSH
 619: CALL_OW 381
// Doug := CreateHuman ;
 623: LD_ADDR_EXP 52
 627: PUSH
 628: CALL_OW 44
 632: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 633: LD_EXP 52
 637: PPUSH
 638: LD_INT 33
 640: PPUSH
 641: CALL_OW 336
// if johnnySaved or debug then
 645: LD_EXP 3
 649: PUSH
 650: LD_EXP 1
 654: OR
 655: IFFALSE 682
// begin Harris := NewCharacter ( Harris ) ;
 657: LD_ADDR_EXP 51
 661: PUSH
 662: LD_STRING Harris
 664: PPUSH
 665: CALL_OW 25
 669: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 670: LD_EXP 51
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// end ; uc_side := 2 ;
 682: LD_ADDR_OWVAR 20
 686: PUSH
 687: LD_INT 2
 689: ST_TO_ADDR
// uc_nation := 2 ;
 690: LD_ADDR_OWVAR 21
 694: PUSH
 695: LD_INT 2
 697: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 698: LD_ADDR_EXP 38
 702: PUSH
 703: LD_STRING Heike
 705: PPUSH
 706: LD_EXP 1
 710: NOT
 711: PPUSH
 712: LD_EXP 2
 716: PPUSH
 717: CALL 26743 0 3
 721: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 722: LD_ADDR_EXP 41
 726: PUSH
 727: LD_STRING Ibrahim
 729: PPUSH
 730: LD_EXP 1
 734: NOT
 735: PPUSH
 736: LD_EXP 2
 740: PPUSH
 741: CALL 26743 0 3
 745: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 746: LD_ADDR_EXP 39
 750: PUSH
 751: LD_STRING Givi
 753: PPUSH
 754: LD_EXP 1
 758: NOT
 759: PPUSH
 760: LD_EXP 2
 764: PPUSH
 765: CALL 26743 0 3
 769: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 770: LD_ADDR_EXP 42
 774: PUSH
 775: LD_STRING Kamil
 777: PPUSH
 778: LD_EXP 1
 782: NOT
 783: PPUSH
 784: LD_EXP 2
 788: PPUSH
 789: CALL 26743 0 3
 793: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 794: LD_ADDR_EXP 43
 798: PUSH
 799: LD_STRING Kaia
 801: PPUSH
 802: LD_EXP 1
 806: NOT
 807: PPUSH
 808: LD_EXP 2
 812: PPUSH
 813: CALL 26743 0 3
 817: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 818: LD_ADDR_EXP 44
 822: PUSH
 823: LD_STRING Sophia
 825: PPUSH
 826: LD_EXP 1
 830: NOT
 831: PPUSH
 832: LD_EXP 2
 836: PPUSH
 837: CALL 26743 0 3
 841: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 842: LD_ADDR_EXP 45
 846: PUSH
 847: LD_STRING Markov
 849: PPUSH
 850: LD_EXP 1
 854: NOT
 855: PPUSH
 856: LD_EXP 2
 860: PPUSH
 861: CALL 26743 0 3
 865: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 866: LD_ADDR_EXP 48
 870: PUSH
 871: LD_STRING Aviradze
 873: PPUSH
 874: LD_EXP 1
 878: NOT
 879: PPUSH
 880: LD_EXP 2
 884: PPUSH
 885: CALL 26743 0 3
 889: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 890: LD_ADDR_EXP 47
 894: PUSH
 895: LD_STRING Kurt
 897: PPUSH
 898: LD_EXP 1
 902: NOT
 903: PPUSH
 904: LD_EXP 2
 908: PPUSH
 909: CALL 26743 0 3
 913: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 914: LD_ADDR_EXP 40
 918: PUSH
 919: LD_STRING Mike
 921: PPUSH
 922: LD_EXP 1
 926: NOT
 927: PPUSH
 928: LD_EXP 2
 932: PPUSH
 933: CALL 26743 0 3
 937: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 938: LD_ADDR_EXP 46
 942: PUSH
 943: LD_STRING Olaf
 945: PPUSH
 946: LD_EXP 1
 950: NOT
 951: PPUSH
 952: LD_EXP 2
 956: PPUSH
 957: CALL 26743 0 3
 961: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 962: LD_ADDR_EXP 49
 966: PUSH
 967: LD_STRING 07_others
 969: PPUSH
 970: CALL_OW 31
 974: ST_TO_ADDR
// end ;
 975: LD_VAR 0 1
 979: RET
// export function PrepareGame ; var i ; begin
 980: LD_INT 0
 982: PPUSH
 983: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 984: LD_EXP 38
 988: PPUSH
 989: LD_INT 23
 991: PPUSH
 992: CALL_OW 52
// if Givi then
 996: LD_EXP 39
1000: IFFALSE 1038
// begin SetSide ( Givi , 5 ) ;
1002: LD_EXP 39
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1014: LD_EXP 39
1018: PPUSH
1019: LD_INT 9
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: CALL_OW 49
// ComHold ( Givi ) ;
1029: LD_EXP 39
1033: PPUSH
1034: CALL_OW 140
// end ; if Markov then
1038: LD_EXP 45
1042: IFFALSE 1080
// begin SetSide ( Markov , 5 ) ;
1044: LD_EXP 45
1048: PPUSH
1049: LD_INT 5
1051: PPUSH
1052: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1056: LD_EXP 45
1060: PPUSH
1061: LD_INT 3
1063: PPUSH
1064: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1068: LD_EXP 45
1072: PPUSH
1073: LD_INT 61
1075: PPUSH
1076: CALL_OW 52
// end ; if Mike then
1080: LD_EXP 40
1084: IFFALSE 1122
// begin SetSide ( Mike , 5 ) ;
1086: LD_EXP 40
1090: PPUSH
1091: LD_INT 5
1093: PPUSH
1094: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1098: LD_EXP 40
1102: PPUSH
1103: LD_INT 17
1105: PPUSH
1106: LD_INT 0
1108: PPUSH
1109: CALL_OW 49
// ComHold ( Mike ) ;
1113: LD_EXP 40
1117: PPUSH
1118: CALL_OW 140
// end ; if Olaf then
1122: LD_EXP 46
1126: IFFALSE 1167
// begin SetSide ( Olaf , 5 ) ;
1128: LD_EXP 46
1132: PPUSH
1133: LD_INT 5
1135: PPUSH
1136: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1140: LD_EXP 46
1144: PPUSH
1145: LD_INT 16
1147: PPUSH
1148: LD_INT 0
1150: PPUSH
1151: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1155: LD_EXP 46
1159: PPUSH
1160: LD_INT 3
1162: PPUSH
1163: CALL 67344 0 2
// end ; if Kamil then
1167: LD_EXP 42
1171: IFFALSE 1197
// begin SetSide ( Kamil , 5 ) ;
1173: LD_EXP 42
1177: PPUSH
1178: LD_INT 5
1180: PPUSH
1181: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1185: LD_EXP 42
1189: PPUSH
1190: LD_INT 109
1192: PPUSH
1193: CALL_OW 52
// end ; if Kurt then
1197: LD_EXP 47
1201: IFFALSE 1227
// begin SetSide ( Kurt , 5 ) ;
1203: LD_EXP 47
1207: PPUSH
1208: LD_INT 5
1210: PPUSH
1211: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1215: LD_EXP 47
1219: PPUSH
1220: LD_INT 169
1222: PPUSH
1223: CALL_OW 52
// end ; if Kaia then
1227: LD_EXP 43
1231: IFFALSE 1257
// begin SetSide ( Kaia , 5 ) ;
1233: LD_EXP 43
1237: PPUSH
1238: LD_INT 5
1240: PPUSH
1241: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1245: LD_EXP 43
1249: PPUSH
1250: LD_INT 147
1252: PPUSH
1253: CALL_OW 52
// end ; if Sophia then
1257: LD_EXP 44
1261: IFFALSE 1302
// begin SetSide ( Sophia , 5 ) ;
1263: LD_EXP 44
1267: PPUSH
1268: LD_INT 5
1270: PPUSH
1271: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1275: LD_EXP 44
1279: PPUSH
1280: LD_INT 142
1282: PPUSH
1283: LD_INT 96
1285: PPUSH
1286: LD_INT 0
1288: PPUSH
1289: CALL_OW 48
// ComHold ( Sophia ) ;
1293: LD_EXP 44
1297: PPUSH
1298: CALL_OW 140
// end ; if Harris then
1302: LD_EXP 51
1306: IFFALSE 1344
// begin SetSide ( Harris , 4 ) ;
1308: LD_EXP 51
1312: PPUSH
1313: LD_INT 4
1315: PPUSH
1316: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1320: LD_EXP 51
1324: PPUSH
1325: LD_INT 20
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// ComHold ( i ) ;
1335: LD_VAR 0 2
1339: PPUSH
1340: CALL_OW 140
// end ; if Doug then
1344: LD_EXP 52
1348: IFFALSE 1374
// begin SetSide ( Doug , 4 ) ;
1350: LD_EXP 52
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1362: LD_EXP 52
1366: PPUSH
1367: LD_INT 106
1369: PPUSH
1370: CALL_OW 52
// end ; if Aviradze then
1374: LD_EXP 48
1378: IFFALSE 1404
// begin SetSide ( Aviradze , 5 ) ;
1380: LD_EXP 48
1384: PPUSH
1385: LD_INT 5
1387: PPUSH
1388: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1392: LD_EXP 48
1396: PPUSH
1397: LD_INT 119
1399: PPUSH
1400: CALL_OW 52
// end ; if Ibrahim then
1404: LD_EXP 41
1408: IFFALSE 1434
// begin SetSide ( Ibrahim , 5 ) ;
1410: LD_EXP 41
1414: PPUSH
1415: LD_INT 5
1417: PPUSH
1418: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1422: LD_EXP 41
1426: PPUSH
1427: LD_INT 119
1429: PPUSH
1430: CALL_OW 52
// end ; if Jerry then
1434: LD_EXP 53
1438: IFFALSE 1479
// begin SetSide ( Jerry , 4 ) ;
1440: LD_EXP 53
1444: PPUSH
1445: LD_INT 4
1447: PPUSH
1448: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1452: LD_EXP 53
1456: PPUSH
1457: LD_INT 119
1459: PPUSH
1460: LD_INT 59
1462: PPUSH
1463: LD_INT 0
1465: PPUSH
1466: CALL_OW 48
// ComHold ( Jerry ) ;
1470: LD_EXP 53
1474: PPUSH
1475: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1479: LD_EXP 57
1483: PPUSH
1484: LD_INT 119
1486: PPUSH
1487: CALL_OW 52
// for i in americanSquad do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: LD_EXP 50
1500: PUSH
1501: FOR_IN
1502: IFFALSE 1530
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1504: LD_VAR 0 2
1508: PPUSH
1509: LD_INT 21
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// ComHold ( i ) ;
1519: LD_VAR 0 2
1523: PPUSH
1524: CALL_OW 140
// end ;
1528: GO 1501
1530: POP
1531: POP
// for i in heikeSecondSquad do
1532: LD_ADDR_VAR 0 2
1536: PUSH
1537: LD_EXP 49
1541: PUSH
1542: FOR_IN
1543: IFFALSE 1583
// begin SetSide ( i , 5 ) ;
1545: LD_VAR 0 2
1549: PPUSH
1550: LD_INT 5
1552: PPUSH
1553: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1557: LD_VAR 0 2
1561: PPUSH
1562: LD_INT 22
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 49
// ComHold ( i ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: CALL_OW 140
// end ;
1581: GO 1542
1583: POP
1584: POP
// if not hasVodka then
1585: LD_EXP 4
1589: NOT
1590: IFFALSE 1649
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1592: LD_ADDR_VAR 0 2
1596: PUSH
1597: LD_INT 2
1599: PUSH
1600: LD_INT 22
1602: PUSH
1603: LD_INT 2
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: LD_INT 22
1612: PUSH
1613: LD_INT 5
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: PPUSH
1625: CALL_OW 69
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1647
// SetLives ( i , 500 ) ;
1633: LD_VAR 0 2
1637: PPUSH
1638: LD_INT 500
1640: PPUSH
1641: CALL_OW 234
1645: GO 1630
1647: POP
1648: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: LD_INT 22
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: PUSH
1669: FOR_IN
1670: IFFALSE 1686
// SetLives ( i , 500 ) ;
1672: LD_VAR 0 2
1676: PPUSH
1677: LD_INT 500
1679: PPUSH
1680: CALL_OW 234
1684: GO 1669
1686: POP
1687: POP
// end ;
1688: LD_VAR 0 1
1692: RET
// export function SetClassKaiaRevolver ; begin
1693: LD_INT 0
1695: PPUSH
// if IsOk ( Kaia ) then
1696: LD_EXP 43
1700: PPUSH
1701: CALL_OW 302
1705: IFFALSE 1719
// SetClass ( Kaia , class_revolver ) ;
1707: LD_EXP 43
1711: PPUSH
1712: LD_INT 34
1714: PPUSH
1715: CALL_OW 336
// end ;
1719: LD_VAR 0 1
1723: RET
// export function SpawnHeikeAsRussian ; begin
1724: LD_INT 0
1726: PPUSH
// RemoveUnit ( Heike ) ;
1727: LD_EXP 38
1731: PPUSH
1732: CALL_OW 64
// heikeTmp := Heike ;
1736: LD_ADDR_EXP 54
1740: PUSH
1741: LD_EXP 38
1745: ST_TO_ADDR
// uc_side := 2 ;
1746: LD_ADDR_OWVAR 20
1750: PUSH
1751: LD_INT 2
1753: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1754: LD_ADDR_EXP 38
1758: PUSH
1759: LD_STRING HeikeRu
1761: PPUSH
1762: CALL_OW 25
1766: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1767: LD_EXP 54
1771: PPUSH
1772: LD_EXP 38
1776: PPUSH
1777: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1781: LD_EXP 38
1785: PPUSH
1786: LD_INT 165
1788: PPUSH
1789: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1793: LD_EXP 38
1797: PPUSH
1798: LD_INT 1
1800: PPUSH
1801: CALL_OW 336
// heikeAsRussian := true ;
1805: LD_ADDR_EXP 27
1809: PUSH
1810: LD_INT 1
1812: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1813: LD_STRING M1-laundry-out
1815: PPUSH
1816: CALL_OW 604
// end ;
1820: LD_VAR 0 1
1824: RET
// export function SpawnGiviAsRussian ; begin
1825: LD_INT 0
1827: PPUSH
// RemoveUnit ( Givi ) ;
1828: LD_EXP 39
1832: PPUSH
1833: CALL_OW 64
// giviTmp := Givi ;
1837: LD_ADDR_EXP 55
1841: PUSH
1842: LD_EXP 39
1846: ST_TO_ADDR
// uc_side := 2 ;
1847: LD_ADDR_OWVAR 20
1851: PUSH
1852: LD_INT 2
1854: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1855: LD_ADDR_EXP 39
1859: PUSH
1860: LD_STRING GiviRu
1862: PPUSH
1863: CALL_OW 25
1867: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1868: LD_EXP 55
1872: PPUSH
1873: LD_EXP 39
1877: PPUSH
1878: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1882: LD_EXP 39
1886: PPUSH
1887: LD_INT 165
1889: PPUSH
1890: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1894: LD_EXP 39
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL_OW 336
// giviAsRussian := true ;
1906: LD_ADDR_EXP 28
1910: PUSH
1911: LD_INT 1
1913: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1914: LD_STRING M1-laundry-out
1916: PPUSH
1917: CALL_OW 604
// end ; end_of_file
1921: LD_VAR 0 1
1925: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
1926: LD_INT 0
1928: PPUSH
1929: PPUSH
1930: PPUSH
1931: PPUSH
1932: PPUSH
// uc_side := 3 ;
1933: LD_ADDR_OWVAR 20
1937: PUSH
1938: LD_INT 3
1940: ST_TO_ADDR
// uc_nation := 3 ;
1941: LD_ADDR_OWVAR 21
1945: PUSH
1946: LD_INT 3
1948: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
1949: LD_INT 192
1951: PPUSH
1952: LD_STRING kitchen
1954: PPUSH
1955: CALL_OW 500
// SetBName ( laundry , laundry ) ;
1959: LD_INT 165
1961: PPUSH
1962: LD_STRING laundry
1964: PPUSH
1965: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
1969: LD_INT 54
1971: PPUSH
1972: LD_STRING adminSection
1974: PPUSH
1975: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: LD_INT 21
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PPUSH
1994: CALL_OW 69
1998: PUSH
1999: FOR_IN
2000: IFFALSE 2016
// SetBLevel ( i , 7 ) ;
2002: LD_VAR 0 2
2006: PPUSH
2007: LD_INT 7
2009: PPUSH
2010: CALL_OW 241
2014: GO 1999
2016: POP
2017: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2018: LD_ADDR_VAR 0 2
2022: PUSH
2023: LD_INT 22
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 30
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 30
2048: PUSH
2049: LD_INT 1
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PPUSH
2065: CALL_OW 69
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2135
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: CALL_OW 274
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: LD_INT 1000
2088: PPUSH
2089: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2093: LD_VAR 0 2
2097: PPUSH
2098: CALL_OW 274
2102: PPUSH
2103: LD_INT 2
2105: PPUSH
2106: LD_INT 1000
2108: PPUSH
2109: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2113: LD_VAR 0 2
2117: PPUSH
2118: CALL_OW 274
2122: PPUSH
2123: LD_INT 3
2125: PPUSH
2126: LD_INT 100
2128: PPUSH
2129: CALL_OW 277
// end ;
2133: GO 2070
2135: POP
2136: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2137: LD_ADDR_VAR 0 2
2141: PUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 30
2154: PUSH
2155: LD_INT 32
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PPUSH
2166: CALL_OW 69
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2206
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2174: LD_INT 0
2176: PPUSH
2177: LD_INT 5
2179: PUSH
2180: LD_OWVAR 67
2184: PLUS
2185: PPUSH
2186: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2190: CALL_OW 44
2194: PPUSH
2195: LD_VAR 0 2
2199: PPUSH
2200: CALL_OW 52
// end ;
2204: GO 2171
2206: POP
2207: POP
// for i := 1 to 2 do
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: DOUBLE
2214: LD_INT 1
2216: DEC
2217: ST_TO_ADDR
2218: LD_INT 2
2220: PUSH
2221: FOR_TO
2222: IFFALSE 2274
// begin PrepareMechanic ( false , 8 ) ;
2224: LD_INT 0
2226: PPUSH
2227: LD_INT 8
2229: PPUSH
2230: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2234: LD_ADDR_EXP 59
2238: PUSH
2239: LD_EXP 59
2243: PPUSH
2244: CALL_OW 44
2248: PPUSH
2249: CALL 64192 0 2
2253: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2254: LD_EXP 59
2258: PUSH
2259: LD_EXP 59
2263: ARRAY
2264: PPUSH
2265: LD_INT 61
2267: PPUSH
2268: CALL_OW 52
// end ;
2272: GO 2221
2274: POP
2275: POP
// PrepareMechanic ( sex_male , 8 ) ;
2276: LD_INT 1
2278: PPUSH
2279: LD_INT 8
2281: PPUSH
2282: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2286: LD_ADDR_EXP 60
2290: PUSH
2291: LD_EXP 60
2295: PPUSH
2296: CALL_OW 44
2300: PPUSH
2301: CALL 64192 0 2
2305: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2306: LD_EXP 60
2310: PUSH
2311: LD_EXP 60
2315: ARRAY
2316: PPUSH
2317: LD_INT 196
2319: PPUSH
2320: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2324: LD_INT 1
2326: PPUSH
2327: LD_INT 8
2329: PPUSH
2330: CALL_OW 383
// hc_name := Stiepan Simonov ;
2334: LD_ADDR_OWVAR 26
2338: PUSH
2339: LD_STRING Stiepan Simonov
2341: ST_TO_ADDR
// Stiopa := CreateHuman ;
2342: LD_ADDR_EXP 61
2346: PUSH
2347: CALL_OW 44
2351: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2352: LD_INT 2
2354: PPUSH
2355: LD_INT 8
2357: PPUSH
2358: CALL_OW 383
// hc_name := Laura Dragunov ;
2362: LD_ADDR_OWVAR 26
2366: PUSH
2367: LD_STRING Laura Dragunov
2369: ST_TO_ADDR
// Laura := CreateHuman ;
2370: LD_ADDR_EXP 62
2374: PUSH
2375: CALL_OW 44
2379: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2380: LD_EXP 62
2384: PPUSH
2385: LD_INT 196
2387: PPUSH
2388: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2392: LD_INT 1
2394: PPUSH
2395: LD_INT 8
2397: PPUSH
2398: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2402: LD_ADDR_EXP 59
2406: PUSH
2407: LD_EXP 59
2411: PPUSH
2412: LD_INT 1
2414: PPUSH
2415: CALL_OW 44
2419: PPUSH
2420: CALL_OW 2
2424: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2425: LD_EXP 59
2429: PUSH
2430: LD_INT 1
2432: ARRAY
2433: PPUSH
2434: LD_INT 61
2436: PPUSH
2437: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2441: LD_INT 1
2443: PPUSH
2444: LD_INT 8
2446: PPUSH
2447: CALL_OW 381
// hc_name := Pavel Muchin ;
2451: LD_ADDR_OWVAR 26
2455: PUSH
2456: LD_STRING Pavel Muchin
2458: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2459: LD_ADDR_OWVAR 29
2463: PUSH
2464: LD_INT 13
2466: PUSH
2467: LD_INT 13
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2474: LD_ADDR_EXP 58
2478: PUSH
2479: CALL_OW 44
2483: ST_TO_ADDR
// InitHC_All ( ) ;
2484: CALL_OW 584
// if Difficulty > 1 then
2488: LD_OWVAR 67
2492: PUSH
2493: LD_INT 1
2495: GREATER
2496: IFFALSE 2616
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2498: LD_ADDR_VAR 0 2
2502: PUSH
2503: DOUBLE
2504: LD_INT 1
2506: DEC
2507: ST_TO_ADDR
2508: LD_INT 3
2510: PUSH
2511: LD_INT 4
2513: PUSH
2514: LD_INT 5
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: PUSH
2522: LD_OWVAR 67
2526: PUSH
2527: LD_INT 1
2529: PLUS
2530: ARRAY
2531: PUSH
2532: FOR_TO
2533: IFFALSE 2614
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2535: LD_INT 0
2537: PPUSH
2538: LD_INT 5
2540: PUSH
2541: LD_INT 6
2543: PUSH
2544: LD_INT 7
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: LIST
2551: PUSH
2552: LD_OWVAR 67
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 381
// un := CreateHuman ;
2566: LD_ADDR_VAR 0 4
2570: PUSH
2571: CALL_OW 44
2575: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2576: LD_VAR 0 4
2580: PPUSH
2581: LD_INT 62
2583: PUSH
2584: LD_INT 63
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_VAR 0 2
2595: PUSH
2596: LD_INT 2
2598: MOD
2599: PUSH
2600: LD_INT 1
2602: PLUS
2603: ARRAY
2604: PPUSH
2605: LD_INT 0
2607: PPUSH
2608: CALL_OW 49
// end ;
2612: GO 2532
2614: POP
2615: POP
// end ; uc_side := 6 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 6
2623: ST_TO_ADDR
// uc_nation := 3 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 3
2631: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2632: LD_ADDR_VAR 0 5
2636: PUSH
2637: LD_INT 14
2639: PUSH
2640: LD_INT 15
2642: PUSH
2643: LD_INT 48
2645: PUSH
2646: LD_INT 24
2648: PUSH
2649: LD_INT 149
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: ST_TO_ADDR
// for i in tmp do
2659: LD_ADDR_VAR 0 2
2663: PUSH
2664: LD_VAR 0 5
2668: PUSH
2669: FOR_IN
2670: IFFALSE 2718
// begin for j := 1 to 2 do
2672: LD_ADDR_VAR 0 3
2676: PUSH
2677: DOUBLE
2678: LD_INT 1
2680: DEC
2681: ST_TO_ADDR
2682: LD_INT 2
2684: PUSH
2685: FOR_TO
2686: IFFALSE 2714
// begin PrepareSoldier ( false , 7 ) ;
2688: LD_INT 0
2690: PPUSH
2691: LD_INT 7
2693: PPUSH
2694: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2698: CALL_OW 44
2702: PPUSH
2703: LD_VAR 0 2
2707: PPUSH
2708: CALL_OW 52
// end ;
2712: GO 2685
2714: POP
2715: POP
// end ;
2716: GO 2669
2718: POP
2719: POP
// end ;
2720: LD_VAR 0 1
2724: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2725: LD_INT 0
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
// uc_side := 3 ;
2731: LD_ADDR_OWVAR 20
2735: PUSH
2736: LD_INT 3
2738: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2739: LD_ADDR_OWVAR 21
2743: PUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: CALL_OW 12
2754: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2755: LD_ADDR_VAR 0 4
2759: PUSH
2760: LD_INT 5
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 517
2770: ST_TO_ADDR
// for i := 1 to 3 do
2771: LD_ADDR_VAR 0 2
2775: PUSH
2776: DOUBLE
2777: LD_INT 1
2779: DEC
2780: ST_TO_ADDR
2781: LD_INT 3
2783: PUSH
2784: FOR_TO
2785: IFFALSE 2854
// begin PrepareHuman ( false , 33 , 0 ) ;
2787: LD_INT 0
2789: PPUSH
2790: LD_INT 33
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 380
// un := CreateHuman ;
2800: LD_ADDR_VAR 0 3
2804: PUSH
2805: CALL_OW 44
2809: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2810: LD_VAR 0 3
2814: PPUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PUSH
2824: LD_VAR 0 2
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 4
2834: PUSH
2835: LD_INT 2
2837: ARRAY
2838: PUSH
2839: LD_VAR 0 2
2843: ARRAY
2844: PPUSH
2845: LD_INT 1
2847: PPUSH
2848: CALL_OW 601
// end ;
2852: GO 2784
2854: POP
2855: POP
// end ;
2856: LD_VAR 0 1
2860: RET
// export function PrepareFirstScene ; var i , un ; begin
2861: LD_INT 0
2863: PPUSH
2864: PPUSH
2865: PPUSH
// uc_side := 4 ;
2866: LD_ADDR_OWVAR 20
2870: PUSH
2871: LD_INT 4
2873: ST_TO_ADDR
// uc_nation := 1 ;
2874: LD_ADDR_OWVAR 21
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2882: LD_INT 0
2884: PPUSH
2885: LD_INT 33
2887: PPUSH
2888: LD_INT 0
2890: PPUSH
2891: CALL_OW 380
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2974
// begin un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2921: LD_VAR 0 3
2925: PPUSH
2926: LD_INT 1
2928: PPUSH
2929: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2933: LD_VAR 0 3
2937: PPUSH
2938: LD_INT 6
2940: PPUSH
2941: LD_INT 0
2943: PPUSH
2944: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2948: LD_VAR 0 3
2952: PPUSH
2953: LD_INT 1
2955: PPUSH
2956: CALL 67344 0 2
// SetLives ( un , 300 ) ;
2960: LD_VAR 0 3
2964: PPUSH
2965: LD_INT 300
2967: PPUSH
2968: CALL_OW 234
// end ;
2972: GO 2908
2974: POP
2975: POP
// uc_side := 3 ;
2976: LD_ADDR_OWVAR 20
2980: PUSH
2981: LD_INT 3
2983: ST_TO_ADDR
// uc_nation := 3 ;
2984: LD_ADDR_OWVAR 21
2988: PUSH
2989: LD_INT 3
2991: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 5
2997: PPUSH
2998: CALL_OW 381
// for i := 1 to 3 do
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: FOR_TO
3016: IFFALSE 3089
// begin un := CreateHuman ;
3018: LD_ADDR_VAR 0 3
3022: PUSH
3023: CALL_OW 44
3027: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3028: LD_ADDR_EXP 56
3032: PUSH
3033: LD_EXP 56
3037: PPUSH
3038: LD_VAR 0 3
3042: PPUSH
3043: CALL 64192 0 2
3047: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3048: LD_VAR 0 3
3052: PPUSH
3053: LD_INT 4
3055: PPUSH
3056: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3060: LD_VAR 0 3
3064: PPUSH
3065: LD_INT 7
3067: PPUSH
3068: LD_INT 0
3070: PPUSH
3071: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3075: LD_VAR 0 3
3079: PPUSH
3080: LD_INT 4
3082: PPUSH
3083: CALL 67344 0 2
// end ;
3087: GO 3015
3089: POP
3090: POP
// ruCommisar := CreateHuman ;
3091: LD_ADDR_EXP 57
3095: PUSH
3096: CALL_OW 44
3100: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3101: LD_EXP 57
3105: PPUSH
3106: LD_INT 124
3108: PPUSH
3109: LD_INT 37
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3119: LD_EXP 57
3123: PPUSH
3124: LD_INT 3
3126: PPUSH
3127: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3131: LD_EXP 57
3135: PPUSH
3136: LD_INT 3
3138: PPUSH
3139: CALL 67344 0 2
// end ;
3143: LD_VAR 0 1
3147: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3148: LD_INT 0
3150: PPUSH
3151: PPUSH
3152: PPUSH
3153: PPUSH
// uc_side := 6 ;
3154: LD_ADDR_OWVAR 20
3158: PUSH
3159: LD_INT 6
3161: ST_TO_ADDR
// uc_nation := 3 ;
3162: LD_ADDR_OWVAR 21
3166: PUSH
3167: LD_INT 3
3169: ST_TO_ADDR
// ruPatrol := [ ] ;
3170: LD_ADDR_EXP 63
3174: PUSH
3175: EMPTY
3176: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 26
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 39
3190: PUSH
3191: LD_INT 43
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: ST_TO_ADDR
// for i := 1 to spawn do
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: DOUBLE
3206: LD_INT 1
3208: DEC
3209: ST_TO_ADDR
3210: LD_VAR 0 4
3214: PUSH
3215: FOR_TO
3216: IFFALSE 3327
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3218: LD_INT 0
3220: PPUSH
3221: LD_INT 4
3223: PUSH
3224: LD_INT 5
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 7
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: PUSH
3239: LD_OWVAR 67
3243: ARRAY
3244: PPUSH
3245: CALL_OW 381
// un := CreateHuman ;
3249: LD_ADDR_VAR 0 3
3253: PUSH
3254: CALL_OW 44
3258: ST_TO_ADDR
// SetTag ( un , i ) ;
3259: LD_VAR 0 3
3263: PPUSH
3264: LD_VAR 0 2
3268: PPUSH
3269: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3273: LD_ADDR_EXP 63
3277: PUSH
3278: LD_EXP 63
3282: PPUSH
3283: LD_VAR 0 3
3287: PPUSH
3288: CALL 64192 0 2
3292: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3293: LD_VAR 0 3
3297: PPUSH
3298: LD_VAR 0 4
3302: PUSH
3303: LD_VAR 0 2
3307: ARRAY
3308: PPUSH
3309: LD_INT 0
3311: PPUSH
3312: CALL_OW 49
// ComHold ( un ) ;
3316: LD_VAR 0 3
3320: PPUSH
3321: CALL_OW 140
// end ;
3325: GO 3215
3327: POP
3328: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3329: LD_ADDR_VAR 0 4
3333: PUSH
3334: LD_INT 48
3336: PUSH
3337: LD_INT 49
3339: PUSH
3340: LD_INT 50
3342: PUSH
3343: LD_INT 51
3345: PUSH
3346: LD_INT 52
3348: PUSH
3349: LD_INT 53
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: ST_TO_ADDR
// for i := 1 to spawn do
3360: LD_ADDR_VAR 0 2
3364: PUSH
3365: DOUBLE
3366: LD_INT 1
3368: DEC
3369: ST_TO_ADDR
3370: LD_VAR 0 4
3374: PUSH
3375: FOR_TO
3376: IFFALSE 3485
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3378: LD_INT 0
3380: PPUSH
3381: LD_INT 4
3383: PUSH
3384: LD_INT 5
3386: PUSH
3387: LD_INT 6
3389: PUSH
3390: LD_INT 7
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: PUSH
3399: LD_OWVAR 67
3403: ARRAY
3404: PPUSH
3405: CALL_OW 381
// un := CreateHuman ;
3409: LD_ADDR_VAR 0 3
3413: PUSH
3414: CALL_OW 44
3418: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3431: LD_ADDR_EXP 63
3435: PUSH
3436: LD_EXP 63
3440: PPUSH
3441: LD_VAR 0 3
3445: PPUSH
3446: CALL 64192 0 2
3450: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3451: LD_VAR 0 3
3455: PPUSH
3456: LD_VAR 0 4
3460: PUSH
3461: LD_VAR 0 2
3465: ARRAY
3466: PPUSH
3467: LD_INT 0
3469: PPUSH
3470: CALL_OW 49
// ComHold ( un ) ;
3474: LD_VAR 0 3
3478: PPUSH
3479: CALL_OW 140
// end ;
3483: GO 3375
3485: POP
3486: POP
// end ;
3487: LD_VAR 0 1
3491: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3492: LD_INT 0
3494: PPUSH
3495: PPUSH
3496: PPUSH
3497: PPUSH
// uc_side := 6 ;
3498: LD_ADDR_OWVAR 20
3502: PUSH
3503: LD_INT 6
3505: ST_TO_ADDR
// uc_nation := nation_russian ;
3506: LD_ADDR_OWVAR 21
3510: PUSH
3511: LD_INT 3
3513: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_INT 54
3521: PUSH
3522: LD_INT 55
3524: PUSH
3525: LD_INT 56
3527: PUSH
3528: LD_INT 57
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: ST_TO_ADDR
// for i := 1 to spawn do
3537: LD_ADDR_VAR 0 2
3541: PUSH
3542: DOUBLE
3543: LD_INT 1
3545: DEC
3546: ST_TO_ADDR
3547: LD_VAR 0 4
3551: PUSH
3552: FOR_TO
3553: IFFALSE 3662
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3555: LD_INT 0
3557: PPUSH
3558: LD_INT 4
3560: PUSH
3561: LD_INT 5
3563: PUSH
3564: LD_INT 6
3566: PUSH
3567: LD_INT 7
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: PUSH
3576: LD_OWVAR 67
3580: ARRAY
3581: PPUSH
3582: CALL_OW 381
// un := CreateHuman ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: CALL_OW 44
3595: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3596: LD_VAR 0 3
3600: PPUSH
3601: LD_INT 0
3603: PPUSH
3604: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3608: LD_ADDR_EXP 63
3612: PUSH
3613: LD_EXP 63
3617: PPUSH
3618: LD_VAR 0 3
3622: PPUSH
3623: CALL 64192 0 2
3627: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_VAR 0 4
3637: PUSH
3638: LD_VAR 0 2
3642: ARRAY
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL_OW 49
// ComHold ( un ) ;
3651: LD_VAR 0 3
3655: PPUSH
3656: CALL_OW 140
// end ;
3660: GO 3552
3662: POP
3663: POP
// end ; end_of_file
3664: LD_VAR 0 1
3668: RET
// export function Action ; var speaker , i , tmp ; begin
3669: LD_INT 0
3671: PPUSH
3672: PPUSH
3673: PPUSH
3674: PPUSH
// Video ( true ) ;
3675: LD_INT 1
3677: PPUSH
3678: CALL 64164 0 1
// hasNormalScene := Kaia or Givi ;
3682: LD_ADDR_EXP 5
3686: PUSH
3687: LD_EXP 43
3691: PUSH
3692: LD_EXP 39
3696: OR
3697: ST_TO_ADDR
// if hasNormalScene then
3698: LD_EXP 5
3702: IFFALSE 3943
// begin for i in americanSquad do
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_EXP 50
3713: PUSH
3714: FOR_IN
3715: IFFALSE 3761
// begin SetClass ( i , class_prison ) ;
3717: LD_VAR 0 3
3721: PPUSH
3722: LD_INT 33
3724: PPUSH
3725: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3729: LD_VAR 0 3
3733: PPUSH
3734: LD_INT 78
3736: PPUSH
3737: LD_INT 16
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: LD_INT 0
3745: PPUSH
3746: CALL_OW 50
// ComHold ( i ) ;
3750: LD_VAR 0 3
3754: PPUSH
3755: CALL_OW 140
// end ;
3759: GO 3714
3761: POP
3762: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3763: LD_ADDR_VAR 0 4
3767: PUSH
3768: LD_EXP 40
3772: PUSH
3773: LD_EXP 41
3777: PUSH
3778: LD_EXP 42
3782: PUSH
3783: LD_EXP 43
3787: PUSH
3788: LD_EXP 44
3792: PUSH
3793: LD_EXP 45
3797: PUSH
3798: LD_EXP 46
3802: PUSH
3803: LD_EXP 47
3807: PUSH
3808: LD_EXP 39
3812: PUSH
3813: LD_EXP 48
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: PUSH
3830: LD_EXP 49
3834: UNION
3835: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3836: LD_EXP 38
3840: PPUSH
3841: LD_INT 33
3843: PPUSH
3844: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3848: LD_EXP 38
3852: PPUSH
3853: LD_INT 117
3855: PPUSH
3856: LD_INT 24
3858: PPUSH
3859: LD_INT 3
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL 66332 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3869: LD_EXP 38
3873: PPUSH
3874: LD_INT 123
3876: PPUSH
3877: LD_INT 39
3879: PPUSH
3880: CALL_OW 118
// for i in tmp do
3884: LD_ADDR_VAR 0 3
3888: PUSH
3889: LD_VAR 0 4
3893: PUSH
3894: FOR_IN
3895: IFFALSE 3941
// begin SetClass ( i , class_prison ) ;
3897: LD_VAR 0 3
3901: PPUSH
3902: LD_INT 33
3904: PPUSH
3905: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3909: LD_VAR 0 3
3913: PPUSH
3914: LD_INT 3
3916: PPUSH
3917: LD_INT 0
3919: PPUSH
3920: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
3924: LD_VAR 0 3
3928: PPUSH
3929: LD_INT 113
3931: PPUSH
3932: LD_INT 16
3934: PPUSH
3935: CALL_OW 118
// end ;
3939: GO 3894
3941: POP
3942: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
3943: LD_INT 124
3945: PPUSH
3946: LD_INT 39
3948: PPUSH
3949: CALL_OW 86
// PrepareDeadBodies ;
3953: CALL 2725 0 0
// PrepareFirstScene ;
3957: CALL 2861 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3961: LD_INT 152
3963: PPUSH
3964: LD_INT 65
3966: PPUSH
3967: LD_INT 2
3969: PPUSH
3970: LD_INT 70
3972: NEG
3973: PPUSH
3974: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3978: LD_INT 152
3980: PPUSH
3981: LD_INT 65
3983: PPUSH
3984: LD_INT 2
3986: PPUSH
3987: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
3991: LD_INT 122
3993: PPUSH
3994: LD_INT 40
3996: PPUSH
3997: LD_INT 2
3999: PPUSH
4000: LD_INT 8
4002: NEG
4003: PPUSH
4004: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4008: LD_INT 124
4010: PPUSH
4011: LD_INT 37
4013: PPUSH
4014: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4018: LD_EXP 57
4022: PPUSH
4023: LD_STRING DRum-Execution-1
4025: PPUSH
4026: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4030: LD_EXP 57
4034: PPUSH
4035: LD_STRING DRum-Execution-2
4037: PPUSH
4038: CALL_OW 88
// wait ( 0 0$01 ) ;
4042: LD_INT 35
4044: PPUSH
4045: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4049: LD_EXP 57
4053: PPUSH
4054: LD_STRING DRum-Execution-3
4056: PPUSH
4057: CALL_OW 88
// wait ( 0 0$1 ) ;
4061: LD_INT 35
4063: PPUSH
4064: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4068: LD_EXP 57
4072: PPUSH
4073: LD_STRING DRum-Execution-4
4075: PPUSH
4076: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4080: LD_EXP 56
4084: PUSH
4085: LD_INT 1
4087: ARRAY
4088: PPUSH
4089: LD_INT 122
4091: PPUSH
4092: LD_INT 39
4094: PPUSH
4095: CALL_OW 428
4099: PPUSH
4100: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4104: LD_EXP 56
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: PPUSH
4113: LD_INT 123
4115: PPUSH
4116: LD_INT 41
4118: PPUSH
4119: CALL_OW 428
4123: PPUSH
4124: CALL_OW 115
// AddComHold ( russianKillers ) ;
4128: LD_EXP 56
4132: PPUSH
4133: CALL_OW 200
// wait ( 0 0$1 ) ;
4137: LD_INT 35
4139: PPUSH
4140: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4144: LD_INT 122
4146: PPUSH
4147: LD_INT 40
4149: PPUSH
4150: LD_INT 2
4152: PPUSH
4153: CALL_OW 331
// for i in russianKillers union ruCommisar do
4157: LD_ADDR_VAR 0 3
4161: PUSH
4162: LD_EXP 56
4166: PUSH
4167: LD_EXP 57
4171: UNION
4172: PUSH
4173: FOR_IN
4174: IFFALSE 4187
// RemoveUnit ( i ) ;
4176: LD_VAR 0 3
4180: PPUSH
4181: CALL_OW 64
4185: GO 4173
4187: POP
4188: POP
// if hasNormalScene then
4189: LD_EXP 5
4193: IFFALSE 4201
// ActionNormal else
4195: CALL 4210 0 0
4199: GO 4205
// ActionAdditional ;
4201: CALL 6035 0 0
// end ;
4205: LD_VAR 0 1
4209: RET
// function ActionNormal ; var i , tmp ; begin
4210: LD_INT 0
4212: PPUSH
4213: PPUSH
4214: PPUSH
// CenterNowOnUnits ( Heike ) ;
4215: LD_EXP 38
4219: PPUSH
4220: CALL_OW 87
// wait ( 0 0$1 ) ;
4224: LD_INT 35
4226: PPUSH
4227: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4231: LD_EXP 38
4235: PPUSH
4236: LD_INT 115
4238: PPUSH
4239: LD_INT 19
4241: PPUSH
4242: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4246: LD_EXP 38
4250: PPUSH
4251: LD_INT 113
4253: PPUSH
4254: LD_INT 16
4256: PPUSH
4257: CALL_OW 178
// wait ( 0 0$2 ) ;
4261: LD_INT 70
4263: PPUSH
4264: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4268: LD_EXP 38
4272: PPUSH
4273: LD_STRING DH-Conspiracy-1
4275: PPUSH
4276: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4280: LD_EXP 43
4284: PPUSH
4285: LD_STRING DK-Conspiracy-2
4287: PPUSH
4288: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4292: LD_EXP 39
4296: PPUSH
4297: LD_STRING DG-Conspiracy-3
4299: PPUSH
4300: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4304: LD_EXP 39
4308: PPUSH
4309: LD_STRING DG-Conspiracy-4
4311: PPUSH
4312: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4316: LD_EXP 38
4320: PPUSH
4321: LD_STRING DH-Conspiracy-5
4323: PPUSH
4324: CALL_OW 88
// if IsOk ( Kamil ) then
4328: LD_EXP 42
4332: PPUSH
4333: CALL_OW 302
4337: IFFALSE 4395
// begin hasVodka := true ;
4339: LD_ADDR_EXP 4
4343: PUSH
4344: LD_INT 1
4346: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4347: LD_EXP 42
4351: PPUSH
4352: LD_STRING DKam-Conspiracy-6
4354: PPUSH
4355: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4359: LD_EXP 42
4363: PPUSH
4364: LD_STRING DKam-Conspiracy-7
4366: PPUSH
4367: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4371: LD_EXP 42
4375: PPUSH
4376: LD_STRING DKam-Conspiracy-8
4378: PPUSH
4379: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4383: LD_EXP 42
4387: PPUSH
4388: LD_STRING DKam-Conspiracy-9
4390: PPUSH
4391: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4395: LD_EXP 44
4399: PPUSH
4400: CALL_OW 302
4404: IFFALSE 4585
// begin americanContact := true ;
4406: LD_ADDR_EXP 10
4410: PUSH
4411: LD_INT 1
4413: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4414: LD_STRING M1-american
4416: PPUSH
4417: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4421: LD_EXP 44
4425: PPUSH
4426: LD_STRING DS-Conspiracy-10
4428: PPUSH
4429: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4433: LD_EXP 45
4437: PPUSH
4438: LD_STRING DM-Conspiracy-11
4440: PPUSH
4441: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4445: LD_EXP 44
4449: PPUSH
4450: LD_STRING DS-Conspiracy-12
4452: PPUSH
4453: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4457: LD_INT 84
4459: PPUSH
4460: LD_INT 19
4462: PPUSH
4463: LD_INT 105
4465: PPUSH
4466: CALL 18409 0 3
// if johnnySaved then
4470: LD_EXP 3
4474: IFFALSE 4514
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4476: LD_EXP 44
4480: PPUSH
4481: LD_STRING DS-Conspiracy-13
4483: PPUSH
4484: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4488: LD_EXP 38
4492: PPUSH
4493: LD_STRING DH-Conspiracy-14
4495: PPUSH
4496: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4500: LD_EXP 44
4504: PPUSH
4505: LD_STRING DH-Conspiracy-15
4507: PPUSH
4508: CALL_OW 88
// end else
4512: GO 4550
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4514: LD_EXP 44
4518: PPUSH
4519: LD_STRING DS-Conspiracy-a-13
4521: PPUSH
4522: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4526: LD_EXP 38
4530: PPUSH
4531: LD_STRING DH-Conspiracy-a-14
4533: PPUSH
4534: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4538: LD_EXP 44
4542: PPUSH
4543: LD_STRING DH-Conspiracy-a-15
4545: PPUSH
4546: CALL_OW 88
// end ; if IsOk ( Givi ) then
4550: LD_EXP 39
4554: PPUSH
4555: CALL_OW 302
4559: IFFALSE 4585
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4561: LD_EXP 39
4565: PPUSH
4566: LD_STRING DG-Conspiracy-a-16
4568: PPUSH
4569: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4573: LD_EXP 38
4577: PPUSH
4578: LD_STRING DH-Conspiracy-a-17
4580: PPUSH
4581: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4585: LD_EXP 38
4589: PPUSH
4590: LD_STRING DH-Conspiracy-16
4592: PPUSH
4593: CALL_OW 88
// if IsOk ( Givi ) then
4597: LD_EXP 39
4601: PPUSH
4602: CALL_OW 302
4606: IFFALSE 4878
// begin hasStimDrugs := true ;
4608: LD_ADDR_EXP 9
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4616: LD_STRING M1-drugs
4618: PPUSH
4619: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4623: LD_EXP 39
4627: PPUSH
4628: LD_STRING DG-Conspiracy-17
4630: PPUSH
4631: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4635: LD_INT 162
4637: PPUSH
4638: LD_INT 2
4640: PPUSH
4641: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4645: LD_INT 194
4647: PPUSH
4648: LD_INT 98
4650: PPUSH
4651: LD_INT 105
4653: PPUSH
4654: CALL 18409 0 3
// SetSide ( drugsLab , 3 ) ;
4658: LD_INT 162
4660: PPUSH
4661: LD_INT 3
4663: PPUSH
4664: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4668: LD_EXP 39
4672: PPUSH
4673: LD_STRING DG-Conspiracy-18
4675: PPUSH
4676: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4680: LD_EXP 39
4684: PPUSH
4685: LD_STRING DG-Conspiracy-19
4687: PPUSH
4688: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4692: LD_EXP 39
4696: PPUSH
4697: LD_STRING DG-Conspiracy-20
4699: PPUSH
4700: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4704: LD_EXP 38
4708: PPUSH
4709: LD_STRING DH-Conspiracy-21
4711: PPUSH
4712: CALL_OW 88
// if IsOk ( Kaia ) then
4716: LD_EXP 43
4720: PPUSH
4721: CALL_OW 302
4725: IFFALSE 4799
// begin hasExplosions := true ;
4727: LD_ADDR_EXP 6
4731: PUSH
4732: LD_INT 1
4734: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4735: LD_STRING M1-explosive
4737: PPUSH
4738: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4742: LD_EXP 43
4746: PPUSH
4747: LD_STRING DK-Conspiracy-22
4749: PPUSH
4750: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4754: LD_INT 73
4756: PPUSH
4757: LD_INT 2
4759: PPUSH
4760: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4764: LD_INT 170
4766: PPUSH
4767: LD_INT 104
4769: PPUSH
4770: LD_INT 105
4772: PPUSH
4773: CALL 18409 0 3
// SetSide ( barExplosion , 3 ) ;
4777: LD_INT 73
4779: PPUSH
4780: LD_INT 3
4782: PPUSH
4783: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4787: LD_EXP 43
4791: PPUSH
4792: LD_STRING DK-Conspiracy-23
4794: PPUSH
4795: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4799: LD_EXP 46
4803: PPUSH
4804: CALL_OW 302
4808: IFFALSE 4878
// begin hasExplosionsInFactory := true ;
4810: LD_ADDR_EXP 7
4814: PUSH
4815: LD_INT 1
4817: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4818: LD_EXP 46
4822: PPUSH
4823: LD_STRING DO-Conspiracy-24
4825: PPUSH
4826: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4830: LD_INT 175
4832: PPUSH
4833: LD_INT 54
4835: PPUSH
4836: LD_INT 70
4838: PPUSH
4839: CALL 18409 0 3
// if IsOk ( Markov ) then
4843: LD_EXP 45
4847: PPUSH
4848: CALL_OW 302
4852: IFFALSE 4878
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4854: LD_EXP 45
4858: PPUSH
4859: LD_STRING DMar-Conspiracy-25
4861: PPUSH
4862: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4866: LD_EXP 45
4870: PPUSH
4871: LD_STRING DMar-Conspiracy-26
4873: PPUSH
4874: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4878: LD_EXP 47
4882: PPUSH
4883: CALL_OW 302
4887: PUSH
4888: LD_EXP 43
4892: PPUSH
4893: CALL_OW 302
4897: AND
4898: IFFALSE 5358
// begin hasWeapons := true ;
4900: LD_ADDR_EXP 19
4904: PUSH
4905: LD_INT 1
4907: ST_TO_ADDR
// hasRevolver := true ;
4908: LD_ADDR_EXP 8
4912: PUSH
4913: LD_INT 1
4915: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
4916: LD_STRING M1-weapons
4918: PPUSH
4919: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
4923: LD_EXP 47
4927: PPUSH
4928: LD_STRING DKs-Conspiracy-27
4930: PPUSH
4931: CALL_OW 88
// if IsOk ( Givi ) then
4935: LD_EXP 39
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4960
// Say ( Givi , DG-Conspiracy-28 ) else
4946: LD_EXP 39
4950: PPUSH
4951: LD_STRING DG-Conspiracy-28
4953: PPUSH
4954: CALL_OW 88
4958: GO 5025
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
4960: LD_EXP 49
4964: PPUSH
4965: LD_INT 26
4967: PUSH
4968: LD_INT 1
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PPUSH
4975: CALL_OW 72
4979: PUSH
4980: LD_INT 1
4982: ARRAY
4983: PPUSH
4984: LD_STRING DArm-Conspiracy-a-28
4986: PPUSH
4987: CALL_OW 88
4991: NOT
4992: IFFALSE 5025
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
4994: LD_EXP 49
4998: PPUSH
4999: LD_INT 26
5001: PUSH
5002: LD_INT 2
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 72
5013: PUSH
5014: LD_INT 1
5016: ARRAY
5017: PPUSH
5018: LD_STRING DArf-Conspiracy-a-28
5020: PPUSH
5021: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5025: LD_EXP 47
5029: PPUSH
5030: LD_STRING DKs-Conspiracy-29
5032: PPUSH
5033: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5037: LD_INT 192
5039: PPUSH
5040: LD_INT 122
5042: PPUSH
5043: LD_INT 105
5045: PPUSH
5046: CALL 18409 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5050: LD_EXP 47
5054: PPUSH
5055: LD_STRING DKs-Conspiracy-30
5057: PPUSH
5058: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5062: LD_EXP 43
5066: PPUSH
5067: LD_STRING DK-Conspiracy-31
5069: PPUSH
5070: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5074: LD_EXP 45
5078: PPUSH
5079: LD_STRING DMar-Conspiracy-33
5081: PPUSH
5082: CALL_OW 88
5086: NOT
5087: PUSH
5088: LD_EXP 49
5092: AND
5093: IFFALSE 5160
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5095: LD_EXP 49
5099: PPUSH
5100: LD_INT 26
5102: PUSH
5103: LD_INT 1
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PPUSH
5110: CALL_OW 72
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: PPUSH
5119: LD_STRING DArm-Conspiracy-a-34
5121: PPUSH
5122: CALL_OW 88
5126: NOT
5127: IFFALSE 5160
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5129: LD_EXP 49
5133: PPUSH
5134: LD_INT 26
5136: PUSH
5137: LD_INT 2
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 72
5148: PUSH
5149: LD_INT 1
5151: ARRAY
5152: PPUSH
5153: LD_STRING DArf-Conspiracy-a-34
5155: PPUSH
5156: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5160: LD_EXP 43
5164: PPUSH
5165: LD_STRING DK-Conspiracy-34
5167: PPUSH
5168: CALL_OW 88
// if IsOk ( Markov ) then
5172: LD_EXP 45
5176: PPUSH
5177: CALL_OW 302
5181: IFFALSE 5266
// begin hasSniperRifle := true ;
5183: LD_ADDR_EXP 11
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5191: LD_EXP 45
5195: PPUSH
5196: LD_STRING DMar-Conspiracy-35
5198: PPUSH
5199: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5203: LD_EXP 43
5207: PPUSH
5208: LD_STRING DK-Conspiracy-36
5210: PPUSH
5211: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5215: LD_EXP 45
5219: PPUSH
5220: LD_STRING DMar-Conspiracy-37
5222: PPUSH
5223: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5227: LD_EXP 45
5231: PPUSH
5232: LD_STRING DMar-Conspiracy-38
5234: PPUSH
5235: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5239: LD_INT 137
5241: PPUSH
5242: LD_INT 98
5244: PPUSH
5245: LD_INT 105
5247: PPUSH
5248: CALL 18409 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5252: LD_EXP 45
5256: PPUSH
5257: LD_STRING DMar-Conspiracy-39
5259: PPUSH
5260: CALL_OW 88
// end else
5264: GO 5358
// if heikeSecondSquad then
5266: LD_EXP 49
5270: IFFALSE 5358
// begin hasSniperRifle := true ;
5272: LD_ADDR_EXP 11
5276: PUSH
5277: LD_INT 1
5279: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5280: LD_INT 137
5282: PPUSH
5283: LD_INT 98
5285: PPUSH
5286: LD_INT 105
5288: PPUSH
5289: CALL 18409 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5293: LD_EXP 49
5297: PPUSH
5298: LD_INT 26
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PPUSH
5308: CALL_OW 72
5312: PUSH
5313: LD_INT 1
5315: ARRAY
5316: PPUSH
5317: LD_STRING DArm-Conspiracy-a-35
5319: PPUSH
5320: CALL_OW 88
5324: NOT
5325: IFFALSE 5358
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5327: LD_EXP 49
5331: PPUSH
5332: LD_INT 26
5334: PUSH
5335: LD_INT 2
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PPUSH
5342: CALL_OW 72
5346: PUSH
5347: LD_INT 1
5349: ARRAY
5350: PPUSH
5351: LD_STRING DArf-Conspiracy-a-35
5353: PPUSH
5354: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5358: LD_EXP 38
5362: PPUSH
5363: LD_STRING DH-Conspiracy-40
5365: PPUSH
5366: CALL_OW 88
// if IsOk ( Mike ) then
5370: LD_EXP 40
5374: PPUSH
5375: CALL_OW 302
5379: IFFALSE 5438
// begin hasScout := true ;
5381: LD_ADDR_EXP 12
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5389: LD_EXP 40
5393: PPUSH
5394: LD_STRING DM-Conspiracy-41
5396: PPUSH
5397: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5401: LD_EXP 40
5405: PPUSH
5406: LD_STRING DM-Conspiracy-42
5408: PPUSH
5409: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5413: LD_INT 73
5415: PPUSH
5416: LD_INT 102
5418: PPUSH
5419: LD_INT 105
5421: PPUSH
5422: CALL 18409 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5426: LD_EXP 40
5430: PPUSH
5431: LD_STRING DM-Conspiracy-43
5433: PPUSH
5434: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5438: LD_EXP 4
5442: PUSH
5443: LD_EXP 43
5447: PPUSH
5448: CALL_OW 302
5452: AND
5453: PUSH
5454: LD_EXP 47
5458: PPUSH
5459: CALL_OW 302
5463: AND
5464: IFFALSE 5510
// begin hasMethanol := true ;
5466: LD_ADDR_EXP 13
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5474: LD_EXP 43
5478: PPUSH
5479: LD_STRING DK-Conspiracy-44
5481: PPUSH
5482: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5486: LD_EXP 43
5490: PPUSH
5491: LD_STRING DK-Conspiracy-45
5493: PPUSH
5494: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5498: LD_EXP 42
5502: PPUSH
5503: LD_STRING DKam-Conspiracy-46
5505: PPUSH
5506: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5510: LD_EXP 38
5514: PPUSH
5515: LD_STRING DH-Conspiracy-47
5517: PPUSH
5518: CALL_OW 88
// wait ( 0 0$1 ) ;
5522: LD_INT 35
5524: PPUSH
5525: CALL_OW 67
// your_side := 8 ;
5529: LD_ADDR_OWVAR 2
5533: PUSH
5534: LD_INT 8
5536: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5537: LD_INT 1
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 2
5554: PUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 22
5567: PUSH
5568: LD_INT 4
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 21
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: PUSH
5599: FOR_IN
5600: IFFALSE 5613
// RemoveUnit ( i ) ;
5602: LD_VAR 0 2
5606: PPUSH
5607: CALL_OW 64
5611: GO 5599
5613: POP
5614: POP
// wait ( 0 0$0.3 ) ;
5615: LD_INT 10
5617: PPUSH
5618: CALL_OW 67
// Query ( StartInfo1 ) ;
5622: LD_STRING StartInfo1
5624: PPUSH
5625: CALL_OW 97
// wait ( 0 0$1 ) ;
5629: LD_INT 35
5631: PPUSH
5632: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5636: LD_STRING colors_night.txt
5638: PPUSH
5639: CALL_OW 544
// Query ( StartInfo2 ) ;
5643: LD_STRING StartInfo2
5645: PPUSH
5646: CALL_OW 97
// PrepareGame ;
5650: CALL 980 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5654: LD_INT 152
5656: PPUSH
5657: LD_INT 65
5659: PPUSH
5660: LD_INT 2
5662: PPUSH
5663: LD_INT 70
5665: NEG
5666: PPUSH
5667: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5671: LD_INT 152
5673: PPUSH
5674: LD_INT 65
5676: PPUSH
5677: LD_INT 2
5679: PPUSH
5680: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5684: LD_INT 133
5686: PPUSH
5687: LD_INT 76
5689: PPUSH
5690: LD_INT 2
5692: PPUSH
5693: LD_INT 6
5695: NEG
5696: PPUSH
5697: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5701: LD_INT 152
5703: PPUSH
5704: LD_INT 65
5706: PPUSH
5707: LD_INT 8
5709: PPUSH
5710: LD_INT 70
5712: NEG
5713: PPUSH
5714: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5718: LD_INT 152
5720: PPUSH
5721: LD_INT 65
5723: PPUSH
5724: LD_INT 8
5726: PPUSH
5727: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5731: LD_INT 133
5733: PPUSH
5734: LD_INT 76
5736: PPUSH
5737: LD_INT 8
5739: PPUSH
5740: LD_INT 6
5742: NEG
5743: PPUSH
5744: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5748: LD_INT 23
5750: PPUSH
5751: CALL_OW 87
// dialogue_skipped := false ;
5755: LD_ADDR_OWVAR 59
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// InitRuPatrols ;
5763: CALL 3148 0 0
// Say ( Heike , DH-Escape-1 ) ;
5767: LD_EXP 38
5771: PPUSH
5772: LD_STRING DH-Escape-1
5774: PPUSH
5775: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5779: LD_EXP 38
5783: PPUSH
5784: LD_STRING DH-Escape-2
5786: PPUSH
5787: CALL_OW 88
// if not debug then
5791: LD_EXP 1
5795: NOT
5796: IFFALSE 5802
// StartLockerMinigame ;
5798: CALL 18920 0 0
// wait ( 0 0$1 ) ;
5802: LD_INT 35
5804: PPUSH
5805: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5809: LD_EXP 38
5813: PPUSH
5814: LD_STRING DH-Escape-4
5816: PPUSH
5817: CALL_OW 88
// wait ( 0 0$3 ) ;
5821: LD_INT 105
5823: PPUSH
5824: CALL_OW 67
// your_side := 2 ;
5828: LD_ADDR_OWVAR 2
5832: PUSH
5833: LD_INT 2
5835: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5836: LD_EXP 38
5840: PPUSH
5841: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5845: LD_INT 152
5847: PPUSH
5848: LD_INT 65
5850: PPUSH
5851: LD_INT 2
5853: PPUSH
5854: LD_INT 70
5856: NEG
5857: PPUSH
5858: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5862: LD_INT 152
5864: PPUSH
5865: LD_INT 65
5867: PPUSH
5868: LD_INT 2
5870: PPUSH
5871: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5875: LD_INT 133
5877: PPUSH
5878: LD_INT 76
5880: PPUSH
5881: LD_INT 8
5883: PPUSH
5884: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5888: LD_EXP 38
5892: PPUSH
5893: LD_INT 128
5895: PPUSH
5896: LD_INT 64
5898: PPUSH
5899: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5903: LD_INT 35
5905: PPUSH
5906: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5910: LD_EXP 38
5914: PPUSH
5915: LD_INT 128
5917: PPUSH
5918: LD_INT 64
5920: PPUSH
5921: CALL_OW 307
5925: IFFALSE 5903
// ComHold ( Heike ) ;
5927: LD_EXP 38
5931: PPUSH
5932: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
5936: LD_EXP 38
5940: PPUSH
5941: LD_STRING DH-Start-1
5943: PPUSH
5944: CALL_OW 88
// if not americanContact then
5948: LD_EXP 10
5952: NOT
5953: IFFALSE 5969
// Say ( Heike , DH-Start-c-2 ) else
5955: LD_EXP 38
5959: PPUSH
5960: LD_STRING DH-Start-c-2
5962: PPUSH
5963: CALL_OW 88
5967: GO 6001
// if johnnySaved then
5969: LD_EXP 3
5973: IFFALSE 5989
// Say ( Heike , DH-Start-a-2 ) else
5975: LD_EXP 38
5979: PPUSH
5980: LD_STRING DH-Start-a-2
5982: PPUSH
5983: CALL_OW 88
5987: GO 6001
// Say ( Heike , DH-Start-b-2 ) ;
5989: LD_EXP 38
5993: PPUSH
5994: LD_STRING DH-Start-b-2
5996: PPUSH
5997: CALL_OW 88
// Video ( false ) ;
6001: LD_INT 0
6003: PPUSH
6004: CALL 64164 0 1
// tick := 0 ;
6008: LD_ADDR_OWVAR 1
6012: PUSH
6013: LD_INT 0
6015: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6016: LD_STRING M1
6018: PPUSH
6019: CALL_OW 337
// enable ( gameStartEvent ) ;
6023: LD_INT 2
6025: ENABLE_MARKED
// SaveForQuickRestart ;
6026: CALL_OW 22
// end ;
6030: LD_VAR 0 1
6034: RET
// function ActionAdditional ; var i , un , tmp ; begin
6035: LD_INT 0
6037: PPUSH
6038: PPUSH
6039: PPUSH
6040: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6041: LD_INT 115
6043: PPUSH
6044: LD_INT 27
6046: PPUSH
6047: LD_INT 2
6049: PPUSH
6050: LD_INT 6
6052: NEG
6053: PPUSH
6054: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6058: LD_EXP 38
6062: PPUSH
6063: LD_INT 115
6065: PPUSH
6066: LD_INT 27
6068: PPUSH
6069: CALL_OW 428
6073: PPUSH
6074: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6078: LD_EXP 38
6082: PPUSH
6083: LD_INT 33
6085: PPUSH
6086: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6090: LD_INT 124
6092: PPUSH
6093: LD_INT 39
6095: PPUSH
6096: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6100: LD_EXP 38
6104: PPUSH
6105: LD_STRING DH-Fail-1
6107: PPUSH
6108: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6112: LD_INT 3
6114: PPUSH
6115: CALL_OW 427
// ComExit ( Heike ) ;
6119: LD_EXP 38
6123: PPUSH
6124: CALL 64590 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6128: LD_EXP 38
6132: PPUSH
6133: LD_INT 109
6135: PPUSH
6136: LD_INT 33
6138: PPUSH
6139: CALL_OW 171
// AddComHold ( Heike ) ;
6143: LD_EXP 38
6147: PPUSH
6148: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6152: LD_INT 115
6154: PPUSH
6155: LD_INT 27
6157: PPUSH
6158: LD_INT 2
6160: PPUSH
6161: CALL_OW 331
// wait ( 0 0$2 ) ;
6165: LD_INT 70
6167: PPUSH
6168: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6172: LD_INT 35
6174: PPUSH
6175: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6179: LD_EXP 38
6183: PPUSH
6184: LD_INT 109
6186: PPUSH
6187: LD_INT 33
6189: PPUSH
6190: CALL_OW 307
6194: IFFALSE 6172
// Say ( Heike , DH-Fail-2 ) ;
6196: LD_EXP 38
6200: PPUSH
6201: LD_STRING DH-Fail-2
6203: PPUSH
6204: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6208: LD_EXP 38
6212: PPUSH
6213: LD_INT 111
6215: PPUSH
6216: LD_INT 48
6218: PPUSH
6219: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6223: LD_INT 35
6225: PPUSH
6226: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6230: LD_EXP 38
6234: PPUSH
6235: LD_INT 111
6237: PPUSH
6238: LD_INT 48
6240: PPUSH
6241: CALL_OW 297
6245: PUSH
6246: LD_INT 4
6248: LESS
6249: IFFALSE 6223
// AddComMoveXY ( Heike , 106 , 72 ) ;
6251: LD_EXP 38
6255: PPUSH
6256: LD_INT 106
6258: PPUSH
6259: LD_INT 72
6261: PPUSH
6262: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6266: LD_EXP 38
6270: PPUSH
6271: LD_INT 103
6273: PPUSH
6274: LD_INT 80
6276: PPUSH
6277: CALL_OW 171
// uc_side := 3 ;
6281: LD_ADDR_OWVAR 20
6285: PUSH
6286: LD_INT 3
6288: ST_TO_ADDR
// uc_nation := 3 ;
6289: LD_ADDR_OWVAR 21
6293: PUSH
6294: LD_INT 3
6296: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6297: LD_INT 1
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: LD_INT 6
6305: PPUSH
6306: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6310: LD_ADDR_OWVAR 29
6314: PUSH
6315: LD_INT 12
6317: PUSH
6318: LD_INT 12
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: ST_TO_ADDR
// un := CreateHuman ;
6325: LD_ADDR_VAR 0 3
6329: PUSH
6330: CALL_OW 44
6334: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6335: LD_VAR 0 3
6339: PPUSH
6340: LD_INT 134
6342: PPUSH
6343: LD_INT 52
6345: PPUSH
6346: LD_INT 4
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL 66332 0 5
// ComTurnUnit ( un , Heike ) ;
6356: LD_VAR 0 3
6360: PPUSH
6361: LD_EXP 38
6365: PPUSH
6366: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6370: LD_VAR 0 3
6374: PPUSH
6375: LD_EXP 38
6379: PPUSH
6380: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6384: LD_VAR 0 3
6388: PPUSH
6389: LD_STRING DRum-Fail-3
6391: PPUSH
6392: CALL_OW 88
// for i := 1 to 3 do
6396: LD_ADDR_VAR 0 2
6400: PUSH
6401: DOUBLE
6402: LD_INT 1
6404: DEC
6405: ST_TO_ADDR
6406: LD_INT 3
6408: PUSH
6409: FOR_TO
6410: IFFALSE 6483
// begin PrepareSoldier ( false , 10 ) ;
6412: LD_INT 0
6414: PPUSH
6415: LD_INT 10
6417: PPUSH
6418: CALL_OW 381
// un := CreateHuman ;
6422: LD_ADDR_VAR 0 3
6426: PUSH
6427: CALL_OW 44
6431: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6432: LD_ADDR_VAR 0 4
6436: PUSH
6437: LD_VAR 0 4
6441: PPUSH
6442: LD_VAR 0 3
6446: PPUSH
6447: CALL 64192 0 2
6451: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6452: LD_VAR 0 3
6456: PPUSH
6457: LD_INT 8
6459: PPUSH
6460: LD_INT 0
6462: PPUSH
6463: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6467: LD_VAR 0 3
6471: PPUSH
6472: LD_EXP 38
6476: PPUSH
6477: CALL_OW 119
// end ;
6481: GO 6409
6483: POP
6484: POP
// repeat wait ( 0 0$1 ) ;
6485: LD_INT 35
6487: PPUSH
6488: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6492: LD_VAR 0 4
6496: PPUSH
6497: LD_INT 101
6499: PUSH
6500: LD_INT 2
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 72
6511: PUSH
6512: LD_INT 1
6514: GREATER
6515: IFFALSE 6485
// wait ( 0 0$1 ) ;
6517: LD_INT 35
6519: PPUSH
6520: CALL_OW 67
// DialogueOn ;
6524: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6528: LD_EXP 38
6532: PPUSH
6533: LD_STRING DH-Fail-4
6535: PPUSH
6536: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6540: LD_EXP 38
6544: PPUSH
6545: LD_STRING DH-Fail-5
6547: PPUSH
6548: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6552: LD_EXP 38
6556: PPUSH
6557: LD_STRING DH-Fail-6
6559: PPUSH
6560: CALL_OW 88
// DialogueOff ;
6564: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6568: LD_VAR 0 4
6572: PPUSH
6573: LD_EXP 38
6577: PPUSH
6578: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6582: LD_INT 35
6584: PPUSH
6585: CALL_OW 67
// until IsDying ( Heike ) ;
6589: LD_EXP 38
6593: PPUSH
6594: CALL_OW 303
6598: IFFALSE 6582
// KillUnit ( Heike ) ;
6600: LD_EXP 38
6604: PPUSH
6605: CALL_OW 66
// wait ( 0 0$4 ) ;
6609: LD_INT 140
6611: PPUSH
6612: CALL_OW 67
// ResetFog ;
6616: CALL_OW 335
// DialogueOn ;
6620: CALL_OW 6
// dwait ( 0 0$1 ) ;
6624: LD_INT 35
6626: PPUSH
6627: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6631: LD_ADDR_EXP 38
6635: PUSH
6636: LD_STRING Heike
6638: PPUSH
6639: LD_EXP 1
6643: NOT
6644: PPUSH
6645: LD_EXP 2
6649: PPUSH
6650: CALL 26743 0 3
6654: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6655: LD_EXP 38
6659: PPUSH
6660: LD_STRING DH-Fail-7
6662: PPUSH
6663: CALL_OW 89
// DialogueOff ;
6667: CALL_OW 7
// YouLost ( Fail ) ;
6671: LD_STRING Fail
6673: PPUSH
6674: CALL_OW 104
// end ;
6678: LD_VAR 0 1
6682: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6683: LD_INT 2
6685: PPUSH
6686: LD_INT 173
6688: PPUSH
6689: LD_INT 29
6691: PPUSH
6692: CALL_OW 293
6696: PUSH
6697: LD_EXP 38
6701: PPUSH
6702: LD_INT 173
6704: PPUSH
6705: LD_INT 29
6707: PPUSH
6708: CALL_OW 297
6712: PUSH
6713: LD_INT 6
6715: LESS
6716: AND
6717: IFFALSE 6734
6719: GO 6721
6721: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6722: LD_EXP 38
6726: PPUSH
6727: LD_STRING DH-EastRoad
6729: PPUSH
6730: CALL_OW 88
6734: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6735: LD_INT 2
6737: PPUSH
6738: LD_INT 149
6740: PPUSH
6741: LD_INT 3
6743: PPUSH
6744: CALL_OW 293
6748: PUSH
6749: LD_EXP 38
6753: PPUSH
6754: LD_INT 149
6756: PPUSH
6757: LD_INT 3
6759: PPUSH
6760: CALL_OW 297
6764: PUSH
6765: LD_INT 6
6767: LESS
6768: AND
6769: IFFALSE 6786
6771: GO 6773
6773: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6774: LD_EXP 38
6778: PPUSH
6779: LD_STRING DH-EastRoad
6781: PPUSH
6782: CALL_OW 88
6786: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6787: LD_INT 2
6789: PPUSH
6790: LD_INT 217
6792: PPUSH
6793: LD_INT 120
6795: PPUSH
6796: CALL_OW 293
6800: PUSH
6801: LD_EXP 38
6805: PPUSH
6806: LD_INT 217
6808: PPUSH
6809: LD_INT 120
6811: PPUSH
6812: CALL_OW 297
6816: PUSH
6817: LD_INT 6
6819: LESS
6820: AND
6821: IFFALSE 6838
6823: GO 6825
6825: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6826: LD_EXP 38
6830: PPUSH
6831: LD_STRING DH-EastEnd
6833: PPUSH
6834: CALL_OW 88
6838: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6839: LD_EXP 38
6843: PPUSH
6844: LD_INT 11
6846: PPUSH
6847: CALL_OW 308
6851: IFFALSE 6889
6853: GO 6855
6855: DISABLE
// begin if not heikeSquad then
6856: LD_EXP 14
6860: NOT
6861: IFFALSE 6877
// Say ( Heike , DH-Hill ) else
6863: LD_EXP 38
6867: PPUSH
6868: LD_STRING DH-Hill
6870: PPUSH
6871: CALL_OW 88
6875: GO 6889
// Say ( Heike , DH-Hill-a ) ;
6877: LD_EXP 38
6881: PPUSH
6882: LD_STRING DH-Hill-a
6884: PPUSH
6885: CALL_OW 88
// end ;
6889: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6890: LD_EXP 38
6894: PPUSH
6895: LD_INT 12
6897: PPUSH
6898: CALL_OW 308
6902: IFFALSE 7084
6904: GO 6906
6906: DISABLE
6907: LD_INT 0
6909: PPUSH
6910: PPUSH
6911: PPUSH
// begin DialogueOn ;
6912: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6916: LD_EXP 38
6920: PPUSH
6921: CALL_OW 87
// x := GetX ( Heike ) ;
6925: LD_ADDR_VAR 0 1
6929: PUSH
6930: LD_EXP 38
6934: PPUSH
6935: CALL_OW 250
6939: ST_TO_ADDR
// y := GetY ( Heike ) ;
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: LD_EXP 38
6949: PPUSH
6950: CALL_OW 251
6954: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
6955: LD_VAR 0 1
6959: PPUSH
6960: LD_VAR 0 2
6964: PPUSH
6965: LD_INT 2
6967: PPUSH
6968: LD_INT 12
6970: NEG
6971: PPUSH
6972: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
6976: LD_VAR 0 1
6980: PPUSH
6981: LD_VAR 0 2
6985: PPUSH
6986: LD_INT 2
6988: PPUSH
6989: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6993: LD_INT 2
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 32
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 30
7008: PUSH
7009: LD_INT 33
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: CALL_OW 69
7025: IFFALSE 7037
// v := 3 else
7027: LD_ADDR_VAR 0 3
7031: PUSH
7032: LD_INT 3
7034: ST_TO_ADDR
7035: GO 7045
// v := 2 ;
7037: LD_ADDR_VAR 0 3
7041: PUSH
7042: LD_INT 2
7044: ST_TO_ADDR
// disable ;
7045: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7046: LD_EXP 38
7050: PPUSH
7051: LD_STRING DH-Outpost-
7053: PUSH
7054: LD_INT 1
7056: PPUSH
7057: LD_VAR 0 3
7061: PPUSH
7062: CALL_OW 12
7066: STR
7067: PPUSH
7068: CALL_OW 88
// DialogueOff ;
7072: CALL_OW 7
// wait ( 0 0$10 ) ;
7076: LD_INT 350
7078: PPUSH
7079: CALL_OW 67
// enable ;
7083: ENABLE
// end ;
7084: PPOPN 3
7086: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7087: LD_EXP 38
7091: PPUSH
7092: LD_INT 19
7094: PPUSH
7095: CALL_OW 308
7099: PUSH
7100: LD_EXP 22
7104: NOT
7105: AND
7106: PUSH
7107: LD_EXP 30
7111: NOT
7112: AND
7113: IFFALSE 7186
7115: GO 7117
7117: DISABLE
// begin DialogueOn ;
7118: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7122: LD_INT 152
7124: PPUSH
7125: LD_INT 115
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: LD_INT 16
7133: NEG
7134: PPUSH
7135: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7139: LD_INT 152
7141: PPUSH
7142: LD_INT 115
7144: PPUSH
7145: LD_INT 2
7147: PPUSH
7148: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7152: LD_INT 152
7154: PPUSH
7155: LD_INT 115
7157: PPUSH
7158: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7162: LD_EXP 38
7166: PPUSH
7167: LD_STRING DH-Stealth-1
7169: PPUSH
7170: CALL_OW 88
// DialogueOff ;
7174: CALL_OW 7
// adminAreaDiscovered := true ;
7178: LD_ADDR_EXP 22
7182: PUSH
7183: LD_INT 1
7185: ST_TO_ADDR
// end ;
7186: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7187: LD_INT 2
7189: PPUSH
7190: LD_EXP 39
7194: PPUSH
7195: CALL_OW 292
7199: PUSH
7200: LD_EXP 38
7204: PPUSH
7205: LD_EXP 39
7209: PPUSH
7210: CALL_OW 296
7214: PUSH
7215: LD_INT 6
7217: LESS
7218: AND
7219: PUSH
7220: LD_EXP 17
7224: NOT
7225: AND
7226: PUSH
7227: LD_EXP 30
7231: NOT
7232: AND
7233: IFFALSE 7339
7235: GO 7237
7237: DISABLE
// begin DialogueOn ;
7238: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7242: LD_EXP 39
7246: PPUSH
7247: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7251: LD_EXP 39
7255: PPUSH
7256: LD_EXP 38
7260: PPUSH
7261: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7265: LD_EXP 38
7269: PPUSH
7270: LD_EXP 39
7274: PPUSH
7275: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7279: LD_EXP 38
7283: PPUSH
7284: LD_STRING DH-Givi-1
7286: PPUSH
7287: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7291: LD_EXP 39
7295: PPUSH
7296: LD_STRING DG-Givi-2
7298: PPUSH
7299: CALL_OW 88
// DialogueOff ;
7303: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7307: LD_EXP 39
7311: PPUSH
7312: LD_INT 2
7314: PPUSH
7315: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7319: LD_ADDR_EXP 14
7323: PUSH
7324: LD_EXP 14
7328: PPUSH
7329: LD_EXP 39
7333: PPUSH
7334: CALL 64192 0 2
7338: ST_TO_ADDR
// end ;
7339: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7340: LD_INT 2
7342: PPUSH
7343: LD_EXP 44
7347: PPUSH
7348: CALL_OW 292
7352: PUSH
7353: LD_EXP 38
7357: PPUSH
7358: LD_EXP 44
7362: PPUSH
7363: CALL_OW 296
7367: PUSH
7368: LD_INT 6
7370: LESS
7371: AND
7372: PUSH
7373: LD_EXP 17
7377: NOT
7378: AND
7379: PUSH
7380: LD_EXP 30
7384: NOT
7385: AND
7386: IFFALSE 7492
7388: GO 7390
7390: DISABLE
// begin DialogueOn ;
7391: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7395: LD_EXP 44
7399: PPUSH
7400: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7404: LD_EXP 44
7408: PPUSH
7409: LD_EXP 38
7413: PPUSH
7414: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7418: LD_EXP 38
7422: PPUSH
7423: LD_EXP 44
7427: PPUSH
7428: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7432: LD_EXP 38
7436: PPUSH
7437: LD_STRING DH-Sophia-1
7439: PPUSH
7440: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7444: LD_EXP 44
7448: PPUSH
7449: LD_STRING DS-Sophia-2
7451: PPUSH
7452: CALL_OW 88
// DialogueOff ;
7456: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7460: LD_EXP 44
7464: PPUSH
7465: LD_INT 2
7467: PPUSH
7468: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7472: LD_ADDR_EXP 14
7476: PUSH
7477: LD_EXP 14
7481: PPUSH
7482: LD_EXP 44
7486: PPUSH
7487: CALL 64192 0 2
7491: ST_TO_ADDR
// end ;
7492: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7493: LD_INT 2
7495: PPUSH
7496: LD_EXP 46
7500: PPUSH
7501: CALL_OW 292
7505: PUSH
7506: LD_EXP 38
7510: PPUSH
7511: LD_EXP 46
7515: PPUSH
7516: CALL_OW 296
7520: PUSH
7521: LD_INT 6
7523: LESS
7524: AND
7525: PUSH
7526: LD_EXP 17
7530: NOT
7531: AND
7532: PUSH
7533: LD_EXP 30
7537: NOT
7538: AND
7539: IFFALSE 7635
7541: GO 7543
7543: DISABLE
// begin DialogueOn ;
7544: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7548: LD_EXP 46
7552: PPUSH
7553: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7557: LD_EXP 38
7561: PPUSH
7562: LD_STRING DH-Olaf-1
7564: PPUSH
7565: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7569: LD_EXP 46
7573: PPUSH
7574: LD_STRING DO-Olaf-2
7576: PPUSH
7577: CALL_OW 88
// if explosionsTakenByRussians then
7581: LD_EXP 21
7585: IFFALSE 7599
// Say ( Olaf , DO-Olaf-a-3 ) ;
7587: LD_EXP 46
7591: PPUSH
7592: LD_STRING DO-Olaf-a-3
7594: PPUSH
7595: CALL_OW 88
// DialogueOff ;
7599: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7603: LD_EXP 46
7607: PPUSH
7608: LD_INT 2
7610: PPUSH
7611: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7615: LD_ADDR_EXP 14
7619: PUSH
7620: LD_EXP 14
7624: PPUSH
7625: LD_EXP 46
7629: PPUSH
7630: CALL 64192 0 2
7634: ST_TO_ADDR
// end ;
7635: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7636: LD_INT 2
7638: PPUSH
7639: LD_EXP 40
7643: PPUSH
7644: CALL_OW 292
7648: PUSH
7649: LD_EXP 38
7653: PPUSH
7654: LD_EXP 40
7658: PPUSH
7659: CALL_OW 296
7663: PUSH
7664: LD_INT 6
7666: LESS
7667: AND
7668: PUSH
7669: LD_EXP 17
7673: NOT
7674: AND
7675: PUSH
7676: LD_EXP 30
7680: NOT
7681: AND
7682: IFFALSE 7910
7684: GO 7686
7686: DISABLE
7687: LD_INT 0
7689: PPUSH
7690: PPUSH
// begin DialogueOn ;
7691: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7695: LD_EXP 40
7699: PPUSH
7700: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_INT 18
7711: PPUSH
7712: LD_INT 0
7714: PPUSH
7715: CALL_OW 517
7719: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
7720: LD_ADDR_VAR 0 1
7724: PUSH
7725: DOUBLE
7726: LD_INT 1
7728: DEC
7729: ST_TO_ADDR
7730: LD_VAR 0 2
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: PUSH
7739: FOR_TO
7740: IFFALSE 7822
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
7742: LD_VAR 0 2
7746: PUSH
7747: LD_INT 1
7749: ARRAY
7750: PUSH
7751: LD_VAR 0 1
7755: ARRAY
7756: PPUSH
7757: LD_VAR 0 2
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PUSH
7766: LD_VAR 0 1
7770: ARRAY
7771: PPUSH
7772: LD_INT 2
7774: PPUSH
7775: LD_INT 3
7777: NEG
7778: PPUSH
7779: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
7783: LD_VAR 0 2
7787: PUSH
7788: LD_INT 1
7790: ARRAY
7791: PUSH
7792: LD_VAR 0 1
7796: ARRAY
7797: PPUSH
7798: LD_VAR 0 2
7802: PUSH
7803: LD_INT 2
7805: ARRAY
7806: PUSH
7807: LD_VAR 0 1
7811: ARRAY
7812: PPUSH
7813: LD_INT 2
7815: PPUSH
7816: CALL_OW 331
// end ;
7820: GO 7739
7822: POP
7823: POP
// Say ( Mike , DM-Mike-1 ) ;
7824: LD_EXP 40
7828: PPUSH
7829: LD_STRING DM-Mike-1
7831: PPUSH
7832: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
7836: LD_EXP 38
7840: PPUSH
7841: LD_STRING DH-Mike-2
7843: PPUSH
7844: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
7848: LD_INT 78
7850: PPUSH
7851: LD_INT 104
7853: PPUSH
7854: CALL_OW 84
// dwait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7865: LD_EXP 38
7869: PPUSH
7870: CALL_OW 87
// DialogueOff ;
7874: CALL_OW 7
// SetSide ( Mike , 2 ) ;
7878: LD_EXP 40
7882: PPUSH
7883: LD_INT 2
7885: PPUSH
7886: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
7890: LD_ADDR_EXP 14
7894: PUSH
7895: LD_EXP 14
7899: PPUSH
7900: LD_EXP 40
7904: PPUSH
7905: CALL 64192 0 2
7909: ST_TO_ADDR
// end ;
7910: PPOPN 2
7912: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
7913: LD_EXP 38
7917: PPUSH
7918: LD_EXP 43
7922: PPUSH
7923: CALL_OW 296
7927: PUSH
7928: LD_INT 6
7930: LESS
7931: PUSH
7932: LD_EXP 43
7936: PPUSH
7937: CALL_OW 257
7941: PUSH
7942: LD_INT 33
7944: EQUAL
7945: AND
7946: PUSH
7947: LD_EXP 17
7951: NOT
7952: AND
7953: PUSH
7954: LD_EXP 43
7958: PPUSH
7959: CALL_OW 302
7963: AND
7964: PUSH
7965: LD_EXP 20
7969: AND
7970: PUSH
7971: LD_EXP 43
7975: PUSH
7976: LD_EXP 14
7980: IN
7981: AND
7982: PUSH
7983: LD_EXP 43
7987: PPUSH
7988: CALL_OW 255
7992: PUSH
7993: LD_INT 2
7995: EQUAL
7996: AND
7997: IFFALSE 8026
7999: GO 8001
8001: DISABLE
// begin DialogueOn ;
8002: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8006: LD_EXP 38
8010: PPUSH
8011: LD_STRING DH-Kaia-Revolver-2
8013: PPUSH
8014: CALL_OW 88
// SetClassKaiaRevolver ;
8018: CALL 1693 0 0
// DialogueOff ;
8022: CALL_OW 7
// end ;
8026: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8027: LD_EXP 41
8031: PUSH
8032: LD_EXP 48
8036: AND
8037: PUSH
8038: LD_EXP 48
8042: PPUSH
8043: CALL_OW 255
8047: PUSH
8048: LD_INT 2
8050: NONEQUAL
8051: AND
8052: PUSH
8053: LD_EXP 41
8057: PPUSH
8058: CALL_OW 255
8062: PUSH
8063: LD_INT 2
8065: NONEQUAL
8066: AND
8067: PUSH
8068: LD_EXP 14
8072: PPUSH
8073: LD_INT 22
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PPUSH
8083: CALL_OW 72
8087: PUSH
8088: LD_INT 5
8090: GREATER
8091: AND
8092: PUSH
8093: LD_EXP 17
8097: NOT
8098: AND
8099: PUSH
8100: LD_EXP 30
8104: NOT
8105: AND
8106: IFFALSE 8823
8108: GO 8110
8110: DISABLE
8111: LD_INT 0
8113: PPUSH
8114: PPUSH
// begin DialogueOn ;
8115: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8119: LD_ADDR_VAR 0 2
8123: PUSH
8124: LD_EXP 39
8128: PPUSH
8129: CALL_OW 302
8133: PUSH
8134: LD_EXP 39
8138: PUSH
8139: LD_EXP 14
8143: IN
8144: AND
8145: PUSH
8146: LD_EXP 39
8150: PPUSH
8151: CALL_OW 255
8155: PUSH
8156: LD_INT 2
8158: EQUAL
8159: AND
8160: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8161: LD_EXP 38
8165: PPUSH
8166: LD_STRING DH-Med-1
8168: PPUSH
8169: CALL_OW 88
// if hasGivi then
8173: LD_VAR 0 2
8177: IFFALSE 8193
// Say ( Givi , DG-Med-2 ) else
8179: LD_EXP 39
8183: PPUSH
8184: LD_STRING DG-Med-2
8186: PPUSH
8187: CALL_OW 88
8191: GO 8298
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8193: LD_EXP 14
8197: PUSH
8198: LD_EXP 49
8202: ISECT
8203: PPUSH
8204: LD_INT 22
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 26
8216: PUSH
8217: LD_INT 1
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PPUSH
8228: CALL_OW 72
8232: PUSH
8233: LD_INT 1
8235: ARRAY
8236: PPUSH
8237: LD_STRING DArm-Med-e-2
8239: PPUSH
8240: CALL_OW 88
8244: NOT
8245: IFFALSE 8298
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8247: LD_EXP 14
8251: PUSH
8252: LD_EXP 49
8256: ISECT
8257: PPUSH
8258: LD_INT 22
8260: PUSH
8261: LD_INT 2
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: LD_INT 26
8270: PUSH
8271: LD_INT 2
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PPUSH
8282: CALL_OW 72
8286: PUSH
8287: LD_INT 1
8289: ARRAY
8290: PPUSH
8291: LD_STRING DArf-Med-e-2
8293: PPUSH
8294: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8298: LD_INT 154
8300: PPUSH
8301: LD_INT 119
8303: PPUSH
8304: LD_INT 70
8306: PPUSH
8307: CALL 18409 0 3
// Say ( Heike , DH-Med-3 ) ;
8311: LD_EXP 38
8315: PPUSH
8316: LD_STRING DH-Med-3
8318: PPUSH
8319: CALL_OW 88
// if hasGivi then
8323: LD_VAR 0 2
8327: IFFALSE 8343
// Say ( Givi , DG-Med-4 ) else
8329: LD_EXP 39
8333: PPUSH
8334: LD_STRING DG-Med-4
8336: PPUSH
8337: CALL_OW 88
8341: GO 8448
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8343: LD_EXP 14
8347: PUSH
8348: LD_EXP 49
8352: ISECT
8353: PPUSH
8354: LD_INT 22
8356: PUSH
8357: LD_INT 2
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 26
8366: PUSH
8367: LD_INT 1
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PPUSH
8378: CALL_OW 72
8382: PUSH
8383: LD_INT 1
8385: ARRAY
8386: PPUSH
8387: LD_STRING DArm-Med-e-4
8389: PPUSH
8390: CALL_OW 88
8394: NOT
8395: IFFALSE 8448
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8397: LD_EXP 14
8401: PUSH
8402: LD_EXP 49
8406: ISECT
8407: PPUSH
8408: LD_INT 22
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 26
8420: PUSH
8421: LD_INT 2
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PPUSH
8432: CALL_OW 72
8436: PUSH
8437: LD_INT 1
8439: ARRAY
8440: PPUSH
8441: LD_STRING DArf-Med-e-4
8443: PPUSH
8444: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8448: LD_ADDR_VAR 0 1
8452: PUSH
8453: LD_EXP 43
8457: PPUSH
8458: CALL_OW 302
8462: PUSH
8463: LD_EXP 43
8467: PUSH
8468: LD_EXP 14
8472: IN
8473: AND
8474: PUSH
8475: LD_EXP 43
8479: PPUSH
8480: CALL_OW 255
8484: PUSH
8485: LD_INT 2
8487: EQUAL
8488: AND
8489: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8490: LD_EXP 40
8494: PPUSH
8495: CALL_OW 302
8499: PUSH
8500: LD_EXP 40
8504: PUSH
8505: LD_EXP 14
8509: IN
8510: AND
8511: PUSH
8512: LD_EXP 43
8516: PPUSH
8517: CALL_OW 255
8521: PUSH
8522: LD_INT 2
8524: EQUAL
8525: AND
8526: IFFALSE 8558
// begin Say ( Mike , DM-Med-5 ) ;
8528: LD_EXP 40
8532: PPUSH
8533: LD_STRING DM-Med-5
8535: PPUSH
8536: CALL_OW 88
// if hasKaia then
8540: LD_VAR 0 1
8544: IFFALSE 8558
// Say ( Kaia , DK-Med-6 ) ;
8546: LD_EXP 43
8550: PPUSH
8551: LD_STRING DK-Med-6
8553: PPUSH
8554: CALL_OW 88
// end ; if hasKaia then
8558: LD_VAR 0 1
8562: IFFALSE 8803
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8564: LD_INT 175
8566: PPUSH
8567: LD_INT 123
8569: PPUSH
8570: LD_INT 2
8572: PPUSH
8573: LD_INT 8
8575: NEG
8576: PPUSH
8577: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8581: LD_INT 175
8583: PPUSH
8584: LD_INT 123
8586: PPUSH
8587: LD_INT 2
8589: PPUSH
8590: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8594: LD_INT 175
8596: PPUSH
8597: LD_INT 123
8599: PPUSH
8600: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8604: LD_EXP 43
8608: PPUSH
8609: LD_STRING DK-Med-7
8611: PPUSH
8612: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8616: LD_EXP 43
8620: PPUSH
8621: LD_STRING DK-Med-8
8623: PPUSH
8624: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8628: LD_EXP 45
8632: PPUSH
8633: CALL_OW 302
8637: PUSH
8638: LD_EXP 45
8642: PUSH
8643: LD_EXP 14
8647: IN
8648: AND
8649: PUSH
8650: LD_EXP 45
8654: PPUSH
8655: CALL_OW 255
8659: PUSH
8660: LD_INT 2
8662: EQUAL
8663: AND
8664: IFFALSE 8722
// begin Say ( Markov , DMar-Med-9 ) ;
8666: LD_EXP 45
8670: PPUSH
8671: LD_STRING DMar-Med-9
8673: PPUSH
8674: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8678: LD_EXP 43
8682: PPUSH
8683: LD_STRING DK-Med-10
8685: PPUSH
8686: CALL_OW 88
// if hasGivi then
8690: LD_VAR 0 2
8694: IFFALSE 8710
// Say ( Kaia , DK-Med-11 ) else
8696: LD_EXP 43
8700: PPUSH
8701: LD_STRING DK-Med-11
8703: PPUSH
8704: CALL_OW 88
8708: GO 8722
// Say ( Kaia , DK-Med-a-11 ) ;
8710: LD_EXP 43
8714: PPUSH
8715: LD_STRING DK-Med-a-11
8717: PPUSH
8718: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
8722: LD_EXP 42
8726: PPUSH
8727: CALL_OW 302
8731: PUSH
8732: LD_EXP 42
8736: PUSH
8737: LD_EXP 14
8741: IN
8742: AND
8743: PUSH
8744: LD_EXP 42
8748: PPUSH
8749: CALL_OW 255
8753: PUSH
8754: LD_INT 2
8756: EQUAL
8757: AND
8758: IFFALSE 8803
// begin Say ( Kamil , DKam-Med-12 ) ;
8760: LD_EXP 42
8764: PPUSH
8765: LD_STRING DKam-Med-12
8767: PPUSH
8768: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8772: LD_EXP 42
8776: PPUSH
8777: LD_STRING DKam-Med-13
8779: PPUSH
8780: CALL_OW 88
// if not hasExplosionCollected then
8784: LD_EXP 23
8788: NOT
8789: IFFALSE 8803
// Say ( Heike , DH-Med-d-14 ) ;
8791: LD_EXP 38
8795: PPUSH
8796: LD_STRING DH-Med-d-14
8798: PPUSH
8799: CALL_OW 88
// end ; end ; DialogueOff ;
8803: CALL_OW 7
// adminAreaDiscovered := true ;
8807: LD_ADDR_EXP 22
8811: PUSH
8812: LD_INT 1
8814: ST_TO_ADDR
// laundryAllowed := true ;
8815: LD_ADDR_EXP 26
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
// end ;
8823: PPOPN 2
8825: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
8826: LD_EXP 41
8830: NOT
8831: PUSH
8832: LD_EXP 48
8836: AND
8837: PUSH
8838: LD_EXP 48
8842: PUSH
8843: LD_EXP 14
8847: IN
8848: NOT
8849: AND
8850: PUSH
8851: LD_EXP 14
8855: PPUSH
8856: LD_INT 22
8858: PUSH
8859: LD_INT 2
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PPUSH
8866: CALL_OW 72
8870: PUSH
8871: LD_INT 4
8873: GREATER
8874: AND
8875: PUSH
8876: LD_EXP 17
8880: NOT
8881: AND
8882: PUSH
8883: LD_EXP 30
8887: NOT
8888: AND
8889: IFFALSE 9606
8891: GO 8893
8893: DISABLE
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
// begin DialogueOn ;
8898: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8902: LD_ADDR_VAR 0 1
8906: PUSH
8907: LD_EXP 39
8911: PPUSH
8912: CALL_OW 302
8916: PUSH
8917: LD_EXP 39
8921: PUSH
8922: LD_EXP 14
8926: IN
8927: AND
8928: PUSH
8929: LD_EXP 39
8933: PPUSH
8934: CALL_OW 255
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: AND
8943: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
8944: LD_EXP 38
8948: PPUSH
8949: LD_STRING DH-Med-a-1
8951: PPUSH
8952: CALL_OW 88
// if hasGivi then
8956: LD_VAR 0 1
8960: IFFALSE 8976
// Say ( Givi , DG-Med-a-2 ) else
8962: LD_EXP 39
8966: PPUSH
8967: LD_STRING DG-Med-a-2
8969: PPUSH
8970: CALL_OW 88
8974: GO 9081
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
8976: LD_EXP 14
8980: PUSH
8981: LD_EXP 49
8985: ISECT
8986: PPUSH
8987: LD_INT 22
8989: PUSH
8990: LD_INT 2
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 26
8999: PUSH
9000: LD_INT 1
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PPUSH
9011: CALL_OW 72
9015: PUSH
9016: LD_INT 1
9018: ARRAY
9019: PPUSH
9020: LD_STRING DArm-Med-f-2
9022: PPUSH
9023: CALL_OW 88
9027: NOT
9028: IFFALSE 9081
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9030: LD_EXP 14
9034: PUSH
9035: LD_EXP 49
9039: ISECT
9040: PPUSH
9041: LD_INT 22
9043: PUSH
9044: LD_INT 2
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PUSH
9051: LD_INT 26
9053: PUSH
9054: LD_INT 2
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PPUSH
9065: CALL_OW 72
9069: PUSH
9070: LD_INT 1
9072: ARRAY
9073: PPUSH
9074: LD_STRING DArf-Med-f-2
9076: PPUSH
9077: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9081: LD_INT 154
9083: PPUSH
9084: LD_INT 119
9086: PPUSH
9087: LD_INT 70
9089: PPUSH
9090: CALL 18409 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9094: LD_EXP 38
9098: PPUSH
9099: LD_STRING DH-Med-a-3
9101: PPUSH
9102: CALL_OW 88
// if hasGivi then
9106: LD_VAR 0 1
9110: IFFALSE 9126
// Say ( Givi , DG-Med-a-4 ) else
9112: LD_EXP 39
9116: PPUSH
9117: LD_STRING DG-Med-a-4
9119: PPUSH
9120: CALL_OW 88
9124: GO 9231
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9126: LD_EXP 14
9130: PUSH
9131: LD_EXP 49
9135: ISECT
9136: PPUSH
9137: LD_INT 22
9139: PUSH
9140: LD_INT 2
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: LD_INT 26
9149: PUSH
9150: LD_INT 1
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 72
9165: PUSH
9166: LD_INT 1
9168: ARRAY
9169: PPUSH
9170: LD_STRING DArm-Med-f-4
9172: PPUSH
9173: CALL_OW 88
9177: NOT
9178: IFFALSE 9231
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9180: LD_EXP 14
9184: PUSH
9185: LD_EXP 49
9189: ISECT
9190: PPUSH
9191: LD_INT 22
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 26
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 72
9219: PUSH
9220: LD_INT 1
9222: ARRAY
9223: PPUSH
9224: LD_STRING DArf-Med-f-4
9226: PPUSH
9227: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9231: LD_ADDR_VAR 0 2
9235: PUSH
9236: LD_EXP 43
9240: PPUSH
9241: CALL_OW 302
9245: PUSH
9246: LD_EXP 43
9250: PUSH
9251: LD_EXP 14
9255: IN
9256: AND
9257: PUSH
9258: LD_EXP 43
9262: PPUSH
9263: CALL_OW 255
9267: PUSH
9268: LD_INT 2
9270: EQUAL
9271: AND
9272: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9273: LD_EXP 40
9277: PPUSH
9278: CALL_OW 302
9282: PUSH
9283: LD_EXP 40
9287: PUSH
9288: LD_EXP 14
9292: IN
9293: AND
9294: PUSH
9295: LD_EXP 40
9299: PPUSH
9300: CALL_OW 255
9304: PUSH
9305: LD_INT 2
9307: EQUAL
9308: AND
9309: IFFALSE 9341
// begin Say ( Mike , DM-Med-5 ) ;
9311: LD_EXP 40
9315: PPUSH
9316: LD_STRING DM-Med-5
9318: PPUSH
9319: CALL_OW 88
// if hasKaia then
9323: LD_VAR 0 2
9327: IFFALSE 9341
// Say ( Kaia , DK-Med-6 ) ;
9329: LD_EXP 43
9333: PPUSH
9334: LD_STRING DK-Med-6
9336: PPUSH
9337: CALL_OW 88
// end ; if hasKaia then
9341: LD_VAR 0 2
9345: IFFALSE 9586
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9347: LD_INT 175
9349: PPUSH
9350: LD_INT 123
9352: PPUSH
9353: LD_INT 2
9355: PPUSH
9356: LD_INT 8
9358: NEG
9359: PPUSH
9360: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9364: LD_INT 175
9366: PPUSH
9367: LD_INT 123
9369: PPUSH
9370: LD_INT 2
9372: PPUSH
9373: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9377: LD_INT 175
9379: PPUSH
9380: LD_INT 123
9382: PPUSH
9383: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9387: LD_EXP 43
9391: PPUSH
9392: LD_STRING DK-Med-7
9394: PPUSH
9395: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9399: LD_EXP 43
9403: PPUSH
9404: LD_STRING DK-Med-8
9406: PPUSH
9407: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9411: LD_EXP 45
9415: PPUSH
9416: CALL_OW 302
9420: PUSH
9421: LD_EXP 45
9425: PUSH
9426: LD_EXP 14
9430: IN
9431: AND
9432: PUSH
9433: LD_EXP 45
9437: PPUSH
9438: CALL_OW 255
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: AND
9447: IFFALSE 9505
// begin Say ( Markov , DMar-Med-9 ) ;
9449: LD_EXP 45
9453: PPUSH
9454: LD_STRING DMar-Med-9
9456: PPUSH
9457: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9461: LD_EXP 43
9465: PPUSH
9466: LD_STRING DK-Med-10
9468: PPUSH
9469: CALL_OW 88
// if hasGivi then
9473: LD_VAR 0 1
9477: IFFALSE 9493
// Say ( Kaia , DK-Med-11 ) else
9479: LD_EXP 43
9483: PPUSH
9484: LD_STRING DK-Med-11
9486: PPUSH
9487: CALL_OW 88
9491: GO 9505
// Say ( Kaia , DK-Med-a-11 ) ;
9493: LD_EXP 43
9497: PPUSH
9498: LD_STRING DK-Med-a-11
9500: PPUSH
9501: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9505: LD_EXP 42
9509: PPUSH
9510: CALL_OW 302
9514: PUSH
9515: LD_EXP 42
9519: PUSH
9520: LD_EXP 14
9524: IN
9525: AND
9526: PUSH
9527: LD_EXP 42
9531: PPUSH
9532: CALL_OW 255
9536: PUSH
9537: LD_INT 2
9539: EQUAL
9540: AND
9541: IFFALSE 9586
// begin Say ( Kamil , DKam-Med-12 ) ;
9543: LD_EXP 42
9547: PPUSH
9548: LD_STRING DKam-Med-12
9550: PPUSH
9551: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9555: LD_EXP 42
9559: PPUSH
9560: LD_STRING DKam-Med-13
9562: PPUSH
9563: CALL_OW 88
// if not hasExplosionCollected then
9567: LD_EXP 23
9571: NOT
9572: IFFALSE 9586
// Say ( Heike , DH-Med-d-14 ) ;
9574: LD_EXP 38
9578: PPUSH
9579: LD_STRING DH-Med-d-14
9581: PPUSH
9582: CALL_OW 88
// end ; end ; DialogueOff ;
9586: CALL_OW 7
// adminAreaDiscovered := true ;
9590: LD_ADDR_EXP 22
9594: PUSH
9595: LD_INT 1
9597: ST_TO_ADDR
// laundryAllowed := true ;
9598: LD_ADDR_EXP 26
9602: PUSH
9603: LD_INT 1
9605: ST_TO_ADDR
// end ;
9606: PPOPN 2
9608: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9609: LD_EXP 41
9613: PUSH
9614: LD_EXP 48
9618: NOT
9619: AND
9620: PUSH
9621: LD_EXP 41
9625: PUSH
9626: LD_EXP 14
9630: IN
9631: NOT
9632: AND
9633: PUSH
9634: LD_EXP 14
9638: PPUSH
9639: LD_INT 22
9641: PUSH
9642: LD_INT 2
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PPUSH
9649: CALL_OW 72
9653: PUSH
9654: LD_INT 4
9656: GREATER
9657: AND
9658: PUSH
9659: LD_EXP 17
9663: NOT
9664: AND
9665: PUSH
9666: LD_EXP 30
9670: NOT
9671: AND
9672: IFFALSE 10389
9674: GO 9676
9676: DISABLE
9677: LD_INT 0
9679: PPUSH
9680: PPUSH
// begin DialogueOn ;
9681: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9685: LD_ADDR_VAR 0 1
9689: PUSH
9690: LD_EXP 39
9694: PPUSH
9695: CALL_OW 302
9699: PUSH
9700: LD_EXP 39
9704: PUSH
9705: LD_EXP 14
9709: IN
9710: AND
9711: PUSH
9712: LD_EXP 39
9716: PPUSH
9717: CALL_OW 255
9721: PUSH
9722: LD_INT 2
9724: EQUAL
9725: AND
9726: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
9727: LD_EXP 38
9731: PPUSH
9732: LD_STRING DH-Med-b-1
9734: PPUSH
9735: CALL_OW 88
// if hasGivi then
9739: LD_VAR 0 1
9743: IFFALSE 9759
// Say ( Givi , DG-Med-a-2 ) else
9745: LD_EXP 39
9749: PPUSH
9750: LD_STRING DG-Med-a-2
9752: PPUSH
9753: CALL_OW 88
9757: GO 9864
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9759: LD_EXP 14
9763: PUSH
9764: LD_EXP 49
9768: ISECT
9769: PPUSH
9770: LD_INT 22
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 26
9782: PUSH
9783: LD_INT 1
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PUSH
9799: LD_INT 1
9801: ARRAY
9802: PPUSH
9803: LD_STRING DArm-Med-f-2
9805: PPUSH
9806: CALL_OW 88
9810: NOT
9811: IFFALSE 9864
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9813: LD_EXP 14
9817: PUSH
9818: LD_EXP 49
9822: ISECT
9823: PPUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 26
9836: PUSH
9837: LD_INT 2
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 72
9852: PUSH
9853: LD_INT 1
9855: ARRAY
9856: PPUSH
9857: LD_STRING DArf-Med-f-2
9859: PPUSH
9860: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9864: LD_INT 154
9866: PPUSH
9867: LD_INT 119
9869: PPUSH
9870: LD_INT 70
9872: PPUSH
9873: CALL 18409 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9877: LD_EXP 38
9881: PPUSH
9882: LD_STRING DH-Med-a-3
9884: PPUSH
9885: CALL_OW 88
// if hasGivi then
9889: LD_VAR 0 1
9893: IFFALSE 9909
// Say ( Givi , DG-Med-a-4 ) else
9895: LD_EXP 39
9899: PPUSH
9900: LD_STRING DG-Med-a-4
9902: PPUSH
9903: CALL_OW 88
9907: GO 10014
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9909: LD_EXP 14
9913: PUSH
9914: LD_EXP 49
9918: ISECT
9919: PPUSH
9920: LD_INT 22
9922: PUSH
9923: LD_INT 2
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 26
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 72
9948: PUSH
9949: LD_INT 1
9951: ARRAY
9952: PPUSH
9953: LD_STRING DArm-Med-f-4
9955: PPUSH
9956: CALL_OW 88
9960: NOT
9961: IFFALSE 10014
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9963: LD_EXP 14
9967: PUSH
9968: LD_EXP 49
9972: ISECT
9973: PPUSH
9974: LD_INT 22
9976: PUSH
9977: LD_INT 2
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 26
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 72
10002: PUSH
10003: LD_INT 1
10005: ARRAY
10006: PPUSH
10007: LD_STRING DArf-Med-f-4
10009: PPUSH
10010: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10014: LD_ADDR_VAR 0 2
10018: PUSH
10019: LD_EXP 43
10023: PPUSH
10024: CALL_OW 302
10028: PUSH
10029: LD_EXP 43
10033: PUSH
10034: LD_EXP 14
10038: IN
10039: AND
10040: PUSH
10041: LD_EXP 43
10045: PPUSH
10046: CALL_OW 255
10050: PUSH
10051: LD_INT 2
10053: EQUAL
10054: AND
10055: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10056: LD_EXP 40
10060: PPUSH
10061: CALL_OW 302
10065: PUSH
10066: LD_EXP 40
10070: PUSH
10071: LD_EXP 14
10075: IN
10076: AND
10077: PUSH
10078: LD_EXP 40
10082: PPUSH
10083: CALL_OW 255
10087: PUSH
10088: LD_INT 2
10090: EQUAL
10091: AND
10092: IFFALSE 10124
// begin Say ( Mike , DM-Med-5 ) ;
10094: LD_EXP 40
10098: PPUSH
10099: LD_STRING DM-Med-5
10101: PPUSH
10102: CALL_OW 88
// if hasKaia then
10106: LD_VAR 0 2
10110: IFFALSE 10124
// Say ( Kaia , DK-Med-6 ) ;
10112: LD_EXP 43
10116: PPUSH
10117: LD_STRING DK-Med-6
10119: PPUSH
10120: CALL_OW 88
// end ; if hasKaia then
10124: LD_VAR 0 2
10128: IFFALSE 10369
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10130: LD_INT 175
10132: PPUSH
10133: LD_INT 123
10135: PPUSH
10136: LD_INT 2
10138: PPUSH
10139: LD_INT 8
10141: NEG
10142: PPUSH
10143: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10147: LD_INT 175
10149: PPUSH
10150: LD_INT 123
10152: PPUSH
10153: LD_INT 2
10155: PPUSH
10156: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10160: LD_INT 175
10162: PPUSH
10163: LD_INT 123
10165: PPUSH
10166: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10170: LD_EXP 43
10174: PPUSH
10175: LD_STRING DK-Med-7
10177: PPUSH
10178: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10182: LD_EXP 43
10186: PPUSH
10187: LD_STRING DK-Med-8
10189: PPUSH
10190: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10194: LD_EXP 45
10198: PPUSH
10199: CALL_OW 302
10203: PUSH
10204: LD_EXP 45
10208: PUSH
10209: LD_EXP 14
10213: IN
10214: AND
10215: PUSH
10216: LD_EXP 45
10220: PPUSH
10221: CALL_OW 255
10225: PUSH
10226: LD_INT 2
10228: EQUAL
10229: AND
10230: IFFALSE 10288
// begin Say ( Markov , DMar-Med-9 ) ;
10232: LD_EXP 45
10236: PPUSH
10237: LD_STRING DMar-Med-9
10239: PPUSH
10240: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10244: LD_EXP 43
10248: PPUSH
10249: LD_STRING DK-Med-10
10251: PPUSH
10252: CALL_OW 88
// if hasGivi then
10256: LD_VAR 0 1
10260: IFFALSE 10276
// Say ( Kaia , DK-Med-11 ) else
10262: LD_EXP 43
10266: PPUSH
10267: LD_STRING DK-Med-11
10269: PPUSH
10270: CALL_OW 88
10274: GO 10288
// Say ( Kaia , DK-Med-a-11 ) ;
10276: LD_EXP 43
10280: PPUSH
10281: LD_STRING DK-Med-a-11
10283: PPUSH
10284: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10288: LD_EXP 42
10292: PPUSH
10293: CALL_OW 302
10297: PUSH
10298: LD_EXP 42
10302: PUSH
10303: LD_EXP 14
10307: IN
10308: AND
10309: PUSH
10310: LD_EXP 42
10314: PPUSH
10315: CALL_OW 255
10319: PUSH
10320: LD_INT 2
10322: EQUAL
10323: AND
10324: IFFALSE 10369
// begin Say ( Kamil , DKam-Med-12 ) ;
10326: LD_EXP 42
10330: PPUSH
10331: LD_STRING DKam-Med-12
10333: PPUSH
10334: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10338: LD_EXP 42
10342: PPUSH
10343: LD_STRING DKam-Med-13
10345: PPUSH
10346: CALL_OW 88
// if not hasExplosionCollected then
10350: LD_EXP 23
10354: NOT
10355: IFFALSE 10369
// Say ( Heike , DH-Med-d-14 ) ;
10357: LD_EXP 38
10361: PPUSH
10362: LD_STRING DH-Med-d-14
10364: PPUSH
10365: CALL_OW 88
// end ; end ; DialogueOff ;
10369: CALL_OW 7
// adminAreaDiscovered := true ;
10373: LD_ADDR_EXP 22
10377: PUSH
10378: LD_INT 1
10380: ST_TO_ADDR
// laundryAllowed := true ;
10381: LD_ADDR_EXP 26
10385: PUSH
10386: LD_INT 1
10388: ST_TO_ADDR
// end ;
10389: PPOPN 2
10391: END
// every 0 0$1 trigger laundryAllowed do
10392: LD_EXP 26
10396: IFFALSE 10408
10398: GO 10400
10400: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10401: LD_STRING M1-laundry
10403: PPUSH
10404: CALL_OW 337
10408: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10409: LD_EXP 41
10413: NOT
10414: PUSH
10415: LD_EXP 48
10419: NOT
10420: AND
10421: PUSH
10422: LD_EXP 46
10426: PPUSH
10427: CALL_OW 302
10431: AND
10432: PUSH
10433: LD_EXP 46
10437: PUSH
10438: LD_EXP 14
10442: IN
10443: AND
10444: PUSH
10445: LD_EXP 46
10449: PPUSH
10450: CALL_OW 255
10454: PUSH
10455: LD_INT 2
10457: EQUAL
10458: AND
10459: PUSH
10460: LD_EXP 17
10464: NOT
10465: AND
10466: PUSH
10467: LD_EXP 30
10471: NOT
10472: AND
10473: IFFALSE 10629
10475: GO 10477
10477: DISABLE
// begin DialogueOn ;
10478: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10482: LD_INT 152
10484: PPUSH
10485: LD_INT 115
10487: PPUSH
10488: LD_INT 2
10490: PPUSH
10491: LD_INT 16
10493: NEG
10494: PPUSH
10495: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10499: LD_INT 152
10501: PPUSH
10502: LD_INT 115
10504: PPUSH
10505: LD_INT 2
10507: PPUSH
10508: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10512: LD_INT 152
10514: PPUSH
10515: LD_INT 115
10517: PPUSH
10518: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10522: LD_EXP 46
10526: PPUSH
10527: LD_STRING DO-Med-c-1
10529: PPUSH
10530: CALL_OW 88
// if not hasExplosionCollected then
10534: LD_EXP 23
10538: NOT
10539: IFFALSE 10555
// Say ( Heike , DH-Med-d-14 ) else
10541: LD_EXP 38
10545: PPUSH
10546: LD_STRING DH-Med-d-14
10548: PPUSH
10549: CALL_OW 88
10553: GO 10617
// begin Say ( Heike , DH-Med-c-2 ) ;
10555: LD_EXP 38
10559: PPUSH
10560: LD_STRING DH-Med-c-2
10562: PPUSH
10563: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10567: LD_EXP 43
10571: PPUSH
10572: CALL_OW 302
10576: PUSH
10577: LD_EXP 43
10581: PUSH
10582: LD_EXP 14
10586: IN
10587: AND
10588: PUSH
10589: LD_EXP 43
10593: PPUSH
10594: CALL_OW 255
10598: PUSH
10599: LD_INT 2
10601: EQUAL
10602: AND
10603: IFFALSE 10617
// Say ( Kaia , DK-Med-c-3 ) ;
10605: LD_EXP 43
10609: PPUSH
10610: LD_STRING DK-Med-c-3
10612: PPUSH
10613: CALL_OW 88
// end ; DialogueOff ;
10617: CALL_OW 7
// adminAreaDiscovered := true ;
10621: LD_ADDR_EXP 22
10625: PUSH
10626: LD_INT 1
10628: ST_TO_ADDR
// end ;
10629: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10630: LD_EXP 43
10634: PPUSH
10635: CALL_OW 256
10639: PUSH
10640: LD_INT 250
10642: LESS
10643: PUSH
10644: LD_EXP 43
10648: PUSH
10649: LD_EXP 14
10653: IN
10654: AND
10655: PUSH
10656: LD_EXP 17
10660: AND
10661: PUSH
10662: LD_EXP 24
10666: AND
10667: IFFALSE 10796
10669: GO 10671
10671: DISABLE
// begin DialogueOn ;
10672: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10676: LD_EXP 43
10680: PPUSH
10681: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10685: LD_EXP 43
10689: PPUSH
10690: LD_STRING DK-death-1
10692: PPUSH
10693: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10697: LD_EXP 38
10701: PPUSH
10702: LD_STRING DH-death-2
10704: PPUSH
10705: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
10709: LD_EXP 43
10713: PPUSH
10714: LD_STRING DK-death-3
10716: PPUSH
10717: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
10721: LD_EXP 43
10725: PPUSH
10726: LD_STRING DK-death-4
10728: PPUSH
10729: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
10733: LD_EXP 43
10737: PPUSH
10738: LD_INT 8
10740: PPUSH
10741: CALL_OW 235
// ComStop ( Kaia ) ;
10745: LD_EXP 43
10749: PPUSH
10750: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
10754: LD_INT 8
10756: PPUSH
10757: LD_INT 2
10759: PPUSH
10760: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
10764: LD_ADDR_EXP 14
10768: PUSH
10769: LD_EXP 14
10773: PUSH
10774: LD_EXP 43
10778: DIFF
10779: ST_TO_ADDR
// DialogueOff ;
10780: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
10784: LD_EXP 40
10788: PPUSH
10789: LD_STRING DM-death-5
10791: PPUSH
10792: CALL_OW 88
// end ;
10796: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10797: LD_EXP 25
10801: NOT
10802: PUSH
10803: LD_EXP 30
10807: NOT
10808: AND
10809: PUSH
10810: LD_EXP 51
10814: PUSH
10815: LD_EXP 14
10819: IN
10820: NOT
10821: AND
10822: PUSH
10823: LD_INT 2
10825: PPUSH
10826: LD_EXP 51
10830: PPUSH
10831: CALL_OW 292
10835: AND
10836: PUSH
10837: LD_EXP 38
10841: PPUSH
10842: LD_EXP 51
10846: PPUSH
10847: CALL_OW 296
10851: PUSH
10852: LD_INT 6
10854: LESS
10855: AND
10856: PUSH
10857: LD_EXP 17
10861: NOT
10862: AND
10863: IFFALSE 11087
10865: GO 10867
10867: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
10868: LD_EXP 51
10872: PPUSH
10873: LD_EXP 38
10877: PPUSH
10878: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
10882: LD_EXP 38
10886: PPUSH
10887: LD_EXP 51
10891: PPUSH
10892: CALL_OW 119
// wait ( 0 0$0.3 ) ;
10896: LD_INT 10
10898: PPUSH
10899: CALL_OW 67
// DialogueOn ;
10903: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
10907: LD_EXP 51
10911: PPUSH
10912: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
10916: LD_EXP 38
10920: PPUSH
10921: LD_STRING DH-Deal-1
10923: PPUSH
10924: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
10928: LD_EXP 51
10932: PPUSH
10933: LD_STRING DJ-Deal-2
10935: PPUSH
10936: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
10940: LD_EXP 38
10944: PPUSH
10945: LD_STRING DH-Deal-3
10947: PPUSH
10948: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
10952: LD_EXP 51
10956: PPUSH
10957: LD_STRING DJ-Deal-4
10959: PPUSH
10960: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
10964: LD_EXP 51
10968: PPUSH
10969: LD_STRING DJ-Deal-5
10971: PPUSH
10972: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
10976: LD_EXP 51
10980: PPUSH
10981: LD_STRING DJ-Deal-6
10983: PPUSH
10984: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
10988: LD_EXP 51
10992: PPUSH
10993: LD_STRING DJ-Deal-7
10995: PPUSH
10996: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11000: LD_EXP 38
11004: PPUSH
11005: LD_STRING DH-Deal-8
11007: PPUSH
11008: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11012: LD_EXP 38
11016: PPUSH
11017: LD_STRING DH-Deal-9
11019: PPUSH
11020: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11024: LD_EXP 51
11028: PPUSH
11029: LD_STRING DJ-Deal-10
11031: PPUSH
11032: CALL_OW 88
// DialogueOff ;
11036: CALL_OW 7
// contactWithAmerican := true ;
11040: LD_ADDR_EXP 25
11044: PUSH
11045: LD_INT 1
11047: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11048: LD_STRING M1-american-out
11050: PPUSH
11051: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11055: LD_EXP 51
11059: PPUSH
11060: LD_INT 2
11062: PPUSH
11063: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11067: LD_ADDR_EXP 14
11071: PUSH
11072: LD_EXP 14
11076: PPUSH
11077: LD_EXP 51
11081: PPUSH
11082: CALL 64192 0 2
11086: ST_TO_ADDR
// end ;
11087: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11088: LD_EXP 25
11092: PUSH
11093: LD_EXP 30
11097: NOT
11098: AND
11099: PUSH
11100: LD_EXP 51
11104: PUSH
11105: LD_EXP 14
11109: IN
11110: NOT
11111: AND
11112: PUSH
11113: LD_INT 2
11115: PPUSH
11116: LD_EXP 51
11120: PPUSH
11121: CALL_OW 292
11125: AND
11126: PUSH
11127: LD_EXP 38
11131: PPUSH
11132: LD_EXP 51
11136: PPUSH
11137: CALL_OW 296
11141: PUSH
11142: LD_INT 6
11144: LESS
11145: AND
11146: PUSH
11147: LD_EXP 17
11151: NOT
11152: AND
11153: IFFALSE 11278
11155: GO 11157
11157: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11158: LD_EXP 51
11162: PPUSH
11163: LD_EXP 38
11167: PPUSH
11168: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11172: LD_EXP 38
11176: PPUSH
11177: LD_EXP 51
11181: PPUSH
11182: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11186: LD_INT 10
11188: PPUSH
11189: CALL_OW 67
// DialogueOn ;
11193: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11197: LD_EXP 51
11201: PPUSH
11202: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11206: LD_EXP 51
11210: PPUSH
11211: LD_STRING DJ-Escort-1
11213: PPUSH
11214: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11218: LD_EXP 38
11222: PPUSH
11223: LD_STRING DH-Escort-2
11225: PPUSH
11226: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11230: LD_EXP 51
11234: PPUSH
11235: LD_STRING DJ-Escort-3
11237: PPUSH
11238: CALL_OW 88
// DialogueOff ;
11242: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11246: LD_EXP 51
11250: PPUSH
11251: LD_INT 2
11253: PPUSH
11254: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11258: LD_ADDR_EXP 14
11262: PUSH
11263: LD_EXP 14
11267: PPUSH
11268: LD_EXP 51
11272: PPUSH
11273: CALL 64192 0 2
11277: ST_TO_ADDR
// end ;
11278: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11279: LD_EXP 25
11283: PUSH
11284: LD_EXP 30
11288: NOT
11289: AND
11290: PUSH
11291: LD_EXP 50
11295: PUSH
11296: LD_EXP 14
11300: DIFF
11301: PPUSH
11302: LD_INT 22
11304: PUSH
11305: LD_INT 4
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 3
11314: PUSH
11315: LD_INT 120
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 101
11331: PUSH
11332: LD_INT 2
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: PPUSH
11344: CALL_OW 72
11348: AND
11349: PUSH
11350: LD_EXP 17
11354: NOT
11355: AND
11356: IFFALSE 11571
11358: GO 11360
11360: DISABLE
11361: LD_INT 0
11363: PPUSH
// begin enable ;
11364: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11365: LD_ADDR_VAR 0 1
11369: PUSH
11370: LD_EXP 50
11374: PUSH
11375: LD_EXP 14
11379: DIFF
11380: PPUSH
11381: LD_INT 22
11383: PUSH
11384: LD_INT 4
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 91
11393: PUSH
11394: LD_EXP 38
11398: PUSH
11399: LD_INT 6
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 101
11409: PUSH
11410: LD_INT 2
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 72
11426: PPUSH
11427: LD_EXP 38
11431: PPUSH
11432: CALL_OW 74
11436: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11437: LD_VAR 0 1
11441: PPUSH
11442: LD_EXP 38
11446: PPUSH
11447: CALL_OW 296
11451: PUSH
11452: LD_INT 6
11454: LESS
11455: IFFALSE 11571
// begin DialogueOn ;
11457: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11470: LD_EXP 38
11474: PPUSH
11475: LD_STRING DH-USsol-1
11477: PPUSH
11478: CALL_OW 88
// if GetSex ( un ) = sex_male then
11482: LD_VAR 0 1
11486: PPUSH
11487: CALL_OW 258
11491: PUSH
11492: LD_INT 1
11494: EQUAL
11495: IFFALSE 11511
// Say ( un , DUSM-USsol-2 ) else
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_STRING DUSM-USsol-2
11504: PPUSH
11505: CALL_OW 88
11509: GO 11523
// Say ( un , DUSF-USsol-2 ) ;
11511: LD_VAR 0 1
11515: PPUSH
11516: LD_STRING DUSF-USsol-2
11518: PPUSH
11519: CALL_OW 88
// DialogueOff ;
11523: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11527: LD_ADDR_EXP 14
11531: PUSH
11532: LD_EXP 14
11536: PPUSH
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL 64192 0 2
11546: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11547: LD_VAR 0 1
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 109
// SetSide ( un , 2 ) ;
11559: LD_VAR 0 1
11563: PPUSH
11564: LD_INT 2
11566: PPUSH
11567: CALL_OW 235
// end ; end ;
11571: PPOPN 1
11573: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11574: LD_EXP 49
11578: PUSH
11579: LD_EXP 30
11583: NOT
11584: AND
11585: PUSH
11586: LD_EXP 49
11590: PUSH
11591: LD_EXP 14
11595: DIFF
11596: PPUSH
11597: LD_INT 3
11599: PUSH
11600: LD_INT 120
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 91
11616: PUSH
11617: LD_EXP 38
11621: PUSH
11622: LD_INT 6
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 101
11632: PUSH
11633: LD_INT 2
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: PPUSH
11645: CALL_OW 72
11649: AND
11650: PUSH
11651: LD_EXP 17
11655: NOT
11656: AND
11657: IFFALSE 11872
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
// begin enable ;
11665: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11666: LD_ADDR_VAR 0 1
11670: PUSH
11671: LD_EXP 49
11675: PUSH
11676: LD_EXP 14
11680: DIFF
11681: PPUSH
11682: LD_INT 22
11684: PUSH
11685: LD_INT 5
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 91
11694: PUSH
11695: LD_EXP 38
11699: PUSH
11700: LD_INT 6
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 101
11710: PUSH
11711: LD_INT 2
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: PPUSH
11723: CALL_OW 72
11727: PPUSH
11728: LD_EXP 38
11732: PPUSH
11733: CALL_OW 74
11737: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11738: LD_VAR 0 1
11742: PPUSH
11743: LD_EXP 38
11747: PPUSH
11748: CALL_OW 296
11752: PUSH
11753: LD_INT 6
11755: LESS
11756: IFFALSE 11872
// begin DialogueOn ;
11758: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11762: LD_VAR 0 1
11766: PPUSH
11767: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11771: LD_EXP 38
11775: PPUSH
11776: LD_STRING DH-USsol-1
11778: PPUSH
11779: CALL_OW 88
// if GetSex ( un ) = sex_male then
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL_OW 258
11792: PUSH
11793: LD_INT 1
11795: EQUAL
11796: IFFALSE 11812
// Say ( un , DArm-USsol-2 ) else
11798: LD_VAR 0 1
11802: PPUSH
11803: LD_STRING DArm-USsol-2
11805: PPUSH
11806: CALL_OW 88
11810: GO 11824
// Say ( un , DArf-USsol-3 ) ;
11812: LD_VAR 0 1
11816: PPUSH
11817: LD_STRING DArf-USsol-3
11819: PPUSH
11820: CALL_OW 88
// DialogueOff ;
11824: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11828: LD_ADDR_EXP 14
11832: PUSH
11833: LD_EXP 14
11837: PPUSH
11838: LD_VAR 0 1
11842: PPUSH
11843: CALL 64192 0 2
11847: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11848: LD_VAR 0 1
11852: PPUSH
11853: LD_INT 1
11855: PPUSH
11856: CALL_OW 109
// SetSide ( un , 2 ) ;
11860: LD_VAR 0 1
11864: PPUSH
11865: LD_INT 2
11867: PPUSH
11868: CALL_OW 235
// end ; end ;
11872: PPOPN 1
11874: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
11875: LD_EXP 50
11879: PPUSH
11880: LD_INT 101
11882: PUSH
11883: LD_INT 2
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 72
11894: PUSH
11895: LD_EXP 14
11899: PPUSH
11900: LD_INT 22
11902: PUSH
11903: LD_INT 2
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 72
11914: PUSH
11915: LD_INT 5
11917: GREATER
11918: AND
11919: PUSH
11920: LD_EXP 10
11924: NOT
11925: AND
11926: PUSH
11927: LD_EXP 30
11931: NOT
11932: AND
11933: PUSH
11934: LD_EXP 25
11938: NOT
11939: AND
11940: PUSH
11941: LD_EXP 17
11945: NOT
11946: AND
11947: IFFALSE 12062
11949: GO 11951
11951: DISABLE
11952: LD_INT 0
11954: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
11955: LD_ADDR_VAR 0 1
11959: PUSH
11960: LD_EXP 50
11964: PPUSH
11965: LD_INT 22
11967: PUSH
11968: LD_INT 4
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 101
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 72
11993: PUSH
11994: LD_INT 1
11996: ARRAY
11997: ST_TO_ADDR
// DialogueOn ;
11998: CALL_OW 6
// if GetSex ( un ) = sex_male then
12002: LD_VAR 0 1
12006: PPUSH
12007: CALL_OW 258
12011: PUSH
12012: LD_INT 1
12014: EQUAL
12015: IFFALSE 12031
// Say ( un , DUSm-USsol-a-2 ) else
12017: LD_VAR 0 1
12021: PPUSH
12022: LD_STRING DUSm-USsol-a-2
12024: PPUSH
12025: CALL_OW 88
12029: GO 12043
// Say ( un , DUSf-USsol-a-2 ) ;
12031: LD_VAR 0 1
12035: PPUSH
12036: LD_STRING DUSf-USsol-a-2
12038: PPUSH
12039: CALL_OW 88
// DialogueOff ;
12043: CALL_OW 7
// wait ( 0 0$2 ) ;
12047: LD_INT 70
12049: PPUSH
12050: CALL_OW 67
// isAlarm := true ;
12054: LD_ADDR_EXP 17
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// end ;
12062: PPOPN 1
12064: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12065: LD_EXP 17
12069: NOT
12070: PUSH
12071: LD_EXP 39
12075: PPUSH
12076: CALL_OW 302
12080: AND
12081: PUSH
12082: LD_EXP 39
12086: PPUSH
12087: CALL_OW 255
12091: PUSH
12092: LD_INT 2
12094: EQUAL
12095: AND
12096: PUSH
12097: LD_EXP 26
12101: AND
12102: PUSH
12103: LD_EXP 28
12107: NOT
12108: AND
12109: PUSH
12110: LD_EXP 27
12114: NOT
12115: AND
12116: PUSH
12117: LD_EXP 30
12121: NOT
12122: AND
12123: PUSH
12124: LD_EXP 39
12128: PPUSH
12129: LD_INT 165
12131: PPUSH
12132: CALL 18448 0 2
12136: AND
12137: IFFALSE 12269
12139: GO 12141
12141: DISABLE
// begin enable ;
12142: ENABLE
// InGameOn ;
12143: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12147: LD_EXP 39
12151: PPUSH
12152: LD_INT 5
12154: PPUSH
12155: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12159: LD_INT 165
12161: PPUSH
12162: LD_INT 5
12164: PPUSH
12165: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12169: LD_EXP 39
12173: PPUSH
12174: LD_INT 165
12176: PPUSH
12177: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12181: LD_INT 35
12183: PPUSH
12184: CALL_OW 67
// until IsInUnit ( Givi ) ;
12188: LD_EXP 39
12192: PPUSH
12193: CALL_OW 310
12197: IFFALSE 12181
// case Query ( GiviInLaundry ) of 1 :
12199: LD_STRING GiviInLaundry
12201: PPUSH
12202: CALL_OW 97
12206: PUSH
12207: LD_INT 1
12209: DOUBLE
12210: EQUAL
12211: IFTRUE 12215
12213: GO 12222
12215: POP
// SpawnGiviAsRussian ; 2 :
12216: CALL 1825 0 0
12220: GO 12234
12222: LD_INT 2
12224: DOUBLE
12225: EQUAL
12226: IFTRUE 12230
12228: GO 12233
12230: POP
// ; end ;
12231: GO 12234
12233: POP
// ComExitBuilding ( Givi ) ;
12234: LD_EXP 39
12238: PPUSH
12239: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12243: LD_EXP 39
12247: PPUSH
12248: LD_INT 2
12250: PPUSH
12251: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12255: LD_INT 165
12257: PPUSH
12258: LD_INT 3
12260: PPUSH
12261: CALL_OW 235
// InGameOff ;
12265: CALL_OW 9
// end ;
12269: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12270: LD_EXP 17
12274: NOT
12275: PUSH
12276: LD_EXP 28
12280: AND
12281: PUSH
12282: LD_EXP 39
12286: PPUSH
12287: CALL_OW 255
12291: PUSH
12292: LD_INT 2
12294: EQUAL
12295: AND
12296: PUSH
12297: LD_EXP 39
12301: PPUSH
12302: CALL_OW 248
12306: PUSH
12307: LD_INT 3
12309: EQUAL
12310: AND
12311: PUSH
12312: LD_EXP 39
12316: PPUSH
12317: LD_INT 119
12319: PPUSH
12320: CALL 18448 0 2
12324: AND
12325: PUSH
12326: LD_EXP 30
12330: NOT
12331: AND
12332: IFFALSE 12556
12334: GO 12336
12336: DISABLE
// begin InGameOn ;
12337: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12341: LD_EXP 39
12345: PPUSH
12346: LD_INT 3
12348: PPUSH
12349: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12353: LD_EXP 39
12357: PPUSH
12358: LD_INT 119
12360: PPUSH
12361: CALL_OW 120
// wait ( 0 0$1 ) ;
12365: LD_INT 35
12367: PPUSH
12368: CALL_OW 67
// DialogueOn ;
12372: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12376: LD_EXP 39
12380: PPUSH
12381: LD_STRING DG-Captive-1
12383: PPUSH
12384: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12388: LD_EXP 57
12392: PPUSH
12393: LD_STRING DCom-Captive-2
12395: PPUSH
12396: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12400: LD_EXP 39
12404: PPUSH
12405: LD_STRING DG-Captive-3
12407: PPUSH
12408: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12412: LD_EXP 57
12416: PPUSH
12417: LD_STRING DCom-Captive-4
12419: PPUSH
12420: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12424: LD_EXP 57
12428: PPUSH
12429: CALL_OW 64
// DialogueOff ;
12433: CALL_OW 7
// InGameOff ;
12437: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12441: LD_EXP 39
12445: PPUSH
12446: LD_INT 2
12448: PPUSH
12449: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12453: LD_EXP 39
12457: PPUSH
12458: CALL_OW 122
// if Aviradze then
12462: LD_EXP 48
12466: IFFALSE 12509
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12468: LD_ADDR_EXP 14
12472: PUSH
12473: LD_EXP 14
12477: PPUSH
12478: LD_EXP 48
12482: PPUSH
12483: CALL 64192 0 2
12487: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12488: LD_EXP 48
12492: PPUSH
12493: LD_INT 2
12495: PPUSH
12496: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12500: LD_EXP 48
12504: PPUSH
12505: CALL_OW 122
// end ; if Ibrahim then
12509: LD_EXP 41
12513: IFFALSE 12556
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12515: LD_ADDR_EXP 14
12519: PUSH
12520: LD_EXP 14
12524: PPUSH
12525: LD_EXP 41
12529: PPUSH
12530: CALL 64192 0 2
12534: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12535: LD_EXP 41
12539: PPUSH
12540: LD_INT 2
12542: PPUSH
12543: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12547: LD_EXP 41
12551: PPUSH
12552: CALL_OW 122
// end ; end ;
12556: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12557: LD_EXP 17
12561: NOT
12562: PUSH
12563: LD_EXP 27
12567: AND
12568: PUSH
12569: LD_EXP 38
12573: PPUSH
12574: CALL_OW 248
12578: PUSH
12579: LD_INT 3
12581: EQUAL
12582: AND
12583: PUSH
12584: LD_EXP 38
12588: PPUSH
12589: LD_INT 119
12591: PPUSH
12592: CALL 18448 0 2
12596: AND
12597: PUSH
12598: LD_EXP 30
12602: NOT
12603: AND
12604: IFFALSE 12866
12606: GO 12608
12608: DISABLE
// begin InGameOn ;
12609: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12613: LD_EXP 38
12617: PPUSH
12618: LD_INT 3
12620: PPUSH
12621: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12625: LD_EXP 38
12629: PPUSH
12630: LD_INT 119
12632: PPUSH
12633: CALL_OW 120
// wait ( 0 0$1 ) ;
12637: LD_INT 35
12639: PPUSH
12640: CALL_OW 67
// DialogueOn ;
12644: CALL_OW 6
// if Aviradze and Ibrahim then
12648: LD_EXP 48
12652: PUSH
12653: LD_EXP 41
12657: AND
12658: IFFALSE 12674
// Say ( Heike , DH-Captive-a-1 ) else
12660: LD_EXP 38
12664: PPUSH
12665: LD_STRING DH-Captive-a-1
12667: PPUSH
12668: CALL_OW 88
12672: GO 12686
// Say ( Heike , DH-Captive-a-b-1 ) ;
12674: LD_EXP 38
12678: PPUSH
12679: LD_STRING DH-Captive-a-b-1
12681: PPUSH
12682: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12686: LD_EXP 57
12690: PPUSH
12691: LD_STRING DCom-Captive-a-2
12693: PPUSH
12694: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12698: LD_EXP 38
12702: PPUSH
12703: LD_STRING DH-Captive-a-3
12705: PPUSH
12706: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
12710: LD_EXP 57
12714: PPUSH
12715: LD_STRING DCom-Captive-a-4
12717: PPUSH
12718: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
12722: LD_EXP 38
12726: PPUSH
12727: LD_STRING DH-Captive-a-5
12729: PPUSH
12730: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12734: LD_EXP 57
12738: PPUSH
12739: CALL_OW 64
// DialogueOff ;
12743: CALL_OW 7
// InGameOff ;
12747: CALL_OW 9
// SetSide ( Heike , 2 ) ;
12751: LD_EXP 38
12755: PPUSH
12756: LD_INT 2
12758: PPUSH
12759: CALL_OW 235
// ComExitBuilding ( Heike ) ;
12763: LD_EXP 38
12767: PPUSH
12768: CALL_OW 122
// if Aviradze then
12772: LD_EXP 48
12776: IFFALSE 12819
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12778: LD_ADDR_EXP 14
12782: PUSH
12783: LD_EXP 14
12787: PPUSH
12788: LD_EXP 48
12792: PPUSH
12793: CALL 64192 0 2
12797: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12798: LD_EXP 48
12802: PPUSH
12803: LD_INT 2
12805: PPUSH
12806: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12810: LD_EXP 48
12814: PPUSH
12815: CALL_OW 122
// end ; if Ibrahim then
12819: LD_EXP 41
12823: IFFALSE 12866
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12825: LD_ADDR_EXP 14
12829: PUSH
12830: LD_EXP 14
12834: PPUSH
12835: LD_EXP 41
12839: PPUSH
12840: CALL 64192 0 2
12844: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12845: LD_EXP 41
12849: PPUSH
12850: LD_INT 2
12852: PPUSH
12853: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12857: LD_EXP 41
12861: PPUSH
12862: CALL_OW 122
// end ; end ;
12866: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
12867: LD_INT 2
12869: PUSH
12870: LD_INT 25
12872: PUSH
12873: LD_INT 32
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 25
12882: PUSH
12883: LD_INT 34
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: IFFALSE 12911
12901: GO 12903
12903: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
12904: LD_STRING M1-weapons-out
12906: PPUSH
12907: CALL_OW 604
12911: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
12912: LD_INT 2
12914: PPUSH
12915: LD_EXP 53
12919: PPUSH
12920: CALL_OW 292
12924: PUSH
12925: LD_EXP 38
12929: PPUSH
12930: LD_EXP 53
12934: PPUSH
12935: CALL_OW 296
12939: AND
12940: PUSH
12941: LD_EXP 25
12945: NOT
12946: AND
12947: PUSH
12948: LD_EXP 17
12952: NOT
12953: AND
12954: PUSH
12955: LD_EXP 30
12959: NOT
12960: AND
12961: IFFALSE 13710
12963: GO 12965
12965: DISABLE
12966: LD_INT 0
12968: PPUSH
12969: PPUSH
// begin DialogueOn ;
12970: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
12974: LD_EXP 53
12978: PPUSH
12979: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
12983: LD_EXP 53
12987: PPUSH
12988: LD_STRING DJy-Food-1
12990: PPUSH
12991: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
12995: LD_EXP 38
12999: PPUSH
13000: LD_STRING DH-Food-2
13002: PPUSH
13003: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13007: LD_EXP 53
13011: PPUSH
13012: LD_STRING DJy-Food-3
13014: PPUSH
13015: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13019: LD_EXP 53
13023: PPUSH
13024: LD_STRING DJy-Food-4
13026: PPUSH
13027: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13031: LD_EXP 38
13035: PPUSH
13036: LD_STRING DH-Food-5
13038: PPUSH
13039: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13043: LD_EXP 53
13047: PPUSH
13048: LD_STRING DJy-Food-6
13050: PPUSH
13051: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13055: LD_EXP 53
13059: PPUSH
13060: LD_STRING DJy-Food-7
13062: PPUSH
13063: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13067: LD_EXP 53
13071: PPUSH
13072: LD_STRING DJy-Food-8
13074: PPUSH
13075: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13079: LD_EXP 38
13083: PPUSH
13084: LD_STRING DH-Food-9
13086: PPUSH
13087: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13091: LD_EXP 53
13095: PPUSH
13096: LD_STRING DJy-Food-10
13098: PPUSH
13099: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13103: LD_EXP 38
13107: PPUSH
13108: LD_STRING DH-Food-11
13110: PPUSH
13111: CALL_OW 88
// DialogueOff ;
13115: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13119: LD_STRING M3
13121: PPUSH
13122: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13126: LD_INT 5
13128: PPUSH
13129: LD_INT 215
13131: PPUSH
13132: LD_INT 117
13134: PPUSH
13135: LD_INT 0
13137: PPUSH
13138: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13142: LD_INT 215
13144: PPUSH
13145: LD_INT 118
13147: PPUSH
13148: LD_INT 2
13150: PPUSH
13151: LD_INT 6
13153: NEG
13154: PPUSH
13155: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13159: LD_INT 215
13161: PPUSH
13162: LD_INT 118
13164: PPUSH
13165: LD_INT 2
13167: PPUSH
13168: CALL_OW 331
// foodDelivered := false ;
13172: LD_ADDR_VAR 0 2
13176: PUSH
13177: LD_INT 0
13179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13180: LD_INT 35
13182: PPUSH
13183: CALL_OW 67
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: LD_EXP 14
13196: PUSH
13197: LD_EXP 38
13201: UNION
13202: PPUSH
13203: LD_INT 91
13205: PUSH
13206: LD_EXP 53
13210: PUSH
13211: LD_INT 6
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 25
13221: PUSH
13222: LD_INT 33
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 72
13237: PUSH
13238: FOR_IN
13239: IFFALSE 13439
// if Carry ( i ) then
13241: LD_VAR 0 1
13245: PPUSH
13246: CALL_OW 281
13250: IFFALSE 13437
// begin DialogueOn ;
13252: CALL_OW 6
// foodDelivered := true ;
13256: LD_ADDR_VAR 0 2
13260: PUSH
13261: LD_INT 1
13263: ST_TO_ADDR
// case i of Heike :
13264: LD_VAR 0 1
13268: PUSH
13269: LD_EXP 38
13273: DOUBLE
13274: EQUAL
13275: IFTRUE 13279
13277: GO 13294
13279: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13280: LD_EXP 38
13284: PPUSH
13285: LD_STRING DH-Food-12
13287: PPUSH
13288: CALL_OW 88
13292: GO 13420
13294: LD_EXP 43
13298: DOUBLE
13299: EQUAL
13300: IFTRUE 13304
13302: GO 13319
13304: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13305: LD_EXP 43
13309: PPUSH
13310: LD_STRING DK-Food-a-12
13312: PPUSH
13313: CALL_OW 88
13317: GO 13420
13319: LD_EXP 45
13323: DOUBLE
13324: EQUAL
13325: IFTRUE 13329
13327: GO 13344
13329: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13330: LD_EXP 45
13334: PPUSH
13335: LD_STRING DMar-Food-a-12
13337: PPUSH
13338: CALL_OW 88
13342: GO 13420
13344: LD_EXP 39
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13369
13354: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13355: LD_EXP 39
13359: PPUSH
13360: LD_STRING DG-Food-a-14
13362: PPUSH
13363: CALL_OW 88
13367: GO 13420
13369: LD_EXP 40
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13394
13379: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13380: LD_EXP 40
13384: PPUSH
13385: LD_STRING DM-Food-a-15
13387: PPUSH
13388: CALL_OW 88
13392: GO 13420
13394: LD_EXP 42
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13419
13404: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13405: LD_EXP 42
13409: PPUSH
13410: LD_STRING DKam-Food-a-16
13412: PPUSH
13413: CALL_OW 88
13417: GO 13420
13419: POP
// SetCargo ( i , mat_cans , 0 ) ;
13420: LD_VAR 0 1
13424: PPUSH
13425: LD_INT 1
13427: PPUSH
13428: LD_INT 0
13430: PPUSH
13431: CALL_OW 290
// break ;
13435: GO 13439
// end ;
13437: GO 13238
13439: POP
13440: POP
// until foodDelivered ;
13441: LD_VAR 0 2
13445: IFFALSE 13180
// givenFood := true ;
13447: LD_ADDR_EXP 33
13451: PUSH
13452: LD_INT 1
13454: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13455: LD_EXP 53
13459: PPUSH
13460: LD_STRING DJy-Food-13
13462: PPUSH
13463: CALL_OW 88
// hasVirus := true ;
13467: LD_ADDR_EXP 31
13471: PUSH
13472: LD_INT 1
13474: ST_TO_ADDR
// if not americanContact then
13475: LD_EXP 10
13479: NOT
13480: IFFALSE 13530
// begin Say ( Heike , DH-Food-14 ) ;
13482: LD_EXP 38
13486: PPUSH
13487: LD_STRING DH-Food-14
13489: PPUSH
13490: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13494: LD_EXP 53
13498: PPUSH
13499: LD_STRING DJy-Food-15
13501: PPUSH
13502: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13506: LD_EXP 53
13510: PPUSH
13511: LD_STRING DJy-Food-16
13513: PPUSH
13514: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13518: LD_EXP 53
13522: PPUSH
13523: LD_STRING DJy-Food-17
13525: PPUSH
13526: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13530: LD_STRING M3-out
13532: PPUSH
13533: CALL_OW 337
// DialogueOff ;
13537: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13541: LD_EXP 53
13545: PPUSH
13546: LD_INT 1
13548: PPUSH
13549: LD_INT 10
13551: PPUSH
13552: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13556: LD_EXP 53
13560: PPUSH
13561: LD_INT 95
13563: PPUSH
13564: LD_INT 17
13566: PPUSH
13567: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13571: LD_INT 35
13573: PPUSH
13574: CALL_OW 67
// if not HasTask ( Jerry ) then
13578: LD_EXP 53
13582: PPUSH
13583: CALL_OW 314
13587: NOT
13588: IFFALSE 13605
// ComMoveXY ( Jerry , 95 , 17 ) ;
13590: LD_EXP 53
13594: PPUSH
13595: LD_INT 95
13597: PPUSH
13598: LD_INT 17
13600: PPUSH
13601: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13605: LD_EXP 53
13609: PPUSH
13610: LD_INT 95
13612: PPUSH
13613: LD_INT 17
13615: PPUSH
13616: CALL_OW 307
13620: IFFALSE 13571
// SetCargo ( Jerry , mat_cans , 0 ) ;
13622: LD_EXP 53
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: LD_INT 0
13632: PPUSH
13633: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13637: LD_ADDR_EXP 50
13641: PUSH
13642: LD_EXP 50
13646: PPUSH
13647: LD_EXP 53
13651: PPUSH
13652: CALL 64192 0 2
13656: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13657: LD_ADDR_VAR 0 1
13661: PUSH
13662: LD_INT 22
13664: PUSH
13665: LD_INT 4
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 23
13674: PUSH
13675: LD_INT 1
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: PUSH
13691: FOR_IN
13692: IFFALSE 13708
// SetLives ( i , 1000 ) ;
13694: LD_VAR 0 1
13698: PPUSH
13699: LD_INT 1000
13701: PPUSH
13702: CALL_OW 234
13706: GO 13691
13708: POP
13709: POP
// end ;
13710: PPOPN 2
13712: END
// every 0 0$2 trigger hasExplosions marked gameStartEvent do var un , tmp ;
13713: LD_EXP 6
13717: IFFALSE 14148
13719: GO 13721
13721: DISABLE
13722: LD_INT 0
13724: PPUSH
13725: PPUSH
// begin tmp := [ ] ;
13726: LD_ADDR_VAR 0 2
13730: PUSH
13731: EMPTY
13732: ST_TO_ADDR
// uc_side := 3 ;
13733: LD_ADDR_OWVAR 20
13737: PUSH
13738: LD_INT 3
13740: ST_TO_ADDR
// uc_nation := 3 ;
13741: LD_ADDR_OWVAR 21
13745: PUSH
13746: LD_INT 3
13748: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
13749: LD_INT 1
13751: PPUSH
13752: LD_INT 8
13754: PPUSH
13755: CALL_OW 381
// un := CreateHuman ;
13759: LD_ADDR_VAR 0 1
13763: PUSH
13764: CALL_OW 44
13768: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
13769: LD_VAR 0 1
13773: PPUSH
13774: LD_INT 173
13776: PPUSH
13777: LD_INT 104
13779: PPUSH
13780: LD_INT 0
13782: PPUSH
13783: CALL_OW 48
// tmp := Join ( tmp , un ) ;
13787: LD_ADDR_VAR 0 2
13791: PUSH
13792: LD_VAR 0 2
13796: PPUSH
13797: LD_VAR 0 1
13801: PPUSH
13802: CALL 64192 0 2
13806: ST_TO_ADDR
// un := CreateHuman ;
13807: LD_ADDR_VAR 0 1
13811: PUSH
13812: CALL_OW 44
13816: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
13817: LD_VAR 0 1
13821: PPUSH
13822: LD_INT 73
13824: PPUSH
13825: CALL_OW 52
// tmp := Join ( tmp , un ) ;
13829: LD_ADDR_VAR 0 2
13833: PUSH
13834: LD_VAR 0 2
13838: PPUSH
13839: LD_VAR 0 1
13843: PPUSH
13844: CALL 64192 0 2
13848: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13849: LD_INT 35
13851: PPUSH
13852: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
13856: LD_EXP 43
13860: PPUSH
13861: CALL_OW 255
13865: PUSH
13866: LD_INT 2
13868: EQUAL
13869: PUSH
13870: LD_EXP 43
13874: PPUSH
13875: LD_INT 73
13877: PPUSH
13878: CALL_OW 296
13882: PUSH
13883: LD_INT 8
13885: LESS
13886: AND
13887: PUSH
13888: LD_VAR 0 2
13892: PPUSH
13893: LD_INT 101
13895: PUSH
13896: LD_INT 2
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PPUSH
13903: CALL_OW 72
13907: AND
13908: IFFALSE 13849
// InGameOn ;
13910: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
13914: LD_INT 73
13916: PPUSH
13917: CALL_OW 250
13921: PPUSH
13922: LD_INT 73
13924: PPUSH
13925: CALL_OW 251
13929: PPUSH
13930: LD_INT 2
13932: PPUSH
13933: LD_INT 9
13935: NEG
13936: PPUSH
13937: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
13941: LD_INT 73
13943: PPUSH
13944: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
13948: LD_EXP 43
13952: PPUSH
13953: LD_INT 73
13955: PPUSH
13956: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
13960: LD_EXP 43
13964: PPUSH
13965: LD_STRING DK-Plastic-1
13967: PPUSH
13968: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
13972: LD_EXP 43
13976: PPUSH
13977: LD_STRING DK-Plastic-2
13979: PPUSH
13980: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
13984: LD_EXP 43
13988: PPUSH
13989: LD_INT 73
13991: PPUSH
13992: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13996: LD_INT 35
13998: PPUSH
13999: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14003: LD_EXP 43
14007: PPUSH
14008: LD_INT 73
14010: PPUSH
14011: CALL_OW 296
14015: PUSH
14016: LD_INT 6
14018: LESS
14019: IFFALSE 13996
// ComHold ( Kaia ) ;
14021: LD_EXP 43
14025: PPUSH
14026: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14030: LD_VAR 0 2
14034: PUSH
14035: LD_INT 1
14037: ARRAY
14038: PPUSH
14039: LD_STRING DRum-Plastic-3
14041: PPUSH
14042: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14046: LD_VAR 0 2
14050: PUSH
14051: LD_INT 2
14053: ARRAY
14054: PPUSH
14055: LD_STRING DRum2-Plastic-4
14057: PPUSH
14058: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14062: LD_VAR 0 2
14066: PUSH
14067: LD_INT 1
14069: ARRAY
14070: PPUSH
14071: LD_STRING DRum-Plastic-5
14073: PPUSH
14074: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14078: LD_VAR 0 2
14082: PUSH
14083: LD_INT 2
14085: ARRAY
14086: PPUSH
14087: LD_STRING DRum2-Plastic-6
14089: PPUSH
14090: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14094: LD_EXP 43
14098: PPUSH
14099: LD_STRING DK-Plastic-7
14101: PPUSH
14102: CALL_OW 88
// InGameOff ;
14106: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14110: LD_INT 73
14112: PPUSH
14113: CALL_OW 250
14117: PPUSH
14118: LD_INT 73
14120: PPUSH
14121: CALL_OW 251
14125: PPUSH
14126: LD_INT 2
14128: PPUSH
14129: CALL_OW 331
// explosionsTakenByRussians := true ;
14133: LD_ADDR_EXP 21
14137: PUSH
14138: LD_INT 1
14140: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14141: LD_STRING ExplosivesInfo
14143: PPUSH
14144: CALL_OW 97
// end ;
14148: PPOPN 2
14150: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14151: LD_EXP 21
14155: PUSH
14156: LD_EXP 43
14160: PPUSH
14161: CALL_OW 255
14165: PUSH
14166: LD_INT 2
14168: EQUAL
14169: AND
14170: PUSH
14171: LD_EXP 43
14175: PPUSH
14176: LD_INT 61
14178: PPUSH
14179: CALL 18448 0 2
14183: AND
14184: PUSH
14185: LD_EXP 17
14189: NOT
14190: AND
14191: PUSH
14192: LD_EXP 30
14196: NOT
14197: AND
14198: IFFALSE 14354
14200: GO 14202
14202: DISABLE
// begin InGameOn ;
14203: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14207: LD_INT 61
14209: PPUSH
14210: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14214: LD_EXP 43
14218: PPUSH
14219: LD_INT 3
14221: PPUSH
14222: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14226: LD_EXP 43
14230: PPUSH
14231: LD_INT 61
14233: PPUSH
14234: CALL_OW 120
// wait ( 0 0$2 ) ;
14238: LD_INT 70
14240: PPUSH
14241: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14245: LD_EXP 43
14249: PPUSH
14250: LD_STRING DK-Plastic-8
14252: PPUSH
14253: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14257: LD_EXP 59
14261: PUSH
14262: LD_INT 1
14264: ARRAY
14265: PPUSH
14266: LD_STRING DRuMch-Plastic-9
14268: PPUSH
14269: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14273: LD_EXP 43
14277: PPUSH
14278: LD_STRING DK-Plastic-10
14280: PPUSH
14281: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14285: LD_EXP 59
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: LD_STRING DRuMch-Plastic-a-11
14296: PPUSH
14297: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14301: LD_EXP 43
14305: PPUSH
14306: LD_STRING DK-Plastic-a-12
14308: PPUSH
14309: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14313: LD_EXP 59
14317: PUSH
14318: LD_INT 1
14320: ARRAY
14321: PPUSH
14322: LD_STRING DRuMch-Plastic-a-13
14324: PPUSH
14325: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14329: LD_EXP 43
14333: PPUSH
14334: LD_INT 2
14336: PPUSH
14337: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14341: LD_EXP 43
14345: PPUSH
14346: CALL_OW 122
// InGameOff ;
14350: CALL_OW 9
// end ;
14354: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14355: LD_EXP 21
14359: PUSH
14360: LD_EXP 43
14364: PPUSH
14365: CALL_OW 255
14369: PUSH
14370: LD_INT 2
14372: EQUAL
14373: AND
14374: PUSH
14375: LD_EXP 43
14379: PPUSH
14380: LD_INT 196
14382: PPUSH
14383: CALL 18448 0 2
14387: AND
14388: PUSH
14389: LD_EXP 17
14393: NOT
14394: AND
14395: PUSH
14396: LD_EXP 30
14400: NOT
14401: AND
14402: IFFALSE 14734
14404: GO 14406
14406: DISABLE
// begin InGameOn ;
14407: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14411: LD_INT 196
14413: PPUSH
14414: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14418: LD_EXP 43
14422: PPUSH
14423: LD_INT 3
14425: PPUSH
14426: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14430: LD_EXP 43
14434: PPUSH
14435: LD_INT 196
14437: PPUSH
14438: CALL_OW 120
// wait ( 0 0$2 ) ;
14442: LD_INT 70
14444: PPUSH
14445: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14449: LD_EXP 43
14453: PPUSH
14454: LD_STRING DK-Plastic-8
14456: PPUSH
14457: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14461: LD_EXP 60
14465: PUSH
14466: LD_INT 1
14468: ARRAY
14469: PPUSH
14470: LD_STRING DRuMch-Plastic-9
14472: PPUSH
14473: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14477: LD_EXP 43
14481: PPUSH
14482: LD_STRING DK-Plastic-10
14484: PPUSH
14485: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14489: LD_EXP 60
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: LD_STRING DRuMch-Plastic-11
14500: PPUSH
14501: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14505: LD_EXP 43
14509: PPUSH
14510: LD_STRING DK-Plastic-12
14512: PPUSH
14513: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14517: LD_EXP 43
14521: PPUSH
14522: LD_STRING DK-Plastic-13
14524: PPUSH
14525: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14529: LD_EXP 60
14533: PUSH
14534: LD_INT 1
14536: ARRAY
14537: PPUSH
14538: LD_STRING DRuMch-Plastic-14
14540: PPUSH
14541: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14545: LD_EXP 61
14549: PPUSH
14550: LD_INT 167
14552: PPUSH
14553: LD_INT 34
14555: PPUSH
14556: LD_INT 3
14558: PPUSH
14559: LD_INT 0
14561: PPUSH
14562: CALL 66332 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14566: LD_EXP 61
14570: PPUSH
14571: LD_INT 196
14573: PPUSH
14574: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14578: LD_INT 35
14580: PPUSH
14581: CALL_OW 67
// if not HasTask ( Stiopa ) then
14585: LD_EXP 61
14589: PPUSH
14590: CALL_OW 314
14594: NOT
14595: IFFALSE 14609
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14597: LD_EXP 61
14601: PPUSH
14602: LD_INT 196
14604: PPUSH
14605: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14609: LD_EXP 61
14613: PPUSH
14614: CALL_OW 310
14618: IFFALSE 14578
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14620: LD_EXP 61
14624: PPUSH
14625: LD_STRING DSpn-Plastic-15
14627: PPUSH
14628: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14632: LD_EXP 62
14636: PPUSH
14637: LD_STRING DLr-Plastic-16
14639: PPUSH
14640: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14644: LD_EXP 43
14648: PPUSH
14649: LD_STRING DK-Plastic-17
14651: PPUSH
14652: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14656: LD_INT 10
14658: PPUSH
14659: CALL_OW 67
// SetSide ( Kaia , 2 ) ;
14663: LD_EXP 43
14667: PPUSH
14668: LD_INT 2
14670: PPUSH
14671: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14675: LD_EXP 43
14679: PPUSH
14680: CALL_OW 122
// InGameOff ;
14684: CALL_OW 9
// explosionsTakenByRussians := false ;
14688: LD_ADDR_EXP 21
14692: PUSH
14693: LD_INT 0
14695: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
14696: LD_INT 170
14698: PPUSH
14699: LD_INT 28
14701: PPUSH
14702: LD_INT 2
14704: PPUSH
14705: LD_INT 6
14707: NEG
14708: PPUSH
14709: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
14713: LD_INT 170
14715: PPUSH
14716: LD_INT 28
14718: PPUSH
14719: LD_INT 2
14721: PPUSH
14722: CALL_OW 331
// knowWhereExplosivesAre := true ;
14726: LD_ADDR_EXP 34
14730: PUSH
14731: LD_INT 1
14733: ST_TO_ADDR
// end ;
14734: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
14735: LD_EXP 34
14739: PUSH
14740: LD_EXP 43
14744: PPUSH
14745: CALL_OW 255
14749: PUSH
14750: LD_INT 2
14752: EQUAL
14753: AND
14754: PUSH
14755: LD_EXP 43
14759: PPUSH
14760: LD_INT 195
14762: PPUSH
14763: CALL 18448 0 2
14767: AND
14768: PUSH
14769: LD_EXP 17
14773: NOT
14774: AND
14775: PUSH
14776: LD_EXP 30
14780: NOT
14781: AND
14782: IFFALSE 14881
14784: GO 14786
14786: DISABLE
// begin InGameOn ;
14787: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
14791: LD_EXP 43
14795: PPUSH
14796: LD_INT 3
14798: PPUSH
14799: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
14803: LD_EXP 43
14807: PPUSH
14808: LD_INT 195
14810: PPUSH
14811: CALL_OW 120
// wait ( 0 0$1 ) ;
14815: LD_INT 35
14817: PPUSH
14818: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
14822: LD_EXP 43
14826: PPUSH
14827: LD_STRING DK-Plastic-18
14829: PPUSH
14830: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
14834: LD_STRING ExplosivesInfoUsage
14836: PPUSH
14837: CALL_OW 97
// SetSide ( Kaia , 2 ) ;
14841: LD_EXP 43
14845: PPUSH
14846: LD_INT 2
14848: PPUSH
14849: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14853: LD_EXP 43
14857: PPUSH
14858: CALL_OW 122
// InGameOff ;
14862: CALL_OW 9
// hasExplosionCollected := true ;
14866: LD_ADDR_EXP 23
14870: PUSH
14871: LD_INT 1
14873: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
14874: LD_STRING M1-explosive-out
14876: PPUSH
14877: CALL_OW 337
// end ;
14881: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
14882: LD_EXP 23
14886: PUSH
14887: LD_EXP 17
14891: NOT
14892: AND
14893: PUSH
14894: LD_EXP 30
14898: NOT
14899: AND
14900: IFFALSE 15075
14902: GO 14904
14904: DISABLE
14905: LD_INT 0
14907: PPUSH
14908: PPUSH
// begin for i in importantBuildingsList do
14909: LD_ADDR_VAR 0 1
14913: PUSH
14914: LD_EXP 35
14918: PUSH
14919: FOR_IN
14920: IFFALSE 14936
// MarkBuilding ( i , true ) ;
14922: LD_VAR 0 1
14926: PPUSH
14927: LD_INT 1
14929: PPUSH
14930: CALL 18822 0 2
14934: GO 14919
14936: POP
14937: POP
// repeat wait ( 0 0$1 ) ;
14938: LD_INT 35
14940: PPUSH
14941: CALL_OW 67
// for i in importantBuildingsList do
14945: LD_ADDR_VAR 0 1
14949: PUSH
14950: LD_EXP 35
14954: PUSH
14955: FOR_IN
14956: IFFALSE 15066
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
14958: LD_EXP 38
14962: PUSH
14963: LD_EXP 14
14967: UNION
14968: PPUSH
14969: LD_INT 22
14971: PUSH
14972: LD_INT 2
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 1
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 91
14991: PUSH
14992: LD_VAR 0 1
14996: PUSH
14997: LD_INT 6
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 72
15014: IFFALSE 15064
// begin CenterNowOnUnits ( i ) ;
15016: LD_VAR 0 1
15020: PPUSH
15021: CALL_OW 87
// PlaceExplosives ( i ) ;
15025: LD_VAR 0 1
15029: PPUSH
15030: CALL 18719 0 1
// MarkBuilding ( i , false ) ;
15034: LD_VAR 0 1
15038: PPUSH
15039: LD_INT 0
15041: PPUSH
15042: CALL 18822 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15046: LD_ADDR_EXP 35
15050: PUSH
15051: LD_EXP 35
15055: PUSH
15056: LD_VAR 0 1
15060: DIFF
15061: ST_TO_ADDR
// continue ;
15062: GO 14955
// end ; end ;
15064: GO 14955
15066: POP
15067: POP
// until not importantBuildingsList ;
15068: LD_EXP 35
15072: NOT
15073: IFFALSE 14938
// end ;
15075: PPOPN 2
15077: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15078: LD_EXP 14
15082: PPUSH
15083: LD_INT 22
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 95
15095: PUSH
15096: LD_INT 23
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PPUSH
15107: CALL_OW 72
15111: PUSH
15112: LD_EXP 38
15116: PPUSH
15117: CALL_OW 302
15121: AND
15122: PUSH
15123: LD_EXP 30
15127: NOT
15128: AND
15129: IFFALSE 15157
15131: GO 15133
15133: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15134: LD_EXP 38
15138: PPUSH
15139: LD_STRING DH-End-1
15141: PPUSH
15142: CALL_OW 88
// if not activeExplosives then
15146: LD_EXP 36
15150: NOT
15151: IFFALSE 15157
// Explode ;
15153: CALL 21306 0 0
// end ;
15157: END
// function SayHEmpty ( ) ; begin
15158: LD_INT 0
15160: PPUSH
// case rand ( 1 , 3 ) of 1 :
15161: LD_INT 1
15163: PPUSH
15164: LD_INT 3
15166: PPUSH
15167: CALL_OW 12
15171: PUSH
15172: LD_INT 1
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15195
15180: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15181: LD_EXP 38
15185: PPUSH
15186: LD_STRING DH-Empty-1
15188: PPUSH
15189: CALL_OW 88
15193: GO 15242
15195: LD_INT 2
15197: DOUBLE
15198: EQUAL
15199: IFTRUE 15203
15201: GO 15218
15203: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15204: LD_EXP 38
15208: PPUSH
15209: LD_STRING DH-Empty-2
15211: PPUSH
15212: CALL_OW 88
15216: GO 15242
15218: LD_INT 3
15220: DOUBLE
15221: EQUAL
15222: IFTRUE 15226
15224: GO 15241
15226: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15227: LD_EXP 38
15231: PPUSH
15232: LD_STRING DH-Empty-3
15234: PPUSH
15235: CALL_OW 88
15239: GO 15242
15241: POP
// end ;
15242: LD_VAR 0 1
15246: RET
// function SayHVisited ( ) ; begin
15247: LD_INT 0
15249: PPUSH
// case rand ( 1 , 3 ) of 1 :
15250: LD_INT 1
15252: PPUSH
15253: LD_INT 3
15255: PPUSH
15256: CALL_OW 12
15260: PUSH
15261: LD_INT 1
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15284
15269: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15270: LD_EXP 38
15274: PPUSH
15275: LD_STRING DH-Visited-1
15277: PPUSH
15278: CALL_OW 88
15282: GO 15331
15284: LD_INT 2
15286: DOUBLE
15287: EQUAL
15288: IFTRUE 15292
15290: GO 15307
15292: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15293: LD_EXP 38
15297: PPUSH
15298: LD_STRING DH-Visited-2
15300: PPUSH
15301: CALL_OW 88
15305: GO 15331
15307: LD_INT 3
15309: DOUBLE
15310: EQUAL
15311: IFTRUE 15315
15313: GO 15330
15315: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15316: LD_EXP 38
15320: PPUSH
15321: LD_STRING DH-Visited-3
15323: PPUSH
15324: CALL_OW 88
15328: GO 15331
15330: POP
// end ;
15331: LD_VAR 0 1
15335: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15336: LD_EXP 17
15340: NOT
15341: PUSH
15342: LD_EXP 15
15346: AND
15347: PUSH
15348: LD_EXP 38
15352: PPUSH
15353: CALL_OW 255
15357: PUSH
15358: LD_INT 2
15360: EQUAL
15361: AND
15362: PUSH
15363: LD_EXP 38
15367: PPUSH
15368: CALL_OW 302
15372: AND
15373: PUSH
15374: LD_EXP 38
15378: PPUSH
15379: CALL_OW 316
15383: AND
15384: PUSH
15385: LD_EXP 30
15389: NOT
15390: AND
15391: IFFALSE 15457
15393: GO 15395
15395: DISABLE
15396: LD_INT 0
15398: PPUSH
// begin enable ;
15399: ENABLE
// for i in entranceAllowedList do
15400: LD_ADDR_VAR 0 1
15404: PUSH
15405: LD_EXP 15
15409: PUSH
15410: FOR_IN
15411: IFFALSE 15455
// if InEntrance ( Heike , i ) then
15413: LD_EXP 38
15417: PPUSH
15418: LD_VAR 0 1
15422: PPUSH
15423: CALL 18448 0 2
15427: IFFALSE 15453
// begin disable ( entranceEvent ) ;
15429: LD_INT 1
15431: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: CALL 15460 0 1
// wait ( 0 0$3 ) ;
15441: LD_INT 105
15443: PPUSH
15444: CALL_OW 67
// enable ( entranceEvent ) ;
15448: LD_INT 1
15450: ENABLE_MARKED
// break ;
15451: GO 15455
// end ;
15453: GO 15410
15455: POP
15456: POP
// end ;
15457: PPOPN 1
15459: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
15460: LD_INT 0
15462: PPUSH
15463: PPUSH
// if not building then
15464: LD_VAR 0 1
15468: NOT
15469: IFFALSE 15473
// exit ;
15471: GO 17945
// if building in entranceVisitedList then
15473: LD_VAR 0 1
15477: PUSH
15478: LD_EXP 16
15482: IN
15483: IFFALSE 15491
// begin SayHVisited ( ) ;
15485: CALL 15247 0 0
// exit ;
15489: GO 17945
// end ; case Query ( EnterBuilding ) of 1 :
15491: LD_STRING EnterBuilding
15493: PPUSH
15494: CALL_OW 97
15498: PUSH
15499: LD_INT 1
15501: DOUBLE
15502: EQUAL
15503: IFTRUE 15507
15505: GO 15510
15507: POP
// ; 2 :
15508: GO 15524
15510: LD_INT 2
15512: DOUBLE
15513: EQUAL
15514: IFTRUE 15518
15516: GO 15523
15518: POP
// exit ; end ;
15519: GO 17945
15521: GO 15524
15523: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15524: LD_ADDR_EXP 16
15528: PUSH
15529: LD_EXP 16
15533: PPUSH
15534: LD_VAR 0 1
15538: PPUSH
15539: CALL 64192 0 2
15543: ST_TO_ADDR
// InGameOn ;
15544: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15548: LD_EXP 38
15552: PPUSH
15553: LD_INT 5
15555: PPUSH
15556: CALL_OW 235
// SetSide ( building , 5 ) ;
15560: LD_VAR 0 1
15564: PPUSH
15565: LD_INT 5
15567: PPUSH
15568: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15572: LD_EXP 38
15576: PPUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 120
// wait ( 0 0$3 ) ;
15586: LD_INT 105
15588: PPUSH
15589: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15593: LD_ADDR_VAR 0 3
15597: PUSH
15598: LD_INT 165
15600: PUSH
15601: LD_INT 106
15603: PUSH
15604: LD_INT 135
15606: PUSH
15607: LD_INT 162
15609: PUSH
15610: LD_INT 61
15612: PUSH
15613: LD_INT 109
15615: PUSH
15616: LD_INT 169
15618: PUSH
15619: LD_INT 13
15621: PUSH
15622: LD_INT 147
15624: PUSH
15625: LD_INT 137
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: ST_TO_ADDR
// if not building in tmp then
15640: LD_VAR 0 1
15644: PUSH
15645: LD_VAR 0 3
15649: IN
15650: NOT
15651: IFFALSE 15659
// SayHEmpty ( ) else
15653: CALL 15158 0 0
15657: GO 17908
// case building of laundry :
15659: LD_VAR 0 1
15663: PUSH
15664: LD_INT 165
15666: DOUBLE
15667: EQUAL
15668: IFTRUE 15672
15670: GO 15776
15672: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15673: LD_EXP 26
15677: PUSH
15678: LD_EXP 27
15682: NOT
15683: AND
15684: PUSH
15685: LD_EXP 28
15689: NOT
15690: AND
15691: IFFALSE 15746
// begin case Query ( HeikeInLaundry ) of 1 :
15693: LD_STRING HeikeInLaundry
15695: PPUSH
15696: CALL_OW 97
15700: PUSH
15701: LD_INT 1
15703: DOUBLE
15704: EQUAL
15705: IFTRUE 15709
15707: GO 15716
15709: POP
// SpawnHeikeAsRussian ; 2 :
15710: CALL 1724 0 0
15714: GO 15744
15716: LD_INT 2
15718: DOUBLE
15719: EQUAL
15720: IFTRUE 15724
15722: GO 15743
15724: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
15725: LD_ADDR_EXP 16
15729: PUSH
15730: LD_EXP 16
15734: PUSH
15735: LD_VAR 0 1
15739: DIFF
15740: ST_TO_ADDR
15741: GO 15744
15743: POP
// end else
15744: GO 15774
// begin entranceVisitedList := entranceVisitedList diff building ;
15746: LD_ADDR_EXP 16
15750: PUSH
15751: LD_EXP 16
15755: PUSH
15756: LD_VAR 0 1
15760: DIFF
15761: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
15762: LD_EXP 38
15766: PPUSH
15767: LD_STRING DH-Locked
15769: PPUSH
15770: CALL_OW 88
// end ; end ; dougBar :
15774: GO 17908
15776: LD_INT 106
15778: DOUBLE
15779: EQUAL
15780: IFTRUE 15784
15782: GO 16136
15784: POP
// begin if contactWithAmerican and americanContact then
15785: LD_EXP 25
15789: PUSH
15790: LD_EXP 10
15794: AND
15795: IFFALSE 15859
// begin Say ( Heike , DH-Escort-a-1 ) ;
15797: LD_EXP 38
15801: PPUSH
15802: LD_STRING DH-Escort-a-1
15804: PPUSH
15805: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
15809: LD_EXP 52
15813: PPUSH
15814: LD_STRING DCa-Escort-a-2
15816: PPUSH
15817: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
15821: LD_EXP 52
15825: PPUSH
15826: LD_STRING DCa-Escort-a-3
15828: PPUSH
15829: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
15833: LD_EXP 38
15837: PPUSH
15838: LD_STRING DH-Escort-a-4
15840: PPUSH
15841: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
15845: LD_EXP 38
15849: PPUSH
15850: LD_STRING DH-Escort-a-5
15852: PPUSH
15853: CALL_OW 88
// end else
15857: GO 16093
// if contactWithAmerican then
15859: LD_EXP 25
15863: IFFALSE 15903
// begin Say ( Heike , DH-Escort-b-1 ) ;
15865: LD_EXP 38
15869: PPUSH
15870: LD_STRING DH-Escort-b-1
15872: PPUSH
15873: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
15877: LD_EXP 52
15881: PPUSH
15882: LD_STRING DCa-Escort-b-2
15884: PPUSH
15885: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
15889: LD_EXP 52
15893: PPUSH
15894: LD_STRING DCa-Escort-b-3
15896: PPUSH
15897: CALL_OW 88
// end else
15901: GO 16093
// begin Say ( Doug , DCa-Deal-a-1 ) ;
15903: LD_EXP 52
15907: PPUSH
15908: LD_STRING DCa-Deal-a-1
15910: PPUSH
15911: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
15915: LD_EXP 52
15919: PPUSH
15920: LD_STRING DCa-Deal-a-2
15922: PPUSH
15923: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
15927: LD_EXP 38
15931: PPUSH
15932: LD_STRING DH-Deal-a-3
15934: PPUSH
15935: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
15939: LD_EXP 52
15943: PPUSH
15944: LD_STRING DCa-Deal-a-4
15946: PPUSH
15947: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
15951: LD_EXP 38
15955: PPUSH
15956: LD_STRING DH-Deal-a-5
15958: PPUSH
15959: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
15963: LD_EXP 52
15967: PPUSH
15968: LD_STRING DCa-Deal-a-6
15970: PPUSH
15971: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
15975: LD_EXP 52
15979: PPUSH
15980: LD_STRING DCa-Deal-a-7
15982: PPUSH
15983: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
15987: LD_EXP 52
15991: PPUSH
15992: LD_STRING DCa-Deal-a-8
15994: PPUSH
15995: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
15999: LD_EXP 52
16003: PPUSH
16004: LD_STRING DCa-Deal-a-9
16006: PPUSH
16007: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16011: LD_EXP 52
16015: PPUSH
16016: LD_STRING DCa-Deal-a-10
16018: PPUSH
16019: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16023: LD_EXP 52
16027: PPUSH
16028: LD_STRING DCa-Deal-a-11
16030: PPUSH
16031: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16035: LD_INT 10
16037: PPUSH
16038: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16042: LD_EXP 52
16046: PPUSH
16047: LD_STRING DCa-Deal-a-12
16049: PPUSH
16050: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16054: LD_EXP 38
16058: PPUSH
16059: LD_STRING DH-Deal-a-13
16061: PPUSH
16062: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16066: LD_EXP 38
16070: PPUSH
16071: LD_STRING DH-Deal-a-14
16073: PPUSH
16074: CALL_OW 88
// contactWithAmerican := true ;
16078: LD_ADDR_EXP 25
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16086: LD_STRING M1-american-out
16088: PPUSH
16089: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16093: LD_EXP 52
16097: PPUSH
16098: LD_INT 2
16100: PPUSH
16101: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16105: LD_ADDR_EXP 14
16109: PUSH
16110: LD_EXP 14
16114: PPUSH
16115: LD_EXP 52
16119: PPUSH
16120: CALL 64192 0 2
16124: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16125: LD_EXP 52
16129: PPUSH
16130: CALL_OW 122
// end ; usLab :
16134: GO 17908
16136: LD_INT 135
16138: DOUBLE
16139: EQUAL
16140: IFTRUE 16144
16142: GO 16460
16144: POP
// begin if hasSniperRifle then
16145: LD_EXP 11
16149: IFFALSE 16458
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16151: LD_EXP 43
16155: PPUSH
16156: CALL_OW 302
16160: PUSH
16161: LD_EXP 43
16165: PUSH
16166: LD_EXP 14
16170: IN
16171: AND
16172: PUSH
16173: LD_EXP 43
16177: PPUSH
16178: CALL_OW 255
16182: PUSH
16183: LD_INT 2
16185: EQUAL
16186: AND
16187: IFFALSE 16432
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16189: LD_EXP 38
16193: PPUSH
16194: LD_EXP 43
16198: PPUSH
16199: CALL_OW 296
16203: PUSH
16204: LD_INT 10
16206: GREATER
16207: IFFALSE 16232
// begin Query ( KaiaDistance ) ;
16209: LD_STRING KaiaDistance
16211: PPUSH
16212: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16216: LD_ADDR_EXP 16
16220: PUSH
16221: LD_EXP 16
16225: PUSH
16226: LD_INT 135
16228: DIFF
16229: ST_TO_ADDR
// end else
16230: GO 16430
// begin SetSide ( Kaia , 5 ) ;
16232: LD_EXP 43
16236: PPUSH
16237: LD_INT 5
16239: PPUSH
16240: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16244: LD_EXP 43
16248: PPUSH
16249: LD_INT 135
16251: PPUSH
16252: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16256: LD_INT 35
16258: PPUSH
16259: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16263: LD_EXP 43
16267: PPUSH
16268: CALL_OW 310
16272: IFFALSE 16256
// Say ( Kaia , DK-Sniper-1 ) ;
16274: LD_EXP 43
16278: PPUSH
16279: LD_STRING DK-Sniper-1
16281: PPUSH
16282: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16286: LD_EXP 43
16290: PPUSH
16291: CALL_OW 257
16295: PUSH
16296: LD_INT 34
16298: EQUAL
16299: PUSH
16300: LD_EXP 40
16304: PUSH
16305: LD_EXP 14
16309: IN
16310: AND
16311: PUSH
16312: LD_EXP 40
16316: PPUSH
16317: CALL_OW 302
16321: AND
16322: IFFALSE 16350
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16324: LD_EXP 43
16328: PPUSH
16329: LD_STRING DK-Sniper-a-2
16331: PPUSH
16332: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
16336: LD_EXP 40
16340: PPUSH
16341: LD_INT 32
16343: PPUSH
16344: CALL_OW 336
// end else
16348: GO 16409
// begin Say ( Kaia , DK-Sniper-2 ) ;
16350: LD_EXP 43
16354: PPUSH
16355: LD_STRING DK-Sniper-2
16357: PPUSH
16358: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16362: LD_EXP 43
16366: PPUSH
16367: LD_INT 32
16369: PPUSH
16370: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16374: LD_EXP 45
16378: PPUSH
16379: CALL_OW 302
16383: PUSH
16384: LD_EXP 45
16388: PUSH
16389: LD_EXP 14
16393: IN
16394: AND
16395: IFFALSE 16409
// Say ( Markov , DMar-Sniper-3 ) ;
16397: LD_EXP 45
16401: PPUSH
16402: LD_STRING DMar-Sniper-3
16404: PPUSH
16405: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16409: LD_EXP 43
16413: PPUSH
16414: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16418: LD_EXP 43
16422: PPUSH
16423: LD_INT 2
16425: PPUSH
16426: CALL_OW 235
// end ; end else
16430: GO 16458
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16432: LD_ADDR_EXP 16
16436: PUSH
16437: LD_EXP 16
16441: PUSH
16442: LD_INT 135
16444: DIFF
16445: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16446: LD_EXP 38
16450: PPUSH
16451: LD_STRING DH-Locked
16453: PPUSH
16454: CALL_OW 88
// end ; end ; end ; drugsLab :
16458: GO 17908
16460: LD_INT 162
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16468
16466: GO 16601
16468: POP
// begin if hasStimDrugs then
16469: LD_EXP 9
16473: IFFALSE 16587
// begin wait ( 0 0$1 ) ;
16475: LD_INT 35
16477: PPUSH
16478: CALL_OW 67
// if not hasStimDrugsCollected then
16482: LD_EXP 24
16486: NOT
16487: IFFALSE 16529
// begin Say ( Heike , DH-Lab-1 ) ;
16489: LD_EXP 38
16493: PPUSH
16494: LD_STRING DH-Lab-1
16496: PPUSH
16497: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16501: LD_INT 5
16503: PPUSH
16504: LD_INT 2
16506: PPUSH
16507: LD_INT 2
16509: PPUSH
16510: CALL_OW 322
// hasStimDrugsCollected := true ;
16514: LD_ADDR_EXP 24
16518: PUSH
16519: LD_INT 1
16521: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16522: LD_STRING M1-drugs-out
16524: PPUSH
16525: CALL_OW 604
// end ; if not hasExplosionCollected then
16529: LD_EXP 23
16533: NOT
16534: IFFALSE 16552
// entranceVisitedList := entranceVisitedList diff drugsLab else
16536: LD_ADDR_EXP 16
16540: PUSH
16541: LD_EXP 16
16545: PUSH
16546: LD_INT 162
16548: DIFF
16549: ST_TO_ADDR
16550: GO 16585
// begin wait ( 0 0$3 ) ;
16552: LD_INT 105
16554: PPUSH
16555: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16559: LD_EXP 38
16563: PPUSH
16564: LD_STRING DH-Lab-2
16566: PPUSH
16567: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16571: LD_STRING M1-drugsLab-out
16573: PPUSH
16574: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16578: LD_INT 162
16580: PPUSH
16581: CALL 18719 0 1
// end ; end else
16585: GO 16599
// Say ( Heike , DH-Locked ) ;
16587: LD_EXP 38
16591: PPUSH
16592: LD_STRING DH-Locked
16594: PPUSH
16595: CALL_OW 88
// end ; ruFac :
16599: GO 17908
16601: LD_INT 61
16603: DOUBLE
16604: EQUAL
16605: IFTRUE 16609
16607: GO 16719
16609: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16610: LD_EXP 45
16614: PPUSH
16615: CALL_OW 302
16619: PUSH
16620: LD_EXP 45
16624: PUSH
16625: LD_EXP 14
16629: IN
16630: NOT
16631: AND
16632: IFFALSE 16713
// begin Say ( Heike , DH-Krastyo-1 ) ;
16634: LD_EXP 38
16638: PPUSH
16639: LD_STRING DH-Krastyo-1
16641: PPUSH
16642: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16646: LD_EXP 45
16650: PPUSH
16651: LD_STRING DMar-Krastyo-2
16653: PPUSH
16654: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16658: LD_EXP 45
16662: PPUSH
16663: LD_STRING DMar-Krastyo-3
16665: PPUSH
16666: CALL_OW 88
// SetSide ( Markov , 2 ) ;
16670: LD_EXP 45
16674: PPUSH
16675: LD_INT 2
16677: PPUSH
16678: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
16682: LD_ADDR_EXP 14
16686: PUSH
16687: LD_EXP 14
16691: PPUSH
16692: LD_EXP 45
16696: PPUSH
16697: CALL 64192 0 2
16701: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
16702: LD_EXP 45
16706: PPUSH
16707: CALL_OW 122
// end else
16711: GO 16717
// SayHEmpty ( ) ;
16713: CALL 15158 0 0
// end ; ruBarKam :
16717: GO 17908
16719: LD_INT 109
16721: DOUBLE
16722: EQUAL
16723: IFTRUE 16727
16725: GO 16874
16727: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
16728: LD_EXP 42
16732: PPUSH
16733: CALL_OW 302
16737: PUSH
16738: LD_EXP 42
16742: PUSH
16743: LD_EXP 14
16747: IN
16748: NOT
16749: AND
16750: IFFALSE 16868
// begin Say ( Heike , DH-Kamil-1 ) ;
16752: LD_EXP 38
16756: PPUSH
16757: LD_STRING DH-Kamil-1
16759: PPUSH
16760: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
16764: LD_EXP 42
16768: PPUSH
16769: LD_STRING DKam-Kamil-2
16771: PPUSH
16772: CALL_OW 88
// if IsOk ( Sophia ) then
16776: LD_EXP 44
16780: PPUSH
16781: CALL_OW 302
16785: IFFALSE 16825
// if Sophia in heikeSquad then
16787: LD_EXP 44
16791: PUSH
16792: LD_EXP 14
16796: IN
16797: IFFALSE 16813
// Say ( Kamil , DKam-Kamil-a-3 ) else
16799: LD_EXP 42
16803: PPUSH
16804: LD_STRING DKam-Kamil-a-3
16806: PPUSH
16807: CALL_OW 88
16811: GO 16825
// Say ( Kamil , DKam-Kamil-3 ) ;
16813: LD_EXP 42
16817: PPUSH
16818: LD_STRING DKam-Kamil-3
16820: PPUSH
16821: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
16825: LD_EXP 42
16829: PPUSH
16830: LD_INT 2
16832: PPUSH
16833: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
16837: LD_ADDR_EXP 14
16841: PUSH
16842: LD_EXP 14
16846: PPUSH
16847: LD_EXP 42
16851: PPUSH
16852: CALL 64192 0 2
16856: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
16857: LD_EXP 42
16861: PPUSH
16862: CALL_OW 122
// end else
16866: GO 16872
// SayHEmpty ( ) ;
16868: CALL 15158 0 0
// end ; ruOutpost1 :
16872: GO 17908
16874: LD_INT 169
16876: DOUBLE
16877: EQUAL
16878: IFTRUE 16882
16880: GO 17119
16882: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
16883: LD_EXP 47
16887: PPUSH
16888: CALL_OW 302
16892: PUSH
16893: LD_EXP 47
16897: PUSH
16898: LD_EXP 14
16902: IN
16903: NOT
16904: AND
16905: IFFALSE 17113
// begin if hasMethanol then
16907: LD_EXP 13
16911: IFFALSE 17042
// begin Say ( Heike , DH-Kurt-1 ) ;
16913: LD_EXP 38
16917: PPUSH
16918: LD_STRING DH-Kurt-1
16920: PPUSH
16921: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
16925: LD_EXP 47
16929: PPUSH
16930: LD_STRING DKs-Kurt-2
16932: PPUSH
16933: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
16937: LD_EXP 39
16941: PPUSH
16942: LD_INT 169
16944: PPUSH
16945: CALL_OW 296
16949: PUSH
16950: LD_INT 10
16952: LESS
16953: PUSH
16954: LD_EXP 39
16958: PUSH
16959: LD_EXP 14
16963: IN
16964: AND
16965: IFFALSE 17040
// begin ComMoveXY ( Givi , 100 , 37 ) ;
16967: LD_EXP 39
16971: PPUSH
16972: LD_INT 100
16974: PPUSH
16975: LD_INT 37
16977: PPUSH
16978: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
16982: LD_EXP 39
16986: PPUSH
16987: LD_INT 169
16989: PPUSH
16990: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
16994: LD_INT 35
16996: PPUSH
16997: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17001: LD_EXP 39
17005: PPUSH
17006: LD_INT 169
17008: PPUSH
17009: CALL_OW 296
17013: PUSH
17014: LD_INT 7
17016: LESS
17017: IFFALSE 16994
// Say ( Givi , DG-Kurt-3 ) ;
17019: LD_EXP 39
17023: PPUSH
17024: LD_STRING DG-Kurt-3
17026: PPUSH
17027: CALL_OW 88
// ComStop ( Givi ) ;
17031: LD_EXP 39
17035: PPUSH
17036: CALL_OW 141
// end ; end else
17040: GO 17070
// begin Say ( Heike , DH-Kurt-1 ) ;
17042: LD_EXP 38
17046: PPUSH
17047: LD_STRING DH-Kurt-1
17049: PPUSH
17050: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17054: LD_EXP 47
17058: PPUSH
17059: LD_STRING DKs-Kurt-2
17061: PPUSH
17062: CALL_OW 88
// SpawnAdditionalRuGuards ;
17066: CALL 3492 0 0
// end ; SetSide ( Kurt , 2 ) ;
17070: LD_EXP 47
17074: PPUSH
17075: LD_INT 2
17077: PPUSH
17078: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17082: LD_ADDR_EXP 14
17086: PUSH
17087: LD_EXP 14
17091: PPUSH
17092: LD_EXP 47
17096: PPUSH
17097: CALL 64192 0 2
17101: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17102: LD_EXP 47
17106: PPUSH
17107: CALL_OW 122
// end else
17111: GO 17117
// SayHEmpty ( ) ;
17113: CALL 15158 0 0
// end ; ruOutpostBar :
17117: GO 17908
17119: LD_INT 13
17121: DOUBLE
17122: EQUAL
17123: IFTRUE 17127
17125: GO 17173
17127: POP
// begin if not hasGuardPatrolPlan then
17128: LD_EXP 18
17132: NOT
17133: IFFALSE 17167
// begin Say ( Heike , DH-PatrolPlan ) ;
17135: LD_EXP 38
17139: PPUSH
17140: LD_STRING DH-PatrolPlan
17142: PPUSH
17143: CALL_OW 88
// hasGuardPatrolPlan := true ;
17147: LD_ADDR_EXP 18
17151: PUSH
17152: LD_INT 1
17154: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17155: LD_INT 6
17157: PPUSH
17158: LD_INT 2
17160: PPUSH
17161: CALL_OW 343
// end else
17165: GO 17171
// SayHEmpty ( ) ;
17167: CALL 15158 0 0
// end ; ruKaiaBar :
17171: GO 17908
17173: LD_INT 147
17175: DOUBLE
17176: EQUAL
17177: IFTRUE 17181
17179: GO 17328
17181: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17182: LD_EXP 43
17186: PPUSH
17187: CALL_OW 302
17191: PUSH
17192: LD_EXP 43
17196: PUSH
17197: LD_EXP 14
17201: IN
17202: NOT
17203: AND
17204: IFFALSE 17326
// begin Say ( Heike , DH-Kaia-1 ) ;
17206: LD_EXP 38
17210: PPUSH
17211: LD_STRING DH-Kaia-1
17213: PPUSH
17214: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17218: LD_EXP 43
17222: PPUSH
17223: LD_STRING DK-Kaia-2
17225: PPUSH
17226: CALL_OW 88
// if hasSniperRifle then
17230: LD_EXP 11
17234: IFFALSE 17285
// begin if IsOk ( Markov ) then
17236: LD_EXP 45
17240: PPUSH
17241: CALL_OW 302
17245: IFFALSE 17261
// Say ( Kaia , DK-Kaia-3 ) else
17247: LD_EXP 43
17251: PPUSH
17252: LD_STRING DK-Kaia-3
17254: PPUSH
17255: CALL_OW 88
17259: GO 17273
// Say ( Kaia , DK-Kaia-a-3 ) ;
17261: LD_EXP 43
17265: PPUSH
17266: LD_STRING DK-Kaia-a-3
17268: PPUSH
17269: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17273: LD_EXP 38
17277: PPUSH
17278: LD_STRING DH-Kaia-4
17280: PPUSH
17281: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17285: LD_EXP 43
17289: PPUSH
17290: LD_INT 2
17292: PPUSH
17293: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17297: LD_ADDR_EXP 14
17301: PUSH
17302: LD_EXP 14
17306: PPUSH
17307: LD_EXP 43
17311: PPUSH
17312: CALL 64192 0 2
17316: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17317: LD_EXP 43
17321: PPUSH
17322: CALL_OW 122
// end ; end ; ruWeaponsBar :
17326: GO 17908
17328: LD_INT 137
17330: DOUBLE
17331: EQUAL
17332: IFTRUE 17336
17334: GO 17907
17336: POP
// begin if hasWeapons then
17337: LD_EXP 19
17341: IFFALSE 17893
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17343: LD_ADDR_EXP 16
17347: PUSH
17348: LD_EXP 16
17352: PUSH
17353: LD_INT 137
17355: DIFF
17356: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17357: LD_ADDR_VAR 0 3
17361: PUSH
17362: LD_EXP 14
17366: PPUSH
17367: LD_INT 91
17369: PUSH
17370: LD_EXP 38
17374: PUSH
17375: LD_INT 8
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 72
17387: ST_TO_ADDR
// if not heikeSquad or not tmp then
17388: LD_EXP 14
17392: NOT
17393: PUSH
17394: LD_VAR 0 3
17398: NOT
17399: OR
17400: IFFALSE 17416
// Say ( Heike , DH-Weapons-Alone ) else
17402: LD_EXP 38
17406: PPUSH
17407: LD_STRING DH-Weapons-Alone
17409: PPUSH
17410: CALL_OW 88
17414: GO 17891
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
17416: LD_ADDR_EXP 16
17420: PUSH
17421: LD_EXP 16
17425: PPUSH
17426: LD_INT 137
17428: PPUSH
17429: CALL 64192 0 2
17433: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
17434: LD_EXP 38
17438: PPUSH
17439: LD_STRING DH-Weapons-1
17441: PPUSH
17442: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17446: LD_EXP 38
17450: PPUSH
17451: LD_STRING DH-Weapons-2
17453: PPUSH
17454: CALL_OW 88
// if hasRevolver and Kaia in tmp then
17458: LD_EXP 8
17462: PUSH
17463: LD_EXP 43
17467: PUSH
17468: LD_VAR 0 3
17472: IN
17473: AND
17474: IFFALSE 17563
// begin SetSide ( Kaia , 5 ) ;
17476: LD_EXP 43
17480: PPUSH
17481: LD_INT 5
17483: PPUSH
17484: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17488: LD_EXP 43
17492: PPUSH
17493: LD_INT 137
17495: PPUSH
17496: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17500: LD_INT 35
17502: PPUSH
17503: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17507: LD_EXP 43
17511: PPUSH
17512: CALL_OW 310
17516: IFFALSE 17500
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
17518: LD_EXP 38
17522: PPUSH
17523: LD_STRING DH-Kaia-Revolver-2
17525: PPUSH
17526: CALL_OW 88
// SetClassKaiaRevolver ;
17530: CALL 1693 0 0
// hasRevolver := false ;
17534: LD_ADDR_EXP 8
17538: PUSH
17539: LD_INT 0
17541: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
17542: LD_EXP 43
17546: PPUSH
17547: LD_INT 2
17549: PPUSH
17550: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
17554: LD_EXP 43
17558: PPUSH
17559: CALL_OW 122
// end ; if Givi in tmp then
17563: LD_EXP 39
17567: PUSH
17568: LD_VAR 0 3
17572: IN
17573: IFFALSE 17714
// begin SetSide ( Givi , 5 ) ;
17575: LD_EXP 39
17579: PPUSH
17580: LD_INT 5
17582: PPUSH
17583: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
17587: LD_EXP 39
17591: PPUSH
17592: LD_INT 137
17594: PPUSH
17595: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17599: LD_INT 35
17601: PPUSH
17602: CALL_OW 67
// until IsInUnit ( Givi ) ;
17606: LD_EXP 39
17610: PPUSH
17611: CALL_OW 310
17615: IFFALSE 17599
// Say ( Givi , DG-Weapons-3 ) ;
17617: LD_EXP 39
17621: PPUSH
17622: LD_STRING DG-Weapons-3
17624: PPUSH
17625: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
17629: LD_EXP 38
17633: PPUSH
17634: LD_STRING DH-Weapons-4
17636: PPUSH
17637: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
17641: LD_EXP 39
17645: PPUSH
17646: LD_STRING DG-Weapons-5
17648: PPUSH
17649: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
17653: LD_EXP 39
17657: PPUSH
17658: LD_INT 11
17660: PPUSH
17661: CALL_OW 336
// ComExitBuilding ( Givi ) ;
17665: LD_EXP 39
17669: PPUSH
17670: CALL_OW 122
// SetSide ( Givi , 2 ) ;
17674: LD_EXP 39
17678: PPUSH
17679: LD_INT 2
17681: PPUSH
17682: CALL_OW 235
// if hasRevolver then
17686: LD_EXP 8
17690: IFFALSE 17712
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17692: LD_EXP 38
17696: PPUSH
17697: LD_STRING DH-Kaia-Revolver-1
17699: PPUSH
17700: CALL_OW 88
// heikeHasRevolver := true ;
17704: LD_ADDR_EXP 20
17708: PUSH
17709: LD_INT 1
17711: ST_TO_ADDR
// end ; end else
17712: GO 17891
// if Kamil in tmp then
17714: LD_EXP 42
17718: PUSH
17719: LD_VAR 0 3
17723: IN
17724: IFFALSE 17853
// begin SetSide ( Kamil , 5 ) ;
17726: LD_EXP 42
17730: PPUSH
17731: LD_INT 5
17733: PPUSH
17734: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
17738: LD_EXP 42
17742: PPUSH
17743: LD_INT 137
17745: PPUSH
17746: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17750: LD_INT 35
17752: PPUSH
17753: CALL_OW 67
// until IsInUnit ( Kamil ) ;
17757: LD_EXP 42
17761: PPUSH
17762: CALL_OW 310
17766: IFFALSE 17750
// Say ( Kamil , DKam-Weapons-a-3 ) ;
17768: LD_EXP 42
17772: PPUSH
17773: LD_STRING DKam-Weapons-a-3
17775: PPUSH
17776: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
17780: LD_EXP 38
17784: PPUSH
17785: LD_STRING DH-Weapons-a-4
17787: PPUSH
17788: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
17792: LD_EXP 42
17796: PPUSH
17797: LD_INT 11
17799: PPUSH
17800: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
17804: LD_EXP 42
17808: PPUSH
17809: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
17813: LD_EXP 42
17817: PPUSH
17818: LD_INT 2
17820: PPUSH
17821: CALL_OW 235
// if hasRevolver then
17825: LD_EXP 8
17829: IFFALSE 17851
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17831: LD_EXP 38
17835: PPUSH
17836: LD_STRING DH-Kaia-Revolver-1
17838: PPUSH
17839: CALL_OW 88
// heikeHasRevolver := true ;
17843: LD_ADDR_EXP 20
17847: PUSH
17848: LD_INT 1
17850: ST_TO_ADDR
// end ; end else
17851: GO 17891
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
17853: LD_EXP 38
17857: PPUSH
17858: LD_STRING DH-Weapons-Alone-2
17860: PPUSH
17861: CALL_OW 88
// if hasRevolver then
17865: LD_EXP 8
17869: IFFALSE 17891
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
17871: LD_EXP 38
17875: PPUSH
17876: LD_STRING DH-Kaia-Revolver-1a
17878: PPUSH
17879: CALL_OW 88
// heikeHasRevolver := true ;
17883: LD_ADDR_EXP 20
17887: PUSH
17888: LD_INT 1
17890: ST_TO_ADDR
// end ; end ; end ; end else
17891: GO 17905
// Say ( Heike , DH-Locked ) ;
17893: LD_EXP 38
17897: PPUSH
17898: LD_STRING DH-Locked
17900: PPUSH
17901: CALL_OW 88
// end ; end ;
17905: GO 17908
17907: POP
// ComExitBuilding ( Heike ) ;
17908: LD_EXP 38
17912: PPUSH
17913: CALL_OW 122
// SetSide ( Heike , 2 ) ;
17917: LD_EXP 38
17921: PPUSH
17922: LD_INT 2
17924: PPUSH
17925: CALL_OW 235
// SetSide ( building , 3 ) ;
17929: LD_VAR 0 1
17933: PPUSH
17934: LD_INT 3
17936: PPUSH
17937: CALL_OW 235
// InGameOff ;
17941: CALL_OW 9
// end ;
17945: LD_VAR 0 2
17949: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
17950: LD_EXP 30
17954: NOT
17955: PUSH
17956: LD_EXP 17
17960: NOT
17961: AND
17962: PUSH
17963: LD_INT 22
17965: PUSH
17966: LD_INT 5
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 21
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PPUSH
17987: CALL_OW 69
17991: PUSH
17992: LD_INT 0
17994: EQUAL
17995: AND
17996: PUSH
17997: LD_INT 22
17999: PUSH
18000: LD_INT 4
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 21
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 69
18025: PUSH
18026: LD_INT 0
18028: EQUAL
18029: PUSH
18030: LD_EXP 25
18034: AND
18035: PUSH
18036: LD_EXP 25
18040: NOT
18041: OR
18042: AND
18043: IFFALSE 18075
18045: GO 18047
18047: DISABLE
// begin DialogueOn ;
18048: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18052: LD_EXP 38
18056: PPUSH
18057: LD_STRING DH-Alarm-2
18059: PPUSH
18060: CALL_OW 88
// DialogueOff ;
18064: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18068: LD_STRING M1-people-out
18070: PPUSH
18071: CALL_OW 337
// end ; end_of_file
18075: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
18076: LD_VAR 0 1
18080: PUSH
18081: LD_INT 3
18083: DOUBLE
18084: EQUAL
18085: IFTRUE 18089
18087: GO 18119
18089: POP
// begin repeat wait ( 0 0$1 ) ;
18090: LD_INT 35
18092: PPUSH
18093: CALL_OW 67
// CenterOnUnits ( Heike ) ;
18097: LD_EXP 38
18101: PPUSH
18102: CALL_OW 85
// until IsDying ( Heike ) ;
18106: LD_EXP 38
18110: PPUSH
18111: CALL_OW 303
18115: IFFALSE 18090
// end ; end ;
18117: GO 18120
18119: POP
// end ;
18120: PPOPN 1
18122: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
18123: LD_OWVAR 59
18127: IFFALSE 18131
// exit ;
18129: GO 18205
// if showPlaceEvent then
18131: LD_INT 4
18133: IFFALSE 18205
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
18135: LD_VAR 0 2
18139: PPUSH
18140: LD_VAR 0 3
18144: PPUSH
18145: LD_INT 2
18147: PPUSH
18148: LD_INT 6
18150: NEG
18151: PPUSH
18152: CALL_OW 330
// CenterOnXY ( x , y ) ;
18156: LD_VAR 0 2
18160: PPUSH
18161: LD_VAR 0 3
18165: PPUSH
18166: CALL_OW 84
// wait ( time ) ;
18170: LD_VAR 0 4
18174: PPUSH
18175: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
18179: LD_EXP 38
18183: PPUSH
18184: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
18188: LD_VAR 0 2
18192: PPUSH
18193: LD_VAR 0 3
18197: PPUSH
18198: LD_INT 2
18200: PPUSH
18201: CALL_OW 331
// end ; end ;
18205: PPOPN 7
18207: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
18208: LD_VAR 0 1
18212: PUSH
18213: LD_EXP 38
18217: EQUAL
18218: PUSH
18219: LD_EXP 5
18223: AND
18224: IFFALSE 18248
// if loseCounter then
18226: LD_EXP 32
18230: IFFALSE 18241
// YouLost ( HeikeNoSurrender ) else
18232: LD_STRING HeikeNoSurrender
18234: PPUSH
18235: CALL_OW 104
18239: GO 18248
// YouLost ( Heike ) ;
18241: LD_STRING Heike
18243: PPUSH
18244: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
18248: LD_VAR 0 1
18252: PPUSH
18253: CALL_OW 255
18257: PUSH
18258: LD_INT 2
18260: EQUAL
18261: PUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 247
18271: PUSH
18272: LD_INT 1
18274: EQUAL
18275: AND
18276: IFFALSE 18293
// loseCounter := Inc ( loseCounter ) ;
18278: LD_ADDR_EXP 32
18282: PUSH
18283: LD_EXP 32
18287: PPUSH
18288: CALL 65553 0 1
18292: ST_TO_ADDR
// end ;
18293: PPOPN 1
18295: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
18296: LD_VAR 0 1
18300: PUSH
18301: LD_INT 2
18303: EQUAL
18304: PUSH
18305: LD_VAR 0 2
18309: PUSH
18310: LD_INT 3
18312: EQUAL
18313: AND
18314: PUSH
18315: LD_VAR 0 1
18319: PUSH
18320: LD_INT 3
18322: EQUAL
18323: PUSH
18324: LD_VAR 0 2
18328: PUSH
18329: LD_INT 2
18331: EQUAL
18332: AND
18333: OR
18334: IFFALSE 18344
// isAlarm := true ;
18336: LD_ADDR_EXP 17
18340: PUSH
18341: LD_INT 1
18343: ST_TO_ADDR
// end ; end_of_file
18344: PPOPN 2
18346: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
18347: LD_INT 0
18349: PPUSH
18350: PPUSH
18351: PPUSH
// u1 := IsInUnit ( unit1 ) ;
18352: LD_ADDR_VAR 0 4
18356: PUSH
18357: LD_VAR 0 1
18361: PPUSH
18362: CALL_OW 310
18366: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
18367: LD_ADDR_VAR 0 5
18371: PUSH
18372: LD_VAR 0 2
18376: PPUSH
18377: CALL_OW 310
18381: ST_TO_ADDR
// result := u1 and u1 = u2 ;
18382: LD_ADDR_VAR 0 3
18386: PUSH
18387: LD_VAR 0 4
18391: PUSH
18392: LD_VAR 0 4
18396: PUSH
18397: LD_VAR 0 5
18401: EQUAL
18402: AND
18403: ST_TO_ADDR
// end ;
18404: LD_VAR 0 3
18408: RET
// export function ShowPlace ( x , y , time ) ; begin
18409: LD_INT 0
18411: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
18412: LD_INT 4
18414: PPUSH
18415: LD_VAR 0 1
18419: PPUSH
18420: LD_VAR 0 2
18424: PPUSH
18425: LD_VAR 0 3
18429: PPUSH
18430: LD_INT 0
18432: PPUSH
18433: LD_INT 0
18435: PPUSH
18436: LD_INT 0
18438: PPUSH
18439: CALL_OW 595
// end ;
18443: LD_VAR 0 4
18447: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
18448: LD_INT 0
18450: PPUSH
18451: PPUSH
18452: PPUSH
18453: PPUSH
18454: PPUSH
18455: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
18456: LD_VAR 0 1
18460: PPUSH
18461: CALL_OW 302
18465: NOT
18466: PUSH
18467: LD_VAR 0 2
18471: PPUSH
18472: CALL_OW 302
18476: NOT
18477: OR
18478: PUSH
18479: LD_VAR 0 2
18483: PPUSH
18484: CALL_OW 313
18488: PUSH
18489: LD_INT 6
18491: EQUAL
18492: OR
18493: IFFALSE 18497
// exit ;
18495: GO 18714
// btype := GetBType ( building ) ;
18497: LD_ADDR_VAR 0 8
18501: PUSH
18502: LD_VAR 0 2
18506: PPUSH
18507: CALL_OW 266
18511: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
18512: LD_VAR 0 8
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: LD_INT 2
18525: PUSH
18526: LD_INT 4
18528: PUSH
18529: LD_INT 5
18531: PUSH
18532: LD_INT 3
18534: PUSH
18535: LD_INT 6
18537: PUSH
18538: LD_INT 7
18540: PUSH
18541: LD_INT 8
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: IN
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18714
// x := GetX ( building ) ;
18560: LD_ADDR_VAR 0 4
18564: PUSH
18565: LD_VAR 0 2
18569: PPUSH
18570: CALL_OW 250
18574: ST_TO_ADDR
// y := GetY ( building ) ;
18575: LD_ADDR_VAR 0 5
18579: PUSH
18580: LD_VAR 0 2
18584: PPUSH
18585: CALL_OW 251
18589: ST_TO_ADDR
// d := GetDir ( building ) ;
18590: LD_ADDR_VAR 0 6
18594: PUSH
18595: LD_VAR 0 2
18599: PPUSH
18600: CALL_OW 254
18604: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
18605: LD_ADDR_VAR 0 7
18609: PUSH
18610: LD_VAR 0 4
18614: PPUSH
18615: LD_VAR 0 6
18619: PPUSH
18620: LD_INT 3
18622: PPUSH
18623: CALL_OW 272
18627: PUSH
18628: LD_VAR 0 5
18632: PPUSH
18633: LD_VAR 0 6
18637: PPUSH
18638: LD_INT 3
18640: PPUSH
18641: CALL_OW 273
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
18650: LD_VAR 0 7
18654: PUSH
18655: LD_INT 1
18657: ARRAY
18658: PPUSH
18659: LD_VAR 0 7
18663: PUSH
18664: LD_INT 2
18666: ARRAY
18667: PPUSH
18668: CALL_OW 488
18672: NOT
18673: IFFALSE 18677
// exit ;
18675: GO 18714
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
18677: LD_ADDR_VAR 0 3
18681: PUSH
18682: LD_VAR 0 1
18686: PPUSH
18687: LD_VAR 0 7
18691: PUSH
18692: LD_INT 1
18694: ARRAY
18695: PPUSH
18696: LD_VAR 0 7
18700: PUSH
18701: LD_INT 2
18703: ARRAY
18704: PPUSH
18705: CALL_OW 297
18709: PUSH
18710: LD_INT 4
18712: LESS
18713: ST_TO_ADDR
// end ;
18714: LD_VAR 0 3
18718: RET
// export function PlaceExplosives ( building ) ; begin
18719: LD_INT 0
18721: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
18722: LD_ADDR_EXP 29
18726: PUSH
18727: LD_EXP 29
18731: PPUSH
18732: LD_VAR 0 1
18736: PPUSH
18737: CALL 64192 0 2
18741: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
18742: LD_VAR 0 1
18746: PPUSH
18747: CALL_OW 250
18751: PPUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 251
18761: PPUSH
18762: LD_STRING PlantBomb
18764: PPUSH
18765: CALL_OW 366
// end ;
18769: LD_VAR 0 2
18773: RET
// export function CreateNature ; var i ; begin
18774: LD_INT 0
18776: PPUSH
18777: PPUSH
// PrepareFrog ;
18778: CALL 60674 0 0
// for i := 1 to 3 do
18782: LD_ADDR_VAR 0 2
18786: PUSH
18787: DOUBLE
18788: LD_INT 1
18790: DEC
18791: ST_TO_ADDR
18792: LD_INT 3
18794: PUSH
18795: FOR_TO
18796: IFFALSE 18815
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
18798: CALL_OW 44
18802: PPUSH
18803: LD_INT 24
18805: PPUSH
18806: LD_INT 0
18808: PPUSH
18809: CALL_OW 49
18813: GO 18795
18815: POP
18816: POP
// end ;
18817: LD_VAR 0 1
18821: RET
// export function MarkBuilding ( building , marker ) ; begin
18822: LD_INT 0
18824: PPUSH
// if marker then
18825: LD_VAR 0 2
18829: IFFALSE 18876
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
18831: LD_VAR 0 1
18835: PPUSH
18836: CALL_OW 250
18840: PPUSH
18841: LD_VAR 0 1
18845: PPUSH
18846: CALL_OW 251
18850: PPUSH
18851: LD_INT 2
18853: PPUSH
18854: LD_INT 3
18856: NEG
18857: PPUSH
18858: CALL_OW 330
// SetBName ( building , target ) ;
18862: LD_VAR 0 1
18866: PPUSH
18867: LD_STRING target
18869: PPUSH
18870: CALL_OW 500
// end else
18874: GO 18915
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: CALL_OW 250
18885: PPUSH
18886: LD_VAR 0 1
18890: PPUSH
18891: CALL_OW 251
18895: PPUSH
18896: LD_INT 2
18898: PPUSH
18899: CALL_OW 331
// SetBName ( building ,  ) ;
18903: LD_VAR 0 1
18907: PPUSH
18908: LD_STRING 
18910: PPUSH
18911: CALL_OW 500
// end ; end ; end_of_file
18915: LD_VAR 0 3
18919: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
18920: LD_INT 0
18922: PPUSH
// lockerCodeValid := false ;
18923: LD_ADDR_EXP 64
18927: PUSH
18928: LD_INT 0
18930: ST_TO_ADDR
// if not step then
18931: LD_LOC 1
18935: NOT
18936: IFFALSE 18946
// step := 1 ;
18938: LD_ADDR_LOC 1
18942: PUSH
18943: LD_INT 1
18945: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
18946: LD_STRING HEscape
18948: PUSH
18949: LD_LOC 1
18953: STR
18954: PPUSH
18955: CALL_OW 97
18959: PUSH
18960: LD_INT 1
18962: DOUBLE
18963: EQUAL
18964: IFTRUE 18968
18966: GO 18975
18968: POP
// LockerMinigameSearch ; 2 :
18969: CALL 19008 0 0
18973: GO 18991
18975: LD_INT 2
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 18990
18983: POP
// LockerMinigameSetCode ; end ;
18984: CALL 19082 0 0
18988: GO 18991
18990: POP
// if lockerCodeValid then
18991: LD_EXP 64
18995: IFFALSE 18999
// exit ;
18997: GO 19003
// StartLockerMinigame ;
18999: CALL 18920 0 0
// end ;
19003: LD_VAR 0 1
19007: RET
// function LockerMinigameSearch ; begin
19008: LD_INT 0
19010: PPUSH
// if code then
19011: LD_LOC 2
19015: IFFALSE 19031
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
19017: LD_EXP 38
19021: PPUSH
19022: LD_STRING DH-Escape-3-Hint-0
19024: PPUSH
19025: CALL_OW 88
// exit ;
19029: GO 19077
// end ; Randomize ;
19031: CALL_OW 10
// code := rand ( 1 , 5 ) ;
19035: LD_ADDR_LOC 2
19039: PUSH
19040: LD_INT 1
19042: PPUSH
19043: LD_INT 5
19045: PPUSH
19046: CALL_OW 12
19050: ST_TO_ADDR
// step := 2 ;
19051: LD_ADDR_LOC 1
19055: PUSH
19056: LD_INT 2
19058: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
19059: LD_EXP 38
19063: PPUSH
19064: LD_STRING DH-Escape-3-Hint-
19066: PUSH
19067: LD_LOC 2
19071: STR
19072: PPUSH
19073: CALL_OW 88
// end ;
19077: LD_VAR 0 1
19081: RET
// function LockerMinigameSetCode ; begin
19082: LD_INT 0
19084: PPUSH
// if not code then
19085: LD_LOC 2
19089: NOT
19090: IFFALSE 19100
// code := 0 ;
19092: LD_ADDR_LOC 2
19096: PUSH
19097: LD_INT 0
19099: ST_TO_ADDR
// lockerBusy := true ;
19100: LD_ADDR_EXP 65
19104: PUSH
19105: LD_INT 1
19107: ST_TO_ADDR
// InGameOff ;
19108: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
19112: LD_STRING initLockerMinigame("
19114: PUSH
19115: LD_LOC 2
19119: STR
19120: PUSH
19121: LD_STRING ")
19123: STR
19124: PPUSH
19125: CALL_OW 559
// step := 3 ;
19129: LD_ADDR_LOC 1
19133: PUSH
19134: LD_INT 3
19136: ST_TO_ADDR
// repeat wait ( 1 ) ;
19137: LD_INT 1
19139: PPUSH
19140: CALL_OW 67
// until not lockerBusy ;
19144: LD_EXP 65
19148: NOT
19149: IFFALSE 19137
// InGameOn ;
19151: CALL_OW 8
// if not lockerCodeValid then
19155: LD_EXP 64
19159: NOT
19160: IFFALSE 19186
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
19162: LD_EXP 38
19166: PPUSH
19167: LD_STRING DH-Escape-3-Fail-
19169: PUSH
19170: LD_INT 1
19172: PPUSH
19173: LD_INT 2
19175: PPUSH
19176: CALL_OW 12
19180: STR
19181: PPUSH
19182: CALL_OW 88
// end ; end_of_file
19186: LD_VAR 0 1
19190: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
19191: LD_VAR 0 2
19195: PUSH
19196: LD_INT 102
19198: EQUAL
19199: IFFALSE 19221
// begin lockerBusy := false ;
19201: LD_ADDR_EXP 65
19205: PUSH
19206: LD_INT 0
19208: ST_TO_ADDR
// lockerCodeValid := p3 ;
19209: LD_ADDR_EXP 64
19213: PUSH
19214: LD_VAR 0 3
19218: ST_TO_ADDR
// end else
19219: GO 19275
// if p2 = 103 then
19221: LD_VAR 0 2
19225: PUSH
19226: LD_INT 103
19228: EQUAL
19229: IFFALSE 19241
// begin weatherBusy := false ;
19231: LD_ADDR_EXP 37
19235: PUSH
19236: LD_INT 0
19238: ST_TO_ADDR
// end else
19239: GO 19275
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
19241: LD_VAR 0 1
19245: PPUSH
19246: LD_VAR 0 2
19250: PPUSH
19251: LD_VAR 0 3
19255: PPUSH
19256: LD_VAR 0 4
19260: PPUSH
19261: LD_VAR 0 5
19265: PPUSH
19266: LD_VAR 0 6
19270: PPUSH
19271: CALL 68196 0 6
// end ;
19275: PPOPN 6
19277: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
19278: LD_STRING killGameMusic();
19280: PPUSH
19281: CALL_OW 559
// SOS_MapStart ( ) ;
19285: CALL 68167 0 0
// end ; end_of_file
19289: PPOPN 1
19291: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
19292: LD_EXP 17
19296: NOT
19297: PUSH
19298: LD_EXP 63
19302: AND
19303: IFFALSE 19707
19305: GO 19307
19307: DISABLE
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
19313: PPUSH
19314: PPUSH
// begin enable ;
19315: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
19316: LD_ADDR_VAR 0 3
19320: PUSH
19321: LD_INT 26
19323: PUSH
19324: LD_INT 27
19326: PUSH
19327: LD_INT 28
19329: PUSH
19330: LD_INT 29
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 30
19341: PUSH
19342: LD_INT 31
19344: PUSH
19345: LD_INT 32
19347: PUSH
19348: LD_INT 33
19350: PUSH
19351: LD_INT 34
19353: PUSH
19354: LD_INT 35
19356: PUSH
19357: LD_INT 36
19359: PUSH
19360: LD_INT 37
19362: PUSH
19363: LD_INT 38
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 39
19379: PUSH
19380: LD_INT 40
19382: PUSH
19383: LD_INT 41
19385: PUSH
19386: LD_INT 42
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 43
19397: PUSH
19398: LD_INT 44
19400: PUSH
19401: LD_INT 45
19403: PUSH
19404: LD_INT 46
19406: PUSH
19407: LD_INT 47
19409: PUSH
19410: LD_INT 46
19412: PUSH
19413: LD_INT 45
19415: PUSH
19416: LD_INT 44
19418: PUSH
19419: LD_INT 43
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: ST_TO_ADDR
// for i in ruPatrol do
19439: LD_ADDR_VAR 0 1
19443: PUSH
19444: LD_EXP 63
19448: PUSH
19449: FOR_IN
19450: IFFALSE 19705
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
19452: LD_ADDR_VAR 0 5
19456: PUSH
19457: LD_INT 22
19459: PUSH
19460: LD_INT 2
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 21
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 91
19479: PUSH
19480: LD_VAR 0 1
19484: PUSH
19485: LD_INT 7
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: LIST
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: PPUSH
19498: CALL_OW 69
19502: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
19503: LD_INT 2
19505: PPUSH
19506: LD_VAR 0 1
19510: PPUSH
19511: CALL_OW 292
19515: PUSH
19516: LD_VAR 0 5
19520: AND
19521: IFFALSE 19591
// begin if hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 then
19523: LD_EXP 30
19527: PUSH
19528: LD_VAR 0 1
19532: PPUSH
19533: LD_EXP 58
19537: PPUSH
19538: CALL_OW 296
19542: PUSH
19543: LD_INT 16
19545: LESS
19546: AND
19547: IFFALSE 19551
// continue ;
19549: GO 19449
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
19551: LD_VAR 0 1
19555: PPUSH
19556: LD_VAR 0 5
19560: PPUSH
19561: LD_VAR 0 1
19565: PPUSH
19566: CALL_OW 74
19570: PPUSH
19571: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
19575: LD_VAR 0 1
19579: PPUSH
19580: LD_VAR 0 5
19584: PPUSH
19585: CALL 19710 0 2
// continue ;
19589: GO 19449
// end ; if HasTask ( i ) then
19591: LD_VAR 0 1
19595: PPUSH
19596: CALL_OW 314
19600: IFFALSE 19604
// continue ;
19602: GO 19449
// tag := GetTag ( i ) ;
19604: LD_ADDR_VAR 0 4
19608: PUSH
19609: LD_VAR 0 1
19613: PPUSH
19614: CALL_OW 110
19618: ST_TO_ADDR
// if not tag then
19619: LD_VAR 0 4
19623: NOT
19624: IFFALSE 19637
// begin ComHold ( i ) ;
19626: LD_VAR 0 1
19630: PPUSH
19631: CALL_OW 140
// continue ;
19635: GO 19449
// end ; for j := 1 to points [ tag ] do
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: DOUBLE
19643: LD_INT 1
19645: DEC
19646: ST_TO_ADDR
19647: LD_VAR 0 3
19651: PUSH
19652: LD_VAR 0 4
19656: ARRAY
19657: PUSH
19658: FOR_TO
19659: IFFALSE 19701
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
19661: LD_VAR 0 1
19665: PPUSH
19666: LD_VAR 0 3
19670: PUSH
19671: LD_VAR 0 4
19675: ARRAY
19676: PUSH
19677: LD_VAR 0 2
19681: ARRAY
19682: PPUSH
19683: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
19687: LD_VAR 0 1
19691: PPUSH
19692: LD_INT 70
19694: PPUSH
19695: CALL_OW 202
// end ;
19699: GO 19658
19701: POP
19702: POP
// end ;
19703: GO 19449
19705: POP
19706: POP
// end ;
19707: PPOPN 5
19709: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
19710: LD_INT 0
19712: PPUSH
19713: PPUSH
19714: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
19715: LD_VAR 0 2
19719: PPUSH
19720: LD_INT 23
19722: PUSH
19723: LD_INT 3
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PPUSH
19730: CALL_OW 72
19734: PUSH
19735: LD_VAR 0 2
19739: PPUSH
19740: LD_INT 95
19742: PUSH
19743: LD_INT 61
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PPUSH
19750: CALL_OW 72
19754: OR
19755: IFFALSE 19759
// exit ;
19757: GO 20802
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
19759: LD_VAR 0 2
19763: PPUSH
19764: LD_INT 2
19766: PUSH
19767: LD_INT 25
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 25
19779: PUSH
19780: LD_INT 11
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 25
19789: PUSH
19790: LD_INT 34
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 25
19799: PUSH
19800: LD_INT 32
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: PPUSH
19817: CALL_OW 72
19821: IFFALSE 19905
// begin DialogueOn ;
19823: CALL_OW 6
// case GetSex ( guard ) of sex_male :
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL_OW 258
19836: PUSH
19837: LD_INT 1
19839: DOUBLE
19840: EQUAL
19841: IFTRUE 19845
19843: GO 19860
19845: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
19846: LD_VAR 0 1
19850: PPUSH
19851: LD_STRING DRum-Fail-3
19853: PPUSH
19854: CALL_OW 88
19858: GO 19884
19860: LD_INT 2
19862: DOUBLE
19863: EQUAL
19864: IFTRUE 19868
19866: GO 19883
19868: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
19869: LD_VAR 0 1
19873: PPUSH
19874: LD_STRING DRum-Fail-3
19876: PPUSH
19877: CALL_OW 88
19881: GO 19884
19883: POP
// DialogueOff ;
19884: CALL_OW 7
// wait ( 0 0$5 ) ;
19888: LD_INT 175
19890: PPUSH
19891: CALL_OW 67
// isAlarm := true ;
19895: LD_ADDR_EXP 17
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// exit ;
19903: GO 20802
// end ; DialogueOn ;
19905: CALL_OW 6
// CenterNowOnUnits ( guard ) ;
19909: LD_VAR 0 1
19913: PPUSH
19914: CALL_OW 87
// if not Heike in units then
19918: LD_EXP 38
19922: PUSH
19923: LD_VAR 0 2
19927: IN
19928: NOT
19929: IFFALSE 20279
// begin case GetSex ( guard ) of sex_male :
19931: LD_VAR 0 1
19935: PPUSH
19936: CALL_OW 258
19940: PUSH
19941: LD_INT 1
19943: DOUBLE
19944: EQUAL
19945: IFTRUE 19949
19947: GO 19964
19949: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
19950: LD_VAR 0 1
19954: PPUSH
19955: LD_STRING DRum-Guard-1
19957: PPUSH
19958: CALL_OW 88
19962: GO 19988
19964: LD_INT 2
19966: DOUBLE
19967: EQUAL
19968: IFTRUE 19972
19970: GO 19987
19972: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
19973: LD_VAR 0 1
19977: PPUSH
19978: LD_STRING DRuf-Guard-1
19980: PPUSH
19981: CALL_OW 88
19985: GO 19988
19987: POP
// case Query ( SurrenderInfoPeople ) of 1 :
19988: LD_STRING SurrenderInfoPeople
19990: PPUSH
19991: CALL_OW 97
19995: PUSH
19996: LD_INT 1
19998: DOUBLE
19999: EQUAL
20000: IFTRUE 20004
20002: GO 20105
20004: POP
// begin Query ( CaughtSquadInfo ) ;
20005: LD_STRING CaughtSquadInfo
20007: PPUSH
20008: CALL_OW 97
// for i in units do
20012: LD_ADDR_VAR 0 4
20016: PUSH
20017: LD_VAR 0 2
20021: PUSH
20022: FOR_IN
20023: IFFALSE 20080
// begin if Carry ( i ) then
20025: LD_VAR 0 4
20029: PPUSH
20030: CALL_OW 281
20034: IFFALSE 20051
// SetCargo ( i , mat_cans , 0 ) ;
20036: LD_VAR 0 4
20040: PPUSH
20041: LD_INT 1
20043: PPUSH
20044: LD_INT 0
20046: PPUSH
20047: CALL_OW 290
// SetSide ( i , 5 ) ;
20051: LD_VAR 0 4
20055: PPUSH
20056: LD_INT 5
20058: PPUSH
20059: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20063: LD_VAR 0 4
20067: PPUSH
20068: LD_INT 113
20070: PPUSH
20071: LD_INT 17
20073: PPUSH
20074: CALL_OW 111
// end ;
20078: GO 20022
20080: POP
20081: POP
// ComMoveXY ( guard , 113 , 17 ) ;
20082: LD_VAR 0 1
20086: PPUSH
20087: LD_INT 113
20089: PPUSH
20090: LD_INT 17
20092: PPUSH
20093: CALL_OW 111
// DialogueOff ;
20097: CALL_OW 7
// exit ;
20101: GO 20802
// end ; 2 :
20103: GO 20279
20105: LD_INT 2
20107: DOUBLE
20108: EQUAL
20109: IFTRUE 20113
20111: GO 20278
20113: POP
// begin DialogueOff ;
20114: CALL_OW 7
// wait ( 0 0$2 ) ;
20118: LD_INT 70
20120: PPUSH
20121: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20125: LD_INT 6
20127: PPUSH
20128: LD_INT 2
20130: PPUSH
20131: LD_INT 2
20133: PPUSH
20134: LD_INT 1
20136: PPUSH
20137: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
20141: LD_VAR 0 1
20145: PPUSH
20146: LD_VAR 0 2
20150: PUSH
20151: LD_INT 1
20153: ARRAY
20154: PPUSH
20155: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20159: LD_VAR 0 1
20163: PPUSH
20164: CALL_OW 258
20168: PUSH
20169: LD_INT 1
20171: DOUBLE
20172: EQUAL
20173: IFTRUE 20177
20175: GO 20192
20177: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20178: LD_VAR 0 1
20182: PPUSH
20183: LD_STRING DRum-Fail-3
20185: PPUSH
20186: CALL_OW 88
20190: GO 20216
20192: LD_INT 2
20194: DOUBLE
20195: EQUAL
20196: IFTRUE 20200
20198: GO 20215
20200: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20201: LD_VAR 0 1
20205: PPUSH
20206: LD_STRING DRum-Fail-3
20208: PPUSH
20209: CALL_OW 88
20213: GO 20216
20215: POP
// wait ( 0 0$5 ) ;
20216: LD_INT 175
20218: PPUSH
20219: CALL_OW 67
// if IsOk ( guard ) then
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 302
20232: IFFALSE 20244
// isAlarm := true else
20234: LD_ADDR_EXP 17
20238: PUSH
20239: LD_INT 1
20241: ST_TO_ADDR
20242: GO 20276
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20244: LD_INT 6
20246: PPUSH
20247: LD_INT 2
20249: PPUSH
20250: LD_INT 0
20252: PPUSH
20253: LD_INT 1
20255: PPUSH
20256: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20260: LD_INT 3
20262: PPUSH
20263: LD_INT 2
20265: PPUSH
20266: LD_INT 0
20268: PPUSH
20269: LD_INT 1
20271: PPUSH
20272: CALL_OW 80
// end ; end ; end ;
20276: GO 20279
20278: POP
// end ; if Carry ( Heike ) then
20279: LD_EXP 38
20283: PPUSH
20284: CALL_OW 281
20288: IFFALSE 20364
// begin case GetSex ( guard ) of sex_male :
20290: LD_VAR 0 1
20294: PPUSH
20295: CALL_OW 258
20299: PUSH
20300: LD_INT 1
20302: DOUBLE
20303: EQUAL
20304: IFTRUE 20308
20306: GO 20323
20308: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
20309: LD_VAR 0 1
20313: PPUSH
20314: LD_STRING DRum-FoodFail-1
20316: PPUSH
20317: CALL_OW 88
20321: GO 20347
20323: LD_INT 2
20325: DOUBLE
20326: EQUAL
20327: IFTRUE 20331
20329: GO 20346
20331: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_STRING DRuf-FoodFail-2
20339: PPUSH
20340: CALL_OW 88
20344: GO 20347
20346: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
20347: LD_EXP 38
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: LD_INT 0
20357: PPUSH
20358: CALL_OW 290
// end else
20362: GO 20421
// begin case GetSex ( guard ) of sex_male :
20364: LD_VAR 0 1
20368: PPUSH
20369: CALL_OW 258
20373: PUSH
20374: LD_INT 1
20376: DOUBLE
20377: EQUAL
20378: IFTRUE 20382
20380: GO 20397
20382: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
20383: LD_VAR 0 1
20387: PPUSH
20388: LD_STRING DRum-Seen-1
20390: PPUSH
20391: CALL_OW 88
20395: GO 20421
20397: LD_INT 2
20399: DOUBLE
20400: EQUAL
20401: IFTRUE 20405
20403: GO 20420
20405: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
20406: LD_VAR 0 1
20410: PPUSH
20411: LD_STRING DRuf-Seen-1
20413: PPUSH
20414: CALL_OW 88
20418: GO 20421
20420: POP
// end ; alone := ( units = 1 ) ;
20421: LD_ADDR_VAR 0 5
20425: PUSH
20426: LD_VAR 0 2
20430: PUSH
20431: LD_INT 1
20433: EQUAL
20434: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
20435: LD_STRING SurrenderInfo
20437: PPUSH
20438: CALL_OW 97
20442: PUSH
20443: LD_INT 1
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20620
20451: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
20452: LD_INT 23
20454: PPUSH
20455: CALL_OW 87
// RemoveUnit ( Heike ) ;
20459: LD_EXP 38
20463: PPUSH
20464: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
20468: LD_EXP 38
20472: PPUSH
20473: LD_INT 23
20475: PPUSH
20476: CALL_OW 52
// if not alone then
20480: LD_VAR 0 5
20484: NOT
20485: IFFALSE 20540
// for i in units diff Heike do
20487: LD_ADDR_VAR 0 4
20491: PUSH
20492: LD_VAR 0 2
20496: PUSH
20497: LD_EXP 38
20501: DIFF
20502: PUSH
20503: FOR_IN
20504: IFFALSE 20538
// begin RemoveUnit ( i ) ;
20506: LD_VAR 0 4
20510: PPUSH
20511: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
20515: LD_VAR 0 4
20519: PPUSH
20520: LD_INT 114
20522: PPUSH
20523: LD_INT 17
20525: PPUSH
20526: LD_INT 10
20528: PPUSH
20529: LD_INT 0
20531: PPUSH
20532: CALL_OW 50
// end ;
20536: GO 20503
20538: POP
20539: POP
// wait ( 0 0$0.3 ) ;
20540: LD_INT 10
20542: PPUSH
20543: CALL_OW 67
// if alone then
20547: LD_VAR 0 5
20551: IFFALSE 20562
// Query ( CaughtInfoAlone ) else
20553: LD_STRING CaughtInfoAlone
20555: PPUSH
20556: CALL_OW 97
20560: GO 20569
// Query ( CaughtInfo ) ;
20562: LD_STRING CaughtInfo
20564: PPUSH
20565: CALL_OW 97
// wait ( 0 0$1 ) ;
20569: LD_INT 35
20571: PPUSH
20572: CALL_OW 67
// StartLockerMinigame ;
20576: CALL 18920 0 0
// Say ( Heike , DH-Reset ) ;
20580: LD_EXP 38
20584: PPUSH
20585: LD_STRING DH-Reset
20587: PPUSH
20588: CALL_OW 88
// DialogueOff ;
20592: CALL_OW 7
// InGameOff ;
20596: CALL_OW 9
// ComExitBuilding ( Heike ) ;
20600: LD_EXP 38
20604: PPUSH
20605: CALL_OW 122
// ComFree ( guard ) ;
20609: LD_VAR 0 1
20613: PPUSH
20614: CALL_OW 139
// end ; 2 :
20618: GO 20802
20620: LD_INT 2
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20801
20628: POP
// begin Say ( Heike , DH-Guard-2 ) ;
20629: LD_EXP 38
20633: PPUSH
20634: LD_STRING DH-Guard-2
20636: PPUSH
20637: CALL_OW 88
// DialogueOff ;
20641: CALL_OW 7
// wait ( 0 0$2 ) ;
20645: LD_INT 70
20647: PPUSH
20648: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20652: LD_INT 6
20654: PPUSH
20655: LD_INT 2
20657: PPUSH
20658: LD_INT 2
20660: PPUSH
20661: LD_INT 1
20663: PPUSH
20664: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
20668: LD_VAR 0 1
20672: PPUSH
20673: LD_EXP 38
20677: PPUSH
20678: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20682: LD_VAR 0 1
20686: PPUSH
20687: CALL_OW 258
20691: PUSH
20692: LD_INT 1
20694: DOUBLE
20695: EQUAL
20696: IFTRUE 20700
20698: GO 20715
20700: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_STRING DRum-Fail-3
20708: PPUSH
20709: CALL_OW 88
20713: GO 20739
20715: LD_INT 2
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20738
20723: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20724: LD_VAR 0 1
20728: PPUSH
20729: LD_STRING DRum-Fail-3
20731: PPUSH
20732: CALL_OW 88
20736: GO 20739
20738: POP
// wait ( 0 0$5 ) ;
20739: LD_INT 175
20741: PPUSH
20742: CALL_OW 67
// if IsOk ( guard ) then
20746: LD_VAR 0 1
20750: PPUSH
20751: CALL_OW 302
20755: IFFALSE 20767
// isAlarm := true else
20757: LD_ADDR_EXP 17
20761: PUSH
20762: LD_INT 1
20764: ST_TO_ADDR
20765: GO 20799
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20767: LD_INT 6
20769: PPUSH
20770: LD_INT 2
20772: PPUSH
20773: LD_INT 0
20775: PPUSH
20776: LD_INT 1
20778: PPUSH
20779: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20783: LD_INT 3
20785: PPUSH
20786: LD_INT 2
20788: PPUSH
20789: LD_INT 0
20791: PPUSH
20792: LD_INT 1
20794: PPUSH
20795: CALL_OW 80
// end ; end ; end ;
20799: GO 20802
20801: POP
// end ;
20802: LD_VAR 0 3
20806: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
20807: LD_EXP 14
20811: PPUSH
20812: LD_INT 22
20814: PUSH
20815: LD_INT 5
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 3
20824: PUSH
20825: LD_INT 101
20827: PUSH
20828: LD_INT 6
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 92
20841: PUSH
20842: LD_INT 113
20844: PUSH
20845: LD_INT 16
20847: PUSH
20848: LD_INT 12
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 91
20859: PUSH
20860: LD_EXP 38
20864: PUSH
20865: LD_INT 6
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: PPUSH
20879: CALL_OW 72
20883: PUSH
20884: LD_EXP 30
20888: NOT
20889: AND
20890: IFFALSE 20995
20892: GO 20894
20894: DISABLE
20895: LD_INT 0
20897: PPUSH
// begin enable ;
20898: ENABLE
// DialogueOn ;
20899: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
20903: LD_EXP 38
20907: PPUSH
20908: LD_STRING DH-Join-
20910: PUSH
20911: LD_INT 1
20913: PPUSH
20914: LD_INT 3
20916: PPUSH
20917: CALL_OW 12
20921: STR
20922: PPUSH
20923: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
20927: LD_ADDR_VAR 0 1
20931: PUSH
20932: LD_EXP 14
20936: PPUSH
20937: LD_INT 22
20939: PUSH
20940: LD_INT 5
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 91
20949: PUSH
20950: LD_EXP 38
20954: PUSH
20955: LD_INT 10
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PPUSH
20967: CALL_OW 72
20971: PUSH
20972: FOR_IN
20973: IFFALSE 20989
// SetSide ( i , 2 ) ;
20975: LD_VAR 0 1
20979: PPUSH
20980: LD_INT 2
20982: PPUSH
20983: CALL_OW 235
20987: GO 20972
20989: POP
20990: POP
// DialogueOff ;
20991: CALL_OW 7
// end ; end_of_file
20995: PPOPN 1
20997: END
// every 0 0$2 trigger isAlarm do var i , points , tmp ;
20998: LD_EXP 17
21002: IFFALSE 21303
21004: GO 21006
21006: DISABLE
21007: LD_INT 0
21009: PPUSH
21010: PPUSH
21011: PPUSH
// begin DialogueOn ;
21012: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
21016: LD_EXP 38
21020: PPUSH
21021: LD_STRING DH-Alarm-1
21023: PPUSH
21024: CALL_OW 88
// DialogueOff ;
21028: CALL_OW 7
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
21032: LD_INT 1
21034: NEG
21035: PPUSH
21036: LD_INT 1
21038: NEG
21039: PPUSH
21040: LD_STRING alarm
21042: PPUSH
21043: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
21047: LD_INT 3
21049: PPUSH
21050: LD_INT 2
21052: PPUSH
21053: LD_INT 2
21055: PPUSH
21056: LD_INT 1
21058: PPUSH
21059: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21063: LD_INT 6
21065: PPUSH
21066: LD_INT 2
21068: PPUSH
21069: LD_INT 2
21071: PPUSH
21072: LD_INT 1
21074: PPUSH
21075: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
21079: LD_ADDR_VAR 0 2
21083: PUSH
21084: LD_INT 107
21086: PUSH
21087: LD_INT 39
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 143
21096: PUSH
21097: LD_INT 33
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 180
21106: PUSH
21107: LD_INT 115
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 96
21116: PUSH
21117: LD_INT 90
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 59
21126: PUSH
21127: LD_INT 52
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 16
21136: PUSH
21137: LD_INT 15
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 90
21146: PUSH
21147: LD_INT 120
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
21163: LD_ADDR_VAR 0 3
21167: PUSH
21168: LD_INT 22
21170: PUSH
21171: LD_INT 6
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 25
21180: PUSH
21181: LD_INT 1
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PPUSH
21192: CALL_OW 69
21196: ST_TO_ADDR
// for i in tmp do
21197: LD_ADDR_VAR 0 1
21201: PUSH
21202: LD_VAR 0 3
21206: PUSH
21207: FOR_IN
21208: IFFALSE 21276
// begin ComExit ( i ) ;
21210: LD_VAR 0 1
21214: PPUSH
21215: CALL 64590 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
21219: LD_VAR 0 1
21223: PPUSH
21224: LD_VAR 0 2
21228: PUSH
21229: LD_VAR 0 1
21233: PUSH
21234: LD_INT 7
21236: MOD
21237: PUSH
21238: LD_INT 1
21240: PLUS
21241: ARRAY
21242: PUSH
21243: LD_INT 1
21245: ARRAY
21246: PPUSH
21247: LD_VAR 0 2
21251: PUSH
21252: LD_VAR 0 1
21256: PUSH
21257: LD_INT 7
21259: MOD
21260: PUSH
21261: LD_INT 1
21263: PLUS
21264: ARRAY
21265: PUSH
21266: LD_INT 2
21268: ARRAY
21269: PPUSH
21270: CALL_OW 174
// end ;
21274: GO 21207
21276: POP
21277: POP
// Explode ;
21278: CALL 21306 0 0
// wait ( 0 0$45 ) ;
21282: LD_INT 1575
21284: PPUSH
21285: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
21289: LD_VAR 0 3
21293: PPUSH
21294: LD_EXP 38
21298: PPUSH
21299: CALL_OW 175
// end ;
21303: PPOPN 3
21305: END
// export function Explode ; var i , x , y , j ; begin
21306: LD_INT 0
21308: PPUSH
21309: PPUSH
21310: PPUSH
21311: PPUSH
21312: PPUSH
// if hasExplosionsInFactory then
21313: LD_EXP 7
21317: IFFALSE 21337
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
21319: LD_ADDR_EXP 29
21323: PUSH
21324: LD_EXP 29
21328: PPUSH
21329: LD_INT 61
21331: PPUSH
21332: CALL 64192 0 2
21336: ST_TO_ADDR
// if explosivePlantedList then
21337: LD_EXP 29
21341: IFFALSE 21489
// begin for i in explosivePlantedList do
21343: LD_ADDR_VAR 0 2
21347: PUSH
21348: LD_EXP 29
21352: PUSH
21353: FOR_IN
21354: IFFALSE 21457
// begin x := GetX ( i ) ;
21356: LD_ADDR_VAR 0 3
21360: PUSH
21361: LD_VAR 0 2
21365: PPUSH
21366: CALL_OW 250
21370: ST_TO_ADDR
// y := GetY ( i ) ;
21371: LD_ADDR_VAR 0 4
21375: PUSH
21376: LD_VAR 0 2
21380: PPUSH
21381: CALL_OW 251
21385: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
21386: LD_ADDR_VAR 0 5
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: LD_INT 3
21396: PUSH
21397: LD_INT 5
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: LIST
21404: PUSH
21405: FOR_IN
21406: IFFALSE 21453
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
21408: LD_VAR 0 3
21412: PPUSH
21413: LD_VAR 0 5
21417: PPUSH
21418: LD_INT 2
21420: PPUSH
21421: CALL_OW 272
21425: PPUSH
21426: LD_VAR 0 4
21430: PPUSH
21431: LD_VAR 0 5
21435: PPUSH
21436: LD_INT 2
21438: PPUSH
21439: CALL_OW 273
21443: PPUSH
21444: LD_INT 1
21446: PPUSH
21447: CALL_OW 453
21451: GO 21405
21453: POP
21454: POP
// end ;
21455: GO 21353
21457: POP
21458: POP
// Say ( Heike , DH-End-2 ) ;
21459: LD_EXP 38
21463: PPUSH
21464: LD_STRING DH-End-2
21466: PPUSH
21467: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
21471: LD_INT 175
21473: PUSH
21474: LD_EXP 29
21478: PPUSH
21479: CALL 28845 0 1
21483: MUL
21484: PPUSH
21485: CALL_OW 67
// end ; if not isAlarm then
21489: LD_EXP 17
21493: NOT
21494: IFFALSE 21504
// isAlarm := true ;
21496: LD_ADDR_EXP 17
21500: PUSH
21501: LD_INT 1
21503: ST_TO_ADDR
// end ;
21504: LD_VAR 0 1
21508: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
21509: LD_INT 22
21511: PUSH
21512: LD_INT 2
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 21
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 2
21531: PUSH
21532: LD_INT 101
21534: PUSH
21535: LD_INT 3
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 101
21544: PUSH
21545: LD_INT 6
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: LIST
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: LIST
21561: PPUSH
21562: CALL_OW 69
21566: IFFALSE 21579
21568: GO 21570
21570: DISABLE
// isAlarm := true ; end_of_file
21571: LD_ADDR_EXP 17
21575: PUSH
21576: LD_INT 1
21578: ST_TO_ADDR
21579: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
21580: LD_EXP 14
21584: PPUSH
21585: LD_INT 22
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PPUSH
21595: CALL_OW 72
21599: PUSH
21600: LD_INT 3
21602: GREATER
21603: PUSH
21604: LD_EXP 17
21608: NOT
21609: AND
21610: IFFALSE 25462
21612: GO 21614
21614: DISABLE
21615: LD_INT 0
21617: PPUSH
21618: PPUSH
21619: PPUSH
21620: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
21621: LD_EXP 58
21625: PPUSH
21626: LD_INT 155
21628: PPUSH
21629: LD_INT 68
21631: PPUSH
21632: LD_INT 0
21634: PPUSH
21635: CALL_OW 48
// wait ( 0 0$1 ) ;
21639: LD_INT 35
21641: PPUSH
21642: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21646: LD_INT 35
21648: PPUSH
21649: CALL_OW 67
// if not HasTask ( ruDisturb ) then
21653: LD_EXP 58
21657: PPUSH
21658: CALL_OW 314
21662: NOT
21663: IFFALSE 21679
// ComMoveUnit ( ruDisturb , Heike ) ;
21665: LD_EXP 58
21669: PPUSH
21670: LD_EXP 38
21674: PPUSH
21675: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
21679: LD_EXP 38
21683: PPUSH
21684: LD_EXP 58
21688: PPUSH
21689: CALL_OW 296
21693: PUSH
21694: LD_INT 6
21696: LESS
21697: PUSH
21698: LD_EXP 58
21702: PPUSH
21703: CALL_OW 302
21707: AND
21708: IFFALSE 21646
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21710: LD_EXP 14
21714: PPUSH
21715: LD_INT 22
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 91
21727: PUSH
21728: LD_EXP 58
21732: PUSH
21733: LD_INT 8
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: LD_INT 25
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 25
21756: PUSH
21757: LD_INT 11
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 25
21766: PUSH
21767: LD_INT 32
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 25
21776: PUSH
21777: LD_INT 34
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: PPUSH
21796: CALL_OW 72
21800: IFFALSE 21810
// isAlarm := true ;
21802: LD_ADDR_EXP 17
21806: PUSH
21807: LD_INT 1
21809: ST_TO_ADDR
// if isAlarm then
21810: LD_EXP 17
21814: IFFALSE 21818
// exit ;
21816: GO 25462
// DialogueOn ;
21818: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
21822: LD_EXP 58
21826: PPUSH
21827: LD_STRING DMcn-Interrupt-1
21829: PPUSH
21830: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
21834: LD_EXP 58
21838: PPUSH
21839: LD_STRING DMcn-Interrupt-2
21841: PPUSH
21842: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
21846: LD_EXP 58
21850: PPUSH
21851: LD_STRING DMcn-Interrupt-3
21853: PPUSH
21854: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
21858: LD_EXP 38
21862: PPUSH
21863: LD_STRING DH-Interrupt-a-4
21865: PPUSH
21866: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
21870: LD_EXP 58
21874: PPUSH
21875: LD_STRING DMcn-Interrupt-a-5
21877: PPUSH
21878: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
21882: LD_EXP 38
21886: PPUSH
21887: LD_STRING DH-Interrupt-a-6
21889: PPUSH
21890: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
21894: LD_EXP 58
21898: PPUSH
21899: LD_STRING DMcn-Interrupt-a-7
21901: PPUSH
21902: CALL_OW 88
// DialogueOff ;
21906: CALL_OW 7
// hasMuchin := true ;
21910: LD_ADDR_EXP 30
21914: PUSH
21915: LD_INT 1
21917: ST_TO_ADDR
// Query ( MuchinInfo ) ;
21918: LD_STRING MuchinInfo
21920: PPUSH
21921: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
21925: LD_STRING M2a
21927: PPUSH
21928: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
21932: LD_INT 105
21934: PPUSH
21935: LD_INT 55
21937: PPUSH
21938: CALL_OW 428
21942: PPUSH
21943: LD_INT 2
21945: PPUSH
21946: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
21950: LD_INT 115
21952: PPUSH
21953: LD_INT 65
21955: PPUSH
21956: CALL_OW 428
21960: PPUSH
21961: LD_INT 2
21963: PPUSH
21964: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
21968: LD_INT 109
21970: PPUSH
21971: LD_INT 59
21973: PPUSH
21974: LD_INT 2
21976: PPUSH
21977: LD_INT 10
21979: NEG
21980: PPUSH
21981: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
21985: LD_INT 109
21987: PPUSH
21988: LD_INT 59
21990: PPUSH
21991: CALL_OW 84
// wait ( 0 0$2 ) ;
21995: LD_INT 70
21997: PPUSH
21998: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
22002: LD_INT 109
22004: PPUSH
22005: LD_INT 59
22007: PPUSH
22008: LD_INT 2
22010: PPUSH
22011: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
22015: LD_INT 35
22017: PPUSH
22018: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22022: LD_EXP 58
22026: PPUSH
22027: LD_EXP 38
22031: PPUSH
22032: CALL_OW 296
22036: PUSH
22037: LD_INT 6
22039: GREATER
22040: IFFALSE 22056
// ComMoveUnit ( ruDisturb , Heike ) ;
22042: LD_EXP 58
22046: PPUSH
22047: LD_EXP 38
22051: PPUSH
22052: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22056: LD_EXP 14
22060: PPUSH
22061: LD_INT 22
22063: PUSH
22064: LD_INT 2
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 91
22073: PUSH
22074: LD_EXP 58
22078: PUSH
22079: LD_INT 8
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: LD_INT 25
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 25
22102: PUSH
22103: LD_INT 11
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 25
22112: PUSH
22113: LD_INT 32
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 25
22122: PUSH
22123: LD_INT 34
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: PPUSH
22142: CALL_OW 72
22146: IFFALSE 22158
// begin isAlarm := true ;
22148: LD_ADDR_EXP 17
22152: PUSH
22153: LD_INT 1
22155: ST_TO_ADDR
// exit ;
22156: GO 25462
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
22158: LD_INT 105
22160: PPUSH
22161: LD_INT 55
22163: PPUSH
22164: CALL_OW 428
22168: NOT
22169: PUSH
22170: LD_INT 115
22172: PPUSH
22173: LD_INT 65
22175: PPUSH
22176: CALL_OW 428
22180: NOT
22181: OR
22182: IFFALSE 22194
// begin isAlarm := true ;
22184: LD_ADDR_EXP 17
22188: PUSH
22189: LD_INT 1
22191: ST_TO_ADDR
// exit ;
22192: GO 25462
// end ; until not BuildingsInProgress ( 2 ) ;
22194: LD_INT 2
22196: PPUSH
22197: CALL_OW 345
22201: NOT
22202: IFFALSE 22015
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
22204: LD_INT 105
22206: PPUSH
22207: LD_INT 55
22209: PPUSH
22210: CALL_OW 428
22214: PPUSH
22215: LD_INT 3
22217: PPUSH
22218: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
22222: LD_INT 115
22224: PPUSH
22225: LD_INT 65
22227: PPUSH
22228: CALL_OW 428
22232: PPUSH
22233: LD_INT 3
22235: PPUSH
22236: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
22240: LD_STRING M2a-out
22242: PPUSH
22243: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
22247: LD_EXP 58
22251: PPUSH
22252: LD_INT 2
22254: PPUSH
22255: CALL_OW 120
// wait ( 0 0$3 ) ;
22259: LD_INT 105
22261: PPUSH
22262: CALL_OW 67
// hasMuchin := false ;
22266: LD_ADDR_EXP 30
22270: PUSH
22271: LD_INT 0
22273: ST_TO_ADDR
// wait ( 2 2$00 ) ;
22274: LD_INT 4200
22276: PPUSH
22277: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22281: LD_INT 35
22283: PPUSH
22284: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22288: LD_EXP 58
22292: PPUSH
22293: CALL_OW 314
22297: NOT
22298: IFFALSE 22314
// ComMoveUnit ( ruDisturb , Heike ) ;
22300: LD_EXP 58
22304: PPUSH
22305: LD_EXP 38
22309: PPUSH
22310: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22314: LD_EXP 38
22318: PPUSH
22319: LD_EXP 58
22323: PPUSH
22324: CALL_OW 296
22328: PUSH
22329: LD_INT 6
22331: LESS
22332: PUSH
22333: LD_EXP 58
22337: PPUSH
22338: CALL_OW 302
22342: AND
22343: IFFALSE 22281
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22345: LD_EXP 14
22349: PPUSH
22350: LD_INT 22
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 91
22362: PUSH
22363: LD_EXP 58
22367: PUSH
22368: LD_INT 8
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: LD_INT 25
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 25
22391: PUSH
22392: LD_INT 11
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 25
22401: PUSH
22402: LD_INT 32
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 25
22411: PUSH
22412: LD_INT 34
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: LIST
22430: PPUSH
22431: CALL_OW 72
22435: IFFALSE 22445
// isAlarm := true ;
22437: LD_ADDR_EXP 17
22441: PUSH
22442: LD_INT 1
22444: ST_TO_ADDR
// if isAlarm then
22445: LD_EXP 17
22449: IFFALSE 22453
// exit ;
22451: GO 25462
// DialogueOn ;
22453: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
22457: LD_EXP 58
22461: PPUSH
22462: LD_STRING DMcn-Interrupt-1
22464: PPUSH
22465: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
22469: LD_EXP 58
22473: PPUSH
22474: LD_STRING DMcn-Interrupt-2
22476: PPUSH
22477: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
22481: LD_INT 176
22483: PPUSH
22484: LD_INT 54
22486: PPUSH
22487: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
22491: LD_INT 176
22493: PPUSH
22494: LD_INT 54
22496: PPUSH
22497: LD_INT 2
22499: PPUSH
22500: LD_INT 6
22502: NEG
22503: PPUSH
22504: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
22508: LD_INT 10
22510: PPUSH
22511: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
22515: LD_EXP 58
22519: PPUSH
22520: LD_STRING DMcn-Interrupt-b-3
22522: PPUSH
22523: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
22527: LD_EXP 38
22531: PPUSH
22532: LD_STRING DH-Interrupt-b-4
22534: PPUSH
22535: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
22539: LD_EXP 58
22543: PPUSH
22544: LD_STRING DMcn-Interrupt-b-5
22546: PPUSH
22547: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
22551: LD_EXP 38
22555: PPUSH
22556: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
22560: LD_INT 176
22562: PPUSH
22563: LD_INT 54
22565: PPUSH
22566: LD_INT 2
22568: PPUSH
22569: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
22573: LD_EXP 58
22577: PPUSH
22578: LD_STRING DMcn-Interrupt-b-6
22580: PPUSH
22581: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
22585: LD_EXP 38
22589: PPUSH
22590: LD_STRING DH-Interrupt-b-7
22592: PPUSH
22593: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
22597: LD_EXP 58
22601: PPUSH
22602: LD_STRING DMcn-Interrupt-b-8
22604: PPUSH
22605: CALL_OW 88
// DialogueOff ;
22609: CALL_OW 7
// Query ( MuchinInfo ) ;
22613: LD_STRING MuchinInfo
22615: PPUSH
22616: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
22620: LD_STRING M2b
22622: PPUSH
22623: CALL_OW 337
// hasMuchin := true ;
22627: LD_ADDR_EXP 30
22631: PUSH
22632: LD_INT 1
22634: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22635: LD_INT 35
22637: PPUSH
22638: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22642: LD_EXP 58
22646: PPUSH
22647: LD_EXP 38
22651: PPUSH
22652: CALL_OW 296
22656: PUSH
22657: LD_INT 6
22659: GREATER
22660: IFFALSE 22676
// ComMoveUnit ( ruDisturb , Heike ) ;
22662: LD_EXP 58
22666: PPUSH
22667: LD_EXP 38
22671: PPUSH
22672: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22676: LD_EXP 14
22680: PPUSH
22681: LD_INT 22
22683: PUSH
22684: LD_INT 2
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 91
22693: PUSH
22694: LD_EXP 58
22698: PUSH
22699: LD_INT 8
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: LD_INT 25
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 25
22722: PUSH
22723: LD_INT 11
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 25
22732: PUSH
22733: LD_INT 32
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 25
22742: PUSH
22743: LD_INT 34
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: PPUSH
22762: CALL_OW 72
22766: IFFALSE 22778
// begin isAlarm := true ;
22768: LD_ADDR_EXP 17
22772: PUSH
22773: LD_INT 1
22775: ST_TO_ADDR
// exit ;
22776: GO 25462
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
22778: LD_EXP 38
22782: PPUSH
22783: LD_INT 61
22785: PPUSH
22786: CALL_OW 296
22790: PUSH
22791: LD_INT 4
22793: LESS
22794: IFFALSE 22635
// InGameOn ;
22796: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
22800: LD_INT 173
22802: PPUSH
22803: LD_INT 54
22805: PPUSH
22806: LD_INT 2
22808: PPUSH
22809: LD_INT 8
22811: NEG
22812: PPUSH
22813: CALL_OW 330
// SetSide ( Heike , 3 ) ;
22817: LD_EXP 38
22821: PPUSH
22822: LD_INT 3
22824: PPUSH
22825: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
22829: LD_EXP 38
22833: PPUSH
22834: LD_INT 61
22836: PPUSH
22837: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
22841: LD_EXP 58
22845: PPUSH
22846: LD_INT 61
22848: PPUSH
22849: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
22853: LD_EXP 45
22857: PUSH
22858: LD_EXP 14
22862: IN
22863: PUSH
22864: LD_EXP 45
22868: PPUSH
22869: LD_INT 61
22871: PPUSH
22872: CALL_OW 296
22876: PUSH
22877: LD_INT 12
22879: LESS
22880: AND
22881: IFFALSE 22925
// begin SetSide ( Markov , 3 ) ;
22883: LD_EXP 45
22887: PPUSH
22888: LD_INT 3
22890: PPUSH
22891: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
22895: LD_EXP 45
22899: PPUSH
22900: LD_INT 61
22902: PPUSH
22903: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
22907: LD_INT 35
22909: PPUSH
22910: CALL_OW 67
// until IsInUnit ( Markov ) ;
22914: LD_EXP 45
22918: PPUSH
22919: CALL_OW 310
22923: IFFALSE 22907
// end ; repeat wait ( 0 0$1 ) ;
22925: LD_INT 35
22927: PPUSH
22928: CALL_OW 67
// until IsInUnit ( Heike ) ;
22932: LD_EXP 38
22936: PPUSH
22937: CALL_OW 310
22941: IFFALSE 22925
// SetClass ( Heike , class_mechanic ) ;
22943: LD_EXP 38
22947: PPUSH
22948: LD_INT 3
22950: PPUSH
22951: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
22955: LD_INT 61
22957: PPUSH
22958: LD_INT 21
22960: PPUSH
22961: LD_INT 3
22963: PPUSH
22964: LD_INT 3
22966: PPUSH
22967: LD_INT 43
22969: PPUSH
22970: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
22974: LD_EXP 31
22978: PUSH
22979: LD_EXP 45
22983: PUSH
22984: LD_EXP 14
22988: IN
22989: PUSH
22990: LD_EXP 45
22994: PPUSH
22995: CALL_OW 310
22999: PUSH
23000: LD_INT 61
23002: EQUAL
23003: OR
23004: AND
23005: IFFALSE 23473
// begin wait ( 0 0$5 ) ;
23007: LD_INT 175
23009: PPUSH
23010: CALL_OW 67
// SetSide ( Heike , 2 ) ;
23014: LD_EXP 38
23018: PPUSH
23019: LD_INT 2
23021: PPUSH
23022: CALL_OW 235
// SetSide ( Markov , 2 ) ;
23026: LD_EXP 45
23030: PPUSH
23031: LD_INT 2
23033: PPUSH
23034: CALL_OW 235
// if not Markov in heikeSquad then
23038: LD_EXP 45
23042: PUSH
23043: LD_EXP 14
23047: IN
23048: NOT
23049: IFFALSE 23071
// heikeSquad := Join ( heikeSquad , Markov ) ;
23051: LD_ADDR_EXP 14
23055: PUSH
23056: LD_EXP 14
23060: PPUSH
23061: LD_EXP 45
23065: PPUSH
23066: CALL 64192 0 2
23070: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
23071: LD_EXP 45
23075: PPUSH
23076: LD_STRING DMar-Factory-1
23078: PPUSH
23079: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
23083: LD_INT 61
23085: PPUSH
23086: LD_INT 99
23088: PPUSH
23089: CALL_OW 329
// game_speed := 4 ;
23093: LD_ADDR_OWVAR 65
23097: PUSH
23098: LD_INT 4
23100: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
23101: LD_EXP 58
23105: PPUSH
23106: CALL_OW 122
// ComExitBuilding ( Markov ) ;
23110: LD_EXP 45
23114: PPUSH
23115: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
23119: LD_EXP 58
23123: PPUSH
23124: LD_INT 171
23126: PPUSH
23127: LD_INT 51
23129: PPUSH
23130: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
23134: LD_EXP 45
23138: PPUSH
23139: LD_INT 167
23141: PPUSH
23142: LD_INT 50
23144: PPUSH
23145: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
23149: LD_EXP 45
23153: PPUSH
23154: LD_EXP 58
23158: PPUSH
23159: CALL_OW 179
// wait ( 0 0$5 ) ;
23163: LD_INT 175
23165: PPUSH
23166: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
23170: LD_EXP 45
23174: PPUSH
23175: LD_STRING DMar-Factory-2
23177: PPUSH
23178: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
23182: LD_ADDR_VAR 0 2
23186: PUSH
23187: LD_INT 22
23189: PUSH
23190: LD_INT 3
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 33
23199: PUSH
23200: LD_INT 3
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PPUSH
23211: CALL_OW 69
23215: PUSH
23216: LD_INT 1
23218: ARRAY
23219: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
23220: LD_EXP 58
23224: PPUSH
23225: LD_VAR 0 2
23229: PPUSH
23230: CALL_OW 119
// async ;
23234: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
23235: LD_EXP 58
23239: PPUSH
23240: LD_STRING DMcn-Factory-3
23242: PPUSH
23243: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
23247: LD_VAR 0 2
23251: PPUSH
23252: LD_EXP 58
23256: PPUSH
23257: CALL_OW 115
// sync ;
23261: SYNC
// wait ( 0 0$1 ) ;
23262: LD_INT 35
23264: PPUSH
23265: CALL_OW 67
// KillUnit ( ruDisturb ) ;
23269: LD_EXP 58
23273: PPUSH
23274: CALL_OW 66
// SetSide ( veh , 7 ) ;
23278: LD_VAR 0 2
23282: PPUSH
23283: LD_INT 7
23285: PPUSH
23286: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
23290: LD_VAR 0 2
23294: PPUSH
23295: LD_INT 84
23297: PPUSH
23298: LD_INT 38
23300: PPUSH
23301: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
23305: LD_EXP 59
23309: PUSH
23310: LD_INT 1
23312: ARRAY
23313: PPUSH
23314: CALL_OW 258
23318: PUSH
23319: LD_INT 1
23321: EQUAL
23322: IFFALSE 23342
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
23324: LD_EXP 59
23328: PUSH
23329: LD_INT 1
23331: ARRAY
23332: PPUSH
23333: LD_STRING DRum-Factory-4
23335: PPUSH
23336: CALL_OW 88
23340: GO 23358
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
23342: LD_EXP 59
23346: PUSH
23347: LD_INT 1
23349: ARRAY
23350: PPUSH
23351: LD_STRING DRuf-Factory-4
23353: PPUSH
23354: CALL_OW 88
// wait ( 0 0$1 ) ;
23358: LD_INT 35
23360: PPUSH
23361: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
23365: LD_EXP 59
23369: PPUSH
23370: LD_INT 26
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PPUSH
23380: CALL_OW 72
23384: PUSH
23385: LD_INT 1
23387: ARRAY
23388: PPUSH
23389: LD_STRING DRum-Factory-6
23391: PPUSH
23392: CALL_OW 88
// wait ( 0 0$2 ) ;
23396: LD_INT 70
23398: PPUSH
23399: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
23403: LD_EXP 38
23407: PPUSH
23408: LD_INT 33
23410: PPUSH
23411: CALL_OW 336
// ComExitBuilding ( Heike ) ;
23415: LD_EXP 38
23419: PPUSH
23420: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23424: LD_EXP 38
23428: PPUSH
23429: LD_INT 168
23431: PPUSH
23432: LD_INT 54
23434: PPUSH
23435: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23439: LD_INT 173
23441: PPUSH
23442: LD_INT 54
23444: PPUSH
23445: LD_INT 2
23447: PPUSH
23448: CALL_OW 331
// InGameOff ;
23452: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
23456: LD_STRING M2b-out
23458: PPUSH
23459: CALL_OW 337
// hasMuchin := false ;
23463: LD_ADDR_EXP 30
23467: PUSH
23468: LD_INT 0
23470: ST_TO_ADDR
// exit ;
23471: GO 25462
// end ; wait ( 0 0$5 ) ;
23473: LD_INT 175
23475: PPUSH
23476: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
23480: LD_INT 61
23482: PPUSH
23483: LD_INT 99
23485: PPUSH
23486: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
23490: LD_EXP 45
23494: PUSH
23495: LD_EXP 14
23499: IN
23500: PUSH
23501: LD_EXP 45
23505: PPUSH
23506: CALL_OW 255
23510: PUSH
23511: LD_INT 3
23513: EQUAL
23514: AND
23515: IFFALSE 23538
// begin SetSide ( Markov , 2 ) ;
23517: LD_EXP 45
23521: PPUSH
23522: LD_INT 2
23524: PPUSH
23525: CALL_OW 235
// ComExitBuilding ( Markov ) ;
23529: LD_EXP 45
23533: PPUSH
23534: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
23538: LD_EXP 38
23542: PPUSH
23543: LD_INT 2
23545: PPUSH
23546: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
23550: LD_EXP 38
23554: PPUSH
23555: LD_INT 33
23557: PPUSH
23558: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
23562: LD_EXP 58
23566: PPUSH
23567: CALL_OW 122
// ComExitBuilding ( Heike ) ;
23571: LD_EXP 38
23575: PPUSH
23576: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23580: LD_EXP 38
23584: PPUSH
23585: LD_INT 168
23587: PPUSH
23588: LD_INT 54
23590: PPUSH
23591: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23595: LD_INT 173
23597: PPUSH
23598: LD_INT 54
23600: PPUSH
23601: LD_INT 2
23603: PPUSH
23604: CALL_OW 331
// InGameOff ;
23608: CALL_OW 9
// wait ( 3 ) ;
23612: LD_INT 3
23614: PPUSH
23615: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
23619: LD_EXP 58
23623: PPUSH
23624: LD_INT 2
23626: PPUSH
23627: CALL_OW 120
// wait ( 0 0$3 ) ;
23631: LD_INT 105
23633: PPUSH
23634: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
23638: LD_STRING M2b-out
23640: PPUSH
23641: CALL_OW 337
// hasMuchin := false ;
23645: LD_ADDR_EXP 30
23649: PUSH
23650: LD_INT 0
23652: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23653: LD_INT 4200
23655: PPUSH
23656: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23660: LD_INT 35
23662: PPUSH
23663: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23667: LD_EXP 58
23671: PPUSH
23672: CALL_OW 314
23676: NOT
23677: IFFALSE 23693
// ComMoveUnit ( ruDisturb , Heike ) ;
23679: LD_EXP 58
23683: PPUSH
23684: LD_EXP 38
23688: PPUSH
23689: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
23693: LD_EXP 38
23697: PPUSH
23698: LD_EXP 58
23702: PPUSH
23703: CALL_OW 296
23707: PUSH
23708: LD_INT 2
23710: LESS
23711: PUSH
23712: LD_EXP 58
23716: PPUSH
23717: CALL_OW 302
23721: AND
23722: IFFALSE 23660
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23724: LD_EXP 14
23728: PPUSH
23729: LD_INT 22
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 91
23741: PUSH
23742: LD_EXP 58
23746: PUSH
23747: LD_INT 8
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: LD_INT 25
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 25
23770: PUSH
23771: LD_INT 11
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 25
23780: PUSH
23781: LD_INT 32
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 25
23790: PUSH
23791: LD_INT 34
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: LIST
23809: PPUSH
23810: CALL_OW 72
23814: IFFALSE 23824
// isAlarm := true ;
23816: LD_ADDR_EXP 17
23820: PUSH
23821: LD_INT 1
23823: ST_TO_ADDR
// if isAlarm then
23824: LD_EXP 17
23828: IFFALSE 23832
// exit ;
23830: GO 25462
// ComTurnUnit ( Heike , ruDisturb ) ;
23832: LD_EXP 38
23836: PPUSH
23837: LD_EXP 58
23841: PPUSH
23842: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
23846: LD_EXP 58
23850: PPUSH
23851: LD_EXP 38
23855: PPUSH
23856: CALL_OW 119
// wait ( 3 ) ;
23860: LD_INT 3
23862: PPUSH
23863: CALL_OW 67
// for i := 1 to 3 do
23867: LD_ADDR_VAR 0 1
23871: PUSH
23872: DOUBLE
23873: LD_INT 1
23875: DEC
23876: ST_TO_ADDR
23877: LD_INT 3
23879: PUSH
23880: FOR_TO
23881: IFFALSE 23898
// CreateCratesArea ( 5 , cratesArea , false ) ;
23883: LD_INT 5
23885: PPUSH
23886: LD_INT 58
23888: PPUSH
23889: LD_INT 0
23891: PPUSH
23892: CALL_OW 55
23896: GO 23880
23898: POP
23899: POP
// uc_side := 3 ;
23900: LD_ADDR_OWVAR 20
23904: PUSH
23905: LD_INT 3
23907: ST_TO_ADDR
// uc_nation := nation_russian ;
23908: LD_ADDR_OWVAR 21
23912: PUSH
23913: LD_INT 3
23915: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
23916: LD_INT 21
23918: PPUSH
23919: LD_INT 3
23921: PPUSH
23922: LD_INT 1
23924: PPUSH
23925: LD_INT 51
23927: PPUSH
23928: LD_INT 100
23930: PPUSH
23931: CALL 31758 0 5
// veh := CreateVehicle ;
23935: LD_ADDR_VAR 0 2
23939: PUSH
23940: CALL_OW 45
23944: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
23945: LD_VAR 0 2
23949: PPUSH
23950: LD_INT 104
23952: PPUSH
23953: LD_INT 41
23955: PPUSH
23956: LD_INT 3
23958: PPUSH
23959: LD_INT 0
23961: PPUSH
23962: CALL 66332 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
23966: LD_VAR 0 2
23970: PPUSH
23971: LD_INT 1
23973: PPUSH
23974: LD_INT 100
23976: PPUSH
23977: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
23981: CALL_OW 44
23985: PPUSH
23986: LD_VAR 0 2
23990: PPUSH
23991: CALL_OW 52
// DialogueOn ;
23995: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23999: LD_EXP 58
24003: PPUSH
24004: LD_STRING DMcn-Interrupt-1
24006: PPUSH
24007: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24011: LD_EXP 58
24015: PPUSH
24016: LD_STRING DMcn-Interrupt-2
24018: PPUSH
24019: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
24023: LD_EXP 58
24027: PPUSH
24028: LD_STRING DMcn-Interrupt-c-3
24030: PPUSH
24031: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
24035: LD_INT 101
24037: PPUSH
24038: LD_INT 38
24040: PPUSH
24041: LD_INT 2
24043: PPUSH
24044: LD_INT 10
24046: NEG
24047: PPUSH
24048: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
24052: LD_INT 101
24054: PPUSH
24055: LD_INT 38
24057: PPUSH
24058: CALL_OW 84
// wait ( 0 0$2 ) ;
24062: LD_INT 70
24064: PPUSH
24065: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
24069: LD_INT 101
24071: PPUSH
24072: LD_INT 38
24074: PPUSH
24075: LD_INT 2
24077: PPUSH
24078: CALL_OW 331
// RemoveUnit ( veh ) ;
24082: LD_VAR 0 2
24086: PPUSH
24087: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
24091: LD_EXP 58
24095: PPUSH
24096: LD_STRING DMcn-Interrupt-c-4
24098: PPUSH
24099: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
24103: LD_EXP 38
24107: PPUSH
24108: LD_STRING DH-Interrupt-c-5
24110: PPUSH
24111: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
24115: LD_EXP 58
24119: PPUSH
24120: LD_STRING DMcn-Interrupt-c-6
24122: PPUSH
24123: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
24127: LD_EXP 38
24131: PPUSH
24132: LD_STRING DH-Interrupt-c-7
24134: PPUSH
24135: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
24139: LD_EXP 58
24143: PPUSH
24144: LD_STRING DMcn-Interrupt-c-8
24146: PPUSH
24147: CALL_OW 88
// DialogueOff ;
24151: CALL_OW 7
// hasMuchin := true ;
24155: LD_ADDR_EXP 30
24159: PUSH
24160: LD_INT 1
24162: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24163: LD_STRING MuchinInfo
24165: PPUSH
24166: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
24170: LD_STRING M2c
24172: PPUSH
24173: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
24177: LD_INT 35
24179: PPUSH
24180: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24184: LD_EXP 58
24188: PPUSH
24189: LD_EXP 38
24193: PPUSH
24194: CALL_OW 296
24198: PUSH
24199: LD_INT 6
24201: GREATER
24202: IFFALSE 24218
// ComMoveUnit ( ruDisturb , Heike ) ;
24204: LD_EXP 58
24208: PPUSH
24209: LD_EXP 38
24213: PPUSH
24214: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24218: LD_EXP 14
24222: PPUSH
24223: LD_INT 22
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 91
24235: PUSH
24236: LD_EXP 58
24240: PUSH
24241: LD_INT 8
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 2
24251: PUSH
24252: LD_INT 25
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 25
24264: PUSH
24265: LD_INT 11
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 25
24274: PUSH
24275: LD_INT 32
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 25
24284: PUSH
24285: LD_INT 34
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: PPUSH
24304: CALL_OW 72
24308: IFFALSE 24320
// begin isAlarm := true ;
24310: LD_ADDR_EXP 17
24314: PUSH
24315: LD_INT 1
24317: ST_TO_ADDR
// exit ;
24318: GO 25462
// end ; until UnitFilter ( heikeSquad , [ f_dist , ruOutpost0 , 6 ] ) and GetDistUnits ( Heike , ruOutpost0 ) < 6 ;
24320: LD_EXP 14
24324: PPUSH
24325: LD_INT 91
24327: PUSH
24328: LD_INT 6
24330: PUSH
24331: LD_INT 6
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: PPUSH
24339: CALL_OW 72
24343: PUSH
24344: LD_EXP 38
24348: PPUSH
24349: LD_INT 6
24351: PPUSH
24352: CALL_OW 296
24356: PUSH
24357: LD_INT 6
24359: LESS
24360: AND
24361: IFFALSE 24177
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
24363: LD_ADDR_VAR 0 3
24367: PUSH
24368: LD_EXP 14
24372: PUSH
24373: LD_EXP 38
24377: UNION
24378: PPUSH
24379: LD_INT 25
24381: PUSH
24382: LD_INT 33
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 91
24391: PUSH
24392: LD_INT 6
24394: PUSH
24395: LD_INT 12
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PPUSH
24407: CALL_OW 72
24411: ST_TO_ADDR
// for i in tmp do
24412: LD_ADDR_VAR 0 1
24416: PUSH
24417: LD_VAR 0 3
24421: PUSH
24422: FOR_IN
24423: IFFALSE 24454
// begin SetSide ( i , 3 ) ;
24425: LD_VAR 0 1
24429: PPUSH
24430: LD_INT 3
24432: PPUSH
24433: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
24437: LD_VAR 0 1
24441: PPUSH
24442: LD_INT 101
24444: PPUSH
24445: LD_INT 38
24447: PPUSH
24448: CALL_OW 111
// end ;
24452: GO 24422
24454: POP
24455: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
24456: LD_EXP 58
24460: PPUSH
24461: LD_INT 104
24463: PPUSH
24464: LD_INT 37
24466: PPUSH
24467: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
24471: LD_EXP 58
24475: PPUSH
24476: LD_EXP 38
24480: PPUSH
24481: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
24485: LD_INT 35
24487: PPUSH
24488: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
24492: LD_ADDR_VAR 0 4
24496: PUSH
24497: LD_INT 58
24499: PPUSH
24500: CALL_OW 435
24504: ST_TO_ADDR
// for i in tmp do
24505: LD_ADDR_VAR 0 1
24509: PUSH
24510: LD_VAR 0 3
24514: PUSH
24515: FOR_IN
24516: IFFALSE 24559
// if not HasTask ( i ) then
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 314
24527: NOT
24528: IFFALSE 24557
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
24530: LD_VAR 0 1
24534: PPUSH
24535: LD_VAR 0 4
24539: PUSH
24540: LD_INT 1
24542: ARRAY
24543: PPUSH
24544: LD_VAR 0 4
24548: PUSH
24549: LD_INT 2
24551: ARRAY
24552: PPUSH
24553: CALL_OW 117
24557: GO 24515
24559: POP
24560: POP
// until not cr ;
24561: LD_VAR 0 4
24565: NOT
24566: IFFALSE 24485
// wait ( 0 0$2 ) ;
24568: LD_INT 70
24570: PPUSH
24571: CALL_OW 67
// for i in tmp do
24575: LD_ADDR_VAR 0 1
24579: PUSH
24580: LD_VAR 0 3
24584: PUSH
24585: FOR_IN
24586: IFFALSE 24602
// SetSide ( i , 2 ) ;
24588: LD_VAR 0 1
24592: PPUSH
24593: LD_INT 2
24595: PPUSH
24596: CALL_OW 235
24600: GO 24585
24602: POP
24603: POP
// if Kaia in tmp then
24604: LD_EXP 43
24608: PUSH
24609: LD_VAR 0 3
24613: IN
24614: IFFALSE 24884
// begin InGameOn ;
24616: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
24620: LD_EXP 43
24624: PPUSH
24625: LD_EXP 58
24629: PPUSH
24630: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
24634: LD_EXP 58
24638: PPUSH
24639: LD_EXP 43
24643: PPUSH
24644: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
24648: LD_EXP 43
24652: PPUSH
24653: LD_EXP 58
24657: PPUSH
24658: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
24662: LD_EXP 43
24666: PPUSH
24667: LD_STRING DK-Assassin-1
24669: PPUSH
24670: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
24674: LD_EXP 58
24678: PPUSH
24679: LD_STRING DMcn-Assassin-2
24681: PPUSH
24682: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
24686: LD_EXP 43
24690: PPUSH
24691: LD_STRING DK-Assassin-3
24693: PPUSH
24694: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
24698: LD_EXP 58
24702: PPUSH
24703: LD_STRING DMcn-Assassin-4
24705: PPUSH
24706: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
24710: LD_EXP 43
24714: PPUSH
24715: LD_STRING DK-Assassin-5
24717: PPUSH
24718: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
24722: LD_EXP 58
24726: PPUSH
24727: LD_STRING DMcn-Assassin-6
24729: PPUSH
24730: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
24734: LD_EXP 43
24738: PUSH
24739: LD_EXP 58
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PPUSH
24748: LD_INT 6
24750: PPUSH
24751: CALL_OW 120
// wait ( 0 0$5 ) ;
24755: LD_INT 175
24757: PPUSH
24758: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
24762: LD_EXP 43
24766: PPUSH
24767: LD_STRING DK-Assassin-7
24769: PPUSH
24770: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
24774: LD_EXP 58
24778: PPUSH
24779: LD_STRING DMcn-Assassin-8
24781: PPUSH
24782: CALL_OW 88
// wait ( 0 0$0.3 ) ;
24786: LD_INT 10
24788: PPUSH
24789: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
24793: LD_EXP 43
24797: PPUSH
24798: LD_STRING DK-Assassin-9
24800: PPUSH
24801: CALL_OW 88
// wait ( 0 0$2 ) ;
24805: LD_INT 70
24807: PPUSH
24808: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
24812: LD_EXP 43
24816: PPUSH
24817: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
24821: LD_EXP 58
24825: PPUSH
24826: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
24830: LD_EXP 43
24834: PPUSH
24835: LD_EXP 38
24839: PPUSH
24840: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
24844: LD_EXP 43
24848: PPUSH
24849: LD_STRING DK-Assasin-10
24851: PPUSH
24852: CALL_OW 88
// InGameOff ;
24856: CALL_OW 9
// ChangeMissionObjectives ( M2c-out ) ;
24860: LD_STRING M2c-out
24862: PPUSH
24863: CALL_OW 337
// wait ( 0 0$3 ) ;
24867: LD_INT 105
24869: PPUSH
24870: CALL_OW 67
// hasMuchin := false ;
24874: LD_ADDR_EXP 30
24878: PUSH
24879: LD_INT 0
24881: ST_TO_ADDR
// exit ;
24882: GO 25462
// end ; ChangeMissionObjectives ( M2c-out ) ;
24884: LD_STRING M2c-out
24886: PPUSH
24887: CALL_OW 337
// InGameOn ;
24891: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
24895: LD_EXP 58
24899: PPUSH
24900: LD_STRING DMcn-Fail-1
24902: PPUSH
24903: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
24907: LD_VAR 0 3
24911: PPUSH
24912: LD_INT 114
24914: PPUSH
24915: LD_INT 17
24917: PPUSH
24918: CALL_OW 111
// wait ( 0 0$1 ) ;
24922: LD_INT 35
24924: PPUSH
24925: CALL_OW 67
// async ;
24929: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
24930: LD_EXP 58
24934: PPUSH
24935: LD_EXP 38
24939: PPUSH
24940: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
24944: LD_EXP 58
24948: PPUSH
24949: LD_STRING DMcn-Fail-2
24951: PPUSH
24952: CALL_OW 88
// ComStop ( Heike ) ;
24956: LD_EXP 38
24960: PPUSH
24961: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
24965: LD_EXP 38
24969: PPUSH
24970: LD_EXP 58
24974: PPUSH
24975: CALL_OW 179
// sync ;
24979: SYNC
// Say ( Heike , DH-Fail-3 ) ;
24980: LD_EXP 38
24984: PPUSH
24985: LD_STRING DH-Fail-3
24987: PPUSH
24988: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
24992: LD_EXP 58
24996: PPUSH
24997: LD_STRING DMcn-Fail-4
24999: PPUSH
25000: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
25004: LD_EXP 38
25008: PUSH
25009: LD_EXP 58
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PPUSH
25018: LD_INT 41
25020: PPUSH
25021: LD_INT 19
25023: PPUSH
25024: CALL_OW 111
// wait ( 0 0$2 ) ;
25028: LD_INT 70
25030: PPUSH
25031: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
25035: LD_EXP 58
25039: PPUSH
25040: LD_INT 40
25042: PPUSH
25043: LD_INT 19
25045: PPUSH
25046: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
25050: LD_EXP 38
25054: PPUSH
25055: LD_INT 43
25057: PPUSH
25058: LD_INT 21
25060: PPUSH
25061: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
25065: LD_EXP 58
25069: PPUSH
25070: LD_EXP 38
25074: PPUSH
25075: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
25079: LD_EXP 38
25083: PPUSH
25084: LD_EXP 58
25088: PPUSH
25089: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
25093: LD_INT 3
25095: PPUSH
25096: CALL_OW 427
// wait ( 0 0$2 ) ;
25100: LD_INT 70
25102: PPUSH
25103: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
25107: LD_EXP 58
25111: PPUSH
25112: LD_STRING DMcn-Fail-5
25114: PPUSH
25115: CALL_OW 88
// wait ( 0 0$2 ) ;
25119: LD_INT 70
25121: PPUSH
25122: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
25126: LD_EXP 58
25130: PPUSH
25131: LD_STRING DMcn-Fail-6
25133: PPUSH
25134: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
25138: LD_INT 35
25140: PPUSH
25141: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
25145: LD_EXP 38
25149: PPUSH
25150: LD_INT 43
25152: PPUSH
25153: LD_INT 21
25155: PPUSH
25156: CALL_OW 307
25160: IFFALSE 25138
// case Query ( MuchinQuestion ) of 1 :
25162: LD_STRING MuchinQuestion
25164: PPUSH
25165: CALL_OW 97
25169: PUSH
25170: LD_INT 1
25172: DOUBLE
25173: EQUAL
25174: IFTRUE 25178
25176: GO 25278
25178: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
25179: LD_EXP 58
25183: PPUSH
25184: LD_STRING DMcn-Fail-7
25186: PPUSH
25187: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
25191: LD_EXP 38
25195: PPUSH
25196: LD_STRING DH-Fail-8
25198: PPUSH
25199: CALL_OW 88
// wait ( 0 0$0.3 ) ;
25203: LD_INT 10
25205: PPUSH
25206: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
25210: LD_EXP 38
25214: PPUSH
25215: LD_STRING DH-Fail-9
25217: PPUSH
25218: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
25222: LD_EXP 38
25226: PPUSH
25227: LD_STRING DH-Fail-10
25229: PPUSH
25230: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
25234: LD_EXP 58
25238: PPUSH
25239: LD_STRING DMcn-Fail-11
25241: PPUSH
25242: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
25246: LD_EXP 58
25250: PPUSH
25251: LD_EXP 38
25255: PPUSH
25256: CALL_OW 115
// wait ( 0 0$2 ) ;
25260: LD_INT 70
25262: PPUSH
25263: CALL_OW 67
// KillUnit ( Heike ) ;
25267: LD_EXP 38
25271: PPUSH
25272: CALL_OW 66
// end ; 2 :
25276: GO 25458
25278: LD_INT 2
25280: DOUBLE
25281: EQUAL
25282: IFTRUE 25286
25284: GO 25457
25286: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
25287: LD_EXP 38
25291: PPUSH
25292: LD_STRING DH-Fail-a-8
25294: PPUSH
25295: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
25299: LD_EXP 38
25303: PPUSH
25304: LD_STRING DH-Fail-a-9
25306: PPUSH
25307: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
25311: LD_EXP 58
25315: PPUSH
25316: LD_STRING DH-Fail-10
25318: PPUSH
25319: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
25323: LD_EXP 38
25327: PPUSH
25328: LD_STRING DH-Fail-a-11
25330: PPUSH
25331: CALL_OW 88
// async ;
25335: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
25336: LD_EXP 58
25340: PPUSH
25341: LD_EXP 38
25345: PPUSH
25346: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
25350: LD_EXP 58
25354: PPUSH
25355: LD_EXP 38
25359: PPUSH
25360: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
25364: LD_EXP 58
25368: PPUSH
25369: LD_STRING DH-Fail-12
25371: PPUSH
25372: CALL_OW 88
// sync ;
25376: SYNC
// wait ( 0 0$1 ) ;
25377: LD_INT 35
25379: PPUSH
25380: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
25384: LD_EXP 38
25388: PPUSH
25389: LD_STRING DH-Fail-a-13
25391: PPUSH
25392: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
25396: LD_EXP 58
25400: PPUSH
25401: LD_INT 100
25403: PPUSH
25404: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
25408: LD_EXP 58
25412: PPUSH
25413: LD_STRING DMcn-Fail-a-14
25415: PPUSH
25416: CALL_OW 91
// KillUnit ( ruDisturb ) ;
25420: LD_EXP 58
25424: PPUSH
25425: CALL_OW 66
// wait ( 0 0$1 ) ;
25429: LD_INT 35
25431: PPUSH
25432: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
25436: LD_EXP 38
25440: PPUSH
25441: LD_STRING DH-Fail-a-15
25443: PPUSH
25444: CALL_OW 88
// YouLost ( FailMuchin ) ;
25448: LD_STRING FailMuchin
25450: PPUSH
25451: CALL_OW 104
// end ; end ;
25455: GO 25458
25457: POP
// InGameOff ;
25458: CALL_OW 9
// end ; end_of_file
25462: PPOPN 4
25464: END
// every 0 0$1 marked gameStartEvent do
25465: GO 25467
25467: DISABLE
// begin enable ;
25468: ENABLE
// if not contactWithAmerican then
25469: LD_EXP 25
25473: NOT
25474: IFFALSE 25519
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
25476: LD_ADDR_OWVAR 47
25480: PUSH
25481: LD_STRING #X108-1
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_INT 5
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 21
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 69
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: ST_TO_ADDR
25517: GO 25599
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , #X108-2 , UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ] ;
25519: LD_ADDR_OWVAR 47
25523: PUSH
25524: LD_STRING #X108-1
25526: PUSH
25527: LD_INT 22
25529: PUSH
25530: LD_INT 5
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 21
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PPUSH
25551: CALL_OW 69
25555: PUSH
25556: LD_STRING #X108-2
25558: PUSH
25559: LD_EXP 50
25563: PPUSH
25564: LD_INT 22
25566: PUSH
25567: LD_INT 4
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 21
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PPUSH
25588: CALL_OW 72
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: ST_TO_ADDR
// end ; end_of_file
25599: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
25600: LD_EXP 38
25604: PPUSH
25605: LD_INT 59
25607: PPUSH
25608: CALL_OW 308
25612: IFFALSE 25734
25614: GO 25616
25616: DISABLE
// begin Query ( FinalInfo ) ;
25617: LD_STRING FinalInfo
25619: PPUSH
25620: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
25624: LD_INT 59
25626: PPUSH
25627: LD_INT 1
25629: PPUSH
25630: CALL_OW 424
// end_the_mission_allowed := true ;
25634: LD_ADDR_OWVAR 57
25638: PUSH
25639: LD_INT 1
25641: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25642: LD_INT 35
25644: PPUSH
25645: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
25649: LD_INT 22
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 21
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 95
25671: PUSH
25672: LD_INT 59
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: PPUSH
25684: CALL_OW 69
25688: PPUSH
25689: CALL 28845 0 1
25693: PUSH
25694: LD_INT 22
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 21
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PPUSH
25718: CALL_OW 69
25722: PPUSH
25723: CALL 28845 0 1
25727: EQUAL
25728: IFFALSE 25642
// EndMission ;
25730: CALL 25742 0 0
// end ;
25734: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
25735: CALL 25742 0 0
// end ;
25739: PPOPN 1
25741: END
// function EndMission ; begin
25742: LD_INT 0
25744: PPUSH
// if not IsInArea ( Heike , finalArea ) then
25745: LD_EXP 38
25749: PPUSH
25750: LD_INT 59
25752: PPUSH
25753: CALL_OW 308
25757: NOT
25758: IFFALSE 25769
// begin Query ( HeikeOutOfArea ) ;
25760: LD_STRING HeikeOutOfArea
25762: PPUSH
25763: CALL_OW 97
// exit ;
25767: GO 26552
// end ; if not IsOk ( Heike ) then
25769: LD_EXP 38
25773: PPUSH
25774: CALL_OW 302
25778: NOT
25779: IFFALSE 25790
// begin Query ( HeikeIsHurt ) ;
25781: LD_STRING HeikeIsHurt
25783: PPUSH
25784: CALL_OW 97
// exit ;
25788: GO 26552
// end ; if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
25790: LD_INT 22
25792: PUSH
25793: LD_INT 5
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 21
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 69
25818: PUSH
25819: LD_INT 0
25821: EQUAL
25822: PUSH
25823: LD_EXP 32
25827: PUSH
25828: LD_INT 0
25830: EQUAL
25831: AND
25832: IFFALSE 25846
// AddMedal ( med1 , 1 ) else
25834: LD_STRING med1
25836: PPUSH
25837: LD_INT 1
25839: PPUSH
25840: CALL_OW 101
25844: GO 25857
// AddMedal ( med1 , - 1 ) ;
25846: LD_STRING med1
25848: PPUSH
25849: LD_INT 1
25851: NEG
25852: PPUSH
25853: CALL_OW 101
// if explosivePlantedList >= 3 then
25857: LD_EXP 29
25861: PUSH
25862: LD_INT 3
25864: GREATEREQUAL
25865: IFFALSE 25879
// AddMedal ( med2 , 1 ) else
25867: LD_STRING med2
25869: PPUSH
25870: LD_INT 1
25872: PPUSH
25873: CALL_OW 101
25877: GO 25913
// if explosivePlantedList < 3 then
25879: LD_EXP 29
25883: PUSH
25884: LD_INT 3
25886: LESS
25887: IFFALSE 25902
// AddMedal ( med2 , - 2 ) else
25889: LD_STRING med2
25891: PPUSH
25892: LD_INT 2
25894: NEG
25895: PPUSH
25896: CALL_OW 101
25900: GO 25913
// AddMedal ( med2 , - 1 ) ;
25902: LD_STRING med2
25904: PPUSH
25905: LD_INT 1
25907: NEG
25908: PPUSH
25909: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
25913: LD_INT 5
25915: PPUSH
25916: LD_INT 2
25918: PPUSH
25919: CALL_OW 321
25923: PUSH
25924: LD_INT 2
25926: EQUAL
25927: IFFALSE 25941
// AddMedal ( med3 , 1 ) else
25929: LD_STRING med3
25931: PPUSH
25932: LD_INT 1
25934: PPUSH
25935: CALL_OW 101
25939: GO 25952
// AddMedal ( med3 , - 1 ) ;
25941: LD_STRING med3
25943: PPUSH
25944: LD_INT 1
25946: NEG
25947: PPUSH
25948: CALL_OW 101
// GiveMedals ( MAIN ) ;
25952: LD_STRING MAIN
25954: PPUSH
25955: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
25959: LD_INT 22
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 23
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 21
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: PPUSH
25994: CALL_OW 69
25998: PPUSH
25999: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
26003: LD_EXP 52
26007: PUSH
26008: LD_EXP 52
26012: PPUSH
26013: CALL_OW 255
26017: PUSH
26018: LD_INT 2
26020: EQUAL
26021: AND
26022: IFFALSE 26036
// SaveCharacters ( Doug , 08_UsCommander ) ;
26024: LD_EXP 52
26028: PPUSH
26029: LD_STRING 08_UsCommander
26031: PPUSH
26032: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
26036: LD_EXP 51
26040: PUSH
26041: LD_EXP 51
26045: PPUSH
26046: CALL_OW 255
26050: PUSH
26051: LD_INT 2
26053: EQUAL
26054: AND
26055: IFFALSE 26069
// SaveCharacters ( Harris , 08_Harris ) ;
26057: LD_EXP 51
26061: PPUSH
26062: LD_STRING 08_Harris
26064: PPUSH
26065: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
26069: LD_INT 22
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 23
26081: PUSH
26082: LD_INT 1
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 21
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: PPUSH
26104: CALL_OW 69
26108: PUSH
26109: LD_EXP 52
26113: PUSH
26114: LD_EXP 51
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: DIFF
26123: PPUSH
26124: LD_STRING 08_Americans
26126: PPUSH
26127: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
26131: LD_EXP 38
26135: PPUSH
26136: CALL_OW 248
26140: PUSH
26141: LD_INT 3
26143: EQUAL
26144: IFFALSE 26174
// begin CopySkills ( Heike , HeikeTmp ) ;
26146: LD_EXP 38
26150: PPUSH
26151: LD_EXP 54
26155: PPUSH
26156: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
26160: LD_EXP 54
26164: PPUSH
26165: LD_STRING 08_Heike
26167: PPUSH
26168: CALL_OW 38
// end else
26172: GO 26186
// SaveCharacters ( Heike , 08_Heike ) ;
26174: LD_EXP 38
26178: PPUSH
26179: LD_STRING 08_Heike
26181: PPUSH
26182: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
26186: LD_EXP 48
26190: PUSH
26191: LD_EXP 48
26195: PPUSH
26196: CALL_OW 255
26200: PUSH
26201: LD_INT 2
26203: EQUAL
26204: AND
26205: IFFALSE 26219
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
26207: LD_EXP 48
26211: PPUSH
26212: LD_STRING 08_Aviradze
26214: PPUSH
26215: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
26219: LD_EXP 41
26223: PUSH
26224: LD_EXP 41
26228: PPUSH
26229: CALL_OW 255
26233: PUSH
26234: LD_INT 2
26236: EQUAL
26237: AND
26238: IFFALSE 26252
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
26240: LD_EXP 41
26244: PPUSH
26245: LD_STRING 08_Ibrahim
26247: PPUSH
26248: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
26252: LD_EXP 42
26256: PUSH
26257: LD_EXP 42
26261: PPUSH
26262: CALL_OW 255
26266: PUSH
26267: LD_INT 2
26269: EQUAL
26270: AND
26271: IFFALSE 26285
// SaveCharacters ( Kamil , 08_Kamil ) ;
26273: LD_EXP 42
26277: PPUSH
26278: LD_STRING 08_Kamil
26280: PPUSH
26281: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
26285: LD_EXP 44
26289: PUSH
26290: LD_EXP 44
26294: PPUSH
26295: CALL_OW 255
26299: PUSH
26300: LD_INT 2
26302: EQUAL
26303: AND
26304: IFFALSE 26318
// SaveCharacters ( Sophia , 08_Sophia ) ;
26306: LD_EXP 44
26310: PPUSH
26311: LD_STRING 08_Sophia
26313: PPUSH
26314: CALL_OW 38
// if Kaia and GetSide ( Aviradze ) = 2 then
26318: LD_EXP 43
26322: PUSH
26323: LD_EXP 48
26327: PPUSH
26328: CALL_OW 255
26332: PUSH
26333: LD_INT 2
26335: EQUAL
26336: AND
26337: IFFALSE 26351
// SaveCharacters ( Kaia , 08_Kaia ) ;
26339: LD_EXP 43
26343: PPUSH
26344: LD_STRING 08_Kaia
26346: PPUSH
26347: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
26351: LD_EXP 39
26355: PUSH
26356: LD_EXP 39
26360: PPUSH
26361: CALL_OW 255
26365: PUSH
26366: LD_INT 2
26368: EQUAL
26369: AND
26370: IFFALSE 26427
// if GetNation ( Givi ) = nation_russian then
26372: LD_EXP 39
26376: PPUSH
26377: CALL_OW 248
26381: PUSH
26382: LD_INT 3
26384: EQUAL
26385: IFFALSE 26415
// begin CopySkills ( Givi , GiviTmp ) ;
26387: LD_EXP 39
26391: PPUSH
26392: LD_EXP 55
26396: PPUSH
26397: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
26401: LD_EXP 55
26405: PPUSH
26406: LD_STRING 08_Givi
26408: PPUSH
26409: CALL_OW 38
// end else
26413: GO 26427
// SaveCharacters ( Givi , 08_Givi ) ;
26415: LD_EXP 39
26419: PPUSH
26420: LD_STRING 08_Givi
26422: PPUSH
26423: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
26427: LD_EXP 40
26431: PUSH
26432: LD_EXP 40
26436: PPUSH
26437: CALL_OW 255
26441: PUSH
26442: LD_INT 2
26444: EQUAL
26445: AND
26446: IFFALSE 26460
// SaveCharacters ( Mike , 08_Mike ) ;
26448: LD_EXP 40
26452: PPUSH
26453: LD_STRING 08_Mike
26455: PPUSH
26456: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
26460: LD_EXP 45
26464: PUSH
26465: LD_EXP 45
26469: PPUSH
26470: CALL_OW 255
26474: PUSH
26475: LD_INT 2
26477: EQUAL
26478: AND
26479: IFFALSE 26493
// SaveCharacters ( Markov , 08_Markov ) ;
26481: LD_EXP 45
26485: PPUSH
26486: LD_STRING 08_Markov
26488: PPUSH
26489: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
26493: LD_EXP 47
26497: PUSH
26498: LD_EXP 47
26502: PPUSH
26503: CALL_OW 255
26507: PUSH
26508: LD_INT 2
26510: EQUAL
26511: AND
26512: IFFALSE 26526
// SaveCharacters ( Kurt , 08_Kurt ) ;
26514: LD_EXP 47
26518: PPUSH
26519: LD_STRING 08_Kurt
26521: PPUSH
26522: CALL_OW 38
// if heikeSecondSquad then
26526: LD_EXP 49
26530: IFFALSE 26544
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
26532: LD_EXP 49
26536: PPUSH
26537: LD_STRING 08_others
26539: PPUSH
26540: CALL_OW 38
// YouWin ;
26544: CALL_OW 103
// DialogueOff ;
26548: CALL_OW 7
// end ; end_of_file
26552: LD_VAR 0 1
26556: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
26557: LD_EXP 5
26561: IFFALSE 26740
26563: GO 26565
26565: DISABLE
26566: LD_INT 0
26568: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
26569: LD_INT 35
26571: PPUSH
26572: LD_INT 2100
26574: PPUSH
26575: CALL_OW 12
26579: PPUSH
26580: CALL_OW 67
// StopOriginalMusic ;
26584: CALL 88246 0 0
// weatherBusy := true ;
26588: LD_ADDR_EXP 37
26592: PUSH
26593: LD_INT 1
26595: ST_TO_ADDR
// for i := 1 to 3 do
26596: LD_ADDR_VAR 0 1
26600: PUSH
26601: DOUBLE
26602: LD_INT 1
26604: DEC
26605: ST_TO_ADDR
26606: LD_INT 3
26608: PUSH
26609: FOR_TO
26610: IFFALSE 26644
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
26612: LD_INT 1
26614: PPUSH
26615: LD_INT 100
26617: PUSH
26618: LD_INT 100
26620: PUSH
26621: LD_VAR 0 1
26625: MUL
26626: PLUS
26627: PPUSH
26628: LD_INT 60
26630: PPUSH
26631: CALL_OW 550
// wait ( 0 0$2 ) ;
26635: LD_INT 70
26637: PPUSH
26638: CALL_OW 67
// end ;
26642: GO 26609
26644: POP
26645: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
26646: LD_STRING ArStormRain.wav
26648: PPUSH
26649: LD_STRING OW_CUSTOM_COMMAND(103);
26651: PPUSH
26652: CALL 88276 0 2
// wait ( 0 0$3 ) ;
26656: LD_INT 105
26658: PPUSH
26659: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
26663: LD_INT 1
26665: PPUSH
26666: LD_INT 900
26668: PPUSH
26669: LD_INT 120
26671: PPUSH
26672: CALL_OW 550
// wait ( 0 0$10 ) ;
26676: LD_INT 350
26678: PPUSH
26679: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
26683: LD_INT 1
26685: PPUSH
26686: LD_INT 1500
26688: PPUSH
26689: LD_INT 300
26691: PPUSH
26692: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
26696: LD_INT 35
26698: PPUSH
26699: CALL_OW 67
// until not weatherBusy ;
26703: LD_EXP 37
26707: NOT
26708: IFFALSE 26696
// SetWeather ( 0 , 0 , 0 ) ;
26710: LD_INT 0
26712: PPUSH
26713: LD_INT 0
26715: PPUSH
26716: LD_INT 0
26718: PPUSH
26719: CALL_OW 550
// wait ( 5 5$00 ) ;
26723: LD_INT 10500
26725: PPUSH
26726: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
26730: LD_STRING ArStormNormal.wav
26732: PPUSH
26733: LD_STRING OW_CUSTOM_COMMAND(103);
26735: PPUSH
26736: CALL 88276 0 2
// end ; end_of_file
26740: PPOPN 1
26742: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26743: LD_INT 0
26745: PPUSH
26746: PPUSH
// if exist_mode then
26747: LD_VAR 0 2
26751: IFFALSE 26776
// unit := CreateCharacter ( prefix & ident ) else
26753: LD_ADDR_VAR 0 5
26757: PUSH
26758: LD_VAR 0 3
26762: PUSH
26763: LD_VAR 0 1
26767: STR
26768: PPUSH
26769: CALL_OW 34
26773: ST_TO_ADDR
26774: GO 26791
// unit := NewCharacter ( ident ) ;
26776: LD_ADDR_VAR 0 5
26780: PUSH
26781: LD_VAR 0 1
26785: PPUSH
26786: CALL_OW 25
26790: ST_TO_ADDR
// result := unit ;
26791: LD_ADDR_VAR 0 4
26795: PUSH
26796: LD_VAR 0 5
26800: ST_TO_ADDR
// end ;
26801: LD_VAR 0 4
26805: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
// if not side or not nation then
26810: LD_VAR 0 1
26814: NOT
26815: PUSH
26816: LD_VAR 0 2
26820: NOT
26821: OR
26822: IFFALSE 26826
// exit ;
26824: GO 27594
// case nation of nation_american :
26826: LD_VAR 0 2
26830: PUSH
26831: LD_INT 1
26833: DOUBLE
26834: EQUAL
26835: IFTRUE 26839
26837: GO 27053
26839: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26840: LD_ADDR_VAR 0 4
26844: PUSH
26845: LD_INT 35
26847: PUSH
26848: LD_INT 45
26850: PUSH
26851: LD_INT 46
26853: PUSH
26854: LD_INT 47
26856: PUSH
26857: LD_INT 82
26859: PUSH
26860: LD_INT 83
26862: PUSH
26863: LD_INT 84
26865: PUSH
26866: LD_INT 85
26868: PUSH
26869: LD_INT 86
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: LD_INT 6
26880: PUSH
26881: LD_INT 15
26883: PUSH
26884: LD_INT 16
26886: PUSH
26887: LD_INT 7
26889: PUSH
26890: LD_INT 12
26892: PUSH
26893: LD_INT 13
26895: PUSH
26896: LD_INT 10
26898: PUSH
26899: LD_INT 14
26901: PUSH
26902: LD_INT 20
26904: PUSH
26905: LD_INT 21
26907: PUSH
26908: LD_INT 22
26910: PUSH
26911: LD_INT 25
26913: PUSH
26914: LD_INT 32
26916: PUSH
26917: LD_INT 27
26919: PUSH
26920: LD_INT 36
26922: PUSH
26923: LD_INT 69
26925: PUSH
26926: LD_INT 39
26928: PUSH
26929: LD_INT 34
26931: PUSH
26932: LD_INT 40
26934: PUSH
26935: LD_INT 48
26937: PUSH
26938: LD_INT 49
26940: PUSH
26941: LD_INT 50
26943: PUSH
26944: LD_INT 51
26946: PUSH
26947: LD_INT 52
26949: PUSH
26950: LD_INT 53
26952: PUSH
26953: LD_INT 54
26955: PUSH
26956: LD_INT 55
26958: PUSH
26959: LD_INT 56
26961: PUSH
26962: LD_INT 57
26964: PUSH
26965: LD_INT 58
26967: PUSH
26968: LD_INT 59
26970: PUSH
26971: LD_INT 60
26973: PUSH
26974: LD_INT 61
26976: PUSH
26977: LD_INT 62
26979: PUSH
26980: LD_INT 80
26982: PUSH
26983: LD_INT 82
26985: PUSH
26986: LD_INT 83
26988: PUSH
26989: LD_INT 84
26991: PUSH
26992: LD_INT 85
26994: PUSH
26995: LD_INT 86
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: ST_TO_ADDR
27051: GO 27518
27053: LD_INT 2
27055: DOUBLE
27056: EQUAL
27057: IFTRUE 27061
27059: GO 27287
27061: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27062: LD_ADDR_VAR 0 4
27066: PUSH
27067: LD_INT 35
27069: PUSH
27070: LD_INT 45
27072: PUSH
27073: LD_INT 46
27075: PUSH
27076: LD_INT 47
27078: PUSH
27079: LD_INT 82
27081: PUSH
27082: LD_INT 83
27084: PUSH
27085: LD_INT 84
27087: PUSH
27088: LD_INT 85
27090: PUSH
27091: LD_INT 87
27093: PUSH
27094: LD_INT 70
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: LD_INT 11
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: LD_INT 4
27108: PUSH
27109: LD_INT 5
27111: PUSH
27112: LD_INT 6
27114: PUSH
27115: LD_INT 15
27117: PUSH
27118: LD_INT 18
27120: PUSH
27121: LD_INT 7
27123: PUSH
27124: LD_INT 17
27126: PUSH
27127: LD_INT 8
27129: PUSH
27130: LD_INT 20
27132: PUSH
27133: LD_INT 21
27135: PUSH
27136: LD_INT 22
27138: PUSH
27139: LD_INT 72
27141: PUSH
27142: LD_INT 26
27144: PUSH
27145: LD_INT 69
27147: PUSH
27148: LD_INT 39
27150: PUSH
27151: LD_INT 40
27153: PUSH
27154: LD_INT 41
27156: PUSH
27157: LD_INT 42
27159: PUSH
27160: LD_INT 43
27162: PUSH
27163: LD_INT 48
27165: PUSH
27166: LD_INT 49
27168: PUSH
27169: LD_INT 50
27171: PUSH
27172: LD_INT 51
27174: PUSH
27175: LD_INT 52
27177: PUSH
27178: LD_INT 53
27180: PUSH
27181: LD_INT 54
27183: PUSH
27184: LD_INT 55
27186: PUSH
27187: LD_INT 56
27189: PUSH
27190: LD_INT 60
27192: PUSH
27193: LD_INT 61
27195: PUSH
27196: LD_INT 62
27198: PUSH
27199: LD_INT 66
27201: PUSH
27202: LD_INT 67
27204: PUSH
27205: LD_INT 68
27207: PUSH
27208: LD_INT 81
27210: PUSH
27211: LD_INT 82
27213: PUSH
27214: LD_INT 83
27216: PUSH
27217: LD_INT 84
27219: PUSH
27220: LD_INT 85
27222: PUSH
27223: LD_INT 87
27225: PUSH
27226: LD_INT 88
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: ST_TO_ADDR
27285: GO 27518
27287: LD_INT 3
27289: DOUBLE
27290: EQUAL
27291: IFTRUE 27295
27293: GO 27517
27295: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27296: LD_ADDR_VAR 0 4
27300: PUSH
27301: LD_INT 46
27303: PUSH
27304: LD_INT 47
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: LD_INT 82
27315: PUSH
27316: LD_INT 83
27318: PUSH
27319: LD_INT 84
27321: PUSH
27322: LD_INT 85
27324: PUSH
27325: LD_INT 86
27327: PUSH
27328: LD_INT 11
27330: PUSH
27331: LD_INT 9
27333: PUSH
27334: LD_INT 20
27336: PUSH
27337: LD_INT 19
27339: PUSH
27340: LD_INT 21
27342: PUSH
27343: LD_INT 24
27345: PUSH
27346: LD_INT 22
27348: PUSH
27349: LD_INT 25
27351: PUSH
27352: LD_INT 28
27354: PUSH
27355: LD_INT 29
27357: PUSH
27358: LD_INT 30
27360: PUSH
27361: LD_INT 31
27363: PUSH
27364: LD_INT 37
27366: PUSH
27367: LD_INT 38
27369: PUSH
27370: LD_INT 32
27372: PUSH
27373: LD_INT 27
27375: PUSH
27376: LD_INT 33
27378: PUSH
27379: LD_INT 69
27381: PUSH
27382: LD_INT 39
27384: PUSH
27385: LD_INT 34
27387: PUSH
27388: LD_INT 40
27390: PUSH
27391: LD_INT 71
27393: PUSH
27394: LD_INT 23
27396: PUSH
27397: LD_INT 44
27399: PUSH
27400: LD_INT 48
27402: PUSH
27403: LD_INT 49
27405: PUSH
27406: LD_INT 50
27408: PUSH
27409: LD_INT 51
27411: PUSH
27412: LD_INT 52
27414: PUSH
27415: LD_INT 53
27417: PUSH
27418: LD_INT 54
27420: PUSH
27421: LD_INT 55
27423: PUSH
27424: LD_INT 56
27426: PUSH
27427: LD_INT 57
27429: PUSH
27430: LD_INT 58
27432: PUSH
27433: LD_INT 59
27435: PUSH
27436: LD_INT 63
27438: PUSH
27439: LD_INT 64
27441: PUSH
27442: LD_INT 65
27444: PUSH
27445: LD_INT 82
27447: PUSH
27448: LD_INT 83
27450: PUSH
27451: LD_INT 84
27453: PUSH
27454: LD_INT 85
27456: PUSH
27457: LD_INT 86
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: ST_TO_ADDR
27515: GO 27518
27517: POP
// if state > - 1 and state < 3 then
27518: LD_VAR 0 3
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: GREATER
27527: PUSH
27528: LD_VAR 0 3
27532: PUSH
27533: LD_INT 3
27535: LESS
27536: AND
27537: IFFALSE 27594
// for i in result do
27539: LD_ADDR_VAR 0 5
27543: PUSH
27544: LD_VAR 0 4
27548: PUSH
27549: FOR_IN
27550: IFFALSE 27592
// if GetTech ( i , side ) <> state then
27552: LD_VAR 0 5
27556: PPUSH
27557: LD_VAR 0 1
27561: PPUSH
27562: CALL_OW 321
27566: PUSH
27567: LD_VAR 0 3
27571: NONEQUAL
27572: IFFALSE 27590
// result := result diff i ;
27574: LD_ADDR_VAR 0 4
27578: PUSH
27579: LD_VAR 0 4
27583: PUSH
27584: LD_VAR 0 5
27588: DIFF
27589: ST_TO_ADDR
27590: GO 27549
27592: POP
27593: POP
// end ;
27594: LD_VAR 0 4
27598: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27599: LD_INT 0
27601: PPUSH
27602: PPUSH
27603: PPUSH
// result := true ;
27604: LD_ADDR_VAR 0 3
27608: PUSH
27609: LD_INT 1
27611: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27612: LD_ADDR_VAR 0 5
27616: PUSH
27617: LD_VAR 0 2
27621: PPUSH
27622: CALL_OW 480
27626: ST_TO_ADDR
// if not tmp then
27627: LD_VAR 0 5
27631: NOT
27632: IFFALSE 27636
// exit ;
27634: GO 27685
// for i in tmp do
27636: LD_ADDR_VAR 0 4
27640: PUSH
27641: LD_VAR 0 5
27645: PUSH
27646: FOR_IN
27647: IFFALSE 27683
// if GetTech ( i , side ) <> state_researched then
27649: LD_VAR 0 4
27653: PPUSH
27654: LD_VAR 0 1
27658: PPUSH
27659: CALL_OW 321
27663: PUSH
27664: LD_INT 2
27666: NONEQUAL
27667: IFFALSE 27681
// begin result := false ;
27669: LD_ADDR_VAR 0 3
27673: PUSH
27674: LD_INT 0
27676: ST_TO_ADDR
// exit ;
27677: POP
27678: POP
27679: GO 27685
// end ;
27681: GO 27646
27683: POP
27684: POP
// end ;
27685: LD_VAR 0 3
27689: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27690: LD_INT 0
27692: PPUSH
27693: PPUSH
27694: PPUSH
27695: PPUSH
27696: PPUSH
27697: PPUSH
27698: PPUSH
27699: PPUSH
27700: PPUSH
27701: PPUSH
27702: PPUSH
27703: PPUSH
27704: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27705: LD_VAR 0 1
27709: NOT
27710: PUSH
27711: LD_VAR 0 1
27715: PPUSH
27716: CALL_OW 257
27720: PUSH
27721: LD_INT 9
27723: NONEQUAL
27724: OR
27725: IFFALSE 27729
// exit ;
27727: GO 28302
// side := GetSide ( unit ) ;
27729: LD_ADDR_VAR 0 9
27733: PUSH
27734: LD_VAR 0 1
27738: PPUSH
27739: CALL_OW 255
27743: ST_TO_ADDR
// tech_space := tech_spacanom ;
27744: LD_ADDR_VAR 0 12
27748: PUSH
27749: LD_INT 29
27751: ST_TO_ADDR
// tech_time := tech_taurad ;
27752: LD_ADDR_VAR 0 13
27756: PUSH
27757: LD_INT 28
27759: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27760: LD_ADDR_VAR 0 11
27764: PUSH
27765: LD_VAR 0 1
27769: PPUSH
27770: CALL_OW 310
27774: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27775: LD_VAR 0 11
27779: PPUSH
27780: CALL_OW 247
27784: PUSH
27785: LD_INT 2
27787: EQUAL
27788: IFFALSE 27792
// exit ;
27790: GO 28302
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27792: LD_ADDR_VAR 0 8
27796: PUSH
27797: LD_INT 81
27799: PUSH
27800: LD_VAR 0 9
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 3
27811: PUSH
27812: LD_INT 21
27814: PUSH
27815: LD_INT 3
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PPUSH
27830: CALL_OW 69
27834: ST_TO_ADDR
// if not tmp then
27835: LD_VAR 0 8
27839: NOT
27840: IFFALSE 27844
// exit ;
27842: GO 28302
// if in_unit then
27844: LD_VAR 0 11
27848: IFFALSE 27872
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27850: LD_ADDR_VAR 0 10
27854: PUSH
27855: LD_VAR 0 8
27859: PPUSH
27860: LD_VAR 0 11
27864: PPUSH
27865: CALL_OW 74
27869: ST_TO_ADDR
27870: GO 27892
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27872: LD_ADDR_VAR 0 10
27876: PUSH
27877: LD_VAR 0 8
27881: PPUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: CALL_OW 74
27891: ST_TO_ADDR
// if not enemy then
27892: LD_VAR 0 10
27896: NOT
27897: IFFALSE 27901
// exit ;
27899: GO 28302
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27901: LD_VAR 0 11
27905: PUSH
27906: LD_VAR 0 11
27910: PPUSH
27911: LD_VAR 0 10
27915: PPUSH
27916: CALL_OW 296
27920: PUSH
27921: LD_INT 13
27923: GREATER
27924: AND
27925: PUSH
27926: LD_VAR 0 1
27930: PPUSH
27931: LD_VAR 0 10
27935: PPUSH
27936: CALL_OW 296
27940: PUSH
27941: LD_INT 12
27943: GREATER
27944: OR
27945: IFFALSE 27949
// exit ;
27947: GO 28302
// missile := [ 1 ] ;
27949: LD_ADDR_VAR 0 14
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: EMPTY
27958: LIST
27959: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27960: LD_VAR 0 9
27964: PPUSH
27965: LD_VAR 0 12
27969: PPUSH
27970: CALL_OW 325
27974: IFFALSE 28003
// missile := Replace ( missile , missile + 1 , 2 ) ;
27976: LD_ADDR_VAR 0 14
27980: PUSH
27981: LD_VAR 0 14
27985: PPUSH
27986: LD_VAR 0 14
27990: PUSH
27991: LD_INT 1
27993: PLUS
27994: PPUSH
27995: LD_INT 2
27997: PPUSH
27998: CALL_OW 1
28002: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28003: LD_VAR 0 9
28007: PPUSH
28008: LD_VAR 0 13
28012: PPUSH
28013: CALL_OW 325
28017: PUSH
28018: LD_VAR 0 10
28022: PPUSH
28023: CALL_OW 255
28027: PPUSH
28028: LD_VAR 0 13
28032: PPUSH
28033: CALL_OW 325
28037: NOT
28038: AND
28039: IFFALSE 28068
// missile := Replace ( missile , missile + 1 , 3 ) ;
28041: LD_ADDR_VAR 0 14
28045: PUSH
28046: LD_VAR 0 14
28050: PPUSH
28051: LD_VAR 0 14
28055: PUSH
28056: LD_INT 1
28058: PLUS
28059: PPUSH
28060: LD_INT 3
28062: PPUSH
28063: CALL_OW 1
28067: ST_TO_ADDR
// if missile < 2 then
28068: LD_VAR 0 14
28072: PUSH
28073: LD_INT 2
28075: LESS
28076: IFFALSE 28080
// exit ;
28078: GO 28302
// x := GetX ( enemy ) ;
28080: LD_ADDR_VAR 0 4
28084: PUSH
28085: LD_VAR 0 10
28089: PPUSH
28090: CALL_OW 250
28094: ST_TO_ADDR
// y := GetY ( enemy ) ;
28095: LD_ADDR_VAR 0 5
28099: PUSH
28100: LD_VAR 0 10
28104: PPUSH
28105: CALL_OW 251
28109: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28110: LD_ADDR_VAR 0 6
28114: PUSH
28115: LD_VAR 0 4
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PPUSH
28124: LD_INT 1
28126: PPUSH
28127: CALL_OW 12
28131: PLUS
28132: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28133: LD_ADDR_VAR 0 7
28137: PUSH
28138: LD_VAR 0 5
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PPUSH
28147: LD_INT 1
28149: PPUSH
28150: CALL_OW 12
28154: PLUS
28155: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28156: LD_VAR 0 6
28160: PPUSH
28161: LD_VAR 0 7
28165: PPUSH
28166: CALL_OW 488
28170: NOT
28171: IFFALSE 28193
// begin _x := x ;
28173: LD_ADDR_VAR 0 6
28177: PUSH
28178: LD_VAR 0 4
28182: ST_TO_ADDR
// _y := y ;
28183: LD_ADDR_VAR 0 7
28187: PUSH
28188: LD_VAR 0 5
28192: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_INT 1
28200: PPUSH
28201: LD_VAR 0 14
28205: PPUSH
28206: CALL_OW 12
28210: ST_TO_ADDR
// case i of 1 :
28211: LD_VAR 0 3
28215: PUSH
28216: LD_INT 1
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28241
28224: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28225: LD_VAR 0 1
28229: PPUSH
28230: LD_VAR 0 10
28234: PPUSH
28235: CALL_OW 115
28239: GO 28302
28241: LD_INT 2
28243: DOUBLE
28244: EQUAL
28245: IFTRUE 28249
28247: GO 28271
28249: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28250: LD_VAR 0 1
28254: PPUSH
28255: LD_VAR 0 6
28259: PPUSH
28260: LD_VAR 0 7
28264: PPUSH
28265: CALL_OW 153
28269: GO 28302
28271: LD_INT 3
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28301
28279: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28280: LD_VAR 0 1
28284: PPUSH
28285: LD_VAR 0 6
28289: PPUSH
28290: LD_VAR 0 7
28294: PPUSH
28295: CALL_OW 154
28299: GO 28302
28301: POP
// end ;
28302: LD_VAR 0 2
28306: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
28314: PPUSH
// if not unit or not building then
28315: LD_VAR 0 1
28319: NOT
28320: PUSH
28321: LD_VAR 0 2
28325: NOT
28326: OR
28327: IFFALSE 28331
// exit ;
28329: GO 28489
// x := GetX ( building ) ;
28331: LD_ADDR_VAR 0 5
28335: PUSH
28336: LD_VAR 0 2
28340: PPUSH
28341: CALL_OW 250
28345: ST_TO_ADDR
// y := GetY ( building ) ;
28346: LD_ADDR_VAR 0 6
28350: PUSH
28351: LD_VAR 0 2
28355: PPUSH
28356: CALL_OW 251
28360: ST_TO_ADDR
// for i = 0 to 5 do
28361: LD_ADDR_VAR 0 4
28365: PUSH
28366: DOUBLE
28367: LD_INT 0
28369: DEC
28370: ST_TO_ADDR
28371: LD_INT 5
28373: PUSH
28374: FOR_TO
28375: IFFALSE 28487
// begin _x := ShiftX ( x , i , 3 ) ;
28377: LD_ADDR_VAR 0 7
28381: PUSH
28382: LD_VAR 0 5
28386: PPUSH
28387: LD_VAR 0 4
28391: PPUSH
28392: LD_INT 3
28394: PPUSH
28395: CALL_OW 272
28399: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28400: LD_ADDR_VAR 0 8
28404: PUSH
28405: LD_VAR 0 6
28409: PPUSH
28410: LD_VAR 0 4
28414: PPUSH
28415: LD_INT 3
28417: PPUSH
28418: CALL_OW 273
28422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28423: LD_VAR 0 7
28427: PPUSH
28428: LD_VAR 0 8
28432: PPUSH
28433: CALL_OW 488
28437: NOT
28438: IFFALSE 28442
// continue ;
28440: GO 28374
// if HexInfo ( _x , _y ) = 0 then
28442: LD_VAR 0 7
28446: PPUSH
28447: LD_VAR 0 8
28451: PPUSH
28452: CALL_OW 428
28456: PUSH
28457: LD_INT 0
28459: EQUAL
28460: IFFALSE 28485
// begin ComMoveXY ( unit , _x , _y ) ;
28462: LD_VAR 0 1
28466: PPUSH
28467: LD_VAR 0 7
28471: PPUSH
28472: LD_VAR 0 8
28476: PPUSH
28477: CALL_OW 111
// exit ;
28481: POP
28482: POP
28483: GO 28489
// end ; end ;
28485: GO 28374
28487: POP
28488: POP
// end ;
28489: LD_VAR 0 3
28493: RET
// export function ScanBase ( side , base_area ) ; begin
28494: LD_INT 0
28496: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28497: LD_ADDR_VAR 0 3
28501: PUSH
28502: LD_VAR 0 2
28506: PPUSH
28507: LD_INT 81
28509: PUSH
28510: LD_VAR 0 1
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PPUSH
28519: CALL_OW 70
28523: ST_TO_ADDR
// end ;
28524: LD_VAR 0 3
28528: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28529: LD_INT 0
28531: PPUSH
28532: PPUSH
28533: PPUSH
28534: PPUSH
// result := false ;
28535: LD_ADDR_VAR 0 2
28539: PUSH
28540: LD_INT 0
28542: ST_TO_ADDR
// side := GetSide ( unit ) ;
28543: LD_ADDR_VAR 0 3
28547: PUSH
28548: LD_VAR 0 1
28552: PPUSH
28553: CALL_OW 255
28557: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28558: LD_ADDR_VAR 0 4
28562: PUSH
28563: LD_VAR 0 1
28567: PPUSH
28568: CALL_OW 248
28572: ST_TO_ADDR
// case nat of 1 :
28573: LD_VAR 0 4
28577: PUSH
28578: LD_INT 1
28580: DOUBLE
28581: EQUAL
28582: IFTRUE 28586
28584: GO 28597
28586: POP
// tech := tech_lassight ; 2 :
28587: LD_ADDR_VAR 0 5
28591: PUSH
28592: LD_INT 12
28594: ST_TO_ADDR
28595: GO 28636
28597: LD_INT 2
28599: DOUBLE
28600: EQUAL
28601: IFTRUE 28605
28603: GO 28616
28605: POP
// tech := tech_mortar ; 3 :
28606: LD_ADDR_VAR 0 5
28610: PUSH
28611: LD_INT 41
28613: ST_TO_ADDR
28614: GO 28636
28616: LD_INT 3
28618: DOUBLE
28619: EQUAL
28620: IFTRUE 28624
28622: GO 28635
28624: POP
// tech := tech_bazooka ; end ;
28625: LD_ADDR_VAR 0 5
28629: PUSH
28630: LD_INT 44
28632: ST_TO_ADDR
28633: GO 28636
28635: POP
// if Researched ( side , tech ) then
28636: LD_VAR 0 3
28640: PPUSH
28641: LD_VAR 0 5
28645: PPUSH
28646: CALL_OW 325
28650: IFFALSE 28677
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28652: LD_ADDR_VAR 0 2
28656: PUSH
28657: LD_INT 5
28659: PUSH
28660: LD_INT 8
28662: PUSH
28663: LD_INT 9
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: PUSH
28671: LD_VAR 0 4
28675: ARRAY
28676: ST_TO_ADDR
// end ;
28677: LD_VAR 0 2
28681: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28682: LD_INT 0
28684: PPUSH
28685: PPUSH
28686: PPUSH
// if not mines then
28687: LD_VAR 0 2
28691: NOT
28692: IFFALSE 28696
// exit ;
28694: GO 28840
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28696: LD_ADDR_VAR 0 5
28700: PUSH
28701: LD_INT 81
28703: PUSH
28704: LD_VAR 0 1
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 3
28715: PUSH
28716: LD_INT 21
28718: PUSH
28719: LD_INT 3
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PPUSH
28734: CALL_OW 69
28738: ST_TO_ADDR
// for i in mines do
28739: LD_ADDR_VAR 0 4
28743: PUSH
28744: LD_VAR 0 2
28748: PUSH
28749: FOR_IN
28750: IFFALSE 28838
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28752: LD_VAR 0 4
28756: PUSH
28757: LD_INT 1
28759: ARRAY
28760: PPUSH
28761: LD_VAR 0 4
28765: PUSH
28766: LD_INT 2
28768: ARRAY
28769: PPUSH
28770: CALL_OW 458
28774: NOT
28775: IFFALSE 28779
// continue ;
28777: GO 28749
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28779: LD_VAR 0 4
28783: PUSH
28784: LD_INT 1
28786: ARRAY
28787: PPUSH
28788: LD_VAR 0 4
28792: PUSH
28793: LD_INT 2
28795: ARRAY
28796: PPUSH
28797: CALL_OW 428
28801: PUSH
28802: LD_VAR 0 5
28806: IN
28807: IFFALSE 28836
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28809: LD_VAR 0 4
28813: PUSH
28814: LD_INT 1
28816: ARRAY
28817: PPUSH
28818: LD_VAR 0 4
28822: PUSH
28823: LD_INT 2
28825: ARRAY
28826: PPUSH
28827: LD_VAR 0 1
28831: PPUSH
28832: CALL_OW 456
// end ;
28836: GO 28749
28838: POP
28839: POP
// end ;
28840: LD_VAR 0 3
28844: RET
// export function Count ( array ) ; var i ; begin
28845: LD_INT 0
28847: PPUSH
28848: PPUSH
// result := 0 ;
28849: LD_ADDR_VAR 0 2
28853: PUSH
28854: LD_INT 0
28856: ST_TO_ADDR
// for i in array do
28857: LD_ADDR_VAR 0 3
28861: PUSH
28862: LD_VAR 0 1
28866: PUSH
28867: FOR_IN
28868: IFFALSE 28892
// if i then
28870: LD_VAR 0 3
28874: IFFALSE 28890
// result := result + 1 ;
28876: LD_ADDR_VAR 0 2
28880: PUSH
28881: LD_VAR 0 2
28885: PUSH
28886: LD_INT 1
28888: PLUS
28889: ST_TO_ADDR
28890: GO 28867
28892: POP
28893: POP
// end ;
28894: LD_VAR 0 2
28898: RET
// export function IsEmpty ( building ) ; begin
28899: LD_INT 0
28901: PPUSH
// if not building then
28902: LD_VAR 0 1
28906: NOT
28907: IFFALSE 28911
// exit ;
28909: GO 28954
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28911: LD_ADDR_VAR 0 2
28915: PUSH
28916: LD_VAR 0 1
28920: PUSH
28921: LD_INT 22
28923: PUSH
28924: LD_VAR 0 1
28928: PPUSH
28929: CALL_OW 255
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 58
28940: PUSH
28941: EMPTY
28942: LIST
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PPUSH
28948: CALL_OW 69
28952: IN
28953: ST_TO_ADDR
// end ;
28954: LD_VAR 0 2
28958: RET
// export function IsNotFull ( building ) ; var places ; begin
28959: LD_INT 0
28961: PPUSH
28962: PPUSH
// if not building then
28963: LD_VAR 0 1
28967: NOT
28968: IFFALSE 28972
// exit ;
28970: GO 29143
// result := false ;
28972: LD_ADDR_VAR 0 2
28976: PUSH
28977: LD_INT 0
28979: ST_TO_ADDR
// places := 0 ;
28980: LD_ADDR_VAR 0 3
28984: PUSH
28985: LD_INT 0
28987: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28988: LD_VAR 0 1
28992: PPUSH
28993: CALL_OW 266
28997: PUSH
28998: LD_INT 0
29000: DOUBLE
29001: EQUAL
29002: IFTRUE 29060
29004: LD_INT 1
29006: DOUBLE
29007: EQUAL
29008: IFTRUE 29060
29010: LD_INT 6
29012: DOUBLE
29013: EQUAL
29014: IFTRUE 29060
29016: LD_INT 7
29018: DOUBLE
29019: EQUAL
29020: IFTRUE 29060
29022: LD_INT 8
29024: DOUBLE
29025: EQUAL
29026: IFTRUE 29060
29028: LD_INT 4
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29060
29034: LD_INT 5
29036: DOUBLE
29037: EQUAL
29038: IFTRUE 29060
29040: LD_INT 2
29042: DOUBLE
29043: EQUAL
29044: IFTRUE 29060
29046: LD_INT 3
29048: DOUBLE
29049: EQUAL
29050: IFTRUE 29060
29052: LD_INT 35
29054: DOUBLE
29055: EQUAL
29056: IFTRUE 29060
29058: GO 29071
29060: POP
// places := 6 ; b_bunker , b_breastwork :
29061: LD_ADDR_VAR 0 3
29065: PUSH
29066: LD_INT 6
29068: ST_TO_ADDR
29069: GO 29116
29071: LD_INT 32
29073: DOUBLE
29074: EQUAL
29075: IFTRUE 29085
29077: LD_INT 31
29079: DOUBLE
29080: EQUAL
29081: IFTRUE 29085
29083: GO 29096
29085: POP
// places := 1 ; b_control_tower :
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_INT 1
29093: ST_TO_ADDR
29094: GO 29116
29096: LD_INT 36
29098: DOUBLE
29099: EQUAL
29100: IFTRUE 29104
29102: GO 29115
29104: POP
// places := 3 ; end ;
29105: LD_ADDR_VAR 0 3
29109: PUSH
29110: LD_INT 3
29112: ST_TO_ADDR
29113: GO 29116
29115: POP
// if places then
29116: LD_VAR 0 3
29120: IFFALSE 29143
// result := UnitsInside ( building ) < places ;
29122: LD_ADDR_VAR 0 2
29126: PUSH
29127: LD_VAR 0 1
29131: PPUSH
29132: CALL_OW 313
29136: PUSH
29137: LD_VAR 0 3
29141: LESS
29142: ST_TO_ADDR
// end ;
29143: LD_VAR 0 2
29147: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29148: LD_INT 0
29150: PPUSH
29151: PPUSH
29152: PPUSH
29153: PPUSH
// tmp := [ ] ;
29154: LD_ADDR_VAR 0 3
29158: PUSH
29159: EMPTY
29160: ST_TO_ADDR
// list := [ ] ;
29161: LD_ADDR_VAR 0 5
29165: PUSH
29166: EMPTY
29167: ST_TO_ADDR
// for i = 16 to 25 do
29168: LD_ADDR_VAR 0 4
29172: PUSH
29173: DOUBLE
29174: LD_INT 16
29176: DEC
29177: ST_TO_ADDR
29178: LD_INT 25
29180: PUSH
29181: FOR_TO
29182: IFFALSE 29255
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29184: LD_ADDR_VAR 0 3
29188: PUSH
29189: LD_VAR 0 3
29193: PUSH
29194: LD_INT 22
29196: PUSH
29197: LD_VAR 0 1
29201: PPUSH
29202: CALL_OW 255
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 91
29213: PUSH
29214: LD_VAR 0 1
29218: PUSH
29219: LD_INT 6
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 30
29229: PUSH
29230: LD_VAR 0 4
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PUSH
29244: EMPTY
29245: LIST
29246: PPUSH
29247: CALL_OW 69
29251: ADD
29252: ST_TO_ADDR
29253: GO 29181
29255: POP
29256: POP
// for i = 1 to tmp do
29257: LD_ADDR_VAR 0 4
29261: PUSH
29262: DOUBLE
29263: LD_INT 1
29265: DEC
29266: ST_TO_ADDR
29267: LD_VAR 0 3
29271: PUSH
29272: FOR_TO
29273: IFFALSE 29361
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29275: LD_ADDR_VAR 0 5
29279: PUSH
29280: LD_VAR 0 5
29284: PUSH
29285: LD_VAR 0 3
29289: PUSH
29290: LD_VAR 0 4
29294: ARRAY
29295: PPUSH
29296: CALL_OW 266
29300: PUSH
29301: LD_VAR 0 3
29305: PUSH
29306: LD_VAR 0 4
29310: ARRAY
29311: PPUSH
29312: CALL_OW 250
29316: PUSH
29317: LD_VAR 0 3
29321: PUSH
29322: LD_VAR 0 4
29326: ARRAY
29327: PPUSH
29328: CALL_OW 251
29332: PUSH
29333: LD_VAR 0 3
29337: PUSH
29338: LD_VAR 0 4
29342: ARRAY
29343: PPUSH
29344: CALL_OW 254
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: PUSH
29355: EMPTY
29356: LIST
29357: ADD
29358: ST_TO_ADDR
29359: GO 29272
29361: POP
29362: POP
// result := list ;
29363: LD_ADDR_VAR 0 2
29367: PUSH
29368: LD_VAR 0 5
29372: ST_TO_ADDR
// end ;
29373: LD_VAR 0 2
29377: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29378: LD_INT 0
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
// if not factory then
29387: LD_VAR 0 1
29391: NOT
29392: IFFALSE 29396
// exit ;
29394: GO 29989
// if control = control_apeman then
29396: LD_VAR 0 4
29400: PUSH
29401: LD_INT 5
29403: EQUAL
29404: IFFALSE 29513
// begin tmp := UnitsInside ( factory ) ;
29406: LD_ADDR_VAR 0 8
29410: PUSH
29411: LD_VAR 0 1
29415: PPUSH
29416: CALL_OW 313
29420: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29421: LD_VAR 0 8
29425: PPUSH
29426: LD_INT 25
29428: PUSH
29429: LD_INT 12
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PPUSH
29436: CALL_OW 72
29440: NOT
29441: IFFALSE 29451
// control := control_manual ;
29443: LD_ADDR_VAR 0 4
29447: PUSH
29448: LD_INT 1
29450: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29451: LD_ADDR_VAR 0 8
29455: PUSH
29456: LD_VAR 0 1
29460: PPUSH
29461: CALL 29148 0 1
29465: ST_TO_ADDR
// if tmp then
29466: LD_VAR 0 8
29470: IFFALSE 29513
// begin for i in tmp do
29472: LD_ADDR_VAR 0 7
29476: PUSH
29477: LD_VAR 0 8
29481: PUSH
29482: FOR_IN
29483: IFFALSE 29511
// if i [ 1 ] = b_ext_radio then
29485: LD_VAR 0 7
29489: PUSH
29490: LD_INT 1
29492: ARRAY
29493: PUSH
29494: LD_INT 22
29496: EQUAL
29497: IFFALSE 29509
// begin control := control_remote ;
29499: LD_ADDR_VAR 0 4
29503: PUSH
29504: LD_INT 2
29506: ST_TO_ADDR
// break ;
29507: GO 29511
// end ;
29509: GO 29482
29511: POP
29512: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29513: LD_VAR 0 1
29517: PPUSH
29518: LD_VAR 0 2
29522: PPUSH
29523: LD_VAR 0 3
29527: PPUSH
29528: LD_VAR 0 4
29532: PPUSH
29533: LD_VAR 0 5
29537: PPUSH
29538: CALL_OW 448
29542: IFFALSE 29577
// begin result := [ chassis , engine , control , weapon ] ;
29544: LD_ADDR_VAR 0 6
29548: PUSH
29549: LD_VAR 0 2
29553: PUSH
29554: LD_VAR 0 3
29558: PUSH
29559: LD_VAR 0 4
29563: PUSH
29564: LD_VAR 0 5
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: ST_TO_ADDR
// exit ;
29575: GO 29989
// end ; _chassis := AvailableChassisList ( factory ) ;
29577: LD_ADDR_VAR 0 9
29581: PUSH
29582: LD_VAR 0 1
29586: PPUSH
29587: CALL_OW 475
29591: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29592: LD_ADDR_VAR 0 11
29596: PUSH
29597: LD_VAR 0 1
29601: PPUSH
29602: CALL_OW 476
29606: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29607: LD_ADDR_VAR 0 12
29611: PUSH
29612: LD_VAR 0 1
29616: PPUSH
29617: CALL_OW 477
29621: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29622: LD_ADDR_VAR 0 10
29626: PUSH
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL_OW 478
29636: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29637: LD_VAR 0 9
29641: NOT
29642: PUSH
29643: LD_VAR 0 11
29647: NOT
29648: OR
29649: PUSH
29650: LD_VAR 0 12
29654: NOT
29655: OR
29656: PUSH
29657: LD_VAR 0 10
29661: NOT
29662: OR
29663: IFFALSE 29698
// begin result := [ chassis , engine , control , weapon ] ;
29665: LD_ADDR_VAR 0 6
29669: PUSH
29670: LD_VAR 0 2
29674: PUSH
29675: LD_VAR 0 3
29679: PUSH
29680: LD_VAR 0 4
29684: PUSH
29685: LD_VAR 0 5
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: ST_TO_ADDR
// exit ;
29696: GO 29989
// end ; if not chassis in _chassis then
29698: LD_VAR 0 2
29702: PUSH
29703: LD_VAR 0 9
29707: IN
29708: NOT
29709: IFFALSE 29735
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29711: LD_ADDR_VAR 0 2
29715: PUSH
29716: LD_VAR 0 9
29720: PUSH
29721: LD_INT 1
29723: PPUSH
29724: LD_VAR 0 9
29728: PPUSH
29729: CALL_OW 12
29733: ARRAY
29734: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29735: LD_VAR 0 2
29739: PPUSH
29740: LD_VAR 0 3
29744: PPUSH
29745: CALL 29994 0 2
29749: NOT
29750: IFFALSE 29809
// repeat engine := _engine [ 1 ] ;
29752: LD_ADDR_VAR 0 3
29756: PUSH
29757: LD_VAR 0 11
29761: PUSH
29762: LD_INT 1
29764: ARRAY
29765: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29766: LD_ADDR_VAR 0 11
29770: PUSH
29771: LD_VAR 0 11
29775: PPUSH
29776: LD_INT 1
29778: PPUSH
29779: CALL_OW 3
29783: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29784: LD_VAR 0 2
29788: PPUSH
29789: LD_VAR 0 3
29793: PPUSH
29794: CALL 29994 0 2
29798: PUSH
29799: LD_VAR 0 11
29803: PUSH
29804: EMPTY
29805: EQUAL
29806: OR
29807: IFFALSE 29752
// if not control in _control then
29809: LD_VAR 0 4
29813: PUSH
29814: LD_VAR 0 12
29818: IN
29819: NOT
29820: IFFALSE 29846
// control := _control [ rand ( 1 , _control ) ] ;
29822: LD_ADDR_VAR 0 4
29826: PUSH
29827: LD_VAR 0 12
29831: PUSH
29832: LD_INT 1
29834: PPUSH
29835: LD_VAR 0 12
29839: PPUSH
29840: CALL_OW 12
29844: ARRAY
29845: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29846: LD_VAR 0 2
29850: PPUSH
29851: LD_VAR 0 5
29855: PPUSH
29856: CALL 30214 0 2
29860: NOT
29861: IFFALSE 29920
// repeat weapon := _weapon [ 1 ] ;
29863: LD_ADDR_VAR 0 5
29867: PUSH
29868: LD_VAR 0 10
29872: PUSH
29873: LD_INT 1
29875: ARRAY
29876: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29877: LD_ADDR_VAR 0 10
29881: PUSH
29882: LD_VAR 0 10
29886: PPUSH
29887: LD_INT 1
29889: PPUSH
29890: CALL_OW 3
29894: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29895: LD_VAR 0 2
29899: PPUSH
29900: LD_VAR 0 5
29904: PPUSH
29905: CALL 30214 0 2
29909: PUSH
29910: LD_VAR 0 10
29914: PUSH
29915: EMPTY
29916: EQUAL
29917: OR
29918: IFFALSE 29863
// result := [ ] ;
29920: LD_ADDR_VAR 0 6
29924: PUSH
29925: EMPTY
29926: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29927: LD_VAR 0 1
29931: PPUSH
29932: LD_VAR 0 2
29936: PPUSH
29937: LD_VAR 0 3
29941: PPUSH
29942: LD_VAR 0 4
29946: PPUSH
29947: LD_VAR 0 5
29951: PPUSH
29952: CALL_OW 448
29956: IFFALSE 29989
// result := [ chassis , engine , control , weapon ] ;
29958: LD_ADDR_VAR 0 6
29962: PUSH
29963: LD_VAR 0 2
29967: PUSH
29968: LD_VAR 0 3
29972: PUSH
29973: LD_VAR 0 4
29977: PUSH
29978: LD_VAR 0 5
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: ST_TO_ADDR
// end ;
29989: LD_VAR 0 6
29993: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29994: LD_INT 0
29996: PPUSH
// if not chassis or not engine then
29997: LD_VAR 0 1
30001: NOT
30002: PUSH
30003: LD_VAR 0 2
30007: NOT
30008: OR
30009: IFFALSE 30013
// exit ;
30011: GO 30209
// case engine of engine_solar :
30013: LD_VAR 0 2
30017: PUSH
30018: LD_INT 2
30020: DOUBLE
30021: EQUAL
30022: IFTRUE 30026
30024: GO 30064
30026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30027: LD_ADDR_VAR 0 3
30031: PUSH
30032: LD_INT 11
30034: PUSH
30035: LD_INT 12
30037: PUSH
30038: LD_INT 13
30040: PUSH
30041: LD_INT 14
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: LD_INT 3
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
30062: GO 30193
30064: LD_INT 1
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30134
30072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: LD_INT 11
30080: PUSH
30081: LD_INT 12
30083: PUSH
30084: LD_INT 13
30086: PUSH
30087: LD_INT 14
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: LD_INT 4
30101: PUSH
30102: LD_INT 5
30104: PUSH
30105: LD_INT 21
30107: PUSH
30108: LD_INT 23
30110: PUSH
30111: LD_INT 22
30113: PUSH
30114: LD_INT 24
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
30132: GO 30193
30134: LD_INT 3
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 30192
30142: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30143: LD_ADDR_VAR 0 3
30147: PUSH
30148: LD_INT 13
30150: PUSH
30151: LD_INT 14
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: LD_INT 3
30159: PUSH
30160: LD_INT 4
30162: PUSH
30163: LD_INT 5
30165: PUSH
30166: LD_INT 21
30168: PUSH
30169: LD_INT 22
30171: PUSH
30172: LD_INT 23
30174: PUSH
30175: LD_INT 24
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: ST_TO_ADDR
30190: GO 30193
30192: POP
// result := ( chassis in result ) ;
30193: LD_ADDR_VAR 0 3
30197: PUSH
30198: LD_VAR 0 1
30202: PUSH
30203: LD_VAR 0 3
30207: IN
30208: ST_TO_ADDR
// end ;
30209: LD_VAR 0 3
30213: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30214: LD_INT 0
30216: PPUSH
// if not chassis or not weapon then
30217: LD_VAR 0 1
30221: NOT
30222: PUSH
30223: LD_VAR 0 2
30227: NOT
30228: OR
30229: IFFALSE 30233
// exit ;
30231: GO 31293
// case weapon of us_machine_gun :
30233: LD_VAR 0 2
30237: PUSH
30238: LD_INT 2
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30276
30246: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 2
30257: PUSH
30258: LD_INT 3
30260: PUSH
30261: LD_INT 4
30263: PUSH
30264: LD_INT 5
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: ST_TO_ADDR
30274: GO 31277
30276: LD_INT 3
30278: DOUBLE
30279: EQUAL
30280: IFTRUE 30284
30282: GO 30314
30284: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30285: LD_ADDR_VAR 0 3
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: LD_INT 3
30298: PUSH
30299: LD_INT 4
30301: PUSH
30302: LD_INT 5
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 31277
30314: LD_INT 11
30316: DOUBLE
30317: EQUAL
30318: IFTRUE 30322
30320: GO 30352
30322: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30323: LD_ADDR_VAR 0 3
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: LD_INT 3
30336: PUSH
30337: LD_INT 4
30339: PUSH
30340: LD_INT 5
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: ST_TO_ADDR
30350: GO 31277
30352: LD_INT 4
30354: DOUBLE
30355: EQUAL
30356: IFTRUE 30360
30358: GO 30386
30360: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30361: LD_ADDR_VAR 0 3
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: LD_INT 3
30371: PUSH
30372: LD_INT 4
30374: PUSH
30375: LD_INT 5
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: ST_TO_ADDR
30384: GO 31277
30386: LD_INT 5
30388: DOUBLE
30389: EQUAL
30390: IFTRUE 30394
30392: GO 30420
30394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30395: LD_ADDR_VAR 0 3
30399: PUSH
30400: LD_INT 2
30402: PUSH
30403: LD_INT 3
30405: PUSH
30406: LD_INT 4
30408: PUSH
30409: LD_INT 5
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: ST_TO_ADDR
30418: GO 31277
30420: LD_INT 9
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30454
30428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30429: LD_ADDR_VAR 0 3
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 4
30442: PUSH
30443: LD_INT 5
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: ST_TO_ADDR
30452: GO 31277
30454: LD_INT 7
30456: DOUBLE
30457: EQUAL
30458: IFTRUE 30462
30460: GO 30488
30462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30463: LD_ADDR_VAR 0 3
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: LD_INT 4
30476: PUSH
30477: LD_INT 5
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
30486: GO 31277
30488: LD_INT 12
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30522
30496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30497: LD_ADDR_VAR 0 3
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 3
30507: PUSH
30508: LD_INT 4
30510: PUSH
30511: LD_INT 5
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
30520: GO 31277
30522: LD_INT 13
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30556
30530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30531: LD_ADDR_VAR 0 3
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: LD_INT 4
30544: PUSH
30545: LD_INT 5
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: ST_TO_ADDR
30554: GO 31277
30556: LD_INT 14
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30582
30564: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30565: LD_ADDR_VAR 0 3
30569: PUSH
30570: LD_INT 4
30572: PUSH
30573: LD_INT 5
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: ST_TO_ADDR
30580: GO 31277
30582: LD_INT 6
30584: DOUBLE
30585: EQUAL
30586: IFTRUE 30590
30588: GO 30608
30590: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30591: LD_ADDR_VAR 0 3
30595: PUSH
30596: LD_INT 4
30598: PUSH
30599: LD_INT 5
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: ST_TO_ADDR
30606: GO 31277
30608: LD_INT 10
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30634
30616: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30617: LD_ADDR_VAR 0 3
30621: PUSH
30622: LD_INT 4
30624: PUSH
30625: LD_INT 5
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: ST_TO_ADDR
30632: GO 31277
30634: LD_INT 22
30636: DOUBLE
30637: EQUAL
30638: IFTRUE 30642
30640: GO 30668
30642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30643: LD_ADDR_VAR 0 3
30647: PUSH
30648: LD_INT 11
30650: PUSH
30651: LD_INT 12
30653: PUSH
30654: LD_INT 13
30656: PUSH
30657: LD_INT 14
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: ST_TO_ADDR
30666: GO 31277
30668: LD_INT 23
30670: DOUBLE
30671: EQUAL
30672: IFTRUE 30676
30674: GO 30702
30676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30677: LD_ADDR_VAR 0 3
30681: PUSH
30682: LD_INT 11
30684: PUSH
30685: LD_INT 12
30687: PUSH
30688: LD_INT 13
30690: PUSH
30691: LD_INT 14
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: ST_TO_ADDR
30700: GO 31277
30702: LD_INT 24
30704: DOUBLE
30705: EQUAL
30706: IFTRUE 30710
30708: GO 30736
30710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: LD_INT 11
30718: PUSH
30719: LD_INT 12
30721: PUSH
30722: LD_INT 13
30724: PUSH
30725: LD_INT 14
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: ST_TO_ADDR
30734: GO 31277
30736: LD_INT 30
30738: DOUBLE
30739: EQUAL
30740: IFTRUE 30744
30742: GO 30770
30744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30745: LD_ADDR_VAR 0 3
30749: PUSH
30750: LD_INT 11
30752: PUSH
30753: LD_INT 12
30755: PUSH
30756: LD_INT 13
30758: PUSH
30759: LD_INT 14
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: ST_TO_ADDR
30768: GO 31277
30770: LD_INT 25
30772: DOUBLE
30773: EQUAL
30774: IFTRUE 30778
30776: GO 30796
30778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30779: LD_ADDR_VAR 0 3
30783: PUSH
30784: LD_INT 13
30786: PUSH
30787: LD_INT 14
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: ST_TO_ADDR
30794: GO 31277
30796: LD_INT 27
30798: DOUBLE
30799: EQUAL
30800: IFTRUE 30804
30802: GO 30822
30804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30805: LD_ADDR_VAR 0 3
30809: PUSH
30810: LD_INT 13
30812: PUSH
30813: LD_INT 14
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: ST_TO_ADDR
30820: GO 31277
30822: LD_INT 92
30824: DOUBLE
30825: EQUAL
30826: IFTRUE 30830
30828: GO 30856
30830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30831: LD_ADDR_VAR 0 3
30835: PUSH
30836: LD_INT 11
30838: PUSH
30839: LD_INT 12
30841: PUSH
30842: LD_INT 13
30844: PUSH
30845: LD_INT 14
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
30854: GO 31277
30856: LD_INT 28
30858: DOUBLE
30859: EQUAL
30860: IFTRUE 30864
30862: GO 30882
30864: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30865: LD_ADDR_VAR 0 3
30869: PUSH
30870: LD_INT 13
30872: PUSH
30873: LD_INT 14
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: ST_TO_ADDR
30880: GO 31277
30882: LD_INT 29
30884: DOUBLE
30885: EQUAL
30886: IFTRUE 30890
30888: GO 30908
30890: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30891: LD_ADDR_VAR 0 3
30895: PUSH
30896: LD_INT 13
30898: PUSH
30899: LD_INT 14
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: ST_TO_ADDR
30906: GO 31277
30908: LD_INT 31
30910: DOUBLE
30911: EQUAL
30912: IFTRUE 30916
30914: GO 30934
30916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30917: LD_ADDR_VAR 0 3
30921: PUSH
30922: LD_INT 13
30924: PUSH
30925: LD_INT 14
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: ST_TO_ADDR
30932: GO 31277
30934: LD_INT 26
30936: DOUBLE
30937: EQUAL
30938: IFTRUE 30942
30940: GO 30960
30942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_INT 13
30950: PUSH
30951: LD_INT 14
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: ST_TO_ADDR
30958: GO 31277
30960: LD_INT 42
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30994
30968: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30969: LD_ADDR_VAR 0 3
30973: PUSH
30974: LD_INT 21
30976: PUSH
30977: LD_INT 22
30979: PUSH
30980: LD_INT 23
30982: PUSH
30983: LD_INT 24
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: ST_TO_ADDR
30992: GO 31277
30994: LD_INT 43
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31002
31000: GO 31028
31002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31003: LD_ADDR_VAR 0 3
31007: PUSH
31008: LD_INT 21
31010: PUSH
31011: LD_INT 22
31013: PUSH
31014: LD_INT 23
31016: PUSH
31017: LD_INT 24
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: ST_TO_ADDR
31026: GO 31277
31028: LD_INT 44
31030: DOUBLE
31031: EQUAL
31032: IFTRUE 31036
31034: GO 31062
31036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_INT 21
31044: PUSH
31045: LD_INT 22
31047: PUSH
31048: LD_INT 23
31050: PUSH
31051: LD_INT 24
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
31060: GO 31277
31062: LD_INT 45
31064: DOUBLE
31065: EQUAL
31066: IFTRUE 31070
31068: GO 31096
31070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_INT 21
31078: PUSH
31079: LD_INT 22
31081: PUSH
31082: LD_INT 23
31084: PUSH
31085: LD_INT 24
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: ST_TO_ADDR
31094: GO 31277
31096: LD_INT 49
31098: DOUBLE
31099: EQUAL
31100: IFTRUE 31104
31102: GO 31130
31104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31105: LD_ADDR_VAR 0 3
31109: PUSH
31110: LD_INT 21
31112: PUSH
31113: LD_INT 22
31115: PUSH
31116: LD_INT 23
31118: PUSH
31119: LD_INT 24
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: ST_TO_ADDR
31128: GO 31277
31130: LD_INT 51
31132: DOUBLE
31133: EQUAL
31134: IFTRUE 31138
31136: GO 31164
31138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31139: LD_ADDR_VAR 0 3
31143: PUSH
31144: LD_INT 21
31146: PUSH
31147: LD_INT 22
31149: PUSH
31150: LD_INT 23
31152: PUSH
31153: LD_INT 24
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
31162: GO 31277
31164: LD_INT 52
31166: DOUBLE
31167: EQUAL
31168: IFTRUE 31172
31170: GO 31198
31172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31173: LD_ADDR_VAR 0 3
31177: PUSH
31178: LD_INT 21
31180: PUSH
31181: LD_INT 22
31183: PUSH
31184: LD_INT 23
31186: PUSH
31187: LD_INT 24
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
31196: GO 31277
31198: LD_INT 53
31200: DOUBLE
31201: EQUAL
31202: IFTRUE 31206
31204: GO 31224
31206: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31207: LD_ADDR_VAR 0 3
31211: PUSH
31212: LD_INT 23
31214: PUSH
31215: LD_INT 24
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: ST_TO_ADDR
31222: GO 31277
31224: LD_INT 46
31226: DOUBLE
31227: EQUAL
31228: IFTRUE 31232
31230: GO 31250
31232: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31233: LD_ADDR_VAR 0 3
31237: PUSH
31238: LD_INT 23
31240: PUSH
31241: LD_INT 24
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: ST_TO_ADDR
31248: GO 31277
31250: LD_INT 47
31252: DOUBLE
31253: EQUAL
31254: IFTRUE 31258
31256: GO 31276
31258: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31259: LD_ADDR_VAR 0 3
31263: PUSH
31264: LD_INT 23
31266: PUSH
31267: LD_INT 24
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: ST_TO_ADDR
31274: GO 31277
31276: POP
// result := ( chassis in result ) ;
31277: LD_ADDR_VAR 0 3
31281: PUSH
31282: LD_VAR 0 1
31286: PUSH
31287: LD_VAR 0 3
31291: IN
31292: ST_TO_ADDR
// end ;
31293: LD_VAR 0 3
31297: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31298: LD_INT 0
31300: PPUSH
31301: PPUSH
31302: PPUSH
31303: PPUSH
31304: PPUSH
31305: PPUSH
31306: PPUSH
// result := array ;
31307: LD_ADDR_VAR 0 5
31311: PUSH
31312: LD_VAR 0 1
31316: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31317: LD_VAR 0 1
31321: NOT
31322: PUSH
31323: LD_VAR 0 2
31327: NOT
31328: OR
31329: PUSH
31330: LD_VAR 0 3
31334: NOT
31335: OR
31336: PUSH
31337: LD_VAR 0 2
31341: PUSH
31342: LD_VAR 0 1
31346: GREATER
31347: OR
31348: PUSH
31349: LD_VAR 0 3
31353: PUSH
31354: LD_VAR 0 1
31358: GREATER
31359: OR
31360: IFFALSE 31364
// exit ;
31362: GO 31660
// if direction then
31364: LD_VAR 0 4
31368: IFFALSE 31432
// begin d := 1 ;
31370: LD_ADDR_VAR 0 9
31374: PUSH
31375: LD_INT 1
31377: ST_TO_ADDR
// if i_from > i_to then
31378: LD_VAR 0 2
31382: PUSH
31383: LD_VAR 0 3
31387: GREATER
31388: IFFALSE 31414
// length := ( array - i_from ) + i_to else
31390: LD_ADDR_VAR 0 11
31394: PUSH
31395: LD_VAR 0 1
31399: PUSH
31400: LD_VAR 0 2
31404: MINUS
31405: PUSH
31406: LD_VAR 0 3
31410: PLUS
31411: ST_TO_ADDR
31412: GO 31430
// length := i_to - i_from ;
31414: LD_ADDR_VAR 0 11
31418: PUSH
31419: LD_VAR 0 3
31423: PUSH
31424: LD_VAR 0 2
31428: MINUS
31429: ST_TO_ADDR
// end else
31430: GO 31493
// begin d := - 1 ;
31432: LD_ADDR_VAR 0 9
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: ST_TO_ADDR
// if i_from > i_to then
31441: LD_VAR 0 2
31445: PUSH
31446: LD_VAR 0 3
31450: GREATER
31451: IFFALSE 31471
// length := i_from - i_to else
31453: LD_ADDR_VAR 0 11
31457: PUSH
31458: LD_VAR 0 2
31462: PUSH
31463: LD_VAR 0 3
31467: MINUS
31468: ST_TO_ADDR
31469: GO 31493
// length := ( array - i_to ) + i_from ;
31471: LD_ADDR_VAR 0 11
31475: PUSH
31476: LD_VAR 0 1
31480: PUSH
31481: LD_VAR 0 3
31485: MINUS
31486: PUSH
31487: LD_VAR 0 2
31491: PLUS
31492: ST_TO_ADDR
// end ; if not length then
31493: LD_VAR 0 11
31497: NOT
31498: IFFALSE 31502
// exit ;
31500: GO 31660
// tmp := array ;
31502: LD_ADDR_VAR 0 10
31506: PUSH
31507: LD_VAR 0 1
31511: ST_TO_ADDR
// for i = 1 to length do
31512: LD_ADDR_VAR 0 6
31516: PUSH
31517: DOUBLE
31518: LD_INT 1
31520: DEC
31521: ST_TO_ADDR
31522: LD_VAR 0 11
31526: PUSH
31527: FOR_TO
31528: IFFALSE 31648
// begin for j = 1 to array do
31530: LD_ADDR_VAR 0 7
31534: PUSH
31535: DOUBLE
31536: LD_INT 1
31538: DEC
31539: ST_TO_ADDR
31540: LD_VAR 0 1
31544: PUSH
31545: FOR_TO
31546: IFFALSE 31634
// begin k := j + d ;
31548: LD_ADDR_VAR 0 8
31552: PUSH
31553: LD_VAR 0 7
31557: PUSH
31558: LD_VAR 0 9
31562: PLUS
31563: ST_TO_ADDR
// if k > array then
31564: LD_VAR 0 8
31568: PUSH
31569: LD_VAR 0 1
31573: GREATER
31574: IFFALSE 31584
// k := 1 ;
31576: LD_ADDR_VAR 0 8
31580: PUSH
31581: LD_INT 1
31583: ST_TO_ADDR
// if not k then
31584: LD_VAR 0 8
31588: NOT
31589: IFFALSE 31601
// k := array ;
31591: LD_ADDR_VAR 0 8
31595: PUSH
31596: LD_VAR 0 1
31600: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31601: LD_ADDR_VAR 0 10
31605: PUSH
31606: LD_VAR 0 10
31610: PPUSH
31611: LD_VAR 0 8
31615: PPUSH
31616: LD_VAR 0 1
31620: PUSH
31621: LD_VAR 0 7
31625: ARRAY
31626: PPUSH
31627: CALL_OW 1
31631: ST_TO_ADDR
// end ;
31632: GO 31545
31634: POP
31635: POP
// array := tmp ;
31636: LD_ADDR_VAR 0 1
31640: PUSH
31641: LD_VAR 0 10
31645: ST_TO_ADDR
// end ;
31646: GO 31527
31648: POP
31649: POP
// result := array ;
31650: LD_ADDR_VAR 0 5
31654: PUSH
31655: LD_VAR 0 1
31659: ST_TO_ADDR
// end ;
31660: LD_VAR 0 5
31664: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31665: LD_INT 0
31667: PPUSH
31668: PPUSH
// result := 0 ;
31669: LD_ADDR_VAR 0 3
31673: PUSH
31674: LD_INT 0
31676: ST_TO_ADDR
// if not array or not value in array then
31677: LD_VAR 0 1
31681: NOT
31682: PUSH
31683: LD_VAR 0 2
31687: PUSH
31688: LD_VAR 0 1
31692: IN
31693: NOT
31694: OR
31695: IFFALSE 31699
// exit ;
31697: GO 31753
// for i = 1 to array do
31699: LD_ADDR_VAR 0 4
31703: PUSH
31704: DOUBLE
31705: LD_INT 1
31707: DEC
31708: ST_TO_ADDR
31709: LD_VAR 0 1
31713: PUSH
31714: FOR_TO
31715: IFFALSE 31751
// if value = array [ i ] then
31717: LD_VAR 0 2
31721: PUSH
31722: LD_VAR 0 1
31726: PUSH
31727: LD_VAR 0 4
31731: ARRAY
31732: EQUAL
31733: IFFALSE 31749
// begin result := i ;
31735: LD_ADDR_VAR 0 3
31739: PUSH
31740: LD_VAR 0 4
31744: ST_TO_ADDR
// exit ;
31745: POP
31746: POP
31747: GO 31753
// end ;
31749: GO 31714
31751: POP
31752: POP
// end ;
31753: LD_VAR 0 3
31757: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31758: LD_INT 0
31760: PPUSH
// vc_chassis := chassis ;
31761: LD_ADDR_OWVAR 37
31765: PUSH
31766: LD_VAR 0 1
31770: ST_TO_ADDR
// vc_engine := engine ;
31771: LD_ADDR_OWVAR 39
31775: PUSH
31776: LD_VAR 0 2
31780: ST_TO_ADDR
// vc_control := control ;
31781: LD_ADDR_OWVAR 38
31785: PUSH
31786: LD_VAR 0 3
31790: ST_TO_ADDR
// vc_weapon := weapon ;
31791: LD_ADDR_OWVAR 40
31795: PUSH
31796: LD_VAR 0 4
31800: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31801: LD_ADDR_OWVAR 41
31805: PUSH
31806: LD_VAR 0 5
31810: ST_TO_ADDR
// end ;
31811: LD_VAR 0 6
31815: RET
// export function WantPlant ( unit ) ; var task ; begin
31816: LD_INT 0
31818: PPUSH
31819: PPUSH
// result := false ;
31820: LD_ADDR_VAR 0 2
31824: PUSH
31825: LD_INT 0
31827: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31828: LD_ADDR_VAR 0 3
31832: PUSH
31833: LD_VAR 0 1
31837: PPUSH
31838: CALL_OW 437
31842: ST_TO_ADDR
// if task then
31843: LD_VAR 0 3
31847: IFFALSE 31875
// if task [ 1 ] [ 1 ] = p then
31849: LD_VAR 0 3
31853: PUSH
31854: LD_INT 1
31856: ARRAY
31857: PUSH
31858: LD_INT 1
31860: ARRAY
31861: PUSH
31862: LD_STRING p
31864: EQUAL
31865: IFFALSE 31875
// result := true ;
31867: LD_ADDR_VAR 0 2
31871: PUSH
31872: LD_INT 1
31874: ST_TO_ADDR
// end ;
31875: LD_VAR 0 2
31879: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31880: LD_INT 0
31882: PPUSH
31883: PPUSH
31884: PPUSH
31885: PPUSH
// if pos < 1 then
31886: LD_VAR 0 2
31890: PUSH
31891: LD_INT 1
31893: LESS
31894: IFFALSE 31898
// exit ;
31896: GO 32201
// if pos = 1 then
31898: LD_VAR 0 2
31902: PUSH
31903: LD_INT 1
31905: EQUAL
31906: IFFALSE 31939
// result := Replace ( arr , pos [ 1 ] , value ) else
31908: LD_ADDR_VAR 0 4
31912: PUSH
31913: LD_VAR 0 1
31917: PPUSH
31918: LD_VAR 0 2
31922: PUSH
31923: LD_INT 1
31925: ARRAY
31926: PPUSH
31927: LD_VAR 0 3
31931: PPUSH
31932: CALL_OW 1
31936: ST_TO_ADDR
31937: GO 32201
// begin tmp := arr ;
31939: LD_ADDR_VAR 0 6
31943: PUSH
31944: LD_VAR 0 1
31948: ST_TO_ADDR
// s_arr := [ tmp ] ;
31949: LD_ADDR_VAR 0 7
31953: PUSH
31954: LD_VAR 0 6
31958: PUSH
31959: EMPTY
31960: LIST
31961: ST_TO_ADDR
// for i = 1 to pos - 1 do
31962: LD_ADDR_VAR 0 5
31966: PUSH
31967: DOUBLE
31968: LD_INT 1
31970: DEC
31971: ST_TO_ADDR
31972: LD_VAR 0 2
31976: PUSH
31977: LD_INT 1
31979: MINUS
31980: PUSH
31981: FOR_TO
31982: IFFALSE 32027
// begin tmp := tmp [ pos [ i ] ] ;
31984: LD_ADDR_VAR 0 6
31988: PUSH
31989: LD_VAR 0 6
31993: PUSH
31994: LD_VAR 0 2
31998: PUSH
31999: LD_VAR 0 5
32003: ARRAY
32004: ARRAY
32005: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32006: LD_ADDR_VAR 0 7
32010: PUSH
32011: LD_VAR 0 7
32015: PUSH
32016: LD_VAR 0 6
32020: PUSH
32021: EMPTY
32022: LIST
32023: ADD
32024: ST_TO_ADDR
// end ;
32025: GO 31981
32027: POP
32028: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32029: LD_ADDR_VAR 0 6
32033: PUSH
32034: LD_VAR 0 6
32038: PPUSH
32039: LD_VAR 0 2
32043: PUSH
32044: LD_VAR 0 2
32048: ARRAY
32049: PPUSH
32050: LD_VAR 0 3
32054: PPUSH
32055: CALL_OW 1
32059: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32060: LD_ADDR_VAR 0 7
32064: PUSH
32065: LD_VAR 0 7
32069: PPUSH
32070: LD_VAR 0 7
32074: PPUSH
32075: LD_VAR 0 6
32079: PPUSH
32080: CALL_OW 1
32084: ST_TO_ADDR
// for i = s_arr downto 2 do
32085: LD_ADDR_VAR 0 5
32089: PUSH
32090: DOUBLE
32091: LD_VAR 0 7
32095: INC
32096: ST_TO_ADDR
32097: LD_INT 2
32099: PUSH
32100: FOR_DOWNTO
32101: IFFALSE 32185
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32103: LD_ADDR_VAR 0 6
32107: PUSH
32108: LD_VAR 0 7
32112: PUSH
32113: LD_VAR 0 5
32117: PUSH
32118: LD_INT 1
32120: MINUS
32121: ARRAY
32122: PPUSH
32123: LD_VAR 0 2
32127: PUSH
32128: LD_VAR 0 5
32132: PUSH
32133: LD_INT 1
32135: MINUS
32136: ARRAY
32137: PPUSH
32138: LD_VAR 0 7
32142: PUSH
32143: LD_VAR 0 5
32147: ARRAY
32148: PPUSH
32149: CALL_OW 1
32153: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32154: LD_ADDR_VAR 0 7
32158: PUSH
32159: LD_VAR 0 7
32163: PPUSH
32164: LD_VAR 0 5
32168: PUSH
32169: LD_INT 1
32171: MINUS
32172: PPUSH
32173: LD_VAR 0 6
32177: PPUSH
32178: CALL_OW 1
32182: ST_TO_ADDR
// end ;
32183: GO 32100
32185: POP
32186: POP
// result := s_arr [ 1 ] ;
32187: LD_ADDR_VAR 0 4
32191: PUSH
32192: LD_VAR 0 7
32196: PUSH
32197: LD_INT 1
32199: ARRAY
32200: ST_TO_ADDR
// end ; end ;
32201: LD_VAR 0 4
32205: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32206: LD_INT 0
32208: PPUSH
32209: PPUSH
// if not list then
32210: LD_VAR 0 1
32214: NOT
32215: IFFALSE 32219
// exit ;
32217: GO 32310
// i := list [ pos1 ] ;
32219: LD_ADDR_VAR 0 5
32223: PUSH
32224: LD_VAR 0 1
32228: PUSH
32229: LD_VAR 0 2
32233: ARRAY
32234: ST_TO_ADDR
// if not i then
32235: LD_VAR 0 5
32239: NOT
32240: IFFALSE 32244
// exit ;
32242: GO 32310
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32244: LD_ADDR_VAR 0 1
32248: PUSH
32249: LD_VAR 0 1
32253: PPUSH
32254: LD_VAR 0 2
32258: PPUSH
32259: LD_VAR 0 1
32263: PUSH
32264: LD_VAR 0 3
32268: ARRAY
32269: PPUSH
32270: CALL_OW 1
32274: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32275: LD_ADDR_VAR 0 1
32279: PUSH
32280: LD_VAR 0 1
32284: PPUSH
32285: LD_VAR 0 3
32289: PPUSH
32290: LD_VAR 0 5
32294: PPUSH
32295: CALL_OW 1
32299: ST_TO_ADDR
// result := list ;
32300: LD_ADDR_VAR 0 4
32304: PUSH
32305: LD_VAR 0 1
32309: ST_TO_ADDR
// end ;
32310: LD_VAR 0 4
32314: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32315: LD_INT 0
32317: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32318: LD_ADDR_VAR 0 5
32322: PUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: CALL_OW 250
32332: PPUSH
32333: LD_VAR 0 1
32337: PPUSH
32338: CALL_OW 251
32342: PPUSH
32343: LD_VAR 0 2
32347: PPUSH
32348: LD_VAR 0 3
32352: PPUSH
32353: LD_VAR 0 4
32357: PPUSH
32358: CALL 32368 0 5
32362: ST_TO_ADDR
// end ;
32363: LD_VAR 0 5
32367: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32368: LD_INT 0
32370: PPUSH
32371: PPUSH
32372: PPUSH
32373: PPUSH
// if not list then
32374: LD_VAR 0 3
32378: NOT
32379: IFFALSE 32383
// exit ;
32381: GO 32771
// result := [ ] ;
32383: LD_ADDR_VAR 0 6
32387: PUSH
32388: EMPTY
32389: ST_TO_ADDR
// for i in list do
32390: LD_ADDR_VAR 0 7
32394: PUSH
32395: LD_VAR 0 3
32399: PUSH
32400: FOR_IN
32401: IFFALSE 32603
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32403: LD_ADDR_VAR 0 9
32407: PUSH
32408: LD_VAR 0 7
32412: PPUSH
32413: LD_VAR 0 1
32417: PPUSH
32418: LD_VAR 0 2
32422: PPUSH
32423: CALL_OW 297
32427: ST_TO_ADDR
// if not result then
32428: LD_VAR 0 6
32432: NOT
32433: IFFALSE 32459
// result := [ [ i , tmp ] ] else
32435: LD_ADDR_VAR 0 6
32439: PUSH
32440: LD_VAR 0 7
32444: PUSH
32445: LD_VAR 0 9
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: EMPTY
32455: LIST
32456: ST_TO_ADDR
32457: GO 32601
// begin if result [ result ] [ 2 ] < tmp then
32459: LD_VAR 0 6
32463: PUSH
32464: LD_VAR 0 6
32468: ARRAY
32469: PUSH
32470: LD_INT 2
32472: ARRAY
32473: PUSH
32474: LD_VAR 0 9
32478: LESS
32479: IFFALSE 32521
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32481: LD_ADDR_VAR 0 6
32485: PUSH
32486: LD_VAR 0 6
32490: PPUSH
32491: LD_VAR 0 6
32495: PUSH
32496: LD_INT 1
32498: PLUS
32499: PPUSH
32500: LD_VAR 0 7
32504: PUSH
32505: LD_VAR 0 9
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL_OW 2
32518: ST_TO_ADDR
32519: GO 32601
// for j = 1 to result do
32521: LD_ADDR_VAR 0 8
32525: PUSH
32526: DOUBLE
32527: LD_INT 1
32529: DEC
32530: ST_TO_ADDR
32531: LD_VAR 0 6
32535: PUSH
32536: FOR_TO
32537: IFFALSE 32599
// begin if tmp < result [ j ] [ 2 ] then
32539: LD_VAR 0 9
32543: PUSH
32544: LD_VAR 0 6
32548: PUSH
32549: LD_VAR 0 8
32553: ARRAY
32554: PUSH
32555: LD_INT 2
32557: ARRAY
32558: LESS
32559: IFFALSE 32597
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32561: LD_ADDR_VAR 0 6
32565: PUSH
32566: LD_VAR 0 6
32570: PPUSH
32571: LD_VAR 0 8
32575: PPUSH
32576: LD_VAR 0 7
32580: PUSH
32581: LD_VAR 0 9
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PPUSH
32590: CALL_OW 2
32594: ST_TO_ADDR
// break ;
32595: GO 32599
// end ; end ;
32597: GO 32536
32599: POP
32600: POP
// end ; end ;
32601: GO 32400
32603: POP
32604: POP
// if result and not asc then
32605: LD_VAR 0 6
32609: PUSH
32610: LD_VAR 0 4
32614: NOT
32615: AND
32616: IFFALSE 32691
// begin tmp := result ;
32618: LD_ADDR_VAR 0 9
32622: PUSH
32623: LD_VAR 0 6
32627: ST_TO_ADDR
// for i = tmp downto 1 do
32628: LD_ADDR_VAR 0 7
32632: PUSH
32633: DOUBLE
32634: LD_VAR 0 9
32638: INC
32639: ST_TO_ADDR
32640: LD_INT 1
32642: PUSH
32643: FOR_DOWNTO
32644: IFFALSE 32689
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32646: LD_ADDR_VAR 0 6
32650: PUSH
32651: LD_VAR 0 6
32655: PPUSH
32656: LD_VAR 0 9
32660: PUSH
32661: LD_VAR 0 7
32665: MINUS
32666: PUSH
32667: LD_INT 1
32669: PLUS
32670: PPUSH
32671: LD_VAR 0 9
32675: PUSH
32676: LD_VAR 0 7
32680: ARRAY
32681: PPUSH
32682: CALL_OW 1
32686: ST_TO_ADDR
32687: GO 32643
32689: POP
32690: POP
// end ; tmp := [ ] ;
32691: LD_ADDR_VAR 0 9
32695: PUSH
32696: EMPTY
32697: ST_TO_ADDR
// if mode then
32698: LD_VAR 0 5
32702: IFFALSE 32771
// begin for i = 1 to result do
32704: LD_ADDR_VAR 0 7
32708: PUSH
32709: DOUBLE
32710: LD_INT 1
32712: DEC
32713: ST_TO_ADDR
32714: LD_VAR 0 6
32718: PUSH
32719: FOR_TO
32720: IFFALSE 32759
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32722: LD_ADDR_VAR 0 9
32726: PUSH
32727: LD_VAR 0 9
32731: PPUSH
32732: LD_VAR 0 7
32736: PPUSH
32737: LD_VAR 0 6
32741: PUSH
32742: LD_VAR 0 7
32746: ARRAY
32747: PUSH
32748: LD_INT 1
32750: ARRAY
32751: PPUSH
32752: CALL_OW 1
32756: ST_TO_ADDR
32757: GO 32719
32759: POP
32760: POP
// result := tmp ;
32761: LD_ADDR_VAR 0 6
32765: PUSH
32766: LD_VAR 0 9
32770: ST_TO_ADDR
// end ; end ;
32771: LD_VAR 0 6
32775: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32776: LD_INT 0
32778: PPUSH
32779: PPUSH
32780: PPUSH
32781: PPUSH
32782: PPUSH
32783: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32784: LD_ADDR_VAR 0 5
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: ST_TO_ADDR
// if not x or not y then
32806: LD_VAR 0 2
32810: NOT
32811: PUSH
32812: LD_VAR 0 3
32816: NOT
32817: OR
32818: IFFALSE 32822
// exit ;
32820: GO 34472
// if not range then
32822: LD_VAR 0 4
32826: NOT
32827: IFFALSE 32837
// range := 10 ;
32829: LD_ADDR_VAR 0 4
32833: PUSH
32834: LD_INT 10
32836: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32837: LD_ADDR_VAR 0 8
32841: PUSH
32842: LD_INT 81
32844: PUSH
32845: LD_VAR 0 1
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 92
32856: PUSH
32857: LD_VAR 0 2
32861: PUSH
32862: LD_VAR 0 3
32866: PUSH
32867: LD_VAR 0 4
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 3
32880: PUSH
32881: LD_INT 21
32883: PUSH
32884: LD_INT 3
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: PPUSH
32900: CALL_OW 69
32904: ST_TO_ADDR
// if not tmp then
32905: LD_VAR 0 8
32909: NOT
32910: IFFALSE 32914
// exit ;
32912: GO 34472
// for i in tmp do
32914: LD_ADDR_VAR 0 6
32918: PUSH
32919: LD_VAR 0 8
32923: PUSH
32924: FOR_IN
32925: IFFALSE 34447
// begin points := [ 0 , 0 , 0 ] ;
32927: LD_ADDR_VAR 0 9
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: ST_TO_ADDR
// bpoints := 1 ;
32946: LD_ADDR_VAR 0 10
32950: PUSH
32951: LD_INT 1
32953: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32954: LD_VAR 0 6
32958: PPUSH
32959: CALL_OW 247
32963: PUSH
32964: LD_INT 1
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 33550
32972: POP
// begin if GetClass ( i ) = 1 then
32973: LD_VAR 0 6
32977: PPUSH
32978: CALL_OW 257
32982: PUSH
32983: LD_INT 1
32985: EQUAL
32986: IFFALSE 33007
// points := [ 10 , 5 , 3 ] ;
32988: LD_ADDR_VAR 0 9
32992: PUSH
32993: LD_INT 10
32995: PUSH
32996: LD_INT 5
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33007: LD_VAR 0 6
33011: PPUSH
33012: CALL_OW 257
33016: PUSH
33017: LD_INT 2
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: LD_INT 4
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: IN
33031: IFFALSE 33052
// points := [ 3 , 2 , 1 ] ;
33033: LD_ADDR_VAR 0 9
33037: PUSH
33038: LD_INT 3
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33052: LD_VAR 0 6
33056: PPUSH
33057: CALL_OW 257
33061: PUSH
33062: LD_INT 5
33064: EQUAL
33065: IFFALSE 33086
// points := [ 130 , 5 , 2 ] ;
33067: LD_ADDR_VAR 0 9
33071: PUSH
33072: LD_INT 130
33074: PUSH
33075: LD_INT 5
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33086: LD_VAR 0 6
33090: PPUSH
33091: CALL_OW 257
33095: PUSH
33096: LD_INT 8
33098: EQUAL
33099: IFFALSE 33120
// points := [ 35 , 35 , 30 ] ;
33101: LD_ADDR_VAR 0 9
33105: PUSH
33106: LD_INT 35
33108: PUSH
33109: LD_INT 35
33111: PUSH
33112: LD_INT 30
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33120: LD_VAR 0 6
33124: PPUSH
33125: CALL_OW 257
33129: PUSH
33130: LD_INT 9
33132: EQUAL
33133: IFFALSE 33154
// points := [ 20 , 55 , 40 ] ;
33135: LD_ADDR_VAR 0 9
33139: PUSH
33140: LD_INT 20
33142: PUSH
33143: LD_INT 55
33145: PUSH
33146: LD_INT 40
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33154: LD_VAR 0 6
33158: PPUSH
33159: CALL_OW 257
33163: PUSH
33164: LD_INT 12
33166: PUSH
33167: LD_INT 16
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: IN
33174: IFFALSE 33195
// points := [ 5 , 3 , 2 ] ;
33176: LD_ADDR_VAR 0 9
33180: PUSH
33181: LD_INT 5
33183: PUSH
33184: LD_INT 3
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33195: LD_VAR 0 6
33199: PPUSH
33200: CALL_OW 257
33204: PUSH
33205: LD_INT 17
33207: EQUAL
33208: IFFALSE 33229
// points := [ 100 , 50 , 75 ] ;
33210: LD_ADDR_VAR 0 9
33214: PUSH
33215: LD_INT 100
33217: PUSH
33218: LD_INT 50
33220: PUSH
33221: LD_INT 75
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33229: LD_VAR 0 6
33233: PPUSH
33234: CALL_OW 257
33238: PUSH
33239: LD_INT 15
33241: EQUAL
33242: IFFALSE 33263
// points := [ 10 , 5 , 3 ] ;
33244: LD_ADDR_VAR 0 9
33248: PUSH
33249: LD_INT 10
33251: PUSH
33252: LD_INT 5
33254: PUSH
33255: LD_INT 3
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33263: LD_VAR 0 6
33267: PPUSH
33268: CALL_OW 257
33272: PUSH
33273: LD_INT 14
33275: EQUAL
33276: IFFALSE 33297
// points := [ 10 , 0 , 0 ] ;
33278: LD_ADDR_VAR 0 9
33282: PUSH
33283: LD_INT 10
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33297: LD_VAR 0 6
33301: PPUSH
33302: CALL_OW 257
33306: PUSH
33307: LD_INT 11
33309: EQUAL
33310: IFFALSE 33331
// points := [ 30 , 10 , 5 ] ;
33312: LD_ADDR_VAR 0 9
33316: PUSH
33317: LD_INT 30
33319: PUSH
33320: LD_INT 10
33322: PUSH
33323: LD_INT 5
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33331: LD_VAR 0 1
33335: PPUSH
33336: LD_INT 5
33338: PPUSH
33339: CALL_OW 321
33343: PUSH
33344: LD_INT 2
33346: EQUAL
33347: IFFALSE 33364
// bpoints := bpoints * 1.8 ;
33349: LD_ADDR_VAR 0 10
33353: PUSH
33354: LD_VAR 0 10
33358: PUSH
33359: LD_REAL  1.80000000000000E+0000
33362: MUL
33363: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33364: LD_VAR 0 6
33368: PPUSH
33369: CALL_OW 257
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: LD_INT 2
33379: PUSH
33380: LD_INT 3
33382: PUSH
33383: LD_INT 4
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: IN
33392: PUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: LD_INT 51
33400: PPUSH
33401: CALL_OW 321
33405: PUSH
33406: LD_INT 2
33408: EQUAL
33409: AND
33410: IFFALSE 33427
// bpoints := bpoints * 1.2 ;
33412: LD_ADDR_VAR 0 10
33416: PUSH
33417: LD_VAR 0 10
33421: PUSH
33422: LD_REAL  1.20000000000000E+0000
33425: MUL
33426: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33427: LD_VAR 0 6
33431: PPUSH
33432: CALL_OW 257
33436: PUSH
33437: LD_INT 5
33439: PUSH
33440: LD_INT 7
33442: PUSH
33443: LD_INT 9
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: IN
33451: PUSH
33452: LD_VAR 0 1
33456: PPUSH
33457: LD_INT 52
33459: PPUSH
33460: CALL_OW 321
33464: PUSH
33465: LD_INT 2
33467: EQUAL
33468: AND
33469: IFFALSE 33486
// bpoints := bpoints * 1.5 ;
33471: LD_ADDR_VAR 0 10
33475: PUSH
33476: LD_VAR 0 10
33480: PUSH
33481: LD_REAL  1.50000000000000E+0000
33484: MUL
33485: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33486: LD_VAR 0 1
33490: PPUSH
33491: LD_INT 66
33493: PPUSH
33494: CALL_OW 321
33498: PUSH
33499: LD_INT 2
33501: EQUAL
33502: IFFALSE 33519
// bpoints := bpoints * 1.1 ;
33504: LD_ADDR_VAR 0 10
33508: PUSH
33509: LD_VAR 0 10
33513: PUSH
33514: LD_REAL  1.10000000000000E+0000
33517: MUL
33518: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33519: LD_ADDR_VAR 0 10
33523: PUSH
33524: LD_VAR 0 10
33528: PUSH
33529: LD_VAR 0 6
33533: PPUSH
33534: LD_INT 1
33536: PPUSH
33537: CALL_OW 259
33541: PUSH
33542: LD_REAL  1.15000000000000E+0000
33545: MUL
33546: MUL
33547: ST_TO_ADDR
// end ; unit_vehicle :
33548: GO 34376
33550: LD_INT 2
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33558
33556: GO 34364
33558: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33559: LD_VAR 0 6
33563: PPUSH
33564: CALL_OW 264
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: LD_INT 42
33574: PUSH
33575: LD_INT 24
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: LIST
33582: IN
33583: IFFALSE 33604
// points := [ 25 , 5 , 3 ] ;
33585: LD_ADDR_VAR 0 9
33589: PUSH
33590: LD_INT 25
33592: PUSH
33593: LD_INT 5
33595: PUSH
33596: LD_INT 3
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33604: LD_VAR 0 6
33608: PPUSH
33609: CALL_OW 264
33613: PUSH
33614: LD_INT 4
33616: PUSH
33617: LD_INT 43
33619: PUSH
33620: LD_INT 25
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: LIST
33627: IN
33628: IFFALSE 33649
// points := [ 40 , 15 , 5 ] ;
33630: LD_ADDR_VAR 0 9
33634: PUSH
33635: LD_INT 40
33637: PUSH
33638: LD_INT 15
33640: PUSH
33641: LD_INT 5
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33649: LD_VAR 0 6
33653: PPUSH
33654: CALL_OW 264
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: LD_INT 23
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: IN
33669: IFFALSE 33690
// points := [ 7 , 25 , 8 ] ;
33671: LD_ADDR_VAR 0 9
33675: PUSH
33676: LD_INT 7
33678: PUSH
33679: LD_INT 25
33681: PUSH
33682: LD_INT 8
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33690: LD_VAR 0 6
33694: PPUSH
33695: CALL_OW 264
33699: PUSH
33700: LD_INT 5
33702: PUSH
33703: LD_INT 27
33705: PUSH
33706: LD_INT 44
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: IN
33714: IFFALSE 33735
// points := [ 14 , 50 , 16 ] ;
33716: LD_ADDR_VAR 0 9
33720: PUSH
33721: LD_INT 14
33723: PUSH
33724: LD_INT 50
33726: PUSH
33727: LD_INT 16
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33735: LD_VAR 0 6
33739: PPUSH
33740: CALL_OW 264
33744: PUSH
33745: LD_INT 6
33747: PUSH
33748: LD_INT 46
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: IN
33755: IFFALSE 33776
// points := [ 32 , 120 , 70 ] ;
33757: LD_ADDR_VAR 0 9
33761: PUSH
33762: LD_INT 32
33764: PUSH
33765: LD_INT 120
33767: PUSH
33768: LD_INT 70
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33776: LD_VAR 0 6
33780: PPUSH
33781: CALL_OW 264
33785: PUSH
33786: LD_INT 7
33788: PUSH
33789: LD_INT 28
33791: PUSH
33792: LD_INT 45
33794: PUSH
33795: LD_INT 92
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: IN
33804: IFFALSE 33825
// points := [ 35 , 20 , 45 ] ;
33806: LD_ADDR_VAR 0 9
33810: PUSH
33811: LD_INT 35
33813: PUSH
33814: LD_INT 20
33816: PUSH
33817: LD_INT 45
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33825: LD_VAR 0 6
33829: PPUSH
33830: CALL_OW 264
33834: PUSH
33835: LD_INT 47
33837: PUSH
33838: EMPTY
33839: LIST
33840: IN
33841: IFFALSE 33862
// points := [ 67 , 45 , 75 ] ;
33843: LD_ADDR_VAR 0 9
33847: PUSH
33848: LD_INT 67
33850: PUSH
33851: LD_INT 45
33853: PUSH
33854: LD_INT 75
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: LIST
33861: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33862: LD_VAR 0 6
33866: PPUSH
33867: CALL_OW 264
33871: PUSH
33872: LD_INT 26
33874: PUSH
33875: EMPTY
33876: LIST
33877: IN
33878: IFFALSE 33899
// points := [ 120 , 30 , 80 ] ;
33880: LD_ADDR_VAR 0 9
33884: PUSH
33885: LD_INT 120
33887: PUSH
33888: LD_INT 30
33890: PUSH
33891: LD_INT 80
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33899: LD_VAR 0 6
33903: PPUSH
33904: CALL_OW 264
33908: PUSH
33909: LD_INT 22
33911: PUSH
33912: EMPTY
33913: LIST
33914: IN
33915: IFFALSE 33936
// points := [ 40 , 1 , 1 ] ;
33917: LD_ADDR_VAR 0 9
33921: PUSH
33922: LD_INT 40
33924: PUSH
33925: LD_INT 1
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33936: LD_VAR 0 6
33940: PPUSH
33941: CALL_OW 264
33945: PUSH
33946: LD_INT 29
33948: PUSH
33949: EMPTY
33950: LIST
33951: IN
33952: IFFALSE 33973
// points := [ 70 , 200 , 400 ] ;
33954: LD_ADDR_VAR 0 9
33958: PUSH
33959: LD_INT 70
33961: PUSH
33962: LD_INT 200
33964: PUSH
33965: LD_INT 400
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: LIST
33972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33973: LD_VAR 0 6
33977: PPUSH
33978: CALL_OW 264
33982: PUSH
33983: LD_INT 14
33985: PUSH
33986: LD_INT 53
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: IN
33993: IFFALSE 34014
// points := [ 40 , 10 , 20 ] ;
33995: LD_ADDR_VAR 0 9
33999: PUSH
34000: LD_INT 40
34002: PUSH
34003: LD_INT 10
34005: PUSH
34006: LD_INT 20
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34014: LD_VAR 0 6
34018: PPUSH
34019: CALL_OW 264
34023: PUSH
34024: LD_INT 9
34026: PUSH
34027: EMPTY
34028: LIST
34029: IN
34030: IFFALSE 34051
// points := [ 5 , 70 , 20 ] ;
34032: LD_ADDR_VAR 0 9
34036: PUSH
34037: LD_INT 5
34039: PUSH
34040: LD_INT 70
34042: PUSH
34043: LD_INT 20
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34051: LD_VAR 0 6
34055: PPUSH
34056: CALL_OW 264
34060: PUSH
34061: LD_INT 10
34063: PUSH
34064: EMPTY
34065: LIST
34066: IN
34067: IFFALSE 34088
// points := [ 35 , 110 , 70 ] ;
34069: LD_ADDR_VAR 0 9
34073: PUSH
34074: LD_INT 35
34076: PUSH
34077: LD_INT 110
34079: PUSH
34080: LD_INT 70
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34088: LD_VAR 0 6
34092: PPUSH
34093: CALL_OW 265
34097: PUSH
34098: LD_INT 25
34100: EQUAL
34101: IFFALSE 34122
// points := [ 80 , 65 , 100 ] ;
34103: LD_ADDR_VAR 0 9
34107: PUSH
34108: LD_INT 80
34110: PUSH
34111: LD_INT 65
34113: PUSH
34114: LD_INT 100
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34122: LD_VAR 0 6
34126: PPUSH
34127: CALL_OW 263
34131: PUSH
34132: LD_INT 1
34134: EQUAL
34135: IFFALSE 34170
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34137: LD_ADDR_VAR 0 10
34141: PUSH
34142: LD_VAR 0 10
34146: PUSH
34147: LD_VAR 0 6
34151: PPUSH
34152: CALL_OW 311
34156: PPUSH
34157: LD_INT 3
34159: PPUSH
34160: CALL_OW 259
34164: PUSH
34165: LD_INT 4
34167: MUL
34168: MUL
34169: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34170: LD_VAR 0 6
34174: PPUSH
34175: CALL_OW 263
34179: PUSH
34180: LD_INT 2
34182: EQUAL
34183: IFFALSE 34234
// begin j := IsControledBy ( i ) ;
34185: LD_ADDR_VAR 0 7
34189: PUSH
34190: LD_VAR 0 6
34194: PPUSH
34195: CALL_OW 312
34199: ST_TO_ADDR
// if j then
34200: LD_VAR 0 7
34204: IFFALSE 34234
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34206: LD_ADDR_VAR 0 10
34210: PUSH
34211: LD_VAR 0 10
34215: PUSH
34216: LD_VAR 0 7
34220: PPUSH
34221: LD_INT 3
34223: PPUSH
34224: CALL_OW 259
34228: PUSH
34229: LD_INT 3
34231: MUL
34232: MUL
34233: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34234: LD_VAR 0 6
34238: PPUSH
34239: CALL_OW 264
34243: PUSH
34244: LD_INT 5
34246: PUSH
34247: LD_INT 6
34249: PUSH
34250: LD_INT 46
34252: PUSH
34253: LD_INT 44
34255: PUSH
34256: LD_INT 47
34258: PUSH
34259: LD_INT 45
34261: PUSH
34262: LD_INT 28
34264: PUSH
34265: LD_INT 7
34267: PUSH
34268: LD_INT 27
34270: PUSH
34271: LD_INT 29
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: IN
34286: PUSH
34287: LD_VAR 0 1
34291: PPUSH
34292: LD_INT 52
34294: PPUSH
34295: CALL_OW 321
34299: PUSH
34300: LD_INT 2
34302: EQUAL
34303: AND
34304: IFFALSE 34321
// bpoints := bpoints * 1.2 ;
34306: LD_ADDR_VAR 0 10
34310: PUSH
34311: LD_VAR 0 10
34315: PUSH
34316: LD_REAL  1.20000000000000E+0000
34319: MUL
34320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34321: LD_VAR 0 6
34325: PPUSH
34326: CALL_OW 264
34330: PUSH
34331: LD_INT 6
34333: PUSH
34334: LD_INT 46
34336: PUSH
34337: LD_INT 47
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: IN
34345: IFFALSE 34362
// bpoints := bpoints * 1.2 ;
34347: LD_ADDR_VAR 0 10
34351: PUSH
34352: LD_VAR 0 10
34356: PUSH
34357: LD_REAL  1.20000000000000E+0000
34360: MUL
34361: ST_TO_ADDR
// end ; unit_building :
34362: GO 34376
34364: LD_INT 3
34366: DOUBLE
34367: EQUAL
34368: IFTRUE 34372
34370: GO 34375
34372: POP
// ; end ;
34373: GO 34376
34375: POP
// for j = 1 to 3 do
34376: LD_ADDR_VAR 0 7
34380: PUSH
34381: DOUBLE
34382: LD_INT 1
34384: DEC
34385: ST_TO_ADDR
34386: LD_INT 3
34388: PUSH
34389: FOR_TO
34390: IFFALSE 34443
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34392: LD_ADDR_VAR 0 5
34396: PUSH
34397: LD_VAR 0 5
34401: PPUSH
34402: LD_VAR 0 7
34406: PPUSH
34407: LD_VAR 0 5
34411: PUSH
34412: LD_VAR 0 7
34416: ARRAY
34417: PUSH
34418: LD_VAR 0 9
34422: PUSH
34423: LD_VAR 0 7
34427: ARRAY
34428: PUSH
34429: LD_VAR 0 10
34433: MUL
34434: PLUS
34435: PPUSH
34436: CALL_OW 1
34440: ST_TO_ADDR
34441: GO 34389
34443: POP
34444: POP
// end ;
34445: GO 32924
34447: POP
34448: POP
// result := Replace ( result , 4 , tmp ) ;
34449: LD_ADDR_VAR 0 5
34453: PUSH
34454: LD_VAR 0 5
34458: PPUSH
34459: LD_INT 4
34461: PPUSH
34462: LD_VAR 0 8
34466: PPUSH
34467: CALL_OW 1
34471: ST_TO_ADDR
// end ;
34472: LD_VAR 0 5
34476: RET
// export function DangerAtRange ( unit , range ) ; begin
34477: LD_INT 0
34479: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34480: LD_ADDR_VAR 0 3
34484: PUSH
34485: LD_VAR 0 1
34489: PPUSH
34490: CALL_OW 255
34494: PPUSH
34495: LD_VAR 0 1
34499: PPUSH
34500: CALL_OW 250
34504: PPUSH
34505: LD_VAR 0 1
34509: PPUSH
34510: CALL_OW 251
34514: PPUSH
34515: LD_VAR 0 2
34519: PPUSH
34520: CALL 32776 0 4
34524: ST_TO_ADDR
// end ;
34525: LD_VAR 0 3
34529: RET
// export function DangerInArea ( side , area ) ; begin
34530: LD_INT 0
34532: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: LD_VAR 0 2
34542: PPUSH
34543: LD_INT 81
34545: PUSH
34546: LD_VAR 0 1
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PPUSH
34555: CALL_OW 70
34559: ST_TO_ADDR
// end ;
34560: LD_VAR 0 3
34564: RET
// export function IsExtension ( b ) ; begin
34565: LD_INT 0
34567: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34568: LD_ADDR_VAR 0 2
34572: PUSH
34573: LD_VAR 0 1
34577: PUSH
34578: LD_INT 23
34580: PUSH
34581: LD_INT 20
34583: PUSH
34584: LD_INT 22
34586: PUSH
34587: LD_INT 17
34589: PUSH
34590: LD_INT 24
34592: PUSH
34593: LD_INT 21
34595: PUSH
34596: LD_INT 19
34598: PUSH
34599: LD_INT 16
34601: PUSH
34602: LD_INT 25
34604: PUSH
34605: LD_INT 18
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: IN
34620: ST_TO_ADDR
// end ;
34621: LD_VAR 0 2
34625: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34626: LD_INT 0
34628: PPUSH
34629: PPUSH
34630: PPUSH
// result := [ ] ;
34631: LD_ADDR_VAR 0 4
34635: PUSH
34636: EMPTY
34637: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34638: LD_ADDR_VAR 0 5
34642: PUSH
34643: LD_VAR 0 2
34647: PPUSH
34648: LD_INT 21
34650: PUSH
34651: LD_INT 3
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 70
34662: ST_TO_ADDR
// if not tmp then
34663: LD_VAR 0 5
34667: NOT
34668: IFFALSE 34672
// exit ;
34670: GO 34736
// if checkLink then
34672: LD_VAR 0 3
34676: IFFALSE 34726
// begin for i in tmp do
34678: LD_ADDR_VAR 0 6
34682: PUSH
34683: LD_VAR 0 5
34687: PUSH
34688: FOR_IN
34689: IFFALSE 34724
// if GetBase ( i ) <> base then
34691: LD_VAR 0 6
34695: PPUSH
34696: CALL_OW 274
34700: PUSH
34701: LD_VAR 0 1
34705: NONEQUAL
34706: IFFALSE 34722
// ComLinkToBase ( base , i ) ;
34708: LD_VAR 0 1
34712: PPUSH
34713: LD_VAR 0 6
34717: PPUSH
34718: CALL_OW 169
34722: GO 34688
34724: POP
34725: POP
// end ; result := tmp ;
34726: LD_ADDR_VAR 0 4
34730: PUSH
34731: LD_VAR 0 5
34735: ST_TO_ADDR
// end ;
34736: LD_VAR 0 4
34740: RET
// export function ComComplete ( units , b ) ; var i ; begin
34741: LD_INT 0
34743: PPUSH
34744: PPUSH
// if not units then
34745: LD_VAR 0 1
34749: NOT
34750: IFFALSE 34754
// exit ;
34752: GO 34844
// for i in units do
34754: LD_ADDR_VAR 0 4
34758: PUSH
34759: LD_VAR 0 1
34763: PUSH
34764: FOR_IN
34765: IFFALSE 34842
// if BuildingStatus ( b ) = bs_build then
34767: LD_VAR 0 2
34771: PPUSH
34772: CALL_OW 461
34776: PUSH
34777: LD_INT 1
34779: EQUAL
34780: IFFALSE 34840
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34782: LD_VAR 0 4
34786: PPUSH
34787: LD_STRING h
34789: PUSH
34790: LD_VAR 0 2
34794: PPUSH
34795: CALL_OW 250
34799: PUSH
34800: LD_VAR 0 2
34804: PPUSH
34805: CALL_OW 251
34809: PUSH
34810: LD_VAR 0 2
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: PUSH
34833: EMPTY
34834: LIST
34835: PPUSH
34836: CALL_OW 446
34840: GO 34764
34842: POP
34843: POP
// end ;
34844: LD_VAR 0 3
34848: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34849: LD_INT 0
34851: PPUSH
34852: PPUSH
34853: PPUSH
34854: PPUSH
34855: PPUSH
34856: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34857: LD_VAR 0 1
34861: NOT
34862: PUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: CALL_OW 263
34872: PUSH
34873: LD_INT 2
34875: NONEQUAL
34876: OR
34877: IFFALSE 34881
// exit ;
34879: GO 35197
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34881: LD_ADDR_VAR 0 6
34885: PUSH
34886: LD_INT 22
34888: PUSH
34889: LD_VAR 0 1
34893: PPUSH
34894: CALL_OW 255
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 30
34908: PUSH
34909: LD_INT 36
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 34
34918: PUSH
34919: LD_INT 31
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PPUSH
34935: CALL_OW 69
34939: ST_TO_ADDR
// if not tmp then
34940: LD_VAR 0 6
34944: NOT
34945: IFFALSE 34949
// exit ;
34947: GO 35197
// result := [ ] ;
34949: LD_ADDR_VAR 0 2
34953: PUSH
34954: EMPTY
34955: ST_TO_ADDR
// for i in tmp do
34956: LD_ADDR_VAR 0 3
34960: PUSH
34961: LD_VAR 0 6
34965: PUSH
34966: FOR_IN
34967: IFFALSE 35038
// begin t := UnitsInside ( i ) ;
34969: LD_ADDR_VAR 0 4
34973: PUSH
34974: LD_VAR 0 3
34978: PPUSH
34979: CALL_OW 313
34983: ST_TO_ADDR
// if t then
34984: LD_VAR 0 4
34988: IFFALSE 35036
// for j in t do
34990: LD_ADDR_VAR 0 7
34994: PUSH
34995: LD_VAR 0 4
34999: PUSH
35000: FOR_IN
35001: IFFALSE 35034
// result := Replace ( result , result + 1 , j ) ;
35003: LD_ADDR_VAR 0 2
35007: PUSH
35008: LD_VAR 0 2
35012: PPUSH
35013: LD_VAR 0 2
35017: PUSH
35018: LD_INT 1
35020: PLUS
35021: PPUSH
35022: LD_VAR 0 7
35026: PPUSH
35027: CALL_OW 1
35031: ST_TO_ADDR
35032: GO 35000
35034: POP
35035: POP
// end ;
35036: GO 34966
35038: POP
35039: POP
// if not result then
35040: LD_VAR 0 2
35044: NOT
35045: IFFALSE 35049
// exit ;
35047: GO 35197
// mech := result [ 1 ] ;
35049: LD_ADDR_VAR 0 5
35053: PUSH
35054: LD_VAR 0 2
35058: PUSH
35059: LD_INT 1
35061: ARRAY
35062: ST_TO_ADDR
// if result > 1 then
35063: LD_VAR 0 2
35067: PUSH
35068: LD_INT 1
35070: GREATER
35071: IFFALSE 35183
// begin for i = 2 to result do
35073: LD_ADDR_VAR 0 3
35077: PUSH
35078: DOUBLE
35079: LD_INT 2
35081: DEC
35082: ST_TO_ADDR
35083: LD_VAR 0 2
35087: PUSH
35088: FOR_TO
35089: IFFALSE 35181
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35091: LD_ADDR_VAR 0 4
35095: PUSH
35096: LD_VAR 0 2
35100: PUSH
35101: LD_VAR 0 3
35105: ARRAY
35106: PPUSH
35107: LD_INT 3
35109: PPUSH
35110: CALL_OW 259
35114: PUSH
35115: LD_VAR 0 2
35119: PUSH
35120: LD_VAR 0 3
35124: ARRAY
35125: PPUSH
35126: CALL_OW 432
35130: MINUS
35131: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35132: LD_VAR 0 4
35136: PUSH
35137: LD_VAR 0 5
35141: PPUSH
35142: LD_INT 3
35144: PPUSH
35145: CALL_OW 259
35149: PUSH
35150: LD_VAR 0 5
35154: PPUSH
35155: CALL_OW 432
35159: MINUS
35160: GREATEREQUAL
35161: IFFALSE 35179
// mech := result [ i ] ;
35163: LD_ADDR_VAR 0 5
35167: PUSH
35168: LD_VAR 0 2
35172: PUSH
35173: LD_VAR 0 3
35177: ARRAY
35178: ST_TO_ADDR
// end ;
35179: GO 35088
35181: POP
35182: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35183: LD_VAR 0 1
35187: PPUSH
35188: LD_VAR 0 5
35192: PPUSH
35193: CALL_OW 135
// end ;
35197: LD_VAR 0 2
35201: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35202: LD_INT 0
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
35215: PPUSH
35216: PPUSH
// result := [ ] ;
35217: LD_ADDR_VAR 0 7
35221: PUSH
35222: EMPTY
35223: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 266
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: IN
35244: NOT
35245: IFFALSE 35249
// exit ;
35247: GO 36883
// if name then
35249: LD_VAR 0 3
35253: IFFALSE 35269
// SetBName ( base_dep , name ) ;
35255: LD_VAR 0 1
35259: PPUSH
35260: LD_VAR 0 3
35264: PPUSH
35265: CALL_OW 500
// base := GetBase ( base_dep ) ;
35269: LD_ADDR_VAR 0 15
35273: PUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: CALL_OW 274
35283: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35284: LD_ADDR_VAR 0 16
35288: PUSH
35289: LD_VAR 0 1
35293: PPUSH
35294: CALL_OW 255
35298: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35299: LD_ADDR_VAR 0 17
35303: PUSH
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 248
35313: ST_TO_ADDR
// if sources then
35314: LD_VAR 0 5
35318: IFFALSE 35365
// for i = 1 to 3 do
35320: LD_ADDR_VAR 0 8
35324: PUSH
35325: DOUBLE
35326: LD_INT 1
35328: DEC
35329: ST_TO_ADDR
35330: LD_INT 3
35332: PUSH
35333: FOR_TO
35334: IFFALSE 35363
// AddResourceType ( base , i , sources [ i ] ) ;
35336: LD_VAR 0 15
35340: PPUSH
35341: LD_VAR 0 8
35345: PPUSH
35346: LD_VAR 0 5
35350: PUSH
35351: LD_VAR 0 8
35355: ARRAY
35356: PPUSH
35357: CALL_OW 276
35361: GO 35333
35363: POP
35364: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35365: LD_ADDR_VAR 0 18
35369: PUSH
35370: LD_VAR 0 15
35374: PPUSH
35375: LD_VAR 0 2
35379: PPUSH
35380: LD_INT 1
35382: PPUSH
35383: CALL 34626 0 3
35387: ST_TO_ADDR
// InitHc ;
35388: CALL_OW 19
// InitUc ;
35392: CALL_OW 18
// uc_side := side ;
35396: LD_ADDR_OWVAR 20
35400: PUSH
35401: LD_VAR 0 16
35405: ST_TO_ADDR
// uc_nation := nation ;
35406: LD_ADDR_OWVAR 21
35410: PUSH
35411: LD_VAR 0 17
35415: ST_TO_ADDR
// if buildings then
35416: LD_VAR 0 18
35420: IFFALSE 36742
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35422: LD_ADDR_VAR 0 19
35426: PUSH
35427: LD_VAR 0 18
35431: PPUSH
35432: LD_INT 2
35434: PUSH
35435: LD_INT 30
35437: PUSH
35438: LD_INT 29
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 30
35447: PUSH
35448: LD_INT 30
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: PPUSH
35460: CALL_OW 72
35464: ST_TO_ADDR
// if tmp then
35465: LD_VAR 0 19
35469: IFFALSE 35517
// for i in tmp do
35471: LD_ADDR_VAR 0 8
35475: PUSH
35476: LD_VAR 0 19
35480: PUSH
35481: FOR_IN
35482: IFFALSE 35515
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35484: LD_VAR 0 8
35488: PPUSH
35489: CALL_OW 250
35493: PPUSH
35494: LD_VAR 0 8
35498: PPUSH
35499: CALL_OW 251
35503: PPUSH
35504: LD_VAR 0 16
35508: PPUSH
35509: CALL_OW 441
35513: GO 35481
35515: POP
35516: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35517: LD_VAR 0 18
35521: PPUSH
35522: LD_INT 2
35524: PUSH
35525: LD_INT 30
35527: PUSH
35528: LD_INT 32
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 30
35537: PUSH
35538: LD_INT 33
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: PPUSH
35550: CALL_OW 72
35554: IFFALSE 35642
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35556: LD_ADDR_VAR 0 8
35560: PUSH
35561: LD_VAR 0 18
35565: PPUSH
35566: LD_INT 2
35568: PUSH
35569: LD_INT 30
35571: PUSH
35572: LD_INT 32
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 30
35581: PUSH
35582: LD_INT 33
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: PPUSH
35594: CALL_OW 72
35598: PUSH
35599: FOR_IN
35600: IFFALSE 35640
// begin if not GetBWeapon ( i ) then
35602: LD_VAR 0 8
35606: PPUSH
35607: CALL_OW 269
35611: NOT
35612: IFFALSE 35638
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35614: LD_VAR 0 8
35618: PPUSH
35619: LD_VAR 0 8
35623: PPUSH
35624: LD_VAR 0 2
35628: PPUSH
35629: CALL 36888 0 2
35633: PPUSH
35634: CALL_OW 431
// end ;
35638: GO 35599
35640: POP
35641: POP
// end ; for i = 1 to personel do
35642: LD_ADDR_VAR 0 8
35646: PUSH
35647: DOUBLE
35648: LD_INT 1
35650: DEC
35651: ST_TO_ADDR
35652: LD_VAR 0 6
35656: PUSH
35657: FOR_TO
35658: IFFALSE 36722
// begin if i > 4 then
35660: LD_VAR 0 8
35664: PUSH
35665: LD_INT 4
35667: GREATER
35668: IFFALSE 35672
// break ;
35670: GO 36722
// case i of 1 :
35672: LD_VAR 0 8
35676: PUSH
35677: LD_INT 1
35679: DOUBLE
35680: EQUAL
35681: IFTRUE 35685
35683: GO 35765
35685: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35686: LD_ADDR_VAR 0 12
35690: PUSH
35691: LD_VAR 0 18
35695: PPUSH
35696: LD_INT 22
35698: PUSH
35699: LD_VAR 0 16
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 58
35710: PUSH
35711: EMPTY
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 30
35719: PUSH
35720: LD_INT 32
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 30
35729: PUSH
35730: LD_INT 4
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 30
35739: PUSH
35740: LD_INT 5
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: PPUSH
35758: CALL_OW 72
35762: ST_TO_ADDR
35763: GO 35987
35765: LD_INT 2
35767: DOUBLE
35768: EQUAL
35769: IFTRUE 35773
35771: GO 35835
35773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35774: LD_ADDR_VAR 0 12
35778: PUSH
35779: LD_VAR 0 18
35783: PPUSH
35784: LD_INT 22
35786: PUSH
35787: LD_VAR 0 16
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 30
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 30
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: LIST
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PPUSH
35828: CALL_OW 72
35832: ST_TO_ADDR
35833: GO 35987
35835: LD_INT 3
35837: DOUBLE
35838: EQUAL
35839: IFTRUE 35843
35841: GO 35905
35843: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35844: LD_ADDR_VAR 0 12
35848: PUSH
35849: LD_VAR 0 18
35853: PPUSH
35854: LD_INT 22
35856: PUSH
35857: LD_VAR 0 16
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 2
35868: PUSH
35869: LD_INT 30
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 30
35881: PUSH
35882: LD_INT 3
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PPUSH
35898: CALL_OW 72
35902: ST_TO_ADDR
35903: GO 35987
35905: LD_INT 4
35907: DOUBLE
35908: EQUAL
35909: IFTRUE 35913
35911: GO 35986
35913: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35914: LD_ADDR_VAR 0 12
35918: PUSH
35919: LD_VAR 0 18
35923: PPUSH
35924: LD_INT 22
35926: PUSH
35927: LD_VAR 0 16
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: LD_INT 30
35941: PUSH
35942: LD_INT 6
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 30
35951: PUSH
35952: LD_INT 7
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 30
35961: PUSH
35962: LD_INT 8
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PPUSH
35979: CALL_OW 72
35983: ST_TO_ADDR
35984: GO 35987
35986: POP
// if i = 1 then
35987: LD_VAR 0 8
35991: PUSH
35992: LD_INT 1
35994: EQUAL
35995: IFFALSE 36106
// begin tmp := [ ] ;
35997: LD_ADDR_VAR 0 19
36001: PUSH
36002: EMPTY
36003: ST_TO_ADDR
// for j in f do
36004: LD_ADDR_VAR 0 9
36008: PUSH
36009: LD_VAR 0 12
36013: PUSH
36014: FOR_IN
36015: IFFALSE 36088
// if GetBType ( j ) = b_bunker then
36017: LD_VAR 0 9
36021: PPUSH
36022: CALL_OW 266
36026: PUSH
36027: LD_INT 32
36029: EQUAL
36030: IFFALSE 36057
// tmp := Insert ( tmp , 1 , j ) else
36032: LD_ADDR_VAR 0 19
36036: PUSH
36037: LD_VAR 0 19
36041: PPUSH
36042: LD_INT 1
36044: PPUSH
36045: LD_VAR 0 9
36049: PPUSH
36050: CALL_OW 2
36054: ST_TO_ADDR
36055: GO 36086
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36057: LD_ADDR_VAR 0 19
36061: PUSH
36062: LD_VAR 0 19
36066: PPUSH
36067: LD_VAR 0 19
36071: PUSH
36072: LD_INT 1
36074: PLUS
36075: PPUSH
36076: LD_VAR 0 9
36080: PPUSH
36081: CALL_OW 2
36085: ST_TO_ADDR
36086: GO 36014
36088: POP
36089: POP
// if tmp then
36090: LD_VAR 0 19
36094: IFFALSE 36106
// f := tmp ;
36096: LD_ADDR_VAR 0 12
36100: PUSH
36101: LD_VAR 0 19
36105: ST_TO_ADDR
// end ; x := personel [ i ] ;
36106: LD_ADDR_VAR 0 13
36110: PUSH
36111: LD_VAR 0 6
36115: PUSH
36116: LD_VAR 0 8
36120: ARRAY
36121: ST_TO_ADDR
// if x = - 1 then
36122: LD_VAR 0 13
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: EQUAL
36131: IFFALSE 36340
// begin for j in f do
36133: LD_ADDR_VAR 0 9
36137: PUSH
36138: LD_VAR 0 12
36142: PUSH
36143: FOR_IN
36144: IFFALSE 36336
// repeat InitHc ;
36146: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36150: LD_VAR 0 9
36154: PPUSH
36155: CALL_OW 266
36159: PUSH
36160: LD_INT 5
36162: EQUAL
36163: IFFALSE 36233
// begin if UnitsInside ( j ) < 3 then
36165: LD_VAR 0 9
36169: PPUSH
36170: CALL_OW 313
36174: PUSH
36175: LD_INT 3
36177: LESS
36178: IFFALSE 36214
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36180: LD_INT 0
36182: PPUSH
36183: LD_INT 5
36185: PUSH
36186: LD_INT 8
36188: PUSH
36189: LD_INT 9
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: PUSH
36197: LD_VAR 0 17
36201: ARRAY
36202: PPUSH
36203: LD_VAR 0 4
36207: PPUSH
36208: CALL_OW 380
36212: GO 36231
// PrepareHuman ( false , i , skill ) ;
36214: LD_INT 0
36216: PPUSH
36217: LD_VAR 0 8
36221: PPUSH
36222: LD_VAR 0 4
36226: PPUSH
36227: CALL_OW 380
// end else
36231: GO 36250
// PrepareHuman ( false , i , skill ) ;
36233: LD_INT 0
36235: PPUSH
36236: LD_VAR 0 8
36240: PPUSH
36241: LD_VAR 0 4
36245: PPUSH
36246: CALL_OW 380
// un := CreateHuman ;
36250: LD_ADDR_VAR 0 14
36254: PUSH
36255: CALL_OW 44
36259: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36260: LD_ADDR_VAR 0 7
36264: PUSH
36265: LD_VAR 0 7
36269: PPUSH
36270: LD_INT 1
36272: PPUSH
36273: LD_VAR 0 14
36277: PPUSH
36278: CALL_OW 2
36282: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36283: LD_VAR 0 14
36287: PPUSH
36288: LD_VAR 0 9
36292: PPUSH
36293: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36297: LD_VAR 0 9
36301: PPUSH
36302: CALL_OW 313
36306: PUSH
36307: LD_INT 6
36309: EQUAL
36310: PUSH
36311: LD_VAR 0 9
36315: PPUSH
36316: CALL_OW 266
36320: PUSH
36321: LD_INT 32
36323: PUSH
36324: LD_INT 31
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: IN
36331: OR
36332: IFFALSE 36146
36334: GO 36143
36336: POP
36337: POP
// end else
36338: GO 36720
// for j = 1 to x do
36340: LD_ADDR_VAR 0 9
36344: PUSH
36345: DOUBLE
36346: LD_INT 1
36348: DEC
36349: ST_TO_ADDR
36350: LD_VAR 0 13
36354: PUSH
36355: FOR_TO
36356: IFFALSE 36718
// begin InitHc ;
36358: CALL_OW 19
// if not f then
36362: LD_VAR 0 12
36366: NOT
36367: IFFALSE 36456
// begin PrepareHuman ( false , i , skill ) ;
36369: LD_INT 0
36371: PPUSH
36372: LD_VAR 0 8
36376: PPUSH
36377: LD_VAR 0 4
36381: PPUSH
36382: CALL_OW 380
// un := CreateHuman ;
36386: LD_ADDR_VAR 0 14
36390: PUSH
36391: CALL_OW 44
36395: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36396: LD_ADDR_VAR 0 7
36400: PUSH
36401: LD_VAR 0 7
36405: PPUSH
36406: LD_INT 1
36408: PPUSH
36409: LD_VAR 0 14
36413: PPUSH
36414: CALL_OW 2
36418: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36419: LD_VAR 0 14
36423: PPUSH
36424: LD_VAR 0 1
36428: PPUSH
36429: CALL_OW 250
36433: PPUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 251
36443: PPUSH
36444: LD_INT 10
36446: PPUSH
36447: LD_INT 0
36449: PPUSH
36450: CALL_OW 50
// continue ;
36454: GO 36355
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36456: LD_VAR 0 12
36460: PUSH
36461: LD_INT 1
36463: ARRAY
36464: PPUSH
36465: CALL_OW 313
36469: PUSH
36470: LD_VAR 0 12
36474: PUSH
36475: LD_INT 1
36477: ARRAY
36478: PPUSH
36479: CALL_OW 266
36483: PUSH
36484: LD_INT 32
36486: PUSH
36487: LD_INT 31
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: IN
36494: AND
36495: PUSH
36496: LD_VAR 0 12
36500: PUSH
36501: LD_INT 1
36503: ARRAY
36504: PPUSH
36505: CALL_OW 313
36509: PUSH
36510: LD_INT 6
36512: EQUAL
36513: OR
36514: IFFALSE 36534
// f := Delete ( f , 1 ) ;
36516: LD_ADDR_VAR 0 12
36520: PUSH
36521: LD_VAR 0 12
36525: PPUSH
36526: LD_INT 1
36528: PPUSH
36529: CALL_OW 3
36533: ST_TO_ADDR
// if not f then
36534: LD_VAR 0 12
36538: NOT
36539: IFFALSE 36557
// begin x := x + 2 ;
36541: LD_ADDR_VAR 0 13
36545: PUSH
36546: LD_VAR 0 13
36550: PUSH
36551: LD_INT 2
36553: PLUS
36554: ST_TO_ADDR
// continue ;
36555: GO 36355
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36557: LD_VAR 0 12
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: PPUSH
36566: CALL_OW 266
36570: PUSH
36571: LD_INT 5
36573: EQUAL
36574: IFFALSE 36648
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36576: LD_VAR 0 12
36580: PUSH
36581: LD_INT 1
36583: ARRAY
36584: PPUSH
36585: CALL_OW 313
36589: PUSH
36590: LD_INT 3
36592: LESS
36593: IFFALSE 36629
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36595: LD_INT 0
36597: PPUSH
36598: LD_INT 5
36600: PUSH
36601: LD_INT 8
36603: PUSH
36604: LD_INT 9
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: PUSH
36612: LD_VAR 0 17
36616: ARRAY
36617: PPUSH
36618: LD_VAR 0 4
36622: PPUSH
36623: CALL_OW 380
36627: GO 36646
// PrepareHuman ( false , i , skill ) ;
36629: LD_INT 0
36631: PPUSH
36632: LD_VAR 0 8
36636: PPUSH
36637: LD_VAR 0 4
36641: PPUSH
36642: CALL_OW 380
// end else
36646: GO 36665
// PrepareHuman ( false , i , skill ) ;
36648: LD_INT 0
36650: PPUSH
36651: LD_VAR 0 8
36655: PPUSH
36656: LD_VAR 0 4
36660: PPUSH
36661: CALL_OW 380
// un := CreateHuman ;
36665: LD_ADDR_VAR 0 14
36669: PUSH
36670: CALL_OW 44
36674: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36675: LD_ADDR_VAR 0 7
36679: PUSH
36680: LD_VAR 0 7
36684: PPUSH
36685: LD_INT 1
36687: PPUSH
36688: LD_VAR 0 14
36692: PPUSH
36693: CALL_OW 2
36697: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36698: LD_VAR 0 14
36702: PPUSH
36703: LD_VAR 0 12
36707: PUSH
36708: LD_INT 1
36710: ARRAY
36711: PPUSH
36712: CALL_OW 52
// end ;
36716: GO 36355
36718: POP
36719: POP
// end ;
36720: GO 35657
36722: POP
36723: POP
// result := result ^ buildings ;
36724: LD_ADDR_VAR 0 7
36728: PUSH
36729: LD_VAR 0 7
36733: PUSH
36734: LD_VAR 0 18
36738: ADD
36739: ST_TO_ADDR
// end else
36740: GO 36883
// begin for i = 1 to personel do
36742: LD_ADDR_VAR 0 8
36746: PUSH
36747: DOUBLE
36748: LD_INT 1
36750: DEC
36751: ST_TO_ADDR
36752: LD_VAR 0 6
36756: PUSH
36757: FOR_TO
36758: IFFALSE 36881
// begin if i > 4 then
36760: LD_VAR 0 8
36764: PUSH
36765: LD_INT 4
36767: GREATER
36768: IFFALSE 36772
// break ;
36770: GO 36881
// x := personel [ i ] ;
36772: LD_ADDR_VAR 0 13
36776: PUSH
36777: LD_VAR 0 6
36781: PUSH
36782: LD_VAR 0 8
36786: ARRAY
36787: ST_TO_ADDR
// if x = - 1 then
36788: LD_VAR 0 13
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: EQUAL
36797: IFFALSE 36801
// continue ;
36799: GO 36757
// PrepareHuman ( false , i , skill ) ;
36801: LD_INT 0
36803: PPUSH
36804: LD_VAR 0 8
36808: PPUSH
36809: LD_VAR 0 4
36813: PPUSH
36814: CALL_OW 380
// un := CreateHuman ;
36818: LD_ADDR_VAR 0 14
36822: PUSH
36823: CALL_OW 44
36827: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36828: LD_VAR 0 14
36832: PPUSH
36833: LD_VAR 0 1
36837: PPUSH
36838: CALL_OW 250
36842: PPUSH
36843: LD_VAR 0 1
36847: PPUSH
36848: CALL_OW 251
36852: PPUSH
36853: LD_INT 10
36855: PPUSH
36856: LD_INT 0
36858: PPUSH
36859: CALL_OW 50
// result := result ^ un ;
36863: LD_ADDR_VAR 0 7
36867: PUSH
36868: LD_VAR 0 7
36872: PUSH
36873: LD_VAR 0 14
36877: ADD
36878: ST_TO_ADDR
// end ;
36879: GO 36757
36881: POP
36882: POP
// end ; end ;
36883: LD_VAR 0 7
36887: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36888: LD_INT 0
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
36898: PPUSH
36899: PPUSH
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
36904: PPUSH
36905: PPUSH
// result := false ;
36906: LD_ADDR_VAR 0 3
36910: PUSH
36911: LD_INT 0
36913: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36914: LD_VAR 0 1
36918: NOT
36919: PUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 266
36929: PUSH
36930: LD_INT 32
36932: PUSH
36933: LD_INT 33
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: IN
36940: NOT
36941: OR
36942: IFFALSE 36946
// exit ;
36944: GO 38055
// nat := GetNation ( tower ) ;
36946: LD_ADDR_VAR 0 12
36950: PUSH
36951: LD_VAR 0 1
36955: PPUSH
36956: CALL_OW 248
36960: ST_TO_ADDR
// side := GetSide ( tower ) ;
36961: LD_ADDR_VAR 0 16
36965: PUSH
36966: LD_VAR 0 1
36970: PPUSH
36971: CALL_OW 255
36975: ST_TO_ADDR
// x := GetX ( tower ) ;
36976: LD_ADDR_VAR 0 10
36980: PUSH
36981: LD_VAR 0 1
36985: PPUSH
36986: CALL_OW 250
36990: ST_TO_ADDR
// y := GetY ( tower ) ;
36991: LD_ADDR_VAR 0 11
36995: PUSH
36996: LD_VAR 0 1
37000: PPUSH
37001: CALL_OW 251
37005: ST_TO_ADDR
// if not x or not y then
37006: LD_VAR 0 10
37010: NOT
37011: PUSH
37012: LD_VAR 0 11
37016: NOT
37017: OR
37018: IFFALSE 37022
// exit ;
37020: GO 38055
// weapon := 0 ;
37022: LD_ADDR_VAR 0 18
37026: PUSH
37027: LD_INT 0
37029: ST_TO_ADDR
// fac_list := [ ] ;
37030: LD_ADDR_VAR 0 17
37034: PUSH
37035: EMPTY
37036: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37037: LD_ADDR_VAR 0 6
37041: PUSH
37042: LD_VAR 0 1
37046: PPUSH
37047: CALL_OW 274
37051: PPUSH
37052: LD_VAR 0 2
37056: PPUSH
37057: LD_INT 0
37059: PPUSH
37060: CALL 34626 0 3
37064: PPUSH
37065: LD_INT 30
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PPUSH
37075: CALL_OW 72
37079: ST_TO_ADDR
// if not factories then
37080: LD_VAR 0 6
37084: NOT
37085: IFFALSE 37089
// exit ;
37087: GO 38055
// for i in factories do
37089: LD_ADDR_VAR 0 8
37093: PUSH
37094: LD_VAR 0 6
37098: PUSH
37099: FOR_IN
37100: IFFALSE 37125
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37102: LD_ADDR_VAR 0 17
37106: PUSH
37107: LD_VAR 0 17
37111: PUSH
37112: LD_VAR 0 8
37116: PPUSH
37117: CALL_OW 478
37121: UNION
37122: ST_TO_ADDR
37123: GO 37099
37125: POP
37126: POP
// if not fac_list then
37127: LD_VAR 0 17
37131: NOT
37132: IFFALSE 37136
// exit ;
37134: GO 38055
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37136: LD_ADDR_VAR 0 5
37140: PUSH
37141: LD_INT 4
37143: PUSH
37144: LD_INT 5
37146: PUSH
37147: LD_INT 9
37149: PUSH
37150: LD_INT 10
37152: PUSH
37153: LD_INT 6
37155: PUSH
37156: LD_INT 7
37158: PUSH
37159: LD_INT 11
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 27
37173: PUSH
37174: LD_INT 28
37176: PUSH
37177: LD_INT 26
37179: PUSH
37180: LD_INT 30
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 43
37191: PUSH
37192: LD_INT 44
37194: PUSH
37195: LD_INT 46
37197: PUSH
37198: LD_INT 45
37200: PUSH
37201: LD_INT 47
37203: PUSH
37204: LD_INT 49
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: PUSH
37220: LD_VAR 0 12
37224: ARRAY
37225: ST_TO_ADDR
// list := list isect fac_list ;
37226: LD_ADDR_VAR 0 5
37230: PUSH
37231: LD_VAR 0 5
37235: PUSH
37236: LD_VAR 0 17
37240: ISECT
37241: ST_TO_ADDR
// if not list then
37242: LD_VAR 0 5
37246: NOT
37247: IFFALSE 37251
// exit ;
37249: GO 38055
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37251: LD_VAR 0 12
37255: PUSH
37256: LD_INT 3
37258: EQUAL
37259: PUSH
37260: LD_INT 49
37262: PUSH
37263: LD_VAR 0 5
37267: IN
37268: AND
37269: PUSH
37270: LD_INT 31
37272: PPUSH
37273: LD_VAR 0 16
37277: PPUSH
37278: CALL_OW 321
37282: PUSH
37283: LD_INT 2
37285: EQUAL
37286: AND
37287: IFFALSE 37347
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37289: LD_INT 22
37291: PUSH
37292: LD_VAR 0 16
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 35
37303: PUSH
37304: LD_INT 49
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 91
37313: PUSH
37314: LD_VAR 0 1
37318: PUSH
37319: LD_INT 10
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: PPUSH
37332: CALL_OW 69
37336: NOT
37337: IFFALSE 37347
// weapon := ru_time_lapser ;
37339: LD_ADDR_VAR 0 18
37343: PUSH
37344: LD_INT 49
37346: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37347: LD_VAR 0 12
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: IN
37362: PUSH
37363: LD_INT 11
37365: PUSH
37366: LD_VAR 0 5
37370: IN
37371: PUSH
37372: LD_INT 30
37374: PUSH
37375: LD_VAR 0 5
37379: IN
37380: OR
37381: AND
37382: PUSH
37383: LD_INT 6
37385: PPUSH
37386: LD_VAR 0 16
37390: PPUSH
37391: CALL_OW 321
37395: PUSH
37396: LD_INT 2
37398: EQUAL
37399: AND
37400: IFFALSE 37565
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37402: LD_INT 22
37404: PUSH
37405: LD_VAR 0 16
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: LD_INT 35
37419: PUSH
37420: LD_INT 11
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 35
37429: PUSH
37430: LD_INT 30
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 91
37444: PUSH
37445: LD_VAR 0 1
37449: PUSH
37450: LD_INT 18
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: PPUSH
37463: CALL_OW 69
37467: NOT
37468: PUSH
37469: LD_INT 22
37471: PUSH
37472: LD_VAR 0 16
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: LD_INT 30
37486: PUSH
37487: LD_INT 32
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 30
37496: PUSH
37497: LD_INT 33
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 91
37511: PUSH
37512: LD_VAR 0 1
37516: PUSH
37517: LD_INT 12
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: PUSH
37530: EMPTY
37531: LIST
37532: PPUSH
37533: CALL_OW 69
37537: PUSH
37538: LD_INT 2
37540: GREATER
37541: AND
37542: IFFALSE 37565
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37544: LD_ADDR_VAR 0 18
37548: PUSH
37549: LD_INT 11
37551: PUSH
37552: LD_INT 30
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_VAR 0 12
37563: ARRAY
37564: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37565: LD_VAR 0 18
37569: NOT
37570: PUSH
37571: LD_INT 40
37573: PPUSH
37574: LD_VAR 0 16
37578: PPUSH
37579: CALL_OW 321
37583: PUSH
37584: LD_INT 2
37586: EQUAL
37587: AND
37588: PUSH
37589: LD_INT 7
37591: PUSH
37592: LD_VAR 0 5
37596: IN
37597: PUSH
37598: LD_INT 28
37600: PUSH
37601: LD_VAR 0 5
37605: IN
37606: OR
37607: PUSH
37608: LD_INT 45
37610: PUSH
37611: LD_VAR 0 5
37615: IN
37616: OR
37617: AND
37618: IFFALSE 37872
// begin hex := GetHexInfo ( x , y ) ;
37620: LD_ADDR_VAR 0 4
37624: PUSH
37625: LD_VAR 0 10
37629: PPUSH
37630: LD_VAR 0 11
37634: PPUSH
37635: CALL_OW 546
37639: ST_TO_ADDR
// if hex [ 1 ] then
37640: LD_VAR 0 4
37644: PUSH
37645: LD_INT 1
37647: ARRAY
37648: IFFALSE 37652
// exit ;
37650: GO 38055
// height := hex [ 2 ] ;
37652: LD_ADDR_VAR 0 15
37656: PUSH
37657: LD_VAR 0 4
37661: PUSH
37662: LD_INT 2
37664: ARRAY
37665: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37666: LD_ADDR_VAR 0 14
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 5
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: ST_TO_ADDR
// for i in tmp do
37689: LD_ADDR_VAR 0 8
37693: PUSH
37694: LD_VAR 0 14
37698: PUSH
37699: FOR_IN
37700: IFFALSE 37870
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37702: LD_ADDR_VAR 0 9
37706: PUSH
37707: LD_VAR 0 10
37711: PPUSH
37712: LD_VAR 0 8
37716: PPUSH
37717: LD_INT 5
37719: PPUSH
37720: CALL_OW 272
37724: PUSH
37725: LD_VAR 0 11
37729: PPUSH
37730: LD_VAR 0 8
37734: PPUSH
37735: LD_INT 5
37737: PPUSH
37738: CALL_OW 273
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37747: LD_VAR 0 9
37751: PUSH
37752: LD_INT 1
37754: ARRAY
37755: PPUSH
37756: LD_VAR 0 9
37760: PUSH
37761: LD_INT 2
37763: ARRAY
37764: PPUSH
37765: CALL_OW 488
37769: IFFALSE 37868
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37771: LD_ADDR_VAR 0 4
37775: PUSH
37776: LD_VAR 0 9
37780: PUSH
37781: LD_INT 1
37783: ARRAY
37784: PPUSH
37785: LD_VAR 0 9
37789: PUSH
37790: LD_INT 2
37792: ARRAY
37793: PPUSH
37794: CALL_OW 546
37798: ST_TO_ADDR
// if hex [ 1 ] then
37799: LD_VAR 0 4
37803: PUSH
37804: LD_INT 1
37806: ARRAY
37807: IFFALSE 37811
// continue ;
37809: GO 37699
// h := hex [ 2 ] ;
37811: LD_ADDR_VAR 0 13
37815: PUSH
37816: LD_VAR 0 4
37820: PUSH
37821: LD_INT 2
37823: ARRAY
37824: ST_TO_ADDR
// if h + 7 < height then
37825: LD_VAR 0 13
37829: PUSH
37830: LD_INT 7
37832: PLUS
37833: PUSH
37834: LD_VAR 0 15
37838: LESS
37839: IFFALSE 37868
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37841: LD_ADDR_VAR 0 18
37845: PUSH
37846: LD_INT 7
37848: PUSH
37849: LD_INT 28
37851: PUSH
37852: LD_INT 45
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: PUSH
37860: LD_VAR 0 12
37864: ARRAY
37865: ST_TO_ADDR
// break ;
37866: GO 37870
// end ; end ; end ;
37868: GO 37699
37870: POP
37871: POP
// end ; if not weapon then
37872: LD_VAR 0 18
37876: NOT
37877: IFFALSE 37937
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37879: LD_ADDR_VAR 0 5
37883: PUSH
37884: LD_VAR 0 5
37888: PUSH
37889: LD_INT 11
37891: PUSH
37892: LD_INT 30
37894: PUSH
37895: LD_INT 49
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: DIFF
37903: ST_TO_ADDR
// if not list then
37904: LD_VAR 0 5
37908: NOT
37909: IFFALSE 37913
// exit ;
37911: GO 38055
// weapon := list [ rand ( 1 , list ) ] ;
37913: LD_ADDR_VAR 0 18
37917: PUSH
37918: LD_VAR 0 5
37922: PUSH
37923: LD_INT 1
37925: PPUSH
37926: LD_VAR 0 5
37930: PPUSH
37931: CALL_OW 12
37935: ARRAY
37936: ST_TO_ADDR
// end ; if weapon then
37937: LD_VAR 0 18
37941: IFFALSE 38055
// begin tmp := CostOfWeapon ( weapon ) ;
37943: LD_ADDR_VAR 0 14
37947: PUSH
37948: LD_VAR 0 18
37952: PPUSH
37953: CALL_OW 451
37957: ST_TO_ADDR
// j := GetBase ( tower ) ;
37958: LD_ADDR_VAR 0 9
37962: PUSH
37963: LD_VAR 0 1
37967: PPUSH
37968: CALL_OW 274
37972: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37973: LD_VAR 0 9
37977: PPUSH
37978: LD_INT 1
37980: PPUSH
37981: CALL_OW 275
37985: PUSH
37986: LD_VAR 0 14
37990: PUSH
37991: LD_INT 1
37993: ARRAY
37994: GREATEREQUAL
37995: PUSH
37996: LD_VAR 0 9
38000: PPUSH
38001: LD_INT 2
38003: PPUSH
38004: CALL_OW 275
38008: PUSH
38009: LD_VAR 0 14
38013: PUSH
38014: LD_INT 2
38016: ARRAY
38017: GREATEREQUAL
38018: AND
38019: PUSH
38020: LD_VAR 0 9
38024: PPUSH
38025: LD_INT 3
38027: PPUSH
38028: CALL_OW 275
38032: PUSH
38033: LD_VAR 0 14
38037: PUSH
38038: LD_INT 3
38040: ARRAY
38041: GREATEREQUAL
38042: AND
38043: IFFALSE 38055
// result := weapon ;
38045: LD_ADDR_VAR 0 3
38049: PUSH
38050: LD_VAR 0 18
38054: ST_TO_ADDR
// end ; end ;
38055: LD_VAR 0 3
38059: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38060: LD_INT 0
38062: PPUSH
38063: PPUSH
// result := true ;
38064: LD_ADDR_VAR 0 3
38068: PUSH
38069: LD_INT 1
38071: ST_TO_ADDR
// if array1 = array2 then
38072: LD_VAR 0 1
38076: PUSH
38077: LD_VAR 0 2
38081: EQUAL
38082: IFFALSE 38142
// begin for i = 1 to array1 do
38084: LD_ADDR_VAR 0 4
38088: PUSH
38089: DOUBLE
38090: LD_INT 1
38092: DEC
38093: ST_TO_ADDR
38094: LD_VAR 0 1
38098: PUSH
38099: FOR_TO
38100: IFFALSE 38138
// if array1 [ i ] <> array2 [ i ] then
38102: LD_VAR 0 1
38106: PUSH
38107: LD_VAR 0 4
38111: ARRAY
38112: PUSH
38113: LD_VAR 0 2
38117: PUSH
38118: LD_VAR 0 4
38122: ARRAY
38123: NONEQUAL
38124: IFFALSE 38136
// begin result := false ;
38126: LD_ADDR_VAR 0 3
38130: PUSH
38131: LD_INT 0
38133: ST_TO_ADDR
// break ;
38134: GO 38138
// end ;
38136: GO 38099
38138: POP
38139: POP
// end else
38140: GO 38150
// result := false ;
38142: LD_ADDR_VAR 0 3
38146: PUSH
38147: LD_INT 0
38149: ST_TO_ADDR
// end ;
38150: LD_VAR 0 3
38154: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38155: LD_INT 0
38157: PPUSH
38158: PPUSH
// if not array1 or not array2 then
38159: LD_VAR 0 1
38163: NOT
38164: PUSH
38165: LD_VAR 0 2
38169: NOT
38170: OR
38171: IFFALSE 38175
// exit ;
38173: GO 38239
// result := true ;
38175: LD_ADDR_VAR 0 3
38179: PUSH
38180: LD_INT 1
38182: ST_TO_ADDR
// for i = 1 to array1 do
38183: LD_ADDR_VAR 0 4
38187: PUSH
38188: DOUBLE
38189: LD_INT 1
38191: DEC
38192: ST_TO_ADDR
38193: LD_VAR 0 1
38197: PUSH
38198: FOR_TO
38199: IFFALSE 38237
// if array1 [ i ] <> array2 [ i ] then
38201: LD_VAR 0 1
38205: PUSH
38206: LD_VAR 0 4
38210: ARRAY
38211: PUSH
38212: LD_VAR 0 2
38216: PUSH
38217: LD_VAR 0 4
38221: ARRAY
38222: NONEQUAL
38223: IFFALSE 38235
// begin result := false ;
38225: LD_ADDR_VAR 0 3
38229: PUSH
38230: LD_INT 0
38232: ST_TO_ADDR
// break ;
38233: GO 38237
// end ;
38235: GO 38198
38237: POP
38238: POP
// end ;
38239: LD_VAR 0 3
38243: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38244: LD_INT 0
38246: PPUSH
38247: PPUSH
38248: PPUSH
// pom := GetBase ( fac ) ;
38249: LD_ADDR_VAR 0 5
38253: PUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 274
38263: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38264: LD_ADDR_VAR 0 4
38268: PUSH
38269: LD_VAR 0 2
38273: PUSH
38274: LD_INT 1
38276: ARRAY
38277: PPUSH
38278: LD_VAR 0 2
38282: PUSH
38283: LD_INT 2
38285: ARRAY
38286: PPUSH
38287: LD_VAR 0 2
38291: PUSH
38292: LD_INT 3
38294: ARRAY
38295: PPUSH
38296: LD_VAR 0 2
38300: PUSH
38301: LD_INT 4
38303: ARRAY
38304: PPUSH
38305: CALL_OW 449
38309: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38310: LD_ADDR_VAR 0 3
38314: PUSH
38315: LD_VAR 0 5
38319: PPUSH
38320: LD_INT 1
38322: PPUSH
38323: CALL_OW 275
38327: PUSH
38328: LD_VAR 0 4
38332: PUSH
38333: LD_INT 1
38335: ARRAY
38336: GREATEREQUAL
38337: PUSH
38338: LD_VAR 0 5
38342: PPUSH
38343: LD_INT 2
38345: PPUSH
38346: CALL_OW 275
38350: PUSH
38351: LD_VAR 0 4
38355: PUSH
38356: LD_INT 2
38358: ARRAY
38359: GREATEREQUAL
38360: AND
38361: PUSH
38362: LD_VAR 0 5
38366: PPUSH
38367: LD_INT 3
38369: PPUSH
38370: CALL_OW 275
38374: PUSH
38375: LD_VAR 0 4
38379: PUSH
38380: LD_INT 3
38382: ARRAY
38383: GREATEREQUAL
38384: AND
38385: ST_TO_ADDR
// end ;
38386: LD_VAR 0 3
38390: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38391: LD_INT 0
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
// pom := GetBase ( building ) ;
38397: LD_ADDR_VAR 0 3
38401: PUSH
38402: LD_VAR 0 1
38406: PPUSH
38407: CALL_OW 274
38411: ST_TO_ADDR
// if not pom then
38412: LD_VAR 0 3
38416: NOT
38417: IFFALSE 38421
// exit ;
38419: GO 38591
// btype := GetBType ( building ) ;
38421: LD_ADDR_VAR 0 5
38425: PUSH
38426: LD_VAR 0 1
38430: PPUSH
38431: CALL_OW 266
38435: ST_TO_ADDR
// if btype = b_armoury then
38436: LD_VAR 0 5
38440: PUSH
38441: LD_INT 4
38443: EQUAL
38444: IFFALSE 38454
// btype := b_barracks ;
38446: LD_ADDR_VAR 0 5
38450: PUSH
38451: LD_INT 5
38453: ST_TO_ADDR
// if btype = b_depot then
38454: LD_VAR 0 5
38458: PUSH
38459: LD_INT 0
38461: EQUAL
38462: IFFALSE 38472
// btype := b_warehouse ;
38464: LD_ADDR_VAR 0 5
38468: PUSH
38469: LD_INT 1
38471: ST_TO_ADDR
// if btype = b_workshop then
38472: LD_VAR 0 5
38476: PUSH
38477: LD_INT 2
38479: EQUAL
38480: IFFALSE 38490
// btype := b_factory ;
38482: LD_ADDR_VAR 0 5
38486: PUSH
38487: LD_INT 3
38489: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38490: LD_ADDR_VAR 0 4
38494: PUSH
38495: LD_VAR 0 5
38499: PPUSH
38500: LD_VAR 0 1
38504: PPUSH
38505: CALL_OW 248
38509: PPUSH
38510: CALL_OW 450
38514: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38515: LD_ADDR_VAR 0 2
38519: PUSH
38520: LD_VAR 0 3
38524: PPUSH
38525: LD_INT 1
38527: PPUSH
38528: CALL_OW 275
38532: PUSH
38533: LD_VAR 0 4
38537: PUSH
38538: LD_INT 1
38540: ARRAY
38541: GREATEREQUAL
38542: PUSH
38543: LD_VAR 0 3
38547: PPUSH
38548: LD_INT 2
38550: PPUSH
38551: CALL_OW 275
38555: PUSH
38556: LD_VAR 0 4
38560: PUSH
38561: LD_INT 2
38563: ARRAY
38564: GREATEREQUAL
38565: AND
38566: PUSH
38567: LD_VAR 0 3
38571: PPUSH
38572: LD_INT 3
38574: PPUSH
38575: CALL_OW 275
38579: PUSH
38580: LD_VAR 0 4
38584: PUSH
38585: LD_INT 3
38587: ARRAY
38588: GREATEREQUAL
38589: AND
38590: ST_TO_ADDR
// end ;
38591: LD_VAR 0 2
38595: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38596: LD_INT 0
38598: PPUSH
38599: PPUSH
38600: PPUSH
// pom := GetBase ( building ) ;
38601: LD_ADDR_VAR 0 4
38605: PUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL_OW 274
38615: ST_TO_ADDR
// if not pom then
38616: LD_VAR 0 4
38620: NOT
38621: IFFALSE 38625
// exit ;
38623: GO 38726
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38625: LD_ADDR_VAR 0 5
38629: PUSH
38630: LD_VAR 0 2
38634: PPUSH
38635: LD_VAR 0 1
38639: PPUSH
38640: CALL_OW 248
38644: PPUSH
38645: CALL_OW 450
38649: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38650: LD_ADDR_VAR 0 3
38654: PUSH
38655: LD_VAR 0 4
38659: PPUSH
38660: LD_INT 1
38662: PPUSH
38663: CALL_OW 275
38667: PUSH
38668: LD_VAR 0 5
38672: PUSH
38673: LD_INT 1
38675: ARRAY
38676: GREATEREQUAL
38677: PUSH
38678: LD_VAR 0 4
38682: PPUSH
38683: LD_INT 2
38685: PPUSH
38686: CALL_OW 275
38690: PUSH
38691: LD_VAR 0 5
38695: PUSH
38696: LD_INT 2
38698: ARRAY
38699: GREATEREQUAL
38700: AND
38701: PUSH
38702: LD_VAR 0 4
38706: PPUSH
38707: LD_INT 3
38709: PPUSH
38710: CALL_OW 275
38714: PUSH
38715: LD_VAR 0 5
38719: PUSH
38720: LD_INT 3
38722: ARRAY
38723: GREATEREQUAL
38724: AND
38725: ST_TO_ADDR
// end ;
38726: LD_VAR 0 3
38730: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38731: LD_INT 0
38733: PPUSH
38734: PPUSH
38735: PPUSH
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
38741: PPUSH
38742: PPUSH
38743: PPUSH
// result := false ;
38744: LD_ADDR_VAR 0 8
38748: PUSH
38749: LD_INT 0
38751: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38752: LD_VAR 0 5
38756: NOT
38757: PUSH
38758: LD_VAR 0 1
38762: NOT
38763: OR
38764: PUSH
38765: LD_VAR 0 2
38769: NOT
38770: OR
38771: PUSH
38772: LD_VAR 0 3
38776: NOT
38777: OR
38778: IFFALSE 38782
// exit ;
38780: GO 39596
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38782: LD_ADDR_VAR 0 14
38786: PUSH
38787: LD_VAR 0 1
38791: PPUSH
38792: LD_VAR 0 2
38796: PPUSH
38797: LD_VAR 0 3
38801: PPUSH
38802: LD_VAR 0 4
38806: PPUSH
38807: LD_VAR 0 5
38811: PUSH
38812: LD_INT 1
38814: ARRAY
38815: PPUSH
38816: CALL_OW 248
38820: PPUSH
38821: LD_INT 0
38823: PPUSH
38824: CALL 40829 0 6
38828: ST_TO_ADDR
// if not hexes then
38829: LD_VAR 0 14
38833: NOT
38834: IFFALSE 38838
// exit ;
38836: GO 39596
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38838: LD_ADDR_VAR 0 17
38842: PUSH
38843: LD_VAR 0 5
38847: PPUSH
38848: LD_INT 22
38850: PUSH
38851: LD_VAR 0 13
38855: PPUSH
38856: CALL_OW 255
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 30
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 30
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PPUSH
38897: CALL_OW 72
38901: ST_TO_ADDR
// for i = 1 to hexes do
38902: LD_ADDR_VAR 0 9
38906: PUSH
38907: DOUBLE
38908: LD_INT 1
38910: DEC
38911: ST_TO_ADDR
38912: LD_VAR 0 14
38916: PUSH
38917: FOR_TO
38918: IFFALSE 39594
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38920: LD_ADDR_VAR 0 13
38924: PUSH
38925: LD_VAR 0 14
38929: PUSH
38930: LD_VAR 0 9
38934: ARRAY
38935: PUSH
38936: LD_INT 1
38938: ARRAY
38939: PPUSH
38940: LD_VAR 0 14
38944: PUSH
38945: LD_VAR 0 9
38949: ARRAY
38950: PUSH
38951: LD_INT 2
38953: ARRAY
38954: PPUSH
38955: CALL_OW 428
38959: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38960: LD_VAR 0 14
38964: PUSH
38965: LD_VAR 0 9
38969: ARRAY
38970: PUSH
38971: LD_INT 1
38973: ARRAY
38974: PPUSH
38975: LD_VAR 0 14
38979: PUSH
38980: LD_VAR 0 9
38984: ARRAY
38985: PUSH
38986: LD_INT 2
38988: ARRAY
38989: PPUSH
38990: CALL_OW 351
38994: PUSH
38995: LD_VAR 0 14
38999: PUSH
39000: LD_VAR 0 9
39004: ARRAY
39005: PUSH
39006: LD_INT 1
39008: ARRAY
39009: PPUSH
39010: LD_VAR 0 14
39014: PUSH
39015: LD_VAR 0 9
39019: ARRAY
39020: PUSH
39021: LD_INT 2
39023: ARRAY
39024: PPUSH
39025: CALL_OW 488
39029: NOT
39030: OR
39031: PUSH
39032: LD_VAR 0 13
39036: PPUSH
39037: CALL_OW 247
39041: PUSH
39042: LD_INT 3
39044: EQUAL
39045: OR
39046: IFFALSE 39052
// exit ;
39048: POP
39049: POP
39050: GO 39596
// if not tmp then
39052: LD_VAR 0 13
39056: NOT
39057: IFFALSE 39061
// continue ;
39059: GO 38917
// result := true ;
39061: LD_ADDR_VAR 0 8
39065: PUSH
39066: LD_INT 1
39068: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39069: LD_VAR 0 6
39073: PUSH
39074: LD_VAR 0 13
39078: PPUSH
39079: CALL_OW 247
39083: PUSH
39084: LD_INT 2
39086: EQUAL
39087: AND
39088: PUSH
39089: LD_VAR 0 13
39093: PPUSH
39094: CALL_OW 263
39098: PUSH
39099: LD_INT 1
39101: EQUAL
39102: AND
39103: IFFALSE 39267
// begin if IsDrivenBy ( tmp ) then
39105: LD_VAR 0 13
39109: PPUSH
39110: CALL_OW 311
39114: IFFALSE 39118
// continue ;
39116: GO 38917
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39118: LD_VAR 0 6
39122: PPUSH
39123: LD_INT 3
39125: PUSH
39126: LD_INT 60
39128: PUSH
39129: EMPTY
39130: LIST
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: PUSH
39139: LD_INT 55
39141: PUSH
39142: EMPTY
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PPUSH
39153: CALL_OW 72
39157: IFFALSE 39265
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39159: LD_ADDR_VAR 0 18
39163: PUSH
39164: LD_VAR 0 6
39168: PPUSH
39169: LD_INT 3
39171: PUSH
39172: LD_INT 60
39174: PUSH
39175: EMPTY
39176: LIST
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 3
39184: PUSH
39185: LD_INT 55
39187: PUSH
39188: EMPTY
39189: LIST
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PPUSH
39199: CALL_OW 72
39203: PUSH
39204: LD_INT 1
39206: ARRAY
39207: ST_TO_ADDR
// if IsInUnit ( driver ) then
39208: LD_VAR 0 18
39212: PPUSH
39213: CALL_OW 310
39217: IFFALSE 39228
// ComExit ( driver ) ;
39219: LD_VAR 0 18
39223: PPUSH
39224: CALL 64590 0 1
// AddComEnterUnit ( driver , tmp ) ;
39228: LD_VAR 0 18
39232: PPUSH
39233: LD_VAR 0 13
39237: PPUSH
39238: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39242: LD_VAR 0 18
39246: PPUSH
39247: LD_VAR 0 7
39251: PPUSH
39252: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39256: LD_VAR 0 18
39260: PPUSH
39261: CALL_OW 181
// end ; continue ;
39265: GO 38917
// end ; if not cleaners or not tmp in cleaners then
39267: LD_VAR 0 6
39271: NOT
39272: PUSH
39273: LD_VAR 0 13
39277: PUSH
39278: LD_VAR 0 6
39282: IN
39283: NOT
39284: OR
39285: IFFALSE 39592
// begin if dep then
39287: LD_VAR 0 17
39291: IFFALSE 39427
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39293: LD_ADDR_VAR 0 16
39297: PUSH
39298: LD_VAR 0 17
39302: PUSH
39303: LD_INT 1
39305: ARRAY
39306: PPUSH
39307: CALL_OW 250
39311: PPUSH
39312: LD_VAR 0 17
39316: PUSH
39317: LD_INT 1
39319: ARRAY
39320: PPUSH
39321: CALL_OW 254
39325: PPUSH
39326: LD_INT 5
39328: PPUSH
39329: CALL_OW 272
39333: PUSH
39334: LD_VAR 0 17
39338: PUSH
39339: LD_INT 1
39341: ARRAY
39342: PPUSH
39343: CALL_OW 251
39347: PPUSH
39348: LD_VAR 0 17
39352: PUSH
39353: LD_INT 1
39355: ARRAY
39356: PPUSH
39357: CALL_OW 254
39361: PPUSH
39362: LD_INT 5
39364: PPUSH
39365: CALL_OW 273
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39374: LD_VAR 0 16
39378: PUSH
39379: LD_INT 1
39381: ARRAY
39382: PPUSH
39383: LD_VAR 0 16
39387: PUSH
39388: LD_INT 2
39390: ARRAY
39391: PPUSH
39392: CALL_OW 488
39396: IFFALSE 39427
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39398: LD_VAR 0 13
39402: PPUSH
39403: LD_VAR 0 16
39407: PUSH
39408: LD_INT 1
39410: ARRAY
39411: PPUSH
39412: LD_VAR 0 16
39416: PUSH
39417: LD_INT 2
39419: ARRAY
39420: PPUSH
39421: CALL_OW 111
// continue ;
39425: GO 38917
// end ; end ; r := GetDir ( tmp ) ;
39427: LD_ADDR_VAR 0 15
39431: PUSH
39432: LD_VAR 0 13
39436: PPUSH
39437: CALL_OW 254
39441: ST_TO_ADDR
// if r = 5 then
39442: LD_VAR 0 15
39446: PUSH
39447: LD_INT 5
39449: EQUAL
39450: IFFALSE 39460
// r := 0 ;
39452: LD_ADDR_VAR 0 15
39456: PUSH
39457: LD_INT 0
39459: ST_TO_ADDR
// for j = r to 5 do
39460: LD_ADDR_VAR 0 10
39464: PUSH
39465: DOUBLE
39466: LD_VAR 0 15
39470: DEC
39471: ST_TO_ADDR
39472: LD_INT 5
39474: PUSH
39475: FOR_TO
39476: IFFALSE 39590
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39478: LD_ADDR_VAR 0 11
39482: PUSH
39483: LD_VAR 0 13
39487: PPUSH
39488: CALL_OW 250
39492: PPUSH
39493: LD_VAR 0 10
39497: PPUSH
39498: LD_INT 2
39500: PPUSH
39501: CALL_OW 272
39505: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39506: LD_ADDR_VAR 0 12
39510: PUSH
39511: LD_VAR 0 13
39515: PPUSH
39516: CALL_OW 251
39520: PPUSH
39521: LD_VAR 0 10
39525: PPUSH
39526: LD_INT 2
39528: PPUSH
39529: CALL_OW 273
39533: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39534: LD_VAR 0 11
39538: PPUSH
39539: LD_VAR 0 12
39543: PPUSH
39544: CALL_OW 488
39548: PUSH
39549: LD_VAR 0 11
39553: PPUSH
39554: LD_VAR 0 12
39558: PPUSH
39559: CALL_OW 428
39563: NOT
39564: AND
39565: IFFALSE 39588
// begin ComMoveXY ( tmp , _x , _y ) ;
39567: LD_VAR 0 13
39571: PPUSH
39572: LD_VAR 0 11
39576: PPUSH
39577: LD_VAR 0 12
39581: PPUSH
39582: CALL_OW 111
// break ;
39586: GO 39590
// end ; end ;
39588: GO 39475
39590: POP
39591: POP
// end ; end ;
39592: GO 38917
39594: POP
39595: POP
// end ;
39596: LD_VAR 0 8
39600: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39601: LD_INT 0
39603: PPUSH
// result := true ;
39604: LD_ADDR_VAR 0 3
39608: PUSH
39609: LD_INT 1
39611: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39612: LD_VAR 0 2
39616: PUSH
39617: LD_INT 24
39619: DOUBLE
39620: EQUAL
39621: IFTRUE 39631
39623: LD_INT 33
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39656
39631: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39632: LD_ADDR_VAR 0 3
39636: PUSH
39637: LD_INT 32
39639: PPUSH
39640: LD_VAR 0 1
39644: PPUSH
39645: CALL_OW 321
39649: PUSH
39650: LD_INT 2
39652: EQUAL
39653: ST_TO_ADDR
39654: GO 39972
39656: LD_INT 20
39658: DOUBLE
39659: EQUAL
39660: IFTRUE 39664
39662: GO 39689
39664: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39665: LD_ADDR_VAR 0 3
39669: PUSH
39670: LD_INT 6
39672: PPUSH
39673: LD_VAR 0 1
39677: PPUSH
39678: CALL_OW 321
39682: PUSH
39683: LD_INT 2
39685: EQUAL
39686: ST_TO_ADDR
39687: GO 39972
39689: LD_INT 22
39691: DOUBLE
39692: EQUAL
39693: IFTRUE 39703
39695: LD_INT 36
39697: DOUBLE
39698: EQUAL
39699: IFTRUE 39703
39701: GO 39728
39703: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39704: LD_ADDR_VAR 0 3
39708: PUSH
39709: LD_INT 15
39711: PPUSH
39712: LD_VAR 0 1
39716: PPUSH
39717: CALL_OW 321
39721: PUSH
39722: LD_INT 2
39724: EQUAL
39725: ST_TO_ADDR
39726: GO 39972
39728: LD_INT 30
39730: DOUBLE
39731: EQUAL
39732: IFTRUE 39736
39734: GO 39761
39736: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39737: LD_ADDR_VAR 0 3
39741: PUSH
39742: LD_INT 20
39744: PPUSH
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 321
39754: PUSH
39755: LD_INT 2
39757: EQUAL
39758: ST_TO_ADDR
39759: GO 39972
39761: LD_INT 28
39763: DOUBLE
39764: EQUAL
39765: IFTRUE 39775
39767: LD_INT 21
39769: DOUBLE
39770: EQUAL
39771: IFTRUE 39775
39773: GO 39800
39775: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39776: LD_ADDR_VAR 0 3
39780: PUSH
39781: LD_INT 21
39783: PPUSH
39784: LD_VAR 0 1
39788: PPUSH
39789: CALL_OW 321
39793: PUSH
39794: LD_INT 2
39796: EQUAL
39797: ST_TO_ADDR
39798: GO 39972
39800: LD_INT 16
39802: DOUBLE
39803: EQUAL
39804: IFTRUE 39808
39806: GO 39833
39808: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39809: LD_ADDR_VAR 0 3
39813: PUSH
39814: LD_INT 84
39816: PPUSH
39817: LD_VAR 0 1
39821: PPUSH
39822: CALL_OW 321
39826: PUSH
39827: LD_INT 2
39829: EQUAL
39830: ST_TO_ADDR
39831: GO 39972
39833: LD_INT 19
39835: DOUBLE
39836: EQUAL
39837: IFTRUE 39847
39839: LD_INT 23
39841: DOUBLE
39842: EQUAL
39843: IFTRUE 39847
39845: GO 39872
39847: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39848: LD_ADDR_VAR 0 3
39852: PUSH
39853: LD_INT 83
39855: PPUSH
39856: LD_VAR 0 1
39860: PPUSH
39861: CALL_OW 321
39865: PUSH
39866: LD_INT 2
39868: EQUAL
39869: ST_TO_ADDR
39870: GO 39972
39872: LD_INT 17
39874: DOUBLE
39875: EQUAL
39876: IFTRUE 39880
39878: GO 39905
39880: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39881: LD_ADDR_VAR 0 3
39885: PUSH
39886: LD_INT 39
39888: PPUSH
39889: LD_VAR 0 1
39893: PPUSH
39894: CALL_OW 321
39898: PUSH
39899: LD_INT 2
39901: EQUAL
39902: ST_TO_ADDR
39903: GO 39972
39905: LD_INT 18
39907: DOUBLE
39908: EQUAL
39909: IFTRUE 39913
39911: GO 39938
39913: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39914: LD_ADDR_VAR 0 3
39918: PUSH
39919: LD_INT 40
39921: PPUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 321
39931: PUSH
39932: LD_INT 2
39934: EQUAL
39935: ST_TO_ADDR
39936: GO 39972
39938: LD_INT 27
39940: DOUBLE
39941: EQUAL
39942: IFTRUE 39946
39944: GO 39971
39946: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39947: LD_ADDR_VAR 0 3
39951: PUSH
39952: LD_INT 35
39954: PPUSH
39955: LD_VAR 0 1
39959: PPUSH
39960: CALL_OW 321
39964: PUSH
39965: LD_INT 2
39967: EQUAL
39968: ST_TO_ADDR
39969: GO 39972
39971: POP
// end ;
39972: LD_VAR 0 3
39976: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39977: LD_INT 0
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
// result := false ;
39990: LD_ADDR_VAR 0 6
39994: PUSH
39995: LD_INT 0
39997: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39998: LD_VAR 0 1
40002: NOT
40003: PUSH
40004: LD_VAR 0 1
40008: PPUSH
40009: CALL_OW 266
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: IN
40024: NOT
40025: OR
40026: PUSH
40027: LD_VAR 0 2
40031: NOT
40032: OR
40033: PUSH
40034: LD_VAR 0 5
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: LD_INT 4
40053: PUSH
40054: LD_INT 5
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: IN
40065: NOT
40066: OR
40067: PUSH
40068: LD_VAR 0 3
40072: PPUSH
40073: LD_VAR 0 4
40077: PPUSH
40078: CALL_OW 488
40082: NOT
40083: OR
40084: IFFALSE 40088
// exit ;
40086: GO 40824
// side := GetSide ( depot ) ;
40088: LD_ADDR_VAR 0 9
40092: PUSH
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL_OW 255
40102: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40103: LD_VAR 0 9
40107: PPUSH
40108: LD_VAR 0 2
40112: PPUSH
40113: CALL 39601 0 2
40117: NOT
40118: IFFALSE 40122
// exit ;
40120: GO 40824
// pom := GetBase ( depot ) ;
40122: LD_ADDR_VAR 0 10
40126: PUSH
40127: LD_VAR 0 1
40131: PPUSH
40132: CALL_OW 274
40136: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40137: LD_ADDR_VAR 0 11
40141: PUSH
40142: LD_VAR 0 2
40146: PPUSH
40147: LD_VAR 0 1
40151: PPUSH
40152: CALL_OW 248
40156: PPUSH
40157: CALL_OW 450
40161: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40162: LD_VAR 0 10
40166: PPUSH
40167: LD_INT 1
40169: PPUSH
40170: CALL_OW 275
40174: PUSH
40175: LD_VAR 0 11
40179: PUSH
40180: LD_INT 1
40182: ARRAY
40183: GREATEREQUAL
40184: PUSH
40185: LD_VAR 0 10
40189: PPUSH
40190: LD_INT 2
40192: PPUSH
40193: CALL_OW 275
40197: PUSH
40198: LD_VAR 0 11
40202: PUSH
40203: LD_INT 2
40205: ARRAY
40206: GREATEREQUAL
40207: AND
40208: PUSH
40209: LD_VAR 0 10
40213: PPUSH
40214: LD_INT 3
40216: PPUSH
40217: CALL_OW 275
40221: PUSH
40222: LD_VAR 0 11
40226: PUSH
40227: LD_INT 3
40229: ARRAY
40230: GREATEREQUAL
40231: AND
40232: NOT
40233: IFFALSE 40237
// exit ;
40235: GO 40824
// if GetBType ( depot ) = b_depot then
40237: LD_VAR 0 1
40241: PPUSH
40242: CALL_OW 266
40246: PUSH
40247: LD_INT 0
40249: EQUAL
40250: IFFALSE 40262
// dist := 28 else
40252: LD_ADDR_VAR 0 14
40256: PUSH
40257: LD_INT 28
40259: ST_TO_ADDR
40260: GO 40270
// dist := 36 ;
40262: LD_ADDR_VAR 0 14
40266: PUSH
40267: LD_INT 36
40269: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40270: LD_VAR 0 1
40274: PPUSH
40275: LD_VAR 0 3
40279: PPUSH
40280: LD_VAR 0 4
40284: PPUSH
40285: CALL_OW 297
40289: PUSH
40290: LD_VAR 0 14
40294: GREATER
40295: IFFALSE 40299
// exit ;
40297: GO 40824
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40299: LD_ADDR_VAR 0 12
40303: PUSH
40304: LD_VAR 0 2
40308: PPUSH
40309: LD_VAR 0 3
40313: PPUSH
40314: LD_VAR 0 4
40318: PPUSH
40319: LD_VAR 0 5
40323: PPUSH
40324: LD_VAR 0 1
40328: PPUSH
40329: CALL_OW 248
40333: PPUSH
40334: LD_INT 0
40336: PPUSH
40337: CALL 40829 0 6
40341: ST_TO_ADDR
// if not hexes then
40342: LD_VAR 0 12
40346: NOT
40347: IFFALSE 40351
// exit ;
40349: GO 40824
// hex := GetHexInfo ( x , y ) ;
40351: LD_ADDR_VAR 0 15
40355: PUSH
40356: LD_VAR 0 3
40360: PPUSH
40361: LD_VAR 0 4
40365: PPUSH
40366: CALL_OW 546
40370: ST_TO_ADDR
// if hex [ 1 ] then
40371: LD_VAR 0 15
40375: PUSH
40376: LD_INT 1
40378: ARRAY
40379: IFFALSE 40383
// exit ;
40381: GO 40824
// height := hex [ 2 ] ;
40383: LD_ADDR_VAR 0 13
40387: PUSH
40388: LD_VAR 0 15
40392: PUSH
40393: LD_INT 2
40395: ARRAY
40396: ST_TO_ADDR
// for i = 1 to hexes do
40397: LD_ADDR_VAR 0 7
40401: PUSH
40402: DOUBLE
40403: LD_INT 1
40405: DEC
40406: ST_TO_ADDR
40407: LD_VAR 0 12
40411: PUSH
40412: FOR_TO
40413: IFFALSE 40743
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40415: LD_VAR 0 12
40419: PUSH
40420: LD_VAR 0 7
40424: ARRAY
40425: PUSH
40426: LD_INT 1
40428: ARRAY
40429: PPUSH
40430: LD_VAR 0 12
40434: PUSH
40435: LD_VAR 0 7
40439: ARRAY
40440: PUSH
40441: LD_INT 2
40443: ARRAY
40444: PPUSH
40445: CALL_OW 488
40449: NOT
40450: PUSH
40451: LD_VAR 0 12
40455: PUSH
40456: LD_VAR 0 7
40460: ARRAY
40461: PUSH
40462: LD_INT 1
40464: ARRAY
40465: PPUSH
40466: LD_VAR 0 12
40470: PUSH
40471: LD_VAR 0 7
40475: ARRAY
40476: PUSH
40477: LD_INT 2
40479: ARRAY
40480: PPUSH
40481: CALL_OW 428
40485: PUSH
40486: LD_INT 0
40488: GREATER
40489: OR
40490: PUSH
40491: LD_VAR 0 12
40495: PUSH
40496: LD_VAR 0 7
40500: ARRAY
40501: PUSH
40502: LD_INT 1
40504: ARRAY
40505: PPUSH
40506: LD_VAR 0 12
40510: PUSH
40511: LD_VAR 0 7
40515: ARRAY
40516: PUSH
40517: LD_INT 2
40519: ARRAY
40520: PPUSH
40521: CALL_OW 351
40525: OR
40526: IFFALSE 40532
// exit ;
40528: POP
40529: POP
40530: GO 40824
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40532: LD_ADDR_VAR 0 8
40536: PUSH
40537: LD_VAR 0 12
40541: PUSH
40542: LD_VAR 0 7
40546: ARRAY
40547: PUSH
40548: LD_INT 1
40550: ARRAY
40551: PPUSH
40552: LD_VAR 0 12
40556: PUSH
40557: LD_VAR 0 7
40561: ARRAY
40562: PUSH
40563: LD_INT 2
40565: ARRAY
40566: PPUSH
40567: CALL_OW 546
40571: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40572: LD_VAR 0 8
40576: PUSH
40577: LD_INT 1
40579: ARRAY
40580: PUSH
40581: LD_VAR 0 8
40585: PUSH
40586: LD_INT 2
40588: ARRAY
40589: PUSH
40590: LD_VAR 0 13
40594: PUSH
40595: LD_INT 2
40597: PLUS
40598: GREATER
40599: OR
40600: PUSH
40601: LD_VAR 0 8
40605: PUSH
40606: LD_INT 2
40608: ARRAY
40609: PUSH
40610: LD_VAR 0 13
40614: PUSH
40615: LD_INT 2
40617: MINUS
40618: LESS
40619: OR
40620: PUSH
40621: LD_VAR 0 8
40625: PUSH
40626: LD_INT 3
40628: ARRAY
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 8
40635: PUSH
40636: LD_INT 9
40638: PUSH
40639: LD_INT 10
40641: PUSH
40642: LD_INT 11
40644: PUSH
40645: LD_INT 12
40647: PUSH
40648: LD_INT 13
40650: PUSH
40651: LD_INT 16
40653: PUSH
40654: LD_INT 17
40656: PUSH
40657: LD_INT 18
40659: PUSH
40660: LD_INT 19
40662: PUSH
40663: LD_INT 20
40665: PUSH
40666: LD_INT 21
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: IN
40684: NOT
40685: OR
40686: PUSH
40687: LD_VAR 0 8
40691: PUSH
40692: LD_INT 5
40694: ARRAY
40695: NOT
40696: OR
40697: PUSH
40698: LD_VAR 0 8
40702: PUSH
40703: LD_INT 6
40705: ARRAY
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: LD_INT 7
40715: PUSH
40716: LD_INT 9
40718: PUSH
40719: LD_INT 10
40721: PUSH
40722: LD_INT 11
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: IN
40733: NOT
40734: OR
40735: IFFALSE 40741
// exit ;
40737: POP
40738: POP
40739: GO 40824
// end ;
40741: GO 40412
40743: POP
40744: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40745: LD_VAR 0 9
40749: PPUSH
40750: LD_VAR 0 3
40754: PPUSH
40755: LD_VAR 0 4
40759: PPUSH
40760: LD_INT 20
40762: PPUSH
40763: CALL 32776 0 4
40767: PUSH
40768: LD_INT 4
40770: ARRAY
40771: IFFALSE 40775
// exit ;
40773: GO 40824
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40775: LD_VAR 0 2
40779: PUSH
40780: LD_INT 29
40782: PUSH
40783: LD_INT 30
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: IN
40790: PUSH
40791: LD_VAR 0 3
40795: PPUSH
40796: LD_VAR 0 4
40800: PPUSH
40801: LD_VAR 0 9
40805: PPUSH
40806: CALL_OW 440
40810: NOT
40811: AND
40812: IFFALSE 40816
// exit ;
40814: GO 40824
// result := true ;
40816: LD_ADDR_VAR 0 6
40820: PUSH
40821: LD_INT 1
40823: ST_TO_ADDR
// end ;
40824: LD_VAR 0 6
40828: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40829: LD_INT 0
40831: PPUSH
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
40860: PPUSH
40861: PPUSH
40862: PPUSH
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
40879: PPUSH
40880: PPUSH
40881: PPUSH
40882: PPUSH
40883: PPUSH
40884: PPUSH
40885: PPUSH
40886: PPUSH
40887: PPUSH
40888: PPUSH
// result = [ ] ;
40889: LD_ADDR_VAR 0 7
40893: PUSH
40894: EMPTY
40895: ST_TO_ADDR
// temp_list = [ ] ;
40896: LD_ADDR_VAR 0 9
40900: PUSH
40901: EMPTY
40902: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40903: LD_VAR 0 4
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: LD_INT 3
40919: PUSH
40920: LD_INT 4
40922: PUSH
40923: LD_INT 5
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: IN
40934: NOT
40935: PUSH
40936: LD_VAR 0 1
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: IN
40951: PUSH
40952: LD_VAR 0 5
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 3
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: LIST
40970: IN
40971: NOT
40972: AND
40973: OR
40974: IFFALSE 40978
// exit ;
40976: GO 59369
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40978: LD_VAR 0 1
40982: PUSH
40983: LD_INT 6
40985: PUSH
40986: LD_INT 7
40988: PUSH
40989: LD_INT 8
40991: PUSH
40992: LD_INT 13
40994: PUSH
40995: LD_INT 12
40997: PUSH
40998: LD_INT 15
41000: PUSH
41001: LD_INT 11
41003: PUSH
41004: LD_INT 14
41006: PUSH
41007: LD_INT 10
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: IN
41021: IFFALSE 41031
// btype = b_lab ;
41023: LD_ADDR_VAR 0 1
41027: PUSH
41028: LD_INT 6
41030: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41031: LD_VAR 0 6
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: IN
41050: NOT
41051: PUSH
41052: LD_VAR 0 1
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: LD_INT 3
41068: PUSH
41069: LD_INT 6
41071: PUSH
41072: LD_INT 36
41074: PUSH
41075: LD_INT 4
41077: PUSH
41078: LD_INT 5
41080: PUSH
41081: LD_INT 31
41083: PUSH
41084: LD_INT 32
41086: PUSH
41087: LD_INT 33
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: IN
41103: NOT
41104: PUSH
41105: LD_VAR 0 6
41109: PUSH
41110: LD_INT 1
41112: EQUAL
41113: AND
41114: OR
41115: PUSH
41116: LD_VAR 0 1
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 3
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: IN
41131: NOT
41132: PUSH
41133: LD_VAR 0 6
41137: PUSH
41138: LD_INT 2
41140: EQUAL
41141: AND
41142: OR
41143: IFFALSE 41153
// mode = 0 ;
41145: LD_ADDR_VAR 0 6
41149: PUSH
41150: LD_INT 0
41152: ST_TO_ADDR
// case mode of 0 :
41153: LD_VAR 0 6
41157: PUSH
41158: LD_INT 0
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 52619
41166: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41167: LD_ADDR_VAR 0 11
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41360: LD_ADDR_VAR 0 12
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 3
41517: NEG
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 3
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41556: LD_ADDR_VAR 0 13
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 2
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 3
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 3
41715: NEG
41716: PUSH
41717: LD_INT 2
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 3
41727: NEG
41728: PUSH
41729: LD_INT 3
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41755: LD_ADDR_VAR 0 14
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 3
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 3
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41951: LD_ADDR_VAR 0 15
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 3
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42144: LD_ADDR_VAR 0 16
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 2
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 3
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42337: LD_ADDR_VAR 0 17
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42567: LD_ADDR_VAR 0 18
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42797: LD_ADDR_VAR 0 19
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 2
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43027: LD_ADDR_VAR 0 20
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43257: LD_ADDR_VAR 0 21
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43487: LD_ADDR_VAR 0 22
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43717: LD_ADDR_VAR 0 23
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 3
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43997: LD_ADDR_VAR 0 24
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 3
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 3
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44273: LD_ADDR_VAR 0 25
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: LD_INT 2
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 3
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 3
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: LD_INT 3
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 3
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44547: LD_ADDR_VAR 0 26
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: LD_INT 3
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 3
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44823: LD_ADDR_VAR 0 27
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 3
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 3
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45103: LD_ADDR_VAR 0 28
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 3
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 3
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 3
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 3
45350: NEG
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45385: LD_ADDR_VAR 0 29
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 3
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 3
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 3
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 3
45629: NEG
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45664: LD_ADDR_VAR 0 30
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: LD_INT 3
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 3
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45942: LD_ADDR_VAR 0 31
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 3
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 3
46185: NEG
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46220: LD_ADDR_VAR 0 32
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 3
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46498: LD_ADDR_VAR 0 33
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: LD_INT 3
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 3
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46777: LD_ADDR_VAR 0 34
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 3
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 3
47022: NEG
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47057: LD_ADDR_VAR 0 35
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47169: LD_ADDR_VAR 0 36
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47281: LD_ADDR_VAR 0 37
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47393: LD_ADDR_VAR 0 38
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47505: LD_ADDR_VAR 0 39
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47617: LD_ADDR_VAR 0 40
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47729: LD_ADDR_VAR 0 41
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: LD_INT 3
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 3
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 3
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 3
47972: PUSH
47973: LD_INT 3
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 3
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 3
48038: NEG
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48079: LD_ADDR_VAR 0 42
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 3
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 3
48388: NEG
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48429: LD_ADDR_VAR 0 43
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 3
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 3
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: NEG
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48777: LD_ADDR_VAR 0 44
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: LD_INT 3
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 3
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 3
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 3
49086: NEG
49087: PUSH
49088: LD_INT 3
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49127: LD_ADDR_VAR 0 45
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 3
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 3
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: LD_INT 3
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 3
49436: NEG
49437: PUSH
49438: LD_INT 3
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49477: LD_ADDR_VAR 0 46
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 3
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 3
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 3
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 3
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49825: LD_ADDR_VAR 0 47
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49976: LD_ADDR_VAR 0 48
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50123: LD_ADDR_VAR 0 49
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50267: LD_ADDR_VAR 0 50
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50411: LD_ADDR_VAR 0 51
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50558: LD_ADDR_VAR 0 52
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50709: LD_ADDR_VAR 0 53
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50939: LD_ADDR_VAR 0 54
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51169: LD_ADDR_VAR 0 55
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51399: LD_ADDR_VAR 0 56
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51629: LD_ADDR_VAR 0 57
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51859: LD_ADDR_VAR 0 58
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52089: LD_ADDR_VAR 0 59
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52177: LD_ADDR_VAR 0 60
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52265: LD_ADDR_VAR 0 61
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52353: LD_ADDR_VAR 0 62
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52441: LD_ADDR_VAR 0 63
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52529: LD_ADDR_VAR 0 64
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: ST_TO_ADDR
// end ; 1 :
52617: GO 58514
52619: LD_INT 1
52621: DOUBLE
52622: EQUAL
52623: IFTRUE 52627
52625: GO 55250
52627: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52628: LD_ADDR_VAR 0 11
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 3
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52672: LD_ADDR_VAR 0 12
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52713: LD_ADDR_VAR 0 13
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: LD_INT 3
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52753: LD_ADDR_VAR 0 14
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52794: LD_ADDR_VAR 0 15
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52838: LD_ADDR_VAR 0 16
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 3
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: NEG
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52884: LD_ADDR_VAR 0 17
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: LIST
52927: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52928: LD_ADDR_VAR 0 18
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: LIST
52968: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52969: LD_ADDR_VAR 0 19
52973: PUSH
52974: LD_INT 3
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 3
52986: PUSH
52987: LD_INT 3
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53009: LD_ADDR_VAR 0 20
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 3
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53050: LD_ADDR_VAR 0 21
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 3
53079: NEG
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53094: LD_ADDR_VAR 0 22
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: LD_INT 3
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: NEG
53126: PUSH
53127: LD_INT 3
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: LIST
53139: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53140: LD_ADDR_VAR 0 23
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 3
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 4
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53184: LD_ADDR_VAR 0 24
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 4
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53225: LD_ADDR_VAR 0 25
53229: PUSH
53230: LD_INT 3
53232: PUSH
53233: LD_INT 3
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 4
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: LD_INT 4
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: LIST
53264: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53265: LD_ADDR_VAR 0 26
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 4
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 3
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53306: LD_ADDR_VAR 0 27
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 3
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 4
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: LIST
53349: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53350: LD_ADDR_VAR 0 28
53354: PUSH
53355: LD_INT 3
53357: NEG
53358: PUSH
53359: LD_INT 3
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 3
53369: NEG
53370: PUSH
53371: LD_INT 4
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 4
53381: NEG
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53396: LD_ADDR_VAR 0 29
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 4
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 4
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 3
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 5
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 5
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 4
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 6
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 6
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 5
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53551: LD_ADDR_VAR 0 30
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 4
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 4
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 4
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 5
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 5
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 5
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 6
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 6
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53694: LD_ADDR_VAR 0 31
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 4
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 4
53741: PUSH
53742: LD_INT 4
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: LD_INT 4
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 5
53761: PUSH
53762: LD_INT 4
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 5
53771: PUSH
53772: LD_INT 5
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 4
53781: PUSH
53782: LD_INT 5
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 6
53791: PUSH
53792: LD_INT 5
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 6
53801: PUSH
53802: LD_INT 6
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 5
53811: PUSH
53812: LD_INT 6
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53833: LD_ADDR_VAR 0 32
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 4
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 4
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 5
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 5
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 4
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 6
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 6
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 5
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53976: LD_ADDR_VAR 0 33
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: NEG
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 3
54017: NEG
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 4
54028: NEG
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 4
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 4
54051: NEG
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 5
54062: NEG
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 5
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 5
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 6
54096: NEG
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 6
54107: NEG
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54131: LD_ADDR_VAR 0 34
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 3
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: LD_INT 3
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: LD_INT 4
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 4
54186: NEG
54187: PUSH
54188: LD_INT 3
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 4
54198: NEG
54199: PUSH
54200: LD_INT 4
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 4
54210: NEG
54211: PUSH
54212: LD_INT 5
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 5
54222: NEG
54223: PUSH
54224: LD_INT 4
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 5
54234: NEG
54235: PUSH
54236: LD_INT 5
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 5
54246: NEG
54247: PUSH
54248: LD_INT 6
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 6
54258: NEG
54259: PUSH
54260: LD_INT 5
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 6
54270: NEG
54271: PUSH
54272: LD_INT 6
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54294: LD_ADDR_VAR 0 41
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 3
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54338: LD_ADDR_VAR 0 42
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: LIST
54378: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54379: LD_ADDR_VAR 0 43
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54419: LD_ADDR_VAR 0 44
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: LIST
54459: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54460: LD_ADDR_VAR 0 45
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: NEG
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54504: LD_ADDR_VAR 0 46
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: NEG
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54550: LD_ADDR_VAR 0 47
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 3
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54583: LD_ADDR_VAR 0 48
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54614: LD_ADDR_VAR 0 49
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54643: LD_ADDR_VAR 0 50
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54672: LD_ADDR_VAR 0 51
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54703: LD_ADDR_VAR 0 52
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54736: LD_ADDR_VAR 0 53
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 3
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54780: LD_ADDR_VAR 0 54
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: LIST
54820: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54821: LD_ADDR_VAR 0 55
54825: PUSH
54826: LD_INT 3
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54861: LD_ADDR_VAR 0 56
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 3
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: LIST
54901: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54902: LD_ADDR_VAR 0 57
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54946: LD_ADDR_VAR 0 58
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 3
54977: NEG
54978: PUSH
54979: LD_INT 3
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54992: LD_ADDR_VAR 0 59
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55036: LD_ADDR_VAR 0 60
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: LIST
55076: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55077: LD_ADDR_VAR 0 61
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55117: LD_ADDR_VAR 0 62
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55158: LD_ADDR_VAR 0 63
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55202: LD_ADDR_VAR 0 64
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: ST_TO_ADDR
// end ; 2 :
55248: GO 58514
55250: LD_INT 2
55252: DOUBLE
55253: EQUAL
55254: IFTRUE 55258
55256: GO 58513
55258: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55259: LD_ADDR_VAR 0 29
55263: PUSH
55264: LD_INT 4
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 4
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 5
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 5
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 4
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 5
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 4
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: PUSH
55390: LD_INT 4
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: LD_INT 4
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 4
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 4
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 4
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 4
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 5
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 5
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 4
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: LD_INT 5
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 3
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 3
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 4
55598: NEG
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 4
55609: NEG
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 4
55621: NEG
55622: PUSH
55623: LD_INT 2
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 4
55644: NEG
55645: PUSH
55646: LD_INT 4
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 4
55656: NEG
55657: PUSH
55658: LD_INT 5
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: LD_INT 4
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 4
55692: NEG
55693: PUSH
55694: LD_INT 3
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 5
55704: NEG
55705: PUSH
55706: LD_INT 4
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 5
55716: NEG
55717: PUSH
55718: LD_INT 5
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: LD_INT 5
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 5
55740: NEG
55741: PUSH
55742: LD_INT 3
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55797: LD_ADDR_VAR 0 30
55801: PUSH
55802: LD_INT 4
55804: PUSH
55805: LD_INT 4
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 4
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 5
55824: PUSH
55825: LD_INT 4
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 5
55834: PUSH
55835: LD_INT 5
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 4
55844: PUSH
55845: LD_INT 5
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 3
55854: PUSH
55855: LD_INT 4
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 5
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: LD_INT 5
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 3
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 4
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 4
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 4
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 4
55987: NEG
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 4
55998: NEG
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 4
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 5
56043: NEG
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 5
56054: NEG
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 5
56066: NEG
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 3
56078: NEG
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: LD_INT 3
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 4
56149: NEG
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 4
56161: NEG
56162: PUSH
56163: LD_INT 4
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 4
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 4
56185: NEG
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 4
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 5
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 4
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 4
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 5
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 5
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56344: LD_ADDR_VAR 0 31
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 4
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 4
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: LD_INT 5
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 5
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: LD_INT 4
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 5
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: NEG
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 3
56455: NEG
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 4
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 4
56546: NEG
56547: PUSH
56548: LD_INT 4
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 4
56558: NEG
56559: PUSH
56560: LD_INT 5
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 4
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 4
56594: NEG
56595: PUSH
56596: LD_INT 3
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 5
56606: NEG
56607: PUSH
56608: LD_INT 4
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 5
56618: NEG
56619: PUSH
56620: LD_INT 5
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: LD_INT 5
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 5
56642: NEG
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 4
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 3
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 4
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 4
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 4
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 5
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 5
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 4
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 5
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56894: LD_ADDR_VAR 0 32
56898: PUSH
56899: LD_INT 4
56901: NEG
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 4
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 3
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 4
56946: NEG
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 5
56957: NEG
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 5
56968: NEG
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 5
56980: NEG
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 3
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: LD_INT 4
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 4
57063: NEG
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 4
57075: NEG
57076: PUSH
57077: LD_INT 4
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 4
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 4
57099: NEG
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 4
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 5
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 4
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 4
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 5
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 3
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 5
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 4
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 4
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 3
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 4
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 4
57306: PUSH
57307: LD_INT 4
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 4
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 5
57326: PUSH
57327: LD_INT 4
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 5
57336: PUSH
57337: LD_INT 5
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 4
57346: PUSH
57347: LD_INT 5
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 5
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: PUSH
57387: LD_INT 5
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57441: LD_ADDR_VAR 0 33
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: LD_INT 4
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 4
57460: NEG
57461: PUSH
57462: LD_INT 5
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 4
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: NEG
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 5
57508: NEG
57509: PUSH
57510: LD_INT 4
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 5
57520: NEG
57521: PUSH
57522: LD_INT 5
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: LD_INT 5
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 5
57544: NEG
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 3
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: LD_INT 4
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: LD_INT 3
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 3
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 4
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 4
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 4
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 4
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 5
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 5
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 4
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 3
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 5
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 4
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 4
57781: PUSH
57782: LD_INT 4
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: LD_INT 4
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 4
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 4
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 4
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 5
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 5
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 4
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 5
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57979: LD_ADDR_VAR 0 34
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 4
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 5
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 4
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 3
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: LD_INT 4
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 5
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 3
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: LD_INT 5
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 4
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 4
58171: PUSH
58172: LD_INT 2
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 4
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 4
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 5
58201: PUSH
58202: LD_INT 4
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 5
58211: PUSH
58212: LD_INT 5
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 4
58221: PUSH
58222: LD_INT 5
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: LD_INT 4
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: LD_INT 3
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 5
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: LD_INT 5
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: LD_INT 3
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 2
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: LD_INT 3
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 4
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 4
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 4
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: NEG
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 4
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 4
58409: NEG
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 5
58420: NEG
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 5
58431: NEG
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 5
58443: NEG
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: ST_TO_ADDR
// end ; end ;
58511: GO 58514
58513: POP
// case btype of b_depot , b_warehouse :
58514: LD_VAR 0 1
58518: PUSH
58519: LD_INT 0
58521: DOUBLE
58522: EQUAL
58523: IFTRUE 58533
58525: LD_INT 1
58527: DOUBLE
58528: EQUAL
58529: IFTRUE 58533
58531: GO 58734
58533: POP
// case nation of nation_american :
58534: LD_VAR 0 5
58538: PUSH
58539: LD_INT 1
58541: DOUBLE
58542: EQUAL
58543: IFTRUE 58547
58545: GO 58603
58547: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58548: LD_ADDR_VAR 0 9
58552: PUSH
58553: LD_VAR 0 11
58557: PUSH
58558: LD_VAR 0 12
58562: PUSH
58563: LD_VAR 0 13
58567: PUSH
58568: LD_VAR 0 14
58572: PUSH
58573: LD_VAR 0 15
58577: PUSH
58578: LD_VAR 0 16
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: PUSH
58591: LD_VAR 0 4
58595: PUSH
58596: LD_INT 1
58598: PLUS
58599: ARRAY
58600: ST_TO_ADDR
58601: GO 58732
58603: LD_INT 2
58605: DOUBLE
58606: EQUAL
58607: IFTRUE 58611
58609: GO 58667
58611: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58612: LD_ADDR_VAR 0 9
58616: PUSH
58617: LD_VAR 0 17
58621: PUSH
58622: LD_VAR 0 18
58626: PUSH
58627: LD_VAR 0 19
58631: PUSH
58632: LD_VAR 0 20
58636: PUSH
58637: LD_VAR 0 21
58641: PUSH
58642: LD_VAR 0 22
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: PUSH
58655: LD_VAR 0 4
58659: PUSH
58660: LD_INT 1
58662: PLUS
58663: ARRAY
58664: ST_TO_ADDR
58665: GO 58732
58667: LD_INT 3
58669: DOUBLE
58670: EQUAL
58671: IFTRUE 58675
58673: GO 58731
58675: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58676: LD_ADDR_VAR 0 9
58680: PUSH
58681: LD_VAR 0 23
58685: PUSH
58686: LD_VAR 0 24
58690: PUSH
58691: LD_VAR 0 25
58695: PUSH
58696: LD_VAR 0 26
58700: PUSH
58701: LD_VAR 0 27
58705: PUSH
58706: LD_VAR 0 28
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: PUSH
58719: LD_VAR 0 4
58723: PUSH
58724: LD_INT 1
58726: PLUS
58727: ARRAY
58728: ST_TO_ADDR
58729: GO 58732
58731: POP
58732: GO 59287
58734: LD_INT 2
58736: DOUBLE
58737: EQUAL
58738: IFTRUE 58748
58740: LD_INT 3
58742: DOUBLE
58743: EQUAL
58744: IFTRUE 58748
58746: GO 58804
58748: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58749: LD_ADDR_VAR 0 9
58753: PUSH
58754: LD_VAR 0 29
58758: PUSH
58759: LD_VAR 0 30
58763: PUSH
58764: LD_VAR 0 31
58768: PUSH
58769: LD_VAR 0 32
58773: PUSH
58774: LD_VAR 0 33
58778: PUSH
58779: LD_VAR 0 34
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: PUSH
58792: LD_VAR 0 4
58796: PUSH
58797: LD_INT 1
58799: PLUS
58800: ARRAY
58801: ST_TO_ADDR
58802: GO 59287
58804: LD_INT 16
58806: DOUBLE
58807: EQUAL
58808: IFTRUE 58866
58810: LD_INT 17
58812: DOUBLE
58813: EQUAL
58814: IFTRUE 58866
58816: LD_INT 18
58818: DOUBLE
58819: EQUAL
58820: IFTRUE 58866
58822: LD_INT 19
58824: DOUBLE
58825: EQUAL
58826: IFTRUE 58866
58828: LD_INT 22
58830: DOUBLE
58831: EQUAL
58832: IFTRUE 58866
58834: LD_INT 20
58836: DOUBLE
58837: EQUAL
58838: IFTRUE 58866
58840: LD_INT 21
58842: DOUBLE
58843: EQUAL
58844: IFTRUE 58866
58846: LD_INT 23
58848: DOUBLE
58849: EQUAL
58850: IFTRUE 58866
58852: LD_INT 24
58854: DOUBLE
58855: EQUAL
58856: IFTRUE 58866
58858: LD_INT 25
58860: DOUBLE
58861: EQUAL
58862: IFTRUE 58866
58864: GO 58922
58866: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58867: LD_ADDR_VAR 0 9
58871: PUSH
58872: LD_VAR 0 35
58876: PUSH
58877: LD_VAR 0 36
58881: PUSH
58882: LD_VAR 0 37
58886: PUSH
58887: LD_VAR 0 38
58891: PUSH
58892: LD_VAR 0 39
58896: PUSH
58897: LD_VAR 0 40
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: PUSH
58910: LD_VAR 0 4
58914: PUSH
58915: LD_INT 1
58917: PLUS
58918: ARRAY
58919: ST_TO_ADDR
58920: GO 59287
58922: LD_INT 6
58924: DOUBLE
58925: EQUAL
58926: IFTRUE 58978
58928: LD_INT 7
58930: DOUBLE
58931: EQUAL
58932: IFTRUE 58978
58934: LD_INT 8
58936: DOUBLE
58937: EQUAL
58938: IFTRUE 58978
58940: LD_INT 13
58942: DOUBLE
58943: EQUAL
58944: IFTRUE 58978
58946: LD_INT 12
58948: DOUBLE
58949: EQUAL
58950: IFTRUE 58978
58952: LD_INT 15
58954: DOUBLE
58955: EQUAL
58956: IFTRUE 58978
58958: LD_INT 11
58960: DOUBLE
58961: EQUAL
58962: IFTRUE 58978
58964: LD_INT 14
58966: DOUBLE
58967: EQUAL
58968: IFTRUE 58978
58970: LD_INT 10
58972: DOUBLE
58973: EQUAL
58974: IFTRUE 58978
58976: GO 59034
58978: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58979: LD_ADDR_VAR 0 9
58983: PUSH
58984: LD_VAR 0 41
58988: PUSH
58989: LD_VAR 0 42
58993: PUSH
58994: LD_VAR 0 43
58998: PUSH
58999: LD_VAR 0 44
59003: PUSH
59004: LD_VAR 0 45
59008: PUSH
59009: LD_VAR 0 46
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: PUSH
59022: LD_VAR 0 4
59026: PUSH
59027: LD_INT 1
59029: PLUS
59030: ARRAY
59031: ST_TO_ADDR
59032: GO 59287
59034: LD_INT 36
59036: DOUBLE
59037: EQUAL
59038: IFTRUE 59042
59040: GO 59098
59042: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59043: LD_ADDR_VAR 0 9
59047: PUSH
59048: LD_VAR 0 47
59052: PUSH
59053: LD_VAR 0 48
59057: PUSH
59058: LD_VAR 0 49
59062: PUSH
59063: LD_VAR 0 50
59067: PUSH
59068: LD_VAR 0 51
59072: PUSH
59073: LD_VAR 0 52
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: PUSH
59086: LD_VAR 0 4
59090: PUSH
59091: LD_INT 1
59093: PLUS
59094: ARRAY
59095: ST_TO_ADDR
59096: GO 59287
59098: LD_INT 4
59100: DOUBLE
59101: EQUAL
59102: IFTRUE 59124
59104: LD_INT 5
59106: DOUBLE
59107: EQUAL
59108: IFTRUE 59124
59110: LD_INT 34
59112: DOUBLE
59113: EQUAL
59114: IFTRUE 59124
59116: LD_INT 37
59118: DOUBLE
59119: EQUAL
59120: IFTRUE 59124
59122: GO 59180
59124: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59125: LD_ADDR_VAR 0 9
59129: PUSH
59130: LD_VAR 0 53
59134: PUSH
59135: LD_VAR 0 54
59139: PUSH
59140: LD_VAR 0 55
59144: PUSH
59145: LD_VAR 0 56
59149: PUSH
59150: LD_VAR 0 57
59154: PUSH
59155: LD_VAR 0 58
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: PUSH
59168: LD_VAR 0 4
59172: PUSH
59173: LD_INT 1
59175: PLUS
59176: ARRAY
59177: ST_TO_ADDR
59178: GO 59287
59180: LD_INT 31
59182: DOUBLE
59183: EQUAL
59184: IFTRUE 59230
59186: LD_INT 32
59188: DOUBLE
59189: EQUAL
59190: IFTRUE 59230
59192: LD_INT 33
59194: DOUBLE
59195: EQUAL
59196: IFTRUE 59230
59198: LD_INT 27
59200: DOUBLE
59201: EQUAL
59202: IFTRUE 59230
59204: LD_INT 26
59206: DOUBLE
59207: EQUAL
59208: IFTRUE 59230
59210: LD_INT 28
59212: DOUBLE
59213: EQUAL
59214: IFTRUE 59230
59216: LD_INT 29
59218: DOUBLE
59219: EQUAL
59220: IFTRUE 59230
59222: LD_INT 30
59224: DOUBLE
59225: EQUAL
59226: IFTRUE 59230
59228: GO 59286
59230: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59231: LD_ADDR_VAR 0 9
59235: PUSH
59236: LD_VAR 0 59
59240: PUSH
59241: LD_VAR 0 60
59245: PUSH
59246: LD_VAR 0 61
59250: PUSH
59251: LD_VAR 0 62
59255: PUSH
59256: LD_VAR 0 63
59260: PUSH
59261: LD_VAR 0 64
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: PUSH
59274: LD_VAR 0 4
59278: PUSH
59279: LD_INT 1
59281: PLUS
59282: ARRAY
59283: ST_TO_ADDR
59284: GO 59287
59286: POP
// temp_list2 = [ ] ;
59287: LD_ADDR_VAR 0 10
59291: PUSH
59292: EMPTY
59293: ST_TO_ADDR
// for i in temp_list do
59294: LD_ADDR_VAR 0 8
59298: PUSH
59299: LD_VAR 0 9
59303: PUSH
59304: FOR_IN
59305: IFFALSE 59357
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59307: LD_ADDR_VAR 0 10
59311: PUSH
59312: LD_VAR 0 10
59316: PUSH
59317: LD_VAR 0 8
59321: PUSH
59322: LD_INT 1
59324: ARRAY
59325: PUSH
59326: LD_VAR 0 2
59330: PLUS
59331: PUSH
59332: LD_VAR 0 8
59336: PUSH
59337: LD_INT 2
59339: ARRAY
59340: PUSH
59341: LD_VAR 0 3
59345: PLUS
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: EMPTY
59352: LIST
59353: ADD
59354: ST_TO_ADDR
59355: GO 59304
59357: POP
59358: POP
// result = temp_list2 ;
59359: LD_ADDR_VAR 0 7
59363: PUSH
59364: LD_VAR 0 10
59368: ST_TO_ADDR
// end ;
59369: LD_VAR 0 7
59373: RET
// export function EnemyInRange ( unit , dist ) ; begin
59374: LD_INT 0
59376: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59377: LD_ADDR_VAR 0 3
59381: PUSH
59382: LD_VAR 0 1
59386: PPUSH
59387: CALL_OW 255
59391: PPUSH
59392: LD_VAR 0 1
59396: PPUSH
59397: CALL_OW 250
59401: PPUSH
59402: LD_VAR 0 1
59406: PPUSH
59407: CALL_OW 251
59411: PPUSH
59412: LD_VAR 0 2
59416: PPUSH
59417: CALL 32776 0 4
59421: PUSH
59422: LD_INT 4
59424: ARRAY
59425: ST_TO_ADDR
// end ;
59426: LD_VAR 0 3
59430: RET
// export function PlayerSeeMe ( unit ) ; begin
59431: LD_INT 0
59433: PPUSH
// result := See ( your_side , unit ) ;
59434: LD_ADDR_VAR 0 2
59438: PUSH
59439: LD_OWVAR 2
59443: PPUSH
59444: LD_VAR 0 1
59448: PPUSH
59449: CALL_OW 292
59453: ST_TO_ADDR
// end ;
59454: LD_VAR 0 2
59458: RET
// export function ReverseDir ( unit ) ; begin
59459: LD_INT 0
59461: PPUSH
// if not unit then
59462: LD_VAR 0 1
59466: NOT
59467: IFFALSE 59471
// exit ;
59469: GO 59494
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59471: LD_ADDR_VAR 0 2
59475: PUSH
59476: LD_VAR 0 1
59480: PPUSH
59481: CALL_OW 254
59485: PUSH
59486: LD_INT 3
59488: PLUS
59489: PUSH
59490: LD_INT 6
59492: MOD
59493: ST_TO_ADDR
// end ;
59494: LD_VAR 0 2
59498: RET
// export function ReverseArray ( array ) ; var i ; begin
59499: LD_INT 0
59501: PPUSH
59502: PPUSH
// if not array then
59503: LD_VAR 0 1
59507: NOT
59508: IFFALSE 59512
// exit ;
59510: GO 59567
// result := [ ] ;
59512: LD_ADDR_VAR 0 2
59516: PUSH
59517: EMPTY
59518: ST_TO_ADDR
// for i := array downto 1 do
59519: LD_ADDR_VAR 0 3
59523: PUSH
59524: DOUBLE
59525: LD_VAR 0 1
59529: INC
59530: ST_TO_ADDR
59531: LD_INT 1
59533: PUSH
59534: FOR_DOWNTO
59535: IFFALSE 59565
// result := Join ( result , array [ i ] ) ;
59537: LD_ADDR_VAR 0 2
59541: PUSH
59542: LD_VAR 0 2
59546: PPUSH
59547: LD_VAR 0 1
59551: PUSH
59552: LD_VAR 0 3
59556: ARRAY
59557: PPUSH
59558: CALL 64192 0 2
59562: ST_TO_ADDR
59563: GO 59534
59565: POP
59566: POP
// end ;
59567: LD_VAR 0 2
59571: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59572: LD_INT 0
59574: PPUSH
59575: PPUSH
59576: PPUSH
59577: PPUSH
59578: PPUSH
59579: PPUSH
// if not unit or not hexes then
59580: LD_VAR 0 1
59584: NOT
59585: PUSH
59586: LD_VAR 0 2
59590: NOT
59591: OR
59592: IFFALSE 59596
// exit ;
59594: GO 59719
// dist := 9999 ;
59596: LD_ADDR_VAR 0 5
59600: PUSH
59601: LD_INT 9999
59603: ST_TO_ADDR
// for i = 1 to hexes do
59604: LD_ADDR_VAR 0 4
59608: PUSH
59609: DOUBLE
59610: LD_INT 1
59612: DEC
59613: ST_TO_ADDR
59614: LD_VAR 0 2
59618: PUSH
59619: FOR_TO
59620: IFFALSE 59707
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59622: LD_ADDR_VAR 0 6
59626: PUSH
59627: LD_VAR 0 1
59631: PPUSH
59632: LD_VAR 0 2
59636: PUSH
59637: LD_VAR 0 4
59641: ARRAY
59642: PUSH
59643: LD_INT 1
59645: ARRAY
59646: PPUSH
59647: LD_VAR 0 2
59651: PUSH
59652: LD_VAR 0 4
59656: ARRAY
59657: PUSH
59658: LD_INT 2
59660: ARRAY
59661: PPUSH
59662: CALL_OW 297
59666: ST_TO_ADDR
// if tdist < dist then
59667: LD_VAR 0 6
59671: PUSH
59672: LD_VAR 0 5
59676: LESS
59677: IFFALSE 59705
// begin hex := hexes [ i ] ;
59679: LD_ADDR_VAR 0 8
59683: PUSH
59684: LD_VAR 0 2
59688: PUSH
59689: LD_VAR 0 4
59693: ARRAY
59694: ST_TO_ADDR
// dist := tdist ;
59695: LD_ADDR_VAR 0 5
59699: PUSH
59700: LD_VAR 0 6
59704: ST_TO_ADDR
// end ; end ;
59705: GO 59619
59707: POP
59708: POP
// result := hex ;
59709: LD_ADDR_VAR 0 3
59713: PUSH
59714: LD_VAR 0 8
59718: ST_TO_ADDR
// end ;
59719: LD_VAR 0 3
59723: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59724: LD_INT 0
59726: PPUSH
59727: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59728: LD_VAR 0 1
59732: NOT
59733: PUSH
59734: LD_VAR 0 1
59738: PUSH
59739: LD_INT 21
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 23
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PPUSH
59763: CALL_OW 69
59767: IN
59768: NOT
59769: OR
59770: IFFALSE 59774
// exit ;
59772: GO 59821
// for i = 1 to 3 do
59774: LD_ADDR_VAR 0 3
59778: PUSH
59779: DOUBLE
59780: LD_INT 1
59782: DEC
59783: ST_TO_ADDR
59784: LD_INT 3
59786: PUSH
59787: FOR_TO
59788: IFFALSE 59819
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59790: LD_VAR 0 1
59794: PPUSH
59795: CALL_OW 250
59799: PPUSH
59800: LD_VAR 0 1
59804: PPUSH
59805: CALL_OW 251
59809: PPUSH
59810: LD_INT 1
59812: PPUSH
59813: CALL_OW 453
59817: GO 59787
59819: POP
59820: POP
// end ;
59821: LD_VAR 0 2
59825: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59826: LD_INT 0
59828: PPUSH
59829: PPUSH
59830: PPUSH
59831: PPUSH
59832: PPUSH
59833: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59834: LD_VAR 0 1
59838: NOT
59839: PUSH
59840: LD_VAR 0 2
59844: NOT
59845: OR
59846: PUSH
59847: LD_VAR 0 1
59851: PPUSH
59852: CALL_OW 314
59856: OR
59857: IFFALSE 59861
// exit ;
59859: GO 60302
// x := GetX ( enemy_unit ) ;
59861: LD_ADDR_VAR 0 7
59865: PUSH
59866: LD_VAR 0 2
59870: PPUSH
59871: CALL_OW 250
59875: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59876: LD_ADDR_VAR 0 8
59880: PUSH
59881: LD_VAR 0 2
59885: PPUSH
59886: CALL_OW 251
59890: ST_TO_ADDR
// if not x or not y then
59891: LD_VAR 0 7
59895: NOT
59896: PUSH
59897: LD_VAR 0 8
59901: NOT
59902: OR
59903: IFFALSE 59907
// exit ;
59905: GO 60302
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59907: LD_ADDR_VAR 0 6
59911: PUSH
59912: LD_VAR 0 7
59916: PPUSH
59917: LD_INT 0
59919: PPUSH
59920: LD_INT 4
59922: PPUSH
59923: CALL_OW 272
59927: PUSH
59928: LD_VAR 0 8
59932: PPUSH
59933: LD_INT 0
59935: PPUSH
59936: LD_INT 4
59938: PPUSH
59939: CALL_OW 273
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_VAR 0 7
59952: PPUSH
59953: LD_INT 1
59955: PPUSH
59956: LD_INT 4
59958: PPUSH
59959: CALL_OW 272
59963: PUSH
59964: LD_VAR 0 8
59968: PPUSH
59969: LD_INT 1
59971: PPUSH
59972: LD_INT 4
59974: PPUSH
59975: CALL_OW 273
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_VAR 0 7
59988: PPUSH
59989: LD_INT 2
59991: PPUSH
59992: LD_INT 4
59994: PPUSH
59995: CALL_OW 272
59999: PUSH
60000: LD_VAR 0 8
60004: PPUSH
60005: LD_INT 2
60007: PPUSH
60008: LD_INT 4
60010: PPUSH
60011: CALL_OW 273
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_VAR 0 7
60024: PPUSH
60025: LD_INT 3
60027: PPUSH
60028: LD_INT 4
60030: PPUSH
60031: CALL_OW 272
60035: PUSH
60036: LD_VAR 0 8
60040: PPUSH
60041: LD_INT 3
60043: PPUSH
60044: LD_INT 4
60046: PPUSH
60047: CALL_OW 273
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_VAR 0 7
60060: PPUSH
60061: LD_INT 4
60063: PPUSH
60064: LD_INT 4
60066: PPUSH
60067: CALL_OW 272
60071: PUSH
60072: LD_VAR 0 8
60076: PPUSH
60077: LD_INT 4
60079: PPUSH
60080: LD_INT 4
60082: PPUSH
60083: CALL_OW 273
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_VAR 0 7
60096: PPUSH
60097: LD_INT 5
60099: PPUSH
60100: LD_INT 4
60102: PPUSH
60103: CALL_OW 272
60107: PUSH
60108: LD_VAR 0 8
60112: PPUSH
60113: LD_INT 5
60115: PPUSH
60116: LD_INT 4
60118: PPUSH
60119: CALL_OW 273
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: ST_TO_ADDR
// for i = tmp downto 1 do
60136: LD_ADDR_VAR 0 4
60140: PUSH
60141: DOUBLE
60142: LD_VAR 0 6
60146: INC
60147: ST_TO_ADDR
60148: LD_INT 1
60150: PUSH
60151: FOR_DOWNTO
60152: IFFALSE 60253
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60154: LD_VAR 0 6
60158: PUSH
60159: LD_VAR 0 4
60163: ARRAY
60164: PUSH
60165: LD_INT 1
60167: ARRAY
60168: PPUSH
60169: LD_VAR 0 6
60173: PUSH
60174: LD_VAR 0 4
60178: ARRAY
60179: PUSH
60180: LD_INT 2
60182: ARRAY
60183: PPUSH
60184: CALL_OW 488
60188: NOT
60189: PUSH
60190: LD_VAR 0 6
60194: PUSH
60195: LD_VAR 0 4
60199: ARRAY
60200: PUSH
60201: LD_INT 1
60203: ARRAY
60204: PPUSH
60205: LD_VAR 0 6
60209: PUSH
60210: LD_VAR 0 4
60214: ARRAY
60215: PUSH
60216: LD_INT 2
60218: ARRAY
60219: PPUSH
60220: CALL_OW 428
60224: PUSH
60225: LD_INT 0
60227: NONEQUAL
60228: OR
60229: IFFALSE 60251
// tmp := Delete ( tmp , i ) ;
60231: LD_ADDR_VAR 0 6
60235: PUSH
60236: LD_VAR 0 6
60240: PPUSH
60241: LD_VAR 0 4
60245: PPUSH
60246: CALL_OW 3
60250: ST_TO_ADDR
60251: GO 60151
60253: POP
60254: POP
// j := GetClosestHex ( unit , tmp ) ;
60255: LD_ADDR_VAR 0 5
60259: PUSH
60260: LD_VAR 0 1
60264: PPUSH
60265: LD_VAR 0 6
60269: PPUSH
60270: CALL 59572 0 2
60274: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60275: LD_VAR 0 1
60279: PPUSH
60280: LD_VAR 0 5
60284: PUSH
60285: LD_INT 1
60287: ARRAY
60288: PPUSH
60289: LD_VAR 0 5
60293: PUSH
60294: LD_INT 2
60296: ARRAY
60297: PPUSH
60298: CALL_OW 111
// end ;
60302: LD_VAR 0 3
60306: RET
// export function PrepareApemanSoldier ( ) ; begin
60307: LD_INT 0
60309: PPUSH
// uc_nation := 0 ;
60310: LD_ADDR_OWVAR 21
60314: PUSH
60315: LD_INT 0
60317: ST_TO_ADDR
// hc_sex := sex_male ;
60318: LD_ADDR_OWVAR 27
60322: PUSH
60323: LD_INT 1
60325: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60326: LD_ADDR_OWVAR 28
60330: PUSH
60331: LD_INT 15
60333: ST_TO_ADDR
// hc_gallery :=  ;
60334: LD_ADDR_OWVAR 33
60338: PUSH
60339: LD_STRING 
60341: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60342: LD_ADDR_OWVAR 31
60346: PUSH
60347: LD_INT 0
60349: PPUSH
60350: LD_INT 3
60352: PPUSH
60353: CALL_OW 12
60357: PUSH
60358: LD_INT 0
60360: PPUSH
60361: LD_INT 3
60363: PPUSH
60364: CALL_OW 12
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// end ;
60381: LD_VAR 0 1
60385: RET
// export function PrepareApemanEngineer ( ) ; begin
60386: LD_INT 0
60388: PPUSH
// uc_nation := 0 ;
60389: LD_ADDR_OWVAR 21
60393: PUSH
60394: LD_INT 0
60396: ST_TO_ADDR
// hc_sex := sex_male ;
60397: LD_ADDR_OWVAR 27
60401: PUSH
60402: LD_INT 1
60404: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60405: LD_ADDR_OWVAR 28
60409: PUSH
60410: LD_INT 16
60412: ST_TO_ADDR
// hc_gallery :=  ;
60413: LD_ADDR_OWVAR 33
60417: PUSH
60418: LD_STRING 
60420: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60421: LD_ADDR_OWVAR 31
60425: PUSH
60426: LD_INT 0
60428: PPUSH
60429: LD_INT 3
60431: PPUSH
60432: CALL_OW 12
60436: PUSH
60437: LD_INT 0
60439: PPUSH
60440: LD_INT 3
60442: PPUSH
60443: CALL_OW 12
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: ST_TO_ADDR
// end ;
60460: LD_VAR 0 1
60464: RET
// export function PrepareApeman ( agressivity ) ; begin
60465: LD_INT 0
60467: PPUSH
// uc_side := 0 ;
60468: LD_ADDR_OWVAR 20
60472: PUSH
60473: LD_INT 0
60475: ST_TO_ADDR
// uc_nation := 0 ;
60476: LD_ADDR_OWVAR 21
60480: PUSH
60481: LD_INT 0
60483: ST_TO_ADDR
// hc_sex := sex_male ;
60484: LD_ADDR_OWVAR 27
60488: PUSH
60489: LD_INT 1
60491: ST_TO_ADDR
// hc_class := class_apeman ;
60492: LD_ADDR_OWVAR 28
60496: PUSH
60497: LD_INT 12
60499: ST_TO_ADDR
// hc_gallery :=  ;
60500: LD_ADDR_OWVAR 33
60504: PUSH
60505: LD_STRING 
60507: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60508: LD_ADDR_OWVAR 35
60512: PUSH
60513: LD_VAR 0 1
60517: NEG
60518: PPUSH
60519: LD_VAR 0 1
60523: PPUSH
60524: CALL_OW 12
60528: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60529: LD_ADDR_OWVAR 31
60533: PUSH
60534: LD_INT 0
60536: PPUSH
60537: LD_INT 3
60539: PPUSH
60540: CALL_OW 12
60544: PUSH
60545: LD_INT 0
60547: PPUSH
60548: LD_INT 3
60550: PPUSH
60551: CALL_OW 12
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: ST_TO_ADDR
// end ;
60568: LD_VAR 0 2
60572: RET
// export function PrepareTiger ( agressivity ) ; begin
60573: LD_INT 0
60575: PPUSH
// uc_side := 0 ;
60576: LD_ADDR_OWVAR 20
60580: PUSH
60581: LD_INT 0
60583: ST_TO_ADDR
// uc_nation := 0 ;
60584: LD_ADDR_OWVAR 21
60588: PUSH
60589: LD_INT 0
60591: ST_TO_ADDR
// hc_class := class_tiger ;
60592: LD_ADDR_OWVAR 28
60596: PUSH
60597: LD_INT 14
60599: ST_TO_ADDR
// hc_gallery :=  ;
60600: LD_ADDR_OWVAR 33
60604: PUSH
60605: LD_STRING 
60607: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60608: LD_ADDR_OWVAR 35
60612: PUSH
60613: LD_VAR 0 1
60617: NEG
60618: PPUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 12
60628: ST_TO_ADDR
// end ;
60629: LD_VAR 0 2
60633: RET
// export function PrepareEnchidna ( ) ; begin
60634: LD_INT 0
60636: PPUSH
// uc_side := 0 ;
60637: LD_ADDR_OWVAR 20
60641: PUSH
60642: LD_INT 0
60644: ST_TO_ADDR
// uc_nation := 0 ;
60645: LD_ADDR_OWVAR 21
60649: PUSH
60650: LD_INT 0
60652: ST_TO_ADDR
// hc_class := class_baggie ;
60653: LD_ADDR_OWVAR 28
60657: PUSH
60658: LD_INT 13
60660: ST_TO_ADDR
// hc_gallery :=  ;
60661: LD_ADDR_OWVAR 33
60665: PUSH
60666: LD_STRING 
60668: ST_TO_ADDR
// end ;
60669: LD_VAR 0 1
60673: RET
// export function PrepareFrog ( ) ; begin
60674: LD_INT 0
60676: PPUSH
// uc_side := 0 ;
60677: LD_ADDR_OWVAR 20
60681: PUSH
60682: LD_INT 0
60684: ST_TO_ADDR
// uc_nation := 0 ;
60685: LD_ADDR_OWVAR 21
60689: PUSH
60690: LD_INT 0
60692: ST_TO_ADDR
// hc_class := class_frog ;
60693: LD_ADDR_OWVAR 28
60697: PUSH
60698: LD_INT 19
60700: ST_TO_ADDR
// hc_gallery :=  ;
60701: LD_ADDR_OWVAR 33
60705: PUSH
60706: LD_STRING 
60708: ST_TO_ADDR
// end ;
60709: LD_VAR 0 1
60713: RET
// export function PrepareFish ( ) ; begin
60714: LD_INT 0
60716: PPUSH
// uc_side := 0 ;
60717: LD_ADDR_OWVAR 20
60721: PUSH
60722: LD_INT 0
60724: ST_TO_ADDR
// uc_nation := 0 ;
60725: LD_ADDR_OWVAR 21
60729: PUSH
60730: LD_INT 0
60732: ST_TO_ADDR
// hc_class := class_fish ;
60733: LD_ADDR_OWVAR 28
60737: PUSH
60738: LD_INT 20
60740: ST_TO_ADDR
// hc_gallery :=  ;
60741: LD_ADDR_OWVAR 33
60745: PUSH
60746: LD_STRING 
60748: ST_TO_ADDR
// end ;
60749: LD_VAR 0 1
60753: RET
// export function PrepareBird ( ) ; begin
60754: LD_INT 0
60756: PPUSH
// uc_side := 0 ;
60757: LD_ADDR_OWVAR 20
60761: PUSH
60762: LD_INT 0
60764: ST_TO_ADDR
// uc_nation := 0 ;
60765: LD_ADDR_OWVAR 21
60769: PUSH
60770: LD_INT 0
60772: ST_TO_ADDR
// hc_class := class_phororhacos ;
60773: LD_ADDR_OWVAR 28
60777: PUSH
60778: LD_INT 18
60780: ST_TO_ADDR
// hc_gallery :=  ;
60781: LD_ADDR_OWVAR 33
60785: PUSH
60786: LD_STRING 
60788: ST_TO_ADDR
// end ;
60789: LD_VAR 0 1
60793: RET
// export function PrepareHorse ( ) ; begin
60794: LD_INT 0
60796: PPUSH
// uc_side := 0 ;
60797: LD_ADDR_OWVAR 20
60801: PUSH
60802: LD_INT 0
60804: ST_TO_ADDR
// uc_nation := 0 ;
60805: LD_ADDR_OWVAR 21
60809: PUSH
60810: LD_INT 0
60812: ST_TO_ADDR
// hc_class := class_horse ;
60813: LD_ADDR_OWVAR 28
60817: PUSH
60818: LD_INT 21
60820: ST_TO_ADDR
// hc_gallery :=  ;
60821: LD_ADDR_OWVAR 33
60825: PUSH
60826: LD_STRING 
60828: ST_TO_ADDR
// end ;
60829: LD_VAR 0 1
60833: RET
// export function PrepareMastodont ( ) ; begin
60834: LD_INT 0
60836: PPUSH
// uc_side := 0 ;
60837: LD_ADDR_OWVAR 20
60841: PUSH
60842: LD_INT 0
60844: ST_TO_ADDR
// uc_nation := 0 ;
60845: LD_ADDR_OWVAR 21
60849: PUSH
60850: LD_INT 0
60852: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60853: LD_ADDR_OWVAR 37
60857: PUSH
60858: LD_INT 31
60860: ST_TO_ADDR
// vc_control := control_rider ;
60861: LD_ADDR_OWVAR 38
60865: PUSH
60866: LD_INT 4
60868: ST_TO_ADDR
// end ;
60869: LD_VAR 0 1
60873: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60874: LD_INT 0
60876: PPUSH
60877: PPUSH
60878: PPUSH
// uc_side = 0 ;
60879: LD_ADDR_OWVAR 20
60883: PUSH
60884: LD_INT 0
60886: ST_TO_ADDR
// uc_nation = 0 ;
60887: LD_ADDR_OWVAR 21
60891: PUSH
60892: LD_INT 0
60894: ST_TO_ADDR
// InitHc_All ( ) ;
60895: CALL_OW 584
// InitVc ;
60899: CALL_OW 20
// if mastodonts then
60903: LD_VAR 0 6
60907: IFFALSE 60974
// for i = 1 to mastodonts do
60909: LD_ADDR_VAR 0 11
60913: PUSH
60914: DOUBLE
60915: LD_INT 1
60917: DEC
60918: ST_TO_ADDR
60919: LD_VAR 0 6
60923: PUSH
60924: FOR_TO
60925: IFFALSE 60972
// begin vc_chassis := 31 ;
60927: LD_ADDR_OWVAR 37
60931: PUSH
60932: LD_INT 31
60934: ST_TO_ADDR
// vc_control := control_rider ;
60935: LD_ADDR_OWVAR 38
60939: PUSH
60940: LD_INT 4
60942: ST_TO_ADDR
// animal := CreateVehicle ;
60943: LD_ADDR_VAR 0 12
60947: PUSH
60948: CALL_OW 45
60952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60953: LD_VAR 0 12
60957: PPUSH
60958: LD_VAR 0 8
60962: PPUSH
60963: LD_INT 0
60965: PPUSH
60966: CALL 63109 0 3
// end ;
60970: GO 60924
60972: POP
60973: POP
// if horses then
60974: LD_VAR 0 5
60978: IFFALSE 61045
// for i = 1 to horses do
60980: LD_ADDR_VAR 0 11
60984: PUSH
60985: DOUBLE
60986: LD_INT 1
60988: DEC
60989: ST_TO_ADDR
60990: LD_VAR 0 5
60994: PUSH
60995: FOR_TO
60996: IFFALSE 61043
// begin hc_class := 21 ;
60998: LD_ADDR_OWVAR 28
61002: PUSH
61003: LD_INT 21
61005: ST_TO_ADDR
// hc_gallery :=  ;
61006: LD_ADDR_OWVAR 33
61010: PUSH
61011: LD_STRING 
61013: ST_TO_ADDR
// animal := CreateHuman ;
61014: LD_ADDR_VAR 0 12
61018: PUSH
61019: CALL_OW 44
61023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61024: LD_VAR 0 12
61028: PPUSH
61029: LD_VAR 0 8
61033: PPUSH
61034: LD_INT 0
61036: PPUSH
61037: CALL 63109 0 3
// end ;
61041: GO 60995
61043: POP
61044: POP
// if birds then
61045: LD_VAR 0 1
61049: IFFALSE 61116
// for i = 1 to birds do
61051: LD_ADDR_VAR 0 11
61055: PUSH
61056: DOUBLE
61057: LD_INT 1
61059: DEC
61060: ST_TO_ADDR
61061: LD_VAR 0 1
61065: PUSH
61066: FOR_TO
61067: IFFALSE 61114
// begin hc_class = 18 ;
61069: LD_ADDR_OWVAR 28
61073: PUSH
61074: LD_INT 18
61076: ST_TO_ADDR
// hc_gallery =  ;
61077: LD_ADDR_OWVAR 33
61081: PUSH
61082: LD_STRING 
61084: ST_TO_ADDR
// animal := CreateHuman ;
61085: LD_ADDR_VAR 0 12
61089: PUSH
61090: CALL_OW 44
61094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61095: LD_VAR 0 12
61099: PPUSH
61100: LD_VAR 0 8
61104: PPUSH
61105: LD_INT 0
61107: PPUSH
61108: CALL 63109 0 3
// end ;
61112: GO 61066
61114: POP
61115: POP
// if tigers then
61116: LD_VAR 0 2
61120: IFFALSE 61204
// for i = 1 to tigers do
61122: LD_ADDR_VAR 0 11
61126: PUSH
61127: DOUBLE
61128: LD_INT 1
61130: DEC
61131: ST_TO_ADDR
61132: LD_VAR 0 2
61136: PUSH
61137: FOR_TO
61138: IFFALSE 61202
// begin hc_class = class_tiger ;
61140: LD_ADDR_OWVAR 28
61144: PUSH
61145: LD_INT 14
61147: ST_TO_ADDR
// hc_gallery =  ;
61148: LD_ADDR_OWVAR 33
61152: PUSH
61153: LD_STRING 
61155: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61156: LD_ADDR_OWVAR 35
61160: PUSH
61161: LD_INT 7
61163: NEG
61164: PPUSH
61165: LD_INT 7
61167: PPUSH
61168: CALL_OW 12
61172: ST_TO_ADDR
// animal := CreateHuman ;
61173: LD_ADDR_VAR 0 12
61177: PUSH
61178: CALL_OW 44
61182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61183: LD_VAR 0 12
61187: PPUSH
61188: LD_VAR 0 8
61192: PPUSH
61193: LD_INT 0
61195: PPUSH
61196: CALL 63109 0 3
// end ;
61200: GO 61137
61202: POP
61203: POP
// if apemans then
61204: LD_VAR 0 3
61208: IFFALSE 61331
// for i = 1 to apemans do
61210: LD_ADDR_VAR 0 11
61214: PUSH
61215: DOUBLE
61216: LD_INT 1
61218: DEC
61219: ST_TO_ADDR
61220: LD_VAR 0 3
61224: PUSH
61225: FOR_TO
61226: IFFALSE 61329
// begin hc_class = class_apeman ;
61228: LD_ADDR_OWVAR 28
61232: PUSH
61233: LD_INT 12
61235: ST_TO_ADDR
// hc_gallery =  ;
61236: LD_ADDR_OWVAR 33
61240: PUSH
61241: LD_STRING 
61243: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61244: LD_ADDR_OWVAR 35
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PPUSH
61253: LD_INT 2
61255: PPUSH
61256: CALL_OW 12
61260: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61261: LD_ADDR_OWVAR 31
61265: PUSH
61266: LD_INT 1
61268: PPUSH
61269: LD_INT 3
61271: PPUSH
61272: CALL_OW 12
61276: PUSH
61277: LD_INT 1
61279: PPUSH
61280: LD_INT 3
61282: PPUSH
61283: CALL_OW 12
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: ST_TO_ADDR
// animal := CreateHuman ;
61300: LD_ADDR_VAR 0 12
61304: PUSH
61305: CALL_OW 44
61309: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61310: LD_VAR 0 12
61314: PPUSH
61315: LD_VAR 0 8
61319: PPUSH
61320: LD_INT 0
61322: PPUSH
61323: CALL 63109 0 3
// end ;
61327: GO 61225
61329: POP
61330: POP
// if enchidnas then
61331: LD_VAR 0 4
61335: IFFALSE 61402
// for i = 1 to enchidnas do
61337: LD_ADDR_VAR 0 11
61341: PUSH
61342: DOUBLE
61343: LD_INT 1
61345: DEC
61346: ST_TO_ADDR
61347: LD_VAR 0 4
61351: PUSH
61352: FOR_TO
61353: IFFALSE 61400
// begin hc_class = 13 ;
61355: LD_ADDR_OWVAR 28
61359: PUSH
61360: LD_INT 13
61362: ST_TO_ADDR
// hc_gallery =  ;
61363: LD_ADDR_OWVAR 33
61367: PUSH
61368: LD_STRING 
61370: ST_TO_ADDR
// animal := CreateHuman ;
61371: LD_ADDR_VAR 0 12
61375: PUSH
61376: CALL_OW 44
61380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61381: LD_VAR 0 12
61385: PPUSH
61386: LD_VAR 0 8
61390: PPUSH
61391: LD_INT 0
61393: PPUSH
61394: CALL 63109 0 3
// end ;
61398: GO 61352
61400: POP
61401: POP
// if fishes then
61402: LD_VAR 0 7
61406: IFFALSE 61473
// for i = 1 to fishes do
61408: LD_ADDR_VAR 0 11
61412: PUSH
61413: DOUBLE
61414: LD_INT 1
61416: DEC
61417: ST_TO_ADDR
61418: LD_VAR 0 7
61422: PUSH
61423: FOR_TO
61424: IFFALSE 61471
// begin hc_class = 20 ;
61426: LD_ADDR_OWVAR 28
61430: PUSH
61431: LD_INT 20
61433: ST_TO_ADDR
// hc_gallery =  ;
61434: LD_ADDR_OWVAR 33
61438: PUSH
61439: LD_STRING 
61441: ST_TO_ADDR
// animal := CreateHuman ;
61442: LD_ADDR_VAR 0 12
61446: PUSH
61447: CALL_OW 44
61451: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61452: LD_VAR 0 12
61456: PPUSH
61457: LD_VAR 0 9
61461: PPUSH
61462: LD_INT 0
61464: PPUSH
61465: CALL 63109 0 3
// end ;
61469: GO 61423
61471: POP
61472: POP
// end ;
61473: LD_VAR 0 10
61477: RET
// export function WantHeal ( sci , unit ) ; begin
61478: LD_INT 0
61480: PPUSH
// if GetTaskList ( sci ) > 0 then
61481: LD_VAR 0 1
61485: PPUSH
61486: CALL_OW 437
61490: PUSH
61491: LD_INT 0
61493: GREATER
61494: IFFALSE 61564
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61496: LD_VAR 0 1
61500: PPUSH
61501: CALL_OW 437
61505: PUSH
61506: LD_INT 1
61508: ARRAY
61509: PUSH
61510: LD_INT 1
61512: ARRAY
61513: PUSH
61514: LD_STRING l
61516: EQUAL
61517: PUSH
61518: LD_VAR 0 1
61522: PPUSH
61523: CALL_OW 437
61527: PUSH
61528: LD_INT 1
61530: ARRAY
61531: PUSH
61532: LD_INT 4
61534: ARRAY
61535: PUSH
61536: LD_VAR 0 2
61540: EQUAL
61541: AND
61542: IFFALSE 61554
// result := true else
61544: LD_ADDR_VAR 0 3
61548: PUSH
61549: LD_INT 1
61551: ST_TO_ADDR
61552: GO 61562
// result := false ;
61554: LD_ADDR_VAR 0 3
61558: PUSH
61559: LD_INT 0
61561: ST_TO_ADDR
// end else
61562: GO 61572
// result := false ;
61564: LD_ADDR_VAR 0 3
61568: PUSH
61569: LD_INT 0
61571: ST_TO_ADDR
// end ;
61572: LD_VAR 0 3
61576: RET
// export function HealTarget ( sci ) ; begin
61577: LD_INT 0
61579: PPUSH
// if not sci then
61580: LD_VAR 0 1
61584: NOT
61585: IFFALSE 61589
// exit ;
61587: GO 61654
// result := 0 ;
61589: LD_ADDR_VAR 0 2
61593: PUSH
61594: LD_INT 0
61596: ST_TO_ADDR
// if GetTaskList ( sci ) then
61597: LD_VAR 0 1
61601: PPUSH
61602: CALL_OW 437
61606: IFFALSE 61654
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61608: LD_VAR 0 1
61612: PPUSH
61613: CALL_OW 437
61617: PUSH
61618: LD_INT 1
61620: ARRAY
61621: PUSH
61622: LD_INT 1
61624: ARRAY
61625: PUSH
61626: LD_STRING l
61628: EQUAL
61629: IFFALSE 61654
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61631: LD_ADDR_VAR 0 2
61635: PUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: CALL_OW 437
61645: PUSH
61646: LD_INT 1
61648: ARRAY
61649: PUSH
61650: LD_INT 4
61652: ARRAY
61653: ST_TO_ADDR
// end ;
61654: LD_VAR 0 2
61658: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61659: LD_INT 0
61661: PPUSH
61662: PPUSH
61663: PPUSH
61664: PPUSH
// if not base_units then
61665: LD_VAR 0 1
61669: NOT
61670: IFFALSE 61674
// exit ;
61672: GO 61761
// result := false ;
61674: LD_ADDR_VAR 0 2
61678: PUSH
61679: LD_INT 0
61681: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61682: LD_ADDR_VAR 0 5
61686: PUSH
61687: LD_VAR 0 1
61691: PPUSH
61692: LD_INT 21
61694: PUSH
61695: LD_INT 3
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PPUSH
61702: CALL_OW 72
61706: ST_TO_ADDR
// if not tmp then
61707: LD_VAR 0 5
61711: NOT
61712: IFFALSE 61716
// exit ;
61714: GO 61761
// for i in tmp do
61716: LD_ADDR_VAR 0 3
61720: PUSH
61721: LD_VAR 0 5
61725: PUSH
61726: FOR_IN
61727: IFFALSE 61759
// begin result := EnemyInRange ( i , 22 ) ;
61729: LD_ADDR_VAR 0 2
61733: PUSH
61734: LD_VAR 0 3
61738: PPUSH
61739: LD_INT 22
61741: PPUSH
61742: CALL 59374 0 2
61746: ST_TO_ADDR
// if result then
61747: LD_VAR 0 2
61751: IFFALSE 61757
// exit ;
61753: POP
61754: POP
61755: GO 61761
// end ;
61757: GO 61726
61759: POP
61760: POP
// end ;
61761: LD_VAR 0 2
61765: RET
// export function FilterByTag ( units , tag ) ; begin
61766: LD_INT 0
61768: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61769: LD_ADDR_VAR 0 3
61773: PUSH
61774: LD_VAR 0 1
61778: PPUSH
61779: LD_INT 120
61781: PUSH
61782: LD_VAR 0 2
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PPUSH
61791: CALL_OW 72
61795: ST_TO_ADDR
// end ;
61796: LD_VAR 0 3
61800: RET
// export function IsDriver ( un ) ; begin
61801: LD_INT 0
61803: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61804: LD_ADDR_VAR 0 2
61808: PUSH
61809: LD_VAR 0 1
61813: PUSH
61814: LD_INT 55
61816: PUSH
61817: EMPTY
61818: LIST
61819: PPUSH
61820: CALL_OW 69
61824: IN
61825: ST_TO_ADDR
// end ;
61826: LD_VAR 0 2
61830: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61831: LD_INT 0
61833: PPUSH
61834: PPUSH
// list := [ ] ;
61835: LD_ADDR_VAR 0 5
61839: PUSH
61840: EMPTY
61841: ST_TO_ADDR
// case d of 0 :
61842: LD_VAR 0 3
61846: PUSH
61847: LD_INT 0
61849: DOUBLE
61850: EQUAL
61851: IFTRUE 61855
61853: GO 61988
61855: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61856: LD_ADDR_VAR 0 5
61860: PUSH
61861: LD_VAR 0 1
61865: PUSH
61866: LD_INT 4
61868: MINUS
61869: PUSH
61870: LD_VAR 0 2
61874: PUSH
61875: LD_INT 4
61877: MINUS
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: PUSH
61887: LD_VAR 0 1
61891: PUSH
61892: LD_INT 3
61894: MINUS
61895: PUSH
61896: LD_VAR 0 2
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: LIST
61908: PUSH
61909: LD_VAR 0 1
61913: PUSH
61914: LD_INT 4
61916: PLUS
61917: PUSH
61918: LD_VAR 0 2
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: PUSH
61931: LD_VAR 0 1
61935: PUSH
61936: LD_INT 3
61938: PLUS
61939: PUSH
61940: LD_VAR 0 2
61944: PUSH
61945: LD_INT 3
61947: PLUS
61948: PUSH
61949: LD_INT 5
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: LIST
61956: PUSH
61957: LD_VAR 0 1
61961: PUSH
61962: LD_VAR 0 2
61966: PUSH
61967: LD_INT 4
61969: PLUS
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: ST_TO_ADDR
// end ; 1 :
61986: GO 62686
61988: LD_INT 1
61990: DOUBLE
61991: EQUAL
61992: IFTRUE 61996
61994: GO 62129
61996: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61997: LD_ADDR_VAR 0 5
62001: PUSH
62002: LD_VAR 0 1
62006: PUSH
62007: LD_VAR 0 2
62011: PUSH
62012: LD_INT 4
62014: MINUS
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: LIST
62023: PUSH
62024: LD_VAR 0 1
62028: PUSH
62029: LD_INT 3
62031: MINUS
62032: PUSH
62033: LD_VAR 0 2
62037: PUSH
62038: LD_INT 3
62040: MINUS
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: LIST
62049: PUSH
62050: LD_VAR 0 1
62054: PUSH
62055: LD_INT 4
62057: MINUS
62058: PUSH
62059: LD_VAR 0 2
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: LIST
62071: PUSH
62072: LD_VAR 0 1
62076: PUSH
62077: LD_VAR 0 2
62081: PUSH
62082: LD_INT 3
62084: PLUS
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: LIST
62093: PUSH
62094: LD_VAR 0 1
62098: PUSH
62099: LD_INT 4
62101: PLUS
62102: PUSH
62103: LD_VAR 0 2
62107: PUSH
62108: LD_INT 4
62110: PLUS
62111: PUSH
62112: LD_INT 5
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: LIST
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: ST_TO_ADDR
// end ; 2 :
62127: GO 62686
62129: LD_INT 2
62131: DOUBLE
62132: EQUAL
62133: IFTRUE 62137
62135: GO 62266
62137: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62138: LD_ADDR_VAR 0 5
62142: PUSH
62143: LD_VAR 0 1
62147: PUSH
62148: LD_VAR 0 2
62152: PUSH
62153: LD_INT 3
62155: MINUS
62156: PUSH
62157: LD_INT 3
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: PUSH
62165: LD_VAR 0 1
62169: PUSH
62170: LD_INT 4
62172: PLUS
62173: PUSH
62174: LD_VAR 0 2
62178: PUSH
62179: LD_INT 4
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: PUSH
62187: LD_VAR 0 1
62191: PUSH
62192: LD_VAR 0 2
62196: PUSH
62197: LD_INT 4
62199: PLUS
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: PUSH
62209: LD_VAR 0 1
62213: PUSH
62214: LD_INT 3
62216: MINUS
62217: PUSH
62218: LD_VAR 0 2
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: PUSH
62231: LD_VAR 0 1
62235: PUSH
62236: LD_INT 4
62238: MINUS
62239: PUSH
62240: LD_VAR 0 2
62244: PUSH
62245: LD_INT 4
62247: MINUS
62248: PUSH
62249: LD_INT 2
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: LIST
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: ST_TO_ADDR
// end ; 3 :
62264: GO 62686
62266: LD_INT 3
62268: DOUBLE
62269: EQUAL
62270: IFTRUE 62274
62272: GO 62407
62274: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62275: LD_ADDR_VAR 0 5
62279: PUSH
62280: LD_VAR 0 1
62284: PUSH
62285: LD_INT 3
62287: PLUS
62288: PUSH
62289: LD_VAR 0 2
62293: PUSH
62294: LD_INT 4
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: PUSH
62302: LD_VAR 0 1
62306: PUSH
62307: LD_INT 4
62309: PLUS
62310: PUSH
62311: LD_VAR 0 2
62315: PUSH
62316: LD_INT 4
62318: PLUS
62319: PUSH
62320: LD_INT 5
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: PUSH
62328: LD_VAR 0 1
62332: PUSH
62333: LD_INT 4
62335: MINUS
62336: PUSH
62337: LD_VAR 0 2
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: PUSH
62350: LD_VAR 0 1
62354: PUSH
62355: LD_VAR 0 2
62359: PUSH
62360: LD_INT 4
62362: MINUS
62363: PUSH
62364: LD_INT 3
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: LIST
62371: PUSH
62372: LD_VAR 0 1
62376: PUSH
62377: LD_INT 3
62379: MINUS
62380: PUSH
62381: LD_VAR 0 2
62385: PUSH
62386: LD_INT 3
62388: MINUS
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: ST_TO_ADDR
// end ; 4 :
62405: GO 62686
62407: LD_INT 4
62409: DOUBLE
62410: EQUAL
62411: IFTRUE 62415
62413: GO 62548
62415: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62416: LD_ADDR_VAR 0 5
62420: PUSH
62421: LD_VAR 0 1
62425: PUSH
62426: LD_VAR 0 2
62430: PUSH
62431: LD_INT 4
62433: PLUS
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: PUSH
62443: LD_VAR 0 1
62447: PUSH
62448: LD_INT 3
62450: PLUS
62451: PUSH
62452: LD_VAR 0 2
62456: PUSH
62457: LD_INT 3
62459: PLUS
62460: PUSH
62461: LD_INT 5
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: PUSH
62469: LD_VAR 0 1
62473: PUSH
62474: LD_INT 4
62476: PLUS
62477: PUSH
62478: LD_VAR 0 2
62482: PUSH
62483: LD_INT 4
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: PUSH
62491: LD_VAR 0 1
62495: PUSH
62496: LD_VAR 0 2
62500: PUSH
62501: LD_INT 3
62503: MINUS
62504: PUSH
62505: LD_INT 3
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: LIST
62512: PUSH
62513: LD_VAR 0 1
62517: PUSH
62518: LD_INT 4
62520: MINUS
62521: PUSH
62522: LD_VAR 0 2
62526: PUSH
62527: LD_INT 4
62529: MINUS
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: LIST
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: ST_TO_ADDR
// end ; 5 :
62546: GO 62686
62548: LD_INT 5
62550: DOUBLE
62551: EQUAL
62552: IFTRUE 62556
62554: GO 62685
62556: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62557: LD_ADDR_VAR 0 5
62561: PUSH
62562: LD_VAR 0 1
62566: PUSH
62567: LD_INT 4
62569: MINUS
62570: PUSH
62571: LD_VAR 0 2
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: PUSH
62584: LD_VAR 0 1
62588: PUSH
62589: LD_VAR 0 2
62593: PUSH
62594: LD_INT 4
62596: MINUS
62597: PUSH
62598: LD_INT 3
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: PUSH
62606: LD_VAR 0 1
62610: PUSH
62611: LD_INT 4
62613: PLUS
62614: PUSH
62615: LD_VAR 0 2
62619: PUSH
62620: LD_INT 4
62622: PLUS
62623: PUSH
62624: LD_INT 5
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: PUSH
62632: LD_VAR 0 1
62636: PUSH
62637: LD_INT 3
62639: PLUS
62640: PUSH
62641: LD_VAR 0 2
62645: PUSH
62646: LD_INT 4
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: PUSH
62654: LD_VAR 0 1
62658: PUSH
62659: LD_VAR 0 2
62663: PUSH
62664: LD_INT 3
62666: PLUS
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: ST_TO_ADDR
// end ; end ;
62683: GO 62686
62685: POP
// result := list ;
62686: LD_ADDR_VAR 0 4
62690: PUSH
62691: LD_VAR 0 5
62695: ST_TO_ADDR
// end ;
62696: LD_VAR 0 4
62700: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62701: LD_INT 0
62703: PPUSH
62704: PPUSH
62705: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62706: LD_VAR 0 1
62710: NOT
62711: PUSH
62712: LD_VAR 0 2
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: LD_INT 4
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: IN
62735: NOT
62736: OR
62737: IFFALSE 62741
// exit ;
62739: GO 62833
// tmp := [ ] ;
62741: LD_ADDR_VAR 0 5
62745: PUSH
62746: EMPTY
62747: ST_TO_ADDR
// for i in units do
62748: LD_ADDR_VAR 0 4
62752: PUSH
62753: LD_VAR 0 1
62757: PUSH
62758: FOR_IN
62759: IFFALSE 62802
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62761: LD_ADDR_VAR 0 5
62765: PUSH
62766: LD_VAR 0 5
62770: PPUSH
62771: LD_VAR 0 5
62775: PUSH
62776: LD_INT 1
62778: PLUS
62779: PPUSH
62780: LD_VAR 0 4
62784: PPUSH
62785: LD_VAR 0 2
62789: PPUSH
62790: CALL_OW 259
62794: PPUSH
62795: CALL_OW 2
62799: ST_TO_ADDR
62800: GO 62758
62802: POP
62803: POP
// if not tmp then
62804: LD_VAR 0 5
62808: NOT
62809: IFFALSE 62813
// exit ;
62811: GO 62833
// result := SortListByListDesc ( units , tmp ) ;
62813: LD_ADDR_VAR 0 3
62817: PUSH
62818: LD_VAR 0 1
62822: PPUSH
62823: LD_VAR 0 5
62827: PPUSH
62828: CALL_OW 77
62832: ST_TO_ADDR
// end ;
62833: LD_VAR 0 3
62837: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62838: LD_INT 0
62840: PPUSH
62841: PPUSH
62842: PPUSH
// result := false ;
62843: LD_ADDR_VAR 0 3
62847: PUSH
62848: LD_INT 0
62850: ST_TO_ADDR
// x := GetX ( building ) ;
62851: LD_ADDR_VAR 0 4
62855: PUSH
62856: LD_VAR 0 2
62860: PPUSH
62861: CALL_OW 250
62865: ST_TO_ADDR
// y := GetY ( building ) ;
62866: LD_ADDR_VAR 0 5
62870: PUSH
62871: LD_VAR 0 2
62875: PPUSH
62876: CALL_OW 251
62880: ST_TO_ADDR
// if not building or not x or not y then
62881: LD_VAR 0 2
62885: NOT
62886: PUSH
62887: LD_VAR 0 4
62891: NOT
62892: OR
62893: PUSH
62894: LD_VAR 0 5
62898: NOT
62899: OR
62900: IFFALSE 62904
// exit ;
62902: GO 62996
// if GetTaskList ( unit ) then
62904: LD_VAR 0 1
62908: PPUSH
62909: CALL_OW 437
62913: IFFALSE 62996
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62915: LD_STRING e
62917: PUSH
62918: LD_VAR 0 1
62922: PPUSH
62923: CALL_OW 437
62927: PUSH
62928: LD_INT 1
62930: ARRAY
62931: PUSH
62932: LD_INT 1
62934: ARRAY
62935: EQUAL
62936: PUSH
62937: LD_VAR 0 4
62941: PUSH
62942: LD_VAR 0 1
62946: PPUSH
62947: CALL_OW 437
62951: PUSH
62952: LD_INT 1
62954: ARRAY
62955: PUSH
62956: LD_INT 2
62958: ARRAY
62959: EQUAL
62960: AND
62961: PUSH
62962: LD_VAR 0 5
62966: PUSH
62967: LD_VAR 0 1
62971: PPUSH
62972: CALL_OW 437
62976: PUSH
62977: LD_INT 1
62979: ARRAY
62980: PUSH
62981: LD_INT 3
62983: ARRAY
62984: EQUAL
62985: AND
62986: IFFALSE 62996
// result := true end ;
62988: LD_ADDR_VAR 0 3
62992: PUSH
62993: LD_INT 1
62995: ST_TO_ADDR
// end ;
62996: LD_VAR 0 3
63000: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63001: LD_INT 0
63003: PPUSH
// result := false ;
63004: LD_ADDR_VAR 0 4
63008: PUSH
63009: LD_INT 0
63011: ST_TO_ADDR
// if GetTaskList ( unit ) then
63012: LD_VAR 0 1
63016: PPUSH
63017: CALL_OW 437
63021: IFFALSE 63104
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63023: LD_STRING M
63025: PUSH
63026: LD_VAR 0 1
63030: PPUSH
63031: CALL_OW 437
63035: PUSH
63036: LD_INT 1
63038: ARRAY
63039: PUSH
63040: LD_INT 1
63042: ARRAY
63043: EQUAL
63044: PUSH
63045: LD_VAR 0 2
63049: PUSH
63050: LD_VAR 0 1
63054: PPUSH
63055: CALL_OW 437
63059: PUSH
63060: LD_INT 1
63062: ARRAY
63063: PUSH
63064: LD_INT 2
63066: ARRAY
63067: EQUAL
63068: AND
63069: PUSH
63070: LD_VAR 0 3
63074: PUSH
63075: LD_VAR 0 1
63079: PPUSH
63080: CALL_OW 437
63084: PUSH
63085: LD_INT 1
63087: ARRAY
63088: PUSH
63089: LD_INT 3
63091: ARRAY
63092: EQUAL
63093: AND
63094: IFFALSE 63104
// result := true ;
63096: LD_ADDR_VAR 0 4
63100: PUSH
63101: LD_INT 1
63103: ST_TO_ADDR
// end ; end ;
63104: LD_VAR 0 4
63108: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63109: LD_INT 0
63111: PPUSH
63112: PPUSH
63113: PPUSH
63114: PPUSH
// if not unit or not area then
63115: LD_VAR 0 1
63119: NOT
63120: PUSH
63121: LD_VAR 0 2
63125: NOT
63126: OR
63127: IFFALSE 63131
// exit ;
63129: GO 63295
// tmp := AreaToList ( area , i ) ;
63131: LD_ADDR_VAR 0 6
63135: PUSH
63136: LD_VAR 0 2
63140: PPUSH
63141: LD_VAR 0 5
63145: PPUSH
63146: CALL_OW 517
63150: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63151: LD_ADDR_VAR 0 5
63155: PUSH
63156: DOUBLE
63157: LD_INT 1
63159: DEC
63160: ST_TO_ADDR
63161: LD_VAR 0 6
63165: PUSH
63166: LD_INT 1
63168: ARRAY
63169: PUSH
63170: FOR_TO
63171: IFFALSE 63293
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63173: LD_ADDR_VAR 0 7
63177: PUSH
63178: LD_VAR 0 6
63182: PUSH
63183: LD_INT 1
63185: ARRAY
63186: PUSH
63187: LD_VAR 0 5
63191: ARRAY
63192: PUSH
63193: LD_VAR 0 6
63197: PUSH
63198: LD_INT 2
63200: ARRAY
63201: PUSH
63202: LD_VAR 0 5
63206: ARRAY
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63212: LD_VAR 0 7
63216: PUSH
63217: LD_INT 1
63219: ARRAY
63220: PPUSH
63221: LD_VAR 0 7
63225: PUSH
63226: LD_INT 2
63228: ARRAY
63229: PPUSH
63230: CALL_OW 428
63234: PUSH
63235: LD_INT 0
63237: EQUAL
63238: IFFALSE 63291
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63240: LD_VAR 0 1
63244: PPUSH
63245: LD_VAR 0 7
63249: PUSH
63250: LD_INT 1
63252: ARRAY
63253: PPUSH
63254: LD_VAR 0 7
63258: PUSH
63259: LD_INT 2
63261: ARRAY
63262: PPUSH
63263: LD_VAR 0 3
63267: PPUSH
63268: CALL_OW 48
// result := IsPlaced ( unit ) ;
63272: LD_ADDR_VAR 0 4
63276: PUSH
63277: LD_VAR 0 1
63281: PPUSH
63282: CALL_OW 305
63286: ST_TO_ADDR
// exit ;
63287: POP
63288: POP
63289: GO 63295
// end ; end ;
63291: GO 63170
63293: POP
63294: POP
// end ;
63295: LD_VAR 0 4
63299: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63300: LD_INT 0
63302: PPUSH
63303: PPUSH
63304: PPUSH
// if not side or side > 8 then
63305: LD_VAR 0 1
63309: NOT
63310: PUSH
63311: LD_VAR 0 1
63315: PUSH
63316: LD_INT 8
63318: GREATER
63319: OR
63320: IFFALSE 63324
// exit ;
63322: GO 63511
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63324: LD_ADDR_VAR 0 4
63328: PUSH
63329: LD_INT 22
63331: PUSH
63332: LD_VAR 0 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 21
63343: PUSH
63344: LD_INT 3
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PPUSH
63355: CALL_OW 69
63359: ST_TO_ADDR
// if not tmp then
63360: LD_VAR 0 4
63364: NOT
63365: IFFALSE 63369
// exit ;
63367: GO 63511
// enable_addtolog := true ;
63369: LD_ADDR_OWVAR 81
63373: PUSH
63374: LD_INT 1
63376: ST_TO_ADDR
// AddToLog ( [ ) ;
63377: LD_STRING [
63379: PPUSH
63380: CALL_OW 561
// for i in tmp do
63384: LD_ADDR_VAR 0 3
63388: PUSH
63389: LD_VAR 0 4
63393: PUSH
63394: FOR_IN
63395: IFFALSE 63502
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63397: LD_STRING [
63399: PUSH
63400: LD_VAR 0 3
63404: PPUSH
63405: CALL_OW 266
63409: STR
63410: PUSH
63411: LD_STRING , 
63413: STR
63414: PUSH
63415: LD_VAR 0 3
63419: PPUSH
63420: CALL_OW 250
63424: STR
63425: PUSH
63426: LD_STRING , 
63428: STR
63429: PUSH
63430: LD_VAR 0 3
63434: PPUSH
63435: CALL_OW 251
63439: STR
63440: PUSH
63441: LD_STRING , 
63443: STR
63444: PUSH
63445: LD_VAR 0 3
63449: PPUSH
63450: CALL_OW 254
63454: STR
63455: PUSH
63456: LD_STRING , 
63458: STR
63459: PUSH
63460: LD_VAR 0 3
63464: PPUSH
63465: LD_INT 1
63467: PPUSH
63468: CALL_OW 268
63472: STR
63473: PUSH
63474: LD_STRING , 
63476: STR
63477: PUSH
63478: LD_VAR 0 3
63482: PPUSH
63483: LD_INT 2
63485: PPUSH
63486: CALL_OW 268
63490: STR
63491: PUSH
63492: LD_STRING ],
63494: STR
63495: PPUSH
63496: CALL_OW 561
// end ;
63500: GO 63394
63502: POP
63503: POP
// AddToLog ( ]; ) ;
63504: LD_STRING ];
63506: PPUSH
63507: CALL_OW 561
// end ;
63511: LD_VAR 0 2
63515: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63516: LD_INT 0
63518: PPUSH
63519: PPUSH
63520: PPUSH
63521: PPUSH
63522: PPUSH
// if not area or not rate or not max then
63523: LD_VAR 0 1
63527: NOT
63528: PUSH
63529: LD_VAR 0 2
63533: NOT
63534: OR
63535: PUSH
63536: LD_VAR 0 4
63540: NOT
63541: OR
63542: IFFALSE 63546
// exit ;
63544: GO 63735
// while 1 do
63546: LD_INT 1
63548: IFFALSE 63735
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63550: LD_ADDR_VAR 0 9
63554: PUSH
63555: LD_VAR 0 1
63559: PPUSH
63560: LD_INT 1
63562: PPUSH
63563: CALL_OW 287
63567: PUSH
63568: LD_INT 10
63570: MUL
63571: ST_TO_ADDR
// r := rate / 10 ;
63572: LD_ADDR_VAR 0 7
63576: PUSH
63577: LD_VAR 0 2
63581: PUSH
63582: LD_INT 10
63584: DIVREAL
63585: ST_TO_ADDR
// time := 1 1$00 ;
63586: LD_ADDR_VAR 0 8
63590: PUSH
63591: LD_INT 2100
63593: ST_TO_ADDR
// if amount < min then
63594: LD_VAR 0 9
63598: PUSH
63599: LD_VAR 0 3
63603: LESS
63604: IFFALSE 63622
// r := r * 2 else
63606: LD_ADDR_VAR 0 7
63610: PUSH
63611: LD_VAR 0 7
63615: PUSH
63616: LD_INT 2
63618: MUL
63619: ST_TO_ADDR
63620: GO 63648
// if amount > max then
63622: LD_VAR 0 9
63626: PUSH
63627: LD_VAR 0 4
63631: GREATER
63632: IFFALSE 63648
// r := r / 2 ;
63634: LD_ADDR_VAR 0 7
63638: PUSH
63639: LD_VAR 0 7
63643: PUSH
63644: LD_INT 2
63646: DIVREAL
63647: ST_TO_ADDR
// time := time / r ;
63648: LD_ADDR_VAR 0 8
63652: PUSH
63653: LD_VAR 0 8
63657: PUSH
63658: LD_VAR 0 7
63662: DIVREAL
63663: ST_TO_ADDR
// if time < 0 then
63664: LD_VAR 0 8
63668: PUSH
63669: LD_INT 0
63671: LESS
63672: IFFALSE 63689
// time := time * - 1 ;
63674: LD_ADDR_VAR 0 8
63678: PUSH
63679: LD_VAR 0 8
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: MUL
63688: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63689: LD_VAR 0 8
63693: PUSH
63694: LD_INT 35
63696: PPUSH
63697: LD_INT 875
63699: PPUSH
63700: CALL_OW 12
63704: PLUS
63705: PPUSH
63706: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63710: LD_INT 1
63712: PPUSH
63713: LD_INT 5
63715: PPUSH
63716: CALL_OW 12
63720: PPUSH
63721: LD_VAR 0 1
63725: PPUSH
63726: LD_INT 1
63728: PPUSH
63729: CALL_OW 55
// end ;
63733: GO 63546
// end ;
63735: LD_VAR 0 5
63739: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63740: LD_INT 0
63742: PPUSH
63743: PPUSH
63744: PPUSH
63745: PPUSH
63746: PPUSH
63747: PPUSH
63748: PPUSH
63749: PPUSH
// if not turrets or not factories then
63750: LD_VAR 0 1
63754: NOT
63755: PUSH
63756: LD_VAR 0 2
63760: NOT
63761: OR
63762: IFFALSE 63766
// exit ;
63764: GO 64073
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63766: LD_ADDR_VAR 0 10
63770: PUSH
63771: LD_INT 5
63773: PUSH
63774: LD_INT 6
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: LD_INT 4
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 3
63793: PUSH
63794: LD_INT 5
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 24
63808: PUSH
63809: LD_INT 25
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 23
63818: PUSH
63819: LD_INT 27
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 42
63832: PUSH
63833: LD_INT 43
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 44
63842: PUSH
63843: LD_INT 46
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 45
63852: PUSH
63853: LD_INT 47
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: LIST
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: LIST
63869: ST_TO_ADDR
// result := [ ] ;
63870: LD_ADDR_VAR 0 3
63874: PUSH
63875: EMPTY
63876: ST_TO_ADDR
// for i in turrets do
63877: LD_ADDR_VAR 0 4
63881: PUSH
63882: LD_VAR 0 1
63886: PUSH
63887: FOR_IN
63888: IFFALSE 64071
// begin nat := GetNation ( i ) ;
63890: LD_ADDR_VAR 0 7
63894: PUSH
63895: LD_VAR 0 4
63899: PPUSH
63900: CALL_OW 248
63904: ST_TO_ADDR
// weapon := 0 ;
63905: LD_ADDR_VAR 0 8
63909: PUSH
63910: LD_INT 0
63912: ST_TO_ADDR
// if not nat then
63913: LD_VAR 0 7
63917: NOT
63918: IFFALSE 63922
// continue ;
63920: GO 63887
// for j in list [ nat ] do
63922: LD_ADDR_VAR 0 5
63926: PUSH
63927: LD_VAR 0 10
63931: PUSH
63932: LD_VAR 0 7
63936: ARRAY
63937: PUSH
63938: FOR_IN
63939: IFFALSE 63980
// if GetBWeapon ( i ) = j [ 1 ] then
63941: LD_VAR 0 4
63945: PPUSH
63946: CALL_OW 269
63950: PUSH
63951: LD_VAR 0 5
63955: PUSH
63956: LD_INT 1
63958: ARRAY
63959: EQUAL
63960: IFFALSE 63978
// begin weapon := j [ 2 ] ;
63962: LD_ADDR_VAR 0 8
63966: PUSH
63967: LD_VAR 0 5
63971: PUSH
63972: LD_INT 2
63974: ARRAY
63975: ST_TO_ADDR
// break ;
63976: GO 63980
// end ;
63978: GO 63938
63980: POP
63981: POP
// if not weapon then
63982: LD_VAR 0 8
63986: NOT
63987: IFFALSE 63991
// continue ;
63989: GO 63887
// for k in factories do
63991: LD_ADDR_VAR 0 6
63995: PUSH
63996: LD_VAR 0 2
64000: PUSH
64001: FOR_IN
64002: IFFALSE 64067
// begin weapons := AvailableWeaponList ( k ) ;
64004: LD_ADDR_VAR 0 9
64008: PUSH
64009: LD_VAR 0 6
64013: PPUSH
64014: CALL_OW 478
64018: ST_TO_ADDR
// if not weapons then
64019: LD_VAR 0 9
64023: NOT
64024: IFFALSE 64028
// continue ;
64026: GO 64001
// if weapon in weapons then
64028: LD_VAR 0 8
64032: PUSH
64033: LD_VAR 0 9
64037: IN
64038: IFFALSE 64065
// begin result := [ i , weapon ] ;
64040: LD_ADDR_VAR 0 3
64044: PUSH
64045: LD_VAR 0 4
64049: PUSH
64050: LD_VAR 0 8
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: ST_TO_ADDR
// exit ;
64059: POP
64060: POP
64061: POP
64062: POP
64063: GO 64073
// end ; end ;
64065: GO 64001
64067: POP
64068: POP
// end ;
64069: GO 63887
64071: POP
64072: POP
// end ;
64073: LD_VAR 0 3
64077: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64078: LD_INT 0
64080: PPUSH
// if not side or side > 8 then
64081: LD_VAR 0 3
64085: NOT
64086: PUSH
64087: LD_VAR 0 3
64091: PUSH
64092: LD_INT 8
64094: GREATER
64095: OR
64096: IFFALSE 64100
// exit ;
64098: GO 64159
// if not range then
64100: LD_VAR 0 4
64104: NOT
64105: IFFALSE 64116
// range := - 12 ;
64107: LD_ADDR_VAR 0 4
64111: PUSH
64112: LD_INT 12
64114: NEG
64115: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64116: LD_VAR 0 1
64120: PPUSH
64121: LD_VAR 0 2
64125: PPUSH
64126: LD_VAR 0 3
64130: PPUSH
64131: LD_VAR 0 4
64135: PPUSH
64136: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64140: LD_VAR 0 1
64144: PPUSH
64145: LD_VAR 0 2
64149: PPUSH
64150: LD_VAR 0 3
64154: PPUSH
64155: CALL_OW 331
// end ;
64159: LD_VAR 0 5
64163: RET
// export function Video ( mode ) ; begin
64164: LD_INT 0
64166: PPUSH
// ingame_video = mode ;
64167: LD_ADDR_OWVAR 52
64171: PUSH
64172: LD_VAR 0 1
64176: ST_TO_ADDR
// interface_hidden = mode ;
64177: LD_ADDR_OWVAR 54
64181: PUSH
64182: LD_VAR 0 1
64186: ST_TO_ADDR
// end ;
64187: LD_VAR 0 2
64191: RET
// export function Join ( array , element ) ; begin
64192: LD_INT 0
64194: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64195: LD_ADDR_VAR 0 3
64199: PUSH
64200: LD_VAR 0 1
64204: PPUSH
64205: LD_VAR 0 1
64209: PUSH
64210: LD_INT 1
64212: PLUS
64213: PPUSH
64214: LD_VAR 0 2
64218: PPUSH
64219: CALL_OW 1
64223: ST_TO_ADDR
// end ;
64224: LD_VAR 0 3
64228: RET
// export function JoinUnion ( array , element ) ; begin
64229: LD_INT 0
64231: PPUSH
// result := array union element ;
64232: LD_ADDR_VAR 0 3
64236: PUSH
64237: LD_VAR 0 1
64241: PUSH
64242: LD_VAR 0 2
64246: UNION
64247: ST_TO_ADDR
// end ;
64248: LD_VAR 0 3
64252: RET
// export function GetBehemoths ( side ) ; begin
64253: LD_INT 0
64255: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64256: LD_ADDR_VAR 0 2
64260: PUSH
64261: LD_INT 22
64263: PUSH
64264: LD_VAR 0 1
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 31
64275: PUSH
64276: LD_INT 25
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PPUSH
64287: CALL_OW 69
64291: ST_TO_ADDR
// end ;
64292: LD_VAR 0 2
64296: RET
// export function Shuffle ( array ) ; var i , index ; begin
64297: LD_INT 0
64299: PPUSH
64300: PPUSH
64301: PPUSH
// result := [ ] ;
64302: LD_ADDR_VAR 0 2
64306: PUSH
64307: EMPTY
64308: ST_TO_ADDR
// if not array then
64309: LD_VAR 0 1
64313: NOT
64314: IFFALSE 64318
// exit ;
64316: GO 64417
// Randomize ;
64318: CALL_OW 10
// for i = array downto 1 do
64322: LD_ADDR_VAR 0 3
64326: PUSH
64327: DOUBLE
64328: LD_VAR 0 1
64332: INC
64333: ST_TO_ADDR
64334: LD_INT 1
64336: PUSH
64337: FOR_DOWNTO
64338: IFFALSE 64415
// begin index := rand ( 1 , array ) ;
64340: LD_ADDR_VAR 0 4
64344: PUSH
64345: LD_INT 1
64347: PPUSH
64348: LD_VAR 0 1
64352: PPUSH
64353: CALL_OW 12
64357: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64358: LD_ADDR_VAR 0 2
64362: PUSH
64363: LD_VAR 0 2
64367: PPUSH
64368: LD_VAR 0 2
64372: PUSH
64373: LD_INT 1
64375: PLUS
64376: PPUSH
64377: LD_VAR 0 1
64381: PUSH
64382: LD_VAR 0 4
64386: ARRAY
64387: PPUSH
64388: CALL_OW 2
64392: ST_TO_ADDR
// array := Delete ( array , index ) ;
64393: LD_ADDR_VAR 0 1
64397: PUSH
64398: LD_VAR 0 1
64402: PPUSH
64403: LD_VAR 0 4
64407: PPUSH
64408: CALL_OW 3
64412: ST_TO_ADDR
// end ;
64413: GO 64337
64415: POP
64416: POP
// end ;
64417: LD_VAR 0 2
64421: RET
// export function GetBaseMaterials ( base ) ; begin
64422: LD_INT 0
64424: PPUSH
// result := [ 0 , 0 , 0 ] ;
64425: LD_ADDR_VAR 0 2
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: ST_TO_ADDR
// if not base then
64444: LD_VAR 0 1
64448: NOT
64449: IFFALSE 64453
// exit ;
64451: GO 64502
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64453: LD_ADDR_VAR 0 2
64457: PUSH
64458: LD_VAR 0 1
64462: PPUSH
64463: LD_INT 1
64465: PPUSH
64466: CALL_OW 275
64470: PUSH
64471: LD_VAR 0 1
64475: PPUSH
64476: LD_INT 2
64478: PPUSH
64479: CALL_OW 275
64483: PUSH
64484: LD_VAR 0 1
64488: PPUSH
64489: LD_INT 3
64491: PPUSH
64492: CALL_OW 275
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: ST_TO_ADDR
// end ;
64502: LD_VAR 0 2
64506: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64507: LD_INT 0
64509: PPUSH
64510: PPUSH
// result := array ;
64511: LD_ADDR_VAR 0 3
64515: PUSH
64516: LD_VAR 0 1
64520: ST_TO_ADDR
// if size >= result then
64521: LD_VAR 0 2
64525: PUSH
64526: LD_VAR 0 3
64530: GREATEREQUAL
64531: IFFALSE 64535
// exit ;
64533: GO 64585
// if size then
64535: LD_VAR 0 2
64539: IFFALSE 64585
// for i := array downto size do
64541: LD_ADDR_VAR 0 4
64545: PUSH
64546: DOUBLE
64547: LD_VAR 0 1
64551: INC
64552: ST_TO_ADDR
64553: LD_VAR 0 2
64557: PUSH
64558: FOR_DOWNTO
64559: IFFALSE 64583
// result := Delete ( result , result ) ;
64561: LD_ADDR_VAR 0 3
64565: PUSH
64566: LD_VAR 0 3
64570: PPUSH
64571: LD_VAR 0 3
64575: PPUSH
64576: CALL_OW 3
64580: ST_TO_ADDR
64581: GO 64558
64583: POP
64584: POP
// end ;
64585: LD_VAR 0 3
64589: RET
// export function ComExit ( unit ) ; var tmp ; begin
64590: LD_INT 0
64592: PPUSH
64593: PPUSH
// if not IsInUnit ( unit ) then
64594: LD_VAR 0 1
64598: PPUSH
64599: CALL_OW 310
64603: NOT
64604: IFFALSE 64608
// exit ;
64606: GO 64668
// tmp := IsInUnit ( unit ) ;
64608: LD_ADDR_VAR 0 3
64612: PUSH
64613: LD_VAR 0 1
64617: PPUSH
64618: CALL_OW 310
64622: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64623: LD_VAR 0 3
64627: PPUSH
64628: CALL_OW 247
64632: PUSH
64633: LD_INT 2
64635: EQUAL
64636: IFFALSE 64649
// ComExitVehicle ( unit ) else
64638: LD_VAR 0 1
64642: PPUSH
64643: CALL_OW 121
64647: GO 64658
// ComExitBuilding ( unit ) ;
64649: LD_VAR 0 1
64653: PPUSH
64654: CALL_OW 122
// result := tmp ;
64658: LD_ADDR_VAR 0 2
64662: PUSH
64663: LD_VAR 0 3
64667: ST_TO_ADDR
// end ;
64668: LD_VAR 0 2
64672: RET
// export function ComExitAll ( units ) ; var i ; begin
64673: LD_INT 0
64675: PPUSH
64676: PPUSH
// if not units then
64677: LD_VAR 0 1
64681: NOT
64682: IFFALSE 64686
// exit ;
64684: GO 64712
// for i in units do
64686: LD_ADDR_VAR 0 3
64690: PUSH
64691: LD_VAR 0 1
64695: PUSH
64696: FOR_IN
64697: IFFALSE 64710
// ComExit ( i ) ;
64699: LD_VAR 0 3
64703: PPUSH
64704: CALL 64590 0 1
64708: GO 64696
64710: POP
64711: POP
// end ;
64712: LD_VAR 0 2
64716: RET
// export function ResetHc ; begin
64717: LD_INT 0
64719: PPUSH
// InitHc ;
64720: CALL_OW 19
// hc_importance := 0 ;
64724: LD_ADDR_OWVAR 32
64728: PUSH
64729: LD_INT 0
64731: ST_TO_ADDR
// end ;
64732: LD_VAR 0 1
64736: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64737: LD_INT 0
64739: PPUSH
64740: PPUSH
64741: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64742: LD_ADDR_VAR 0 6
64746: PUSH
64747: LD_VAR 0 1
64751: PUSH
64752: LD_VAR 0 3
64756: PLUS
64757: PUSH
64758: LD_INT 2
64760: DIV
64761: ST_TO_ADDR
// if _x < 0 then
64762: LD_VAR 0 6
64766: PUSH
64767: LD_INT 0
64769: LESS
64770: IFFALSE 64787
// _x := _x * - 1 ;
64772: LD_ADDR_VAR 0 6
64776: PUSH
64777: LD_VAR 0 6
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: MUL
64786: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64787: LD_ADDR_VAR 0 7
64791: PUSH
64792: LD_VAR 0 2
64796: PUSH
64797: LD_VAR 0 4
64801: PLUS
64802: PUSH
64803: LD_INT 2
64805: DIV
64806: ST_TO_ADDR
// if _y < 0 then
64807: LD_VAR 0 7
64811: PUSH
64812: LD_INT 0
64814: LESS
64815: IFFALSE 64832
// _y := _y * - 1 ;
64817: LD_ADDR_VAR 0 7
64821: PUSH
64822: LD_VAR 0 7
64826: PUSH
64827: LD_INT 1
64829: NEG
64830: MUL
64831: ST_TO_ADDR
// result := [ _x , _y ] ;
64832: LD_ADDR_VAR 0 5
64836: PUSH
64837: LD_VAR 0 6
64841: PUSH
64842: LD_VAR 0 7
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: ST_TO_ADDR
// end ;
64851: LD_VAR 0 5
64855: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64856: LD_INT 0
64858: PPUSH
64859: PPUSH
64860: PPUSH
64861: PPUSH
// task := GetTaskList ( unit ) ;
64862: LD_ADDR_VAR 0 7
64866: PUSH
64867: LD_VAR 0 1
64871: PPUSH
64872: CALL_OW 437
64876: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64877: LD_VAR 0 7
64881: NOT
64882: PUSH
64883: LD_VAR 0 1
64887: PPUSH
64888: LD_VAR 0 2
64892: PPUSH
64893: CALL_OW 308
64897: NOT
64898: AND
64899: IFFALSE 64903
// exit ;
64901: GO 65021
// if IsInArea ( unit , area ) then
64903: LD_VAR 0 1
64907: PPUSH
64908: LD_VAR 0 2
64912: PPUSH
64913: CALL_OW 308
64917: IFFALSE 64935
// begin ComMoveToArea ( unit , goAway ) ;
64919: LD_VAR 0 1
64923: PPUSH
64924: LD_VAR 0 3
64928: PPUSH
64929: CALL_OW 113
// exit ;
64933: GO 65021
// end ; if task [ 1 ] [ 1 ] <> M then
64935: LD_VAR 0 7
64939: PUSH
64940: LD_INT 1
64942: ARRAY
64943: PUSH
64944: LD_INT 1
64946: ARRAY
64947: PUSH
64948: LD_STRING M
64950: NONEQUAL
64951: IFFALSE 64955
// exit ;
64953: GO 65021
// x := task [ 1 ] [ 2 ] ;
64955: LD_ADDR_VAR 0 5
64959: PUSH
64960: LD_VAR 0 7
64964: PUSH
64965: LD_INT 1
64967: ARRAY
64968: PUSH
64969: LD_INT 2
64971: ARRAY
64972: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64973: LD_ADDR_VAR 0 6
64977: PUSH
64978: LD_VAR 0 7
64982: PUSH
64983: LD_INT 1
64985: ARRAY
64986: PUSH
64987: LD_INT 3
64989: ARRAY
64990: ST_TO_ADDR
// if InArea ( x , y , area ) then
64991: LD_VAR 0 5
64995: PPUSH
64996: LD_VAR 0 6
65000: PPUSH
65001: LD_VAR 0 2
65005: PPUSH
65006: CALL_OW 309
65010: IFFALSE 65021
// ComStop ( unit ) ;
65012: LD_VAR 0 1
65016: PPUSH
65017: CALL_OW 141
// end ;
65021: LD_VAR 0 4
65025: RET
// export function Abs ( value ) ; begin
65026: LD_INT 0
65028: PPUSH
// result := value ;
65029: LD_ADDR_VAR 0 2
65033: PUSH
65034: LD_VAR 0 1
65038: ST_TO_ADDR
// if value < 0 then
65039: LD_VAR 0 1
65043: PUSH
65044: LD_INT 0
65046: LESS
65047: IFFALSE 65064
// result := value * - 1 ;
65049: LD_ADDR_VAR 0 2
65053: PUSH
65054: LD_VAR 0 1
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: MUL
65063: ST_TO_ADDR
// end ;
65064: LD_VAR 0 2
65068: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65069: LD_INT 0
65071: PPUSH
65072: PPUSH
65073: PPUSH
65074: PPUSH
65075: PPUSH
65076: PPUSH
65077: PPUSH
65078: PPUSH
// if not unit or not building then
65079: LD_VAR 0 1
65083: NOT
65084: PUSH
65085: LD_VAR 0 2
65089: NOT
65090: OR
65091: IFFALSE 65095
// exit ;
65093: GO 65321
// x := GetX ( building ) ;
65095: LD_ADDR_VAR 0 4
65099: PUSH
65100: LD_VAR 0 2
65104: PPUSH
65105: CALL_OW 250
65109: ST_TO_ADDR
// y := GetY ( building ) ;
65110: LD_ADDR_VAR 0 6
65114: PUSH
65115: LD_VAR 0 2
65119: PPUSH
65120: CALL_OW 251
65124: ST_TO_ADDR
// d := GetDir ( building ) ;
65125: LD_ADDR_VAR 0 8
65129: PUSH
65130: LD_VAR 0 2
65134: PPUSH
65135: CALL_OW 254
65139: ST_TO_ADDR
// r := 4 ;
65140: LD_ADDR_VAR 0 9
65144: PUSH
65145: LD_INT 4
65147: ST_TO_ADDR
// for i := 1 to 5 do
65148: LD_ADDR_VAR 0 10
65152: PUSH
65153: DOUBLE
65154: LD_INT 1
65156: DEC
65157: ST_TO_ADDR
65158: LD_INT 5
65160: PUSH
65161: FOR_TO
65162: IFFALSE 65319
// begin _x := ShiftX ( x , d , r + i ) ;
65164: LD_ADDR_VAR 0 5
65168: PUSH
65169: LD_VAR 0 4
65173: PPUSH
65174: LD_VAR 0 8
65178: PPUSH
65179: LD_VAR 0 9
65183: PUSH
65184: LD_VAR 0 10
65188: PLUS
65189: PPUSH
65190: CALL_OW 272
65194: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65195: LD_ADDR_VAR 0 7
65199: PUSH
65200: LD_VAR 0 6
65204: PPUSH
65205: LD_VAR 0 8
65209: PPUSH
65210: LD_VAR 0 9
65214: PUSH
65215: LD_VAR 0 10
65219: PLUS
65220: PPUSH
65221: CALL_OW 273
65225: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65226: LD_VAR 0 5
65230: PPUSH
65231: LD_VAR 0 7
65235: PPUSH
65236: CALL_OW 488
65240: PUSH
65241: LD_VAR 0 5
65245: PPUSH
65246: LD_VAR 0 7
65250: PPUSH
65251: CALL_OW 428
65255: PPUSH
65256: CALL_OW 247
65260: PUSH
65261: LD_INT 3
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: IN
65271: NOT
65272: AND
65273: IFFALSE 65317
// begin ComMoveXY ( unit , _x , _y ) ;
65275: LD_VAR 0 1
65279: PPUSH
65280: LD_VAR 0 5
65284: PPUSH
65285: LD_VAR 0 7
65289: PPUSH
65290: CALL_OW 111
// result := [ _x , _y ] ;
65294: LD_ADDR_VAR 0 3
65298: PUSH
65299: LD_VAR 0 5
65303: PUSH
65304: LD_VAR 0 7
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// exit ;
65313: POP
65314: POP
65315: GO 65321
// end ; end ;
65317: GO 65161
65319: POP
65320: POP
// end ;
65321: LD_VAR 0 3
65325: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65326: LD_INT 0
65328: PPUSH
65329: PPUSH
65330: PPUSH
// result := 0 ;
65331: LD_ADDR_VAR 0 3
65335: PUSH
65336: LD_INT 0
65338: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65339: LD_VAR 0 1
65343: PUSH
65344: LD_INT 0
65346: LESS
65347: PUSH
65348: LD_VAR 0 1
65352: PUSH
65353: LD_INT 8
65355: GREATER
65356: OR
65357: PUSH
65358: LD_VAR 0 2
65362: PUSH
65363: LD_INT 0
65365: LESS
65366: OR
65367: PUSH
65368: LD_VAR 0 2
65372: PUSH
65373: LD_INT 8
65375: GREATER
65376: OR
65377: IFFALSE 65381
// exit ;
65379: GO 65456
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65381: LD_ADDR_VAR 0 4
65385: PUSH
65386: LD_INT 22
65388: PUSH
65389: LD_VAR 0 2
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PPUSH
65398: CALL_OW 69
65402: PUSH
65403: FOR_IN
65404: IFFALSE 65454
// begin un := UnitShoot ( i ) ;
65406: LD_ADDR_VAR 0 5
65410: PUSH
65411: LD_VAR 0 4
65415: PPUSH
65416: CALL_OW 504
65420: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65421: LD_VAR 0 5
65425: PPUSH
65426: CALL_OW 255
65430: PUSH
65431: LD_VAR 0 1
65435: EQUAL
65436: IFFALSE 65452
// begin result := un ;
65438: LD_ADDR_VAR 0 3
65442: PUSH
65443: LD_VAR 0 5
65447: ST_TO_ADDR
// exit ;
65448: POP
65449: POP
65450: GO 65456
// end ; end ;
65452: GO 65403
65454: POP
65455: POP
// end ;
65456: LD_VAR 0 3
65460: RET
// export function GetCargoBay ( units ) ; begin
65461: LD_INT 0
65463: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65464: LD_ADDR_VAR 0 2
65468: PUSH
65469: LD_VAR 0 1
65473: PPUSH
65474: LD_INT 2
65476: PUSH
65477: LD_INT 34
65479: PUSH
65480: LD_INT 12
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 34
65489: PUSH
65490: LD_INT 51
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 34
65499: PUSH
65500: LD_INT 32
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 34
65509: PUSH
65510: LD_INT 89
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: PPUSH
65524: CALL_OW 72
65528: ST_TO_ADDR
// end ;
65529: LD_VAR 0 2
65533: RET
// export function Negate ( value ) ; begin
65534: LD_INT 0
65536: PPUSH
// result := not value ;
65537: LD_ADDR_VAR 0 2
65541: PUSH
65542: LD_VAR 0 1
65546: NOT
65547: ST_TO_ADDR
// end ;
65548: LD_VAR 0 2
65552: RET
// export function Inc ( value ) ; begin
65553: LD_INT 0
65555: PPUSH
// result := value + 1 ;
65556: LD_ADDR_VAR 0 2
65560: PUSH
65561: LD_VAR 0 1
65565: PUSH
65566: LD_INT 1
65568: PLUS
65569: ST_TO_ADDR
// end ;
65570: LD_VAR 0 2
65574: RET
// export function Dec ( value ) ; begin
65575: LD_INT 0
65577: PPUSH
// result := value - 1 ;
65578: LD_ADDR_VAR 0 2
65582: PUSH
65583: LD_VAR 0 1
65587: PUSH
65588: LD_INT 1
65590: MINUS
65591: ST_TO_ADDR
// end ;
65592: LD_VAR 0 2
65596: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65597: LD_INT 0
65599: PPUSH
65600: PPUSH
65601: PPUSH
65602: PPUSH
65603: PPUSH
65604: PPUSH
65605: PPUSH
65606: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65607: LD_VAR 0 1
65611: PPUSH
65612: LD_VAR 0 2
65616: PPUSH
65617: CALL_OW 488
65621: NOT
65622: PUSH
65623: LD_VAR 0 3
65627: PPUSH
65628: LD_VAR 0 4
65632: PPUSH
65633: CALL_OW 488
65637: NOT
65638: OR
65639: IFFALSE 65652
// begin result := - 1 ;
65641: LD_ADDR_VAR 0 5
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: ST_TO_ADDR
// exit ;
65650: GO 65887
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65652: LD_ADDR_VAR 0 12
65656: PUSH
65657: LD_VAR 0 1
65661: PPUSH
65662: LD_VAR 0 2
65666: PPUSH
65667: LD_VAR 0 3
65671: PPUSH
65672: LD_VAR 0 4
65676: PPUSH
65677: CALL 64737 0 4
65681: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65682: LD_ADDR_VAR 0 11
65686: PUSH
65687: LD_VAR 0 1
65691: PPUSH
65692: LD_VAR 0 2
65696: PPUSH
65697: LD_VAR 0 12
65701: PUSH
65702: LD_INT 1
65704: ARRAY
65705: PPUSH
65706: LD_VAR 0 12
65710: PUSH
65711: LD_INT 2
65713: ARRAY
65714: PPUSH
65715: CALL_OW 298
65719: ST_TO_ADDR
// distance := 9999 ;
65720: LD_ADDR_VAR 0 10
65724: PUSH
65725: LD_INT 9999
65727: ST_TO_ADDR
// for i := 0 to 5 do
65728: LD_ADDR_VAR 0 6
65732: PUSH
65733: DOUBLE
65734: LD_INT 0
65736: DEC
65737: ST_TO_ADDR
65738: LD_INT 5
65740: PUSH
65741: FOR_TO
65742: IFFALSE 65885
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65744: LD_ADDR_VAR 0 7
65748: PUSH
65749: LD_VAR 0 1
65753: PPUSH
65754: LD_VAR 0 6
65758: PPUSH
65759: LD_VAR 0 11
65763: PPUSH
65764: CALL_OW 272
65768: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65769: LD_ADDR_VAR 0 8
65773: PUSH
65774: LD_VAR 0 2
65778: PPUSH
65779: LD_VAR 0 6
65783: PPUSH
65784: LD_VAR 0 11
65788: PPUSH
65789: CALL_OW 273
65793: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65794: LD_VAR 0 7
65798: PPUSH
65799: LD_VAR 0 8
65803: PPUSH
65804: CALL_OW 488
65808: NOT
65809: IFFALSE 65813
// continue ;
65811: GO 65741
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65813: LD_ADDR_VAR 0 9
65817: PUSH
65818: LD_VAR 0 12
65822: PUSH
65823: LD_INT 1
65825: ARRAY
65826: PPUSH
65827: LD_VAR 0 12
65831: PUSH
65832: LD_INT 2
65834: ARRAY
65835: PPUSH
65836: LD_VAR 0 7
65840: PPUSH
65841: LD_VAR 0 8
65845: PPUSH
65846: CALL_OW 298
65850: ST_TO_ADDR
// if tmp < distance then
65851: LD_VAR 0 9
65855: PUSH
65856: LD_VAR 0 10
65860: LESS
65861: IFFALSE 65883
// begin result := i ;
65863: LD_ADDR_VAR 0 5
65867: PUSH
65868: LD_VAR 0 6
65872: ST_TO_ADDR
// distance := tmp ;
65873: LD_ADDR_VAR 0 10
65877: PUSH
65878: LD_VAR 0 9
65882: ST_TO_ADDR
// end ; end ;
65883: GO 65741
65885: POP
65886: POP
// end ;
65887: LD_VAR 0 5
65891: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65892: LD_INT 0
65894: PPUSH
65895: PPUSH
// if not driver or not IsInUnit ( driver ) then
65896: LD_VAR 0 1
65900: NOT
65901: PUSH
65902: LD_VAR 0 1
65906: PPUSH
65907: CALL_OW 310
65911: NOT
65912: OR
65913: IFFALSE 65917
// exit ;
65915: GO 66007
// vehicle := IsInUnit ( driver ) ;
65917: LD_ADDR_VAR 0 3
65921: PUSH
65922: LD_VAR 0 1
65926: PPUSH
65927: CALL_OW 310
65931: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65932: LD_VAR 0 1
65936: PPUSH
65937: LD_STRING \
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: PUSH
65967: LD_STRING E
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: LD_VAR 0 3
65980: PUSH
65981: LD_INT 0
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PPUSH
66003: CALL_OW 446
// end ;
66007: LD_VAR 0 2
66011: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66012: LD_INT 0
66014: PPUSH
66015: PPUSH
// if not driver or not IsInUnit ( driver ) then
66016: LD_VAR 0 1
66020: NOT
66021: PUSH
66022: LD_VAR 0 1
66026: PPUSH
66027: CALL_OW 310
66031: NOT
66032: OR
66033: IFFALSE 66037
// exit ;
66035: GO 66127
// vehicle := IsInUnit ( driver ) ;
66037: LD_ADDR_VAR 0 3
66041: PUSH
66042: LD_VAR 0 1
66046: PPUSH
66047: CALL_OW 310
66051: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66052: LD_VAR 0 1
66056: PPUSH
66057: LD_STRING \
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: PUSH
66087: LD_STRING E
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: LD_INT 0
66095: PUSH
66096: LD_VAR 0 3
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PPUSH
66123: CALL_OW 447
// end ;
66127: LD_VAR 0 2
66131: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66132: LD_INT 0
66134: PPUSH
66135: PPUSH
66136: PPUSH
// tmp := [ ] ;
66137: LD_ADDR_VAR 0 5
66141: PUSH
66142: EMPTY
66143: ST_TO_ADDR
// for i in units do
66144: LD_ADDR_VAR 0 4
66148: PUSH
66149: LD_VAR 0 1
66153: PUSH
66154: FOR_IN
66155: IFFALSE 66193
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66157: LD_ADDR_VAR 0 5
66161: PUSH
66162: LD_VAR 0 5
66166: PPUSH
66167: LD_VAR 0 5
66171: PUSH
66172: LD_INT 1
66174: PLUS
66175: PPUSH
66176: LD_VAR 0 4
66180: PPUSH
66181: CALL_OW 256
66185: PPUSH
66186: CALL_OW 2
66190: ST_TO_ADDR
66191: GO 66154
66193: POP
66194: POP
// if not tmp then
66195: LD_VAR 0 5
66199: NOT
66200: IFFALSE 66204
// exit ;
66202: GO 66252
// if asc then
66204: LD_VAR 0 2
66208: IFFALSE 66232
// result := SortListByListAsc ( units , tmp ) else
66210: LD_ADDR_VAR 0 3
66214: PUSH
66215: LD_VAR 0 1
66219: PPUSH
66220: LD_VAR 0 5
66224: PPUSH
66225: CALL_OW 76
66229: ST_TO_ADDR
66230: GO 66252
// result := SortListByListDesc ( units , tmp ) ;
66232: LD_ADDR_VAR 0 3
66236: PUSH
66237: LD_VAR 0 1
66241: PPUSH
66242: LD_VAR 0 5
66246: PPUSH
66247: CALL_OW 77
66251: ST_TO_ADDR
// end ;
66252: LD_VAR 0 3
66256: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66257: LD_INT 0
66259: PPUSH
66260: PPUSH
// task := GetTaskList ( mech ) ;
66261: LD_ADDR_VAR 0 4
66265: PUSH
66266: LD_VAR 0 1
66270: PPUSH
66271: CALL_OW 437
66275: ST_TO_ADDR
// if not task then
66276: LD_VAR 0 4
66280: NOT
66281: IFFALSE 66285
// exit ;
66283: GO 66327
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66285: LD_ADDR_VAR 0 3
66289: PUSH
66290: LD_VAR 0 4
66294: PUSH
66295: LD_INT 1
66297: ARRAY
66298: PUSH
66299: LD_INT 1
66301: ARRAY
66302: PUSH
66303: LD_STRING r
66305: EQUAL
66306: PUSH
66307: LD_VAR 0 4
66311: PUSH
66312: LD_INT 1
66314: ARRAY
66315: PUSH
66316: LD_INT 4
66318: ARRAY
66319: PUSH
66320: LD_VAR 0 2
66324: EQUAL
66325: AND
66326: ST_TO_ADDR
// end ;
66327: LD_VAR 0 3
66331: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66332: LD_INT 0
66334: PPUSH
// SetDir ( unit , d ) ;
66335: LD_VAR 0 1
66339: PPUSH
66340: LD_VAR 0 4
66344: PPUSH
66345: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66349: LD_VAR 0 1
66353: PPUSH
66354: LD_VAR 0 2
66358: PPUSH
66359: LD_VAR 0 3
66363: PPUSH
66364: LD_VAR 0 5
66368: PPUSH
66369: CALL_OW 48
// end ;
66373: LD_VAR 0 6
66377: RET
// export function ToNaturalNumber ( number ) ; begin
66378: LD_INT 0
66380: PPUSH
// result := number div 1 ;
66381: LD_ADDR_VAR 0 2
66385: PUSH
66386: LD_VAR 0 1
66390: PUSH
66391: LD_INT 1
66393: DIV
66394: ST_TO_ADDR
// if number < 0 then
66395: LD_VAR 0 1
66399: PUSH
66400: LD_INT 0
66402: LESS
66403: IFFALSE 66413
// result := 0 ;
66405: LD_ADDR_VAR 0 2
66409: PUSH
66410: LD_INT 0
66412: ST_TO_ADDR
// end ;
66413: LD_VAR 0 2
66417: RET
// export function SortByClass ( units , class ) ; var un ; begin
66418: LD_INT 0
66420: PPUSH
66421: PPUSH
// if not units or not class then
66422: LD_VAR 0 1
66426: NOT
66427: PUSH
66428: LD_VAR 0 2
66432: NOT
66433: OR
66434: IFFALSE 66438
// exit ;
66436: GO 66533
// result := [ ] ;
66438: LD_ADDR_VAR 0 3
66442: PUSH
66443: EMPTY
66444: ST_TO_ADDR
// for un in units do
66445: LD_ADDR_VAR 0 4
66449: PUSH
66450: LD_VAR 0 1
66454: PUSH
66455: FOR_IN
66456: IFFALSE 66531
// if GetClass ( un ) = class then
66458: LD_VAR 0 4
66462: PPUSH
66463: CALL_OW 257
66467: PUSH
66468: LD_VAR 0 2
66472: EQUAL
66473: IFFALSE 66500
// result := Insert ( result , 1 , un ) else
66475: LD_ADDR_VAR 0 3
66479: PUSH
66480: LD_VAR 0 3
66484: PPUSH
66485: LD_INT 1
66487: PPUSH
66488: LD_VAR 0 4
66492: PPUSH
66493: CALL_OW 2
66497: ST_TO_ADDR
66498: GO 66529
// result := Replace ( result , result + 1 , un ) ;
66500: LD_ADDR_VAR 0 3
66504: PUSH
66505: LD_VAR 0 3
66509: PPUSH
66510: LD_VAR 0 3
66514: PUSH
66515: LD_INT 1
66517: PLUS
66518: PPUSH
66519: LD_VAR 0 4
66523: PPUSH
66524: CALL_OW 1
66528: ST_TO_ADDR
66529: GO 66455
66531: POP
66532: POP
// end ;
66533: LD_VAR 0 3
66537: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66538: LD_INT 0
66540: PPUSH
66541: PPUSH
66542: PPUSH
66543: PPUSH
66544: PPUSH
66545: PPUSH
66546: PPUSH
// result := [ ] ;
66547: LD_ADDR_VAR 0 4
66551: PUSH
66552: EMPTY
66553: ST_TO_ADDR
// if x - r < 0 then
66554: LD_VAR 0 1
66558: PUSH
66559: LD_VAR 0 3
66563: MINUS
66564: PUSH
66565: LD_INT 0
66567: LESS
66568: IFFALSE 66580
// min_x := 0 else
66570: LD_ADDR_VAR 0 8
66574: PUSH
66575: LD_INT 0
66577: ST_TO_ADDR
66578: GO 66596
// min_x := x - r ;
66580: LD_ADDR_VAR 0 8
66584: PUSH
66585: LD_VAR 0 1
66589: PUSH
66590: LD_VAR 0 3
66594: MINUS
66595: ST_TO_ADDR
// if y - r < 0 then
66596: LD_VAR 0 2
66600: PUSH
66601: LD_VAR 0 3
66605: MINUS
66606: PUSH
66607: LD_INT 0
66609: LESS
66610: IFFALSE 66622
// min_y := 0 else
66612: LD_ADDR_VAR 0 7
66616: PUSH
66617: LD_INT 0
66619: ST_TO_ADDR
66620: GO 66638
// min_y := y - r ;
66622: LD_ADDR_VAR 0 7
66626: PUSH
66627: LD_VAR 0 2
66631: PUSH
66632: LD_VAR 0 3
66636: MINUS
66637: ST_TO_ADDR
// max_x := x + r ;
66638: LD_ADDR_VAR 0 9
66642: PUSH
66643: LD_VAR 0 1
66647: PUSH
66648: LD_VAR 0 3
66652: PLUS
66653: ST_TO_ADDR
// max_y := y + r ;
66654: LD_ADDR_VAR 0 10
66658: PUSH
66659: LD_VAR 0 2
66663: PUSH
66664: LD_VAR 0 3
66668: PLUS
66669: ST_TO_ADDR
// for _x = min_x to max_x do
66670: LD_ADDR_VAR 0 5
66674: PUSH
66675: DOUBLE
66676: LD_VAR 0 8
66680: DEC
66681: ST_TO_ADDR
66682: LD_VAR 0 9
66686: PUSH
66687: FOR_TO
66688: IFFALSE 66789
// for _y = min_y to max_y do
66690: LD_ADDR_VAR 0 6
66694: PUSH
66695: DOUBLE
66696: LD_VAR 0 7
66700: DEC
66701: ST_TO_ADDR
66702: LD_VAR 0 10
66706: PUSH
66707: FOR_TO
66708: IFFALSE 66785
// begin if not ValidHex ( _x , _y ) then
66710: LD_VAR 0 5
66714: PPUSH
66715: LD_VAR 0 6
66719: PPUSH
66720: CALL_OW 488
66724: NOT
66725: IFFALSE 66729
// continue ;
66727: GO 66707
// if GetResourceTypeXY ( _x , _y ) then
66729: LD_VAR 0 5
66733: PPUSH
66734: LD_VAR 0 6
66738: PPUSH
66739: CALL_OW 283
66743: IFFALSE 66783
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66745: LD_ADDR_VAR 0 4
66749: PUSH
66750: LD_VAR 0 4
66754: PPUSH
66755: LD_VAR 0 4
66759: PUSH
66760: LD_INT 1
66762: PLUS
66763: PPUSH
66764: LD_VAR 0 5
66768: PUSH
66769: LD_VAR 0 6
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PPUSH
66778: CALL_OW 1
66782: ST_TO_ADDR
// end ;
66783: GO 66707
66785: POP
66786: POP
66787: GO 66687
66789: POP
66790: POP
// end ;
66791: LD_VAR 0 4
66795: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66796: LD_INT 0
66798: PPUSH
66799: PPUSH
66800: PPUSH
66801: PPUSH
66802: PPUSH
66803: PPUSH
66804: PPUSH
66805: PPUSH
// if not units then
66806: LD_VAR 0 1
66810: NOT
66811: IFFALSE 66815
// exit ;
66813: GO 67339
// result := UnitFilter ( units , [ f_ok ] ) ;
66815: LD_ADDR_VAR 0 3
66819: PUSH
66820: LD_VAR 0 1
66824: PPUSH
66825: LD_INT 50
66827: PUSH
66828: EMPTY
66829: LIST
66830: PPUSH
66831: CALL_OW 72
66835: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66836: LD_ADDR_VAR 0 8
66840: PUSH
66841: LD_VAR 0 1
66845: PUSH
66846: LD_INT 1
66848: ARRAY
66849: PPUSH
66850: CALL_OW 255
66854: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66855: LD_ADDR_VAR 0 10
66859: PUSH
66860: LD_INT 29
66862: PUSH
66863: LD_INT 91
66865: PUSH
66866: LD_INT 49
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: LIST
66873: ST_TO_ADDR
// if not result then
66874: LD_VAR 0 3
66878: NOT
66879: IFFALSE 66883
// exit ;
66881: GO 67339
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66883: LD_ADDR_VAR 0 5
66887: PUSH
66888: LD_INT 81
66890: PUSH
66891: LD_VAR 0 8
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PPUSH
66900: CALL_OW 69
66904: ST_TO_ADDR
// for i in result do
66905: LD_ADDR_VAR 0 4
66909: PUSH
66910: LD_VAR 0 3
66914: PUSH
66915: FOR_IN
66916: IFFALSE 67337
// begin tag := GetTag ( i ) + 1 ;
66918: LD_ADDR_VAR 0 9
66922: PUSH
66923: LD_VAR 0 4
66927: PPUSH
66928: CALL_OW 110
66932: PUSH
66933: LD_INT 1
66935: PLUS
66936: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66937: LD_ADDR_VAR 0 7
66941: PUSH
66942: LD_VAR 0 4
66946: PPUSH
66947: CALL_OW 250
66951: PPUSH
66952: LD_VAR 0 4
66956: PPUSH
66957: CALL_OW 251
66961: PPUSH
66962: LD_INT 6
66964: PPUSH
66965: CALL 66538 0 3
66969: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66970: LD_VAR 0 4
66974: PPUSH
66975: CALL_OW 247
66979: PUSH
66980: LD_INT 2
66982: EQUAL
66983: PUSH
66984: LD_VAR 0 7
66988: AND
66989: PUSH
66990: LD_VAR 0 4
66994: PPUSH
66995: CALL_OW 264
66999: PUSH
67000: LD_VAR 0 10
67004: IN
67005: NOT
67006: AND
67007: IFFALSE 67046
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67009: LD_VAR 0 4
67013: PPUSH
67014: LD_VAR 0 7
67018: PUSH
67019: LD_INT 1
67021: ARRAY
67022: PUSH
67023: LD_INT 1
67025: ARRAY
67026: PPUSH
67027: LD_VAR 0 7
67031: PUSH
67032: LD_INT 1
67034: ARRAY
67035: PUSH
67036: LD_INT 2
67038: ARRAY
67039: PPUSH
67040: CALL_OW 116
67044: GO 67335
// if path > tag then
67046: LD_VAR 0 2
67050: PUSH
67051: LD_VAR 0 9
67055: GREATER
67056: IFFALSE 67264
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67058: LD_ADDR_VAR 0 6
67062: PUSH
67063: LD_VAR 0 5
67067: PPUSH
67068: LD_INT 91
67070: PUSH
67071: LD_VAR 0 4
67075: PUSH
67076: LD_INT 8
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: LIST
67083: PPUSH
67084: CALL_OW 72
67088: ST_TO_ADDR
// if nearEnemy then
67089: LD_VAR 0 6
67093: IFFALSE 67162
// begin if GetWeapon ( i ) = ru_time_lapser then
67095: LD_VAR 0 4
67099: PPUSH
67100: CALL_OW 264
67104: PUSH
67105: LD_INT 49
67107: EQUAL
67108: IFFALSE 67136
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67110: LD_VAR 0 4
67114: PPUSH
67115: LD_VAR 0 6
67119: PPUSH
67120: LD_VAR 0 4
67124: PPUSH
67125: CALL_OW 74
67129: PPUSH
67130: CALL_OW 112
67134: GO 67160
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67136: LD_VAR 0 4
67140: PPUSH
67141: LD_VAR 0 6
67145: PPUSH
67146: LD_VAR 0 4
67150: PPUSH
67151: CALL_OW 74
67155: PPUSH
67156: CALL_OW 115
// end else
67160: GO 67262
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67162: LD_VAR 0 4
67166: PPUSH
67167: LD_VAR 0 2
67171: PUSH
67172: LD_VAR 0 9
67176: ARRAY
67177: PUSH
67178: LD_INT 1
67180: ARRAY
67181: PPUSH
67182: LD_VAR 0 2
67186: PUSH
67187: LD_VAR 0 9
67191: ARRAY
67192: PUSH
67193: LD_INT 2
67195: ARRAY
67196: PPUSH
67197: CALL_OW 297
67201: PUSH
67202: LD_INT 6
67204: GREATER
67205: IFFALSE 67248
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67207: LD_VAR 0 4
67211: PPUSH
67212: LD_VAR 0 2
67216: PUSH
67217: LD_VAR 0 9
67221: ARRAY
67222: PUSH
67223: LD_INT 1
67225: ARRAY
67226: PPUSH
67227: LD_VAR 0 2
67231: PUSH
67232: LD_VAR 0 9
67236: ARRAY
67237: PUSH
67238: LD_INT 2
67240: ARRAY
67241: PPUSH
67242: CALL_OW 114
67246: GO 67262
// SetTag ( i , tag ) ;
67248: LD_VAR 0 4
67252: PPUSH
67253: LD_VAR 0 9
67257: PPUSH
67258: CALL_OW 109
// end else
67262: GO 67335
// if enemy then
67264: LD_VAR 0 5
67268: IFFALSE 67335
// begin if GetWeapon ( i ) = ru_time_lapser then
67270: LD_VAR 0 4
67274: PPUSH
67275: CALL_OW 264
67279: PUSH
67280: LD_INT 49
67282: EQUAL
67283: IFFALSE 67311
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67285: LD_VAR 0 4
67289: PPUSH
67290: LD_VAR 0 5
67294: PPUSH
67295: LD_VAR 0 4
67299: PPUSH
67300: CALL_OW 74
67304: PPUSH
67305: CALL_OW 112
67309: GO 67335
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67311: LD_VAR 0 4
67315: PPUSH
67316: LD_VAR 0 5
67320: PPUSH
67321: LD_VAR 0 4
67325: PPUSH
67326: CALL_OW 74
67330: PPUSH
67331: CALL_OW 115
// end ; end ;
67335: GO 66915
67337: POP
67338: POP
// end ;
67339: LD_VAR 0 3
67343: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67344: LD_INT 0
67346: PPUSH
67347: PPUSH
67348: PPUSH
// if not unit or IsInUnit ( unit ) then
67349: LD_VAR 0 1
67353: NOT
67354: PUSH
67355: LD_VAR 0 1
67359: PPUSH
67360: CALL_OW 310
67364: OR
67365: IFFALSE 67369
// exit ;
67367: GO 67460
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67369: LD_ADDR_VAR 0 4
67373: PUSH
67374: LD_VAR 0 1
67378: PPUSH
67379: CALL_OW 250
67383: PPUSH
67384: LD_VAR 0 2
67388: PPUSH
67389: LD_INT 1
67391: PPUSH
67392: CALL_OW 272
67396: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67397: LD_ADDR_VAR 0 5
67401: PUSH
67402: LD_VAR 0 1
67406: PPUSH
67407: CALL_OW 251
67411: PPUSH
67412: LD_VAR 0 2
67416: PPUSH
67417: LD_INT 1
67419: PPUSH
67420: CALL_OW 273
67424: ST_TO_ADDR
// if ValidHex ( x , y ) then
67425: LD_VAR 0 4
67429: PPUSH
67430: LD_VAR 0 5
67434: PPUSH
67435: CALL_OW 488
67439: IFFALSE 67460
// ComTurnXY ( unit , x , y ) ;
67441: LD_VAR 0 1
67445: PPUSH
67446: LD_VAR 0 4
67450: PPUSH
67451: LD_VAR 0 5
67455: PPUSH
67456: CALL_OW 118
// end ;
67460: LD_VAR 0 3
67464: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67465: LD_INT 0
67467: PPUSH
67468: PPUSH
// result := false ;
67469: LD_ADDR_VAR 0 3
67473: PUSH
67474: LD_INT 0
67476: ST_TO_ADDR
// if not units then
67477: LD_VAR 0 2
67481: NOT
67482: IFFALSE 67486
// exit ;
67484: GO 67531
// for i in units do
67486: LD_ADDR_VAR 0 4
67490: PUSH
67491: LD_VAR 0 2
67495: PUSH
67496: FOR_IN
67497: IFFALSE 67529
// if See ( side , i ) then
67499: LD_VAR 0 1
67503: PPUSH
67504: LD_VAR 0 4
67508: PPUSH
67509: CALL_OW 292
67513: IFFALSE 67527
// begin result := true ;
67515: LD_ADDR_VAR 0 3
67519: PUSH
67520: LD_INT 1
67522: ST_TO_ADDR
// exit ;
67523: POP
67524: POP
67525: GO 67531
// end ;
67527: GO 67496
67529: POP
67530: POP
// end ;
67531: LD_VAR 0 3
67535: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67536: LD_INT 0
67538: PPUSH
67539: PPUSH
67540: PPUSH
67541: PPUSH
// if not unit or not points then
67542: LD_VAR 0 1
67546: NOT
67547: PUSH
67548: LD_VAR 0 2
67552: NOT
67553: OR
67554: IFFALSE 67558
// exit ;
67556: GO 67648
// dist := 99999 ;
67558: LD_ADDR_VAR 0 5
67562: PUSH
67563: LD_INT 99999
67565: ST_TO_ADDR
// for i in points do
67566: LD_ADDR_VAR 0 4
67570: PUSH
67571: LD_VAR 0 2
67575: PUSH
67576: FOR_IN
67577: IFFALSE 67646
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67579: LD_ADDR_VAR 0 6
67583: PUSH
67584: LD_VAR 0 1
67588: PPUSH
67589: LD_VAR 0 4
67593: PUSH
67594: LD_INT 1
67596: ARRAY
67597: PPUSH
67598: LD_VAR 0 4
67602: PUSH
67603: LD_INT 2
67605: ARRAY
67606: PPUSH
67607: CALL_OW 297
67611: ST_TO_ADDR
// if tmpDist < dist then
67612: LD_VAR 0 6
67616: PUSH
67617: LD_VAR 0 5
67621: LESS
67622: IFFALSE 67644
// begin result := i ;
67624: LD_ADDR_VAR 0 3
67628: PUSH
67629: LD_VAR 0 4
67633: ST_TO_ADDR
// dist := tmpDist ;
67634: LD_ADDR_VAR 0 5
67638: PUSH
67639: LD_VAR 0 6
67643: ST_TO_ADDR
// end ; end ;
67644: GO 67576
67646: POP
67647: POP
// end ;
67648: LD_VAR 0 3
67652: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67653: LD_INT 0
67655: PPUSH
// uc_side := side ;
67656: LD_ADDR_OWVAR 20
67660: PUSH
67661: LD_VAR 0 1
67665: ST_TO_ADDR
// uc_nation := 3 ;
67666: LD_ADDR_OWVAR 21
67670: PUSH
67671: LD_INT 3
67673: ST_TO_ADDR
// vc_chassis := 25 ;
67674: LD_ADDR_OWVAR 37
67678: PUSH
67679: LD_INT 25
67681: ST_TO_ADDR
// vc_engine := engine_siberite ;
67682: LD_ADDR_OWVAR 39
67686: PUSH
67687: LD_INT 3
67689: ST_TO_ADDR
// vc_control := control_computer ;
67690: LD_ADDR_OWVAR 38
67694: PUSH
67695: LD_INT 3
67697: ST_TO_ADDR
// vc_weapon := 59 ;
67698: LD_ADDR_OWVAR 40
67702: PUSH
67703: LD_INT 59
67705: ST_TO_ADDR
// result := CreateVehicle ;
67706: LD_ADDR_VAR 0 5
67710: PUSH
67711: CALL_OW 45
67715: ST_TO_ADDR
// SetDir ( result , d ) ;
67716: LD_VAR 0 5
67720: PPUSH
67721: LD_VAR 0 4
67725: PPUSH
67726: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67730: LD_VAR 0 5
67734: PPUSH
67735: LD_VAR 0 2
67739: PPUSH
67740: LD_VAR 0 3
67744: PPUSH
67745: LD_INT 0
67747: PPUSH
67748: CALL_OW 48
// end ;
67752: LD_VAR 0 5
67756: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67757: LD_INT 0
67759: PPUSH
67760: PPUSH
67761: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67762: LD_ADDR_VAR 0 2
67766: PUSH
67767: LD_INT 0
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67785: LD_VAR 0 1
67789: NOT
67790: PUSH
67791: LD_VAR 0 1
67795: PPUSH
67796: CALL_OW 264
67800: PUSH
67801: LD_INT 12
67803: PUSH
67804: LD_INT 51
67806: PUSH
67807: LD_INT 32
67809: PUSH
67810: LD_INT 89
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: IN
67819: NOT
67820: OR
67821: IFFALSE 67825
// exit ;
67823: GO 67923
// for i := 1 to 3 do
67825: LD_ADDR_VAR 0 3
67829: PUSH
67830: DOUBLE
67831: LD_INT 1
67833: DEC
67834: ST_TO_ADDR
67835: LD_INT 3
67837: PUSH
67838: FOR_TO
67839: IFFALSE 67921
// begin tmp := GetCargo ( cargo , i ) ;
67841: LD_ADDR_VAR 0 4
67845: PUSH
67846: LD_VAR 0 1
67850: PPUSH
67851: LD_VAR 0 3
67855: PPUSH
67856: CALL_OW 289
67860: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67861: LD_ADDR_VAR 0 2
67865: PUSH
67866: LD_VAR 0 2
67870: PPUSH
67871: LD_VAR 0 3
67875: PPUSH
67876: LD_VAR 0 4
67880: PPUSH
67881: CALL_OW 1
67885: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67886: LD_ADDR_VAR 0 2
67890: PUSH
67891: LD_VAR 0 2
67895: PPUSH
67896: LD_INT 4
67898: PPUSH
67899: LD_VAR 0 2
67903: PUSH
67904: LD_INT 4
67906: ARRAY
67907: PUSH
67908: LD_VAR 0 4
67912: PLUS
67913: PPUSH
67914: CALL_OW 1
67918: ST_TO_ADDR
// end ;
67919: GO 67838
67921: POP
67922: POP
// end ;
67923: LD_VAR 0 2
67927: RET
// export function Length ( array ) ; begin
67928: LD_INT 0
67930: PPUSH
// result := array + 0 ;
67931: LD_ADDR_VAR 0 2
67935: PUSH
67936: LD_VAR 0 1
67940: PUSH
67941: LD_INT 0
67943: PLUS
67944: ST_TO_ADDR
// end ;
67945: LD_VAR 0 2
67949: RET
// export function PrepareArray ( array ) ; begin
67950: LD_INT 0
67952: PPUSH
// result := array diff 0 ;
67953: LD_ADDR_VAR 0 2
67957: PUSH
67958: LD_VAR 0 1
67962: PUSH
67963: LD_INT 0
67965: DIFF
67966: ST_TO_ADDR
// if not result [ 1 ] then
67967: LD_VAR 0 2
67971: PUSH
67972: LD_INT 1
67974: ARRAY
67975: NOT
67976: IFFALSE 67996
// result := Delete ( result , 1 ) ;
67978: LD_ADDR_VAR 0 2
67982: PUSH
67983: LD_VAR 0 2
67987: PPUSH
67988: LD_INT 1
67990: PPUSH
67991: CALL_OW 3
67995: ST_TO_ADDR
// end ;
67996: LD_VAR 0 2
68000: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68001: LD_INT 0
68003: PPUSH
68004: PPUSH
68005: PPUSH
68006: PPUSH
// sibRocketRange := 25 ;
68007: LD_ADDR_VAR 0 6
68011: PUSH
68012: LD_INT 25
68014: ST_TO_ADDR
// result := false ;
68015: LD_ADDR_VAR 0 4
68019: PUSH
68020: LD_INT 0
68022: ST_TO_ADDR
// for i := 0 to 5 do
68023: LD_ADDR_VAR 0 5
68027: PUSH
68028: DOUBLE
68029: LD_INT 0
68031: DEC
68032: ST_TO_ADDR
68033: LD_INT 5
68035: PUSH
68036: FOR_TO
68037: IFFALSE 68104
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68039: LD_VAR 0 1
68043: PPUSH
68044: LD_VAR 0 5
68048: PPUSH
68049: LD_VAR 0 6
68053: PPUSH
68054: CALL_OW 272
68058: PPUSH
68059: LD_VAR 0 2
68063: PPUSH
68064: LD_VAR 0 5
68068: PPUSH
68069: LD_VAR 0 6
68073: PPUSH
68074: CALL_OW 273
68078: PPUSH
68079: LD_VAR 0 3
68083: PPUSH
68084: CALL_OW 309
68088: IFFALSE 68102
// begin result := true ;
68090: LD_ADDR_VAR 0 4
68094: PUSH
68095: LD_INT 1
68097: ST_TO_ADDR
// exit ;
68098: POP
68099: POP
68100: GO 68106
// end ;
68102: GO 68036
68104: POP
68105: POP
// end ;
68106: LD_VAR 0 4
68110: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68111: LD_INT 0
68113: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68114: LD_VAR 0 1
68118: PPUSH
68119: LD_VAR 0 2
68123: PPUSH
68124: LD_INT 0
68126: PPUSH
68127: LD_INT 0
68129: PPUSH
68130: LD_INT 1
68132: PPUSH
68133: LD_INT 0
68135: PPUSH
68136: CALL_OW 587
// end ; end_of_file
68140: LD_VAR 0 3
68144: RET
// every 0 0$1 do
68145: GO 68147
68147: DISABLE
// begin enable ;
68148: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
68149: LD_STRING updateTimer(
68151: PUSH
68152: LD_OWVAR 1
68156: STR
68157: PUSH
68158: LD_STRING );
68160: STR
68161: PPUSH
68162: CALL_OW 559
// end ;
68166: END
// export function SOS_MapStart ( ) ; begin
68167: LD_INT 0
68169: PPUSH
// if streamModeActive then
68170: LD_EXP 66
68174: IFFALSE 68183
// DefineStreamItems ( true ) ;
68176: LD_INT 1
68178: PPUSH
68179: CALL 69837 0 1
// UpdateFactoryWaypoints ( ) ;
68183: CALL 82698 0 0
// UpdateWarehouseGatheringPoints ( ) ;
68187: CALL 82955 0 0
// end ;
68191: LD_VAR 0 1
68195: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68196: LD_INT 0
68198: PPUSH
// if p2 = hack_mode then
68199: LD_VAR 0 2
68203: PUSH
68204: LD_INT 100
68206: EQUAL
68207: IFFALSE 69210
// begin if not StreamModeActive then
68209: LD_EXP 66
68213: NOT
68214: IFFALSE 68224
// StreamModeActive := true ;
68216: LD_ADDR_EXP 66
68220: PUSH
68221: LD_INT 1
68223: ST_TO_ADDR
// if p3 = 0 then
68224: LD_VAR 0 3
68228: PUSH
68229: LD_INT 0
68231: EQUAL
68232: IFFALSE 68238
// InitStreamMode ;
68234: CALL 69373 0 0
// if p3 = 1 then
68238: LD_VAR 0 3
68242: PUSH
68243: LD_INT 1
68245: EQUAL
68246: IFFALSE 68256
// sRocket := true ;
68248: LD_ADDR_EXP 71
68252: PUSH
68253: LD_INT 1
68255: ST_TO_ADDR
// if p3 = 2 then
68256: LD_VAR 0 3
68260: PUSH
68261: LD_INT 2
68263: EQUAL
68264: IFFALSE 68274
// sSpeed := true ;
68266: LD_ADDR_EXP 70
68270: PUSH
68271: LD_INT 1
68273: ST_TO_ADDR
// if p3 = 3 then
68274: LD_VAR 0 3
68278: PUSH
68279: LD_INT 3
68281: EQUAL
68282: IFFALSE 68292
// sEngine := true ;
68284: LD_ADDR_EXP 72
68288: PUSH
68289: LD_INT 1
68291: ST_TO_ADDR
// if p3 = 4 then
68292: LD_VAR 0 3
68296: PUSH
68297: LD_INT 4
68299: EQUAL
68300: IFFALSE 68310
// sSpec := true ;
68302: LD_ADDR_EXP 69
68306: PUSH
68307: LD_INT 1
68309: ST_TO_ADDR
// if p3 = 5 then
68310: LD_VAR 0 3
68314: PUSH
68315: LD_INT 5
68317: EQUAL
68318: IFFALSE 68328
// sLevel := true ;
68320: LD_ADDR_EXP 73
68324: PUSH
68325: LD_INT 1
68327: ST_TO_ADDR
// if p3 = 6 then
68328: LD_VAR 0 3
68332: PUSH
68333: LD_INT 6
68335: EQUAL
68336: IFFALSE 68346
// sArmoury := true ;
68338: LD_ADDR_EXP 74
68342: PUSH
68343: LD_INT 1
68345: ST_TO_ADDR
// if p3 = 7 then
68346: LD_VAR 0 3
68350: PUSH
68351: LD_INT 7
68353: EQUAL
68354: IFFALSE 68364
// sRadar := true ;
68356: LD_ADDR_EXP 75
68360: PUSH
68361: LD_INT 1
68363: ST_TO_ADDR
// if p3 = 8 then
68364: LD_VAR 0 3
68368: PUSH
68369: LD_INT 8
68371: EQUAL
68372: IFFALSE 68382
// sBunker := true ;
68374: LD_ADDR_EXP 76
68378: PUSH
68379: LD_INT 1
68381: ST_TO_ADDR
// if p3 = 9 then
68382: LD_VAR 0 3
68386: PUSH
68387: LD_INT 9
68389: EQUAL
68390: IFFALSE 68400
// sHack := true ;
68392: LD_ADDR_EXP 77
68396: PUSH
68397: LD_INT 1
68399: ST_TO_ADDR
// if p3 = 10 then
68400: LD_VAR 0 3
68404: PUSH
68405: LD_INT 10
68407: EQUAL
68408: IFFALSE 68418
// sFire := true ;
68410: LD_ADDR_EXP 78
68414: PUSH
68415: LD_INT 1
68417: ST_TO_ADDR
// if p3 = 11 then
68418: LD_VAR 0 3
68422: PUSH
68423: LD_INT 11
68425: EQUAL
68426: IFFALSE 68436
// sRefresh := true ;
68428: LD_ADDR_EXP 79
68432: PUSH
68433: LD_INT 1
68435: ST_TO_ADDR
// if p3 = 12 then
68436: LD_VAR 0 3
68440: PUSH
68441: LD_INT 12
68443: EQUAL
68444: IFFALSE 68454
// sExp := true ;
68446: LD_ADDR_EXP 80
68450: PUSH
68451: LD_INT 1
68453: ST_TO_ADDR
// if p3 = 13 then
68454: LD_VAR 0 3
68458: PUSH
68459: LD_INT 13
68461: EQUAL
68462: IFFALSE 68472
// sDepot := true ;
68464: LD_ADDR_EXP 81
68468: PUSH
68469: LD_INT 1
68471: ST_TO_ADDR
// if p3 = 14 then
68472: LD_VAR 0 3
68476: PUSH
68477: LD_INT 14
68479: EQUAL
68480: IFFALSE 68490
// sFlag := true ;
68482: LD_ADDR_EXP 82
68486: PUSH
68487: LD_INT 1
68489: ST_TO_ADDR
// if p3 = 15 then
68490: LD_VAR 0 3
68494: PUSH
68495: LD_INT 15
68497: EQUAL
68498: IFFALSE 68508
// sKamikadze := true ;
68500: LD_ADDR_EXP 90
68504: PUSH
68505: LD_INT 1
68507: ST_TO_ADDR
// if p3 = 16 then
68508: LD_VAR 0 3
68512: PUSH
68513: LD_INT 16
68515: EQUAL
68516: IFFALSE 68526
// sTroll := true ;
68518: LD_ADDR_EXP 91
68522: PUSH
68523: LD_INT 1
68525: ST_TO_ADDR
// if p3 = 17 then
68526: LD_VAR 0 3
68530: PUSH
68531: LD_INT 17
68533: EQUAL
68534: IFFALSE 68544
// sSlow := true ;
68536: LD_ADDR_EXP 92
68540: PUSH
68541: LD_INT 1
68543: ST_TO_ADDR
// if p3 = 18 then
68544: LD_VAR 0 3
68548: PUSH
68549: LD_INT 18
68551: EQUAL
68552: IFFALSE 68562
// sLack := true ;
68554: LD_ADDR_EXP 93
68558: PUSH
68559: LD_INT 1
68561: ST_TO_ADDR
// if p3 = 19 then
68562: LD_VAR 0 3
68566: PUSH
68567: LD_INT 19
68569: EQUAL
68570: IFFALSE 68580
// sTank := true ;
68572: LD_ADDR_EXP 95
68576: PUSH
68577: LD_INT 1
68579: ST_TO_ADDR
// if p3 = 20 then
68580: LD_VAR 0 3
68584: PUSH
68585: LD_INT 20
68587: EQUAL
68588: IFFALSE 68598
// sRemote := true ;
68590: LD_ADDR_EXP 96
68594: PUSH
68595: LD_INT 1
68597: ST_TO_ADDR
// if p3 = 21 then
68598: LD_VAR 0 3
68602: PUSH
68603: LD_INT 21
68605: EQUAL
68606: IFFALSE 68616
// sPowell := true ;
68608: LD_ADDR_EXP 97
68612: PUSH
68613: LD_INT 1
68615: ST_TO_ADDR
// if p3 = 22 then
68616: LD_VAR 0 3
68620: PUSH
68621: LD_INT 22
68623: EQUAL
68624: IFFALSE 68634
// sTeleport := true ;
68626: LD_ADDR_EXP 100
68630: PUSH
68631: LD_INT 1
68633: ST_TO_ADDR
// if p3 = 23 then
68634: LD_VAR 0 3
68638: PUSH
68639: LD_INT 23
68641: EQUAL
68642: IFFALSE 68652
// sOilTower := true ;
68644: LD_ADDR_EXP 102
68648: PUSH
68649: LD_INT 1
68651: ST_TO_ADDR
// if p3 = 24 then
68652: LD_VAR 0 3
68656: PUSH
68657: LD_INT 24
68659: EQUAL
68660: IFFALSE 68670
// sShovel := true ;
68662: LD_ADDR_EXP 103
68666: PUSH
68667: LD_INT 1
68669: ST_TO_ADDR
// if p3 = 25 then
68670: LD_VAR 0 3
68674: PUSH
68675: LD_INT 25
68677: EQUAL
68678: IFFALSE 68688
// sSheik := true ;
68680: LD_ADDR_EXP 104
68684: PUSH
68685: LD_INT 1
68687: ST_TO_ADDR
// if p3 = 26 then
68688: LD_VAR 0 3
68692: PUSH
68693: LD_INT 26
68695: EQUAL
68696: IFFALSE 68706
// sEarthquake := true ;
68698: LD_ADDR_EXP 106
68702: PUSH
68703: LD_INT 1
68705: ST_TO_ADDR
// if p3 = 27 then
68706: LD_VAR 0 3
68710: PUSH
68711: LD_INT 27
68713: EQUAL
68714: IFFALSE 68724
// sAI := true ;
68716: LD_ADDR_EXP 107
68720: PUSH
68721: LD_INT 1
68723: ST_TO_ADDR
// if p3 = 28 then
68724: LD_VAR 0 3
68728: PUSH
68729: LD_INT 28
68731: EQUAL
68732: IFFALSE 68742
// sCargo := true ;
68734: LD_ADDR_EXP 110
68738: PUSH
68739: LD_INT 1
68741: ST_TO_ADDR
// if p3 = 29 then
68742: LD_VAR 0 3
68746: PUSH
68747: LD_INT 29
68749: EQUAL
68750: IFFALSE 68760
// sDLaser := true ;
68752: LD_ADDR_EXP 111
68756: PUSH
68757: LD_INT 1
68759: ST_TO_ADDR
// if p3 = 30 then
68760: LD_VAR 0 3
68764: PUSH
68765: LD_INT 30
68767: EQUAL
68768: IFFALSE 68778
// sExchange := true ;
68770: LD_ADDR_EXP 112
68774: PUSH
68775: LD_INT 1
68777: ST_TO_ADDR
// if p3 = 31 then
68778: LD_VAR 0 3
68782: PUSH
68783: LD_INT 31
68785: EQUAL
68786: IFFALSE 68796
// sFac := true ;
68788: LD_ADDR_EXP 113
68792: PUSH
68793: LD_INT 1
68795: ST_TO_ADDR
// if p3 = 32 then
68796: LD_VAR 0 3
68800: PUSH
68801: LD_INT 32
68803: EQUAL
68804: IFFALSE 68814
// sPower := true ;
68806: LD_ADDR_EXP 114
68810: PUSH
68811: LD_INT 1
68813: ST_TO_ADDR
// if p3 = 33 then
68814: LD_VAR 0 3
68818: PUSH
68819: LD_INT 33
68821: EQUAL
68822: IFFALSE 68832
// sRandom := true ;
68824: LD_ADDR_EXP 115
68828: PUSH
68829: LD_INT 1
68831: ST_TO_ADDR
// if p3 = 34 then
68832: LD_VAR 0 3
68836: PUSH
68837: LD_INT 34
68839: EQUAL
68840: IFFALSE 68850
// sShield := true ;
68842: LD_ADDR_EXP 116
68846: PUSH
68847: LD_INT 1
68849: ST_TO_ADDR
// if p3 = 35 then
68850: LD_VAR 0 3
68854: PUSH
68855: LD_INT 35
68857: EQUAL
68858: IFFALSE 68868
// sTime := true ;
68860: LD_ADDR_EXP 117
68864: PUSH
68865: LD_INT 1
68867: ST_TO_ADDR
// if p3 = 36 then
68868: LD_VAR 0 3
68872: PUSH
68873: LD_INT 36
68875: EQUAL
68876: IFFALSE 68886
// sTools := true ;
68878: LD_ADDR_EXP 118
68882: PUSH
68883: LD_INT 1
68885: ST_TO_ADDR
// if p3 = 101 then
68886: LD_VAR 0 3
68890: PUSH
68891: LD_INT 101
68893: EQUAL
68894: IFFALSE 68904
// sSold := true ;
68896: LD_ADDR_EXP 83
68900: PUSH
68901: LD_INT 1
68903: ST_TO_ADDR
// if p3 = 102 then
68904: LD_VAR 0 3
68908: PUSH
68909: LD_INT 102
68911: EQUAL
68912: IFFALSE 68922
// sDiff := true ;
68914: LD_ADDR_EXP 84
68918: PUSH
68919: LD_INT 1
68921: ST_TO_ADDR
// if p3 = 103 then
68922: LD_VAR 0 3
68926: PUSH
68927: LD_INT 103
68929: EQUAL
68930: IFFALSE 68940
// sFog := true ;
68932: LD_ADDR_EXP 87
68936: PUSH
68937: LD_INT 1
68939: ST_TO_ADDR
// if p3 = 104 then
68940: LD_VAR 0 3
68944: PUSH
68945: LD_INT 104
68947: EQUAL
68948: IFFALSE 68958
// sReset := true ;
68950: LD_ADDR_EXP 88
68954: PUSH
68955: LD_INT 1
68957: ST_TO_ADDR
// if p3 = 105 then
68958: LD_VAR 0 3
68962: PUSH
68963: LD_INT 105
68965: EQUAL
68966: IFFALSE 68976
// sSun := true ;
68968: LD_ADDR_EXP 89
68972: PUSH
68973: LD_INT 1
68975: ST_TO_ADDR
// if p3 = 106 then
68976: LD_VAR 0 3
68980: PUSH
68981: LD_INT 106
68983: EQUAL
68984: IFFALSE 68994
// sTiger := true ;
68986: LD_ADDR_EXP 85
68990: PUSH
68991: LD_INT 1
68993: ST_TO_ADDR
// if p3 = 107 then
68994: LD_VAR 0 3
68998: PUSH
68999: LD_INT 107
69001: EQUAL
69002: IFFALSE 69012
// sBomb := true ;
69004: LD_ADDR_EXP 86
69008: PUSH
69009: LD_INT 1
69011: ST_TO_ADDR
// if p3 = 108 then
69012: LD_VAR 0 3
69016: PUSH
69017: LD_INT 108
69019: EQUAL
69020: IFFALSE 69030
// sWound := true ;
69022: LD_ADDR_EXP 94
69026: PUSH
69027: LD_INT 1
69029: ST_TO_ADDR
// if p3 = 109 then
69030: LD_VAR 0 3
69034: PUSH
69035: LD_INT 109
69037: EQUAL
69038: IFFALSE 69048
// sBetray := true ;
69040: LD_ADDR_EXP 98
69044: PUSH
69045: LD_INT 1
69047: ST_TO_ADDR
// if p3 = 110 then
69048: LD_VAR 0 3
69052: PUSH
69053: LD_INT 110
69055: EQUAL
69056: IFFALSE 69066
// sContamin := true ;
69058: LD_ADDR_EXP 99
69062: PUSH
69063: LD_INT 1
69065: ST_TO_ADDR
// if p3 = 111 then
69066: LD_VAR 0 3
69070: PUSH
69071: LD_INT 111
69073: EQUAL
69074: IFFALSE 69084
// sOil := true ;
69076: LD_ADDR_EXP 101
69080: PUSH
69081: LD_INT 1
69083: ST_TO_ADDR
// if p3 = 112 then
69084: LD_VAR 0 3
69088: PUSH
69089: LD_INT 112
69091: EQUAL
69092: IFFALSE 69102
// sStu := true ;
69094: LD_ADDR_EXP 105
69098: PUSH
69099: LD_INT 1
69101: ST_TO_ADDR
// if p3 = 113 then
69102: LD_VAR 0 3
69106: PUSH
69107: LD_INT 113
69109: EQUAL
69110: IFFALSE 69120
// sBazooka := true ;
69112: LD_ADDR_EXP 108
69116: PUSH
69117: LD_INT 1
69119: ST_TO_ADDR
// if p3 = 114 then
69120: LD_VAR 0 3
69124: PUSH
69125: LD_INT 114
69127: EQUAL
69128: IFFALSE 69138
// sMortar := true ;
69130: LD_ADDR_EXP 109
69134: PUSH
69135: LD_INT 1
69137: ST_TO_ADDR
// if p3 = 115 then
69138: LD_VAR 0 3
69142: PUSH
69143: LD_INT 115
69145: EQUAL
69146: IFFALSE 69156
// sRanger := true ;
69148: LD_ADDR_EXP 119
69152: PUSH
69153: LD_INT 1
69155: ST_TO_ADDR
// if p3 = 116 then
69156: LD_VAR 0 3
69160: PUSH
69161: LD_INT 116
69163: EQUAL
69164: IFFALSE 69174
// sComputer := true ;
69166: LD_ADDR_EXP 120
69170: PUSH
69171: LD_INT 1
69173: ST_TO_ADDR
// if p3 = 117 then
69174: LD_VAR 0 3
69178: PUSH
69179: LD_INT 117
69181: EQUAL
69182: IFFALSE 69192
// s30 := true ;
69184: LD_ADDR_EXP 121
69188: PUSH
69189: LD_INT 1
69191: ST_TO_ADDR
// if p3 = 118 then
69192: LD_VAR 0 3
69196: PUSH
69197: LD_INT 118
69199: EQUAL
69200: IFFALSE 69210
// s60 := true ;
69202: LD_ADDR_EXP 122
69206: PUSH
69207: LD_INT 1
69209: ST_TO_ADDR
// end ; if p2 = stream_mode then
69210: LD_VAR 0 2
69214: PUSH
69215: LD_INT 101
69217: EQUAL
69218: IFFALSE 69346
// begin case p3 of 1 :
69220: LD_VAR 0 3
69224: PUSH
69225: LD_INT 1
69227: DOUBLE
69228: EQUAL
69229: IFTRUE 69233
69231: GO 69240
69233: POP
// hHackUnlimitedResources ; 2 :
69234: CALL 81444 0 0
69238: GO 69346
69240: LD_INT 2
69242: DOUBLE
69243: EQUAL
69244: IFTRUE 69248
69246: GO 69255
69248: POP
// hHackSetLevel10 ; 3 :
69249: CALL 81577 0 0
69253: GO 69346
69255: LD_INT 3
69257: DOUBLE
69258: EQUAL
69259: IFTRUE 69263
69261: GO 69270
69263: POP
// hHackSetLevel10YourUnits ; 4 :
69264: CALL 81662 0 0
69268: GO 69346
69270: LD_INT 4
69272: DOUBLE
69273: EQUAL
69274: IFTRUE 69278
69276: GO 69285
69278: POP
// hHackInvincible ; 5 :
69279: CALL 82110 0 0
69283: GO 69346
69285: LD_INT 5
69287: DOUBLE
69288: EQUAL
69289: IFTRUE 69293
69291: GO 69300
69293: POP
// hHackInvisible ; 6 :
69294: CALL 82221 0 0
69298: GO 69346
69300: LD_INT 6
69302: DOUBLE
69303: EQUAL
69304: IFTRUE 69308
69306: GO 69315
69308: POP
// hHackChangeYourSide ; 7 :
69309: CALL 82278 0 0
69313: GO 69346
69315: LD_INT 7
69317: DOUBLE
69318: EQUAL
69319: IFTRUE 69323
69321: GO 69330
69323: POP
// hHackChangeUnitSide ; 8 :
69324: CALL 82320 0 0
69328: GO 69346
69330: LD_INT 8
69332: DOUBLE
69333: EQUAL
69334: IFTRUE 69338
69336: GO 69345
69338: POP
// hHackFog ; end ;
69339: CALL 82421 0 0
69343: GO 69346
69345: POP
// end ; end ;
69346: LD_VAR 0 7
69350: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
69351: GO 69353
69353: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69354: LD_STRING initStreamRollete();
69356: PPUSH
69357: CALL_OW 559
// InitStreamMode ;
69361: CALL 69373 0 0
// DefineStreamItems ( false ) ;
69365: LD_INT 0
69367: PPUSH
69368: CALL 69837 0 1
// end ;
69372: END
// function InitStreamMode ; begin
69373: LD_INT 0
69375: PPUSH
// streamModeActive := false ;
69376: LD_ADDR_EXP 66
69380: PUSH
69381: LD_INT 0
69383: ST_TO_ADDR
// normalCounter := 36 ;
69384: LD_ADDR_EXP 67
69388: PUSH
69389: LD_INT 36
69391: ST_TO_ADDR
// hardcoreCounter := 18 ;
69392: LD_ADDR_EXP 68
69396: PUSH
69397: LD_INT 18
69399: ST_TO_ADDR
// sRocket := false ;
69400: LD_ADDR_EXP 71
69404: PUSH
69405: LD_INT 0
69407: ST_TO_ADDR
// sSpeed := false ;
69408: LD_ADDR_EXP 70
69412: PUSH
69413: LD_INT 0
69415: ST_TO_ADDR
// sEngine := false ;
69416: LD_ADDR_EXP 72
69420: PUSH
69421: LD_INT 0
69423: ST_TO_ADDR
// sSpec := false ;
69424: LD_ADDR_EXP 69
69428: PUSH
69429: LD_INT 0
69431: ST_TO_ADDR
// sLevel := false ;
69432: LD_ADDR_EXP 73
69436: PUSH
69437: LD_INT 0
69439: ST_TO_ADDR
// sArmoury := false ;
69440: LD_ADDR_EXP 74
69444: PUSH
69445: LD_INT 0
69447: ST_TO_ADDR
// sRadar := false ;
69448: LD_ADDR_EXP 75
69452: PUSH
69453: LD_INT 0
69455: ST_TO_ADDR
// sBunker := false ;
69456: LD_ADDR_EXP 76
69460: PUSH
69461: LD_INT 0
69463: ST_TO_ADDR
// sHack := false ;
69464: LD_ADDR_EXP 77
69468: PUSH
69469: LD_INT 0
69471: ST_TO_ADDR
// sFire := false ;
69472: LD_ADDR_EXP 78
69476: PUSH
69477: LD_INT 0
69479: ST_TO_ADDR
// sRefresh := false ;
69480: LD_ADDR_EXP 79
69484: PUSH
69485: LD_INT 0
69487: ST_TO_ADDR
// sExp := false ;
69488: LD_ADDR_EXP 80
69492: PUSH
69493: LD_INT 0
69495: ST_TO_ADDR
// sDepot := false ;
69496: LD_ADDR_EXP 81
69500: PUSH
69501: LD_INT 0
69503: ST_TO_ADDR
// sFlag := false ;
69504: LD_ADDR_EXP 82
69508: PUSH
69509: LD_INT 0
69511: ST_TO_ADDR
// sKamikadze := false ;
69512: LD_ADDR_EXP 90
69516: PUSH
69517: LD_INT 0
69519: ST_TO_ADDR
// sTroll := false ;
69520: LD_ADDR_EXP 91
69524: PUSH
69525: LD_INT 0
69527: ST_TO_ADDR
// sSlow := false ;
69528: LD_ADDR_EXP 92
69532: PUSH
69533: LD_INT 0
69535: ST_TO_ADDR
// sLack := false ;
69536: LD_ADDR_EXP 93
69540: PUSH
69541: LD_INT 0
69543: ST_TO_ADDR
// sTank := false ;
69544: LD_ADDR_EXP 95
69548: PUSH
69549: LD_INT 0
69551: ST_TO_ADDR
// sRemote := false ;
69552: LD_ADDR_EXP 96
69556: PUSH
69557: LD_INT 0
69559: ST_TO_ADDR
// sPowell := false ;
69560: LD_ADDR_EXP 97
69564: PUSH
69565: LD_INT 0
69567: ST_TO_ADDR
// sTeleport := false ;
69568: LD_ADDR_EXP 100
69572: PUSH
69573: LD_INT 0
69575: ST_TO_ADDR
// sOilTower := false ;
69576: LD_ADDR_EXP 102
69580: PUSH
69581: LD_INT 0
69583: ST_TO_ADDR
// sShovel := false ;
69584: LD_ADDR_EXP 103
69588: PUSH
69589: LD_INT 0
69591: ST_TO_ADDR
// sSheik := false ;
69592: LD_ADDR_EXP 104
69596: PUSH
69597: LD_INT 0
69599: ST_TO_ADDR
// sEarthquake := false ;
69600: LD_ADDR_EXP 106
69604: PUSH
69605: LD_INT 0
69607: ST_TO_ADDR
// sAI := false ;
69608: LD_ADDR_EXP 107
69612: PUSH
69613: LD_INT 0
69615: ST_TO_ADDR
// sCargo := false ;
69616: LD_ADDR_EXP 110
69620: PUSH
69621: LD_INT 0
69623: ST_TO_ADDR
// sDLaser := false ;
69624: LD_ADDR_EXP 111
69628: PUSH
69629: LD_INT 0
69631: ST_TO_ADDR
// sExchange := false ;
69632: LD_ADDR_EXP 112
69636: PUSH
69637: LD_INT 0
69639: ST_TO_ADDR
// sFac := false ;
69640: LD_ADDR_EXP 113
69644: PUSH
69645: LD_INT 0
69647: ST_TO_ADDR
// sPower := false ;
69648: LD_ADDR_EXP 114
69652: PUSH
69653: LD_INT 0
69655: ST_TO_ADDR
// sRandom := false ;
69656: LD_ADDR_EXP 115
69660: PUSH
69661: LD_INT 0
69663: ST_TO_ADDR
// sShield := false ;
69664: LD_ADDR_EXP 116
69668: PUSH
69669: LD_INT 0
69671: ST_TO_ADDR
// sTime := false ;
69672: LD_ADDR_EXP 117
69676: PUSH
69677: LD_INT 0
69679: ST_TO_ADDR
// sTools := false ;
69680: LD_ADDR_EXP 118
69684: PUSH
69685: LD_INT 0
69687: ST_TO_ADDR
// sSold := false ;
69688: LD_ADDR_EXP 83
69692: PUSH
69693: LD_INT 0
69695: ST_TO_ADDR
// sDiff := false ;
69696: LD_ADDR_EXP 84
69700: PUSH
69701: LD_INT 0
69703: ST_TO_ADDR
// sFog := false ;
69704: LD_ADDR_EXP 87
69708: PUSH
69709: LD_INT 0
69711: ST_TO_ADDR
// sReset := false ;
69712: LD_ADDR_EXP 88
69716: PUSH
69717: LD_INT 0
69719: ST_TO_ADDR
// sSun := false ;
69720: LD_ADDR_EXP 89
69724: PUSH
69725: LD_INT 0
69727: ST_TO_ADDR
// sTiger := false ;
69728: LD_ADDR_EXP 85
69732: PUSH
69733: LD_INT 0
69735: ST_TO_ADDR
// sBomb := false ;
69736: LD_ADDR_EXP 86
69740: PUSH
69741: LD_INT 0
69743: ST_TO_ADDR
// sWound := false ;
69744: LD_ADDR_EXP 94
69748: PUSH
69749: LD_INT 0
69751: ST_TO_ADDR
// sBetray := false ;
69752: LD_ADDR_EXP 98
69756: PUSH
69757: LD_INT 0
69759: ST_TO_ADDR
// sContamin := false ;
69760: LD_ADDR_EXP 99
69764: PUSH
69765: LD_INT 0
69767: ST_TO_ADDR
// sOil := false ;
69768: LD_ADDR_EXP 101
69772: PUSH
69773: LD_INT 0
69775: ST_TO_ADDR
// sStu := false ;
69776: LD_ADDR_EXP 105
69780: PUSH
69781: LD_INT 0
69783: ST_TO_ADDR
// sBazooka := false ;
69784: LD_ADDR_EXP 108
69788: PUSH
69789: LD_INT 0
69791: ST_TO_ADDR
// sMortar := false ;
69792: LD_ADDR_EXP 109
69796: PUSH
69797: LD_INT 0
69799: ST_TO_ADDR
// sRanger := false ;
69800: LD_ADDR_EXP 119
69804: PUSH
69805: LD_INT 0
69807: ST_TO_ADDR
// sComputer := false ;
69808: LD_ADDR_EXP 120
69812: PUSH
69813: LD_INT 0
69815: ST_TO_ADDR
// s30 := false ;
69816: LD_ADDR_EXP 121
69820: PUSH
69821: LD_INT 0
69823: ST_TO_ADDR
// s60 := false ;
69824: LD_ADDR_EXP 122
69828: PUSH
69829: LD_INT 0
69831: ST_TO_ADDR
// end ;
69832: LD_VAR 0 1
69836: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
69837: LD_INT 0
69839: PPUSH
69840: PPUSH
69841: PPUSH
69842: PPUSH
69843: PPUSH
69844: PPUSH
69845: PPUSH
// result := [ ] ;
69846: LD_ADDR_VAR 0 2
69850: PUSH
69851: EMPTY
69852: ST_TO_ADDR
// if campaign_id = 1 then
69853: LD_OWVAR 69
69857: PUSH
69858: LD_INT 1
69860: EQUAL
69861: IFFALSE 73027
// begin case mission_number of 1 :
69863: LD_OWVAR 70
69867: PUSH
69868: LD_INT 1
69870: DOUBLE
69871: EQUAL
69872: IFTRUE 69876
69874: GO 69952
69876: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
69877: LD_ADDR_VAR 0 2
69881: PUSH
69882: LD_INT 2
69884: PUSH
69885: LD_INT 4
69887: PUSH
69888: LD_INT 11
69890: PUSH
69891: LD_INT 12
69893: PUSH
69894: LD_INT 15
69896: PUSH
69897: LD_INT 16
69899: PUSH
69900: LD_INT 22
69902: PUSH
69903: LD_INT 23
69905: PUSH
69906: LD_INT 26
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 101
69922: PUSH
69923: LD_INT 102
69925: PUSH
69926: LD_INT 106
69928: PUSH
69929: LD_INT 116
69931: PUSH
69932: LD_INT 117
69934: PUSH
69935: LD_INT 118
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: ST_TO_ADDR
69950: GO 73025
69952: LD_INT 2
69954: DOUBLE
69955: EQUAL
69956: IFTRUE 69960
69958: GO 70044
69960: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
69961: LD_ADDR_VAR 0 2
69965: PUSH
69966: LD_INT 2
69968: PUSH
69969: LD_INT 4
69971: PUSH
69972: LD_INT 11
69974: PUSH
69975: LD_INT 12
69977: PUSH
69978: LD_INT 15
69980: PUSH
69981: LD_INT 16
69983: PUSH
69984: LD_INT 22
69986: PUSH
69987: LD_INT 23
69989: PUSH
69990: LD_INT 26
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 101
70006: PUSH
70007: LD_INT 102
70009: PUSH
70010: LD_INT 105
70012: PUSH
70013: LD_INT 106
70015: PUSH
70016: LD_INT 108
70018: PUSH
70019: LD_INT 116
70021: PUSH
70022: LD_INT 117
70024: PUSH
70025: LD_INT 118
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: ST_TO_ADDR
70042: GO 73025
70044: LD_INT 3
70046: DOUBLE
70047: EQUAL
70048: IFTRUE 70052
70050: GO 70140
70052: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
70053: LD_ADDR_VAR 0 2
70057: PUSH
70058: LD_INT 2
70060: PUSH
70061: LD_INT 4
70063: PUSH
70064: LD_INT 5
70066: PUSH
70067: LD_INT 11
70069: PUSH
70070: LD_INT 12
70072: PUSH
70073: LD_INT 15
70075: PUSH
70076: LD_INT 16
70078: PUSH
70079: LD_INT 22
70081: PUSH
70082: LD_INT 26
70084: PUSH
70085: LD_INT 36
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 101
70102: PUSH
70103: LD_INT 102
70105: PUSH
70106: LD_INT 105
70108: PUSH
70109: LD_INT 106
70111: PUSH
70112: LD_INT 108
70114: PUSH
70115: LD_INT 116
70117: PUSH
70118: LD_INT 117
70120: PUSH
70121: LD_INT 118
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: ST_TO_ADDR
70138: GO 73025
70140: LD_INT 4
70142: DOUBLE
70143: EQUAL
70144: IFTRUE 70148
70146: GO 70244
70148: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
70149: LD_ADDR_VAR 0 2
70153: PUSH
70154: LD_INT 2
70156: PUSH
70157: LD_INT 4
70159: PUSH
70160: LD_INT 5
70162: PUSH
70163: LD_INT 8
70165: PUSH
70166: LD_INT 11
70168: PUSH
70169: LD_INT 12
70171: PUSH
70172: LD_INT 15
70174: PUSH
70175: LD_INT 16
70177: PUSH
70178: LD_INT 22
70180: PUSH
70181: LD_INT 23
70183: PUSH
70184: LD_INT 26
70186: PUSH
70187: LD_INT 36
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 101
70206: PUSH
70207: LD_INT 102
70209: PUSH
70210: LD_INT 105
70212: PUSH
70213: LD_INT 106
70215: PUSH
70216: LD_INT 108
70218: PUSH
70219: LD_INT 116
70221: PUSH
70222: LD_INT 117
70224: PUSH
70225: LD_INT 118
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: ST_TO_ADDR
70242: GO 73025
70244: LD_INT 5
70246: DOUBLE
70247: EQUAL
70248: IFTRUE 70252
70250: GO 70364
70252: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
70253: LD_ADDR_VAR 0 2
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: LD_INT 4
70263: PUSH
70264: LD_INT 5
70266: PUSH
70267: LD_INT 6
70269: PUSH
70270: LD_INT 8
70272: PUSH
70273: LD_INT 11
70275: PUSH
70276: LD_INT 12
70278: PUSH
70279: LD_INT 15
70281: PUSH
70282: LD_INT 16
70284: PUSH
70285: LD_INT 22
70287: PUSH
70288: LD_INT 23
70290: PUSH
70291: LD_INT 25
70293: PUSH
70294: LD_INT 26
70296: PUSH
70297: LD_INT 36
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 101
70318: PUSH
70319: LD_INT 102
70321: PUSH
70322: LD_INT 105
70324: PUSH
70325: LD_INT 106
70327: PUSH
70328: LD_INT 108
70330: PUSH
70331: LD_INT 109
70333: PUSH
70334: LD_INT 112
70336: PUSH
70337: LD_INT 116
70339: PUSH
70340: LD_INT 117
70342: PUSH
70343: LD_INT 118
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: ST_TO_ADDR
70362: GO 73025
70364: LD_INT 6
70366: DOUBLE
70367: EQUAL
70368: IFTRUE 70372
70370: GO 70504
70372: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
70373: LD_ADDR_VAR 0 2
70377: PUSH
70378: LD_INT 2
70380: PUSH
70381: LD_INT 4
70383: PUSH
70384: LD_INT 5
70386: PUSH
70387: LD_INT 6
70389: PUSH
70390: LD_INT 8
70392: PUSH
70393: LD_INT 11
70395: PUSH
70396: LD_INT 12
70398: PUSH
70399: LD_INT 15
70401: PUSH
70402: LD_INT 16
70404: PUSH
70405: LD_INT 20
70407: PUSH
70408: LD_INT 21
70410: PUSH
70411: LD_INT 22
70413: PUSH
70414: LD_INT 23
70416: PUSH
70417: LD_INT 25
70419: PUSH
70420: LD_INT 26
70422: PUSH
70423: LD_INT 30
70425: PUSH
70426: LD_INT 31
70428: PUSH
70429: LD_INT 32
70431: PUSH
70432: LD_INT 36
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 101
70458: PUSH
70459: LD_INT 102
70461: PUSH
70462: LD_INT 105
70464: PUSH
70465: LD_INT 106
70467: PUSH
70468: LD_INT 108
70470: PUSH
70471: LD_INT 109
70473: PUSH
70474: LD_INT 112
70476: PUSH
70477: LD_INT 116
70479: PUSH
70480: LD_INT 117
70482: PUSH
70483: LD_INT 118
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: ST_TO_ADDR
70502: GO 73025
70504: LD_INT 7
70506: DOUBLE
70507: EQUAL
70508: IFTRUE 70512
70510: GO 70624
70512: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
70513: LD_ADDR_VAR 0 2
70517: PUSH
70518: LD_INT 2
70520: PUSH
70521: LD_INT 4
70523: PUSH
70524: LD_INT 5
70526: PUSH
70527: LD_INT 7
70529: PUSH
70530: LD_INT 11
70532: PUSH
70533: LD_INT 12
70535: PUSH
70536: LD_INT 15
70538: PUSH
70539: LD_INT 16
70541: PUSH
70542: LD_INT 20
70544: PUSH
70545: LD_INT 21
70547: PUSH
70548: LD_INT 22
70550: PUSH
70551: LD_INT 23
70553: PUSH
70554: LD_INT 25
70556: PUSH
70557: LD_INT 26
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 101
70578: PUSH
70579: LD_INT 102
70581: PUSH
70582: LD_INT 103
70584: PUSH
70585: LD_INT 105
70587: PUSH
70588: LD_INT 106
70590: PUSH
70591: LD_INT 108
70593: PUSH
70594: LD_INT 112
70596: PUSH
70597: LD_INT 116
70599: PUSH
70600: LD_INT 117
70602: PUSH
70603: LD_INT 118
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: ST_TO_ADDR
70622: GO 73025
70624: LD_INT 8
70626: DOUBLE
70627: EQUAL
70628: IFTRUE 70632
70630: GO 70772
70632: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
70633: LD_ADDR_VAR 0 2
70637: PUSH
70638: LD_INT 2
70640: PUSH
70641: LD_INT 4
70643: PUSH
70644: LD_INT 5
70646: PUSH
70647: LD_INT 6
70649: PUSH
70650: LD_INT 7
70652: PUSH
70653: LD_INT 8
70655: PUSH
70656: LD_INT 11
70658: PUSH
70659: LD_INT 12
70661: PUSH
70662: LD_INT 15
70664: PUSH
70665: LD_INT 16
70667: PUSH
70668: LD_INT 20
70670: PUSH
70671: LD_INT 21
70673: PUSH
70674: LD_INT 22
70676: PUSH
70677: LD_INT 23
70679: PUSH
70680: LD_INT 25
70682: PUSH
70683: LD_INT 26
70685: PUSH
70686: LD_INT 30
70688: PUSH
70689: LD_INT 31
70691: PUSH
70692: LD_INT 32
70694: PUSH
70695: LD_INT 36
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 101
70722: PUSH
70723: LD_INT 102
70725: PUSH
70726: LD_INT 103
70728: PUSH
70729: LD_INT 105
70731: PUSH
70732: LD_INT 106
70734: PUSH
70735: LD_INT 108
70737: PUSH
70738: LD_INT 109
70740: PUSH
70741: LD_INT 112
70743: PUSH
70744: LD_INT 116
70746: PUSH
70747: LD_INT 117
70749: PUSH
70750: LD_INT 118
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: ST_TO_ADDR
70770: GO 73025
70772: LD_INT 9
70774: DOUBLE
70775: EQUAL
70776: IFTRUE 70780
70778: GO 70928
70780: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
70781: LD_ADDR_VAR 0 2
70785: PUSH
70786: LD_INT 2
70788: PUSH
70789: LD_INT 4
70791: PUSH
70792: LD_INT 5
70794: PUSH
70795: LD_INT 6
70797: PUSH
70798: LD_INT 7
70800: PUSH
70801: LD_INT 8
70803: PUSH
70804: LD_INT 11
70806: PUSH
70807: LD_INT 12
70809: PUSH
70810: LD_INT 15
70812: PUSH
70813: LD_INT 16
70815: PUSH
70816: LD_INT 20
70818: PUSH
70819: LD_INT 21
70821: PUSH
70822: LD_INT 22
70824: PUSH
70825: LD_INT 23
70827: PUSH
70828: LD_INT 25
70830: PUSH
70831: LD_INT 26
70833: PUSH
70834: LD_INT 28
70836: PUSH
70837: LD_INT 30
70839: PUSH
70840: LD_INT 31
70842: PUSH
70843: LD_INT 32
70845: PUSH
70846: LD_INT 36
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 101
70874: PUSH
70875: LD_INT 102
70877: PUSH
70878: LD_INT 103
70880: PUSH
70881: LD_INT 105
70883: PUSH
70884: LD_INT 106
70886: PUSH
70887: LD_INT 108
70889: PUSH
70890: LD_INT 109
70892: PUSH
70893: LD_INT 112
70895: PUSH
70896: LD_INT 114
70898: PUSH
70899: LD_INT 116
70901: PUSH
70902: LD_INT 117
70904: PUSH
70905: LD_INT 118
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: ST_TO_ADDR
70926: GO 73025
70928: LD_INT 10
70930: DOUBLE
70931: EQUAL
70932: IFTRUE 70936
70934: GO 71132
70936: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
70937: LD_ADDR_VAR 0 2
70941: PUSH
70942: LD_INT 2
70944: PUSH
70945: LD_INT 4
70947: PUSH
70948: LD_INT 5
70950: PUSH
70951: LD_INT 6
70953: PUSH
70954: LD_INT 7
70956: PUSH
70957: LD_INT 8
70959: PUSH
70960: LD_INT 9
70962: PUSH
70963: LD_INT 10
70965: PUSH
70966: LD_INT 11
70968: PUSH
70969: LD_INT 12
70971: PUSH
70972: LD_INT 13
70974: PUSH
70975: LD_INT 14
70977: PUSH
70978: LD_INT 15
70980: PUSH
70981: LD_INT 16
70983: PUSH
70984: LD_INT 17
70986: PUSH
70987: LD_INT 18
70989: PUSH
70990: LD_INT 19
70992: PUSH
70993: LD_INT 20
70995: PUSH
70996: LD_INT 21
70998: PUSH
70999: LD_INT 22
71001: PUSH
71002: LD_INT 23
71004: PUSH
71005: LD_INT 24
71007: PUSH
71008: LD_INT 25
71010: PUSH
71011: LD_INT 26
71013: PUSH
71014: LD_INT 28
71016: PUSH
71017: LD_INT 30
71019: PUSH
71020: LD_INT 31
71022: PUSH
71023: LD_INT 32
71025: PUSH
71026: LD_INT 36
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 101
71062: PUSH
71063: LD_INT 102
71065: PUSH
71066: LD_INT 103
71068: PUSH
71069: LD_INT 104
71071: PUSH
71072: LD_INT 105
71074: PUSH
71075: LD_INT 106
71077: PUSH
71078: LD_INT 107
71080: PUSH
71081: LD_INT 108
71083: PUSH
71084: LD_INT 109
71086: PUSH
71087: LD_INT 110
71089: PUSH
71090: LD_INT 111
71092: PUSH
71093: LD_INT 112
71095: PUSH
71096: LD_INT 114
71098: PUSH
71099: LD_INT 116
71101: PUSH
71102: LD_INT 117
71104: PUSH
71105: LD_INT 118
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: ST_TO_ADDR
71130: GO 73025
71132: LD_INT 11
71134: DOUBLE
71135: EQUAL
71136: IFTRUE 71140
71138: GO 71344
71140: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
71141: LD_ADDR_VAR 0 2
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: LD_INT 3
71151: PUSH
71152: LD_INT 4
71154: PUSH
71155: LD_INT 5
71157: PUSH
71158: LD_INT 6
71160: PUSH
71161: LD_INT 7
71163: PUSH
71164: LD_INT 8
71166: PUSH
71167: LD_INT 9
71169: PUSH
71170: LD_INT 10
71172: PUSH
71173: LD_INT 11
71175: PUSH
71176: LD_INT 12
71178: PUSH
71179: LD_INT 13
71181: PUSH
71182: LD_INT 14
71184: PUSH
71185: LD_INT 15
71187: PUSH
71188: LD_INT 16
71190: PUSH
71191: LD_INT 17
71193: PUSH
71194: LD_INT 18
71196: PUSH
71197: LD_INT 19
71199: PUSH
71200: LD_INT 20
71202: PUSH
71203: LD_INT 21
71205: PUSH
71206: LD_INT 22
71208: PUSH
71209: LD_INT 23
71211: PUSH
71212: LD_INT 24
71214: PUSH
71215: LD_INT 25
71217: PUSH
71218: LD_INT 26
71220: PUSH
71221: LD_INT 28
71223: PUSH
71224: LD_INT 30
71226: PUSH
71227: LD_INT 31
71229: PUSH
71230: LD_INT 32
71232: PUSH
71233: LD_INT 34
71235: PUSH
71236: LD_INT 36
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 101
71274: PUSH
71275: LD_INT 102
71277: PUSH
71278: LD_INT 103
71280: PUSH
71281: LD_INT 104
71283: PUSH
71284: LD_INT 105
71286: PUSH
71287: LD_INT 106
71289: PUSH
71290: LD_INT 107
71292: PUSH
71293: LD_INT 108
71295: PUSH
71296: LD_INT 109
71298: PUSH
71299: LD_INT 110
71301: PUSH
71302: LD_INT 111
71304: PUSH
71305: LD_INT 112
71307: PUSH
71308: LD_INT 114
71310: PUSH
71311: LD_INT 116
71313: PUSH
71314: LD_INT 117
71316: PUSH
71317: LD_INT 118
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: ST_TO_ADDR
71342: GO 73025
71344: LD_INT 12
71346: DOUBLE
71347: EQUAL
71348: IFTRUE 71352
71350: GO 71572
71352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
71353: LD_ADDR_VAR 0 2
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: LD_INT 2
71363: PUSH
71364: LD_INT 3
71366: PUSH
71367: LD_INT 4
71369: PUSH
71370: LD_INT 5
71372: PUSH
71373: LD_INT 6
71375: PUSH
71376: LD_INT 7
71378: PUSH
71379: LD_INT 8
71381: PUSH
71382: LD_INT 9
71384: PUSH
71385: LD_INT 10
71387: PUSH
71388: LD_INT 11
71390: PUSH
71391: LD_INT 12
71393: PUSH
71394: LD_INT 13
71396: PUSH
71397: LD_INT 14
71399: PUSH
71400: LD_INT 15
71402: PUSH
71403: LD_INT 16
71405: PUSH
71406: LD_INT 17
71408: PUSH
71409: LD_INT 18
71411: PUSH
71412: LD_INT 19
71414: PUSH
71415: LD_INT 20
71417: PUSH
71418: LD_INT 21
71420: PUSH
71421: LD_INT 22
71423: PUSH
71424: LD_INT 23
71426: PUSH
71427: LD_INT 24
71429: PUSH
71430: LD_INT 25
71432: PUSH
71433: LD_INT 26
71435: PUSH
71436: LD_INT 27
71438: PUSH
71439: LD_INT 28
71441: PUSH
71442: LD_INT 30
71444: PUSH
71445: LD_INT 31
71447: PUSH
71448: LD_INT 32
71450: PUSH
71451: LD_INT 33
71453: PUSH
71454: LD_INT 34
71456: PUSH
71457: LD_INT 36
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 101
71498: PUSH
71499: LD_INT 102
71501: PUSH
71502: LD_INT 103
71504: PUSH
71505: LD_INT 104
71507: PUSH
71508: LD_INT 105
71510: PUSH
71511: LD_INT 106
71513: PUSH
71514: LD_INT 107
71516: PUSH
71517: LD_INT 108
71519: PUSH
71520: LD_INT 109
71522: PUSH
71523: LD_INT 110
71525: PUSH
71526: LD_INT 111
71528: PUSH
71529: LD_INT 112
71531: PUSH
71532: LD_INT 113
71534: PUSH
71535: LD_INT 114
71537: PUSH
71538: LD_INT 116
71540: PUSH
71541: LD_INT 117
71543: PUSH
71544: LD_INT 118
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: ST_TO_ADDR
71570: GO 73025
71572: LD_INT 13
71574: DOUBLE
71575: EQUAL
71576: IFTRUE 71580
71578: GO 71788
71580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
71581: LD_ADDR_VAR 0 2
71585: PUSH
71586: LD_INT 1
71588: PUSH
71589: LD_INT 2
71591: PUSH
71592: LD_INT 3
71594: PUSH
71595: LD_INT 4
71597: PUSH
71598: LD_INT 5
71600: PUSH
71601: LD_INT 8
71603: PUSH
71604: LD_INT 9
71606: PUSH
71607: LD_INT 10
71609: PUSH
71610: LD_INT 11
71612: PUSH
71613: LD_INT 12
71615: PUSH
71616: LD_INT 14
71618: PUSH
71619: LD_INT 15
71621: PUSH
71622: LD_INT 16
71624: PUSH
71625: LD_INT 17
71627: PUSH
71628: LD_INT 18
71630: PUSH
71631: LD_INT 19
71633: PUSH
71634: LD_INT 20
71636: PUSH
71637: LD_INT 21
71639: PUSH
71640: LD_INT 22
71642: PUSH
71643: LD_INT 23
71645: PUSH
71646: LD_INT 24
71648: PUSH
71649: LD_INT 25
71651: PUSH
71652: LD_INT 26
71654: PUSH
71655: LD_INT 27
71657: PUSH
71658: LD_INT 28
71660: PUSH
71661: LD_INT 30
71663: PUSH
71664: LD_INT 31
71666: PUSH
71667: LD_INT 32
71669: PUSH
71670: LD_INT 33
71672: PUSH
71673: LD_INT 34
71675: PUSH
71676: LD_INT 36
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 101
71714: PUSH
71715: LD_INT 102
71717: PUSH
71718: LD_INT 103
71720: PUSH
71721: LD_INT 104
71723: PUSH
71724: LD_INT 105
71726: PUSH
71727: LD_INT 106
71729: PUSH
71730: LD_INT 107
71732: PUSH
71733: LD_INT 108
71735: PUSH
71736: LD_INT 109
71738: PUSH
71739: LD_INT 110
71741: PUSH
71742: LD_INT 111
71744: PUSH
71745: LD_INT 112
71747: PUSH
71748: LD_INT 113
71750: PUSH
71751: LD_INT 114
71753: PUSH
71754: LD_INT 116
71756: PUSH
71757: LD_INT 117
71759: PUSH
71760: LD_INT 118
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: ST_TO_ADDR
71786: GO 73025
71788: LD_INT 14
71790: DOUBLE
71791: EQUAL
71792: IFTRUE 71796
71794: GO 72020
71796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
71797: LD_ADDR_VAR 0 2
71801: PUSH
71802: LD_INT 1
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: LD_INT 3
71810: PUSH
71811: LD_INT 4
71813: PUSH
71814: LD_INT 5
71816: PUSH
71817: LD_INT 6
71819: PUSH
71820: LD_INT 7
71822: PUSH
71823: LD_INT 8
71825: PUSH
71826: LD_INT 9
71828: PUSH
71829: LD_INT 10
71831: PUSH
71832: LD_INT 11
71834: PUSH
71835: LD_INT 12
71837: PUSH
71838: LD_INT 13
71840: PUSH
71841: LD_INT 14
71843: PUSH
71844: LD_INT 15
71846: PUSH
71847: LD_INT 16
71849: PUSH
71850: LD_INT 17
71852: PUSH
71853: LD_INT 18
71855: PUSH
71856: LD_INT 19
71858: PUSH
71859: LD_INT 20
71861: PUSH
71862: LD_INT 21
71864: PUSH
71865: LD_INT 22
71867: PUSH
71868: LD_INT 23
71870: PUSH
71871: LD_INT 24
71873: PUSH
71874: LD_INT 25
71876: PUSH
71877: LD_INT 26
71879: PUSH
71880: LD_INT 27
71882: PUSH
71883: LD_INT 28
71885: PUSH
71886: LD_INT 29
71888: PUSH
71889: LD_INT 30
71891: PUSH
71892: LD_INT 31
71894: PUSH
71895: LD_INT 32
71897: PUSH
71898: LD_INT 33
71900: PUSH
71901: LD_INT 34
71903: PUSH
71904: LD_INT 36
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 101
71946: PUSH
71947: LD_INT 102
71949: PUSH
71950: LD_INT 103
71952: PUSH
71953: LD_INT 104
71955: PUSH
71956: LD_INT 105
71958: PUSH
71959: LD_INT 106
71961: PUSH
71962: LD_INT 107
71964: PUSH
71965: LD_INT 108
71967: PUSH
71968: LD_INT 109
71970: PUSH
71971: LD_INT 110
71973: PUSH
71974: LD_INT 111
71976: PUSH
71977: LD_INT 112
71979: PUSH
71980: LD_INT 113
71982: PUSH
71983: LD_INT 114
71985: PUSH
71986: LD_INT 116
71988: PUSH
71989: LD_INT 117
71991: PUSH
71992: LD_INT 118
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: ST_TO_ADDR
72018: GO 73025
72020: LD_INT 15
72022: DOUBLE
72023: EQUAL
72024: IFTRUE 72028
72026: GO 72252
72028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
72029: LD_ADDR_VAR 0 2
72033: PUSH
72034: LD_INT 1
72036: PUSH
72037: LD_INT 2
72039: PUSH
72040: LD_INT 3
72042: PUSH
72043: LD_INT 4
72045: PUSH
72046: LD_INT 5
72048: PUSH
72049: LD_INT 6
72051: PUSH
72052: LD_INT 7
72054: PUSH
72055: LD_INT 8
72057: PUSH
72058: LD_INT 9
72060: PUSH
72061: LD_INT 10
72063: PUSH
72064: LD_INT 11
72066: PUSH
72067: LD_INT 12
72069: PUSH
72070: LD_INT 13
72072: PUSH
72073: LD_INT 14
72075: PUSH
72076: LD_INT 15
72078: PUSH
72079: LD_INT 16
72081: PUSH
72082: LD_INT 17
72084: PUSH
72085: LD_INT 18
72087: PUSH
72088: LD_INT 19
72090: PUSH
72091: LD_INT 20
72093: PUSH
72094: LD_INT 21
72096: PUSH
72097: LD_INT 22
72099: PUSH
72100: LD_INT 23
72102: PUSH
72103: LD_INT 24
72105: PUSH
72106: LD_INT 25
72108: PUSH
72109: LD_INT 26
72111: PUSH
72112: LD_INT 27
72114: PUSH
72115: LD_INT 28
72117: PUSH
72118: LD_INT 29
72120: PUSH
72121: LD_INT 30
72123: PUSH
72124: LD_INT 31
72126: PUSH
72127: LD_INT 32
72129: PUSH
72130: LD_INT 33
72132: PUSH
72133: LD_INT 34
72135: PUSH
72136: LD_INT 36
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 101
72178: PUSH
72179: LD_INT 102
72181: PUSH
72182: LD_INT 103
72184: PUSH
72185: LD_INT 104
72187: PUSH
72188: LD_INT 105
72190: PUSH
72191: LD_INT 106
72193: PUSH
72194: LD_INT 107
72196: PUSH
72197: LD_INT 108
72199: PUSH
72200: LD_INT 109
72202: PUSH
72203: LD_INT 110
72205: PUSH
72206: LD_INT 111
72208: PUSH
72209: LD_INT 112
72211: PUSH
72212: LD_INT 113
72214: PUSH
72215: LD_INT 114
72217: PUSH
72218: LD_INT 116
72220: PUSH
72221: LD_INT 117
72223: PUSH
72224: LD_INT 118
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: ST_TO_ADDR
72250: GO 73025
72252: LD_INT 16
72254: DOUBLE
72255: EQUAL
72256: IFTRUE 72260
72258: GO 72396
72260: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
72261: LD_ADDR_VAR 0 2
72265: PUSH
72266: LD_INT 2
72268: PUSH
72269: LD_INT 4
72271: PUSH
72272: LD_INT 5
72274: PUSH
72275: LD_INT 7
72277: PUSH
72278: LD_INT 11
72280: PUSH
72281: LD_INT 12
72283: PUSH
72284: LD_INT 15
72286: PUSH
72287: LD_INT 16
72289: PUSH
72290: LD_INT 20
72292: PUSH
72293: LD_INT 21
72295: PUSH
72296: LD_INT 22
72298: PUSH
72299: LD_INT 23
72301: PUSH
72302: LD_INT 25
72304: PUSH
72305: LD_INT 26
72307: PUSH
72308: LD_INT 30
72310: PUSH
72311: LD_INT 31
72313: PUSH
72314: LD_INT 32
72316: PUSH
72317: LD_INT 33
72319: PUSH
72320: LD_INT 34
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 101
72346: PUSH
72347: LD_INT 102
72349: PUSH
72350: LD_INT 103
72352: PUSH
72353: LD_INT 106
72355: PUSH
72356: LD_INT 108
72358: PUSH
72359: LD_INT 112
72361: PUSH
72362: LD_INT 113
72364: PUSH
72365: LD_INT 114
72367: PUSH
72368: LD_INT 116
72370: PUSH
72371: LD_INT 117
72373: PUSH
72374: LD_INT 118
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: ST_TO_ADDR
72394: GO 73025
72396: LD_INT 17
72398: DOUBLE
72399: EQUAL
72400: IFTRUE 72404
72402: GO 72628
72404: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
72405: LD_ADDR_VAR 0 2
72409: PUSH
72410: LD_INT 1
72412: PUSH
72413: LD_INT 2
72415: PUSH
72416: LD_INT 3
72418: PUSH
72419: LD_INT 4
72421: PUSH
72422: LD_INT 5
72424: PUSH
72425: LD_INT 6
72427: PUSH
72428: LD_INT 7
72430: PUSH
72431: LD_INT 8
72433: PUSH
72434: LD_INT 9
72436: PUSH
72437: LD_INT 10
72439: PUSH
72440: LD_INT 11
72442: PUSH
72443: LD_INT 12
72445: PUSH
72446: LD_INT 13
72448: PUSH
72449: LD_INT 14
72451: PUSH
72452: LD_INT 15
72454: PUSH
72455: LD_INT 16
72457: PUSH
72458: LD_INT 17
72460: PUSH
72461: LD_INT 18
72463: PUSH
72464: LD_INT 19
72466: PUSH
72467: LD_INT 20
72469: PUSH
72470: LD_INT 21
72472: PUSH
72473: LD_INT 22
72475: PUSH
72476: LD_INT 23
72478: PUSH
72479: LD_INT 24
72481: PUSH
72482: LD_INT 25
72484: PUSH
72485: LD_INT 26
72487: PUSH
72488: LD_INT 27
72490: PUSH
72491: LD_INT 28
72493: PUSH
72494: LD_INT 29
72496: PUSH
72497: LD_INT 30
72499: PUSH
72500: LD_INT 31
72502: PUSH
72503: LD_INT 32
72505: PUSH
72506: LD_INT 33
72508: PUSH
72509: LD_INT 34
72511: PUSH
72512: LD_INT 36
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 101
72554: PUSH
72555: LD_INT 102
72557: PUSH
72558: LD_INT 103
72560: PUSH
72561: LD_INT 104
72563: PUSH
72564: LD_INT 105
72566: PUSH
72567: LD_INT 106
72569: PUSH
72570: LD_INT 107
72572: PUSH
72573: LD_INT 108
72575: PUSH
72576: LD_INT 109
72578: PUSH
72579: LD_INT 110
72581: PUSH
72582: LD_INT 111
72584: PUSH
72585: LD_INT 112
72587: PUSH
72588: LD_INT 113
72590: PUSH
72591: LD_INT 114
72593: PUSH
72594: LD_INT 116
72596: PUSH
72597: LD_INT 117
72599: PUSH
72600: LD_INT 118
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: ST_TO_ADDR
72626: GO 73025
72628: LD_INT 18
72630: DOUBLE
72631: EQUAL
72632: IFTRUE 72636
72634: GO 72784
72636: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
72637: LD_ADDR_VAR 0 2
72641: PUSH
72642: LD_INT 2
72644: PUSH
72645: LD_INT 4
72647: PUSH
72648: LD_INT 5
72650: PUSH
72651: LD_INT 7
72653: PUSH
72654: LD_INT 11
72656: PUSH
72657: LD_INT 12
72659: PUSH
72660: LD_INT 15
72662: PUSH
72663: LD_INT 16
72665: PUSH
72666: LD_INT 20
72668: PUSH
72669: LD_INT 21
72671: PUSH
72672: LD_INT 22
72674: PUSH
72675: LD_INT 23
72677: PUSH
72678: LD_INT 25
72680: PUSH
72681: LD_INT 26
72683: PUSH
72684: LD_INT 30
72686: PUSH
72687: LD_INT 31
72689: PUSH
72690: LD_INT 32
72692: PUSH
72693: LD_INT 33
72695: PUSH
72696: LD_INT 34
72698: PUSH
72699: LD_INT 35
72701: PUSH
72702: LD_INT 36
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 101
72730: PUSH
72731: LD_INT 102
72733: PUSH
72734: LD_INT 103
72736: PUSH
72737: LD_INT 106
72739: PUSH
72740: LD_INT 108
72742: PUSH
72743: LD_INT 112
72745: PUSH
72746: LD_INT 113
72748: PUSH
72749: LD_INT 114
72751: PUSH
72752: LD_INT 115
72754: PUSH
72755: LD_INT 116
72757: PUSH
72758: LD_INT 117
72760: PUSH
72761: LD_INT 118
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: ST_TO_ADDR
72782: GO 73025
72784: LD_INT 19
72786: DOUBLE
72787: EQUAL
72788: IFTRUE 72792
72790: GO 73024
72792: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
72793: LD_ADDR_VAR 0 2
72797: PUSH
72798: LD_INT 1
72800: PUSH
72801: LD_INT 2
72803: PUSH
72804: LD_INT 3
72806: PUSH
72807: LD_INT 4
72809: PUSH
72810: LD_INT 5
72812: PUSH
72813: LD_INT 6
72815: PUSH
72816: LD_INT 7
72818: PUSH
72819: LD_INT 8
72821: PUSH
72822: LD_INT 9
72824: PUSH
72825: LD_INT 10
72827: PUSH
72828: LD_INT 11
72830: PUSH
72831: LD_INT 12
72833: PUSH
72834: LD_INT 13
72836: PUSH
72837: LD_INT 14
72839: PUSH
72840: LD_INT 15
72842: PUSH
72843: LD_INT 16
72845: PUSH
72846: LD_INT 17
72848: PUSH
72849: LD_INT 18
72851: PUSH
72852: LD_INT 19
72854: PUSH
72855: LD_INT 20
72857: PUSH
72858: LD_INT 21
72860: PUSH
72861: LD_INT 22
72863: PUSH
72864: LD_INT 23
72866: PUSH
72867: LD_INT 24
72869: PUSH
72870: LD_INT 25
72872: PUSH
72873: LD_INT 26
72875: PUSH
72876: LD_INT 27
72878: PUSH
72879: LD_INT 28
72881: PUSH
72882: LD_INT 29
72884: PUSH
72885: LD_INT 30
72887: PUSH
72888: LD_INT 31
72890: PUSH
72891: LD_INT 32
72893: PUSH
72894: LD_INT 33
72896: PUSH
72897: LD_INT 34
72899: PUSH
72900: LD_INT 35
72902: PUSH
72903: LD_INT 36
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: LIST
72931: LIST
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 101
72946: PUSH
72947: LD_INT 102
72949: PUSH
72950: LD_INT 103
72952: PUSH
72953: LD_INT 104
72955: PUSH
72956: LD_INT 105
72958: PUSH
72959: LD_INT 106
72961: PUSH
72962: LD_INT 107
72964: PUSH
72965: LD_INT 108
72967: PUSH
72968: LD_INT 109
72970: PUSH
72971: LD_INT 110
72973: PUSH
72974: LD_INT 111
72976: PUSH
72977: LD_INT 112
72979: PUSH
72980: LD_INT 113
72982: PUSH
72983: LD_INT 114
72985: PUSH
72986: LD_INT 115
72988: PUSH
72989: LD_INT 116
72991: PUSH
72992: LD_INT 117
72994: PUSH
72995: LD_INT 118
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: ST_TO_ADDR
73022: GO 73025
73024: POP
// end else
73025: GO 73256
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
73027: LD_ADDR_VAR 0 2
73031: PUSH
73032: LD_INT 1
73034: PUSH
73035: LD_INT 2
73037: PUSH
73038: LD_INT 3
73040: PUSH
73041: LD_INT 4
73043: PUSH
73044: LD_INT 5
73046: PUSH
73047: LD_INT 6
73049: PUSH
73050: LD_INT 7
73052: PUSH
73053: LD_INT 8
73055: PUSH
73056: LD_INT 9
73058: PUSH
73059: LD_INT 10
73061: PUSH
73062: LD_INT 11
73064: PUSH
73065: LD_INT 12
73067: PUSH
73068: LD_INT 13
73070: PUSH
73071: LD_INT 14
73073: PUSH
73074: LD_INT 15
73076: PUSH
73077: LD_INT 16
73079: PUSH
73080: LD_INT 17
73082: PUSH
73083: LD_INT 18
73085: PUSH
73086: LD_INT 19
73088: PUSH
73089: LD_INT 20
73091: PUSH
73092: LD_INT 21
73094: PUSH
73095: LD_INT 22
73097: PUSH
73098: LD_INT 23
73100: PUSH
73101: LD_INT 24
73103: PUSH
73104: LD_INT 25
73106: PUSH
73107: LD_INT 26
73109: PUSH
73110: LD_INT 27
73112: PUSH
73113: LD_INT 28
73115: PUSH
73116: LD_INT 29
73118: PUSH
73119: LD_INT 30
73121: PUSH
73122: LD_INT 31
73124: PUSH
73125: LD_INT 32
73127: PUSH
73128: LD_INT 33
73130: PUSH
73131: LD_INT 34
73133: PUSH
73134: LD_INT 35
73136: PUSH
73137: LD_INT 36
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 101
73180: PUSH
73181: LD_INT 102
73183: PUSH
73184: LD_INT 103
73186: PUSH
73187: LD_INT 104
73189: PUSH
73190: LD_INT 105
73192: PUSH
73193: LD_INT 106
73195: PUSH
73196: LD_INT 107
73198: PUSH
73199: LD_INT 108
73201: PUSH
73202: LD_INT 109
73204: PUSH
73205: LD_INT 110
73207: PUSH
73208: LD_INT 111
73210: PUSH
73211: LD_INT 112
73213: PUSH
73214: LD_INT 113
73216: PUSH
73217: LD_INT 114
73219: PUSH
73220: LD_INT 115
73222: PUSH
73223: LD_INT 116
73225: PUSH
73226: LD_INT 117
73228: PUSH
73229: LD_INT 118
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: ST_TO_ADDR
// if result then
73256: LD_VAR 0 2
73260: IFFALSE 74046
// begin normal :=  ;
73262: LD_ADDR_VAR 0 5
73266: PUSH
73267: LD_STRING 
73269: ST_TO_ADDR
// hardcore :=  ;
73270: LD_ADDR_VAR 0 6
73274: PUSH
73275: LD_STRING 
73277: ST_TO_ADDR
// active :=  ;
73278: LD_ADDR_VAR 0 7
73282: PUSH
73283: LD_STRING 
73285: ST_TO_ADDR
// for i = 1 to normalCounter do
73286: LD_ADDR_VAR 0 8
73290: PUSH
73291: DOUBLE
73292: LD_INT 1
73294: DEC
73295: ST_TO_ADDR
73296: LD_EXP 67
73300: PUSH
73301: FOR_TO
73302: IFFALSE 73403
// begin tmp := 0 ;
73304: LD_ADDR_VAR 0 3
73308: PUSH
73309: LD_STRING 0
73311: ST_TO_ADDR
// if result [ 1 ] then
73312: LD_VAR 0 2
73316: PUSH
73317: LD_INT 1
73319: ARRAY
73320: IFFALSE 73385
// if result [ 1 ] [ 1 ] = i then
73322: LD_VAR 0 2
73326: PUSH
73327: LD_INT 1
73329: ARRAY
73330: PUSH
73331: LD_INT 1
73333: ARRAY
73334: PUSH
73335: LD_VAR 0 8
73339: EQUAL
73340: IFFALSE 73385
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73342: LD_ADDR_VAR 0 2
73346: PUSH
73347: LD_VAR 0 2
73351: PPUSH
73352: LD_INT 1
73354: PPUSH
73355: LD_VAR 0 2
73359: PUSH
73360: LD_INT 1
73362: ARRAY
73363: PPUSH
73364: LD_INT 1
73366: PPUSH
73367: CALL_OW 3
73371: PPUSH
73372: CALL_OW 1
73376: ST_TO_ADDR
// tmp := 1 ;
73377: LD_ADDR_VAR 0 3
73381: PUSH
73382: LD_STRING 1
73384: ST_TO_ADDR
// end ; normal := normal & tmp ;
73385: LD_ADDR_VAR 0 5
73389: PUSH
73390: LD_VAR 0 5
73394: PUSH
73395: LD_VAR 0 3
73399: STR
73400: ST_TO_ADDR
// end ;
73401: GO 73301
73403: POP
73404: POP
// for i = 1 to hardcoreCounter do
73405: LD_ADDR_VAR 0 8
73409: PUSH
73410: DOUBLE
73411: LD_INT 1
73413: DEC
73414: ST_TO_ADDR
73415: LD_EXP 68
73419: PUSH
73420: FOR_TO
73421: IFFALSE 73526
// begin tmp := 0 ;
73423: LD_ADDR_VAR 0 3
73427: PUSH
73428: LD_STRING 0
73430: ST_TO_ADDR
// if result [ 2 ] then
73431: LD_VAR 0 2
73435: PUSH
73436: LD_INT 2
73438: ARRAY
73439: IFFALSE 73508
// if result [ 2 ] [ 1 ] = 100 + i then
73441: LD_VAR 0 2
73445: PUSH
73446: LD_INT 2
73448: ARRAY
73449: PUSH
73450: LD_INT 1
73452: ARRAY
73453: PUSH
73454: LD_INT 100
73456: PUSH
73457: LD_VAR 0 8
73461: PLUS
73462: EQUAL
73463: IFFALSE 73508
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
73465: LD_ADDR_VAR 0 2
73469: PUSH
73470: LD_VAR 0 2
73474: PPUSH
73475: LD_INT 2
73477: PPUSH
73478: LD_VAR 0 2
73482: PUSH
73483: LD_INT 2
73485: ARRAY
73486: PPUSH
73487: LD_INT 1
73489: PPUSH
73490: CALL_OW 3
73494: PPUSH
73495: CALL_OW 1
73499: ST_TO_ADDR
// tmp := 1 ;
73500: LD_ADDR_VAR 0 3
73504: PUSH
73505: LD_STRING 1
73507: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73508: LD_ADDR_VAR 0 6
73512: PUSH
73513: LD_VAR 0 6
73517: PUSH
73518: LD_VAR 0 3
73522: STR
73523: ST_TO_ADDR
// end ;
73524: GO 73420
73526: POP
73527: POP
// if isGameLoad then
73528: LD_VAR 0 1
73532: IFFALSE 74007
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
73534: LD_ADDR_VAR 0 4
73538: PUSH
73539: LD_EXP 71
73543: PUSH
73544: LD_EXP 70
73548: PUSH
73549: LD_EXP 72
73553: PUSH
73554: LD_EXP 69
73558: PUSH
73559: LD_EXP 73
73563: PUSH
73564: LD_EXP 74
73568: PUSH
73569: LD_EXP 75
73573: PUSH
73574: LD_EXP 76
73578: PUSH
73579: LD_EXP 77
73583: PUSH
73584: LD_EXP 78
73588: PUSH
73589: LD_EXP 79
73593: PUSH
73594: LD_EXP 80
73598: PUSH
73599: LD_EXP 81
73603: PUSH
73604: LD_EXP 82
73608: PUSH
73609: LD_EXP 90
73613: PUSH
73614: LD_EXP 91
73618: PUSH
73619: LD_EXP 92
73623: PUSH
73624: LD_EXP 93
73628: PUSH
73629: LD_EXP 95
73633: PUSH
73634: LD_EXP 96
73638: PUSH
73639: LD_EXP 97
73643: PUSH
73644: LD_EXP 100
73648: PUSH
73649: LD_EXP 102
73653: PUSH
73654: LD_EXP 103
73658: PUSH
73659: LD_EXP 104
73663: PUSH
73664: LD_EXP 106
73668: PUSH
73669: LD_EXP 107
73673: PUSH
73674: LD_EXP 110
73678: PUSH
73679: LD_EXP 111
73683: PUSH
73684: LD_EXP 112
73688: PUSH
73689: LD_EXP 113
73693: PUSH
73694: LD_EXP 114
73698: PUSH
73699: LD_EXP 115
73703: PUSH
73704: LD_EXP 116
73708: PUSH
73709: LD_EXP 117
73713: PUSH
73714: LD_EXP 118
73718: PUSH
73719: LD_EXP 83
73723: PUSH
73724: LD_EXP 84
73728: PUSH
73729: LD_EXP 87
73733: PUSH
73734: LD_EXP 88
73738: PUSH
73739: LD_EXP 89
73743: PUSH
73744: LD_EXP 85
73748: PUSH
73749: LD_EXP 86
73753: PUSH
73754: LD_EXP 94
73758: PUSH
73759: LD_EXP 98
73763: PUSH
73764: LD_EXP 99
73768: PUSH
73769: LD_EXP 101
73773: PUSH
73774: LD_EXP 105
73778: PUSH
73779: LD_EXP 108
73783: PUSH
73784: LD_EXP 109
73788: PUSH
73789: LD_EXP 119
73793: PUSH
73794: LD_EXP 120
73798: PUSH
73799: LD_EXP 121
73803: PUSH
73804: LD_EXP 122
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: ST_TO_ADDR
// tmp :=  ;
73865: LD_ADDR_VAR 0 3
73869: PUSH
73870: LD_STRING 
73872: ST_TO_ADDR
// for i = 1 to normalCounter do
73873: LD_ADDR_VAR 0 8
73877: PUSH
73878: DOUBLE
73879: LD_INT 1
73881: DEC
73882: ST_TO_ADDR
73883: LD_EXP 67
73887: PUSH
73888: FOR_TO
73889: IFFALSE 73925
// begin if flags [ i ] then
73891: LD_VAR 0 4
73895: PUSH
73896: LD_VAR 0 8
73900: ARRAY
73901: IFFALSE 73923
// tmp := tmp & i & ; ;
73903: LD_ADDR_VAR 0 3
73907: PUSH
73908: LD_VAR 0 3
73912: PUSH
73913: LD_VAR 0 8
73917: STR
73918: PUSH
73919: LD_STRING ;
73921: STR
73922: ST_TO_ADDR
// end ;
73923: GO 73888
73925: POP
73926: POP
// for i = 1 to hardcoreCounter do
73927: LD_ADDR_VAR 0 8
73931: PUSH
73932: DOUBLE
73933: LD_INT 1
73935: DEC
73936: ST_TO_ADDR
73937: LD_EXP 68
73941: PUSH
73942: FOR_TO
73943: IFFALSE 73989
// begin if flags [ normalCounter + i ] then
73945: LD_VAR 0 4
73949: PUSH
73950: LD_EXP 67
73954: PUSH
73955: LD_VAR 0 8
73959: PLUS
73960: ARRAY
73961: IFFALSE 73987
// tmp := tmp & ( 100 + i ) & ; ;
73963: LD_ADDR_VAR 0 3
73967: PUSH
73968: LD_VAR 0 3
73972: PUSH
73973: LD_INT 100
73975: PUSH
73976: LD_VAR 0 8
73980: PLUS
73981: STR
73982: PUSH
73983: LD_STRING ;
73985: STR
73986: ST_TO_ADDR
// end ;
73987: GO 73942
73989: POP
73990: POP
// if tmp then
73991: LD_VAR 0 3
73995: IFFALSE 74007
// active := tmp ;
73997: LD_ADDR_VAR 0 7
74001: PUSH
74002: LD_VAR 0 3
74006: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
74007: LD_STRING getStreamItemsFromMission("
74009: PUSH
74010: LD_VAR 0 5
74014: STR
74015: PUSH
74016: LD_STRING ","
74018: STR
74019: PUSH
74020: LD_VAR 0 6
74024: STR
74025: PUSH
74026: LD_STRING ","
74028: STR
74029: PUSH
74030: LD_VAR 0 7
74034: STR
74035: PUSH
74036: LD_STRING ")
74038: STR
74039: PPUSH
74040: CALL_OW 559
// end else
74044: GO 74053
// ToLua ( getStreamItemsFromMission("","","") ) ;
74046: LD_STRING getStreamItemsFromMission("","","")
74048: PPUSH
74049: CALL_OW 559
// end ;
74053: LD_VAR 0 2
74057: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
74058: LD_EXP 66
74062: PUSH
74063: LD_EXP 71
74067: AND
74068: IFFALSE 74192
74070: GO 74072
74072: DISABLE
74073: LD_INT 0
74075: PPUSH
74076: PPUSH
// begin enable ;
74077: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
74078: LD_ADDR_VAR 0 2
74082: PUSH
74083: LD_INT 22
74085: PUSH
74086: LD_OWVAR 2
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 2
74097: PUSH
74098: LD_INT 34
74100: PUSH
74101: LD_INT 7
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PUSH
74108: LD_INT 34
74110: PUSH
74111: LD_INT 45
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 34
74120: PUSH
74121: LD_INT 28
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 34
74130: PUSH
74131: LD_INT 47
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PPUSH
74149: CALL_OW 69
74153: ST_TO_ADDR
// if not tmp then
74154: LD_VAR 0 2
74158: NOT
74159: IFFALSE 74163
// exit ;
74161: GO 74192
// for i in tmp do
74163: LD_ADDR_VAR 0 1
74167: PUSH
74168: LD_VAR 0 2
74172: PUSH
74173: FOR_IN
74174: IFFALSE 74190
// begin SetLives ( i , 0 ) ;
74176: LD_VAR 0 1
74180: PPUSH
74181: LD_INT 0
74183: PPUSH
74184: CALL_OW 234
// end ;
74188: GO 74173
74190: POP
74191: POP
// end ;
74192: PPOPN 2
74194: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
74195: LD_EXP 66
74199: PUSH
74200: LD_EXP 72
74204: AND
74205: IFFALSE 74289
74207: GO 74209
74209: DISABLE
74210: LD_INT 0
74212: PPUSH
74213: PPUSH
// begin enable ;
74214: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
74215: LD_ADDR_VAR 0 2
74219: PUSH
74220: LD_INT 22
74222: PUSH
74223: LD_OWVAR 2
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 32
74234: PUSH
74235: LD_INT 3
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PPUSH
74246: CALL_OW 69
74250: ST_TO_ADDR
// if not tmp then
74251: LD_VAR 0 2
74255: NOT
74256: IFFALSE 74260
// exit ;
74258: GO 74289
// for i in tmp do
74260: LD_ADDR_VAR 0 1
74264: PUSH
74265: LD_VAR 0 2
74269: PUSH
74270: FOR_IN
74271: IFFALSE 74287
// begin SetLives ( i , 0 ) ;
74273: LD_VAR 0 1
74277: PPUSH
74278: LD_INT 0
74280: PPUSH
74281: CALL_OW 234
// end ;
74285: GO 74270
74287: POP
74288: POP
// end ;
74289: PPOPN 2
74291: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74292: LD_EXP 66
74296: PUSH
74297: LD_EXP 69
74301: AND
74302: IFFALSE 74395
74304: GO 74306
74306: DISABLE
74307: LD_INT 0
74309: PPUSH
// begin enable ;
74310: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74311: LD_ADDR_VAR 0 1
74315: PUSH
74316: LD_INT 22
74318: PUSH
74319: LD_OWVAR 2
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 2
74330: PUSH
74331: LD_INT 25
74333: PUSH
74334: LD_INT 5
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 25
74343: PUSH
74344: LD_INT 9
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: PUSH
74351: LD_INT 25
74353: PUSH
74354: LD_INT 8
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PPUSH
74371: CALL_OW 69
74375: PUSH
74376: FOR_IN
74377: IFFALSE 74393
// begin SetClass ( i , 1 ) ;
74379: LD_VAR 0 1
74383: PPUSH
74384: LD_INT 1
74386: PPUSH
74387: CALL_OW 336
// end ;
74391: GO 74376
74393: POP
74394: POP
// end ;
74395: PPOPN 1
74397: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74398: LD_EXP 66
74402: PUSH
74403: LD_EXP 70
74407: AND
74408: PUSH
74409: LD_OWVAR 65
74413: PUSH
74414: LD_INT 7
74416: LESS
74417: AND
74418: IFFALSE 74432
74420: GO 74422
74422: DISABLE
// begin enable ;
74423: ENABLE
// game_speed := 7 ;
74424: LD_ADDR_OWVAR 65
74428: PUSH
74429: LD_INT 7
74431: ST_TO_ADDR
// end ;
74432: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74433: LD_EXP 66
74437: PUSH
74438: LD_EXP 73
74442: AND
74443: IFFALSE 74645
74445: GO 74447
74447: DISABLE
74448: LD_INT 0
74450: PPUSH
74451: PPUSH
74452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74453: LD_ADDR_VAR 0 3
74457: PUSH
74458: LD_INT 81
74460: PUSH
74461: LD_OWVAR 2
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 21
74472: PUSH
74473: LD_INT 1
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: PPUSH
74484: CALL_OW 69
74488: ST_TO_ADDR
// if not tmp then
74489: LD_VAR 0 3
74493: NOT
74494: IFFALSE 74498
// exit ;
74496: GO 74645
// if tmp > 5 then
74498: LD_VAR 0 3
74502: PUSH
74503: LD_INT 5
74505: GREATER
74506: IFFALSE 74518
// k := 5 else
74508: LD_ADDR_VAR 0 2
74512: PUSH
74513: LD_INT 5
74515: ST_TO_ADDR
74516: GO 74528
// k := tmp ;
74518: LD_ADDR_VAR 0 2
74522: PUSH
74523: LD_VAR 0 3
74527: ST_TO_ADDR
// for i := 1 to k do
74528: LD_ADDR_VAR 0 1
74532: PUSH
74533: DOUBLE
74534: LD_INT 1
74536: DEC
74537: ST_TO_ADDR
74538: LD_VAR 0 2
74542: PUSH
74543: FOR_TO
74544: IFFALSE 74643
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74546: LD_VAR 0 3
74550: PUSH
74551: LD_VAR 0 1
74555: ARRAY
74556: PPUSH
74557: LD_VAR 0 1
74561: PUSH
74562: LD_INT 4
74564: MOD
74565: PUSH
74566: LD_INT 1
74568: PLUS
74569: PPUSH
74570: CALL_OW 259
74574: PUSH
74575: LD_INT 10
74577: LESS
74578: IFFALSE 74641
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74580: LD_VAR 0 3
74584: PUSH
74585: LD_VAR 0 1
74589: ARRAY
74590: PPUSH
74591: LD_VAR 0 1
74595: PUSH
74596: LD_INT 4
74598: MOD
74599: PUSH
74600: LD_INT 1
74602: PLUS
74603: PPUSH
74604: LD_VAR 0 3
74608: PUSH
74609: LD_VAR 0 1
74613: ARRAY
74614: PPUSH
74615: LD_VAR 0 1
74619: PUSH
74620: LD_INT 4
74622: MOD
74623: PUSH
74624: LD_INT 1
74626: PLUS
74627: PPUSH
74628: CALL_OW 259
74632: PUSH
74633: LD_INT 1
74635: PLUS
74636: PPUSH
74637: CALL_OW 237
74641: GO 74543
74643: POP
74644: POP
// end ;
74645: PPOPN 3
74647: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
74648: LD_EXP 66
74652: PUSH
74653: LD_EXP 74
74657: AND
74658: IFFALSE 74678
74660: GO 74662
74662: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
74663: LD_INT 4
74665: PPUSH
74666: LD_OWVAR 2
74670: PPUSH
74671: LD_INT 0
74673: PPUSH
74674: CALL_OW 324
74678: END
// every 0 0$1 trigger StreamModeActive and sShovel do
74679: LD_EXP 66
74683: PUSH
74684: LD_EXP 103
74688: AND
74689: IFFALSE 74709
74691: GO 74693
74693: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
74694: LD_INT 19
74696: PPUSH
74697: LD_OWVAR 2
74701: PPUSH
74702: LD_INT 0
74704: PPUSH
74705: CALL_OW 324
74709: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
74710: LD_EXP 66
74714: PUSH
74715: LD_EXP 75
74719: AND
74720: IFFALSE 74822
74722: GO 74724
74724: DISABLE
74725: LD_INT 0
74727: PPUSH
74728: PPUSH
// begin enable ;
74729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
74730: LD_ADDR_VAR 0 2
74734: PUSH
74735: LD_INT 22
74737: PUSH
74738: LD_OWVAR 2
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PUSH
74747: LD_INT 2
74749: PUSH
74750: LD_INT 34
74752: PUSH
74753: LD_INT 11
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 34
74762: PUSH
74763: LD_INT 30
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: LIST
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PPUSH
74779: CALL_OW 69
74783: ST_TO_ADDR
// if not tmp then
74784: LD_VAR 0 2
74788: NOT
74789: IFFALSE 74793
// exit ;
74791: GO 74822
// for i in tmp do
74793: LD_ADDR_VAR 0 1
74797: PUSH
74798: LD_VAR 0 2
74802: PUSH
74803: FOR_IN
74804: IFFALSE 74820
// begin SetLives ( i , 0 ) ;
74806: LD_VAR 0 1
74810: PPUSH
74811: LD_INT 0
74813: PPUSH
74814: CALL_OW 234
// end ;
74818: GO 74803
74820: POP
74821: POP
// end ;
74822: PPOPN 2
74824: END
// every 0 0$1 trigger StreamModeActive and sBunker do
74825: LD_EXP 66
74829: PUSH
74830: LD_EXP 76
74834: AND
74835: IFFALSE 74855
74837: GO 74839
74839: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
74840: LD_INT 32
74842: PPUSH
74843: LD_OWVAR 2
74847: PPUSH
74848: LD_INT 0
74850: PPUSH
74851: CALL_OW 324
74855: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
74856: LD_EXP 66
74860: PUSH
74861: LD_EXP 77
74865: AND
74866: IFFALSE 75047
74868: GO 74870
74870: DISABLE
74871: LD_INT 0
74873: PPUSH
74874: PPUSH
74875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
74876: LD_ADDR_VAR 0 2
74880: PUSH
74881: LD_INT 22
74883: PUSH
74884: LD_OWVAR 2
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 33
74895: PUSH
74896: LD_INT 3
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PPUSH
74907: CALL_OW 69
74911: ST_TO_ADDR
// if not tmp then
74912: LD_VAR 0 2
74916: NOT
74917: IFFALSE 74921
// exit ;
74919: GO 75047
// side := 0 ;
74921: LD_ADDR_VAR 0 3
74925: PUSH
74926: LD_INT 0
74928: ST_TO_ADDR
// for i := 1 to 8 do
74929: LD_ADDR_VAR 0 1
74933: PUSH
74934: DOUBLE
74935: LD_INT 1
74937: DEC
74938: ST_TO_ADDR
74939: LD_INT 8
74941: PUSH
74942: FOR_TO
74943: IFFALSE 74991
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
74945: LD_OWVAR 2
74949: PUSH
74950: LD_VAR 0 1
74954: NONEQUAL
74955: PUSH
74956: LD_OWVAR 2
74960: PPUSH
74961: LD_VAR 0 1
74965: PPUSH
74966: CALL_OW 81
74970: PUSH
74971: LD_INT 2
74973: EQUAL
74974: AND
74975: IFFALSE 74989
// begin side := i ;
74977: LD_ADDR_VAR 0 3
74981: PUSH
74982: LD_VAR 0 1
74986: ST_TO_ADDR
// break ;
74987: GO 74991
// end ;
74989: GO 74942
74991: POP
74992: POP
// if not side then
74993: LD_VAR 0 3
74997: NOT
74998: IFFALSE 75002
// exit ;
75000: GO 75047
// for i := 1 to tmp do
75002: LD_ADDR_VAR 0 1
75006: PUSH
75007: DOUBLE
75008: LD_INT 1
75010: DEC
75011: ST_TO_ADDR
75012: LD_VAR 0 2
75016: PUSH
75017: FOR_TO
75018: IFFALSE 75045
// if Prob ( 60 ) then
75020: LD_INT 60
75022: PPUSH
75023: CALL_OW 13
75027: IFFALSE 75043
// SetSide ( i , side ) ;
75029: LD_VAR 0 1
75033: PPUSH
75034: LD_VAR 0 3
75038: PPUSH
75039: CALL_OW 235
75043: GO 75017
75045: POP
75046: POP
// end ;
75047: PPOPN 3
75049: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
75050: LD_EXP 66
75054: PUSH
75055: LD_EXP 79
75059: AND
75060: IFFALSE 75179
75062: GO 75064
75064: DISABLE
75065: LD_INT 0
75067: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
75068: LD_ADDR_VAR 0 1
75072: PUSH
75073: LD_INT 22
75075: PUSH
75076: LD_OWVAR 2
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: PUSH
75085: LD_INT 21
75087: PUSH
75088: LD_INT 1
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PUSH
75095: LD_INT 3
75097: PUSH
75098: LD_INT 23
75100: PUSH
75101: LD_INT 0
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: PPUSH
75117: CALL_OW 69
75121: PUSH
75122: FOR_IN
75123: IFFALSE 75177
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
75125: LD_VAR 0 1
75129: PPUSH
75130: CALL_OW 257
75134: PUSH
75135: LD_INT 1
75137: PUSH
75138: LD_INT 2
75140: PUSH
75141: LD_INT 3
75143: PUSH
75144: LD_INT 4
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: IN
75153: IFFALSE 75175
// SetClass ( un , rand ( 1 , 4 ) ) ;
75155: LD_VAR 0 1
75159: PPUSH
75160: LD_INT 1
75162: PPUSH
75163: LD_INT 4
75165: PPUSH
75166: CALL_OW 12
75170: PPUSH
75171: CALL_OW 336
75175: GO 75122
75177: POP
75178: POP
// end ;
75179: PPOPN 1
75181: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
75182: LD_EXP 66
75186: PUSH
75187: LD_EXP 78
75191: AND
75192: IFFALSE 75271
75194: GO 75196
75196: DISABLE
75197: LD_INT 0
75199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75200: LD_ADDR_VAR 0 1
75204: PUSH
75205: LD_INT 22
75207: PUSH
75208: LD_OWVAR 2
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: PUSH
75217: LD_INT 21
75219: PUSH
75220: LD_INT 3
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PPUSH
75231: CALL_OW 69
75235: ST_TO_ADDR
// if not tmp then
75236: LD_VAR 0 1
75240: NOT
75241: IFFALSE 75245
// exit ;
75243: GO 75271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
75245: LD_VAR 0 1
75249: PUSH
75250: LD_INT 1
75252: PPUSH
75253: LD_VAR 0 1
75257: PPUSH
75258: CALL_OW 12
75262: ARRAY
75263: PPUSH
75264: LD_INT 100
75266: PPUSH
75267: CALL_OW 234
// end ;
75271: PPOPN 1
75273: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75274: LD_EXP 66
75278: PUSH
75279: LD_EXP 80
75283: AND
75284: IFFALSE 75382
75286: GO 75288
75288: DISABLE
75289: LD_INT 0
75291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75292: LD_ADDR_VAR 0 1
75296: PUSH
75297: LD_INT 22
75299: PUSH
75300: LD_OWVAR 2
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: LD_INT 21
75311: PUSH
75312: LD_INT 1
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PPUSH
75323: CALL_OW 69
75327: ST_TO_ADDR
// if not tmp then
75328: LD_VAR 0 1
75332: NOT
75333: IFFALSE 75337
// exit ;
75335: GO 75382
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75337: LD_VAR 0 1
75341: PUSH
75342: LD_INT 1
75344: PPUSH
75345: LD_VAR 0 1
75349: PPUSH
75350: CALL_OW 12
75354: ARRAY
75355: PPUSH
75356: LD_INT 1
75358: PPUSH
75359: LD_INT 4
75361: PPUSH
75362: CALL_OW 12
75366: PPUSH
75367: LD_INT 3000
75369: PPUSH
75370: LD_INT 9000
75372: PPUSH
75373: CALL_OW 12
75377: PPUSH
75378: CALL_OW 492
// end ;
75382: PPOPN 1
75384: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75385: LD_EXP 66
75389: PUSH
75390: LD_EXP 81
75394: AND
75395: IFFALSE 75415
75397: GO 75399
75399: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75400: LD_INT 1
75402: PPUSH
75403: LD_OWVAR 2
75407: PPUSH
75408: LD_INT 0
75410: PPUSH
75411: CALL_OW 324
75415: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75416: LD_EXP 66
75420: PUSH
75421: LD_EXP 82
75425: AND
75426: IFFALSE 75509
75428: GO 75430
75430: DISABLE
75431: LD_INT 0
75433: PPUSH
75434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75435: LD_ADDR_VAR 0 2
75439: PUSH
75440: LD_INT 22
75442: PUSH
75443: LD_OWVAR 2
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: PUSH
75452: LD_INT 21
75454: PUSH
75455: LD_INT 3
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: PPUSH
75466: CALL_OW 69
75470: ST_TO_ADDR
// if not tmp then
75471: LD_VAR 0 2
75475: NOT
75476: IFFALSE 75480
// exit ;
75478: GO 75509
// for i in tmp do
75480: LD_ADDR_VAR 0 1
75484: PUSH
75485: LD_VAR 0 2
75489: PUSH
75490: FOR_IN
75491: IFFALSE 75507
// SetBLevel ( i , 10 ) ;
75493: LD_VAR 0 1
75497: PPUSH
75498: LD_INT 10
75500: PPUSH
75501: CALL_OW 241
75505: GO 75490
75507: POP
75508: POP
// end ;
75509: PPOPN 2
75511: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75512: LD_EXP 66
75516: PUSH
75517: LD_EXP 83
75521: AND
75522: IFFALSE 75633
75524: GO 75526
75526: DISABLE
75527: LD_INT 0
75529: PPUSH
75530: PPUSH
75531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75532: LD_ADDR_VAR 0 3
75536: PUSH
75537: LD_INT 22
75539: PUSH
75540: LD_OWVAR 2
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 25
75551: PUSH
75552: LD_INT 1
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PPUSH
75563: CALL_OW 69
75567: ST_TO_ADDR
// if not tmp then
75568: LD_VAR 0 3
75572: NOT
75573: IFFALSE 75577
// exit ;
75575: GO 75633
// un := tmp [ rand ( 1 , tmp ) ] ;
75577: LD_ADDR_VAR 0 2
75581: PUSH
75582: LD_VAR 0 3
75586: PUSH
75587: LD_INT 1
75589: PPUSH
75590: LD_VAR 0 3
75594: PPUSH
75595: CALL_OW 12
75599: ARRAY
75600: ST_TO_ADDR
// if Crawls ( un ) then
75601: LD_VAR 0 2
75605: PPUSH
75606: CALL_OW 318
75610: IFFALSE 75621
// ComWalk ( un ) ;
75612: LD_VAR 0 2
75616: PPUSH
75617: CALL_OW 138
// SetClass ( un , class_sniper ) ;
75621: LD_VAR 0 2
75625: PPUSH
75626: LD_INT 5
75628: PPUSH
75629: CALL_OW 336
// end ;
75633: PPOPN 3
75635: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
75636: LD_EXP 66
75640: PUSH
75641: LD_EXP 84
75645: AND
75646: PUSH
75647: LD_OWVAR 67
75651: PUSH
75652: LD_INT 4
75654: LESS
75655: AND
75656: IFFALSE 75675
75658: GO 75660
75660: DISABLE
// begin Difficulty := Difficulty + 1 ;
75661: LD_ADDR_OWVAR 67
75665: PUSH
75666: LD_OWVAR 67
75670: PUSH
75671: LD_INT 1
75673: PLUS
75674: ST_TO_ADDR
// end ;
75675: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
75676: LD_EXP 66
75680: PUSH
75681: LD_EXP 85
75685: AND
75686: IFFALSE 75789
75688: GO 75690
75690: DISABLE
75691: LD_INT 0
75693: PPUSH
// begin for i := 1 to 5 do
75694: LD_ADDR_VAR 0 1
75698: PUSH
75699: DOUBLE
75700: LD_INT 1
75702: DEC
75703: ST_TO_ADDR
75704: LD_INT 5
75706: PUSH
75707: FOR_TO
75708: IFFALSE 75787
// begin uc_nation := nation_nature ;
75710: LD_ADDR_OWVAR 21
75714: PUSH
75715: LD_INT 0
75717: ST_TO_ADDR
// uc_side := 0 ;
75718: LD_ADDR_OWVAR 20
75722: PUSH
75723: LD_INT 0
75725: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75726: LD_ADDR_OWVAR 29
75730: PUSH
75731: LD_INT 12
75733: PUSH
75734: LD_INT 12
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: ST_TO_ADDR
// hc_agressivity := 20 ;
75741: LD_ADDR_OWVAR 35
75745: PUSH
75746: LD_INT 20
75748: ST_TO_ADDR
// hc_class := class_tiger ;
75749: LD_ADDR_OWVAR 28
75753: PUSH
75754: LD_INT 14
75756: ST_TO_ADDR
// hc_gallery :=  ;
75757: LD_ADDR_OWVAR 33
75761: PUSH
75762: LD_STRING 
75764: ST_TO_ADDR
// hc_name :=  ;
75765: LD_ADDR_OWVAR 26
75769: PUSH
75770: LD_STRING 
75772: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
75773: CALL_OW 44
75777: PPUSH
75778: LD_INT 0
75780: PPUSH
75781: CALL_OW 51
// end ;
75785: GO 75707
75787: POP
75788: POP
// end ;
75789: PPOPN 1
75791: END
// every 0 0$1 trigger StreamModeActive and sBomb do
75792: LD_EXP 66
75796: PUSH
75797: LD_EXP 86
75801: AND
75802: IFFALSE 75811
75804: GO 75806
75806: DISABLE
// StreamSibBomb ;
75807: CALL 75812 0 0
75811: END
// export function StreamSibBomb ; var i , x , y ; begin
75812: LD_INT 0
75814: PPUSH
75815: PPUSH
75816: PPUSH
75817: PPUSH
// result := false ;
75818: LD_ADDR_VAR 0 1
75822: PUSH
75823: LD_INT 0
75825: ST_TO_ADDR
// for i := 1 to 16 do
75826: LD_ADDR_VAR 0 2
75830: PUSH
75831: DOUBLE
75832: LD_INT 1
75834: DEC
75835: ST_TO_ADDR
75836: LD_INT 16
75838: PUSH
75839: FOR_TO
75840: IFFALSE 76039
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75842: LD_ADDR_VAR 0 3
75846: PUSH
75847: LD_INT 10
75849: PUSH
75850: LD_INT 20
75852: PUSH
75853: LD_INT 30
75855: PUSH
75856: LD_INT 40
75858: PUSH
75859: LD_INT 50
75861: PUSH
75862: LD_INT 60
75864: PUSH
75865: LD_INT 70
75867: PUSH
75868: LD_INT 80
75870: PUSH
75871: LD_INT 90
75873: PUSH
75874: LD_INT 100
75876: PUSH
75877: LD_INT 110
75879: PUSH
75880: LD_INT 120
75882: PUSH
75883: LD_INT 130
75885: PUSH
75886: LD_INT 140
75888: PUSH
75889: LD_INT 150
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: PUSH
75909: LD_INT 1
75911: PPUSH
75912: LD_INT 15
75914: PPUSH
75915: CALL_OW 12
75919: ARRAY
75920: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75921: LD_ADDR_VAR 0 4
75925: PUSH
75926: LD_INT 10
75928: PUSH
75929: LD_INT 20
75931: PUSH
75932: LD_INT 30
75934: PUSH
75935: LD_INT 40
75937: PUSH
75938: LD_INT 50
75940: PUSH
75941: LD_INT 60
75943: PUSH
75944: LD_INT 70
75946: PUSH
75947: LD_INT 80
75949: PUSH
75950: LD_INT 90
75952: PUSH
75953: LD_INT 100
75955: PUSH
75956: LD_INT 110
75958: PUSH
75959: LD_INT 120
75961: PUSH
75962: LD_INT 130
75964: PUSH
75965: LD_INT 140
75967: PUSH
75968: LD_INT 150
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: PUSH
75988: LD_INT 1
75990: PPUSH
75991: LD_INT 15
75993: PPUSH
75994: CALL_OW 12
75998: ARRAY
75999: ST_TO_ADDR
// if ValidHex ( x , y ) then
76000: LD_VAR 0 3
76004: PPUSH
76005: LD_VAR 0 4
76009: PPUSH
76010: CALL_OW 488
76014: IFFALSE 76037
// begin result := [ x , y ] ;
76016: LD_ADDR_VAR 0 1
76020: PUSH
76021: LD_VAR 0 3
76025: PUSH
76026: LD_VAR 0 4
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: ST_TO_ADDR
// break ;
76035: GO 76039
// end ; end ;
76037: GO 75839
76039: POP
76040: POP
// if result then
76041: LD_VAR 0 1
76045: IFFALSE 76105
// begin ToLua ( playSibBomb() ) ;
76047: LD_STRING playSibBomb()
76049: PPUSH
76050: CALL_OW 559
// wait ( 0 0$14 ) ;
76054: LD_INT 490
76056: PPUSH
76057: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
76061: LD_VAR 0 1
76065: PUSH
76066: LD_INT 1
76068: ARRAY
76069: PPUSH
76070: LD_VAR 0 1
76074: PUSH
76075: LD_INT 2
76077: ARRAY
76078: PPUSH
76079: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
76083: LD_VAR 0 1
76087: PUSH
76088: LD_INT 1
76090: ARRAY
76091: PPUSH
76092: LD_VAR 0 1
76096: PUSH
76097: LD_INT 2
76099: ARRAY
76100: PPUSH
76101: CALL_OW 429
// end ; end ;
76105: LD_VAR 0 1
76109: RET
// every 0 0$1 trigger StreamModeActive and sReset do
76110: LD_EXP 66
76114: PUSH
76115: LD_EXP 88
76119: AND
76120: IFFALSE 76132
76122: GO 76124
76124: DISABLE
// YouLost (  ) ;
76125: LD_STRING 
76127: PPUSH
76128: CALL_OW 104
76132: END
// every 0 0$1 trigger StreamModeActive and sFog do
76133: LD_EXP 66
76137: PUSH
76138: LD_EXP 87
76142: AND
76143: IFFALSE 76157
76145: GO 76147
76147: DISABLE
// FogOff ( your_side ) ;
76148: LD_OWVAR 2
76152: PPUSH
76153: CALL_OW 344
76157: END
// every 0 0$1 trigger StreamModeActive and sSun do
76158: LD_EXP 66
76162: PUSH
76163: LD_EXP 89
76167: AND
76168: IFFALSE 76196
76170: GO 76172
76172: DISABLE
// begin solar_recharge_percent := 0 ;
76173: LD_ADDR_OWVAR 79
76177: PUSH
76178: LD_INT 0
76180: ST_TO_ADDR
// wait ( 5 5$00 ) ;
76181: LD_INT 10500
76183: PPUSH
76184: CALL_OW 67
// solar_recharge_percent := 100 ;
76188: LD_ADDR_OWVAR 79
76192: PUSH
76193: LD_INT 100
76195: ST_TO_ADDR
// end ;
76196: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
76197: LD_EXP 66
76201: PUSH
76202: LD_EXP 90
76206: AND
76207: IFFALSE 76446
76209: GO 76211
76211: DISABLE
76212: LD_INT 0
76214: PPUSH
76215: PPUSH
76216: PPUSH
// begin tmp := [ ] ;
76217: LD_ADDR_VAR 0 3
76221: PUSH
76222: EMPTY
76223: ST_TO_ADDR
// for i := 1 to 6 do
76224: LD_ADDR_VAR 0 1
76228: PUSH
76229: DOUBLE
76230: LD_INT 1
76232: DEC
76233: ST_TO_ADDR
76234: LD_INT 6
76236: PUSH
76237: FOR_TO
76238: IFFALSE 76343
// begin uc_nation := nation_nature ;
76240: LD_ADDR_OWVAR 21
76244: PUSH
76245: LD_INT 0
76247: ST_TO_ADDR
// uc_side := 0 ;
76248: LD_ADDR_OWVAR 20
76252: PUSH
76253: LD_INT 0
76255: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76256: LD_ADDR_OWVAR 29
76260: PUSH
76261: LD_INT 12
76263: PUSH
76264: LD_INT 12
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: ST_TO_ADDR
// hc_agressivity := 20 ;
76271: LD_ADDR_OWVAR 35
76275: PUSH
76276: LD_INT 20
76278: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76279: LD_ADDR_OWVAR 28
76283: PUSH
76284: LD_INT 17
76286: ST_TO_ADDR
// hc_gallery :=  ;
76287: LD_ADDR_OWVAR 33
76291: PUSH
76292: LD_STRING 
76294: ST_TO_ADDR
// hc_name :=  ;
76295: LD_ADDR_OWVAR 26
76299: PUSH
76300: LD_STRING 
76302: ST_TO_ADDR
// un := CreateHuman ;
76303: LD_ADDR_VAR 0 2
76307: PUSH
76308: CALL_OW 44
76312: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76313: LD_VAR 0 2
76317: PPUSH
76318: LD_INT 1
76320: PPUSH
76321: CALL_OW 51
// tmp := tmp ^ un ;
76325: LD_ADDR_VAR 0 3
76329: PUSH
76330: LD_VAR 0 3
76334: PUSH
76335: LD_VAR 0 2
76339: ADD
76340: ST_TO_ADDR
// end ;
76341: GO 76237
76343: POP
76344: POP
// repeat wait ( 0 0$1 ) ;
76345: LD_INT 35
76347: PPUSH
76348: CALL_OW 67
// for un in tmp do
76352: LD_ADDR_VAR 0 2
76356: PUSH
76357: LD_VAR 0 3
76361: PUSH
76362: FOR_IN
76363: IFFALSE 76437
// begin if IsDead ( un ) then
76365: LD_VAR 0 2
76369: PPUSH
76370: CALL_OW 301
76374: IFFALSE 76394
// begin tmp := tmp diff un ;
76376: LD_ADDR_VAR 0 3
76380: PUSH
76381: LD_VAR 0 3
76385: PUSH
76386: LD_VAR 0 2
76390: DIFF
76391: ST_TO_ADDR
// continue ;
76392: GO 76362
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76394: LD_VAR 0 2
76398: PPUSH
76399: LD_INT 3
76401: PUSH
76402: LD_INT 22
76404: PUSH
76405: LD_INT 0
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PPUSH
76416: CALL_OW 69
76420: PPUSH
76421: LD_VAR 0 2
76425: PPUSH
76426: CALL_OW 74
76430: PPUSH
76431: CALL_OW 115
// end ;
76435: GO 76362
76437: POP
76438: POP
// until not tmp ;
76439: LD_VAR 0 3
76443: NOT
76444: IFFALSE 76345
// end ;
76446: PPOPN 3
76448: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76449: LD_EXP 66
76453: PUSH
76454: LD_EXP 91
76458: AND
76459: IFFALSE 76513
76461: GO 76463
76463: DISABLE
// begin ToLua ( displayTroll(); ) ;
76464: LD_STRING displayTroll();
76466: PPUSH
76467: CALL_OW 559
// wait ( 3 3$00 ) ;
76471: LD_INT 6300
76473: PPUSH
76474: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76478: LD_STRING hideTroll();
76480: PPUSH
76481: CALL_OW 559
// wait ( 1 1$00 ) ;
76485: LD_INT 2100
76487: PPUSH
76488: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76492: LD_STRING displayTroll();
76494: PPUSH
76495: CALL_OW 559
// wait ( 1 1$00 ) ;
76499: LD_INT 2100
76501: PPUSH
76502: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76506: LD_STRING hideTroll();
76508: PPUSH
76509: CALL_OW 559
// end ;
76513: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76514: LD_EXP 66
76518: PUSH
76519: LD_EXP 92
76523: AND
76524: IFFALSE 76587
76526: GO 76528
76528: DISABLE
76529: LD_INT 0
76531: PPUSH
// begin p := 0 ;
76532: LD_ADDR_VAR 0 1
76536: PUSH
76537: LD_INT 0
76539: ST_TO_ADDR
// repeat game_speed := 1 ;
76540: LD_ADDR_OWVAR 65
76544: PUSH
76545: LD_INT 1
76547: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76548: LD_INT 35
76550: PPUSH
76551: CALL_OW 67
// p := p + 1 ;
76555: LD_ADDR_VAR 0 1
76559: PUSH
76560: LD_VAR 0 1
76564: PUSH
76565: LD_INT 1
76567: PLUS
76568: ST_TO_ADDR
// until p >= 60 ;
76569: LD_VAR 0 1
76573: PUSH
76574: LD_INT 60
76576: GREATEREQUAL
76577: IFFALSE 76540
// game_speed := 4 ;
76579: LD_ADDR_OWVAR 65
76583: PUSH
76584: LD_INT 4
76586: ST_TO_ADDR
// end ;
76587: PPOPN 1
76589: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76590: LD_EXP 66
76594: PUSH
76595: LD_EXP 93
76599: AND
76600: IFFALSE 76746
76602: GO 76604
76604: DISABLE
76605: LD_INT 0
76607: PPUSH
76608: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76609: LD_ADDR_VAR 0 1
76613: PUSH
76614: LD_INT 22
76616: PUSH
76617: LD_OWVAR 2
76621: PUSH
76622: EMPTY
76623: LIST
76624: LIST
76625: PUSH
76626: LD_INT 2
76628: PUSH
76629: LD_INT 30
76631: PUSH
76632: LD_INT 0
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: LD_INT 30
76641: PUSH
76642: LD_INT 1
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: LIST
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: PPUSH
76658: CALL_OW 69
76662: ST_TO_ADDR
// if not depot then
76663: LD_VAR 0 1
76667: NOT
76668: IFFALSE 76672
// exit ;
76670: GO 76746
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
76672: LD_ADDR_VAR 0 2
76676: PUSH
76677: LD_VAR 0 1
76681: PUSH
76682: LD_INT 1
76684: PPUSH
76685: LD_VAR 0 1
76689: PPUSH
76690: CALL_OW 12
76694: ARRAY
76695: PPUSH
76696: CALL_OW 274
76700: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
76701: LD_VAR 0 2
76705: PPUSH
76706: LD_INT 1
76708: PPUSH
76709: LD_INT 0
76711: PPUSH
76712: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
76716: LD_VAR 0 2
76720: PPUSH
76721: LD_INT 2
76723: PPUSH
76724: LD_INT 0
76726: PPUSH
76727: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
76731: LD_VAR 0 2
76735: PPUSH
76736: LD_INT 3
76738: PPUSH
76739: LD_INT 0
76741: PPUSH
76742: CALL_OW 277
// end ;
76746: PPOPN 2
76748: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
76749: LD_EXP 66
76753: PUSH
76754: LD_EXP 94
76758: AND
76759: IFFALSE 76856
76761: GO 76763
76763: DISABLE
76764: LD_INT 0
76766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76767: LD_ADDR_VAR 0 1
76771: PUSH
76772: LD_INT 22
76774: PUSH
76775: LD_OWVAR 2
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: PUSH
76784: LD_INT 21
76786: PUSH
76787: LD_INT 1
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: PUSH
76794: LD_INT 3
76796: PUSH
76797: LD_INT 23
76799: PUSH
76800: LD_INT 0
76802: PUSH
76803: EMPTY
76804: LIST
76805: LIST
76806: PUSH
76807: EMPTY
76808: LIST
76809: LIST
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: LIST
76815: PPUSH
76816: CALL_OW 69
76820: ST_TO_ADDR
// if not tmp then
76821: LD_VAR 0 1
76825: NOT
76826: IFFALSE 76830
// exit ;
76828: GO 76856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
76830: LD_VAR 0 1
76834: PUSH
76835: LD_INT 1
76837: PPUSH
76838: LD_VAR 0 1
76842: PPUSH
76843: CALL_OW 12
76847: ARRAY
76848: PPUSH
76849: LD_INT 200
76851: PPUSH
76852: CALL_OW 234
// end ;
76856: PPOPN 1
76858: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
76859: LD_EXP 66
76863: PUSH
76864: LD_EXP 95
76868: AND
76869: IFFALSE 76948
76871: GO 76873
76873: DISABLE
76874: LD_INT 0
76876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
76877: LD_ADDR_VAR 0 1
76881: PUSH
76882: LD_INT 22
76884: PUSH
76885: LD_OWVAR 2
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 21
76896: PUSH
76897: LD_INT 2
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PPUSH
76908: CALL_OW 69
76912: ST_TO_ADDR
// if not tmp then
76913: LD_VAR 0 1
76917: NOT
76918: IFFALSE 76922
// exit ;
76920: GO 76948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
76922: LD_VAR 0 1
76926: PUSH
76927: LD_INT 1
76929: PPUSH
76930: LD_VAR 0 1
76934: PPUSH
76935: CALL_OW 12
76939: ARRAY
76940: PPUSH
76941: LD_INT 60
76943: PPUSH
76944: CALL_OW 234
// end ;
76948: PPOPN 1
76950: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
76951: LD_EXP 66
76955: PUSH
76956: LD_EXP 96
76960: AND
76961: IFFALSE 77060
76963: GO 76965
76965: DISABLE
76966: LD_INT 0
76968: PPUSH
76969: PPUSH
// begin enable ;
76970: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
76971: LD_ADDR_VAR 0 1
76975: PUSH
76976: LD_INT 22
76978: PUSH
76979: LD_OWVAR 2
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: PUSH
76988: LD_INT 61
76990: PUSH
76991: EMPTY
76992: LIST
76993: PUSH
76994: LD_INT 33
76996: PUSH
76997: LD_INT 2
76999: PUSH
77000: EMPTY
77001: LIST
77002: LIST
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: LIST
77008: PPUSH
77009: CALL_OW 69
77013: ST_TO_ADDR
// if not tmp then
77014: LD_VAR 0 1
77018: NOT
77019: IFFALSE 77023
// exit ;
77021: GO 77060
// for i in tmp do
77023: LD_ADDR_VAR 0 2
77027: PUSH
77028: LD_VAR 0 1
77032: PUSH
77033: FOR_IN
77034: IFFALSE 77058
// if IsControledBy ( i ) then
77036: LD_VAR 0 2
77040: PPUSH
77041: CALL_OW 312
77045: IFFALSE 77056
// ComUnlink ( i ) ;
77047: LD_VAR 0 2
77051: PPUSH
77052: CALL_OW 136
77056: GO 77033
77058: POP
77059: POP
// end ;
77060: PPOPN 2
77062: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
77063: LD_EXP 66
77067: PUSH
77068: LD_EXP 97
77072: AND
77073: IFFALSE 77213
77075: GO 77077
77077: DISABLE
77078: LD_INT 0
77080: PPUSH
77081: PPUSH
// begin ToLua ( displayPowell(); ) ;
77082: LD_STRING displayPowell();
77084: PPUSH
77085: CALL_OW 559
// uc_side := 0 ;
77089: LD_ADDR_OWVAR 20
77093: PUSH
77094: LD_INT 0
77096: ST_TO_ADDR
// uc_nation := 2 ;
77097: LD_ADDR_OWVAR 21
77101: PUSH
77102: LD_INT 2
77104: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
77105: LD_ADDR_OWVAR 37
77109: PUSH
77110: LD_INT 14
77112: ST_TO_ADDR
// vc_engine := engine_siberite ;
77113: LD_ADDR_OWVAR 39
77117: PUSH
77118: LD_INT 3
77120: ST_TO_ADDR
// vc_control := control_apeman ;
77121: LD_ADDR_OWVAR 38
77125: PUSH
77126: LD_INT 5
77128: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
77129: LD_ADDR_OWVAR 40
77133: PUSH
77134: LD_INT 29
77136: ST_TO_ADDR
// un := CreateVehicle ;
77137: LD_ADDR_VAR 0 2
77141: PUSH
77142: CALL_OW 45
77146: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77147: LD_VAR 0 2
77151: PPUSH
77152: LD_INT 1
77154: PPUSH
77155: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77159: LD_INT 35
77161: PPUSH
77162: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77166: LD_VAR 0 2
77170: PPUSH
77171: LD_INT 22
77173: PUSH
77174: LD_OWVAR 2
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PPUSH
77183: CALL_OW 69
77187: PPUSH
77188: LD_VAR 0 2
77192: PPUSH
77193: CALL_OW 74
77197: PPUSH
77198: CALL_OW 115
// until IsDead ( un ) ;
77202: LD_VAR 0 2
77206: PPUSH
77207: CALL_OW 301
77211: IFFALSE 77159
// end ;
77213: PPOPN 2
77215: END
// every 0 0$1 trigger StreamModeActive and sStu do
77216: LD_EXP 66
77220: PUSH
77221: LD_EXP 105
77225: AND
77226: IFFALSE 77242
77228: GO 77230
77230: DISABLE
// begin ToLua ( displayStucuk(); ) ;
77231: LD_STRING displayStucuk();
77233: PPUSH
77234: CALL_OW 559
// ResetFog ;
77238: CALL_OW 335
// end ;
77242: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
77243: LD_EXP 66
77247: PUSH
77248: LD_EXP 98
77252: AND
77253: IFFALSE 77394
77255: GO 77257
77257: DISABLE
77258: LD_INT 0
77260: PPUSH
77261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77262: LD_ADDR_VAR 0 2
77266: PUSH
77267: LD_INT 22
77269: PUSH
77270: LD_OWVAR 2
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: PUSH
77279: LD_INT 21
77281: PUSH
77282: LD_INT 1
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: PPUSH
77293: CALL_OW 69
77297: ST_TO_ADDR
// if not tmp then
77298: LD_VAR 0 2
77302: NOT
77303: IFFALSE 77307
// exit ;
77305: GO 77394
// un := tmp [ rand ( 1 , tmp ) ] ;
77307: LD_ADDR_VAR 0 1
77311: PUSH
77312: LD_VAR 0 2
77316: PUSH
77317: LD_INT 1
77319: PPUSH
77320: LD_VAR 0 2
77324: PPUSH
77325: CALL_OW 12
77329: ARRAY
77330: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77331: LD_VAR 0 1
77335: PPUSH
77336: LD_INT 0
77338: PPUSH
77339: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77343: LD_VAR 0 1
77347: PPUSH
77348: LD_OWVAR 3
77352: PUSH
77353: LD_VAR 0 1
77357: DIFF
77358: PPUSH
77359: LD_VAR 0 1
77363: PPUSH
77364: CALL_OW 74
77368: PPUSH
77369: CALL_OW 115
// wait ( 0 0$20 ) ;
77373: LD_INT 700
77375: PPUSH
77376: CALL_OW 67
// SetSide ( un , your_side ) ;
77380: LD_VAR 0 1
77384: PPUSH
77385: LD_OWVAR 2
77389: PPUSH
77390: CALL_OW 235
// end ;
77394: PPOPN 2
77396: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77397: LD_EXP 66
77401: PUSH
77402: LD_EXP 99
77406: AND
77407: IFFALSE 77513
77409: GO 77411
77411: DISABLE
77412: LD_INT 0
77414: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77415: LD_ADDR_VAR 0 1
77419: PUSH
77420: LD_INT 22
77422: PUSH
77423: LD_OWVAR 2
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: LD_INT 2
77434: PUSH
77435: LD_INT 30
77437: PUSH
77438: LD_INT 0
77440: PUSH
77441: EMPTY
77442: LIST
77443: LIST
77444: PUSH
77445: LD_INT 30
77447: PUSH
77448: LD_INT 1
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: PUSH
77455: EMPTY
77456: LIST
77457: LIST
77458: LIST
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PPUSH
77464: CALL_OW 69
77468: ST_TO_ADDR
// if not depot then
77469: LD_VAR 0 1
77473: NOT
77474: IFFALSE 77478
// exit ;
77476: GO 77513
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77478: LD_VAR 0 1
77482: PUSH
77483: LD_INT 1
77485: ARRAY
77486: PPUSH
77487: CALL_OW 250
77491: PPUSH
77492: LD_VAR 0 1
77496: PUSH
77497: LD_INT 1
77499: ARRAY
77500: PPUSH
77501: CALL_OW 251
77505: PPUSH
77506: LD_INT 70
77508: PPUSH
77509: CALL_OW 495
// end ;
77513: PPOPN 1
77515: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77516: LD_EXP 66
77520: PUSH
77521: LD_EXP 100
77525: AND
77526: IFFALSE 77737
77528: GO 77530
77530: DISABLE
77531: LD_INT 0
77533: PPUSH
77534: PPUSH
77535: PPUSH
77536: PPUSH
77537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77538: LD_ADDR_VAR 0 5
77542: PUSH
77543: LD_INT 22
77545: PUSH
77546: LD_OWVAR 2
77550: PUSH
77551: EMPTY
77552: LIST
77553: LIST
77554: PUSH
77555: LD_INT 21
77557: PUSH
77558: LD_INT 1
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: PUSH
77565: EMPTY
77566: LIST
77567: LIST
77568: PPUSH
77569: CALL_OW 69
77573: ST_TO_ADDR
// if not tmp then
77574: LD_VAR 0 5
77578: NOT
77579: IFFALSE 77583
// exit ;
77581: GO 77737
// for i in tmp do
77583: LD_ADDR_VAR 0 1
77587: PUSH
77588: LD_VAR 0 5
77592: PUSH
77593: FOR_IN
77594: IFFALSE 77735
// begin d := rand ( 0 , 5 ) ;
77596: LD_ADDR_VAR 0 4
77600: PUSH
77601: LD_INT 0
77603: PPUSH
77604: LD_INT 5
77606: PPUSH
77607: CALL_OW 12
77611: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
77612: LD_ADDR_VAR 0 2
77616: PUSH
77617: LD_VAR 0 1
77621: PPUSH
77622: CALL_OW 250
77626: PPUSH
77627: LD_VAR 0 4
77631: PPUSH
77632: LD_INT 3
77634: PPUSH
77635: LD_INT 12
77637: PPUSH
77638: CALL_OW 12
77642: PPUSH
77643: CALL_OW 272
77647: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
77648: LD_ADDR_VAR 0 3
77652: PUSH
77653: LD_VAR 0 1
77657: PPUSH
77658: CALL_OW 251
77662: PPUSH
77663: LD_VAR 0 4
77667: PPUSH
77668: LD_INT 3
77670: PPUSH
77671: LD_INT 12
77673: PPUSH
77674: CALL_OW 12
77678: PPUSH
77679: CALL_OW 273
77683: ST_TO_ADDR
// if ValidHex ( x , y ) then
77684: LD_VAR 0 2
77688: PPUSH
77689: LD_VAR 0 3
77693: PPUSH
77694: CALL_OW 488
77698: IFFALSE 77733
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
77700: LD_VAR 0 1
77704: PPUSH
77705: LD_VAR 0 2
77709: PPUSH
77710: LD_VAR 0 3
77714: PPUSH
77715: LD_INT 3
77717: PPUSH
77718: LD_INT 6
77720: PPUSH
77721: CALL_OW 12
77725: PPUSH
77726: LD_INT 1
77728: PPUSH
77729: CALL_OW 483
// end ;
77733: GO 77593
77735: POP
77736: POP
// end ;
77737: PPOPN 5
77739: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
77740: LD_EXP 66
77744: PUSH
77745: LD_EXP 101
77749: AND
77750: IFFALSE 77844
77752: GO 77754
77754: DISABLE
77755: LD_INT 0
77757: PPUSH
77758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
77759: LD_ADDR_VAR 0 2
77763: PUSH
77764: LD_INT 22
77766: PUSH
77767: LD_OWVAR 2
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: PUSH
77776: LD_INT 32
77778: PUSH
77779: LD_INT 1
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: PUSH
77786: LD_INT 21
77788: PUSH
77789: LD_INT 2
77791: PUSH
77792: EMPTY
77793: LIST
77794: LIST
77795: PUSH
77796: EMPTY
77797: LIST
77798: LIST
77799: LIST
77800: PPUSH
77801: CALL_OW 69
77805: ST_TO_ADDR
// if not tmp then
77806: LD_VAR 0 2
77810: NOT
77811: IFFALSE 77815
// exit ;
77813: GO 77844
// for i in tmp do
77815: LD_ADDR_VAR 0 1
77819: PUSH
77820: LD_VAR 0 2
77824: PUSH
77825: FOR_IN
77826: IFFALSE 77842
// SetFuel ( i , 0 ) ;
77828: LD_VAR 0 1
77832: PPUSH
77833: LD_INT 0
77835: PPUSH
77836: CALL_OW 240
77840: GO 77825
77842: POP
77843: POP
// end ;
77844: PPOPN 2
77846: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
77847: LD_EXP 66
77851: PUSH
77852: LD_EXP 102
77856: AND
77857: IFFALSE 77923
77859: GO 77861
77861: DISABLE
77862: LD_INT 0
77864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77865: LD_ADDR_VAR 0 1
77869: PUSH
77870: LD_INT 22
77872: PUSH
77873: LD_OWVAR 2
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PUSH
77882: LD_INT 30
77884: PUSH
77885: LD_INT 29
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PPUSH
77896: CALL_OW 69
77900: ST_TO_ADDR
// if not tmp then
77901: LD_VAR 0 1
77905: NOT
77906: IFFALSE 77910
// exit ;
77908: GO 77923
// DestroyUnit ( tmp [ 1 ] ) ;
77910: LD_VAR 0 1
77914: PUSH
77915: LD_INT 1
77917: ARRAY
77918: PPUSH
77919: CALL_OW 65
// end ;
77923: PPOPN 1
77925: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
77926: LD_EXP 66
77930: PUSH
77931: LD_EXP 104
77935: AND
77936: IFFALSE 78065
77938: GO 77940
77940: DISABLE
77941: LD_INT 0
77943: PPUSH
// begin uc_side := 0 ;
77944: LD_ADDR_OWVAR 20
77948: PUSH
77949: LD_INT 0
77951: ST_TO_ADDR
// uc_nation := nation_arabian ;
77952: LD_ADDR_OWVAR 21
77956: PUSH
77957: LD_INT 2
77959: ST_TO_ADDR
// hc_gallery :=  ;
77960: LD_ADDR_OWVAR 33
77964: PUSH
77965: LD_STRING 
77967: ST_TO_ADDR
// hc_name :=  ;
77968: LD_ADDR_OWVAR 26
77972: PUSH
77973: LD_STRING 
77975: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
77976: LD_INT 1
77978: PPUSH
77979: LD_INT 11
77981: PPUSH
77982: LD_INT 10
77984: PPUSH
77985: CALL_OW 380
// un := CreateHuman ;
77989: LD_ADDR_VAR 0 1
77993: PUSH
77994: CALL_OW 44
77998: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77999: LD_VAR 0 1
78003: PPUSH
78004: LD_INT 1
78006: PPUSH
78007: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78011: LD_INT 35
78013: PPUSH
78014: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78018: LD_VAR 0 1
78022: PPUSH
78023: LD_INT 22
78025: PUSH
78026: LD_OWVAR 2
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PPUSH
78035: CALL_OW 69
78039: PPUSH
78040: LD_VAR 0 1
78044: PPUSH
78045: CALL_OW 74
78049: PPUSH
78050: CALL_OW 115
// until IsDead ( un ) ;
78054: LD_VAR 0 1
78058: PPUSH
78059: CALL_OW 301
78063: IFFALSE 78011
// end ;
78065: PPOPN 1
78067: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
78068: LD_EXP 66
78072: PUSH
78073: LD_EXP 106
78077: AND
78078: IFFALSE 78090
78080: GO 78082
78082: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
78083: LD_STRING earthquake(getX(game), 0, 32)
78085: PPUSH
78086: CALL_OW 559
78090: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
78091: LD_EXP 66
78095: PUSH
78096: LD_EXP 107
78100: AND
78101: IFFALSE 78192
78103: GO 78105
78105: DISABLE
78106: LD_INT 0
78108: PPUSH
// begin enable ;
78109: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
78110: LD_ADDR_VAR 0 1
78114: PUSH
78115: LD_INT 22
78117: PUSH
78118: LD_OWVAR 2
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: PUSH
78127: LD_INT 21
78129: PUSH
78130: LD_INT 2
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: LD_INT 33
78139: PUSH
78140: LD_INT 3
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: PUSH
78147: EMPTY
78148: LIST
78149: LIST
78150: LIST
78151: PPUSH
78152: CALL_OW 69
78156: ST_TO_ADDR
// if not tmp then
78157: LD_VAR 0 1
78161: NOT
78162: IFFALSE 78166
// exit ;
78164: GO 78192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78166: LD_VAR 0 1
78170: PUSH
78171: LD_INT 1
78173: PPUSH
78174: LD_VAR 0 1
78178: PPUSH
78179: CALL_OW 12
78183: ARRAY
78184: PPUSH
78185: LD_INT 1
78187: PPUSH
78188: CALL_OW 234
// end ;
78192: PPOPN 1
78194: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
78195: LD_EXP 66
78199: PUSH
78200: LD_EXP 108
78204: AND
78205: IFFALSE 78346
78207: GO 78209
78209: DISABLE
78210: LD_INT 0
78212: PPUSH
78213: PPUSH
78214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78215: LD_ADDR_VAR 0 3
78219: PUSH
78220: LD_INT 22
78222: PUSH
78223: LD_OWVAR 2
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: PUSH
78232: LD_INT 25
78234: PUSH
78235: LD_INT 1
78237: PUSH
78238: EMPTY
78239: LIST
78240: LIST
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PPUSH
78246: CALL_OW 69
78250: ST_TO_ADDR
// if not tmp then
78251: LD_VAR 0 3
78255: NOT
78256: IFFALSE 78260
// exit ;
78258: GO 78346
// un := tmp [ rand ( 1 , tmp ) ] ;
78260: LD_ADDR_VAR 0 2
78264: PUSH
78265: LD_VAR 0 3
78269: PUSH
78270: LD_INT 1
78272: PPUSH
78273: LD_VAR 0 3
78277: PPUSH
78278: CALL_OW 12
78282: ARRAY
78283: ST_TO_ADDR
// if Crawls ( un ) then
78284: LD_VAR 0 2
78288: PPUSH
78289: CALL_OW 318
78293: IFFALSE 78304
// ComWalk ( un ) ;
78295: LD_VAR 0 2
78299: PPUSH
78300: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78304: LD_VAR 0 2
78308: PPUSH
78309: LD_INT 9
78311: PPUSH
78312: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78316: LD_INT 28
78318: PPUSH
78319: LD_OWVAR 2
78323: PPUSH
78324: LD_INT 2
78326: PPUSH
78327: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78331: LD_INT 29
78333: PPUSH
78334: LD_OWVAR 2
78338: PPUSH
78339: LD_INT 2
78341: PPUSH
78342: CALL_OW 322
// end ;
78346: PPOPN 3
78348: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78349: LD_EXP 66
78353: PUSH
78354: LD_EXP 109
78358: AND
78359: IFFALSE 78470
78361: GO 78363
78363: DISABLE
78364: LD_INT 0
78366: PPUSH
78367: PPUSH
78368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78369: LD_ADDR_VAR 0 3
78373: PUSH
78374: LD_INT 22
78376: PUSH
78377: LD_OWVAR 2
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: LD_INT 25
78388: PUSH
78389: LD_INT 1
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: PPUSH
78400: CALL_OW 69
78404: ST_TO_ADDR
// if not tmp then
78405: LD_VAR 0 3
78409: NOT
78410: IFFALSE 78414
// exit ;
78412: GO 78470
// un := tmp [ rand ( 1 , tmp ) ] ;
78414: LD_ADDR_VAR 0 2
78418: PUSH
78419: LD_VAR 0 3
78423: PUSH
78424: LD_INT 1
78426: PPUSH
78427: LD_VAR 0 3
78431: PPUSH
78432: CALL_OW 12
78436: ARRAY
78437: ST_TO_ADDR
// if Crawls ( un ) then
78438: LD_VAR 0 2
78442: PPUSH
78443: CALL_OW 318
78447: IFFALSE 78458
// ComWalk ( un ) ;
78449: LD_VAR 0 2
78453: PPUSH
78454: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78458: LD_VAR 0 2
78462: PPUSH
78463: LD_INT 8
78465: PPUSH
78466: CALL_OW 336
// end ;
78470: PPOPN 3
78472: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78473: LD_EXP 66
78477: PUSH
78478: LD_EXP 110
78482: AND
78483: IFFALSE 78627
78485: GO 78487
78487: DISABLE
78488: LD_INT 0
78490: PPUSH
78491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78492: LD_ADDR_VAR 0 2
78496: PUSH
78497: LD_INT 22
78499: PUSH
78500: LD_OWVAR 2
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: PUSH
78509: LD_INT 21
78511: PUSH
78512: LD_INT 2
78514: PUSH
78515: EMPTY
78516: LIST
78517: LIST
78518: PUSH
78519: LD_INT 2
78521: PUSH
78522: LD_INT 34
78524: PUSH
78525: LD_INT 12
78527: PUSH
78528: EMPTY
78529: LIST
78530: LIST
78531: PUSH
78532: LD_INT 34
78534: PUSH
78535: LD_INT 51
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: PUSH
78542: LD_INT 34
78544: PUSH
78545: LD_INT 32
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: PUSH
78552: EMPTY
78553: LIST
78554: LIST
78555: LIST
78556: LIST
78557: PUSH
78558: EMPTY
78559: LIST
78560: LIST
78561: LIST
78562: PPUSH
78563: CALL_OW 69
78567: ST_TO_ADDR
// if not tmp then
78568: LD_VAR 0 2
78572: NOT
78573: IFFALSE 78577
// exit ;
78575: GO 78627
// for i in tmp do
78577: LD_ADDR_VAR 0 1
78581: PUSH
78582: LD_VAR 0 2
78586: PUSH
78587: FOR_IN
78588: IFFALSE 78625
// if GetCargo ( i , mat_artifact ) = 0 then
78590: LD_VAR 0 1
78594: PPUSH
78595: LD_INT 4
78597: PPUSH
78598: CALL_OW 289
78602: PUSH
78603: LD_INT 0
78605: EQUAL
78606: IFFALSE 78623
// SetCargo ( i , mat_siberit , 100 ) ;
78608: LD_VAR 0 1
78612: PPUSH
78613: LD_INT 3
78615: PPUSH
78616: LD_INT 100
78618: PPUSH
78619: CALL_OW 290
78623: GO 78587
78625: POP
78626: POP
// end ;
78627: PPOPN 2
78629: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
78630: LD_EXP 66
78634: PUSH
78635: LD_EXP 111
78639: AND
78640: IFFALSE 78823
78642: GO 78644
78644: DISABLE
78645: LD_INT 0
78647: PPUSH
78648: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78649: LD_ADDR_VAR 0 2
78653: PUSH
78654: LD_INT 22
78656: PUSH
78657: LD_OWVAR 2
78661: PUSH
78662: EMPTY
78663: LIST
78664: LIST
78665: PPUSH
78666: CALL_OW 69
78670: ST_TO_ADDR
// if not tmp then
78671: LD_VAR 0 2
78675: NOT
78676: IFFALSE 78680
// exit ;
78678: GO 78823
// for i := 1 to 2 do
78680: LD_ADDR_VAR 0 1
78684: PUSH
78685: DOUBLE
78686: LD_INT 1
78688: DEC
78689: ST_TO_ADDR
78690: LD_INT 2
78692: PUSH
78693: FOR_TO
78694: IFFALSE 78821
// begin uc_side := your_side ;
78696: LD_ADDR_OWVAR 20
78700: PUSH
78701: LD_OWVAR 2
78705: ST_TO_ADDR
// uc_nation := nation_american ;
78706: LD_ADDR_OWVAR 21
78710: PUSH
78711: LD_INT 1
78713: ST_TO_ADDR
// vc_chassis := us_morphling ;
78714: LD_ADDR_OWVAR 37
78718: PUSH
78719: LD_INT 5
78721: ST_TO_ADDR
// vc_engine := engine_siberite ;
78722: LD_ADDR_OWVAR 39
78726: PUSH
78727: LD_INT 3
78729: ST_TO_ADDR
// vc_control := control_computer ;
78730: LD_ADDR_OWVAR 38
78734: PUSH
78735: LD_INT 3
78737: ST_TO_ADDR
// vc_weapon := us_double_laser ;
78738: LD_ADDR_OWVAR 40
78742: PUSH
78743: LD_INT 10
78745: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
78746: LD_VAR 0 2
78750: PUSH
78751: LD_INT 1
78753: ARRAY
78754: PPUSH
78755: CALL_OW 310
78759: NOT
78760: IFFALSE 78807
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
78762: CALL_OW 45
78766: PPUSH
78767: LD_VAR 0 2
78771: PUSH
78772: LD_INT 1
78774: ARRAY
78775: PPUSH
78776: CALL_OW 250
78780: PPUSH
78781: LD_VAR 0 2
78785: PUSH
78786: LD_INT 1
78788: ARRAY
78789: PPUSH
78790: CALL_OW 251
78794: PPUSH
78795: LD_INT 12
78797: PPUSH
78798: LD_INT 1
78800: PPUSH
78801: CALL_OW 50
78805: GO 78819
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
78807: CALL_OW 45
78811: PPUSH
78812: LD_INT 1
78814: PPUSH
78815: CALL_OW 51
// end ;
78819: GO 78693
78821: POP
78822: POP
// end ;
78823: PPOPN 2
78825: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
78826: LD_EXP 66
78830: PUSH
78831: LD_EXP 112
78835: AND
78836: IFFALSE 79058
78838: GO 78840
78840: DISABLE
78841: LD_INT 0
78843: PPUSH
78844: PPUSH
78845: PPUSH
78846: PPUSH
78847: PPUSH
78848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78849: LD_ADDR_VAR 0 6
78853: PUSH
78854: LD_INT 22
78856: PUSH
78857: LD_OWVAR 2
78861: PUSH
78862: EMPTY
78863: LIST
78864: LIST
78865: PUSH
78866: LD_INT 21
78868: PUSH
78869: LD_INT 1
78871: PUSH
78872: EMPTY
78873: LIST
78874: LIST
78875: PUSH
78876: LD_INT 3
78878: PUSH
78879: LD_INT 23
78881: PUSH
78882: LD_INT 0
78884: PUSH
78885: EMPTY
78886: LIST
78887: LIST
78888: PUSH
78889: EMPTY
78890: LIST
78891: LIST
78892: PUSH
78893: EMPTY
78894: LIST
78895: LIST
78896: LIST
78897: PPUSH
78898: CALL_OW 69
78902: ST_TO_ADDR
// if not tmp then
78903: LD_VAR 0 6
78907: NOT
78908: IFFALSE 78912
// exit ;
78910: GO 79058
// s1 := rand ( 1 , 4 ) ;
78912: LD_ADDR_VAR 0 2
78916: PUSH
78917: LD_INT 1
78919: PPUSH
78920: LD_INT 4
78922: PPUSH
78923: CALL_OW 12
78927: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
78928: LD_ADDR_VAR 0 4
78932: PUSH
78933: LD_VAR 0 6
78937: PUSH
78938: LD_INT 1
78940: ARRAY
78941: PPUSH
78942: LD_VAR 0 2
78946: PPUSH
78947: CALL_OW 259
78951: ST_TO_ADDR
// if s1 = 1 then
78952: LD_VAR 0 2
78956: PUSH
78957: LD_INT 1
78959: EQUAL
78960: IFFALSE 78980
// s2 := rand ( 2 , 4 ) else
78962: LD_ADDR_VAR 0 3
78966: PUSH
78967: LD_INT 2
78969: PPUSH
78970: LD_INT 4
78972: PPUSH
78973: CALL_OW 12
78977: ST_TO_ADDR
78978: GO 78988
// s2 := 1 ;
78980: LD_ADDR_VAR 0 3
78984: PUSH
78985: LD_INT 1
78987: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
78988: LD_ADDR_VAR 0 5
78992: PUSH
78993: LD_VAR 0 6
78997: PUSH
78998: LD_INT 1
79000: ARRAY
79001: PPUSH
79002: LD_VAR 0 3
79006: PPUSH
79007: CALL_OW 259
79011: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
79012: LD_VAR 0 6
79016: PUSH
79017: LD_INT 1
79019: ARRAY
79020: PPUSH
79021: LD_VAR 0 2
79025: PPUSH
79026: LD_VAR 0 5
79030: PPUSH
79031: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
79035: LD_VAR 0 6
79039: PUSH
79040: LD_INT 1
79042: ARRAY
79043: PPUSH
79044: LD_VAR 0 3
79048: PPUSH
79049: LD_VAR 0 4
79053: PPUSH
79054: CALL_OW 237
// end ;
79058: PPOPN 6
79060: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
79061: LD_EXP 66
79065: PUSH
79066: LD_EXP 113
79070: AND
79071: IFFALSE 79150
79073: GO 79075
79075: DISABLE
79076: LD_INT 0
79078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
79079: LD_ADDR_VAR 0 1
79083: PUSH
79084: LD_INT 22
79086: PUSH
79087: LD_OWVAR 2
79091: PUSH
79092: EMPTY
79093: LIST
79094: LIST
79095: PUSH
79096: LD_INT 30
79098: PUSH
79099: LD_INT 3
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: PPUSH
79110: CALL_OW 69
79114: ST_TO_ADDR
// if not tmp then
79115: LD_VAR 0 1
79119: NOT
79120: IFFALSE 79124
// exit ;
79122: GO 79150
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79124: LD_VAR 0 1
79128: PUSH
79129: LD_INT 1
79131: PPUSH
79132: LD_VAR 0 1
79136: PPUSH
79137: CALL_OW 12
79141: ARRAY
79142: PPUSH
79143: LD_INT 1
79145: PPUSH
79146: CALL_OW 234
// end ;
79150: PPOPN 1
79152: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
79153: LD_EXP 66
79157: PUSH
79158: LD_EXP 114
79162: AND
79163: IFFALSE 79275
79165: GO 79167
79167: DISABLE
79168: LD_INT 0
79170: PPUSH
79171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
79172: LD_ADDR_VAR 0 2
79176: PUSH
79177: LD_INT 22
79179: PUSH
79180: LD_OWVAR 2
79184: PUSH
79185: EMPTY
79186: LIST
79187: LIST
79188: PUSH
79189: LD_INT 2
79191: PUSH
79192: LD_INT 30
79194: PUSH
79195: LD_INT 27
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: PUSH
79202: LD_INT 30
79204: PUSH
79205: LD_INT 26
79207: PUSH
79208: EMPTY
79209: LIST
79210: LIST
79211: PUSH
79212: LD_INT 30
79214: PUSH
79215: LD_INT 28
79217: PUSH
79218: EMPTY
79219: LIST
79220: LIST
79221: PUSH
79222: EMPTY
79223: LIST
79224: LIST
79225: LIST
79226: LIST
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: PPUSH
79232: CALL_OW 69
79236: ST_TO_ADDR
// if not tmp then
79237: LD_VAR 0 2
79241: NOT
79242: IFFALSE 79246
// exit ;
79244: GO 79275
// for i in tmp do
79246: LD_ADDR_VAR 0 1
79250: PUSH
79251: LD_VAR 0 2
79255: PUSH
79256: FOR_IN
79257: IFFALSE 79273
// SetLives ( i , 1 ) ;
79259: LD_VAR 0 1
79263: PPUSH
79264: LD_INT 1
79266: PPUSH
79267: CALL_OW 234
79271: GO 79256
79273: POP
79274: POP
// end ;
79275: PPOPN 2
79277: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79278: LD_EXP 66
79282: PUSH
79283: LD_EXP 115
79287: AND
79288: IFFALSE 79575
79290: GO 79292
79292: DISABLE
79293: LD_INT 0
79295: PPUSH
79296: PPUSH
79297: PPUSH
// begin i := rand ( 1 , 7 ) ;
79298: LD_ADDR_VAR 0 1
79302: PUSH
79303: LD_INT 1
79305: PPUSH
79306: LD_INT 7
79308: PPUSH
79309: CALL_OW 12
79313: ST_TO_ADDR
// case i of 1 :
79314: LD_VAR 0 1
79318: PUSH
79319: LD_INT 1
79321: DOUBLE
79322: EQUAL
79323: IFTRUE 79327
79325: GO 79337
79327: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79328: LD_STRING earthquake(getX(game), 0, 32)
79330: PPUSH
79331: CALL_OW 559
79335: GO 79575
79337: LD_INT 2
79339: DOUBLE
79340: EQUAL
79341: IFTRUE 79345
79343: GO 79359
79345: POP
// begin ToLua ( displayStucuk(); ) ;
79346: LD_STRING displayStucuk();
79348: PPUSH
79349: CALL_OW 559
// ResetFog ;
79353: CALL_OW 335
// end ; 3 :
79357: GO 79575
79359: LD_INT 3
79361: DOUBLE
79362: EQUAL
79363: IFTRUE 79367
79365: GO 79471
79367: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79368: LD_ADDR_VAR 0 2
79372: PUSH
79373: LD_INT 22
79375: PUSH
79376: LD_OWVAR 2
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: PUSH
79385: LD_INT 25
79387: PUSH
79388: LD_INT 1
79390: PUSH
79391: EMPTY
79392: LIST
79393: LIST
79394: PUSH
79395: EMPTY
79396: LIST
79397: LIST
79398: PPUSH
79399: CALL_OW 69
79403: ST_TO_ADDR
// if not tmp then
79404: LD_VAR 0 2
79408: NOT
79409: IFFALSE 79413
// exit ;
79411: GO 79575
// un := tmp [ rand ( 1 , tmp ) ] ;
79413: LD_ADDR_VAR 0 3
79417: PUSH
79418: LD_VAR 0 2
79422: PUSH
79423: LD_INT 1
79425: PPUSH
79426: LD_VAR 0 2
79430: PPUSH
79431: CALL_OW 12
79435: ARRAY
79436: ST_TO_ADDR
// if Crawls ( un ) then
79437: LD_VAR 0 3
79441: PPUSH
79442: CALL_OW 318
79446: IFFALSE 79457
// ComWalk ( un ) ;
79448: LD_VAR 0 3
79452: PPUSH
79453: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79457: LD_VAR 0 3
79461: PPUSH
79462: LD_INT 8
79464: PPUSH
79465: CALL_OW 336
// end ; 4 :
79469: GO 79575
79471: LD_INT 4
79473: DOUBLE
79474: EQUAL
79475: IFTRUE 79479
79477: GO 79553
79479: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79480: LD_ADDR_VAR 0 2
79484: PUSH
79485: LD_INT 22
79487: PUSH
79488: LD_OWVAR 2
79492: PUSH
79493: EMPTY
79494: LIST
79495: LIST
79496: PUSH
79497: LD_INT 30
79499: PUSH
79500: LD_INT 29
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: PPUSH
79511: CALL_OW 69
79515: ST_TO_ADDR
// if not tmp then
79516: LD_VAR 0 2
79520: NOT
79521: IFFALSE 79525
// exit ;
79523: GO 79575
// CenterNowOnUnits ( tmp [ 1 ] ) ;
79525: LD_VAR 0 2
79529: PUSH
79530: LD_INT 1
79532: ARRAY
79533: PPUSH
79534: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
79538: LD_VAR 0 2
79542: PUSH
79543: LD_INT 1
79545: ARRAY
79546: PPUSH
79547: CALL_OW 65
// end ; 5 .. 7 :
79551: GO 79575
79553: LD_INT 5
79555: DOUBLE
79556: GREATEREQUAL
79557: IFFALSE 79565
79559: LD_INT 7
79561: DOUBLE
79562: LESSEQUAL
79563: IFTRUE 79567
79565: GO 79574
79567: POP
// StreamSibBomb ; end ;
79568: CALL 75812 0 0
79572: GO 79575
79574: POP
// end ;
79575: PPOPN 3
79577: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79578: LD_EXP 66
79582: PUSH
79583: LD_EXP 116
79587: AND
79588: IFFALSE 79744
79590: GO 79592
79592: DISABLE
79593: LD_INT 0
79595: PPUSH
79596: PPUSH
79597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79598: LD_ADDR_VAR 0 2
79602: PUSH
79603: LD_INT 81
79605: PUSH
79606: LD_OWVAR 2
79610: PUSH
79611: EMPTY
79612: LIST
79613: LIST
79614: PUSH
79615: LD_INT 2
79617: PUSH
79618: LD_INT 21
79620: PUSH
79621: LD_INT 1
79623: PUSH
79624: EMPTY
79625: LIST
79626: LIST
79627: PUSH
79628: LD_INT 21
79630: PUSH
79631: LD_INT 2
79633: PUSH
79634: EMPTY
79635: LIST
79636: LIST
79637: PUSH
79638: EMPTY
79639: LIST
79640: LIST
79641: LIST
79642: PUSH
79643: EMPTY
79644: LIST
79645: LIST
79646: PPUSH
79647: CALL_OW 69
79651: ST_TO_ADDR
// if not tmp then
79652: LD_VAR 0 2
79656: NOT
79657: IFFALSE 79661
// exit ;
79659: GO 79744
// p := 0 ;
79661: LD_ADDR_VAR 0 3
79665: PUSH
79666: LD_INT 0
79668: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79669: LD_INT 35
79671: PPUSH
79672: CALL_OW 67
// p := p + 1 ;
79676: LD_ADDR_VAR 0 3
79680: PUSH
79681: LD_VAR 0 3
79685: PUSH
79686: LD_INT 1
79688: PLUS
79689: ST_TO_ADDR
// for i in tmp do
79690: LD_ADDR_VAR 0 1
79694: PUSH
79695: LD_VAR 0 2
79699: PUSH
79700: FOR_IN
79701: IFFALSE 79732
// if GetLives ( i ) < 1000 then
79703: LD_VAR 0 1
79707: PPUSH
79708: CALL_OW 256
79712: PUSH
79713: LD_INT 1000
79715: LESS
79716: IFFALSE 79730
// SetLives ( i , 1000 ) ;
79718: LD_VAR 0 1
79722: PPUSH
79723: LD_INT 1000
79725: PPUSH
79726: CALL_OW 234
79730: GO 79700
79732: POP
79733: POP
// until p > 20 ;
79734: LD_VAR 0 3
79738: PUSH
79739: LD_INT 20
79741: GREATER
79742: IFFALSE 79669
// end ;
79744: PPOPN 3
79746: END
// every 0 0$1 trigger StreamModeActive and sTime do
79747: LD_EXP 66
79751: PUSH
79752: LD_EXP 117
79756: AND
79757: IFFALSE 79792
79759: GO 79761
79761: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
79762: LD_INT 28
79764: PPUSH
79765: LD_OWVAR 2
79769: PPUSH
79770: LD_INT 2
79772: PPUSH
79773: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
79777: LD_INT 30
79779: PPUSH
79780: LD_OWVAR 2
79784: PPUSH
79785: LD_INT 2
79787: PPUSH
79788: CALL_OW 322
// end ;
79792: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
79793: LD_EXP 66
79797: PUSH
79798: LD_EXP 118
79802: AND
79803: IFFALSE 79924
79805: GO 79807
79807: DISABLE
79808: LD_INT 0
79810: PPUSH
79811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79812: LD_ADDR_VAR 0 2
79816: PUSH
79817: LD_INT 22
79819: PUSH
79820: LD_OWVAR 2
79824: PUSH
79825: EMPTY
79826: LIST
79827: LIST
79828: PUSH
79829: LD_INT 21
79831: PUSH
79832: LD_INT 1
79834: PUSH
79835: EMPTY
79836: LIST
79837: LIST
79838: PUSH
79839: LD_INT 3
79841: PUSH
79842: LD_INT 23
79844: PUSH
79845: LD_INT 0
79847: PUSH
79848: EMPTY
79849: LIST
79850: LIST
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: LIST
79860: PPUSH
79861: CALL_OW 69
79865: ST_TO_ADDR
// if not tmp then
79866: LD_VAR 0 2
79870: NOT
79871: IFFALSE 79875
// exit ;
79873: GO 79924
// for i in tmp do
79875: LD_ADDR_VAR 0 1
79879: PUSH
79880: LD_VAR 0 2
79884: PUSH
79885: FOR_IN
79886: IFFALSE 79922
// begin if Crawls ( i ) then
79888: LD_VAR 0 1
79892: PPUSH
79893: CALL_OW 318
79897: IFFALSE 79908
// ComWalk ( i ) ;
79899: LD_VAR 0 1
79903: PPUSH
79904: CALL_OW 138
// SetClass ( i , 2 ) ;
79908: LD_VAR 0 1
79912: PPUSH
79913: LD_INT 2
79915: PPUSH
79916: CALL_OW 336
// end ;
79920: GO 79885
79922: POP
79923: POP
// end ;
79924: PPOPN 2
79926: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
79927: LD_EXP 66
79931: PUSH
79932: LD_EXP 119
79936: AND
79937: IFFALSE 80225
79939: GO 79941
79941: DISABLE
79942: LD_INT 0
79944: PPUSH
79945: PPUSH
79946: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
79947: LD_OWVAR 2
79951: PPUSH
79952: LD_INT 9
79954: PPUSH
79955: LD_INT 1
79957: PPUSH
79958: LD_INT 1
79960: PPUSH
79961: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
79965: LD_INT 9
79967: PPUSH
79968: LD_OWVAR 2
79972: PPUSH
79973: CALL_OW 343
// uc_side := 9 ;
79977: LD_ADDR_OWVAR 20
79981: PUSH
79982: LD_INT 9
79984: ST_TO_ADDR
// uc_nation := 2 ;
79985: LD_ADDR_OWVAR 21
79989: PUSH
79990: LD_INT 2
79992: ST_TO_ADDR
// hc_name := Dark Warrior ;
79993: LD_ADDR_OWVAR 26
79997: PUSH
79998: LD_STRING Dark Warrior
80000: ST_TO_ADDR
// hc_gallery :=  ;
80001: LD_ADDR_OWVAR 33
80005: PUSH
80006: LD_STRING 
80008: ST_TO_ADDR
// hc_noskilllimit := true ;
80009: LD_ADDR_OWVAR 76
80013: PUSH
80014: LD_INT 1
80016: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
80017: LD_ADDR_OWVAR 31
80021: PUSH
80022: LD_INT 30
80024: PUSH
80025: LD_INT 30
80027: PUSH
80028: LD_INT 30
80030: PUSH
80031: LD_INT 30
80033: PUSH
80034: EMPTY
80035: LIST
80036: LIST
80037: LIST
80038: LIST
80039: ST_TO_ADDR
// un := CreateHuman ;
80040: LD_ADDR_VAR 0 3
80044: PUSH
80045: CALL_OW 44
80049: ST_TO_ADDR
// hc_noskilllimit := false ;
80050: LD_ADDR_OWVAR 76
80054: PUSH
80055: LD_INT 0
80057: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80058: LD_VAR 0 3
80062: PPUSH
80063: LD_INT 1
80065: PPUSH
80066: CALL_OW 51
// ToLua ( playRanger() ) ;
80070: LD_STRING playRanger()
80072: PPUSH
80073: CALL_OW 559
// p := 0 ;
80077: LD_ADDR_VAR 0 2
80081: PUSH
80082: LD_INT 0
80084: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80085: LD_INT 35
80087: PPUSH
80088: CALL_OW 67
// p := p + 1 ;
80092: LD_ADDR_VAR 0 2
80096: PUSH
80097: LD_VAR 0 2
80101: PUSH
80102: LD_INT 1
80104: PLUS
80105: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
80106: LD_VAR 0 3
80110: PPUSH
80111: CALL_OW 256
80115: PUSH
80116: LD_INT 1000
80118: LESS
80119: IFFALSE 80133
// SetLives ( un , 1000 ) ;
80121: LD_VAR 0 3
80125: PPUSH
80126: LD_INT 1000
80128: PPUSH
80129: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
80133: LD_VAR 0 3
80137: PPUSH
80138: LD_INT 81
80140: PUSH
80141: LD_OWVAR 2
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: PUSH
80150: LD_INT 91
80152: PUSH
80153: LD_VAR 0 3
80157: PUSH
80158: LD_INT 30
80160: PUSH
80161: EMPTY
80162: LIST
80163: LIST
80164: LIST
80165: PUSH
80166: EMPTY
80167: LIST
80168: LIST
80169: PPUSH
80170: CALL_OW 69
80174: PPUSH
80175: LD_VAR 0 3
80179: PPUSH
80180: CALL_OW 74
80184: PPUSH
80185: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
80189: LD_VAR 0 2
80193: PUSH
80194: LD_INT 80
80196: GREATER
80197: PUSH
80198: LD_VAR 0 3
80202: PPUSH
80203: CALL_OW 301
80207: OR
80208: IFFALSE 80085
// if un then
80210: LD_VAR 0 3
80214: IFFALSE 80225
// RemoveUnit ( un ) ;
80216: LD_VAR 0 3
80220: PPUSH
80221: CALL_OW 64
// end ;
80225: PPOPN 3
80227: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
80228: LD_EXP 120
80232: IFFALSE 80348
80234: GO 80236
80236: DISABLE
80237: LD_INT 0
80239: PPUSH
80240: PPUSH
80241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80242: LD_ADDR_VAR 0 2
80246: PUSH
80247: LD_INT 81
80249: PUSH
80250: LD_OWVAR 2
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: PUSH
80259: LD_INT 21
80261: PUSH
80262: LD_INT 1
80264: PUSH
80265: EMPTY
80266: LIST
80267: LIST
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: PPUSH
80273: CALL_OW 69
80277: ST_TO_ADDR
// ToLua ( playComputer() ) ;
80278: LD_STRING playComputer()
80280: PPUSH
80281: CALL_OW 559
// if not tmp then
80285: LD_VAR 0 2
80289: NOT
80290: IFFALSE 80294
// exit ;
80292: GO 80348
// for i in tmp do
80294: LD_ADDR_VAR 0 1
80298: PUSH
80299: LD_VAR 0 2
80303: PUSH
80304: FOR_IN
80305: IFFALSE 80346
// for j := 1 to 4 do
80307: LD_ADDR_VAR 0 3
80311: PUSH
80312: DOUBLE
80313: LD_INT 1
80315: DEC
80316: ST_TO_ADDR
80317: LD_INT 4
80319: PUSH
80320: FOR_TO
80321: IFFALSE 80342
// SetSkill ( i , j , 10 ) ;
80323: LD_VAR 0 1
80327: PPUSH
80328: LD_VAR 0 3
80332: PPUSH
80333: LD_INT 10
80335: PPUSH
80336: CALL_OW 237
80340: GO 80320
80342: POP
80343: POP
80344: GO 80304
80346: POP
80347: POP
// end ;
80348: PPOPN 3
80350: END
// every 0 0$1 trigger s30 do var i , tmp ;
80351: LD_EXP 121
80355: IFFALSE 80424
80357: GO 80359
80359: DISABLE
80360: LD_INT 0
80362: PPUSH
80363: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80364: LD_ADDR_VAR 0 2
80368: PUSH
80369: LD_INT 22
80371: PUSH
80372: LD_OWVAR 2
80376: PUSH
80377: EMPTY
80378: LIST
80379: LIST
80380: PPUSH
80381: CALL_OW 69
80385: ST_TO_ADDR
// if not tmp then
80386: LD_VAR 0 2
80390: NOT
80391: IFFALSE 80395
// exit ;
80393: GO 80424
// for i in tmp do
80395: LD_ADDR_VAR 0 1
80399: PUSH
80400: LD_VAR 0 2
80404: PUSH
80405: FOR_IN
80406: IFFALSE 80422
// SetLives ( i , 300 ) ;
80408: LD_VAR 0 1
80412: PPUSH
80413: LD_INT 300
80415: PPUSH
80416: CALL_OW 234
80420: GO 80405
80422: POP
80423: POP
// end ;
80424: PPOPN 2
80426: END
// every 0 0$1 trigger s60 do var i , tmp ;
80427: LD_EXP 122
80431: IFFALSE 80500
80433: GO 80435
80435: DISABLE
80436: LD_INT 0
80438: PPUSH
80439: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80440: LD_ADDR_VAR 0 2
80444: PUSH
80445: LD_INT 22
80447: PUSH
80448: LD_OWVAR 2
80452: PUSH
80453: EMPTY
80454: LIST
80455: LIST
80456: PPUSH
80457: CALL_OW 69
80461: ST_TO_ADDR
// if not tmp then
80462: LD_VAR 0 2
80466: NOT
80467: IFFALSE 80471
// exit ;
80469: GO 80500
// for i in tmp do
80471: LD_ADDR_VAR 0 1
80475: PUSH
80476: LD_VAR 0 2
80480: PUSH
80481: FOR_IN
80482: IFFALSE 80498
// SetLives ( i , 600 ) ;
80484: LD_VAR 0 1
80488: PPUSH
80489: LD_INT 600
80491: PPUSH
80492: CALL_OW 234
80496: GO 80481
80498: POP
80499: POP
// end ;
80500: PPOPN 2
80502: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
80503: LD_INT 0
80505: PPUSH
// case cmd of 301 :
80506: LD_VAR 0 1
80510: PUSH
80511: LD_INT 301
80513: DOUBLE
80514: EQUAL
80515: IFTRUE 80519
80517: GO 80551
80519: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
80520: LD_VAR 0 6
80524: PPUSH
80525: LD_VAR 0 7
80529: PPUSH
80530: LD_VAR 0 8
80534: PPUSH
80535: LD_VAR 0 4
80539: PPUSH
80540: LD_VAR 0 5
80544: PPUSH
80545: CALL 81752 0 5
80549: GO 80672
80551: LD_INT 302
80553: DOUBLE
80554: EQUAL
80555: IFTRUE 80559
80557: GO 80596
80559: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
80560: LD_VAR 0 6
80564: PPUSH
80565: LD_VAR 0 7
80569: PPUSH
80570: LD_VAR 0 8
80574: PPUSH
80575: LD_VAR 0 9
80579: PPUSH
80580: LD_VAR 0 4
80584: PPUSH
80585: LD_VAR 0 5
80589: PPUSH
80590: CALL 81843 0 6
80594: GO 80672
80596: LD_INT 303
80598: DOUBLE
80599: EQUAL
80600: IFTRUE 80604
80602: GO 80641
80604: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
80605: LD_VAR 0 6
80609: PPUSH
80610: LD_VAR 0 7
80614: PPUSH
80615: LD_VAR 0 8
80619: PPUSH
80620: LD_VAR 0 9
80624: PPUSH
80625: LD_VAR 0 4
80629: PPUSH
80630: LD_VAR 0 5
80634: PPUSH
80635: CALL 80677 0 6
80639: GO 80672
80641: LD_INT 304
80643: DOUBLE
80644: EQUAL
80645: IFTRUE 80649
80647: GO 80671
80649: POP
// hHackTeleport ( unit , x , y ) ; end ;
80650: LD_VAR 0 2
80654: PPUSH
80655: LD_VAR 0 4
80659: PPUSH
80660: LD_VAR 0 5
80664: PPUSH
80665: CALL 82436 0 3
80669: GO 80672
80671: POP
// end ;
80672: LD_VAR 0 12
80676: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
80677: LD_INT 0
80679: PPUSH
80680: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
80681: LD_VAR 0 1
80685: PUSH
80686: LD_INT 1
80688: LESS
80689: PUSH
80690: LD_VAR 0 1
80694: PUSH
80695: LD_INT 3
80697: GREATER
80698: OR
80699: PUSH
80700: LD_VAR 0 5
80704: PPUSH
80705: LD_VAR 0 6
80709: PPUSH
80710: CALL_OW 428
80714: OR
80715: IFFALSE 80719
// exit ;
80717: GO 81439
// uc_side := your_side ;
80719: LD_ADDR_OWVAR 20
80723: PUSH
80724: LD_OWVAR 2
80728: ST_TO_ADDR
// uc_nation := nation ;
80729: LD_ADDR_OWVAR 21
80733: PUSH
80734: LD_VAR 0 1
80738: ST_TO_ADDR
// bc_level = 1 ;
80739: LD_ADDR_OWVAR 43
80743: PUSH
80744: LD_INT 1
80746: ST_TO_ADDR
// case btype of 1 :
80747: LD_VAR 0 2
80751: PUSH
80752: LD_INT 1
80754: DOUBLE
80755: EQUAL
80756: IFTRUE 80760
80758: GO 80771
80760: POP
// bc_type := b_depot ; 2 :
80761: LD_ADDR_OWVAR 42
80765: PUSH
80766: LD_INT 0
80768: ST_TO_ADDR
80769: GO 81383
80771: LD_INT 2
80773: DOUBLE
80774: EQUAL
80775: IFTRUE 80779
80777: GO 80790
80779: POP
// bc_type := b_warehouse ; 3 :
80780: LD_ADDR_OWVAR 42
80784: PUSH
80785: LD_INT 1
80787: ST_TO_ADDR
80788: GO 81383
80790: LD_INT 3
80792: DOUBLE
80793: EQUAL
80794: IFTRUE 80798
80796: GO 80809
80798: POP
// bc_type := b_lab ; 4 .. 9 :
80799: LD_ADDR_OWVAR 42
80803: PUSH
80804: LD_INT 6
80806: ST_TO_ADDR
80807: GO 81383
80809: LD_INT 4
80811: DOUBLE
80812: GREATEREQUAL
80813: IFFALSE 80821
80815: LD_INT 9
80817: DOUBLE
80818: LESSEQUAL
80819: IFTRUE 80823
80821: GO 80875
80823: POP
// begin bc_type := b_lab_half ;
80824: LD_ADDR_OWVAR 42
80828: PUSH
80829: LD_INT 7
80831: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
80832: LD_ADDR_OWVAR 44
80836: PUSH
80837: LD_INT 10
80839: PUSH
80840: LD_INT 11
80842: PUSH
80843: LD_INT 12
80845: PUSH
80846: LD_INT 15
80848: PUSH
80849: LD_INT 14
80851: PUSH
80852: LD_INT 13
80854: PUSH
80855: EMPTY
80856: LIST
80857: LIST
80858: LIST
80859: LIST
80860: LIST
80861: LIST
80862: PUSH
80863: LD_VAR 0 2
80867: PUSH
80868: LD_INT 3
80870: MINUS
80871: ARRAY
80872: ST_TO_ADDR
// end ; 10 .. 13 :
80873: GO 81383
80875: LD_INT 10
80877: DOUBLE
80878: GREATEREQUAL
80879: IFFALSE 80887
80881: LD_INT 13
80883: DOUBLE
80884: LESSEQUAL
80885: IFTRUE 80889
80887: GO 80966
80889: POP
// begin bc_type := b_lab_full ;
80890: LD_ADDR_OWVAR 42
80894: PUSH
80895: LD_INT 8
80897: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
80898: LD_ADDR_OWVAR 44
80902: PUSH
80903: LD_INT 10
80905: PUSH
80906: LD_INT 12
80908: PUSH
80909: LD_INT 14
80911: PUSH
80912: LD_INT 13
80914: PUSH
80915: EMPTY
80916: LIST
80917: LIST
80918: LIST
80919: LIST
80920: PUSH
80921: LD_VAR 0 2
80925: PUSH
80926: LD_INT 9
80928: MINUS
80929: ARRAY
80930: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
80931: LD_ADDR_OWVAR 45
80935: PUSH
80936: LD_INT 11
80938: PUSH
80939: LD_INT 15
80941: PUSH
80942: LD_INT 12
80944: PUSH
80945: LD_INT 15
80947: PUSH
80948: EMPTY
80949: LIST
80950: LIST
80951: LIST
80952: LIST
80953: PUSH
80954: LD_VAR 0 2
80958: PUSH
80959: LD_INT 9
80961: MINUS
80962: ARRAY
80963: ST_TO_ADDR
// end ; 14 :
80964: GO 81383
80966: LD_INT 14
80968: DOUBLE
80969: EQUAL
80970: IFTRUE 80974
80972: GO 80985
80974: POP
// bc_type := b_workshop ; 15 :
80975: LD_ADDR_OWVAR 42
80979: PUSH
80980: LD_INT 2
80982: ST_TO_ADDR
80983: GO 81383
80985: LD_INT 15
80987: DOUBLE
80988: EQUAL
80989: IFTRUE 80993
80991: GO 81004
80993: POP
// bc_type := b_factory ; 16 :
80994: LD_ADDR_OWVAR 42
80998: PUSH
80999: LD_INT 3
81001: ST_TO_ADDR
81002: GO 81383
81004: LD_INT 16
81006: DOUBLE
81007: EQUAL
81008: IFTRUE 81012
81010: GO 81023
81012: POP
// bc_type := b_ext_gun ; 17 :
81013: LD_ADDR_OWVAR 42
81017: PUSH
81018: LD_INT 17
81020: ST_TO_ADDR
81021: GO 81383
81023: LD_INT 17
81025: DOUBLE
81026: EQUAL
81027: IFTRUE 81031
81029: GO 81059
81031: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
81032: LD_ADDR_OWVAR 42
81036: PUSH
81037: LD_INT 19
81039: PUSH
81040: LD_INT 23
81042: PUSH
81043: LD_INT 19
81045: PUSH
81046: EMPTY
81047: LIST
81048: LIST
81049: LIST
81050: PUSH
81051: LD_VAR 0 1
81055: ARRAY
81056: ST_TO_ADDR
81057: GO 81383
81059: LD_INT 18
81061: DOUBLE
81062: EQUAL
81063: IFTRUE 81067
81065: GO 81078
81067: POP
// bc_type := b_ext_radar ; 19 :
81068: LD_ADDR_OWVAR 42
81072: PUSH
81073: LD_INT 20
81075: ST_TO_ADDR
81076: GO 81383
81078: LD_INT 19
81080: DOUBLE
81081: EQUAL
81082: IFTRUE 81086
81084: GO 81097
81086: POP
// bc_type := b_ext_radio ; 20 :
81087: LD_ADDR_OWVAR 42
81091: PUSH
81092: LD_INT 22
81094: ST_TO_ADDR
81095: GO 81383
81097: LD_INT 20
81099: DOUBLE
81100: EQUAL
81101: IFTRUE 81105
81103: GO 81116
81105: POP
// bc_type := b_ext_siberium ; 21 :
81106: LD_ADDR_OWVAR 42
81110: PUSH
81111: LD_INT 21
81113: ST_TO_ADDR
81114: GO 81383
81116: LD_INT 21
81118: DOUBLE
81119: EQUAL
81120: IFTRUE 81124
81122: GO 81135
81124: POP
// bc_type := b_ext_computer ; 22 :
81125: LD_ADDR_OWVAR 42
81129: PUSH
81130: LD_INT 24
81132: ST_TO_ADDR
81133: GO 81383
81135: LD_INT 22
81137: DOUBLE
81138: EQUAL
81139: IFTRUE 81143
81141: GO 81154
81143: POP
// bc_type := b_ext_track ; 23 :
81144: LD_ADDR_OWVAR 42
81148: PUSH
81149: LD_INT 16
81151: ST_TO_ADDR
81152: GO 81383
81154: LD_INT 23
81156: DOUBLE
81157: EQUAL
81158: IFTRUE 81162
81160: GO 81173
81162: POP
// bc_type := b_ext_laser ; 24 :
81163: LD_ADDR_OWVAR 42
81167: PUSH
81168: LD_INT 25
81170: ST_TO_ADDR
81171: GO 81383
81173: LD_INT 24
81175: DOUBLE
81176: EQUAL
81177: IFTRUE 81181
81179: GO 81192
81181: POP
// bc_type := b_control_tower ; 25 :
81182: LD_ADDR_OWVAR 42
81186: PUSH
81187: LD_INT 36
81189: ST_TO_ADDR
81190: GO 81383
81192: LD_INT 25
81194: DOUBLE
81195: EQUAL
81196: IFTRUE 81200
81198: GO 81211
81200: POP
// bc_type := b_breastwork ; 26 :
81201: LD_ADDR_OWVAR 42
81205: PUSH
81206: LD_INT 31
81208: ST_TO_ADDR
81209: GO 81383
81211: LD_INT 26
81213: DOUBLE
81214: EQUAL
81215: IFTRUE 81219
81217: GO 81230
81219: POP
// bc_type := b_bunker ; 27 :
81220: LD_ADDR_OWVAR 42
81224: PUSH
81225: LD_INT 32
81227: ST_TO_ADDR
81228: GO 81383
81230: LD_INT 27
81232: DOUBLE
81233: EQUAL
81234: IFTRUE 81238
81236: GO 81249
81238: POP
// bc_type := b_turret ; 28 :
81239: LD_ADDR_OWVAR 42
81243: PUSH
81244: LD_INT 33
81246: ST_TO_ADDR
81247: GO 81383
81249: LD_INT 28
81251: DOUBLE
81252: EQUAL
81253: IFTRUE 81257
81255: GO 81268
81257: POP
// bc_type := b_armoury ; 29 :
81258: LD_ADDR_OWVAR 42
81262: PUSH
81263: LD_INT 4
81265: ST_TO_ADDR
81266: GO 81383
81268: LD_INT 29
81270: DOUBLE
81271: EQUAL
81272: IFTRUE 81276
81274: GO 81287
81276: POP
// bc_type := b_barracks ; 30 :
81277: LD_ADDR_OWVAR 42
81281: PUSH
81282: LD_INT 5
81284: ST_TO_ADDR
81285: GO 81383
81287: LD_INT 30
81289: DOUBLE
81290: EQUAL
81291: IFTRUE 81295
81293: GO 81306
81295: POP
// bc_type := b_solar_power ; 31 :
81296: LD_ADDR_OWVAR 42
81300: PUSH
81301: LD_INT 27
81303: ST_TO_ADDR
81304: GO 81383
81306: LD_INT 31
81308: DOUBLE
81309: EQUAL
81310: IFTRUE 81314
81312: GO 81325
81314: POP
// bc_type := b_oil_power ; 32 :
81315: LD_ADDR_OWVAR 42
81319: PUSH
81320: LD_INT 26
81322: ST_TO_ADDR
81323: GO 81383
81325: LD_INT 32
81327: DOUBLE
81328: EQUAL
81329: IFTRUE 81333
81331: GO 81344
81333: POP
// bc_type := b_siberite_power ; 33 :
81334: LD_ADDR_OWVAR 42
81338: PUSH
81339: LD_INT 28
81341: ST_TO_ADDR
81342: GO 81383
81344: LD_INT 33
81346: DOUBLE
81347: EQUAL
81348: IFTRUE 81352
81350: GO 81363
81352: POP
// bc_type := b_oil_mine ; 34 :
81353: LD_ADDR_OWVAR 42
81357: PUSH
81358: LD_INT 29
81360: ST_TO_ADDR
81361: GO 81383
81363: LD_INT 34
81365: DOUBLE
81366: EQUAL
81367: IFTRUE 81371
81369: GO 81382
81371: POP
// bc_type := b_siberite_mine ; end ;
81372: LD_ADDR_OWVAR 42
81376: PUSH
81377: LD_INT 30
81379: ST_TO_ADDR
81380: GO 81383
81382: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
81383: LD_ADDR_VAR 0 8
81387: PUSH
81388: LD_VAR 0 5
81392: PPUSH
81393: LD_VAR 0 6
81397: PPUSH
81398: LD_VAR 0 3
81402: PPUSH
81403: CALL_OW 47
81407: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
81408: LD_OWVAR 42
81412: PUSH
81413: LD_INT 32
81415: PUSH
81416: LD_INT 33
81418: PUSH
81419: EMPTY
81420: LIST
81421: LIST
81422: IN
81423: IFFALSE 81439
// PlaceWeaponTurret ( b , weapon ) ;
81425: LD_VAR 0 8
81429: PPUSH
81430: LD_VAR 0 4
81434: PPUSH
81435: CALL_OW 431
// end ;
81439: LD_VAR 0 7
81443: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
81444: LD_INT 0
81446: PPUSH
81447: PPUSH
81448: PPUSH
81449: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81450: LD_ADDR_VAR 0 4
81454: PUSH
81455: LD_INT 22
81457: PUSH
81458: LD_OWVAR 2
81462: PUSH
81463: EMPTY
81464: LIST
81465: LIST
81466: PUSH
81467: LD_INT 2
81469: PUSH
81470: LD_INT 30
81472: PUSH
81473: LD_INT 0
81475: PUSH
81476: EMPTY
81477: LIST
81478: LIST
81479: PUSH
81480: LD_INT 30
81482: PUSH
81483: LD_INT 1
81485: PUSH
81486: EMPTY
81487: LIST
81488: LIST
81489: PUSH
81490: EMPTY
81491: LIST
81492: LIST
81493: LIST
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: PPUSH
81499: CALL_OW 69
81503: ST_TO_ADDR
// if not tmp then
81504: LD_VAR 0 4
81508: NOT
81509: IFFALSE 81513
// exit ;
81511: GO 81572
// for i in tmp do
81513: LD_ADDR_VAR 0 2
81517: PUSH
81518: LD_VAR 0 4
81522: PUSH
81523: FOR_IN
81524: IFFALSE 81570
// for j = 1 to 3 do
81526: LD_ADDR_VAR 0 3
81530: PUSH
81531: DOUBLE
81532: LD_INT 1
81534: DEC
81535: ST_TO_ADDR
81536: LD_INT 3
81538: PUSH
81539: FOR_TO
81540: IFFALSE 81566
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
81542: LD_VAR 0 2
81546: PPUSH
81547: CALL_OW 274
81551: PPUSH
81552: LD_VAR 0 3
81556: PPUSH
81557: LD_INT 99999
81559: PPUSH
81560: CALL_OW 277
81564: GO 81539
81566: POP
81567: POP
81568: GO 81523
81570: POP
81571: POP
// end ;
81572: LD_VAR 0 1
81576: RET
// export function hHackSetLevel10 ; var i , j ; begin
81577: LD_INT 0
81579: PPUSH
81580: PPUSH
81581: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81582: LD_ADDR_VAR 0 2
81586: PUSH
81587: LD_INT 21
81589: PUSH
81590: LD_INT 1
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PPUSH
81597: CALL_OW 69
81601: PUSH
81602: FOR_IN
81603: IFFALSE 81655
// if IsSelected ( i ) then
81605: LD_VAR 0 2
81609: PPUSH
81610: CALL_OW 306
81614: IFFALSE 81653
// begin for j := 1 to 4 do
81616: LD_ADDR_VAR 0 3
81620: PUSH
81621: DOUBLE
81622: LD_INT 1
81624: DEC
81625: ST_TO_ADDR
81626: LD_INT 4
81628: PUSH
81629: FOR_TO
81630: IFFALSE 81651
// SetSkill ( i , j , 10 ) ;
81632: LD_VAR 0 2
81636: PPUSH
81637: LD_VAR 0 3
81641: PPUSH
81642: LD_INT 10
81644: PPUSH
81645: CALL_OW 237
81649: GO 81629
81651: POP
81652: POP
// end ;
81653: GO 81602
81655: POP
81656: POP
// end ;
81657: LD_VAR 0 1
81661: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
81662: LD_INT 0
81664: PPUSH
81665: PPUSH
81666: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
81667: LD_ADDR_VAR 0 2
81671: PUSH
81672: LD_INT 22
81674: PUSH
81675: LD_OWVAR 2
81679: PUSH
81680: EMPTY
81681: LIST
81682: LIST
81683: PUSH
81684: LD_INT 21
81686: PUSH
81687: LD_INT 1
81689: PUSH
81690: EMPTY
81691: LIST
81692: LIST
81693: PUSH
81694: EMPTY
81695: LIST
81696: LIST
81697: PPUSH
81698: CALL_OW 69
81702: PUSH
81703: FOR_IN
81704: IFFALSE 81745
// begin for j := 1 to 4 do
81706: LD_ADDR_VAR 0 3
81710: PUSH
81711: DOUBLE
81712: LD_INT 1
81714: DEC
81715: ST_TO_ADDR
81716: LD_INT 4
81718: PUSH
81719: FOR_TO
81720: IFFALSE 81741
// SetSkill ( i , j , 10 ) ;
81722: LD_VAR 0 2
81726: PPUSH
81727: LD_VAR 0 3
81731: PPUSH
81732: LD_INT 10
81734: PPUSH
81735: CALL_OW 237
81739: GO 81719
81741: POP
81742: POP
// end ;
81743: GO 81703
81745: POP
81746: POP
// end ;
81747: LD_VAR 0 1
81751: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
81752: LD_INT 0
81754: PPUSH
// uc_side := your_side ;
81755: LD_ADDR_OWVAR 20
81759: PUSH
81760: LD_OWVAR 2
81764: ST_TO_ADDR
// uc_nation := nation ;
81765: LD_ADDR_OWVAR 21
81769: PUSH
81770: LD_VAR 0 1
81774: ST_TO_ADDR
// InitHc ;
81775: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
81779: LD_INT 0
81781: PPUSH
81782: LD_VAR 0 2
81786: PPUSH
81787: LD_VAR 0 3
81791: PPUSH
81792: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
81796: LD_VAR 0 4
81800: PPUSH
81801: LD_VAR 0 5
81805: PPUSH
81806: CALL_OW 428
81810: PUSH
81811: LD_INT 0
81813: EQUAL
81814: IFFALSE 81838
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
81816: CALL_OW 44
81820: PPUSH
81821: LD_VAR 0 4
81825: PPUSH
81826: LD_VAR 0 5
81830: PPUSH
81831: LD_INT 1
81833: PPUSH
81834: CALL_OW 48
// end ;
81838: LD_VAR 0 6
81842: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
81843: LD_INT 0
81845: PPUSH
81846: PPUSH
// uc_side := your_side ;
81847: LD_ADDR_OWVAR 20
81851: PUSH
81852: LD_OWVAR 2
81856: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
81857: LD_VAR 0 1
81861: PUSH
81862: LD_INT 1
81864: PUSH
81865: LD_INT 2
81867: PUSH
81868: LD_INT 3
81870: PUSH
81871: LD_INT 4
81873: PUSH
81874: LD_INT 5
81876: PUSH
81877: EMPTY
81878: LIST
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: IN
81884: IFFALSE 81896
// uc_nation := nation_american else
81886: LD_ADDR_OWVAR 21
81890: PUSH
81891: LD_INT 1
81893: ST_TO_ADDR
81894: GO 81939
// if chassis in [ 11 , 12 , 13 , 14 ] then
81896: LD_VAR 0 1
81900: PUSH
81901: LD_INT 11
81903: PUSH
81904: LD_INT 12
81906: PUSH
81907: LD_INT 13
81909: PUSH
81910: LD_INT 14
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: LIST
81917: LIST
81918: IN
81919: IFFALSE 81931
// uc_nation := nation_arabian else
81921: LD_ADDR_OWVAR 21
81925: PUSH
81926: LD_INT 2
81928: ST_TO_ADDR
81929: GO 81939
// uc_nation := nation_russian ;
81931: LD_ADDR_OWVAR 21
81935: PUSH
81936: LD_INT 3
81938: ST_TO_ADDR
// vc_chassis := chassis ;
81939: LD_ADDR_OWVAR 37
81943: PUSH
81944: LD_VAR 0 1
81948: ST_TO_ADDR
// vc_engine := engine ;
81949: LD_ADDR_OWVAR 39
81953: PUSH
81954: LD_VAR 0 2
81958: ST_TO_ADDR
// vc_control := control ;
81959: LD_ADDR_OWVAR 38
81963: PUSH
81964: LD_VAR 0 3
81968: ST_TO_ADDR
// vc_weapon := weapon ;
81969: LD_ADDR_OWVAR 40
81973: PUSH
81974: LD_VAR 0 4
81978: ST_TO_ADDR
// un := CreateVehicle ;
81979: LD_ADDR_VAR 0 8
81983: PUSH
81984: CALL_OW 45
81988: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
81989: LD_VAR 0 8
81993: PPUSH
81994: LD_INT 0
81996: PPUSH
81997: LD_INT 5
81999: PPUSH
82000: CALL_OW 12
82004: PPUSH
82005: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
82009: LD_VAR 0 8
82013: PPUSH
82014: LD_VAR 0 5
82018: PPUSH
82019: LD_VAR 0 6
82023: PPUSH
82024: LD_INT 1
82026: PPUSH
82027: CALL_OW 48
// end ;
82031: LD_VAR 0 7
82035: RET
// export hInvincible ; every 1 do
82036: GO 82038
82038: DISABLE
// hInvincible := [ ] ;
82039: LD_ADDR_EXP 123
82043: PUSH
82044: EMPTY
82045: ST_TO_ADDR
82046: END
// every 10 do var i ;
82047: GO 82049
82049: DISABLE
82050: LD_INT 0
82052: PPUSH
// begin enable ;
82053: ENABLE
// if not hInvincible then
82054: LD_EXP 123
82058: NOT
82059: IFFALSE 82063
// exit ;
82061: GO 82107
// for i in hInvincible do
82063: LD_ADDR_VAR 0 1
82067: PUSH
82068: LD_EXP 123
82072: PUSH
82073: FOR_IN
82074: IFFALSE 82105
// if GetLives ( i ) < 1000 then
82076: LD_VAR 0 1
82080: PPUSH
82081: CALL_OW 256
82085: PUSH
82086: LD_INT 1000
82088: LESS
82089: IFFALSE 82103
// SetLives ( i , 1000 ) ;
82091: LD_VAR 0 1
82095: PPUSH
82096: LD_INT 1000
82098: PPUSH
82099: CALL_OW 234
82103: GO 82073
82105: POP
82106: POP
// end ;
82107: PPOPN 1
82109: END
// export function hHackInvincible ; var i ; begin
82110: LD_INT 0
82112: PPUSH
82113: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
82114: LD_ADDR_VAR 0 2
82118: PUSH
82119: LD_INT 2
82121: PUSH
82122: LD_INT 21
82124: PUSH
82125: LD_INT 1
82127: PUSH
82128: EMPTY
82129: LIST
82130: LIST
82131: PUSH
82132: LD_INT 21
82134: PUSH
82135: LD_INT 2
82137: PUSH
82138: EMPTY
82139: LIST
82140: LIST
82141: PUSH
82142: EMPTY
82143: LIST
82144: LIST
82145: LIST
82146: PPUSH
82147: CALL_OW 69
82151: PUSH
82152: FOR_IN
82153: IFFALSE 82214
// if IsSelected ( i ) then
82155: LD_VAR 0 2
82159: PPUSH
82160: CALL_OW 306
82164: IFFALSE 82212
// begin if i in hInvincible then
82166: LD_VAR 0 2
82170: PUSH
82171: LD_EXP 123
82175: IN
82176: IFFALSE 82196
// hInvincible := hInvincible diff i else
82178: LD_ADDR_EXP 123
82182: PUSH
82183: LD_EXP 123
82187: PUSH
82188: LD_VAR 0 2
82192: DIFF
82193: ST_TO_ADDR
82194: GO 82212
// hInvincible := hInvincible union i ;
82196: LD_ADDR_EXP 123
82200: PUSH
82201: LD_EXP 123
82205: PUSH
82206: LD_VAR 0 2
82210: UNION
82211: ST_TO_ADDR
// end ;
82212: GO 82152
82214: POP
82215: POP
// end ;
82216: LD_VAR 0 1
82220: RET
// export function hHackInvisible ; var i , j ; begin
82221: LD_INT 0
82223: PPUSH
82224: PPUSH
82225: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82226: LD_ADDR_VAR 0 2
82230: PUSH
82231: LD_INT 21
82233: PUSH
82234: LD_INT 1
82236: PUSH
82237: EMPTY
82238: LIST
82239: LIST
82240: PPUSH
82241: CALL_OW 69
82245: PUSH
82246: FOR_IN
82247: IFFALSE 82271
// if IsSelected ( i ) then
82249: LD_VAR 0 2
82253: PPUSH
82254: CALL_OW 306
82258: IFFALSE 82269
// ComForceInvisible ( i ) ;
82260: LD_VAR 0 2
82264: PPUSH
82265: CALL_OW 496
82269: GO 82246
82271: POP
82272: POP
// end ;
82273: LD_VAR 0 1
82277: RET
// export function hHackChangeYourSide ; begin
82278: LD_INT 0
82280: PPUSH
// if your_side = 8 then
82281: LD_OWVAR 2
82285: PUSH
82286: LD_INT 8
82288: EQUAL
82289: IFFALSE 82301
// your_side := 0 else
82291: LD_ADDR_OWVAR 2
82295: PUSH
82296: LD_INT 0
82298: ST_TO_ADDR
82299: GO 82315
// your_side := your_side + 1 ;
82301: LD_ADDR_OWVAR 2
82305: PUSH
82306: LD_OWVAR 2
82310: PUSH
82311: LD_INT 1
82313: PLUS
82314: ST_TO_ADDR
// end ;
82315: LD_VAR 0 1
82319: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82320: LD_INT 0
82322: PPUSH
82323: PPUSH
82324: PPUSH
// for i in all_units do
82325: LD_ADDR_VAR 0 2
82329: PUSH
82330: LD_OWVAR 3
82334: PUSH
82335: FOR_IN
82336: IFFALSE 82414
// if IsSelected ( i ) then
82338: LD_VAR 0 2
82342: PPUSH
82343: CALL_OW 306
82347: IFFALSE 82412
// begin j := GetSide ( i ) ;
82349: LD_ADDR_VAR 0 3
82353: PUSH
82354: LD_VAR 0 2
82358: PPUSH
82359: CALL_OW 255
82363: ST_TO_ADDR
// if j = 8 then
82364: LD_VAR 0 3
82368: PUSH
82369: LD_INT 8
82371: EQUAL
82372: IFFALSE 82384
// j := 0 else
82374: LD_ADDR_VAR 0 3
82378: PUSH
82379: LD_INT 0
82381: ST_TO_ADDR
82382: GO 82398
// j := j + 1 ;
82384: LD_ADDR_VAR 0 3
82388: PUSH
82389: LD_VAR 0 3
82393: PUSH
82394: LD_INT 1
82396: PLUS
82397: ST_TO_ADDR
// SetSide ( i , j ) ;
82398: LD_VAR 0 2
82402: PPUSH
82403: LD_VAR 0 3
82407: PPUSH
82408: CALL_OW 235
// end ;
82412: GO 82335
82414: POP
82415: POP
// end ;
82416: LD_VAR 0 1
82420: RET
// export function hHackFog ; begin
82421: LD_INT 0
82423: PPUSH
// FogOff ( true ) ;
82424: LD_INT 1
82426: PPUSH
82427: CALL_OW 344
// end ;
82431: LD_VAR 0 1
82435: RET
// export function hHackTeleport ( unit , x , y ) ; begin
82436: LD_INT 0
82438: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
82439: LD_VAR 0 1
82443: PPUSH
82444: LD_VAR 0 2
82448: PPUSH
82449: LD_VAR 0 3
82453: PPUSH
82454: LD_INT 1
82456: PPUSH
82457: LD_INT 1
82459: PPUSH
82460: CALL_OW 483
// CenterOnXY ( x , y ) ;
82464: LD_VAR 0 2
82468: PPUSH
82469: LD_VAR 0 3
82473: PPUSH
82474: CALL_OW 84
// end ;
82478: LD_VAR 0 4
82482: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
82483: LD_INT 0
82485: PPUSH
82486: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
82487: LD_VAR 0 1
82491: NOT
82492: PUSH
82493: LD_VAR 0 2
82497: PPUSH
82498: LD_VAR 0 3
82502: PPUSH
82503: CALL_OW 488
82507: NOT
82508: OR
82509: PUSH
82510: LD_VAR 0 1
82514: PPUSH
82515: CALL_OW 266
82519: PUSH
82520: LD_INT 3
82522: NONEQUAL
82523: PUSH
82524: LD_VAR 0 1
82528: PPUSH
82529: CALL_OW 247
82533: PUSH
82534: LD_INT 1
82536: EQUAL
82537: NOT
82538: AND
82539: OR
82540: IFFALSE 82544
// exit ;
82542: GO 82693
// if GetType ( factory ) = unit_human then
82544: LD_VAR 0 1
82548: PPUSH
82549: CALL_OW 247
82553: PUSH
82554: LD_INT 1
82556: EQUAL
82557: IFFALSE 82574
// factory := IsInUnit ( factory ) ;
82559: LD_ADDR_VAR 0 1
82563: PUSH
82564: LD_VAR 0 1
82568: PPUSH
82569: CALL_OW 310
82573: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
82574: LD_VAR 0 1
82578: PPUSH
82579: CALL_OW 266
82583: PUSH
82584: LD_INT 3
82586: NONEQUAL
82587: IFFALSE 82591
// exit ;
82589: GO 82693
// if HexInfo ( x , y ) = factory then
82591: LD_VAR 0 2
82595: PPUSH
82596: LD_VAR 0 3
82600: PPUSH
82601: CALL_OW 428
82605: PUSH
82606: LD_VAR 0 1
82610: EQUAL
82611: IFFALSE 82638
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
82613: LD_ADDR_EXP 124
82617: PUSH
82618: LD_EXP 124
82622: PPUSH
82623: LD_VAR 0 1
82627: PPUSH
82628: LD_INT 0
82630: PPUSH
82631: CALL_OW 1
82635: ST_TO_ADDR
82636: GO 82689
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
82638: LD_ADDR_EXP 124
82642: PUSH
82643: LD_EXP 124
82647: PPUSH
82648: LD_VAR 0 1
82652: PPUSH
82653: LD_VAR 0 1
82657: PPUSH
82658: CALL_OW 255
82662: PUSH
82663: LD_VAR 0 1
82667: PUSH
82668: LD_VAR 0 2
82672: PUSH
82673: LD_VAR 0 3
82677: PUSH
82678: EMPTY
82679: LIST
82680: LIST
82681: LIST
82682: LIST
82683: PPUSH
82684: CALL_OW 1
82688: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82689: CALL 82698 0 0
// end ;
82693: LD_VAR 0 4
82697: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
82698: LD_INT 0
82700: PPUSH
82701: PPUSH
82702: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
82703: LD_STRING resetFactoryWaypoint();
82705: PPUSH
82706: CALL_OW 559
// if factoryWaypoints then
82710: LD_EXP 124
82714: IFFALSE 82840
// begin list := PrepareArray ( factoryWaypoints ) ;
82716: LD_ADDR_VAR 0 3
82720: PUSH
82721: LD_EXP 124
82725: PPUSH
82726: CALL 67950 0 1
82730: ST_TO_ADDR
// for i := 1 to list do
82731: LD_ADDR_VAR 0 2
82735: PUSH
82736: DOUBLE
82737: LD_INT 1
82739: DEC
82740: ST_TO_ADDR
82741: LD_VAR 0 3
82745: PUSH
82746: FOR_TO
82747: IFFALSE 82838
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82749: LD_STRING setFactoryWaypointXY(
82751: PUSH
82752: LD_VAR 0 3
82756: PUSH
82757: LD_VAR 0 2
82761: ARRAY
82762: PUSH
82763: LD_INT 1
82765: ARRAY
82766: STR
82767: PUSH
82768: LD_STRING ,
82770: STR
82771: PUSH
82772: LD_VAR 0 3
82776: PUSH
82777: LD_VAR 0 2
82781: ARRAY
82782: PUSH
82783: LD_INT 2
82785: ARRAY
82786: STR
82787: PUSH
82788: LD_STRING ,
82790: STR
82791: PUSH
82792: LD_VAR 0 3
82796: PUSH
82797: LD_VAR 0 2
82801: ARRAY
82802: PUSH
82803: LD_INT 3
82805: ARRAY
82806: STR
82807: PUSH
82808: LD_STRING ,
82810: STR
82811: PUSH
82812: LD_VAR 0 3
82816: PUSH
82817: LD_VAR 0 2
82821: ARRAY
82822: PUSH
82823: LD_INT 4
82825: ARRAY
82826: STR
82827: PUSH
82828: LD_STRING )
82830: STR
82831: PPUSH
82832: CALL_OW 559
82836: GO 82746
82838: POP
82839: POP
// end ; end ;
82840: LD_VAR 0 1
82844: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
82845: LD_INT 0
82847: PPUSH
// if HexInfo ( x , y ) = warehouse then
82848: LD_VAR 0 2
82852: PPUSH
82853: LD_VAR 0 3
82857: PPUSH
82858: CALL_OW 428
82862: PUSH
82863: LD_VAR 0 1
82867: EQUAL
82868: IFFALSE 82895
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
82870: LD_ADDR_EXP 125
82874: PUSH
82875: LD_EXP 125
82879: PPUSH
82880: LD_VAR 0 1
82884: PPUSH
82885: LD_INT 0
82887: PPUSH
82888: CALL_OW 1
82892: ST_TO_ADDR
82893: GO 82946
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
82895: LD_ADDR_EXP 125
82899: PUSH
82900: LD_EXP 125
82904: PPUSH
82905: LD_VAR 0 1
82909: PPUSH
82910: LD_VAR 0 1
82914: PPUSH
82915: CALL_OW 255
82919: PUSH
82920: LD_VAR 0 1
82924: PUSH
82925: LD_VAR 0 2
82929: PUSH
82930: LD_VAR 0 3
82934: PUSH
82935: EMPTY
82936: LIST
82937: LIST
82938: LIST
82939: LIST
82940: PPUSH
82941: CALL_OW 1
82945: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
82946: CALL 82955 0 0
// end ;
82950: LD_VAR 0 4
82954: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
82955: LD_INT 0
82957: PPUSH
82958: PPUSH
82959: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
82960: LD_STRING resetWarehouseGatheringPoints();
82962: PPUSH
82963: CALL_OW 559
// if warehouseGatheringPoints then
82967: LD_EXP 125
82971: IFFALSE 83097
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
82973: LD_ADDR_VAR 0 3
82977: PUSH
82978: LD_EXP 125
82982: PPUSH
82983: CALL 67950 0 1
82987: ST_TO_ADDR
// for i := 1 to list do
82988: LD_ADDR_VAR 0 2
82992: PUSH
82993: DOUBLE
82994: LD_INT 1
82996: DEC
82997: ST_TO_ADDR
82998: LD_VAR 0 3
83002: PUSH
83003: FOR_TO
83004: IFFALSE 83095
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
83006: LD_STRING setWarehouseGatheringPointXY(
83008: PUSH
83009: LD_VAR 0 3
83013: PUSH
83014: LD_VAR 0 2
83018: ARRAY
83019: PUSH
83020: LD_INT 1
83022: ARRAY
83023: STR
83024: PUSH
83025: LD_STRING ,
83027: STR
83028: PUSH
83029: LD_VAR 0 3
83033: PUSH
83034: LD_VAR 0 2
83038: ARRAY
83039: PUSH
83040: LD_INT 2
83042: ARRAY
83043: STR
83044: PUSH
83045: LD_STRING ,
83047: STR
83048: PUSH
83049: LD_VAR 0 3
83053: PUSH
83054: LD_VAR 0 2
83058: ARRAY
83059: PUSH
83060: LD_INT 3
83062: ARRAY
83063: STR
83064: PUSH
83065: LD_STRING ,
83067: STR
83068: PUSH
83069: LD_VAR 0 3
83073: PUSH
83074: LD_VAR 0 2
83078: ARRAY
83079: PUSH
83080: LD_INT 4
83082: ARRAY
83083: STR
83084: PUSH
83085: LD_STRING )
83087: STR
83088: PPUSH
83089: CALL_OW 559
83093: GO 83003
83095: POP
83096: POP
// end ; end ;
83097: LD_VAR 0 1
83101: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
83102: LD_EXP 125
83106: IFFALSE 83791
83108: GO 83110
83110: DISABLE
83111: LD_INT 0
83113: PPUSH
83114: PPUSH
83115: PPUSH
83116: PPUSH
83117: PPUSH
83118: PPUSH
83119: PPUSH
83120: PPUSH
83121: PPUSH
// begin enable ;
83122: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
83123: LD_ADDR_VAR 0 3
83127: PUSH
83128: LD_EXP 125
83132: PPUSH
83133: CALL 67950 0 1
83137: ST_TO_ADDR
// if not list then
83138: LD_VAR 0 3
83142: NOT
83143: IFFALSE 83147
// exit ;
83145: GO 83791
// for i := 1 to list do
83147: LD_ADDR_VAR 0 1
83151: PUSH
83152: DOUBLE
83153: LD_INT 1
83155: DEC
83156: ST_TO_ADDR
83157: LD_VAR 0 3
83161: PUSH
83162: FOR_TO
83163: IFFALSE 83789
// begin depot := list [ i ] [ 2 ] ;
83165: LD_ADDR_VAR 0 8
83169: PUSH
83170: LD_VAR 0 3
83174: PUSH
83175: LD_VAR 0 1
83179: ARRAY
83180: PUSH
83181: LD_INT 2
83183: ARRAY
83184: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
83185: LD_ADDR_VAR 0 5
83189: PUSH
83190: LD_VAR 0 3
83194: PUSH
83195: LD_VAR 0 1
83199: ARRAY
83200: PUSH
83201: LD_INT 1
83203: ARRAY
83204: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
83205: LD_VAR 0 8
83209: PPUSH
83210: CALL_OW 301
83214: PUSH
83215: LD_VAR 0 5
83219: PUSH
83220: LD_VAR 0 8
83224: PPUSH
83225: CALL_OW 255
83229: NONEQUAL
83230: OR
83231: IFFALSE 83260
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
83233: LD_ADDR_EXP 125
83237: PUSH
83238: LD_EXP 125
83242: PPUSH
83243: LD_VAR 0 8
83247: PPUSH
83248: LD_INT 0
83250: PPUSH
83251: CALL_OW 1
83255: ST_TO_ADDR
// exit ;
83256: POP
83257: POP
83258: GO 83791
// end ; x := list [ i ] [ 3 ] ;
83260: LD_ADDR_VAR 0 6
83264: PUSH
83265: LD_VAR 0 3
83269: PUSH
83270: LD_VAR 0 1
83274: ARRAY
83275: PUSH
83276: LD_INT 3
83278: ARRAY
83279: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
83280: LD_ADDR_VAR 0 7
83284: PUSH
83285: LD_VAR 0 3
83289: PUSH
83290: LD_VAR 0 1
83294: ARRAY
83295: PUSH
83296: LD_INT 4
83298: ARRAY
83299: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
83300: LD_ADDR_VAR 0 9
83304: PUSH
83305: LD_VAR 0 6
83309: PPUSH
83310: LD_VAR 0 7
83314: PPUSH
83315: LD_INT 16
83317: PPUSH
83318: CALL 66538 0 3
83322: ST_TO_ADDR
// if not cratesNearbyPoint then
83323: LD_VAR 0 9
83327: NOT
83328: IFFALSE 83334
// exit ;
83330: POP
83331: POP
83332: GO 83791
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
83334: LD_ADDR_VAR 0 4
83338: PUSH
83339: LD_INT 22
83341: PUSH
83342: LD_VAR 0 5
83346: PUSH
83347: EMPTY
83348: LIST
83349: LIST
83350: PUSH
83351: LD_INT 3
83353: PUSH
83354: LD_INT 60
83356: PUSH
83357: EMPTY
83358: LIST
83359: PUSH
83360: EMPTY
83361: LIST
83362: LIST
83363: PUSH
83364: LD_INT 91
83366: PUSH
83367: LD_VAR 0 8
83371: PUSH
83372: LD_INT 6
83374: PUSH
83375: EMPTY
83376: LIST
83377: LIST
83378: LIST
83379: PUSH
83380: LD_INT 2
83382: PUSH
83383: LD_INT 25
83385: PUSH
83386: LD_INT 2
83388: PUSH
83389: EMPTY
83390: LIST
83391: LIST
83392: PUSH
83393: LD_INT 25
83395: PUSH
83396: LD_INT 16
83398: PUSH
83399: EMPTY
83400: LIST
83401: LIST
83402: PUSH
83403: EMPTY
83404: LIST
83405: LIST
83406: LIST
83407: PUSH
83408: EMPTY
83409: LIST
83410: LIST
83411: LIST
83412: LIST
83413: PPUSH
83414: CALL_OW 69
83418: PUSH
83419: LD_VAR 0 8
83423: PPUSH
83424: CALL_OW 313
83428: PPUSH
83429: LD_INT 3
83431: PUSH
83432: LD_INT 60
83434: PUSH
83435: EMPTY
83436: LIST
83437: PUSH
83438: EMPTY
83439: LIST
83440: LIST
83441: PUSH
83442: LD_INT 2
83444: PUSH
83445: LD_INT 25
83447: PUSH
83448: LD_INT 2
83450: PUSH
83451: EMPTY
83452: LIST
83453: LIST
83454: PUSH
83455: LD_INT 25
83457: PUSH
83458: LD_INT 16
83460: PUSH
83461: EMPTY
83462: LIST
83463: LIST
83464: PUSH
83465: EMPTY
83466: LIST
83467: LIST
83468: LIST
83469: PUSH
83470: EMPTY
83471: LIST
83472: LIST
83473: PPUSH
83474: CALL_OW 72
83478: UNION
83479: ST_TO_ADDR
// if tmp then
83480: LD_VAR 0 4
83484: IFFALSE 83564
// begin tmp := ShrinkArray ( tmp , 3 ) ;
83486: LD_ADDR_VAR 0 4
83490: PUSH
83491: LD_VAR 0 4
83495: PPUSH
83496: LD_INT 3
83498: PPUSH
83499: CALL 64507 0 2
83503: ST_TO_ADDR
// for j in tmp do
83504: LD_ADDR_VAR 0 2
83508: PUSH
83509: LD_VAR 0 4
83513: PUSH
83514: FOR_IN
83515: IFFALSE 83558
// begin if IsInUnit ( j ) then
83517: LD_VAR 0 2
83521: PPUSH
83522: CALL_OW 310
83526: IFFALSE 83537
// ComExit ( j ) ;
83528: LD_VAR 0 2
83532: PPUSH
83533: CALL 64590 0 1
// AddComCollect ( j , x , y ) ;
83537: LD_VAR 0 2
83541: PPUSH
83542: LD_VAR 0 6
83546: PPUSH
83547: LD_VAR 0 7
83551: PPUSH
83552: CALL_OW 177
// end ;
83556: GO 83514
83558: POP
83559: POP
// exit ;
83560: POP
83561: POP
83562: GO 83791
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
83564: LD_ADDR_VAR 0 4
83568: PUSH
83569: LD_INT 22
83571: PUSH
83572: LD_VAR 0 5
83576: PUSH
83577: EMPTY
83578: LIST
83579: LIST
83580: PUSH
83581: LD_INT 91
83583: PUSH
83584: LD_VAR 0 8
83588: PUSH
83589: LD_INT 8
83591: PUSH
83592: EMPTY
83593: LIST
83594: LIST
83595: LIST
83596: PUSH
83597: LD_INT 2
83599: PUSH
83600: LD_INT 34
83602: PUSH
83603: LD_INT 12
83605: PUSH
83606: EMPTY
83607: LIST
83608: LIST
83609: PUSH
83610: LD_INT 34
83612: PUSH
83613: LD_INT 51
83615: PUSH
83616: EMPTY
83617: LIST
83618: LIST
83619: PUSH
83620: LD_INT 34
83622: PUSH
83623: LD_INT 32
83625: PUSH
83626: EMPTY
83627: LIST
83628: LIST
83629: PUSH
83630: LD_INT 34
83632: PUSH
83633: LD_INT 89
83635: PUSH
83636: EMPTY
83637: LIST
83638: LIST
83639: PUSH
83640: EMPTY
83641: LIST
83642: LIST
83643: LIST
83644: LIST
83645: LIST
83646: PUSH
83647: EMPTY
83648: LIST
83649: LIST
83650: LIST
83651: PPUSH
83652: CALL_OW 69
83656: ST_TO_ADDR
// if tmp then
83657: LD_VAR 0 4
83661: IFFALSE 83787
// begin for j in tmp do
83663: LD_ADDR_VAR 0 2
83667: PUSH
83668: LD_VAR 0 4
83672: PUSH
83673: FOR_IN
83674: IFFALSE 83785
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
83676: LD_VAR 0 2
83680: PPUSH
83681: CALL_OW 262
83685: PUSH
83686: LD_INT 3
83688: EQUAL
83689: PUSH
83690: LD_VAR 0 2
83694: PPUSH
83695: CALL_OW 261
83699: PUSH
83700: LD_INT 20
83702: GREATER
83703: OR
83704: PUSH
83705: LD_VAR 0 2
83709: PPUSH
83710: CALL_OW 314
83714: NOT
83715: AND
83716: PUSH
83717: LD_VAR 0 2
83721: PPUSH
83722: CALL_OW 263
83726: PUSH
83727: LD_INT 1
83729: NONEQUAL
83730: PUSH
83731: LD_VAR 0 2
83735: PPUSH
83736: CALL_OW 311
83740: OR
83741: AND
83742: IFFALSE 83783
// begin ComCollect ( j , x , y ) ;
83744: LD_VAR 0 2
83748: PPUSH
83749: LD_VAR 0 6
83753: PPUSH
83754: LD_VAR 0 7
83758: PPUSH
83759: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
83763: LD_VAR 0 2
83767: PPUSH
83768: LD_VAR 0 8
83772: PPUSH
83773: CALL_OW 172
// exit ;
83777: POP
83778: POP
83779: POP
83780: POP
83781: GO 83791
// end ;
83783: GO 83673
83785: POP
83786: POP
// end ; end ;
83787: GO 83162
83789: POP
83790: POP
// end ; end_of_file
83791: PPOPN 9
83793: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83794: LD_VAR 0 1
83798: PUSH
83799: LD_INT 200
83801: DOUBLE
83802: GREATEREQUAL
83803: IFFALSE 83811
83805: LD_INT 299
83807: DOUBLE
83808: LESSEQUAL
83809: IFTRUE 83813
83811: GO 83845
83813: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83814: LD_VAR 0 1
83818: PPUSH
83819: LD_VAR 0 2
83823: PPUSH
83824: LD_VAR 0 3
83828: PPUSH
83829: LD_VAR 0 4
83833: PPUSH
83834: LD_VAR 0 5
83838: PPUSH
83839: CALL 84333 0 5
83843: GO 83922
83845: LD_INT 300
83847: DOUBLE
83848: GREATEREQUAL
83849: IFFALSE 83857
83851: LD_INT 399
83853: DOUBLE
83854: LESSEQUAL
83855: IFTRUE 83859
83857: GO 83921
83859: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83860: LD_VAR 0 1
83864: PPUSH
83865: LD_VAR 0 2
83869: PPUSH
83870: LD_VAR 0 3
83874: PPUSH
83875: LD_VAR 0 4
83879: PPUSH
83880: LD_VAR 0 5
83884: PPUSH
83885: LD_VAR 0 6
83889: PPUSH
83890: LD_VAR 0 7
83894: PPUSH
83895: LD_VAR 0 8
83899: PPUSH
83900: LD_VAR 0 9
83904: PPUSH
83905: LD_VAR 0 10
83909: PPUSH
83910: LD_VAR 0 11
83914: PPUSH
83915: CALL 80503 0 11
83919: GO 83922
83921: POP
// end ;
83922: PPOPN 11
83924: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83925: LD_VAR 0 1
83929: PPUSH
83930: LD_VAR 0 2
83934: PPUSH
83935: LD_VAR 0 3
83939: PPUSH
83940: LD_VAR 0 4
83944: PPUSH
83945: LD_VAR 0 5
83949: PPUSH
83950: CALL 84069 0 5
// end ; end_of_file
83954: PPOPN 5
83956: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
83957: LD_INT 0
83959: PPUSH
83960: PPUSH
83961: PPUSH
83962: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
83963: LD_VAR 0 1
83967: PPUSH
83968: CALL_OW 264
83972: PUSH
83973: LD_INT 91
83975: EQUAL
83976: IFFALSE 84048
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
83978: LD_INT 68
83980: PPUSH
83981: LD_VAR 0 1
83985: PPUSH
83986: CALL_OW 255
83990: PPUSH
83991: CALL_OW 321
83995: PUSH
83996: LD_INT 2
83998: EQUAL
83999: IFFALSE 84011
// eff := 70 else
84001: LD_ADDR_VAR 0 4
84005: PUSH
84006: LD_INT 70
84008: ST_TO_ADDR
84009: GO 84019
// eff := 30 ;
84011: LD_ADDR_VAR 0 4
84015: PUSH
84016: LD_INT 30
84018: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84019: LD_VAR 0 1
84023: PPUSH
84024: CALL_OW 250
84028: PPUSH
84029: LD_VAR 0 1
84033: PPUSH
84034: CALL_OW 251
84038: PPUSH
84039: LD_VAR 0 4
84043: PPUSH
84044: CALL_OW 495
// end ; end ;
84048: LD_VAR 0 2
84052: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
84053: LD_INT 0
84055: PPUSH
// end ;
84056: LD_VAR 0 4
84060: RET
// export function SOS_Command ( cmd ) ; begin
84061: LD_INT 0
84063: PPUSH
// end ;
84064: LD_VAR 0 2
84068: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
84069: LD_INT 0
84071: PPUSH
// end ;
84072: LD_VAR 0 6
84076: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
84077: LD_INT 0
84079: PPUSH
84080: PPUSH
// if not vehicle or not factory then
84081: LD_VAR 0 1
84085: NOT
84086: PUSH
84087: LD_VAR 0 2
84091: NOT
84092: OR
84093: IFFALSE 84097
// exit ;
84095: GO 84328
// if factoryWaypoints >= factory then
84097: LD_EXP 124
84101: PUSH
84102: LD_VAR 0 2
84106: GREATEREQUAL
84107: IFFALSE 84328
// if factoryWaypoints [ factory ] then
84109: LD_EXP 124
84113: PUSH
84114: LD_VAR 0 2
84118: ARRAY
84119: IFFALSE 84328
// begin if GetControl ( vehicle ) = control_manual then
84121: LD_VAR 0 1
84125: PPUSH
84126: CALL_OW 263
84130: PUSH
84131: LD_INT 1
84133: EQUAL
84134: IFFALSE 84215
// begin driver := IsDrivenBy ( vehicle ) ;
84136: LD_ADDR_VAR 0 4
84140: PUSH
84141: LD_VAR 0 1
84145: PPUSH
84146: CALL_OW 311
84150: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84151: LD_VAR 0 4
84155: PPUSH
84156: LD_EXP 124
84160: PUSH
84161: LD_VAR 0 2
84165: ARRAY
84166: PUSH
84167: LD_INT 3
84169: ARRAY
84170: PPUSH
84171: LD_EXP 124
84175: PUSH
84176: LD_VAR 0 2
84180: ARRAY
84181: PUSH
84182: LD_INT 4
84184: ARRAY
84185: PPUSH
84186: CALL_OW 171
// AddComExitVehicle ( driver ) ;
84190: LD_VAR 0 4
84194: PPUSH
84195: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
84199: LD_VAR 0 4
84203: PPUSH
84204: LD_VAR 0 2
84208: PPUSH
84209: CALL_OW 180
// end else
84213: GO 84328
// if GetControl ( vehicle ) = control_remote then
84215: LD_VAR 0 1
84219: PPUSH
84220: CALL_OW 263
84224: PUSH
84225: LD_INT 2
84227: EQUAL
84228: IFFALSE 84289
// begin wait ( 0 0$2 ) ;
84230: LD_INT 70
84232: PPUSH
84233: CALL_OW 67
// if Connect ( vehicle ) then
84237: LD_VAR 0 1
84241: PPUSH
84242: CALL 34849 0 1
84246: IFFALSE 84287
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84248: LD_VAR 0 1
84252: PPUSH
84253: LD_EXP 124
84257: PUSH
84258: LD_VAR 0 2
84262: ARRAY
84263: PUSH
84264: LD_INT 3
84266: ARRAY
84267: PPUSH
84268: LD_EXP 124
84272: PUSH
84273: LD_VAR 0 2
84277: ARRAY
84278: PUSH
84279: LD_INT 4
84281: ARRAY
84282: PPUSH
84283: CALL_OW 171
// end else
84287: GO 84328
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84289: LD_VAR 0 1
84293: PPUSH
84294: LD_EXP 124
84298: PUSH
84299: LD_VAR 0 2
84303: ARRAY
84304: PUSH
84305: LD_INT 3
84307: ARRAY
84308: PPUSH
84309: LD_EXP 124
84313: PUSH
84314: LD_VAR 0 2
84318: ARRAY
84319: PUSH
84320: LD_INT 4
84322: ARRAY
84323: PPUSH
84324: CALL_OW 171
// end ; end ;
84328: LD_VAR 0 3
84332: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84333: LD_INT 0
84335: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
84336: LD_VAR 0 1
84340: PUSH
84341: LD_INT 250
84343: EQUAL
84344: PUSH
84345: LD_VAR 0 2
84349: PPUSH
84350: CALL_OW 264
84354: PUSH
84355: LD_INT 81
84357: EQUAL
84358: AND
84359: IFFALSE 84380
// MinerPlaceMine ( unit , x , y ) ;
84361: LD_VAR 0 2
84365: PPUSH
84366: LD_VAR 0 4
84370: PPUSH
84371: LD_VAR 0 5
84375: PPUSH
84376: CALL 86765 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
84380: LD_VAR 0 1
84384: PUSH
84385: LD_INT 251
84387: EQUAL
84388: PUSH
84389: LD_VAR 0 2
84393: PPUSH
84394: CALL_OW 264
84398: PUSH
84399: LD_INT 81
84401: EQUAL
84402: AND
84403: IFFALSE 84424
// MinerDetonateMine ( unit , x , y ) ;
84405: LD_VAR 0 2
84409: PPUSH
84410: LD_VAR 0 4
84414: PPUSH
84415: LD_VAR 0 5
84419: PPUSH
84420: CALL 87040 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
84424: LD_VAR 0 1
84428: PUSH
84429: LD_INT 252
84431: EQUAL
84432: PUSH
84433: LD_VAR 0 2
84437: PPUSH
84438: CALL_OW 264
84442: PUSH
84443: LD_INT 81
84445: EQUAL
84446: AND
84447: IFFALSE 84468
// MinerCreateMinefield ( unit , x , y ) ;
84449: LD_VAR 0 2
84453: PPUSH
84454: LD_VAR 0 4
84458: PPUSH
84459: LD_VAR 0 5
84463: PPUSH
84464: CALL 87457 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
84468: LD_VAR 0 1
84472: PUSH
84473: LD_INT 253
84475: EQUAL
84476: PUSH
84477: LD_VAR 0 2
84481: PPUSH
84482: CALL_OW 257
84486: PUSH
84487: LD_INT 5
84489: EQUAL
84490: AND
84491: IFFALSE 84512
// ComBinocular ( unit , x , y ) ;
84493: LD_VAR 0 2
84497: PPUSH
84498: LD_VAR 0 4
84502: PPUSH
84503: LD_VAR 0 5
84507: PPUSH
84508: CALL 87826 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
84512: LD_VAR 0 1
84516: PUSH
84517: LD_INT 254
84519: EQUAL
84520: PUSH
84521: LD_VAR 0 2
84525: PPUSH
84526: CALL_OW 264
84530: PUSH
84531: LD_INT 99
84533: EQUAL
84534: AND
84535: PUSH
84536: LD_VAR 0 3
84540: PPUSH
84541: CALL_OW 263
84545: PUSH
84546: LD_INT 3
84548: EQUAL
84549: AND
84550: IFFALSE 84566
// HackDestroyVehicle ( unit , selectedUnit ) ;
84552: LD_VAR 0 2
84556: PPUSH
84557: LD_VAR 0 3
84561: PPUSH
84562: CALL 86129 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
84566: LD_VAR 0 1
84570: PUSH
84571: LD_INT 255
84573: EQUAL
84574: PUSH
84575: LD_VAR 0 2
84579: PPUSH
84580: CALL_OW 264
84584: PUSH
84585: LD_INT 14
84587: PUSH
84588: LD_INT 53
84590: PUSH
84591: EMPTY
84592: LIST
84593: LIST
84594: IN
84595: AND
84596: PUSH
84597: LD_VAR 0 4
84601: PPUSH
84602: LD_VAR 0 5
84606: PPUSH
84607: CALL_OW 488
84611: AND
84612: IFFALSE 84636
// CutTreeXYR ( unit , x , y , 12 ) ;
84614: LD_VAR 0 2
84618: PPUSH
84619: LD_VAR 0 4
84623: PPUSH
84624: LD_VAR 0 5
84628: PPUSH
84629: LD_INT 12
84631: PPUSH
84632: CALL 84699 0 4
// if cmd = 256 then
84636: LD_VAR 0 1
84640: PUSH
84641: LD_INT 256
84643: EQUAL
84644: IFFALSE 84665
// SetFactoryWaypoint ( unit , x , y ) ;
84646: LD_VAR 0 2
84650: PPUSH
84651: LD_VAR 0 4
84655: PPUSH
84656: LD_VAR 0 5
84660: PPUSH
84661: CALL 82483 0 3
// if cmd = 257 then
84665: LD_VAR 0 1
84669: PUSH
84670: LD_INT 257
84672: EQUAL
84673: IFFALSE 84694
// SetWarehouseGatheringPoint ( unit , x , y ) ;
84675: LD_VAR 0 2
84679: PPUSH
84680: LD_VAR 0 4
84684: PPUSH
84685: LD_VAR 0 5
84689: PPUSH
84690: CALL 82845 0 3
// end ;
84694: LD_VAR 0 6
84698: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84699: LD_INT 0
84701: PPUSH
84702: PPUSH
84703: PPUSH
84704: PPUSH
84705: PPUSH
84706: PPUSH
84707: PPUSH
84708: PPUSH
84709: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84710: LD_VAR 0 1
84714: NOT
84715: PUSH
84716: LD_VAR 0 2
84720: PPUSH
84721: LD_VAR 0 3
84725: PPUSH
84726: CALL_OW 488
84730: NOT
84731: OR
84732: PUSH
84733: LD_VAR 0 4
84737: NOT
84738: OR
84739: IFFALSE 84743
// exit ;
84741: GO 85083
// list := [ ] ;
84743: LD_ADDR_VAR 0 13
84747: PUSH
84748: EMPTY
84749: ST_TO_ADDR
// if x - r < 0 then
84750: LD_VAR 0 2
84754: PUSH
84755: LD_VAR 0 4
84759: MINUS
84760: PUSH
84761: LD_INT 0
84763: LESS
84764: IFFALSE 84776
// min_x := 0 else
84766: LD_ADDR_VAR 0 7
84770: PUSH
84771: LD_INT 0
84773: ST_TO_ADDR
84774: GO 84792
// min_x := x - r ;
84776: LD_ADDR_VAR 0 7
84780: PUSH
84781: LD_VAR 0 2
84785: PUSH
84786: LD_VAR 0 4
84790: MINUS
84791: ST_TO_ADDR
// if y - r < 0 then
84792: LD_VAR 0 3
84796: PUSH
84797: LD_VAR 0 4
84801: MINUS
84802: PUSH
84803: LD_INT 0
84805: LESS
84806: IFFALSE 84818
// min_y := 0 else
84808: LD_ADDR_VAR 0 8
84812: PUSH
84813: LD_INT 0
84815: ST_TO_ADDR
84816: GO 84834
// min_y := y - r ;
84818: LD_ADDR_VAR 0 8
84822: PUSH
84823: LD_VAR 0 3
84827: PUSH
84828: LD_VAR 0 4
84832: MINUS
84833: ST_TO_ADDR
// max_x := x + r ;
84834: LD_ADDR_VAR 0 9
84838: PUSH
84839: LD_VAR 0 2
84843: PUSH
84844: LD_VAR 0 4
84848: PLUS
84849: ST_TO_ADDR
// max_y := y + r ;
84850: LD_ADDR_VAR 0 10
84854: PUSH
84855: LD_VAR 0 3
84859: PUSH
84860: LD_VAR 0 4
84864: PLUS
84865: ST_TO_ADDR
// for _x = min_x to max_x do
84866: LD_ADDR_VAR 0 11
84870: PUSH
84871: DOUBLE
84872: LD_VAR 0 7
84876: DEC
84877: ST_TO_ADDR
84878: LD_VAR 0 9
84882: PUSH
84883: FOR_TO
84884: IFFALSE 85001
// for _y = min_y to max_y do
84886: LD_ADDR_VAR 0 12
84890: PUSH
84891: DOUBLE
84892: LD_VAR 0 8
84896: DEC
84897: ST_TO_ADDR
84898: LD_VAR 0 10
84902: PUSH
84903: FOR_TO
84904: IFFALSE 84997
// begin if not ValidHex ( _x , _y ) then
84906: LD_VAR 0 11
84910: PPUSH
84911: LD_VAR 0 12
84915: PPUSH
84916: CALL_OW 488
84920: NOT
84921: IFFALSE 84925
// continue ;
84923: GO 84903
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
84925: LD_VAR 0 11
84929: PPUSH
84930: LD_VAR 0 12
84934: PPUSH
84935: CALL_OW 351
84939: PUSH
84940: LD_VAR 0 11
84944: PPUSH
84945: LD_VAR 0 12
84949: PPUSH
84950: CALL_OW 554
84954: AND
84955: IFFALSE 84995
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
84957: LD_ADDR_VAR 0 13
84961: PUSH
84962: LD_VAR 0 13
84966: PPUSH
84967: LD_VAR 0 13
84971: PUSH
84972: LD_INT 1
84974: PLUS
84975: PPUSH
84976: LD_VAR 0 11
84980: PUSH
84981: LD_VAR 0 12
84985: PUSH
84986: EMPTY
84987: LIST
84988: LIST
84989: PPUSH
84990: CALL_OW 2
84994: ST_TO_ADDR
// end ;
84995: GO 84903
84997: POP
84998: POP
84999: GO 84883
85001: POP
85002: POP
// if not list then
85003: LD_VAR 0 13
85007: NOT
85008: IFFALSE 85012
// exit ;
85010: GO 85083
// for i in list do
85012: LD_ADDR_VAR 0 6
85016: PUSH
85017: LD_VAR 0 13
85021: PUSH
85022: FOR_IN
85023: IFFALSE 85081
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85025: LD_VAR 0 1
85029: PPUSH
85030: LD_STRING M
85032: PUSH
85033: LD_VAR 0 6
85037: PUSH
85038: LD_INT 1
85040: ARRAY
85041: PUSH
85042: LD_VAR 0 6
85046: PUSH
85047: LD_INT 2
85049: ARRAY
85050: PUSH
85051: LD_INT 0
85053: PUSH
85054: LD_INT 0
85056: PUSH
85057: LD_INT 0
85059: PUSH
85060: LD_INT 0
85062: PUSH
85063: EMPTY
85064: LIST
85065: LIST
85066: LIST
85067: LIST
85068: LIST
85069: LIST
85070: LIST
85071: PUSH
85072: EMPTY
85073: LIST
85074: PPUSH
85075: CALL_OW 447
85079: GO 85022
85081: POP
85082: POP
// end ;
85083: LD_VAR 0 5
85087: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85088: LD_EXP 127
85092: NOT
85093: IFFALSE 85143
85095: GO 85097
85097: DISABLE
// begin initHack := true ;
85098: LD_ADDR_EXP 127
85102: PUSH
85103: LD_INT 1
85105: ST_TO_ADDR
// hackTanks := [ ] ;
85106: LD_ADDR_EXP 128
85110: PUSH
85111: EMPTY
85112: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
85113: LD_ADDR_EXP 129
85117: PUSH
85118: EMPTY
85119: ST_TO_ADDR
// hackLimit := 3 ;
85120: LD_ADDR_EXP 130
85124: PUSH
85125: LD_INT 3
85127: ST_TO_ADDR
// hackDist := 12 ;
85128: LD_ADDR_EXP 131
85132: PUSH
85133: LD_INT 12
85135: ST_TO_ADDR
// hackCounter := [ ] ;
85136: LD_ADDR_EXP 132
85140: PUSH
85141: EMPTY
85142: ST_TO_ADDR
// end ;
85143: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
85144: LD_EXP 127
85148: PUSH
85149: LD_INT 34
85151: PUSH
85152: LD_INT 99
85154: PUSH
85155: EMPTY
85156: LIST
85157: LIST
85158: PPUSH
85159: CALL_OW 69
85163: AND
85164: IFFALSE 85417
85166: GO 85168
85168: DISABLE
85169: LD_INT 0
85171: PPUSH
85172: PPUSH
// begin enable ;
85173: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85174: LD_ADDR_VAR 0 1
85178: PUSH
85179: LD_INT 34
85181: PUSH
85182: LD_INT 99
85184: PUSH
85185: EMPTY
85186: LIST
85187: LIST
85188: PPUSH
85189: CALL_OW 69
85193: PUSH
85194: FOR_IN
85195: IFFALSE 85415
// begin if not i in hackTanks then
85197: LD_VAR 0 1
85201: PUSH
85202: LD_EXP 128
85206: IN
85207: NOT
85208: IFFALSE 85291
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
85210: LD_ADDR_EXP 128
85214: PUSH
85215: LD_EXP 128
85219: PPUSH
85220: LD_EXP 128
85224: PUSH
85225: LD_INT 1
85227: PLUS
85228: PPUSH
85229: LD_VAR 0 1
85233: PPUSH
85234: CALL_OW 1
85238: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
85239: LD_ADDR_EXP 129
85243: PUSH
85244: LD_EXP 129
85248: PPUSH
85249: LD_EXP 129
85253: PUSH
85254: LD_INT 1
85256: PLUS
85257: PPUSH
85258: EMPTY
85259: PPUSH
85260: CALL_OW 1
85264: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
85265: LD_ADDR_EXP 132
85269: PUSH
85270: LD_EXP 132
85274: PPUSH
85275: LD_EXP 132
85279: PUSH
85280: LD_INT 1
85282: PLUS
85283: PPUSH
85284: EMPTY
85285: PPUSH
85286: CALL_OW 1
85290: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85291: LD_VAR 0 1
85295: PPUSH
85296: CALL_OW 302
85300: NOT
85301: IFFALSE 85314
// begin HackUnlinkAll ( i ) ;
85303: LD_VAR 0 1
85307: PPUSH
85308: CALL 85420 0 1
// continue ;
85312: GO 85194
// end ; HackCheckCapturedStatus ( i ) ;
85314: LD_VAR 0 1
85318: PPUSH
85319: CALL 85863 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85323: LD_ADDR_VAR 0 2
85327: PUSH
85328: LD_INT 81
85330: PUSH
85331: LD_VAR 0 1
85335: PPUSH
85336: CALL_OW 255
85340: PUSH
85341: EMPTY
85342: LIST
85343: LIST
85344: PUSH
85345: LD_INT 33
85347: PUSH
85348: LD_INT 3
85350: PUSH
85351: EMPTY
85352: LIST
85353: LIST
85354: PUSH
85355: LD_INT 91
85357: PUSH
85358: LD_VAR 0 1
85362: PUSH
85363: LD_EXP 131
85367: PUSH
85368: EMPTY
85369: LIST
85370: LIST
85371: LIST
85372: PUSH
85373: LD_INT 50
85375: PUSH
85376: EMPTY
85377: LIST
85378: PUSH
85379: EMPTY
85380: LIST
85381: LIST
85382: LIST
85383: LIST
85384: PPUSH
85385: CALL_OW 69
85389: ST_TO_ADDR
// if not tmp then
85390: LD_VAR 0 2
85394: NOT
85395: IFFALSE 85399
// continue ;
85397: GO 85194
// HackLink ( i , tmp ) ;
85399: LD_VAR 0 1
85403: PPUSH
85404: LD_VAR 0 2
85408: PPUSH
85409: CALL 85556 0 2
// end ;
85413: GO 85194
85415: POP
85416: POP
// end ;
85417: PPOPN 2
85419: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
85420: LD_INT 0
85422: PPUSH
85423: PPUSH
85424: PPUSH
// if not hack in hackTanks then
85425: LD_VAR 0 1
85429: PUSH
85430: LD_EXP 128
85434: IN
85435: NOT
85436: IFFALSE 85440
// exit ;
85438: GO 85551
// index := GetElementIndex ( hackTanks , hack ) ;
85440: LD_ADDR_VAR 0 4
85444: PUSH
85445: LD_EXP 128
85449: PPUSH
85450: LD_VAR 0 1
85454: PPUSH
85455: CALL 31665 0 2
85459: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
85460: LD_EXP 129
85464: PUSH
85465: LD_VAR 0 4
85469: ARRAY
85470: IFFALSE 85551
// begin for i in hackTanksCaptured [ index ] do
85472: LD_ADDR_VAR 0 3
85476: PUSH
85477: LD_EXP 129
85481: PUSH
85482: LD_VAR 0 4
85486: ARRAY
85487: PUSH
85488: FOR_IN
85489: IFFALSE 85515
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
85491: LD_VAR 0 3
85495: PUSH
85496: LD_INT 1
85498: ARRAY
85499: PPUSH
85500: LD_VAR 0 3
85504: PUSH
85505: LD_INT 2
85507: ARRAY
85508: PPUSH
85509: CALL_OW 235
85513: GO 85488
85515: POP
85516: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
85517: LD_ADDR_EXP 129
85521: PUSH
85522: LD_EXP 129
85526: PPUSH
85527: LD_VAR 0 4
85531: PPUSH
85532: EMPTY
85533: PPUSH
85534: CALL_OW 1
85538: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
85539: LD_VAR 0 1
85543: PPUSH
85544: LD_INT 0
85546: PPUSH
85547: CALL_OW 505
// end ; end ;
85551: LD_VAR 0 2
85555: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
85556: LD_INT 0
85558: PPUSH
85559: PPUSH
85560: PPUSH
// if not hack in hackTanks or not vehicles then
85561: LD_VAR 0 1
85565: PUSH
85566: LD_EXP 128
85570: IN
85571: NOT
85572: PUSH
85573: LD_VAR 0 2
85577: NOT
85578: OR
85579: IFFALSE 85583
// exit ;
85581: GO 85858
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
85583: LD_ADDR_VAR 0 2
85587: PUSH
85588: LD_VAR 0 1
85592: PPUSH
85593: LD_VAR 0 2
85597: PPUSH
85598: LD_INT 1
85600: PPUSH
85601: LD_INT 1
85603: PPUSH
85604: CALL 32315 0 4
85608: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
85609: LD_ADDR_VAR 0 5
85613: PUSH
85614: LD_EXP 128
85618: PPUSH
85619: LD_VAR 0 1
85623: PPUSH
85624: CALL 31665 0 2
85628: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
85629: LD_EXP 129
85633: PUSH
85634: LD_VAR 0 5
85638: ARRAY
85639: PUSH
85640: LD_EXP 130
85644: LESS
85645: IFFALSE 85834
// begin for i := 1 to vehicles do
85647: LD_ADDR_VAR 0 4
85651: PUSH
85652: DOUBLE
85653: LD_INT 1
85655: DEC
85656: ST_TO_ADDR
85657: LD_VAR 0 2
85661: PUSH
85662: FOR_TO
85663: IFFALSE 85832
// begin if hackTanksCaptured [ index ] = hackLimit then
85665: LD_EXP 129
85669: PUSH
85670: LD_VAR 0 5
85674: ARRAY
85675: PUSH
85676: LD_EXP 130
85680: EQUAL
85681: IFFALSE 85685
// break ;
85683: GO 85832
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
85685: LD_ADDR_EXP 132
85689: PUSH
85690: LD_EXP 132
85694: PPUSH
85695: LD_VAR 0 5
85699: PPUSH
85700: LD_EXP 132
85704: PUSH
85705: LD_VAR 0 5
85709: ARRAY
85710: PUSH
85711: LD_INT 1
85713: PLUS
85714: PPUSH
85715: CALL_OW 1
85719: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
85720: LD_ADDR_EXP 129
85724: PUSH
85725: LD_EXP 129
85729: PPUSH
85730: LD_VAR 0 5
85734: PUSH
85735: LD_EXP 129
85739: PUSH
85740: LD_VAR 0 5
85744: ARRAY
85745: PUSH
85746: LD_INT 1
85748: PLUS
85749: PUSH
85750: EMPTY
85751: LIST
85752: LIST
85753: PPUSH
85754: LD_VAR 0 2
85758: PUSH
85759: LD_VAR 0 4
85763: ARRAY
85764: PUSH
85765: LD_VAR 0 2
85769: PUSH
85770: LD_VAR 0 4
85774: ARRAY
85775: PPUSH
85776: CALL_OW 255
85780: PUSH
85781: EMPTY
85782: LIST
85783: LIST
85784: PPUSH
85785: CALL 31880 0 3
85789: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
85790: LD_VAR 0 2
85794: PUSH
85795: LD_VAR 0 4
85799: ARRAY
85800: PPUSH
85801: LD_VAR 0 1
85805: PPUSH
85806: CALL_OW 255
85810: PPUSH
85811: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
85815: LD_VAR 0 2
85819: PUSH
85820: LD_VAR 0 4
85824: ARRAY
85825: PPUSH
85826: CALL_OW 141
// end ;
85830: GO 85662
85832: POP
85833: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85834: LD_VAR 0 1
85838: PPUSH
85839: LD_EXP 129
85843: PUSH
85844: LD_VAR 0 5
85848: ARRAY
85849: PUSH
85850: LD_INT 0
85852: PLUS
85853: PPUSH
85854: CALL_OW 505
// end ;
85858: LD_VAR 0 3
85862: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
85863: LD_INT 0
85865: PPUSH
85866: PPUSH
85867: PPUSH
85868: PPUSH
// if not hack in hackTanks then
85869: LD_VAR 0 1
85873: PUSH
85874: LD_EXP 128
85878: IN
85879: NOT
85880: IFFALSE 85884
// exit ;
85882: GO 86124
// index := GetElementIndex ( hackTanks , hack ) ;
85884: LD_ADDR_VAR 0 4
85888: PUSH
85889: LD_EXP 128
85893: PPUSH
85894: LD_VAR 0 1
85898: PPUSH
85899: CALL 31665 0 2
85903: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
85904: LD_ADDR_VAR 0 3
85908: PUSH
85909: DOUBLE
85910: LD_EXP 129
85914: PUSH
85915: LD_VAR 0 4
85919: ARRAY
85920: INC
85921: ST_TO_ADDR
85922: LD_INT 1
85924: PUSH
85925: FOR_DOWNTO
85926: IFFALSE 86098
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
85928: LD_ADDR_VAR 0 5
85932: PUSH
85933: LD_EXP 129
85937: PUSH
85938: LD_VAR 0 4
85942: ARRAY
85943: PUSH
85944: LD_VAR 0 3
85948: ARRAY
85949: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
85950: LD_VAR 0 5
85954: PUSH
85955: LD_INT 1
85957: ARRAY
85958: PPUSH
85959: CALL_OW 302
85963: NOT
85964: PUSH
85965: LD_VAR 0 5
85969: PUSH
85970: LD_INT 1
85972: ARRAY
85973: PPUSH
85974: CALL_OW 255
85978: PUSH
85979: LD_VAR 0 1
85983: PPUSH
85984: CALL_OW 255
85988: NONEQUAL
85989: OR
85990: IFFALSE 86096
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
85992: LD_VAR 0 5
85996: PUSH
85997: LD_INT 1
85999: ARRAY
86000: PPUSH
86001: CALL_OW 305
86005: PUSH
86006: LD_VAR 0 5
86010: PUSH
86011: LD_INT 1
86013: ARRAY
86014: PPUSH
86015: CALL_OW 255
86019: PUSH
86020: LD_VAR 0 1
86024: PPUSH
86025: CALL_OW 255
86029: EQUAL
86030: AND
86031: IFFALSE 86055
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
86033: LD_VAR 0 5
86037: PUSH
86038: LD_INT 1
86040: ARRAY
86041: PPUSH
86042: LD_VAR 0 5
86046: PUSH
86047: LD_INT 2
86049: ARRAY
86050: PPUSH
86051: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86055: LD_ADDR_EXP 129
86059: PUSH
86060: LD_EXP 129
86064: PPUSH
86065: LD_VAR 0 4
86069: PPUSH
86070: LD_EXP 129
86074: PUSH
86075: LD_VAR 0 4
86079: ARRAY
86080: PPUSH
86081: LD_VAR 0 3
86085: PPUSH
86086: CALL_OW 3
86090: PPUSH
86091: CALL_OW 1
86095: ST_TO_ADDR
// end ; end ;
86096: GO 85925
86098: POP
86099: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86100: LD_VAR 0 1
86104: PPUSH
86105: LD_EXP 129
86109: PUSH
86110: LD_VAR 0 4
86114: ARRAY
86115: PUSH
86116: LD_INT 0
86118: PLUS
86119: PPUSH
86120: CALL_OW 505
// end ;
86124: LD_VAR 0 2
86128: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
86129: LD_INT 0
86131: PPUSH
86132: PPUSH
86133: PPUSH
86134: PPUSH
// if not hack in hackTanks then
86135: LD_VAR 0 1
86139: PUSH
86140: LD_EXP 128
86144: IN
86145: NOT
86146: IFFALSE 86150
// exit ;
86148: GO 86235
// index := GetElementIndex ( hackTanks , hack ) ;
86150: LD_ADDR_VAR 0 5
86154: PUSH
86155: LD_EXP 128
86159: PPUSH
86160: LD_VAR 0 1
86164: PPUSH
86165: CALL 31665 0 2
86169: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86170: LD_ADDR_VAR 0 4
86174: PUSH
86175: DOUBLE
86176: LD_INT 1
86178: DEC
86179: ST_TO_ADDR
86180: LD_EXP 129
86184: PUSH
86185: LD_VAR 0 5
86189: ARRAY
86190: PUSH
86191: FOR_TO
86192: IFFALSE 86233
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
86194: LD_EXP 129
86198: PUSH
86199: LD_VAR 0 5
86203: ARRAY
86204: PUSH
86205: LD_VAR 0 4
86209: ARRAY
86210: PUSH
86211: LD_INT 1
86213: ARRAY
86214: PUSH
86215: LD_VAR 0 2
86219: EQUAL
86220: IFFALSE 86231
// KillUnit ( vehicle ) ;
86222: LD_VAR 0 2
86226: PPUSH
86227: CALL_OW 66
86231: GO 86191
86233: POP
86234: POP
// end ;
86235: LD_VAR 0 3
86239: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
86240: LD_EXP 133
86244: NOT
86245: IFFALSE 86280
86247: GO 86249
86249: DISABLE
// begin initMiner := true ;
86250: LD_ADDR_EXP 133
86254: PUSH
86255: LD_INT 1
86257: ST_TO_ADDR
// minersList := [ ] ;
86258: LD_ADDR_EXP 134
86262: PUSH
86263: EMPTY
86264: ST_TO_ADDR
// minerMinesList := [ ] ;
86265: LD_ADDR_EXP 135
86269: PUSH
86270: EMPTY
86271: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86272: LD_ADDR_EXP 136
86276: PUSH
86277: LD_INT 5
86279: ST_TO_ADDR
// end ;
86280: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86281: LD_EXP 133
86285: PUSH
86286: LD_INT 34
86288: PUSH
86289: LD_INT 81
86291: PUSH
86292: EMPTY
86293: LIST
86294: LIST
86295: PPUSH
86296: CALL_OW 69
86300: AND
86301: IFFALSE 86762
86303: GO 86305
86305: DISABLE
86306: LD_INT 0
86308: PPUSH
86309: PPUSH
86310: PPUSH
86311: PPUSH
// begin enable ;
86312: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86313: LD_ADDR_VAR 0 1
86317: PUSH
86318: LD_INT 34
86320: PUSH
86321: LD_INT 81
86323: PUSH
86324: EMPTY
86325: LIST
86326: LIST
86327: PPUSH
86328: CALL_OW 69
86332: PUSH
86333: FOR_IN
86334: IFFALSE 86406
// begin if not i in minersList then
86336: LD_VAR 0 1
86340: PUSH
86341: LD_EXP 134
86345: IN
86346: NOT
86347: IFFALSE 86404
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
86349: LD_ADDR_EXP 134
86353: PUSH
86354: LD_EXP 134
86358: PPUSH
86359: LD_EXP 134
86363: PUSH
86364: LD_INT 1
86366: PLUS
86367: PPUSH
86368: LD_VAR 0 1
86372: PPUSH
86373: CALL_OW 1
86377: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
86378: LD_ADDR_EXP 135
86382: PUSH
86383: LD_EXP 135
86387: PPUSH
86388: LD_EXP 135
86392: PUSH
86393: LD_INT 1
86395: PLUS
86396: PPUSH
86397: EMPTY
86398: PPUSH
86399: CALL_OW 1
86403: ST_TO_ADDR
// end end ;
86404: GO 86333
86406: POP
86407: POP
// for i := minerMinesList downto 1 do
86408: LD_ADDR_VAR 0 1
86412: PUSH
86413: DOUBLE
86414: LD_EXP 135
86418: INC
86419: ST_TO_ADDR
86420: LD_INT 1
86422: PUSH
86423: FOR_DOWNTO
86424: IFFALSE 86760
// begin if IsLive ( minersList [ i ] ) then
86426: LD_EXP 134
86430: PUSH
86431: LD_VAR 0 1
86435: ARRAY
86436: PPUSH
86437: CALL_OW 300
86441: IFFALSE 86469
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
86443: LD_EXP 134
86447: PUSH
86448: LD_VAR 0 1
86452: ARRAY
86453: PPUSH
86454: LD_EXP 135
86458: PUSH
86459: LD_VAR 0 1
86463: ARRAY
86464: PPUSH
86465: CALL_OW 505
// if not minerMinesList [ i ] then
86469: LD_EXP 135
86473: PUSH
86474: LD_VAR 0 1
86478: ARRAY
86479: NOT
86480: IFFALSE 86484
// continue ;
86482: GO 86423
// for j := minerMinesList [ i ] downto 1 do
86484: LD_ADDR_VAR 0 2
86488: PUSH
86489: DOUBLE
86490: LD_EXP 135
86494: PUSH
86495: LD_VAR 0 1
86499: ARRAY
86500: INC
86501: ST_TO_ADDR
86502: LD_INT 1
86504: PUSH
86505: FOR_DOWNTO
86506: IFFALSE 86756
// begin side := GetSide ( minersList [ i ] ) ;
86508: LD_ADDR_VAR 0 3
86512: PUSH
86513: LD_EXP 134
86517: PUSH
86518: LD_VAR 0 1
86522: ARRAY
86523: PPUSH
86524: CALL_OW 255
86528: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
86529: LD_ADDR_VAR 0 4
86533: PUSH
86534: LD_EXP 135
86538: PUSH
86539: LD_VAR 0 1
86543: ARRAY
86544: PUSH
86545: LD_VAR 0 2
86549: ARRAY
86550: PUSH
86551: LD_INT 1
86553: ARRAY
86554: PPUSH
86555: LD_EXP 135
86559: PUSH
86560: LD_VAR 0 1
86564: ARRAY
86565: PUSH
86566: LD_VAR 0 2
86570: ARRAY
86571: PUSH
86572: LD_INT 2
86574: ARRAY
86575: PPUSH
86576: CALL_OW 428
86580: ST_TO_ADDR
// if not tmp then
86581: LD_VAR 0 4
86585: NOT
86586: IFFALSE 86590
// continue ;
86588: GO 86505
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
86590: LD_VAR 0 4
86594: PUSH
86595: LD_INT 81
86597: PUSH
86598: LD_VAR 0 3
86602: PUSH
86603: EMPTY
86604: LIST
86605: LIST
86606: PPUSH
86607: CALL_OW 69
86611: IN
86612: PUSH
86613: LD_EXP 135
86617: PUSH
86618: LD_VAR 0 1
86622: ARRAY
86623: PUSH
86624: LD_VAR 0 2
86628: ARRAY
86629: PUSH
86630: LD_INT 1
86632: ARRAY
86633: PPUSH
86634: LD_EXP 135
86638: PUSH
86639: LD_VAR 0 1
86643: ARRAY
86644: PUSH
86645: LD_VAR 0 2
86649: ARRAY
86650: PUSH
86651: LD_INT 2
86653: ARRAY
86654: PPUSH
86655: CALL_OW 458
86659: AND
86660: IFFALSE 86754
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
86662: LD_EXP 135
86666: PUSH
86667: LD_VAR 0 1
86671: ARRAY
86672: PUSH
86673: LD_VAR 0 2
86677: ARRAY
86678: PUSH
86679: LD_INT 1
86681: ARRAY
86682: PPUSH
86683: LD_EXP 135
86687: PUSH
86688: LD_VAR 0 1
86692: ARRAY
86693: PUSH
86694: LD_VAR 0 2
86698: ARRAY
86699: PUSH
86700: LD_INT 2
86702: ARRAY
86703: PPUSH
86704: LD_VAR 0 3
86708: PPUSH
86709: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
86713: LD_ADDR_EXP 135
86717: PUSH
86718: LD_EXP 135
86722: PPUSH
86723: LD_VAR 0 1
86727: PPUSH
86728: LD_EXP 135
86732: PUSH
86733: LD_VAR 0 1
86737: ARRAY
86738: PPUSH
86739: LD_VAR 0 2
86743: PPUSH
86744: CALL_OW 3
86748: PPUSH
86749: CALL_OW 1
86753: ST_TO_ADDR
// end ; end ;
86754: GO 86505
86756: POP
86757: POP
// end ;
86758: GO 86423
86760: POP
86761: POP
// end ;
86762: PPOPN 4
86764: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
86765: LD_INT 0
86767: PPUSH
86768: PPUSH
// result := false ;
86769: LD_ADDR_VAR 0 4
86773: PUSH
86774: LD_INT 0
86776: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
86777: LD_VAR 0 1
86781: PPUSH
86782: CALL_OW 264
86786: PUSH
86787: LD_INT 81
86789: EQUAL
86790: NOT
86791: IFFALSE 86795
// exit ;
86793: GO 87035
// index := GetElementIndex ( minersList , unit ) ;
86795: LD_ADDR_VAR 0 5
86799: PUSH
86800: LD_EXP 134
86804: PPUSH
86805: LD_VAR 0 1
86809: PPUSH
86810: CALL 31665 0 2
86814: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
86815: LD_EXP 135
86819: PUSH
86820: LD_VAR 0 5
86824: ARRAY
86825: PUSH
86826: LD_EXP 136
86830: GREATEREQUAL
86831: IFFALSE 86835
// exit ;
86833: GO 87035
// ComMoveXY ( unit , x , y ) ;
86835: LD_VAR 0 1
86839: PPUSH
86840: LD_VAR 0 2
86844: PPUSH
86845: LD_VAR 0 3
86849: PPUSH
86850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86854: LD_INT 35
86856: PPUSH
86857: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
86861: LD_VAR 0 1
86865: PPUSH
86866: LD_VAR 0 2
86870: PPUSH
86871: LD_VAR 0 3
86875: PPUSH
86876: CALL 63001 0 3
86880: NOT
86881: PUSH
86882: LD_VAR 0 1
86886: PPUSH
86887: CALL_OW 314
86891: AND
86892: IFFALSE 86896
// exit ;
86894: GO 87035
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
86896: LD_VAR 0 2
86900: PPUSH
86901: LD_VAR 0 3
86905: PPUSH
86906: CALL_OW 428
86910: PUSH
86911: LD_VAR 0 1
86915: EQUAL
86916: PUSH
86917: LD_VAR 0 1
86921: PPUSH
86922: CALL_OW 314
86926: NOT
86927: AND
86928: IFFALSE 86854
// PlaySoundXY ( x , y , PlantMine ) ;
86930: LD_VAR 0 2
86934: PPUSH
86935: LD_VAR 0 3
86939: PPUSH
86940: LD_STRING PlantMine
86942: PPUSH
86943: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
86947: LD_VAR 0 2
86951: PPUSH
86952: LD_VAR 0 3
86956: PPUSH
86957: LD_VAR 0 1
86961: PPUSH
86962: CALL_OW 255
86966: PPUSH
86967: LD_INT 0
86969: PPUSH
86970: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
86974: LD_ADDR_EXP 135
86978: PUSH
86979: LD_EXP 135
86983: PPUSH
86984: LD_VAR 0 5
86988: PUSH
86989: LD_EXP 135
86993: PUSH
86994: LD_VAR 0 5
86998: ARRAY
86999: PUSH
87000: LD_INT 1
87002: PLUS
87003: PUSH
87004: EMPTY
87005: LIST
87006: LIST
87007: PPUSH
87008: LD_VAR 0 2
87012: PUSH
87013: LD_VAR 0 3
87017: PUSH
87018: EMPTY
87019: LIST
87020: LIST
87021: PPUSH
87022: CALL 31880 0 3
87026: ST_TO_ADDR
// result := true ;
87027: LD_ADDR_VAR 0 4
87031: PUSH
87032: LD_INT 1
87034: ST_TO_ADDR
// end ;
87035: LD_VAR 0 4
87039: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
87040: LD_INT 0
87042: PPUSH
87043: PPUSH
87044: PPUSH
// if not unit in minersList then
87045: LD_VAR 0 1
87049: PUSH
87050: LD_EXP 134
87054: IN
87055: NOT
87056: IFFALSE 87060
// exit ;
87058: GO 87452
// index := GetElementIndex ( minersList , unit ) ;
87060: LD_ADDR_VAR 0 6
87064: PUSH
87065: LD_EXP 134
87069: PPUSH
87070: LD_VAR 0 1
87074: PPUSH
87075: CALL 31665 0 2
87079: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87080: LD_ADDR_VAR 0 5
87084: PUSH
87085: DOUBLE
87086: LD_EXP 135
87090: PUSH
87091: LD_VAR 0 6
87095: ARRAY
87096: INC
87097: ST_TO_ADDR
87098: LD_INT 1
87100: PUSH
87101: FOR_DOWNTO
87102: IFFALSE 87263
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
87104: LD_EXP 135
87108: PUSH
87109: LD_VAR 0 6
87113: ARRAY
87114: PUSH
87115: LD_VAR 0 5
87119: ARRAY
87120: PUSH
87121: LD_INT 1
87123: ARRAY
87124: PUSH
87125: LD_VAR 0 2
87129: EQUAL
87130: PUSH
87131: LD_EXP 135
87135: PUSH
87136: LD_VAR 0 6
87140: ARRAY
87141: PUSH
87142: LD_VAR 0 5
87146: ARRAY
87147: PUSH
87148: LD_INT 2
87150: ARRAY
87151: PUSH
87152: LD_VAR 0 3
87156: EQUAL
87157: AND
87158: IFFALSE 87261
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87160: LD_EXP 135
87164: PUSH
87165: LD_VAR 0 6
87169: ARRAY
87170: PUSH
87171: LD_VAR 0 5
87175: ARRAY
87176: PUSH
87177: LD_INT 1
87179: ARRAY
87180: PPUSH
87181: LD_EXP 135
87185: PUSH
87186: LD_VAR 0 6
87190: ARRAY
87191: PUSH
87192: LD_VAR 0 5
87196: ARRAY
87197: PUSH
87198: LD_INT 2
87200: ARRAY
87201: PPUSH
87202: LD_VAR 0 1
87206: PPUSH
87207: CALL_OW 255
87211: PPUSH
87212: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87216: LD_ADDR_EXP 135
87220: PUSH
87221: LD_EXP 135
87225: PPUSH
87226: LD_VAR 0 6
87230: PPUSH
87231: LD_EXP 135
87235: PUSH
87236: LD_VAR 0 6
87240: ARRAY
87241: PPUSH
87242: LD_VAR 0 5
87246: PPUSH
87247: CALL_OW 3
87251: PPUSH
87252: CALL_OW 1
87256: ST_TO_ADDR
// exit ;
87257: POP
87258: POP
87259: GO 87452
// end ; end ;
87261: GO 87101
87263: POP
87264: POP
// for i := minerMinesList [ index ] downto 1 do
87265: LD_ADDR_VAR 0 5
87269: PUSH
87270: DOUBLE
87271: LD_EXP 135
87275: PUSH
87276: LD_VAR 0 6
87280: ARRAY
87281: INC
87282: ST_TO_ADDR
87283: LD_INT 1
87285: PUSH
87286: FOR_DOWNTO
87287: IFFALSE 87450
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87289: LD_EXP 135
87293: PUSH
87294: LD_VAR 0 6
87298: ARRAY
87299: PUSH
87300: LD_VAR 0 5
87304: ARRAY
87305: PUSH
87306: LD_INT 1
87308: ARRAY
87309: PPUSH
87310: LD_EXP 135
87314: PUSH
87315: LD_VAR 0 6
87319: ARRAY
87320: PUSH
87321: LD_VAR 0 5
87325: ARRAY
87326: PUSH
87327: LD_INT 2
87329: ARRAY
87330: PPUSH
87331: LD_VAR 0 2
87335: PPUSH
87336: LD_VAR 0 3
87340: PPUSH
87341: CALL_OW 298
87345: PUSH
87346: LD_INT 6
87348: LESS
87349: IFFALSE 87448
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87351: LD_EXP 135
87355: PUSH
87356: LD_VAR 0 6
87360: ARRAY
87361: PUSH
87362: LD_VAR 0 5
87366: ARRAY
87367: PUSH
87368: LD_INT 1
87370: ARRAY
87371: PPUSH
87372: LD_EXP 135
87376: PUSH
87377: LD_VAR 0 6
87381: ARRAY
87382: PUSH
87383: LD_VAR 0 5
87387: ARRAY
87388: PUSH
87389: LD_INT 2
87391: ARRAY
87392: PPUSH
87393: LD_VAR 0 1
87397: PPUSH
87398: CALL_OW 255
87402: PPUSH
87403: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87407: LD_ADDR_EXP 135
87411: PUSH
87412: LD_EXP 135
87416: PPUSH
87417: LD_VAR 0 6
87421: PPUSH
87422: LD_EXP 135
87426: PUSH
87427: LD_VAR 0 6
87431: ARRAY
87432: PPUSH
87433: LD_VAR 0 5
87437: PPUSH
87438: CALL_OW 3
87442: PPUSH
87443: CALL_OW 1
87447: ST_TO_ADDR
// end ; end ;
87448: GO 87286
87450: POP
87451: POP
// end ;
87452: LD_VAR 0 4
87456: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
87457: LD_INT 0
87459: PPUSH
87460: PPUSH
87461: PPUSH
87462: PPUSH
87463: PPUSH
87464: PPUSH
87465: PPUSH
87466: PPUSH
87467: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
87468: LD_VAR 0 1
87472: PPUSH
87473: CALL_OW 264
87477: PUSH
87478: LD_INT 81
87480: EQUAL
87481: NOT
87482: PUSH
87483: LD_VAR 0 1
87487: PUSH
87488: LD_EXP 134
87492: IN
87493: NOT
87494: OR
87495: IFFALSE 87499
// exit ;
87497: GO 87821
// index := GetElementIndex ( minersList , unit ) ;
87499: LD_ADDR_VAR 0 6
87503: PUSH
87504: LD_EXP 134
87508: PPUSH
87509: LD_VAR 0 1
87513: PPUSH
87514: CALL 31665 0 2
87518: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
87519: LD_ADDR_VAR 0 8
87523: PUSH
87524: LD_EXP 136
87528: PUSH
87529: LD_EXP 135
87533: PUSH
87534: LD_VAR 0 6
87538: ARRAY
87539: MINUS
87540: ST_TO_ADDR
// if not minesFreeAmount then
87541: LD_VAR 0 8
87545: NOT
87546: IFFALSE 87550
// exit ;
87548: GO 87821
// tmp := [ ] ;
87550: LD_ADDR_VAR 0 7
87554: PUSH
87555: EMPTY
87556: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
87557: LD_ADDR_VAR 0 5
87561: PUSH
87562: DOUBLE
87563: LD_INT 1
87565: DEC
87566: ST_TO_ADDR
87567: LD_VAR 0 8
87571: PUSH
87572: FOR_TO
87573: IFFALSE 87768
// begin _d := rand ( 0 , 5 ) ;
87575: LD_ADDR_VAR 0 11
87579: PUSH
87580: LD_INT 0
87582: PPUSH
87583: LD_INT 5
87585: PPUSH
87586: CALL_OW 12
87590: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
87591: LD_ADDR_VAR 0 12
87595: PUSH
87596: LD_INT 2
87598: PPUSH
87599: LD_INT 6
87601: PPUSH
87602: CALL_OW 12
87606: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
87607: LD_ADDR_VAR 0 9
87611: PUSH
87612: LD_VAR 0 2
87616: PPUSH
87617: LD_VAR 0 11
87621: PPUSH
87622: LD_VAR 0 12
87626: PPUSH
87627: CALL_OW 272
87631: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
87632: LD_ADDR_VAR 0 10
87636: PUSH
87637: LD_VAR 0 3
87641: PPUSH
87642: LD_VAR 0 11
87646: PPUSH
87647: LD_VAR 0 12
87651: PPUSH
87652: CALL_OW 273
87656: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
87657: LD_VAR 0 9
87661: PPUSH
87662: LD_VAR 0 10
87666: PPUSH
87667: CALL_OW 488
87671: PUSH
87672: LD_VAR 0 9
87676: PUSH
87677: LD_VAR 0 10
87681: PUSH
87682: EMPTY
87683: LIST
87684: LIST
87685: PUSH
87686: LD_VAR 0 7
87690: IN
87691: NOT
87692: AND
87693: PUSH
87694: LD_VAR 0 9
87698: PPUSH
87699: LD_VAR 0 10
87703: PPUSH
87704: CALL_OW 458
87708: NOT
87709: AND
87710: IFFALSE 87752
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
87712: LD_ADDR_VAR 0 7
87716: PUSH
87717: LD_VAR 0 7
87721: PPUSH
87722: LD_VAR 0 7
87726: PUSH
87727: LD_INT 1
87729: PLUS
87730: PPUSH
87731: LD_VAR 0 9
87735: PUSH
87736: LD_VAR 0 10
87740: PUSH
87741: EMPTY
87742: LIST
87743: LIST
87744: PPUSH
87745: CALL_OW 1
87749: ST_TO_ADDR
87750: GO 87766
// i := i - 1 ;
87752: LD_ADDR_VAR 0 5
87756: PUSH
87757: LD_VAR 0 5
87761: PUSH
87762: LD_INT 1
87764: MINUS
87765: ST_TO_ADDR
// end ;
87766: GO 87572
87768: POP
87769: POP
// for i in tmp do
87770: LD_ADDR_VAR 0 5
87774: PUSH
87775: LD_VAR 0 7
87779: PUSH
87780: FOR_IN
87781: IFFALSE 87819
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
87783: LD_VAR 0 1
87787: PPUSH
87788: LD_VAR 0 5
87792: PUSH
87793: LD_INT 1
87795: ARRAY
87796: PPUSH
87797: LD_VAR 0 5
87801: PUSH
87802: LD_INT 2
87804: ARRAY
87805: PPUSH
87806: CALL 86765 0 3
87810: NOT
87811: IFFALSE 87817
// exit ;
87813: POP
87814: POP
87815: GO 87821
87817: GO 87780
87819: POP
87820: POP
// end ;
87821: LD_VAR 0 4
87825: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
87826: LD_INT 0
87828: PPUSH
87829: PPUSH
87830: PPUSH
87831: PPUSH
87832: PPUSH
87833: PPUSH
87834: PPUSH
// if not GetClass ( unit ) = class_sniper then
87835: LD_VAR 0 1
87839: PPUSH
87840: CALL_OW 257
87844: PUSH
87845: LD_INT 5
87847: EQUAL
87848: NOT
87849: IFFALSE 87853
// exit ;
87851: GO 88241
// dist := 8 ;
87853: LD_ADDR_VAR 0 5
87857: PUSH
87858: LD_INT 8
87860: ST_TO_ADDR
// viewRange := 12 ;
87861: LD_ADDR_VAR 0 7
87865: PUSH
87866: LD_INT 12
87868: ST_TO_ADDR
// side := GetSide ( unit ) ;
87869: LD_ADDR_VAR 0 6
87873: PUSH
87874: LD_VAR 0 1
87878: PPUSH
87879: CALL_OW 255
87883: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
87884: LD_INT 61
87886: PPUSH
87887: LD_VAR 0 6
87891: PPUSH
87892: CALL_OW 321
87896: PUSH
87897: LD_INT 2
87899: EQUAL
87900: IFFALSE 87910
// viewRange := 16 ;
87902: LD_ADDR_VAR 0 7
87906: PUSH
87907: LD_INT 16
87909: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
87910: LD_VAR 0 1
87914: PPUSH
87915: LD_VAR 0 2
87919: PPUSH
87920: LD_VAR 0 3
87924: PPUSH
87925: CALL_OW 297
87929: PUSH
87930: LD_VAR 0 5
87934: GREATER
87935: IFFALSE 88014
// begin ComMoveXY ( unit , x , y ) ;
87937: LD_VAR 0 1
87941: PPUSH
87942: LD_VAR 0 2
87946: PPUSH
87947: LD_VAR 0 3
87951: PPUSH
87952: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87956: LD_INT 35
87958: PPUSH
87959: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
87963: LD_VAR 0 1
87967: PPUSH
87968: LD_VAR 0 2
87972: PPUSH
87973: LD_VAR 0 3
87977: PPUSH
87978: CALL 63001 0 3
87982: NOT
87983: IFFALSE 87987
// exit ;
87985: GO 88241
// until GetDistUnitXY ( unit , x , y ) < dist ;
87987: LD_VAR 0 1
87991: PPUSH
87992: LD_VAR 0 2
87996: PPUSH
87997: LD_VAR 0 3
88001: PPUSH
88002: CALL_OW 297
88006: PUSH
88007: LD_VAR 0 5
88011: LESS
88012: IFFALSE 87956
// end ; ComTurnXY ( unit , x , y ) ;
88014: LD_VAR 0 1
88018: PPUSH
88019: LD_VAR 0 2
88023: PPUSH
88024: LD_VAR 0 3
88028: PPUSH
88029: CALL_OW 118
// wait ( 5 ) ;
88033: LD_INT 5
88035: PPUSH
88036: CALL_OW 67
// _d := GetDir ( unit ) ;
88040: LD_ADDR_VAR 0 10
88044: PUSH
88045: LD_VAR 0 1
88049: PPUSH
88050: CALL_OW 254
88054: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88055: LD_ADDR_VAR 0 8
88059: PUSH
88060: LD_VAR 0 1
88064: PPUSH
88065: CALL_OW 250
88069: PPUSH
88070: LD_VAR 0 10
88074: PPUSH
88075: LD_VAR 0 5
88079: PPUSH
88080: CALL_OW 272
88084: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88085: LD_ADDR_VAR 0 9
88089: PUSH
88090: LD_VAR 0 1
88094: PPUSH
88095: CALL_OW 251
88099: PPUSH
88100: LD_VAR 0 10
88104: PPUSH
88105: LD_VAR 0 5
88109: PPUSH
88110: CALL_OW 273
88114: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88115: LD_VAR 0 8
88119: PPUSH
88120: LD_VAR 0 9
88124: PPUSH
88125: CALL_OW 488
88129: NOT
88130: IFFALSE 88134
// exit ;
88132: GO 88241
// ComAnimCustom ( unit , 1 ) ;
88134: LD_VAR 0 1
88138: PPUSH
88139: LD_INT 1
88141: PPUSH
88142: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
88146: LD_VAR 0 8
88150: PPUSH
88151: LD_VAR 0 9
88155: PPUSH
88156: LD_VAR 0 6
88160: PPUSH
88161: LD_VAR 0 7
88165: PPUSH
88166: CALL_OW 330
// repeat wait ( 1 ) ;
88170: LD_INT 1
88172: PPUSH
88173: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88177: LD_VAR 0 1
88181: PPUSH
88182: CALL_OW 316
88186: PUSH
88187: LD_VAR 0 1
88191: PPUSH
88192: CALL_OW 314
88196: OR
88197: PUSH
88198: LD_VAR 0 1
88202: PPUSH
88203: CALL_OW 302
88207: NOT
88208: OR
88209: PUSH
88210: LD_VAR 0 1
88214: PPUSH
88215: CALL_OW 301
88219: OR
88220: IFFALSE 88170
// RemoveSeeing ( _x , _y , side ) ;
88222: LD_VAR 0 8
88226: PPUSH
88227: LD_VAR 0 9
88231: PPUSH
88232: LD_VAR 0 6
88236: PPUSH
88237: CALL_OW 331
// end ; end_of_file
88241: LD_VAR 0 4
88245: RET
// export function StopOriginalMusic ; begin
88246: LD_INT 0
88248: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
88249: LD_STRING OW_FORCEMUSICDISABLE(true);
88251: PPUSH
88252: CALL_OW 559
// end ;
88256: LD_VAR 0 1
88260: RET
// export function PlayOriginalMusic ; begin
88261: LD_INT 0
88263: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
88264: LD_STRING OW_FORCEMUSICDISABLE(false);
88266: PPUSH
88267: CALL_OW 559
// end ;
88271: LD_VAR 0 1
88275: RET
// export function PlayCustomMusic ( track , callback ) ; begin
88276: LD_INT 0
88278: PPUSH
// StopOriginalMusic ;
88279: CALL 88246 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
88283: LD_STRING playMusic("
88285: PUSH
88286: LD_VAR 0 1
88290: STR
88291: PUSH
88292: LD_STRING ", "
88294: STR
88295: PUSH
88296: LD_VAR 0 2
88300: STR
88301: PUSH
88302: LD_STRING ")
88304: STR
88305: PPUSH
88306: CALL_OW 559
// end ;
88310: LD_VAR 0 3
88314: RET
