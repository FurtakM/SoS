// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 34 0 0
// InitEvents ;
   8: CALL 226 0 0
// PrepareRussian ;
  12: CALL 1019 0 0
// PrepareArabian ;
  16: CALL 250 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// end ;
  33: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver ; function Init ; begin
  34: LD_INT 0
  36: PPUSH
// debug := true ;
  37: LD_ADDR_EXP 1
  41: PUSH
  42: LD_INT 1
  44: ST_TO_ADDR
// hasNormalScene := false ;
  45: LD_ADDR_EXP 5
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 07_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 07_
  60: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 01_JohnnySaved
  68: PPUSH
  69: LD_INT 0
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// hasVodka := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  85: LD_ADDR_EXP 7
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// hasStimDrugs := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// hasExplosions := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// americanContact := false ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// hasWeapons := false ;
 117: LD_ADDR_EXP 19
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// hasSniperRifle := false ;
 125: LD_ADDR_EXP 11
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// hasScout := false ;
 133: LD_ADDR_EXP 12
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// hasMethanol := false ;
 141: LD_ADDR_EXP 13
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// heikeSquad := [ ] ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: EMPTY
 155: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 156: LD_ADDR_EXP 15
 160: PUSH
 161: LD_INT 10
 163: PPUSH
 164: LD_INT 21
 166: PUSH
 167: LD_INT 3
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PPUSH
 174: CALL_OW 70
 178: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 179: LD_ADDR_EXP 16
 183: PUSH
 184: EMPTY
 185: ST_TO_ADDR
// isAlarm := false ;
 186: LD_ADDR_EXP 17
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 194: LD_ADDR_EXP 18
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// hasRevolver := false ;
 202: LD_ADDR_EXP 8
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// heikeHasRevolver := false ;
 210: LD_ADDR_EXP 20
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// enable ( 1 ) ;
 218: LD_INT 1
 220: ENABLE_MARKED
// end ;
 221: LD_VAR 0 1
 225: RET
// export eventCenterCamOnHeike , eventShowPlace ; function InitEvents ; begin
 226: LD_INT 0
 228: PPUSH
// eventCenterCamOnHeike := 1 ;
 229: LD_ADDR_EXP 21
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// eventShowPlace := 1 ;
 237: LD_ADDR_EXP 22
 241: PUSH
 242: LD_INT 1
 244: ST_TO_ADDR
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i ; begin
 250: LD_INT 0
 252: PPUSH
 253: PPUSH
// uc_side := 8 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 8
 261: ST_TO_ADDR
// uc_nation := 2 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 2
 269: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 270: LD_INT 0
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 0
 278: PPUSH
 279: CALL_OW 380
// CreateHuman ;
 283: CALL_OW 44
// uc_side := 4 ;
 287: LD_ADDR_OWVAR 20
 291: PUSH
 292: LD_INT 4
 294: ST_TO_ADDR
// uc_nation := 1 ;
 295: LD_ADDR_OWVAR 21
 299: PUSH
 300: LD_INT 1
 302: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 303: LD_ADDR_EXP 35
 307: PUSH
 308: LD_STRING 07_Americans
 310: PPUSH
 311: CALL_OW 31
 315: ST_TO_ADDR
// if americanSquad < 5 then
 316: LD_EXP 35
 320: PUSH
 321: LD_INT 5
 323: LESS
 324: IFFALSE 381
// begin for i := americanSquad to 5 do
 326: LD_ADDR_VAR 0 2
 330: PUSH
 331: DOUBLE
 332: LD_EXP 35
 336: DEC
 337: ST_TO_ADDR
 338: LD_INT 5
 340: PUSH
 341: FOR_TO
 342: IFFALSE 379
// begin PrepareHuman ( false , 2 , 6 ) ;
 344: LD_INT 0
 346: PPUSH
 347: LD_INT 2
 349: PPUSH
 350: LD_INT 6
 352: PPUSH
 353: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 357: LD_ADDR_EXP 35
 361: PUSH
 362: LD_EXP 35
 366: PPUSH
 367: CALL_OW 44
 371: PPUSH
 372: CALL 45331 0 2
 376: ST_TO_ADDR
// end ;
 377: GO 341
 379: POP
 380: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 381: LD_ADDR_EXP 37
 385: PUSH
 386: LD_STRING UsCommander
 388: PPUSH
 389: LD_EXP 1
 393: NOT
 394: PPUSH
 395: LD_STRING 07_
 397: PPUSH
 398: CALL 7947 0 3
 402: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Doug ) ;
 403: LD_ADDR_EXP 35
 407: PUSH
 408: LD_EXP 35
 412: PPUSH
 413: LD_EXP 37
 417: PPUSH
 418: CALL 45331 0 2
 422: ST_TO_ADDR
// if johnnySaved or debug then
 423: LD_EXP 3
 427: PUSH
 428: LD_EXP 1
 432: OR
 433: IFFALSE 468
// begin Harris := NewCharacter ( Harris ) ;
 435: LD_ADDR_EXP 36
 439: PUSH
 440: LD_STRING Harris
 442: PPUSH
 443: CALL_OW 25
 447: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Harris ) ;
 448: LD_ADDR_EXP 35
 452: PUSH
 453: LD_EXP 35
 457: PPUSH
 458: LD_EXP 36
 462: PPUSH
 463: CALL 45331 0 2
 467: ST_TO_ADDR
// end ; uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := 2 ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 484: LD_ADDR_EXP 23
 488: PUSH
 489: LD_STRING Heike
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 2
 502: PPUSH
 503: CALL 7947 0 3
 507: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 508: LD_ADDR_EXP 26
 512: PUSH
 513: LD_STRING Ibrahim
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 2
 526: PPUSH
 527: CALL 7947 0 3
 531: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Givi
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 2
 550: PPUSH
 551: CALL 7947 0 3
 555: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 556: LD_ADDR_EXP 27
 560: PUSH
 561: LD_STRING Kamil
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 2
 574: PPUSH
 575: CALL 7947 0 3
 579: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 580: LD_ADDR_EXP 28
 584: PUSH
 585: LD_STRING Kaia
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 2
 598: PPUSH
 599: CALL 7947 0 3
 603: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 604: LD_ADDR_EXP 29
 608: PUSH
 609: LD_STRING Sophia
 611: PPUSH
 612: LD_EXP 1
 616: NOT
 617: PPUSH
 618: LD_EXP 2
 622: PPUSH
 623: CALL 7947 0 3
 627: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 628: LD_ADDR_EXP 30
 632: PUSH
 633: LD_STRING Markov
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_EXP 2
 646: PPUSH
 647: CALL 7947 0 3
 651: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 652: LD_ADDR_EXP 33
 656: PUSH
 657: LD_STRING Aviradze
 659: PPUSH
 660: LD_EXP 1
 664: NOT
 665: PPUSH
 666: LD_EXP 2
 670: PPUSH
 671: CALL 7947 0 3
 675: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 676: LD_ADDR_EXP 32
 680: PUSH
 681: LD_STRING Kurt
 683: PPUSH
 684: LD_EXP 1
 688: NOT
 689: PPUSH
 690: LD_EXP 2
 694: PPUSH
 695: CALL 7947 0 3
 699: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 700: LD_ADDR_EXP 25
 704: PUSH
 705: LD_STRING Mike
 707: PPUSH
 708: LD_EXP 1
 712: NOT
 713: PPUSH
 714: LD_EXP 2
 718: PPUSH
 719: CALL 7947 0 3
 723: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 724: LD_ADDR_EXP 31
 728: PUSH
 729: LD_STRING Olaf
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: LD_STRING 
 737: PPUSH
 738: CALL 7947 0 3
 742: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 743: LD_ADDR_EXP 34
 747: PUSH
 748: LD_STRING 07_others
 750: PPUSH
 751: CALL_OW 31
 755: ST_TO_ADDR
// end ;
 756: LD_VAR 0 1
 760: RET
// export function PrepareGame ; begin
 761: LD_INT 0
 763: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 764: LD_EXP 23
 768: PPUSH
 769: LD_INT 23
 771: PPUSH
 772: CALL_OW 52
// if Givi then
 776: LD_EXP 24
 780: IFFALSE 818
// begin SetSide ( Givi , 5 ) ;
 782: LD_EXP 24
 786: PPUSH
 787: LD_INT 5
 789: PPUSH
 790: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 794: LD_EXP 24
 798: PPUSH
 799: LD_INT 9
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: CALL_OW 49
// ComHold ( Givi ) ;
 809: LD_EXP 24
 813: PPUSH
 814: CALL_OW 140
// end ; if Markov then
 818: LD_EXP 30
 822: IFFALSE 848
// begin SetSide ( Markov , 5 ) ;
 824: LD_EXP 30
 828: PPUSH
 829: LD_INT 5
 831: PPUSH
 832: CALL_OW 235
// PlaceHumanInUnit ( Markov , ruFac ) ;
 836: LD_EXP 30
 840: PPUSH
 841: LD_INT 61
 843: PPUSH
 844: CALL_OW 52
// end ; if Olaf then
 848: LD_EXP 31
 852: IFFALSE 893
// begin SetSide ( Olaf , 5 ) ;
 854: LD_EXP 31
 858: PPUSH
 859: LD_INT 5
 861: PPUSH
 862: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
 866: LD_EXP 31
 870: PPUSH
 871: LD_INT 17
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
 881: LD_EXP 31
 885: PPUSH
 886: LD_INT 3
 888: PPUSH
 889: CALL 48487 0 2
// end ; if Kamil then
 893: LD_EXP 27
 897: IFFALSE 923
// begin SetSide ( Kamil , 5 ) ;
 899: LD_EXP 27
 903: PPUSH
 904: LD_INT 5
 906: PPUSH
 907: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
 911: LD_EXP 27
 915: PPUSH
 916: LD_INT 109
 918: PPUSH
 919: CALL_OW 52
// end ; if Kurt then
 923: LD_EXP 32
 927: IFFALSE 953
// begin SetSide ( Kurt , 5 ) ;
 929: LD_EXP 32
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
 941: LD_EXP 32
 945: PPUSH
 946: LD_INT 6
 948: PPUSH
 949: CALL_OW 52
// end ; if Kaia then
 953: LD_EXP 28
 957: IFFALSE 983
// begin SetSide ( Kaia , 5 ) ;
 959: LD_EXP 28
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
 971: LD_EXP 28
 975: PPUSH
 976: LD_INT 147
 978: PPUSH
 979: CALL_OW 52
// end ; end ;
 983: LD_VAR 0 1
 987: RET
// export function SetClassKaiaRevolver ; begin
 988: LD_INT 0
 990: PPUSH
// if IsOk ( Kaia ) then
 991: LD_EXP 28
 995: PPUSH
 996: CALL_OW 302
1000: IFFALSE 1014
// SetClass ( Kaia , 34 ) ;
1002: LD_EXP 28
1006: PPUSH
1007: LD_INT 34
1009: PPUSH
1010: CALL_OW 336
// end ; end_of_file
1014: LD_VAR 0 1
1018: RET
// export russianKillers ; export function PrepareRussian ; var i , tmp ; begin
1019: LD_INT 0
1021: PPUSH
1022: PPUSH
1023: PPUSH
// uc_side := 3 ;
1024: LD_ADDR_OWVAR 20
1028: PUSH
1029: LD_INT 3
1031: ST_TO_ADDR
// uc_nation := 3 ;
1032: LD_ADDR_OWVAR 21
1036: PUSH
1037: LD_INT 3
1039: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1040: LD_ADDR_VAR 0 2
1044: PUSH
1045: LD_INT 21
1047: PUSH
1048: LD_INT 3
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: PPUSH
1055: CALL_OW 69
1059: PUSH
1060: FOR_IN
1061: IFFALSE 1077
// SetBLevel ( i , 7 ) ;
1063: LD_VAR 0 2
1067: PPUSH
1068: LD_INT 7
1070: PPUSH
1071: CALL_OW 241
1075: GO 1060
1077: POP
1078: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: LD_INT 22
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 2
1096: PUSH
1097: LD_INT 30
1099: PUSH
1100: LD_INT 0
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 30
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PPUSH
1126: CALL_OW 69
1130: PUSH
1131: FOR_IN
1132: IFFALSE 1176
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
1134: LD_VAR 0 2
1138: PPUSH
1139: CALL_OW 274
1143: PPUSH
1144: LD_INT 1
1146: PPUSH
1147: LD_INT 1000
1149: PPUSH
1150: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
1154: LD_VAR 0 2
1158: PPUSH
1159: CALL_OW 274
1163: PPUSH
1164: LD_INT 2
1166: PPUSH
1167: LD_INT 1000
1169: PPUSH
1170: CALL_OW 277
// end ;
1174: GO 1131
1176: POP
1177: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1178: LD_ADDR_VAR 0 2
1182: PUSH
1183: LD_INT 22
1185: PUSH
1186: LD_INT 3
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: PUSH
1193: LD_INT 30
1195: PUSH
1196: LD_INT 32
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PPUSH
1207: CALL_OW 69
1211: PUSH
1212: FOR_IN
1213: IFFALSE 1247
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
1215: LD_INT 0
1217: PPUSH
1218: LD_INT 5
1220: PUSH
1221: LD_OWVAR 67
1225: PLUS
1226: PPUSH
1227: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
1231: CALL_OW 44
1235: PPUSH
1236: LD_VAR 0 2
1240: PPUSH
1241: CALL_OW 52
// end ;
1245: GO 1212
1247: POP
1248: POP
// end ;
1249: LD_VAR 0 1
1253: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
1254: LD_INT 0
1256: PPUSH
1257: PPUSH
1258: PPUSH
1259: PPUSH
// uc_side := 3 ;
1260: LD_ADDR_OWVAR 20
1264: PUSH
1265: LD_INT 3
1267: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
1268: LD_ADDR_OWVAR 21
1272: PUSH
1273: LD_INT 1
1275: PPUSH
1276: LD_INT 3
1278: PPUSH
1279: CALL_OW 12
1283: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
1284: LD_ADDR_VAR 0 4
1288: PUSH
1289: LD_INT 5
1291: PPUSH
1292: LD_INT 0
1294: PPUSH
1295: CALL_OW 517
1299: ST_TO_ADDR
// for i := 1 to 3 do
1300: LD_ADDR_VAR 0 2
1304: PUSH
1305: DOUBLE
1306: LD_INT 1
1308: DEC
1309: ST_TO_ADDR
1310: LD_INT 3
1312: PUSH
1313: FOR_TO
1314: IFFALSE 1383
// begin PrepareHuman ( false , 33 , 0 ) ;
1316: LD_INT 0
1318: PPUSH
1319: LD_INT 33
1321: PPUSH
1322: LD_INT 0
1324: PPUSH
1325: CALL_OW 380
// un := CreateHuman ;
1329: LD_ADDR_VAR 0 3
1333: PUSH
1334: CALL_OW 44
1338: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
1339: LD_VAR 0 3
1343: PPUSH
1344: LD_VAR 0 4
1348: PUSH
1349: LD_INT 1
1351: ARRAY
1352: PUSH
1353: LD_VAR 0 2
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 4
1363: PUSH
1364: LD_INT 2
1366: ARRAY
1367: PUSH
1368: LD_VAR 0 2
1372: ARRAY
1373: PPUSH
1374: LD_INT 1
1376: PPUSH
1377: CALL_OW 601
// end ;
1381: GO 1313
1383: POP
1384: POP
// end ;
1385: LD_VAR 0 1
1389: RET
// export function PrepareFirstScene ; var i , un ; begin
1390: LD_INT 0
1392: PPUSH
1393: PPUSH
1394: PPUSH
// uc_side := 4 ;
1395: LD_ADDR_OWVAR 20
1399: PUSH
1400: LD_INT 4
1402: ST_TO_ADDR
// uc_nation := 1 ;
1403: LD_ADDR_OWVAR 21
1407: PUSH
1408: LD_INT 1
1410: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
1411: LD_INT 0
1413: PPUSH
1414: LD_INT 33
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL_OW 380
// for i := 1 to 2 do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: DOUBLE
1430: LD_INT 1
1432: DEC
1433: ST_TO_ADDR
1434: LD_INT 2
1436: PUSH
1437: FOR_TO
1438: IFFALSE 1503
// begin un := CreateHuman ;
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: CALL_OW 44
1449: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1450: LD_VAR 0 3
1454: PPUSH
1455: LD_INT 1
1457: PPUSH
1458: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_INT 6
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
1477: LD_VAR 0 3
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: CALL 48487 0 2
// SetLives ( un , 300 ) ;
1489: LD_VAR 0 3
1493: PPUSH
1494: LD_INT 300
1496: PPUSH
1497: CALL_OW 234
// end ;
1501: GO 1437
1503: POP
1504: POP
// uc_side := 3 ;
1505: LD_ADDR_OWVAR 20
1509: PUSH
1510: LD_INT 3
1512: ST_TO_ADDR
// uc_nation := 3 ;
1513: LD_ADDR_OWVAR 21
1517: PUSH
1518: LD_INT 3
1520: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
1521: LD_INT 1
1523: PPUSH
1524: LD_INT 5
1526: PPUSH
1527: CALL_OW 381
// for i := 1 to 3 do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: DOUBLE
1537: LD_INT 1
1539: DEC
1540: ST_TO_ADDR
1541: LD_INT 3
1543: PUSH
1544: FOR_TO
1545: IFFALSE 1618
// begin un := CreateHuman ;
1547: LD_ADDR_VAR 0 3
1551: PUSH
1552: CALL_OW 44
1556: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
1557: LD_ADDR_EXP 38
1561: PUSH
1562: LD_EXP 38
1566: PPUSH
1567: LD_VAR 0 3
1571: PPUSH
1572: CALL 45331 0 2
1576: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1577: LD_VAR 0 3
1581: PPUSH
1582: LD_INT 4
1584: PPUSH
1585: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
1589: LD_VAR 0 3
1593: PPUSH
1594: LD_INT 7
1596: PPUSH
1597: LD_INT 0
1599: PPUSH
1600: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
1604: LD_VAR 0 3
1608: PPUSH
1609: LD_INT 4
1611: PPUSH
1612: CALL 48487 0 2
// end ;
1616: GO 1544
1618: POP
1619: POP
// un := CreateHuman ;
1620: LD_ADDR_VAR 0 3
1624: PUSH
1625: CALL_OW 44
1629: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 37 , false ) ;
1630: LD_VAR 0 3
1634: PPUSH
1635: LD_INT 124
1637: PPUSH
1638: LD_INT 37
1640: PPUSH
1641: LD_INT 0
1643: PPUSH
1644: CALL_OW 48
// SetDir ( un , 3 ) ;
1648: LD_VAR 0 3
1652: PPUSH
1653: LD_INT 3
1655: PPUSH
1656: CALL_OW 233
// ComLookAtDir ( un , 3 ) ;
1660: LD_VAR 0 3
1664: PPUSH
1665: LD_INT 3
1667: PPUSH
1668: CALL 48487 0 2
// end ;
1672: LD_VAR 0 1
1676: RET
// export function SpawnAdditionalRuGuards ; begin
1677: LD_INT 0
1679: PPUSH
// end ; end_of_file
1680: LD_VAR 0 1
1684: RET
// export function Action ; var speaker , i , tmp ; begin
1685: LD_INT 0
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
// Video ( true ) ;
1691: LD_INT 1
1693: PPUSH
1694: CALL 45303 0 1
// hasNormalScene := Kaia or Givi ;
1698: LD_ADDR_EXP 5
1702: PUSH
1703: LD_EXP 28
1707: PUSH
1708: LD_EXP 24
1712: OR
1713: ST_TO_ADDR
// if hasNormalScene then
1714: LD_EXP 5
1718: IFFALSE 1953
// begin for i in americanSquad do
1720: LD_ADDR_VAR 0 3
1724: PUSH
1725: LD_EXP 35
1729: PUSH
1730: FOR_IN
1731: IFFALSE 1777
// begin SetClass ( i , 33 ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 33
1740: PPUSH
1741: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
1745: LD_VAR 0 3
1749: PPUSH
1750: LD_INT 78
1752: PPUSH
1753: LD_INT 16
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: CALL_OW 50
// ComHold ( i ) ;
1766: LD_VAR 0 3
1770: PPUSH
1771: CALL_OW 140
// end ;
1775: GO 1730
1777: POP
1778: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: LD_EXP 25
1788: PUSH
1789: LD_EXP 26
1793: PUSH
1794: LD_EXP 27
1798: PUSH
1799: LD_EXP 28
1803: PUSH
1804: LD_EXP 29
1808: PUSH
1809: LD_EXP 30
1813: PUSH
1814: LD_EXP 31
1818: PUSH
1819: LD_EXP 32
1823: PUSH
1824: LD_EXP 24
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_EXP 34
1844: UNION
1845: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
1846: LD_EXP 23
1850: PPUSH
1851: LD_INT 33
1853: PPUSH
1854: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
1858: LD_EXP 23
1862: PPUSH
1863: LD_INT 117
1865: PPUSH
1866: LD_INT 24
1868: PPUSH
1869: LD_INT 3
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL 47473 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
1879: LD_EXP 23
1883: PPUSH
1884: LD_INT 123
1886: PPUSH
1887: LD_INT 39
1889: PPUSH
1890: CALL_OW 118
// for i in tmp do
1894: LD_ADDR_VAR 0 3
1898: PUSH
1899: LD_VAR 0 4
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1951
// begin SetClass ( i , 33 ) ;
1907: LD_VAR 0 3
1911: PPUSH
1912: LD_INT 33
1914: PPUSH
1915: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
1919: LD_VAR 0 3
1923: PPUSH
1924: LD_INT 3
1926: PPUSH
1927: LD_INT 0
1929: PPUSH
1930: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
1934: LD_VAR 0 3
1938: PPUSH
1939: LD_INT 113
1941: PPUSH
1942: LD_INT 16
1944: PPUSH
1945: CALL_OW 118
// end ;
1949: GO 1904
1951: POP
1952: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
1953: LD_INT 124
1955: PPUSH
1956: LD_INT 39
1958: PPUSH
1959: CALL_OW 86
// PrepareDeadBodies ;
1963: CALL 1254 0 0
// PrepareFirstScene ;
1967: CALL 1390 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
1971: LD_INT 152
1973: PPUSH
1974: LD_INT 65
1976: PPUSH
1977: LD_INT 2
1979: PPUSH
1980: LD_INT 70
1982: NEG
1983: PPUSH
1984: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
1988: LD_INT 152
1990: PPUSH
1991: LD_INT 65
1993: PPUSH
1994: LD_INT 2
1996: PPUSH
1997: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
2001: LD_INT 122
2003: PPUSH
2004: LD_INT 40
2006: PPUSH
2007: LD_INT 2
2009: PPUSH
2010: LD_INT 8
2012: NEG
2013: PPUSH
2014: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
2018: LD_INT 124
2020: PPUSH
2021: LD_INT 37
2023: PPUSH
2024: CALL_OW 86
// speaker := HexInfo ( 124 , 37 ) ;
2028: LD_ADDR_VAR 0 2
2032: PUSH
2033: LD_INT 124
2035: PPUSH
2036: LD_INT 37
2038: PPUSH
2039: CALL_OW 428
2043: ST_TO_ADDR
// Say ( speaker , DRum-Execution-1 ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_STRING DRum-Execution-1
2051: PPUSH
2052: CALL_OW 88
// Say ( speaker , DRum-Execution-2 ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_STRING DRum-Execution-2
2063: PPUSH
2064: CALL_OW 88
// wait ( 0 0$01 ) ;
2068: LD_INT 35
2070: PPUSH
2071: CALL_OW 67
// Say ( speaker , DRum-Execution-3 ) ;
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_STRING DRum-Execution-3
2082: PPUSH
2083: CALL_OW 88
// wait ( 0 0$1 ) ;
2087: LD_INT 35
2089: PPUSH
2090: CALL_OW 67
// Say ( speaker , DRum-Execution-4 ) ;
2094: LD_VAR 0 2
2098: PPUSH
2099: LD_STRING DRum-Execution-4
2101: PPUSH
2102: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
2106: LD_EXP 38
2110: PUSH
2111: LD_INT 1
2113: ARRAY
2114: PPUSH
2115: LD_INT 122
2117: PPUSH
2118: LD_INT 39
2120: PPUSH
2121: CALL_OW 428
2125: PPUSH
2126: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
2130: LD_EXP 38
2134: PUSH
2135: LD_INT 2
2137: ARRAY
2138: PPUSH
2139: LD_INT 123
2141: PPUSH
2142: LD_INT 41
2144: PPUSH
2145: CALL_OW 428
2149: PPUSH
2150: CALL_OW 115
// AddComHold ( russianKillers ) ;
2154: LD_EXP 38
2158: PPUSH
2159: CALL_OW 200
// wait ( 0 0$1 ) ;
2163: LD_INT 35
2165: PPUSH
2166: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
2170: LD_INT 122
2172: PPUSH
2173: LD_INT 40
2175: PPUSH
2176: LD_INT 2
2178: PPUSH
2179: CALL_OW 331
// if hasNormalScene then
2183: LD_EXP 5
2187: IFFALSE 2195
// ActionNormal else
2189: CALL 2204 0 0
2193: GO 2199
// ActionAdditional ;
2195: CALL 3926 0 0
// end ;
2199: LD_VAR 0 1
2203: RET
// function ActionNormal ; var i , tmp ; begin
2204: LD_INT 0
2206: PPUSH
2207: PPUSH
2208: PPUSH
// CenterNowOnUnits ( Heike ) ;
2209: LD_EXP 23
2213: PPUSH
2214: CALL_OW 87
// wait ( 0 0$1 ) ;
2218: LD_INT 35
2220: PPUSH
2221: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
2225: LD_EXP 23
2229: PPUSH
2230: LD_INT 115
2232: PPUSH
2233: LD_INT 19
2235: PPUSH
2236: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
2240: LD_EXP 23
2244: PPUSH
2245: LD_INT 113
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 178
// wait ( 0 0$2 ) ;
2255: LD_INT 70
2257: PPUSH
2258: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
2262: LD_EXP 23
2266: PPUSH
2267: LD_STRING DH-Conspiracy-1
2269: PPUSH
2270: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
2274: LD_EXP 28
2278: PPUSH
2279: LD_STRING DK-Conspiracy-2
2281: PPUSH
2282: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
2286: LD_EXP 24
2290: PPUSH
2291: LD_STRING DG-Conspiracy-3
2293: PPUSH
2294: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
2298: LD_EXP 24
2302: PPUSH
2303: LD_STRING DG-Conspiracy-4
2305: PPUSH
2306: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
2310: LD_EXP 23
2314: PPUSH
2315: LD_STRING DH-Conspiracy-5
2317: PPUSH
2318: CALL_OW 88
// if IsOk ( Kamil ) then
2322: LD_EXP 27
2326: PPUSH
2327: CALL_OW 302
2331: IFFALSE 2389
// begin hasVodka := true ;
2333: LD_ADDR_EXP 4
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
2341: LD_EXP 27
2345: PPUSH
2346: LD_STRING DKam-Conspiracy-6
2348: PPUSH
2349: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
2353: LD_EXP 27
2357: PPUSH
2358: LD_STRING DKam-Conspiracy-7
2360: PPUSH
2361: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
2365: LD_EXP 27
2369: PPUSH
2370: LD_STRING DKam-Conspiracy-8
2372: PPUSH
2373: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
2377: LD_EXP 27
2381: PPUSH
2382: LD_STRING DKam-Conspiracy-9
2384: PPUSH
2385: CALL_OW 88
// end ; if IsOk ( Sophia ) then
2389: LD_EXP 29
2393: PPUSH
2394: CALL_OW 302
2398: IFFALSE 2572
// begin americanContact := true ;
2400: LD_ADDR_EXP 10
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// Say ( Sophia , DS-Conspiracy-10 ) ;
2408: LD_EXP 29
2412: PPUSH
2413: LD_STRING DS-Conspiracy-10
2415: PPUSH
2416: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
2420: LD_EXP 30
2424: PPUSH
2425: LD_STRING DM-Conspiracy-11
2427: PPUSH
2428: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
2432: LD_EXP 29
2436: PPUSH
2437: LD_STRING DS-Conspiracy-12
2439: PPUSH
2440: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
2444: LD_INT 84
2446: PPUSH
2447: LD_INT 19
2449: PPUSH
2450: LD_INT 105
2452: PPUSH
2453: CALL 7306 0 3
// if johnnySaved then
2457: LD_EXP 3
2461: IFFALSE 2501
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
2463: LD_EXP 29
2467: PPUSH
2468: LD_STRING DS-Conspiracy-13
2470: PPUSH
2471: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
2475: LD_EXP 23
2479: PPUSH
2480: LD_STRING DH-Conspiracy-14
2482: PPUSH
2483: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
2487: LD_EXP 29
2491: PPUSH
2492: LD_STRING DH-Conspiracy-15
2494: PPUSH
2495: CALL_OW 88
// end else
2499: GO 2537
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
2501: LD_EXP 29
2505: PPUSH
2506: LD_STRING DS-Conspiracy-a-13
2508: PPUSH
2509: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
2513: LD_EXP 23
2517: PPUSH
2518: LD_STRING DH-Conspiracy-a-14
2520: PPUSH
2521: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
2525: LD_EXP 29
2529: PPUSH
2530: LD_STRING DH-Conspiracy-a-15
2532: PPUSH
2533: CALL_OW 88
// end ; if IsOk ( Givi ) then
2537: LD_EXP 24
2541: PPUSH
2542: CALL_OW 302
2546: IFFALSE 2572
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
2548: LD_EXP 24
2552: PPUSH
2553: LD_STRING DG-Conspiracy-a-16
2555: PPUSH
2556: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
2560: LD_EXP 23
2564: PPUSH
2565: LD_STRING DH-Conspiracy-a-17
2567: PPUSH
2568: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
2572: LD_EXP 23
2576: PPUSH
2577: LD_STRING DH-Conspiracy-16
2579: PPUSH
2580: CALL_OW 88
// if IsOk ( Givi ) then
2584: LD_EXP 24
2588: PPUSH
2589: CALL_OW 302
2593: IFFALSE 2851
// begin hasStimDrugs := true ;
2595: LD_ADDR_EXP 9
2599: PUSH
2600: LD_INT 1
2602: ST_TO_ADDR
// Say ( Givi , DG-Conspiracy-17 ) ;
2603: LD_EXP 24
2607: PPUSH
2608: LD_STRING DG-Conspiracy-17
2610: PPUSH
2611: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
2615: LD_INT 87
2617: PPUSH
2618: LD_INT 2
2620: PPUSH
2621: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
2625: LD_INT 184
2627: PPUSH
2628: LD_INT 95
2630: PPUSH
2631: LD_INT 105
2633: PPUSH
2634: CALL 7306 0 3
// SetSide ( drugsLab , 3 ) ;
2638: LD_INT 87
2640: PPUSH
2641: LD_INT 3
2643: PPUSH
2644: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
2648: LD_EXP 24
2652: PPUSH
2653: LD_STRING DG-Conspiracy-18
2655: PPUSH
2656: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
2660: LD_EXP 24
2664: PPUSH
2665: LD_STRING DG-Conspiracy-19
2667: PPUSH
2668: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
2672: LD_EXP 24
2676: PPUSH
2677: LD_STRING DG-Conspiracy-20
2679: PPUSH
2680: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
2684: LD_EXP 23
2688: PPUSH
2689: LD_STRING DH-Conspiracy-21
2691: PPUSH
2692: CALL_OW 88
// if IsOk ( Kaia ) then
2696: LD_EXP 28
2700: PPUSH
2701: CALL_OW 302
2705: IFFALSE 2772
// begin hasExplosions := true ;
2707: LD_ADDR_EXP 6
2711: PUSH
2712: LD_INT 1
2714: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-22 ) ;
2715: LD_EXP 28
2719: PPUSH
2720: LD_STRING DK-Conspiracy-22
2722: PPUSH
2723: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
2727: LD_INT 73
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 235
// ShowPlace ( 166 , 104 , 0 0$3 ) ;
2737: LD_INT 166
2739: PPUSH
2740: LD_INT 104
2742: PPUSH
2743: LD_INT 105
2745: PPUSH
2746: CALL 7306 0 3
// SetSide ( barExplosion , 3 ) ;
2750: LD_INT 73
2752: PPUSH
2753: LD_INT 3
2755: PPUSH
2756: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
2760: LD_EXP 28
2764: PPUSH
2765: LD_STRING DK-Conspiracy-23
2767: PPUSH
2768: CALL_OW 88
// end ; if IsOk ( Olaf ) then
2772: LD_EXP 31
2776: PPUSH
2777: CALL_OW 302
2781: IFFALSE 2851
// begin hasExplosionsInFactory := true ;
2783: LD_ADDR_EXP 7
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
2791: LD_EXP 31
2795: PPUSH
2796: LD_STRING DO-Conspiracy-24
2798: PPUSH
2799: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
2803: LD_INT 175
2805: PPUSH
2806: LD_INT 54
2808: PPUSH
2809: LD_INT 70
2811: PPUSH
2812: CALL 7306 0 3
// if IsOk ( Markov ) then
2816: LD_EXP 30
2820: PPUSH
2821: CALL_OW 302
2825: IFFALSE 2851
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
2827: LD_EXP 30
2831: PPUSH
2832: LD_STRING DMar-Conspiracy-25
2834: PPUSH
2835: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
2839: LD_EXP 30
2843: PPUSH
2844: LD_STRING DMar-Conspiracy-26
2846: PPUSH
2847: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
2851: LD_EXP 32
2855: PPUSH
2856: CALL_OW 302
2860: PUSH
2861: LD_EXP 28
2865: PPUSH
2866: CALL_OW 302
2870: AND
2871: IFFALSE 3316
// begin hasWeapons := true ;
2873: LD_ADDR_EXP 19
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// Say ( Kurt , DKs-Conspiracy-27 ) ;
2881: LD_EXP 32
2885: PPUSH
2886: LD_STRING DKs-Conspiracy-27
2888: PPUSH
2889: CALL_OW 88
// if IsOk ( Givi ) then
2893: LD_EXP 24
2897: PPUSH
2898: CALL_OW 302
2902: IFFALSE 2918
// Say ( Givi , DG-Conspiracy-28 ) else
2904: LD_EXP 24
2908: PPUSH
2909: LD_STRING DG-Conspiracy-28
2911: PPUSH
2912: CALL_OW 88
2916: GO 2983
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
2918: LD_EXP 34
2922: PPUSH
2923: LD_INT 26
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PPUSH
2933: CALL_OW 72
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: PPUSH
2942: LD_STRING DArm-Conspiracy-a-28
2944: PPUSH
2945: CALL_OW 88
2949: NOT
2950: IFFALSE 2983
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
2952: LD_EXP 34
2956: PPUSH
2957: LD_INT 26
2959: PUSH
2960: LD_INT 2
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 72
2971: PUSH
2972: LD_INT 1
2974: ARRAY
2975: PPUSH
2976: LD_STRING DArf-Conspiracy-a-28
2978: PPUSH
2979: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
2983: LD_EXP 32
2987: PPUSH
2988: LD_STRING DKs-Conspiracy-29
2990: PPUSH
2991: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
2995: LD_INT 192
2997: PPUSH
2998: LD_INT 122
3000: PPUSH
3001: LD_INT 105
3003: PPUSH
3004: CALL 7306 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
3008: LD_EXP 32
3012: PPUSH
3013: LD_STRING DKs-Conspiracy-30
3015: PPUSH
3016: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
3020: LD_EXP 28
3024: PPUSH
3025: LD_STRING DK-Conspiracy-31
3027: PPUSH
3028: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
3032: LD_EXP 30
3036: PPUSH
3037: LD_STRING DMar-Conspiracy-33
3039: PPUSH
3040: CALL_OW 88
3044: NOT
3045: PUSH
3046: LD_EXP 34
3050: AND
3051: IFFALSE 3118
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
3053: LD_EXP 34
3057: PPUSH
3058: LD_INT 26
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PPUSH
3068: CALL_OW 72
3072: PUSH
3073: LD_INT 1
3075: ARRAY
3076: PPUSH
3077: LD_STRING DArm-Conspiracy-a-34
3079: PPUSH
3080: CALL_OW 88
3084: NOT
3085: IFFALSE 3118
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
3087: LD_EXP 34
3091: PPUSH
3092: LD_INT 26
3094: PUSH
3095: LD_INT 2
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PPUSH
3102: CALL_OW 72
3106: PUSH
3107: LD_INT 1
3109: ARRAY
3110: PPUSH
3111: LD_STRING DArf-Conspiracy-a-34
3113: PPUSH
3114: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
3118: LD_EXP 28
3122: PPUSH
3123: LD_STRING DK-Conspiracy-34
3125: PPUSH
3126: CALL_OW 88
// if IsOk ( Markov ) then
3130: LD_EXP 30
3134: PPUSH
3135: CALL_OW 302
3139: IFFALSE 3224
// begin hasSniperRifle := true ;
3141: LD_ADDR_EXP 11
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
3149: LD_EXP 30
3153: PPUSH
3154: LD_STRING DMar-Conspiracy-35
3156: PPUSH
3157: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
3161: LD_EXP 28
3165: PPUSH
3166: LD_STRING DK-Conspiracy-36
3168: PPUSH
3169: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
3173: LD_EXP 30
3177: PPUSH
3178: LD_STRING DMar-Conspiracy-37
3180: PPUSH
3181: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
3185: LD_EXP 30
3189: PPUSH
3190: LD_STRING DMar-Conspiracy-38
3192: PPUSH
3193: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
3197: LD_INT 137
3199: PPUSH
3200: LD_INT 98
3202: PPUSH
3203: LD_INT 105
3205: PPUSH
3206: CALL 7306 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
3210: LD_EXP 30
3214: PPUSH
3215: LD_STRING DMar-Conspiracy-39
3217: PPUSH
3218: CALL_OW 88
// end else
3222: GO 3316
// if heikeSecondSquad then
3224: LD_EXP 34
3228: IFFALSE 3316
// begin hasSniperRifle := true ;
3230: LD_ADDR_EXP 11
3234: PUSH
3235: LD_INT 1
3237: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
3238: LD_INT 137
3240: PPUSH
3241: LD_INT 98
3243: PPUSH
3244: LD_INT 105
3246: PPUSH
3247: CALL 7306 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
3251: LD_EXP 34
3255: PPUSH
3256: LD_INT 26
3258: PUSH
3259: LD_INT 1
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PPUSH
3266: CALL_OW 72
3270: PUSH
3271: LD_INT 1
3273: ARRAY
3274: PPUSH
3275: LD_STRING DArm-Conspiracy-a-35
3277: PPUSH
3278: CALL_OW 88
3282: NOT
3283: IFFALSE 3316
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
3285: LD_EXP 34
3289: PPUSH
3290: LD_INT 26
3292: PUSH
3293: LD_INT 2
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 72
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: LD_STRING DArf-Conspiracy-a-35
3311: PPUSH
3312: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
3316: LD_EXP 23
3320: PPUSH
3321: LD_STRING DH-Conspiracy-40
3323: PPUSH
3324: CALL_OW 88
// if IsOk ( Mike ) then
3328: LD_EXP 25
3332: PPUSH
3333: CALL_OW 302
3337: IFFALSE 3396
// begin hasScout := true ;
3339: LD_ADDR_EXP 12
3343: PUSH
3344: LD_INT 1
3346: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
3347: LD_EXP 25
3351: PPUSH
3352: LD_STRING DM-Conspiracy-41
3354: PPUSH
3355: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
3359: LD_EXP 25
3363: PPUSH
3364: LD_STRING DM-Conspiracy-42
3366: PPUSH
3367: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
3371: LD_INT 73
3373: PPUSH
3374: LD_INT 102
3376: PPUSH
3377: LD_INT 105
3379: PPUSH
3380: CALL 7306 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
3384: LD_EXP 25
3388: PPUSH
3389: LD_STRING DM-Conspiracy-43
3391: PPUSH
3392: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
3396: LD_EXP 4
3400: PUSH
3401: LD_EXP 28
3405: PPUSH
3406: CALL_OW 302
3410: AND
3411: PUSH
3412: LD_EXP 32
3416: PPUSH
3417: CALL_OW 302
3421: AND
3422: IFFALSE 3468
// begin hasMethanol := true ;
3424: LD_ADDR_EXP 13
3428: PUSH
3429: LD_INT 1
3431: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
3432: LD_EXP 28
3436: PPUSH
3437: LD_STRING DK-Conspiracy-44
3439: PPUSH
3440: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
3444: LD_EXP 28
3448: PPUSH
3449: LD_STRING DK-Conspiracy-45
3451: PPUSH
3452: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
3456: LD_EXP 27
3460: PPUSH
3461: LD_STRING DKam-Conspiracy-46
3463: PPUSH
3464: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
3468: LD_EXP 23
3472: PPUSH
3473: LD_STRING DH-Conspiracy-47
3475: PPUSH
3476: CALL_OW 88
// wait ( 0 0$1 ) ;
3480: LD_INT 35
3482: PPUSH
3483: CALL_OW 67
// your_side := 8 ;
3487: LD_ADDR_OWVAR 2
3491: PUSH
3492: LD_INT 8
3494: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
3495: LD_INT 1
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 2
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 21
3522: PUSH
3523: LD_INT 1
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PPUSH
3534: CALL_OW 69
3538: PUSH
3539: FOR_IN
3540: IFFALSE 3553
// RemoveUnit ( i ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
3551: GO 3539
3553: POP
3554: POP
// wait ( 0 0$0.3 ) ;
3555: LD_INT 10
3557: PPUSH
3558: CALL_OW 67
// Query ( StartInfo1 ) ;
3562: LD_STRING StartInfo1
3564: PPUSH
3565: CALL_OW 97
// wait ( 0 0$1 ) ;
3569: LD_INT 35
3571: PPUSH
3572: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
3576: LD_STRING colors_night.txt
3578: PPUSH
3579: CALL_OW 544
// Query ( StartInfo2 ) ;
3583: LD_STRING StartInfo2
3585: PPUSH
3586: CALL_OW 97
// PrepareGame ;
3590: CALL 761 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3594: LD_INT 152
3596: PPUSH
3597: LD_INT 65
3599: PPUSH
3600: LD_INT 2
3602: PPUSH
3603: LD_INT 70
3605: NEG
3606: PPUSH
3607: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3611: LD_INT 152
3613: PPUSH
3614: LD_INT 65
3616: PPUSH
3617: LD_INT 2
3619: PPUSH
3620: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
3624: LD_INT 133
3626: PPUSH
3627: LD_INT 76
3629: PPUSH
3630: LD_INT 2
3632: PPUSH
3633: LD_INT 6
3635: NEG
3636: PPUSH
3637: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
3641: LD_INT 152
3643: PPUSH
3644: LD_INT 65
3646: PPUSH
3647: LD_INT 8
3649: PPUSH
3650: LD_INT 70
3652: NEG
3653: PPUSH
3654: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
3658: LD_INT 152
3660: PPUSH
3661: LD_INT 65
3663: PPUSH
3664: LD_INT 8
3666: PPUSH
3667: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
3671: LD_INT 133
3673: PPUSH
3674: LD_INT 76
3676: PPUSH
3677: LD_INT 8
3679: PPUSH
3680: LD_INT 6
3682: NEG
3683: PPUSH
3684: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
3688: LD_INT 23
3690: PPUSH
3691: CALL_OW 87
// dialogue_skipped := false ;
3695: LD_ADDR_OWVAR 59
3699: PUSH
3700: LD_INT 0
3702: ST_TO_ADDR
// Say ( Heike , DH-Escape-1 ) ;
3703: LD_EXP 23
3707: PPUSH
3708: LD_STRING DH-Escape-1
3710: PPUSH
3711: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
3715: LD_EXP 23
3719: PPUSH
3720: LD_STRING DH-Escape-2
3722: PPUSH
3723: CALL_OW 88
// StartLockerMinigame ;
3727: CALL 7610 0 0
// Say ( Heike , DH-Escape-4 ) ;
3731: LD_EXP 23
3735: PPUSH
3736: LD_STRING DH-Escape-4
3738: PPUSH
3739: CALL_OW 88
// wait ( 0 0$3 ) ;
3743: LD_INT 105
3745: PPUSH
3746: CALL_OW 67
// your_side := 2 ;
3750: LD_ADDR_OWVAR 2
3754: PUSH
3755: LD_INT 2
3757: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
3758: LD_EXP 23
3762: PPUSH
3763: CALL_OW 122
// AddComMoveXY ( Heike , 128 , 64 ) ;
3767: LD_EXP 23
3771: PPUSH
3772: LD_INT 128
3774: PPUSH
3775: LD_INT 64
3777: PPUSH
3778: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
3782: LD_INT 35
3784: PPUSH
3785: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
3789: LD_EXP 23
3793: PPUSH
3794: LD_INT 128
3796: PPUSH
3797: LD_INT 64
3799: PPUSH
3800: CALL_OW 307
3804: IFFALSE 3782
// ComHold ( Heike ) ;
3806: LD_EXP 23
3810: PPUSH
3811: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
3815: LD_EXP 23
3819: PPUSH
3820: LD_STRING DH-Start-1
3822: PPUSH
3823: CALL_OW 88
// if not americanContact then
3827: LD_EXP 10
3831: NOT
3832: IFFALSE 3848
// Say ( Heike , DH-Start-c-2 ) else
3834: LD_EXP 23
3838: PPUSH
3839: LD_STRING DH-Start-c-2
3841: PPUSH
3842: CALL_OW 88
3846: GO 3880
// if johnnySaved then
3848: LD_EXP 3
3852: IFFALSE 3868
// Say ( Heike , DH-Start-a-2 ) else
3854: LD_EXP 23
3858: PPUSH
3859: LD_STRING DH-Start-a-2
3861: PPUSH
3862: CALL_OW 88
3866: GO 3880
// Say ( Heike , DH-Start-b-2 ) ;
3868: LD_EXP 23
3872: PPUSH
3873: LD_STRING DH-Start-b-2
3875: PPUSH
3876: CALL_OW 88
// Video ( false ) ;
3880: LD_INT 0
3882: PPUSH
3883: CALL 45303 0 1
// tick := 0 ;
3887: LD_ADDR_OWVAR 1
3891: PUSH
3892: LD_INT 0
3894: ST_TO_ADDR
// if americanContact then
3895: LD_EXP 10
3899: IFFALSE 3910
// ChangeMissionObjectives ( M1a ) else
3901: LD_STRING M1a
3903: PPUSH
3904: CALL_OW 337
3908: GO 3917
// ChangeMissionObjectives ( M1 ) ;
3910: LD_STRING M1
3912: PPUSH
3913: CALL_OW 337
// SaveForQuickRestart ;
3917: CALL_OW 22
// end ;
3921: LD_VAR 0 1
3925: RET
// function ActionAdditional ; var i , un , tmp ; begin
3926: LD_INT 0
3928: PPUSH
3929: PPUSH
3930: PPUSH
3931: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
3932: LD_INT 115
3934: PPUSH
3935: LD_INT 27
3937: PPUSH
3938: LD_INT 2
3940: PPUSH
3941: LD_INT 6
3943: NEG
3944: PPUSH
3945: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
3949: LD_EXP 23
3953: PPUSH
3954: LD_INT 115
3956: PPUSH
3957: LD_INT 27
3959: PPUSH
3960: CALL_OW 428
3964: PPUSH
3965: CALL_OW 52
// SetClass ( Heike , 33 ) ;
3969: LD_EXP 23
3973: PPUSH
3974: LD_INT 33
3976: PPUSH
3977: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
3981: LD_INT 124
3983: PPUSH
3984: LD_INT 39
3986: PPUSH
3987: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
3991: LD_EXP 23
3995: PPUSH
3996: LD_STRING DH-Fail-1
3998: PPUSH
3999: CALL_OW 88
// RaiseSailEvent ( eventCenterCamOnHeike ) ;
4003: LD_EXP 21
4007: PPUSH
4008: CALL_OW 427
// ComExit ( Heike ) ;
4012: LD_EXP 23
4016: PPUSH
4017: CALL 45729 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
4021: LD_EXP 23
4025: PPUSH
4026: LD_INT 109
4028: PPUSH
4029: LD_INT 33
4031: PPUSH
4032: CALL_OW 171
// AddComHold ( Heike ) ;
4036: LD_EXP 23
4040: PPUSH
4041: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
4045: LD_INT 115
4047: PPUSH
4048: LD_INT 27
4050: PPUSH
4051: LD_INT 2
4053: PPUSH
4054: CALL_OW 331
// wait ( 0 0$2 ) ;
4058: LD_INT 70
4060: PPUSH
4061: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4065: LD_INT 35
4067: PPUSH
4068: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
4072: LD_EXP 23
4076: PPUSH
4077: LD_INT 109
4079: PPUSH
4080: LD_INT 33
4082: PPUSH
4083: CALL_OW 307
4087: IFFALSE 4065
// Say ( Heike , DH-Fail-2 ) ;
4089: LD_EXP 23
4093: PPUSH
4094: LD_STRING DH-Fail-2
4096: PPUSH
4097: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
4101: LD_EXP 23
4105: PPUSH
4106: LD_INT 111
4108: PPUSH
4109: LD_INT 48
4111: PPUSH
4112: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4116: LD_INT 35
4118: PPUSH
4119: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
4123: LD_EXP 23
4127: PPUSH
4128: LD_INT 111
4130: PPUSH
4131: LD_INT 48
4133: PPUSH
4134: CALL_OW 297
4138: PUSH
4139: LD_INT 4
4141: LESS
4142: IFFALSE 4116
// AddComMoveXY ( Heike , 106 , 72 ) ;
4144: LD_EXP 23
4148: PPUSH
4149: LD_INT 106
4151: PPUSH
4152: LD_INT 72
4154: PPUSH
4155: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
4159: LD_EXP 23
4163: PPUSH
4164: LD_INT 103
4166: PPUSH
4167: LD_INT 80
4169: PPUSH
4170: CALL_OW 171
// uc_side := 3 ;
4174: LD_ADDR_OWVAR 20
4178: PUSH
4179: LD_INT 3
4181: ST_TO_ADDR
// uc_nation := 3 ;
4182: LD_ADDR_OWVAR 21
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
4190: LD_INT 1
4192: PPUSH
4193: LD_INT 1
4195: PPUSH
4196: LD_INT 6
4198: PPUSH
4199: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
4203: LD_ADDR_OWVAR 29
4207: PUSH
4208: LD_INT 12
4210: PUSH
4211: LD_INT 12
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: ST_TO_ADDR
// un := CreateHuman ;
4218: LD_ADDR_VAR 0 3
4222: PUSH
4223: CALL_OW 44
4227: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
4228: LD_VAR 0 3
4232: PPUSH
4233: LD_INT 134
4235: PPUSH
4236: LD_INT 52
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL 47473 0 5
// ComTurnUnit ( un , Heike ) ;
4249: LD_VAR 0 3
4253: PPUSH
4254: LD_EXP 23
4258: PPUSH
4259: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
4263: LD_VAR 0 3
4267: PPUSH
4268: LD_EXP 23
4272: PPUSH
4273: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
4277: LD_VAR 0 3
4281: PPUSH
4282: LD_STRING DRum-Fail-3
4284: PPUSH
4285: CALL_OW 88
// for i := 1 to 3 do
4289: LD_ADDR_VAR 0 2
4293: PUSH
4294: DOUBLE
4295: LD_INT 1
4297: DEC
4298: ST_TO_ADDR
4299: LD_INT 3
4301: PUSH
4302: FOR_TO
4303: IFFALSE 4376
// begin PrepareSoldier ( false , 10 ) ;
4305: LD_INT 0
4307: PPUSH
4308: LD_INT 10
4310: PPUSH
4311: CALL_OW 381
// un := CreateHuman ;
4315: LD_ADDR_VAR 0 3
4319: PUSH
4320: CALL_OW 44
4324: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4325: LD_ADDR_VAR 0 4
4329: PUSH
4330: LD_VAR 0 4
4334: PPUSH
4335: LD_VAR 0 3
4339: PPUSH
4340: CALL 45331 0 2
4344: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_INT 8
4352: PPUSH
4353: LD_INT 0
4355: PPUSH
4356: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
4360: LD_VAR 0 3
4364: PPUSH
4365: LD_EXP 23
4369: PPUSH
4370: CALL_OW 119
// end ;
4374: GO 4302
4376: POP
4377: POP
// repeat wait ( 0 0$1 ) ;
4378: LD_INT 35
4380: PPUSH
4381: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
4385: LD_VAR 0 4
4389: PPUSH
4390: LD_INT 101
4392: PUSH
4393: LD_INT 2
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PPUSH
4400: CALL_OW 72
4404: PUSH
4405: LD_INT 1
4407: GREATER
4408: IFFALSE 4378
// wait ( 0 0$1 ) ;
4410: LD_INT 35
4412: PPUSH
4413: CALL_OW 67
// DialogueOn ;
4417: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
4421: LD_EXP 23
4425: PPUSH
4426: LD_STRING DH-Fail-4
4428: PPUSH
4429: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
4433: LD_EXP 23
4437: PPUSH
4438: LD_STRING DH-Fail-5
4440: PPUSH
4441: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
4445: LD_EXP 23
4449: PPUSH
4450: LD_STRING DH-Fail-6
4452: PPUSH
4453: CALL_OW 88
// DialogueOff ;
4457: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
4461: LD_VAR 0 4
4465: PPUSH
4466: LD_EXP 23
4470: PPUSH
4471: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
4475: LD_INT 35
4477: PPUSH
4478: CALL_OW 67
// until IsDying ( Heike ) ;
4482: LD_EXP 23
4486: PPUSH
4487: CALL_OW 303
4491: IFFALSE 4475
// KillUnit ( Heike ) ;
4493: LD_EXP 23
4497: PPUSH
4498: CALL_OW 66
// wait ( 0 0$4 ) ;
4502: LD_INT 140
4504: PPUSH
4505: CALL_OW 67
// ResetFog ;
4509: CALL_OW 335
// DialogueOn ;
4513: CALL_OW 6
// dwait ( 0 0$1 ) ;
4517: LD_INT 35
4519: PPUSH
4520: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
4524: LD_ADDR_EXP 23
4528: PUSH
4529: LD_STRING Heike
4531: PPUSH
4532: LD_EXP 1
4536: NOT
4537: PPUSH
4538: LD_EXP 2
4542: PPUSH
4543: CALL 7947 0 3
4547: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
4548: LD_EXP 23
4552: PPUSH
4553: LD_STRING DH-Fail-7
4555: PPUSH
4556: CALL_OW 89
// DialogueOff ;
4560: CALL_OW 7
// YouLost ( Fail ) ;
4564: LD_STRING Fail
4566: PPUSH
4567: CALL_OW 104
// end ;
4571: LD_VAR 0 1
4575: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 do
4576: LD_INT 2
4578: PPUSH
4579: LD_INT 173
4581: PPUSH
4582: LD_INT 29
4584: PPUSH
4585: CALL_OW 293
4589: PUSH
4590: LD_EXP 23
4594: PPUSH
4595: LD_INT 173
4597: PPUSH
4598: LD_INT 29
4600: PPUSH
4601: CALL_OW 297
4605: PUSH
4606: LD_INT 6
4608: LESS
4609: AND
4610: IFFALSE 4627
4612: GO 4614
4614: DISABLE
// Say ( Heike , DH-EastRoad ) ;
4615: LD_EXP 23
4619: PPUSH
4620: LD_STRING DH-EastRoad
4622: PPUSH
4623: CALL_OW 88
4627: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 do
4628: LD_INT 2
4630: PPUSH
4631: LD_INT 149
4633: PPUSH
4634: LD_INT 3
4636: PPUSH
4637: CALL_OW 293
4641: PUSH
4642: LD_EXP 23
4646: PPUSH
4647: LD_INT 149
4649: PPUSH
4650: LD_INT 3
4652: PPUSH
4653: CALL_OW 297
4657: PUSH
4658: LD_INT 6
4660: LESS
4661: AND
4662: IFFALSE 4679
4664: GO 4666
4666: DISABLE
// Say ( Heike , DH-EastRoad ) ;
4667: LD_EXP 23
4671: PPUSH
4672: LD_STRING DH-EastRoad
4674: PPUSH
4675: CALL_OW 88
4679: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 do
4680: LD_INT 2
4682: PPUSH
4683: LD_INT 217
4685: PPUSH
4686: LD_INT 120
4688: PPUSH
4689: CALL_OW 293
4693: PUSH
4694: LD_EXP 23
4698: PPUSH
4699: LD_INT 217
4701: PPUSH
4702: LD_INT 120
4704: PPUSH
4705: CALL_OW 297
4709: PUSH
4710: LD_INT 6
4712: LESS
4713: AND
4714: IFFALSE 4731
4716: GO 4718
4718: DISABLE
// Say ( Heike , DH-EastEnd ) ;
4719: LD_EXP 23
4723: PPUSH
4724: LD_STRING DH-EastEnd
4726: PPUSH
4727: CALL_OW 88
4731: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) do
4732: LD_EXP 23
4736: PPUSH
4737: LD_INT 11
4739: PPUSH
4740: CALL_OW 308
4744: IFFALSE 4782
4746: GO 4748
4748: DISABLE
// begin if not heikeSquad then
4749: LD_EXP 14
4753: NOT
4754: IFFALSE 4770
// Say ( Heike , DH-Hill ) else
4756: LD_EXP 23
4760: PPUSH
4761: LD_STRING DH-Hill
4763: PPUSH
4764: CALL_OW 88
4768: GO 4782
// Say ( Heike , DH-Hill-a ) ;
4770: LD_EXP 23
4774: PPUSH
4775: LD_STRING DH-Hill-a
4777: PPUSH
4778: CALL_OW 88
// end ;
4782: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) do var x , y , v ;
4783: LD_EXP 23
4787: PPUSH
4788: LD_INT 12
4790: PPUSH
4791: CALL_OW 308
4795: IFFALSE 4977
4797: GO 4799
4799: DISABLE
4800: LD_INT 0
4802: PPUSH
4803: PPUSH
4804: PPUSH
// begin DialogueOn ;
4805: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
4809: LD_EXP 23
4813: PPUSH
4814: CALL_OW 87
// x := GetX ( Heike ) ;
4818: LD_ADDR_VAR 0 1
4822: PUSH
4823: LD_EXP 23
4827: PPUSH
4828: CALL_OW 250
4832: ST_TO_ADDR
// y := GetY ( Heike ) ;
4833: LD_ADDR_VAR 0 2
4837: PUSH
4838: LD_EXP 23
4842: PPUSH
4843: CALL_OW 251
4847: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
4848: LD_VAR 0 1
4852: PPUSH
4853: LD_VAR 0 2
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: LD_INT 12
4863: NEG
4864: PPUSH
4865: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
4869: LD_VAR 0 1
4873: PPUSH
4874: LD_VAR 0 2
4878: PPUSH
4879: LD_INT 2
4881: PPUSH
4882: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
4886: LD_INT 2
4888: PUSH
4889: LD_INT 30
4891: PUSH
4892: LD_INT 32
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 30
4901: PUSH
4902: LD_INT 33
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: PPUSH
4914: CALL_OW 69
4918: IFFALSE 4930
// v := 3 else
4920: LD_ADDR_VAR 0 3
4924: PUSH
4925: LD_INT 3
4927: ST_TO_ADDR
4928: GO 4938
// v := 2 ;
4930: LD_ADDR_VAR 0 3
4934: PUSH
4935: LD_INT 2
4937: ST_TO_ADDR
// disable ;
4938: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_STRING DH-Outpost-
4946: PUSH
4947: LD_INT 1
4949: PPUSH
4950: LD_VAR 0 3
4954: PPUSH
4955: CALL_OW 12
4959: STR
4960: PPUSH
4961: CALL_OW 88
// DialogueOff ;
4965: CALL_OW 7
// wait ( 0 0$10 ) ;
4969: LD_INT 350
4971: PPUSH
4972: CALL_OW 67
// enable ;
4976: ENABLE
// end ;
4977: PPOPN 3
4979: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 or AreInTheSameBuilding ( Givi , Heike ) do
4980: LD_INT 2
4982: PPUSH
4983: LD_EXP 24
4987: PPUSH
4988: CALL_OW 292
4992: PUSH
4993: LD_EXP 23
4997: PPUSH
4998: LD_EXP 24
5002: PPUSH
5003: CALL_OW 296
5007: PUSH
5008: LD_INT 6
5010: LESS
5011: AND
5012: PUSH
5013: LD_EXP 24
5017: PPUSH
5018: LD_EXP 23
5022: PPUSH
5023: CALL 7244 0 2
5027: OR
5028: IFFALSE 5134
5030: GO 5032
5032: DISABLE
// begin DialogueOn ;
5033: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
5037: LD_EXP 24
5041: PPUSH
5042: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
5046: LD_EXP 24
5050: PPUSH
5051: LD_EXP 23
5055: PPUSH
5056: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
5060: LD_EXP 23
5064: PPUSH
5065: LD_EXP 24
5069: PPUSH
5070: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
5074: LD_EXP 23
5078: PPUSH
5079: LD_STRING DH-Givi-1
5081: PPUSH
5082: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
5086: LD_EXP 24
5090: PPUSH
5091: LD_STRING DG-Givi-2
5093: PPUSH
5094: CALL_OW 88
// DialogueOff ;
5098: CALL_OW 7
// SetSide ( Givi , 2 ) ;
5102: LD_EXP 24
5106: PPUSH
5107: LD_INT 2
5109: PPUSH
5110: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
5114: LD_ADDR_EXP 14
5118: PUSH
5119: LD_EXP 14
5123: PPUSH
5124: LD_EXP 24
5128: PPUSH
5129: CALL 45331 0 2
5133: ST_TO_ADDR
// end ;
5134: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad do
5135: LD_EXP 23
5139: PPUSH
5140: LD_EXP 28
5144: PPUSH
5145: CALL_OW 296
5149: PUSH
5150: LD_INT 6
5152: LESS
5153: PUSH
5154: LD_EXP 28
5158: PPUSH
5159: CALL_OW 257
5163: PUSH
5164: LD_INT 33
5166: EQUAL
5167: AND
5168: PUSH
5169: LD_EXP 17
5173: NOT
5174: AND
5175: PUSH
5176: LD_EXP 28
5180: PPUSH
5181: CALL_OW 302
5185: AND
5186: PUSH
5187: LD_EXP 20
5191: AND
5192: PUSH
5193: LD_EXP 28
5197: PUSH
5198: LD_EXP 14
5202: IN
5203: AND
5204: IFFALSE 5233
5206: GO 5208
5208: DISABLE
// begin DialogueOn ;
5209: CALL_OW 6
// Say ( Heike , DH-Kaia-Reolver-2 ) ;
5213: LD_EXP 23
5217: PPUSH
5218: LD_STRING DH-Kaia-Reolver-2
5220: PPUSH
5221: CALL_OW 88
// SetClassKaiaRevolver ;
5225: CALL 988 0 0
// DialogueOff ;
5229: CALL_OW 7
// end ;
5233: END
// function SayHEmpty ( ) ; begin
5234: LD_INT 0
5236: PPUSH
// case rand ( 1 , 3 ) of 1 :
5237: LD_INT 1
5239: PPUSH
5240: LD_INT 3
5242: PPUSH
5243: CALL_OW 12
5247: PUSH
5248: LD_INT 1
5250: DOUBLE
5251: EQUAL
5252: IFTRUE 5256
5254: GO 5271
5256: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
5257: LD_EXP 23
5261: PPUSH
5262: LD_STRING DH-Empty-1
5264: PPUSH
5265: CALL_OW 88
5269: GO 5318
5271: LD_INT 2
5273: DOUBLE
5274: EQUAL
5275: IFTRUE 5279
5277: GO 5294
5279: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
5280: LD_EXP 23
5284: PPUSH
5285: LD_STRING DH-Empty-2
5287: PPUSH
5288: CALL_OW 88
5292: GO 5318
5294: LD_INT 3
5296: DOUBLE
5297: EQUAL
5298: IFTRUE 5302
5300: GO 5317
5302: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
5303: LD_EXP 23
5307: PPUSH
5308: LD_STRING DH-Empty-3
5310: PPUSH
5311: CALL_OW 88
5315: GO 5318
5317: POP
// end ;
5318: LD_VAR 0 1
5322: RET
// function SayHVisited ( ) ; begin
5323: LD_INT 0
5325: PPUSH
// case rand ( 1 , 3 ) of 1 :
5326: LD_INT 1
5328: PPUSH
5329: LD_INT 3
5331: PPUSH
5332: CALL_OW 12
5336: PUSH
5337: LD_INT 1
5339: DOUBLE
5340: EQUAL
5341: IFTRUE 5345
5343: GO 5360
5345: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
5346: LD_EXP 23
5350: PPUSH
5351: LD_STRING DH-Visited-1
5353: PPUSH
5354: CALL_OW 88
5358: GO 5407
5360: LD_INT 2
5362: DOUBLE
5363: EQUAL
5364: IFTRUE 5368
5366: GO 5383
5368: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
5369: LD_EXP 23
5373: PPUSH
5374: LD_STRING DH-Visited-2
5376: PPUSH
5377: CALL_OW 88
5381: GO 5407
5383: LD_INT 3
5385: DOUBLE
5386: EQUAL
5387: IFTRUE 5391
5389: GO 5406
5391: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
5392: LD_EXP 23
5396: PPUSH
5397: LD_STRING DH-Visited-3
5399: PPUSH
5400: CALL_OW 88
5404: GO 5407
5406: POP
// end ;
5407: LD_VAR 0 1
5411: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and IsOk ( Heike ) marked 1 do var i ;
5412: LD_EXP 17
5416: NOT
5417: PUSH
5418: LD_EXP 15
5422: AND
5423: PUSH
5424: LD_EXP 23
5428: PPUSH
5429: CALL_OW 302
5433: AND
5434: IFFALSE 5500
5436: GO 5438
5438: DISABLE
5439: LD_INT 0
5441: PPUSH
// begin enable ;
5442: ENABLE
// for i in entranceAllowedList do
5443: LD_ADDR_VAR 0 1
5447: PUSH
5448: LD_EXP 15
5452: PUSH
5453: FOR_IN
5454: IFFALSE 5498
// if InEntrance ( Heike , i ) then
5456: LD_EXP 23
5460: PPUSH
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL 7347 0 2
5470: IFFALSE 5496
// begin disable ( 1 ) ;
5472: LD_INT 1
5474: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL 5503 0 1
// wait ( 0 0$3 ) ;
5484: LD_INT 105
5486: PPUSH
5487: CALL_OW 67
// enable ( 1 ) ;
5491: LD_INT 1
5493: ENABLE_MARKED
// break ;
5494: GO 5498
// end ;
5496: GO 5453
5498: POP
5499: POP
// end ;
5500: PPOPN 1
5502: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
5503: LD_INT 0
5505: PPUSH
5506: PPUSH
// if not building then
5507: LD_VAR 0 1
5511: NOT
5512: IFFALSE 5516
// exit ;
5514: GO 7081
// if building in entranceVisitedList then
5516: LD_VAR 0 1
5520: PUSH
5521: LD_EXP 16
5525: IN
5526: IFFALSE 5534
// begin SayHVisited ( ) ;
5528: CALL 5323 0 0
// exit ;
5532: GO 7081
// end ; case Query ( EnterBuilding ) of 1 :
5534: LD_STRING EnterBuilding
5536: PPUSH
5537: CALL_OW 97
5541: PUSH
5542: LD_INT 1
5544: DOUBLE
5545: EQUAL
5546: IFTRUE 5550
5548: GO 5553
5550: POP
// ; 2 :
5551: GO 5567
5553: LD_INT 2
5555: DOUBLE
5556: EQUAL
5557: IFTRUE 5561
5559: GO 5566
5561: POP
// exit ; end ;
5562: GO 7081
5564: GO 5567
5566: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
5567: LD_ADDR_EXP 16
5571: PUSH
5572: LD_EXP 16
5576: PPUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL 45331 0 2
5586: ST_TO_ADDR
// InGameOn ;
5587: CALL_OW 8
// SetSide ( Heike , 5 ) ;
5591: LD_EXP 23
5595: PPUSH
5596: LD_INT 5
5598: PPUSH
5599: CALL_OW 235
// SetSide ( building , 5 ) ;
5603: LD_VAR 0 1
5607: PPUSH
5608: LD_INT 5
5610: PPUSH
5611: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
5615: LD_EXP 23
5619: PPUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 120
// wait ( 0 0$3 ) ;
5629: LD_INT 105
5631: PPUSH
5632: CALL_OW 67
// case building of ruFac :
5636: LD_VAR 0 1
5640: PUSH
5641: LD_INT 61
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5649
5647: GO 5759
5649: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
5650: LD_EXP 30
5654: PPUSH
5655: CALL_OW 302
5659: PUSH
5660: LD_EXP 30
5664: PUSH
5665: LD_EXP 14
5669: IN
5670: NOT
5671: AND
5672: IFFALSE 5753
// begin Say ( Heike , DH-Krastyo-1 ) ;
5674: LD_EXP 23
5678: PPUSH
5679: LD_STRING DH-Krastyo-1
5681: PPUSH
5682: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
5686: LD_EXP 30
5690: PPUSH
5691: LD_STRING DMar-Krastyo-2
5693: PPUSH
5694: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
5698: LD_EXP 30
5702: PPUSH
5703: LD_STRING DMar-Krastyo-3
5705: PPUSH
5706: CALL_OW 88
// SetSide ( Markov , 2 ) ;
5710: LD_EXP 30
5714: PPUSH
5715: LD_INT 2
5717: PPUSH
5718: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
5722: LD_ADDR_EXP 14
5726: PUSH
5727: LD_EXP 14
5731: PPUSH
5732: LD_EXP 30
5736: PPUSH
5737: CALL 45331 0 2
5741: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
5742: LD_EXP 30
5746: PPUSH
5747: CALL_OW 122
// end else
5751: GO 5757
// SayHEmpty ( ) ;
5753: CALL 5234 0 0
// end ; ruBarKam :
5757: GO 7044
5759: LD_INT 109
5761: DOUBLE
5762: EQUAL
5763: IFTRUE 5767
5765: GO 5905
5767: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
5768: LD_EXP 27
5772: PPUSH
5773: CALL_OW 302
5777: PUSH
5778: LD_EXP 27
5782: PUSH
5783: LD_EXP 14
5787: IN
5788: NOT
5789: AND
5790: IFFALSE 5899
// begin Say ( Heike , DH-Kamil-1 ) ;
5792: LD_EXP 23
5796: PPUSH
5797: LD_STRING DH-Kamil-1
5799: PPUSH
5800: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
5804: LD_EXP 27
5808: PPUSH
5809: LD_STRING DKam-Kamil-2
5811: PPUSH
5812: CALL_OW 88
// if IsOk ( Sophia ) then
5816: LD_EXP 29
5820: PPUSH
5821: CALL_OW 302
5825: IFFALSE 5865
// if Sophia in heikeSquad then
5827: LD_EXP 29
5831: PUSH
5832: LD_EXP 14
5836: IN
5837: IFFALSE 5853
// Say ( Kamil , DKam-Kamil-a-3 ) else
5839: LD_EXP 27
5843: PPUSH
5844: LD_STRING DKam-Kamil-a-3
5846: PPUSH
5847: CALL_OW 88
5851: GO 5865
// Say ( Kamil , DKam-Kamil-3 ) ;
5853: LD_EXP 27
5857: PPUSH
5858: LD_STRING DKam-Kamil-3
5860: PPUSH
5861: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
5865: LD_EXP 27
5869: PPUSH
5870: LD_INT 2
5872: PPUSH
5873: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
5877: LD_ADDR_EXP 14
5881: PUSH
5882: LD_EXP 14
5886: PPUSH
5887: LD_EXP 27
5891: PPUSH
5892: CALL 45331 0 2
5896: ST_TO_ADDR
// end else
5897: GO 5903
// SayHEmpty ( ) ;
5899: CALL 5234 0 0
// end ; ruOutpost1 :
5903: GO 7044
5905: LD_INT 6
5907: DOUBLE
5908: EQUAL
5909: IFTRUE 5913
5911: GO 6255
5913: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
5914: LD_EXP 32
5918: PPUSH
5919: CALL_OW 302
5923: PUSH
5924: LD_EXP 32
5928: PUSH
5929: LD_EXP 14
5933: IN
5934: NOT
5935: AND
5936: IFFALSE 6249
// begin if hasMethanol then
5938: LD_EXP 13
5942: IFFALSE 6178
// begin Say ( Heike , DH-Kurt-1 ) ;
5944: LD_EXP 23
5948: PPUSH
5949: LD_STRING DH-Kurt-1
5951: PPUSH
5952: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
5956: LD_EXP 32
5960: PPUSH
5961: LD_STRING DKs-Kurt-2
5963: PPUSH
5964: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
5968: LD_EXP 24
5972: PPUSH
5973: LD_INT 6
5975: PPUSH
5976: CALL_OW 296
5980: PUSH
5981: LD_INT 10
5983: LESS
5984: PUSH
5985: LD_EXP 24
5989: PUSH
5990: LD_EXP 14
5994: IN
5995: AND
5996: IFFALSE 6073
// begin ComMoveXY ( Givi , 100 , 37 ) ;
5998: LD_EXP 24
6002: PPUSH
6003: LD_INT 100
6005: PPUSH
6006: LD_INT 37
6008: PPUSH
6009: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
6013: LD_EXP 24
6017: PPUSH
6018: LD_INT 6
6020: PPUSH
6021: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6025: LD_INT 35
6027: PPUSH
6028: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
6032: LD_EXP 24
6036: PPUSH
6037: LD_INT 6
6039: PPUSH
6040: CALL_OW 296
6044: PUSH
6045: LD_INT 7
6047: LESS
6048: IFFALSE 6025
// Say ( Givi , DG-Kurt-3 ) ;
6050: LD_EXP 24
6054: PPUSH
6055: LD_STRING DG-Kurt-3
6057: PPUSH
6058: CALL_OW 88
// ComStop ( Givi ) ;
6062: LD_EXP 24
6066: PPUSH
6067: CALL_OW 141
// end else
6071: GO 6176
// if GetDistUnits ( Olaf , ruOutpost1 ) < 10 and Olaf in heikeSquad then
6073: LD_EXP 31
6077: PPUSH
6078: LD_INT 6
6080: PPUSH
6081: CALL_OW 296
6085: PUSH
6086: LD_INT 10
6088: LESS
6089: PUSH
6090: LD_EXP 31
6094: PUSH
6095: LD_EXP 14
6099: IN
6100: AND
6101: IFFALSE 6176
// begin ComMoveXY ( Olaf , 100 , 37 ) ;
6103: LD_EXP 31
6107: PPUSH
6108: LD_INT 100
6110: PPUSH
6111: LD_INT 37
6113: PPUSH
6114: CALL_OW 111
// AddComTurnUnit ( Olaf , ruOutpost1 ) ;
6118: LD_EXP 31
6122: PPUSH
6123: LD_INT 6
6125: PPUSH
6126: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6130: LD_INT 35
6132: PPUSH
6133: CALL_OW 67
// until GetDistUnits ( Olaf , ruOutpost1 ) < 7 ;
6137: LD_EXP 31
6141: PPUSH
6142: LD_INT 6
6144: PPUSH
6145: CALL_OW 296
6149: PUSH
6150: LD_INT 7
6152: LESS
6153: IFFALSE 6130
// Say ( Olaf , DO-Kurt-a-3 ) ;
6155: LD_EXP 31
6159: PPUSH
6160: LD_STRING DO-Kurt-a-3
6162: PPUSH
6163: CALL_OW 88
// ComStop ( Olaf ) ;
6167: LD_EXP 31
6171: PPUSH
6172: CALL_OW 141
// end ; end else
6176: GO 6206
// begin Say ( Heike , DH-Kurt-1 ) ;
6178: LD_EXP 23
6182: PPUSH
6183: LD_STRING DH-Kurt-1
6185: PPUSH
6186: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
6190: LD_EXP 32
6194: PPUSH
6195: LD_STRING DKs-Kurt-2
6197: PPUSH
6198: CALL_OW 88
// SpawnAdditionalRuGuards ;
6202: CALL 1677 0 0
// end ; SetSide ( Kurt , 2 ) ;
6206: LD_EXP 32
6210: PPUSH
6211: LD_INT 2
6213: PPUSH
6214: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
6218: LD_ADDR_EXP 14
6222: PUSH
6223: LD_EXP 14
6227: PPUSH
6228: LD_EXP 32
6232: PPUSH
6233: CALL 45331 0 2
6237: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
6238: LD_EXP 32
6242: PPUSH
6243: CALL_OW 122
// end else
6247: GO 6253
// SayHEmpty ( ) ;
6249: CALL 5234 0 0
// end ; ruOutpostBar :
6253: GO 7044
6255: LD_INT 13
6257: DOUBLE
6258: EQUAL
6259: IFTRUE 6263
6261: GO 6309
6263: POP
// begin if not hasGuardPatrolPlan then
6264: LD_EXP 18
6268: NOT
6269: IFFALSE 6303
// begin Say ( Heike , DH-PatrolPlan ) ;
6271: LD_EXP 23
6275: PPUSH
6276: LD_STRING DH-PatrolPlan
6278: PPUSH
6279: CALL_OW 88
// hasGuardPatrolPlan := true ;
6283: LD_ADDR_EXP 18
6287: PUSH
6288: LD_INT 1
6290: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
6291: LD_INT 6
6293: PPUSH
6294: LD_INT 2
6296: PPUSH
6297: CALL_OW 343
// end else
6301: GO 6307
// SayHEmpty ( ) ;
6303: CALL 5234 0 0
// end ; ruKaiaBar :
6307: GO 7044
6309: LD_INT 147
6311: DOUBLE
6312: EQUAL
6313: IFTRUE 6317
6315: GO 6464
6317: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
6318: LD_EXP 28
6322: PPUSH
6323: CALL_OW 302
6327: PUSH
6328: LD_EXP 28
6332: PUSH
6333: LD_EXP 14
6337: IN
6338: NOT
6339: AND
6340: IFFALSE 6462
// begin Say ( Heike , DH-Kaia-1 ) ;
6342: LD_EXP 23
6346: PPUSH
6347: LD_STRING DH-Kaia-1
6349: PPUSH
6350: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
6354: LD_EXP 28
6358: PPUSH
6359: LD_STRING DK-Kaia-2
6361: PPUSH
6362: CALL_OW 88
// if hasSniperRifle then
6366: LD_EXP 11
6370: IFFALSE 6421
// begin if IsOk ( Markov ) then
6372: LD_EXP 30
6376: PPUSH
6377: CALL_OW 302
6381: IFFALSE 6397
// Say ( Kaia , DK-Kaia-3 ) else
6383: LD_EXP 28
6387: PPUSH
6388: LD_STRING DK-Kaia-3
6390: PPUSH
6391: CALL_OW 88
6395: GO 6409
// Say ( Kaia , DK-Kaia-a-3 ) ;
6397: LD_EXP 28
6401: PPUSH
6402: LD_STRING DK-Kaia-a-3
6404: PPUSH
6405: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
6409: LD_EXP 23
6413: PPUSH
6414: LD_STRING DH-Kaia-4
6416: PPUSH
6417: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
6421: LD_EXP 28
6425: PPUSH
6426: LD_INT 2
6428: PPUSH
6429: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
6433: LD_ADDR_EXP 14
6437: PUSH
6438: LD_EXP 14
6442: PPUSH
6443: LD_EXP 28
6447: PPUSH
6448: CALL 45331 0 2
6452: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
6453: LD_EXP 28
6457: PPUSH
6458: CALL_OW 122
// end ; end ; ruWeaponsBar :
6462: GO 7044
6464: LD_INT 137
6466: DOUBLE
6467: EQUAL
6468: IFTRUE 6472
6470: GO 7043
6472: POP
// begin if hasWeapons then
6473: LD_EXP 19
6477: IFFALSE 7029
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
6479: LD_ADDR_EXP 16
6483: PUSH
6484: LD_EXP 16
6488: PUSH
6489: LD_INT 137
6491: DIFF
6492: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
6493: LD_ADDR_VAR 0 3
6497: PUSH
6498: LD_EXP 14
6502: PPUSH
6503: LD_INT 91
6505: PUSH
6506: LD_EXP 23
6510: PUSH
6511: LD_INT 8
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: PPUSH
6519: CALL_OW 72
6523: ST_TO_ADDR
// if not heikeSquad or not tmp then
6524: LD_EXP 14
6528: NOT
6529: PUSH
6530: LD_VAR 0 3
6534: NOT
6535: OR
6536: IFFALSE 6552
// Say ( Heike , DH-Weapons-Alone ) else
6538: LD_EXP 23
6542: PPUSH
6543: LD_STRING DH-Weapons-Alone
6545: PPUSH
6546: CALL_OW 88
6550: GO 7027
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
6552: LD_ADDR_EXP 16
6556: PUSH
6557: LD_EXP 16
6561: PPUSH
6562: LD_INT 137
6564: PPUSH
6565: CALL 45331 0 2
6569: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
6570: LD_EXP 23
6574: PPUSH
6575: LD_STRING DH-Weapons-1
6577: PPUSH
6578: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
6582: LD_EXP 23
6586: PPUSH
6587: LD_STRING DH-Weapons-2
6589: PPUSH
6590: CALL_OW 88
// if hasRevolver and Kaia in tmp then
6594: LD_EXP 8
6598: PUSH
6599: LD_EXP 28
6603: PUSH
6604: LD_VAR 0 3
6608: IN
6609: AND
6610: IFFALSE 6699
// begin SetSide ( Kaia , 5 ) ;
6612: LD_EXP 28
6616: PPUSH
6617: LD_INT 5
6619: PPUSH
6620: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
6624: LD_EXP 28
6628: PPUSH
6629: LD_INT 137
6631: PPUSH
6632: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
6636: LD_INT 35
6638: PPUSH
6639: CALL_OW 67
// until IsInUnit ( Kaia ) ;
6643: LD_EXP 28
6647: PPUSH
6648: CALL_OW 310
6652: IFFALSE 6636
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
6654: LD_EXP 23
6658: PPUSH
6659: LD_STRING DH-Kaia-Revolver-2
6661: PPUSH
6662: CALL_OW 88
// SetClassKaiaRevolver ;
6666: CALL 988 0 0
// hasRevolver := false ;
6670: LD_ADDR_EXP 8
6674: PUSH
6675: LD_INT 0
6677: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
6678: LD_EXP 28
6682: PPUSH
6683: LD_INT 2
6685: PPUSH
6686: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
6690: LD_EXP 28
6694: PPUSH
6695: CALL_OW 122
// end ; if Givi in tmp then
6699: LD_EXP 24
6703: PUSH
6704: LD_VAR 0 3
6708: IN
6709: IFFALSE 6850
// begin SetSide ( Givi , 5 ) ;
6711: LD_EXP 24
6715: PPUSH
6716: LD_INT 5
6718: PPUSH
6719: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
6723: LD_EXP 24
6727: PPUSH
6728: LD_INT 137
6730: PPUSH
6731: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
6735: LD_INT 35
6737: PPUSH
6738: CALL_OW 67
// until IsInUnit ( Givi ) ;
6742: LD_EXP 24
6746: PPUSH
6747: CALL_OW 310
6751: IFFALSE 6735
// Say ( Givi , DG-Weapons-3 ) ;
6753: LD_EXP 24
6757: PPUSH
6758: LD_STRING DG-Weapons-3
6760: PPUSH
6761: CALL_OW 88
// Say ( Givi , DH-Weapons-4 ) ;
6765: LD_EXP 24
6769: PPUSH
6770: LD_STRING DH-Weapons-4
6772: PPUSH
6773: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
6777: LD_EXP 24
6781: PPUSH
6782: LD_STRING DG-Weapons-5
6784: PPUSH
6785: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
6789: LD_EXP 24
6793: PPUSH
6794: LD_INT 11
6796: PPUSH
6797: CALL_OW 336
// ComExitBuilding ( Givi ) ;
6801: LD_EXP 24
6805: PPUSH
6806: CALL_OW 122
// SetSide ( Givi , 2 ) ;
6810: LD_EXP 24
6814: PPUSH
6815: LD_INT 2
6817: PPUSH
6818: CALL_OW 235
// if hasRevolver then
6822: LD_EXP 8
6826: IFFALSE 6848
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
6828: LD_EXP 23
6832: PPUSH
6833: LD_STRING DH-Kaia-Revolver-1
6835: PPUSH
6836: CALL_OW 88
// heikeHasRevolver := true ;
6840: LD_ADDR_EXP 20
6844: PUSH
6845: LD_INT 1
6847: ST_TO_ADDR
// end ; end else
6848: GO 7027
// if Kamil in tmp then
6850: LD_EXP 27
6854: PUSH
6855: LD_VAR 0 3
6859: IN
6860: IFFALSE 6989
// begin SetSide ( Kamil , 5 ) ;
6862: LD_EXP 27
6866: PPUSH
6867: LD_INT 5
6869: PPUSH
6870: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
6874: LD_EXP 27
6878: PPUSH
6879: LD_INT 137
6881: PPUSH
6882: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
6886: LD_INT 35
6888: PPUSH
6889: CALL_OW 67
// until IsInUnit ( Kamil ) ;
6893: LD_EXP 27
6897: PPUSH
6898: CALL_OW 310
6902: IFFALSE 6886
// Say ( Kamil , DKam-Weapons-a-3 ) ;
6904: LD_EXP 27
6908: PPUSH
6909: LD_STRING DKam-Weapons-a-3
6911: PPUSH
6912: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
6916: LD_EXP 23
6920: PPUSH
6921: LD_STRING DH-Weapons-a-4
6923: PPUSH
6924: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
6928: LD_EXP 27
6932: PPUSH
6933: LD_INT 11
6935: PPUSH
6936: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
6940: LD_EXP 27
6944: PPUSH
6945: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
6949: LD_EXP 27
6953: PPUSH
6954: LD_INT 2
6956: PPUSH
6957: CALL_OW 235
// if hasRevolver then
6961: LD_EXP 8
6965: IFFALSE 6987
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
6967: LD_EXP 23
6971: PPUSH
6972: LD_STRING DH-Kaia-Revolver-1
6974: PPUSH
6975: CALL_OW 88
// heikeHasRevolver := true ;
6979: LD_ADDR_EXP 20
6983: PUSH
6984: LD_INT 1
6986: ST_TO_ADDR
// end ; end else
6987: GO 7027
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
6989: LD_EXP 23
6993: PPUSH
6994: LD_STRING DH-Weapons-Alone-2
6996: PPUSH
6997: CALL_OW 88
// if hasRevolver then
7001: LD_EXP 8
7005: IFFALSE 7027
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
7007: LD_EXP 23
7011: PPUSH
7012: LD_STRING DH-Kaia-Revolver-1a
7014: PPUSH
7015: CALL_OW 88
// heikeHasRevolver := true ;
7019: LD_ADDR_EXP 20
7023: PUSH
7024: LD_INT 1
7026: ST_TO_ADDR
// end ; end ; end ; end else
7027: GO 7041
// Say ( Heike , DH-Locked ) ;
7029: LD_EXP 23
7033: PPUSH
7034: LD_STRING DH-Locked
7036: PPUSH
7037: CALL_OW 88
// end ; end ;
7041: GO 7044
7043: POP
// ComExitBuilding ( Heike ) ;
7044: LD_EXP 23
7048: PPUSH
7049: CALL_OW 122
// SetSide ( Heike , 2 ) ;
7053: LD_EXP 23
7057: PPUSH
7058: LD_INT 2
7060: PPUSH
7061: CALL_OW 235
// SetSide ( building , 3 ) ;
7065: LD_VAR 0 1
7069: PPUSH
7070: LD_INT 3
7072: PPUSH
7073: CALL_OW 235
// InGameOff ;
7077: CALL_OW 9
// end ; end_of_file
7081: LD_VAR 0 2
7085: RET
// on SailEvent ( event ) do begin case event of eventCenterCamOnHeike :
7086: LD_VAR 0 1
7090: PUSH
7091: LD_EXP 21
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7131
7101: POP
// begin repeat wait ( 0 0$1 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// CenterOnUnits ( Heike ) ;
7109: LD_EXP 23
7113: PPUSH
7114: CALL_OW 85
// until IsDying ( Heike ) ;
7118: LD_EXP 23
7122: PPUSH
7123: CALL_OW 303
7127: IFFALSE 7102
// end ; end ;
7129: GO 7132
7131: POP
// end ;
7132: PPOPN 1
7134: END
// on SaiLEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
7135: LD_OWVAR 59
7139: IFFALSE 7143
// exit ;
7141: GO 7213
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7143: LD_VAR 0 2
7147: PPUSH
7148: LD_VAR 0 3
7152: PPUSH
7153: LD_INT 2
7155: PPUSH
7156: LD_INT 12
7158: NEG
7159: PPUSH
7160: CALL_OW 330
// CenterOnXY ( x , y ) ;
7164: LD_VAR 0 2
7168: PPUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: CALL_OW 84
// wait ( time ) ;
7178: LD_VAR 0 4
7182: PPUSH
7183: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
7187: LD_EXP 23
7191: PPUSH
7192: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
7196: LD_VAR 0 2
7200: PPUSH
7201: LD_VAR 0 3
7205: PPUSH
7206: LD_INT 2
7208: PPUSH
7209: CALL_OW 331
// end ;
7213: PPOPN 7
7215: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
7216: LD_VAR 0 1
7220: PUSH
7221: LD_EXP 23
7225: EQUAL
7226: PUSH
7227: LD_EXP 5
7231: AND
7232: IFFALSE 7241
// YouLost ( Heike ) ;
7234: LD_STRING Heike
7236: PPUSH
7237: CALL_OW 104
// end ; end_of_file
7241: PPOPN 1
7243: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
// u1 := IsInUnit ( unit1 ) ;
7249: LD_ADDR_VAR 0 4
7253: PUSH
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 310
7263: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
7264: LD_ADDR_VAR 0 5
7268: PUSH
7269: LD_VAR 0 2
7273: PPUSH
7274: CALL_OW 310
7278: ST_TO_ADDR
// result := u1 and u1 = u2 ;
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_VAR 0 4
7288: PUSH
7289: LD_VAR 0 4
7293: PUSH
7294: LD_VAR 0 5
7298: EQUAL
7299: AND
7300: ST_TO_ADDR
// end ;
7301: LD_VAR 0 3
7305: RET
// export function ShowPlace ( x , y , time ) ; begin
7306: LD_INT 0
7308: PPUSH
// RaiseSailEventCustom ( eventShowPlace , x , y , time , 0 , 0 , 0 ) ;
7309: LD_EXP 22
7313: PPUSH
7314: LD_VAR 0 1
7318: PPUSH
7319: LD_VAR 0 2
7323: PPUSH
7324: LD_VAR 0 3
7328: PPUSH
7329: LD_INT 0
7331: PPUSH
7332: LD_INT 0
7334: PPUSH
7335: LD_INT 0
7337: PPUSH
7338: CALL_OW 595
// end ;
7342: LD_VAR 0 4
7346: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
7347: LD_INT 0
7349: PPUSH
7350: PPUSH
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
7355: LD_VAR 0 1
7359: PPUSH
7360: CALL_OW 302
7364: NOT
7365: PUSH
7366: LD_VAR 0 2
7370: PPUSH
7371: CALL_OW 302
7375: NOT
7376: OR
7377: PUSH
7378: LD_VAR 0 2
7382: PPUSH
7383: CALL_OW 313
7387: PUSH
7388: LD_INT 6
7390: EQUAL
7391: OR
7392: IFFALSE 7396
// exit ;
7394: GO 7605
// btype := GetBType ( building ) ;
7396: LD_ADDR_VAR 0 8
7400: PUSH
7401: LD_VAR 0 2
7405: PPUSH
7406: CALL_OW 266
7410: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_lab , b_lab_half , b_lab_full ] then
7411: LD_VAR 0 8
7415: PUSH
7416: LD_INT 0
7418: PUSH
7419: LD_INT 1
7421: PUSH
7422: LD_INT 4
7424: PUSH
7425: LD_INT 5
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: LD_INT 7
7433: PUSH
7434: LD_INT 8
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: IN
7446: NOT
7447: IFFALSE 7451
// exit ;
7449: GO 7605
// x := GetX ( building ) ;
7451: LD_ADDR_VAR 0 4
7455: PUSH
7456: LD_VAR 0 2
7460: PPUSH
7461: CALL_OW 250
7465: ST_TO_ADDR
// y := GetY ( building ) ;
7466: LD_ADDR_VAR 0 5
7470: PUSH
7471: LD_VAR 0 2
7475: PPUSH
7476: CALL_OW 251
7480: ST_TO_ADDR
// d := GetDir ( building ) ;
7481: LD_ADDR_VAR 0 6
7485: PUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: CALL_OW 254
7495: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
7496: LD_ADDR_VAR 0 7
7500: PUSH
7501: LD_VAR 0 4
7505: PPUSH
7506: LD_VAR 0 6
7510: PPUSH
7511: LD_INT 3
7513: PPUSH
7514: CALL_OW 272
7518: PUSH
7519: LD_VAR 0 5
7523: PPUSH
7524: LD_VAR 0 6
7528: PPUSH
7529: LD_INT 3
7531: PPUSH
7532: CALL_OW 273
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
7541: LD_VAR 0 7
7545: PUSH
7546: LD_INT 1
7548: ARRAY
7549: PPUSH
7550: LD_VAR 0 7
7554: PUSH
7555: LD_INT 2
7557: ARRAY
7558: PPUSH
7559: CALL_OW 488
7563: NOT
7564: IFFALSE 7568
// exit ;
7566: GO 7605
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 3 ;
7568: LD_ADDR_VAR 0 3
7572: PUSH
7573: LD_VAR 0 1
7577: PPUSH
7578: LD_VAR 0 7
7582: PUSH
7583: LD_INT 1
7585: ARRAY
7586: PPUSH
7587: LD_VAR 0 7
7591: PUSH
7592: LD_INT 2
7594: ARRAY
7595: PPUSH
7596: CALL_OW 297
7600: PUSH
7601: LD_INT 3
7603: LESS
7604: ST_TO_ADDR
// end ; end_of_file
7605: LD_VAR 0 3
7609: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
7610: LD_INT 0
7612: PPUSH
// if not step then
7613: LD_LOC 1
7617: NOT
7618: IFFALSE 7628
// step := 1 ;
7620: LD_ADDR_LOC 1
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
7628: LD_STRING HEscape
7630: PUSH
7631: LD_LOC 1
7635: STR
7636: PPUSH
7637: CALL_OW 97
7641: PUSH
7642: LD_INT 1
7644: DOUBLE
7645: EQUAL
7646: IFTRUE 7650
7648: GO 7657
7650: POP
// LockerMinigameSearch ; 2 :
7651: CALL 7690 0 0
7655: GO 7673
7657: LD_INT 2
7659: DOUBLE
7660: EQUAL
7661: IFTRUE 7665
7663: GO 7672
7665: POP
// LockerMinigameSetCode ; end ;
7666: CALL 7764 0 0
7670: GO 7673
7672: POP
// if lockerCodeValid then
7673: LD_EXP 39
7677: IFFALSE 7681
// exit ;
7679: GO 7685
// StartLockerMinigame ;
7681: CALL 7610 0 0
// end ;
7685: LD_VAR 0 1
7689: RET
// function LockerMinigameSearch ; begin
7690: LD_INT 0
7692: PPUSH
// if code then
7693: LD_LOC 2
7697: IFFALSE 7713
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
7699: LD_EXP 23
7703: PPUSH
7704: LD_STRING DH-Escape-3-Hint-0
7706: PPUSH
7707: CALL_OW 88
// exit ;
7711: GO 7759
// end ; Randomize ;
7713: CALL_OW 10
// code := rand ( 1 , 5 ) ;
7717: LD_ADDR_LOC 2
7721: PUSH
7722: LD_INT 1
7724: PPUSH
7725: LD_INT 5
7727: PPUSH
7728: CALL_OW 12
7732: ST_TO_ADDR
// step := 2 ;
7733: LD_ADDR_LOC 1
7737: PUSH
7738: LD_INT 2
7740: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
7741: LD_EXP 23
7745: PPUSH
7746: LD_STRING DH-Escape-3-Hint-
7748: PUSH
7749: LD_LOC 2
7753: STR
7754: PPUSH
7755: CALL_OW 88
// end ;
7759: LD_VAR 0 1
7763: RET
// function LockerMinigameSetCode ; begin
7764: LD_INT 0
7766: PPUSH
// if not code then
7767: LD_LOC 2
7771: NOT
7772: IFFALSE 7782
// code := 0 ;
7774: LD_ADDR_LOC 2
7778: PUSH
7779: LD_INT 0
7781: ST_TO_ADDR
// lockerBusy := true ;
7782: LD_ADDR_EXP 40
7786: PUSH
7787: LD_INT 1
7789: ST_TO_ADDR
// InGameOff ;
7790: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
7794: LD_STRING initLockerMinigame("
7796: PUSH
7797: LD_LOC 2
7801: STR
7802: PUSH
7803: LD_STRING ")
7805: STR
7806: PPUSH
7807: CALL_OW 559
// step := 3 ;
7811: LD_ADDR_LOC 1
7815: PUSH
7816: LD_INT 3
7818: ST_TO_ADDR
// repeat wait ( 1 ) ;
7819: LD_INT 1
7821: PPUSH
7822: CALL_OW 67
// until not lockerBusy ;
7826: LD_EXP 40
7830: NOT
7831: IFFALSE 7819
// InGameOn ;
7833: CALL_OW 8
// if not lockerCodeValid then
7837: LD_EXP 39
7841: NOT
7842: IFFALSE 7868
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
7844: LD_EXP 23
7848: PPUSH
7849: LD_STRING DH-Escape-3-Fail-
7851: PUSH
7852: LD_INT 1
7854: PPUSH
7855: LD_INT 2
7857: PPUSH
7858: CALL_OW 12
7862: STR
7863: PPUSH
7864: CALL_OW 88
// end ; end_of_file
7868: LD_VAR 0 1
7872: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
7873: LD_VAR 0 2
7877: PUSH
7878: LD_INT 102
7880: EQUAL
7881: IFFALSE 7903
// begin lockerBusy := false ;
7883: LD_ADDR_EXP 40
7887: PUSH
7888: LD_INT 0
7890: ST_TO_ADDR
// lockerCodeValid := p3 ;
7891: LD_ADDR_EXP 39
7895: PUSH
7896: LD_VAR 0 3
7900: ST_TO_ADDR
// end else
7901: GO 7937
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
7903: LD_VAR 0 1
7907: PPUSH
7908: LD_VAR 0 2
7912: PPUSH
7913: LD_VAR 0 3
7917: PPUSH
7918: LD_VAR 0 4
7922: PPUSH
7923: LD_VAR 0 5
7927: PPUSH
7928: LD_VAR 0 6
7932: PPUSH
7933: CALL 49357 0 6
// end ;
7937: PPOPN 6
7939: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
7940: CALL 49328 0 0
// end ; end_of_file
7944: PPOPN 1
7946: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
7947: LD_INT 0
7949: PPUSH
7950: PPUSH
// if exist_mode then
7951: LD_VAR 0 2
7955: IFFALSE 7980
// unit := CreateCharacter ( prefix & ident ) else
7957: LD_ADDR_VAR 0 5
7961: PUSH
7962: LD_VAR 0 3
7966: PUSH
7967: LD_VAR 0 1
7971: STR
7972: PPUSH
7973: CALL_OW 34
7977: ST_TO_ADDR
7978: GO 7995
// unit := NewCharacter ( ident ) ;
7980: LD_ADDR_VAR 0 5
7984: PUSH
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL_OW 25
7994: ST_TO_ADDR
// result := unit ;
7995: LD_ADDR_VAR 0 4
7999: PUSH
8000: LD_VAR 0 5
8004: ST_TO_ADDR
// end ;
8005: LD_VAR 0 4
8009: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
// if not side or not nation then
8014: LD_VAR 0 1
8018: NOT
8019: PUSH
8020: LD_VAR 0 2
8024: NOT
8025: OR
8026: IFFALSE 8030
// exit ;
8028: GO 8798
// case nation of nation_american :
8030: LD_VAR 0 2
8034: PUSH
8035: LD_INT 1
8037: DOUBLE
8038: EQUAL
8039: IFTRUE 8043
8041: GO 8257
8043: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8044: LD_ADDR_VAR 0 4
8048: PUSH
8049: LD_INT 35
8051: PUSH
8052: LD_INT 45
8054: PUSH
8055: LD_INT 46
8057: PUSH
8058: LD_INT 47
8060: PUSH
8061: LD_INT 82
8063: PUSH
8064: LD_INT 83
8066: PUSH
8067: LD_INT 84
8069: PUSH
8070: LD_INT 85
8072: PUSH
8073: LD_INT 86
8075: PUSH
8076: LD_INT 1
8078: PUSH
8079: LD_INT 2
8081: PUSH
8082: LD_INT 6
8084: PUSH
8085: LD_INT 15
8087: PUSH
8088: LD_INT 16
8090: PUSH
8091: LD_INT 7
8093: PUSH
8094: LD_INT 12
8096: PUSH
8097: LD_INT 13
8099: PUSH
8100: LD_INT 10
8102: PUSH
8103: LD_INT 14
8105: PUSH
8106: LD_INT 20
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 22
8114: PUSH
8115: LD_INT 25
8117: PUSH
8118: LD_INT 32
8120: PUSH
8121: LD_INT 27
8123: PUSH
8124: LD_INT 36
8126: PUSH
8127: LD_INT 69
8129: PUSH
8130: LD_INT 39
8132: PUSH
8133: LD_INT 34
8135: PUSH
8136: LD_INT 40
8138: PUSH
8139: LD_INT 48
8141: PUSH
8142: LD_INT 49
8144: PUSH
8145: LD_INT 50
8147: PUSH
8148: LD_INT 51
8150: PUSH
8151: LD_INT 52
8153: PUSH
8154: LD_INT 53
8156: PUSH
8157: LD_INT 54
8159: PUSH
8160: LD_INT 55
8162: PUSH
8163: LD_INT 56
8165: PUSH
8166: LD_INT 57
8168: PUSH
8169: LD_INT 58
8171: PUSH
8172: LD_INT 59
8174: PUSH
8175: LD_INT 60
8177: PUSH
8178: LD_INT 61
8180: PUSH
8181: LD_INT 62
8183: PUSH
8184: LD_INT 80
8186: PUSH
8187: LD_INT 82
8189: PUSH
8190: LD_INT 83
8192: PUSH
8193: LD_INT 84
8195: PUSH
8196: LD_INT 85
8198: PUSH
8199: LD_INT 86
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: ST_TO_ADDR
8255: GO 8722
8257: LD_INT 2
8259: DOUBLE
8260: EQUAL
8261: IFTRUE 8265
8263: GO 8491
8265: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8266: LD_ADDR_VAR 0 4
8270: PUSH
8271: LD_INT 35
8273: PUSH
8274: LD_INT 45
8276: PUSH
8277: LD_INT 46
8279: PUSH
8280: LD_INT 47
8282: PUSH
8283: LD_INT 82
8285: PUSH
8286: LD_INT 83
8288: PUSH
8289: LD_INT 84
8291: PUSH
8292: LD_INT 85
8294: PUSH
8295: LD_INT 87
8297: PUSH
8298: LD_INT 70
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: LD_INT 11
8306: PUSH
8307: LD_INT 3
8309: PUSH
8310: LD_INT 4
8312: PUSH
8313: LD_INT 5
8315: PUSH
8316: LD_INT 6
8318: PUSH
8319: LD_INT 15
8321: PUSH
8322: LD_INT 18
8324: PUSH
8325: LD_INT 7
8327: PUSH
8328: LD_INT 17
8330: PUSH
8331: LD_INT 8
8333: PUSH
8334: LD_INT 20
8336: PUSH
8337: LD_INT 21
8339: PUSH
8340: LD_INT 22
8342: PUSH
8343: LD_INT 72
8345: PUSH
8346: LD_INT 26
8348: PUSH
8349: LD_INT 69
8351: PUSH
8352: LD_INT 39
8354: PUSH
8355: LD_INT 40
8357: PUSH
8358: LD_INT 41
8360: PUSH
8361: LD_INT 42
8363: PUSH
8364: LD_INT 43
8366: PUSH
8367: LD_INT 48
8369: PUSH
8370: LD_INT 49
8372: PUSH
8373: LD_INT 50
8375: PUSH
8376: LD_INT 51
8378: PUSH
8379: LD_INT 52
8381: PUSH
8382: LD_INT 53
8384: PUSH
8385: LD_INT 54
8387: PUSH
8388: LD_INT 55
8390: PUSH
8391: LD_INT 56
8393: PUSH
8394: LD_INT 60
8396: PUSH
8397: LD_INT 61
8399: PUSH
8400: LD_INT 62
8402: PUSH
8403: LD_INT 66
8405: PUSH
8406: LD_INT 67
8408: PUSH
8409: LD_INT 68
8411: PUSH
8412: LD_INT 81
8414: PUSH
8415: LD_INT 82
8417: PUSH
8418: LD_INT 83
8420: PUSH
8421: LD_INT 84
8423: PUSH
8424: LD_INT 85
8426: PUSH
8427: LD_INT 87
8429: PUSH
8430: LD_INT 88
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: ST_TO_ADDR
8489: GO 8722
8491: LD_INT 3
8493: DOUBLE
8494: EQUAL
8495: IFTRUE 8499
8497: GO 8721
8499: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8500: LD_ADDR_VAR 0 4
8504: PUSH
8505: LD_INT 46
8507: PUSH
8508: LD_INT 47
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 2
8516: PUSH
8517: LD_INT 82
8519: PUSH
8520: LD_INT 83
8522: PUSH
8523: LD_INT 84
8525: PUSH
8526: LD_INT 85
8528: PUSH
8529: LD_INT 86
8531: PUSH
8532: LD_INT 11
8534: PUSH
8535: LD_INT 9
8537: PUSH
8538: LD_INT 20
8540: PUSH
8541: LD_INT 19
8543: PUSH
8544: LD_INT 21
8546: PUSH
8547: LD_INT 24
8549: PUSH
8550: LD_INT 22
8552: PUSH
8553: LD_INT 25
8555: PUSH
8556: LD_INT 28
8558: PUSH
8559: LD_INT 29
8561: PUSH
8562: LD_INT 30
8564: PUSH
8565: LD_INT 31
8567: PUSH
8568: LD_INT 37
8570: PUSH
8571: LD_INT 38
8573: PUSH
8574: LD_INT 32
8576: PUSH
8577: LD_INT 27
8579: PUSH
8580: LD_INT 33
8582: PUSH
8583: LD_INT 69
8585: PUSH
8586: LD_INT 39
8588: PUSH
8589: LD_INT 34
8591: PUSH
8592: LD_INT 40
8594: PUSH
8595: LD_INT 71
8597: PUSH
8598: LD_INT 23
8600: PUSH
8601: LD_INT 44
8603: PUSH
8604: LD_INT 48
8606: PUSH
8607: LD_INT 49
8609: PUSH
8610: LD_INT 50
8612: PUSH
8613: LD_INT 51
8615: PUSH
8616: LD_INT 52
8618: PUSH
8619: LD_INT 53
8621: PUSH
8622: LD_INT 54
8624: PUSH
8625: LD_INT 55
8627: PUSH
8628: LD_INT 56
8630: PUSH
8631: LD_INT 57
8633: PUSH
8634: LD_INT 58
8636: PUSH
8637: LD_INT 59
8639: PUSH
8640: LD_INT 63
8642: PUSH
8643: LD_INT 64
8645: PUSH
8646: LD_INT 65
8648: PUSH
8649: LD_INT 82
8651: PUSH
8652: LD_INT 83
8654: PUSH
8655: LD_INT 84
8657: PUSH
8658: LD_INT 85
8660: PUSH
8661: LD_INT 86
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: ST_TO_ADDR
8719: GO 8722
8721: POP
// if state > - 1 and state < 3 then
8722: LD_VAR 0 3
8726: PUSH
8727: LD_INT 1
8729: NEG
8730: GREATER
8731: PUSH
8732: LD_VAR 0 3
8736: PUSH
8737: LD_INT 3
8739: LESS
8740: AND
8741: IFFALSE 8798
// for i in result do
8743: LD_ADDR_VAR 0 5
8747: PUSH
8748: LD_VAR 0 4
8752: PUSH
8753: FOR_IN
8754: IFFALSE 8796
// if GetTech ( i , side ) <> state then
8756: LD_VAR 0 5
8760: PPUSH
8761: LD_VAR 0 1
8765: PPUSH
8766: CALL_OW 321
8770: PUSH
8771: LD_VAR 0 3
8775: NONEQUAL
8776: IFFALSE 8794
// result := result diff i ;
8778: LD_ADDR_VAR 0 4
8782: PUSH
8783: LD_VAR 0 4
8787: PUSH
8788: LD_VAR 0 5
8792: DIFF
8793: ST_TO_ADDR
8794: GO 8753
8796: POP
8797: POP
// end ;
8798: LD_VAR 0 4
8802: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8803: LD_INT 0
8805: PPUSH
8806: PPUSH
8807: PPUSH
// result := true ;
8808: LD_ADDR_VAR 0 3
8812: PUSH
8813: LD_INT 1
8815: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8816: LD_ADDR_VAR 0 5
8820: PUSH
8821: LD_VAR 0 2
8825: PPUSH
8826: CALL_OW 480
8830: ST_TO_ADDR
// if not tmp then
8831: LD_VAR 0 5
8835: NOT
8836: IFFALSE 8840
// exit ;
8838: GO 8889
// for i in tmp do
8840: LD_ADDR_VAR 0 4
8844: PUSH
8845: LD_VAR 0 5
8849: PUSH
8850: FOR_IN
8851: IFFALSE 8887
// if GetTech ( i , side ) <> state_researched then
8853: LD_VAR 0 4
8857: PPUSH
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 321
8867: PUSH
8868: LD_INT 2
8870: NONEQUAL
8871: IFFALSE 8885
// begin result := false ;
8873: LD_ADDR_VAR 0 3
8877: PUSH
8878: LD_INT 0
8880: ST_TO_ADDR
// exit ;
8881: POP
8882: POP
8883: GO 8889
// end ;
8885: GO 8850
8887: POP
8888: POP
// end ;
8889: LD_VAR 0 3
8893: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
8900: PPUSH
8901: PPUSH
8902: PPUSH
8903: PPUSH
8904: PPUSH
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8909: LD_VAR 0 1
8913: NOT
8914: PUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 257
8924: PUSH
8925: LD_INT 9
8927: NONEQUAL
8928: OR
8929: IFFALSE 8933
// exit ;
8931: GO 9506
// side := GetSide ( unit ) ;
8933: LD_ADDR_VAR 0 9
8937: PUSH
8938: LD_VAR 0 1
8942: PPUSH
8943: CALL_OW 255
8947: ST_TO_ADDR
// tech_space := tech_spacanom ;
8948: LD_ADDR_VAR 0 12
8952: PUSH
8953: LD_INT 29
8955: ST_TO_ADDR
// tech_time := tech_taurad ;
8956: LD_ADDR_VAR 0 13
8960: PUSH
8961: LD_INT 28
8963: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8964: LD_ADDR_VAR 0 11
8968: PUSH
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 310
8978: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8979: LD_VAR 0 11
8983: PPUSH
8984: CALL_OW 247
8988: PUSH
8989: LD_INT 2
8991: EQUAL
8992: IFFALSE 8996
// exit ;
8994: GO 9506
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8996: LD_ADDR_VAR 0 8
9000: PUSH
9001: LD_INT 81
9003: PUSH
9004: LD_VAR 0 9
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 3
9015: PUSH
9016: LD_INT 21
9018: PUSH
9019: LD_INT 3
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: PPUSH
9034: CALL_OW 69
9038: ST_TO_ADDR
// if not tmp then
9039: LD_VAR 0 8
9043: NOT
9044: IFFALSE 9048
// exit ;
9046: GO 9506
// if in_unit then
9048: LD_VAR 0 11
9052: IFFALSE 9076
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9054: LD_ADDR_VAR 0 10
9058: PUSH
9059: LD_VAR 0 8
9063: PPUSH
9064: LD_VAR 0 11
9068: PPUSH
9069: CALL_OW 74
9073: ST_TO_ADDR
9074: GO 9096
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9076: LD_ADDR_VAR 0 10
9080: PUSH
9081: LD_VAR 0 8
9085: PPUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 74
9095: ST_TO_ADDR
// if not enemy then
9096: LD_VAR 0 10
9100: NOT
9101: IFFALSE 9105
// exit ;
9103: GO 9506
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9105: LD_VAR 0 11
9109: PUSH
9110: LD_VAR 0 11
9114: PPUSH
9115: LD_VAR 0 10
9119: PPUSH
9120: CALL_OW 296
9124: PUSH
9125: LD_INT 13
9127: GREATER
9128: AND
9129: PUSH
9130: LD_VAR 0 1
9134: PPUSH
9135: LD_VAR 0 10
9139: PPUSH
9140: CALL_OW 296
9144: PUSH
9145: LD_INT 12
9147: GREATER
9148: OR
9149: IFFALSE 9153
// exit ;
9151: GO 9506
// missile := [ 1 ] ;
9153: LD_ADDR_VAR 0 14
9157: PUSH
9158: LD_INT 1
9160: PUSH
9161: EMPTY
9162: LIST
9163: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9164: LD_VAR 0 9
9168: PPUSH
9169: LD_VAR 0 12
9173: PPUSH
9174: CALL_OW 325
9178: IFFALSE 9207
// missile := Replace ( missile , missile + 1 , 2 ) ;
9180: LD_ADDR_VAR 0 14
9184: PUSH
9185: LD_VAR 0 14
9189: PPUSH
9190: LD_VAR 0 14
9194: PUSH
9195: LD_INT 1
9197: PLUS
9198: PPUSH
9199: LD_INT 2
9201: PPUSH
9202: CALL_OW 1
9206: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9207: LD_VAR 0 9
9211: PPUSH
9212: LD_VAR 0 13
9216: PPUSH
9217: CALL_OW 325
9221: PUSH
9222: LD_VAR 0 10
9226: PPUSH
9227: CALL_OW 255
9231: PPUSH
9232: LD_VAR 0 13
9236: PPUSH
9237: CALL_OW 325
9241: NOT
9242: AND
9243: IFFALSE 9272
// missile := Replace ( missile , missile + 1 , 3 ) ;
9245: LD_ADDR_VAR 0 14
9249: PUSH
9250: LD_VAR 0 14
9254: PPUSH
9255: LD_VAR 0 14
9259: PUSH
9260: LD_INT 1
9262: PLUS
9263: PPUSH
9264: LD_INT 3
9266: PPUSH
9267: CALL_OW 1
9271: ST_TO_ADDR
// if missile < 2 then
9272: LD_VAR 0 14
9276: PUSH
9277: LD_INT 2
9279: LESS
9280: IFFALSE 9284
// exit ;
9282: GO 9506
// x := GetX ( enemy ) ;
9284: LD_ADDR_VAR 0 4
9288: PUSH
9289: LD_VAR 0 10
9293: PPUSH
9294: CALL_OW 250
9298: ST_TO_ADDR
// y := GetY ( enemy ) ;
9299: LD_ADDR_VAR 0 5
9303: PUSH
9304: LD_VAR 0 10
9308: PPUSH
9309: CALL_OW 251
9313: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9314: LD_ADDR_VAR 0 6
9318: PUSH
9319: LD_VAR 0 4
9323: PUSH
9324: LD_INT 1
9326: NEG
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 12
9335: PLUS
9336: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9337: LD_ADDR_VAR 0 7
9341: PUSH
9342: LD_VAR 0 5
9346: PUSH
9347: LD_INT 1
9349: NEG
9350: PPUSH
9351: LD_INT 1
9353: PPUSH
9354: CALL_OW 12
9358: PLUS
9359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9360: LD_VAR 0 6
9364: PPUSH
9365: LD_VAR 0 7
9369: PPUSH
9370: CALL_OW 488
9374: NOT
9375: IFFALSE 9397
// begin _x := x ;
9377: LD_ADDR_VAR 0 6
9381: PUSH
9382: LD_VAR 0 4
9386: ST_TO_ADDR
// _y := y ;
9387: LD_ADDR_VAR 0 7
9391: PUSH
9392: LD_VAR 0 5
9396: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9397: LD_ADDR_VAR 0 3
9401: PUSH
9402: LD_INT 1
9404: PPUSH
9405: LD_VAR 0 14
9409: PPUSH
9410: CALL_OW 12
9414: ST_TO_ADDR
// case i of 1 :
9415: LD_VAR 0 3
9419: PUSH
9420: LD_INT 1
9422: DOUBLE
9423: EQUAL
9424: IFTRUE 9428
9426: GO 9445
9428: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_VAR 0 10
9438: PPUSH
9439: CALL_OW 115
9443: GO 9506
9445: LD_INT 2
9447: DOUBLE
9448: EQUAL
9449: IFTRUE 9453
9451: GO 9475
9453: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9454: LD_VAR 0 1
9458: PPUSH
9459: LD_VAR 0 6
9463: PPUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 153
9473: GO 9506
9475: LD_INT 3
9477: DOUBLE
9478: EQUAL
9479: IFTRUE 9483
9481: GO 9505
9483: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9484: LD_VAR 0 1
9488: PPUSH
9489: LD_VAR 0 6
9493: PPUSH
9494: LD_VAR 0 7
9498: PPUSH
9499: CALL_OW 154
9503: GO 9506
9505: POP
// end ;
9506: LD_VAR 0 2
9510: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9511: LD_INT 0
9513: PPUSH
9514: PPUSH
9515: PPUSH
9516: PPUSH
9517: PPUSH
9518: PPUSH
// if not unit or not building then
9519: LD_VAR 0 1
9523: NOT
9524: PUSH
9525: LD_VAR 0 2
9529: NOT
9530: OR
9531: IFFALSE 9535
// exit ;
9533: GO 9693
// x := GetX ( building ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_VAR 0 2
9544: PPUSH
9545: CALL_OW 250
9549: ST_TO_ADDR
// y := GetY ( building ) ;
9550: LD_ADDR_VAR 0 6
9554: PUSH
9555: LD_VAR 0 2
9559: PPUSH
9560: CALL_OW 251
9564: ST_TO_ADDR
// for i = 0 to 5 do
9565: LD_ADDR_VAR 0 4
9569: PUSH
9570: DOUBLE
9571: LD_INT 0
9573: DEC
9574: ST_TO_ADDR
9575: LD_INT 5
9577: PUSH
9578: FOR_TO
9579: IFFALSE 9691
// begin _x := ShiftX ( x , i , 3 ) ;
9581: LD_ADDR_VAR 0 7
9585: PUSH
9586: LD_VAR 0 5
9590: PPUSH
9591: LD_VAR 0 4
9595: PPUSH
9596: LD_INT 3
9598: PPUSH
9599: CALL_OW 272
9603: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9604: LD_ADDR_VAR 0 8
9608: PUSH
9609: LD_VAR 0 6
9613: PPUSH
9614: LD_VAR 0 4
9618: PPUSH
9619: LD_INT 3
9621: PPUSH
9622: CALL_OW 273
9626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9627: LD_VAR 0 7
9631: PPUSH
9632: LD_VAR 0 8
9636: PPUSH
9637: CALL_OW 488
9641: NOT
9642: IFFALSE 9646
// continue ;
9644: GO 9578
// if HexInfo ( _x , _y ) = 0 then
9646: LD_VAR 0 7
9650: PPUSH
9651: LD_VAR 0 8
9655: PPUSH
9656: CALL_OW 428
9660: PUSH
9661: LD_INT 0
9663: EQUAL
9664: IFFALSE 9689
// begin ComMoveXY ( unit , _x , _y ) ;
9666: LD_VAR 0 1
9670: PPUSH
9671: LD_VAR 0 7
9675: PPUSH
9676: LD_VAR 0 8
9680: PPUSH
9681: CALL_OW 111
// exit ;
9685: POP
9686: POP
9687: GO 9693
// end ; end ;
9689: GO 9578
9691: POP
9692: POP
// end ;
9693: LD_VAR 0 3
9697: RET
// export function ScanBase ( side , base_area ) ; begin
9698: LD_INT 0
9700: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9701: LD_ADDR_VAR 0 3
9705: PUSH
9706: LD_VAR 0 2
9710: PPUSH
9711: LD_INT 81
9713: PUSH
9714: LD_VAR 0 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PPUSH
9723: CALL_OW 70
9727: ST_TO_ADDR
// end ;
9728: LD_VAR 0 3
9732: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9733: LD_INT 0
9735: PPUSH
9736: PPUSH
9737: PPUSH
9738: PPUSH
// result := false ;
9739: LD_ADDR_VAR 0 2
9743: PUSH
9744: LD_INT 0
9746: ST_TO_ADDR
// side := GetSide ( unit ) ;
9747: LD_ADDR_VAR 0 3
9751: PUSH
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 255
9761: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9762: LD_ADDR_VAR 0 4
9766: PUSH
9767: LD_VAR 0 1
9771: PPUSH
9772: CALL_OW 248
9776: ST_TO_ADDR
// case nat of 1 :
9777: LD_VAR 0 4
9781: PUSH
9782: LD_INT 1
9784: DOUBLE
9785: EQUAL
9786: IFTRUE 9790
9788: GO 9801
9790: POP
// tech := tech_lassight ; 2 :
9791: LD_ADDR_VAR 0 5
9795: PUSH
9796: LD_INT 12
9798: ST_TO_ADDR
9799: GO 9840
9801: LD_INT 2
9803: DOUBLE
9804: EQUAL
9805: IFTRUE 9809
9807: GO 9820
9809: POP
// tech := tech_mortar ; 3 :
9810: LD_ADDR_VAR 0 5
9814: PUSH
9815: LD_INT 41
9817: ST_TO_ADDR
9818: GO 9840
9820: LD_INT 3
9822: DOUBLE
9823: EQUAL
9824: IFTRUE 9828
9826: GO 9839
9828: POP
// tech := tech_bazooka ; end ;
9829: LD_ADDR_VAR 0 5
9833: PUSH
9834: LD_INT 44
9836: ST_TO_ADDR
9837: GO 9840
9839: POP
// if Researched ( side , tech ) then
9840: LD_VAR 0 3
9844: PPUSH
9845: LD_VAR 0 5
9849: PPUSH
9850: CALL_OW 325
9854: IFFALSE 9881
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9856: LD_ADDR_VAR 0 2
9860: PUSH
9861: LD_INT 5
9863: PUSH
9864: LD_INT 8
9866: PUSH
9867: LD_INT 9
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: PUSH
9875: LD_VAR 0 4
9879: ARRAY
9880: ST_TO_ADDR
// end ;
9881: LD_VAR 0 2
9885: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
9890: PPUSH
// if not mines then
9891: LD_VAR 0 2
9895: NOT
9896: IFFALSE 9900
// exit ;
9898: GO 10044
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9900: LD_ADDR_VAR 0 5
9904: PUSH
9905: LD_INT 81
9907: PUSH
9908: LD_VAR 0 1
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 21
9922: PUSH
9923: LD_INT 3
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 69
9942: ST_TO_ADDR
// for i in mines do
9943: LD_ADDR_VAR 0 4
9947: PUSH
9948: LD_VAR 0 2
9952: PUSH
9953: FOR_IN
9954: IFFALSE 10042
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
9956: LD_VAR 0 4
9960: PUSH
9961: LD_INT 1
9963: ARRAY
9964: PPUSH
9965: LD_VAR 0 4
9969: PUSH
9970: LD_INT 2
9972: ARRAY
9973: PPUSH
9974: CALL_OW 458
9978: NOT
9979: IFFALSE 9983
// continue ;
9981: GO 9953
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
9983: LD_VAR 0 4
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PPUSH
9992: LD_VAR 0 4
9996: PUSH
9997: LD_INT 2
9999: ARRAY
10000: PPUSH
10001: CALL_OW 428
10005: PUSH
10006: LD_VAR 0 5
10010: IN
10011: IFFALSE 10040
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10013: LD_VAR 0 4
10017: PUSH
10018: LD_INT 1
10020: ARRAY
10021: PPUSH
10022: LD_VAR 0 4
10026: PUSH
10027: LD_INT 2
10029: ARRAY
10030: PPUSH
10031: LD_VAR 0 1
10035: PPUSH
10036: CALL_OW 456
// end ;
10040: GO 9953
10042: POP
10043: POP
// end ;
10044: LD_VAR 0 3
10048: RET
// export function Count ( array ) ; var i ; begin
10049: LD_INT 0
10051: PPUSH
10052: PPUSH
// result := 0 ;
10053: LD_ADDR_VAR 0 2
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// for i in array do
10061: LD_ADDR_VAR 0 3
10065: PUSH
10066: LD_VAR 0 1
10070: PUSH
10071: FOR_IN
10072: IFFALSE 10096
// if i then
10074: LD_VAR 0 3
10078: IFFALSE 10094
// result := result + 1 ;
10080: LD_ADDR_VAR 0 2
10084: PUSH
10085: LD_VAR 0 2
10089: PUSH
10090: LD_INT 1
10092: PLUS
10093: ST_TO_ADDR
10094: GO 10071
10096: POP
10097: POP
// end ;
10098: LD_VAR 0 2
10102: RET
// export function IsEmpty ( building ) ; begin
10103: LD_INT 0
10105: PPUSH
// if not building then
10106: LD_VAR 0 1
10110: NOT
10111: IFFALSE 10115
// exit ;
10113: GO 10158
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10115: LD_ADDR_VAR 0 2
10119: PUSH
10120: LD_VAR 0 1
10124: PUSH
10125: LD_INT 22
10127: PUSH
10128: LD_VAR 0 1
10132: PPUSH
10133: CALL_OW 255
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 58
10144: PUSH
10145: EMPTY
10146: LIST
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PPUSH
10152: CALL_OW 69
10156: IN
10157: ST_TO_ADDR
// end ;
10158: LD_VAR 0 2
10162: RET
// export function IsNotFull ( building ) ; var places ; begin
10163: LD_INT 0
10165: PPUSH
10166: PPUSH
// if not building then
10167: LD_VAR 0 1
10171: NOT
10172: IFFALSE 10176
// exit ;
10174: GO 10347
// result := false ;
10176: LD_ADDR_VAR 0 2
10180: PUSH
10181: LD_INT 0
10183: ST_TO_ADDR
// places := 0 ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
10192: LD_VAR 0 1
10196: PPUSH
10197: CALL_OW 266
10201: PUSH
10202: LD_INT 0
10204: DOUBLE
10205: EQUAL
10206: IFTRUE 10264
10208: LD_INT 1
10210: DOUBLE
10211: EQUAL
10212: IFTRUE 10264
10214: LD_INT 6
10216: DOUBLE
10217: EQUAL
10218: IFTRUE 10264
10220: LD_INT 7
10222: DOUBLE
10223: EQUAL
10224: IFTRUE 10264
10226: LD_INT 8
10228: DOUBLE
10229: EQUAL
10230: IFTRUE 10264
10232: LD_INT 4
10234: DOUBLE
10235: EQUAL
10236: IFTRUE 10264
10238: LD_INT 5
10240: DOUBLE
10241: EQUAL
10242: IFTRUE 10264
10244: LD_INT 2
10246: DOUBLE
10247: EQUAL
10248: IFTRUE 10264
10250: LD_INT 3
10252: DOUBLE
10253: EQUAL
10254: IFTRUE 10264
10256: LD_INT 35
10258: DOUBLE
10259: EQUAL
10260: IFTRUE 10264
10262: GO 10275
10264: POP
// places := 6 ; b_bunker , b_breastwork :
10265: LD_ADDR_VAR 0 3
10269: PUSH
10270: LD_INT 6
10272: ST_TO_ADDR
10273: GO 10320
10275: LD_INT 32
10277: DOUBLE
10278: EQUAL
10279: IFTRUE 10289
10281: LD_INT 31
10283: DOUBLE
10284: EQUAL
10285: IFTRUE 10289
10287: GO 10300
10289: POP
// places := 1 ; b_control_tower :
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: LD_INT 1
10297: ST_TO_ADDR
10298: GO 10320
10300: LD_INT 36
10302: DOUBLE
10303: EQUAL
10304: IFTRUE 10308
10306: GO 10319
10308: POP
// places := 3 ; end ;
10309: LD_ADDR_VAR 0 3
10313: PUSH
10314: LD_INT 3
10316: ST_TO_ADDR
10317: GO 10320
10319: POP
// if places then
10320: LD_VAR 0 3
10324: IFFALSE 10347
// result := UnitsInside ( building ) < places ;
10326: LD_ADDR_VAR 0 2
10330: PUSH
10331: LD_VAR 0 1
10335: PPUSH
10336: CALL_OW 313
10340: PUSH
10341: LD_VAR 0 3
10345: LESS
10346: ST_TO_ADDR
// end ;
10347: LD_VAR 0 2
10351: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10352: LD_INT 0
10354: PPUSH
10355: PPUSH
10356: PPUSH
10357: PPUSH
// tmp := [ ] ;
10358: LD_ADDR_VAR 0 3
10362: PUSH
10363: EMPTY
10364: ST_TO_ADDR
// list := [ ] ;
10365: LD_ADDR_VAR 0 5
10369: PUSH
10370: EMPTY
10371: ST_TO_ADDR
// for i = 16 to 25 do
10372: LD_ADDR_VAR 0 4
10376: PUSH
10377: DOUBLE
10378: LD_INT 16
10380: DEC
10381: ST_TO_ADDR
10382: LD_INT 25
10384: PUSH
10385: FOR_TO
10386: IFFALSE 10459
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10388: LD_ADDR_VAR 0 3
10392: PUSH
10393: LD_VAR 0 3
10397: PUSH
10398: LD_INT 22
10400: PUSH
10401: LD_VAR 0 1
10405: PPUSH
10406: CALL_OW 255
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: LD_INT 91
10417: PUSH
10418: LD_VAR 0 1
10422: PUSH
10423: LD_INT 6
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 30
10433: PUSH
10434: LD_VAR 0 4
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: PUSH
10448: EMPTY
10449: LIST
10450: PPUSH
10451: CALL_OW 69
10455: ADD
10456: ST_TO_ADDR
10457: GO 10385
10459: POP
10460: POP
// for i = 1 to tmp do
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: DOUBLE
10467: LD_INT 1
10469: DEC
10470: ST_TO_ADDR
10471: LD_VAR 0 3
10475: PUSH
10476: FOR_TO
10477: IFFALSE 10565
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10479: LD_ADDR_VAR 0 5
10483: PUSH
10484: LD_VAR 0 5
10488: PUSH
10489: LD_VAR 0 3
10493: PUSH
10494: LD_VAR 0 4
10498: ARRAY
10499: PPUSH
10500: CALL_OW 266
10504: PUSH
10505: LD_VAR 0 3
10509: PUSH
10510: LD_VAR 0 4
10514: ARRAY
10515: PPUSH
10516: CALL_OW 250
10520: PUSH
10521: LD_VAR 0 3
10525: PUSH
10526: LD_VAR 0 4
10530: ARRAY
10531: PPUSH
10532: CALL_OW 251
10536: PUSH
10537: LD_VAR 0 3
10541: PUSH
10542: LD_VAR 0 4
10546: ARRAY
10547: PPUSH
10548: CALL_OW 254
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: ADD
10562: ST_TO_ADDR
10563: GO 10476
10565: POP
10566: POP
// result := list ;
10567: LD_ADDR_VAR 0 2
10571: PUSH
10572: LD_VAR 0 5
10576: ST_TO_ADDR
// end ;
10577: LD_VAR 0 2
10581: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10582: LD_INT 0
10584: PPUSH
10585: PPUSH
10586: PPUSH
10587: PPUSH
10588: PPUSH
10589: PPUSH
10590: PPUSH
// if not factory then
10591: LD_VAR 0 1
10595: NOT
10596: IFFALSE 10600
// exit ;
10598: GO 11193
// if control = control_apeman then
10600: LD_VAR 0 4
10604: PUSH
10605: LD_INT 5
10607: EQUAL
10608: IFFALSE 10717
// begin tmp := UnitsInside ( factory ) ;
10610: LD_ADDR_VAR 0 8
10614: PUSH
10615: LD_VAR 0 1
10619: PPUSH
10620: CALL_OW 313
10624: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10625: LD_VAR 0 8
10629: PPUSH
10630: LD_INT 25
10632: PUSH
10633: LD_INT 12
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 72
10644: NOT
10645: IFFALSE 10655
// control := control_manual ;
10647: LD_ADDR_VAR 0 4
10651: PUSH
10652: LD_INT 1
10654: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10655: LD_ADDR_VAR 0 8
10659: PUSH
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL 10352 0 1
10669: ST_TO_ADDR
// if tmp then
10670: LD_VAR 0 8
10674: IFFALSE 10717
// begin for i in tmp do
10676: LD_ADDR_VAR 0 7
10680: PUSH
10681: LD_VAR 0 8
10685: PUSH
10686: FOR_IN
10687: IFFALSE 10715
// if i [ 1 ] = b_ext_radio then
10689: LD_VAR 0 7
10693: PUSH
10694: LD_INT 1
10696: ARRAY
10697: PUSH
10698: LD_INT 22
10700: EQUAL
10701: IFFALSE 10713
// begin control := control_remote ;
10703: LD_ADDR_VAR 0 4
10707: PUSH
10708: LD_INT 2
10710: ST_TO_ADDR
// break ;
10711: GO 10715
// end ;
10713: GO 10686
10715: POP
10716: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10717: LD_VAR 0 1
10721: PPUSH
10722: LD_VAR 0 2
10726: PPUSH
10727: LD_VAR 0 3
10731: PPUSH
10732: LD_VAR 0 4
10736: PPUSH
10737: LD_VAR 0 5
10741: PPUSH
10742: CALL_OW 448
10746: IFFALSE 10781
// begin result := [ chassis , engine , control , weapon ] ;
10748: LD_ADDR_VAR 0 6
10752: PUSH
10753: LD_VAR 0 2
10757: PUSH
10758: LD_VAR 0 3
10762: PUSH
10763: LD_VAR 0 4
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: ST_TO_ADDR
// exit ;
10779: GO 11193
// end ; _chassis := AvailableChassisList ( factory ) ;
10781: LD_ADDR_VAR 0 9
10785: PUSH
10786: LD_VAR 0 1
10790: PPUSH
10791: CALL_OW 475
10795: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10796: LD_ADDR_VAR 0 11
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 476
10810: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10811: LD_ADDR_VAR 0 12
10815: PUSH
10816: LD_VAR 0 1
10820: PPUSH
10821: CALL_OW 477
10825: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10826: LD_ADDR_VAR 0 10
10830: PUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 478
10840: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10841: LD_VAR 0 9
10845: NOT
10846: PUSH
10847: LD_VAR 0 11
10851: NOT
10852: OR
10853: PUSH
10854: LD_VAR 0 12
10858: NOT
10859: OR
10860: PUSH
10861: LD_VAR 0 10
10865: NOT
10866: OR
10867: IFFALSE 10902
// begin result := [ chassis , engine , control , weapon ] ;
10869: LD_ADDR_VAR 0 6
10873: PUSH
10874: LD_VAR 0 2
10878: PUSH
10879: LD_VAR 0 3
10883: PUSH
10884: LD_VAR 0 4
10888: PUSH
10889: LD_VAR 0 5
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: ST_TO_ADDR
// exit ;
10900: GO 11193
// end ; if not chassis in _chassis then
10902: LD_VAR 0 2
10906: PUSH
10907: LD_VAR 0 9
10911: IN
10912: NOT
10913: IFFALSE 10939
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10915: LD_ADDR_VAR 0 2
10919: PUSH
10920: LD_VAR 0 9
10924: PUSH
10925: LD_INT 1
10927: PPUSH
10928: LD_VAR 0 9
10932: PPUSH
10933: CALL_OW 12
10937: ARRAY
10938: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_VAR 0 3
10948: PPUSH
10949: CALL 11198 0 2
10953: NOT
10954: IFFALSE 11013
// repeat engine := _engine [ 1 ] ;
10956: LD_ADDR_VAR 0 3
10960: PUSH
10961: LD_VAR 0 11
10965: PUSH
10966: LD_INT 1
10968: ARRAY
10969: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10970: LD_ADDR_VAR 0 11
10974: PUSH
10975: LD_VAR 0 11
10979: PPUSH
10980: LD_INT 1
10982: PPUSH
10983: CALL_OW 3
10987: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10988: LD_VAR 0 2
10992: PPUSH
10993: LD_VAR 0 3
10997: PPUSH
10998: CALL 11198 0 2
11002: PUSH
11003: LD_VAR 0 11
11007: PUSH
11008: EMPTY
11009: EQUAL
11010: OR
11011: IFFALSE 10956
// if not control in _control then
11013: LD_VAR 0 4
11017: PUSH
11018: LD_VAR 0 12
11022: IN
11023: NOT
11024: IFFALSE 11050
// control := _control [ rand ( 1 , _control ) ] ;
11026: LD_ADDR_VAR 0 4
11030: PUSH
11031: LD_VAR 0 12
11035: PUSH
11036: LD_INT 1
11038: PPUSH
11039: LD_VAR 0 12
11043: PPUSH
11044: CALL_OW 12
11048: ARRAY
11049: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11050: LD_VAR 0 2
11054: PPUSH
11055: LD_VAR 0 5
11059: PPUSH
11060: CALL 11418 0 2
11064: NOT
11065: IFFALSE 11124
// repeat weapon := _weapon [ 1 ] ;
11067: LD_ADDR_VAR 0 5
11071: PUSH
11072: LD_VAR 0 10
11076: PUSH
11077: LD_INT 1
11079: ARRAY
11080: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11081: LD_ADDR_VAR 0 10
11085: PUSH
11086: LD_VAR 0 10
11090: PPUSH
11091: LD_INT 1
11093: PPUSH
11094: CALL_OW 3
11098: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11099: LD_VAR 0 2
11103: PPUSH
11104: LD_VAR 0 5
11108: PPUSH
11109: CALL 11418 0 2
11113: PUSH
11114: LD_VAR 0 10
11118: PUSH
11119: EMPTY
11120: EQUAL
11121: OR
11122: IFFALSE 11067
// result := [ ] ;
11124: LD_ADDR_VAR 0 6
11128: PUSH
11129: EMPTY
11130: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11131: LD_VAR 0 1
11135: PPUSH
11136: LD_VAR 0 2
11140: PPUSH
11141: LD_VAR 0 3
11145: PPUSH
11146: LD_VAR 0 4
11150: PPUSH
11151: LD_VAR 0 5
11155: PPUSH
11156: CALL_OW 448
11160: IFFALSE 11193
// result := [ chassis , engine , control , weapon ] ;
11162: LD_ADDR_VAR 0 6
11166: PUSH
11167: LD_VAR 0 2
11171: PUSH
11172: LD_VAR 0 3
11176: PUSH
11177: LD_VAR 0 4
11181: PUSH
11182: LD_VAR 0 5
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: ST_TO_ADDR
// end ;
11193: LD_VAR 0 6
11197: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11198: LD_INT 0
11200: PPUSH
// if not chassis or not engine then
11201: LD_VAR 0 1
11205: NOT
11206: PUSH
11207: LD_VAR 0 2
11211: NOT
11212: OR
11213: IFFALSE 11217
// exit ;
11215: GO 11413
// case engine of engine_solar :
11217: LD_VAR 0 2
11221: PUSH
11222: LD_INT 2
11224: DOUBLE
11225: EQUAL
11226: IFTRUE 11230
11228: GO 11268
11230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11231: LD_ADDR_VAR 0 3
11235: PUSH
11236: LD_INT 11
11238: PUSH
11239: LD_INT 12
11241: PUSH
11242: LD_INT 13
11244: PUSH
11245: LD_INT 14
11247: PUSH
11248: LD_INT 1
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: ST_TO_ADDR
11266: GO 11397
11268: LD_INT 1
11270: DOUBLE
11271: EQUAL
11272: IFTRUE 11276
11274: GO 11338
11276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11277: LD_ADDR_VAR 0 3
11281: PUSH
11282: LD_INT 11
11284: PUSH
11285: LD_INT 12
11287: PUSH
11288: LD_INT 13
11290: PUSH
11291: LD_INT 14
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 3
11302: PUSH
11303: LD_INT 4
11305: PUSH
11306: LD_INT 5
11308: PUSH
11309: LD_INT 21
11311: PUSH
11312: LD_INT 23
11314: PUSH
11315: LD_INT 22
11317: PUSH
11318: LD_INT 24
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: ST_TO_ADDR
11336: GO 11397
11338: LD_INT 3
11340: DOUBLE
11341: EQUAL
11342: IFTRUE 11346
11344: GO 11396
11346: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: LD_INT 13
11354: PUSH
11355: LD_INT 14
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: LD_INT 3
11363: PUSH
11364: LD_INT 4
11366: PUSH
11367: LD_INT 5
11369: PUSH
11370: LD_INT 21
11372: PUSH
11373: LD_INT 22
11375: PUSH
11376: LD_INT 23
11378: PUSH
11379: LD_INT 24
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: ST_TO_ADDR
11394: GO 11397
11396: POP
// result := ( chassis in result ) ;
11397: LD_ADDR_VAR 0 3
11401: PUSH
11402: LD_VAR 0 1
11406: PUSH
11407: LD_VAR 0 3
11411: IN
11412: ST_TO_ADDR
// end ;
11413: LD_VAR 0 3
11417: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11418: LD_INT 0
11420: PPUSH
// if not chassis or not weapon then
11421: LD_VAR 0 1
11425: NOT
11426: PUSH
11427: LD_VAR 0 2
11431: NOT
11432: OR
11433: IFFALSE 11437
// exit ;
11435: GO 12499
// case weapon of us_machine_gun :
11437: LD_VAR 0 2
11441: PUSH
11442: LD_INT 2
11444: DOUBLE
11445: EQUAL
11446: IFTRUE 11450
11448: GO 11480
11450: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11451: LD_ADDR_VAR 0 3
11455: PUSH
11456: LD_INT 1
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: LD_INT 3
11464: PUSH
11465: LD_INT 4
11467: PUSH
11468: LD_INT 5
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: ST_TO_ADDR
11478: GO 12483
11480: LD_INT 3
11482: DOUBLE
11483: EQUAL
11484: IFTRUE 11488
11486: GO 11518
11488: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11489: LD_ADDR_VAR 0 3
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: LD_INT 3
11502: PUSH
11503: LD_INT 4
11505: PUSH
11506: LD_INT 5
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: ST_TO_ADDR
11516: GO 12483
11518: LD_INT 11
11520: DOUBLE
11521: EQUAL
11522: IFTRUE 11526
11524: GO 11556
11526: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11527: LD_ADDR_VAR 0 3
11531: PUSH
11532: LD_INT 1
11534: PUSH
11535: LD_INT 2
11537: PUSH
11538: LD_INT 3
11540: PUSH
11541: LD_INT 4
11543: PUSH
11544: LD_INT 5
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: ST_TO_ADDR
11554: GO 12483
11556: LD_INT 4
11558: DOUBLE
11559: EQUAL
11560: IFTRUE 11564
11562: GO 11590
11564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11565: LD_ADDR_VAR 0 3
11569: PUSH
11570: LD_INT 2
11572: PUSH
11573: LD_INT 3
11575: PUSH
11576: LD_INT 4
11578: PUSH
11579: LD_INT 5
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: ST_TO_ADDR
11588: GO 12483
11590: LD_INT 5
11592: DOUBLE
11593: EQUAL
11594: IFTRUE 11598
11596: GO 11624
11598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: LD_INT 2
11606: PUSH
11607: LD_INT 3
11609: PUSH
11610: LD_INT 4
11612: PUSH
11613: LD_INT 5
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: ST_TO_ADDR
11622: GO 12483
11624: LD_INT 9
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11658
11632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11633: LD_ADDR_VAR 0 3
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: LD_INT 3
11643: PUSH
11644: LD_INT 4
11646: PUSH
11647: LD_INT 5
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: ST_TO_ADDR
11656: GO 12483
11658: LD_INT 7
11660: DOUBLE
11661: EQUAL
11662: IFTRUE 11666
11664: GO 11692
11666: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11667: LD_ADDR_VAR 0 3
11671: PUSH
11672: LD_INT 2
11674: PUSH
11675: LD_INT 3
11677: PUSH
11678: LD_INT 4
11680: PUSH
11681: LD_INT 5
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: ST_TO_ADDR
11690: GO 12483
11692: LD_INT 12
11694: DOUBLE
11695: EQUAL
11696: IFTRUE 11700
11698: GO 11726
11700: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11701: LD_ADDR_VAR 0 3
11705: PUSH
11706: LD_INT 2
11708: PUSH
11709: LD_INT 3
11711: PUSH
11712: LD_INT 4
11714: PUSH
11715: LD_INT 5
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: ST_TO_ADDR
11724: GO 12483
11726: LD_INT 13
11728: DOUBLE
11729: EQUAL
11730: IFTRUE 11734
11732: GO 11760
11734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11735: LD_ADDR_VAR 0 3
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: LD_INT 4
11748: PUSH
11749: LD_INT 5
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: ST_TO_ADDR
11758: GO 12483
11760: LD_INT 14
11762: DOUBLE
11763: EQUAL
11764: IFTRUE 11768
11766: GO 11786
11768: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11769: LD_ADDR_VAR 0 3
11773: PUSH
11774: LD_INT 4
11776: PUSH
11777: LD_INT 5
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: ST_TO_ADDR
11784: GO 12483
11786: LD_INT 6
11788: DOUBLE
11789: EQUAL
11790: IFTRUE 11794
11792: GO 11812
11794: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11795: LD_ADDR_VAR 0 3
11799: PUSH
11800: LD_INT 4
11802: PUSH
11803: LD_INT 5
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: ST_TO_ADDR
11810: GO 12483
11812: LD_INT 10
11814: DOUBLE
11815: EQUAL
11816: IFTRUE 11820
11818: GO 11838
11820: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11821: LD_ADDR_VAR 0 3
11825: PUSH
11826: LD_INT 4
11828: PUSH
11829: LD_INT 5
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: ST_TO_ADDR
11836: GO 12483
11838: LD_INT 22
11840: DOUBLE
11841: EQUAL
11842: IFTRUE 11846
11844: GO 11872
11846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11847: LD_ADDR_VAR 0 3
11851: PUSH
11852: LD_INT 11
11854: PUSH
11855: LD_INT 12
11857: PUSH
11858: LD_INT 13
11860: PUSH
11861: LD_INT 14
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: ST_TO_ADDR
11870: GO 12483
11872: LD_INT 23
11874: DOUBLE
11875: EQUAL
11876: IFTRUE 11880
11878: GO 11906
11880: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11881: LD_ADDR_VAR 0 3
11885: PUSH
11886: LD_INT 11
11888: PUSH
11889: LD_INT 12
11891: PUSH
11892: LD_INT 13
11894: PUSH
11895: LD_INT 14
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: ST_TO_ADDR
11904: GO 12483
11906: LD_INT 24
11908: DOUBLE
11909: EQUAL
11910: IFTRUE 11914
11912: GO 11940
11914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11915: LD_ADDR_VAR 0 3
11919: PUSH
11920: LD_INT 11
11922: PUSH
11923: LD_INT 12
11925: PUSH
11926: LD_INT 13
11928: PUSH
11929: LD_INT 14
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: ST_TO_ADDR
11938: GO 12483
11940: LD_INT 30
11942: DOUBLE
11943: EQUAL
11944: IFTRUE 11948
11946: GO 11974
11948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11949: LD_ADDR_VAR 0 3
11953: PUSH
11954: LD_INT 11
11956: PUSH
11957: LD_INT 12
11959: PUSH
11960: LD_INT 13
11962: PUSH
11963: LD_INT 14
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: ST_TO_ADDR
11972: GO 12483
11974: LD_INT 25
11976: DOUBLE
11977: EQUAL
11978: IFTRUE 11982
11980: GO 12000
11982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11983: LD_ADDR_VAR 0 3
11987: PUSH
11988: LD_INT 13
11990: PUSH
11991: LD_INT 14
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: ST_TO_ADDR
11998: GO 12483
12000: LD_INT 27
12002: DOUBLE
12003: EQUAL
12004: IFTRUE 12008
12006: GO 12026
12008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12009: LD_ADDR_VAR 0 3
12013: PUSH
12014: LD_INT 13
12016: PUSH
12017: LD_INT 14
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: ST_TO_ADDR
12024: GO 12483
12026: LD_EXP 46
12030: DOUBLE
12031: EQUAL
12032: IFTRUE 12036
12034: GO 12062
12036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12037: LD_ADDR_VAR 0 3
12041: PUSH
12042: LD_INT 11
12044: PUSH
12045: LD_INT 12
12047: PUSH
12048: LD_INT 13
12050: PUSH
12051: LD_INT 14
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: ST_TO_ADDR
12060: GO 12483
12062: LD_INT 28
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12088
12070: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12071: LD_ADDR_VAR 0 3
12075: PUSH
12076: LD_INT 13
12078: PUSH
12079: LD_INT 14
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: ST_TO_ADDR
12086: GO 12483
12088: LD_INT 29
12090: DOUBLE
12091: EQUAL
12092: IFTRUE 12096
12094: GO 12114
12096: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12097: LD_ADDR_VAR 0 3
12101: PUSH
12102: LD_INT 13
12104: PUSH
12105: LD_INT 14
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: ST_TO_ADDR
12112: GO 12483
12114: LD_INT 31
12116: DOUBLE
12117: EQUAL
12118: IFTRUE 12122
12120: GO 12140
12122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12123: LD_ADDR_VAR 0 3
12127: PUSH
12128: LD_INT 13
12130: PUSH
12131: LD_INT 14
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: ST_TO_ADDR
12138: GO 12483
12140: LD_INT 26
12142: DOUBLE
12143: EQUAL
12144: IFTRUE 12148
12146: GO 12166
12148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12149: LD_ADDR_VAR 0 3
12153: PUSH
12154: LD_INT 13
12156: PUSH
12157: LD_INT 14
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: ST_TO_ADDR
12164: GO 12483
12166: LD_INT 42
12168: DOUBLE
12169: EQUAL
12170: IFTRUE 12174
12172: GO 12200
12174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12175: LD_ADDR_VAR 0 3
12179: PUSH
12180: LD_INT 21
12182: PUSH
12183: LD_INT 22
12185: PUSH
12186: LD_INT 23
12188: PUSH
12189: LD_INT 24
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: ST_TO_ADDR
12198: GO 12483
12200: LD_INT 43
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12234
12208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 21
12216: PUSH
12217: LD_INT 22
12219: PUSH
12220: LD_INT 23
12222: PUSH
12223: LD_INT 24
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: ST_TO_ADDR
12232: GO 12483
12234: LD_INT 44
12236: DOUBLE
12237: EQUAL
12238: IFTRUE 12242
12240: GO 12268
12242: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12243: LD_ADDR_VAR 0 3
12247: PUSH
12248: LD_INT 21
12250: PUSH
12251: LD_INT 22
12253: PUSH
12254: LD_INT 23
12256: PUSH
12257: LD_INT 24
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: ST_TO_ADDR
12266: GO 12483
12268: LD_INT 45
12270: DOUBLE
12271: EQUAL
12272: IFTRUE 12276
12274: GO 12302
12276: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12277: LD_ADDR_VAR 0 3
12281: PUSH
12282: LD_INT 21
12284: PUSH
12285: LD_INT 22
12287: PUSH
12288: LD_INT 23
12290: PUSH
12291: LD_INT 24
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: ST_TO_ADDR
12300: GO 12483
12302: LD_INT 49
12304: DOUBLE
12305: EQUAL
12306: IFTRUE 12310
12308: GO 12336
12310: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12311: LD_ADDR_VAR 0 3
12315: PUSH
12316: LD_INT 21
12318: PUSH
12319: LD_INT 22
12321: PUSH
12322: LD_INT 23
12324: PUSH
12325: LD_INT 24
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: ST_TO_ADDR
12334: GO 12483
12336: LD_INT 51
12338: DOUBLE
12339: EQUAL
12340: IFTRUE 12344
12342: GO 12370
12344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12345: LD_ADDR_VAR 0 3
12349: PUSH
12350: LD_INT 21
12352: PUSH
12353: LD_INT 22
12355: PUSH
12356: LD_INT 23
12358: PUSH
12359: LD_INT 24
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: ST_TO_ADDR
12368: GO 12483
12370: LD_INT 52
12372: DOUBLE
12373: EQUAL
12374: IFTRUE 12378
12376: GO 12404
12378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12379: LD_ADDR_VAR 0 3
12383: PUSH
12384: LD_INT 21
12386: PUSH
12387: LD_INT 22
12389: PUSH
12390: LD_INT 23
12392: PUSH
12393: LD_INT 24
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: ST_TO_ADDR
12402: GO 12483
12404: LD_INT 53
12406: DOUBLE
12407: EQUAL
12408: IFTRUE 12412
12410: GO 12430
12412: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12413: LD_ADDR_VAR 0 3
12417: PUSH
12418: LD_INT 23
12420: PUSH
12421: LD_INT 24
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: ST_TO_ADDR
12428: GO 12483
12430: LD_INT 46
12432: DOUBLE
12433: EQUAL
12434: IFTRUE 12438
12436: GO 12456
12438: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12439: LD_ADDR_VAR 0 3
12443: PUSH
12444: LD_INT 23
12446: PUSH
12447: LD_INT 24
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: ST_TO_ADDR
12454: GO 12483
12456: LD_INT 47
12458: DOUBLE
12459: EQUAL
12460: IFTRUE 12464
12462: GO 12482
12464: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12465: LD_ADDR_VAR 0 3
12469: PUSH
12470: LD_INT 23
12472: PUSH
12473: LD_INT 24
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: ST_TO_ADDR
12480: GO 12483
12482: POP
// result := ( chassis in result ) ;
12483: LD_ADDR_VAR 0 3
12487: PUSH
12488: LD_VAR 0 1
12492: PUSH
12493: LD_VAR 0 3
12497: IN
12498: ST_TO_ADDR
// end ;
12499: LD_VAR 0 3
12503: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12504: LD_INT 0
12506: PPUSH
12507: PPUSH
12508: PPUSH
12509: PPUSH
12510: PPUSH
12511: PPUSH
12512: PPUSH
// result := array ;
12513: LD_ADDR_VAR 0 5
12517: PUSH
12518: LD_VAR 0 1
12522: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12523: LD_VAR 0 1
12527: NOT
12528: PUSH
12529: LD_VAR 0 2
12533: NOT
12534: OR
12535: PUSH
12536: LD_VAR 0 3
12540: NOT
12541: OR
12542: PUSH
12543: LD_VAR 0 2
12547: PUSH
12548: LD_VAR 0 1
12552: GREATER
12553: OR
12554: PUSH
12555: LD_VAR 0 3
12559: PUSH
12560: LD_VAR 0 1
12564: GREATER
12565: OR
12566: IFFALSE 12570
// exit ;
12568: GO 12866
// if direction then
12570: LD_VAR 0 4
12574: IFFALSE 12638
// begin d := 1 ;
12576: LD_ADDR_VAR 0 9
12580: PUSH
12581: LD_INT 1
12583: ST_TO_ADDR
// if i_from > i_to then
12584: LD_VAR 0 2
12588: PUSH
12589: LD_VAR 0 3
12593: GREATER
12594: IFFALSE 12620
// length := ( array - i_from ) + i_to else
12596: LD_ADDR_VAR 0 11
12600: PUSH
12601: LD_VAR 0 1
12605: PUSH
12606: LD_VAR 0 2
12610: MINUS
12611: PUSH
12612: LD_VAR 0 3
12616: PLUS
12617: ST_TO_ADDR
12618: GO 12636
// length := i_to - i_from ;
12620: LD_ADDR_VAR 0 11
12624: PUSH
12625: LD_VAR 0 3
12629: PUSH
12630: LD_VAR 0 2
12634: MINUS
12635: ST_TO_ADDR
// end else
12636: GO 12699
// begin d := - 1 ;
12638: LD_ADDR_VAR 0 9
12642: PUSH
12643: LD_INT 1
12645: NEG
12646: ST_TO_ADDR
// if i_from > i_to then
12647: LD_VAR 0 2
12651: PUSH
12652: LD_VAR 0 3
12656: GREATER
12657: IFFALSE 12677
// length := i_from - i_to else
12659: LD_ADDR_VAR 0 11
12663: PUSH
12664: LD_VAR 0 2
12668: PUSH
12669: LD_VAR 0 3
12673: MINUS
12674: ST_TO_ADDR
12675: GO 12699
// length := ( array - i_to ) + i_from ;
12677: LD_ADDR_VAR 0 11
12681: PUSH
12682: LD_VAR 0 1
12686: PUSH
12687: LD_VAR 0 3
12691: MINUS
12692: PUSH
12693: LD_VAR 0 2
12697: PLUS
12698: ST_TO_ADDR
// end ; if not length then
12699: LD_VAR 0 11
12703: NOT
12704: IFFALSE 12708
// exit ;
12706: GO 12866
// tmp := array ;
12708: LD_ADDR_VAR 0 10
12712: PUSH
12713: LD_VAR 0 1
12717: ST_TO_ADDR
// for i = 1 to length do
12718: LD_ADDR_VAR 0 6
12722: PUSH
12723: DOUBLE
12724: LD_INT 1
12726: DEC
12727: ST_TO_ADDR
12728: LD_VAR 0 11
12732: PUSH
12733: FOR_TO
12734: IFFALSE 12854
// begin for j = 1 to array do
12736: LD_ADDR_VAR 0 7
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_VAR 0 1
12750: PUSH
12751: FOR_TO
12752: IFFALSE 12840
// begin k := j + d ;
12754: LD_ADDR_VAR 0 8
12758: PUSH
12759: LD_VAR 0 7
12763: PUSH
12764: LD_VAR 0 9
12768: PLUS
12769: ST_TO_ADDR
// if k > array then
12770: LD_VAR 0 8
12774: PUSH
12775: LD_VAR 0 1
12779: GREATER
12780: IFFALSE 12790
// k := 1 ;
12782: LD_ADDR_VAR 0 8
12786: PUSH
12787: LD_INT 1
12789: ST_TO_ADDR
// if not k then
12790: LD_VAR 0 8
12794: NOT
12795: IFFALSE 12807
// k := array ;
12797: LD_ADDR_VAR 0 8
12801: PUSH
12802: LD_VAR 0 1
12806: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12807: LD_ADDR_VAR 0 10
12811: PUSH
12812: LD_VAR 0 10
12816: PPUSH
12817: LD_VAR 0 8
12821: PPUSH
12822: LD_VAR 0 1
12826: PUSH
12827: LD_VAR 0 7
12831: ARRAY
12832: PPUSH
12833: CALL_OW 1
12837: ST_TO_ADDR
// end ;
12838: GO 12751
12840: POP
12841: POP
// array := tmp ;
12842: LD_ADDR_VAR 0 1
12846: PUSH
12847: LD_VAR 0 10
12851: ST_TO_ADDR
// end ;
12852: GO 12733
12854: POP
12855: POP
// result := array ;
12856: LD_ADDR_VAR 0 5
12860: PUSH
12861: LD_VAR 0 1
12865: ST_TO_ADDR
// end ;
12866: LD_VAR 0 5
12870: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12871: LD_INT 0
12873: PPUSH
12874: PPUSH
// result := 0 ;
12875: LD_ADDR_VAR 0 3
12879: PUSH
12880: LD_INT 0
12882: ST_TO_ADDR
// if not array or not value in array then
12883: LD_VAR 0 1
12887: NOT
12888: PUSH
12889: LD_VAR 0 2
12893: PUSH
12894: LD_VAR 0 1
12898: IN
12899: NOT
12900: OR
12901: IFFALSE 12905
// exit ;
12903: GO 12959
// for i = 1 to array do
12905: LD_ADDR_VAR 0 4
12909: PUSH
12910: DOUBLE
12911: LD_INT 1
12913: DEC
12914: ST_TO_ADDR
12915: LD_VAR 0 1
12919: PUSH
12920: FOR_TO
12921: IFFALSE 12957
// if value = array [ i ] then
12923: LD_VAR 0 2
12927: PUSH
12928: LD_VAR 0 1
12932: PUSH
12933: LD_VAR 0 4
12937: ARRAY
12938: EQUAL
12939: IFFALSE 12955
// begin result := i ;
12941: LD_ADDR_VAR 0 3
12945: PUSH
12946: LD_VAR 0 4
12950: ST_TO_ADDR
// exit ;
12951: POP
12952: POP
12953: GO 12959
// end ;
12955: GO 12920
12957: POP
12958: POP
// end ;
12959: LD_VAR 0 3
12963: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12964: LD_INT 0
12966: PPUSH
// vc_chassis := chassis ;
12967: LD_ADDR_OWVAR 37
12971: PUSH
12972: LD_VAR 0 1
12976: ST_TO_ADDR
// vc_engine := engine ;
12977: LD_ADDR_OWVAR 39
12981: PUSH
12982: LD_VAR 0 2
12986: ST_TO_ADDR
// vc_control := control ;
12987: LD_ADDR_OWVAR 38
12991: PUSH
12992: LD_VAR 0 3
12996: ST_TO_ADDR
// vc_weapon := weapon ;
12997: LD_ADDR_OWVAR 40
13001: PUSH
13002: LD_VAR 0 4
13006: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13007: LD_ADDR_OWVAR 41
13011: PUSH
13012: LD_VAR 0 5
13016: ST_TO_ADDR
// end ;
13017: LD_VAR 0 6
13021: RET
// export function WantPlant ( unit ) ; var task ; begin
13022: LD_INT 0
13024: PPUSH
13025: PPUSH
// result := false ;
13026: LD_ADDR_VAR 0 2
13030: PUSH
13031: LD_INT 0
13033: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13034: LD_ADDR_VAR 0 3
13038: PUSH
13039: LD_VAR 0 1
13043: PPUSH
13044: CALL_OW 437
13048: ST_TO_ADDR
// if task then
13049: LD_VAR 0 3
13053: IFFALSE 13081
// if task [ 1 ] [ 1 ] = p then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 1
13062: ARRAY
13063: PUSH
13064: LD_INT 1
13066: ARRAY
13067: PUSH
13068: LD_STRING p
13070: EQUAL
13071: IFFALSE 13081
// result := true ;
13073: LD_ADDR_VAR 0 2
13077: PUSH
13078: LD_INT 1
13080: ST_TO_ADDR
// end ;
13081: LD_VAR 0 2
13085: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13086: LD_INT 0
13088: PPUSH
13089: PPUSH
13090: PPUSH
13091: PPUSH
// if pos < 1 then
13092: LD_VAR 0 2
13096: PUSH
13097: LD_INT 1
13099: LESS
13100: IFFALSE 13104
// exit ;
13102: GO 13407
// if pos = 1 then
13104: LD_VAR 0 2
13108: PUSH
13109: LD_INT 1
13111: EQUAL
13112: IFFALSE 13145
// result := Replace ( arr , pos [ 1 ] , value ) else
13114: LD_ADDR_VAR 0 4
13118: PUSH
13119: LD_VAR 0 1
13123: PPUSH
13124: LD_VAR 0 2
13128: PUSH
13129: LD_INT 1
13131: ARRAY
13132: PPUSH
13133: LD_VAR 0 3
13137: PPUSH
13138: CALL_OW 1
13142: ST_TO_ADDR
13143: GO 13407
// begin tmp := arr ;
13145: LD_ADDR_VAR 0 6
13149: PUSH
13150: LD_VAR 0 1
13154: ST_TO_ADDR
// s_arr := [ tmp ] ;
13155: LD_ADDR_VAR 0 7
13159: PUSH
13160: LD_VAR 0 6
13164: PUSH
13165: EMPTY
13166: LIST
13167: ST_TO_ADDR
// for i = 1 to pos - 1 do
13168: LD_ADDR_VAR 0 5
13172: PUSH
13173: DOUBLE
13174: LD_INT 1
13176: DEC
13177: ST_TO_ADDR
13178: LD_VAR 0 2
13182: PUSH
13183: LD_INT 1
13185: MINUS
13186: PUSH
13187: FOR_TO
13188: IFFALSE 13233
// begin tmp := tmp [ pos [ i ] ] ;
13190: LD_ADDR_VAR 0 6
13194: PUSH
13195: LD_VAR 0 6
13199: PUSH
13200: LD_VAR 0 2
13204: PUSH
13205: LD_VAR 0 5
13209: ARRAY
13210: ARRAY
13211: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13212: LD_ADDR_VAR 0 7
13216: PUSH
13217: LD_VAR 0 7
13221: PUSH
13222: LD_VAR 0 6
13226: PUSH
13227: EMPTY
13228: LIST
13229: ADD
13230: ST_TO_ADDR
// end ;
13231: GO 13187
13233: POP
13234: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13235: LD_ADDR_VAR 0 6
13239: PUSH
13240: LD_VAR 0 6
13244: PPUSH
13245: LD_VAR 0 2
13249: PUSH
13250: LD_VAR 0 2
13254: ARRAY
13255: PPUSH
13256: LD_VAR 0 3
13260: PPUSH
13261: CALL_OW 1
13265: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13266: LD_ADDR_VAR 0 7
13270: PUSH
13271: LD_VAR 0 7
13275: PPUSH
13276: LD_VAR 0 7
13280: PPUSH
13281: LD_VAR 0 6
13285: PPUSH
13286: CALL_OW 1
13290: ST_TO_ADDR
// for i = s_arr downto 2 do
13291: LD_ADDR_VAR 0 5
13295: PUSH
13296: DOUBLE
13297: LD_VAR 0 7
13301: INC
13302: ST_TO_ADDR
13303: LD_INT 2
13305: PUSH
13306: FOR_DOWNTO
13307: IFFALSE 13391
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13309: LD_ADDR_VAR 0 6
13313: PUSH
13314: LD_VAR 0 7
13318: PUSH
13319: LD_VAR 0 5
13323: PUSH
13324: LD_INT 1
13326: MINUS
13327: ARRAY
13328: PPUSH
13329: LD_VAR 0 2
13333: PUSH
13334: LD_VAR 0 5
13338: PUSH
13339: LD_INT 1
13341: MINUS
13342: ARRAY
13343: PPUSH
13344: LD_VAR 0 7
13348: PUSH
13349: LD_VAR 0 5
13353: ARRAY
13354: PPUSH
13355: CALL_OW 1
13359: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13360: LD_ADDR_VAR 0 7
13364: PUSH
13365: LD_VAR 0 7
13369: PPUSH
13370: LD_VAR 0 5
13374: PUSH
13375: LD_INT 1
13377: MINUS
13378: PPUSH
13379: LD_VAR 0 6
13383: PPUSH
13384: CALL_OW 1
13388: ST_TO_ADDR
// end ;
13389: GO 13306
13391: POP
13392: POP
// result := s_arr [ 1 ] ;
13393: LD_ADDR_VAR 0 4
13397: PUSH
13398: LD_VAR 0 7
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: ST_TO_ADDR
// end ; end ;
13407: LD_VAR 0 4
13411: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13412: LD_INT 0
13414: PPUSH
13415: PPUSH
// if not list then
13416: LD_VAR 0 1
13420: NOT
13421: IFFALSE 13425
// exit ;
13423: GO 13516
// i := list [ pos1 ] ;
13425: LD_ADDR_VAR 0 5
13429: PUSH
13430: LD_VAR 0 1
13434: PUSH
13435: LD_VAR 0 2
13439: ARRAY
13440: ST_TO_ADDR
// if not i then
13441: LD_VAR 0 5
13445: NOT
13446: IFFALSE 13450
// exit ;
13448: GO 13516
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13450: LD_ADDR_VAR 0 1
13454: PUSH
13455: LD_VAR 0 1
13459: PPUSH
13460: LD_VAR 0 2
13464: PPUSH
13465: LD_VAR 0 1
13469: PUSH
13470: LD_VAR 0 3
13474: ARRAY
13475: PPUSH
13476: CALL_OW 1
13480: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13481: LD_ADDR_VAR 0 1
13485: PUSH
13486: LD_VAR 0 1
13490: PPUSH
13491: LD_VAR 0 3
13495: PPUSH
13496: LD_VAR 0 5
13500: PPUSH
13501: CALL_OW 1
13505: ST_TO_ADDR
// result := list ;
13506: LD_ADDR_VAR 0 4
13510: PUSH
13511: LD_VAR 0 1
13515: ST_TO_ADDR
// end ;
13516: LD_VAR 0 4
13520: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13521: LD_INT 0
13523: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13524: LD_ADDR_VAR 0 5
13528: PUSH
13529: LD_VAR 0 1
13533: PPUSH
13534: CALL_OW 250
13538: PPUSH
13539: LD_VAR 0 1
13543: PPUSH
13544: CALL_OW 251
13548: PPUSH
13549: LD_VAR 0 2
13553: PPUSH
13554: LD_VAR 0 3
13558: PPUSH
13559: LD_VAR 0 4
13563: PPUSH
13564: CALL 13574 0 5
13568: ST_TO_ADDR
// end ;
13569: LD_VAR 0 5
13573: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13574: LD_INT 0
13576: PPUSH
13577: PPUSH
13578: PPUSH
13579: PPUSH
// if not list then
13580: LD_VAR 0 3
13584: NOT
13585: IFFALSE 13589
// exit ;
13587: GO 13977
// result := [ ] ;
13589: LD_ADDR_VAR 0 6
13593: PUSH
13594: EMPTY
13595: ST_TO_ADDR
// for i in list do
13596: LD_ADDR_VAR 0 7
13600: PUSH
13601: LD_VAR 0 3
13605: PUSH
13606: FOR_IN
13607: IFFALSE 13809
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13609: LD_ADDR_VAR 0 9
13613: PUSH
13614: LD_VAR 0 7
13618: PPUSH
13619: LD_VAR 0 1
13623: PPUSH
13624: LD_VAR 0 2
13628: PPUSH
13629: CALL_OW 297
13633: ST_TO_ADDR
// if not result then
13634: LD_VAR 0 6
13638: NOT
13639: IFFALSE 13665
// result := [ [ i , tmp ] ] else
13641: LD_ADDR_VAR 0 6
13645: PUSH
13646: LD_VAR 0 7
13650: PUSH
13651: LD_VAR 0 9
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: EMPTY
13661: LIST
13662: ST_TO_ADDR
13663: GO 13807
// begin if result [ result ] [ 2 ] < tmp then
13665: LD_VAR 0 6
13669: PUSH
13670: LD_VAR 0 6
13674: ARRAY
13675: PUSH
13676: LD_INT 2
13678: ARRAY
13679: PUSH
13680: LD_VAR 0 9
13684: LESS
13685: IFFALSE 13727
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13687: LD_ADDR_VAR 0 6
13691: PUSH
13692: LD_VAR 0 6
13696: PPUSH
13697: LD_VAR 0 6
13701: PUSH
13702: LD_INT 1
13704: PLUS
13705: PPUSH
13706: LD_VAR 0 7
13710: PUSH
13711: LD_VAR 0 9
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PPUSH
13720: CALL_OW 2
13724: ST_TO_ADDR
13725: GO 13807
// for j = 1 to result do
13727: LD_ADDR_VAR 0 8
13731: PUSH
13732: DOUBLE
13733: LD_INT 1
13735: DEC
13736: ST_TO_ADDR
13737: LD_VAR 0 6
13741: PUSH
13742: FOR_TO
13743: IFFALSE 13805
// begin if tmp < result [ j ] [ 2 ] then
13745: LD_VAR 0 9
13749: PUSH
13750: LD_VAR 0 6
13754: PUSH
13755: LD_VAR 0 8
13759: ARRAY
13760: PUSH
13761: LD_INT 2
13763: ARRAY
13764: LESS
13765: IFFALSE 13803
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13767: LD_ADDR_VAR 0 6
13771: PUSH
13772: LD_VAR 0 6
13776: PPUSH
13777: LD_VAR 0 8
13781: PPUSH
13782: LD_VAR 0 7
13786: PUSH
13787: LD_VAR 0 9
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PPUSH
13796: CALL_OW 2
13800: ST_TO_ADDR
// break ;
13801: GO 13805
// end ; end ;
13803: GO 13742
13805: POP
13806: POP
// end ; end ;
13807: GO 13606
13809: POP
13810: POP
// if result and not asc then
13811: LD_VAR 0 6
13815: PUSH
13816: LD_VAR 0 4
13820: NOT
13821: AND
13822: IFFALSE 13897
// begin tmp := result ;
13824: LD_ADDR_VAR 0 9
13828: PUSH
13829: LD_VAR 0 6
13833: ST_TO_ADDR
// for i = tmp downto 1 do
13834: LD_ADDR_VAR 0 7
13838: PUSH
13839: DOUBLE
13840: LD_VAR 0 9
13844: INC
13845: ST_TO_ADDR
13846: LD_INT 1
13848: PUSH
13849: FOR_DOWNTO
13850: IFFALSE 13895
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13852: LD_ADDR_VAR 0 6
13856: PUSH
13857: LD_VAR 0 6
13861: PPUSH
13862: LD_VAR 0 9
13866: PUSH
13867: LD_VAR 0 7
13871: MINUS
13872: PUSH
13873: LD_INT 1
13875: PLUS
13876: PPUSH
13877: LD_VAR 0 9
13881: PUSH
13882: LD_VAR 0 7
13886: ARRAY
13887: PPUSH
13888: CALL_OW 1
13892: ST_TO_ADDR
13893: GO 13849
13895: POP
13896: POP
// end ; tmp := [ ] ;
13897: LD_ADDR_VAR 0 9
13901: PUSH
13902: EMPTY
13903: ST_TO_ADDR
// if mode then
13904: LD_VAR 0 5
13908: IFFALSE 13977
// begin for i = 1 to result do
13910: LD_ADDR_VAR 0 7
13914: PUSH
13915: DOUBLE
13916: LD_INT 1
13918: DEC
13919: ST_TO_ADDR
13920: LD_VAR 0 6
13924: PUSH
13925: FOR_TO
13926: IFFALSE 13965
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13928: LD_ADDR_VAR 0 9
13932: PUSH
13933: LD_VAR 0 9
13937: PPUSH
13938: LD_VAR 0 7
13942: PPUSH
13943: LD_VAR 0 6
13947: PUSH
13948: LD_VAR 0 7
13952: ARRAY
13953: PUSH
13954: LD_INT 1
13956: ARRAY
13957: PPUSH
13958: CALL_OW 1
13962: ST_TO_ADDR
13963: GO 13925
13965: POP
13966: POP
// result := tmp ;
13967: LD_ADDR_VAR 0 6
13971: PUSH
13972: LD_VAR 0 9
13976: ST_TO_ADDR
// end ; end ;
13977: LD_VAR 0 6
13981: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13982: LD_INT 0
13984: PPUSH
13985: PPUSH
13986: PPUSH
13987: PPUSH
13988: PPUSH
13989: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13990: LD_ADDR_VAR 0 5
13994: PUSH
13995: LD_INT 0
13997: PUSH
13998: LD_INT 0
14000: PUSH
14001: LD_INT 0
14003: PUSH
14004: EMPTY
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: ST_TO_ADDR
// if not x or not y then
14012: LD_VAR 0 2
14016: NOT
14017: PUSH
14018: LD_VAR 0 3
14022: NOT
14023: OR
14024: IFFALSE 14028
// exit ;
14026: GO 15680
// if not range then
14028: LD_VAR 0 4
14032: NOT
14033: IFFALSE 14043
// range := 10 ;
14035: LD_ADDR_VAR 0 4
14039: PUSH
14040: LD_INT 10
14042: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14043: LD_ADDR_VAR 0 8
14047: PUSH
14048: LD_INT 81
14050: PUSH
14051: LD_VAR 0 1
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 92
14062: PUSH
14063: LD_VAR 0 2
14067: PUSH
14068: LD_VAR 0 3
14072: PUSH
14073: LD_VAR 0 4
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 3
14086: PUSH
14087: LD_INT 21
14089: PUSH
14090: LD_INT 3
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: PPUSH
14106: CALL_OW 69
14110: ST_TO_ADDR
// if not tmp then
14111: LD_VAR 0 8
14115: NOT
14116: IFFALSE 14120
// exit ;
14118: GO 15680
// for i in tmp do
14120: LD_ADDR_VAR 0 6
14124: PUSH
14125: LD_VAR 0 8
14129: PUSH
14130: FOR_IN
14131: IFFALSE 15655
// begin points := [ 0 , 0 , 0 ] ;
14133: LD_ADDR_VAR 0 9
14137: PUSH
14138: LD_INT 0
14140: PUSH
14141: LD_INT 0
14143: PUSH
14144: LD_INT 0
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: ST_TO_ADDR
// bpoints := 1 ;
14152: LD_ADDR_VAR 0 10
14156: PUSH
14157: LD_INT 1
14159: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14160: LD_VAR 0 6
14164: PPUSH
14165: CALL_OW 247
14169: PUSH
14170: LD_INT 1
14172: DOUBLE
14173: EQUAL
14174: IFTRUE 14178
14176: GO 14756
14178: POP
// begin if GetClass ( i ) = 1 then
14179: LD_VAR 0 6
14183: PPUSH
14184: CALL_OW 257
14188: PUSH
14189: LD_INT 1
14191: EQUAL
14192: IFFALSE 14213
// points := [ 10 , 5 , 3 ] ;
14194: LD_ADDR_VAR 0 9
14198: PUSH
14199: LD_INT 10
14201: PUSH
14202: LD_INT 5
14204: PUSH
14205: LD_INT 3
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14213: LD_VAR 0 6
14217: PPUSH
14218: CALL_OW 257
14222: PUSH
14223: LD_INT 2
14225: PUSH
14226: LD_INT 3
14228: PUSH
14229: LD_INT 4
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: IN
14237: IFFALSE 14258
// points := [ 3 , 2 , 1 ] ;
14239: LD_ADDR_VAR 0 9
14243: PUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 2
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: LIST
14257: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14258: LD_VAR 0 6
14262: PPUSH
14263: CALL_OW 257
14267: PUSH
14268: LD_INT 5
14270: EQUAL
14271: IFFALSE 14292
// points := [ 130 , 5 , 2 ] ;
14273: LD_ADDR_VAR 0 9
14277: PUSH
14278: LD_INT 130
14280: PUSH
14281: LD_INT 5
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: LIST
14291: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14292: LD_VAR 0 6
14296: PPUSH
14297: CALL_OW 257
14301: PUSH
14302: LD_INT 8
14304: EQUAL
14305: IFFALSE 14326
// points := [ 35 , 35 , 30 ] ;
14307: LD_ADDR_VAR 0 9
14311: PUSH
14312: LD_INT 35
14314: PUSH
14315: LD_INT 35
14317: PUSH
14318: LD_INT 30
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14326: LD_VAR 0 6
14330: PPUSH
14331: CALL_OW 257
14335: PUSH
14336: LD_INT 9
14338: EQUAL
14339: IFFALSE 14360
// points := [ 20 , 55 , 40 ] ;
14341: LD_ADDR_VAR 0 9
14345: PUSH
14346: LD_INT 20
14348: PUSH
14349: LD_INT 55
14351: PUSH
14352: LD_INT 40
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14360: LD_VAR 0 6
14364: PPUSH
14365: CALL_OW 257
14369: PUSH
14370: LD_INT 12
14372: PUSH
14373: LD_INT 16
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: IN
14380: IFFALSE 14401
// points := [ 5 , 3 , 2 ] ;
14382: LD_ADDR_VAR 0 9
14386: PUSH
14387: LD_INT 5
14389: PUSH
14390: LD_INT 3
14392: PUSH
14393: LD_INT 2
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14401: LD_VAR 0 6
14405: PPUSH
14406: CALL_OW 257
14410: PUSH
14411: LD_INT 17
14413: EQUAL
14414: IFFALSE 14435
// points := [ 100 , 50 , 75 ] ;
14416: LD_ADDR_VAR 0 9
14420: PUSH
14421: LD_INT 100
14423: PUSH
14424: LD_INT 50
14426: PUSH
14427: LD_INT 75
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14435: LD_VAR 0 6
14439: PPUSH
14440: CALL_OW 257
14444: PUSH
14445: LD_INT 15
14447: EQUAL
14448: IFFALSE 14469
// points := [ 10 , 5 , 3 ] ;
14450: LD_ADDR_VAR 0 9
14454: PUSH
14455: LD_INT 10
14457: PUSH
14458: LD_INT 5
14460: PUSH
14461: LD_INT 3
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14469: LD_VAR 0 6
14473: PPUSH
14474: CALL_OW 257
14478: PUSH
14479: LD_INT 14
14481: EQUAL
14482: IFFALSE 14503
// points := [ 10 , 0 , 0 ] ;
14484: LD_ADDR_VAR 0 9
14488: PUSH
14489: LD_INT 10
14491: PUSH
14492: LD_INT 0
14494: PUSH
14495: LD_INT 0
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14503: LD_VAR 0 6
14507: PPUSH
14508: CALL_OW 257
14512: PUSH
14513: LD_INT 11
14515: EQUAL
14516: IFFALSE 14537
// points := [ 30 , 10 , 5 ] ;
14518: LD_ADDR_VAR 0 9
14522: PUSH
14523: LD_INT 30
14525: PUSH
14526: LD_INT 10
14528: PUSH
14529: LD_INT 5
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: LIST
14536: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_INT 5
14544: PPUSH
14545: CALL_OW 321
14549: PUSH
14550: LD_INT 2
14552: EQUAL
14553: IFFALSE 14570
// bpoints := bpoints * 1.8 ;
14555: LD_ADDR_VAR 0 10
14559: PUSH
14560: LD_VAR 0 10
14564: PUSH
14565: LD_REAL  1.80000000000000E+0000
14568: MUL
14569: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14570: LD_VAR 0 6
14574: PPUSH
14575: CALL_OW 257
14579: PUSH
14580: LD_INT 1
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 3
14588: PUSH
14589: LD_INT 4
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: IN
14598: PUSH
14599: LD_VAR 0 1
14603: PPUSH
14604: LD_INT 51
14606: PPUSH
14607: CALL_OW 321
14611: PUSH
14612: LD_INT 2
14614: EQUAL
14615: AND
14616: IFFALSE 14633
// bpoints := bpoints * 1.2 ;
14618: LD_ADDR_VAR 0 10
14622: PUSH
14623: LD_VAR 0 10
14627: PUSH
14628: LD_REAL  1.20000000000000E+0000
14631: MUL
14632: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14633: LD_VAR 0 6
14637: PPUSH
14638: CALL_OW 257
14642: PUSH
14643: LD_INT 5
14645: PUSH
14646: LD_INT 7
14648: PUSH
14649: LD_INT 9
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: IN
14657: PUSH
14658: LD_VAR 0 1
14662: PPUSH
14663: LD_INT 52
14665: PPUSH
14666: CALL_OW 321
14670: PUSH
14671: LD_INT 2
14673: EQUAL
14674: AND
14675: IFFALSE 14692
// bpoints := bpoints * 1.5 ;
14677: LD_ADDR_VAR 0 10
14681: PUSH
14682: LD_VAR 0 10
14686: PUSH
14687: LD_REAL  1.50000000000000E+0000
14690: MUL
14691: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14692: LD_VAR 0 1
14696: PPUSH
14697: LD_INT 66
14699: PPUSH
14700: CALL_OW 321
14704: PUSH
14705: LD_INT 2
14707: EQUAL
14708: IFFALSE 14725
// bpoints := bpoints * 1.1 ;
14710: LD_ADDR_VAR 0 10
14714: PUSH
14715: LD_VAR 0 10
14719: PUSH
14720: LD_REAL  1.10000000000000E+0000
14723: MUL
14724: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14725: LD_ADDR_VAR 0 10
14729: PUSH
14730: LD_VAR 0 10
14734: PUSH
14735: LD_VAR 0 6
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 259
14747: PUSH
14748: LD_REAL  1.15000000000000E+0000
14751: MUL
14752: MUL
14753: ST_TO_ADDR
// end ; unit_vehicle :
14754: GO 15584
14756: LD_INT 2
14758: DOUBLE
14759: EQUAL
14760: IFTRUE 14764
14762: GO 15572
14764: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14765: LD_VAR 0 6
14769: PPUSH
14770: CALL_OW 264
14774: PUSH
14775: LD_INT 2
14777: PUSH
14778: LD_INT 42
14780: PUSH
14781: LD_INT 24
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: IN
14789: IFFALSE 14810
// points := [ 25 , 5 , 3 ] ;
14791: LD_ADDR_VAR 0 9
14795: PUSH
14796: LD_INT 25
14798: PUSH
14799: LD_INT 5
14801: PUSH
14802: LD_INT 3
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14810: LD_VAR 0 6
14814: PPUSH
14815: CALL_OW 264
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: LD_INT 43
14825: PUSH
14826: LD_INT 25
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: IN
14834: IFFALSE 14855
// points := [ 40 , 15 , 5 ] ;
14836: LD_ADDR_VAR 0 9
14840: PUSH
14841: LD_INT 40
14843: PUSH
14844: LD_INT 15
14846: PUSH
14847: LD_INT 5
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14855: LD_VAR 0 6
14859: PPUSH
14860: CALL_OW 264
14864: PUSH
14865: LD_INT 3
14867: PUSH
14868: LD_INT 23
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: IN
14875: IFFALSE 14896
// points := [ 7 , 25 , 8 ] ;
14877: LD_ADDR_VAR 0 9
14881: PUSH
14882: LD_INT 7
14884: PUSH
14885: LD_INT 25
14887: PUSH
14888: LD_INT 8
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14896: LD_VAR 0 6
14900: PPUSH
14901: CALL_OW 264
14905: PUSH
14906: LD_INT 5
14908: PUSH
14909: LD_INT 27
14911: PUSH
14912: LD_INT 44
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: IN
14920: IFFALSE 14941
// points := [ 14 , 50 , 16 ] ;
14922: LD_ADDR_VAR 0 9
14926: PUSH
14927: LD_INT 14
14929: PUSH
14930: LD_INT 50
14932: PUSH
14933: LD_INT 16
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14941: LD_VAR 0 6
14945: PPUSH
14946: CALL_OW 264
14950: PUSH
14951: LD_INT 6
14953: PUSH
14954: LD_INT 46
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: IN
14961: IFFALSE 14982
// points := [ 32 , 120 , 70 ] ;
14963: LD_ADDR_VAR 0 9
14967: PUSH
14968: LD_INT 32
14970: PUSH
14971: LD_INT 120
14973: PUSH
14974: LD_INT 70
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14982: LD_VAR 0 6
14986: PPUSH
14987: CALL_OW 264
14991: PUSH
14992: LD_INT 7
14994: PUSH
14995: LD_INT 28
14997: PUSH
14998: LD_INT 45
15000: PUSH
15001: LD_EXP 46
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: IN
15012: IFFALSE 15033
// points := [ 35 , 20 , 45 ] ;
15014: LD_ADDR_VAR 0 9
15018: PUSH
15019: LD_INT 35
15021: PUSH
15022: LD_INT 20
15024: PUSH
15025: LD_INT 45
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15033: LD_VAR 0 6
15037: PPUSH
15038: CALL_OW 264
15042: PUSH
15043: LD_INT 47
15045: PUSH
15046: EMPTY
15047: LIST
15048: IN
15049: IFFALSE 15070
// points := [ 67 , 45 , 75 ] ;
15051: LD_ADDR_VAR 0 9
15055: PUSH
15056: LD_INT 67
15058: PUSH
15059: LD_INT 45
15061: PUSH
15062: LD_INT 75
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: LIST
15069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15070: LD_VAR 0 6
15074: PPUSH
15075: CALL_OW 264
15079: PUSH
15080: LD_INT 26
15082: PUSH
15083: EMPTY
15084: LIST
15085: IN
15086: IFFALSE 15107
// points := [ 120 , 30 , 80 ] ;
15088: LD_ADDR_VAR 0 9
15092: PUSH
15093: LD_INT 120
15095: PUSH
15096: LD_INT 30
15098: PUSH
15099: LD_INT 80
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15107: LD_VAR 0 6
15111: PPUSH
15112: CALL_OW 264
15116: PUSH
15117: LD_INT 22
15119: PUSH
15120: EMPTY
15121: LIST
15122: IN
15123: IFFALSE 15144
// points := [ 40 , 1 , 1 ] ;
15125: LD_ADDR_VAR 0 9
15129: PUSH
15130: LD_INT 40
15132: PUSH
15133: LD_INT 1
15135: PUSH
15136: LD_INT 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15144: LD_VAR 0 6
15148: PPUSH
15149: CALL_OW 264
15153: PUSH
15154: LD_INT 29
15156: PUSH
15157: EMPTY
15158: LIST
15159: IN
15160: IFFALSE 15181
// points := [ 70 , 200 , 400 ] ;
15162: LD_ADDR_VAR 0 9
15166: PUSH
15167: LD_INT 70
15169: PUSH
15170: LD_INT 200
15172: PUSH
15173: LD_INT 400
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15181: LD_VAR 0 6
15185: PPUSH
15186: CALL_OW 264
15190: PUSH
15191: LD_INT 14
15193: PUSH
15194: LD_INT 53
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: IN
15201: IFFALSE 15222
// points := [ 40 , 10 , 20 ] ;
15203: LD_ADDR_VAR 0 9
15207: PUSH
15208: LD_INT 40
15210: PUSH
15211: LD_INT 10
15213: PUSH
15214: LD_INT 20
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15222: LD_VAR 0 6
15226: PPUSH
15227: CALL_OW 264
15231: PUSH
15232: LD_INT 9
15234: PUSH
15235: EMPTY
15236: LIST
15237: IN
15238: IFFALSE 15259
// points := [ 5 , 70 , 20 ] ;
15240: LD_ADDR_VAR 0 9
15244: PUSH
15245: LD_INT 5
15247: PUSH
15248: LD_INT 70
15250: PUSH
15251: LD_INT 20
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15259: LD_VAR 0 6
15263: PPUSH
15264: CALL_OW 264
15268: PUSH
15269: LD_INT 10
15271: PUSH
15272: EMPTY
15273: LIST
15274: IN
15275: IFFALSE 15296
// points := [ 35 , 110 , 70 ] ;
15277: LD_ADDR_VAR 0 9
15281: PUSH
15282: LD_INT 35
15284: PUSH
15285: LD_INT 110
15287: PUSH
15288: LD_INT 70
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15296: LD_VAR 0 6
15300: PPUSH
15301: CALL_OW 265
15305: PUSH
15306: LD_INT 25
15308: EQUAL
15309: IFFALSE 15330
// points := [ 80 , 65 , 100 ] ;
15311: LD_ADDR_VAR 0 9
15315: PUSH
15316: LD_INT 80
15318: PUSH
15319: LD_INT 65
15321: PUSH
15322: LD_INT 100
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15330: LD_VAR 0 6
15334: PPUSH
15335: CALL_OW 263
15339: PUSH
15340: LD_INT 1
15342: EQUAL
15343: IFFALSE 15378
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15345: LD_ADDR_VAR 0 10
15349: PUSH
15350: LD_VAR 0 10
15354: PUSH
15355: LD_VAR 0 6
15359: PPUSH
15360: CALL_OW 311
15364: PPUSH
15365: LD_INT 3
15367: PPUSH
15368: CALL_OW 259
15372: PUSH
15373: LD_INT 4
15375: MUL
15376: MUL
15377: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15378: LD_VAR 0 6
15382: PPUSH
15383: CALL_OW 263
15387: PUSH
15388: LD_INT 2
15390: EQUAL
15391: IFFALSE 15442
// begin j := IsControledBy ( i ) ;
15393: LD_ADDR_VAR 0 7
15397: PUSH
15398: LD_VAR 0 6
15402: PPUSH
15403: CALL_OW 312
15407: ST_TO_ADDR
// if j then
15408: LD_VAR 0 7
15412: IFFALSE 15442
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15414: LD_ADDR_VAR 0 10
15418: PUSH
15419: LD_VAR 0 10
15423: PUSH
15424: LD_VAR 0 7
15428: PPUSH
15429: LD_INT 3
15431: PPUSH
15432: CALL_OW 259
15436: PUSH
15437: LD_INT 3
15439: MUL
15440: MUL
15441: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15442: LD_VAR 0 6
15446: PPUSH
15447: CALL_OW 264
15451: PUSH
15452: LD_INT 5
15454: PUSH
15455: LD_INT 6
15457: PUSH
15458: LD_INT 46
15460: PUSH
15461: LD_INT 44
15463: PUSH
15464: LD_INT 47
15466: PUSH
15467: LD_INT 45
15469: PUSH
15470: LD_INT 28
15472: PUSH
15473: LD_INT 7
15475: PUSH
15476: LD_INT 27
15478: PUSH
15479: LD_INT 29
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: IN
15494: PUSH
15495: LD_VAR 0 1
15499: PPUSH
15500: LD_INT 52
15502: PPUSH
15503: CALL_OW 321
15507: PUSH
15508: LD_INT 2
15510: EQUAL
15511: AND
15512: IFFALSE 15529
// bpoints := bpoints * 1.2 ;
15514: LD_ADDR_VAR 0 10
15518: PUSH
15519: LD_VAR 0 10
15523: PUSH
15524: LD_REAL  1.20000000000000E+0000
15527: MUL
15528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15529: LD_VAR 0 6
15533: PPUSH
15534: CALL_OW 264
15538: PUSH
15539: LD_INT 6
15541: PUSH
15542: LD_INT 46
15544: PUSH
15545: LD_INT 47
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: LIST
15552: IN
15553: IFFALSE 15570
// bpoints := bpoints * 1.2 ;
15555: LD_ADDR_VAR 0 10
15559: PUSH
15560: LD_VAR 0 10
15564: PUSH
15565: LD_REAL  1.20000000000000E+0000
15568: MUL
15569: ST_TO_ADDR
// end ; unit_building :
15570: GO 15584
15572: LD_INT 3
15574: DOUBLE
15575: EQUAL
15576: IFTRUE 15580
15578: GO 15583
15580: POP
// ; end ;
15581: GO 15584
15583: POP
// for j = 1 to 3 do
15584: LD_ADDR_VAR 0 7
15588: PUSH
15589: DOUBLE
15590: LD_INT 1
15592: DEC
15593: ST_TO_ADDR
15594: LD_INT 3
15596: PUSH
15597: FOR_TO
15598: IFFALSE 15651
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15600: LD_ADDR_VAR 0 5
15604: PUSH
15605: LD_VAR 0 5
15609: PPUSH
15610: LD_VAR 0 7
15614: PPUSH
15615: LD_VAR 0 5
15619: PUSH
15620: LD_VAR 0 7
15624: ARRAY
15625: PUSH
15626: LD_VAR 0 9
15630: PUSH
15631: LD_VAR 0 7
15635: ARRAY
15636: PUSH
15637: LD_VAR 0 10
15641: MUL
15642: PLUS
15643: PPUSH
15644: CALL_OW 1
15648: ST_TO_ADDR
15649: GO 15597
15651: POP
15652: POP
// end ;
15653: GO 14130
15655: POP
15656: POP
// result := Replace ( result , 4 , tmp ) ;
15657: LD_ADDR_VAR 0 5
15661: PUSH
15662: LD_VAR 0 5
15666: PPUSH
15667: LD_INT 4
15669: PPUSH
15670: LD_VAR 0 8
15674: PPUSH
15675: CALL_OW 1
15679: ST_TO_ADDR
// end ;
15680: LD_VAR 0 5
15684: RET
// export function DangerAtRange ( unit , range ) ; begin
15685: LD_INT 0
15687: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15688: LD_ADDR_VAR 0 3
15692: PUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 255
15702: PPUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 250
15712: PPUSH
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 251
15722: PPUSH
15723: LD_VAR 0 2
15727: PPUSH
15728: CALL 13982 0 4
15732: ST_TO_ADDR
// end ;
15733: LD_VAR 0 3
15737: RET
// export function DangerInArea ( side , area ) ; begin
15738: LD_INT 0
15740: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: LD_INT 81
15753: PUSH
15754: LD_VAR 0 1
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PPUSH
15763: CALL_OW 70
15767: ST_TO_ADDR
// end ;
15768: LD_VAR 0 3
15772: RET
// export function IsExtension ( b ) ; begin
15773: LD_INT 0
15775: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15776: LD_ADDR_VAR 0 2
15780: PUSH
15781: LD_VAR 0 1
15785: PUSH
15786: LD_INT 23
15788: PUSH
15789: LD_INT 20
15791: PUSH
15792: LD_INT 22
15794: PUSH
15795: LD_INT 17
15797: PUSH
15798: LD_INT 24
15800: PUSH
15801: LD_INT 21
15803: PUSH
15804: LD_INT 19
15806: PUSH
15807: LD_INT 16
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 18
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: IN
15828: ST_TO_ADDR
// end ;
15829: LD_VAR 0 2
15833: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15834: LD_INT 0
15836: PPUSH
15837: PPUSH
15838: PPUSH
// result := [ ] ;
15839: LD_ADDR_VAR 0 4
15843: PUSH
15844: EMPTY
15845: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15846: LD_ADDR_VAR 0 5
15850: PUSH
15851: LD_VAR 0 2
15855: PPUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PPUSH
15866: CALL_OW 70
15870: ST_TO_ADDR
// if not tmp then
15871: LD_VAR 0 5
15875: NOT
15876: IFFALSE 15880
// exit ;
15878: GO 15944
// if checkLink then
15880: LD_VAR 0 3
15884: IFFALSE 15934
// begin for i in tmp do
15886: LD_ADDR_VAR 0 6
15890: PUSH
15891: LD_VAR 0 5
15895: PUSH
15896: FOR_IN
15897: IFFALSE 15932
// if GetBase ( i ) <> base then
15899: LD_VAR 0 6
15903: PPUSH
15904: CALL_OW 274
15908: PUSH
15909: LD_VAR 0 1
15913: NONEQUAL
15914: IFFALSE 15930
// ComLinkToBase ( base , i ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_VAR 0 6
15925: PPUSH
15926: CALL_OW 169
15930: GO 15896
15932: POP
15933: POP
// end ; result := tmp ;
15934: LD_ADDR_VAR 0 4
15938: PUSH
15939: LD_VAR 0 5
15943: ST_TO_ADDR
// end ;
15944: LD_VAR 0 4
15948: RET
// export function ComComplete ( units , b ) ; var i ; begin
15949: LD_INT 0
15951: PPUSH
15952: PPUSH
// if not units then
15953: LD_VAR 0 1
15957: NOT
15958: IFFALSE 15962
// exit ;
15960: GO 16052
// for i in units do
15962: LD_ADDR_VAR 0 4
15966: PUSH
15967: LD_VAR 0 1
15971: PUSH
15972: FOR_IN
15973: IFFALSE 16050
// if BuildingStatus ( b ) = bs_build then
15975: LD_VAR 0 2
15979: PPUSH
15980: CALL_OW 461
15984: PUSH
15985: LD_INT 1
15987: EQUAL
15988: IFFALSE 16048
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15990: LD_VAR 0 4
15994: PPUSH
15995: LD_STRING h
15997: PUSH
15998: LD_VAR 0 2
16002: PPUSH
16003: CALL_OW 250
16007: PUSH
16008: LD_VAR 0 2
16012: PPUSH
16013: CALL_OW 251
16017: PUSH
16018: LD_VAR 0 2
16022: PUSH
16023: LD_INT 0
16025: PUSH
16026: LD_INT 0
16028: PUSH
16029: LD_INT 0
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: PPUSH
16044: CALL_OW 446
16048: GO 15972
16050: POP
16051: POP
// end ;
16052: LD_VAR 0 3
16056: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16057: LD_INT 0
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
16063: PPUSH
16064: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16065: LD_VAR 0 1
16069: NOT
16070: PUSH
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 263
16080: PUSH
16081: LD_INT 2
16083: NONEQUAL
16084: OR
16085: IFFALSE 16089
// exit ;
16087: GO 16405
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16089: LD_ADDR_VAR 0 6
16093: PUSH
16094: LD_INT 22
16096: PUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 255
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 2
16113: PUSH
16114: LD_INT 30
16116: PUSH
16117: LD_INT 36
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 34
16126: PUSH
16127: LD_INT 31
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PPUSH
16143: CALL_OW 69
16147: ST_TO_ADDR
// if not tmp then
16148: LD_VAR 0 6
16152: NOT
16153: IFFALSE 16157
// exit ;
16155: GO 16405
// result := [ ] ;
16157: LD_ADDR_VAR 0 2
16161: PUSH
16162: EMPTY
16163: ST_TO_ADDR
// for i in tmp do
16164: LD_ADDR_VAR 0 3
16168: PUSH
16169: LD_VAR 0 6
16173: PUSH
16174: FOR_IN
16175: IFFALSE 16246
// begin t := UnitsInside ( i ) ;
16177: LD_ADDR_VAR 0 4
16181: PUSH
16182: LD_VAR 0 3
16186: PPUSH
16187: CALL_OW 313
16191: ST_TO_ADDR
// if t then
16192: LD_VAR 0 4
16196: IFFALSE 16244
// for j in t do
16198: LD_ADDR_VAR 0 7
16202: PUSH
16203: LD_VAR 0 4
16207: PUSH
16208: FOR_IN
16209: IFFALSE 16242
// result := Replace ( result , result + 1 , j ) ;
16211: LD_ADDR_VAR 0 2
16215: PUSH
16216: LD_VAR 0 2
16220: PPUSH
16221: LD_VAR 0 2
16225: PUSH
16226: LD_INT 1
16228: PLUS
16229: PPUSH
16230: LD_VAR 0 7
16234: PPUSH
16235: CALL_OW 1
16239: ST_TO_ADDR
16240: GO 16208
16242: POP
16243: POP
// end ;
16244: GO 16174
16246: POP
16247: POP
// if not result then
16248: LD_VAR 0 2
16252: NOT
16253: IFFALSE 16257
// exit ;
16255: GO 16405
// mech := result [ 1 ] ;
16257: LD_ADDR_VAR 0 5
16261: PUSH
16262: LD_VAR 0 2
16266: PUSH
16267: LD_INT 1
16269: ARRAY
16270: ST_TO_ADDR
// if result > 1 then
16271: LD_VAR 0 2
16275: PUSH
16276: LD_INT 1
16278: GREATER
16279: IFFALSE 16391
// begin for i = 2 to result do
16281: LD_ADDR_VAR 0 3
16285: PUSH
16286: DOUBLE
16287: LD_INT 2
16289: DEC
16290: ST_TO_ADDR
16291: LD_VAR 0 2
16295: PUSH
16296: FOR_TO
16297: IFFALSE 16389
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16299: LD_ADDR_VAR 0 4
16303: PUSH
16304: LD_VAR 0 2
16308: PUSH
16309: LD_VAR 0 3
16313: ARRAY
16314: PPUSH
16315: LD_INT 3
16317: PPUSH
16318: CALL_OW 259
16322: PUSH
16323: LD_VAR 0 2
16327: PUSH
16328: LD_VAR 0 3
16332: ARRAY
16333: PPUSH
16334: CALL_OW 432
16338: MINUS
16339: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16340: LD_VAR 0 4
16344: PUSH
16345: LD_VAR 0 5
16349: PPUSH
16350: LD_INT 3
16352: PPUSH
16353: CALL_OW 259
16357: PUSH
16358: LD_VAR 0 5
16362: PPUSH
16363: CALL_OW 432
16367: MINUS
16368: GREATEREQUAL
16369: IFFALSE 16387
// mech := result [ i ] ;
16371: LD_ADDR_VAR 0 5
16375: PUSH
16376: LD_VAR 0 2
16380: PUSH
16381: LD_VAR 0 3
16385: ARRAY
16386: ST_TO_ADDR
// end ;
16387: GO 16296
16389: POP
16390: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16391: LD_VAR 0 1
16395: PPUSH
16396: LD_VAR 0 5
16400: PPUSH
16401: CALL_OW 135
// end ;
16405: LD_VAR 0 2
16409: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16410: LD_INT 0
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
16424: PPUSH
// result := [ ] ;
16425: LD_ADDR_VAR 0 7
16429: PUSH
16430: EMPTY
16431: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 266
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: IN
16452: NOT
16453: IFFALSE 16457
// exit ;
16455: GO 18091
// if name then
16457: LD_VAR 0 3
16461: IFFALSE 16477
// SetBName ( base_dep , name ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: LD_VAR 0 3
16472: PPUSH
16473: CALL_OW 500
// base := GetBase ( base_dep ) ;
16477: LD_ADDR_VAR 0 15
16481: PUSH
16482: LD_VAR 0 1
16486: PPUSH
16487: CALL_OW 274
16491: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16492: LD_ADDR_VAR 0 16
16496: PUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 255
16506: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16507: LD_ADDR_VAR 0 17
16511: PUSH
16512: LD_VAR 0 1
16516: PPUSH
16517: CALL_OW 248
16521: ST_TO_ADDR
// if sources then
16522: LD_VAR 0 5
16526: IFFALSE 16573
// for i = 1 to 3 do
16528: LD_ADDR_VAR 0 8
16532: PUSH
16533: DOUBLE
16534: LD_INT 1
16536: DEC
16537: ST_TO_ADDR
16538: LD_INT 3
16540: PUSH
16541: FOR_TO
16542: IFFALSE 16571
// AddResourceType ( base , i , sources [ i ] ) ;
16544: LD_VAR 0 15
16548: PPUSH
16549: LD_VAR 0 8
16553: PPUSH
16554: LD_VAR 0 5
16558: PUSH
16559: LD_VAR 0 8
16563: ARRAY
16564: PPUSH
16565: CALL_OW 276
16569: GO 16541
16571: POP
16572: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16573: LD_ADDR_VAR 0 18
16577: PUSH
16578: LD_VAR 0 15
16582: PPUSH
16583: LD_VAR 0 2
16587: PPUSH
16588: LD_INT 1
16590: PPUSH
16591: CALL 15834 0 3
16595: ST_TO_ADDR
// InitHc ;
16596: CALL_OW 19
// InitUc ;
16600: CALL_OW 18
// uc_side := side ;
16604: LD_ADDR_OWVAR 20
16608: PUSH
16609: LD_VAR 0 16
16613: ST_TO_ADDR
// uc_nation := nation ;
16614: LD_ADDR_OWVAR 21
16618: PUSH
16619: LD_VAR 0 17
16623: ST_TO_ADDR
// if buildings then
16624: LD_VAR 0 18
16628: IFFALSE 17950
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16630: LD_ADDR_VAR 0 19
16634: PUSH
16635: LD_VAR 0 18
16639: PPUSH
16640: LD_INT 2
16642: PUSH
16643: LD_INT 30
16645: PUSH
16646: LD_INT 29
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 30
16655: PUSH
16656: LD_INT 30
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: PPUSH
16668: CALL_OW 72
16672: ST_TO_ADDR
// if tmp then
16673: LD_VAR 0 19
16677: IFFALSE 16725
// for i in tmp do
16679: LD_ADDR_VAR 0 8
16683: PUSH
16684: LD_VAR 0 19
16688: PUSH
16689: FOR_IN
16690: IFFALSE 16723
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16692: LD_VAR 0 8
16696: PPUSH
16697: CALL_OW 250
16701: PPUSH
16702: LD_VAR 0 8
16706: PPUSH
16707: CALL_OW 251
16711: PPUSH
16712: LD_VAR 0 16
16716: PPUSH
16717: CALL_OW 441
16721: GO 16689
16723: POP
16724: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16725: LD_VAR 0 18
16729: PPUSH
16730: LD_INT 2
16732: PUSH
16733: LD_INT 30
16735: PUSH
16736: LD_INT 32
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 30
16745: PUSH
16746: LD_INT 33
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: LIST
16757: PPUSH
16758: CALL_OW 72
16762: IFFALSE 16850
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16764: LD_ADDR_VAR 0 8
16768: PUSH
16769: LD_VAR 0 18
16773: PPUSH
16774: LD_INT 2
16776: PUSH
16777: LD_INT 30
16779: PUSH
16780: LD_INT 32
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 30
16789: PUSH
16790: LD_INT 33
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: PPUSH
16802: CALL_OW 72
16806: PUSH
16807: FOR_IN
16808: IFFALSE 16848
// begin if not GetBWeapon ( i ) then
16810: LD_VAR 0 8
16814: PPUSH
16815: CALL_OW 269
16819: NOT
16820: IFFALSE 16846
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16822: LD_VAR 0 8
16826: PPUSH
16827: LD_VAR 0 8
16831: PPUSH
16832: LD_VAR 0 2
16836: PPUSH
16837: CALL 18096 0 2
16841: PPUSH
16842: CALL_OW 431
// end ;
16846: GO 16807
16848: POP
16849: POP
// end ; for i = 1 to personel do
16850: LD_ADDR_VAR 0 8
16854: PUSH
16855: DOUBLE
16856: LD_INT 1
16858: DEC
16859: ST_TO_ADDR
16860: LD_VAR 0 6
16864: PUSH
16865: FOR_TO
16866: IFFALSE 17930
// begin if i > 4 then
16868: LD_VAR 0 8
16872: PUSH
16873: LD_INT 4
16875: GREATER
16876: IFFALSE 16880
// break ;
16878: GO 17930
// case i of 1 :
16880: LD_VAR 0 8
16884: PUSH
16885: LD_INT 1
16887: DOUBLE
16888: EQUAL
16889: IFTRUE 16893
16891: GO 16973
16893: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16894: LD_ADDR_VAR 0 12
16898: PUSH
16899: LD_VAR 0 18
16903: PPUSH
16904: LD_INT 22
16906: PUSH
16907: LD_VAR 0 16
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 58
16918: PUSH
16919: EMPTY
16920: LIST
16921: PUSH
16922: LD_INT 2
16924: PUSH
16925: LD_INT 30
16927: PUSH
16928: LD_INT 32
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 4
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 30
16947: PUSH
16948: LD_INT 5
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 72
16970: ST_TO_ADDR
16971: GO 17195
16973: LD_INT 2
16975: DOUBLE
16976: EQUAL
16977: IFTRUE 16981
16979: GO 17043
16981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16982: LD_ADDR_VAR 0 12
16986: PUSH
16987: LD_VAR 0 18
16991: PPUSH
16992: LD_INT 22
16994: PUSH
16995: LD_VAR 0 16
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: LD_INT 30
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 30
17019: PUSH
17020: LD_INT 1
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PPUSH
17036: CALL_OW 72
17040: ST_TO_ADDR
17041: GO 17195
17043: LD_INT 3
17045: DOUBLE
17046: EQUAL
17047: IFTRUE 17051
17049: GO 17113
17051: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17052: LD_ADDR_VAR 0 12
17056: PUSH
17057: LD_VAR 0 18
17061: PPUSH
17062: LD_INT 22
17064: PUSH
17065: LD_VAR 0 16
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 2
17076: PUSH
17077: LD_INT 30
17079: PUSH
17080: LD_INT 2
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 30
17089: PUSH
17090: LD_INT 3
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PPUSH
17106: CALL_OW 72
17110: ST_TO_ADDR
17111: GO 17195
17113: LD_INT 4
17115: DOUBLE
17116: EQUAL
17117: IFTRUE 17121
17119: GO 17194
17121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17122: LD_ADDR_VAR 0 12
17126: PUSH
17127: LD_VAR 0 18
17131: PPUSH
17132: LD_INT 22
17134: PUSH
17135: LD_VAR 0 16
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 2
17146: PUSH
17147: LD_INT 30
17149: PUSH
17150: LD_INT 6
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 30
17159: PUSH
17160: LD_INT 7
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 30
17169: PUSH
17170: LD_INT 8
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 72
17191: ST_TO_ADDR
17192: GO 17195
17194: POP
// if i = 1 then
17195: LD_VAR 0 8
17199: PUSH
17200: LD_INT 1
17202: EQUAL
17203: IFFALSE 17314
// begin tmp := [ ] ;
17205: LD_ADDR_VAR 0 19
17209: PUSH
17210: EMPTY
17211: ST_TO_ADDR
// for j in f do
17212: LD_ADDR_VAR 0 9
17216: PUSH
17217: LD_VAR 0 12
17221: PUSH
17222: FOR_IN
17223: IFFALSE 17296
// if GetBType ( j ) = b_bunker then
17225: LD_VAR 0 9
17229: PPUSH
17230: CALL_OW 266
17234: PUSH
17235: LD_INT 32
17237: EQUAL
17238: IFFALSE 17265
// tmp := Insert ( tmp , 1 , j ) else
17240: LD_ADDR_VAR 0 19
17244: PUSH
17245: LD_VAR 0 19
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: LD_VAR 0 9
17257: PPUSH
17258: CALL_OW 2
17262: ST_TO_ADDR
17263: GO 17294
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17265: LD_ADDR_VAR 0 19
17269: PUSH
17270: LD_VAR 0 19
17274: PPUSH
17275: LD_VAR 0 19
17279: PUSH
17280: LD_INT 1
17282: PLUS
17283: PPUSH
17284: LD_VAR 0 9
17288: PPUSH
17289: CALL_OW 2
17293: ST_TO_ADDR
17294: GO 17222
17296: POP
17297: POP
// if tmp then
17298: LD_VAR 0 19
17302: IFFALSE 17314
// f := tmp ;
17304: LD_ADDR_VAR 0 12
17308: PUSH
17309: LD_VAR 0 19
17313: ST_TO_ADDR
// end ; x := personel [ i ] ;
17314: LD_ADDR_VAR 0 13
17318: PUSH
17319: LD_VAR 0 6
17323: PUSH
17324: LD_VAR 0 8
17328: ARRAY
17329: ST_TO_ADDR
// if x = - 1 then
17330: LD_VAR 0 13
17334: PUSH
17335: LD_INT 1
17337: NEG
17338: EQUAL
17339: IFFALSE 17548
// begin for j in f do
17341: LD_ADDR_VAR 0 9
17345: PUSH
17346: LD_VAR 0 12
17350: PUSH
17351: FOR_IN
17352: IFFALSE 17544
// repeat InitHc ;
17354: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17358: LD_VAR 0 9
17362: PPUSH
17363: CALL_OW 266
17367: PUSH
17368: LD_INT 5
17370: EQUAL
17371: IFFALSE 17441
// begin if UnitsInside ( j ) < 3 then
17373: LD_VAR 0 9
17377: PPUSH
17378: CALL_OW 313
17382: PUSH
17383: LD_INT 3
17385: LESS
17386: IFFALSE 17422
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17388: LD_INT 0
17390: PPUSH
17391: LD_INT 5
17393: PUSH
17394: LD_INT 8
17396: PUSH
17397: LD_INT 9
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: LIST
17404: PUSH
17405: LD_VAR 0 17
17409: ARRAY
17410: PPUSH
17411: LD_VAR 0 4
17415: PPUSH
17416: CALL_OW 380
17420: GO 17439
// PrepareHuman ( false , i , skill ) ;
17422: LD_INT 0
17424: PPUSH
17425: LD_VAR 0 8
17429: PPUSH
17430: LD_VAR 0 4
17434: PPUSH
17435: CALL_OW 380
// end else
17439: GO 17458
// PrepareHuman ( false , i , skill ) ;
17441: LD_INT 0
17443: PPUSH
17444: LD_VAR 0 8
17448: PPUSH
17449: LD_VAR 0 4
17453: PPUSH
17454: CALL_OW 380
// un := CreateHuman ;
17458: LD_ADDR_VAR 0 14
17462: PUSH
17463: CALL_OW 44
17467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17468: LD_ADDR_VAR 0 7
17472: PUSH
17473: LD_VAR 0 7
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: LD_VAR 0 14
17485: PPUSH
17486: CALL_OW 2
17490: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17491: LD_VAR 0 14
17495: PPUSH
17496: LD_VAR 0 9
17500: PPUSH
17501: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17505: LD_VAR 0 9
17509: PPUSH
17510: CALL_OW 313
17514: PUSH
17515: LD_INT 6
17517: EQUAL
17518: PUSH
17519: LD_VAR 0 9
17523: PPUSH
17524: CALL_OW 266
17528: PUSH
17529: LD_INT 32
17531: PUSH
17532: LD_INT 31
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: IN
17539: OR
17540: IFFALSE 17354
17542: GO 17351
17544: POP
17545: POP
// end else
17546: GO 17928
// for j = 1 to x do
17548: LD_ADDR_VAR 0 9
17552: PUSH
17553: DOUBLE
17554: LD_INT 1
17556: DEC
17557: ST_TO_ADDR
17558: LD_VAR 0 13
17562: PUSH
17563: FOR_TO
17564: IFFALSE 17926
// begin InitHc ;
17566: CALL_OW 19
// if not f then
17570: LD_VAR 0 12
17574: NOT
17575: IFFALSE 17664
// begin PrepareHuman ( false , i , skill ) ;
17577: LD_INT 0
17579: PPUSH
17580: LD_VAR 0 8
17584: PPUSH
17585: LD_VAR 0 4
17589: PPUSH
17590: CALL_OW 380
// un := CreateHuman ;
17594: LD_ADDR_VAR 0 14
17598: PUSH
17599: CALL_OW 44
17603: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17604: LD_ADDR_VAR 0 7
17608: PUSH
17609: LD_VAR 0 7
17613: PPUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_VAR 0 14
17621: PPUSH
17622: CALL_OW 2
17626: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17627: LD_VAR 0 14
17631: PPUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 250
17641: PPUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 251
17651: PPUSH
17652: LD_INT 10
17654: PPUSH
17655: LD_INT 0
17657: PPUSH
17658: CALL_OW 50
// continue ;
17662: GO 17563
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17664: LD_VAR 0 12
17668: PUSH
17669: LD_INT 1
17671: ARRAY
17672: PPUSH
17673: CALL_OW 313
17677: PUSH
17678: LD_VAR 0 12
17682: PUSH
17683: LD_INT 1
17685: ARRAY
17686: PPUSH
17687: CALL_OW 266
17691: PUSH
17692: LD_INT 32
17694: PUSH
17695: LD_INT 31
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: IN
17702: AND
17703: PUSH
17704: LD_VAR 0 12
17708: PUSH
17709: LD_INT 1
17711: ARRAY
17712: PPUSH
17713: CALL_OW 313
17717: PUSH
17718: LD_INT 6
17720: EQUAL
17721: OR
17722: IFFALSE 17742
// f := Delete ( f , 1 ) ;
17724: LD_ADDR_VAR 0 12
17728: PUSH
17729: LD_VAR 0 12
17733: PPUSH
17734: LD_INT 1
17736: PPUSH
17737: CALL_OW 3
17741: ST_TO_ADDR
// if not f then
17742: LD_VAR 0 12
17746: NOT
17747: IFFALSE 17765
// begin x := x + 2 ;
17749: LD_ADDR_VAR 0 13
17753: PUSH
17754: LD_VAR 0 13
17758: PUSH
17759: LD_INT 2
17761: PLUS
17762: ST_TO_ADDR
// continue ;
17763: GO 17563
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17765: LD_VAR 0 12
17769: PUSH
17770: LD_INT 1
17772: ARRAY
17773: PPUSH
17774: CALL_OW 266
17778: PUSH
17779: LD_INT 5
17781: EQUAL
17782: IFFALSE 17856
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17784: LD_VAR 0 12
17788: PUSH
17789: LD_INT 1
17791: ARRAY
17792: PPUSH
17793: CALL_OW 313
17797: PUSH
17798: LD_INT 3
17800: LESS
17801: IFFALSE 17837
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17803: LD_INT 0
17805: PPUSH
17806: LD_INT 5
17808: PUSH
17809: LD_INT 8
17811: PUSH
17812: LD_INT 9
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: LIST
17819: PUSH
17820: LD_VAR 0 17
17824: ARRAY
17825: PPUSH
17826: LD_VAR 0 4
17830: PPUSH
17831: CALL_OW 380
17835: GO 17854
// PrepareHuman ( false , i , skill ) ;
17837: LD_INT 0
17839: PPUSH
17840: LD_VAR 0 8
17844: PPUSH
17845: LD_VAR 0 4
17849: PPUSH
17850: CALL_OW 380
// end else
17854: GO 17873
// PrepareHuman ( false , i , skill ) ;
17856: LD_INT 0
17858: PPUSH
17859: LD_VAR 0 8
17863: PPUSH
17864: LD_VAR 0 4
17868: PPUSH
17869: CALL_OW 380
// un := CreateHuman ;
17873: LD_ADDR_VAR 0 14
17877: PUSH
17878: CALL_OW 44
17882: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17883: LD_ADDR_VAR 0 7
17887: PUSH
17888: LD_VAR 0 7
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: LD_VAR 0 14
17900: PPUSH
17901: CALL_OW 2
17905: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17906: LD_VAR 0 14
17910: PPUSH
17911: LD_VAR 0 12
17915: PUSH
17916: LD_INT 1
17918: ARRAY
17919: PPUSH
17920: CALL_OW 52
// end ;
17924: GO 17563
17926: POP
17927: POP
// end ;
17928: GO 16865
17930: POP
17931: POP
// result := result ^ buildings ;
17932: LD_ADDR_VAR 0 7
17936: PUSH
17937: LD_VAR 0 7
17941: PUSH
17942: LD_VAR 0 18
17946: ADD
17947: ST_TO_ADDR
// end else
17948: GO 18091
// begin for i = 1 to personel do
17950: LD_ADDR_VAR 0 8
17954: PUSH
17955: DOUBLE
17956: LD_INT 1
17958: DEC
17959: ST_TO_ADDR
17960: LD_VAR 0 6
17964: PUSH
17965: FOR_TO
17966: IFFALSE 18089
// begin if i > 4 then
17968: LD_VAR 0 8
17972: PUSH
17973: LD_INT 4
17975: GREATER
17976: IFFALSE 17980
// break ;
17978: GO 18089
// x := personel [ i ] ;
17980: LD_ADDR_VAR 0 13
17984: PUSH
17985: LD_VAR 0 6
17989: PUSH
17990: LD_VAR 0 8
17994: ARRAY
17995: ST_TO_ADDR
// if x = - 1 then
17996: LD_VAR 0 13
18000: PUSH
18001: LD_INT 1
18003: NEG
18004: EQUAL
18005: IFFALSE 18009
// continue ;
18007: GO 17965
// PrepareHuman ( false , i , skill ) ;
18009: LD_INT 0
18011: PPUSH
18012: LD_VAR 0 8
18016: PPUSH
18017: LD_VAR 0 4
18021: PPUSH
18022: CALL_OW 380
// un := CreateHuman ;
18026: LD_ADDR_VAR 0 14
18030: PUSH
18031: CALL_OW 44
18035: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18036: LD_VAR 0 14
18040: PPUSH
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 250
18050: PPUSH
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 251
18060: PPUSH
18061: LD_INT 10
18063: PPUSH
18064: LD_INT 0
18066: PPUSH
18067: CALL_OW 50
// result := result ^ un ;
18071: LD_ADDR_VAR 0 7
18075: PUSH
18076: LD_VAR 0 7
18080: PUSH
18081: LD_VAR 0 14
18085: ADD
18086: ST_TO_ADDR
// end ;
18087: GO 17965
18089: POP
18090: POP
// end ; end ;
18091: LD_VAR 0 7
18095: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18096: LD_INT 0
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
18102: PPUSH
18103: PPUSH
18104: PPUSH
18105: PPUSH
18106: PPUSH
18107: PPUSH
18108: PPUSH
18109: PPUSH
18110: PPUSH
18111: PPUSH
18112: PPUSH
18113: PPUSH
// result := false ;
18114: LD_ADDR_VAR 0 3
18118: PUSH
18119: LD_INT 0
18121: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18122: LD_VAR 0 1
18126: NOT
18127: PUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 266
18137: PUSH
18138: LD_INT 32
18140: PUSH
18141: LD_INT 33
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: IN
18148: NOT
18149: OR
18150: IFFALSE 18154
// exit ;
18152: GO 19263
// nat := GetNation ( tower ) ;
18154: LD_ADDR_VAR 0 12
18158: PUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 248
18168: ST_TO_ADDR
// side := GetSide ( tower ) ;
18169: LD_ADDR_VAR 0 16
18173: PUSH
18174: LD_VAR 0 1
18178: PPUSH
18179: CALL_OW 255
18183: ST_TO_ADDR
// x := GetX ( tower ) ;
18184: LD_ADDR_VAR 0 10
18188: PUSH
18189: LD_VAR 0 1
18193: PPUSH
18194: CALL_OW 250
18198: ST_TO_ADDR
// y := GetY ( tower ) ;
18199: LD_ADDR_VAR 0 11
18203: PUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 251
18213: ST_TO_ADDR
// if not x or not y then
18214: LD_VAR 0 10
18218: NOT
18219: PUSH
18220: LD_VAR 0 11
18224: NOT
18225: OR
18226: IFFALSE 18230
// exit ;
18228: GO 19263
// weapon := 0 ;
18230: LD_ADDR_VAR 0 18
18234: PUSH
18235: LD_INT 0
18237: ST_TO_ADDR
// fac_list := [ ] ;
18238: LD_ADDR_VAR 0 17
18242: PUSH
18243: EMPTY
18244: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18245: LD_ADDR_VAR 0 6
18249: PUSH
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 274
18259: PPUSH
18260: LD_VAR 0 2
18264: PPUSH
18265: LD_INT 0
18267: PPUSH
18268: CALL 15834 0 3
18272: PPUSH
18273: LD_INT 30
18275: PUSH
18276: LD_INT 3
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PPUSH
18283: CALL_OW 72
18287: ST_TO_ADDR
// if not factories then
18288: LD_VAR 0 6
18292: NOT
18293: IFFALSE 18297
// exit ;
18295: GO 19263
// for i in factories do
18297: LD_ADDR_VAR 0 8
18301: PUSH
18302: LD_VAR 0 6
18306: PUSH
18307: FOR_IN
18308: IFFALSE 18333
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18310: LD_ADDR_VAR 0 17
18314: PUSH
18315: LD_VAR 0 17
18319: PUSH
18320: LD_VAR 0 8
18324: PPUSH
18325: CALL_OW 478
18329: UNION
18330: ST_TO_ADDR
18331: GO 18307
18333: POP
18334: POP
// if not fac_list then
18335: LD_VAR 0 17
18339: NOT
18340: IFFALSE 18344
// exit ;
18342: GO 19263
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18344: LD_ADDR_VAR 0 5
18348: PUSH
18349: LD_INT 4
18351: PUSH
18352: LD_INT 5
18354: PUSH
18355: LD_INT 9
18357: PUSH
18358: LD_INT 10
18360: PUSH
18361: LD_INT 6
18363: PUSH
18364: LD_INT 7
18366: PUSH
18367: LD_INT 11
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 27
18381: PUSH
18382: LD_INT 28
18384: PUSH
18385: LD_INT 26
18387: PUSH
18388: LD_INT 30
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 43
18399: PUSH
18400: LD_INT 44
18402: PUSH
18403: LD_INT 46
18405: PUSH
18406: LD_INT 45
18408: PUSH
18409: LD_INT 47
18411: PUSH
18412: LD_INT 49
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: PUSH
18428: LD_VAR 0 12
18432: ARRAY
18433: ST_TO_ADDR
// list := list isect fac_list ;
18434: LD_ADDR_VAR 0 5
18438: PUSH
18439: LD_VAR 0 5
18443: PUSH
18444: LD_VAR 0 17
18448: ISECT
18449: ST_TO_ADDR
// if not list then
18450: LD_VAR 0 5
18454: NOT
18455: IFFALSE 18459
// exit ;
18457: GO 19263
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18459: LD_VAR 0 12
18463: PUSH
18464: LD_INT 3
18466: EQUAL
18467: PUSH
18468: LD_INT 49
18470: PUSH
18471: LD_VAR 0 5
18475: IN
18476: AND
18477: PUSH
18478: LD_INT 31
18480: PPUSH
18481: LD_VAR 0 16
18485: PPUSH
18486: CALL_OW 321
18490: PUSH
18491: LD_INT 2
18493: EQUAL
18494: AND
18495: IFFALSE 18555
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18497: LD_INT 22
18499: PUSH
18500: LD_VAR 0 16
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 35
18511: PUSH
18512: LD_INT 49
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 91
18521: PUSH
18522: LD_VAR 0 1
18526: PUSH
18527: LD_INT 10
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: LIST
18539: PPUSH
18540: CALL_OW 69
18544: NOT
18545: IFFALSE 18555
// weapon := ru_time_lapser ;
18547: LD_ADDR_VAR 0 18
18551: PUSH
18552: LD_INT 49
18554: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18555: LD_VAR 0 12
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: IN
18570: PUSH
18571: LD_INT 11
18573: PUSH
18574: LD_VAR 0 5
18578: IN
18579: PUSH
18580: LD_INT 30
18582: PUSH
18583: LD_VAR 0 5
18587: IN
18588: OR
18589: AND
18590: PUSH
18591: LD_INT 6
18593: PPUSH
18594: LD_VAR 0 16
18598: PPUSH
18599: CALL_OW 321
18603: PUSH
18604: LD_INT 2
18606: EQUAL
18607: AND
18608: IFFALSE 18773
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18610: LD_INT 22
18612: PUSH
18613: LD_VAR 0 16
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 2
18624: PUSH
18625: LD_INT 35
18627: PUSH
18628: LD_INT 11
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 35
18637: PUSH
18638: LD_INT 30
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 91
18652: PUSH
18653: LD_VAR 0 1
18657: PUSH
18658: LD_INT 18
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: NOT
18676: PUSH
18677: LD_INT 22
18679: PUSH
18680: LD_VAR 0 16
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 2
18691: PUSH
18692: LD_INT 30
18694: PUSH
18695: LD_INT 32
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 30
18704: PUSH
18705: LD_INT 33
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 91
18719: PUSH
18720: LD_VAR 0 1
18724: PUSH
18725: LD_INT 12
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: PUSH
18738: EMPTY
18739: LIST
18740: PPUSH
18741: CALL_OW 69
18745: PUSH
18746: LD_INT 2
18748: GREATER
18749: AND
18750: IFFALSE 18773
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18752: LD_ADDR_VAR 0 18
18756: PUSH
18757: LD_INT 11
18759: PUSH
18760: LD_INT 30
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_VAR 0 12
18771: ARRAY
18772: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18773: LD_VAR 0 18
18777: NOT
18778: PUSH
18779: LD_INT 40
18781: PPUSH
18782: LD_VAR 0 16
18786: PPUSH
18787: CALL_OW 321
18791: PUSH
18792: LD_INT 2
18794: EQUAL
18795: AND
18796: PUSH
18797: LD_INT 7
18799: PUSH
18800: LD_VAR 0 5
18804: IN
18805: PUSH
18806: LD_INT 28
18808: PUSH
18809: LD_VAR 0 5
18813: IN
18814: OR
18815: PUSH
18816: LD_INT 45
18818: PUSH
18819: LD_VAR 0 5
18823: IN
18824: OR
18825: AND
18826: IFFALSE 19080
// begin hex := GetHexInfo ( x , y ) ;
18828: LD_ADDR_VAR 0 4
18832: PUSH
18833: LD_VAR 0 10
18837: PPUSH
18838: LD_VAR 0 11
18842: PPUSH
18843: CALL_OW 546
18847: ST_TO_ADDR
// if hex [ 1 ] then
18848: LD_VAR 0 4
18852: PUSH
18853: LD_INT 1
18855: ARRAY
18856: IFFALSE 18860
// exit ;
18858: GO 19263
// height := hex [ 2 ] ;
18860: LD_ADDR_VAR 0 15
18864: PUSH
18865: LD_VAR 0 4
18869: PUSH
18870: LD_INT 2
18872: ARRAY
18873: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18874: LD_ADDR_VAR 0 14
18878: PUSH
18879: LD_INT 0
18881: PUSH
18882: LD_INT 2
18884: PUSH
18885: LD_INT 3
18887: PUSH
18888: LD_INT 5
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: ST_TO_ADDR
// for i in tmp do
18897: LD_ADDR_VAR 0 8
18901: PUSH
18902: LD_VAR 0 14
18906: PUSH
18907: FOR_IN
18908: IFFALSE 19078
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18910: LD_ADDR_VAR 0 9
18914: PUSH
18915: LD_VAR 0 10
18919: PPUSH
18920: LD_VAR 0 8
18924: PPUSH
18925: LD_INT 5
18927: PPUSH
18928: CALL_OW 272
18932: PUSH
18933: LD_VAR 0 11
18937: PPUSH
18938: LD_VAR 0 8
18942: PPUSH
18943: LD_INT 5
18945: PPUSH
18946: CALL_OW 273
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18955: LD_VAR 0 9
18959: PUSH
18960: LD_INT 1
18962: ARRAY
18963: PPUSH
18964: LD_VAR 0 9
18968: PUSH
18969: LD_INT 2
18971: ARRAY
18972: PPUSH
18973: CALL_OW 488
18977: IFFALSE 19076
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18979: LD_ADDR_VAR 0 4
18983: PUSH
18984: LD_VAR 0 9
18988: PUSH
18989: LD_INT 1
18991: ARRAY
18992: PPUSH
18993: LD_VAR 0 9
18997: PUSH
18998: LD_INT 2
19000: ARRAY
19001: PPUSH
19002: CALL_OW 546
19006: ST_TO_ADDR
// if hex [ 1 ] then
19007: LD_VAR 0 4
19011: PUSH
19012: LD_INT 1
19014: ARRAY
19015: IFFALSE 19019
// continue ;
19017: GO 18907
// h := hex [ 2 ] ;
19019: LD_ADDR_VAR 0 13
19023: PUSH
19024: LD_VAR 0 4
19028: PUSH
19029: LD_INT 2
19031: ARRAY
19032: ST_TO_ADDR
// if h + 7 < height then
19033: LD_VAR 0 13
19037: PUSH
19038: LD_INT 7
19040: PLUS
19041: PUSH
19042: LD_VAR 0 15
19046: LESS
19047: IFFALSE 19076
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19049: LD_ADDR_VAR 0 18
19053: PUSH
19054: LD_INT 7
19056: PUSH
19057: LD_INT 28
19059: PUSH
19060: LD_INT 45
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: LIST
19067: PUSH
19068: LD_VAR 0 12
19072: ARRAY
19073: ST_TO_ADDR
// break ;
19074: GO 19078
// end ; end ; end ;
19076: GO 18907
19078: POP
19079: POP
// end ; if not weapon then
19080: LD_VAR 0 18
19084: NOT
19085: IFFALSE 19145
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19087: LD_ADDR_VAR 0 5
19091: PUSH
19092: LD_VAR 0 5
19096: PUSH
19097: LD_INT 11
19099: PUSH
19100: LD_INT 30
19102: PUSH
19103: LD_INT 49
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: DIFF
19111: ST_TO_ADDR
// if not list then
19112: LD_VAR 0 5
19116: NOT
19117: IFFALSE 19121
// exit ;
19119: GO 19263
// weapon := list [ rand ( 1 , list ) ] ;
19121: LD_ADDR_VAR 0 18
19125: PUSH
19126: LD_VAR 0 5
19130: PUSH
19131: LD_INT 1
19133: PPUSH
19134: LD_VAR 0 5
19138: PPUSH
19139: CALL_OW 12
19143: ARRAY
19144: ST_TO_ADDR
// end ; if weapon then
19145: LD_VAR 0 18
19149: IFFALSE 19263
// begin tmp := CostOfWeapon ( weapon ) ;
19151: LD_ADDR_VAR 0 14
19155: PUSH
19156: LD_VAR 0 18
19160: PPUSH
19161: CALL_OW 451
19165: ST_TO_ADDR
// j := GetBase ( tower ) ;
19166: LD_ADDR_VAR 0 9
19170: PUSH
19171: LD_VAR 0 1
19175: PPUSH
19176: CALL_OW 274
19180: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19181: LD_VAR 0 9
19185: PPUSH
19186: LD_INT 1
19188: PPUSH
19189: CALL_OW 275
19193: PUSH
19194: LD_VAR 0 14
19198: PUSH
19199: LD_INT 1
19201: ARRAY
19202: GREATEREQUAL
19203: PUSH
19204: LD_VAR 0 9
19208: PPUSH
19209: LD_INT 2
19211: PPUSH
19212: CALL_OW 275
19216: PUSH
19217: LD_VAR 0 14
19221: PUSH
19222: LD_INT 2
19224: ARRAY
19225: GREATEREQUAL
19226: AND
19227: PUSH
19228: LD_VAR 0 9
19232: PPUSH
19233: LD_INT 3
19235: PPUSH
19236: CALL_OW 275
19240: PUSH
19241: LD_VAR 0 14
19245: PUSH
19246: LD_INT 3
19248: ARRAY
19249: GREATEREQUAL
19250: AND
19251: IFFALSE 19263
// result := weapon ;
19253: LD_ADDR_VAR 0 3
19257: PUSH
19258: LD_VAR 0 18
19262: ST_TO_ADDR
// end ; end ;
19263: LD_VAR 0 3
19267: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19268: LD_INT 0
19270: PPUSH
19271: PPUSH
// result := true ;
19272: LD_ADDR_VAR 0 3
19276: PUSH
19277: LD_INT 1
19279: ST_TO_ADDR
// if array1 = array2 then
19280: LD_VAR 0 1
19284: PUSH
19285: LD_VAR 0 2
19289: EQUAL
19290: IFFALSE 19350
// begin for i = 1 to array1 do
19292: LD_ADDR_VAR 0 4
19296: PUSH
19297: DOUBLE
19298: LD_INT 1
19300: DEC
19301: ST_TO_ADDR
19302: LD_VAR 0 1
19306: PUSH
19307: FOR_TO
19308: IFFALSE 19346
// if array1 [ i ] <> array2 [ i ] then
19310: LD_VAR 0 1
19314: PUSH
19315: LD_VAR 0 4
19319: ARRAY
19320: PUSH
19321: LD_VAR 0 2
19325: PUSH
19326: LD_VAR 0 4
19330: ARRAY
19331: NONEQUAL
19332: IFFALSE 19344
// begin result := false ;
19334: LD_ADDR_VAR 0 3
19338: PUSH
19339: LD_INT 0
19341: ST_TO_ADDR
// break ;
19342: GO 19346
// end ;
19344: GO 19307
19346: POP
19347: POP
// end else
19348: GO 19358
// result := false ;
19350: LD_ADDR_VAR 0 3
19354: PUSH
19355: LD_INT 0
19357: ST_TO_ADDR
// end ;
19358: LD_VAR 0 3
19362: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19363: LD_INT 0
19365: PPUSH
19366: PPUSH
// if not array1 or not array2 then
19367: LD_VAR 0 1
19371: NOT
19372: PUSH
19373: LD_VAR 0 2
19377: NOT
19378: OR
19379: IFFALSE 19383
// exit ;
19381: GO 19447
// result := true ;
19383: LD_ADDR_VAR 0 3
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// for i = 1 to array1 do
19391: LD_ADDR_VAR 0 4
19395: PUSH
19396: DOUBLE
19397: LD_INT 1
19399: DEC
19400: ST_TO_ADDR
19401: LD_VAR 0 1
19405: PUSH
19406: FOR_TO
19407: IFFALSE 19445
// if array1 [ i ] <> array2 [ i ] then
19409: LD_VAR 0 1
19413: PUSH
19414: LD_VAR 0 4
19418: ARRAY
19419: PUSH
19420: LD_VAR 0 2
19424: PUSH
19425: LD_VAR 0 4
19429: ARRAY
19430: NONEQUAL
19431: IFFALSE 19443
// begin result := false ;
19433: LD_ADDR_VAR 0 3
19437: PUSH
19438: LD_INT 0
19440: ST_TO_ADDR
// break ;
19441: GO 19445
// end ;
19443: GO 19406
19445: POP
19446: POP
// end ;
19447: LD_VAR 0 3
19451: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
19456: PPUSH
// pom := GetBase ( fac ) ;
19457: LD_ADDR_VAR 0 5
19461: PUSH
19462: LD_VAR 0 1
19466: PPUSH
19467: CALL_OW 274
19471: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19472: LD_ADDR_VAR 0 4
19476: PUSH
19477: LD_VAR 0 2
19481: PUSH
19482: LD_INT 1
19484: ARRAY
19485: PPUSH
19486: LD_VAR 0 2
19490: PUSH
19491: LD_INT 2
19493: ARRAY
19494: PPUSH
19495: LD_VAR 0 2
19499: PUSH
19500: LD_INT 3
19502: ARRAY
19503: PPUSH
19504: LD_VAR 0 2
19508: PUSH
19509: LD_INT 4
19511: ARRAY
19512: PPUSH
19513: CALL_OW 449
19517: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19518: LD_ADDR_VAR 0 3
19522: PUSH
19523: LD_VAR 0 5
19527: PPUSH
19528: LD_INT 1
19530: PPUSH
19531: CALL_OW 275
19535: PUSH
19536: LD_VAR 0 4
19540: PUSH
19541: LD_INT 1
19543: ARRAY
19544: GREATEREQUAL
19545: PUSH
19546: LD_VAR 0 5
19550: PPUSH
19551: LD_INT 2
19553: PPUSH
19554: CALL_OW 275
19558: PUSH
19559: LD_VAR 0 4
19563: PUSH
19564: LD_INT 2
19566: ARRAY
19567: GREATEREQUAL
19568: AND
19569: PUSH
19570: LD_VAR 0 5
19574: PPUSH
19575: LD_INT 3
19577: PPUSH
19578: CALL_OW 275
19582: PUSH
19583: LD_VAR 0 4
19587: PUSH
19588: LD_INT 3
19590: ARRAY
19591: GREATEREQUAL
19592: AND
19593: ST_TO_ADDR
// end ;
19594: LD_VAR 0 3
19598: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19599: LD_INT 0
19601: PPUSH
19602: PPUSH
19603: PPUSH
19604: PPUSH
// pom := GetBase ( building ) ;
19605: LD_ADDR_VAR 0 3
19609: PUSH
19610: LD_VAR 0 1
19614: PPUSH
19615: CALL_OW 274
19619: ST_TO_ADDR
// if not pom then
19620: LD_VAR 0 3
19624: NOT
19625: IFFALSE 19629
// exit ;
19627: GO 19799
// btype := GetBType ( building ) ;
19629: LD_ADDR_VAR 0 5
19633: PUSH
19634: LD_VAR 0 1
19638: PPUSH
19639: CALL_OW 266
19643: ST_TO_ADDR
// if btype = b_armoury then
19644: LD_VAR 0 5
19648: PUSH
19649: LD_INT 4
19651: EQUAL
19652: IFFALSE 19662
// btype := b_barracks ;
19654: LD_ADDR_VAR 0 5
19658: PUSH
19659: LD_INT 5
19661: ST_TO_ADDR
// if btype = b_depot then
19662: LD_VAR 0 5
19666: PUSH
19667: LD_INT 0
19669: EQUAL
19670: IFFALSE 19680
// btype := b_warehouse ;
19672: LD_ADDR_VAR 0 5
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// if btype = b_workshop then
19680: LD_VAR 0 5
19684: PUSH
19685: LD_INT 2
19687: EQUAL
19688: IFFALSE 19698
// btype := b_factory ;
19690: LD_ADDR_VAR 0 5
19694: PUSH
19695: LD_INT 3
19697: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19698: LD_ADDR_VAR 0 4
19702: PUSH
19703: LD_VAR 0 5
19707: PPUSH
19708: LD_VAR 0 1
19712: PPUSH
19713: CALL_OW 248
19717: PPUSH
19718: CALL_OW 450
19722: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19723: LD_ADDR_VAR 0 2
19727: PUSH
19728: LD_VAR 0 3
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: CALL_OW 275
19740: PUSH
19741: LD_VAR 0 4
19745: PUSH
19746: LD_INT 1
19748: ARRAY
19749: GREATEREQUAL
19750: PUSH
19751: LD_VAR 0 3
19755: PPUSH
19756: LD_INT 2
19758: PPUSH
19759: CALL_OW 275
19763: PUSH
19764: LD_VAR 0 4
19768: PUSH
19769: LD_INT 2
19771: ARRAY
19772: GREATEREQUAL
19773: AND
19774: PUSH
19775: LD_VAR 0 3
19779: PPUSH
19780: LD_INT 3
19782: PPUSH
19783: CALL_OW 275
19787: PUSH
19788: LD_VAR 0 4
19792: PUSH
19793: LD_INT 3
19795: ARRAY
19796: GREATEREQUAL
19797: AND
19798: ST_TO_ADDR
// end ;
19799: LD_VAR 0 2
19803: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19804: LD_INT 0
19806: PPUSH
19807: PPUSH
19808: PPUSH
// pom := GetBase ( building ) ;
19809: LD_ADDR_VAR 0 4
19813: PUSH
19814: LD_VAR 0 1
19818: PPUSH
19819: CALL_OW 274
19823: ST_TO_ADDR
// if not pom then
19824: LD_VAR 0 4
19828: NOT
19829: IFFALSE 19833
// exit ;
19831: GO 19934
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19833: LD_ADDR_VAR 0 5
19837: PUSH
19838: LD_VAR 0 2
19842: PPUSH
19843: LD_VAR 0 1
19847: PPUSH
19848: CALL_OW 248
19852: PPUSH
19853: CALL_OW 450
19857: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19858: LD_ADDR_VAR 0 3
19862: PUSH
19863: LD_VAR 0 4
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL_OW 275
19875: PUSH
19876: LD_VAR 0 5
19880: PUSH
19881: LD_INT 1
19883: ARRAY
19884: GREATEREQUAL
19885: PUSH
19886: LD_VAR 0 4
19890: PPUSH
19891: LD_INT 2
19893: PPUSH
19894: CALL_OW 275
19898: PUSH
19899: LD_VAR 0 5
19903: PUSH
19904: LD_INT 2
19906: ARRAY
19907: GREATEREQUAL
19908: AND
19909: PUSH
19910: LD_VAR 0 4
19914: PPUSH
19915: LD_INT 3
19917: PPUSH
19918: CALL_OW 275
19922: PUSH
19923: LD_VAR 0 5
19927: PUSH
19928: LD_INT 3
19930: ARRAY
19931: GREATEREQUAL
19932: AND
19933: ST_TO_ADDR
// end ;
19934: LD_VAR 0 3
19938: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
19943: PPUSH
19944: PPUSH
19945: PPUSH
19946: PPUSH
19947: PPUSH
19948: PPUSH
19949: PPUSH
19950: PPUSH
19951: PPUSH
// result := false ;
19952: LD_ADDR_VAR 0 8
19956: PUSH
19957: LD_INT 0
19959: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19960: LD_VAR 0 5
19964: NOT
19965: PUSH
19966: LD_VAR 0 1
19970: NOT
19971: OR
19972: PUSH
19973: LD_VAR 0 2
19977: NOT
19978: OR
19979: PUSH
19980: LD_VAR 0 3
19984: NOT
19985: OR
19986: IFFALSE 19990
// exit ;
19988: GO 20804
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19990: LD_ADDR_VAR 0 14
19994: PUSH
19995: LD_VAR 0 1
19999: PPUSH
20000: LD_VAR 0 2
20004: PPUSH
20005: LD_VAR 0 3
20009: PPUSH
20010: LD_VAR 0 4
20014: PPUSH
20015: LD_VAR 0 5
20019: PUSH
20020: LD_INT 1
20022: ARRAY
20023: PPUSH
20024: CALL_OW 248
20028: PPUSH
20029: LD_INT 0
20031: PPUSH
20032: CALL 22041 0 6
20036: ST_TO_ADDR
// if not hexes then
20037: LD_VAR 0 14
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20804
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20046: LD_ADDR_VAR 0 17
20050: PUSH
20051: LD_VAR 0 5
20055: PPUSH
20056: LD_INT 22
20058: PUSH
20059: LD_VAR 0 13
20063: PPUSH
20064: CALL_OW 255
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: LD_INT 30
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 30
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PPUSH
20105: CALL_OW 72
20109: ST_TO_ADDR
// for i = 1 to hexes do
20110: LD_ADDR_VAR 0 9
20114: PUSH
20115: DOUBLE
20116: LD_INT 1
20118: DEC
20119: ST_TO_ADDR
20120: LD_VAR 0 14
20124: PUSH
20125: FOR_TO
20126: IFFALSE 20802
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20128: LD_ADDR_VAR 0 13
20132: PUSH
20133: LD_VAR 0 14
20137: PUSH
20138: LD_VAR 0 9
20142: ARRAY
20143: PUSH
20144: LD_INT 1
20146: ARRAY
20147: PPUSH
20148: LD_VAR 0 14
20152: PUSH
20153: LD_VAR 0 9
20157: ARRAY
20158: PUSH
20159: LD_INT 2
20161: ARRAY
20162: PPUSH
20163: CALL_OW 428
20167: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20168: LD_VAR 0 14
20172: PUSH
20173: LD_VAR 0 9
20177: ARRAY
20178: PUSH
20179: LD_INT 1
20181: ARRAY
20182: PPUSH
20183: LD_VAR 0 14
20187: PUSH
20188: LD_VAR 0 9
20192: ARRAY
20193: PUSH
20194: LD_INT 2
20196: ARRAY
20197: PPUSH
20198: CALL_OW 351
20202: PUSH
20203: LD_VAR 0 14
20207: PUSH
20208: LD_VAR 0 9
20212: ARRAY
20213: PUSH
20214: LD_INT 1
20216: ARRAY
20217: PPUSH
20218: LD_VAR 0 14
20222: PUSH
20223: LD_VAR 0 9
20227: ARRAY
20228: PUSH
20229: LD_INT 2
20231: ARRAY
20232: PPUSH
20233: CALL_OW 488
20237: NOT
20238: OR
20239: PUSH
20240: LD_VAR 0 13
20244: PPUSH
20245: CALL_OW 247
20249: PUSH
20250: LD_INT 3
20252: EQUAL
20253: OR
20254: IFFALSE 20260
// exit ;
20256: POP
20257: POP
20258: GO 20804
// if not tmp then
20260: LD_VAR 0 13
20264: NOT
20265: IFFALSE 20269
// continue ;
20267: GO 20125
// result := true ;
20269: LD_ADDR_VAR 0 8
20273: PUSH
20274: LD_INT 1
20276: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20277: LD_VAR 0 6
20281: PUSH
20282: LD_VAR 0 13
20286: PPUSH
20287: CALL_OW 247
20291: PUSH
20292: LD_INT 2
20294: EQUAL
20295: AND
20296: PUSH
20297: LD_VAR 0 13
20301: PPUSH
20302: CALL_OW 263
20306: PUSH
20307: LD_INT 1
20309: EQUAL
20310: AND
20311: IFFALSE 20475
// begin if IsDrivenBy ( tmp ) then
20313: LD_VAR 0 13
20317: PPUSH
20318: CALL_OW 311
20322: IFFALSE 20326
// continue ;
20324: GO 20125
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20326: LD_VAR 0 6
20330: PPUSH
20331: LD_INT 3
20333: PUSH
20334: LD_INT 60
20336: PUSH
20337: EMPTY
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 3
20346: PUSH
20347: LD_INT 55
20349: PUSH
20350: EMPTY
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PPUSH
20361: CALL_OW 72
20365: IFFALSE 20473
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20367: LD_ADDR_VAR 0 18
20371: PUSH
20372: LD_VAR 0 6
20376: PPUSH
20377: LD_INT 3
20379: PUSH
20380: LD_INT 60
20382: PUSH
20383: EMPTY
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 3
20392: PUSH
20393: LD_INT 55
20395: PUSH
20396: EMPTY
20397: LIST
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PPUSH
20407: CALL_OW 72
20411: PUSH
20412: LD_INT 1
20414: ARRAY
20415: ST_TO_ADDR
// if IsInUnit ( driver ) then
20416: LD_VAR 0 18
20420: PPUSH
20421: CALL_OW 310
20425: IFFALSE 20436
// ComExit ( driver ) ;
20427: LD_VAR 0 18
20431: PPUSH
20432: CALL 45729 0 1
// AddComEnterUnit ( driver , tmp ) ;
20436: LD_VAR 0 18
20440: PPUSH
20441: LD_VAR 0 13
20445: PPUSH
20446: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20450: LD_VAR 0 18
20454: PPUSH
20455: LD_VAR 0 7
20459: PPUSH
20460: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20464: LD_VAR 0 18
20468: PPUSH
20469: CALL_OW 181
// end ; continue ;
20473: GO 20125
// end ; if not cleaners or not tmp in cleaners then
20475: LD_VAR 0 6
20479: NOT
20480: PUSH
20481: LD_VAR 0 13
20485: PUSH
20486: LD_VAR 0 6
20490: IN
20491: NOT
20492: OR
20493: IFFALSE 20800
// begin if dep then
20495: LD_VAR 0 17
20499: IFFALSE 20635
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20501: LD_ADDR_VAR 0 16
20505: PUSH
20506: LD_VAR 0 17
20510: PUSH
20511: LD_INT 1
20513: ARRAY
20514: PPUSH
20515: CALL_OW 250
20519: PPUSH
20520: LD_VAR 0 17
20524: PUSH
20525: LD_INT 1
20527: ARRAY
20528: PPUSH
20529: CALL_OW 254
20533: PPUSH
20534: LD_INT 5
20536: PPUSH
20537: CALL_OW 272
20541: PUSH
20542: LD_VAR 0 17
20546: PUSH
20547: LD_INT 1
20549: ARRAY
20550: PPUSH
20551: CALL_OW 251
20555: PPUSH
20556: LD_VAR 0 17
20560: PUSH
20561: LD_INT 1
20563: ARRAY
20564: PPUSH
20565: CALL_OW 254
20569: PPUSH
20570: LD_INT 5
20572: PPUSH
20573: CALL_OW 273
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20582: LD_VAR 0 16
20586: PUSH
20587: LD_INT 1
20589: ARRAY
20590: PPUSH
20591: LD_VAR 0 16
20595: PUSH
20596: LD_INT 2
20598: ARRAY
20599: PPUSH
20600: CALL_OW 488
20604: IFFALSE 20635
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20606: LD_VAR 0 13
20610: PPUSH
20611: LD_VAR 0 16
20615: PUSH
20616: LD_INT 1
20618: ARRAY
20619: PPUSH
20620: LD_VAR 0 16
20624: PUSH
20625: LD_INT 2
20627: ARRAY
20628: PPUSH
20629: CALL_OW 111
// continue ;
20633: GO 20125
// end ; end ; r := GetDir ( tmp ) ;
20635: LD_ADDR_VAR 0 15
20639: PUSH
20640: LD_VAR 0 13
20644: PPUSH
20645: CALL_OW 254
20649: ST_TO_ADDR
// if r = 5 then
20650: LD_VAR 0 15
20654: PUSH
20655: LD_INT 5
20657: EQUAL
20658: IFFALSE 20668
// r := 0 ;
20660: LD_ADDR_VAR 0 15
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// for j = r to 5 do
20668: LD_ADDR_VAR 0 10
20672: PUSH
20673: DOUBLE
20674: LD_VAR 0 15
20678: DEC
20679: ST_TO_ADDR
20680: LD_INT 5
20682: PUSH
20683: FOR_TO
20684: IFFALSE 20798
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20686: LD_ADDR_VAR 0 11
20690: PUSH
20691: LD_VAR 0 13
20695: PPUSH
20696: CALL_OW 250
20700: PPUSH
20701: LD_VAR 0 10
20705: PPUSH
20706: LD_INT 2
20708: PPUSH
20709: CALL_OW 272
20713: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20714: LD_ADDR_VAR 0 12
20718: PUSH
20719: LD_VAR 0 13
20723: PPUSH
20724: CALL_OW 251
20728: PPUSH
20729: LD_VAR 0 10
20733: PPUSH
20734: LD_INT 2
20736: PPUSH
20737: CALL_OW 273
20741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20742: LD_VAR 0 11
20746: PPUSH
20747: LD_VAR 0 12
20751: PPUSH
20752: CALL_OW 488
20756: PUSH
20757: LD_VAR 0 11
20761: PPUSH
20762: LD_VAR 0 12
20766: PPUSH
20767: CALL_OW 428
20771: NOT
20772: AND
20773: IFFALSE 20796
// begin ComMoveXY ( tmp , _x , _y ) ;
20775: LD_VAR 0 13
20779: PPUSH
20780: LD_VAR 0 11
20784: PPUSH
20785: LD_VAR 0 12
20789: PPUSH
20790: CALL_OW 111
// break ;
20794: GO 20798
// end ; end ;
20796: GO 20683
20798: POP
20799: POP
// end ; end ;
20800: GO 20125
20802: POP
20803: POP
// end ;
20804: LD_VAR 0 8
20808: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20809: LD_INT 0
20811: PPUSH
// result := true ;
20812: LD_ADDR_VAR 0 3
20816: PUSH
20817: LD_INT 1
20819: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20820: LD_VAR 0 2
20824: PUSH
20825: LD_INT 24
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20839
20831: LD_INT 33
20833: DOUBLE
20834: EQUAL
20835: IFTRUE 20839
20837: GO 20864
20839: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20840: LD_ADDR_VAR 0 3
20844: PUSH
20845: LD_INT 32
20847: PPUSH
20848: LD_VAR 0 1
20852: PPUSH
20853: CALL_OW 321
20857: PUSH
20858: LD_INT 2
20860: EQUAL
20861: ST_TO_ADDR
20862: GO 21184
20864: LD_INT 20
20866: DOUBLE
20867: EQUAL
20868: IFTRUE 20872
20870: GO 20897
20872: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20873: LD_ADDR_VAR 0 3
20877: PUSH
20878: LD_INT 6
20880: PPUSH
20881: LD_VAR 0 1
20885: PPUSH
20886: CALL_OW 321
20890: PUSH
20891: LD_INT 2
20893: EQUAL
20894: ST_TO_ADDR
20895: GO 21184
20897: LD_INT 22
20899: DOUBLE
20900: EQUAL
20901: IFTRUE 20911
20903: LD_INT 36
20905: DOUBLE
20906: EQUAL
20907: IFTRUE 20911
20909: GO 20936
20911: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20912: LD_ADDR_VAR 0 3
20916: PUSH
20917: LD_INT 15
20919: PPUSH
20920: LD_VAR 0 1
20924: PPUSH
20925: CALL_OW 321
20929: PUSH
20930: LD_INT 2
20932: EQUAL
20933: ST_TO_ADDR
20934: GO 21184
20936: LD_INT 30
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 20969
20944: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20945: LD_ADDR_VAR 0 3
20949: PUSH
20950: LD_INT 20
20952: PPUSH
20953: LD_VAR 0 1
20957: PPUSH
20958: CALL_OW 321
20962: PUSH
20963: LD_INT 2
20965: EQUAL
20966: ST_TO_ADDR
20967: GO 21184
20969: LD_INT 28
20971: DOUBLE
20972: EQUAL
20973: IFTRUE 20983
20975: LD_INT 21
20977: DOUBLE
20978: EQUAL
20979: IFTRUE 20983
20981: GO 21008
20983: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
20984: LD_ADDR_VAR 0 3
20988: PUSH
20989: LD_INT 21
20991: PPUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL_OW 321
21001: PUSH
21002: LD_INT 2
21004: EQUAL
21005: ST_TO_ADDR
21006: GO 21184
21008: LD_INT 16
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21043
21016: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: LD_EXP 54
21026: PPUSH
21027: LD_VAR 0 1
21031: PPUSH
21032: CALL_OW 321
21036: PUSH
21037: LD_INT 2
21039: EQUAL
21040: ST_TO_ADDR
21041: GO 21184
21043: LD_INT 19
21045: DOUBLE
21046: EQUAL
21047: IFTRUE 21057
21049: LD_INT 23
21051: DOUBLE
21052: EQUAL
21053: IFTRUE 21057
21055: GO 21084
21057: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21058: LD_ADDR_VAR 0 3
21062: PUSH
21063: LD_EXP 53
21067: PPUSH
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 321
21077: PUSH
21078: LD_INT 2
21080: EQUAL
21081: ST_TO_ADDR
21082: GO 21184
21084: LD_INT 17
21086: DOUBLE
21087: EQUAL
21088: IFTRUE 21092
21090: GO 21117
21092: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21093: LD_ADDR_VAR 0 3
21097: PUSH
21098: LD_INT 39
21100: PPUSH
21101: LD_VAR 0 1
21105: PPUSH
21106: CALL_OW 321
21110: PUSH
21111: LD_INT 2
21113: EQUAL
21114: ST_TO_ADDR
21115: GO 21184
21117: LD_INT 18
21119: DOUBLE
21120: EQUAL
21121: IFTRUE 21125
21123: GO 21150
21125: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21126: LD_ADDR_VAR 0 3
21130: PUSH
21131: LD_INT 40
21133: PPUSH
21134: LD_VAR 0 1
21138: PPUSH
21139: CALL_OW 321
21143: PUSH
21144: LD_INT 2
21146: EQUAL
21147: ST_TO_ADDR
21148: GO 21184
21150: LD_INT 27
21152: DOUBLE
21153: EQUAL
21154: IFTRUE 21158
21156: GO 21183
21158: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_INT 35
21166: PPUSH
21167: LD_VAR 0 1
21171: PPUSH
21172: CALL_OW 321
21176: PUSH
21177: LD_INT 2
21179: EQUAL
21180: ST_TO_ADDR
21181: GO 21184
21183: POP
// end ;
21184: LD_VAR 0 3
21188: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21189: LD_INT 0
21191: PPUSH
21192: PPUSH
21193: PPUSH
21194: PPUSH
21195: PPUSH
21196: PPUSH
21197: PPUSH
21198: PPUSH
21199: PPUSH
21200: PPUSH
21201: PPUSH
// result := false ;
21202: LD_ADDR_VAR 0 6
21206: PUSH
21207: LD_INT 0
21209: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21210: LD_VAR 0 1
21214: NOT
21215: PUSH
21216: LD_VAR 0 1
21220: PPUSH
21221: CALL_OW 266
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: IN
21236: NOT
21237: OR
21238: PUSH
21239: LD_VAR 0 2
21243: NOT
21244: OR
21245: PUSH
21246: LD_VAR 0 5
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 3
21262: PUSH
21263: LD_INT 4
21265: PUSH
21266: LD_INT 5
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: IN
21277: NOT
21278: OR
21279: PUSH
21280: LD_VAR 0 3
21284: PPUSH
21285: LD_VAR 0 4
21289: PPUSH
21290: CALL_OW 488
21294: NOT
21295: OR
21296: IFFALSE 21300
// exit ;
21298: GO 22036
// side := GetSide ( depot ) ;
21300: LD_ADDR_VAR 0 9
21304: PUSH
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 255
21314: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21315: LD_VAR 0 9
21319: PPUSH
21320: LD_VAR 0 2
21324: PPUSH
21325: CALL 20809 0 2
21329: NOT
21330: IFFALSE 21334
// exit ;
21332: GO 22036
// pom := GetBase ( depot ) ;
21334: LD_ADDR_VAR 0 10
21338: PUSH
21339: LD_VAR 0 1
21343: PPUSH
21344: CALL_OW 274
21348: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21349: LD_ADDR_VAR 0 11
21353: PUSH
21354: LD_VAR 0 2
21358: PPUSH
21359: LD_VAR 0 1
21363: PPUSH
21364: CALL_OW 248
21368: PPUSH
21369: CALL_OW 450
21373: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21374: LD_VAR 0 10
21378: PPUSH
21379: LD_INT 1
21381: PPUSH
21382: CALL_OW 275
21386: PUSH
21387: LD_VAR 0 11
21391: PUSH
21392: LD_INT 1
21394: ARRAY
21395: GREATEREQUAL
21396: PUSH
21397: LD_VAR 0 10
21401: PPUSH
21402: LD_INT 2
21404: PPUSH
21405: CALL_OW 275
21409: PUSH
21410: LD_VAR 0 11
21414: PUSH
21415: LD_INT 2
21417: ARRAY
21418: GREATEREQUAL
21419: AND
21420: PUSH
21421: LD_VAR 0 10
21425: PPUSH
21426: LD_INT 3
21428: PPUSH
21429: CALL_OW 275
21433: PUSH
21434: LD_VAR 0 11
21438: PUSH
21439: LD_INT 3
21441: ARRAY
21442: GREATEREQUAL
21443: AND
21444: NOT
21445: IFFALSE 21449
// exit ;
21447: GO 22036
// if GetBType ( depot ) = b_depot then
21449: LD_VAR 0 1
21453: PPUSH
21454: CALL_OW 266
21458: PUSH
21459: LD_INT 0
21461: EQUAL
21462: IFFALSE 21474
// dist := 28 else
21464: LD_ADDR_VAR 0 14
21468: PUSH
21469: LD_INT 28
21471: ST_TO_ADDR
21472: GO 21482
// dist := 36 ;
21474: LD_ADDR_VAR 0 14
21478: PUSH
21479: LD_INT 36
21481: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21482: LD_VAR 0 1
21486: PPUSH
21487: LD_VAR 0 3
21491: PPUSH
21492: LD_VAR 0 4
21496: PPUSH
21497: CALL_OW 297
21501: PUSH
21502: LD_VAR 0 14
21506: GREATER
21507: IFFALSE 21511
// exit ;
21509: GO 22036
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21511: LD_ADDR_VAR 0 12
21515: PUSH
21516: LD_VAR 0 2
21520: PPUSH
21521: LD_VAR 0 3
21525: PPUSH
21526: LD_VAR 0 4
21530: PPUSH
21531: LD_VAR 0 5
21535: PPUSH
21536: LD_VAR 0 1
21540: PPUSH
21541: CALL_OW 248
21545: PPUSH
21546: LD_INT 0
21548: PPUSH
21549: CALL 22041 0 6
21553: ST_TO_ADDR
// if not hexes then
21554: LD_VAR 0 12
21558: NOT
21559: IFFALSE 21563
// exit ;
21561: GO 22036
// hex := GetHexInfo ( x , y ) ;
21563: LD_ADDR_VAR 0 15
21567: PUSH
21568: LD_VAR 0 3
21572: PPUSH
21573: LD_VAR 0 4
21577: PPUSH
21578: CALL_OW 546
21582: ST_TO_ADDR
// if hex [ 1 ] then
21583: LD_VAR 0 15
21587: PUSH
21588: LD_INT 1
21590: ARRAY
21591: IFFALSE 21595
// exit ;
21593: GO 22036
// height := hex [ 2 ] ;
21595: LD_ADDR_VAR 0 13
21599: PUSH
21600: LD_VAR 0 15
21604: PUSH
21605: LD_INT 2
21607: ARRAY
21608: ST_TO_ADDR
// for i = 1 to hexes do
21609: LD_ADDR_VAR 0 7
21613: PUSH
21614: DOUBLE
21615: LD_INT 1
21617: DEC
21618: ST_TO_ADDR
21619: LD_VAR 0 12
21623: PUSH
21624: FOR_TO
21625: IFFALSE 21955
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21627: LD_VAR 0 12
21631: PUSH
21632: LD_VAR 0 7
21636: ARRAY
21637: PUSH
21638: LD_INT 1
21640: ARRAY
21641: PPUSH
21642: LD_VAR 0 12
21646: PUSH
21647: LD_VAR 0 7
21651: ARRAY
21652: PUSH
21653: LD_INT 2
21655: ARRAY
21656: PPUSH
21657: CALL_OW 488
21661: NOT
21662: PUSH
21663: LD_VAR 0 12
21667: PUSH
21668: LD_VAR 0 7
21672: ARRAY
21673: PUSH
21674: LD_INT 1
21676: ARRAY
21677: PPUSH
21678: LD_VAR 0 12
21682: PUSH
21683: LD_VAR 0 7
21687: ARRAY
21688: PUSH
21689: LD_INT 2
21691: ARRAY
21692: PPUSH
21693: CALL_OW 428
21697: PUSH
21698: LD_INT 0
21700: GREATER
21701: OR
21702: PUSH
21703: LD_VAR 0 12
21707: PUSH
21708: LD_VAR 0 7
21712: ARRAY
21713: PUSH
21714: LD_INT 1
21716: ARRAY
21717: PPUSH
21718: LD_VAR 0 12
21722: PUSH
21723: LD_VAR 0 7
21727: ARRAY
21728: PUSH
21729: LD_INT 2
21731: ARRAY
21732: PPUSH
21733: CALL_OW 351
21737: OR
21738: IFFALSE 21744
// exit ;
21740: POP
21741: POP
21742: GO 22036
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21744: LD_ADDR_VAR 0 8
21748: PUSH
21749: LD_VAR 0 12
21753: PUSH
21754: LD_VAR 0 7
21758: ARRAY
21759: PUSH
21760: LD_INT 1
21762: ARRAY
21763: PPUSH
21764: LD_VAR 0 12
21768: PUSH
21769: LD_VAR 0 7
21773: ARRAY
21774: PUSH
21775: LD_INT 2
21777: ARRAY
21778: PPUSH
21779: CALL_OW 546
21783: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21784: LD_VAR 0 8
21788: PUSH
21789: LD_INT 1
21791: ARRAY
21792: PUSH
21793: LD_VAR 0 8
21797: PUSH
21798: LD_INT 2
21800: ARRAY
21801: PUSH
21802: LD_VAR 0 13
21806: PUSH
21807: LD_INT 2
21809: PLUS
21810: GREATER
21811: OR
21812: PUSH
21813: LD_VAR 0 8
21817: PUSH
21818: LD_INT 2
21820: ARRAY
21821: PUSH
21822: LD_VAR 0 13
21826: PUSH
21827: LD_INT 2
21829: MINUS
21830: LESS
21831: OR
21832: PUSH
21833: LD_VAR 0 8
21837: PUSH
21838: LD_INT 3
21840: ARRAY
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 8
21847: PUSH
21848: LD_INT 9
21850: PUSH
21851: LD_INT 10
21853: PUSH
21854: LD_INT 11
21856: PUSH
21857: LD_INT 12
21859: PUSH
21860: LD_INT 13
21862: PUSH
21863: LD_INT 16
21865: PUSH
21866: LD_INT 17
21868: PUSH
21869: LD_INT 18
21871: PUSH
21872: LD_INT 19
21874: PUSH
21875: LD_INT 20
21877: PUSH
21878: LD_INT 21
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: IN
21896: NOT
21897: OR
21898: PUSH
21899: LD_VAR 0 8
21903: PUSH
21904: LD_INT 5
21906: ARRAY
21907: NOT
21908: OR
21909: PUSH
21910: LD_VAR 0 8
21914: PUSH
21915: LD_INT 6
21917: ARRAY
21918: PUSH
21919: LD_INT 1
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: LD_INT 7
21927: PUSH
21928: LD_INT 9
21930: PUSH
21931: LD_INT 10
21933: PUSH
21934: LD_INT 11
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: IN
21945: NOT
21946: OR
21947: IFFALSE 21953
// exit ;
21949: POP
21950: POP
21951: GO 22036
// end ;
21953: GO 21624
21955: POP
21956: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21957: LD_VAR 0 9
21961: PPUSH
21962: LD_VAR 0 3
21966: PPUSH
21967: LD_VAR 0 4
21971: PPUSH
21972: LD_INT 20
21974: PPUSH
21975: CALL 13982 0 4
21979: PUSH
21980: LD_INT 4
21982: ARRAY
21983: IFFALSE 21987
// exit ;
21985: GO 22036
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21987: LD_VAR 0 2
21991: PUSH
21992: LD_INT 29
21994: PUSH
21995: LD_INT 30
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: IN
22002: PUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: LD_VAR 0 4
22012: PPUSH
22013: LD_VAR 0 9
22017: PPUSH
22018: CALL_OW 440
22022: NOT
22023: AND
22024: IFFALSE 22028
// exit ;
22026: GO 22036
// result := true ;
22028: LD_ADDR_VAR 0 6
22032: PUSH
22033: LD_INT 1
22035: ST_TO_ADDR
// end ;
22036: LD_VAR 0 6
22040: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22041: LD_INT 0
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
22049: PPUSH
22050: PPUSH
22051: PPUSH
22052: PPUSH
22053: PPUSH
22054: PPUSH
22055: PPUSH
22056: PPUSH
22057: PPUSH
22058: PPUSH
22059: PPUSH
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
22065: PPUSH
22066: PPUSH
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
22076: PPUSH
22077: PPUSH
22078: PPUSH
22079: PPUSH
22080: PPUSH
22081: PPUSH
22082: PPUSH
22083: PPUSH
22084: PPUSH
22085: PPUSH
22086: PPUSH
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
22091: PPUSH
22092: PPUSH
22093: PPUSH
22094: PPUSH
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
// result = [ ] ;
22101: LD_ADDR_VAR 0 7
22105: PUSH
22106: EMPTY
22107: ST_TO_ADDR
// temp_list = [ ] ;
22108: LD_ADDR_VAR 0 9
22112: PUSH
22113: EMPTY
22114: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22115: LD_VAR 0 4
22119: PUSH
22120: LD_INT 0
22122: PUSH
22123: LD_INT 1
22125: PUSH
22126: LD_INT 2
22128: PUSH
22129: LD_INT 3
22131: PUSH
22132: LD_INT 4
22134: PUSH
22135: LD_INT 5
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: IN
22146: NOT
22147: PUSH
22148: LD_VAR 0 1
22152: PUSH
22153: LD_INT 0
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: IN
22163: PUSH
22164: LD_VAR 0 5
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: LD_INT 3
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: IN
22183: NOT
22184: AND
22185: OR
22186: IFFALSE 22190
// exit ;
22188: GO 40581
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22190: LD_VAR 0 1
22194: PUSH
22195: LD_INT 6
22197: PUSH
22198: LD_INT 7
22200: PUSH
22201: LD_INT 8
22203: PUSH
22204: LD_INT 13
22206: PUSH
22207: LD_INT 12
22209: PUSH
22210: LD_INT 15
22212: PUSH
22213: LD_INT 11
22215: PUSH
22216: LD_INT 14
22218: PUSH
22219: LD_INT 10
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: IN
22233: IFFALSE 22243
// btype = b_lab ;
22235: LD_ADDR_VAR 0 1
22239: PUSH
22240: LD_INT 6
22242: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22243: LD_VAR 0 6
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: LD_INT 2
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: IN
22262: NOT
22263: PUSH
22264: LD_VAR 0 1
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: LD_INT 3
22280: PUSH
22281: LD_INT 6
22283: PUSH
22284: LD_INT 36
22286: PUSH
22287: LD_INT 4
22289: PUSH
22290: LD_INT 5
22292: PUSH
22293: LD_INT 31
22295: PUSH
22296: LD_INT 32
22298: PUSH
22299: LD_INT 33
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: IN
22315: NOT
22316: PUSH
22317: LD_VAR 0 6
22321: PUSH
22322: LD_INT 1
22324: EQUAL
22325: AND
22326: OR
22327: PUSH
22328: LD_VAR 0 1
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: IN
22343: NOT
22344: PUSH
22345: LD_VAR 0 6
22349: PUSH
22350: LD_INT 2
22352: EQUAL
22353: AND
22354: OR
22355: IFFALSE 22365
// mode = 0 ;
22357: LD_ADDR_VAR 0 6
22361: PUSH
22362: LD_INT 0
22364: ST_TO_ADDR
// case mode of 0 :
22365: LD_VAR 0 6
22369: PUSH
22370: LD_INT 0
22372: DOUBLE
22373: EQUAL
22374: IFTRUE 22378
22376: GO 33831
22378: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22379: LD_ADDR_VAR 0 11
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: LD_INT 0
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 1
22437: NEG
22438: PUSH
22439: LD_INT 0
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: NEG
22449: PUSH
22450: LD_INT 1
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: NEG
22461: PUSH
22462: LD_INT 2
22464: NEG
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 0
22472: PUSH
22473: LD_INT 2
22475: NEG
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: LD_INT 1
22486: NEG
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 1
22514: NEG
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: LD_INT 3
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: LD_INT 3
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22572: LD_ADDR_VAR 0 12
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: LD_INT 1
22592: NEG
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: LD_INT 0
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 0
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: LD_INT 0
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 1
22641: NEG
22642: PUSH
22643: LD_INT 1
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: LD_INT 1
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 2
22695: NEG
22696: PUSH
22697: LD_INT 0
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 2
22706: NEG
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 2
22718: NEG
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 3
22729: NEG
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 3
22740: NEG
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22768: LD_ADDR_VAR 0 13
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: LD_INT 1
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: LD_INT 1
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 1
22826: NEG
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: LD_INT 2
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 2
22891: NEG
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 2
22903: NEG
22904: PUSH
22905: LD_INT 2
22907: NEG
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 2
22915: NEG
22916: PUSH
22917: LD_INT 3
22919: NEG
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 3
22927: NEG
22928: PUSH
22929: LD_INT 2
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 3
22939: NEG
22940: PUSH
22941: LD_INT 3
22943: NEG
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22967: LD_ADDR_VAR 0 14
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: LD_INT 1
22987: NEG
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 1
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 1
23025: NEG
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: LD_INT 1
23040: NEG
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: PUSH
23050: LD_INT 2
23052: NEG
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 0
23060: PUSH
23061: LD_INT 2
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 2
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 1
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 3
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: LD_INT 3
23128: NEG
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: LD_INT 2
23139: NEG
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23163: LD_ADDR_VAR 0 15
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 1
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 0
23211: PUSH
23212: LD_INT 1
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 1
23221: NEG
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 2
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 2
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 2
23297: NEG
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: LD_INT 1
23312: NEG
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 3
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 3
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23356: LD_ADDR_VAR 0 16
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 1
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: LD_INT 1
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: LD_INT 2
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: LD_INT 2
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: LD_INT 1
23483: NEG
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 2
23491: NEG
23492: PUSH
23493: LD_INT 2
23495: NEG
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 3
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 3
23513: PUSH
23514: LD_INT 3
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: LD_INT 3
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23549: LD_ADDR_VAR 0 17
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 1
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: NEG
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 2
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: LD_INT 1
23656: NEG
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 2
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: NEG
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: NEG
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 2
23736: NEG
23737: PUSH
23738: LD_INT 1
23740: NEG
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 2
23748: NEG
23749: PUSH
23750: LD_INT 2
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23779: LD_ADDR_VAR 0 18
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: LD_INT 0
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PUSH
23850: LD_INT 1
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PUSH
23862: LD_INT 2
23864: NEG
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 0
23872: PUSH
23873: LD_INT 2
23875: NEG
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 2
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 2
23955: NEG
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: NEG
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 2
23978: NEG
23979: PUSH
23980: LD_INT 2
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24009: LD_ADDR_VAR 0 19
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 0
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 1
24067: NEG
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: NEG
24091: PUSH
24092: LD_INT 2
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 2
24105: NEG
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 2
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 2
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 2
24185: NEG
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: LD_INT 2
24212: NEG
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24239: LD_ADDR_VAR 0 20
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: LD_INT 1
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: LD_INT 2
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: LD_INT 1
24346: NEG
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: NEG
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: NEG
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24469: LD_ADDR_VAR 0 21
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 1
24527: NEG
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: NEG
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 2
24565: NEG
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 2
24645: NEG
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 2
24656: NEG
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: LD_INT 2
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24699: LD_ADDR_VAR 0 22
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: LD_INT 1
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: LD_INT 2
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: LD_INT 2
24795: NEG
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: LD_INT 2
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 2
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 2
24875: NEG
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 2
24886: NEG
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 2
24898: NEG
24899: PUSH
24900: LD_INT 2
24902: NEG
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24929: LD_ADDR_VAR 0 23
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 0
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 2
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 2
25025: NEG
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 2
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 2
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 2
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 0
25084: PUSH
25085: LD_INT 2
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: NEG
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 2
25116: NEG
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 2
25128: NEG
25129: PUSH
25130: LD_INT 2
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: LD_INT 3
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: LD_INT 3
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: LD_INT 2
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25209: LD_ADDR_VAR 0 24
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 1
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 1
25278: NEG
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 1
25290: NEG
25291: PUSH
25292: LD_INT 2
25294: NEG
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: LD_INT 2
25305: NEG
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 2
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 2
25396: NEG
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 2
25408: NEG
25409: PUSH
25410: LD_INT 2
25412: NEG
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: LD_INT 2
25423: NEG
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 3
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 3
25452: PUSH
25453: LD_INT 2
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25485: LD_ADDR_VAR 0 25
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 1
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: LD_INT 2
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: LD_INT 2
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: LD_INT 1
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 2
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 2
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: NEG
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 2
25672: NEG
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: NEG
25685: PUSH
25686: LD_INT 2
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 3
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 3
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: LD_INT 3
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: LD_INT 3
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25759: LD_ADDR_VAR 0 26
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: NEG
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 2
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 2
25935: NEG
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 3
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 3
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 2
26001: NEG
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26035: LD_ADDR_VAR 0 27
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: NEG
26117: PUSH
26118: LD_INT 2
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: LD_INT 2
26131: NEG
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 2
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: LD_INT 2
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: LD_INT 2
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 2
26211: NEG
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 2
26222: NEG
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 2
26234: NEG
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 2
26257: NEG
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 3
26268: NEG
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 3
26280: NEG
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26315: LD_ADDR_VAR 0 28
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 2
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 2
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: LD_INT 3
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: LD_INT 3
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 3
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 3
26562: NEG
26563: PUSH
26564: LD_INT 2
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26597: LD_ADDR_VAR 0 29
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: LD_INT 2
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: LD_INT 2
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: LD_INT 1
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 2
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: NEG
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: NEG
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: LD_INT 3
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 2
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 3
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 3
26841: NEG
26842: PUSH
26843: LD_INT 2
26845: NEG
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26876: LD_ADDR_VAR 0 30
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: LD_INT 1
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: LD_INT 2
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 2
26972: NEG
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 2
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 2
27042: NEG
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 2
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: LD_INT 3
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 2
27098: PUSH
27099: LD_INT 3
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 2
27108: NEG
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 3
27119: NEG
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27154: LD_ADDR_VAR 0 31
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 2
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 2
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 2
27331: NEG
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: LD_INT 3
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 3
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 3
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 3
27397: NEG
27398: PUSH
27399: LD_INT 2
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27432: LD_ADDR_VAR 0 32
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 1
27452: NEG
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 2
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 2
27598: NEG
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 2
27609: NEG
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: LD_INT 3
27625: NEG
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 3
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: LD_INT 3
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 3
27675: NEG
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27710: LD_ADDR_VAR 0 33
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 2
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 2
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 2
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 2
27876: NEG
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 2
27888: NEG
27889: PUSH
27890: LD_INT 2
27892: NEG
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 2
27900: NEG
27901: PUSH
27902: LD_INT 3
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 3
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 3
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 3
27954: NEG
27955: PUSH
27956: LD_INT 2
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27989: LD_ADDR_VAR 0 34
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 1
28058: NEG
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: LD_INT 2
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 2
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: LD_INT 2
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 2
28145: NEG
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 2
28156: NEG
28157: PUSH
28158: LD_INT 1
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 2
28168: NEG
28169: PUSH
28170: LD_INT 2
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: LD_INT 3
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 2
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 3
28203: PUSH
28204: LD_INT 2
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: LD_INT 3
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 3
28234: NEG
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28269: LD_ADDR_VAR 0 35
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 2
28360: NEG
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28381: LD_ADDR_VAR 0 36
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: NEG
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: LD_INT 2
28466: NEG
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28493: LD_ADDR_VAR 0 37
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: LD_INT 1
28513: NEG
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28605: LD_ADDR_VAR 0 38
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: NEG
28675: PUSH
28676: LD_INT 1
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 2
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 2
28696: NEG
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28717: LD_ADDR_VAR 0 39
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: LD_INT 0
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: LD_INT 2
28802: NEG
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: LD_INT 2
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28829: LD_ADDR_VAR 0 40
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: LD_INT 1
28849: NEG
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28941: LD_ADDR_VAR 0 41
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: LD_INT 1
29014: NEG
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 2
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 2
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: LD_INT 2
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 2
29096: NEG
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 2
29107: NEG
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 2
29119: NEG
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: NEG
29132: PUSH
29133: LD_INT 3
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 3
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 3
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 3
29184: PUSH
29185: LD_INT 3
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 3
29215: NEG
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 3
29226: NEG
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 3
29238: NEG
29239: PUSH
29240: LD_INT 2
29242: NEG
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 3
29250: NEG
29251: PUSH
29252: LD_INT 3
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29291: LD_ADDR_VAR 0 42
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: NEG
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: LD_INT 2
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 2
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: NEG
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: LD_INT 3
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 3
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 3
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: LD_INT 3
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: LD_INT 3
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 3
29588: NEG
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: LD_INT 3
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29641: LD_ADDR_VAR 0 43
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: LD_INT 1
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 1
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: LD_INT 2
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 2
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: NEG
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 3
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 2
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 3
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 3
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: LD_INT 3
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: LD_INT 3
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: NEG
29916: PUSH
29917: LD_INT 2
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 2
29926: NEG
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 3
29937: NEG
29938: PUSH
29939: LD_INT 0
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 3
29948: NEG
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29989: LD_ADDR_VAR 0 44
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 2
30144: NEG
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 2
30155: NEG
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 2
30167: NEG
30168: PUSH
30169: LD_INT 2
30171: NEG
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 2
30179: NEG
30180: PUSH
30181: LD_INT 3
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 2
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 3
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 3
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: LD_INT 3
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 3
30263: NEG
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 3
30274: NEG
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 3
30286: NEG
30287: PUSH
30288: LD_INT 2
30290: NEG
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 3
30298: NEG
30299: PUSH
30300: LD_INT 3
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30339: LD_ADDR_VAR 0 45
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 2
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: LD_INT 3
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: LD_INT 3
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: PUSH
30565: LD_INT 2
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 3
30575: PUSH
30576: LD_INT 2
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: LD_INT 3
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 3
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: LD_INT 3
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: LD_INT 2
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 3
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30689: LD_ADDR_VAR 0 46
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 1
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: NEG
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: LD_INT 1
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 2
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: LD_INT 1
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 2
30855: NEG
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: LD_INT 3
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: LD_INT 3
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: LD_INT 2
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: LD_INT 3
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: LD_INT 3
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: NEG
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 3
30985: NEG
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 3
30996: NEG
30997: PUSH
30998: LD_INT 1
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31037: LD_ADDR_VAR 0 47
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 0
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: LD_INT 2
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: LD_INT 2
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31188: LD_ADDR_VAR 0 48
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: LD_INT 2
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31335: LD_ADDR_VAR 0 49
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 2
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 2
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: LD_INT 2
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31479: LD_ADDR_VAR 0 50
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: LD_INT 1
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 1
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31623: LD_ADDR_VAR 0 51
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31770: LD_ADDR_VAR 0 52
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: LD_INT 1
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: LD_INT 2
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 1
31863: NEG
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 2
31874: NEG
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 2
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31921: LD_ADDR_VAR 0 53
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 2
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32151: LD_ADDR_VAR 0 54
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 2
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 2
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32381: LD_ADDR_VAR 0 55
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: LD_INT 2
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 2
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: LD_INT 1
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: NEG
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: NEG
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32611: LD_ADDR_VAR 0 56
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: NEG
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: NEG
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 2
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 2
32798: NEG
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32841: LD_ADDR_VAR 0 57
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: LD_INT 2
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33071: LD_ADDR_VAR 0 58
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: LD_INT 2
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: LD_INT 2
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: LD_INT 2
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 2
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: NEG
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33301: LD_ADDR_VAR 0 59
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: NEG
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: NEG
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33389: LD_ADDR_VAR 0 60
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 1
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: NEG
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33477: LD_ADDR_VAR 0 61
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 1
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33565: LD_ADDR_VAR 0 62
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: NEG
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33653: LD_ADDR_VAR 0 63
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 1
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33741: LD_ADDR_VAR 0 64
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: NEG
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: ST_TO_ADDR
// end ; 1 :
33829: GO 39726
33831: LD_INT 1
33833: DOUBLE
33834: EQUAL
33835: IFTRUE 33839
33837: GO 36462
33839: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33840: LD_ADDR_VAR 0 11
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: LD_INT 3
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: LD_INT 2
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33884: LD_ADDR_VAR 0 12
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 1
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 3
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33925: LD_ADDR_VAR 0 13
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 3
33942: PUSH
33943: LD_INT 3
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: LD_INT 3
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33965: LD_ADDR_VAR 0 14
33969: PUSH
33970: LD_INT 1
33972: PUSH
33973: LD_INT 3
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 3
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34006: LD_ADDR_VAR 0 15
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 3
34024: NEG
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 3
34035: NEG
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34050: LD_ADDR_VAR 0 16
34054: PUSH
34055: LD_INT 2
34057: NEG
34058: PUSH
34059: LD_INT 3
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 3
34069: NEG
34070: PUSH
34071: LD_INT 2
34073: NEG
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 3
34081: NEG
34082: PUSH
34083: LD_INT 3
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: LIST
34095: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34096: LD_ADDR_VAR 0 17
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: LD_INT 3
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: LD_INT 3
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34140: LD_ADDR_VAR 0 18
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 3
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 3
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34181: LD_ADDR_VAR 0 19
34185: PUSH
34186: LD_INT 3
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 3
34198: PUSH
34199: LD_INT 3
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: LD_INT 3
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34221: LD_ADDR_VAR 0 20
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: LD_INT 3
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: LD_INT 3
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 1
34248: NEG
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34262: LD_ADDR_VAR 0 21
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 3
34280: NEG
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 3
34291: NEG
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34306: LD_ADDR_VAR 0 22
34310: PUSH
34311: LD_INT 2
34313: NEG
34314: PUSH
34315: LD_INT 3
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 3
34325: NEG
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 3
34337: NEG
34338: PUSH
34339: LD_INT 3
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34352: LD_ADDR_VAR 0 23
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 3
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: LD_INT 4
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 3
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: LIST
34395: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34396: LD_ADDR_VAR 0 24
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 3
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 4
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34437: LD_ADDR_VAR 0 25
34441: PUSH
34442: LD_INT 3
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 4
34454: PUSH
34455: LD_INT 3
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: LIST
34476: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34477: LD_ADDR_VAR 0 26
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 3
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 4
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: LD_INT 3
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34518: LD_ADDR_VAR 0 27
34522: PUSH
34523: LD_INT 3
34525: NEG
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 3
34536: NEG
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 4
34547: NEG
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34562: LD_ADDR_VAR 0 28
34566: PUSH
34567: LD_INT 3
34569: NEG
34570: PUSH
34571: LD_INT 3
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 3
34581: NEG
34582: PUSH
34583: LD_INT 4
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 4
34593: NEG
34594: PUSH
34595: LD_INT 3
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: LIST
34607: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34608: LD_ADDR_VAR 0 29
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: LD_INT 3
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 3
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: LD_INT 4
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 0
34661: PUSH
34662: LD_INT 4
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 3
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: LD_INT 5
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 5
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 4
34709: NEG
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 6
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 6
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 5
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34763: LD_ADDR_VAR 0 30
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 3
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 3
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 4
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 4
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 4
34832: PUSH
34833: LD_INT 1
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 5
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 5
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 5
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 6
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 6
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34906: LD_ADDR_VAR 0 31
34910: PUSH
34911: LD_INT 3
34913: PUSH
34914: LD_INT 2
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 3
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 4
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 4
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 5
34973: PUSH
34974: LD_INT 4
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 5
34983: PUSH
34984: LD_INT 5
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 4
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 6
35003: PUSH
35004: LD_INT 5
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 6
35013: PUSH
35014: LD_INT 6
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 5
35023: PUSH
35024: LD_INT 6
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35045: LD_ADDR_VAR 0 32
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 1
35072: NEG
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: LD_INT 4
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 4
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: LD_INT 3
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 5
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 5
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: LD_INT 4
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 6
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 6
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: LD_INT 5
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35188: LD_ADDR_VAR 0 33
35192: PUSH
35193: LD_INT 2
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 3
35206: NEG
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 3
35217: NEG
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 3
35229: NEG
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 4
35240: NEG
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 4
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 4
35263: NEG
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 5
35274: NEG
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 5
35285: NEG
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 5
35297: NEG
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 6
35308: NEG
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 6
35319: NEG
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35343: LD_ADDR_VAR 0 34
35347: PUSH
35348: LD_INT 2
35350: NEG
35351: PUSH
35352: LD_INT 3
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 3
35362: NEG
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 3
35374: NEG
35375: PUSH
35376: LD_INT 3
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 3
35386: NEG
35387: PUSH
35388: LD_INT 4
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 4
35398: NEG
35399: PUSH
35400: LD_INT 3
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 4
35410: NEG
35411: PUSH
35412: LD_INT 4
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 4
35422: NEG
35423: PUSH
35424: LD_INT 5
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 5
35434: NEG
35435: PUSH
35436: LD_INT 4
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 5
35446: NEG
35447: PUSH
35448: LD_INT 5
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 5
35458: NEG
35459: PUSH
35460: LD_INT 6
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 6
35470: NEG
35471: PUSH
35472: LD_INT 5
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 6
35482: NEG
35483: PUSH
35484: LD_INT 6
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35506: LD_ADDR_VAR 0 41
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 2
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: LD_INT 3
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: LD_INT 2
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35550: LD_ADDR_VAR 0 42
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 3
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: LIST
35590: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35591: LD_ADDR_VAR 0 43
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 3
35608: PUSH
35609: LD_INT 2
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 3
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35631: LD_ADDR_VAR 0 44
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 3
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 2
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35672: LD_ADDR_VAR 0 45
35676: PUSH
35677: LD_INT 2
35679: NEG
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 3
35701: NEG
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35716: LD_ADDR_VAR 0 46
35720: PUSH
35721: LD_INT 2
35723: NEG
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: NEG
35736: PUSH
35737: LD_INT 3
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 3
35747: NEG
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35762: LD_ADDR_VAR 0 47
35766: PUSH
35767: LD_INT 2
35769: NEG
35770: PUSH
35771: LD_INT 3
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 3
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35795: LD_ADDR_VAR 0 48
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35826: LD_ADDR_VAR 0 49
35830: PUSH
35831: LD_INT 3
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: LD_INT 2
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35855: LD_ADDR_VAR 0 50
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: LD_INT 3
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: LD_INT 3
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35884: LD_ADDR_VAR 0 51
35888: PUSH
35889: LD_INT 1
35891: NEG
35892: PUSH
35893: LD_INT 2
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 2
35902: NEG
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35915: LD_ADDR_VAR 0 52
35919: PUSH
35920: LD_INT 3
35922: NEG
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 3
35934: NEG
35935: PUSH
35936: LD_INT 2
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35948: LD_ADDR_VAR 0 53
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: LD_INT 3
35959: NEG
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 3
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: LD_INT 2
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: LIST
35991: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35992: LD_ADDR_VAR 0 54
35996: PUSH
35997: LD_INT 2
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 3
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 3
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: LIST
36032: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36033: LD_ADDR_VAR 0 55
36037: PUSH
36038: LD_INT 3
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 3
36050: PUSH
36051: LD_INT 3
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: LD_INT 3
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36073: LD_ADDR_VAR 0 56
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: LD_INT 3
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: LD_INT 3
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36114: LD_ADDR_VAR 0 57
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 3
36132: NEG
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 3
36143: NEG
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36158: LD_ADDR_VAR 0 58
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: LD_INT 3
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 3
36177: NEG
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 3
36189: NEG
36190: PUSH
36191: LD_INT 3
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: LIST
36203: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36204: LD_ADDR_VAR 0 59
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: LD_INT 2
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 1
36237: NEG
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36248: LD_ADDR_VAR 0 60
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36289: LD_ADDR_VAR 0 61
36293: PUSH
36294: LD_INT 2
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36329: LD_ADDR_VAR 0 62
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36370: LD_ADDR_VAR 0 63
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36414: LD_ADDR_VAR 0 64
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: NEG
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: LIST
36459: ST_TO_ADDR
// end ; 2 :
36460: GO 39726
36462: LD_INT 2
36464: DOUBLE
36465: EQUAL
36466: IFTRUE 36470
36468: GO 39725
36470: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36471: LD_ADDR_VAR 0 29
36475: PUSH
36476: LD_INT 4
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 4
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 5
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 5
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 4
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 3
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 3
36539: PUSH
36540: LD_INT 1
36542: NEG
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 3
36550: PUSH
36551: LD_INT 2
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 5
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 3
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 3
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 4
36591: PUSH
36592: LD_INT 3
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 4
36601: PUSH
36602: LD_INT 4
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 3
36611: PUSH
36612: LD_INT 4
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 3
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 4
36641: PUSH
36642: LD_INT 2
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: LD_INT 4
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 4
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 3
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: PUSH
36682: LD_INT 4
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: LD_INT 5
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 5
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: LD_INT 4
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: LD_INT 3
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 2
36733: PUSH
36734: LD_INT 5
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 2
36743: NEG
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 3
36754: NEG
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 3
36765: NEG
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 2
36788: NEG
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 3
36799: NEG
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 4
36810: NEG
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 4
36821: NEG
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 4
36833: NEG
36834: PUSH
36835: LD_INT 2
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 4
36856: NEG
36857: PUSH
36858: LD_INT 4
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 4
36868: NEG
36869: PUSH
36870: LD_INT 5
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 3
36880: NEG
36881: PUSH
36882: LD_INT 4
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 3
36892: NEG
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 4
36904: NEG
36905: PUSH
36906: LD_INT 3
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 5
36916: NEG
36917: PUSH
36918: LD_INT 4
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 5
36928: NEG
36929: PUSH
36930: LD_INT 5
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 3
36940: NEG
36941: PUSH
36942: LD_INT 5
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 5
36952: NEG
36953: PUSH
36954: LD_INT 3
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37009: LD_ADDR_VAR 0 30
37013: PUSH
37014: LD_INT 4
37016: PUSH
37017: LD_INT 4
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 4
37026: PUSH
37027: LD_INT 3
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 5
37036: PUSH
37037: LD_INT 4
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 5
37046: PUSH
37047: LD_INT 5
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 4
37056: PUSH
37057: LD_INT 5
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 3
37066: PUSH
37067: LD_INT 4
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 3
37076: PUSH
37077: LD_INT 3
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 5
37086: PUSH
37087: LD_INT 3
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: LD_INT 5
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: LD_INT 3
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: LD_INT 2
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: LD_INT 3
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: LD_INT 4
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: LD_INT 4
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: LD_INT 3
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: LD_INT 4
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: NEG
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 4
37199: NEG
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 4
37210: NEG
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 3
37222: NEG
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 3
37233: NEG
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 4
37244: NEG
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 5
37255: NEG
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 5
37266: NEG
37267: PUSH
37268: LD_INT 1
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 5
37278: NEG
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 3
37290: NEG
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 3
37301: NEG
37302: PUSH
37303: LD_INT 3
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 3
37313: NEG
37314: PUSH
37315: LD_INT 4
37317: NEG
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PUSH
37327: LD_INT 3
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: LD_INT 2
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 3
37349: NEG
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 4
37361: NEG
37362: PUSH
37363: LD_INT 3
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 4
37373: NEG
37374: PUSH
37375: LD_INT 4
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: LD_INT 4
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 4
37397: NEG
37398: PUSH
37399: LD_INT 2
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 4
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: LD_INT 5
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: LD_INT 4
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 3
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 3
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 4
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: LD_INT 5
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: LD_INT 3
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 2
37499: NEG
37500: PUSH
37501: LD_INT 5
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37556: LD_ADDR_VAR 0 31
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: LD_INT 4
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 4
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 5
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 5
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 4
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 3
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 5
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 2
37645: NEG
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 3
37656: NEG
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 3
37667: NEG
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: NEG
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 3
37701: NEG
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 4
37712: NEG
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 4
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 4
37735: NEG
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 2
37747: NEG
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 4
37758: NEG
37759: PUSH
37760: LD_INT 4
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 4
37770: NEG
37771: PUSH
37772: LD_INT 5
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: LD_INT 4
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 3
37794: NEG
37795: PUSH
37796: LD_INT 3
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 4
37806: NEG
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 5
37818: NEG
37819: PUSH
37820: LD_INT 4
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 5
37830: NEG
37831: PUSH
37832: LD_INT 5
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 3
37842: NEG
37843: PUSH
37844: LD_INT 5
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 5
37854: NEG
37855: PUSH
37856: LD_INT 3
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: LD_INT 3
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: LD_INT 4
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: LD_INT 3
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 2
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: LD_INT 3
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: LD_INT 4
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: LD_INT 4
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 4
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 4
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 5
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 5
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 4
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 3
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 3
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 5
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38106: LD_ADDR_VAR 0 32
38110: PUSH
38111: LD_INT 4
38113: NEG
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 4
38124: NEG
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 3
38136: NEG
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 3
38147: NEG
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 4
38158: NEG
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 5
38169: NEG
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 5
38180: NEG
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 5
38192: NEG
38193: PUSH
38194: LD_INT 2
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 3
38204: NEG
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: LD_INT 3
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 3
38227: NEG
38228: PUSH
38229: LD_INT 4
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: LD_INT 3
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 3
38263: NEG
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 4
38275: NEG
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 4
38287: NEG
38288: PUSH
38289: LD_INT 4
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: NEG
38300: PUSH
38301: LD_INT 4
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 4
38311: NEG
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 4
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 5
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: LD_INT 4
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: LD_INT 3
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: LD_INT 3
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: LD_INT 4
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: LD_INT 5
38394: NEG
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: LD_INT 3
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: LD_INT 5
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 4
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 4
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 2
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 4
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 4
38518: PUSH
38519: LD_INT 4
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 4
38528: PUSH
38529: LD_INT 3
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 5
38538: PUSH
38539: LD_INT 4
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 5
38548: PUSH
38549: LD_INT 5
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 4
38558: PUSH
38559: LD_INT 5
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: PUSH
38569: LD_INT 4
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 3
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 5
38588: PUSH
38589: LD_INT 3
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 3
38598: PUSH
38599: LD_INT 5
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38653: LD_ADDR_VAR 0 33
38657: PUSH
38658: LD_INT 4
38660: NEG
38661: PUSH
38662: LD_INT 4
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 4
38672: NEG
38673: PUSH
38674: LD_INT 5
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: LD_INT 4
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 3
38696: NEG
38697: PUSH
38698: LD_INT 3
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 4
38708: NEG
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 5
38720: NEG
38721: PUSH
38722: LD_INT 4
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 5
38732: NEG
38733: PUSH
38734: LD_INT 5
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 3
38744: NEG
38745: PUSH
38746: LD_INT 5
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 5
38756: NEG
38757: PUSH
38758: LD_INT 3
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: LD_INT 3
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 4
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 3
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 2
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 3
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 4
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: LD_INT 4
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 4
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 4
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 5
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 5
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 4
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 3
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 5
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: LD_INT 3
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 3
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 4
38983: PUSH
38984: LD_INT 3
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 4
38993: PUSH
38994: LD_INT 4
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: LD_INT 4
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 4
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 2
39043: PUSH
39044: LD_INT 4
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: LD_INT 4
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 3
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 4
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: LD_INT 5
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: LD_INT 5
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 4
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 3
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: LD_INT 5
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 3
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39191: LD_ADDR_VAR 0 34
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 4
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 5
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 4
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: LD_INT 3
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 3
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 4
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 5
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: LD_INT 3
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: LD_INT 5
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 3
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 4
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 4
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 3
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 4
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 4
39393: PUSH
39394: LD_INT 4
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 4
39403: PUSH
39404: LD_INT 3
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 5
39413: PUSH
39414: LD_INT 4
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 5
39423: PUSH
39424: LD_INT 5
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 4
39433: PUSH
39434: LD_INT 5
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: LD_INT 4
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 3
39453: PUSH
39454: LD_INT 3
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 5
39463: PUSH
39464: LD_INT 3
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 3
39473: PUSH
39474: LD_INT 5
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 3
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: LD_INT 3
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: LD_INT 4
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: LD_INT 4
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: LD_INT 3
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 4
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: NEG
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 4
39576: NEG
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 4
39587: NEG
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 3
39599: NEG
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 3
39610: NEG
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 4
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 5
39632: NEG
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 5
39643: NEG
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 5
39655: NEG
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 3
39667: NEG
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: ST_TO_ADDR
// end ; end ;
39723: GO 39726
39725: POP
// case btype of b_depot , b_warehouse :
39726: LD_VAR 0 1
39730: PUSH
39731: LD_INT 0
39733: DOUBLE
39734: EQUAL
39735: IFTRUE 39745
39737: LD_INT 1
39739: DOUBLE
39740: EQUAL
39741: IFTRUE 39745
39743: GO 39946
39745: POP
// case nation of nation_american :
39746: LD_VAR 0 5
39750: PUSH
39751: LD_INT 1
39753: DOUBLE
39754: EQUAL
39755: IFTRUE 39759
39757: GO 39815
39759: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39760: LD_ADDR_VAR 0 9
39764: PUSH
39765: LD_VAR 0 11
39769: PUSH
39770: LD_VAR 0 12
39774: PUSH
39775: LD_VAR 0 13
39779: PUSH
39780: LD_VAR 0 14
39784: PUSH
39785: LD_VAR 0 15
39789: PUSH
39790: LD_VAR 0 16
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: PUSH
39803: LD_VAR 0 4
39807: PUSH
39808: LD_INT 1
39810: PLUS
39811: ARRAY
39812: ST_TO_ADDR
39813: GO 39944
39815: LD_INT 2
39817: DOUBLE
39818: EQUAL
39819: IFTRUE 39823
39821: GO 39879
39823: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39824: LD_ADDR_VAR 0 9
39828: PUSH
39829: LD_VAR 0 17
39833: PUSH
39834: LD_VAR 0 18
39838: PUSH
39839: LD_VAR 0 19
39843: PUSH
39844: LD_VAR 0 20
39848: PUSH
39849: LD_VAR 0 21
39853: PUSH
39854: LD_VAR 0 22
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: PUSH
39867: LD_VAR 0 4
39871: PUSH
39872: LD_INT 1
39874: PLUS
39875: ARRAY
39876: ST_TO_ADDR
39877: GO 39944
39879: LD_INT 3
39881: DOUBLE
39882: EQUAL
39883: IFTRUE 39887
39885: GO 39943
39887: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39888: LD_ADDR_VAR 0 9
39892: PUSH
39893: LD_VAR 0 23
39897: PUSH
39898: LD_VAR 0 24
39902: PUSH
39903: LD_VAR 0 25
39907: PUSH
39908: LD_VAR 0 26
39912: PUSH
39913: LD_VAR 0 27
39917: PUSH
39918: LD_VAR 0 28
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: PUSH
39931: LD_VAR 0 4
39935: PUSH
39936: LD_INT 1
39938: PLUS
39939: ARRAY
39940: ST_TO_ADDR
39941: GO 39944
39943: POP
39944: GO 40499
39946: LD_INT 2
39948: DOUBLE
39949: EQUAL
39950: IFTRUE 39960
39952: LD_INT 3
39954: DOUBLE
39955: EQUAL
39956: IFTRUE 39960
39958: GO 40016
39960: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39961: LD_ADDR_VAR 0 9
39965: PUSH
39966: LD_VAR 0 29
39970: PUSH
39971: LD_VAR 0 30
39975: PUSH
39976: LD_VAR 0 31
39980: PUSH
39981: LD_VAR 0 32
39985: PUSH
39986: LD_VAR 0 33
39990: PUSH
39991: LD_VAR 0 34
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: PUSH
40004: LD_VAR 0 4
40008: PUSH
40009: LD_INT 1
40011: PLUS
40012: ARRAY
40013: ST_TO_ADDR
40014: GO 40499
40016: LD_INT 16
40018: DOUBLE
40019: EQUAL
40020: IFTRUE 40078
40022: LD_INT 17
40024: DOUBLE
40025: EQUAL
40026: IFTRUE 40078
40028: LD_INT 18
40030: DOUBLE
40031: EQUAL
40032: IFTRUE 40078
40034: LD_INT 19
40036: DOUBLE
40037: EQUAL
40038: IFTRUE 40078
40040: LD_INT 22
40042: DOUBLE
40043: EQUAL
40044: IFTRUE 40078
40046: LD_INT 20
40048: DOUBLE
40049: EQUAL
40050: IFTRUE 40078
40052: LD_INT 21
40054: DOUBLE
40055: EQUAL
40056: IFTRUE 40078
40058: LD_INT 23
40060: DOUBLE
40061: EQUAL
40062: IFTRUE 40078
40064: LD_INT 24
40066: DOUBLE
40067: EQUAL
40068: IFTRUE 40078
40070: LD_INT 25
40072: DOUBLE
40073: EQUAL
40074: IFTRUE 40078
40076: GO 40134
40078: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40079: LD_ADDR_VAR 0 9
40083: PUSH
40084: LD_VAR 0 35
40088: PUSH
40089: LD_VAR 0 36
40093: PUSH
40094: LD_VAR 0 37
40098: PUSH
40099: LD_VAR 0 38
40103: PUSH
40104: LD_VAR 0 39
40108: PUSH
40109: LD_VAR 0 40
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: LD_VAR 0 4
40126: PUSH
40127: LD_INT 1
40129: PLUS
40130: ARRAY
40131: ST_TO_ADDR
40132: GO 40499
40134: LD_INT 6
40136: DOUBLE
40137: EQUAL
40138: IFTRUE 40190
40140: LD_INT 7
40142: DOUBLE
40143: EQUAL
40144: IFTRUE 40190
40146: LD_INT 8
40148: DOUBLE
40149: EQUAL
40150: IFTRUE 40190
40152: LD_INT 13
40154: DOUBLE
40155: EQUAL
40156: IFTRUE 40190
40158: LD_INT 12
40160: DOUBLE
40161: EQUAL
40162: IFTRUE 40190
40164: LD_INT 15
40166: DOUBLE
40167: EQUAL
40168: IFTRUE 40190
40170: LD_INT 11
40172: DOUBLE
40173: EQUAL
40174: IFTRUE 40190
40176: LD_INT 14
40178: DOUBLE
40179: EQUAL
40180: IFTRUE 40190
40182: LD_INT 10
40184: DOUBLE
40185: EQUAL
40186: IFTRUE 40190
40188: GO 40246
40190: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40191: LD_ADDR_VAR 0 9
40195: PUSH
40196: LD_VAR 0 41
40200: PUSH
40201: LD_VAR 0 42
40205: PUSH
40206: LD_VAR 0 43
40210: PUSH
40211: LD_VAR 0 44
40215: PUSH
40216: LD_VAR 0 45
40220: PUSH
40221: LD_VAR 0 46
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: PUSH
40234: LD_VAR 0 4
40238: PUSH
40239: LD_INT 1
40241: PLUS
40242: ARRAY
40243: ST_TO_ADDR
40244: GO 40499
40246: LD_INT 36
40248: DOUBLE
40249: EQUAL
40250: IFTRUE 40254
40252: GO 40310
40254: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40255: LD_ADDR_VAR 0 9
40259: PUSH
40260: LD_VAR 0 47
40264: PUSH
40265: LD_VAR 0 48
40269: PUSH
40270: LD_VAR 0 49
40274: PUSH
40275: LD_VAR 0 50
40279: PUSH
40280: LD_VAR 0 51
40284: PUSH
40285: LD_VAR 0 52
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: PUSH
40298: LD_VAR 0 4
40302: PUSH
40303: LD_INT 1
40305: PLUS
40306: ARRAY
40307: ST_TO_ADDR
40308: GO 40499
40310: LD_INT 4
40312: DOUBLE
40313: EQUAL
40314: IFTRUE 40336
40316: LD_INT 5
40318: DOUBLE
40319: EQUAL
40320: IFTRUE 40336
40322: LD_INT 34
40324: DOUBLE
40325: EQUAL
40326: IFTRUE 40336
40328: LD_INT 37
40330: DOUBLE
40331: EQUAL
40332: IFTRUE 40336
40334: GO 40392
40336: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40337: LD_ADDR_VAR 0 9
40341: PUSH
40342: LD_VAR 0 53
40346: PUSH
40347: LD_VAR 0 54
40351: PUSH
40352: LD_VAR 0 55
40356: PUSH
40357: LD_VAR 0 56
40361: PUSH
40362: LD_VAR 0 57
40366: PUSH
40367: LD_VAR 0 58
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: PUSH
40380: LD_VAR 0 4
40384: PUSH
40385: LD_INT 1
40387: PLUS
40388: ARRAY
40389: ST_TO_ADDR
40390: GO 40499
40392: LD_INT 31
40394: DOUBLE
40395: EQUAL
40396: IFTRUE 40442
40398: LD_INT 32
40400: DOUBLE
40401: EQUAL
40402: IFTRUE 40442
40404: LD_INT 33
40406: DOUBLE
40407: EQUAL
40408: IFTRUE 40442
40410: LD_INT 27
40412: DOUBLE
40413: EQUAL
40414: IFTRUE 40442
40416: LD_INT 26
40418: DOUBLE
40419: EQUAL
40420: IFTRUE 40442
40422: LD_INT 28
40424: DOUBLE
40425: EQUAL
40426: IFTRUE 40442
40428: LD_INT 29
40430: DOUBLE
40431: EQUAL
40432: IFTRUE 40442
40434: LD_INT 30
40436: DOUBLE
40437: EQUAL
40438: IFTRUE 40442
40440: GO 40498
40442: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40443: LD_ADDR_VAR 0 9
40447: PUSH
40448: LD_VAR 0 59
40452: PUSH
40453: LD_VAR 0 60
40457: PUSH
40458: LD_VAR 0 61
40462: PUSH
40463: LD_VAR 0 62
40467: PUSH
40468: LD_VAR 0 63
40472: PUSH
40473: LD_VAR 0 64
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: PUSH
40486: LD_VAR 0 4
40490: PUSH
40491: LD_INT 1
40493: PLUS
40494: ARRAY
40495: ST_TO_ADDR
40496: GO 40499
40498: POP
// temp_list2 = [ ] ;
40499: LD_ADDR_VAR 0 10
40503: PUSH
40504: EMPTY
40505: ST_TO_ADDR
// for i in temp_list do
40506: LD_ADDR_VAR 0 8
40510: PUSH
40511: LD_VAR 0 9
40515: PUSH
40516: FOR_IN
40517: IFFALSE 40569
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40519: LD_ADDR_VAR 0 10
40523: PUSH
40524: LD_VAR 0 10
40528: PUSH
40529: LD_VAR 0 8
40533: PUSH
40534: LD_INT 1
40536: ARRAY
40537: PUSH
40538: LD_VAR 0 2
40542: PLUS
40543: PUSH
40544: LD_VAR 0 8
40548: PUSH
40549: LD_INT 2
40551: ARRAY
40552: PUSH
40553: LD_VAR 0 3
40557: PLUS
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: EMPTY
40564: LIST
40565: ADD
40566: ST_TO_ADDR
40567: GO 40516
40569: POP
40570: POP
// result = temp_list2 ;
40571: LD_ADDR_VAR 0 7
40575: PUSH
40576: LD_VAR 0 10
40580: ST_TO_ADDR
// end ;
40581: LD_VAR 0 7
40585: RET
// export function EnemyInRange ( unit , dist ) ; begin
40586: LD_INT 0
40588: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40589: LD_ADDR_VAR 0 3
40593: PUSH
40594: LD_VAR 0 1
40598: PPUSH
40599: CALL_OW 255
40603: PPUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: CALL_OW 250
40613: PPUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: CALL_OW 251
40623: PPUSH
40624: LD_VAR 0 2
40628: PPUSH
40629: CALL 13982 0 4
40633: PUSH
40634: LD_INT 4
40636: ARRAY
40637: ST_TO_ADDR
// end ;
40638: LD_VAR 0 3
40642: RET
// export function PlayerSeeMe ( unit ) ; begin
40643: LD_INT 0
40645: PPUSH
// result := See ( your_side , unit ) ;
40646: LD_ADDR_VAR 0 2
40650: PUSH
40651: LD_OWVAR 2
40655: PPUSH
40656: LD_VAR 0 1
40660: PPUSH
40661: CALL_OW 292
40665: ST_TO_ADDR
// end ;
40666: LD_VAR 0 2
40670: RET
// export function ReverseDir ( unit ) ; begin
40671: LD_INT 0
40673: PPUSH
// if not unit then
40674: LD_VAR 0 1
40678: NOT
40679: IFFALSE 40683
// exit ;
40681: GO 40706
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40683: LD_ADDR_VAR 0 2
40687: PUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 254
40697: PUSH
40698: LD_INT 3
40700: PLUS
40701: PUSH
40702: LD_INT 6
40704: MOD
40705: ST_TO_ADDR
// end ;
40706: LD_VAR 0 2
40710: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
// if not unit or not hexes then
40719: LD_VAR 0 1
40723: NOT
40724: PUSH
40725: LD_VAR 0 2
40729: NOT
40730: OR
40731: IFFALSE 40735
// exit ;
40733: GO 40858
// dist := 9999 ;
40735: LD_ADDR_VAR 0 5
40739: PUSH
40740: LD_INT 9999
40742: ST_TO_ADDR
// for i = 1 to hexes do
40743: LD_ADDR_VAR 0 4
40747: PUSH
40748: DOUBLE
40749: LD_INT 1
40751: DEC
40752: ST_TO_ADDR
40753: LD_VAR 0 2
40757: PUSH
40758: FOR_TO
40759: IFFALSE 40846
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40761: LD_ADDR_VAR 0 6
40765: PUSH
40766: LD_VAR 0 1
40770: PPUSH
40771: LD_VAR 0 2
40775: PUSH
40776: LD_VAR 0 4
40780: ARRAY
40781: PUSH
40782: LD_INT 1
40784: ARRAY
40785: PPUSH
40786: LD_VAR 0 2
40790: PUSH
40791: LD_VAR 0 4
40795: ARRAY
40796: PUSH
40797: LD_INT 2
40799: ARRAY
40800: PPUSH
40801: CALL_OW 297
40805: ST_TO_ADDR
// if tdist < dist then
40806: LD_VAR 0 6
40810: PUSH
40811: LD_VAR 0 5
40815: LESS
40816: IFFALSE 40844
// begin hex := hexes [ i ] ;
40818: LD_ADDR_VAR 0 8
40822: PUSH
40823: LD_VAR 0 2
40827: PUSH
40828: LD_VAR 0 4
40832: ARRAY
40833: ST_TO_ADDR
// dist := tdist ;
40834: LD_ADDR_VAR 0 5
40838: PUSH
40839: LD_VAR 0 6
40843: ST_TO_ADDR
// end ; end ;
40844: GO 40758
40846: POP
40847: POP
// result := hex ;
40848: LD_ADDR_VAR 0 3
40852: PUSH
40853: LD_VAR 0 8
40857: ST_TO_ADDR
// end ;
40858: LD_VAR 0 3
40862: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40863: LD_INT 0
40865: PPUSH
40866: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40867: LD_VAR 0 1
40871: NOT
40872: PUSH
40873: LD_VAR 0 1
40877: PUSH
40878: LD_INT 21
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 23
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PPUSH
40902: CALL_OW 69
40906: IN
40907: NOT
40908: OR
40909: IFFALSE 40913
// exit ;
40911: GO 40960
// for i = 1 to 3 do
40913: LD_ADDR_VAR 0 3
40917: PUSH
40918: DOUBLE
40919: LD_INT 1
40921: DEC
40922: ST_TO_ADDR
40923: LD_INT 3
40925: PUSH
40926: FOR_TO
40927: IFFALSE 40958
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40929: LD_VAR 0 1
40933: PPUSH
40934: CALL_OW 250
40938: PPUSH
40939: LD_VAR 0 1
40943: PPUSH
40944: CALL_OW 251
40948: PPUSH
40949: LD_INT 1
40951: PPUSH
40952: CALL_OW 453
40956: GO 40926
40958: POP
40959: POP
// end ;
40960: LD_VAR 0 2
40964: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40965: LD_INT 0
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40973: LD_VAR 0 1
40977: NOT
40978: PUSH
40979: LD_VAR 0 2
40983: NOT
40984: OR
40985: PUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL_OW 314
40995: OR
40996: IFFALSE 41000
// exit ;
40998: GO 41441
// x := GetX ( enemy_unit ) ;
41000: LD_ADDR_VAR 0 7
41004: PUSH
41005: LD_VAR 0 2
41009: PPUSH
41010: CALL_OW 250
41014: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41015: LD_ADDR_VAR 0 8
41019: PUSH
41020: LD_VAR 0 2
41024: PPUSH
41025: CALL_OW 251
41029: ST_TO_ADDR
// if not x or not y then
41030: LD_VAR 0 7
41034: NOT
41035: PUSH
41036: LD_VAR 0 8
41040: NOT
41041: OR
41042: IFFALSE 41046
// exit ;
41044: GO 41441
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41046: LD_ADDR_VAR 0 6
41050: PUSH
41051: LD_VAR 0 7
41055: PPUSH
41056: LD_INT 0
41058: PPUSH
41059: LD_INT 4
41061: PPUSH
41062: CALL_OW 272
41066: PUSH
41067: LD_VAR 0 8
41071: PPUSH
41072: LD_INT 0
41074: PPUSH
41075: LD_INT 4
41077: PPUSH
41078: CALL_OW 273
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_VAR 0 7
41091: PPUSH
41092: LD_INT 1
41094: PPUSH
41095: LD_INT 4
41097: PPUSH
41098: CALL_OW 272
41102: PUSH
41103: LD_VAR 0 8
41107: PPUSH
41108: LD_INT 1
41110: PPUSH
41111: LD_INT 4
41113: PPUSH
41114: CALL_OW 273
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_VAR 0 7
41127: PPUSH
41128: LD_INT 2
41130: PPUSH
41131: LD_INT 4
41133: PPUSH
41134: CALL_OW 272
41138: PUSH
41139: LD_VAR 0 8
41143: PPUSH
41144: LD_INT 2
41146: PPUSH
41147: LD_INT 4
41149: PPUSH
41150: CALL_OW 273
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_VAR 0 7
41163: PPUSH
41164: LD_INT 3
41166: PPUSH
41167: LD_INT 4
41169: PPUSH
41170: CALL_OW 272
41174: PUSH
41175: LD_VAR 0 8
41179: PPUSH
41180: LD_INT 3
41182: PPUSH
41183: LD_INT 4
41185: PPUSH
41186: CALL_OW 273
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_VAR 0 7
41199: PPUSH
41200: LD_INT 4
41202: PPUSH
41203: LD_INT 4
41205: PPUSH
41206: CALL_OW 272
41210: PUSH
41211: LD_VAR 0 8
41215: PPUSH
41216: LD_INT 4
41218: PPUSH
41219: LD_INT 4
41221: PPUSH
41222: CALL_OW 273
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_VAR 0 7
41235: PPUSH
41236: LD_INT 5
41238: PPUSH
41239: LD_INT 4
41241: PPUSH
41242: CALL_OW 272
41246: PUSH
41247: LD_VAR 0 8
41251: PPUSH
41252: LD_INT 5
41254: PPUSH
41255: LD_INT 4
41257: PPUSH
41258: CALL_OW 273
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: ST_TO_ADDR
// for i = tmp downto 1 do
41275: LD_ADDR_VAR 0 4
41279: PUSH
41280: DOUBLE
41281: LD_VAR 0 6
41285: INC
41286: ST_TO_ADDR
41287: LD_INT 1
41289: PUSH
41290: FOR_DOWNTO
41291: IFFALSE 41392
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41293: LD_VAR 0 6
41297: PUSH
41298: LD_VAR 0 4
41302: ARRAY
41303: PUSH
41304: LD_INT 1
41306: ARRAY
41307: PPUSH
41308: LD_VAR 0 6
41312: PUSH
41313: LD_VAR 0 4
41317: ARRAY
41318: PUSH
41319: LD_INT 2
41321: ARRAY
41322: PPUSH
41323: CALL_OW 488
41327: NOT
41328: PUSH
41329: LD_VAR 0 6
41333: PUSH
41334: LD_VAR 0 4
41338: ARRAY
41339: PUSH
41340: LD_INT 1
41342: ARRAY
41343: PPUSH
41344: LD_VAR 0 6
41348: PUSH
41349: LD_VAR 0 4
41353: ARRAY
41354: PUSH
41355: LD_INT 2
41357: ARRAY
41358: PPUSH
41359: CALL_OW 428
41363: PUSH
41364: LD_INT 0
41366: NONEQUAL
41367: OR
41368: IFFALSE 41390
// tmp := Delete ( tmp , i ) ;
41370: LD_ADDR_VAR 0 6
41374: PUSH
41375: LD_VAR 0 6
41379: PPUSH
41380: LD_VAR 0 4
41384: PPUSH
41385: CALL_OW 3
41389: ST_TO_ADDR
41390: GO 41290
41392: POP
41393: POP
// j := GetClosestHex ( unit , tmp ) ;
41394: LD_ADDR_VAR 0 5
41398: PUSH
41399: LD_VAR 0 1
41403: PPUSH
41404: LD_VAR 0 6
41408: PPUSH
41409: CALL 40711 0 2
41413: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41414: LD_VAR 0 1
41418: PPUSH
41419: LD_VAR 0 5
41423: PUSH
41424: LD_INT 1
41426: ARRAY
41427: PPUSH
41428: LD_VAR 0 5
41432: PUSH
41433: LD_INT 2
41435: ARRAY
41436: PPUSH
41437: CALL_OW 111
// end ;
41441: LD_VAR 0 3
41445: RET
// export function PrepareApemanSoldier ( ) ; begin
41446: LD_INT 0
41448: PPUSH
// uc_nation := 0 ;
41449: LD_ADDR_OWVAR 21
41453: PUSH
41454: LD_INT 0
41456: ST_TO_ADDR
// hc_sex := sex_male ;
41457: LD_ADDR_OWVAR 27
41461: PUSH
41462: LD_INT 1
41464: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
41465: LD_ADDR_OWVAR 28
41469: PUSH
41470: LD_INT 15
41472: ST_TO_ADDR
// hc_gallery :=  ;
41473: LD_ADDR_OWVAR 33
41477: PUSH
41478: LD_STRING 
41480: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41481: LD_ADDR_OWVAR 31
41485: PUSH
41486: LD_INT 0
41488: PPUSH
41489: LD_INT 3
41491: PPUSH
41492: CALL_OW 12
41496: PUSH
41497: LD_INT 0
41499: PPUSH
41500: LD_INT 3
41502: PPUSH
41503: CALL_OW 12
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: ST_TO_ADDR
// end ;
41520: LD_VAR 0 1
41524: RET
// export function PrepareApemanEngineer ( ) ; begin
41525: LD_INT 0
41527: PPUSH
// uc_nation := 0 ;
41528: LD_ADDR_OWVAR 21
41532: PUSH
41533: LD_INT 0
41535: ST_TO_ADDR
// hc_sex := sex_male ;
41536: LD_ADDR_OWVAR 27
41540: PUSH
41541: LD_INT 1
41543: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
41544: LD_ADDR_OWVAR 28
41548: PUSH
41549: LD_INT 16
41551: ST_TO_ADDR
// hc_gallery :=  ;
41552: LD_ADDR_OWVAR 33
41556: PUSH
41557: LD_STRING 
41559: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41560: LD_ADDR_OWVAR 31
41564: PUSH
41565: LD_INT 0
41567: PPUSH
41568: LD_INT 3
41570: PPUSH
41571: CALL_OW 12
41575: PUSH
41576: LD_INT 0
41578: PPUSH
41579: LD_INT 3
41581: PPUSH
41582: CALL_OW 12
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: ST_TO_ADDR
// end ;
41599: LD_VAR 0 1
41603: RET
// export function PrepareApeman ( agressivity ) ; begin
41604: LD_INT 0
41606: PPUSH
// uc_side := 0 ;
41607: LD_ADDR_OWVAR 20
41611: PUSH
41612: LD_INT 0
41614: ST_TO_ADDR
// uc_nation := 0 ;
41615: LD_ADDR_OWVAR 21
41619: PUSH
41620: LD_INT 0
41622: ST_TO_ADDR
// hc_sex := sex_male ;
41623: LD_ADDR_OWVAR 27
41627: PUSH
41628: LD_INT 1
41630: ST_TO_ADDR
// hc_class := class_apeman ;
41631: LD_ADDR_OWVAR 28
41635: PUSH
41636: LD_INT 12
41638: ST_TO_ADDR
// hc_gallery :=  ;
41639: LD_ADDR_OWVAR 33
41643: PUSH
41644: LD_STRING 
41646: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41647: LD_ADDR_OWVAR 35
41651: PUSH
41652: LD_VAR 0 1
41656: NEG
41657: PPUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 12
41667: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41668: LD_ADDR_OWVAR 31
41672: PUSH
41673: LD_INT 0
41675: PPUSH
41676: LD_INT 3
41678: PPUSH
41679: CALL_OW 12
41683: PUSH
41684: LD_INT 0
41686: PPUSH
41687: LD_INT 3
41689: PPUSH
41690: CALL_OW 12
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: ST_TO_ADDR
// end ;
41707: LD_VAR 0 2
41711: RET
// export function PrepareTiger ( agressivity ) ; begin
41712: LD_INT 0
41714: PPUSH
// uc_side := 0 ;
41715: LD_ADDR_OWVAR 20
41719: PUSH
41720: LD_INT 0
41722: ST_TO_ADDR
// uc_nation := 0 ;
41723: LD_ADDR_OWVAR 21
41727: PUSH
41728: LD_INT 0
41730: ST_TO_ADDR
// hc_class := class_tiger ;
41731: LD_ADDR_OWVAR 28
41735: PUSH
41736: LD_INT 14
41738: ST_TO_ADDR
// hc_gallery :=  ;
41739: LD_ADDR_OWVAR 33
41743: PUSH
41744: LD_STRING 
41746: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41747: LD_ADDR_OWVAR 35
41751: PUSH
41752: LD_VAR 0 1
41756: NEG
41757: PPUSH
41758: LD_VAR 0 1
41762: PPUSH
41763: CALL_OW 12
41767: ST_TO_ADDR
// end ;
41768: LD_VAR 0 2
41772: RET
// export function PrepareEnchidna ( ) ; begin
41773: LD_INT 0
41775: PPUSH
// uc_side := 0 ;
41776: LD_ADDR_OWVAR 20
41780: PUSH
41781: LD_INT 0
41783: ST_TO_ADDR
// uc_nation := 0 ;
41784: LD_ADDR_OWVAR 21
41788: PUSH
41789: LD_INT 0
41791: ST_TO_ADDR
// hc_class := class_baggie ;
41792: LD_ADDR_OWVAR 28
41796: PUSH
41797: LD_INT 13
41799: ST_TO_ADDR
// hc_gallery :=  ;
41800: LD_ADDR_OWVAR 33
41804: PUSH
41805: LD_STRING 
41807: ST_TO_ADDR
// end ;
41808: LD_VAR 0 1
41812: RET
// export function PrepareFrog ( ) ; begin
41813: LD_INT 0
41815: PPUSH
// uc_side := 0 ;
41816: LD_ADDR_OWVAR 20
41820: PUSH
41821: LD_INT 0
41823: ST_TO_ADDR
// uc_nation := 0 ;
41824: LD_ADDR_OWVAR 21
41828: PUSH
41829: LD_INT 0
41831: ST_TO_ADDR
// hc_class := class_frog ;
41832: LD_ADDR_OWVAR 28
41836: PUSH
41837: LD_INT 19
41839: ST_TO_ADDR
// hc_gallery :=  ;
41840: LD_ADDR_OWVAR 33
41844: PUSH
41845: LD_STRING 
41847: ST_TO_ADDR
// end ;
41848: LD_VAR 0 1
41852: RET
// export function PrepareFish ( ) ; begin
41853: LD_INT 0
41855: PPUSH
// uc_side := 0 ;
41856: LD_ADDR_OWVAR 20
41860: PUSH
41861: LD_INT 0
41863: ST_TO_ADDR
// uc_nation := 0 ;
41864: LD_ADDR_OWVAR 21
41868: PUSH
41869: LD_INT 0
41871: ST_TO_ADDR
// hc_class := class_fish ;
41872: LD_ADDR_OWVAR 28
41876: PUSH
41877: LD_INT 20
41879: ST_TO_ADDR
// hc_gallery :=  ;
41880: LD_ADDR_OWVAR 33
41884: PUSH
41885: LD_STRING 
41887: ST_TO_ADDR
// end ;
41888: LD_VAR 0 1
41892: RET
// export function PrepareBird ( ) ; begin
41893: LD_INT 0
41895: PPUSH
// uc_side := 0 ;
41896: LD_ADDR_OWVAR 20
41900: PUSH
41901: LD_INT 0
41903: ST_TO_ADDR
// uc_nation := 0 ;
41904: LD_ADDR_OWVAR 21
41908: PUSH
41909: LD_INT 0
41911: ST_TO_ADDR
// hc_class := class_phororhacos ;
41912: LD_ADDR_OWVAR 28
41916: PUSH
41917: LD_INT 18
41919: ST_TO_ADDR
// hc_gallery :=  ;
41920: LD_ADDR_OWVAR 33
41924: PUSH
41925: LD_STRING 
41927: ST_TO_ADDR
// end ;
41928: LD_VAR 0 1
41932: RET
// export function PrepareHorse ( ) ; begin
41933: LD_INT 0
41935: PPUSH
// uc_side := 0 ;
41936: LD_ADDR_OWVAR 20
41940: PUSH
41941: LD_INT 0
41943: ST_TO_ADDR
// uc_nation := 0 ;
41944: LD_ADDR_OWVAR 21
41948: PUSH
41949: LD_INT 0
41951: ST_TO_ADDR
// hc_class := class_horse ;
41952: LD_ADDR_OWVAR 28
41956: PUSH
41957: LD_INT 21
41959: ST_TO_ADDR
// hc_gallery :=  ;
41960: LD_ADDR_OWVAR 33
41964: PUSH
41965: LD_STRING 
41967: ST_TO_ADDR
// end ;
41968: LD_VAR 0 1
41972: RET
// export function PrepareMastodont ( ) ; begin
41973: LD_INT 0
41975: PPUSH
// uc_side := 0 ;
41976: LD_ADDR_OWVAR 20
41980: PUSH
41981: LD_INT 0
41983: ST_TO_ADDR
// uc_nation := 0 ;
41984: LD_ADDR_OWVAR 21
41988: PUSH
41989: LD_INT 0
41991: ST_TO_ADDR
// vc_chassis := class_mastodont ;
41992: LD_ADDR_OWVAR 37
41996: PUSH
41997: LD_INT 31
41999: ST_TO_ADDR
// vc_control := control_rider ;
42000: LD_ADDR_OWVAR 38
42004: PUSH
42005: LD_INT 4
42007: ST_TO_ADDR
// end ;
42008: LD_VAR 0 1
42012: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42013: LD_INT 0
42015: PPUSH
42016: PPUSH
42017: PPUSH
// uc_side = 0 ;
42018: LD_ADDR_OWVAR 20
42022: PUSH
42023: LD_INT 0
42025: ST_TO_ADDR
// uc_nation = 0 ;
42026: LD_ADDR_OWVAR 21
42030: PUSH
42031: LD_INT 0
42033: ST_TO_ADDR
// InitHc_All ( ) ;
42034: CALL_OW 584
// InitVc ;
42038: CALL_OW 20
// if mastodonts then
42042: LD_VAR 0 6
42046: IFFALSE 42113
// for i = 1 to mastodonts do
42048: LD_ADDR_VAR 0 11
42052: PUSH
42053: DOUBLE
42054: LD_INT 1
42056: DEC
42057: ST_TO_ADDR
42058: LD_VAR 0 6
42062: PUSH
42063: FOR_TO
42064: IFFALSE 42111
// begin vc_chassis := 31 ;
42066: LD_ADDR_OWVAR 37
42070: PUSH
42071: LD_INT 31
42073: ST_TO_ADDR
// vc_control := control_rider ;
42074: LD_ADDR_OWVAR 38
42078: PUSH
42079: LD_INT 4
42081: ST_TO_ADDR
// animal := CreateVehicle ;
42082: LD_ADDR_VAR 0 12
42086: PUSH
42087: CALL_OW 45
42091: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42092: LD_VAR 0 12
42096: PPUSH
42097: LD_VAR 0 8
42101: PPUSH
42102: LD_INT 0
42104: PPUSH
42105: CALL 44248 0 3
// end ;
42109: GO 42063
42111: POP
42112: POP
// if horses then
42113: LD_VAR 0 5
42117: IFFALSE 42184
// for i = 1 to horses do
42119: LD_ADDR_VAR 0 11
42123: PUSH
42124: DOUBLE
42125: LD_INT 1
42127: DEC
42128: ST_TO_ADDR
42129: LD_VAR 0 5
42133: PUSH
42134: FOR_TO
42135: IFFALSE 42182
// begin hc_class := 21 ;
42137: LD_ADDR_OWVAR 28
42141: PUSH
42142: LD_INT 21
42144: ST_TO_ADDR
// hc_gallery :=  ;
42145: LD_ADDR_OWVAR 33
42149: PUSH
42150: LD_STRING 
42152: ST_TO_ADDR
// animal := CreateHuman ;
42153: LD_ADDR_VAR 0 12
42157: PUSH
42158: CALL_OW 44
42162: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42163: LD_VAR 0 12
42167: PPUSH
42168: LD_VAR 0 8
42172: PPUSH
42173: LD_INT 0
42175: PPUSH
42176: CALL 44248 0 3
// end ;
42180: GO 42134
42182: POP
42183: POP
// if birds then
42184: LD_VAR 0 1
42188: IFFALSE 42255
// for i = 1 to birds do
42190: LD_ADDR_VAR 0 11
42194: PUSH
42195: DOUBLE
42196: LD_INT 1
42198: DEC
42199: ST_TO_ADDR
42200: LD_VAR 0 1
42204: PUSH
42205: FOR_TO
42206: IFFALSE 42253
// begin hc_class = 18 ;
42208: LD_ADDR_OWVAR 28
42212: PUSH
42213: LD_INT 18
42215: ST_TO_ADDR
// hc_gallery =  ;
42216: LD_ADDR_OWVAR 33
42220: PUSH
42221: LD_STRING 
42223: ST_TO_ADDR
// animal := CreateHuman ;
42224: LD_ADDR_VAR 0 12
42228: PUSH
42229: CALL_OW 44
42233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42234: LD_VAR 0 12
42238: PPUSH
42239: LD_VAR 0 8
42243: PPUSH
42244: LD_INT 0
42246: PPUSH
42247: CALL 44248 0 3
// end ;
42251: GO 42205
42253: POP
42254: POP
// if tigers then
42255: LD_VAR 0 2
42259: IFFALSE 42343
// for i = 1 to tigers do
42261: LD_ADDR_VAR 0 11
42265: PUSH
42266: DOUBLE
42267: LD_INT 1
42269: DEC
42270: ST_TO_ADDR
42271: LD_VAR 0 2
42275: PUSH
42276: FOR_TO
42277: IFFALSE 42341
// begin hc_class = class_tiger ;
42279: LD_ADDR_OWVAR 28
42283: PUSH
42284: LD_INT 14
42286: ST_TO_ADDR
// hc_gallery =  ;
42287: LD_ADDR_OWVAR 33
42291: PUSH
42292: LD_STRING 
42294: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42295: LD_ADDR_OWVAR 35
42299: PUSH
42300: LD_INT 7
42302: NEG
42303: PPUSH
42304: LD_INT 7
42306: PPUSH
42307: CALL_OW 12
42311: ST_TO_ADDR
// animal := CreateHuman ;
42312: LD_ADDR_VAR 0 12
42316: PUSH
42317: CALL_OW 44
42321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42322: LD_VAR 0 12
42326: PPUSH
42327: LD_VAR 0 8
42331: PPUSH
42332: LD_INT 0
42334: PPUSH
42335: CALL 44248 0 3
// end ;
42339: GO 42276
42341: POP
42342: POP
// if apemans then
42343: LD_VAR 0 3
42347: IFFALSE 42470
// for i = 1 to apemans do
42349: LD_ADDR_VAR 0 11
42353: PUSH
42354: DOUBLE
42355: LD_INT 1
42357: DEC
42358: ST_TO_ADDR
42359: LD_VAR 0 3
42363: PUSH
42364: FOR_TO
42365: IFFALSE 42468
// begin hc_class = class_apeman ;
42367: LD_ADDR_OWVAR 28
42371: PUSH
42372: LD_INT 12
42374: ST_TO_ADDR
// hc_gallery =  ;
42375: LD_ADDR_OWVAR 33
42379: PUSH
42380: LD_STRING 
42382: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42383: LD_ADDR_OWVAR 35
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PPUSH
42392: LD_INT 2
42394: PPUSH
42395: CALL_OW 12
42399: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42400: LD_ADDR_OWVAR 31
42404: PUSH
42405: LD_INT 1
42407: PPUSH
42408: LD_INT 3
42410: PPUSH
42411: CALL_OW 12
42415: PUSH
42416: LD_INT 1
42418: PPUSH
42419: LD_INT 3
42421: PPUSH
42422: CALL_OW 12
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// animal := CreateHuman ;
42439: LD_ADDR_VAR 0 12
42443: PUSH
42444: CALL_OW 44
42448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42449: LD_VAR 0 12
42453: PPUSH
42454: LD_VAR 0 8
42458: PPUSH
42459: LD_INT 0
42461: PPUSH
42462: CALL 44248 0 3
// end ;
42466: GO 42364
42468: POP
42469: POP
// if enchidnas then
42470: LD_VAR 0 4
42474: IFFALSE 42541
// for i = 1 to enchidnas do
42476: LD_ADDR_VAR 0 11
42480: PUSH
42481: DOUBLE
42482: LD_INT 1
42484: DEC
42485: ST_TO_ADDR
42486: LD_VAR 0 4
42490: PUSH
42491: FOR_TO
42492: IFFALSE 42539
// begin hc_class = 13 ;
42494: LD_ADDR_OWVAR 28
42498: PUSH
42499: LD_INT 13
42501: ST_TO_ADDR
// hc_gallery =  ;
42502: LD_ADDR_OWVAR 33
42506: PUSH
42507: LD_STRING 
42509: ST_TO_ADDR
// animal := CreateHuman ;
42510: LD_ADDR_VAR 0 12
42514: PUSH
42515: CALL_OW 44
42519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42520: LD_VAR 0 12
42524: PPUSH
42525: LD_VAR 0 8
42529: PPUSH
42530: LD_INT 0
42532: PPUSH
42533: CALL 44248 0 3
// end ;
42537: GO 42491
42539: POP
42540: POP
// if fishes then
42541: LD_VAR 0 7
42545: IFFALSE 42612
// for i = 1 to fishes do
42547: LD_ADDR_VAR 0 11
42551: PUSH
42552: DOUBLE
42553: LD_INT 1
42555: DEC
42556: ST_TO_ADDR
42557: LD_VAR 0 7
42561: PUSH
42562: FOR_TO
42563: IFFALSE 42610
// begin hc_class = 20 ;
42565: LD_ADDR_OWVAR 28
42569: PUSH
42570: LD_INT 20
42572: ST_TO_ADDR
// hc_gallery =  ;
42573: LD_ADDR_OWVAR 33
42577: PUSH
42578: LD_STRING 
42580: ST_TO_ADDR
// animal := CreateHuman ;
42581: LD_ADDR_VAR 0 12
42585: PUSH
42586: CALL_OW 44
42590: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42591: LD_VAR 0 12
42595: PPUSH
42596: LD_VAR 0 9
42600: PPUSH
42601: LD_INT 0
42603: PPUSH
42604: CALL 44248 0 3
// end ;
42608: GO 42562
42610: POP
42611: POP
// end ;
42612: LD_VAR 0 10
42616: RET
// export function WantHeal ( sci , unit ) ; begin
42617: LD_INT 0
42619: PPUSH
// if GetTaskList ( sci ) > 0 then
42620: LD_VAR 0 1
42624: PPUSH
42625: CALL_OW 437
42629: PUSH
42630: LD_INT 0
42632: GREATER
42633: IFFALSE 42703
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42635: LD_VAR 0 1
42639: PPUSH
42640: CALL_OW 437
42644: PUSH
42645: LD_INT 1
42647: ARRAY
42648: PUSH
42649: LD_INT 1
42651: ARRAY
42652: PUSH
42653: LD_STRING l
42655: EQUAL
42656: PUSH
42657: LD_VAR 0 1
42661: PPUSH
42662: CALL_OW 437
42666: PUSH
42667: LD_INT 1
42669: ARRAY
42670: PUSH
42671: LD_INT 4
42673: ARRAY
42674: PUSH
42675: LD_VAR 0 2
42679: EQUAL
42680: AND
42681: IFFALSE 42693
// result := true else
42683: LD_ADDR_VAR 0 3
42687: PUSH
42688: LD_INT 1
42690: ST_TO_ADDR
42691: GO 42701
// result := false ;
42693: LD_ADDR_VAR 0 3
42697: PUSH
42698: LD_INT 0
42700: ST_TO_ADDR
// end else
42701: GO 42711
// result := false ;
42703: LD_ADDR_VAR 0 3
42707: PUSH
42708: LD_INT 0
42710: ST_TO_ADDR
// end ;
42711: LD_VAR 0 3
42715: RET
// export function HealTarget ( sci ) ; begin
42716: LD_INT 0
42718: PPUSH
// if not sci then
42719: LD_VAR 0 1
42723: NOT
42724: IFFALSE 42728
// exit ;
42726: GO 42793
// result := 0 ;
42728: LD_ADDR_VAR 0 2
42732: PUSH
42733: LD_INT 0
42735: ST_TO_ADDR
// if GetTaskList ( sci ) then
42736: LD_VAR 0 1
42740: PPUSH
42741: CALL_OW 437
42745: IFFALSE 42793
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42747: LD_VAR 0 1
42751: PPUSH
42752: CALL_OW 437
42756: PUSH
42757: LD_INT 1
42759: ARRAY
42760: PUSH
42761: LD_INT 1
42763: ARRAY
42764: PUSH
42765: LD_STRING l
42767: EQUAL
42768: IFFALSE 42793
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42770: LD_ADDR_VAR 0 2
42774: PUSH
42775: LD_VAR 0 1
42779: PPUSH
42780: CALL_OW 437
42784: PUSH
42785: LD_INT 1
42787: ARRAY
42788: PUSH
42789: LD_INT 4
42791: ARRAY
42792: ST_TO_ADDR
// end ;
42793: LD_VAR 0 2
42797: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42798: LD_INT 0
42800: PPUSH
42801: PPUSH
42802: PPUSH
42803: PPUSH
// if not base_units then
42804: LD_VAR 0 1
42808: NOT
42809: IFFALSE 42813
// exit ;
42811: GO 42900
// result := false ;
42813: LD_ADDR_VAR 0 2
42817: PUSH
42818: LD_INT 0
42820: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42821: LD_ADDR_VAR 0 5
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: LD_INT 21
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PPUSH
42841: CALL_OW 72
42845: ST_TO_ADDR
// if not tmp then
42846: LD_VAR 0 5
42850: NOT
42851: IFFALSE 42855
// exit ;
42853: GO 42900
// for i in tmp do
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_VAR 0 5
42864: PUSH
42865: FOR_IN
42866: IFFALSE 42898
// begin result := EnemyInRange ( i , 22 ) ;
42868: LD_ADDR_VAR 0 2
42872: PUSH
42873: LD_VAR 0 3
42877: PPUSH
42878: LD_INT 22
42880: PPUSH
42881: CALL 40586 0 2
42885: ST_TO_ADDR
// if result then
42886: LD_VAR 0 2
42890: IFFALSE 42896
// exit ;
42892: POP
42893: POP
42894: GO 42900
// end ;
42896: GO 42865
42898: POP
42899: POP
// end ;
42900: LD_VAR 0 2
42904: RET
// export function FilterByTag ( units , tag ) ; begin
42905: LD_INT 0
42907: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42908: LD_ADDR_VAR 0 3
42912: PUSH
42913: LD_VAR 0 1
42917: PPUSH
42918: LD_INT 120
42920: PUSH
42921: LD_VAR 0 2
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PPUSH
42930: CALL_OW 72
42934: ST_TO_ADDR
// end ;
42935: LD_VAR 0 3
42939: RET
// export function IsDriver ( un ) ; begin
42940: LD_INT 0
42942: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42943: LD_ADDR_VAR 0 2
42947: PUSH
42948: LD_VAR 0 1
42952: PUSH
42953: LD_INT 55
42955: PUSH
42956: EMPTY
42957: LIST
42958: PPUSH
42959: CALL_OW 69
42963: IN
42964: ST_TO_ADDR
// end ;
42965: LD_VAR 0 2
42969: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42970: LD_INT 0
42972: PPUSH
42973: PPUSH
// list := [ ] ;
42974: LD_ADDR_VAR 0 5
42978: PUSH
42979: EMPTY
42980: ST_TO_ADDR
// case d of 0 :
42981: LD_VAR 0 3
42985: PUSH
42986: LD_INT 0
42988: DOUBLE
42989: EQUAL
42990: IFTRUE 42994
42992: GO 43127
42994: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42995: LD_ADDR_VAR 0 5
42999: PUSH
43000: LD_VAR 0 1
43004: PUSH
43005: LD_INT 4
43007: MINUS
43008: PUSH
43009: LD_VAR 0 2
43013: PUSH
43014: LD_INT 4
43016: MINUS
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: PUSH
43026: LD_VAR 0 1
43030: PUSH
43031: LD_INT 3
43033: MINUS
43034: PUSH
43035: LD_VAR 0 2
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: LIST
43047: PUSH
43048: LD_VAR 0 1
43052: PUSH
43053: LD_INT 4
43055: PLUS
43056: PUSH
43057: LD_VAR 0 2
43061: PUSH
43062: LD_INT 4
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: LIST
43069: PUSH
43070: LD_VAR 0 1
43074: PUSH
43075: LD_INT 3
43077: PLUS
43078: PUSH
43079: LD_VAR 0 2
43083: PUSH
43084: LD_INT 3
43086: PLUS
43087: PUSH
43088: LD_INT 5
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: PUSH
43096: LD_VAR 0 1
43100: PUSH
43101: LD_VAR 0 2
43105: PUSH
43106: LD_INT 4
43108: PLUS
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
// end ; 1 :
43125: GO 43825
43127: LD_INT 1
43129: DOUBLE
43130: EQUAL
43131: IFTRUE 43135
43133: GO 43268
43135: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43136: LD_ADDR_VAR 0 5
43140: PUSH
43141: LD_VAR 0 1
43145: PUSH
43146: LD_VAR 0 2
43150: PUSH
43151: LD_INT 4
43153: MINUS
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: PUSH
43163: LD_VAR 0 1
43167: PUSH
43168: LD_INT 3
43170: MINUS
43171: PUSH
43172: LD_VAR 0 2
43176: PUSH
43177: LD_INT 3
43179: MINUS
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: LIST
43188: PUSH
43189: LD_VAR 0 1
43193: PUSH
43194: LD_INT 4
43196: MINUS
43197: PUSH
43198: LD_VAR 0 2
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: PUSH
43211: LD_VAR 0 1
43215: PUSH
43216: LD_VAR 0 2
43220: PUSH
43221: LD_INT 3
43223: PLUS
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: PUSH
43233: LD_VAR 0 1
43237: PUSH
43238: LD_INT 4
43240: PLUS
43241: PUSH
43242: LD_VAR 0 2
43246: PUSH
43247: LD_INT 4
43249: PLUS
43250: PUSH
43251: LD_INT 5
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: LIST
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
// end ; 2 :
43266: GO 43825
43268: LD_INT 2
43270: DOUBLE
43271: EQUAL
43272: IFTRUE 43276
43274: GO 43405
43276: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43277: LD_ADDR_VAR 0 5
43281: PUSH
43282: LD_VAR 0 1
43286: PUSH
43287: LD_VAR 0 2
43291: PUSH
43292: LD_INT 3
43294: MINUS
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: PUSH
43304: LD_VAR 0 1
43308: PUSH
43309: LD_INT 4
43311: PLUS
43312: PUSH
43313: LD_VAR 0 2
43317: PUSH
43318: LD_INT 4
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: PUSH
43326: LD_VAR 0 1
43330: PUSH
43331: LD_VAR 0 2
43335: PUSH
43336: LD_INT 4
43338: PLUS
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: LIST
43347: PUSH
43348: LD_VAR 0 1
43352: PUSH
43353: LD_INT 3
43355: MINUS
43356: PUSH
43357: LD_VAR 0 2
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: PUSH
43370: LD_VAR 0 1
43374: PUSH
43375: LD_INT 4
43377: MINUS
43378: PUSH
43379: LD_VAR 0 2
43383: PUSH
43384: LD_INT 4
43386: MINUS
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: LIST
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: ST_TO_ADDR
// end ; 3 :
43403: GO 43825
43405: LD_INT 3
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43413
43411: GO 43546
43413: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43414: LD_ADDR_VAR 0 5
43418: PUSH
43419: LD_VAR 0 1
43423: PUSH
43424: LD_INT 3
43426: PLUS
43427: PUSH
43428: LD_VAR 0 2
43432: PUSH
43433: LD_INT 4
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: PUSH
43441: LD_VAR 0 1
43445: PUSH
43446: LD_INT 4
43448: PLUS
43449: PUSH
43450: LD_VAR 0 2
43454: PUSH
43455: LD_INT 4
43457: PLUS
43458: PUSH
43459: LD_INT 5
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: LIST
43466: PUSH
43467: LD_VAR 0 1
43471: PUSH
43472: LD_INT 4
43474: MINUS
43475: PUSH
43476: LD_VAR 0 2
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: PUSH
43489: LD_VAR 0 1
43493: PUSH
43494: LD_VAR 0 2
43498: PUSH
43499: LD_INT 4
43501: MINUS
43502: PUSH
43503: LD_INT 3
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: PUSH
43511: LD_VAR 0 1
43515: PUSH
43516: LD_INT 3
43518: MINUS
43519: PUSH
43520: LD_VAR 0 2
43524: PUSH
43525: LD_INT 3
43527: MINUS
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
// end ; 4 :
43544: GO 43825
43546: LD_INT 4
43548: DOUBLE
43549: EQUAL
43550: IFTRUE 43554
43552: GO 43687
43554: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43555: LD_ADDR_VAR 0 5
43559: PUSH
43560: LD_VAR 0 1
43564: PUSH
43565: LD_VAR 0 2
43569: PUSH
43570: LD_INT 4
43572: PLUS
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: LIST
43581: PUSH
43582: LD_VAR 0 1
43586: PUSH
43587: LD_INT 3
43589: PLUS
43590: PUSH
43591: LD_VAR 0 2
43595: PUSH
43596: LD_INT 3
43598: PLUS
43599: PUSH
43600: LD_INT 5
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: PUSH
43608: LD_VAR 0 1
43612: PUSH
43613: LD_INT 4
43615: PLUS
43616: PUSH
43617: LD_VAR 0 2
43621: PUSH
43622: LD_INT 4
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: LIST
43629: PUSH
43630: LD_VAR 0 1
43634: PUSH
43635: LD_VAR 0 2
43639: PUSH
43640: LD_INT 3
43642: MINUS
43643: PUSH
43644: LD_INT 3
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: PUSH
43652: LD_VAR 0 1
43656: PUSH
43657: LD_INT 4
43659: MINUS
43660: PUSH
43661: LD_VAR 0 2
43665: PUSH
43666: LD_INT 4
43668: MINUS
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: LIST
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: ST_TO_ADDR
// end ; 5 :
43685: GO 43825
43687: LD_INT 5
43689: DOUBLE
43690: EQUAL
43691: IFTRUE 43695
43693: GO 43824
43695: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43696: LD_ADDR_VAR 0 5
43700: PUSH
43701: LD_VAR 0 1
43705: PUSH
43706: LD_INT 4
43708: MINUS
43709: PUSH
43710: LD_VAR 0 2
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: LIST
43722: PUSH
43723: LD_VAR 0 1
43727: PUSH
43728: LD_VAR 0 2
43732: PUSH
43733: LD_INT 4
43735: MINUS
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: PUSH
43745: LD_VAR 0 1
43749: PUSH
43750: LD_INT 4
43752: PLUS
43753: PUSH
43754: LD_VAR 0 2
43758: PUSH
43759: LD_INT 4
43761: PLUS
43762: PUSH
43763: LD_INT 5
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: LD_VAR 0 1
43775: PUSH
43776: LD_INT 3
43778: PLUS
43779: PUSH
43780: LD_VAR 0 2
43784: PUSH
43785: LD_INT 4
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: PUSH
43793: LD_VAR 0 1
43797: PUSH
43798: LD_VAR 0 2
43802: PUSH
43803: LD_INT 3
43805: PLUS
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: LIST
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// end ; end ;
43822: GO 43825
43824: POP
// result := list ;
43825: LD_ADDR_VAR 0 4
43829: PUSH
43830: LD_VAR 0 5
43834: ST_TO_ADDR
// end ;
43835: LD_VAR 0 4
43839: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43840: LD_INT 0
43842: PPUSH
43843: PPUSH
43844: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43845: LD_VAR 0 1
43849: NOT
43850: PUSH
43851: LD_VAR 0 2
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: LD_INT 3
43864: PUSH
43865: LD_INT 4
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: IN
43874: NOT
43875: OR
43876: IFFALSE 43880
// exit ;
43878: GO 43972
// tmp := [ ] ;
43880: LD_ADDR_VAR 0 5
43884: PUSH
43885: EMPTY
43886: ST_TO_ADDR
// for i in units do
43887: LD_ADDR_VAR 0 4
43891: PUSH
43892: LD_VAR 0 1
43896: PUSH
43897: FOR_IN
43898: IFFALSE 43941
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43900: LD_ADDR_VAR 0 5
43904: PUSH
43905: LD_VAR 0 5
43909: PPUSH
43910: LD_VAR 0 5
43914: PUSH
43915: LD_INT 1
43917: PLUS
43918: PPUSH
43919: LD_VAR 0 4
43923: PPUSH
43924: LD_VAR 0 2
43928: PPUSH
43929: CALL_OW 259
43933: PPUSH
43934: CALL_OW 2
43938: ST_TO_ADDR
43939: GO 43897
43941: POP
43942: POP
// if not tmp then
43943: LD_VAR 0 5
43947: NOT
43948: IFFALSE 43952
// exit ;
43950: GO 43972
// result := SortListByListDesc ( units , tmp ) ;
43952: LD_ADDR_VAR 0 3
43956: PUSH
43957: LD_VAR 0 1
43961: PPUSH
43962: LD_VAR 0 5
43966: PPUSH
43967: CALL_OW 77
43971: ST_TO_ADDR
// end ;
43972: LD_VAR 0 3
43976: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43977: LD_INT 0
43979: PPUSH
43980: PPUSH
43981: PPUSH
// result := false ;
43982: LD_ADDR_VAR 0 3
43986: PUSH
43987: LD_INT 0
43989: ST_TO_ADDR
// x := GetX ( building ) ;
43990: LD_ADDR_VAR 0 4
43994: PUSH
43995: LD_VAR 0 2
43999: PPUSH
44000: CALL_OW 250
44004: ST_TO_ADDR
// y := GetY ( building ) ;
44005: LD_ADDR_VAR 0 5
44009: PUSH
44010: LD_VAR 0 2
44014: PPUSH
44015: CALL_OW 251
44019: ST_TO_ADDR
// if not building or not x or not y then
44020: LD_VAR 0 2
44024: NOT
44025: PUSH
44026: LD_VAR 0 4
44030: NOT
44031: OR
44032: PUSH
44033: LD_VAR 0 5
44037: NOT
44038: OR
44039: IFFALSE 44043
// exit ;
44041: GO 44135
// if GetTaskList ( unit ) then
44043: LD_VAR 0 1
44047: PPUSH
44048: CALL_OW 437
44052: IFFALSE 44135
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44054: LD_STRING e
44056: PUSH
44057: LD_VAR 0 1
44061: PPUSH
44062: CALL_OW 437
44066: PUSH
44067: LD_INT 1
44069: ARRAY
44070: PUSH
44071: LD_INT 1
44073: ARRAY
44074: EQUAL
44075: PUSH
44076: LD_VAR 0 4
44080: PUSH
44081: LD_VAR 0 1
44085: PPUSH
44086: CALL_OW 437
44090: PUSH
44091: LD_INT 1
44093: ARRAY
44094: PUSH
44095: LD_INT 2
44097: ARRAY
44098: EQUAL
44099: AND
44100: PUSH
44101: LD_VAR 0 5
44105: PUSH
44106: LD_VAR 0 1
44110: PPUSH
44111: CALL_OW 437
44115: PUSH
44116: LD_INT 1
44118: ARRAY
44119: PUSH
44120: LD_INT 3
44122: ARRAY
44123: EQUAL
44124: AND
44125: IFFALSE 44135
// result := true end ;
44127: LD_ADDR_VAR 0 3
44131: PUSH
44132: LD_INT 1
44134: ST_TO_ADDR
// end ;
44135: LD_VAR 0 3
44139: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44140: LD_INT 0
44142: PPUSH
// result := false ;
44143: LD_ADDR_VAR 0 4
44147: PUSH
44148: LD_INT 0
44150: ST_TO_ADDR
// if GetTaskList ( unit ) then
44151: LD_VAR 0 1
44155: PPUSH
44156: CALL_OW 437
44160: IFFALSE 44243
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44162: LD_STRING M
44164: PUSH
44165: LD_VAR 0 1
44169: PPUSH
44170: CALL_OW 437
44174: PUSH
44175: LD_INT 1
44177: ARRAY
44178: PUSH
44179: LD_INT 1
44181: ARRAY
44182: EQUAL
44183: PUSH
44184: LD_VAR 0 2
44188: PUSH
44189: LD_VAR 0 1
44193: PPUSH
44194: CALL_OW 437
44198: PUSH
44199: LD_INT 1
44201: ARRAY
44202: PUSH
44203: LD_INT 2
44205: ARRAY
44206: EQUAL
44207: AND
44208: PUSH
44209: LD_VAR 0 3
44213: PUSH
44214: LD_VAR 0 1
44218: PPUSH
44219: CALL_OW 437
44223: PUSH
44224: LD_INT 1
44226: ARRAY
44227: PUSH
44228: LD_INT 3
44230: ARRAY
44231: EQUAL
44232: AND
44233: IFFALSE 44243
// result := true ;
44235: LD_ADDR_VAR 0 4
44239: PUSH
44240: LD_INT 1
44242: ST_TO_ADDR
// end ; end ;
44243: LD_VAR 0 4
44247: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44248: LD_INT 0
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
// if not unit or not area then
44254: LD_VAR 0 1
44258: NOT
44259: PUSH
44260: LD_VAR 0 2
44264: NOT
44265: OR
44266: IFFALSE 44270
// exit ;
44268: GO 44434
// tmp := AreaToList ( area , i ) ;
44270: LD_ADDR_VAR 0 6
44274: PUSH
44275: LD_VAR 0 2
44279: PPUSH
44280: LD_VAR 0 5
44284: PPUSH
44285: CALL_OW 517
44289: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44290: LD_ADDR_VAR 0 5
44294: PUSH
44295: DOUBLE
44296: LD_INT 1
44298: DEC
44299: ST_TO_ADDR
44300: LD_VAR 0 6
44304: PUSH
44305: LD_INT 1
44307: ARRAY
44308: PUSH
44309: FOR_TO
44310: IFFALSE 44432
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44312: LD_ADDR_VAR 0 7
44316: PUSH
44317: LD_VAR 0 6
44321: PUSH
44322: LD_INT 1
44324: ARRAY
44325: PUSH
44326: LD_VAR 0 5
44330: ARRAY
44331: PUSH
44332: LD_VAR 0 6
44336: PUSH
44337: LD_INT 2
44339: ARRAY
44340: PUSH
44341: LD_VAR 0 5
44345: ARRAY
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
44351: LD_VAR 0 7
44355: PUSH
44356: LD_INT 1
44358: ARRAY
44359: PPUSH
44360: LD_VAR 0 7
44364: PUSH
44365: LD_INT 2
44367: ARRAY
44368: PPUSH
44369: CALL_OW 428
44373: PUSH
44374: LD_INT 0
44376: EQUAL
44377: IFFALSE 44430
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
44379: LD_VAR 0 1
44383: PPUSH
44384: LD_VAR 0 7
44388: PUSH
44389: LD_INT 1
44391: ARRAY
44392: PPUSH
44393: LD_VAR 0 7
44397: PUSH
44398: LD_INT 2
44400: ARRAY
44401: PPUSH
44402: LD_VAR 0 3
44406: PPUSH
44407: CALL_OW 48
// result := IsPlaced ( unit ) ;
44411: LD_ADDR_VAR 0 4
44415: PUSH
44416: LD_VAR 0 1
44420: PPUSH
44421: CALL_OW 305
44425: ST_TO_ADDR
// exit ;
44426: POP
44427: POP
44428: GO 44434
// end ; end ;
44430: GO 44309
44432: POP
44433: POP
// end ;
44434: LD_VAR 0 4
44438: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44439: LD_INT 0
44441: PPUSH
44442: PPUSH
44443: PPUSH
// if not side or side > 8 then
44444: LD_VAR 0 1
44448: NOT
44449: PUSH
44450: LD_VAR 0 1
44454: PUSH
44455: LD_INT 8
44457: GREATER
44458: OR
44459: IFFALSE 44463
// exit ;
44461: GO 44650
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44463: LD_ADDR_VAR 0 4
44467: PUSH
44468: LD_INT 22
44470: PUSH
44471: LD_VAR 0 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 21
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PPUSH
44494: CALL_OW 69
44498: ST_TO_ADDR
// if not tmp then
44499: LD_VAR 0 4
44503: NOT
44504: IFFALSE 44508
// exit ;
44506: GO 44650
// enable_addtolog := true ;
44508: LD_ADDR_OWVAR 81
44512: PUSH
44513: LD_INT 1
44515: ST_TO_ADDR
// AddToLog ( [ ) ;
44516: LD_STRING [
44518: PPUSH
44519: CALL_OW 561
// for i in tmp do
44523: LD_ADDR_VAR 0 3
44527: PUSH
44528: LD_VAR 0 4
44532: PUSH
44533: FOR_IN
44534: IFFALSE 44641
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44536: LD_STRING [
44538: PUSH
44539: LD_VAR 0 3
44543: PPUSH
44544: CALL_OW 266
44548: STR
44549: PUSH
44550: LD_STRING , 
44552: STR
44553: PUSH
44554: LD_VAR 0 3
44558: PPUSH
44559: CALL_OW 250
44563: STR
44564: PUSH
44565: LD_STRING , 
44567: STR
44568: PUSH
44569: LD_VAR 0 3
44573: PPUSH
44574: CALL_OW 251
44578: STR
44579: PUSH
44580: LD_STRING , 
44582: STR
44583: PUSH
44584: LD_VAR 0 3
44588: PPUSH
44589: CALL_OW 254
44593: STR
44594: PUSH
44595: LD_STRING , 
44597: STR
44598: PUSH
44599: LD_VAR 0 3
44603: PPUSH
44604: LD_INT 1
44606: PPUSH
44607: CALL_OW 268
44611: STR
44612: PUSH
44613: LD_STRING , 
44615: STR
44616: PUSH
44617: LD_VAR 0 3
44621: PPUSH
44622: LD_INT 2
44624: PPUSH
44625: CALL_OW 268
44629: STR
44630: PUSH
44631: LD_STRING ],
44633: STR
44634: PPUSH
44635: CALL_OW 561
// end ;
44639: GO 44533
44641: POP
44642: POP
// AddToLog ( ]; ) ;
44643: LD_STRING ];
44645: PPUSH
44646: CALL_OW 561
// end ;
44650: LD_VAR 0 2
44654: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44655: LD_INT 0
44657: PPUSH
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
// if not area or not rate or not max then
44662: LD_VAR 0 1
44666: NOT
44667: PUSH
44668: LD_VAR 0 2
44672: NOT
44673: OR
44674: PUSH
44675: LD_VAR 0 4
44679: NOT
44680: OR
44681: IFFALSE 44685
// exit ;
44683: GO 44874
// while 1 do
44685: LD_INT 1
44687: IFFALSE 44874
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44689: LD_ADDR_VAR 0 9
44693: PUSH
44694: LD_VAR 0 1
44698: PPUSH
44699: LD_INT 1
44701: PPUSH
44702: CALL_OW 287
44706: PUSH
44707: LD_INT 10
44709: MUL
44710: ST_TO_ADDR
// r := rate / 10 ;
44711: LD_ADDR_VAR 0 7
44715: PUSH
44716: LD_VAR 0 2
44720: PUSH
44721: LD_INT 10
44723: DIVREAL
44724: ST_TO_ADDR
// time := 1 1$00 ;
44725: LD_ADDR_VAR 0 8
44729: PUSH
44730: LD_INT 2100
44732: ST_TO_ADDR
// if amount < min then
44733: LD_VAR 0 9
44737: PUSH
44738: LD_VAR 0 3
44742: LESS
44743: IFFALSE 44761
// r := r * 2 else
44745: LD_ADDR_VAR 0 7
44749: PUSH
44750: LD_VAR 0 7
44754: PUSH
44755: LD_INT 2
44757: MUL
44758: ST_TO_ADDR
44759: GO 44787
// if amount > max then
44761: LD_VAR 0 9
44765: PUSH
44766: LD_VAR 0 4
44770: GREATER
44771: IFFALSE 44787
// r := r / 2 ;
44773: LD_ADDR_VAR 0 7
44777: PUSH
44778: LD_VAR 0 7
44782: PUSH
44783: LD_INT 2
44785: DIVREAL
44786: ST_TO_ADDR
// time := time / r ;
44787: LD_ADDR_VAR 0 8
44791: PUSH
44792: LD_VAR 0 8
44796: PUSH
44797: LD_VAR 0 7
44801: DIVREAL
44802: ST_TO_ADDR
// if time < 0 then
44803: LD_VAR 0 8
44807: PUSH
44808: LD_INT 0
44810: LESS
44811: IFFALSE 44828
// time := time * - 1 ;
44813: LD_ADDR_VAR 0 8
44817: PUSH
44818: LD_VAR 0 8
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: MUL
44827: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44828: LD_VAR 0 8
44832: PUSH
44833: LD_INT 35
44835: PPUSH
44836: LD_INT 875
44838: PPUSH
44839: CALL_OW 12
44843: PLUS
44844: PPUSH
44845: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44849: LD_INT 1
44851: PPUSH
44852: LD_INT 5
44854: PPUSH
44855: CALL_OW 12
44859: PPUSH
44860: LD_VAR 0 1
44864: PPUSH
44865: LD_INT 1
44867: PPUSH
44868: CALL_OW 55
// end ;
44872: GO 44685
// end ;
44874: LD_VAR 0 5
44878: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44879: LD_INT 0
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
// if not turrets or not factories then
44889: LD_VAR 0 1
44893: NOT
44894: PUSH
44895: LD_VAR 0 2
44899: NOT
44900: OR
44901: IFFALSE 44905
// exit ;
44903: GO 45212
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44905: LD_ADDR_VAR 0 10
44909: PUSH
44910: LD_INT 5
44912: PUSH
44913: LD_INT 6
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 4
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 3
44932: PUSH
44933: LD_INT 5
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 24
44947: PUSH
44948: LD_INT 25
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 23
44957: PUSH
44958: LD_INT 27
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 42
44971: PUSH
44972: LD_INT 43
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 44
44981: PUSH
44982: LD_INT 46
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 45
44991: PUSH
44992: LD_INT 47
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: ST_TO_ADDR
// result := [ ] ;
45009: LD_ADDR_VAR 0 3
45013: PUSH
45014: EMPTY
45015: ST_TO_ADDR
// for i in turrets do
45016: LD_ADDR_VAR 0 4
45020: PUSH
45021: LD_VAR 0 1
45025: PUSH
45026: FOR_IN
45027: IFFALSE 45210
// begin nat := GetNation ( i ) ;
45029: LD_ADDR_VAR 0 7
45033: PUSH
45034: LD_VAR 0 4
45038: PPUSH
45039: CALL_OW 248
45043: ST_TO_ADDR
// weapon := 0 ;
45044: LD_ADDR_VAR 0 8
45048: PUSH
45049: LD_INT 0
45051: ST_TO_ADDR
// if not nat then
45052: LD_VAR 0 7
45056: NOT
45057: IFFALSE 45061
// continue ;
45059: GO 45026
// for j in list [ nat ] do
45061: LD_ADDR_VAR 0 5
45065: PUSH
45066: LD_VAR 0 10
45070: PUSH
45071: LD_VAR 0 7
45075: ARRAY
45076: PUSH
45077: FOR_IN
45078: IFFALSE 45119
// if GetBWeapon ( i ) = j [ 1 ] then
45080: LD_VAR 0 4
45084: PPUSH
45085: CALL_OW 269
45089: PUSH
45090: LD_VAR 0 5
45094: PUSH
45095: LD_INT 1
45097: ARRAY
45098: EQUAL
45099: IFFALSE 45117
// begin weapon := j [ 2 ] ;
45101: LD_ADDR_VAR 0 8
45105: PUSH
45106: LD_VAR 0 5
45110: PUSH
45111: LD_INT 2
45113: ARRAY
45114: ST_TO_ADDR
// break ;
45115: GO 45119
// end ;
45117: GO 45077
45119: POP
45120: POP
// if not weapon then
45121: LD_VAR 0 8
45125: NOT
45126: IFFALSE 45130
// continue ;
45128: GO 45026
// for k in factories do
45130: LD_ADDR_VAR 0 6
45134: PUSH
45135: LD_VAR 0 2
45139: PUSH
45140: FOR_IN
45141: IFFALSE 45206
// begin weapons := AvailableWeaponList ( k ) ;
45143: LD_ADDR_VAR 0 9
45147: PUSH
45148: LD_VAR 0 6
45152: PPUSH
45153: CALL_OW 478
45157: ST_TO_ADDR
// if not weapons then
45158: LD_VAR 0 9
45162: NOT
45163: IFFALSE 45167
// continue ;
45165: GO 45140
// if weapon in weapons then
45167: LD_VAR 0 8
45171: PUSH
45172: LD_VAR 0 9
45176: IN
45177: IFFALSE 45204
// begin result := [ i , weapon ] ;
45179: LD_ADDR_VAR 0 3
45183: PUSH
45184: LD_VAR 0 4
45188: PUSH
45189: LD_VAR 0 8
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: ST_TO_ADDR
// exit ;
45198: POP
45199: POP
45200: POP
45201: POP
45202: GO 45212
// end ; end ;
45204: GO 45140
45206: POP
45207: POP
// end ;
45208: GO 45026
45210: POP
45211: POP
// end ;
45212: LD_VAR 0 3
45216: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45217: LD_INT 0
45219: PPUSH
// if not side or side > 8 then
45220: LD_VAR 0 3
45224: NOT
45225: PUSH
45226: LD_VAR 0 3
45230: PUSH
45231: LD_INT 8
45233: GREATER
45234: OR
45235: IFFALSE 45239
// exit ;
45237: GO 45298
// if not range then
45239: LD_VAR 0 4
45243: NOT
45244: IFFALSE 45255
// range := - 12 ;
45246: LD_ADDR_VAR 0 4
45250: PUSH
45251: LD_INT 12
45253: NEG
45254: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45255: LD_VAR 0 1
45259: PPUSH
45260: LD_VAR 0 2
45264: PPUSH
45265: LD_VAR 0 3
45269: PPUSH
45270: LD_VAR 0 4
45274: PPUSH
45275: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45279: LD_VAR 0 1
45283: PPUSH
45284: LD_VAR 0 2
45288: PPUSH
45289: LD_VAR 0 3
45293: PPUSH
45294: CALL_OW 331
// end ;
45298: LD_VAR 0 5
45302: RET
// export function Video ( mode ) ; begin
45303: LD_INT 0
45305: PPUSH
// ingame_video = mode ;
45306: LD_ADDR_OWVAR 52
45310: PUSH
45311: LD_VAR 0 1
45315: ST_TO_ADDR
// interface_hidden = mode ;
45316: LD_ADDR_OWVAR 54
45320: PUSH
45321: LD_VAR 0 1
45325: ST_TO_ADDR
// end ;
45326: LD_VAR 0 2
45330: RET
// export function Join ( array , element ) ; begin
45331: LD_INT 0
45333: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45334: LD_ADDR_VAR 0 3
45338: PUSH
45339: LD_VAR 0 1
45343: PPUSH
45344: LD_VAR 0 1
45348: PUSH
45349: LD_INT 1
45351: PLUS
45352: PPUSH
45353: LD_VAR 0 2
45357: PPUSH
45358: CALL_OW 1
45362: ST_TO_ADDR
// end ;
45363: LD_VAR 0 3
45367: RET
// export function JoinUnion ( array , element ) ; begin
45368: LD_INT 0
45370: PPUSH
// result := array union element ;
45371: LD_ADDR_VAR 0 3
45375: PUSH
45376: LD_VAR 0 1
45380: PUSH
45381: LD_VAR 0 2
45385: UNION
45386: ST_TO_ADDR
// end ;
45387: LD_VAR 0 3
45391: RET
// export function GetBehemoths ( side ) ; begin
45392: LD_INT 0
45394: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
45395: LD_ADDR_VAR 0 2
45399: PUSH
45400: LD_INT 22
45402: PUSH
45403: LD_VAR 0 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 31
45414: PUSH
45415: LD_INT 25
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PPUSH
45426: CALL_OW 69
45430: ST_TO_ADDR
// end ;
45431: LD_VAR 0 2
45435: RET
// export function Shuffle ( array ) ; var i , index ; begin
45436: LD_INT 0
45438: PPUSH
45439: PPUSH
45440: PPUSH
// result := [ ] ;
45441: LD_ADDR_VAR 0 2
45445: PUSH
45446: EMPTY
45447: ST_TO_ADDR
// if not array then
45448: LD_VAR 0 1
45452: NOT
45453: IFFALSE 45457
// exit ;
45455: GO 45556
// Randomize ;
45457: CALL_OW 10
// for i = array downto 1 do
45461: LD_ADDR_VAR 0 3
45465: PUSH
45466: DOUBLE
45467: LD_VAR 0 1
45471: INC
45472: ST_TO_ADDR
45473: LD_INT 1
45475: PUSH
45476: FOR_DOWNTO
45477: IFFALSE 45554
// begin index := rand ( 1 , array ) ;
45479: LD_ADDR_VAR 0 4
45483: PUSH
45484: LD_INT 1
45486: PPUSH
45487: LD_VAR 0 1
45491: PPUSH
45492: CALL_OW 12
45496: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45497: LD_ADDR_VAR 0 2
45501: PUSH
45502: LD_VAR 0 2
45506: PPUSH
45507: LD_VAR 0 2
45511: PUSH
45512: LD_INT 1
45514: PLUS
45515: PPUSH
45516: LD_VAR 0 1
45520: PUSH
45521: LD_VAR 0 4
45525: ARRAY
45526: PPUSH
45527: CALL_OW 2
45531: ST_TO_ADDR
// array := Delete ( array , index ) ;
45532: LD_ADDR_VAR 0 1
45536: PUSH
45537: LD_VAR 0 1
45541: PPUSH
45542: LD_VAR 0 4
45546: PPUSH
45547: CALL_OW 3
45551: ST_TO_ADDR
// end ;
45552: GO 45476
45554: POP
45555: POP
// end ;
45556: LD_VAR 0 2
45560: RET
// export function GetBaseMaterials ( base ) ; begin
45561: LD_INT 0
45563: PPUSH
// result := [ 0 , 0 , 0 ] ;
45564: LD_ADDR_VAR 0 2
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: LIST
45582: ST_TO_ADDR
// if not base then
45583: LD_VAR 0 1
45587: NOT
45588: IFFALSE 45592
// exit ;
45590: GO 45641
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45592: LD_ADDR_VAR 0 2
45596: PUSH
45597: LD_VAR 0 1
45601: PPUSH
45602: LD_INT 1
45604: PPUSH
45605: CALL_OW 275
45609: PUSH
45610: LD_VAR 0 1
45614: PPUSH
45615: LD_INT 2
45617: PPUSH
45618: CALL_OW 275
45622: PUSH
45623: LD_VAR 0 1
45627: PPUSH
45628: LD_INT 3
45630: PPUSH
45631: CALL_OW 275
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: ST_TO_ADDR
// end ;
45641: LD_VAR 0 2
45645: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45646: LD_INT 0
45648: PPUSH
45649: PPUSH
// result := array ;
45650: LD_ADDR_VAR 0 3
45654: PUSH
45655: LD_VAR 0 1
45659: ST_TO_ADDR
// if size >= result then
45660: LD_VAR 0 2
45664: PUSH
45665: LD_VAR 0 3
45669: GREATEREQUAL
45670: IFFALSE 45674
// exit ;
45672: GO 45724
// if size then
45674: LD_VAR 0 2
45678: IFFALSE 45724
// for i := array downto size do
45680: LD_ADDR_VAR 0 4
45684: PUSH
45685: DOUBLE
45686: LD_VAR 0 1
45690: INC
45691: ST_TO_ADDR
45692: LD_VAR 0 2
45696: PUSH
45697: FOR_DOWNTO
45698: IFFALSE 45722
// result := Delete ( result , result ) ;
45700: LD_ADDR_VAR 0 3
45704: PUSH
45705: LD_VAR 0 3
45709: PPUSH
45710: LD_VAR 0 3
45714: PPUSH
45715: CALL_OW 3
45719: ST_TO_ADDR
45720: GO 45697
45722: POP
45723: POP
// end ;
45724: LD_VAR 0 3
45728: RET
// export function ComExit ( unit ) ; var tmp ; begin
45729: LD_INT 0
45731: PPUSH
45732: PPUSH
// if not IsInUnit ( unit ) then
45733: LD_VAR 0 1
45737: PPUSH
45738: CALL_OW 310
45742: NOT
45743: IFFALSE 45747
// exit ;
45745: GO 45807
// tmp := IsInUnit ( unit ) ;
45747: LD_ADDR_VAR 0 3
45751: PUSH
45752: LD_VAR 0 1
45756: PPUSH
45757: CALL_OW 310
45761: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45762: LD_VAR 0 3
45766: PPUSH
45767: CALL_OW 247
45771: PUSH
45772: LD_INT 2
45774: EQUAL
45775: IFFALSE 45788
// ComExitVehicle ( unit ) else
45777: LD_VAR 0 1
45781: PPUSH
45782: CALL_OW 121
45786: GO 45797
// ComExitBuilding ( unit ) ;
45788: LD_VAR 0 1
45792: PPUSH
45793: CALL_OW 122
// result := tmp ;
45797: LD_ADDR_VAR 0 2
45801: PUSH
45802: LD_VAR 0 3
45806: ST_TO_ADDR
// end ;
45807: LD_VAR 0 2
45811: RET
// export function ComExitAll ( units ) ; var i ; begin
45812: LD_INT 0
45814: PPUSH
45815: PPUSH
// if not units then
45816: LD_VAR 0 1
45820: NOT
45821: IFFALSE 45825
// exit ;
45823: GO 45851
// for i in units do
45825: LD_ADDR_VAR 0 3
45829: PUSH
45830: LD_VAR 0 1
45834: PUSH
45835: FOR_IN
45836: IFFALSE 45849
// ComExit ( i ) ;
45838: LD_VAR 0 3
45842: PPUSH
45843: CALL 45729 0 1
45847: GO 45835
45849: POP
45850: POP
// end ;
45851: LD_VAR 0 2
45855: RET
// export function ResetHc ; begin
45856: LD_INT 0
45858: PPUSH
// InitHc ;
45859: CALL_OW 19
// hc_importance := 0 ;
45863: LD_ADDR_OWVAR 32
45867: PUSH
45868: LD_INT 0
45870: ST_TO_ADDR
// end ;
45871: LD_VAR 0 1
45875: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45876: LD_INT 0
45878: PPUSH
45879: PPUSH
45880: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45881: LD_ADDR_VAR 0 6
45885: PUSH
45886: LD_VAR 0 1
45890: PUSH
45891: LD_VAR 0 3
45895: PLUS
45896: PUSH
45897: LD_INT 2
45899: DIV
45900: ST_TO_ADDR
// if _x < 0 then
45901: LD_VAR 0 6
45905: PUSH
45906: LD_INT 0
45908: LESS
45909: IFFALSE 45926
// _x := _x * - 1 ;
45911: LD_ADDR_VAR 0 6
45915: PUSH
45916: LD_VAR 0 6
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: MUL
45925: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45926: LD_ADDR_VAR 0 7
45930: PUSH
45931: LD_VAR 0 2
45935: PUSH
45936: LD_VAR 0 4
45940: PLUS
45941: PUSH
45942: LD_INT 2
45944: DIV
45945: ST_TO_ADDR
// if _y < 0 then
45946: LD_VAR 0 7
45950: PUSH
45951: LD_INT 0
45953: LESS
45954: IFFALSE 45971
// _y := _y * - 1 ;
45956: LD_ADDR_VAR 0 7
45960: PUSH
45961: LD_VAR 0 7
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: MUL
45970: ST_TO_ADDR
// result := [ _x , _y ] ;
45971: LD_ADDR_VAR 0 5
45975: PUSH
45976: LD_VAR 0 6
45980: PUSH
45981: LD_VAR 0 7
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// end ;
45990: LD_VAR 0 5
45994: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45995: LD_INT 0
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
// task := GetTaskList ( unit ) ;
46001: LD_ADDR_VAR 0 7
46005: PUSH
46006: LD_VAR 0 1
46010: PPUSH
46011: CALL_OW 437
46015: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46016: LD_VAR 0 7
46020: NOT
46021: PUSH
46022: LD_VAR 0 1
46026: PPUSH
46027: LD_VAR 0 2
46031: PPUSH
46032: CALL_OW 308
46036: NOT
46037: AND
46038: IFFALSE 46042
// exit ;
46040: GO 46160
// if IsInArea ( unit , area ) then
46042: LD_VAR 0 1
46046: PPUSH
46047: LD_VAR 0 2
46051: PPUSH
46052: CALL_OW 308
46056: IFFALSE 46074
// begin ComMoveToArea ( unit , goAway ) ;
46058: LD_VAR 0 1
46062: PPUSH
46063: LD_VAR 0 3
46067: PPUSH
46068: CALL_OW 113
// exit ;
46072: GO 46160
// end ; if task [ 1 ] [ 1 ] <> M then
46074: LD_VAR 0 7
46078: PUSH
46079: LD_INT 1
46081: ARRAY
46082: PUSH
46083: LD_INT 1
46085: ARRAY
46086: PUSH
46087: LD_STRING M
46089: NONEQUAL
46090: IFFALSE 46094
// exit ;
46092: GO 46160
// x := task [ 1 ] [ 2 ] ;
46094: LD_ADDR_VAR 0 5
46098: PUSH
46099: LD_VAR 0 7
46103: PUSH
46104: LD_INT 1
46106: ARRAY
46107: PUSH
46108: LD_INT 2
46110: ARRAY
46111: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46112: LD_ADDR_VAR 0 6
46116: PUSH
46117: LD_VAR 0 7
46121: PUSH
46122: LD_INT 1
46124: ARRAY
46125: PUSH
46126: LD_INT 3
46128: ARRAY
46129: ST_TO_ADDR
// if InArea ( x , y , area ) then
46130: LD_VAR 0 5
46134: PPUSH
46135: LD_VAR 0 6
46139: PPUSH
46140: LD_VAR 0 2
46144: PPUSH
46145: CALL_OW 309
46149: IFFALSE 46160
// ComStop ( unit ) ;
46151: LD_VAR 0 1
46155: PPUSH
46156: CALL_OW 141
// end ;
46160: LD_VAR 0 4
46164: RET
// export function Abs ( value ) ; begin
46165: LD_INT 0
46167: PPUSH
// result := value ;
46168: LD_ADDR_VAR 0 2
46172: PUSH
46173: LD_VAR 0 1
46177: ST_TO_ADDR
// if value < 0 then
46178: LD_VAR 0 1
46182: PUSH
46183: LD_INT 0
46185: LESS
46186: IFFALSE 46203
// result := value * - 1 ;
46188: LD_ADDR_VAR 0 2
46192: PUSH
46193: LD_VAR 0 1
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: MUL
46202: ST_TO_ADDR
// end ;
46203: LD_VAR 0 2
46207: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46208: LD_INT 0
46210: PPUSH
46211: PPUSH
46212: PPUSH
46213: PPUSH
46214: PPUSH
46215: PPUSH
46216: PPUSH
46217: PPUSH
// if not unit or not building then
46218: LD_VAR 0 1
46222: NOT
46223: PUSH
46224: LD_VAR 0 2
46228: NOT
46229: OR
46230: IFFALSE 46234
// exit ;
46232: GO 46460
// x := GetX ( building ) ;
46234: LD_ADDR_VAR 0 4
46238: PUSH
46239: LD_VAR 0 2
46243: PPUSH
46244: CALL_OW 250
46248: ST_TO_ADDR
// y := GetY ( building ) ;
46249: LD_ADDR_VAR 0 6
46253: PUSH
46254: LD_VAR 0 2
46258: PPUSH
46259: CALL_OW 251
46263: ST_TO_ADDR
// d := GetDir ( building ) ;
46264: LD_ADDR_VAR 0 8
46268: PUSH
46269: LD_VAR 0 2
46273: PPUSH
46274: CALL_OW 254
46278: ST_TO_ADDR
// r := 4 ;
46279: LD_ADDR_VAR 0 9
46283: PUSH
46284: LD_INT 4
46286: ST_TO_ADDR
// for i := 1 to 5 do
46287: LD_ADDR_VAR 0 10
46291: PUSH
46292: DOUBLE
46293: LD_INT 1
46295: DEC
46296: ST_TO_ADDR
46297: LD_INT 5
46299: PUSH
46300: FOR_TO
46301: IFFALSE 46458
// begin _x := ShiftX ( x , d , r + i ) ;
46303: LD_ADDR_VAR 0 5
46307: PUSH
46308: LD_VAR 0 4
46312: PPUSH
46313: LD_VAR 0 8
46317: PPUSH
46318: LD_VAR 0 9
46322: PUSH
46323: LD_VAR 0 10
46327: PLUS
46328: PPUSH
46329: CALL_OW 272
46333: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46334: LD_ADDR_VAR 0 7
46338: PUSH
46339: LD_VAR 0 6
46343: PPUSH
46344: LD_VAR 0 8
46348: PPUSH
46349: LD_VAR 0 9
46353: PUSH
46354: LD_VAR 0 10
46358: PLUS
46359: PPUSH
46360: CALL_OW 273
46364: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46365: LD_VAR 0 5
46369: PPUSH
46370: LD_VAR 0 7
46374: PPUSH
46375: CALL_OW 488
46379: PUSH
46380: LD_VAR 0 5
46384: PPUSH
46385: LD_VAR 0 7
46389: PPUSH
46390: CALL_OW 428
46394: PPUSH
46395: CALL_OW 247
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: IN
46410: NOT
46411: AND
46412: IFFALSE 46456
// begin ComMoveXY ( unit , _x , _y ) ;
46414: LD_VAR 0 1
46418: PPUSH
46419: LD_VAR 0 5
46423: PPUSH
46424: LD_VAR 0 7
46428: PPUSH
46429: CALL_OW 111
// result := [ _x , _y ] ;
46433: LD_ADDR_VAR 0 3
46437: PUSH
46438: LD_VAR 0 5
46442: PUSH
46443: LD_VAR 0 7
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// exit ;
46452: POP
46453: POP
46454: GO 46460
// end ; end ;
46456: GO 46300
46458: POP
46459: POP
// end ;
46460: LD_VAR 0 3
46464: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
46465: LD_INT 0
46467: PPUSH
46468: PPUSH
46469: PPUSH
// result := 0 ;
46470: LD_ADDR_VAR 0 3
46474: PUSH
46475: LD_INT 0
46477: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
46478: LD_VAR 0 1
46482: PUSH
46483: LD_INT 0
46485: LESS
46486: PUSH
46487: LD_VAR 0 1
46491: PUSH
46492: LD_INT 8
46494: GREATER
46495: OR
46496: PUSH
46497: LD_VAR 0 2
46501: PUSH
46502: LD_INT 0
46504: LESS
46505: OR
46506: PUSH
46507: LD_VAR 0 2
46511: PUSH
46512: LD_INT 8
46514: GREATER
46515: OR
46516: IFFALSE 46520
// exit ;
46518: GO 46595
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
46520: LD_ADDR_VAR 0 4
46524: PUSH
46525: LD_INT 22
46527: PUSH
46528: LD_VAR 0 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PPUSH
46537: CALL_OW 69
46541: PUSH
46542: FOR_IN
46543: IFFALSE 46593
// begin un := UnitShoot ( i ) ;
46545: LD_ADDR_VAR 0 5
46549: PUSH
46550: LD_VAR 0 4
46554: PPUSH
46555: CALL_OW 504
46559: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46560: LD_VAR 0 5
46564: PPUSH
46565: CALL_OW 255
46569: PUSH
46570: LD_VAR 0 1
46574: EQUAL
46575: IFFALSE 46591
// begin result := un ;
46577: LD_ADDR_VAR 0 3
46581: PUSH
46582: LD_VAR 0 5
46586: ST_TO_ADDR
// exit ;
46587: POP
46588: POP
46589: GO 46595
// end ; end ;
46591: GO 46542
46593: POP
46594: POP
// end ;
46595: LD_VAR 0 3
46599: RET
// export function GetCargoBay ( units ) ; begin
46600: LD_INT 0
46602: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
46603: LD_ADDR_VAR 0 2
46607: PUSH
46608: LD_VAR 0 1
46612: PPUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 34
46618: PUSH
46619: LD_INT 12
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 34
46628: PUSH
46629: LD_INT 51
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 34
46638: PUSH
46639: LD_INT 32
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 34
46648: PUSH
46649: LD_EXP 42
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: PPUSH
46665: CALL_OW 72
46669: ST_TO_ADDR
// end ;
46670: LD_VAR 0 2
46674: RET
// export function Negate ( value ) ; begin
46675: LD_INT 0
46677: PPUSH
// result := not value ;
46678: LD_ADDR_VAR 0 2
46682: PUSH
46683: LD_VAR 0 1
46687: NOT
46688: ST_TO_ADDR
// end ;
46689: LD_VAR 0 2
46693: RET
// export function Inc ( value ) ; begin
46694: LD_INT 0
46696: PPUSH
// result := value + 1 ;
46697: LD_ADDR_VAR 0 2
46701: PUSH
46702: LD_VAR 0 1
46706: PUSH
46707: LD_INT 1
46709: PLUS
46710: ST_TO_ADDR
// end ;
46711: LD_VAR 0 2
46715: RET
// export function Dec ( value ) ; begin
46716: LD_INT 0
46718: PPUSH
// result := value - 1 ;
46719: LD_ADDR_VAR 0 2
46723: PUSH
46724: LD_VAR 0 1
46728: PUSH
46729: LD_INT 1
46731: MINUS
46732: ST_TO_ADDR
// end ;
46733: LD_VAR 0 2
46737: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46738: LD_INT 0
46740: PPUSH
46741: PPUSH
46742: PPUSH
46743: PPUSH
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46748: LD_VAR 0 1
46752: PPUSH
46753: LD_VAR 0 2
46757: PPUSH
46758: CALL_OW 488
46762: NOT
46763: PUSH
46764: LD_VAR 0 3
46768: PPUSH
46769: LD_VAR 0 4
46773: PPUSH
46774: CALL_OW 488
46778: NOT
46779: OR
46780: IFFALSE 46793
// begin result := - 1 ;
46782: LD_ADDR_VAR 0 5
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: ST_TO_ADDR
// exit ;
46791: GO 47028
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46793: LD_ADDR_VAR 0 12
46797: PUSH
46798: LD_VAR 0 1
46802: PPUSH
46803: LD_VAR 0 2
46807: PPUSH
46808: LD_VAR 0 3
46812: PPUSH
46813: LD_VAR 0 4
46817: PPUSH
46818: CALL 45876 0 4
46822: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46823: LD_ADDR_VAR 0 11
46827: PUSH
46828: LD_VAR 0 1
46832: PPUSH
46833: LD_VAR 0 2
46837: PPUSH
46838: LD_VAR 0 12
46842: PUSH
46843: LD_INT 1
46845: ARRAY
46846: PPUSH
46847: LD_VAR 0 12
46851: PUSH
46852: LD_INT 2
46854: ARRAY
46855: PPUSH
46856: CALL_OW 298
46860: ST_TO_ADDR
// distance := 9999 ;
46861: LD_ADDR_VAR 0 10
46865: PUSH
46866: LD_INT 9999
46868: ST_TO_ADDR
// for i := 0 to 5 do
46869: LD_ADDR_VAR 0 6
46873: PUSH
46874: DOUBLE
46875: LD_INT 0
46877: DEC
46878: ST_TO_ADDR
46879: LD_INT 5
46881: PUSH
46882: FOR_TO
46883: IFFALSE 47026
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46885: LD_ADDR_VAR 0 7
46889: PUSH
46890: LD_VAR 0 1
46894: PPUSH
46895: LD_VAR 0 6
46899: PPUSH
46900: LD_VAR 0 11
46904: PPUSH
46905: CALL_OW 272
46909: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46910: LD_ADDR_VAR 0 8
46914: PUSH
46915: LD_VAR 0 2
46919: PPUSH
46920: LD_VAR 0 6
46924: PPUSH
46925: LD_VAR 0 11
46929: PPUSH
46930: CALL_OW 273
46934: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46935: LD_VAR 0 7
46939: PPUSH
46940: LD_VAR 0 8
46944: PPUSH
46945: CALL_OW 488
46949: NOT
46950: IFFALSE 46954
// continue ;
46952: GO 46882
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46954: LD_ADDR_VAR 0 9
46958: PUSH
46959: LD_VAR 0 12
46963: PUSH
46964: LD_INT 1
46966: ARRAY
46967: PPUSH
46968: LD_VAR 0 12
46972: PUSH
46973: LD_INT 2
46975: ARRAY
46976: PPUSH
46977: LD_VAR 0 7
46981: PPUSH
46982: LD_VAR 0 8
46986: PPUSH
46987: CALL_OW 298
46991: ST_TO_ADDR
// if tmp < distance then
46992: LD_VAR 0 9
46996: PUSH
46997: LD_VAR 0 10
47001: LESS
47002: IFFALSE 47024
// begin result := i ;
47004: LD_ADDR_VAR 0 5
47008: PUSH
47009: LD_VAR 0 6
47013: ST_TO_ADDR
// distance := tmp ;
47014: LD_ADDR_VAR 0 10
47018: PUSH
47019: LD_VAR 0 9
47023: ST_TO_ADDR
// end ; end ;
47024: GO 46882
47026: POP
47027: POP
// end ;
47028: LD_VAR 0 5
47032: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47033: LD_INT 0
47035: PPUSH
47036: PPUSH
// if not driver or not IsInUnit ( driver ) then
47037: LD_VAR 0 1
47041: NOT
47042: PUSH
47043: LD_VAR 0 1
47047: PPUSH
47048: CALL_OW 310
47052: NOT
47053: OR
47054: IFFALSE 47058
// exit ;
47056: GO 47148
// vehicle := IsInUnit ( driver ) ;
47058: LD_ADDR_VAR 0 3
47062: PUSH
47063: LD_VAR 0 1
47067: PPUSH
47068: CALL_OW 310
47072: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47073: LD_VAR 0 1
47077: PPUSH
47078: LD_STRING \
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: PUSH
47108: LD_STRING E
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_VAR 0 3
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PPUSH
47144: CALL_OW 446
// end ;
47148: LD_VAR 0 2
47152: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47153: LD_INT 0
47155: PPUSH
47156: PPUSH
// if not driver or not IsInUnit ( driver ) then
47157: LD_VAR 0 1
47161: NOT
47162: PUSH
47163: LD_VAR 0 1
47167: PPUSH
47168: CALL_OW 310
47172: NOT
47173: OR
47174: IFFALSE 47178
// exit ;
47176: GO 47268
// vehicle := IsInUnit ( driver ) ;
47178: LD_ADDR_VAR 0 3
47182: PUSH
47183: LD_VAR 0 1
47187: PPUSH
47188: CALL_OW 310
47192: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47193: LD_VAR 0 1
47197: PPUSH
47198: LD_STRING \
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: PUSH
47228: LD_STRING E
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_VAR 0 3
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PPUSH
47264: CALL_OW 447
// end ;
47268: LD_VAR 0 2
47272: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47273: LD_INT 0
47275: PPUSH
47276: PPUSH
47277: PPUSH
// tmp := [ ] ;
47278: LD_ADDR_VAR 0 5
47282: PUSH
47283: EMPTY
47284: ST_TO_ADDR
// for i in units do
47285: LD_ADDR_VAR 0 4
47289: PUSH
47290: LD_VAR 0 1
47294: PUSH
47295: FOR_IN
47296: IFFALSE 47334
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47298: LD_ADDR_VAR 0 5
47302: PUSH
47303: LD_VAR 0 5
47307: PPUSH
47308: LD_VAR 0 5
47312: PUSH
47313: LD_INT 1
47315: PLUS
47316: PPUSH
47317: LD_VAR 0 4
47321: PPUSH
47322: CALL_OW 256
47326: PPUSH
47327: CALL_OW 2
47331: ST_TO_ADDR
47332: GO 47295
47334: POP
47335: POP
// if not tmp then
47336: LD_VAR 0 5
47340: NOT
47341: IFFALSE 47345
// exit ;
47343: GO 47393
// if asc then
47345: LD_VAR 0 2
47349: IFFALSE 47373
// result := SortListByListAsc ( units , tmp ) else
47351: LD_ADDR_VAR 0 3
47355: PUSH
47356: LD_VAR 0 1
47360: PPUSH
47361: LD_VAR 0 5
47365: PPUSH
47366: CALL_OW 76
47370: ST_TO_ADDR
47371: GO 47393
// result := SortListByListDesc ( units , tmp ) ;
47373: LD_ADDR_VAR 0 3
47377: PUSH
47378: LD_VAR 0 1
47382: PPUSH
47383: LD_VAR 0 5
47387: PPUSH
47388: CALL_OW 77
47392: ST_TO_ADDR
// end ;
47393: LD_VAR 0 3
47397: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47398: LD_INT 0
47400: PPUSH
47401: PPUSH
// task := GetTaskList ( mech ) ;
47402: LD_ADDR_VAR 0 4
47406: PUSH
47407: LD_VAR 0 1
47411: PPUSH
47412: CALL_OW 437
47416: ST_TO_ADDR
// if not task then
47417: LD_VAR 0 4
47421: NOT
47422: IFFALSE 47426
// exit ;
47424: GO 47468
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
47426: LD_ADDR_VAR 0 3
47430: PUSH
47431: LD_VAR 0 4
47435: PUSH
47436: LD_INT 1
47438: ARRAY
47439: PUSH
47440: LD_INT 1
47442: ARRAY
47443: PUSH
47444: LD_STRING r
47446: EQUAL
47447: PUSH
47448: LD_VAR 0 4
47452: PUSH
47453: LD_INT 1
47455: ARRAY
47456: PUSH
47457: LD_INT 4
47459: ARRAY
47460: PUSH
47461: LD_VAR 0 2
47465: EQUAL
47466: AND
47467: ST_TO_ADDR
// end ;
47468: LD_VAR 0 3
47472: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
47473: LD_INT 0
47475: PPUSH
// SetDir ( unit , d ) ;
47476: LD_VAR 0 1
47480: PPUSH
47481: LD_VAR 0 4
47485: PPUSH
47486: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
47490: LD_VAR 0 1
47494: PPUSH
47495: LD_VAR 0 2
47499: PPUSH
47500: LD_VAR 0 3
47504: PPUSH
47505: LD_VAR 0 5
47509: PPUSH
47510: CALL_OW 48
// end ;
47514: LD_VAR 0 6
47518: RET
// export function ToNaturalNumber ( number ) ; begin
47519: LD_INT 0
47521: PPUSH
// result := number div 1 ;
47522: LD_ADDR_VAR 0 2
47526: PUSH
47527: LD_VAR 0 1
47531: PUSH
47532: LD_INT 1
47534: DIV
47535: ST_TO_ADDR
// if number < 0 then
47536: LD_VAR 0 1
47540: PUSH
47541: LD_INT 0
47543: LESS
47544: IFFALSE 47554
// result := 0 ;
47546: LD_ADDR_VAR 0 2
47550: PUSH
47551: LD_INT 0
47553: ST_TO_ADDR
// end ;
47554: LD_VAR 0 2
47558: RET
// export function SortByClass ( units , class ) ; var un ; begin
47559: LD_INT 0
47561: PPUSH
47562: PPUSH
// if not units or not class then
47563: LD_VAR 0 1
47567: NOT
47568: PUSH
47569: LD_VAR 0 2
47573: NOT
47574: OR
47575: IFFALSE 47579
// exit ;
47577: GO 47674
// result := [ ] ;
47579: LD_ADDR_VAR 0 3
47583: PUSH
47584: EMPTY
47585: ST_TO_ADDR
// for un in units do
47586: LD_ADDR_VAR 0 4
47590: PUSH
47591: LD_VAR 0 1
47595: PUSH
47596: FOR_IN
47597: IFFALSE 47672
// if GetClass ( un ) = class then
47599: LD_VAR 0 4
47603: PPUSH
47604: CALL_OW 257
47608: PUSH
47609: LD_VAR 0 2
47613: EQUAL
47614: IFFALSE 47641
// result := Insert ( result , 1 , un ) else
47616: LD_ADDR_VAR 0 3
47620: PUSH
47621: LD_VAR 0 3
47625: PPUSH
47626: LD_INT 1
47628: PPUSH
47629: LD_VAR 0 4
47633: PPUSH
47634: CALL_OW 2
47638: ST_TO_ADDR
47639: GO 47670
// result := Replace ( result , result + 1 , un ) ;
47641: LD_ADDR_VAR 0 3
47645: PUSH
47646: LD_VAR 0 3
47650: PPUSH
47651: LD_VAR 0 3
47655: PUSH
47656: LD_INT 1
47658: PLUS
47659: PPUSH
47660: LD_VAR 0 4
47664: PPUSH
47665: CALL_OW 1
47669: ST_TO_ADDR
47670: GO 47596
47672: POP
47673: POP
// end ;
47674: LD_VAR 0 3
47678: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47679: LD_INT 0
47681: PPUSH
47682: PPUSH
47683: PPUSH
47684: PPUSH
47685: PPUSH
47686: PPUSH
47687: PPUSH
// result := [ ] ;
47688: LD_ADDR_VAR 0 4
47692: PUSH
47693: EMPTY
47694: ST_TO_ADDR
// if x - r < 0 then
47695: LD_VAR 0 1
47699: PUSH
47700: LD_VAR 0 3
47704: MINUS
47705: PUSH
47706: LD_INT 0
47708: LESS
47709: IFFALSE 47721
// min_x := 0 else
47711: LD_ADDR_VAR 0 8
47715: PUSH
47716: LD_INT 0
47718: ST_TO_ADDR
47719: GO 47737
// min_x := x - r ;
47721: LD_ADDR_VAR 0 8
47725: PUSH
47726: LD_VAR 0 1
47730: PUSH
47731: LD_VAR 0 3
47735: MINUS
47736: ST_TO_ADDR
// if y - r < 0 then
47737: LD_VAR 0 2
47741: PUSH
47742: LD_VAR 0 3
47746: MINUS
47747: PUSH
47748: LD_INT 0
47750: LESS
47751: IFFALSE 47763
// min_y := 0 else
47753: LD_ADDR_VAR 0 7
47757: PUSH
47758: LD_INT 0
47760: ST_TO_ADDR
47761: GO 47779
// min_y := y - r ;
47763: LD_ADDR_VAR 0 7
47767: PUSH
47768: LD_VAR 0 2
47772: PUSH
47773: LD_VAR 0 3
47777: MINUS
47778: ST_TO_ADDR
// max_x := x + r ;
47779: LD_ADDR_VAR 0 9
47783: PUSH
47784: LD_VAR 0 1
47788: PUSH
47789: LD_VAR 0 3
47793: PLUS
47794: ST_TO_ADDR
// max_y := y + r ;
47795: LD_ADDR_VAR 0 10
47799: PUSH
47800: LD_VAR 0 2
47804: PUSH
47805: LD_VAR 0 3
47809: PLUS
47810: ST_TO_ADDR
// for _x = min_x to max_x do
47811: LD_ADDR_VAR 0 5
47815: PUSH
47816: DOUBLE
47817: LD_VAR 0 8
47821: DEC
47822: ST_TO_ADDR
47823: LD_VAR 0 9
47827: PUSH
47828: FOR_TO
47829: IFFALSE 47930
// for _y = min_y to max_y do
47831: LD_ADDR_VAR 0 6
47835: PUSH
47836: DOUBLE
47837: LD_VAR 0 7
47841: DEC
47842: ST_TO_ADDR
47843: LD_VAR 0 10
47847: PUSH
47848: FOR_TO
47849: IFFALSE 47926
// begin if not ValidHex ( _x , _y ) then
47851: LD_VAR 0 5
47855: PPUSH
47856: LD_VAR 0 6
47860: PPUSH
47861: CALL_OW 488
47865: NOT
47866: IFFALSE 47870
// continue ;
47868: GO 47848
// if GetResourceTypeXY ( _x , _y ) then
47870: LD_VAR 0 5
47874: PPUSH
47875: LD_VAR 0 6
47879: PPUSH
47880: CALL_OW 283
47884: IFFALSE 47924
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47886: LD_ADDR_VAR 0 4
47890: PUSH
47891: LD_VAR 0 4
47895: PPUSH
47896: LD_VAR 0 4
47900: PUSH
47901: LD_INT 1
47903: PLUS
47904: PPUSH
47905: LD_VAR 0 5
47909: PUSH
47910: LD_VAR 0 6
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PPUSH
47919: CALL_OW 1
47923: ST_TO_ADDR
// end ;
47924: GO 47848
47926: POP
47927: POP
47928: GO 47828
47930: POP
47931: POP
// end ;
47932: LD_VAR 0 4
47936: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47937: LD_INT 0
47939: PPUSH
47940: PPUSH
47941: PPUSH
47942: PPUSH
47943: PPUSH
47944: PPUSH
47945: PPUSH
47946: PPUSH
// if not units then
47947: LD_VAR 0 1
47951: NOT
47952: IFFALSE 47956
// exit ;
47954: GO 48482
// result := UnitFilter ( units , [ f_ok ] ) ;
47956: LD_ADDR_VAR 0 3
47960: PUSH
47961: LD_VAR 0 1
47965: PPUSH
47966: LD_INT 50
47968: PUSH
47969: EMPTY
47970: LIST
47971: PPUSH
47972: CALL_OW 72
47976: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47977: LD_ADDR_VAR 0 8
47981: PUSH
47982: LD_VAR 0 1
47986: PUSH
47987: LD_INT 1
47989: ARRAY
47990: PPUSH
47991: CALL_OW 255
47995: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
47996: LD_ADDR_VAR 0 10
48000: PUSH
48001: LD_INT 29
48003: PUSH
48004: LD_EXP 45
48008: PUSH
48009: LD_INT 49
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// if not result then
48017: LD_VAR 0 3
48021: NOT
48022: IFFALSE 48026
// exit ;
48024: GO 48482
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48026: LD_ADDR_VAR 0 5
48030: PUSH
48031: LD_INT 81
48033: PUSH
48034: LD_VAR 0 8
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PPUSH
48043: CALL_OW 69
48047: ST_TO_ADDR
// for i in result do
48048: LD_ADDR_VAR 0 4
48052: PUSH
48053: LD_VAR 0 3
48057: PUSH
48058: FOR_IN
48059: IFFALSE 48480
// begin tag := GetTag ( i ) + 1 ;
48061: LD_ADDR_VAR 0 9
48065: PUSH
48066: LD_VAR 0 4
48070: PPUSH
48071: CALL_OW 110
48075: PUSH
48076: LD_INT 1
48078: PLUS
48079: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48080: LD_ADDR_VAR 0 7
48084: PUSH
48085: LD_VAR 0 4
48089: PPUSH
48090: CALL_OW 250
48094: PPUSH
48095: LD_VAR 0 4
48099: PPUSH
48100: CALL_OW 251
48104: PPUSH
48105: LD_INT 6
48107: PPUSH
48108: CALL 47679 0 3
48112: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48113: LD_VAR 0 4
48117: PPUSH
48118: CALL_OW 247
48122: PUSH
48123: LD_INT 2
48125: EQUAL
48126: PUSH
48127: LD_VAR 0 7
48131: AND
48132: PUSH
48133: LD_VAR 0 4
48137: PPUSH
48138: CALL_OW 264
48142: PUSH
48143: LD_VAR 0 10
48147: IN
48148: NOT
48149: AND
48150: IFFALSE 48189
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48152: LD_VAR 0 4
48156: PPUSH
48157: LD_VAR 0 7
48161: PUSH
48162: LD_INT 1
48164: ARRAY
48165: PUSH
48166: LD_INT 1
48168: ARRAY
48169: PPUSH
48170: LD_VAR 0 7
48174: PUSH
48175: LD_INT 1
48177: ARRAY
48178: PUSH
48179: LD_INT 2
48181: ARRAY
48182: PPUSH
48183: CALL_OW 116
48187: GO 48478
// if path > tag then
48189: LD_VAR 0 2
48193: PUSH
48194: LD_VAR 0 9
48198: GREATER
48199: IFFALSE 48407
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
48201: LD_ADDR_VAR 0 6
48205: PUSH
48206: LD_VAR 0 5
48210: PPUSH
48211: LD_INT 91
48213: PUSH
48214: LD_VAR 0 4
48218: PUSH
48219: LD_INT 8
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: PPUSH
48227: CALL_OW 72
48231: ST_TO_ADDR
// if nearEnemy then
48232: LD_VAR 0 6
48236: IFFALSE 48305
// begin if GetWeapon ( i ) = ru_time_lapser then
48238: LD_VAR 0 4
48242: PPUSH
48243: CALL_OW 264
48247: PUSH
48248: LD_INT 49
48250: EQUAL
48251: IFFALSE 48279
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48253: LD_VAR 0 4
48257: PPUSH
48258: LD_VAR 0 6
48262: PPUSH
48263: LD_VAR 0 4
48267: PPUSH
48268: CALL_OW 74
48272: PPUSH
48273: CALL_OW 112
48277: GO 48303
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
48279: LD_VAR 0 4
48283: PPUSH
48284: LD_VAR 0 6
48288: PPUSH
48289: LD_VAR 0 4
48293: PPUSH
48294: CALL_OW 74
48298: PPUSH
48299: CALL_OW 115
// end else
48303: GO 48405
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48305: LD_VAR 0 4
48309: PPUSH
48310: LD_VAR 0 2
48314: PUSH
48315: LD_VAR 0 9
48319: ARRAY
48320: PUSH
48321: LD_INT 1
48323: ARRAY
48324: PPUSH
48325: LD_VAR 0 2
48329: PUSH
48330: LD_VAR 0 9
48334: ARRAY
48335: PUSH
48336: LD_INT 2
48338: ARRAY
48339: PPUSH
48340: CALL_OW 297
48344: PUSH
48345: LD_INT 6
48347: GREATER
48348: IFFALSE 48391
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48350: LD_VAR 0 4
48354: PPUSH
48355: LD_VAR 0 2
48359: PUSH
48360: LD_VAR 0 9
48364: ARRAY
48365: PUSH
48366: LD_INT 1
48368: ARRAY
48369: PPUSH
48370: LD_VAR 0 2
48374: PUSH
48375: LD_VAR 0 9
48379: ARRAY
48380: PUSH
48381: LD_INT 2
48383: ARRAY
48384: PPUSH
48385: CALL_OW 114
48389: GO 48405
// SetTag ( i , tag ) ;
48391: LD_VAR 0 4
48395: PPUSH
48396: LD_VAR 0 9
48400: PPUSH
48401: CALL_OW 109
// end else
48405: GO 48478
// if enemy then
48407: LD_VAR 0 5
48411: IFFALSE 48478
// begin if GetWeapon ( i ) = ru_time_lapser then
48413: LD_VAR 0 4
48417: PPUSH
48418: CALL_OW 264
48422: PUSH
48423: LD_INT 49
48425: EQUAL
48426: IFFALSE 48454
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48428: LD_VAR 0 4
48432: PPUSH
48433: LD_VAR 0 5
48437: PPUSH
48438: LD_VAR 0 4
48442: PPUSH
48443: CALL_OW 74
48447: PPUSH
48448: CALL_OW 112
48452: GO 48478
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48454: LD_VAR 0 4
48458: PPUSH
48459: LD_VAR 0 5
48463: PPUSH
48464: LD_VAR 0 4
48468: PPUSH
48469: CALL_OW 74
48473: PPUSH
48474: CALL_OW 115
// end ; end ;
48478: GO 48058
48480: POP
48481: POP
// end ;
48482: LD_VAR 0 3
48486: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
48487: LD_INT 0
48489: PPUSH
48490: PPUSH
48491: PPUSH
// if not unit or IsInUnit ( unit ) then
48492: LD_VAR 0 1
48496: NOT
48497: PUSH
48498: LD_VAR 0 1
48502: PPUSH
48503: CALL_OW 310
48507: OR
48508: IFFALSE 48512
// exit ;
48510: GO 48603
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
48512: LD_ADDR_VAR 0 4
48516: PUSH
48517: LD_VAR 0 1
48521: PPUSH
48522: CALL_OW 250
48526: PPUSH
48527: LD_VAR 0 2
48531: PPUSH
48532: LD_INT 1
48534: PPUSH
48535: CALL_OW 272
48539: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
48540: LD_ADDR_VAR 0 5
48544: PUSH
48545: LD_VAR 0 1
48549: PPUSH
48550: CALL_OW 251
48554: PPUSH
48555: LD_VAR 0 2
48559: PPUSH
48560: LD_INT 1
48562: PPUSH
48563: CALL_OW 273
48567: ST_TO_ADDR
// if ValidHex ( x , y ) then
48568: LD_VAR 0 4
48572: PPUSH
48573: LD_VAR 0 5
48577: PPUSH
48578: CALL_OW 488
48582: IFFALSE 48603
// ComTurnXY ( unit , x , y ) ;
48584: LD_VAR 0 1
48588: PPUSH
48589: LD_VAR 0 4
48593: PPUSH
48594: LD_VAR 0 5
48598: PPUSH
48599: CALL_OW 118
// end ;
48603: LD_VAR 0 3
48607: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48608: LD_INT 0
48610: PPUSH
48611: PPUSH
// result := false ;
48612: LD_ADDR_VAR 0 3
48616: PUSH
48617: LD_INT 0
48619: ST_TO_ADDR
// if not units then
48620: LD_VAR 0 2
48624: NOT
48625: IFFALSE 48629
// exit ;
48627: GO 48674
// for i in units do
48629: LD_ADDR_VAR 0 4
48633: PUSH
48634: LD_VAR 0 2
48638: PUSH
48639: FOR_IN
48640: IFFALSE 48672
// if See ( side , i ) then
48642: LD_VAR 0 1
48646: PPUSH
48647: LD_VAR 0 4
48651: PPUSH
48652: CALL_OW 292
48656: IFFALSE 48670
// begin result := true ;
48658: LD_ADDR_VAR 0 3
48662: PUSH
48663: LD_INT 1
48665: ST_TO_ADDR
// exit ;
48666: POP
48667: POP
48668: GO 48674
// end ;
48670: GO 48639
48672: POP
48673: POP
// end ;
48674: LD_VAR 0 3
48678: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48679: LD_INT 0
48681: PPUSH
48682: PPUSH
48683: PPUSH
48684: PPUSH
// if not unit or not points then
48685: LD_VAR 0 1
48689: NOT
48690: PUSH
48691: LD_VAR 0 2
48695: NOT
48696: OR
48697: IFFALSE 48701
// exit ;
48699: GO 48791
// dist := 99999 ;
48701: LD_ADDR_VAR 0 5
48705: PUSH
48706: LD_INT 99999
48708: ST_TO_ADDR
// for i in points do
48709: LD_ADDR_VAR 0 4
48713: PUSH
48714: LD_VAR 0 2
48718: PUSH
48719: FOR_IN
48720: IFFALSE 48789
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48722: LD_ADDR_VAR 0 6
48726: PUSH
48727: LD_VAR 0 1
48731: PPUSH
48732: LD_VAR 0 4
48736: PUSH
48737: LD_INT 1
48739: ARRAY
48740: PPUSH
48741: LD_VAR 0 4
48745: PUSH
48746: LD_INT 2
48748: ARRAY
48749: PPUSH
48750: CALL_OW 297
48754: ST_TO_ADDR
// if tmpDist < dist then
48755: LD_VAR 0 6
48759: PUSH
48760: LD_VAR 0 5
48764: LESS
48765: IFFALSE 48787
// begin result := i ;
48767: LD_ADDR_VAR 0 3
48771: PUSH
48772: LD_VAR 0 4
48776: ST_TO_ADDR
// dist := tmpDist ;
48777: LD_ADDR_VAR 0 5
48781: PUSH
48782: LD_VAR 0 6
48786: ST_TO_ADDR
// end ; end ;
48787: GO 48719
48789: POP
48790: POP
// end ;
48791: LD_VAR 0 3
48795: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48796: LD_INT 0
48798: PPUSH
// uc_side := side ;
48799: LD_ADDR_OWVAR 20
48803: PUSH
48804: LD_VAR 0 1
48808: ST_TO_ADDR
// uc_nation := 3 ;
48809: LD_ADDR_OWVAR 21
48813: PUSH
48814: LD_INT 3
48816: ST_TO_ADDR
// vc_chassis := 25 ;
48817: LD_ADDR_OWVAR 37
48821: PUSH
48822: LD_INT 25
48824: ST_TO_ADDR
// vc_engine := engine_siberite ;
48825: LD_ADDR_OWVAR 39
48829: PUSH
48830: LD_INT 3
48832: ST_TO_ADDR
// vc_control := control_computer ;
48833: LD_ADDR_OWVAR 38
48837: PUSH
48838: LD_INT 3
48840: ST_TO_ADDR
// vc_weapon := 59 ;
48841: LD_ADDR_OWVAR 40
48845: PUSH
48846: LD_INT 59
48848: ST_TO_ADDR
// result := CreateVehicle ;
48849: LD_ADDR_VAR 0 5
48853: PUSH
48854: CALL_OW 45
48858: ST_TO_ADDR
// SetDir ( result , d ) ;
48859: LD_VAR 0 5
48863: PPUSH
48864: LD_VAR 0 4
48868: PPUSH
48869: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48873: LD_VAR 0 5
48877: PPUSH
48878: LD_VAR 0 2
48882: PPUSH
48883: LD_VAR 0 3
48887: PPUSH
48888: LD_INT 0
48890: PPUSH
48891: CALL_OW 48
// end ;
48895: LD_VAR 0 5
48899: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
48900: LD_INT 0
48902: PPUSH
48903: PPUSH
48904: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
48905: LD_ADDR_VAR 0 2
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
48928: LD_VAR 0 1
48932: NOT
48933: PUSH
48934: LD_VAR 0 1
48938: PPUSH
48939: CALL_OW 264
48943: PUSH
48944: LD_INT 12
48946: PUSH
48947: LD_INT 51
48949: PUSH
48950: LD_INT 32
48952: PUSH
48953: LD_EXP 42
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: IN
48964: NOT
48965: OR
48966: IFFALSE 48970
// exit ;
48968: GO 49068
// for i := 1 to 3 do
48970: LD_ADDR_VAR 0 3
48974: PUSH
48975: DOUBLE
48976: LD_INT 1
48978: DEC
48979: ST_TO_ADDR
48980: LD_INT 3
48982: PUSH
48983: FOR_TO
48984: IFFALSE 49066
// begin tmp := GetCargo ( cargo , i ) ;
48986: LD_ADDR_VAR 0 4
48990: PUSH
48991: LD_VAR 0 1
48995: PPUSH
48996: LD_VAR 0 3
49000: PPUSH
49001: CALL_OW 289
49005: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49006: LD_ADDR_VAR 0 2
49010: PUSH
49011: LD_VAR 0 2
49015: PPUSH
49016: LD_VAR 0 3
49020: PPUSH
49021: LD_VAR 0 4
49025: PPUSH
49026: CALL_OW 1
49030: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
49031: LD_ADDR_VAR 0 2
49035: PUSH
49036: LD_VAR 0 2
49040: PPUSH
49041: LD_INT 4
49043: PPUSH
49044: LD_VAR 0 2
49048: PUSH
49049: LD_INT 4
49051: ARRAY
49052: PUSH
49053: LD_VAR 0 4
49057: PLUS
49058: PPUSH
49059: CALL_OW 1
49063: ST_TO_ADDR
// end ;
49064: GO 48983
49066: POP
49067: POP
// end ;
49068: LD_VAR 0 2
49072: RET
// export function Length ( array ) ; begin
49073: LD_INT 0
49075: PPUSH
// result := array + 0 ;
49076: LD_ADDR_VAR 0 2
49080: PUSH
49081: LD_VAR 0 1
49085: PUSH
49086: LD_INT 0
49088: PLUS
49089: ST_TO_ADDR
// end ;
49090: LD_VAR 0 2
49094: RET
// export function PrepareArray ( array ) ; begin
49095: LD_INT 0
49097: PPUSH
// result := array diff 0 ;
49098: LD_ADDR_VAR 0 2
49102: PUSH
49103: LD_VAR 0 1
49107: PUSH
49108: LD_INT 0
49110: DIFF
49111: ST_TO_ADDR
// if not result [ 1 ] then
49112: LD_VAR 0 2
49116: PUSH
49117: LD_INT 1
49119: ARRAY
49120: NOT
49121: IFFALSE 49141
// result := Delete ( result , 1 ) ;
49123: LD_ADDR_VAR 0 2
49127: PUSH
49128: LD_VAR 0 2
49132: PPUSH
49133: LD_INT 1
49135: PPUSH
49136: CALL_OW 3
49140: ST_TO_ADDR
// end ; end_of_file
49141: LD_VAR 0 2
49145: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
49146: LD_INT 0
49148: PPUSH
// ar_miner := 81 ;
49149: LD_ADDR_EXP 48
49153: PUSH
49154: LD_INT 81
49156: ST_TO_ADDR
// ar_crane := 88 ;
49157: LD_ADDR_EXP 47
49161: PUSH
49162: LD_INT 88
49164: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
49165: LD_ADDR_EXP 42
49169: PUSH
49170: LD_INT 89
49172: ST_TO_ADDR
// us_hack := 99 ;
49173: LD_ADDR_EXP 43
49177: PUSH
49178: LD_INT 99
49180: ST_TO_ADDR
// us_artillery := 97 ;
49181: LD_ADDR_EXP 44
49185: PUSH
49186: LD_INT 97
49188: ST_TO_ADDR
// ar_bio_bomb := 91 ;
49189: LD_ADDR_EXP 45
49193: PUSH
49194: LD_INT 91
49196: ST_TO_ADDR
// ar_mortar := 92 ;
49197: LD_ADDR_EXP 46
49201: PUSH
49202: LD_INT 92
49204: ST_TO_ADDR
// ru_flamethrower := 93 ;
49205: LD_ADDR_EXP 49
49209: PUSH
49210: LD_INT 93
49212: ST_TO_ADDR
// ru_radar := 98 ;
49213: LD_ADDR_EXP 41
49217: PUSH
49218: LD_INT 98
49220: ST_TO_ADDR
// tech_Artillery := 80 ;
49221: LD_ADDR_EXP 50
49225: PUSH
49226: LD_INT 80
49228: ST_TO_ADDR
// tech_RadMat := 81 ;
49229: LD_ADDR_EXP 51
49233: PUSH
49234: LD_INT 81
49236: ST_TO_ADDR
// tech_BasicTools := 82 ;
49237: LD_ADDR_EXP 52
49241: PUSH
49242: LD_INT 82
49244: ST_TO_ADDR
// tech_Cargo := 83 ;
49245: LD_ADDR_EXP 53
49249: PUSH
49250: LD_INT 83
49252: ST_TO_ADDR
// tech_Track := 84 ;
49253: LD_ADDR_EXP 54
49257: PUSH
49258: LD_INT 84
49260: ST_TO_ADDR
// tech_Crane := 85 ;
49261: LD_ADDR_EXP 55
49265: PUSH
49266: LD_INT 85
49268: ST_TO_ADDR
// tech_Bulldozer := 86 ;
49269: LD_ADDR_EXP 56
49273: PUSH
49274: LD_INT 86
49276: ST_TO_ADDR
// tech_Hovercraft := 87 ;
49277: LD_ADDR_EXP 57
49281: PUSH
49282: LD_INT 87
49284: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
49285: LD_ADDR_EXP 58
49289: PUSH
49290: LD_INT 88
49292: ST_TO_ADDR
// end ;
49293: LD_VAR 0 1
49297: RET
// every 1 do
49298: GO 49300
49300: DISABLE
// InitGlobalVariables ; end_of_file
49301: CALL 49146 0 0
49305: END
// every 0 0$1 do
49306: GO 49308
49308: DISABLE
// begin enable ;
49309: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
49310: LD_STRING updateTimer(
49312: PUSH
49313: LD_OWVAR 1
49317: STR
49318: PUSH
49319: LD_STRING );
49321: STR
49322: PPUSH
49323: CALL_OW 559
// end ;
49327: END
// export function SOS_MapStart ( ) ; begin
49328: LD_INT 0
49330: PPUSH
// if streamModeActive then
49331: LD_EXP 59
49335: IFFALSE 49344
// DefineStreamItems ( true ) ;
49337: LD_INT 1
49339: PPUSH
49340: CALL 50998 0 1
// UpdateFactoryWaypoints ( ) ;
49344: CALL 63859 0 0
// UpdateWarehouseGatheringPoints ( ) ;
49348: CALL 64116 0 0
// end ;
49352: LD_VAR 0 1
49356: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49357: LD_INT 0
49359: PPUSH
// if p2 = 100 then
49360: LD_VAR 0 2
49364: PUSH
49365: LD_INT 100
49367: EQUAL
49368: IFFALSE 50371
// begin if not StreamModeActive then
49370: LD_EXP 59
49374: NOT
49375: IFFALSE 49385
// StreamModeActive := true ;
49377: LD_ADDR_EXP 59
49381: PUSH
49382: LD_INT 1
49384: ST_TO_ADDR
// if p3 = 0 then
49385: LD_VAR 0 3
49389: PUSH
49390: LD_INT 0
49392: EQUAL
49393: IFFALSE 49399
// InitStreamMode ;
49395: CALL 50534 0 0
// if p3 = 1 then
49399: LD_VAR 0 3
49403: PUSH
49404: LD_INT 1
49406: EQUAL
49407: IFFALSE 49417
// sRocket := true ;
49409: LD_ADDR_EXP 64
49413: PUSH
49414: LD_INT 1
49416: ST_TO_ADDR
// if p3 = 2 then
49417: LD_VAR 0 3
49421: PUSH
49422: LD_INT 2
49424: EQUAL
49425: IFFALSE 49435
// sSpeed := true ;
49427: LD_ADDR_EXP 63
49431: PUSH
49432: LD_INT 1
49434: ST_TO_ADDR
// if p3 = 3 then
49435: LD_VAR 0 3
49439: PUSH
49440: LD_INT 3
49442: EQUAL
49443: IFFALSE 49453
// sEngine := true ;
49445: LD_ADDR_EXP 65
49449: PUSH
49450: LD_INT 1
49452: ST_TO_ADDR
// if p3 = 4 then
49453: LD_VAR 0 3
49457: PUSH
49458: LD_INT 4
49460: EQUAL
49461: IFFALSE 49471
// sSpec := true ;
49463: LD_ADDR_EXP 62
49467: PUSH
49468: LD_INT 1
49470: ST_TO_ADDR
// if p3 = 5 then
49471: LD_VAR 0 3
49475: PUSH
49476: LD_INT 5
49478: EQUAL
49479: IFFALSE 49489
// sLevel := true ;
49481: LD_ADDR_EXP 66
49485: PUSH
49486: LD_INT 1
49488: ST_TO_ADDR
// if p3 = 6 then
49489: LD_VAR 0 3
49493: PUSH
49494: LD_INT 6
49496: EQUAL
49497: IFFALSE 49507
// sArmoury := true ;
49499: LD_ADDR_EXP 67
49503: PUSH
49504: LD_INT 1
49506: ST_TO_ADDR
// if p3 = 7 then
49507: LD_VAR 0 3
49511: PUSH
49512: LD_INT 7
49514: EQUAL
49515: IFFALSE 49525
// sRadar := true ;
49517: LD_ADDR_EXP 68
49521: PUSH
49522: LD_INT 1
49524: ST_TO_ADDR
// if p3 = 8 then
49525: LD_VAR 0 3
49529: PUSH
49530: LD_INT 8
49532: EQUAL
49533: IFFALSE 49543
// sBunker := true ;
49535: LD_ADDR_EXP 69
49539: PUSH
49540: LD_INT 1
49542: ST_TO_ADDR
// if p3 = 9 then
49543: LD_VAR 0 3
49547: PUSH
49548: LD_INT 9
49550: EQUAL
49551: IFFALSE 49561
// sHack := true ;
49553: LD_ADDR_EXP 70
49557: PUSH
49558: LD_INT 1
49560: ST_TO_ADDR
// if p3 = 10 then
49561: LD_VAR 0 3
49565: PUSH
49566: LD_INT 10
49568: EQUAL
49569: IFFALSE 49579
// sFire := true ;
49571: LD_ADDR_EXP 71
49575: PUSH
49576: LD_INT 1
49578: ST_TO_ADDR
// if p3 = 11 then
49579: LD_VAR 0 3
49583: PUSH
49584: LD_INT 11
49586: EQUAL
49587: IFFALSE 49597
// sRefresh := true ;
49589: LD_ADDR_EXP 72
49593: PUSH
49594: LD_INT 1
49596: ST_TO_ADDR
// if p3 = 12 then
49597: LD_VAR 0 3
49601: PUSH
49602: LD_INT 12
49604: EQUAL
49605: IFFALSE 49615
// sExp := true ;
49607: LD_ADDR_EXP 73
49611: PUSH
49612: LD_INT 1
49614: ST_TO_ADDR
// if p3 = 13 then
49615: LD_VAR 0 3
49619: PUSH
49620: LD_INT 13
49622: EQUAL
49623: IFFALSE 49633
// sDepot := true ;
49625: LD_ADDR_EXP 74
49629: PUSH
49630: LD_INT 1
49632: ST_TO_ADDR
// if p3 = 14 then
49633: LD_VAR 0 3
49637: PUSH
49638: LD_INT 14
49640: EQUAL
49641: IFFALSE 49651
// sFlag := true ;
49643: LD_ADDR_EXP 75
49647: PUSH
49648: LD_INT 1
49650: ST_TO_ADDR
// if p3 = 15 then
49651: LD_VAR 0 3
49655: PUSH
49656: LD_INT 15
49658: EQUAL
49659: IFFALSE 49669
// sKamikadze := true ;
49661: LD_ADDR_EXP 83
49665: PUSH
49666: LD_INT 1
49668: ST_TO_ADDR
// if p3 = 16 then
49669: LD_VAR 0 3
49673: PUSH
49674: LD_INT 16
49676: EQUAL
49677: IFFALSE 49687
// sTroll := true ;
49679: LD_ADDR_EXP 84
49683: PUSH
49684: LD_INT 1
49686: ST_TO_ADDR
// if p3 = 17 then
49687: LD_VAR 0 3
49691: PUSH
49692: LD_INT 17
49694: EQUAL
49695: IFFALSE 49705
// sSlow := true ;
49697: LD_ADDR_EXP 85
49701: PUSH
49702: LD_INT 1
49704: ST_TO_ADDR
// if p3 = 18 then
49705: LD_VAR 0 3
49709: PUSH
49710: LD_INT 18
49712: EQUAL
49713: IFFALSE 49723
// sLack := true ;
49715: LD_ADDR_EXP 86
49719: PUSH
49720: LD_INT 1
49722: ST_TO_ADDR
// if p3 = 19 then
49723: LD_VAR 0 3
49727: PUSH
49728: LD_INT 19
49730: EQUAL
49731: IFFALSE 49741
// sTank := true ;
49733: LD_ADDR_EXP 88
49737: PUSH
49738: LD_INT 1
49740: ST_TO_ADDR
// if p3 = 20 then
49741: LD_VAR 0 3
49745: PUSH
49746: LD_INT 20
49748: EQUAL
49749: IFFALSE 49759
// sRemote := true ;
49751: LD_ADDR_EXP 89
49755: PUSH
49756: LD_INT 1
49758: ST_TO_ADDR
// if p3 = 21 then
49759: LD_VAR 0 3
49763: PUSH
49764: LD_INT 21
49766: EQUAL
49767: IFFALSE 49777
// sPowell := true ;
49769: LD_ADDR_EXP 90
49773: PUSH
49774: LD_INT 1
49776: ST_TO_ADDR
// if p3 = 22 then
49777: LD_VAR 0 3
49781: PUSH
49782: LD_INT 22
49784: EQUAL
49785: IFFALSE 49795
// sTeleport := true ;
49787: LD_ADDR_EXP 93
49791: PUSH
49792: LD_INT 1
49794: ST_TO_ADDR
// if p3 = 23 then
49795: LD_VAR 0 3
49799: PUSH
49800: LD_INT 23
49802: EQUAL
49803: IFFALSE 49813
// sOilTower := true ;
49805: LD_ADDR_EXP 95
49809: PUSH
49810: LD_INT 1
49812: ST_TO_ADDR
// if p3 = 24 then
49813: LD_VAR 0 3
49817: PUSH
49818: LD_INT 24
49820: EQUAL
49821: IFFALSE 49831
// sShovel := true ;
49823: LD_ADDR_EXP 96
49827: PUSH
49828: LD_INT 1
49830: ST_TO_ADDR
// if p3 = 25 then
49831: LD_VAR 0 3
49835: PUSH
49836: LD_INT 25
49838: EQUAL
49839: IFFALSE 49849
// sSheik := true ;
49841: LD_ADDR_EXP 97
49845: PUSH
49846: LD_INT 1
49848: ST_TO_ADDR
// if p3 = 26 then
49849: LD_VAR 0 3
49853: PUSH
49854: LD_INT 26
49856: EQUAL
49857: IFFALSE 49867
// sEarthquake := true ;
49859: LD_ADDR_EXP 99
49863: PUSH
49864: LD_INT 1
49866: ST_TO_ADDR
// if p3 = 27 then
49867: LD_VAR 0 3
49871: PUSH
49872: LD_INT 27
49874: EQUAL
49875: IFFALSE 49885
// sAI := true ;
49877: LD_ADDR_EXP 100
49881: PUSH
49882: LD_INT 1
49884: ST_TO_ADDR
// if p3 = 28 then
49885: LD_VAR 0 3
49889: PUSH
49890: LD_INT 28
49892: EQUAL
49893: IFFALSE 49903
// sCargo := true ;
49895: LD_ADDR_EXP 103
49899: PUSH
49900: LD_INT 1
49902: ST_TO_ADDR
// if p3 = 29 then
49903: LD_VAR 0 3
49907: PUSH
49908: LD_INT 29
49910: EQUAL
49911: IFFALSE 49921
// sDLaser := true ;
49913: LD_ADDR_EXP 104
49917: PUSH
49918: LD_INT 1
49920: ST_TO_ADDR
// if p3 = 30 then
49921: LD_VAR 0 3
49925: PUSH
49926: LD_INT 30
49928: EQUAL
49929: IFFALSE 49939
// sExchange := true ;
49931: LD_ADDR_EXP 105
49935: PUSH
49936: LD_INT 1
49938: ST_TO_ADDR
// if p3 = 31 then
49939: LD_VAR 0 3
49943: PUSH
49944: LD_INT 31
49946: EQUAL
49947: IFFALSE 49957
// sFac := true ;
49949: LD_ADDR_EXP 106
49953: PUSH
49954: LD_INT 1
49956: ST_TO_ADDR
// if p3 = 32 then
49957: LD_VAR 0 3
49961: PUSH
49962: LD_INT 32
49964: EQUAL
49965: IFFALSE 49975
// sPower := true ;
49967: LD_ADDR_EXP 107
49971: PUSH
49972: LD_INT 1
49974: ST_TO_ADDR
// if p3 = 33 then
49975: LD_VAR 0 3
49979: PUSH
49980: LD_INT 33
49982: EQUAL
49983: IFFALSE 49993
// sRandom := true ;
49985: LD_ADDR_EXP 108
49989: PUSH
49990: LD_INT 1
49992: ST_TO_ADDR
// if p3 = 34 then
49993: LD_VAR 0 3
49997: PUSH
49998: LD_INT 34
50000: EQUAL
50001: IFFALSE 50011
// sShield := true ;
50003: LD_ADDR_EXP 109
50007: PUSH
50008: LD_INT 1
50010: ST_TO_ADDR
// if p3 = 35 then
50011: LD_VAR 0 3
50015: PUSH
50016: LD_INT 35
50018: EQUAL
50019: IFFALSE 50029
// sTime := true ;
50021: LD_ADDR_EXP 110
50025: PUSH
50026: LD_INT 1
50028: ST_TO_ADDR
// if p3 = 36 then
50029: LD_VAR 0 3
50033: PUSH
50034: LD_INT 36
50036: EQUAL
50037: IFFALSE 50047
// sTools := true ;
50039: LD_ADDR_EXP 111
50043: PUSH
50044: LD_INT 1
50046: ST_TO_ADDR
// if p3 = 101 then
50047: LD_VAR 0 3
50051: PUSH
50052: LD_INT 101
50054: EQUAL
50055: IFFALSE 50065
// sSold := true ;
50057: LD_ADDR_EXP 76
50061: PUSH
50062: LD_INT 1
50064: ST_TO_ADDR
// if p3 = 102 then
50065: LD_VAR 0 3
50069: PUSH
50070: LD_INT 102
50072: EQUAL
50073: IFFALSE 50083
// sDiff := true ;
50075: LD_ADDR_EXP 77
50079: PUSH
50080: LD_INT 1
50082: ST_TO_ADDR
// if p3 = 103 then
50083: LD_VAR 0 3
50087: PUSH
50088: LD_INT 103
50090: EQUAL
50091: IFFALSE 50101
// sFog := true ;
50093: LD_ADDR_EXP 80
50097: PUSH
50098: LD_INT 1
50100: ST_TO_ADDR
// if p3 = 104 then
50101: LD_VAR 0 3
50105: PUSH
50106: LD_INT 104
50108: EQUAL
50109: IFFALSE 50119
// sReset := true ;
50111: LD_ADDR_EXP 81
50115: PUSH
50116: LD_INT 1
50118: ST_TO_ADDR
// if p3 = 105 then
50119: LD_VAR 0 3
50123: PUSH
50124: LD_INT 105
50126: EQUAL
50127: IFFALSE 50137
// sSun := true ;
50129: LD_ADDR_EXP 82
50133: PUSH
50134: LD_INT 1
50136: ST_TO_ADDR
// if p3 = 106 then
50137: LD_VAR 0 3
50141: PUSH
50142: LD_INT 106
50144: EQUAL
50145: IFFALSE 50155
// sTiger := true ;
50147: LD_ADDR_EXP 78
50151: PUSH
50152: LD_INT 1
50154: ST_TO_ADDR
// if p3 = 107 then
50155: LD_VAR 0 3
50159: PUSH
50160: LD_INT 107
50162: EQUAL
50163: IFFALSE 50173
// sBomb := true ;
50165: LD_ADDR_EXP 79
50169: PUSH
50170: LD_INT 1
50172: ST_TO_ADDR
// if p3 = 108 then
50173: LD_VAR 0 3
50177: PUSH
50178: LD_INT 108
50180: EQUAL
50181: IFFALSE 50191
// sWound := true ;
50183: LD_ADDR_EXP 87
50187: PUSH
50188: LD_INT 1
50190: ST_TO_ADDR
// if p3 = 109 then
50191: LD_VAR 0 3
50195: PUSH
50196: LD_INT 109
50198: EQUAL
50199: IFFALSE 50209
// sBetray := true ;
50201: LD_ADDR_EXP 91
50205: PUSH
50206: LD_INT 1
50208: ST_TO_ADDR
// if p3 = 110 then
50209: LD_VAR 0 3
50213: PUSH
50214: LD_INT 110
50216: EQUAL
50217: IFFALSE 50227
// sContamin := true ;
50219: LD_ADDR_EXP 92
50223: PUSH
50224: LD_INT 1
50226: ST_TO_ADDR
// if p3 = 111 then
50227: LD_VAR 0 3
50231: PUSH
50232: LD_INT 111
50234: EQUAL
50235: IFFALSE 50245
// sOil := true ;
50237: LD_ADDR_EXP 94
50241: PUSH
50242: LD_INT 1
50244: ST_TO_ADDR
// if p3 = 112 then
50245: LD_VAR 0 3
50249: PUSH
50250: LD_INT 112
50252: EQUAL
50253: IFFALSE 50263
// sStu := true ;
50255: LD_ADDR_EXP 98
50259: PUSH
50260: LD_INT 1
50262: ST_TO_ADDR
// if p3 = 113 then
50263: LD_VAR 0 3
50267: PUSH
50268: LD_INT 113
50270: EQUAL
50271: IFFALSE 50281
// sBazooka := true ;
50273: LD_ADDR_EXP 101
50277: PUSH
50278: LD_INT 1
50280: ST_TO_ADDR
// if p3 = 114 then
50281: LD_VAR 0 3
50285: PUSH
50286: LD_INT 114
50288: EQUAL
50289: IFFALSE 50299
// sMortar := true ;
50291: LD_ADDR_EXP 102
50295: PUSH
50296: LD_INT 1
50298: ST_TO_ADDR
// if p3 = 115 then
50299: LD_VAR 0 3
50303: PUSH
50304: LD_INT 115
50306: EQUAL
50307: IFFALSE 50317
// sRanger := true ;
50309: LD_ADDR_EXP 112
50313: PUSH
50314: LD_INT 1
50316: ST_TO_ADDR
// if p3 = 116 then
50317: LD_VAR 0 3
50321: PUSH
50322: LD_INT 116
50324: EQUAL
50325: IFFALSE 50335
// sComputer := true ;
50327: LD_ADDR_EXP 113
50331: PUSH
50332: LD_INT 1
50334: ST_TO_ADDR
// if p3 = 117 then
50335: LD_VAR 0 3
50339: PUSH
50340: LD_INT 117
50342: EQUAL
50343: IFFALSE 50353
// s30 := true ;
50345: LD_ADDR_EXP 114
50349: PUSH
50350: LD_INT 1
50352: ST_TO_ADDR
// if p3 = 118 then
50353: LD_VAR 0 3
50357: PUSH
50358: LD_INT 118
50360: EQUAL
50361: IFFALSE 50371
// s60 := true ;
50363: LD_ADDR_EXP 115
50367: PUSH
50368: LD_INT 1
50370: ST_TO_ADDR
// end ; if p2 = 101 then
50371: LD_VAR 0 2
50375: PUSH
50376: LD_INT 101
50378: EQUAL
50379: IFFALSE 50507
// begin case p3 of 1 :
50381: LD_VAR 0 3
50385: PUSH
50386: LD_INT 1
50388: DOUBLE
50389: EQUAL
50390: IFTRUE 50394
50392: GO 50401
50394: POP
// hHackUnlimitedResources ; 2 :
50395: CALL 62605 0 0
50399: GO 50507
50401: LD_INT 2
50403: DOUBLE
50404: EQUAL
50405: IFTRUE 50409
50407: GO 50416
50409: POP
// hHackSetLevel10 ; 3 :
50410: CALL 62738 0 0
50414: GO 50507
50416: LD_INT 3
50418: DOUBLE
50419: EQUAL
50420: IFTRUE 50424
50422: GO 50431
50424: POP
// hHackSetLevel10YourUnits ; 4 :
50425: CALL 62823 0 0
50429: GO 50507
50431: LD_INT 4
50433: DOUBLE
50434: EQUAL
50435: IFTRUE 50439
50437: GO 50446
50439: POP
// hHackInvincible ; 5 :
50440: CALL 63271 0 0
50444: GO 50507
50446: LD_INT 5
50448: DOUBLE
50449: EQUAL
50450: IFTRUE 50454
50452: GO 50461
50454: POP
// hHackInvisible ; 6 :
50455: CALL 63382 0 0
50459: GO 50507
50461: LD_INT 6
50463: DOUBLE
50464: EQUAL
50465: IFTRUE 50469
50467: GO 50476
50469: POP
// hHackChangeYourSide ; 7 :
50470: CALL 63439 0 0
50474: GO 50507
50476: LD_INT 7
50478: DOUBLE
50479: EQUAL
50480: IFTRUE 50484
50482: GO 50491
50484: POP
// hHackChangeUnitSide ; 8 :
50485: CALL 63481 0 0
50489: GO 50507
50491: LD_INT 8
50493: DOUBLE
50494: EQUAL
50495: IFTRUE 50499
50497: GO 50506
50499: POP
// hHackFog ; end ;
50500: CALL 63582 0 0
50504: GO 50507
50506: POP
// end ; end ;
50507: LD_VAR 0 7
50511: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
50512: GO 50514
50514: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
50515: LD_STRING initStreamRollete();
50517: PPUSH
50518: CALL_OW 559
// InitStreamMode ;
50522: CALL 50534 0 0
// DefineStreamItems ( false ) ;
50526: LD_INT 0
50528: PPUSH
50529: CALL 50998 0 1
// end ;
50533: END
// function InitStreamMode ; begin
50534: LD_INT 0
50536: PPUSH
// streamModeActive := false ;
50537: LD_ADDR_EXP 59
50541: PUSH
50542: LD_INT 0
50544: ST_TO_ADDR
// normalCounter := 36 ;
50545: LD_ADDR_EXP 60
50549: PUSH
50550: LD_INT 36
50552: ST_TO_ADDR
// hardcoreCounter := 18 ;
50553: LD_ADDR_EXP 61
50557: PUSH
50558: LD_INT 18
50560: ST_TO_ADDR
// sRocket := false ;
50561: LD_ADDR_EXP 64
50565: PUSH
50566: LD_INT 0
50568: ST_TO_ADDR
// sSpeed := false ;
50569: LD_ADDR_EXP 63
50573: PUSH
50574: LD_INT 0
50576: ST_TO_ADDR
// sEngine := false ;
50577: LD_ADDR_EXP 65
50581: PUSH
50582: LD_INT 0
50584: ST_TO_ADDR
// sSpec := false ;
50585: LD_ADDR_EXP 62
50589: PUSH
50590: LD_INT 0
50592: ST_TO_ADDR
// sLevel := false ;
50593: LD_ADDR_EXP 66
50597: PUSH
50598: LD_INT 0
50600: ST_TO_ADDR
// sArmoury := false ;
50601: LD_ADDR_EXP 67
50605: PUSH
50606: LD_INT 0
50608: ST_TO_ADDR
// sRadar := false ;
50609: LD_ADDR_EXP 68
50613: PUSH
50614: LD_INT 0
50616: ST_TO_ADDR
// sBunker := false ;
50617: LD_ADDR_EXP 69
50621: PUSH
50622: LD_INT 0
50624: ST_TO_ADDR
// sHack := false ;
50625: LD_ADDR_EXP 70
50629: PUSH
50630: LD_INT 0
50632: ST_TO_ADDR
// sFire := false ;
50633: LD_ADDR_EXP 71
50637: PUSH
50638: LD_INT 0
50640: ST_TO_ADDR
// sRefresh := false ;
50641: LD_ADDR_EXP 72
50645: PUSH
50646: LD_INT 0
50648: ST_TO_ADDR
// sExp := false ;
50649: LD_ADDR_EXP 73
50653: PUSH
50654: LD_INT 0
50656: ST_TO_ADDR
// sDepot := false ;
50657: LD_ADDR_EXP 74
50661: PUSH
50662: LD_INT 0
50664: ST_TO_ADDR
// sFlag := false ;
50665: LD_ADDR_EXP 75
50669: PUSH
50670: LD_INT 0
50672: ST_TO_ADDR
// sKamikadze := false ;
50673: LD_ADDR_EXP 83
50677: PUSH
50678: LD_INT 0
50680: ST_TO_ADDR
// sTroll := false ;
50681: LD_ADDR_EXP 84
50685: PUSH
50686: LD_INT 0
50688: ST_TO_ADDR
// sSlow := false ;
50689: LD_ADDR_EXP 85
50693: PUSH
50694: LD_INT 0
50696: ST_TO_ADDR
// sLack := false ;
50697: LD_ADDR_EXP 86
50701: PUSH
50702: LD_INT 0
50704: ST_TO_ADDR
// sTank := false ;
50705: LD_ADDR_EXP 88
50709: PUSH
50710: LD_INT 0
50712: ST_TO_ADDR
// sRemote := false ;
50713: LD_ADDR_EXP 89
50717: PUSH
50718: LD_INT 0
50720: ST_TO_ADDR
// sPowell := false ;
50721: LD_ADDR_EXP 90
50725: PUSH
50726: LD_INT 0
50728: ST_TO_ADDR
// sTeleport := false ;
50729: LD_ADDR_EXP 93
50733: PUSH
50734: LD_INT 0
50736: ST_TO_ADDR
// sOilTower := false ;
50737: LD_ADDR_EXP 95
50741: PUSH
50742: LD_INT 0
50744: ST_TO_ADDR
// sShovel := false ;
50745: LD_ADDR_EXP 96
50749: PUSH
50750: LD_INT 0
50752: ST_TO_ADDR
// sSheik := false ;
50753: LD_ADDR_EXP 97
50757: PUSH
50758: LD_INT 0
50760: ST_TO_ADDR
// sEarthquake := false ;
50761: LD_ADDR_EXP 99
50765: PUSH
50766: LD_INT 0
50768: ST_TO_ADDR
// sAI := false ;
50769: LD_ADDR_EXP 100
50773: PUSH
50774: LD_INT 0
50776: ST_TO_ADDR
// sCargo := false ;
50777: LD_ADDR_EXP 103
50781: PUSH
50782: LD_INT 0
50784: ST_TO_ADDR
// sDLaser := false ;
50785: LD_ADDR_EXP 104
50789: PUSH
50790: LD_INT 0
50792: ST_TO_ADDR
// sExchange := false ;
50793: LD_ADDR_EXP 105
50797: PUSH
50798: LD_INT 0
50800: ST_TO_ADDR
// sFac := false ;
50801: LD_ADDR_EXP 106
50805: PUSH
50806: LD_INT 0
50808: ST_TO_ADDR
// sPower := false ;
50809: LD_ADDR_EXP 107
50813: PUSH
50814: LD_INT 0
50816: ST_TO_ADDR
// sRandom := false ;
50817: LD_ADDR_EXP 108
50821: PUSH
50822: LD_INT 0
50824: ST_TO_ADDR
// sShield := false ;
50825: LD_ADDR_EXP 109
50829: PUSH
50830: LD_INT 0
50832: ST_TO_ADDR
// sTime := false ;
50833: LD_ADDR_EXP 110
50837: PUSH
50838: LD_INT 0
50840: ST_TO_ADDR
// sTools := false ;
50841: LD_ADDR_EXP 111
50845: PUSH
50846: LD_INT 0
50848: ST_TO_ADDR
// sSold := false ;
50849: LD_ADDR_EXP 76
50853: PUSH
50854: LD_INT 0
50856: ST_TO_ADDR
// sDiff := false ;
50857: LD_ADDR_EXP 77
50861: PUSH
50862: LD_INT 0
50864: ST_TO_ADDR
// sFog := false ;
50865: LD_ADDR_EXP 80
50869: PUSH
50870: LD_INT 0
50872: ST_TO_ADDR
// sReset := false ;
50873: LD_ADDR_EXP 81
50877: PUSH
50878: LD_INT 0
50880: ST_TO_ADDR
// sSun := false ;
50881: LD_ADDR_EXP 82
50885: PUSH
50886: LD_INT 0
50888: ST_TO_ADDR
// sTiger := false ;
50889: LD_ADDR_EXP 78
50893: PUSH
50894: LD_INT 0
50896: ST_TO_ADDR
// sBomb := false ;
50897: LD_ADDR_EXP 79
50901: PUSH
50902: LD_INT 0
50904: ST_TO_ADDR
// sWound := false ;
50905: LD_ADDR_EXP 87
50909: PUSH
50910: LD_INT 0
50912: ST_TO_ADDR
// sBetray := false ;
50913: LD_ADDR_EXP 91
50917: PUSH
50918: LD_INT 0
50920: ST_TO_ADDR
// sContamin := false ;
50921: LD_ADDR_EXP 92
50925: PUSH
50926: LD_INT 0
50928: ST_TO_ADDR
// sOil := false ;
50929: LD_ADDR_EXP 94
50933: PUSH
50934: LD_INT 0
50936: ST_TO_ADDR
// sStu := false ;
50937: LD_ADDR_EXP 98
50941: PUSH
50942: LD_INT 0
50944: ST_TO_ADDR
// sBazooka := false ;
50945: LD_ADDR_EXP 101
50949: PUSH
50950: LD_INT 0
50952: ST_TO_ADDR
// sMortar := false ;
50953: LD_ADDR_EXP 102
50957: PUSH
50958: LD_INT 0
50960: ST_TO_ADDR
// sRanger := false ;
50961: LD_ADDR_EXP 112
50965: PUSH
50966: LD_INT 0
50968: ST_TO_ADDR
// sComputer := false ;
50969: LD_ADDR_EXP 113
50973: PUSH
50974: LD_INT 0
50976: ST_TO_ADDR
// s30 := false ;
50977: LD_ADDR_EXP 114
50981: PUSH
50982: LD_INT 0
50984: ST_TO_ADDR
// s60 := false ;
50985: LD_ADDR_EXP 115
50989: PUSH
50990: LD_INT 0
50992: ST_TO_ADDR
// end ;
50993: LD_VAR 0 1
50997: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50998: LD_INT 0
51000: PPUSH
51001: PPUSH
51002: PPUSH
51003: PPUSH
51004: PPUSH
51005: PPUSH
51006: PPUSH
// result := [ ] ;
51007: LD_ADDR_VAR 0 2
51011: PUSH
51012: EMPTY
51013: ST_TO_ADDR
// if campaign_id = 1 then
51014: LD_OWVAR 69
51018: PUSH
51019: LD_INT 1
51021: EQUAL
51022: IFFALSE 54188
// begin case mission_number of 1 :
51024: LD_OWVAR 70
51028: PUSH
51029: LD_INT 1
51031: DOUBLE
51032: EQUAL
51033: IFTRUE 51037
51035: GO 51113
51037: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51038: LD_ADDR_VAR 0 2
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: LD_INT 4
51048: PUSH
51049: LD_INT 11
51051: PUSH
51052: LD_INT 12
51054: PUSH
51055: LD_INT 15
51057: PUSH
51058: LD_INT 16
51060: PUSH
51061: LD_INT 22
51063: PUSH
51064: LD_INT 23
51066: PUSH
51067: LD_INT 26
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 101
51083: PUSH
51084: LD_INT 102
51086: PUSH
51087: LD_INT 106
51089: PUSH
51090: LD_INT 116
51092: PUSH
51093: LD_INT 117
51095: PUSH
51096: LD_INT 118
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: ST_TO_ADDR
51111: GO 54186
51113: LD_INT 2
51115: DOUBLE
51116: EQUAL
51117: IFTRUE 51121
51119: GO 51205
51121: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
51122: LD_ADDR_VAR 0 2
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 4
51132: PUSH
51133: LD_INT 11
51135: PUSH
51136: LD_INT 12
51138: PUSH
51139: LD_INT 15
51141: PUSH
51142: LD_INT 16
51144: PUSH
51145: LD_INT 22
51147: PUSH
51148: LD_INT 23
51150: PUSH
51151: LD_INT 26
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 101
51167: PUSH
51168: LD_INT 102
51170: PUSH
51171: LD_INT 105
51173: PUSH
51174: LD_INT 106
51176: PUSH
51177: LD_INT 108
51179: PUSH
51180: LD_INT 116
51182: PUSH
51183: LD_INT 117
51185: PUSH
51186: LD_INT 118
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: ST_TO_ADDR
51203: GO 54186
51205: LD_INT 3
51207: DOUBLE
51208: EQUAL
51209: IFTRUE 51213
51211: GO 51301
51213: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
51214: LD_ADDR_VAR 0 2
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 4
51224: PUSH
51225: LD_INT 5
51227: PUSH
51228: LD_INT 11
51230: PUSH
51231: LD_INT 12
51233: PUSH
51234: LD_INT 15
51236: PUSH
51237: LD_INT 16
51239: PUSH
51240: LD_INT 22
51242: PUSH
51243: LD_INT 26
51245: PUSH
51246: LD_INT 36
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 101
51263: PUSH
51264: LD_INT 102
51266: PUSH
51267: LD_INT 105
51269: PUSH
51270: LD_INT 106
51272: PUSH
51273: LD_INT 108
51275: PUSH
51276: LD_INT 116
51278: PUSH
51279: LD_INT 117
51281: PUSH
51282: LD_INT 118
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: ST_TO_ADDR
51299: GO 54186
51301: LD_INT 4
51303: DOUBLE
51304: EQUAL
51305: IFTRUE 51309
51307: GO 51405
51309: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
51310: LD_ADDR_VAR 0 2
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 4
51320: PUSH
51321: LD_INT 5
51323: PUSH
51324: LD_INT 8
51326: PUSH
51327: LD_INT 11
51329: PUSH
51330: LD_INT 12
51332: PUSH
51333: LD_INT 15
51335: PUSH
51336: LD_INT 16
51338: PUSH
51339: LD_INT 22
51341: PUSH
51342: LD_INT 23
51344: PUSH
51345: LD_INT 26
51347: PUSH
51348: LD_INT 36
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 101
51367: PUSH
51368: LD_INT 102
51370: PUSH
51371: LD_INT 105
51373: PUSH
51374: LD_INT 106
51376: PUSH
51377: LD_INT 108
51379: PUSH
51380: LD_INT 116
51382: PUSH
51383: LD_INT 117
51385: PUSH
51386: LD_INT 118
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: ST_TO_ADDR
51403: GO 54186
51405: LD_INT 5
51407: DOUBLE
51408: EQUAL
51409: IFTRUE 51413
51411: GO 51525
51413: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
51414: LD_ADDR_VAR 0 2
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: LD_INT 4
51424: PUSH
51425: LD_INT 5
51427: PUSH
51428: LD_INT 6
51430: PUSH
51431: LD_INT 8
51433: PUSH
51434: LD_INT 11
51436: PUSH
51437: LD_INT 12
51439: PUSH
51440: LD_INT 15
51442: PUSH
51443: LD_INT 16
51445: PUSH
51446: LD_INT 22
51448: PUSH
51449: LD_INT 23
51451: PUSH
51452: LD_INT 25
51454: PUSH
51455: LD_INT 26
51457: PUSH
51458: LD_INT 36
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 101
51479: PUSH
51480: LD_INT 102
51482: PUSH
51483: LD_INT 105
51485: PUSH
51486: LD_INT 106
51488: PUSH
51489: LD_INT 108
51491: PUSH
51492: LD_INT 109
51494: PUSH
51495: LD_INT 112
51497: PUSH
51498: LD_INT 116
51500: PUSH
51501: LD_INT 117
51503: PUSH
51504: LD_INT 118
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: ST_TO_ADDR
51523: GO 54186
51525: LD_INT 6
51527: DOUBLE
51528: EQUAL
51529: IFTRUE 51533
51531: GO 51665
51533: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
51534: LD_ADDR_VAR 0 2
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 4
51544: PUSH
51545: LD_INT 5
51547: PUSH
51548: LD_INT 6
51550: PUSH
51551: LD_INT 8
51553: PUSH
51554: LD_INT 11
51556: PUSH
51557: LD_INT 12
51559: PUSH
51560: LD_INT 15
51562: PUSH
51563: LD_INT 16
51565: PUSH
51566: LD_INT 20
51568: PUSH
51569: LD_INT 21
51571: PUSH
51572: LD_INT 22
51574: PUSH
51575: LD_INT 23
51577: PUSH
51578: LD_INT 25
51580: PUSH
51581: LD_INT 26
51583: PUSH
51584: LD_INT 30
51586: PUSH
51587: LD_INT 31
51589: PUSH
51590: LD_INT 32
51592: PUSH
51593: LD_INT 36
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 101
51619: PUSH
51620: LD_INT 102
51622: PUSH
51623: LD_INT 105
51625: PUSH
51626: LD_INT 106
51628: PUSH
51629: LD_INT 108
51631: PUSH
51632: LD_INT 109
51634: PUSH
51635: LD_INT 112
51637: PUSH
51638: LD_INT 116
51640: PUSH
51641: LD_INT 117
51643: PUSH
51644: LD_INT 118
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: ST_TO_ADDR
51663: GO 54186
51665: LD_INT 7
51667: DOUBLE
51668: EQUAL
51669: IFTRUE 51673
51671: GO 51785
51673: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
51674: LD_ADDR_VAR 0 2
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 4
51684: PUSH
51685: LD_INT 5
51687: PUSH
51688: LD_INT 7
51690: PUSH
51691: LD_INT 11
51693: PUSH
51694: LD_INT 12
51696: PUSH
51697: LD_INT 15
51699: PUSH
51700: LD_INT 16
51702: PUSH
51703: LD_INT 20
51705: PUSH
51706: LD_INT 21
51708: PUSH
51709: LD_INT 22
51711: PUSH
51712: LD_INT 23
51714: PUSH
51715: LD_INT 25
51717: PUSH
51718: LD_INT 26
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 101
51739: PUSH
51740: LD_INT 102
51742: PUSH
51743: LD_INT 103
51745: PUSH
51746: LD_INT 105
51748: PUSH
51749: LD_INT 106
51751: PUSH
51752: LD_INT 108
51754: PUSH
51755: LD_INT 112
51757: PUSH
51758: LD_INT 116
51760: PUSH
51761: LD_INT 117
51763: PUSH
51764: LD_INT 118
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: ST_TO_ADDR
51783: GO 54186
51785: LD_INT 8
51787: DOUBLE
51788: EQUAL
51789: IFTRUE 51793
51791: GO 51933
51793: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51794: LD_ADDR_VAR 0 2
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 4
51804: PUSH
51805: LD_INT 5
51807: PUSH
51808: LD_INT 6
51810: PUSH
51811: LD_INT 7
51813: PUSH
51814: LD_INT 8
51816: PUSH
51817: LD_INT 11
51819: PUSH
51820: LD_INT 12
51822: PUSH
51823: LD_INT 15
51825: PUSH
51826: LD_INT 16
51828: PUSH
51829: LD_INT 20
51831: PUSH
51832: LD_INT 21
51834: PUSH
51835: LD_INT 22
51837: PUSH
51838: LD_INT 23
51840: PUSH
51841: LD_INT 25
51843: PUSH
51844: LD_INT 26
51846: PUSH
51847: LD_INT 30
51849: PUSH
51850: LD_INT 31
51852: PUSH
51853: LD_INT 32
51855: PUSH
51856: LD_INT 36
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 101
51883: PUSH
51884: LD_INT 102
51886: PUSH
51887: LD_INT 103
51889: PUSH
51890: LD_INT 105
51892: PUSH
51893: LD_INT 106
51895: PUSH
51896: LD_INT 108
51898: PUSH
51899: LD_INT 109
51901: PUSH
51902: LD_INT 112
51904: PUSH
51905: LD_INT 116
51907: PUSH
51908: LD_INT 117
51910: PUSH
51911: LD_INT 118
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: ST_TO_ADDR
51931: GO 54186
51933: LD_INT 9
51935: DOUBLE
51936: EQUAL
51937: IFTRUE 51941
51939: GO 52089
51941: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51942: LD_ADDR_VAR 0 2
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 4
51952: PUSH
51953: LD_INT 5
51955: PUSH
51956: LD_INT 6
51958: PUSH
51959: LD_INT 7
51961: PUSH
51962: LD_INT 8
51964: PUSH
51965: LD_INT 11
51967: PUSH
51968: LD_INT 12
51970: PUSH
51971: LD_INT 15
51973: PUSH
51974: LD_INT 16
51976: PUSH
51977: LD_INT 20
51979: PUSH
51980: LD_INT 21
51982: PUSH
51983: LD_INT 22
51985: PUSH
51986: LD_INT 23
51988: PUSH
51989: LD_INT 25
51991: PUSH
51992: LD_INT 26
51994: PUSH
51995: LD_INT 28
51997: PUSH
51998: LD_INT 30
52000: PUSH
52001: LD_INT 31
52003: PUSH
52004: LD_INT 32
52006: PUSH
52007: LD_INT 36
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 101
52035: PUSH
52036: LD_INT 102
52038: PUSH
52039: LD_INT 103
52041: PUSH
52042: LD_INT 105
52044: PUSH
52045: LD_INT 106
52047: PUSH
52048: LD_INT 108
52050: PUSH
52051: LD_INT 109
52053: PUSH
52054: LD_INT 112
52056: PUSH
52057: LD_INT 114
52059: PUSH
52060: LD_INT 116
52062: PUSH
52063: LD_INT 117
52065: PUSH
52066: LD_INT 118
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: ST_TO_ADDR
52087: GO 54186
52089: LD_INT 10
52091: DOUBLE
52092: EQUAL
52093: IFTRUE 52097
52095: GO 52293
52097: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52098: LD_ADDR_VAR 0 2
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: LD_INT 5
52111: PUSH
52112: LD_INT 6
52114: PUSH
52115: LD_INT 7
52117: PUSH
52118: LD_INT 8
52120: PUSH
52121: LD_INT 9
52123: PUSH
52124: LD_INT 10
52126: PUSH
52127: LD_INT 11
52129: PUSH
52130: LD_INT 12
52132: PUSH
52133: LD_INT 13
52135: PUSH
52136: LD_INT 14
52138: PUSH
52139: LD_INT 15
52141: PUSH
52142: LD_INT 16
52144: PUSH
52145: LD_INT 17
52147: PUSH
52148: LD_INT 18
52150: PUSH
52151: LD_INT 19
52153: PUSH
52154: LD_INT 20
52156: PUSH
52157: LD_INT 21
52159: PUSH
52160: LD_INT 22
52162: PUSH
52163: LD_INT 23
52165: PUSH
52166: LD_INT 24
52168: PUSH
52169: LD_INT 25
52171: PUSH
52172: LD_INT 26
52174: PUSH
52175: LD_INT 28
52177: PUSH
52178: LD_INT 30
52180: PUSH
52181: LD_INT 31
52183: PUSH
52184: LD_INT 32
52186: PUSH
52187: LD_INT 36
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 101
52223: PUSH
52224: LD_INT 102
52226: PUSH
52227: LD_INT 103
52229: PUSH
52230: LD_INT 104
52232: PUSH
52233: LD_INT 105
52235: PUSH
52236: LD_INT 106
52238: PUSH
52239: LD_INT 107
52241: PUSH
52242: LD_INT 108
52244: PUSH
52245: LD_INT 109
52247: PUSH
52248: LD_INT 110
52250: PUSH
52251: LD_INT 111
52253: PUSH
52254: LD_INT 112
52256: PUSH
52257: LD_INT 114
52259: PUSH
52260: LD_INT 116
52262: PUSH
52263: LD_INT 117
52265: PUSH
52266: LD_INT 118
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: ST_TO_ADDR
52291: GO 54186
52293: LD_INT 11
52295: DOUBLE
52296: EQUAL
52297: IFTRUE 52301
52299: GO 52505
52301: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
52302: LD_ADDR_VAR 0 2
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 3
52312: PUSH
52313: LD_INT 4
52315: PUSH
52316: LD_INT 5
52318: PUSH
52319: LD_INT 6
52321: PUSH
52322: LD_INT 7
52324: PUSH
52325: LD_INT 8
52327: PUSH
52328: LD_INT 9
52330: PUSH
52331: LD_INT 10
52333: PUSH
52334: LD_INT 11
52336: PUSH
52337: LD_INT 12
52339: PUSH
52340: LD_INT 13
52342: PUSH
52343: LD_INT 14
52345: PUSH
52346: LD_INT 15
52348: PUSH
52349: LD_INT 16
52351: PUSH
52352: LD_INT 17
52354: PUSH
52355: LD_INT 18
52357: PUSH
52358: LD_INT 19
52360: PUSH
52361: LD_INT 20
52363: PUSH
52364: LD_INT 21
52366: PUSH
52367: LD_INT 22
52369: PUSH
52370: LD_INT 23
52372: PUSH
52373: LD_INT 24
52375: PUSH
52376: LD_INT 25
52378: PUSH
52379: LD_INT 26
52381: PUSH
52382: LD_INT 28
52384: PUSH
52385: LD_INT 30
52387: PUSH
52388: LD_INT 31
52390: PUSH
52391: LD_INT 32
52393: PUSH
52394: LD_INT 34
52396: PUSH
52397: LD_INT 36
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 101
52435: PUSH
52436: LD_INT 102
52438: PUSH
52439: LD_INT 103
52441: PUSH
52442: LD_INT 104
52444: PUSH
52445: LD_INT 105
52447: PUSH
52448: LD_INT 106
52450: PUSH
52451: LD_INT 107
52453: PUSH
52454: LD_INT 108
52456: PUSH
52457: LD_INT 109
52459: PUSH
52460: LD_INT 110
52462: PUSH
52463: LD_INT 111
52465: PUSH
52466: LD_INT 112
52468: PUSH
52469: LD_INT 114
52471: PUSH
52472: LD_INT 116
52474: PUSH
52475: LD_INT 117
52477: PUSH
52478: LD_INT 118
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: ST_TO_ADDR
52503: GO 54186
52505: LD_INT 12
52507: DOUBLE
52508: EQUAL
52509: IFTRUE 52513
52511: GO 52733
52513: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
52514: LD_ADDR_VAR 0 2
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 3
52527: PUSH
52528: LD_INT 4
52530: PUSH
52531: LD_INT 5
52533: PUSH
52534: LD_INT 6
52536: PUSH
52537: LD_INT 7
52539: PUSH
52540: LD_INT 8
52542: PUSH
52543: LD_INT 9
52545: PUSH
52546: LD_INT 10
52548: PUSH
52549: LD_INT 11
52551: PUSH
52552: LD_INT 12
52554: PUSH
52555: LD_INT 13
52557: PUSH
52558: LD_INT 14
52560: PUSH
52561: LD_INT 15
52563: PUSH
52564: LD_INT 16
52566: PUSH
52567: LD_INT 17
52569: PUSH
52570: LD_INT 18
52572: PUSH
52573: LD_INT 19
52575: PUSH
52576: LD_INT 20
52578: PUSH
52579: LD_INT 21
52581: PUSH
52582: LD_INT 22
52584: PUSH
52585: LD_INT 23
52587: PUSH
52588: LD_INT 24
52590: PUSH
52591: LD_INT 25
52593: PUSH
52594: LD_INT 26
52596: PUSH
52597: LD_INT 27
52599: PUSH
52600: LD_INT 28
52602: PUSH
52603: LD_INT 30
52605: PUSH
52606: LD_INT 31
52608: PUSH
52609: LD_INT 32
52611: PUSH
52612: LD_INT 33
52614: PUSH
52615: LD_INT 34
52617: PUSH
52618: LD_INT 36
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 101
52659: PUSH
52660: LD_INT 102
52662: PUSH
52663: LD_INT 103
52665: PUSH
52666: LD_INT 104
52668: PUSH
52669: LD_INT 105
52671: PUSH
52672: LD_INT 106
52674: PUSH
52675: LD_INT 107
52677: PUSH
52678: LD_INT 108
52680: PUSH
52681: LD_INT 109
52683: PUSH
52684: LD_INT 110
52686: PUSH
52687: LD_INT 111
52689: PUSH
52690: LD_INT 112
52692: PUSH
52693: LD_INT 113
52695: PUSH
52696: LD_INT 114
52698: PUSH
52699: LD_INT 116
52701: PUSH
52702: LD_INT 117
52704: PUSH
52705: LD_INT 118
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: ST_TO_ADDR
52731: GO 54186
52733: LD_INT 13
52735: DOUBLE
52736: EQUAL
52737: IFTRUE 52741
52739: GO 52949
52741: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52742: LD_ADDR_VAR 0 2
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 3
52755: PUSH
52756: LD_INT 4
52758: PUSH
52759: LD_INT 5
52761: PUSH
52762: LD_INT 8
52764: PUSH
52765: LD_INT 9
52767: PUSH
52768: LD_INT 10
52770: PUSH
52771: LD_INT 11
52773: PUSH
52774: LD_INT 12
52776: PUSH
52777: LD_INT 14
52779: PUSH
52780: LD_INT 15
52782: PUSH
52783: LD_INT 16
52785: PUSH
52786: LD_INT 17
52788: PUSH
52789: LD_INT 18
52791: PUSH
52792: LD_INT 19
52794: PUSH
52795: LD_INT 20
52797: PUSH
52798: LD_INT 21
52800: PUSH
52801: LD_INT 22
52803: PUSH
52804: LD_INT 23
52806: PUSH
52807: LD_INT 24
52809: PUSH
52810: LD_INT 25
52812: PUSH
52813: LD_INT 26
52815: PUSH
52816: LD_INT 27
52818: PUSH
52819: LD_INT 28
52821: PUSH
52822: LD_INT 30
52824: PUSH
52825: LD_INT 31
52827: PUSH
52828: LD_INT 32
52830: PUSH
52831: LD_INT 33
52833: PUSH
52834: LD_INT 34
52836: PUSH
52837: LD_INT 36
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 101
52875: PUSH
52876: LD_INT 102
52878: PUSH
52879: LD_INT 103
52881: PUSH
52882: LD_INT 104
52884: PUSH
52885: LD_INT 105
52887: PUSH
52888: LD_INT 106
52890: PUSH
52891: LD_INT 107
52893: PUSH
52894: LD_INT 108
52896: PUSH
52897: LD_INT 109
52899: PUSH
52900: LD_INT 110
52902: PUSH
52903: LD_INT 111
52905: PUSH
52906: LD_INT 112
52908: PUSH
52909: LD_INT 113
52911: PUSH
52912: LD_INT 114
52914: PUSH
52915: LD_INT 116
52917: PUSH
52918: LD_INT 117
52920: PUSH
52921: LD_INT 118
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: ST_TO_ADDR
52947: GO 54186
52949: LD_INT 14
52951: DOUBLE
52952: EQUAL
52953: IFTRUE 52957
52955: GO 53181
52957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52958: LD_ADDR_VAR 0 2
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: LD_INT 4
52974: PUSH
52975: LD_INT 5
52977: PUSH
52978: LD_INT 6
52980: PUSH
52981: LD_INT 7
52983: PUSH
52984: LD_INT 8
52986: PUSH
52987: LD_INT 9
52989: PUSH
52990: LD_INT 10
52992: PUSH
52993: LD_INT 11
52995: PUSH
52996: LD_INT 12
52998: PUSH
52999: LD_INT 13
53001: PUSH
53002: LD_INT 14
53004: PUSH
53005: LD_INT 15
53007: PUSH
53008: LD_INT 16
53010: PUSH
53011: LD_INT 17
53013: PUSH
53014: LD_INT 18
53016: PUSH
53017: LD_INT 19
53019: PUSH
53020: LD_INT 20
53022: PUSH
53023: LD_INT 21
53025: PUSH
53026: LD_INT 22
53028: PUSH
53029: LD_INT 23
53031: PUSH
53032: LD_INT 24
53034: PUSH
53035: LD_INT 25
53037: PUSH
53038: LD_INT 26
53040: PUSH
53041: LD_INT 27
53043: PUSH
53044: LD_INT 28
53046: PUSH
53047: LD_INT 29
53049: PUSH
53050: LD_INT 30
53052: PUSH
53053: LD_INT 31
53055: PUSH
53056: LD_INT 32
53058: PUSH
53059: LD_INT 33
53061: PUSH
53062: LD_INT 34
53064: PUSH
53065: LD_INT 36
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 101
53107: PUSH
53108: LD_INT 102
53110: PUSH
53111: LD_INT 103
53113: PUSH
53114: LD_INT 104
53116: PUSH
53117: LD_INT 105
53119: PUSH
53120: LD_INT 106
53122: PUSH
53123: LD_INT 107
53125: PUSH
53126: LD_INT 108
53128: PUSH
53129: LD_INT 109
53131: PUSH
53132: LD_INT 110
53134: PUSH
53135: LD_INT 111
53137: PUSH
53138: LD_INT 112
53140: PUSH
53141: LD_INT 113
53143: PUSH
53144: LD_INT 114
53146: PUSH
53147: LD_INT 116
53149: PUSH
53150: LD_INT 117
53152: PUSH
53153: LD_INT 118
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: ST_TO_ADDR
53179: GO 54186
53181: LD_INT 15
53183: DOUBLE
53184: EQUAL
53185: IFTRUE 53189
53187: GO 53413
53189: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
53190: LD_ADDR_VAR 0 2
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: LD_INT 4
53206: PUSH
53207: LD_INT 5
53209: PUSH
53210: LD_INT 6
53212: PUSH
53213: LD_INT 7
53215: PUSH
53216: LD_INT 8
53218: PUSH
53219: LD_INT 9
53221: PUSH
53222: LD_INT 10
53224: PUSH
53225: LD_INT 11
53227: PUSH
53228: LD_INT 12
53230: PUSH
53231: LD_INT 13
53233: PUSH
53234: LD_INT 14
53236: PUSH
53237: LD_INT 15
53239: PUSH
53240: LD_INT 16
53242: PUSH
53243: LD_INT 17
53245: PUSH
53246: LD_INT 18
53248: PUSH
53249: LD_INT 19
53251: PUSH
53252: LD_INT 20
53254: PUSH
53255: LD_INT 21
53257: PUSH
53258: LD_INT 22
53260: PUSH
53261: LD_INT 23
53263: PUSH
53264: LD_INT 24
53266: PUSH
53267: LD_INT 25
53269: PUSH
53270: LD_INT 26
53272: PUSH
53273: LD_INT 27
53275: PUSH
53276: LD_INT 28
53278: PUSH
53279: LD_INT 29
53281: PUSH
53282: LD_INT 30
53284: PUSH
53285: LD_INT 31
53287: PUSH
53288: LD_INT 32
53290: PUSH
53291: LD_INT 33
53293: PUSH
53294: LD_INT 34
53296: PUSH
53297: LD_INT 36
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 101
53339: PUSH
53340: LD_INT 102
53342: PUSH
53343: LD_INT 103
53345: PUSH
53346: LD_INT 104
53348: PUSH
53349: LD_INT 105
53351: PUSH
53352: LD_INT 106
53354: PUSH
53355: LD_INT 107
53357: PUSH
53358: LD_INT 108
53360: PUSH
53361: LD_INT 109
53363: PUSH
53364: LD_INT 110
53366: PUSH
53367: LD_INT 111
53369: PUSH
53370: LD_INT 112
53372: PUSH
53373: LD_INT 113
53375: PUSH
53376: LD_INT 114
53378: PUSH
53379: LD_INT 116
53381: PUSH
53382: LD_INT 117
53384: PUSH
53385: LD_INT 118
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: ST_TO_ADDR
53411: GO 54186
53413: LD_INT 16
53415: DOUBLE
53416: EQUAL
53417: IFTRUE 53421
53419: GO 53557
53421: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
53422: LD_ADDR_VAR 0 2
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: LD_INT 5
53435: PUSH
53436: LD_INT 7
53438: PUSH
53439: LD_INT 11
53441: PUSH
53442: LD_INT 12
53444: PUSH
53445: LD_INT 15
53447: PUSH
53448: LD_INT 16
53450: PUSH
53451: LD_INT 20
53453: PUSH
53454: LD_INT 21
53456: PUSH
53457: LD_INT 22
53459: PUSH
53460: LD_INT 23
53462: PUSH
53463: LD_INT 25
53465: PUSH
53466: LD_INT 26
53468: PUSH
53469: LD_INT 30
53471: PUSH
53472: LD_INT 31
53474: PUSH
53475: LD_INT 32
53477: PUSH
53478: LD_INT 33
53480: PUSH
53481: LD_INT 34
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 101
53507: PUSH
53508: LD_INT 102
53510: PUSH
53511: LD_INT 103
53513: PUSH
53514: LD_INT 106
53516: PUSH
53517: LD_INT 108
53519: PUSH
53520: LD_INT 112
53522: PUSH
53523: LD_INT 113
53525: PUSH
53526: LD_INT 114
53528: PUSH
53529: LD_INT 116
53531: PUSH
53532: LD_INT 117
53534: PUSH
53535: LD_INT 118
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: ST_TO_ADDR
53555: GO 54186
53557: LD_INT 17
53559: DOUBLE
53560: EQUAL
53561: IFTRUE 53565
53563: GO 53789
53565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
53566: LD_ADDR_VAR 0 2
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: LD_INT 4
53582: PUSH
53583: LD_INT 5
53585: PUSH
53586: LD_INT 6
53588: PUSH
53589: LD_INT 7
53591: PUSH
53592: LD_INT 8
53594: PUSH
53595: LD_INT 9
53597: PUSH
53598: LD_INT 10
53600: PUSH
53601: LD_INT 11
53603: PUSH
53604: LD_INT 12
53606: PUSH
53607: LD_INT 13
53609: PUSH
53610: LD_INT 14
53612: PUSH
53613: LD_INT 15
53615: PUSH
53616: LD_INT 16
53618: PUSH
53619: LD_INT 17
53621: PUSH
53622: LD_INT 18
53624: PUSH
53625: LD_INT 19
53627: PUSH
53628: LD_INT 20
53630: PUSH
53631: LD_INT 21
53633: PUSH
53634: LD_INT 22
53636: PUSH
53637: LD_INT 23
53639: PUSH
53640: LD_INT 24
53642: PUSH
53643: LD_INT 25
53645: PUSH
53646: LD_INT 26
53648: PUSH
53649: LD_INT 27
53651: PUSH
53652: LD_INT 28
53654: PUSH
53655: LD_INT 29
53657: PUSH
53658: LD_INT 30
53660: PUSH
53661: LD_INT 31
53663: PUSH
53664: LD_INT 32
53666: PUSH
53667: LD_INT 33
53669: PUSH
53670: LD_INT 34
53672: PUSH
53673: LD_INT 36
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 101
53715: PUSH
53716: LD_INT 102
53718: PUSH
53719: LD_INT 103
53721: PUSH
53722: LD_INT 104
53724: PUSH
53725: LD_INT 105
53727: PUSH
53728: LD_INT 106
53730: PUSH
53731: LD_INT 107
53733: PUSH
53734: LD_INT 108
53736: PUSH
53737: LD_INT 109
53739: PUSH
53740: LD_INT 110
53742: PUSH
53743: LD_INT 111
53745: PUSH
53746: LD_INT 112
53748: PUSH
53749: LD_INT 113
53751: PUSH
53752: LD_INT 114
53754: PUSH
53755: LD_INT 116
53757: PUSH
53758: LD_INT 117
53760: PUSH
53761: LD_INT 118
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: ST_TO_ADDR
53787: GO 54186
53789: LD_INT 18
53791: DOUBLE
53792: EQUAL
53793: IFTRUE 53797
53795: GO 53945
53797: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53798: LD_ADDR_VAR 0 2
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 4
53808: PUSH
53809: LD_INT 5
53811: PUSH
53812: LD_INT 7
53814: PUSH
53815: LD_INT 11
53817: PUSH
53818: LD_INT 12
53820: PUSH
53821: LD_INT 15
53823: PUSH
53824: LD_INT 16
53826: PUSH
53827: LD_INT 20
53829: PUSH
53830: LD_INT 21
53832: PUSH
53833: LD_INT 22
53835: PUSH
53836: LD_INT 23
53838: PUSH
53839: LD_INT 25
53841: PUSH
53842: LD_INT 26
53844: PUSH
53845: LD_INT 30
53847: PUSH
53848: LD_INT 31
53850: PUSH
53851: LD_INT 32
53853: PUSH
53854: LD_INT 33
53856: PUSH
53857: LD_INT 34
53859: PUSH
53860: LD_INT 35
53862: PUSH
53863: LD_INT 36
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 101
53891: PUSH
53892: LD_INT 102
53894: PUSH
53895: LD_INT 103
53897: PUSH
53898: LD_INT 106
53900: PUSH
53901: LD_INT 108
53903: PUSH
53904: LD_INT 112
53906: PUSH
53907: LD_INT 113
53909: PUSH
53910: LD_INT 114
53912: PUSH
53913: LD_INT 115
53915: PUSH
53916: LD_INT 116
53918: PUSH
53919: LD_INT 117
53921: PUSH
53922: LD_INT 118
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: ST_TO_ADDR
53943: GO 54186
53945: LD_INT 19
53947: DOUBLE
53948: EQUAL
53949: IFTRUE 53953
53951: GO 54185
53953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53954: LD_ADDR_VAR 0 2
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 4
53970: PUSH
53971: LD_INT 5
53973: PUSH
53974: LD_INT 6
53976: PUSH
53977: LD_INT 7
53979: PUSH
53980: LD_INT 8
53982: PUSH
53983: LD_INT 9
53985: PUSH
53986: LD_INT 10
53988: PUSH
53989: LD_INT 11
53991: PUSH
53992: LD_INT 12
53994: PUSH
53995: LD_INT 13
53997: PUSH
53998: LD_INT 14
54000: PUSH
54001: LD_INT 15
54003: PUSH
54004: LD_INT 16
54006: PUSH
54007: LD_INT 17
54009: PUSH
54010: LD_INT 18
54012: PUSH
54013: LD_INT 19
54015: PUSH
54016: LD_INT 20
54018: PUSH
54019: LD_INT 21
54021: PUSH
54022: LD_INT 22
54024: PUSH
54025: LD_INT 23
54027: PUSH
54028: LD_INT 24
54030: PUSH
54031: LD_INT 25
54033: PUSH
54034: LD_INT 26
54036: PUSH
54037: LD_INT 27
54039: PUSH
54040: LD_INT 28
54042: PUSH
54043: LD_INT 29
54045: PUSH
54046: LD_INT 30
54048: PUSH
54049: LD_INT 31
54051: PUSH
54052: LD_INT 32
54054: PUSH
54055: LD_INT 33
54057: PUSH
54058: LD_INT 34
54060: PUSH
54061: LD_INT 35
54063: PUSH
54064: LD_INT 36
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 101
54107: PUSH
54108: LD_INT 102
54110: PUSH
54111: LD_INT 103
54113: PUSH
54114: LD_INT 104
54116: PUSH
54117: LD_INT 105
54119: PUSH
54120: LD_INT 106
54122: PUSH
54123: LD_INT 107
54125: PUSH
54126: LD_INT 108
54128: PUSH
54129: LD_INT 109
54131: PUSH
54132: LD_INT 110
54134: PUSH
54135: LD_INT 111
54137: PUSH
54138: LD_INT 112
54140: PUSH
54141: LD_INT 113
54143: PUSH
54144: LD_INT 114
54146: PUSH
54147: LD_INT 115
54149: PUSH
54150: LD_INT 116
54152: PUSH
54153: LD_INT 117
54155: PUSH
54156: LD_INT 118
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: ST_TO_ADDR
54183: GO 54186
54185: POP
// end else
54186: GO 54417
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
54188: LD_ADDR_VAR 0 2
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: LD_INT 4
54204: PUSH
54205: LD_INT 5
54207: PUSH
54208: LD_INT 6
54210: PUSH
54211: LD_INT 7
54213: PUSH
54214: LD_INT 8
54216: PUSH
54217: LD_INT 9
54219: PUSH
54220: LD_INT 10
54222: PUSH
54223: LD_INT 11
54225: PUSH
54226: LD_INT 12
54228: PUSH
54229: LD_INT 13
54231: PUSH
54232: LD_INT 14
54234: PUSH
54235: LD_INT 15
54237: PUSH
54238: LD_INT 16
54240: PUSH
54241: LD_INT 17
54243: PUSH
54244: LD_INT 18
54246: PUSH
54247: LD_INT 19
54249: PUSH
54250: LD_INT 20
54252: PUSH
54253: LD_INT 21
54255: PUSH
54256: LD_INT 22
54258: PUSH
54259: LD_INT 23
54261: PUSH
54262: LD_INT 24
54264: PUSH
54265: LD_INT 25
54267: PUSH
54268: LD_INT 26
54270: PUSH
54271: LD_INT 27
54273: PUSH
54274: LD_INT 28
54276: PUSH
54277: LD_INT 29
54279: PUSH
54280: LD_INT 30
54282: PUSH
54283: LD_INT 31
54285: PUSH
54286: LD_INT 32
54288: PUSH
54289: LD_INT 33
54291: PUSH
54292: LD_INT 34
54294: PUSH
54295: LD_INT 35
54297: PUSH
54298: LD_INT 36
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 101
54341: PUSH
54342: LD_INT 102
54344: PUSH
54345: LD_INT 103
54347: PUSH
54348: LD_INT 104
54350: PUSH
54351: LD_INT 105
54353: PUSH
54354: LD_INT 106
54356: PUSH
54357: LD_INT 107
54359: PUSH
54360: LD_INT 108
54362: PUSH
54363: LD_INT 109
54365: PUSH
54366: LD_INT 110
54368: PUSH
54369: LD_INT 111
54371: PUSH
54372: LD_INT 112
54374: PUSH
54375: LD_INT 113
54377: PUSH
54378: LD_INT 114
54380: PUSH
54381: LD_INT 115
54383: PUSH
54384: LD_INT 116
54386: PUSH
54387: LD_INT 117
54389: PUSH
54390: LD_INT 118
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: ST_TO_ADDR
// if result then
54417: LD_VAR 0 2
54421: IFFALSE 55207
// begin normal :=  ;
54423: LD_ADDR_VAR 0 5
54427: PUSH
54428: LD_STRING 
54430: ST_TO_ADDR
// hardcore :=  ;
54431: LD_ADDR_VAR 0 6
54435: PUSH
54436: LD_STRING 
54438: ST_TO_ADDR
// active :=  ;
54439: LD_ADDR_VAR 0 7
54443: PUSH
54444: LD_STRING 
54446: ST_TO_ADDR
// for i = 1 to normalCounter do
54447: LD_ADDR_VAR 0 8
54451: PUSH
54452: DOUBLE
54453: LD_INT 1
54455: DEC
54456: ST_TO_ADDR
54457: LD_EXP 60
54461: PUSH
54462: FOR_TO
54463: IFFALSE 54564
// begin tmp := 0 ;
54465: LD_ADDR_VAR 0 3
54469: PUSH
54470: LD_STRING 0
54472: ST_TO_ADDR
// if result [ 1 ] then
54473: LD_VAR 0 2
54477: PUSH
54478: LD_INT 1
54480: ARRAY
54481: IFFALSE 54546
// if result [ 1 ] [ 1 ] = i then
54483: LD_VAR 0 2
54487: PUSH
54488: LD_INT 1
54490: ARRAY
54491: PUSH
54492: LD_INT 1
54494: ARRAY
54495: PUSH
54496: LD_VAR 0 8
54500: EQUAL
54501: IFFALSE 54546
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
54503: LD_ADDR_VAR 0 2
54507: PUSH
54508: LD_VAR 0 2
54512: PPUSH
54513: LD_INT 1
54515: PPUSH
54516: LD_VAR 0 2
54520: PUSH
54521: LD_INT 1
54523: ARRAY
54524: PPUSH
54525: LD_INT 1
54527: PPUSH
54528: CALL_OW 3
54532: PPUSH
54533: CALL_OW 1
54537: ST_TO_ADDR
// tmp := 1 ;
54538: LD_ADDR_VAR 0 3
54542: PUSH
54543: LD_STRING 1
54545: ST_TO_ADDR
// end ; normal := normal & tmp ;
54546: LD_ADDR_VAR 0 5
54550: PUSH
54551: LD_VAR 0 5
54555: PUSH
54556: LD_VAR 0 3
54560: STR
54561: ST_TO_ADDR
// end ;
54562: GO 54462
54564: POP
54565: POP
// for i = 1 to hardcoreCounter do
54566: LD_ADDR_VAR 0 8
54570: PUSH
54571: DOUBLE
54572: LD_INT 1
54574: DEC
54575: ST_TO_ADDR
54576: LD_EXP 61
54580: PUSH
54581: FOR_TO
54582: IFFALSE 54687
// begin tmp := 0 ;
54584: LD_ADDR_VAR 0 3
54588: PUSH
54589: LD_STRING 0
54591: ST_TO_ADDR
// if result [ 2 ] then
54592: LD_VAR 0 2
54596: PUSH
54597: LD_INT 2
54599: ARRAY
54600: IFFALSE 54669
// if result [ 2 ] [ 1 ] = 100 + i then
54602: LD_VAR 0 2
54606: PUSH
54607: LD_INT 2
54609: ARRAY
54610: PUSH
54611: LD_INT 1
54613: ARRAY
54614: PUSH
54615: LD_INT 100
54617: PUSH
54618: LD_VAR 0 8
54622: PLUS
54623: EQUAL
54624: IFFALSE 54669
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
54626: LD_ADDR_VAR 0 2
54630: PUSH
54631: LD_VAR 0 2
54635: PPUSH
54636: LD_INT 2
54638: PPUSH
54639: LD_VAR 0 2
54643: PUSH
54644: LD_INT 2
54646: ARRAY
54647: PPUSH
54648: LD_INT 1
54650: PPUSH
54651: CALL_OW 3
54655: PPUSH
54656: CALL_OW 1
54660: ST_TO_ADDR
// tmp := 1 ;
54661: LD_ADDR_VAR 0 3
54665: PUSH
54666: LD_STRING 1
54668: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
54669: LD_ADDR_VAR 0 6
54673: PUSH
54674: LD_VAR 0 6
54678: PUSH
54679: LD_VAR 0 3
54683: STR
54684: ST_TO_ADDR
// end ;
54685: GO 54581
54687: POP
54688: POP
// if isGameLoad then
54689: LD_VAR 0 1
54693: IFFALSE 55168
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
54695: LD_ADDR_VAR 0 4
54699: PUSH
54700: LD_EXP 64
54704: PUSH
54705: LD_EXP 63
54709: PUSH
54710: LD_EXP 65
54714: PUSH
54715: LD_EXP 62
54719: PUSH
54720: LD_EXP 66
54724: PUSH
54725: LD_EXP 67
54729: PUSH
54730: LD_EXP 68
54734: PUSH
54735: LD_EXP 69
54739: PUSH
54740: LD_EXP 70
54744: PUSH
54745: LD_EXP 71
54749: PUSH
54750: LD_EXP 72
54754: PUSH
54755: LD_EXP 73
54759: PUSH
54760: LD_EXP 74
54764: PUSH
54765: LD_EXP 75
54769: PUSH
54770: LD_EXP 83
54774: PUSH
54775: LD_EXP 84
54779: PUSH
54780: LD_EXP 85
54784: PUSH
54785: LD_EXP 86
54789: PUSH
54790: LD_EXP 88
54794: PUSH
54795: LD_EXP 89
54799: PUSH
54800: LD_EXP 90
54804: PUSH
54805: LD_EXP 93
54809: PUSH
54810: LD_EXP 95
54814: PUSH
54815: LD_EXP 96
54819: PUSH
54820: LD_EXP 97
54824: PUSH
54825: LD_EXP 99
54829: PUSH
54830: LD_EXP 100
54834: PUSH
54835: LD_EXP 103
54839: PUSH
54840: LD_EXP 104
54844: PUSH
54845: LD_EXP 105
54849: PUSH
54850: LD_EXP 106
54854: PUSH
54855: LD_EXP 107
54859: PUSH
54860: LD_EXP 108
54864: PUSH
54865: LD_EXP 109
54869: PUSH
54870: LD_EXP 110
54874: PUSH
54875: LD_EXP 111
54879: PUSH
54880: LD_EXP 76
54884: PUSH
54885: LD_EXP 77
54889: PUSH
54890: LD_EXP 80
54894: PUSH
54895: LD_EXP 81
54899: PUSH
54900: LD_EXP 82
54904: PUSH
54905: LD_EXP 78
54909: PUSH
54910: LD_EXP 79
54914: PUSH
54915: LD_EXP 87
54919: PUSH
54920: LD_EXP 91
54924: PUSH
54925: LD_EXP 92
54929: PUSH
54930: LD_EXP 94
54934: PUSH
54935: LD_EXP 98
54939: PUSH
54940: LD_EXP 101
54944: PUSH
54945: LD_EXP 102
54949: PUSH
54950: LD_EXP 112
54954: PUSH
54955: LD_EXP 113
54959: PUSH
54960: LD_EXP 114
54964: PUSH
54965: LD_EXP 115
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: ST_TO_ADDR
// tmp :=  ;
55026: LD_ADDR_VAR 0 3
55030: PUSH
55031: LD_STRING 
55033: ST_TO_ADDR
// for i = 1 to normalCounter do
55034: LD_ADDR_VAR 0 8
55038: PUSH
55039: DOUBLE
55040: LD_INT 1
55042: DEC
55043: ST_TO_ADDR
55044: LD_EXP 60
55048: PUSH
55049: FOR_TO
55050: IFFALSE 55086
// begin if flags [ i ] then
55052: LD_VAR 0 4
55056: PUSH
55057: LD_VAR 0 8
55061: ARRAY
55062: IFFALSE 55084
// tmp := tmp & i & ; ;
55064: LD_ADDR_VAR 0 3
55068: PUSH
55069: LD_VAR 0 3
55073: PUSH
55074: LD_VAR 0 8
55078: STR
55079: PUSH
55080: LD_STRING ;
55082: STR
55083: ST_TO_ADDR
// end ;
55084: GO 55049
55086: POP
55087: POP
// for i = 1 to hardcoreCounter do
55088: LD_ADDR_VAR 0 8
55092: PUSH
55093: DOUBLE
55094: LD_INT 1
55096: DEC
55097: ST_TO_ADDR
55098: LD_EXP 61
55102: PUSH
55103: FOR_TO
55104: IFFALSE 55150
// begin if flags [ normalCounter + i ] then
55106: LD_VAR 0 4
55110: PUSH
55111: LD_EXP 60
55115: PUSH
55116: LD_VAR 0 8
55120: PLUS
55121: ARRAY
55122: IFFALSE 55148
// tmp := tmp & ( 100 + i ) & ; ;
55124: LD_ADDR_VAR 0 3
55128: PUSH
55129: LD_VAR 0 3
55133: PUSH
55134: LD_INT 100
55136: PUSH
55137: LD_VAR 0 8
55141: PLUS
55142: STR
55143: PUSH
55144: LD_STRING ;
55146: STR
55147: ST_TO_ADDR
// end ;
55148: GO 55103
55150: POP
55151: POP
// if tmp then
55152: LD_VAR 0 3
55156: IFFALSE 55168
// active := tmp ;
55158: LD_ADDR_VAR 0 7
55162: PUSH
55163: LD_VAR 0 3
55167: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
55168: LD_STRING getStreamItemsFromMission("
55170: PUSH
55171: LD_VAR 0 5
55175: STR
55176: PUSH
55177: LD_STRING ","
55179: STR
55180: PUSH
55181: LD_VAR 0 6
55185: STR
55186: PUSH
55187: LD_STRING ","
55189: STR
55190: PUSH
55191: LD_VAR 0 7
55195: STR
55196: PUSH
55197: LD_STRING ")
55199: STR
55200: PPUSH
55201: CALL_OW 559
// end else
55205: GO 55214
// ToLua ( getStreamItemsFromMission("","","") ) ;
55207: LD_STRING getStreamItemsFromMission("","","")
55209: PPUSH
55210: CALL_OW 559
// end ;
55214: LD_VAR 0 2
55218: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
55219: LD_EXP 59
55223: PUSH
55224: LD_EXP 64
55228: AND
55229: IFFALSE 55353
55231: GO 55233
55233: DISABLE
55234: LD_INT 0
55236: PPUSH
55237: PPUSH
// begin enable ;
55238: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
55239: LD_ADDR_VAR 0 2
55243: PUSH
55244: LD_INT 22
55246: PUSH
55247: LD_OWVAR 2
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 34
55261: PUSH
55262: LD_INT 7
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 34
55271: PUSH
55272: LD_INT 45
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 34
55281: PUSH
55282: LD_INT 28
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 34
55291: PUSH
55292: LD_INT 47
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PPUSH
55310: CALL_OW 69
55314: ST_TO_ADDR
// if not tmp then
55315: LD_VAR 0 2
55319: NOT
55320: IFFALSE 55324
// exit ;
55322: GO 55353
// for i in tmp do
55324: LD_ADDR_VAR 0 1
55328: PUSH
55329: LD_VAR 0 2
55333: PUSH
55334: FOR_IN
55335: IFFALSE 55351
// begin SetLives ( i , 0 ) ;
55337: LD_VAR 0 1
55341: PPUSH
55342: LD_INT 0
55344: PPUSH
55345: CALL_OW 234
// end ;
55349: GO 55334
55351: POP
55352: POP
// end ;
55353: PPOPN 2
55355: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
55356: LD_EXP 59
55360: PUSH
55361: LD_EXP 65
55365: AND
55366: IFFALSE 55450
55368: GO 55370
55370: DISABLE
55371: LD_INT 0
55373: PPUSH
55374: PPUSH
// begin enable ;
55375: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
55376: LD_ADDR_VAR 0 2
55380: PUSH
55381: LD_INT 22
55383: PUSH
55384: LD_OWVAR 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 32
55395: PUSH
55396: LD_INT 3
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PPUSH
55407: CALL_OW 69
55411: ST_TO_ADDR
// if not tmp then
55412: LD_VAR 0 2
55416: NOT
55417: IFFALSE 55421
// exit ;
55419: GO 55450
// for i in tmp do
55421: LD_ADDR_VAR 0 1
55425: PUSH
55426: LD_VAR 0 2
55430: PUSH
55431: FOR_IN
55432: IFFALSE 55448
// begin SetLives ( i , 0 ) ;
55434: LD_VAR 0 1
55438: PPUSH
55439: LD_INT 0
55441: PPUSH
55442: CALL_OW 234
// end ;
55446: GO 55431
55448: POP
55449: POP
// end ;
55450: PPOPN 2
55452: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
55453: LD_EXP 59
55457: PUSH
55458: LD_EXP 62
55462: AND
55463: IFFALSE 55556
55465: GO 55467
55467: DISABLE
55468: LD_INT 0
55470: PPUSH
// begin enable ;
55471: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
55472: LD_ADDR_VAR 0 1
55476: PUSH
55477: LD_INT 22
55479: PUSH
55480: LD_OWVAR 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: LD_INT 25
55494: PUSH
55495: LD_INT 5
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 25
55504: PUSH
55505: LD_INT 9
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 25
55514: PUSH
55515: LD_INT 8
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PPUSH
55532: CALL_OW 69
55536: PUSH
55537: FOR_IN
55538: IFFALSE 55554
// begin SetClass ( i , 1 ) ;
55540: LD_VAR 0 1
55544: PPUSH
55545: LD_INT 1
55547: PPUSH
55548: CALL_OW 336
// end ;
55552: GO 55537
55554: POP
55555: POP
// end ;
55556: PPOPN 1
55558: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
55559: LD_EXP 59
55563: PUSH
55564: LD_EXP 63
55568: AND
55569: PUSH
55570: LD_OWVAR 65
55574: PUSH
55575: LD_INT 7
55577: LESS
55578: AND
55579: IFFALSE 55593
55581: GO 55583
55583: DISABLE
// begin enable ;
55584: ENABLE
// game_speed := 7 ;
55585: LD_ADDR_OWVAR 65
55589: PUSH
55590: LD_INT 7
55592: ST_TO_ADDR
// end ;
55593: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
55594: LD_EXP 59
55598: PUSH
55599: LD_EXP 66
55603: AND
55604: IFFALSE 55806
55606: GO 55608
55608: DISABLE
55609: LD_INT 0
55611: PPUSH
55612: PPUSH
55613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55614: LD_ADDR_VAR 0 3
55618: PUSH
55619: LD_INT 81
55621: PUSH
55622: LD_OWVAR 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 21
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PPUSH
55645: CALL_OW 69
55649: ST_TO_ADDR
// if not tmp then
55650: LD_VAR 0 3
55654: NOT
55655: IFFALSE 55659
// exit ;
55657: GO 55806
// if tmp > 5 then
55659: LD_VAR 0 3
55663: PUSH
55664: LD_INT 5
55666: GREATER
55667: IFFALSE 55679
// k := 5 else
55669: LD_ADDR_VAR 0 2
55673: PUSH
55674: LD_INT 5
55676: ST_TO_ADDR
55677: GO 55689
// k := tmp ;
55679: LD_ADDR_VAR 0 2
55683: PUSH
55684: LD_VAR 0 3
55688: ST_TO_ADDR
// for i := 1 to k do
55689: LD_ADDR_VAR 0 1
55693: PUSH
55694: DOUBLE
55695: LD_INT 1
55697: DEC
55698: ST_TO_ADDR
55699: LD_VAR 0 2
55703: PUSH
55704: FOR_TO
55705: IFFALSE 55804
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55707: LD_VAR 0 3
55711: PUSH
55712: LD_VAR 0 1
55716: ARRAY
55717: PPUSH
55718: LD_VAR 0 1
55722: PUSH
55723: LD_INT 4
55725: MOD
55726: PUSH
55727: LD_INT 1
55729: PLUS
55730: PPUSH
55731: CALL_OW 259
55735: PUSH
55736: LD_INT 10
55738: LESS
55739: IFFALSE 55802
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55741: LD_VAR 0 3
55745: PUSH
55746: LD_VAR 0 1
55750: ARRAY
55751: PPUSH
55752: LD_VAR 0 1
55756: PUSH
55757: LD_INT 4
55759: MOD
55760: PUSH
55761: LD_INT 1
55763: PLUS
55764: PPUSH
55765: LD_VAR 0 3
55769: PUSH
55770: LD_VAR 0 1
55774: ARRAY
55775: PPUSH
55776: LD_VAR 0 1
55780: PUSH
55781: LD_INT 4
55783: MOD
55784: PUSH
55785: LD_INT 1
55787: PLUS
55788: PPUSH
55789: CALL_OW 259
55793: PUSH
55794: LD_INT 1
55796: PLUS
55797: PPUSH
55798: CALL_OW 237
55802: GO 55704
55804: POP
55805: POP
// end ;
55806: PPOPN 3
55808: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55809: LD_EXP 59
55813: PUSH
55814: LD_EXP 67
55818: AND
55819: IFFALSE 55839
55821: GO 55823
55823: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55824: LD_INT 4
55826: PPUSH
55827: LD_OWVAR 2
55831: PPUSH
55832: LD_INT 0
55834: PPUSH
55835: CALL_OW 324
55839: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55840: LD_EXP 59
55844: PUSH
55845: LD_EXP 96
55849: AND
55850: IFFALSE 55870
55852: GO 55854
55854: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55855: LD_INT 19
55857: PPUSH
55858: LD_OWVAR 2
55862: PPUSH
55863: LD_INT 0
55865: PPUSH
55866: CALL_OW 324
55870: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55871: LD_EXP 59
55875: PUSH
55876: LD_EXP 68
55880: AND
55881: IFFALSE 55983
55883: GO 55885
55885: DISABLE
55886: LD_INT 0
55888: PPUSH
55889: PPUSH
// begin enable ;
55890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55891: LD_ADDR_VAR 0 2
55895: PUSH
55896: LD_INT 22
55898: PUSH
55899: LD_OWVAR 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: LD_INT 34
55913: PUSH
55914: LD_INT 11
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 34
55923: PUSH
55924: LD_INT 30
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PPUSH
55940: CALL_OW 69
55944: ST_TO_ADDR
// if not tmp then
55945: LD_VAR 0 2
55949: NOT
55950: IFFALSE 55954
// exit ;
55952: GO 55983
// for i in tmp do
55954: LD_ADDR_VAR 0 1
55958: PUSH
55959: LD_VAR 0 2
55963: PUSH
55964: FOR_IN
55965: IFFALSE 55981
// begin SetLives ( i , 0 ) ;
55967: LD_VAR 0 1
55971: PPUSH
55972: LD_INT 0
55974: PPUSH
55975: CALL_OW 234
// end ;
55979: GO 55964
55981: POP
55982: POP
// end ;
55983: PPOPN 2
55985: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55986: LD_EXP 59
55990: PUSH
55991: LD_EXP 69
55995: AND
55996: IFFALSE 56016
55998: GO 56000
56000: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56001: LD_INT 32
56003: PPUSH
56004: LD_OWVAR 2
56008: PPUSH
56009: LD_INT 0
56011: PPUSH
56012: CALL_OW 324
56016: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56017: LD_EXP 59
56021: PUSH
56022: LD_EXP 70
56026: AND
56027: IFFALSE 56208
56029: GO 56031
56031: DISABLE
56032: LD_INT 0
56034: PPUSH
56035: PPUSH
56036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56037: LD_ADDR_VAR 0 2
56041: PUSH
56042: LD_INT 22
56044: PUSH
56045: LD_OWVAR 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 33
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PPUSH
56068: CALL_OW 69
56072: ST_TO_ADDR
// if not tmp then
56073: LD_VAR 0 2
56077: NOT
56078: IFFALSE 56082
// exit ;
56080: GO 56208
// side := 0 ;
56082: LD_ADDR_VAR 0 3
56086: PUSH
56087: LD_INT 0
56089: ST_TO_ADDR
// for i := 1 to 8 do
56090: LD_ADDR_VAR 0 1
56094: PUSH
56095: DOUBLE
56096: LD_INT 1
56098: DEC
56099: ST_TO_ADDR
56100: LD_INT 8
56102: PUSH
56103: FOR_TO
56104: IFFALSE 56152
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56106: LD_OWVAR 2
56110: PUSH
56111: LD_VAR 0 1
56115: NONEQUAL
56116: PUSH
56117: LD_OWVAR 2
56121: PPUSH
56122: LD_VAR 0 1
56126: PPUSH
56127: CALL_OW 81
56131: PUSH
56132: LD_INT 2
56134: EQUAL
56135: AND
56136: IFFALSE 56150
// begin side := i ;
56138: LD_ADDR_VAR 0 3
56142: PUSH
56143: LD_VAR 0 1
56147: ST_TO_ADDR
// break ;
56148: GO 56152
// end ;
56150: GO 56103
56152: POP
56153: POP
// if not side then
56154: LD_VAR 0 3
56158: NOT
56159: IFFALSE 56163
// exit ;
56161: GO 56208
// for i := 1 to tmp do
56163: LD_ADDR_VAR 0 1
56167: PUSH
56168: DOUBLE
56169: LD_INT 1
56171: DEC
56172: ST_TO_ADDR
56173: LD_VAR 0 2
56177: PUSH
56178: FOR_TO
56179: IFFALSE 56206
// if Prob ( 60 ) then
56181: LD_INT 60
56183: PPUSH
56184: CALL_OW 13
56188: IFFALSE 56204
// SetSide ( i , side ) ;
56190: LD_VAR 0 1
56194: PPUSH
56195: LD_VAR 0 3
56199: PPUSH
56200: CALL_OW 235
56204: GO 56178
56206: POP
56207: POP
// end ;
56208: PPOPN 3
56210: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
56211: LD_EXP 59
56215: PUSH
56216: LD_EXP 72
56220: AND
56221: IFFALSE 56340
56223: GO 56225
56225: DISABLE
56226: LD_INT 0
56228: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
56229: LD_ADDR_VAR 0 1
56233: PUSH
56234: LD_INT 22
56236: PUSH
56237: LD_OWVAR 2
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 21
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: LD_INT 23
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: LIST
56277: PPUSH
56278: CALL_OW 69
56282: PUSH
56283: FOR_IN
56284: IFFALSE 56338
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
56286: LD_VAR 0 1
56290: PPUSH
56291: CALL_OW 257
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: IN
56314: IFFALSE 56336
// SetClass ( un , rand ( 1 , 4 ) ) ;
56316: LD_VAR 0 1
56320: PPUSH
56321: LD_INT 1
56323: PPUSH
56324: LD_INT 4
56326: PPUSH
56327: CALL_OW 12
56331: PPUSH
56332: CALL_OW 336
56336: GO 56283
56338: POP
56339: POP
// end ;
56340: PPOPN 1
56342: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
56343: LD_EXP 59
56347: PUSH
56348: LD_EXP 71
56352: AND
56353: IFFALSE 56432
56355: GO 56357
56357: DISABLE
56358: LD_INT 0
56360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56361: LD_ADDR_VAR 0 1
56365: PUSH
56366: LD_INT 22
56368: PUSH
56369: LD_OWVAR 2
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 21
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PPUSH
56392: CALL_OW 69
56396: ST_TO_ADDR
// if not tmp then
56397: LD_VAR 0 1
56401: NOT
56402: IFFALSE 56406
// exit ;
56404: GO 56432
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
56406: LD_VAR 0 1
56410: PUSH
56411: LD_INT 1
56413: PPUSH
56414: LD_VAR 0 1
56418: PPUSH
56419: CALL_OW 12
56423: ARRAY
56424: PPUSH
56425: LD_INT 100
56427: PPUSH
56428: CALL_OW 234
// end ;
56432: PPOPN 1
56434: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
56435: LD_EXP 59
56439: PUSH
56440: LD_EXP 73
56444: AND
56445: IFFALSE 56543
56447: GO 56449
56449: DISABLE
56450: LD_INT 0
56452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56453: LD_ADDR_VAR 0 1
56457: PUSH
56458: LD_INT 22
56460: PUSH
56461: LD_OWVAR 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 21
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PPUSH
56484: CALL_OW 69
56488: ST_TO_ADDR
// if not tmp then
56489: LD_VAR 0 1
56493: NOT
56494: IFFALSE 56498
// exit ;
56496: GO 56543
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
56498: LD_VAR 0 1
56502: PUSH
56503: LD_INT 1
56505: PPUSH
56506: LD_VAR 0 1
56510: PPUSH
56511: CALL_OW 12
56515: ARRAY
56516: PPUSH
56517: LD_INT 1
56519: PPUSH
56520: LD_INT 4
56522: PPUSH
56523: CALL_OW 12
56527: PPUSH
56528: LD_INT 3000
56530: PPUSH
56531: LD_INT 9000
56533: PPUSH
56534: CALL_OW 12
56538: PPUSH
56539: CALL_OW 492
// end ;
56543: PPOPN 1
56545: END
// every 0 0$1 trigger StreamModeActive and sDepot do
56546: LD_EXP 59
56550: PUSH
56551: LD_EXP 74
56555: AND
56556: IFFALSE 56576
56558: GO 56560
56560: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
56561: LD_INT 1
56563: PPUSH
56564: LD_OWVAR 2
56568: PPUSH
56569: LD_INT 0
56571: PPUSH
56572: CALL_OW 324
56576: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
56577: LD_EXP 59
56581: PUSH
56582: LD_EXP 75
56586: AND
56587: IFFALSE 56670
56589: GO 56591
56591: DISABLE
56592: LD_INT 0
56594: PPUSH
56595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56596: LD_ADDR_VAR 0 2
56600: PUSH
56601: LD_INT 22
56603: PUSH
56604: LD_OWVAR 2
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 21
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PPUSH
56627: CALL_OW 69
56631: ST_TO_ADDR
// if not tmp then
56632: LD_VAR 0 2
56636: NOT
56637: IFFALSE 56641
// exit ;
56639: GO 56670
// for i in tmp do
56641: LD_ADDR_VAR 0 1
56645: PUSH
56646: LD_VAR 0 2
56650: PUSH
56651: FOR_IN
56652: IFFALSE 56668
// SetBLevel ( i , 10 ) ;
56654: LD_VAR 0 1
56658: PPUSH
56659: LD_INT 10
56661: PPUSH
56662: CALL_OW 241
56666: GO 56651
56668: POP
56669: POP
// end ;
56670: PPOPN 2
56672: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
56673: LD_EXP 59
56677: PUSH
56678: LD_EXP 76
56682: AND
56683: IFFALSE 56794
56685: GO 56687
56687: DISABLE
56688: LD_INT 0
56690: PPUSH
56691: PPUSH
56692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56693: LD_ADDR_VAR 0 3
56697: PUSH
56698: LD_INT 22
56700: PUSH
56701: LD_OWVAR 2
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 25
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PPUSH
56724: CALL_OW 69
56728: ST_TO_ADDR
// if not tmp then
56729: LD_VAR 0 3
56733: NOT
56734: IFFALSE 56738
// exit ;
56736: GO 56794
// un := tmp [ rand ( 1 , tmp ) ] ;
56738: LD_ADDR_VAR 0 2
56742: PUSH
56743: LD_VAR 0 3
56747: PUSH
56748: LD_INT 1
56750: PPUSH
56751: LD_VAR 0 3
56755: PPUSH
56756: CALL_OW 12
56760: ARRAY
56761: ST_TO_ADDR
// if Crawls ( un ) then
56762: LD_VAR 0 2
56766: PPUSH
56767: CALL_OW 318
56771: IFFALSE 56782
// ComWalk ( un ) ;
56773: LD_VAR 0 2
56777: PPUSH
56778: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56782: LD_VAR 0 2
56786: PPUSH
56787: LD_INT 5
56789: PPUSH
56790: CALL_OW 336
// end ;
56794: PPOPN 3
56796: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56797: LD_EXP 59
56801: PUSH
56802: LD_EXP 77
56806: AND
56807: PUSH
56808: LD_OWVAR 67
56812: PUSH
56813: LD_INT 4
56815: LESS
56816: AND
56817: IFFALSE 56836
56819: GO 56821
56821: DISABLE
// begin Difficulty := Difficulty + 1 ;
56822: LD_ADDR_OWVAR 67
56826: PUSH
56827: LD_OWVAR 67
56831: PUSH
56832: LD_INT 1
56834: PLUS
56835: ST_TO_ADDR
// end ;
56836: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56837: LD_EXP 59
56841: PUSH
56842: LD_EXP 78
56846: AND
56847: IFFALSE 56950
56849: GO 56851
56851: DISABLE
56852: LD_INT 0
56854: PPUSH
// begin for i := 1 to 5 do
56855: LD_ADDR_VAR 0 1
56859: PUSH
56860: DOUBLE
56861: LD_INT 1
56863: DEC
56864: ST_TO_ADDR
56865: LD_INT 5
56867: PUSH
56868: FOR_TO
56869: IFFALSE 56948
// begin uc_nation := nation_nature ;
56871: LD_ADDR_OWVAR 21
56875: PUSH
56876: LD_INT 0
56878: ST_TO_ADDR
// uc_side := 0 ;
56879: LD_ADDR_OWVAR 20
56883: PUSH
56884: LD_INT 0
56886: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56887: LD_ADDR_OWVAR 29
56891: PUSH
56892: LD_INT 12
56894: PUSH
56895: LD_INT 12
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: ST_TO_ADDR
// hc_agressivity := 20 ;
56902: LD_ADDR_OWVAR 35
56906: PUSH
56907: LD_INT 20
56909: ST_TO_ADDR
// hc_class := class_tiger ;
56910: LD_ADDR_OWVAR 28
56914: PUSH
56915: LD_INT 14
56917: ST_TO_ADDR
// hc_gallery :=  ;
56918: LD_ADDR_OWVAR 33
56922: PUSH
56923: LD_STRING 
56925: ST_TO_ADDR
// hc_name :=  ;
56926: LD_ADDR_OWVAR 26
56930: PUSH
56931: LD_STRING 
56933: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56934: CALL_OW 44
56938: PPUSH
56939: LD_INT 0
56941: PPUSH
56942: CALL_OW 51
// end ;
56946: GO 56868
56948: POP
56949: POP
// end ;
56950: PPOPN 1
56952: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56953: LD_EXP 59
56957: PUSH
56958: LD_EXP 79
56962: AND
56963: IFFALSE 56972
56965: GO 56967
56967: DISABLE
// StreamSibBomb ;
56968: CALL 56973 0 0
56972: END
// export function StreamSibBomb ; var i , x , y ; begin
56973: LD_INT 0
56975: PPUSH
56976: PPUSH
56977: PPUSH
56978: PPUSH
// result := false ;
56979: LD_ADDR_VAR 0 1
56983: PUSH
56984: LD_INT 0
56986: ST_TO_ADDR
// for i := 1 to 16 do
56987: LD_ADDR_VAR 0 2
56991: PUSH
56992: DOUBLE
56993: LD_INT 1
56995: DEC
56996: ST_TO_ADDR
56997: LD_INT 16
56999: PUSH
57000: FOR_TO
57001: IFFALSE 57200
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57003: LD_ADDR_VAR 0 3
57007: PUSH
57008: LD_INT 10
57010: PUSH
57011: LD_INT 20
57013: PUSH
57014: LD_INT 30
57016: PUSH
57017: LD_INT 40
57019: PUSH
57020: LD_INT 50
57022: PUSH
57023: LD_INT 60
57025: PUSH
57026: LD_INT 70
57028: PUSH
57029: LD_INT 80
57031: PUSH
57032: LD_INT 90
57034: PUSH
57035: LD_INT 100
57037: PUSH
57038: LD_INT 110
57040: PUSH
57041: LD_INT 120
57043: PUSH
57044: LD_INT 130
57046: PUSH
57047: LD_INT 140
57049: PUSH
57050: LD_INT 150
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: PPUSH
57073: LD_INT 15
57075: PPUSH
57076: CALL_OW 12
57080: ARRAY
57081: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57082: LD_ADDR_VAR 0 4
57086: PUSH
57087: LD_INT 10
57089: PUSH
57090: LD_INT 20
57092: PUSH
57093: LD_INT 30
57095: PUSH
57096: LD_INT 40
57098: PUSH
57099: LD_INT 50
57101: PUSH
57102: LD_INT 60
57104: PUSH
57105: LD_INT 70
57107: PUSH
57108: LD_INT 80
57110: PUSH
57111: LD_INT 90
57113: PUSH
57114: LD_INT 100
57116: PUSH
57117: LD_INT 110
57119: PUSH
57120: LD_INT 120
57122: PUSH
57123: LD_INT 130
57125: PUSH
57126: LD_INT 140
57128: PUSH
57129: LD_INT 150
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PPUSH
57152: LD_INT 15
57154: PPUSH
57155: CALL_OW 12
57159: ARRAY
57160: ST_TO_ADDR
// if ValidHex ( x , y ) then
57161: LD_VAR 0 3
57165: PPUSH
57166: LD_VAR 0 4
57170: PPUSH
57171: CALL_OW 488
57175: IFFALSE 57198
// begin result := [ x , y ] ;
57177: LD_ADDR_VAR 0 1
57181: PUSH
57182: LD_VAR 0 3
57186: PUSH
57187: LD_VAR 0 4
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: ST_TO_ADDR
// break ;
57196: GO 57200
// end ; end ;
57198: GO 57000
57200: POP
57201: POP
// if result then
57202: LD_VAR 0 1
57206: IFFALSE 57266
// begin ToLua ( playSibBomb() ) ;
57208: LD_STRING playSibBomb()
57210: PPUSH
57211: CALL_OW 559
// wait ( 0 0$14 ) ;
57215: LD_INT 490
57217: PPUSH
57218: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
57222: LD_VAR 0 1
57226: PUSH
57227: LD_INT 1
57229: ARRAY
57230: PPUSH
57231: LD_VAR 0 1
57235: PUSH
57236: LD_INT 2
57238: ARRAY
57239: PPUSH
57240: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
57244: LD_VAR 0 1
57248: PUSH
57249: LD_INT 1
57251: ARRAY
57252: PPUSH
57253: LD_VAR 0 1
57257: PUSH
57258: LD_INT 2
57260: ARRAY
57261: PPUSH
57262: CALL_OW 429
// end ; end ;
57266: LD_VAR 0 1
57270: RET
// every 0 0$1 trigger StreamModeActive and sReset do
57271: LD_EXP 59
57275: PUSH
57276: LD_EXP 81
57280: AND
57281: IFFALSE 57293
57283: GO 57285
57285: DISABLE
// YouLost (  ) ;
57286: LD_STRING 
57288: PPUSH
57289: CALL_OW 104
57293: END
// every 0 0$1 trigger StreamModeActive and sFog do
57294: LD_EXP 59
57298: PUSH
57299: LD_EXP 80
57303: AND
57304: IFFALSE 57318
57306: GO 57308
57308: DISABLE
// FogOff ( your_side ) ;
57309: LD_OWVAR 2
57313: PPUSH
57314: CALL_OW 344
57318: END
// every 0 0$1 trigger StreamModeActive and sSun do
57319: LD_EXP 59
57323: PUSH
57324: LD_EXP 82
57328: AND
57329: IFFALSE 57357
57331: GO 57333
57333: DISABLE
// begin solar_recharge_percent := 0 ;
57334: LD_ADDR_OWVAR 79
57338: PUSH
57339: LD_INT 0
57341: ST_TO_ADDR
// wait ( 5 5$00 ) ;
57342: LD_INT 10500
57344: PPUSH
57345: CALL_OW 67
// solar_recharge_percent := 100 ;
57349: LD_ADDR_OWVAR 79
57353: PUSH
57354: LD_INT 100
57356: ST_TO_ADDR
// end ;
57357: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
57358: LD_EXP 59
57362: PUSH
57363: LD_EXP 83
57367: AND
57368: IFFALSE 57607
57370: GO 57372
57372: DISABLE
57373: LD_INT 0
57375: PPUSH
57376: PPUSH
57377: PPUSH
// begin tmp := [ ] ;
57378: LD_ADDR_VAR 0 3
57382: PUSH
57383: EMPTY
57384: ST_TO_ADDR
// for i := 1 to 6 do
57385: LD_ADDR_VAR 0 1
57389: PUSH
57390: DOUBLE
57391: LD_INT 1
57393: DEC
57394: ST_TO_ADDR
57395: LD_INT 6
57397: PUSH
57398: FOR_TO
57399: IFFALSE 57504
// begin uc_nation := nation_nature ;
57401: LD_ADDR_OWVAR 21
57405: PUSH
57406: LD_INT 0
57408: ST_TO_ADDR
// uc_side := 0 ;
57409: LD_ADDR_OWVAR 20
57413: PUSH
57414: LD_INT 0
57416: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57417: LD_ADDR_OWVAR 29
57421: PUSH
57422: LD_INT 12
57424: PUSH
57425: LD_INT 12
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: ST_TO_ADDR
// hc_agressivity := 20 ;
57432: LD_ADDR_OWVAR 35
57436: PUSH
57437: LD_INT 20
57439: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
57440: LD_ADDR_OWVAR 28
57444: PUSH
57445: LD_INT 17
57447: ST_TO_ADDR
// hc_gallery :=  ;
57448: LD_ADDR_OWVAR 33
57452: PUSH
57453: LD_STRING 
57455: ST_TO_ADDR
// hc_name :=  ;
57456: LD_ADDR_OWVAR 26
57460: PUSH
57461: LD_STRING 
57463: ST_TO_ADDR
// un := CreateHuman ;
57464: LD_ADDR_VAR 0 2
57468: PUSH
57469: CALL_OW 44
57473: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
57474: LD_VAR 0 2
57478: PPUSH
57479: LD_INT 1
57481: PPUSH
57482: CALL_OW 51
// tmp := tmp ^ un ;
57486: LD_ADDR_VAR 0 3
57490: PUSH
57491: LD_VAR 0 3
57495: PUSH
57496: LD_VAR 0 2
57500: ADD
57501: ST_TO_ADDR
// end ;
57502: GO 57398
57504: POP
57505: POP
// repeat wait ( 0 0$1 ) ;
57506: LD_INT 35
57508: PPUSH
57509: CALL_OW 67
// for un in tmp do
57513: LD_ADDR_VAR 0 2
57517: PUSH
57518: LD_VAR 0 3
57522: PUSH
57523: FOR_IN
57524: IFFALSE 57598
// begin if IsDead ( un ) then
57526: LD_VAR 0 2
57530: PPUSH
57531: CALL_OW 301
57535: IFFALSE 57555
// begin tmp := tmp diff un ;
57537: LD_ADDR_VAR 0 3
57541: PUSH
57542: LD_VAR 0 3
57546: PUSH
57547: LD_VAR 0 2
57551: DIFF
57552: ST_TO_ADDR
// continue ;
57553: GO 57523
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
57555: LD_VAR 0 2
57559: PPUSH
57560: LD_INT 3
57562: PUSH
57563: LD_INT 22
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PPUSH
57577: CALL_OW 69
57581: PPUSH
57582: LD_VAR 0 2
57586: PPUSH
57587: CALL_OW 74
57591: PPUSH
57592: CALL_OW 115
// end ;
57596: GO 57523
57598: POP
57599: POP
// until not tmp ;
57600: LD_VAR 0 3
57604: NOT
57605: IFFALSE 57506
// end ;
57607: PPOPN 3
57609: END
// every 0 0$1 trigger StreamModeActive and sTroll do
57610: LD_EXP 59
57614: PUSH
57615: LD_EXP 84
57619: AND
57620: IFFALSE 57674
57622: GO 57624
57624: DISABLE
// begin ToLua ( displayTroll(); ) ;
57625: LD_STRING displayTroll();
57627: PPUSH
57628: CALL_OW 559
// wait ( 3 3$00 ) ;
57632: LD_INT 6300
57634: PPUSH
57635: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57639: LD_STRING hideTroll();
57641: PPUSH
57642: CALL_OW 559
// wait ( 1 1$00 ) ;
57646: LD_INT 2100
57648: PPUSH
57649: CALL_OW 67
// ToLua ( displayTroll(); ) ;
57653: LD_STRING displayTroll();
57655: PPUSH
57656: CALL_OW 559
// wait ( 1 1$00 ) ;
57660: LD_INT 2100
57662: PPUSH
57663: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57667: LD_STRING hideTroll();
57669: PPUSH
57670: CALL_OW 559
// end ;
57674: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
57675: LD_EXP 59
57679: PUSH
57680: LD_EXP 85
57684: AND
57685: IFFALSE 57748
57687: GO 57689
57689: DISABLE
57690: LD_INT 0
57692: PPUSH
// begin p := 0 ;
57693: LD_ADDR_VAR 0 1
57697: PUSH
57698: LD_INT 0
57700: ST_TO_ADDR
// repeat game_speed := 1 ;
57701: LD_ADDR_OWVAR 65
57705: PUSH
57706: LD_INT 1
57708: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57709: LD_INT 35
57711: PPUSH
57712: CALL_OW 67
// p := p + 1 ;
57716: LD_ADDR_VAR 0 1
57720: PUSH
57721: LD_VAR 0 1
57725: PUSH
57726: LD_INT 1
57728: PLUS
57729: ST_TO_ADDR
// until p >= 60 ;
57730: LD_VAR 0 1
57734: PUSH
57735: LD_INT 60
57737: GREATEREQUAL
57738: IFFALSE 57701
// game_speed := 4 ;
57740: LD_ADDR_OWVAR 65
57744: PUSH
57745: LD_INT 4
57747: ST_TO_ADDR
// end ;
57748: PPOPN 1
57750: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57751: LD_EXP 59
57755: PUSH
57756: LD_EXP 86
57760: AND
57761: IFFALSE 57907
57763: GO 57765
57765: DISABLE
57766: LD_INT 0
57768: PPUSH
57769: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57770: LD_ADDR_VAR 0 1
57774: PUSH
57775: LD_INT 22
57777: PUSH
57778: LD_OWVAR 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 30
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 30
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PPUSH
57819: CALL_OW 69
57823: ST_TO_ADDR
// if not depot then
57824: LD_VAR 0 1
57828: NOT
57829: IFFALSE 57833
// exit ;
57831: GO 57907
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57833: LD_ADDR_VAR 0 2
57837: PUSH
57838: LD_VAR 0 1
57842: PUSH
57843: LD_INT 1
57845: PPUSH
57846: LD_VAR 0 1
57850: PPUSH
57851: CALL_OW 12
57855: ARRAY
57856: PPUSH
57857: CALL_OW 274
57861: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57862: LD_VAR 0 2
57866: PPUSH
57867: LD_INT 1
57869: PPUSH
57870: LD_INT 0
57872: PPUSH
57873: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57877: LD_VAR 0 2
57881: PPUSH
57882: LD_INT 2
57884: PPUSH
57885: LD_INT 0
57887: PPUSH
57888: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57892: LD_VAR 0 2
57896: PPUSH
57897: LD_INT 3
57899: PPUSH
57900: LD_INT 0
57902: PPUSH
57903: CALL_OW 277
// end ;
57907: PPOPN 2
57909: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57910: LD_EXP 59
57914: PUSH
57915: LD_EXP 87
57919: AND
57920: IFFALSE 58017
57922: GO 57924
57924: DISABLE
57925: LD_INT 0
57927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57928: LD_ADDR_VAR 0 1
57932: PUSH
57933: LD_INT 22
57935: PUSH
57936: LD_OWVAR 2
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 21
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: LD_INT 23
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: LIST
57976: PPUSH
57977: CALL_OW 69
57981: ST_TO_ADDR
// if not tmp then
57982: LD_VAR 0 1
57986: NOT
57987: IFFALSE 57991
// exit ;
57989: GO 58017
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57991: LD_VAR 0 1
57995: PUSH
57996: LD_INT 1
57998: PPUSH
57999: LD_VAR 0 1
58003: PPUSH
58004: CALL_OW 12
58008: ARRAY
58009: PPUSH
58010: LD_INT 200
58012: PPUSH
58013: CALL_OW 234
// end ;
58017: PPOPN 1
58019: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58020: LD_EXP 59
58024: PUSH
58025: LD_EXP 88
58029: AND
58030: IFFALSE 58109
58032: GO 58034
58034: DISABLE
58035: LD_INT 0
58037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58038: LD_ADDR_VAR 0 1
58042: PUSH
58043: LD_INT 22
58045: PUSH
58046: LD_OWVAR 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 21
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PPUSH
58069: CALL_OW 69
58073: ST_TO_ADDR
// if not tmp then
58074: LD_VAR 0 1
58078: NOT
58079: IFFALSE 58083
// exit ;
58081: GO 58109
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58083: LD_VAR 0 1
58087: PUSH
58088: LD_INT 1
58090: PPUSH
58091: LD_VAR 0 1
58095: PPUSH
58096: CALL_OW 12
58100: ARRAY
58101: PPUSH
58102: LD_INT 60
58104: PPUSH
58105: CALL_OW 234
// end ;
58109: PPOPN 1
58111: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58112: LD_EXP 59
58116: PUSH
58117: LD_EXP 89
58121: AND
58122: IFFALSE 58221
58124: GO 58126
58126: DISABLE
58127: LD_INT 0
58129: PPUSH
58130: PPUSH
// begin enable ;
58131: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
58132: LD_ADDR_VAR 0 1
58136: PUSH
58137: LD_INT 22
58139: PUSH
58140: LD_OWVAR 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 61
58151: PUSH
58152: EMPTY
58153: LIST
58154: PUSH
58155: LD_INT 33
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: PPUSH
58170: CALL_OW 69
58174: ST_TO_ADDR
// if not tmp then
58175: LD_VAR 0 1
58179: NOT
58180: IFFALSE 58184
// exit ;
58182: GO 58221
// for i in tmp do
58184: LD_ADDR_VAR 0 2
58188: PUSH
58189: LD_VAR 0 1
58193: PUSH
58194: FOR_IN
58195: IFFALSE 58219
// if IsControledBy ( i ) then
58197: LD_VAR 0 2
58201: PPUSH
58202: CALL_OW 312
58206: IFFALSE 58217
// ComUnlink ( i ) ;
58208: LD_VAR 0 2
58212: PPUSH
58213: CALL_OW 136
58217: GO 58194
58219: POP
58220: POP
// end ;
58221: PPOPN 2
58223: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
58224: LD_EXP 59
58228: PUSH
58229: LD_EXP 90
58233: AND
58234: IFFALSE 58374
58236: GO 58238
58238: DISABLE
58239: LD_INT 0
58241: PPUSH
58242: PPUSH
// begin ToLua ( displayPowell(); ) ;
58243: LD_STRING displayPowell();
58245: PPUSH
58246: CALL_OW 559
// uc_side := 0 ;
58250: LD_ADDR_OWVAR 20
58254: PUSH
58255: LD_INT 0
58257: ST_TO_ADDR
// uc_nation := 2 ;
58258: LD_ADDR_OWVAR 21
58262: PUSH
58263: LD_INT 2
58265: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
58266: LD_ADDR_OWVAR 37
58270: PUSH
58271: LD_INT 14
58273: ST_TO_ADDR
// vc_engine := engine_siberite ;
58274: LD_ADDR_OWVAR 39
58278: PUSH
58279: LD_INT 3
58281: ST_TO_ADDR
// vc_control := control_apeman ;
58282: LD_ADDR_OWVAR 38
58286: PUSH
58287: LD_INT 5
58289: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
58290: LD_ADDR_OWVAR 40
58294: PUSH
58295: LD_INT 29
58297: ST_TO_ADDR
// un := CreateVehicle ;
58298: LD_ADDR_VAR 0 2
58302: PUSH
58303: CALL_OW 45
58307: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58308: LD_VAR 0 2
58312: PPUSH
58313: LD_INT 1
58315: PPUSH
58316: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58320: LD_INT 35
58322: PPUSH
58323: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58327: LD_VAR 0 2
58331: PPUSH
58332: LD_INT 22
58334: PUSH
58335: LD_OWVAR 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PPUSH
58344: CALL_OW 69
58348: PPUSH
58349: LD_VAR 0 2
58353: PPUSH
58354: CALL_OW 74
58358: PPUSH
58359: CALL_OW 115
// until IsDead ( un ) ;
58363: LD_VAR 0 2
58367: PPUSH
58368: CALL_OW 301
58372: IFFALSE 58320
// end ;
58374: PPOPN 2
58376: END
// every 0 0$1 trigger StreamModeActive and sStu do
58377: LD_EXP 59
58381: PUSH
58382: LD_EXP 98
58386: AND
58387: IFFALSE 58403
58389: GO 58391
58391: DISABLE
// begin ToLua ( displayStucuk(); ) ;
58392: LD_STRING displayStucuk();
58394: PPUSH
58395: CALL_OW 559
// ResetFog ;
58399: CALL_OW 335
// end ;
58403: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
58404: LD_EXP 59
58408: PUSH
58409: LD_EXP 91
58413: AND
58414: IFFALSE 58555
58416: GO 58418
58418: DISABLE
58419: LD_INT 0
58421: PPUSH
58422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58423: LD_ADDR_VAR 0 2
58427: PUSH
58428: LD_INT 22
58430: PUSH
58431: LD_OWVAR 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 21
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PPUSH
58454: CALL_OW 69
58458: ST_TO_ADDR
// if not tmp then
58459: LD_VAR 0 2
58463: NOT
58464: IFFALSE 58468
// exit ;
58466: GO 58555
// un := tmp [ rand ( 1 , tmp ) ] ;
58468: LD_ADDR_VAR 0 1
58472: PUSH
58473: LD_VAR 0 2
58477: PUSH
58478: LD_INT 1
58480: PPUSH
58481: LD_VAR 0 2
58485: PPUSH
58486: CALL_OW 12
58490: ARRAY
58491: ST_TO_ADDR
// SetSide ( un , 0 ) ;
58492: LD_VAR 0 1
58496: PPUSH
58497: LD_INT 0
58499: PPUSH
58500: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
58504: LD_VAR 0 1
58508: PPUSH
58509: LD_OWVAR 3
58513: PUSH
58514: LD_VAR 0 1
58518: DIFF
58519: PPUSH
58520: LD_VAR 0 1
58524: PPUSH
58525: CALL_OW 74
58529: PPUSH
58530: CALL_OW 115
// wait ( 0 0$20 ) ;
58534: LD_INT 700
58536: PPUSH
58537: CALL_OW 67
// SetSide ( un , your_side ) ;
58541: LD_VAR 0 1
58545: PPUSH
58546: LD_OWVAR 2
58550: PPUSH
58551: CALL_OW 235
// end ;
58555: PPOPN 2
58557: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
58558: LD_EXP 59
58562: PUSH
58563: LD_EXP 92
58567: AND
58568: IFFALSE 58674
58570: GO 58572
58572: DISABLE
58573: LD_INT 0
58575: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58576: LD_ADDR_VAR 0 1
58580: PUSH
58581: LD_INT 22
58583: PUSH
58584: LD_OWVAR 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 30
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 30
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PPUSH
58625: CALL_OW 69
58629: ST_TO_ADDR
// if not depot then
58630: LD_VAR 0 1
58634: NOT
58635: IFFALSE 58639
// exit ;
58637: GO 58674
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
58639: LD_VAR 0 1
58643: PUSH
58644: LD_INT 1
58646: ARRAY
58647: PPUSH
58648: CALL_OW 250
58652: PPUSH
58653: LD_VAR 0 1
58657: PUSH
58658: LD_INT 1
58660: ARRAY
58661: PPUSH
58662: CALL_OW 251
58666: PPUSH
58667: LD_INT 70
58669: PPUSH
58670: CALL_OW 495
// end ;
58674: PPOPN 1
58676: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58677: LD_EXP 59
58681: PUSH
58682: LD_EXP 93
58686: AND
58687: IFFALSE 58898
58689: GO 58691
58691: DISABLE
58692: LD_INT 0
58694: PPUSH
58695: PPUSH
58696: PPUSH
58697: PPUSH
58698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58699: LD_ADDR_VAR 0 5
58703: PUSH
58704: LD_INT 22
58706: PUSH
58707: LD_OWVAR 2
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 21
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PPUSH
58730: CALL_OW 69
58734: ST_TO_ADDR
// if not tmp then
58735: LD_VAR 0 5
58739: NOT
58740: IFFALSE 58744
// exit ;
58742: GO 58898
// for i in tmp do
58744: LD_ADDR_VAR 0 1
58748: PUSH
58749: LD_VAR 0 5
58753: PUSH
58754: FOR_IN
58755: IFFALSE 58896
// begin d := rand ( 0 , 5 ) ;
58757: LD_ADDR_VAR 0 4
58761: PUSH
58762: LD_INT 0
58764: PPUSH
58765: LD_INT 5
58767: PPUSH
58768: CALL_OW 12
58772: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58773: LD_ADDR_VAR 0 2
58777: PUSH
58778: LD_VAR 0 1
58782: PPUSH
58783: CALL_OW 250
58787: PPUSH
58788: LD_VAR 0 4
58792: PPUSH
58793: LD_INT 3
58795: PPUSH
58796: LD_INT 12
58798: PPUSH
58799: CALL_OW 12
58803: PPUSH
58804: CALL_OW 272
58808: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58809: LD_ADDR_VAR 0 3
58813: PUSH
58814: LD_VAR 0 1
58818: PPUSH
58819: CALL_OW 251
58823: PPUSH
58824: LD_VAR 0 4
58828: PPUSH
58829: LD_INT 3
58831: PPUSH
58832: LD_INT 12
58834: PPUSH
58835: CALL_OW 12
58839: PPUSH
58840: CALL_OW 273
58844: ST_TO_ADDR
// if ValidHex ( x , y ) then
58845: LD_VAR 0 2
58849: PPUSH
58850: LD_VAR 0 3
58854: PPUSH
58855: CALL_OW 488
58859: IFFALSE 58894
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58861: LD_VAR 0 1
58865: PPUSH
58866: LD_VAR 0 2
58870: PPUSH
58871: LD_VAR 0 3
58875: PPUSH
58876: LD_INT 3
58878: PPUSH
58879: LD_INT 6
58881: PPUSH
58882: CALL_OW 12
58886: PPUSH
58887: LD_INT 1
58889: PPUSH
58890: CALL_OW 483
// end ;
58894: GO 58754
58896: POP
58897: POP
// end ;
58898: PPOPN 5
58900: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58901: LD_EXP 59
58905: PUSH
58906: LD_EXP 94
58910: AND
58911: IFFALSE 59005
58913: GO 58915
58915: DISABLE
58916: LD_INT 0
58918: PPUSH
58919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58920: LD_ADDR_VAR 0 2
58924: PUSH
58925: LD_INT 22
58927: PUSH
58928: LD_OWVAR 2
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 32
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 21
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: LIST
58961: PPUSH
58962: CALL_OW 69
58966: ST_TO_ADDR
// if not tmp then
58967: LD_VAR 0 2
58971: NOT
58972: IFFALSE 58976
// exit ;
58974: GO 59005
// for i in tmp do
58976: LD_ADDR_VAR 0 1
58980: PUSH
58981: LD_VAR 0 2
58985: PUSH
58986: FOR_IN
58987: IFFALSE 59003
// SetFuel ( i , 0 ) ;
58989: LD_VAR 0 1
58993: PPUSH
58994: LD_INT 0
58996: PPUSH
58997: CALL_OW 240
59001: GO 58986
59003: POP
59004: POP
// end ;
59005: PPOPN 2
59007: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59008: LD_EXP 59
59012: PUSH
59013: LD_EXP 95
59017: AND
59018: IFFALSE 59084
59020: GO 59022
59022: DISABLE
59023: LD_INT 0
59025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59026: LD_ADDR_VAR 0 1
59030: PUSH
59031: LD_INT 22
59033: PUSH
59034: LD_OWVAR 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 30
59045: PUSH
59046: LD_INT 29
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PPUSH
59057: CALL_OW 69
59061: ST_TO_ADDR
// if not tmp then
59062: LD_VAR 0 1
59066: NOT
59067: IFFALSE 59071
// exit ;
59069: GO 59084
// DestroyUnit ( tmp [ 1 ] ) ;
59071: LD_VAR 0 1
59075: PUSH
59076: LD_INT 1
59078: ARRAY
59079: PPUSH
59080: CALL_OW 65
// end ;
59084: PPOPN 1
59086: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59087: LD_EXP 59
59091: PUSH
59092: LD_EXP 97
59096: AND
59097: IFFALSE 59226
59099: GO 59101
59101: DISABLE
59102: LD_INT 0
59104: PPUSH
// begin uc_side := 0 ;
59105: LD_ADDR_OWVAR 20
59109: PUSH
59110: LD_INT 0
59112: ST_TO_ADDR
// uc_nation := nation_arabian ;
59113: LD_ADDR_OWVAR 21
59117: PUSH
59118: LD_INT 2
59120: ST_TO_ADDR
// hc_gallery :=  ;
59121: LD_ADDR_OWVAR 33
59125: PUSH
59126: LD_STRING 
59128: ST_TO_ADDR
// hc_name :=  ;
59129: LD_ADDR_OWVAR 26
59133: PUSH
59134: LD_STRING 
59136: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
59137: LD_INT 1
59139: PPUSH
59140: LD_INT 11
59142: PPUSH
59143: LD_INT 10
59145: PPUSH
59146: CALL_OW 380
// un := CreateHuman ;
59150: LD_ADDR_VAR 0 1
59154: PUSH
59155: CALL_OW 44
59159: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59160: LD_VAR 0 1
59164: PPUSH
59165: LD_INT 1
59167: PPUSH
59168: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59172: LD_INT 35
59174: PPUSH
59175: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59179: LD_VAR 0 1
59183: PPUSH
59184: LD_INT 22
59186: PUSH
59187: LD_OWVAR 2
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PPUSH
59196: CALL_OW 69
59200: PPUSH
59201: LD_VAR 0 1
59205: PPUSH
59206: CALL_OW 74
59210: PPUSH
59211: CALL_OW 115
// until IsDead ( un ) ;
59215: LD_VAR 0 1
59219: PPUSH
59220: CALL_OW 301
59224: IFFALSE 59172
// end ;
59226: PPOPN 1
59228: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
59229: LD_EXP 59
59233: PUSH
59234: LD_EXP 99
59238: AND
59239: IFFALSE 59251
59241: GO 59243
59243: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
59244: LD_STRING earthquake(getX(game), 0, 32)
59246: PPUSH
59247: CALL_OW 559
59251: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
59252: LD_EXP 59
59256: PUSH
59257: LD_EXP 100
59261: AND
59262: IFFALSE 59353
59264: GO 59266
59266: DISABLE
59267: LD_INT 0
59269: PPUSH
// begin enable ;
59270: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
59271: LD_ADDR_VAR 0 1
59275: PUSH
59276: LD_INT 22
59278: PUSH
59279: LD_OWVAR 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 21
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 33
59300: PUSH
59301: LD_INT 3
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: PPUSH
59313: CALL_OW 69
59317: ST_TO_ADDR
// if not tmp then
59318: LD_VAR 0 1
59322: NOT
59323: IFFALSE 59327
// exit ;
59325: GO 59353
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59327: LD_VAR 0 1
59331: PUSH
59332: LD_INT 1
59334: PPUSH
59335: LD_VAR 0 1
59339: PPUSH
59340: CALL_OW 12
59344: ARRAY
59345: PPUSH
59346: LD_INT 1
59348: PPUSH
59349: CALL_OW 234
// end ;
59353: PPOPN 1
59355: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
59356: LD_EXP 59
59360: PUSH
59361: LD_EXP 101
59365: AND
59366: IFFALSE 59507
59368: GO 59370
59370: DISABLE
59371: LD_INT 0
59373: PPUSH
59374: PPUSH
59375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59376: LD_ADDR_VAR 0 3
59380: PUSH
59381: LD_INT 22
59383: PUSH
59384: LD_OWVAR 2
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 25
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PPUSH
59407: CALL_OW 69
59411: ST_TO_ADDR
// if not tmp then
59412: LD_VAR 0 3
59416: NOT
59417: IFFALSE 59421
// exit ;
59419: GO 59507
// un := tmp [ rand ( 1 , tmp ) ] ;
59421: LD_ADDR_VAR 0 2
59425: PUSH
59426: LD_VAR 0 3
59430: PUSH
59431: LD_INT 1
59433: PPUSH
59434: LD_VAR 0 3
59438: PPUSH
59439: CALL_OW 12
59443: ARRAY
59444: ST_TO_ADDR
// if Crawls ( un ) then
59445: LD_VAR 0 2
59449: PPUSH
59450: CALL_OW 318
59454: IFFALSE 59465
// ComWalk ( un ) ;
59456: LD_VAR 0 2
59460: PPUSH
59461: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
59465: LD_VAR 0 2
59469: PPUSH
59470: LD_INT 9
59472: PPUSH
59473: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
59477: LD_INT 28
59479: PPUSH
59480: LD_OWVAR 2
59484: PPUSH
59485: LD_INT 2
59487: PPUSH
59488: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
59492: LD_INT 29
59494: PPUSH
59495: LD_OWVAR 2
59499: PPUSH
59500: LD_INT 2
59502: PPUSH
59503: CALL_OW 322
// end ;
59507: PPOPN 3
59509: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
59510: LD_EXP 59
59514: PUSH
59515: LD_EXP 102
59519: AND
59520: IFFALSE 59631
59522: GO 59524
59524: DISABLE
59525: LD_INT 0
59527: PPUSH
59528: PPUSH
59529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59530: LD_ADDR_VAR 0 3
59534: PUSH
59535: LD_INT 22
59537: PUSH
59538: LD_OWVAR 2
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 25
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PPUSH
59561: CALL_OW 69
59565: ST_TO_ADDR
// if not tmp then
59566: LD_VAR 0 3
59570: NOT
59571: IFFALSE 59575
// exit ;
59573: GO 59631
// un := tmp [ rand ( 1 , tmp ) ] ;
59575: LD_ADDR_VAR 0 2
59579: PUSH
59580: LD_VAR 0 3
59584: PUSH
59585: LD_INT 1
59587: PPUSH
59588: LD_VAR 0 3
59592: PPUSH
59593: CALL_OW 12
59597: ARRAY
59598: ST_TO_ADDR
// if Crawls ( un ) then
59599: LD_VAR 0 2
59603: PPUSH
59604: CALL_OW 318
59608: IFFALSE 59619
// ComWalk ( un ) ;
59610: LD_VAR 0 2
59614: PPUSH
59615: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59619: LD_VAR 0 2
59623: PPUSH
59624: LD_INT 8
59626: PPUSH
59627: CALL_OW 336
// end ;
59631: PPOPN 3
59633: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
59634: LD_EXP 59
59638: PUSH
59639: LD_EXP 103
59643: AND
59644: IFFALSE 59788
59646: GO 59648
59648: DISABLE
59649: LD_INT 0
59651: PPUSH
59652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59653: LD_ADDR_VAR 0 2
59657: PUSH
59658: LD_INT 22
59660: PUSH
59661: LD_OWVAR 2
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 21
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 34
59685: PUSH
59686: LD_INT 12
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 34
59695: PUSH
59696: LD_INT 51
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 34
59705: PUSH
59706: LD_INT 32
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: PPUSH
59724: CALL_OW 69
59728: ST_TO_ADDR
// if not tmp then
59729: LD_VAR 0 2
59733: NOT
59734: IFFALSE 59738
// exit ;
59736: GO 59788
// for i in tmp do
59738: LD_ADDR_VAR 0 1
59742: PUSH
59743: LD_VAR 0 2
59747: PUSH
59748: FOR_IN
59749: IFFALSE 59786
// if GetCargo ( i , mat_artifact ) = 0 then
59751: LD_VAR 0 1
59755: PPUSH
59756: LD_INT 4
59758: PPUSH
59759: CALL_OW 289
59763: PUSH
59764: LD_INT 0
59766: EQUAL
59767: IFFALSE 59784
// SetCargo ( i , mat_siberit , 100 ) ;
59769: LD_VAR 0 1
59773: PPUSH
59774: LD_INT 3
59776: PPUSH
59777: LD_INT 100
59779: PPUSH
59780: CALL_OW 290
59784: GO 59748
59786: POP
59787: POP
// end ;
59788: PPOPN 2
59790: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59791: LD_EXP 59
59795: PUSH
59796: LD_EXP 104
59800: AND
59801: IFFALSE 59984
59803: GO 59805
59805: DISABLE
59806: LD_INT 0
59808: PPUSH
59809: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59810: LD_ADDR_VAR 0 2
59814: PUSH
59815: LD_INT 22
59817: PUSH
59818: LD_OWVAR 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PPUSH
59827: CALL_OW 69
59831: ST_TO_ADDR
// if not tmp then
59832: LD_VAR 0 2
59836: NOT
59837: IFFALSE 59841
// exit ;
59839: GO 59984
// for i := 1 to 2 do
59841: LD_ADDR_VAR 0 1
59845: PUSH
59846: DOUBLE
59847: LD_INT 1
59849: DEC
59850: ST_TO_ADDR
59851: LD_INT 2
59853: PUSH
59854: FOR_TO
59855: IFFALSE 59982
// begin uc_side := your_side ;
59857: LD_ADDR_OWVAR 20
59861: PUSH
59862: LD_OWVAR 2
59866: ST_TO_ADDR
// uc_nation := nation_american ;
59867: LD_ADDR_OWVAR 21
59871: PUSH
59872: LD_INT 1
59874: ST_TO_ADDR
// vc_chassis := us_morphling ;
59875: LD_ADDR_OWVAR 37
59879: PUSH
59880: LD_INT 5
59882: ST_TO_ADDR
// vc_engine := engine_siberite ;
59883: LD_ADDR_OWVAR 39
59887: PUSH
59888: LD_INT 3
59890: ST_TO_ADDR
// vc_control := control_computer ;
59891: LD_ADDR_OWVAR 38
59895: PUSH
59896: LD_INT 3
59898: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59899: LD_ADDR_OWVAR 40
59903: PUSH
59904: LD_INT 10
59906: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59907: LD_VAR 0 2
59911: PUSH
59912: LD_INT 1
59914: ARRAY
59915: PPUSH
59916: CALL_OW 310
59920: NOT
59921: IFFALSE 59968
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59923: CALL_OW 45
59927: PPUSH
59928: LD_VAR 0 2
59932: PUSH
59933: LD_INT 1
59935: ARRAY
59936: PPUSH
59937: CALL_OW 250
59941: PPUSH
59942: LD_VAR 0 2
59946: PUSH
59947: LD_INT 1
59949: ARRAY
59950: PPUSH
59951: CALL_OW 251
59955: PPUSH
59956: LD_INT 12
59958: PPUSH
59959: LD_INT 1
59961: PPUSH
59962: CALL_OW 50
59966: GO 59980
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59968: CALL_OW 45
59972: PPUSH
59973: LD_INT 1
59975: PPUSH
59976: CALL_OW 51
// end ;
59980: GO 59854
59982: POP
59983: POP
// end ;
59984: PPOPN 2
59986: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59987: LD_EXP 59
59991: PUSH
59992: LD_EXP 105
59996: AND
59997: IFFALSE 60219
59999: GO 60001
60001: DISABLE
60002: LD_INT 0
60004: PPUSH
60005: PPUSH
60006: PPUSH
60007: PPUSH
60008: PPUSH
60009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60010: LD_ADDR_VAR 0 6
60014: PUSH
60015: LD_INT 22
60017: PUSH
60018: LD_OWVAR 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 21
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 3
60039: PUSH
60040: LD_INT 23
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: PPUSH
60059: CALL_OW 69
60063: ST_TO_ADDR
// if not tmp then
60064: LD_VAR 0 6
60068: NOT
60069: IFFALSE 60073
// exit ;
60071: GO 60219
// s1 := rand ( 1 , 4 ) ;
60073: LD_ADDR_VAR 0 2
60077: PUSH
60078: LD_INT 1
60080: PPUSH
60081: LD_INT 4
60083: PPUSH
60084: CALL_OW 12
60088: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60089: LD_ADDR_VAR 0 4
60093: PUSH
60094: LD_VAR 0 6
60098: PUSH
60099: LD_INT 1
60101: ARRAY
60102: PPUSH
60103: LD_VAR 0 2
60107: PPUSH
60108: CALL_OW 259
60112: ST_TO_ADDR
// if s1 = 1 then
60113: LD_VAR 0 2
60117: PUSH
60118: LD_INT 1
60120: EQUAL
60121: IFFALSE 60141
// s2 := rand ( 2 , 4 ) else
60123: LD_ADDR_VAR 0 3
60127: PUSH
60128: LD_INT 2
60130: PPUSH
60131: LD_INT 4
60133: PPUSH
60134: CALL_OW 12
60138: ST_TO_ADDR
60139: GO 60149
// s2 := 1 ;
60141: LD_ADDR_VAR 0 3
60145: PUSH
60146: LD_INT 1
60148: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
60149: LD_ADDR_VAR 0 5
60153: PUSH
60154: LD_VAR 0 6
60158: PUSH
60159: LD_INT 1
60161: ARRAY
60162: PPUSH
60163: LD_VAR 0 3
60167: PPUSH
60168: CALL_OW 259
60172: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
60173: LD_VAR 0 6
60177: PUSH
60178: LD_INT 1
60180: ARRAY
60181: PPUSH
60182: LD_VAR 0 2
60186: PPUSH
60187: LD_VAR 0 5
60191: PPUSH
60192: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
60196: LD_VAR 0 6
60200: PUSH
60201: LD_INT 1
60203: ARRAY
60204: PPUSH
60205: LD_VAR 0 3
60209: PPUSH
60210: LD_VAR 0 4
60214: PPUSH
60215: CALL_OW 237
// end ;
60219: PPOPN 6
60221: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
60222: LD_EXP 59
60226: PUSH
60227: LD_EXP 106
60231: AND
60232: IFFALSE 60311
60234: GO 60236
60236: DISABLE
60237: LD_INT 0
60239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
60240: LD_ADDR_VAR 0 1
60244: PUSH
60245: LD_INT 22
60247: PUSH
60248: LD_OWVAR 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 30
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PPUSH
60271: CALL_OW 69
60275: ST_TO_ADDR
// if not tmp then
60276: LD_VAR 0 1
60280: NOT
60281: IFFALSE 60285
// exit ;
60283: GO 60311
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60285: LD_VAR 0 1
60289: PUSH
60290: LD_INT 1
60292: PPUSH
60293: LD_VAR 0 1
60297: PPUSH
60298: CALL_OW 12
60302: ARRAY
60303: PPUSH
60304: LD_INT 1
60306: PPUSH
60307: CALL_OW 234
// end ;
60311: PPOPN 1
60313: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60314: LD_EXP 59
60318: PUSH
60319: LD_EXP 107
60323: AND
60324: IFFALSE 60436
60326: GO 60328
60328: DISABLE
60329: LD_INT 0
60331: PPUSH
60332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60333: LD_ADDR_VAR 0 2
60337: PUSH
60338: LD_INT 22
60340: PUSH
60341: LD_OWVAR 2
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 30
60355: PUSH
60356: LD_INT 27
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 30
60365: PUSH
60366: LD_INT 26
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 30
60375: PUSH
60376: LD_INT 28
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PPUSH
60393: CALL_OW 69
60397: ST_TO_ADDR
// if not tmp then
60398: LD_VAR 0 2
60402: NOT
60403: IFFALSE 60407
// exit ;
60405: GO 60436
// for i in tmp do
60407: LD_ADDR_VAR 0 1
60411: PUSH
60412: LD_VAR 0 2
60416: PUSH
60417: FOR_IN
60418: IFFALSE 60434
// SetLives ( i , 1 ) ;
60420: LD_VAR 0 1
60424: PPUSH
60425: LD_INT 1
60427: PPUSH
60428: CALL_OW 234
60432: GO 60417
60434: POP
60435: POP
// end ;
60436: PPOPN 2
60438: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
60439: LD_EXP 59
60443: PUSH
60444: LD_EXP 108
60448: AND
60449: IFFALSE 60736
60451: GO 60453
60453: DISABLE
60454: LD_INT 0
60456: PPUSH
60457: PPUSH
60458: PPUSH
// begin i := rand ( 1 , 7 ) ;
60459: LD_ADDR_VAR 0 1
60463: PUSH
60464: LD_INT 1
60466: PPUSH
60467: LD_INT 7
60469: PPUSH
60470: CALL_OW 12
60474: ST_TO_ADDR
// case i of 1 :
60475: LD_VAR 0 1
60479: PUSH
60480: LD_INT 1
60482: DOUBLE
60483: EQUAL
60484: IFTRUE 60488
60486: GO 60498
60488: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
60489: LD_STRING earthquake(getX(game), 0, 32)
60491: PPUSH
60492: CALL_OW 559
60496: GO 60736
60498: LD_INT 2
60500: DOUBLE
60501: EQUAL
60502: IFTRUE 60506
60504: GO 60520
60506: POP
// begin ToLua ( displayStucuk(); ) ;
60507: LD_STRING displayStucuk();
60509: PPUSH
60510: CALL_OW 559
// ResetFog ;
60514: CALL_OW 335
// end ; 3 :
60518: GO 60736
60520: LD_INT 3
60522: DOUBLE
60523: EQUAL
60524: IFTRUE 60528
60526: GO 60632
60528: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60529: LD_ADDR_VAR 0 2
60533: PUSH
60534: LD_INT 22
60536: PUSH
60537: LD_OWVAR 2
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 25
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PPUSH
60560: CALL_OW 69
60564: ST_TO_ADDR
// if not tmp then
60565: LD_VAR 0 2
60569: NOT
60570: IFFALSE 60574
// exit ;
60572: GO 60736
// un := tmp [ rand ( 1 , tmp ) ] ;
60574: LD_ADDR_VAR 0 3
60578: PUSH
60579: LD_VAR 0 2
60583: PUSH
60584: LD_INT 1
60586: PPUSH
60587: LD_VAR 0 2
60591: PPUSH
60592: CALL_OW 12
60596: ARRAY
60597: ST_TO_ADDR
// if Crawls ( un ) then
60598: LD_VAR 0 3
60602: PPUSH
60603: CALL_OW 318
60607: IFFALSE 60618
// ComWalk ( un ) ;
60609: LD_VAR 0 3
60613: PPUSH
60614: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60618: LD_VAR 0 3
60622: PPUSH
60623: LD_INT 8
60625: PPUSH
60626: CALL_OW 336
// end ; 4 :
60630: GO 60736
60632: LD_INT 4
60634: DOUBLE
60635: EQUAL
60636: IFTRUE 60640
60638: GO 60714
60640: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60641: LD_ADDR_VAR 0 2
60645: PUSH
60646: LD_INT 22
60648: PUSH
60649: LD_OWVAR 2
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 30
60660: PUSH
60661: LD_INT 29
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PPUSH
60672: CALL_OW 69
60676: ST_TO_ADDR
// if not tmp then
60677: LD_VAR 0 2
60681: NOT
60682: IFFALSE 60686
// exit ;
60684: GO 60736
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60686: LD_VAR 0 2
60690: PUSH
60691: LD_INT 1
60693: ARRAY
60694: PPUSH
60695: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60699: LD_VAR 0 2
60703: PUSH
60704: LD_INT 1
60706: ARRAY
60707: PPUSH
60708: CALL_OW 65
// end ; 5 .. 7 :
60712: GO 60736
60714: LD_INT 5
60716: DOUBLE
60717: GREATEREQUAL
60718: IFFALSE 60726
60720: LD_INT 7
60722: DOUBLE
60723: LESSEQUAL
60724: IFTRUE 60728
60726: GO 60735
60728: POP
// StreamSibBomb ; end ;
60729: CALL 56973 0 0
60733: GO 60736
60735: POP
// end ;
60736: PPOPN 3
60738: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60739: LD_EXP 59
60743: PUSH
60744: LD_EXP 109
60748: AND
60749: IFFALSE 60905
60751: GO 60753
60753: DISABLE
60754: LD_INT 0
60756: PPUSH
60757: PPUSH
60758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60759: LD_ADDR_VAR 0 2
60763: PUSH
60764: LD_INT 81
60766: PUSH
60767: LD_OWVAR 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 21
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 21
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PPUSH
60808: CALL_OW 69
60812: ST_TO_ADDR
// if not tmp then
60813: LD_VAR 0 2
60817: NOT
60818: IFFALSE 60822
// exit ;
60820: GO 60905
// p := 0 ;
60822: LD_ADDR_VAR 0 3
60826: PUSH
60827: LD_INT 0
60829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60830: LD_INT 35
60832: PPUSH
60833: CALL_OW 67
// p := p + 1 ;
60837: LD_ADDR_VAR 0 3
60841: PUSH
60842: LD_VAR 0 3
60846: PUSH
60847: LD_INT 1
60849: PLUS
60850: ST_TO_ADDR
// for i in tmp do
60851: LD_ADDR_VAR 0 1
60855: PUSH
60856: LD_VAR 0 2
60860: PUSH
60861: FOR_IN
60862: IFFALSE 60893
// if GetLives ( i ) < 1000 then
60864: LD_VAR 0 1
60868: PPUSH
60869: CALL_OW 256
60873: PUSH
60874: LD_INT 1000
60876: LESS
60877: IFFALSE 60891
// SetLives ( i , 1000 ) ;
60879: LD_VAR 0 1
60883: PPUSH
60884: LD_INT 1000
60886: PPUSH
60887: CALL_OW 234
60891: GO 60861
60893: POP
60894: POP
// until p > 20 ;
60895: LD_VAR 0 3
60899: PUSH
60900: LD_INT 20
60902: GREATER
60903: IFFALSE 60830
// end ;
60905: PPOPN 3
60907: END
// every 0 0$1 trigger StreamModeActive and sTime do
60908: LD_EXP 59
60912: PUSH
60913: LD_EXP 110
60917: AND
60918: IFFALSE 60953
60920: GO 60922
60922: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60923: LD_INT 28
60925: PPUSH
60926: LD_OWVAR 2
60930: PPUSH
60931: LD_INT 2
60933: PPUSH
60934: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60938: LD_INT 30
60940: PPUSH
60941: LD_OWVAR 2
60945: PPUSH
60946: LD_INT 2
60948: PPUSH
60949: CALL_OW 322
// end ;
60953: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60954: LD_EXP 59
60958: PUSH
60959: LD_EXP 111
60963: AND
60964: IFFALSE 61085
60966: GO 60968
60968: DISABLE
60969: LD_INT 0
60971: PPUSH
60972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60973: LD_ADDR_VAR 0 2
60977: PUSH
60978: LD_INT 22
60980: PUSH
60981: LD_OWVAR 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 21
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: LD_INT 23
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: PPUSH
61022: CALL_OW 69
61026: ST_TO_ADDR
// if not tmp then
61027: LD_VAR 0 2
61031: NOT
61032: IFFALSE 61036
// exit ;
61034: GO 61085
// for i in tmp do
61036: LD_ADDR_VAR 0 1
61040: PUSH
61041: LD_VAR 0 2
61045: PUSH
61046: FOR_IN
61047: IFFALSE 61083
// begin if Crawls ( i ) then
61049: LD_VAR 0 1
61053: PPUSH
61054: CALL_OW 318
61058: IFFALSE 61069
// ComWalk ( i ) ;
61060: LD_VAR 0 1
61064: PPUSH
61065: CALL_OW 138
// SetClass ( i , 2 ) ;
61069: LD_VAR 0 1
61073: PPUSH
61074: LD_INT 2
61076: PPUSH
61077: CALL_OW 336
// end ;
61081: GO 61046
61083: POP
61084: POP
// end ;
61085: PPOPN 2
61087: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61088: LD_EXP 59
61092: PUSH
61093: LD_EXP 112
61097: AND
61098: IFFALSE 61386
61100: GO 61102
61102: DISABLE
61103: LD_INT 0
61105: PPUSH
61106: PPUSH
61107: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61108: LD_OWVAR 2
61112: PPUSH
61113: LD_INT 9
61115: PPUSH
61116: LD_INT 1
61118: PPUSH
61119: LD_INT 1
61121: PPUSH
61122: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61126: LD_INT 9
61128: PPUSH
61129: LD_OWVAR 2
61133: PPUSH
61134: CALL_OW 343
// uc_side := 9 ;
61138: LD_ADDR_OWVAR 20
61142: PUSH
61143: LD_INT 9
61145: ST_TO_ADDR
// uc_nation := 2 ;
61146: LD_ADDR_OWVAR 21
61150: PUSH
61151: LD_INT 2
61153: ST_TO_ADDR
// hc_name := Dark Warrior ;
61154: LD_ADDR_OWVAR 26
61158: PUSH
61159: LD_STRING Dark Warrior
61161: ST_TO_ADDR
// hc_gallery :=  ;
61162: LD_ADDR_OWVAR 33
61166: PUSH
61167: LD_STRING 
61169: ST_TO_ADDR
// hc_noskilllimit := true ;
61170: LD_ADDR_OWVAR 76
61174: PUSH
61175: LD_INT 1
61177: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
61178: LD_ADDR_OWVAR 31
61182: PUSH
61183: LD_INT 30
61185: PUSH
61186: LD_INT 30
61188: PUSH
61189: LD_INT 30
61191: PUSH
61192: LD_INT 30
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// un := CreateHuman ;
61201: LD_ADDR_VAR 0 3
61205: PUSH
61206: CALL_OW 44
61210: ST_TO_ADDR
// hc_noskilllimit := false ;
61211: LD_ADDR_OWVAR 76
61215: PUSH
61216: LD_INT 0
61218: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61219: LD_VAR 0 3
61223: PPUSH
61224: LD_INT 1
61226: PPUSH
61227: CALL_OW 51
// ToLua ( playRanger() ) ;
61231: LD_STRING playRanger()
61233: PPUSH
61234: CALL_OW 559
// p := 0 ;
61238: LD_ADDR_VAR 0 2
61242: PUSH
61243: LD_INT 0
61245: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61246: LD_INT 35
61248: PPUSH
61249: CALL_OW 67
// p := p + 1 ;
61253: LD_ADDR_VAR 0 2
61257: PUSH
61258: LD_VAR 0 2
61262: PUSH
61263: LD_INT 1
61265: PLUS
61266: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
61267: LD_VAR 0 3
61271: PPUSH
61272: CALL_OW 256
61276: PUSH
61277: LD_INT 1000
61279: LESS
61280: IFFALSE 61294
// SetLives ( un , 1000 ) ;
61282: LD_VAR 0 3
61286: PPUSH
61287: LD_INT 1000
61289: PPUSH
61290: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
61294: LD_VAR 0 3
61298: PPUSH
61299: LD_INT 81
61301: PUSH
61302: LD_OWVAR 2
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 91
61313: PUSH
61314: LD_VAR 0 3
61318: PUSH
61319: LD_INT 30
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: LIST
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PPUSH
61331: CALL_OW 69
61335: PPUSH
61336: LD_VAR 0 3
61340: PPUSH
61341: CALL_OW 74
61345: PPUSH
61346: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
61350: LD_VAR 0 2
61354: PUSH
61355: LD_INT 80
61357: GREATER
61358: PUSH
61359: LD_VAR 0 3
61363: PPUSH
61364: CALL_OW 301
61368: OR
61369: IFFALSE 61246
// if un then
61371: LD_VAR 0 3
61375: IFFALSE 61386
// RemoveUnit ( un ) ;
61377: LD_VAR 0 3
61381: PPUSH
61382: CALL_OW 64
// end ;
61386: PPOPN 3
61388: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
61389: LD_EXP 113
61393: IFFALSE 61509
61395: GO 61397
61397: DISABLE
61398: LD_INT 0
61400: PPUSH
61401: PPUSH
61402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61403: LD_ADDR_VAR 0 2
61407: PUSH
61408: LD_INT 81
61410: PUSH
61411: LD_OWVAR 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 21
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PPUSH
61434: CALL_OW 69
61438: ST_TO_ADDR
// ToLua ( playComputer() ) ;
61439: LD_STRING playComputer()
61441: PPUSH
61442: CALL_OW 559
// if not tmp then
61446: LD_VAR 0 2
61450: NOT
61451: IFFALSE 61455
// exit ;
61453: GO 61509
// for i in tmp do
61455: LD_ADDR_VAR 0 1
61459: PUSH
61460: LD_VAR 0 2
61464: PUSH
61465: FOR_IN
61466: IFFALSE 61507
// for j := 1 to 4 do
61468: LD_ADDR_VAR 0 3
61472: PUSH
61473: DOUBLE
61474: LD_INT 1
61476: DEC
61477: ST_TO_ADDR
61478: LD_INT 4
61480: PUSH
61481: FOR_TO
61482: IFFALSE 61503
// SetSkill ( i , j , 10 ) ;
61484: LD_VAR 0 1
61488: PPUSH
61489: LD_VAR 0 3
61493: PPUSH
61494: LD_INT 10
61496: PPUSH
61497: CALL_OW 237
61501: GO 61481
61503: POP
61504: POP
61505: GO 61465
61507: POP
61508: POP
// end ;
61509: PPOPN 3
61511: END
// every 0 0$1 trigger s30 do var i , tmp ;
61512: LD_EXP 114
61516: IFFALSE 61585
61518: GO 61520
61520: DISABLE
61521: LD_INT 0
61523: PPUSH
61524: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61525: LD_ADDR_VAR 0 2
61529: PUSH
61530: LD_INT 22
61532: PUSH
61533: LD_OWVAR 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PPUSH
61542: CALL_OW 69
61546: ST_TO_ADDR
// if not tmp then
61547: LD_VAR 0 2
61551: NOT
61552: IFFALSE 61556
// exit ;
61554: GO 61585
// for i in tmp do
61556: LD_ADDR_VAR 0 1
61560: PUSH
61561: LD_VAR 0 2
61565: PUSH
61566: FOR_IN
61567: IFFALSE 61583
// SetLives ( i , 300 ) ;
61569: LD_VAR 0 1
61573: PPUSH
61574: LD_INT 300
61576: PPUSH
61577: CALL_OW 234
61581: GO 61566
61583: POP
61584: POP
// end ;
61585: PPOPN 2
61587: END
// every 0 0$1 trigger s60 do var i , tmp ;
61588: LD_EXP 115
61592: IFFALSE 61661
61594: GO 61596
61596: DISABLE
61597: LD_INT 0
61599: PPUSH
61600: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61601: LD_ADDR_VAR 0 2
61605: PUSH
61606: LD_INT 22
61608: PUSH
61609: LD_OWVAR 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PPUSH
61618: CALL_OW 69
61622: ST_TO_ADDR
// if not tmp then
61623: LD_VAR 0 2
61627: NOT
61628: IFFALSE 61632
// exit ;
61630: GO 61661
// for i in tmp do
61632: LD_ADDR_VAR 0 1
61636: PUSH
61637: LD_VAR 0 2
61641: PUSH
61642: FOR_IN
61643: IFFALSE 61659
// SetLives ( i , 600 ) ;
61645: LD_VAR 0 1
61649: PPUSH
61650: LD_INT 600
61652: PPUSH
61653: CALL_OW 234
61657: GO 61642
61659: POP
61660: POP
// end ;
61661: PPOPN 2
61663: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61664: LD_INT 0
61666: PPUSH
// case cmd of 301 :
61667: LD_VAR 0 1
61671: PUSH
61672: LD_INT 301
61674: DOUBLE
61675: EQUAL
61676: IFTRUE 61680
61678: GO 61712
61680: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61681: LD_VAR 0 6
61685: PPUSH
61686: LD_VAR 0 7
61690: PPUSH
61691: LD_VAR 0 8
61695: PPUSH
61696: LD_VAR 0 4
61700: PPUSH
61701: LD_VAR 0 5
61705: PPUSH
61706: CALL 62913 0 5
61710: GO 61833
61712: LD_INT 302
61714: DOUBLE
61715: EQUAL
61716: IFTRUE 61720
61718: GO 61757
61720: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61721: LD_VAR 0 6
61725: PPUSH
61726: LD_VAR 0 7
61730: PPUSH
61731: LD_VAR 0 8
61735: PPUSH
61736: LD_VAR 0 9
61740: PPUSH
61741: LD_VAR 0 4
61745: PPUSH
61746: LD_VAR 0 5
61750: PPUSH
61751: CALL 63004 0 6
61755: GO 61833
61757: LD_INT 303
61759: DOUBLE
61760: EQUAL
61761: IFTRUE 61765
61763: GO 61802
61765: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61766: LD_VAR 0 6
61770: PPUSH
61771: LD_VAR 0 7
61775: PPUSH
61776: LD_VAR 0 8
61780: PPUSH
61781: LD_VAR 0 9
61785: PPUSH
61786: LD_VAR 0 4
61790: PPUSH
61791: LD_VAR 0 5
61795: PPUSH
61796: CALL 61838 0 6
61800: GO 61833
61802: LD_INT 304
61804: DOUBLE
61805: EQUAL
61806: IFTRUE 61810
61808: GO 61832
61810: POP
// hHackTeleport ( unit , x , y ) ; end ;
61811: LD_VAR 0 2
61815: PPUSH
61816: LD_VAR 0 4
61820: PPUSH
61821: LD_VAR 0 5
61825: PPUSH
61826: CALL 63597 0 3
61830: GO 61833
61832: POP
// end ;
61833: LD_VAR 0 12
61837: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61838: LD_INT 0
61840: PPUSH
61841: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61842: LD_VAR 0 1
61846: PUSH
61847: LD_INT 1
61849: LESS
61850: PUSH
61851: LD_VAR 0 1
61855: PUSH
61856: LD_INT 3
61858: GREATER
61859: OR
61860: PUSH
61861: LD_VAR 0 5
61865: PPUSH
61866: LD_VAR 0 6
61870: PPUSH
61871: CALL_OW 428
61875: OR
61876: IFFALSE 61880
// exit ;
61878: GO 62600
// uc_side := your_side ;
61880: LD_ADDR_OWVAR 20
61884: PUSH
61885: LD_OWVAR 2
61889: ST_TO_ADDR
// uc_nation := nation ;
61890: LD_ADDR_OWVAR 21
61894: PUSH
61895: LD_VAR 0 1
61899: ST_TO_ADDR
// bc_level = 1 ;
61900: LD_ADDR_OWVAR 43
61904: PUSH
61905: LD_INT 1
61907: ST_TO_ADDR
// case btype of 1 :
61908: LD_VAR 0 2
61912: PUSH
61913: LD_INT 1
61915: DOUBLE
61916: EQUAL
61917: IFTRUE 61921
61919: GO 61932
61921: POP
// bc_type := b_depot ; 2 :
61922: LD_ADDR_OWVAR 42
61926: PUSH
61927: LD_INT 0
61929: ST_TO_ADDR
61930: GO 62544
61932: LD_INT 2
61934: DOUBLE
61935: EQUAL
61936: IFTRUE 61940
61938: GO 61951
61940: POP
// bc_type := b_warehouse ; 3 :
61941: LD_ADDR_OWVAR 42
61945: PUSH
61946: LD_INT 1
61948: ST_TO_ADDR
61949: GO 62544
61951: LD_INT 3
61953: DOUBLE
61954: EQUAL
61955: IFTRUE 61959
61957: GO 61970
61959: POP
// bc_type := b_lab ; 4 .. 9 :
61960: LD_ADDR_OWVAR 42
61964: PUSH
61965: LD_INT 6
61967: ST_TO_ADDR
61968: GO 62544
61970: LD_INT 4
61972: DOUBLE
61973: GREATEREQUAL
61974: IFFALSE 61982
61976: LD_INT 9
61978: DOUBLE
61979: LESSEQUAL
61980: IFTRUE 61984
61982: GO 62036
61984: POP
// begin bc_type := b_lab_half ;
61985: LD_ADDR_OWVAR 42
61989: PUSH
61990: LD_INT 7
61992: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61993: LD_ADDR_OWVAR 44
61997: PUSH
61998: LD_INT 10
62000: PUSH
62001: LD_INT 11
62003: PUSH
62004: LD_INT 12
62006: PUSH
62007: LD_INT 15
62009: PUSH
62010: LD_INT 14
62012: PUSH
62013: LD_INT 13
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: PUSH
62024: LD_VAR 0 2
62028: PUSH
62029: LD_INT 3
62031: MINUS
62032: ARRAY
62033: ST_TO_ADDR
// end ; 10 .. 13 :
62034: GO 62544
62036: LD_INT 10
62038: DOUBLE
62039: GREATEREQUAL
62040: IFFALSE 62048
62042: LD_INT 13
62044: DOUBLE
62045: LESSEQUAL
62046: IFTRUE 62050
62048: GO 62127
62050: POP
// begin bc_type := b_lab_full ;
62051: LD_ADDR_OWVAR 42
62055: PUSH
62056: LD_INT 8
62058: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
62059: LD_ADDR_OWVAR 44
62063: PUSH
62064: LD_INT 10
62066: PUSH
62067: LD_INT 12
62069: PUSH
62070: LD_INT 14
62072: PUSH
62073: LD_INT 13
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: PUSH
62082: LD_VAR 0 2
62086: PUSH
62087: LD_INT 9
62089: MINUS
62090: ARRAY
62091: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
62092: LD_ADDR_OWVAR 45
62096: PUSH
62097: LD_INT 11
62099: PUSH
62100: LD_INT 15
62102: PUSH
62103: LD_INT 12
62105: PUSH
62106: LD_INT 15
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: PUSH
62115: LD_VAR 0 2
62119: PUSH
62120: LD_INT 9
62122: MINUS
62123: ARRAY
62124: ST_TO_ADDR
// end ; 14 :
62125: GO 62544
62127: LD_INT 14
62129: DOUBLE
62130: EQUAL
62131: IFTRUE 62135
62133: GO 62146
62135: POP
// bc_type := b_workshop ; 15 :
62136: LD_ADDR_OWVAR 42
62140: PUSH
62141: LD_INT 2
62143: ST_TO_ADDR
62144: GO 62544
62146: LD_INT 15
62148: DOUBLE
62149: EQUAL
62150: IFTRUE 62154
62152: GO 62165
62154: POP
// bc_type := b_factory ; 16 :
62155: LD_ADDR_OWVAR 42
62159: PUSH
62160: LD_INT 3
62162: ST_TO_ADDR
62163: GO 62544
62165: LD_INT 16
62167: DOUBLE
62168: EQUAL
62169: IFTRUE 62173
62171: GO 62184
62173: POP
// bc_type := b_ext_gun ; 17 :
62174: LD_ADDR_OWVAR 42
62178: PUSH
62179: LD_INT 17
62181: ST_TO_ADDR
62182: GO 62544
62184: LD_INT 17
62186: DOUBLE
62187: EQUAL
62188: IFTRUE 62192
62190: GO 62220
62192: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
62193: LD_ADDR_OWVAR 42
62197: PUSH
62198: LD_INT 19
62200: PUSH
62201: LD_INT 23
62203: PUSH
62204: LD_INT 19
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: PUSH
62212: LD_VAR 0 1
62216: ARRAY
62217: ST_TO_ADDR
62218: GO 62544
62220: LD_INT 18
62222: DOUBLE
62223: EQUAL
62224: IFTRUE 62228
62226: GO 62239
62228: POP
// bc_type := b_ext_radar ; 19 :
62229: LD_ADDR_OWVAR 42
62233: PUSH
62234: LD_INT 20
62236: ST_TO_ADDR
62237: GO 62544
62239: LD_INT 19
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62247
62245: GO 62258
62247: POP
// bc_type := b_ext_radio ; 20 :
62248: LD_ADDR_OWVAR 42
62252: PUSH
62253: LD_INT 22
62255: ST_TO_ADDR
62256: GO 62544
62258: LD_INT 20
62260: DOUBLE
62261: EQUAL
62262: IFTRUE 62266
62264: GO 62277
62266: POP
// bc_type := b_ext_siberium ; 21 :
62267: LD_ADDR_OWVAR 42
62271: PUSH
62272: LD_INT 21
62274: ST_TO_ADDR
62275: GO 62544
62277: LD_INT 21
62279: DOUBLE
62280: EQUAL
62281: IFTRUE 62285
62283: GO 62296
62285: POP
// bc_type := b_ext_computer ; 22 :
62286: LD_ADDR_OWVAR 42
62290: PUSH
62291: LD_INT 24
62293: ST_TO_ADDR
62294: GO 62544
62296: LD_INT 22
62298: DOUBLE
62299: EQUAL
62300: IFTRUE 62304
62302: GO 62315
62304: POP
// bc_type := b_ext_track ; 23 :
62305: LD_ADDR_OWVAR 42
62309: PUSH
62310: LD_INT 16
62312: ST_TO_ADDR
62313: GO 62544
62315: LD_INT 23
62317: DOUBLE
62318: EQUAL
62319: IFTRUE 62323
62321: GO 62334
62323: POP
// bc_type := b_ext_laser ; 24 :
62324: LD_ADDR_OWVAR 42
62328: PUSH
62329: LD_INT 25
62331: ST_TO_ADDR
62332: GO 62544
62334: LD_INT 24
62336: DOUBLE
62337: EQUAL
62338: IFTRUE 62342
62340: GO 62353
62342: POP
// bc_type := b_control_tower ; 25 :
62343: LD_ADDR_OWVAR 42
62347: PUSH
62348: LD_INT 36
62350: ST_TO_ADDR
62351: GO 62544
62353: LD_INT 25
62355: DOUBLE
62356: EQUAL
62357: IFTRUE 62361
62359: GO 62372
62361: POP
// bc_type := b_breastwork ; 26 :
62362: LD_ADDR_OWVAR 42
62366: PUSH
62367: LD_INT 31
62369: ST_TO_ADDR
62370: GO 62544
62372: LD_INT 26
62374: DOUBLE
62375: EQUAL
62376: IFTRUE 62380
62378: GO 62391
62380: POP
// bc_type := b_bunker ; 27 :
62381: LD_ADDR_OWVAR 42
62385: PUSH
62386: LD_INT 32
62388: ST_TO_ADDR
62389: GO 62544
62391: LD_INT 27
62393: DOUBLE
62394: EQUAL
62395: IFTRUE 62399
62397: GO 62410
62399: POP
// bc_type := b_turret ; 28 :
62400: LD_ADDR_OWVAR 42
62404: PUSH
62405: LD_INT 33
62407: ST_TO_ADDR
62408: GO 62544
62410: LD_INT 28
62412: DOUBLE
62413: EQUAL
62414: IFTRUE 62418
62416: GO 62429
62418: POP
// bc_type := b_armoury ; 29 :
62419: LD_ADDR_OWVAR 42
62423: PUSH
62424: LD_INT 4
62426: ST_TO_ADDR
62427: GO 62544
62429: LD_INT 29
62431: DOUBLE
62432: EQUAL
62433: IFTRUE 62437
62435: GO 62448
62437: POP
// bc_type := b_barracks ; 30 :
62438: LD_ADDR_OWVAR 42
62442: PUSH
62443: LD_INT 5
62445: ST_TO_ADDR
62446: GO 62544
62448: LD_INT 30
62450: DOUBLE
62451: EQUAL
62452: IFTRUE 62456
62454: GO 62467
62456: POP
// bc_type := b_solar_power ; 31 :
62457: LD_ADDR_OWVAR 42
62461: PUSH
62462: LD_INT 27
62464: ST_TO_ADDR
62465: GO 62544
62467: LD_INT 31
62469: DOUBLE
62470: EQUAL
62471: IFTRUE 62475
62473: GO 62486
62475: POP
// bc_type := b_oil_power ; 32 :
62476: LD_ADDR_OWVAR 42
62480: PUSH
62481: LD_INT 26
62483: ST_TO_ADDR
62484: GO 62544
62486: LD_INT 32
62488: DOUBLE
62489: EQUAL
62490: IFTRUE 62494
62492: GO 62505
62494: POP
// bc_type := b_siberite_power ; 33 :
62495: LD_ADDR_OWVAR 42
62499: PUSH
62500: LD_INT 28
62502: ST_TO_ADDR
62503: GO 62544
62505: LD_INT 33
62507: DOUBLE
62508: EQUAL
62509: IFTRUE 62513
62511: GO 62524
62513: POP
// bc_type := b_oil_mine ; 34 :
62514: LD_ADDR_OWVAR 42
62518: PUSH
62519: LD_INT 29
62521: ST_TO_ADDR
62522: GO 62544
62524: LD_INT 34
62526: DOUBLE
62527: EQUAL
62528: IFTRUE 62532
62530: GO 62543
62532: POP
// bc_type := b_siberite_mine ; end ;
62533: LD_ADDR_OWVAR 42
62537: PUSH
62538: LD_INT 30
62540: ST_TO_ADDR
62541: GO 62544
62543: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
62544: LD_ADDR_VAR 0 8
62548: PUSH
62549: LD_VAR 0 5
62553: PPUSH
62554: LD_VAR 0 6
62558: PPUSH
62559: LD_VAR 0 3
62563: PPUSH
62564: CALL_OW 47
62568: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
62569: LD_OWVAR 42
62573: PUSH
62574: LD_INT 32
62576: PUSH
62577: LD_INT 33
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: IN
62584: IFFALSE 62600
// PlaceWeaponTurret ( b , weapon ) ;
62586: LD_VAR 0 8
62590: PPUSH
62591: LD_VAR 0 4
62595: PPUSH
62596: CALL_OW 431
// end ;
62600: LD_VAR 0 7
62604: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
62605: LD_INT 0
62607: PPUSH
62608: PPUSH
62609: PPUSH
62610: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62611: LD_ADDR_VAR 0 4
62615: PUSH
62616: LD_INT 22
62618: PUSH
62619: LD_OWVAR 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: LD_INT 30
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 30
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: LIST
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PPUSH
62660: CALL_OW 69
62664: ST_TO_ADDR
// if not tmp then
62665: LD_VAR 0 4
62669: NOT
62670: IFFALSE 62674
// exit ;
62672: GO 62733
// for i in tmp do
62674: LD_ADDR_VAR 0 2
62678: PUSH
62679: LD_VAR 0 4
62683: PUSH
62684: FOR_IN
62685: IFFALSE 62731
// for j = 1 to 3 do
62687: LD_ADDR_VAR 0 3
62691: PUSH
62692: DOUBLE
62693: LD_INT 1
62695: DEC
62696: ST_TO_ADDR
62697: LD_INT 3
62699: PUSH
62700: FOR_TO
62701: IFFALSE 62727
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62703: LD_VAR 0 2
62707: PPUSH
62708: CALL_OW 274
62712: PPUSH
62713: LD_VAR 0 3
62717: PPUSH
62718: LD_INT 99999
62720: PPUSH
62721: CALL_OW 277
62725: GO 62700
62727: POP
62728: POP
62729: GO 62684
62731: POP
62732: POP
// end ;
62733: LD_VAR 0 1
62737: RET
// export function hHackSetLevel10 ; var i , j ; begin
62738: LD_INT 0
62740: PPUSH
62741: PPUSH
62742: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62743: LD_ADDR_VAR 0 2
62747: PUSH
62748: LD_INT 21
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PPUSH
62758: CALL_OW 69
62762: PUSH
62763: FOR_IN
62764: IFFALSE 62816
// if IsSelected ( i ) then
62766: LD_VAR 0 2
62770: PPUSH
62771: CALL_OW 306
62775: IFFALSE 62814
// begin for j := 1 to 4 do
62777: LD_ADDR_VAR 0 3
62781: PUSH
62782: DOUBLE
62783: LD_INT 1
62785: DEC
62786: ST_TO_ADDR
62787: LD_INT 4
62789: PUSH
62790: FOR_TO
62791: IFFALSE 62812
// SetSkill ( i , j , 10 ) ;
62793: LD_VAR 0 2
62797: PPUSH
62798: LD_VAR 0 3
62802: PPUSH
62803: LD_INT 10
62805: PPUSH
62806: CALL_OW 237
62810: GO 62790
62812: POP
62813: POP
// end ;
62814: GO 62763
62816: POP
62817: POP
// end ;
62818: LD_VAR 0 1
62822: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62823: LD_INT 0
62825: PPUSH
62826: PPUSH
62827: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62828: LD_ADDR_VAR 0 2
62832: PUSH
62833: LD_INT 22
62835: PUSH
62836: LD_OWVAR 2
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 21
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PPUSH
62859: CALL_OW 69
62863: PUSH
62864: FOR_IN
62865: IFFALSE 62906
// begin for j := 1 to 4 do
62867: LD_ADDR_VAR 0 3
62871: PUSH
62872: DOUBLE
62873: LD_INT 1
62875: DEC
62876: ST_TO_ADDR
62877: LD_INT 4
62879: PUSH
62880: FOR_TO
62881: IFFALSE 62902
// SetSkill ( i , j , 10 ) ;
62883: LD_VAR 0 2
62887: PPUSH
62888: LD_VAR 0 3
62892: PPUSH
62893: LD_INT 10
62895: PPUSH
62896: CALL_OW 237
62900: GO 62880
62902: POP
62903: POP
// end ;
62904: GO 62864
62906: POP
62907: POP
// end ;
62908: LD_VAR 0 1
62912: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62913: LD_INT 0
62915: PPUSH
// uc_side := your_side ;
62916: LD_ADDR_OWVAR 20
62920: PUSH
62921: LD_OWVAR 2
62925: ST_TO_ADDR
// uc_nation := nation ;
62926: LD_ADDR_OWVAR 21
62930: PUSH
62931: LD_VAR 0 1
62935: ST_TO_ADDR
// InitHc ;
62936: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62940: LD_INT 0
62942: PPUSH
62943: LD_VAR 0 2
62947: PPUSH
62948: LD_VAR 0 3
62952: PPUSH
62953: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62957: LD_VAR 0 4
62961: PPUSH
62962: LD_VAR 0 5
62966: PPUSH
62967: CALL_OW 428
62971: PUSH
62972: LD_INT 0
62974: EQUAL
62975: IFFALSE 62999
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62977: CALL_OW 44
62981: PPUSH
62982: LD_VAR 0 4
62986: PPUSH
62987: LD_VAR 0 5
62991: PPUSH
62992: LD_INT 1
62994: PPUSH
62995: CALL_OW 48
// end ;
62999: LD_VAR 0 6
63003: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
63004: LD_INT 0
63006: PPUSH
63007: PPUSH
// uc_side := your_side ;
63008: LD_ADDR_OWVAR 20
63012: PUSH
63013: LD_OWVAR 2
63017: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
63018: LD_VAR 0 1
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: LD_INT 2
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: LD_INT 4
63034: PUSH
63035: LD_INT 5
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: IN
63045: IFFALSE 63057
// uc_nation := nation_american else
63047: LD_ADDR_OWVAR 21
63051: PUSH
63052: LD_INT 1
63054: ST_TO_ADDR
63055: GO 63100
// if chassis in [ 11 , 12 , 13 , 14 ] then
63057: LD_VAR 0 1
63061: PUSH
63062: LD_INT 11
63064: PUSH
63065: LD_INT 12
63067: PUSH
63068: LD_INT 13
63070: PUSH
63071: LD_INT 14
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: IN
63080: IFFALSE 63092
// uc_nation := nation_arabian else
63082: LD_ADDR_OWVAR 21
63086: PUSH
63087: LD_INT 2
63089: ST_TO_ADDR
63090: GO 63100
// uc_nation := nation_russian ;
63092: LD_ADDR_OWVAR 21
63096: PUSH
63097: LD_INT 3
63099: ST_TO_ADDR
// vc_chassis := chassis ;
63100: LD_ADDR_OWVAR 37
63104: PUSH
63105: LD_VAR 0 1
63109: ST_TO_ADDR
// vc_engine := engine ;
63110: LD_ADDR_OWVAR 39
63114: PUSH
63115: LD_VAR 0 2
63119: ST_TO_ADDR
// vc_control := control ;
63120: LD_ADDR_OWVAR 38
63124: PUSH
63125: LD_VAR 0 3
63129: ST_TO_ADDR
// vc_weapon := weapon ;
63130: LD_ADDR_OWVAR 40
63134: PUSH
63135: LD_VAR 0 4
63139: ST_TO_ADDR
// un := CreateVehicle ;
63140: LD_ADDR_VAR 0 8
63144: PUSH
63145: CALL_OW 45
63149: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
63150: LD_VAR 0 8
63154: PPUSH
63155: LD_INT 0
63157: PPUSH
63158: LD_INT 5
63160: PPUSH
63161: CALL_OW 12
63165: PPUSH
63166: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
63170: LD_VAR 0 8
63174: PPUSH
63175: LD_VAR 0 5
63179: PPUSH
63180: LD_VAR 0 6
63184: PPUSH
63185: LD_INT 1
63187: PPUSH
63188: CALL_OW 48
// end ;
63192: LD_VAR 0 7
63196: RET
// export hInvincible ; every 1 do
63197: GO 63199
63199: DISABLE
// hInvincible := [ ] ;
63200: LD_ADDR_EXP 116
63204: PUSH
63205: EMPTY
63206: ST_TO_ADDR
63207: END
// every 10 do var i ;
63208: GO 63210
63210: DISABLE
63211: LD_INT 0
63213: PPUSH
// begin enable ;
63214: ENABLE
// if not hInvincible then
63215: LD_EXP 116
63219: NOT
63220: IFFALSE 63224
// exit ;
63222: GO 63268
// for i in hInvincible do
63224: LD_ADDR_VAR 0 1
63228: PUSH
63229: LD_EXP 116
63233: PUSH
63234: FOR_IN
63235: IFFALSE 63266
// if GetLives ( i ) < 1000 then
63237: LD_VAR 0 1
63241: PPUSH
63242: CALL_OW 256
63246: PUSH
63247: LD_INT 1000
63249: LESS
63250: IFFALSE 63264
// SetLives ( i , 1000 ) ;
63252: LD_VAR 0 1
63256: PPUSH
63257: LD_INT 1000
63259: PPUSH
63260: CALL_OW 234
63264: GO 63234
63266: POP
63267: POP
// end ;
63268: PPOPN 1
63270: END
// export function hHackInvincible ; var i ; begin
63271: LD_INT 0
63273: PPUSH
63274: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
63275: LD_ADDR_VAR 0 2
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: LD_INT 21
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 21
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: PPUSH
63308: CALL_OW 69
63312: PUSH
63313: FOR_IN
63314: IFFALSE 63375
// if IsSelected ( i ) then
63316: LD_VAR 0 2
63320: PPUSH
63321: CALL_OW 306
63325: IFFALSE 63373
// begin if i in hInvincible then
63327: LD_VAR 0 2
63331: PUSH
63332: LD_EXP 116
63336: IN
63337: IFFALSE 63357
// hInvincible := hInvincible diff i else
63339: LD_ADDR_EXP 116
63343: PUSH
63344: LD_EXP 116
63348: PUSH
63349: LD_VAR 0 2
63353: DIFF
63354: ST_TO_ADDR
63355: GO 63373
// hInvincible := hInvincible union i ;
63357: LD_ADDR_EXP 116
63361: PUSH
63362: LD_EXP 116
63366: PUSH
63367: LD_VAR 0 2
63371: UNION
63372: ST_TO_ADDR
// end ;
63373: GO 63313
63375: POP
63376: POP
// end ;
63377: LD_VAR 0 1
63381: RET
// export function hHackInvisible ; var i , j ; begin
63382: LD_INT 0
63384: PPUSH
63385: PPUSH
63386: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63387: LD_ADDR_VAR 0 2
63391: PUSH
63392: LD_INT 21
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PPUSH
63402: CALL_OW 69
63406: PUSH
63407: FOR_IN
63408: IFFALSE 63432
// if IsSelected ( i ) then
63410: LD_VAR 0 2
63414: PPUSH
63415: CALL_OW 306
63419: IFFALSE 63430
// ComForceInvisible ( i ) ;
63421: LD_VAR 0 2
63425: PPUSH
63426: CALL_OW 496
63430: GO 63407
63432: POP
63433: POP
// end ;
63434: LD_VAR 0 1
63438: RET
// export function hHackChangeYourSide ; begin
63439: LD_INT 0
63441: PPUSH
// if your_side = 8 then
63442: LD_OWVAR 2
63446: PUSH
63447: LD_INT 8
63449: EQUAL
63450: IFFALSE 63462
// your_side := 0 else
63452: LD_ADDR_OWVAR 2
63456: PUSH
63457: LD_INT 0
63459: ST_TO_ADDR
63460: GO 63476
// your_side := your_side + 1 ;
63462: LD_ADDR_OWVAR 2
63466: PUSH
63467: LD_OWVAR 2
63471: PUSH
63472: LD_INT 1
63474: PLUS
63475: ST_TO_ADDR
// end ;
63476: LD_VAR 0 1
63480: RET
// export function hHackChangeUnitSide ; var i , j ; begin
63481: LD_INT 0
63483: PPUSH
63484: PPUSH
63485: PPUSH
// for i in all_units do
63486: LD_ADDR_VAR 0 2
63490: PUSH
63491: LD_OWVAR 3
63495: PUSH
63496: FOR_IN
63497: IFFALSE 63575
// if IsSelected ( i ) then
63499: LD_VAR 0 2
63503: PPUSH
63504: CALL_OW 306
63508: IFFALSE 63573
// begin j := GetSide ( i ) ;
63510: LD_ADDR_VAR 0 3
63514: PUSH
63515: LD_VAR 0 2
63519: PPUSH
63520: CALL_OW 255
63524: ST_TO_ADDR
// if j = 8 then
63525: LD_VAR 0 3
63529: PUSH
63530: LD_INT 8
63532: EQUAL
63533: IFFALSE 63545
// j := 0 else
63535: LD_ADDR_VAR 0 3
63539: PUSH
63540: LD_INT 0
63542: ST_TO_ADDR
63543: GO 63559
// j := j + 1 ;
63545: LD_ADDR_VAR 0 3
63549: PUSH
63550: LD_VAR 0 3
63554: PUSH
63555: LD_INT 1
63557: PLUS
63558: ST_TO_ADDR
// SetSide ( i , j ) ;
63559: LD_VAR 0 2
63563: PPUSH
63564: LD_VAR 0 3
63568: PPUSH
63569: CALL_OW 235
// end ;
63573: GO 63496
63575: POP
63576: POP
// end ;
63577: LD_VAR 0 1
63581: RET
// export function hHackFog ; begin
63582: LD_INT 0
63584: PPUSH
// FogOff ( true ) ;
63585: LD_INT 1
63587: PPUSH
63588: CALL_OW 344
// end ;
63592: LD_VAR 0 1
63596: RET
// export function hHackTeleport ( unit , x , y ) ; begin
63597: LD_INT 0
63599: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
63600: LD_VAR 0 1
63604: PPUSH
63605: LD_VAR 0 2
63609: PPUSH
63610: LD_VAR 0 3
63614: PPUSH
63615: LD_INT 1
63617: PPUSH
63618: LD_INT 1
63620: PPUSH
63621: CALL_OW 483
// CenterOnXY ( x , y ) ;
63625: LD_VAR 0 2
63629: PPUSH
63630: LD_VAR 0 3
63634: PPUSH
63635: CALL_OW 84
// end ;
63639: LD_VAR 0 4
63643: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63644: LD_INT 0
63646: PPUSH
63647: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63648: LD_VAR 0 1
63652: NOT
63653: PUSH
63654: LD_VAR 0 2
63658: PPUSH
63659: LD_VAR 0 3
63663: PPUSH
63664: CALL_OW 488
63668: NOT
63669: OR
63670: PUSH
63671: LD_VAR 0 1
63675: PPUSH
63676: CALL_OW 266
63680: PUSH
63681: LD_INT 3
63683: NONEQUAL
63684: PUSH
63685: LD_VAR 0 1
63689: PPUSH
63690: CALL_OW 247
63694: PUSH
63695: LD_INT 1
63697: EQUAL
63698: NOT
63699: AND
63700: OR
63701: IFFALSE 63705
// exit ;
63703: GO 63854
// if GetType ( factory ) = unit_human then
63705: LD_VAR 0 1
63709: PPUSH
63710: CALL_OW 247
63714: PUSH
63715: LD_INT 1
63717: EQUAL
63718: IFFALSE 63735
// factory := IsInUnit ( factory ) ;
63720: LD_ADDR_VAR 0 1
63724: PUSH
63725: LD_VAR 0 1
63729: PPUSH
63730: CALL_OW 310
63734: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63735: LD_VAR 0 1
63739: PPUSH
63740: CALL_OW 266
63744: PUSH
63745: LD_INT 3
63747: NONEQUAL
63748: IFFALSE 63752
// exit ;
63750: GO 63854
// if HexInfo ( x , y ) = factory then
63752: LD_VAR 0 2
63756: PPUSH
63757: LD_VAR 0 3
63761: PPUSH
63762: CALL_OW 428
63766: PUSH
63767: LD_VAR 0 1
63771: EQUAL
63772: IFFALSE 63799
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
63774: LD_ADDR_EXP 117
63778: PUSH
63779: LD_EXP 117
63783: PPUSH
63784: LD_VAR 0 1
63788: PPUSH
63789: LD_INT 0
63791: PPUSH
63792: CALL_OW 1
63796: ST_TO_ADDR
63797: GO 63850
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
63799: LD_ADDR_EXP 117
63803: PUSH
63804: LD_EXP 117
63808: PPUSH
63809: LD_VAR 0 1
63813: PPUSH
63814: LD_VAR 0 1
63818: PPUSH
63819: CALL_OW 255
63823: PUSH
63824: LD_VAR 0 1
63828: PUSH
63829: LD_VAR 0 2
63833: PUSH
63834: LD_VAR 0 3
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: PPUSH
63845: CALL_OW 1
63849: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63850: CALL 63859 0 0
// end ;
63854: LD_VAR 0 4
63858: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63859: LD_INT 0
63861: PPUSH
63862: PPUSH
63863: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63864: LD_STRING resetFactoryWaypoint();
63866: PPUSH
63867: CALL_OW 559
// if factoryWaypoints then
63871: LD_EXP 117
63875: IFFALSE 64001
// begin list := PrepareArray ( factoryWaypoints ) ;
63877: LD_ADDR_VAR 0 3
63881: PUSH
63882: LD_EXP 117
63886: PPUSH
63887: CALL 49095 0 1
63891: ST_TO_ADDR
// for i := 1 to list do
63892: LD_ADDR_VAR 0 2
63896: PUSH
63897: DOUBLE
63898: LD_INT 1
63900: DEC
63901: ST_TO_ADDR
63902: LD_VAR 0 3
63906: PUSH
63907: FOR_TO
63908: IFFALSE 63999
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63910: LD_STRING setFactoryWaypointXY(
63912: PUSH
63913: LD_VAR 0 3
63917: PUSH
63918: LD_VAR 0 2
63922: ARRAY
63923: PUSH
63924: LD_INT 1
63926: ARRAY
63927: STR
63928: PUSH
63929: LD_STRING ,
63931: STR
63932: PUSH
63933: LD_VAR 0 3
63937: PUSH
63938: LD_VAR 0 2
63942: ARRAY
63943: PUSH
63944: LD_INT 2
63946: ARRAY
63947: STR
63948: PUSH
63949: LD_STRING ,
63951: STR
63952: PUSH
63953: LD_VAR 0 3
63957: PUSH
63958: LD_VAR 0 2
63962: ARRAY
63963: PUSH
63964: LD_INT 3
63966: ARRAY
63967: STR
63968: PUSH
63969: LD_STRING ,
63971: STR
63972: PUSH
63973: LD_VAR 0 3
63977: PUSH
63978: LD_VAR 0 2
63982: ARRAY
63983: PUSH
63984: LD_INT 4
63986: ARRAY
63987: STR
63988: PUSH
63989: LD_STRING )
63991: STR
63992: PPUSH
63993: CALL_OW 559
63997: GO 63907
63999: POP
64000: POP
// end ; end ;
64001: LD_VAR 0 1
64005: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64006: LD_INT 0
64008: PPUSH
// if HexInfo ( x , y ) = warehouse then
64009: LD_VAR 0 2
64013: PPUSH
64014: LD_VAR 0 3
64018: PPUSH
64019: CALL_OW 428
64023: PUSH
64024: LD_VAR 0 1
64028: EQUAL
64029: IFFALSE 64056
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64031: LD_ADDR_EXP 118
64035: PUSH
64036: LD_EXP 118
64040: PPUSH
64041: LD_VAR 0 1
64045: PPUSH
64046: LD_INT 0
64048: PPUSH
64049: CALL_OW 1
64053: ST_TO_ADDR
64054: GO 64107
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64056: LD_ADDR_EXP 118
64060: PUSH
64061: LD_EXP 118
64065: PPUSH
64066: LD_VAR 0 1
64070: PPUSH
64071: LD_VAR 0 1
64075: PPUSH
64076: CALL_OW 255
64080: PUSH
64081: LD_VAR 0 1
64085: PUSH
64086: LD_VAR 0 2
64090: PUSH
64091: LD_VAR 0 3
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: PPUSH
64102: CALL_OW 1
64106: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64107: CALL 64116 0 0
// end ;
64111: LD_VAR 0 4
64115: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64116: LD_INT 0
64118: PPUSH
64119: PPUSH
64120: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64121: LD_STRING resetWarehouseGatheringPoints();
64123: PPUSH
64124: CALL_OW 559
// if warehouseGatheringPoints then
64128: LD_EXP 118
64132: IFFALSE 64258
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64134: LD_ADDR_VAR 0 3
64138: PUSH
64139: LD_EXP 118
64143: PPUSH
64144: CALL 49095 0 1
64148: ST_TO_ADDR
// for i := 1 to list do
64149: LD_ADDR_VAR 0 2
64153: PUSH
64154: DOUBLE
64155: LD_INT 1
64157: DEC
64158: ST_TO_ADDR
64159: LD_VAR 0 3
64163: PUSH
64164: FOR_TO
64165: IFFALSE 64256
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64167: LD_STRING setWarehouseGatheringPointXY(
64169: PUSH
64170: LD_VAR 0 3
64174: PUSH
64175: LD_VAR 0 2
64179: ARRAY
64180: PUSH
64181: LD_INT 1
64183: ARRAY
64184: STR
64185: PUSH
64186: LD_STRING ,
64188: STR
64189: PUSH
64190: LD_VAR 0 3
64194: PUSH
64195: LD_VAR 0 2
64199: ARRAY
64200: PUSH
64201: LD_INT 2
64203: ARRAY
64204: STR
64205: PUSH
64206: LD_STRING ,
64208: STR
64209: PUSH
64210: LD_VAR 0 3
64214: PUSH
64215: LD_VAR 0 2
64219: ARRAY
64220: PUSH
64221: LD_INT 3
64223: ARRAY
64224: STR
64225: PUSH
64226: LD_STRING ,
64228: STR
64229: PUSH
64230: LD_VAR 0 3
64234: PUSH
64235: LD_VAR 0 2
64239: ARRAY
64240: PUSH
64241: LD_INT 4
64243: ARRAY
64244: STR
64245: PUSH
64246: LD_STRING )
64248: STR
64249: PPUSH
64250: CALL_OW 559
64254: GO 64164
64256: POP
64257: POP
// end ; end ;
64258: LD_VAR 0 1
64262: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
64263: LD_EXP 118
64267: IFFALSE 64954
64269: GO 64271
64271: DISABLE
64272: LD_INT 0
64274: PPUSH
64275: PPUSH
64276: PPUSH
64277: PPUSH
64278: PPUSH
64279: PPUSH
64280: PPUSH
64281: PPUSH
64282: PPUSH
// begin enable ;
64283: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
64284: LD_ADDR_VAR 0 3
64288: PUSH
64289: LD_EXP 118
64293: PPUSH
64294: CALL 49095 0 1
64298: ST_TO_ADDR
// if not list then
64299: LD_VAR 0 3
64303: NOT
64304: IFFALSE 64308
// exit ;
64306: GO 64954
// for i := 1 to list do
64308: LD_ADDR_VAR 0 1
64312: PUSH
64313: DOUBLE
64314: LD_INT 1
64316: DEC
64317: ST_TO_ADDR
64318: LD_VAR 0 3
64322: PUSH
64323: FOR_TO
64324: IFFALSE 64952
// begin depot := list [ i ] [ 2 ] ;
64326: LD_ADDR_VAR 0 8
64330: PUSH
64331: LD_VAR 0 3
64335: PUSH
64336: LD_VAR 0 1
64340: ARRAY
64341: PUSH
64342: LD_INT 2
64344: ARRAY
64345: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
64346: LD_ADDR_VAR 0 5
64350: PUSH
64351: LD_VAR 0 3
64355: PUSH
64356: LD_VAR 0 1
64360: ARRAY
64361: PUSH
64362: LD_INT 1
64364: ARRAY
64365: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
64366: LD_VAR 0 8
64370: PPUSH
64371: CALL_OW 301
64375: PUSH
64376: LD_VAR 0 5
64380: PUSH
64381: LD_VAR 0 8
64385: PPUSH
64386: CALL_OW 255
64390: NONEQUAL
64391: OR
64392: IFFALSE 64421
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
64394: LD_ADDR_EXP 118
64398: PUSH
64399: LD_EXP 118
64403: PPUSH
64404: LD_VAR 0 8
64408: PPUSH
64409: LD_INT 0
64411: PPUSH
64412: CALL_OW 1
64416: ST_TO_ADDR
// exit ;
64417: POP
64418: POP
64419: GO 64954
// end ; x := list [ i ] [ 3 ] ;
64421: LD_ADDR_VAR 0 6
64425: PUSH
64426: LD_VAR 0 3
64430: PUSH
64431: LD_VAR 0 1
64435: ARRAY
64436: PUSH
64437: LD_INT 3
64439: ARRAY
64440: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
64441: LD_ADDR_VAR 0 7
64445: PUSH
64446: LD_VAR 0 3
64450: PUSH
64451: LD_VAR 0 1
64455: ARRAY
64456: PUSH
64457: LD_INT 4
64459: ARRAY
64460: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
64461: LD_ADDR_VAR 0 9
64465: PUSH
64466: LD_VAR 0 6
64470: PPUSH
64471: LD_VAR 0 7
64475: PPUSH
64476: LD_INT 16
64478: PPUSH
64479: CALL 47679 0 3
64483: ST_TO_ADDR
// if not cratesNearbyPoint then
64484: LD_VAR 0 9
64488: NOT
64489: IFFALSE 64495
// exit ;
64491: POP
64492: POP
64493: GO 64954
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
64495: LD_ADDR_VAR 0 4
64499: PUSH
64500: LD_INT 22
64502: PUSH
64503: LD_VAR 0 5
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 3
64514: PUSH
64515: LD_INT 60
64517: PUSH
64518: EMPTY
64519: LIST
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 91
64527: PUSH
64528: LD_VAR 0 8
64532: PUSH
64533: LD_INT 6
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 2
64543: PUSH
64544: LD_INT 25
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 25
64556: PUSH
64557: LD_INT 16
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: LIST
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: PPUSH
64575: CALL_OW 69
64579: PUSH
64580: LD_VAR 0 8
64584: PPUSH
64585: CALL_OW 313
64589: PPUSH
64590: LD_INT 3
64592: PUSH
64593: LD_INT 60
64595: PUSH
64596: EMPTY
64597: LIST
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 2
64605: PUSH
64606: LD_INT 25
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 25
64618: PUSH
64619: LD_INT 16
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: LIST
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PPUSH
64635: CALL_OW 72
64639: UNION
64640: ST_TO_ADDR
// if tmp then
64641: LD_VAR 0 4
64645: IFFALSE 64725
// begin tmp := ShrinkArray ( tmp , 3 ) ;
64647: LD_ADDR_VAR 0 4
64651: PUSH
64652: LD_VAR 0 4
64656: PPUSH
64657: LD_INT 3
64659: PPUSH
64660: CALL 45646 0 2
64664: ST_TO_ADDR
// for j in tmp do
64665: LD_ADDR_VAR 0 2
64669: PUSH
64670: LD_VAR 0 4
64674: PUSH
64675: FOR_IN
64676: IFFALSE 64719
// begin if IsInUnit ( j ) then
64678: LD_VAR 0 2
64682: PPUSH
64683: CALL_OW 310
64687: IFFALSE 64698
// ComExit ( j ) ;
64689: LD_VAR 0 2
64693: PPUSH
64694: CALL 45729 0 1
// AddComCollect ( j , x , y ) ;
64698: LD_VAR 0 2
64702: PPUSH
64703: LD_VAR 0 6
64707: PPUSH
64708: LD_VAR 0 7
64712: PPUSH
64713: CALL_OW 177
// end ;
64717: GO 64675
64719: POP
64720: POP
// exit ;
64721: POP
64722: POP
64723: GO 64954
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
64725: LD_ADDR_VAR 0 4
64729: PUSH
64730: LD_INT 22
64732: PUSH
64733: LD_VAR 0 5
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 91
64744: PUSH
64745: LD_VAR 0 8
64749: PUSH
64750: LD_INT 8
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 2
64760: PUSH
64761: LD_INT 34
64763: PUSH
64764: LD_INT 12
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 34
64773: PUSH
64774: LD_INT 51
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 34
64783: PUSH
64784: LD_INT 32
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 34
64793: PUSH
64794: LD_EXP 42
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: LIST
64814: PPUSH
64815: CALL_OW 69
64819: ST_TO_ADDR
// if tmp then
64820: LD_VAR 0 4
64824: IFFALSE 64950
// begin for j in tmp do
64826: LD_ADDR_VAR 0 2
64830: PUSH
64831: LD_VAR 0 4
64835: PUSH
64836: FOR_IN
64837: IFFALSE 64948
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64839: LD_VAR 0 2
64843: PPUSH
64844: CALL_OW 262
64848: PUSH
64849: LD_INT 3
64851: EQUAL
64852: PUSH
64853: LD_VAR 0 2
64857: PPUSH
64858: CALL_OW 261
64862: PUSH
64863: LD_INT 20
64865: GREATER
64866: OR
64867: PUSH
64868: LD_VAR 0 2
64872: PPUSH
64873: CALL_OW 314
64877: NOT
64878: AND
64879: PUSH
64880: LD_VAR 0 2
64884: PPUSH
64885: CALL_OW 263
64889: PUSH
64890: LD_INT 1
64892: NONEQUAL
64893: PUSH
64894: LD_VAR 0 2
64898: PPUSH
64899: CALL_OW 311
64903: OR
64904: AND
64905: IFFALSE 64946
// begin ComCollect ( j , x , y ) ;
64907: LD_VAR 0 2
64911: PPUSH
64912: LD_VAR 0 6
64916: PPUSH
64917: LD_VAR 0 7
64921: PPUSH
64922: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64926: LD_VAR 0 2
64930: PPUSH
64931: LD_VAR 0 8
64935: PPUSH
64936: CALL_OW 172
// exit ;
64940: POP
64941: POP
64942: POP
64943: POP
64944: GO 64954
// end ;
64946: GO 64836
64948: POP
64949: POP
// end ; end ;
64950: GO 64323
64952: POP
64953: POP
// end ; end_of_file
64954: PPOPN 9
64956: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64957: LD_VAR 0 1
64961: PUSH
64962: LD_INT 200
64964: DOUBLE
64965: GREATEREQUAL
64966: IFFALSE 64974
64968: LD_INT 299
64970: DOUBLE
64971: LESSEQUAL
64972: IFTRUE 64976
64974: GO 65008
64976: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64977: LD_VAR 0 1
64981: PPUSH
64982: LD_VAR 0 2
64986: PPUSH
64987: LD_VAR 0 3
64991: PPUSH
64992: LD_VAR 0 4
64996: PPUSH
64997: LD_VAR 0 5
65001: PPUSH
65002: CALL 65498 0 5
65006: GO 65085
65008: LD_INT 300
65010: DOUBLE
65011: GREATEREQUAL
65012: IFFALSE 65020
65014: LD_INT 399
65016: DOUBLE
65017: LESSEQUAL
65018: IFTRUE 65022
65020: GO 65084
65022: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65023: LD_VAR 0 1
65027: PPUSH
65028: LD_VAR 0 2
65032: PPUSH
65033: LD_VAR 0 3
65037: PPUSH
65038: LD_VAR 0 4
65042: PPUSH
65043: LD_VAR 0 5
65047: PPUSH
65048: LD_VAR 0 6
65052: PPUSH
65053: LD_VAR 0 7
65057: PPUSH
65058: LD_VAR 0 8
65062: PPUSH
65063: LD_VAR 0 9
65067: PPUSH
65068: LD_VAR 0 10
65072: PPUSH
65073: LD_VAR 0 11
65077: PPUSH
65078: CALL 61664 0 11
65082: GO 65085
65084: POP
// end ;
65085: PPOPN 11
65087: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65088: LD_VAR 0 1
65092: PPUSH
65093: LD_VAR 0 2
65097: PPUSH
65098: LD_VAR 0 3
65102: PPUSH
65103: LD_VAR 0 4
65107: PPUSH
65108: LD_VAR 0 5
65112: PPUSH
65113: CALL 65234 0 5
// end ; end_of_file
65117: PPOPN 5
65119: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65120: LD_INT 0
65122: PPUSH
65123: PPUSH
65124: PPUSH
65125: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65126: LD_VAR 0 1
65130: PPUSH
65131: CALL_OW 264
65135: PUSH
65136: LD_EXP 45
65140: EQUAL
65141: IFFALSE 65213
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65143: LD_INT 68
65145: PPUSH
65146: LD_VAR 0 1
65150: PPUSH
65151: CALL_OW 255
65155: PPUSH
65156: CALL_OW 321
65160: PUSH
65161: LD_INT 2
65163: EQUAL
65164: IFFALSE 65176
// eff := 70 else
65166: LD_ADDR_VAR 0 4
65170: PUSH
65171: LD_INT 70
65173: ST_TO_ADDR
65174: GO 65184
// eff := 30 ;
65176: LD_ADDR_VAR 0 4
65180: PUSH
65181: LD_INT 30
65183: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65184: LD_VAR 0 1
65188: PPUSH
65189: CALL_OW 250
65193: PPUSH
65194: LD_VAR 0 1
65198: PPUSH
65199: CALL_OW 251
65203: PPUSH
65204: LD_VAR 0 4
65208: PPUSH
65209: CALL_OW 495
// end ; end ;
65213: LD_VAR 0 2
65217: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65218: LD_INT 0
65220: PPUSH
// end ;
65221: LD_VAR 0 4
65225: RET
// export function SOS_Command ( cmd ) ; begin
65226: LD_INT 0
65228: PPUSH
// end ;
65229: LD_VAR 0 2
65233: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65234: LD_INT 0
65236: PPUSH
// end ;
65237: LD_VAR 0 6
65241: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65242: LD_INT 0
65244: PPUSH
65245: PPUSH
// if not vehicle or not factory then
65246: LD_VAR 0 1
65250: NOT
65251: PUSH
65252: LD_VAR 0 2
65256: NOT
65257: OR
65258: IFFALSE 65262
// exit ;
65260: GO 65493
// if factoryWaypoints >= factory then
65262: LD_EXP 117
65266: PUSH
65267: LD_VAR 0 2
65271: GREATEREQUAL
65272: IFFALSE 65493
// if factoryWaypoints [ factory ] then
65274: LD_EXP 117
65278: PUSH
65279: LD_VAR 0 2
65283: ARRAY
65284: IFFALSE 65493
// begin if GetControl ( vehicle ) = control_manual then
65286: LD_VAR 0 1
65290: PPUSH
65291: CALL_OW 263
65295: PUSH
65296: LD_INT 1
65298: EQUAL
65299: IFFALSE 65380
// begin driver := IsDrivenBy ( vehicle ) ;
65301: LD_ADDR_VAR 0 4
65305: PUSH
65306: LD_VAR 0 1
65310: PPUSH
65311: CALL_OW 311
65315: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65316: LD_VAR 0 4
65320: PPUSH
65321: LD_EXP 117
65325: PUSH
65326: LD_VAR 0 2
65330: ARRAY
65331: PUSH
65332: LD_INT 3
65334: ARRAY
65335: PPUSH
65336: LD_EXP 117
65340: PUSH
65341: LD_VAR 0 2
65345: ARRAY
65346: PUSH
65347: LD_INT 4
65349: ARRAY
65350: PPUSH
65351: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65355: LD_VAR 0 4
65359: PPUSH
65360: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65364: LD_VAR 0 4
65368: PPUSH
65369: LD_VAR 0 2
65373: PPUSH
65374: CALL_OW 180
// end else
65378: GO 65493
// if GetControl ( vehicle ) = control_remote then
65380: LD_VAR 0 1
65384: PPUSH
65385: CALL_OW 263
65389: PUSH
65390: LD_INT 2
65392: EQUAL
65393: IFFALSE 65454
// begin wait ( 0 0$2 ) ;
65395: LD_INT 70
65397: PPUSH
65398: CALL_OW 67
// if Connect ( vehicle ) then
65402: LD_VAR 0 1
65406: PPUSH
65407: CALL 16057 0 1
65411: IFFALSE 65452
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65413: LD_VAR 0 1
65417: PPUSH
65418: LD_EXP 117
65422: PUSH
65423: LD_VAR 0 2
65427: ARRAY
65428: PUSH
65429: LD_INT 3
65431: ARRAY
65432: PPUSH
65433: LD_EXP 117
65437: PUSH
65438: LD_VAR 0 2
65442: ARRAY
65443: PUSH
65444: LD_INT 4
65446: ARRAY
65447: PPUSH
65448: CALL_OW 171
// end else
65452: GO 65493
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65454: LD_VAR 0 1
65458: PPUSH
65459: LD_EXP 117
65463: PUSH
65464: LD_VAR 0 2
65468: ARRAY
65469: PUSH
65470: LD_INT 3
65472: ARRAY
65473: PPUSH
65474: LD_EXP 117
65478: PUSH
65479: LD_VAR 0 2
65483: ARRAY
65484: PUSH
65485: LD_INT 4
65487: ARRAY
65488: PPUSH
65489: CALL_OW 171
// end ; end ;
65493: LD_VAR 0 3
65497: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65498: LD_INT 0
65500: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65501: LD_VAR 0 1
65505: PUSH
65506: LD_INT 250
65508: EQUAL
65509: PUSH
65510: LD_VAR 0 2
65514: PPUSH
65515: CALL_OW 264
65519: PUSH
65520: LD_EXP 48
65524: EQUAL
65525: AND
65526: IFFALSE 65547
// MinerPlaceMine ( unit , x , y ) ;
65528: LD_VAR 0 2
65532: PPUSH
65533: LD_VAR 0 4
65537: PPUSH
65538: LD_VAR 0 5
65542: PPUSH
65543: CALL 67946 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65547: LD_VAR 0 1
65551: PUSH
65552: LD_INT 251
65554: EQUAL
65555: PUSH
65556: LD_VAR 0 2
65560: PPUSH
65561: CALL_OW 264
65565: PUSH
65566: LD_EXP 48
65570: EQUAL
65571: AND
65572: IFFALSE 65593
// MinerDetonateMine ( unit , x , y ) ;
65574: LD_VAR 0 2
65578: PPUSH
65579: LD_VAR 0 4
65583: PPUSH
65584: LD_VAR 0 5
65588: PPUSH
65589: CALL 68223 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65593: LD_VAR 0 1
65597: PUSH
65598: LD_INT 252
65600: EQUAL
65601: PUSH
65602: LD_VAR 0 2
65606: PPUSH
65607: CALL_OW 264
65611: PUSH
65612: LD_EXP 48
65616: EQUAL
65617: AND
65618: IFFALSE 65639
// MinerCreateMinefield ( unit , x , y ) ;
65620: LD_VAR 0 2
65624: PPUSH
65625: LD_VAR 0 4
65629: PPUSH
65630: LD_VAR 0 5
65634: PPUSH
65635: CALL 68640 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65639: LD_VAR 0 1
65643: PUSH
65644: LD_INT 253
65646: EQUAL
65647: PUSH
65648: LD_VAR 0 2
65652: PPUSH
65653: CALL_OW 257
65657: PUSH
65658: LD_INT 5
65660: EQUAL
65661: AND
65662: IFFALSE 65683
// ComBinocular ( unit , x , y ) ;
65664: LD_VAR 0 2
65668: PPUSH
65669: LD_VAR 0 4
65673: PPUSH
65674: LD_VAR 0 5
65678: PPUSH
65679: CALL 69011 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65683: LD_VAR 0 1
65687: PUSH
65688: LD_INT 254
65690: EQUAL
65691: PUSH
65692: LD_VAR 0 2
65696: PPUSH
65697: CALL_OW 264
65701: PUSH
65702: LD_EXP 43
65706: EQUAL
65707: AND
65708: PUSH
65709: LD_VAR 0 3
65713: PPUSH
65714: CALL_OW 263
65718: PUSH
65719: LD_INT 3
65721: EQUAL
65722: AND
65723: IFFALSE 65739
// HackDestroyVehicle ( unit , selectedUnit ) ;
65725: LD_VAR 0 2
65729: PPUSH
65730: LD_VAR 0 3
65734: PPUSH
65735: CALL 67306 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65739: LD_VAR 0 1
65743: PUSH
65744: LD_INT 255
65746: EQUAL
65747: PUSH
65748: LD_VAR 0 2
65752: PPUSH
65753: CALL_OW 264
65757: PUSH
65758: LD_INT 14
65760: PUSH
65761: LD_INT 53
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: IN
65768: AND
65769: PUSH
65770: LD_VAR 0 4
65774: PPUSH
65775: LD_VAR 0 5
65779: PPUSH
65780: CALL_OW 488
65784: AND
65785: IFFALSE 65809
// CutTreeXYR ( unit , x , y , 12 ) ;
65787: LD_VAR 0 2
65791: PPUSH
65792: LD_VAR 0 4
65796: PPUSH
65797: LD_VAR 0 5
65801: PPUSH
65802: LD_INT 12
65804: PPUSH
65805: CALL 65872 0 4
// if cmd = 256 then
65809: LD_VAR 0 1
65813: PUSH
65814: LD_INT 256
65816: EQUAL
65817: IFFALSE 65838
// SetFactoryWaypoint ( unit , x , y ) ;
65819: LD_VAR 0 2
65823: PPUSH
65824: LD_VAR 0 4
65828: PPUSH
65829: LD_VAR 0 5
65833: PPUSH
65834: CALL 63644 0 3
// if cmd = 257 then
65838: LD_VAR 0 1
65842: PUSH
65843: LD_INT 257
65845: EQUAL
65846: IFFALSE 65867
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65848: LD_VAR 0 2
65852: PPUSH
65853: LD_VAR 0 4
65857: PPUSH
65858: LD_VAR 0 5
65862: PPUSH
65863: CALL 64006 0 3
// end ;
65867: LD_VAR 0 6
65871: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65872: LD_INT 0
65874: PPUSH
65875: PPUSH
65876: PPUSH
65877: PPUSH
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
65882: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
65883: LD_VAR 0 1
65887: NOT
65888: PUSH
65889: LD_VAR 0 2
65893: PPUSH
65894: LD_VAR 0 3
65898: PPUSH
65899: CALL_OW 488
65903: NOT
65904: OR
65905: PUSH
65906: LD_VAR 0 4
65910: NOT
65911: OR
65912: IFFALSE 65916
// exit ;
65914: GO 66256
// list := [ ] ;
65916: LD_ADDR_VAR 0 13
65920: PUSH
65921: EMPTY
65922: ST_TO_ADDR
// if x - r < 0 then
65923: LD_VAR 0 2
65927: PUSH
65928: LD_VAR 0 4
65932: MINUS
65933: PUSH
65934: LD_INT 0
65936: LESS
65937: IFFALSE 65949
// min_x := 0 else
65939: LD_ADDR_VAR 0 7
65943: PUSH
65944: LD_INT 0
65946: ST_TO_ADDR
65947: GO 65965
// min_x := x - r ;
65949: LD_ADDR_VAR 0 7
65953: PUSH
65954: LD_VAR 0 2
65958: PUSH
65959: LD_VAR 0 4
65963: MINUS
65964: ST_TO_ADDR
// if y - r < 0 then
65965: LD_VAR 0 3
65969: PUSH
65970: LD_VAR 0 4
65974: MINUS
65975: PUSH
65976: LD_INT 0
65978: LESS
65979: IFFALSE 65991
// min_y := 0 else
65981: LD_ADDR_VAR 0 8
65985: PUSH
65986: LD_INT 0
65988: ST_TO_ADDR
65989: GO 66007
// min_y := y - r ;
65991: LD_ADDR_VAR 0 8
65995: PUSH
65996: LD_VAR 0 3
66000: PUSH
66001: LD_VAR 0 4
66005: MINUS
66006: ST_TO_ADDR
// max_x := x + r ;
66007: LD_ADDR_VAR 0 9
66011: PUSH
66012: LD_VAR 0 2
66016: PUSH
66017: LD_VAR 0 4
66021: PLUS
66022: ST_TO_ADDR
// max_y := y + r ;
66023: LD_ADDR_VAR 0 10
66027: PUSH
66028: LD_VAR 0 3
66032: PUSH
66033: LD_VAR 0 4
66037: PLUS
66038: ST_TO_ADDR
// for _x = min_x to max_x do
66039: LD_ADDR_VAR 0 11
66043: PUSH
66044: DOUBLE
66045: LD_VAR 0 7
66049: DEC
66050: ST_TO_ADDR
66051: LD_VAR 0 9
66055: PUSH
66056: FOR_TO
66057: IFFALSE 66174
// for _y = min_y to max_y do
66059: LD_ADDR_VAR 0 12
66063: PUSH
66064: DOUBLE
66065: LD_VAR 0 8
66069: DEC
66070: ST_TO_ADDR
66071: LD_VAR 0 10
66075: PUSH
66076: FOR_TO
66077: IFFALSE 66170
// begin if not ValidHex ( _x , _y ) then
66079: LD_VAR 0 11
66083: PPUSH
66084: LD_VAR 0 12
66088: PPUSH
66089: CALL_OW 488
66093: NOT
66094: IFFALSE 66098
// continue ;
66096: GO 66076
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66098: LD_VAR 0 11
66102: PPUSH
66103: LD_VAR 0 12
66107: PPUSH
66108: CALL_OW 351
66112: PUSH
66113: LD_VAR 0 11
66117: PPUSH
66118: LD_VAR 0 12
66122: PPUSH
66123: CALL_OW 554
66127: AND
66128: IFFALSE 66168
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66130: LD_ADDR_VAR 0 13
66134: PUSH
66135: LD_VAR 0 13
66139: PPUSH
66140: LD_VAR 0 13
66144: PUSH
66145: LD_INT 1
66147: PLUS
66148: PPUSH
66149: LD_VAR 0 11
66153: PUSH
66154: LD_VAR 0 12
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PPUSH
66163: CALL_OW 2
66167: ST_TO_ADDR
// end ;
66168: GO 66076
66170: POP
66171: POP
66172: GO 66056
66174: POP
66175: POP
// if not list then
66176: LD_VAR 0 13
66180: NOT
66181: IFFALSE 66185
// exit ;
66183: GO 66256
// for i in list do
66185: LD_ADDR_VAR 0 6
66189: PUSH
66190: LD_VAR 0 13
66194: PUSH
66195: FOR_IN
66196: IFFALSE 66254
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66198: LD_VAR 0 1
66202: PPUSH
66203: LD_STRING M
66205: PUSH
66206: LD_VAR 0 6
66210: PUSH
66211: LD_INT 1
66213: ARRAY
66214: PUSH
66215: LD_VAR 0 6
66219: PUSH
66220: LD_INT 2
66222: ARRAY
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: PPUSH
66248: CALL_OW 447
66252: GO 66195
66254: POP
66255: POP
// end ;
66256: LD_VAR 0 5
66260: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66261: LD_EXP 120
66265: NOT
66266: IFFALSE 66316
66268: GO 66270
66270: DISABLE
// begin initHack := true ;
66271: LD_ADDR_EXP 120
66275: PUSH
66276: LD_INT 1
66278: ST_TO_ADDR
// hackTanks := [ ] ;
66279: LD_ADDR_EXP 121
66283: PUSH
66284: EMPTY
66285: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66286: LD_ADDR_EXP 122
66290: PUSH
66291: EMPTY
66292: ST_TO_ADDR
// hackLimit := 3 ;
66293: LD_ADDR_EXP 123
66297: PUSH
66298: LD_INT 3
66300: ST_TO_ADDR
// hackDist := 12 ;
66301: LD_ADDR_EXP 124
66305: PUSH
66306: LD_INT 12
66308: ST_TO_ADDR
// hackCounter := [ ] ;
66309: LD_ADDR_EXP 125
66313: PUSH
66314: EMPTY
66315: ST_TO_ADDR
// end ;
66316: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66317: LD_EXP 120
66321: PUSH
66322: LD_INT 34
66324: PUSH
66325: LD_EXP 43
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PPUSH
66334: CALL_OW 69
66338: AND
66339: IFFALSE 66594
66341: GO 66343
66343: DISABLE
66344: LD_INT 0
66346: PPUSH
66347: PPUSH
// begin enable ;
66348: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66349: LD_ADDR_VAR 0 1
66353: PUSH
66354: LD_INT 34
66356: PUSH
66357: LD_EXP 43
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PPUSH
66366: CALL_OW 69
66370: PUSH
66371: FOR_IN
66372: IFFALSE 66592
// begin if not i in hackTanks then
66374: LD_VAR 0 1
66378: PUSH
66379: LD_EXP 121
66383: IN
66384: NOT
66385: IFFALSE 66468
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66387: LD_ADDR_EXP 121
66391: PUSH
66392: LD_EXP 121
66396: PPUSH
66397: LD_EXP 121
66401: PUSH
66402: LD_INT 1
66404: PLUS
66405: PPUSH
66406: LD_VAR 0 1
66410: PPUSH
66411: CALL_OW 1
66415: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66416: LD_ADDR_EXP 122
66420: PUSH
66421: LD_EXP 122
66425: PPUSH
66426: LD_EXP 122
66430: PUSH
66431: LD_INT 1
66433: PLUS
66434: PPUSH
66435: EMPTY
66436: PPUSH
66437: CALL_OW 1
66441: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66442: LD_ADDR_EXP 125
66446: PUSH
66447: LD_EXP 125
66451: PPUSH
66452: LD_EXP 125
66456: PUSH
66457: LD_INT 1
66459: PLUS
66460: PPUSH
66461: EMPTY
66462: PPUSH
66463: CALL_OW 1
66467: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66468: LD_VAR 0 1
66472: PPUSH
66473: CALL_OW 302
66477: NOT
66478: IFFALSE 66491
// begin HackUnlinkAll ( i ) ;
66480: LD_VAR 0 1
66484: PPUSH
66485: CALL 66597 0 1
// continue ;
66489: GO 66371
// end ; HackCheckCapturedStatus ( i ) ;
66491: LD_VAR 0 1
66495: PPUSH
66496: CALL 67040 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66500: LD_ADDR_VAR 0 2
66504: PUSH
66505: LD_INT 81
66507: PUSH
66508: LD_VAR 0 1
66512: PPUSH
66513: CALL_OW 255
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 33
66524: PUSH
66525: LD_INT 3
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 91
66534: PUSH
66535: LD_VAR 0 1
66539: PUSH
66540: LD_EXP 124
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 50
66552: PUSH
66553: EMPTY
66554: LIST
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: PPUSH
66562: CALL_OW 69
66566: ST_TO_ADDR
// if not tmp then
66567: LD_VAR 0 2
66571: NOT
66572: IFFALSE 66576
// continue ;
66574: GO 66371
// HackLink ( i , tmp ) ;
66576: LD_VAR 0 1
66580: PPUSH
66581: LD_VAR 0 2
66585: PPUSH
66586: CALL 66733 0 2
// end ;
66590: GO 66371
66592: POP
66593: POP
// end ;
66594: PPOPN 2
66596: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66597: LD_INT 0
66599: PPUSH
66600: PPUSH
66601: PPUSH
// if not hack in hackTanks then
66602: LD_VAR 0 1
66606: PUSH
66607: LD_EXP 121
66611: IN
66612: NOT
66613: IFFALSE 66617
// exit ;
66615: GO 66728
// index := GetElementIndex ( hackTanks , hack ) ;
66617: LD_ADDR_VAR 0 4
66621: PUSH
66622: LD_EXP 121
66626: PPUSH
66627: LD_VAR 0 1
66631: PPUSH
66632: CALL 12871 0 2
66636: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66637: LD_EXP 122
66641: PUSH
66642: LD_VAR 0 4
66646: ARRAY
66647: IFFALSE 66728
// begin for i in hackTanksCaptured [ index ] do
66649: LD_ADDR_VAR 0 3
66653: PUSH
66654: LD_EXP 122
66658: PUSH
66659: LD_VAR 0 4
66663: ARRAY
66664: PUSH
66665: FOR_IN
66666: IFFALSE 66692
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66668: LD_VAR 0 3
66672: PUSH
66673: LD_INT 1
66675: ARRAY
66676: PPUSH
66677: LD_VAR 0 3
66681: PUSH
66682: LD_INT 2
66684: ARRAY
66685: PPUSH
66686: CALL_OW 235
66690: GO 66665
66692: POP
66693: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66694: LD_ADDR_EXP 122
66698: PUSH
66699: LD_EXP 122
66703: PPUSH
66704: LD_VAR 0 4
66708: PPUSH
66709: EMPTY
66710: PPUSH
66711: CALL_OW 1
66715: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66716: LD_VAR 0 1
66720: PPUSH
66721: LD_INT 0
66723: PPUSH
66724: CALL_OW 505
// end ; end ;
66728: LD_VAR 0 2
66732: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66733: LD_INT 0
66735: PPUSH
66736: PPUSH
66737: PPUSH
// if not hack in hackTanks or not vehicles then
66738: LD_VAR 0 1
66742: PUSH
66743: LD_EXP 121
66747: IN
66748: NOT
66749: PUSH
66750: LD_VAR 0 2
66754: NOT
66755: OR
66756: IFFALSE 66760
// exit ;
66758: GO 67035
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66760: LD_ADDR_VAR 0 2
66764: PUSH
66765: LD_VAR 0 1
66769: PPUSH
66770: LD_VAR 0 2
66774: PPUSH
66775: LD_INT 1
66777: PPUSH
66778: LD_INT 1
66780: PPUSH
66781: CALL 13521 0 4
66785: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66786: LD_ADDR_VAR 0 5
66790: PUSH
66791: LD_EXP 121
66795: PPUSH
66796: LD_VAR 0 1
66800: PPUSH
66801: CALL 12871 0 2
66805: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66806: LD_EXP 122
66810: PUSH
66811: LD_VAR 0 5
66815: ARRAY
66816: PUSH
66817: LD_EXP 123
66821: LESS
66822: IFFALSE 67011
// begin for i := 1 to vehicles do
66824: LD_ADDR_VAR 0 4
66828: PUSH
66829: DOUBLE
66830: LD_INT 1
66832: DEC
66833: ST_TO_ADDR
66834: LD_VAR 0 2
66838: PUSH
66839: FOR_TO
66840: IFFALSE 67009
// begin if hackTanksCaptured [ index ] = hackLimit then
66842: LD_EXP 122
66846: PUSH
66847: LD_VAR 0 5
66851: ARRAY
66852: PUSH
66853: LD_EXP 123
66857: EQUAL
66858: IFFALSE 66862
// break ;
66860: GO 67009
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66862: LD_ADDR_EXP 125
66866: PUSH
66867: LD_EXP 125
66871: PPUSH
66872: LD_VAR 0 5
66876: PPUSH
66877: LD_EXP 125
66881: PUSH
66882: LD_VAR 0 5
66886: ARRAY
66887: PUSH
66888: LD_INT 1
66890: PLUS
66891: PPUSH
66892: CALL_OW 1
66896: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66897: LD_ADDR_EXP 122
66901: PUSH
66902: LD_EXP 122
66906: PPUSH
66907: LD_VAR 0 5
66911: PUSH
66912: LD_EXP 122
66916: PUSH
66917: LD_VAR 0 5
66921: ARRAY
66922: PUSH
66923: LD_INT 1
66925: PLUS
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PPUSH
66931: LD_VAR 0 2
66935: PUSH
66936: LD_VAR 0 4
66940: ARRAY
66941: PUSH
66942: LD_VAR 0 2
66946: PUSH
66947: LD_VAR 0 4
66951: ARRAY
66952: PPUSH
66953: CALL_OW 255
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PPUSH
66962: CALL 13086 0 3
66966: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66967: LD_VAR 0 2
66971: PUSH
66972: LD_VAR 0 4
66976: ARRAY
66977: PPUSH
66978: LD_VAR 0 1
66982: PPUSH
66983: CALL_OW 255
66987: PPUSH
66988: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66992: LD_VAR 0 2
66996: PUSH
66997: LD_VAR 0 4
67001: ARRAY
67002: PPUSH
67003: CALL_OW 141
// end ;
67007: GO 66839
67009: POP
67010: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67011: LD_VAR 0 1
67015: PPUSH
67016: LD_EXP 122
67020: PUSH
67021: LD_VAR 0 5
67025: ARRAY
67026: PUSH
67027: LD_INT 0
67029: PLUS
67030: PPUSH
67031: CALL_OW 505
// end ;
67035: LD_VAR 0 3
67039: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67040: LD_INT 0
67042: PPUSH
67043: PPUSH
67044: PPUSH
67045: PPUSH
// if not hack in hackTanks then
67046: LD_VAR 0 1
67050: PUSH
67051: LD_EXP 121
67055: IN
67056: NOT
67057: IFFALSE 67061
// exit ;
67059: GO 67301
// index := GetElementIndex ( hackTanks , hack ) ;
67061: LD_ADDR_VAR 0 4
67065: PUSH
67066: LD_EXP 121
67070: PPUSH
67071: LD_VAR 0 1
67075: PPUSH
67076: CALL 12871 0 2
67080: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67081: LD_ADDR_VAR 0 3
67085: PUSH
67086: DOUBLE
67087: LD_EXP 122
67091: PUSH
67092: LD_VAR 0 4
67096: ARRAY
67097: INC
67098: ST_TO_ADDR
67099: LD_INT 1
67101: PUSH
67102: FOR_DOWNTO
67103: IFFALSE 67275
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67105: LD_ADDR_VAR 0 5
67109: PUSH
67110: LD_EXP 122
67114: PUSH
67115: LD_VAR 0 4
67119: ARRAY
67120: PUSH
67121: LD_VAR 0 3
67125: ARRAY
67126: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67127: LD_VAR 0 5
67131: PUSH
67132: LD_INT 1
67134: ARRAY
67135: PPUSH
67136: CALL_OW 302
67140: NOT
67141: PUSH
67142: LD_VAR 0 5
67146: PUSH
67147: LD_INT 1
67149: ARRAY
67150: PPUSH
67151: CALL_OW 255
67155: PUSH
67156: LD_VAR 0 1
67160: PPUSH
67161: CALL_OW 255
67165: NONEQUAL
67166: OR
67167: IFFALSE 67273
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67169: LD_VAR 0 5
67173: PUSH
67174: LD_INT 1
67176: ARRAY
67177: PPUSH
67178: CALL_OW 305
67182: PUSH
67183: LD_VAR 0 5
67187: PUSH
67188: LD_INT 1
67190: ARRAY
67191: PPUSH
67192: CALL_OW 255
67196: PUSH
67197: LD_VAR 0 1
67201: PPUSH
67202: CALL_OW 255
67206: EQUAL
67207: AND
67208: IFFALSE 67232
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67210: LD_VAR 0 5
67214: PUSH
67215: LD_INT 1
67217: ARRAY
67218: PPUSH
67219: LD_VAR 0 5
67223: PUSH
67224: LD_INT 2
67226: ARRAY
67227: PPUSH
67228: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67232: LD_ADDR_EXP 122
67236: PUSH
67237: LD_EXP 122
67241: PPUSH
67242: LD_VAR 0 4
67246: PPUSH
67247: LD_EXP 122
67251: PUSH
67252: LD_VAR 0 4
67256: ARRAY
67257: PPUSH
67258: LD_VAR 0 3
67262: PPUSH
67263: CALL_OW 3
67267: PPUSH
67268: CALL_OW 1
67272: ST_TO_ADDR
// end ; end ;
67273: GO 67102
67275: POP
67276: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67277: LD_VAR 0 1
67281: PPUSH
67282: LD_EXP 122
67286: PUSH
67287: LD_VAR 0 4
67291: ARRAY
67292: PUSH
67293: LD_INT 0
67295: PLUS
67296: PPUSH
67297: CALL_OW 505
// end ;
67301: LD_VAR 0 2
67305: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67306: LD_INT 0
67308: PPUSH
67309: PPUSH
67310: PPUSH
67311: PPUSH
// if not hack in hackTanks then
67312: LD_VAR 0 1
67316: PUSH
67317: LD_EXP 121
67321: IN
67322: NOT
67323: IFFALSE 67327
// exit ;
67325: GO 67412
// index := GetElementIndex ( hackTanks , hack ) ;
67327: LD_ADDR_VAR 0 5
67331: PUSH
67332: LD_EXP 121
67336: PPUSH
67337: LD_VAR 0 1
67341: PPUSH
67342: CALL 12871 0 2
67346: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67347: LD_ADDR_VAR 0 4
67351: PUSH
67352: DOUBLE
67353: LD_INT 1
67355: DEC
67356: ST_TO_ADDR
67357: LD_EXP 122
67361: PUSH
67362: LD_VAR 0 5
67366: ARRAY
67367: PUSH
67368: FOR_TO
67369: IFFALSE 67410
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67371: LD_EXP 122
67375: PUSH
67376: LD_VAR 0 5
67380: ARRAY
67381: PUSH
67382: LD_VAR 0 4
67386: ARRAY
67387: PUSH
67388: LD_INT 1
67390: ARRAY
67391: PUSH
67392: LD_VAR 0 2
67396: EQUAL
67397: IFFALSE 67408
// KillUnit ( vehicle ) ;
67399: LD_VAR 0 2
67403: PPUSH
67404: CALL_OW 66
67408: GO 67368
67410: POP
67411: POP
// end ;
67412: LD_VAR 0 3
67416: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67417: LD_EXP 126
67421: NOT
67422: IFFALSE 67457
67424: GO 67426
67426: DISABLE
// begin initMiner := true ;
67427: LD_ADDR_EXP 126
67431: PUSH
67432: LD_INT 1
67434: ST_TO_ADDR
// minersList := [ ] ;
67435: LD_ADDR_EXP 127
67439: PUSH
67440: EMPTY
67441: ST_TO_ADDR
// minerMinesList := [ ] ;
67442: LD_ADDR_EXP 128
67446: PUSH
67447: EMPTY
67448: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67449: LD_ADDR_EXP 129
67453: PUSH
67454: LD_INT 5
67456: ST_TO_ADDR
// end ;
67457: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67458: LD_EXP 126
67462: PUSH
67463: LD_INT 34
67465: PUSH
67466: LD_EXP 48
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PPUSH
67475: CALL_OW 69
67479: AND
67480: IFFALSE 67943
67482: GO 67484
67484: DISABLE
67485: LD_INT 0
67487: PPUSH
67488: PPUSH
67489: PPUSH
67490: PPUSH
// begin enable ;
67491: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67492: LD_ADDR_VAR 0 1
67496: PUSH
67497: LD_INT 34
67499: PUSH
67500: LD_EXP 48
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PPUSH
67509: CALL_OW 69
67513: PUSH
67514: FOR_IN
67515: IFFALSE 67587
// begin if not i in minersList then
67517: LD_VAR 0 1
67521: PUSH
67522: LD_EXP 127
67526: IN
67527: NOT
67528: IFFALSE 67585
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67530: LD_ADDR_EXP 127
67534: PUSH
67535: LD_EXP 127
67539: PPUSH
67540: LD_EXP 127
67544: PUSH
67545: LD_INT 1
67547: PLUS
67548: PPUSH
67549: LD_VAR 0 1
67553: PPUSH
67554: CALL_OW 1
67558: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67559: LD_ADDR_EXP 128
67563: PUSH
67564: LD_EXP 128
67568: PPUSH
67569: LD_EXP 128
67573: PUSH
67574: LD_INT 1
67576: PLUS
67577: PPUSH
67578: EMPTY
67579: PPUSH
67580: CALL_OW 1
67584: ST_TO_ADDR
// end end ;
67585: GO 67514
67587: POP
67588: POP
// for i := minerMinesList downto 1 do
67589: LD_ADDR_VAR 0 1
67593: PUSH
67594: DOUBLE
67595: LD_EXP 128
67599: INC
67600: ST_TO_ADDR
67601: LD_INT 1
67603: PUSH
67604: FOR_DOWNTO
67605: IFFALSE 67941
// begin if IsLive ( minersList [ i ] ) then
67607: LD_EXP 127
67611: PUSH
67612: LD_VAR 0 1
67616: ARRAY
67617: PPUSH
67618: CALL_OW 300
67622: IFFALSE 67650
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67624: LD_EXP 127
67628: PUSH
67629: LD_VAR 0 1
67633: ARRAY
67634: PPUSH
67635: LD_EXP 128
67639: PUSH
67640: LD_VAR 0 1
67644: ARRAY
67645: PPUSH
67646: CALL_OW 505
// if not minerMinesList [ i ] then
67650: LD_EXP 128
67654: PUSH
67655: LD_VAR 0 1
67659: ARRAY
67660: NOT
67661: IFFALSE 67665
// continue ;
67663: GO 67604
// for j := minerMinesList [ i ] downto 1 do
67665: LD_ADDR_VAR 0 2
67669: PUSH
67670: DOUBLE
67671: LD_EXP 128
67675: PUSH
67676: LD_VAR 0 1
67680: ARRAY
67681: INC
67682: ST_TO_ADDR
67683: LD_INT 1
67685: PUSH
67686: FOR_DOWNTO
67687: IFFALSE 67937
// begin side := GetSide ( minersList [ i ] ) ;
67689: LD_ADDR_VAR 0 3
67693: PUSH
67694: LD_EXP 127
67698: PUSH
67699: LD_VAR 0 1
67703: ARRAY
67704: PPUSH
67705: CALL_OW 255
67709: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67710: LD_ADDR_VAR 0 4
67714: PUSH
67715: LD_EXP 128
67719: PUSH
67720: LD_VAR 0 1
67724: ARRAY
67725: PUSH
67726: LD_VAR 0 2
67730: ARRAY
67731: PUSH
67732: LD_INT 1
67734: ARRAY
67735: PPUSH
67736: LD_EXP 128
67740: PUSH
67741: LD_VAR 0 1
67745: ARRAY
67746: PUSH
67747: LD_VAR 0 2
67751: ARRAY
67752: PUSH
67753: LD_INT 2
67755: ARRAY
67756: PPUSH
67757: CALL_OW 428
67761: ST_TO_ADDR
// if not tmp then
67762: LD_VAR 0 4
67766: NOT
67767: IFFALSE 67771
// continue ;
67769: GO 67686
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67771: LD_VAR 0 4
67775: PUSH
67776: LD_INT 81
67778: PUSH
67779: LD_VAR 0 3
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PPUSH
67788: CALL_OW 69
67792: IN
67793: PUSH
67794: LD_EXP 128
67798: PUSH
67799: LD_VAR 0 1
67803: ARRAY
67804: PUSH
67805: LD_VAR 0 2
67809: ARRAY
67810: PUSH
67811: LD_INT 1
67813: ARRAY
67814: PPUSH
67815: LD_EXP 128
67819: PUSH
67820: LD_VAR 0 1
67824: ARRAY
67825: PUSH
67826: LD_VAR 0 2
67830: ARRAY
67831: PUSH
67832: LD_INT 2
67834: ARRAY
67835: PPUSH
67836: CALL_OW 458
67840: AND
67841: IFFALSE 67935
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67843: LD_EXP 128
67847: PUSH
67848: LD_VAR 0 1
67852: ARRAY
67853: PUSH
67854: LD_VAR 0 2
67858: ARRAY
67859: PUSH
67860: LD_INT 1
67862: ARRAY
67863: PPUSH
67864: LD_EXP 128
67868: PUSH
67869: LD_VAR 0 1
67873: ARRAY
67874: PUSH
67875: LD_VAR 0 2
67879: ARRAY
67880: PUSH
67881: LD_INT 2
67883: ARRAY
67884: PPUSH
67885: LD_VAR 0 3
67889: PPUSH
67890: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67894: LD_ADDR_EXP 128
67898: PUSH
67899: LD_EXP 128
67903: PPUSH
67904: LD_VAR 0 1
67908: PPUSH
67909: LD_EXP 128
67913: PUSH
67914: LD_VAR 0 1
67918: ARRAY
67919: PPUSH
67920: LD_VAR 0 2
67924: PPUSH
67925: CALL_OW 3
67929: PPUSH
67930: CALL_OW 1
67934: ST_TO_ADDR
// end ; end ;
67935: GO 67686
67937: POP
67938: POP
// end ;
67939: GO 67604
67941: POP
67942: POP
// end ;
67943: PPOPN 4
67945: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67946: LD_INT 0
67948: PPUSH
67949: PPUSH
// result := false ;
67950: LD_ADDR_VAR 0 4
67954: PUSH
67955: LD_INT 0
67957: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67958: LD_VAR 0 1
67962: PPUSH
67963: CALL_OW 264
67967: PUSH
67968: LD_EXP 48
67972: EQUAL
67973: NOT
67974: IFFALSE 67978
// exit ;
67976: GO 68218
// index := GetElementIndex ( minersList , unit ) ;
67978: LD_ADDR_VAR 0 5
67982: PUSH
67983: LD_EXP 127
67987: PPUSH
67988: LD_VAR 0 1
67992: PPUSH
67993: CALL 12871 0 2
67997: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67998: LD_EXP 128
68002: PUSH
68003: LD_VAR 0 5
68007: ARRAY
68008: PUSH
68009: LD_EXP 129
68013: GREATEREQUAL
68014: IFFALSE 68018
// exit ;
68016: GO 68218
// ComMoveXY ( unit , x , y ) ;
68018: LD_VAR 0 1
68022: PPUSH
68023: LD_VAR 0 2
68027: PPUSH
68028: LD_VAR 0 3
68032: PPUSH
68033: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68037: LD_INT 35
68039: PPUSH
68040: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68044: LD_VAR 0 1
68048: PPUSH
68049: LD_VAR 0 2
68053: PPUSH
68054: LD_VAR 0 3
68058: PPUSH
68059: CALL 44140 0 3
68063: NOT
68064: PUSH
68065: LD_VAR 0 1
68069: PPUSH
68070: CALL_OW 314
68074: AND
68075: IFFALSE 68079
// exit ;
68077: GO 68218
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68079: LD_VAR 0 2
68083: PPUSH
68084: LD_VAR 0 3
68088: PPUSH
68089: CALL_OW 428
68093: PUSH
68094: LD_VAR 0 1
68098: EQUAL
68099: PUSH
68100: LD_VAR 0 1
68104: PPUSH
68105: CALL_OW 314
68109: NOT
68110: AND
68111: IFFALSE 68037
// PlaySoundXY ( x , y , PlantMine ) ;
68113: LD_VAR 0 2
68117: PPUSH
68118: LD_VAR 0 3
68122: PPUSH
68123: LD_STRING PlantMine
68125: PPUSH
68126: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68130: LD_VAR 0 2
68134: PPUSH
68135: LD_VAR 0 3
68139: PPUSH
68140: LD_VAR 0 1
68144: PPUSH
68145: CALL_OW 255
68149: PPUSH
68150: LD_INT 0
68152: PPUSH
68153: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68157: LD_ADDR_EXP 128
68161: PUSH
68162: LD_EXP 128
68166: PPUSH
68167: LD_VAR 0 5
68171: PUSH
68172: LD_EXP 128
68176: PUSH
68177: LD_VAR 0 5
68181: ARRAY
68182: PUSH
68183: LD_INT 1
68185: PLUS
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PPUSH
68191: LD_VAR 0 2
68195: PUSH
68196: LD_VAR 0 3
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PPUSH
68205: CALL 13086 0 3
68209: ST_TO_ADDR
// result := true ;
68210: LD_ADDR_VAR 0 4
68214: PUSH
68215: LD_INT 1
68217: ST_TO_ADDR
// end ;
68218: LD_VAR 0 4
68222: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68223: LD_INT 0
68225: PPUSH
68226: PPUSH
68227: PPUSH
// if not unit in minersList then
68228: LD_VAR 0 1
68232: PUSH
68233: LD_EXP 127
68237: IN
68238: NOT
68239: IFFALSE 68243
// exit ;
68241: GO 68635
// index := GetElementIndex ( minersList , unit ) ;
68243: LD_ADDR_VAR 0 6
68247: PUSH
68248: LD_EXP 127
68252: PPUSH
68253: LD_VAR 0 1
68257: PPUSH
68258: CALL 12871 0 2
68262: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68263: LD_ADDR_VAR 0 5
68267: PUSH
68268: DOUBLE
68269: LD_EXP 128
68273: PUSH
68274: LD_VAR 0 6
68278: ARRAY
68279: INC
68280: ST_TO_ADDR
68281: LD_INT 1
68283: PUSH
68284: FOR_DOWNTO
68285: IFFALSE 68446
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68287: LD_EXP 128
68291: PUSH
68292: LD_VAR 0 6
68296: ARRAY
68297: PUSH
68298: LD_VAR 0 5
68302: ARRAY
68303: PUSH
68304: LD_INT 1
68306: ARRAY
68307: PUSH
68308: LD_VAR 0 2
68312: EQUAL
68313: PUSH
68314: LD_EXP 128
68318: PUSH
68319: LD_VAR 0 6
68323: ARRAY
68324: PUSH
68325: LD_VAR 0 5
68329: ARRAY
68330: PUSH
68331: LD_INT 2
68333: ARRAY
68334: PUSH
68335: LD_VAR 0 3
68339: EQUAL
68340: AND
68341: IFFALSE 68444
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68343: LD_EXP 128
68347: PUSH
68348: LD_VAR 0 6
68352: ARRAY
68353: PUSH
68354: LD_VAR 0 5
68358: ARRAY
68359: PUSH
68360: LD_INT 1
68362: ARRAY
68363: PPUSH
68364: LD_EXP 128
68368: PUSH
68369: LD_VAR 0 6
68373: ARRAY
68374: PUSH
68375: LD_VAR 0 5
68379: ARRAY
68380: PUSH
68381: LD_INT 2
68383: ARRAY
68384: PPUSH
68385: LD_VAR 0 1
68389: PPUSH
68390: CALL_OW 255
68394: PPUSH
68395: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68399: LD_ADDR_EXP 128
68403: PUSH
68404: LD_EXP 128
68408: PPUSH
68409: LD_VAR 0 6
68413: PPUSH
68414: LD_EXP 128
68418: PUSH
68419: LD_VAR 0 6
68423: ARRAY
68424: PPUSH
68425: LD_VAR 0 5
68429: PPUSH
68430: CALL_OW 3
68434: PPUSH
68435: CALL_OW 1
68439: ST_TO_ADDR
// exit ;
68440: POP
68441: POP
68442: GO 68635
// end ; end ;
68444: GO 68284
68446: POP
68447: POP
// for i := minerMinesList [ index ] downto 1 do
68448: LD_ADDR_VAR 0 5
68452: PUSH
68453: DOUBLE
68454: LD_EXP 128
68458: PUSH
68459: LD_VAR 0 6
68463: ARRAY
68464: INC
68465: ST_TO_ADDR
68466: LD_INT 1
68468: PUSH
68469: FOR_DOWNTO
68470: IFFALSE 68633
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68472: LD_EXP 128
68476: PUSH
68477: LD_VAR 0 6
68481: ARRAY
68482: PUSH
68483: LD_VAR 0 5
68487: ARRAY
68488: PUSH
68489: LD_INT 1
68491: ARRAY
68492: PPUSH
68493: LD_EXP 128
68497: PUSH
68498: LD_VAR 0 6
68502: ARRAY
68503: PUSH
68504: LD_VAR 0 5
68508: ARRAY
68509: PUSH
68510: LD_INT 2
68512: ARRAY
68513: PPUSH
68514: LD_VAR 0 2
68518: PPUSH
68519: LD_VAR 0 3
68523: PPUSH
68524: CALL_OW 298
68528: PUSH
68529: LD_INT 6
68531: LESS
68532: IFFALSE 68631
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68534: LD_EXP 128
68538: PUSH
68539: LD_VAR 0 6
68543: ARRAY
68544: PUSH
68545: LD_VAR 0 5
68549: ARRAY
68550: PUSH
68551: LD_INT 1
68553: ARRAY
68554: PPUSH
68555: LD_EXP 128
68559: PUSH
68560: LD_VAR 0 6
68564: ARRAY
68565: PUSH
68566: LD_VAR 0 5
68570: ARRAY
68571: PUSH
68572: LD_INT 2
68574: ARRAY
68575: PPUSH
68576: LD_VAR 0 1
68580: PPUSH
68581: CALL_OW 255
68585: PPUSH
68586: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68590: LD_ADDR_EXP 128
68594: PUSH
68595: LD_EXP 128
68599: PPUSH
68600: LD_VAR 0 6
68604: PPUSH
68605: LD_EXP 128
68609: PUSH
68610: LD_VAR 0 6
68614: ARRAY
68615: PPUSH
68616: LD_VAR 0 5
68620: PPUSH
68621: CALL_OW 3
68625: PPUSH
68626: CALL_OW 1
68630: ST_TO_ADDR
// end ; end ;
68631: GO 68469
68633: POP
68634: POP
// end ;
68635: LD_VAR 0 4
68639: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68640: LD_INT 0
68642: PPUSH
68643: PPUSH
68644: PPUSH
68645: PPUSH
68646: PPUSH
68647: PPUSH
68648: PPUSH
68649: PPUSH
68650: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68651: LD_VAR 0 1
68655: PPUSH
68656: CALL_OW 264
68660: PUSH
68661: LD_EXP 48
68665: EQUAL
68666: NOT
68667: PUSH
68668: LD_VAR 0 1
68672: PUSH
68673: LD_EXP 127
68677: IN
68678: NOT
68679: OR
68680: IFFALSE 68684
// exit ;
68682: GO 69006
// index := GetElementIndex ( minersList , unit ) ;
68684: LD_ADDR_VAR 0 6
68688: PUSH
68689: LD_EXP 127
68693: PPUSH
68694: LD_VAR 0 1
68698: PPUSH
68699: CALL 12871 0 2
68703: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68704: LD_ADDR_VAR 0 8
68708: PUSH
68709: LD_EXP 129
68713: PUSH
68714: LD_EXP 128
68718: PUSH
68719: LD_VAR 0 6
68723: ARRAY
68724: MINUS
68725: ST_TO_ADDR
// if not minesFreeAmount then
68726: LD_VAR 0 8
68730: NOT
68731: IFFALSE 68735
// exit ;
68733: GO 69006
// tmp := [ ] ;
68735: LD_ADDR_VAR 0 7
68739: PUSH
68740: EMPTY
68741: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68742: LD_ADDR_VAR 0 5
68746: PUSH
68747: DOUBLE
68748: LD_INT 1
68750: DEC
68751: ST_TO_ADDR
68752: LD_VAR 0 8
68756: PUSH
68757: FOR_TO
68758: IFFALSE 68953
// begin _d := rand ( 0 , 5 ) ;
68760: LD_ADDR_VAR 0 11
68764: PUSH
68765: LD_INT 0
68767: PPUSH
68768: LD_INT 5
68770: PPUSH
68771: CALL_OW 12
68775: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68776: LD_ADDR_VAR 0 12
68780: PUSH
68781: LD_INT 2
68783: PPUSH
68784: LD_INT 6
68786: PPUSH
68787: CALL_OW 12
68791: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68792: LD_ADDR_VAR 0 9
68796: PUSH
68797: LD_VAR 0 2
68801: PPUSH
68802: LD_VAR 0 11
68806: PPUSH
68807: LD_VAR 0 12
68811: PPUSH
68812: CALL_OW 272
68816: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68817: LD_ADDR_VAR 0 10
68821: PUSH
68822: LD_VAR 0 3
68826: PPUSH
68827: LD_VAR 0 11
68831: PPUSH
68832: LD_VAR 0 12
68836: PPUSH
68837: CALL_OW 273
68841: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68842: LD_VAR 0 9
68846: PPUSH
68847: LD_VAR 0 10
68851: PPUSH
68852: CALL_OW 488
68856: PUSH
68857: LD_VAR 0 9
68861: PUSH
68862: LD_VAR 0 10
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_VAR 0 7
68875: IN
68876: NOT
68877: AND
68878: PUSH
68879: LD_VAR 0 9
68883: PPUSH
68884: LD_VAR 0 10
68888: PPUSH
68889: CALL_OW 458
68893: NOT
68894: AND
68895: IFFALSE 68937
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68897: LD_ADDR_VAR 0 7
68901: PUSH
68902: LD_VAR 0 7
68906: PPUSH
68907: LD_VAR 0 7
68911: PUSH
68912: LD_INT 1
68914: PLUS
68915: PPUSH
68916: LD_VAR 0 9
68920: PUSH
68921: LD_VAR 0 10
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PPUSH
68930: CALL_OW 1
68934: ST_TO_ADDR
68935: GO 68951
// i := i - 1 ;
68937: LD_ADDR_VAR 0 5
68941: PUSH
68942: LD_VAR 0 5
68946: PUSH
68947: LD_INT 1
68949: MINUS
68950: ST_TO_ADDR
// end ;
68951: GO 68757
68953: POP
68954: POP
// for i in tmp do
68955: LD_ADDR_VAR 0 5
68959: PUSH
68960: LD_VAR 0 7
68964: PUSH
68965: FOR_IN
68966: IFFALSE 69004
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68968: LD_VAR 0 1
68972: PPUSH
68973: LD_VAR 0 5
68977: PUSH
68978: LD_INT 1
68980: ARRAY
68981: PPUSH
68982: LD_VAR 0 5
68986: PUSH
68987: LD_INT 2
68989: ARRAY
68990: PPUSH
68991: CALL 67946 0 3
68995: NOT
68996: IFFALSE 69002
// exit ;
68998: POP
68999: POP
69000: GO 69006
69002: GO 68965
69004: POP
69005: POP
// end ;
69006: LD_VAR 0 4
69010: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69011: LD_INT 0
69013: PPUSH
69014: PPUSH
69015: PPUSH
69016: PPUSH
69017: PPUSH
69018: PPUSH
69019: PPUSH
// if not GetClass ( unit ) = class_sniper then
69020: LD_VAR 0 1
69024: PPUSH
69025: CALL_OW 257
69029: PUSH
69030: LD_INT 5
69032: EQUAL
69033: NOT
69034: IFFALSE 69038
// exit ;
69036: GO 69426
// dist := 8 ;
69038: LD_ADDR_VAR 0 5
69042: PUSH
69043: LD_INT 8
69045: ST_TO_ADDR
// viewRange := 12 ;
69046: LD_ADDR_VAR 0 7
69050: PUSH
69051: LD_INT 12
69053: ST_TO_ADDR
// side := GetSide ( unit ) ;
69054: LD_ADDR_VAR 0 6
69058: PUSH
69059: LD_VAR 0 1
69063: PPUSH
69064: CALL_OW 255
69068: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69069: LD_INT 61
69071: PPUSH
69072: LD_VAR 0 6
69076: PPUSH
69077: CALL_OW 321
69081: PUSH
69082: LD_INT 2
69084: EQUAL
69085: IFFALSE 69095
// viewRange := 16 ;
69087: LD_ADDR_VAR 0 7
69091: PUSH
69092: LD_INT 16
69094: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69095: LD_VAR 0 1
69099: PPUSH
69100: LD_VAR 0 2
69104: PPUSH
69105: LD_VAR 0 3
69109: PPUSH
69110: CALL_OW 297
69114: PUSH
69115: LD_VAR 0 5
69119: GREATER
69120: IFFALSE 69199
// begin ComMoveXY ( unit , x , y ) ;
69122: LD_VAR 0 1
69126: PPUSH
69127: LD_VAR 0 2
69131: PPUSH
69132: LD_VAR 0 3
69136: PPUSH
69137: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69141: LD_INT 35
69143: PPUSH
69144: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69148: LD_VAR 0 1
69152: PPUSH
69153: LD_VAR 0 2
69157: PPUSH
69158: LD_VAR 0 3
69162: PPUSH
69163: CALL 44140 0 3
69167: NOT
69168: IFFALSE 69172
// exit ;
69170: GO 69426
// until GetDistUnitXY ( unit , x , y ) < dist ;
69172: LD_VAR 0 1
69176: PPUSH
69177: LD_VAR 0 2
69181: PPUSH
69182: LD_VAR 0 3
69186: PPUSH
69187: CALL_OW 297
69191: PUSH
69192: LD_VAR 0 5
69196: LESS
69197: IFFALSE 69141
// end ; ComTurnXY ( unit , x , y ) ;
69199: LD_VAR 0 1
69203: PPUSH
69204: LD_VAR 0 2
69208: PPUSH
69209: LD_VAR 0 3
69213: PPUSH
69214: CALL_OW 118
// wait ( 5 ) ;
69218: LD_INT 5
69220: PPUSH
69221: CALL_OW 67
// _d := GetDir ( unit ) ;
69225: LD_ADDR_VAR 0 10
69229: PUSH
69230: LD_VAR 0 1
69234: PPUSH
69235: CALL_OW 254
69239: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69240: LD_ADDR_VAR 0 8
69244: PUSH
69245: LD_VAR 0 1
69249: PPUSH
69250: CALL_OW 250
69254: PPUSH
69255: LD_VAR 0 10
69259: PPUSH
69260: LD_VAR 0 5
69264: PPUSH
69265: CALL_OW 272
69269: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69270: LD_ADDR_VAR 0 9
69274: PUSH
69275: LD_VAR 0 1
69279: PPUSH
69280: CALL_OW 251
69284: PPUSH
69285: LD_VAR 0 10
69289: PPUSH
69290: LD_VAR 0 5
69294: PPUSH
69295: CALL_OW 273
69299: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69300: LD_VAR 0 8
69304: PPUSH
69305: LD_VAR 0 9
69309: PPUSH
69310: CALL_OW 488
69314: NOT
69315: IFFALSE 69319
// exit ;
69317: GO 69426
// ComAnimCustom ( unit , 1 ) ;
69319: LD_VAR 0 1
69323: PPUSH
69324: LD_INT 1
69326: PPUSH
69327: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69331: LD_VAR 0 8
69335: PPUSH
69336: LD_VAR 0 9
69340: PPUSH
69341: LD_VAR 0 6
69345: PPUSH
69346: LD_VAR 0 7
69350: PPUSH
69351: CALL_OW 330
// repeat wait ( 1 ) ;
69355: LD_INT 1
69357: PPUSH
69358: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69362: LD_VAR 0 1
69366: PPUSH
69367: CALL_OW 316
69371: PUSH
69372: LD_VAR 0 1
69376: PPUSH
69377: CALL_OW 314
69381: OR
69382: PUSH
69383: LD_VAR 0 1
69387: PPUSH
69388: CALL_OW 302
69392: NOT
69393: OR
69394: PUSH
69395: LD_VAR 0 1
69399: PPUSH
69400: CALL_OW 301
69404: OR
69405: IFFALSE 69355
// RemoveSeeing ( _x , _y , side ) ;
69407: LD_VAR 0 8
69411: PPUSH
69412: LD_VAR 0 9
69416: PPUSH
69417: LD_VAR 0 6
69421: PPUSH
69422: CALL_OW 331
// end ;
69426: LD_VAR 0 4
69430: RET
