// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// InitEvents ;
   8: CALL 150 0 0
// PrepareRussian ;
  12: CALL 744 0 0
// PrepareArabian ;
  16: CALL 174 0 0
// Action ;
  20: CALL 1402 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// end ;
  37: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// hasNormalScene := false ;
  49: LD_ADDR_EXP 5
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// prefix := 07_ ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_STRING 07_
  64: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_STRING 01_JohnnySaved
  72: PPUSH
  73: LD_INT 0
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// hasVodka := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  89: LD_ADDR_EXP 7
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// hasStimDrugs := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// hasExplosions := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanContact := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// hasSniperRifle := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasScout := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// hasMethanol := false ;
 137: LD_ADDR_EXP 12
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// end ;
 145: LD_VAR 0 1
 149: RET
// export eventCenterCamOnHeike , eventShowPlace ; function InitEvents ; begin
 150: LD_INT 0
 152: PPUSH
// eventCenterCamOnHeike := 1 ;
 153: LD_ADDR_EXP 13
 157: PUSH
 158: LD_INT 1
 160: ST_TO_ADDR
// eventShowPlace := 1 ;
 161: LD_ADDR_EXP 14
 165: PUSH
 166: LD_INT 1
 168: ST_TO_ADDR
// end ; end_of_file
 169: LD_VAR 0 1
 173: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// uc_side := 4 ;
 178: LD_ADDR_OWVAR 20
 182: PUSH
 183: LD_INT 4
 185: ST_TO_ADDR
// uc_nation := 1 ;
 186: LD_ADDR_OWVAR 21
 190: PUSH
 191: LD_INT 1
 193: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 194: LD_ADDR_EXP 27
 198: PUSH
 199: LD_STRING 07_Americans
 201: PPUSH
 202: CALL_OW 31
 206: ST_TO_ADDR
// if americanSquad < 5 then
 207: LD_EXP 27
 211: PUSH
 212: LD_INT 5
 214: LESS
 215: IFFALSE 272
// begin for i := americanSquad to 5 do
 217: LD_ADDR_VAR 0 2
 221: PUSH
 222: DOUBLE
 223: LD_EXP 27
 227: DEC
 228: ST_TO_ADDR
 229: LD_INT 5
 231: PUSH
 232: FOR_TO
 233: IFFALSE 270
// begin PrepareHuman ( false , 2 , 6 ) ;
 235: LD_INT 0
 237: PPUSH
 238: LD_INT 2
 240: PPUSH
 241: LD_INT 6
 243: PPUSH
 244: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 248: LD_ADDR_EXP 27
 252: PUSH
 253: LD_EXP 27
 257: PPUSH
 258: CALL_OW 44
 262: PPUSH
 263: CALL 41760 0 2
 267: ST_TO_ADDR
// end ;
 268: GO 232
 270: POP
 271: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 272: LD_ADDR_EXP 29
 276: PUSH
 277: LD_STRING UsCommander
 279: PPUSH
 280: LD_EXP 1
 284: NOT
 285: PPUSH
 286: LD_STRING 07_
 288: PPUSH
 289: CALL 4376 0 3
 293: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Doug ) ;
 294: LD_ADDR_EXP 27
 298: PUSH
 299: LD_EXP 27
 303: PPUSH
 304: LD_EXP 29
 308: PPUSH
 309: CALL 41760 0 2
 313: ST_TO_ADDR
// if johnnySaved or debug then
 314: LD_EXP 3
 318: PUSH
 319: LD_EXP 1
 323: OR
 324: IFFALSE 359
// begin Harris := NewCharacter ( Harris ) ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_STRING Harris
 333: PPUSH
 334: CALL_OW 25
 338: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Harris ) ;
 339: LD_ADDR_EXP 27
 343: PUSH
 344: LD_EXP 27
 348: PPUSH
 349: LD_EXP 28
 353: PPUSH
 354: CALL 41760 0 2
 358: ST_TO_ADDR
// end ; uc_side := 2 ;
 359: LD_ADDR_OWVAR 20
 363: PUSH
 364: LD_INT 2
 366: ST_TO_ADDR
// uc_nation := 2 ;
 367: LD_ADDR_OWVAR 21
 371: PUSH
 372: LD_INT 2
 374: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 375: LD_ADDR_EXP 15
 379: PUSH
 380: LD_STRING Heike
 382: PPUSH
 383: LD_EXP 1
 387: NOT
 388: PPUSH
 389: LD_EXP 2
 393: PPUSH
 394: CALL 4376 0 3
 398: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 399: LD_ADDR_EXP 18
 403: PUSH
 404: LD_STRING Ibrahim
 406: PPUSH
 407: LD_EXP 1
 411: NOT
 412: PPUSH
 413: LD_EXP 2
 417: PPUSH
 418: CALL 4376 0 3
 422: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 423: LD_ADDR_EXP 16
 427: PUSH
 428: LD_STRING Givi
 430: PPUSH
 431: LD_EXP 1
 435: NOT
 436: PPUSH
 437: LD_EXP 2
 441: PPUSH
 442: CALL 4376 0 3
 446: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 447: LD_ADDR_EXP 19
 451: PUSH
 452: LD_STRING Kamil
 454: PPUSH
 455: LD_EXP 1
 459: NOT
 460: PPUSH
 461: LD_EXP 2
 465: PPUSH
 466: CALL 4376 0 3
 470: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 471: LD_ADDR_EXP 20
 475: PUSH
 476: LD_STRING Kaia
 478: PPUSH
 479: LD_EXP 1
 483: NOT
 484: PPUSH
 485: LD_EXP 2
 489: PPUSH
 490: CALL 4376 0 3
 494: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 495: LD_ADDR_EXP 21
 499: PUSH
 500: LD_STRING Sophia
 502: PPUSH
 503: LD_EXP 1
 507: NOT
 508: PPUSH
 509: LD_EXP 2
 513: PPUSH
 514: CALL 4376 0 3
 518: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 519: LD_ADDR_EXP 22
 523: PUSH
 524: LD_STRING Markov
 526: PPUSH
 527: LD_EXP 1
 531: NOT
 532: PPUSH
 533: LD_EXP 2
 537: PPUSH
 538: CALL 4376 0 3
 542: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 543: LD_ADDR_EXP 25
 547: PUSH
 548: LD_STRING Aviradze
 550: PPUSH
 551: LD_EXP 1
 555: NOT
 556: PPUSH
 557: LD_EXP 2
 561: PPUSH
 562: CALL 4376 0 3
 566: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 567: LD_ADDR_EXP 24
 571: PUSH
 572: LD_STRING Kurt
 574: PPUSH
 575: LD_EXP 1
 579: NOT
 580: PPUSH
 581: LD_EXP 2
 585: PPUSH
 586: CALL 4376 0 3
 590: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 591: LD_ADDR_EXP 17
 595: PUSH
 596: LD_STRING Mike
 598: PPUSH
 599: LD_EXP 1
 603: NOT
 604: PPUSH
 605: LD_EXP 2
 609: PPUSH
 610: CALL 4376 0 3
 614: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 615: LD_ADDR_EXP 23
 619: PUSH
 620: LD_STRING Olaf
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: LD_STRING 
 628: PPUSH
 629: CALL 4376 0 3
 633: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 634: LD_ADDR_EXP 26
 638: PUSH
 639: LD_STRING 07_others
 641: PPUSH
 642: CALL_OW 31
 646: ST_TO_ADDR
// end ;
 647: LD_VAR 0 1
 651: RET
// export function PrepareGame ; begin
 652: LD_INT 0
 654: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 655: LD_EXP 15
 659: PPUSH
 660: LD_INT 23
 662: PPUSH
 663: CALL_OW 52
// if Givi then
 667: LD_EXP 16
 671: IFFALSE 709
// begin SetSide ( Givi , 5 ) ;
 673: LD_EXP 16
 677: PPUSH
 678: LD_INT 5
 680: PPUSH
 681: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 685: LD_EXP 16
 689: PPUSH
 690: LD_INT 9
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// ComHold ( Givi ) ;
 700: LD_EXP 16
 704: PPUSH
 705: CALL_OW 140
// end ; if Markov then
 709: LD_EXP 22
 713: IFFALSE 739
// begin SetSide ( Markov , 5 ) ;
 715: LD_EXP 22
 719: PPUSH
 720: LD_INT 5
 722: PPUSH
 723: CALL_OW 235
// PlaceHumanInUnit ( Markov , ruFac ) ;
 727: LD_EXP 22
 731: PPUSH
 732: LD_INT 61
 734: PPUSH
 735: CALL_OW 52
// end ; end ; end_of_file
 739: LD_VAR 0 1
 743: RET
// export russianKillers ; export function PrepareRussian ; var i , tmp ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
 748: PPUSH
// uc_side := 3 ;
 749: LD_ADDR_OWVAR 20
 753: PUSH
 754: LD_INT 3
 756: ST_TO_ADDR
// uc_nation := 3 ;
 757: LD_ADDR_OWVAR 21
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 765: LD_ADDR_VAR 0 2
 769: PUSH
 770: LD_INT 21
 772: PUSH
 773: LD_INT 3
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: PPUSH
 780: CALL_OW 69
 784: PUSH
 785: FOR_IN
 786: IFFALSE 802
// SetBLevel ( i , 7 ) ;
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 7
 795: PPUSH
 796: CALL_OW 241
 800: GO 785
 802: POP
 803: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 804: LD_ADDR_VAR 0 2
 808: PUSH
 809: LD_INT 22
 811: PUSH
 812: LD_INT 3
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: LD_INT 2
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 0
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 30
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PPUSH
 851: CALL_OW 69
 855: PUSH
 856: FOR_IN
 857: IFFALSE 901
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
 859: LD_VAR 0 2
 863: PPUSH
 864: CALL_OW 274
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_INT 1000
 874: PPUSH
 875: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
 879: LD_VAR 0 2
 883: PPUSH
 884: CALL_OW 274
 888: PPUSH
 889: LD_INT 2
 891: PPUSH
 892: LD_INT 1000
 894: PPUSH
 895: CALL_OW 277
// end ;
 899: GO 856
 901: POP
 902: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
 903: LD_ADDR_VAR 0 2
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PUSH
 918: LD_INT 30
 920: PUSH
 921: LD_INT 32
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PPUSH
 932: CALL_OW 69
 936: PUSH
 937: FOR_IN
 938: IFFALSE 972
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
 940: LD_INT 0
 942: PPUSH
 943: LD_INT 5
 945: PUSH
 946: LD_OWVAR 67
 950: PLUS
 951: PPUSH
 952: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 956: CALL_OW 44
 960: PPUSH
 961: LD_VAR 0 2
 965: PPUSH
 966: CALL_OW 52
// end ;
 970: GO 937
 972: POP
 973: POP
// end ;
 974: LD_VAR 0 1
 978: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
 979: LD_INT 0
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
// uc_side := 3 ;
 985: LD_ADDR_OWVAR 20
 989: PUSH
 990: LD_INT 3
 992: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
 993: LD_ADDR_OWVAR 21
 997: PUSH
 998: LD_INT 1
1000: PPUSH
1001: LD_INT 3
1003: PPUSH
1004: CALL_OW 12
1008: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
1009: LD_ADDR_VAR 0 4
1013: PUSH
1014: LD_INT 5
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL_OW 517
1024: ST_TO_ADDR
// for i := 1 to 3 do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_INT 3
1037: PUSH
1038: FOR_TO
1039: IFFALSE 1108
// begin PrepareHuman ( false , 33 , 0 ) ;
1041: LD_INT 0
1043: PPUSH
1044: LD_INT 33
1046: PPUSH
1047: LD_INT 0
1049: PPUSH
1050: CALL_OW 380
// un := CreateHuman ;
1054: LD_ADDR_VAR 0 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
1064: LD_VAR 0 3
1068: PPUSH
1069: LD_VAR 0 4
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PUSH
1078: LD_VAR 0 2
1082: ARRAY
1083: PPUSH
1084: LD_VAR 0 4
1088: PUSH
1089: LD_INT 2
1091: ARRAY
1092: PUSH
1093: LD_VAR 0 2
1097: ARRAY
1098: PPUSH
1099: LD_INT 1
1101: PPUSH
1102: CALL_OW 601
// end ;
1106: GO 1038
1108: POP
1109: POP
// end ;
1110: LD_VAR 0 1
1114: RET
// export function PrepareFirstScene ; var i , un ; begin
1115: LD_INT 0
1117: PPUSH
1118: PPUSH
1119: PPUSH
// uc_side := 4 ;
1120: LD_ADDR_OWVAR 20
1124: PUSH
1125: LD_INT 4
1127: ST_TO_ADDR
// uc_nation := 1 ;
1128: LD_ADDR_OWVAR 21
1132: PUSH
1133: LD_INT 1
1135: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
1136: LD_INT 0
1138: PPUSH
1139: LD_INT 33
1141: PPUSH
1142: LD_INT 0
1144: PPUSH
1145: CALL_OW 380
// for i := 1 to 2 do
1149: LD_ADDR_VAR 0 2
1153: PUSH
1154: DOUBLE
1155: LD_INT 1
1157: DEC
1158: ST_TO_ADDR
1159: LD_INT 2
1161: PUSH
1162: FOR_TO
1163: IFFALSE 1228
// begin un := CreateHuman ;
1165: LD_ADDR_VAR 0 3
1169: PUSH
1170: CALL_OW 44
1174: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1175: LD_VAR 0 3
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
1187: LD_VAR 0 3
1191: PPUSH
1192: LD_INT 6
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
1202: LD_VAR 0 3
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: CALL 44916 0 2
// SetLives ( un , 300 ) ;
1214: LD_VAR 0 3
1218: PPUSH
1219: LD_INT 300
1221: PPUSH
1222: CALL_OW 234
// end ;
1226: GO 1162
1228: POP
1229: POP
// uc_side := 3 ;
1230: LD_ADDR_OWVAR 20
1234: PUSH
1235: LD_INT 3
1237: ST_TO_ADDR
// uc_nation := 3 ;
1238: LD_ADDR_OWVAR 21
1242: PUSH
1243: LD_INT 3
1245: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_INT 5
1251: PPUSH
1252: CALL_OW 381
// for i := 1 to 3 do
1256: LD_ADDR_VAR 0 2
1260: PUSH
1261: DOUBLE
1262: LD_INT 1
1264: DEC
1265: ST_TO_ADDR
1266: LD_INT 3
1268: PUSH
1269: FOR_TO
1270: IFFALSE 1343
// begin un := CreateHuman ;
1272: LD_ADDR_VAR 0 3
1276: PUSH
1277: CALL_OW 44
1281: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
1282: LD_ADDR_EXP 30
1286: PUSH
1287: LD_EXP 30
1291: PPUSH
1292: LD_VAR 0 3
1296: PPUSH
1297: CALL 41760 0 2
1301: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1302: LD_VAR 0 3
1306: PPUSH
1307: LD_INT 4
1309: PPUSH
1310: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
1314: LD_VAR 0 3
1318: PPUSH
1319: LD_INT 7
1321: PPUSH
1322: LD_INT 0
1324: PPUSH
1325: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
1329: LD_VAR 0 3
1333: PPUSH
1334: LD_INT 4
1336: PPUSH
1337: CALL 44916 0 2
// end ;
1341: GO 1269
1343: POP
1344: POP
// un := CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 37 , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 124
1362: PPUSH
1363: LD_INT 37
1365: PPUSH
1366: LD_INT 0
1368: PPUSH
1369: CALL_OW 48
// SetDir ( un , 3 ) ;
1373: LD_VAR 0 3
1377: PPUSH
1378: LD_INT 3
1380: PPUSH
1381: CALL_OW 233
// ComLookAtDir ( un , 3 ) ;
1385: LD_VAR 0 3
1389: PPUSH
1390: LD_INT 3
1392: PPUSH
1393: CALL 44916 0 2
// end ; end_of_file
1397: LD_VAR 0 1
1401: RET
// export function Action ; var speaker , i , tmp ; begin
1402: LD_INT 0
1404: PPUSH
1405: PPUSH
1406: PPUSH
1407: PPUSH
// Video ( true ) ;
1408: LD_INT 1
1410: PPUSH
1411: CALL 41732 0 1
// hasNormalScene := Kaia or Givi ;
1415: LD_ADDR_EXP 5
1419: PUSH
1420: LD_EXP 20
1424: PUSH
1425: LD_EXP 16
1429: OR
1430: ST_TO_ADDR
// if hasNormalScene then
1431: LD_EXP 5
1435: IFFALSE 1670
// begin for i in americanSquad do
1437: LD_ADDR_VAR 0 3
1441: PUSH
1442: LD_EXP 27
1446: PUSH
1447: FOR_IN
1448: IFFALSE 1494
// begin SetClass ( i , 33 ) ;
1450: LD_VAR 0 3
1454: PPUSH
1455: LD_INT 33
1457: PPUSH
1458: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
1462: LD_VAR 0 3
1466: PPUSH
1467: LD_INT 78
1469: PPUSH
1470: LD_INT 16
1472: PPUSH
1473: LD_INT 5
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 50
// ComHold ( i ) ;
1483: LD_VAR 0 3
1487: PPUSH
1488: CALL_OW 140
// end ;
1492: GO 1447
1494: POP
1495: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
1496: LD_ADDR_VAR 0 4
1500: PUSH
1501: LD_EXP 17
1505: PUSH
1506: LD_EXP 18
1510: PUSH
1511: LD_EXP 19
1515: PUSH
1516: LD_EXP 20
1520: PUSH
1521: LD_EXP 21
1525: PUSH
1526: LD_EXP 22
1530: PUSH
1531: LD_EXP 23
1535: PUSH
1536: LD_EXP 24
1540: PUSH
1541: LD_EXP 16
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: PUSH
1557: LD_EXP 26
1561: UNION
1562: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
1563: LD_EXP 15
1567: PPUSH
1568: LD_INT 33
1570: PPUSH
1571: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
1575: LD_EXP 15
1579: PPUSH
1580: LD_INT 117
1582: PPUSH
1583: LD_INT 24
1585: PPUSH
1586: LD_INT 3
1588: PPUSH
1589: LD_INT 0
1591: PPUSH
1592: CALL 43902 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
1596: LD_EXP 15
1600: PPUSH
1601: LD_INT 123
1603: PPUSH
1604: LD_INT 39
1606: PPUSH
1607: CALL_OW 118
// for i in tmp do
1611: LD_ADDR_VAR 0 3
1615: PUSH
1616: LD_VAR 0 4
1620: PUSH
1621: FOR_IN
1622: IFFALSE 1668
// begin SetClass ( i , 33 ) ;
1624: LD_VAR 0 3
1628: PPUSH
1629: LD_INT 33
1631: PPUSH
1632: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: LD_INT 3
1643: PPUSH
1644: LD_INT 0
1646: PPUSH
1647: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
1651: LD_VAR 0 3
1655: PPUSH
1656: LD_INT 113
1658: PPUSH
1659: LD_INT 16
1661: PPUSH
1662: CALL_OW 118
// end ;
1666: GO 1621
1668: POP
1669: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
1670: LD_INT 124
1672: PPUSH
1673: LD_INT 39
1675: PPUSH
1676: CALL_OW 86
// PrepareDeadBodies ;
1680: CALL 979 0 0
// PrepareFirstScene ;
1684: CALL 1115 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
1688: LD_INT 152
1690: PPUSH
1691: LD_INT 65
1693: PPUSH
1694: LD_INT 2
1696: PPUSH
1697: LD_INT 70
1699: NEG
1700: PPUSH
1701: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
1705: LD_INT 152
1707: PPUSH
1708: LD_INT 65
1710: PPUSH
1711: LD_INT 2
1713: PPUSH
1714: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
1718: LD_INT 122
1720: PPUSH
1721: LD_INT 40
1723: PPUSH
1724: LD_INT 2
1726: PPUSH
1727: LD_INT 8
1729: NEG
1730: PPUSH
1731: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
1735: LD_INT 124
1737: PPUSH
1738: LD_INT 37
1740: PPUSH
1741: CALL_OW 86
// speaker := HexInfo ( 124 , 37 ) ;
1745: LD_ADDR_VAR 0 2
1749: PUSH
1750: LD_INT 124
1752: PPUSH
1753: LD_INT 37
1755: PPUSH
1756: CALL_OW 428
1760: ST_TO_ADDR
// Say ( speaker , DRum-Execution-1 ) ;
1761: LD_VAR 0 2
1765: PPUSH
1766: LD_STRING DRum-Execution-1
1768: PPUSH
1769: CALL_OW 88
// Say ( speaker , DRum-Execution-2 ) ;
1773: LD_VAR 0 2
1777: PPUSH
1778: LD_STRING DRum-Execution-2
1780: PPUSH
1781: CALL_OW 88
// wait ( 0 0$01 ) ;
1785: LD_INT 35
1787: PPUSH
1788: CALL_OW 67
// Say ( speaker , DRum-Execution-3 ) ;
1792: LD_VAR 0 2
1796: PPUSH
1797: LD_STRING DRum-Execution-3
1799: PPUSH
1800: CALL_OW 88
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// Say ( speaker , DRum-Execution-4 ) ;
1811: LD_VAR 0 2
1815: PPUSH
1816: LD_STRING DRum-Execution-4
1818: PPUSH
1819: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
1823: LD_EXP 30
1827: PUSH
1828: LD_INT 1
1830: ARRAY
1831: PPUSH
1832: LD_INT 122
1834: PPUSH
1835: LD_INT 39
1837: PPUSH
1838: CALL_OW 428
1842: PPUSH
1843: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
1847: LD_EXP 30
1851: PUSH
1852: LD_INT 2
1854: ARRAY
1855: PPUSH
1856: LD_INT 123
1858: PPUSH
1859: LD_INT 41
1861: PPUSH
1862: CALL_OW 428
1866: PPUSH
1867: CALL_OW 115
// AddComHold ( russianKillers ) ;
1871: LD_EXP 30
1875: PPUSH
1876: CALL_OW 200
// wait ( 0 0$1 ) ;
1880: LD_INT 35
1882: PPUSH
1883: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
1887: LD_INT 122
1889: PPUSH
1890: LD_INT 40
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL_OW 331
// if hasNormalScene then
1900: LD_EXP 5
1904: IFFALSE 1912
// ActionNormal else
1906: CALL 1921 0 0
1910: GO 1916
// ActionAdditional ;
1912: CALL 3527 0 0
// end ;
1916: LD_VAR 0 1
1920: RET
// function ActionNormal ; var i , tmp ; begin
1921: LD_INT 0
1923: PPUSH
1924: PPUSH
1925: PPUSH
// CenterNowOnUnits ( Heike ) ;
1926: LD_EXP 15
1930: PPUSH
1931: CALL_OW 87
// wait ( 0 0$1 ) ;
1935: LD_INT 35
1937: PPUSH
1938: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
1942: LD_EXP 15
1946: PPUSH
1947: LD_INT 115
1949: PPUSH
1950: LD_INT 19
1952: PPUSH
1953: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
1957: LD_EXP 15
1961: PPUSH
1962: LD_INT 113
1964: PPUSH
1965: LD_INT 16
1967: PPUSH
1968: CALL_OW 178
// wait ( 0 0$2 ) ;
1972: LD_INT 70
1974: PPUSH
1975: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
1979: LD_EXP 15
1983: PPUSH
1984: LD_STRING DH-Conspiracy-1
1986: PPUSH
1987: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
1991: LD_EXP 20
1995: PPUSH
1996: LD_STRING DK-Conspiracy-2
1998: PPUSH
1999: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
2003: LD_EXP 16
2007: PPUSH
2008: LD_STRING DG-Conspiracy-3
2010: PPUSH
2011: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
2015: LD_EXP 16
2019: PPUSH
2020: LD_STRING DG-Conspiracy-4
2022: PPUSH
2023: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
2027: LD_EXP 15
2031: PPUSH
2032: LD_STRING DH-Conspiracy-5
2034: PPUSH
2035: CALL_OW 88
// if IsOk ( Kamil ) then
2039: LD_EXP 19
2043: PPUSH
2044: CALL_OW 302
2048: IFFALSE 2106
// begin hasVodka := true ;
2050: LD_ADDR_EXP 4
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
2058: LD_EXP 19
2062: PPUSH
2063: LD_STRING DKam-Conspiracy-6
2065: PPUSH
2066: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
2070: LD_EXP 19
2074: PPUSH
2075: LD_STRING DKam-Conspiracy-7
2077: PPUSH
2078: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
2082: LD_EXP 19
2086: PPUSH
2087: LD_STRING DKam-Conspiracy-8
2089: PPUSH
2090: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
2094: LD_EXP 19
2098: PPUSH
2099: LD_STRING DKam-Conspiracy-9
2101: PPUSH
2102: CALL_OW 88
// end ; if IsOk ( Sophia ) then
2106: LD_EXP 21
2110: PPUSH
2111: CALL_OW 302
2115: IFFALSE 2289
// begin americanContact := true ;
2117: LD_ADDR_EXP 9
2121: PUSH
2122: LD_INT 1
2124: ST_TO_ADDR
// Say ( Sophia , DS-Conspiracy-10 ) ;
2125: LD_EXP 21
2129: PPUSH
2130: LD_STRING DS-Conspiracy-10
2132: PPUSH
2133: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
2137: LD_EXP 22
2141: PPUSH
2142: LD_STRING DM-Conspiracy-11
2144: PPUSH
2145: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
2149: LD_EXP 21
2153: PPUSH
2154: LD_STRING DS-Conspiracy-12
2156: PPUSH
2157: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
2161: LD_INT 84
2163: PPUSH
2164: LD_INT 19
2166: PPUSH
2167: LD_INT 105
2169: PPUSH
2170: CALL 4177 0 3
// if johnnySaved then
2174: LD_EXP 3
2178: IFFALSE 2218
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
2180: LD_EXP 21
2184: PPUSH
2185: LD_STRING DS-Conspiracy-13
2187: PPUSH
2188: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
2192: LD_EXP 15
2196: PPUSH
2197: LD_STRING DH-Conspiracy-14
2199: PPUSH
2200: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
2204: LD_EXP 21
2208: PPUSH
2209: LD_STRING DH-Conspiracy-15
2211: PPUSH
2212: CALL_OW 88
// end else
2216: GO 2254
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
2218: LD_EXP 21
2222: PPUSH
2223: LD_STRING DS-Conspiracy-a-13
2225: PPUSH
2226: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
2230: LD_EXP 15
2234: PPUSH
2235: LD_STRING DH-Conspiracy-a-14
2237: PPUSH
2238: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
2242: LD_EXP 21
2246: PPUSH
2247: LD_STRING DH-Conspiracy-a-15
2249: PPUSH
2250: CALL_OW 88
// end ; if IsOk ( Givi ) then
2254: LD_EXP 16
2258: PPUSH
2259: CALL_OW 302
2263: IFFALSE 2289
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
2265: LD_EXP 16
2269: PPUSH
2270: LD_STRING DG-Conspiracy-a-16
2272: PPUSH
2273: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING DH-Conspiracy-a-17
2284: PPUSH
2285: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
2289: LD_EXP 15
2293: PPUSH
2294: LD_STRING DH-Conspiracy-16
2296: PPUSH
2297: CALL_OW 88
// if IsOk ( Givi ) then
2301: LD_EXP 16
2305: PPUSH
2306: CALL_OW 302
2310: IFFALSE 2568
// begin hasStimDrugs := true ;
2312: LD_ADDR_EXP 8
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// Say ( Givi , DG-Conspiracy-17 ) ;
2320: LD_EXP 16
2324: PPUSH
2325: LD_STRING DG-Conspiracy-17
2327: PPUSH
2328: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
2332: LD_INT 87
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
2342: LD_INT 184
2344: PPUSH
2345: LD_INT 95
2347: PPUSH
2348: LD_INT 105
2350: PPUSH
2351: CALL 4177 0 3
// SetSide ( drugsLab , 3 ) ;
2355: LD_INT 87
2357: PPUSH
2358: LD_INT 3
2360: PPUSH
2361: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
2365: LD_EXP 16
2369: PPUSH
2370: LD_STRING DG-Conspiracy-18
2372: PPUSH
2373: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
2377: LD_EXP 16
2381: PPUSH
2382: LD_STRING DG-Conspiracy-19
2384: PPUSH
2385: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
2389: LD_EXP 16
2393: PPUSH
2394: LD_STRING DG-Conspiracy-20
2396: PPUSH
2397: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
2401: LD_EXP 15
2405: PPUSH
2406: LD_STRING DH-Conspiracy-21
2408: PPUSH
2409: CALL_OW 88
// if IsOk ( Kaia ) then
2413: LD_EXP 20
2417: PPUSH
2418: CALL_OW 302
2422: IFFALSE 2489
// begin hasExplosions := true ;
2424: LD_ADDR_EXP 6
2428: PUSH
2429: LD_INT 1
2431: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-22 ) ;
2432: LD_EXP 20
2436: PPUSH
2437: LD_STRING DK-Conspiracy-22
2439: PPUSH
2440: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
2444: LD_INT 73
2446: PPUSH
2447: LD_INT 2
2449: PPUSH
2450: CALL_OW 235
// ShowPlace ( 166 , 104 , 0 0$3 ) ;
2454: LD_INT 166
2456: PPUSH
2457: LD_INT 104
2459: PPUSH
2460: LD_INT 105
2462: PPUSH
2463: CALL 4177 0 3
// SetSide ( barExplosion , 3 ) ;
2467: LD_INT 73
2469: PPUSH
2470: LD_INT 3
2472: PPUSH
2473: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
2477: LD_EXP 20
2481: PPUSH
2482: LD_STRING DK-Conspiracy-23
2484: PPUSH
2485: CALL_OW 88
// end ; if IsOk ( Olaf ) then
2489: LD_EXP 23
2493: PPUSH
2494: CALL_OW 302
2498: IFFALSE 2568
// begin hasExplosionsInFactory := true ;
2500: LD_ADDR_EXP 7
2504: PUSH
2505: LD_INT 1
2507: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
2508: LD_EXP 23
2512: PPUSH
2513: LD_STRING DO-Conspiracy-24
2515: PPUSH
2516: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
2520: LD_INT 175
2522: PPUSH
2523: LD_INT 54
2525: PPUSH
2526: LD_INT 70
2528: PPUSH
2529: CALL 4177 0 3
// if IsOk ( Markov ) then
2533: LD_EXP 22
2537: PPUSH
2538: CALL_OW 302
2542: IFFALSE 2568
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
2544: LD_EXP 22
2548: PPUSH
2549: LD_STRING DMar-Conspiracy-25
2551: PPUSH
2552: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
2556: LD_EXP 22
2560: PPUSH
2561: LD_STRING DMar-Conspiracy-26
2563: PPUSH
2564: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
2568: LD_EXP 24
2572: PPUSH
2573: CALL_OW 302
2577: PUSH
2578: LD_EXP 20
2582: PPUSH
2583: CALL_OW 302
2587: AND
2588: IFFALSE 3004
// begin hasSniperRifle := true ;
2590: LD_ADDR_EXP 10
2594: PUSH
2595: LD_INT 1
2597: ST_TO_ADDR
// Say ( Kurt , DKs-Conspiracy-27 ) ;
2598: LD_EXP 24
2602: PPUSH
2603: LD_STRING DKs-Conspiracy-27
2605: PPUSH
2606: CALL_OW 88
// if IsOk ( Givi ) then
2610: LD_EXP 16
2614: PPUSH
2615: CALL_OW 302
2619: IFFALSE 2635
// Say ( Givi , DG-Conspiracy-28 ) else
2621: LD_EXP 16
2625: PPUSH
2626: LD_STRING DG-Conspiracy-28
2628: PPUSH
2629: CALL_OW 88
2633: GO 2700
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
2635: LD_EXP 26
2639: PPUSH
2640: LD_INT 26
2642: PUSH
2643: LD_INT 1
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PPUSH
2650: CALL_OW 72
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: PPUSH
2659: LD_STRING DArm-Conspiracy-a-28
2661: PPUSH
2662: CALL_OW 88
2666: NOT
2667: IFFALSE 2700
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
2669: LD_EXP 26
2673: PPUSH
2674: LD_INT 26
2676: PUSH
2677: LD_INT 2
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 72
2688: PUSH
2689: LD_INT 1
2691: ARRAY
2692: PPUSH
2693: LD_STRING DArf-Conspiracy-a-28
2695: PPUSH
2696: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
2700: LD_EXP 24
2704: PPUSH
2705: LD_STRING DKs-Conspiracy-29
2707: PPUSH
2708: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-30 ) ;
2712: LD_EXP 24
2716: PPUSH
2717: LD_STRING DKs-Conspiracy-30
2719: PPUSH
2720: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
2724: LD_EXP 20
2728: PPUSH
2729: LD_STRING DK-Conspiracy-31
2731: PPUSH
2732: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
2736: LD_EXP 22
2740: PPUSH
2741: LD_STRING DMar-Conspiracy-33
2743: PPUSH
2744: CALL_OW 88
2748: NOT
2749: PUSH
2750: LD_EXP 26
2754: AND
2755: IFFALSE 2822
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
2757: LD_EXP 26
2761: PPUSH
2762: LD_INT 26
2764: PUSH
2765: LD_INT 1
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PPUSH
2772: CALL_OW 72
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: PPUSH
2781: LD_STRING DArm-Conspiracy-a-34
2783: PPUSH
2784: CALL_OW 88
2788: NOT
2789: IFFALSE 2822
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
2791: LD_EXP 26
2795: PPUSH
2796: LD_INT 26
2798: PUSH
2799: LD_INT 2
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 72
2810: PUSH
2811: LD_INT 1
2813: ARRAY
2814: PPUSH
2815: LD_STRING DArf-Conspiracy-a-34
2817: PPUSH
2818: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
2822: LD_EXP 20
2826: PPUSH
2827: LD_STRING DK-Conspiracy-34
2829: PPUSH
2830: CALL_OW 88
// if IsOk ( Markov ) then
2834: LD_EXP 22
2838: PPUSH
2839: CALL_OW 302
2843: IFFALSE 2920
// begin Say ( Markov , DMar-Conspiracy-35 ) ;
2845: LD_EXP 22
2849: PPUSH
2850: LD_STRING DMar-Conspiracy-35
2852: PPUSH
2853: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
2857: LD_EXP 20
2861: PPUSH
2862: LD_STRING DK-Conspiracy-36
2864: PPUSH
2865: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
2869: LD_EXP 22
2873: PPUSH
2874: LD_STRING DMar-Conspiracy-37
2876: PPUSH
2877: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
2881: LD_EXP 22
2885: PPUSH
2886: LD_STRING DMar-Conspiracy-38
2888: PPUSH
2889: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
2893: LD_INT 137
2895: PPUSH
2896: LD_INT 98
2898: PPUSH
2899: LD_INT 105
2901: PPUSH
2902: CALL 4177 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
2906: LD_EXP 22
2910: PPUSH
2911: LD_STRING DMar-Conspiracy-39
2913: PPUSH
2914: CALL_OW 88
// end else
2918: GO 3004
// if heikeSecondSquad then
2920: LD_EXP 26
2924: IFFALSE 3004
// begin ShowPlace ( 137 , 98 , 0 0$3 ) ;
2926: LD_INT 137
2928: PPUSH
2929: LD_INT 98
2931: PPUSH
2932: LD_INT 105
2934: PPUSH
2935: CALL 4177 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
2939: LD_EXP 26
2943: PPUSH
2944: LD_INT 26
2946: PUSH
2947: LD_INT 1
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PPUSH
2954: CALL_OW 72
2958: PUSH
2959: LD_INT 1
2961: ARRAY
2962: PPUSH
2963: LD_STRING DArm-Conspiracy-a-35
2965: PPUSH
2966: CALL_OW 88
2970: NOT
2971: IFFALSE 3004
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
2973: LD_EXP 26
2977: PPUSH
2978: LD_INT 26
2980: PUSH
2981: LD_INT 2
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PPUSH
2988: CALL_OW 72
2992: PUSH
2993: LD_INT 1
2995: ARRAY
2996: PPUSH
2997: LD_STRING DArf-Conspiracy-a-35
2999: PPUSH
3000: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
3004: LD_EXP 15
3008: PPUSH
3009: LD_STRING DH-Conspiracy-40
3011: PPUSH
3012: CALL_OW 88
// if IsOk ( Mike ) then
3016: LD_EXP 17
3020: PPUSH
3021: CALL_OW 302
3025: IFFALSE 3084
// begin hasScout := true ;
3027: LD_ADDR_EXP 11
3031: PUSH
3032: LD_INT 1
3034: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
3035: LD_EXP 17
3039: PPUSH
3040: LD_STRING DM-Conspiracy-41
3042: PPUSH
3043: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
3047: LD_EXP 17
3051: PPUSH
3052: LD_STRING DM-Conspiracy-42
3054: PPUSH
3055: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
3059: LD_INT 73
3061: PPUSH
3062: LD_INT 102
3064: PPUSH
3065: LD_INT 105
3067: PPUSH
3068: CALL 4177 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
3072: LD_EXP 17
3076: PPUSH
3077: LD_STRING DM-Conspiracy-43
3079: PPUSH
3080: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
3084: LD_EXP 4
3088: PUSH
3089: LD_EXP 20
3093: PPUSH
3094: CALL_OW 302
3098: AND
3099: PUSH
3100: LD_EXP 24
3104: PPUSH
3105: CALL_OW 302
3109: AND
3110: IFFALSE 3156
// begin hasMethanol := true ;
3112: LD_ADDR_EXP 12
3116: PUSH
3117: LD_INT 1
3119: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
3120: LD_EXP 20
3124: PPUSH
3125: LD_STRING DK-Conspiracy-44
3127: PPUSH
3128: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
3132: LD_EXP 20
3136: PPUSH
3137: LD_STRING DK-Conspiracy-45
3139: PPUSH
3140: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
3144: LD_EXP 19
3148: PPUSH
3149: LD_STRING DKam-Conspiracy-46
3151: PPUSH
3152: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
3156: LD_EXP 15
3160: PPUSH
3161: LD_STRING DH-Conspiracy-47
3163: PPUSH
3164: CALL_OW 88
// wait ( 0 0$1 ) ;
3168: LD_INT 35
3170: PPUSH
3171: CALL_OW 67
// your_side := 8 ;
3175: LD_ADDR_OWVAR 2
3179: PUSH
3180: LD_INT 8
3182: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
3183: LD_INT 1
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: LD_INT 22
3200: PUSH
3201: LD_INT 2
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PUSH
3208: LD_INT 21
3210: PUSH
3211: LD_INT 1
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PPUSH
3222: CALL_OW 69
3226: PUSH
3227: FOR_IN
3228: IFFALSE 3241
// RemoveUnit ( i ) ;
3230: LD_VAR 0 2
3234: PPUSH
3235: CALL_OW 64
3239: GO 3227
3241: POP
3242: POP
// wait ( 0 0$0.3 ) ;
3243: LD_INT 10
3245: PPUSH
3246: CALL_OW 67
// Query ( StartInfo1 ) ;
3250: LD_STRING StartInfo1
3252: PPUSH
3253: CALL_OW 97
// wait ( 0 0$1 ) ;
3257: LD_INT 35
3259: PPUSH
3260: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
3264: LD_STRING colors_night.txt
3266: PPUSH
3267: CALL_OW 544
// Query ( StartInfo2 ) ;
3271: LD_STRING StartInfo2
3273: PPUSH
3274: CALL_OW 97
// PrepareGame ;
3278: CALL 652 0 0
// your_side := 2 ;
3282: LD_ADDR_OWVAR 2
3286: PUSH
3287: LD_INT 2
3289: ST_TO_ADDR
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3290: LD_INT 152
3292: PPUSH
3293: LD_INT 65
3295: PPUSH
3296: LD_INT 2
3298: PPUSH
3299: LD_INT 70
3301: NEG
3302: PPUSH
3303: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3307: LD_INT 152
3309: PPUSH
3310: LD_INT 65
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
3320: LD_INT 133
3322: PPUSH
3323: LD_INT 76
3325: PPUSH
3326: LD_INT 2
3328: PPUSH
3329: LD_INT 6
3331: NEG
3332: PPUSH
3333: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
3337: LD_INT 23
3339: PPUSH
3340: CALL_OW 87
// wait ( 0 0$3 ) ;
3344: LD_INT 105
3346: PPUSH
3347: CALL_OW 67
// ComExitBuilding ( Heike ) ;
3351: LD_EXP 15
3355: PPUSH
3356: CALL_OW 122
// AddComMoveXY ( Heike , 128 , 64 ) ;
3360: LD_EXP 15
3364: PPUSH
3365: LD_INT 128
3367: PPUSH
3368: LD_INT 64
3370: PPUSH
3371: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
3375: LD_INT 35
3377: PPUSH
3378: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
3382: LD_EXP 15
3386: PPUSH
3387: LD_INT 128
3389: PPUSH
3390: LD_INT 64
3392: PPUSH
3393: CALL_OW 307
3397: IFFALSE 3375
// dialogue_skipped := false ;
3399: LD_ADDR_OWVAR 59
3403: PUSH
3404: LD_INT 0
3406: ST_TO_ADDR
// ComHold ( Heike ) ;
3407: LD_EXP 15
3411: PPUSH
3412: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
3416: LD_EXP 15
3420: PPUSH
3421: LD_STRING DH-Start-1
3423: PPUSH
3424: CALL_OW 88
// if not americanContact then
3428: LD_EXP 9
3432: NOT
3433: IFFALSE 3449
// Say ( Heike , DH-Start-c-2 ) else
3435: LD_EXP 15
3439: PPUSH
3440: LD_STRING DH-Start-c-2
3442: PPUSH
3443: CALL_OW 88
3447: GO 3481
// if johnnySaved then
3449: LD_EXP 3
3453: IFFALSE 3469
// Say ( Heike , DH-Start-a-2 ) else
3455: LD_EXP 15
3459: PPUSH
3460: LD_STRING DH-Start-a-2
3462: PPUSH
3463: CALL_OW 88
3467: GO 3481
// Say ( Heike , DH-Start-b-2 ) ;
3469: LD_EXP 15
3473: PPUSH
3474: LD_STRING DH-Start-b-2
3476: PPUSH
3477: CALL_OW 88
// Video ( false ) ;
3481: LD_INT 0
3483: PPUSH
3484: CALL 41732 0 1
// tick := 0 ;
3488: LD_ADDR_OWVAR 1
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// if americanContact then
3496: LD_EXP 9
3500: IFFALSE 3511
// ChangeMissionObjectives ( M1a ) else
3502: LD_STRING M1a
3504: PPUSH
3505: CALL_OW 337
3509: GO 3518
// ChangeMissionObjectives ( M1 ) ;
3511: LD_STRING M1
3513: PPUSH
3514: CALL_OW 337
// SaveForQuickRestart ;
3518: CALL_OW 22
// end ;
3522: LD_VAR 0 1
3526: RET
// function ActionAdditional ; var i , un , tmp ; begin
3527: LD_INT 0
3529: PPUSH
3530: PPUSH
3531: PPUSH
3532: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
3533: LD_INT 115
3535: PPUSH
3536: LD_INT 27
3538: PPUSH
3539: LD_INT 2
3541: PPUSH
3542: LD_INT 6
3544: NEG
3545: PPUSH
3546: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
3550: LD_EXP 15
3554: PPUSH
3555: LD_INT 115
3557: PPUSH
3558: LD_INT 27
3560: PPUSH
3561: CALL_OW 428
3565: PPUSH
3566: CALL_OW 52
// SetClass ( Heike , 33 ) ;
3570: LD_EXP 15
3574: PPUSH
3575: LD_INT 33
3577: PPUSH
3578: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
3582: LD_INT 124
3584: PPUSH
3585: LD_INT 39
3587: PPUSH
3588: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
3592: LD_EXP 15
3596: PPUSH
3597: LD_STRING DH-Fail-1
3599: PPUSH
3600: CALL_OW 88
// RaiseSailEvent ( eventCenterCamOnHeike ) ;
3604: LD_EXP 13
3608: PPUSH
3609: CALL_OW 427
// ComExit ( Heike ) ;
3613: LD_EXP 15
3617: PPUSH
3618: CALL 42158 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
3622: LD_EXP 15
3626: PPUSH
3627: LD_INT 109
3629: PPUSH
3630: LD_INT 33
3632: PPUSH
3633: CALL_OW 171
// AddComHold ( Heike ) ;
3637: LD_EXP 15
3641: PPUSH
3642: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
3646: LD_INT 115
3648: PPUSH
3649: LD_INT 27
3651: PPUSH
3652: LD_INT 2
3654: PPUSH
3655: CALL_OW 331
// wait ( 0 0$2 ) ;
3659: LD_INT 70
3661: PPUSH
3662: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3666: LD_INT 35
3668: PPUSH
3669: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
3673: LD_EXP 15
3677: PPUSH
3678: LD_INT 109
3680: PPUSH
3681: LD_INT 33
3683: PPUSH
3684: CALL_OW 307
3688: IFFALSE 3666
// Say ( Heike , DH-Fail-2 ) ;
3690: LD_EXP 15
3694: PPUSH
3695: LD_STRING DH-Fail-2
3697: PPUSH
3698: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
3702: LD_EXP 15
3706: PPUSH
3707: LD_INT 111
3709: PPUSH
3710: LD_INT 48
3712: PPUSH
3713: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3717: LD_INT 35
3719: PPUSH
3720: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
3724: LD_EXP 15
3728: PPUSH
3729: LD_INT 111
3731: PPUSH
3732: LD_INT 48
3734: PPUSH
3735: CALL_OW 297
3739: PUSH
3740: LD_INT 4
3742: LESS
3743: IFFALSE 3717
// AddComMoveXY ( Heike , 106 , 72 ) ;
3745: LD_EXP 15
3749: PPUSH
3750: LD_INT 106
3752: PPUSH
3753: LD_INT 72
3755: PPUSH
3756: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
3760: LD_EXP 15
3764: PPUSH
3765: LD_INT 103
3767: PPUSH
3768: LD_INT 80
3770: PPUSH
3771: CALL_OW 171
// uc_side := 3 ;
3775: LD_ADDR_OWVAR 20
3779: PUSH
3780: LD_INT 3
3782: ST_TO_ADDR
// uc_nation := 3 ;
3783: LD_ADDR_OWVAR 21
3787: PUSH
3788: LD_INT 3
3790: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 6
3799: PPUSH
3800: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
3804: LD_ADDR_OWVAR 29
3808: PUSH
3809: LD_INT 12
3811: PUSH
3812: LD_INT 12
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// un := CreateHuman ;
3819: LD_ADDR_VAR 0 3
3823: PUSH
3824: CALL_OW 44
3828: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: LD_INT 134
3836: PPUSH
3837: LD_INT 52
3839: PPUSH
3840: LD_INT 4
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL 43902 0 5
// ComTurnUnit ( un , Heike ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: LD_EXP 15
3859: PPUSH
3860: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
3864: LD_VAR 0 3
3868: PPUSH
3869: LD_EXP 15
3873: PPUSH
3874: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_STRING DRum-Fail-3
3885: PPUSH
3886: CALL_OW 88
// for i := 1 to 3 do
3890: LD_ADDR_VAR 0 2
3894: PUSH
3895: DOUBLE
3896: LD_INT 1
3898: DEC
3899: ST_TO_ADDR
3900: LD_INT 3
3902: PUSH
3903: FOR_TO
3904: IFFALSE 3977
// begin PrepareSoldier ( false , 10 ) ;
3906: LD_INT 0
3908: PPUSH
3909: LD_INT 10
3911: PPUSH
3912: CALL_OW 381
// un := CreateHuman ;
3916: LD_ADDR_VAR 0 3
3920: PUSH
3921: CALL_OW 44
3925: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3926: LD_ADDR_VAR 0 4
3930: PUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: LD_VAR 0 3
3940: PPUSH
3941: CALL 41760 0 2
3945: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
3946: LD_VAR 0 3
3950: PPUSH
3951: LD_INT 8
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
3961: LD_VAR 0 3
3965: PPUSH
3966: LD_EXP 15
3970: PPUSH
3971: CALL_OW 119
// end ;
3975: GO 3903
3977: POP
3978: POP
// repeat wait ( 0 0$1 ) ;
3979: LD_INT 35
3981: PPUSH
3982: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_INT 101
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PPUSH
4001: CALL_OW 72
4005: PUSH
4006: LD_INT 1
4008: GREATER
4009: IFFALSE 3979
// wait ( 0 0$1 ) ;
4011: LD_INT 35
4013: PPUSH
4014: CALL_OW 67
// DialogueOn ;
4018: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
4022: LD_EXP 15
4026: PPUSH
4027: LD_STRING DH-Fail-4
4029: PPUSH
4030: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
4034: LD_EXP 15
4038: PPUSH
4039: LD_STRING DH-Fail-5
4041: PPUSH
4042: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
4046: LD_EXP 15
4050: PPUSH
4051: LD_STRING DH-Fail-6
4053: PPUSH
4054: CALL_OW 88
// DialogueOff ;
4058: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
4062: LD_VAR 0 4
4066: PPUSH
4067: LD_EXP 15
4071: PPUSH
4072: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
4076: LD_INT 35
4078: PPUSH
4079: CALL_OW 67
// until IsDying ( Heike ) ;
4083: LD_EXP 15
4087: PPUSH
4088: CALL_OW 303
4092: IFFALSE 4076
// KillUnit ( Heike ) ;
4094: LD_EXP 15
4098: PPUSH
4099: CALL_OW 66
// wait ( 0 0$4 ) ;
4103: LD_INT 140
4105: PPUSH
4106: CALL_OW 67
// ResetFog ;
4110: CALL_OW 335
// DialogueOn ;
4114: CALL_OW 6
// dwait ( 0 0$1 ) ;
4118: LD_INT 35
4120: PPUSH
4121: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
4125: LD_ADDR_EXP 15
4129: PUSH
4130: LD_STRING Heike
4132: PPUSH
4133: LD_EXP 1
4137: NOT
4138: PPUSH
4139: LD_EXP 2
4143: PPUSH
4144: CALL 4376 0 3
4148: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
4149: LD_EXP 15
4153: PPUSH
4154: LD_STRING DH-Fail-7
4156: PPUSH
4157: CALL_OW 89
// DialogueOff ;
4161: CALL_OW 7
// YouLost ( Fail ) ;
4165: LD_STRING Fail
4167: PPUSH
4168: CALL_OW 104
// end ;
4172: LD_VAR 0 1
4176: RET
// function ShowPlace ( x , y , time ) ; begin
4177: LD_INT 0
4179: PPUSH
// RaiseSailEventCustom ( eventShowPlace , x , y , time , 0 , 0 , 0 ) ;
4180: LD_EXP 14
4184: PPUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_VAR 0 2
4194: PPUSH
4195: LD_VAR 0 3
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: LD_INT 0
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 595
// end ; end_of_file
4213: LD_VAR 0 4
4217: RET
// on SailEvent ( event ) do begin case event of eventCenterCamOnHeike :
4218: LD_VAR 0 1
4222: PUSH
4223: LD_EXP 13
4227: DOUBLE
4228: EQUAL
4229: IFTRUE 4233
4231: GO 4263
4233: POP
// begin repeat wait ( 0 0$1 ) ;
4234: LD_INT 35
4236: PPUSH
4237: CALL_OW 67
// CenterOnUnits ( Heike ) ;
4241: LD_EXP 15
4245: PPUSH
4246: CALL_OW 85
// until IsDying ( Heike ) ;
4250: LD_EXP 15
4254: PPUSH
4255: CALL_OW 303
4259: IFFALSE 4234
// end ; end ;
4261: GO 4264
4263: POP
// end ;
4264: PPOPN 1
4266: END
// on SaiLEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
4267: LD_OWVAR 59
4271: IFFALSE 4275
// exit ;
4273: GO 4345
// PlaceSeeing ( x , y , 2 , - 12 ) ;
4275: LD_VAR 0 2
4279: PPUSH
4280: LD_VAR 0 3
4284: PPUSH
4285: LD_INT 2
4287: PPUSH
4288: LD_INT 12
4290: NEG
4291: PPUSH
4292: CALL_OW 330
// CenterOnXY ( x , y ) ;
4296: LD_VAR 0 2
4300: PPUSH
4301: LD_VAR 0 3
4305: PPUSH
4306: CALL_OW 84
// wait ( time ) ;
4310: LD_VAR 0 4
4314: PPUSH
4315: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
4319: LD_EXP 15
4323: PPUSH
4324: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
4328: LD_VAR 0 2
4332: PPUSH
4333: LD_VAR 0 3
4337: PPUSH
4338: LD_INT 2
4340: PPUSH
4341: CALL_OW 331
// end ;
4345: PPOPN 7
4347: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
4348: LD_VAR 0 1
4352: PUSH
4353: LD_EXP 15
4357: EQUAL
4358: PUSH
4359: LD_EXP 5
4363: AND
4364: IFFALSE 4373
// YouLost ( Heike ) ;
4366: LD_STRING Heike
4368: PPUSH
4369: CALL_OW 104
// end ; end_of_file
4373: PPOPN 1
4375: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4376: LD_INT 0
4378: PPUSH
4379: PPUSH
// if exist_mode then
4380: LD_VAR 0 2
4384: IFFALSE 4409
// unit := CreateCharacter ( prefix & ident ) else
4386: LD_ADDR_VAR 0 5
4390: PUSH
4391: LD_VAR 0 3
4395: PUSH
4396: LD_VAR 0 1
4400: STR
4401: PPUSH
4402: CALL_OW 34
4406: ST_TO_ADDR
4407: GO 4424
// unit := NewCharacter ( ident ) ;
4409: LD_ADDR_VAR 0 5
4413: PUSH
4414: LD_VAR 0 1
4418: PPUSH
4419: CALL_OW 25
4423: ST_TO_ADDR
// result := unit ;
4424: LD_ADDR_VAR 0 4
4428: PUSH
4429: LD_VAR 0 5
4433: ST_TO_ADDR
// end ;
4434: LD_VAR 0 4
4438: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4439: LD_INT 0
4441: PPUSH
4442: PPUSH
// if not side or not nation then
4443: LD_VAR 0 1
4447: NOT
4448: PUSH
4449: LD_VAR 0 2
4453: NOT
4454: OR
4455: IFFALSE 4459
// exit ;
4457: GO 5227
// case nation of nation_american :
4459: LD_VAR 0 2
4463: PUSH
4464: LD_INT 1
4466: DOUBLE
4467: EQUAL
4468: IFTRUE 4472
4470: GO 4686
4472: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4473: LD_ADDR_VAR 0 4
4477: PUSH
4478: LD_INT 35
4480: PUSH
4481: LD_INT 45
4483: PUSH
4484: LD_INT 46
4486: PUSH
4487: LD_INT 47
4489: PUSH
4490: LD_INT 82
4492: PUSH
4493: LD_INT 83
4495: PUSH
4496: LD_INT 84
4498: PUSH
4499: LD_INT 85
4501: PUSH
4502: LD_INT 86
4504: PUSH
4505: LD_INT 1
4507: PUSH
4508: LD_INT 2
4510: PUSH
4511: LD_INT 6
4513: PUSH
4514: LD_INT 15
4516: PUSH
4517: LD_INT 16
4519: PUSH
4520: LD_INT 7
4522: PUSH
4523: LD_INT 12
4525: PUSH
4526: LD_INT 13
4528: PUSH
4529: LD_INT 10
4531: PUSH
4532: LD_INT 14
4534: PUSH
4535: LD_INT 20
4537: PUSH
4538: LD_INT 21
4540: PUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 25
4546: PUSH
4547: LD_INT 32
4549: PUSH
4550: LD_INT 27
4552: PUSH
4553: LD_INT 36
4555: PUSH
4556: LD_INT 69
4558: PUSH
4559: LD_INT 39
4561: PUSH
4562: LD_INT 34
4564: PUSH
4565: LD_INT 40
4567: PUSH
4568: LD_INT 48
4570: PUSH
4571: LD_INT 49
4573: PUSH
4574: LD_INT 50
4576: PUSH
4577: LD_INT 51
4579: PUSH
4580: LD_INT 52
4582: PUSH
4583: LD_INT 53
4585: PUSH
4586: LD_INT 54
4588: PUSH
4589: LD_INT 55
4591: PUSH
4592: LD_INT 56
4594: PUSH
4595: LD_INT 57
4597: PUSH
4598: LD_INT 58
4600: PUSH
4601: LD_INT 59
4603: PUSH
4604: LD_INT 60
4606: PUSH
4607: LD_INT 61
4609: PUSH
4610: LD_INT 62
4612: PUSH
4613: LD_INT 80
4615: PUSH
4616: LD_INT 82
4618: PUSH
4619: LD_INT 83
4621: PUSH
4622: LD_INT 84
4624: PUSH
4625: LD_INT 85
4627: PUSH
4628: LD_INT 86
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: ST_TO_ADDR
4684: GO 5151
4686: LD_INT 2
4688: DOUBLE
4689: EQUAL
4690: IFTRUE 4694
4692: GO 4920
4694: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4695: LD_ADDR_VAR 0 4
4699: PUSH
4700: LD_INT 35
4702: PUSH
4703: LD_INT 45
4705: PUSH
4706: LD_INT 46
4708: PUSH
4709: LD_INT 47
4711: PUSH
4712: LD_INT 82
4714: PUSH
4715: LD_INT 83
4717: PUSH
4718: LD_INT 84
4720: PUSH
4721: LD_INT 85
4723: PUSH
4724: LD_INT 87
4726: PUSH
4727: LD_INT 70
4729: PUSH
4730: LD_INT 1
4732: PUSH
4733: LD_INT 11
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 4
4741: PUSH
4742: LD_INT 5
4744: PUSH
4745: LD_INT 6
4747: PUSH
4748: LD_INT 15
4750: PUSH
4751: LD_INT 18
4753: PUSH
4754: LD_INT 7
4756: PUSH
4757: LD_INT 17
4759: PUSH
4760: LD_INT 8
4762: PUSH
4763: LD_INT 20
4765: PUSH
4766: LD_INT 21
4768: PUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 72
4774: PUSH
4775: LD_INT 26
4777: PUSH
4778: LD_INT 69
4780: PUSH
4781: LD_INT 39
4783: PUSH
4784: LD_INT 40
4786: PUSH
4787: LD_INT 41
4789: PUSH
4790: LD_INT 42
4792: PUSH
4793: LD_INT 43
4795: PUSH
4796: LD_INT 48
4798: PUSH
4799: LD_INT 49
4801: PUSH
4802: LD_INT 50
4804: PUSH
4805: LD_INT 51
4807: PUSH
4808: LD_INT 52
4810: PUSH
4811: LD_INT 53
4813: PUSH
4814: LD_INT 54
4816: PUSH
4817: LD_INT 55
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 60
4825: PUSH
4826: LD_INT 61
4828: PUSH
4829: LD_INT 62
4831: PUSH
4832: LD_INT 66
4834: PUSH
4835: LD_INT 67
4837: PUSH
4838: LD_INT 68
4840: PUSH
4841: LD_INT 81
4843: PUSH
4844: LD_INT 82
4846: PUSH
4847: LD_INT 83
4849: PUSH
4850: LD_INT 84
4852: PUSH
4853: LD_INT 85
4855: PUSH
4856: LD_INT 87
4858: PUSH
4859: LD_INT 88
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: ST_TO_ADDR
4918: GO 5151
4920: LD_INT 3
4922: DOUBLE
4923: EQUAL
4924: IFTRUE 4928
4926: GO 5150
4928: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4929: LD_ADDR_VAR 0 4
4933: PUSH
4934: LD_INT 46
4936: PUSH
4937: LD_INT 47
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 82
4948: PUSH
4949: LD_INT 83
4951: PUSH
4952: LD_INT 84
4954: PUSH
4955: LD_INT 85
4957: PUSH
4958: LD_INT 86
4960: PUSH
4961: LD_INT 11
4963: PUSH
4964: LD_INT 9
4966: PUSH
4967: LD_INT 20
4969: PUSH
4970: LD_INT 19
4972: PUSH
4973: LD_INT 21
4975: PUSH
4976: LD_INT 24
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 25
4984: PUSH
4985: LD_INT 28
4987: PUSH
4988: LD_INT 29
4990: PUSH
4991: LD_INT 30
4993: PUSH
4994: LD_INT 31
4996: PUSH
4997: LD_INT 37
4999: PUSH
5000: LD_INT 38
5002: PUSH
5003: LD_INT 32
5005: PUSH
5006: LD_INT 27
5008: PUSH
5009: LD_INT 33
5011: PUSH
5012: LD_INT 69
5014: PUSH
5015: LD_INT 39
5017: PUSH
5018: LD_INT 34
5020: PUSH
5021: LD_INT 40
5023: PUSH
5024: LD_INT 71
5026: PUSH
5027: LD_INT 23
5029: PUSH
5030: LD_INT 44
5032: PUSH
5033: LD_INT 48
5035: PUSH
5036: LD_INT 49
5038: PUSH
5039: LD_INT 50
5041: PUSH
5042: LD_INT 51
5044: PUSH
5045: LD_INT 52
5047: PUSH
5048: LD_INT 53
5050: PUSH
5051: LD_INT 54
5053: PUSH
5054: LD_INT 55
5056: PUSH
5057: LD_INT 56
5059: PUSH
5060: LD_INT 57
5062: PUSH
5063: LD_INT 58
5065: PUSH
5066: LD_INT 59
5068: PUSH
5069: LD_INT 63
5071: PUSH
5072: LD_INT 64
5074: PUSH
5075: LD_INT 65
5077: PUSH
5078: LD_INT 82
5080: PUSH
5081: LD_INT 83
5083: PUSH
5084: LD_INT 84
5086: PUSH
5087: LD_INT 85
5089: PUSH
5090: LD_INT 86
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: ST_TO_ADDR
5148: GO 5151
5150: POP
// if state > - 1 and state < 3 then
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 1
5158: NEG
5159: GREATER
5160: PUSH
5161: LD_VAR 0 3
5165: PUSH
5166: LD_INT 3
5168: LESS
5169: AND
5170: IFFALSE 5227
// for i in result do
5172: LD_ADDR_VAR 0 5
5176: PUSH
5177: LD_VAR 0 4
5181: PUSH
5182: FOR_IN
5183: IFFALSE 5225
// if GetTech ( i , side ) <> state then
5185: LD_VAR 0 5
5189: PPUSH
5190: LD_VAR 0 1
5194: PPUSH
5195: CALL_OW 321
5199: PUSH
5200: LD_VAR 0 3
5204: NONEQUAL
5205: IFFALSE 5223
// result := result diff i ;
5207: LD_ADDR_VAR 0 4
5211: PUSH
5212: LD_VAR 0 4
5216: PUSH
5217: LD_VAR 0 5
5221: DIFF
5222: ST_TO_ADDR
5223: GO 5182
5225: POP
5226: POP
// end ;
5227: LD_VAR 0 4
5231: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5232: LD_INT 0
5234: PPUSH
5235: PPUSH
5236: PPUSH
// result := true ;
5237: LD_ADDR_VAR 0 3
5241: PUSH
5242: LD_INT 1
5244: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5245: LD_ADDR_VAR 0 5
5249: PUSH
5250: LD_VAR 0 2
5254: PPUSH
5255: CALL_OW 480
5259: ST_TO_ADDR
// if not tmp then
5260: LD_VAR 0 5
5264: NOT
5265: IFFALSE 5269
// exit ;
5267: GO 5318
// for i in tmp do
5269: LD_ADDR_VAR 0 4
5273: PUSH
5274: LD_VAR 0 5
5278: PUSH
5279: FOR_IN
5280: IFFALSE 5316
// if GetTech ( i , side ) <> state_researched then
5282: LD_VAR 0 4
5286: PPUSH
5287: LD_VAR 0 1
5291: PPUSH
5292: CALL_OW 321
5296: PUSH
5297: LD_INT 2
5299: NONEQUAL
5300: IFFALSE 5314
// begin result := false ;
5302: LD_ADDR_VAR 0 3
5306: PUSH
5307: LD_INT 0
5309: ST_TO_ADDR
// exit ;
5310: POP
5311: POP
5312: GO 5318
// end ;
5314: GO 5279
5316: POP
5317: POP
// end ;
5318: LD_VAR 0 3
5322: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5323: LD_INT 0
5325: PPUSH
5326: PPUSH
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
5332: PPUSH
5333: PPUSH
5334: PPUSH
5335: PPUSH
5336: PPUSH
5337: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5338: LD_VAR 0 1
5342: NOT
5343: PUSH
5344: LD_VAR 0 1
5348: PPUSH
5349: CALL_OW 257
5353: PUSH
5354: LD_INT 9
5356: NONEQUAL
5357: OR
5358: IFFALSE 5362
// exit ;
5360: GO 5935
// side := GetSide ( unit ) ;
5362: LD_ADDR_VAR 0 9
5366: PUSH
5367: LD_VAR 0 1
5371: PPUSH
5372: CALL_OW 255
5376: ST_TO_ADDR
// tech_space := tech_spacanom ;
5377: LD_ADDR_VAR 0 12
5381: PUSH
5382: LD_INT 29
5384: ST_TO_ADDR
// tech_time := tech_taurad ;
5385: LD_ADDR_VAR 0 13
5389: PUSH
5390: LD_INT 28
5392: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5393: LD_ADDR_VAR 0 11
5397: PUSH
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 310
5407: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5408: LD_VAR 0 11
5412: PPUSH
5413: CALL_OW 247
5417: PUSH
5418: LD_INT 2
5420: EQUAL
5421: IFFALSE 5425
// exit ;
5423: GO 5935
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5425: LD_ADDR_VAR 0 8
5429: PUSH
5430: LD_INT 81
5432: PUSH
5433: LD_VAR 0 9
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: LD_INT 3
5444: PUSH
5445: LD_INT 21
5447: PUSH
5448: LD_INT 3
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PPUSH
5463: CALL_OW 69
5467: ST_TO_ADDR
// if not tmp then
5468: LD_VAR 0 8
5472: NOT
5473: IFFALSE 5477
// exit ;
5475: GO 5935
// if in_unit then
5477: LD_VAR 0 11
5481: IFFALSE 5505
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5483: LD_ADDR_VAR 0 10
5487: PUSH
5488: LD_VAR 0 8
5492: PPUSH
5493: LD_VAR 0 11
5497: PPUSH
5498: CALL_OW 74
5502: ST_TO_ADDR
5503: GO 5525
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5505: LD_ADDR_VAR 0 10
5509: PUSH
5510: LD_VAR 0 8
5514: PPUSH
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 74
5524: ST_TO_ADDR
// if not enemy then
5525: LD_VAR 0 10
5529: NOT
5530: IFFALSE 5534
// exit ;
5532: GO 5935
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5534: LD_VAR 0 11
5538: PUSH
5539: LD_VAR 0 11
5543: PPUSH
5544: LD_VAR 0 10
5548: PPUSH
5549: CALL_OW 296
5553: PUSH
5554: LD_INT 13
5556: GREATER
5557: AND
5558: PUSH
5559: LD_VAR 0 1
5563: PPUSH
5564: LD_VAR 0 10
5568: PPUSH
5569: CALL_OW 296
5573: PUSH
5574: LD_INT 12
5576: GREATER
5577: OR
5578: IFFALSE 5582
// exit ;
5580: GO 5935
// missile := [ 1 ] ;
5582: LD_ADDR_VAR 0 14
5586: PUSH
5587: LD_INT 1
5589: PUSH
5590: EMPTY
5591: LIST
5592: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5593: LD_VAR 0 9
5597: PPUSH
5598: LD_VAR 0 12
5602: PPUSH
5603: CALL_OW 325
5607: IFFALSE 5636
// missile := Replace ( missile , missile + 1 , 2 ) ;
5609: LD_ADDR_VAR 0 14
5613: PUSH
5614: LD_VAR 0 14
5618: PPUSH
5619: LD_VAR 0 14
5623: PUSH
5624: LD_INT 1
5626: PLUS
5627: PPUSH
5628: LD_INT 2
5630: PPUSH
5631: CALL_OW 1
5635: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5636: LD_VAR 0 9
5640: PPUSH
5641: LD_VAR 0 13
5645: PPUSH
5646: CALL_OW 325
5650: PUSH
5651: LD_VAR 0 10
5655: PPUSH
5656: CALL_OW 255
5660: PPUSH
5661: LD_VAR 0 13
5665: PPUSH
5666: CALL_OW 325
5670: NOT
5671: AND
5672: IFFALSE 5701
// missile := Replace ( missile , missile + 1 , 3 ) ;
5674: LD_ADDR_VAR 0 14
5678: PUSH
5679: LD_VAR 0 14
5683: PPUSH
5684: LD_VAR 0 14
5688: PUSH
5689: LD_INT 1
5691: PLUS
5692: PPUSH
5693: LD_INT 3
5695: PPUSH
5696: CALL_OW 1
5700: ST_TO_ADDR
// if missile < 2 then
5701: LD_VAR 0 14
5705: PUSH
5706: LD_INT 2
5708: LESS
5709: IFFALSE 5713
// exit ;
5711: GO 5935
// x := GetX ( enemy ) ;
5713: LD_ADDR_VAR 0 4
5717: PUSH
5718: LD_VAR 0 10
5722: PPUSH
5723: CALL_OW 250
5727: ST_TO_ADDR
// y := GetY ( enemy ) ;
5728: LD_ADDR_VAR 0 5
5732: PUSH
5733: LD_VAR 0 10
5737: PPUSH
5738: CALL_OW 251
5742: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5743: LD_ADDR_VAR 0 6
5747: PUSH
5748: LD_VAR 0 4
5752: PUSH
5753: LD_INT 1
5755: NEG
5756: PPUSH
5757: LD_INT 1
5759: PPUSH
5760: CALL_OW 12
5764: PLUS
5765: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5766: LD_ADDR_VAR 0 7
5770: PUSH
5771: LD_VAR 0 5
5775: PUSH
5776: LD_INT 1
5778: NEG
5779: PPUSH
5780: LD_INT 1
5782: PPUSH
5783: CALL_OW 12
5787: PLUS
5788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5789: LD_VAR 0 6
5793: PPUSH
5794: LD_VAR 0 7
5798: PPUSH
5799: CALL_OW 488
5803: NOT
5804: IFFALSE 5826
// begin _x := x ;
5806: LD_ADDR_VAR 0 6
5810: PUSH
5811: LD_VAR 0 4
5815: ST_TO_ADDR
// _y := y ;
5816: LD_ADDR_VAR 0 7
5820: PUSH
5821: LD_VAR 0 5
5825: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5826: LD_ADDR_VAR 0 3
5830: PUSH
5831: LD_INT 1
5833: PPUSH
5834: LD_VAR 0 14
5838: PPUSH
5839: CALL_OW 12
5843: ST_TO_ADDR
// case i of 1 :
5844: LD_VAR 0 3
5848: PUSH
5849: LD_INT 1
5851: DOUBLE
5852: EQUAL
5853: IFTRUE 5857
5855: GO 5874
5857: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5858: LD_VAR 0 1
5862: PPUSH
5863: LD_VAR 0 10
5867: PPUSH
5868: CALL_OW 115
5872: GO 5935
5874: LD_INT 2
5876: DOUBLE
5877: EQUAL
5878: IFTRUE 5882
5880: GO 5904
5882: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5883: LD_VAR 0 1
5887: PPUSH
5888: LD_VAR 0 6
5892: PPUSH
5893: LD_VAR 0 7
5897: PPUSH
5898: CALL_OW 153
5902: GO 5935
5904: LD_INT 3
5906: DOUBLE
5907: EQUAL
5908: IFTRUE 5912
5910: GO 5934
5912: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 6
5922: PPUSH
5923: LD_VAR 0 7
5927: PPUSH
5928: CALL_OW 154
5932: GO 5935
5934: POP
// end ;
5935: LD_VAR 0 2
5939: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5940: LD_INT 0
5942: PPUSH
5943: PPUSH
5944: PPUSH
5945: PPUSH
5946: PPUSH
5947: PPUSH
// if not unit or not building then
5948: LD_VAR 0 1
5952: NOT
5953: PUSH
5954: LD_VAR 0 2
5958: NOT
5959: OR
5960: IFFALSE 5964
// exit ;
5962: GO 6122
// x := GetX ( building ) ;
5964: LD_ADDR_VAR 0 5
5968: PUSH
5969: LD_VAR 0 2
5973: PPUSH
5974: CALL_OW 250
5978: ST_TO_ADDR
// y := GetY ( building ) ;
5979: LD_ADDR_VAR 0 6
5983: PUSH
5984: LD_VAR 0 2
5988: PPUSH
5989: CALL_OW 251
5993: ST_TO_ADDR
// for i = 0 to 5 do
5994: LD_ADDR_VAR 0 4
5998: PUSH
5999: DOUBLE
6000: LD_INT 0
6002: DEC
6003: ST_TO_ADDR
6004: LD_INT 5
6006: PUSH
6007: FOR_TO
6008: IFFALSE 6120
// begin _x := ShiftX ( x , i , 3 ) ;
6010: LD_ADDR_VAR 0 7
6014: PUSH
6015: LD_VAR 0 5
6019: PPUSH
6020: LD_VAR 0 4
6024: PPUSH
6025: LD_INT 3
6027: PPUSH
6028: CALL_OW 272
6032: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6033: LD_ADDR_VAR 0 8
6037: PUSH
6038: LD_VAR 0 6
6042: PPUSH
6043: LD_VAR 0 4
6047: PPUSH
6048: LD_INT 3
6050: PPUSH
6051: CALL_OW 273
6055: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6056: LD_VAR 0 7
6060: PPUSH
6061: LD_VAR 0 8
6065: PPUSH
6066: CALL_OW 488
6070: NOT
6071: IFFALSE 6075
// continue ;
6073: GO 6007
// if HexInfo ( _x , _y ) = 0 then
6075: LD_VAR 0 7
6079: PPUSH
6080: LD_VAR 0 8
6084: PPUSH
6085: CALL_OW 428
6089: PUSH
6090: LD_INT 0
6092: EQUAL
6093: IFFALSE 6118
// begin ComMoveXY ( unit , _x , _y ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_VAR 0 7
6104: PPUSH
6105: LD_VAR 0 8
6109: PPUSH
6110: CALL_OW 111
// exit ;
6114: POP
6115: POP
6116: GO 6122
// end ; end ;
6118: GO 6007
6120: POP
6121: POP
// end ;
6122: LD_VAR 0 3
6126: RET
// export function ScanBase ( side , base_area ) ; begin
6127: LD_INT 0
6129: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6130: LD_ADDR_VAR 0 3
6134: PUSH
6135: LD_VAR 0 2
6139: PPUSH
6140: LD_INT 81
6142: PUSH
6143: LD_VAR 0 1
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 70
6156: ST_TO_ADDR
// end ;
6157: LD_VAR 0 3
6161: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6162: LD_INT 0
6164: PPUSH
6165: PPUSH
6166: PPUSH
6167: PPUSH
// result := false ;
6168: LD_ADDR_VAR 0 2
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// side := GetSide ( unit ) ;
6176: LD_ADDR_VAR 0 3
6180: PUSH
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL_OW 255
6190: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: LD_VAR 0 1
6200: PPUSH
6201: CALL_OW 248
6205: ST_TO_ADDR
// case nat of 1 :
6206: LD_VAR 0 4
6210: PUSH
6211: LD_INT 1
6213: DOUBLE
6214: EQUAL
6215: IFTRUE 6219
6217: GO 6230
6219: POP
// tech := tech_lassight ; 2 :
6220: LD_ADDR_VAR 0 5
6224: PUSH
6225: LD_INT 12
6227: ST_TO_ADDR
6228: GO 6269
6230: LD_INT 2
6232: DOUBLE
6233: EQUAL
6234: IFTRUE 6238
6236: GO 6249
6238: POP
// tech := tech_mortar ; 3 :
6239: LD_ADDR_VAR 0 5
6243: PUSH
6244: LD_INT 41
6246: ST_TO_ADDR
6247: GO 6269
6249: LD_INT 3
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6257
6255: GO 6268
6257: POP
// tech := tech_bazooka ; end ;
6258: LD_ADDR_VAR 0 5
6262: PUSH
6263: LD_INT 44
6265: ST_TO_ADDR
6266: GO 6269
6268: POP
// if Researched ( side , tech ) then
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_VAR 0 5
6278: PPUSH
6279: CALL_OW 325
6283: IFFALSE 6310
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6285: LD_ADDR_VAR 0 2
6289: PUSH
6290: LD_INT 5
6292: PUSH
6293: LD_INT 8
6295: PUSH
6296: LD_INT 9
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: LD_VAR 0 4
6308: ARRAY
6309: ST_TO_ADDR
// end ;
6310: LD_VAR 0 2
6314: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6315: LD_INT 0
6317: PPUSH
6318: PPUSH
6319: PPUSH
// if not mines then
6320: LD_VAR 0 2
6324: NOT
6325: IFFALSE 6329
// exit ;
6327: GO 6473
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6329: LD_ADDR_VAR 0 5
6333: PUSH
6334: LD_INT 81
6336: PUSH
6337: LD_VAR 0 1
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: LD_INT 21
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PPUSH
6367: CALL_OW 69
6371: ST_TO_ADDR
// for i in mines do
6372: LD_ADDR_VAR 0 4
6376: PUSH
6377: LD_VAR 0 2
6381: PUSH
6382: FOR_IN
6383: IFFALSE 6471
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6385: LD_VAR 0 4
6389: PUSH
6390: LD_INT 1
6392: ARRAY
6393: PPUSH
6394: LD_VAR 0 4
6398: PUSH
6399: LD_INT 2
6401: ARRAY
6402: PPUSH
6403: CALL_OW 458
6407: NOT
6408: IFFALSE 6412
// continue ;
6410: GO 6382
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6412: LD_VAR 0 4
6416: PUSH
6417: LD_INT 1
6419: ARRAY
6420: PPUSH
6421: LD_VAR 0 4
6425: PUSH
6426: LD_INT 2
6428: ARRAY
6429: PPUSH
6430: CALL_OW 428
6434: PUSH
6435: LD_VAR 0 5
6439: IN
6440: IFFALSE 6469
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6442: LD_VAR 0 4
6446: PUSH
6447: LD_INT 1
6449: ARRAY
6450: PPUSH
6451: LD_VAR 0 4
6455: PUSH
6456: LD_INT 2
6458: ARRAY
6459: PPUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL_OW 456
// end ;
6469: GO 6382
6471: POP
6472: POP
// end ;
6473: LD_VAR 0 3
6477: RET
// export function Count ( array ) ; var i ; begin
6478: LD_INT 0
6480: PPUSH
6481: PPUSH
// result := 0 ;
6482: LD_ADDR_VAR 0 2
6486: PUSH
6487: LD_INT 0
6489: ST_TO_ADDR
// for i in array do
6490: LD_ADDR_VAR 0 3
6494: PUSH
6495: LD_VAR 0 1
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6525
// if i then
6503: LD_VAR 0 3
6507: IFFALSE 6523
// result := result + 1 ;
6509: LD_ADDR_VAR 0 2
6513: PUSH
6514: LD_VAR 0 2
6518: PUSH
6519: LD_INT 1
6521: PLUS
6522: ST_TO_ADDR
6523: GO 6500
6525: POP
6526: POP
// end ;
6527: LD_VAR 0 2
6531: RET
// export function IsEmpty ( building ) ; begin
6532: LD_INT 0
6534: PPUSH
// if not building then
6535: LD_VAR 0 1
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6587
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6544: LD_ADDR_VAR 0 2
6548: PUSH
6549: LD_VAR 0 1
6553: PUSH
6554: LD_INT 22
6556: PUSH
6557: LD_VAR 0 1
6561: PPUSH
6562: CALL_OW 255
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 58
6573: PUSH
6574: EMPTY
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PPUSH
6581: CALL_OW 69
6585: IN
6586: ST_TO_ADDR
// end ;
6587: LD_VAR 0 2
6591: RET
// export function IsNotFull ( building ) ; var places ; begin
6592: LD_INT 0
6594: PPUSH
6595: PPUSH
// if not building then
6596: LD_VAR 0 1
6600: NOT
6601: IFFALSE 6605
// exit ;
6603: GO 6776
// result := false ;
6605: LD_ADDR_VAR 0 2
6609: PUSH
6610: LD_INT 0
6612: ST_TO_ADDR
// places := 0 ;
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: LD_INT 0
6620: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
6621: LD_VAR 0 1
6625: PPUSH
6626: CALL_OW 266
6630: PUSH
6631: LD_INT 0
6633: DOUBLE
6634: EQUAL
6635: IFTRUE 6693
6637: LD_INT 1
6639: DOUBLE
6640: EQUAL
6641: IFTRUE 6693
6643: LD_INT 6
6645: DOUBLE
6646: EQUAL
6647: IFTRUE 6693
6649: LD_INT 7
6651: DOUBLE
6652: EQUAL
6653: IFTRUE 6693
6655: LD_INT 8
6657: DOUBLE
6658: EQUAL
6659: IFTRUE 6693
6661: LD_INT 4
6663: DOUBLE
6664: EQUAL
6665: IFTRUE 6693
6667: LD_INT 5
6669: DOUBLE
6670: EQUAL
6671: IFTRUE 6693
6673: LD_INT 2
6675: DOUBLE
6676: EQUAL
6677: IFTRUE 6693
6679: LD_INT 3
6681: DOUBLE
6682: EQUAL
6683: IFTRUE 6693
6685: LD_INT 35
6687: DOUBLE
6688: EQUAL
6689: IFTRUE 6693
6691: GO 6704
6693: POP
// places := 6 ; b_bunker , b_breastwork :
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: LD_INT 6
6701: ST_TO_ADDR
6702: GO 6749
6704: LD_INT 32
6706: DOUBLE
6707: EQUAL
6708: IFTRUE 6718
6710: LD_INT 31
6712: DOUBLE
6713: EQUAL
6714: IFTRUE 6718
6716: GO 6729
6718: POP
// places := 1 ; b_control_tower :
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_INT 1
6726: ST_TO_ADDR
6727: GO 6749
6729: LD_INT 36
6731: DOUBLE
6732: EQUAL
6733: IFTRUE 6737
6735: GO 6748
6737: POP
// places := 3 ; end ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: LD_INT 3
6745: ST_TO_ADDR
6746: GO 6749
6748: POP
// if places then
6749: LD_VAR 0 3
6753: IFFALSE 6776
// result := UnitsInside ( building ) < places ;
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_VAR 0 1
6764: PPUSH
6765: CALL_OW 313
6769: PUSH
6770: LD_VAR 0 3
6774: LESS
6775: ST_TO_ADDR
// end ;
6776: LD_VAR 0 2
6780: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6781: LD_INT 0
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
// tmp := [ ] ;
6787: LD_ADDR_VAR 0 3
6791: PUSH
6792: EMPTY
6793: ST_TO_ADDR
// list := [ ] ;
6794: LD_ADDR_VAR 0 5
6798: PUSH
6799: EMPTY
6800: ST_TO_ADDR
// for i = 16 to 25 do
6801: LD_ADDR_VAR 0 4
6805: PUSH
6806: DOUBLE
6807: LD_INT 16
6809: DEC
6810: ST_TO_ADDR
6811: LD_INT 25
6813: PUSH
6814: FOR_TO
6815: IFFALSE 6888
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6817: LD_ADDR_VAR 0 3
6821: PUSH
6822: LD_VAR 0 3
6826: PUSH
6827: LD_INT 22
6829: PUSH
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 255
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: LD_INT 91
6846: PUSH
6847: LD_VAR 0 1
6851: PUSH
6852: LD_INT 6
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 30
6862: PUSH
6863: LD_VAR 0 4
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: PPUSH
6880: CALL_OW 69
6884: ADD
6885: ST_TO_ADDR
6886: GO 6814
6888: POP
6889: POP
// for i = 1 to tmp do
6890: LD_ADDR_VAR 0 4
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6994
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6908: LD_ADDR_VAR 0 5
6912: PUSH
6913: LD_VAR 0 5
6917: PUSH
6918: LD_VAR 0 3
6922: PUSH
6923: LD_VAR 0 4
6927: ARRAY
6928: PPUSH
6929: CALL_OW 266
6933: PUSH
6934: LD_VAR 0 3
6938: PUSH
6939: LD_VAR 0 4
6943: ARRAY
6944: PPUSH
6945: CALL_OW 250
6949: PUSH
6950: LD_VAR 0 3
6954: PUSH
6955: LD_VAR 0 4
6959: ARRAY
6960: PPUSH
6961: CALL_OW 251
6965: PUSH
6966: LD_VAR 0 3
6970: PUSH
6971: LD_VAR 0 4
6975: ARRAY
6976: PPUSH
6977: CALL_OW 254
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: EMPTY
6989: LIST
6990: ADD
6991: ST_TO_ADDR
6992: GO 6905
6994: POP
6995: POP
// result := list ;
6996: LD_ADDR_VAR 0 2
7000: PUSH
7001: LD_VAR 0 5
7005: ST_TO_ADDR
// end ;
7006: LD_VAR 0 2
7010: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7011: LD_INT 0
7013: PPUSH
7014: PPUSH
7015: PPUSH
7016: PPUSH
7017: PPUSH
7018: PPUSH
7019: PPUSH
// if not factory then
7020: LD_VAR 0 1
7024: NOT
7025: IFFALSE 7029
// exit ;
7027: GO 7622
// if control = control_apeman then
7029: LD_VAR 0 4
7033: PUSH
7034: LD_INT 5
7036: EQUAL
7037: IFFALSE 7146
// begin tmp := UnitsInside ( factory ) ;
7039: LD_ADDR_VAR 0 8
7043: PUSH
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 313
7053: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7054: LD_VAR 0 8
7058: PPUSH
7059: LD_INT 25
7061: PUSH
7062: LD_INT 12
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PPUSH
7069: CALL_OW 72
7073: NOT
7074: IFFALSE 7084
// control := control_manual ;
7076: LD_ADDR_VAR 0 4
7080: PUSH
7081: LD_INT 1
7083: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7084: LD_ADDR_VAR 0 8
7088: PUSH
7089: LD_VAR 0 1
7093: PPUSH
7094: CALL 6781 0 1
7098: ST_TO_ADDR
// if tmp then
7099: LD_VAR 0 8
7103: IFFALSE 7146
// begin for i in tmp do
7105: LD_ADDR_VAR 0 7
7109: PUSH
7110: LD_VAR 0 8
7114: PUSH
7115: FOR_IN
7116: IFFALSE 7144
// if i [ 1 ] = b_ext_radio then
7118: LD_VAR 0 7
7122: PUSH
7123: LD_INT 1
7125: ARRAY
7126: PUSH
7127: LD_INT 22
7129: EQUAL
7130: IFFALSE 7142
// begin control := control_remote ;
7132: LD_ADDR_VAR 0 4
7136: PUSH
7137: LD_INT 2
7139: ST_TO_ADDR
// break ;
7140: GO 7144
// end ;
7142: GO 7115
7144: POP
7145: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7146: LD_VAR 0 1
7150: PPUSH
7151: LD_VAR 0 2
7155: PPUSH
7156: LD_VAR 0 3
7160: PPUSH
7161: LD_VAR 0 4
7165: PPUSH
7166: LD_VAR 0 5
7170: PPUSH
7171: CALL_OW 448
7175: IFFALSE 7210
// begin result := [ chassis , engine , control , weapon ] ;
7177: LD_ADDR_VAR 0 6
7181: PUSH
7182: LD_VAR 0 2
7186: PUSH
7187: LD_VAR 0 3
7191: PUSH
7192: LD_VAR 0 4
7196: PUSH
7197: LD_VAR 0 5
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: ST_TO_ADDR
// exit ;
7208: GO 7622
// end ; _chassis := AvailableChassisList ( factory ) ;
7210: LD_ADDR_VAR 0 9
7214: PUSH
7215: LD_VAR 0 1
7219: PPUSH
7220: CALL_OW 475
7224: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7225: LD_ADDR_VAR 0 11
7229: PUSH
7230: LD_VAR 0 1
7234: PPUSH
7235: CALL_OW 476
7239: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7240: LD_ADDR_VAR 0 12
7244: PUSH
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL_OW 477
7254: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7255: LD_ADDR_VAR 0 10
7259: PUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 478
7269: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7270: LD_VAR 0 9
7274: NOT
7275: PUSH
7276: LD_VAR 0 11
7280: NOT
7281: OR
7282: PUSH
7283: LD_VAR 0 12
7287: NOT
7288: OR
7289: PUSH
7290: LD_VAR 0 10
7294: NOT
7295: OR
7296: IFFALSE 7331
// begin result := [ chassis , engine , control , weapon ] ;
7298: LD_ADDR_VAR 0 6
7302: PUSH
7303: LD_VAR 0 2
7307: PUSH
7308: LD_VAR 0 3
7312: PUSH
7313: LD_VAR 0 4
7317: PUSH
7318: LD_VAR 0 5
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: ST_TO_ADDR
// exit ;
7329: GO 7622
// end ; if not chassis in _chassis then
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 9
7340: IN
7341: NOT
7342: IFFALSE 7368
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7344: LD_ADDR_VAR 0 2
7348: PUSH
7349: LD_VAR 0 9
7353: PUSH
7354: LD_INT 1
7356: PPUSH
7357: LD_VAR 0 9
7361: PPUSH
7362: CALL_OW 12
7366: ARRAY
7367: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7368: LD_VAR 0 2
7372: PPUSH
7373: LD_VAR 0 3
7377: PPUSH
7378: CALL 7627 0 2
7382: NOT
7383: IFFALSE 7442
// repeat engine := _engine [ 1 ] ;
7385: LD_ADDR_VAR 0 3
7389: PUSH
7390: LD_VAR 0 11
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7399: LD_ADDR_VAR 0 11
7403: PUSH
7404: LD_VAR 0 11
7408: PPUSH
7409: LD_INT 1
7411: PPUSH
7412: CALL_OW 3
7416: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7417: LD_VAR 0 2
7421: PPUSH
7422: LD_VAR 0 3
7426: PPUSH
7427: CALL 7627 0 2
7431: PUSH
7432: LD_VAR 0 11
7436: PUSH
7437: EMPTY
7438: EQUAL
7439: OR
7440: IFFALSE 7385
// if not control in _control then
7442: LD_VAR 0 4
7446: PUSH
7447: LD_VAR 0 12
7451: IN
7452: NOT
7453: IFFALSE 7479
// control := _control [ rand ( 1 , _control ) ] ;
7455: LD_ADDR_VAR 0 4
7459: PUSH
7460: LD_VAR 0 12
7464: PUSH
7465: LD_INT 1
7467: PPUSH
7468: LD_VAR 0 12
7472: PPUSH
7473: CALL_OW 12
7477: ARRAY
7478: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7479: LD_VAR 0 2
7483: PPUSH
7484: LD_VAR 0 5
7488: PPUSH
7489: CALL 7847 0 2
7493: NOT
7494: IFFALSE 7553
// repeat weapon := _weapon [ 1 ] ;
7496: LD_ADDR_VAR 0 5
7500: PUSH
7501: LD_VAR 0 10
7505: PUSH
7506: LD_INT 1
7508: ARRAY
7509: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7510: LD_ADDR_VAR 0 10
7514: PUSH
7515: LD_VAR 0 10
7519: PPUSH
7520: LD_INT 1
7522: PPUSH
7523: CALL_OW 3
7527: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7528: LD_VAR 0 2
7532: PPUSH
7533: LD_VAR 0 5
7537: PPUSH
7538: CALL 7847 0 2
7542: PUSH
7543: LD_VAR 0 10
7547: PUSH
7548: EMPTY
7549: EQUAL
7550: OR
7551: IFFALSE 7496
// result := [ ] ;
7553: LD_ADDR_VAR 0 6
7557: PUSH
7558: EMPTY
7559: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_VAR 0 2
7569: PPUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: LD_VAR 0 4
7579: PPUSH
7580: LD_VAR 0 5
7584: PPUSH
7585: CALL_OW 448
7589: IFFALSE 7622
// result := [ chassis , engine , control , weapon ] ;
7591: LD_ADDR_VAR 0 6
7595: PUSH
7596: LD_VAR 0 2
7600: PUSH
7601: LD_VAR 0 3
7605: PUSH
7606: LD_VAR 0 4
7610: PUSH
7611: LD_VAR 0 5
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: ST_TO_ADDR
// end ;
7622: LD_VAR 0 6
7626: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7627: LD_INT 0
7629: PPUSH
// if not chassis or not engine then
7630: LD_VAR 0 1
7634: NOT
7635: PUSH
7636: LD_VAR 0 2
7640: NOT
7641: OR
7642: IFFALSE 7646
// exit ;
7644: GO 7842
// case engine of engine_solar :
7646: LD_VAR 0 2
7650: PUSH
7651: LD_INT 2
7653: DOUBLE
7654: EQUAL
7655: IFTRUE 7659
7657: GO 7697
7659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7660: LD_ADDR_VAR 0 3
7664: PUSH
7665: LD_INT 11
7667: PUSH
7668: LD_INT 12
7670: PUSH
7671: LD_INT 13
7673: PUSH
7674: LD_INT 14
7676: PUSH
7677: LD_INT 1
7679: PUSH
7680: LD_INT 2
7682: PUSH
7683: LD_INT 3
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: ST_TO_ADDR
7695: GO 7826
7697: LD_INT 1
7699: DOUBLE
7700: EQUAL
7701: IFTRUE 7705
7703: GO 7767
7705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7706: LD_ADDR_VAR 0 3
7710: PUSH
7711: LD_INT 11
7713: PUSH
7714: LD_INT 12
7716: PUSH
7717: LD_INT 13
7719: PUSH
7720: LD_INT 14
7722: PUSH
7723: LD_INT 1
7725: PUSH
7726: LD_INT 2
7728: PUSH
7729: LD_INT 3
7731: PUSH
7732: LD_INT 4
7734: PUSH
7735: LD_INT 5
7737: PUSH
7738: LD_INT 21
7740: PUSH
7741: LD_INT 23
7743: PUSH
7744: LD_INT 22
7746: PUSH
7747: LD_INT 24
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: ST_TO_ADDR
7765: GO 7826
7767: LD_INT 3
7769: DOUBLE
7770: EQUAL
7771: IFTRUE 7775
7773: GO 7825
7775: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7776: LD_ADDR_VAR 0 3
7780: PUSH
7781: LD_INT 13
7783: PUSH
7784: LD_INT 14
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: LD_INT 4
7795: PUSH
7796: LD_INT 5
7798: PUSH
7799: LD_INT 21
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_INT 23
7807: PUSH
7808: LD_INT 24
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: ST_TO_ADDR
7823: GO 7826
7825: POP
// result := ( chassis in result ) ;
7826: LD_ADDR_VAR 0 3
7830: PUSH
7831: LD_VAR 0 1
7835: PUSH
7836: LD_VAR 0 3
7840: IN
7841: ST_TO_ADDR
// end ;
7842: LD_VAR 0 3
7846: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7847: LD_INT 0
7849: PPUSH
// if not chassis or not weapon then
7850: LD_VAR 0 1
7854: NOT
7855: PUSH
7856: LD_VAR 0 2
7860: NOT
7861: OR
7862: IFFALSE 7866
// exit ;
7864: GO 8928
// case weapon of us_machine_gun :
7866: LD_VAR 0 2
7870: PUSH
7871: LD_INT 2
7873: DOUBLE
7874: EQUAL
7875: IFTRUE 7879
7877: GO 7909
7879: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7880: LD_ADDR_VAR 0 3
7884: PUSH
7885: LD_INT 1
7887: PUSH
7888: LD_INT 2
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 4
7896: PUSH
7897: LD_INT 5
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: ST_TO_ADDR
7907: GO 8912
7909: LD_INT 3
7911: DOUBLE
7912: EQUAL
7913: IFTRUE 7917
7915: GO 7947
7917: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7918: LD_ADDR_VAR 0 3
7922: PUSH
7923: LD_INT 1
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 3
7931: PUSH
7932: LD_INT 4
7934: PUSH
7935: LD_INT 5
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: ST_TO_ADDR
7945: GO 8912
7947: LD_INT 11
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 7985
7955: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: LD_INT 3
7969: PUSH
7970: LD_INT 4
7972: PUSH
7973: LD_INT 5
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: ST_TO_ADDR
7983: GO 8912
7985: LD_INT 4
7987: DOUBLE
7988: EQUAL
7989: IFTRUE 7993
7991: GO 8019
7993: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7994: LD_ADDR_VAR 0 3
7998: PUSH
7999: LD_INT 2
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: LD_INT 4
8007: PUSH
8008: LD_INT 5
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: ST_TO_ADDR
8017: GO 8912
8019: LD_INT 5
8021: DOUBLE
8022: EQUAL
8023: IFTRUE 8027
8025: GO 8053
8027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8028: LD_ADDR_VAR 0 3
8032: PUSH
8033: LD_INT 2
8035: PUSH
8036: LD_INT 3
8038: PUSH
8039: LD_INT 4
8041: PUSH
8042: LD_INT 5
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: ST_TO_ADDR
8051: GO 8912
8053: LD_INT 9
8055: DOUBLE
8056: EQUAL
8057: IFTRUE 8061
8059: GO 8087
8061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8062: LD_ADDR_VAR 0 3
8066: PUSH
8067: LD_INT 2
8069: PUSH
8070: LD_INT 3
8072: PUSH
8073: LD_INT 4
8075: PUSH
8076: LD_INT 5
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: ST_TO_ADDR
8085: GO 8912
8087: LD_INT 7
8089: DOUBLE
8090: EQUAL
8091: IFTRUE 8095
8093: GO 8121
8095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8096: LD_ADDR_VAR 0 3
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: LD_INT 4
8109: PUSH
8110: LD_INT 5
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: ST_TO_ADDR
8119: GO 8912
8121: LD_INT 12
8123: DOUBLE
8124: EQUAL
8125: IFTRUE 8129
8127: GO 8155
8129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_INT 2
8137: PUSH
8138: LD_INT 3
8140: PUSH
8141: LD_INT 4
8143: PUSH
8144: LD_INT 5
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: ST_TO_ADDR
8153: GO 8912
8155: LD_INT 13
8157: DOUBLE
8158: EQUAL
8159: IFTRUE 8163
8161: GO 8189
8163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8164: LD_ADDR_VAR 0 3
8168: PUSH
8169: LD_INT 2
8171: PUSH
8172: LD_INT 3
8174: PUSH
8175: LD_INT 4
8177: PUSH
8178: LD_INT 5
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: ST_TO_ADDR
8187: GO 8912
8189: LD_INT 14
8191: DOUBLE
8192: EQUAL
8193: IFTRUE 8197
8195: GO 8215
8197: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8198: LD_ADDR_VAR 0 3
8202: PUSH
8203: LD_INT 4
8205: PUSH
8206: LD_INT 5
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: ST_TO_ADDR
8213: GO 8912
8215: LD_INT 6
8217: DOUBLE
8218: EQUAL
8219: IFTRUE 8223
8221: GO 8241
8223: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8224: LD_ADDR_VAR 0 3
8228: PUSH
8229: LD_INT 4
8231: PUSH
8232: LD_INT 5
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: ST_TO_ADDR
8239: GO 8912
8241: LD_INT 10
8243: DOUBLE
8244: EQUAL
8245: IFTRUE 8249
8247: GO 8267
8249: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8250: LD_ADDR_VAR 0 3
8254: PUSH
8255: LD_INT 4
8257: PUSH
8258: LD_INT 5
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: ST_TO_ADDR
8265: GO 8912
8267: LD_INT 22
8269: DOUBLE
8270: EQUAL
8271: IFTRUE 8275
8273: GO 8301
8275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8276: LD_ADDR_VAR 0 3
8280: PUSH
8281: LD_INT 11
8283: PUSH
8284: LD_INT 12
8286: PUSH
8287: LD_INT 13
8289: PUSH
8290: LD_INT 14
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: ST_TO_ADDR
8299: GO 8912
8301: LD_INT 23
8303: DOUBLE
8304: EQUAL
8305: IFTRUE 8309
8307: GO 8335
8309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8310: LD_ADDR_VAR 0 3
8314: PUSH
8315: LD_INT 11
8317: PUSH
8318: LD_INT 12
8320: PUSH
8321: LD_INT 13
8323: PUSH
8324: LD_INT 14
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: ST_TO_ADDR
8333: GO 8912
8335: LD_INT 24
8337: DOUBLE
8338: EQUAL
8339: IFTRUE 8343
8341: GO 8369
8343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8344: LD_ADDR_VAR 0 3
8348: PUSH
8349: LD_INT 11
8351: PUSH
8352: LD_INT 12
8354: PUSH
8355: LD_INT 13
8357: PUSH
8358: LD_INT 14
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: ST_TO_ADDR
8367: GO 8912
8369: LD_INT 30
8371: DOUBLE
8372: EQUAL
8373: IFTRUE 8377
8375: GO 8403
8377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8378: LD_ADDR_VAR 0 3
8382: PUSH
8383: LD_INT 11
8385: PUSH
8386: LD_INT 12
8388: PUSH
8389: LD_INT 13
8391: PUSH
8392: LD_INT 14
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: ST_TO_ADDR
8401: GO 8912
8403: LD_INT 25
8405: DOUBLE
8406: EQUAL
8407: IFTRUE 8411
8409: GO 8429
8411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8412: LD_ADDR_VAR 0 3
8416: PUSH
8417: LD_INT 13
8419: PUSH
8420: LD_INT 14
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: ST_TO_ADDR
8427: GO 8912
8429: LD_INT 27
8431: DOUBLE
8432: EQUAL
8433: IFTRUE 8437
8435: GO 8455
8437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8438: LD_ADDR_VAR 0 3
8442: PUSH
8443: LD_INT 13
8445: PUSH
8446: LD_INT 14
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: ST_TO_ADDR
8453: GO 8912
8455: LD_EXP 36
8459: DOUBLE
8460: EQUAL
8461: IFTRUE 8465
8463: GO 8491
8465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_INT 11
8473: PUSH
8474: LD_INT 12
8476: PUSH
8477: LD_INT 13
8479: PUSH
8480: LD_INT 14
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: ST_TO_ADDR
8489: GO 8912
8491: LD_INT 28
8493: DOUBLE
8494: EQUAL
8495: IFTRUE 8499
8497: GO 8517
8499: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8500: LD_ADDR_VAR 0 3
8504: PUSH
8505: LD_INT 13
8507: PUSH
8508: LD_INT 14
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: ST_TO_ADDR
8515: GO 8912
8517: LD_INT 29
8519: DOUBLE
8520: EQUAL
8521: IFTRUE 8525
8523: GO 8543
8525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_INT 13
8533: PUSH
8534: LD_INT 14
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: ST_TO_ADDR
8541: GO 8912
8543: LD_INT 31
8545: DOUBLE
8546: EQUAL
8547: IFTRUE 8551
8549: GO 8569
8551: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8552: LD_ADDR_VAR 0 3
8556: PUSH
8557: LD_INT 13
8559: PUSH
8560: LD_INT 14
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: ST_TO_ADDR
8567: GO 8912
8569: LD_INT 26
8571: DOUBLE
8572: EQUAL
8573: IFTRUE 8577
8575: GO 8595
8577: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8578: LD_ADDR_VAR 0 3
8582: PUSH
8583: LD_INT 13
8585: PUSH
8586: LD_INT 14
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: ST_TO_ADDR
8593: GO 8912
8595: LD_INT 42
8597: DOUBLE
8598: EQUAL
8599: IFTRUE 8603
8601: GO 8629
8603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8604: LD_ADDR_VAR 0 3
8608: PUSH
8609: LD_INT 21
8611: PUSH
8612: LD_INT 22
8614: PUSH
8615: LD_INT 23
8617: PUSH
8618: LD_INT 24
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: ST_TO_ADDR
8627: GO 8912
8629: LD_INT 43
8631: DOUBLE
8632: EQUAL
8633: IFTRUE 8637
8635: GO 8663
8637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8638: LD_ADDR_VAR 0 3
8642: PUSH
8643: LD_INT 21
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_INT 23
8651: PUSH
8652: LD_INT 24
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: ST_TO_ADDR
8661: GO 8912
8663: LD_INT 44
8665: DOUBLE
8666: EQUAL
8667: IFTRUE 8671
8669: GO 8697
8671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8672: LD_ADDR_VAR 0 3
8676: PUSH
8677: LD_INT 21
8679: PUSH
8680: LD_INT 22
8682: PUSH
8683: LD_INT 23
8685: PUSH
8686: LD_INT 24
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: ST_TO_ADDR
8695: GO 8912
8697: LD_INT 45
8699: DOUBLE
8700: EQUAL
8701: IFTRUE 8705
8703: GO 8731
8705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8706: LD_ADDR_VAR 0 3
8710: PUSH
8711: LD_INT 21
8713: PUSH
8714: LD_INT 22
8716: PUSH
8717: LD_INT 23
8719: PUSH
8720: LD_INT 24
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: ST_TO_ADDR
8729: GO 8912
8731: LD_INT 49
8733: DOUBLE
8734: EQUAL
8735: IFTRUE 8739
8737: GO 8765
8739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8740: LD_ADDR_VAR 0 3
8744: PUSH
8745: LD_INT 21
8747: PUSH
8748: LD_INT 22
8750: PUSH
8751: LD_INT 23
8753: PUSH
8754: LD_INT 24
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: ST_TO_ADDR
8763: GO 8912
8765: LD_INT 51
8767: DOUBLE
8768: EQUAL
8769: IFTRUE 8773
8771: GO 8799
8773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8774: LD_ADDR_VAR 0 3
8778: PUSH
8779: LD_INT 21
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 23
8787: PUSH
8788: LD_INT 24
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: ST_TO_ADDR
8797: GO 8912
8799: LD_INT 52
8801: DOUBLE
8802: EQUAL
8803: IFTRUE 8807
8805: GO 8833
8807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8808: LD_ADDR_VAR 0 3
8812: PUSH
8813: LD_INT 21
8815: PUSH
8816: LD_INT 22
8818: PUSH
8819: LD_INT 23
8821: PUSH
8822: LD_INT 24
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: ST_TO_ADDR
8831: GO 8912
8833: LD_INT 53
8835: DOUBLE
8836: EQUAL
8837: IFTRUE 8841
8839: GO 8859
8841: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8842: LD_ADDR_VAR 0 3
8846: PUSH
8847: LD_INT 23
8849: PUSH
8850: LD_INT 24
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: ST_TO_ADDR
8857: GO 8912
8859: LD_INT 46
8861: DOUBLE
8862: EQUAL
8863: IFTRUE 8867
8865: GO 8885
8867: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8868: LD_ADDR_VAR 0 3
8872: PUSH
8873: LD_INT 23
8875: PUSH
8876: LD_INT 24
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: ST_TO_ADDR
8883: GO 8912
8885: LD_INT 47
8887: DOUBLE
8888: EQUAL
8889: IFTRUE 8893
8891: GO 8911
8893: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8894: LD_ADDR_VAR 0 3
8898: PUSH
8899: LD_INT 23
8901: PUSH
8902: LD_INT 24
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: ST_TO_ADDR
8909: GO 8912
8911: POP
// result := ( chassis in result ) ;
8912: LD_ADDR_VAR 0 3
8916: PUSH
8917: LD_VAR 0 1
8921: PUSH
8922: LD_VAR 0 3
8926: IN
8927: ST_TO_ADDR
// end ;
8928: LD_VAR 0 3
8932: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8933: LD_INT 0
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
8941: PPUSH
// result := array ;
8942: LD_ADDR_VAR 0 5
8946: PUSH
8947: LD_VAR 0 1
8951: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8952: LD_VAR 0 1
8956: NOT
8957: PUSH
8958: LD_VAR 0 2
8962: NOT
8963: OR
8964: PUSH
8965: LD_VAR 0 3
8969: NOT
8970: OR
8971: PUSH
8972: LD_VAR 0 2
8976: PUSH
8977: LD_VAR 0 1
8981: GREATER
8982: OR
8983: PUSH
8984: LD_VAR 0 3
8988: PUSH
8989: LD_VAR 0 1
8993: GREATER
8994: OR
8995: IFFALSE 8999
// exit ;
8997: GO 9295
// if direction then
8999: LD_VAR 0 4
9003: IFFALSE 9067
// begin d := 1 ;
9005: LD_ADDR_VAR 0 9
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// if i_from > i_to then
9013: LD_VAR 0 2
9017: PUSH
9018: LD_VAR 0 3
9022: GREATER
9023: IFFALSE 9049
// length := ( array - i_from ) + i_to else
9025: LD_ADDR_VAR 0 11
9029: PUSH
9030: LD_VAR 0 1
9034: PUSH
9035: LD_VAR 0 2
9039: MINUS
9040: PUSH
9041: LD_VAR 0 3
9045: PLUS
9046: ST_TO_ADDR
9047: GO 9065
// length := i_to - i_from ;
9049: LD_ADDR_VAR 0 11
9053: PUSH
9054: LD_VAR 0 3
9058: PUSH
9059: LD_VAR 0 2
9063: MINUS
9064: ST_TO_ADDR
// end else
9065: GO 9128
// begin d := - 1 ;
9067: LD_ADDR_VAR 0 9
9071: PUSH
9072: LD_INT 1
9074: NEG
9075: ST_TO_ADDR
// if i_from > i_to then
9076: LD_VAR 0 2
9080: PUSH
9081: LD_VAR 0 3
9085: GREATER
9086: IFFALSE 9106
// length := i_from - i_to else
9088: LD_ADDR_VAR 0 11
9092: PUSH
9093: LD_VAR 0 2
9097: PUSH
9098: LD_VAR 0 3
9102: MINUS
9103: ST_TO_ADDR
9104: GO 9128
// length := ( array - i_to ) + i_from ;
9106: LD_ADDR_VAR 0 11
9110: PUSH
9111: LD_VAR 0 1
9115: PUSH
9116: LD_VAR 0 3
9120: MINUS
9121: PUSH
9122: LD_VAR 0 2
9126: PLUS
9127: ST_TO_ADDR
// end ; if not length then
9128: LD_VAR 0 11
9132: NOT
9133: IFFALSE 9137
// exit ;
9135: GO 9295
// tmp := array ;
9137: LD_ADDR_VAR 0 10
9141: PUSH
9142: LD_VAR 0 1
9146: ST_TO_ADDR
// for i = 1 to length do
9147: LD_ADDR_VAR 0 6
9151: PUSH
9152: DOUBLE
9153: LD_INT 1
9155: DEC
9156: ST_TO_ADDR
9157: LD_VAR 0 11
9161: PUSH
9162: FOR_TO
9163: IFFALSE 9283
// begin for j = 1 to array do
9165: LD_ADDR_VAR 0 7
9169: PUSH
9170: DOUBLE
9171: LD_INT 1
9173: DEC
9174: ST_TO_ADDR
9175: LD_VAR 0 1
9179: PUSH
9180: FOR_TO
9181: IFFALSE 9269
// begin k := j + d ;
9183: LD_ADDR_VAR 0 8
9187: PUSH
9188: LD_VAR 0 7
9192: PUSH
9193: LD_VAR 0 9
9197: PLUS
9198: ST_TO_ADDR
// if k > array then
9199: LD_VAR 0 8
9203: PUSH
9204: LD_VAR 0 1
9208: GREATER
9209: IFFALSE 9219
// k := 1 ;
9211: LD_ADDR_VAR 0 8
9215: PUSH
9216: LD_INT 1
9218: ST_TO_ADDR
// if not k then
9219: LD_VAR 0 8
9223: NOT
9224: IFFALSE 9236
// k := array ;
9226: LD_ADDR_VAR 0 8
9230: PUSH
9231: LD_VAR 0 1
9235: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9236: LD_ADDR_VAR 0 10
9240: PUSH
9241: LD_VAR 0 10
9245: PPUSH
9246: LD_VAR 0 8
9250: PPUSH
9251: LD_VAR 0 1
9255: PUSH
9256: LD_VAR 0 7
9260: ARRAY
9261: PPUSH
9262: CALL_OW 1
9266: ST_TO_ADDR
// end ;
9267: GO 9180
9269: POP
9270: POP
// array := tmp ;
9271: LD_ADDR_VAR 0 1
9275: PUSH
9276: LD_VAR 0 10
9280: ST_TO_ADDR
// end ;
9281: GO 9162
9283: POP
9284: POP
// result := array ;
9285: LD_ADDR_VAR 0 5
9289: PUSH
9290: LD_VAR 0 1
9294: ST_TO_ADDR
// end ;
9295: LD_VAR 0 5
9299: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9300: LD_INT 0
9302: PPUSH
9303: PPUSH
// result := 0 ;
9304: LD_ADDR_VAR 0 3
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// if not array or not value in array then
9312: LD_VAR 0 1
9316: NOT
9317: PUSH
9318: LD_VAR 0 2
9322: PUSH
9323: LD_VAR 0 1
9327: IN
9328: NOT
9329: OR
9330: IFFALSE 9334
// exit ;
9332: GO 9388
// for i = 1 to array do
9334: LD_ADDR_VAR 0 4
9338: PUSH
9339: DOUBLE
9340: LD_INT 1
9342: DEC
9343: ST_TO_ADDR
9344: LD_VAR 0 1
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9386
// if value = array [ i ] then
9352: LD_VAR 0 2
9356: PUSH
9357: LD_VAR 0 1
9361: PUSH
9362: LD_VAR 0 4
9366: ARRAY
9367: EQUAL
9368: IFFALSE 9384
// begin result := i ;
9370: LD_ADDR_VAR 0 3
9374: PUSH
9375: LD_VAR 0 4
9379: ST_TO_ADDR
// exit ;
9380: POP
9381: POP
9382: GO 9388
// end ;
9384: GO 9349
9386: POP
9387: POP
// end ;
9388: LD_VAR 0 3
9392: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9393: LD_INT 0
9395: PPUSH
// vc_chassis := chassis ;
9396: LD_ADDR_OWVAR 37
9400: PUSH
9401: LD_VAR 0 1
9405: ST_TO_ADDR
// vc_engine := engine ;
9406: LD_ADDR_OWVAR 39
9410: PUSH
9411: LD_VAR 0 2
9415: ST_TO_ADDR
// vc_control := control ;
9416: LD_ADDR_OWVAR 38
9420: PUSH
9421: LD_VAR 0 3
9425: ST_TO_ADDR
// vc_weapon := weapon ;
9426: LD_ADDR_OWVAR 40
9430: PUSH
9431: LD_VAR 0 4
9435: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9436: LD_ADDR_OWVAR 41
9440: PUSH
9441: LD_VAR 0 5
9445: ST_TO_ADDR
// end ;
9446: LD_VAR 0 6
9450: RET
// export function WantPlant ( unit ) ; var task ; begin
9451: LD_INT 0
9453: PPUSH
9454: PPUSH
// result := false ;
9455: LD_ADDR_VAR 0 2
9459: PUSH
9460: LD_INT 0
9462: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9463: LD_ADDR_VAR 0 3
9467: PUSH
9468: LD_VAR 0 1
9472: PPUSH
9473: CALL_OW 437
9477: ST_TO_ADDR
// if task then
9478: LD_VAR 0 3
9482: IFFALSE 9510
// if task [ 1 ] [ 1 ] = p then
9484: LD_VAR 0 3
9488: PUSH
9489: LD_INT 1
9491: ARRAY
9492: PUSH
9493: LD_INT 1
9495: ARRAY
9496: PUSH
9497: LD_STRING p
9499: EQUAL
9500: IFFALSE 9510
// result := true ;
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_INT 1
9509: ST_TO_ADDR
// end ;
9510: LD_VAR 0 2
9514: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9515: LD_INT 0
9517: PPUSH
9518: PPUSH
9519: PPUSH
9520: PPUSH
// if pos < 1 then
9521: LD_VAR 0 2
9525: PUSH
9526: LD_INT 1
9528: LESS
9529: IFFALSE 9533
// exit ;
9531: GO 9836
// if pos = 1 then
9533: LD_VAR 0 2
9537: PUSH
9538: LD_INT 1
9540: EQUAL
9541: IFFALSE 9574
// result := Replace ( arr , pos [ 1 ] , value ) else
9543: LD_ADDR_VAR 0 4
9547: PUSH
9548: LD_VAR 0 1
9552: PPUSH
9553: LD_VAR 0 2
9557: PUSH
9558: LD_INT 1
9560: ARRAY
9561: PPUSH
9562: LD_VAR 0 3
9566: PPUSH
9567: CALL_OW 1
9571: ST_TO_ADDR
9572: GO 9836
// begin tmp := arr ;
9574: LD_ADDR_VAR 0 6
9578: PUSH
9579: LD_VAR 0 1
9583: ST_TO_ADDR
// s_arr := [ tmp ] ;
9584: LD_ADDR_VAR 0 7
9588: PUSH
9589: LD_VAR 0 6
9593: PUSH
9594: EMPTY
9595: LIST
9596: ST_TO_ADDR
// for i = 1 to pos - 1 do
9597: LD_ADDR_VAR 0 5
9601: PUSH
9602: DOUBLE
9603: LD_INT 1
9605: DEC
9606: ST_TO_ADDR
9607: LD_VAR 0 2
9611: PUSH
9612: LD_INT 1
9614: MINUS
9615: PUSH
9616: FOR_TO
9617: IFFALSE 9662
// begin tmp := tmp [ pos [ i ] ] ;
9619: LD_ADDR_VAR 0 6
9623: PUSH
9624: LD_VAR 0 6
9628: PUSH
9629: LD_VAR 0 2
9633: PUSH
9634: LD_VAR 0 5
9638: ARRAY
9639: ARRAY
9640: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9641: LD_ADDR_VAR 0 7
9645: PUSH
9646: LD_VAR 0 7
9650: PUSH
9651: LD_VAR 0 6
9655: PUSH
9656: EMPTY
9657: LIST
9658: ADD
9659: ST_TO_ADDR
// end ;
9660: GO 9616
9662: POP
9663: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9664: LD_ADDR_VAR 0 6
9668: PUSH
9669: LD_VAR 0 6
9673: PPUSH
9674: LD_VAR 0 2
9678: PUSH
9679: LD_VAR 0 2
9683: ARRAY
9684: PPUSH
9685: LD_VAR 0 3
9689: PPUSH
9690: CALL_OW 1
9694: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9695: LD_ADDR_VAR 0 7
9699: PUSH
9700: LD_VAR 0 7
9704: PPUSH
9705: LD_VAR 0 7
9709: PPUSH
9710: LD_VAR 0 6
9714: PPUSH
9715: CALL_OW 1
9719: ST_TO_ADDR
// for i = s_arr downto 2 do
9720: LD_ADDR_VAR 0 5
9724: PUSH
9725: DOUBLE
9726: LD_VAR 0 7
9730: INC
9731: ST_TO_ADDR
9732: LD_INT 2
9734: PUSH
9735: FOR_DOWNTO
9736: IFFALSE 9820
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9738: LD_ADDR_VAR 0 6
9742: PUSH
9743: LD_VAR 0 7
9747: PUSH
9748: LD_VAR 0 5
9752: PUSH
9753: LD_INT 1
9755: MINUS
9756: ARRAY
9757: PPUSH
9758: LD_VAR 0 2
9762: PUSH
9763: LD_VAR 0 5
9767: PUSH
9768: LD_INT 1
9770: MINUS
9771: ARRAY
9772: PPUSH
9773: LD_VAR 0 7
9777: PUSH
9778: LD_VAR 0 5
9782: ARRAY
9783: PPUSH
9784: CALL_OW 1
9788: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9789: LD_ADDR_VAR 0 7
9793: PUSH
9794: LD_VAR 0 7
9798: PPUSH
9799: LD_VAR 0 5
9803: PUSH
9804: LD_INT 1
9806: MINUS
9807: PPUSH
9808: LD_VAR 0 6
9812: PPUSH
9813: CALL_OW 1
9817: ST_TO_ADDR
// end ;
9818: GO 9735
9820: POP
9821: POP
// result := s_arr [ 1 ] ;
9822: LD_ADDR_VAR 0 4
9826: PUSH
9827: LD_VAR 0 7
9831: PUSH
9832: LD_INT 1
9834: ARRAY
9835: ST_TO_ADDR
// end ; end ;
9836: LD_VAR 0 4
9840: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9841: LD_INT 0
9843: PPUSH
9844: PPUSH
// if not list then
9845: LD_VAR 0 1
9849: NOT
9850: IFFALSE 9854
// exit ;
9852: GO 9945
// i := list [ pos1 ] ;
9854: LD_ADDR_VAR 0 5
9858: PUSH
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 2
9868: ARRAY
9869: ST_TO_ADDR
// if not i then
9870: LD_VAR 0 5
9874: NOT
9875: IFFALSE 9879
// exit ;
9877: GO 9945
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9879: LD_ADDR_VAR 0 1
9883: PUSH
9884: LD_VAR 0 1
9888: PPUSH
9889: LD_VAR 0 2
9893: PPUSH
9894: LD_VAR 0 1
9898: PUSH
9899: LD_VAR 0 3
9903: ARRAY
9904: PPUSH
9905: CALL_OW 1
9909: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9910: LD_ADDR_VAR 0 1
9914: PUSH
9915: LD_VAR 0 1
9919: PPUSH
9920: LD_VAR 0 3
9924: PPUSH
9925: LD_VAR 0 5
9929: PPUSH
9930: CALL_OW 1
9934: ST_TO_ADDR
// result := list ;
9935: LD_ADDR_VAR 0 4
9939: PUSH
9940: LD_VAR 0 1
9944: ST_TO_ADDR
// end ;
9945: LD_VAR 0 4
9949: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9950: LD_INT 0
9952: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9953: LD_ADDR_VAR 0 5
9957: PUSH
9958: LD_VAR 0 1
9962: PPUSH
9963: CALL_OW 250
9967: PPUSH
9968: LD_VAR 0 1
9972: PPUSH
9973: CALL_OW 251
9977: PPUSH
9978: LD_VAR 0 2
9982: PPUSH
9983: LD_VAR 0 3
9987: PPUSH
9988: LD_VAR 0 4
9992: PPUSH
9993: CALL 10003 0 5
9997: ST_TO_ADDR
// end ;
9998: LD_VAR 0 5
10002: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10003: LD_INT 0
10005: PPUSH
10006: PPUSH
10007: PPUSH
10008: PPUSH
// if not list then
10009: LD_VAR 0 3
10013: NOT
10014: IFFALSE 10018
// exit ;
10016: GO 10406
// result := [ ] ;
10018: LD_ADDR_VAR 0 6
10022: PUSH
10023: EMPTY
10024: ST_TO_ADDR
// for i in list do
10025: LD_ADDR_VAR 0 7
10029: PUSH
10030: LD_VAR 0 3
10034: PUSH
10035: FOR_IN
10036: IFFALSE 10238
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10038: LD_ADDR_VAR 0 9
10042: PUSH
10043: LD_VAR 0 7
10047: PPUSH
10048: LD_VAR 0 1
10052: PPUSH
10053: LD_VAR 0 2
10057: PPUSH
10058: CALL_OW 297
10062: ST_TO_ADDR
// if not result then
10063: LD_VAR 0 6
10067: NOT
10068: IFFALSE 10094
// result := [ [ i , tmp ] ] else
10070: LD_ADDR_VAR 0 6
10074: PUSH
10075: LD_VAR 0 7
10079: PUSH
10080: LD_VAR 0 9
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: EMPTY
10090: LIST
10091: ST_TO_ADDR
10092: GO 10236
// begin if result [ result ] [ 2 ] < tmp then
10094: LD_VAR 0 6
10098: PUSH
10099: LD_VAR 0 6
10103: ARRAY
10104: PUSH
10105: LD_INT 2
10107: ARRAY
10108: PUSH
10109: LD_VAR 0 9
10113: LESS
10114: IFFALSE 10156
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10116: LD_ADDR_VAR 0 6
10120: PUSH
10121: LD_VAR 0 6
10125: PPUSH
10126: LD_VAR 0 6
10130: PUSH
10131: LD_INT 1
10133: PLUS
10134: PPUSH
10135: LD_VAR 0 7
10139: PUSH
10140: LD_VAR 0 9
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PPUSH
10149: CALL_OW 2
10153: ST_TO_ADDR
10154: GO 10236
// for j = 1 to result do
10156: LD_ADDR_VAR 0 8
10160: PUSH
10161: DOUBLE
10162: LD_INT 1
10164: DEC
10165: ST_TO_ADDR
10166: LD_VAR 0 6
10170: PUSH
10171: FOR_TO
10172: IFFALSE 10234
// begin if tmp < result [ j ] [ 2 ] then
10174: LD_VAR 0 9
10178: PUSH
10179: LD_VAR 0 6
10183: PUSH
10184: LD_VAR 0 8
10188: ARRAY
10189: PUSH
10190: LD_INT 2
10192: ARRAY
10193: LESS
10194: IFFALSE 10232
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10196: LD_ADDR_VAR 0 6
10200: PUSH
10201: LD_VAR 0 6
10205: PPUSH
10206: LD_VAR 0 8
10210: PPUSH
10211: LD_VAR 0 7
10215: PUSH
10216: LD_VAR 0 9
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 2
10229: ST_TO_ADDR
// break ;
10230: GO 10234
// end ; end ;
10232: GO 10171
10234: POP
10235: POP
// end ; end ;
10236: GO 10035
10238: POP
10239: POP
// if result and not asc then
10240: LD_VAR 0 6
10244: PUSH
10245: LD_VAR 0 4
10249: NOT
10250: AND
10251: IFFALSE 10326
// begin tmp := result ;
10253: LD_ADDR_VAR 0 9
10257: PUSH
10258: LD_VAR 0 6
10262: ST_TO_ADDR
// for i = tmp downto 1 do
10263: LD_ADDR_VAR 0 7
10267: PUSH
10268: DOUBLE
10269: LD_VAR 0 9
10273: INC
10274: ST_TO_ADDR
10275: LD_INT 1
10277: PUSH
10278: FOR_DOWNTO
10279: IFFALSE 10324
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10281: LD_ADDR_VAR 0 6
10285: PUSH
10286: LD_VAR 0 6
10290: PPUSH
10291: LD_VAR 0 9
10295: PUSH
10296: LD_VAR 0 7
10300: MINUS
10301: PUSH
10302: LD_INT 1
10304: PLUS
10305: PPUSH
10306: LD_VAR 0 9
10310: PUSH
10311: LD_VAR 0 7
10315: ARRAY
10316: PPUSH
10317: CALL_OW 1
10321: ST_TO_ADDR
10322: GO 10278
10324: POP
10325: POP
// end ; tmp := [ ] ;
10326: LD_ADDR_VAR 0 9
10330: PUSH
10331: EMPTY
10332: ST_TO_ADDR
// if mode then
10333: LD_VAR 0 5
10337: IFFALSE 10406
// begin for i = 1 to result do
10339: LD_ADDR_VAR 0 7
10343: PUSH
10344: DOUBLE
10345: LD_INT 1
10347: DEC
10348: ST_TO_ADDR
10349: LD_VAR 0 6
10353: PUSH
10354: FOR_TO
10355: IFFALSE 10394
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10357: LD_ADDR_VAR 0 9
10361: PUSH
10362: LD_VAR 0 9
10366: PPUSH
10367: LD_VAR 0 7
10371: PPUSH
10372: LD_VAR 0 6
10376: PUSH
10377: LD_VAR 0 7
10381: ARRAY
10382: PUSH
10383: LD_INT 1
10385: ARRAY
10386: PPUSH
10387: CALL_OW 1
10391: ST_TO_ADDR
10392: GO 10354
10394: POP
10395: POP
// result := tmp ;
10396: LD_ADDR_VAR 0 6
10400: PUSH
10401: LD_VAR 0 9
10405: ST_TO_ADDR
// end ; end ;
10406: LD_VAR 0 6
10410: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10411: LD_INT 0
10413: PPUSH
10414: PPUSH
10415: PPUSH
10416: PPUSH
10417: PPUSH
10418: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10419: LD_ADDR_VAR 0 5
10423: PUSH
10424: LD_INT 0
10426: PUSH
10427: LD_INT 0
10429: PUSH
10430: LD_INT 0
10432: PUSH
10433: EMPTY
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: ST_TO_ADDR
// if not x or not y then
10441: LD_VAR 0 2
10445: NOT
10446: PUSH
10447: LD_VAR 0 3
10451: NOT
10452: OR
10453: IFFALSE 10457
// exit ;
10455: GO 12109
// if not range then
10457: LD_VAR 0 4
10461: NOT
10462: IFFALSE 10472
// range := 10 ;
10464: LD_ADDR_VAR 0 4
10468: PUSH
10469: LD_INT 10
10471: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10472: LD_ADDR_VAR 0 8
10476: PUSH
10477: LD_INT 81
10479: PUSH
10480: LD_VAR 0 1
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: LD_INT 92
10491: PUSH
10492: LD_VAR 0 2
10496: PUSH
10497: LD_VAR 0 3
10501: PUSH
10502: LD_VAR 0 4
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 3
10515: PUSH
10516: LD_INT 21
10518: PUSH
10519: LD_INT 3
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: PPUSH
10535: CALL_OW 69
10539: ST_TO_ADDR
// if not tmp then
10540: LD_VAR 0 8
10544: NOT
10545: IFFALSE 10549
// exit ;
10547: GO 12109
// for i in tmp do
10549: LD_ADDR_VAR 0 6
10553: PUSH
10554: LD_VAR 0 8
10558: PUSH
10559: FOR_IN
10560: IFFALSE 12084
// begin points := [ 0 , 0 , 0 ] ;
10562: LD_ADDR_VAR 0 9
10566: PUSH
10567: LD_INT 0
10569: PUSH
10570: LD_INT 0
10572: PUSH
10573: LD_INT 0
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: ST_TO_ADDR
// bpoints := 1 ;
10581: LD_ADDR_VAR 0 10
10585: PUSH
10586: LD_INT 1
10588: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10589: LD_VAR 0 6
10593: PPUSH
10594: CALL_OW 247
10598: PUSH
10599: LD_INT 1
10601: DOUBLE
10602: EQUAL
10603: IFTRUE 10607
10605: GO 11185
10607: POP
// begin if GetClass ( i ) = 1 then
10608: LD_VAR 0 6
10612: PPUSH
10613: CALL_OW 257
10617: PUSH
10618: LD_INT 1
10620: EQUAL
10621: IFFALSE 10642
// points := [ 10 , 5 , 3 ] ;
10623: LD_ADDR_VAR 0 9
10627: PUSH
10628: LD_INT 10
10630: PUSH
10631: LD_INT 5
10633: PUSH
10634: LD_INT 3
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: LIST
10641: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10642: LD_VAR 0 6
10646: PPUSH
10647: CALL_OW 257
10651: PUSH
10652: LD_INT 2
10654: PUSH
10655: LD_INT 3
10657: PUSH
10658: LD_INT 4
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: IN
10666: IFFALSE 10687
// points := [ 3 , 2 , 1 ] ;
10668: LD_ADDR_VAR 0 9
10672: PUSH
10673: LD_INT 3
10675: PUSH
10676: LD_INT 2
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10687: LD_VAR 0 6
10691: PPUSH
10692: CALL_OW 257
10696: PUSH
10697: LD_INT 5
10699: EQUAL
10700: IFFALSE 10721
// points := [ 130 , 5 , 2 ] ;
10702: LD_ADDR_VAR 0 9
10706: PUSH
10707: LD_INT 130
10709: PUSH
10710: LD_INT 5
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10721: LD_VAR 0 6
10725: PPUSH
10726: CALL_OW 257
10730: PUSH
10731: LD_INT 8
10733: EQUAL
10734: IFFALSE 10755
// points := [ 35 , 35 , 30 ] ;
10736: LD_ADDR_VAR 0 9
10740: PUSH
10741: LD_INT 35
10743: PUSH
10744: LD_INT 35
10746: PUSH
10747: LD_INT 30
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10755: LD_VAR 0 6
10759: PPUSH
10760: CALL_OW 257
10764: PUSH
10765: LD_INT 9
10767: EQUAL
10768: IFFALSE 10789
// points := [ 20 , 55 , 40 ] ;
10770: LD_ADDR_VAR 0 9
10774: PUSH
10775: LD_INT 20
10777: PUSH
10778: LD_INT 55
10780: PUSH
10781: LD_INT 40
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10789: LD_VAR 0 6
10793: PPUSH
10794: CALL_OW 257
10798: PUSH
10799: LD_INT 12
10801: PUSH
10802: LD_INT 16
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: IN
10809: IFFALSE 10830
// points := [ 5 , 3 , 2 ] ;
10811: LD_ADDR_VAR 0 9
10815: PUSH
10816: LD_INT 5
10818: PUSH
10819: LD_INT 3
10821: PUSH
10822: LD_INT 2
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10830: LD_VAR 0 6
10834: PPUSH
10835: CALL_OW 257
10839: PUSH
10840: LD_INT 17
10842: EQUAL
10843: IFFALSE 10864
// points := [ 100 , 50 , 75 ] ;
10845: LD_ADDR_VAR 0 9
10849: PUSH
10850: LD_INT 100
10852: PUSH
10853: LD_INT 50
10855: PUSH
10856: LD_INT 75
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10864: LD_VAR 0 6
10868: PPUSH
10869: CALL_OW 257
10873: PUSH
10874: LD_INT 15
10876: EQUAL
10877: IFFALSE 10898
// points := [ 10 , 5 , 3 ] ;
10879: LD_ADDR_VAR 0 9
10883: PUSH
10884: LD_INT 10
10886: PUSH
10887: LD_INT 5
10889: PUSH
10890: LD_INT 3
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10898: LD_VAR 0 6
10902: PPUSH
10903: CALL_OW 257
10907: PUSH
10908: LD_INT 14
10910: EQUAL
10911: IFFALSE 10932
// points := [ 10 , 0 , 0 ] ;
10913: LD_ADDR_VAR 0 9
10917: PUSH
10918: LD_INT 10
10920: PUSH
10921: LD_INT 0
10923: PUSH
10924: LD_INT 0
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10932: LD_VAR 0 6
10936: PPUSH
10937: CALL_OW 257
10941: PUSH
10942: LD_INT 11
10944: EQUAL
10945: IFFALSE 10966
// points := [ 30 , 10 , 5 ] ;
10947: LD_ADDR_VAR 0 9
10951: PUSH
10952: LD_INT 30
10954: PUSH
10955: LD_INT 10
10957: PUSH
10958: LD_INT 5
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10966: LD_VAR 0 1
10970: PPUSH
10971: LD_INT 5
10973: PPUSH
10974: CALL_OW 321
10978: PUSH
10979: LD_INT 2
10981: EQUAL
10982: IFFALSE 10999
// bpoints := bpoints * 1.8 ;
10984: LD_ADDR_VAR 0 10
10988: PUSH
10989: LD_VAR 0 10
10993: PUSH
10994: LD_REAL  1.80000000000000E+0000
10997: MUL
10998: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10999: LD_VAR 0 6
11003: PPUSH
11004: CALL_OW 257
11008: PUSH
11009: LD_INT 1
11011: PUSH
11012: LD_INT 2
11014: PUSH
11015: LD_INT 3
11017: PUSH
11018: LD_INT 4
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: IN
11027: PUSH
11028: LD_VAR 0 1
11032: PPUSH
11033: LD_INT 51
11035: PPUSH
11036: CALL_OW 321
11040: PUSH
11041: LD_INT 2
11043: EQUAL
11044: AND
11045: IFFALSE 11062
// bpoints := bpoints * 1.2 ;
11047: LD_ADDR_VAR 0 10
11051: PUSH
11052: LD_VAR 0 10
11056: PUSH
11057: LD_REAL  1.20000000000000E+0000
11060: MUL
11061: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11062: LD_VAR 0 6
11066: PPUSH
11067: CALL_OW 257
11071: PUSH
11072: LD_INT 5
11074: PUSH
11075: LD_INT 7
11077: PUSH
11078: LD_INT 9
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: IN
11086: PUSH
11087: LD_VAR 0 1
11091: PPUSH
11092: LD_INT 52
11094: PPUSH
11095: CALL_OW 321
11099: PUSH
11100: LD_INT 2
11102: EQUAL
11103: AND
11104: IFFALSE 11121
// bpoints := bpoints * 1.5 ;
11106: LD_ADDR_VAR 0 10
11110: PUSH
11111: LD_VAR 0 10
11115: PUSH
11116: LD_REAL  1.50000000000000E+0000
11119: MUL
11120: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11121: LD_VAR 0 1
11125: PPUSH
11126: LD_INT 66
11128: PPUSH
11129: CALL_OW 321
11133: PUSH
11134: LD_INT 2
11136: EQUAL
11137: IFFALSE 11154
// bpoints := bpoints * 1.1 ;
11139: LD_ADDR_VAR 0 10
11143: PUSH
11144: LD_VAR 0 10
11148: PUSH
11149: LD_REAL  1.10000000000000E+0000
11152: MUL
11153: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11154: LD_ADDR_VAR 0 10
11158: PUSH
11159: LD_VAR 0 10
11163: PUSH
11164: LD_VAR 0 6
11168: PPUSH
11169: LD_INT 1
11171: PPUSH
11172: CALL_OW 259
11176: PUSH
11177: LD_REAL  1.15000000000000E+0000
11180: MUL
11181: MUL
11182: ST_TO_ADDR
// end ; unit_vehicle :
11183: GO 12013
11185: LD_INT 2
11187: DOUBLE
11188: EQUAL
11189: IFTRUE 11193
11191: GO 12001
11193: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11194: LD_VAR 0 6
11198: PPUSH
11199: CALL_OW 264
11203: PUSH
11204: LD_INT 2
11206: PUSH
11207: LD_INT 42
11209: PUSH
11210: LD_INT 24
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: IN
11218: IFFALSE 11239
// points := [ 25 , 5 , 3 ] ;
11220: LD_ADDR_VAR 0 9
11224: PUSH
11225: LD_INT 25
11227: PUSH
11228: LD_INT 5
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11239: LD_VAR 0 6
11243: PPUSH
11244: CALL_OW 264
11248: PUSH
11249: LD_INT 4
11251: PUSH
11252: LD_INT 43
11254: PUSH
11255: LD_INT 25
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: LIST
11262: IN
11263: IFFALSE 11284
// points := [ 40 , 15 , 5 ] ;
11265: LD_ADDR_VAR 0 9
11269: PUSH
11270: LD_INT 40
11272: PUSH
11273: LD_INT 15
11275: PUSH
11276: LD_INT 5
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11284: LD_VAR 0 6
11288: PPUSH
11289: CALL_OW 264
11293: PUSH
11294: LD_INT 3
11296: PUSH
11297: LD_INT 23
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: IN
11304: IFFALSE 11325
// points := [ 7 , 25 , 8 ] ;
11306: LD_ADDR_VAR 0 9
11310: PUSH
11311: LD_INT 7
11313: PUSH
11314: LD_INT 25
11316: PUSH
11317: LD_INT 8
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11325: LD_VAR 0 6
11329: PPUSH
11330: CALL_OW 264
11334: PUSH
11335: LD_INT 5
11337: PUSH
11338: LD_INT 27
11340: PUSH
11341: LD_INT 44
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: IN
11349: IFFALSE 11370
// points := [ 14 , 50 , 16 ] ;
11351: LD_ADDR_VAR 0 9
11355: PUSH
11356: LD_INT 14
11358: PUSH
11359: LD_INT 50
11361: PUSH
11362: LD_INT 16
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: LIST
11369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11370: LD_VAR 0 6
11374: PPUSH
11375: CALL_OW 264
11379: PUSH
11380: LD_INT 6
11382: PUSH
11383: LD_INT 46
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: IN
11390: IFFALSE 11411
// points := [ 32 , 120 , 70 ] ;
11392: LD_ADDR_VAR 0 9
11396: PUSH
11397: LD_INT 32
11399: PUSH
11400: LD_INT 120
11402: PUSH
11403: LD_INT 70
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11411: LD_VAR 0 6
11415: PPUSH
11416: CALL_OW 264
11420: PUSH
11421: LD_INT 7
11423: PUSH
11424: LD_INT 28
11426: PUSH
11427: LD_INT 45
11429: PUSH
11430: LD_EXP 36
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: IN
11441: IFFALSE 11462
// points := [ 35 , 20 , 45 ] ;
11443: LD_ADDR_VAR 0 9
11447: PUSH
11448: LD_INT 35
11450: PUSH
11451: LD_INT 20
11453: PUSH
11454: LD_INT 45
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11462: LD_VAR 0 6
11466: PPUSH
11467: CALL_OW 264
11471: PUSH
11472: LD_INT 47
11474: PUSH
11475: EMPTY
11476: LIST
11477: IN
11478: IFFALSE 11499
// points := [ 67 , 45 , 75 ] ;
11480: LD_ADDR_VAR 0 9
11484: PUSH
11485: LD_INT 67
11487: PUSH
11488: LD_INT 45
11490: PUSH
11491: LD_INT 75
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11499: LD_VAR 0 6
11503: PPUSH
11504: CALL_OW 264
11508: PUSH
11509: LD_INT 26
11511: PUSH
11512: EMPTY
11513: LIST
11514: IN
11515: IFFALSE 11536
// points := [ 120 , 30 , 80 ] ;
11517: LD_ADDR_VAR 0 9
11521: PUSH
11522: LD_INT 120
11524: PUSH
11525: LD_INT 30
11527: PUSH
11528: LD_INT 80
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11536: LD_VAR 0 6
11540: PPUSH
11541: CALL_OW 264
11545: PUSH
11546: LD_INT 22
11548: PUSH
11549: EMPTY
11550: LIST
11551: IN
11552: IFFALSE 11573
// points := [ 40 , 1 , 1 ] ;
11554: LD_ADDR_VAR 0 9
11558: PUSH
11559: LD_INT 40
11561: PUSH
11562: LD_INT 1
11564: PUSH
11565: LD_INT 1
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11573: LD_VAR 0 6
11577: PPUSH
11578: CALL_OW 264
11582: PUSH
11583: LD_INT 29
11585: PUSH
11586: EMPTY
11587: LIST
11588: IN
11589: IFFALSE 11610
// points := [ 70 , 200 , 400 ] ;
11591: LD_ADDR_VAR 0 9
11595: PUSH
11596: LD_INT 70
11598: PUSH
11599: LD_INT 200
11601: PUSH
11602: LD_INT 400
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11610: LD_VAR 0 6
11614: PPUSH
11615: CALL_OW 264
11619: PUSH
11620: LD_INT 14
11622: PUSH
11623: LD_INT 53
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: IN
11630: IFFALSE 11651
// points := [ 40 , 10 , 20 ] ;
11632: LD_ADDR_VAR 0 9
11636: PUSH
11637: LD_INT 40
11639: PUSH
11640: LD_INT 10
11642: PUSH
11643: LD_INT 20
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11651: LD_VAR 0 6
11655: PPUSH
11656: CALL_OW 264
11660: PUSH
11661: LD_INT 9
11663: PUSH
11664: EMPTY
11665: LIST
11666: IN
11667: IFFALSE 11688
// points := [ 5 , 70 , 20 ] ;
11669: LD_ADDR_VAR 0 9
11673: PUSH
11674: LD_INT 5
11676: PUSH
11677: LD_INT 70
11679: PUSH
11680: LD_INT 20
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11688: LD_VAR 0 6
11692: PPUSH
11693: CALL_OW 264
11697: PUSH
11698: LD_INT 10
11700: PUSH
11701: EMPTY
11702: LIST
11703: IN
11704: IFFALSE 11725
// points := [ 35 , 110 , 70 ] ;
11706: LD_ADDR_VAR 0 9
11710: PUSH
11711: LD_INT 35
11713: PUSH
11714: LD_INT 110
11716: PUSH
11717: LD_INT 70
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11725: LD_VAR 0 6
11729: PPUSH
11730: CALL_OW 265
11734: PUSH
11735: LD_INT 25
11737: EQUAL
11738: IFFALSE 11759
// points := [ 80 , 65 , 100 ] ;
11740: LD_ADDR_VAR 0 9
11744: PUSH
11745: LD_INT 80
11747: PUSH
11748: LD_INT 65
11750: PUSH
11751: LD_INT 100
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: LIST
11758: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11759: LD_VAR 0 6
11763: PPUSH
11764: CALL_OW 263
11768: PUSH
11769: LD_INT 1
11771: EQUAL
11772: IFFALSE 11807
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11774: LD_ADDR_VAR 0 10
11778: PUSH
11779: LD_VAR 0 10
11783: PUSH
11784: LD_VAR 0 6
11788: PPUSH
11789: CALL_OW 311
11793: PPUSH
11794: LD_INT 3
11796: PPUSH
11797: CALL_OW 259
11801: PUSH
11802: LD_INT 4
11804: MUL
11805: MUL
11806: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11807: LD_VAR 0 6
11811: PPUSH
11812: CALL_OW 263
11816: PUSH
11817: LD_INT 2
11819: EQUAL
11820: IFFALSE 11871
// begin j := IsControledBy ( i ) ;
11822: LD_ADDR_VAR 0 7
11826: PUSH
11827: LD_VAR 0 6
11831: PPUSH
11832: CALL_OW 312
11836: ST_TO_ADDR
// if j then
11837: LD_VAR 0 7
11841: IFFALSE 11871
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11843: LD_ADDR_VAR 0 10
11847: PUSH
11848: LD_VAR 0 10
11852: PUSH
11853: LD_VAR 0 7
11857: PPUSH
11858: LD_INT 3
11860: PPUSH
11861: CALL_OW 259
11865: PUSH
11866: LD_INT 3
11868: MUL
11869: MUL
11870: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11871: LD_VAR 0 6
11875: PPUSH
11876: CALL_OW 264
11880: PUSH
11881: LD_INT 5
11883: PUSH
11884: LD_INT 6
11886: PUSH
11887: LD_INT 46
11889: PUSH
11890: LD_INT 44
11892: PUSH
11893: LD_INT 47
11895: PUSH
11896: LD_INT 45
11898: PUSH
11899: LD_INT 28
11901: PUSH
11902: LD_INT 7
11904: PUSH
11905: LD_INT 27
11907: PUSH
11908: LD_INT 29
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: IN
11923: PUSH
11924: LD_VAR 0 1
11928: PPUSH
11929: LD_INT 52
11931: PPUSH
11932: CALL_OW 321
11936: PUSH
11937: LD_INT 2
11939: EQUAL
11940: AND
11941: IFFALSE 11958
// bpoints := bpoints * 1.2 ;
11943: LD_ADDR_VAR 0 10
11947: PUSH
11948: LD_VAR 0 10
11952: PUSH
11953: LD_REAL  1.20000000000000E+0000
11956: MUL
11957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11958: LD_VAR 0 6
11962: PPUSH
11963: CALL_OW 264
11967: PUSH
11968: LD_INT 6
11970: PUSH
11971: LD_INT 46
11973: PUSH
11974: LD_INT 47
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: IN
11982: IFFALSE 11999
// bpoints := bpoints * 1.2 ;
11984: LD_ADDR_VAR 0 10
11988: PUSH
11989: LD_VAR 0 10
11993: PUSH
11994: LD_REAL  1.20000000000000E+0000
11997: MUL
11998: ST_TO_ADDR
// end ; unit_building :
11999: GO 12013
12001: LD_INT 3
12003: DOUBLE
12004: EQUAL
12005: IFTRUE 12009
12007: GO 12012
12009: POP
// ; end ;
12010: GO 12013
12012: POP
// for j = 1 to 3 do
12013: LD_ADDR_VAR 0 7
12017: PUSH
12018: DOUBLE
12019: LD_INT 1
12021: DEC
12022: ST_TO_ADDR
12023: LD_INT 3
12025: PUSH
12026: FOR_TO
12027: IFFALSE 12080
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12029: LD_ADDR_VAR 0 5
12033: PUSH
12034: LD_VAR 0 5
12038: PPUSH
12039: LD_VAR 0 7
12043: PPUSH
12044: LD_VAR 0 5
12048: PUSH
12049: LD_VAR 0 7
12053: ARRAY
12054: PUSH
12055: LD_VAR 0 9
12059: PUSH
12060: LD_VAR 0 7
12064: ARRAY
12065: PUSH
12066: LD_VAR 0 10
12070: MUL
12071: PLUS
12072: PPUSH
12073: CALL_OW 1
12077: ST_TO_ADDR
12078: GO 12026
12080: POP
12081: POP
// end ;
12082: GO 10559
12084: POP
12085: POP
// result := Replace ( result , 4 , tmp ) ;
12086: LD_ADDR_VAR 0 5
12090: PUSH
12091: LD_VAR 0 5
12095: PPUSH
12096: LD_INT 4
12098: PPUSH
12099: LD_VAR 0 8
12103: PPUSH
12104: CALL_OW 1
12108: ST_TO_ADDR
// end ;
12109: LD_VAR 0 5
12113: RET
// export function DangerAtRange ( unit , range ) ; begin
12114: LD_INT 0
12116: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12117: LD_ADDR_VAR 0 3
12121: PUSH
12122: LD_VAR 0 1
12126: PPUSH
12127: CALL_OW 255
12131: PPUSH
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 250
12141: PPUSH
12142: LD_VAR 0 1
12146: PPUSH
12147: CALL_OW 251
12151: PPUSH
12152: LD_VAR 0 2
12156: PPUSH
12157: CALL 10411 0 4
12161: ST_TO_ADDR
// end ;
12162: LD_VAR 0 3
12166: RET
// export function DangerInArea ( side , area ) ; begin
12167: LD_INT 0
12169: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12170: LD_ADDR_VAR 0 3
12174: PUSH
12175: LD_VAR 0 2
12179: PPUSH
12180: LD_INT 81
12182: PUSH
12183: LD_VAR 0 1
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 70
12196: ST_TO_ADDR
// end ;
12197: LD_VAR 0 3
12201: RET
// export function IsExtension ( b ) ; begin
12202: LD_INT 0
12204: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12205: LD_ADDR_VAR 0 2
12209: PUSH
12210: LD_VAR 0 1
12214: PUSH
12215: LD_INT 23
12217: PUSH
12218: LD_INT 20
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_INT 17
12226: PUSH
12227: LD_INT 24
12229: PUSH
12230: LD_INT 21
12232: PUSH
12233: LD_INT 19
12235: PUSH
12236: LD_INT 16
12238: PUSH
12239: LD_INT 25
12241: PUSH
12242: LD_INT 18
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: IN
12257: ST_TO_ADDR
// end ;
12258: LD_VAR 0 2
12262: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12263: LD_INT 0
12265: PPUSH
12266: PPUSH
12267: PPUSH
// result := [ ] ;
12268: LD_ADDR_VAR 0 4
12272: PUSH
12273: EMPTY
12274: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12275: LD_ADDR_VAR 0 5
12279: PUSH
12280: LD_VAR 0 2
12284: PPUSH
12285: LD_INT 21
12287: PUSH
12288: LD_INT 3
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 70
12299: ST_TO_ADDR
// if not tmp then
12300: LD_VAR 0 5
12304: NOT
12305: IFFALSE 12309
// exit ;
12307: GO 12373
// if checkLink then
12309: LD_VAR 0 3
12313: IFFALSE 12363
// begin for i in tmp do
12315: LD_ADDR_VAR 0 6
12319: PUSH
12320: LD_VAR 0 5
12324: PUSH
12325: FOR_IN
12326: IFFALSE 12361
// if GetBase ( i ) <> base then
12328: LD_VAR 0 6
12332: PPUSH
12333: CALL_OW 274
12337: PUSH
12338: LD_VAR 0 1
12342: NONEQUAL
12343: IFFALSE 12359
// ComLinkToBase ( base , i ) ;
12345: LD_VAR 0 1
12349: PPUSH
12350: LD_VAR 0 6
12354: PPUSH
12355: CALL_OW 169
12359: GO 12325
12361: POP
12362: POP
// end ; result := tmp ;
12363: LD_ADDR_VAR 0 4
12367: PUSH
12368: LD_VAR 0 5
12372: ST_TO_ADDR
// end ;
12373: LD_VAR 0 4
12377: RET
// export function ComComplete ( units , b ) ; var i ; begin
12378: LD_INT 0
12380: PPUSH
12381: PPUSH
// if not units then
12382: LD_VAR 0 1
12386: NOT
12387: IFFALSE 12391
// exit ;
12389: GO 12481
// for i in units do
12391: LD_ADDR_VAR 0 4
12395: PUSH
12396: LD_VAR 0 1
12400: PUSH
12401: FOR_IN
12402: IFFALSE 12479
// if BuildingStatus ( b ) = bs_build then
12404: LD_VAR 0 2
12408: PPUSH
12409: CALL_OW 461
12413: PUSH
12414: LD_INT 1
12416: EQUAL
12417: IFFALSE 12477
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12419: LD_VAR 0 4
12423: PPUSH
12424: LD_STRING h
12426: PUSH
12427: LD_VAR 0 2
12431: PPUSH
12432: CALL_OW 250
12436: PUSH
12437: LD_VAR 0 2
12441: PPUSH
12442: CALL_OW 251
12446: PUSH
12447: LD_VAR 0 2
12451: PUSH
12452: LD_INT 0
12454: PUSH
12455: LD_INT 0
12457: PUSH
12458: LD_INT 0
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: PPUSH
12473: CALL_OW 446
12477: GO 12401
12479: POP
12480: POP
// end ;
12481: LD_VAR 0 3
12485: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12486: LD_INT 0
12488: PPUSH
12489: PPUSH
12490: PPUSH
12491: PPUSH
12492: PPUSH
12493: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12494: LD_VAR 0 1
12498: NOT
12499: PUSH
12500: LD_VAR 0 1
12504: PPUSH
12505: CALL_OW 263
12509: PUSH
12510: LD_INT 2
12512: NONEQUAL
12513: OR
12514: IFFALSE 12518
// exit ;
12516: GO 12834
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12518: LD_ADDR_VAR 0 6
12522: PUSH
12523: LD_INT 22
12525: PUSH
12526: LD_VAR 0 1
12530: PPUSH
12531: CALL_OW 255
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: LD_INT 30
12545: PUSH
12546: LD_INT 36
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 34
12555: PUSH
12556: LD_INT 31
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 69
12576: ST_TO_ADDR
// if not tmp then
12577: LD_VAR 0 6
12581: NOT
12582: IFFALSE 12586
// exit ;
12584: GO 12834
// result := [ ] ;
12586: LD_ADDR_VAR 0 2
12590: PUSH
12591: EMPTY
12592: ST_TO_ADDR
// for i in tmp do
12593: LD_ADDR_VAR 0 3
12597: PUSH
12598: LD_VAR 0 6
12602: PUSH
12603: FOR_IN
12604: IFFALSE 12675
// begin t := UnitsInside ( i ) ;
12606: LD_ADDR_VAR 0 4
12610: PUSH
12611: LD_VAR 0 3
12615: PPUSH
12616: CALL_OW 313
12620: ST_TO_ADDR
// if t then
12621: LD_VAR 0 4
12625: IFFALSE 12673
// for j in t do
12627: LD_ADDR_VAR 0 7
12631: PUSH
12632: LD_VAR 0 4
12636: PUSH
12637: FOR_IN
12638: IFFALSE 12671
// result := Replace ( result , result + 1 , j ) ;
12640: LD_ADDR_VAR 0 2
12644: PUSH
12645: LD_VAR 0 2
12649: PPUSH
12650: LD_VAR 0 2
12654: PUSH
12655: LD_INT 1
12657: PLUS
12658: PPUSH
12659: LD_VAR 0 7
12663: PPUSH
12664: CALL_OW 1
12668: ST_TO_ADDR
12669: GO 12637
12671: POP
12672: POP
// end ;
12673: GO 12603
12675: POP
12676: POP
// if not result then
12677: LD_VAR 0 2
12681: NOT
12682: IFFALSE 12686
// exit ;
12684: GO 12834
// mech := result [ 1 ] ;
12686: LD_ADDR_VAR 0 5
12690: PUSH
12691: LD_VAR 0 2
12695: PUSH
12696: LD_INT 1
12698: ARRAY
12699: ST_TO_ADDR
// if result > 1 then
12700: LD_VAR 0 2
12704: PUSH
12705: LD_INT 1
12707: GREATER
12708: IFFALSE 12820
// begin for i = 2 to result do
12710: LD_ADDR_VAR 0 3
12714: PUSH
12715: DOUBLE
12716: LD_INT 2
12718: DEC
12719: ST_TO_ADDR
12720: LD_VAR 0 2
12724: PUSH
12725: FOR_TO
12726: IFFALSE 12818
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12728: LD_ADDR_VAR 0 4
12732: PUSH
12733: LD_VAR 0 2
12737: PUSH
12738: LD_VAR 0 3
12742: ARRAY
12743: PPUSH
12744: LD_INT 3
12746: PPUSH
12747: CALL_OW 259
12751: PUSH
12752: LD_VAR 0 2
12756: PUSH
12757: LD_VAR 0 3
12761: ARRAY
12762: PPUSH
12763: CALL_OW 432
12767: MINUS
12768: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12769: LD_VAR 0 4
12773: PUSH
12774: LD_VAR 0 5
12778: PPUSH
12779: LD_INT 3
12781: PPUSH
12782: CALL_OW 259
12786: PUSH
12787: LD_VAR 0 5
12791: PPUSH
12792: CALL_OW 432
12796: MINUS
12797: GREATEREQUAL
12798: IFFALSE 12816
// mech := result [ i ] ;
12800: LD_ADDR_VAR 0 5
12804: PUSH
12805: LD_VAR 0 2
12809: PUSH
12810: LD_VAR 0 3
12814: ARRAY
12815: ST_TO_ADDR
// end ;
12816: GO 12725
12818: POP
12819: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12820: LD_VAR 0 1
12824: PPUSH
12825: LD_VAR 0 5
12829: PPUSH
12830: CALL_OW 135
// end ;
12834: LD_VAR 0 2
12838: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12839: LD_INT 0
12841: PPUSH
12842: PPUSH
12843: PPUSH
12844: PPUSH
12845: PPUSH
12846: PPUSH
12847: PPUSH
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
12852: PPUSH
12853: PPUSH
// result := [ ] ;
12854: LD_ADDR_VAR 0 7
12858: PUSH
12859: EMPTY
12860: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12861: LD_VAR 0 1
12865: PPUSH
12866: CALL_OW 266
12870: PUSH
12871: LD_INT 0
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: IN
12881: NOT
12882: IFFALSE 12886
// exit ;
12884: GO 14520
// if name then
12886: LD_VAR 0 3
12890: IFFALSE 12906
// SetBName ( base_dep , name ) ;
12892: LD_VAR 0 1
12896: PPUSH
12897: LD_VAR 0 3
12901: PPUSH
12902: CALL_OW 500
// base := GetBase ( base_dep ) ;
12906: LD_ADDR_VAR 0 15
12910: PUSH
12911: LD_VAR 0 1
12915: PPUSH
12916: CALL_OW 274
12920: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12921: LD_ADDR_VAR 0 16
12925: PUSH
12926: LD_VAR 0 1
12930: PPUSH
12931: CALL_OW 255
12935: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12936: LD_ADDR_VAR 0 17
12940: PUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 248
12950: ST_TO_ADDR
// if sources then
12951: LD_VAR 0 5
12955: IFFALSE 13002
// for i = 1 to 3 do
12957: LD_ADDR_VAR 0 8
12961: PUSH
12962: DOUBLE
12963: LD_INT 1
12965: DEC
12966: ST_TO_ADDR
12967: LD_INT 3
12969: PUSH
12970: FOR_TO
12971: IFFALSE 13000
// AddResourceType ( base , i , sources [ i ] ) ;
12973: LD_VAR 0 15
12977: PPUSH
12978: LD_VAR 0 8
12982: PPUSH
12983: LD_VAR 0 5
12987: PUSH
12988: LD_VAR 0 8
12992: ARRAY
12993: PPUSH
12994: CALL_OW 276
12998: GO 12970
13000: POP
13001: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13002: LD_ADDR_VAR 0 18
13006: PUSH
13007: LD_VAR 0 15
13011: PPUSH
13012: LD_VAR 0 2
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: CALL 12263 0 3
13024: ST_TO_ADDR
// InitHc ;
13025: CALL_OW 19
// InitUc ;
13029: CALL_OW 18
// uc_side := side ;
13033: LD_ADDR_OWVAR 20
13037: PUSH
13038: LD_VAR 0 16
13042: ST_TO_ADDR
// uc_nation := nation ;
13043: LD_ADDR_OWVAR 21
13047: PUSH
13048: LD_VAR 0 17
13052: ST_TO_ADDR
// if buildings then
13053: LD_VAR 0 18
13057: IFFALSE 14379
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13059: LD_ADDR_VAR 0 19
13063: PUSH
13064: LD_VAR 0 18
13068: PPUSH
13069: LD_INT 2
13071: PUSH
13072: LD_INT 30
13074: PUSH
13075: LD_INT 29
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 30
13084: PUSH
13085: LD_INT 30
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: PPUSH
13097: CALL_OW 72
13101: ST_TO_ADDR
// if tmp then
13102: LD_VAR 0 19
13106: IFFALSE 13154
// for i in tmp do
13108: LD_ADDR_VAR 0 8
13112: PUSH
13113: LD_VAR 0 19
13117: PUSH
13118: FOR_IN
13119: IFFALSE 13152
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13121: LD_VAR 0 8
13125: PPUSH
13126: CALL_OW 250
13130: PPUSH
13131: LD_VAR 0 8
13135: PPUSH
13136: CALL_OW 251
13140: PPUSH
13141: LD_VAR 0 16
13145: PPUSH
13146: CALL_OW 441
13150: GO 13118
13152: POP
13153: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13154: LD_VAR 0 18
13158: PPUSH
13159: LD_INT 2
13161: PUSH
13162: LD_INT 30
13164: PUSH
13165: LD_INT 32
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 30
13174: PUSH
13175: LD_INT 33
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 72
13191: IFFALSE 13279
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13193: LD_ADDR_VAR 0 8
13197: PUSH
13198: LD_VAR 0 18
13202: PPUSH
13203: LD_INT 2
13205: PUSH
13206: LD_INT 30
13208: PUSH
13209: LD_INT 32
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 30
13218: PUSH
13219: LD_INT 33
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: PPUSH
13231: CALL_OW 72
13235: PUSH
13236: FOR_IN
13237: IFFALSE 13277
// begin if not GetBWeapon ( i ) then
13239: LD_VAR 0 8
13243: PPUSH
13244: CALL_OW 269
13248: NOT
13249: IFFALSE 13275
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13251: LD_VAR 0 8
13255: PPUSH
13256: LD_VAR 0 8
13260: PPUSH
13261: LD_VAR 0 2
13265: PPUSH
13266: CALL 14525 0 2
13270: PPUSH
13271: CALL_OW 431
// end ;
13275: GO 13236
13277: POP
13278: POP
// end ; for i = 1 to personel do
13279: LD_ADDR_VAR 0 8
13283: PUSH
13284: DOUBLE
13285: LD_INT 1
13287: DEC
13288: ST_TO_ADDR
13289: LD_VAR 0 6
13293: PUSH
13294: FOR_TO
13295: IFFALSE 14359
// begin if i > 4 then
13297: LD_VAR 0 8
13301: PUSH
13302: LD_INT 4
13304: GREATER
13305: IFFALSE 13309
// break ;
13307: GO 14359
// case i of 1 :
13309: LD_VAR 0 8
13313: PUSH
13314: LD_INT 1
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13402
13322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13323: LD_ADDR_VAR 0 12
13327: PUSH
13328: LD_VAR 0 18
13332: PPUSH
13333: LD_INT 22
13335: PUSH
13336: LD_VAR 0 16
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 58
13347: PUSH
13348: EMPTY
13349: LIST
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: LD_INT 30
13356: PUSH
13357: LD_INT 32
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 30
13366: PUSH
13367: LD_INT 4
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 30
13376: PUSH
13377: LD_INT 5
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: PPUSH
13395: CALL_OW 72
13399: ST_TO_ADDR
13400: GO 13624
13402: LD_INT 2
13404: DOUBLE
13405: EQUAL
13406: IFTRUE 13410
13408: GO 13472
13410: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13411: LD_ADDR_VAR 0 12
13415: PUSH
13416: LD_VAR 0 18
13420: PPUSH
13421: LD_INT 22
13423: PUSH
13424: LD_VAR 0 16
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 2
13435: PUSH
13436: LD_INT 30
13438: PUSH
13439: LD_INT 0
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 30
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: LIST
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 72
13469: ST_TO_ADDR
13470: GO 13624
13472: LD_INT 3
13474: DOUBLE
13475: EQUAL
13476: IFTRUE 13480
13478: GO 13542
13480: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13481: LD_ADDR_VAR 0 12
13485: PUSH
13486: LD_VAR 0 18
13490: PPUSH
13491: LD_INT 22
13493: PUSH
13494: LD_VAR 0 16
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 2
13505: PUSH
13506: LD_INT 30
13508: PUSH
13509: LD_INT 2
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 30
13518: PUSH
13519: LD_INT 3
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PPUSH
13535: CALL_OW 72
13539: ST_TO_ADDR
13540: GO 13624
13542: LD_INT 4
13544: DOUBLE
13545: EQUAL
13546: IFTRUE 13550
13548: GO 13623
13550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13551: LD_ADDR_VAR 0 12
13555: PUSH
13556: LD_VAR 0 18
13560: PPUSH
13561: LD_INT 22
13563: PUSH
13564: LD_VAR 0 16
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 30
13578: PUSH
13579: LD_INT 6
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 30
13588: PUSH
13589: LD_INT 7
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 30
13598: PUSH
13599: LD_INT 8
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PPUSH
13616: CALL_OW 72
13620: ST_TO_ADDR
13621: GO 13624
13623: POP
// if i = 1 then
13624: LD_VAR 0 8
13628: PUSH
13629: LD_INT 1
13631: EQUAL
13632: IFFALSE 13743
// begin tmp := [ ] ;
13634: LD_ADDR_VAR 0 19
13638: PUSH
13639: EMPTY
13640: ST_TO_ADDR
// for j in f do
13641: LD_ADDR_VAR 0 9
13645: PUSH
13646: LD_VAR 0 12
13650: PUSH
13651: FOR_IN
13652: IFFALSE 13725
// if GetBType ( j ) = b_bunker then
13654: LD_VAR 0 9
13658: PPUSH
13659: CALL_OW 266
13663: PUSH
13664: LD_INT 32
13666: EQUAL
13667: IFFALSE 13694
// tmp := Insert ( tmp , 1 , j ) else
13669: LD_ADDR_VAR 0 19
13673: PUSH
13674: LD_VAR 0 19
13678: PPUSH
13679: LD_INT 1
13681: PPUSH
13682: LD_VAR 0 9
13686: PPUSH
13687: CALL_OW 2
13691: ST_TO_ADDR
13692: GO 13723
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13694: LD_ADDR_VAR 0 19
13698: PUSH
13699: LD_VAR 0 19
13703: PPUSH
13704: LD_VAR 0 19
13708: PUSH
13709: LD_INT 1
13711: PLUS
13712: PPUSH
13713: LD_VAR 0 9
13717: PPUSH
13718: CALL_OW 2
13722: ST_TO_ADDR
13723: GO 13651
13725: POP
13726: POP
// if tmp then
13727: LD_VAR 0 19
13731: IFFALSE 13743
// f := tmp ;
13733: LD_ADDR_VAR 0 12
13737: PUSH
13738: LD_VAR 0 19
13742: ST_TO_ADDR
// end ; x := personel [ i ] ;
13743: LD_ADDR_VAR 0 13
13747: PUSH
13748: LD_VAR 0 6
13752: PUSH
13753: LD_VAR 0 8
13757: ARRAY
13758: ST_TO_ADDR
// if x = - 1 then
13759: LD_VAR 0 13
13763: PUSH
13764: LD_INT 1
13766: NEG
13767: EQUAL
13768: IFFALSE 13977
// begin for j in f do
13770: LD_ADDR_VAR 0 9
13774: PUSH
13775: LD_VAR 0 12
13779: PUSH
13780: FOR_IN
13781: IFFALSE 13973
// repeat InitHc ;
13783: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13787: LD_VAR 0 9
13791: PPUSH
13792: CALL_OW 266
13796: PUSH
13797: LD_INT 5
13799: EQUAL
13800: IFFALSE 13870
// begin if UnitsInside ( j ) < 3 then
13802: LD_VAR 0 9
13806: PPUSH
13807: CALL_OW 313
13811: PUSH
13812: LD_INT 3
13814: LESS
13815: IFFALSE 13851
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13817: LD_INT 0
13819: PPUSH
13820: LD_INT 5
13822: PUSH
13823: LD_INT 8
13825: PUSH
13826: LD_INT 9
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: LIST
13833: PUSH
13834: LD_VAR 0 17
13838: ARRAY
13839: PPUSH
13840: LD_VAR 0 4
13844: PPUSH
13845: CALL_OW 380
13849: GO 13868
// PrepareHuman ( false , i , skill ) ;
13851: LD_INT 0
13853: PPUSH
13854: LD_VAR 0 8
13858: PPUSH
13859: LD_VAR 0 4
13863: PPUSH
13864: CALL_OW 380
// end else
13868: GO 13887
// PrepareHuman ( false , i , skill ) ;
13870: LD_INT 0
13872: PPUSH
13873: LD_VAR 0 8
13877: PPUSH
13878: LD_VAR 0 4
13882: PPUSH
13883: CALL_OW 380
// un := CreateHuman ;
13887: LD_ADDR_VAR 0 14
13891: PUSH
13892: CALL_OW 44
13896: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13897: LD_ADDR_VAR 0 7
13901: PUSH
13902: LD_VAR 0 7
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: LD_VAR 0 14
13914: PPUSH
13915: CALL_OW 2
13919: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13920: LD_VAR 0 14
13924: PPUSH
13925: LD_VAR 0 9
13929: PPUSH
13930: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13934: LD_VAR 0 9
13938: PPUSH
13939: CALL_OW 313
13943: PUSH
13944: LD_INT 6
13946: EQUAL
13947: PUSH
13948: LD_VAR 0 9
13952: PPUSH
13953: CALL_OW 266
13957: PUSH
13958: LD_INT 32
13960: PUSH
13961: LD_INT 31
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: IN
13968: OR
13969: IFFALSE 13783
13971: GO 13780
13973: POP
13974: POP
// end else
13975: GO 14357
// for j = 1 to x do
13977: LD_ADDR_VAR 0 9
13981: PUSH
13982: DOUBLE
13983: LD_INT 1
13985: DEC
13986: ST_TO_ADDR
13987: LD_VAR 0 13
13991: PUSH
13992: FOR_TO
13993: IFFALSE 14355
// begin InitHc ;
13995: CALL_OW 19
// if not f then
13999: LD_VAR 0 12
14003: NOT
14004: IFFALSE 14093
// begin PrepareHuman ( false , i , skill ) ;
14006: LD_INT 0
14008: PPUSH
14009: LD_VAR 0 8
14013: PPUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 380
// un := CreateHuman ;
14023: LD_ADDR_VAR 0 14
14027: PUSH
14028: CALL_OW 44
14032: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14033: LD_ADDR_VAR 0 7
14037: PUSH
14038: LD_VAR 0 7
14042: PPUSH
14043: LD_INT 1
14045: PPUSH
14046: LD_VAR 0 14
14050: PPUSH
14051: CALL_OW 2
14055: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14056: LD_VAR 0 14
14060: PPUSH
14061: LD_VAR 0 1
14065: PPUSH
14066: CALL_OW 250
14070: PPUSH
14071: LD_VAR 0 1
14075: PPUSH
14076: CALL_OW 251
14080: PPUSH
14081: LD_INT 10
14083: PPUSH
14084: LD_INT 0
14086: PPUSH
14087: CALL_OW 50
// continue ;
14091: GO 13992
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14093: LD_VAR 0 12
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: PPUSH
14102: CALL_OW 313
14106: PUSH
14107: LD_VAR 0 12
14111: PUSH
14112: LD_INT 1
14114: ARRAY
14115: PPUSH
14116: CALL_OW 266
14120: PUSH
14121: LD_INT 32
14123: PUSH
14124: LD_INT 31
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: IN
14131: AND
14132: PUSH
14133: LD_VAR 0 12
14137: PUSH
14138: LD_INT 1
14140: ARRAY
14141: PPUSH
14142: CALL_OW 313
14146: PUSH
14147: LD_INT 6
14149: EQUAL
14150: OR
14151: IFFALSE 14171
// f := Delete ( f , 1 ) ;
14153: LD_ADDR_VAR 0 12
14157: PUSH
14158: LD_VAR 0 12
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 3
14170: ST_TO_ADDR
// if not f then
14171: LD_VAR 0 12
14175: NOT
14176: IFFALSE 14194
// begin x := x + 2 ;
14178: LD_ADDR_VAR 0 13
14182: PUSH
14183: LD_VAR 0 13
14187: PUSH
14188: LD_INT 2
14190: PLUS
14191: ST_TO_ADDR
// continue ;
14192: GO 13992
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14194: LD_VAR 0 12
14198: PUSH
14199: LD_INT 1
14201: ARRAY
14202: PPUSH
14203: CALL_OW 266
14207: PUSH
14208: LD_INT 5
14210: EQUAL
14211: IFFALSE 14285
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14213: LD_VAR 0 12
14217: PUSH
14218: LD_INT 1
14220: ARRAY
14221: PPUSH
14222: CALL_OW 313
14226: PUSH
14227: LD_INT 3
14229: LESS
14230: IFFALSE 14266
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14232: LD_INT 0
14234: PPUSH
14235: LD_INT 5
14237: PUSH
14238: LD_INT 8
14240: PUSH
14241: LD_INT 9
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: PUSH
14249: LD_VAR 0 17
14253: ARRAY
14254: PPUSH
14255: LD_VAR 0 4
14259: PPUSH
14260: CALL_OW 380
14264: GO 14283
// PrepareHuman ( false , i , skill ) ;
14266: LD_INT 0
14268: PPUSH
14269: LD_VAR 0 8
14273: PPUSH
14274: LD_VAR 0 4
14278: PPUSH
14279: CALL_OW 380
// end else
14283: GO 14302
// PrepareHuman ( false , i , skill ) ;
14285: LD_INT 0
14287: PPUSH
14288: LD_VAR 0 8
14292: PPUSH
14293: LD_VAR 0 4
14297: PPUSH
14298: CALL_OW 380
// un := CreateHuman ;
14302: LD_ADDR_VAR 0 14
14306: PUSH
14307: CALL_OW 44
14311: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14312: LD_ADDR_VAR 0 7
14316: PUSH
14317: LD_VAR 0 7
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: LD_VAR 0 14
14329: PPUSH
14330: CALL_OW 2
14334: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14335: LD_VAR 0 14
14339: PPUSH
14340: LD_VAR 0 12
14344: PUSH
14345: LD_INT 1
14347: ARRAY
14348: PPUSH
14349: CALL_OW 52
// end ;
14353: GO 13992
14355: POP
14356: POP
// end ;
14357: GO 13294
14359: POP
14360: POP
// result := result ^ buildings ;
14361: LD_ADDR_VAR 0 7
14365: PUSH
14366: LD_VAR 0 7
14370: PUSH
14371: LD_VAR 0 18
14375: ADD
14376: ST_TO_ADDR
// end else
14377: GO 14520
// begin for i = 1 to personel do
14379: LD_ADDR_VAR 0 8
14383: PUSH
14384: DOUBLE
14385: LD_INT 1
14387: DEC
14388: ST_TO_ADDR
14389: LD_VAR 0 6
14393: PUSH
14394: FOR_TO
14395: IFFALSE 14518
// begin if i > 4 then
14397: LD_VAR 0 8
14401: PUSH
14402: LD_INT 4
14404: GREATER
14405: IFFALSE 14409
// break ;
14407: GO 14518
// x := personel [ i ] ;
14409: LD_ADDR_VAR 0 13
14413: PUSH
14414: LD_VAR 0 6
14418: PUSH
14419: LD_VAR 0 8
14423: ARRAY
14424: ST_TO_ADDR
// if x = - 1 then
14425: LD_VAR 0 13
14429: PUSH
14430: LD_INT 1
14432: NEG
14433: EQUAL
14434: IFFALSE 14438
// continue ;
14436: GO 14394
// PrepareHuman ( false , i , skill ) ;
14438: LD_INT 0
14440: PPUSH
14441: LD_VAR 0 8
14445: PPUSH
14446: LD_VAR 0 4
14450: PPUSH
14451: CALL_OW 380
// un := CreateHuman ;
14455: LD_ADDR_VAR 0 14
14459: PUSH
14460: CALL_OW 44
14464: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14465: LD_VAR 0 14
14469: PPUSH
14470: LD_VAR 0 1
14474: PPUSH
14475: CALL_OW 250
14479: PPUSH
14480: LD_VAR 0 1
14484: PPUSH
14485: CALL_OW 251
14489: PPUSH
14490: LD_INT 10
14492: PPUSH
14493: LD_INT 0
14495: PPUSH
14496: CALL_OW 50
// result := result ^ un ;
14500: LD_ADDR_VAR 0 7
14504: PUSH
14505: LD_VAR 0 7
14509: PUSH
14510: LD_VAR 0 14
14514: ADD
14515: ST_TO_ADDR
// end ;
14516: GO 14394
14518: POP
14519: POP
// end ; end ;
14520: LD_VAR 0 7
14524: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14525: LD_INT 0
14527: PPUSH
14528: PPUSH
14529: PPUSH
14530: PPUSH
14531: PPUSH
14532: PPUSH
14533: PPUSH
14534: PPUSH
14535: PPUSH
14536: PPUSH
14537: PPUSH
14538: PPUSH
14539: PPUSH
14540: PPUSH
14541: PPUSH
14542: PPUSH
// result := false ;
14543: LD_ADDR_VAR 0 3
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14551: LD_VAR 0 1
14555: NOT
14556: PUSH
14557: LD_VAR 0 1
14561: PPUSH
14562: CALL_OW 266
14566: PUSH
14567: LD_INT 32
14569: PUSH
14570: LD_INT 33
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: IN
14577: NOT
14578: OR
14579: IFFALSE 14583
// exit ;
14581: GO 15692
// nat := GetNation ( tower ) ;
14583: LD_ADDR_VAR 0 12
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 248
14597: ST_TO_ADDR
// side := GetSide ( tower ) ;
14598: LD_ADDR_VAR 0 16
14602: PUSH
14603: LD_VAR 0 1
14607: PPUSH
14608: CALL_OW 255
14612: ST_TO_ADDR
// x := GetX ( tower ) ;
14613: LD_ADDR_VAR 0 10
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 250
14627: ST_TO_ADDR
// y := GetY ( tower ) ;
14628: LD_ADDR_VAR 0 11
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 251
14642: ST_TO_ADDR
// if not x or not y then
14643: LD_VAR 0 10
14647: NOT
14648: PUSH
14649: LD_VAR 0 11
14653: NOT
14654: OR
14655: IFFALSE 14659
// exit ;
14657: GO 15692
// weapon := 0 ;
14659: LD_ADDR_VAR 0 18
14663: PUSH
14664: LD_INT 0
14666: ST_TO_ADDR
// fac_list := [ ] ;
14667: LD_ADDR_VAR 0 17
14671: PUSH
14672: EMPTY
14673: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14674: LD_ADDR_VAR 0 6
14678: PUSH
14679: LD_VAR 0 1
14683: PPUSH
14684: CALL_OW 274
14688: PPUSH
14689: LD_VAR 0 2
14693: PPUSH
14694: LD_INT 0
14696: PPUSH
14697: CALL 12263 0 3
14701: PPUSH
14702: LD_INT 30
14704: PUSH
14705: LD_INT 3
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PPUSH
14712: CALL_OW 72
14716: ST_TO_ADDR
// if not factories then
14717: LD_VAR 0 6
14721: NOT
14722: IFFALSE 14726
// exit ;
14724: GO 15692
// for i in factories do
14726: LD_ADDR_VAR 0 8
14730: PUSH
14731: LD_VAR 0 6
14735: PUSH
14736: FOR_IN
14737: IFFALSE 14762
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14739: LD_ADDR_VAR 0 17
14743: PUSH
14744: LD_VAR 0 17
14748: PUSH
14749: LD_VAR 0 8
14753: PPUSH
14754: CALL_OW 478
14758: UNION
14759: ST_TO_ADDR
14760: GO 14736
14762: POP
14763: POP
// if not fac_list then
14764: LD_VAR 0 17
14768: NOT
14769: IFFALSE 14773
// exit ;
14771: GO 15692
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14773: LD_ADDR_VAR 0 5
14777: PUSH
14778: LD_INT 4
14780: PUSH
14781: LD_INT 5
14783: PUSH
14784: LD_INT 9
14786: PUSH
14787: LD_INT 10
14789: PUSH
14790: LD_INT 6
14792: PUSH
14793: LD_INT 7
14795: PUSH
14796: LD_INT 11
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 27
14810: PUSH
14811: LD_INT 28
14813: PUSH
14814: LD_INT 26
14816: PUSH
14817: LD_INT 30
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 43
14828: PUSH
14829: LD_INT 44
14831: PUSH
14832: LD_INT 46
14834: PUSH
14835: LD_INT 45
14837: PUSH
14838: LD_INT 47
14840: PUSH
14841: LD_INT 49
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: PUSH
14857: LD_VAR 0 12
14861: ARRAY
14862: ST_TO_ADDR
// list := list isect fac_list ;
14863: LD_ADDR_VAR 0 5
14867: PUSH
14868: LD_VAR 0 5
14872: PUSH
14873: LD_VAR 0 17
14877: ISECT
14878: ST_TO_ADDR
// if not list then
14879: LD_VAR 0 5
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 15692
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14888: LD_VAR 0 12
14892: PUSH
14893: LD_INT 3
14895: EQUAL
14896: PUSH
14897: LD_INT 49
14899: PUSH
14900: LD_VAR 0 5
14904: IN
14905: AND
14906: PUSH
14907: LD_INT 31
14909: PPUSH
14910: LD_VAR 0 16
14914: PPUSH
14915: CALL_OW 321
14919: PUSH
14920: LD_INT 2
14922: EQUAL
14923: AND
14924: IFFALSE 14984
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14926: LD_INT 22
14928: PUSH
14929: LD_VAR 0 16
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 35
14940: PUSH
14941: LD_INT 49
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 91
14950: PUSH
14951: LD_VAR 0 1
14955: PUSH
14956: LD_INT 10
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: PPUSH
14969: CALL_OW 69
14973: NOT
14974: IFFALSE 14984
// weapon := ru_time_lapser ;
14976: LD_ADDR_VAR 0 18
14980: PUSH
14981: LD_INT 49
14983: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14984: LD_VAR 0 12
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: LD_INT 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: IN
14999: PUSH
15000: LD_INT 11
15002: PUSH
15003: LD_VAR 0 5
15007: IN
15008: PUSH
15009: LD_INT 30
15011: PUSH
15012: LD_VAR 0 5
15016: IN
15017: OR
15018: AND
15019: PUSH
15020: LD_INT 6
15022: PPUSH
15023: LD_VAR 0 16
15027: PPUSH
15028: CALL_OW 321
15032: PUSH
15033: LD_INT 2
15035: EQUAL
15036: AND
15037: IFFALSE 15202
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15039: LD_INT 22
15041: PUSH
15042: LD_VAR 0 16
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: LD_INT 35
15056: PUSH
15057: LD_INT 11
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 35
15066: PUSH
15067: LD_INT 30
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 91
15081: PUSH
15082: LD_VAR 0 1
15086: PUSH
15087: LD_INT 18
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: LIST
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 69
15104: NOT
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_VAR 0 16
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 2
15120: PUSH
15121: LD_INT 30
15123: PUSH
15124: LD_INT 32
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 30
15133: PUSH
15134: LD_INT 33
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 91
15148: PUSH
15149: LD_VAR 0 1
15153: PUSH
15154: LD_INT 12
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: PUSH
15167: EMPTY
15168: LIST
15169: PPUSH
15170: CALL_OW 69
15174: PUSH
15175: LD_INT 2
15177: GREATER
15178: AND
15179: IFFALSE 15202
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15181: LD_ADDR_VAR 0 18
15185: PUSH
15186: LD_INT 11
15188: PUSH
15189: LD_INT 30
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_VAR 0 12
15200: ARRAY
15201: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15202: LD_VAR 0 18
15206: NOT
15207: PUSH
15208: LD_INT 40
15210: PPUSH
15211: LD_VAR 0 16
15215: PPUSH
15216: CALL_OW 321
15220: PUSH
15221: LD_INT 2
15223: EQUAL
15224: AND
15225: PUSH
15226: LD_INT 7
15228: PUSH
15229: LD_VAR 0 5
15233: IN
15234: PUSH
15235: LD_INT 28
15237: PUSH
15238: LD_VAR 0 5
15242: IN
15243: OR
15244: PUSH
15245: LD_INT 45
15247: PUSH
15248: LD_VAR 0 5
15252: IN
15253: OR
15254: AND
15255: IFFALSE 15509
// begin hex := GetHexInfo ( x , y ) ;
15257: LD_ADDR_VAR 0 4
15261: PUSH
15262: LD_VAR 0 10
15266: PPUSH
15267: LD_VAR 0 11
15271: PPUSH
15272: CALL_OW 546
15276: ST_TO_ADDR
// if hex [ 1 ] then
15277: LD_VAR 0 4
15281: PUSH
15282: LD_INT 1
15284: ARRAY
15285: IFFALSE 15289
// exit ;
15287: GO 15692
// height := hex [ 2 ] ;
15289: LD_ADDR_VAR 0 15
15293: PUSH
15294: LD_VAR 0 4
15298: PUSH
15299: LD_INT 2
15301: ARRAY
15302: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15303: LD_ADDR_VAR 0 14
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: LD_INT 5
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: ST_TO_ADDR
// for i in tmp do
15326: LD_ADDR_VAR 0 8
15330: PUSH
15331: LD_VAR 0 14
15335: PUSH
15336: FOR_IN
15337: IFFALSE 15507
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15339: LD_ADDR_VAR 0 9
15343: PUSH
15344: LD_VAR 0 10
15348: PPUSH
15349: LD_VAR 0 8
15353: PPUSH
15354: LD_INT 5
15356: PPUSH
15357: CALL_OW 272
15361: PUSH
15362: LD_VAR 0 11
15366: PPUSH
15367: LD_VAR 0 8
15371: PPUSH
15372: LD_INT 5
15374: PPUSH
15375: CALL_OW 273
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15384: LD_VAR 0 9
15388: PUSH
15389: LD_INT 1
15391: ARRAY
15392: PPUSH
15393: LD_VAR 0 9
15397: PUSH
15398: LD_INT 2
15400: ARRAY
15401: PPUSH
15402: CALL_OW 488
15406: IFFALSE 15505
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15408: LD_ADDR_VAR 0 4
15412: PUSH
15413: LD_VAR 0 9
15417: PUSH
15418: LD_INT 1
15420: ARRAY
15421: PPUSH
15422: LD_VAR 0 9
15426: PUSH
15427: LD_INT 2
15429: ARRAY
15430: PPUSH
15431: CALL_OW 546
15435: ST_TO_ADDR
// if hex [ 1 ] then
15436: LD_VAR 0 4
15440: PUSH
15441: LD_INT 1
15443: ARRAY
15444: IFFALSE 15448
// continue ;
15446: GO 15336
// h := hex [ 2 ] ;
15448: LD_ADDR_VAR 0 13
15452: PUSH
15453: LD_VAR 0 4
15457: PUSH
15458: LD_INT 2
15460: ARRAY
15461: ST_TO_ADDR
// if h + 7 < height then
15462: LD_VAR 0 13
15466: PUSH
15467: LD_INT 7
15469: PLUS
15470: PUSH
15471: LD_VAR 0 15
15475: LESS
15476: IFFALSE 15505
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15478: LD_ADDR_VAR 0 18
15482: PUSH
15483: LD_INT 7
15485: PUSH
15486: LD_INT 28
15488: PUSH
15489: LD_INT 45
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: LIST
15496: PUSH
15497: LD_VAR 0 12
15501: ARRAY
15502: ST_TO_ADDR
// break ;
15503: GO 15507
// end ; end ; end ;
15505: GO 15336
15507: POP
15508: POP
// end ; if not weapon then
15509: LD_VAR 0 18
15513: NOT
15514: IFFALSE 15574
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15516: LD_ADDR_VAR 0 5
15520: PUSH
15521: LD_VAR 0 5
15525: PUSH
15526: LD_INT 11
15528: PUSH
15529: LD_INT 30
15531: PUSH
15532: LD_INT 49
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: DIFF
15540: ST_TO_ADDR
// if not list then
15541: LD_VAR 0 5
15545: NOT
15546: IFFALSE 15550
// exit ;
15548: GO 15692
// weapon := list [ rand ( 1 , list ) ] ;
15550: LD_ADDR_VAR 0 18
15554: PUSH
15555: LD_VAR 0 5
15559: PUSH
15560: LD_INT 1
15562: PPUSH
15563: LD_VAR 0 5
15567: PPUSH
15568: CALL_OW 12
15572: ARRAY
15573: ST_TO_ADDR
// end ; if weapon then
15574: LD_VAR 0 18
15578: IFFALSE 15692
// begin tmp := CostOfWeapon ( weapon ) ;
15580: LD_ADDR_VAR 0 14
15584: PUSH
15585: LD_VAR 0 18
15589: PPUSH
15590: CALL_OW 451
15594: ST_TO_ADDR
// j := GetBase ( tower ) ;
15595: LD_ADDR_VAR 0 9
15599: PUSH
15600: LD_VAR 0 1
15604: PPUSH
15605: CALL_OW 274
15609: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15610: LD_VAR 0 9
15614: PPUSH
15615: LD_INT 1
15617: PPUSH
15618: CALL_OW 275
15622: PUSH
15623: LD_VAR 0 14
15627: PUSH
15628: LD_INT 1
15630: ARRAY
15631: GREATEREQUAL
15632: PUSH
15633: LD_VAR 0 9
15637: PPUSH
15638: LD_INT 2
15640: PPUSH
15641: CALL_OW 275
15645: PUSH
15646: LD_VAR 0 14
15650: PUSH
15651: LD_INT 2
15653: ARRAY
15654: GREATEREQUAL
15655: AND
15656: PUSH
15657: LD_VAR 0 9
15661: PPUSH
15662: LD_INT 3
15664: PPUSH
15665: CALL_OW 275
15669: PUSH
15670: LD_VAR 0 14
15674: PUSH
15675: LD_INT 3
15677: ARRAY
15678: GREATEREQUAL
15679: AND
15680: IFFALSE 15692
// result := weapon ;
15682: LD_ADDR_VAR 0 3
15686: PUSH
15687: LD_VAR 0 18
15691: ST_TO_ADDR
// end ; end ;
15692: LD_VAR 0 3
15696: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15697: LD_INT 0
15699: PPUSH
15700: PPUSH
// result := true ;
15701: LD_ADDR_VAR 0 3
15705: PUSH
15706: LD_INT 1
15708: ST_TO_ADDR
// if array1 = array2 then
15709: LD_VAR 0 1
15713: PUSH
15714: LD_VAR 0 2
15718: EQUAL
15719: IFFALSE 15779
// begin for i = 1 to array1 do
15721: LD_ADDR_VAR 0 4
15725: PUSH
15726: DOUBLE
15727: LD_INT 1
15729: DEC
15730: ST_TO_ADDR
15731: LD_VAR 0 1
15735: PUSH
15736: FOR_TO
15737: IFFALSE 15775
// if array1 [ i ] <> array2 [ i ] then
15739: LD_VAR 0 1
15743: PUSH
15744: LD_VAR 0 4
15748: ARRAY
15749: PUSH
15750: LD_VAR 0 2
15754: PUSH
15755: LD_VAR 0 4
15759: ARRAY
15760: NONEQUAL
15761: IFFALSE 15773
// begin result := false ;
15763: LD_ADDR_VAR 0 3
15767: PUSH
15768: LD_INT 0
15770: ST_TO_ADDR
// break ;
15771: GO 15775
// end ;
15773: GO 15736
15775: POP
15776: POP
// end else
15777: GO 15787
// result := false ;
15779: LD_ADDR_VAR 0 3
15783: PUSH
15784: LD_INT 0
15786: ST_TO_ADDR
// end ;
15787: LD_VAR 0 3
15791: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15792: LD_INT 0
15794: PPUSH
15795: PPUSH
// if not array1 or not array2 then
15796: LD_VAR 0 1
15800: NOT
15801: PUSH
15802: LD_VAR 0 2
15806: NOT
15807: OR
15808: IFFALSE 15812
// exit ;
15810: GO 15876
// result := true ;
15812: LD_ADDR_VAR 0 3
15816: PUSH
15817: LD_INT 1
15819: ST_TO_ADDR
// for i = 1 to array1 do
15820: LD_ADDR_VAR 0 4
15824: PUSH
15825: DOUBLE
15826: LD_INT 1
15828: DEC
15829: ST_TO_ADDR
15830: LD_VAR 0 1
15834: PUSH
15835: FOR_TO
15836: IFFALSE 15874
// if array1 [ i ] <> array2 [ i ] then
15838: LD_VAR 0 1
15842: PUSH
15843: LD_VAR 0 4
15847: ARRAY
15848: PUSH
15849: LD_VAR 0 2
15853: PUSH
15854: LD_VAR 0 4
15858: ARRAY
15859: NONEQUAL
15860: IFFALSE 15872
// begin result := false ;
15862: LD_ADDR_VAR 0 3
15866: PUSH
15867: LD_INT 0
15869: ST_TO_ADDR
// break ;
15870: GO 15874
// end ;
15872: GO 15835
15874: POP
15875: POP
// end ;
15876: LD_VAR 0 3
15880: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15881: LD_INT 0
15883: PPUSH
15884: PPUSH
15885: PPUSH
// pom := GetBase ( fac ) ;
15886: LD_ADDR_VAR 0 5
15890: PUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 274
15900: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15901: LD_ADDR_VAR 0 4
15905: PUSH
15906: LD_VAR 0 2
15910: PUSH
15911: LD_INT 1
15913: ARRAY
15914: PPUSH
15915: LD_VAR 0 2
15919: PUSH
15920: LD_INT 2
15922: ARRAY
15923: PPUSH
15924: LD_VAR 0 2
15928: PUSH
15929: LD_INT 3
15931: ARRAY
15932: PPUSH
15933: LD_VAR 0 2
15937: PUSH
15938: LD_INT 4
15940: ARRAY
15941: PPUSH
15942: CALL_OW 449
15946: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15947: LD_ADDR_VAR 0 3
15951: PUSH
15952: LD_VAR 0 5
15956: PPUSH
15957: LD_INT 1
15959: PPUSH
15960: CALL_OW 275
15964: PUSH
15965: LD_VAR 0 4
15969: PUSH
15970: LD_INT 1
15972: ARRAY
15973: GREATEREQUAL
15974: PUSH
15975: LD_VAR 0 5
15979: PPUSH
15980: LD_INT 2
15982: PPUSH
15983: CALL_OW 275
15987: PUSH
15988: LD_VAR 0 4
15992: PUSH
15993: LD_INT 2
15995: ARRAY
15996: GREATEREQUAL
15997: AND
15998: PUSH
15999: LD_VAR 0 5
16003: PPUSH
16004: LD_INT 3
16006: PPUSH
16007: CALL_OW 275
16011: PUSH
16012: LD_VAR 0 4
16016: PUSH
16017: LD_INT 3
16019: ARRAY
16020: GREATEREQUAL
16021: AND
16022: ST_TO_ADDR
// end ;
16023: LD_VAR 0 3
16027: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16028: LD_INT 0
16030: PPUSH
16031: PPUSH
16032: PPUSH
16033: PPUSH
// pom := GetBase ( building ) ;
16034: LD_ADDR_VAR 0 3
16038: PUSH
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL_OW 274
16048: ST_TO_ADDR
// if not pom then
16049: LD_VAR 0 3
16053: NOT
16054: IFFALSE 16058
// exit ;
16056: GO 16228
// btype := GetBType ( building ) ;
16058: LD_ADDR_VAR 0 5
16062: PUSH
16063: LD_VAR 0 1
16067: PPUSH
16068: CALL_OW 266
16072: ST_TO_ADDR
// if btype = b_armoury then
16073: LD_VAR 0 5
16077: PUSH
16078: LD_INT 4
16080: EQUAL
16081: IFFALSE 16091
// btype := b_barracks ;
16083: LD_ADDR_VAR 0 5
16087: PUSH
16088: LD_INT 5
16090: ST_TO_ADDR
// if btype = b_depot then
16091: LD_VAR 0 5
16095: PUSH
16096: LD_INT 0
16098: EQUAL
16099: IFFALSE 16109
// btype := b_warehouse ;
16101: LD_ADDR_VAR 0 5
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// if btype = b_workshop then
16109: LD_VAR 0 5
16113: PUSH
16114: LD_INT 2
16116: EQUAL
16117: IFFALSE 16127
// btype := b_factory ;
16119: LD_ADDR_VAR 0 5
16123: PUSH
16124: LD_INT 3
16126: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16127: LD_ADDR_VAR 0 4
16131: PUSH
16132: LD_VAR 0 5
16136: PPUSH
16137: LD_VAR 0 1
16141: PPUSH
16142: CALL_OW 248
16146: PPUSH
16147: CALL_OW 450
16151: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16152: LD_ADDR_VAR 0 2
16156: PUSH
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_INT 1
16164: PPUSH
16165: CALL_OW 275
16169: PUSH
16170: LD_VAR 0 4
16174: PUSH
16175: LD_INT 1
16177: ARRAY
16178: GREATEREQUAL
16179: PUSH
16180: LD_VAR 0 3
16184: PPUSH
16185: LD_INT 2
16187: PPUSH
16188: CALL_OW 275
16192: PUSH
16193: LD_VAR 0 4
16197: PUSH
16198: LD_INT 2
16200: ARRAY
16201: GREATEREQUAL
16202: AND
16203: PUSH
16204: LD_VAR 0 3
16208: PPUSH
16209: LD_INT 3
16211: PPUSH
16212: CALL_OW 275
16216: PUSH
16217: LD_VAR 0 4
16221: PUSH
16222: LD_INT 3
16224: ARRAY
16225: GREATEREQUAL
16226: AND
16227: ST_TO_ADDR
// end ;
16228: LD_VAR 0 2
16232: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16233: LD_INT 0
16235: PPUSH
16236: PPUSH
16237: PPUSH
// pom := GetBase ( building ) ;
16238: LD_ADDR_VAR 0 4
16242: PUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 274
16252: ST_TO_ADDR
// if not pom then
16253: LD_VAR 0 4
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16363
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16262: LD_ADDR_VAR 0 5
16266: PUSH
16267: LD_VAR 0 2
16271: PPUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL_OW 248
16281: PPUSH
16282: CALL_OW 450
16286: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16287: LD_ADDR_VAR 0 3
16291: PUSH
16292: LD_VAR 0 4
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 275
16304: PUSH
16305: LD_VAR 0 5
16309: PUSH
16310: LD_INT 1
16312: ARRAY
16313: GREATEREQUAL
16314: PUSH
16315: LD_VAR 0 4
16319: PPUSH
16320: LD_INT 2
16322: PPUSH
16323: CALL_OW 275
16327: PUSH
16328: LD_VAR 0 5
16332: PUSH
16333: LD_INT 2
16335: ARRAY
16336: GREATEREQUAL
16337: AND
16338: PUSH
16339: LD_VAR 0 4
16343: PPUSH
16344: LD_INT 3
16346: PPUSH
16347: CALL_OW 275
16351: PUSH
16352: LD_VAR 0 5
16356: PUSH
16357: LD_INT 3
16359: ARRAY
16360: GREATEREQUAL
16361: AND
16362: ST_TO_ADDR
// end ;
16363: LD_VAR 0 3
16367: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16368: LD_INT 0
16370: PPUSH
16371: PPUSH
16372: PPUSH
16373: PPUSH
16374: PPUSH
16375: PPUSH
16376: PPUSH
16377: PPUSH
16378: PPUSH
16379: PPUSH
16380: PPUSH
// result := false ;
16381: LD_ADDR_VAR 0 8
16385: PUSH
16386: LD_INT 0
16388: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16389: LD_VAR 0 5
16393: NOT
16394: PUSH
16395: LD_VAR 0 1
16399: NOT
16400: OR
16401: PUSH
16402: LD_VAR 0 2
16406: NOT
16407: OR
16408: PUSH
16409: LD_VAR 0 3
16413: NOT
16414: OR
16415: IFFALSE 16419
// exit ;
16417: GO 17233
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16419: LD_ADDR_VAR 0 14
16423: PUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_VAR 0 3
16438: PPUSH
16439: LD_VAR 0 4
16443: PPUSH
16444: LD_VAR 0 5
16448: PUSH
16449: LD_INT 1
16451: ARRAY
16452: PPUSH
16453: CALL_OW 248
16457: PPUSH
16458: LD_INT 0
16460: PPUSH
16461: CALL 18470 0 6
16465: ST_TO_ADDR
// if not hexes then
16466: LD_VAR 0 14
16470: NOT
16471: IFFALSE 16475
// exit ;
16473: GO 17233
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16475: LD_ADDR_VAR 0 17
16479: PUSH
16480: LD_VAR 0 5
16484: PPUSH
16485: LD_INT 22
16487: PUSH
16488: LD_VAR 0 13
16492: PPUSH
16493: CALL_OW 255
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 2
16504: PUSH
16505: LD_INT 30
16507: PUSH
16508: LD_INT 0
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 30
16517: PUSH
16518: LD_INT 1
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PPUSH
16534: CALL_OW 72
16538: ST_TO_ADDR
// for i = 1 to hexes do
16539: LD_ADDR_VAR 0 9
16543: PUSH
16544: DOUBLE
16545: LD_INT 1
16547: DEC
16548: ST_TO_ADDR
16549: LD_VAR 0 14
16553: PUSH
16554: FOR_TO
16555: IFFALSE 17231
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16557: LD_ADDR_VAR 0 13
16561: PUSH
16562: LD_VAR 0 14
16566: PUSH
16567: LD_VAR 0 9
16571: ARRAY
16572: PUSH
16573: LD_INT 1
16575: ARRAY
16576: PPUSH
16577: LD_VAR 0 14
16581: PUSH
16582: LD_VAR 0 9
16586: ARRAY
16587: PUSH
16588: LD_INT 2
16590: ARRAY
16591: PPUSH
16592: CALL_OW 428
16596: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16597: LD_VAR 0 14
16601: PUSH
16602: LD_VAR 0 9
16606: ARRAY
16607: PUSH
16608: LD_INT 1
16610: ARRAY
16611: PPUSH
16612: LD_VAR 0 14
16616: PUSH
16617: LD_VAR 0 9
16621: ARRAY
16622: PUSH
16623: LD_INT 2
16625: ARRAY
16626: PPUSH
16627: CALL_OW 351
16631: PUSH
16632: LD_VAR 0 14
16636: PUSH
16637: LD_VAR 0 9
16641: ARRAY
16642: PUSH
16643: LD_INT 1
16645: ARRAY
16646: PPUSH
16647: LD_VAR 0 14
16651: PUSH
16652: LD_VAR 0 9
16656: ARRAY
16657: PUSH
16658: LD_INT 2
16660: ARRAY
16661: PPUSH
16662: CALL_OW 488
16666: NOT
16667: OR
16668: PUSH
16669: LD_VAR 0 13
16673: PPUSH
16674: CALL_OW 247
16678: PUSH
16679: LD_INT 3
16681: EQUAL
16682: OR
16683: IFFALSE 16689
// exit ;
16685: POP
16686: POP
16687: GO 17233
// if not tmp then
16689: LD_VAR 0 13
16693: NOT
16694: IFFALSE 16698
// continue ;
16696: GO 16554
// result := true ;
16698: LD_ADDR_VAR 0 8
16702: PUSH
16703: LD_INT 1
16705: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16706: LD_VAR 0 6
16710: PUSH
16711: LD_VAR 0 13
16715: PPUSH
16716: CALL_OW 247
16720: PUSH
16721: LD_INT 2
16723: EQUAL
16724: AND
16725: PUSH
16726: LD_VAR 0 13
16730: PPUSH
16731: CALL_OW 263
16735: PUSH
16736: LD_INT 1
16738: EQUAL
16739: AND
16740: IFFALSE 16904
// begin if IsDrivenBy ( tmp ) then
16742: LD_VAR 0 13
16746: PPUSH
16747: CALL_OW 311
16751: IFFALSE 16755
// continue ;
16753: GO 16554
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16755: LD_VAR 0 6
16759: PPUSH
16760: LD_INT 3
16762: PUSH
16763: LD_INT 60
16765: PUSH
16766: EMPTY
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 3
16775: PUSH
16776: LD_INT 55
16778: PUSH
16779: EMPTY
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PPUSH
16790: CALL_OW 72
16794: IFFALSE 16902
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16796: LD_ADDR_VAR 0 18
16800: PUSH
16801: LD_VAR 0 6
16805: PPUSH
16806: LD_INT 3
16808: PUSH
16809: LD_INT 60
16811: PUSH
16812: EMPTY
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 3
16821: PUSH
16822: LD_INT 55
16824: PUSH
16825: EMPTY
16826: LIST
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PPUSH
16836: CALL_OW 72
16840: PUSH
16841: LD_INT 1
16843: ARRAY
16844: ST_TO_ADDR
// if IsInUnit ( driver ) then
16845: LD_VAR 0 18
16849: PPUSH
16850: CALL_OW 310
16854: IFFALSE 16865
// ComExit ( driver ) ;
16856: LD_VAR 0 18
16860: PPUSH
16861: CALL 42158 0 1
// AddComEnterUnit ( driver , tmp ) ;
16865: LD_VAR 0 18
16869: PPUSH
16870: LD_VAR 0 13
16874: PPUSH
16875: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16879: LD_VAR 0 18
16883: PPUSH
16884: LD_VAR 0 7
16888: PPUSH
16889: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16893: LD_VAR 0 18
16897: PPUSH
16898: CALL_OW 181
// end ; continue ;
16902: GO 16554
// end ; if not cleaners or not tmp in cleaners then
16904: LD_VAR 0 6
16908: NOT
16909: PUSH
16910: LD_VAR 0 13
16914: PUSH
16915: LD_VAR 0 6
16919: IN
16920: NOT
16921: OR
16922: IFFALSE 17229
// begin if dep then
16924: LD_VAR 0 17
16928: IFFALSE 17064
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16930: LD_ADDR_VAR 0 16
16934: PUSH
16935: LD_VAR 0 17
16939: PUSH
16940: LD_INT 1
16942: ARRAY
16943: PPUSH
16944: CALL_OW 250
16948: PPUSH
16949: LD_VAR 0 17
16953: PUSH
16954: LD_INT 1
16956: ARRAY
16957: PPUSH
16958: CALL_OW 254
16962: PPUSH
16963: LD_INT 5
16965: PPUSH
16966: CALL_OW 272
16970: PUSH
16971: LD_VAR 0 17
16975: PUSH
16976: LD_INT 1
16978: ARRAY
16979: PPUSH
16980: CALL_OW 251
16984: PPUSH
16985: LD_VAR 0 17
16989: PUSH
16990: LD_INT 1
16992: ARRAY
16993: PPUSH
16994: CALL_OW 254
16998: PPUSH
16999: LD_INT 5
17001: PPUSH
17002: CALL_OW 273
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17011: LD_VAR 0 16
17015: PUSH
17016: LD_INT 1
17018: ARRAY
17019: PPUSH
17020: LD_VAR 0 16
17024: PUSH
17025: LD_INT 2
17027: ARRAY
17028: PPUSH
17029: CALL_OW 488
17033: IFFALSE 17064
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17035: LD_VAR 0 13
17039: PPUSH
17040: LD_VAR 0 16
17044: PUSH
17045: LD_INT 1
17047: ARRAY
17048: PPUSH
17049: LD_VAR 0 16
17053: PUSH
17054: LD_INT 2
17056: ARRAY
17057: PPUSH
17058: CALL_OW 111
// continue ;
17062: GO 16554
// end ; end ; r := GetDir ( tmp ) ;
17064: LD_ADDR_VAR 0 15
17068: PUSH
17069: LD_VAR 0 13
17073: PPUSH
17074: CALL_OW 254
17078: ST_TO_ADDR
// if r = 5 then
17079: LD_VAR 0 15
17083: PUSH
17084: LD_INT 5
17086: EQUAL
17087: IFFALSE 17097
// r := 0 ;
17089: LD_ADDR_VAR 0 15
17093: PUSH
17094: LD_INT 0
17096: ST_TO_ADDR
// for j = r to 5 do
17097: LD_ADDR_VAR 0 10
17101: PUSH
17102: DOUBLE
17103: LD_VAR 0 15
17107: DEC
17108: ST_TO_ADDR
17109: LD_INT 5
17111: PUSH
17112: FOR_TO
17113: IFFALSE 17227
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17115: LD_ADDR_VAR 0 11
17119: PUSH
17120: LD_VAR 0 13
17124: PPUSH
17125: CALL_OW 250
17129: PPUSH
17130: LD_VAR 0 10
17134: PPUSH
17135: LD_INT 2
17137: PPUSH
17138: CALL_OW 272
17142: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17143: LD_ADDR_VAR 0 12
17147: PUSH
17148: LD_VAR 0 13
17152: PPUSH
17153: CALL_OW 251
17157: PPUSH
17158: LD_VAR 0 10
17162: PPUSH
17163: LD_INT 2
17165: PPUSH
17166: CALL_OW 273
17170: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17171: LD_VAR 0 11
17175: PPUSH
17176: LD_VAR 0 12
17180: PPUSH
17181: CALL_OW 488
17185: PUSH
17186: LD_VAR 0 11
17190: PPUSH
17191: LD_VAR 0 12
17195: PPUSH
17196: CALL_OW 428
17200: NOT
17201: AND
17202: IFFALSE 17225
// begin ComMoveXY ( tmp , _x , _y ) ;
17204: LD_VAR 0 13
17208: PPUSH
17209: LD_VAR 0 11
17213: PPUSH
17214: LD_VAR 0 12
17218: PPUSH
17219: CALL_OW 111
// break ;
17223: GO 17227
// end ; end ;
17225: GO 17112
17227: POP
17228: POP
// end ; end ;
17229: GO 16554
17231: POP
17232: POP
// end ;
17233: LD_VAR 0 8
17237: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17238: LD_INT 0
17240: PPUSH
// result := true ;
17241: LD_ADDR_VAR 0 3
17245: PUSH
17246: LD_INT 1
17248: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17249: LD_VAR 0 2
17253: PUSH
17254: LD_INT 24
17256: DOUBLE
17257: EQUAL
17258: IFTRUE 17268
17260: LD_INT 33
17262: DOUBLE
17263: EQUAL
17264: IFTRUE 17268
17266: GO 17293
17268: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17269: LD_ADDR_VAR 0 3
17273: PUSH
17274: LD_INT 32
17276: PPUSH
17277: LD_VAR 0 1
17281: PPUSH
17282: CALL_OW 321
17286: PUSH
17287: LD_INT 2
17289: EQUAL
17290: ST_TO_ADDR
17291: GO 17613
17293: LD_INT 20
17295: DOUBLE
17296: EQUAL
17297: IFTRUE 17301
17299: GO 17326
17301: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17302: LD_ADDR_VAR 0 3
17306: PUSH
17307: LD_INT 6
17309: PPUSH
17310: LD_VAR 0 1
17314: PPUSH
17315: CALL_OW 321
17319: PUSH
17320: LD_INT 2
17322: EQUAL
17323: ST_TO_ADDR
17324: GO 17613
17326: LD_INT 22
17328: DOUBLE
17329: EQUAL
17330: IFTRUE 17340
17332: LD_INT 36
17334: DOUBLE
17335: EQUAL
17336: IFTRUE 17340
17338: GO 17365
17340: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17341: LD_ADDR_VAR 0 3
17345: PUSH
17346: LD_INT 15
17348: PPUSH
17349: LD_VAR 0 1
17353: PPUSH
17354: CALL_OW 321
17358: PUSH
17359: LD_INT 2
17361: EQUAL
17362: ST_TO_ADDR
17363: GO 17613
17365: LD_INT 30
17367: DOUBLE
17368: EQUAL
17369: IFTRUE 17373
17371: GO 17398
17373: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17374: LD_ADDR_VAR 0 3
17378: PUSH
17379: LD_INT 20
17381: PPUSH
17382: LD_VAR 0 1
17386: PPUSH
17387: CALL_OW 321
17391: PUSH
17392: LD_INT 2
17394: EQUAL
17395: ST_TO_ADDR
17396: GO 17613
17398: LD_INT 28
17400: DOUBLE
17401: EQUAL
17402: IFTRUE 17412
17404: LD_INT 21
17406: DOUBLE
17407: EQUAL
17408: IFTRUE 17412
17410: GO 17437
17412: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17413: LD_ADDR_VAR 0 3
17417: PUSH
17418: LD_INT 21
17420: PPUSH
17421: LD_VAR 0 1
17425: PPUSH
17426: CALL_OW 321
17430: PUSH
17431: LD_INT 2
17433: EQUAL
17434: ST_TO_ADDR
17435: GO 17613
17437: LD_INT 16
17439: DOUBLE
17440: EQUAL
17441: IFTRUE 17445
17443: GO 17472
17445: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17446: LD_ADDR_VAR 0 3
17450: PUSH
17451: LD_EXP 44
17455: PPUSH
17456: LD_VAR 0 1
17460: PPUSH
17461: CALL_OW 321
17465: PUSH
17466: LD_INT 2
17468: EQUAL
17469: ST_TO_ADDR
17470: GO 17613
17472: LD_INT 19
17474: DOUBLE
17475: EQUAL
17476: IFTRUE 17486
17478: LD_INT 23
17480: DOUBLE
17481: EQUAL
17482: IFTRUE 17486
17484: GO 17513
17486: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17487: LD_ADDR_VAR 0 3
17491: PUSH
17492: LD_EXP 43
17496: PPUSH
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 321
17506: PUSH
17507: LD_INT 2
17509: EQUAL
17510: ST_TO_ADDR
17511: GO 17613
17513: LD_INT 17
17515: DOUBLE
17516: EQUAL
17517: IFTRUE 17521
17519: GO 17546
17521: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17522: LD_ADDR_VAR 0 3
17526: PUSH
17527: LD_INT 39
17529: PPUSH
17530: LD_VAR 0 1
17534: PPUSH
17535: CALL_OW 321
17539: PUSH
17540: LD_INT 2
17542: EQUAL
17543: ST_TO_ADDR
17544: GO 17613
17546: LD_INT 18
17548: DOUBLE
17549: EQUAL
17550: IFTRUE 17554
17552: GO 17579
17554: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17555: LD_ADDR_VAR 0 3
17559: PUSH
17560: LD_INT 40
17562: PPUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 321
17572: PUSH
17573: LD_INT 2
17575: EQUAL
17576: ST_TO_ADDR
17577: GO 17613
17579: LD_INT 27
17581: DOUBLE
17582: EQUAL
17583: IFTRUE 17587
17585: GO 17612
17587: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17588: LD_ADDR_VAR 0 3
17592: PUSH
17593: LD_INT 35
17595: PPUSH
17596: LD_VAR 0 1
17600: PPUSH
17601: CALL_OW 321
17605: PUSH
17606: LD_INT 2
17608: EQUAL
17609: ST_TO_ADDR
17610: GO 17613
17612: POP
// end ;
17613: LD_VAR 0 3
17617: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17618: LD_INT 0
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
// result := false ;
17631: LD_ADDR_VAR 0 6
17635: PUSH
17636: LD_INT 0
17638: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17639: LD_VAR 0 1
17643: NOT
17644: PUSH
17645: LD_VAR 0 1
17649: PPUSH
17650: CALL_OW 266
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 1
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: IN
17665: NOT
17666: OR
17667: PUSH
17668: LD_VAR 0 2
17672: NOT
17673: OR
17674: PUSH
17675: LD_VAR 0 5
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: LD_INT 1
17685: PUSH
17686: LD_INT 2
17688: PUSH
17689: LD_INT 3
17691: PUSH
17692: LD_INT 4
17694: PUSH
17695: LD_INT 5
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: IN
17706: NOT
17707: OR
17708: PUSH
17709: LD_VAR 0 3
17713: PPUSH
17714: LD_VAR 0 4
17718: PPUSH
17719: CALL_OW 488
17723: NOT
17724: OR
17725: IFFALSE 17729
// exit ;
17727: GO 18465
// side := GetSide ( depot ) ;
17729: LD_ADDR_VAR 0 9
17733: PUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 255
17743: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17744: LD_VAR 0 9
17748: PPUSH
17749: LD_VAR 0 2
17753: PPUSH
17754: CALL 17238 0 2
17758: NOT
17759: IFFALSE 17763
// exit ;
17761: GO 18465
// pom := GetBase ( depot ) ;
17763: LD_ADDR_VAR 0 10
17767: PUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 274
17777: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17778: LD_ADDR_VAR 0 11
17782: PUSH
17783: LD_VAR 0 2
17787: PPUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: CALL_OW 248
17797: PPUSH
17798: CALL_OW 450
17802: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17803: LD_VAR 0 10
17807: PPUSH
17808: LD_INT 1
17810: PPUSH
17811: CALL_OW 275
17815: PUSH
17816: LD_VAR 0 11
17820: PUSH
17821: LD_INT 1
17823: ARRAY
17824: GREATEREQUAL
17825: PUSH
17826: LD_VAR 0 10
17830: PPUSH
17831: LD_INT 2
17833: PPUSH
17834: CALL_OW 275
17838: PUSH
17839: LD_VAR 0 11
17843: PUSH
17844: LD_INT 2
17846: ARRAY
17847: GREATEREQUAL
17848: AND
17849: PUSH
17850: LD_VAR 0 10
17854: PPUSH
17855: LD_INT 3
17857: PPUSH
17858: CALL_OW 275
17862: PUSH
17863: LD_VAR 0 11
17867: PUSH
17868: LD_INT 3
17870: ARRAY
17871: GREATEREQUAL
17872: AND
17873: NOT
17874: IFFALSE 17878
// exit ;
17876: GO 18465
// if GetBType ( depot ) = b_depot then
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 266
17887: PUSH
17888: LD_INT 0
17890: EQUAL
17891: IFFALSE 17903
// dist := 28 else
17893: LD_ADDR_VAR 0 14
17897: PUSH
17898: LD_INT 28
17900: ST_TO_ADDR
17901: GO 17911
// dist := 36 ;
17903: LD_ADDR_VAR 0 14
17907: PUSH
17908: LD_INT 36
17910: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17911: LD_VAR 0 1
17915: PPUSH
17916: LD_VAR 0 3
17920: PPUSH
17921: LD_VAR 0 4
17925: PPUSH
17926: CALL_OW 297
17930: PUSH
17931: LD_VAR 0 14
17935: GREATER
17936: IFFALSE 17940
// exit ;
17938: GO 18465
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17940: LD_ADDR_VAR 0 12
17944: PUSH
17945: LD_VAR 0 2
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: LD_VAR 0 4
17959: PPUSH
17960: LD_VAR 0 5
17964: PPUSH
17965: LD_VAR 0 1
17969: PPUSH
17970: CALL_OW 248
17974: PPUSH
17975: LD_INT 0
17977: PPUSH
17978: CALL 18470 0 6
17982: ST_TO_ADDR
// if not hexes then
17983: LD_VAR 0 12
17987: NOT
17988: IFFALSE 17992
// exit ;
17990: GO 18465
// hex := GetHexInfo ( x , y ) ;
17992: LD_ADDR_VAR 0 15
17996: PUSH
17997: LD_VAR 0 3
18001: PPUSH
18002: LD_VAR 0 4
18006: PPUSH
18007: CALL_OW 546
18011: ST_TO_ADDR
// if hex [ 1 ] then
18012: LD_VAR 0 15
18016: PUSH
18017: LD_INT 1
18019: ARRAY
18020: IFFALSE 18024
// exit ;
18022: GO 18465
// height := hex [ 2 ] ;
18024: LD_ADDR_VAR 0 13
18028: PUSH
18029: LD_VAR 0 15
18033: PUSH
18034: LD_INT 2
18036: ARRAY
18037: ST_TO_ADDR
// for i = 1 to hexes do
18038: LD_ADDR_VAR 0 7
18042: PUSH
18043: DOUBLE
18044: LD_INT 1
18046: DEC
18047: ST_TO_ADDR
18048: LD_VAR 0 12
18052: PUSH
18053: FOR_TO
18054: IFFALSE 18384
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18056: LD_VAR 0 12
18060: PUSH
18061: LD_VAR 0 7
18065: ARRAY
18066: PUSH
18067: LD_INT 1
18069: ARRAY
18070: PPUSH
18071: LD_VAR 0 12
18075: PUSH
18076: LD_VAR 0 7
18080: ARRAY
18081: PUSH
18082: LD_INT 2
18084: ARRAY
18085: PPUSH
18086: CALL_OW 488
18090: NOT
18091: PUSH
18092: LD_VAR 0 12
18096: PUSH
18097: LD_VAR 0 7
18101: ARRAY
18102: PUSH
18103: LD_INT 1
18105: ARRAY
18106: PPUSH
18107: LD_VAR 0 12
18111: PUSH
18112: LD_VAR 0 7
18116: ARRAY
18117: PUSH
18118: LD_INT 2
18120: ARRAY
18121: PPUSH
18122: CALL_OW 428
18126: PUSH
18127: LD_INT 0
18129: GREATER
18130: OR
18131: PUSH
18132: LD_VAR 0 12
18136: PUSH
18137: LD_VAR 0 7
18141: ARRAY
18142: PUSH
18143: LD_INT 1
18145: ARRAY
18146: PPUSH
18147: LD_VAR 0 12
18151: PUSH
18152: LD_VAR 0 7
18156: ARRAY
18157: PUSH
18158: LD_INT 2
18160: ARRAY
18161: PPUSH
18162: CALL_OW 351
18166: OR
18167: IFFALSE 18173
// exit ;
18169: POP
18170: POP
18171: GO 18465
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18173: LD_ADDR_VAR 0 8
18177: PUSH
18178: LD_VAR 0 12
18182: PUSH
18183: LD_VAR 0 7
18187: ARRAY
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: PPUSH
18193: LD_VAR 0 12
18197: PUSH
18198: LD_VAR 0 7
18202: ARRAY
18203: PUSH
18204: LD_INT 2
18206: ARRAY
18207: PPUSH
18208: CALL_OW 546
18212: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18213: LD_VAR 0 8
18217: PUSH
18218: LD_INT 1
18220: ARRAY
18221: PUSH
18222: LD_VAR 0 8
18226: PUSH
18227: LD_INT 2
18229: ARRAY
18230: PUSH
18231: LD_VAR 0 13
18235: PUSH
18236: LD_INT 2
18238: PLUS
18239: GREATER
18240: OR
18241: PUSH
18242: LD_VAR 0 8
18246: PUSH
18247: LD_INT 2
18249: ARRAY
18250: PUSH
18251: LD_VAR 0 13
18255: PUSH
18256: LD_INT 2
18258: MINUS
18259: LESS
18260: OR
18261: PUSH
18262: LD_VAR 0 8
18266: PUSH
18267: LD_INT 3
18269: ARRAY
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 8
18276: PUSH
18277: LD_INT 9
18279: PUSH
18280: LD_INT 10
18282: PUSH
18283: LD_INT 11
18285: PUSH
18286: LD_INT 12
18288: PUSH
18289: LD_INT 13
18291: PUSH
18292: LD_INT 16
18294: PUSH
18295: LD_INT 17
18297: PUSH
18298: LD_INT 18
18300: PUSH
18301: LD_INT 19
18303: PUSH
18304: LD_INT 20
18306: PUSH
18307: LD_INT 21
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: IN
18325: NOT
18326: OR
18327: PUSH
18328: LD_VAR 0 8
18332: PUSH
18333: LD_INT 5
18335: ARRAY
18336: NOT
18337: OR
18338: PUSH
18339: LD_VAR 0 8
18343: PUSH
18344: LD_INT 6
18346: ARRAY
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 2
18353: PUSH
18354: LD_INT 7
18356: PUSH
18357: LD_INT 9
18359: PUSH
18360: LD_INT 10
18362: PUSH
18363: LD_INT 11
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: IN
18374: NOT
18375: OR
18376: IFFALSE 18382
// exit ;
18378: POP
18379: POP
18380: GO 18465
// end ;
18382: GO 18053
18384: POP
18385: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18386: LD_VAR 0 9
18390: PPUSH
18391: LD_VAR 0 3
18395: PPUSH
18396: LD_VAR 0 4
18400: PPUSH
18401: LD_INT 20
18403: PPUSH
18404: CALL 10411 0 4
18408: PUSH
18409: LD_INT 4
18411: ARRAY
18412: IFFALSE 18416
// exit ;
18414: GO 18465
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18416: LD_VAR 0 2
18420: PUSH
18421: LD_INT 29
18423: PUSH
18424: LD_INT 30
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: IN
18431: PUSH
18432: LD_VAR 0 3
18436: PPUSH
18437: LD_VAR 0 4
18441: PPUSH
18442: LD_VAR 0 9
18446: PPUSH
18447: CALL_OW 440
18451: NOT
18452: AND
18453: IFFALSE 18457
// exit ;
18455: GO 18465
// result := true ;
18457: LD_ADDR_VAR 0 6
18461: PUSH
18462: LD_INT 1
18464: ST_TO_ADDR
// end ;
18465: LD_VAR 0 6
18469: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18470: LD_INT 0
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
18486: PPUSH
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
18491: PPUSH
18492: PPUSH
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
18498: PPUSH
18499: PPUSH
18500: PPUSH
18501: PPUSH
18502: PPUSH
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
18507: PPUSH
18508: PPUSH
18509: PPUSH
18510: PPUSH
18511: PPUSH
18512: PPUSH
18513: PPUSH
18514: PPUSH
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
// result = [ ] ;
18530: LD_ADDR_VAR 0 7
18534: PUSH
18535: EMPTY
18536: ST_TO_ADDR
// temp_list = [ ] ;
18537: LD_ADDR_VAR 0 9
18541: PUSH
18542: EMPTY
18543: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18544: LD_VAR 0 4
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: LD_INT 3
18560: PUSH
18561: LD_INT 4
18563: PUSH
18564: LD_INT 5
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: IN
18575: NOT
18576: PUSH
18577: LD_VAR 0 1
18581: PUSH
18582: LD_INT 0
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: IN
18592: PUSH
18593: LD_VAR 0 5
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: LD_INT 3
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: IN
18612: NOT
18613: AND
18614: OR
18615: IFFALSE 18619
// exit ;
18617: GO 37010
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18619: LD_VAR 0 1
18623: PUSH
18624: LD_INT 6
18626: PUSH
18627: LD_INT 7
18629: PUSH
18630: LD_INT 8
18632: PUSH
18633: LD_INT 13
18635: PUSH
18636: LD_INT 12
18638: PUSH
18639: LD_INT 15
18641: PUSH
18642: LD_INT 11
18644: PUSH
18645: LD_INT 14
18647: PUSH
18648: LD_INT 10
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: IN
18662: IFFALSE 18672
// btype = b_lab ;
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: LD_INT 6
18671: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18672: LD_VAR 0 6
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: IN
18691: NOT
18692: PUSH
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: LD_INT 2
18706: PUSH
18707: LD_INT 3
18709: PUSH
18710: LD_INT 6
18712: PUSH
18713: LD_INT 36
18715: PUSH
18716: LD_INT 4
18718: PUSH
18719: LD_INT 5
18721: PUSH
18722: LD_INT 31
18724: PUSH
18725: LD_INT 32
18727: PUSH
18728: LD_INT 33
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: IN
18744: NOT
18745: PUSH
18746: LD_VAR 0 6
18750: PUSH
18751: LD_INT 1
18753: EQUAL
18754: AND
18755: OR
18756: PUSH
18757: LD_VAR 0 1
18761: PUSH
18762: LD_INT 2
18764: PUSH
18765: LD_INT 3
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: IN
18772: NOT
18773: PUSH
18774: LD_VAR 0 6
18778: PUSH
18779: LD_INT 2
18781: EQUAL
18782: AND
18783: OR
18784: IFFALSE 18794
// mode = 0 ;
18786: LD_ADDR_VAR 0 6
18790: PUSH
18791: LD_INT 0
18793: ST_TO_ADDR
// case mode of 0 :
18794: LD_VAR 0 6
18798: PUSH
18799: LD_INT 0
18801: DOUBLE
18802: EQUAL
18803: IFTRUE 18807
18805: GO 30260
18807: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18808: LD_ADDR_VAR 0 11
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: LD_INT 0
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: LD_INT 1
18828: NEG
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: LD_INT 0
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: LD_INT 1
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: NEG
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 1
18877: NEG
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: LD_INT 2
18893: NEG
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: LD_INT 2
18904: NEG
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: LD_INT 1
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 0
18933: PUSH
18934: LD_INT 2
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: NEG
18944: PUSH
18945: LD_INT 1
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: LD_INT 3
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: LD_INT 3
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19001: LD_ADDR_VAR 0 12
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 0
19018: PUSH
19019: LD_INT 1
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: LD_INT 0
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 1
19070: NEG
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: LD_INT 0
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 1
19113: NEG
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 2
19124: NEG
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: NEG
19136: PUSH
19137: LD_INT 1
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 2
19147: NEG
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 3
19158: NEG
19159: PUSH
19160: LD_INT 0
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 3
19169: NEG
19170: PUSH
19171: LD_INT 1
19173: NEG
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19197: LD_ADDR_VAR 0 13
19201: PUSH
19202: LD_INT 0
19204: PUSH
19205: LD_INT 0
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: LD_INT 1
19217: NEG
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 1
19255: NEG
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 1
19266: NEG
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: LD_INT 2
19282: NEG
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 2
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 2
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: LD_INT 2
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: NEG
19321: PUSH
19322: LD_INT 1
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: NEG
19333: PUSH
19334: LD_INT 2
19336: NEG
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: LD_INT 3
19348: NEG
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 3
19356: NEG
19357: PUSH
19358: LD_INT 2
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 3
19368: NEG
19369: PUSH
19370: LD_INT 3
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19396: LD_ADDR_VAR 0 14
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: LD_INT 2
19481: NEG
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: NEG
19543: PUSH
19544: LD_INT 3
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 3
19557: NEG
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: LD_INT 2
19568: NEG
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19592: LD_ADDR_VAR 0 15
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: LD_INT 1
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 0
19640: PUSH
19641: LD_INT 1
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 1
19650: NEG
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: LD_INT 1
19676: NEG
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 1
19704: NEG
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 2
19715: NEG
19716: PUSH
19717: LD_INT 0
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: LD_INT 1
19730: NEG
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 0
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 3
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19785: LD_ADDR_VAR 0 16
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 2
19908: NEG
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 3
19942: PUSH
19943: LD_INT 3
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: LD_INT 3
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19978: LD_ADDR_VAR 0 17
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: LD_INT 1
19998: NEG
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 1
20047: NEG
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: LD_INT 2
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: LD_INT 2
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 2
20093: PUSH
20094: LD_INT 0
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: LD_INT 2
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 0
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 1
20143: NEG
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: NEG
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: NEG
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: NEG
20178: PUSH
20179: LD_INT 2
20181: NEG
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20208: LD_ADDR_VAR 0 18
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: LD_INT 0
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: LD_INT 1
20228: NEG
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 1
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: LD_INT 1
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 1
20266: NEG
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 1
20277: NEG
20278: PUSH
20279: LD_INT 1
20281: NEG
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 1
20289: NEG
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: LD_INT 2
20304: NEG
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 2
20323: PUSH
20324: LD_INT 0
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 2
20333: PUSH
20334: LD_INT 1
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 0
20363: PUSH
20364: LD_INT 2
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: NEG
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: NEG
20385: PUSH
20386: LD_INT 0
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 2
20395: NEG
20396: PUSH
20397: LD_INT 1
20399: NEG
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: LD_INT 2
20411: NEG
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20438: LD_ADDR_VAR 0 19
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: LD_INT 0
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 1
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: LD_INT 0
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 1
20496: NEG
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: NEG
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 1
20519: NEG
20520: PUSH
20521: LD_INT 2
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: LD_INT 2
20534: NEG
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: LD_INT 1
20545: NEG
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 2
20553: PUSH
20554: LD_INT 0
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 2
20573: PUSH
20574: LD_INT 2
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: LD_INT 2
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 2
20614: NEG
20615: PUSH
20616: LD_INT 0
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 2
20625: NEG
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 2
20637: NEG
20638: PUSH
20639: LD_INT 2
20641: NEG
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20668: LD_ADDR_VAR 0 20
20672: PUSH
20673: LD_INT 0
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 1
20688: NEG
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: LD_INT 0
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: LD_INT 1
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 1
20737: NEG
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 1
20749: NEG
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: LD_INT 2
20764: NEG
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: LD_INT 0
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: LD_INT 1
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: LD_INT 2
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: NEG
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: LD_INT 0
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 2
20855: NEG
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: LD_INT 2
20871: NEG
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20898: LD_ADDR_VAR 0 21
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 1
20918: NEG
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: NEG
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: NEG
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: LD_INT 2
20994: NEG
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: LD_INT 0
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 2
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: LD_INT 1
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 2
21074: NEG
21075: PUSH
21076: LD_INT 0
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 2
21085: NEG
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: NEG
21098: PUSH
21099: LD_INT 2
21101: NEG
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21128: LD_ADDR_VAR 0 22
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: LD_INT 1
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: LD_INT 0
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 1
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 0
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: NEG
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: NEG
21198: PUSH
21199: LD_INT 1
21201: NEG
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 1
21209: NEG
21210: PUSH
21211: LD_INT 2
21213: NEG
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 0
21221: PUSH
21222: LD_INT 2
21224: NEG
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: LD_INT 0
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 2
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 2
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: LD_INT 0
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 2
21315: NEG
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: NEG
21328: PUSH
21329: LD_INT 2
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21358: LD_ADDR_VAR 0 23
21362: PUSH
21363: LD_INT 0
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 1
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 1
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: NEG
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: LD_INT 2
21454: NEG
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: LD_INT 1
21465: NEG
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 2
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 2
21483: PUSH
21484: LD_INT 1
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 2
21493: PUSH
21494: LD_INT 2
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: LD_INT 2
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 0
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 2
21534: NEG
21535: PUSH
21536: LD_INT 0
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: LD_INT 2
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 2
21569: NEG
21570: PUSH
21571: LD_INT 3
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: LD_INT 3
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: LD_INT 2
21596: NEG
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 2
21604: PUSH
21605: LD_INT 1
21607: NEG
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21638: LD_ADDR_VAR 0 24
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: LD_INT 0
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 1
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: NEG
21720: PUSH
21721: LD_INT 2
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: LD_INT 2
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 2
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 2
21763: PUSH
21764: LD_INT 1
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 2
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 1
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: LD_INT 2
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 1
21803: NEG
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 2
21814: NEG
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: NEG
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 2
21837: NEG
21838: PUSH
21839: LD_INT 2
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 2
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 3
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 3
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21914: LD_ADDR_VAR 0 25
21918: PUSH
21919: LD_INT 0
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 1
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 1
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: LD_INT 2
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: LD_INT 1
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 2
22029: PUSH
22030: LD_INT 0
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 2
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 1
22079: NEG
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: NEG
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: NEG
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: LD_INT 2
22117: NEG
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 3
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 3
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: LD_INT 3
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22188: LD_ADDR_VAR 0 26
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: LD_INT 1
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 1
22246: NEG
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 1
22269: NEG
22270: PUSH
22271: LD_INT 2
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: LD_INT 2
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 2
22303: PUSH
22304: LD_INT 0
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: LD_INT 1
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: LD_INT 2
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: LD_INT 2
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: NEG
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 2
22375: NEG
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 2
22387: NEG
22388: PUSH
22389: LD_INT 2
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: LD_INT 3
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: LD_INT 3
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: LD_INT 2
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22464: LD_ADDR_VAR 0 27
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: LD_INT 0
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: LD_INT 1
22484: NEG
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: NEG
22523: PUSH
22524: LD_INT 0
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 1
22533: NEG
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: LD_INT 2
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 0
22557: PUSH
22558: LD_INT 2
22560: NEG
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 1
22568: PUSH
22569: LD_INT 1
22571: NEG
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 2
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: LD_INT 2
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: NEG
22630: PUSH
22631: LD_INT 1
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 2
22640: NEG
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 2
22651: NEG
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 2
22663: NEG
22664: PUSH
22665: LD_INT 2
22667: NEG
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 1
22675: NEG
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: NEG
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 3
22697: NEG
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 3
22709: NEG
22710: PUSH
22711: LD_INT 2
22713: NEG
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22744: LD_ADDR_VAR 0 28
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 0
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: LD_INT 1
22764: NEG
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 1
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 1
22802: NEG
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: LD_INT 1
22817: NEG
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: NEG
22826: PUSH
22827: LD_INT 2
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: LD_INT 2
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 2
22859: PUSH
22860: LD_INT 0
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 2
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: LD_INT 2
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: LD_INT 2
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 2
22920: NEG
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: NEG
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: LD_INT 3
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: LD_INT 3
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 3
22979: NEG
22980: PUSH
22981: LD_INT 1
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 3
22991: NEG
22992: PUSH
22993: LD_INT 2
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23026: LD_ADDR_VAR 0 29
23030: PUSH
23031: LD_INT 0
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: LD_INT 1
23046: NEG
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 0
23119: PUSH
23120: LD_INT 2
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: LD_INT 0
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 2
23151: PUSH
23152: LD_INT 1
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 1
23161: PUSH
23162: LD_INT 2
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 0
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 1
23181: NEG
23182: PUSH
23183: LD_INT 1
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: NEG
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 2
23204: NEG
23205: PUSH
23206: LD_INT 2
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 2
23216: NEG
23217: PUSH
23218: LD_INT 3
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 3
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 3
23270: NEG
23271: PUSH
23272: LD_INT 2
23274: NEG
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23305: LD_ADDR_VAR 0 30
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: LD_INT 1
23325: NEG
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 1
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 1
23363: NEG
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 1
23374: NEG
23375: PUSH
23376: LD_INT 1
23378: NEG
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: LD_INT 2
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 2
23401: NEG
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 2
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 2
23440: PUSH
23441: LD_INT 2
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: NEG
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 2
23482: NEG
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: LD_INT 3
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 3
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: LD_INT 3
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 2
23537: NEG
23538: PUSH
23539: LD_INT 1
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 3
23548: NEG
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23583: LD_ADDR_VAR 0 31
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: LD_INT 1
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: PUSH
23654: LD_INT 1
23656: NEG
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: LD_INT 2
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 2
23748: NEG
23749: PUSH
23750: LD_INT 1
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 2
23760: NEG
23761: PUSH
23762: LD_INT 2
23764: NEG
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 2
23772: NEG
23773: PUSH
23774: LD_INT 3
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 3
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: LD_INT 3
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: LD_INT 2
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 3
23826: NEG
23827: PUSH
23828: LD_INT 2
23830: NEG
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23861: LD_ADDR_VAR 0 32
23865: PUSH
23866: LD_INT 0
23868: PUSH
23869: LD_INT 0
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 1
23919: NEG
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: LD_INT 1
23934: NEG
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: LD_INT 2
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: LD_INT 2
23957: NEG
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 2
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 2
24027: NEG
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 2
24038: NEG
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: LD_INT 3
24054: NEG
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: LD_INT 2
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 3
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: LD_INT 3
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 2
24093: NEG
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 3
24104: NEG
24105: PUSH
24106: LD_INT 1
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24139: LD_ADDR_VAR 0 33
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: LD_INT 0
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 1
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PUSH
24222: LD_INT 2
24224: NEG
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: LD_INT 1
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 2
24294: NEG
24295: PUSH
24296: LD_INT 0
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 2
24305: NEG
24306: PUSH
24307: LD_INT 1
24309: NEG
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 2
24317: NEG
24318: PUSH
24319: LD_INT 2
24321: NEG
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 2
24329: NEG
24330: PUSH
24331: LD_INT 3
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 2
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 3
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: LD_INT 3
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: NEG
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 3
24383: NEG
24384: PUSH
24385: LD_INT 2
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24418: LD_ADDR_VAR 0 34
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 2
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 2
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: LD_INT 2
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 2
24574: NEG
24575: PUSH
24576: LD_INT 0
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 2
24585: NEG
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 2
24597: NEG
24598: PUSH
24599: LD_INT 2
24601: NEG
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: LD_INT 3
24613: NEG
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: LD_INT 2
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 3
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 2
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 2
24652: NEG
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 3
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24698: LD_ADDR_VAR 0 35
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: LD_INT 0
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: LD_INT 1
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: LD_INT 1
24771: NEG
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 2
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 2
24789: NEG
24790: PUSH
24791: LD_INT 1
24793: NEG
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24810: LD_ADDR_VAR 0 36
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: NEG
24892: PUSH
24893: LD_INT 2
24895: NEG
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24922: LD_ADDR_VAR 0 37
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 0
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25034: LD_ADDR_VAR 0 38
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 1
25054: NEG
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 2
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 2
25125: NEG
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25146: LD_ADDR_VAR 0 39
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: LD_INT 2
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25258: LD_ADDR_VAR 0 40
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: LD_INT 1
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: LD_INT 1
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25370: LD_ADDR_VAR 0 41
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: LD_INT 1
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: LD_INT 1
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: LD_INT 1
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 2
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: LD_INT 2
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 2
25525: NEG
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 2
25536: NEG
25537: PUSH
25538: LD_INT 1
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 2
25548: NEG
25549: PUSH
25550: LD_INT 2
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: LD_INT 3
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 3
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 3
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 3
25603: PUSH
25604: LD_INT 2
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 3
25613: PUSH
25614: LD_INT 3
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: LD_INT 3
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 3
25644: NEG
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 3
25655: NEG
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 3
25667: NEG
25668: PUSH
25669: LD_INT 2
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 3
25679: NEG
25680: PUSH
25681: LD_INT 3
25683: NEG
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25720: LD_ADDR_VAR 0 42
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: LD_INT 1
25740: NEG
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: NEG
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: LD_INT 2
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 1
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 2
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: LD_INT 2
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: LD_INT 2
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 1
25875: NEG
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 2
25886: NEG
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: NEG
25899: PUSH
25900: LD_INT 2
25902: NEG
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: LD_INT 3
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: PUSH
25924: LD_INT 3
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 3
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 2
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 2
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 3
25966: PUSH
25967: LD_INT 3
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 3
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: LD_INT 3
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: LD_INT 3
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 3
26017: NEG
26018: PUSH
26019: LD_INT 2
26021: NEG
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 3
26029: NEG
26030: PUSH
26031: LD_INT 3
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26070: LD_ADDR_VAR 0 43
26074: PUSH
26075: LD_INT 0
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 1
26139: NEG
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: LD_INT 2
26155: NEG
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 0
26163: PUSH
26164: LD_INT 2
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 2
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: NEG
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: NEG
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 2
26247: NEG
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: PUSH
26261: LD_INT 3
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: LD_INT 3
26274: NEG
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: LD_INT 2
26285: NEG
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 2
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 3
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 3
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: LD_INT 3
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 3
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 3
26366: NEG
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 3
26377: NEG
26378: PUSH
26379: LD_INT 1
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26418: LD_ADDR_VAR 0 44
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 2
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 2
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 2
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: NEG
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: NEG
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: NEG
26609: PUSH
26610: LD_INT 3
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 3
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 3
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 3
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 3
26661: PUSH
26662: LD_INT 3
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 2
26671: PUSH
26672: LD_INT 3
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: NEG
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 3
26692: NEG
26693: PUSH
26694: LD_INT 0
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 3
26703: NEG
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 3
26715: NEG
26716: PUSH
26717: LD_INT 2
26719: NEG
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 3
26727: NEG
26728: PUSH
26729: LD_INT 3
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26768: LD_ADDR_VAR 0 45
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: LD_INT 2
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: LD_INT 2
26864: NEG
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 2
26893: PUSH
26894: LD_INT 2
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 2
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 2
26934: NEG
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 2
26946: NEG
26947: PUSH
26948: LD_INT 2
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 2
26958: NEG
26959: PUSH
26960: LD_INT 3
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: PUSH
26972: LD_INT 3
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 3
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 2
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 3
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: LD_INT 3
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 3
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 3
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 3
27065: NEG
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 3
27077: NEG
27078: PUSH
27079: LD_INT 3
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27118: LD_ADDR_VAR 0 46
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: LD_INT 2
27214: NEG
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: NEG
27308: PUSH
27309: LD_INT 3
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: LD_INT 3
27322: NEG
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 3
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 3
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 3
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: LD_INT 2
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 2
27403: NEG
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 3
27414: NEG
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 3
27425: NEG
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27466: LD_ADDR_VAR 0 47
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: LD_INT 2
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27617: LD_ADDR_VAR 0 48
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: LD_INT 1
27637: NEG
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 1
27686: NEG
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: LD_INT 2
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27764: LD_ADDR_VAR 0 49
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: LD_INT 1
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 1
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: LD_INT 2
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27908: LD_ADDR_VAR 0 50
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 2
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 2
27999: PUSH
28000: LD_INT 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 1
28009: PUSH
28010: LD_INT 2
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: LD_INT 2
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28052: LD_ADDR_VAR 0 51
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: LD_INT 1
28072: NEG
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 2
28164: NEG
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: NEG
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28199: LD_ADDR_VAR 0 52
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: LD_INT 0
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: LD_INT 1
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: NEG
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: NEG
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: LD_INT 2
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28350: LD_ADDR_VAR 0 53
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 1
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 1
28431: NEG
28432: PUSH
28433: LD_INT 2
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 2
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 2
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: PUSH
28486: LD_INT 2
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: LD_INT 2
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 2
28526: NEG
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 2
28537: NEG
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 2
28549: NEG
28550: PUSH
28551: LD_INT 2
28553: NEG
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28580: LD_ADDR_VAR 0 54
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 1
28638: NEG
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: NEG
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: LD_INT 2
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: LD_INT 2
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 2
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 2
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 2
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 2
28756: NEG
28757: PUSH
28758: LD_INT 0
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: NEG
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 2
28779: NEG
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28810: LD_ADDR_VAR 0 55
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 0
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: LD_INT 2
28895: NEG
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 2
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 2
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 2
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: PUSH
28946: LD_INT 2
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 2
28986: NEG
28987: PUSH
28988: LD_INT 0
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 2
28997: NEG
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: NEG
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29040: LD_ADDR_VAR 0 56
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 1
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 1
29098: NEG
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: LD_INT 2
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 2
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 2
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: LD_INT 2
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 2
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: NEG
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29270: LD_ADDR_VAR 0 57
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: NEG
29352: PUSH
29353: LD_INT 2
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 2
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 2
29446: NEG
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: NEG
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29500: LD_ADDR_VAR 0 58
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 1
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: NEG
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: NEG
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 0
29593: PUSH
29594: LD_INT 2
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 2
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: LD_INT 2
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 2
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: NEG
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 2
29699: NEG
29700: PUSH
29701: LD_INT 2
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29730: LD_ADDR_VAR 0 59
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 1
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: LD_INT 1
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: NEG
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29818: LD_ADDR_VAR 0 60
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 1
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29906: LD_ADDR_VAR 0 61
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29994: LD_ADDR_VAR 0 62
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30082: LD_ADDR_VAR 0 63
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: LD_INT 1
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30170: LD_ADDR_VAR 0 64
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: ST_TO_ADDR
// end ; 1 :
30258: GO 36155
30260: LD_INT 1
30262: DOUBLE
30263: EQUAL
30264: IFTRUE 30268
30266: GO 32891
30268: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30269: LD_ADDR_VAR 0 11
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 3
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 3
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: LD_INT 2
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30313: LD_ADDR_VAR 0 12
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 3
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: LIST
30353: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30354: LD_ADDR_VAR 0 13
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 3
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30394: LD_ADDR_VAR 0 14
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: LD_INT 3
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 2
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30435: LD_ADDR_VAR 0 15
30439: PUSH
30440: LD_INT 2
30442: NEG
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 3
30453: NEG
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 3
30464: NEG
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30479: LD_ADDR_VAR 0 16
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: LD_INT 2
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 3
30510: NEG
30511: PUSH
30512: LD_INT 3
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30525: LD_ADDR_VAR 0 17
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: LD_INT 3
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: LD_INT 2
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: LIST
30568: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30569: LD_ADDR_VAR 0 18
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 3
30587: PUSH
30588: LD_INT 0
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: LD_INT 1
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30610: LD_ADDR_VAR 0 19
30614: PUSH
30615: LD_INT 3
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 3
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 3
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: LIST
30649: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30650: LD_ADDR_VAR 0 20
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: LD_INT 3
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30691: LD_ADDR_VAR 0 21
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 3
30709: NEG
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 3
30720: NEG
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30735: LD_ADDR_VAR 0 22
30739: PUSH
30740: LD_INT 2
30742: NEG
30743: PUSH
30744: LD_INT 3
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 3
30754: NEG
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 3
30766: NEG
30767: PUSH
30768: LD_INT 3
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30781: LD_ADDR_VAR 0 23
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 3
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 4
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30825: LD_ADDR_VAR 0 24
30829: PUSH
30830: LD_INT 3
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 4
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30866: LD_ADDR_VAR 0 25
30870: PUSH
30871: LD_INT 3
30873: PUSH
30874: LD_INT 3
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 4
30883: PUSH
30884: LD_INT 3
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 3
30893: PUSH
30894: LD_INT 4
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30906: LD_ADDR_VAR 0 26
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 4
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: LD_INT 3
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: LIST
30946: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30947: LD_ADDR_VAR 0 27
30951: PUSH
30952: LD_INT 3
30954: NEG
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 3
30965: NEG
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 4
30976: NEG
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30991: LD_ADDR_VAR 0 28
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: LD_INT 4
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 4
31022: NEG
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31037: LD_ADDR_VAR 0 29
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: LD_INT 3
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: LD_INT 3
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: LD_INT 2
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: LD_INT 4
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 4
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 3
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 5
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 0
31124: PUSH
31125: LD_INT 5
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: LD_INT 4
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: LD_INT 6
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: LD_INT 6
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: LD_INT 5
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31192: LD_ADDR_VAR 0 30
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: LD_INT 1
31202: NEG
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 3
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 4
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 4
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 4
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 5
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 5
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 5
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 6
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 6
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31335: LD_ADDR_VAR 0 31
31339: PUSH
31340: LD_INT 3
31342: PUSH
31343: LD_INT 2
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 3
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 4
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 4
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 3
31392: PUSH
31393: LD_INT 4
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 5
31402: PUSH
31403: LD_INT 4
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 5
31412: PUSH
31413: LD_INT 5
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 4
31422: PUSH
31423: LD_INT 5
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 6
31432: PUSH
31433: LD_INT 5
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 6
31442: PUSH
31443: LD_INT 6
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 5
31452: PUSH
31453: LD_INT 6
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31474: LD_ADDR_VAR 0 32
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 1
31501: NEG
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 4
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: LD_INT 4
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: LD_INT 5
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: LD_INT 5
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 4
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: LD_INT 6
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: LD_INT 6
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: LD_INT 5
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31617: LD_ADDR_VAR 0 33
31621: PUSH
31622: LD_INT 2
31624: NEG
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 3
31635: NEG
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 3
31646: NEG
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 3
31658: NEG
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 4
31669: NEG
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 4
31680: NEG
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 4
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 5
31703: NEG
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 5
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 5
31726: NEG
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 6
31737: NEG
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 6
31748: NEG
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31772: LD_ADDR_VAR 0 34
31776: PUSH
31777: LD_INT 2
31779: NEG
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 3
31803: NEG
31804: PUSH
31805: LD_INT 3
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: LD_INT 4
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 4
31827: NEG
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 4
31839: NEG
31840: PUSH
31841: LD_INT 4
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 4
31851: NEG
31852: PUSH
31853: LD_INT 5
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 5
31863: NEG
31864: PUSH
31865: LD_INT 4
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 5
31875: NEG
31876: PUSH
31877: LD_INT 5
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 5
31887: NEG
31888: PUSH
31889: LD_INT 6
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 6
31899: NEG
31900: PUSH
31901: LD_INT 5
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 6
31911: NEG
31912: PUSH
31913: LD_INT 6
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31935: LD_ADDR_VAR 0 41
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: LD_INT 3
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 2
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31979: LD_ADDR_VAR 0 42
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 3
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: LIST
32019: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32020: LD_ADDR_VAR 0 43
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: LD_INT 2
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: LD_INT 3
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32060: LD_ADDR_VAR 0 44
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: LD_INT 3
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: LIST
32100: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32101: LD_ADDR_VAR 0 45
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 3
32130: NEG
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32145: LD_ADDR_VAR 0 46
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: LD_INT 2
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: LD_INT 3
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 3
32176: NEG
32177: PUSH
32178: LD_INT 2
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: LIST
32190: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32191: LD_ADDR_VAR 0 47
32195: PUSH
32196: LD_INT 2
32198: NEG
32199: PUSH
32200: LD_INT 3
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: LD_INT 3
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32224: LD_ADDR_VAR 0 48
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: LD_INT 2
32234: NEG
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32255: LD_ADDR_VAR 0 49
32259: PUSH
32260: LD_INT 3
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 3
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32284: LD_ADDR_VAR 0 50
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 3
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: LD_INT 3
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32313: LD_ADDR_VAR 0 51
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: NEG
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32344: LD_ADDR_VAR 0 52
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 3
32363: NEG
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32377: LD_ADDR_VAR 0 53
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: LD_INT 3
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: LD_INT 3
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: LD_INT 2
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: LIST
32420: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32421: LD_ADDR_VAR 0 54
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 3
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 3
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: LIST
32461: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32462: LD_ADDR_VAR 0 55
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: LD_INT 3
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32502: LD_ADDR_VAR 0 56
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: LD_INT 2
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32543: LD_ADDR_VAR 0 57
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: LD_INT 1
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32587: LD_ADDR_VAR 0 58
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: LD_INT 3
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 3
32618: NEG
32619: PUSH
32620: LD_INT 3
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32633: LD_ADDR_VAR 0 59
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: LD_INT 2
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: LD_INT 2
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32677: LD_ADDR_VAR 0 60
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: LIST
32717: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32718: LD_ADDR_VAR 0 61
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32758: LD_ADDR_VAR 0 62
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 2
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: LIST
32798: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32799: LD_ADDR_VAR 0 63
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: NEG
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: LIST
32842: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32843: LD_ADDR_VAR 0 64
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 2
32862: NEG
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: NEG
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: ST_TO_ADDR
// end ; 2 :
32889: GO 36155
32891: LD_INT 2
32893: DOUBLE
32894: EQUAL
32895: IFTRUE 32899
32897: GO 36154
32899: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32900: LD_ADDR_VAR 0 29
32904: PUSH
32905: LD_INT 4
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 4
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 5
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 5
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 4
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 3
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 3
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 5
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 3
33000: PUSH
33001: LD_INT 3
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 3
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 4
33020: PUSH
33021: LD_INT 3
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 4
33030: PUSH
33031: LD_INT 4
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 3
33040: PUSH
33041: LD_INT 4
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 3
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 4
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 4
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 4
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 3
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 4
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: LD_INT 5
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: LD_INT 5
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 4
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 3
33183: NEG
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 3
33194: NEG
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 2
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 4
33239: NEG
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 4
33250: NEG
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 4
33262: NEG
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: LD_INT 4
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 4
33297: NEG
33298: PUSH
33299: LD_INT 5
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 3
33309: NEG
33310: PUSH
33311: LD_INT 4
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: NEG
33322: PUSH
33323: LD_INT 3
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: LD_INT 3
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 5
33345: NEG
33346: PUSH
33347: LD_INT 4
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 5
33357: NEG
33358: PUSH
33359: LD_INT 5
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 3
33369: NEG
33370: PUSH
33371: LD_INT 5
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 5
33381: NEG
33382: PUSH
33383: LD_INT 3
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33438: LD_ADDR_VAR 0 30
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: LD_INT 4
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 4
33455: PUSH
33456: LD_INT 3
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 5
33465: PUSH
33466: LD_INT 4
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 5
33475: PUSH
33476: LD_INT 5
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 4
33485: PUSH
33486: LD_INT 5
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: LD_INT 4
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 5
33515: PUSH
33516: LD_INT 3
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: LD_INT 5
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: LD_INT 2
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 4
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: LD_INT 4
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: LD_INT 3
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: LD_INT 4
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 4
33628: NEG
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 4
33639: NEG
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 3
33651: NEG
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 3
33662: NEG
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 4
33673: NEG
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 5
33684: NEG
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 5
33695: NEG
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 5
33707: NEG
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 3
33719: NEG
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 3
33730: NEG
33731: PUSH
33732: LD_INT 3
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 3
33742: NEG
33743: PUSH
33744: LD_INT 4
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 2
33754: NEG
33755: PUSH
33756: LD_INT 3
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: LD_INT 2
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 3
33778: NEG
33779: PUSH
33780: LD_INT 2
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 4
33790: NEG
33791: PUSH
33792: LD_INT 3
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 4
33802: NEG
33803: PUSH
33804: LD_INT 4
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 2
33814: NEG
33815: PUSH
33816: LD_INT 4
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 4
33826: NEG
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 4
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 5
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 4
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 3
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 3
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: LD_INT 5
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: LD_INT 5
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33985: LD_ADDR_VAR 0 31
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 4
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: LD_INT 3
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: LD_INT 4
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: LD_INT 5
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: LD_INT 5
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 4
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: LD_INT 3
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: LD_INT 5
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 3
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 3
34085: NEG
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 3
34096: NEG
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 2
34108: NEG
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: NEG
34120: PUSH
34121: LD_INT 1
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 3
34130: NEG
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 4
34141: NEG
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 4
34152: NEG
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 4
34164: NEG
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 4
34187: NEG
34188: PUSH
34189: LD_INT 4
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 4
34199: NEG
34200: PUSH
34201: LD_INT 5
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 3
34211: NEG
34212: PUSH
34213: LD_INT 4
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 3
34223: NEG
34224: PUSH
34225: LD_INT 3
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 4
34235: NEG
34236: PUSH
34237: LD_INT 3
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 5
34247: NEG
34248: PUSH
34249: LD_INT 4
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 5
34259: NEG
34260: PUSH
34261: LD_INT 5
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: LD_INT 5
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 5
34283: NEG
34284: PUSH
34285: LD_INT 3
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: LD_INT 4
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 3
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: LD_INT 3
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: LD_INT 4
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 2
34385: NEG
34386: PUSH
34387: LD_INT 4
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 4
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 4
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 5
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 5
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 4
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 3
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 3
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: LD_INT 2
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 5
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34535: LD_ADDR_VAR 0 32
34539: PUSH
34540: LD_INT 4
34542: NEG
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 4
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 3
34565: NEG
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 3
34576: NEG
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 4
34587: NEG
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 5
34598: NEG
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 5
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 5
34621: NEG
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 3
34633: NEG
34634: PUSH
34635: LD_INT 2
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 3
34644: NEG
34645: PUSH
34646: LD_INT 3
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 3
34656: NEG
34657: PUSH
34658: LD_INT 4
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: LD_INT 3
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 2
34680: NEG
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 3
34692: NEG
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 4
34704: NEG
34705: PUSH
34706: LD_INT 3
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 4
34716: NEG
34717: PUSH
34718: LD_INT 4
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 2
34728: NEG
34729: PUSH
34730: LD_INT 4
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 4
34740: NEG
34741: PUSH
34742: LD_INT 2
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 4
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 5
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 4
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: LD_INT 3
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: LD_INT 3
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: LD_INT 4
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 5
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 3
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: LD_INT 5
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 3
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 4
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 4
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 3
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 4
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 4
34947: PUSH
34948: LD_INT 4
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 4
34957: PUSH
34958: LD_INT 3
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 5
34967: PUSH
34968: LD_INT 4
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 5
34977: PUSH
34978: LD_INT 5
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 3
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 3
35007: PUSH
35008: LD_INT 3
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 5
35017: PUSH
35018: LD_INT 3
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: LD_INT 5
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35082: LD_ADDR_VAR 0 33
35086: PUSH
35087: LD_INT 4
35089: NEG
35090: PUSH
35091: LD_INT 4
35093: NEG
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 4
35101: NEG
35102: PUSH
35103: LD_INT 5
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 3
35113: NEG
35114: PUSH
35115: LD_INT 4
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 3
35125: NEG
35126: PUSH
35127: LD_INT 3
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 4
35137: NEG
35138: PUSH
35139: LD_INT 3
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 5
35149: NEG
35150: PUSH
35151: LD_INT 4
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 5
35161: NEG
35162: PUSH
35163: LD_INT 5
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 3
35173: NEG
35174: PUSH
35175: LD_INT 5
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 5
35185: NEG
35186: PUSH
35187: LD_INT 3
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 3
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 4
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: LD_INT 3
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: LD_INT 3
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 4
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: LD_INT 2
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: NEG
35288: PUSH
35289: LD_INT 4
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 4
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 4
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 5
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 5
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 4
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 3
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 3
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 3
35371: PUSH
35372: LD_INT 2
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 5
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: LD_INT 3
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 3
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 4
35412: PUSH
35413: LD_INT 3
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 4
35422: PUSH
35423: LD_INT 4
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 3
35432: PUSH
35433: LD_INT 4
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: LD_INT 3
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 2
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 4
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 4
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: LD_INT 4
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: LD_INT 3
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: LD_INT 4
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 5
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 5
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 4
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: LD_INT 3
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: LD_INT 5
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: NEG
35565: PUSH
35566: LD_INT 3
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35620: LD_ADDR_VAR 0 34
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: LD_INT 4
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: LD_INT 5
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: LD_INT 4
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: LD_INT 3
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: LD_INT 4
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: LD_INT 5
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 3
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: LD_INT 5
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 3
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 3
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 4
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 4
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 3
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 4
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 4
35822: PUSH
35823: LD_INT 4
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 4
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 5
35842: PUSH
35843: LD_INT 4
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 5
35852: PUSH
35853: LD_INT 5
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 4
35862: PUSH
35863: LD_INT 5
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 3
35872: PUSH
35873: LD_INT 4
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: LD_INT 3
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 5
35892: PUSH
35893: LD_INT 3
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 3
35902: PUSH
35903: LD_INT 5
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: LD_INT 3
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 3
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: LD_INT 4
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 4
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: LD_INT 3
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 2
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: LD_INT 4
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 4
36005: NEG
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 4
36016: NEG
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 3
36028: NEG
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 3
36039: NEG
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 4
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 5
36061: NEG
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 5
36072: NEG
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 5
36084: NEG
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 3
36096: NEG
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: ST_TO_ADDR
// end ; end ;
36152: GO 36155
36154: POP
// case btype of b_depot , b_warehouse :
36155: LD_VAR 0 1
36159: PUSH
36160: LD_INT 0
36162: DOUBLE
36163: EQUAL
36164: IFTRUE 36174
36166: LD_INT 1
36168: DOUBLE
36169: EQUAL
36170: IFTRUE 36174
36172: GO 36375
36174: POP
// case nation of nation_american :
36175: LD_VAR 0 5
36179: PUSH
36180: LD_INT 1
36182: DOUBLE
36183: EQUAL
36184: IFTRUE 36188
36186: GO 36244
36188: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36189: LD_ADDR_VAR 0 9
36193: PUSH
36194: LD_VAR 0 11
36198: PUSH
36199: LD_VAR 0 12
36203: PUSH
36204: LD_VAR 0 13
36208: PUSH
36209: LD_VAR 0 14
36213: PUSH
36214: LD_VAR 0 15
36218: PUSH
36219: LD_VAR 0 16
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: PUSH
36232: LD_VAR 0 4
36236: PUSH
36237: LD_INT 1
36239: PLUS
36240: ARRAY
36241: ST_TO_ADDR
36242: GO 36373
36244: LD_INT 2
36246: DOUBLE
36247: EQUAL
36248: IFTRUE 36252
36250: GO 36308
36252: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36253: LD_ADDR_VAR 0 9
36257: PUSH
36258: LD_VAR 0 17
36262: PUSH
36263: LD_VAR 0 18
36267: PUSH
36268: LD_VAR 0 19
36272: PUSH
36273: LD_VAR 0 20
36277: PUSH
36278: LD_VAR 0 21
36282: PUSH
36283: LD_VAR 0 22
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: PUSH
36296: LD_VAR 0 4
36300: PUSH
36301: LD_INT 1
36303: PLUS
36304: ARRAY
36305: ST_TO_ADDR
36306: GO 36373
36308: LD_INT 3
36310: DOUBLE
36311: EQUAL
36312: IFTRUE 36316
36314: GO 36372
36316: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36317: LD_ADDR_VAR 0 9
36321: PUSH
36322: LD_VAR 0 23
36326: PUSH
36327: LD_VAR 0 24
36331: PUSH
36332: LD_VAR 0 25
36336: PUSH
36337: LD_VAR 0 26
36341: PUSH
36342: LD_VAR 0 27
36346: PUSH
36347: LD_VAR 0 28
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: PUSH
36360: LD_VAR 0 4
36364: PUSH
36365: LD_INT 1
36367: PLUS
36368: ARRAY
36369: ST_TO_ADDR
36370: GO 36373
36372: POP
36373: GO 36928
36375: LD_INT 2
36377: DOUBLE
36378: EQUAL
36379: IFTRUE 36389
36381: LD_INT 3
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36389
36387: GO 36445
36389: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36390: LD_ADDR_VAR 0 9
36394: PUSH
36395: LD_VAR 0 29
36399: PUSH
36400: LD_VAR 0 30
36404: PUSH
36405: LD_VAR 0 31
36409: PUSH
36410: LD_VAR 0 32
36414: PUSH
36415: LD_VAR 0 33
36419: PUSH
36420: LD_VAR 0 34
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: PUSH
36433: LD_VAR 0 4
36437: PUSH
36438: LD_INT 1
36440: PLUS
36441: ARRAY
36442: ST_TO_ADDR
36443: GO 36928
36445: LD_INT 16
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36507
36451: LD_INT 17
36453: DOUBLE
36454: EQUAL
36455: IFTRUE 36507
36457: LD_INT 18
36459: DOUBLE
36460: EQUAL
36461: IFTRUE 36507
36463: LD_INT 19
36465: DOUBLE
36466: EQUAL
36467: IFTRUE 36507
36469: LD_INT 22
36471: DOUBLE
36472: EQUAL
36473: IFTRUE 36507
36475: LD_INT 20
36477: DOUBLE
36478: EQUAL
36479: IFTRUE 36507
36481: LD_INT 21
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36507
36487: LD_INT 23
36489: DOUBLE
36490: EQUAL
36491: IFTRUE 36507
36493: LD_INT 24
36495: DOUBLE
36496: EQUAL
36497: IFTRUE 36507
36499: LD_INT 25
36501: DOUBLE
36502: EQUAL
36503: IFTRUE 36507
36505: GO 36563
36507: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36508: LD_ADDR_VAR 0 9
36512: PUSH
36513: LD_VAR 0 35
36517: PUSH
36518: LD_VAR 0 36
36522: PUSH
36523: LD_VAR 0 37
36527: PUSH
36528: LD_VAR 0 38
36532: PUSH
36533: LD_VAR 0 39
36537: PUSH
36538: LD_VAR 0 40
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: PUSH
36551: LD_VAR 0 4
36555: PUSH
36556: LD_INT 1
36558: PLUS
36559: ARRAY
36560: ST_TO_ADDR
36561: GO 36928
36563: LD_INT 6
36565: DOUBLE
36566: EQUAL
36567: IFTRUE 36619
36569: LD_INT 7
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36619
36575: LD_INT 8
36577: DOUBLE
36578: EQUAL
36579: IFTRUE 36619
36581: LD_INT 13
36583: DOUBLE
36584: EQUAL
36585: IFTRUE 36619
36587: LD_INT 12
36589: DOUBLE
36590: EQUAL
36591: IFTRUE 36619
36593: LD_INT 15
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36619
36599: LD_INT 11
36601: DOUBLE
36602: EQUAL
36603: IFTRUE 36619
36605: LD_INT 14
36607: DOUBLE
36608: EQUAL
36609: IFTRUE 36619
36611: LD_INT 10
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36675
36619: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_VAR 0 41
36629: PUSH
36630: LD_VAR 0 42
36634: PUSH
36635: LD_VAR 0 43
36639: PUSH
36640: LD_VAR 0 44
36644: PUSH
36645: LD_VAR 0 45
36649: PUSH
36650: LD_VAR 0 46
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: PUSH
36663: LD_VAR 0 4
36667: PUSH
36668: LD_INT 1
36670: PLUS
36671: ARRAY
36672: ST_TO_ADDR
36673: GO 36928
36675: LD_INT 36
36677: DOUBLE
36678: EQUAL
36679: IFTRUE 36683
36681: GO 36739
36683: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36684: LD_ADDR_VAR 0 9
36688: PUSH
36689: LD_VAR 0 47
36693: PUSH
36694: LD_VAR 0 48
36698: PUSH
36699: LD_VAR 0 49
36703: PUSH
36704: LD_VAR 0 50
36708: PUSH
36709: LD_VAR 0 51
36713: PUSH
36714: LD_VAR 0 52
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: PUSH
36727: LD_VAR 0 4
36731: PUSH
36732: LD_INT 1
36734: PLUS
36735: ARRAY
36736: ST_TO_ADDR
36737: GO 36928
36739: LD_INT 4
36741: DOUBLE
36742: EQUAL
36743: IFTRUE 36765
36745: LD_INT 5
36747: DOUBLE
36748: EQUAL
36749: IFTRUE 36765
36751: LD_INT 34
36753: DOUBLE
36754: EQUAL
36755: IFTRUE 36765
36757: LD_INT 37
36759: DOUBLE
36760: EQUAL
36761: IFTRUE 36765
36763: GO 36821
36765: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36766: LD_ADDR_VAR 0 9
36770: PUSH
36771: LD_VAR 0 53
36775: PUSH
36776: LD_VAR 0 54
36780: PUSH
36781: LD_VAR 0 55
36785: PUSH
36786: LD_VAR 0 56
36790: PUSH
36791: LD_VAR 0 57
36795: PUSH
36796: LD_VAR 0 58
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: PUSH
36809: LD_VAR 0 4
36813: PUSH
36814: LD_INT 1
36816: PLUS
36817: ARRAY
36818: ST_TO_ADDR
36819: GO 36928
36821: LD_INT 31
36823: DOUBLE
36824: EQUAL
36825: IFTRUE 36871
36827: LD_INT 32
36829: DOUBLE
36830: EQUAL
36831: IFTRUE 36871
36833: LD_INT 33
36835: DOUBLE
36836: EQUAL
36837: IFTRUE 36871
36839: LD_INT 27
36841: DOUBLE
36842: EQUAL
36843: IFTRUE 36871
36845: LD_INT 26
36847: DOUBLE
36848: EQUAL
36849: IFTRUE 36871
36851: LD_INT 28
36853: DOUBLE
36854: EQUAL
36855: IFTRUE 36871
36857: LD_INT 29
36859: DOUBLE
36860: EQUAL
36861: IFTRUE 36871
36863: LD_INT 30
36865: DOUBLE
36866: EQUAL
36867: IFTRUE 36871
36869: GO 36927
36871: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36872: LD_ADDR_VAR 0 9
36876: PUSH
36877: LD_VAR 0 59
36881: PUSH
36882: LD_VAR 0 60
36886: PUSH
36887: LD_VAR 0 61
36891: PUSH
36892: LD_VAR 0 62
36896: PUSH
36897: LD_VAR 0 63
36901: PUSH
36902: LD_VAR 0 64
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: PUSH
36915: LD_VAR 0 4
36919: PUSH
36920: LD_INT 1
36922: PLUS
36923: ARRAY
36924: ST_TO_ADDR
36925: GO 36928
36927: POP
// temp_list2 = [ ] ;
36928: LD_ADDR_VAR 0 10
36932: PUSH
36933: EMPTY
36934: ST_TO_ADDR
// for i in temp_list do
36935: LD_ADDR_VAR 0 8
36939: PUSH
36940: LD_VAR 0 9
36944: PUSH
36945: FOR_IN
36946: IFFALSE 36998
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36948: LD_ADDR_VAR 0 10
36952: PUSH
36953: LD_VAR 0 10
36957: PUSH
36958: LD_VAR 0 8
36962: PUSH
36963: LD_INT 1
36965: ARRAY
36966: PUSH
36967: LD_VAR 0 2
36971: PLUS
36972: PUSH
36973: LD_VAR 0 8
36977: PUSH
36978: LD_INT 2
36980: ARRAY
36981: PUSH
36982: LD_VAR 0 3
36986: PLUS
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: EMPTY
36993: LIST
36994: ADD
36995: ST_TO_ADDR
36996: GO 36945
36998: POP
36999: POP
// result = temp_list2 ;
37000: LD_ADDR_VAR 0 7
37004: PUSH
37005: LD_VAR 0 10
37009: ST_TO_ADDR
// end ;
37010: LD_VAR 0 7
37014: RET
// export function EnemyInRange ( unit , dist ) ; begin
37015: LD_INT 0
37017: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37018: LD_ADDR_VAR 0 3
37022: PUSH
37023: LD_VAR 0 1
37027: PPUSH
37028: CALL_OW 255
37032: PPUSH
37033: LD_VAR 0 1
37037: PPUSH
37038: CALL_OW 250
37042: PPUSH
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL_OW 251
37052: PPUSH
37053: LD_VAR 0 2
37057: PPUSH
37058: CALL 10411 0 4
37062: PUSH
37063: LD_INT 4
37065: ARRAY
37066: ST_TO_ADDR
// end ;
37067: LD_VAR 0 3
37071: RET
// export function PlayerSeeMe ( unit ) ; begin
37072: LD_INT 0
37074: PPUSH
// result := See ( your_side , unit ) ;
37075: LD_ADDR_VAR 0 2
37079: PUSH
37080: LD_OWVAR 2
37084: PPUSH
37085: LD_VAR 0 1
37089: PPUSH
37090: CALL_OW 292
37094: ST_TO_ADDR
// end ;
37095: LD_VAR 0 2
37099: RET
// export function ReverseDir ( unit ) ; begin
37100: LD_INT 0
37102: PPUSH
// if not unit then
37103: LD_VAR 0 1
37107: NOT
37108: IFFALSE 37112
// exit ;
37110: GO 37135
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37112: LD_ADDR_VAR 0 2
37116: PUSH
37117: LD_VAR 0 1
37121: PPUSH
37122: CALL_OW 254
37126: PUSH
37127: LD_INT 3
37129: PLUS
37130: PUSH
37131: LD_INT 6
37133: MOD
37134: ST_TO_ADDR
// end ;
37135: LD_VAR 0 2
37139: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
37140: LD_INT 0
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
37146: PPUSH
37147: PPUSH
// if not unit or not hexes then
37148: LD_VAR 0 1
37152: NOT
37153: PUSH
37154: LD_VAR 0 2
37158: NOT
37159: OR
37160: IFFALSE 37164
// exit ;
37162: GO 37287
// dist := 9999 ;
37164: LD_ADDR_VAR 0 5
37168: PUSH
37169: LD_INT 9999
37171: ST_TO_ADDR
// for i = 1 to hexes do
37172: LD_ADDR_VAR 0 4
37176: PUSH
37177: DOUBLE
37178: LD_INT 1
37180: DEC
37181: ST_TO_ADDR
37182: LD_VAR 0 2
37186: PUSH
37187: FOR_TO
37188: IFFALSE 37275
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37190: LD_ADDR_VAR 0 6
37194: PUSH
37195: LD_VAR 0 1
37199: PPUSH
37200: LD_VAR 0 2
37204: PUSH
37205: LD_VAR 0 4
37209: ARRAY
37210: PUSH
37211: LD_INT 1
37213: ARRAY
37214: PPUSH
37215: LD_VAR 0 2
37219: PUSH
37220: LD_VAR 0 4
37224: ARRAY
37225: PUSH
37226: LD_INT 2
37228: ARRAY
37229: PPUSH
37230: CALL_OW 297
37234: ST_TO_ADDR
// if tdist < dist then
37235: LD_VAR 0 6
37239: PUSH
37240: LD_VAR 0 5
37244: LESS
37245: IFFALSE 37273
// begin hex := hexes [ i ] ;
37247: LD_ADDR_VAR 0 8
37251: PUSH
37252: LD_VAR 0 2
37256: PUSH
37257: LD_VAR 0 4
37261: ARRAY
37262: ST_TO_ADDR
// dist := tdist ;
37263: LD_ADDR_VAR 0 5
37267: PUSH
37268: LD_VAR 0 6
37272: ST_TO_ADDR
// end ; end ;
37273: GO 37187
37275: POP
37276: POP
// result := hex ;
37277: LD_ADDR_VAR 0 3
37281: PUSH
37282: LD_VAR 0 8
37286: ST_TO_ADDR
// end ;
37287: LD_VAR 0 3
37291: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37292: LD_INT 0
37294: PPUSH
37295: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37296: LD_VAR 0 1
37300: NOT
37301: PUSH
37302: LD_VAR 0 1
37306: PUSH
37307: LD_INT 21
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 23
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PPUSH
37331: CALL_OW 69
37335: IN
37336: NOT
37337: OR
37338: IFFALSE 37342
// exit ;
37340: GO 37389
// for i = 1 to 3 do
37342: LD_ADDR_VAR 0 3
37346: PUSH
37347: DOUBLE
37348: LD_INT 1
37350: DEC
37351: ST_TO_ADDR
37352: LD_INT 3
37354: PUSH
37355: FOR_TO
37356: IFFALSE 37387
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37358: LD_VAR 0 1
37362: PPUSH
37363: CALL_OW 250
37367: PPUSH
37368: LD_VAR 0 1
37372: PPUSH
37373: CALL_OW 251
37377: PPUSH
37378: LD_INT 1
37380: PPUSH
37381: CALL_OW 453
37385: GO 37355
37387: POP
37388: POP
// end ;
37389: LD_VAR 0 2
37393: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37394: LD_INT 0
37396: PPUSH
37397: PPUSH
37398: PPUSH
37399: PPUSH
37400: PPUSH
37401: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37402: LD_VAR 0 1
37406: NOT
37407: PUSH
37408: LD_VAR 0 2
37412: NOT
37413: OR
37414: PUSH
37415: LD_VAR 0 1
37419: PPUSH
37420: CALL_OW 314
37424: OR
37425: IFFALSE 37429
// exit ;
37427: GO 37870
// x := GetX ( enemy_unit ) ;
37429: LD_ADDR_VAR 0 7
37433: PUSH
37434: LD_VAR 0 2
37438: PPUSH
37439: CALL_OW 250
37443: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37444: LD_ADDR_VAR 0 8
37448: PUSH
37449: LD_VAR 0 2
37453: PPUSH
37454: CALL_OW 251
37458: ST_TO_ADDR
// if not x or not y then
37459: LD_VAR 0 7
37463: NOT
37464: PUSH
37465: LD_VAR 0 8
37469: NOT
37470: OR
37471: IFFALSE 37475
// exit ;
37473: GO 37870
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37475: LD_ADDR_VAR 0 6
37479: PUSH
37480: LD_VAR 0 7
37484: PPUSH
37485: LD_INT 0
37487: PPUSH
37488: LD_INT 4
37490: PPUSH
37491: CALL_OW 272
37495: PUSH
37496: LD_VAR 0 8
37500: PPUSH
37501: LD_INT 0
37503: PPUSH
37504: LD_INT 4
37506: PPUSH
37507: CALL_OW 273
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_VAR 0 7
37520: PPUSH
37521: LD_INT 1
37523: PPUSH
37524: LD_INT 4
37526: PPUSH
37527: CALL_OW 272
37531: PUSH
37532: LD_VAR 0 8
37536: PPUSH
37537: LD_INT 1
37539: PPUSH
37540: LD_INT 4
37542: PPUSH
37543: CALL_OW 273
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_VAR 0 7
37556: PPUSH
37557: LD_INT 2
37559: PPUSH
37560: LD_INT 4
37562: PPUSH
37563: CALL_OW 272
37567: PUSH
37568: LD_VAR 0 8
37572: PPUSH
37573: LD_INT 2
37575: PPUSH
37576: LD_INT 4
37578: PPUSH
37579: CALL_OW 273
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_VAR 0 7
37592: PPUSH
37593: LD_INT 3
37595: PPUSH
37596: LD_INT 4
37598: PPUSH
37599: CALL_OW 272
37603: PUSH
37604: LD_VAR 0 8
37608: PPUSH
37609: LD_INT 3
37611: PPUSH
37612: LD_INT 4
37614: PPUSH
37615: CALL_OW 273
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_VAR 0 7
37628: PPUSH
37629: LD_INT 4
37631: PPUSH
37632: LD_INT 4
37634: PPUSH
37635: CALL_OW 272
37639: PUSH
37640: LD_VAR 0 8
37644: PPUSH
37645: LD_INT 4
37647: PPUSH
37648: LD_INT 4
37650: PPUSH
37651: CALL_OW 273
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_VAR 0 7
37664: PPUSH
37665: LD_INT 5
37667: PPUSH
37668: LD_INT 4
37670: PPUSH
37671: CALL_OW 272
37675: PUSH
37676: LD_VAR 0 8
37680: PPUSH
37681: LD_INT 5
37683: PPUSH
37684: LD_INT 4
37686: PPUSH
37687: CALL_OW 273
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: ST_TO_ADDR
// for i = tmp downto 1 do
37704: LD_ADDR_VAR 0 4
37708: PUSH
37709: DOUBLE
37710: LD_VAR 0 6
37714: INC
37715: ST_TO_ADDR
37716: LD_INT 1
37718: PUSH
37719: FOR_DOWNTO
37720: IFFALSE 37821
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37722: LD_VAR 0 6
37726: PUSH
37727: LD_VAR 0 4
37731: ARRAY
37732: PUSH
37733: LD_INT 1
37735: ARRAY
37736: PPUSH
37737: LD_VAR 0 6
37741: PUSH
37742: LD_VAR 0 4
37746: ARRAY
37747: PUSH
37748: LD_INT 2
37750: ARRAY
37751: PPUSH
37752: CALL_OW 488
37756: NOT
37757: PUSH
37758: LD_VAR 0 6
37762: PUSH
37763: LD_VAR 0 4
37767: ARRAY
37768: PUSH
37769: LD_INT 1
37771: ARRAY
37772: PPUSH
37773: LD_VAR 0 6
37777: PUSH
37778: LD_VAR 0 4
37782: ARRAY
37783: PUSH
37784: LD_INT 2
37786: ARRAY
37787: PPUSH
37788: CALL_OW 428
37792: PUSH
37793: LD_INT 0
37795: NONEQUAL
37796: OR
37797: IFFALSE 37819
// tmp := Delete ( tmp , i ) ;
37799: LD_ADDR_VAR 0 6
37803: PUSH
37804: LD_VAR 0 6
37808: PPUSH
37809: LD_VAR 0 4
37813: PPUSH
37814: CALL_OW 3
37818: ST_TO_ADDR
37819: GO 37719
37821: POP
37822: POP
// j := GetClosestHex ( unit , tmp ) ;
37823: LD_ADDR_VAR 0 5
37827: PUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: LD_VAR 0 6
37837: PPUSH
37838: CALL 37140 0 2
37842: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37843: LD_VAR 0 1
37847: PPUSH
37848: LD_VAR 0 5
37852: PUSH
37853: LD_INT 1
37855: ARRAY
37856: PPUSH
37857: LD_VAR 0 5
37861: PUSH
37862: LD_INT 2
37864: ARRAY
37865: PPUSH
37866: CALL_OW 111
// end ;
37870: LD_VAR 0 3
37874: RET
// export function PrepareApemanSoldier ( ) ; begin
37875: LD_INT 0
37877: PPUSH
// uc_nation := 0 ;
37878: LD_ADDR_OWVAR 21
37882: PUSH
37883: LD_INT 0
37885: ST_TO_ADDR
// hc_sex := sex_male ;
37886: LD_ADDR_OWVAR 27
37890: PUSH
37891: LD_INT 1
37893: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37894: LD_ADDR_OWVAR 28
37898: PUSH
37899: LD_INT 15
37901: ST_TO_ADDR
// hc_gallery :=  ;
37902: LD_ADDR_OWVAR 33
37906: PUSH
37907: LD_STRING 
37909: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37910: LD_ADDR_OWVAR 31
37914: PUSH
37915: LD_INT 0
37917: PPUSH
37918: LD_INT 3
37920: PPUSH
37921: CALL_OW 12
37925: PUSH
37926: LD_INT 0
37928: PPUSH
37929: LD_INT 3
37931: PPUSH
37932: CALL_OW 12
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: ST_TO_ADDR
// end ;
37949: LD_VAR 0 1
37953: RET
// export function PrepareApemanEngineer ( ) ; begin
37954: LD_INT 0
37956: PPUSH
// uc_nation := 0 ;
37957: LD_ADDR_OWVAR 21
37961: PUSH
37962: LD_INT 0
37964: ST_TO_ADDR
// hc_sex := sex_male ;
37965: LD_ADDR_OWVAR 27
37969: PUSH
37970: LD_INT 1
37972: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37973: LD_ADDR_OWVAR 28
37977: PUSH
37978: LD_INT 16
37980: ST_TO_ADDR
// hc_gallery :=  ;
37981: LD_ADDR_OWVAR 33
37985: PUSH
37986: LD_STRING 
37988: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37989: LD_ADDR_OWVAR 31
37993: PUSH
37994: LD_INT 0
37996: PPUSH
37997: LD_INT 3
37999: PPUSH
38000: CALL_OW 12
38004: PUSH
38005: LD_INT 0
38007: PPUSH
38008: LD_INT 3
38010: PPUSH
38011: CALL_OW 12
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// end ;
38028: LD_VAR 0 1
38032: RET
// export function PrepareApeman ( agressivity ) ; begin
38033: LD_INT 0
38035: PPUSH
// uc_side := 0 ;
38036: LD_ADDR_OWVAR 20
38040: PUSH
38041: LD_INT 0
38043: ST_TO_ADDR
// uc_nation := 0 ;
38044: LD_ADDR_OWVAR 21
38048: PUSH
38049: LD_INT 0
38051: ST_TO_ADDR
// hc_sex := sex_male ;
38052: LD_ADDR_OWVAR 27
38056: PUSH
38057: LD_INT 1
38059: ST_TO_ADDR
// hc_class := class_apeman ;
38060: LD_ADDR_OWVAR 28
38064: PUSH
38065: LD_INT 12
38067: ST_TO_ADDR
// hc_gallery :=  ;
38068: LD_ADDR_OWVAR 33
38072: PUSH
38073: LD_STRING 
38075: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38076: LD_ADDR_OWVAR 35
38080: PUSH
38081: LD_VAR 0 1
38085: NEG
38086: PPUSH
38087: LD_VAR 0 1
38091: PPUSH
38092: CALL_OW 12
38096: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38097: LD_ADDR_OWVAR 31
38101: PUSH
38102: LD_INT 0
38104: PPUSH
38105: LD_INT 3
38107: PPUSH
38108: CALL_OW 12
38112: PUSH
38113: LD_INT 0
38115: PPUSH
38116: LD_INT 3
38118: PPUSH
38119: CALL_OW 12
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: ST_TO_ADDR
// end ;
38136: LD_VAR 0 2
38140: RET
// export function PrepareTiger ( agressivity ) ; begin
38141: LD_INT 0
38143: PPUSH
// uc_side := 0 ;
38144: LD_ADDR_OWVAR 20
38148: PUSH
38149: LD_INT 0
38151: ST_TO_ADDR
// uc_nation := 0 ;
38152: LD_ADDR_OWVAR 21
38156: PUSH
38157: LD_INT 0
38159: ST_TO_ADDR
// hc_class := class_tiger ;
38160: LD_ADDR_OWVAR 28
38164: PUSH
38165: LD_INT 14
38167: ST_TO_ADDR
// hc_gallery :=  ;
38168: LD_ADDR_OWVAR 33
38172: PUSH
38173: LD_STRING 
38175: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38176: LD_ADDR_OWVAR 35
38180: PUSH
38181: LD_VAR 0 1
38185: NEG
38186: PPUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 12
38196: ST_TO_ADDR
// end ;
38197: LD_VAR 0 2
38201: RET
// export function PrepareEnchidna ( ) ; begin
38202: LD_INT 0
38204: PPUSH
// uc_side := 0 ;
38205: LD_ADDR_OWVAR 20
38209: PUSH
38210: LD_INT 0
38212: ST_TO_ADDR
// uc_nation := 0 ;
38213: LD_ADDR_OWVAR 21
38217: PUSH
38218: LD_INT 0
38220: ST_TO_ADDR
// hc_class := class_baggie ;
38221: LD_ADDR_OWVAR 28
38225: PUSH
38226: LD_INT 13
38228: ST_TO_ADDR
// hc_gallery :=  ;
38229: LD_ADDR_OWVAR 33
38233: PUSH
38234: LD_STRING 
38236: ST_TO_ADDR
// end ;
38237: LD_VAR 0 1
38241: RET
// export function PrepareFrog ( ) ; begin
38242: LD_INT 0
38244: PPUSH
// uc_side := 0 ;
38245: LD_ADDR_OWVAR 20
38249: PUSH
38250: LD_INT 0
38252: ST_TO_ADDR
// uc_nation := 0 ;
38253: LD_ADDR_OWVAR 21
38257: PUSH
38258: LD_INT 0
38260: ST_TO_ADDR
// hc_class := class_frog ;
38261: LD_ADDR_OWVAR 28
38265: PUSH
38266: LD_INT 19
38268: ST_TO_ADDR
// hc_gallery :=  ;
38269: LD_ADDR_OWVAR 33
38273: PUSH
38274: LD_STRING 
38276: ST_TO_ADDR
// end ;
38277: LD_VAR 0 1
38281: RET
// export function PrepareFish ( ) ; begin
38282: LD_INT 0
38284: PPUSH
// uc_side := 0 ;
38285: LD_ADDR_OWVAR 20
38289: PUSH
38290: LD_INT 0
38292: ST_TO_ADDR
// uc_nation := 0 ;
38293: LD_ADDR_OWVAR 21
38297: PUSH
38298: LD_INT 0
38300: ST_TO_ADDR
// hc_class := class_fish ;
38301: LD_ADDR_OWVAR 28
38305: PUSH
38306: LD_INT 20
38308: ST_TO_ADDR
// hc_gallery :=  ;
38309: LD_ADDR_OWVAR 33
38313: PUSH
38314: LD_STRING 
38316: ST_TO_ADDR
// end ;
38317: LD_VAR 0 1
38321: RET
// export function PrepareBird ( ) ; begin
38322: LD_INT 0
38324: PPUSH
// uc_side := 0 ;
38325: LD_ADDR_OWVAR 20
38329: PUSH
38330: LD_INT 0
38332: ST_TO_ADDR
// uc_nation := 0 ;
38333: LD_ADDR_OWVAR 21
38337: PUSH
38338: LD_INT 0
38340: ST_TO_ADDR
// hc_class := class_phororhacos ;
38341: LD_ADDR_OWVAR 28
38345: PUSH
38346: LD_INT 18
38348: ST_TO_ADDR
// hc_gallery :=  ;
38349: LD_ADDR_OWVAR 33
38353: PUSH
38354: LD_STRING 
38356: ST_TO_ADDR
// end ;
38357: LD_VAR 0 1
38361: RET
// export function PrepareHorse ( ) ; begin
38362: LD_INT 0
38364: PPUSH
// uc_side := 0 ;
38365: LD_ADDR_OWVAR 20
38369: PUSH
38370: LD_INT 0
38372: ST_TO_ADDR
// uc_nation := 0 ;
38373: LD_ADDR_OWVAR 21
38377: PUSH
38378: LD_INT 0
38380: ST_TO_ADDR
// hc_class := class_horse ;
38381: LD_ADDR_OWVAR 28
38385: PUSH
38386: LD_INT 21
38388: ST_TO_ADDR
// hc_gallery :=  ;
38389: LD_ADDR_OWVAR 33
38393: PUSH
38394: LD_STRING 
38396: ST_TO_ADDR
// end ;
38397: LD_VAR 0 1
38401: RET
// export function PrepareMastodont ( ) ; begin
38402: LD_INT 0
38404: PPUSH
// uc_side := 0 ;
38405: LD_ADDR_OWVAR 20
38409: PUSH
38410: LD_INT 0
38412: ST_TO_ADDR
// uc_nation := 0 ;
38413: LD_ADDR_OWVAR 21
38417: PUSH
38418: LD_INT 0
38420: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38421: LD_ADDR_OWVAR 37
38425: PUSH
38426: LD_INT 31
38428: ST_TO_ADDR
// vc_control := control_rider ;
38429: LD_ADDR_OWVAR 38
38433: PUSH
38434: LD_INT 4
38436: ST_TO_ADDR
// end ;
38437: LD_VAR 0 1
38441: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38442: LD_INT 0
38444: PPUSH
38445: PPUSH
38446: PPUSH
// uc_side = 0 ;
38447: LD_ADDR_OWVAR 20
38451: PUSH
38452: LD_INT 0
38454: ST_TO_ADDR
// uc_nation = 0 ;
38455: LD_ADDR_OWVAR 21
38459: PUSH
38460: LD_INT 0
38462: ST_TO_ADDR
// InitHc_All ( ) ;
38463: CALL_OW 584
// InitVc ;
38467: CALL_OW 20
// if mastodonts then
38471: LD_VAR 0 6
38475: IFFALSE 38542
// for i = 1 to mastodonts do
38477: LD_ADDR_VAR 0 11
38481: PUSH
38482: DOUBLE
38483: LD_INT 1
38485: DEC
38486: ST_TO_ADDR
38487: LD_VAR 0 6
38491: PUSH
38492: FOR_TO
38493: IFFALSE 38540
// begin vc_chassis := 31 ;
38495: LD_ADDR_OWVAR 37
38499: PUSH
38500: LD_INT 31
38502: ST_TO_ADDR
// vc_control := control_rider ;
38503: LD_ADDR_OWVAR 38
38507: PUSH
38508: LD_INT 4
38510: ST_TO_ADDR
// animal := CreateVehicle ;
38511: LD_ADDR_VAR 0 12
38515: PUSH
38516: CALL_OW 45
38520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38521: LD_VAR 0 12
38525: PPUSH
38526: LD_VAR 0 8
38530: PPUSH
38531: LD_INT 0
38533: PPUSH
38534: CALL 40677 0 3
// end ;
38538: GO 38492
38540: POP
38541: POP
// if horses then
38542: LD_VAR 0 5
38546: IFFALSE 38613
// for i = 1 to horses do
38548: LD_ADDR_VAR 0 11
38552: PUSH
38553: DOUBLE
38554: LD_INT 1
38556: DEC
38557: ST_TO_ADDR
38558: LD_VAR 0 5
38562: PUSH
38563: FOR_TO
38564: IFFALSE 38611
// begin hc_class := 21 ;
38566: LD_ADDR_OWVAR 28
38570: PUSH
38571: LD_INT 21
38573: ST_TO_ADDR
// hc_gallery :=  ;
38574: LD_ADDR_OWVAR 33
38578: PUSH
38579: LD_STRING 
38581: ST_TO_ADDR
// animal := CreateHuman ;
38582: LD_ADDR_VAR 0 12
38586: PUSH
38587: CALL_OW 44
38591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38592: LD_VAR 0 12
38596: PPUSH
38597: LD_VAR 0 8
38601: PPUSH
38602: LD_INT 0
38604: PPUSH
38605: CALL 40677 0 3
// end ;
38609: GO 38563
38611: POP
38612: POP
// if birds then
38613: LD_VAR 0 1
38617: IFFALSE 38684
// for i = 1 to birds do
38619: LD_ADDR_VAR 0 11
38623: PUSH
38624: DOUBLE
38625: LD_INT 1
38627: DEC
38628: ST_TO_ADDR
38629: LD_VAR 0 1
38633: PUSH
38634: FOR_TO
38635: IFFALSE 38682
// begin hc_class = 18 ;
38637: LD_ADDR_OWVAR 28
38641: PUSH
38642: LD_INT 18
38644: ST_TO_ADDR
// hc_gallery =  ;
38645: LD_ADDR_OWVAR 33
38649: PUSH
38650: LD_STRING 
38652: ST_TO_ADDR
// animal := CreateHuman ;
38653: LD_ADDR_VAR 0 12
38657: PUSH
38658: CALL_OW 44
38662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38663: LD_VAR 0 12
38667: PPUSH
38668: LD_VAR 0 8
38672: PPUSH
38673: LD_INT 0
38675: PPUSH
38676: CALL 40677 0 3
// end ;
38680: GO 38634
38682: POP
38683: POP
// if tigers then
38684: LD_VAR 0 2
38688: IFFALSE 38772
// for i = 1 to tigers do
38690: LD_ADDR_VAR 0 11
38694: PUSH
38695: DOUBLE
38696: LD_INT 1
38698: DEC
38699: ST_TO_ADDR
38700: LD_VAR 0 2
38704: PUSH
38705: FOR_TO
38706: IFFALSE 38770
// begin hc_class = class_tiger ;
38708: LD_ADDR_OWVAR 28
38712: PUSH
38713: LD_INT 14
38715: ST_TO_ADDR
// hc_gallery =  ;
38716: LD_ADDR_OWVAR 33
38720: PUSH
38721: LD_STRING 
38723: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38724: LD_ADDR_OWVAR 35
38728: PUSH
38729: LD_INT 7
38731: NEG
38732: PPUSH
38733: LD_INT 7
38735: PPUSH
38736: CALL_OW 12
38740: ST_TO_ADDR
// animal := CreateHuman ;
38741: LD_ADDR_VAR 0 12
38745: PUSH
38746: CALL_OW 44
38750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38751: LD_VAR 0 12
38755: PPUSH
38756: LD_VAR 0 8
38760: PPUSH
38761: LD_INT 0
38763: PPUSH
38764: CALL 40677 0 3
// end ;
38768: GO 38705
38770: POP
38771: POP
// if apemans then
38772: LD_VAR 0 3
38776: IFFALSE 38899
// for i = 1 to apemans do
38778: LD_ADDR_VAR 0 11
38782: PUSH
38783: DOUBLE
38784: LD_INT 1
38786: DEC
38787: ST_TO_ADDR
38788: LD_VAR 0 3
38792: PUSH
38793: FOR_TO
38794: IFFALSE 38897
// begin hc_class = class_apeman ;
38796: LD_ADDR_OWVAR 28
38800: PUSH
38801: LD_INT 12
38803: ST_TO_ADDR
// hc_gallery =  ;
38804: LD_ADDR_OWVAR 33
38808: PUSH
38809: LD_STRING 
38811: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38812: LD_ADDR_OWVAR 35
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PPUSH
38821: LD_INT 2
38823: PPUSH
38824: CALL_OW 12
38828: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38829: LD_ADDR_OWVAR 31
38833: PUSH
38834: LD_INT 1
38836: PPUSH
38837: LD_INT 3
38839: PPUSH
38840: CALL_OW 12
38844: PUSH
38845: LD_INT 1
38847: PPUSH
38848: LD_INT 3
38850: PPUSH
38851: CALL_OW 12
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
// animal := CreateHuman ;
38868: LD_ADDR_VAR 0 12
38872: PUSH
38873: CALL_OW 44
38877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38878: LD_VAR 0 12
38882: PPUSH
38883: LD_VAR 0 8
38887: PPUSH
38888: LD_INT 0
38890: PPUSH
38891: CALL 40677 0 3
// end ;
38895: GO 38793
38897: POP
38898: POP
// if enchidnas then
38899: LD_VAR 0 4
38903: IFFALSE 38970
// for i = 1 to enchidnas do
38905: LD_ADDR_VAR 0 11
38909: PUSH
38910: DOUBLE
38911: LD_INT 1
38913: DEC
38914: ST_TO_ADDR
38915: LD_VAR 0 4
38919: PUSH
38920: FOR_TO
38921: IFFALSE 38968
// begin hc_class = 13 ;
38923: LD_ADDR_OWVAR 28
38927: PUSH
38928: LD_INT 13
38930: ST_TO_ADDR
// hc_gallery =  ;
38931: LD_ADDR_OWVAR 33
38935: PUSH
38936: LD_STRING 
38938: ST_TO_ADDR
// animal := CreateHuman ;
38939: LD_ADDR_VAR 0 12
38943: PUSH
38944: CALL_OW 44
38948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38949: LD_VAR 0 12
38953: PPUSH
38954: LD_VAR 0 8
38958: PPUSH
38959: LD_INT 0
38961: PPUSH
38962: CALL 40677 0 3
// end ;
38966: GO 38920
38968: POP
38969: POP
// if fishes then
38970: LD_VAR 0 7
38974: IFFALSE 39041
// for i = 1 to fishes do
38976: LD_ADDR_VAR 0 11
38980: PUSH
38981: DOUBLE
38982: LD_INT 1
38984: DEC
38985: ST_TO_ADDR
38986: LD_VAR 0 7
38990: PUSH
38991: FOR_TO
38992: IFFALSE 39039
// begin hc_class = 20 ;
38994: LD_ADDR_OWVAR 28
38998: PUSH
38999: LD_INT 20
39001: ST_TO_ADDR
// hc_gallery =  ;
39002: LD_ADDR_OWVAR 33
39006: PUSH
39007: LD_STRING 
39009: ST_TO_ADDR
// animal := CreateHuman ;
39010: LD_ADDR_VAR 0 12
39014: PUSH
39015: CALL_OW 44
39019: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39020: LD_VAR 0 12
39024: PPUSH
39025: LD_VAR 0 9
39029: PPUSH
39030: LD_INT 0
39032: PPUSH
39033: CALL 40677 0 3
// end ;
39037: GO 38991
39039: POP
39040: POP
// end ;
39041: LD_VAR 0 10
39045: RET
// export function WantHeal ( sci , unit ) ; begin
39046: LD_INT 0
39048: PPUSH
// if GetTaskList ( sci ) > 0 then
39049: LD_VAR 0 1
39053: PPUSH
39054: CALL_OW 437
39058: PUSH
39059: LD_INT 0
39061: GREATER
39062: IFFALSE 39132
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 437
39073: PUSH
39074: LD_INT 1
39076: ARRAY
39077: PUSH
39078: LD_INT 1
39080: ARRAY
39081: PUSH
39082: LD_STRING l
39084: EQUAL
39085: PUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 437
39095: PUSH
39096: LD_INT 1
39098: ARRAY
39099: PUSH
39100: LD_INT 4
39102: ARRAY
39103: PUSH
39104: LD_VAR 0 2
39108: EQUAL
39109: AND
39110: IFFALSE 39122
// result := true else
39112: LD_ADDR_VAR 0 3
39116: PUSH
39117: LD_INT 1
39119: ST_TO_ADDR
39120: GO 39130
// result := false ;
39122: LD_ADDR_VAR 0 3
39126: PUSH
39127: LD_INT 0
39129: ST_TO_ADDR
// end else
39130: GO 39140
// result := false ;
39132: LD_ADDR_VAR 0 3
39136: PUSH
39137: LD_INT 0
39139: ST_TO_ADDR
// end ;
39140: LD_VAR 0 3
39144: RET
// export function HealTarget ( sci ) ; begin
39145: LD_INT 0
39147: PPUSH
// if not sci then
39148: LD_VAR 0 1
39152: NOT
39153: IFFALSE 39157
// exit ;
39155: GO 39222
// result := 0 ;
39157: LD_ADDR_VAR 0 2
39161: PUSH
39162: LD_INT 0
39164: ST_TO_ADDR
// if GetTaskList ( sci ) then
39165: LD_VAR 0 1
39169: PPUSH
39170: CALL_OW 437
39174: IFFALSE 39222
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39176: LD_VAR 0 1
39180: PPUSH
39181: CALL_OW 437
39185: PUSH
39186: LD_INT 1
39188: ARRAY
39189: PUSH
39190: LD_INT 1
39192: ARRAY
39193: PUSH
39194: LD_STRING l
39196: EQUAL
39197: IFFALSE 39222
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39199: LD_ADDR_VAR 0 2
39203: PUSH
39204: LD_VAR 0 1
39208: PPUSH
39209: CALL_OW 437
39213: PUSH
39214: LD_INT 1
39216: ARRAY
39217: PUSH
39218: LD_INT 4
39220: ARRAY
39221: ST_TO_ADDR
// end ;
39222: LD_VAR 0 2
39226: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39227: LD_INT 0
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
// if not base_units then
39233: LD_VAR 0 1
39237: NOT
39238: IFFALSE 39242
// exit ;
39240: GO 39329
// result := false ;
39242: LD_ADDR_VAR 0 2
39246: PUSH
39247: LD_INT 0
39249: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39250: LD_ADDR_VAR 0 5
39254: PUSH
39255: LD_VAR 0 1
39259: PPUSH
39260: LD_INT 21
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PPUSH
39270: CALL_OW 72
39274: ST_TO_ADDR
// if not tmp then
39275: LD_VAR 0 5
39279: NOT
39280: IFFALSE 39284
// exit ;
39282: GO 39329
// for i in tmp do
39284: LD_ADDR_VAR 0 3
39288: PUSH
39289: LD_VAR 0 5
39293: PUSH
39294: FOR_IN
39295: IFFALSE 39327
// begin result := EnemyInRange ( i , 22 ) ;
39297: LD_ADDR_VAR 0 2
39301: PUSH
39302: LD_VAR 0 3
39306: PPUSH
39307: LD_INT 22
39309: PPUSH
39310: CALL 37015 0 2
39314: ST_TO_ADDR
// if result then
39315: LD_VAR 0 2
39319: IFFALSE 39325
// exit ;
39321: POP
39322: POP
39323: GO 39329
// end ;
39325: GO 39294
39327: POP
39328: POP
// end ;
39329: LD_VAR 0 2
39333: RET
// export function FilterByTag ( units , tag ) ; begin
39334: LD_INT 0
39336: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39337: LD_ADDR_VAR 0 3
39341: PUSH
39342: LD_VAR 0 1
39346: PPUSH
39347: LD_INT 120
39349: PUSH
39350: LD_VAR 0 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PPUSH
39359: CALL_OW 72
39363: ST_TO_ADDR
// end ;
39364: LD_VAR 0 3
39368: RET
// export function IsDriver ( un ) ; begin
39369: LD_INT 0
39371: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39372: LD_ADDR_VAR 0 2
39376: PUSH
39377: LD_VAR 0 1
39381: PUSH
39382: LD_INT 55
39384: PUSH
39385: EMPTY
39386: LIST
39387: PPUSH
39388: CALL_OW 69
39392: IN
39393: ST_TO_ADDR
// end ;
39394: LD_VAR 0 2
39398: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39399: LD_INT 0
39401: PPUSH
39402: PPUSH
// list := [ ] ;
39403: LD_ADDR_VAR 0 5
39407: PUSH
39408: EMPTY
39409: ST_TO_ADDR
// case d of 0 :
39410: LD_VAR 0 3
39414: PUSH
39415: LD_INT 0
39417: DOUBLE
39418: EQUAL
39419: IFTRUE 39423
39421: GO 39556
39423: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39424: LD_ADDR_VAR 0 5
39428: PUSH
39429: LD_VAR 0 1
39433: PUSH
39434: LD_INT 4
39436: MINUS
39437: PUSH
39438: LD_VAR 0 2
39442: PUSH
39443: LD_INT 4
39445: MINUS
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: PUSH
39455: LD_VAR 0 1
39459: PUSH
39460: LD_INT 3
39462: MINUS
39463: PUSH
39464: LD_VAR 0 2
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: PUSH
39477: LD_VAR 0 1
39481: PUSH
39482: LD_INT 4
39484: PLUS
39485: PUSH
39486: LD_VAR 0 2
39490: PUSH
39491: LD_INT 4
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: PUSH
39499: LD_VAR 0 1
39503: PUSH
39504: LD_INT 3
39506: PLUS
39507: PUSH
39508: LD_VAR 0 2
39512: PUSH
39513: LD_INT 3
39515: PLUS
39516: PUSH
39517: LD_INT 5
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: PUSH
39525: LD_VAR 0 1
39529: PUSH
39530: LD_VAR 0 2
39534: PUSH
39535: LD_INT 4
39537: PLUS
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: LIST
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: ST_TO_ADDR
// end ; 1 :
39554: GO 40254
39556: LD_INT 1
39558: DOUBLE
39559: EQUAL
39560: IFTRUE 39564
39562: GO 39697
39564: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39565: LD_ADDR_VAR 0 5
39569: PUSH
39570: LD_VAR 0 1
39574: PUSH
39575: LD_VAR 0 2
39579: PUSH
39580: LD_INT 4
39582: MINUS
39583: PUSH
39584: LD_INT 3
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: PUSH
39592: LD_VAR 0 1
39596: PUSH
39597: LD_INT 3
39599: MINUS
39600: PUSH
39601: LD_VAR 0 2
39605: PUSH
39606: LD_INT 3
39608: MINUS
39609: PUSH
39610: LD_INT 2
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: PUSH
39618: LD_VAR 0 1
39622: PUSH
39623: LD_INT 4
39625: MINUS
39626: PUSH
39627: LD_VAR 0 2
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: PUSH
39640: LD_VAR 0 1
39644: PUSH
39645: LD_VAR 0 2
39649: PUSH
39650: LD_INT 3
39652: PLUS
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: PUSH
39662: LD_VAR 0 1
39666: PUSH
39667: LD_INT 4
39669: PLUS
39670: PUSH
39671: LD_VAR 0 2
39675: PUSH
39676: LD_INT 4
39678: PLUS
39679: PUSH
39680: LD_INT 5
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: ST_TO_ADDR
// end ; 2 :
39695: GO 40254
39697: LD_INT 2
39699: DOUBLE
39700: EQUAL
39701: IFTRUE 39705
39703: GO 39834
39705: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39706: LD_ADDR_VAR 0 5
39710: PUSH
39711: LD_VAR 0 1
39715: PUSH
39716: LD_VAR 0 2
39720: PUSH
39721: LD_INT 3
39723: MINUS
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: PUSH
39733: LD_VAR 0 1
39737: PUSH
39738: LD_INT 4
39740: PLUS
39741: PUSH
39742: LD_VAR 0 2
39746: PUSH
39747: LD_INT 4
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: PUSH
39755: LD_VAR 0 1
39759: PUSH
39760: LD_VAR 0 2
39764: PUSH
39765: LD_INT 4
39767: PLUS
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: PUSH
39777: LD_VAR 0 1
39781: PUSH
39782: LD_INT 3
39784: MINUS
39785: PUSH
39786: LD_VAR 0 2
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: PUSH
39799: LD_VAR 0 1
39803: PUSH
39804: LD_INT 4
39806: MINUS
39807: PUSH
39808: LD_VAR 0 2
39812: PUSH
39813: LD_INT 4
39815: MINUS
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: LIST
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: ST_TO_ADDR
// end ; 3 :
39832: GO 40254
39834: LD_INT 3
39836: DOUBLE
39837: EQUAL
39838: IFTRUE 39842
39840: GO 39975
39842: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39843: LD_ADDR_VAR 0 5
39847: PUSH
39848: LD_VAR 0 1
39852: PUSH
39853: LD_INT 3
39855: PLUS
39856: PUSH
39857: LD_VAR 0 2
39861: PUSH
39862: LD_INT 4
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: PUSH
39870: LD_VAR 0 1
39874: PUSH
39875: LD_INT 4
39877: PLUS
39878: PUSH
39879: LD_VAR 0 2
39883: PUSH
39884: LD_INT 4
39886: PLUS
39887: PUSH
39888: LD_INT 5
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: PUSH
39896: LD_VAR 0 1
39900: PUSH
39901: LD_INT 4
39903: MINUS
39904: PUSH
39905: LD_VAR 0 2
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: PUSH
39918: LD_VAR 0 1
39922: PUSH
39923: LD_VAR 0 2
39927: PUSH
39928: LD_INT 4
39930: MINUS
39931: PUSH
39932: LD_INT 3
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: LIST
39939: PUSH
39940: LD_VAR 0 1
39944: PUSH
39945: LD_INT 3
39947: MINUS
39948: PUSH
39949: LD_VAR 0 2
39953: PUSH
39954: LD_INT 3
39956: MINUS
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: ST_TO_ADDR
// end ; 4 :
39973: GO 40254
39975: LD_INT 4
39977: DOUBLE
39978: EQUAL
39979: IFTRUE 39983
39981: GO 40116
39983: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39984: LD_ADDR_VAR 0 5
39988: PUSH
39989: LD_VAR 0 1
39993: PUSH
39994: LD_VAR 0 2
39998: PUSH
39999: LD_INT 4
40001: PLUS
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: PUSH
40011: LD_VAR 0 1
40015: PUSH
40016: LD_INT 3
40018: PLUS
40019: PUSH
40020: LD_VAR 0 2
40024: PUSH
40025: LD_INT 3
40027: PLUS
40028: PUSH
40029: LD_INT 5
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: PUSH
40037: LD_VAR 0 1
40041: PUSH
40042: LD_INT 4
40044: PLUS
40045: PUSH
40046: LD_VAR 0 2
40050: PUSH
40051: LD_INT 4
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: LIST
40058: PUSH
40059: LD_VAR 0 1
40063: PUSH
40064: LD_VAR 0 2
40068: PUSH
40069: LD_INT 3
40071: MINUS
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: PUSH
40081: LD_VAR 0 1
40085: PUSH
40086: LD_INT 4
40088: MINUS
40089: PUSH
40090: LD_VAR 0 2
40094: PUSH
40095: LD_INT 4
40097: MINUS
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: ST_TO_ADDR
// end ; 5 :
40114: GO 40254
40116: LD_INT 5
40118: DOUBLE
40119: EQUAL
40120: IFTRUE 40124
40122: GO 40253
40124: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40125: LD_ADDR_VAR 0 5
40129: PUSH
40130: LD_VAR 0 1
40134: PUSH
40135: LD_INT 4
40137: MINUS
40138: PUSH
40139: LD_VAR 0 2
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: LIST
40151: PUSH
40152: LD_VAR 0 1
40156: PUSH
40157: LD_VAR 0 2
40161: PUSH
40162: LD_INT 4
40164: MINUS
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: PUSH
40174: LD_VAR 0 1
40178: PUSH
40179: LD_INT 4
40181: PLUS
40182: PUSH
40183: LD_VAR 0 2
40187: PUSH
40188: LD_INT 4
40190: PLUS
40191: PUSH
40192: LD_INT 5
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: PUSH
40200: LD_VAR 0 1
40204: PUSH
40205: LD_INT 3
40207: PLUS
40208: PUSH
40209: LD_VAR 0 2
40213: PUSH
40214: LD_INT 4
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: PUSH
40222: LD_VAR 0 1
40226: PUSH
40227: LD_VAR 0 2
40231: PUSH
40232: LD_INT 3
40234: PLUS
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// end ; end ;
40251: GO 40254
40253: POP
// result := list ;
40254: LD_ADDR_VAR 0 4
40258: PUSH
40259: LD_VAR 0 5
40263: ST_TO_ADDR
// end ;
40264: LD_VAR 0 4
40268: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40269: LD_INT 0
40271: PPUSH
40272: PPUSH
40273: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40274: LD_VAR 0 1
40278: NOT
40279: PUSH
40280: LD_VAR 0 2
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 2
40290: PUSH
40291: LD_INT 3
40293: PUSH
40294: LD_INT 4
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: IN
40303: NOT
40304: OR
40305: IFFALSE 40309
// exit ;
40307: GO 40401
// tmp := [ ] ;
40309: LD_ADDR_VAR 0 5
40313: PUSH
40314: EMPTY
40315: ST_TO_ADDR
// for i in units do
40316: LD_ADDR_VAR 0 4
40320: PUSH
40321: LD_VAR 0 1
40325: PUSH
40326: FOR_IN
40327: IFFALSE 40370
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
40329: LD_ADDR_VAR 0 5
40333: PUSH
40334: LD_VAR 0 5
40338: PPUSH
40339: LD_VAR 0 5
40343: PUSH
40344: LD_INT 1
40346: PLUS
40347: PPUSH
40348: LD_VAR 0 4
40352: PPUSH
40353: LD_VAR 0 2
40357: PPUSH
40358: CALL_OW 259
40362: PPUSH
40363: CALL_OW 2
40367: ST_TO_ADDR
40368: GO 40326
40370: POP
40371: POP
// if not tmp then
40372: LD_VAR 0 5
40376: NOT
40377: IFFALSE 40381
// exit ;
40379: GO 40401
// result := SortListByListDesc ( units , tmp ) ;
40381: LD_ADDR_VAR 0 3
40385: PUSH
40386: LD_VAR 0 1
40390: PPUSH
40391: LD_VAR 0 5
40395: PPUSH
40396: CALL_OW 77
40400: ST_TO_ADDR
// end ;
40401: LD_VAR 0 3
40405: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40406: LD_INT 0
40408: PPUSH
40409: PPUSH
40410: PPUSH
// result := false ;
40411: LD_ADDR_VAR 0 3
40415: PUSH
40416: LD_INT 0
40418: ST_TO_ADDR
// x := GetX ( building ) ;
40419: LD_ADDR_VAR 0 4
40423: PUSH
40424: LD_VAR 0 2
40428: PPUSH
40429: CALL_OW 250
40433: ST_TO_ADDR
// y := GetY ( building ) ;
40434: LD_ADDR_VAR 0 5
40438: PUSH
40439: LD_VAR 0 2
40443: PPUSH
40444: CALL_OW 251
40448: ST_TO_ADDR
// if not building or not x or not y then
40449: LD_VAR 0 2
40453: NOT
40454: PUSH
40455: LD_VAR 0 4
40459: NOT
40460: OR
40461: PUSH
40462: LD_VAR 0 5
40466: NOT
40467: OR
40468: IFFALSE 40472
// exit ;
40470: GO 40564
// if GetTaskList ( unit ) then
40472: LD_VAR 0 1
40476: PPUSH
40477: CALL_OW 437
40481: IFFALSE 40564
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40483: LD_STRING e
40485: PUSH
40486: LD_VAR 0 1
40490: PPUSH
40491: CALL_OW 437
40495: PUSH
40496: LD_INT 1
40498: ARRAY
40499: PUSH
40500: LD_INT 1
40502: ARRAY
40503: EQUAL
40504: PUSH
40505: LD_VAR 0 4
40509: PUSH
40510: LD_VAR 0 1
40514: PPUSH
40515: CALL_OW 437
40519: PUSH
40520: LD_INT 1
40522: ARRAY
40523: PUSH
40524: LD_INT 2
40526: ARRAY
40527: EQUAL
40528: AND
40529: PUSH
40530: LD_VAR 0 5
40534: PUSH
40535: LD_VAR 0 1
40539: PPUSH
40540: CALL_OW 437
40544: PUSH
40545: LD_INT 1
40547: ARRAY
40548: PUSH
40549: LD_INT 3
40551: ARRAY
40552: EQUAL
40553: AND
40554: IFFALSE 40564
// result := true end ;
40556: LD_ADDR_VAR 0 3
40560: PUSH
40561: LD_INT 1
40563: ST_TO_ADDR
// end ;
40564: LD_VAR 0 3
40568: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40569: LD_INT 0
40571: PPUSH
// result := false ;
40572: LD_ADDR_VAR 0 4
40576: PUSH
40577: LD_INT 0
40579: ST_TO_ADDR
// if GetTaskList ( unit ) then
40580: LD_VAR 0 1
40584: PPUSH
40585: CALL_OW 437
40589: IFFALSE 40672
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40591: LD_STRING M
40593: PUSH
40594: LD_VAR 0 1
40598: PPUSH
40599: CALL_OW 437
40603: PUSH
40604: LD_INT 1
40606: ARRAY
40607: PUSH
40608: LD_INT 1
40610: ARRAY
40611: EQUAL
40612: PUSH
40613: LD_VAR 0 2
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 437
40627: PUSH
40628: LD_INT 1
40630: ARRAY
40631: PUSH
40632: LD_INT 2
40634: ARRAY
40635: EQUAL
40636: AND
40637: PUSH
40638: LD_VAR 0 3
40642: PUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 437
40652: PUSH
40653: LD_INT 1
40655: ARRAY
40656: PUSH
40657: LD_INT 3
40659: ARRAY
40660: EQUAL
40661: AND
40662: IFFALSE 40672
// result := true ;
40664: LD_ADDR_VAR 0 4
40668: PUSH
40669: LD_INT 1
40671: ST_TO_ADDR
// end ; end ;
40672: LD_VAR 0 4
40676: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40677: LD_INT 0
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
// if not unit or not area then
40683: LD_VAR 0 1
40687: NOT
40688: PUSH
40689: LD_VAR 0 2
40693: NOT
40694: OR
40695: IFFALSE 40699
// exit ;
40697: GO 40863
// tmp := AreaToList ( area , i ) ;
40699: LD_ADDR_VAR 0 6
40703: PUSH
40704: LD_VAR 0 2
40708: PPUSH
40709: LD_VAR 0 5
40713: PPUSH
40714: CALL_OW 517
40718: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40719: LD_ADDR_VAR 0 5
40723: PUSH
40724: DOUBLE
40725: LD_INT 1
40727: DEC
40728: ST_TO_ADDR
40729: LD_VAR 0 6
40733: PUSH
40734: LD_INT 1
40736: ARRAY
40737: PUSH
40738: FOR_TO
40739: IFFALSE 40861
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: LD_VAR 0 6
40750: PUSH
40751: LD_INT 1
40753: ARRAY
40754: PUSH
40755: LD_VAR 0 5
40759: ARRAY
40760: PUSH
40761: LD_VAR 0 6
40765: PUSH
40766: LD_INT 2
40768: ARRAY
40769: PUSH
40770: LD_VAR 0 5
40774: ARRAY
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40780: LD_VAR 0 7
40784: PUSH
40785: LD_INT 1
40787: ARRAY
40788: PPUSH
40789: LD_VAR 0 7
40793: PUSH
40794: LD_INT 2
40796: ARRAY
40797: PPUSH
40798: CALL_OW 428
40802: PUSH
40803: LD_INT 0
40805: EQUAL
40806: IFFALSE 40859
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40808: LD_VAR 0 1
40812: PPUSH
40813: LD_VAR 0 7
40817: PUSH
40818: LD_INT 1
40820: ARRAY
40821: PPUSH
40822: LD_VAR 0 7
40826: PUSH
40827: LD_INT 2
40829: ARRAY
40830: PPUSH
40831: LD_VAR 0 3
40835: PPUSH
40836: CALL_OW 48
// result := IsPlaced ( unit ) ;
40840: LD_ADDR_VAR 0 4
40844: PUSH
40845: LD_VAR 0 1
40849: PPUSH
40850: CALL_OW 305
40854: ST_TO_ADDR
// exit ;
40855: POP
40856: POP
40857: GO 40863
// end ; end ;
40859: GO 40738
40861: POP
40862: POP
// end ;
40863: LD_VAR 0 4
40867: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40868: LD_INT 0
40870: PPUSH
40871: PPUSH
40872: PPUSH
// if not side or side > 8 then
40873: LD_VAR 0 1
40877: NOT
40878: PUSH
40879: LD_VAR 0 1
40883: PUSH
40884: LD_INT 8
40886: GREATER
40887: OR
40888: IFFALSE 40892
// exit ;
40890: GO 41079
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40892: LD_ADDR_VAR 0 4
40896: PUSH
40897: LD_INT 22
40899: PUSH
40900: LD_VAR 0 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 21
40911: PUSH
40912: LD_INT 3
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PPUSH
40923: CALL_OW 69
40927: ST_TO_ADDR
// if not tmp then
40928: LD_VAR 0 4
40932: NOT
40933: IFFALSE 40937
// exit ;
40935: GO 41079
// enable_addtolog := true ;
40937: LD_ADDR_OWVAR 81
40941: PUSH
40942: LD_INT 1
40944: ST_TO_ADDR
// AddToLog ( [ ) ;
40945: LD_STRING [
40947: PPUSH
40948: CALL_OW 561
// for i in tmp do
40952: LD_ADDR_VAR 0 3
40956: PUSH
40957: LD_VAR 0 4
40961: PUSH
40962: FOR_IN
40963: IFFALSE 41070
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40965: LD_STRING [
40967: PUSH
40968: LD_VAR 0 3
40972: PPUSH
40973: CALL_OW 266
40977: STR
40978: PUSH
40979: LD_STRING , 
40981: STR
40982: PUSH
40983: LD_VAR 0 3
40987: PPUSH
40988: CALL_OW 250
40992: STR
40993: PUSH
40994: LD_STRING , 
40996: STR
40997: PUSH
40998: LD_VAR 0 3
41002: PPUSH
41003: CALL_OW 251
41007: STR
41008: PUSH
41009: LD_STRING , 
41011: STR
41012: PUSH
41013: LD_VAR 0 3
41017: PPUSH
41018: CALL_OW 254
41022: STR
41023: PUSH
41024: LD_STRING , 
41026: STR
41027: PUSH
41028: LD_VAR 0 3
41032: PPUSH
41033: LD_INT 1
41035: PPUSH
41036: CALL_OW 268
41040: STR
41041: PUSH
41042: LD_STRING , 
41044: STR
41045: PUSH
41046: LD_VAR 0 3
41050: PPUSH
41051: LD_INT 2
41053: PPUSH
41054: CALL_OW 268
41058: STR
41059: PUSH
41060: LD_STRING ],
41062: STR
41063: PPUSH
41064: CALL_OW 561
// end ;
41068: GO 40962
41070: POP
41071: POP
// AddToLog ( ]; ) ;
41072: LD_STRING ];
41074: PPUSH
41075: CALL_OW 561
// end ;
41079: LD_VAR 0 2
41083: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
41084: LD_INT 0
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
// if not area or not rate or not max then
41091: LD_VAR 0 1
41095: NOT
41096: PUSH
41097: LD_VAR 0 2
41101: NOT
41102: OR
41103: PUSH
41104: LD_VAR 0 4
41108: NOT
41109: OR
41110: IFFALSE 41114
// exit ;
41112: GO 41303
// while 1 do
41114: LD_INT 1
41116: IFFALSE 41303
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41118: LD_ADDR_VAR 0 9
41122: PUSH
41123: LD_VAR 0 1
41127: PPUSH
41128: LD_INT 1
41130: PPUSH
41131: CALL_OW 287
41135: PUSH
41136: LD_INT 10
41138: MUL
41139: ST_TO_ADDR
// r := rate / 10 ;
41140: LD_ADDR_VAR 0 7
41144: PUSH
41145: LD_VAR 0 2
41149: PUSH
41150: LD_INT 10
41152: DIVREAL
41153: ST_TO_ADDR
// time := 1 1$00 ;
41154: LD_ADDR_VAR 0 8
41158: PUSH
41159: LD_INT 2100
41161: ST_TO_ADDR
// if amount < min then
41162: LD_VAR 0 9
41166: PUSH
41167: LD_VAR 0 3
41171: LESS
41172: IFFALSE 41190
// r := r * 2 else
41174: LD_ADDR_VAR 0 7
41178: PUSH
41179: LD_VAR 0 7
41183: PUSH
41184: LD_INT 2
41186: MUL
41187: ST_TO_ADDR
41188: GO 41216
// if amount > max then
41190: LD_VAR 0 9
41194: PUSH
41195: LD_VAR 0 4
41199: GREATER
41200: IFFALSE 41216
// r := r / 2 ;
41202: LD_ADDR_VAR 0 7
41206: PUSH
41207: LD_VAR 0 7
41211: PUSH
41212: LD_INT 2
41214: DIVREAL
41215: ST_TO_ADDR
// time := time / r ;
41216: LD_ADDR_VAR 0 8
41220: PUSH
41221: LD_VAR 0 8
41225: PUSH
41226: LD_VAR 0 7
41230: DIVREAL
41231: ST_TO_ADDR
// if time < 0 then
41232: LD_VAR 0 8
41236: PUSH
41237: LD_INT 0
41239: LESS
41240: IFFALSE 41257
// time := time * - 1 ;
41242: LD_ADDR_VAR 0 8
41246: PUSH
41247: LD_VAR 0 8
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: MUL
41256: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41257: LD_VAR 0 8
41261: PUSH
41262: LD_INT 35
41264: PPUSH
41265: LD_INT 875
41267: PPUSH
41268: CALL_OW 12
41272: PLUS
41273: PPUSH
41274: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41278: LD_INT 1
41280: PPUSH
41281: LD_INT 5
41283: PPUSH
41284: CALL_OW 12
41288: PPUSH
41289: LD_VAR 0 1
41293: PPUSH
41294: LD_INT 1
41296: PPUSH
41297: CALL_OW 55
// end ;
41301: GO 41114
// end ;
41303: LD_VAR 0 5
41307: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41308: LD_INT 0
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
// if not turrets or not factories then
41318: LD_VAR 0 1
41322: NOT
41323: PUSH
41324: LD_VAR 0 2
41328: NOT
41329: OR
41330: IFFALSE 41334
// exit ;
41332: GO 41641
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41334: LD_ADDR_VAR 0 10
41338: PUSH
41339: LD_INT 5
41341: PUSH
41342: LD_INT 6
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: LD_INT 4
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 3
41361: PUSH
41362: LD_INT 5
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 24
41376: PUSH
41377: LD_INT 25
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 23
41386: PUSH
41387: LD_INT 27
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 42
41400: PUSH
41401: LD_INT 43
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 44
41410: PUSH
41411: LD_INT 46
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 45
41420: PUSH
41421: LD_INT 47
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: ST_TO_ADDR
// result := [ ] ;
41438: LD_ADDR_VAR 0 3
41442: PUSH
41443: EMPTY
41444: ST_TO_ADDR
// for i in turrets do
41445: LD_ADDR_VAR 0 4
41449: PUSH
41450: LD_VAR 0 1
41454: PUSH
41455: FOR_IN
41456: IFFALSE 41639
// begin nat := GetNation ( i ) ;
41458: LD_ADDR_VAR 0 7
41462: PUSH
41463: LD_VAR 0 4
41467: PPUSH
41468: CALL_OW 248
41472: ST_TO_ADDR
// weapon := 0 ;
41473: LD_ADDR_VAR 0 8
41477: PUSH
41478: LD_INT 0
41480: ST_TO_ADDR
// if not nat then
41481: LD_VAR 0 7
41485: NOT
41486: IFFALSE 41490
// continue ;
41488: GO 41455
// for j in list [ nat ] do
41490: LD_ADDR_VAR 0 5
41494: PUSH
41495: LD_VAR 0 10
41499: PUSH
41500: LD_VAR 0 7
41504: ARRAY
41505: PUSH
41506: FOR_IN
41507: IFFALSE 41548
// if GetBWeapon ( i ) = j [ 1 ] then
41509: LD_VAR 0 4
41513: PPUSH
41514: CALL_OW 269
41518: PUSH
41519: LD_VAR 0 5
41523: PUSH
41524: LD_INT 1
41526: ARRAY
41527: EQUAL
41528: IFFALSE 41546
// begin weapon := j [ 2 ] ;
41530: LD_ADDR_VAR 0 8
41534: PUSH
41535: LD_VAR 0 5
41539: PUSH
41540: LD_INT 2
41542: ARRAY
41543: ST_TO_ADDR
// break ;
41544: GO 41548
// end ;
41546: GO 41506
41548: POP
41549: POP
// if not weapon then
41550: LD_VAR 0 8
41554: NOT
41555: IFFALSE 41559
// continue ;
41557: GO 41455
// for k in factories do
41559: LD_ADDR_VAR 0 6
41563: PUSH
41564: LD_VAR 0 2
41568: PUSH
41569: FOR_IN
41570: IFFALSE 41635
// begin weapons := AvailableWeaponList ( k ) ;
41572: LD_ADDR_VAR 0 9
41576: PUSH
41577: LD_VAR 0 6
41581: PPUSH
41582: CALL_OW 478
41586: ST_TO_ADDR
// if not weapons then
41587: LD_VAR 0 9
41591: NOT
41592: IFFALSE 41596
// continue ;
41594: GO 41569
// if weapon in weapons then
41596: LD_VAR 0 8
41600: PUSH
41601: LD_VAR 0 9
41605: IN
41606: IFFALSE 41633
// begin result := [ i , weapon ] ;
41608: LD_ADDR_VAR 0 3
41612: PUSH
41613: LD_VAR 0 4
41617: PUSH
41618: LD_VAR 0 8
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: ST_TO_ADDR
// exit ;
41627: POP
41628: POP
41629: POP
41630: POP
41631: GO 41641
// end ; end ;
41633: GO 41569
41635: POP
41636: POP
// end ;
41637: GO 41455
41639: POP
41640: POP
// end ;
41641: LD_VAR 0 3
41645: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41646: LD_INT 0
41648: PPUSH
// if not side or side > 8 then
41649: LD_VAR 0 3
41653: NOT
41654: PUSH
41655: LD_VAR 0 3
41659: PUSH
41660: LD_INT 8
41662: GREATER
41663: OR
41664: IFFALSE 41668
// exit ;
41666: GO 41727
// if not range then
41668: LD_VAR 0 4
41672: NOT
41673: IFFALSE 41684
// range := - 12 ;
41675: LD_ADDR_VAR 0 4
41679: PUSH
41680: LD_INT 12
41682: NEG
41683: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41684: LD_VAR 0 1
41688: PPUSH
41689: LD_VAR 0 2
41693: PPUSH
41694: LD_VAR 0 3
41698: PPUSH
41699: LD_VAR 0 4
41703: PPUSH
41704: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41708: LD_VAR 0 1
41712: PPUSH
41713: LD_VAR 0 2
41717: PPUSH
41718: LD_VAR 0 3
41722: PPUSH
41723: CALL_OW 331
// end ;
41727: LD_VAR 0 5
41731: RET
// export function Video ( mode ) ; begin
41732: LD_INT 0
41734: PPUSH
// ingame_video = mode ;
41735: LD_ADDR_OWVAR 52
41739: PUSH
41740: LD_VAR 0 1
41744: ST_TO_ADDR
// interface_hidden = mode ;
41745: LD_ADDR_OWVAR 54
41749: PUSH
41750: LD_VAR 0 1
41754: ST_TO_ADDR
// end ;
41755: LD_VAR 0 2
41759: RET
// export function Join ( array , element ) ; begin
41760: LD_INT 0
41762: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41763: LD_ADDR_VAR 0 3
41767: PUSH
41768: LD_VAR 0 1
41772: PPUSH
41773: LD_VAR 0 1
41777: PUSH
41778: LD_INT 1
41780: PLUS
41781: PPUSH
41782: LD_VAR 0 2
41786: PPUSH
41787: CALL_OW 1
41791: ST_TO_ADDR
// end ;
41792: LD_VAR 0 3
41796: RET
// export function JoinUnion ( array , element ) ; begin
41797: LD_INT 0
41799: PPUSH
// result := array union element ;
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: LD_VAR 0 1
41809: PUSH
41810: LD_VAR 0 2
41814: UNION
41815: ST_TO_ADDR
// end ;
41816: LD_VAR 0 3
41820: RET
// export function GetBehemoths ( side ) ; begin
41821: LD_INT 0
41823: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41824: LD_ADDR_VAR 0 2
41828: PUSH
41829: LD_INT 22
41831: PUSH
41832: LD_VAR 0 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 31
41843: PUSH
41844: LD_INT 25
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PPUSH
41855: CALL_OW 69
41859: ST_TO_ADDR
// end ;
41860: LD_VAR 0 2
41864: RET
// export function Shuffle ( array ) ; var i , index ; begin
41865: LD_INT 0
41867: PPUSH
41868: PPUSH
41869: PPUSH
// result := [ ] ;
41870: LD_ADDR_VAR 0 2
41874: PUSH
41875: EMPTY
41876: ST_TO_ADDR
// if not array then
41877: LD_VAR 0 1
41881: NOT
41882: IFFALSE 41886
// exit ;
41884: GO 41985
// Randomize ;
41886: CALL_OW 10
// for i = array downto 1 do
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: DOUBLE
41896: LD_VAR 0 1
41900: INC
41901: ST_TO_ADDR
41902: LD_INT 1
41904: PUSH
41905: FOR_DOWNTO
41906: IFFALSE 41983
// begin index := rand ( 1 , array ) ;
41908: LD_ADDR_VAR 0 4
41912: PUSH
41913: LD_INT 1
41915: PPUSH
41916: LD_VAR 0 1
41920: PPUSH
41921: CALL_OW 12
41925: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41926: LD_ADDR_VAR 0 2
41930: PUSH
41931: LD_VAR 0 2
41935: PPUSH
41936: LD_VAR 0 2
41940: PUSH
41941: LD_INT 1
41943: PLUS
41944: PPUSH
41945: LD_VAR 0 1
41949: PUSH
41950: LD_VAR 0 4
41954: ARRAY
41955: PPUSH
41956: CALL_OW 2
41960: ST_TO_ADDR
// array := Delete ( array , index ) ;
41961: LD_ADDR_VAR 0 1
41965: PUSH
41966: LD_VAR 0 1
41970: PPUSH
41971: LD_VAR 0 4
41975: PPUSH
41976: CALL_OW 3
41980: ST_TO_ADDR
// end ;
41981: GO 41905
41983: POP
41984: POP
// end ;
41985: LD_VAR 0 2
41989: RET
// export function GetBaseMaterials ( base ) ; begin
41990: LD_INT 0
41992: PPUSH
// result := [ 0 , 0 , 0 ] ;
41993: LD_ADDR_VAR 0 2
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// if not base then
42012: LD_VAR 0 1
42016: NOT
42017: IFFALSE 42021
// exit ;
42019: GO 42070
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42021: LD_ADDR_VAR 0 2
42025: PUSH
42026: LD_VAR 0 1
42030: PPUSH
42031: LD_INT 1
42033: PPUSH
42034: CALL_OW 275
42038: PUSH
42039: LD_VAR 0 1
42043: PPUSH
42044: LD_INT 2
42046: PPUSH
42047: CALL_OW 275
42051: PUSH
42052: LD_VAR 0 1
42056: PPUSH
42057: LD_INT 3
42059: PPUSH
42060: CALL_OW 275
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: ST_TO_ADDR
// end ;
42070: LD_VAR 0 2
42074: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
42075: LD_INT 0
42077: PPUSH
42078: PPUSH
// result := array ;
42079: LD_ADDR_VAR 0 3
42083: PUSH
42084: LD_VAR 0 1
42088: ST_TO_ADDR
// if size >= result then
42089: LD_VAR 0 2
42093: PUSH
42094: LD_VAR 0 3
42098: GREATEREQUAL
42099: IFFALSE 42103
// exit ;
42101: GO 42153
// if size then
42103: LD_VAR 0 2
42107: IFFALSE 42153
// for i := array downto size do
42109: LD_ADDR_VAR 0 4
42113: PUSH
42114: DOUBLE
42115: LD_VAR 0 1
42119: INC
42120: ST_TO_ADDR
42121: LD_VAR 0 2
42125: PUSH
42126: FOR_DOWNTO
42127: IFFALSE 42151
// result := Delete ( result , result ) ;
42129: LD_ADDR_VAR 0 3
42133: PUSH
42134: LD_VAR 0 3
42138: PPUSH
42139: LD_VAR 0 3
42143: PPUSH
42144: CALL_OW 3
42148: ST_TO_ADDR
42149: GO 42126
42151: POP
42152: POP
// end ;
42153: LD_VAR 0 3
42157: RET
// export function ComExit ( unit ) ; var tmp ; begin
42158: LD_INT 0
42160: PPUSH
42161: PPUSH
// if not IsInUnit ( unit ) then
42162: LD_VAR 0 1
42166: PPUSH
42167: CALL_OW 310
42171: NOT
42172: IFFALSE 42176
// exit ;
42174: GO 42236
// tmp := IsInUnit ( unit ) ;
42176: LD_ADDR_VAR 0 3
42180: PUSH
42181: LD_VAR 0 1
42185: PPUSH
42186: CALL_OW 310
42190: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42191: LD_VAR 0 3
42195: PPUSH
42196: CALL_OW 247
42200: PUSH
42201: LD_INT 2
42203: EQUAL
42204: IFFALSE 42217
// ComExitVehicle ( unit ) else
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 121
42215: GO 42226
// ComExitBuilding ( unit ) ;
42217: LD_VAR 0 1
42221: PPUSH
42222: CALL_OW 122
// result := tmp ;
42226: LD_ADDR_VAR 0 2
42230: PUSH
42231: LD_VAR 0 3
42235: ST_TO_ADDR
// end ;
42236: LD_VAR 0 2
42240: RET
// export function ComExitAll ( units ) ; var i ; begin
42241: LD_INT 0
42243: PPUSH
42244: PPUSH
// if not units then
42245: LD_VAR 0 1
42249: NOT
42250: IFFALSE 42254
// exit ;
42252: GO 42280
// for i in units do
42254: LD_ADDR_VAR 0 3
42258: PUSH
42259: LD_VAR 0 1
42263: PUSH
42264: FOR_IN
42265: IFFALSE 42278
// ComExit ( i ) ;
42267: LD_VAR 0 3
42271: PPUSH
42272: CALL 42158 0 1
42276: GO 42264
42278: POP
42279: POP
// end ;
42280: LD_VAR 0 2
42284: RET
// export function ResetHc ; begin
42285: LD_INT 0
42287: PPUSH
// InitHc ;
42288: CALL_OW 19
// hc_importance := 0 ;
42292: LD_ADDR_OWVAR 32
42296: PUSH
42297: LD_INT 0
42299: ST_TO_ADDR
// end ;
42300: LD_VAR 0 1
42304: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42305: LD_INT 0
42307: PPUSH
42308: PPUSH
42309: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42310: LD_ADDR_VAR 0 6
42314: PUSH
42315: LD_VAR 0 1
42319: PUSH
42320: LD_VAR 0 3
42324: PLUS
42325: PUSH
42326: LD_INT 2
42328: DIV
42329: ST_TO_ADDR
// if _x < 0 then
42330: LD_VAR 0 6
42334: PUSH
42335: LD_INT 0
42337: LESS
42338: IFFALSE 42355
// _x := _x * - 1 ;
42340: LD_ADDR_VAR 0 6
42344: PUSH
42345: LD_VAR 0 6
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: MUL
42354: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42355: LD_ADDR_VAR 0 7
42359: PUSH
42360: LD_VAR 0 2
42364: PUSH
42365: LD_VAR 0 4
42369: PLUS
42370: PUSH
42371: LD_INT 2
42373: DIV
42374: ST_TO_ADDR
// if _y < 0 then
42375: LD_VAR 0 7
42379: PUSH
42380: LD_INT 0
42382: LESS
42383: IFFALSE 42400
// _y := _y * - 1 ;
42385: LD_ADDR_VAR 0 7
42389: PUSH
42390: LD_VAR 0 7
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: MUL
42399: ST_TO_ADDR
// result := [ _x , _y ] ;
42400: LD_ADDR_VAR 0 5
42404: PUSH
42405: LD_VAR 0 6
42409: PUSH
42410: LD_VAR 0 7
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: ST_TO_ADDR
// end ;
42419: LD_VAR 0 5
42423: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42424: LD_INT 0
42426: PPUSH
42427: PPUSH
42428: PPUSH
42429: PPUSH
// task := GetTaskList ( unit ) ;
42430: LD_ADDR_VAR 0 7
42434: PUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: CALL_OW 437
42444: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42445: LD_VAR 0 7
42449: NOT
42450: PUSH
42451: LD_VAR 0 1
42455: PPUSH
42456: LD_VAR 0 2
42460: PPUSH
42461: CALL_OW 308
42465: NOT
42466: AND
42467: IFFALSE 42471
// exit ;
42469: GO 42589
// if IsInArea ( unit , area ) then
42471: LD_VAR 0 1
42475: PPUSH
42476: LD_VAR 0 2
42480: PPUSH
42481: CALL_OW 308
42485: IFFALSE 42503
// begin ComMoveToArea ( unit , goAway ) ;
42487: LD_VAR 0 1
42491: PPUSH
42492: LD_VAR 0 3
42496: PPUSH
42497: CALL_OW 113
// exit ;
42501: GO 42589
// end ; if task [ 1 ] [ 1 ] <> M then
42503: LD_VAR 0 7
42507: PUSH
42508: LD_INT 1
42510: ARRAY
42511: PUSH
42512: LD_INT 1
42514: ARRAY
42515: PUSH
42516: LD_STRING M
42518: NONEQUAL
42519: IFFALSE 42523
// exit ;
42521: GO 42589
// x := task [ 1 ] [ 2 ] ;
42523: LD_ADDR_VAR 0 5
42527: PUSH
42528: LD_VAR 0 7
42532: PUSH
42533: LD_INT 1
42535: ARRAY
42536: PUSH
42537: LD_INT 2
42539: ARRAY
42540: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42541: LD_ADDR_VAR 0 6
42545: PUSH
42546: LD_VAR 0 7
42550: PUSH
42551: LD_INT 1
42553: ARRAY
42554: PUSH
42555: LD_INT 3
42557: ARRAY
42558: ST_TO_ADDR
// if InArea ( x , y , area ) then
42559: LD_VAR 0 5
42563: PPUSH
42564: LD_VAR 0 6
42568: PPUSH
42569: LD_VAR 0 2
42573: PPUSH
42574: CALL_OW 309
42578: IFFALSE 42589
// ComStop ( unit ) ;
42580: LD_VAR 0 1
42584: PPUSH
42585: CALL_OW 141
// end ;
42589: LD_VAR 0 4
42593: RET
// export function Abs ( value ) ; begin
42594: LD_INT 0
42596: PPUSH
// result := value ;
42597: LD_ADDR_VAR 0 2
42601: PUSH
42602: LD_VAR 0 1
42606: ST_TO_ADDR
// if value < 0 then
42607: LD_VAR 0 1
42611: PUSH
42612: LD_INT 0
42614: LESS
42615: IFFALSE 42632
// result := value * - 1 ;
42617: LD_ADDR_VAR 0 2
42621: PUSH
42622: LD_VAR 0 1
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: MUL
42631: ST_TO_ADDR
// end ;
42632: LD_VAR 0 2
42636: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42637: LD_INT 0
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
// if not unit or not building then
42647: LD_VAR 0 1
42651: NOT
42652: PUSH
42653: LD_VAR 0 2
42657: NOT
42658: OR
42659: IFFALSE 42663
// exit ;
42661: GO 42889
// x := GetX ( building ) ;
42663: LD_ADDR_VAR 0 4
42667: PUSH
42668: LD_VAR 0 2
42672: PPUSH
42673: CALL_OW 250
42677: ST_TO_ADDR
// y := GetY ( building ) ;
42678: LD_ADDR_VAR 0 6
42682: PUSH
42683: LD_VAR 0 2
42687: PPUSH
42688: CALL_OW 251
42692: ST_TO_ADDR
// d := GetDir ( building ) ;
42693: LD_ADDR_VAR 0 8
42697: PUSH
42698: LD_VAR 0 2
42702: PPUSH
42703: CALL_OW 254
42707: ST_TO_ADDR
// r := 4 ;
42708: LD_ADDR_VAR 0 9
42712: PUSH
42713: LD_INT 4
42715: ST_TO_ADDR
// for i := 1 to 5 do
42716: LD_ADDR_VAR 0 10
42720: PUSH
42721: DOUBLE
42722: LD_INT 1
42724: DEC
42725: ST_TO_ADDR
42726: LD_INT 5
42728: PUSH
42729: FOR_TO
42730: IFFALSE 42887
// begin _x := ShiftX ( x , d , r + i ) ;
42732: LD_ADDR_VAR 0 5
42736: PUSH
42737: LD_VAR 0 4
42741: PPUSH
42742: LD_VAR 0 8
42746: PPUSH
42747: LD_VAR 0 9
42751: PUSH
42752: LD_VAR 0 10
42756: PLUS
42757: PPUSH
42758: CALL_OW 272
42762: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42763: LD_ADDR_VAR 0 7
42767: PUSH
42768: LD_VAR 0 6
42772: PPUSH
42773: LD_VAR 0 8
42777: PPUSH
42778: LD_VAR 0 9
42782: PUSH
42783: LD_VAR 0 10
42787: PLUS
42788: PPUSH
42789: CALL_OW 273
42793: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42794: LD_VAR 0 5
42798: PPUSH
42799: LD_VAR 0 7
42803: PPUSH
42804: CALL_OW 488
42808: PUSH
42809: LD_VAR 0 5
42813: PPUSH
42814: LD_VAR 0 7
42818: PPUSH
42819: CALL_OW 428
42823: PPUSH
42824: CALL_OW 247
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: IN
42839: NOT
42840: AND
42841: IFFALSE 42885
// begin ComMoveXY ( unit , _x , _y ) ;
42843: LD_VAR 0 1
42847: PPUSH
42848: LD_VAR 0 5
42852: PPUSH
42853: LD_VAR 0 7
42857: PPUSH
42858: CALL_OW 111
// result := [ _x , _y ] ;
42862: LD_ADDR_VAR 0 3
42866: PUSH
42867: LD_VAR 0 5
42871: PUSH
42872: LD_VAR 0 7
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// exit ;
42881: POP
42882: POP
42883: GO 42889
// end ; end ;
42885: GO 42729
42887: POP
42888: POP
// end ;
42889: LD_VAR 0 3
42893: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42894: LD_INT 0
42896: PPUSH
42897: PPUSH
42898: PPUSH
// result := 0 ;
42899: LD_ADDR_VAR 0 3
42903: PUSH
42904: LD_INT 0
42906: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42907: LD_VAR 0 1
42911: PUSH
42912: LD_INT 0
42914: LESS
42915: PUSH
42916: LD_VAR 0 1
42920: PUSH
42921: LD_INT 8
42923: GREATER
42924: OR
42925: PUSH
42926: LD_VAR 0 2
42930: PUSH
42931: LD_INT 0
42933: LESS
42934: OR
42935: PUSH
42936: LD_VAR 0 2
42940: PUSH
42941: LD_INT 8
42943: GREATER
42944: OR
42945: IFFALSE 42949
// exit ;
42947: GO 43024
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42949: LD_ADDR_VAR 0 4
42953: PUSH
42954: LD_INT 22
42956: PUSH
42957: LD_VAR 0 2
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PPUSH
42966: CALL_OW 69
42970: PUSH
42971: FOR_IN
42972: IFFALSE 43022
// begin un := UnitShoot ( i ) ;
42974: LD_ADDR_VAR 0 5
42978: PUSH
42979: LD_VAR 0 4
42983: PPUSH
42984: CALL_OW 504
42988: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42989: LD_VAR 0 5
42993: PPUSH
42994: CALL_OW 255
42998: PUSH
42999: LD_VAR 0 1
43003: EQUAL
43004: IFFALSE 43020
// begin result := un ;
43006: LD_ADDR_VAR 0 3
43010: PUSH
43011: LD_VAR 0 5
43015: ST_TO_ADDR
// exit ;
43016: POP
43017: POP
43018: GO 43024
// end ; end ;
43020: GO 42971
43022: POP
43023: POP
// end ;
43024: LD_VAR 0 3
43028: RET
// export function GetCargoBay ( units ) ; begin
43029: LD_INT 0
43031: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43032: LD_ADDR_VAR 0 2
43036: PUSH
43037: LD_VAR 0 1
43041: PPUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 34
43047: PUSH
43048: LD_INT 12
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 34
43057: PUSH
43058: LD_INT 51
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 34
43067: PUSH
43068: LD_INT 32
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 34
43077: PUSH
43078: LD_EXP 32
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: PPUSH
43094: CALL_OW 72
43098: ST_TO_ADDR
// end ;
43099: LD_VAR 0 2
43103: RET
// export function Negate ( value ) ; begin
43104: LD_INT 0
43106: PPUSH
// result := not value ;
43107: LD_ADDR_VAR 0 2
43111: PUSH
43112: LD_VAR 0 1
43116: NOT
43117: ST_TO_ADDR
// end ;
43118: LD_VAR 0 2
43122: RET
// export function Inc ( value ) ; begin
43123: LD_INT 0
43125: PPUSH
// result := value + 1 ;
43126: LD_ADDR_VAR 0 2
43130: PUSH
43131: LD_VAR 0 1
43135: PUSH
43136: LD_INT 1
43138: PLUS
43139: ST_TO_ADDR
// end ;
43140: LD_VAR 0 2
43144: RET
// export function Dec ( value ) ; begin
43145: LD_INT 0
43147: PPUSH
// result := value - 1 ;
43148: LD_ADDR_VAR 0 2
43152: PUSH
43153: LD_VAR 0 1
43157: PUSH
43158: LD_INT 1
43160: MINUS
43161: ST_TO_ADDR
// end ;
43162: LD_VAR 0 2
43166: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43167: LD_INT 0
43169: PPUSH
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
43174: PPUSH
43175: PPUSH
43176: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43177: LD_VAR 0 1
43181: PPUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: CALL_OW 488
43191: NOT
43192: PUSH
43193: LD_VAR 0 3
43197: PPUSH
43198: LD_VAR 0 4
43202: PPUSH
43203: CALL_OW 488
43207: NOT
43208: OR
43209: IFFALSE 43222
// begin result := - 1 ;
43211: LD_ADDR_VAR 0 5
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: ST_TO_ADDR
// exit ;
43220: GO 43457
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43222: LD_ADDR_VAR 0 12
43226: PUSH
43227: LD_VAR 0 1
43231: PPUSH
43232: LD_VAR 0 2
43236: PPUSH
43237: LD_VAR 0 3
43241: PPUSH
43242: LD_VAR 0 4
43246: PPUSH
43247: CALL 42305 0 4
43251: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43252: LD_ADDR_VAR 0 11
43256: PUSH
43257: LD_VAR 0 1
43261: PPUSH
43262: LD_VAR 0 2
43266: PPUSH
43267: LD_VAR 0 12
43271: PUSH
43272: LD_INT 1
43274: ARRAY
43275: PPUSH
43276: LD_VAR 0 12
43280: PUSH
43281: LD_INT 2
43283: ARRAY
43284: PPUSH
43285: CALL_OW 298
43289: ST_TO_ADDR
// distance := 9999 ;
43290: LD_ADDR_VAR 0 10
43294: PUSH
43295: LD_INT 9999
43297: ST_TO_ADDR
// for i := 0 to 5 do
43298: LD_ADDR_VAR 0 6
43302: PUSH
43303: DOUBLE
43304: LD_INT 0
43306: DEC
43307: ST_TO_ADDR
43308: LD_INT 5
43310: PUSH
43311: FOR_TO
43312: IFFALSE 43455
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43314: LD_ADDR_VAR 0 7
43318: PUSH
43319: LD_VAR 0 1
43323: PPUSH
43324: LD_VAR 0 6
43328: PPUSH
43329: LD_VAR 0 11
43333: PPUSH
43334: CALL_OW 272
43338: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43339: LD_ADDR_VAR 0 8
43343: PUSH
43344: LD_VAR 0 2
43348: PPUSH
43349: LD_VAR 0 6
43353: PPUSH
43354: LD_VAR 0 11
43358: PPUSH
43359: CALL_OW 273
43363: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43364: LD_VAR 0 7
43368: PPUSH
43369: LD_VAR 0 8
43373: PPUSH
43374: CALL_OW 488
43378: NOT
43379: IFFALSE 43383
// continue ;
43381: GO 43311
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43383: LD_ADDR_VAR 0 9
43387: PUSH
43388: LD_VAR 0 12
43392: PUSH
43393: LD_INT 1
43395: ARRAY
43396: PPUSH
43397: LD_VAR 0 12
43401: PUSH
43402: LD_INT 2
43404: ARRAY
43405: PPUSH
43406: LD_VAR 0 7
43410: PPUSH
43411: LD_VAR 0 8
43415: PPUSH
43416: CALL_OW 298
43420: ST_TO_ADDR
// if tmp < distance then
43421: LD_VAR 0 9
43425: PUSH
43426: LD_VAR 0 10
43430: LESS
43431: IFFALSE 43453
// begin result := i ;
43433: LD_ADDR_VAR 0 5
43437: PUSH
43438: LD_VAR 0 6
43442: ST_TO_ADDR
// distance := tmp ;
43443: LD_ADDR_VAR 0 10
43447: PUSH
43448: LD_VAR 0 9
43452: ST_TO_ADDR
// end ; end ;
43453: GO 43311
43455: POP
43456: POP
// end ;
43457: LD_VAR 0 5
43461: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43462: LD_INT 0
43464: PPUSH
43465: PPUSH
// if not driver or not IsInUnit ( driver ) then
43466: LD_VAR 0 1
43470: NOT
43471: PUSH
43472: LD_VAR 0 1
43476: PPUSH
43477: CALL_OW 310
43481: NOT
43482: OR
43483: IFFALSE 43487
// exit ;
43485: GO 43577
// vehicle := IsInUnit ( driver ) ;
43487: LD_ADDR_VAR 0 3
43491: PUSH
43492: LD_VAR 0 1
43496: PPUSH
43497: CALL_OW 310
43501: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43502: LD_VAR 0 1
43506: PPUSH
43507: LD_STRING \
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: PUSH
43537: LD_STRING E
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_VAR 0 3
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PPUSH
43573: CALL_OW 446
// end ;
43577: LD_VAR 0 2
43581: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43582: LD_INT 0
43584: PPUSH
43585: PPUSH
// if not driver or not IsInUnit ( driver ) then
43586: LD_VAR 0 1
43590: NOT
43591: PUSH
43592: LD_VAR 0 1
43596: PPUSH
43597: CALL_OW 310
43601: NOT
43602: OR
43603: IFFALSE 43607
// exit ;
43605: GO 43697
// vehicle := IsInUnit ( driver ) ;
43607: LD_ADDR_VAR 0 3
43611: PUSH
43612: LD_VAR 0 1
43616: PPUSH
43617: CALL_OW 310
43621: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43622: LD_VAR 0 1
43626: PPUSH
43627: LD_STRING \
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: PUSH
43657: LD_STRING E
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_VAR 0 3
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PPUSH
43693: CALL_OW 447
// end ;
43697: LD_VAR 0 2
43701: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43702: LD_INT 0
43704: PPUSH
43705: PPUSH
43706: PPUSH
// tmp := [ ] ;
43707: LD_ADDR_VAR 0 5
43711: PUSH
43712: EMPTY
43713: ST_TO_ADDR
// for i in units do
43714: LD_ADDR_VAR 0 4
43718: PUSH
43719: LD_VAR 0 1
43723: PUSH
43724: FOR_IN
43725: IFFALSE 43763
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43727: LD_ADDR_VAR 0 5
43731: PUSH
43732: LD_VAR 0 5
43736: PPUSH
43737: LD_VAR 0 5
43741: PUSH
43742: LD_INT 1
43744: PLUS
43745: PPUSH
43746: LD_VAR 0 4
43750: PPUSH
43751: CALL_OW 256
43755: PPUSH
43756: CALL_OW 2
43760: ST_TO_ADDR
43761: GO 43724
43763: POP
43764: POP
// if not tmp then
43765: LD_VAR 0 5
43769: NOT
43770: IFFALSE 43774
// exit ;
43772: GO 43822
// if asc then
43774: LD_VAR 0 2
43778: IFFALSE 43802
// result := SortListByListAsc ( units , tmp ) else
43780: LD_ADDR_VAR 0 3
43784: PUSH
43785: LD_VAR 0 1
43789: PPUSH
43790: LD_VAR 0 5
43794: PPUSH
43795: CALL_OW 76
43799: ST_TO_ADDR
43800: GO 43822
// result := SortListByListDesc ( units , tmp ) ;
43802: LD_ADDR_VAR 0 3
43806: PUSH
43807: LD_VAR 0 1
43811: PPUSH
43812: LD_VAR 0 5
43816: PPUSH
43817: CALL_OW 77
43821: ST_TO_ADDR
// end ;
43822: LD_VAR 0 3
43826: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43827: LD_INT 0
43829: PPUSH
43830: PPUSH
// task := GetTaskList ( mech ) ;
43831: LD_ADDR_VAR 0 4
43835: PUSH
43836: LD_VAR 0 1
43840: PPUSH
43841: CALL_OW 437
43845: ST_TO_ADDR
// if not task then
43846: LD_VAR 0 4
43850: NOT
43851: IFFALSE 43855
// exit ;
43853: GO 43897
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43855: LD_ADDR_VAR 0 3
43859: PUSH
43860: LD_VAR 0 4
43864: PUSH
43865: LD_INT 1
43867: ARRAY
43868: PUSH
43869: LD_INT 1
43871: ARRAY
43872: PUSH
43873: LD_STRING r
43875: EQUAL
43876: PUSH
43877: LD_VAR 0 4
43881: PUSH
43882: LD_INT 1
43884: ARRAY
43885: PUSH
43886: LD_INT 4
43888: ARRAY
43889: PUSH
43890: LD_VAR 0 2
43894: EQUAL
43895: AND
43896: ST_TO_ADDR
// end ;
43897: LD_VAR 0 3
43901: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43902: LD_INT 0
43904: PPUSH
// SetDir ( unit , d ) ;
43905: LD_VAR 0 1
43909: PPUSH
43910: LD_VAR 0 4
43914: PPUSH
43915: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43919: LD_VAR 0 1
43923: PPUSH
43924: LD_VAR 0 2
43928: PPUSH
43929: LD_VAR 0 3
43933: PPUSH
43934: LD_VAR 0 5
43938: PPUSH
43939: CALL_OW 48
// end ;
43943: LD_VAR 0 6
43947: RET
// export function ToNaturalNumber ( number ) ; begin
43948: LD_INT 0
43950: PPUSH
// result := number div 1 ;
43951: LD_ADDR_VAR 0 2
43955: PUSH
43956: LD_VAR 0 1
43960: PUSH
43961: LD_INT 1
43963: DIV
43964: ST_TO_ADDR
// if number < 0 then
43965: LD_VAR 0 1
43969: PUSH
43970: LD_INT 0
43972: LESS
43973: IFFALSE 43983
// result := 0 ;
43975: LD_ADDR_VAR 0 2
43979: PUSH
43980: LD_INT 0
43982: ST_TO_ADDR
// end ;
43983: LD_VAR 0 2
43987: RET
// export function SortByClass ( units , class ) ; var un ; begin
43988: LD_INT 0
43990: PPUSH
43991: PPUSH
// if not units or not class then
43992: LD_VAR 0 1
43996: NOT
43997: PUSH
43998: LD_VAR 0 2
44002: NOT
44003: OR
44004: IFFALSE 44008
// exit ;
44006: GO 44103
// result := [ ] ;
44008: LD_ADDR_VAR 0 3
44012: PUSH
44013: EMPTY
44014: ST_TO_ADDR
// for un in units do
44015: LD_ADDR_VAR 0 4
44019: PUSH
44020: LD_VAR 0 1
44024: PUSH
44025: FOR_IN
44026: IFFALSE 44101
// if GetClass ( un ) = class then
44028: LD_VAR 0 4
44032: PPUSH
44033: CALL_OW 257
44037: PUSH
44038: LD_VAR 0 2
44042: EQUAL
44043: IFFALSE 44070
// result := Insert ( result , 1 , un ) else
44045: LD_ADDR_VAR 0 3
44049: PUSH
44050: LD_VAR 0 3
44054: PPUSH
44055: LD_INT 1
44057: PPUSH
44058: LD_VAR 0 4
44062: PPUSH
44063: CALL_OW 2
44067: ST_TO_ADDR
44068: GO 44099
// result := Replace ( result , result + 1 , un ) ;
44070: LD_ADDR_VAR 0 3
44074: PUSH
44075: LD_VAR 0 3
44079: PPUSH
44080: LD_VAR 0 3
44084: PUSH
44085: LD_INT 1
44087: PLUS
44088: PPUSH
44089: LD_VAR 0 4
44093: PPUSH
44094: CALL_OW 1
44098: ST_TO_ADDR
44099: GO 44025
44101: POP
44102: POP
// end ;
44103: LD_VAR 0 3
44107: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44108: LD_INT 0
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
44114: PPUSH
44115: PPUSH
44116: PPUSH
// result := [ ] ;
44117: LD_ADDR_VAR 0 4
44121: PUSH
44122: EMPTY
44123: ST_TO_ADDR
// if x - r < 0 then
44124: LD_VAR 0 1
44128: PUSH
44129: LD_VAR 0 3
44133: MINUS
44134: PUSH
44135: LD_INT 0
44137: LESS
44138: IFFALSE 44150
// min_x := 0 else
44140: LD_ADDR_VAR 0 8
44144: PUSH
44145: LD_INT 0
44147: ST_TO_ADDR
44148: GO 44166
// min_x := x - r ;
44150: LD_ADDR_VAR 0 8
44154: PUSH
44155: LD_VAR 0 1
44159: PUSH
44160: LD_VAR 0 3
44164: MINUS
44165: ST_TO_ADDR
// if y - r < 0 then
44166: LD_VAR 0 2
44170: PUSH
44171: LD_VAR 0 3
44175: MINUS
44176: PUSH
44177: LD_INT 0
44179: LESS
44180: IFFALSE 44192
// min_y := 0 else
44182: LD_ADDR_VAR 0 7
44186: PUSH
44187: LD_INT 0
44189: ST_TO_ADDR
44190: GO 44208
// min_y := y - r ;
44192: LD_ADDR_VAR 0 7
44196: PUSH
44197: LD_VAR 0 2
44201: PUSH
44202: LD_VAR 0 3
44206: MINUS
44207: ST_TO_ADDR
// max_x := x + r ;
44208: LD_ADDR_VAR 0 9
44212: PUSH
44213: LD_VAR 0 1
44217: PUSH
44218: LD_VAR 0 3
44222: PLUS
44223: ST_TO_ADDR
// max_y := y + r ;
44224: LD_ADDR_VAR 0 10
44228: PUSH
44229: LD_VAR 0 2
44233: PUSH
44234: LD_VAR 0 3
44238: PLUS
44239: ST_TO_ADDR
// for _x = min_x to max_x do
44240: LD_ADDR_VAR 0 5
44244: PUSH
44245: DOUBLE
44246: LD_VAR 0 8
44250: DEC
44251: ST_TO_ADDR
44252: LD_VAR 0 9
44256: PUSH
44257: FOR_TO
44258: IFFALSE 44359
// for _y = min_y to max_y do
44260: LD_ADDR_VAR 0 6
44264: PUSH
44265: DOUBLE
44266: LD_VAR 0 7
44270: DEC
44271: ST_TO_ADDR
44272: LD_VAR 0 10
44276: PUSH
44277: FOR_TO
44278: IFFALSE 44355
// begin if not ValidHex ( _x , _y ) then
44280: LD_VAR 0 5
44284: PPUSH
44285: LD_VAR 0 6
44289: PPUSH
44290: CALL_OW 488
44294: NOT
44295: IFFALSE 44299
// continue ;
44297: GO 44277
// if GetResourceTypeXY ( _x , _y ) then
44299: LD_VAR 0 5
44303: PPUSH
44304: LD_VAR 0 6
44308: PPUSH
44309: CALL_OW 283
44313: IFFALSE 44353
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44315: LD_ADDR_VAR 0 4
44319: PUSH
44320: LD_VAR 0 4
44324: PPUSH
44325: LD_VAR 0 4
44329: PUSH
44330: LD_INT 1
44332: PLUS
44333: PPUSH
44334: LD_VAR 0 5
44338: PUSH
44339: LD_VAR 0 6
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PPUSH
44348: CALL_OW 1
44352: ST_TO_ADDR
// end ;
44353: GO 44277
44355: POP
44356: POP
44357: GO 44257
44359: POP
44360: POP
// end ;
44361: LD_VAR 0 4
44365: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44366: LD_INT 0
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
// if not units then
44376: LD_VAR 0 1
44380: NOT
44381: IFFALSE 44385
// exit ;
44383: GO 44911
// result := UnitFilter ( units , [ f_ok ] ) ;
44385: LD_ADDR_VAR 0 3
44389: PUSH
44390: LD_VAR 0 1
44394: PPUSH
44395: LD_INT 50
44397: PUSH
44398: EMPTY
44399: LIST
44400: PPUSH
44401: CALL_OW 72
44405: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44406: LD_ADDR_VAR 0 8
44410: PUSH
44411: LD_VAR 0 1
44415: PUSH
44416: LD_INT 1
44418: ARRAY
44419: PPUSH
44420: CALL_OW 255
44424: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44425: LD_ADDR_VAR 0 10
44429: PUSH
44430: LD_INT 29
44432: PUSH
44433: LD_EXP 35
44437: PUSH
44438: LD_INT 49
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: ST_TO_ADDR
// if not result then
44446: LD_VAR 0 3
44450: NOT
44451: IFFALSE 44455
// exit ;
44453: GO 44911
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44455: LD_ADDR_VAR 0 5
44459: PUSH
44460: LD_INT 81
44462: PUSH
44463: LD_VAR 0 8
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PPUSH
44472: CALL_OW 69
44476: ST_TO_ADDR
// for i in result do
44477: LD_ADDR_VAR 0 4
44481: PUSH
44482: LD_VAR 0 3
44486: PUSH
44487: FOR_IN
44488: IFFALSE 44909
// begin tag := GetTag ( i ) + 1 ;
44490: LD_ADDR_VAR 0 9
44494: PUSH
44495: LD_VAR 0 4
44499: PPUSH
44500: CALL_OW 110
44504: PUSH
44505: LD_INT 1
44507: PLUS
44508: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
44509: LD_ADDR_VAR 0 7
44513: PUSH
44514: LD_VAR 0 4
44518: PPUSH
44519: CALL_OW 250
44523: PPUSH
44524: LD_VAR 0 4
44528: PPUSH
44529: CALL_OW 251
44533: PPUSH
44534: LD_INT 6
44536: PPUSH
44537: CALL 44108 0 3
44541: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
44542: LD_VAR 0 4
44546: PPUSH
44547: CALL_OW 247
44551: PUSH
44552: LD_INT 2
44554: EQUAL
44555: PUSH
44556: LD_VAR 0 7
44560: AND
44561: PUSH
44562: LD_VAR 0 4
44566: PPUSH
44567: CALL_OW 264
44571: PUSH
44572: LD_VAR 0 10
44576: IN
44577: NOT
44578: AND
44579: IFFALSE 44618
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44581: LD_VAR 0 4
44585: PPUSH
44586: LD_VAR 0 7
44590: PUSH
44591: LD_INT 1
44593: ARRAY
44594: PUSH
44595: LD_INT 1
44597: ARRAY
44598: PPUSH
44599: LD_VAR 0 7
44603: PUSH
44604: LD_INT 1
44606: ARRAY
44607: PUSH
44608: LD_INT 2
44610: ARRAY
44611: PPUSH
44612: CALL_OW 116
44616: GO 44907
// if path > tag then
44618: LD_VAR 0 2
44622: PUSH
44623: LD_VAR 0 9
44627: GREATER
44628: IFFALSE 44836
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44630: LD_ADDR_VAR 0 6
44634: PUSH
44635: LD_VAR 0 5
44639: PPUSH
44640: LD_INT 91
44642: PUSH
44643: LD_VAR 0 4
44647: PUSH
44648: LD_INT 8
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: PPUSH
44656: CALL_OW 72
44660: ST_TO_ADDR
// if nearEnemy then
44661: LD_VAR 0 6
44665: IFFALSE 44734
// begin if GetWeapon ( i ) = ru_time_lapser then
44667: LD_VAR 0 4
44671: PPUSH
44672: CALL_OW 264
44676: PUSH
44677: LD_INT 49
44679: EQUAL
44680: IFFALSE 44708
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44682: LD_VAR 0 4
44686: PPUSH
44687: LD_VAR 0 6
44691: PPUSH
44692: LD_VAR 0 4
44696: PPUSH
44697: CALL_OW 74
44701: PPUSH
44702: CALL_OW 112
44706: GO 44732
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44708: LD_VAR 0 4
44712: PPUSH
44713: LD_VAR 0 6
44717: PPUSH
44718: LD_VAR 0 4
44722: PPUSH
44723: CALL_OW 74
44727: PPUSH
44728: CALL_OW 115
// end else
44732: GO 44834
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44734: LD_VAR 0 4
44738: PPUSH
44739: LD_VAR 0 2
44743: PUSH
44744: LD_VAR 0 9
44748: ARRAY
44749: PUSH
44750: LD_INT 1
44752: ARRAY
44753: PPUSH
44754: LD_VAR 0 2
44758: PUSH
44759: LD_VAR 0 9
44763: ARRAY
44764: PUSH
44765: LD_INT 2
44767: ARRAY
44768: PPUSH
44769: CALL_OW 297
44773: PUSH
44774: LD_INT 6
44776: GREATER
44777: IFFALSE 44820
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44779: LD_VAR 0 4
44783: PPUSH
44784: LD_VAR 0 2
44788: PUSH
44789: LD_VAR 0 9
44793: ARRAY
44794: PUSH
44795: LD_INT 1
44797: ARRAY
44798: PPUSH
44799: LD_VAR 0 2
44803: PUSH
44804: LD_VAR 0 9
44808: ARRAY
44809: PUSH
44810: LD_INT 2
44812: ARRAY
44813: PPUSH
44814: CALL_OW 114
44818: GO 44834
// SetTag ( i , tag ) ;
44820: LD_VAR 0 4
44824: PPUSH
44825: LD_VAR 0 9
44829: PPUSH
44830: CALL_OW 109
// end else
44834: GO 44907
// if enemy then
44836: LD_VAR 0 5
44840: IFFALSE 44907
// begin if GetWeapon ( i ) = ru_time_lapser then
44842: LD_VAR 0 4
44846: PPUSH
44847: CALL_OW 264
44851: PUSH
44852: LD_INT 49
44854: EQUAL
44855: IFFALSE 44883
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44857: LD_VAR 0 4
44861: PPUSH
44862: LD_VAR 0 5
44866: PPUSH
44867: LD_VAR 0 4
44871: PPUSH
44872: CALL_OW 74
44876: PPUSH
44877: CALL_OW 112
44881: GO 44907
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44883: LD_VAR 0 4
44887: PPUSH
44888: LD_VAR 0 5
44892: PPUSH
44893: LD_VAR 0 4
44897: PPUSH
44898: CALL_OW 74
44902: PPUSH
44903: CALL_OW 115
// end ; end ;
44907: GO 44487
44909: POP
44910: POP
// end ;
44911: LD_VAR 0 3
44915: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44916: LD_INT 0
44918: PPUSH
44919: PPUSH
44920: PPUSH
// if not unit or IsInUnit ( unit ) then
44921: LD_VAR 0 1
44925: NOT
44926: PUSH
44927: LD_VAR 0 1
44931: PPUSH
44932: CALL_OW 310
44936: OR
44937: IFFALSE 44941
// exit ;
44939: GO 45032
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44941: LD_ADDR_VAR 0 4
44945: PUSH
44946: LD_VAR 0 1
44950: PPUSH
44951: CALL_OW 250
44955: PPUSH
44956: LD_VAR 0 2
44960: PPUSH
44961: LD_INT 1
44963: PPUSH
44964: CALL_OW 272
44968: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44969: LD_ADDR_VAR 0 5
44973: PUSH
44974: LD_VAR 0 1
44978: PPUSH
44979: CALL_OW 251
44983: PPUSH
44984: LD_VAR 0 2
44988: PPUSH
44989: LD_INT 1
44991: PPUSH
44992: CALL_OW 273
44996: ST_TO_ADDR
// if ValidHex ( x , y ) then
44997: LD_VAR 0 4
45001: PPUSH
45002: LD_VAR 0 5
45006: PPUSH
45007: CALL_OW 488
45011: IFFALSE 45032
// ComTurnXY ( unit , x , y ) ;
45013: LD_VAR 0 1
45017: PPUSH
45018: LD_VAR 0 4
45022: PPUSH
45023: LD_VAR 0 5
45027: PPUSH
45028: CALL_OW 118
// end ;
45032: LD_VAR 0 3
45036: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45037: LD_INT 0
45039: PPUSH
45040: PPUSH
// result := false ;
45041: LD_ADDR_VAR 0 3
45045: PUSH
45046: LD_INT 0
45048: ST_TO_ADDR
// if not units then
45049: LD_VAR 0 2
45053: NOT
45054: IFFALSE 45058
// exit ;
45056: GO 45103
// for i in units do
45058: LD_ADDR_VAR 0 4
45062: PUSH
45063: LD_VAR 0 2
45067: PUSH
45068: FOR_IN
45069: IFFALSE 45101
// if See ( side , i ) then
45071: LD_VAR 0 1
45075: PPUSH
45076: LD_VAR 0 4
45080: PPUSH
45081: CALL_OW 292
45085: IFFALSE 45099
// begin result := true ;
45087: LD_ADDR_VAR 0 3
45091: PUSH
45092: LD_INT 1
45094: ST_TO_ADDR
// exit ;
45095: POP
45096: POP
45097: GO 45103
// end ;
45099: GO 45068
45101: POP
45102: POP
// end ;
45103: LD_VAR 0 3
45107: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45108: LD_INT 0
45110: PPUSH
45111: PPUSH
45112: PPUSH
45113: PPUSH
// if not unit or not points then
45114: LD_VAR 0 1
45118: NOT
45119: PUSH
45120: LD_VAR 0 2
45124: NOT
45125: OR
45126: IFFALSE 45130
// exit ;
45128: GO 45220
// dist := 99999 ;
45130: LD_ADDR_VAR 0 5
45134: PUSH
45135: LD_INT 99999
45137: ST_TO_ADDR
// for i in points do
45138: LD_ADDR_VAR 0 4
45142: PUSH
45143: LD_VAR 0 2
45147: PUSH
45148: FOR_IN
45149: IFFALSE 45218
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45151: LD_ADDR_VAR 0 6
45155: PUSH
45156: LD_VAR 0 1
45160: PPUSH
45161: LD_VAR 0 4
45165: PUSH
45166: LD_INT 1
45168: ARRAY
45169: PPUSH
45170: LD_VAR 0 4
45174: PUSH
45175: LD_INT 2
45177: ARRAY
45178: PPUSH
45179: CALL_OW 297
45183: ST_TO_ADDR
// if tmpDist < dist then
45184: LD_VAR 0 6
45188: PUSH
45189: LD_VAR 0 5
45193: LESS
45194: IFFALSE 45216
// begin result := i ;
45196: LD_ADDR_VAR 0 3
45200: PUSH
45201: LD_VAR 0 4
45205: ST_TO_ADDR
// dist := tmpDist ;
45206: LD_ADDR_VAR 0 5
45210: PUSH
45211: LD_VAR 0 6
45215: ST_TO_ADDR
// end ; end ;
45216: GO 45148
45218: POP
45219: POP
// end ;
45220: LD_VAR 0 3
45224: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45225: LD_INT 0
45227: PPUSH
// uc_side := side ;
45228: LD_ADDR_OWVAR 20
45232: PUSH
45233: LD_VAR 0 1
45237: ST_TO_ADDR
// uc_nation := 3 ;
45238: LD_ADDR_OWVAR 21
45242: PUSH
45243: LD_INT 3
45245: ST_TO_ADDR
// vc_chassis := 25 ;
45246: LD_ADDR_OWVAR 37
45250: PUSH
45251: LD_INT 25
45253: ST_TO_ADDR
// vc_engine := engine_siberite ;
45254: LD_ADDR_OWVAR 39
45258: PUSH
45259: LD_INT 3
45261: ST_TO_ADDR
// vc_control := control_computer ;
45262: LD_ADDR_OWVAR 38
45266: PUSH
45267: LD_INT 3
45269: ST_TO_ADDR
// vc_weapon := 59 ;
45270: LD_ADDR_OWVAR 40
45274: PUSH
45275: LD_INT 59
45277: ST_TO_ADDR
// result := CreateVehicle ;
45278: LD_ADDR_VAR 0 5
45282: PUSH
45283: CALL_OW 45
45287: ST_TO_ADDR
// SetDir ( result , d ) ;
45288: LD_VAR 0 5
45292: PPUSH
45293: LD_VAR 0 4
45297: PPUSH
45298: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45302: LD_VAR 0 5
45306: PPUSH
45307: LD_VAR 0 2
45311: PPUSH
45312: LD_VAR 0 3
45316: PPUSH
45317: LD_INT 0
45319: PPUSH
45320: CALL_OW 48
// end ;
45324: LD_VAR 0 5
45328: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45329: LD_INT 0
45331: PPUSH
45332: PPUSH
45333: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45334: LD_ADDR_VAR 0 2
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45357: LD_VAR 0 1
45361: NOT
45362: PUSH
45363: LD_VAR 0 1
45367: PPUSH
45368: CALL_OW 264
45372: PUSH
45373: LD_INT 12
45375: PUSH
45376: LD_INT 51
45378: PUSH
45379: LD_INT 32
45381: PUSH
45382: LD_EXP 32
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: IN
45393: NOT
45394: OR
45395: IFFALSE 45399
// exit ;
45397: GO 45497
// for i := 1 to 3 do
45399: LD_ADDR_VAR 0 3
45403: PUSH
45404: DOUBLE
45405: LD_INT 1
45407: DEC
45408: ST_TO_ADDR
45409: LD_INT 3
45411: PUSH
45412: FOR_TO
45413: IFFALSE 45495
// begin tmp := GetCargo ( cargo , i ) ;
45415: LD_ADDR_VAR 0 4
45419: PUSH
45420: LD_VAR 0 1
45424: PPUSH
45425: LD_VAR 0 3
45429: PPUSH
45430: CALL_OW 289
45434: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45435: LD_ADDR_VAR 0 2
45439: PUSH
45440: LD_VAR 0 2
45444: PPUSH
45445: LD_VAR 0 3
45449: PPUSH
45450: LD_VAR 0 4
45454: PPUSH
45455: CALL_OW 1
45459: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45460: LD_ADDR_VAR 0 2
45464: PUSH
45465: LD_VAR 0 2
45469: PPUSH
45470: LD_INT 4
45472: PPUSH
45473: LD_VAR 0 2
45477: PUSH
45478: LD_INT 4
45480: ARRAY
45481: PUSH
45482: LD_VAR 0 4
45486: PLUS
45487: PPUSH
45488: CALL_OW 1
45492: ST_TO_ADDR
// end ;
45493: GO 45412
45495: POP
45496: POP
// end ;
45497: LD_VAR 0 2
45501: RET
// export function Length ( array ) ; begin
45502: LD_INT 0
45504: PPUSH
// result := array + 0 ;
45505: LD_ADDR_VAR 0 2
45509: PUSH
45510: LD_VAR 0 1
45514: PUSH
45515: LD_INT 0
45517: PLUS
45518: ST_TO_ADDR
// end ;
45519: LD_VAR 0 2
45523: RET
// export function PrepareArray ( array ) ; begin
45524: LD_INT 0
45526: PPUSH
// result := array diff 0 ;
45527: LD_ADDR_VAR 0 2
45531: PUSH
45532: LD_VAR 0 1
45536: PUSH
45537: LD_INT 0
45539: DIFF
45540: ST_TO_ADDR
// if not result [ 1 ] then
45541: LD_VAR 0 2
45545: PUSH
45546: LD_INT 1
45548: ARRAY
45549: NOT
45550: IFFALSE 45570
// result := Delete ( result , 1 ) ;
45552: LD_ADDR_VAR 0 2
45556: PUSH
45557: LD_VAR 0 2
45561: PPUSH
45562: LD_INT 1
45564: PPUSH
45565: CALL_OW 3
45569: ST_TO_ADDR
// end ; end_of_file
45570: LD_VAR 0 2
45574: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
45575: LD_INT 0
45577: PPUSH
// ar_miner := 81 ;
45578: LD_ADDR_EXP 38
45582: PUSH
45583: LD_INT 81
45585: ST_TO_ADDR
// ar_crane := 88 ;
45586: LD_ADDR_EXP 37
45590: PUSH
45591: LD_INT 88
45593: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
45594: LD_ADDR_EXP 32
45598: PUSH
45599: LD_INT 89
45601: ST_TO_ADDR
// us_hack := 99 ;
45602: LD_ADDR_EXP 33
45606: PUSH
45607: LD_INT 99
45609: ST_TO_ADDR
// us_artillery := 97 ;
45610: LD_ADDR_EXP 34
45614: PUSH
45615: LD_INT 97
45617: ST_TO_ADDR
// ar_bio_bomb := 91 ;
45618: LD_ADDR_EXP 35
45622: PUSH
45623: LD_INT 91
45625: ST_TO_ADDR
// ar_mortar := 92 ;
45626: LD_ADDR_EXP 36
45630: PUSH
45631: LD_INT 92
45633: ST_TO_ADDR
// ru_flamethrower := 93 ;
45634: LD_ADDR_EXP 39
45638: PUSH
45639: LD_INT 93
45641: ST_TO_ADDR
// ru_radar := 98 ;
45642: LD_ADDR_EXP 31
45646: PUSH
45647: LD_INT 98
45649: ST_TO_ADDR
// tech_Artillery := 80 ;
45650: LD_ADDR_EXP 40
45654: PUSH
45655: LD_INT 80
45657: ST_TO_ADDR
// tech_RadMat := 81 ;
45658: LD_ADDR_EXP 41
45662: PUSH
45663: LD_INT 81
45665: ST_TO_ADDR
// tech_BasicTools := 82 ;
45666: LD_ADDR_EXP 42
45670: PUSH
45671: LD_INT 82
45673: ST_TO_ADDR
// tech_Cargo := 83 ;
45674: LD_ADDR_EXP 43
45678: PUSH
45679: LD_INT 83
45681: ST_TO_ADDR
// tech_Track := 84 ;
45682: LD_ADDR_EXP 44
45686: PUSH
45687: LD_INT 84
45689: ST_TO_ADDR
// tech_Crane := 85 ;
45690: LD_ADDR_EXP 45
45694: PUSH
45695: LD_INT 85
45697: ST_TO_ADDR
// tech_Bulldozer := 86 ;
45698: LD_ADDR_EXP 46
45702: PUSH
45703: LD_INT 86
45705: ST_TO_ADDR
// tech_Hovercraft := 87 ;
45706: LD_ADDR_EXP 47
45710: PUSH
45711: LD_INT 87
45713: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
45714: LD_ADDR_EXP 48
45718: PUSH
45719: LD_INT 88
45721: ST_TO_ADDR
// end ;
45722: LD_VAR 0 1
45726: RET
// every 1 do
45727: GO 45729
45729: DISABLE
// InitGlobalVariables ; end_of_file
45730: CALL 45575 0 0
45734: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
45735: LD_VAR 0 1
45739: PPUSH
45740: LD_VAR 0 2
45744: PPUSH
45745: LD_VAR 0 3
45749: PPUSH
45750: LD_VAR 0 4
45754: PPUSH
45755: LD_VAR 0 5
45759: PPUSH
45760: LD_VAR 0 6
45764: PPUSH
45765: CALL 45845 0 6
// end ;
45769: PPOPN 6
45771: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
45772: LD_INT 0
45774: PPUSH
// begin if not units then
45775: LD_VAR 0 1
45779: NOT
45780: IFFALSE 45784
// exit ;
45782: GO 45784
// end ;
45784: PPOPN 7
45786: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
45787: CALL 45816 0 0
// end ; end_of_file
45791: PPOPN 1
45793: END
// every 0 0$1 do
45794: GO 45796
45796: DISABLE
// begin enable ;
45797: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45798: LD_STRING updateTimer(
45800: PUSH
45801: LD_OWVAR 1
45805: STR
45806: PUSH
45807: LD_STRING );
45809: STR
45810: PPUSH
45811: CALL_OW 559
// end ;
45815: END
// export function SOS_MapStart ( ) ; begin
45816: LD_INT 0
45818: PPUSH
// if streamModeActive then
45819: LD_EXP 49
45823: IFFALSE 45832
// DefineStreamItems ( true ) ;
45825: LD_INT 1
45827: PPUSH
45828: CALL 47486 0 1
// UpdateFactoryWaypoints ( ) ;
45832: CALL 60347 0 0
// UpdateWarehouseGatheringPoints ( ) ;
45836: CALL 60604 0 0
// end ;
45840: LD_VAR 0 1
45844: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
45845: LD_INT 0
45847: PPUSH
// if p2 = 100 then
45848: LD_VAR 0 2
45852: PUSH
45853: LD_INT 100
45855: EQUAL
45856: IFFALSE 46859
// begin if not StreamModeActive then
45858: LD_EXP 49
45862: NOT
45863: IFFALSE 45873
// StreamModeActive := true ;
45865: LD_ADDR_EXP 49
45869: PUSH
45870: LD_INT 1
45872: ST_TO_ADDR
// if p3 = 0 then
45873: LD_VAR 0 3
45877: PUSH
45878: LD_INT 0
45880: EQUAL
45881: IFFALSE 45887
// InitStreamMode ;
45883: CALL 47022 0 0
// if p3 = 1 then
45887: LD_VAR 0 3
45891: PUSH
45892: LD_INT 1
45894: EQUAL
45895: IFFALSE 45905
// sRocket := true ;
45897: LD_ADDR_EXP 54
45901: PUSH
45902: LD_INT 1
45904: ST_TO_ADDR
// if p3 = 2 then
45905: LD_VAR 0 3
45909: PUSH
45910: LD_INT 2
45912: EQUAL
45913: IFFALSE 45923
// sSpeed := true ;
45915: LD_ADDR_EXP 53
45919: PUSH
45920: LD_INT 1
45922: ST_TO_ADDR
// if p3 = 3 then
45923: LD_VAR 0 3
45927: PUSH
45928: LD_INT 3
45930: EQUAL
45931: IFFALSE 45941
// sEngine := true ;
45933: LD_ADDR_EXP 55
45937: PUSH
45938: LD_INT 1
45940: ST_TO_ADDR
// if p3 = 4 then
45941: LD_VAR 0 3
45945: PUSH
45946: LD_INT 4
45948: EQUAL
45949: IFFALSE 45959
// sSpec := true ;
45951: LD_ADDR_EXP 52
45955: PUSH
45956: LD_INT 1
45958: ST_TO_ADDR
// if p3 = 5 then
45959: LD_VAR 0 3
45963: PUSH
45964: LD_INT 5
45966: EQUAL
45967: IFFALSE 45977
// sLevel := true ;
45969: LD_ADDR_EXP 56
45973: PUSH
45974: LD_INT 1
45976: ST_TO_ADDR
// if p3 = 6 then
45977: LD_VAR 0 3
45981: PUSH
45982: LD_INT 6
45984: EQUAL
45985: IFFALSE 45995
// sArmoury := true ;
45987: LD_ADDR_EXP 57
45991: PUSH
45992: LD_INT 1
45994: ST_TO_ADDR
// if p3 = 7 then
45995: LD_VAR 0 3
45999: PUSH
46000: LD_INT 7
46002: EQUAL
46003: IFFALSE 46013
// sRadar := true ;
46005: LD_ADDR_EXP 58
46009: PUSH
46010: LD_INT 1
46012: ST_TO_ADDR
// if p3 = 8 then
46013: LD_VAR 0 3
46017: PUSH
46018: LD_INT 8
46020: EQUAL
46021: IFFALSE 46031
// sBunker := true ;
46023: LD_ADDR_EXP 59
46027: PUSH
46028: LD_INT 1
46030: ST_TO_ADDR
// if p3 = 9 then
46031: LD_VAR 0 3
46035: PUSH
46036: LD_INT 9
46038: EQUAL
46039: IFFALSE 46049
// sHack := true ;
46041: LD_ADDR_EXP 60
46045: PUSH
46046: LD_INT 1
46048: ST_TO_ADDR
// if p3 = 10 then
46049: LD_VAR 0 3
46053: PUSH
46054: LD_INT 10
46056: EQUAL
46057: IFFALSE 46067
// sFire := true ;
46059: LD_ADDR_EXP 61
46063: PUSH
46064: LD_INT 1
46066: ST_TO_ADDR
// if p3 = 11 then
46067: LD_VAR 0 3
46071: PUSH
46072: LD_INT 11
46074: EQUAL
46075: IFFALSE 46085
// sRefresh := true ;
46077: LD_ADDR_EXP 62
46081: PUSH
46082: LD_INT 1
46084: ST_TO_ADDR
// if p3 = 12 then
46085: LD_VAR 0 3
46089: PUSH
46090: LD_INT 12
46092: EQUAL
46093: IFFALSE 46103
// sExp := true ;
46095: LD_ADDR_EXP 63
46099: PUSH
46100: LD_INT 1
46102: ST_TO_ADDR
// if p3 = 13 then
46103: LD_VAR 0 3
46107: PUSH
46108: LD_INT 13
46110: EQUAL
46111: IFFALSE 46121
// sDepot := true ;
46113: LD_ADDR_EXP 64
46117: PUSH
46118: LD_INT 1
46120: ST_TO_ADDR
// if p3 = 14 then
46121: LD_VAR 0 3
46125: PUSH
46126: LD_INT 14
46128: EQUAL
46129: IFFALSE 46139
// sFlag := true ;
46131: LD_ADDR_EXP 65
46135: PUSH
46136: LD_INT 1
46138: ST_TO_ADDR
// if p3 = 15 then
46139: LD_VAR 0 3
46143: PUSH
46144: LD_INT 15
46146: EQUAL
46147: IFFALSE 46157
// sKamikadze := true ;
46149: LD_ADDR_EXP 73
46153: PUSH
46154: LD_INT 1
46156: ST_TO_ADDR
// if p3 = 16 then
46157: LD_VAR 0 3
46161: PUSH
46162: LD_INT 16
46164: EQUAL
46165: IFFALSE 46175
// sTroll := true ;
46167: LD_ADDR_EXP 74
46171: PUSH
46172: LD_INT 1
46174: ST_TO_ADDR
// if p3 = 17 then
46175: LD_VAR 0 3
46179: PUSH
46180: LD_INT 17
46182: EQUAL
46183: IFFALSE 46193
// sSlow := true ;
46185: LD_ADDR_EXP 75
46189: PUSH
46190: LD_INT 1
46192: ST_TO_ADDR
// if p3 = 18 then
46193: LD_VAR 0 3
46197: PUSH
46198: LD_INT 18
46200: EQUAL
46201: IFFALSE 46211
// sLack := true ;
46203: LD_ADDR_EXP 76
46207: PUSH
46208: LD_INT 1
46210: ST_TO_ADDR
// if p3 = 19 then
46211: LD_VAR 0 3
46215: PUSH
46216: LD_INT 19
46218: EQUAL
46219: IFFALSE 46229
// sTank := true ;
46221: LD_ADDR_EXP 78
46225: PUSH
46226: LD_INT 1
46228: ST_TO_ADDR
// if p3 = 20 then
46229: LD_VAR 0 3
46233: PUSH
46234: LD_INT 20
46236: EQUAL
46237: IFFALSE 46247
// sRemote := true ;
46239: LD_ADDR_EXP 79
46243: PUSH
46244: LD_INT 1
46246: ST_TO_ADDR
// if p3 = 21 then
46247: LD_VAR 0 3
46251: PUSH
46252: LD_INT 21
46254: EQUAL
46255: IFFALSE 46265
// sPowell := true ;
46257: LD_ADDR_EXP 80
46261: PUSH
46262: LD_INT 1
46264: ST_TO_ADDR
// if p3 = 22 then
46265: LD_VAR 0 3
46269: PUSH
46270: LD_INT 22
46272: EQUAL
46273: IFFALSE 46283
// sTeleport := true ;
46275: LD_ADDR_EXP 83
46279: PUSH
46280: LD_INT 1
46282: ST_TO_ADDR
// if p3 = 23 then
46283: LD_VAR 0 3
46287: PUSH
46288: LD_INT 23
46290: EQUAL
46291: IFFALSE 46301
// sOilTower := true ;
46293: LD_ADDR_EXP 85
46297: PUSH
46298: LD_INT 1
46300: ST_TO_ADDR
// if p3 = 24 then
46301: LD_VAR 0 3
46305: PUSH
46306: LD_INT 24
46308: EQUAL
46309: IFFALSE 46319
// sShovel := true ;
46311: LD_ADDR_EXP 86
46315: PUSH
46316: LD_INT 1
46318: ST_TO_ADDR
// if p3 = 25 then
46319: LD_VAR 0 3
46323: PUSH
46324: LD_INT 25
46326: EQUAL
46327: IFFALSE 46337
// sSheik := true ;
46329: LD_ADDR_EXP 87
46333: PUSH
46334: LD_INT 1
46336: ST_TO_ADDR
// if p3 = 26 then
46337: LD_VAR 0 3
46341: PUSH
46342: LD_INT 26
46344: EQUAL
46345: IFFALSE 46355
// sEarthquake := true ;
46347: LD_ADDR_EXP 89
46351: PUSH
46352: LD_INT 1
46354: ST_TO_ADDR
// if p3 = 27 then
46355: LD_VAR 0 3
46359: PUSH
46360: LD_INT 27
46362: EQUAL
46363: IFFALSE 46373
// sAI := true ;
46365: LD_ADDR_EXP 90
46369: PUSH
46370: LD_INT 1
46372: ST_TO_ADDR
// if p3 = 28 then
46373: LD_VAR 0 3
46377: PUSH
46378: LD_INT 28
46380: EQUAL
46381: IFFALSE 46391
// sCargo := true ;
46383: LD_ADDR_EXP 93
46387: PUSH
46388: LD_INT 1
46390: ST_TO_ADDR
// if p3 = 29 then
46391: LD_VAR 0 3
46395: PUSH
46396: LD_INT 29
46398: EQUAL
46399: IFFALSE 46409
// sDLaser := true ;
46401: LD_ADDR_EXP 94
46405: PUSH
46406: LD_INT 1
46408: ST_TO_ADDR
// if p3 = 30 then
46409: LD_VAR 0 3
46413: PUSH
46414: LD_INT 30
46416: EQUAL
46417: IFFALSE 46427
// sExchange := true ;
46419: LD_ADDR_EXP 95
46423: PUSH
46424: LD_INT 1
46426: ST_TO_ADDR
// if p3 = 31 then
46427: LD_VAR 0 3
46431: PUSH
46432: LD_INT 31
46434: EQUAL
46435: IFFALSE 46445
// sFac := true ;
46437: LD_ADDR_EXP 96
46441: PUSH
46442: LD_INT 1
46444: ST_TO_ADDR
// if p3 = 32 then
46445: LD_VAR 0 3
46449: PUSH
46450: LD_INT 32
46452: EQUAL
46453: IFFALSE 46463
// sPower := true ;
46455: LD_ADDR_EXP 97
46459: PUSH
46460: LD_INT 1
46462: ST_TO_ADDR
// if p3 = 33 then
46463: LD_VAR 0 3
46467: PUSH
46468: LD_INT 33
46470: EQUAL
46471: IFFALSE 46481
// sRandom := true ;
46473: LD_ADDR_EXP 98
46477: PUSH
46478: LD_INT 1
46480: ST_TO_ADDR
// if p3 = 34 then
46481: LD_VAR 0 3
46485: PUSH
46486: LD_INT 34
46488: EQUAL
46489: IFFALSE 46499
// sShield := true ;
46491: LD_ADDR_EXP 99
46495: PUSH
46496: LD_INT 1
46498: ST_TO_ADDR
// if p3 = 35 then
46499: LD_VAR 0 3
46503: PUSH
46504: LD_INT 35
46506: EQUAL
46507: IFFALSE 46517
// sTime := true ;
46509: LD_ADDR_EXP 100
46513: PUSH
46514: LD_INT 1
46516: ST_TO_ADDR
// if p3 = 36 then
46517: LD_VAR 0 3
46521: PUSH
46522: LD_INT 36
46524: EQUAL
46525: IFFALSE 46535
// sTools := true ;
46527: LD_ADDR_EXP 101
46531: PUSH
46532: LD_INT 1
46534: ST_TO_ADDR
// if p3 = 101 then
46535: LD_VAR 0 3
46539: PUSH
46540: LD_INT 101
46542: EQUAL
46543: IFFALSE 46553
// sSold := true ;
46545: LD_ADDR_EXP 66
46549: PUSH
46550: LD_INT 1
46552: ST_TO_ADDR
// if p3 = 102 then
46553: LD_VAR 0 3
46557: PUSH
46558: LD_INT 102
46560: EQUAL
46561: IFFALSE 46571
// sDiff := true ;
46563: LD_ADDR_EXP 67
46567: PUSH
46568: LD_INT 1
46570: ST_TO_ADDR
// if p3 = 103 then
46571: LD_VAR 0 3
46575: PUSH
46576: LD_INT 103
46578: EQUAL
46579: IFFALSE 46589
// sFog := true ;
46581: LD_ADDR_EXP 70
46585: PUSH
46586: LD_INT 1
46588: ST_TO_ADDR
// if p3 = 104 then
46589: LD_VAR 0 3
46593: PUSH
46594: LD_INT 104
46596: EQUAL
46597: IFFALSE 46607
// sReset := true ;
46599: LD_ADDR_EXP 71
46603: PUSH
46604: LD_INT 1
46606: ST_TO_ADDR
// if p3 = 105 then
46607: LD_VAR 0 3
46611: PUSH
46612: LD_INT 105
46614: EQUAL
46615: IFFALSE 46625
// sSun := true ;
46617: LD_ADDR_EXP 72
46621: PUSH
46622: LD_INT 1
46624: ST_TO_ADDR
// if p3 = 106 then
46625: LD_VAR 0 3
46629: PUSH
46630: LD_INT 106
46632: EQUAL
46633: IFFALSE 46643
// sTiger := true ;
46635: LD_ADDR_EXP 68
46639: PUSH
46640: LD_INT 1
46642: ST_TO_ADDR
// if p3 = 107 then
46643: LD_VAR 0 3
46647: PUSH
46648: LD_INT 107
46650: EQUAL
46651: IFFALSE 46661
// sBomb := true ;
46653: LD_ADDR_EXP 69
46657: PUSH
46658: LD_INT 1
46660: ST_TO_ADDR
// if p3 = 108 then
46661: LD_VAR 0 3
46665: PUSH
46666: LD_INT 108
46668: EQUAL
46669: IFFALSE 46679
// sWound := true ;
46671: LD_ADDR_EXP 77
46675: PUSH
46676: LD_INT 1
46678: ST_TO_ADDR
// if p3 = 109 then
46679: LD_VAR 0 3
46683: PUSH
46684: LD_INT 109
46686: EQUAL
46687: IFFALSE 46697
// sBetray := true ;
46689: LD_ADDR_EXP 81
46693: PUSH
46694: LD_INT 1
46696: ST_TO_ADDR
// if p3 = 110 then
46697: LD_VAR 0 3
46701: PUSH
46702: LD_INT 110
46704: EQUAL
46705: IFFALSE 46715
// sContamin := true ;
46707: LD_ADDR_EXP 82
46711: PUSH
46712: LD_INT 1
46714: ST_TO_ADDR
// if p3 = 111 then
46715: LD_VAR 0 3
46719: PUSH
46720: LD_INT 111
46722: EQUAL
46723: IFFALSE 46733
// sOil := true ;
46725: LD_ADDR_EXP 84
46729: PUSH
46730: LD_INT 1
46732: ST_TO_ADDR
// if p3 = 112 then
46733: LD_VAR 0 3
46737: PUSH
46738: LD_INT 112
46740: EQUAL
46741: IFFALSE 46751
// sStu := true ;
46743: LD_ADDR_EXP 88
46747: PUSH
46748: LD_INT 1
46750: ST_TO_ADDR
// if p3 = 113 then
46751: LD_VAR 0 3
46755: PUSH
46756: LD_INT 113
46758: EQUAL
46759: IFFALSE 46769
// sBazooka := true ;
46761: LD_ADDR_EXP 91
46765: PUSH
46766: LD_INT 1
46768: ST_TO_ADDR
// if p3 = 114 then
46769: LD_VAR 0 3
46773: PUSH
46774: LD_INT 114
46776: EQUAL
46777: IFFALSE 46787
// sMortar := true ;
46779: LD_ADDR_EXP 92
46783: PUSH
46784: LD_INT 1
46786: ST_TO_ADDR
// if p3 = 115 then
46787: LD_VAR 0 3
46791: PUSH
46792: LD_INT 115
46794: EQUAL
46795: IFFALSE 46805
// sRanger := true ;
46797: LD_ADDR_EXP 102
46801: PUSH
46802: LD_INT 1
46804: ST_TO_ADDR
// if p3 = 116 then
46805: LD_VAR 0 3
46809: PUSH
46810: LD_INT 116
46812: EQUAL
46813: IFFALSE 46823
// sComputer := true ;
46815: LD_ADDR_EXP 103
46819: PUSH
46820: LD_INT 1
46822: ST_TO_ADDR
// if p3 = 117 then
46823: LD_VAR 0 3
46827: PUSH
46828: LD_INT 117
46830: EQUAL
46831: IFFALSE 46841
// s30 := true ;
46833: LD_ADDR_EXP 104
46837: PUSH
46838: LD_INT 1
46840: ST_TO_ADDR
// if p3 = 118 then
46841: LD_VAR 0 3
46845: PUSH
46846: LD_INT 118
46848: EQUAL
46849: IFFALSE 46859
// s60 := true ;
46851: LD_ADDR_EXP 105
46855: PUSH
46856: LD_INT 1
46858: ST_TO_ADDR
// end ; if p2 = 101 then
46859: LD_VAR 0 2
46863: PUSH
46864: LD_INT 101
46866: EQUAL
46867: IFFALSE 46995
// begin case p3 of 1 :
46869: LD_VAR 0 3
46873: PUSH
46874: LD_INT 1
46876: DOUBLE
46877: EQUAL
46878: IFTRUE 46882
46880: GO 46889
46882: POP
// hHackUnlimitedResources ; 2 :
46883: CALL 59093 0 0
46887: GO 46995
46889: LD_INT 2
46891: DOUBLE
46892: EQUAL
46893: IFTRUE 46897
46895: GO 46904
46897: POP
// hHackSetLevel10 ; 3 :
46898: CALL 59226 0 0
46902: GO 46995
46904: LD_INT 3
46906: DOUBLE
46907: EQUAL
46908: IFTRUE 46912
46910: GO 46919
46912: POP
// hHackSetLevel10YourUnits ; 4 :
46913: CALL 59311 0 0
46917: GO 46995
46919: LD_INT 4
46921: DOUBLE
46922: EQUAL
46923: IFTRUE 46927
46925: GO 46934
46927: POP
// hHackInvincible ; 5 :
46928: CALL 59759 0 0
46932: GO 46995
46934: LD_INT 5
46936: DOUBLE
46937: EQUAL
46938: IFTRUE 46942
46940: GO 46949
46942: POP
// hHackInvisible ; 6 :
46943: CALL 59870 0 0
46947: GO 46995
46949: LD_INT 6
46951: DOUBLE
46952: EQUAL
46953: IFTRUE 46957
46955: GO 46964
46957: POP
// hHackChangeYourSide ; 7 :
46958: CALL 59927 0 0
46962: GO 46995
46964: LD_INT 7
46966: DOUBLE
46967: EQUAL
46968: IFTRUE 46972
46970: GO 46979
46972: POP
// hHackChangeUnitSide ; 8 :
46973: CALL 59969 0 0
46977: GO 46995
46979: LD_INT 8
46981: DOUBLE
46982: EQUAL
46983: IFTRUE 46987
46985: GO 46994
46987: POP
// hHackFog ; end ;
46988: CALL 60070 0 0
46992: GO 46995
46994: POP
// end ; end ;
46995: LD_VAR 0 7
46999: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
47000: GO 47002
47002: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
47003: LD_STRING initStreamRollete();
47005: PPUSH
47006: CALL_OW 559
// InitStreamMode ;
47010: CALL 47022 0 0
// DefineStreamItems ( false ) ;
47014: LD_INT 0
47016: PPUSH
47017: CALL 47486 0 1
// end ;
47021: END
// function InitStreamMode ; begin
47022: LD_INT 0
47024: PPUSH
// streamModeActive := false ;
47025: LD_ADDR_EXP 49
47029: PUSH
47030: LD_INT 0
47032: ST_TO_ADDR
// normalCounter := 36 ;
47033: LD_ADDR_EXP 50
47037: PUSH
47038: LD_INT 36
47040: ST_TO_ADDR
// hardcoreCounter := 18 ;
47041: LD_ADDR_EXP 51
47045: PUSH
47046: LD_INT 18
47048: ST_TO_ADDR
// sRocket := false ;
47049: LD_ADDR_EXP 54
47053: PUSH
47054: LD_INT 0
47056: ST_TO_ADDR
// sSpeed := false ;
47057: LD_ADDR_EXP 53
47061: PUSH
47062: LD_INT 0
47064: ST_TO_ADDR
// sEngine := false ;
47065: LD_ADDR_EXP 55
47069: PUSH
47070: LD_INT 0
47072: ST_TO_ADDR
// sSpec := false ;
47073: LD_ADDR_EXP 52
47077: PUSH
47078: LD_INT 0
47080: ST_TO_ADDR
// sLevel := false ;
47081: LD_ADDR_EXP 56
47085: PUSH
47086: LD_INT 0
47088: ST_TO_ADDR
// sArmoury := false ;
47089: LD_ADDR_EXP 57
47093: PUSH
47094: LD_INT 0
47096: ST_TO_ADDR
// sRadar := false ;
47097: LD_ADDR_EXP 58
47101: PUSH
47102: LD_INT 0
47104: ST_TO_ADDR
// sBunker := false ;
47105: LD_ADDR_EXP 59
47109: PUSH
47110: LD_INT 0
47112: ST_TO_ADDR
// sHack := false ;
47113: LD_ADDR_EXP 60
47117: PUSH
47118: LD_INT 0
47120: ST_TO_ADDR
// sFire := false ;
47121: LD_ADDR_EXP 61
47125: PUSH
47126: LD_INT 0
47128: ST_TO_ADDR
// sRefresh := false ;
47129: LD_ADDR_EXP 62
47133: PUSH
47134: LD_INT 0
47136: ST_TO_ADDR
// sExp := false ;
47137: LD_ADDR_EXP 63
47141: PUSH
47142: LD_INT 0
47144: ST_TO_ADDR
// sDepot := false ;
47145: LD_ADDR_EXP 64
47149: PUSH
47150: LD_INT 0
47152: ST_TO_ADDR
// sFlag := false ;
47153: LD_ADDR_EXP 65
47157: PUSH
47158: LD_INT 0
47160: ST_TO_ADDR
// sKamikadze := false ;
47161: LD_ADDR_EXP 73
47165: PUSH
47166: LD_INT 0
47168: ST_TO_ADDR
// sTroll := false ;
47169: LD_ADDR_EXP 74
47173: PUSH
47174: LD_INT 0
47176: ST_TO_ADDR
// sSlow := false ;
47177: LD_ADDR_EXP 75
47181: PUSH
47182: LD_INT 0
47184: ST_TO_ADDR
// sLack := false ;
47185: LD_ADDR_EXP 76
47189: PUSH
47190: LD_INT 0
47192: ST_TO_ADDR
// sTank := false ;
47193: LD_ADDR_EXP 78
47197: PUSH
47198: LD_INT 0
47200: ST_TO_ADDR
// sRemote := false ;
47201: LD_ADDR_EXP 79
47205: PUSH
47206: LD_INT 0
47208: ST_TO_ADDR
// sPowell := false ;
47209: LD_ADDR_EXP 80
47213: PUSH
47214: LD_INT 0
47216: ST_TO_ADDR
// sTeleport := false ;
47217: LD_ADDR_EXP 83
47221: PUSH
47222: LD_INT 0
47224: ST_TO_ADDR
// sOilTower := false ;
47225: LD_ADDR_EXP 85
47229: PUSH
47230: LD_INT 0
47232: ST_TO_ADDR
// sShovel := false ;
47233: LD_ADDR_EXP 86
47237: PUSH
47238: LD_INT 0
47240: ST_TO_ADDR
// sSheik := false ;
47241: LD_ADDR_EXP 87
47245: PUSH
47246: LD_INT 0
47248: ST_TO_ADDR
// sEarthquake := false ;
47249: LD_ADDR_EXP 89
47253: PUSH
47254: LD_INT 0
47256: ST_TO_ADDR
// sAI := false ;
47257: LD_ADDR_EXP 90
47261: PUSH
47262: LD_INT 0
47264: ST_TO_ADDR
// sCargo := false ;
47265: LD_ADDR_EXP 93
47269: PUSH
47270: LD_INT 0
47272: ST_TO_ADDR
// sDLaser := false ;
47273: LD_ADDR_EXP 94
47277: PUSH
47278: LD_INT 0
47280: ST_TO_ADDR
// sExchange := false ;
47281: LD_ADDR_EXP 95
47285: PUSH
47286: LD_INT 0
47288: ST_TO_ADDR
// sFac := false ;
47289: LD_ADDR_EXP 96
47293: PUSH
47294: LD_INT 0
47296: ST_TO_ADDR
// sPower := false ;
47297: LD_ADDR_EXP 97
47301: PUSH
47302: LD_INT 0
47304: ST_TO_ADDR
// sRandom := false ;
47305: LD_ADDR_EXP 98
47309: PUSH
47310: LD_INT 0
47312: ST_TO_ADDR
// sShield := false ;
47313: LD_ADDR_EXP 99
47317: PUSH
47318: LD_INT 0
47320: ST_TO_ADDR
// sTime := false ;
47321: LD_ADDR_EXP 100
47325: PUSH
47326: LD_INT 0
47328: ST_TO_ADDR
// sTools := false ;
47329: LD_ADDR_EXP 101
47333: PUSH
47334: LD_INT 0
47336: ST_TO_ADDR
// sSold := false ;
47337: LD_ADDR_EXP 66
47341: PUSH
47342: LD_INT 0
47344: ST_TO_ADDR
// sDiff := false ;
47345: LD_ADDR_EXP 67
47349: PUSH
47350: LD_INT 0
47352: ST_TO_ADDR
// sFog := false ;
47353: LD_ADDR_EXP 70
47357: PUSH
47358: LD_INT 0
47360: ST_TO_ADDR
// sReset := false ;
47361: LD_ADDR_EXP 71
47365: PUSH
47366: LD_INT 0
47368: ST_TO_ADDR
// sSun := false ;
47369: LD_ADDR_EXP 72
47373: PUSH
47374: LD_INT 0
47376: ST_TO_ADDR
// sTiger := false ;
47377: LD_ADDR_EXP 68
47381: PUSH
47382: LD_INT 0
47384: ST_TO_ADDR
// sBomb := false ;
47385: LD_ADDR_EXP 69
47389: PUSH
47390: LD_INT 0
47392: ST_TO_ADDR
// sWound := false ;
47393: LD_ADDR_EXP 77
47397: PUSH
47398: LD_INT 0
47400: ST_TO_ADDR
// sBetray := false ;
47401: LD_ADDR_EXP 81
47405: PUSH
47406: LD_INT 0
47408: ST_TO_ADDR
// sContamin := false ;
47409: LD_ADDR_EXP 82
47413: PUSH
47414: LD_INT 0
47416: ST_TO_ADDR
// sOil := false ;
47417: LD_ADDR_EXP 84
47421: PUSH
47422: LD_INT 0
47424: ST_TO_ADDR
// sStu := false ;
47425: LD_ADDR_EXP 88
47429: PUSH
47430: LD_INT 0
47432: ST_TO_ADDR
// sBazooka := false ;
47433: LD_ADDR_EXP 91
47437: PUSH
47438: LD_INT 0
47440: ST_TO_ADDR
// sMortar := false ;
47441: LD_ADDR_EXP 92
47445: PUSH
47446: LD_INT 0
47448: ST_TO_ADDR
// sRanger := false ;
47449: LD_ADDR_EXP 102
47453: PUSH
47454: LD_INT 0
47456: ST_TO_ADDR
// sComputer := false ;
47457: LD_ADDR_EXP 103
47461: PUSH
47462: LD_INT 0
47464: ST_TO_ADDR
// s30 := false ;
47465: LD_ADDR_EXP 104
47469: PUSH
47470: LD_INT 0
47472: ST_TO_ADDR
// s60 := false ;
47473: LD_ADDR_EXP 105
47477: PUSH
47478: LD_INT 0
47480: ST_TO_ADDR
// end ;
47481: LD_VAR 0 1
47485: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
47486: LD_INT 0
47488: PPUSH
47489: PPUSH
47490: PPUSH
47491: PPUSH
47492: PPUSH
47493: PPUSH
47494: PPUSH
// result := [ ] ;
47495: LD_ADDR_VAR 0 2
47499: PUSH
47500: EMPTY
47501: ST_TO_ADDR
// if campaign_id = 1 then
47502: LD_OWVAR 69
47506: PUSH
47507: LD_INT 1
47509: EQUAL
47510: IFFALSE 50676
// begin case mission_number of 1 :
47512: LD_OWVAR 70
47516: PUSH
47517: LD_INT 1
47519: DOUBLE
47520: EQUAL
47521: IFTRUE 47525
47523: GO 47601
47525: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
47526: LD_ADDR_VAR 0 2
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 4
47536: PUSH
47537: LD_INT 11
47539: PUSH
47540: LD_INT 12
47542: PUSH
47543: LD_INT 15
47545: PUSH
47546: LD_INT 16
47548: PUSH
47549: LD_INT 22
47551: PUSH
47552: LD_INT 23
47554: PUSH
47555: LD_INT 26
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 101
47571: PUSH
47572: LD_INT 102
47574: PUSH
47575: LD_INT 106
47577: PUSH
47578: LD_INT 116
47580: PUSH
47581: LD_INT 117
47583: PUSH
47584: LD_INT 118
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: ST_TO_ADDR
47599: GO 50674
47601: LD_INT 2
47603: DOUBLE
47604: EQUAL
47605: IFTRUE 47609
47607: GO 47693
47609: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47610: LD_ADDR_VAR 0 2
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 4
47620: PUSH
47621: LD_INT 11
47623: PUSH
47624: LD_INT 12
47626: PUSH
47627: LD_INT 15
47629: PUSH
47630: LD_INT 16
47632: PUSH
47633: LD_INT 22
47635: PUSH
47636: LD_INT 23
47638: PUSH
47639: LD_INT 26
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 101
47655: PUSH
47656: LD_INT 102
47658: PUSH
47659: LD_INT 105
47661: PUSH
47662: LD_INT 106
47664: PUSH
47665: LD_INT 108
47667: PUSH
47668: LD_INT 116
47670: PUSH
47671: LD_INT 117
47673: PUSH
47674: LD_INT 118
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: ST_TO_ADDR
47691: GO 50674
47693: LD_INT 3
47695: DOUBLE
47696: EQUAL
47697: IFTRUE 47701
47699: GO 47789
47701: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47702: LD_ADDR_VAR 0 2
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: LD_INT 4
47712: PUSH
47713: LD_INT 5
47715: PUSH
47716: LD_INT 11
47718: PUSH
47719: LD_INT 12
47721: PUSH
47722: LD_INT 15
47724: PUSH
47725: LD_INT 16
47727: PUSH
47728: LD_INT 22
47730: PUSH
47731: LD_INT 26
47733: PUSH
47734: LD_INT 36
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 101
47751: PUSH
47752: LD_INT 102
47754: PUSH
47755: LD_INT 105
47757: PUSH
47758: LD_INT 106
47760: PUSH
47761: LD_INT 108
47763: PUSH
47764: LD_INT 116
47766: PUSH
47767: LD_INT 117
47769: PUSH
47770: LD_INT 118
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: ST_TO_ADDR
47787: GO 50674
47789: LD_INT 4
47791: DOUBLE
47792: EQUAL
47793: IFTRUE 47797
47795: GO 47893
47797: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
47798: LD_ADDR_VAR 0 2
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: LD_INT 4
47808: PUSH
47809: LD_INT 5
47811: PUSH
47812: LD_INT 8
47814: PUSH
47815: LD_INT 11
47817: PUSH
47818: LD_INT 12
47820: PUSH
47821: LD_INT 15
47823: PUSH
47824: LD_INT 16
47826: PUSH
47827: LD_INT 22
47829: PUSH
47830: LD_INT 23
47832: PUSH
47833: LD_INT 26
47835: PUSH
47836: LD_INT 36
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 101
47855: PUSH
47856: LD_INT 102
47858: PUSH
47859: LD_INT 105
47861: PUSH
47862: LD_INT 106
47864: PUSH
47865: LD_INT 108
47867: PUSH
47868: LD_INT 116
47870: PUSH
47871: LD_INT 117
47873: PUSH
47874: LD_INT 118
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: ST_TO_ADDR
47891: GO 50674
47893: LD_INT 5
47895: DOUBLE
47896: EQUAL
47897: IFTRUE 47901
47899: GO 48013
47901: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47902: LD_ADDR_VAR 0 2
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: LD_INT 4
47912: PUSH
47913: LD_INT 5
47915: PUSH
47916: LD_INT 6
47918: PUSH
47919: LD_INT 8
47921: PUSH
47922: LD_INT 11
47924: PUSH
47925: LD_INT 12
47927: PUSH
47928: LD_INT 15
47930: PUSH
47931: LD_INT 16
47933: PUSH
47934: LD_INT 22
47936: PUSH
47937: LD_INT 23
47939: PUSH
47940: LD_INT 25
47942: PUSH
47943: LD_INT 26
47945: PUSH
47946: LD_INT 36
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 101
47967: PUSH
47968: LD_INT 102
47970: PUSH
47971: LD_INT 105
47973: PUSH
47974: LD_INT 106
47976: PUSH
47977: LD_INT 108
47979: PUSH
47980: LD_INT 109
47982: PUSH
47983: LD_INT 112
47985: PUSH
47986: LD_INT 116
47988: PUSH
47989: LD_INT 117
47991: PUSH
47992: LD_INT 118
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: ST_TO_ADDR
48011: GO 50674
48013: LD_INT 6
48015: DOUBLE
48016: EQUAL
48017: IFTRUE 48021
48019: GO 48153
48021: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
48022: LD_ADDR_VAR 0 2
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 4
48032: PUSH
48033: LD_INT 5
48035: PUSH
48036: LD_INT 6
48038: PUSH
48039: LD_INT 8
48041: PUSH
48042: LD_INT 11
48044: PUSH
48045: LD_INT 12
48047: PUSH
48048: LD_INT 15
48050: PUSH
48051: LD_INT 16
48053: PUSH
48054: LD_INT 20
48056: PUSH
48057: LD_INT 21
48059: PUSH
48060: LD_INT 22
48062: PUSH
48063: LD_INT 23
48065: PUSH
48066: LD_INT 25
48068: PUSH
48069: LD_INT 26
48071: PUSH
48072: LD_INT 30
48074: PUSH
48075: LD_INT 31
48077: PUSH
48078: LD_INT 32
48080: PUSH
48081: LD_INT 36
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 101
48107: PUSH
48108: LD_INT 102
48110: PUSH
48111: LD_INT 105
48113: PUSH
48114: LD_INT 106
48116: PUSH
48117: LD_INT 108
48119: PUSH
48120: LD_INT 109
48122: PUSH
48123: LD_INT 112
48125: PUSH
48126: LD_INT 116
48128: PUSH
48129: LD_INT 117
48131: PUSH
48132: LD_INT 118
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: ST_TO_ADDR
48151: GO 50674
48153: LD_INT 7
48155: DOUBLE
48156: EQUAL
48157: IFTRUE 48161
48159: GO 48273
48161: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
48162: LD_ADDR_VAR 0 2
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: LD_INT 4
48172: PUSH
48173: LD_INT 5
48175: PUSH
48176: LD_INT 7
48178: PUSH
48179: LD_INT 11
48181: PUSH
48182: LD_INT 12
48184: PUSH
48185: LD_INT 15
48187: PUSH
48188: LD_INT 16
48190: PUSH
48191: LD_INT 20
48193: PUSH
48194: LD_INT 21
48196: PUSH
48197: LD_INT 22
48199: PUSH
48200: LD_INT 23
48202: PUSH
48203: LD_INT 25
48205: PUSH
48206: LD_INT 26
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 101
48227: PUSH
48228: LD_INT 102
48230: PUSH
48231: LD_INT 103
48233: PUSH
48234: LD_INT 105
48236: PUSH
48237: LD_INT 106
48239: PUSH
48240: LD_INT 108
48242: PUSH
48243: LD_INT 112
48245: PUSH
48246: LD_INT 116
48248: PUSH
48249: LD_INT 117
48251: PUSH
48252: LD_INT 118
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: ST_TO_ADDR
48271: GO 50674
48273: LD_INT 8
48275: DOUBLE
48276: EQUAL
48277: IFTRUE 48281
48279: GO 48421
48281: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
48282: LD_ADDR_VAR 0 2
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 4
48292: PUSH
48293: LD_INT 5
48295: PUSH
48296: LD_INT 6
48298: PUSH
48299: LD_INT 7
48301: PUSH
48302: LD_INT 8
48304: PUSH
48305: LD_INT 11
48307: PUSH
48308: LD_INT 12
48310: PUSH
48311: LD_INT 15
48313: PUSH
48314: LD_INT 16
48316: PUSH
48317: LD_INT 20
48319: PUSH
48320: LD_INT 21
48322: PUSH
48323: LD_INT 22
48325: PUSH
48326: LD_INT 23
48328: PUSH
48329: LD_INT 25
48331: PUSH
48332: LD_INT 26
48334: PUSH
48335: LD_INT 30
48337: PUSH
48338: LD_INT 31
48340: PUSH
48341: LD_INT 32
48343: PUSH
48344: LD_INT 36
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 101
48371: PUSH
48372: LD_INT 102
48374: PUSH
48375: LD_INT 103
48377: PUSH
48378: LD_INT 105
48380: PUSH
48381: LD_INT 106
48383: PUSH
48384: LD_INT 108
48386: PUSH
48387: LD_INT 109
48389: PUSH
48390: LD_INT 112
48392: PUSH
48393: LD_INT 116
48395: PUSH
48396: LD_INT 117
48398: PUSH
48399: LD_INT 118
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: ST_TO_ADDR
48419: GO 50674
48421: LD_INT 9
48423: DOUBLE
48424: EQUAL
48425: IFTRUE 48429
48427: GO 48577
48429: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
48430: LD_ADDR_VAR 0 2
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 4
48440: PUSH
48441: LD_INT 5
48443: PUSH
48444: LD_INT 6
48446: PUSH
48447: LD_INT 7
48449: PUSH
48450: LD_INT 8
48452: PUSH
48453: LD_INT 11
48455: PUSH
48456: LD_INT 12
48458: PUSH
48459: LD_INT 15
48461: PUSH
48462: LD_INT 16
48464: PUSH
48465: LD_INT 20
48467: PUSH
48468: LD_INT 21
48470: PUSH
48471: LD_INT 22
48473: PUSH
48474: LD_INT 23
48476: PUSH
48477: LD_INT 25
48479: PUSH
48480: LD_INT 26
48482: PUSH
48483: LD_INT 28
48485: PUSH
48486: LD_INT 30
48488: PUSH
48489: LD_INT 31
48491: PUSH
48492: LD_INT 32
48494: PUSH
48495: LD_INT 36
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 101
48523: PUSH
48524: LD_INT 102
48526: PUSH
48527: LD_INT 103
48529: PUSH
48530: LD_INT 105
48532: PUSH
48533: LD_INT 106
48535: PUSH
48536: LD_INT 108
48538: PUSH
48539: LD_INT 109
48541: PUSH
48542: LD_INT 112
48544: PUSH
48545: LD_INT 114
48547: PUSH
48548: LD_INT 116
48550: PUSH
48551: LD_INT 117
48553: PUSH
48554: LD_INT 118
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: ST_TO_ADDR
48575: GO 50674
48577: LD_INT 10
48579: DOUBLE
48580: EQUAL
48581: IFTRUE 48585
48583: GO 48781
48585: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48586: LD_ADDR_VAR 0 2
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: LD_INT 4
48596: PUSH
48597: LD_INT 5
48599: PUSH
48600: LD_INT 6
48602: PUSH
48603: LD_INT 7
48605: PUSH
48606: LD_INT 8
48608: PUSH
48609: LD_INT 9
48611: PUSH
48612: LD_INT 10
48614: PUSH
48615: LD_INT 11
48617: PUSH
48618: LD_INT 12
48620: PUSH
48621: LD_INT 13
48623: PUSH
48624: LD_INT 14
48626: PUSH
48627: LD_INT 15
48629: PUSH
48630: LD_INT 16
48632: PUSH
48633: LD_INT 17
48635: PUSH
48636: LD_INT 18
48638: PUSH
48639: LD_INT 19
48641: PUSH
48642: LD_INT 20
48644: PUSH
48645: LD_INT 21
48647: PUSH
48648: LD_INT 22
48650: PUSH
48651: LD_INT 23
48653: PUSH
48654: LD_INT 24
48656: PUSH
48657: LD_INT 25
48659: PUSH
48660: LD_INT 26
48662: PUSH
48663: LD_INT 28
48665: PUSH
48666: LD_INT 30
48668: PUSH
48669: LD_INT 31
48671: PUSH
48672: LD_INT 32
48674: PUSH
48675: LD_INT 36
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 101
48711: PUSH
48712: LD_INT 102
48714: PUSH
48715: LD_INT 103
48717: PUSH
48718: LD_INT 104
48720: PUSH
48721: LD_INT 105
48723: PUSH
48724: LD_INT 106
48726: PUSH
48727: LD_INT 107
48729: PUSH
48730: LD_INT 108
48732: PUSH
48733: LD_INT 109
48735: PUSH
48736: LD_INT 110
48738: PUSH
48739: LD_INT 111
48741: PUSH
48742: LD_INT 112
48744: PUSH
48745: LD_INT 114
48747: PUSH
48748: LD_INT 116
48750: PUSH
48751: LD_INT 117
48753: PUSH
48754: LD_INT 118
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: ST_TO_ADDR
48779: GO 50674
48781: LD_INT 11
48783: DOUBLE
48784: EQUAL
48785: IFTRUE 48789
48787: GO 48993
48789: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
48790: LD_ADDR_VAR 0 2
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 3
48800: PUSH
48801: LD_INT 4
48803: PUSH
48804: LD_INT 5
48806: PUSH
48807: LD_INT 6
48809: PUSH
48810: LD_INT 7
48812: PUSH
48813: LD_INT 8
48815: PUSH
48816: LD_INT 9
48818: PUSH
48819: LD_INT 10
48821: PUSH
48822: LD_INT 11
48824: PUSH
48825: LD_INT 12
48827: PUSH
48828: LD_INT 13
48830: PUSH
48831: LD_INT 14
48833: PUSH
48834: LD_INT 15
48836: PUSH
48837: LD_INT 16
48839: PUSH
48840: LD_INT 17
48842: PUSH
48843: LD_INT 18
48845: PUSH
48846: LD_INT 19
48848: PUSH
48849: LD_INT 20
48851: PUSH
48852: LD_INT 21
48854: PUSH
48855: LD_INT 22
48857: PUSH
48858: LD_INT 23
48860: PUSH
48861: LD_INT 24
48863: PUSH
48864: LD_INT 25
48866: PUSH
48867: LD_INT 26
48869: PUSH
48870: LD_INT 28
48872: PUSH
48873: LD_INT 30
48875: PUSH
48876: LD_INT 31
48878: PUSH
48879: LD_INT 32
48881: PUSH
48882: LD_INT 34
48884: PUSH
48885: LD_INT 36
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 101
48923: PUSH
48924: LD_INT 102
48926: PUSH
48927: LD_INT 103
48929: PUSH
48930: LD_INT 104
48932: PUSH
48933: LD_INT 105
48935: PUSH
48936: LD_INT 106
48938: PUSH
48939: LD_INT 107
48941: PUSH
48942: LD_INT 108
48944: PUSH
48945: LD_INT 109
48947: PUSH
48948: LD_INT 110
48950: PUSH
48951: LD_INT 111
48953: PUSH
48954: LD_INT 112
48956: PUSH
48957: LD_INT 114
48959: PUSH
48960: LD_INT 116
48962: PUSH
48963: LD_INT 117
48965: PUSH
48966: LD_INT 118
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: ST_TO_ADDR
48991: GO 50674
48993: LD_INT 12
48995: DOUBLE
48996: EQUAL
48997: IFTRUE 49001
48999: GO 49221
49001: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
49002: LD_ADDR_VAR 0 2
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 3
49015: PUSH
49016: LD_INT 4
49018: PUSH
49019: LD_INT 5
49021: PUSH
49022: LD_INT 6
49024: PUSH
49025: LD_INT 7
49027: PUSH
49028: LD_INT 8
49030: PUSH
49031: LD_INT 9
49033: PUSH
49034: LD_INT 10
49036: PUSH
49037: LD_INT 11
49039: PUSH
49040: LD_INT 12
49042: PUSH
49043: LD_INT 13
49045: PUSH
49046: LD_INT 14
49048: PUSH
49049: LD_INT 15
49051: PUSH
49052: LD_INT 16
49054: PUSH
49055: LD_INT 17
49057: PUSH
49058: LD_INT 18
49060: PUSH
49061: LD_INT 19
49063: PUSH
49064: LD_INT 20
49066: PUSH
49067: LD_INT 21
49069: PUSH
49070: LD_INT 22
49072: PUSH
49073: LD_INT 23
49075: PUSH
49076: LD_INT 24
49078: PUSH
49079: LD_INT 25
49081: PUSH
49082: LD_INT 26
49084: PUSH
49085: LD_INT 27
49087: PUSH
49088: LD_INT 28
49090: PUSH
49091: LD_INT 30
49093: PUSH
49094: LD_INT 31
49096: PUSH
49097: LD_INT 32
49099: PUSH
49100: LD_INT 33
49102: PUSH
49103: LD_INT 34
49105: PUSH
49106: LD_INT 36
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 101
49147: PUSH
49148: LD_INT 102
49150: PUSH
49151: LD_INT 103
49153: PUSH
49154: LD_INT 104
49156: PUSH
49157: LD_INT 105
49159: PUSH
49160: LD_INT 106
49162: PUSH
49163: LD_INT 107
49165: PUSH
49166: LD_INT 108
49168: PUSH
49169: LD_INT 109
49171: PUSH
49172: LD_INT 110
49174: PUSH
49175: LD_INT 111
49177: PUSH
49178: LD_INT 112
49180: PUSH
49181: LD_INT 113
49183: PUSH
49184: LD_INT 114
49186: PUSH
49187: LD_INT 116
49189: PUSH
49190: LD_INT 117
49192: PUSH
49193: LD_INT 118
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: ST_TO_ADDR
49219: GO 50674
49221: LD_INT 13
49223: DOUBLE
49224: EQUAL
49225: IFTRUE 49229
49227: GO 49437
49229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
49230: LD_ADDR_VAR 0 2
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: LD_INT 4
49246: PUSH
49247: LD_INT 5
49249: PUSH
49250: LD_INT 8
49252: PUSH
49253: LD_INT 9
49255: PUSH
49256: LD_INT 10
49258: PUSH
49259: LD_INT 11
49261: PUSH
49262: LD_INT 12
49264: PUSH
49265: LD_INT 14
49267: PUSH
49268: LD_INT 15
49270: PUSH
49271: LD_INT 16
49273: PUSH
49274: LD_INT 17
49276: PUSH
49277: LD_INT 18
49279: PUSH
49280: LD_INT 19
49282: PUSH
49283: LD_INT 20
49285: PUSH
49286: LD_INT 21
49288: PUSH
49289: LD_INT 22
49291: PUSH
49292: LD_INT 23
49294: PUSH
49295: LD_INT 24
49297: PUSH
49298: LD_INT 25
49300: PUSH
49301: LD_INT 26
49303: PUSH
49304: LD_INT 27
49306: PUSH
49307: LD_INT 28
49309: PUSH
49310: LD_INT 30
49312: PUSH
49313: LD_INT 31
49315: PUSH
49316: LD_INT 32
49318: PUSH
49319: LD_INT 33
49321: PUSH
49322: LD_INT 34
49324: PUSH
49325: LD_INT 36
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 101
49363: PUSH
49364: LD_INT 102
49366: PUSH
49367: LD_INT 103
49369: PUSH
49370: LD_INT 104
49372: PUSH
49373: LD_INT 105
49375: PUSH
49376: LD_INT 106
49378: PUSH
49379: LD_INT 107
49381: PUSH
49382: LD_INT 108
49384: PUSH
49385: LD_INT 109
49387: PUSH
49388: LD_INT 110
49390: PUSH
49391: LD_INT 111
49393: PUSH
49394: LD_INT 112
49396: PUSH
49397: LD_INT 113
49399: PUSH
49400: LD_INT 114
49402: PUSH
49403: LD_INT 116
49405: PUSH
49406: LD_INT 117
49408: PUSH
49409: LD_INT 118
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: ST_TO_ADDR
49435: GO 50674
49437: LD_INT 14
49439: DOUBLE
49440: EQUAL
49441: IFTRUE 49445
49443: GO 49669
49445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
49446: LD_ADDR_VAR 0 2
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: LD_INT 3
49459: PUSH
49460: LD_INT 4
49462: PUSH
49463: LD_INT 5
49465: PUSH
49466: LD_INT 6
49468: PUSH
49469: LD_INT 7
49471: PUSH
49472: LD_INT 8
49474: PUSH
49475: LD_INT 9
49477: PUSH
49478: LD_INT 10
49480: PUSH
49481: LD_INT 11
49483: PUSH
49484: LD_INT 12
49486: PUSH
49487: LD_INT 13
49489: PUSH
49490: LD_INT 14
49492: PUSH
49493: LD_INT 15
49495: PUSH
49496: LD_INT 16
49498: PUSH
49499: LD_INT 17
49501: PUSH
49502: LD_INT 18
49504: PUSH
49505: LD_INT 19
49507: PUSH
49508: LD_INT 20
49510: PUSH
49511: LD_INT 21
49513: PUSH
49514: LD_INT 22
49516: PUSH
49517: LD_INT 23
49519: PUSH
49520: LD_INT 24
49522: PUSH
49523: LD_INT 25
49525: PUSH
49526: LD_INT 26
49528: PUSH
49529: LD_INT 27
49531: PUSH
49532: LD_INT 28
49534: PUSH
49535: LD_INT 29
49537: PUSH
49538: LD_INT 30
49540: PUSH
49541: LD_INT 31
49543: PUSH
49544: LD_INT 32
49546: PUSH
49547: LD_INT 33
49549: PUSH
49550: LD_INT 34
49552: PUSH
49553: LD_INT 36
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 101
49595: PUSH
49596: LD_INT 102
49598: PUSH
49599: LD_INT 103
49601: PUSH
49602: LD_INT 104
49604: PUSH
49605: LD_INT 105
49607: PUSH
49608: LD_INT 106
49610: PUSH
49611: LD_INT 107
49613: PUSH
49614: LD_INT 108
49616: PUSH
49617: LD_INT 109
49619: PUSH
49620: LD_INT 110
49622: PUSH
49623: LD_INT 111
49625: PUSH
49626: LD_INT 112
49628: PUSH
49629: LD_INT 113
49631: PUSH
49632: LD_INT 114
49634: PUSH
49635: LD_INT 116
49637: PUSH
49638: LD_INT 117
49640: PUSH
49641: LD_INT 118
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: ST_TO_ADDR
49667: GO 50674
49669: LD_INT 15
49671: DOUBLE
49672: EQUAL
49673: IFTRUE 49677
49675: GO 49901
49677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49678: LD_ADDR_VAR 0 2
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: LD_INT 3
49691: PUSH
49692: LD_INT 4
49694: PUSH
49695: LD_INT 5
49697: PUSH
49698: LD_INT 6
49700: PUSH
49701: LD_INT 7
49703: PUSH
49704: LD_INT 8
49706: PUSH
49707: LD_INT 9
49709: PUSH
49710: LD_INT 10
49712: PUSH
49713: LD_INT 11
49715: PUSH
49716: LD_INT 12
49718: PUSH
49719: LD_INT 13
49721: PUSH
49722: LD_INT 14
49724: PUSH
49725: LD_INT 15
49727: PUSH
49728: LD_INT 16
49730: PUSH
49731: LD_INT 17
49733: PUSH
49734: LD_INT 18
49736: PUSH
49737: LD_INT 19
49739: PUSH
49740: LD_INT 20
49742: PUSH
49743: LD_INT 21
49745: PUSH
49746: LD_INT 22
49748: PUSH
49749: LD_INT 23
49751: PUSH
49752: LD_INT 24
49754: PUSH
49755: LD_INT 25
49757: PUSH
49758: LD_INT 26
49760: PUSH
49761: LD_INT 27
49763: PUSH
49764: LD_INT 28
49766: PUSH
49767: LD_INT 29
49769: PUSH
49770: LD_INT 30
49772: PUSH
49773: LD_INT 31
49775: PUSH
49776: LD_INT 32
49778: PUSH
49779: LD_INT 33
49781: PUSH
49782: LD_INT 34
49784: PUSH
49785: LD_INT 36
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 101
49827: PUSH
49828: LD_INT 102
49830: PUSH
49831: LD_INT 103
49833: PUSH
49834: LD_INT 104
49836: PUSH
49837: LD_INT 105
49839: PUSH
49840: LD_INT 106
49842: PUSH
49843: LD_INT 107
49845: PUSH
49846: LD_INT 108
49848: PUSH
49849: LD_INT 109
49851: PUSH
49852: LD_INT 110
49854: PUSH
49855: LD_INT 111
49857: PUSH
49858: LD_INT 112
49860: PUSH
49861: LD_INT 113
49863: PUSH
49864: LD_INT 114
49866: PUSH
49867: LD_INT 116
49869: PUSH
49870: LD_INT 117
49872: PUSH
49873: LD_INT 118
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: ST_TO_ADDR
49899: GO 50674
49901: LD_INT 16
49903: DOUBLE
49904: EQUAL
49905: IFTRUE 49909
49907: GO 50045
49909: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49910: LD_ADDR_VAR 0 2
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: LD_INT 4
49920: PUSH
49921: LD_INT 5
49923: PUSH
49924: LD_INT 7
49926: PUSH
49927: LD_INT 11
49929: PUSH
49930: LD_INT 12
49932: PUSH
49933: LD_INT 15
49935: PUSH
49936: LD_INT 16
49938: PUSH
49939: LD_INT 20
49941: PUSH
49942: LD_INT 21
49944: PUSH
49945: LD_INT 22
49947: PUSH
49948: LD_INT 23
49950: PUSH
49951: LD_INT 25
49953: PUSH
49954: LD_INT 26
49956: PUSH
49957: LD_INT 30
49959: PUSH
49960: LD_INT 31
49962: PUSH
49963: LD_INT 32
49965: PUSH
49966: LD_INT 33
49968: PUSH
49969: LD_INT 34
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 101
49995: PUSH
49996: LD_INT 102
49998: PUSH
49999: LD_INT 103
50001: PUSH
50002: LD_INT 106
50004: PUSH
50005: LD_INT 108
50007: PUSH
50008: LD_INT 112
50010: PUSH
50011: LD_INT 113
50013: PUSH
50014: LD_INT 114
50016: PUSH
50017: LD_INT 116
50019: PUSH
50020: LD_INT 117
50022: PUSH
50023: LD_INT 118
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: ST_TO_ADDR
50043: GO 50674
50045: LD_INT 17
50047: DOUBLE
50048: EQUAL
50049: IFTRUE 50053
50051: GO 50277
50053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
50054: LD_ADDR_VAR 0 2
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 3
50067: PUSH
50068: LD_INT 4
50070: PUSH
50071: LD_INT 5
50073: PUSH
50074: LD_INT 6
50076: PUSH
50077: LD_INT 7
50079: PUSH
50080: LD_INT 8
50082: PUSH
50083: LD_INT 9
50085: PUSH
50086: LD_INT 10
50088: PUSH
50089: LD_INT 11
50091: PUSH
50092: LD_INT 12
50094: PUSH
50095: LD_INT 13
50097: PUSH
50098: LD_INT 14
50100: PUSH
50101: LD_INT 15
50103: PUSH
50104: LD_INT 16
50106: PUSH
50107: LD_INT 17
50109: PUSH
50110: LD_INT 18
50112: PUSH
50113: LD_INT 19
50115: PUSH
50116: LD_INT 20
50118: PUSH
50119: LD_INT 21
50121: PUSH
50122: LD_INT 22
50124: PUSH
50125: LD_INT 23
50127: PUSH
50128: LD_INT 24
50130: PUSH
50131: LD_INT 25
50133: PUSH
50134: LD_INT 26
50136: PUSH
50137: LD_INT 27
50139: PUSH
50140: LD_INT 28
50142: PUSH
50143: LD_INT 29
50145: PUSH
50146: LD_INT 30
50148: PUSH
50149: LD_INT 31
50151: PUSH
50152: LD_INT 32
50154: PUSH
50155: LD_INT 33
50157: PUSH
50158: LD_INT 34
50160: PUSH
50161: LD_INT 36
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 101
50203: PUSH
50204: LD_INT 102
50206: PUSH
50207: LD_INT 103
50209: PUSH
50210: LD_INT 104
50212: PUSH
50213: LD_INT 105
50215: PUSH
50216: LD_INT 106
50218: PUSH
50219: LD_INT 107
50221: PUSH
50222: LD_INT 108
50224: PUSH
50225: LD_INT 109
50227: PUSH
50228: LD_INT 110
50230: PUSH
50231: LD_INT 111
50233: PUSH
50234: LD_INT 112
50236: PUSH
50237: LD_INT 113
50239: PUSH
50240: LD_INT 114
50242: PUSH
50243: LD_INT 116
50245: PUSH
50246: LD_INT 117
50248: PUSH
50249: LD_INT 118
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: ST_TO_ADDR
50275: GO 50674
50277: LD_INT 18
50279: DOUBLE
50280: EQUAL
50281: IFTRUE 50285
50283: GO 50433
50285: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
50286: LD_ADDR_VAR 0 2
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 4
50296: PUSH
50297: LD_INT 5
50299: PUSH
50300: LD_INT 7
50302: PUSH
50303: LD_INT 11
50305: PUSH
50306: LD_INT 12
50308: PUSH
50309: LD_INT 15
50311: PUSH
50312: LD_INT 16
50314: PUSH
50315: LD_INT 20
50317: PUSH
50318: LD_INT 21
50320: PUSH
50321: LD_INT 22
50323: PUSH
50324: LD_INT 23
50326: PUSH
50327: LD_INT 25
50329: PUSH
50330: LD_INT 26
50332: PUSH
50333: LD_INT 30
50335: PUSH
50336: LD_INT 31
50338: PUSH
50339: LD_INT 32
50341: PUSH
50342: LD_INT 33
50344: PUSH
50345: LD_INT 34
50347: PUSH
50348: LD_INT 35
50350: PUSH
50351: LD_INT 36
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 101
50379: PUSH
50380: LD_INT 102
50382: PUSH
50383: LD_INT 103
50385: PUSH
50386: LD_INT 106
50388: PUSH
50389: LD_INT 108
50391: PUSH
50392: LD_INT 112
50394: PUSH
50395: LD_INT 113
50397: PUSH
50398: LD_INT 114
50400: PUSH
50401: LD_INT 115
50403: PUSH
50404: LD_INT 116
50406: PUSH
50407: LD_INT 117
50409: PUSH
50410: LD_INT 118
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: ST_TO_ADDR
50431: GO 50674
50433: LD_INT 19
50435: DOUBLE
50436: EQUAL
50437: IFTRUE 50441
50439: GO 50673
50441: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
50442: LD_ADDR_VAR 0 2
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: LD_INT 4
50458: PUSH
50459: LD_INT 5
50461: PUSH
50462: LD_INT 6
50464: PUSH
50465: LD_INT 7
50467: PUSH
50468: LD_INT 8
50470: PUSH
50471: LD_INT 9
50473: PUSH
50474: LD_INT 10
50476: PUSH
50477: LD_INT 11
50479: PUSH
50480: LD_INT 12
50482: PUSH
50483: LD_INT 13
50485: PUSH
50486: LD_INT 14
50488: PUSH
50489: LD_INT 15
50491: PUSH
50492: LD_INT 16
50494: PUSH
50495: LD_INT 17
50497: PUSH
50498: LD_INT 18
50500: PUSH
50501: LD_INT 19
50503: PUSH
50504: LD_INT 20
50506: PUSH
50507: LD_INT 21
50509: PUSH
50510: LD_INT 22
50512: PUSH
50513: LD_INT 23
50515: PUSH
50516: LD_INT 24
50518: PUSH
50519: LD_INT 25
50521: PUSH
50522: LD_INT 26
50524: PUSH
50525: LD_INT 27
50527: PUSH
50528: LD_INT 28
50530: PUSH
50531: LD_INT 29
50533: PUSH
50534: LD_INT 30
50536: PUSH
50537: LD_INT 31
50539: PUSH
50540: LD_INT 32
50542: PUSH
50543: LD_INT 33
50545: PUSH
50546: LD_INT 34
50548: PUSH
50549: LD_INT 35
50551: PUSH
50552: LD_INT 36
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 101
50595: PUSH
50596: LD_INT 102
50598: PUSH
50599: LD_INT 103
50601: PUSH
50602: LD_INT 104
50604: PUSH
50605: LD_INT 105
50607: PUSH
50608: LD_INT 106
50610: PUSH
50611: LD_INT 107
50613: PUSH
50614: LD_INT 108
50616: PUSH
50617: LD_INT 109
50619: PUSH
50620: LD_INT 110
50622: PUSH
50623: LD_INT 111
50625: PUSH
50626: LD_INT 112
50628: PUSH
50629: LD_INT 113
50631: PUSH
50632: LD_INT 114
50634: PUSH
50635: LD_INT 115
50637: PUSH
50638: LD_INT 116
50640: PUSH
50641: LD_INT 117
50643: PUSH
50644: LD_INT 118
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: ST_TO_ADDR
50671: GO 50674
50673: POP
// end else
50674: GO 50905
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50676: LD_ADDR_VAR 0 2
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: LD_INT 4
50692: PUSH
50693: LD_INT 5
50695: PUSH
50696: LD_INT 6
50698: PUSH
50699: LD_INT 7
50701: PUSH
50702: LD_INT 8
50704: PUSH
50705: LD_INT 9
50707: PUSH
50708: LD_INT 10
50710: PUSH
50711: LD_INT 11
50713: PUSH
50714: LD_INT 12
50716: PUSH
50717: LD_INT 13
50719: PUSH
50720: LD_INT 14
50722: PUSH
50723: LD_INT 15
50725: PUSH
50726: LD_INT 16
50728: PUSH
50729: LD_INT 17
50731: PUSH
50732: LD_INT 18
50734: PUSH
50735: LD_INT 19
50737: PUSH
50738: LD_INT 20
50740: PUSH
50741: LD_INT 21
50743: PUSH
50744: LD_INT 22
50746: PUSH
50747: LD_INT 23
50749: PUSH
50750: LD_INT 24
50752: PUSH
50753: LD_INT 25
50755: PUSH
50756: LD_INT 26
50758: PUSH
50759: LD_INT 27
50761: PUSH
50762: LD_INT 28
50764: PUSH
50765: LD_INT 29
50767: PUSH
50768: LD_INT 30
50770: PUSH
50771: LD_INT 31
50773: PUSH
50774: LD_INT 32
50776: PUSH
50777: LD_INT 33
50779: PUSH
50780: LD_INT 34
50782: PUSH
50783: LD_INT 35
50785: PUSH
50786: LD_INT 36
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 101
50829: PUSH
50830: LD_INT 102
50832: PUSH
50833: LD_INT 103
50835: PUSH
50836: LD_INT 104
50838: PUSH
50839: LD_INT 105
50841: PUSH
50842: LD_INT 106
50844: PUSH
50845: LD_INT 107
50847: PUSH
50848: LD_INT 108
50850: PUSH
50851: LD_INT 109
50853: PUSH
50854: LD_INT 110
50856: PUSH
50857: LD_INT 111
50859: PUSH
50860: LD_INT 112
50862: PUSH
50863: LD_INT 113
50865: PUSH
50866: LD_INT 114
50868: PUSH
50869: LD_INT 115
50871: PUSH
50872: LD_INT 116
50874: PUSH
50875: LD_INT 117
50877: PUSH
50878: LD_INT 118
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// if result then
50905: LD_VAR 0 2
50909: IFFALSE 51695
// begin normal :=  ;
50911: LD_ADDR_VAR 0 5
50915: PUSH
50916: LD_STRING 
50918: ST_TO_ADDR
// hardcore :=  ;
50919: LD_ADDR_VAR 0 6
50923: PUSH
50924: LD_STRING 
50926: ST_TO_ADDR
// active :=  ;
50927: LD_ADDR_VAR 0 7
50931: PUSH
50932: LD_STRING 
50934: ST_TO_ADDR
// for i = 1 to normalCounter do
50935: LD_ADDR_VAR 0 8
50939: PUSH
50940: DOUBLE
50941: LD_INT 1
50943: DEC
50944: ST_TO_ADDR
50945: LD_EXP 50
50949: PUSH
50950: FOR_TO
50951: IFFALSE 51052
// begin tmp := 0 ;
50953: LD_ADDR_VAR 0 3
50957: PUSH
50958: LD_STRING 0
50960: ST_TO_ADDR
// if result [ 1 ] then
50961: LD_VAR 0 2
50965: PUSH
50966: LD_INT 1
50968: ARRAY
50969: IFFALSE 51034
// if result [ 1 ] [ 1 ] = i then
50971: LD_VAR 0 2
50975: PUSH
50976: LD_INT 1
50978: ARRAY
50979: PUSH
50980: LD_INT 1
50982: ARRAY
50983: PUSH
50984: LD_VAR 0 8
50988: EQUAL
50989: IFFALSE 51034
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50991: LD_ADDR_VAR 0 2
50995: PUSH
50996: LD_VAR 0 2
51000: PPUSH
51001: LD_INT 1
51003: PPUSH
51004: LD_VAR 0 2
51008: PUSH
51009: LD_INT 1
51011: ARRAY
51012: PPUSH
51013: LD_INT 1
51015: PPUSH
51016: CALL_OW 3
51020: PPUSH
51021: CALL_OW 1
51025: ST_TO_ADDR
// tmp := 1 ;
51026: LD_ADDR_VAR 0 3
51030: PUSH
51031: LD_STRING 1
51033: ST_TO_ADDR
// end ; normal := normal & tmp ;
51034: LD_ADDR_VAR 0 5
51038: PUSH
51039: LD_VAR 0 5
51043: PUSH
51044: LD_VAR 0 3
51048: STR
51049: ST_TO_ADDR
// end ;
51050: GO 50950
51052: POP
51053: POP
// for i = 1 to hardcoreCounter do
51054: LD_ADDR_VAR 0 8
51058: PUSH
51059: DOUBLE
51060: LD_INT 1
51062: DEC
51063: ST_TO_ADDR
51064: LD_EXP 51
51068: PUSH
51069: FOR_TO
51070: IFFALSE 51175
// begin tmp := 0 ;
51072: LD_ADDR_VAR 0 3
51076: PUSH
51077: LD_STRING 0
51079: ST_TO_ADDR
// if result [ 2 ] then
51080: LD_VAR 0 2
51084: PUSH
51085: LD_INT 2
51087: ARRAY
51088: IFFALSE 51157
// if result [ 2 ] [ 1 ] = 100 + i then
51090: LD_VAR 0 2
51094: PUSH
51095: LD_INT 2
51097: ARRAY
51098: PUSH
51099: LD_INT 1
51101: ARRAY
51102: PUSH
51103: LD_INT 100
51105: PUSH
51106: LD_VAR 0 8
51110: PLUS
51111: EQUAL
51112: IFFALSE 51157
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51114: LD_ADDR_VAR 0 2
51118: PUSH
51119: LD_VAR 0 2
51123: PPUSH
51124: LD_INT 2
51126: PPUSH
51127: LD_VAR 0 2
51131: PUSH
51132: LD_INT 2
51134: ARRAY
51135: PPUSH
51136: LD_INT 1
51138: PPUSH
51139: CALL_OW 3
51143: PPUSH
51144: CALL_OW 1
51148: ST_TO_ADDR
// tmp := 1 ;
51149: LD_ADDR_VAR 0 3
51153: PUSH
51154: LD_STRING 1
51156: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51157: LD_ADDR_VAR 0 6
51161: PUSH
51162: LD_VAR 0 6
51166: PUSH
51167: LD_VAR 0 3
51171: STR
51172: ST_TO_ADDR
// end ;
51173: GO 51069
51175: POP
51176: POP
// if isGameLoad then
51177: LD_VAR 0 1
51181: IFFALSE 51656
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
51183: LD_ADDR_VAR 0 4
51187: PUSH
51188: LD_EXP 54
51192: PUSH
51193: LD_EXP 53
51197: PUSH
51198: LD_EXP 55
51202: PUSH
51203: LD_EXP 52
51207: PUSH
51208: LD_EXP 56
51212: PUSH
51213: LD_EXP 57
51217: PUSH
51218: LD_EXP 58
51222: PUSH
51223: LD_EXP 59
51227: PUSH
51228: LD_EXP 60
51232: PUSH
51233: LD_EXP 61
51237: PUSH
51238: LD_EXP 62
51242: PUSH
51243: LD_EXP 63
51247: PUSH
51248: LD_EXP 64
51252: PUSH
51253: LD_EXP 65
51257: PUSH
51258: LD_EXP 73
51262: PUSH
51263: LD_EXP 74
51267: PUSH
51268: LD_EXP 75
51272: PUSH
51273: LD_EXP 76
51277: PUSH
51278: LD_EXP 78
51282: PUSH
51283: LD_EXP 79
51287: PUSH
51288: LD_EXP 80
51292: PUSH
51293: LD_EXP 83
51297: PUSH
51298: LD_EXP 85
51302: PUSH
51303: LD_EXP 86
51307: PUSH
51308: LD_EXP 87
51312: PUSH
51313: LD_EXP 89
51317: PUSH
51318: LD_EXP 90
51322: PUSH
51323: LD_EXP 93
51327: PUSH
51328: LD_EXP 94
51332: PUSH
51333: LD_EXP 95
51337: PUSH
51338: LD_EXP 96
51342: PUSH
51343: LD_EXP 97
51347: PUSH
51348: LD_EXP 98
51352: PUSH
51353: LD_EXP 99
51357: PUSH
51358: LD_EXP 100
51362: PUSH
51363: LD_EXP 101
51367: PUSH
51368: LD_EXP 66
51372: PUSH
51373: LD_EXP 67
51377: PUSH
51378: LD_EXP 70
51382: PUSH
51383: LD_EXP 71
51387: PUSH
51388: LD_EXP 72
51392: PUSH
51393: LD_EXP 68
51397: PUSH
51398: LD_EXP 69
51402: PUSH
51403: LD_EXP 77
51407: PUSH
51408: LD_EXP 81
51412: PUSH
51413: LD_EXP 82
51417: PUSH
51418: LD_EXP 84
51422: PUSH
51423: LD_EXP 88
51427: PUSH
51428: LD_EXP 91
51432: PUSH
51433: LD_EXP 92
51437: PUSH
51438: LD_EXP 102
51442: PUSH
51443: LD_EXP 103
51447: PUSH
51448: LD_EXP 104
51452: PUSH
51453: LD_EXP 105
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: ST_TO_ADDR
// tmp :=  ;
51514: LD_ADDR_VAR 0 3
51518: PUSH
51519: LD_STRING 
51521: ST_TO_ADDR
// for i = 1 to normalCounter do
51522: LD_ADDR_VAR 0 8
51526: PUSH
51527: DOUBLE
51528: LD_INT 1
51530: DEC
51531: ST_TO_ADDR
51532: LD_EXP 50
51536: PUSH
51537: FOR_TO
51538: IFFALSE 51574
// begin if flags [ i ] then
51540: LD_VAR 0 4
51544: PUSH
51545: LD_VAR 0 8
51549: ARRAY
51550: IFFALSE 51572
// tmp := tmp & i & ; ;
51552: LD_ADDR_VAR 0 3
51556: PUSH
51557: LD_VAR 0 3
51561: PUSH
51562: LD_VAR 0 8
51566: STR
51567: PUSH
51568: LD_STRING ;
51570: STR
51571: ST_TO_ADDR
// end ;
51572: GO 51537
51574: POP
51575: POP
// for i = 1 to hardcoreCounter do
51576: LD_ADDR_VAR 0 8
51580: PUSH
51581: DOUBLE
51582: LD_INT 1
51584: DEC
51585: ST_TO_ADDR
51586: LD_EXP 51
51590: PUSH
51591: FOR_TO
51592: IFFALSE 51638
// begin if flags [ normalCounter + i ] then
51594: LD_VAR 0 4
51598: PUSH
51599: LD_EXP 50
51603: PUSH
51604: LD_VAR 0 8
51608: PLUS
51609: ARRAY
51610: IFFALSE 51636
// tmp := tmp & ( 100 + i ) & ; ;
51612: LD_ADDR_VAR 0 3
51616: PUSH
51617: LD_VAR 0 3
51621: PUSH
51622: LD_INT 100
51624: PUSH
51625: LD_VAR 0 8
51629: PLUS
51630: STR
51631: PUSH
51632: LD_STRING ;
51634: STR
51635: ST_TO_ADDR
// end ;
51636: GO 51591
51638: POP
51639: POP
// if tmp then
51640: LD_VAR 0 3
51644: IFFALSE 51656
// active := tmp ;
51646: LD_ADDR_VAR 0 7
51650: PUSH
51651: LD_VAR 0 3
51655: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51656: LD_STRING getStreamItemsFromMission("
51658: PUSH
51659: LD_VAR 0 5
51663: STR
51664: PUSH
51665: LD_STRING ","
51667: STR
51668: PUSH
51669: LD_VAR 0 6
51673: STR
51674: PUSH
51675: LD_STRING ","
51677: STR
51678: PUSH
51679: LD_VAR 0 7
51683: STR
51684: PUSH
51685: LD_STRING ")
51687: STR
51688: PPUSH
51689: CALL_OW 559
// end else
51693: GO 51702
// ToLua ( getStreamItemsFromMission("","","") ) ;
51695: LD_STRING getStreamItemsFromMission("","","")
51697: PPUSH
51698: CALL_OW 559
// end ;
51702: LD_VAR 0 2
51706: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51707: LD_EXP 49
51711: PUSH
51712: LD_EXP 54
51716: AND
51717: IFFALSE 51841
51719: GO 51721
51721: DISABLE
51722: LD_INT 0
51724: PPUSH
51725: PPUSH
// begin enable ;
51726: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51727: LD_ADDR_VAR 0 2
51731: PUSH
51732: LD_INT 22
51734: PUSH
51735: LD_OWVAR 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: LD_INT 34
51749: PUSH
51750: LD_INT 7
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 34
51759: PUSH
51760: LD_INT 45
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 34
51769: PUSH
51770: LD_INT 28
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 34
51779: PUSH
51780: LD_INT 47
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PPUSH
51798: CALL_OW 69
51802: ST_TO_ADDR
// if not tmp then
51803: LD_VAR 0 2
51807: NOT
51808: IFFALSE 51812
// exit ;
51810: GO 51841
// for i in tmp do
51812: LD_ADDR_VAR 0 1
51816: PUSH
51817: LD_VAR 0 2
51821: PUSH
51822: FOR_IN
51823: IFFALSE 51839
// begin SetLives ( i , 0 ) ;
51825: LD_VAR 0 1
51829: PPUSH
51830: LD_INT 0
51832: PPUSH
51833: CALL_OW 234
// end ;
51837: GO 51822
51839: POP
51840: POP
// end ;
51841: PPOPN 2
51843: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51844: LD_EXP 49
51848: PUSH
51849: LD_EXP 55
51853: AND
51854: IFFALSE 51938
51856: GO 51858
51858: DISABLE
51859: LD_INT 0
51861: PPUSH
51862: PPUSH
// begin enable ;
51863: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51864: LD_ADDR_VAR 0 2
51868: PUSH
51869: LD_INT 22
51871: PUSH
51872: LD_OWVAR 2
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 32
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PPUSH
51895: CALL_OW 69
51899: ST_TO_ADDR
// if not tmp then
51900: LD_VAR 0 2
51904: NOT
51905: IFFALSE 51909
// exit ;
51907: GO 51938
// for i in tmp do
51909: LD_ADDR_VAR 0 1
51913: PUSH
51914: LD_VAR 0 2
51918: PUSH
51919: FOR_IN
51920: IFFALSE 51936
// begin SetLives ( i , 0 ) ;
51922: LD_VAR 0 1
51926: PPUSH
51927: LD_INT 0
51929: PPUSH
51930: CALL_OW 234
// end ;
51934: GO 51919
51936: POP
51937: POP
// end ;
51938: PPOPN 2
51940: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51941: LD_EXP 49
51945: PUSH
51946: LD_EXP 52
51950: AND
51951: IFFALSE 52044
51953: GO 51955
51955: DISABLE
51956: LD_INT 0
51958: PPUSH
// begin enable ;
51959: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51960: LD_ADDR_VAR 0 1
51964: PUSH
51965: LD_INT 22
51967: PUSH
51968: LD_OWVAR 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 25
51982: PUSH
51983: LD_INT 5
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 25
51992: PUSH
51993: LD_INT 9
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 25
52002: PUSH
52003: LD_INT 8
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PPUSH
52020: CALL_OW 69
52024: PUSH
52025: FOR_IN
52026: IFFALSE 52042
// begin SetClass ( i , 1 ) ;
52028: LD_VAR 0 1
52032: PPUSH
52033: LD_INT 1
52035: PPUSH
52036: CALL_OW 336
// end ;
52040: GO 52025
52042: POP
52043: POP
// end ;
52044: PPOPN 1
52046: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52047: LD_EXP 49
52051: PUSH
52052: LD_EXP 53
52056: AND
52057: PUSH
52058: LD_OWVAR 65
52062: PUSH
52063: LD_INT 7
52065: LESS
52066: AND
52067: IFFALSE 52081
52069: GO 52071
52071: DISABLE
// begin enable ;
52072: ENABLE
// game_speed := 7 ;
52073: LD_ADDR_OWVAR 65
52077: PUSH
52078: LD_INT 7
52080: ST_TO_ADDR
// end ;
52081: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52082: LD_EXP 49
52086: PUSH
52087: LD_EXP 56
52091: AND
52092: IFFALSE 52294
52094: GO 52096
52096: DISABLE
52097: LD_INT 0
52099: PPUSH
52100: PPUSH
52101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52102: LD_ADDR_VAR 0 3
52106: PUSH
52107: LD_INT 81
52109: PUSH
52110: LD_OWVAR 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 21
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PPUSH
52133: CALL_OW 69
52137: ST_TO_ADDR
// if not tmp then
52138: LD_VAR 0 3
52142: NOT
52143: IFFALSE 52147
// exit ;
52145: GO 52294
// if tmp > 5 then
52147: LD_VAR 0 3
52151: PUSH
52152: LD_INT 5
52154: GREATER
52155: IFFALSE 52167
// k := 5 else
52157: LD_ADDR_VAR 0 2
52161: PUSH
52162: LD_INT 5
52164: ST_TO_ADDR
52165: GO 52177
// k := tmp ;
52167: LD_ADDR_VAR 0 2
52171: PUSH
52172: LD_VAR 0 3
52176: ST_TO_ADDR
// for i := 1 to k do
52177: LD_ADDR_VAR 0 1
52181: PUSH
52182: DOUBLE
52183: LD_INT 1
52185: DEC
52186: ST_TO_ADDR
52187: LD_VAR 0 2
52191: PUSH
52192: FOR_TO
52193: IFFALSE 52292
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52195: LD_VAR 0 3
52199: PUSH
52200: LD_VAR 0 1
52204: ARRAY
52205: PPUSH
52206: LD_VAR 0 1
52210: PUSH
52211: LD_INT 4
52213: MOD
52214: PUSH
52215: LD_INT 1
52217: PLUS
52218: PPUSH
52219: CALL_OW 259
52223: PUSH
52224: LD_INT 10
52226: LESS
52227: IFFALSE 52290
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52229: LD_VAR 0 3
52233: PUSH
52234: LD_VAR 0 1
52238: ARRAY
52239: PPUSH
52240: LD_VAR 0 1
52244: PUSH
52245: LD_INT 4
52247: MOD
52248: PUSH
52249: LD_INT 1
52251: PLUS
52252: PPUSH
52253: LD_VAR 0 3
52257: PUSH
52258: LD_VAR 0 1
52262: ARRAY
52263: PPUSH
52264: LD_VAR 0 1
52268: PUSH
52269: LD_INT 4
52271: MOD
52272: PUSH
52273: LD_INT 1
52275: PLUS
52276: PPUSH
52277: CALL_OW 259
52281: PUSH
52282: LD_INT 1
52284: PLUS
52285: PPUSH
52286: CALL_OW 237
52290: GO 52192
52292: POP
52293: POP
// end ;
52294: PPOPN 3
52296: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52297: LD_EXP 49
52301: PUSH
52302: LD_EXP 57
52306: AND
52307: IFFALSE 52327
52309: GO 52311
52311: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52312: LD_INT 4
52314: PPUSH
52315: LD_OWVAR 2
52319: PPUSH
52320: LD_INT 0
52322: PPUSH
52323: CALL_OW 324
52327: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52328: LD_EXP 49
52332: PUSH
52333: LD_EXP 86
52337: AND
52338: IFFALSE 52358
52340: GO 52342
52342: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52343: LD_INT 19
52345: PPUSH
52346: LD_OWVAR 2
52350: PPUSH
52351: LD_INT 0
52353: PPUSH
52354: CALL_OW 324
52358: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52359: LD_EXP 49
52363: PUSH
52364: LD_EXP 58
52368: AND
52369: IFFALSE 52471
52371: GO 52373
52373: DISABLE
52374: LD_INT 0
52376: PPUSH
52377: PPUSH
// begin enable ;
52378: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52379: LD_ADDR_VAR 0 2
52383: PUSH
52384: LD_INT 22
52386: PUSH
52387: LD_OWVAR 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: LD_INT 34
52401: PUSH
52402: LD_INT 11
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 34
52411: PUSH
52412: LD_INT 30
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: LIST
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PPUSH
52428: CALL_OW 69
52432: ST_TO_ADDR
// if not tmp then
52433: LD_VAR 0 2
52437: NOT
52438: IFFALSE 52442
// exit ;
52440: GO 52471
// for i in tmp do
52442: LD_ADDR_VAR 0 1
52446: PUSH
52447: LD_VAR 0 2
52451: PUSH
52452: FOR_IN
52453: IFFALSE 52469
// begin SetLives ( i , 0 ) ;
52455: LD_VAR 0 1
52459: PPUSH
52460: LD_INT 0
52462: PPUSH
52463: CALL_OW 234
// end ;
52467: GO 52452
52469: POP
52470: POP
// end ;
52471: PPOPN 2
52473: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52474: LD_EXP 49
52478: PUSH
52479: LD_EXP 59
52483: AND
52484: IFFALSE 52504
52486: GO 52488
52488: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52489: LD_INT 32
52491: PPUSH
52492: LD_OWVAR 2
52496: PPUSH
52497: LD_INT 0
52499: PPUSH
52500: CALL_OW 324
52504: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52505: LD_EXP 49
52509: PUSH
52510: LD_EXP 60
52514: AND
52515: IFFALSE 52696
52517: GO 52519
52519: DISABLE
52520: LD_INT 0
52522: PPUSH
52523: PPUSH
52524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52525: LD_ADDR_VAR 0 2
52529: PUSH
52530: LD_INT 22
52532: PUSH
52533: LD_OWVAR 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 33
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PPUSH
52556: CALL_OW 69
52560: ST_TO_ADDR
// if not tmp then
52561: LD_VAR 0 2
52565: NOT
52566: IFFALSE 52570
// exit ;
52568: GO 52696
// side := 0 ;
52570: LD_ADDR_VAR 0 3
52574: PUSH
52575: LD_INT 0
52577: ST_TO_ADDR
// for i := 1 to 8 do
52578: LD_ADDR_VAR 0 1
52582: PUSH
52583: DOUBLE
52584: LD_INT 1
52586: DEC
52587: ST_TO_ADDR
52588: LD_INT 8
52590: PUSH
52591: FOR_TO
52592: IFFALSE 52640
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52594: LD_OWVAR 2
52598: PUSH
52599: LD_VAR 0 1
52603: NONEQUAL
52604: PUSH
52605: LD_OWVAR 2
52609: PPUSH
52610: LD_VAR 0 1
52614: PPUSH
52615: CALL_OW 81
52619: PUSH
52620: LD_INT 2
52622: EQUAL
52623: AND
52624: IFFALSE 52638
// begin side := i ;
52626: LD_ADDR_VAR 0 3
52630: PUSH
52631: LD_VAR 0 1
52635: ST_TO_ADDR
// break ;
52636: GO 52640
// end ;
52638: GO 52591
52640: POP
52641: POP
// if not side then
52642: LD_VAR 0 3
52646: NOT
52647: IFFALSE 52651
// exit ;
52649: GO 52696
// for i := 1 to tmp do
52651: LD_ADDR_VAR 0 1
52655: PUSH
52656: DOUBLE
52657: LD_INT 1
52659: DEC
52660: ST_TO_ADDR
52661: LD_VAR 0 2
52665: PUSH
52666: FOR_TO
52667: IFFALSE 52694
// if Prob ( 60 ) then
52669: LD_INT 60
52671: PPUSH
52672: CALL_OW 13
52676: IFFALSE 52692
// SetSide ( i , side ) ;
52678: LD_VAR 0 1
52682: PPUSH
52683: LD_VAR 0 3
52687: PPUSH
52688: CALL_OW 235
52692: GO 52666
52694: POP
52695: POP
// end ;
52696: PPOPN 3
52698: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52699: LD_EXP 49
52703: PUSH
52704: LD_EXP 62
52708: AND
52709: IFFALSE 52828
52711: GO 52713
52713: DISABLE
52714: LD_INT 0
52716: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52717: LD_ADDR_VAR 0 1
52721: PUSH
52722: LD_INT 22
52724: PUSH
52725: LD_OWVAR 2
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 21
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: LD_INT 23
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: PPUSH
52766: CALL_OW 69
52770: PUSH
52771: FOR_IN
52772: IFFALSE 52826
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52774: LD_VAR 0 1
52778: PPUSH
52779: CALL_OW 257
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: LD_INT 4
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: IN
52802: IFFALSE 52824
// SetClass ( un , rand ( 1 , 4 ) ) ;
52804: LD_VAR 0 1
52808: PPUSH
52809: LD_INT 1
52811: PPUSH
52812: LD_INT 4
52814: PPUSH
52815: CALL_OW 12
52819: PPUSH
52820: CALL_OW 336
52824: GO 52771
52826: POP
52827: POP
// end ;
52828: PPOPN 1
52830: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52831: LD_EXP 49
52835: PUSH
52836: LD_EXP 61
52840: AND
52841: IFFALSE 52920
52843: GO 52845
52845: DISABLE
52846: LD_INT 0
52848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52849: LD_ADDR_VAR 0 1
52853: PUSH
52854: LD_INT 22
52856: PUSH
52857: LD_OWVAR 2
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 21
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PPUSH
52880: CALL_OW 69
52884: ST_TO_ADDR
// if not tmp then
52885: LD_VAR 0 1
52889: NOT
52890: IFFALSE 52894
// exit ;
52892: GO 52920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52894: LD_VAR 0 1
52898: PUSH
52899: LD_INT 1
52901: PPUSH
52902: LD_VAR 0 1
52906: PPUSH
52907: CALL_OW 12
52911: ARRAY
52912: PPUSH
52913: LD_INT 100
52915: PPUSH
52916: CALL_OW 234
// end ;
52920: PPOPN 1
52922: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52923: LD_EXP 49
52927: PUSH
52928: LD_EXP 63
52932: AND
52933: IFFALSE 53031
52935: GO 52937
52937: DISABLE
52938: LD_INT 0
52940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52941: LD_ADDR_VAR 0 1
52945: PUSH
52946: LD_INT 22
52948: PUSH
52949: LD_OWVAR 2
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 21
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PPUSH
52972: CALL_OW 69
52976: ST_TO_ADDR
// if not tmp then
52977: LD_VAR 0 1
52981: NOT
52982: IFFALSE 52986
// exit ;
52984: GO 53031
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52986: LD_VAR 0 1
52990: PUSH
52991: LD_INT 1
52993: PPUSH
52994: LD_VAR 0 1
52998: PPUSH
52999: CALL_OW 12
53003: ARRAY
53004: PPUSH
53005: LD_INT 1
53007: PPUSH
53008: LD_INT 4
53010: PPUSH
53011: CALL_OW 12
53015: PPUSH
53016: LD_INT 3000
53018: PPUSH
53019: LD_INT 9000
53021: PPUSH
53022: CALL_OW 12
53026: PPUSH
53027: CALL_OW 492
// end ;
53031: PPOPN 1
53033: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53034: LD_EXP 49
53038: PUSH
53039: LD_EXP 64
53043: AND
53044: IFFALSE 53064
53046: GO 53048
53048: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53049: LD_INT 1
53051: PPUSH
53052: LD_OWVAR 2
53056: PPUSH
53057: LD_INT 0
53059: PPUSH
53060: CALL_OW 324
53064: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53065: LD_EXP 49
53069: PUSH
53070: LD_EXP 65
53074: AND
53075: IFFALSE 53158
53077: GO 53079
53079: DISABLE
53080: LD_INT 0
53082: PPUSH
53083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53084: LD_ADDR_VAR 0 2
53088: PUSH
53089: LD_INT 22
53091: PUSH
53092: LD_OWVAR 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 21
53103: PUSH
53104: LD_INT 3
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PPUSH
53115: CALL_OW 69
53119: ST_TO_ADDR
// if not tmp then
53120: LD_VAR 0 2
53124: NOT
53125: IFFALSE 53129
// exit ;
53127: GO 53158
// for i in tmp do
53129: LD_ADDR_VAR 0 1
53133: PUSH
53134: LD_VAR 0 2
53138: PUSH
53139: FOR_IN
53140: IFFALSE 53156
// SetBLevel ( i , 10 ) ;
53142: LD_VAR 0 1
53146: PPUSH
53147: LD_INT 10
53149: PPUSH
53150: CALL_OW 241
53154: GO 53139
53156: POP
53157: POP
// end ;
53158: PPOPN 2
53160: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53161: LD_EXP 49
53165: PUSH
53166: LD_EXP 66
53170: AND
53171: IFFALSE 53282
53173: GO 53175
53175: DISABLE
53176: LD_INT 0
53178: PPUSH
53179: PPUSH
53180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53181: LD_ADDR_VAR 0 3
53185: PUSH
53186: LD_INT 22
53188: PUSH
53189: LD_OWVAR 2
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 25
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PPUSH
53212: CALL_OW 69
53216: ST_TO_ADDR
// if not tmp then
53217: LD_VAR 0 3
53221: NOT
53222: IFFALSE 53226
// exit ;
53224: GO 53282
// un := tmp [ rand ( 1 , tmp ) ] ;
53226: LD_ADDR_VAR 0 2
53230: PUSH
53231: LD_VAR 0 3
53235: PUSH
53236: LD_INT 1
53238: PPUSH
53239: LD_VAR 0 3
53243: PPUSH
53244: CALL_OW 12
53248: ARRAY
53249: ST_TO_ADDR
// if Crawls ( un ) then
53250: LD_VAR 0 2
53254: PPUSH
53255: CALL_OW 318
53259: IFFALSE 53270
// ComWalk ( un ) ;
53261: LD_VAR 0 2
53265: PPUSH
53266: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53270: LD_VAR 0 2
53274: PPUSH
53275: LD_INT 5
53277: PPUSH
53278: CALL_OW 336
// end ;
53282: PPOPN 3
53284: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53285: LD_EXP 49
53289: PUSH
53290: LD_EXP 67
53294: AND
53295: PUSH
53296: LD_OWVAR 67
53300: PUSH
53301: LD_INT 4
53303: LESS
53304: AND
53305: IFFALSE 53324
53307: GO 53309
53309: DISABLE
// begin Difficulty := Difficulty + 1 ;
53310: LD_ADDR_OWVAR 67
53314: PUSH
53315: LD_OWVAR 67
53319: PUSH
53320: LD_INT 1
53322: PLUS
53323: ST_TO_ADDR
// end ;
53324: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53325: LD_EXP 49
53329: PUSH
53330: LD_EXP 68
53334: AND
53335: IFFALSE 53438
53337: GO 53339
53339: DISABLE
53340: LD_INT 0
53342: PPUSH
// begin for i := 1 to 5 do
53343: LD_ADDR_VAR 0 1
53347: PUSH
53348: DOUBLE
53349: LD_INT 1
53351: DEC
53352: ST_TO_ADDR
53353: LD_INT 5
53355: PUSH
53356: FOR_TO
53357: IFFALSE 53436
// begin uc_nation := nation_nature ;
53359: LD_ADDR_OWVAR 21
53363: PUSH
53364: LD_INT 0
53366: ST_TO_ADDR
// uc_side := 0 ;
53367: LD_ADDR_OWVAR 20
53371: PUSH
53372: LD_INT 0
53374: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53375: LD_ADDR_OWVAR 29
53379: PUSH
53380: LD_INT 12
53382: PUSH
53383: LD_INT 12
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: ST_TO_ADDR
// hc_agressivity := 20 ;
53390: LD_ADDR_OWVAR 35
53394: PUSH
53395: LD_INT 20
53397: ST_TO_ADDR
// hc_class := class_tiger ;
53398: LD_ADDR_OWVAR 28
53402: PUSH
53403: LD_INT 14
53405: ST_TO_ADDR
// hc_gallery :=  ;
53406: LD_ADDR_OWVAR 33
53410: PUSH
53411: LD_STRING 
53413: ST_TO_ADDR
// hc_name :=  ;
53414: LD_ADDR_OWVAR 26
53418: PUSH
53419: LD_STRING 
53421: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53422: CALL_OW 44
53426: PPUSH
53427: LD_INT 0
53429: PPUSH
53430: CALL_OW 51
// end ;
53434: GO 53356
53436: POP
53437: POP
// end ;
53438: PPOPN 1
53440: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53441: LD_EXP 49
53445: PUSH
53446: LD_EXP 69
53450: AND
53451: IFFALSE 53460
53453: GO 53455
53455: DISABLE
// StreamSibBomb ;
53456: CALL 53461 0 0
53460: END
// export function StreamSibBomb ; var i , x , y ; begin
53461: LD_INT 0
53463: PPUSH
53464: PPUSH
53465: PPUSH
53466: PPUSH
// result := false ;
53467: LD_ADDR_VAR 0 1
53471: PUSH
53472: LD_INT 0
53474: ST_TO_ADDR
// for i := 1 to 16 do
53475: LD_ADDR_VAR 0 2
53479: PUSH
53480: DOUBLE
53481: LD_INT 1
53483: DEC
53484: ST_TO_ADDR
53485: LD_INT 16
53487: PUSH
53488: FOR_TO
53489: IFFALSE 53688
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53491: LD_ADDR_VAR 0 3
53495: PUSH
53496: LD_INT 10
53498: PUSH
53499: LD_INT 20
53501: PUSH
53502: LD_INT 30
53504: PUSH
53505: LD_INT 40
53507: PUSH
53508: LD_INT 50
53510: PUSH
53511: LD_INT 60
53513: PUSH
53514: LD_INT 70
53516: PUSH
53517: LD_INT 80
53519: PUSH
53520: LD_INT 90
53522: PUSH
53523: LD_INT 100
53525: PUSH
53526: LD_INT 110
53528: PUSH
53529: LD_INT 120
53531: PUSH
53532: LD_INT 130
53534: PUSH
53535: LD_INT 140
53537: PUSH
53538: LD_INT 150
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PPUSH
53561: LD_INT 15
53563: PPUSH
53564: CALL_OW 12
53568: ARRAY
53569: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53570: LD_ADDR_VAR 0 4
53574: PUSH
53575: LD_INT 10
53577: PUSH
53578: LD_INT 20
53580: PUSH
53581: LD_INT 30
53583: PUSH
53584: LD_INT 40
53586: PUSH
53587: LD_INT 50
53589: PUSH
53590: LD_INT 60
53592: PUSH
53593: LD_INT 70
53595: PUSH
53596: LD_INT 80
53598: PUSH
53599: LD_INT 90
53601: PUSH
53602: LD_INT 100
53604: PUSH
53605: LD_INT 110
53607: PUSH
53608: LD_INT 120
53610: PUSH
53611: LD_INT 130
53613: PUSH
53614: LD_INT 140
53616: PUSH
53617: LD_INT 150
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PPUSH
53640: LD_INT 15
53642: PPUSH
53643: CALL_OW 12
53647: ARRAY
53648: ST_TO_ADDR
// if ValidHex ( x , y ) then
53649: LD_VAR 0 3
53653: PPUSH
53654: LD_VAR 0 4
53658: PPUSH
53659: CALL_OW 488
53663: IFFALSE 53686
// begin result := [ x , y ] ;
53665: LD_ADDR_VAR 0 1
53669: PUSH
53670: LD_VAR 0 3
53674: PUSH
53675: LD_VAR 0 4
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: ST_TO_ADDR
// break ;
53684: GO 53688
// end ; end ;
53686: GO 53488
53688: POP
53689: POP
// if result then
53690: LD_VAR 0 1
53694: IFFALSE 53754
// begin ToLua ( playSibBomb() ) ;
53696: LD_STRING playSibBomb()
53698: PPUSH
53699: CALL_OW 559
// wait ( 0 0$14 ) ;
53703: LD_INT 490
53705: PPUSH
53706: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53710: LD_VAR 0 1
53714: PUSH
53715: LD_INT 1
53717: ARRAY
53718: PPUSH
53719: LD_VAR 0 1
53723: PUSH
53724: LD_INT 2
53726: ARRAY
53727: PPUSH
53728: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53732: LD_VAR 0 1
53736: PUSH
53737: LD_INT 1
53739: ARRAY
53740: PPUSH
53741: LD_VAR 0 1
53745: PUSH
53746: LD_INT 2
53748: ARRAY
53749: PPUSH
53750: CALL_OW 429
// end ; end ;
53754: LD_VAR 0 1
53758: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53759: LD_EXP 49
53763: PUSH
53764: LD_EXP 71
53768: AND
53769: IFFALSE 53781
53771: GO 53773
53773: DISABLE
// YouLost (  ) ;
53774: LD_STRING 
53776: PPUSH
53777: CALL_OW 104
53781: END
// every 0 0$1 trigger StreamModeActive and sFog do
53782: LD_EXP 49
53786: PUSH
53787: LD_EXP 70
53791: AND
53792: IFFALSE 53806
53794: GO 53796
53796: DISABLE
// FogOff ( your_side ) ;
53797: LD_OWVAR 2
53801: PPUSH
53802: CALL_OW 344
53806: END
// every 0 0$1 trigger StreamModeActive and sSun do
53807: LD_EXP 49
53811: PUSH
53812: LD_EXP 72
53816: AND
53817: IFFALSE 53845
53819: GO 53821
53821: DISABLE
// begin solar_recharge_percent := 0 ;
53822: LD_ADDR_OWVAR 79
53826: PUSH
53827: LD_INT 0
53829: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53830: LD_INT 10500
53832: PPUSH
53833: CALL_OW 67
// solar_recharge_percent := 100 ;
53837: LD_ADDR_OWVAR 79
53841: PUSH
53842: LD_INT 100
53844: ST_TO_ADDR
// end ;
53845: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53846: LD_EXP 49
53850: PUSH
53851: LD_EXP 73
53855: AND
53856: IFFALSE 54095
53858: GO 53860
53860: DISABLE
53861: LD_INT 0
53863: PPUSH
53864: PPUSH
53865: PPUSH
// begin tmp := [ ] ;
53866: LD_ADDR_VAR 0 3
53870: PUSH
53871: EMPTY
53872: ST_TO_ADDR
// for i := 1 to 6 do
53873: LD_ADDR_VAR 0 1
53877: PUSH
53878: DOUBLE
53879: LD_INT 1
53881: DEC
53882: ST_TO_ADDR
53883: LD_INT 6
53885: PUSH
53886: FOR_TO
53887: IFFALSE 53992
// begin uc_nation := nation_nature ;
53889: LD_ADDR_OWVAR 21
53893: PUSH
53894: LD_INT 0
53896: ST_TO_ADDR
// uc_side := 0 ;
53897: LD_ADDR_OWVAR 20
53901: PUSH
53902: LD_INT 0
53904: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53905: LD_ADDR_OWVAR 29
53909: PUSH
53910: LD_INT 12
53912: PUSH
53913: LD_INT 12
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: ST_TO_ADDR
// hc_agressivity := 20 ;
53920: LD_ADDR_OWVAR 35
53924: PUSH
53925: LD_INT 20
53927: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53928: LD_ADDR_OWVAR 28
53932: PUSH
53933: LD_INT 17
53935: ST_TO_ADDR
// hc_gallery :=  ;
53936: LD_ADDR_OWVAR 33
53940: PUSH
53941: LD_STRING 
53943: ST_TO_ADDR
// hc_name :=  ;
53944: LD_ADDR_OWVAR 26
53948: PUSH
53949: LD_STRING 
53951: ST_TO_ADDR
// un := CreateHuman ;
53952: LD_ADDR_VAR 0 2
53956: PUSH
53957: CALL_OW 44
53961: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53962: LD_VAR 0 2
53966: PPUSH
53967: LD_INT 1
53969: PPUSH
53970: CALL_OW 51
// tmp := tmp ^ un ;
53974: LD_ADDR_VAR 0 3
53978: PUSH
53979: LD_VAR 0 3
53983: PUSH
53984: LD_VAR 0 2
53988: ADD
53989: ST_TO_ADDR
// end ;
53990: GO 53886
53992: POP
53993: POP
// repeat wait ( 0 0$1 ) ;
53994: LD_INT 35
53996: PPUSH
53997: CALL_OW 67
// for un in tmp do
54001: LD_ADDR_VAR 0 2
54005: PUSH
54006: LD_VAR 0 3
54010: PUSH
54011: FOR_IN
54012: IFFALSE 54086
// begin if IsDead ( un ) then
54014: LD_VAR 0 2
54018: PPUSH
54019: CALL_OW 301
54023: IFFALSE 54043
// begin tmp := tmp diff un ;
54025: LD_ADDR_VAR 0 3
54029: PUSH
54030: LD_VAR 0 3
54034: PUSH
54035: LD_VAR 0 2
54039: DIFF
54040: ST_TO_ADDR
// continue ;
54041: GO 54011
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54043: LD_VAR 0 2
54047: PPUSH
54048: LD_INT 3
54050: PUSH
54051: LD_INT 22
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PPUSH
54065: CALL_OW 69
54069: PPUSH
54070: LD_VAR 0 2
54074: PPUSH
54075: CALL_OW 74
54079: PPUSH
54080: CALL_OW 115
// end ;
54084: GO 54011
54086: POP
54087: POP
// until not tmp ;
54088: LD_VAR 0 3
54092: NOT
54093: IFFALSE 53994
// end ;
54095: PPOPN 3
54097: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54098: LD_EXP 49
54102: PUSH
54103: LD_EXP 74
54107: AND
54108: IFFALSE 54162
54110: GO 54112
54112: DISABLE
// begin ToLua ( displayTroll(); ) ;
54113: LD_STRING displayTroll();
54115: PPUSH
54116: CALL_OW 559
// wait ( 3 3$00 ) ;
54120: LD_INT 6300
54122: PPUSH
54123: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54127: LD_STRING hideTroll();
54129: PPUSH
54130: CALL_OW 559
// wait ( 1 1$00 ) ;
54134: LD_INT 2100
54136: PPUSH
54137: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54141: LD_STRING displayTroll();
54143: PPUSH
54144: CALL_OW 559
// wait ( 1 1$00 ) ;
54148: LD_INT 2100
54150: PPUSH
54151: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54155: LD_STRING hideTroll();
54157: PPUSH
54158: CALL_OW 559
// end ;
54162: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54163: LD_EXP 49
54167: PUSH
54168: LD_EXP 75
54172: AND
54173: IFFALSE 54236
54175: GO 54177
54177: DISABLE
54178: LD_INT 0
54180: PPUSH
// begin p := 0 ;
54181: LD_ADDR_VAR 0 1
54185: PUSH
54186: LD_INT 0
54188: ST_TO_ADDR
// repeat game_speed := 1 ;
54189: LD_ADDR_OWVAR 65
54193: PUSH
54194: LD_INT 1
54196: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54197: LD_INT 35
54199: PPUSH
54200: CALL_OW 67
// p := p + 1 ;
54204: LD_ADDR_VAR 0 1
54208: PUSH
54209: LD_VAR 0 1
54213: PUSH
54214: LD_INT 1
54216: PLUS
54217: ST_TO_ADDR
// until p >= 60 ;
54218: LD_VAR 0 1
54222: PUSH
54223: LD_INT 60
54225: GREATEREQUAL
54226: IFFALSE 54189
// game_speed := 4 ;
54228: LD_ADDR_OWVAR 65
54232: PUSH
54233: LD_INT 4
54235: ST_TO_ADDR
// end ;
54236: PPOPN 1
54238: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54239: LD_EXP 49
54243: PUSH
54244: LD_EXP 76
54248: AND
54249: IFFALSE 54395
54251: GO 54253
54253: DISABLE
54254: LD_INT 0
54256: PPUSH
54257: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54258: LD_ADDR_VAR 0 1
54262: PUSH
54263: LD_INT 22
54265: PUSH
54266: LD_OWVAR 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 30
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 30
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PPUSH
54307: CALL_OW 69
54311: ST_TO_ADDR
// if not depot then
54312: LD_VAR 0 1
54316: NOT
54317: IFFALSE 54321
// exit ;
54319: GO 54395
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54321: LD_ADDR_VAR 0 2
54325: PUSH
54326: LD_VAR 0 1
54330: PUSH
54331: LD_INT 1
54333: PPUSH
54334: LD_VAR 0 1
54338: PPUSH
54339: CALL_OW 12
54343: ARRAY
54344: PPUSH
54345: CALL_OW 274
54349: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
54350: LD_VAR 0 2
54354: PPUSH
54355: LD_INT 1
54357: PPUSH
54358: LD_INT 0
54360: PPUSH
54361: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54365: LD_VAR 0 2
54369: PPUSH
54370: LD_INT 2
54372: PPUSH
54373: LD_INT 0
54375: PPUSH
54376: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54380: LD_VAR 0 2
54384: PPUSH
54385: LD_INT 3
54387: PPUSH
54388: LD_INT 0
54390: PPUSH
54391: CALL_OW 277
// end ;
54395: PPOPN 2
54397: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54398: LD_EXP 49
54402: PUSH
54403: LD_EXP 77
54407: AND
54408: IFFALSE 54505
54410: GO 54412
54412: DISABLE
54413: LD_INT 0
54415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54416: LD_ADDR_VAR 0 1
54420: PUSH
54421: LD_INT 22
54423: PUSH
54424: LD_OWVAR 2
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 21
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: LD_INT 23
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: PPUSH
54465: CALL_OW 69
54469: ST_TO_ADDR
// if not tmp then
54470: LD_VAR 0 1
54474: NOT
54475: IFFALSE 54479
// exit ;
54477: GO 54505
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54479: LD_VAR 0 1
54483: PUSH
54484: LD_INT 1
54486: PPUSH
54487: LD_VAR 0 1
54491: PPUSH
54492: CALL_OW 12
54496: ARRAY
54497: PPUSH
54498: LD_INT 200
54500: PPUSH
54501: CALL_OW 234
// end ;
54505: PPOPN 1
54507: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54508: LD_EXP 49
54512: PUSH
54513: LD_EXP 78
54517: AND
54518: IFFALSE 54597
54520: GO 54522
54522: DISABLE
54523: LD_INT 0
54525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54526: LD_ADDR_VAR 0 1
54530: PUSH
54531: LD_INT 22
54533: PUSH
54534: LD_OWVAR 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 21
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PPUSH
54557: CALL_OW 69
54561: ST_TO_ADDR
// if not tmp then
54562: LD_VAR 0 1
54566: NOT
54567: IFFALSE 54571
// exit ;
54569: GO 54597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54571: LD_VAR 0 1
54575: PUSH
54576: LD_INT 1
54578: PPUSH
54579: LD_VAR 0 1
54583: PPUSH
54584: CALL_OW 12
54588: ARRAY
54589: PPUSH
54590: LD_INT 60
54592: PPUSH
54593: CALL_OW 234
// end ;
54597: PPOPN 1
54599: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54600: LD_EXP 49
54604: PUSH
54605: LD_EXP 79
54609: AND
54610: IFFALSE 54709
54612: GO 54614
54614: DISABLE
54615: LD_INT 0
54617: PPUSH
54618: PPUSH
// begin enable ;
54619: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54620: LD_ADDR_VAR 0 1
54624: PUSH
54625: LD_INT 22
54627: PUSH
54628: LD_OWVAR 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 61
54639: PUSH
54640: EMPTY
54641: LIST
54642: PUSH
54643: LD_INT 33
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: PPUSH
54658: CALL_OW 69
54662: ST_TO_ADDR
// if not tmp then
54663: LD_VAR 0 1
54667: NOT
54668: IFFALSE 54672
// exit ;
54670: GO 54709
// for i in tmp do
54672: LD_ADDR_VAR 0 2
54676: PUSH
54677: LD_VAR 0 1
54681: PUSH
54682: FOR_IN
54683: IFFALSE 54707
// if IsControledBy ( i ) then
54685: LD_VAR 0 2
54689: PPUSH
54690: CALL_OW 312
54694: IFFALSE 54705
// ComUnlink ( i ) ;
54696: LD_VAR 0 2
54700: PPUSH
54701: CALL_OW 136
54705: GO 54682
54707: POP
54708: POP
// end ;
54709: PPOPN 2
54711: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54712: LD_EXP 49
54716: PUSH
54717: LD_EXP 80
54721: AND
54722: IFFALSE 54862
54724: GO 54726
54726: DISABLE
54727: LD_INT 0
54729: PPUSH
54730: PPUSH
// begin ToLua ( displayPowell(); ) ;
54731: LD_STRING displayPowell();
54733: PPUSH
54734: CALL_OW 559
// uc_side := 0 ;
54738: LD_ADDR_OWVAR 20
54742: PUSH
54743: LD_INT 0
54745: ST_TO_ADDR
// uc_nation := 2 ;
54746: LD_ADDR_OWVAR 21
54750: PUSH
54751: LD_INT 2
54753: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54754: LD_ADDR_OWVAR 37
54758: PUSH
54759: LD_INT 14
54761: ST_TO_ADDR
// vc_engine := engine_siberite ;
54762: LD_ADDR_OWVAR 39
54766: PUSH
54767: LD_INT 3
54769: ST_TO_ADDR
// vc_control := control_apeman ;
54770: LD_ADDR_OWVAR 38
54774: PUSH
54775: LD_INT 5
54777: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54778: LD_ADDR_OWVAR 40
54782: PUSH
54783: LD_INT 29
54785: ST_TO_ADDR
// un := CreateVehicle ;
54786: LD_ADDR_VAR 0 2
54790: PUSH
54791: CALL_OW 45
54795: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54796: LD_VAR 0 2
54800: PPUSH
54801: LD_INT 1
54803: PPUSH
54804: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54808: LD_INT 35
54810: PPUSH
54811: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54815: LD_VAR 0 2
54819: PPUSH
54820: LD_INT 22
54822: PUSH
54823: LD_OWVAR 2
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PPUSH
54832: CALL_OW 69
54836: PPUSH
54837: LD_VAR 0 2
54841: PPUSH
54842: CALL_OW 74
54846: PPUSH
54847: CALL_OW 115
// until IsDead ( un ) ;
54851: LD_VAR 0 2
54855: PPUSH
54856: CALL_OW 301
54860: IFFALSE 54808
// end ;
54862: PPOPN 2
54864: END
// every 0 0$1 trigger StreamModeActive and sStu do
54865: LD_EXP 49
54869: PUSH
54870: LD_EXP 88
54874: AND
54875: IFFALSE 54891
54877: GO 54879
54879: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54880: LD_STRING displayStucuk();
54882: PPUSH
54883: CALL_OW 559
// ResetFog ;
54887: CALL_OW 335
// end ;
54891: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54892: LD_EXP 49
54896: PUSH
54897: LD_EXP 81
54901: AND
54902: IFFALSE 55043
54904: GO 54906
54906: DISABLE
54907: LD_INT 0
54909: PPUSH
54910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54911: LD_ADDR_VAR 0 2
54915: PUSH
54916: LD_INT 22
54918: PUSH
54919: LD_OWVAR 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 21
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PPUSH
54942: CALL_OW 69
54946: ST_TO_ADDR
// if not tmp then
54947: LD_VAR 0 2
54951: NOT
54952: IFFALSE 54956
// exit ;
54954: GO 55043
// un := tmp [ rand ( 1 , tmp ) ] ;
54956: LD_ADDR_VAR 0 1
54960: PUSH
54961: LD_VAR 0 2
54965: PUSH
54966: LD_INT 1
54968: PPUSH
54969: LD_VAR 0 2
54973: PPUSH
54974: CALL_OW 12
54978: ARRAY
54979: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54980: LD_VAR 0 1
54984: PPUSH
54985: LD_INT 0
54987: PPUSH
54988: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54992: LD_VAR 0 1
54996: PPUSH
54997: LD_OWVAR 3
55001: PUSH
55002: LD_VAR 0 1
55006: DIFF
55007: PPUSH
55008: LD_VAR 0 1
55012: PPUSH
55013: CALL_OW 74
55017: PPUSH
55018: CALL_OW 115
// wait ( 0 0$20 ) ;
55022: LD_INT 700
55024: PPUSH
55025: CALL_OW 67
// SetSide ( un , your_side ) ;
55029: LD_VAR 0 1
55033: PPUSH
55034: LD_OWVAR 2
55038: PPUSH
55039: CALL_OW 235
// end ;
55043: PPOPN 2
55045: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55046: LD_EXP 49
55050: PUSH
55051: LD_EXP 82
55055: AND
55056: IFFALSE 55162
55058: GO 55060
55060: DISABLE
55061: LD_INT 0
55063: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55064: LD_ADDR_VAR 0 1
55068: PUSH
55069: LD_INT 22
55071: PUSH
55072: LD_OWVAR 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 30
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 30
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: LIST
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PPUSH
55113: CALL_OW 69
55117: ST_TO_ADDR
// if not depot then
55118: LD_VAR 0 1
55122: NOT
55123: IFFALSE 55127
// exit ;
55125: GO 55162
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55127: LD_VAR 0 1
55131: PUSH
55132: LD_INT 1
55134: ARRAY
55135: PPUSH
55136: CALL_OW 250
55140: PPUSH
55141: LD_VAR 0 1
55145: PUSH
55146: LD_INT 1
55148: ARRAY
55149: PPUSH
55150: CALL_OW 251
55154: PPUSH
55155: LD_INT 70
55157: PPUSH
55158: CALL_OW 495
// end ;
55162: PPOPN 1
55164: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55165: LD_EXP 49
55169: PUSH
55170: LD_EXP 83
55174: AND
55175: IFFALSE 55386
55177: GO 55179
55179: DISABLE
55180: LD_INT 0
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55187: LD_ADDR_VAR 0 5
55191: PUSH
55192: LD_INT 22
55194: PUSH
55195: LD_OWVAR 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 21
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PPUSH
55218: CALL_OW 69
55222: ST_TO_ADDR
// if not tmp then
55223: LD_VAR 0 5
55227: NOT
55228: IFFALSE 55232
// exit ;
55230: GO 55386
// for i in tmp do
55232: LD_ADDR_VAR 0 1
55236: PUSH
55237: LD_VAR 0 5
55241: PUSH
55242: FOR_IN
55243: IFFALSE 55384
// begin d := rand ( 0 , 5 ) ;
55245: LD_ADDR_VAR 0 4
55249: PUSH
55250: LD_INT 0
55252: PPUSH
55253: LD_INT 5
55255: PPUSH
55256: CALL_OW 12
55260: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55261: LD_ADDR_VAR 0 2
55265: PUSH
55266: LD_VAR 0 1
55270: PPUSH
55271: CALL_OW 250
55275: PPUSH
55276: LD_VAR 0 4
55280: PPUSH
55281: LD_INT 3
55283: PPUSH
55284: LD_INT 12
55286: PPUSH
55287: CALL_OW 12
55291: PPUSH
55292: CALL_OW 272
55296: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55297: LD_ADDR_VAR 0 3
55301: PUSH
55302: LD_VAR 0 1
55306: PPUSH
55307: CALL_OW 251
55311: PPUSH
55312: LD_VAR 0 4
55316: PPUSH
55317: LD_INT 3
55319: PPUSH
55320: LD_INT 12
55322: PPUSH
55323: CALL_OW 12
55327: PPUSH
55328: CALL_OW 273
55332: ST_TO_ADDR
// if ValidHex ( x , y ) then
55333: LD_VAR 0 2
55337: PPUSH
55338: LD_VAR 0 3
55342: PPUSH
55343: CALL_OW 488
55347: IFFALSE 55382
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
55349: LD_VAR 0 1
55353: PPUSH
55354: LD_VAR 0 2
55358: PPUSH
55359: LD_VAR 0 3
55363: PPUSH
55364: LD_INT 3
55366: PPUSH
55367: LD_INT 6
55369: PPUSH
55370: CALL_OW 12
55374: PPUSH
55375: LD_INT 1
55377: PPUSH
55378: CALL_OW 483
// end ;
55382: GO 55242
55384: POP
55385: POP
// end ;
55386: PPOPN 5
55388: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55389: LD_EXP 49
55393: PUSH
55394: LD_EXP 84
55398: AND
55399: IFFALSE 55493
55401: GO 55403
55403: DISABLE
55404: LD_INT 0
55406: PPUSH
55407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55408: LD_ADDR_VAR 0 2
55412: PUSH
55413: LD_INT 22
55415: PUSH
55416: LD_OWVAR 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 32
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 21
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: LIST
55449: PPUSH
55450: CALL_OW 69
55454: ST_TO_ADDR
// if not tmp then
55455: LD_VAR 0 2
55459: NOT
55460: IFFALSE 55464
// exit ;
55462: GO 55493
// for i in tmp do
55464: LD_ADDR_VAR 0 1
55468: PUSH
55469: LD_VAR 0 2
55473: PUSH
55474: FOR_IN
55475: IFFALSE 55491
// SetFuel ( i , 0 ) ;
55477: LD_VAR 0 1
55481: PPUSH
55482: LD_INT 0
55484: PPUSH
55485: CALL_OW 240
55489: GO 55474
55491: POP
55492: POP
// end ;
55493: PPOPN 2
55495: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55496: LD_EXP 49
55500: PUSH
55501: LD_EXP 85
55505: AND
55506: IFFALSE 55572
55508: GO 55510
55510: DISABLE
55511: LD_INT 0
55513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55514: LD_ADDR_VAR 0 1
55518: PUSH
55519: LD_INT 22
55521: PUSH
55522: LD_OWVAR 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 30
55533: PUSH
55534: LD_INT 29
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PPUSH
55545: CALL_OW 69
55549: ST_TO_ADDR
// if not tmp then
55550: LD_VAR 0 1
55554: NOT
55555: IFFALSE 55559
// exit ;
55557: GO 55572
// DestroyUnit ( tmp [ 1 ] ) ;
55559: LD_VAR 0 1
55563: PUSH
55564: LD_INT 1
55566: ARRAY
55567: PPUSH
55568: CALL_OW 65
// end ;
55572: PPOPN 1
55574: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55575: LD_EXP 49
55579: PUSH
55580: LD_EXP 87
55584: AND
55585: IFFALSE 55714
55587: GO 55589
55589: DISABLE
55590: LD_INT 0
55592: PPUSH
// begin uc_side := 0 ;
55593: LD_ADDR_OWVAR 20
55597: PUSH
55598: LD_INT 0
55600: ST_TO_ADDR
// uc_nation := nation_arabian ;
55601: LD_ADDR_OWVAR 21
55605: PUSH
55606: LD_INT 2
55608: ST_TO_ADDR
// hc_gallery :=  ;
55609: LD_ADDR_OWVAR 33
55613: PUSH
55614: LD_STRING 
55616: ST_TO_ADDR
// hc_name :=  ;
55617: LD_ADDR_OWVAR 26
55621: PUSH
55622: LD_STRING 
55624: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55625: LD_INT 1
55627: PPUSH
55628: LD_INT 11
55630: PPUSH
55631: LD_INT 10
55633: PPUSH
55634: CALL_OW 380
// un := CreateHuman ;
55638: LD_ADDR_VAR 0 1
55642: PUSH
55643: CALL_OW 44
55647: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55648: LD_VAR 0 1
55652: PPUSH
55653: LD_INT 1
55655: PPUSH
55656: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55660: LD_INT 35
55662: PPUSH
55663: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55667: LD_VAR 0 1
55671: PPUSH
55672: LD_INT 22
55674: PUSH
55675: LD_OWVAR 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PPUSH
55684: CALL_OW 69
55688: PPUSH
55689: LD_VAR 0 1
55693: PPUSH
55694: CALL_OW 74
55698: PPUSH
55699: CALL_OW 115
// until IsDead ( un ) ;
55703: LD_VAR 0 1
55707: PPUSH
55708: CALL_OW 301
55712: IFFALSE 55660
// end ;
55714: PPOPN 1
55716: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55717: LD_EXP 49
55721: PUSH
55722: LD_EXP 89
55726: AND
55727: IFFALSE 55739
55729: GO 55731
55731: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55732: LD_STRING earthquake(getX(game), 0, 32)
55734: PPUSH
55735: CALL_OW 559
55739: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55740: LD_EXP 49
55744: PUSH
55745: LD_EXP 90
55749: AND
55750: IFFALSE 55841
55752: GO 55754
55754: DISABLE
55755: LD_INT 0
55757: PPUSH
// begin enable ;
55758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55759: LD_ADDR_VAR 0 1
55763: PUSH
55764: LD_INT 22
55766: PUSH
55767: LD_OWVAR 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 21
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 33
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: PPUSH
55801: CALL_OW 69
55805: ST_TO_ADDR
// if not tmp then
55806: LD_VAR 0 1
55810: NOT
55811: IFFALSE 55815
// exit ;
55813: GO 55841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55815: LD_VAR 0 1
55819: PUSH
55820: LD_INT 1
55822: PPUSH
55823: LD_VAR 0 1
55827: PPUSH
55828: CALL_OW 12
55832: ARRAY
55833: PPUSH
55834: LD_INT 1
55836: PPUSH
55837: CALL_OW 234
// end ;
55841: PPOPN 1
55843: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55844: LD_EXP 49
55848: PUSH
55849: LD_EXP 91
55853: AND
55854: IFFALSE 55995
55856: GO 55858
55858: DISABLE
55859: LD_INT 0
55861: PPUSH
55862: PPUSH
55863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55864: LD_ADDR_VAR 0 3
55868: PUSH
55869: LD_INT 22
55871: PUSH
55872: LD_OWVAR 2
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 25
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PPUSH
55895: CALL_OW 69
55899: ST_TO_ADDR
// if not tmp then
55900: LD_VAR 0 3
55904: NOT
55905: IFFALSE 55909
// exit ;
55907: GO 55995
// un := tmp [ rand ( 1 , tmp ) ] ;
55909: LD_ADDR_VAR 0 2
55913: PUSH
55914: LD_VAR 0 3
55918: PUSH
55919: LD_INT 1
55921: PPUSH
55922: LD_VAR 0 3
55926: PPUSH
55927: CALL_OW 12
55931: ARRAY
55932: ST_TO_ADDR
// if Crawls ( un ) then
55933: LD_VAR 0 2
55937: PPUSH
55938: CALL_OW 318
55942: IFFALSE 55953
// ComWalk ( un ) ;
55944: LD_VAR 0 2
55948: PPUSH
55949: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55953: LD_VAR 0 2
55957: PPUSH
55958: LD_INT 9
55960: PPUSH
55961: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55965: LD_INT 28
55967: PPUSH
55968: LD_OWVAR 2
55972: PPUSH
55973: LD_INT 2
55975: PPUSH
55976: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55980: LD_INT 29
55982: PPUSH
55983: LD_OWVAR 2
55987: PPUSH
55988: LD_INT 2
55990: PPUSH
55991: CALL_OW 322
// end ;
55995: PPOPN 3
55997: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55998: LD_EXP 49
56002: PUSH
56003: LD_EXP 92
56007: AND
56008: IFFALSE 56119
56010: GO 56012
56012: DISABLE
56013: LD_INT 0
56015: PPUSH
56016: PPUSH
56017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56018: LD_ADDR_VAR 0 3
56022: PUSH
56023: LD_INT 22
56025: PUSH
56026: LD_OWVAR 2
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 25
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PPUSH
56049: CALL_OW 69
56053: ST_TO_ADDR
// if not tmp then
56054: LD_VAR 0 3
56058: NOT
56059: IFFALSE 56063
// exit ;
56061: GO 56119
// un := tmp [ rand ( 1 , tmp ) ] ;
56063: LD_ADDR_VAR 0 2
56067: PUSH
56068: LD_VAR 0 3
56072: PUSH
56073: LD_INT 1
56075: PPUSH
56076: LD_VAR 0 3
56080: PPUSH
56081: CALL_OW 12
56085: ARRAY
56086: ST_TO_ADDR
// if Crawls ( un ) then
56087: LD_VAR 0 2
56091: PPUSH
56092: CALL_OW 318
56096: IFFALSE 56107
// ComWalk ( un ) ;
56098: LD_VAR 0 2
56102: PPUSH
56103: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56107: LD_VAR 0 2
56111: PPUSH
56112: LD_INT 8
56114: PPUSH
56115: CALL_OW 336
// end ;
56119: PPOPN 3
56121: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56122: LD_EXP 49
56126: PUSH
56127: LD_EXP 93
56131: AND
56132: IFFALSE 56276
56134: GO 56136
56136: DISABLE
56137: LD_INT 0
56139: PPUSH
56140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56141: LD_ADDR_VAR 0 2
56145: PUSH
56146: LD_INT 22
56148: PUSH
56149: LD_OWVAR 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 21
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 34
56173: PUSH
56174: LD_INT 12
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 34
56183: PUSH
56184: LD_INT 51
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 34
56193: PUSH
56194: LD_INT 32
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: PPUSH
56212: CALL_OW 69
56216: ST_TO_ADDR
// if not tmp then
56217: LD_VAR 0 2
56221: NOT
56222: IFFALSE 56226
// exit ;
56224: GO 56276
// for i in tmp do
56226: LD_ADDR_VAR 0 1
56230: PUSH
56231: LD_VAR 0 2
56235: PUSH
56236: FOR_IN
56237: IFFALSE 56274
// if GetCargo ( i , mat_artifact ) = 0 then
56239: LD_VAR 0 1
56243: PPUSH
56244: LD_INT 4
56246: PPUSH
56247: CALL_OW 289
56251: PUSH
56252: LD_INT 0
56254: EQUAL
56255: IFFALSE 56272
// SetCargo ( i , mat_siberit , 100 ) ;
56257: LD_VAR 0 1
56261: PPUSH
56262: LD_INT 3
56264: PPUSH
56265: LD_INT 100
56267: PPUSH
56268: CALL_OW 290
56272: GO 56236
56274: POP
56275: POP
// end ;
56276: PPOPN 2
56278: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56279: LD_EXP 49
56283: PUSH
56284: LD_EXP 94
56288: AND
56289: IFFALSE 56472
56291: GO 56293
56293: DISABLE
56294: LD_INT 0
56296: PPUSH
56297: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56298: LD_ADDR_VAR 0 2
56302: PUSH
56303: LD_INT 22
56305: PUSH
56306: LD_OWVAR 2
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PPUSH
56315: CALL_OW 69
56319: ST_TO_ADDR
// if not tmp then
56320: LD_VAR 0 2
56324: NOT
56325: IFFALSE 56329
// exit ;
56327: GO 56472
// for i := 1 to 2 do
56329: LD_ADDR_VAR 0 1
56333: PUSH
56334: DOUBLE
56335: LD_INT 1
56337: DEC
56338: ST_TO_ADDR
56339: LD_INT 2
56341: PUSH
56342: FOR_TO
56343: IFFALSE 56470
// begin uc_side := your_side ;
56345: LD_ADDR_OWVAR 20
56349: PUSH
56350: LD_OWVAR 2
56354: ST_TO_ADDR
// uc_nation := nation_american ;
56355: LD_ADDR_OWVAR 21
56359: PUSH
56360: LD_INT 1
56362: ST_TO_ADDR
// vc_chassis := us_morphling ;
56363: LD_ADDR_OWVAR 37
56367: PUSH
56368: LD_INT 5
56370: ST_TO_ADDR
// vc_engine := engine_siberite ;
56371: LD_ADDR_OWVAR 39
56375: PUSH
56376: LD_INT 3
56378: ST_TO_ADDR
// vc_control := control_computer ;
56379: LD_ADDR_OWVAR 38
56383: PUSH
56384: LD_INT 3
56386: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56387: LD_ADDR_OWVAR 40
56391: PUSH
56392: LD_INT 10
56394: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56395: LD_VAR 0 2
56399: PUSH
56400: LD_INT 1
56402: ARRAY
56403: PPUSH
56404: CALL_OW 310
56408: NOT
56409: IFFALSE 56456
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56411: CALL_OW 45
56415: PPUSH
56416: LD_VAR 0 2
56420: PUSH
56421: LD_INT 1
56423: ARRAY
56424: PPUSH
56425: CALL_OW 250
56429: PPUSH
56430: LD_VAR 0 2
56434: PUSH
56435: LD_INT 1
56437: ARRAY
56438: PPUSH
56439: CALL_OW 251
56443: PPUSH
56444: LD_INT 12
56446: PPUSH
56447: LD_INT 1
56449: PPUSH
56450: CALL_OW 50
56454: GO 56468
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56456: CALL_OW 45
56460: PPUSH
56461: LD_INT 1
56463: PPUSH
56464: CALL_OW 51
// end ;
56468: GO 56342
56470: POP
56471: POP
// end ;
56472: PPOPN 2
56474: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56475: LD_EXP 49
56479: PUSH
56480: LD_EXP 95
56484: AND
56485: IFFALSE 56707
56487: GO 56489
56489: DISABLE
56490: LD_INT 0
56492: PPUSH
56493: PPUSH
56494: PPUSH
56495: PPUSH
56496: PPUSH
56497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56498: LD_ADDR_VAR 0 6
56502: PUSH
56503: LD_INT 22
56505: PUSH
56506: LD_OWVAR 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 21
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: LD_INT 23
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: PPUSH
56547: CALL_OW 69
56551: ST_TO_ADDR
// if not tmp then
56552: LD_VAR 0 6
56556: NOT
56557: IFFALSE 56561
// exit ;
56559: GO 56707
// s1 := rand ( 1 , 4 ) ;
56561: LD_ADDR_VAR 0 2
56565: PUSH
56566: LD_INT 1
56568: PPUSH
56569: LD_INT 4
56571: PPUSH
56572: CALL_OW 12
56576: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56577: LD_ADDR_VAR 0 4
56581: PUSH
56582: LD_VAR 0 6
56586: PUSH
56587: LD_INT 1
56589: ARRAY
56590: PPUSH
56591: LD_VAR 0 2
56595: PPUSH
56596: CALL_OW 259
56600: ST_TO_ADDR
// if s1 = 1 then
56601: LD_VAR 0 2
56605: PUSH
56606: LD_INT 1
56608: EQUAL
56609: IFFALSE 56629
// s2 := rand ( 2 , 4 ) else
56611: LD_ADDR_VAR 0 3
56615: PUSH
56616: LD_INT 2
56618: PPUSH
56619: LD_INT 4
56621: PPUSH
56622: CALL_OW 12
56626: ST_TO_ADDR
56627: GO 56637
// s2 := 1 ;
56629: LD_ADDR_VAR 0 3
56633: PUSH
56634: LD_INT 1
56636: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56637: LD_ADDR_VAR 0 5
56641: PUSH
56642: LD_VAR 0 6
56646: PUSH
56647: LD_INT 1
56649: ARRAY
56650: PPUSH
56651: LD_VAR 0 3
56655: PPUSH
56656: CALL_OW 259
56660: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56661: LD_VAR 0 6
56665: PUSH
56666: LD_INT 1
56668: ARRAY
56669: PPUSH
56670: LD_VAR 0 2
56674: PPUSH
56675: LD_VAR 0 5
56679: PPUSH
56680: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56684: LD_VAR 0 6
56688: PUSH
56689: LD_INT 1
56691: ARRAY
56692: PPUSH
56693: LD_VAR 0 3
56697: PPUSH
56698: LD_VAR 0 4
56702: PPUSH
56703: CALL_OW 237
// end ;
56707: PPOPN 6
56709: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56710: LD_EXP 49
56714: PUSH
56715: LD_EXP 96
56719: AND
56720: IFFALSE 56799
56722: GO 56724
56724: DISABLE
56725: LD_INT 0
56727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56728: LD_ADDR_VAR 0 1
56732: PUSH
56733: LD_INT 22
56735: PUSH
56736: LD_OWVAR 2
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 30
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PPUSH
56759: CALL_OW 69
56763: ST_TO_ADDR
// if not tmp then
56764: LD_VAR 0 1
56768: NOT
56769: IFFALSE 56773
// exit ;
56771: GO 56799
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56773: LD_VAR 0 1
56777: PUSH
56778: LD_INT 1
56780: PPUSH
56781: LD_VAR 0 1
56785: PPUSH
56786: CALL_OW 12
56790: ARRAY
56791: PPUSH
56792: LD_INT 1
56794: PPUSH
56795: CALL_OW 234
// end ;
56799: PPOPN 1
56801: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56802: LD_EXP 49
56806: PUSH
56807: LD_EXP 97
56811: AND
56812: IFFALSE 56924
56814: GO 56816
56816: DISABLE
56817: LD_INT 0
56819: PPUSH
56820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56821: LD_ADDR_VAR 0 2
56825: PUSH
56826: LD_INT 22
56828: PUSH
56829: LD_OWVAR 2
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 30
56843: PUSH
56844: LD_INT 27
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 30
56853: PUSH
56854: LD_INT 26
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 30
56863: PUSH
56864: LD_INT 28
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PPUSH
56881: CALL_OW 69
56885: ST_TO_ADDR
// if not tmp then
56886: LD_VAR 0 2
56890: NOT
56891: IFFALSE 56895
// exit ;
56893: GO 56924
// for i in tmp do
56895: LD_ADDR_VAR 0 1
56899: PUSH
56900: LD_VAR 0 2
56904: PUSH
56905: FOR_IN
56906: IFFALSE 56922
// SetLives ( i , 1 ) ;
56908: LD_VAR 0 1
56912: PPUSH
56913: LD_INT 1
56915: PPUSH
56916: CALL_OW 234
56920: GO 56905
56922: POP
56923: POP
// end ;
56924: PPOPN 2
56926: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56927: LD_EXP 49
56931: PUSH
56932: LD_EXP 98
56936: AND
56937: IFFALSE 57224
56939: GO 56941
56941: DISABLE
56942: LD_INT 0
56944: PPUSH
56945: PPUSH
56946: PPUSH
// begin i := rand ( 1 , 7 ) ;
56947: LD_ADDR_VAR 0 1
56951: PUSH
56952: LD_INT 1
56954: PPUSH
56955: LD_INT 7
56957: PPUSH
56958: CALL_OW 12
56962: ST_TO_ADDR
// case i of 1 :
56963: LD_VAR 0 1
56967: PUSH
56968: LD_INT 1
56970: DOUBLE
56971: EQUAL
56972: IFTRUE 56976
56974: GO 56986
56976: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56977: LD_STRING earthquake(getX(game), 0, 32)
56979: PPUSH
56980: CALL_OW 559
56984: GO 57224
56986: LD_INT 2
56988: DOUBLE
56989: EQUAL
56990: IFTRUE 56994
56992: GO 57008
56994: POP
// begin ToLua ( displayStucuk(); ) ;
56995: LD_STRING displayStucuk();
56997: PPUSH
56998: CALL_OW 559
// ResetFog ;
57002: CALL_OW 335
// end ; 3 :
57006: GO 57224
57008: LD_INT 3
57010: DOUBLE
57011: EQUAL
57012: IFTRUE 57016
57014: GO 57120
57016: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57017: LD_ADDR_VAR 0 2
57021: PUSH
57022: LD_INT 22
57024: PUSH
57025: LD_OWVAR 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 25
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PPUSH
57048: CALL_OW 69
57052: ST_TO_ADDR
// if not tmp then
57053: LD_VAR 0 2
57057: NOT
57058: IFFALSE 57062
// exit ;
57060: GO 57224
// un := tmp [ rand ( 1 , tmp ) ] ;
57062: LD_ADDR_VAR 0 3
57066: PUSH
57067: LD_VAR 0 2
57071: PUSH
57072: LD_INT 1
57074: PPUSH
57075: LD_VAR 0 2
57079: PPUSH
57080: CALL_OW 12
57084: ARRAY
57085: ST_TO_ADDR
// if Crawls ( un ) then
57086: LD_VAR 0 3
57090: PPUSH
57091: CALL_OW 318
57095: IFFALSE 57106
// ComWalk ( un ) ;
57097: LD_VAR 0 3
57101: PPUSH
57102: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57106: LD_VAR 0 3
57110: PPUSH
57111: LD_INT 8
57113: PPUSH
57114: CALL_OW 336
// end ; 4 :
57118: GO 57224
57120: LD_INT 4
57122: DOUBLE
57123: EQUAL
57124: IFTRUE 57128
57126: GO 57202
57128: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57129: LD_ADDR_VAR 0 2
57133: PUSH
57134: LD_INT 22
57136: PUSH
57137: LD_OWVAR 2
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 30
57148: PUSH
57149: LD_INT 29
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PPUSH
57160: CALL_OW 69
57164: ST_TO_ADDR
// if not tmp then
57165: LD_VAR 0 2
57169: NOT
57170: IFFALSE 57174
// exit ;
57172: GO 57224
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57174: LD_VAR 0 2
57178: PUSH
57179: LD_INT 1
57181: ARRAY
57182: PPUSH
57183: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57187: LD_VAR 0 2
57191: PUSH
57192: LD_INT 1
57194: ARRAY
57195: PPUSH
57196: CALL_OW 65
// end ; 5 .. 7 :
57200: GO 57224
57202: LD_INT 5
57204: DOUBLE
57205: GREATEREQUAL
57206: IFFALSE 57214
57208: LD_INT 7
57210: DOUBLE
57211: LESSEQUAL
57212: IFTRUE 57216
57214: GO 57223
57216: POP
// StreamSibBomb ; end ;
57217: CALL 53461 0 0
57221: GO 57224
57223: POP
// end ;
57224: PPOPN 3
57226: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57227: LD_EXP 49
57231: PUSH
57232: LD_EXP 99
57236: AND
57237: IFFALSE 57393
57239: GO 57241
57241: DISABLE
57242: LD_INT 0
57244: PPUSH
57245: PPUSH
57246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57247: LD_ADDR_VAR 0 2
57251: PUSH
57252: LD_INT 81
57254: PUSH
57255: LD_OWVAR 2
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: LD_INT 21
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 21
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PPUSH
57296: CALL_OW 69
57300: ST_TO_ADDR
// if not tmp then
57301: LD_VAR 0 2
57305: NOT
57306: IFFALSE 57310
// exit ;
57308: GO 57393
// p := 0 ;
57310: LD_ADDR_VAR 0 3
57314: PUSH
57315: LD_INT 0
57317: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57318: LD_INT 35
57320: PPUSH
57321: CALL_OW 67
// p := p + 1 ;
57325: LD_ADDR_VAR 0 3
57329: PUSH
57330: LD_VAR 0 3
57334: PUSH
57335: LD_INT 1
57337: PLUS
57338: ST_TO_ADDR
// for i in tmp do
57339: LD_ADDR_VAR 0 1
57343: PUSH
57344: LD_VAR 0 2
57348: PUSH
57349: FOR_IN
57350: IFFALSE 57381
// if GetLives ( i ) < 1000 then
57352: LD_VAR 0 1
57356: PPUSH
57357: CALL_OW 256
57361: PUSH
57362: LD_INT 1000
57364: LESS
57365: IFFALSE 57379
// SetLives ( i , 1000 ) ;
57367: LD_VAR 0 1
57371: PPUSH
57372: LD_INT 1000
57374: PPUSH
57375: CALL_OW 234
57379: GO 57349
57381: POP
57382: POP
// until p > 20 ;
57383: LD_VAR 0 3
57387: PUSH
57388: LD_INT 20
57390: GREATER
57391: IFFALSE 57318
// end ;
57393: PPOPN 3
57395: END
// every 0 0$1 trigger StreamModeActive and sTime do
57396: LD_EXP 49
57400: PUSH
57401: LD_EXP 100
57405: AND
57406: IFFALSE 57441
57408: GO 57410
57410: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57411: LD_INT 28
57413: PPUSH
57414: LD_OWVAR 2
57418: PPUSH
57419: LD_INT 2
57421: PPUSH
57422: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57426: LD_INT 30
57428: PPUSH
57429: LD_OWVAR 2
57433: PPUSH
57434: LD_INT 2
57436: PPUSH
57437: CALL_OW 322
// end ;
57441: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57442: LD_EXP 49
57446: PUSH
57447: LD_EXP 101
57451: AND
57452: IFFALSE 57573
57454: GO 57456
57456: DISABLE
57457: LD_INT 0
57459: PPUSH
57460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57461: LD_ADDR_VAR 0 2
57465: PUSH
57466: LD_INT 22
57468: PUSH
57469: LD_OWVAR 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 21
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 3
57490: PUSH
57491: LD_INT 23
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: PPUSH
57510: CALL_OW 69
57514: ST_TO_ADDR
// if not tmp then
57515: LD_VAR 0 2
57519: NOT
57520: IFFALSE 57524
// exit ;
57522: GO 57573
// for i in tmp do
57524: LD_ADDR_VAR 0 1
57528: PUSH
57529: LD_VAR 0 2
57533: PUSH
57534: FOR_IN
57535: IFFALSE 57571
// begin if Crawls ( i ) then
57537: LD_VAR 0 1
57541: PPUSH
57542: CALL_OW 318
57546: IFFALSE 57557
// ComWalk ( i ) ;
57548: LD_VAR 0 1
57552: PPUSH
57553: CALL_OW 138
// SetClass ( i , 2 ) ;
57557: LD_VAR 0 1
57561: PPUSH
57562: LD_INT 2
57564: PPUSH
57565: CALL_OW 336
// end ;
57569: GO 57534
57571: POP
57572: POP
// end ;
57573: PPOPN 2
57575: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57576: LD_EXP 49
57580: PUSH
57581: LD_EXP 102
57585: AND
57586: IFFALSE 57874
57588: GO 57590
57590: DISABLE
57591: LD_INT 0
57593: PPUSH
57594: PPUSH
57595: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57596: LD_OWVAR 2
57600: PPUSH
57601: LD_INT 9
57603: PPUSH
57604: LD_INT 1
57606: PPUSH
57607: LD_INT 1
57609: PPUSH
57610: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57614: LD_INT 9
57616: PPUSH
57617: LD_OWVAR 2
57621: PPUSH
57622: CALL_OW 343
// uc_side := 9 ;
57626: LD_ADDR_OWVAR 20
57630: PUSH
57631: LD_INT 9
57633: ST_TO_ADDR
// uc_nation := 2 ;
57634: LD_ADDR_OWVAR 21
57638: PUSH
57639: LD_INT 2
57641: ST_TO_ADDR
// hc_name := Dark Warrior ;
57642: LD_ADDR_OWVAR 26
57646: PUSH
57647: LD_STRING Dark Warrior
57649: ST_TO_ADDR
// hc_gallery :=  ;
57650: LD_ADDR_OWVAR 33
57654: PUSH
57655: LD_STRING 
57657: ST_TO_ADDR
// hc_noskilllimit := true ;
57658: LD_ADDR_OWVAR 76
57662: PUSH
57663: LD_INT 1
57665: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57666: LD_ADDR_OWVAR 31
57670: PUSH
57671: LD_INT 30
57673: PUSH
57674: LD_INT 30
57676: PUSH
57677: LD_INT 30
57679: PUSH
57680: LD_INT 30
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: ST_TO_ADDR
// un := CreateHuman ;
57689: LD_ADDR_VAR 0 3
57693: PUSH
57694: CALL_OW 44
57698: ST_TO_ADDR
// hc_noskilllimit := false ;
57699: LD_ADDR_OWVAR 76
57703: PUSH
57704: LD_INT 0
57706: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57707: LD_VAR 0 3
57711: PPUSH
57712: LD_INT 1
57714: PPUSH
57715: CALL_OW 51
// ToLua ( playRanger() ) ;
57719: LD_STRING playRanger()
57721: PPUSH
57722: CALL_OW 559
// p := 0 ;
57726: LD_ADDR_VAR 0 2
57730: PUSH
57731: LD_INT 0
57733: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57734: LD_INT 35
57736: PPUSH
57737: CALL_OW 67
// p := p + 1 ;
57741: LD_ADDR_VAR 0 2
57745: PUSH
57746: LD_VAR 0 2
57750: PUSH
57751: LD_INT 1
57753: PLUS
57754: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57755: LD_VAR 0 3
57759: PPUSH
57760: CALL_OW 256
57764: PUSH
57765: LD_INT 1000
57767: LESS
57768: IFFALSE 57782
// SetLives ( un , 1000 ) ;
57770: LD_VAR 0 3
57774: PPUSH
57775: LD_INT 1000
57777: PPUSH
57778: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57782: LD_VAR 0 3
57786: PPUSH
57787: LD_INT 81
57789: PUSH
57790: LD_OWVAR 2
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 91
57801: PUSH
57802: LD_VAR 0 3
57806: PUSH
57807: LD_INT 30
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PPUSH
57819: CALL_OW 69
57823: PPUSH
57824: LD_VAR 0 3
57828: PPUSH
57829: CALL_OW 74
57833: PPUSH
57834: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
57838: LD_VAR 0 2
57842: PUSH
57843: LD_INT 80
57845: GREATER
57846: PUSH
57847: LD_VAR 0 3
57851: PPUSH
57852: CALL_OW 301
57856: OR
57857: IFFALSE 57734
// if un then
57859: LD_VAR 0 3
57863: IFFALSE 57874
// RemoveUnit ( un ) ;
57865: LD_VAR 0 3
57869: PPUSH
57870: CALL_OW 64
// end ;
57874: PPOPN 3
57876: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
57877: LD_EXP 103
57881: IFFALSE 57997
57883: GO 57885
57885: DISABLE
57886: LD_INT 0
57888: PPUSH
57889: PPUSH
57890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57891: LD_ADDR_VAR 0 2
57895: PUSH
57896: LD_INT 81
57898: PUSH
57899: LD_OWVAR 2
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 21
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PPUSH
57922: CALL_OW 69
57926: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57927: LD_STRING playComputer()
57929: PPUSH
57930: CALL_OW 559
// if not tmp then
57934: LD_VAR 0 2
57938: NOT
57939: IFFALSE 57943
// exit ;
57941: GO 57997
// for i in tmp do
57943: LD_ADDR_VAR 0 1
57947: PUSH
57948: LD_VAR 0 2
57952: PUSH
57953: FOR_IN
57954: IFFALSE 57995
// for j := 1 to 4 do
57956: LD_ADDR_VAR 0 3
57960: PUSH
57961: DOUBLE
57962: LD_INT 1
57964: DEC
57965: ST_TO_ADDR
57966: LD_INT 4
57968: PUSH
57969: FOR_TO
57970: IFFALSE 57991
// SetSkill ( i , j , 10 ) ;
57972: LD_VAR 0 1
57976: PPUSH
57977: LD_VAR 0 3
57981: PPUSH
57982: LD_INT 10
57984: PPUSH
57985: CALL_OW 237
57989: GO 57969
57991: POP
57992: POP
57993: GO 57953
57995: POP
57996: POP
// end ;
57997: PPOPN 3
57999: END
// every 0 0$1 trigger s30 do var i , tmp ;
58000: LD_EXP 104
58004: IFFALSE 58073
58006: GO 58008
58008: DISABLE
58009: LD_INT 0
58011: PPUSH
58012: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58013: LD_ADDR_VAR 0 2
58017: PUSH
58018: LD_INT 22
58020: PUSH
58021: LD_OWVAR 2
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PPUSH
58030: CALL_OW 69
58034: ST_TO_ADDR
// if not tmp then
58035: LD_VAR 0 2
58039: NOT
58040: IFFALSE 58044
// exit ;
58042: GO 58073
// for i in tmp do
58044: LD_ADDR_VAR 0 1
58048: PUSH
58049: LD_VAR 0 2
58053: PUSH
58054: FOR_IN
58055: IFFALSE 58071
// SetLives ( i , 300 ) ;
58057: LD_VAR 0 1
58061: PPUSH
58062: LD_INT 300
58064: PPUSH
58065: CALL_OW 234
58069: GO 58054
58071: POP
58072: POP
// end ;
58073: PPOPN 2
58075: END
// every 0 0$1 trigger s60 do var i , tmp ;
58076: LD_EXP 105
58080: IFFALSE 58149
58082: GO 58084
58084: DISABLE
58085: LD_INT 0
58087: PPUSH
58088: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58089: LD_ADDR_VAR 0 2
58093: PUSH
58094: LD_INT 22
58096: PUSH
58097: LD_OWVAR 2
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PPUSH
58106: CALL_OW 69
58110: ST_TO_ADDR
// if not tmp then
58111: LD_VAR 0 2
58115: NOT
58116: IFFALSE 58120
// exit ;
58118: GO 58149
// for i in tmp do
58120: LD_ADDR_VAR 0 1
58124: PUSH
58125: LD_VAR 0 2
58129: PUSH
58130: FOR_IN
58131: IFFALSE 58147
// SetLives ( i , 600 ) ;
58133: LD_VAR 0 1
58137: PPUSH
58138: LD_INT 600
58140: PPUSH
58141: CALL_OW 234
58145: GO 58130
58147: POP
58148: POP
// end ;
58149: PPOPN 2
58151: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58152: LD_INT 0
58154: PPUSH
// case cmd of 301 :
58155: LD_VAR 0 1
58159: PUSH
58160: LD_INT 301
58162: DOUBLE
58163: EQUAL
58164: IFTRUE 58168
58166: GO 58200
58168: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58169: LD_VAR 0 6
58173: PPUSH
58174: LD_VAR 0 7
58178: PPUSH
58179: LD_VAR 0 8
58183: PPUSH
58184: LD_VAR 0 4
58188: PPUSH
58189: LD_VAR 0 5
58193: PPUSH
58194: CALL 59401 0 5
58198: GO 58321
58200: LD_INT 302
58202: DOUBLE
58203: EQUAL
58204: IFTRUE 58208
58206: GO 58245
58208: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58209: LD_VAR 0 6
58213: PPUSH
58214: LD_VAR 0 7
58218: PPUSH
58219: LD_VAR 0 8
58223: PPUSH
58224: LD_VAR 0 9
58228: PPUSH
58229: LD_VAR 0 4
58233: PPUSH
58234: LD_VAR 0 5
58238: PPUSH
58239: CALL 59492 0 6
58243: GO 58321
58245: LD_INT 303
58247: DOUBLE
58248: EQUAL
58249: IFTRUE 58253
58251: GO 58290
58253: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58254: LD_VAR 0 6
58258: PPUSH
58259: LD_VAR 0 7
58263: PPUSH
58264: LD_VAR 0 8
58268: PPUSH
58269: LD_VAR 0 9
58273: PPUSH
58274: LD_VAR 0 4
58278: PPUSH
58279: LD_VAR 0 5
58283: PPUSH
58284: CALL 58326 0 6
58288: GO 58321
58290: LD_INT 304
58292: DOUBLE
58293: EQUAL
58294: IFTRUE 58298
58296: GO 58320
58298: POP
// hHackTeleport ( unit , x , y ) ; end ;
58299: LD_VAR 0 2
58303: PPUSH
58304: LD_VAR 0 4
58308: PPUSH
58309: LD_VAR 0 5
58313: PPUSH
58314: CALL 60085 0 3
58318: GO 58321
58320: POP
// end ;
58321: LD_VAR 0 12
58325: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
58326: LD_INT 0
58328: PPUSH
58329: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
58330: LD_VAR 0 1
58334: PUSH
58335: LD_INT 1
58337: LESS
58338: PUSH
58339: LD_VAR 0 1
58343: PUSH
58344: LD_INT 3
58346: GREATER
58347: OR
58348: PUSH
58349: LD_VAR 0 5
58353: PPUSH
58354: LD_VAR 0 6
58358: PPUSH
58359: CALL_OW 428
58363: OR
58364: IFFALSE 58368
// exit ;
58366: GO 59088
// uc_side := your_side ;
58368: LD_ADDR_OWVAR 20
58372: PUSH
58373: LD_OWVAR 2
58377: ST_TO_ADDR
// uc_nation := nation ;
58378: LD_ADDR_OWVAR 21
58382: PUSH
58383: LD_VAR 0 1
58387: ST_TO_ADDR
// bc_level = 1 ;
58388: LD_ADDR_OWVAR 43
58392: PUSH
58393: LD_INT 1
58395: ST_TO_ADDR
// case btype of 1 :
58396: LD_VAR 0 2
58400: PUSH
58401: LD_INT 1
58403: DOUBLE
58404: EQUAL
58405: IFTRUE 58409
58407: GO 58420
58409: POP
// bc_type := b_depot ; 2 :
58410: LD_ADDR_OWVAR 42
58414: PUSH
58415: LD_INT 0
58417: ST_TO_ADDR
58418: GO 59032
58420: LD_INT 2
58422: DOUBLE
58423: EQUAL
58424: IFTRUE 58428
58426: GO 58439
58428: POP
// bc_type := b_warehouse ; 3 :
58429: LD_ADDR_OWVAR 42
58433: PUSH
58434: LD_INT 1
58436: ST_TO_ADDR
58437: GO 59032
58439: LD_INT 3
58441: DOUBLE
58442: EQUAL
58443: IFTRUE 58447
58445: GO 58458
58447: POP
// bc_type := b_lab ; 4 .. 9 :
58448: LD_ADDR_OWVAR 42
58452: PUSH
58453: LD_INT 6
58455: ST_TO_ADDR
58456: GO 59032
58458: LD_INT 4
58460: DOUBLE
58461: GREATEREQUAL
58462: IFFALSE 58470
58464: LD_INT 9
58466: DOUBLE
58467: LESSEQUAL
58468: IFTRUE 58472
58470: GO 58524
58472: POP
// begin bc_type := b_lab_half ;
58473: LD_ADDR_OWVAR 42
58477: PUSH
58478: LD_INT 7
58480: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58481: LD_ADDR_OWVAR 44
58485: PUSH
58486: LD_INT 10
58488: PUSH
58489: LD_INT 11
58491: PUSH
58492: LD_INT 12
58494: PUSH
58495: LD_INT 15
58497: PUSH
58498: LD_INT 14
58500: PUSH
58501: LD_INT 13
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: PUSH
58512: LD_VAR 0 2
58516: PUSH
58517: LD_INT 3
58519: MINUS
58520: ARRAY
58521: ST_TO_ADDR
// end ; 10 .. 13 :
58522: GO 59032
58524: LD_INT 10
58526: DOUBLE
58527: GREATEREQUAL
58528: IFFALSE 58536
58530: LD_INT 13
58532: DOUBLE
58533: LESSEQUAL
58534: IFTRUE 58538
58536: GO 58615
58538: POP
// begin bc_type := b_lab_full ;
58539: LD_ADDR_OWVAR 42
58543: PUSH
58544: LD_INT 8
58546: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58547: LD_ADDR_OWVAR 44
58551: PUSH
58552: LD_INT 10
58554: PUSH
58555: LD_INT 12
58557: PUSH
58558: LD_INT 14
58560: PUSH
58561: LD_INT 13
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: PUSH
58570: LD_VAR 0 2
58574: PUSH
58575: LD_INT 9
58577: MINUS
58578: ARRAY
58579: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58580: LD_ADDR_OWVAR 45
58584: PUSH
58585: LD_INT 11
58587: PUSH
58588: LD_INT 15
58590: PUSH
58591: LD_INT 12
58593: PUSH
58594: LD_INT 15
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: PUSH
58603: LD_VAR 0 2
58607: PUSH
58608: LD_INT 9
58610: MINUS
58611: ARRAY
58612: ST_TO_ADDR
// end ; 14 :
58613: GO 59032
58615: LD_INT 14
58617: DOUBLE
58618: EQUAL
58619: IFTRUE 58623
58621: GO 58634
58623: POP
// bc_type := b_workshop ; 15 :
58624: LD_ADDR_OWVAR 42
58628: PUSH
58629: LD_INT 2
58631: ST_TO_ADDR
58632: GO 59032
58634: LD_INT 15
58636: DOUBLE
58637: EQUAL
58638: IFTRUE 58642
58640: GO 58653
58642: POP
// bc_type := b_factory ; 16 :
58643: LD_ADDR_OWVAR 42
58647: PUSH
58648: LD_INT 3
58650: ST_TO_ADDR
58651: GO 59032
58653: LD_INT 16
58655: DOUBLE
58656: EQUAL
58657: IFTRUE 58661
58659: GO 58672
58661: POP
// bc_type := b_ext_gun ; 17 :
58662: LD_ADDR_OWVAR 42
58666: PUSH
58667: LD_INT 17
58669: ST_TO_ADDR
58670: GO 59032
58672: LD_INT 17
58674: DOUBLE
58675: EQUAL
58676: IFTRUE 58680
58678: GO 58708
58680: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58681: LD_ADDR_OWVAR 42
58685: PUSH
58686: LD_INT 19
58688: PUSH
58689: LD_INT 23
58691: PUSH
58692: LD_INT 19
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: LIST
58699: PUSH
58700: LD_VAR 0 1
58704: ARRAY
58705: ST_TO_ADDR
58706: GO 59032
58708: LD_INT 18
58710: DOUBLE
58711: EQUAL
58712: IFTRUE 58716
58714: GO 58727
58716: POP
// bc_type := b_ext_radar ; 19 :
58717: LD_ADDR_OWVAR 42
58721: PUSH
58722: LD_INT 20
58724: ST_TO_ADDR
58725: GO 59032
58727: LD_INT 19
58729: DOUBLE
58730: EQUAL
58731: IFTRUE 58735
58733: GO 58746
58735: POP
// bc_type := b_ext_radio ; 20 :
58736: LD_ADDR_OWVAR 42
58740: PUSH
58741: LD_INT 22
58743: ST_TO_ADDR
58744: GO 59032
58746: LD_INT 20
58748: DOUBLE
58749: EQUAL
58750: IFTRUE 58754
58752: GO 58765
58754: POP
// bc_type := b_ext_siberium ; 21 :
58755: LD_ADDR_OWVAR 42
58759: PUSH
58760: LD_INT 21
58762: ST_TO_ADDR
58763: GO 59032
58765: LD_INT 21
58767: DOUBLE
58768: EQUAL
58769: IFTRUE 58773
58771: GO 58784
58773: POP
// bc_type := b_ext_computer ; 22 :
58774: LD_ADDR_OWVAR 42
58778: PUSH
58779: LD_INT 24
58781: ST_TO_ADDR
58782: GO 59032
58784: LD_INT 22
58786: DOUBLE
58787: EQUAL
58788: IFTRUE 58792
58790: GO 58803
58792: POP
// bc_type := b_ext_track ; 23 :
58793: LD_ADDR_OWVAR 42
58797: PUSH
58798: LD_INT 16
58800: ST_TO_ADDR
58801: GO 59032
58803: LD_INT 23
58805: DOUBLE
58806: EQUAL
58807: IFTRUE 58811
58809: GO 58822
58811: POP
// bc_type := b_ext_laser ; 24 :
58812: LD_ADDR_OWVAR 42
58816: PUSH
58817: LD_INT 25
58819: ST_TO_ADDR
58820: GO 59032
58822: LD_INT 24
58824: DOUBLE
58825: EQUAL
58826: IFTRUE 58830
58828: GO 58841
58830: POP
// bc_type := b_control_tower ; 25 :
58831: LD_ADDR_OWVAR 42
58835: PUSH
58836: LD_INT 36
58838: ST_TO_ADDR
58839: GO 59032
58841: LD_INT 25
58843: DOUBLE
58844: EQUAL
58845: IFTRUE 58849
58847: GO 58860
58849: POP
// bc_type := b_breastwork ; 26 :
58850: LD_ADDR_OWVAR 42
58854: PUSH
58855: LD_INT 31
58857: ST_TO_ADDR
58858: GO 59032
58860: LD_INT 26
58862: DOUBLE
58863: EQUAL
58864: IFTRUE 58868
58866: GO 58879
58868: POP
// bc_type := b_bunker ; 27 :
58869: LD_ADDR_OWVAR 42
58873: PUSH
58874: LD_INT 32
58876: ST_TO_ADDR
58877: GO 59032
58879: LD_INT 27
58881: DOUBLE
58882: EQUAL
58883: IFTRUE 58887
58885: GO 58898
58887: POP
// bc_type := b_turret ; 28 :
58888: LD_ADDR_OWVAR 42
58892: PUSH
58893: LD_INT 33
58895: ST_TO_ADDR
58896: GO 59032
58898: LD_INT 28
58900: DOUBLE
58901: EQUAL
58902: IFTRUE 58906
58904: GO 58917
58906: POP
// bc_type := b_armoury ; 29 :
58907: LD_ADDR_OWVAR 42
58911: PUSH
58912: LD_INT 4
58914: ST_TO_ADDR
58915: GO 59032
58917: LD_INT 29
58919: DOUBLE
58920: EQUAL
58921: IFTRUE 58925
58923: GO 58936
58925: POP
// bc_type := b_barracks ; 30 :
58926: LD_ADDR_OWVAR 42
58930: PUSH
58931: LD_INT 5
58933: ST_TO_ADDR
58934: GO 59032
58936: LD_INT 30
58938: DOUBLE
58939: EQUAL
58940: IFTRUE 58944
58942: GO 58955
58944: POP
// bc_type := b_solar_power ; 31 :
58945: LD_ADDR_OWVAR 42
58949: PUSH
58950: LD_INT 27
58952: ST_TO_ADDR
58953: GO 59032
58955: LD_INT 31
58957: DOUBLE
58958: EQUAL
58959: IFTRUE 58963
58961: GO 58974
58963: POP
// bc_type := b_oil_power ; 32 :
58964: LD_ADDR_OWVAR 42
58968: PUSH
58969: LD_INT 26
58971: ST_TO_ADDR
58972: GO 59032
58974: LD_INT 32
58976: DOUBLE
58977: EQUAL
58978: IFTRUE 58982
58980: GO 58993
58982: POP
// bc_type := b_siberite_power ; 33 :
58983: LD_ADDR_OWVAR 42
58987: PUSH
58988: LD_INT 28
58990: ST_TO_ADDR
58991: GO 59032
58993: LD_INT 33
58995: DOUBLE
58996: EQUAL
58997: IFTRUE 59001
58999: GO 59012
59001: POP
// bc_type := b_oil_mine ; 34 :
59002: LD_ADDR_OWVAR 42
59006: PUSH
59007: LD_INT 29
59009: ST_TO_ADDR
59010: GO 59032
59012: LD_INT 34
59014: DOUBLE
59015: EQUAL
59016: IFTRUE 59020
59018: GO 59031
59020: POP
// bc_type := b_siberite_mine ; end ;
59021: LD_ADDR_OWVAR 42
59025: PUSH
59026: LD_INT 30
59028: ST_TO_ADDR
59029: GO 59032
59031: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
59032: LD_ADDR_VAR 0 8
59036: PUSH
59037: LD_VAR 0 5
59041: PPUSH
59042: LD_VAR 0 6
59046: PPUSH
59047: LD_VAR 0 3
59051: PPUSH
59052: CALL_OW 47
59056: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
59057: LD_OWVAR 42
59061: PUSH
59062: LD_INT 32
59064: PUSH
59065: LD_INT 33
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: IN
59072: IFFALSE 59088
// PlaceWeaponTurret ( b , weapon ) ;
59074: LD_VAR 0 8
59078: PPUSH
59079: LD_VAR 0 4
59083: PPUSH
59084: CALL_OW 431
// end ;
59088: LD_VAR 0 7
59092: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
59093: LD_INT 0
59095: PPUSH
59096: PPUSH
59097: PPUSH
59098: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59099: LD_ADDR_VAR 0 4
59103: PUSH
59104: LD_INT 22
59106: PUSH
59107: LD_OWVAR 2
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 30
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 30
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PPUSH
59148: CALL_OW 69
59152: ST_TO_ADDR
// if not tmp then
59153: LD_VAR 0 4
59157: NOT
59158: IFFALSE 59162
// exit ;
59160: GO 59221
// for i in tmp do
59162: LD_ADDR_VAR 0 2
59166: PUSH
59167: LD_VAR 0 4
59171: PUSH
59172: FOR_IN
59173: IFFALSE 59219
// for j = 1 to 3 do
59175: LD_ADDR_VAR 0 3
59179: PUSH
59180: DOUBLE
59181: LD_INT 1
59183: DEC
59184: ST_TO_ADDR
59185: LD_INT 3
59187: PUSH
59188: FOR_TO
59189: IFFALSE 59215
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59191: LD_VAR 0 2
59195: PPUSH
59196: CALL_OW 274
59200: PPUSH
59201: LD_VAR 0 3
59205: PPUSH
59206: LD_INT 99999
59208: PPUSH
59209: CALL_OW 277
59213: GO 59188
59215: POP
59216: POP
59217: GO 59172
59219: POP
59220: POP
// end ;
59221: LD_VAR 0 1
59225: RET
// export function hHackSetLevel10 ; var i , j ; begin
59226: LD_INT 0
59228: PPUSH
59229: PPUSH
59230: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59231: LD_ADDR_VAR 0 2
59235: PUSH
59236: LD_INT 21
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PPUSH
59246: CALL_OW 69
59250: PUSH
59251: FOR_IN
59252: IFFALSE 59304
// if IsSelected ( i ) then
59254: LD_VAR 0 2
59258: PPUSH
59259: CALL_OW 306
59263: IFFALSE 59302
// begin for j := 1 to 4 do
59265: LD_ADDR_VAR 0 3
59269: PUSH
59270: DOUBLE
59271: LD_INT 1
59273: DEC
59274: ST_TO_ADDR
59275: LD_INT 4
59277: PUSH
59278: FOR_TO
59279: IFFALSE 59300
// SetSkill ( i , j , 10 ) ;
59281: LD_VAR 0 2
59285: PPUSH
59286: LD_VAR 0 3
59290: PPUSH
59291: LD_INT 10
59293: PPUSH
59294: CALL_OW 237
59298: GO 59278
59300: POP
59301: POP
// end ;
59302: GO 59251
59304: POP
59305: POP
// end ;
59306: LD_VAR 0 1
59310: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
59311: LD_INT 0
59313: PPUSH
59314: PPUSH
59315: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
59316: LD_ADDR_VAR 0 2
59320: PUSH
59321: LD_INT 22
59323: PUSH
59324: LD_OWVAR 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 21
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PPUSH
59347: CALL_OW 69
59351: PUSH
59352: FOR_IN
59353: IFFALSE 59394
// begin for j := 1 to 4 do
59355: LD_ADDR_VAR 0 3
59359: PUSH
59360: DOUBLE
59361: LD_INT 1
59363: DEC
59364: ST_TO_ADDR
59365: LD_INT 4
59367: PUSH
59368: FOR_TO
59369: IFFALSE 59390
// SetSkill ( i , j , 10 ) ;
59371: LD_VAR 0 2
59375: PPUSH
59376: LD_VAR 0 3
59380: PPUSH
59381: LD_INT 10
59383: PPUSH
59384: CALL_OW 237
59388: GO 59368
59390: POP
59391: POP
// end ;
59392: GO 59352
59394: POP
59395: POP
// end ;
59396: LD_VAR 0 1
59400: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59401: LD_INT 0
59403: PPUSH
// uc_side := your_side ;
59404: LD_ADDR_OWVAR 20
59408: PUSH
59409: LD_OWVAR 2
59413: ST_TO_ADDR
// uc_nation := nation ;
59414: LD_ADDR_OWVAR 21
59418: PUSH
59419: LD_VAR 0 1
59423: ST_TO_ADDR
// InitHc ;
59424: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59428: LD_INT 0
59430: PPUSH
59431: LD_VAR 0 2
59435: PPUSH
59436: LD_VAR 0 3
59440: PPUSH
59441: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59445: LD_VAR 0 4
59449: PPUSH
59450: LD_VAR 0 5
59454: PPUSH
59455: CALL_OW 428
59459: PUSH
59460: LD_INT 0
59462: EQUAL
59463: IFFALSE 59487
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59465: CALL_OW 44
59469: PPUSH
59470: LD_VAR 0 4
59474: PPUSH
59475: LD_VAR 0 5
59479: PPUSH
59480: LD_INT 1
59482: PPUSH
59483: CALL_OW 48
// end ;
59487: LD_VAR 0 6
59491: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59492: LD_INT 0
59494: PPUSH
59495: PPUSH
// uc_side := your_side ;
59496: LD_ADDR_OWVAR 20
59500: PUSH
59501: LD_OWVAR 2
59505: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59506: LD_VAR 0 1
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 2
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: LD_INT 4
59522: PUSH
59523: LD_INT 5
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: IN
59533: IFFALSE 59545
// uc_nation := nation_american else
59535: LD_ADDR_OWVAR 21
59539: PUSH
59540: LD_INT 1
59542: ST_TO_ADDR
59543: GO 59588
// if chassis in [ 11 , 12 , 13 , 14 ] then
59545: LD_VAR 0 1
59549: PUSH
59550: LD_INT 11
59552: PUSH
59553: LD_INT 12
59555: PUSH
59556: LD_INT 13
59558: PUSH
59559: LD_INT 14
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: IN
59568: IFFALSE 59580
// uc_nation := nation_arabian else
59570: LD_ADDR_OWVAR 21
59574: PUSH
59575: LD_INT 2
59577: ST_TO_ADDR
59578: GO 59588
// uc_nation := nation_russian ;
59580: LD_ADDR_OWVAR 21
59584: PUSH
59585: LD_INT 3
59587: ST_TO_ADDR
// vc_chassis := chassis ;
59588: LD_ADDR_OWVAR 37
59592: PUSH
59593: LD_VAR 0 1
59597: ST_TO_ADDR
// vc_engine := engine ;
59598: LD_ADDR_OWVAR 39
59602: PUSH
59603: LD_VAR 0 2
59607: ST_TO_ADDR
// vc_control := control ;
59608: LD_ADDR_OWVAR 38
59612: PUSH
59613: LD_VAR 0 3
59617: ST_TO_ADDR
// vc_weapon := weapon ;
59618: LD_ADDR_OWVAR 40
59622: PUSH
59623: LD_VAR 0 4
59627: ST_TO_ADDR
// un := CreateVehicle ;
59628: LD_ADDR_VAR 0 8
59632: PUSH
59633: CALL_OW 45
59637: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59638: LD_VAR 0 8
59642: PPUSH
59643: LD_INT 0
59645: PPUSH
59646: LD_INT 5
59648: PPUSH
59649: CALL_OW 12
59653: PPUSH
59654: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59658: LD_VAR 0 8
59662: PPUSH
59663: LD_VAR 0 5
59667: PPUSH
59668: LD_VAR 0 6
59672: PPUSH
59673: LD_INT 1
59675: PPUSH
59676: CALL_OW 48
// end ;
59680: LD_VAR 0 7
59684: RET
// export hInvincible ; every 1 do
59685: GO 59687
59687: DISABLE
// hInvincible := [ ] ;
59688: LD_ADDR_EXP 106
59692: PUSH
59693: EMPTY
59694: ST_TO_ADDR
59695: END
// every 10 do var i ;
59696: GO 59698
59698: DISABLE
59699: LD_INT 0
59701: PPUSH
// begin enable ;
59702: ENABLE
// if not hInvincible then
59703: LD_EXP 106
59707: NOT
59708: IFFALSE 59712
// exit ;
59710: GO 59756
// for i in hInvincible do
59712: LD_ADDR_VAR 0 1
59716: PUSH
59717: LD_EXP 106
59721: PUSH
59722: FOR_IN
59723: IFFALSE 59754
// if GetLives ( i ) < 1000 then
59725: LD_VAR 0 1
59729: PPUSH
59730: CALL_OW 256
59734: PUSH
59735: LD_INT 1000
59737: LESS
59738: IFFALSE 59752
// SetLives ( i , 1000 ) ;
59740: LD_VAR 0 1
59744: PPUSH
59745: LD_INT 1000
59747: PPUSH
59748: CALL_OW 234
59752: GO 59722
59754: POP
59755: POP
// end ;
59756: PPOPN 1
59758: END
// export function hHackInvincible ; var i ; begin
59759: LD_INT 0
59761: PPUSH
59762: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59763: LD_ADDR_VAR 0 2
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: LD_INT 21
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 21
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: PPUSH
59796: CALL_OW 69
59800: PUSH
59801: FOR_IN
59802: IFFALSE 59863
// if IsSelected ( i ) then
59804: LD_VAR 0 2
59808: PPUSH
59809: CALL_OW 306
59813: IFFALSE 59861
// begin if i in hInvincible then
59815: LD_VAR 0 2
59819: PUSH
59820: LD_EXP 106
59824: IN
59825: IFFALSE 59845
// hInvincible := hInvincible diff i else
59827: LD_ADDR_EXP 106
59831: PUSH
59832: LD_EXP 106
59836: PUSH
59837: LD_VAR 0 2
59841: DIFF
59842: ST_TO_ADDR
59843: GO 59861
// hInvincible := hInvincible union i ;
59845: LD_ADDR_EXP 106
59849: PUSH
59850: LD_EXP 106
59854: PUSH
59855: LD_VAR 0 2
59859: UNION
59860: ST_TO_ADDR
// end ;
59861: GO 59801
59863: POP
59864: POP
// end ;
59865: LD_VAR 0 1
59869: RET
// export function hHackInvisible ; var i , j ; begin
59870: LD_INT 0
59872: PPUSH
59873: PPUSH
59874: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59875: LD_ADDR_VAR 0 2
59879: PUSH
59880: LD_INT 21
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PPUSH
59890: CALL_OW 69
59894: PUSH
59895: FOR_IN
59896: IFFALSE 59920
// if IsSelected ( i ) then
59898: LD_VAR 0 2
59902: PPUSH
59903: CALL_OW 306
59907: IFFALSE 59918
// ComForceInvisible ( i ) ;
59909: LD_VAR 0 2
59913: PPUSH
59914: CALL_OW 496
59918: GO 59895
59920: POP
59921: POP
// end ;
59922: LD_VAR 0 1
59926: RET
// export function hHackChangeYourSide ; begin
59927: LD_INT 0
59929: PPUSH
// if your_side = 8 then
59930: LD_OWVAR 2
59934: PUSH
59935: LD_INT 8
59937: EQUAL
59938: IFFALSE 59950
// your_side := 0 else
59940: LD_ADDR_OWVAR 2
59944: PUSH
59945: LD_INT 0
59947: ST_TO_ADDR
59948: GO 59964
// your_side := your_side + 1 ;
59950: LD_ADDR_OWVAR 2
59954: PUSH
59955: LD_OWVAR 2
59959: PUSH
59960: LD_INT 1
59962: PLUS
59963: ST_TO_ADDR
// end ;
59964: LD_VAR 0 1
59968: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59969: LD_INT 0
59971: PPUSH
59972: PPUSH
59973: PPUSH
// for i in all_units do
59974: LD_ADDR_VAR 0 2
59978: PUSH
59979: LD_OWVAR 3
59983: PUSH
59984: FOR_IN
59985: IFFALSE 60063
// if IsSelected ( i ) then
59987: LD_VAR 0 2
59991: PPUSH
59992: CALL_OW 306
59996: IFFALSE 60061
// begin j := GetSide ( i ) ;
59998: LD_ADDR_VAR 0 3
60002: PUSH
60003: LD_VAR 0 2
60007: PPUSH
60008: CALL_OW 255
60012: ST_TO_ADDR
// if j = 8 then
60013: LD_VAR 0 3
60017: PUSH
60018: LD_INT 8
60020: EQUAL
60021: IFFALSE 60033
// j := 0 else
60023: LD_ADDR_VAR 0 3
60027: PUSH
60028: LD_INT 0
60030: ST_TO_ADDR
60031: GO 60047
// j := j + 1 ;
60033: LD_ADDR_VAR 0 3
60037: PUSH
60038: LD_VAR 0 3
60042: PUSH
60043: LD_INT 1
60045: PLUS
60046: ST_TO_ADDR
// SetSide ( i , j ) ;
60047: LD_VAR 0 2
60051: PPUSH
60052: LD_VAR 0 3
60056: PPUSH
60057: CALL_OW 235
// end ;
60061: GO 59984
60063: POP
60064: POP
// end ;
60065: LD_VAR 0 1
60069: RET
// export function hHackFog ; begin
60070: LD_INT 0
60072: PPUSH
// FogOff ( true ) ;
60073: LD_INT 1
60075: PPUSH
60076: CALL_OW 344
// end ;
60080: LD_VAR 0 1
60084: RET
// export function hHackTeleport ( unit , x , y ) ; begin
60085: LD_INT 0
60087: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
60088: LD_VAR 0 1
60092: PPUSH
60093: LD_VAR 0 2
60097: PPUSH
60098: LD_VAR 0 3
60102: PPUSH
60103: LD_INT 1
60105: PPUSH
60106: LD_INT 1
60108: PPUSH
60109: CALL_OW 483
// CenterOnXY ( x , y ) ;
60113: LD_VAR 0 2
60117: PPUSH
60118: LD_VAR 0 3
60122: PPUSH
60123: CALL_OW 84
// end ;
60127: LD_VAR 0 4
60131: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60132: LD_INT 0
60134: PPUSH
60135: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60136: LD_VAR 0 1
60140: NOT
60141: PUSH
60142: LD_VAR 0 2
60146: PPUSH
60147: LD_VAR 0 3
60151: PPUSH
60152: CALL_OW 488
60156: NOT
60157: OR
60158: PUSH
60159: LD_VAR 0 1
60163: PPUSH
60164: CALL_OW 266
60168: PUSH
60169: LD_INT 3
60171: NONEQUAL
60172: PUSH
60173: LD_VAR 0 1
60177: PPUSH
60178: CALL_OW 247
60182: PUSH
60183: LD_INT 1
60185: EQUAL
60186: NOT
60187: AND
60188: OR
60189: IFFALSE 60193
// exit ;
60191: GO 60342
// if GetType ( factory ) = unit_human then
60193: LD_VAR 0 1
60197: PPUSH
60198: CALL_OW 247
60202: PUSH
60203: LD_INT 1
60205: EQUAL
60206: IFFALSE 60223
// factory := IsInUnit ( factory ) ;
60208: LD_ADDR_VAR 0 1
60212: PUSH
60213: LD_VAR 0 1
60217: PPUSH
60218: CALL_OW 310
60222: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60223: LD_VAR 0 1
60227: PPUSH
60228: CALL_OW 266
60232: PUSH
60233: LD_INT 3
60235: NONEQUAL
60236: IFFALSE 60240
// exit ;
60238: GO 60342
// if HexInfo ( x , y ) = factory then
60240: LD_VAR 0 2
60244: PPUSH
60245: LD_VAR 0 3
60249: PPUSH
60250: CALL_OW 428
60254: PUSH
60255: LD_VAR 0 1
60259: EQUAL
60260: IFFALSE 60287
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
60262: LD_ADDR_EXP 107
60266: PUSH
60267: LD_EXP 107
60271: PPUSH
60272: LD_VAR 0 1
60276: PPUSH
60277: LD_INT 0
60279: PPUSH
60280: CALL_OW 1
60284: ST_TO_ADDR
60285: GO 60338
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60287: LD_ADDR_EXP 107
60291: PUSH
60292: LD_EXP 107
60296: PPUSH
60297: LD_VAR 0 1
60301: PPUSH
60302: LD_VAR 0 1
60306: PPUSH
60307: CALL_OW 255
60311: PUSH
60312: LD_VAR 0 1
60316: PUSH
60317: LD_VAR 0 2
60321: PUSH
60322: LD_VAR 0 3
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: PPUSH
60333: CALL_OW 1
60337: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60338: CALL 60347 0 0
// end ;
60342: LD_VAR 0 4
60346: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60347: LD_INT 0
60349: PPUSH
60350: PPUSH
60351: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60352: LD_STRING resetFactoryWaypoint();
60354: PPUSH
60355: CALL_OW 559
// if factoryWaypoints then
60359: LD_EXP 107
60363: IFFALSE 60489
// begin list := PrepareArray ( factoryWaypoints ) ;
60365: LD_ADDR_VAR 0 3
60369: PUSH
60370: LD_EXP 107
60374: PPUSH
60375: CALL 45524 0 1
60379: ST_TO_ADDR
// for i := 1 to list do
60380: LD_ADDR_VAR 0 2
60384: PUSH
60385: DOUBLE
60386: LD_INT 1
60388: DEC
60389: ST_TO_ADDR
60390: LD_VAR 0 3
60394: PUSH
60395: FOR_TO
60396: IFFALSE 60487
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60398: LD_STRING setFactoryWaypointXY(
60400: PUSH
60401: LD_VAR 0 3
60405: PUSH
60406: LD_VAR 0 2
60410: ARRAY
60411: PUSH
60412: LD_INT 1
60414: ARRAY
60415: STR
60416: PUSH
60417: LD_STRING ,
60419: STR
60420: PUSH
60421: LD_VAR 0 3
60425: PUSH
60426: LD_VAR 0 2
60430: ARRAY
60431: PUSH
60432: LD_INT 2
60434: ARRAY
60435: STR
60436: PUSH
60437: LD_STRING ,
60439: STR
60440: PUSH
60441: LD_VAR 0 3
60445: PUSH
60446: LD_VAR 0 2
60450: ARRAY
60451: PUSH
60452: LD_INT 3
60454: ARRAY
60455: STR
60456: PUSH
60457: LD_STRING ,
60459: STR
60460: PUSH
60461: LD_VAR 0 3
60465: PUSH
60466: LD_VAR 0 2
60470: ARRAY
60471: PUSH
60472: LD_INT 4
60474: ARRAY
60475: STR
60476: PUSH
60477: LD_STRING )
60479: STR
60480: PPUSH
60481: CALL_OW 559
60485: GO 60395
60487: POP
60488: POP
// end ; end ;
60489: LD_VAR 0 1
60493: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60494: LD_INT 0
60496: PPUSH
// if HexInfo ( x , y ) = warehouse then
60497: LD_VAR 0 2
60501: PPUSH
60502: LD_VAR 0 3
60506: PPUSH
60507: CALL_OW 428
60511: PUSH
60512: LD_VAR 0 1
60516: EQUAL
60517: IFFALSE 60544
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60519: LD_ADDR_EXP 108
60523: PUSH
60524: LD_EXP 108
60528: PPUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: LD_INT 0
60536: PPUSH
60537: CALL_OW 1
60541: ST_TO_ADDR
60542: GO 60595
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60544: LD_ADDR_EXP 108
60548: PUSH
60549: LD_EXP 108
60553: PPUSH
60554: LD_VAR 0 1
60558: PPUSH
60559: LD_VAR 0 1
60563: PPUSH
60564: CALL_OW 255
60568: PUSH
60569: LD_VAR 0 1
60573: PUSH
60574: LD_VAR 0 2
60578: PUSH
60579: LD_VAR 0 3
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: PPUSH
60590: CALL_OW 1
60594: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60595: CALL 60604 0 0
// end ;
60599: LD_VAR 0 4
60603: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60604: LD_INT 0
60606: PPUSH
60607: PPUSH
60608: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60609: LD_STRING resetWarehouseGatheringPoints();
60611: PPUSH
60612: CALL_OW 559
// if warehouseGatheringPoints then
60616: LD_EXP 108
60620: IFFALSE 60746
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60622: LD_ADDR_VAR 0 3
60626: PUSH
60627: LD_EXP 108
60631: PPUSH
60632: CALL 45524 0 1
60636: ST_TO_ADDR
// for i := 1 to list do
60637: LD_ADDR_VAR 0 2
60641: PUSH
60642: DOUBLE
60643: LD_INT 1
60645: DEC
60646: ST_TO_ADDR
60647: LD_VAR 0 3
60651: PUSH
60652: FOR_TO
60653: IFFALSE 60744
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60655: LD_STRING setWarehouseGatheringPointXY(
60657: PUSH
60658: LD_VAR 0 3
60662: PUSH
60663: LD_VAR 0 2
60667: ARRAY
60668: PUSH
60669: LD_INT 1
60671: ARRAY
60672: STR
60673: PUSH
60674: LD_STRING ,
60676: STR
60677: PUSH
60678: LD_VAR 0 3
60682: PUSH
60683: LD_VAR 0 2
60687: ARRAY
60688: PUSH
60689: LD_INT 2
60691: ARRAY
60692: STR
60693: PUSH
60694: LD_STRING ,
60696: STR
60697: PUSH
60698: LD_VAR 0 3
60702: PUSH
60703: LD_VAR 0 2
60707: ARRAY
60708: PUSH
60709: LD_INT 3
60711: ARRAY
60712: STR
60713: PUSH
60714: LD_STRING ,
60716: STR
60717: PUSH
60718: LD_VAR 0 3
60722: PUSH
60723: LD_VAR 0 2
60727: ARRAY
60728: PUSH
60729: LD_INT 4
60731: ARRAY
60732: STR
60733: PUSH
60734: LD_STRING )
60736: STR
60737: PPUSH
60738: CALL_OW 559
60742: GO 60652
60744: POP
60745: POP
// end ; end ;
60746: LD_VAR 0 1
60750: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
60751: LD_EXP 108
60755: IFFALSE 61442
60757: GO 60759
60759: DISABLE
60760: LD_INT 0
60762: PPUSH
60763: PPUSH
60764: PPUSH
60765: PPUSH
60766: PPUSH
60767: PPUSH
60768: PPUSH
60769: PPUSH
60770: PPUSH
// begin enable ;
60771: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
60772: LD_ADDR_VAR 0 3
60776: PUSH
60777: LD_EXP 108
60781: PPUSH
60782: CALL 45524 0 1
60786: ST_TO_ADDR
// if not list then
60787: LD_VAR 0 3
60791: NOT
60792: IFFALSE 60796
// exit ;
60794: GO 61442
// for i := 1 to list do
60796: LD_ADDR_VAR 0 1
60800: PUSH
60801: DOUBLE
60802: LD_INT 1
60804: DEC
60805: ST_TO_ADDR
60806: LD_VAR 0 3
60810: PUSH
60811: FOR_TO
60812: IFFALSE 61440
// begin depot := list [ i ] [ 2 ] ;
60814: LD_ADDR_VAR 0 8
60818: PUSH
60819: LD_VAR 0 3
60823: PUSH
60824: LD_VAR 0 1
60828: ARRAY
60829: PUSH
60830: LD_INT 2
60832: ARRAY
60833: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
60834: LD_ADDR_VAR 0 5
60838: PUSH
60839: LD_VAR 0 3
60843: PUSH
60844: LD_VAR 0 1
60848: ARRAY
60849: PUSH
60850: LD_INT 1
60852: ARRAY
60853: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
60854: LD_VAR 0 8
60858: PPUSH
60859: CALL_OW 301
60863: PUSH
60864: LD_VAR 0 5
60868: PUSH
60869: LD_VAR 0 8
60873: PPUSH
60874: CALL_OW 255
60878: NONEQUAL
60879: OR
60880: IFFALSE 60909
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60882: LD_ADDR_EXP 108
60886: PUSH
60887: LD_EXP 108
60891: PPUSH
60892: LD_VAR 0 8
60896: PPUSH
60897: LD_INT 0
60899: PPUSH
60900: CALL_OW 1
60904: ST_TO_ADDR
// exit ;
60905: POP
60906: POP
60907: GO 61442
// end ; x := list [ i ] [ 3 ] ;
60909: LD_ADDR_VAR 0 6
60913: PUSH
60914: LD_VAR 0 3
60918: PUSH
60919: LD_VAR 0 1
60923: ARRAY
60924: PUSH
60925: LD_INT 3
60927: ARRAY
60928: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60929: LD_ADDR_VAR 0 7
60933: PUSH
60934: LD_VAR 0 3
60938: PUSH
60939: LD_VAR 0 1
60943: ARRAY
60944: PUSH
60945: LD_INT 4
60947: ARRAY
60948: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
60949: LD_ADDR_VAR 0 9
60953: PUSH
60954: LD_VAR 0 6
60958: PPUSH
60959: LD_VAR 0 7
60963: PPUSH
60964: LD_INT 16
60966: PPUSH
60967: CALL 44108 0 3
60971: ST_TO_ADDR
// if not cratesNearbyPoint then
60972: LD_VAR 0 9
60976: NOT
60977: IFFALSE 60983
// exit ;
60979: POP
60980: POP
60981: GO 61442
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60983: LD_ADDR_VAR 0 4
60987: PUSH
60988: LD_INT 22
60990: PUSH
60991: LD_VAR 0 5
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: LD_INT 60
61005: PUSH
61006: EMPTY
61007: LIST
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 91
61015: PUSH
61016: LD_VAR 0 8
61020: PUSH
61021: LD_INT 6
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: LD_INT 25
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 25
61044: PUSH
61045: LD_INT 16
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: LIST
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: PPUSH
61063: CALL_OW 69
61067: PUSH
61068: LD_VAR 0 8
61072: PPUSH
61073: CALL_OW 313
61077: PPUSH
61078: LD_INT 3
61080: PUSH
61081: LD_INT 60
61083: PUSH
61084: EMPTY
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 25
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 25
61106: PUSH
61107: LD_INT 16
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PPUSH
61123: CALL_OW 72
61127: UNION
61128: ST_TO_ADDR
// if tmp then
61129: LD_VAR 0 4
61133: IFFALSE 61213
// begin tmp := ShrinkArray ( tmp , 3 ) ;
61135: LD_ADDR_VAR 0 4
61139: PUSH
61140: LD_VAR 0 4
61144: PPUSH
61145: LD_INT 3
61147: PPUSH
61148: CALL 42075 0 2
61152: ST_TO_ADDR
// for j in tmp do
61153: LD_ADDR_VAR 0 2
61157: PUSH
61158: LD_VAR 0 4
61162: PUSH
61163: FOR_IN
61164: IFFALSE 61207
// begin if IsInUnit ( j ) then
61166: LD_VAR 0 2
61170: PPUSH
61171: CALL_OW 310
61175: IFFALSE 61186
// ComExit ( j ) ;
61177: LD_VAR 0 2
61181: PPUSH
61182: CALL 42158 0 1
// AddComCollect ( j , x , y ) ;
61186: LD_VAR 0 2
61190: PPUSH
61191: LD_VAR 0 6
61195: PPUSH
61196: LD_VAR 0 7
61200: PPUSH
61201: CALL_OW 177
// end ;
61205: GO 61163
61207: POP
61208: POP
// exit ;
61209: POP
61210: POP
61211: GO 61442
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
61213: LD_ADDR_VAR 0 4
61217: PUSH
61218: LD_INT 22
61220: PUSH
61221: LD_VAR 0 5
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 91
61232: PUSH
61233: LD_VAR 0 8
61237: PUSH
61238: LD_INT 8
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: LD_INT 34
61251: PUSH
61252: LD_INT 12
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 34
61261: PUSH
61262: LD_INT 51
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 34
61271: PUSH
61272: LD_INT 32
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 34
61281: PUSH
61282: LD_EXP 32
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: PPUSH
61303: CALL_OW 69
61307: ST_TO_ADDR
// if tmp then
61308: LD_VAR 0 4
61312: IFFALSE 61438
// begin for j in tmp do
61314: LD_ADDR_VAR 0 2
61318: PUSH
61319: LD_VAR 0 4
61323: PUSH
61324: FOR_IN
61325: IFFALSE 61436
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
61327: LD_VAR 0 2
61331: PPUSH
61332: CALL_OW 262
61336: PUSH
61337: LD_INT 3
61339: EQUAL
61340: PUSH
61341: LD_VAR 0 2
61345: PPUSH
61346: CALL_OW 261
61350: PUSH
61351: LD_INT 20
61353: GREATER
61354: OR
61355: PUSH
61356: LD_VAR 0 2
61360: PPUSH
61361: CALL_OW 314
61365: NOT
61366: AND
61367: PUSH
61368: LD_VAR 0 2
61372: PPUSH
61373: CALL_OW 263
61377: PUSH
61378: LD_INT 1
61380: NONEQUAL
61381: PUSH
61382: LD_VAR 0 2
61386: PPUSH
61387: CALL_OW 311
61391: OR
61392: AND
61393: IFFALSE 61434
// begin ComCollect ( j , x , y ) ;
61395: LD_VAR 0 2
61399: PPUSH
61400: LD_VAR 0 6
61404: PPUSH
61405: LD_VAR 0 7
61409: PPUSH
61410: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
61414: LD_VAR 0 2
61418: PPUSH
61419: LD_VAR 0 8
61423: PPUSH
61424: CALL_OW 172
// exit ;
61428: POP
61429: POP
61430: POP
61431: POP
61432: GO 61442
// end ;
61434: GO 61324
61436: POP
61437: POP
// end ; end ;
61438: GO 60811
61440: POP
61441: POP
// end ; end_of_file
61442: PPOPN 9
61444: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61445: LD_VAR 0 1
61449: PUSH
61450: LD_INT 200
61452: DOUBLE
61453: GREATEREQUAL
61454: IFFALSE 61462
61456: LD_INT 299
61458: DOUBLE
61459: LESSEQUAL
61460: IFTRUE 61464
61462: GO 61496
61464: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61465: LD_VAR 0 1
61469: PPUSH
61470: LD_VAR 0 2
61474: PPUSH
61475: LD_VAR 0 3
61479: PPUSH
61480: LD_VAR 0 4
61484: PPUSH
61485: LD_VAR 0 5
61489: PPUSH
61490: CALL 61986 0 5
61494: GO 61573
61496: LD_INT 300
61498: DOUBLE
61499: GREATEREQUAL
61500: IFFALSE 61508
61502: LD_INT 399
61504: DOUBLE
61505: LESSEQUAL
61506: IFTRUE 61510
61508: GO 61572
61510: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61511: LD_VAR 0 1
61515: PPUSH
61516: LD_VAR 0 2
61520: PPUSH
61521: LD_VAR 0 3
61525: PPUSH
61526: LD_VAR 0 4
61530: PPUSH
61531: LD_VAR 0 5
61535: PPUSH
61536: LD_VAR 0 6
61540: PPUSH
61541: LD_VAR 0 7
61545: PPUSH
61546: LD_VAR 0 8
61550: PPUSH
61551: LD_VAR 0 9
61555: PPUSH
61556: LD_VAR 0 10
61560: PPUSH
61561: LD_VAR 0 11
61565: PPUSH
61566: CALL 58152 0 11
61570: GO 61573
61572: POP
// end ;
61573: PPOPN 11
61575: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61576: LD_VAR 0 1
61580: PPUSH
61581: LD_VAR 0 2
61585: PPUSH
61586: LD_VAR 0 3
61590: PPUSH
61591: LD_VAR 0 4
61595: PPUSH
61596: LD_VAR 0 5
61600: PPUSH
61601: CALL 61722 0 5
// end ; end_of_file
61605: PPOPN 5
61607: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
61608: LD_INT 0
61610: PPUSH
61611: PPUSH
61612: PPUSH
61613: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
61614: LD_VAR 0 1
61618: PPUSH
61619: CALL_OW 264
61623: PUSH
61624: LD_EXP 35
61628: EQUAL
61629: IFFALSE 61701
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61631: LD_INT 68
61633: PPUSH
61634: LD_VAR 0 1
61638: PPUSH
61639: CALL_OW 255
61643: PPUSH
61644: CALL_OW 321
61648: PUSH
61649: LD_INT 2
61651: EQUAL
61652: IFFALSE 61664
// eff := 70 else
61654: LD_ADDR_VAR 0 4
61658: PUSH
61659: LD_INT 70
61661: ST_TO_ADDR
61662: GO 61672
// eff := 30 ;
61664: LD_ADDR_VAR 0 4
61668: PUSH
61669: LD_INT 30
61671: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61672: LD_VAR 0 1
61676: PPUSH
61677: CALL_OW 250
61681: PPUSH
61682: LD_VAR 0 1
61686: PPUSH
61687: CALL_OW 251
61691: PPUSH
61692: LD_VAR 0 4
61696: PPUSH
61697: CALL_OW 495
// end ; end ;
61701: LD_VAR 0 2
61705: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61706: LD_INT 0
61708: PPUSH
// end ;
61709: LD_VAR 0 4
61713: RET
// export function SOS_Command ( cmd ) ; begin
61714: LD_INT 0
61716: PPUSH
// end ;
61717: LD_VAR 0 2
61721: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
61722: LD_INT 0
61724: PPUSH
// end ;
61725: LD_VAR 0 6
61729: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
61730: LD_INT 0
61732: PPUSH
61733: PPUSH
// if not vehicle or not factory then
61734: LD_VAR 0 1
61738: NOT
61739: PUSH
61740: LD_VAR 0 2
61744: NOT
61745: OR
61746: IFFALSE 61750
// exit ;
61748: GO 61981
// if factoryWaypoints >= factory then
61750: LD_EXP 107
61754: PUSH
61755: LD_VAR 0 2
61759: GREATEREQUAL
61760: IFFALSE 61981
// if factoryWaypoints [ factory ] then
61762: LD_EXP 107
61766: PUSH
61767: LD_VAR 0 2
61771: ARRAY
61772: IFFALSE 61981
// begin if GetControl ( vehicle ) = control_manual then
61774: LD_VAR 0 1
61778: PPUSH
61779: CALL_OW 263
61783: PUSH
61784: LD_INT 1
61786: EQUAL
61787: IFFALSE 61868
// begin driver := IsDrivenBy ( vehicle ) ;
61789: LD_ADDR_VAR 0 4
61793: PUSH
61794: LD_VAR 0 1
61798: PPUSH
61799: CALL_OW 311
61803: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61804: LD_VAR 0 4
61808: PPUSH
61809: LD_EXP 107
61813: PUSH
61814: LD_VAR 0 2
61818: ARRAY
61819: PUSH
61820: LD_INT 3
61822: ARRAY
61823: PPUSH
61824: LD_EXP 107
61828: PUSH
61829: LD_VAR 0 2
61833: ARRAY
61834: PUSH
61835: LD_INT 4
61837: ARRAY
61838: PPUSH
61839: CALL_OW 171
// AddComExitVehicle ( driver ) ;
61843: LD_VAR 0 4
61847: PPUSH
61848: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
61852: LD_VAR 0 4
61856: PPUSH
61857: LD_VAR 0 2
61861: PPUSH
61862: CALL_OW 180
// end else
61866: GO 61981
// if GetControl ( vehicle ) = control_remote then
61868: LD_VAR 0 1
61872: PPUSH
61873: CALL_OW 263
61877: PUSH
61878: LD_INT 2
61880: EQUAL
61881: IFFALSE 61942
// begin wait ( 0 0$2 ) ;
61883: LD_INT 70
61885: PPUSH
61886: CALL_OW 67
// if Connect ( vehicle ) then
61890: LD_VAR 0 1
61894: PPUSH
61895: CALL 12486 0 1
61899: IFFALSE 61940
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61901: LD_VAR 0 1
61905: PPUSH
61906: LD_EXP 107
61910: PUSH
61911: LD_VAR 0 2
61915: ARRAY
61916: PUSH
61917: LD_INT 3
61919: ARRAY
61920: PPUSH
61921: LD_EXP 107
61925: PUSH
61926: LD_VAR 0 2
61930: ARRAY
61931: PUSH
61932: LD_INT 4
61934: ARRAY
61935: PPUSH
61936: CALL_OW 171
// end else
61940: GO 61981
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61942: LD_VAR 0 1
61946: PPUSH
61947: LD_EXP 107
61951: PUSH
61952: LD_VAR 0 2
61956: ARRAY
61957: PUSH
61958: LD_INT 3
61960: ARRAY
61961: PPUSH
61962: LD_EXP 107
61966: PUSH
61967: LD_VAR 0 2
61971: ARRAY
61972: PUSH
61973: LD_INT 4
61975: ARRAY
61976: PPUSH
61977: CALL_OW 171
// end ; end ;
61981: LD_VAR 0 3
61985: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61986: LD_INT 0
61988: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61989: LD_VAR 0 1
61993: PUSH
61994: LD_INT 250
61996: EQUAL
61997: PUSH
61998: LD_VAR 0 2
62002: PPUSH
62003: CALL_OW 264
62007: PUSH
62008: LD_EXP 38
62012: EQUAL
62013: AND
62014: IFFALSE 62035
// MinerPlaceMine ( unit , x , y ) ;
62016: LD_VAR 0 2
62020: PPUSH
62021: LD_VAR 0 4
62025: PPUSH
62026: LD_VAR 0 5
62030: PPUSH
62031: CALL 64434 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62035: LD_VAR 0 1
62039: PUSH
62040: LD_INT 251
62042: EQUAL
62043: PUSH
62044: LD_VAR 0 2
62048: PPUSH
62049: CALL_OW 264
62053: PUSH
62054: LD_EXP 38
62058: EQUAL
62059: AND
62060: IFFALSE 62081
// MinerDetonateMine ( unit , x , y ) ;
62062: LD_VAR 0 2
62066: PPUSH
62067: LD_VAR 0 4
62071: PPUSH
62072: LD_VAR 0 5
62076: PPUSH
62077: CALL 64711 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62081: LD_VAR 0 1
62085: PUSH
62086: LD_INT 252
62088: EQUAL
62089: PUSH
62090: LD_VAR 0 2
62094: PPUSH
62095: CALL_OW 264
62099: PUSH
62100: LD_EXP 38
62104: EQUAL
62105: AND
62106: IFFALSE 62127
// MinerCreateMinefield ( unit , x , y ) ;
62108: LD_VAR 0 2
62112: PPUSH
62113: LD_VAR 0 4
62117: PPUSH
62118: LD_VAR 0 5
62122: PPUSH
62123: CALL 65128 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62127: LD_VAR 0 1
62131: PUSH
62132: LD_INT 253
62134: EQUAL
62135: PUSH
62136: LD_VAR 0 2
62140: PPUSH
62141: CALL_OW 257
62145: PUSH
62146: LD_INT 5
62148: EQUAL
62149: AND
62150: IFFALSE 62171
// ComBinocular ( unit , x , y ) ;
62152: LD_VAR 0 2
62156: PPUSH
62157: LD_VAR 0 4
62161: PPUSH
62162: LD_VAR 0 5
62166: PPUSH
62167: CALL 65499 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62171: LD_VAR 0 1
62175: PUSH
62176: LD_INT 254
62178: EQUAL
62179: PUSH
62180: LD_VAR 0 2
62184: PPUSH
62185: CALL_OW 264
62189: PUSH
62190: LD_EXP 33
62194: EQUAL
62195: AND
62196: PUSH
62197: LD_VAR 0 3
62201: PPUSH
62202: CALL_OW 263
62206: PUSH
62207: LD_INT 3
62209: EQUAL
62210: AND
62211: IFFALSE 62227
// HackDestroyVehicle ( unit , selectedUnit ) ;
62213: LD_VAR 0 2
62217: PPUSH
62218: LD_VAR 0 3
62222: PPUSH
62223: CALL 63794 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62227: LD_VAR 0 1
62231: PUSH
62232: LD_INT 255
62234: EQUAL
62235: PUSH
62236: LD_VAR 0 2
62240: PPUSH
62241: CALL_OW 264
62245: PUSH
62246: LD_INT 14
62248: PUSH
62249: LD_INT 53
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: IN
62256: AND
62257: PUSH
62258: LD_VAR 0 4
62262: PPUSH
62263: LD_VAR 0 5
62267: PPUSH
62268: CALL_OW 488
62272: AND
62273: IFFALSE 62297
// CutTreeXYR ( unit , x , y , 12 ) ;
62275: LD_VAR 0 2
62279: PPUSH
62280: LD_VAR 0 4
62284: PPUSH
62285: LD_VAR 0 5
62289: PPUSH
62290: LD_INT 12
62292: PPUSH
62293: CALL 62360 0 4
// if cmd = 256 then
62297: LD_VAR 0 1
62301: PUSH
62302: LD_INT 256
62304: EQUAL
62305: IFFALSE 62326
// SetFactoryWaypoint ( unit , x , y ) ;
62307: LD_VAR 0 2
62311: PPUSH
62312: LD_VAR 0 4
62316: PPUSH
62317: LD_VAR 0 5
62321: PPUSH
62322: CALL 60132 0 3
// if cmd = 257 then
62326: LD_VAR 0 1
62330: PUSH
62331: LD_INT 257
62333: EQUAL
62334: IFFALSE 62355
// SetWarehouseGatheringPoint ( unit , x , y ) ;
62336: LD_VAR 0 2
62340: PPUSH
62341: LD_VAR 0 4
62345: PPUSH
62346: LD_VAR 0 5
62350: PPUSH
62351: CALL 60494 0 3
// end ;
62355: LD_VAR 0 6
62359: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62360: LD_INT 0
62362: PPUSH
62363: PPUSH
62364: PPUSH
62365: PPUSH
62366: PPUSH
62367: PPUSH
62368: PPUSH
62369: PPUSH
62370: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
62371: LD_VAR 0 1
62375: NOT
62376: PUSH
62377: LD_VAR 0 2
62381: PPUSH
62382: LD_VAR 0 3
62386: PPUSH
62387: CALL_OW 488
62391: NOT
62392: OR
62393: PUSH
62394: LD_VAR 0 4
62398: NOT
62399: OR
62400: IFFALSE 62404
// exit ;
62402: GO 62744
// list := [ ] ;
62404: LD_ADDR_VAR 0 13
62408: PUSH
62409: EMPTY
62410: ST_TO_ADDR
// if x - r < 0 then
62411: LD_VAR 0 2
62415: PUSH
62416: LD_VAR 0 4
62420: MINUS
62421: PUSH
62422: LD_INT 0
62424: LESS
62425: IFFALSE 62437
// min_x := 0 else
62427: LD_ADDR_VAR 0 7
62431: PUSH
62432: LD_INT 0
62434: ST_TO_ADDR
62435: GO 62453
// min_x := x - r ;
62437: LD_ADDR_VAR 0 7
62441: PUSH
62442: LD_VAR 0 2
62446: PUSH
62447: LD_VAR 0 4
62451: MINUS
62452: ST_TO_ADDR
// if y - r < 0 then
62453: LD_VAR 0 3
62457: PUSH
62458: LD_VAR 0 4
62462: MINUS
62463: PUSH
62464: LD_INT 0
62466: LESS
62467: IFFALSE 62479
// min_y := 0 else
62469: LD_ADDR_VAR 0 8
62473: PUSH
62474: LD_INT 0
62476: ST_TO_ADDR
62477: GO 62495
// min_y := y - r ;
62479: LD_ADDR_VAR 0 8
62483: PUSH
62484: LD_VAR 0 3
62488: PUSH
62489: LD_VAR 0 4
62493: MINUS
62494: ST_TO_ADDR
// max_x := x + r ;
62495: LD_ADDR_VAR 0 9
62499: PUSH
62500: LD_VAR 0 2
62504: PUSH
62505: LD_VAR 0 4
62509: PLUS
62510: ST_TO_ADDR
// max_y := y + r ;
62511: LD_ADDR_VAR 0 10
62515: PUSH
62516: LD_VAR 0 3
62520: PUSH
62521: LD_VAR 0 4
62525: PLUS
62526: ST_TO_ADDR
// for _x = min_x to max_x do
62527: LD_ADDR_VAR 0 11
62531: PUSH
62532: DOUBLE
62533: LD_VAR 0 7
62537: DEC
62538: ST_TO_ADDR
62539: LD_VAR 0 9
62543: PUSH
62544: FOR_TO
62545: IFFALSE 62662
// for _y = min_y to max_y do
62547: LD_ADDR_VAR 0 12
62551: PUSH
62552: DOUBLE
62553: LD_VAR 0 8
62557: DEC
62558: ST_TO_ADDR
62559: LD_VAR 0 10
62563: PUSH
62564: FOR_TO
62565: IFFALSE 62658
// begin if not ValidHex ( _x , _y ) then
62567: LD_VAR 0 11
62571: PPUSH
62572: LD_VAR 0 12
62576: PPUSH
62577: CALL_OW 488
62581: NOT
62582: IFFALSE 62586
// continue ;
62584: GO 62564
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62586: LD_VAR 0 11
62590: PPUSH
62591: LD_VAR 0 12
62595: PPUSH
62596: CALL_OW 351
62600: PUSH
62601: LD_VAR 0 11
62605: PPUSH
62606: LD_VAR 0 12
62610: PPUSH
62611: CALL_OW 554
62615: AND
62616: IFFALSE 62656
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62618: LD_ADDR_VAR 0 13
62622: PUSH
62623: LD_VAR 0 13
62627: PPUSH
62628: LD_VAR 0 13
62632: PUSH
62633: LD_INT 1
62635: PLUS
62636: PPUSH
62637: LD_VAR 0 11
62641: PUSH
62642: LD_VAR 0 12
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PPUSH
62651: CALL_OW 2
62655: ST_TO_ADDR
// end ;
62656: GO 62564
62658: POP
62659: POP
62660: GO 62544
62662: POP
62663: POP
// if not list then
62664: LD_VAR 0 13
62668: NOT
62669: IFFALSE 62673
// exit ;
62671: GO 62744
// for i in list do
62673: LD_ADDR_VAR 0 6
62677: PUSH
62678: LD_VAR 0 13
62682: PUSH
62683: FOR_IN
62684: IFFALSE 62742
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62686: LD_VAR 0 1
62690: PPUSH
62691: LD_STRING M
62693: PUSH
62694: LD_VAR 0 6
62698: PUSH
62699: LD_INT 1
62701: ARRAY
62702: PUSH
62703: LD_VAR 0 6
62707: PUSH
62708: LD_INT 2
62710: ARRAY
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: PPUSH
62736: CALL_OW 447
62740: GO 62683
62742: POP
62743: POP
// end ;
62744: LD_VAR 0 5
62748: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62749: LD_EXP 110
62753: NOT
62754: IFFALSE 62804
62756: GO 62758
62758: DISABLE
// begin initHack := true ;
62759: LD_ADDR_EXP 110
62763: PUSH
62764: LD_INT 1
62766: ST_TO_ADDR
// hackTanks := [ ] ;
62767: LD_ADDR_EXP 111
62771: PUSH
62772: EMPTY
62773: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62774: LD_ADDR_EXP 112
62778: PUSH
62779: EMPTY
62780: ST_TO_ADDR
// hackLimit := 3 ;
62781: LD_ADDR_EXP 113
62785: PUSH
62786: LD_INT 3
62788: ST_TO_ADDR
// hackDist := 12 ;
62789: LD_ADDR_EXP 114
62793: PUSH
62794: LD_INT 12
62796: ST_TO_ADDR
// hackCounter := [ ] ;
62797: LD_ADDR_EXP 115
62801: PUSH
62802: EMPTY
62803: ST_TO_ADDR
// end ;
62804: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62805: LD_EXP 110
62809: PUSH
62810: LD_INT 34
62812: PUSH
62813: LD_EXP 33
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PPUSH
62822: CALL_OW 69
62826: AND
62827: IFFALSE 63082
62829: GO 62831
62831: DISABLE
62832: LD_INT 0
62834: PPUSH
62835: PPUSH
// begin enable ;
62836: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62837: LD_ADDR_VAR 0 1
62841: PUSH
62842: LD_INT 34
62844: PUSH
62845: LD_EXP 33
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PPUSH
62854: CALL_OW 69
62858: PUSH
62859: FOR_IN
62860: IFFALSE 63080
// begin if not i in hackTanks then
62862: LD_VAR 0 1
62866: PUSH
62867: LD_EXP 111
62871: IN
62872: NOT
62873: IFFALSE 62956
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62875: LD_ADDR_EXP 111
62879: PUSH
62880: LD_EXP 111
62884: PPUSH
62885: LD_EXP 111
62889: PUSH
62890: LD_INT 1
62892: PLUS
62893: PPUSH
62894: LD_VAR 0 1
62898: PPUSH
62899: CALL_OW 1
62903: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62904: LD_ADDR_EXP 112
62908: PUSH
62909: LD_EXP 112
62913: PPUSH
62914: LD_EXP 112
62918: PUSH
62919: LD_INT 1
62921: PLUS
62922: PPUSH
62923: EMPTY
62924: PPUSH
62925: CALL_OW 1
62929: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62930: LD_ADDR_EXP 115
62934: PUSH
62935: LD_EXP 115
62939: PPUSH
62940: LD_EXP 115
62944: PUSH
62945: LD_INT 1
62947: PLUS
62948: PPUSH
62949: EMPTY
62950: PPUSH
62951: CALL_OW 1
62955: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62956: LD_VAR 0 1
62960: PPUSH
62961: CALL_OW 302
62965: NOT
62966: IFFALSE 62979
// begin HackUnlinkAll ( i ) ;
62968: LD_VAR 0 1
62972: PPUSH
62973: CALL 63085 0 1
// continue ;
62977: GO 62859
// end ; HackCheckCapturedStatus ( i ) ;
62979: LD_VAR 0 1
62983: PPUSH
62984: CALL 63528 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62988: LD_ADDR_VAR 0 2
62992: PUSH
62993: LD_INT 81
62995: PUSH
62996: LD_VAR 0 1
63000: PPUSH
63001: CALL_OW 255
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 33
63012: PUSH
63013: LD_INT 3
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 91
63022: PUSH
63023: LD_VAR 0 1
63027: PUSH
63028: LD_EXP 114
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 50
63040: PUSH
63041: EMPTY
63042: LIST
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: PPUSH
63050: CALL_OW 69
63054: ST_TO_ADDR
// if not tmp then
63055: LD_VAR 0 2
63059: NOT
63060: IFFALSE 63064
// continue ;
63062: GO 62859
// HackLink ( i , tmp ) ;
63064: LD_VAR 0 1
63068: PPUSH
63069: LD_VAR 0 2
63073: PPUSH
63074: CALL 63221 0 2
// end ;
63078: GO 62859
63080: POP
63081: POP
// end ;
63082: PPOPN 2
63084: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63085: LD_INT 0
63087: PPUSH
63088: PPUSH
63089: PPUSH
// if not hack in hackTanks then
63090: LD_VAR 0 1
63094: PUSH
63095: LD_EXP 111
63099: IN
63100: NOT
63101: IFFALSE 63105
// exit ;
63103: GO 63216
// index := GetElementIndex ( hackTanks , hack ) ;
63105: LD_ADDR_VAR 0 4
63109: PUSH
63110: LD_EXP 111
63114: PPUSH
63115: LD_VAR 0 1
63119: PPUSH
63120: CALL 9300 0 2
63124: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63125: LD_EXP 112
63129: PUSH
63130: LD_VAR 0 4
63134: ARRAY
63135: IFFALSE 63216
// begin for i in hackTanksCaptured [ index ] do
63137: LD_ADDR_VAR 0 3
63141: PUSH
63142: LD_EXP 112
63146: PUSH
63147: LD_VAR 0 4
63151: ARRAY
63152: PUSH
63153: FOR_IN
63154: IFFALSE 63180
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63156: LD_VAR 0 3
63160: PUSH
63161: LD_INT 1
63163: ARRAY
63164: PPUSH
63165: LD_VAR 0 3
63169: PUSH
63170: LD_INT 2
63172: ARRAY
63173: PPUSH
63174: CALL_OW 235
63178: GO 63153
63180: POP
63181: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63182: LD_ADDR_EXP 112
63186: PUSH
63187: LD_EXP 112
63191: PPUSH
63192: LD_VAR 0 4
63196: PPUSH
63197: EMPTY
63198: PPUSH
63199: CALL_OW 1
63203: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63204: LD_VAR 0 1
63208: PPUSH
63209: LD_INT 0
63211: PPUSH
63212: CALL_OW 505
// end ; end ;
63216: LD_VAR 0 2
63220: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63221: LD_INT 0
63223: PPUSH
63224: PPUSH
63225: PPUSH
// if not hack in hackTanks or not vehicles then
63226: LD_VAR 0 1
63230: PUSH
63231: LD_EXP 111
63235: IN
63236: NOT
63237: PUSH
63238: LD_VAR 0 2
63242: NOT
63243: OR
63244: IFFALSE 63248
// exit ;
63246: GO 63523
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63248: LD_ADDR_VAR 0 2
63252: PUSH
63253: LD_VAR 0 1
63257: PPUSH
63258: LD_VAR 0 2
63262: PPUSH
63263: LD_INT 1
63265: PPUSH
63266: LD_INT 1
63268: PPUSH
63269: CALL 9950 0 4
63273: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63274: LD_ADDR_VAR 0 5
63278: PUSH
63279: LD_EXP 111
63283: PPUSH
63284: LD_VAR 0 1
63288: PPUSH
63289: CALL 9300 0 2
63293: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63294: LD_EXP 112
63298: PUSH
63299: LD_VAR 0 5
63303: ARRAY
63304: PUSH
63305: LD_EXP 113
63309: LESS
63310: IFFALSE 63499
// begin for i := 1 to vehicles do
63312: LD_ADDR_VAR 0 4
63316: PUSH
63317: DOUBLE
63318: LD_INT 1
63320: DEC
63321: ST_TO_ADDR
63322: LD_VAR 0 2
63326: PUSH
63327: FOR_TO
63328: IFFALSE 63497
// begin if hackTanksCaptured [ index ] = hackLimit then
63330: LD_EXP 112
63334: PUSH
63335: LD_VAR 0 5
63339: ARRAY
63340: PUSH
63341: LD_EXP 113
63345: EQUAL
63346: IFFALSE 63350
// break ;
63348: GO 63497
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63350: LD_ADDR_EXP 115
63354: PUSH
63355: LD_EXP 115
63359: PPUSH
63360: LD_VAR 0 5
63364: PPUSH
63365: LD_EXP 115
63369: PUSH
63370: LD_VAR 0 5
63374: ARRAY
63375: PUSH
63376: LD_INT 1
63378: PLUS
63379: PPUSH
63380: CALL_OW 1
63384: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63385: LD_ADDR_EXP 112
63389: PUSH
63390: LD_EXP 112
63394: PPUSH
63395: LD_VAR 0 5
63399: PUSH
63400: LD_EXP 112
63404: PUSH
63405: LD_VAR 0 5
63409: ARRAY
63410: PUSH
63411: LD_INT 1
63413: PLUS
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PPUSH
63419: LD_VAR 0 2
63423: PUSH
63424: LD_VAR 0 4
63428: ARRAY
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: LD_VAR 0 4
63439: ARRAY
63440: PPUSH
63441: CALL_OW 255
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PPUSH
63450: CALL 9515 0 3
63454: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63455: LD_VAR 0 2
63459: PUSH
63460: LD_VAR 0 4
63464: ARRAY
63465: PPUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: CALL_OW 255
63475: PPUSH
63476: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63480: LD_VAR 0 2
63484: PUSH
63485: LD_VAR 0 4
63489: ARRAY
63490: PPUSH
63491: CALL_OW 141
// end ;
63495: GO 63327
63497: POP
63498: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63499: LD_VAR 0 1
63503: PPUSH
63504: LD_EXP 112
63508: PUSH
63509: LD_VAR 0 5
63513: ARRAY
63514: PUSH
63515: LD_INT 0
63517: PLUS
63518: PPUSH
63519: CALL_OW 505
// end ;
63523: LD_VAR 0 3
63527: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63528: LD_INT 0
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
// if not hack in hackTanks then
63534: LD_VAR 0 1
63538: PUSH
63539: LD_EXP 111
63543: IN
63544: NOT
63545: IFFALSE 63549
// exit ;
63547: GO 63789
// index := GetElementIndex ( hackTanks , hack ) ;
63549: LD_ADDR_VAR 0 4
63553: PUSH
63554: LD_EXP 111
63558: PPUSH
63559: LD_VAR 0 1
63563: PPUSH
63564: CALL 9300 0 2
63568: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63569: LD_ADDR_VAR 0 3
63573: PUSH
63574: DOUBLE
63575: LD_EXP 112
63579: PUSH
63580: LD_VAR 0 4
63584: ARRAY
63585: INC
63586: ST_TO_ADDR
63587: LD_INT 1
63589: PUSH
63590: FOR_DOWNTO
63591: IFFALSE 63763
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63593: LD_ADDR_VAR 0 5
63597: PUSH
63598: LD_EXP 112
63602: PUSH
63603: LD_VAR 0 4
63607: ARRAY
63608: PUSH
63609: LD_VAR 0 3
63613: ARRAY
63614: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63615: LD_VAR 0 5
63619: PUSH
63620: LD_INT 1
63622: ARRAY
63623: PPUSH
63624: CALL_OW 302
63628: NOT
63629: PUSH
63630: LD_VAR 0 5
63634: PUSH
63635: LD_INT 1
63637: ARRAY
63638: PPUSH
63639: CALL_OW 255
63643: PUSH
63644: LD_VAR 0 1
63648: PPUSH
63649: CALL_OW 255
63653: NONEQUAL
63654: OR
63655: IFFALSE 63761
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63657: LD_VAR 0 5
63661: PUSH
63662: LD_INT 1
63664: ARRAY
63665: PPUSH
63666: CALL_OW 305
63670: PUSH
63671: LD_VAR 0 5
63675: PUSH
63676: LD_INT 1
63678: ARRAY
63679: PPUSH
63680: CALL_OW 255
63684: PUSH
63685: LD_VAR 0 1
63689: PPUSH
63690: CALL_OW 255
63694: EQUAL
63695: AND
63696: IFFALSE 63720
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63698: LD_VAR 0 5
63702: PUSH
63703: LD_INT 1
63705: ARRAY
63706: PPUSH
63707: LD_VAR 0 5
63711: PUSH
63712: LD_INT 2
63714: ARRAY
63715: PPUSH
63716: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63720: LD_ADDR_EXP 112
63724: PUSH
63725: LD_EXP 112
63729: PPUSH
63730: LD_VAR 0 4
63734: PPUSH
63735: LD_EXP 112
63739: PUSH
63740: LD_VAR 0 4
63744: ARRAY
63745: PPUSH
63746: LD_VAR 0 3
63750: PPUSH
63751: CALL_OW 3
63755: PPUSH
63756: CALL_OW 1
63760: ST_TO_ADDR
// end ; end ;
63761: GO 63590
63763: POP
63764: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63765: LD_VAR 0 1
63769: PPUSH
63770: LD_EXP 112
63774: PUSH
63775: LD_VAR 0 4
63779: ARRAY
63780: PUSH
63781: LD_INT 0
63783: PLUS
63784: PPUSH
63785: CALL_OW 505
// end ;
63789: LD_VAR 0 2
63793: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63794: LD_INT 0
63796: PPUSH
63797: PPUSH
63798: PPUSH
63799: PPUSH
// if not hack in hackTanks then
63800: LD_VAR 0 1
63804: PUSH
63805: LD_EXP 111
63809: IN
63810: NOT
63811: IFFALSE 63815
// exit ;
63813: GO 63900
// index := GetElementIndex ( hackTanks , hack ) ;
63815: LD_ADDR_VAR 0 5
63819: PUSH
63820: LD_EXP 111
63824: PPUSH
63825: LD_VAR 0 1
63829: PPUSH
63830: CALL 9300 0 2
63834: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63835: LD_ADDR_VAR 0 4
63839: PUSH
63840: DOUBLE
63841: LD_INT 1
63843: DEC
63844: ST_TO_ADDR
63845: LD_EXP 112
63849: PUSH
63850: LD_VAR 0 5
63854: ARRAY
63855: PUSH
63856: FOR_TO
63857: IFFALSE 63898
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63859: LD_EXP 112
63863: PUSH
63864: LD_VAR 0 5
63868: ARRAY
63869: PUSH
63870: LD_VAR 0 4
63874: ARRAY
63875: PUSH
63876: LD_INT 1
63878: ARRAY
63879: PUSH
63880: LD_VAR 0 2
63884: EQUAL
63885: IFFALSE 63896
// KillUnit ( vehicle ) ;
63887: LD_VAR 0 2
63891: PPUSH
63892: CALL_OW 66
63896: GO 63856
63898: POP
63899: POP
// end ;
63900: LD_VAR 0 3
63904: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63905: LD_EXP 116
63909: NOT
63910: IFFALSE 63945
63912: GO 63914
63914: DISABLE
// begin initMiner := true ;
63915: LD_ADDR_EXP 116
63919: PUSH
63920: LD_INT 1
63922: ST_TO_ADDR
// minersList := [ ] ;
63923: LD_ADDR_EXP 117
63927: PUSH
63928: EMPTY
63929: ST_TO_ADDR
// minerMinesList := [ ] ;
63930: LD_ADDR_EXP 118
63934: PUSH
63935: EMPTY
63936: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63937: LD_ADDR_EXP 119
63941: PUSH
63942: LD_INT 5
63944: ST_TO_ADDR
// end ;
63945: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63946: LD_EXP 116
63950: PUSH
63951: LD_INT 34
63953: PUSH
63954: LD_EXP 38
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PPUSH
63963: CALL_OW 69
63967: AND
63968: IFFALSE 64431
63970: GO 63972
63972: DISABLE
63973: LD_INT 0
63975: PPUSH
63976: PPUSH
63977: PPUSH
63978: PPUSH
// begin enable ;
63979: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63980: LD_ADDR_VAR 0 1
63984: PUSH
63985: LD_INT 34
63987: PUSH
63988: LD_EXP 38
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PPUSH
63997: CALL_OW 69
64001: PUSH
64002: FOR_IN
64003: IFFALSE 64075
// begin if not i in minersList then
64005: LD_VAR 0 1
64009: PUSH
64010: LD_EXP 117
64014: IN
64015: NOT
64016: IFFALSE 64073
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64018: LD_ADDR_EXP 117
64022: PUSH
64023: LD_EXP 117
64027: PPUSH
64028: LD_EXP 117
64032: PUSH
64033: LD_INT 1
64035: PLUS
64036: PPUSH
64037: LD_VAR 0 1
64041: PPUSH
64042: CALL_OW 1
64046: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64047: LD_ADDR_EXP 118
64051: PUSH
64052: LD_EXP 118
64056: PPUSH
64057: LD_EXP 118
64061: PUSH
64062: LD_INT 1
64064: PLUS
64065: PPUSH
64066: EMPTY
64067: PPUSH
64068: CALL_OW 1
64072: ST_TO_ADDR
// end end ;
64073: GO 64002
64075: POP
64076: POP
// for i := minerMinesList downto 1 do
64077: LD_ADDR_VAR 0 1
64081: PUSH
64082: DOUBLE
64083: LD_EXP 118
64087: INC
64088: ST_TO_ADDR
64089: LD_INT 1
64091: PUSH
64092: FOR_DOWNTO
64093: IFFALSE 64429
// begin if IsLive ( minersList [ i ] ) then
64095: LD_EXP 117
64099: PUSH
64100: LD_VAR 0 1
64104: ARRAY
64105: PPUSH
64106: CALL_OW 300
64110: IFFALSE 64138
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64112: LD_EXP 117
64116: PUSH
64117: LD_VAR 0 1
64121: ARRAY
64122: PPUSH
64123: LD_EXP 118
64127: PUSH
64128: LD_VAR 0 1
64132: ARRAY
64133: PPUSH
64134: CALL_OW 505
// if not minerMinesList [ i ] then
64138: LD_EXP 118
64142: PUSH
64143: LD_VAR 0 1
64147: ARRAY
64148: NOT
64149: IFFALSE 64153
// continue ;
64151: GO 64092
// for j := minerMinesList [ i ] downto 1 do
64153: LD_ADDR_VAR 0 2
64157: PUSH
64158: DOUBLE
64159: LD_EXP 118
64163: PUSH
64164: LD_VAR 0 1
64168: ARRAY
64169: INC
64170: ST_TO_ADDR
64171: LD_INT 1
64173: PUSH
64174: FOR_DOWNTO
64175: IFFALSE 64425
// begin side := GetSide ( minersList [ i ] ) ;
64177: LD_ADDR_VAR 0 3
64181: PUSH
64182: LD_EXP 117
64186: PUSH
64187: LD_VAR 0 1
64191: ARRAY
64192: PPUSH
64193: CALL_OW 255
64197: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64198: LD_ADDR_VAR 0 4
64202: PUSH
64203: LD_EXP 118
64207: PUSH
64208: LD_VAR 0 1
64212: ARRAY
64213: PUSH
64214: LD_VAR 0 2
64218: ARRAY
64219: PUSH
64220: LD_INT 1
64222: ARRAY
64223: PPUSH
64224: LD_EXP 118
64228: PUSH
64229: LD_VAR 0 1
64233: ARRAY
64234: PUSH
64235: LD_VAR 0 2
64239: ARRAY
64240: PUSH
64241: LD_INT 2
64243: ARRAY
64244: PPUSH
64245: CALL_OW 428
64249: ST_TO_ADDR
// if not tmp then
64250: LD_VAR 0 4
64254: NOT
64255: IFFALSE 64259
// continue ;
64257: GO 64174
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64259: LD_VAR 0 4
64263: PUSH
64264: LD_INT 81
64266: PUSH
64267: LD_VAR 0 3
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PPUSH
64276: CALL_OW 69
64280: IN
64281: PUSH
64282: LD_EXP 118
64286: PUSH
64287: LD_VAR 0 1
64291: ARRAY
64292: PUSH
64293: LD_VAR 0 2
64297: ARRAY
64298: PUSH
64299: LD_INT 1
64301: ARRAY
64302: PPUSH
64303: LD_EXP 118
64307: PUSH
64308: LD_VAR 0 1
64312: ARRAY
64313: PUSH
64314: LD_VAR 0 2
64318: ARRAY
64319: PUSH
64320: LD_INT 2
64322: ARRAY
64323: PPUSH
64324: CALL_OW 458
64328: AND
64329: IFFALSE 64423
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64331: LD_EXP 118
64335: PUSH
64336: LD_VAR 0 1
64340: ARRAY
64341: PUSH
64342: LD_VAR 0 2
64346: ARRAY
64347: PUSH
64348: LD_INT 1
64350: ARRAY
64351: PPUSH
64352: LD_EXP 118
64356: PUSH
64357: LD_VAR 0 1
64361: ARRAY
64362: PUSH
64363: LD_VAR 0 2
64367: ARRAY
64368: PUSH
64369: LD_INT 2
64371: ARRAY
64372: PPUSH
64373: LD_VAR 0 3
64377: PPUSH
64378: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64382: LD_ADDR_EXP 118
64386: PUSH
64387: LD_EXP 118
64391: PPUSH
64392: LD_VAR 0 1
64396: PPUSH
64397: LD_EXP 118
64401: PUSH
64402: LD_VAR 0 1
64406: ARRAY
64407: PPUSH
64408: LD_VAR 0 2
64412: PPUSH
64413: CALL_OW 3
64417: PPUSH
64418: CALL_OW 1
64422: ST_TO_ADDR
// end ; end ;
64423: GO 64174
64425: POP
64426: POP
// end ;
64427: GO 64092
64429: POP
64430: POP
// end ;
64431: PPOPN 4
64433: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64434: LD_INT 0
64436: PPUSH
64437: PPUSH
// result := false ;
64438: LD_ADDR_VAR 0 4
64442: PUSH
64443: LD_INT 0
64445: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64446: LD_VAR 0 1
64450: PPUSH
64451: CALL_OW 264
64455: PUSH
64456: LD_EXP 38
64460: EQUAL
64461: NOT
64462: IFFALSE 64466
// exit ;
64464: GO 64706
// index := GetElementIndex ( minersList , unit ) ;
64466: LD_ADDR_VAR 0 5
64470: PUSH
64471: LD_EXP 117
64475: PPUSH
64476: LD_VAR 0 1
64480: PPUSH
64481: CALL 9300 0 2
64485: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64486: LD_EXP 118
64490: PUSH
64491: LD_VAR 0 5
64495: ARRAY
64496: PUSH
64497: LD_EXP 119
64501: GREATEREQUAL
64502: IFFALSE 64506
// exit ;
64504: GO 64706
// ComMoveXY ( unit , x , y ) ;
64506: LD_VAR 0 1
64510: PPUSH
64511: LD_VAR 0 2
64515: PPUSH
64516: LD_VAR 0 3
64520: PPUSH
64521: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64525: LD_INT 35
64527: PPUSH
64528: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64532: LD_VAR 0 1
64536: PPUSH
64537: LD_VAR 0 2
64541: PPUSH
64542: LD_VAR 0 3
64546: PPUSH
64547: CALL 40569 0 3
64551: NOT
64552: PUSH
64553: LD_VAR 0 1
64557: PPUSH
64558: CALL_OW 314
64562: AND
64563: IFFALSE 64567
// exit ;
64565: GO 64706
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64567: LD_VAR 0 2
64571: PPUSH
64572: LD_VAR 0 3
64576: PPUSH
64577: CALL_OW 428
64581: PUSH
64582: LD_VAR 0 1
64586: EQUAL
64587: PUSH
64588: LD_VAR 0 1
64592: PPUSH
64593: CALL_OW 314
64597: NOT
64598: AND
64599: IFFALSE 64525
// PlaySoundXY ( x , y , PlantMine ) ;
64601: LD_VAR 0 2
64605: PPUSH
64606: LD_VAR 0 3
64610: PPUSH
64611: LD_STRING PlantMine
64613: PPUSH
64614: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64618: LD_VAR 0 2
64622: PPUSH
64623: LD_VAR 0 3
64627: PPUSH
64628: LD_VAR 0 1
64632: PPUSH
64633: CALL_OW 255
64637: PPUSH
64638: LD_INT 0
64640: PPUSH
64641: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64645: LD_ADDR_EXP 118
64649: PUSH
64650: LD_EXP 118
64654: PPUSH
64655: LD_VAR 0 5
64659: PUSH
64660: LD_EXP 118
64664: PUSH
64665: LD_VAR 0 5
64669: ARRAY
64670: PUSH
64671: LD_INT 1
64673: PLUS
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PPUSH
64679: LD_VAR 0 2
64683: PUSH
64684: LD_VAR 0 3
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PPUSH
64693: CALL 9515 0 3
64697: ST_TO_ADDR
// result := true ;
64698: LD_ADDR_VAR 0 4
64702: PUSH
64703: LD_INT 1
64705: ST_TO_ADDR
// end ;
64706: LD_VAR 0 4
64710: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64711: LD_INT 0
64713: PPUSH
64714: PPUSH
64715: PPUSH
// if not unit in minersList then
64716: LD_VAR 0 1
64720: PUSH
64721: LD_EXP 117
64725: IN
64726: NOT
64727: IFFALSE 64731
// exit ;
64729: GO 65123
// index := GetElementIndex ( minersList , unit ) ;
64731: LD_ADDR_VAR 0 6
64735: PUSH
64736: LD_EXP 117
64740: PPUSH
64741: LD_VAR 0 1
64745: PPUSH
64746: CALL 9300 0 2
64750: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64751: LD_ADDR_VAR 0 5
64755: PUSH
64756: DOUBLE
64757: LD_EXP 118
64761: PUSH
64762: LD_VAR 0 6
64766: ARRAY
64767: INC
64768: ST_TO_ADDR
64769: LD_INT 1
64771: PUSH
64772: FOR_DOWNTO
64773: IFFALSE 64934
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64775: LD_EXP 118
64779: PUSH
64780: LD_VAR 0 6
64784: ARRAY
64785: PUSH
64786: LD_VAR 0 5
64790: ARRAY
64791: PUSH
64792: LD_INT 1
64794: ARRAY
64795: PUSH
64796: LD_VAR 0 2
64800: EQUAL
64801: PUSH
64802: LD_EXP 118
64806: PUSH
64807: LD_VAR 0 6
64811: ARRAY
64812: PUSH
64813: LD_VAR 0 5
64817: ARRAY
64818: PUSH
64819: LD_INT 2
64821: ARRAY
64822: PUSH
64823: LD_VAR 0 3
64827: EQUAL
64828: AND
64829: IFFALSE 64932
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64831: LD_EXP 118
64835: PUSH
64836: LD_VAR 0 6
64840: ARRAY
64841: PUSH
64842: LD_VAR 0 5
64846: ARRAY
64847: PUSH
64848: LD_INT 1
64850: ARRAY
64851: PPUSH
64852: LD_EXP 118
64856: PUSH
64857: LD_VAR 0 6
64861: ARRAY
64862: PUSH
64863: LD_VAR 0 5
64867: ARRAY
64868: PUSH
64869: LD_INT 2
64871: ARRAY
64872: PPUSH
64873: LD_VAR 0 1
64877: PPUSH
64878: CALL_OW 255
64882: PPUSH
64883: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64887: LD_ADDR_EXP 118
64891: PUSH
64892: LD_EXP 118
64896: PPUSH
64897: LD_VAR 0 6
64901: PPUSH
64902: LD_EXP 118
64906: PUSH
64907: LD_VAR 0 6
64911: ARRAY
64912: PPUSH
64913: LD_VAR 0 5
64917: PPUSH
64918: CALL_OW 3
64922: PPUSH
64923: CALL_OW 1
64927: ST_TO_ADDR
// exit ;
64928: POP
64929: POP
64930: GO 65123
// end ; end ;
64932: GO 64772
64934: POP
64935: POP
// for i := minerMinesList [ index ] downto 1 do
64936: LD_ADDR_VAR 0 5
64940: PUSH
64941: DOUBLE
64942: LD_EXP 118
64946: PUSH
64947: LD_VAR 0 6
64951: ARRAY
64952: INC
64953: ST_TO_ADDR
64954: LD_INT 1
64956: PUSH
64957: FOR_DOWNTO
64958: IFFALSE 65121
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64960: LD_EXP 118
64964: PUSH
64965: LD_VAR 0 6
64969: ARRAY
64970: PUSH
64971: LD_VAR 0 5
64975: ARRAY
64976: PUSH
64977: LD_INT 1
64979: ARRAY
64980: PPUSH
64981: LD_EXP 118
64985: PUSH
64986: LD_VAR 0 6
64990: ARRAY
64991: PUSH
64992: LD_VAR 0 5
64996: ARRAY
64997: PUSH
64998: LD_INT 2
65000: ARRAY
65001: PPUSH
65002: LD_VAR 0 2
65006: PPUSH
65007: LD_VAR 0 3
65011: PPUSH
65012: CALL_OW 298
65016: PUSH
65017: LD_INT 6
65019: LESS
65020: IFFALSE 65119
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65022: LD_EXP 118
65026: PUSH
65027: LD_VAR 0 6
65031: ARRAY
65032: PUSH
65033: LD_VAR 0 5
65037: ARRAY
65038: PUSH
65039: LD_INT 1
65041: ARRAY
65042: PPUSH
65043: LD_EXP 118
65047: PUSH
65048: LD_VAR 0 6
65052: ARRAY
65053: PUSH
65054: LD_VAR 0 5
65058: ARRAY
65059: PUSH
65060: LD_INT 2
65062: ARRAY
65063: PPUSH
65064: LD_VAR 0 1
65068: PPUSH
65069: CALL_OW 255
65073: PPUSH
65074: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65078: LD_ADDR_EXP 118
65082: PUSH
65083: LD_EXP 118
65087: PPUSH
65088: LD_VAR 0 6
65092: PPUSH
65093: LD_EXP 118
65097: PUSH
65098: LD_VAR 0 6
65102: ARRAY
65103: PPUSH
65104: LD_VAR 0 5
65108: PPUSH
65109: CALL_OW 3
65113: PPUSH
65114: CALL_OW 1
65118: ST_TO_ADDR
// end ; end ;
65119: GO 64957
65121: POP
65122: POP
// end ;
65123: LD_VAR 0 4
65127: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65128: LD_INT 0
65130: PPUSH
65131: PPUSH
65132: PPUSH
65133: PPUSH
65134: PPUSH
65135: PPUSH
65136: PPUSH
65137: PPUSH
65138: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65139: LD_VAR 0 1
65143: PPUSH
65144: CALL_OW 264
65148: PUSH
65149: LD_EXP 38
65153: EQUAL
65154: NOT
65155: PUSH
65156: LD_VAR 0 1
65160: PUSH
65161: LD_EXP 117
65165: IN
65166: NOT
65167: OR
65168: IFFALSE 65172
// exit ;
65170: GO 65494
// index := GetElementIndex ( minersList , unit ) ;
65172: LD_ADDR_VAR 0 6
65176: PUSH
65177: LD_EXP 117
65181: PPUSH
65182: LD_VAR 0 1
65186: PPUSH
65187: CALL 9300 0 2
65191: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65192: LD_ADDR_VAR 0 8
65196: PUSH
65197: LD_EXP 119
65201: PUSH
65202: LD_EXP 118
65206: PUSH
65207: LD_VAR 0 6
65211: ARRAY
65212: MINUS
65213: ST_TO_ADDR
// if not minesFreeAmount then
65214: LD_VAR 0 8
65218: NOT
65219: IFFALSE 65223
// exit ;
65221: GO 65494
// tmp := [ ] ;
65223: LD_ADDR_VAR 0 7
65227: PUSH
65228: EMPTY
65229: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65230: LD_ADDR_VAR 0 5
65234: PUSH
65235: DOUBLE
65236: LD_INT 1
65238: DEC
65239: ST_TO_ADDR
65240: LD_VAR 0 8
65244: PUSH
65245: FOR_TO
65246: IFFALSE 65441
// begin _d := rand ( 0 , 5 ) ;
65248: LD_ADDR_VAR 0 11
65252: PUSH
65253: LD_INT 0
65255: PPUSH
65256: LD_INT 5
65258: PPUSH
65259: CALL_OW 12
65263: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65264: LD_ADDR_VAR 0 12
65268: PUSH
65269: LD_INT 2
65271: PPUSH
65272: LD_INT 6
65274: PPUSH
65275: CALL_OW 12
65279: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65280: LD_ADDR_VAR 0 9
65284: PUSH
65285: LD_VAR 0 2
65289: PPUSH
65290: LD_VAR 0 11
65294: PPUSH
65295: LD_VAR 0 12
65299: PPUSH
65300: CALL_OW 272
65304: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65305: LD_ADDR_VAR 0 10
65309: PUSH
65310: LD_VAR 0 3
65314: PPUSH
65315: LD_VAR 0 11
65319: PPUSH
65320: LD_VAR 0 12
65324: PPUSH
65325: CALL_OW 273
65329: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65330: LD_VAR 0 9
65334: PPUSH
65335: LD_VAR 0 10
65339: PPUSH
65340: CALL_OW 488
65344: PUSH
65345: LD_VAR 0 9
65349: PUSH
65350: LD_VAR 0 10
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_VAR 0 7
65363: IN
65364: NOT
65365: AND
65366: PUSH
65367: LD_VAR 0 9
65371: PPUSH
65372: LD_VAR 0 10
65376: PPUSH
65377: CALL_OW 458
65381: NOT
65382: AND
65383: IFFALSE 65425
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65385: LD_ADDR_VAR 0 7
65389: PUSH
65390: LD_VAR 0 7
65394: PPUSH
65395: LD_VAR 0 7
65399: PUSH
65400: LD_INT 1
65402: PLUS
65403: PPUSH
65404: LD_VAR 0 9
65408: PUSH
65409: LD_VAR 0 10
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PPUSH
65418: CALL_OW 1
65422: ST_TO_ADDR
65423: GO 65439
// i := i - 1 ;
65425: LD_ADDR_VAR 0 5
65429: PUSH
65430: LD_VAR 0 5
65434: PUSH
65435: LD_INT 1
65437: MINUS
65438: ST_TO_ADDR
// end ;
65439: GO 65245
65441: POP
65442: POP
// for i in tmp do
65443: LD_ADDR_VAR 0 5
65447: PUSH
65448: LD_VAR 0 7
65452: PUSH
65453: FOR_IN
65454: IFFALSE 65492
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65456: LD_VAR 0 1
65460: PPUSH
65461: LD_VAR 0 5
65465: PUSH
65466: LD_INT 1
65468: ARRAY
65469: PPUSH
65470: LD_VAR 0 5
65474: PUSH
65475: LD_INT 2
65477: ARRAY
65478: PPUSH
65479: CALL 64434 0 3
65483: NOT
65484: IFFALSE 65490
// exit ;
65486: POP
65487: POP
65488: GO 65494
65490: GO 65453
65492: POP
65493: POP
// end ;
65494: LD_VAR 0 4
65498: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
65499: LD_INT 0
65501: PPUSH
65502: PPUSH
65503: PPUSH
65504: PPUSH
65505: PPUSH
65506: PPUSH
65507: PPUSH
// if not GetClass ( unit ) = class_sniper then
65508: LD_VAR 0 1
65512: PPUSH
65513: CALL_OW 257
65517: PUSH
65518: LD_INT 5
65520: EQUAL
65521: NOT
65522: IFFALSE 65526
// exit ;
65524: GO 65914
// dist := 8 ;
65526: LD_ADDR_VAR 0 5
65530: PUSH
65531: LD_INT 8
65533: ST_TO_ADDR
// viewRange := 12 ;
65534: LD_ADDR_VAR 0 7
65538: PUSH
65539: LD_INT 12
65541: ST_TO_ADDR
// side := GetSide ( unit ) ;
65542: LD_ADDR_VAR 0 6
65546: PUSH
65547: LD_VAR 0 1
65551: PPUSH
65552: CALL_OW 255
65556: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65557: LD_INT 61
65559: PPUSH
65560: LD_VAR 0 6
65564: PPUSH
65565: CALL_OW 321
65569: PUSH
65570: LD_INT 2
65572: EQUAL
65573: IFFALSE 65583
// viewRange := 16 ;
65575: LD_ADDR_VAR 0 7
65579: PUSH
65580: LD_INT 16
65582: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65583: LD_VAR 0 1
65587: PPUSH
65588: LD_VAR 0 2
65592: PPUSH
65593: LD_VAR 0 3
65597: PPUSH
65598: CALL_OW 297
65602: PUSH
65603: LD_VAR 0 5
65607: GREATER
65608: IFFALSE 65687
// begin ComMoveXY ( unit , x , y ) ;
65610: LD_VAR 0 1
65614: PPUSH
65615: LD_VAR 0 2
65619: PPUSH
65620: LD_VAR 0 3
65624: PPUSH
65625: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65629: LD_INT 35
65631: PPUSH
65632: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65636: LD_VAR 0 1
65640: PPUSH
65641: LD_VAR 0 2
65645: PPUSH
65646: LD_VAR 0 3
65650: PPUSH
65651: CALL 40569 0 3
65655: NOT
65656: IFFALSE 65660
// exit ;
65658: GO 65914
// until GetDistUnitXY ( unit , x , y ) < dist ;
65660: LD_VAR 0 1
65664: PPUSH
65665: LD_VAR 0 2
65669: PPUSH
65670: LD_VAR 0 3
65674: PPUSH
65675: CALL_OW 297
65679: PUSH
65680: LD_VAR 0 5
65684: LESS
65685: IFFALSE 65629
// end ; ComTurnXY ( unit , x , y ) ;
65687: LD_VAR 0 1
65691: PPUSH
65692: LD_VAR 0 2
65696: PPUSH
65697: LD_VAR 0 3
65701: PPUSH
65702: CALL_OW 118
// wait ( 5 ) ;
65706: LD_INT 5
65708: PPUSH
65709: CALL_OW 67
// _d := GetDir ( unit ) ;
65713: LD_ADDR_VAR 0 10
65717: PUSH
65718: LD_VAR 0 1
65722: PPUSH
65723: CALL_OW 254
65727: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65728: LD_ADDR_VAR 0 8
65732: PUSH
65733: LD_VAR 0 1
65737: PPUSH
65738: CALL_OW 250
65742: PPUSH
65743: LD_VAR 0 10
65747: PPUSH
65748: LD_VAR 0 5
65752: PPUSH
65753: CALL_OW 272
65757: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
65758: LD_ADDR_VAR 0 9
65762: PUSH
65763: LD_VAR 0 1
65767: PPUSH
65768: CALL_OW 251
65772: PPUSH
65773: LD_VAR 0 10
65777: PPUSH
65778: LD_VAR 0 5
65782: PPUSH
65783: CALL_OW 273
65787: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65788: LD_VAR 0 8
65792: PPUSH
65793: LD_VAR 0 9
65797: PPUSH
65798: CALL_OW 488
65802: NOT
65803: IFFALSE 65807
// exit ;
65805: GO 65914
// ComAnimCustom ( unit , 1 ) ;
65807: LD_VAR 0 1
65811: PPUSH
65812: LD_INT 1
65814: PPUSH
65815: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65819: LD_VAR 0 8
65823: PPUSH
65824: LD_VAR 0 9
65828: PPUSH
65829: LD_VAR 0 6
65833: PPUSH
65834: LD_VAR 0 7
65838: PPUSH
65839: CALL_OW 330
// repeat wait ( 1 ) ;
65843: LD_INT 1
65845: PPUSH
65846: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
65850: LD_VAR 0 1
65854: PPUSH
65855: CALL_OW 316
65859: PUSH
65860: LD_VAR 0 1
65864: PPUSH
65865: CALL_OW 314
65869: OR
65870: PUSH
65871: LD_VAR 0 1
65875: PPUSH
65876: CALL_OW 302
65880: NOT
65881: OR
65882: PUSH
65883: LD_VAR 0 1
65887: PPUSH
65888: CALL_OW 301
65892: OR
65893: IFFALSE 65843
// RemoveSeeing ( _x , _y , side ) ;
65895: LD_VAR 0 8
65899: PPUSH
65900: LD_VAR 0 9
65904: PPUSH
65905: LD_VAR 0 6
65909: PPUSH
65910: CALL_OW 331
// end ;
65914: LD_VAR 0 4
65918: RET
