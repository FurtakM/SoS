// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// InitEvents ;
   8: CALL 203 0 0
// PrepareRussian ;
  12: CALL 890 0 0
// PrepareArabian ;
  16: CALL 227 0 0
// Action ;
  20: CALL 1548 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// end ;
  37: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// hasNormalScene := false ;
  49: LD_ADDR_EXP 5
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// prefix := 07_ ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_STRING 07_
  64: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_STRING 01_JohnnySaved
  72: PPUSH
  73: LD_INT 0
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// hasVodka := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  89: LD_ADDR_EXP 7
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// hasStimDrugs := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// hasExplosions := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanContact := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// hasSniperRifle := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasScout := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// hasMethanol := false ;
 137: LD_ADDR_EXP 12
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// heikeSquad := [ ] ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: EMPTY
 151: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 152: LD_ADDR_EXP 14
 156: PUSH
 157: LD_INT 10
 159: PPUSH
 160: LD_INT 21
 162: PUSH
 163: LD_INT 3
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: PPUSH
 170: CALL_OW 70
 174: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 175: LD_ADDR_EXP 15
 179: PUSH
 180: EMPTY
 181: ST_TO_ADDR
// isAlarm := false ;
 182: LD_ADDR_EXP 16
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 190: LD_ADDR_EXP 17
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// export eventCenterCamOnHeike , eventShowPlace ; function InitEvents ; begin
 203: LD_INT 0
 205: PPUSH
// eventCenterCamOnHeike := 1 ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// eventShowPlace := 1 ;
 214: LD_ADDR_EXP 19
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// end ; end_of_file
 222: LD_VAR 0 1
 226: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug ; export function PrepareArabian ; var i ; begin
 227: LD_INT 0
 229: PPUSH
 230: PPUSH
// uc_side := 8 ;
 231: LD_ADDR_OWVAR 20
 235: PUSH
 236: LD_INT 8
 238: ST_TO_ADDR
// uc_nation := 2 ;
 239: LD_ADDR_OWVAR 21
 243: PUSH
 244: LD_INT 2
 246: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
 247: LD_INT 0
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 0
 255: PPUSH
 256: CALL_OW 380
// CreateHuman ;
 260: CALL_OW 44
// uc_side := 4 ;
 264: LD_ADDR_OWVAR 20
 268: PUSH
 269: LD_INT 4
 271: ST_TO_ADDR
// uc_nation := 1 ;
 272: LD_ADDR_OWVAR 21
 276: PUSH
 277: LD_INT 1
 279: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 280: LD_ADDR_EXP 32
 284: PUSH
 285: LD_STRING 07_Americans
 287: PPUSH
 288: CALL_OW 31
 292: ST_TO_ADDR
// if americanSquad < 5 then
 293: LD_EXP 32
 297: PUSH
 298: LD_INT 5
 300: LESS
 301: IFFALSE 358
// begin for i := americanSquad to 5 do
 303: LD_ADDR_VAR 0 2
 307: PUSH
 308: DOUBLE
 309: LD_EXP 32
 313: DEC
 314: ST_TO_ADDR
 315: LD_INT 5
 317: PUSH
 318: FOR_TO
 319: IFFALSE 356
// begin PrepareHuman ( false , 2 , 6 ) ;
 321: LD_INT 0
 323: PPUSH
 324: LD_INT 2
 326: PPUSH
 327: LD_INT 6
 329: PPUSH
 330: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 334: LD_ADDR_EXP 32
 338: PUSH
 339: LD_EXP 32
 343: PPUSH
 344: CALL_OW 44
 348: PPUSH
 349: CALL 44195 0 2
 353: ST_TO_ADDR
// end ;
 354: GO 318
 356: POP
 357: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 358: LD_ADDR_EXP 34
 362: PUSH
 363: LD_STRING UsCommander
 365: PPUSH
 366: LD_EXP 1
 370: NOT
 371: PPUSH
 372: LD_STRING 07_
 374: PPUSH
 375: CALL 6811 0 3
 379: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Doug ) ;
 380: LD_ADDR_EXP 32
 384: PUSH
 385: LD_EXP 32
 389: PPUSH
 390: LD_EXP 34
 394: PPUSH
 395: CALL 44195 0 2
 399: ST_TO_ADDR
// if johnnySaved or debug then
 400: LD_EXP 3
 404: PUSH
 405: LD_EXP 1
 409: OR
 410: IFFALSE 445
// begin Harris := NewCharacter ( Harris ) ;
 412: LD_ADDR_EXP 33
 416: PUSH
 417: LD_STRING Harris
 419: PPUSH
 420: CALL_OW 25
 424: ST_TO_ADDR
// americanSquad := Join ( americanSquad , Harris ) ;
 425: LD_ADDR_EXP 32
 429: PUSH
 430: LD_EXP 32
 434: PPUSH
 435: LD_EXP 33
 439: PPUSH
 440: CALL 44195 0 2
 444: ST_TO_ADDR
// end ; uc_side := 2 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 2
 452: ST_TO_ADDR
// uc_nation := 2 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 2
 460: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 461: LD_ADDR_EXP 20
 465: PUSH
 466: LD_STRING Heike
 468: PPUSH
 469: LD_EXP 1
 473: NOT
 474: PPUSH
 475: LD_EXP 2
 479: PPUSH
 480: CALL 6811 0 3
 484: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 485: LD_ADDR_EXP 23
 489: PUSH
 490: LD_STRING Ibrahim
 492: PPUSH
 493: LD_EXP 1
 497: NOT
 498: PPUSH
 499: LD_EXP 2
 503: PPUSH
 504: CALL 6811 0 3
 508: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 509: LD_ADDR_EXP 21
 513: PUSH
 514: LD_STRING Givi
 516: PPUSH
 517: LD_EXP 1
 521: NOT
 522: PPUSH
 523: LD_EXP 2
 527: PPUSH
 528: CALL 6811 0 3
 532: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 533: LD_ADDR_EXP 24
 537: PUSH
 538: LD_STRING Kamil
 540: PPUSH
 541: LD_EXP 1
 545: NOT
 546: PPUSH
 547: LD_EXP 2
 551: PPUSH
 552: CALL 6811 0 3
 556: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 557: LD_ADDR_EXP 25
 561: PUSH
 562: LD_STRING Kaia
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_EXP 2
 575: PPUSH
 576: CALL 6811 0 3
 580: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 581: LD_ADDR_EXP 26
 585: PUSH
 586: LD_STRING Sophia
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_EXP 2
 599: PPUSH
 600: CALL 6811 0 3
 604: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 605: LD_ADDR_EXP 27
 609: PUSH
 610: LD_STRING Markov
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_EXP 2
 623: PPUSH
 624: CALL 6811 0 3
 628: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 629: LD_ADDR_EXP 30
 633: PUSH
 634: LD_STRING Aviradze
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 2
 647: PPUSH
 648: CALL 6811 0 3
 652: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 653: LD_ADDR_EXP 29
 657: PUSH
 658: LD_STRING Kurt
 660: PPUSH
 661: LD_EXP 1
 665: NOT
 666: PPUSH
 667: LD_EXP 2
 671: PPUSH
 672: CALL 6811 0 3
 676: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 677: LD_ADDR_EXP 22
 681: PUSH
 682: LD_STRING Mike
 684: PPUSH
 685: LD_EXP 1
 689: NOT
 690: PPUSH
 691: LD_EXP 2
 695: PPUSH
 696: CALL 6811 0 3
 700: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 701: LD_ADDR_EXP 28
 705: PUSH
 706: LD_STRING Olaf
 708: PPUSH
 709: LD_INT 0
 711: PPUSH
 712: LD_STRING 
 714: PPUSH
 715: CALL 6811 0 3
 719: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 720: LD_ADDR_EXP 31
 724: PUSH
 725: LD_STRING 07_others
 727: PPUSH
 728: CALL_OW 31
 732: ST_TO_ADDR
// end ;
 733: LD_VAR 0 1
 737: RET
// export function PrepareGame ; begin
 738: LD_INT 0
 740: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 741: LD_EXP 20
 745: PPUSH
 746: LD_INT 23
 748: PPUSH
 749: CALL_OW 52
// if Givi then
 753: LD_EXP 21
 757: IFFALSE 795
// begin SetSide ( Givi , 5 ) ;
 759: LD_EXP 21
 763: PPUSH
 764: LD_INT 5
 766: PPUSH
 767: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 771: LD_EXP 21
 775: PPUSH
 776: LD_INT 9
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// ComHold ( Givi ) ;
 786: LD_EXP 21
 790: PPUSH
 791: CALL_OW 140
// end ; if Markov then
 795: LD_EXP 27
 799: IFFALSE 825
// begin SetSide ( Markov , 5 ) ;
 801: LD_EXP 27
 805: PPUSH
 806: LD_INT 5
 808: PPUSH
 809: CALL_OW 235
// PlaceHumanInUnit ( Markov , ruFac ) ;
 813: LD_EXP 27
 817: PPUSH
 818: LD_INT 61
 820: PPUSH
 821: CALL_OW 52
// end ; if Kamil then
 825: LD_EXP 24
 829: IFFALSE 855
// begin SetSide ( Kamil , 5 ) ;
 831: LD_EXP 24
 835: PPUSH
 836: LD_INT 5
 838: PPUSH
 839: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
 843: LD_EXP 24
 847: PPUSH
 848: LD_INT 109
 850: PPUSH
 851: CALL_OW 52
// end ; if Kurt then
 855: LD_EXP 29
 859: IFFALSE 885
// begin SetSide ( Kurt , 5 ) ;
 861: LD_EXP 29
 865: PPUSH
 866: LD_INT 5
 868: PPUSH
 869: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
 873: LD_EXP 29
 877: PPUSH
 878: LD_INT 6
 880: PPUSH
 881: CALL_OW 52
// end ; end ; end_of_file
 885: LD_VAR 0 1
 889: RET
// export russianKillers ; export function PrepareRussian ; var i , tmp ; begin
 890: LD_INT 0
 892: PPUSH
 893: PPUSH
 894: PPUSH
// uc_side := 3 ;
 895: LD_ADDR_OWVAR 20
 899: PUSH
 900: LD_INT 3
 902: ST_TO_ADDR
// uc_nation := 3 ;
 903: LD_ADDR_OWVAR 21
 907: PUSH
 908: LD_INT 3
 910: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 911: LD_ADDR_VAR 0 2
 915: PUSH
 916: LD_INT 21
 918: PUSH
 919: LD_INT 3
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PPUSH
 926: CALL_OW 69
 930: PUSH
 931: FOR_IN
 932: IFFALSE 948
// SetBLevel ( i , 7 ) ;
 934: LD_VAR 0 2
 938: PPUSH
 939: LD_INT 7
 941: PPUSH
 942: CALL_OW 241
 946: GO 931
 948: POP
 949: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 950: LD_ADDR_VAR 0 2
 954: PUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 3
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 30
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: LD_INT 30
 980: PUSH
 981: LD_INT 1
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: PPUSH
 997: CALL_OW 69
1001: PUSH
1002: FOR_IN
1003: IFFALSE 1047
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
1005: LD_VAR 0 2
1009: PPUSH
1010: CALL_OW 274
1014: PPUSH
1015: LD_INT 1
1017: PPUSH
1018: LD_INT 1000
1020: PPUSH
1021: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
1025: LD_VAR 0 2
1029: PPUSH
1030: CALL_OW 274
1034: PPUSH
1035: LD_INT 2
1037: PPUSH
1038: LD_INT 1000
1040: PPUSH
1041: CALL_OW 277
// end ;
1045: GO 1002
1047: POP
1048: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1049: LD_ADDR_VAR 0 2
1053: PUSH
1054: LD_INT 22
1056: PUSH
1057: LD_INT 3
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 30
1066: PUSH
1067: LD_INT 32
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 69
1082: PUSH
1083: FOR_IN
1084: IFFALSE 1118
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
1086: LD_INT 0
1088: PPUSH
1089: LD_INT 5
1091: PUSH
1092: LD_OWVAR 67
1096: PLUS
1097: PPUSH
1098: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
1102: CALL_OW 44
1106: PPUSH
1107: LD_VAR 0 2
1111: PPUSH
1112: CALL_OW 52
// end ;
1116: GO 1083
1118: POP
1119: POP
// end ;
1120: LD_VAR 0 1
1124: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
1125: LD_INT 0
1127: PPUSH
1128: PPUSH
1129: PPUSH
1130: PPUSH
// uc_side := 3 ;
1131: LD_ADDR_OWVAR 20
1135: PUSH
1136: LD_INT 3
1138: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
1139: LD_ADDR_OWVAR 21
1143: PUSH
1144: LD_INT 1
1146: PPUSH
1147: LD_INT 3
1149: PPUSH
1150: CALL_OW 12
1154: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
1155: LD_ADDR_VAR 0 4
1159: PUSH
1160: LD_INT 5
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 517
1170: ST_TO_ADDR
// for i := 1 to 3 do
1171: LD_ADDR_VAR 0 2
1175: PUSH
1176: DOUBLE
1177: LD_INT 1
1179: DEC
1180: ST_TO_ADDR
1181: LD_INT 3
1183: PUSH
1184: FOR_TO
1185: IFFALSE 1254
// begin PrepareHuman ( false , 33 , 0 ) ;
1187: LD_INT 0
1189: PPUSH
1190: LD_INT 33
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 380
// un := CreateHuman ;
1200: LD_ADDR_VAR 0 3
1204: PUSH
1205: CALL_OW 44
1209: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
1210: LD_VAR 0 3
1214: PPUSH
1215: LD_VAR 0 4
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PUSH
1224: LD_VAR 0 2
1228: ARRAY
1229: PPUSH
1230: LD_VAR 0 4
1234: PUSH
1235: LD_INT 2
1237: ARRAY
1238: PUSH
1239: LD_VAR 0 2
1243: ARRAY
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: CALL_OW 601
// end ;
1252: GO 1184
1254: POP
1255: POP
// end ;
1256: LD_VAR 0 1
1260: RET
// export function PrepareFirstScene ; var i , un ; begin
1261: LD_INT 0
1263: PPUSH
1264: PPUSH
1265: PPUSH
// uc_side := 4 ;
1266: LD_ADDR_OWVAR 20
1270: PUSH
1271: LD_INT 4
1273: ST_TO_ADDR
// uc_nation := 1 ;
1274: LD_ADDR_OWVAR 21
1278: PUSH
1279: LD_INT 1
1281: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
1282: LD_INT 0
1284: PPUSH
1285: LD_INT 33
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 380
// for i := 1 to 2 do
1295: LD_ADDR_VAR 0 2
1299: PUSH
1300: DOUBLE
1301: LD_INT 1
1303: DEC
1304: ST_TO_ADDR
1305: LD_INT 2
1307: PUSH
1308: FOR_TO
1309: IFFALSE 1374
// begin un := CreateHuman ;
1311: LD_ADDR_VAR 0 3
1315: PUSH
1316: CALL_OW 44
1320: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1321: LD_VAR 0 3
1325: PPUSH
1326: LD_INT 1
1328: PPUSH
1329: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
1333: LD_VAR 0 3
1337: PPUSH
1338: LD_INT 6
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
1348: LD_VAR 0 3
1352: PPUSH
1353: LD_INT 1
1355: PPUSH
1356: CALL 47351 0 2
// SetLives ( un , 300 ) ;
1360: LD_VAR 0 3
1364: PPUSH
1365: LD_INT 300
1367: PPUSH
1368: CALL_OW 234
// end ;
1372: GO 1308
1374: POP
1375: POP
// uc_side := 3 ;
1376: LD_ADDR_OWVAR 20
1380: PUSH
1381: LD_INT 3
1383: ST_TO_ADDR
// uc_nation := 3 ;
1384: LD_ADDR_OWVAR 21
1388: PUSH
1389: LD_INT 3
1391: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
1392: LD_INT 1
1394: PPUSH
1395: LD_INT 5
1397: PPUSH
1398: CALL_OW 381
// for i := 1 to 3 do
1402: LD_ADDR_VAR 0 2
1406: PUSH
1407: DOUBLE
1408: LD_INT 1
1410: DEC
1411: ST_TO_ADDR
1412: LD_INT 3
1414: PUSH
1415: FOR_TO
1416: IFFALSE 1489
// begin un := CreateHuman ;
1418: LD_ADDR_VAR 0 3
1422: PUSH
1423: CALL_OW 44
1427: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
1428: LD_ADDR_EXP 35
1432: PUSH
1433: LD_EXP 35
1437: PPUSH
1438: LD_VAR 0 3
1442: PPUSH
1443: CALL 44195 0 2
1447: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1448: LD_VAR 0 3
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
1460: LD_VAR 0 3
1464: PPUSH
1465: LD_INT 7
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
1475: LD_VAR 0 3
1479: PPUSH
1480: LD_INT 4
1482: PPUSH
1483: CALL 47351 0 2
// end ;
1487: GO 1415
1489: POP
1490: POP
// un := CreateHuman ;
1491: LD_ADDR_VAR 0 3
1495: PUSH
1496: CALL_OW 44
1500: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 37 , false ) ;
1501: LD_VAR 0 3
1505: PPUSH
1506: LD_INT 124
1508: PPUSH
1509: LD_INT 37
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// SetDir ( un , 3 ) ;
1519: LD_VAR 0 3
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: CALL_OW 233
// ComLookAtDir ( un , 3 ) ;
1531: LD_VAR 0 3
1535: PPUSH
1536: LD_INT 3
1538: PPUSH
1539: CALL 47351 0 2
// end ; end_of_file
1543: LD_VAR 0 1
1547: RET
// export function Action ; var speaker , i , tmp ; begin
1548: LD_INT 0
1550: PPUSH
1551: PPUSH
1552: PPUSH
1553: PPUSH
// Video ( true ) ;
1554: LD_INT 1
1556: PPUSH
1557: CALL 44167 0 1
// hasNormalScene := Kaia or Givi ;
1561: LD_ADDR_EXP 5
1565: PUSH
1566: LD_EXP 25
1570: PUSH
1571: LD_EXP 21
1575: OR
1576: ST_TO_ADDR
// if hasNormalScene then
1577: LD_EXP 5
1581: IFFALSE 1816
// begin for i in americanSquad do
1583: LD_ADDR_VAR 0 3
1587: PUSH
1588: LD_EXP 32
1592: PUSH
1593: FOR_IN
1594: IFFALSE 1640
// begin SetClass ( i , 33 ) ;
1596: LD_VAR 0 3
1600: PPUSH
1601: LD_INT 33
1603: PPUSH
1604: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
1608: LD_VAR 0 3
1612: PPUSH
1613: LD_INT 78
1615: PPUSH
1616: LD_INT 16
1618: PPUSH
1619: LD_INT 5
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 50
// ComHold ( i ) ;
1629: LD_VAR 0 3
1633: PPUSH
1634: CALL_OW 140
// end ;
1638: GO 1593
1640: POP
1641: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
1642: LD_ADDR_VAR 0 4
1646: PUSH
1647: LD_EXP 22
1651: PUSH
1652: LD_EXP 23
1656: PUSH
1657: LD_EXP 24
1661: PUSH
1662: LD_EXP 25
1666: PUSH
1667: LD_EXP 26
1671: PUSH
1672: LD_EXP 27
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_EXP 29
1686: PUSH
1687: LD_EXP 21
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: PUSH
1703: LD_EXP 31
1707: UNION
1708: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
1709: LD_EXP 20
1713: PPUSH
1714: LD_INT 33
1716: PPUSH
1717: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
1721: LD_EXP 20
1725: PPUSH
1726: LD_INT 117
1728: PPUSH
1729: LD_INT 24
1731: PPUSH
1732: LD_INT 3
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL 46337 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
1742: LD_EXP 20
1746: PPUSH
1747: LD_INT 123
1749: PPUSH
1750: LD_INT 39
1752: PPUSH
1753: CALL_OW 118
// for i in tmp do
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: LD_VAR 0 4
1766: PUSH
1767: FOR_IN
1768: IFFALSE 1814
// begin SetClass ( i , 33 ) ;
1770: LD_VAR 0 3
1774: PPUSH
1775: LD_INT 33
1777: PPUSH
1778: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
1782: LD_VAR 0 3
1786: PPUSH
1787: LD_INT 3
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
1797: LD_VAR 0 3
1801: PPUSH
1802: LD_INT 113
1804: PPUSH
1805: LD_INT 16
1807: PPUSH
1808: CALL_OW 118
// end ;
1812: GO 1767
1814: POP
1815: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
1816: LD_INT 124
1818: PPUSH
1819: LD_INT 39
1821: PPUSH
1822: CALL_OW 86
// PrepareDeadBodies ;
1826: CALL 1125 0 0
// PrepareFirstScene ;
1830: CALL 1261 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
1834: LD_INT 152
1836: PPUSH
1837: LD_INT 65
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 70
1845: NEG
1846: PPUSH
1847: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
1851: LD_INT 152
1853: PPUSH
1854: LD_INT 65
1856: PPUSH
1857: LD_INT 2
1859: PPUSH
1860: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
1864: LD_INT 122
1866: PPUSH
1867: LD_INT 40
1869: PPUSH
1870: LD_INT 2
1872: PPUSH
1873: LD_INT 8
1875: NEG
1876: PPUSH
1877: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
1881: LD_INT 124
1883: PPUSH
1884: LD_INT 37
1886: PPUSH
1887: CALL_OW 86
// speaker := HexInfo ( 124 , 37 ) ;
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: LD_INT 124
1898: PPUSH
1899: LD_INT 37
1901: PPUSH
1902: CALL_OW 428
1906: ST_TO_ADDR
// Say ( speaker , DRum-Execution-1 ) ;
1907: LD_VAR 0 2
1911: PPUSH
1912: LD_STRING DRum-Execution-1
1914: PPUSH
1915: CALL_OW 88
// Say ( speaker , DRum-Execution-2 ) ;
1919: LD_VAR 0 2
1923: PPUSH
1924: LD_STRING DRum-Execution-2
1926: PPUSH
1927: CALL_OW 88
// wait ( 0 0$01 ) ;
1931: LD_INT 35
1933: PPUSH
1934: CALL_OW 67
// Say ( speaker , DRum-Execution-3 ) ;
1938: LD_VAR 0 2
1942: PPUSH
1943: LD_STRING DRum-Execution-3
1945: PPUSH
1946: CALL_OW 88
// wait ( 0 0$1 ) ;
1950: LD_INT 35
1952: PPUSH
1953: CALL_OW 67
// Say ( speaker , DRum-Execution-4 ) ;
1957: LD_VAR 0 2
1961: PPUSH
1962: LD_STRING DRum-Execution-4
1964: PPUSH
1965: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
1969: LD_EXP 35
1973: PUSH
1974: LD_INT 1
1976: ARRAY
1977: PPUSH
1978: LD_INT 122
1980: PPUSH
1981: LD_INT 39
1983: PPUSH
1984: CALL_OW 428
1988: PPUSH
1989: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
1993: LD_EXP 35
1997: PUSH
1998: LD_INT 2
2000: ARRAY
2001: PPUSH
2002: LD_INT 123
2004: PPUSH
2005: LD_INT 41
2007: PPUSH
2008: CALL_OW 428
2012: PPUSH
2013: CALL_OW 115
// AddComHold ( russianKillers ) ;
2017: LD_EXP 35
2021: PPUSH
2022: CALL_OW 200
// wait ( 0 0$1 ) ;
2026: LD_INT 35
2028: PPUSH
2029: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
2033: LD_INT 122
2035: PPUSH
2036: LD_INT 40
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 331
// if hasNormalScene then
2046: LD_EXP 5
2050: IFFALSE 2058
// ActionNormal else
2052: CALL 2067 0 0
2056: GO 2062
// ActionAdditional ;
2058: CALL 3760 0 0
// end ;
2062: LD_VAR 0 1
2066: RET
// function ActionNormal ; var i , tmp ; begin
2067: LD_INT 0
2069: PPUSH
2070: PPUSH
2071: PPUSH
// CenterNowOnUnits ( Heike ) ;
2072: LD_EXP 20
2076: PPUSH
2077: CALL_OW 87
// wait ( 0 0$1 ) ;
2081: LD_INT 35
2083: PPUSH
2084: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
2088: LD_EXP 20
2092: PPUSH
2093: LD_INT 115
2095: PPUSH
2096: LD_INT 19
2098: PPUSH
2099: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
2103: LD_EXP 20
2107: PPUSH
2108: LD_INT 113
2110: PPUSH
2111: LD_INT 16
2113: PPUSH
2114: CALL_OW 178
// wait ( 0 0$2 ) ;
2118: LD_INT 70
2120: PPUSH
2121: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
2125: LD_EXP 20
2129: PPUSH
2130: LD_STRING DH-Conspiracy-1
2132: PPUSH
2133: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
2137: LD_EXP 25
2141: PPUSH
2142: LD_STRING DK-Conspiracy-2
2144: PPUSH
2145: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
2149: LD_EXP 21
2153: PPUSH
2154: LD_STRING DG-Conspiracy-3
2156: PPUSH
2157: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
2161: LD_EXP 21
2165: PPUSH
2166: LD_STRING DG-Conspiracy-4
2168: PPUSH
2169: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
2173: LD_EXP 20
2177: PPUSH
2178: LD_STRING DH-Conspiracy-5
2180: PPUSH
2181: CALL_OW 88
// if IsOk ( Kamil ) then
2185: LD_EXP 24
2189: PPUSH
2190: CALL_OW 302
2194: IFFALSE 2252
// begin hasVodka := true ;
2196: LD_ADDR_EXP 4
2200: PUSH
2201: LD_INT 1
2203: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
2204: LD_EXP 24
2208: PPUSH
2209: LD_STRING DKam-Conspiracy-6
2211: PPUSH
2212: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
2216: LD_EXP 24
2220: PPUSH
2221: LD_STRING DKam-Conspiracy-7
2223: PPUSH
2224: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
2228: LD_EXP 24
2232: PPUSH
2233: LD_STRING DKam-Conspiracy-8
2235: PPUSH
2236: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
2240: LD_EXP 24
2244: PPUSH
2245: LD_STRING DKam-Conspiracy-9
2247: PPUSH
2248: CALL_OW 88
// end ; if IsOk ( Sophia ) then
2252: LD_EXP 26
2256: PPUSH
2257: CALL_OW 302
2261: IFFALSE 2435
// begin americanContact := true ;
2263: LD_ADDR_EXP 9
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// Say ( Sophia , DS-Conspiracy-10 ) ;
2271: LD_EXP 26
2275: PPUSH
2276: LD_STRING DS-Conspiracy-10
2278: PPUSH
2279: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
2283: LD_EXP 27
2287: PPUSH
2288: LD_STRING DM-Conspiracy-11
2290: PPUSH
2291: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
2295: LD_EXP 26
2299: PPUSH
2300: LD_STRING DS-Conspiracy-12
2302: PPUSH
2303: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
2307: LD_INT 84
2309: PPUSH
2310: LD_INT 19
2312: PPUSH
2313: LD_INT 105
2315: PPUSH
2316: CALL 6170 0 3
// if johnnySaved then
2320: LD_EXP 3
2324: IFFALSE 2364
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
2326: LD_EXP 26
2330: PPUSH
2331: LD_STRING DS-Conspiracy-13
2333: PPUSH
2334: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
2338: LD_EXP 20
2342: PPUSH
2343: LD_STRING DH-Conspiracy-14
2345: PPUSH
2346: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
2350: LD_EXP 26
2354: PPUSH
2355: LD_STRING DH-Conspiracy-15
2357: PPUSH
2358: CALL_OW 88
// end else
2362: GO 2400
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
2364: LD_EXP 26
2368: PPUSH
2369: LD_STRING DS-Conspiracy-a-13
2371: PPUSH
2372: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
2376: LD_EXP 20
2380: PPUSH
2381: LD_STRING DH-Conspiracy-a-14
2383: PPUSH
2384: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
2388: LD_EXP 26
2392: PPUSH
2393: LD_STRING DH-Conspiracy-a-15
2395: PPUSH
2396: CALL_OW 88
// end ; if IsOk ( Givi ) then
2400: LD_EXP 21
2404: PPUSH
2405: CALL_OW 302
2409: IFFALSE 2435
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
2411: LD_EXP 21
2415: PPUSH
2416: LD_STRING DG-Conspiracy-a-16
2418: PPUSH
2419: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
2423: LD_EXP 20
2427: PPUSH
2428: LD_STRING DH-Conspiracy-a-17
2430: PPUSH
2431: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
2435: LD_EXP 20
2439: PPUSH
2440: LD_STRING DH-Conspiracy-16
2442: PPUSH
2443: CALL_OW 88
// if IsOk ( Givi ) then
2447: LD_EXP 21
2451: PPUSH
2452: CALL_OW 302
2456: IFFALSE 2714
// begin hasStimDrugs := true ;
2458: LD_ADDR_EXP 8
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// Say ( Givi , DG-Conspiracy-17 ) ;
2466: LD_EXP 21
2470: PPUSH
2471: LD_STRING DG-Conspiracy-17
2473: PPUSH
2474: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
2478: LD_INT 87
2480: PPUSH
2481: LD_INT 2
2483: PPUSH
2484: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
2488: LD_INT 184
2490: PPUSH
2491: LD_INT 95
2493: PPUSH
2494: LD_INT 105
2496: PPUSH
2497: CALL 6170 0 3
// SetSide ( drugsLab , 3 ) ;
2501: LD_INT 87
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
2511: LD_EXP 21
2515: PPUSH
2516: LD_STRING DG-Conspiracy-18
2518: PPUSH
2519: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
2523: LD_EXP 21
2527: PPUSH
2528: LD_STRING DG-Conspiracy-19
2530: PPUSH
2531: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
2535: LD_EXP 21
2539: PPUSH
2540: LD_STRING DG-Conspiracy-20
2542: PPUSH
2543: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
2547: LD_EXP 20
2551: PPUSH
2552: LD_STRING DH-Conspiracy-21
2554: PPUSH
2555: CALL_OW 88
// if IsOk ( Kaia ) then
2559: LD_EXP 25
2563: PPUSH
2564: CALL_OW 302
2568: IFFALSE 2635
// begin hasExplosions := true ;
2570: LD_ADDR_EXP 6
2574: PUSH
2575: LD_INT 1
2577: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-22 ) ;
2578: LD_EXP 25
2582: PPUSH
2583: LD_STRING DK-Conspiracy-22
2585: PPUSH
2586: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
2590: LD_INT 73
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 235
// ShowPlace ( 166 , 104 , 0 0$3 ) ;
2600: LD_INT 166
2602: PPUSH
2603: LD_INT 104
2605: PPUSH
2606: LD_INT 105
2608: PPUSH
2609: CALL 6170 0 3
// SetSide ( barExplosion , 3 ) ;
2613: LD_INT 73
2615: PPUSH
2616: LD_INT 3
2618: PPUSH
2619: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
2623: LD_EXP 25
2627: PPUSH
2628: LD_STRING DK-Conspiracy-23
2630: PPUSH
2631: CALL_OW 88
// end ; if IsOk ( Olaf ) then
2635: LD_EXP 28
2639: PPUSH
2640: CALL_OW 302
2644: IFFALSE 2714
// begin hasExplosionsInFactory := true ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_INT 1
2653: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
2654: LD_EXP 28
2658: PPUSH
2659: LD_STRING DO-Conspiracy-24
2661: PPUSH
2662: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
2666: LD_INT 175
2668: PPUSH
2669: LD_INT 54
2671: PPUSH
2672: LD_INT 70
2674: PPUSH
2675: CALL 6170 0 3
// if IsOk ( Markov ) then
2679: LD_EXP 27
2683: PPUSH
2684: CALL_OW 302
2688: IFFALSE 2714
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
2690: LD_EXP 27
2694: PPUSH
2695: LD_STRING DMar-Conspiracy-25
2697: PPUSH
2698: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
2702: LD_EXP 27
2706: PPUSH
2707: LD_STRING DMar-Conspiracy-26
2709: PPUSH
2710: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
2714: LD_EXP 29
2718: PPUSH
2719: CALL_OW 302
2723: PUSH
2724: LD_EXP 25
2728: PPUSH
2729: CALL_OW 302
2733: AND
2734: IFFALSE 3150
// begin hasSniperRifle := true ;
2736: LD_ADDR_EXP 10
2740: PUSH
2741: LD_INT 1
2743: ST_TO_ADDR
// Say ( Kurt , DKs-Conspiracy-27 ) ;
2744: LD_EXP 29
2748: PPUSH
2749: LD_STRING DKs-Conspiracy-27
2751: PPUSH
2752: CALL_OW 88
// if IsOk ( Givi ) then
2756: LD_EXP 21
2760: PPUSH
2761: CALL_OW 302
2765: IFFALSE 2781
// Say ( Givi , DG-Conspiracy-28 ) else
2767: LD_EXP 21
2771: PPUSH
2772: LD_STRING DG-Conspiracy-28
2774: PPUSH
2775: CALL_OW 88
2779: GO 2846
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
2781: LD_EXP 31
2785: PPUSH
2786: LD_INT 26
2788: PUSH
2789: LD_INT 1
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 72
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: LD_STRING DArm-Conspiracy-a-28
2807: PPUSH
2808: CALL_OW 88
2812: NOT
2813: IFFALSE 2846
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
2815: LD_EXP 31
2819: PPUSH
2820: LD_INT 26
2822: PUSH
2823: LD_INT 2
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 72
2834: PUSH
2835: LD_INT 1
2837: ARRAY
2838: PPUSH
2839: LD_STRING DArf-Conspiracy-a-28
2841: PPUSH
2842: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
2846: LD_EXP 29
2850: PPUSH
2851: LD_STRING DKs-Conspiracy-29
2853: PPUSH
2854: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-30 ) ;
2858: LD_EXP 29
2862: PPUSH
2863: LD_STRING DKs-Conspiracy-30
2865: PPUSH
2866: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
2870: LD_EXP 25
2874: PPUSH
2875: LD_STRING DK-Conspiracy-31
2877: PPUSH
2878: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
2882: LD_EXP 27
2886: PPUSH
2887: LD_STRING DMar-Conspiracy-33
2889: PPUSH
2890: CALL_OW 88
2894: NOT
2895: PUSH
2896: LD_EXP 31
2900: AND
2901: IFFALSE 2968
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
2903: LD_EXP 31
2907: PPUSH
2908: LD_INT 26
2910: PUSH
2911: LD_INT 1
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PPUSH
2918: CALL_OW 72
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PPUSH
2927: LD_STRING DArm-Conspiracy-a-34
2929: PPUSH
2930: CALL_OW 88
2934: NOT
2935: IFFALSE 2968
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
2937: LD_EXP 31
2941: PPUSH
2942: LD_INT 26
2944: PUSH
2945: LD_INT 2
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 72
2956: PUSH
2957: LD_INT 1
2959: ARRAY
2960: PPUSH
2961: LD_STRING DArf-Conspiracy-a-34
2963: PPUSH
2964: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
2968: LD_EXP 25
2972: PPUSH
2973: LD_STRING DK-Conspiracy-34
2975: PPUSH
2976: CALL_OW 88
// if IsOk ( Markov ) then
2980: LD_EXP 27
2984: PPUSH
2985: CALL_OW 302
2989: IFFALSE 3066
// begin Say ( Markov , DMar-Conspiracy-35 ) ;
2991: LD_EXP 27
2995: PPUSH
2996: LD_STRING DMar-Conspiracy-35
2998: PPUSH
2999: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
3003: LD_EXP 25
3007: PPUSH
3008: LD_STRING DK-Conspiracy-36
3010: PPUSH
3011: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
3015: LD_EXP 27
3019: PPUSH
3020: LD_STRING DMar-Conspiracy-37
3022: PPUSH
3023: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
3027: LD_EXP 27
3031: PPUSH
3032: LD_STRING DMar-Conspiracy-38
3034: PPUSH
3035: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
3039: LD_INT 137
3041: PPUSH
3042: LD_INT 98
3044: PPUSH
3045: LD_INT 105
3047: PPUSH
3048: CALL 6170 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
3052: LD_EXP 27
3056: PPUSH
3057: LD_STRING DMar-Conspiracy-39
3059: PPUSH
3060: CALL_OW 88
// end else
3064: GO 3150
// if heikeSecondSquad then
3066: LD_EXP 31
3070: IFFALSE 3150
// begin ShowPlace ( 137 , 98 , 0 0$3 ) ;
3072: LD_INT 137
3074: PPUSH
3075: LD_INT 98
3077: PPUSH
3078: LD_INT 105
3080: PPUSH
3081: CALL 6170 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
3085: LD_EXP 31
3089: PPUSH
3090: LD_INT 26
3092: PUSH
3093: LD_INT 1
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PPUSH
3100: CALL_OW 72
3104: PUSH
3105: LD_INT 1
3107: ARRAY
3108: PPUSH
3109: LD_STRING DArm-Conspiracy-a-35
3111: PPUSH
3112: CALL_OW 88
3116: NOT
3117: IFFALSE 3150
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
3119: LD_EXP 31
3123: PPUSH
3124: LD_INT 26
3126: PUSH
3127: LD_INT 2
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL_OW 72
3138: PUSH
3139: LD_INT 1
3141: ARRAY
3142: PPUSH
3143: LD_STRING DArf-Conspiracy-a-35
3145: PPUSH
3146: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
3150: LD_EXP 20
3154: PPUSH
3155: LD_STRING DH-Conspiracy-40
3157: PPUSH
3158: CALL_OW 88
// if IsOk ( Mike ) then
3162: LD_EXP 22
3166: PPUSH
3167: CALL_OW 302
3171: IFFALSE 3230
// begin hasScout := true ;
3173: LD_ADDR_EXP 11
3177: PUSH
3178: LD_INT 1
3180: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
3181: LD_EXP 22
3185: PPUSH
3186: LD_STRING DM-Conspiracy-41
3188: PPUSH
3189: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
3193: LD_EXP 22
3197: PPUSH
3198: LD_STRING DM-Conspiracy-42
3200: PPUSH
3201: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
3205: LD_INT 73
3207: PPUSH
3208: LD_INT 102
3210: PPUSH
3211: LD_INT 105
3213: PPUSH
3214: CALL 6170 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
3218: LD_EXP 22
3222: PPUSH
3223: LD_STRING DM-Conspiracy-43
3225: PPUSH
3226: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
3230: LD_EXP 4
3234: PUSH
3235: LD_EXP 25
3239: PPUSH
3240: CALL_OW 302
3244: AND
3245: PUSH
3246: LD_EXP 29
3250: PPUSH
3251: CALL_OW 302
3255: AND
3256: IFFALSE 3302
// begin hasMethanol := true ;
3258: LD_ADDR_EXP 12
3262: PUSH
3263: LD_INT 1
3265: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
3266: LD_EXP 25
3270: PPUSH
3271: LD_STRING DK-Conspiracy-44
3273: PPUSH
3274: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
3278: LD_EXP 25
3282: PPUSH
3283: LD_STRING DK-Conspiracy-45
3285: PPUSH
3286: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
3290: LD_EXP 24
3294: PPUSH
3295: LD_STRING DKam-Conspiracy-46
3297: PPUSH
3298: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
3302: LD_EXP 20
3306: PPUSH
3307: LD_STRING DH-Conspiracy-47
3309: PPUSH
3310: CALL_OW 88
// wait ( 0 0$1 ) ;
3314: LD_INT 35
3316: PPUSH
3317: CALL_OW 67
// your_side := 8 ;
3321: LD_ADDR_OWVAR 2
3325: PUSH
3326: LD_INT 8
3328: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
3329: LD_INT 1
3331: PPUSH
3332: LD_INT 1
3334: PPUSH
3335: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: LD_INT 22
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 21
3356: PUSH
3357: LD_INT 1
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: FOR_IN
3374: IFFALSE 3387
// RemoveUnit ( i ) ;
3376: LD_VAR 0 2
3380: PPUSH
3381: CALL_OW 64
3385: GO 3373
3387: POP
3388: POP
// wait ( 0 0$0.3 ) ;
3389: LD_INT 10
3391: PPUSH
3392: CALL_OW 67
// Query ( StartInfo1 ) ;
3396: LD_STRING StartInfo1
3398: PPUSH
3399: CALL_OW 97
// wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
3410: LD_STRING colors_night.txt
3412: PPUSH
3413: CALL_OW 544
// Query ( StartInfo2 ) ;
3417: LD_STRING StartInfo2
3419: PPUSH
3420: CALL_OW 97
// PrepareGame ;
3424: CALL 738 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3428: LD_INT 152
3430: PPUSH
3431: LD_INT 65
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: LD_INT 70
3439: NEG
3440: PPUSH
3441: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3445: LD_INT 152
3447: PPUSH
3448: LD_INT 65
3450: PPUSH
3451: LD_INT 2
3453: PPUSH
3454: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
3458: LD_INT 133
3460: PPUSH
3461: LD_INT 76
3463: PPUSH
3464: LD_INT 2
3466: PPUSH
3467: LD_INT 6
3469: NEG
3470: PPUSH
3471: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
3475: LD_INT 152
3477: PPUSH
3478: LD_INT 65
3480: PPUSH
3481: LD_INT 8
3483: PPUSH
3484: LD_INT 70
3486: NEG
3487: PPUSH
3488: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
3492: LD_INT 152
3494: PPUSH
3495: LD_INT 65
3497: PPUSH
3498: LD_INT 8
3500: PPUSH
3501: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
3505: LD_INT 133
3507: PPUSH
3508: LD_INT 76
3510: PPUSH
3511: LD_INT 8
3513: PPUSH
3514: LD_INT 6
3516: NEG
3517: PPUSH
3518: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
3522: LD_INT 23
3524: PPUSH
3525: CALL_OW 87
// dialogue_skipped := false ;
3529: LD_ADDR_OWVAR 59
3533: PUSH
3534: LD_INT 0
3536: ST_TO_ADDR
// Say ( Heike , DH-Escape-1 ) ;
3537: LD_EXP 20
3541: PPUSH
3542: LD_STRING DH-Escape-1
3544: PPUSH
3545: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
3549: LD_EXP 20
3553: PPUSH
3554: LD_STRING DH-Escape-2
3556: PPUSH
3557: CALL_OW 88
// StartLockerMinigame ;
3561: CALL 6474 0 0
// Say ( Heike , DH-Escape-4 ) ;
3565: LD_EXP 20
3569: PPUSH
3570: LD_STRING DH-Escape-4
3572: PPUSH
3573: CALL_OW 88
// wait ( 0 0$3 ) ;
3577: LD_INT 105
3579: PPUSH
3580: CALL_OW 67
// your_side := 2 ;
3584: LD_ADDR_OWVAR 2
3588: PUSH
3589: LD_INT 2
3591: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
3592: LD_EXP 20
3596: PPUSH
3597: CALL_OW 122
// AddComMoveXY ( Heike , 128 , 64 ) ;
3601: LD_EXP 20
3605: PPUSH
3606: LD_INT 128
3608: PPUSH
3609: LD_INT 64
3611: PPUSH
3612: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
3616: LD_INT 35
3618: PPUSH
3619: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
3623: LD_EXP 20
3627: PPUSH
3628: LD_INT 128
3630: PPUSH
3631: LD_INT 64
3633: PPUSH
3634: CALL_OW 307
3638: IFFALSE 3616
// ComHold ( Heike ) ;
3640: LD_EXP 20
3644: PPUSH
3645: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
3649: LD_EXP 20
3653: PPUSH
3654: LD_STRING DH-Start-1
3656: PPUSH
3657: CALL_OW 88
// if not americanContact then
3661: LD_EXP 9
3665: NOT
3666: IFFALSE 3682
// Say ( Heike , DH-Start-c-2 ) else
3668: LD_EXP 20
3672: PPUSH
3673: LD_STRING DH-Start-c-2
3675: PPUSH
3676: CALL_OW 88
3680: GO 3714
// if johnnySaved then
3682: LD_EXP 3
3686: IFFALSE 3702
// Say ( Heike , DH-Start-a-2 ) else
3688: LD_EXP 20
3692: PPUSH
3693: LD_STRING DH-Start-a-2
3695: PPUSH
3696: CALL_OW 88
3700: GO 3714
// Say ( Heike , DH-Start-b-2 ) ;
3702: LD_EXP 20
3706: PPUSH
3707: LD_STRING DH-Start-b-2
3709: PPUSH
3710: CALL_OW 88
// Video ( false ) ;
3714: LD_INT 0
3716: PPUSH
3717: CALL 44167 0 1
// tick := 0 ;
3721: LD_ADDR_OWVAR 1
3725: PUSH
3726: LD_INT 0
3728: ST_TO_ADDR
// if americanContact then
3729: LD_EXP 9
3733: IFFALSE 3744
// ChangeMissionObjectives ( M1a ) else
3735: LD_STRING M1a
3737: PPUSH
3738: CALL_OW 337
3742: GO 3751
// ChangeMissionObjectives ( M1 ) ;
3744: LD_STRING M1
3746: PPUSH
3747: CALL_OW 337
// SaveForQuickRestart ;
3751: CALL_OW 22
// end ;
3755: LD_VAR 0 1
3759: RET
// function ActionAdditional ; var i , un , tmp ; begin
3760: LD_INT 0
3762: PPUSH
3763: PPUSH
3764: PPUSH
3765: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
3766: LD_INT 115
3768: PPUSH
3769: LD_INT 27
3771: PPUSH
3772: LD_INT 2
3774: PPUSH
3775: LD_INT 6
3777: NEG
3778: PPUSH
3779: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
3783: LD_EXP 20
3787: PPUSH
3788: LD_INT 115
3790: PPUSH
3791: LD_INT 27
3793: PPUSH
3794: CALL_OW 428
3798: PPUSH
3799: CALL_OW 52
// SetClass ( Heike , 33 ) ;
3803: LD_EXP 20
3807: PPUSH
3808: LD_INT 33
3810: PPUSH
3811: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
3815: LD_INT 124
3817: PPUSH
3818: LD_INT 39
3820: PPUSH
3821: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
3825: LD_EXP 20
3829: PPUSH
3830: LD_STRING DH-Fail-1
3832: PPUSH
3833: CALL_OW 88
// RaiseSailEvent ( eventCenterCamOnHeike ) ;
3837: LD_EXP 18
3841: PPUSH
3842: CALL_OW 427
// ComExit ( Heike ) ;
3846: LD_EXP 20
3850: PPUSH
3851: CALL 44593 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
3855: LD_EXP 20
3859: PPUSH
3860: LD_INT 109
3862: PPUSH
3863: LD_INT 33
3865: PPUSH
3866: CALL_OW 171
// AddComHold ( Heike ) ;
3870: LD_EXP 20
3874: PPUSH
3875: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
3879: LD_INT 115
3881: PPUSH
3882: LD_INT 27
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 331
// wait ( 0 0$2 ) ;
3892: LD_INT 70
3894: PPUSH
3895: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3899: LD_INT 35
3901: PPUSH
3902: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
3906: LD_EXP 20
3910: PPUSH
3911: LD_INT 109
3913: PPUSH
3914: LD_INT 33
3916: PPUSH
3917: CALL_OW 307
3921: IFFALSE 3899
// Say ( Heike , DH-Fail-2 ) ;
3923: LD_EXP 20
3927: PPUSH
3928: LD_STRING DH-Fail-2
3930: PPUSH
3931: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
3935: LD_EXP 20
3939: PPUSH
3940: LD_INT 111
3942: PPUSH
3943: LD_INT 48
3945: PPUSH
3946: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3950: LD_INT 35
3952: PPUSH
3953: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
3957: LD_EXP 20
3961: PPUSH
3962: LD_INT 111
3964: PPUSH
3965: LD_INT 48
3967: PPUSH
3968: CALL_OW 297
3972: PUSH
3973: LD_INT 4
3975: LESS
3976: IFFALSE 3950
// AddComMoveXY ( Heike , 106 , 72 ) ;
3978: LD_EXP 20
3982: PPUSH
3983: LD_INT 106
3985: PPUSH
3986: LD_INT 72
3988: PPUSH
3989: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
3993: LD_EXP 20
3997: PPUSH
3998: LD_INT 103
4000: PPUSH
4001: LD_INT 80
4003: PPUSH
4004: CALL_OW 171
// uc_side := 3 ;
4008: LD_ADDR_OWVAR 20
4012: PUSH
4013: LD_INT 3
4015: ST_TO_ADDR
// uc_nation := 3 ;
4016: LD_ADDR_OWVAR 21
4020: PUSH
4021: LD_INT 3
4023: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
4024: LD_INT 1
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
4037: LD_ADDR_OWVAR 29
4041: PUSH
4042: LD_INT 12
4044: PUSH
4045: LD_INT 12
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: ST_TO_ADDR
// un := CreateHuman ;
4052: LD_ADDR_VAR 0 3
4056: PUSH
4057: CALL_OW 44
4061: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
4062: LD_VAR 0 3
4066: PPUSH
4067: LD_INT 134
4069: PPUSH
4070: LD_INT 52
4072: PPUSH
4073: LD_INT 4
4075: PPUSH
4076: LD_INT 0
4078: PPUSH
4079: CALL 46337 0 5
// ComTurnUnit ( un , Heike ) ;
4083: LD_VAR 0 3
4087: PPUSH
4088: LD_EXP 20
4092: PPUSH
4093: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
4097: LD_VAR 0 3
4101: PPUSH
4102: LD_EXP 20
4106: PPUSH
4107: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
4111: LD_VAR 0 3
4115: PPUSH
4116: LD_STRING DRum-Fail-3
4118: PPUSH
4119: CALL_OW 88
// for i := 1 to 3 do
4123: LD_ADDR_VAR 0 2
4127: PUSH
4128: DOUBLE
4129: LD_INT 1
4131: DEC
4132: ST_TO_ADDR
4133: LD_INT 3
4135: PUSH
4136: FOR_TO
4137: IFFALSE 4210
// begin PrepareSoldier ( false , 10 ) ;
4139: LD_INT 0
4141: PPUSH
4142: LD_INT 10
4144: PPUSH
4145: CALL_OW 381
// un := CreateHuman ;
4149: LD_ADDR_VAR 0 3
4153: PUSH
4154: CALL_OW 44
4158: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4159: LD_ADDR_VAR 0 4
4163: PUSH
4164: LD_VAR 0 4
4168: PPUSH
4169: LD_VAR 0 3
4173: PPUSH
4174: CALL 44195 0 2
4178: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
4179: LD_VAR 0 3
4183: PPUSH
4184: LD_INT 8
4186: PPUSH
4187: LD_INT 0
4189: PPUSH
4190: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
4194: LD_VAR 0 3
4198: PPUSH
4199: LD_EXP 20
4203: PPUSH
4204: CALL_OW 119
// end ;
4208: GO 4136
4210: POP
4211: POP
// repeat wait ( 0 0$1 ) ;
4212: LD_INT 35
4214: PPUSH
4215: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
4219: LD_VAR 0 4
4223: PPUSH
4224: LD_INT 101
4226: PUSH
4227: LD_INT 2
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PPUSH
4234: CALL_OW 72
4238: PUSH
4239: LD_INT 1
4241: GREATER
4242: IFFALSE 4212
// wait ( 0 0$1 ) ;
4244: LD_INT 35
4246: PPUSH
4247: CALL_OW 67
// DialogueOn ;
4251: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
4255: LD_EXP 20
4259: PPUSH
4260: LD_STRING DH-Fail-4
4262: PPUSH
4263: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
4267: LD_EXP 20
4271: PPUSH
4272: LD_STRING DH-Fail-5
4274: PPUSH
4275: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
4279: LD_EXP 20
4283: PPUSH
4284: LD_STRING DH-Fail-6
4286: PPUSH
4287: CALL_OW 88
// DialogueOff ;
4291: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
4295: LD_VAR 0 4
4299: PPUSH
4300: LD_EXP 20
4304: PPUSH
4305: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
4309: LD_INT 35
4311: PPUSH
4312: CALL_OW 67
// until IsDying ( Heike ) ;
4316: LD_EXP 20
4320: PPUSH
4321: CALL_OW 303
4325: IFFALSE 4309
// KillUnit ( Heike ) ;
4327: LD_EXP 20
4331: PPUSH
4332: CALL_OW 66
// wait ( 0 0$4 ) ;
4336: LD_INT 140
4338: PPUSH
4339: CALL_OW 67
// ResetFog ;
4343: CALL_OW 335
// DialogueOn ;
4347: CALL_OW 6
// dwait ( 0 0$1 ) ;
4351: LD_INT 35
4353: PPUSH
4354: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
4358: LD_ADDR_EXP 20
4362: PUSH
4363: LD_STRING Heike
4365: PPUSH
4366: LD_EXP 1
4370: NOT
4371: PPUSH
4372: LD_EXP 2
4376: PPUSH
4377: CALL 6811 0 3
4381: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
4382: LD_EXP 20
4386: PPUSH
4387: LD_STRING DH-Fail-7
4389: PPUSH
4390: CALL_OW 89
// DialogueOff ;
4394: CALL_OW 7
// YouLost ( Fail ) ;
4398: LD_STRING Fail
4400: PPUSH
4401: CALL_OW 104
// end ;
4405: LD_VAR 0 1
4409: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 do
4410: LD_INT 2
4412: PPUSH
4413: LD_INT 173
4415: PPUSH
4416: LD_INT 29
4418: PPUSH
4419: CALL_OW 293
4423: PUSH
4424: LD_EXP 20
4428: PPUSH
4429: LD_INT 173
4431: PPUSH
4432: LD_INT 29
4434: PPUSH
4435: CALL_OW 297
4439: PUSH
4440: LD_INT 6
4442: LESS
4443: AND
4444: IFFALSE 4461
4446: GO 4448
4448: DISABLE
// Say ( Heike , DH-EastRoad ) ;
4449: LD_EXP 20
4453: PPUSH
4454: LD_STRING DH-EastRoad
4456: PPUSH
4457: CALL_OW 88
4461: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 do
4462: LD_INT 2
4464: PPUSH
4465: LD_INT 217
4467: PPUSH
4468: LD_INT 120
4470: PPUSH
4471: CALL_OW 293
4475: PUSH
4476: LD_EXP 20
4480: PPUSH
4481: LD_INT 217
4483: PPUSH
4484: LD_INT 120
4486: PPUSH
4487: CALL_OW 297
4491: PUSH
4492: LD_INT 6
4494: LESS
4495: AND
4496: IFFALSE 4513
4498: GO 4500
4500: DISABLE
// Say ( Heike , DH-EastEnd ) ;
4501: LD_EXP 20
4505: PPUSH
4506: LD_STRING DH-EastEnd
4508: PPUSH
4509: CALL_OW 88
4513: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) do
4514: LD_EXP 20
4518: PPUSH
4519: LD_INT 11
4521: PPUSH
4522: CALL_OW 308
4526: IFFALSE 4564
4528: GO 4530
4530: DISABLE
// begin if not heikeSquad then
4531: LD_EXP 13
4535: NOT
4536: IFFALSE 4552
// Say ( Heike , DH-Hill ) else
4538: LD_EXP 20
4542: PPUSH
4543: LD_STRING DH-Hill
4545: PPUSH
4546: CALL_OW 88
4550: GO 4564
// Say ( Heike , DH-Hill-a ) ;
4552: LD_EXP 20
4556: PPUSH
4557: LD_STRING DH-Hill-a
4559: PPUSH
4560: CALL_OW 88
// end ;
4564: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) do var x , y , v ;
4565: LD_EXP 20
4569: PPUSH
4570: LD_INT 12
4572: PPUSH
4573: CALL_OW 308
4577: IFFALSE 4759
4579: GO 4581
4581: DISABLE
4582: LD_INT 0
4584: PPUSH
4585: PPUSH
4586: PPUSH
// begin DialogueOn ;
4587: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
4591: LD_EXP 20
4595: PPUSH
4596: CALL_OW 87
// x := GetX ( Heike ) ;
4600: LD_ADDR_VAR 0 1
4604: PUSH
4605: LD_EXP 20
4609: PPUSH
4610: CALL_OW 250
4614: ST_TO_ADDR
// y := GetY ( Heike ) ;
4615: LD_ADDR_VAR 0 2
4619: PUSH
4620: LD_EXP 20
4624: PPUSH
4625: CALL_OW 251
4629: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
4630: LD_VAR 0 1
4634: PPUSH
4635: LD_VAR 0 2
4639: PPUSH
4640: LD_INT 2
4642: PPUSH
4643: LD_INT 12
4645: NEG
4646: PPUSH
4647: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
4651: LD_VAR 0 1
4655: PPUSH
4656: LD_VAR 0 2
4660: PPUSH
4661: LD_INT 2
4663: PPUSH
4664: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
4668: LD_INT 2
4670: PUSH
4671: LD_INT 30
4673: PUSH
4674: LD_INT 32
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 30
4683: PUSH
4684: LD_INT 33
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: IFFALSE 4712
// v := 3 else
4702: LD_ADDR_VAR 0 3
4706: PUSH
4707: LD_INT 3
4709: ST_TO_ADDR
4710: GO 4720
// v := 2 ;
4712: LD_ADDR_VAR 0 3
4716: PUSH
4717: LD_INT 2
4719: ST_TO_ADDR
// disable ;
4720: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
4721: LD_EXP 20
4725: PPUSH
4726: LD_STRING DH-Outpost-
4728: PUSH
4729: LD_INT 1
4731: PPUSH
4732: LD_VAR 0 3
4736: PPUSH
4737: CALL_OW 12
4741: STR
4742: PPUSH
4743: CALL_OW 88
// DialogueOff ;
4747: CALL_OW 7
// wait ( 0 0$10 ) ;
4751: LD_INT 350
4753: PPUSH
4754: CALL_OW 67
// enable ;
4758: ENABLE
// end ;
4759: PPOPN 3
4761: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 or AreInTheSameBuilding ( Givi , Heike ) do
4762: LD_INT 2
4764: PPUSH
4765: LD_EXP 21
4769: PPUSH
4770: CALL_OW 292
4774: PUSH
4775: LD_EXP 20
4779: PPUSH
4780: LD_EXP 21
4784: PPUSH
4785: CALL_OW 296
4789: PUSH
4790: LD_INT 6
4792: LESS
4793: AND
4794: PUSH
4795: LD_EXP 21
4799: PPUSH
4800: LD_EXP 20
4804: PPUSH
4805: CALL 6108 0 2
4809: OR
4810: IFFALSE 4888
4812: GO 4814
4814: DISABLE
// begin DialogueOn ;
4815: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
4819: LD_EXP 21
4823: PPUSH
4824: CALL_OW 87
// Say ( Heike , DH-Givi-1 ) ;
4828: LD_EXP 20
4832: PPUSH
4833: LD_STRING DH-Givi-1
4835: PPUSH
4836: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
4840: LD_EXP 21
4844: PPUSH
4845: LD_STRING DG-Givi-2
4847: PPUSH
4848: CALL_OW 88
// DialogueOff ;
4852: CALL_OW 7
// SetSide ( Givi , 2 ) ;
4856: LD_EXP 21
4860: PPUSH
4861: LD_INT 2
4863: PPUSH
4864: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
4868: LD_ADDR_EXP 13
4872: PUSH
4873: LD_EXP 13
4877: PPUSH
4878: LD_EXP 21
4882: PPUSH
4883: CALL 44195 0 2
4887: ST_TO_ADDR
// end ;
4888: END
// function SayHEmpty ( ) ; begin
4889: LD_INT 0
4891: PPUSH
// case rand ( 1 , 3 ) of 1 :
4892: LD_INT 1
4894: PPUSH
4895: LD_INT 3
4897: PPUSH
4898: CALL_OW 12
4902: PUSH
4903: LD_INT 1
4905: DOUBLE
4906: EQUAL
4907: IFTRUE 4911
4909: GO 4926
4911: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
4912: LD_EXP 20
4916: PPUSH
4917: LD_STRING DH-Empty-1
4919: PPUSH
4920: CALL_OW 88
4924: GO 4973
4926: LD_INT 2
4928: DOUBLE
4929: EQUAL
4930: IFTRUE 4934
4932: GO 4949
4934: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
4935: LD_EXP 20
4939: PPUSH
4940: LD_STRING DH-Empty-2
4942: PPUSH
4943: CALL_OW 88
4947: GO 4973
4949: LD_INT 3
4951: DOUBLE
4952: EQUAL
4953: IFTRUE 4957
4955: GO 4972
4957: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
4958: LD_EXP 20
4962: PPUSH
4963: LD_STRING DH-Empty-3
4965: PPUSH
4966: CALL_OW 88
4970: GO 4973
4972: POP
// end ;
4973: LD_VAR 0 1
4977: RET
// function SayHVisited ( ) ; begin
4978: LD_INT 0
4980: PPUSH
// case rand ( 1 , 3 ) of 1 :
4981: LD_INT 1
4983: PPUSH
4984: LD_INT 3
4986: PPUSH
4987: CALL_OW 12
4991: PUSH
4992: LD_INT 1
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5015
5000: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
5001: LD_EXP 20
5005: PPUSH
5006: LD_STRING DH-Visited-1
5008: PPUSH
5009: CALL_OW 88
5013: GO 5062
5015: LD_INT 2
5017: DOUBLE
5018: EQUAL
5019: IFTRUE 5023
5021: GO 5038
5023: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
5024: LD_EXP 20
5028: PPUSH
5029: LD_STRING DH-Visited-2
5031: PPUSH
5032: CALL_OW 88
5036: GO 5062
5038: LD_INT 3
5040: DOUBLE
5041: EQUAL
5042: IFTRUE 5046
5044: GO 5061
5046: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
5047: LD_EXP 20
5051: PPUSH
5052: LD_STRING DH-Visited-3
5054: PPUSH
5055: CALL_OW 88
5059: GO 5062
5061: POP
// end ;
5062: LD_VAR 0 1
5066: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and IsOk ( Heike ) do var i ;
5067: LD_EXP 16
5071: NOT
5072: PUSH
5073: LD_EXP 14
5077: AND
5078: PUSH
5079: LD_EXP 20
5083: PPUSH
5084: CALL_OW 302
5088: AND
5089: IFFALSE 5142
5091: GO 5093
5093: DISABLE
5094: LD_INT 0
5096: PPUSH
// begin enable ;
5097: ENABLE
// for i in entranceAllowedList do
5098: LD_ADDR_VAR 0 1
5102: PUSH
5103: LD_EXP 14
5107: PUSH
5108: FOR_IN
5109: IFFALSE 5140
// if InEntrance ( Heike , i ) then
5111: LD_EXP 20
5115: PPUSH
5116: LD_VAR 0 1
5120: PPUSH
5121: CALL 6211 0 2
5125: IFFALSE 5138
// begin HeikeEnterBuilding ( i ) ;
5127: LD_VAR 0 1
5131: PPUSH
5132: CALL 5145 0 1
// break ;
5136: GO 5140
// end ;
5138: GO 5108
5140: POP
5141: POP
// end ;
5142: PPOPN 1
5144: END
// function HeikeEnterBuilding ( building ) ; begin
5145: LD_INT 0
5147: PPUSH
// if not building then
5148: LD_VAR 0 1
5152: NOT
5153: IFFALSE 5157
// exit ;
5155: GO 5945
// if building in entranceVisitedList then
5157: LD_VAR 0 1
5161: PUSH
5162: LD_EXP 15
5166: IN
5167: IFFALSE 5175
// begin SayHVisited ( ) ;
5169: CALL 4978 0 0
// exit ;
5173: GO 5945
// end ; case Query ( EnterBuilding ) of 1 :
5175: LD_STRING EnterBuilding
5177: PPUSH
5178: CALL_OW 97
5182: PUSH
5183: LD_INT 1
5185: DOUBLE
5186: EQUAL
5187: IFTRUE 5191
5189: GO 5194
5191: POP
// ; 2 :
5192: GO 5208
5194: LD_INT 2
5196: DOUBLE
5197: EQUAL
5198: IFTRUE 5202
5200: GO 5207
5202: POP
// exit ; end ;
5203: GO 5945
5205: GO 5208
5207: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
5208: LD_ADDR_EXP 15
5212: PUSH
5213: LD_EXP 15
5217: PPUSH
5218: LD_VAR 0 1
5222: PPUSH
5223: CALL 44195 0 2
5227: ST_TO_ADDR
// InGameOn ;
5228: CALL_OW 8
// SetSide ( Heike , 5 ) ;
5232: LD_EXP 20
5236: PPUSH
5237: LD_INT 5
5239: PPUSH
5240: CALL_OW 235
// SetSide ( building , 5 ) ;
5244: LD_VAR 0 1
5248: PPUSH
5249: LD_INT 5
5251: PPUSH
5252: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
5256: LD_EXP 20
5260: PPUSH
5261: LD_VAR 0 1
5265: PPUSH
5266: CALL_OW 120
// wait ( 0 0$3 ) ;
5270: LD_INT 105
5272: PPUSH
5273: CALL_OW 67
// case building of ruFac :
5277: LD_VAR 0 1
5281: PUSH
5282: LD_INT 61
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5387
5290: POP
// begin if IsOk ( Markov ) then
5291: LD_EXP 27
5295: PPUSH
5296: CALL_OW 302
5300: IFFALSE 5381
// begin Say ( Heike , DH-Krastyo-1 ) ;
5302: LD_EXP 20
5306: PPUSH
5307: LD_STRING DH-Krastyo-1
5309: PPUSH
5310: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
5314: LD_EXP 27
5318: PPUSH
5319: LD_STRING DMar-Krastyo-2
5321: PPUSH
5322: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
5326: LD_EXP 27
5330: PPUSH
5331: LD_STRING DMar-Krastyo-3
5333: PPUSH
5334: CALL_OW 88
// SetSide ( Markov , 2 ) ;
5338: LD_EXP 27
5342: PPUSH
5343: LD_INT 2
5345: PPUSH
5346: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
5350: LD_ADDR_EXP 13
5354: PUSH
5355: LD_EXP 13
5359: PPUSH
5360: LD_EXP 27
5364: PPUSH
5365: CALL 44195 0 2
5369: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
5370: LD_EXP 27
5374: PPUSH
5375: CALL_OW 122
// end else
5379: GO 5385
// SayHEmpty ( ) ;
5381: CALL 4889 0 0
// end ; ruBarKam :
5385: GO 5908
5387: LD_INT 109
5389: DOUBLE
5390: EQUAL
5391: IFTRUE 5395
5393: GO 5520
5395: POP
// begin if IsOk ( Kamil ) then
5396: LD_EXP 24
5400: PPUSH
5401: CALL_OW 302
5405: IFFALSE 5514
// begin Say ( Heike , DH-Kamil-1 ) ;
5407: LD_EXP 20
5411: PPUSH
5412: LD_STRING DH-Kamil-1
5414: PPUSH
5415: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
5419: LD_EXP 24
5423: PPUSH
5424: LD_STRING DKam-Kamil-2
5426: PPUSH
5427: CALL_OW 88
// if IsOk ( Sophia ) then
5431: LD_EXP 26
5435: PPUSH
5436: CALL_OW 302
5440: IFFALSE 5480
// if Sophia in heikeSquad then
5442: LD_EXP 26
5446: PUSH
5447: LD_EXP 13
5451: IN
5452: IFFALSE 5468
// Say ( Kamil , DKam-Kamil-a-3 ) else
5454: LD_EXP 24
5458: PPUSH
5459: LD_STRING DKam-Kamil-a-3
5461: PPUSH
5462: CALL_OW 88
5466: GO 5480
// Say ( Kamil , DKam-Kamil-3 ) ;
5468: LD_EXP 24
5472: PPUSH
5473: LD_STRING DKam-Kamil-3
5475: PPUSH
5476: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
5480: LD_EXP 24
5484: PPUSH
5485: LD_INT 2
5487: PPUSH
5488: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
5492: LD_ADDR_EXP 13
5496: PUSH
5497: LD_EXP 13
5501: PPUSH
5502: LD_EXP 24
5506: PPUSH
5507: CALL 44195 0 2
5511: ST_TO_ADDR
// end else
5512: GO 5518
// SayHEmpty ( ) ;
5514: CALL 4889 0 0
// end ; ruOutpost1 :
5518: GO 5908
5520: LD_INT 6
5522: DOUBLE
5523: EQUAL
5524: IFTRUE 5528
5526: GO 5853
5528: POP
// begin if IsOk ( Kurt ) then
5529: LD_EXP 29
5533: PPUSH
5534: CALL_OW 302
5538: IFFALSE 5847
// begin if hasMethanol then
5540: LD_EXP 12
5544: IFFALSE 5780
// begin Say ( Heike , DH-Kurt-1 ) ;
5546: LD_EXP 20
5550: PPUSH
5551: LD_STRING DH-Kurt-1
5553: PPUSH
5554: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
5558: LD_EXP 29
5562: PPUSH
5563: LD_STRING DKs-Kurt-2
5565: PPUSH
5566: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
5570: LD_EXP 21
5574: PPUSH
5575: LD_INT 6
5577: PPUSH
5578: CALL_OW 296
5582: PUSH
5583: LD_INT 10
5585: LESS
5586: PUSH
5587: LD_EXP 21
5591: PUSH
5592: LD_EXP 13
5596: IN
5597: AND
5598: IFFALSE 5675
// begin ComMoveXY ( Givi , 100 , 37 ) ;
5600: LD_EXP 21
5604: PPUSH
5605: LD_INT 100
5607: PPUSH
5608: LD_INT 37
5610: PPUSH
5611: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_INT 6
5622: PPUSH
5623: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
5627: LD_INT 35
5629: PPUSH
5630: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
5634: LD_EXP 21
5638: PPUSH
5639: LD_INT 6
5641: PPUSH
5642: CALL_OW 296
5646: PUSH
5647: LD_INT 7
5649: LESS
5650: IFFALSE 5627
// Say ( Givi , DG-Kurt-3 ) ;
5652: LD_EXP 21
5656: PPUSH
5657: LD_STRING DG-Kurt-3
5659: PPUSH
5660: CALL_OW 88
// ComStop ( Givi ) ;
5664: LD_EXP 21
5668: PPUSH
5669: CALL_OW 141
// end else
5673: GO 5778
// if GetDistUnits ( Olaf , ruOutpost1 ) < 10 and Olaf in heikeSquad then
5675: LD_EXP 28
5679: PPUSH
5680: LD_INT 6
5682: PPUSH
5683: CALL_OW 296
5687: PUSH
5688: LD_INT 10
5690: LESS
5691: PUSH
5692: LD_EXP 28
5696: PUSH
5697: LD_EXP 13
5701: IN
5702: AND
5703: IFFALSE 5778
// begin ComMoveXY ( Olaf , 100 , 37 ) ;
5705: LD_EXP 28
5709: PPUSH
5710: LD_INT 100
5712: PPUSH
5713: LD_INT 37
5715: PPUSH
5716: CALL_OW 111
// AddComTurnUnit ( Olaf , ruOutpost1 ) ;
5720: LD_EXP 28
5724: PPUSH
5725: LD_INT 6
5727: PPUSH
5728: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
5732: LD_INT 35
5734: PPUSH
5735: CALL_OW 67
// until GetDistUnits ( Olaf , ruOutpost1 ) < 7 ;
5739: LD_EXP 28
5743: PPUSH
5744: LD_INT 6
5746: PPUSH
5747: CALL_OW 296
5751: PUSH
5752: LD_INT 7
5754: LESS
5755: IFFALSE 5732
// Say ( Olaf , DO-Kurt-a-3 ) ;
5757: LD_EXP 28
5761: PPUSH
5762: LD_STRING DO-Kurt-a-3
5764: PPUSH
5765: CALL_OW 88
// ComStop ( Olaf ) ;
5769: LD_EXP 28
5773: PPUSH
5774: CALL_OW 141
// end ; end else
5778: GO 5804
// begin Say ( Heike , DH-Kurt-1 ) ;
5780: LD_EXP 20
5784: PPUSH
5785: LD_STRING DH-Kurt-1
5787: PPUSH
5788: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
5792: LD_EXP 29
5796: PPUSH
5797: LD_STRING DKs-Kurt-2
5799: PPUSH
5800: CALL_OW 88
// end ; SetSide ( Kurt , 2 ) ;
5804: LD_EXP 29
5808: PPUSH
5809: LD_INT 2
5811: PPUSH
5812: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
5816: LD_ADDR_EXP 13
5820: PUSH
5821: LD_EXP 13
5825: PPUSH
5826: LD_EXP 29
5830: PPUSH
5831: CALL 44195 0 2
5835: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
5836: LD_EXP 29
5840: PPUSH
5841: CALL_OW 122
// end else
5845: GO 5851
// SayHEmpty ( ) ;
5847: CALL 4889 0 0
// end ; ruOutpostBar :
5851: GO 5908
5853: LD_INT 13
5855: DOUBLE
5856: EQUAL
5857: IFTRUE 5861
5859: GO 5907
5861: POP
// begin if not hasGuardPatrolPlan then
5862: LD_EXP 17
5866: NOT
5867: IFFALSE 5901
// begin Say ( Heike , DH-PatrolPlan ) ;
5869: LD_EXP 20
5873: PPUSH
5874: LD_STRING DH-PatrolPlan
5876: PPUSH
5877: CALL_OW 88
// hasGuardPatrolPlan := true ;
5881: LD_ADDR_EXP 17
5885: PUSH
5886: LD_INT 1
5888: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
5889: LD_INT 6
5891: PPUSH
5892: LD_INT 2
5894: PPUSH
5895: CALL_OW 343
// end else
5899: GO 5905
// SayHEmpty ( ) ;
5901: CALL 4889 0 0
// end ; end ;
5905: GO 5908
5907: POP
// ComExitBuilding ( Heike ) ;
5908: LD_EXP 20
5912: PPUSH
5913: CALL_OW 122
// SetSide ( Heike , 2 ) ;
5917: LD_EXP 20
5921: PPUSH
5922: LD_INT 2
5924: PPUSH
5925: CALL_OW 235
// SetSide ( building , 3 ) ;
5929: LD_VAR 0 1
5933: PPUSH
5934: LD_INT 3
5936: PPUSH
5937: CALL_OW 235
// InGameOff ;
5941: CALL_OW 9
// end ; end_of_file
5945: LD_VAR 0 2
5949: RET
// on SailEvent ( event ) do begin case event of eventCenterCamOnHeike :
5950: LD_VAR 0 1
5954: PUSH
5955: LD_EXP 18
5959: DOUBLE
5960: EQUAL
5961: IFTRUE 5965
5963: GO 5995
5965: POP
// begin repeat wait ( 0 0$1 ) ;
5966: LD_INT 35
5968: PPUSH
5969: CALL_OW 67
// CenterOnUnits ( Heike ) ;
5973: LD_EXP 20
5977: PPUSH
5978: CALL_OW 85
// until IsDying ( Heike ) ;
5982: LD_EXP 20
5986: PPUSH
5987: CALL_OW 303
5991: IFFALSE 5966
// end ; end ;
5993: GO 5996
5995: POP
// end ;
5996: PPOPN 1
5998: END
// on SaiLEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
5999: LD_OWVAR 59
6003: IFFALSE 6007
// exit ;
6005: GO 6077
// PlaceSeeing ( x , y , 2 , - 12 ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 3
6016: PPUSH
6017: LD_INT 2
6019: PPUSH
6020: LD_INT 12
6022: NEG
6023: PPUSH
6024: CALL_OW 330
// CenterOnXY ( x , y ) ;
6028: LD_VAR 0 2
6032: PPUSH
6033: LD_VAR 0 3
6037: PPUSH
6038: CALL_OW 84
// wait ( time ) ;
6042: LD_VAR 0 4
6046: PPUSH
6047: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
6051: LD_EXP 20
6055: PPUSH
6056: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_VAR 0 3
6069: PPUSH
6070: LD_INT 2
6072: PPUSH
6073: CALL_OW 331
// end ;
6077: PPOPN 7
6079: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
6080: LD_VAR 0 1
6084: PUSH
6085: LD_EXP 20
6089: EQUAL
6090: PUSH
6091: LD_EXP 5
6095: AND
6096: IFFALSE 6105
// YouLost ( Heike ) ;
6098: LD_STRING Heike
6100: PPUSH
6101: CALL_OW 104
// end ; end_of_file
6105: PPOPN 1
6107: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
6108: LD_INT 0
6110: PPUSH
6111: PPUSH
6112: PPUSH
// u1 := IsInUnit ( unit1 ) ;
6113: LD_ADDR_VAR 0 4
6117: PUSH
6118: LD_VAR 0 1
6122: PPUSH
6123: CALL_OW 310
6127: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
6128: LD_ADDR_VAR 0 5
6132: PUSH
6133: LD_VAR 0 2
6137: PPUSH
6138: CALL_OW 310
6142: ST_TO_ADDR
// result := u1 and u1 = u2 ;
6143: LD_ADDR_VAR 0 3
6147: PUSH
6148: LD_VAR 0 4
6152: PUSH
6153: LD_VAR 0 4
6157: PUSH
6158: LD_VAR 0 5
6162: EQUAL
6163: AND
6164: ST_TO_ADDR
// end ;
6165: LD_VAR 0 3
6169: RET
// export function ShowPlace ( x , y , time ) ; begin
6170: LD_INT 0
6172: PPUSH
// RaiseSailEventCustom ( eventShowPlace , x , y , time , 0 , 0 , 0 ) ;
6173: LD_EXP 19
6177: PPUSH
6178: LD_VAR 0 1
6182: PPUSH
6183: LD_VAR 0 2
6187: PPUSH
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 0
6195: PPUSH
6196: LD_INT 0
6198: PPUSH
6199: LD_INT 0
6201: PPUSH
6202: CALL_OW 595
// end ;
6206: LD_VAR 0 4
6210: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
6218: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
6219: LD_VAR 0 1
6223: PPUSH
6224: CALL_OW 302
6228: NOT
6229: PUSH
6230: LD_VAR 0 2
6234: PPUSH
6235: CALL_OW 302
6239: NOT
6240: OR
6241: PUSH
6242: LD_VAR 0 2
6246: PPUSH
6247: CALL_OW 313
6251: PUSH
6252: LD_INT 6
6254: EQUAL
6255: OR
6256: IFFALSE 6260
// exit ;
6258: GO 6469
// btype := GetBType ( building ) ;
6260: LD_ADDR_VAR 0 8
6264: PUSH
6265: LD_VAR 0 2
6269: PPUSH
6270: CALL_OW 266
6274: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_lab , b_lab_half , b_lab_full ] then
6275: LD_VAR 0 8
6279: PUSH
6280: LD_INT 0
6282: PUSH
6283: LD_INT 1
6285: PUSH
6286: LD_INT 4
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: LD_INT 6
6294: PUSH
6295: LD_INT 7
6297: PUSH
6298: LD_INT 8
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: IN
6310: NOT
6311: IFFALSE 6315
// exit ;
6313: GO 6469
// x := GetX ( building ) ;
6315: LD_ADDR_VAR 0 4
6319: PUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 250
6329: ST_TO_ADDR
// y := GetY ( building ) ;
6330: LD_ADDR_VAR 0 5
6334: PUSH
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 251
6344: ST_TO_ADDR
// d := GetDir ( building ) ;
6345: LD_ADDR_VAR 0 6
6349: PUSH
6350: LD_VAR 0 2
6354: PPUSH
6355: CALL_OW 254
6359: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
6360: LD_ADDR_VAR 0 7
6364: PUSH
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_VAR 0 6
6374: PPUSH
6375: LD_INT 3
6377: PPUSH
6378: CALL_OW 272
6382: PUSH
6383: LD_VAR 0 5
6387: PPUSH
6388: LD_VAR 0 6
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: CALL_OW 273
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
6405: LD_VAR 0 7
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: PPUSH
6414: LD_VAR 0 7
6418: PUSH
6419: LD_INT 2
6421: ARRAY
6422: PPUSH
6423: CALL_OW 488
6427: NOT
6428: IFFALSE 6432
// exit ;
6430: GO 6469
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 3 ;
6432: LD_ADDR_VAR 0 3
6436: PUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: LD_VAR 0 7
6446: PUSH
6447: LD_INT 1
6449: ARRAY
6450: PPUSH
6451: LD_VAR 0 7
6455: PUSH
6456: LD_INT 2
6458: ARRAY
6459: PPUSH
6460: CALL_OW 297
6464: PUSH
6465: LD_INT 3
6467: LESS
6468: ST_TO_ADDR
// end ; end_of_file
6469: LD_VAR 0 3
6473: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
6474: LD_INT 0
6476: PPUSH
// if not step then
6477: LD_LOC 1
6481: NOT
6482: IFFALSE 6492
// step := 1 ;
6484: LD_ADDR_LOC 1
6488: PUSH
6489: LD_INT 1
6491: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
6492: LD_STRING HEscape
6494: PUSH
6495: LD_LOC 1
6499: STR
6500: PPUSH
6501: CALL_OW 97
6505: PUSH
6506: LD_INT 1
6508: DOUBLE
6509: EQUAL
6510: IFTRUE 6514
6512: GO 6521
6514: POP
// LockerMinigameSearch ; 2 :
6515: CALL 6554 0 0
6519: GO 6537
6521: LD_INT 2
6523: DOUBLE
6524: EQUAL
6525: IFTRUE 6529
6527: GO 6536
6529: POP
// LockerMinigameSetCode ; end ;
6530: CALL 6628 0 0
6534: GO 6537
6536: POP
// if lockerCodeValid then
6537: LD_EXP 36
6541: IFFALSE 6545
// exit ;
6543: GO 6549
// StartLockerMinigame ;
6545: CALL 6474 0 0
// end ;
6549: LD_VAR 0 1
6553: RET
// function LockerMinigameSearch ; begin
6554: LD_INT 0
6556: PPUSH
// if code then
6557: LD_LOC 2
6561: IFFALSE 6577
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
6563: LD_EXP 20
6567: PPUSH
6568: LD_STRING DH-Escape-3-Hint-0
6570: PPUSH
6571: CALL_OW 88
// exit ;
6575: GO 6623
// end ; Randomize ;
6577: CALL_OW 10
// code := rand ( 1 , 5 ) ;
6581: LD_ADDR_LOC 2
6585: PUSH
6586: LD_INT 1
6588: PPUSH
6589: LD_INT 5
6591: PPUSH
6592: CALL_OW 12
6596: ST_TO_ADDR
// step := 2 ;
6597: LD_ADDR_LOC 1
6601: PUSH
6602: LD_INT 2
6604: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
6605: LD_EXP 20
6609: PPUSH
6610: LD_STRING DH-Escape-3-Hint-
6612: PUSH
6613: LD_LOC 2
6617: STR
6618: PPUSH
6619: CALL_OW 88
// end ;
6623: LD_VAR 0 1
6627: RET
// function LockerMinigameSetCode ; begin
6628: LD_INT 0
6630: PPUSH
// if not code then
6631: LD_LOC 2
6635: NOT
6636: IFFALSE 6646
// code := 0 ;
6638: LD_ADDR_LOC 2
6642: PUSH
6643: LD_INT 0
6645: ST_TO_ADDR
// lockerBusy := true ;
6646: LD_ADDR_EXP 37
6650: PUSH
6651: LD_INT 1
6653: ST_TO_ADDR
// InGameOff ;
6654: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
6658: LD_STRING initLockerMinigame("
6660: PUSH
6661: LD_LOC 2
6665: STR
6666: PUSH
6667: LD_STRING ")
6669: STR
6670: PPUSH
6671: CALL_OW 559
// step := 3 ;
6675: LD_ADDR_LOC 1
6679: PUSH
6680: LD_INT 3
6682: ST_TO_ADDR
// repeat wait ( 1 ) ;
6683: LD_INT 1
6685: PPUSH
6686: CALL_OW 67
// until not lockerBusy ;
6690: LD_EXP 37
6694: NOT
6695: IFFALSE 6683
// InGameOn ;
6697: CALL_OW 8
// if not lockerCodeValid then
6701: LD_EXP 36
6705: NOT
6706: IFFALSE 6732
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
6708: LD_EXP 20
6712: PPUSH
6713: LD_STRING DH-Escape-3-Fail-
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: STR
6727: PPUSH
6728: CALL_OW 88
// end ; end_of_file
6732: LD_VAR 0 1
6736: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
6737: LD_VAR 0 2
6741: PUSH
6742: LD_INT 102
6744: EQUAL
6745: IFFALSE 6767
// begin lockerBusy := false ;
6747: LD_ADDR_EXP 37
6751: PUSH
6752: LD_INT 0
6754: ST_TO_ADDR
// lockerCodeValid := p3 ;
6755: LD_ADDR_EXP 36
6759: PUSH
6760: LD_VAR 0 3
6764: ST_TO_ADDR
// end else
6765: GO 6801
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
6767: LD_VAR 0 1
6771: PPUSH
6772: LD_VAR 0 2
6776: PPUSH
6777: LD_VAR 0 3
6781: PPUSH
6782: LD_VAR 0 4
6786: PPUSH
6787: LD_VAR 0 5
6791: PPUSH
6792: LD_VAR 0 6
6796: PPUSH
6797: CALL 48221 0 6
// end ;
6801: PPOPN 6
6803: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
6804: CALL 48192 0 0
// end ; end_of_file
6808: PPOPN 1
6810: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6811: LD_INT 0
6813: PPUSH
6814: PPUSH
// if exist_mode then
6815: LD_VAR 0 2
6819: IFFALSE 6844
// unit := CreateCharacter ( prefix & ident ) else
6821: LD_ADDR_VAR 0 5
6825: PUSH
6826: LD_VAR 0 3
6830: PUSH
6831: LD_VAR 0 1
6835: STR
6836: PPUSH
6837: CALL_OW 34
6841: ST_TO_ADDR
6842: GO 6859
// unit := NewCharacter ( ident ) ;
6844: LD_ADDR_VAR 0 5
6848: PUSH
6849: LD_VAR 0 1
6853: PPUSH
6854: CALL_OW 25
6858: ST_TO_ADDR
// result := unit ;
6859: LD_ADDR_VAR 0 4
6863: PUSH
6864: LD_VAR 0 5
6868: ST_TO_ADDR
// end ;
6869: LD_VAR 0 4
6873: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6874: LD_INT 0
6876: PPUSH
6877: PPUSH
// if not side or not nation then
6878: LD_VAR 0 1
6882: NOT
6883: PUSH
6884: LD_VAR 0 2
6888: NOT
6889: OR
6890: IFFALSE 6894
// exit ;
6892: GO 7662
// case nation of nation_american :
6894: LD_VAR 0 2
6898: PUSH
6899: LD_INT 1
6901: DOUBLE
6902: EQUAL
6903: IFTRUE 6907
6905: GO 7121
6907: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6908: LD_ADDR_VAR 0 4
6912: PUSH
6913: LD_INT 35
6915: PUSH
6916: LD_INT 45
6918: PUSH
6919: LD_INT 46
6921: PUSH
6922: LD_INT 47
6924: PUSH
6925: LD_INT 82
6927: PUSH
6928: LD_INT 83
6930: PUSH
6931: LD_INT 84
6933: PUSH
6934: LD_INT 85
6936: PUSH
6937: LD_INT 86
6939: PUSH
6940: LD_INT 1
6942: PUSH
6943: LD_INT 2
6945: PUSH
6946: LD_INT 6
6948: PUSH
6949: LD_INT 15
6951: PUSH
6952: LD_INT 16
6954: PUSH
6955: LD_INT 7
6957: PUSH
6958: LD_INT 12
6960: PUSH
6961: LD_INT 13
6963: PUSH
6964: LD_INT 10
6966: PUSH
6967: LD_INT 14
6969: PUSH
6970: LD_INT 20
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 22
6978: PUSH
6979: LD_INT 25
6981: PUSH
6982: LD_INT 32
6984: PUSH
6985: LD_INT 27
6987: PUSH
6988: LD_INT 36
6990: PUSH
6991: LD_INT 69
6993: PUSH
6994: LD_INT 39
6996: PUSH
6997: LD_INT 34
6999: PUSH
7000: LD_INT 40
7002: PUSH
7003: LD_INT 48
7005: PUSH
7006: LD_INT 49
7008: PUSH
7009: LD_INT 50
7011: PUSH
7012: LD_INT 51
7014: PUSH
7015: LD_INT 52
7017: PUSH
7018: LD_INT 53
7020: PUSH
7021: LD_INT 54
7023: PUSH
7024: LD_INT 55
7026: PUSH
7027: LD_INT 56
7029: PUSH
7030: LD_INT 57
7032: PUSH
7033: LD_INT 58
7035: PUSH
7036: LD_INT 59
7038: PUSH
7039: LD_INT 60
7041: PUSH
7042: LD_INT 61
7044: PUSH
7045: LD_INT 62
7047: PUSH
7048: LD_INT 80
7050: PUSH
7051: LD_INT 82
7053: PUSH
7054: LD_INT 83
7056: PUSH
7057: LD_INT 84
7059: PUSH
7060: LD_INT 85
7062: PUSH
7063: LD_INT 86
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: ST_TO_ADDR
7119: GO 7586
7121: LD_INT 2
7123: DOUBLE
7124: EQUAL
7125: IFTRUE 7129
7127: GO 7355
7129: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
7130: LD_ADDR_VAR 0 4
7134: PUSH
7135: LD_INT 35
7137: PUSH
7138: LD_INT 45
7140: PUSH
7141: LD_INT 46
7143: PUSH
7144: LD_INT 47
7146: PUSH
7147: LD_INT 82
7149: PUSH
7150: LD_INT 83
7152: PUSH
7153: LD_INT 84
7155: PUSH
7156: LD_INT 85
7158: PUSH
7159: LD_INT 87
7161: PUSH
7162: LD_INT 70
7164: PUSH
7165: LD_INT 1
7167: PUSH
7168: LD_INT 11
7170: PUSH
7171: LD_INT 3
7173: PUSH
7174: LD_INT 4
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: LD_INT 6
7182: PUSH
7183: LD_INT 15
7185: PUSH
7186: LD_INT 18
7188: PUSH
7189: LD_INT 7
7191: PUSH
7192: LD_INT 17
7194: PUSH
7195: LD_INT 8
7197: PUSH
7198: LD_INT 20
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 72
7209: PUSH
7210: LD_INT 26
7212: PUSH
7213: LD_INT 69
7215: PUSH
7216: LD_INT 39
7218: PUSH
7219: LD_INT 40
7221: PUSH
7222: LD_INT 41
7224: PUSH
7225: LD_INT 42
7227: PUSH
7228: LD_INT 43
7230: PUSH
7231: LD_INT 48
7233: PUSH
7234: LD_INT 49
7236: PUSH
7237: LD_INT 50
7239: PUSH
7240: LD_INT 51
7242: PUSH
7243: LD_INT 52
7245: PUSH
7246: LD_INT 53
7248: PUSH
7249: LD_INT 54
7251: PUSH
7252: LD_INT 55
7254: PUSH
7255: LD_INT 56
7257: PUSH
7258: LD_INT 60
7260: PUSH
7261: LD_INT 61
7263: PUSH
7264: LD_INT 62
7266: PUSH
7267: LD_INT 66
7269: PUSH
7270: LD_INT 67
7272: PUSH
7273: LD_INT 68
7275: PUSH
7276: LD_INT 81
7278: PUSH
7279: LD_INT 82
7281: PUSH
7282: LD_INT 83
7284: PUSH
7285: LD_INT 84
7287: PUSH
7288: LD_INT 85
7290: PUSH
7291: LD_INT 87
7293: PUSH
7294: LD_INT 88
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: ST_TO_ADDR
7353: GO 7586
7355: LD_INT 3
7357: DOUBLE
7358: EQUAL
7359: IFTRUE 7363
7361: GO 7585
7363: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
7364: LD_ADDR_VAR 0 4
7368: PUSH
7369: LD_INT 46
7371: PUSH
7372: LD_INT 47
7374: PUSH
7375: LD_INT 1
7377: PUSH
7378: LD_INT 2
7380: PUSH
7381: LD_INT 82
7383: PUSH
7384: LD_INT 83
7386: PUSH
7387: LD_INT 84
7389: PUSH
7390: LD_INT 85
7392: PUSH
7393: LD_INT 86
7395: PUSH
7396: LD_INT 11
7398: PUSH
7399: LD_INT 9
7401: PUSH
7402: LD_INT 20
7404: PUSH
7405: LD_INT 19
7407: PUSH
7408: LD_INT 21
7410: PUSH
7411: LD_INT 24
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_INT 25
7419: PUSH
7420: LD_INT 28
7422: PUSH
7423: LD_INT 29
7425: PUSH
7426: LD_INT 30
7428: PUSH
7429: LD_INT 31
7431: PUSH
7432: LD_INT 37
7434: PUSH
7435: LD_INT 38
7437: PUSH
7438: LD_INT 32
7440: PUSH
7441: LD_INT 27
7443: PUSH
7444: LD_INT 33
7446: PUSH
7447: LD_INT 69
7449: PUSH
7450: LD_INT 39
7452: PUSH
7453: LD_INT 34
7455: PUSH
7456: LD_INT 40
7458: PUSH
7459: LD_INT 71
7461: PUSH
7462: LD_INT 23
7464: PUSH
7465: LD_INT 44
7467: PUSH
7468: LD_INT 48
7470: PUSH
7471: LD_INT 49
7473: PUSH
7474: LD_INT 50
7476: PUSH
7477: LD_INT 51
7479: PUSH
7480: LD_INT 52
7482: PUSH
7483: LD_INT 53
7485: PUSH
7486: LD_INT 54
7488: PUSH
7489: LD_INT 55
7491: PUSH
7492: LD_INT 56
7494: PUSH
7495: LD_INT 57
7497: PUSH
7498: LD_INT 58
7500: PUSH
7501: LD_INT 59
7503: PUSH
7504: LD_INT 63
7506: PUSH
7507: LD_INT 64
7509: PUSH
7510: LD_INT 65
7512: PUSH
7513: LD_INT 82
7515: PUSH
7516: LD_INT 83
7518: PUSH
7519: LD_INT 84
7521: PUSH
7522: LD_INT 85
7524: PUSH
7525: LD_INT 86
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: ST_TO_ADDR
7583: GO 7586
7585: POP
// if state > - 1 and state < 3 then
7586: LD_VAR 0 3
7590: PUSH
7591: LD_INT 1
7593: NEG
7594: GREATER
7595: PUSH
7596: LD_VAR 0 3
7600: PUSH
7601: LD_INT 3
7603: LESS
7604: AND
7605: IFFALSE 7662
// for i in result do
7607: LD_ADDR_VAR 0 5
7611: PUSH
7612: LD_VAR 0 4
7616: PUSH
7617: FOR_IN
7618: IFFALSE 7660
// if GetTech ( i , side ) <> state then
7620: LD_VAR 0 5
7624: PPUSH
7625: LD_VAR 0 1
7629: PPUSH
7630: CALL_OW 321
7634: PUSH
7635: LD_VAR 0 3
7639: NONEQUAL
7640: IFFALSE 7658
// result := result diff i ;
7642: LD_ADDR_VAR 0 4
7646: PUSH
7647: LD_VAR 0 4
7651: PUSH
7652: LD_VAR 0 5
7656: DIFF
7657: ST_TO_ADDR
7658: GO 7617
7660: POP
7661: POP
// end ;
7662: LD_VAR 0 4
7666: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7667: LD_INT 0
7669: PPUSH
7670: PPUSH
7671: PPUSH
// result := true ;
7672: LD_ADDR_VAR 0 3
7676: PUSH
7677: LD_INT 1
7679: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7680: LD_ADDR_VAR 0 5
7684: PUSH
7685: LD_VAR 0 2
7689: PPUSH
7690: CALL_OW 480
7694: ST_TO_ADDR
// if not tmp then
7695: LD_VAR 0 5
7699: NOT
7700: IFFALSE 7704
// exit ;
7702: GO 7753
// for i in tmp do
7704: LD_ADDR_VAR 0 4
7708: PUSH
7709: LD_VAR 0 5
7713: PUSH
7714: FOR_IN
7715: IFFALSE 7751
// if GetTech ( i , side ) <> state_researched then
7717: LD_VAR 0 4
7721: PPUSH
7722: LD_VAR 0 1
7726: PPUSH
7727: CALL_OW 321
7731: PUSH
7732: LD_INT 2
7734: NONEQUAL
7735: IFFALSE 7749
// begin result := false ;
7737: LD_ADDR_VAR 0 3
7741: PUSH
7742: LD_INT 0
7744: ST_TO_ADDR
// exit ;
7745: POP
7746: POP
7747: GO 7753
// end ;
7749: GO 7714
7751: POP
7752: POP
// end ;
7753: LD_VAR 0 3
7757: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7758: LD_INT 0
7760: PPUSH
7761: PPUSH
7762: PPUSH
7763: PPUSH
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
7769: PPUSH
7770: PPUSH
7771: PPUSH
7772: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7773: LD_VAR 0 1
7777: NOT
7778: PUSH
7779: LD_VAR 0 1
7783: PPUSH
7784: CALL_OW 257
7788: PUSH
7789: LD_INT 9
7791: NONEQUAL
7792: OR
7793: IFFALSE 7797
// exit ;
7795: GO 8370
// side := GetSide ( unit ) ;
7797: LD_ADDR_VAR 0 9
7801: PUSH
7802: LD_VAR 0 1
7806: PPUSH
7807: CALL_OW 255
7811: ST_TO_ADDR
// tech_space := tech_spacanom ;
7812: LD_ADDR_VAR 0 12
7816: PUSH
7817: LD_INT 29
7819: ST_TO_ADDR
// tech_time := tech_taurad ;
7820: LD_ADDR_VAR 0 13
7824: PUSH
7825: LD_INT 28
7827: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7828: LD_ADDR_VAR 0 11
7832: PUSH
7833: LD_VAR 0 1
7837: PPUSH
7838: CALL_OW 310
7842: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7843: LD_VAR 0 11
7847: PPUSH
7848: CALL_OW 247
7852: PUSH
7853: LD_INT 2
7855: EQUAL
7856: IFFALSE 7860
// exit ;
7858: GO 8370
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7860: LD_ADDR_VAR 0 8
7864: PUSH
7865: LD_INT 81
7867: PUSH
7868: LD_VAR 0 9
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 3
7879: PUSH
7880: LD_INT 21
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 69
7902: ST_TO_ADDR
// if not tmp then
7903: LD_VAR 0 8
7907: NOT
7908: IFFALSE 7912
// exit ;
7910: GO 8370
// if in_unit then
7912: LD_VAR 0 11
7916: IFFALSE 7940
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7918: LD_ADDR_VAR 0 10
7922: PUSH
7923: LD_VAR 0 8
7927: PPUSH
7928: LD_VAR 0 11
7932: PPUSH
7933: CALL_OW 74
7937: ST_TO_ADDR
7938: GO 7960
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7940: LD_ADDR_VAR 0 10
7944: PUSH
7945: LD_VAR 0 8
7949: PPUSH
7950: LD_VAR 0 1
7954: PPUSH
7955: CALL_OW 74
7959: ST_TO_ADDR
// if not enemy then
7960: LD_VAR 0 10
7964: NOT
7965: IFFALSE 7969
// exit ;
7967: GO 8370
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7969: LD_VAR 0 11
7973: PUSH
7974: LD_VAR 0 11
7978: PPUSH
7979: LD_VAR 0 10
7983: PPUSH
7984: CALL_OW 296
7988: PUSH
7989: LD_INT 13
7991: GREATER
7992: AND
7993: PUSH
7994: LD_VAR 0 1
7998: PPUSH
7999: LD_VAR 0 10
8003: PPUSH
8004: CALL_OW 296
8008: PUSH
8009: LD_INT 12
8011: GREATER
8012: OR
8013: IFFALSE 8017
// exit ;
8015: GO 8370
// missile := [ 1 ] ;
8017: LD_ADDR_VAR 0 14
8021: PUSH
8022: LD_INT 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: ST_TO_ADDR
// if Researched ( side , tech_space ) then
8028: LD_VAR 0 9
8032: PPUSH
8033: LD_VAR 0 12
8037: PPUSH
8038: CALL_OW 325
8042: IFFALSE 8071
// missile := Replace ( missile , missile + 1 , 2 ) ;
8044: LD_ADDR_VAR 0 14
8048: PUSH
8049: LD_VAR 0 14
8053: PPUSH
8054: LD_VAR 0 14
8058: PUSH
8059: LD_INT 1
8061: PLUS
8062: PPUSH
8063: LD_INT 2
8065: PPUSH
8066: CALL_OW 1
8070: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
8071: LD_VAR 0 9
8075: PPUSH
8076: LD_VAR 0 13
8080: PPUSH
8081: CALL_OW 325
8085: PUSH
8086: LD_VAR 0 10
8090: PPUSH
8091: CALL_OW 255
8095: PPUSH
8096: LD_VAR 0 13
8100: PPUSH
8101: CALL_OW 325
8105: NOT
8106: AND
8107: IFFALSE 8136
// missile := Replace ( missile , missile + 1 , 3 ) ;
8109: LD_ADDR_VAR 0 14
8113: PUSH
8114: LD_VAR 0 14
8118: PPUSH
8119: LD_VAR 0 14
8123: PUSH
8124: LD_INT 1
8126: PLUS
8127: PPUSH
8128: LD_INT 3
8130: PPUSH
8131: CALL_OW 1
8135: ST_TO_ADDR
// if missile < 2 then
8136: LD_VAR 0 14
8140: PUSH
8141: LD_INT 2
8143: LESS
8144: IFFALSE 8148
// exit ;
8146: GO 8370
// x := GetX ( enemy ) ;
8148: LD_ADDR_VAR 0 4
8152: PUSH
8153: LD_VAR 0 10
8157: PPUSH
8158: CALL_OW 250
8162: ST_TO_ADDR
// y := GetY ( enemy ) ;
8163: LD_ADDR_VAR 0 5
8167: PUSH
8168: LD_VAR 0 10
8172: PPUSH
8173: CALL_OW 251
8177: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
8178: LD_ADDR_VAR 0 6
8182: PUSH
8183: LD_VAR 0 4
8187: PUSH
8188: LD_INT 1
8190: NEG
8191: PPUSH
8192: LD_INT 1
8194: PPUSH
8195: CALL_OW 12
8199: PLUS
8200: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
8201: LD_ADDR_VAR 0 7
8205: PUSH
8206: LD_VAR 0 5
8210: PUSH
8211: LD_INT 1
8213: NEG
8214: PPUSH
8215: LD_INT 1
8217: PPUSH
8218: CALL_OW 12
8222: PLUS
8223: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8224: LD_VAR 0 6
8228: PPUSH
8229: LD_VAR 0 7
8233: PPUSH
8234: CALL_OW 488
8238: NOT
8239: IFFALSE 8261
// begin _x := x ;
8241: LD_ADDR_VAR 0 6
8245: PUSH
8246: LD_VAR 0 4
8250: ST_TO_ADDR
// _y := y ;
8251: LD_ADDR_VAR 0 7
8255: PUSH
8256: LD_VAR 0 5
8260: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
8261: LD_ADDR_VAR 0 3
8265: PUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_VAR 0 14
8273: PPUSH
8274: CALL_OW 12
8278: ST_TO_ADDR
// case i of 1 :
8279: LD_VAR 0 3
8283: PUSH
8284: LD_INT 1
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8309
8292: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
8293: LD_VAR 0 1
8297: PPUSH
8298: LD_VAR 0 10
8302: PPUSH
8303: CALL_OW 115
8307: GO 8370
8309: LD_INT 2
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8339
8317: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_VAR 0 6
8327: PPUSH
8328: LD_VAR 0 7
8332: PPUSH
8333: CALL_OW 153
8337: GO 8370
8339: LD_INT 3
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8369
8347: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
8348: LD_VAR 0 1
8352: PPUSH
8353: LD_VAR 0 6
8357: PPUSH
8358: LD_VAR 0 7
8362: PPUSH
8363: CALL_OW 154
8367: GO 8370
8369: POP
// end ;
8370: LD_VAR 0 2
8374: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
8375: LD_INT 0
8377: PPUSH
8378: PPUSH
8379: PPUSH
8380: PPUSH
8381: PPUSH
8382: PPUSH
// if not unit or not building then
8383: LD_VAR 0 1
8387: NOT
8388: PUSH
8389: LD_VAR 0 2
8393: NOT
8394: OR
8395: IFFALSE 8399
// exit ;
8397: GO 8557
// x := GetX ( building ) ;
8399: LD_ADDR_VAR 0 5
8403: PUSH
8404: LD_VAR 0 2
8408: PPUSH
8409: CALL_OW 250
8413: ST_TO_ADDR
// y := GetY ( building ) ;
8414: LD_ADDR_VAR 0 6
8418: PUSH
8419: LD_VAR 0 2
8423: PPUSH
8424: CALL_OW 251
8428: ST_TO_ADDR
// for i = 0 to 5 do
8429: LD_ADDR_VAR 0 4
8433: PUSH
8434: DOUBLE
8435: LD_INT 0
8437: DEC
8438: ST_TO_ADDR
8439: LD_INT 5
8441: PUSH
8442: FOR_TO
8443: IFFALSE 8555
// begin _x := ShiftX ( x , i , 3 ) ;
8445: LD_ADDR_VAR 0 7
8449: PUSH
8450: LD_VAR 0 5
8454: PPUSH
8455: LD_VAR 0 4
8459: PPUSH
8460: LD_INT 3
8462: PPUSH
8463: CALL_OW 272
8467: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8468: LD_ADDR_VAR 0 8
8472: PUSH
8473: LD_VAR 0 6
8477: PPUSH
8478: LD_VAR 0 4
8482: PPUSH
8483: LD_INT 3
8485: PPUSH
8486: CALL_OW 273
8490: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8491: LD_VAR 0 7
8495: PPUSH
8496: LD_VAR 0 8
8500: PPUSH
8501: CALL_OW 488
8505: NOT
8506: IFFALSE 8510
// continue ;
8508: GO 8442
// if HexInfo ( _x , _y ) = 0 then
8510: LD_VAR 0 7
8514: PPUSH
8515: LD_VAR 0 8
8519: PPUSH
8520: CALL_OW 428
8524: PUSH
8525: LD_INT 0
8527: EQUAL
8528: IFFALSE 8553
// begin ComMoveXY ( unit , _x , _y ) ;
8530: LD_VAR 0 1
8534: PPUSH
8535: LD_VAR 0 7
8539: PPUSH
8540: LD_VAR 0 8
8544: PPUSH
8545: CALL_OW 111
// exit ;
8549: POP
8550: POP
8551: GO 8557
// end ; end ;
8553: GO 8442
8555: POP
8556: POP
// end ;
8557: LD_VAR 0 3
8561: RET
// export function ScanBase ( side , base_area ) ; begin
8562: LD_INT 0
8564: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8565: LD_ADDR_VAR 0 3
8569: PUSH
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_INT 81
8577: PUSH
8578: LD_VAR 0 1
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL_OW 70
8591: ST_TO_ADDR
// end ;
8592: LD_VAR 0 3
8596: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8597: LD_INT 0
8599: PPUSH
8600: PPUSH
8601: PPUSH
8602: PPUSH
// result := false ;
8603: LD_ADDR_VAR 0 2
8607: PUSH
8608: LD_INT 0
8610: ST_TO_ADDR
// side := GetSide ( unit ) ;
8611: LD_ADDR_VAR 0 3
8615: PUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: CALL_OW 255
8625: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8626: LD_ADDR_VAR 0 4
8630: PUSH
8631: LD_VAR 0 1
8635: PPUSH
8636: CALL_OW 248
8640: ST_TO_ADDR
// case nat of 1 :
8641: LD_VAR 0 4
8645: PUSH
8646: LD_INT 1
8648: DOUBLE
8649: EQUAL
8650: IFTRUE 8654
8652: GO 8665
8654: POP
// tech := tech_lassight ; 2 :
8655: LD_ADDR_VAR 0 5
8659: PUSH
8660: LD_INT 12
8662: ST_TO_ADDR
8663: GO 8704
8665: LD_INT 2
8667: DOUBLE
8668: EQUAL
8669: IFTRUE 8673
8671: GO 8684
8673: POP
// tech := tech_mortar ; 3 :
8674: LD_ADDR_VAR 0 5
8678: PUSH
8679: LD_INT 41
8681: ST_TO_ADDR
8682: GO 8704
8684: LD_INT 3
8686: DOUBLE
8687: EQUAL
8688: IFTRUE 8692
8690: GO 8703
8692: POP
// tech := tech_bazooka ; end ;
8693: LD_ADDR_VAR 0 5
8697: PUSH
8698: LD_INT 44
8700: ST_TO_ADDR
8701: GO 8704
8703: POP
// if Researched ( side , tech ) then
8704: LD_VAR 0 3
8708: PPUSH
8709: LD_VAR 0 5
8713: PPUSH
8714: CALL_OW 325
8718: IFFALSE 8745
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8720: LD_ADDR_VAR 0 2
8724: PUSH
8725: LD_INT 5
8727: PUSH
8728: LD_INT 8
8730: PUSH
8731: LD_INT 9
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: PUSH
8739: LD_VAR 0 4
8743: ARRAY
8744: ST_TO_ADDR
// end ;
8745: LD_VAR 0 2
8749: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8750: LD_INT 0
8752: PPUSH
8753: PPUSH
8754: PPUSH
// if not mines then
8755: LD_VAR 0 2
8759: NOT
8760: IFFALSE 8764
// exit ;
8762: GO 8908
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8764: LD_ADDR_VAR 0 5
8768: PUSH
8769: LD_INT 81
8771: PUSH
8772: LD_VAR 0 1
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: LD_INT 21
8786: PUSH
8787: LD_INT 3
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PPUSH
8802: CALL_OW 69
8806: ST_TO_ADDR
// for i in mines do
8807: LD_ADDR_VAR 0 4
8811: PUSH
8812: LD_VAR 0 2
8816: PUSH
8817: FOR_IN
8818: IFFALSE 8906
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8820: LD_VAR 0 4
8824: PUSH
8825: LD_INT 1
8827: ARRAY
8828: PPUSH
8829: LD_VAR 0 4
8833: PUSH
8834: LD_INT 2
8836: ARRAY
8837: PPUSH
8838: CALL_OW 458
8842: NOT
8843: IFFALSE 8847
// continue ;
8845: GO 8817
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8847: LD_VAR 0 4
8851: PUSH
8852: LD_INT 1
8854: ARRAY
8855: PPUSH
8856: LD_VAR 0 4
8860: PUSH
8861: LD_INT 2
8863: ARRAY
8864: PPUSH
8865: CALL_OW 428
8869: PUSH
8870: LD_VAR 0 5
8874: IN
8875: IFFALSE 8904
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8877: LD_VAR 0 4
8881: PUSH
8882: LD_INT 1
8884: ARRAY
8885: PPUSH
8886: LD_VAR 0 4
8890: PUSH
8891: LD_INT 2
8893: ARRAY
8894: PPUSH
8895: LD_VAR 0 1
8899: PPUSH
8900: CALL_OW 456
// end ;
8904: GO 8817
8906: POP
8907: POP
// end ;
8908: LD_VAR 0 3
8912: RET
// export function Count ( array ) ; var i ; begin
8913: LD_INT 0
8915: PPUSH
8916: PPUSH
// result := 0 ;
8917: LD_ADDR_VAR 0 2
8921: PUSH
8922: LD_INT 0
8924: ST_TO_ADDR
// for i in array do
8925: LD_ADDR_VAR 0 3
8929: PUSH
8930: LD_VAR 0 1
8934: PUSH
8935: FOR_IN
8936: IFFALSE 8960
// if i then
8938: LD_VAR 0 3
8942: IFFALSE 8958
// result := result + 1 ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_VAR 0 2
8953: PUSH
8954: LD_INT 1
8956: PLUS
8957: ST_TO_ADDR
8958: GO 8935
8960: POP
8961: POP
// end ;
8962: LD_VAR 0 2
8966: RET
// export function IsEmpty ( building ) ; begin
8967: LD_INT 0
8969: PPUSH
// if not building then
8970: LD_VAR 0 1
8974: NOT
8975: IFFALSE 8979
// exit ;
8977: GO 9022
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8979: LD_ADDR_VAR 0 2
8983: PUSH
8984: LD_VAR 0 1
8988: PUSH
8989: LD_INT 22
8991: PUSH
8992: LD_VAR 0 1
8996: PPUSH
8997: CALL_OW 255
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 58
9008: PUSH
9009: EMPTY
9010: LIST
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PPUSH
9016: CALL_OW 69
9020: IN
9021: ST_TO_ADDR
// end ;
9022: LD_VAR 0 2
9026: RET
// export function IsNotFull ( building ) ; var places ; begin
9027: LD_INT 0
9029: PPUSH
9030: PPUSH
// if not building then
9031: LD_VAR 0 1
9035: NOT
9036: IFFALSE 9040
// exit ;
9038: GO 9211
// result := false ;
9040: LD_ADDR_VAR 0 2
9044: PUSH
9045: LD_INT 0
9047: ST_TO_ADDR
// places := 0 ;
9048: LD_ADDR_VAR 0 3
9052: PUSH
9053: LD_INT 0
9055: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
9056: LD_VAR 0 1
9060: PPUSH
9061: CALL_OW 266
9065: PUSH
9066: LD_INT 0
9068: DOUBLE
9069: EQUAL
9070: IFTRUE 9128
9072: LD_INT 1
9074: DOUBLE
9075: EQUAL
9076: IFTRUE 9128
9078: LD_INT 6
9080: DOUBLE
9081: EQUAL
9082: IFTRUE 9128
9084: LD_INT 7
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9128
9090: LD_INT 8
9092: DOUBLE
9093: EQUAL
9094: IFTRUE 9128
9096: LD_INT 4
9098: DOUBLE
9099: EQUAL
9100: IFTRUE 9128
9102: LD_INT 5
9104: DOUBLE
9105: EQUAL
9106: IFTRUE 9128
9108: LD_INT 2
9110: DOUBLE
9111: EQUAL
9112: IFTRUE 9128
9114: LD_INT 3
9116: DOUBLE
9117: EQUAL
9118: IFTRUE 9128
9120: LD_INT 35
9122: DOUBLE
9123: EQUAL
9124: IFTRUE 9128
9126: GO 9139
9128: POP
// places := 6 ; b_bunker , b_breastwork :
9129: LD_ADDR_VAR 0 3
9133: PUSH
9134: LD_INT 6
9136: ST_TO_ADDR
9137: GO 9184
9139: LD_INT 32
9141: DOUBLE
9142: EQUAL
9143: IFTRUE 9153
9145: LD_INT 31
9147: DOUBLE
9148: EQUAL
9149: IFTRUE 9153
9151: GO 9164
9153: POP
// places := 1 ; b_control_tower :
9154: LD_ADDR_VAR 0 3
9158: PUSH
9159: LD_INT 1
9161: ST_TO_ADDR
9162: GO 9184
9164: LD_INT 36
9166: DOUBLE
9167: EQUAL
9168: IFTRUE 9172
9170: GO 9183
9172: POP
// places := 3 ; end ;
9173: LD_ADDR_VAR 0 3
9177: PUSH
9178: LD_INT 3
9180: ST_TO_ADDR
9181: GO 9184
9183: POP
// if places then
9184: LD_VAR 0 3
9188: IFFALSE 9211
// result := UnitsInside ( building ) < places ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_VAR 0 1
9199: PPUSH
9200: CALL_OW 313
9204: PUSH
9205: LD_VAR 0 3
9209: LESS
9210: ST_TO_ADDR
// end ;
9211: LD_VAR 0 2
9215: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
9216: LD_INT 0
9218: PPUSH
9219: PPUSH
9220: PPUSH
9221: PPUSH
// tmp := [ ] ;
9222: LD_ADDR_VAR 0 3
9226: PUSH
9227: EMPTY
9228: ST_TO_ADDR
// list := [ ] ;
9229: LD_ADDR_VAR 0 5
9233: PUSH
9234: EMPTY
9235: ST_TO_ADDR
// for i = 16 to 25 do
9236: LD_ADDR_VAR 0 4
9240: PUSH
9241: DOUBLE
9242: LD_INT 16
9244: DEC
9245: ST_TO_ADDR
9246: LD_INT 25
9248: PUSH
9249: FOR_TO
9250: IFFALSE 9323
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
9252: LD_ADDR_VAR 0 3
9256: PUSH
9257: LD_VAR 0 3
9261: PUSH
9262: LD_INT 22
9264: PUSH
9265: LD_VAR 0 1
9269: PPUSH
9270: CALL_OW 255
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 91
9281: PUSH
9282: LD_VAR 0 1
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 30
9297: PUSH
9298: LD_VAR 0 4
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: PPUSH
9315: CALL_OW 69
9319: ADD
9320: ST_TO_ADDR
9321: GO 9249
9323: POP
9324: POP
// for i = 1 to tmp do
9325: LD_ADDR_VAR 0 4
9329: PUSH
9330: DOUBLE
9331: LD_INT 1
9333: DEC
9334: ST_TO_ADDR
9335: LD_VAR 0 3
9339: PUSH
9340: FOR_TO
9341: IFFALSE 9429
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
9343: LD_ADDR_VAR 0 5
9347: PUSH
9348: LD_VAR 0 5
9352: PUSH
9353: LD_VAR 0 3
9357: PUSH
9358: LD_VAR 0 4
9362: ARRAY
9363: PPUSH
9364: CALL_OW 266
9368: PUSH
9369: LD_VAR 0 3
9373: PUSH
9374: LD_VAR 0 4
9378: ARRAY
9379: PPUSH
9380: CALL_OW 250
9384: PUSH
9385: LD_VAR 0 3
9389: PUSH
9390: LD_VAR 0 4
9394: ARRAY
9395: PPUSH
9396: CALL_OW 251
9400: PUSH
9401: LD_VAR 0 3
9405: PUSH
9406: LD_VAR 0 4
9410: ARRAY
9411: PPUSH
9412: CALL_OW 254
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: PUSH
9423: EMPTY
9424: LIST
9425: ADD
9426: ST_TO_ADDR
9427: GO 9340
9429: POP
9430: POP
// result := list ;
9431: LD_ADDR_VAR 0 2
9435: PUSH
9436: LD_VAR 0 5
9440: ST_TO_ADDR
// end ;
9441: LD_VAR 0 2
9445: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
9446: LD_INT 0
9448: PPUSH
9449: PPUSH
9450: PPUSH
9451: PPUSH
9452: PPUSH
9453: PPUSH
9454: PPUSH
// if not factory then
9455: LD_VAR 0 1
9459: NOT
9460: IFFALSE 9464
// exit ;
9462: GO 10057
// if control = control_apeman then
9464: LD_VAR 0 4
9468: PUSH
9469: LD_INT 5
9471: EQUAL
9472: IFFALSE 9581
// begin tmp := UnitsInside ( factory ) ;
9474: LD_ADDR_VAR 0 8
9478: PUSH
9479: LD_VAR 0 1
9483: PPUSH
9484: CALL_OW 313
9488: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
9489: LD_VAR 0 8
9493: PPUSH
9494: LD_INT 25
9496: PUSH
9497: LD_INT 12
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PPUSH
9504: CALL_OW 72
9508: NOT
9509: IFFALSE 9519
// control := control_manual ;
9511: LD_ADDR_VAR 0 4
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
9519: LD_ADDR_VAR 0 8
9523: PUSH
9524: LD_VAR 0 1
9528: PPUSH
9529: CALL 9216 0 1
9533: ST_TO_ADDR
// if tmp then
9534: LD_VAR 0 8
9538: IFFALSE 9581
// begin for i in tmp do
9540: LD_ADDR_VAR 0 7
9544: PUSH
9545: LD_VAR 0 8
9549: PUSH
9550: FOR_IN
9551: IFFALSE 9579
// if i [ 1 ] = b_ext_radio then
9553: LD_VAR 0 7
9557: PUSH
9558: LD_INT 1
9560: ARRAY
9561: PUSH
9562: LD_INT 22
9564: EQUAL
9565: IFFALSE 9577
// begin control := control_remote ;
9567: LD_ADDR_VAR 0 4
9571: PUSH
9572: LD_INT 2
9574: ST_TO_ADDR
// break ;
9575: GO 9579
// end ;
9577: GO 9550
9579: POP
9580: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9581: LD_VAR 0 1
9585: PPUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: LD_VAR 0 3
9595: PPUSH
9596: LD_VAR 0 4
9600: PPUSH
9601: LD_VAR 0 5
9605: PPUSH
9606: CALL_OW 448
9610: IFFALSE 9645
// begin result := [ chassis , engine , control , weapon ] ;
9612: LD_ADDR_VAR 0 6
9616: PUSH
9617: LD_VAR 0 2
9621: PUSH
9622: LD_VAR 0 3
9626: PUSH
9627: LD_VAR 0 4
9631: PUSH
9632: LD_VAR 0 5
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: ST_TO_ADDR
// exit ;
9643: GO 10057
// end ; _chassis := AvailableChassisList ( factory ) ;
9645: LD_ADDR_VAR 0 9
9649: PUSH
9650: LD_VAR 0 1
9654: PPUSH
9655: CALL_OW 475
9659: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9660: LD_ADDR_VAR 0 11
9664: PUSH
9665: LD_VAR 0 1
9669: PPUSH
9670: CALL_OW 476
9674: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9675: LD_ADDR_VAR 0 12
9679: PUSH
9680: LD_VAR 0 1
9684: PPUSH
9685: CALL_OW 477
9689: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9690: LD_ADDR_VAR 0 10
9694: PUSH
9695: LD_VAR 0 1
9699: PPUSH
9700: CALL_OW 478
9704: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9705: LD_VAR 0 9
9709: NOT
9710: PUSH
9711: LD_VAR 0 11
9715: NOT
9716: OR
9717: PUSH
9718: LD_VAR 0 12
9722: NOT
9723: OR
9724: PUSH
9725: LD_VAR 0 10
9729: NOT
9730: OR
9731: IFFALSE 9766
// begin result := [ chassis , engine , control , weapon ] ;
9733: LD_ADDR_VAR 0 6
9737: PUSH
9738: LD_VAR 0 2
9742: PUSH
9743: LD_VAR 0 3
9747: PUSH
9748: LD_VAR 0 4
9752: PUSH
9753: LD_VAR 0 5
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: ST_TO_ADDR
// exit ;
9764: GO 10057
// end ; if not chassis in _chassis then
9766: LD_VAR 0 2
9770: PUSH
9771: LD_VAR 0 9
9775: IN
9776: NOT
9777: IFFALSE 9803
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9779: LD_ADDR_VAR 0 2
9783: PUSH
9784: LD_VAR 0 9
9788: PUSH
9789: LD_INT 1
9791: PPUSH
9792: LD_VAR 0 9
9796: PPUSH
9797: CALL_OW 12
9801: ARRAY
9802: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9803: LD_VAR 0 2
9807: PPUSH
9808: LD_VAR 0 3
9812: PPUSH
9813: CALL 10062 0 2
9817: NOT
9818: IFFALSE 9877
// repeat engine := _engine [ 1 ] ;
9820: LD_ADDR_VAR 0 3
9824: PUSH
9825: LD_VAR 0 11
9829: PUSH
9830: LD_INT 1
9832: ARRAY
9833: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9834: LD_ADDR_VAR 0 11
9838: PUSH
9839: LD_VAR 0 11
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: CALL_OW 3
9851: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9852: LD_VAR 0 2
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: CALL 10062 0 2
9866: PUSH
9867: LD_VAR 0 11
9871: PUSH
9872: EMPTY
9873: EQUAL
9874: OR
9875: IFFALSE 9820
// if not control in _control then
9877: LD_VAR 0 4
9881: PUSH
9882: LD_VAR 0 12
9886: IN
9887: NOT
9888: IFFALSE 9914
// control := _control [ rand ( 1 , _control ) ] ;
9890: LD_ADDR_VAR 0 4
9894: PUSH
9895: LD_VAR 0 12
9899: PUSH
9900: LD_INT 1
9902: PPUSH
9903: LD_VAR 0 12
9907: PPUSH
9908: CALL_OW 12
9912: ARRAY
9913: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9914: LD_VAR 0 2
9918: PPUSH
9919: LD_VAR 0 5
9923: PPUSH
9924: CALL 10282 0 2
9928: NOT
9929: IFFALSE 9988
// repeat weapon := _weapon [ 1 ] ;
9931: LD_ADDR_VAR 0 5
9935: PUSH
9936: LD_VAR 0 10
9940: PUSH
9941: LD_INT 1
9943: ARRAY
9944: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9945: LD_ADDR_VAR 0 10
9949: PUSH
9950: LD_VAR 0 10
9954: PPUSH
9955: LD_INT 1
9957: PPUSH
9958: CALL_OW 3
9962: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9963: LD_VAR 0 2
9967: PPUSH
9968: LD_VAR 0 5
9972: PPUSH
9973: CALL 10282 0 2
9977: PUSH
9978: LD_VAR 0 10
9982: PUSH
9983: EMPTY
9984: EQUAL
9985: OR
9986: IFFALSE 9931
// result := [ ] ;
9988: LD_ADDR_VAR 0 6
9992: PUSH
9993: EMPTY
9994: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9995: LD_VAR 0 1
9999: PPUSH
10000: LD_VAR 0 2
10004: PPUSH
10005: LD_VAR 0 3
10009: PPUSH
10010: LD_VAR 0 4
10014: PPUSH
10015: LD_VAR 0 5
10019: PPUSH
10020: CALL_OW 448
10024: IFFALSE 10057
// result := [ chassis , engine , control , weapon ] ;
10026: LD_ADDR_VAR 0 6
10030: PUSH
10031: LD_VAR 0 2
10035: PUSH
10036: LD_VAR 0 3
10040: PUSH
10041: LD_VAR 0 4
10045: PUSH
10046: LD_VAR 0 5
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: ST_TO_ADDR
// end ;
10057: LD_VAR 0 6
10061: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
10062: LD_INT 0
10064: PPUSH
// if not chassis or not engine then
10065: LD_VAR 0 1
10069: NOT
10070: PUSH
10071: LD_VAR 0 2
10075: NOT
10076: OR
10077: IFFALSE 10081
// exit ;
10079: GO 10277
// case engine of engine_solar :
10081: LD_VAR 0 2
10085: PUSH
10086: LD_INT 2
10088: DOUBLE
10089: EQUAL
10090: IFTRUE 10094
10092: GO 10132
10094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
10095: LD_ADDR_VAR 0 3
10099: PUSH
10100: LD_INT 11
10102: PUSH
10103: LD_INT 12
10105: PUSH
10106: LD_INT 13
10108: PUSH
10109: LD_INT 14
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: LD_INT 2
10117: PUSH
10118: LD_INT 3
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: ST_TO_ADDR
10130: GO 10261
10132: LD_INT 1
10134: DOUBLE
10135: EQUAL
10136: IFTRUE 10140
10138: GO 10202
10140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
10141: LD_ADDR_VAR 0 3
10145: PUSH
10146: LD_INT 11
10148: PUSH
10149: LD_INT 12
10151: PUSH
10152: LD_INT 13
10154: PUSH
10155: LD_INT 14
10157: PUSH
10158: LD_INT 1
10160: PUSH
10161: LD_INT 2
10163: PUSH
10164: LD_INT 3
10166: PUSH
10167: LD_INT 4
10169: PUSH
10170: LD_INT 5
10172: PUSH
10173: LD_INT 21
10175: PUSH
10176: LD_INT 23
10178: PUSH
10179: LD_INT 22
10181: PUSH
10182: LD_INT 24
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: ST_TO_ADDR
10200: GO 10261
10202: LD_INT 3
10204: DOUBLE
10205: EQUAL
10206: IFTRUE 10210
10208: GO 10260
10210: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10211: LD_ADDR_VAR 0 3
10215: PUSH
10216: LD_INT 13
10218: PUSH
10219: LD_INT 14
10221: PUSH
10222: LD_INT 2
10224: PUSH
10225: LD_INT 3
10227: PUSH
10228: LD_INT 4
10230: PUSH
10231: LD_INT 5
10233: PUSH
10234: LD_INT 21
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_INT 23
10242: PUSH
10243: LD_INT 24
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: ST_TO_ADDR
10258: GO 10261
10260: POP
// result := ( chassis in result ) ;
10261: LD_ADDR_VAR 0 3
10265: PUSH
10266: LD_VAR 0 1
10270: PUSH
10271: LD_VAR 0 3
10275: IN
10276: ST_TO_ADDR
// end ;
10277: LD_VAR 0 3
10281: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
10282: LD_INT 0
10284: PPUSH
// if not chassis or not weapon then
10285: LD_VAR 0 1
10289: NOT
10290: PUSH
10291: LD_VAR 0 2
10295: NOT
10296: OR
10297: IFFALSE 10301
// exit ;
10299: GO 11363
// case weapon of us_machine_gun :
10301: LD_VAR 0 2
10305: PUSH
10306: LD_INT 2
10308: DOUBLE
10309: EQUAL
10310: IFTRUE 10314
10312: GO 10344
10314: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
10315: LD_ADDR_VAR 0 3
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: LD_INT 3
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: LD_INT 5
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: ST_TO_ADDR
10342: GO 11347
10344: LD_INT 3
10346: DOUBLE
10347: EQUAL
10348: IFTRUE 10352
10350: GO 10382
10352: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
10353: LD_ADDR_VAR 0 3
10357: PUSH
10358: LD_INT 1
10360: PUSH
10361: LD_INT 2
10363: PUSH
10364: LD_INT 3
10366: PUSH
10367: LD_INT 4
10369: PUSH
10370: LD_INT 5
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
10380: GO 11347
10382: LD_INT 11
10384: DOUBLE
10385: EQUAL
10386: IFTRUE 10390
10388: GO 10420
10390: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
10391: LD_ADDR_VAR 0 3
10395: PUSH
10396: LD_INT 1
10398: PUSH
10399: LD_INT 2
10401: PUSH
10402: LD_INT 3
10404: PUSH
10405: LD_INT 4
10407: PUSH
10408: LD_INT 5
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: ST_TO_ADDR
10418: GO 11347
10420: LD_INT 4
10422: DOUBLE
10423: EQUAL
10424: IFTRUE 10428
10426: GO 10454
10428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
10429: LD_ADDR_VAR 0 3
10433: PUSH
10434: LD_INT 2
10436: PUSH
10437: LD_INT 3
10439: PUSH
10440: LD_INT 4
10442: PUSH
10443: LD_INT 5
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: ST_TO_ADDR
10452: GO 11347
10454: LD_INT 5
10456: DOUBLE
10457: EQUAL
10458: IFTRUE 10462
10460: GO 10488
10462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
10463: LD_ADDR_VAR 0 3
10467: PUSH
10468: LD_INT 2
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: LD_INT 4
10476: PUSH
10477: LD_INT 5
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: ST_TO_ADDR
10486: GO 11347
10488: LD_INT 9
10490: DOUBLE
10491: EQUAL
10492: IFTRUE 10496
10494: GO 10522
10496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
10497: LD_ADDR_VAR 0 3
10501: PUSH
10502: LD_INT 2
10504: PUSH
10505: LD_INT 3
10507: PUSH
10508: LD_INT 4
10510: PUSH
10511: LD_INT 5
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: ST_TO_ADDR
10520: GO 11347
10522: LD_INT 7
10524: DOUBLE
10525: EQUAL
10526: IFTRUE 10530
10528: GO 10556
10530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
10531: LD_ADDR_VAR 0 3
10535: PUSH
10536: LD_INT 2
10538: PUSH
10539: LD_INT 3
10541: PUSH
10542: LD_INT 4
10544: PUSH
10545: LD_INT 5
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: ST_TO_ADDR
10554: GO 11347
10556: LD_INT 12
10558: DOUBLE
10559: EQUAL
10560: IFTRUE 10564
10562: GO 10590
10564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10565: LD_ADDR_VAR 0 3
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: LD_INT 3
10575: PUSH
10576: LD_INT 4
10578: PUSH
10579: LD_INT 5
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: ST_TO_ADDR
10588: GO 11347
10590: LD_INT 13
10592: DOUBLE
10593: EQUAL
10594: IFTRUE 10598
10596: GO 10624
10598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10599: LD_ADDR_VAR 0 3
10603: PUSH
10604: LD_INT 2
10606: PUSH
10607: LD_INT 3
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: LD_INT 5
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: ST_TO_ADDR
10622: GO 11347
10624: LD_INT 14
10626: DOUBLE
10627: EQUAL
10628: IFTRUE 10632
10630: GO 10650
10632: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10633: LD_ADDR_VAR 0 3
10637: PUSH
10638: LD_INT 4
10640: PUSH
10641: LD_INT 5
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: ST_TO_ADDR
10648: GO 11347
10650: LD_INT 6
10652: DOUBLE
10653: EQUAL
10654: IFTRUE 10658
10656: GO 10676
10658: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10659: LD_ADDR_VAR 0 3
10663: PUSH
10664: LD_INT 4
10666: PUSH
10667: LD_INT 5
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: ST_TO_ADDR
10674: GO 11347
10676: LD_INT 10
10678: DOUBLE
10679: EQUAL
10680: IFTRUE 10684
10682: GO 10702
10684: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10685: LD_ADDR_VAR 0 3
10689: PUSH
10690: LD_INT 4
10692: PUSH
10693: LD_INT 5
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: ST_TO_ADDR
10700: GO 11347
10702: LD_INT 22
10704: DOUBLE
10705: EQUAL
10706: IFTRUE 10710
10708: GO 10736
10710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10711: LD_ADDR_VAR 0 3
10715: PUSH
10716: LD_INT 11
10718: PUSH
10719: LD_INT 12
10721: PUSH
10722: LD_INT 13
10724: PUSH
10725: LD_INT 14
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: ST_TO_ADDR
10734: GO 11347
10736: LD_INT 23
10738: DOUBLE
10739: EQUAL
10740: IFTRUE 10744
10742: GO 10770
10744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10745: LD_ADDR_VAR 0 3
10749: PUSH
10750: LD_INT 11
10752: PUSH
10753: LD_INT 12
10755: PUSH
10756: LD_INT 13
10758: PUSH
10759: LD_INT 14
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: ST_TO_ADDR
10768: GO 11347
10770: LD_INT 24
10772: DOUBLE
10773: EQUAL
10774: IFTRUE 10778
10776: GO 10804
10778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10779: LD_ADDR_VAR 0 3
10783: PUSH
10784: LD_INT 11
10786: PUSH
10787: LD_INT 12
10789: PUSH
10790: LD_INT 13
10792: PUSH
10793: LD_INT 14
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: ST_TO_ADDR
10802: GO 11347
10804: LD_INT 30
10806: DOUBLE
10807: EQUAL
10808: IFTRUE 10812
10810: GO 10838
10812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10813: LD_ADDR_VAR 0 3
10817: PUSH
10818: LD_INT 11
10820: PUSH
10821: LD_INT 12
10823: PUSH
10824: LD_INT 13
10826: PUSH
10827: LD_INT 14
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: ST_TO_ADDR
10836: GO 11347
10838: LD_INT 25
10840: DOUBLE
10841: EQUAL
10842: IFTRUE 10846
10844: GO 10864
10846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10847: LD_ADDR_VAR 0 3
10851: PUSH
10852: LD_INT 13
10854: PUSH
10855: LD_INT 14
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: ST_TO_ADDR
10862: GO 11347
10864: LD_INT 27
10866: DOUBLE
10867: EQUAL
10868: IFTRUE 10872
10870: GO 10890
10872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10873: LD_ADDR_VAR 0 3
10877: PUSH
10878: LD_INT 13
10880: PUSH
10881: LD_INT 14
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: ST_TO_ADDR
10888: GO 11347
10890: LD_EXP 43
10894: DOUBLE
10895: EQUAL
10896: IFTRUE 10900
10898: GO 10926
10900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10901: LD_ADDR_VAR 0 3
10905: PUSH
10906: LD_INT 11
10908: PUSH
10909: LD_INT 12
10911: PUSH
10912: LD_INT 13
10914: PUSH
10915: LD_INT 14
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: ST_TO_ADDR
10924: GO 11347
10926: LD_INT 28
10928: DOUBLE
10929: EQUAL
10930: IFTRUE 10934
10932: GO 10952
10934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10935: LD_ADDR_VAR 0 3
10939: PUSH
10940: LD_INT 13
10942: PUSH
10943: LD_INT 14
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: ST_TO_ADDR
10950: GO 11347
10952: LD_INT 29
10954: DOUBLE
10955: EQUAL
10956: IFTRUE 10960
10958: GO 10978
10960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10961: LD_ADDR_VAR 0 3
10965: PUSH
10966: LD_INT 13
10968: PUSH
10969: LD_INT 14
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: ST_TO_ADDR
10976: GO 11347
10978: LD_INT 31
10980: DOUBLE
10981: EQUAL
10982: IFTRUE 10986
10984: GO 11004
10986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10987: LD_ADDR_VAR 0 3
10991: PUSH
10992: LD_INT 13
10994: PUSH
10995: LD_INT 14
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: ST_TO_ADDR
11002: GO 11347
11004: LD_INT 26
11006: DOUBLE
11007: EQUAL
11008: IFTRUE 11012
11010: GO 11030
11012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
11013: LD_ADDR_VAR 0 3
11017: PUSH
11018: LD_INT 13
11020: PUSH
11021: LD_INT 14
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: ST_TO_ADDR
11028: GO 11347
11030: LD_INT 42
11032: DOUBLE
11033: EQUAL
11034: IFTRUE 11038
11036: GO 11064
11038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
11039: LD_ADDR_VAR 0 3
11043: PUSH
11044: LD_INT 21
11046: PUSH
11047: LD_INT 22
11049: PUSH
11050: LD_INT 23
11052: PUSH
11053: LD_INT 24
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: ST_TO_ADDR
11062: GO 11347
11064: LD_INT 43
11066: DOUBLE
11067: EQUAL
11068: IFTRUE 11072
11070: GO 11098
11072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
11073: LD_ADDR_VAR 0 3
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_INT 23
11086: PUSH
11087: LD_INT 24
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: ST_TO_ADDR
11096: GO 11347
11098: LD_INT 44
11100: DOUBLE
11101: EQUAL
11102: IFTRUE 11106
11104: GO 11132
11106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
11107: LD_ADDR_VAR 0 3
11111: PUSH
11112: LD_INT 21
11114: PUSH
11115: LD_INT 22
11117: PUSH
11118: LD_INT 23
11120: PUSH
11121: LD_INT 24
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: ST_TO_ADDR
11130: GO 11347
11132: LD_INT 45
11134: DOUBLE
11135: EQUAL
11136: IFTRUE 11140
11138: GO 11166
11140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
11141: LD_ADDR_VAR 0 3
11145: PUSH
11146: LD_INT 21
11148: PUSH
11149: LD_INT 22
11151: PUSH
11152: LD_INT 23
11154: PUSH
11155: LD_INT 24
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: ST_TO_ADDR
11164: GO 11347
11166: LD_INT 49
11168: DOUBLE
11169: EQUAL
11170: IFTRUE 11174
11172: GO 11200
11174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
11175: LD_ADDR_VAR 0 3
11179: PUSH
11180: LD_INT 21
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_INT 23
11188: PUSH
11189: LD_INT 24
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: ST_TO_ADDR
11198: GO 11347
11200: LD_INT 51
11202: DOUBLE
11203: EQUAL
11204: IFTRUE 11208
11206: GO 11234
11208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
11209: LD_ADDR_VAR 0 3
11213: PUSH
11214: LD_INT 21
11216: PUSH
11217: LD_INT 22
11219: PUSH
11220: LD_INT 23
11222: PUSH
11223: LD_INT 24
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: ST_TO_ADDR
11232: GO 11347
11234: LD_INT 52
11236: DOUBLE
11237: EQUAL
11238: IFTRUE 11242
11240: GO 11268
11242: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
11243: LD_ADDR_VAR 0 3
11247: PUSH
11248: LD_INT 21
11250: PUSH
11251: LD_INT 22
11253: PUSH
11254: LD_INT 23
11256: PUSH
11257: LD_INT 24
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: ST_TO_ADDR
11266: GO 11347
11268: LD_INT 53
11270: DOUBLE
11271: EQUAL
11272: IFTRUE 11276
11274: GO 11294
11276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
11277: LD_ADDR_VAR 0 3
11281: PUSH
11282: LD_INT 23
11284: PUSH
11285: LD_INT 24
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: ST_TO_ADDR
11292: GO 11347
11294: LD_INT 46
11296: DOUBLE
11297: EQUAL
11298: IFTRUE 11302
11300: GO 11320
11302: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: LD_INT 23
11310: PUSH
11311: LD_INT 24
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: ST_TO_ADDR
11318: GO 11347
11320: LD_INT 47
11322: DOUBLE
11323: EQUAL
11324: IFTRUE 11328
11326: GO 11346
11328: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11329: LD_ADDR_VAR 0 3
11333: PUSH
11334: LD_INT 23
11336: PUSH
11337: LD_INT 24
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: ST_TO_ADDR
11344: GO 11347
11346: POP
// result := ( chassis in result ) ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: LD_VAR 0 1
11356: PUSH
11357: LD_VAR 0 3
11361: IN
11362: ST_TO_ADDR
// end ;
11363: LD_VAR 0 3
11367: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
11368: LD_INT 0
11370: PPUSH
11371: PPUSH
11372: PPUSH
11373: PPUSH
11374: PPUSH
11375: PPUSH
11376: PPUSH
// result := array ;
11377: LD_ADDR_VAR 0 5
11381: PUSH
11382: LD_VAR 0 1
11386: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
11387: LD_VAR 0 1
11391: NOT
11392: PUSH
11393: LD_VAR 0 2
11397: NOT
11398: OR
11399: PUSH
11400: LD_VAR 0 3
11404: NOT
11405: OR
11406: PUSH
11407: LD_VAR 0 2
11411: PUSH
11412: LD_VAR 0 1
11416: GREATER
11417: OR
11418: PUSH
11419: LD_VAR 0 3
11423: PUSH
11424: LD_VAR 0 1
11428: GREATER
11429: OR
11430: IFFALSE 11434
// exit ;
11432: GO 11730
// if direction then
11434: LD_VAR 0 4
11438: IFFALSE 11502
// begin d := 1 ;
11440: LD_ADDR_VAR 0 9
11444: PUSH
11445: LD_INT 1
11447: ST_TO_ADDR
// if i_from > i_to then
11448: LD_VAR 0 2
11452: PUSH
11453: LD_VAR 0 3
11457: GREATER
11458: IFFALSE 11484
// length := ( array - i_from ) + i_to else
11460: LD_ADDR_VAR 0 11
11464: PUSH
11465: LD_VAR 0 1
11469: PUSH
11470: LD_VAR 0 2
11474: MINUS
11475: PUSH
11476: LD_VAR 0 3
11480: PLUS
11481: ST_TO_ADDR
11482: GO 11500
// length := i_to - i_from ;
11484: LD_ADDR_VAR 0 11
11488: PUSH
11489: LD_VAR 0 3
11493: PUSH
11494: LD_VAR 0 2
11498: MINUS
11499: ST_TO_ADDR
// end else
11500: GO 11563
// begin d := - 1 ;
11502: LD_ADDR_VAR 0 9
11506: PUSH
11507: LD_INT 1
11509: NEG
11510: ST_TO_ADDR
// if i_from > i_to then
11511: LD_VAR 0 2
11515: PUSH
11516: LD_VAR 0 3
11520: GREATER
11521: IFFALSE 11541
// length := i_from - i_to else
11523: LD_ADDR_VAR 0 11
11527: PUSH
11528: LD_VAR 0 2
11532: PUSH
11533: LD_VAR 0 3
11537: MINUS
11538: ST_TO_ADDR
11539: GO 11563
// length := ( array - i_to ) + i_from ;
11541: LD_ADDR_VAR 0 11
11545: PUSH
11546: LD_VAR 0 1
11550: PUSH
11551: LD_VAR 0 3
11555: MINUS
11556: PUSH
11557: LD_VAR 0 2
11561: PLUS
11562: ST_TO_ADDR
// end ; if not length then
11563: LD_VAR 0 11
11567: NOT
11568: IFFALSE 11572
// exit ;
11570: GO 11730
// tmp := array ;
11572: LD_ADDR_VAR 0 10
11576: PUSH
11577: LD_VAR 0 1
11581: ST_TO_ADDR
// for i = 1 to length do
11582: LD_ADDR_VAR 0 6
11586: PUSH
11587: DOUBLE
11588: LD_INT 1
11590: DEC
11591: ST_TO_ADDR
11592: LD_VAR 0 11
11596: PUSH
11597: FOR_TO
11598: IFFALSE 11718
// begin for j = 1 to array do
11600: LD_ADDR_VAR 0 7
11604: PUSH
11605: DOUBLE
11606: LD_INT 1
11608: DEC
11609: ST_TO_ADDR
11610: LD_VAR 0 1
11614: PUSH
11615: FOR_TO
11616: IFFALSE 11704
// begin k := j + d ;
11618: LD_ADDR_VAR 0 8
11622: PUSH
11623: LD_VAR 0 7
11627: PUSH
11628: LD_VAR 0 9
11632: PLUS
11633: ST_TO_ADDR
// if k > array then
11634: LD_VAR 0 8
11638: PUSH
11639: LD_VAR 0 1
11643: GREATER
11644: IFFALSE 11654
// k := 1 ;
11646: LD_ADDR_VAR 0 8
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if not k then
11654: LD_VAR 0 8
11658: NOT
11659: IFFALSE 11671
// k := array ;
11661: LD_ADDR_VAR 0 8
11665: PUSH
11666: LD_VAR 0 1
11670: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11671: LD_ADDR_VAR 0 10
11675: PUSH
11676: LD_VAR 0 10
11680: PPUSH
11681: LD_VAR 0 8
11685: PPUSH
11686: LD_VAR 0 1
11690: PUSH
11691: LD_VAR 0 7
11695: ARRAY
11696: PPUSH
11697: CALL_OW 1
11701: ST_TO_ADDR
// end ;
11702: GO 11615
11704: POP
11705: POP
// array := tmp ;
11706: LD_ADDR_VAR 0 1
11710: PUSH
11711: LD_VAR 0 10
11715: ST_TO_ADDR
// end ;
11716: GO 11597
11718: POP
11719: POP
// result := array ;
11720: LD_ADDR_VAR 0 5
11724: PUSH
11725: LD_VAR 0 1
11729: ST_TO_ADDR
// end ;
11730: LD_VAR 0 5
11734: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11735: LD_INT 0
11737: PPUSH
11738: PPUSH
// result := 0 ;
11739: LD_ADDR_VAR 0 3
11743: PUSH
11744: LD_INT 0
11746: ST_TO_ADDR
// if not array or not value in array then
11747: LD_VAR 0 1
11751: NOT
11752: PUSH
11753: LD_VAR 0 2
11757: PUSH
11758: LD_VAR 0 1
11762: IN
11763: NOT
11764: OR
11765: IFFALSE 11769
// exit ;
11767: GO 11823
// for i = 1 to array do
11769: LD_ADDR_VAR 0 4
11773: PUSH
11774: DOUBLE
11775: LD_INT 1
11777: DEC
11778: ST_TO_ADDR
11779: LD_VAR 0 1
11783: PUSH
11784: FOR_TO
11785: IFFALSE 11821
// if value = array [ i ] then
11787: LD_VAR 0 2
11791: PUSH
11792: LD_VAR 0 1
11796: PUSH
11797: LD_VAR 0 4
11801: ARRAY
11802: EQUAL
11803: IFFALSE 11819
// begin result := i ;
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: LD_VAR 0 4
11814: ST_TO_ADDR
// exit ;
11815: POP
11816: POP
11817: GO 11823
// end ;
11819: GO 11784
11821: POP
11822: POP
// end ;
11823: LD_VAR 0 3
11827: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11828: LD_INT 0
11830: PPUSH
// vc_chassis := chassis ;
11831: LD_ADDR_OWVAR 37
11835: PUSH
11836: LD_VAR 0 1
11840: ST_TO_ADDR
// vc_engine := engine ;
11841: LD_ADDR_OWVAR 39
11845: PUSH
11846: LD_VAR 0 2
11850: ST_TO_ADDR
// vc_control := control ;
11851: LD_ADDR_OWVAR 38
11855: PUSH
11856: LD_VAR 0 3
11860: ST_TO_ADDR
// vc_weapon := weapon ;
11861: LD_ADDR_OWVAR 40
11865: PUSH
11866: LD_VAR 0 4
11870: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11871: LD_ADDR_OWVAR 41
11875: PUSH
11876: LD_VAR 0 5
11880: ST_TO_ADDR
// end ;
11881: LD_VAR 0 6
11885: RET
// export function WantPlant ( unit ) ; var task ; begin
11886: LD_INT 0
11888: PPUSH
11889: PPUSH
// result := false ;
11890: LD_ADDR_VAR 0 2
11894: PUSH
11895: LD_INT 0
11897: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11898: LD_ADDR_VAR 0 3
11902: PUSH
11903: LD_VAR 0 1
11907: PPUSH
11908: CALL_OW 437
11912: ST_TO_ADDR
// if task then
11913: LD_VAR 0 3
11917: IFFALSE 11945
// if task [ 1 ] [ 1 ] = p then
11919: LD_VAR 0 3
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PUSH
11928: LD_INT 1
11930: ARRAY
11931: PUSH
11932: LD_STRING p
11934: EQUAL
11935: IFFALSE 11945
// result := true ;
11937: LD_ADDR_VAR 0 2
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// end ;
11945: LD_VAR 0 2
11949: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11950: LD_INT 0
11952: PPUSH
11953: PPUSH
11954: PPUSH
11955: PPUSH
// if pos < 1 then
11956: LD_VAR 0 2
11960: PUSH
11961: LD_INT 1
11963: LESS
11964: IFFALSE 11968
// exit ;
11966: GO 12271
// if pos = 1 then
11968: LD_VAR 0 2
11972: PUSH
11973: LD_INT 1
11975: EQUAL
11976: IFFALSE 12009
// result := Replace ( arr , pos [ 1 ] , value ) else
11978: LD_ADDR_VAR 0 4
11982: PUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_VAR 0 2
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: CALL_OW 1
12006: ST_TO_ADDR
12007: GO 12271
// begin tmp := arr ;
12009: LD_ADDR_VAR 0 6
12013: PUSH
12014: LD_VAR 0 1
12018: ST_TO_ADDR
// s_arr := [ tmp ] ;
12019: LD_ADDR_VAR 0 7
12023: PUSH
12024: LD_VAR 0 6
12028: PUSH
12029: EMPTY
12030: LIST
12031: ST_TO_ADDR
// for i = 1 to pos - 1 do
12032: LD_ADDR_VAR 0 5
12036: PUSH
12037: DOUBLE
12038: LD_INT 1
12040: DEC
12041: ST_TO_ADDR
12042: LD_VAR 0 2
12046: PUSH
12047: LD_INT 1
12049: MINUS
12050: PUSH
12051: FOR_TO
12052: IFFALSE 12097
// begin tmp := tmp [ pos [ i ] ] ;
12054: LD_ADDR_VAR 0 6
12058: PUSH
12059: LD_VAR 0 6
12063: PUSH
12064: LD_VAR 0 2
12068: PUSH
12069: LD_VAR 0 5
12073: ARRAY
12074: ARRAY
12075: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
12076: LD_ADDR_VAR 0 7
12080: PUSH
12081: LD_VAR 0 7
12085: PUSH
12086: LD_VAR 0 6
12090: PUSH
12091: EMPTY
12092: LIST
12093: ADD
12094: ST_TO_ADDR
// end ;
12095: GO 12051
12097: POP
12098: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
12099: LD_ADDR_VAR 0 6
12103: PUSH
12104: LD_VAR 0 6
12108: PPUSH
12109: LD_VAR 0 2
12113: PUSH
12114: LD_VAR 0 2
12118: ARRAY
12119: PPUSH
12120: LD_VAR 0 3
12124: PPUSH
12125: CALL_OW 1
12129: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
12130: LD_ADDR_VAR 0 7
12134: PUSH
12135: LD_VAR 0 7
12139: PPUSH
12140: LD_VAR 0 7
12144: PPUSH
12145: LD_VAR 0 6
12149: PPUSH
12150: CALL_OW 1
12154: ST_TO_ADDR
// for i = s_arr downto 2 do
12155: LD_ADDR_VAR 0 5
12159: PUSH
12160: DOUBLE
12161: LD_VAR 0 7
12165: INC
12166: ST_TO_ADDR
12167: LD_INT 2
12169: PUSH
12170: FOR_DOWNTO
12171: IFFALSE 12255
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
12173: LD_ADDR_VAR 0 6
12177: PUSH
12178: LD_VAR 0 7
12182: PUSH
12183: LD_VAR 0 5
12187: PUSH
12188: LD_INT 1
12190: MINUS
12191: ARRAY
12192: PPUSH
12193: LD_VAR 0 2
12197: PUSH
12198: LD_VAR 0 5
12202: PUSH
12203: LD_INT 1
12205: MINUS
12206: ARRAY
12207: PPUSH
12208: LD_VAR 0 7
12212: PUSH
12213: LD_VAR 0 5
12217: ARRAY
12218: PPUSH
12219: CALL_OW 1
12223: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
12224: LD_ADDR_VAR 0 7
12228: PUSH
12229: LD_VAR 0 7
12233: PPUSH
12234: LD_VAR 0 5
12238: PUSH
12239: LD_INT 1
12241: MINUS
12242: PPUSH
12243: LD_VAR 0 6
12247: PPUSH
12248: CALL_OW 1
12252: ST_TO_ADDR
// end ;
12253: GO 12170
12255: POP
12256: POP
// result := s_arr [ 1 ] ;
12257: LD_ADDR_VAR 0 4
12261: PUSH
12262: LD_VAR 0 7
12266: PUSH
12267: LD_INT 1
12269: ARRAY
12270: ST_TO_ADDR
// end ; end ;
12271: LD_VAR 0 4
12275: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
12276: LD_INT 0
12278: PPUSH
12279: PPUSH
// if not list then
12280: LD_VAR 0 1
12284: NOT
12285: IFFALSE 12289
// exit ;
12287: GO 12380
// i := list [ pos1 ] ;
12289: LD_ADDR_VAR 0 5
12293: PUSH
12294: LD_VAR 0 1
12298: PUSH
12299: LD_VAR 0 2
12303: ARRAY
12304: ST_TO_ADDR
// if not i then
12305: LD_VAR 0 5
12309: NOT
12310: IFFALSE 12314
// exit ;
12312: GO 12380
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
12314: LD_ADDR_VAR 0 1
12318: PUSH
12319: LD_VAR 0 1
12323: PPUSH
12324: LD_VAR 0 2
12328: PPUSH
12329: LD_VAR 0 1
12333: PUSH
12334: LD_VAR 0 3
12338: ARRAY
12339: PPUSH
12340: CALL_OW 1
12344: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_VAR 0 1
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_VAR 0 5
12364: PPUSH
12365: CALL_OW 1
12369: ST_TO_ADDR
// result := list ;
12370: LD_ADDR_VAR 0 4
12374: PUSH
12375: LD_VAR 0 1
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 4
12384: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
12385: LD_INT 0
12387: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
12388: LD_ADDR_VAR 0 5
12392: PUSH
12393: LD_VAR 0 1
12397: PPUSH
12398: CALL_OW 250
12402: PPUSH
12403: LD_VAR 0 1
12407: PPUSH
12408: CALL_OW 251
12412: PPUSH
12413: LD_VAR 0 2
12417: PPUSH
12418: LD_VAR 0 3
12422: PPUSH
12423: LD_VAR 0 4
12427: PPUSH
12428: CALL 12438 0 5
12432: ST_TO_ADDR
// end ;
12433: LD_VAR 0 5
12437: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12438: LD_INT 0
12440: PPUSH
12441: PPUSH
12442: PPUSH
12443: PPUSH
// if not list then
12444: LD_VAR 0 3
12448: NOT
12449: IFFALSE 12453
// exit ;
12451: GO 12841
// result := [ ] ;
12453: LD_ADDR_VAR 0 6
12457: PUSH
12458: EMPTY
12459: ST_TO_ADDR
// for i in list do
12460: LD_ADDR_VAR 0 7
12464: PUSH
12465: LD_VAR 0 3
12469: PUSH
12470: FOR_IN
12471: IFFALSE 12673
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12473: LD_ADDR_VAR 0 9
12477: PUSH
12478: LD_VAR 0 7
12482: PPUSH
12483: LD_VAR 0 1
12487: PPUSH
12488: LD_VAR 0 2
12492: PPUSH
12493: CALL_OW 297
12497: ST_TO_ADDR
// if not result then
12498: LD_VAR 0 6
12502: NOT
12503: IFFALSE 12529
// result := [ [ i , tmp ] ] else
12505: LD_ADDR_VAR 0 6
12509: PUSH
12510: LD_VAR 0 7
12514: PUSH
12515: LD_VAR 0 9
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: ST_TO_ADDR
12527: GO 12671
// begin if result [ result ] [ 2 ] < tmp then
12529: LD_VAR 0 6
12533: PUSH
12534: LD_VAR 0 6
12538: ARRAY
12539: PUSH
12540: LD_INT 2
12542: ARRAY
12543: PUSH
12544: LD_VAR 0 9
12548: LESS
12549: IFFALSE 12591
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12551: LD_ADDR_VAR 0 6
12555: PUSH
12556: LD_VAR 0 6
12560: PPUSH
12561: LD_VAR 0 6
12565: PUSH
12566: LD_INT 1
12568: PLUS
12569: PPUSH
12570: LD_VAR 0 7
12574: PUSH
12575: LD_VAR 0 9
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PPUSH
12584: CALL_OW 2
12588: ST_TO_ADDR
12589: GO 12671
// for j = 1 to result do
12591: LD_ADDR_VAR 0 8
12595: PUSH
12596: DOUBLE
12597: LD_INT 1
12599: DEC
12600: ST_TO_ADDR
12601: LD_VAR 0 6
12605: PUSH
12606: FOR_TO
12607: IFFALSE 12669
// begin if tmp < result [ j ] [ 2 ] then
12609: LD_VAR 0 9
12613: PUSH
12614: LD_VAR 0 6
12618: PUSH
12619: LD_VAR 0 8
12623: ARRAY
12624: PUSH
12625: LD_INT 2
12627: ARRAY
12628: LESS
12629: IFFALSE 12667
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12631: LD_ADDR_VAR 0 6
12635: PUSH
12636: LD_VAR 0 6
12640: PPUSH
12641: LD_VAR 0 8
12645: PPUSH
12646: LD_VAR 0 7
12650: PUSH
12651: LD_VAR 0 9
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 2
12664: ST_TO_ADDR
// break ;
12665: GO 12669
// end ; end ;
12667: GO 12606
12669: POP
12670: POP
// end ; end ;
12671: GO 12470
12673: POP
12674: POP
// if result and not asc then
12675: LD_VAR 0 6
12679: PUSH
12680: LD_VAR 0 4
12684: NOT
12685: AND
12686: IFFALSE 12761
// begin tmp := result ;
12688: LD_ADDR_VAR 0 9
12692: PUSH
12693: LD_VAR 0 6
12697: ST_TO_ADDR
// for i = tmp downto 1 do
12698: LD_ADDR_VAR 0 7
12702: PUSH
12703: DOUBLE
12704: LD_VAR 0 9
12708: INC
12709: ST_TO_ADDR
12710: LD_INT 1
12712: PUSH
12713: FOR_DOWNTO
12714: IFFALSE 12759
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12716: LD_ADDR_VAR 0 6
12720: PUSH
12721: LD_VAR 0 6
12725: PPUSH
12726: LD_VAR 0 9
12730: PUSH
12731: LD_VAR 0 7
12735: MINUS
12736: PUSH
12737: LD_INT 1
12739: PLUS
12740: PPUSH
12741: LD_VAR 0 9
12745: PUSH
12746: LD_VAR 0 7
12750: ARRAY
12751: PPUSH
12752: CALL_OW 1
12756: ST_TO_ADDR
12757: GO 12713
12759: POP
12760: POP
// end ; tmp := [ ] ;
12761: LD_ADDR_VAR 0 9
12765: PUSH
12766: EMPTY
12767: ST_TO_ADDR
// if mode then
12768: LD_VAR 0 5
12772: IFFALSE 12841
// begin for i = 1 to result do
12774: LD_ADDR_VAR 0 7
12778: PUSH
12779: DOUBLE
12780: LD_INT 1
12782: DEC
12783: ST_TO_ADDR
12784: LD_VAR 0 6
12788: PUSH
12789: FOR_TO
12790: IFFALSE 12829
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12792: LD_ADDR_VAR 0 9
12796: PUSH
12797: LD_VAR 0 9
12801: PPUSH
12802: LD_VAR 0 7
12806: PPUSH
12807: LD_VAR 0 6
12811: PUSH
12812: LD_VAR 0 7
12816: ARRAY
12817: PUSH
12818: LD_INT 1
12820: ARRAY
12821: PPUSH
12822: CALL_OW 1
12826: ST_TO_ADDR
12827: GO 12789
12829: POP
12830: POP
// result := tmp ;
12831: LD_ADDR_VAR 0 6
12835: PUSH
12836: LD_VAR 0 9
12840: ST_TO_ADDR
// end ; end ;
12841: LD_VAR 0 6
12845: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12846: LD_INT 0
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
12852: PPUSH
12853: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12854: LD_ADDR_VAR 0 5
12858: PUSH
12859: LD_INT 0
12861: PUSH
12862: LD_INT 0
12864: PUSH
12865: LD_INT 0
12867: PUSH
12868: EMPTY
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: ST_TO_ADDR
// if not x or not y then
12876: LD_VAR 0 2
12880: NOT
12881: PUSH
12882: LD_VAR 0 3
12886: NOT
12887: OR
12888: IFFALSE 12892
// exit ;
12890: GO 14544
// if not range then
12892: LD_VAR 0 4
12896: NOT
12897: IFFALSE 12907
// range := 10 ;
12899: LD_ADDR_VAR 0 4
12903: PUSH
12904: LD_INT 10
12906: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12907: LD_ADDR_VAR 0 8
12911: PUSH
12912: LD_INT 81
12914: PUSH
12915: LD_VAR 0 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 92
12926: PUSH
12927: LD_VAR 0 2
12931: PUSH
12932: LD_VAR 0 3
12936: PUSH
12937: LD_VAR 0 4
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 3
12950: PUSH
12951: LD_INT 21
12953: PUSH
12954: LD_INT 3
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 69
12974: ST_TO_ADDR
// if not tmp then
12975: LD_VAR 0 8
12979: NOT
12980: IFFALSE 12984
// exit ;
12982: GO 14544
// for i in tmp do
12984: LD_ADDR_VAR 0 6
12988: PUSH
12989: LD_VAR 0 8
12993: PUSH
12994: FOR_IN
12995: IFFALSE 14519
// begin points := [ 0 , 0 , 0 ] ;
12997: LD_ADDR_VAR 0 9
13001: PUSH
13002: LD_INT 0
13004: PUSH
13005: LD_INT 0
13007: PUSH
13008: LD_INT 0
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: ST_TO_ADDR
// bpoints := 1 ;
13016: LD_ADDR_VAR 0 10
13020: PUSH
13021: LD_INT 1
13023: ST_TO_ADDR
// case GetType ( i ) of unit_human :
13024: LD_VAR 0 6
13028: PPUSH
13029: CALL_OW 247
13033: PUSH
13034: LD_INT 1
13036: DOUBLE
13037: EQUAL
13038: IFTRUE 13042
13040: GO 13620
13042: POP
// begin if GetClass ( i ) = 1 then
13043: LD_VAR 0 6
13047: PPUSH
13048: CALL_OW 257
13052: PUSH
13053: LD_INT 1
13055: EQUAL
13056: IFFALSE 13077
// points := [ 10 , 5 , 3 ] ;
13058: LD_ADDR_VAR 0 9
13062: PUSH
13063: LD_INT 10
13065: PUSH
13066: LD_INT 5
13068: PUSH
13069: LD_INT 3
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
13077: LD_VAR 0 6
13081: PPUSH
13082: CALL_OW 257
13086: PUSH
13087: LD_INT 2
13089: PUSH
13090: LD_INT 3
13092: PUSH
13093: LD_INT 4
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: IN
13101: IFFALSE 13122
// points := [ 3 , 2 , 1 ] ;
13103: LD_ADDR_VAR 0 9
13107: PUSH
13108: LD_INT 3
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: LD_INT 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: LIST
13121: ST_TO_ADDR
// if GetClass ( i ) = 5 then
13122: LD_VAR 0 6
13126: PPUSH
13127: CALL_OW 257
13131: PUSH
13132: LD_INT 5
13134: EQUAL
13135: IFFALSE 13156
// points := [ 130 , 5 , 2 ] ;
13137: LD_ADDR_VAR 0 9
13141: PUSH
13142: LD_INT 130
13144: PUSH
13145: LD_INT 5
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: ST_TO_ADDR
// if GetClass ( i ) = 8 then
13156: LD_VAR 0 6
13160: PPUSH
13161: CALL_OW 257
13165: PUSH
13166: LD_INT 8
13168: EQUAL
13169: IFFALSE 13190
// points := [ 35 , 35 , 30 ] ;
13171: LD_ADDR_VAR 0 9
13175: PUSH
13176: LD_INT 35
13178: PUSH
13179: LD_INT 35
13181: PUSH
13182: LD_INT 30
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: ST_TO_ADDR
// if GetClass ( i ) = 9 then
13190: LD_VAR 0 6
13194: PPUSH
13195: CALL_OW 257
13199: PUSH
13200: LD_INT 9
13202: EQUAL
13203: IFFALSE 13224
// points := [ 20 , 55 , 40 ] ;
13205: LD_ADDR_VAR 0 9
13209: PUSH
13210: LD_INT 20
13212: PUSH
13213: LD_INT 55
13215: PUSH
13216: LD_INT 40
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
13224: LD_VAR 0 6
13228: PPUSH
13229: CALL_OW 257
13233: PUSH
13234: LD_INT 12
13236: PUSH
13237: LD_INT 16
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: IN
13244: IFFALSE 13265
// points := [ 5 , 3 , 2 ] ;
13246: LD_ADDR_VAR 0 9
13250: PUSH
13251: LD_INT 5
13253: PUSH
13254: LD_INT 3
13256: PUSH
13257: LD_INT 2
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: ST_TO_ADDR
// if GetClass ( i ) = 17 then
13265: LD_VAR 0 6
13269: PPUSH
13270: CALL_OW 257
13274: PUSH
13275: LD_INT 17
13277: EQUAL
13278: IFFALSE 13299
// points := [ 100 , 50 , 75 ] ;
13280: LD_ADDR_VAR 0 9
13284: PUSH
13285: LD_INT 100
13287: PUSH
13288: LD_INT 50
13290: PUSH
13291: LD_INT 75
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: ST_TO_ADDR
// if GetClass ( i ) = 15 then
13299: LD_VAR 0 6
13303: PPUSH
13304: CALL_OW 257
13308: PUSH
13309: LD_INT 15
13311: EQUAL
13312: IFFALSE 13333
// points := [ 10 , 5 , 3 ] ;
13314: LD_ADDR_VAR 0 9
13318: PUSH
13319: LD_INT 10
13321: PUSH
13322: LD_INT 5
13324: PUSH
13325: LD_INT 3
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: ST_TO_ADDR
// if GetClass ( i ) = 14 then
13333: LD_VAR 0 6
13337: PPUSH
13338: CALL_OW 257
13342: PUSH
13343: LD_INT 14
13345: EQUAL
13346: IFFALSE 13367
// points := [ 10 , 0 , 0 ] ;
13348: LD_ADDR_VAR 0 9
13352: PUSH
13353: LD_INT 10
13355: PUSH
13356: LD_INT 0
13358: PUSH
13359: LD_INT 0
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: LIST
13366: ST_TO_ADDR
// if GetClass ( i ) = 11 then
13367: LD_VAR 0 6
13371: PPUSH
13372: CALL_OW 257
13376: PUSH
13377: LD_INT 11
13379: EQUAL
13380: IFFALSE 13401
// points := [ 30 , 10 , 5 ] ;
13382: LD_ADDR_VAR 0 9
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 10
13392: PUSH
13393: LD_INT 5
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
13401: LD_VAR 0 1
13405: PPUSH
13406: LD_INT 5
13408: PPUSH
13409: CALL_OW 321
13413: PUSH
13414: LD_INT 2
13416: EQUAL
13417: IFFALSE 13434
// bpoints := bpoints * 1.8 ;
13419: LD_ADDR_VAR 0 10
13423: PUSH
13424: LD_VAR 0 10
13428: PUSH
13429: LD_REAL  1.80000000000000E+0000
13432: MUL
13433: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13434: LD_VAR 0 6
13438: PPUSH
13439: CALL_OW 257
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: LD_INT 3
13452: PUSH
13453: LD_INT 4
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: IN
13462: PUSH
13463: LD_VAR 0 1
13467: PPUSH
13468: LD_INT 51
13470: PPUSH
13471: CALL_OW 321
13475: PUSH
13476: LD_INT 2
13478: EQUAL
13479: AND
13480: IFFALSE 13497
// bpoints := bpoints * 1.2 ;
13482: LD_ADDR_VAR 0 10
13486: PUSH
13487: LD_VAR 0 10
13491: PUSH
13492: LD_REAL  1.20000000000000E+0000
13495: MUL
13496: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13497: LD_VAR 0 6
13501: PPUSH
13502: CALL_OW 257
13506: PUSH
13507: LD_INT 5
13509: PUSH
13510: LD_INT 7
13512: PUSH
13513: LD_INT 9
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: IN
13521: PUSH
13522: LD_VAR 0 1
13526: PPUSH
13527: LD_INT 52
13529: PPUSH
13530: CALL_OW 321
13534: PUSH
13535: LD_INT 2
13537: EQUAL
13538: AND
13539: IFFALSE 13556
// bpoints := bpoints * 1.5 ;
13541: LD_ADDR_VAR 0 10
13545: PUSH
13546: LD_VAR 0 10
13550: PUSH
13551: LD_REAL  1.50000000000000E+0000
13554: MUL
13555: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13556: LD_VAR 0 1
13560: PPUSH
13561: LD_INT 66
13563: PPUSH
13564: CALL_OW 321
13568: PUSH
13569: LD_INT 2
13571: EQUAL
13572: IFFALSE 13589
// bpoints := bpoints * 1.1 ;
13574: LD_ADDR_VAR 0 10
13578: PUSH
13579: LD_VAR 0 10
13583: PUSH
13584: LD_REAL  1.10000000000000E+0000
13587: MUL
13588: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13589: LD_ADDR_VAR 0 10
13593: PUSH
13594: LD_VAR 0 10
13598: PUSH
13599: LD_VAR 0 6
13603: PPUSH
13604: LD_INT 1
13606: PPUSH
13607: CALL_OW 259
13611: PUSH
13612: LD_REAL  1.15000000000000E+0000
13615: MUL
13616: MUL
13617: ST_TO_ADDR
// end ; unit_vehicle :
13618: GO 14448
13620: LD_INT 2
13622: DOUBLE
13623: EQUAL
13624: IFTRUE 13628
13626: GO 14436
13628: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13629: LD_VAR 0 6
13633: PPUSH
13634: CALL_OW 264
13638: PUSH
13639: LD_INT 2
13641: PUSH
13642: LD_INT 42
13644: PUSH
13645: LD_INT 24
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: LIST
13652: IN
13653: IFFALSE 13674
// points := [ 25 , 5 , 3 ] ;
13655: LD_ADDR_VAR 0 9
13659: PUSH
13660: LD_INT 25
13662: PUSH
13663: LD_INT 5
13665: PUSH
13666: LD_INT 3
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13674: LD_VAR 0 6
13678: PPUSH
13679: CALL_OW 264
13683: PUSH
13684: LD_INT 4
13686: PUSH
13687: LD_INT 43
13689: PUSH
13690: LD_INT 25
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: IN
13698: IFFALSE 13719
// points := [ 40 , 15 , 5 ] ;
13700: LD_ADDR_VAR 0 9
13704: PUSH
13705: LD_INT 40
13707: PUSH
13708: LD_INT 15
13710: PUSH
13711: LD_INT 5
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: LIST
13718: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13719: LD_VAR 0 6
13723: PPUSH
13724: CALL_OW 264
13728: PUSH
13729: LD_INT 3
13731: PUSH
13732: LD_INT 23
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: IN
13739: IFFALSE 13760
// points := [ 7 , 25 , 8 ] ;
13741: LD_ADDR_VAR 0 9
13745: PUSH
13746: LD_INT 7
13748: PUSH
13749: LD_INT 25
13751: PUSH
13752: LD_INT 8
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13760: LD_VAR 0 6
13764: PPUSH
13765: CALL_OW 264
13769: PUSH
13770: LD_INT 5
13772: PUSH
13773: LD_INT 27
13775: PUSH
13776: LD_INT 44
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: IN
13784: IFFALSE 13805
// points := [ 14 , 50 , 16 ] ;
13786: LD_ADDR_VAR 0 9
13790: PUSH
13791: LD_INT 14
13793: PUSH
13794: LD_INT 50
13796: PUSH
13797: LD_INT 16
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13805: LD_VAR 0 6
13809: PPUSH
13810: CALL_OW 264
13814: PUSH
13815: LD_INT 6
13817: PUSH
13818: LD_INT 46
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: IN
13825: IFFALSE 13846
// points := [ 32 , 120 , 70 ] ;
13827: LD_ADDR_VAR 0 9
13831: PUSH
13832: LD_INT 32
13834: PUSH
13835: LD_INT 120
13837: PUSH
13838: LD_INT 70
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13846: LD_VAR 0 6
13850: PPUSH
13851: CALL_OW 264
13855: PUSH
13856: LD_INT 7
13858: PUSH
13859: LD_INT 28
13861: PUSH
13862: LD_INT 45
13864: PUSH
13865: LD_EXP 43
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: IN
13876: IFFALSE 13897
// points := [ 35 , 20 , 45 ] ;
13878: LD_ADDR_VAR 0 9
13882: PUSH
13883: LD_INT 35
13885: PUSH
13886: LD_INT 20
13888: PUSH
13889: LD_INT 45
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13897: LD_VAR 0 6
13901: PPUSH
13902: CALL_OW 264
13906: PUSH
13907: LD_INT 47
13909: PUSH
13910: EMPTY
13911: LIST
13912: IN
13913: IFFALSE 13934
// points := [ 67 , 45 , 75 ] ;
13915: LD_ADDR_VAR 0 9
13919: PUSH
13920: LD_INT 67
13922: PUSH
13923: LD_INT 45
13925: PUSH
13926: LD_INT 75
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: LIST
13933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13934: LD_VAR 0 6
13938: PPUSH
13939: CALL_OW 264
13943: PUSH
13944: LD_INT 26
13946: PUSH
13947: EMPTY
13948: LIST
13949: IN
13950: IFFALSE 13971
// points := [ 120 , 30 , 80 ] ;
13952: LD_ADDR_VAR 0 9
13956: PUSH
13957: LD_INT 120
13959: PUSH
13960: LD_INT 30
13962: PUSH
13963: LD_INT 80
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13971: LD_VAR 0 6
13975: PPUSH
13976: CALL_OW 264
13980: PUSH
13981: LD_INT 22
13983: PUSH
13984: EMPTY
13985: LIST
13986: IN
13987: IFFALSE 14008
// points := [ 40 , 1 , 1 ] ;
13989: LD_ADDR_VAR 0 9
13993: PUSH
13994: LD_INT 40
13996: PUSH
13997: LD_INT 1
13999: PUSH
14000: LD_INT 1
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: LIST
14007: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
14008: LD_VAR 0 6
14012: PPUSH
14013: CALL_OW 264
14017: PUSH
14018: LD_INT 29
14020: PUSH
14021: EMPTY
14022: LIST
14023: IN
14024: IFFALSE 14045
// points := [ 70 , 200 , 400 ] ;
14026: LD_ADDR_VAR 0 9
14030: PUSH
14031: LD_INT 70
14033: PUSH
14034: LD_INT 200
14036: PUSH
14037: LD_INT 400
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
14045: LD_VAR 0 6
14049: PPUSH
14050: CALL_OW 264
14054: PUSH
14055: LD_INT 14
14057: PUSH
14058: LD_INT 53
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: IN
14065: IFFALSE 14086
// points := [ 40 , 10 , 20 ] ;
14067: LD_ADDR_VAR 0 9
14071: PUSH
14072: LD_INT 40
14074: PUSH
14075: LD_INT 10
14077: PUSH
14078: LD_INT 20
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: LIST
14085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
14086: LD_VAR 0 6
14090: PPUSH
14091: CALL_OW 264
14095: PUSH
14096: LD_INT 9
14098: PUSH
14099: EMPTY
14100: LIST
14101: IN
14102: IFFALSE 14123
// points := [ 5 , 70 , 20 ] ;
14104: LD_ADDR_VAR 0 9
14108: PUSH
14109: LD_INT 5
14111: PUSH
14112: LD_INT 70
14114: PUSH
14115: LD_INT 20
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
14123: LD_VAR 0 6
14127: PPUSH
14128: CALL_OW 264
14132: PUSH
14133: LD_INT 10
14135: PUSH
14136: EMPTY
14137: LIST
14138: IN
14139: IFFALSE 14160
// points := [ 35 , 110 , 70 ] ;
14141: LD_ADDR_VAR 0 9
14145: PUSH
14146: LD_INT 35
14148: PUSH
14149: LD_INT 110
14151: PUSH
14152: LD_INT 70
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
14160: LD_VAR 0 6
14164: PPUSH
14165: CALL_OW 265
14169: PUSH
14170: LD_INT 25
14172: EQUAL
14173: IFFALSE 14194
// points := [ 80 , 65 , 100 ] ;
14175: LD_ADDR_VAR 0 9
14179: PUSH
14180: LD_INT 80
14182: PUSH
14183: LD_INT 65
14185: PUSH
14186: LD_INT 100
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
14194: LD_VAR 0 6
14198: PPUSH
14199: CALL_OW 263
14203: PUSH
14204: LD_INT 1
14206: EQUAL
14207: IFFALSE 14242
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
14209: LD_ADDR_VAR 0 10
14213: PUSH
14214: LD_VAR 0 10
14218: PUSH
14219: LD_VAR 0 6
14223: PPUSH
14224: CALL_OW 311
14228: PPUSH
14229: LD_INT 3
14231: PPUSH
14232: CALL_OW 259
14236: PUSH
14237: LD_INT 4
14239: MUL
14240: MUL
14241: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
14242: LD_VAR 0 6
14246: PPUSH
14247: CALL_OW 263
14251: PUSH
14252: LD_INT 2
14254: EQUAL
14255: IFFALSE 14306
// begin j := IsControledBy ( i ) ;
14257: LD_ADDR_VAR 0 7
14261: PUSH
14262: LD_VAR 0 6
14266: PPUSH
14267: CALL_OW 312
14271: ST_TO_ADDR
// if j then
14272: LD_VAR 0 7
14276: IFFALSE 14306
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
14278: LD_ADDR_VAR 0 10
14282: PUSH
14283: LD_VAR 0 10
14287: PUSH
14288: LD_VAR 0 7
14292: PPUSH
14293: LD_INT 3
14295: PPUSH
14296: CALL_OW 259
14300: PUSH
14301: LD_INT 3
14303: MUL
14304: MUL
14305: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
14306: LD_VAR 0 6
14310: PPUSH
14311: CALL_OW 264
14315: PUSH
14316: LD_INT 5
14318: PUSH
14319: LD_INT 6
14321: PUSH
14322: LD_INT 46
14324: PUSH
14325: LD_INT 44
14327: PUSH
14328: LD_INT 47
14330: PUSH
14331: LD_INT 45
14333: PUSH
14334: LD_INT 28
14336: PUSH
14337: LD_INT 7
14339: PUSH
14340: LD_INT 27
14342: PUSH
14343: LD_INT 29
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: IN
14358: PUSH
14359: LD_VAR 0 1
14363: PPUSH
14364: LD_INT 52
14366: PPUSH
14367: CALL_OW 321
14371: PUSH
14372: LD_INT 2
14374: EQUAL
14375: AND
14376: IFFALSE 14393
// bpoints := bpoints * 1.2 ;
14378: LD_ADDR_VAR 0 10
14382: PUSH
14383: LD_VAR 0 10
14387: PUSH
14388: LD_REAL  1.20000000000000E+0000
14391: MUL
14392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
14393: LD_VAR 0 6
14397: PPUSH
14398: CALL_OW 264
14402: PUSH
14403: LD_INT 6
14405: PUSH
14406: LD_INT 46
14408: PUSH
14409: LD_INT 47
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: LIST
14416: IN
14417: IFFALSE 14434
// bpoints := bpoints * 1.2 ;
14419: LD_ADDR_VAR 0 10
14423: PUSH
14424: LD_VAR 0 10
14428: PUSH
14429: LD_REAL  1.20000000000000E+0000
14432: MUL
14433: ST_TO_ADDR
// end ; unit_building :
14434: GO 14448
14436: LD_INT 3
14438: DOUBLE
14439: EQUAL
14440: IFTRUE 14444
14442: GO 14447
14444: POP
// ; end ;
14445: GO 14448
14447: POP
// for j = 1 to 3 do
14448: LD_ADDR_VAR 0 7
14452: PUSH
14453: DOUBLE
14454: LD_INT 1
14456: DEC
14457: ST_TO_ADDR
14458: LD_INT 3
14460: PUSH
14461: FOR_TO
14462: IFFALSE 14515
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: LD_VAR 0 5
14473: PPUSH
14474: LD_VAR 0 7
14478: PPUSH
14479: LD_VAR 0 5
14483: PUSH
14484: LD_VAR 0 7
14488: ARRAY
14489: PUSH
14490: LD_VAR 0 9
14494: PUSH
14495: LD_VAR 0 7
14499: ARRAY
14500: PUSH
14501: LD_VAR 0 10
14505: MUL
14506: PLUS
14507: PPUSH
14508: CALL_OW 1
14512: ST_TO_ADDR
14513: GO 14461
14515: POP
14516: POP
// end ;
14517: GO 12994
14519: POP
14520: POP
// result := Replace ( result , 4 , tmp ) ;
14521: LD_ADDR_VAR 0 5
14525: PUSH
14526: LD_VAR 0 5
14530: PPUSH
14531: LD_INT 4
14533: PPUSH
14534: LD_VAR 0 8
14538: PPUSH
14539: CALL_OW 1
14543: ST_TO_ADDR
// end ;
14544: LD_VAR 0 5
14548: RET
// export function DangerAtRange ( unit , range ) ; begin
14549: LD_INT 0
14551: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14552: LD_ADDR_VAR 0 3
14556: PUSH
14557: LD_VAR 0 1
14561: PPUSH
14562: CALL_OW 255
14566: PPUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 250
14576: PPUSH
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 251
14586: PPUSH
14587: LD_VAR 0 2
14591: PPUSH
14592: CALL 12846 0 4
14596: ST_TO_ADDR
// end ;
14597: LD_VAR 0 3
14601: RET
// export function DangerInArea ( side , area ) ; begin
14602: LD_INT 0
14604: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14605: LD_ADDR_VAR 0 3
14609: PUSH
14610: LD_VAR 0 2
14614: PPUSH
14615: LD_INT 81
14617: PUSH
14618: LD_VAR 0 1
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PPUSH
14627: CALL_OW 70
14631: ST_TO_ADDR
// end ;
14632: LD_VAR 0 3
14636: RET
// export function IsExtension ( b ) ; begin
14637: LD_INT 0
14639: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14640: LD_ADDR_VAR 0 2
14644: PUSH
14645: LD_VAR 0 1
14649: PUSH
14650: LD_INT 23
14652: PUSH
14653: LD_INT 20
14655: PUSH
14656: LD_INT 22
14658: PUSH
14659: LD_INT 17
14661: PUSH
14662: LD_INT 24
14664: PUSH
14665: LD_INT 21
14667: PUSH
14668: LD_INT 19
14670: PUSH
14671: LD_INT 16
14673: PUSH
14674: LD_INT 25
14676: PUSH
14677: LD_INT 18
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: IN
14692: ST_TO_ADDR
// end ;
14693: LD_VAR 0 2
14697: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14698: LD_INT 0
14700: PPUSH
14701: PPUSH
14702: PPUSH
// result := [ ] ;
14703: LD_ADDR_VAR 0 4
14707: PUSH
14708: EMPTY
14709: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14710: LD_ADDR_VAR 0 5
14714: PUSH
14715: LD_VAR 0 2
14719: PPUSH
14720: LD_INT 21
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PPUSH
14730: CALL_OW 70
14734: ST_TO_ADDR
// if not tmp then
14735: LD_VAR 0 5
14739: NOT
14740: IFFALSE 14744
// exit ;
14742: GO 14808
// if checkLink then
14744: LD_VAR 0 3
14748: IFFALSE 14798
// begin for i in tmp do
14750: LD_ADDR_VAR 0 6
14754: PUSH
14755: LD_VAR 0 5
14759: PUSH
14760: FOR_IN
14761: IFFALSE 14796
// if GetBase ( i ) <> base then
14763: LD_VAR 0 6
14767: PPUSH
14768: CALL_OW 274
14772: PUSH
14773: LD_VAR 0 1
14777: NONEQUAL
14778: IFFALSE 14794
// ComLinkToBase ( base , i ) ;
14780: LD_VAR 0 1
14784: PPUSH
14785: LD_VAR 0 6
14789: PPUSH
14790: CALL_OW 169
14794: GO 14760
14796: POP
14797: POP
// end ; result := tmp ;
14798: LD_ADDR_VAR 0 4
14802: PUSH
14803: LD_VAR 0 5
14807: ST_TO_ADDR
// end ;
14808: LD_VAR 0 4
14812: RET
// export function ComComplete ( units , b ) ; var i ; begin
14813: LD_INT 0
14815: PPUSH
14816: PPUSH
// if not units then
14817: LD_VAR 0 1
14821: NOT
14822: IFFALSE 14826
// exit ;
14824: GO 14916
// for i in units do
14826: LD_ADDR_VAR 0 4
14830: PUSH
14831: LD_VAR 0 1
14835: PUSH
14836: FOR_IN
14837: IFFALSE 14914
// if BuildingStatus ( b ) = bs_build then
14839: LD_VAR 0 2
14843: PPUSH
14844: CALL_OW 461
14848: PUSH
14849: LD_INT 1
14851: EQUAL
14852: IFFALSE 14912
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14854: LD_VAR 0 4
14858: PPUSH
14859: LD_STRING h
14861: PUSH
14862: LD_VAR 0 2
14866: PPUSH
14867: CALL_OW 250
14871: PUSH
14872: LD_VAR 0 2
14876: PPUSH
14877: CALL_OW 251
14881: PUSH
14882: LD_VAR 0 2
14886: PUSH
14887: LD_INT 0
14889: PUSH
14890: LD_INT 0
14892: PUSH
14893: LD_INT 0
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: PUSH
14905: EMPTY
14906: LIST
14907: PPUSH
14908: CALL_OW 446
14912: GO 14836
14914: POP
14915: POP
// end ;
14916: LD_VAR 0 3
14920: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14921: LD_INT 0
14923: PPUSH
14924: PPUSH
14925: PPUSH
14926: PPUSH
14927: PPUSH
14928: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14929: LD_VAR 0 1
14933: NOT
14934: PUSH
14935: LD_VAR 0 1
14939: PPUSH
14940: CALL_OW 263
14944: PUSH
14945: LD_INT 2
14947: NONEQUAL
14948: OR
14949: IFFALSE 14953
// exit ;
14951: GO 15269
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14953: LD_ADDR_VAR 0 6
14957: PUSH
14958: LD_INT 22
14960: PUSH
14961: LD_VAR 0 1
14965: PPUSH
14966: CALL_OW 255
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 30
14980: PUSH
14981: LD_INT 36
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 34
14990: PUSH
14991: LD_INT 31
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 69
15011: ST_TO_ADDR
// if not tmp then
15012: LD_VAR 0 6
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15269
// result := [ ] ;
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: EMPTY
15027: ST_TO_ADDR
// for i in tmp do
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_VAR 0 6
15037: PUSH
15038: FOR_IN
15039: IFFALSE 15110
// begin t := UnitsInside ( i ) ;
15041: LD_ADDR_VAR 0 4
15045: PUSH
15046: LD_VAR 0 3
15050: PPUSH
15051: CALL_OW 313
15055: ST_TO_ADDR
// if t then
15056: LD_VAR 0 4
15060: IFFALSE 15108
// for j in t do
15062: LD_ADDR_VAR 0 7
15066: PUSH
15067: LD_VAR 0 4
15071: PUSH
15072: FOR_IN
15073: IFFALSE 15106
// result := Replace ( result , result + 1 , j ) ;
15075: LD_ADDR_VAR 0 2
15079: PUSH
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_VAR 0 2
15089: PUSH
15090: LD_INT 1
15092: PLUS
15093: PPUSH
15094: LD_VAR 0 7
15098: PPUSH
15099: CALL_OW 1
15103: ST_TO_ADDR
15104: GO 15072
15106: POP
15107: POP
// end ;
15108: GO 15038
15110: POP
15111: POP
// if not result then
15112: LD_VAR 0 2
15116: NOT
15117: IFFALSE 15121
// exit ;
15119: GO 15269
// mech := result [ 1 ] ;
15121: LD_ADDR_VAR 0 5
15125: PUSH
15126: LD_VAR 0 2
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: ST_TO_ADDR
// if result > 1 then
15135: LD_VAR 0 2
15139: PUSH
15140: LD_INT 1
15142: GREATER
15143: IFFALSE 15255
// begin for i = 2 to result do
15145: LD_ADDR_VAR 0 3
15149: PUSH
15150: DOUBLE
15151: LD_INT 2
15153: DEC
15154: ST_TO_ADDR
15155: LD_VAR 0 2
15159: PUSH
15160: FOR_TO
15161: IFFALSE 15253
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
15163: LD_ADDR_VAR 0 4
15167: PUSH
15168: LD_VAR 0 2
15172: PUSH
15173: LD_VAR 0 3
15177: ARRAY
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: CALL_OW 259
15186: PUSH
15187: LD_VAR 0 2
15191: PUSH
15192: LD_VAR 0 3
15196: ARRAY
15197: PPUSH
15198: CALL_OW 432
15202: MINUS
15203: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
15204: LD_VAR 0 4
15208: PUSH
15209: LD_VAR 0 5
15213: PPUSH
15214: LD_INT 3
15216: PPUSH
15217: CALL_OW 259
15221: PUSH
15222: LD_VAR 0 5
15226: PPUSH
15227: CALL_OW 432
15231: MINUS
15232: GREATEREQUAL
15233: IFFALSE 15251
// mech := result [ i ] ;
15235: LD_ADDR_VAR 0 5
15239: PUSH
15240: LD_VAR 0 2
15244: PUSH
15245: LD_VAR 0 3
15249: ARRAY
15250: ST_TO_ADDR
// end ;
15251: GO 15160
15253: POP
15254: POP
// end ; ComLinkTo ( vehicle , mech ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_VAR 0 5
15264: PPUSH
15265: CALL_OW 135
// end ;
15269: LD_VAR 0 2
15273: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
15274: LD_INT 0
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
15285: PPUSH
15286: PPUSH
15287: PPUSH
15288: PPUSH
// result := [ ] ;
15289: LD_ADDR_VAR 0 7
15293: PUSH
15294: EMPTY
15295: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
15296: LD_VAR 0 1
15300: PPUSH
15301: CALL_OW 266
15305: PUSH
15306: LD_INT 0
15308: PUSH
15309: LD_INT 1
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: IN
15316: NOT
15317: IFFALSE 15321
// exit ;
15319: GO 16955
// if name then
15321: LD_VAR 0 3
15325: IFFALSE 15341
// SetBName ( base_dep , name ) ;
15327: LD_VAR 0 1
15331: PPUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: CALL_OW 500
// base := GetBase ( base_dep ) ;
15341: LD_ADDR_VAR 0 15
15345: PUSH
15346: LD_VAR 0 1
15350: PPUSH
15351: CALL_OW 274
15355: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
15356: LD_ADDR_VAR 0 16
15360: PUSH
15361: LD_VAR 0 1
15365: PPUSH
15366: CALL_OW 255
15370: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
15371: LD_ADDR_VAR 0 17
15375: PUSH
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 248
15385: ST_TO_ADDR
// if sources then
15386: LD_VAR 0 5
15390: IFFALSE 15437
// for i = 1 to 3 do
15392: LD_ADDR_VAR 0 8
15396: PUSH
15397: DOUBLE
15398: LD_INT 1
15400: DEC
15401: ST_TO_ADDR
15402: LD_INT 3
15404: PUSH
15405: FOR_TO
15406: IFFALSE 15435
// AddResourceType ( base , i , sources [ i ] ) ;
15408: LD_VAR 0 15
15412: PPUSH
15413: LD_VAR 0 8
15417: PPUSH
15418: LD_VAR 0 5
15422: PUSH
15423: LD_VAR 0 8
15427: ARRAY
15428: PPUSH
15429: CALL_OW 276
15433: GO 15405
15435: POP
15436: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15437: LD_ADDR_VAR 0 18
15441: PUSH
15442: LD_VAR 0 15
15446: PPUSH
15447: LD_VAR 0 2
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: CALL 14698 0 3
15459: ST_TO_ADDR
// InitHc ;
15460: CALL_OW 19
// InitUc ;
15464: CALL_OW 18
// uc_side := side ;
15468: LD_ADDR_OWVAR 20
15472: PUSH
15473: LD_VAR 0 16
15477: ST_TO_ADDR
// uc_nation := nation ;
15478: LD_ADDR_OWVAR 21
15482: PUSH
15483: LD_VAR 0 17
15487: ST_TO_ADDR
// if buildings then
15488: LD_VAR 0 18
15492: IFFALSE 16814
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15494: LD_ADDR_VAR 0 19
15498: PUSH
15499: LD_VAR 0 18
15503: PPUSH
15504: LD_INT 2
15506: PUSH
15507: LD_INT 30
15509: PUSH
15510: LD_INT 29
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 30
15519: PUSH
15520: LD_INT 30
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 72
15536: ST_TO_ADDR
// if tmp then
15537: LD_VAR 0 19
15541: IFFALSE 15589
// for i in tmp do
15543: LD_ADDR_VAR 0 8
15547: PUSH
15548: LD_VAR 0 19
15552: PUSH
15553: FOR_IN
15554: IFFALSE 15587
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15556: LD_VAR 0 8
15560: PPUSH
15561: CALL_OW 250
15565: PPUSH
15566: LD_VAR 0 8
15570: PPUSH
15571: CALL_OW 251
15575: PPUSH
15576: LD_VAR 0 16
15580: PPUSH
15581: CALL_OW 441
15585: GO 15553
15587: POP
15588: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15589: LD_VAR 0 18
15593: PPUSH
15594: LD_INT 2
15596: PUSH
15597: LD_INT 30
15599: PUSH
15600: LD_INT 32
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 30
15609: PUSH
15610: LD_INT 33
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 72
15626: IFFALSE 15714
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15628: LD_ADDR_VAR 0 8
15632: PUSH
15633: LD_VAR 0 18
15637: PPUSH
15638: LD_INT 2
15640: PUSH
15641: LD_INT 30
15643: PUSH
15644: LD_INT 32
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_INT 33
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 72
15670: PUSH
15671: FOR_IN
15672: IFFALSE 15712
// begin if not GetBWeapon ( i ) then
15674: LD_VAR 0 8
15678: PPUSH
15679: CALL_OW 269
15683: NOT
15684: IFFALSE 15710
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15686: LD_VAR 0 8
15690: PPUSH
15691: LD_VAR 0 8
15695: PPUSH
15696: LD_VAR 0 2
15700: PPUSH
15701: CALL 16960 0 2
15705: PPUSH
15706: CALL_OW 431
// end ;
15710: GO 15671
15712: POP
15713: POP
// end ; for i = 1 to personel do
15714: LD_ADDR_VAR 0 8
15718: PUSH
15719: DOUBLE
15720: LD_INT 1
15722: DEC
15723: ST_TO_ADDR
15724: LD_VAR 0 6
15728: PUSH
15729: FOR_TO
15730: IFFALSE 16794
// begin if i > 4 then
15732: LD_VAR 0 8
15736: PUSH
15737: LD_INT 4
15739: GREATER
15740: IFFALSE 15744
// break ;
15742: GO 16794
// case i of 1 :
15744: LD_VAR 0 8
15748: PUSH
15749: LD_INT 1
15751: DOUBLE
15752: EQUAL
15753: IFTRUE 15757
15755: GO 15837
15757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15758: LD_ADDR_VAR 0 12
15762: PUSH
15763: LD_VAR 0 18
15767: PPUSH
15768: LD_INT 22
15770: PUSH
15771: LD_VAR 0 16
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 58
15782: PUSH
15783: EMPTY
15784: LIST
15785: PUSH
15786: LD_INT 2
15788: PUSH
15789: LD_INT 30
15791: PUSH
15792: LD_INT 32
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 30
15801: PUSH
15802: LD_INT 4
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 30
15811: PUSH
15812: LD_INT 5
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: PPUSH
15830: CALL_OW 72
15834: ST_TO_ADDR
15835: GO 16059
15837: LD_INT 2
15839: DOUBLE
15840: EQUAL
15841: IFTRUE 15845
15843: GO 15907
15845: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15846: LD_ADDR_VAR 0 12
15850: PUSH
15851: LD_VAR 0 18
15855: PPUSH
15856: LD_INT 22
15858: PUSH
15859: LD_VAR 0 16
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 2
15870: PUSH
15871: LD_INT 30
15873: PUSH
15874: LD_INT 0
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 30
15883: PUSH
15884: LD_INT 1
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: LIST
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PPUSH
15900: CALL_OW 72
15904: ST_TO_ADDR
15905: GO 16059
15907: LD_INT 3
15909: DOUBLE
15910: EQUAL
15911: IFTRUE 15915
15913: GO 15977
15915: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15916: LD_ADDR_VAR 0 12
15920: PUSH
15921: LD_VAR 0 18
15925: PPUSH
15926: LD_INT 22
15928: PUSH
15929: LD_VAR 0 16
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 2
15940: PUSH
15941: LD_INT 30
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 3
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PPUSH
15970: CALL_OW 72
15974: ST_TO_ADDR
15975: GO 16059
15977: LD_INT 4
15979: DOUBLE
15980: EQUAL
15981: IFTRUE 15985
15983: GO 16058
15985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15986: LD_ADDR_VAR 0 12
15990: PUSH
15991: LD_VAR 0 18
15995: PPUSH
15996: LD_INT 22
15998: PUSH
15999: LD_VAR 0 16
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 6
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 7
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 30
16033: PUSH
16034: LD_INT 8
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PPUSH
16051: CALL_OW 72
16055: ST_TO_ADDR
16056: GO 16059
16058: POP
// if i = 1 then
16059: LD_VAR 0 8
16063: PUSH
16064: LD_INT 1
16066: EQUAL
16067: IFFALSE 16178
// begin tmp := [ ] ;
16069: LD_ADDR_VAR 0 19
16073: PUSH
16074: EMPTY
16075: ST_TO_ADDR
// for j in f do
16076: LD_ADDR_VAR 0 9
16080: PUSH
16081: LD_VAR 0 12
16085: PUSH
16086: FOR_IN
16087: IFFALSE 16160
// if GetBType ( j ) = b_bunker then
16089: LD_VAR 0 9
16093: PPUSH
16094: CALL_OW 266
16098: PUSH
16099: LD_INT 32
16101: EQUAL
16102: IFFALSE 16129
// tmp := Insert ( tmp , 1 , j ) else
16104: LD_ADDR_VAR 0 19
16108: PUSH
16109: LD_VAR 0 19
16113: PPUSH
16114: LD_INT 1
16116: PPUSH
16117: LD_VAR 0 9
16121: PPUSH
16122: CALL_OW 2
16126: ST_TO_ADDR
16127: GO 16158
// tmp := Insert ( tmp , tmp + 1 , j ) ;
16129: LD_ADDR_VAR 0 19
16133: PUSH
16134: LD_VAR 0 19
16138: PPUSH
16139: LD_VAR 0 19
16143: PUSH
16144: LD_INT 1
16146: PLUS
16147: PPUSH
16148: LD_VAR 0 9
16152: PPUSH
16153: CALL_OW 2
16157: ST_TO_ADDR
16158: GO 16086
16160: POP
16161: POP
// if tmp then
16162: LD_VAR 0 19
16166: IFFALSE 16178
// f := tmp ;
16168: LD_ADDR_VAR 0 12
16172: PUSH
16173: LD_VAR 0 19
16177: ST_TO_ADDR
// end ; x := personel [ i ] ;
16178: LD_ADDR_VAR 0 13
16182: PUSH
16183: LD_VAR 0 6
16187: PUSH
16188: LD_VAR 0 8
16192: ARRAY
16193: ST_TO_ADDR
// if x = - 1 then
16194: LD_VAR 0 13
16198: PUSH
16199: LD_INT 1
16201: NEG
16202: EQUAL
16203: IFFALSE 16412
// begin for j in f do
16205: LD_ADDR_VAR 0 9
16209: PUSH
16210: LD_VAR 0 12
16214: PUSH
16215: FOR_IN
16216: IFFALSE 16408
// repeat InitHc ;
16218: CALL_OW 19
// if GetBType ( j ) = b_barracks then
16222: LD_VAR 0 9
16226: PPUSH
16227: CALL_OW 266
16231: PUSH
16232: LD_INT 5
16234: EQUAL
16235: IFFALSE 16305
// begin if UnitsInside ( j ) < 3 then
16237: LD_VAR 0 9
16241: PPUSH
16242: CALL_OW 313
16246: PUSH
16247: LD_INT 3
16249: LESS
16250: IFFALSE 16286
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16252: LD_INT 0
16254: PPUSH
16255: LD_INT 5
16257: PUSH
16258: LD_INT 8
16260: PUSH
16261: LD_INT 9
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: PUSH
16269: LD_VAR 0 17
16273: ARRAY
16274: PPUSH
16275: LD_VAR 0 4
16279: PPUSH
16280: CALL_OW 380
16284: GO 16303
// PrepareHuman ( false , i , skill ) ;
16286: LD_INT 0
16288: PPUSH
16289: LD_VAR 0 8
16293: PPUSH
16294: LD_VAR 0 4
16298: PPUSH
16299: CALL_OW 380
// end else
16303: GO 16322
// PrepareHuman ( false , i , skill ) ;
16305: LD_INT 0
16307: PPUSH
16308: LD_VAR 0 8
16312: PPUSH
16313: LD_VAR 0 4
16317: PPUSH
16318: CALL_OW 380
// un := CreateHuman ;
16322: LD_ADDR_VAR 0 14
16326: PUSH
16327: CALL_OW 44
16331: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16332: LD_ADDR_VAR 0 7
16336: PUSH
16337: LD_VAR 0 7
16341: PPUSH
16342: LD_INT 1
16344: PPUSH
16345: LD_VAR 0 14
16349: PPUSH
16350: CALL_OW 2
16354: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
16355: LD_VAR 0 14
16359: PPUSH
16360: LD_VAR 0 9
16364: PPUSH
16365: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
16369: LD_VAR 0 9
16373: PPUSH
16374: CALL_OW 313
16378: PUSH
16379: LD_INT 6
16381: EQUAL
16382: PUSH
16383: LD_VAR 0 9
16387: PPUSH
16388: CALL_OW 266
16392: PUSH
16393: LD_INT 32
16395: PUSH
16396: LD_INT 31
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: IN
16403: OR
16404: IFFALSE 16218
16406: GO 16215
16408: POP
16409: POP
// end else
16410: GO 16792
// for j = 1 to x do
16412: LD_ADDR_VAR 0 9
16416: PUSH
16417: DOUBLE
16418: LD_INT 1
16420: DEC
16421: ST_TO_ADDR
16422: LD_VAR 0 13
16426: PUSH
16427: FOR_TO
16428: IFFALSE 16790
// begin InitHc ;
16430: CALL_OW 19
// if not f then
16434: LD_VAR 0 12
16438: NOT
16439: IFFALSE 16528
// begin PrepareHuman ( false , i , skill ) ;
16441: LD_INT 0
16443: PPUSH
16444: LD_VAR 0 8
16448: PPUSH
16449: LD_VAR 0 4
16453: PPUSH
16454: CALL_OW 380
// un := CreateHuman ;
16458: LD_ADDR_VAR 0 14
16462: PUSH
16463: CALL_OW 44
16467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16468: LD_ADDR_VAR 0 7
16472: PUSH
16473: LD_VAR 0 7
16477: PPUSH
16478: LD_INT 1
16480: PPUSH
16481: LD_VAR 0 14
16485: PPUSH
16486: CALL_OW 2
16490: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16491: LD_VAR 0 14
16495: PPUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 250
16505: PPUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: CALL_OW 251
16515: PPUSH
16516: LD_INT 10
16518: PPUSH
16519: LD_INT 0
16521: PPUSH
16522: CALL_OW 50
// continue ;
16526: GO 16427
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16528: LD_VAR 0 12
16532: PUSH
16533: LD_INT 1
16535: ARRAY
16536: PPUSH
16537: CALL_OW 313
16541: PUSH
16542: LD_VAR 0 12
16546: PUSH
16547: LD_INT 1
16549: ARRAY
16550: PPUSH
16551: CALL_OW 266
16555: PUSH
16556: LD_INT 32
16558: PUSH
16559: LD_INT 31
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: IN
16566: AND
16567: PUSH
16568: LD_VAR 0 12
16572: PUSH
16573: LD_INT 1
16575: ARRAY
16576: PPUSH
16577: CALL_OW 313
16581: PUSH
16582: LD_INT 6
16584: EQUAL
16585: OR
16586: IFFALSE 16606
// f := Delete ( f , 1 ) ;
16588: LD_ADDR_VAR 0 12
16592: PUSH
16593: LD_VAR 0 12
16597: PPUSH
16598: LD_INT 1
16600: PPUSH
16601: CALL_OW 3
16605: ST_TO_ADDR
// if not f then
16606: LD_VAR 0 12
16610: NOT
16611: IFFALSE 16629
// begin x := x + 2 ;
16613: LD_ADDR_VAR 0 13
16617: PUSH
16618: LD_VAR 0 13
16622: PUSH
16623: LD_INT 2
16625: PLUS
16626: ST_TO_ADDR
// continue ;
16627: GO 16427
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16629: LD_VAR 0 12
16633: PUSH
16634: LD_INT 1
16636: ARRAY
16637: PPUSH
16638: CALL_OW 266
16642: PUSH
16643: LD_INT 5
16645: EQUAL
16646: IFFALSE 16720
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16648: LD_VAR 0 12
16652: PUSH
16653: LD_INT 1
16655: ARRAY
16656: PPUSH
16657: CALL_OW 313
16661: PUSH
16662: LD_INT 3
16664: LESS
16665: IFFALSE 16701
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16667: LD_INT 0
16669: PPUSH
16670: LD_INT 5
16672: PUSH
16673: LD_INT 8
16675: PUSH
16676: LD_INT 9
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: PUSH
16684: LD_VAR 0 17
16688: ARRAY
16689: PPUSH
16690: LD_VAR 0 4
16694: PPUSH
16695: CALL_OW 380
16699: GO 16718
// PrepareHuman ( false , i , skill ) ;
16701: LD_INT 0
16703: PPUSH
16704: LD_VAR 0 8
16708: PPUSH
16709: LD_VAR 0 4
16713: PPUSH
16714: CALL_OW 380
// end else
16718: GO 16737
// PrepareHuman ( false , i , skill ) ;
16720: LD_INT 0
16722: PPUSH
16723: LD_VAR 0 8
16727: PPUSH
16728: LD_VAR 0 4
16732: PPUSH
16733: CALL_OW 380
// un := CreateHuman ;
16737: LD_ADDR_VAR 0 14
16741: PUSH
16742: CALL_OW 44
16746: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16747: LD_ADDR_VAR 0 7
16751: PUSH
16752: LD_VAR 0 7
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: LD_VAR 0 14
16764: PPUSH
16765: CALL_OW 2
16769: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16770: LD_VAR 0 14
16774: PPUSH
16775: LD_VAR 0 12
16779: PUSH
16780: LD_INT 1
16782: ARRAY
16783: PPUSH
16784: CALL_OW 52
// end ;
16788: GO 16427
16790: POP
16791: POP
// end ;
16792: GO 15729
16794: POP
16795: POP
// result := result ^ buildings ;
16796: LD_ADDR_VAR 0 7
16800: PUSH
16801: LD_VAR 0 7
16805: PUSH
16806: LD_VAR 0 18
16810: ADD
16811: ST_TO_ADDR
// end else
16812: GO 16955
// begin for i = 1 to personel do
16814: LD_ADDR_VAR 0 8
16818: PUSH
16819: DOUBLE
16820: LD_INT 1
16822: DEC
16823: ST_TO_ADDR
16824: LD_VAR 0 6
16828: PUSH
16829: FOR_TO
16830: IFFALSE 16953
// begin if i > 4 then
16832: LD_VAR 0 8
16836: PUSH
16837: LD_INT 4
16839: GREATER
16840: IFFALSE 16844
// break ;
16842: GO 16953
// x := personel [ i ] ;
16844: LD_ADDR_VAR 0 13
16848: PUSH
16849: LD_VAR 0 6
16853: PUSH
16854: LD_VAR 0 8
16858: ARRAY
16859: ST_TO_ADDR
// if x = - 1 then
16860: LD_VAR 0 13
16864: PUSH
16865: LD_INT 1
16867: NEG
16868: EQUAL
16869: IFFALSE 16873
// continue ;
16871: GO 16829
// PrepareHuman ( false , i , skill ) ;
16873: LD_INT 0
16875: PPUSH
16876: LD_VAR 0 8
16880: PPUSH
16881: LD_VAR 0 4
16885: PPUSH
16886: CALL_OW 380
// un := CreateHuman ;
16890: LD_ADDR_VAR 0 14
16894: PUSH
16895: CALL_OW 44
16899: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16900: LD_VAR 0 14
16904: PPUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 250
16914: PPUSH
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 251
16924: PPUSH
16925: LD_INT 10
16927: PPUSH
16928: LD_INT 0
16930: PPUSH
16931: CALL_OW 50
// result := result ^ un ;
16935: LD_ADDR_VAR 0 7
16939: PUSH
16940: LD_VAR 0 7
16944: PUSH
16945: LD_VAR 0 14
16949: ADD
16950: ST_TO_ADDR
// end ;
16951: GO 16829
16953: POP
16954: POP
// end ; end ;
16955: LD_VAR 0 7
16959: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16960: LD_INT 0
16962: PPUSH
16963: PPUSH
16964: PPUSH
16965: PPUSH
16966: PPUSH
16967: PPUSH
16968: PPUSH
16969: PPUSH
16970: PPUSH
16971: PPUSH
16972: PPUSH
16973: PPUSH
16974: PPUSH
16975: PPUSH
16976: PPUSH
16977: PPUSH
// result := false ;
16978: LD_ADDR_VAR 0 3
16982: PUSH
16983: LD_INT 0
16985: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16986: LD_VAR 0 1
16990: NOT
16991: PUSH
16992: LD_VAR 0 1
16996: PPUSH
16997: CALL_OW 266
17001: PUSH
17002: LD_INT 32
17004: PUSH
17005: LD_INT 33
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: IN
17012: NOT
17013: OR
17014: IFFALSE 17018
// exit ;
17016: GO 18127
// nat := GetNation ( tower ) ;
17018: LD_ADDR_VAR 0 12
17022: PUSH
17023: LD_VAR 0 1
17027: PPUSH
17028: CALL_OW 248
17032: ST_TO_ADDR
// side := GetSide ( tower ) ;
17033: LD_ADDR_VAR 0 16
17037: PUSH
17038: LD_VAR 0 1
17042: PPUSH
17043: CALL_OW 255
17047: ST_TO_ADDR
// x := GetX ( tower ) ;
17048: LD_ADDR_VAR 0 10
17052: PUSH
17053: LD_VAR 0 1
17057: PPUSH
17058: CALL_OW 250
17062: ST_TO_ADDR
// y := GetY ( tower ) ;
17063: LD_ADDR_VAR 0 11
17067: PUSH
17068: LD_VAR 0 1
17072: PPUSH
17073: CALL_OW 251
17077: ST_TO_ADDR
// if not x or not y then
17078: LD_VAR 0 10
17082: NOT
17083: PUSH
17084: LD_VAR 0 11
17088: NOT
17089: OR
17090: IFFALSE 17094
// exit ;
17092: GO 18127
// weapon := 0 ;
17094: LD_ADDR_VAR 0 18
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// fac_list := [ ] ;
17102: LD_ADDR_VAR 0 17
17106: PUSH
17107: EMPTY
17108: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
17109: LD_ADDR_VAR 0 6
17113: PUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 274
17123: PPUSH
17124: LD_VAR 0 2
17128: PPUSH
17129: LD_INT 0
17131: PPUSH
17132: CALL 14698 0 3
17136: PPUSH
17137: LD_INT 30
17139: PUSH
17140: LD_INT 3
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PPUSH
17147: CALL_OW 72
17151: ST_TO_ADDR
// if not factories then
17152: LD_VAR 0 6
17156: NOT
17157: IFFALSE 17161
// exit ;
17159: GO 18127
// for i in factories do
17161: LD_ADDR_VAR 0 8
17165: PUSH
17166: LD_VAR 0 6
17170: PUSH
17171: FOR_IN
17172: IFFALSE 17197
// fac_list := fac_list union AvailableWeaponList ( i ) ;
17174: LD_ADDR_VAR 0 17
17178: PUSH
17179: LD_VAR 0 17
17183: PUSH
17184: LD_VAR 0 8
17188: PPUSH
17189: CALL_OW 478
17193: UNION
17194: ST_TO_ADDR
17195: GO 17171
17197: POP
17198: POP
// if not fac_list then
17199: LD_VAR 0 17
17203: NOT
17204: IFFALSE 17208
// exit ;
17206: GO 18127
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
17208: LD_ADDR_VAR 0 5
17212: PUSH
17213: LD_INT 4
17215: PUSH
17216: LD_INT 5
17218: PUSH
17219: LD_INT 9
17221: PUSH
17222: LD_INT 10
17224: PUSH
17225: LD_INT 6
17227: PUSH
17228: LD_INT 7
17230: PUSH
17231: LD_INT 11
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 27
17245: PUSH
17246: LD_INT 28
17248: PUSH
17249: LD_INT 26
17251: PUSH
17252: LD_INT 30
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 43
17263: PUSH
17264: LD_INT 44
17266: PUSH
17267: LD_INT 46
17269: PUSH
17270: LD_INT 45
17272: PUSH
17273: LD_INT 47
17275: PUSH
17276: LD_INT 49
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: LD_VAR 0 12
17296: ARRAY
17297: ST_TO_ADDR
// list := list isect fac_list ;
17298: LD_ADDR_VAR 0 5
17302: PUSH
17303: LD_VAR 0 5
17307: PUSH
17308: LD_VAR 0 17
17312: ISECT
17313: ST_TO_ADDR
// if not list then
17314: LD_VAR 0 5
17318: NOT
17319: IFFALSE 17323
// exit ;
17321: GO 18127
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
17323: LD_VAR 0 12
17327: PUSH
17328: LD_INT 3
17330: EQUAL
17331: PUSH
17332: LD_INT 49
17334: PUSH
17335: LD_VAR 0 5
17339: IN
17340: AND
17341: PUSH
17342: LD_INT 31
17344: PPUSH
17345: LD_VAR 0 16
17349: PPUSH
17350: CALL_OW 321
17354: PUSH
17355: LD_INT 2
17357: EQUAL
17358: AND
17359: IFFALSE 17419
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
17361: LD_INT 22
17363: PUSH
17364: LD_VAR 0 16
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 35
17375: PUSH
17376: LD_INT 49
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 91
17385: PUSH
17386: LD_VAR 0 1
17390: PUSH
17391: LD_INT 10
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: LIST
17403: PPUSH
17404: CALL_OW 69
17408: NOT
17409: IFFALSE 17419
// weapon := ru_time_lapser ;
17411: LD_ADDR_VAR 0 18
17415: PUSH
17416: LD_INT 49
17418: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
17419: LD_VAR 0 12
17423: PUSH
17424: LD_INT 1
17426: PUSH
17427: LD_INT 2
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: IN
17434: PUSH
17435: LD_INT 11
17437: PUSH
17438: LD_VAR 0 5
17442: IN
17443: PUSH
17444: LD_INT 30
17446: PUSH
17447: LD_VAR 0 5
17451: IN
17452: OR
17453: AND
17454: PUSH
17455: LD_INT 6
17457: PPUSH
17458: LD_VAR 0 16
17462: PPUSH
17463: CALL_OW 321
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: IFFALSE 17637
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17474: LD_INT 22
17476: PUSH
17477: LD_VAR 0 16
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 2
17488: PUSH
17489: LD_INT 35
17491: PUSH
17492: LD_INT 11
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 35
17501: PUSH
17502: LD_INT 30
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 91
17516: PUSH
17517: LD_VAR 0 1
17521: PUSH
17522: LD_INT 18
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: LIST
17534: PPUSH
17535: CALL_OW 69
17539: NOT
17540: PUSH
17541: LD_INT 22
17543: PUSH
17544: LD_VAR 0 16
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 2
17555: PUSH
17556: LD_INT 30
17558: PUSH
17559: LD_INT 32
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 30
17568: PUSH
17569: LD_INT 33
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 91
17583: PUSH
17584: LD_VAR 0 1
17588: PUSH
17589: LD_INT 12
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: PPUSH
17605: CALL_OW 69
17609: PUSH
17610: LD_INT 2
17612: GREATER
17613: AND
17614: IFFALSE 17637
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17616: LD_ADDR_VAR 0 18
17620: PUSH
17621: LD_INT 11
17623: PUSH
17624: LD_INT 30
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_VAR 0 12
17635: ARRAY
17636: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17637: LD_VAR 0 18
17641: NOT
17642: PUSH
17643: LD_INT 40
17645: PPUSH
17646: LD_VAR 0 16
17650: PPUSH
17651: CALL_OW 321
17655: PUSH
17656: LD_INT 2
17658: EQUAL
17659: AND
17660: PUSH
17661: LD_INT 7
17663: PUSH
17664: LD_VAR 0 5
17668: IN
17669: PUSH
17670: LD_INT 28
17672: PUSH
17673: LD_VAR 0 5
17677: IN
17678: OR
17679: PUSH
17680: LD_INT 45
17682: PUSH
17683: LD_VAR 0 5
17687: IN
17688: OR
17689: AND
17690: IFFALSE 17944
// begin hex := GetHexInfo ( x , y ) ;
17692: LD_ADDR_VAR 0 4
17696: PUSH
17697: LD_VAR 0 10
17701: PPUSH
17702: LD_VAR 0 11
17706: PPUSH
17707: CALL_OW 546
17711: ST_TO_ADDR
// if hex [ 1 ] then
17712: LD_VAR 0 4
17716: PUSH
17717: LD_INT 1
17719: ARRAY
17720: IFFALSE 17724
// exit ;
17722: GO 18127
// height := hex [ 2 ] ;
17724: LD_ADDR_VAR 0 15
17728: PUSH
17729: LD_VAR 0 4
17733: PUSH
17734: LD_INT 2
17736: ARRAY
17737: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17738: LD_ADDR_VAR 0 14
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: LD_INT 3
17751: PUSH
17752: LD_INT 5
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: ST_TO_ADDR
// for i in tmp do
17761: LD_ADDR_VAR 0 8
17765: PUSH
17766: LD_VAR 0 14
17770: PUSH
17771: FOR_IN
17772: IFFALSE 17942
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17774: LD_ADDR_VAR 0 9
17778: PUSH
17779: LD_VAR 0 10
17783: PPUSH
17784: LD_VAR 0 8
17788: PPUSH
17789: LD_INT 5
17791: PPUSH
17792: CALL_OW 272
17796: PUSH
17797: LD_VAR 0 11
17801: PPUSH
17802: LD_VAR 0 8
17806: PPUSH
17807: LD_INT 5
17809: PPUSH
17810: CALL_OW 273
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17819: LD_VAR 0 9
17823: PUSH
17824: LD_INT 1
17826: ARRAY
17827: PPUSH
17828: LD_VAR 0 9
17832: PUSH
17833: LD_INT 2
17835: ARRAY
17836: PPUSH
17837: CALL_OW 488
17841: IFFALSE 17940
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17843: LD_ADDR_VAR 0 4
17847: PUSH
17848: LD_VAR 0 9
17852: PUSH
17853: LD_INT 1
17855: ARRAY
17856: PPUSH
17857: LD_VAR 0 9
17861: PUSH
17862: LD_INT 2
17864: ARRAY
17865: PPUSH
17866: CALL_OW 546
17870: ST_TO_ADDR
// if hex [ 1 ] then
17871: LD_VAR 0 4
17875: PUSH
17876: LD_INT 1
17878: ARRAY
17879: IFFALSE 17883
// continue ;
17881: GO 17771
// h := hex [ 2 ] ;
17883: LD_ADDR_VAR 0 13
17887: PUSH
17888: LD_VAR 0 4
17892: PUSH
17893: LD_INT 2
17895: ARRAY
17896: ST_TO_ADDR
// if h + 7 < height then
17897: LD_VAR 0 13
17901: PUSH
17902: LD_INT 7
17904: PLUS
17905: PUSH
17906: LD_VAR 0 15
17910: LESS
17911: IFFALSE 17940
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17913: LD_ADDR_VAR 0 18
17917: PUSH
17918: LD_INT 7
17920: PUSH
17921: LD_INT 28
17923: PUSH
17924: LD_INT 45
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: PUSH
17932: LD_VAR 0 12
17936: ARRAY
17937: ST_TO_ADDR
// break ;
17938: GO 17942
// end ; end ; end ;
17940: GO 17771
17942: POP
17943: POP
// end ; if not weapon then
17944: LD_VAR 0 18
17948: NOT
17949: IFFALSE 18009
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17951: LD_ADDR_VAR 0 5
17955: PUSH
17956: LD_VAR 0 5
17960: PUSH
17961: LD_INT 11
17963: PUSH
17964: LD_INT 30
17966: PUSH
17967: LD_INT 49
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: DIFF
17975: ST_TO_ADDR
// if not list then
17976: LD_VAR 0 5
17980: NOT
17981: IFFALSE 17985
// exit ;
17983: GO 18127
// weapon := list [ rand ( 1 , list ) ] ;
17985: LD_ADDR_VAR 0 18
17989: PUSH
17990: LD_VAR 0 5
17994: PUSH
17995: LD_INT 1
17997: PPUSH
17998: LD_VAR 0 5
18002: PPUSH
18003: CALL_OW 12
18007: ARRAY
18008: ST_TO_ADDR
// end ; if weapon then
18009: LD_VAR 0 18
18013: IFFALSE 18127
// begin tmp := CostOfWeapon ( weapon ) ;
18015: LD_ADDR_VAR 0 14
18019: PUSH
18020: LD_VAR 0 18
18024: PPUSH
18025: CALL_OW 451
18029: ST_TO_ADDR
// j := GetBase ( tower ) ;
18030: LD_ADDR_VAR 0 9
18034: PUSH
18035: LD_VAR 0 1
18039: PPUSH
18040: CALL_OW 274
18044: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
18045: LD_VAR 0 9
18049: PPUSH
18050: LD_INT 1
18052: PPUSH
18053: CALL_OW 275
18057: PUSH
18058: LD_VAR 0 14
18062: PUSH
18063: LD_INT 1
18065: ARRAY
18066: GREATEREQUAL
18067: PUSH
18068: LD_VAR 0 9
18072: PPUSH
18073: LD_INT 2
18075: PPUSH
18076: CALL_OW 275
18080: PUSH
18081: LD_VAR 0 14
18085: PUSH
18086: LD_INT 2
18088: ARRAY
18089: GREATEREQUAL
18090: AND
18091: PUSH
18092: LD_VAR 0 9
18096: PPUSH
18097: LD_INT 3
18099: PPUSH
18100: CALL_OW 275
18104: PUSH
18105: LD_VAR 0 14
18109: PUSH
18110: LD_INT 3
18112: ARRAY
18113: GREATEREQUAL
18114: AND
18115: IFFALSE 18127
// result := weapon ;
18117: LD_ADDR_VAR 0 3
18121: PUSH
18122: LD_VAR 0 18
18126: ST_TO_ADDR
// end ; end ;
18127: LD_VAR 0 3
18131: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
18132: LD_INT 0
18134: PPUSH
18135: PPUSH
// result := true ;
18136: LD_ADDR_VAR 0 3
18140: PUSH
18141: LD_INT 1
18143: ST_TO_ADDR
// if array1 = array2 then
18144: LD_VAR 0 1
18148: PUSH
18149: LD_VAR 0 2
18153: EQUAL
18154: IFFALSE 18214
// begin for i = 1 to array1 do
18156: LD_ADDR_VAR 0 4
18160: PUSH
18161: DOUBLE
18162: LD_INT 1
18164: DEC
18165: ST_TO_ADDR
18166: LD_VAR 0 1
18170: PUSH
18171: FOR_TO
18172: IFFALSE 18210
// if array1 [ i ] <> array2 [ i ] then
18174: LD_VAR 0 1
18178: PUSH
18179: LD_VAR 0 4
18183: ARRAY
18184: PUSH
18185: LD_VAR 0 2
18189: PUSH
18190: LD_VAR 0 4
18194: ARRAY
18195: NONEQUAL
18196: IFFALSE 18208
// begin result := false ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_INT 0
18205: ST_TO_ADDR
// break ;
18206: GO 18210
// end ;
18208: GO 18171
18210: POP
18211: POP
// end else
18212: GO 18222
// result := false ;
18214: LD_ADDR_VAR 0 3
18218: PUSH
18219: LD_INT 0
18221: ST_TO_ADDR
// end ;
18222: LD_VAR 0 3
18226: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
18227: LD_INT 0
18229: PPUSH
18230: PPUSH
// if not array1 or not array2 then
18231: LD_VAR 0 1
18235: NOT
18236: PUSH
18237: LD_VAR 0 2
18241: NOT
18242: OR
18243: IFFALSE 18247
// exit ;
18245: GO 18311
// result := true ;
18247: LD_ADDR_VAR 0 3
18251: PUSH
18252: LD_INT 1
18254: ST_TO_ADDR
// for i = 1 to array1 do
18255: LD_ADDR_VAR 0 4
18259: PUSH
18260: DOUBLE
18261: LD_INT 1
18263: DEC
18264: ST_TO_ADDR
18265: LD_VAR 0 1
18269: PUSH
18270: FOR_TO
18271: IFFALSE 18309
// if array1 [ i ] <> array2 [ i ] then
18273: LD_VAR 0 1
18277: PUSH
18278: LD_VAR 0 4
18282: ARRAY
18283: PUSH
18284: LD_VAR 0 2
18288: PUSH
18289: LD_VAR 0 4
18293: ARRAY
18294: NONEQUAL
18295: IFFALSE 18307
// begin result := false ;
18297: LD_ADDR_VAR 0 3
18301: PUSH
18302: LD_INT 0
18304: ST_TO_ADDR
// break ;
18305: GO 18309
// end ;
18307: GO 18270
18309: POP
18310: POP
// end ;
18311: LD_VAR 0 3
18315: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
18316: LD_INT 0
18318: PPUSH
18319: PPUSH
18320: PPUSH
// pom := GetBase ( fac ) ;
18321: LD_ADDR_VAR 0 5
18325: PUSH
18326: LD_VAR 0 1
18330: PPUSH
18331: CALL_OW 274
18335: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
18336: LD_ADDR_VAR 0 4
18340: PUSH
18341: LD_VAR 0 2
18345: PUSH
18346: LD_INT 1
18348: ARRAY
18349: PPUSH
18350: LD_VAR 0 2
18354: PUSH
18355: LD_INT 2
18357: ARRAY
18358: PPUSH
18359: LD_VAR 0 2
18363: PUSH
18364: LD_INT 3
18366: ARRAY
18367: PPUSH
18368: LD_VAR 0 2
18372: PUSH
18373: LD_INT 4
18375: ARRAY
18376: PPUSH
18377: CALL_OW 449
18381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18382: LD_ADDR_VAR 0 3
18386: PUSH
18387: LD_VAR 0 5
18391: PPUSH
18392: LD_INT 1
18394: PPUSH
18395: CALL_OW 275
18399: PUSH
18400: LD_VAR 0 4
18404: PUSH
18405: LD_INT 1
18407: ARRAY
18408: GREATEREQUAL
18409: PUSH
18410: LD_VAR 0 5
18414: PPUSH
18415: LD_INT 2
18417: PPUSH
18418: CALL_OW 275
18422: PUSH
18423: LD_VAR 0 4
18427: PUSH
18428: LD_INT 2
18430: ARRAY
18431: GREATEREQUAL
18432: AND
18433: PUSH
18434: LD_VAR 0 5
18438: PPUSH
18439: LD_INT 3
18441: PPUSH
18442: CALL_OW 275
18446: PUSH
18447: LD_VAR 0 4
18451: PUSH
18452: LD_INT 3
18454: ARRAY
18455: GREATEREQUAL
18456: AND
18457: ST_TO_ADDR
// end ;
18458: LD_VAR 0 3
18462: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18463: LD_INT 0
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
// pom := GetBase ( building ) ;
18469: LD_ADDR_VAR 0 3
18473: PUSH
18474: LD_VAR 0 1
18478: PPUSH
18479: CALL_OW 274
18483: ST_TO_ADDR
// if not pom then
18484: LD_VAR 0 3
18488: NOT
18489: IFFALSE 18493
// exit ;
18491: GO 18663
// btype := GetBType ( building ) ;
18493: LD_ADDR_VAR 0 5
18497: PUSH
18498: LD_VAR 0 1
18502: PPUSH
18503: CALL_OW 266
18507: ST_TO_ADDR
// if btype = b_armoury then
18508: LD_VAR 0 5
18512: PUSH
18513: LD_INT 4
18515: EQUAL
18516: IFFALSE 18526
// btype := b_barracks ;
18518: LD_ADDR_VAR 0 5
18522: PUSH
18523: LD_INT 5
18525: ST_TO_ADDR
// if btype = b_depot then
18526: LD_VAR 0 5
18530: PUSH
18531: LD_INT 0
18533: EQUAL
18534: IFFALSE 18544
// btype := b_warehouse ;
18536: LD_ADDR_VAR 0 5
18540: PUSH
18541: LD_INT 1
18543: ST_TO_ADDR
// if btype = b_workshop then
18544: LD_VAR 0 5
18548: PUSH
18549: LD_INT 2
18551: EQUAL
18552: IFFALSE 18562
// btype := b_factory ;
18554: LD_ADDR_VAR 0 5
18558: PUSH
18559: LD_INT 3
18561: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18562: LD_ADDR_VAR 0 4
18566: PUSH
18567: LD_VAR 0 5
18571: PPUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 248
18581: PPUSH
18582: CALL_OW 450
18586: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18587: LD_ADDR_VAR 0 2
18591: PUSH
18592: LD_VAR 0 3
18596: PPUSH
18597: LD_INT 1
18599: PPUSH
18600: CALL_OW 275
18604: PUSH
18605: LD_VAR 0 4
18609: PUSH
18610: LD_INT 1
18612: ARRAY
18613: GREATEREQUAL
18614: PUSH
18615: LD_VAR 0 3
18619: PPUSH
18620: LD_INT 2
18622: PPUSH
18623: CALL_OW 275
18627: PUSH
18628: LD_VAR 0 4
18632: PUSH
18633: LD_INT 2
18635: ARRAY
18636: GREATEREQUAL
18637: AND
18638: PUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: LD_INT 3
18646: PPUSH
18647: CALL_OW 275
18651: PUSH
18652: LD_VAR 0 4
18656: PUSH
18657: LD_INT 3
18659: ARRAY
18660: GREATEREQUAL
18661: AND
18662: ST_TO_ADDR
// end ;
18663: LD_VAR 0 2
18667: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18668: LD_INT 0
18670: PPUSH
18671: PPUSH
18672: PPUSH
// pom := GetBase ( building ) ;
18673: LD_ADDR_VAR 0 4
18677: PUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 274
18687: ST_TO_ADDR
// if not pom then
18688: LD_VAR 0 4
18692: NOT
18693: IFFALSE 18697
// exit ;
18695: GO 18798
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18697: LD_ADDR_VAR 0 5
18701: PUSH
18702: LD_VAR 0 2
18706: PPUSH
18707: LD_VAR 0 1
18711: PPUSH
18712: CALL_OW 248
18716: PPUSH
18717: CALL_OW 450
18721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18722: LD_ADDR_VAR 0 3
18726: PUSH
18727: LD_VAR 0 4
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: CALL_OW 275
18739: PUSH
18740: LD_VAR 0 5
18744: PUSH
18745: LD_INT 1
18747: ARRAY
18748: GREATEREQUAL
18749: PUSH
18750: LD_VAR 0 4
18754: PPUSH
18755: LD_INT 2
18757: PPUSH
18758: CALL_OW 275
18762: PUSH
18763: LD_VAR 0 5
18767: PUSH
18768: LD_INT 2
18770: ARRAY
18771: GREATEREQUAL
18772: AND
18773: PUSH
18774: LD_VAR 0 4
18778: PPUSH
18779: LD_INT 3
18781: PPUSH
18782: CALL_OW 275
18786: PUSH
18787: LD_VAR 0 5
18791: PUSH
18792: LD_INT 3
18794: ARRAY
18795: GREATEREQUAL
18796: AND
18797: ST_TO_ADDR
// end ;
18798: LD_VAR 0 3
18802: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18803: LD_INT 0
18805: PPUSH
18806: PPUSH
18807: PPUSH
18808: PPUSH
18809: PPUSH
18810: PPUSH
18811: PPUSH
18812: PPUSH
18813: PPUSH
18814: PPUSH
18815: PPUSH
// result := false ;
18816: LD_ADDR_VAR 0 8
18820: PUSH
18821: LD_INT 0
18823: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18824: LD_VAR 0 5
18828: NOT
18829: PUSH
18830: LD_VAR 0 1
18834: NOT
18835: OR
18836: PUSH
18837: LD_VAR 0 2
18841: NOT
18842: OR
18843: PUSH
18844: LD_VAR 0 3
18848: NOT
18849: OR
18850: IFFALSE 18854
// exit ;
18852: GO 19668
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18854: LD_ADDR_VAR 0 14
18858: PUSH
18859: LD_VAR 0 1
18863: PPUSH
18864: LD_VAR 0 2
18868: PPUSH
18869: LD_VAR 0 3
18873: PPUSH
18874: LD_VAR 0 4
18878: PPUSH
18879: LD_VAR 0 5
18883: PUSH
18884: LD_INT 1
18886: ARRAY
18887: PPUSH
18888: CALL_OW 248
18892: PPUSH
18893: LD_INT 0
18895: PPUSH
18896: CALL 20905 0 6
18900: ST_TO_ADDR
// if not hexes then
18901: LD_VAR 0 14
18905: NOT
18906: IFFALSE 18910
// exit ;
18908: GO 19668
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18910: LD_ADDR_VAR 0 17
18914: PUSH
18915: LD_VAR 0 5
18919: PPUSH
18920: LD_INT 22
18922: PUSH
18923: LD_VAR 0 13
18927: PPUSH
18928: CALL_OW 255
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 30
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 30
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PPUSH
18969: CALL_OW 72
18973: ST_TO_ADDR
// for i = 1 to hexes do
18974: LD_ADDR_VAR 0 9
18978: PUSH
18979: DOUBLE
18980: LD_INT 1
18982: DEC
18983: ST_TO_ADDR
18984: LD_VAR 0 14
18988: PUSH
18989: FOR_TO
18990: IFFALSE 19666
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18992: LD_ADDR_VAR 0 13
18996: PUSH
18997: LD_VAR 0 14
19001: PUSH
19002: LD_VAR 0 9
19006: ARRAY
19007: PUSH
19008: LD_INT 1
19010: ARRAY
19011: PPUSH
19012: LD_VAR 0 14
19016: PUSH
19017: LD_VAR 0 9
19021: ARRAY
19022: PUSH
19023: LD_INT 2
19025: ARRAY
19026: PPUSH
19027: CALL_OW 428
19031: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
19032: LD_VAR 0 14
19036: PUSH
19037: LD_VAR 0 9
19041: ARRAY
19042: PUSH
19043: LD_INT 1
19045: ARRAY
19046: PPUSH
19047: LD_VAR 0 14
19051: PUSH
19052: LD_VAR 0 9
19056: ARRAY
19057: PUSH
19058: LD_INT 2
19060: ARRAY
19061: PPUSH
19062: CALL_OW 351
19066: PUSH
19067: LD_VAR 0 14
19071: PUSH
19072: LD_VAR 0 9
19076: ARRAY
19077: PUSH
19078: LD_INT 1
19080: ARRAY
19081: PPUSH
19082: LD_VAR 0 14
19086: PUSH
19087: LD_VAR 0 9
19091: ARRAY
19092: PUSH
19093: LD_INT 2
19095: ARRAY
19096: PPUSH
19097: CALL_OW 488
19101: NOT
19102: OR
19103: PUSH
19104: LD_VAR 0 13
19108: PPUSH
19109: CALL_OW 247
19113: PUSH
19114: LD_INT 3
19116: EQUAL
19117: OR
19118: IFFALSE 19124
// exit ;
19120: POP
19121: POP
19122: GO 19668
// if not tmp then
19124: LD_VAR 0 13
19128: NOT
19129: IFFALSE 19133
// continue ;
19131: GO 18989
// result := true ;
19133: LD_ADDR_VAR 0 8
19137: PUSH
19138: LD_INT 1
19140: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
19141: LD_VAR 0 6
19145: PUSH
19146: LD_VAR 0 13
19150: PPUSH
19151: CALL_OW 247
19155: PUSH
19156: LD_INT 2
19158: EQUAL
19159: AND
19160: PUSH
19161: LD_VAR 0 13
19165: PPUSH
19166: CALL_OW 263
19170: PUSH
19171: LD_INT 1
19173: EQUAL
19174: AND
19175: IFFALSE 19339
// begin if IsDrivenBy ( tmp ) then
19177: LD_VAR 0 13
19181: PPUSH
19182: CALL_OW 311
19186: IFFALSE 19190
// continue ;
19188: GO 18989
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
19190: LD_VAR 0 6
19194: PPUSH
19195: LD_INT 3
19197: PUSH
19198: LD_INT 60
19200: PUSH
19201: EMPTY
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 3
19210: PUSH
19211: LD_INT 55
19213: PUSH
19214: EMPTY
19215: LIST
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 72
19229: IFFALSE 19337
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
19231: LD_ADDR_VAR 0 18
19235: PUSH
19236: LD_VAR 0 6
19240: PPUSH
19241: LD_INT 3
19243: PUSH
19244: LD_INT 60
19246: PUSH
19247: EMPTY
19248: LIST
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 3
19256: PUSH
19257: LD_INT 55
19259: PUSH
19260: EMPTY
19261: LIST
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 72
19275: PUSH
19276: LD_INT 1
19278: ARRAY
19279: ST_TO_ADDR
// if IsInUnit ( driver ) then
19280: LD_VAR 0 18
19284: PPUSH
19285: CALL_OW 310
19289: IFFALSE 19300
// ComExit ( driver ) ;
19291: LD_VAR 0 18
19295: PPUSH
19296: CALL 44593 0 1
// AddComEnterUnit ( driver , tmp ) ;
19300: LD_VAR 0 18
19304: PPUSH
19305: LD_VAR 0 13
19309: PPUSH
19310: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
19314: LD_VAR 0 18
19318: PPUSH
19319: LD_VAR 0 7
19323: PPUSH
19324: CALL_OW 173
// AddComExitVehicle ( driver ) ;
19328: LD_VAR 0 18
19332: PPUSH
19333: CALL_OW 181
// end ; continue ;
19337: GO 18989
// end ; if not cleaners or not tmp in cleaners then
19339: LD_VAR 0 6
19343: NOT
19344: PUSH
19345: LD_VAR 0 13
19349: PUSH
19350: LD_VAR 0 6
19354: IN
19355: NOT
19356: OR
19357: IFFALSE 19664
// begin if dep then
19359: LD_VAR 0 17
19363: IFFALSE 19499
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
19365: LD_ADDR_VAR 0 16
19369: PUSH
19370: LD_VAR 0 17
19374: PUSH
19375: LD_INT 1
19377: ARRAY
19378: PPUSH
19379: CALL_OW 250
19383: PPUSH
19384: LD_VAR 0 17
19388: PUSH
19389: LD_INT 1
19391: ARRAY
19392: PPUSH
19393: CALL_OW 254
19397: PPUSH
19398: LD_INT 5
19400: PPUSH
19401: CALL_OW 272
19405: PUSH
19406: LD_VAR 0 17
19410: PUSH
19411: LD_INT 1
19413: ARRAY
19414: PPUSH
19415: CALL_OW 251
19419: PPUSH
19420: LD_VAR 0 17
19424: PUSH
19425: LD_INT 1
19427: ARRAY
19428: PPUSH
19429: CALL_OW 254
19433: PPUSH
19434: LD_INT 5
19436: PPUSH
19437: CALL_OW 273
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19446: LD_VAR 0 16
19450: PUSH
19451: LD_INT 1
19453: ARRAY
19454: PPUSH
19455: LD_VAR 0 16
19459: PUSH
19460: LD_INT 2
19462: ARRAY
19463: PPUSH
19464: CALL_OW 488
19468: IFFALSE 19499
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19470: LD_VAR 0 13
19474: PPUSH
19475: LD_VAR 0 16
19479: PUSH
19480: LD_INT 1
19482: ARRAY
19483: PPUSH
19484: LD_VAR 0 16
19488: PUSH
19489: LD_INT 2
19491: ARRAY
19492: PPUSH
19493: CALL_OW 111
// continue ;
19497: GO 18989
// end ; end ; r := GetDir ( tmp ) ;
19499: LD_ADDR_VAR 0 15
19503: PUSH
19504: LD_VAR 0 13
19508: PPUSH
19509: CALL_OW 254
19513: ST_TO_ADDR
// if r = 5 then
19514: LD_VAR 0 15
19518: PUSH
19519: LD_INT 5
19521: EQUAL
19522: IFFALSE 19532
// r := 0 ;
19524: LD_ADDR_VAR 0 15
19528: PUSH
19529: LD_INT 0
19531: ST_TO_ADDR
// for j = r to 5 do
19532: LD_ADDR_VAR 0 10
19536: PUSH
19537: DOUBLE
19538: LD_VAR 0 15
19542: DEC
19543: ST_TO_ADDR
19544: LD_INT 5
19546: PUSH
19547: FOR_TO
19548: IFFALSE 19662
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19550: LD_ADDR_VAR 0 11
19554: PUSH
19555: LD_VAR 0 13
19559: PPUSH
19560: CALL_OW 250
19564: PPUSH
19565: LD_VAR 0 10
19569: PPUSH
19570: LD_INT 2
19572: PPUSH
19573: CALL_OW 272
19577: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19578: LD_ADDR_VAR 0 12
19582: PUSH
19583: LD_VAR 0 13
19587: PPUSH
19588: CALL_OW 251
19592: PPUSH
19593: LD_VAR 0 10
19597: PPUSH
19598: LD_INT 2
19600: PPUSH
19601: CALL_OW 273
19605: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19606: LD_VAR 0 11
19610: PPUSH
19611: LD_VAR 0 12
19615: PPUSH
19616: CALL_OW 488
19620: PUSH
19621: LD_VAR 0 11
19625: PPUSH
19626: LD_VAR 0 12
19630: PPUSH
19631: CALL_OW 428
19635: NOT
19636: AND
19637: IFFALSE 19660
// begin ComMoveXY ( tmp , _x , _y ) ;
19639: LD_VAR 0 13
19643: PPUSH
19644: LD_VAR 0 11
19648: PPUSH
19649: LD_VAR 0 12
19653: PPUSH
19654: CALL_OW 111
// break ;
19658: GO 19662
// end ; end ;
19660: GO 19547
19662: POP
19663: POP
// end ; end ;
19664: GO 18989
19666: POP
19667: POP
// end ;
19668: LD_VAR 0 8
19672: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19673: LD_INT 0
19675: PPUSH
// result := true ;
19676: LD_ADDR_VAR 0 3
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19684: LD_VAR 0 2
19688: PUSH
19689: LD_INT 24
19691: DOUBLE
19692: EQUAL
19693: IFTRUE 19703
19695: LD_INT 33
19697: DOUBLE
19698: EQUAL
19699: IFTRUE 19703
19701: GO 19728
19703: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_INT 32
19711: PPUSH
19712: LD_VAR 0 1
19716: PPUSH
19717: CALL_OW 321
19721: PUSH
19722: LD_INT 2
19724: EQUAL
19725: ST_TO_ADDR
19726: GO 20048
19728: LD_INT 20
19730: DOUBLE
19731: EQUAL
19732: IFTRUE 19736
19734: GO 19761
19736: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19737: LD_ADDR_VAR 0 3
19741: PUSH
19742: LD_INT 6
19744: PPUSH
19745: LD_VAR 0 1
19749: PPUSH
19750: CALL_OW 321
19754: PUSH
19755: LD_INT 2
19757: EQUAL
19758: ST_TO_ADDR
19759: GO 20048
19761: LD_INT 22
19763: DOUBLE
19764: EQUAL
19765: IFTRUE 19775
19767: LD_INT 36
19769: DOUBLE
19770: EQUAL
19771: IFTRUE 19775
19773: GO 19800
19775: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19776: LD_ADDR_VAR 0 3
19780: PUSH
19781: LD_INT 15
19783: PPUSH
19784: LD_VAR 0 1
19788: PPUSH
19789: CALL_OW 321
19793: PUSH
19794: LD_INT 2
19796: EQUAL
19797: ST_TO_ADDR
19798: GO 20048
19800: LD_INT 30
19802: DOUBLE
19803: EQUAL
19804: IFTRUE 19808
19806: GO 19833
19808: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19809: LD_ADDR_VAR 0 3
19813: PUSH
19814: LD_INT 20
19816: PPUSH
19817: LD_VAR 0 1
19821: PPUSH
19822: CALL_OW 321
19826: PUSH
19827: LD_INT 2
19829: EQUAL
19830: ST_TO_ADDR
19831: GO 20048
19833: LD_INT 28
19835: DOUBLE
19836: EQUAL
19837: IFTRUE 19847
19839: LD_INT 21
19841: DOUBLE
19842: EQUAL
19843: IFTRUE 19847
19845: GO 19872
19847: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19848: LD_ADDR_VAR 0 3
19852: PUSH
19853: LD_INT 21
19855: PPUSH
19856: LD_VAR 0 1
19860: PPUSH
19861: CALL_OW 321
19865: PUSH
19866: LD_INT 2
19868: EQUAL
19869: ST_TO_ADDR
19870: GO 20048
19872: LD_INT 16
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 19907
19880: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19881: LD_ADDR_VAR 0 3
19885: PUSH
19886: LD_EXP 51
19890: PPUSH
19891: LD_VAR 0 1
19895: PPUSH
19896: CALL_OW 321
19900: PUSH
19901: LD_INT 2
19903: EQUAL
19904: ST_TO_ADDR
19905: GO 20048
19907: LD_INT 19
19909: DOUBLE
19910: EQUAL
19911: IFTRUE 19921
19913: LD_INT 23
19915: DOUBLE
19916: EQUAL
19917: IFTRUE 19921
19919: GO 19948
19921: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19922: LD_ADDR_VAR 0 3
19926: PUSH
19927: LD_EXP 50
19931: PPUSH
19932: LD_VAR 0 1
19936: PPUSH
19937: CALL_OW 321
19941: PUSH
19942: LD_INT 2
19944: EQUAL
19945: ST_TO_ADDR
19946: GO 20048
19948: LD_INT 17
19950: DOUBLE
19951: EQUAL
19952: IFTRUE 19956
19954: GO 19981
19956: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19957: LD_ADDR_VAR 0 3
19961: PUSH
19962: LD_INT 39
19964: PPUSH
19965: LD_VAR 0 1
19969: PPUSH
19970: CALL_OW 321
19974: PUSH
19975: LD_INT 2
19977: EQUAL
19978: ST_TO_ADDR
19979: GO 20048
19981: LD_INT 18
19983: DOUBLE
19984: EQUAL
19985: IFTRUE 19989
19987: GO 20014
19989: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19990: LD_ADDR_VAR 0 3
19994: PUSH
19995: LD_INT 40
19997: PPUSH
19998: LD_VAR 0 1
20002: PPUSH
20003: CALL_OW 321
20007: PUSH
20008: LD_INT 2
20010: EQUAL
20011: ST_TO_ADDR
20012: GO 20048
20014: LD_INT 27
20016: DOUBLE
20017: EQUAL
20018: IFTRUE 20022
20020: GO 20047
20022: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
20023: LD_ADDR_VAR 0 3
20027: PUSH
20028: LD_INT 35
20030: PPUSH
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 321
20040: PUSH
20041: LD_INT 2
20043: EQUAL
20044: ST_TO_ADDR
20045: GO 20048
20047: POP
// end ;
20048: LD_VAR 0 3
20052: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
20053: LD_INT 0
20055: PPUSH
20056: PPUSH
20057: PPUSH
20058: PPUSH
20059: PPUSH
20060: PPUSH
20061: PPUSH
20062: PPUSH
20063: PPUSH
20064: PPUSH
20065: PPUSH
// result := false ;
20066: LD_ADDR_VAR 0 6
20070: PUSH
20071: LD_INT 0
20073: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
20074: LD_VAR 0 1
20078: NOT
20079: PUSH
20080: LD_VAR 0 1
20084: PPUSH
20085: CALL_OW 266
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: IN
20100: NOT
20101: OR
20102: PUSH
20103: LD_VAR 0 2
20107: NOT
20108: OR
20109: PUSH
20110: LD_VAR 0 5
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: LD_INT 3
20126: PUSH
20127: LD_INT 4
20129: PUSH
20130: LD_INT 5
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: IN
20141: NOT
20142: OR
20143: PUSH
20144: LD_VAR 0 3
20148: PPUSH
20149: LD_VAR 0 4
20153: PPUSH
20154: CALL_OW 488
20158: NOT
20159: OR
20160: IFFALSE 20164
// exit ;
20162: GO 20900
// side := GetSide ( depot ) ;
20164: LD_ADDR_VAR 0 9
20168: PUSH
20169: LD_VAR 0 1
20173: PPUSH
20174: CALL_OW 255
20178: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
20179: LD_VAR 0 9
20183: PPUSH
20184: LD_VAR 0 2
20188: PPUSH
20189: CALL 19673 0 2
20193: NOT
20194: IFFALSE 20198
// exit ;
20196: GO 20900
// pom := GetBase ( depot ) ;
20198: LD_ADDR_VAR 0 10
20202: PUSH
20203: LD_VAR 0 1
20207: PPUSH
20208: CALL_OW 274
20212: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20213: LD_ADDR_VAR 0 11
20217: PUSH
20218: LD_VAR 0 2
20222: PPUSH
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 248
20232: PPUSH
20233: CALL_OW 450
20237: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20238: LD_VAR 0 10
20242: PPUSH
20243: LD_INT 1
20245: PPUSH
20246: CALL_OW 275
20250: PUSH
20251: LD_VAR 0 11
20255: PUSH
20256: LD_INT 1
20258: ARRAY
20259: GREATEREQUAL
20260: PUSH
20261: LD_VAR 0 10
20265: PPUSH
20266: LD_INT 2
20268: PPUSH
20269: CALL_OW 275
20273: PUSH
20274: LD_VAR 0 11
20278: PUSH
20279: LD_INT 2
20281: ARRAY
20282: GREATEREQUAL
20283: AND
20284: PUSH
20285: LD_VAR 0 10
20289: PPUSH
20290: LD_INT 3
20292: PPUSH
20293: CALL_OW 275
20297: PUSH
20298: LD_VAR 0 11
20302: PUSH
20303: LD_INT 3
20305: ARRAY
20306: GREATEREQUAL
20307: AND
20308: NOT
20309: IFFALSE 20313
// exit ;
20311: GO 20900
// if GetBType ( depot ) = b_depot then
20313: LD_VAR 0 1
20317: PPUSH
20318: CALL_OW 266
20322: PUSH
20323: LD_INT 0
20325: EQUAL
20326: IFFALSE 20338
// dist := 28 else
20328: LD_ADDR_VAR 0 14
20332: PUSH
20333: LD_INT 28
20335: ST_TO_ADDR
20336: GO 20346
// dist := 36 ;
20338: LD_ADDR_VAR 0 14
20342: PUSH
20343: LD_INT 36
20345: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
20346: LD_VAR 0 1
20350: PPUSH
20351: LD_VAR 0 3
20355: PPUSH
20356: LD_VAR 0 4
20360: PPUSH
20361: CALL_OW 297
20365: PUSH
20366: LD_VAR 0 14
20370: GREATER
20371: IFFALSE 20375
// exit ;
20373: GO 20900
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
20375: LD_ADDR_VAR 0 12
20379: PUSH
20380: LD_VAR 0 2
20384: PPUSH
20385: LD_VAR 0 3
20389: PPUSH
20390: LD_VAR 0 4
20394: PPUSH
20395: LD_VAR 0 5
20399: PPUSH
20400: LD_VAR 0 1
20404: PPUSH
20405: CALL_OW 248
20409: PPUSH
20410: LD_INT 0
20412: PPUSH
20413: CALL 20905 0 6
20417: ST_TO_ADDR
// if not hexes then
20418: LD_VAR 0 12
20422: NOT
20423: IFFALSE 20427
// exit ;
20425: GO 20900
// hex := GetHexInfo ( x , y ) ;
20427: LD_ADDR_VAR 0 15
20431: PUSH
20432: LD_VAR 0 3
20436: PPUSH
20437: LD_VAR 0 4
20441: PPUSH
20442: CALL_OW 546
20446: ST_TO_ADDR
// if hex [ 1 ] then
20447: LD_VAR 0 15
20451: PUSH
20452: LD_INT 1
20454: ARRAY
20455: IFFALSE 20459
// exit ;
20457: GO 20900
// height := hex [ 2 ] ;
20459: LD_ADDR_VAR 0 13
20463: PUSH
20464: LD_VAR 0 15
20468: PUSH
20469: LD_INT 2
20471: ARRAY
20472: ST_TO_ADDR
// for i = 1 to hexes do
20473: LD_ADDR_VAR 0 7
20477: PUSH
20478: DOUBLE
20479: LD_INT 1
20481: DEC
20482: ST_TO_ADDR
20483: LD_VAR 0 12
20487: PUSH
20488: FOR_TO
20489: IFFALSE 20819
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20491: LD_VAR 0 12
20495: PUSH
20496: LD_VAR 0 7
20500: ARRAY
20501: PUSH
20502: LD_INT 1
20504: ARRAY
20505: PPUSH
20506: LD_VAR 0 12
20510: PUSH
20511: LD_VAR 0 7
20515: ARRAY
20516: PUSH
20517: LD_INT 2
20519: ARRAY
20520: PPUSH
20521: CALL_OW 488
20525: NOT
20526: PUSH
20527: LD_VAR 0 12
20531: PUSH
20532: LD_VAR 0 7
20536: ARRAY
20537: PUSH
20538: LD_INT 1
20540: ARRAY
20541: PPUSH
20542: LD_VAR 0 12
20546: PUSH
20547: LD_VAR 0 7
20551: ARRAY
20552: PUSH
20553: LD_INT 2
20555: ARRAY
20556: PPUSH
20557: CALL_OW 428
20561: PUSH
20562: LD_INT 0
20564: GREATER
20565: OR
20566: PUSH
20567: LD_VAR 0 12
20571: PUSH
20572: LD_VAR 0 7
20576: ARRAY
20577: PUSH
20578: LD_INT 1
20580: ARRAY
20581: PPUSH
20582: LD_VAR 0 12
20586: PUSH
20587: LD_VAR 0 7
20591: ARRAY
20592: PUSH
20593: LD_INT 2
20595: ARRAY
20596: PPUSH
20597: CALL_OW 351
20601: OR
20602: IFFALSE 20608
// exit ;
20604: POP
20605: POP
20606: GO 20900
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20608: LD_ADDR_VAR 0 8
20612: PUSH
20613: LD_VAR 0 12
20617: PUSH
20618: LD_VAR 0 7
20622: ARRAY
20623: PUSH
20624: LD_INT 1
20626: ARRAY
20627: PPUSH
20628: LD_VAR 0 12
20632: PUSH
20633: LD_VAR 0 7
20637: ARRAY
20638: PUSH
20639: LD_INT 2
20641: ARRAY
20642: PPUSH
20643: CALL_OW 546
20647: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20648: LD_VAR 0 8
20652: PUSH
20653: LD_INT 1
20655: ARRAY
20656: PUSH
20657: LD_VAR 0 8
20661: PUSH
20662: LD_INT 2
20664: ARRAY
20665: PUSH
20666: LD_VAR 0 13
20670: PUSH
20671: LD_INT 2
20673: PLUS
20674: GREATER
20675: OR
20676: PUSH
20677: LD_VAR 0 8
20681: PUSH
20682: LD_INT 2
20684: ARRAY
20685: PUSH
20686: LD_VAR 0 13
20690: PUSH
20691: LD_INT 2
20693: MINUS
20694: LESS
20695: OR
20696: PUSH
20697: LD_VAR 0 8
20701: PUSH
20702: LD_INT 3
20704: ARRAY
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: LD_INT 8
20711: PUSH
20712: LD_INT 9
20714: PUSH
20715: LD_INT 10
20717: PUSH
20718: LD_INT 11
20720: PUSH
20721: LD_INT 12
20723: PUSH
20724: LD_INT 13
20726: PUSH
20727: LD_INT 16
20729: PUSH
20730: LD_INT 17
20732: PUSH
20733: LD_INT 18
20735: PUSH
20736: LD_INT 19
20738: PUSH
20739: LD_INT 20
20741: PUSH
20742: LD_INT 21
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: IN
20760: NOT
20761: OR
20762: PUSH
20763: LD_VAR 0 8
20767: PUSH
20768: LD_INT 5
20770: ARRAY
20771: NOT
20772: OR
20773: PUSH
20774: LD_VAR 0 8
20778: PUSH
20779: LD_INT 6
20781: ARRAY
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 7
20791: PUSH
20792: LD_INT 9
20794: PUSH
20795: LD_INT 10
20797: PUSH
20798: LD_INT 11
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: IN
20809: NOT
20810: OR
20811: IFFALSE 20817
// exit ;
20813: POP
20814: POP
20815: GO 20900
// end ;
20817: GO 20488
20819: POP
20820: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20821: LD_VAR 0 9
20825: PPUSH
20826: LD_VAR 0 3
20830: PPUSH
20831: LD_VAR 0 4
20835: PPUSH
20836: LD_INT 20
20838: PPUSH
20839: CALL 12846 0 4
20843: PUSH
20844: LD_INT 4
20846: ARRAY
20847: IFFALSE 20851
// exit ;
20849: GO 20900
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20851: LD_VAR 0 2
20855: PUSH
20856: LD_INT 29
20858: PUSH
20859: LD_INT 30
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: IN
20866: PUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: LD_VAR 0 4
20876: PPUSH
20877: LD_VAR 0 9
20881: PPUSH
20882: CALL_OW 440
20886: NOT
20887: AND
20888: IFFALSE 20892
// exit ;
20890: GO 20900
// result := true ;
20892: LD_ADDR_VAR 0 6
20896: PUSH
20897: LD_INT 1
20899: ST_TO_ADDR
// end ;
20900: LD_VAR 0 6
20904: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20905: LD_INT 0
20907: PPUSH
20908: PPUSH
20909: PPUSH
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
20915: PPUSH
20916: PPUSH
20917: PPUSH
20918: PPUSH
20919: PPUSH
20920: PPUSH
20921: PPUSH
20922: PPUSH
20923: PPUSH
20924: PPUSH
20925: PPUSH
20926: PPUSH
20927: PPUSH
20928: PPUSH
20929: PPUSH
20930: PPUSH
20931: PPUSH
20932: PPUSH
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
20941: PPUSH
20942: PPUSH
20943: PPUSH
20944: PPUSH
20945: PPUSH
20946: PPUSH
20947: PPUSH
20948: PPUSH
20949: PPUSH
20950: PPUSH
20951: PPUSH
20952: PPUSH
20953: PPUSH
20954: PPUSH
20955: PPUSH
20956: PPUSH
20957: PPUSH
20958: PPUSH
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
20963: PPUSH
20964: PPUSH
// result = [ ] ;
20965: LD_ADDR_VAR 0 7
20969: PUSH
20970: EMPTY
20971: ST_TO_ADDR
// temp_list = [ ] ;
20972: LD_ADDR_VAR 0 9
20976: PUSH
20977: EMPTY
20978: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20979: LD_VAR 0 4
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 3
20995: PUSH
20996: LD_INT 4
20998: PUSH
20999: LD_INT 5
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: IN
21010: NOT
21011: PUSH
21012: LD_VAR 0 1
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: IN
21027: PUSH
21028: LD_VAR 0 5
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: LD_INT 3
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: IN
21047: NOT
21048: AND
21049: OR
21050: IFFALSE 21054
// exit ;
21052: GO 39445
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
21054: LD_VAR 0 1
21058: PUSH
21059: LD_INT 6
21061: PUSH
21062: LD_INT 7
21064: PUSH
21065: LD_INT 8
21067: PUSH
21068: LD_INT 13
21070: PUSH
21071: LD_INT 12
21073: PUSH
21074: LD_INT 15
21076: PUSH
21077: LD_INT 11
21079: PUSH
21080: LD_INT 14
21082: PUSH
21083: LD_INT 10
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: IN
21097: IFFALSE 21107
// btype = b_lab ;
21099: LD_ADDR_VAR 0 1
21103: PUSH
21104: LD_INT 6
21106: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
21107: LD_VAR 0 6
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: IN
21126: NOT
21127: PUSH
21128: LD_VAR 0 1
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: LD_INT 2
21141: PUSH
21142: LD_INT 3
21144: PUSH
21145: LD_INT 6
21147: PUSH
21148: LD_INT 36
21150: PUSH
21151: LD_INT 4
21153: PUSH
21154: LD_INT 5
21156: PUSH
21157: LD_INT 31
21159: PUSH
21160: LD_INT 32
21162: PUSH
21163: LD_INT 33
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: IN
21179: NOT
21180: PUSH
21181: LD_VAR 0 6
21185: PUSH
21186: LD_INT 1
21188: EQUAL
21189: AND
21190: OR
21191: PUSH
21192: LD_VAR 0 1
21196: PUSH
21197: LD_INT 2
21199: PUSH
21200: LD_INT 3
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: IN
21207: NOT
21208: PUSH
21209: LD_VAR 0 6
21213: PUSH
21214: LD_INT 2
21216: EQUAL
21217: AND
21218: OR
21219: IFFALSE 21229
// mode = 0 ;
21221: LD_ADDR_VAR 0 6
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// case mode of 0 :
21229: LD_VAR 0 6
21233: PUSH
21234: LD_INT 0
21236: DOUBLE
21237: EQUAL
21238: IFTRUE 21242
21240: GO 32695
21242: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21243: LD_ADDR_VAR 0 11
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 1
21271: PUSH
21272: LD_INT 0
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: NEG
21325: PUSH
21326: LD_INT 2
21328: NEG
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: LD_INT 2
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: LD_INT 2
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 3
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: LD_INT 3
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 1
21409: NEG
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21436: LD_ADDR_VAR 0 12
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: LD_INT 0
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 0
21453: PUSH
21454: LD_INT 1
21456: NEG
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: LD_INT 1
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 1
21548: NEG
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 2
21559: NEG
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 2
21570: NEG
21571: PUSH
21572: LD_INT 1
21574: NEG
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 3
21593: NEG
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 3
21604: NEG
21605: PUSH
21606: LD_INT 1
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21632: LD_ADDR_VAR 0 13
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 0
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 1
21701: NEG
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: LD_INT 2
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: LD_INT 1
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 2
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 2
21755: NEG
21756: PUSH
21757: LD_INT 1
21759: NEG
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 2
21767: NEG
21768: PUSH
21769: LD_INT 2
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 2
21779: NEG
21780: PUSH
21781: LD_INT 3
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 3
21791: NEG
21792: PUSH
21793: LD_INT 2
21795: NEG
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 3
21803: NEG
21804: PUSH
21805: LD_INT 3
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21831: LD_ADDR_VAR 0 14
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 0
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 0
21848: PUSH
21849: LD_INT 1
21851: NEG
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 1
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 0
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: NEG
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 1
21912: NEG
21913: PUSH
21914: LD_INT 2
21916: NEG
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: LD_INT 2
21927: NEG
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: LD_INT 3
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: LD_INT 3
21992: NEG
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: LD_INT 2
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22027: LD_ADDR_VAR 0 15
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: LD_INT 1
22047: NEG
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 0
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 1
22085: NEG
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: NEG
22097: PUSH
22098: LD_INT 1
22100: NEG
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: PUSH
22109: LD_INT 1
22111: NEG
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 2
22119: PUSH
22120: LD_INT 0
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 2
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: NEG
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: NEG
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 2
22161: NEG
22162: PUSH
22163: LD_INT 1
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 3
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22220: LD_ADDR_VAR 0 16
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 0
22237: PUSH
22238: LD_INT 1
22240: NEG
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 0
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: LD_INT 0
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 1
22289: NEG
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 2
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: LD_INT 1
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: LD_INT 2
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: LD_INT 1
22347: NEG
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 2
22355: NEG
22356: PUSH
22357: LD_INT 2
22359: NEG
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 3
22367: PUSH
22368: LD_INT 2
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 3
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22413: LD_ADDR_VAR 0 17
22417: PUSH
22418: LD_INT 0
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: LD_INT 1
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 0
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 1
22471: NEG
22472: PUSH
22473: LD_INT 0
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: NEG
22483: PUSH
22484: LD_INT 1
22486: NEG
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: LD_INT 2
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 0
22506: PUSH
22507: LD_INT 2
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: LD_INT 1
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 2
22589: NEG
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 2
22600: NEG
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 2
22612: NEG
22613: PUSH
22614: LD_INT 2
22616: NEG
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22643: LD_ADDR_VAR 0 18
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 1
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: NEG
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 1
22724: NEG
22725: PUSH
22726: LD_INT 2
22728: NEG
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: LD_INT 2
22739: NEG
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: LD_INT 1
22750: NEG
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: LD_INT 2
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 2
22819: NEG
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 2
22830: NEG
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 2
22842: NEG
22843: PUSH
22844: LD_INT 2
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22873: LD_ADDR_VAR 0 19
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: LD_INT 0
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 1
22931: NEG
22932: PUSH
22933: LD_INT 0
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: LD_INT 2
22958: NEG
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: LD_INT 2
22969: NEG
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 2
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 0
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: NEG
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: NEG
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 2
23060: NEG
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: LD_INT 2
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23103: LD_ADDR_VAR 0 20
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: LD_INT 0
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 1
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 0
23151: PUSH
23152: LD_INT 1
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 1
23161: NEG
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 1
23172: NEG
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: LD_INT 2
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 0
23196: PUSH
23197: LD_INT 2
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: LD_INT 1
23210: NEG
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 2
23238: PUSH
23239: LD_INT 2
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: LD_INT 2
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: LD_INT 2
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: LD_INT 1
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 2
23279: NEG
23280: PUSH
23281: LD_INT 0
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 2
23290: NEG
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: NEG
23303: PUSH
23304: LD_INT 2
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23333: LD_ADDR_VAR 0 21
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: LD_INT 1
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: LD_INT 1
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: LD_INT 1
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: LD_INT 2
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: LD_INT 2
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 2
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: LD_INT 2
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: NEG
23533: PUSH
23534: LD_INT 2
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23563: LD_ADDR_VAR 0 22
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: NEG
23633: PUSH
23634: LD_INT 1
23636: NEG
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 1
23644: NEG
23645: PUSH
23646: LD_INT 2
23648: NEG
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 2
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 2
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: LD_INT 2
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 0
23718: PUSH
23719: LD_INT 2
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: NEG
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 2
23750: NEG
23751: PUSH
23752: LD_INT 1
23754: NEG
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 2
23762: NEG
23763: PUSH
23764: LD_INT 2
23766: NEG
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23793: LD_ADDR_VAR 0 23
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: LD_INT 1
23813: NEG
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: LD_INT 1
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: NEG
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: LD_INT 1
23866: NEG
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: LD_INT 2
23878: NEG
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 2
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 2
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 2
23969: NEG
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 2
23980: NEG
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 2
23992: NEG
23993: PUSH
23994: LD_INT 2
23996: NEG
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 2
24004: NEG
24005: PUSH
24006: LD_INT 3
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: LD_INT 3
24020: NEG
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: LD_INT 2
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
24073: LD_ADDR_VAR 0 24
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 1
24142: NEG
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 2
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: LD_INT 2
24169: NEG
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: LD_INT 1
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 2
24249: NEG
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: LD_INT 2
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 2
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 3
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 3
24316: PUSH
24317: LD_INT 2
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
24349: LD_ADDR_VAR 0 25
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: LD_INT 1
24369: NEG
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: LD_INT 2
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 2
24445: NEG
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: LD_INT 1
24456: NEG
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 2
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 2
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 2
24484: PUSH
24485: LD_INT 2
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: LD_INT 2
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 0
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 2
24525: NEG
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 2
24548: NEG
24549: PUSH
24550: LD_INT 2
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 3
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 3
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: PUSH
24581: LD_INT 3
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24623: LD_ADDR_VAR 0 26
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: NEG
24693: PUSH
24694: LD_INT 1
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: LD_INT 2
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: LD_INT 2
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 1
24788: NEG
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 2
24799: NEG
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: NEG
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: LD_INT 2
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 3
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 2
24865: NEG
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24899: LD_ADDR_VAR 0 27
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: LD_INT 0
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: LD_INT 2
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 2
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: LD_INT 2
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: LD_INT 2
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: NEG
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 2
25086: NEG
25087: PUSH
25088: LD_INT 1
25090: NEG
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 2
25098: NEG
25099: PUSH
25100: LD_INT 2
25102: NEG
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: LD_INT 2
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 3
25132: NEG
25133: PUSH
25134: LD_INT 1
25136: NEG
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 3
25144: NEG
25145: PUSH
25146: LD_INT 2
25148: NEG
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25179: LD_ADDR_VAR 0 28
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 0
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 0
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 1
25248: NEG
25249: PUSH
25250: LD_INT 1
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: LD_INT 2
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 2
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: LD_INT 2
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 2
25355: NEG
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 2
25366: NEG
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 2
25378: NEG
25379: PUSH
25380: LD_INT 2
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 2
25390: NEG
25391: PUSH
25392: LD_INT 3
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 1
25402: NEG
25403: PUSH
25404: LD_INT 3
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 3
25414: NEG
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 3
25426: NEG
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25461: LD_ADDR_VAR 0 29
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 1
25481: NEG
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: LD_INT 1
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: NEG
25543: PUSH
25544: LD_INT 2
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: LD_INT 2
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 2
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: LD_INT 2
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 2
25627: NEG
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 2
25639: NEG
25640: PUSH
25641: LD_INT 2
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 2
25651: NEG
25652: PUSH
25653: LD_INT 3
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 3
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: NEG
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 3
25705: NEG
25706: PUSH
25707: LD_INT 2
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25740: LD_ADDR_VAR 0 30
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: LD_INT 1
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: NEG
25822: PUSH
25823: LD_INT 2
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: LD_INT 2
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: LD_INT 1
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: LD_INT 2
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 2
25906: NEG
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: NEG
25918: PUSH
25919: LD_INT 1
25921: NEG
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: LD_INT 3
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: LD_INT 2
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 3
25952: PUSH
25953: LD_INT 2
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: NEG
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 3
25983: NEG
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26018: LD_ADDR_VAR 0 31
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: LD_INT 1
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 2
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: LD_INT 1
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 2
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 2
26142: PUSH
26143: LD_INT 2
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 2
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 2
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 2
26183: NEG
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: NEG
26196: PUSH
26197: LD_INT 2
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: NEG
26208: PUSH
26209: LD_INT 3
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: LD_INT 1
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 3
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: LD_INT 3
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 3
26261: NEG
26262: PUSH
26263: LD_INT 2
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26296: LD_ADDR_VAR 0 32
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: LD_INT 2
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 2
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: LD_INT 2
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: LD_INT 2
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: NEG
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 2
26473: NEG
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: LD_INT 3
26489: NEG
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: LD_INT 2
26500: NEG
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 3
26508: PUSH
26509: LD_INT 2
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 2
26518: PUSH
26519: LD_INT 3
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 2
26528: NEG
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 3
26539: NEG
26540: PUSH
26541: LD_INT 1
26543: NEG
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26574: LD_ADDR_VAR 0 33
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 2
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 2
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 2
26729: NEG
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 2
26740: NEG
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 2
26764: NEG
26765: PUSH
26766: LD_INT 3
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 3
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 3
26818: NEG
26819: PUSH
26820: LD_INT 2
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26853: LD_ADDR_VAR 0 34
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: LD_INT 2
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: LD_INT 1
26960: NEG
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 2
27009: NEG
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 2
27020: NEG
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 2
27032: NEG
27033: PUSH
27034: LD_INT 2
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 3
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 2
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 3
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 3
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: NEG
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 3
27098: NEG
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27133: LD_ADDR_VAR 0 35
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 0
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: LD_INT 1
27206: NEG
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27245: LD_ADDR_VAR 0 36
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: LD_INT 1
27265: NEG
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: LD_INT 1
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: LD_INT 2
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27357: LD_ADDR_VAR 0 37
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27469: LD_ADDR_VAR 0 38
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: NEG
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27581: LD_ADDR_VAR 0 39
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: LD_INT 2
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27693: LD_ADDR_VAR 0 40
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27805: LD_ADDR_VAR 0 41
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: NEG
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: LD_INT 1
27878: NEG
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: LD_INT 2
27890: NEG
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: NEG
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: NEG
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 2
27983: NEG
27984: PUSH
27985: LD_INT 2
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: NEG
27996: PUSH
27997: LD_INT 3
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 3
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 3
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 3
28048: PUSH
28049: LD_INT 3
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: LD_INT 3
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 3
28079: NEG
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 3
28090: NEG
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 3
28102: NEG
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 3
28114: NEG
28115: PUSH
28116: LD_INT 3
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28155: LD_ADDR_VAR 0 42
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 2
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: NEG
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 2
28333: NEG
28334: PUSH
28335: LD_INT 2
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: NEG
28346: PUSH
28347: LD_INT 3
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: LD_INT 3
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: LD_INT 3
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 3
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 3
28401: PUSH
28402: LD_INT 3
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 2
28411: PUSH
28412: LD_INT 3
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: LD_INT 3
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: LD_INT 3
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 3
28452: NEG
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 3
28464: NEG
28465: PUSH
28466: LD_INT 3
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28505: LD_ADDR_VAR 0 43
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: NEG
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: LD_INT 2
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 2
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: LD_INT 1
28612: NEG
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 2
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: LD_INT 3
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: LD_INT 3
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 3
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 3
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: LD_INT 3
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 3
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 3
28801: NEG
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 3
28812: NEG
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28853: LD_ADDR_VAR 0 44
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 2
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 2
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: NEG
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: LD_INT 2
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: LD_INT 3
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 3
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 3
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 3
29096: PUSH
29097: LD_INT 3
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 2
29106: PUSH
29107: LD_INT 3
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: NEG
29117: PUSH
29118: LD_INT 1
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 3
29127: NEG
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 3
29138: NEG
29139: PUSH
29140: LD_INT 1
29142: NEG
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 3
29150: NEG
29151: PUSH
29152: LD_INT 2
29154: NEG
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 3
29162: NEG
29163: PUSH
29164: LD_INT 3
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29203: LD_ADDR_VAR 0 45
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 2
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: LD_INT 2
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 2
29369: NEG
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 2
29381: NEG
29382: PUSH
29383: LD_INT 2
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: LD_INT 3
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: LD_INT 3
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: LD_INT 3
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: LD_INT 2
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 3
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 3
29449: PUSH
29450: LD_INT 3
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: LD_INT 2
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 3
29512: NEG
29513: PUSH
29514: LD_INT 3
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29553: LD_ADDR_VAR 0 46
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 1
29634: NEG
29635: PUSH
29636: LD_INT 2
29638: NEG
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: LD_INT 2
29649: NEG
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 2
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 2
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: LD_INT 2
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 1
29708: NEG
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 2
29719: NEG
29720: PUSH
29721: LD_INT 0
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: LD_INT 3
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: LD_INT 2
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 2
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 3
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: LD_INT 3
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 1
29827: NEG
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 2
29838: NEG
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 3
29849: NEG
29850: PUSH
29851: LD_INT 0
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 3
29860: NEG
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29901: LD_ADDR_VAR 0 47
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: LD_INT 2
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 2
30016: NEG
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 2
30028: NEG
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30052: LD_ADDR_VAR 0 48
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: LD_INT 2
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: LD_INT 2
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 2
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30199: LD_ADDR_VAR 0 49
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 1
30257: NEG
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 1
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 2
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: LD_INT 2
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30343: LD_ADDR_VAR 0 50
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 2
30434: PUSH
30435: LD_INT 2
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 1
30444: PUSH
30445: LD_INT 2
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: LD_INT 2
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30487: LD_ADDR_VAR 0 51
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: LD_INT 0
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: LD_INT 1
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: LD_INT 1
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 1
30545: NEG
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: NEG
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: NEG
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: NEG
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30634: LD_ADDR_VAR 0 52
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: LD_INT 1
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: NEG
30716: PUSH
30717: LD_INT 2
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30785: LD_ADDR_VAR 0 53
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: NEG
30867: PUSH
30868: LD_INT 2
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: LD_INT 2
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 1
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: LD_INT 0
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: LD_INT 2
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: NEG
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: LD_INT 2
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31015: LD_ADDR_VAR 0 54
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: LD_INT 2
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: LD_INT 2
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 2
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 2
31202: NEG
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: NEG
31215: PUSH
31216: LD_INT 2
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31245: LD_ADDR_VAR 0 55
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 1
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 0
31338: PUSH
31339: LD_INT 2
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: NEG
31445: PUSH
31446: LD_INT 2
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31475: LD_ADDR_VAR 0 56
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 1
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: LD_INT 0
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31705: LD_ADDR_VAR 0 57
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: LD_INT 2
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 2
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: NEG
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: NEG
31905: PUSH
31906: LD_INT 2
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31935: LD_ADDR_VAR 0 58
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: LD_INT 2
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: NEG
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 2
32134: NEG
32135: PUSH
32136: LD_INT 2
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32165: LD_ADDR_VAR 0 59
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: NEG
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32253: LD_ADDR_VAR 0 60
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: NEG
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: NEG
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32341: LD_ADDR_VAR 0 61
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32429: LD_ADDR_VAR 0 62
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32517: LD_ADDR_VAR 0 63
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32605: LD_ADDR_VAR 0 64
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: ST_TO_ADDR
// end ; 1 :
32693: GO 38590
32695: LD_INT 1
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32703
32701: GO 35326
32703: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32704: LD_ADDR_VAR 0 11
32708: PUSH
32709: LD_INT 1
32711: NEG
32712: PUSH
32713: LD_INT 3
32715: NEG
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: LD_INT 3
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32748: LD_ADDR_VAR 0 12
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 3
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32789: LD_ADDR_VAR 0 13
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: LD_INT 3
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 3
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32829: LD_ADDR_VAR 0 14
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: LD_INT 3
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 3
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32870: LD_ADDR_VAR 0 15
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 3
32888: NEG
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 3
32899: NEG
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32914: LD_ADDR_VAR 0 16
32918: PUSH
32919: LD_INT 2
32921: NEG
32922: PUSH
32923: LD_INT 3
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 3
32933: NEG
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 3
32945: NEG
32946: PUSH
32947: LD_INT 3
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: LIST
32959: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32960: LD_ADDR_VAR 0 17
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 3
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 3
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 2
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: LIST
33003: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33004: LD_ADDR_VAR 0 18
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 3
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: LIST
33044: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33045: LD_ADDR_VAR 0 19
33049: PUSH
33050: LD_INT 3
33052: PUSH
33053: LD_INT 2
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 3
33062: PUSH
33063: LD_INT 3
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: LD_INT 3
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33085: LD_ADDR_VAR 0 20
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33126: LD_ADDR_VAR 0 21
33130: PUSH
33131: LD_INT 2
33133: NEG
33134: PUSH
33135: LD_INT 1
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 3
33144: NEG
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 3
33155: NEG
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: LIST
33169: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33170: LD_ADDR_VAR 0 22
33174: PUSH
33175: LD_INT 2
33177: NEG
33178: PUSH
33179: LD_INT 3
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 3
33189: NEG
33190: PUSH
33191: LD_INT 2
33193: NEG
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 3
33201: NEG
33202: PUSH
33203: LD_INT 3
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33216: LD_ADDR_VAR 0 23
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 3
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: LD_INT 4
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 3
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33260: LD_ADDR_VAR 0 24
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 3
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 4
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: LIST
33300: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33301: LD_ADDR_VAR 0 25
33305: PUSH
33306: LD_INT 3
33308: PUSH
33309: LD_INT 3
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 4
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 3
33328: PUSH
33329: LD_INT 4
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
33341: LD_ADDR_VAR 0 26
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: LD_INT 3
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: LD_INT 4
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: LD_INT 3
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
33382: LD_ADDR_VAR 0 27
33386: PUSH
33387: LD_INT 3
33389: NEG
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 3
33400: NEG
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 4
33411: NEG
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
33426: LD_ADDR_VAR 0 28
33430: PUSH
33431: LD_INT 3
33433: NEG
33434: PUSH
33435: LD_INT 3
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: LD_INT 4
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 4
33457: NEG
33458: PUSH
33459: LD_INT 3
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33472: LD_ADDR_VAR 0 29
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: LD_INT 3
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 3
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 4
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 4
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: LD_INT 3
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: LD_INT 5
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 5
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 4
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: LD_INT 6
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 6
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 5
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33627: LD_ADDR_VAR 0 30
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 3
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 3
33665: PUSH
33666: LD_INT 1
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 4
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 4
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 4
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 5
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 5
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 5
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 6
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 6
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33770: LD_ADDR_VAR 0 31
33774: PUSH
33775: LD_INT 3
33777: PUSH
33778: LD_INT 2
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 3
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: PUSH
33798: LD_INT 3
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 4
33807: PUSH
33808: LD_INT 3
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 4
33817: PUSH
33818: LD_INT 4
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: LD_INT 4
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 5
33837: PUSH
33838: LD_INT 4
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 5
33847: PUSH
33848: LD_INT 5
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 4
33857: PUSH
33858: LD_INT 5
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 6
33867: PUSH
33868: LD_INT 5
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 6
33877: PUSH
33878: LD_INT 6
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 5
33887: PUSH
33888: LD_INT 6
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33909: LD_ADDR_VAR 0 32
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: LD_INT 3
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 3
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 4
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 4
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 3
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: LD_INT 5
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: LD_INT 4
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: LD_INT 6
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: LD_INT 6
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: LD_INT 5
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
34052: LD_ADDR_VAR 0 33
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 3
34070: NEG
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 3
34081: NEG
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 3
34093: NEG
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 4
34104: NEG
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 4
34115: NEG
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 4
34127: NEG
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 5
34138: NEG
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 5
34149: NEG
34150: PUSH
34151: LD_INT 1
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 5
34161: NEG
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 6
34172: NEG
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 6
34183: NEG
34184: PUSH
34185: LD_INT 1
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34207: LD_ADDR_VAR 0 34
34211: PUSH
34212: LD_INT 2
34214: NEG
34215: PUSH
34216: LD_INT 3
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 3
34226: NEG
34227: PUSH
34228: LD_INT 2
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 3
34238: NEG
34239: PUSH
34240: LD_INT 3
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 3
34250: NEG
34251: PUSH
34252: LD_INT 4
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 4
34262: NEG
34263: PUSH
34264: LD_INT 3
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 4
34274: NEG
34275: PUSH
34276: LD_INT 4
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 4
34286: NEG
34287: PUSH
34288: LD_INT 5
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 5
34298: NEG
34299: PUSH
34300: LD_INT 4
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 5
34310: NEG
34311: PUSH
34312: LD_INT 5
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 5
34322: NEG
34323: PUSH
34324: LD_INT 6
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 6
34334: NEG
34335: PUSH
34336: LD_INT 5
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 6
34346: NEG
34347: PUSH
34348: LD_INT 6
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
34370: LD_ADDR_VAR 0 41
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: LD_INT 3
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
34414: LD_ADDR_VAR 0 42
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 1
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34455: LD_ADDR_VAR 0 43
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: LD_INT 2
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 3
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 3
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: LIST
34494: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34495: LD_ADDR_VAR 0 44
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: LD_INT 3
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34536: LD_ADDR_VAR 0 45
34540: PUSH
34541: LD_INT 2
34543: NEG
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: NEG
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 3
34565: NEG
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34580: LD_ADDR_VAR 0 46
34584: PUSH
34585: LD_INT 2
34587: NEG
34588: PUSH
34589: LD_INT 2
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 2
34599: NEG
34600: PUSH
34601: LD_INT 3
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 3
34611: NEG
34612: PUSH
34613: LD_INT 2
34615: NEG
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: LIST
34625: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34626: LD_ADDR_VAR 0 47
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 3
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: PUSH
34647: LD_INT 3
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34659: LD_ADDR_VAR 0 48
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34690: LD_ADDR_VAR 0 49
34694: PUSH
34695: LD_INT 3
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 3
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34719: LD_ADDR_VAR 0 50
34723: PUSH
34724: LD_INT 2
34726: PUSH
34727: LD_INT 3
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34748: LD_ADDR_VAR 0 51
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: LD_INT 2
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 2
34766: NEG
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34779: LD_ADDR_VAR 0 52
34783: PUSH
34784: LD_INT 3
34786: NEG
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 3
34798: NEG
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34812: LD_ADDR_VAR 0 53
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 3
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 3
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 2
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34856: LD_ADDR_VAR 0 54
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 3
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34897: LD_ADDR_VAR 0 55
34901: PUSH
34902: LD_INT 3
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: LD_INT 3
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 2
34924: PUSH
34925: LD_INT 3
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34937: LD_ADDR_VAR 0 56
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: LD_INT 3
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: LD_INT 2
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34978: LD_ADDR_VAR 0 57
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 3
34996: NEG
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 3
35007: NEG
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35022: LD_ADDR_VAR 0 58
35026: PUSH
35027: LD_INT 2
35029: NEG
35030: PUSH
35031: LD_INT 3
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 3
35041: NEG
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 3
35053: NEG
35054: PUSH
35055: LD_INT 3
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
35068: LD_ADDR_VAR 0 59
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 2
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35112: LD_ADDR_VAR 0 60
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35153: LD_ADDR_VAR 0 61
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: LIST
35192: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35193: LD_ADDR_VAR 0 62
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35234: LD_ADDR_VAR 0 63
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: NEG
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35278: LD_ADDR_VAR 0 64
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: LD_INT 2
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: LIST
35323: ST_TO_ADDR
// end ; 2 :
35324: GO 38590
35326: LD_INT 2
35328: DOUBLE
35329: EQUAL
35330: IFTRUE 35334
35332: GO 38589
35334: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
35335: LD_ADDR_VAR 0 29
35339: PUSH
35340: LD_INT 4
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 4
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 5
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 5
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 4
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 3
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 3
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 3
35414: PUSH
35415: LD_INT 2
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 5
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 3
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 3
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 4
35455: PUSH
35456: LD_INT 3
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 4
35465: PUSH
35466: LD_INT 4
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 3
35475: PUSH
35476: LD_INT 4
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: LD_INT 3
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 4
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 4
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: LD_INT 4
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 3
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: LD_INT 4
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 5
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 5
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 4
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: PUSH
35598: LD_INT 5
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 3
35618: NEG
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 3
35629: NEG
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: NEG
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 4
35674: NEG
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 4
35685: NEG
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 4
35697: NEG
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 2
35709: NEG
35710: PUSH
35711: LD_INT 2
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 4
35720: NEG
35721: PUSH
35722: LD_INT 4
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 4
35732: NEG
35733: PUSH
35734: LD_INT 5
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 3
35744: NEG
35745: PUSH
35746: LD_INT 4
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 3
35756: NEG
35757: PUSH
35758: LD_INT 3
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 4
35768: NEG
35769: PUSH
35770: LD_INT 3
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 5
35780: NEG
35781: PUSH
35782: LD_INT 4
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 5
35792: NEG
35793: PUSH
35794: LD_INT 5
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 3
35804: NEG
35805: PUSH
35806: LD_INT 5
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 5
35816: NEG
35817: PUSH
35818: LD_INT 3
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35873: LD_ADDR_VAR 0 30
35877: PUSH
35878: LD_INT 4
35880: PUSH
35881: LD_INT 4
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 4
35890: PUSH
35891: LD_INT 3
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 5
35900: PUSH
35901: LD_INT 4
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 5
35910: PUSH
35911: LD_INT 5
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 4
35920: PUSH
35921: LD_INT 5
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 3
35930: PUSH
35931: LD_INT 4
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 3
35940: PUSH
35941: LD_INT 3
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 5
35950: PUSH
35951: LD_INT 3
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 3
35960: PUSH
35961: LD_INT 5
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 3
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 3
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: LD_INT 4
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 4
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: LD_INT 3
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: LD_INT 2
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: LD_INT 4
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 2
36052: NEG
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 4
36063: NEG
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 4
36074: NEG
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 3
36086: NEG
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 3
36097: NEG
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 4
36108: NEG
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 5
36119: NEG
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 5
36130: NEG
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 5
36142: NEG
36143: PUSH
36144: LD_INT 2
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 3
36154: NEG
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 3
36165: NEG
36166: PUSH
36167: LD_INT 3
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 3
36177: NEG
36178: PUSH
36179: LD_INT 4
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 2
36189: NEG
36190: PUSH
36191: LD_INT 3
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 2
36201: NEG
36202: PUSH
36203: LD_INT 2
36205: NEG
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 3
36213: NEG
36214: PUSH
36215: LD_INT 2
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 4
36225: NEG
36226: PUSH
36227: LD_INT 3
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 4
36237: NEG
36238: PUSH
36239: LD_INT 4
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 2
36249: NEG
36250: PUSH
36251: LD_INT 4
36253: NEG
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 4
36261: NEG
36262: PUSH
36263: LD_INT 2
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 4
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 5
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: LD_INT 4
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 3
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 3
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 4
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 5
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: LD_INT 3
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 2
36363: NEG
36364: PUSH
36365: LD_INT 5
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
36420: LD_ADDR_VAR 0 31
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 4
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: LD_INT 3
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: LD_INT 4
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: LD_INT 5
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 5
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 4
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 3
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: PUSH
36500: LD_INT 5
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: LD_INT 3
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 3
36520: NEG
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 3
36531: NEG
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: NEG
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: NEG
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 3
36565: NEG
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 4
36576: NEG
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 4
36587: NEG
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 4
36599: NEG
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 4
36622: NEG
36623: PUSH
36624: LD_INT 4
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 4
36634: NEG
36635: PUSH
36636: LD_INT 5
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 3
36646: NEG
36647: PUSH
36648: LD_INT 4
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 3
36658: NEG
36659: PUSH
36660: LD_INT 3
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 4
36670: NEG
36671: PUSH
36672: LD_INT 3
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 5
36682: NEG
36683: PUSH
36684: LD_INT 4
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 5
36694: NEG
36695: PUSH
36696: LD_INT 5
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 3
36706: NEG
36707: PUSH
36708: LD_INT 5
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 5
36718: NEG
36719: PUSH
36720: LD_INT 3
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 3
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: LD_INT 4
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: LD_INT 3
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 2
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: LD_INT 3
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 4
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 2
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: NEG
36821: PUSH
36822: LD_INT 4
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 4
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 4
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 5
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 5
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 4
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 3
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 3
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 5
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36970: LD_ADDR_VAR 0 32
36974: PUSH
36975: LD_INT 4
36977: NEG
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 4
36988: NEG
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 3
37000: NEG
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 3
37011: NEG
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 4
37022: NEG
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 5
37033: NEG
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 5
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 5
37056: NEG
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 3
37068: NEG
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 3
37079: NEG
37080: PUSH
37081: LD_INT 3
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 3
37091: NEG
37092: PUSH
37093: LD_INT 4
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: LD_INT 3
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: NEG
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 3
37127: NEG
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 4
37139: NEG
37140: PUSH
37141: LD_INT 3
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 4
37151: NEG
37152: PUSH
37153: LD_INT 4
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: LD_INT 4
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 4
37175: NEG
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: LD_INT 4
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 5
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 4
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 3
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: LD_INT 3
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 4
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: LD_INT 5
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 3
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: LD_INT 5
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 3
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 3
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 4
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 4
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 2
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 4
37372: PUSH
37373: LD_INT 2
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 4
37382: PUSH
37383: LD_INT 4
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 4
37392: PUSH
37393: LD_INT 3
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 5
37402: PUSH
37403: LD_INT 4
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 5
37412: PUSH
37413: LD_INT 5
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 4
37422: PUSH
37423: LD_INT 5
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 3
37432: PUSH
37433: LD_INT 4
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 5
37452: PUSH
37453: LD_INT 3
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 3
37462: PUSH
37463: LD_INT 5
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37517: LD_ADDR_VAR 0 33
37521: PUSH
37522: LD_INT 4
37524: NEG
37525: PUSH
37526: LD_INT 4
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 4
37536: NEG
37537: PUSH
37538: LD_INT 5
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 3
37548: NEG
37549: PUSH
37550: LD_INT 4
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 3
37560: NEG
37561: PUSH
37562: LD_INT 3
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 4
37572: NEG
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 5
37584: NEG
37585: PUSH
37586: LD_INT 4
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 5
37596: NEG
37597: PUSH
37598: LD_INT 5
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 3
37608: NEG
37609: PUSH
37610: LD_INT 5
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 5
37620: NEG
37621: PUSH
37622: LD_INT 3
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: LD_INT 3
37635: NEG
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 4
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 3
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 2
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: LD_INT 3
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: LD_INT 4
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: LD_INT 2
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: LD_INT 4
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 4
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 4
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 5
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 5
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 4
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 3
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 3
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 3
37806: PUSH
37807: LD_INT 2
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 5
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 3
37827: PUSH
37828: LD_INT 3
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 3
37837: PUSH
37838: LD_INT 2
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 4
37847: PUSH
37848: LD_INT 3
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 4
37857: PUSH
37858: LD_INT 4
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 3
37867: PUSH
37868: LD_INT 4
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 4
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: LD_INT 4
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 4
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: LD_INT 3
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: LD_INT 4
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 5
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: LD_INT 5
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: LD_INT 4
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: LD_INT 3
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 5
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: NEG
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
38055: LD_ADDR_VAR 0 34
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: LD_INT 4
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 5
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 4
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 3
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: LD_INT 3
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 4
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: LD_INT 5
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 3
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: LD_INT 5
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 4
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 4
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 3
38205: PUSH
38206: LD_INT 1
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 4
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 4
38257: PUSH
38258: LD_INT 4
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 4
38267: PUSH
38268: LD_INT 3
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 5
38277: PUSH
38278: LD_INT 4
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 5
38287: PUSH
38288: LD_INT 5
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 4
38297: PUSH
38298: LD_INT 5
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: LD_INT 4
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 3
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 5
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: LD_INT 5
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 3
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 3
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: LD_INT 4
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 4
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 3
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: LD_INT 4
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: NEG
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 4
38440: NEG
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 4
38451: NEG
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 3
38463: NEG
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 3
38474: NEG
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 4
38485: NEG
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 5
38496: NEG
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 5
38507: NEG
38508: PUSH
38509: LD_INT 1
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 5
38519: NEG
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 3
38531: NEG
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: ST_TO_ADDR
// end ; end ;
38587: GO 38590
38589: POP
// case btype of b_depot , b_warehouse :
38590: LD_VAR 0 1
38594: PUSH
38595: LD_INT 0
38597: DOUBLE
38598: EQUAL
38599: IFTRUE 38609
38601: LD_INT 1
38603: DOUBLE
38604: EQUAL
38605: IFTRUE 38609
38607: GO 38810
38609: POP
// case nation of nation_american :
38610: LD_VAR 0 5
38614: PUSH
38615: LD_INT 1
38617: DOUBLE
38618: EQUAL
38619: IFTRUE 38623
38621: GO 38679
38623: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38624: LD_ADDR_VAR 0 9
38628: PUSH
38629: LD_VAR 0 11
38633: PUSH
38634: LD_VAR 0 12
38638: PUSH
38639: LD_VAR 0 13
38643: PUSH
38644: LD_VAR 0 14
38648: PUSH
38649: LD_VAR 0 15
38653: PUSH
38654: LD_VAR 0 16
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: PUSH
38667: LD_VAR 0 4
38671: PUSH
38672: LD_INT 1
38674: PLUS
38675: ARRAY
38676: ST_TO_ADDR
38677: GO 38808
38679: LD_INT 2
38681: DOUBLE
38682: EQUAL
38683: IFTRUE 38687
38685: GO 38743
38687: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38688: LD_ADDR_VAR 0 9
38692: PUSH
38693: LD_VAR 0 17
38697: PUSH
38698: LD_VAR 0 18
38702: PUSH
38703: LD_VAR 0 19
38707: PUSH
38708: LD_VAR 0 20
38712: PUSH
38713: LD_VAR 0 21
38717: PUSH
38718: LD_VAR 0 22
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: PUSH
38731: LD_VAR 0 4
38735: PUSH
38736: LD_INT 1
38738: PLUS
38739: ARRAY
38740: ST_TO_ADDR
38741: GO 38808
38743: LD_INT 3
38745: DOUBLE
38746: EQUAL
38747: IFTRUE 38751
38749: GO 38807
38751: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38752: LD_ADDR_VAR 0 9
38756: PUSH
38757: LD_VAR 0 23
38761: PUSH
38762: LD_VAR 0 24
38766: PUSH
38767: LD_VAR 0 25
38771: PUSH
38772: LD_VAR 0 26
38776: PUSH
38777: LD_VAR 0 27
38781: PUSH
38782: LD_VAR 0 28
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: PUSH
38795: LD_VAR 0 4
38799: PUSH
38800: LD_INT 1
38802: PLUS
38803: ARRAY
38804: ST_TO_ADDR
38805: GO 38808
38807: POP
38808: GO 39363
38810: LD_INT 2
38812: DOUBLE
38813: EQUAL
38814: IFTRUE 38824
38816: LD_INT 3
38818: DOUBLE
38819: EQUAL
38820: IFTRUE 38824
38822: GO 38880
38824: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38825: LD_ADDR_VAR 0 9
38829: PUSH
38830: LD_VAR 0 29
38834: PUSH
38835: LD_VAR 0 30
38839: PUSH
38840: LD_VAR 0 31
38844: PUSH
38845: LD_VAR 0 32
38849: PUSH
38850: LD_VAR 0 33
38854: PUSH
38855: LD_VAR 0 34
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: PUSH
38868: LD_VAR 0 4
38872: PUSH
38873: LD_INT 1
38875: PLUS
38876: ARRAY
38877: ST_TO_ADDR
38878: GO 39363
38880: LD_INT 16
38882: DOUBLE
38883: EQUAL
38884: IFTRUE 38942
38886: LD_INT 17
38888: DOUBLE
38889: EQUAL
38890: IFTRUE 38942
38892: LD_INT 18
38894: DOUBLE
38895: EQUAL
38896: IFTRUE 38942
38898: LD_INT 19
38900: DOUBLE
38901: EQUAL
38902: IFTRUE 38942
38904: LD_INT 22
38906: DOUBLE
38907: EQUAL
38908: IFTRUE 38942
38910: LD_INT 20
38912: DOUBLE
38913: EQUAL
38914: IFTRUE 38942
38916: LD_INT 21
38918: DOUBLE
38919: EQUAL
38920: IFTRUE 38942
38922: LD_INT 23
38924: DOUBLE
38925: EQUAL
38926: IFTRUE 38942
38928: LD_INT 24
38930: DOUBLE
38931: EQUAL
38932: IFTRUE 38942
38934: LD_INT 25
38936: DOUBLE
38937: EQUAL
38938: IFTRUE 38942
38940: GO 38998
38942: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38943: LD_ADDR_VAR 0 9
38947: PUSH
38948: LD_VAR 0 35
38952: PUSH
38953: LD_VAR 0 36
38957: PUSH
38958: LD_VAR 0 37
38962: PUSH
38963: LD_VAR 0 38
38967: PUSH
38968: LD_VAR 0 39
38972: PUSH
38973: LD_VAR 0 40
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: PUSH
38986: LD_VAR 0 4
38990: PUSH
38991: LD_INT 1
38993: PLUS
38994: ARRAY
38995: ST_TO_ADDR
38996: GO 39363
38998: LD_INT 6
39000: DOUBLE
39001: EQUAL
39002: IFTRUE 39054
39004: LD_INT 7
39006: DOUBLE
39007: EQUAL
39008: IFTRUE 39054
39010: LD_INT 8
39012: DOUBLE
39013: EQUAL
39014: IFTRUE 39054
39016: LD_INT 13
39018: DOUBLE
39019: EQUAL
39020: IFTRUE 39054
39022: LD_INT 12
39024: DOUBLE
39025: EQUAL
39026: IFTRUE 39054
39028: LD_INT 15
39030: DOUBLE
39031: EQUAL
39032: IFTRUE 39054
39034: LD_INT 11
39036: DOUBLE
39037: EQUAL
39038: IFTRUE 39054
39040: LD_INT 14
39042: DOUBLE
39043: EQUAL
39044: IFTRUE 39054
39046: LD_INT 10
39048: DOUBLE
39049: EQUAL
39050: IFTRUE 39054
39052: GO 39110
39054: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
39055: LD_ADDR_VAR 0 9
39059: PUSH
39060: LD_VAR 0 41
39064: PUSH
39065: LD_VAR 0 42
39069: PUSH
39070: LD_VAR 0 43
39074: PUSH
39075: LD_VAR 0 44
39079: PUSH
39080: LD_VAR 0 45
39084: PUSH
39085: LD_VAR 0 46
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: PUSH
39098: LD_VAR 0 4
39102: PUSH
39103: LD_INT 1
39105: PLUS
39106: ARRAY
39107: ST_TO_ADDR
39108: GO 39363
39110: LD_INT 36
39112: DOUBLE
39113: EQUAL
39114: IFTRUE 39118
39116: GO 39174
39118: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
39119: LD_ADDR_VAR 0 9
39123: PUSH
39124: LD_VAR 0 47
39128: PUSH
39129: LD_VAR 0 48
39133: PUSH
39134: LD_VAR 0 49
39138: PUSH
39139: LD_VAR 0 50
39143: PUSH
39144: LD_VAR 0 51
39148: PUSH
39149: LD_VAR 0 52
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: PUSH
39162: LD_VAR 0 4
39166: PUSH
39167: LD_INT 1
39169: PLUS
39170: ARRAY
39171: ST_TO_ADDR
39172: GO 39363
39174: LD_INT 4
39176: DOUBLE
39177: EQUAL
39178: IFTRUE 39200
39180: LD_INT 5
39182: DOUBLE
39183: EQUAL
39184: IFTRUE 39200
39186: LD_INT 34
39188: DOUBLE
39189: EQUAL
39190: IFTRUE 39200
39192: LD_INT 37
39194: DOUBLE
39195: EQUAL
39196: IFTRUE 39200
39198: GO 39256
39200: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39201: LD_ADDR_VAR 0 9
39205: PUSH
39206: LD_VAR 0 53
39210: PUSH
39211: LD_VAR 0 54
39215: PUSH
39216: LD_VAR 0 55
39220: PUSH
39221: LD_VAR 0 56
39225: PUSH
39226: LD_VAR 0 57
39230: PUSH
39231: LD_VAR 0 58
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: PUSH
39244: LD_VAR 0 4
39248: PUSH
39249: LD_INT 1
39251: PLUS
39252: ARRAY
39253: ST_TO_ADDR
39254: GO 39363
39256: LD_INT 31
39258: DOUBLE
39259: EQUAL
39260: IFTRUE 39306
39262: LD_INT 32
39264: DOUBLE
39265: EQUAL
39266: IFTRUE 39306
39268: LD_INT 33
39270: DOUBLE
39271: EQUAL
39272: IFTRUE 39306
39274: LD_INT 27
39276: DOUBLE
39277: EQUAL
39278: IFTRUE 39306
39280: LD_INT 26
39282: DOUBLE
39283: EQUAL
39284: IFTRUE 39306
39286: LD_INT 28
39288: DOUBLE
39289: EQUAL
39290: IFTRUE 39306
39292: LD_INT 29
39294: DOUBLE
39295: EQUAL
39296: IFTRUE 39306
39298: LD_INT 30
39300: DOUBLE
39301: EQUAL
39302: IFTRUE 39306
39304: GO 39362
39306: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39307: LD_ADDR_VAR 0 9
39311: PUSH
39312: LD_VAR 0 59
39316: PUSH
39317: LD_VAR 0 60
39321: PUSH
39322: LD_VAR 0 61
39326: PUSH
39327: LD_VAR 0 62
39331: PUSH
39332: LD_VAR 0 63
39336: PUSH
39337: LD_VAR 0 64
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: LD_VAR 0 4
39354: PUSH
39355: LD_INT 1
39357: PLUS
39358: ARRAY
39359: ST_TO_ADDR
39360: GO 39363
39362: POP
// temp_list2 = [ ] ;
39363: LD_ADDR_VAR 0 10
39367: PUSH
39368: EMPTY
39369: ST_TO_ADDR
// for i in temp_list do
39370: LD_ADDR_VAR 0 8
39374: PUSH
39375: LD_VAR 0 9
39379: PUSH
39380: FOR_IN
39381: IFFALSE 39433
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
39383: LD_ADDR_VAR 0 10
39387: PUSH
39388: LD_VAR 0 10
39392: PUSH
39393: LD_VAR 0 8
39397: PUSH
39398: LD_INT 1
39400: ARRAY
39401: PUSH
39402: LD_VAR 0 2
39406: PLUS
39407: PUSH
39408: LD_VAR 0 8
39412: PUSH
39413: LD_INT 2
39415: ARRAY
39416: PUSH
39417: LD_VAR 0 3
39421: PLUS
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: EMPTY
39428: LIST
39429: ADD
39430: ST_TO_ADDR
39431: GO 39380
39433: POP
39434: POP
// result = temp_list2 ;
39435: LD_ADDR_VAR 0 7
39439: PUSH
39440: LD_VAR 0 10
39444: ST_TO_ADDR
// end ;
39445: LD_VAR 0 7
39449: RET
// export function EnemyInRange ( unit , dist ) ; begin
39450: LD_INT 0
39452: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39453: LD_ADDR_VAR 0 3
39457: PUSH
39458: LD_VAR 0 1
39462: PPUSH
39463: CALL_OW 255
39467: PPUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: CALL_OW 250
39477: PPUSH
39478: LD_VAR 0 1
39482: PPUSH
39483: CALL_OW 251
39487: PPUSH
39488: LD_VAR 0 2
39492: PPUSH
39493: CALL 12846 0 4
39497: PUSH
39498: LD_INT 4
39500: ARRAY
39501: ST_TO_ADDR
// end ;
39502: LD_VAR 0 3
39506: RET
// export function PlayerSeeMe ( unit ) ; begin
39507: LD_INT 0
39509: PPUSH
// result := See ( your_side , unit ) ;
39510: LD_ADDR_VAR 0 2
39514: PUSH
39515: LD_OWVAR 2
39519: PPUSH
39520: LD_VAR 0 1
39524: PPUSH
39525: CALL_OW 292
39529: ST_TO_ADDR
// end ;
39530: LD_VAR 0 2
39534: RET
// export function ReverseDir ( unit ) ; begin
39535: LD_INT 0
39537: PPUSH
// if not unit then
39538: LD_VAR 0 1
39542: NOT
39543: IFFALSE 39547
// exit ;
39545: GO 39570
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39547: LD_ADDR_VAR 0 2
39551: PUSH
39552: LD_VAR 0 1
39556: PPUSH
39557: CALL_OW 254
39561: PUSH
39562: LD_INT 3
39564: PLUS
39565: PUSH
39566: LD_INT 6
39568: MOD
39569: ST_TO_ADDR
// end ;
39570: LD_VAR 0 2
39574: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39575: LD_INT 0
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
// if not unit or not hexes then
39583: LD_VAR 0 1
39587: NOT
39588: PUSH
39589: LD_VAR 0 2
39593: NOT
39594: OR
39595: IFFALSE 39599
// exit ;
39597: GO 39722
// dist := 9999 ;
39599: LD_ADDR_VAR 0 5
39603: PUSH
39604: LD_INT 9999
39606: ST_TO_ADDR
// for i = 1 to hexes do
39607: LD_ADDR_VAR 0 4
39611: PUSH
39612: DOUBLE
39613: LD_INT 1
39615: DEC
39616: ST_TO_ADDR
39617: LD_VAR 0 2
39621: PUSH
39622: FOR_TO
39623: IFFALSE 39710
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39625: LD_ADDR_VAR 0 6
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: LD_VAR 0 2
39639: PUSH
39640: LD_VAR 0 4
39644: ARRAY
39645: PUSH
39646: LD_INT 1
39648: ARRAY
39649: PPUSH
39650: LD_VAR 0 2
39654: PUSH
39655: LD_VAR 0 4
39659: ARRAY
39660: PUSH
39661: LD_INT 2
39663: ARRAY
39664: PPUSH
39665: CALL_OW 297
39669: ST_TO_ADDR
// if tdist < dist then
39670: LD_VAR 0 6
39674: PUSH
39675: LD_VAR 0 5
39679: LESS
39680: IFFALSE 39708
// begin hex := hexes [ i ] ;
39682: LD_ADDR_VAR 0 8
39686: PUSH
39687: LD_VAR 0 2
39691: PUSH
39692: LD_VAR 0 4
39696: ARRAY
39697: ST_TO_ADDR
// dist := tdist ;
39698: LD_ADDR_VAR 0 5
39702: PUSH
39703: LD_VAR 0 6
39707: ST_TO_ADDR
// end ; end ;
39708: GO 39622
39710: POP
39711: POP
// result := hex ;
39712: LD_ADDR_VAR 0 3
39716: PUSH
39717: LD_VAR 0 8
39721: ST_TO_ADDR
// end ;
39722: LD_VAR 0 3
39726: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39727: LD_INT 0
39729: PPUSH
39730: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39731: LD_VAR 0 1
39735: NOT
39736: PUSH
39737: LD_VAR 0 1
39741: PUSH
39742: LD_INT 21
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 23
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PPUSH
39766: CALL_OW 69
39770: IN
39771: NOT
39772: OR
39773: IFFALSE 39777
// exit ;
39775: GO 39824
// for i = 1 to 3 do
39777: LD_ADDR_VAR 0 3
39781: PUSH
39782: DOUBLE
39783: LD_INT 1
39785: DEC
39786: ST_TO_ADDR
39787: LD_INT 3
39789: PUSH
39790: FOR_TO
39791: IFFALSE 39822
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39793: LD_VAR 0 1
39797: PPUSH
39798: CALL_OW 250
39802: PPUSH
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 251
39812: PPUSH
39813: LD_INT 1
39815: PPUSH
39816: CALL_OW 453
39820: GO 39790
39822: POP
39823: POP
// end ;
39824: LD_VAR 0 2
39828: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39829: LD_INT 0
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
39837: LD_VAR 0 1
39841: NOT
39842: PUSH
39843: LD_VAR 0 2
39847: NOT
39848: OR
39849: PUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 314
39859: OR
39860: IFFALSE 39864
// exit ;
39862: GO 40305
// x := GetX ( enemy_unit ) ;
39864: LD_ADDR_VAR 0 7
39868: PUSH
39869: LD_VAR 0 2
39873: PPUSH
39874: CALL_OW 250
39878: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39879: LD_ADDR_VAR 0 8
39883: PUSH
39884: LD_VAR 0 2
39888: PPUSH
39889: CALL_OW 251
39893: ST_TO_ADDR
// if not x or not y then
39894: LD_VAR 0 7
39898: NOT
39899: PUSH
39900: LD_VAR 0 8
39904: NOT
39905: OR
39906: IFFALSE 39910
// exit ;
39908: GO 40305
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39910: LD_ADDR_VAR 0 6
39914: PUSH
39915: LD_VAR 0 7
39919: PPUSH
39920: LD_INT 0
39922: PPUSH
39923: LD_INT 4
39925: PPUSH
39926: CALL_OW 272
39930: PUSH
39931: LD_VAR 0 8
39935: PPUSH
39936: LD_INT 0
39938: PPUSH
39939: LD_INT 4
39941: PPUSH
39942: CALL_OW 273
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_VAR 0 7
39955: PPUSH
39956: LD_INT 1
39958: PPUSH
39959: LD_INT 4
39961: PPUSH
39962: CALL_OW 272
39966: PUSH
39967: LD_VAR 0 8
39971: PPUSH
39972: LD_INT 1
39974: PPUSH
39975: LD_INT 4
39977: PPUSH
39978: CALL_OW 273
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_VAR 0 7
39991: PPUSH
39992: LD_INT 2
39994: PPUSH
39995: LD_INT 4
39997: PPUSH
39998: CALL_OW 272
40002: PUSH
40003: LD_VAR 0 8
40007: PPUSH
40008: LD_INT 2
40010: PPUSH
40011: LD_INT 4
40013: PPUSH
40014: CALL_OW 273
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_VAR 0 7
40027: PPUSH
40028: LD_INT 3
40030: PPUSH
40031: LD_INT 4
40033: PPUSH
40034: CALL_OW 272
40038: PUSH
40039: LD_VAR 0 8
40043: PPUSH
40044: LD_INT 3
40046: PPUSH
40047: LD_INT 4
40049: PPUSH
40050: CALL_OW 273
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_VAR 0 7
40063: PPUSH
40064: LD_INT 4
40066: PPUSH
40067: LD_INT 4
40069: PPUSH
40070: CALL_OW 272
40074: PUSH
40075: LD_VAR 0 8
40079: PPUSH
40080: LD_INT 4
40082: PPUSH
40083: LD_INT 4
40085: PPUSH
40086: CALL_OW 273
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_VAR 0 7
40099: PPUSH
40100: LD_INT 5
40102: PPUSH
40103: LD_INT 4
40105: PPUSH
40106: CALL_OW 272
40110: PUSH
40111: LD_VAR 0 8
40115: PPUSH
40116: LD_INT 5
40118: PPUSH
40119: LD_INT 4
40121: PPUSH
40122: CALL_OW 273
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: ST_TO_ADDR
// for i = tmp downto 1 do
40139: LD_ADDR_VAR 0 4
40143: PUSH
40144: DOUBLE
40145: LD_VAR 0 6
40149: INC
40150: ST_TO_ADDR
40151: LD_INT 1
40153: PUSH
40154: FOR_DOWNTO
40155: IFFALSE 40256
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40157: LD_VAR 0 6
40161: PUSH
40162: LD_VAR 0 4
40166: ARRAY
40167: PUSH
40168: LD_INT 1
40170: ARRAY
40171: PPUSH
40172: LD_VAR 0 6
40176: PUSH
40177: LD_VAR 0 4
40181: ARRAY
40182: PUSH
40183: LD_INT 2
40185: ARRAY
40186: PPUSH
40187: CALL_OW 488
40191: NOT
40192: PUSH
40193: LD_VAR 0 6
40197: PUSH
40198: LD_VAR 0 4
40202: ARRAY
40203: PUSH
40204: LD_INT 1
40206: ARRAY
40207: PPUSH
40208: LD_VAR 0 6
40212: PUSH
40213: LD_VAR 0 4
40217: ARRAY
40218: PUSH
40219: LD_INT 2
40221: ARRAY
40222: PPUSH
40223: CALL_OW 428
40227: PUSH
40228: LD_INT 0
40230: NONEQUAL
40231: OR
40232: IFFALSE 40254
// tmp := Delete ( tmp , i ) ;
40234: LD_ADDR_VAR 0 6
40238: PUSH
40239: LD_VAR 0 6
40243: PPUSH
40244: LD_VAR 0 4
40248: PPUSH
40249: CALL_OW 3
40253: ST_TO_ADDR
40254: GO 40154
40256: POP
40257: POP
// j := GetClosestHex ( unit , tmp ) ;
40258: LD_ADDR_VAR 0 5
40262: PUSH
40263: LD_VAR 0 1
40267: PPUSH
40268: LD_VAR 0 6
40272: PPUSH
40273: CALL 39575 0 2
40277: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40278: LD_VAR 0 1
40282: PPUSH
40283: LD_VAR 0 5
40287: PUSH
40288: LD_INT 1
40290: ARRAY
40291: PPUSH
40292: LD_VAR 0 5
40296: PUSH
40297: LD_INT 2
40299: ARRAY
40300: PPUSH
40301: CALL_OW 111
// end ;
40305: LD_VAR 0 3
40309: RET
// export function PrepareApemanSoldier ( ) ; begin
40310: LD_INT 0
40312: PPUSH
// uc_nation := 0 ;
40313: LD_ADDR_OWVAR 21
40317: PUSH
40318: LD_INT 0
40320: ST_TO_ADDR
// hc_sex := sex_male ;
40321: LD_ADDR_OWVAR 27
40325: PUSH
40326: LD_INT 1
40328: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
40329: LD_ADDR_OWVAR 28
40333: PUSH
40334: LD_INT 15
40336: ST_TO_ADDR
// hc_gallery :=  ;
40337: LD_ADDR_OWVAR 33
40341: PUSH
40342: LD_STRING 
40344: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40345: LD_ADDR_OWVAR 31
40349: PUSH
40350: LD_INT 0
40352: PPUSH
40353: LD_INT 3
40355: PPUSH
40356: CALL_OW 12
40360: PUSH
40361: LD_INT 0
40363: PPUSH
40364: LD_INT 3
40366: PPUSH
40367: CALL_OW 12
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: ST_TO_ADDR
// end ;
40384: LD_VAR 0 1
40388: RET
// export function PrepareApemanEngineer ( ) ; begin
40389: LD_INT 0
40391: PPUSH
// uc_nation := 0 ;
40392: LD_ADDR_OWVAR 21
40396: PUSH
40397: LD_INT 0
40399: ST_TO_ADDR
// hc_sex := sex_male ;
40400: LD_ADDR_OWVAR 27
40404: PUSH
40405: LD_INT 1
40407: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
40408: LD_ADDR_OWVAR 28
40412: PUSH
40413: LD_INT 16
40415: ST_TO_ADDR
// hc_gallery :=  ;
40416: LD_ADDR_OWVAR 33
40420: PUSH
40421: LD_STRING 
40423: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40424: LD_ADDR_OWVAR 31
40428: PUSH
40429: LD_INT 0
40431: PPUSH
40432: LD_INT 3
40434: PPUSH
40435: CALL_OW 12
40439: PUSH
40440: LD_INT 0
40442: PPUSH
40443: LD_INT 3
40445: PPUSH
40446: CALL_OW 12
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: ST_TO_ADDR
// end ;
40463: LD_VAR 0 1
40467: RET
// export function PrepareApeman ( agressivity ) ; begin
40468: LD_INT 0
40470: PPUSH
// uc_side := 0 ;
40471: LD_ADDR_OWVAR 20
40475: PUSH
40476: LD_INT 0
40478: ST_TO_ADDR
// uc_nation := 0 ;
40479: LD_ADDR_OWVAR 21
40483: PUSH
40484: LD_INT 0
40486: ST_TO_ADDR
// hc_sex := sex_male ;
40487: LD_ADDR_OWVAR 27
40491: PUSH
40492: LD_INT 1
40494: ST_TO_ADDR
// hc_class := class_apeman ;
40495: LD_ADDR_OWVAR 28
40499: PUSH
40500: LD_INT 12
40502: ST_TO_ADDR
// hc_gallery :=  ;
40503: LD_ADDR_OWVAR 33
40507: PUSH
40508: LD_STRING 
40510: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40511: LD_ADDR_OWVAR 35
40515: PUSH
40516: LD_VAR 0 1
40520: NEG
40521: PPUSH
40522: LD_VAR 0 1
40526: PPUSH
40527: CALL_OW 12
40531: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40532: LD_ADDR_OWVAR 31
40536: PUSH
40537: LD_INT 0
40539: PPUSH
40540: LD_INT 3
40542: PPUSH
40543: CALL_OW 12
40547: PUSH
40548: LD_INT 0
40550: PPUSH
40551: LD_INT 3
40553: PPUSH
40554: CALL_OW 12
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: ST_TO_ADDR
// end ;
40571: LD_VAR 0 2
40575: RET
// export function PrepareTiger ( agressivity ) ; begin
40576: LD_INT 0
40578: PPUSH
// uc_side := 0 ;
40579: LD_ADDR_OWVAR 20
40583: PUSH
40584: LD_INT 0
40586: ST_TO_ADDR
// uc_nation := 0 ;
40587: LD_ADDR_OWVAR 21
40591: PUSH
40592: LD_INT 0
40594: ST_TO_ADDR
// hc_class := class_tiger ;
40595: LD_ADDR_OWVAR 28
40599: PUSH
40600: LD_INT 14
40602: ST_TO_ADDR
// hc_gallery :=  ;
40603: LD_ADDR_OWVAR 33
40607: PUSH
40608: LD_STRING 
40610: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40611: LD_ADDR_OWVAR 35
40615: PUSH
40616: LD_VAR 0 1
40620: NEG
40621: PPUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 12
40631: ST_TO_ADDR
// end ;
40632: LD_VAR 0 2
40636: RET
// export function PrepareEnchidna ( ) ; begin
40637: LD_INT 0
40639: PPUSH
// uc_side := 0 ;
40640: LD_ADDR_OWVAR 20
40644: PUSH
40645: LD_INT 0
40647: ST_TO_ADDR
// uc_nation := 0 ;
40648: LD_ADDR_OWVAR 21
40652: PUSH
40653: LD_INT 0
40655: ST_TO_ADDR
// hc_class := class_baggie ;
40656: LD_ADDR_OWVAR 28
40660: PUSH
40661: LD_INT 13
40663: ST_TO_ADDR
// hc_gallery :=  ;
40664: LD_ADDR_OWVAR 33
40668: PUSH
40669: LD_STRING 
40671: ST_TO_ADDR
// end ;
40672: LD_VAR 0 1
40676: RET
// export function PrepareFrog ( ) ; begin
40677: LD_INT 0
40679: PPUSH
// uc_side := 0 ;
40680: LD_ADDR_OWVAR 20
40684: PUSH
40685: LD_INT 0
40687: ST_TO_ADDR
// uc_nation := 0 ;
40688: LD_ADDR_OWVAR 21
40692: PUSH
40693: LD_INT 0
40695: ST_TO_ADDR
// hc_class := class_frog ;
40696: LD_ADDR_OWVAR 28
40700: PUSH
40701: LD_INT 19
40703: ST_TO_ADDR
// hc_gallery :=  ;
40704: LD_ADDR_OWVAR 33
40708: PUSH
40709: LD_STRING 
40711: ST_TO_ADDR
// end ;
40712: LD_VAR 0 1
40716: RET
// export function PrepareFish ( ) ; begin
40717: LD_INT 0
40719: PPUSH
// uc_side := 0 ;
40720: LD_ADDR_OWVAR 20
40724: PUSH
40725: LD_INT 0
40727: ST_TO_ADDR
// uc_nation := 0 ;
40728: LD_ADDR_OWVAR 21
40732: PUSH
40733: LD_INT 0
40735: ST_TO_ADDR
// hc_class := class_fish ;
40736: LD_ADDR_OWVAR 28
40740: PUSH
40741: LD_INT 20
40743: ST_TO_ADDR
// hc_gallery :=  ;
40744: LD_ADDR_OWVAR 33
40748: PUSH
40749: LD_STRING 
40751: ST_TO_ADDR
// end ;
40752: LD_VAR 0 1
40756: RET
// export function PrepareBird ( ) ; begin
40757: LD_INT 0
40759: PPUSH
// uc_side := 0 ;
40760: LD_ADDR_OWVAR 20
40764: PUSH
40765: LD_INT 0
40767: ST_TO_ADDR
// uc_nation := 0 ;
40768: LD_ADDR_OWVAR 21
40772: PUSH
40773: LD_INT 0
40775: ST_TO_ADDR
// hc_class := class_phororhacos ;
40776: LD_ADDR_OWVAR 28
40780: PUSH
40781: LD_INT 18
40783: ST_TO_ADDR
// hc_gallery :=  ;
40784: LD_ADDR_OWVAR 33
40788: PUSH
40789: LD_STRING 
40791: ST_TO_ADDR
// end ;
40792: LD_VAR 0 1
40796: RET
// export function PrepareHorse ( ) ; begin
40797: LD_INT 0
40799: PPUSH
// uc_side := 0 ;
40800: LD_ADDR_OWVAR 20
40804: PUSH
40805: LD_INT 0
40807: ST_TO_ADDR
// uc_nation := 0 ;
40808: LD_ADDR_OWVAR 21
40812: PUSH
40813: LD_INT 0
40815: ST_TO_ADDR
// hc_class := class_horse ;
40816: LD_ADDR_OWVAR 28
40820: PUSH
40821: LD_INT 21
40823: ST_TO_ADDR
// hc_gallery :=  ;
40824: LD_ADDR_OWVAR 33
40828: PUSH
40829: LD_STRING 
40831: ST_TO_ADDR
// end ;
40832: LD_VAR 0 1
40836: RET
// export function PrepareMastodont ( ) ; begin
40837: LD_INT 0
40839: PPUSH
// uc_side := 0 ;
40840: LD_ADDR_OWVAR 20
40844: PUSH
40845: LD_INT 0
40847: ST_TO_ADDR
// uc_nation := 0 ;
40848: LD_ADDR_OWVAR 21
40852: PUSH
40853: LD_INT 0
40855: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40856: LD_ADDR_OWVAR 37
40860: PUSH
40861: LD_INT 31
40863: ST_TO_ADDR
// vc_control := control_rider ;
40864: LD_ADDR_OWVAR 38
40868: PUSH
40869: LD_INT 4
40871: ST_TO_ADDR
// end ;
40872: LD_VAR 0 1
40876: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40877: LD_INT 0
40879: PPUSH
40880: PPUSH
40881: PPUSH
// uc_side = 0 ;
40882: LD_ADDR_OWVAR 20
40886: PUSH
40887: LD_INT 0
40889: ST_TO_ADDR
// uc_nation = 0 ;
40890: LD_ADDR_OWVAR 21
40894: PUSH
40895: LD_INT 0
40897: ST_TO_ADDR
// InitHc_All ( ) ;
40898: CALL_OW 584
// InitVc ;
40902: CALL_OW 20
// if mastodonts then
40906: LD_VAR 0 6
40910: IFFALSE 40977
// for i = 1 to mastodonts do
40912: LD_ADDR_VAR 0 11
40916: PUSH
40917: DOUBLE
40918: LD_INT 1
40920: DEC
40921: ST_TO_ADDR
40922: LD_VAR 0 6
40926: PUSH
40927: FOR_TO
40928: IFFALSE 40975
// begin vc_chassis := 31 ;
40930: LD_ADDR_OWVAR 37
40934: PUSH
40935: LD_INT 31
40937: ST_TO_ADDR
// vc_control := control_rider ;
40938: LD_ADDR_OWVAR 38
40942: PUSH
40943: LD_INT 4
40945: ST_TO_ADDR
// animal := CreateVehicle ;
40946: LD_ADDR_VAR 0 12
40950: PUSH
40951: CALL_OW 45
40955: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40956: LD_VAR 0 12
40960: PPUSH
40961: LD_VAR 0 8
40965: PPUSH
40966: LD_INT 0
40968: PPUSH
40969: CALL 43112 0 3
// end ;
40973: GO 40927
40975: POP
40976: POP
// if horses then
40977: LD_VAR 0 5
40981: IFFALSE 41048
// for i = 1 to horses do
40983: LD_ADDR_VAR 0 11
40987: PUSH
40988: DOUBLE
40989: LD_INT 1
40991: DEC
40992: ST_TO_ADDR
40993: LD_VAR 0 5
40997: PUSH
40998: FOR_TO
40999: IFFALSE 41046
// begin hc_class := 21 ;
41001: LD_ADDR_OWVAR 28
41005: PUSH
41006: LD_INT 21
41008: ST_TO_ADDR
// hc_gallery :=  ;
41009: LD_ADDR_OWVAR 33
41013: PUSH
41014: LD_STRING 
41016: ST_TO_ADDR
// animal := CreateHuman ;
41017: LD_ADDR_VAR 0 12
41021: PUSH
41022: CALL_OW 44
41026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41027: LD_VAR 0 12
41031: PPUSH
41032: LD_VAR 0 8
41036: PPUSH
41037: LD_INT 0
41039: PPUSH
41040: CALL 43112 0 3
// end ;
41044: GO 40998
41046: POP
41047: POP
// if birds then
41048: LD_VAR 0 1
41052: IFFALSE 41119
// for i = 1 to birds do
41054: LD_ADDR_VAR 0 11
41058: PUSH
41059: DOUBLE
41060: LD_INT 1
41062: DEC
41063: ST_TO_ADDR
41064: LD_VAR 0 1
41068: PUSH
41069: FOR_TO
41070: IFFALSE 41117
// begin hc_class = 18 ;
41072: LD_ADDR_OWVAR 28
41076: PUSH
41077: LD_INT 18
41079: ST_TO_ADDR
// hc_gallery =  ;
41080: LD_ADDR_OWVAR 33
41084: PUSH
41085: LD_STRING 
41087: ST_TO_ADDR
// animal := CreateHuman ;
41088: LD_ADDR_VAR 0 12
41092: PUSH
41093: CALL_OW 44
41097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41098: LD_VAR 0 12
41102: PPUSH
41103: LD_VAR 0 8
41107: PPUSH
41108: LD_INT 0
41110: PPUSH
41111: CALL 43112 0 3
// end ;
41115: GO 41069
41117: POP
41118: POP
// if tigers then
41119: LD_VAR 0 2
41123: IFFALSE 41207
// for i = 1 to tigers do
41125: LD_ADDR_VAR 0 11
41129: PUSH
41130: DOUBLE
41131: LD_INT 1
41133: DEC
41134: ST_TO_ADDR
41135: LD_VAR 0 2
41139: PUSH
41140: FOR_TO
41141: IFFALSE 41205
// begin hc_class = class_tiger ;
41143: LD_ADDR_OWVAR 28
41147: PUSH
41148: LD_INT 14
41150: ST_TO_ADDR
// hc_gallery =  ;
41151: LD_ADDR_OWVAR 33
41155: PUSH
41156: LD_STRING 
41158: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41159: LD_ADDR_OWVAR 35
41163: PUSH
41164: LD_INT 7
41166: NEG
41167: PPUSH
41168: LD_INT 7
41170: PPUSH
41171: CALL_OW 12
41175: ST_TO_ADDR
// animal := CreateHuman ;
41176: LD_ADDR_VAR 0 12
41180: PUSH
41181: CALL_OW 44
41185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41186: LD_VAR 0 12
41190: PPUSH
41191: LD_VAR 0 8
41195: PPUSH
41196: LD_INT 0
41198: PPUSH
41199: CALL 43112 0 3
// end ;
41203: GO 41140
41205: POP
41206: POP
// if apemans then
41207: LD_VAR 0 3
41211: IFFALSE 41334
// for i = 1 to apemans do
41213: LD_ADDR_VAR 0 11
41217: PUSH
41218: DOUBLE
41219: LD_INT 1
41221: DEC
41222: ST_TO_ADDR
41223: LD_VAR 0 3
41227: PUSH
41228: FOR_TO
41229: IFFALSE 41332
// begin hc_class = class_apeman ;
41231: LD_ADDR_OWVAR 28
41235: PUSH
41236: LD_INT 12
41238: ST_TO_ADDR
// hc_gallery =  ;
41239: LD_ADDR_OWVAR 33
41243: PUSH
41244: LD_STRING 
41246: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41247: LD_ADDR_OWVAR 35
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PPUSH
41256: LD_INT 2
41258: PPUSH
41259: CALL_OW 12
41263: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41264: LD_ADDR_OWVAR 31
41268: PUSH
41269: LD_INT 1
41271: PPUSH
41272: LD_INT 3
41274: PPUSH
41275: CALL_OW 12
41279: PUSH
41280: LD_INT 1
41282: PPUSH
41283: LD_INT 3
41285: PPUSH
41286: CALL_OW 12
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: ST_TO_ADDR
// animal := CreateHuman ;
41303: LD_ADDR_VAR 0 12
41307: PUSH
41308: CALL_OW 44
41312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41313: LD_VAR 0 12
41317: PPUSH
41318: LD_VAR 0 8
41322: PPUSH
41323: LD_INT 0
41325: PPUSH
41326: CALL 43112 0 3
// end ;
41330: GO 41228
41332: POP
41333: POP
// if enchidnas then
41334: LD_VAR 0 4
41338: IFFALSE 41405
// for i = 1 to enchidnas do
41340: LD_ADDR_VAR 0 11
41344: PUSH
41345: DOUBLE
41346: LD_INT 1
41348: DEC
41349: ST_TO_ADDR
41350: LD_VAR 0 4
41354: PUSH
41355: FOR_TO
41356: IFFALSE 41403
// begin hc_class = 13 ;
41358: LD_ADDR_OWVAR 28
41362: PUSH
41363: LD_INT 13
41365: ST_TO_ADDR
// hc_gallery =  ;
41366: LD_ADDR_OWVAR 33
41370: PUSH
41371: LD_STRING 
41373: ST_TO_ADDR
// animal := CreateHuman ;
41374: LD_ADDR_VAR 0 12
41378: PUSH
41379: CALL_OW 44
41383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41384: LD_VAR 0 12
41388: PPUSH
41389: LD_VAR 0 8
41393: PPUSH
41394: LD_INT 0
41396: PPUSH
41397: CALL 43112 0 3
// end ;
41401: GO 41355
41403: POP
41404: POP
// if fishes then
41405: LD_VAR 0 7
41409: IFFALSE 41476
// for i = 1 to fishes do
41411: LD_ADDR_VAR 0 11
41415: PUSH
41416: DOUBLE
41417: LD_INT 1
41419: DEC
41420: ST_TO_ADDR
41421: LD_VAR 0 7
41425: PUSH
41426: FOR_TO
41427: IFFALSE 41474
// begin hc_class = 20 ;
41429: LD_ADDR_OWVAR 28
41433: PUSH
41434: LD_INT 20
41436: ST_TO_ADDR
// hc_gallery =  ;
41437: LD_ADDR_OWVAR 33
41441: PUSH
41442: LD_STRING 
41444: ST_TO_ADDR
// animal := CreateHuman ;
41445: LD_ADDR_VAR 0 12
41449: PUSH
41450: CALL_OW 44
41454: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41455: LD_VAR 0 12
41459: PPUSH
41460: LD_VAR 0 9
41464: PPUSH
41465: LD_INT 0
41467: PPUSH
41468: CALL 43112 0 3
// end ;
41472: GO 41426
41474: POP
41475: POP
// end ;
41476: LD_VAR 0 10
41480: RET
// export function WantHeal ( sci , unit ) ; begin
41481: LD_INT 0
41483: PPUSH
// if GetTaskList ( sci ) > 0 then
41484: LD_VAR 0 1
41488: PPUSH
41489: CALL_OW 437
41493: PUSH
41494: LD_INT 0
41496: GREATER
41497: IFFALSE 41567
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41499: LD_VAR 0 1
41503: PPUSH
41504: CALL_OW 437
41508: PUSH
41509: LD_INT 1
41511: ARRAY
41512: PUSH
41513: LD_INT 1
41515: ARRAY
41516: PUSH
41517: LD_STRING l
41519: EQUAL
41520: PUSH
41521: LD_VAR 0 1
41525: PPUSH
41526: CALL_OW 437
41530: PUSH
41531: LD_INT 1
41533: ARRAY
41534: PUSH
41535: LD_INT 4
41537: ARRAY
41538: PUSH
41539: LD_VAR 0 2
41543: EQUAL
41544: AND
41545: IFFALSE 41557
// result := true else
41547: LD_ADDR_VAR 0 3
41551: PUSH
41552: LD_INT 1
41554: ST_TO_ADDR
41555: GO 41565
// result := false ;
41557: LD_ADDR_VAR 0 3
41561: PUSH
41562: LD_INT 0
41564: ST_TO_ADDR
// end else
41565: GO 41575
// result := false ;
41567: LD_ADDR_VAR 0 3
41571: PUSH
41572: LD_INT 0
41574: ST_TO_ADDR
// end ;
41575: LD_VAR 0 3
41579: RET
// export function HealTarget ( sci ) ; begin
41580: LD_INT 0
41582: PPUSH
// if not sci then
41583: LD_VAR 0 1
41587: NOT
41588: IFFALSE 41592
// exit ;
41590: GO 41657
// result := 0 ;
41592: LD_ADDR_VAR 0 2
41596: PUSH
41597: LD_INT 0
41599: ST_TO_ADDR
// if GetTaskList ( sci ) then
41600: LD_VAR 0 1
41604: PPUSH
41605: CALL_OW 437
41609: IFFALSE 41657
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41611: LD_VAR 0 1
41615: PPUSH
41616: CALL_OW 437
41620: PUSH
41621: LD_INT 1
41623: ARRAY
41624: PUSH
41625: LD_INT 1
41627: ARRAY
41628: PUSH
41629: LD_STRING l
41631: EQUAL
41632: IFFALSE 41657
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41634: LD_ADDR_VAR 0 2
41638: PUSH
41639: LD_VAR 0 1
41643: PPUSH
41644: CALL_OW 437
41648: PUSH
41649: LD_INT 1
41651: ARRAY
41652: PUSH
41653: LD_INT 4
41655: ARRAY
41656: ST_TO_ADDR
// end ;
41657: LD_VAR 0 2
41661: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41662: LD_INT 0
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
// if not base_units then
41668: LD_VAR 0 1
41672: NOT
41673: IFFALSE 41677
// exit ;
41675: GO 41764
// result := false ;
41677: LD_ADDR_VAR 0 2
41681: PUSH
41682: LD_INT 0
41684: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41685: LD_ADDR_VAR 0 5
41689: PUSH
41690: LD_VAR 0 1
41694: PPUSH
41695: LD_INT 21
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PPUSH
41705: CALL_OW 72
41709: ST_TO_ADDR
// if not tmp then
41710: LD_VAR 0 5
41714: NOT
41715: IFFALSE 41719
// exit ;
41717: GO 41764
// for i in tmp do
41719: LD_ADDR_VAR 0 3
41723: PUSH
41724: LD_VAR 0 5
41728: PUSH
41729: FOR_IN
41730: IFFALSE 41762
// begin result := EnemyInRange ( i , 22 ) ;
41732: LD_ADDR_VAR 0 2
41736: PUSH
41737: LD_VAR 0 3
41741: PPUSH
41742: LD_INT 22
41744: PPUSH
41745: CALL 39450 0 2
41749: ST_TO_ADDR
// if result then
41750: LD_VAR 0 2
41754: IFFALSE 41760
// exit ;
41756: POP
41757: POP
41758: GO 41764
// end ;
41760: GO 41729
41762: POP
41763: POP
// end ;
41764: LD_VAR 0 2
41768: RET
// export function FilterByTag ( units , tag ) ; begin
41769: LD_INT 0
41771: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41772: LD_ADDR_VAR 0 3
41776: PUSH
41777: LD_VAR 0 1
41781: PPUSH
41782: LD_INT 120
41784: PUSH
41785: LD_VAR 0 2
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PPUSH
41794: CALL_OW 72
41798: ST_TO_ADDR
// end ;
41799: LD_VAR 0 3
41803: RET
// export function IsDriver ( un ) ; begin
41804: LD_INT 0
41806: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41807: LD_ADDR_VAR 0 2
41811: PUSH
41812: LD_VAR 0 1
41816: PUSH
41817: LD_INT 55
41819: PUSH
41820: EMPTY
41821: LIST
41822: PPUSH
41823: CALL_OW 69
41827: IN
41828: ST_TO_ADDR
// end ;
41829: LD_VAR 0 2
41833: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41834: LD_INT 0
41836: PPUSH
41837: PPUSH
// list := [ ] ;
41838: LD_ADDR_VAR 0 5
41842: PUSH
41843: EMPTY
41844: ST_TO_ADDR
// case d of 0 :
41845: LD_VAR 0 3
41849: PUSH
41850: LD_INT 0
41852: DOUBLE
41853: EQUAL
41854: IFTRUE 41858
41856: GO 41991
41858: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41859: LD_ADDR_VAR 0 5
41863: PUSH
41864: LD_VAR 0 1
41868: PUSH
41869: LD_INT 4
41871: MINUS
41872: PUSH
41873: LD_VAR 0 2
41877: PUSH
41878: LD_INT 4
41880: MINUS
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: PUSH
41890: LD_VAR 0 1
41894: PUSH
41895: LD_INT 3
41897: MINUS
41898: PUSH
41899: LD_VAR 0 2
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: PUSH
41912: LD_VAR 0 1
41916: PUSH
41917: LD_INT 4
41919: PLUS
41920: PUSH
41921: LD_VAR 0 2
41925: PUSH
41926: LD_INT 4
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: PUSH
41934: LD_VAR 0 1
41938: PUSH
41939: LD_INT 3
41941: PLUS
41942: PUSH
41943: LD_VAR 0 2
41947: PUSH
41948: LD_INT 3
41950: PLUS
41951: PUSH
41952: LD_INT 5
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: LIST
41959: PUSH
41960: LD_VAR 0 1
41964: PUSH
41965: LD_VAR 0 2
41969: PUSH
41970: LD_INT 4
41972: PLUS
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: LIST
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: ST_TO_ADDR
// end ; 1 :
41989: GO 42689
41991: LD_INT 1
41993: DOUBLE
41994: EQUAL
41995: IFTRUE 41999
41997: GO 42132
41999: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42000: LD_ADDR_VAR 0 5
42004: PUSH
42005: LD_VAR 0 1
42009: PUSH
42010: LD_VAR 0 2
42014: PUSH
42015: LD_INT 4
42017: MINUS
42018: PUSH
42019: LD_INT 3
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: PUSH
42027: LD_VAR 0 1
42031: PUSH
42032: LD_INT 3
42034: MINUS
42035: PUSH
42036: LD_VAR 0 2
42040: PUSH
42041: LD_INT 3
42043: MINUS
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: LIST
42052: PUSH
42053: LD_VAR 0 1
42057: PUSH
42058: LD_INT 4
42060: MINUS
42061: PUSH
42062: LD_VAR 0 2
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: LIST
42074: PUSH
42075: LD_VAR 0 1
42079: PUSH
42080: LD_VAR 0 2
42084: PUSH
42085: LD_INT 3
42087: PLUS
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: PUSH
42097: LD_VAR 0 1
42101: PUSH
42102: LD_INT 4
42104: PLUS
42105: PUSH
42106: LD_VAR 0 2
42110: PUSH
42111: LD_INT 4
42113: PLUS
42114: PUSH
42115: LD_INT 5
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// end ; 2 :
42130: GO 42689
42132: LD_INT 2
42134: DOUBLE
42135: EQUAL
42136: IFTRUE 42140
42138: GO 42269
42140: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42141: LD_ADDR_VAR 0 5
42145: PUSH
42146: LD_VAR 0 1
42150: PUSH
42151: LD_VAR 0 2
42155: PUSH
42156: LD_INT 3
42158: MINUS
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: PUSH
42168: LD_VAR 0 1
42172: PUSH
42173: LD_INT 4
42175: PLUS
42176: PUSH
42177: LD_VAR 0 2
42181: PUSH
42182: LD_INT 4
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: PUSH
42190: LD_VAR 0 1
42194: PUSH
42195: LD_VAR 0 2
42199: PUSH
42200: LD_INT 4
42202: PLUS
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: LIST
42211: PUSH
42212: LD_VAR 0 1
42216: PUSH
42217: LD_INT 3
42219: MINUS
42220: PUSH
42221: LD_VAR 0 2
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: PUSH
42234: LD_VAR 0 1
42238: PUSH
42239: LD_INT 4
42241: MINUS
42242: PUSH
42243: LD_VAR 0 2
42247: PUSH
42248: LD_INT 4
42250: MINUS
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: ST_TO_ADDR
// end ; 3 :
42267: GO 42689
42269: LD_INT 3
42271: DOUBLE
42272: EQUAL
42273: IFTRUE 42277
42275: GO 42410
42277: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42278: LD_ADDR_VAR 0 5
42282: PUSH
42283: LD_VAR 0 1
42287: PUSH
42288: LD_INT 3
42290: PLUS
42291: PUSH
42292: LD_VAR 0 2
42296: PUSH
42297: LD_INT 4
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: PUSH
42305: LD_VAR 0 1
42309: PUSH
42310: LD_INT 4
42312: PLUS
42313: PUSH
42314: LD_VAR 0 2
42318: PUSH
42319: LD_INT 4
42321: PLUS
42322: PUSH
42323: LD_INT 5
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: LIST
42330: PUSH
42331: LD_VAR 0 1
42335: PUSH
42336: LD_INT 4
42338: MINUS
42339: PUSH
42340: LD_VAR 0 2
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: PUSH
42353: LD_VAR 0 1
42357: PUSH
42358: LD_VAR 0 2
42362: PUSH
42363: LD_INT 4
42365: MINUS
42366: PUSH
42367: LD_INT 3
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: LIST
42374: PUSH
42375: LD_VAR 0 1
42379: PUSH
42380: LD_INT 3
42382: MINUS
42383: PUSH
42384: LD_VAR 0 2
42388: PUSH
42389: LD_INT 3
42391: MINUS
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: ST_TO_ADDR
// end ; 4 :
42408: GO 42689
42410: LD_INT 4
42412: DOUBLE
42413: EQUAL
42414: IFTRUE 42418
42416: GO 42551
42418: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42419: LD_ADDR_VAR 0 5
42423: PUSH
42424: LD_VAR 0 1
42428: PUSH
42429: LD_VAR 0 2
42433: PUSH
42434: LD_INT 4
42436: PLUS
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: PUSH
42446: LD_VAR 0 1
42450: PUSH
42451: LD_INT 3
42453: PLUS
42454: PUSH
42455: LD_VAR 0 2
42459: PUSH
42460: LD_INT 3
42462: PLUS
42463: PUSH
42464: LD_INT 5
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: PUSH
42472: LD_VAR 0 1
42476: PUSH
42477: LD_INT 4
42479: PLUS
42480: PUSH
42481: LD_VAR 0 2
42485: PUSH
42486: LD_INT 4
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: LIST
42493: PUSH
42494: LD_VAR 0 1
42498: PUSH
42499: LD_VAR 0 2
42503: PUSH
42504: LD_INT 3
42506: MINUS
42507: PUSH
42508: LD_INT 3
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: PUSH
42516: LD_VAR 0 1
42520: PUSH
42521: LD_INT 4
42523: MINUS
42524: PUSH
42525: LD_VAR 0 2
42529: PUSH
42530: LD_INT 4
42532: MINUS
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: ST_TO_ADDR
// end ; 5 :
42549: GO 42689
42551: LD_INT 5
42553: DOUBLE
42554: EQUAL
42555: IFTRUE 42559
42557: GO 42688
42559: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42560: LD_ADDR_VAR 0 5
42564: PUSH
42565: LD_VAR 0 1
42569: PUSH
42570: LD_INT 4
42572: MINUS
42573: PUSH
42574: LD_VAR 0 2
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: LIST
42586: PUSH
42587: LD_VAR 0 1
42591: PUSH
42592: LD_VAR 0 2
42596: PUSH
42597: LD_INT 4
42599: MINUS
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: PUSH
42609: LD_VAR 0 1
42613: PUSH
42614: LD_INT 4
42616: PLUS
42617: PUSH
42618: LD_VAR 0 2
42622: PUSH
42623: LD_INT 4
42625: PLUS
42626: PUSH
42627: LD_INT 5
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: PUSH
42635: LD_VAR 0 1
42639: PUSH
42640: LD_INT 3
42642: PLUS
42643: PUSH
42644: LD_VAR 0 2
42648: PUSH
42649: LD_INT 4
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: PUSH
42657: LD_VAR 0 1
42661: PUSH
42662: LD_VAR 0 2
42666: PUSH
42667: LD_INT 3
42669: PLUS
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
// end ; end ;
42686: GO 42689
42688: POP
// result := list ;
42689: LD_ADDR_VAR 0 4
42693: PUSH
42694: LD_VAR 0 5
42698: ST_TO_ADDR
// end ;
42699: LD_VAR 0 4
42703: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42704: LD_INT 0
42706: PPUSH
42707: PPUSH
42708: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42709: LD_VAR 0 1
42713: NOT
42714: PUSH
42715: LD_VAR 0 2
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: LD_INT 4
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: IN
42738: NOT
42739: OR
42740: IFFALSE 42744
// exit ;
42742: GO 42836
// tmp := [ ] ;
42744: LD_ADDR_VAR 0 5
42748: PUSH
42749: EMPTY
42750: ST_TO_ADDR
// for i in units do
42751: LD_ADDR_VAR 0 4
42755: PUSH
42756: LD_VAR 0 1
42760: PUSH
42761: FOR_IN
42762: IFFALSE 42805
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
42764: LD_ADDR_VAR 0 5
42768: PUSH
42769: LD_VAR 0 5
42773: PPUSH
42774: LD_VAR 0 5
42778: PUSH
42779: LD_INT 1
42781: PLUS
42782: PPUSH
42783: LD_VAR 0 4
42787: PPUSH
42788: LD_VAR 0 2
42792: PPUSH
42793: CALL_OW 259
42797: PPUSH
42798: CALL_OW 2
42802: ST_TO_ADDR
42803: GO 42761
42805: POP
42806: POP
// if not tmp then
42807: LD_VAR 0 5
42811: NOT
42812: IFFALSE 42816
// exit ;
42814: GO 42836
// result := SortListByListDesc ( units , tmp ) ;
42816: LD_ADDR_VAR 0 3
42820: PUSH
42821: LD_VAR 0 1
42825: PPUSH
42826: LD_VAR 0 5
42830: PPUSH
42831: CALL_OW 77
42835: ST_TO_ADDR
// end ;
42836: LD_VAR 0 3
42840: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42841: LD_INT 0
42843: PPUSH
42844: PPUSH
42845: PPUSH
// result := false ;
42846: LD_ADDR_VAR 0 3
42850: PUSH
42851: LD_INT 0
42853: ST_TO_ADDR
// x := GetX ( building ) ;
42854: LD_ADDR_VAR 0 4
42858: PUSH
42859: LD_VAR 0 2
42863: PPUSH
42864: CALL_OW 250
42868: ST_TO_ADDR
// y := GetY ( building ) ;
42869: LD_ADDR_VAR 0 5
42873: PUSH
42874: LD_VAR 0 2
42878: PPUSH
42879: CALL_OW 251
42883: ST_TO_ADDR
// if not building or not x or not y then
42884: LD_VAR 0 2
42888: NOT
42889: PUSH
42890: LD_VAR 0 4
42894: NOT
42895: OR
42896: PUSH
42897: LD_VAR 0 5
42901: NOT
42902: OR
42903: IFFALSE 42907
// exit ;
42905: GO 42999
// if GetTaskList ( unit ) then
42907: LD_VAR 0 1
42911: PPUSH
42912: CALL_OW 437
42916: IFFALSE 42999
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42918: LD_STRING e
42920: PUSH
42921: LD_VAR 0 1
42925: PPUSH
42926: CALL_OW 437
42930: PUSH
42931: LD_INT 1
42933: ARRAY
42934: PUSH
42935: LD_INT 1
42937: ARRAY
42938: EQUAL
42939: PUSH
42940: LD_VAR 0 4
42944: PUSH
42945: LD_VAR 0 1
42949: PPUSH
42950: CALL_OW 437
42954: PUSH
42955: LD_INT 1
42957: ARRAY
42958: PUSH
42959: LD_INT 2
42961: ARRAY
42962: EQUAL
42963: AND
42964: PUSH
42965: LD_VAR 0 5
42969: PUSH
42970: LD_VAR 0 1
42974: PPUSH
42975: CALL_OW 437
42979: PUSH
42980: LD_INT 1
42982: ARRAY
42983: PUSH
42984: LD_INT 3
42986: ARRAY
42987: EQUAL
42988: AND
42989: IFFALSE 42999
// result := true end ;
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_INT 1
42998: ST_TO_ADDR
// end ;
42999: LD_VAR 0 3
43003: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43004: LD_INT 0
43006: PPUSH
// result := false ;
43007: LD_ADDR_VAR 0 4
43011: PUSH
43012: LD_INT 0
43014: ST_TO_ADDR
// if GetTaskList ( unit ) then
43015: LD_VAR 0 1
43019: PPUSH
43020: CALL_OW 437
43024: IFFALSE 43107
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43026: LD_STRING M
43028: PUSH
43029: LD_VAR 0 1
43033: PPUSH
43034: CALL_OW 437
43038: PUSH
43039: LD_INT 1
43041: ARRAY
43042: PUSH
43043: LD_INT 1
43045: ARRAY
43046: EQUAL
43047: PUSH
43048: LD_VAR 0 2
43052: PUSH
43053: LD_VAR 0 1
43057: PPUSH
43058: CALL_OW 437
43062: PUSH
43063: LD_INT 1
43065: ARRAY
43066: PUSH
43067: LD_INT 2
43069: ARRAY
43070: EQUAL
43071: AND
43072: PUSH
43073: LD_VAR 0 3
43077: PUSH
43078: LD_VAR 0 1
43082: PPUSH
43083: CALL_OW 437
43087: PUSH
43088: LD_INT 1
43090: ARRAY
43091: PUSH
43092: LD_INT 3
43094: ARRAY
43095: EQUAL
43096: AND
43097: IFFALSE 43107
// result := true ;
43099: LD_ADDR_VAR 0 4
43103: PUSH
43104: LD_INT 1
43106: ST_TO_ADDR
// end ; end ;
43107: LD_VAR 0 4
43111: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43112: LD_INT 0
43114: PPUSH
43115: PPUSH
43116: PPUSH
43117: PPUSH
// if not unit or not area then
43118: LD_VAR 0 1
43122: NOT
43123: PUSH
43124: LD_VAR 0 2
43128: NOT
43129: OR
43130: IFFALSE 43134
// exit ;
43132: GO 43298
// tmp := AreaToList ( area , i ) ;
43134: LD_ADDR_VAR 0 6
43138: PUSH
43139: LD_VAR 0 2
43143: PPUSH
43144: LD_VAR 0 5
43148: PPUSH
43149: CALL_OW 517
43153: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43154: LD_ADDR_VAR 0 5
43158: PUSH
43159: DOUBLE
43160: LD_INT 1
43162: DEC
43163: ST_TO_ADDR
43164: LD_VAR 0 6
43168: PUSH
43169: LD_INT 1
43171: ARRAY
43172: PUSH
43173: FOR_TO
43174: IFFALSE 43296
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43176: LD_ADDR_VAR 0 7
43180: PUSH
43181: LD_VAR 0 6
43185: PUSH
43186: LD_INT 1
43188: ARRAY
43189: PUSH
43190: LD_VAR 0 5
43194: ARRAY
43195: PUSH
43196: LD_VAR 0 6
43200: PUSH
43201: LD_INT 2
43203: ARRAY
43204: PUSH
43205: LD_VAR 0 5
43209: ARRAY
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43215: LD_VAR 0 7
43219: PUSH
43220: LD_INT 1
43222: ARRAY
43223: PPUSH
43224: LD_VAR 0 7
43228: PUSH
43229: LD_INT 2
43231: ARRAY
43232: PPUSH
43233: CALL_OW 428
43237: PUSH
43238: LD_INT 0
43240: EQUAL
43241: IFFALSE 43294
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43243: LD_VAR 0 1
43247: PPUSH
43248: LD_VAR 0 7
43252: PUSH
43253: LD_INT 1
43255: ARRAY
43256: PPUSH
43257: LD_VAR 0 7
43261: PUSH
43262: LD_INT 2
43264: ARRAY
43265: PPUSH
43266: LD_VAR 0 3
43270: PPUSH
43271: CALL_OW 48
// result := IsPlaced ( unit ) ;
43275: LD_ADDR_VAR 0 4
43279: PUSH
43280: LD_VAR 0 1
43284: PPUSH
43285: CALL_OW 305
43289: ST_TO_ADDR
// exit ;
43290: POP
43291: POP
43292: GO 43298
// end ; end ;
43294: GO 43173
43296: POP
43297: POP
// end ;
43298: LD_VAR 0 4
43302: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43303: LD_INT 0
43305: PPUSH
43306: PPUSH
43307: PPUSH
// if not side or side > 8 then
43308: LD_VAR 0 1
43312: NOT
43313: PUSH
43314: LD_VAR 0 1
43318: PUSH
43319: LD_INT 8
43321: GREATER
43322: OR
43323: IFFALSE 43327
// exit ;
43325: GO 43514
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43327: LD_ADDR_VAR 0 4
43331: PUSH
43332: LD_INT 22
43334: PUSH
43335: LD_VAR 0 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 21
43346: PUSH
43347: LD_INT 3
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PPUSH
43358: CALL_OW 69
43362: ST_TO_ADDR
// if not tmp then
43363: LD_VAR 0 4
43367: NOT
43368: IFFALSE 43372
// exit ;
43370: GO 43514
// enable_addtolog := true ;
43372: LD_ADDR_OWVAR 81
43376: PUSH
43377: LD_INT 1
43379: ST_TO_ADDR
// AddToLog ( [ ) ;
43380: LD_STRING [
43382: PPUSH
43383: CALL_OW 561
// for i in tmp do
43387: LD_ADDR_VAR 0 3
43391: PUSH
43392: LD_VAR 0 4
43396: PUSH
43397: FOR_IN
43398: IFFALSE 43505
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43400: LD_STRING [
43402: PUSH
43403: LD_VAR 0 3
43407: PPUSH
43408: CALL_OW 266
43412: STR
43413: PUSH
43414: LD_STRING , 
43416: STR
43417: PUSH
43418: LD_VAR 0 3
43422: PPUSH
43423: CALL_OW 250
43427: STR
43428: PUSH
43429: LD_STRING , 
43431: STR
43432: PUSH
43433: LD_VAR 0 3
43437: PPUSH
43438: CALL_OW 251
43442: STR
43443: PUSH
43444: LD_STRING , 
43446: STR
43447: PUSH
43448: LD_VAR 0 3
43452: PPUSH
43453: CALL_OW 254
43457: STR
43458: PUSH
43459: LD_STRING , 
43461: STR
43462: PUSH
43463: LD_VAR 0 3
43467: PPUSH
43468: LD_INT 1
43470: PPUSH
43471: CALL_OW 268
43475: STR
43476: PUSH
43477: LD_STRING , 
43479: STR
43480: PUSH
43481: LD_VAR 0 3
43485: PPUSH
43486: LD_INT 2
43488: PPUSH
43489: CALL_OW 268
43493: STR
43494: PUSH
43495: LD_STRING ],
43497: STR
43498: PPUSH
43499: CALL_OW 561
// end ;
43503: GO 43397
43505: POP
43506: POP
// AddToLog ( ]; ) ;
43507: LD_STRING ];
43509: PPUSH
43510: CALL_OW 561
// end ;
43514: LD_VAR 0 2
43518: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43519: LD_INT 0
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
// if not area or not rate or not max then
43526: LD_VAR 0 1
43530: NOT
43531: PUSH
43532: LD_VAR 0 2
43536: NOT
43537: OR
43538: PUSH
43539: LD_VAR 0 4
43543: NOT
43544: OR
43545: IFFALSE 43549
// exit ;
43547: GO 43738
// while 1 do
43549: LD_INT 1
43551: IFFALSE 43738
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43553: LD_ADDR_VAR 0 9
43557: PUSH
43558: LD_VAR 0 1
43562: PPUSH
43563: LD_INT 1
43565: PPUSH
43566: CALL_OW 287
43570: PUSH
43571: LD_INT 10
43573: MUL
43574: ST_TO_ADDR
// r := rate / 10 ;
43575: LD_ADDR_VAR 0 7
43579: PUSH
43580: LD_VAR 0 2
43584: PUSH
43585: LD_INT 10
43587: DIVREAL
43588: ST_TO_ADDR
// time := 1 1$00 ;
43589: LD_ADDR_VAR 0 8
43593: PUSH
43594: LD_INT 2100
43596: ST_TO_ADDR
// if amount < min then
43597: LD_VAR 0 9
43601: PUSH
43602: LD_VAR 0 3
43606: LESS
43607: IFFALSE 43625
// r := r * 2 else
43609: LD_ADDR_VAR 0 7
43613: PUSH
43614: LD_VAR 0 7
43618: PUSH
43619: LD_INT 2
43621: MUL
43622: ST_TO_ADDR
43623: GO 43651
// if amount > max then
43625: LD_VAR 0 9
43629: PUSH
43630: LD_VAR 0 4
43634: GREATER
43635: IFFALSE 43651
// r := r / 2 ;
43637: LD_ADDR_VAR 0 7
43641: PUSH
43642: LD_VAR 0 7
43646: PUSH
43647: LD_INT 2
43649: DIVREAL
43650: ST_TO_ADDR
// time := time / r ;
43651: LD_ADDR_VAR 0 8
43655: PUSH
43656: LD_VAR 0 8
43660: PUSH
43661: LD_VAR 0 7
43665: DIVREAL
43666: ST_TO_ADDR
// if time < 0 then
43667: LD_VAR 0 8
43671: PUSH
43672: LD_INT 0
43674: LESS
43675: IFFALSE 43692
// time := time * - 1 ;
43677: LD_ADDR_VAR 0 8
43681: PUSH
43682: LD_VAR 0 8
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: MUL
43691: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43692: LD_VAR 0 8
43696: PUSH
43697: LD_INT 35
43699: PPUSH
43700: LD_INT 875
43702: PPUSH
43703: CALL_OW 12
43707: PLUS
43708: PPUSH
43709: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43713: LD_INT 1
43715: PPUSH
43716: LD_INT 5
43718: PPUSH
43719: CALL_OW 12
43723: PPUSH
43724: LD_VAR 0 1
43728: PPUSH
43729: LD_INT 1
43731: PPUSH
43732: CALL_OW 55
// end ;
43736: GO 43549
// end ;
43738: LD_VAR 0 5
43742: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43743: LD_INT 0
43745: PPUSH
43746: PPUSH
43747: PPUSH
43748: PPUSH
43749: PPUSH
43750: PPUSH
43751: PPUSH
43752: PPUSH
// if not turrets or not factories then
43753: LD_VAR 0 1
43757: NOT
43758: PUSH
43759: LD_VAR 0 2
43763: NOT
43764: OR
43765: IFFALSE 43769
// exit ;
43767: GO 44076
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43769: LD_ADDR_VAR 0 10
43773: PUSH
43774: LD_INT 5
43776: PUSH
43777: LD_INT 6
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 4
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: LD_INT 5
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 24
43811: PUSH
43812: LD_INT 25
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 23
43821: PUSH
43822: LD_INT 27
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 42
43835: PUSH
43836: LD_INT 43
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 44
43845: PUSH
43846: LD_INT 46
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 45
43855: PUSH
43856: LD_INT 47
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: LIST
43872: ST_TO_ADDR
// result := [ ] ;
43873: LD_ADDR_VAR 0 3
43877: PUSH
43878: EMPTY
43879: ST_TO_ADDR
// for i in turrets do
43880: LD_ADDR_VAR 0 4
43884: PUSH
43885: LD_VAR 0 1
43889: PUSH
43890: FOR_IN
43891: IFFALSE 44074
// begin nat := GetNation ( i ) ;
43893: LD_ADDR_VAR 0 7
43897: PUSH
43898: LD_VAR 0 4
43902: PPUSH
43903: CALL_OW 248
43907: ST_TO_ADDR
// weapon := 0 ;
43908: LD_ADDR_VAR 0 8
43912: PUSH
43913: LD_INT 0
43915: ST_TO_ADDR
// if not nat then
43916: LD_VAR 0 7
43920: NOT
43921: IFFALSE 43925
// continue ;
43923: GO 43890
// for j in list [ nat ] do
43925: LD_ADDR_VAR 0 5
43929: PUSH
43930: LD_VAR 0 10
43934: PUSH
43935: LD_VAR 0 7
43939: ARRAY
43940: PUSH
43941: FOR_IN
43942: IFFALSE 43983
// if GetBWeapon ( i ) = j [ 1 ] then
43944: LD_VAR 0 4
43948: PPUSH
43949: CALL_OW 269
43953: PUSH
43954: LD_VAR 0 5
43958: PUSH
43959: LD_INT 1
43961: ARRAY
43962: EQUAL
43963: IFFALSE 43981
// begin weapon := j [ 2 ] ;
43965: LD_ADDR_VAR 0 8
43969: PUSH
43970: LD_VAR 0 5
43974: PUSH
43975: LD_INT 2
43977: ARRAY
43978: ST_TO_ADDR
// break ;
43979: GO 43983
// end ;
43981: GO 43941
43983: POP
43984: POP
// if not weapon then
43985: LD_VAR 0 8
43989: NOT
43990: IFFALSE 43994
// continue ;
43992: GO 43890
// for k in factories do
43994: LD_ADDR_VAR 0 6
43998: PUSH
43999: LD_VAR 0 2
44003: PUSH
44004: FOR_IN
44005: IFFALSE 44070
// begin weapons := AvailableWeaponList ( k ) ;
44007: LD_ADDR_VAR 0 9
44011: PUSH
44012: LD_VAR 0 6
44016: PPUSH
44017: CALL_OW 478
44021: ST_TO_ADDR
// if not weapons then
44022: LD_VAR 0 9
44026: NOT
44027: IFFALSE 44031
// continue ;
44029: GO 44004
// if weapon in weapons then
44031: LD_VAR 0 8
44035: PUSH
44036: LD_VAR 0 9
44040: IN
44041: IFFALSE 44068
// begin result := [ i , weapon ] ;
44043: LD_ADDR_VAR 0 3
44047: PUSH
44048: LD_VAR 0 4
44052: PUSH
44053: LD_VAR 0 8
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: ST_TO_ADDR
// exit ;
44062: POP
44063: POP
44064: POP
44065: POP
44066: GO 44076
// end ; end ;
44068: GO 44004
44070: POP
44071: POP
// end ;
44072: GO 43890
44074: POP
44075: POP
// end ;
44076: LD_VAR 0 3
44080: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44081: LD_INT 0
44083: PPUSH
// if not side or side > 8 then
44084: LD_VAR 0 3
44088: NOT
44089: PUSH
44090: LD_VAR 0 3
44094: PUSH
44095: LD_INT 8
44097: GREATER
44098: OR
44099: IFFALSE 44103
// exit ;
44101: GO 44162
// if not range then
44103: LD_VAR 0 4
44107: NOT
44108: IFFALSE 44119
// range := - 12 ;
44110: LD_ADDR_VAR 0 4
44114: PUSH
44115: LD_INT 12
44117: NEG
44118: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44119: LD_VAR 0 1
44123: PPUSH
44124: LD_VAR 0 2
44128: PPUSH
44129: LD_VAR 0 3
44133: PPUSH
44134: LD_VAR 0 4
44138: PPUSH
44139: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44143: LD_VAR 0 1
44147: PPUSH
44148: LD_VAR 0 2
44152: PPUSH
44153: LD_VAR 0 3
44157: PPUSH
44158: CALL_OW 331
// end ;
44162: LD_VAR 0 5
44166: RET
// export function Video ( mode ) ; begin
44167: LD_INT 0
44169: PPUSH
// ingame_video = mode ;
44170: LD_ADDR_OWVAR 52
44174: PUSH
44175: LD_VAR 0 1
44179: ST_TO_ADDR
// interface_hidden = mode ;
44180: LD_ADDR_OWVAR 54
44184: PUSH
44185: LD_VAR 0 1
44189: ST_TO_ADDR
// end ;
44190: LD_VAR 0 2
44194: RET
// export function Join ( array , element ) ; begin
44195: LD_INT 0
44197: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44198: LD_ADDR_VAR 0 3
44202: PUSH
44203: LD_VAR 0 1
44207: PPUSH
44208: LD_VAR 0 1
44212: PUSH
44213: LD_INT 1
44215: PLUS
44216: PPUSH
44217: LD_VAR 0 2
44221: PPUSH
44222: CALL_OW 1
44226: ST_TO_ADDR
// end ;
44227: LD_VAR 0 3
44231: RET
// export function JoinUnion ( array , element ) ; begin
44232: LD_INT 0
44234: PPUSH
// result := array union element ;
44235: LD_ADDR_VAR 0 3
44239: PUSH
44240: LD_VAR 0 1
44244: PUSH
44245: LD_VAR 0 2
44249: UNION
44250: ST_TO_ADDR
// end ;
44251: LD_VAR 0 3
44255: RET
// export function GetBehemoths ( side ) ; begin
44256: LD_INT 0
44258: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
44259: LD_ADDR_VAR 0 2
44263: PUSH
44264: LD_INT 22
44266: PUSH
44267: LD_VAR 0 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 31
44278: PUSH
44279: LD_INT 25
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PPUSH
44290: CALL_OW 69
44294: ST_TO_ADDR
// end ;
44295: LD_VAR 0 2
44299: RET
// export function Shuffle ( array ) ; var i , index ; begin
44300: LD_INT 0
44302: PPUSH
44303: PPUSH
44304: PPUSH
// result := [ ] ;
44305: LD_ADDR_VAR 0 2
44309: PUSH
44310: EMPTY
44311: ST_TO_ADDR
// if not array then
44312: LD_VAR 0 1
44316: NOT
44317: IFFALSE 44321
// exit ;
44319: GO 44420
// Randomize ;
44321: CALL_OW 10
// for i = array downto 1 do
44325: LD_ADDR_VAR 0 3
44329: PUSH
44330: DOUBLE
44331: LD_VAR 0 1
44335: INC
44336: ST_TO_ADDR
44337: LD_INT 1
44339: PUSH
44340: FOR_DOWNTO
44341: IFFALSE 44418
// begin index := rand ( 1 , array ) ;
44343: LD_ADDR_VAR 0 4
44347: PUSH
44348: LD_INT 1
44350: PPUSH
44351: LD_VAR 0 1
44355: PPUSH
44356: CALL_OW 12
44360: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44361: LD_ADDR_VAR 0 2
44365: PUSH
44366: LD_VAR 0 2
44370: PPUSH
44371: LD_VAR 0 2
44375: PUSH
44376: LD_INT 1
44378: PLUS
44379: PPUSH
44380: LD_VAR 0 1
44384: PUSH
44385: LD_VAR 0 4
44389: ARRAY
44390: PPUSH
44391: CALL_OW 2
44395: ST_TO_ADDR
// array := Delete ( array , index ) ;
44396: LD_ADDR_VAR 0 1
44400: PUSH
44401: LD_VAR 0 1
44405: PPUSH
44406: LD_VAR 0 4
44410: PPUSH
44411: CALL_OW 3
44415: ST_TO_ADDR
// end ;
44416: GO 44340
44418: POP
44419: POP
// end ;
44420: LD_VAR 0 2
44424: RET
// export function GetBaseMaterials ( base ) ; begin
44425: LD_INT 0
44427: PPUSH
// result := [ 0 , 0 , 0 ] ;
44428: LD_ADDR_VAR 0 2
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: ST_TO_ADDR
// if not base then
44447: LD_VAR 0 1
44451: NOT
44452: IFFALSE 44456
// exit ;
44454: GO 44505
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44456: LD_ADDR_VAR 0 2
44460: PUSH
44461: LD_VAR 0 1
44465: PPUSH
44466: LD_INT 1
44468: PPUSH
44469: CALL_OW 275
44473: PUSH
44474: LD_VAR 0 1
44478: PPUSH
44479: LD_INT 2
44481: PPUSH
44482: CALL_OW 275
44486: PUSH
44487: LD_VAR 0 1
44491: PPUSH
44492: LD_INT 3
44494: PPUSH
44495: CALL_OW 275
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// end ;
44505: LD_VAR 0 2
44509: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44510: LD_INT 0
44512: PPUSH
44513: PPUSH
// result := array ;
44514: LD_ADDR_VAR 0 3
44518: PUSH
44519: LD_VAR 0 1
44523: ST_TO_ADDR
// if size >= result then
44524: LD_VAR 0 2
44528: PUSH
44529: LD_VAR 0 3
44533: GREATEREQUAL
44534: IFFALSE 44538
// exit ;
44536: GO 44588
// if size then
44538: LD_VAR 0 2
44542: IFFALSE 44588
// for i := array downto size do
44544: LD_ADDR_VAR 0 4
44548: PUSH
44549: DOUBLE
44550: LD_VAR 0 1
44554: INC
44555: ST_TO_ADDR
44556: LD_VAR 0 2
44560: PUSH
44561: FOR_DOWNTO
44562: IFFALSE 44586
// result := Delete ( result , result ) ;
44564: LD_ADDR_VAR 0 3
44568: PUSH
44569: LD_VAR 0 3
44573: PPUSH
44574: LD_VAR 0 3
44578: PPUSH
44579: CALL_OW 3
44583: ST_TO_ADDR
44584: GO 44561
44586: POP
44587: POP
// end ;
44588: LD_VAR 0 3
44592: RET
// export function ComExit ( unit ) ; var tmp ; begin
44593: LD_INT 0
44595: PPUSH
44596: PPUSH
// if not IsInUnit ( unit ) then
44597: LD_VAR 0 1
44601: PPUSH
44602: CALL_OW 310
44606: NOT
44607: IFFALSE 44611
// exit ;
44609: GO 44671
// tmp := IsInUnit ( unit ) ;
44611: LD_ADDR_VAR 0 3
44615: PUSH
44616: LD_VAR 0 1
44620: PPUSH
44621: CALL_OW 310
44625: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44626: LD_VAR 0 3
44630: PPUSH
44631: CALL_OW 247
44635: PUSH
44636: LD_INT 2
44638: EQUAL
44639: IFFALSE 44652
// ComExitVehicle ( unit ) else
44641: LD_VAR 0 1
44645: PPUSH
44646: CALL_OW 121
44650: GO 44661
// ComExitBuilding ( unit ) ;
44652: LD_VAR 0 1
44656: PPUSH
44657: CALL_OW 122
// result := tmp ;
44661: LD_ADDR_VAR 0 2
44665: PUSH
44666: LD_VAR 0 3
44670: ST_TO_ADDR
// end ;
44671: LD_VAR 0 2
44675: RET
// export function ComExitAll ( units ) ; var i ; begin
44676: LD_INT 0
44678: PPUSH
44679: PPUSH
// if not units then
44680: LD_VAR 0 1
44684: NOT
44685: IFFALSE 44689
// exit ;
44687: GO 44715
// for i in units do
44689: LD_ADDR_VAR 0 3
44693: PUSH
44694: LD_VAR 0 1
44698: PUSH
44699: FOR_IN
44700: IFFALSE 44713
// ComExit ( i ) ;
44702: LD_VAR 0 3
44706: PPUSH
44707: CALL 44593 0 1
44711: GO 44699
44713: POP
44714: POP
// end ;
44715: LD_VAR 0 2
44719: RET
// export function ResetHc ; begin
44720: LD_INT 0
44722: PPUSH
// InitHc ;
44723: CALL_OW 19
// hc_importance := 0 ;
44727: LD_ADDR_OWVAR 32
44731: PUSH
44732: LD_INT 0
44734: ST_TO_ADDR
// end ;
44735: LD_VAR 0 1
44739: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44740: LD_INT 0
44742: PPUSH
44743: PPUSH
44744: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44745: LD_ADDR_VAR 0 6
44749: PUSH
44750: LD_VAR 0 1
44754: PUSH
44755: LD_VAR 0 3
44759: PLUS
44760: PUSH
44761: LD_INT 2
44763: DIV
44764: ST_TO_ADDR
// if _x < 0 then
44765: LD_VAR 0 6
44769: PUSH
44770: LD_INT 0
44772: LESS
44773: IFFALSE 44790
// _x := _x * - 1 ;
44775: LD_ADDR_VAR 0 6
44779: PUSH
44780: LD_VAR 0 6
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: MUL
44789: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44790: LD_ADDR_VAR 0 7
44794: PUSH
44795: LD_VAR 0 2
44799: PUSH
44800: LD_VAR 0 4
44804: PLUS
44805: PUSH
44806: LD_INT 2
44808: DIV
44809: ST_TO_ADDR
// if _y < 0 then
44810: LD_VAR 0 7
44814: PUSH
44815: LD_INT 0
44817: LESS
44818: IFFALSE 44835
// _y := _y * - 1 ;
44820: LD_ADDR_VAR 0 7
44824: PUSH
44825: LD_VAR 0 7
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: MUL
44834: ST_TO_ADDR
// result := [ _x , _y ] ;
44835: LD_ADDR_VAR 0 5
44839: PUSH
44840: LD_VAR 0 6
44844: PUSH
44845: LD_VAR 0 7
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: ST_TO_ADDR
// end ;
44854: LD_VAR 0 5
44858: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44859: LD_INT 0
44861: PPUSH
44862: PPUSH
44863: PPUSH
44864: PPUSH
// task := GetTaskList ( unit ) ;
44865: LD_ADDR_VAR 0 7
44869: PUSH
44870: LD_VAR 0 1
44874: PPUSH
44875: CALL_OW 437
44879: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44880: LD_VAR 0 7
44884: NOT
44885: PUSH
44886: LD_VAR 0 1
44890: PPUSH
44891: LD_VAR 0 2
44895: PPUSH
44896: CALL_OW 308
44900: NOT
44901: AND
44902: IFFALSE 44906
// exit ;
44904: GO 45024
// if IsInArea ( unit , area ) then
44906: LD_VAR 0 1
44910: PPUSH
44911: LD_VAR 0 2
44915: PPUSH
44916: CALL_OW 308
44920: IFFALSE 44938
// begin ComMoveToArea ( unit , goAway ) ;
44922: LD_VAR 0 1
44926: PPUSH
44927: LD_VAR 0 3
44931: PPUSH
44932: CALL_OW 113
// exit ;
44936: GO 45024
// end ; if task [ 1 ] [ 1 ] <> M then
44938: LD_VAR 0 7
44942: PUSH
44943: LD_INT 1
44945: ARRAY
44946: PUSH
44947: LD_INT 1
44949: ARRAY
44950: PUSH
44951: LD_STRING M
44953: NONEQUAL
44954: IFFALSE 44958
// exit ;
44956: GO 45024
// x := task [ 1 ] [ 2 ] ;
44958: LD_ADDR_VAR 0 5
44962: PUSH
44963: LD_VAR 0 7
44967: PUSH
44968: LD_INT 1
44970: ARRAY
44971: PUSH
44972: LD_INT 2
44974: ARRAY
44975: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44976: LD_ADDR_VAR 0 6
44980: PUSH
44981: LD_VAR 0 7
44985: PUSH
44986: LD_INT 1
44988: ARRAY
44989: PUSH
44990: LD_INT 3
44992: ARRAY
44993: ST_TO_ADDR
// if InArea ( x , y , area ) then
44994: LD_VAR 0 5
44998: PPUSH
44999: LD_VAR 0 6
45003: PPUSH
45004: LD_VAR 0 2
45008: PPUSH
45009: CALL_OW 309
45013: IFFALSE 45024
// ComStop ( unit ) ;
45015: LD_VAR 0 1
45019: PPUSH
45020: CALL_OW 141
// end ;
45024: LD_VAR 0 4
45028: RET
// export function Abs ( value ) ; begin
45029: LD_INT 0
45031: PPUSH
// result := value ;
45032: LD_ADDR_VAR 0 2
45036: PUSH
45037: LD_VAR 0 1
45041: ST_TO_ADDR
// if value < 0 then
45042: LD_VAR 0 1
45046: PUSH
45047: LD_INT 0
45049: LESS
45050: IFFALSE 45067
// result := value * - 1 ;
45052: LD_ADDR_VAR 0 2
45056: PUSH
45057: LD_VAR 0 1
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: MUL
45066: ST_TO_ADDR
// end ;
45067: LD_VAR 0 2
45071: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45072: LD_INT 0
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
45080: PPUSH
45081: PPUSH
// if not unit or not building then
45082: LD_VAR 0 1
45086: NOT
45087: PUSH
45088: LD_VAR 0 2
45092: NOT
45093: OR
45094: IFFALSE 45098
// exit ;
45096: GO 45324
// x := GetX ( building ) ;
45098: LD_ADDR_VAR 0 4
45102: PUSH
45103: LD_VAR 0 2
45107: PPUSH
45108: CALL_OW 250
45112: ST_TO_ADDR
// y := GetY ( building ) ;
45113: LD_ADDR_VAR 0 6
45117: PUSH
45118: LD_VAR 0 2
45122: PPUSH
45123: CALL_OW 251
45127: ST_TO_ADDR
// d := GetDir ( building ) ;
45128: LD_ADDR_VAR 0 8
45132: PUSH
45133: LD_VAR 0 2
45137: PPUSH
45138: CALL_OW 254
45142: ST_TO_ADDR
// r := 4 ;
45143: LD_ADDR_VAR 0 9
45147: PUSH
45148: LD_INT 4
45150: ST_TO_ADDR
// for i := 1 to 5 do
45151: LD_ADDR_VAR 0 10
45155: PUSH
45156: DOUBLE
45157: LD_INT 1
45159: DEC
45160: ST_TO_ADDR
45161: LD_INT 5
45163: PUSH
45164: FOR_TO
45165: IFFALSE 45322
// begin _x := ShiftX ( x , d , r + i ) ;
45167: LD_ADDR_VAR 0 5
45171: PUSH
45172: LD_VAR 0 4
45176: PPUSH
45177: LD_VAR 0 8
45181: PPUSH
45182: LD_VAR 0 9
45186: PUSH
45187: LD_VAR 0 10
45191: PLUS
45192: PPUSH
45193: CALL_OW 272
45197: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45198: LD_ADDR_VAR 0 7
45202: PUSH
45203: LD_VAR 0 6
45207: PPUSH
45208: LD_VAR 0 8
45212: PPUSH
45213: LD_VAR 0 9
45217: PUSH
45218: LD_VAR 0 10
45222: PLUS
45223: PPUSH
45224: CALL_OW 273
45228: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45229: LD_VAR 0 5
45233: PPUSH
45234: LD_VAR 0 7
45238: PPUSH
45239: CALL_OW 488
45243: PUSH
45244: LD_VAR 0 5
45248: PPUSH
45249: LD_VAR 0 7
45253: PPUSH
45254: CALL_OW 428
45258: PPUSH
45259: CALL_OW 247
45263: PUSH
45264: LD_INT 3
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: IN
45274: NOT
45275: AND
45276: IFFALSE 45320
// begin ComMoveXY ( unit , _x , _y ) ;
45278: LD_VAR 0 1
45282: PPUSH
45283: LD_VAR 0 5
45287: PPUSH
45288: LD_VAR 0 7
45292: PPUSH
45293: CALL_OW 111
// result := [ _x , _y ] ;
45297: LD_ADDR_VAR 0 3
45301: PUSH
45302: LD_VAR 0 5
45306: PUSH
45307: LD_VAR 0 7
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: ST_TO_ADDR
// exit ;
45316: POP
45317: POP
45318: GO 45324
// end ; end ;
45320: GO 45164
45322: POP
45323: POP
// end ;
45324: LD_VAR 0 3
45328: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45329: LD_INT 0
45331: PPUSH
45332: PPUSH
45333: PPUSH
// result := 0 ;
45334: LD_ADDR_VAR 0 3
45338: PUSH
45339: LD_INT 0
45341: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45342: LD_VAR 0 1
45346: PUSH
45347: LD_INT 0
45349: LESS
45350: PUSH
45351: LD_VAR 0 1
45355: PUSH
45356: LD_INT 8
45358: GREATER
45359: OR
45360: PUSH
45361: LD_VAR 0 2
45365: PUSH
45366: LD_INT 0
45368: LESS
45369: OR
45370: PUSH
45371: LD_VAR 0 2
45375: PUSH
45376: LD_INT 8
45378: GREATER
45379: OR
45380: IFFALSE 45384
// exit ;
45382: GO 45459
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45384: LD_ADDR_VAR 0 4
45388: PUSH
45389: LD_INT 22
45391: PUSH
45392: LD_VAR 0 2
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PPUSH
45401: CALL_OW 69
45405: PUSH
45406: FOR_IN
45407: IFFALSE 45457
// begin un := UnitShoot ( i ) ;
45409: LD_ADDR_VAR 0 5
45413: PUSH
45414: LD_VAR 0 4
45418: PPUSH
45419: CALL_OW 504
45423: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45424: LD_VAR 0 5
45428: PPUSH
45429: CALL_OW 255
45433: PUSH
45434: LD_VAR 0 1
45438: EQUAL
45439: IFFALSE 45455
// begin result := un ;
45441: LD_ADDR_VAR 0 3
45445: PUSH
45446: LD_VAR 0 5
45450: ST_TO_ADDR
// exit ;
45451: POP
45452: POP
45453: GO 45459
// end ; end ;
45455: GO 45406
45457: POP
45458: POP
// end ;
45459: LD_VAR 0 3
45463: RET
// export function GetCargoBay ( units ) ; begin
45464: LD_INT 0
45466: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45467: LD_ADDR_VAR 0 2
45471: PUSH
45472: LD_VAR 0 1
45476: PPUSH
45477: LD_INT 2
45479: PUSH
45480: LD_INT 34
45482: PUSH
45483: LD_INT 12
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 34
45492: PUSH
45493: LD_INT 51
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 34
45502: PUSH
45503: LD_INT 32
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 34
45512: PUSH
45513: LD_EXP 39
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: PPUSH
45529: CALL_OW 72
45533: ST_TO_ADDR
// end ;
45534: LD_VAR 0 2
45538: RET
// export function Negate ( value ) ; begin
45539: LD_INT 0
45541: PPUSH
// result := not value ;
45542: LD_ADDR_VAR 0 2
45546: PUSH
45547: LD_VAR 0 1
45551: NOT
45552: ST_TO_ADDR
// end ;
45553: LD_VAR 0 2
45557: RET
// export function Inc ( value ) ; begin
45558: LD_INT 0
45560: PPUSH
// result := value + 1 ;
45561: LD_ADDR_VAR 0 2
45565: PUSH
45566: LD_VAR 0 1
45570: PUSH
45571: LD_INT 1
45573: PLUS
45574: ST_TO_ADDR
// end ;
45575: LD_VAR 0 2
45579: RET
// export function Dec ( value ) ; begin
45580: LD_INT 0
45582: PPUSH
// result := value - 1 ;
45583: LD_ADDR_VAR 0 2
45587: PUSH
45588: LD_VAR 0 1
45592: PUSH
45593: LD_INT 1
45595: MINUS
45596: ST_TO_ADDR
// end ;
45597: LD_VAR 0 2
45601: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45602: LD_INT 0
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
45608: PPUSH
45609: PPUSH
45610: PPUSH
45611: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45612: LD_VAR 0 1
45616: PPUSH
45617: LD_VAR 0 2
45621: PPUSH
45622: CALL_OW 488
45626: NOT
45627: PUSH
45628: LD_VAR 0 3
45632: PPUSH
45633: LD_VAR 0 4
45637: PPUSH
45638: CALL_OW 488
45642: NOT
45643: OR
45644: IFFALSE 45657
// begin result := - 1 ;
45646: LD_ADDR_VAR 0 5
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: ST_TO_ADDR
// exit ;
45655: GO 45892
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45657: LD_ADDR_VAR 0 12
45661: PUSH
45662: LD_VAR 0 1
45666: PPUSH
45667: LD_VAR 0 2
45671: PPUSH
45672: LD_VAR 0 3
45676: PPUSH
45677: LD_VAR 0 4
45681: PPUSH
45682: CALL 44740 0 4
45686: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45687: LD_ADDR_VAR 0 11
45691: PUSH
45692: LD_VAR 0 1
45696: PPUSH
45697: LD_VAR 0 2
45701: PPUSH
45702: LD_VAR 0 12
45706: PUSH
45707: LD_INT 1
45709: ARRAY
45710: PPUSH
45711: LD_VAR 0 12
45715: PUSH
45716: LD_INT 2
45718: ARRAY
45719: PPUSH
45720: CALL_OW 298
45724: ST_TO_ADDR
// distance := 9999 ;
45725: LD_ADDR_VAR 0 10
45729: PUSH
45730: LD_INT 9999
45732: ST_TO_ADDR
// for i := 0 to 5 do
45733: LD_ADDR_VAR 0 6
45737: PUSH
45738: DOUBLE
45739: LD_INT 0
45741: DEC
45742: ST_TO_ADDR
45743: LD_INT 5
45745: PUSH
45746: FOR_TO
45747: IFFALSE 45890
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45749: LD_ADDR_VAR 0 7
45753: PUSH
45754: LD_VAR 0 1
45758: PPUSH
45759: LD_VAR 0 6
45763: PPUSH
45764: LD_VAR 0 11
45768: PPUSH
45769: CALL_OW 272
45773: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45774: LD_ADDR_VAR 0 8
45778: PUSH
45779: LD_VAR 0 2
45783: PPUSH
45784: LD_VAR 0 6
45788: PPUSH
45789: LD_VAR 0 11
45793: PPUSH
45794: CALL_OW 273
45798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45799: LD_VAR 0 7
45803: PPUSH
45804: LD_VAR 0 8
45808: PPUSH
45809: CALL_OW 488
45813: NOT
45814: IFFALSE 45818
// continue ;
45816: GO 45746
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45818: LD_ADDR_VAR 0 9
45822: PUSH
45823: LD_VAR 0 12
45827: PUSH
45828: LD_INT 1
45830: ARRAY
45831: PPUSH
45832: LD_VAR 0 12
45836: PUSH
45837: LD_INT 2
45839: ARRAY
45840: PPUSH
45841: LD_VAR 0 7
45845: PPUSH
45846: LD_VAR 0 8
45850: PPUSH
45851: CALL_OW 298
45855: ST_TO_ADDR
// if tmp < distance then
45856: LD_VAR 0 9
45860: PUSH
45861: LD_VAR 0 10
45865: LESS
45866: IFFALSE 45888
// begin result := i ;
45868: LD_ADDR_VAR 0 5
45872: PUSH
45873: LD_VAR 0 6
45877: ST_TO_ADDR
// distance := tmp ;
45878: LD_ADDR_VAR 0 10
45882: PUSH
45883: LD_VAR 0 9
45887: ST_TO_ADDR
// end ; end ;
45888: GO 45746
45890: POP
45891: POP
// end ;
45892: LD_VAR 0 5
45896: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45897: LD_INT 0
45899: PPUSH
45900: PPUSH
// if not driver or not IsInUnit ( driver ) then
45901: LD_VAR 0 1
45905: NOT
45906: PUSH
45907: LD_VAR 0 1
45911: PPUSH
45912: CALL_OW 310
45916: NOT
45917: OR
45918: IFFALSE 45922
// exit ;
45920: GO 46012
// vehicle := IsInUnit ( driver ) ;
45922: LD_ADDR_VAR 0 3
45926: PUSH
45927: LD_VAR 0 1
45931: PPUSH
45932: CALL_OW 310
45936: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45937: LD_VAR 0 1
45941: PPUSH
45942: LD_STRING \
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: PUSH
45972: LD_STRING E
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_VAR 0 3
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PPUSH
46008: CALL_OW 446
// end ;
46012: LD_VAR 0 2
46016: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46017: LD_INT 0
46019: PPUSH
46020: PPUSH
// if not driver or not IsInUnit ( driver ) then
46021: LD_VAR 0 1
46025: NOT
46026: PUSH
46027: LD_VAR 0 1
46031: PPUSH
46032: CALL_OW 310
46036: NOT
46037: OR
46038: IFFALSE 46042
// exit ;
46040: GO 46132
// vehicle := IsInUnit ( driver ) ;
46042: LD_ADDR_VAR 0 3
46046: PUSH
46047: LD_VAR 0 1
46051: PPUSH
46052: CALL_OW 310
46056: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46057: LD_VAR 0 1
46061: PPUSH
46062: LD_STRING \
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: PUSH
46092: LD_STRING E
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_VAR 0 3
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PPUSH
46128: CALL_OW 447
// end ;
46132: LD_VAR 0 2
46136: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46137: LD_INT 0
46139: PPUSH
46140: PPUSH
46141: PPUSH
// tmp := [ ] ;
46142: LD_ADDR_VAR 0 5
46146: PUSH
46147: EMPTY
46148: ST_TO_ADDR
// for i in units do
46149: LD_ADDR_VAR 0 4
46153: PUSH
46154: LD_VAR 0 1
46158: PUSH
46159: FOR_IN
46160: IFFALSE 46198
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46162: LD_ADDR_VAR 0 5
46166: PUSH
46167: LD_VAR 0 5
46171: PPUSH
46172: LD_VAR 0 5
46176: PUSH
46177: LD_INT 1
46179: PLUS
46180: PPUSH
46181: LD_VAR 0 4
46185: PPUSH
46186: CALL_OW 256
46190: PPUSH
46191: CALL_OW 2
46195: ST_TO_ADDR
46196: GO 46159
46198: POP
46199: POP
// if not tmp then
46200: LD_VAR 0 5
46204: NOT
46205: IFFALSE 46209
// exit ;
46207: GO 46257
// if asc then
46209: LD_VAR 0 2
46213: IFFALSE 46237
// result := SortListByListAsc ( units , tmp ) else
46215: LD_ADDR_VAR 0 3
46219: PUSH
46220: LD_VAR 0 1
46224: PPUSH
46225: LD_VAR 0 5
46229: PPUSH
46230: CALL_OW 76
46234: ST_TO_ADDR
46235: GO 46257
// result := SortListByListDesc ( units , tmp ) ;
46237: LD_ADDR_VAR 0 3
46241: PUSH
46242: LD_VAR 0 1
46246: PPUSH
46247: LD_VAR 0 5
46251: PPUSH
46252: CALL_OW 77
46256: ST_TO_ADDR
// end ;
46257: LD_VAR 0 3
46261: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46262: LD_INT 0
46264: PPUSH
46265: PPUSH
// task := GetTaskList ( mech ) ;
46266: LD_ADDR_VAR 0 4
46270: PUSH
46271: LD_VAR 0 1
46275: PPUSH
46276: CALL_OW 437
46280: ST_TO_ADDR
// if not task then
46281: LD_VAR 0 4
46285: NOT
46286: IFFALSE 46290
// exit ;
46288: GO 46332
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46290: LD_ADDR_VAR 0 3
46294: PUSH
46295: LD_VAR 0 4
46299: PUSH
46300: LD_INT 1
46302: ARRAY
46303: PUSH
46304: LD_INT 1
46306: ARRAY
46307: PUSH
46308: LD_STRING r
46310: EQUAL
46311: PUSH
46312: LD_VAR 0 4
46316: PUSH
46317: LD_INT 1
46319: ARRAY
46320: PUSH
46321: LD_INT 4
46323: ARRAY
46324: PUSH
46325: LD_VAR 0 2
46329: EQUAL
46330: AND
46331: ST_TO_ADDR
// end ;
46332: LD_VAR 0 3
46336: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46337: LD_INT 0
46339: PPUSH
// SetDir ( unit , d ) ;
46340: LD_VAR 0 1
46344: PPUSH
46345: LD_VAR 0 4
46349: PPUSH
46350: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
46354: LD_VAR 0 1
46358: PPUSH
46359: LD_VAR 0 2
46363: PPUSH
46364: LD_VAR 0 3
46368: PPUSH
46369: LD_VAR 0 5
46373: PPUSH
46374: CALL_OW 48
// end ;
46378: LD_VAR 0 6
46382: RET
// export function ToNaturalNumber ( number ) ; begin
46383: LD_INT 0
46385: PPUSH
// result := number div 1 ;
46386: LD_ADDR_VAR 0 2
46390: PUSH
46391: LD_VAR 0 1
46395: PUSH
46396: LD_INT 1
46398: DIV
46399: ST_TO_ADDR
// if number < 0 then
46400: LD_VAR 0 1
46404: PUSH
46405: LD_INT 0
46407: LESS
46408: IFFALSE 46418
// result := 0 ;
46410: LD_ADDR_VAR 0 2
46414: PUSH
46415: LD_INT 0
46417: ST_TO_ADDR
// end ;
46418: LD_VAR 0 2
46422: RET
// export function SortByClass ( units , class ) ; var un ; begin
46423: LD_INT 0
46425: PPUSH
46426: PPUSH
// if not units or not class then
46427: LD_VAR 0 1
46431: NOT
46432: PUSH
46433: LD_VAR 0 2
46437: NOT
46438: OR
46439: IFFALSE 46443
// exit ;
46441: GO 46538
// result := [ ] ;
46443: LD_ADDR_VAR 0 3
46447: PUSH
46448: EMPTY
46449: ST_TO_ADDR
// for un in units do
46450: LD_ADDR_VAR 0 4
46454: PUSH
46455: LD_VAR 0 1
46459: PUSH
46460: FOR_IN
46461: IFFALSE 46536
// if GetClass ( un ) = class then
46463: LD_VAR 0 4
46467: PPUSH
46468: CALL_OW 257
46472: PUSH
46473: LD_VAR 0 2
46477: EQUAL
46478: IFFALSE 46505
// result := Insert ( result , 1 , un ) else
46480: LD_ADDR_VAR 0 3
46484: PUSH
46485: LD_VAR 0 3
46489: PPUSH
46490: LD_INT 1
46492: PPUSH
46493: LD_VAR 0 4
46497: PPUSH
46498: CALL_OW 2
46502: ST_TO_ADDR
46503: GO 46534
// result := Replace ( result , result + 1 , un ) ;
46505: LD_ADDR_VAR 0 3
46509: PUSH
46510: LD_VAR 0 3
46514: PPUSH
46515: LD_VAR 0 3
46519: PUSH
46520: LD_INT 1
46522: PLUS
46523: PPUSH
46524: LD_VAR 0 4
46528: PPUSH
46529: CALL_OW 1
46533: ST_TO_ADDR
46534: GO 46460
46536: POP
46537: POP
// end ;
46538: LD_VAR 0 3
46542: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46543: LD_INT 0
46545: PPUSH
46546: PPUSH
46547: PPUSH
46548: PPUSH
46549: PPUSH
46550: PPUSH
46551: PPUSH
// result := [ ] ;
46552: LD_ADDR_VAR 0 4
46556: PUSH
46557: EMPTY
46558: ST_TO_ADDR
// if x - r < 0 then
46559: LD_VAR 0 1
46563: PUSH
46564: LD_VAR 0 3
46568: MINUS
46569: PUSH
46570: LD_INT 0
46572: LESS
46573: IFFALSE 46585
// min_x := 0 else
46575: LD_ADDR_VAR 0 8
46579: PUSH
46580: LD_INT 0
46582: ST_TO_ADDR
46583: GO 46601
// min_x := x - r ;
46585: LD_ADDR_VAR 0 8
46589: PUSH
46590: LD_VAR 0 1
46594: PUSH
46595: LD_VAR 0 3
46599: MINUS
46600: ST_TO_ADDR
// if y - r < 0 then
46601: LD_VAR 0 2
46605: PUSH
46606: LD_VAR 0 3
46610: MINUS
46611: PUSH
46612: LD_INT 0
46614: LESS
46615: IFFALSE 46627
// min_y := 0 else
46617: LD_ADDR_VAR 0 7
46621: PUSH
46622: LD_INT 0
46624: ST_TO_ADDR
46625: GO 46643
// min_y := y - r ;
46627: LD_ADDR_VAR 0 7
46631: PUSH
46632: LD_VAR 0 2
46636: PUSH
46637: LD_VAR 0 3
46641: MINUS
46642: ST_TO_ADDR
// max_x := x + r ;
46643: LD_ADDR_VAR 0 9
46647: PUSH
46648: LD_VAR 0 1
46652: PUSH
46653: LD_VAR 0 3
46657: PLUS
46658: ST_TO_ADDR
// max_y := y + r ;
46659: LD_ADDR_VAR 0 10
46663: PUSH
46664: LD_VAR 0 2
46668: PUSH
46669: LD_VAR 0 3
46673: PLUS
46674: ST_TO_ADDR
// for _x = min_x to max_x do
46675: LD_ADDR_VAR 0 5
46679: PUSH
46680: DOUBLE
46681: LD_VAR 0 8
46685: DEC
46686: ST_TO_ADDR
46687: LD_VAR 0 9
46691: PUSH
46692: FOR_TO
46693: IFFALSE 46794
// for _y = min_y to max_y do
46695: LD_ADDR_VAR 0 6
46699: PUSH
46700: DOUBLE
46701: LD_VAR 0 7
46705: DEC
46706: ST_TO_ADDR
46707: LD_VAR 0 10
46711: PUSH
46712: FOR_TO
46713: IFFALSE 46790
// begin if not ValidHex ( _x , _y ) then
46715: LD_VAR 0 5
46719: PPUSH
46720: LD_VAR 0 6
46724: PPUSH
46725: CALL_OW 488
46729: NOT
46730: IFFALSE 46734
// continue ;
46732: GO 46712
// if GetResourceTypeXY ( _x , _y ) then
46734: LD_VAR 0 5
46738: PPUSH
46739: LD_VAR 0 6
46743: PPUSH
46744: CALL_OW 283
46748: IFFALSE 46788
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46750: LD_ADDR_VAR 0 4
46754: PUSH
46755: LD_VAR 0 4
46759: PPUSH
46760: LD_VAR 0 4
46764: PUSH
46765: LD_INT 1
46767: PLUS
46768: PPUSH
46769: LD_VAR 0 5
46773: PUSH
46774: LD_VAR 0 6
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PPUSH
46783: CALL_OW 1
46787: ST_TO_ADDR
// end ;
46788: GO 46712
46790: POP
46791: POP
46792: GO 46692
46794: POP
46795: POP
// end ;
46796: LD_VAR 0 4
46800: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46801: LD_INT 0
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
// if not units then
46811: LD_VAR 0 1
46815: NOT
46816: IFFALSE 46820
// exit ;
46818: GO 47346
// result := UnitFilter ( units , [ f_ok ] ) ;
46820: LD_ADDR_VAR 0 3
46824: PUSH
46825: LD_VAR 0 1
46829: PPUSH
46830: LD_INT 50
46832: PUSH
46833: EMPTY
46834: LIST
46835: PPUSH
46836: CALL_OW 72
46840: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46841: LD_ADDR_VAR 0 8
46845: PUSH
46846: LD_VAR 0 1
46850: PUSH
46851: LD_INT 1
46853: ARRAY
46854: PPUSH
46855: CALL_OW 255
46859: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46860: LD_ADDR_VAR 0 10
46864: PUSH
46865: LD_INT 29
46867: PUSH
46868: LD_EXP 42
46872: PUSH
46873: LD_INT 49
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
// if not result then
46881: LD_VAR 0 3
46885: NOT
46886: IFFALSE 46890
// exit ;
46888: GO 47346
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46890: LD_ADDR_VAR 0 5
46894: PUSH
46895: LD_INT 81
46897: PUSH
46898: LD_VAR 0 8
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PPUSH
46907: CALL_OW 69
46911: ST_TO_ADDR
// for i in result do
46912: LD_ADDR_VAR 0 4
46916: PUSH
46917: LD_VAR 0 3
46921: PUSH
46922: FOR_IN
46923: IFFALSE 47344
// begin tag := GetTag ( i ) + 1 ;
46925: LD_ADDR_VAR 0 9
46929: PUSH
46930: LD_VAR 0 4
46934: PPUSH
46935: CALL_OW 110
46939: PUSH
46940: LD_INT 1
46942: PLUS
46943: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46944: LD_ADDR_VAR 0 7
46948: PUSH
46949: LD_VAR 0 4
46953: PPUSH
46954: CALL_OW 250
46958: PPUSH
46959: LD_VAR 0 4
46963: PPUSH
46964: CALL_OW 251
46968: PPUSH
46969: LD_INT 6
46971: PPUSH
46972: CALL 46543 0 3
46976: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46977: LD_VAR 0 4
46981: PPUSH
46982: CALL_OW 247
46986: PUSH
46987: LD_INT 2
46989: EQUAL
46990: PUSH
46991: LD_VAR 0 7
46995: AND
46996: PUSH
46997: LD_VAR 0 4
47001: PPUSH
47002: CALL_OW 264
47006: PUSH
47007: LD_VAR 0 10
47011: IN
47012: NOT
47013: AND
47014: IFFALSE 47053
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
47016: LD_VAR 0 4
47020: PPUSH
47021: LD_VAR 0 7
47025: PUSH
47026: LD_INT 1
47028: ARRAY
47029: PUSH
47030: LD_INT 1
47032: ARRAY
47033: PPUSH
47034: LD_VAR 0 7
47038: PUSH
47039: LD_INT 1
47041: ARRAY
47042: PUSH
47043: LD_INT 2
47045: ARRAY
47046: PPUSH
47047: CALL_OW 116
47051: GO 47342
// if path > tag then
47053: LD_VAR 0 2
47057: PUSH
47058: LD_VAR 0 9
47062: GREATER
47063: IFFALSE 47271
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
47065: LD_ADDR_VAR 0 6
47069: PUSH
47070: LD_VAR 0 5
47074: PPUSH
47075: LD_INT 91
47077: PUSH
47078: LD_VAR 0 4
47082: PUSH
47083: LD_INT 8
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: PPUSH
47091: CALL_OW 72
47095: ST_TO_ADDR
// if nearEnemy then
47096: LD_VAR 0 6
47100: IFFALSE 47169
// begin if GetWeapon ( i ) = ru_time_lapser then
47102: LD_VAR 0 4
47106: PPUSH
47107: CALL_OW 264
47111: PUSH
47112: LD_INT 49
47114: EQUAL
47115: IFFALSE 47143
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47117: LD_VAR 0 4
47121: PPUSH
47122: LD_VAR 0 6
47126: PPUSH
47127: LD_VAR 0 4
47131: PPUSH
47132: CALL_OW 74
47136: PPUSH
47137: CALL_OW 112
47141: GO 47167
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
47143: LD_VAR 0 4
47147: PPUSH
47148: LD_VAR 0 6
47152: PPUSH
47153: LD_VAR 0 4
47157: PPUSH
47158: CALL_OW 74
47162: PPUSH
47163: CALL_OW 115
// end else
47167: GO 47269
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47169: LD_VAR 0 4
47173: PPUSH
47174: LD_VAR 0 2
47178: PUSH
47179: LD_VAR 0 9
47183: ARRAY
47184: PUSH
47185: LD_INT 1
47187: ARRAY
47188: PPUSH
47189: LD_VAR 0 2
47193: PUSH
47194: LD_VAR 0 9
47198: ARRAY
47199: PUSH
47200: LD_INT 2
47202: ARRAY
47203: PPUSH
47204: CALL_OW 297
47208: PUSH
47209: LD_INT 6
47211: GREATER
47212: IFFALSE 47255
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47214: LD_VAR 0 4
47218: PPUSH
47219: LD_VAR 0 2
47223: PUSH
47224: LD_VAR 0 9
47228: ARRAY
47229: PUSH
47230: LD_INT 1
47232: ARRAY
47233: PPUSH
47234: LD_VAR 0 2
47238: PUSH
47239: LD_VAR 0 9
47243: ARRAY
47244: PUSH
47245: LD_INT 2
47247: ARRAY
47248: PPUSH
47249: CALL_OW 114
47253: GO 47269
// SetTag ( i , tag ) ;
47255: LD_VAR 0 4
47259: PPUSH
47260: LD_VAR 0 9
47264: PPUSH
47265: CALL_OW 109
// end else
47269: GO 47342
// if enemy then
47271: LD_VAR 0 5
47275: IFFALSE 47342
// begin if GetWeapon ( i ) = ru_time_lapser then
47277: LD_VAR 0 4
47281: PPUSH
47282: CALL_OW 264
47286: PUSH
47287: LD_INT 49
47289: EQUAL
47290: IFFALSE 47318
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
47292: LD_VAR 0 4
47296: PPUSH
47297: LD_VAR 0 5
47301: PPUSH
47302: LD_VAR 0 4
47306: PPUSH
47307: CALL_OW 74
47311: PPUSH
47312: CALL_OW 112
47316: GO 47342
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47318: LD_VAR 0 4
47322: PPUSH
47323: LD_VAR 0 5
47327: PPUSH
47328: LD_VAR 0 4
47332: PPUSH
47333: CALL_OW 74
47337: PPUSH
47338: CALL_OW 115
// end ; end ;
47342: GO 46922
47344: POP
47345: POP
// end ;
47346: LD_VAR 0 3
47350: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47351: LD_INT 0
47353: PPUSH
47354: PPUSH
47355: PPUSH
// if not unit or IsInUnit ( unit ) then
47356: LD_VAR 0 1
47360: NOT
47361: PUSH
47362: LD_VAR 0 1
47366: PPUSH
47367: CALL_OW 310
47371: OR
47372: IFFALSE 47376
// exit ;
47374: GO 47467
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47376: LD_ADDR_VAR 0 4
47380: PUSH
47381: LD_VAR 0 1
47385: PPUSH
47386: CALL_OW 250
47390: PPUSH
47391: LD_VAR 0 2
47395: PPUSH
47396: LD_INT 1
47398: PPUSH
47399: CALL_OW 272
47403: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47404: LD_ADDR_VAR 0 5
47408: PUSH
47409: LD_VAR 0 1
47413: PPUSH
47414: CALL_OW 251
47418: PPUSH
47419: LD_VAR 0 2
47423: PPUSH
47424: LD_INT 1
47426: PPUSH
47427: CALL_OW 273
47431: ST_TO_ADDR
// if ValidHex ( x , y ) then
47432: LD_VAR 0 4
47436: PPUSH
47437: LD_VAR 0 5
47441: PPUSH
47442: CALL_OW 488
47446: IFFALSE 47467
// ComTurnXY ( unit , x , y ) ;
47448: LD_VAR 0 1
47452: PPUSH
47453: LD_VAR 0 4
47457: PPUSH
47458: LD_VAR 0 5
47462: PPUSH
47463: CALL_OW 118
// end ;
47467: LD_VAR 0 3
47471: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47472: LD_INT 0
47474: PPUSH
47475: PPUSH
// result := false ;
47476: LD_ADDR_VAR 0 3
47480: PUSH
47481: LD_INT 0
47483: ST_TO_ADDR
// if not units then
47484: LD_VAR 0 2
47488: NOT
47489: IFFALSE 47493
// exit ;
47491: GO 47538
// for i in units do
47493: LD_ADDR_VAR 0 4
47497: PUSH
47498: LD_VAR 0 2
47502: PUSH
47503: FOR_IN
47504: IFFALSE 47536
// if See ( side , i ) then
47506: LD_VAR 0 1
47510: PPUSH
47511: LD_VAR 0 4
47515: PPUSH
47516: CALL_OW 292
47520: IFFALSE 47534
// begin result := true ;
47522: LD_ADDR_VAR 0 3
47526: PUSH
47527: LD_INT 1
47529: ST_TO_ADDR
// exit ;
47530: POP
47531: POP
47532: GO 47538
// end ;
47534: GO 47503
47536: POP
47537: POP
// end ;
47538: LD_VAR 0 3
47542: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47543: LD_INT 0
47545: PPUSH
47546: PPUSH
47547: PPUSH
47548: PPUSH
// if not unit or not points then
47549: LD_VAR 0 1
47553: NOT
47554: PUSH
47555: LD_VAR 0 2
47559: NOT
47560: OR
47561: IFFALSE 47565
// exit ;
47563: GO 47655
// dist := 99999 ;
47565: LD_ADDR_VAR 0 5
47569: PUSH
47570: LD_INT 99999
47572: ST_TO_ADDR
// for i in points do
47573: LD_ADDR_VAR 0 4
47577: PUSH
47578: LD_VAR 0 2
47582: PUSH
47583: FOR_IN
47584: IFFALSE 47653
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47586: LD_ADDR_VAR 0 6
47590: PUSH
47591: LD_VAR 0 1
47595: PPUSH
47596: LD_VAR 0 4
47600: PUSH
47601: LD_INT 1
47603: ARRAY
47604: PPUSH
47605: LD_VAR 0 4
47609: PUSH
47610: LD_INT 2
47612: ARRAY
47613: PPUSH
47614: CALL_OW 297
47618: ST_TO_ADDR
// if tmpDist < dist then
47619: LD_VAR 0 6
47623: PUSH
47624: LD_VAR 0 5
47628: LESS
47629: IFFALSE 47651
// begin result := i ;
47631: LD_ADDR_VAR 0 3
47635: PUSH
47636: LD_VAR 0 4
47640: ST_TO_ADDR
// dist := tmpDist ;
47641: LD_ADDR_VAR 0 5
47645: PUSH
47646: LD_VAR 0 6
47650: ST_TO_ADDR
// end ; end ;
47651: GO 47583
47653: POP
47654: POP
// end ;
47655: LD_VAR 0 3
47659: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47660: LD_INT 0
47662: PPUSH
// uc_side := side ;
47663: LD_ADDR_OWVAR 20
47667: PUSH
47668: LD_VAR 0 1
47672: ST_TO_ADDR
// uc_nation := 3 ;
47673: LD_ADDR_OWVAR 21
47677: PUSH
47678: LD_INT 3
47680: ST_TO_ADDR
// vc_chassis := 25 ;
47681: LD_ADDR_OWVAR 37
47685: PUSH
47686: LD_INT 25
47688: ST_TO_ADDR
// vc_engine := engine_siberite ;
47689: LD_ADDR_OWVAR 39
47693: PUSH
47694: LD_INT 3
47696: ST_TO_ADDR
// vc_control := control_computer ;
47697: LD_ADDR_OWVAR 38
47701: PUSH
47702: LD_INT 3
47704: ST_TO_ADDR
// vc_weapon := 59 ;
47705: LD_ADDR_OWVAR 40
47709: PUSH
47710: LD_INT 59
47712: ST_TO_ADDR
// result := CreateVehicle ;
47713: LD_ADDR_VAR 0 5
47717: PUSH
47718: CALL_OW 45
47722: ST_TO_ADDR
// SetDir ( result , d ) ;
47723: LD_VAR 0 5
47727: PPUSH
47728: LD_VAR 0 4
47732: PPUSH
47733: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47737: LD_VAR 0 5
47741: PPUSH
47742: LD_VAR 0 2
47746: PPUSH
47747: LD_VAR 0 3
47751: PPUSH
47752: LD_INT 0
47754: PPUSH
47755: CALL_OW 48
// end ;
47759: LD_VAR 0 5
47763: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47764: LD_INT 0
47766: PPUSH
47767: PPUSH
47768: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47769: LD_ADDR_VAR 0 2
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47792: LD_VAR 0 1
47796: NOT
47797: PUSH
47798: LD_VAR 0 1
47802: PPUSH
47803: CALL_OW 264
47807: PUSH
47808: LD_INT 12
47810: PUSH
47811: LD_INT 51
47813: PUSH
47814: LD_INT 32
47816: PUSH
47817: LD_EXP 39
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: IN
47828: NOT
47829: OR
47830: IFFALSE 47834
// exit ;
47832: GO 47932
// for i := 1 to 3 do
47834: LD_ADDR_VAR 0 3
47838: PUSH
47839: DOUBLE
47840: LD_INT 1
47842: DEC
47843: ST_TO_ADDR
47844: LD_INT 3
47846: PUSH
47847: FOR_TO
47848: IFFALSE 47930
// begin tmp := GetCargo ( cargo , i ) ;
47850: LD_ADDR_VAR 0 4
47854: PUSH
47855: LD_VAR 0 1
47859: PPUSH
47860: LD_VAR 0 3
47864: PPUSH
47865: CALL_OW 289
47869: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47870: LD_ADDR_VAR 0 2
47874: PUSH
47875: LD_VAR 0 2
47879: PPUSH
47880: LD_VAR 0 3
47884: PPUSH
47885: LD_VAR 0 4
47889: PPUSH
47890: CALL_OW 1
47894: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47895: LD_ADDR_VAR 0 2
47899: PUSH
47900: LD_VAR 0 2
47904: PPUSH
47905: LD_INT 4
47907: PPUSH
47908: LD_VAR 0 2
47912: PUSH
47913: LD_INT 4
47915: ARRAY
47916: PUSH
47917: LD_VAR 0 4
47921: PLUS
47922: PPUSH
47923: CALL_OW 1
47927: ST_TO_ADDR
// end ;
47928: GO 47847
47930: POP
47931: POP
// end ;
47932: LD_VAR 0 2
47936: RET
// export function Length ( array ) ; begin
47937: LD_INT 0
47939: PPUSH
// result := array + 0 ;
47940: LD_ADDR_VAR 0 2
47944: PUSH
47945: LD_VAR 0 1
47949: PUSH
47950: LD_INT 0
47952: PLUS
47953: ST_TO_ADDR
// end ;
47954: LD_VAR 0 2
47958: RET
// export function PrepareArray ( array ) ; begin
47959: LD_INT 0
47961: PPUSH
// result := array diff 0 ;
47962: LD_ADDR_VAR 0 2
47966: PUSH
47967: LD_VAR 0 1
47971: PUSH
47972: LD_INT 0
47974: DIFF
47975: ST_TO_ADDR
// if not result [ 1 ] then
47976: LD_VAR 0 2
47980: PUSH
47981: LD_INT 1
47983: ARRAY
47984: NOT
47985: IFFALSE 48005
// result := Delete ( result , 1 ) ;
47987: LD_ADDR_VAR 0 2
47991: PUSH
47992: LD_VAR 0 2
47996: PPUSH
47997: LD_INT 1
47999: PPUSH
48000: CALL_OW 3
48004: ST_TO_ADDR
// end ; end_of_file
48005: LD_VAR 0 2
48009: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
48010: LD_INT 0
48012: PPUSH
// ar_miner := 81 ;
48013: LD_ADDR_EXP 45
48017: PUSH
48018: LD_INT 81
48020: ST_TO_ADDR
// ar_crane := 88 ;
48021: LD_ADDR_EXP 44
48025: PUSH
48026: LD_INT 88
48028: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
48029: LD_ADDR_EXP 39
48033: PUSH
48034: LD_INT 89
48036: ST_TO_ADDR
// us_hack := 99 ;
48037: LD_ADDR_EXP 40
48041: PUSH
48042: LD_INT 99
48044: ST_TO_ADDR
// us_artillery := 97 ;
48045: LD_ADDR_EXP 41
48049: PUSH
48050: LD_INT 97
48052: ST_TO_ADDR
// ar_bio_bomb := 91 ;
48053: LD_ADDR_EXP 42
48057: PUSH
48058: LD_INT 91
48060: ST_TO_ADDR
// ar_mortar := 92 ;
48061: LD_ADDR_EXP 43
48065: PUSH
48066: LD_INT 92
48068: ST_TO_ADDR
// ru_flamethrower := 93 ;
48069: LD_ADDR_EXP 46
48073: PUSH
48074: LD_INT 93
48076: ST_TO_ADDR
// ru_radar := 98 ;
48077: LD_ADDR_EXP 38
48081: PUSH
48082: LD_INT 98
48084: ST_TO_ADDR
// tech_Artillery := 80 ;
48085: LD_ADDR_EXP 47
48089: PUSH
48090: LD_INT 80
48092: ST_TO_ADDR
// tech_RadMat := 81 ;
48093: LD_ADDR_EXP 48
48097: PUSH
48098: LD_INT 81
48100: ST_TO_ADDR
// tech_BasicTools := 82 ;
48101: LD_ADDR_EXP 49
48105: PUSH
48106: LD_INT 82
48108: ST_TO_ADDR
// tech_Cargo := 83 ;
48109: LD_ADDR_EXP 50
48113: PUSH
48114: LD_INT 83
48116: ST_TO_ADDR
// tech_Track := 84 ;
48117: LD_ADDR_EXP 51
48121: PUSH
48122: LD_INT 84
48124: ST_TO_ADDR
// tech_Crane := 85 ;
48125: LD_ADDR_EXP 52
48129: PUSH
48130: LD_INT 85
48132: ST_TO_ADDR
// tech_Bulldozer := 86 ;
48133: LD_ADDR_EXP 53
48137: PUSH
48138: LD_INT 86
48140: ST_TO_ADDR
// tech_Hovercraft := 87 ;
48141: LD_ADDR_EXP 54
48145: PUSH
48146: LD_INT 87
48148: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
48149: LD_ADDR_EXP 55
48153: PUSH
48154: LD_INT 88
48156: ST_TO_ADDR
// end ;
48157: LD_VAR 0 1
48161: RET
// every 1 do
48162: GO 48164
48164: DISABLE
// InitGlobalVariables ; end_of_file
48165: CALL 48010 0 0
48169: END
// every 0 0$1 do
48170: GO 48172
48172: DISABLE
// begin enable ;
48173: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48174: LD_STRING updateTimer(
48176: PUSH
48177: LD_OWVAR 1
48181: STR
48182: PUSH
48183: LD_STRING );
48185: STR
48186: PPUSH
48187: CALL_OW 559
// end ;
48191: END
// export function SOS_MapStart ( ) ; begin
48192: LD_INT 0
48194: PPUSH
// if streamModeActive then
48195: LD_EXP 56
48199: IFFALSE 48208
// DefineStreamItems ( true ) ;
48201: LD_INT 1
48203: PPUSH
48204: CALL 49862 0 1
// UpdateFactoryWaypoints ( ) ;
48208: CALL 62723 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48212: CALL 62980 0 0
// end ;
48216: LD_VAR 0 1
48220: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48221: LD_INT 0
48223: PPUSH
// if p2 = 100 then
48224: LD_VAR 0 2
48228: PUSH
48229: LD_INT 100
48231: EQUAL
48232: IFFALSE 49235
// begin if not StreamModeActive then
48234: LD_EXP 56
48238: NOT
48239: IFFALSE 48249
// StreamModeActive := true ;
48241: LD_ADDR_EXP 56
48245: PUSH
48246: LD_INT 1
48248: ST_TO_ADDR
// if p3 = 0 then
48249: LD_VAR 0 3
48253: PUSH
48254: LD_INT 0
48256: EQUAL
48257: IFFALSE 48263
// InitStreamMode ;
48259: CALL 49398 0 0
// if p3 = 1 then
48263: LD_VAR 0 3
48267: PUSH
48268: LD_INT 1
48270: EQUAL
48271: IFFALSE 48281
// sRocket := true ;
48273: LD_ADDR_EXP 61
48277: PUSH
48278: LD_INT 1
48280: ST_TO_ADDR
// if p3 = 2 then
48281: LD_VAR 0 3
48285: PUSH
48286: LD_INT 2
48288: EQUAL
48289: IFFALSE 48299
// sSpeed := true ;
48291: LD_ADDR_EXP 60
48295: PUSH
48296: LD_INT 1
48298: ST_TO_ADDR
// if p3 = 3 then
48299: LD_VAR 0 3
48303: PUSH
48304: LD_INT 3
48306: EQUAL
48307: IFFALSE 48317
// sEngine := true ;
48309: LD_ADDR_EXP 62
48313: PUSH
48314: LD_INT 1
48316: ST_TO_ADDR
// if p3 = 4 then
48317: LD_VAR 0 3
48321: PUSH
48322: LD_INT 4
48324: EQUAL
48325: IFFALSE 48335
// sSpec := true ;
48327: LD_ADDR_EXP 59
48331: PUSH
48332: LD_INT 1
48334: ST_TO_ADDR
// if p3 = 5 then
48335: LD_VAR 0 3
48339: PUSH
48340: LD_INT 5
48342: EQUAL
48343: IFFALSE 48353
// sLevel := true ;
48345: LD_ADDR_EXP 63
48349: PUSH
48350: LD_INT 1
48352: ST_TO_ADDR
// if p3 = 6 then
48353: LD_VAR 0 3
48357: PUSH
48358: LD_INT 6
48360: EQUAL
48361: IFFALSE 48371
// sArmoury := true ;
48363: LD_ADDR_EXP 64
48367: PUSH
48368: LD_INT 1
48370: ST_TO_ADDR
// if p3 = 7 then
48371: LD_VAR 0 3
48375: PUSH
48376: LD_INT 7
48378: EQUAL
48379: IFFALSE 48389
// sRadar := true ;
48381: LD_ADDR_EXP 65
48385: PUSH
48386: LD_INT 1
48388: ST_TO_ADDR
// if p3 = 8 then
48389: LD_VAR 0 3
48393: PUSH
48394: LD_INT 8
48396: EQUAL
48397: IFFALSE 48407
// sBunker := true ;
48399: LD_ADDR_EXP 66
48403: PUSH
48404: LD_INT 1
48406: ST_TO_ADDR
// if p3 = 9 then
48407: LD_VAR 0 3
48411: PUSH
48412: LD_INT 9
48414: EQUAL
48415: IFFALSE 48425
// sHack := true ;
48417: LD_ADDR_EXP 67
48421: PUSH
48422: LD_INT 1
48424: ST_TO_ADDR
// if p3 = 10 then
48425: LD_VAR 0 3
48429: PUSH
48430: LD_INT 10
48432: EQUAL
48433: IFFALSE 48443
// sFire := true ;
48435: LD_ADDR_EXP 68
48439: PUSH
48440: LD_INT 1
48442: ST_TO_ADDR
// if p3 = 11 then
48443: LD_VAR 0 3
48447: PUSH
48448: LD_INT 11
48450: EQUAL
48451: IFFALSE 48461
// sRefresh := true ;
48453: LD_ADDR_EXP 69
48457: PUSH
48458: LD_INT 1
48460: ST_TO_ADDR
// if p3 = 12 then
48461: LD_VAR 0 3
48465: PUSH
48466: LD_INT 12
48468: EQUAL
48469: IFFALSE 48479
// sExp := true ;
48471: LD_ADDR_EXP 70
48475: PUSH
48476: LD_INT 1
48478: ST_TO_ADDR
// if p3 = 13 then
48479: LD_VAR 0 3
48483: PUSH
48484: LD_INT 13
48486: EQUAL
48487: IFFALSE 48497
// sDepot := true ;
48489: LD_ADDR_EXP 71
48493: PUSH
48494: LD_INT 1
48496: ST_TO_ADDR
// if p3 = 14 then
48497: LD_VAR 0 3
48501: PUSH
48502: LD_INT 14
48504: EQUAL
48505: IFFALSE 48515
// sFlag := true ;
48507: LD_ADDR_EXP 72
48511: PUSH
48512: LD_INT 1
48514: ST_TO_ADDR
// if p3 = 15 then
48515: LD_VAR 0 3
48519: PUSH
48520: LD_INT 15
48522: EQUAL
48523: IFFALSE 48533
// sKamikadze := true ;
48525: LD_ADDR_EXP 80
48529: PUSH
48530: LD_INT 1
48532: ST_TO_ADDR
// if p3 = 16 then
48533: LD_VAR 0 3
48537: PUSH
48538: LD_INT 16
48540: EQUAL
48541: IFFALSE 48551
// sTroll := true ;
48543: LD_ADDR_EXP 81
48547: PUSH
48548: LD_INT 1
48550: ST_TO_ADDR
// if p3 = 17 then
48551: LD_VAR 0 3
48555: PUSH
48556: LD_INT 17
48558: EQUAL
48559: IFFALSE 48569
// sSlow := true ;
48561: LD_ADDR_EXP 82
48565: PUSH
48566: LD_INT 1
48568: ST_TO_ADDR
// if p3 = 18 then
48569: LD_VAR 0 3
48573: PUSH
48574: LD_INT 18
48576: EQUAL
48577: IFFALSE 48587
// sLack := true ;
48579: LD_ADDR_EXP 83
48583: PUSH
48584: LD_INT 1
48586: ST_TO_ADDR
// if p3 = 19 then
48587: LD_VAR 0 3
48591: PUSH
48592: LD_INT 19
48594: EQUAL
48595: IFFALSE 48605
// sTank := true ;
48597: LD_ADDR_EXP 85
48601: PUSH
48602: LD_INT 1
48604: ST_TO_ADDR
// if p3 = 20 then
48605: LD_VAR 0 3
48609: PUSH
48610: LD_INT 20
48612: EQUAL
48613: IFFALSE 48623
// sRemote := true ;
48615: LD_ADDR_EXP 86
48619: PUSH
48620: LD_INT 1
48622: ST_TO_ADDR
// if p3 = 21 then
48623: LD_VAR 0 3
48627: PUSH
48628: LD_INT 21
48630: EQUAL
48631: IFFALSE 48641
// sPowell := true ;
48633: LD_ADDR_EXP 87
48637: PUSH
48638: LD_INT 1
48640: ST_TO_ADDR
// if p3 = 22 then
48641: LD_VAR 0 3
48645: PUSH
48646: LD_INT 22
48648: EQUAL
48649: IFFALSE 48659
// sTeleport := true ;
48651: LD_ADDR_EXP 90
48655: PUSH
48656: LD_INT 1
48658: ST_TO_ADDR
// if p3 = 23 then
48659: LD_VAR 0 3
48663: PUSH
48664: LD_INT 23
48666: EQUAL
48667: IFFALSE 48677
// sOilTower := true ;
48669: LD_ADDR_EXP 92
48673: PUSH
48674: LD_INT 1
48676: ST_TO_ADDR
// if p3 = 24 then
48677: LD_VAR 0 3
48681: PUSH
48682: LD_INT 24
48684: EQUAL
48685: IFFALSE 48695
// sShovel := true ;
48687: LD_ADDR_EXP 93
48691: PUSH
48692: LD_INT 1
48694: ST_TO_ADDR
// if p3 = 25 then
48695: LD_VAR 0 3
48699: PUSH
48700: LD_INT 25
48702: EQUAL
48703: IFFALSE 48713
// sSheik := true ;
48705: LD_ADDR_EXP 94
48709: PUSH
48710: LD_INT 1
48712: ST_TO_ADDR
// if p3 = 26 then
48713: LD_VAR 0 3
48717: PUSH
48718: LD_INT 26
48720: EQUAL
48721: IFFALSE 48731
// sEarthquake := true ;
48723: LD_ADDR_EXP 96
48727: PUSH
48728: LD_INT 1
48730: ST_TO_ADDR
// if p3 = 27 then
48731: LD_VAR 0 3
48735: PUSH
48736: LD_INT 27
48738: EQUAL
48739: IFFALSE 48749
// sAI := true ;
48741: LD_ADDR_EXP 97
48745: PUSH
48746: LD_INT 1
48748: ST_TO_ADDR
// if p3 = 28 then
48749: LD_VAR 0 3
48753: PUSH
48754: LD_INT 28
48756: EQUAL
48757: IFFALSE 48767
// sCargo := true ;
48759: LD_ADDR_EXP 100
48763: PUSH
48764: LD_INT 1
48766: ST_TO_ADDR
// if p3 = 29 then
48767: LD_VAR 0 3
48771: PUSH
48772: LD_INT 29
48774: EQUAL
48775: IFFALSE 48785
// sDLaser := true ;
48777: LD_ADDR_EXP 101
48781: PUSH
48782: LD_INT 1
48784: ST_TO_ADDR
// if p3 = 30 then
48785: LD_VAR 0 3
48789: PUSH
48790: LD_INT 30
48792: EQUAL
48793: IFFALSE 48803
// sExchange := true ;
48795: LD_ADDR_EXP 102
48799: PUSH
48800: LD_INT 1
48802: ST_TO_ADDR
// if p3 = 31 then
48803: LD_VAR 0 3
48807: PUSH
48808: LD_INT 31
48810: EQUAL
48811: IFFALSE 48821
// sFac := true ;
48813: LD_ADDR_EXP 103
48817: PUSH
48818: LD_INT 1
48820: ST_TO_ADDR
// if p3 = 32 then
48821: LD_VAR 0 3
48825: PUSH
48826: LD_INT 32
48828: EQUAL
48829: IFFALSE 48839
// sPower := true ;
48831: LD_ADDR_EXP 104
48835: PUSH
48836: LD_INT 1
48838: ST_TO_ADDR
// if p3 = 33 then
48839: LD_VAR 0 3
48843: PUSH
48844: LD_INT 33
48846: EQUAL
48847: IFFALSE 48857
// sRandom := true ;
48849: LD_ADDR_EXP 105
48853: PUSH
48854: LD_INT 1
48856: ST_TO_ADDR
// if p3 = 34 then
48857: LD_VAR 0 3
48861: PUSH
48862: LD_INT 34
48864: EQUAL
48865: IFFALSE 48875
// sShield := true ;
48867: LD_ADDR_EXP 106
48871: PUSH
48872: LD_INT 1
48874: ST_TO_ADDR
// if p3 = 35 then
48875: LD_VAR 0 3
48879: PUSH
48880: LD_INT 35
48882: EQUAL
48883: IFFALSE 48893
// sTime := true ;
48885: LD_ADDR_EXP 107
48889: PUSH
48890: LD_INT 1
48892: ST_TO_ADDR
// if p3 = 36 then
48893: LD_VAR 0 3
48897: PUSH
48898: LD_INT 36
48900: EQUAL
48901: IFFALSE 48911
// sTools := true ;
48903: LD_ADDR_EXP 108
48907: PUSH
48908: LD_INT 1
48910: ST_TO_ADDR
// if p3 = 101 then
48911: LD_VAR 0 3
48915: PUSH
48916: LD_INT 101
48918: EQUAL
48919: IFFALSE 48929
// sSold := true ;
48921: LD_ADDR_EXP 73
48925: PUSH
48926: LD_INT 1
48928: ST_TO_ADDR
// if p3 = 102 then
48929: LD_VAR 0 3
48933: PUSH
48934: LD_INT 102
48936: EQUAL
48937: IFFALSE 48947
// sDiff := true ;
48939: LD_ADDR_EXP 74
48943: PUSH
48944: LD_INT 1
48946: ST_TO_ADDR
// if p3 = 103 then
48947: LD_VAR 0 3
48951: PUSH
48952: LD_INT 103
48954: EQUAL
48955: IFFALSE 48965
// sFog := true ;
48957: LD_ADDR_EXP 77
48961: PUSH
48962: LD_INT 1
48964: ST_TO_ADDR
// if p3 = 104 then
48965: LD_VAR 0 3
48969: PUSH
48970: LD_INT 104
48972: EQUAL
48973: IFFALSE 48983
// sReset := true ;
48975: LD_ADDR_EXP 78
48979: PUSH
48980: LD_INT 1
48982: ST_TO_ADDR
// if p3 = 105 then
48983: LD_VAR 0 3
48987: PUSH
48988: LD_INT 105
48990: EQUAL
48991: IFFALSE 49001
// sSun := true ;
48993: LD_ADDR_EXP 79
48997: PUSH
48998: LD_INT 1
49000: ST_TO_ADDR
// if p3 = 106 then
49001: LD_VAR 0 3
49005: PUSH
49006: LD_INT 106
49008: EQUAL
49009: IFFALSE 49019
// sTiger := true ;
49011: LD_ADDR_EXP 75
49015: PUSH
49016: LD_INT 1
49018: ST_TO_ADDR
// if p3 = 107 then
49019: LD_VAR 0 3
49023: PUSH
49024: LD_INT 107
49026: EQUAL
49027: IFFALSE 49037
// sBomb := true ;
49029: LD_ADDR_EXP 76
49033: PUSH
49034: LD_INT 1
49036: ST_TO_ADDR
// if p3 = 108 then
49037: LD_VAR 0 3
49041: PUSH
49042: LD_INT 108
49044: EQUAL
49045: IFFALSE 49055
// sWound := true ;
49047: LD_ADDR_EXP 84
49051: PUSH
49052: LD_INT 1
49054: ST_TO_ADDR
// if p3 = 109 then
49055: LD_VAR 0 3
49059: PUSH
49060: LD_INT 109
49062: EQUAL
49063: IFFALSE 49073
// sBetray := true ;
49065: LD_ADDR_EXP 88
49069: PUSH
49070: LD_INT 1
49072: ST_TO_ADDR
// if p3 = 110 then
49073: LD_VAR 0 3
49077: PUSH
49078: LD_INT 110
49080: EQUAL
49081: IFFALSE 49091
// sContamin := true ;
49083: LD_ADDR_EXP 89
49087: PUSH
49088: LD_INT 1
49090: ST_TO_ADDR
// if p3 = 111 then
49091: LD_VAR 0 3
49095: PUSH
49096: LD_INT 111
49098: EQUAL
49099: IFFALSE 49109
// sOil := true ;
49101: LD_ADDR_EXP 91
49105: PUSH
49106: LD_INT 1
49108: ST_TO_ADDR
// if p3 = 112 then
49109: LD_VAR 0 3
49113: PUSH
49114: LD_INT 112
49116: EQUAL
49117: IFFALSE 49127
// sStu := true ;
49119: LD_ADDR_EXP 95
49123: PUSH
49124: LD_INT 1
49126: ST_TO_ADDR
// if p3 = 113 then
49127: LD_VAR 0 3
49131: PUSH
49132: LD_INT 113
49134: EQUAL
49135: IFFALSE 49145
// sBazooka := true ;
49137: LD_ADDR_EXP 98
49141: PUSH
49142: LD_INT 1
49144: ST_TO_ADDR
// if p3 = 114 then
49145: LD_VAR 0 3
49149: PUSH
49150: LD_INT 114
49152: EQUAL
49153: IFFALSE 49163
// sMortar := true ;
49155: LD_ADDR_EXP 99
49159: PUSH
49160: LD_INT 1
49162: ST_TO_ADDR
// if p3 = 115 then
49163: LD_VAR 0 3
49167: PUSH
49168: LD_INT 115
49170: EQUAL
49171: IFFALSE 49181
// sRanger := true ;
49173: LD_ADDR_EXP 109
49177: PUSH
49178: LD_INT 1
49180: ST_TO_ADDR
// if p3 = 116 then
49181: LD_VAR 0 3
49185: PUSH
49186: LD_INT 116
49188: EQUAL
49189: IFFALSE 49199
// sComputer := true ;
49191: LD_ADDR_EXP 110
49195: PUSH
49196: LD_INT 1
49198: ST_TO_ADDR
// if p3 = 117 then
49199: LD_VAR 0 3
49203: PUSH
49204: LD_INT 117
49206: EQUAL
49207: IFFALSE 49217
// s30 := true ;
49209: LD_ADDR_EXP 111
49213: PUSH
49214: LD_INT 1
49216: ST_TO_ADDR
// if p3 = 118 then
49217: LD_VAR 0 3
49221: PUSH
49222: LD_INT 118
49224: EQUAL
49225: IFFALSE 49235
// s60 := true ;
49227: LD_ADDR_EXP 112
49231: PUSH
49232: LD_INT 1
49234: ST_TO_ADDR
// end ; if p2 = 101 then
49235: LD_VAR 0 2
49239: PUSH
49240: LD_INT 101
49242: EQUAL
49243: IFFALSE 49371
// begin case p3 of 1 :
49245: LD_VAR 0 3
49249: PUSH
49250: LD_INT 1
49252: DOUBLE
49253: EQUAL
49254: IFTRUE 49258
49256: GO 49265
49258: POP
// hHackUnlimitedResources ; 2 :
49259: CALL 61469 0 0
49263: GO 49371
49265: LD_INT 2
49267: DOUBLE
49268: EQUAL
49269: IFTRUE 49273
49271: GO 49280
49273: POP
// hHackSetLevel10 ; 3 :
49274: CALL 61602 0 0
49278: GO 49371
49280: LD_INT 3
49282: DOUBLE
49283: EQUAL
49284: IFTRUE 49288
49286: GO 49295
49288: POP
// hHackSetLevel10YourUnits ; 4 :
49289: CALL 61687 0 0
49293: GO 49371
49295: LD_INT 4
49297: DOUBLE
49298: EQUAL
49299: IFTRUE 49303
49301: GO 49310
49303: POP
// hHackInvincible ; 5 :
49304: CALL 62135 0 0
49308: GO 49371
49310: LD_INT 5
49312: DOUBLE
49313: EQUAL
49314: IFTRUE 49318
49316: GO 49325
49318: POP
// hHackInvisible ; 6 :
49319: CALL 62246 0 0
49323: GO 49371
49325: LD_INT 6
49327: DOUBLE
49328: EQUAL
49329: IFTRUE 49333
49331: GO 49340
49333: POP
// hHackChangeYourSide ; 7 :
49334: CALL 62303 0 0
49338: GO 49371
49340: LD_INT 7
49342: DOUBLE
49343: EQUAL
49344: IFTRUE 49348
49346: GO 49355
49348: POP
// hHackChangeUnitSide ; 8 :
49349: CALL 62345 0 0
49353: GO 49371
49355: LD_INT 8
49357: DOUBLE
49358: EQUAL
49359: IFTRUE 49363
49361: GO 49370
49363: POP
// hHackFog ; end ;
49364: CALL 62446 0 0
49368: GO 49371
49370: POP
// end ; end ;
49371: LD_VAR 0 7
49375: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
49376: GO 49378
49378: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
49379: LD_STRING initStreamRollete();
49381: PPUSH
49382: CALL_OW 559
// InitStreamMode ;
49386: CALL 49398 0 0
// DefineStreamItems ( false ) ;
49390: LD_INT 0
49392: PPUSH
49393: CALL 49862 0 1
// end ;
49397: END
// function InitStreamMode ; begin
49398: LD_INT 0
49400: PPUSH
// streamModeActive := false ;
49401: LD_ADDR_EXP 56
49405: PUSH
49406: LD_INT 0
49408: ST_TO_ADDR
// normalCounter := 36 ;
49409: LD_ADDR_EXP 57
49413: PUSH
49414: LD_INT 36
49416: ST_TO_ADDR
// hardcoreCounter := 18 ;
49417: LD_ADDR_EXP 58
49421: PUSH
49422: LD_INT 18
49424: ST_TO_ADDR
// sRocket := false ;
49425: LD_ADDR_EXP 61
49429: PUSH
49430: LD_INT 0
49432: ST_TO_ADDR
// sSpeed := false ;
49433: LD_ADDR_EXP 60
49437: PUSH
49438: LD_INT 0
49440: ST_TO_ADDR
// sEngine := false ;
49441: LD_ADDR_EXP 62
49445: PUSH
49446: LD_INT 0
49448: ST_TO_ADDR
// sSpec := false ;
49449: LD_ADDR_EXP 59
49453: PUSH
49454: LD_INT 0
49456: ST_TO_ADDR
// sLevel := false ;
49457: LD_ADDR_EXP 63
49461: PUSH
49462: LD_INT 0
49464: ST_TO_ADDR
// sArmoury := false ;
49465: LD_ADDR_EXP 64
49469: PUSH
49470: LD_INT 0
49472: ST_TO_ADDR
// sRadar := false ;
49473: LD_ADDR_EXP 65
49477: PUSH
49478: LD_INT 0
49480: ST_TO_ADDR
// sBunker := false ;
49481: LD_ADDR_EXP 66
49485: PUSH
49486: LD_INT 0
49488: ST_TO_ADDR
// sHack := false ;
49489: LD_ADDR_EXP 67
49493: PUSH
49494: LD_INT 0
49496: ST_TO_ADDR
// sFire := false ;
49497: LD_ADDR_EXP 68
49501: PUSH
49502: LD_INT 0
49504: ST_TO_ADDR
// sRefresh := false ;
49505: LD_ADDR_EXP 69
49509: PUSH
49510: LD_INT 0
49512: ST_TO_ADDR
// sExp := false ;
49513: LD_ADDR_EXP 70
49517: PUSH
49518: LD_INT 0
49520: ST_TO_ADDR
// sDepot := false ;
49521: LD_ADDR_EXP 71
49525: PUSH
49526: LD_INT 0
49528: ST_TO_ADDR
// sFlag := false ;
49529: LD_ADDR_EXP 72
49533: PUSH
49534: LD_INT 0
49536: ST_TO_ADDR
// sKamikadze := false ;
49537: LD_ADDR_EXP 80
49541: PUSH
49542: LD_INT 0
49544: ST_TO_ADDR
// sTroll := false ;
49545: LD_ADDR_EXP 81
49549: PUSH
49550: LD_INT 0
49552: ST_TO_ADDR
// sSlow := false ;
49553: LD_ADDR_EXP 82
49557: PUSH
49558: LD_INT 0
49560: ST_TO_ADDR
// sLack := false ;
49561: LD_ADDR_EXP 83
49565: PUSH
49566: LD_INT 0
49568: ST_TO_ADDR
// sTank := false ;
49569: LD_ADDR_EXP 85
49573: PUSH
49574: LD_INT 0
49576: ST_TO_ADDR
// sRemote := false ;
49577: LD_ADDR_EXP 86
49581: PUSH
49582: LD_INT 0
49584: ST_TO_ADDR
// sPowell := false ;
49585: LD_ADDR_EXP 87
49589: PUSH
49590: LD_INT 0
49592: ST_TO_ADDR
// sTeleport := false ;
49593: LD_ADDR_EXP 90
49597: PUSH
49598: LD_INT 0
49600: ST_TO_ADDR
// sOilTower := false ;
49601: LD_ADDR_EXP 92
49605: PUSH
49606: LD_INT 0
49608: ST_TO_ADDR
// sShovel := false ;
49609: LD_ADDR_EXP 93
49613: PUSH
49614: LD_INT 0
49616: ST_TO_ADDR
// sSheik := false ;
49617: LD_ADDR_EXP 94
49621: PUSH
49622: LD_INT 0
49624: ST_TO_ADDR
// sEarthquake := false ;
49625: LD_ADDR_EXP 96
49629: PUSH
49630: LD_INT 0
49632: ST_TO_ADDR
// sAI := false ;
49633: LD_ADDR_EXP 97
49637: PUSH
49638: LD_INT 0
49640: ST_TO_ADDR
// sCargo := false ;
49641: LD_ADDR_EXP 100
49645: PUSH
49646: LD_INT 0
49648: ST_TO_ADDR
// sDLaser := false ;
49649: LD_ADDR_EXP 101
49653: PUSH
49654: LD_INT 0
49656: ST_TO_ADDR
// sExchange := false ;
49657: LD_ADDR_EXP 102
49661: PUSH
49662: LD_INT 0
49664: ST_TO_ADDR
// sFac := false ;
49665: LD_ADDR_EXP 103
49669: PUSH
49670: LD_INT 0
49672: ST_TO_ADDR
// sPower := false ;
49673: LD_ADDR_EXP 104
49677: PUSH
49678: LD_INT 0
49680: ST_TO_ADDR
// sRandom := false ;
49681: LD_ADDR_EXP 105
49685: PUSH
49686: LD_INT 0
49688: ST_TO_ADDR
// sShield := false ;
49689: LD_ADDR_EXP 106
49693: PUSH
49694: LD_INT 0
49696: ST_TO_ADDR
// sTime := false ;
49697: LD_ADDR_EXP 107
49701: PUSH
49702: LD_INT 0
49704: ST_TO_ADDR
// sTools := false ;
49705: LD_ADDR_EXP 108
49709: PUSH
49710: LD_INT 0
49712: ST_TO_ADDR
// sSold := false ;
49713: LD_ADDR_EXP 73
49717: PUSH
49718: LD_INT 0
49720: ST_TO_ADDR
// sDiff := false ;
49721: LD_ADDR_EXP 74
49725: PUSH
49726: LD_INT 0
49728: ST_TO_ADDR
// sFog := false ;
49729: LD_ADDR_EXP 77
49733: PUSH
49734: LD_INT 0
49736: ST_TO_ADDR
// sReset := false ;
49737: LD_ADDR_EXP 78
49741: PUSH
49742: LD_INT 0
49744: ST_TO_ADDR
// sSun := false ;
49745: LD_ADDR_EXP 79
49749: PUSH
49750: LD_INT 0
49752: ST_TO_ADDR
// sTiger := false ;
49753: LD_ADDR_EXP 75
49757: PUSH
49758: LD_INT 0
49760: ST_TO_ADDR
// sBomb := false ;
49761: LD_ADDR_EXP 76
49765: PUSH
49766: LD_INT 0
49768: ST_TO_ADDR
// sWound := false ;
49769: LD_ADDR_EXP 84
49773: PUSH
49774: LD_INT 0
49776: ST_TO_ADDR
// sBetray := false ;
49777: LD_ADDR_EXP 88
49781: PUSH
49782: LD_INT 0
49784: ST_TO_ADDR
// sContamin := false ;
49785: LD_ADDR_EXP 89
49789: PUSH
49790: LD_INT 0
49792: ST_TO_ADDR
// sOil := false ;
49793: LD_ADDR_EXP 91
49797: PUSH
49798: LD_INT 0
49800: ST_TO_ADDR
// sStu := false ;
49801: LD_ADDR_EXP 95
49805: PUSH
49806: LD_INT 0
49808: ST_TO_ADDR
// sBazooka := false ;
49809: LD_ADDR_EXP 98
49813: PUSH
49814: LD_INT 0
49816: ST_TO_ADDR
// sMortar := false ;
49817: LD_ADDR_EXP 99
49821: PUSH
49822: LD_INT 0
49824: ST_TO_ADDR
// sRanger := false ;
49825: LD_ADDR_EXP 109
49829: PUSH
49830: LD_INT 0
49832: ST_TO_ADDR
// sComputer := false ;
49833: LD_ADDR_EXP 110
49837: PUSH
49838: LD_INT 0
49840: ST_TO_ADDR
// s30 := false ;
49841: LD_ADDR_EXP 111
49845: PUSH
49846: LD_INT 0
49848: ST_TO_ADDR
// s60 := false ;
49849: LD_ADDR_EXP 112
49853: PUSH
49854: LD_INT 0
49856: ST_TO_ADDR
// end ;
49857: LD_VAR 0 1
49861: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49862: LD_INT 0
49864: PPUSH
49865: PPUSH
49866: PPUSH
49867: PPUSH
49868: PPUSH
49869: PPUSH
49870: PPUSH
// result := [ ] ;
49871: LD_ADDR_VAR 0 2
49875: PUSH
49876: EMPTY
49877: ST_TO_ADDR
// if campaign_id = 1 then
49878: LD_OWVAR 69
49882: PUSH
49883: LD_INT 1
49885: EQUAL
49886: IFFALSE 53052
// begin case mission_number of 1 :
49888: LD_OWVAR 70
49892: PUSH
49893: LD_INT 1
49895: DOUBLE
49896: EQUAL
49897: IFTRUE 49901
49899: GO 49977
49901: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49902: LD_ADDR_VAR 0 2
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: LD_INT 4
49912: PUSH
49913: LD_INT 11
49915: PUSH
49916: LD_INT 12
49918: PUSH
49919: LD_INT 15
49921: PUSH
49922: LD_INT 16
49924: PUSH
49925: LD_INT 22
49927: PUSH
49928: LD_INT 23
49930: PUSH
49931: LD_INT 26
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 101
49947: PUSH
49948: LD_INT 102
49950: PUSH
49951: LD_INT 106
49953: PUSH
49954: LD_INT 116
49956: PUSH
49957: LD_INT 117
49959: PUSH
49960: LD_INT 118
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: ST_TO_ADDR
49975: GO 53050
49977: LD_INT 2
49979: DOUBLE
49980: EQUAL
49981: IFTRUE 49985
49983: GO 50069
49985: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49986: LD_ADDR_VAR 0 2
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 4
49996: PUSH
49997: LD_INT 11
49999: PUSH
50000: LD_INT 12
50002: PUSH
50003: LD_INT 15
50005: PUSH
50006: LD_INT 16
50008: PUSH
50009: LD_INT 22
50011: PUSH
50012: LD_INT 23
50014: PUSH
50015: LD_INT 26
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 101
50031: PUSH
50032: LD_INT 102
50034: PUSH
50035: LD_INT 105
50037: PUSH
50038: LD_INT 106
50040: PUSH
50041: LD_INT 108
50043: PUSH
50044: LD_INT 116
50046: PUSH
50047: LD_INT 117
50049: PUSH
50050: LD_INT 118
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: ST_TO_ADDR
50067: GO 53050
50069: LD_INT 3
50071: DOUBLE
50072: EQUAL
50073: IFTRUE 50077
50075: GO 50165
50077: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50078: LD_ADDR_VAR 0 2
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 4
50088: PUSH
50089: LD_INT 5
50091: PUSH
50092: LD_INT 11
50094: PUSH
50095: LD_INT 12
50097: PUSH
50098: LD_INT 15
50100: PUSH
50101: LD_INT 16
50103: PUSH
50104: LD_INT 22
50106: PUSH
50107: LD_INT 26
50109: PUSH
50110: LD_INT 36
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 101
50127: PUSH
50128: LD_INT 102
50130: PUSH
50131: LD_INT 105
50133: PUSH
50134: LD_INT 106
50136: PUSH
50137: LD_INT 108
50139: PUSH
50140: LD_INT 116
50142: PUSH
50143: LD_INT 117
50145: PUSH
50146: LD_INT 118
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: ST_TO_ADDR
50163: GO 53050
50165: LD_INT 4
50167: DOUBLE
50168: EQUAL
50169: IFTRUE 50173
50171: GO 50269
50173: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50174: LD_ADDR_VAR 0 2
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: LD_INT 4
50184: PUSH
50185: LD_INT 5
50187: PUSH
50188: LD_INT 8
50190: PUSH
50191: LD_INT 11
50193: PUSH
50194: LD_INT 12
50196: PUSH
50197: LD_INT 15
50199: PUSH
50200: LD_INT 16
50202: PUSH
50203: LD_INT 22
50205: PUSH
50206: LD_INT 23
50208: PUSH
50209: LD_INT 26
50211: PUSH
50212: LD_INT 36
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 101
50231: PUSH
50232: LD_INT 102
50234: PUSH
50235: LD_INT 105
50237: PUSH
50238: LD_INT 106
50240: PUSH
50241: LD_INT 108
50243: PUSH
50244: LD_INT 116
50246: PUSH
50247: LD_INT 117
50249: PUSH
50250: LD_INT 118
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: ST_TO_ADDR
50267: GO 53050
50269: LD_INT 5
50271: DOUBLE
50272: EQUAL
50273: IFTRUE 50277
50275: GO 50389
50277: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50278: LD_ADDR_VAR 0 2
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: LD_INT 4
50288: PUSH
50289: LD_INT 5
50291: PUSH
50292: LD_INT 6
50294: PUSH
50295: LD_INT 8
50297: PUSH
50298: LD_INT 11
50300: PUSH
50301: LD_INT 12
50303: PUSH
50304: LD_INT 15
50306: PUSH
50307: LD_INT 16
50309: PUSH
50310: LD_INT 22
50312: PUSH
50313: LD_INT 23
50315: PUSH
50316: LD_INT 25
50318: PUSH
50319: LD_INT 26
50321: PUSH
50322: LD_INT 36
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 101
50343: PUSH
50344: LD_INT 102
50346: PUSH
50347: LD_INT 105
50349: PUSH
50350: LD_INT 106
50352: PUSH
50353: LD_INT 108
50355: PUSH
50356: LD_INT 109
50358: PUSH
50359: LD_INT 112
50361: PUSH
50362: LD_INT 116
50364: PUSH
50365: LD_INT 117
50367: PUSH
50368: LD_INT 118
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: ST_TO_ADDR
50387: GO 53050
50389: LD_INT 6
50391: DOUBLE
50392: EQUAL
50393: IFTRUE 50397
50395: GO 50529
50397: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50398: LD_ADDR_VAR 0 2
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: LD_INT 4
50408: PUSH
50409: LD_INT 5
50411: PUSH
50412: LD_INT 6
50414: PUSH
50415: LD_INT 8
50417: PUSH
50418: LD_INT 11
50420: PUSH
50421: LD_INT 12
50423: PUSH
50424: LD_INT 15
50426: PUSH
50427: LD_INT 16
50429: PUSH
50430: LD_INT 20
50432: PUSH
50433: LD_INT 21
50435: PUSH
50436: LD_INT 22
50438: PUSH
50439: LD_INT 23
50441: PUSH
50442: LD_INT 25
50444: PUSH
50445: LD_INT 26
50447: PUSH
50448: LD_INT 30
50450: PUSH
50451: LD_INT 31
50453: PUSH
50454: LD_INT 32
50456: PUSH
50457: LD_INT 36
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 101
50483: PUSH
50484: LD_INT 102
50486: PUSH
50487: LD_INT 105
50489: PUSH
50490: LD_INT 106
50492: PUSH
50493: LD_INT 108
50495: PUSH
50496: LD_INT 109
50498: PUSH
50499: LD_INT 112
50501: PUSH
50502: LD_INT 116
50504: PUSH
50505: LD_INT 117
50507: PUSH
50508: LD_INT 118
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: ST_TO_ADDR
50527: GO 53050
50529: LD_INT 7
50531: DOUBLE
50532: EQUAL
50533: IFTRUE 50537
50535: GO 50649
50537: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50538: LD_ADDR_VAR 0 2
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 4
50548: PUSH
50549: LD_INT 5
50551: PUSH
50552: LD_INT 7
50554: PUSH
50555: LD_INT 11
50557: PUSH
50558: LD_INT 12
50560: PUSH
50561: LD_INT 15
50563: PUSH
50564: LD_INT 16
50566: PUSH
50567: LD_INT 20
50569: PUSH
50570: LD_INT 21
50572: PUSH
50573: LD_INT 22
50575: PUSH
50576: LD_INT 23
50578: PUSH
50579: LD_INT 25
50581: PUSH
50582: LD_INT 26
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 101
50603: PUSH
50604: LD_INT 102
50606: PUSH
50607: LD_INT 103
50609: PUSH
50610: LD_INT 105
50612: PUSH
50613: LD_INT 106
50615: PUSH
50616: LD_INT 108
50618: PUSH
50619: LD_INT 112
50621: PUSH
50622: LD_INT 116
50624: PUSH
50625: LD_INT 117
50627: PUSH
50628: LD_INT 118
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: ST_TO_ADDR
50647: GO 53050
50649: LD_INT 8
50651: DOUBLE
50652: EQUAL
50653: IFTRUE 50657
50655: GO 50797
50657: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50658: LD_ADDR_VAR 0 2
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: LD_INT 4
50668: PUSH
50669: LD_INT 5
50671: PUSH
50672: LD_INT 6
50674: PUSH
50675: LD_INT 7
50677: PUSH
50678: LD_INT 8
50680: PUSH
50681: LD_INT 11
50683: PUSH
50684: LD_INT 12
50686: PUSH
50687: LD_INT 15
50689: PUSH
50690: LD_INT 16
50692: PUSH
50693: LD_INT 20
50695: PUSH
50696: LD_INT 21
50698: PUSH
50699: LD_INT 22
50701: PUSH
50702: LD_INT 23
50704: PUSH
50705: LD_INT 25
50707: PUSH
50708: LD_INT 26
50710: PUSH
50711: LD_INT 30
50713: PUSH
50714: LD_INT 31
50716: PUSH
50717: LD_INT 32
50719: PUSH
50720: LD_INT 36
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 101
50747: PUSH
50748: LD_INT 102
50750: PUSH
50751: LD_INT 103
50753: PUSH
50754: LD_INT 105
50756: PUSH
50757: LD_INT 106
50759: PUSH
50760: LD_INT 108
50762: PUSH
50763: LD_INT 109
50765: PUSH
50766: LD_INT 112
50768: PUSH
50769: LD_INT 116
50771: PUSH
50772: LD_INT 117
50774: PUSH
50775: LD_INT 118
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: ST_TO_ADDR
50795: GO 53050
50797: LD_INT 9
50799: DOUBLE
50800: EQUAL
50801: IFTRUE 50805
50803: GO 50953
50805: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50806: LD_ADDR_VAR 0 2
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 4
50816: PUSH
50817: LD_INT 5
50819: PUSH
50820: LD_INT 6
50822: PUSH
50823: LD_INT 7
50825: PUSH
50826: LD_INT 8
50828: PUSH
50829: LD_INT 11
50831: PUSH
50832: LD_INT 12
50834: PUSH
50835: LD_INT 15
50837: PUSH
50838: LD_INT 16
50840: PUSH
50841: LD_INT 20
50843: PUSH
50844: LD_INT 21
50846: PUSH
50847: LD_INT 22
50849: PUSH
50850: LD_INT 23
50852: PUSH
50853: LD_INT 25
50855: PUSH
50856: LD_INT 26
50858: PUSH
50859: LD_INT 28
50861: PUSH
50862: LD_INT 30
50864: PUSH
50865: LD_INT 31
50867: PUSH
50868: LD_INT 32
50870: PUSH
50871: LD_INT 36
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 101
50899: PUSH
50900: LD_INT 102
50902: PUSH
50903: LD_INT 103
50905: PUSH
50906: LD_INT 105
50908: PUSH
50909: LD_INT 106
50911: PUSH
50912: LD_INT 108
50914: PUSH
50915: LD_INT 109
50917: PUSH
50918: LD_INT 112
50920: PUSH
50921: LD_INT 114
50923: PUSH
50924: LD_INT 116
50926: PUSH
50927: LD_INT 117
50929: PUSH
50930: LD_INT 118
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: ST_TO_ADDR
50951: GO 53050
50953: LD_INT 10
50955: DOUBLE
50956: EQUAL
50957: IFTRUE 50961
50959: GO 51157
50961: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50962: LD_ADDR_VAR 0 2
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: LD_INT 4
50972: PUSH
50973: LD_INT 5
50975: PUSH
50976: LD_INT 6
50978: PUSH
50979: LD_INT 7
50981: PUSH
50982: LD_INT 8
50984: PUSH
50985: LD_INT 9
50987: PUSH
50988: LD_INT 10
50990: PUSH
50991: LD_INT 11
50993: PUSH
50994: LD_INT 12
50996: PUSH
50997: LD_INT 13
50999: PUSH
51000: LD_INT 14
51002: PUSH
51003: LD_INT 15
51005: PUSH
51006: LD_INT 16
51008: PUSH
51009: LD_INT 17
51011: PUSH
51012: LD_INT 18
51014: PUSH
51015: LD_INT 19
51017: PUSH
51018: LD_INT 20
51020: PUSH
51021: LD_INT 21
51023: PUSH
51024: LD_INT 22
51026: PUSH
51027: LD_INT 23
51029: PUSH
51030: LD_INT 24
51032: PUSH
51033: LD_INT 25
51035: PUSH
51036: LD_INT 26
51038: PUSH
51039: LD_INT 28
51041: PUSH
51042: LD_INT 30
51044: PUSH
51045: LD_INT 31
51047: PUSH
51048: LD_INT 32
51050: PUSH
51051: LD_INT 36
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 101
51087: PUSH
51088: LD_INT 102
51090: PUSH
51091: LD_INT 103
51093: PUSH
51094: LD_INT 104
51096: PUSH
51097: LD_INT 105
51099: PUSH
51100: LD_INT 106
51102: PUSH
51103: LD_INT 107
51105: PUSH
51106: LD_INT 108
51108: PUSH
51109: LD_INT 109
51111: PUSH
51112: LD_INT 110
51114: PUSH
51115: LD_INT 111
51117: PUSH
51118: LD_INT 112
51120: PUSH
51121: LD_INT 114
51123: PUSH
51124: LD_INT 116
51126: PUSH
51127: LD_INT 117
51129: PUSH
51130: LD_INT 118
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: ST_TO_ADDR
51155: GO 53050
51157: LD_INT 11
51159: DOUBLE
51160: EQUAL
51161: IFTRUE 51165
51163: GO 51369
51165: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51166: LD_ADDR_VAR 0 2
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 4
51179: PUSH
51180: LD_INT 5
51182: PUSH
51183: LD_INT 6
51185: PUSH
51186: LD_INT 7
51188: PUSH
51189: LD_INT 8
51191: PUSH
51192: LD_INT 9
51194: PUSH
51195: LD_INT 10
51197: PUSH
51198: LD_INT 11
51200: PUSH
51201: LD_INT 12
51203: PUSH
51204: LD_INT 13
51206: PUSH
51207: LD_INT 14
51209: PUSH
51210: LD_INT 15
51212: PUSH
51213: LD_INT 16
51215: PUSH
51216: LD_INT 17
51218: PUSH
51219: LD_INT 18
51221: PUSH
51222: LD_INT 19
51224: PUSH
51225: LD_INT 20
51227: PUSH
51228: LD_INT 21
51230: PUSH
51231: LD_INT 22
51233: PUSH
51234: LD_INT 23
51236: PUSH
51237: LD_INT 24
51239: PUSH
51240: LD_INT 25
51242: PUSH
51243: LD_INT 26
51245: PUSH
51246: LD_INT 28
51248: PUSH
51249: LD_INT 30
51251: PUSH
51252: LD_INT 31
51254: PUSH
51255: LD_INT 32
51257: PUSH
51258: LD_INT 34
51260: PUSH
51261: LD_INT 36
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 101
51299: PUSH
51300: LD_INT 102
51302: PUSH
51303: LD_INT 103
51305: PUSH
51306: LD_INT 104
51308: PUSH
51309: LD_INT 105
51311: PUSH
51312: LD_INT 106
51314: PUSH
51315: LD_INT 107
51317: PUSH
51318: LD_INT 108
51320: PUSH
51321: LD_INT 109
51323: PUSH
51324: LD_INT 110
51326: PUSH
51327: LD_INT 111
51329: PUSH
51330: LD_INT 112
51332: PUSH
51333: LD_INT 114
51335: PUSH
51336: LD_INT 116
51338: PUSH
51339: LD_INT 117
51341: PUSH
51342: LD_INT 118
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: ST_TO_ADDR
51367: GO 53050
51369: LD_INT 12
51371: DOUBLE
51372: EQUAL
51373: IFTRUE 51377
51375: GO 51597
51377: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51378: LD_ADDR_VAR 0 2
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: LD_INT 3
51391: PUSH
51392: LD_INT 4
51394: PUSH
51395: LD_INT 5
51397: PUSH
51398: LD_INT 6
51400: PUSH
51401: LD_INT 7
51403: PUSH
51404: LD_INT 8
51406: PUSH
51407: LD_INT 9
51409: PUSH
51410: LD_INT 10
51412: PUSH
51413: LD_INT 11
51415: PUSH
51416: LD_INT 12
51418: PUSH
51419: LD_INT 13
51421: PUSH
51422: LD_INT 14
51424: PUSH
51425: LD_INT 15
51427: PUSH
51428: LD_INT 16
51430: PUSH
51431: LD_INT 17
51433: PUSH
51434: LD_INT 18
51436: PUSH
51437: LD_INT 19
51439: PUSH
51440: LD_INT 20
51442: PUSH
51443: LD_INT 21
51445: PUSH
51446: LD_INT 22
51448: PUSH
51449: LD_INT 23
51451: PUSH
51452: LD_INT 24
51454: PUSH
51455: LD_INT 25
51457: PUSH
51458: LD_INT 26
51460: PUSH
51461: LD_INT 27
51463: PUSH
51464: LD_INT 28
51466: PUSH
51467: LD_INT 30
51469: PUSH
51470: LD_INT 31
51472: PUSH
51473: LD_INT 32
51475: PUSH
51476: LD_INT 33
51478: PUSH
51479: LD_INT 34
51481: PUSH
51482: LD_INT 36
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 101
51523: PUSH
51524: LD_INT 102
51526: PUSH
51527: LD_INT 103
51529: PUSH
51530: LD_INT 104
51532: PUSH
51533: LD_INT 105
51535: PUSH
51536: LD_INT 106
51538: PUSH
51539: LD_INT 107
51541: PUSH
51542: LD_INT 108
51544: PUSH
51545: LD_INT 109
51547: PUSH
51548: LD_INT 110
51550: PUSH
51551: LD_INT 111
51553: PUSH
51554: LD_INT 112
51556: PUSH
51557: LD_INT 113
51559: PUSH
51560: LD_INT 114
51562: PUSH
51563: LD_INT 116
51565: PUSH
51566: LD_INT 117
51568: PUSH
51569: LD_INT 118
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: ST_TO_ADDR
51595: GO 53050
51597: LD_INT 13
51599: DOUBLE
51600: EQUAL
51601: IFTRUE 51605
51603: GO 51813
51605: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51606: LD_ADDR_VAR 0 2
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 2
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: LD_INT 4
51622: PUSH
51623: LD_INT 5
51625: PUSH
51626: LD_INT 8
51628: PUSH
51629: LD_INT 9
51631: PUSH
51632: LD_INT 10
51634: PUSH
51635: LD_INT 11
51637: PUSH
51638: LD_INT 12
51640: PUSH
51641: LD_INT 14
51643: PUSH
51644: LD_INT 15
51646: PUSH
51647: LD_INT 16
51649: PUSH
51650: LD_INT 17
51652: PUSH
51653: LD_INT 18
51655: PUSH
51656: LD_INT 19
51658: PUSH
51659: LD_INT 20
51661: PUSH
51662: LD_INT 21
51664: PUSH
51665: LD_INT 22
51667: PUSH
51668: LD_INT 23
51670: PUSH
51671: LD_INT 24
51673: PUSH
51674: LD_INT 25
51676: PUSH
51677: LD_INT 26
51679: PUSH
51680: LD_INT 27
51682: PUSH
51683: LD_INT 28
51685: PUSH
51686: LD_INT 30
51688: PUSH
51689: LD_INT 31
51691: PUSH
51692: LD_INT 32
51694: PUSH
51695: LD_INT 33
51697: PUSH
51698: LD_INT 34
51700: PUSH
51701: LD_INT 36
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 101
51739: PUSH
51740: LD_INT 102
51742: PUSH
51743: LD_INT 103
51745: PUSH
51746: LD_INT 104
51748: PUSH
51749: LD_INT 105
51751: PUSH
51752: LD_INT 106
51754: PUSH
51755: LD_INT 107
51757: PUSH
51758: LD_INT 108
51760: PUSH
51761: LD_INT 109
51763: PUSH
51764: LD_INT 110
51766: PUSH
51767: LD_INT 111
51769: PUSH
51770: LD_INT 112
51772: PUSH
51773: LD_INT 113
51775: PUSH
51776: LD_INT 114
51778: PUSH
51779: LD_INT 116
51781: PUSH
51782: LD_INT 117
51784: PUSH
51785: LD_INT 118
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: ST_TO_ADDR
51811: GO 53050
51813: LD_INT 14
51815: DOUBLE
51816: EQUAL
51817: IFTRUE 51821
51819: GO 52045
51821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51822: LD_ADDR_VAR 0 2
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 3
51835: PUSH
51836: LD_INT 4
51838: PUSH
51839: LD_INT 5
51841: PUSH
51842: LD_INT 6
51844: PUSH
51845: LD_INT 7
51847: PUSH
51848: LD_INT 8
51850: PUSH
51851: LD_INT 9
51853: PUSH
51854: LD_INT 10
51856: PUSH
51857: LD_INT 11
51859: PUSH
51860: LD_INT 12
51862: PUSH
51863: LD_INT 13
51865: PUSH
51866: LD_INT 14
51868: PUSH
51869: LD_INT 15
51871: PUSH
51872: LD_INT 16
51874: PUSH
51875: LD_INT 17
51877: PUSH
51878: LD_INT 18
51880: PUSH
51881: LD_INT 19
51883: PUSH
51884: LD_INT 20
51886: PUSH
51887: LD_INT 21
51889: PUSH
51890: LD_INT 22
51892: PUSH
51893: LD_INT 23
51895: PUSH
51896: LD_INT 24
51898: PUSH
51899: LD_INT 25
51901: PUSH
51902: LD_INT 26
51904: PUSH
51905: LD_INT 27
51907: PUSH
51908: LD_INT 28
51910: PUSH
51911: LD_INT 29
51913: PUSH
51914: LD_INT 30
51916: PUSH
51917: LD_INT 31
51919: PUSH
51920: LD_INT 32
51922: PUSH
51923: LD_INT 33
51925: PUSH
51926: LD_INT 34
51928: PUSH
51929: LD_INT 36
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 101
51971: PUSH
51972: LD_INT 102
51974: PUSH
51975: LD_INT 103
51977: PUSH
51978: LD_INT 104
51980: PUSH
51981: LD_INT 105
51983: PUSH
51984: LD_INT 106
51986: PUSH
51987: LD_INT 107
51989: PUSH
51990: LD_INT 108
51992: PUSH
51993: LD_INT 109
51995: PUSH
51996: LD_INT 110
51998: PUSH
51999: LD_INT 111
52001: PUSH
52002: LD_INT 112
52004: PUSH
52005: LD_INT 113
52007: PUSH
52008: LD_INT 114
52010: PUSH
52011: LD_INT 116
52013: PUSH
52014: LD_INT 117
52016: PUSH
52017: LD_INT 118
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: ST_TO_ADDR
52043: GO 53050
52045: LD_INT 15
52047: DOUBLE
52048: EQUAL
52049: IFTRUE 52053
52051: GO 52277
52053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52054: LD_ADDR_VAR 0 2
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: LD_INT 4
52070: PUSH
52071: LD_INT 5
52073: PUSH
52074: LD_INT 6
52076: PUSH
52077: LD_INT 7
52079: PUSH
52080: LD_INT 8
52082: PUSH
52083: LD_INT 9
52085: PUSH
52086: LD_INT 10
52088: PUSH
52089: LD_INT 11
52091: PUSH
52092: LD_INT 12
52094: PUSH
52095: LD_INT 13
52097: PUSH
52098: LD_INT 14
52100: PUSH
52101: LD_INT 15
52103: PUSH
52104: LD_INT 16
52106: PUSH
52107: LD_INT 17
52109: PUSH
52110: LD_INT 18
52112: PUSH
52113: LD_INT 19
52115: PUSH
52116: LD_INT 20
52118: PUSH
52119: LD_INT 21
52121: PUSH
52122: LD_INT 22
52124: PUSH
52125: LD_INT 23
52127: PUSH
52128: LD_INT 24
52130: PUSH
52131: LD_INT 25
52133: PUSH
52134: LD_INT 26
52136: PUSH
52137: LD_INT 27
52139: PUSH
52140: LD_INT 28
52142: PUSH
52143: LD_INT 29
52145: PUSH
52146: LD_INT 30
52148: PUSH
52149: LD_INT 31
52151: PUSH
52152: LD_INT 32
52154: PUSH
52155: LD_INT 33
52157: PUSH
52158: LD_INT 34
52160: PUSH
52161: LD_INT 36
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 101
52203: PUSH
52204: LD_INT 102
52206: PUSH
52207: LD_INT 103
52209: PUSH
52210: LD_INT 104
52212: PUSH
52213: LD_INT 105
52215: PUSH
52216: LD_INT 106
52218: PUSH
52219: LD_INT 107
52221: PUSH
52222: LD_INT 108
52224: PUSH
52225: LD_INT 109
52227: PUSH
52228: LD_INT 110
52230: PUSH
52231: LD_INT 111
52233: PUSH
52234: LD_INT 112
52236: PUSH
52237: LD_INT 113
52239: PUSH
52240: LD_INT 114
52242: PUSH
52243: LD_INT 116
52245: PUSH
52246: LD_INT 117
52248: PUSH
52249: LD_INT 118
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: ST_TO_ADDR
52275: GO 53050
52277: LD_INT 16
52279: DOUBLE
52280: EQUAL
52281: IFTRUE 52285
52283: GO 52421
52285: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52286: LD_ADDR_VAR 0 2
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 4
52296: PUSH
52297: LD_INT 5
52299: PUSH
52300: LD_INT 7
52302: PUSH
52303: LD_INT 11
52305: PUSH
52306: LD_INT 12
52308: PUSH
52309: LD_INT 15
52311: PUSH
52312: LD_INT 16
52314: PUSH
52315: LD_INT 20
52317: PUSH
52318: LD_INT 21
52320: PUSH
52321: LD_INT 22
52323: PUSH
52324: LD_INT 23
52326: PUSH
52327: LD_INT 25
52329: PUSH
52330: LD_INT 26
52332: PUSH
52333: LD_INT 30
52335: PUSH
52336: LD_INT 31
52338: PUSH
52339: LD_INT 32
52341: PUSH
52342: LD_INT 33
52344: PUSH
52345: LD_INT 34
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 101
52371: PUSH
52372: LD_INT 102
52374: PUSH
52375: LD_INT 103
52377: PUSH
52378: LD_INT 106
52380: PUSH
52381: LD_INT 108
52383: PUSH
52384: LD_INT 112
52386: PUSH
52387: LD_INT 113
52389: PUSH
52390: LD_INT 114
52392: PUSH
52393: LD_INT 116
52395: PUSH
52396: LD_INT 117
52398: PUSH
52399: LD_INT 118
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: ST_TO_ADDR
52419: GO 53050
52421: LD_INT 17
52423: DOUBLE
52424: EQUAL
52425: IFTRUE 52429
52427: GO 52653
52429: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52430: LD_ADDR_VAR 0 2
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: LD_INT 5
52449: PUSH
52450: LD_INT 6
52452: PUSH
52453: LD_INT 7
52455: PUSH
52456: LD_INT 8
52458: PUSH
52459: LD_INT 9
52461: PUSH
52462: LD_INT 10
52464: PUSH
52465: LD_INT 11
52467: PUSH
52468: LD_INT 12
52470: PUSH
52471: LD_INT 13
52473: PUSH
52474: LD_INT 14
52476: PUSH
52477: LD_INT 15
52479: PUSH
52480: LD_INT 16
52482: PUSH
52483: LD_INT 17
52485: PUSH
52486: LD_INT 18
52488: PUSH
52489: LD_INT 19
52491: PUSH
52492: LD_INT 20
52494: PUSH
52495: LD_INT 21
52497: PUSH
52498: LD_INT 22
52500: PUSH
52501: LD_INT 23
52503: PUSH
52504: LD_INT 24
52506: PUSH
52507: LD_INT 25
52509: PUSH
52510: LD_INT 26
52512: PUSH
52513: LD_INT 27
52515: PUSH
52516: LD_INT 28
52518: PUSH
52519: LD_INT 29
52521: PUSH
52522: LD_INT 30
52524: PUSH
52525: LD_INT 31
52527: PUSH
52528: LD_INT 32
52530: PUSH
52531: LD_INT 33
52533: PUSH
52534: LD_INT 34
52536: PUSH
52537: LD_INT 36
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 101
52579: PUSH
52580: LD_INT 102
52582: PUSH
52583: LD_INT 103
52585: PUSH
52586: LD_INT 104
52588: PUSH
52589: LD_INT 105
52591: PUSH
52592: LD_INT 106
52594: PUSH
52595: LD_INT 107
52597: PUSH
52598: LD_INT 108
52600: PUSH
52601: LD_INT 109
52603: PUSH
52604: LD_INT 110
52606: PUSH
52607: LD_INT 111
52609: PUSH
52610: LD_INT 112
52612: PUSH
52613: LD_INT 113
52615: PUSH
52616: LD_INT 114
52618: PUSH
52619: LD_INT 116
52621: PUSH
52622: LD_INT 117
52624: PUSH
52625: LD_INT 118
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: ST_TO_ADDR
52651: GO 53050
52653: LD_INT 18
52655: DOUBLE
52656: EQUAL
52657: IFTRUE 52661
52659: GO 52809
52661: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52662: LD_ADDR_VAR 0 2
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 4
52672: PUSH
52673: LD_INT 5
52675: PUSH
52676: LD_INT 7
52678: PUSH
52679: LD_INT 11
52681: PUSH
52682: LD_INT 12
52684: PUSH
52685: LD_INT 15
52687: PUSH
52688: LD_INT 16
52690: PUSH
52691: LD_INT 20
52693: PUSH
52694: LD_INT 21
52696: PUSH
52697: LD_INT 22
52699: PUSH
52700: LD_INT 23
52702: PUSH
52703: LD_INT 25
52705: PUSH
52706: LD_INT 26
52708: PUSH
52709: LD_INT 30
52711: PUSH
52712: LD_INT 31
52714: PUSH
52715: LD_INT 32
52717: PUSH
52718: LD_INT 33
52720: PUSH
52721: LD_INT 34
52723: PUSH
52724: LD_INT 35
52726: PUSH
52727: LD_INT 36
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 101
52755: PUSH
52756: LD_INT 102
52758: PUSH
52759: LD_INT 103
52761: PUSH
52762: LD_INT 106
52764: PUSH
52765: LD_INT 108
52767: PUSH
52768: LD_INT 112
52770: PUSH
52771: LD_INT 113
52773: PUSH
52774: LD_INT 114
52776: PUSH
52777: LD_INT 115
52779: PUSH
52780: LD_INT 116
52782: PUSH
52783: LD_INT 117
52785: PUSH
52786: LD_INT 118
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: ST_TO_ADDR
52807: GO 53050
52809: LD_INT 19
52811: DOUBLE
52812: EQUAL
52813: IFTRUE 52817
52815: GO 53049
52817: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52818: LD_ADDR_VAR 0 2
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 3
52831: PUSH
52832: LD_INT 4
52834: PUSH
52835: LD_INT 5
52837: PUSH
52838: LD_INT 6
52840: PUSH
52841: LD_INT 7
52843: PUSH
52844: LD_INT 8
52846: PUSH
52847: LD_INT 9
52849: PUSH
52850: LD_INT 10
52852: PUSH
52853: LD_INT 11
52855: PUSH
52856: LD_INT 12
52858: PUSH
52859: LD_INT 13
52861: PUSH
52862: LD_INT 14
52864: PUSH
52865: LD_INT 15
52867: PUSH
52868: LD_INT 16
52870: PUSH
52871: LD_INT 17
52873: PUSH
52874: LD_INT 18
52876: PUSH
52877: LD_INT 19
52879: PUSH
52880: LD_INT 20
52882: PUSH
52883: LD_INT 21
52885: PUSH
52886: LD_INT 22
52888: PUSH
52889: LD_INT 23
52891: PUSH
52892: LD_INT 24
52894: PUSH
52895: LD_INT 25
52897: PUSH
52898: LD_INT 26
52900: PUSH
52901: LD_INT 27
52903: PUSH
52904: LD_INT 28
52906: PUSH
52907: LD_INT 29
52909: PUSH
52910: LD_INT 30
52912: PUSH
52913: LD_INT 31
52915: PUSH
52916: LD_INT 32
52918: PUSH
52919: LD_INT 33
52921: PUSH
52922: LD_INT 34
52924: PUSH
52925: LD_INT 35
52927: PUSH
52928: LD_INT 36
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 101
52971: PUSH
52972: LD_INT 102
52974: PUSH
52975: LD_INT 103
52977: PUSH
52978: LD_INT 104
52980: PUSH
52981: LD_INT 105
52983: PUSH
52984: LD_INT 106
52986: PUSH
52987: LD_INT 107
52989: PUSH
52990: LD_INT 108
52992: PUSH
52993: LD_INT 109
52995: PUSH
52996: LD_INT 110
52998: PUSH
52999: LD_INT 111
53001: PUSH
53002: LD_INT 112
53004: PUSH
53005: LD_INT 113
53007: PUSH
53008: LD_INT 114
53010: PUSH
53011: LD_INT 115
53013: PUSH
53014: LD_INT 116
53016: PUSH
53017: LD_INT 117
53019: PUSH
53020: LD_INT 118
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: ST_TO_ADDR
53047: GO 53050
53049: POP
// end else
53050: GO 53281
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53052: LD_ADDR_VAR 0 2
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 3
53065: PUSH
53066: LD_INT 4
53068: PUSH
53069: LD_INT 5
53071: PUSH
53072: LD_INT 6
53074: PUSH
53075: LD_INT 7
53077: PUSH
53078: LD_INT 8
53080: PUSH
53081: LD_INT 9
53083: PUSH
53084: LD_INT 10
53086: PUSH
53087: LD_INT 11
53089: PUSH
53090: LD_INT 12
53092: PUSH
53093: LD_INT 13
53095: PUSH
53096: LD_INT 14
53098: PUSH
53099: LD_INT 15
53101: PUSH
53102: LD_INT 16
53104: PUSH
53105: LD_INT 17
53107: PUSH
53108: LD_INT 18
53110: PUSH
53111: LD_INT 19
53113: PUSH
53114: LD_INT 20
53116: PUSH
53117: LD_INT 21
53119: PUSH
53120: LD_INT 22
53122: PUSH
53123: LD_INT 23
53125: PUSH
53126: LD_INT 24
53128: PUSH
53129: LD_INT 25
53131: PUSH
53132: LD_INT 26
53134: PUSH
53135: LD_INT 27
53137: PUSH
53138: LD_INT 28
53140: PUSH
53141: LD_INT 29
53143: PUSH
53144: LD_INT 30
53146: PUSH
53147: LD_INT 31
53149: PUSH
53150: LD_INT 32
53152: PUSH
53153: LD_INT 33
53155: PUSH
53156: LD_INT 34
53158: PUSH
53159: LD_INT 35
53161: PUSH
53162: LD_INT 36
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 101
53205: PUSH
53206: LD_INT 102
53208: PUSH
53209: LD_INT 103
53211: PUSH
53212: LD_INT 104
53214: PUSH
53215: LD_INT 105
53217: PUSH
53218: LD_INT 106
53220: PUSH
53221: LD_INT 107
53223: PUSH
53224: LD_INT 108
53226: PUSH
53227: LD_INT 109
53229: PUSH
53230: LD_INT 110
53232: PUSH
53233: LD_INT 111
53235: PUSH
53236: LD_INT 112
53238: PUSH
53239: LD_INT 113
53241: PUSH
53242: LD_INT 114
53244: PUSH
53245: LD_INT 115
53247: PUSH
53248: LD_INT 116
53250: PUSH
53251: LD_INT 117
53253: PUSH
53254: LD_INT 118
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: ST_TO_ADDR
// if result then
53281: LD_VAR 0 2
53285: IFFALSE 54071
// begin normal :=  ;
53287: LD_ADDR_VAR 0 5
53291: PUSH
53292: LD_STRING 
53294: ST_TO_ADDR
// hardcore :=  ;
53295: LD_ADDR_VAR 0 6
53299: PUSH
53300: LD_STRING 
53302: ST_TO_ADDR
// active :=  ;
53303: LD_ADDR_VAR 0 7
53307: PUSH
53308: LD_STRING 
53310: ST_TO_ADDR
// for i = 1 to normalCounter do
53311: LD_ADDR_VAR 0 8
53315: PUSH
53316: DOUBLE
53317: LD_INT 1
53319: DEC
53320: ST_TO_ADDR
53321: LD_EXP 57
53325: PUSH
53326: FOR_TO
53327: IFFALSE 53428
// begin tmp := 0 ;
53329: LD_ADDR_VAR 0 3
53333: PUSH
53334: LD_STRING 0
53336: ST_TO_ADDR
// if result [ 1 ] then
53337: LD_VAR 0 2
53341: PUSH
53342: LD_INT 1
53344: ARRAY
53345: IFFALSE 53410
// if result [ 1 ] [ 1 ] = i then
53347: LD_VAR 0 2
53351: PUSH
53352: LD_INT 1
53354: ARRAY
53355: PUSH
53356: LD_INT 1
53358: ARRAY
53359: PUSH
53360: LD_VAR 0 8
53364: EQUAL
53365: IFFALSE 53410
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53367: LD_ADDR_VAR 0 2
53371: PUSH
53372: LD_VAR 0 2
53376: PPUSH
53377: LD_INT 1
53379: PPUSH
53380: LD_VAR 0 2
53384: PUSH
53385: LD_INT 1
53387: ARRAY
53388: PPUSH
53389: LD_INT 1
53391: PPUSH
53392: CALL_OW 3
53396: PPUSH
53397: CALL_OW 1
53401: ST_TO_ADDR
// tmp := 1 ;
53402: LD_ADDR_VAR 0 3
53406: PUSH
53407: LD_STRING 1
53409: ST_TO_ADDR
// end ; normal := normal & tmp ;
53410: LD_ADDR_VAR 0 5
53414: PUSH
53415: LD_VAR 0 5
53419: PUSH
53420: LD_VAR 0 3
53424: STR
53425: ST_TO_ADDR
// end ;
53426: GO 53326
53428: POP
53429: POP
// for i = 1 to hardcoreCounter do
53430: LD_ADDR_VAR 0 8
53434: PUSH
53435: DOUBLE
53436: LD_INT 1
53438: DEC
53439: ST_TO_ADDR
53440: LD_EXP 58
53444: PUSH
53445: FOR_TO
53446: IFFALSE 53551
// begin tmp := 0 ;
53448: LD_ADDR_VAR 0 3
53452: PUSH
53453: LD_STRING 0
53455: ST_TO_ADDR
// if result [ 2 ] then
53456: LD_VAR 0 2
53460: PUSH
53461: LD_INT 2
53463: ARRAY
53464: IFFALSE 53533
// if result [ 2 ] [ 1 ] = 100 + i then
53466: LD_VAR 0 2
53470: PUSH
53471: LD_INT 2
53473: ARRAY
53474: PUSH
53475: LD_INT 1
53477: ARRAY
53478: PUSH
53479: LD_INT 100
53481: PUSH
53482: LD_VAR 0 8
53486: PLUS
53487: EQUAL
53488: IFFALSE 53533
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53490: LD_ADDR_VAR 0 2
53494: PUSH
53495: LD_VAR 0 2
53499: PPUSH
53500: LD_INT 2
53502: PPUSH
53503: LD_VAR 0 2
53507: PUSH
53508: LD_INT 2
53510: ARRAY
53511: PPUSH
53512: LD_INT 1
53514: PPUSH
53515: CALL_OW 3
53519: PPUSH
53520: CALL_OW 1
53524: ST_TO_ADDR
// tmp := 1 ;
53525: LD_ADDR_VAR 0 3
53529: PUSH
53530: LD_STRING 1
53532: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53533: LD_ADDR_VAR 0 6
53537: PUSH
53538: LD_VAR 0 6
53542: PUSH
53543: LD_VAR 0 3
53547: STR
53548: ST_TO_ADDR
// end ;
53549: GO 53445
53551: POP
53552: POP
// if isGameLoad then
53553: LD_VAR 0 1
53557: IFFALSE 54032
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53559: LD_ADDR_VAR 0 4
53563: PUSH
53564: LD_EXP 61
53568: PUSH
53569: LD_EXP 60
53573: PUSH
53574: LD_EXP 62
53578: PUSH
53579: LD_EXP 59
53583: PUSH
53584: LD_EXP 63
53588: PUSH
53589: LD_EXP 64
53593: PUSH
53594: LD_EXP 65
53598: PUSH
53599: LD_EXP 66
53603: PUSH
53604: LD_EXP 67
53608: PUSH
53609: LD_EXP 68
53613: PUSH
53614: LD_EXP 69
53618: PUSH
53619: LD_EXP 70
53623: PUSH
53624: LD_EXP 71
53628: PUSH
53629: LD_EXP 72
53633: PUSH
53634: LD_EXP 80
53638: PUSH
53639: LD_EXP 81
53643: PUSH
53644: LD_EXP 82
53648: PUSH
53649: LD_EXP 83
53653: PUSH
53654: LD_EXP 85
53658: PUSH
53659: LD_EXP 86
53663: PUSH
53664: LD_EXP 87
53668: PUSH
53669: LD_EXP 90
53673: PUSH
53674: LD_EXP 92
53678: PUSH
53679: LD_EXP 93
53683: PUSH
53684: LD_EXP 94
53688: PUSH
53689: LD_EXP 96
53693: PUSH
53694: LD_EXP 97
53698: PUSH
53699: LD_EXP 100
53703: PUSH
53704: LD_EXP 101
53708: PUSH
53709: LD_EXP 102
53713: PUSH
53714: LD_EXP 103
53718: PUSH
53719: LD_EXP 104
53723: PUSH
53724: LD_EXP 105
53728: PUSH
53729: LD_EXP 106
53733: PUSH
53734: LD_EXP 107
53738: PUSH
53739: LD_EXP 108
53743: PUSH
53744: LD_EXP 73
53748: PUSH
53749: LD_EXP 74
53753: PUSH
53754: LD_EXP 77
53758: PUSH
53759: LD_EXP 78
53763: PUSH
53764: LD_EXP 79
53768: PUSH
53769: LD_EXP 75
53773: PUSH
53774: LD_EXP 76
53778: PUSH
53779: LD_EXP 84
53783: PUSH
53784: LD_EXP 88
53788: PUSH
53789: LD_EXP 89
53793: PUSH
53794: LD_EXP 91
53798: PUSH
53799: LD_EXP 95
53803: PUSH
53804: LD_EXP 98
53808: PUSH
53809: LD_EXP 99
53813: PUSH
53814: LD_EXP 109
53818: PUSH
53819: LD_EXP 110
53823: PUSH
53824: LD_EXP 111
53828: PUSH
53829: LD_EXP 112
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
// tmp :=  ;
53890: LD_ADDR_VAR 0 3
53894: PUSH
53895: LD_STRING 
53897: ST_TO_ADDR
// for i = 1 to normalCounter do
53898: LD_ADDR_VAR 0 8
53902: PUSH
53903: DOUBLE
53904: LD_INT 1
53906: DEC
53907: ST_TO_ADDR
53908: LD_EXP 57
53912: PUSH
53913: FOR_TO
53914: IFFALSE 53950
// begin if flags [ i ] then
53916: LD_VAR 0 4
53920: PUSH
53921: LD_VAR 0 8
53925: ARRAY
53926: IFFALSE 53948
// tmp := tmp & i & ; ;
53928: LD_ADDR_VAR 0 3
53932: PUSH
53933: LD_VAR 0 3
53937: PUSH
53938: LD_VAR 0 8
53942: STR
53943: PUSH
53944: LD_STRING ;
53946: STR
53947: ST_TO_ADDR
// end ;
53948: GO 53913
53950: POP
53951: POP
// for i = 1 to hardcoreCounter do
53952: LD_ADDR_VAR 0 8
53956: PUSH
53957: DOUBLE
53958: LD_INT 1
53960: DEC
53961: ST_TO_ADDR
53962: LD_EXP 58
53966: PUSH
53967: FOR_TO
53968: IFFALSE 54014
// begin if flags [ normalCounter + i ] then
53970: LD_VAR 0 4
53974: PUSH
53975: LD_EXP 57
53979: PUSH
53980: LD_VAR 0 8
53984: PLUS
53985: ARRAY
53986: IFFALSE 54012
// tmp := tmp & ( 100 + i ) & ; ;
53988: LD_ADDR_VAR 0 3
53992: PUSH
53993: LD_VAR 0 3
53997: PUSH
53998: LD_INT 100
54000: PUSH
54001: LD_VAR 0 8
54005: PLUS
54006: STR
54007: PUSH
54008: LD_STRING ;
54010: STR
54011: ST_TO_ADDR
// end ;
54012: GO 53967
54014: POP
54015: POP
// if tmp then
54016: LD_VAR 0 3
54020: IFFALSE 54032
// active := tmp ;
54022: LD_ADDR_VAR 0 7
54026: PUSH
54027: LD_VAR 0 3
54031: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54032: LD_STRING getStreamItemsFromMission("
54034: PUSH
54035: LD_VAR 0 5
54039: STR
54040: PUSH
54041: LD_STRING ","
54043: STR
54044: PUSH
54045: LD_VAR 0 6
54049: STR
54050: PUSH
54051: LD_STRING ","
54053: STR
54054: PUSH
54055: LD_VAR 0 7
54059: STR
54060: PUSH
54061: LD_STRING ")
54063: STR
54064: PPUSH
54065: CALL_OW 559
// end else
54069: GO 54078
// ToLua ( getStreamItemsFromMission("","","") ) ;
54071: LD_STRING getStreamItemsFromMission("","","")
54073: PPUSH
54074: CALL_OW 559
// end ;
54078: LD_VAR 0 2
54082: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54083: LD_EXP 56
54087: PUSH
54088: LD_EXP 61
54092: AND
54093: IFFALSE 54217
54095: GO 54097
54097: DISABLE
54098: LD_INT 0
54100: PPUSH
54101: PPUSH
// begin enable ;
54102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54103: LD_ADDR_VAR 0 2
54107: PUSH
54108: LD_INT 22
54110: PUSH
54111: LD_OWVAR 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 34
54125: PUSH
54126: LD_INT 7
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 34
54135: PUSH
54136: LD_INT 45
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 34
54145: PUSH
54146: LD_INT 28
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 34
54155: PUSH
54156: LD_INT 47
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PPUSH
54174: CALL_OW 69
54178: ST_TO_ADDR
// if not tmp then
54179: LD_VAR 0 2
54183: NOT
54184: IFFALSE 54188
// exit ;
54186: GO 54217
// for i in tmp do
54188: LD_ADDR_VAR 0 1
54192: PUSH
54193: LD_VAR 0 2
54197: PUSH
54198: FOR_IN
54199: IFFALSE 54215
// begin SetLives ( i , 0 ) ;
54201: LD_VAR 0 1
54205: PPUSH
54206: LD_INT 0
54208: PPUSH
54209: CALL_OW 234
// end ;
54213: GO 54198
54215: POP
54216: POP
// end ;
54217: PPOPN 2
54219: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54220: LD_EXP 56
54224: PUSH
54225: LD_EXP 62
54229: AND
54230: IFFALSE 54314
54232: GO 54234
54234: DISABLE
54235: LD_INT 0
54237: PPUSH
54238: PPUSH
// begin enable ;
54239: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54240: LD_ADDR_VAR 0 2
54244: PUSH
54245: LD_INT 22
54247: PUSH
54248: LD_OWVAR 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 32
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PPUSH
54271: CALL_OW 69
54275: ST_TO_ADDR
// if not tmp then
54276: LD_VAR 0 2
54280: NOT
54281: IFFALSE 54285
// exit ;
54283: GO 54314
// for i in tmp do
54285: LD_ADDR_VAR 0 1
54289: PUSH
54290: LD_VAR 0 2
54294: PUSH
54295: FOR_IN
54296: IFFALSE 54312
// begin SetLives ( i , 0 ) ;
54298: LD_VAR 0 1
54302: PPUSH
54303: LD_INT 0
54305: PPUSH
54306: CALL_OW 234
// end ;
54310: GO 54295
54312: POP
54313: POP
// end ;
54314: PPOPN 2
54316: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54317: LD_EXP 56
54321: PUSH
54322: LD_EXP 59
54326: AND
54327: IFFALSE 54420
54329: GO 54331
54331: DISABLE
54332: LD_INT 0
54334: PPUSH
// begin enable ;
54335: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54336: LD_ADDR_VAR 0 1
54340: PUSH
54341: LD_INT 22
54343: PUSH
54344: LD_OWVAR 2
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 25
54358: PUSH
54359: LD_INT 5
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 25
54368: PUSH
54369: LD_INT 9
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 25
54378: PUSH
54379: LD_INT 8
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PPUSH
54396: CALL_OW 69
54400: PUSH
54401: FOR_IN
54402: IFFALSE 54418
// begin SetClass ( i , 1 ) ;
54404: LD_VAR 0 1
54408: PPUSH
54409: LD_INT 1
54411: PPUSH
54412: CALL_OW 336
// end ;
54416: GO 54401
54418: POP
54419: POP
// end ;
54420: PPOPN 1
54422: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54423: LD_EXP 56
54427: PUSH
54428: LD_EXP 60
54432: AND
54433: PUSH
54434: LD_OWVAR 65
54438: PUSH
54439: LD_INT 7
54441: LESS
54442: AND
54443: IFFALSE 54457
54445: GO 54447
54447: DISABLE
// begin enable ;
54448: ENABLE
// game_speed := 7 ;
54449: LD_ADDR_OWVAR 65
54453: PUSH
54454: LD_INT 7
54456: ST_TO_ADDR
// end ;
54457: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54458: LD_EXP 56
54462: PUSH
54463: LD_EXP 63
54467: AND
54468: IFFALSE 54670
54470: GO 54472
54472: DISABLE
54473: LD_INT 0
54475: PPUSH
54476: PPUSH
54477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54478: LD_ADDR_VAR 0 3
54482: PUSH
54483: LD_INT 81
54485: PUSH
54486: LD_OWVAR 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 21
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PPUSH
54509: CALL_OW 69
54513: ST_TO_ADDR
// if not tmp then
54514: LD_VAR 0 3
54518: NOT
54519: IFFALSE 54523
// exit ;
54521: GO 54670
// if tmp > 5 then
54523: LD_VAR 0 3
54527: PUSH
54528: LD_INT 5
54530: GREATER
54531: IFFALSE 54543
// k := 5 else
54533: LD_ADDR_VAR 0 2
54537: PUSH
54538: LD_INT 5
54540: ST_TO_ADDR
54541: GO 54553
// k := tmp ;
54543: LD_ADDR_VAR 0 2
54547: PUSH
54548: LD_VAR 0 3
54552: ST_TO_ADDR
// for i := 1 to k do
54553: LD_ADDR_VAR 0 1
54557: PUSH
54558: DOUBLE
54559: LD_INT 1
54561: DEC
54562: ST_TO_ADDR
54563: LD_VAR 0 2
54567: PUSH
54568: FOR_TO
54569: IFFALSE 54668
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54571: LD_VAR 0 3
54575: PUSH
54576: LD_VAR 0 1
54580: ARRAY
54581: PPUSH
54582: LD_VAR 0 1
54586: PUSH
54587: LD_INT 4
54589: MOD
54590: PUSH
54591: LD_INT 1
54593: PLUS
54594: PPUSH
54595: CALL_OW 259
54599: PUSH
54600: LD_INT 10
54602: LESS
54603: IFFALSE 54666
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54605: LD_VAR 0 3
54609: PUSH
54610: LD_VAR 0 1
54614: ARRAY
54615: PPUSH
54616: LD_VAR 0 1
54620: PUSH
54621: LD_INT 4
54623: MOD
54624: PUSH
54625: LD_INT 1
54627: PLUS
54628: PPUSH
54629: LD_VAR 0 3
54633: PUSH
54634: LD_VAR 0 1
54638: ARRAY
54639: PPUSH
54640: LD_VAR 0 1
54644: PUSH
54645: LD_INT 4
54647: MOD
54648: PUSH
54649: LD_INT 1
54651: PLUS
54652: PPUSH
54653: CALL_OW 259
54657: PUSH
54658: LD_INT 1
54660: PLUS
54661: PPUSH
54662: CALL_OW 237
54666: GO 54568
54668: POP
54669: POP
// end ;
54670: PPOPN 3
54672: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54673: LD_EXP 56
54677: PUSH
54678: LD_EXP 64
54682: AND
54683: IFFALSE 54703
54685: GO 54687
54687: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54688: LD_INT 4
54690: PPUSH
54691: LD_OWVAR 2
54695: PPUSH
54696: LD_INT 0
54698: PPUSH
54699: CALL_OW 324
54703: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54704: LD_EXP 56
54708: PUSH
54709: LD_EXP 93
54713: AND
54714: IFFALSE 54734
54716: GO 54718
54718: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54719: LD_INT 19
54721: PPUSH
54722: LD_OWVAR 2
54726: PPUSH
54727: LD_INT 0
54729: PPUSH
54730: CALL_OW 324
54734: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54735: LD_EXP 56
54739: PUSH
54740: LD_EXP 65
54744: AND
54745: IFFALSE 54847
54747: GO 54749
54749: DISABLE
54750: LD_INT 0
54752: PPUSH
54753: PPUSH
// begin enable ;
54754: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54755: LD_ADDR_VAR 0 2
54759: PUSH
54760: LD_INT 22
54762: PUSH
54763: LD_OWVAR 2
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: LD_INT 34
54777: PUSH
54778: LD_INT 11
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 34
54787: PUSH
54788: LD_INT 30
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PPUSH
54804: CALL_OW 69
54808: ST_TO_ADDR
// if not tmp then
54809: LD_VAR 0 2
54813: NOT
54814: IFFALSE 54818
// exit ;
54816: GO 54847
// for i in tmp do
54818: LD_ADDR_VAR 0 1
54822: PUSH
54823: LD_VAR 0 2
54827: PUSH
54828: FOR_IN
54829: IFFALSE 54845
// begin SetLives ( i , 0 ) ;
54831: LD_VAR 0 1
54835: PPUSH
54836: LD_INT 0
54838: PPUSH
54839: CALL_OW 234
// end ;
54843: GO 54828
54845: POP
54846: POP
// end ;
54847: PPOPN 2
54849: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54850: LD_EXP 56
54854: PUSH
54855: LD_EXP 66
54859: AND
54860: IFFALSE 54880
54862: GO 54864
54864: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54865: LD_INT 32
54867: PPUSH
54868: LD_OWVAR 2
54872: PPUSH
54873: LD_INT 0
54875: PPUSH
54876: CALL_OW 324
54880: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54881: LD_EXP 56
54885: PUSH
54886: LD_EXP 67
54890: AND
54891: IFFALSE 55072
54893: GO 54895
54895: DISABLE
54896: LD_INT 0
54898: PPUSH
54899: PPUSH
54900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54901: LD_ADDR_VAR 0 2
54905: PUSH
54906: LD_INT 22
54908: PUSH
54909: LD_OWVAR 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 33
54920: PUSH
54921: LD_INT 3
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PPUSH
54932: CALL_OW 69
54936: ST_TO_ADDR
// if not tmp then
54937: LD_VAR 0 2
54941: NOT
54942: IFFALSE 54946
// exit ;
54944: GO 55072
// side := 0 ;
54946: LD_ADDR_VAR 0 3
54950: PUSH
54951: LD_INT 0
54953: ST_TO_ADDR
// for i := 1 to 8 do
54954: LD_ADDR_VAR 0 1
54958: PUSH
54959: DOUBLE
54960: LD_INT 1
54962: DEC
54963: ST_TO_ADDR
54964: LD_INT 8
54966: PUSH
54967: FOR_TO
54968: IFFALSE 55016
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54970: LD_OWVAR 2
54974: PUSH
54975: LD_VAR 0 1
54979: NONEQUAL
54980: PUSH
54981: LD_OWVAR 2
54985: PPUSH
54986: LD_VAR 0 1
54990: PPUSH
54991: CALL_OW 81
54995: PUSH
54996: LD_INT 2
54998: EQUAL
54999: AND
55000: IFFALSE 55014
// begin side := i ;
55002: LD_ADDR_VAR 0 3
55006: PUSH
55007: LD_VAR 0 1
55011: ST_TO_ADDR
// break ;
55012: GO 55016
// end ;
55014: GO 54967
55016: POP
55017: POP
// if not side then
55018: LD_VAR 0 3
55022: NOT
55023: IFFALSE 55027
// exit ;
55025: GO 55072
// for i := 1 to tmp do
55027: LD_ADDR_VAR 0 1
55031: PUSH
55032: DOUBLE
55033: LD_INT 1
55035: DEC
55036: ST_TO_ADDR
55037: LD_VAR 0 2
55041: PUSH
55042: FOR_TO
55043: IFFALSE 55070
// if Prob ( 60 ) then
55045: LD_INT 60
55047: PPUSH
55048: CALL_OW 13
55052: IFFALSE 55068
// SetSide ( i , side ) ;
55054: LD_VAR 0 1
55058: PPUSH
55059: LD_VAR 0 3
55063: PPUSH
55064: CALL_OW 235
55068: GO 55042
55070: POP
55071: POP
// end ;
55072: PPOPN 3
55074: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55075: LD_EXP 56
55079: PUSH
55080: LD_EXP 69
55084: AND
55085: IFFALSE 55204
55087: GO 55089
55089: DISABLE
55090: LD_INT 0
55092: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55093: LD_ADDR_VAR 0 1
55097: PUSH
55098: LD_INT 22
55100: PUSH
55101: LD_OWVAR 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 21
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: LD_INT 23
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: PPUSH
55142: CALL_OW 69
55146: PUSH
55147: FOR_IN
55148: IFFALSE 55202
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55150: LD_VAR 0 1
55154: PPUSH
55155: CALL_OW 257
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 3
55168: PUSH
55169: LD_INT 4
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: IN
55178: IFFALSE 55200
// SetClass ( un , rand ( 1 , 4 ) ) ;
55180: LD_VAR 0 1
55184: PPUSH
55185: LD_INT 1
55187: PPUSH
55188: LD_INT 4
55190: PPUSH
55191: CALL_OW 12
55195: PPUSH
55196: CALL_OW 336
55200: GO 55147
55202: POP
55203: POP
// end ;
55204: PPOPN 1
55206: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55207: LD_EXP 56
55211: PUSH
55212: LD_EXP 68
55216: AND
55217: IFFALSE 55296
55219: GO 55221
55221: DISABLE
55222: LD_INT 0
55224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55225: LD_ADDR_VAR 0 1
55229: PUSH
55230: LD_INT 22
55232: PUSH
55233: LD_OWVAR 2
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 21
55244: PUSH
55245: LD_INT 3
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PPUSH
55256: CALL_OW 69
55260: ST_TO_ADDR
// if not tmp then
55261: LD_VAR 0 1
55265: NOT
55266: IFFALSE 55270
// exit ;
55268: GO 55296
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55270: LD_VAR 0 1
55274: PUSH
55275: LD_INT 1
55277: PPUSH
55278: LD_VAR 0 1
55282: PPUSH
55283: CALL_OW 12
55287: ARRAY
55288: PPUSH
55289: LD_INT 100
55291: PPUSH
55292: CALL_OW 234
// end ;
55296: PPOPN 1
55298: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55299: LD_EXP 56
55303: PUSH
55304: LD_EXP 70
55308: AND
55309: IFFALSE 55407
55311: GO 55313
55313: DISABLE
55314: LD_INT 0
55316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55317: LD_ADDR_VAR 0 1
55321: PUSH
55322: LD_INT 22
55324: PUSH
55325: LD_OWVAR 2
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 21
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PPUSH
55348: CALL_OW 69
55352: ST_TO_ADDR
// if not tmp then
55353: LD_VAR 0 1
55357: NOT
55358: IFFALSE 55362
// exit ;
55360: GO 55407
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55362: LD_VAR 0 1
55366: PUSH
55367: LD_INT 1
55369: PPUSH
55370: LD_VAR 0 1
55374: PPUSH
55375: CALL_OW 12
55379: ARRAY
55380: PPUSH
55381: LD_INT 1
55383: PPUSH
55384: LD_INT 4
55386: PPUSH
55387: CALL_OW 12
55391: PPUSH
55392: LD_INT 3000
55394: PPUSH
55395: LD_INT 9000
55397: PPUSH
55398: CALL_OW 12
55402: PPUSH
55403: CALL_OW 492
// end ;
55407: PPOPN 1
55409: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55410: LD_EXP 56
55414: PUSH
55415: LD_EXP 71
55419: AND
55420: IFFALSE 55440
55422: GO 55424
55424: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55425: LD_INT 1
55427: PPUSH
55428: LD_OWVAR 2
55432: PPUSH
55433: LD_INT 0
55435: PPUSH
55436: CALL_OW 324
55440: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55441: LD_EXP 56
55445: PUSH
55446: LD_EXP 72
55450: AND
55451: IFFALSE 55534
55453: GO 55455
55455: DISABLE
55456: LD_INT 0
55458: PPUSH
55459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55460: LD_ADDR_VAR 0 2
55464: PUSH
55465: LD_INT 22
55467: PUSH
55468: LD_OWVAR 2
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 21
55479: PUSH
55480: LD_INT 3
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PPUSH
55491: CALL_OW 69
55495: ST_TO_ADDR
// if not tmp then
55496: LD_VAR 0 2
55500: NOT
55501: IFFALSE 55505
// exit ;
55503: GO 55534
// for i in tmp do
55505: LD_ADDR_VAR 0 1
55509: PUSH
55510: LD_VAR 0 2
55514: PUSH
55515: FOR_IN
55516: IFFALSE 55532
// SetBLevel ( i , 10 ) ;
55518: LD_VAR 0 1
55522: PPUSH
55523: LD_INT 10
55525: PPUSH
55526: CALL_OW 241
55530: GO 55515
55532: POP
55533: POP
// end ;
55534: PPOPN 2
55536: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55537: LD_EXP 56
55541: PUSH
55542: LD_EXP 73
55546: AND
55547: IFFALSE 55658
55549: GO 55551
55551: DISABLE
55552: LD_INT 0
55554: PPUSH
55555: PPUSH
55556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55557: LD_ADDR_VAR 0 3
55561: PUSH
55562: LD_INT 22
55564: PUSH
55565: LD_OWVAR 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 25
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PPUSH
55588: CALL_OW 69
55592: ST_TO_ADDR
// if not tmp then
55593: LD_VAR 0 3
55597: NOT
55598: IFFALSE 55602
// exit ;
55600: GO 55658
// un := tmp [ rand ( 1 , tmp ) ] ;
55602: LD_ADDR_VAR 0 2
55606: PUSH
55607: LD_VAR 0 3
55611: PUSH
55612: LD_INT 1
55614: PPUSH
55615: LD_VAR 0 3
55619: PPUSH
55620: CALL_OW 12
55624: ARRAY
55625: ST_TO_ADDR
// if Crawls ( un ) then
55626: LD_VAR 0 2
55630: PPUSH
55631: CALL_OW 318
55635: IFFALSE 55646
// ComWalk ( un ) ;
55637: LD_VAR 0 2
55641: PPUSH
55642: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55646: LD_VAR 0 2
55650: PPUSH
55651: LD_INT 5
55653: PPUSH
55654: CALL_OW 336
// end ;
55658: PPOPN 3
55660: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55661: LD_EXP 56
55665: PUSH
55666: LD_EXP 74
55670: AND
55671: PUSH
55672: LD_OWVAR 67
55676: PUSH
55677: LD_INT 4
55679: LESS
55680: AND
55681: IFFALSE 55700
55683: GO 55685
55685: DISABLE
// begin Difficulty := Difficulty + 1 ;
55686: LD_ADDR_OWVAR 67
55690: PUSH
55691: LD_OWVAR 67
55695: PUSH
55696: LD_INT 1
55698: PLUS
55699: ST_TO_ADDR
// end ;
55700: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55701: LD_EXP 56
55705: PUSH
55706: LD_EXP 75
55710: AND
55711: IFFALSE 55814
55713: GO 55715
55715: DISABLE
55716: LD_INT 0
55718: PPUSH
// begin for i := 1 to 5 do
55719: LD_ADDR_VAR 0 1
55723: PUSH
55724: DOUBLE
55725: LD_INT 1
55727: DEC
55728: ST_TO_ADDR
55729: LD_INT 5
55731: PUSH
55732: FOR_TO
55733: IFFALSE 55812
// begin uc_nation := nation_nature ;
55735: LD_ADDR_OWVAR 21
55739: PUSH
55740: LD_INT 0
55742: ST_TO_ADDR
// uc_side := 0 ;
55743: LD_ADDR_OWVAR 20
55747: PUSH
55748: LD_INT 0
55750: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55751: LD_ADDR_OWVAR 29
55755: PUSH
55756: LD_INT 12
55758: PUSH
55759: LD_INT 12
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: ST_TO_ADDR
// hc_agressivity := 20 ;
55766: LD_ADDR_OWVAR 35
55770: PUSH
55771: LD_INT 20
55773: ST_TO_ADDR
// hc_class := class_tiger ;
55774: LD_ADDR_OWVAR 28
55778: PUSH
55779: LD_INT 14
55781: ST_TO_ADDR
// hc_gallery :=  ;
55782: LD_ADDR_OWVAR 33
55786: PUSH
55787: LD_STRING 
55789: ST_TO_ADDR
// hc_name :=  ;
55790: LD_ADDR_OWVAR 26
55794: PUSH
55795: LD_STRING 
55797: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55798: CALL_OW 44
55802: PPUSH
55803: LD_INT 0
55805: PPUSH
55806: CALL_OW 51
// end ;
55810: GO 55732
55812: POP
55813: POP
// end ;
55814: PPOPN 1
55816: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55817: LD_EXP 56
55821: PUSH
55822: LD_EXP 76
55826: AND
55827: IFFALSE 55836
55829: GO 55831
55831: DISABLE
// StreamSibBomb ;
55832: CALL 55837 0 0
55836: END
// export function StreamSibBomb ; var i , x , y ; begin
55837: LD_INT 0
55839: PPUSH
55840: PPUSH
55841: PPUSH
55842: PPUSH
// result := false ;
55843: LD_ADDR_VAR 0 1
55847: PUSH
55848: LD_INT 0
55850: ST_TO_ADDR
// for i := 1 to 16 do
55851: LD_ADDR_VAR 0 2
55855: PUSH
55856: DOUBLE
55857: LD_INT 1
55859: DEC
55860: ST_TO_ADDR
55861: LD_INT 16
55863: PUSH
55864: FOR_TO
55865: IFFALSE 56064
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55867: LD_ADDR_VAR 0 3
55871: PUSH
55872: LD_INT 10
55874: PUSH
55875: LD_INT 20
55877: PUSH
55878: LD_INT 30
55880: PUSH
55881: LD_INT 40
55883: PUSH
55884: LD_INT 50
55886: PUSH
55887: LD_INT 60
55889: PUSH
55890: LD_INT 70
55892: PUSH
55893: LD_INT 80
55895: PUSH
55896: LD_INT 90
55898: PUSH
55899: LD_INT 100
55901: PUSH
55902: LD_INT 110
55904: PUSH
55905: LD_INT 120
55907: PUSH
55908: LD_INT 130
55910: PUSH
55911: LD_INT 140
55913: PUSH
55914: LD_INT 150
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PPUSH
55937: LD_INT 15
55939: PPUSH
55940: CALL_OW 12
55944: ARRAY
55945: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55946: LD_ADDR_VAR 0 4
55950: PUSH
55951: LD_INT 10
55953: PUSH
55954: LD_INT 20
55956: PUSH
55957: LD_INT 30
55959: PUSH
55960: LD_INT 40
55962: PUSH
55963: LD_INT 50
55965: PUSH
55966: LD_INT 60
55968: PUSH
55969: LD_INT 70
55971: PUSH
55972: LD_INT 80
55974: PUSH
55975: LD_INT 90
55977: PUSH
55978: LD_INT 100
55980: PUSH
55981: LD_INT 110
55983: PUSH
55984: LD_INT 120
55986: PUSH
55987: LD_INT 130
55989: PUSH
55990: LD_INT 140
55992: PUSH
55993: LD_INT 150
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PPUSH
56016: LD_INT 15
56018: PPUSH
56019: CALL_OW 12
56023: ARRAY
56024: ST_TO_ADDR
// if ValidHex ( x , y ) then
56025: LD_VAR 0 3
56029: PPUSH
56030: LD_VAR 0 4
56034: PPUSH
56035: CALL_OW 488
56039: IFFALSE 56062
// begin result := [ x , y ] ;
56041: LD_ADDR_VAR 0 1
56045: PUSH
56046: LD_VAR 0 3
56050: PUSH
56051: LD_VAR 0 4
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: ST_TO_ADDR
// break ;
56060: GO 56064
// end ; end ;
56062: GO 55864
56064: POP
56065: POP
// if result then
56066: LD_VAR 0 1
56070: IFFALSE 56130
// begin ToLua ( playSibBomb() ) ;
56072: LD_STRING playSibBomb()
56074: PPUSH
56075: CALL_OW 559
// wait ( 0 0$14 ) ;
56079: LD_INT 490
56081: PPUSH
56082: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56086: LD_VAR 0 1
56090: PUSH
56091: LD_INT 1
56093: ARRAY
56094: PPUSH
56095: LD_VAR 0 1
56099: PUSH
56100: LD_INT 2
56102: ARRAY
56103: PPUSH
56104: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56108: LD_VAR 0 1
56112: PUSH
56113: LD_INT 1
56115: ARRAY
56116: PPUSH
56117: LD_VAR 0 1
56121: PUSH
56122: LD_INT 2
56124: ARRAY
56125: PPUSH
56126: CALL_OW 429
// end ; end ;
56130: LD_VAR 0 1
56134: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56135: LD_EXP 56
56139: PUSH
56140: LD_EXP 78
56144: AND
56145: IFFALSE 56157
56147: GO 56149
56149: DISABLE
// YouLost (  ) ;
56150: LD_STRING 
56152: PPUSH
56153: CALL_OW 104
56157: END
// every 0 0$1 trigger StreamModeActive and sFog do
56158: LD_EXP 56
56162: PUSH
56163: LD_EXP 77
56167: AND
56168: IFFALSE 56182
56170: GO 56172
56172: DISABLE
// FogOff ( your_side ) ;
56173: LD_OWVAR 2
56177: PPUSH
56178: CALL_OW 344
56182: END
// every 0 0$1 trigger StreamModeActive and sSun do
56183: LD_EXP 56
56187: PUSH
56188: LD_EXP 79
56192: AND
56193: IFFALSE 56221
56195: GO 56197
56197: DISABLE
// begin solar_recharge_percent := 0 ;
56198: LD_ADDR_OWVAR 79
56202: PUSH
56203: LD_INT 0
56205: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56206: LD_INT 10500
56208: PPUSH
56209: CALL_OW 67
// solar_recharge_percent := 100 ;
56213: LD_ADDR_OWVAR 79
56217: PUSH
56218: LD_INT 100
56220: ST_TO_ADDR
// end ;
56221: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56222: LD_EXP 56
56226: PUSH
56227: LD_EXP 80
56231: AND
56232: IFFALSE 56471
56234: GO 56236
56236: DISABLE
56237: LD_INT 0
56239: PPUSH
56240: PPUSH
56241: PPUSH
// begin tmp := [ ] ;
56242: LD_ADDR_VAR 0 3
56246: PUSH
56247: EMPTY
56248: ST_TO_ADDR
// for i := 1 to 6 do
56249: LD_ADDR_VAR 0 1
56253: PUSH
56254: DOUBLE
56255: LD_INT 1
56257: DEC
56258: ST_TO_ADDR
56259: LD_INT 6
56261: PUSH
56262: FOR_TO
56263: IFFALSE 56368
// begin uc_nation := nation_nature ;
56265: LD_ADDR_OWVAR 21
56269: PUSH
56270: LD_INT 0
56272: ST_TO_ADDR
// uc_side := 0 ;
56273: LD_ADDR_OWVAR 20
56277: PUSH
56278: LD_INT 0
56280: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56281: LD_ADDR_OWVAR 29
56285: PUSH
56286: LD_INT 12
56288: PUSH
56289: LD_INT 12
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: ST_TO_ADDR
// hc_agressivity := 20 ;
56296: LD_ADDR_OWVAR 35
56300: PUSH
56301: LD_INT 20
56303: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56304: LD_ADDR_OWVAR 28
56308: PUSH
56309: LD_INT 17
56311: ST_TO_ADDR
// hc_gallery :=  ;
56312: LD_ADDR_OWVAR 33
56316: PUSH
56317: LD_STRING 
56319: ST_TO_ADDR
// hc_name :=  ;
56320: LD_ADDR_OWVAR 26
56324: PUSH
56325: LD_STRING 
56327: ST_TO_ADDR
// un := CreateHuman ;
56328: LD_ADDR_VAR 0 2
56332: PUSH
56333: CALL_OW 44
56337: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56338: LD_VAR 0 2
56342: PPUSH
56343: LD_INT 1
56345: PPUSH
56346: CALL_OW 51
// tmp := tmp ^ un ;
56350: LD_ADDR_VAR 0 3
56354: PUSH
56355: LD_VAR 0 3
56359: PUSH
56360: LD_VAR 0 2
56364: ADD
56365: ST_TO_ADDR
// end ;
56366: GO 56262
56368: POP
56369: POP
// repeat wait ( 0 0$1 ) ;
56370: LD_INT 35
56372: PPUSH
56373: CALL_OW 67
// for un in tmp do
56377: LD_ADDR_VAR 0 2
56381: PUSH
56382: LD_VAR 0 3
56386: PUSH
56387: FOR_IN
56388: IFFALSE 56462
// begin if IsDead ( un ) then
56390: LD_VAR 0 2
56394: PPUSH
56395: CALL_OW 301
56399: IFFALSE 56419
// begin tmp := tmp diff un ;
56401: LD_ADDR_VAR 0 3
56405: PUSH
56406: LD_VAR 0 3
56410: PUSH
56411: LD_VAR 0 2
56415: DIFF
56416: ST_TO_ADDR
// continue ;
56417: GO 56387
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56419: LD_VAR 0 2
56423: PPUSH
56424: LD_INT 3
56426: PUSH
56427: LD_INT 22
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PPUSH
56441: CALL_OW 69
56445: PPUSH
56446: LD_VAR 0 2
56450: PPUSH
56451: CALL_OW 74
56455: PPUSH
56456: CALL_OW 115
// end ;
56460: GO 56387
56462: POP
56463: POP
// until not tmp ;
56464: LD_VAR 0 3
56468: NOT
56469: IFFALSE 56370
// end ;
56471: PPOPN 3
56473: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56474: LD_EXP 56
56478: PUSH
56479: LD_EXP 81
56483: AND
56484: IFFALSE 56538
56486: GO 56488
56488: DISABLE
// begin ToLua ( displayTroll(); ) ;
56489: LD_STRING displayTroll();
56491: PPUSH
56492: CALL_OW 559
// wait ( 3 3$00 ) ;
56496: LD_INT 6300
56498: PPUSH
56499: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56503: LD_STRING hideTroll();
56505: PPUSH
56506: CALL_OW 559
// wait ( 1 1$00 ) ;
56510: LD_INT 2100
56512: PPUSH
56513: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56517: LD_STRING displayTroll();
56519: PPUSH
56520: CALL_OW 559
// wait ( 1 1$00 ) ;
56524: LD_INT 2100
56526: PPUSH
56527: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56531: LD_STRING hideTroll();
56533: PPUSH
56534: CALL_OW 559
// end ;
56538: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56539: LD_EXP 56
56543: PUSH
56544: LD_EXP 82
56548: AND
56549: IFFALSE 56612
56551: GO 56553
56553: DISABLE
56554: LD_INT 0
56556: PPUSH
// begin p := 0 ;
56557: LD_ADDR_VAR 0 1
56561: PUSH
56562: LD_INT 0
56564: ST_TO_ADDR
// repeat game_speed := 1 ;
56565: LD_ADDR_OWVAR 65
56569: PUSH
56570: LD_INT 1
56572: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56573: LD_INT 35
56575: PPUSH
56576: CALL_OW 67
// p := p + 1 ;
56580: LD_ADDR_VAR 0 1
56584: PUSH
56585: LD_VAR 0 1
56589: PUSH
56590: LD_INT 1
56592: PLUS
56593: ST_TO_ADDR
// until p >= 60 ;
56594: LD_VAR 0 1
56598: PUSH
56599: LD_INT 60
56601: GREATEREQUAL
56602: IFFALSE 56565
// game_speed := 4 ;
56604: LD_ADDR_OWVAR 65
56608: PUSH
56609: LD_INT 4
56611: ST_TO_ADDR
// end ;
56612: PPOPN 1
56614: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56615: LD_EXP 56
56619: PUSH
56620: LD_EXP 83
56624: AND
56625: IFFALSE 56771
56627: GO 56629
56629: DISABLE
56630: LD_INT 0
56632: PPUSH
56633: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56634: LD_ADDR_VAR 0 1
56638: PUSH
56639: LD_INT 22
56641: PUSH
56642: LD_OWVAR 2
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 30
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 30
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PPUSH
56683: CALL_OW 69
56687: ST_TO_ADDR
// if not depot then
56688: LD_VAR 0 1
56692: NOT
56693: IFFALSE 56697
// exit ;
56695: GO 56771
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56697: LD_ADDR_VAR 0 2
56701: PUSH
56702: LD_VAR 0 1
56706: PUSH
56707: LD_INT 1
56709: PPUSH
56710: LD_VAR 0 1
56714: PPUSH
56715: CALL_OW 12
56719: ARRAY
56720: PPUSH
56721: CALL_OW 274
56725: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56726: LD_VAR 0 2
56730: PPUSH
56731: LD_INT 1
56733: PPUSH
56734: LD_INT 0
56736: PPUSH
56737: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56741: LD_VAR 0 2
56745: PPUSH
56746: LD_INT 2
56748: PPUSH
56749: LD_INT 0
56751: PPUSH
56752: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56756: LD_VAR 0 2
56760: PPUSH
56761: LD_INT 3
56763: PPUSH
56764: LD_INT 0
56766: PPUSH
56767: CALL_OW 277
// end ;
56771: PPOPN 2
56773: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56774: LD_EXP 56
56778: PUSH
56779: LD_EXP 84
56783: AND
56784: IFFALSE 56881
56786: GO 56788
56788: DISABLE
56789: LD_INT 0
56791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56792: LD_ADDR_VAR 0 1
56796: PUSH
56797: LD_INT 22
56799: PUSH
56800: LD_OWVAR 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 21
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 3
56821: PUSH
56822: LD_INT 23
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: PPUSH
56841: CALL_OW 69
56845: ST_TO_ADDR
// if not tmp then
56846: LD_VAR 0 1
56850: NOT
56851: IFFALSE 56855
// exit ;
56853: GO 56881
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56855: LD_VAR 0 1
56859: PUSH
56860: LD_INT 1
56862: PPUSH
56863: LD_VAR 0 1
56867: PPUSH
56868: CALL_OW 12
56872: ARRAY
56873: PPUSH
56874: LD_INT 200
56876: PPUSH
56877: CALL_OW 234
// end ;
56881: PPOPN 1
56883: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56884: LD_EXP 56
56888: PUSH
56889: LD_EXP 85
56893: AND
56894: IFFALSE 56973
56896: GO 56898
56898: DISABLE
56899: LD_INT 0
56901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56902: LD_ADDR_VAR 0 1
56906: PUSH
56907: LD_INT 22
56909: PUSH
56910: LD_OWVAR 2
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 21
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PPUSH
56933: CALL_OW 69
56937: ST_TO_ADDR
// if not tmp then
56938: LD_VAR 0 1
56942: NOT
56943: IFFALSE 56947
// exit ;
56945: GO 56973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56947: LD_VAR 0 1
56951: PUSH
56952: LD_INT 1
56954: PPUSH
56955: LD_VAR 0 1
56959: PPUSH
56960: CALL_OW 12
56964: ARRAY
56965: PPUSH
56966: LD_INT 60
56968: PPUSH
56969: CALL_OW 234
// end ;
56973: PPOPN 1
56975: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56976: LD_EXP 56
56980: PUSH
56981: LD_EXP 86
56985: AND
56986: IFFALSE 57085
56988: GO 56990
56990: DISABLE
56991: LD_INT 0
56993: PPUSH
56994: PPUSH
// begin enable ;
56995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56996: LD_ADDR_VAR 0 1
57000: PUSH
57001: LD_INT 22
57003: PUSH
57004: LD_OWVAR 2
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 61
57015: PUSH
57016: EMPTY
57017: LIST
57018: PUSH
57019: LD_INT 33
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: LIST
57033: PPUSH
57034: CALL_OW 69
57038: ST_TO_ADDR
// if not tmp then
57039: LD_VAR 0 1
57043: NOT
57044: IFFALSE 57048
// exit ;
57046: GO 57085
// for i in tmp do
57048: LD_ADDR_VAR 0 2
57052: PUSH
57053: LD_VAR 0 1
57057: PUSH
57058: FOR_IN
57059: IFFALSE 57083
// if IsControledBy ( i ) then
57061: LD_VAR 0 2
57065: PPUSH
57066: CALL_OW 312
57070: IFFALSE 57081
// ComUnlink ( i ) ;
57072: LD_VAR 0 2
57076: PPUSH
57077: CALL_OW 136
57081: GO 57058
57083: POP
57084: POP
// end ;
57085: PPOPN 2
57087: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57088: LD_EXP 56
57092: PUSH
57093: LD_EXP 87
57097: AND
57098: IFFALSE 57238
57100: GO 57102
57102: DISABLE
57103: LD_INT 0
57105: PPUSH
57106: PPUSH
// begin ToLua ( displayPowell(); ) ;
57107: LD_STRING displayPowell();
57109: PPUSH
57110: CALL_OW 559
// uc_side := 0 ;
57114: LD_ADDR_OWVAR 20
57118: PUSH
57119: LD_INT 0
57121: ST_TO_ADDR
// uc_nation := 2 ;
57122: LD_ADDR_OWVAR 21
57126: PUSH
57127: LD_INT 2
57129: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57130: LD_ADDR_OWVAR 37
57134: PUSH
57135: LD_INT 14
57137: ST_TO_ADDR
// vc_engine := engine_siberite ;
57138: LD_ADDR_OWVAR 39
57142: PUSH
57143: LD_INT 3
57145: ST_TO_ADDR
// vc_control := control_apeman ;
57146: LD_ADDR_OWVAR 38
57150: PUSH
57151: LD_INT 5
57153: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57154: LD_ADDR_OWVAR 40
57158: PUSH
57159: LD_INT 29
57161: ST_TO_ADDR
// un := CreateVehicle ;
57162: LD_ADDR_VAR 0 2
57166: PUSH
57167: CALL_OW 45
57171: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57172: LD_VAR 0 2
57176: PPUSH
57177: LD_INT 1
57179: PPUSH
57180: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57184: LD_INT 35
57186: PPUSH
57187: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57191: LD_VAR 0 2
57195: PPUSH
57196: LD_INT 22
57198: PUSH
57199: LD_OWVAR 2
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PPUSH
57208: CALL_OW 69
57212: PPUSH
57213: LD_VAR 0 2
57217: PPUSH
57218: CALL_OW 74
57222: PPUSH
57223: CALL_OW 115
// until IsDead ( un ) ;
57227: LD_VAR 0 2
57231: PPUSH
57232: CALL_OW 301
57236: IFFALSE 57184
// end ;
57238: PPOPN 2
57240: END
// every 0 0$1 trigger StreamModeActive and sStu do
57241: LD_EXP 56
57245: PUSH
57246: LD_EXP 95
57250: AND
57251: IFFALSE 57267
57253: GO 57255
57255: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57256: LD_STRING displayStucuk();
57258: PPUSH
57259: CALL_OW 559
// ResetFog ;
57263: CALL_OW 335
// end ;
57267: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57268: LD_EXP 56
57272: PUSH
57273: LD_EXP 88
57277: AND
57278: IFFALSE 57419
57280: GO 57282
57282: DISABLE
57283: LD_INT 0
57285: PPUSH
57286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57287: LD_ADDR_VAR 0 2
57291: PUSH
57292: LD_INT 22
57294: PUSH
57295: LD_OWVAR 2
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 21
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PPUSH
57318: CALL_OW 69
57322: ST_TO_ADDR
// if not tmp then
57323: LD_VAR 0 2
57327: NOT
57328: IFFALSE 57332
// exit ;
57330: GO 57419
// un := tmp [ rand ( 1 , tmp ) ] ;
57332: LD_ADDR_VAR 0 1
57336: PUSH
57337: LD_VAR 0 2
57341: PUSH
57342: LD_INT 1
57344: PPUSH
57345: LD_VAR 0 2
57349: PPUSH
57350: CALL_OW 12
57354: ARRAY
57355: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57356: LD_VAR 0 1
57360: PPUSH
57361: LD_INT 0
57363: PPUSH
57364: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57368: LD_VAR 0 1
57372: PPUSH
57373: LD_OWVAR 3
57377: PUSH
57378: LD_VAR 0 1
57382: DIFF
57383: PPUSH
57384: LD_VAR 0 1
57388: PPUSH
57389: CALL_OW 74
57393: PPUSH
57394: CALL_OW 115
// wait ( 0 0$20 ) ;
57398: LD_INT 700
57400: PPUSH
57401: CALL_OW 67
// SetSide ( un , your_side ) ;
57405: LD_VAR 0 1
57409: PPUSH
57410: LD_OWVAR 2
57414: PPUSH
57415: CALL_OW 235
// end ;
57419: PPOPN 2
57421: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57422: LD_EXP 56
57426: PUSH
57427: LD_EXP 89
57431: AND
57432: IFFALSE 57538
57434: GO 57436
57436: DISABLE
57437: LD_INT 0
57439: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57440: LD_ADDR_VAR 0 1
57444: PUSH
57445: LD_INT 22
57447: PUSH
57448: LD_OWVAR 2
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 30
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 30
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PPUSH
57489: CALL_OW 69
57493: ST_TO_ADDR
// if not depot then
57494: LD_VAR 0 1
57498: NOT
57499: IFFALSE 57503
// exit ;
57501: GO 57538
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57503: LD_VAR 0 1
57507: PUSH
57508: LD_INT 1
57510: ARRAY
57511: PPUSH
57512: CALL_OW 250
57516: PPUSH
57517: LD_VAR 0 1
57521: PUSH
57522: LD_INT 1
57524: ARRAY
57525: PPUSH
57526: CALL_OW 251
57530: PPUSH
57531: LD_INT 70
57533: PPUSH
57534: CALL_OW 495
// end ;
57538: PPOPN 1
57540: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57541: LD_EXP 56
57545: PUSH
57546: LD_EXP 90
57550: AND
57551: IFFALSE 57762
57553: GO 57555
57555: DISABLE
57556: LD_INT 0
57558: PPUSH
57559: PPUSH
57560: PPUSH
57561: PPUSH
57562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57563: LD_ADDR_VAR 0 5
57567: PUSH
57568: LD_INT 22
57570: PUSH
57571: LD_OWVAR 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 21
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PPUSH
57594: CALL_OW 69
57598: ST_TO_ADDR
// if not tmp then
57599: LD_VAR 0 5
57603: NOT
57604: IFFALSE 57608
// exit ;
57606: GO 57762
// for i in tmp do
57608: LD_ADDR_VAR 0 1
57612: PUSH
57613: LD_VAR 0 5
57617: PUSH
57618: FOR_IN
57619: IFFALSE 57760
// begin d := rand ( 0 , 5 ) ;
57621: LD_ADDR_VAR 0 4
57625: PUSH
57626: LD_INT 0
57628: PPUSH
57629: LD_INT 5
57631: PPUSH
57632: CALL_OW 12
57636: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57637: LD_ADDR_VAR 0 2
57641: PUSH
57642: LD_VAR 0 1
57646: PPUSH
57647: CALL_OW 250
57651: PPUSH
57652: LD_VAR 0 4
57656: PPUSH
57657: LD_INT 3
57659: PPUSH
57660: LD_INT 12
57662: PPUSH
57663: CALL_OW 12
57667: PPUSH
57668: CALL_OW 272
57672: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57673: LD_ADDR_VAR 0 3
57677: PUSH
57678: LD_VAR 0 1
57682: PPUSH
57683: CALL_OW 251
57687: PPUSH
57688: LD_VAR 0 4
57692: PPUSH
57693: LD_INT 3
57695: PPUSH
57696: LD_INT 12
57698: PPUSH
57699: CALL_OW 12
57703: PPUSH
57704: CALL_OW 273
57708: ST_TO_ADDR
// if ValidHex ( x , y ) then
57709: LD_VAR 0 2
57713: PPUSH
57714: LD_VAR 0 3
57718: PPUSH
57719: CALL_OW 488
57723: IFFALSE 57758
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57725: LD_VAR 0 1
57729: PPUSH
57730: LD_VAR 0 2
57734: PPUSH
57735: LD_VAR 0 3
57739: PPUSH
57740: LD_INT 3
57742: PPUSH
57743: LD_INT 6
57745: PPUSH
57746: CALL_OW 12
57750: PPUSH
57751: LD_INT 1
57753: PPUSH
57754: CALL_OW 483
// end ;
57758: GO 57618
57760: POP
57761: POP
// end ;
57762: PPOPN 5
57764: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57765: LD_EXP 56
57769: PUSH
57770: LD_EXP 91
57774: AND
57775: IFFALSE 57869
57777: GO 57779
57779: DISABLE
57780: LD_INT 0
57782: PPUSH
57783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57784: LD_ADDR_VAR 0 2
57788: PUSH
57789: LD_INT 22
57791: PUSH
57792: LD_OWVAR 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 32
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 21
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: LIST
57825: PPUSH
57826: CALL_OW 69
57830: ST_TO_ADDR
// if not tmp then
57831: LD_VAR 0 2
57835: NOT
57836: IFFALSE 57840
// exit ;
57838: GO 57869
// for i in tmp do
57840: LD_ADDR_VAR 0 1
57844: PUSH
57845: LD_VAR 0 2
57849: PUSH
57850: FOR_IN
57851: IFFALSE 57867
// SetFuel ( i , 0 ) ;
57853: LD_VAR 0 1
57857: PPUSH
57858: LD_INT 0
57860: PPUSH
57861: CALL_OW 240
57865: GO 57850
57867: POP
57868: POP
// end ;
57869: PPOPN 2
57871: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57872: LD_EXP 56
57876: PUSH
57877: LD_EXP 92
57881: AND
57882: IFFALSE 57948
57884: GO 57886
57886: DISABLE
57887: LD_INT 0
57889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57890: LD_ADDR_VAR 0 1
57894: PUSH
57895: LD_INT 22
57897: PUSH
57898: LD_OWVAR 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 30
57909: PUSH
57910: LD_INT 29
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PPUSH
57921: CALL_OW 69
57925: ST_TO_ADDR
// if not tmp then
57926: LD_VAR 0 1
57930: NOT
57931: IFFALSE 57935
// exit ;
57933: GO 57948
// DestroyUnit ( tmp [ 1 ] ) ;
57935: LD_VAR 0 1
57939: PUSH
57940: LD_INT 1
57942: ARRAY
57943: PPUSH
57944: CALL_OW 65
// end ;
57948: PPOPN 1
57950: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57951: LD_EXP 56
57955: PUSH
57956: LD_EXP 94
57960: AND
57961: IFFALSE 58090
57963: GO 57965
57965: DISABLE
57966: LD_INT 0
57968: PPUSH
// begin uc_side := 0 ;
57969: LD_ADDR_OWVAR 20
57973: PUSH
57974: LD_INT 0
57976: ST_TO_ADDR
// uc_nation := nation_arabian ;
57977: LD_ADDR_OWVAR 21
57981: PUSH
57982: LD_INT 2
57984: ST_TO_ADDR
// hc_gallery :=  ;
57985: LD_ADDR_OWVAR 33
57989: PUSH
57990: LD_STRING 
57992: ST_TO_ADDR
// hc_name :=  ;
57993: LD_ADDR_OWVAR 26
57997: PUSH
57998: LD_STRING 
58000: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58001: LD_INT 1
58003: PPUSH
58004: LD_INT 11
58006: PPUSH
58007: LD_INT 10
58009: PPUSH
58010: CALL_OW 380
// un := CreateHuman ;
58014: LD_ADDR_VAR 0 1
58018: PUSH
58019: CALL_OW 44
58023: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58024: LD_VAR 0 1
58028: PPUSH
58029: LD_INT 1
58031: PPUSH
58032: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58036: LD_INT 35
58038: PPUSH
58039: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58043: LD_VAR 0 1
58047: PPUSH
58048: LD_INT 22
58050: PUSH
58051: LD_OWVAR 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PPUSH
58060: CALL_OW 69
58064: PPUSH
58065: LD_VAR 0 1
58069: PPUSH
58070: CALL_OW 74
58074: PPUSH
58075: CALL_OW 115
// until IsDead ( un ) ;
58079: LD_VAR 0 1
58083: PPUSH
58084: CALL_OW 301
58088: IFFALSE 58036
// end ;
58090: PPOPN 1
58092: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58093: LD_EXP 56
58097: PUSH
58098: LD_EXP 96
58102: AND
58103: IFFALSE 58115
58105: GO 58107
58107: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58108: LD_STRING earthquake(getX(game), 0, 32)
58110: PPUSH
58111: CALL_OW 559
58115: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58116: LD_EXP 56
58120: PUSH
58121: LD_EXP 97
58125: AND
58126: IFFALSE 58217
58128: GO 58130
58130: DISABLE
58131: LD_INT 0
58133: PPUSH
// begin enable ;
58134: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58135: LD_ADDR_VAR 0 1
58139: PUSH
58140: LD_INT 22
58142: PUSH
58143: LD_OWVAR 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 21
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 33
58164: PUSH
58165: LD_INT 3
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: PPUSH
58177: CALL_OW 69
58181: ST_TO_ADDR
// if not tmp then
58182: LD_VAR 0 1
58186: NOT
58187: IFFALSE 58191
// exit ;
58189: GO 58217
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58191: LD_VAR 0 1
58195: PUSH
58196: LD_INT 1
58198: PPUSH
58199: LD_VAR 0 1
58203: PPUSH
58204: CALL_OW 12
58208: ARRAY
58209: PPUSH
58210: LD_INT 1
58212: PPUSH
58213: CALL_OW 234
// end ;
58217: PPOPN 1
58219: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58220: LD_EXP 56
58224: PUSH
58225: LD_EXP 98
58229: AND
58230: IFFALSE 58371
58232: GO 58234
58234: DISABLE
58235: LD_INT 0
58237: PPUSH
58238: PPUSH
58239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58240: LD_ADDR_VAR 0 3
58244: PUSH
58245: LD_INT 22
58247: PUSH
58248: LD_OWVAR 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 25
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PPUSH
58271: CALL_OW 69
58275: ST_TO_ADDR
// if not tmp then
58276: LD_VAR 0 3
58280: NOT
58281: IFFALSE 58285
// exit ;
58283: GO 58371
// un := tmp [ rand ( 1 , tmp ) ] ;
58285: LD_ADDR_VAR 0 2
58289: PUSH
58290: LD_VAR 0 3
58294: PUSH
58295: LD_INT 1
58297: PPUSH
58298: LD_VAR 0 3
58302: PPUSH
58303: CALL_OW 12
58307: ARRAY
58308: ST_TO_ADDR
// if Crawls ( un ) then
58309: LD_VAR 0 2
58313: PPUSH
58314: CALL_OW 318
58318: IFFALSE 58329
// ComWalk ( un ) ;
58320: LD_VAR 0 2
58324: PPUSH
58325: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58329: LD_VAR 0 2
58333: PPUSH
58334: LD_INT 9
58336: PPUSH
58337: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58341: LD_INT 28
58343: PPUSH
58344: LD_OWVAR 2
58348: PPUSH
58349: LD_INT 2
58351: PPUSH
58352: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58356: LD_INT 29
58358: PPUSH
58359: LD_OWVAR 2
58363: PPUSH
58364: LD_INT 2
58366: PPUSH
58367: CALL_OW 322
// end ;
58371: PPOPN 3
58373: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58374: LD_EXP 56
58378: PUSH
58379: LD_EXP 99
58383: AND
58384: IFFALSE 58495
58386: GO 58388
58388: DISABLE
58389: LD_INT 0
58391: PPUSH
58392: PPUSH
58393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58394: LD_ADDR_VAR 0 3
58398: PUSH
58399: LD_INT 22
58401: PUSH
58402: LD_OWVAR 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 25
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PPUSH
58425: CALL_OW 69
58429: ST_TO_ADDR
// if not tmp then
58430: LD_VAR 0 3
58434: NOT
58435: IFFALSE 58439
// exit ;
58437: GO 58495
// un := tmp [ rand ( 1 , tmp ) ] ;
58439: LD_ADDR_VAR 0 2
58443: PUSH
58444: LD_VAR 0 3
58448: PUSH
58449: LD_INT 1
58451: PPUSH
58452: LD_VAR 0 3
58456: PPUSH
58457: CALL_OW 12
58461: ARRAY
58462: ST_TO_ADDR
// if Crawls ( un ) then
58463: LD_VAR 0 2
58467: PPUSH
58468: CALL_OW 318
58472: IFFALSE 58483
// ComWalk ( un ) ;
58474: LD_VAR 0 2
58478: PPUSH
58479: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58483: LD_VAR 0 2
58487: PPUSH
58488: LD_INT 8
58490: PPUSH
58491: CALL_OW 336
// end ;
58495: PPOPN 3
58497: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58498: LD_EXP 56
58502: PUSH
58503: LD_EXP 100
58507: AND
58508: IFFALSE 58652
58510: GO 58512
58512: DISABLE
58513: LD_INT 0
58515: PPUSH
58516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58517: LD_ADDR_VAR 0 2
58521: PUSH
58522: LD_INT 22
58524: PUSH
58525: LD_OWVAR 2
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 21
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: LD_INT 34
58549: PUSH
58550: LD_INT 12
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 34
58559: PUSH
58560: LD_INT 51
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 34
58569: PUSH
58570: LD_INT 32
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: PPUSH
58588: CALL_OW 69
58592: ST_TO_ADDR
// if not tmp then
58593: LD_VAR 0 2
58597: NOT
58598: IFFALSE 58602
// exit ;
58600: GO 58652
// for i in tmp do
58602: LD_ADDR_VAR 0 1
58606: PUSH
58607: LD_VAR 0 2
58611: PUSH
58612: FOR_IN
58613: IFFALSE 58650
// if GetCargo ( i , mat_artifact ) = 0 then
58615: LD_VAR 0 1
58619: PPUSH
58620: LD_INT 4
58622: PPUSH
58623: CALL_OW 289
58627: PUSH
58628: LD_INT 0
58630: EQUAL
58631: IFFALSE 58648
// SetCargo ( i , mat_siberit , 100 ) ;
58633: LD_VAR 0 1
58637: PPUSH
58638: LD_INT 3
58640: PPUSH
58641: LD_INT 100
58643: PPUSH
58644: CALL_OW 290
58648: GO 58612
58650: POP
58651: POP
// end ;
58652: PPOPN 2
58654: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58655: LD_EXP 56
58659: PUSH
58660: LD_EXP 101
58664: AND
58665: IFFALSE 58848
58667: GO 58669
58669: DISABLE
58670: LD_INT 0
58672: PPUSH
58673: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58674: LD_ADDR_VAR 0 2
58678: PUSH
58679: LD_INT 22
58681: PUSH
58682: LD_OWVAR 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PPUSH
58691: CALL_OW 69
58695: ST_TO_ADDR
// if not tmp then
58696: LD_VAR 0 2
58700: NOT
58701: IFFALSE 58705
// exit ;
58703: GO 58848
// for i := 1 to 2 do
58705: LD_ADDR_VAR 0 1
58709: PUSH
58710: DOUBLE
58711: LD_INT 1
58713: DEC
58714: ST_TO_ADDR
58715: LD_INT 2
58717: PUSH
58718: FOR_TO
58719: IFFALSE 58846
// begin uc_side := your_side ;
58721: LD_ADDR_OWVAR 20
58725: PUSH
58726: LD_OWVAR 2
58730: ST_TO_ADDR
// uc_nation := nation_american ;
58731: LD_ADDR_OWVAR 21
58735: PUSH
58736: LD_INT 1
58738: ST_TO_ADDR
// vc_chassis := us_morphling ;
58739: LD_ADDR_OWVAR 37
58743: PUSH
58744: LD_INT 5
58746: ST_TO_ADDR
// vc_engine := engine_siberite ;
58747: LD_ADDR_OWVAR 39
58751: PUSH
58752: LD_INT 3
58754: ST_TO_ADDR
// vc_control := control_computer ;
58755: LD_ADDR_OWVAR 38
58759: PUSH
58760: LD_INT 3
58762: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58763: LD_ADDR_OWVAR 40
58767: PUSH
58768: LD_INT 10
58770: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58771: LD_VAR 0 2
58775: PUSH
58776: LD_INT 1
58778: ARRAY
58779: PPUSH
58780: CALL_OW 310
58784: NOT
58785: IFFALSE 58832
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58787: CALL_OW 45
58791: PPUSH
58792: LD_VAR 0 2
58796: PUSH
58797: LD_INT 1
58799: ARRAY
58800: PPUSH
58801: CALL_OW 250
58805: PPUSH
58806: LD_VAR 0 2
58810: PUSH
58811: LD_INT 1
58813: ARRAY
58814: PPUSH
58815: CALL_OW 251
58819: PPUSH
58820: LD_INT 12
58822: PPUSH
58823: LD_INT 1
58825: PPUSH
58826: CALL_OW 50
58830: GO 58844
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58832: CALL_OW 45
58836: PPUSH
58837: LD_INT 1
58839: PPUSH
58840: CALL_OW 51
// end ;
58844: GO 58718
58846: POP
58847: POP
// end ;
58848: PPOPN 2
58850: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58851: LD_EXP 56
58855: PUSH
58856: LD_EXP 102
58860: AND
58861: IFFALSE 59083
58863: GO 58865
58865: DISABLE
58866: LD_INT 0
58868: PPUSH
58869: PPUSH
58870: PPUSH
58871: PPUSH
58872: PPUSH
58873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58874: LD_ADDR_VAR 0 6
58878: PUSH
58879: LD_INT 22
58881: PUSH
58882: LD_OWVAR 2
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 21
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 3
58903: PUSH
58904: LD_INT 23
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: PPUSH
58923: CALL_OW 69
58927: ST_TO_ADDR
// if not tmp then
58928: LD_VAR 0 6
58932: NOT
58933: IFFALSE 58937
// exit ;
58935: GO 59083
// s1 := rand ( 1 , 4 ) ;
58937: LD_ADDR_VAR 0 2
58941: PUSH
58942: LD_INT 1
58944: PPUSH
58945: LD_INT 4
58947: PPUSH
58948: CALL_OW 12
58952: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58953: LD_ADDR_VAR 0 4
58957: PUSH
58958: LD_VAR 0 6
58962: PUSH
58963: LD_INT 1
58965: ARRAY
58966: PPUSH
58967: LD_VAR 0 2
58971: PPUSH
58972: CALL_OW 259
58976: ST_TO_ADDR
// if s1 = 1 then
58977: LD_VAR 0 2
58981: PUSH
58982: LD_INT 1
58984: EQUAL
58985: IFFALSE 59005
// s2 := rand ( 2 , 4 ) else
58987: LD_ADDR_VAR 0 3
58991: PUSH
58992: LD_INT 2
58994: PPUSH
58995: LD_INT 4
58997: PPUSH
58998: CALL_OW 12
59002: ST_TO_ADDR
59003: GO 59013
// s2 := 1 ;
59005: LD_ADDR_VAR 0 3
59009: PUSH
59010: LD_INT 1
59012: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59013: LD_ADDR_VAR 0 5
59017: PUSH
59018: LD_VAR 0 6
59022: PUSH
59023: LD_INT 1
59025: ARRAY
59026: PPUSH
59027: LD_VAR 0 3
59031: PPUSH
59032: CALL_OW 259
59036: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59037: LD_VAR 0 6
59041: PUSH
59042: LD_INT 1
59044: ARRAY
59045: PPUSH
59046: LD_VAR 0 2
59050: PPUSH
59051: LD_VAR 0 5
59055: PPUSH
59056: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59060: LD_VAR 0 6
59064: PUSH
59065: LD_INT 1
59067: ARRAY
59068: PPUSH
59069: LD_VAR 0 3
59073: PPUSH
59074: LD_VAR 0 4
59078: PPUSH
59079: CALL_OW 237
// end ;
59083: PPOPN 6
59085: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59086: LD_EXP 56
59090: PUSH
59091: LD_EXP 103
59095: AND
59096: IFFALSE 59175
59098: GO 59100
59100: DISABLE
59101: LD_INT 0
59103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59104: LD_ADDR_VAR 0 1
59108: PUSH
59109: LD_INT 22
59111: PUSH
59112: LD_OWVAR 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 30
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PPUSH
59135: CALL_OW 69
59139: ST_TO_ADDR
// if not tmp then
59140: LD_VAR 0 1
59144: NOT
59145: IFFALSE 59149
// exit ;
59147: GO 59175
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59149: LD_VAR 0 1
59153: PUSH
59154: LD_INT 1
59156: PPUSH
59157: LD_VAR 0 1
59161: PPUSH
59162: CALL_OW 12
59166: ARRAY
59167: PPUSH
59168: LD_INT 1
59170: PPUSH
59171: CALL_OW 234
// end ;
59175: PPOPN 1
59177: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59178: LD_EXP 56
59182: PUSH
59183: LD_EXP 104
59187: AND
59188: IFFALSE 59300
59190: GO 59192
59192: DISABLE
59193: LD_INT 0
59195: PPUSH
59196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59197: LD_ADDR_VAR 0 2
59201: PUSH
59202: LD_INT 22
59204: PUSH
59205: LD_OWVAR 2
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: LD_INT 30
59219: PUSH
59220: LD_INT 27
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 30
59229: PUSH
59230: LD_INT 26
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 30
59239: PUSH
59240: LD_INT 28
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PPUSH
59257: CALL_OW 69
59261: ST_TO_ADDR
// if not tmp then
59262: LD_VAR 0 2
59266: NOT
59267: IFFALSE 59271
// exit ;
59269: GO 59300
// for i in tmp do
59271: LD_ADDR_VAR 0 1
59275: PUSH
59276: LD_VAR 0 2
59280: PUSH
59281: FOR_IN
59282: IFFALSE 59298
// SetLives ( i , 1 ) ;
59284: LD_VAR 0 1
59288: PPUSH
59289: LD_INT 1
59291: PPUSH
59292: CALL_OW 234
59296: GO 59281
59298: POP
59299: POP
// end ;
59300: PPOPN 2
59302: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59303: LD_EXP 56
59307: PUSH
59308: LD_EXP 105
59312: AND
59313: IFFALSE 59600
59315: GO 59317
59317: DISABLE
59318: LD_INT 0
59320: PPUSH
59321: PPUSH
59322: PPUSH
// begin i := rand ( 1 , 7 ) ;
59323: LD_ADDR_VAR 0 1
59327: PUSH
59328: LD_INT 1
59330: PPUSH
59331: LD_INT 7
59333: PPUSH
59334: CALL_OW 12
59338: ST_TO_ADDR
// case i of 1 :
59339: LD_VAR 0 1
59343: PUSH
59344: LD_INT 1
59346: DOUBLE
59347: EQUAL
59348: IFTRUE 59352
59350: GO 59362
59352: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59353: LD_STRING earthquake(getX(game), 0, 32)
59355: PPUSH
59356: CALL_OW 559
59360: GO 59600
59362: LD_INT 2
59364: DOUBLE
59365: EQUAL
59366: IFTRUE 59370
59368: GO 59384
59370: POP
// begin ToLua ( displayStucuk(); ) ;
59371: LD_STRING displayStucuk();
59373: PPUSH
59374: CALL_OW 559
// ResetFog ;
59378: CALL_OW 335
// end ; 3 :
59382: GO 59600
59384: LD_INT 3
59386: DOUBLE
59387: EQUAL
59388: IFTRUE 59392
59390: GO 59496
59392: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59393: LD_ADDR_VAR 0 2
59397: PUSH
59398: LD_INT 22
59400: PUSH
59401: LD_OWVAR 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 25
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PPUSH
59424: CALL_OW 69
59428: ST_TO_ADDR
// if not tmp then
59429: LD_VAR 0 2
59433: NOT
59434: IFFALSE 59438
// exit ;
59436: GO 59600
// un := tmp [ rand ( 1 , tmp ) ] ;
59438: LD_ADDR_VAR 0 3
59442: PUSH
59443: LD_VAR 0 2
59447: PUSH
59448: LD_INT 1
59450: PPUSH
59451: LD_VAR 0 2
59455: PPUSH
59456: CALL_OW 12
59460: ARRAY
59461: ST_TO_ADDR
// if Crawls ( un ) then
59462: LD_VAR 0 3
59466: PPUSH
59467: CALL_OW 318
59471: IFFALSE 59482
// ComWalk ( un ) ;
59473: LD_VAR 0 3
59477: PPUSH
59478: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59482: LD_VAR 0 3
59486: PPUSH
59487: LD_INT 8
59489: PPUSH
59490: CALL_OW 336
// end ; 4 :
59494: GO 59600
59496: LD_INT 4
59498: DOUBLE
59499: EQUAL
59500: IFTRUE 59504
59502: GO 59578
59504: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59505: LD_ADDR_VAR 0 2
59509: PUSH
59510: LD_INT 22
59512: PUSH
59513: LD_OWVAR 2
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 30
59524: PUSH
59525: LD_INT 29
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PPUSH
59536: CALL_OW 69
59540: ST_TO_ADDR
// if not tmp then
59541: LD_VAR 0 2
59545: NOT
59546: IFFALSE 59550
// exit ;
59548: GO 59600
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59550: LD_VAR 0 2
59554: PUSH
59555: LD_INT 1
59557: ARRAY
59558: PPUSH
59559: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59563: LD_VAR 0 2
59567: PUSH
59568: LD_INT 1
59570: ARRAY
59571: PPUSH
59572: CALL_OW 65
// end ; 5 .. 7 :
59576: GO 59600
59578: LD_INT 5
59580: DOUBLE
59581: GREATEREQUAL
59582: IFFALSE 59590
59584: LD_INT 7
59586: DOUBLE
59587: LESSEQUAL
59588: IFTRUE 59592
59590: GO 59599
59592: POP
// StreamSibBomb ; end ;
59593: CALL 55837 0 0
59597: GO 59600
59599: POP
// end ;
59600: PPOPN 3
59602: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59603: LD_EXP 56
59607: PUSH
59608: LD_EXP 106
59612: AND
59613: IFFALSE 59769
59615: GO 59617
59617: DISABLE
59618: LD_INT 0
59620: PPUSH
59621: PPUSH
59622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59623: LD_ADDR_VAR 0 2
59627: PUSH
59628: LD_INT 81
59630: PUSH
59631: LD_OWVAR 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 21
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 21
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: LIST
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PPUSH
59672: CALL_OW 69
59676: ST_TO_ADDR
// if not tmp then
59677: LD_VAR 0 2
59681: NOT
59682: IFFALSE 59686
// exit ;
59684: GO 59769
// p := 0 ;
59686: LD_ADDR_VAR 0 3
59690: PUSH
59691: LD_INT 0
59693: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59694: LD_INT 35
59696: PPUSH
59697: CALL_OW 67
// p := p + 1 ;
59701: LD_ADDR_VAR 0 3
59705: PUSH
59706: LD_VAR 0 3
59710: PUSH
59711: LD_INT 1
59713: PLUS
59714: ST_TO_ADDR
// for i in tmp do
59715: LD_ADDR_VAR 0 1
59719: PUSH
59720: LD_VAR 0 2
59724: PUSH
59725: FOR_IN
59726: IFFALSE 59757
// if GetLives ( i ) < 1000 then
59728: LD_VAR 0 1
59732: PPUSH
59733: CALL_OW 256
59737: PUSH
59738: LD_INT 1000
59740: LESS
59741: IFFALSE 59755
// SetLives ( i , 1000 ) ;
59743: LD_VAR 0 1
59747: PPUSH
59748: LD_INT 1000
59750: PPUSH
59751: CALL_OW 234
59755: GO 59725
59757: POP
59758: POP
// until p > 20 ;
59759: LD_VAR 0 3
59763: PUSH
59764: LD_INT 20
59766: GREATER
59767: IFFALSE 59694
// end ;
59769: PPOPN 3
59771: END
// every 0 0$1 trigger StreamModeActive and sTime do
59772: LD_EXP 56
59776: PUSH
59777: LD_EXP 107
59781: AND
59782: IFFALSE 59817
59784: GO 59786
59786: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59787: LD_INT 28
59789: PPUSH
59790: LD_OWVAR 2
59794: PPUSH
59795: LD_INT 2
59797: PPUSH
59798: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59802: LD_INT 30
59804: PPUSH
59805: LD_OWVAR 2
59809: PPUSH
59810: LD_INT 2
59812: PPUSH
59813: CALL_OW 322
// end ;
59817: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59818: LD_EXP 56
59822: PUSH
59823: LD_EXP 108
59827: AND
59828: IFFALSE 59949
59830: GO 59832
59832: DISABLE
59833: LD_INT 0
59835: PPUSH
59836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59837: LD_ADDR_VAR 0 2
59841: PUSH
59842: LD_INT 22
59844: PUSH
59845: LD_OWVAR 2
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 21
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: PUSH
59867: LD_INT 23
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: LIST
59885: PPUSH
59886: CALL_OW 69
59890: ST_TO_ADDR
// if not tmp then
59891: LD_VAR 0 2
59895: NOT
59896: IFFALSE 59900
// exit ;
59898: GO 59949
// for i in tmp do
59900: LD_ADDR_VAR 0 1
59904: PUSH
59905: LD_VAR 0 2
59909: PUSH
59910: FOR_IN
59911: IFFALSE 59947
// begin if Crawls ( i ) then
59913: LD_VAR 0 1
59917: PPUSH
59918: CALL_OW 318
59922: IFFALSE 59933
// ComWalk ( i ) ;
59924: LD_VAR 0 1
59928: PPUSH
59929: CALL_OW 138
// SetClass ( i , 2 ) ;
59933: LD_VAR 0 1
59937: PPUSH
59938: LD_INT 2
59940: PPUSH
59941: CALL_OW 336
// end ;
59945: GO 59910
59947: POP
59948: POP
// end ;
59949: PPOPN 2
59951: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59952: LD_EXP 56
59956: PUSH
59957: LD_EXP 109
59961: AND
59962: IFFALSE 60250
59964: GO 59966
59966: DISABLE
59967: LD_INT 0
59969: PPUSH
59970: PPUSH
59971: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59972: LD_OWVAR 2
59976: PPUSH
59977: LD_INT 9
59979: PPUSH
59980: LD_INT 1
59982: PPUSH
59983: LD_INT 1
59985: PPUSH
59986: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59990: LD_INT 9
59992: PPUSH
59993: LD_OWVAR 2
59997: PPUSH
59998: CALL_OW 343
// uc_side := 9 ;
60002: LD_ADDR_OWVAR 20
60006: PUSH
60007: LD_INT 9
60009: ST_TO_ADDR
// uc_nation := 2 ;
60010: LD_ADDR_OWVAR 21
60014: PUSH
60015: LD_INT 2
60017: ST_TO_ADDR
// hc_name := Dark Warrior ;
60018: LD_ADDR_OWVAR 26
60022: PUSH
60023: LD_STRING Dark Warrior
60025: ST_TO_ADDR
// hc_gallery :=  ;
60026: LD_ADDR_OWVAR 33
60030: PUSH
60031: LD_STRING 
60033: ST_TO_ADDR
// hc_noskilllimit := true ;
60034: LD_ADDR_OWVAR 76
60038: PUSH
60039: LD_INT 1
60041: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60042: LD_ADDR_OWVAR 31
60046: PUSH
60047: LD_INT 30
60049: PUSH
60050: LD_INT 30
60052: PUSH
60053: LD_INT 30
60055: PUSH
60056: LD_INT 30
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: ST_TO_ADDR
// un := CreateHuman ;
60065: LD_ADDR_VAR 0 3
60069: PUSH
60070: CALL_OW 44
60074: ST_TO_ADDR
// hc_noskilllimit := false ;
60075: LD_ADDR_OWVAR 76
60079: PUSH
60080: LD_INT 0
60082: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60083: LD_VAR 0 3
60087: PPUSH
60088: LD_INT 1
60090: PPUSH
60091: CALL_OW 51
// ToLua ( playRanger() ) ;
60095: LD_STRING playRanger()
60097: PPUSH
60098: CALL_OW 559
// p := 0 ;
60102: LD_ADDR_VAR 0 2
60106: PUSH
60107: LD_INT 0
60109: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60110: LD_INT 35
60112: PPUSH
60113: CALL_OW 67
// p := p + 1 ;
60117: LD_ADDR_VAR 0 2
60121: PUSH
60122: LD_VAR 0 2
60126: PUSH
60127: LD_INT 1
60129: PLUS
60130: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60131: LD_VAR 0 3
60135: PPUSH
60136: CALL_OW 256
60140: PUSH
60141: LD_INT 1000
60143: LESS
60144: IFFALSE 60158
// SetLives ( un , 1000 ) ;
60146: LD_VAR 0 3
60150: PPUSH
60151: LD_INT 1000
60153: PPUSH
60154: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60158: LD_VAR 0 3
60162: PPUSH
60163: LD_INT 81
60165: PUSH
60166: LD_OWVAR 2
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 91
60177: PUSH
60178: LD_VAR 0 3
60182: PUSH
60183: LD_INT 30
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: LIST
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PPUSH
60195: CALL_OW 69
60199: PPUSH
60200: LD_VAR 0 3
60204: PPUSH
60205: CALL_OW 74
60209: PPUSH
60210: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60214: LD_VAR 0 2
60218: PUSH
60219: LD_INT 80
60221: GREATER
60222: PUSH
60223: LD_VAR 0 3
60227: PPUSH
60228: CALL_OW 301
60232: OR
60233: IFFALSE 60110
// if un then
60235: LD_VAR 0 3
60239: IFFALSE 60250
// RemoveUnit ( un ) ;
60241: LD_VAR 0 3
60245: PPUSH
60246: CALL_OW 64
// end ;
60250: PPOPN 3
60252: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60253: LD_EXP 110
60257: IFFALSE 60373
60259: GO 60261
60261: DISABLE
60262: LD_INT 0
60264: PPUSH
60265: PPUSH
60266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60267: LD_ADDR_VAR 0 2
60271: PUSH
60272: LD_INT 81
60274: PUSH
60275: LD_OWVAR 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 21
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PPUSH
60298: CALL_OW 69
60302: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60303: LD_STRING playComputer()
60305: PPUSH
60306: CALL_OW 559
// if not tmp then
60310: LD_VAR 0 2
60314: NOT
60315: IFFALSE 60319
// exit ;
60317: GO 60373
// for i in tmp do
60319: LD_ADDR_VAR 0 1
60323: PUSH
60324: LD_VAR 0 2
60328: PUSH
60329: FOR_IN
60330: IFFALSE 60371
// for j := 1 to 4 do
60332: LD_ADDR_VAR 0 3
60336: PUSH
60337: DOUBLE
60338: LD_INT 1
60340: DEC
60341: ST_TO_ADDR
60342: LD_INT 4
60344: PUSH
60345: FOR_TO
60346: IFFALSE 60367
// SetSkill ( i , j , 10 ) ;
60348: LD_VAR 0 1
60352: PPUSH
60353: LD_VAR 0 3
60357: PPUSH
60358: LD_INT 10
60360: PPUSH
60361: CALL_OW 237
60365: GO 60345
60367: POP
60368: POP
60369: GO 60329
60371: POP
60372: POP
// end ;
60373: PPOPN 3
60375: END
// every 0 0$1 trigger s30 do var i , tmp ;
60376: LD_EXP 111
60380: IFFALSE 60449
60382: GO 60384
60384: DISABLE
60385: LD_INT 0
60387: PPUSH
60388: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60389: LD_ADDR_VAR 0 2
60393: PUSH
60394: LD_INT 22
60396: PUSH
60397: LD_OWVAR 2
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PPUSH
60406: CALL_OW 69
60410: ST_TO_ADDR
// if not tmp then
60411: LD_VAR 0 2
60415: NOT
60416: IFFALSE 60420
// exit ;
60418: GO 60449
// for i in tmp do
60420: LD_ADDR_VAR 0 1
60424: PUSH
60425: LD_VAR 0 2
60429: PUSH
60430: FOR_IN
60431: IFFALSE 60447
// SetLives ( i , 300 ) ;
60433: LD_VAR 0 1
60437: PPUSH
60438: LD_INT 300
60440: PPUSH
60441: CALL_OW 234
60445: GO 60430
60447: POP
60448: POP
// end ;
60449: PPOPN 2
60451: END
// every 0 0$1 trigger s60 do var i , tmp ;
60452: LD_EXP 112
60456: IFFALSE 60525
60458: GO 60460
60460: DISABLE
60461: LD_INT 0
60463: PPUSH
60464: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60465: LD_ADDR_VAR 0 2
60469: PUSH
60470: LD_INT 22
60472: PUSH
60473: LD_OWVAR 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PPUSH
60482: CALL_OW 69
60486: ST_TO_ADDR
// if not tmp then
60487: LD_VAR 0 2
60491: NOT
60492: IFFALSE 60496
// exit ;
60494: GO 60525
// for i in tmp do
60496: LD_ADDR_VAR 0 1
60500: PUSH
60501: LD_VAR 0 2
60505: PUSH
60506: FOR_IN
60507: IFFALSE 60523
// SetLives ( i , 600 ) ;
60509: LD_VAR 0 1
60513: PPUSH
60514: LD_INT 600
60516: PPUSH
60517: CALL_OW 234
60521: GO 60506
60523: POP
60524: POP
// end ;
60525: PPOPN 2
60527: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60528: LD_INT 0
60530: PPUSH
// case cmd of 301 :
60531: LD_VAR 0 1
60535: PUSH
60536: LD_INT 301
60538: DOUBLE
60539: EQUAL
60540: IFTRUE 60544
60542: GO 60576
60544: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60545: LD_VAR 0 6
60549: PPUSH
60550: LD_VAR 0 7
60554: PPUSH
60555: LD_VAR 0 8
60559: PPUSH
60560: LD_VAR 0 4
60564: PPUSH
60565: LD_VAR 0 5
60569: PPUSH
60570: CALL 61777 0 5
60574: GO 60697
60576: LD_INT 302
60578: DOUBLE
60579: EQUAL
60580: IFTRUE 60584
60582: GO 60621
60584: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60585: LD_VAR 0 6
60589: PPUSH
60590: LD_VAR 0 7
60594: PPUSH
60595: LD_VAR 0 8
60599: PPUSH
60600: LD_VAR 0 9
60604: PPUSH
60605: LD_VAR 0 4
60609: PPUSH
60610: LD_VAR 0 5
60614: PPUSH
60615: CALL 61868 0 6
60619: GO 60697
60621: LD_INT 303
60623: DOUBLE
60624: EQUAL
60625: IFTRUE 60629
60627: GO 60666
60629: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60630: LD_VAR 0 6
60634: PPUSH
60635: LD_VAR 0 7
60639: PPUSH
60640: LD_VAR 0 8
60644: PPUSH
60645: LD_VAR 0 9
60649: PPUSH
60650: LD_VAR 0 4
60654: PPUSH
60655: LD_VAR 0 5
60659: PPUSH
60660: CALL 60702 0 6
60664: GO 60697
60666: LD_INT 304
60668: DOUBLE
60669: EQUAL
60670: IFTRUE 60674
60672: GO 60696
60674: POP
// hHackTeleport ( unit , x , y ) ; end ;
60675: LD_VAR 0 2
60679: PPUSH
60680: LD_VAR 0 4
60684: PPUSH
60685: LD_VAR 0 5
60689: PPUSH
60690: CALL 62461 0 3
60694: GO 60697
60696: POP
// end ;
60697: LD_VAR 0 12
60701: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60702: LD_INT 0
60704: PPUSH
60705: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60706: LD_VAR 0 1
60710: PUSH
60711: LD_INT 1
60713: LESS
60714: PUSH
60715: LD_VAR 0 1
60719: PUSH
60720: LD_INT 3
60722: GREATER
60723: OR
60724: PUSH
60725: LD_VAR 0 5
60729: PPUSH
60730: LD_VAR 0 6
60734: PPUSH
60735: CALL_OW 428
60739: OR
60740: IFFALSE 60744
// exit ;
60742: GO 61464
// uc_side := your_side ;
60744: LD_ADDR_OWVAR 20
60748: PUSH
60749: LD_OWVAR 2
60753: ST_TO_ADDR
// uc_nation := nation ;
60754: LD_ADDR_OWVAR 21
60758: PUSH
60759: LD_VAR 0 1
60763: ST_TO_ADDR
// bc_level = 1 ;
60764: LD_ADDR_OWVAR 43
60768: PUSH
60769: LD_INT 1
60771: ST_TO_ADDR
// case btype of 1 :
60772: LD_VAR 0 2
60776: PUSH
60777: LD_INT 1
60779: DOUBLE
60780: EQUAL
60781: IFTRUE 60785
60783: GO 60796
60785: POP
// bc_type := b_depot ; 2 :
60786: LD_ADDR_OWVAR 42
60790: PUSH
60791: LD_INT 0
60793: ST_TO_ADDR
60794: GO 61408
60796: LD_INT 2
60798: DOUBLE
60799: EQUAL
60800: IFTRUE 60804
60802: GO 60815
60804: POP
// bc_type := b_warehouse ; 3 :
60805: LD_ADDR_OWVAR 42
60809: PUSH
60810: LD_INT 1
60812: ST_TO_ADDR
60813: GO 61408
60815: LD_INT 3
60817: DOUBLE
60818: EQUAL
60819: IFTRUE 60823
60821: GO 60834
60823: POP
// bc_type := b_lab ; 4 .. 9 :
60824: LD_ADDR_OWVAR 42
60828: PUSH
60829: LD_INT 6
60831: ST_TO_ADDR
60832: GO 61408
60834: LD_INT 4
60836: DOUBLE
60837: GREATEREQUAL
60838: IFFALSE 60846
60840: LD_INT 9
60842: DOUBLE
60843: LESSEQUAL
60844: IFTRUE 60848
60846: GO 60900
60848: POP
// begin bc_type := b_lab_half ;
60849: LD_ADDR_OWVAR 42
60853: PUSH
60854: LD_INT 7
60856: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60857: LD_ADDR_OWVAR 44
60861: PUSH
60862: LD_INT 10
60864: PUSH
60865: LD_INT 11
60867: PUSH
60868: LD_INT 12
60870: PUSH
60871: LD_INT 15
60873: PUSH
60874: LD_INT 14
60876: PUSH
60877: LD_INT 13
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: PUSH
60888: LD_VAR 0 2
60892: PUSH
60893: LD_INT 3
60895: MINUS
60896: ARRAY
60897: ST_TO_ADDR
// end ; 10 .. 13 :
60898: GO 61408
60900: LD_INT 10
60902: DOUBLE
60903: GREATEREQUAL
60904: IFFALSE 60912
60906: LD_INT 13
60908: DOUBLE
60909: LESSEQUAL
60910: IFTRUE 60914
60912: GO 60991
60914: POP
// begin bc_type := b_lab_full ;
60915: LD_ADDR_OWVAR 42
60919: PUSH
60920: LD_INT 8
60922: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60923: LD_ADDR_OWVAR 44
60927: PUSH
60928: LD_INT 10
60930: PUSH
60931: LD_INT 12
60933: PUSH
60934: LD_INT 14
60936: PUSH
60937: LD_INT 13
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: PUSH
60946: LD_VAR 0 2
60950: PUSH
60951: LD_INT 9
60953: MINUS
60954: ARRAY
60955: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60956: LD_ADDR_OWVAR 45
60960: PUSH
60961: LD_INT 11
60963: PUSH
60964: LD_INT 15
60966: PUSH
60967: LD_INT 12
60969: PUSH
60970: LD_INT 15
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: PUSH
60979: LD_VAR 0 2
60983: PUSH
60984: LD_INT 9
60986: MINUS
60987: ARRAY
60988: ST_TO_ADDR
// end ; 14 :
60989: GO 61408
60991: LD_INT 14
60993: DOUBLE
60994: EQUAL
60995: IFTRUE 60999
60997: GO 61010
60999: POP
// bc_type := b_workshop ; 15 :
61000: LD_ADDR_OWVAR 42
61004: PUSH
61005: LD_INT 2
61007: ST_TO_ADDR
61008: GO 61408
61010: LD_INT 15
61012: DOUBLE
61013: EQUAL
61014: IFTRUE 61018
61016: GO 61029
61018: POP
// bc_type := b_factory ; 16 :
61019: LD_ADDR_OWVAR 42
61023: PUSH
61024: LD_INT 3
61026: ST_TO_ADDR
61027: GO 61408
61029: LD_INT 16
61031: DOUBLE
61032: EQUAL
61033: IFTRUE 61037
61035: GO 61048
61037: POP
// bc_type := b_ext_gun ; 17 :
61038: LD_ADDR_OWVAR 42
61042: PUSH
61043: LD_INT 17
61045: ST_TO_ADDR
61046: GO 61408
61048: LD_INT 17
61050: DOUBLE
61051: EQUAL
61052: IFTRUE 61056
61054: GO 61084
61056: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61057: LD_ADDR_OWVAR 42
61061: PUSH
61062: LD_INT 19
61064: PUSH
61065: LD_INT 23
61067: PUSH
61068: LD_INT 19
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: LIST
61075: PUSH
61076: LD_VAR 0 1
61080: ARRAY
61081: ST_TO_ADDR
61082: GO 61408
61084: LD_INT 18
61086: DOUBLE
61087: EQUAL
61088: IFTRUE 61092
61090: GO 61103
61092: POP
// bc_type := b_ext_radar ; 19 :
61093: LD_ADDR_OWVAR 42
61097: PUSH
61098: LD_INT 20
61100: ST_TO_ADDR
61101: GO 61408
61103: LD_INT 19
61105: DOUBLE
61106: EQUAL
61107: IFTRUE 61111
61109: GO 61122
61111: POP
// bc_type := b_ext_radio ; 20 :
61112: LD_ADDR_OWVAR 42
61116: PUSH
61117: LD_INT 22
61119: ST_TO_ADDR
61120: GO 61408
61122: LD_INT 20
61124: DOUBLE
61125: EQUAL
61126: IFTRUE 61130
61128: GO 61141
61130: POP
// bc_type := b_ext_siberium ; 21 :
61131: LD_ADDR_OWVAR 42
61135: PUSH
61136: LD_INT 21
61138: ST_TO_ADDR
61139: GO 61408
61141: LD_INT 21
61143: DOUBLE
61144: EQUAL
61145: IFTRUE 61149
61147: GO 61160
61149: POP
// bc_type := b_ext_computer ; 22 :
61150: LD_ADDR_OWVAR 42
61154: PUSH
61155: LD_INT 24
61157: ST_TO_ADDR
61158: GO 61408
61160: LD_INT 22
61162: DOUBLE
61163: EQUAL
61164: IFTRUE 61168
61166: GO 61179
61168: POP
// bc_type := b_ext_track ; 23 :
61169: LD_ADDR_OWVAR 42
61173: PUSH
61174: LD_INT 16
61176: ST_TO_ADDR
61177: GO 61408
61179: LD_INT 23
61181: DOUBLE
61182: EQUAL
61183: IFTRUE 61187
61185: GO 61198
61187: POP
// bc_type := b_ext_laser ; 24 :
61188: LD_ADDR_OWVAR 42
61192: PUSH
61193: LD_INT 25
61195: ST_TO_ADDR
61196: GO 61408
61198: LD_INT 24
61200: DOUBLE
61201: EQUAL
61202: IFTRUE 61206
61204: GO 61217
61206: POP
// bc_type := b_control_tower ; 25 :
61207: LD_ADDR_OWVAR 42
61211: PUSH
61212: LD_INT 36
61214: ST_TO_ADDR
61215: GO 61408
61217: LD_INT 25
61219: DOUBLE
61220: EQUAL
61221: IFTRUE 61225
61223: GO 61236
61225: POP
// bc_type := b_breastwork ; 26 :
61226: LD_ADDR_OWVAR 42
61230: PUSH
61231: LD_INT 31
61233: ST_TO_ADDR
61234: GO 61408
61236: LD_INT 26
61238: DOUBLE
61239: EQUAL
61240: IFTRUE 61244
61242: GO 61255
61244: POP
// bc_type := b_bunker ; 27 :
61245: LD_ADDR_OWVAR 42
61249: PUSH
61250: LD_INT 32
61252: ST_TO_ADDR
61253: GO 61408
61255: LD_INT 27
61257: DOUBLE
61258: EQUAL
61259: IFTRUE 61263
61261: GO 61274
61263: POP
// bc_type := b_turret ; 28 :
61264: LD_ADDR_OWVAR 42
61268: PUSH
61269: LD_INT 33
61271: ST_TO_ADDR
61272: GO 61408
61274: LD_INT 28
61276: DOUBLE
61277: EQUAL
61278: IFTRUE 61282
61280: GO 61293
61282: POP
// bc_type := b_armoury ; 29 :
61283: LD_ADDR_OWVAR 42
61287: PUSH
61288: LD_INT 4
61290: ST_TO_ADDR
61291: GO 61408
61293: LD_INT 29
61295: DOUBLE
61296: EQUAL
61297: IFTRUE 61301
61299: GO 61312
61301: POP
// bc_type := b_barracks ; 30 :
61302: LD_ADDR_OWVAR 42
61306: PUSH
61307: LD_INT 5
61309: ST_TO_ADDR
61310: GO 61408
61312: LD_INT 30
61314: DOUBLE
61315: EQUAL
61316: IFTRUE 61320
61318: GO 61331
61320: POP
// bc_type := b_solar_power ; 31 :
61321: LD_ADDR_OWVAR 42
61325: PUSH
61326: LD_INT 27
61328: ST_TO_ADDR
61329: GO 61408
61331: LD_INT 31
61333: DOUBLE
61334: EQUAL
61335: IFTRUE 61339
61337: GO 61350
61339: POP
// bc_type := b_oil_power ; 32 :
61340: LD_ADDR_OWVAR 42
61344: PUSH
61345: LD_INT 26
61347: ST_TO_ADDR
61348: GO 61408
61350: LD_INT 32
61352: DOUBLE
61353: EQUAL
61354: IFTRUE 61358
61356: GO 61369
61358: POP
// bc_type := b_siberite_power ; 33 :
61359: LD_ADDR_OWVAR 42
61363: PUSH
61364: LD_INT 28
61366: ST_TO_ADDR
61367: GO 61408
61369: LD_INT 33
61371: DOUBLE
61372: EQUAL
61373: IFTRUE 61377
61375: GO 61388
61377: POP
// bc_type := b_oil_mine ; 34 :
61378: LD_ADDR_OWVAR 42
61382: PUSH
61383: LD_INT 29
61385: ST_TO_ADDR
61386: GO 61408
61388: LD_INT 34
61390: DOUBLE
61391: EQUAL
61392: IFTRUE 61396
61394: GO 61407
61396: POP
// bc_type := b_siberite_mine ; end ;
61397: LD_ADDR_OWVAR 42
61401: PUSH
61402: LD_INT 30
61404: ST_TO_ADDR
61405: GO 61408
61407: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61408: LD_ADDR_VAR 0 8
61412: PUSH
61413: LD_VAR 0 5
61417: PPUSH
61418: LD_VAR 0 6
61422: PPUSH
61423: LD_VAR 0 3
61427: PPUSH
61428: CALL_OW 47
61432: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61433: LD_OWVAR 42
61437: PUSH
61438: LD_INT 32
61440: PUSH
61441: LD_INT 33
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: IN
61448: IFFALSE 61464
// PlaceWeaponTurret ( b , weapon ) ;
61450: LD_VAR 0 8
61454: PPUSH
61455: LD_VAR 0 4
61459: PPUSH
61460: CALL_OW 431
// end ;
61464: LD_VAR 0 7
61468: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61469: LD_INT 0
61471: PPUSH
61472: PPUSH
61473: PPUSH
61474: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61475: LD_ADDR_VAR 0 4
61479: PUSH
61480: LD_INT 22
61482: PUSH
61483: LD_OWVAR 2
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: LD_INT 30
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 30
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: LIST
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PPUSH
61524: CALL_OW 69
61528: ST_TO_ADDR
// if not tmp then
61529: LD_VAR 0 4
61533: NOT
61534: IFFALSE 61538
// exit ;
61536: GO 61597
// for i in tmp do
61538: LD_ADDR_VAR 0 2
61542: PUSH
61543: LD_VAR 0 4
61547: PUSH
61548: FOR_IN
61549: IFFALSE 61595
// for j = 1 to 3 do
61551: LD_ADDR_VAR 0 3
61555: PUSH
61556: DOUBLE
61557: LD_INT 1
61559: DEC
61560: ST_TO_ADDR
61561: LD_INT 3
61563: PUSH
61564: FOR_TO
61565: IFFALSE 61591
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61567: LD_VAR 0 2
61571: PPUSH
61572: CALL_OW 274
61576: PPUSH
61577: LD_VAR 0 3
61581: PPUSH
61582: LD_INT 99999
61584: PPUSH
61585: CALL_OW 277
61589: GO 61564
61591: POP
61592: POP
61593: GO 61548
61595: POP
61596: POP
// end ;
61597: LD_VAR 0 1
61601: RET
// export function hHackSetLevel10 ; var i , j ; begin
61602: LD_INT 0
61604: PPUSH
61605: PPUSH
61606: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61607: LD_ADDR_VAR 0 2
61611: PUSH
61612: LD_INT 21
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PPUSH
61622: CALL_OW 69
61626: PUSH
61627: FOR_IN
61628: IFFALSE 61680
// if IsSelected ( i ) then
61630: LD_VAR 0 2
61634: PPUSH
61635: CALL_OW 306
61639: IFFALSE 61678
// begin for j := 1 to 4 do
61641: LD_ADDR_VAR 0 3
61645: PUSH
61646: DOUBLE
61647: LD_INT 1
61649: DEC
61650: ST_TO_ADDR
61651: LD_INT 4
61653: PUSH
61654: FOR_TO
61655: IFFALSE 61676
// SetSkill ( i , j , 10 ) ;
61657: LD_VAR 0 2
61661: PPUSH
61662: LD_VAR 0 3
61666: PPUSH
61667: LD_INT 10
61669: PPUSH
61670: CALL_OW 237
61674: GO 61654
61676: POP
61677: POP
// end ;
61678: GO 61627
61680: POP
61681: POP
// end ;
61682: LD_VAR 0 1
61686: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61687: LD_INT 0
61689: PPUSH
61690: PPUSH
61691: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61692: LD_ADDR_VAR 0 2
61696: PUSH
61697: LD_INT 22
61699: PUSH
61700: LD_OWVAR 2
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 21
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PPUSH
61723: CALL_OW 69
61727: PUSH
61728: FOR_IN
61729: IFFALSE 61770
// begin for j := 1 to 4 do
61731: LD_ADDR_VAR 0 3
61735: PUSH
61736: DOUBLE
61737: LD_INT 1
61739: DEC
61740: ST_TO_ADDR
61741: LD_INT 4
61743: PUSH
61744: FOR_TO
61745: IFFALSE 61766
// SetSkill ( i , j , 10 ) ;
61747: LD_VAR 0 2
61751: PPUSH
61752: LD_VAR 0 3
61756: PPUSH
61757: LD_INT 10
61759: PPUSH
61760: CALL_OW 237
61764: GO 61744
61766: POP
61767: POP
// end ;
61768: GO 61728
61770: POP
61771: POP
// end ;
61772: LD_VAR 0 1
61776: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61777: LD_INT 0
61779: PPUSH
// uc_side := your_side ;
61780: LD_ADDR_OWVAR 20
61784: PUSH
61785: LD_OWVAR 2
61789: ST_TO_ADDR
// uc_nation := nation ;
61790: LD_ADDR_OWVAR 21
61794: PUSH
61795: LD_VAR 0 1
61799: ST_TO_ADDR
// InitHc ;
61800: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61804: LD_INT 0
61806: PPUSH
61807: LD_VAR 0 2
61811: PPUSH
61812: LD_VAR 0 3
61816: PPUSH
61817: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61821: LD_VAR 0 4
61825: PPUSH
61826: LD_VAR 0 5
61830: PPUSH
61831: CALL_OW 428
61835: PUSH
61836: LD_INT 0
61838: EQUAL
61839: IFFALSE 61863
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61841: CALL_OW 44
61845: PPUSH
61846: LD_VAR 0 4
61850: PPUSH
61851: LD_VAR 0 5
61855: PPUSH
61856: LD_INT 1
61858: PPUSH
61859: CALL_OW 48
// end ;
61863: LD_VAR 0 6
61867: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61868: LD_INT 0
61870: PPUSH
61871: PPUSH
// uc_side := your_side ;
61872: LD_ADDR_OWVAR 20
61876: PUSH
61877: LD_OWVAR 2
61881: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61882: LD_VAR 0 1
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: LD_INT 3
61895: PUSH
61896: LD_INT 4
61898: PUSH
61899: LD_INT 5
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: IN
61909: IFFALSE 61921
// uc_nation := nation_american else
61911: LD_ADDR_OWVAR 21
61915: PUSH
61916: LD_INT 1
61918: ST_TO_ADDR
61919: GO 61964
// if chassis in [ 11 , 12 , 13 , 14 ] then
61921: LD_VAR 0 1
61925: PUSH
61926: LD_INT 11
61928: PUSH
61929: LD_INT 12
61931: PUSH
61932: LD_INT 13
61934: PUSH
61935: LD_INT 14
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: IN
61944: IFFALSE 61956
// uc_nation := nation_arabian else
61946: LD_ADDR_OWVAR 21
61950: PUSH
61951: LD_INT 2
61953: ST_TO_ADDR
61954: GO 61964
// uc_nation := nation_russian ;
61956: LD_ADDR_OWVAR 21
61960: PUSH
61961: LD_INT 3
61963: ST_TO_ADDR
// vc_chassis := chassis ;
61964: LD_ADDR_OWVAR 37
61968: PUSH
61969: LD_VAR 0 1
61973: ST_TO_ADDR
// vc_engine := engine ;
61974: LD_ADDR_OWVAR 39
61978: PUSH
61979: LD_VAR 0 2
61983: ST_TO_ADDR
// vc_control := control ;
61984: LD_ADDR_OWVAR 38
61988: PUSH
61989: LD_VAR 0 3
61993: ST_TO_ADDR
// vc_weapon := weapon ;
61994: LD_ADDR_OWVAR 40
61998: PUSH
61999: LD_VAR 0 4
62003: ST_TO_ADDR
// un := CreateVehicle ;
62004: LD_ADDR_VAR 0 8
62008: PUSH
62009: CALL_OW 45
62013: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62014: LD_VAR 0 8
62018: PPUSH
62019: LD_INT 0
62021: PPUSH
62022: LD_INT 5
62024: PPUSH
62025: CALL_OW 12
62029: PPUSH
62030: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62034: LD_VAR 0 8
62038: PPUSH
62039: LD_VAR 0 5
62043: PPUSH
62044: LD_VAR 0 6
62048: PPUSH
62049: LD_INT 1
62051: PPUSH
62052: CALL_OW 48
// end ;
62056: LD_VAR 0 7
62060: RET
// export hInvincible ; every 1 do
62061: GO 62063
62063: DISABLE
// hInvincible := [ ] ;
62064: LD_ADDR_EXP 113
62068: PUSH
62069: EMPTY
62070: ST_TO_ADDR
62071: END
// every 10 do var i ;
62072: GO 62074
62074: DISABLE
62075: LD_INT 0
62077: PPUSH
// begin enable ;
62078: ENABLE
// if not hInvincible then
62079: LD_EXP 113
62083: NOT
62084: IFFALSE 62088
// exit ;
62086: GO 62132
// for i in hInvincible do
62088: LD_ADDR_VAR 0 1
62092: PUSH
62093: LD_EXP 113
62097: PUSH
62098: FOR_IN
62099: IFFALSE 62130
// if GetLives ( i ) < 1000 then
62101: LD_VAR 0 1
62105: PPUSH
62106: CALL_OW 256
62110: PUSH
62111: LD_INT 1000
62113: LESS
62114: IFFALSE 62128
// SetLives ( i , 1000 ) ;
62116: LD_VAR 0 1
62120: PPUSH
62121: LD_INT 1000
62123: PPUSH
62124: CALL_OW 234
62128: GO 62098
62130: POP
62131: POP
// end ;
62132: PPOPN 1
62134: END
// export function hHackInvincible ; var i ; begin
62135: LD_INT 0
62137: PPUSH
62138: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62139: LD_ADDR_VAR 0 2
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: LD_INT 21
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 21
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: LIST
62171: PPUSH
62172: CALL_OW 69
62176: PUSH
62177: FOR_IN
62178: IFFALSE 62239
// if IsSelected ( i ) then
62180: LD_VAR 0 2
62184: PPUSH
62185: CALL_OW 306
62189: IFFALSE 62237
// begin if i in hInvincible then
62191: LD_VAR 0 2
62195: PUSH
62196: LD_EXP 113
62200: IN
62201: IFFALSE 62221
// hInvincible := hInvincible diff i else
62203: LD_ADDR_EXP 113
62207: PUSH
62208: LD_EXP 113
62212: PUSH
62213: LD_VAR 0 2
62217: DIFF
62218: ST_TO_ADDR
62219: GO 62237
// hInvincible := hInvincible union i ;
62221: LD_ADDR_EXP 113
62225: PUSH
62226: LD_EXP 113
62230: PUSH
62231: LD_VAR 0 2
62235: UNION
62236: ST_TO_ADDR
// end ;
62237: GO 62177
62239: POP
62240: POP
// end ;
62241: LD_VAR 0 1
62245: RET
// export function hHackInvisible ; var i , j ; begin
62246: LD_INT 0
62248: PPUSH
62249: PPUSH
62250: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62251: LD_ADDR_VAR 0 2
62255: PUSH
62256: LD_INT 21
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PPUSH
62266: CALL_OW 69
62270: PUSH
62271: FOR_IN
62272: IFFALSE 62296
// if IsSelected ( i ) then
62274: LD_VAR 0 2
62278: PPUSH
62279: CALL_OW 306
62283: IFFALSE 62294
// ComForceInvisible ( i ) ;
62285: LD_VAR 0 2
62289: PPUSH
62290: CALL_OW 496
62294: GO 62271
62296: POP
62297: POP
// end ;
62298: LD_VAR 0 1
62302: RET
// export function hHackChangeYourSide ; begin
62303: LD_INT 0
62305: PPUSH
// if your_side = 8 then
62306: LD_OWVAR 2
62310: PUSH
62311: LD_INT 8
62313: EQUAL
62314: IFFALSE 62326
// your_side := 0 else
62316: LD_ADDR_OWVAR 2
62320: PUSH
62321: LD_INT 0
62323: ST_TO_ADDR
62324: GO 62340
// your_side := your_side + 1 ;
62326: LD_ADDR_OWVAR 2
62330: PUSH
62331: LD_OWVAR 2
62335: PUSH
62336: LD_INT 1
62338: PLUS
62339: ST_TO_ADDR
// end ;
62340: LD_VAR 0 1
62344: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62345: LD_INT 0
62347: PPUSH
62348: PPUSH
62349: PPUSH
// for i in all_units do
62350: LD_ADDR_VAR 0 2
62354: PUSH
62355: LD_OWVAR 3
62359: PUSH
62360: FOR_IN
62361: IFFALSE 62439
// if IsSelected ( i ) then
62363: LD_VAR 0 2
62367: PPUSH
62368: CALL_OW 306
62372: IFFALSE 62437
// begin j := GetSide ( i ) ;
62374: LD_ADDR_VAR 0 3
62378: PUSH
62379: LD_VAR 0 2
62383: PPUSH
62384: CALL_OW 255
62388: ST_TO_ADDR
// if j = 8 then
62389: LD_VAR 0 3
62393: PUSH
62394: LD_INT 8
62396: EQUAL
62397: IFFALSE 62409
// j := 0 else
62399: LD_ADDR_VAR 0 3
62403: PUSH
62404: LD_INT 0
62406: ST_TO_ADDR
62407: GO 62423
// j := j + 1 ;
62409: LD_ADDR_VAR 0 3
62413: PUSH
62414: LD_VAR 0 3
62418: PUSH
62419: LD_INT 1
62421: PLUS
62422: ST_TO_ADDR
// SetSide ( i , j ) ;
62423: LD_VAR 0 2
62427: PPUSH
62428: LD_VAR 0 3
62432: PPUSH
62433: CALL_OW 235
// end ;
62437: GO 62360
62439: POP
62440: POP
// end ;
62441: LD_VAR 0 1
62445: RET
// export function hHackFog ; begin
62446: LD_INT 0
62448: PPUSH
// FogOff ( true ) ;
62449: LD_INT 1
62451: PPUSH
62452: CALL_OW 344
// end ;
62456: LD_VAR 0 1
62460: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62461: LD_INT 0
62463: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62464: LD_VAR 0 1
62468: PPUSH
62469: LD_VAR 0 2
62473: PPUSH
62474: LD_VAR 0 3
62478: PPUSH
62479: LD_INT 1
62481: PPUSH
62482: LD_INT 1
62484: PPUSH
62485: CALL_OW 483
// CenterOnXY ( x , y ) ;
62489: LD_VAR 0 2
62493: PPUSH
62494: LD_VAR 0 3
62498: PPUSH
62499: CALL_OW 84
// end ;
62503: LD_VAR 0 4
62507: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62508: LD_INT 0
62510: PPUSH
62511: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62512: LD_VAR 0 1
62516: NOT
62517: PUSH
62518: LD_VAR 0 2
62522: PPUSH
62523: LD_VAR 0 3
62527: PPUSH
62528: CALL_OW 488
62532: NOT
62533: OR
62534: PUSH
62535: LD_VAR 0 1
62539: PPUSH
62540: CALL_OW 266
62544: PUSH
62545: LD_INT 3
62547: NONEQUAL
62548: PUSH
62549: LD_VAR 0 1
62553: PPUSH
62554: CALL_OW 247
62558: PUSH
62559: LD_INT 1
62561: EQUAL
62562: NOT
62563: AND
62564: OR
62565: IFFALSE 62569
// exit ;
62567: GO 62718
// if GetType ( factory ) = unit_human then
62569: LD_VAR 0 1
62573: PPUSH
62574: CALL_OW 247
62578: PUSH
62579: LD_INT 1
62581: EQUAL
62582: IFFALSE 62599
// factory := IsInUnit ( factory ) ;
62584: LD_ADDR_VAR 0 1
62588: PUSH
62589: LD_VAR 0 1
62593: PPUSH
62594: CALL_OW 310
62598: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62599: LD_VAR 0 1
62603: PPUSH
62604: CALL_OW 266
62608: PUSH
62609: LD_INT 3
62611: NONEQUAL
62612: IFFALSE 62616
// exit ;
62614: GO 62718
// if HexInfo ( x , y ) = factory then
62616: LD_VAR 0 2
62620: PPUSH
62621: LD_VAR 0 3
62625: PPUSH
62626: CALL_OW 428
62630: PUSH
62631: LD_VAR 0 1
62635: EQUAL
62636: IFFALSE 62663
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62638: LD_ADDR_EXP 114
62642: PUSH
62643: LD_EXP 114
62647: PPUSH
62648: LD_VAR 0 1
62652: PPUSH
62653: LD_INT 0
62655: PPUSH
62656: CALL_OW 1
62660: ST_TO_ADDR
62661: GO 62714
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62663: LD_ADDR_EXP 114
62667: PUSH
62668: LD_EXP 114
62672: PPUSH
62673: LD_VAR 0 1
62677: PPUSH
62678: LD_VAR 0 1
62682: PPUSH
62683: CALL_OW 255
62687: PUSH
62688: LD_VAR 0 1
62692: PUSH
62693: LD_VAR 0 2
62697: PUSH
62698: LD_VAR 0 3
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: PPUSH
62709: CALL_OW 1
62713: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62714: CALL 62723 0 0
// end ;
62718: LD_VAR 0 4
62722: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62723: LD_INT 0
62725: PPUSH
62726: PPUSH
62727: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62728: LD_STRING resetFactoryWaypoint();
62730: PPUSH
62731: CALL_OW 559
// if factoryWaypoints then
62735: LD_EXP 114
62739: IFFALSE 62865
// begin list := PrepareArray ( factoryWaypoints ) ;
62741: LD_ADDR_VAR 0 3
62745: PUSH
62746: LD_EXP 114
62750: PPUSH
62751: CALL 47959 0 1
62755: ST_TO_ADDR
// for i := 1 to list do
62756: LD_ADDR_VAR 0 2
62760: PUSH
62761: DOUBLE
62762: LD_INT 1
62764: DEC
62765: ST_TO_ADDR
62766: LD_VAR 0 3
62770: PUSH
62771: FOR_TO
62772: IFFALSE 62863
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62774: LD_STRING setFactoryWaypointXY(
62776: PUSH
62777: LD_VAR 0 3
62781: PUSH
62782: LD_VAR 0 2
62786: ARRAY
62787: PUSH
62788: LD_INT 1
62790: ARRAY
62791: STR
62792: PUSH
62793: LD_STRING ,
62795: STR
62796: PUSH
62797: LD_VAR 0 3
62801: PUSH
62802: LD_VAR 0 2
62806: ARRAY
62807: PUSH
62808: LD_INT 2
62810: ARRAY
62811: STR
62812: PUSH
62813: LD_STRING ,
62815: STR
62816: PUSH
62817: LD_VAR 0 3
62821: PUSH
62822: LD_VAR 0 2
62826: ARRAY
62827: PUSH
62828: LD_INT 3
62830: ARRAY
62831: STR
62832: PUSH
62833: LD_STRING ,
62835: STR
62836: PUSH
62837: LD_VAR 0 3
62841: PUSH
62842: LD_VAR 0 2
62846: ARRAY
62847: PUSH
62848: LD_INT 4
62850: ARRAY
62851: STR
62852: PUSH
62853: LD_STRING )
62855: STR
62856: PPUSH
62857: CALL_OW 559
62861: GO 62771
62863: POP
62864: POP
// end ; end ;
62865: LD_VAR 0 1
62869: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62870: LD_INT 0
62872: PPUSH
// if HexInfo ( x , y ) = warehouse then
62873: LD_VAR 0 2
62877: PPUSH
62878: LD_VAR 0 3
62882: PPUSH
62883: CALL_OW 428
62887: PUSH
62888: LD_VAR 0 1
62892: EQUAL
62893: IFFALSE 62920
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62895: LD_ADDR_EXP 115
62899: PUSH
62900: LD_EXP 115
62904: PPUSH
62905: LD_VAR 0 1
62909: PPUSH
62910: LD_INT 0
62912: PPUSH
62913: CALL_OW 1
62917: ST_TO_ADDR
62918: GO 62971
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62920: LD_ADDR_EXP 115
62924: PUSH
62925: LD_EXP 115
62929: PPUSH
62930: LD_VAR 0 1
62934: PPUSH
62935: LD_VAR 0 1
62939: PPUSH
62940: CALL_OW 255
62944: PUSH
62945: LD_VAR 0 1
62949: PUSH
62950: LD_VAR 0 2
62954: PUSH
62955: LD_VAR 0 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: PPUSH
62966: CALL_OW 1
62970: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62971: CALL 62980 0 0
// end ;
62975: LD_VAR 0 4
62979: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62980: LD_INT 0
62982: PPUSH
62983: PPUSH
62984: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62985: LD_STRING resetWarehouseGatheringPoints();
62987: PPUSH
62988: CALL_OW 559
// if warehouseGatheringPoints then
62992: LD_EXP 115
62996: IFFALSE 63122
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62998: LD_ADDR_VAR 0 3
63002: PUSH
63003: LD_EXP 115
63007: PPUSH
63008: CALL 47959 0 1
63012: ST_TO_ADDR
// for i := 1 to list do
63013: LD_ADDR_VAR 0 2
63017: PUSH
63018: DOUBLE
63019: LD_INT 1
63021: DEC
63022: ST_TO_ADDR
63023: LD_VAR 0 3
63027: PUSH
63028: FOR_TO
63029: IFFALSE 63120
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63031: LD_STRING setWarehouseGatheringPointXY(
63033: PUSH
63034: LD_VAR 0 3
63038: PUSH
63039: LD_VAR 0 2
63043: ARRAY
63044: PUSH
63045: LD_INT 1
63047: ARRAY
63048: STR
63049: PUSH
63050: LD_STRING ,
63052: STR
63053: PUSH
63054: LD_VAR 0 3
63058: PUSH
63059: LD_VAR 0 2
63063: ARRAY
63064: PUSH
63065: LD_INT 2
63067: ARRAY
63068: STR
63069: PUSH
63070: LD_STRING ,
63072: STR
63073: PUSH
63074: LD_VAR 0 3
63078: PUSH
63079: LD_VAR 0 2
63083: ARRAY
63084: PUSH
63085: LD_INT 3
63087: ARRAY
63088: STR
63089: PUSH
63090: LD_STRING ,
63092: STR
63093: PUSH
63094: LD_VAR 0 3
63098: PUSH
63099: LD_VAR 0 2
63103: ARRAY
63104: PUSH
63105: LD_INT 4
63107: ARRAY
63108: STR
63109: PUSH
63110: LD_STRING )
63112: STR
63113: PPUSH
63114: CALL_OW 559
63118: GO 63028
63120: POP
63121: POP
// end ; end ;
63122: LD_VAR 0 1
63126: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63127: LD_EXP 115
63131: IFFALSE 63818
63133: GO 63135
63135: DISABLE
63136: LD_INT 0
63138: PPUSH
63139: PPUSH
63140: PPUSH
63141: PPUSH
63142: PPUSH
63143: PPUSH
63144: PPUSH
63145: PPUSH
63146: PPUSH
// begin enable ;
63147: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63148: LD_ADDR_VAR 0 3
63152: PUSH
63153: LD_EXP 115
63157: PPUSH
63158: CALL 47959 0 1
63162: ST_TO_ADDR
// if not list then
63163: LD_VAR 0 3
63167: NOT
63168: IFFALSE 63172
// exit ;
63170: GO 63818
// for i := 1 to list do
63172: LD_ADDR_VAR 0 1
63176: PUSH
63177: DOUBLE
63178: LD_INT 1
63180: DEC
63181: ST_TO_ADDR
63182: LD_VAR 0 3
63186: PUSH
63187: FOR_TO
63188: IFFALSE 63816
// begin depot := list [ i ] [ 2 ] ;
63190: LD_ADDR_VAR 0 8
63194: PUSH
63195: LD_VAR 0 3
63199: PUSH
63200: LD_VAR 0 1
63204: ARRAY
63205: PUSH
63206: LD_INT 2
63208: ARRAY
63209: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63210: LD_ADDR_VAR 0 5
63214: PUSH
63215: LD_VAR 0 3
63219: PUSH
63220: LD_VAR 0 1
63224: ARRAY
63225: PUSH
63226: LD_INT 1
63228: ARRAY
63229: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63230: LD_VAR 0 8
63234: PPUSH
63235: CALL_OW 301
63239: PUSH
63240: LD_VAR 0 5
63244: PUSH
63245: LD_VAR 0 8
63249: PPUSH
63250: CALL_OW 255
63254: NONEQUAL
63255: OR
63256: IFFALSE 63285
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63258: LD_ADDR_EXP 115
63262: PUSH
63263: LD_EXP 115
63267: PPUSH
63268: LD_VAR 0 8
63272: PPUSH
63273: LD_INT 0
63275: PPUSH
63276: CALL_OW 1
63280: ST_TO_ADDR
// exit ;
63281: POP
63282: POP
63283: GO 63818
// end ; x := list [ i ] [ 3 ] ;
63285: LD_ADDR_VAR 0 6
63289: PUSH
63290: LD_VAR 0 3
63294: PUSH
63295: LD_VAR 0 1
63299: ARRAY
63300: PUSH
63301: LD_INT 3
63303: ARRAY
63304: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63305: LD_ADDR_VAR 0 7
63309: PUSH
63310: LD_VAR 0 3
63314: PUSH
63315: LD_VAR 0 1
63319: ARRAY
63320: PUSH
63321: LD_INT 4
63323: ARRAY
63324: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63325: LD_ADDR_VAR 0 9
63329: PUSH
63330: LD_VAR 0 6
63334: PPUSH
63335: LD_VAR 0 7
63339: PPUSH
63340: LD_INT 16
63342: PPUSH
63343: CALL 46543 0 3
63347: ST_TO_ADDR
// if not cratesNearbyPoint then
63348: LD_VAR 0 9
63352: NOT
63353: IFFALSE 63359
// exit ;
63355: POP
63356: POP
63357: GO 63818
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63359: LD_ADDR_VAR 0 4
63363: PUSH
63364: LD_INT 22
63366: PUSH
63367: LD_VAR 0 5
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: LD_INT 60
63381: PUSH
63382: EMPTY
63383: LIST
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 91
63391: PUSH
63392: LD_VAR 0 8
63396: PUSH
63397: LD_INT 6
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: LD_INT 25
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 25
63420: PUSH
63421: LD_INT 16
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: PPUSH
63439: CALL_OW 69
63443: PUSH
63444: LD_VAR 0 8
63448: PPUSH
63449: CALL_OW 313
63453: PPUSH
63454: LD_INT 3
63456: PUSH
63457: LD_INT 60
63459: PUSH
63460: EMPTY
63461: LIST
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: LD_INT 25
63472: PUSH
63473: LD_INT 2
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 25
63482: PUSH
63483: LD_INT 16
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PPUSH
63499: CALL_OW 72
63503: UNION
63504: ST_TO_ADDR
// if tmp then
63505: LD_VAR 0 4
63509: IFFALSE 63589
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63511: LD_ADDR_VAR 0 4
63515: PUSH
63516: LD_VAR 0 4
63520: PPUSH
63521: LD_INT 3
63523: PPUSH
63524: CALL 44510 0 2
63528: ST_TO_ADDR
// for j in tmp do
63529: LD_ADDR_VAR 0 2
63533: PUSH
63534: LD_VAR 0 4
63538: PUSH
63539: FOR_IN
63540: IFFALSE 63583
// begin if IsInUnit ( j ) then
63542: LD_VAR 0 2
63546: PPUSH
63547: CALL_OW 310
63551: IFFALSE 63562
// ComExit ( j ) ;
63553: LD_VAR 0 2
63557: PPUSH
63558: CALL 44593 0 1
// AddComCollect ( j , x , y ) ;
63562: LD_VAR 0 2
63566: PPUSH
63567: LD_VAR 0 6
63571: PPUSH
63572: LD_VAR 0 7
63576: PPUSH
63577: CALL_OW 177
// end ;
63581: GO 63539
63583: POP
63584: POP
// exit ;
63585: POP
63586: POP
63587: GO 63818
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63589: LD_ADDR_VAR 0 4
63593: PUSH
63594: LD_INT 22
63596: PUSH
63597: LD_VAR 0 5
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 91
63608: PUSH
63609: LD_VAR 0 8
63613: PUSH
63614: LD_INT 8
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: LD_INT 34
63627: PUSH
63628: LD_INT 12
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 34
63637: PUSH
63638: LD_INT 51
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 34
63647: PUSH
63648: LD_INT 32
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 34
63657: PUSH
63658: LD_EXP 39
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PPUSH
63679: CALL_OW 69
63683: ST_TO_ADDR
// if tmp then
63684: LD_VAR 0 4
63688: IFFALSE 63814
// begin for j in tmp do
63690: LD_ADDR_VAR 0 2
63694: PUSH
63695: LD_VAR 0 4
63699: PUSH
63700: FOR_IN
63701: IFFALSE 63812
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63703: LD_VAR 0 2
63707: PPUSH
63708: CALL_OW 262
63712: PUSH
63713: LD_INT 3
63715: EQUAL
63716: PUSH
63717: LD_VAR 0 2
63721: PPUSH
63722: CALL_OW 261
63726: PUSH
63727: LD_INT 20
63729: GREATER
63730: OR
63731: PUSH
63732: LD_VAR 0 2
63736: PPUSH
63737: CALL_OW 314
63741: NOT
63742: AND
63743: PUSH
63744: LD_VAR 0 2
63748: PPUSH
63749: CALL_OW 263
63753: PUSH
63754: LD_INT 1
63756: NONEQUAL
63757: PUSH
63758: LD_VAR 0 2
63762: PPUSH
63763: CALL_OW 311
63767: OR
63768: AND
63769: IFFALSE 63810
// begin ComCollect ( j , x , y ) ;
63771: LD_VAR 0 2
63775: PPUSH
63776: LD_VAR 0 6
63780: PPUSH
63781: LD_VAR 0 7
63785: PPUSH
63786: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63790: LD_VAR 0 2
63794: PPUSH
63795: LD_VAR 0 8
63799: PPUSH
63800: CALL_OW 172
// exit ;
63804: POP
63805: POP
63806: POP
63807: POP
63808: GO 63818
// end ;
63810: GO 63700
63812: POP
63813: POP
// end ; end ;
63814: GO 63187
63816: POP
63817: POP
// end ; end_of_file
63818: PPOPN 9
63820: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63821: LD_VAR 0 1
63825: PUSH
63826: LD_INT 200
63828: DOUBLE
63829: GREATEREQUAL
63830: IFFALSE 63838
63832: LD_INT 299
63834: DOUBLE
63835: LESSEQUAL
63836: IFTRUE 63840
63838: GO 63872
63840: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63841: LD_VAR 0 1
63845: PPUSH
63846: LD_VAR 0 2
63850: PPUSH
63851: LD_VAR 0 3
63855: PPUSH
63856: LD_VAR 0 4
63860: PPUSH
63861: LD_VAR 0 5
63865: PPUSH
63866: CALL 64362 0 5
63870: GO 63949
63872: LD_INT 300
63874: DOUBLE
63875: GREATEREQUAL
63876: IFFALSE 63884
63878: LD_INT 399
63880: DOUBLE
63881: LESSEQUAL
63882: IFTRUE 63886
63884: GO 63948
63886: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63887: LD_VAR 0 1
63891: PPUSH
63892: LD_VAR 0 2
63896: PPUSH
63897: LD_VAR 0 3
63901: PPUSH
63902: LD_VAR 0 4
63906: PPUSH
63907: LD_VAR 0 5
63911: PPUSH
63912: LD_VAR 0 6
63916: PPUSH
63917: LD_VAR 0 7
63921: PPUSH
63922: LD_VAR 0 8
63926: PPUSH
63927: LD_VAR 0 9
63931: PPUSH
63932: LD_VAR 0 10
63936: PPUSH
63937: LD_VAR 0 11
63941: PPUSH
63942: CALL 60528 0 11
63946: GO 63949
63948: POP
// end ;
63949: PPOPN 11
63951: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63952: LD_VAR 0 1
63956: PPUSH
63957: LD_VAR 0 2
63961: PPUSH
63962: LD_VAR 0 3
63966: PPUSH
63967: LD_VAR 0 4
63971: PPUSH
63972: LD_VAR 0 5
63976: PPUSH
63977: CALL 64098 0 5
// end ; end_of_file
63981: PPOPN 5
63983: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63984: LD_INT 0
63986: PPUSH
63987: PPUSH
63988: PPUSH
63989: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63990: LD_VAR 0 1
63994: PPUSH
63995: CALL_OW 264
63999: PUSH
64000: LD_EXP 42
64004: EQUAL
64005: IFFALSE 64077
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64007: LD_INT 68
64009: PPUSH
64010: LD_VAR 0 1
64014: PPUSH
64015: CALL_OW 255
64019: PPUSH
64020: CALL_OW 321
64024: PUSH
64025: LD_INT 2
64027: EQUAL
64028: IFFALSE 64040
// eff := 70 else
64030: LD_ADDR_VAR 0 4
64034: PUSH
64035: LD_INT 70
64037: ST_TO_ADDR
64038: GO 64048
// eff := 30 ;
64040: LD_ADDR_VAR 0 4
64044: PUSH
64045: LD_INT 30
64047: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64048: LD_VAR 0 1
64052: PPUSH
64053: CALL_OW 250
64057: PPUSH
64058: LD_VAR 0 1
64062: PPUSH
64063: CALL_OW 251
64067: PPUSH
64068: LD_VAR 0 4
64072: PPUSH
64073: CALL_OW 495
// end ; end ;
64077: LD_VAR 0 2
64081: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
64082: LD_INT 0
64084: PPUSH
// end ;
64085: LD_VAR 0 4
64089: RET
// export function SOS_Command ( cmd ) ; begin
64090: LD_INT 0
64092: PPUSH
// end ;
64093: LD_VAR 0 2
64097: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
64098: LD_INT 0
64100: PPUSH
// end ;
64101: LD_VAR 0 6
64105: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
64106: LD_INT 0
64108: PPUSH
64109: PPUSH
// if not vehicle or not factory then
64110: LD_VAR 0 1
64114: NOT
64115: PUSH
64116: LD_VAR 0 2
64120: NOT
64121: OR
64122: IFFALSE 64126
// exit ;
64124: GO 64357
// if factoryWaypoints >= factory then
64126: LD_EXP 114
64130: PUSH
64131: LD_VAR 0 2
64135: GREATEREQUAL
64136: IFFALSE 64357
// if factoryWaypoints [ factory ] then
64138: LD_EXP 114
64142: PUSH
64143: LD_VAR 0 2
64147: ARRAY
64148: IFFALSE 64357
// begin if GetControl ( vehicle ) = control_manual then
64150: LD_VAR 0 1
64154: PPUSH
64155: CALL_OW 263
64159: PUSH
64160: LD_INT 1
64162: EQUAL
64163: IFFALSE 64244
// begin driver := IsDrivenBy ( vehicle ) ;
64165: LD_ADDR_VAR 0 4
64169: PUSH
64170: LD_VAR 0 1
64174: PPUSH
64175: CALL_OW 311
64179: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64180: LD_VAR 0 4
64184: PPUSH
64185: LD_EXP 114
64189: PUSH
64190: LD_VAR 0 2
64194: ARRAY
64195: PUSH
64196: LD_INT 3
64198: ARRAY
64199: PPUSH
64200: LD_EXP 114
64204: PUSH
64205: LD_VAR 0 2
64209: ARRAY
64210: PUSH
64211: LD_INT 4
64213: ARRAY
64214: PPUSH
64215: CALL_OW 171
// AddComExitVehicle ( driver ) ;
64219: LD_VAR 0 4
64223: PPUSH
64224: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
64228: LD_VAR 0 4
64232: PPUSH
64233: LD_VAR 0 2
64237: PPUSH
64238: CALL_OW 180
// end else
64242: GO 64357
// if GetControl ( vehicle ) = control_remote then
64244: LD_VAR 0 1
64248: PPUSH
64249: CALL_OW 263
64253: PUSH
64254: LD_INT 2
64256: EQUAL
64257: IFFALSE 64318
// begin wait ( 0 0$2 ) ;
64259: LD_INT 70
64261: PPUSH
64262: CALL_OW 67
// if Connect ( vehicle ) then
64266: LD_VAR 0 1
64270: PPUSH
64271: CALL 14921 0 1
64275: IFFALSE 64316
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64277: LD_VAR 0 1
64281: PPUSH
64282: LD_EXP 114
64286: PUSH
64287: LD_VAR 0 2
64291: ARRAY
64292: PUSH
64293: LD_INT 3
64295: ARRAY
64296: PPUSH
64297: LD_EXP 114
64301: PUSH
64302: LD_VAR 0 2
64306: ARRAY
64307: PUSH
64308: LD_INT 4
64310: ARRAY
64311: PPUSH
64312: CALL_OW 171
// end else
64316: GO 64357
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64318: LD_VAR 0 1
64322: PPUSH
64323: LD_EXP 114
64327: PUSH
64328: LD_VAR 0 2
64332: ARRAY
64333: PUSH
64334: LD_INT 3
64336: ARRAY
64337: PPUSH
64338: LD_EXP 114
64342: PUSH
64343: LD_VAR 0 2
64347: ARRAY
64348: PUSH
64349: LD_INT 4
64351: ARRAY
64352: PPUSH
64353: CALL_OW 171
// end ; end ;
64357: LD_VAR 0 3
64361: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64362: LD_INT 0
64364: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64365: LD_VAR 0 1
64369: PUSH
64370: LD_INT 250
64372: EQUAL
64373: PUSH
64374: LD_VAR 0 2
64378: PPUSH
64379: CALL_OW 264
64383: PUSH
64384: LD_EXP 45
64388: EQUAL
64389: AND
64390: IFFALSE 64411
// MinerPlaceMine ( unit , x , y ) ;
64392: LD_VAR 0 2
64396: PPUSH
64397: LD_VAR 0 4
64401: PPUSH
64402: LD_VAR 0 5
64406: PPUSH
64407: CALL 66810 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64411: LD_VAR 0 1
64415: PUSH
64416: LD_INT 251
64418: EQUAL
64419: PUSH
64420: LD_VAR 0 2
64424: PPUSH
64425: CALL_OW 264
64429: PUSH
64430: LD_EXP 45
64434: EQUAL
64435: AND
64436: IFFALSE 64457
// MinerDetonateMine ( unit , x , y ) ;
64438: LD_VAR 0 2
64442: PPUSH
64443: LD_VAR 0 4
64447: PPUSH
64448: LD_VAR 0 5
64452: PPUSH
64453: CALL 67087 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64457: LD_VAR 0 1
64461: PUSH
64462: LD_INT 252
64464: EQUAL
64465: PUSH
64466: LD_VAR 0 2
64470: PPUSH
64471: CALL_OW 264
64475: PUSH
64476: LD_EXP 45
64480: EQUAL
64481: AND
64482: IFFALSE 64503
// MinerCreateMinefield ( unit , x , y ) ;
64484: LD_VAR 0 2
64488: PPUSH
64489: LD_VAR 0 4
64493: PPUSH
64494: LD_VAR 0 5
64498: PPUSH
64499: CALL 67504 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64503: LD_VAR 0 1
64507: PUSH
64508: LD_INT 253
64510: EQUAL
64511: PUSH
64512: LD_VAR 0 2
64516: PPUSH
64517: CALL_OW 257
64521: PUSH
64522: LD_INT 5
64524: EQUAL
64525: AND
64526: IFFALSE 64547
// ComBinocular ( unit , x , y ) ;
64528: LD_VAR 0 2
64532: PPUSH
64533: LD_VAR 0 4
64537: PPUSH
64538: LD_VAR 0 5
64542: PPUSH
64543: CALL 67875 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64547: LD_VAR 0 1
64551: PUSH
64552: LD_INT 254
64554: EQUAL
64555: PUSH
64556: LD_VAR 0 2
64560: PPUSH
64561: CALL_OW 264
64565: PUSH
64566: LD_EXP 40
64570: EQUAL
64571: AND
64572: PUSH
64573: LD_VAR 0 3
64577: PPUSH
64578: CALL_OW 263
64582: PUSH
64583: LD_INT 3
64585: EQUAL
64586: AND
64587: IFFALSE 64603
// HackDestroyVehicle ( unit , selectedUnit ) ;
64589: LD_VAR 0 2
64593: PPUSH
64594: LD_VAR 0 3
64598: PPUSH
64599: CALL 66170 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64603: LD_VAR 0 1
64607: PUSH
64608: LD_INT 255
64610: EQUAL
64611: PUSH
64612: LD_VAR 0 2
64616: PPUSH
64617: CALL_OW 264
64621: PUSH
64622: LD_INT 14
64624: PUSH
64625: LD_INT 53
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: IN
64632: AND
64633: PUSH
64634: LD_VAR 0 4
64638: PPUSH
64639: LD_VAR 0 5
64643: PPUSH
64644: CALL_OW 488
64648: AND
64649: IFFALSE 64673
// CutTreeXYR ( unit , x , y , 12 ) ;
64651: LD_VAR 0 2
64655: PPUSH
64656: LD_VAR 0 4
64660: PPUSH
64661: LD_VAR 0 5
64665: PPUSH
64666: LD_INT 12
64668: PPUSH
64669: CALL 64736 0 4
// if cmd = 256 then
64673: LD_VAR 0 1
64677: PUSH
64678: LD_INT 256
64680: EQUAL
64681: IFFALSE 64702
// SetFactoryWaypoint ( unit , x , y ) ;
64683: LD_VAR 0 2
64687: PPUSH
64688: LD_VAR 0 4
64692: PPUSH
64693: LD_VAR 0 5
64697: PPUSH
64698: CALL 62508 0 3
// if cmd = 257 then
64702: LD_VAR 0 1
64706: PUSH
64707: LD_INT 257
64709: EQUAL
64710: IFFALSE 64731
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64712: LD_VAR 0 2
64716: PPUSH
64717: LD_VAR 0 4
64721: PPUSH
64722: LD_VAR 0 5
64726: PPUSH
64727: CALL 62870 0 3
// end ;
64731: LD_VAR 0 6
64735: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64736: LD_INT 0
64738: PPUSH
64739: PPUSH
64740: PPUSH
64741: PPUSH
64742: PPUSH
64743: PPUSH
64744: PPUSH
64745: PPUSH
64746: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
64747: LD_VAR 0 1
64751: NOT
64752: PUSH
64753: LD_VAR 0 2
64757: PPUSH
64758: LD_VAR 0 3
64762: PPUSH
64763: CALL_OW 488
64767: NOT
64768: OR
64769: PUSH
64770: LD_VAR 0 4
64774: NOT
64775: OR
64776: IFFALSE 64780
// exit ;
64778: GO 65120
// list := [ ] ;
64780: LD_ADDR_VAR 0 13
64784: PUSH
64785: EMPTY
64786: ST_TO_ADDR
// if x - r < 0 then
64787: LD_VAR 0 2
64791: PUSH
64792: LD_VAR 0 4
64796: MINUS
64797: PUSH
64798: LD_INT 0
64800: LESS
64801: IFFALSE 64813
// min_x := 0 else
64803: LD_ADDR_VAR 0 7
64807: PUSH
64808: LD_INT 0
64810: ST_TO_ADDR
64811: GO 64829
// min_x := x - r ;
64813: LD_ADDR_VAR 0 7
64817: PUSH
64818: LD_VAR 0 2
64822: PUSH
64823: LD_VAR 0 4
64827: MINUS
64828: ST_TO_ADDR
// if y - r < 0 then
64829: LD_VAR 0 3
64833: PUSH
64834: LD_VAR 0 4
64838: MINUS
64839: PUSH
64840: LD_INT 0
64842: LESS
64843: IFFALSE 64855
// min_y := 0 else
64845: LD_ADDR_VAR 0 8
64849: PUSH
64850: LD_INT 0
64852: ST_TO_ADDR
64853: GO 64871
// min_y := y - r ;
64855: LD_ADDR_VAR 0 8
64859: PUSH
64860: LD_VAR 0 3
64864: PUSH
64865: LD_VAR 0 4
64869: MINUS
64870: ST_TO_ADDR
// max_x := x + r ;
64871: LD_ADDR_VAR 0 9
64875: PUSH
64876: LD_VAR 0 2
64880: PUSH
64881: LD_VAR 0 4
64885: PLUS
64886: ST_TO_ADDR
// max_y := y + r ;
64887: LD_ADDR_VAR 0 10
64891: PUSH
64892: LD_VAR 0 3
64896: PUSH
64897: LD_VAR 0 4
64901: PLUS
64902: ST_TO_ADDR
// for _x = min_x to max_x do
64903: LD_ADDR_VAR 0 11
64907: PUSH
64908: DOUBLE
64909: LD_VAR 0 7
64913: DEC
64914: ST_TO_ADDR
64915: LD_VAR 0 9
64919: PUSH
64920: FOR_TO
64921: IFFALSE 65038
// for _y = min_y to max_y do
64923: LD_ADDR_VAR 0 12
64927: PUSH
64928: DOUBLE
64929: LD_VAR 0 8
64933: DEC
64934: ST_TO_ADDR
64935: LD_VAR 0 10
64939: PUSH
64940: FOR_TO
64941: IFFALSE 65034
// begin if not ValidHex ( _x , _y ) then
64943: LD_VAR 0 11
64947: PPUSH
64948: LD_VAR 0 12
64952: PPUSH
64953: CALL_OW 488
64957: NOT
64958: IFFALSE 64962
// continue ;
64960: GO 64940
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64962: LD_VAR 0 11
64966: PPUSH
64967: LD_VAR 0 12
64971: PPUSH
64972: CALL_OW 351
64976: PUSH
64977: LD_VAR 0 11
64981: PPUSH
64982: LD_VAR 0 12
64986: PPUSH
64987: CALL_OW 554
64991: AND
64992: IFFALSE 65032
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64994: LD_ADDR_VAR 0 13
64998: PUSH
64999: LD_VAR 0 13
65003: PPUSH
65004: LD_VAR 0 13
65008: PUSH
65009: LD_INT 1
65011: PLUS
65012: PPUSH
65013: LD_VAR 0 11
65017: PUSH
65018: LD_VAR 0 12
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PPUSH
65027: CALL_OW 2
65031: ST_TO_ADDR
// end ;
65032: GO 64940
65034: POP
65035: POP
65036: GO 64920
65038: POP
65039: POP
// if not list then
65040: LD_VAR 0 13
65044: NOT
65045: IFFALSE 65049
// exit ;
65047: GO 65120
// for i in list do
65049: LD_ADDR_VAR 0 6
65053: PUSH
65054: LD_VAR 0 13
65058: PUSH
65059: FOR_IN
65060: IFFALSE 65118
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65062: LD_VAR 0 1
65066: PPUSH
65067: LD_STRING M
65069: PUSH
65070: LD_VAR 0 6
65074: PUSH
65075: LD_INT 1
65077: ARRAY
65078: PUSH
65079: LD_VAR 0 6
65083: PUSH
65084: LD_INT 2
65086: ARRAY
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: PUSH
65109: EMPTY
65110: LIST
65111: PPUSH
65112: CALL_OW 447
65116: GO 65059
65118: POP
65119: POP
// end ;
65120: LD_VAR 0 5
65124: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65125: LD_EXP 117
65129: NOT
65130: IFFALSE 65180
65132: GO 65134
65134: DISABLE
// begin initHack := true ;
65135: LD_ADDR_EXP 117
65139: PUSH
65140: LD_INT 1
65142: ST_TO_ADDR
// hackTanks := [ ] ;
65143: LD_ADDR_EXP 118
65147: PUSH
65148: EMPTY
65149: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65150: LD_ADDR_EXP 119
65154: PUSH
65155: EMPTY
65156: ST_TO_ADDR
// hackLimit := 3 ;
65157: LD_ADDR_EXP 120
65161: PUSH
65162: LD_INT 3
65164: ST_TO_ADDR
// hackDist := 12 ;
65165: LD_ADDR_EXP 121
65169: PUSH
65170: LD_INT 12
65172: ST_TO_ADDR
// hackCounter := [ ] ;
65173: LD_ADDR_EXP 122
65177: PUSH
65178: EMPTY
65179: ST_TO_ADDR
// end ;
65180: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65181: LD_EXP 117
65185: PUSH
65186: LD_INT 34
65188: PUSH
65189: LD_EXP 40
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PPUSH
65198: CALL_OW 69
65202: AND
65203: IFFALSE 65458
65205: GO 65207
65207: DISABLE
65208: LD_INT 0
65210: PPUSH
65211: PPUSH
// begin enable ;
65212: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65213: LD_ADDR_VAR 0 1
65217: PUSH
65218: LD_INT 34
65220: PUSH
65221: LD_EXP 40
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PPUSH
65230: CALL_OW 69
65234: PUSH
65235: FOR_IN
65236: IFFALSE 65456
// begin if not i in hackTanks then
65238: LD_VAR 0 1
65242: PUSH
65243: LD_EXP 118
65247: IN
65248: NOT
65249: IFFALSE 65332
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65251: LD_ADDR_EXP 118
65255: PUSH
65256: LD_EXP 118
65260: PPUSH
65261: LD_EXP 118
65265: PUSH
65266: LD_INT 1
65268: PLUS
65269: PPUSH
65270: LD_VAR 0 1
65274: PPUSH
65275: CALL_OW 1
65279: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65280: LD_ADDR_EXP 119
65284: PUSH
65285: LD_EXP 119
65289: PPUSH
65290: LD_EXP 119
65294: PUSH
65295: LD_INT 1
65297: PLUS
65298: PPUSH
65299: EMPTY
65300: PPUSH
65301: CALL_OW 1
65305: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
65306: LD_ADDR_EXP 122
65310: PUSH
65311: LD_EXP 122
65315: PPUSH
65316: LD_EXP 122
65320: PUSH
65321: LD_INT 1
65323: PLUS
65324: PPUSH
65325: EMPTY
65326: PPUSH
65327: CALL_OW 1
65331: ST_TO_ADDR
// end ; if not IsOk ( i ) then
65332: LD_VAR 0 1
65336: PPUSH
65337: CALL_OW 302
65341: NOT
65342: IFFALSE 65355
// begin HackUnlinkAll ( i ) ;
65344: LD_VAR 0 1
65348: PPUSH
65349: CALL 65461 0 1
// continue ;
65353: GO 65235
// end ; HackCheckCapturedStatus ( i ) ;
65355: LD_VAR 0 1
65359: PPUSH
65360: CALL 65904 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
65364: LD_ADDR_VAR 0 2
65368: PUSH
65369: LD_INT 81
65371: PUSH
65372: LD_VAR 0 1
65376: PPUSH
65377: CALL_OW 255
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 33
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 91
65398: PUSH
65399: LD_VAR 0 1
65403: PUSH
65404: LD_EXP 121
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 50
65416: PUSH
65417: EMPTY
65418: LIST
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: PPUSH
65426: CALL_OW 69
65430: ST_TO_ADDR
// if not tmp then
65431: LD_VAR 0 2
65435: NOT
65436: IFFALSE 65440
// continue ;
65438: GO 65235
// HackLink ( i , tmp ) ;
65440: LD_VAR 0 1
65444: PPUSH
65445: LD_VAR 0 2
65449: PPUSH
65450: CALL 65597 0 2
// end ;
65454: GO 65235
65456: POP
65457: POP
// end ;
65458: PPOPN 2
65460: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
65461: LD_INT 0
65463: PPUSH
65464: PPUSH
65465: PPUSH
// if not hack in hackTanks then
65466: LD_VAR 0 1
65470: PUSH
65471: LD_EXP 118
65475: IN
65476: NOT
65477: IFFALSE 65481
// exit ;
65479: GO 65592
// index := GetElementIndex ( hackTanks , hack ) ;
65481: LD_ADDR_VAR 0 4
65485: PUSH
65486: LD_EXP 118
65490: PPUSH
65491: LD_VAR 0 1
65495: PPUSH
65496: CALL 11735 0 2
65500: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
65501: LD_EXP 119
65505: PUSH
65506: LD_VAR 0 4
65510: ARRAY
65511: IFFALSE 65592
// begin for i in hackTanksCaptured [ index ] do
65513: LD_ADDR_VAR 0 3
65517: PUSH
65518: LD_EXP 119
65522: PUSH
65523: LD_VAR 0 4
65527: ARRAY
65528: PUSH
65529: FOR_IN
65530: IFFALSE 65556
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
65532: LD_VAR 0 3
65536: PUSH
65537: LD_INT 1
65539: ARRAY
65540: PPUSH
65541: LD_VAR 0 3
65545: PUSH
65546: LD_INT 2
65548: ARRAY
65549: PPUSH
65550: CALL_OW 235
65554: GO 65529
65556: POP
65557: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
65558: LD_ADDR_EXP 119
65562: PUSH
65563: LD_EXP 119
65567: PPUSH
65568: LD_VAR 0 4
65572: PPUSH
65573: EMPTY
65574: PPUSH
65575: CALL_OW 1
65579: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
65580: LD_VAR 0 1
65584: PPUSH
65585: LD_INT 0
65587: PPUSH
65588: CALL_OW 505
// end ; end ;
65592: LD_VAR 0 2
65596: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65597: LD_INT 0
65599: PPUSH
65600: PPUSH
65601: PPUSH
// if not hack in hackTanks or not vehicles then
65602: LD_VAR 0 1
65606: PUSH
65607: LD_EXP 118
65611: IN
65612: NOT
65613: PUSH
65614: LD_VAR 0 2
65618: NOT
65619: OR
65620: IFFALSE 65624
// exit ;
65622: GO 65899
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65624: LD_ADDR_VAR 0 2
65628: PUSH
65629: LD_VAR 0 1
65633: PPUSH
65634: LD_VAR 0 2
65638: PPUSH
65639: LD_INT 1
65641: PPUSH
65642: LD_INT 1
65644: PPUSH
65645: CALL 12385 0 4
65649: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65650: LD_ADDR_VAR 0 5
65654: PUSH
65655: LD_EXP 118
65659: PPUSH
65660: LD_VAR 0 1
65664: PPUSH
65665: CALL 11735 0 2
65669: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65670: LD_EXP 119
65674: PUSH
65675: LD_VAR 0 5
65679: ARRAY
65680: PUSH
65681: LD_EXP 120
65685: LESS
65686: IFFALSE 65875
// begin for i := 1 to vehicles do
65688: LD_ADDR_VAR 0 4
65692: PUSH
65693: DOUBLE
65694: LD_INT 1
65696: DEC
65697: ST_TO_ADDR
65698: LD_VAR 0 2
65702: PUSH
65703: FOR_TO
65704: IFFALSE 65873
// begin if hackTanksCaptured [ index ] = hackLimit then
65706: LD_EXP 119
65710: PUSH
65711: LD_VAR 0 5
65715: ARRAY
65716: PUSH
65717: LD_EXP 120
65721: EQUAL
65722: IFFALSE 65726
// break ;
65724: GO 65873
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65726: LD_ADDR_EXP 122
65730: PUSH
65731: LD_EXP 122
65735: PPUSH
65736: LD_VAR 0 5
65740: PPUSH
65741: LD_EXP 122
65745: PUSH
65746: LD_VAR 0 5
65750: ARRAY
65751: PUSH
65752: LD_INT 1
65754: PLUS
65755: PPUSH
65756: CALL_OW 1
65760: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65761: LD_ADDR_EXP 119
65765: PUSH
65766: LD_EXP 119
65770: PPUSH
65771: LD_VAR 0 5
65775: PUSH
65776: LD_EXP 119
65780: PUSH
65781: LD_VAR 0 5
65785: ARRAY
65786: PUSH
65787: LD_INT 1
65789: PLUS
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PPUSH
65795: LD_VAR 0 2
65799: PUSH
65800: LD_VAR 0 4
65804: ARRAY
65805: PUSH
65806: LD_VAR 0 2
65810: PUSH
65811: LD_VAR 0 4
65815: ARRAY
65816: PPUSH
65817: CALL_OW 255
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PPUSH
65826: CALL 11950 0 3
65830: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65831: LD_VAR 0 2
65835: PUSH
65836: LD_VAR 0 4
65840: ARRAY
65841: PPUSH
65842: LD_VAR 0 1
65846: PPUSH
65847: CALL_OW 255
65851: PPUSH
65852: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65856: LD_VAR 0 2
65860: PUSH
65861: LD_VAR 0 4
65865: ARRAY
65866: PPUSH
65867: CALL_OW 141
// end ;
65871: GO 65703
65873: POP
65874: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65875: LD_VAR 0 1
65879: PPUSH
65880: LD_EXP 119
65884: PUSH
65885: LD_VAR 0 5
65889: ARRAY
65890: PUSH
65891: LD_INT 0
65893: PLUS
65894: PPUSH
65895: CALL_OW 505
// end ;
65899: LD_VAR 0 3
65903: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65904: LD_INT 0
65906: PPUSH
65907: PPUSH
65908: PPUSH
65909: PPUSH
// if not hack in hackTanks then
65910: LD_VAR 0 1
65914: PUSH
65915: LD_EXP 118
65919: IN
65920: NOT
65921: IFFALSE 65925
// exit ;
65923: GO 66165
// index := GetElementIndex ( hackTanks , hack ) ;
65925: LD_ADDR_VAR 0 4
65929: PUSH
65930: LD_EXP 118
65934: PPUSH
65935: LD_VAR 0 1
65939: PPUSH
65940: CALL 11735 0 2
65944: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65945: LD_ADDR_VAR 0 3
65949: PUSH
65950: DOUBLE
65951: LD_EXP 119
65955: PUSH
65956: LD_VAR 0 4
65960: ARRAY
65961: INC
65962: ST_TO_ADDR
65963: LD_INT 1
65965: PUSH
65966: FOR_DOWNTO
65967: IFFALSE 66139
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65969: LD_ADDR_VAR 0 5
65973: PUSH
65974: LD_EXP 119
65978: PUSH
65979: LD_VAR 0 4
65983: ARRAY
65984: PUSH
65985: LD_VAR 0 3
65989: ARRAY
65990: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65991: LD_VAR 0 5
65995: PUSH
65996: LD_INT 1
65998: ARRAY
65999: PPUSH
66000: CALL_OW 302
66004: NOT
66005: PUSH
66006: LD_VAR 0 5
66010: PUSH
66011: LD_INT 1
66013: ARRAY
66014: PPUSH
66015: CALL_OW 255
66019: PUSH
66020: LD_VAR 0 1
66024: PPUSH
66025: CALL_OW 255
66029: NONEQUAL
66030: OR
66031: IFFALSE 66137
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66033: LD_VAR 0 5
66037: PUSH
66038: LD_INT 1
66040: ARRAY
66041: PPUSH
66042: CALL_OW 305
66046: PUSH
66047: LD_VAR 0 5
66051: PUSH
66052: LD_INT 1
66054: ARRAY
66055: PPUSH
66056: CALL_OW 255
66060: PUSH
66061: LD_VAR 0 1
66065: PPUSH
66066: CALL_OW 255
66070: EQUAL
66071: AND
66072: IFFALSE 66096
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66074: LD_VAR 0 5
66078: PUSH
66079: LD_INT 1
66081: ARRAY
66082: PPUSH
66083: LD_VAR 0 5
66087: PUSH
66088: LD_INT 2
66090: ARRAY
66091: PPUSH
66092: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66096: LD_ADDR_EXP 119
66100: PUSH
66101: LD_EXP 119
66105: PPUSH
66106: LD_VAR 0 4
66110: PPUSH
66111: LD_EXP 119
66115: PUSH
66116: LD_VAR 0 4
66120: ARRAY
66121: PPUSH
66122: LD_VAR 0 3
66126: PPUSH
66127: CALL_OW 3
66131: PPUSH
66132: CALL_OW 1
66136: ST_TO_ADDR
// end ; end ;
66137: GO 65966
66139: POP
66140: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66141: LD_VAR 0 1
66145: PPUSH
66146: LD_EXP 119
66150: PUSH
66151: LD_VAR 0 4
66155: ARRAY
66156: PUSH
66157: LD_INT 0
66159: PLUS
66160: PPUSH
66161: CALL_OW 505
// end ;
66165: LD_VAR 0 2
66169: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66170: LD_INT 0
66172: PPUSH
66173: PPUSH
66174: PPUSH
66175: PPUSH
// if not hack in hackTanks then
66176: LD_VAR 0 1
66180: PUSH
66181: LD_EXP 118
66185: IN
66186: NOT
66187: IFFALSE 66191
// exit ;
66189: GO 66276
// index := GetElementIndex ( hackTanks , hack ) ;
66191: LD_ADDR_VAR 0 5
66195: PUSH
66196: LD_EXP 118
66200: PPUSH
66201: LD_VAR 0 1
66205: PPUSH
66206: CALL 11735 0 2
66210: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66211: LD_ADDR_VAR 0 4
66215: PUSH
66216: DOUBLE
66217: LD_INT 1
66219: DEC
66220: ST_TO_ADDR
66221: LD_EXP 119
66225: PUSH
66226: LD_VAR 0 5
66230: ARRAY
66231: PUSH
66232: FOR_TO
66233: IFFALSE 66274
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66235: LD_EXP 119
66239: PUSH
66240: LD_VAR 0 5
66244: ARRAY
66245: PUSH
66246: LD_VAR 0 4
66250: ARRAY
66251: PUSH
66252: LD_INT 1
66254: ARRAY
66255: PUSH
66256: LD_VAR 0 2
66260: EQUAL
66261: IFFALSE 66272
// KillUnit ( vehicle ) ;
66263: LD_VAR 0 2
66267: PPUSH
66268: CALL_OW 66
66272: GO 66232
66274: POP
66275: POP
// end ;
66276: LD_VAR 0 3
66280: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66281: LD_EXP 123
66285: NOT
66286: IFFALSE 66321
66288: GO 66290
66290: DISABLE
// begin initMiner := true ;
66291: LD_ADDR_EXP 123
66295: PUSH
66296: LD_INT 1
66298: ST_TO_ADDR
// minersList := [ ] ;
66299: LD_ADDR_EXP 124
66303: PUSH
66304: EMPTY
66305: ST_TO_ADDR
// minerMinesList := [ ] ;
66306: LD_ADDR_EXP 125
66310: PUSH
66311: EMPTY
66312: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
66313: LD_ADDR_EXP 126
66317: PUSH
66318: LD_INT 5
66320: ST_TO_ADDR
// end ;
66321: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
66322: LD_EXP 123
66326: PUSH
66327: LD_INT 34
66329: PUSH
66330: LD_EXP 45
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PPUSH
66339: CALL_OW 69
66343: AND
66344: IFFALSE 66807
66346: GO 66348
66348: DISABLE
66349: LD_INT 0
66351: PPUSH
66352: PPUSH
66353: PPUSH
66354: PPUSH
// begin enable ;
66355: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
66356: LD_ADDR_VAR 0 1
66360: PUSH
66361: LD_INT 34
66363: PUSH
66364: LD_EXP 45
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PPUSH
66373: CALL_OW 69
66377: PUSH
66378: FOR_IN
66379: IFFALSE 66451
// begin if not i in minersList then
66381: LD_VAR 0 1
66385: PUSH
66386: LD_EXP 124
66390: IN
66391: NOT
66392: IFFALSE 66449
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
66394: LD_ADDR_EXP 124
66398: PUSH
66399: LD_EXP 124
66403: PPUSH
66404: LD_EXP 124
66408: PUSH
66409: LD_INT 1
66411: PLUS
66412: PPUSH
66413: LD_VAR 0 1
66417: PPUSH
66418: CALL_OW 1
66422: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
66423: LD_ADDR_EXP 125
66427: PUSH
66428: LD_EXP 125
66432: PPUSH
66433: LD_EXP 125
66437: PUSH
66438: LD_INT 1
66440: PLUS
66441: PPUSH
66442: EMPTY
66443: PPUSH
66444: CALL_OW 1
66448: ST_TO_ADDR
// end end ;
66449: GO 66378
66451: POP
66452: POP
// for i := minerMinesList downto 1 do
66453: LD_ADDR_VAR 0 1
66457: PUSH
66458: DOUBLE
66459: LD_EXP 125
66463: INC
66464: ST_TO_ADDR
66465: LD_INT 1
66467: PUSH
66468: FOR_DOWNTO
66469: IFFALSE 66805
// begin if IsLive ( minersList [ i ] ) then
66471: LD_EXP 124
66475: PUSH
66476: LD_VAR 0 1
66480: ARRAY
66481: PPUSH
66482: CALL_OW 300
66486: IFFALSE 66514
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
66488: LD_EXP 124
66492: PUSH
66493: LD_VAR 0 1
66497: ARRAY
66498: PPUSH
66499: LD_EXP 125
66503: PUSH
66504: LD_VAR 0 1
66508: ARRAY
66509: PPUSH
66510: CALL_OW 505
// if not minerMinesList [ i ] then
66514: LD_EXP 125
66518: PUSH
66519: LD_VAR 0 1
66523: ARRAY
66524: NOT
66525: IFFALSE 66529
// continue ;
66527: GO 66468
// for j := minerMinesList [ i ] downto 1 do
66529: LD_ADDR_VAR 0 2
66533: PUSH
66534: DOUBLE
66535: LD_EXP 125
66539: PUSH
66540: LD_VAR 0 1
66544: ARRAY
66545: INC
66546: ST_TO_ADDR
66547: LD_INT 1
66549: PUSH
66550: FOR_DOWNTO
66551: IFFALSE 66801
// begin side := GetSide ( minersList [ i ] ) ;
66553: LD_ADDR_VAR 0 3
66557: PUSH
66558: LD_EXP 124
66562: PUSH
66563: LD_VAR 0 1
66567: ARRAY
66568: PPUSH
66569: CALL_OW 255
66573: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
66574: LD_ADDR_VAR 0 4
66578: PUSH
66579: LD_EXP 125
66583: PUSH
66584: LD_VAR 0 1
66588: ARRAY
66589: PUSH
66590: LD_VAR 0 2
66594: ARRAY
66595: PUSH
66596: LD_INT 1
66598: ARRAY
66599: PPUSH
66600: LD_EXP 125
66604: PUSH
66605: LD_VAR 0 1
66609: ARRAY
66610: PUSH
66611: LD_VAR 0 2
66615: ARRAY
66616: PUSH
66617: LD_INT 2
66619: ARRAY
66620: PPUSH
66621: CALL_OW 428
66625: ST_TO_ADDR
// if not tmp then
66626: LD_VAR 0 4
66630: NOT
66631: IFFALSE 66635
// continue ;
66633: GO 66550
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66635: LD_VAR 0 4
66639: PUSH
66640: LD_INT 81
66642: PUSH
66643: LD_VAR 0 3
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PPUSH
66652: CALL_OW 69
66656: IN
66657: PUSH
66658: LD_EXP 125
66662: PUSH
66663: LD_VAR 0 1
66667: ARRAY
66668: PUSH
66669: LD_VAR 0 2
66673: ARRAY
66674: PUSH
66675: LD_INT 1
66677: ARRAY
66678: PPUSH
66679: LD_EXP 125
66683: PUSH
66684: LD_VAR 0 1
66688: ARRAY
66689: PUSH
66690: LD_VAR 0 2
66694: ARRAY
66695: PUSH
66696: LD_INT 2
66698: ARRAY
66699: PPUSH
66700: CALL_OW 458
66704: AND
66705: IFFALSE 66799
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66707: LD_EXP 125
66711: PUSH
66712: LD_VAR 0 1
66716: ARRAY
66717: PUSH
66718: LD_VAR 0 2
66722: ARRAY
66723: PUSH
66724: LD_INT 1
66726: ARRAY
66727: PPUSH
66728: LD_EXP 125
66732: PUSH
66733: LD_VAR 0 1
66737: ARRAY
66738: PUSH
66739: LD_VAR 0 2
66743: ARRAY
66744: PUSH
66745: LD_INT 2
66747: ARRAY
66748: PPUSH
66749: LD_VAR 0 3
66753: PPUSH
66754: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66758: LD_ADDR_EXP 125
66762: PUSH
66763: LD_EXP 125
66767: PPUSH
66768: LD_VAR 0 1
66772: PPUSH
66773: LD_EXP 125
66777: PUSH
66778: LD_VAR 0 1
66782: ARRAY
66783: PPUSH
66784: LD_VAR 0 2
66788: PPUSH
66789: CALL_OW 3
66793: PPUSH
66794: CALL_OW 1
66798: ST_TO_ADDR
// end ; end ;
66799: GO 66550
66801: POP
66802: POP
// end ;
66803: GO 66468
66805: POP
66806: POP
// end ;
66807: PPOPN 4
66809: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66810: LD_INT 0
66812: PPUSH
66813: PPUSH
// result := false ;
66814: LD_ADDR_VAR 0 4
66818: PUSH
66819: LD_INT 0
66821: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66822: LD_VAR 0 1
66826: PPUSH
66827: CALL_OW 264
66831: PUSH
66832: LD_EXP 45
66836: EQUAL
66837: NOT
66838: IFFALSE 66842
// exit ;
66840: GO 67082
// index := GetElementIndex ( minersList , unit ) ;
66842: LD_ADDR_VAR 0 5
66846: PUSH
66847: LD_EXP 124
66851: PPUSH
66852: LD_VAR 0 1
66856: PPUSH
66857: CALL 11735 0 2
66861: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66862: LD_EXP 125
66866: PUSH
66867: LD_VAR 0 5
66871: ARRAY
66872: PUSH
66873: LD_EXP 126
66877: GREATEREQUAL
66878: IFFALSE 66882
// exit ;
66880: GO 67082
// ComMoveXY ( unit , x , y ) ;
66882: LD_VAR 0 1
66886: PPUSH
66887: LD_VAR 0 2
66891: PPUSH
66892: LD_VAR 0 3
66896: PPUSH
66897: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66901: LD_INT 35
66903: PPUSH
66904: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66908: LD_VAR 0 1
66912: PPUSH
66913: LD_VAR 0 2
66917: PPUSH
66918: LD_VAR 0 3
66922: PPUSH
66923: CALL 43004 0 3
66927: NOT
66928: PUSH
66929: LD_VAR 0 1
66933: PPUSH
66934: CALL_OW 314
66938: AND
66939: IFFALSE 66943
// exit ;
66941: GO 67082
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66943: LD_VAR 0 2
66947: PPUSH
66948: LD_VAR 0 3
66952: PPUSH
66953: CALL_OW 428
66957: PUSH
66958: LD_VAR 0 1
66962: EQUAL
66963: PUSH
66964: LD_VAR 0 1
66968: PPUSH
66969: CALL_OW 314
66973: NOT
66974: AND
66975: IFFALSE 66901
// PlaySoundXY ( x , y , PlantMine ) ;
66977: LD_VAR 0 2
66981: PPUSH
66982: LD_VAR 0 3
66986: PPUSH
66987: LD_STRING PlantMine
66989: PPUSH
66990: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66994: LD_VAR 0 2
66998: PPUSH
66999: LD_VAR 0 3
67003: PPUSH
67004: LD_VAR 0 1
67008: PPUSH
67009: CALL_OW 255
67013: PPUSH
67014: LD_INT 0
67016: PPUSH
67017: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67021: LD_ADDR_EXP 125
67025: PUSH
67026: LD_EXP 125
67030: PPUSH
67031: LD_VAR 0 5
67035: PUSH
67036: LD_EXP 125
67040: PUSH
67041: LD_VAR 0 5
67045: ARRAY
67046: PUSH
67047: LD_INT 1
67049: PLUS
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PPUSH
67055: LD_VAR 0 2
67059: PUSH
67060: LD_VAR 0 3
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PPUSH
67069: CALL 11950 0 3
67073: ST_TO_ADDR
// result := true ;
67074: LD_ADDR_VAR 0 4
67078: PUSH
67079: LD_INT 1
67081: ST_TO_ADDR
// end ;
67082: LD_VAR 0 4
67086: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67087: LD_INT 0
67089: PPUSH
67090: PPUSH
67091: PPUSH
// if not unit in minersList then
67092: LD_VAR 0 1
67096: PUSH
67097: LD_EXP 124
67101: IN
67102: NOT
67103: IFFALSE 67107
// exit ;
67105: GO 67499
// index := GetElementIndex ( minersList , unit ) ;
67107: LD_ADDR_VAR 0 6
67111: PUSH
67112: LD_EXP 124
67116: PPUSH
67117: LD_VAR 0 1
67121: PPUSH
67122: CALL 11735 0 2
67126: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67127: LD_ADDR_VAR 0 5
67131: PUSH
67132: DOUBLE
67133: LD_EXP 125
67137: PUSH
67138: LD_VAR 0 6
67142: ARRAY
67143: INC
67144: ST_TO_ADDR
67145: LD_INT 1
67147: PUSH
67148: FOR_DOWNTO
67149: IFFALSE 67310
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
67151: LD_EXP 125
67155: PUSH
67156: LD_VAR 0 6
67160: ARRAY
67161: PUSH
67162: LD_VAR 0 5
67166: ARRAY
67167: PUSH
67168: LD_INT 1
67170: ARRAY
67171: PUSH
67172: LD_VAR 0 2
67176: EQUAL
67177: PUSH
67178: LD_EXP 125
67182: PUSH
67183: LD_VAR 0 6
67187: ARRAY
67188: PUSH
67189: LD_VAR 0 5
67193: ARRAY
67194: PUSH
67195: LD_INT 2
67197: ARRAY
67198: PUSH
67199: LD_VAR 0 3
67203: EQUAL
67204: AND
67205: IFFALSE 67308
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67207: LD_EXP 125
67211: PUSH
67212: LD_VAR 0 6
67216: ARRAY
67217: PUSH
67218: LD_VAR 0 5
67222: ARRAY
67223: PUSH
67224: LD_INT 1
67226: ARRAY
67227: PPUSH
67228: LD_EXP 125
67232: PUSH
67233: LD_VAR 0 6
67237: ARRAY
67238: PUSH
67239: LD_VAR 0 5
67243: ARRAY
67244: PUSH
67245: LD_INT 2
67247: ARRAY
67248: PPUSH
67249: LD_VAR 0 1
67253: PPUSH
67254: CALL_OW 255
67258: PPUSH
67259: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67263: LD_ADDR_EXP 125
67267: PUSH
67268: LD_EXP 125
67272: PPUSH
67273: LD_VAR 0 6
67277: PPUSH
67278: LD_EXP 125
67282: PUSH
67283: LD_VAR 0 6
67287: ARRAY
67288: PPUSH
67289: LD_VAR 0 5
67293: PPUSH
67294: CALL_OW 3
67298: PPUSH
67299: CALL_OW 1
67303: ST_TO_ADDR
// exit ;
67304: POP
67305: POP
67306: GO 67499
// end ; end ;
67308: GO 67148
67310: POP
67311: POP
// for i := minerMinesList [ index ] downto 1 do
67312: LD_ADDR_VAR 0 5
67316: PUSH
67317: DOUBLE
67318: LD_EXP 125
67322: PUSH
67323: LD_VAR 0 6
67327: ARRAY
67328: INC
67329: ST_TO_ADDR
67330: LD_INT 1
67332: PUSH
67333: FOR_DOWNTO
67334: IFFALSE 67497
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
67336: LD_EXP 125
67340: PUSH
67341: LD_VAR 0 6
67345: ARRAY
67346: PUSH
67347: LD_VAR 0 5
67351: ARRAY
67352: PUSH
67353: LD_INT 1
67355: ARRAY
67356: PPUSH
67357: LD_EXP 125
67361: PUSH
67362: LD_VAR 0 6
67366: ARRAY
67367: PUSH
67368: LD_VAR 0 5
67372: ARRAY
67373: PUSH
67374: LD_INT 2
67376: ARRAY
67377: PPUSH
67378: LD_VAR 0 2
67382: PPUSH
67383: LD_VAR 0 3
67387: PPUSH
67388: CALL_OW 298
67392: PUSH
67393: LD_INT 6
67395: LESS
67396: IFFALSE 67495
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67398: LD_EXP 125
67402: PUSH
67403: LD_VAR 0 6
67407: ARRAY
67408: PUSH
67409: LD_VAR 0 5
67413: ARRAY
67414: PUSH
67415: LD_INT 1
67417: ARRAY
67418: PPUSH
67419: LD_EXP 125
67423: PUSH
67424: LD_VAR 0 6
67428: ARRAY
67429: PUSH
67430: LD_VAR 0 5
67434: ARRAY
67435: PUSH
67436: LD_INT 2
67438: ARRAY
67439: PPUSH
67440: LD_VAR 0 1
67444: PPUSH
67445: CALL_OW 255
67449: PPUSH
67450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67454: LD_ADDR_EXP 125
67458: PUSH
67459: LD_EXP 125
67463: PPUSH
67464: LD_VAR 0 6
67468: PPUSH
67469: LD_EXP 125
67473: PUSH
67474: LD_VAR 0 6
67478: ARRAY
67479: PPUSH
67480: LD_VAR 0 5
67484: PPUSH
67485: CALL_OW 3
67489: PPUSH
67490: CALL_OW 1
67494: ST_TO_ADDR
// end ; end ;
67495: GO 67333
67497: POP
67498: POP
// end ;
67499: LD_VAR 0 4
67503: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
67504: LD_INT 0
67506: PPUSH
67507: PPUSH
67508: PPUSH
67509: PPUSH
67510: PPUSH
67511: PPUSH
67512: PPUSH
67513: PPUSH
67514: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
67515: LD_VAR 0 1
67519: PPUSH
67520: CALL_OW 264
67524: PUSH
67525: LD_EXP 45
67529: EQUAL
67530: NOT
67531: PUSH
67532: LD_VAR 0 1
67536: PUSH
67537: LD_EXP 124
67541: IN
67542: NOT
67543: OR
67544: IFFALSE 67548
// exit ;
67546: GO 67870
// index := GetElementIndex ( minersList , unit ) ;
67548: LD_ADDR_VAR 0 6
67552: PUSH
67553: LD_EXP 124
67557: PPUSH
67558: LD_VAR 0 1
67562: PPUSH
67563: CALL 11735 0 2
67567: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
67568: LD_ADDR_VAR 0 8
67572: PUSH
67573: LD_EXP 126
67577: PUSH
67578: LD_EXP 125
67582: PUSH
67583: LD_VAR 0 6
67587: ARRAY
67588: MINUS
67589: ST_TO_ADDR
// if not minesFreeAmount then
67590: LD_VAR 0 8
67594: NOT
67595: IFFALSE 67599
// exit ;
67597: GO 67870
// tmp := [ ] ;
67599: LD_ADDR_VAR 0 7
67603: PUSH
67604: EMPTY
67605: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67606: LD_ADDR_VAR 0 5
67610: PUSH
67611: DOUBLE
67612: LD_INT 1
67614: DEC
67615: ST_TO_ADDR
67616: LD_VAR 0 8
67620: PUSH
67621: FOR_TO
67622: IFFALSE 67817
// begin _d := rand ( 0 , 5 ) ;
67624: LD_ADDR_VAR 0 11
67628: PUSH
67629: LD_INT 0
67631: PPUSH
67632: LD_INT 5
67634: PPUSH
67635: CALL_OW 12
67639: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67640: LD_ADDR_VAR 0 12
67644: PUSH
67645: LD_INT 2
67647: PPUSH
67648: LD_INT 6
67650: PPUSH
67651: CALL_OW 12
67655: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67656: LD_ADDR_VAR 0 9
67660: PUSH
67661: LD_VAR 0 2
67665: PPUSH
67666: LD_VAR 0 11
67670: PPUSH
67671: LD_VAR 0 12
67675: PPUSH
67676: CALL_OW 272
67680: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67681: LD_ADDR_VAR 0 10
67685: PUSH
67686: LD_VAR 0 3
67690: PPUSH
67691: LD_VAR 0 11
67695: PPUSH
67696: LD_VAR 0 12
67700: PPUSH
67701: CALL_OW 273
67705: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67706: LD_VAR 0 9
67710: PPUSH
67711: LD_VAR 0 10
67715: PPUSH
67716: CALL_OW 488
67720: PUSH
67721: LD_VAR 0 9
67725: PUSH
67726: LD_VAR 0 10
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_VAR 0 7
67739: IN
67740: NOT
67741: AND
67742: PUSH
67743: LD_VAR 0 9
67747: PPUSH
67748: LD_VAR 0 10
67752: PPUSH
67753: CALL_OW 458
67757: NOT
67758: AND
67759: IFFALSE 67801
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67761: LD_ADDR_VAR 0 7
67765: PUSH
67766: LD_VAR 0 7
67770: PPUSH
67771: LD_VAR 0 7
67775: PUSH
67776: LD_INT 1
67778: PLUS
67779: PPUSH
67780: LD_VAR 0 9
67784: PUSH
67785: LD_VAR 0 10
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PPUSH
67794: CALL_OW 1
67798: ST_TO_ADDR
67799: GO 67815
// i := i - 1 ;
67801: LD_ADDR_VAR 0 5
67805: PUSH
67806: LD_VAR 0 5
67810: PUSH
67811: LD_INT 1
67813: MINUS
67814: ST_TO_ADDR
// end ;
67815: GO 67621
67817: POP
67818: POP
// for i in tmp do
67819: LD_ADDR_VAR 0 5
67823: PUSH
67824: LD_VAR 0 7
67828: PUSH
67829: FOR_IN
67830: IFFALSE 67868
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67832: LD_VAR 0 1
67836: PPUSH
67837: LD_VAR 0 5
67841: PUSH
67842: LD_INT 1
67844: ARRAY
67845: PPUSH
67846: LD_VAR 0 5
67850: PUSH
67851: LD_INT 2
67853: ARRAY
67854: PPUSH
67855: CALL 66810 0 3
67859: NOT
67860: IFFALSE 67866
// exit ;
67862: POP
67863: POP
67864: GO 67870
67866: GO 67829
67868: POP
67869: POP
// end ;
67870: LD_VAR 0 4
67874: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67875: LD_INT 0
67877: PPUSH
67878: PPUSH
67879: PPUSH
67880: PPUSH
67881: PPUSH
67882: PPUSH
67883: PPUSH
// if not GetClass ( unit ) = class_sniper then
67884: LD_VAR 0 1
67888: PPUSH
67889: CALL_OW 257
67893: PUSH
67894: LD_INT 5
67896: EQUAL
67897: NOT
67898: IFFALSE 67902
// exit ;
67900: GO 68290
// dist := 8 ;
67902: LD_ADDR_VAR 0 5
67906: PUSH
67907: LD_INT 8
67909: ST_TO_ADDR
// viewRange := 12 ;
67910: LD_ADDR_VAR 0 7
67914: PUSH
67915: LD_INT 12
67917: ST_TO_ADDR
// side := GetSide ( unit ) ;
67918: LD_ADDR_VAR 0 6
67922: PUSH
67923: LD_VAR 0 1
67927: PPUSH
67928: CALL_OW 255
67932: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67933: LD_INT 61
67935: PPUSH
67936: LD_VAR 0 6
67940: PPUSH
67941: CALL_OW 321
67945: PUSH
67946: LD_INT 2
67948: EQUAL
67949: IFFALSE 67959
// viewRange := 16 ;
67951: LD_ADDR_VAR 0 7
67955: PUSH
67956: LD_INT 16
67958: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67959: LD_VAR 0 1
67963: PPUSH
67964: LD_VAR 0 2
67968: PPUSH
67969: LD_VAR 0 3
67973: PPUSH
67974: CALL_OW 297
67978: PUSH
67979: LD_VAR 0 5
67983: GREATER
67984: IFFALSE 68063
// begin ComMoveXY ( unit , x , y ) ;
67986: LD_VAR 0 1
67990: PPUSH
67991: LD_VAR 0 2
67995: PPUSH
67996: LD_VAR 0 3
68000: PPUSH
68001: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68005: LD_INT 35
68007: PPUSH
68008: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68012: LD_VAR 0 1
68016: PPUSH
68017: LD_VAR 0 2
68021: PPUSH
68022: LD_VAR 0 3
68026: PPUSH
68027: CALL 43004 0 3
68031: NOT
68032: IFFALSE 68036
// exit ;
68034: GO 68290
// until GetDistUnitXY ( unit , x , y ) < dist ;
68036: LD_VAR 0 1
68040: PPUSH
68041: LD_VAR 0 2
68045: PPUSH
68046: LD_VAR 0 3
68050: PPUSH
68051: CALL_OW 297
68055: PUSH
68056: LD_VAR 0 5
68060: LESS
68061: IFFALSE 68005
// end ; ComTurnXY ( unit , x , y ) ;
68063: LD_VAR 0 1
68067: PPUSH
68068: LD_VAR 0 2
68072: PPUSH
68073: LD_VAR 0 3
68077: PPUSH
68078: CALL_OW 118
// wait ( 5 ) ;
68082: LD_INT 5
68084: PPUSH
68085: CALL_OW 67
// _d := GetDir ( unit ) ;
68089: LD_ADDR_VAR 0 10
68093: PUSH
68094: LD_VAR 0 1
68098: PPUSH
68099: CALL_OW 254
68103: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
68104: LD_ADDR_VAR 0 8
68108: PUSH
68109: LD_VAR 0 1
68113: PPUSH
68114: CALL_OW 250
68118: PPUSH
68119: LD_VAR 0 10
68123: PPUSH
68124: LD_VAR 0 5
68128: PPUSH
68129: CALL_OW 272
68133: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
68134: LD_ADDR_VAR 0 9
68138: PUSH
68139: LD_VAR 0 1
68143: PPUSH
68144: CALL_OW 251
68148: PPUSH
68149: LD_VAR 0 10
68153: PPUSH
68154: LD_VAR 0 5
68158: PPUSH
68159: CALL_OW 273
68163: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68164: LD_VAR 0 8
68168: PPUSH
68169: LD_VAR 0 9
68173: PPUSH
68174: CALL_OW 488
68178: NOT
68179: IFFALSE 68183
// exit ;
68181: GO 68290
// ComAnimCustom ( unit , 1 ) ;
68183: LD_VAR 0 1
68187: PPUSH
68188: LD_INT 1
68190: PPUSH
68191: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68195: LD_VAR 0 8
68199: PPUSH
68200: LD_VAR 0 9
68204: PPUSH
68205: LD_VAR 0 6
68209: PPUSH
68210: LD_VAR 0 7
68214: PPUSH
68215: CALL_OW 330
// repeat wait ( 1 ) ;
68219: LD_INT 1
68221: PPUSH
68222: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
68226: LD_VAR 0 1
68230: PPUSH
68231: CALL_OW 316
68235: PUSH
68236: LD_VAR 0 1
68240: PPUSH
68241: CALL_OW 314
68245: OR
68246: PUSH
68247: LD_VAR 0 1
68251: PPUSH
68252: CALL_OW 302
68256: NOT
68257: OR
68258: PUSH
68259: LD_VAR 0 1
68263: PPUSH
68264: CALL_OW 301
68268: OR
68269: IFFALSE 68219
// RemoveSeeing ( _x , _y , side ) ;
68271: LD_VAR 0 8
68275: PPUSH
68276: LD_VAR 0 9
68280: PPUSH
68281: LD_VAR 0 6
68285: PPUSH
68286: CALL_OW 331
// end ;
68290: LD_VAR 0 4
68294: RET
