// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 18700 0 0
// PrepareRussian ;
  12: CALL 1919 0 0
// PrepareArabian ;
  16: CALL 370 0 0
// Action ;
  20: CALL 3533 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// enable ( entranceEvent ) ;
 359: LD_INT 1
 361: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 362: LD_INT 2
 364: DISABLE_MARKED
// end ; end_of_file
 365: LD_VAR 0 1
 369: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 370: LD_INT 0
 372: PPUSH
 373: PPUSH
// uc_side := 4 ;
 374: LD_ADDR_OWVAR 20
 378: PUSH
 379: LD_INT 4
 381: ST_TO_ADDR
// uc_nation := 1 ;
 382: LD_ADDR_OWVAR 21
 386: PUSH
 387: LD_INT 1
 389: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 390: LD_ADDR_EXP 50
 394: PUSH
 395: LD_STRING 07_Americans
 397: PPUSH
 398: CALL_OW 31
 402: ST_TO_ADDR
// if americanSquad < 5 then
 403: LD_EXP 50
 407: PUSH
 408: LD_INT 5
 410: LESS
 411: IFFALSE 505
// begin if not americanSquad then
 413: LD_EXP 50
 417: NOT
 418: IFFALSE 427
// americanSquad := [ ] ;
 420: LD_ADDR_EXP 50
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 427: LD_ADDR_VAR 0 2
 431: PUSH
 432: DOUBLE
 433: LD_EXP 50
 437: DEC
 438: ST_TO_ADDR
 439: LD_INT 2
 441: PUSH
 442: LD_INT 3
 444: PUSH
 445: LD_INT 4
 447: PUSH
 448: LD_INT 4
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: PUSH
 463: FOR_TO
 464: IFFALSE 501
// begin PrepareHuman ( false , 2 , 6 ) ;
 466: LD_INT 0
 468: PPUSH
 469: LD_INT 2
 471: PPUSH
 472: LD_INT 6
 474: PPUSH
 475: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 479: LD_ADDR_EXP 50
 483: PUSH
 484: LD_EXP 50
 488: PPUSH
 489: CALL_OW 44
 493: PPUSH
 494: CALL 64076 0 2
 498: ST_TO_ADDR
// end ;
 499: GO 463
 501: POP
 502: POP
// end else
 503: GO 552
// for i := Count ( americanSquad ) downto 5 do
 505: LD_ADDR_VAR 0 2
 509: PUSH
 510: DOUBLE
 511: LD_EXP 50
 515: PPUSH
 516: CALL 28729 0 1
 520: INC
 521: ST_TO_ADDR
 522: LD_INT 5
 524: PUSH
 525: FOR_DOWNTO
 526: IFFALSE 550
// americanSquad := Delete ( americanSquad , i ) ;
 528: LD_ADDR_EXP 50
 532: PUSH
 533: LD_EXP 50
 537: PPUSH
 538: LD_VAR 0 2
 542: PPUSH
 543: CALL_OW 3
 547: ST_TO_ADDR
 548: GO 525
 550: POP
 551: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 552: LD_ADDR_EXP 52
 556: PUSH
 557: LD_STRING UsCommander
 559: PPUSH
 560: LD_EXP 1
 564: NOT
 565: PPUSH
 566: LD_STRING 07_
 568: PPUSH
 569: CALL 26627 0 3
 573: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 574: LD_INT 1
 576: PPUSH
 577: LD_INT 6
 579: PPUSH
 580: CALL_OW 381
// Jerry := CreateHuman ;
 584: LD_ADDR_EXP 53
 588: PUSH
 589: CALL_OW 44
 593: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 594: LD_EXP 53
 598: PPUSH
 599: LD_INT 33
 601: PPUSH
 602: CALL_OW 336
// if not Doug then
 606: LD_EXP 52
 610: NOT
 611: IFFALSE 633
// begin PrepareSoldier ( sex_male , 6 ) ;
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 6
 618: PPUSH
 619: CALL_OW 381
// Doug := CreateHuman ;
 623: LD_ADDR_EXP 52
 627: PUSH
 628: CALL_OW 44
 632: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 633: LD_EXP 52
 637: PPUSH
 638: LD_INT 33
 640: PPUSH
 641: CALL_OW 336
// if true or johnnySaved or debug then
 645: LD_INT 1
 647: PUSH
 648: LD_EXP 3
 652: OR
 653: PUSH
 654: LD_EXP 1
 658: OR
 659: IFFALSE 686
// begin Harris := NewCharacter ( Harris ) ;
 661: LD_ADDR_EXP 51
 665: PUSH
 666: LD_STRING Harris
 668: PPUSH
 669: CALL_OW 25
 673: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 674: LD_EXP 51
 678: PPUSH
 679: LD_INT 33
 681: PPUSH
 682: CALL_OW 336
// end ; uc_side := 2 ;
 686: LD_ADDR_OWVAR 20
 690: PUSH
 691: LD_INT 2
 693: ST_TO_ADDR
// uc_nation := 2 ;
 694: LD_ADDR_OWVAR 21
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 702: LD_ADDR_EXP 38
 706: PUSH
 707: LD_STRING Heike
 709: PPUSH
 710: LD_EXP 1
 714: NOT
 715: PPUSH
 716: LD_EXP 2
 720: PPUSH
 721: CALL 26627 0 3
 725: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 726: LD_ADDR_EXP 41
 730: PUSH
 731: LD_STRING Ibrahim
 733: PPUSH
 734: LD_EXP 1
 738: NOT
 739: PPUSH
 740: LD_EXP 2
 744: PPUSH
 745: CALL 26627 0 3
 749: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 750: LD_ADDR_EXP 39
 754: PUSH
 755: LD_STRING Givi
 757: PPUSH
 758: LD_EXP 1
 762: NOT
 763: PPUSH
 764: LD_EXP 2
 768: PPUSH
 769: CALL 26627 0 3
 773: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 774: LD_ADDR_EXP 42
 778: PUSH
 779: LD_STRING Kamil
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 2
 792: PPUSH
 793: CALL 26627 0 3
 797: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 798: LD_ADDR_EXP 43
 802: PUSH
 803: LD_STRING Kaia
 805: PPUSH
 806: LD_EXP 1
 810: NOT
 811: PPUSH
 812: LD_EXP 2
 816: PPUSH
 817: CALL 26627 0 3
 821: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 822: LD_ADDR_EXP 44
 826: PUSH
 827: LD_STRING Sophia
 829: PPUSH
 830: LD_EXP 1
 834: NOT
 835: PPUSH
 836: LD_EXP 2
 840: PPUSH
 841: CALL 26627 0 3
 845: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 846: LD_ADDR_EXP 45
 850: PUSH
 851: LD_STRING Markov
 853: PPUSH
 854: LD_EXP 1
 858: NOT
 859: PPUSH
 860: LD_EXP 2
 864: PPUSH
 865: CALL 26627 0 3
 869: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 870: LD_ADDR_EXP 48
 874: PUSH
 875: LD_STRING Aviradze
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: LD_EXP 2
 888: PPUSH
 889: CALL 26627 0 3
 893: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 894: LD_ADDR_EXP 47
 898: PUSH
 899: LD_STRING Kurt
 901: PPUSH
 902: LD_EXP 1
 906: NOT
 907: PPUSH
 908: LD_EXP 2
 912: PPUSH
 913: CALL 26627 0 3
 917: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 918: LD_ADDR_EXP 40
 922: PUSH
 923: LD_STRING Mike
 925: PPUSH
 926: LD_EXP 1
 930: NOT
 931: PPUSH
 932: LD_EXP 2
 936: PPUSH
 937: CALL 26627 0 3
 941: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 942: LD_ADDR_EXP 46
 946: PUSH
 947: LD_STRING Olaf
 949: PPUSH
 950: CALL_OW 25
 954: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 955: LD_ADDR_EXP 49
 959: PUSH
 960: LD_STRING 07_others
 962: PPUSH
 963: CALL_OW 31
 967: ST_TO_ADDR
// end ;
 968: LD_VAR 0 1
 972: RET
// export function PrepareGame ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 977: LD_EXP 38
 981: PPUSH
 982: LD_INT 23
 984: PPUSH
 985: CALL_OW 52
// if Givi then
 989: LD_EXP 39
 993: IFFALSE 1031
// begin SetSide ( Givi , 5 ) ;
 995: LD_EXP 39
 999: PPUSH
1000: LD_INT 5
1002: PPUSH
1003: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1007: LD_EXP 39
1011: PPUSH
1012: LD_INT 9
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL_OW 49
// ComHold ( Givi ) ;
1022: LD_EXP 39
1026: PPUSH
1027: CALL_OW 140
// end ; if Markov then
1031: LD_EXP 45
1035: IFFALSE 1073
// begin SetSide ( Markov , 5 ) ;
1037: LD_EXP 45
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1049: LD_EXP 45
1053: PPUSH
1054: LD_INT 3
1056: PPUSH
1057: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1061: LD_EXP 45
1065: PPUSH
1066: LD_INT 61
1068: PPUSH
1069: CALL_OW 52
// end ; if Mike then
1073: LD_EXP 40
1077: IFFALSE 1115
// begin SetSide ( Mike , 5 ) ;
1079: LD_EXP 40
1083: PPUSH
1084: LD_INT 5
1086: PPUSH
1087: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1091: LD_EXP 40
1095: PPUSH
1096: LD_INT 17
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL_OW 49
// ComHold ( Mike ) ;
1106: LD_EXP 40
1110: PPUSH
1111: CALL_OW 140
// end ; if Olaf then
1115: LD_EXP 46
1119: IFFALSE 1160
// begin SetSide ( Olaf , 5 ) ;
1121: LD_EXP 46
1125: PPUSH
1126: LD_INT 5
1128: PPUSH
1129: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1133: LD_EXP 46
1137: PPUSH
1138: LD_INT 16
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1148: LD_EXP 46
1152: PPUSH
1153: LD_INT 3
1155: PPUSH
1156: CALL 67228 0 2
// end ; if Kamil then
1160: LD_EXP 42
1164: IFFALSE 1190
// begin SetSide ( Kamil , 5 ) ;
1166: LD_EXP 42
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1178: LD_EXP 42
1182: PPUSH
1183: LD_INT 109
1185: PPUSH
1186: CALL_OW 52
// end ; if Kurt then
1190: LD_EXP 47
1194: IFFALSE 1220
// begin SetSide ( Kurt , 5 ) ;
1196: LD_EXP 47
1200: PPUSH
1201: LD_INT 5
1203: PPUSH
1204: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1208: LD_EXP 47
1212: PPUSH
1213: LD_INT 169
1215: PPUSH
1216: CALL_OW 52
// end ; if Kaia then
1220: LD_EXP 43
1224: IFFALSE 1250
// begin SetSide ( Kaia , 5 ) ;
1226: LD_EXP 43
1230: PPUSH
1231: LD_INT 5
1233: PPUSH
1234: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1238: LD_EXP 43
1242: PPUSH
1243: LD_INT 147
1245: PPUSH
1246: CALL_OW 52
// end ; if Sophia then
1250: LD_EXP 44
1254: IFFALSE 1295
// begin SetSide ( Sophia , 5 ) ;
1256: LD_EXP 44
1260: PPUSH
1261: LD_INT 5
1263: PPUSH
1264: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1268: LD_EXP 44
1272: PPUSH
1273: LD_INT 142
1275: PPUSH
1276: LD_INT 96
1278: PPUSH
1279: LD_INT 0
1281: PPUSH
1282: CALL_OW 48
// ComHold ( Sophia ) ;
1286: LD_EXP 44
1290: PPUSH
1291: CALL_OW 140
// end ; if Harris then
1295: LD_EXP 51
1299: IFFALSE 1337
// begin SetSide ( Harris , 4 ) ;
1301: LD_EXP 51
1305: PPUSH
1306: LD_INT 4
1308: PPUSH
1309: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1313: LD_EXP 51
1317: PPUSH
1318: LD_INT 20
1320: PPUSH
1321: LD_INT 0
1323: PPUSH
1324: CALL_OW 49
// ComHold ( i ) ;
1328: LD_VAR 0 2
1332: PPUSH
1333: CALL_OW 140
// end ; if Doug then
1337: LD_EXP 52
1341: IFFALSE 1367
// begin SetSide ( Doug , 4 ) ;
1343: LD_EXP 52
1347: PPUSH
1348: LD_INT 4
1350: PPUSH
1351: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1355: LD_EXP 52
1359: PPUSH
1360: LD_INT 106
1362: PPUSH
1363: CALL_OW 52
// end ; if Aviradze then
1367: LD_EXP 48
1371: IFFALSE 1397
// begin SetSide ( Aviradze , 5 ) ;
1373: LD_EXP 48
1377: PPUSH
1378: LD_INT 5
1380: PPUSH
1381: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1385: LD_EXP 48
1389: PPUSH
1390: LD_INT 119
1392: PPUSH
1393: CALL_OW 52
// end ; if Ibrahim then
1397: LD_EXP 41
1401: IFFALSE 1427
// begin SetSide ( Ibrahim , 5 ) ;
1403: LD_EXP 41
1407: PPUSH
1408: LD_INT 5
1410: PPUSH
1411: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1415: LD_EXP 41
1419: PPUSH
1420: LD_INT 119
1422: PPUSH
1423: CALL_OW 52
// end ; if Jerry then
1427: LD_EXP 53
1431: IFFALSE 1472
// begin SetSide ( Jerry , 4 ) ;
1433: LD_EXP 53
1437: PPUSH
1438: LD_INT 4
1440: PPUSH
1441: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1445: LD_EXP 53
1449: PPUSH
1450: LD_INT 119
1452: PPUSH
1453: LD_INT 59
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 48
// ComHold ( Jerry ) ;
1463: LD_EXP 53
1467: PPUSH
1468: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1472: LD_EXP 57
1476: PPUSH
1477: LD_INT 119
1479: PPUSH
1480: CALL_OW 52
// for i in americanSquad do
1484: LD_ADDR_VAR 0 2
1488: PUSH
1489: LD_EXP 50
1493: PUSH
1494: FOR_IN
1495: IFFALSE 1523
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1497: LD_VAR 0 2
1501: PPUSH
1502: LD_INT 21
1504: PPUSH
1505: LD_INT 0
1507: PPUSH
1508: CALL_OW 49
// ComHold ( i ) ;
1512: LD_VAR 0 2
1516: PPUSH
1517: CALL_OW 140
// end ;
1521: GO 1494
1523: POP
1524: POP
// for i in heikeSecondSquad do
1525: LD_ADDR_VAR 0 2
1529: PUSH
1530: LD_EXP 49
1534: PUSH
1535: FOR_IN
1536: IFFALSE 1576
// begin SetSide ( i , 5 ) ;
1538: LD_VAR 0 2
1542: PPUSH
1543: LD_INT 5
1545: PPUSH
1546: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: LD_INT 22
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL_OW 49
// ComHold ( i ) ;
1565: LD_VAR 0 2
1569: PPUSH
1570: CALL_OW 140
// end ;
1574: GO 1535
1576: POP
1577: POP
// if not hasVodka then
1578: LD_EXP 4
1582: NOT
1583: IFFALSE 1642
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1585: LD_ADDR_VAR 0 2
1589: PUSH
1590: LD_INT 2
1592: PUSH
1593: LD_INT 22
1595: PUSH
1596: LD_INT 2
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 22
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: LIST
1617: PPUSH
1618: CALL_OW 69
1622: PUSH
1623: FOR_IN
1624: IFFALSE 1640
// SetLives ( i , 500 ) ;
1626: LD_VAR 0 2
1630: PPUSH
1631: LD_INT 500
1633: PPUSH
1634: CALL_OW 234
1638: GO 1623
1640: POP
1641: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1642: LD_ADDR_VAR 0 2
1646: PUSH
1647: LD_INT 22
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 69
1661: PUSH
1662: FOR_IN
1663: IFFALSE 1679
// SetLives ( i , 500 ) ;
1665: LD_VAR 0 2
1669: PPUSH
1670: LD_INT 500
1672: PPUSH
1673: CALL_OW 234
1677: GO 1662
1679: POP
1680: POP
// end ;
1681: LD_VAR 0 1
1685: RET
// export function SetClassKaiaRevolver ; begin
1686: LD_INT 0
1688: PPUSH
// if IsOk ( Kaia ) then
1689: LD_EXP 43
1693: PPUSH
1694: CALL_OW 302
1698: IFFALSE 1712
// SetClass ( Kaia , class_revolver ) ;
1700: LD_EXP 43
1704: PPUSH
1705: LD_INT 34
1707: PPUSH
1708: CALL_OW 336
// end ;
1712: LD_VAR 0 1
1716: RET
// export function SpawnHeikeAsRussian ; begin
1717: LD_INT 0
1719: PPUSH
// RemoveUnit ( Heike ) ;
1720: LD_EXP 38
1724: PPUSH
1725: CALL_OW 64
// heikeTmp := Heike ;
1729: LD_ADDR_EXP 54
1733: PUSH
1734: LD_EXP 38
1738: ST_TO_ADDR
// uc_side := 2 ;
1739: LD_ADDR_OWVAR 20
1743: PUSH
1744: LD_INT 2
1746: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1747: LD_ADDR_EXP 38
1751: PUSH
1752: LD_STRING HeikeRu
1754: PPUSH
1755: CALL_OW 25
1759: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1760: LD_EXP 54
1764: PPUSH
1765: LD_EXP 38
1769: PPUSH
1770: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1774: LD_EXP 38
1778: PPUSH
1779: LD_INT 165
1781: PPUSH
1782: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1786: LD_EXP 38
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: CALL_OW 336
// heikeAsRussian := true ;
1798: LD_ADDR_EXP 27
1802: PUSH
1803: LD_INT 1
1805: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1806: LD_STRING M1-laundry-out
1808: PPUSH
1809: CALL_OW 604
// end ;
1813: LD_VAR 0 1
1817: RET
// export function SpawnGiviAsRussian ; begin
1818: LD_INT 0
1820: PPUSH
// RemoveUnit ( Givi ) ;
1821: LD_EXP 39
1825: PPUSH
1826: CALL_OW 64
// giviTmp := Givi ;
1830: LD_ADDR_EXP 55
1834: PUSH
1835: LD_EXP 39
1839: ST_TO_ADDR
// uc_side := 2 ;
1840: LD_ADDR_OWVAR 20
1844: PUSH
1845: LD_INT 2
1847: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1848: LD_ADDR_EXP 39
1852: PUSH
1853: LD_STRING GiviRu
1855: PPUSH
1856: CALL_OW 25
1860: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1861: LD_EXP 55
1865: PPUSH
1866: LD_EXP 39
1870: PPUSH
1871: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1875: LD_EXP 39
1879: PPUSH
1880: LD_INT 165
1882: PPUSH
1883: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1887: LD_EXP 39
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL_OW 336
// giviAsRussian := true ;
1899: LD_ADDR_EXP 28
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1907: LD_STRING M1-laundry-out
1909: PPUSH
1910: CALL_OW 604
// end ; end_of_file
1914: LD_VAR 0 1
1918: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , tmp ; begin
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
1923: PPUSH
1924: PPUSH
// uc_side := 3 ;
1925: LD_ADDR_OWVAR 20
1929: PUSH
1930: LD_INT 3
1932: ST_TO_ADDR
// uc_nation := 3 ;
1933: LD_ADDR_OWVAR 21
1937: PUSH
1938: LD_INT 3
1940: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
1941: LD_INT 192
1943: PPUSH
1944: LD_STRING kitchen
1946: PPUSH
1947: CALL_OW 500
// SetBName ( laundry , laundry ) ;
1951: LD_INT 165
1953: PPUSH
1954: LD_STRING laundry
1956: PPUSH
1957: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
1961: LD_INT 54
1963: PPUSH
1964: LD_STRING adminSection
1966: PPUSH
1967: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1971: LD_ADDR_VAR 0 2
1975: PUSH
1976: LD_INT 21
1978: PUSH
1979: LD_INT 3
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PPUSH
1986: CALL_OW 69
1990: PUSH
1991: FOR_IN
1992: IFFALSE 2008
// SetBLevel ( i , 7 ) ;
1994: LD_VAR 0 2
1998: PPUSH
1999: LD_INT 7
2001: PPUSH
2002: CALL_OW 241
2006: GO 1991
2008: POP
2009: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_INT 22
2017: PUSH
2018: LD_INT 3
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 2
2027: PUSH
2028: LD_INT 30
2030: PUSH
2031: LD_INT 0
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 30
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PPUSH
2057: CALL_OW 69
2061: PUSH
2062: FOR_IN
2063: IFFALSE 2127
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: CALL_OW 274
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_INT 1000
2080: PPUSH
2081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2085: LD_VAR 0 2
2089: PPUSH
2090: CALL_OW 274
2094: PPUSH
2095: LD_INT 2
2097: PPUSH
2098: LD_INT 1000
2100: PPUSH
2101: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: CALL_OW 274
2114: PPUSH
2115: LD_INT 3
2117: PPUSH
2118: LD_INT 100
2120: PPUSH
2121: CALL_OW 277
// end ;
2125: GO 2062
2127: POP
2128: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2129: LD_ADDR_VAR 0 2
2133: PUSH
2134: LD_INT 22
2136: PUSH
2137: LD_INT 3
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 30
2146: PUSH
2147: LD_INT 32
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PPUSH
2158: CALL_OW 69
2162: PUSH
2163: FOR_IN
2164: IFFALSE 2198
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_OWVAR 67
2176: PLUS
2177: PPUSH
2178: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2182: CALL_OW 44
2186: PPUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: CALL_OW 52
// end ;
2196: GO 2163
2198: POP
2199: POP
// for i := 1 to 2 do
2200: LD_ADDR_VAR 0 2
2204: PUSH
2205: DOUBLE
2206: LD_INT 1
2208: DEC
2209: ST_TO_ADDR
2210: LD_INT 2
2212: PUSH
2213: FOR_TO
2214: IFFALSE 2266
// begin PrepareMechanic ( false , 8 ) ;
2216: LD_INT 0
2218: PPUSH
2219: LD_INT 8
2221: PPUSH
2222: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2226: LD_ADDR_EXP 59
2230: PUSH
2231: LD_EXP 59
2235: PPUSH
2236: CALL_OW 44
2240: PPUSH
2241: CALL 64076 0 2
2245: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2246: LD_EXP 59
2250: PUSH
2251: LD_EXP 59
2255: ARRAY
2256: PPUSH
2257: LD_INT 61
2259: PPUSH
2260: CALL_OW 52
// end ;
2264: GO 2213
2266: POP
2267: POP
// PrepareMechanic ( sex_male , 8 ) ;
2268: LD_INT 1
2270: PPUSH
2271: LD_INT 8
2273: PPUSH
2274: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2278: LD_ADDR_EXP 60
2282: PUSH
2283: LD_EXP 60
2287: PPUSH
2288: CALL_OW 44
2292: PPUSH
2293: CALL 64076 0 2
2297: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2298: LD_EXP 60
2302: PUSH
2303: LD_EXP 60
2307: ARRAY
2308: PPUSH
2309: LD_INT 196
2311: PPUSH
2312: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2316: LD_INT 1
2318: PPUSH
2319: LD_INT 8
2321: PPUSH
2322: CALL_OW 383
// hc_name := Stiepan Simonov ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Stiepan Simonov
2333: ST_TO_ADDR
// Stiopa := CreateHuman ;
2334: LD_ADDR_EXP 61
2338: PUSH
2339: CALL_OW 44
2343: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2344: LD_INT 2
2346: PPUSH
2347: LD_INT 8
2349: PPUSH
2350: CALL_OW 383
// hc_name := Laura Dragunov ;
2354: LD_ADDR_OWVAR 26
2358: PUSH
2359: LD_STRING Laura Dragunov
2361: ST_TO_ADDR
// Laura := CreateHuman ;
2362: LD_ADDR_EXP 62
2366: PUSH
2367: CALL_OW 44
2371: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2372: LD_EXP 62
2376: PPUSH
2377: LD_INT 196
2379: PPUSH
2380: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 8
2389: PPUSH
2390: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2394: LD_ADDR_EXP 59
2398: PUSH
2399: LD_EXP 59
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: CALL_OW 44
2411: PPUSH
2412: CALL_OW 2
2416: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2417: LD_EXP 59
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_INT 61
2428: PPUSH
2429: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2433: LD_INT 1
2435: PPUSH
2436: LD_INT 8
2438: PPUSH
2439: CALL_OW 381
// hc_name := Pavel Muchin ;
2443: LD_ADDR_OWVAR 26
2447: PUSH
2448: LD_STRING Pavel Muchin
2450: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2451: LD_ADDR_OWVAR 29
2455: PUSH
2456: LD_INT 13
2458: PUSH
2459: LD_INT 13
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2466: LD_ADDR_EXP 58
2470: PUSH
2471: CALL_OW 44
2475: ST_TO_ADDR
// InitHC_All ( ) ;
2476: CALL_OW 584
// uc_side := 6 ;
2480: LD_ADDR_OWVAR 20
2484: PUSH
2485: LD_INT 6
2487: ST_TO_ADDR
// uc_nation := 3 ;
2488: LD_ADDR_OWVAR 21
2492: PUSH
2493: LD_INT 3
2495: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2496: LD_ADDR_VAR 0 4
2500: PUSH
2501: LD_INT 14
2503: PUSH
2504: LD_INT 15
2506: PUSH
2507: LD_INT 48
2509: PUSH
2510: LD_INT 24
2512: PUSH
2513: LD_INT 149
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: ST_TO_ADDR
// for i in tmp do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: LD_VAR 0 4
2532: PUSH
2533: FOR_IN
2534: IFFALSE 2582
// begin for j := 1 to 2 do
2536: LD_ADDR_VAR 0 3
2540: PUSH
2541: DOUBLE
2542: LD_INT 1
2544: DEC
2545: ST_TO_ADDR
2546: LD_INT 2
2548: PUSH
2549: FOR_TO
2550: IFFALSE 2578
// begin PrepareSoldier ( false , 7 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 7
2557: PPUSH
2558: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2562: CALL_OW 44
2566: PPUSH
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 52
// end ;
2576: GO 2549
2578: POP
2579: POP
// end ;
2580: GO 2533
2582: POP
2583: POP
// end ;
2584: LD_VAR 0 1
2588: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2589: LD_INT 0
2591: PPUSH
2592: PPUSH
2593: PPUSH
2594: PPUSH
// uc_side := 3 ;
2595: LD_ADDR_OWVAR 20
2599: PUSH
2600: LD_INT 3
2602: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2603: LD_ADDR_OWVAR 21
2607: PUSH
2608: LD_INT 1
2610: PPUSH
2611: LD_INT 3
2613: PPUSH
2614: CALL_OW 12
2618: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_INT 5
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 517
2634: ST_TO_ADDR
// for i := 1 to 3 do
2635: LD_ADDR_VAR 0 2
2639: PUSH
2640: DOUBLE
2641: LD_INT 1
2643: DEC
2644: ST_TO_ADDR
2645: LD_INT 3
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2718
// begin PrepareHuman ( false , 33 , 0 ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 33
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 380
// un := CreateHuman ;
2664: LD_ADDR_VAR 0 3
2668: PUSH
2669: CALL_OW 44
2673: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_VAR 0 4
2683: PUSH
2684: LD_INT 1
2686: ARRAY
2687: PUSH
2688: LD_VAR 0 2
2692: ARRAY
2693: PPUSH
2694: LD_VAR 0 4
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PUSH
2703: LD_VAR 0 2
2707: ARRAY
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: CALL_OW 601
// end ;
2716: GO 2648
2718: POP
2719: POP
// end ;
2720: LD_VAR 0 1
2724: RET
// export function PrepareFirstScene ; var i , un ; begin
2725: LD_INT 0
2727: PPUSH
2728: PPUSH
2729: PPUSH
// uc_side := 4 ;
2730: LD_ADDR_OWVAR 20
2734: PUSH
2735: LD_INT 4
2737: ST_TO_ADDR
// uc_nation := 1 ;
2738: LD_ADDR_OWVAR 21
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 33
2751: PPUSH
2752: LD_INT 0
2754: PPUSH
2755: CALL_OW 380
// for i := 1 to 2 do
2759: LD_ADDR_VAR 0 2
2763: PUSH
2764: DOUBLE
2765: LD_INT 1
2767: DEC
2768: ST_TO_ADDR
2769: LD_INT 2
2771: PUSH
2772: FOR_TO
2773: IFFALSE 2838
// begin un := CreateHuman ;
2775: LD_ADDR_VAR 0 3
2779: PUSH
2780: CALL_OW 44
2784: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2785: LD_VAR 0 3
2789: PPUSH
2790: LD_INT 1
2792: PPUSH
2793: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2797: LD_VAR 0 3
2801: PPUSH
2802: LD_INT 6
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2812: LD_VAR 0 3
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL 67228 0 2
// SetLives ( un , 300 ) ;
2824: LD_VAR 0 3
2828: PPUSH
2829: LD_INT 300
2831: PPUSH
2832: CALL_OW 234
// end ;
2836: GO 2772
2838: POP
2839: POP
// uc_side := 3 ;
2840: LD_ADDR_OWVAR 20
2844: PUSH
2845: LD_INT 3
2847: ST_TO_ADDR
// uc_nation := 3 ;
2848: LD_ADDR_OWVAR 21
2852: PUSH
2853: LD_INT 3
2855: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
2856: LD_INT 1
2858: PPUSH
2859: LD_INT 5
2861: PPUSH
2862: CALL_OW 381
// for i := 1 to 3 do
2866: LD_ADDR_VAR 0 2
2870: PUSH
2871: DOUBLE
2872: LD_INT 1
2874: DEC
2875: ST_TO_ADDR
2876: LD_INT 3
2878: PUSH
2879: FOR_TO
2880: IFFALSE 2953
// begin un := CreateHuman ;
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: CALL_OW 44
2891: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
2892: LD_ADDR_EXP 56
2896: PUSH
2897: LD_EXP 56
2901: PPUSH
2902: LD_VAR 0 3
2906: PPUSH
2907: CALL 64076 0 2
2911: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 4
2919: PPUSH
2920: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_INT 7
2931: PPUSH
2932: LD_INT 0
2934: PPUSH
2935: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 4
2946: PPUSH
2947: CALL 67228 0 2
// end ;
2951: GO 2879
2953: POP
2954: POP
// ruCommisar := CreateHuman ;
2955: LD_ADDR_EXP 57
2959: PUSH
2960: CALL_OW 44
2964: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
2965: LD_EXP 57
2969: PPUSH
2970: LD_INT 124
2972: PPUSH
2973: LD_INT 37
2975: PPUSH
2976: LD_INT 0
2978: PPUSH
2979: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
2983: LD_EXP 57
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
2995: LD_EXP 57
2999: PPUSH
3000: LD_INT 3
3002: PPUSH
3003: CALL 67228 0 2
// end ;
3007: LD_VAR 0 1
3011: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3012: LD_INT 0
3014: PPUSH
3015: PPUSH
3016: PPUSH
3017: PPUSH
// uc_side := 6 ;
3018: LD_ADDR_OWVAR 20
3022: PUSH
3023: LD_INT 6
3025: ST_TO_ADDR
// uc_nation := 3 ;
3026: LD_ADDR_OWVAR 21
3030: PUSH
3031: LD_INT 3
3033: ST_TO_ADDR
// ruPatrol := [ ] ;
3034: LD_ADDR_EXP 63
3038: PUSH
3039: EMPTY
3040: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3041: LD_ADDR_VAR 0 4
3045: PUSH
3046: LD_INT 26
3048: PUSH
3049: LD_INT 30
3051: PUSH
3052: LD_INT 39
3054: PUSH
3055: LD_INT 43
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: ST_TO_ADDR
// for i := 1 to spawn do
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: DOUBLE
3070: LD_INT 1
3072: DEC
3073: ST_TO_ADDR
3074: LD_VAR 0 4
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3191
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3082: LD_INT 0
3084: PPUSH
3085: LD_INT 4
3087: PUSH
3088: LD_INT 5
3090: PUSH
3091: LD_INT 6
3093: PUSH
3094: LD_INT 7
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: PUSH
3103: LD_OWVAR 67
3107: ARRAY
3108: PPUSH
3109: CALL_OW 381
// un := CreateHuman ;
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: CALL_OW 44
3122: ST_TO_ADDR
// SetTag ( un , i ) ;
3123: LD_VAR 0 3
3127: PPUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3137: LD_ADDR_EXP 63
3141: PUSH
3142: LD_EXP 63
3146: PPUSH
3147: LD_VAR 0 3
3151: PPUSH
3152: CALL 64076 0 2
3156: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3157: LD_VAR 0 3
3161: PPUSH
3162: LD_VAR 0 4
3166: PUSH
3167: LD_VAR 0 2
3171: ARRAY
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 49
// ComHold ( un ) ;
3180: LD_VAR 0 3
3184: PPUSH
3185: CALL_OW 140
// end ;
3189: GO 3079
3191: POP
3192: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3193: LD_ADDR_VAR 0 4
3197: PUSH
3198: LD_INT 48
3200: PUSH
3201: LD_INT 49
3203: PUSH
3204: LD_INT 50
3206: PUSH
3207: LD_INT 51
3209: PUSH
3210: LD_INT 52
3212: PUSH
3213: LD_INT 53
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: ST_TO_ADDR
// for i := 1 to spawn do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_VAR 0 4
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3349
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3242: LD_INT 0
3244: PPUSH
3245: LD_INT 4
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 6
3253: PUSH
3254: LD_INT 7
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_OWVAR 67
3267: ARRAY
3268: PPUSH
3269: CALL_OW 381
// un := CreateHuman ;
3273: LD_ADDR_VAR 0 3
3277: PUSH
3278: CALL_OW 44
3282: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3283: LD_VAR 0 3
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3295: LD_ADDR_EXP 63
3299: PUSH
3300: LD_EXP 63
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL 64076 0 2
3314: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3315: LD_VAR 0 3
3319: PPUSH
3320: LD_VAR 0 4
3324: PUSH
3325: LD_VAR 0 2
3329: ARRAY
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 49
// ComHold ( un ) ;
3338: LD_VAR 0 3
3342: PPUSH
3343: CALL_OW 140
// end ;
3347: GO 3239
3349: POP
3350: POP
// end ;
3351: LD_VAR 0 1
3355: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3356: LD_INT 0
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
// uc_side := 6 ;
3362: LD_ADDR_OWVAR 20
3366: PUSH
3367: LD_INT 6
3369: ST_TO_ADDR
// uc_nation := nation_russian ;
3370: LD_ADDR_OWVAR 21
3374: PUSH
3375: LD_INT 3
3377: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 54
3385: PUSH
3386: LD_INT 55
3388: PUSH
3389: LD_INT 56
3391: PUSH
3392: LD_INT 57
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: ST_TO_ADDR
// for i := 1 to spawn do
3401: LD_ADDR_VAR 0 2
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_VAR 0 4
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3526
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3419: LD_INT 0
3421: PPUSH
3422: LD_INT 4
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: LD_INT 6
3430: PUSH
3431: LD_INT 7
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_OWVAR 67
3444: ARRAY
3445: PPUSH
3446: CALL_OW 381
// un := CreateHuman ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: CALL_OW 44
3459: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3460: LD_VAR 0 3
3464: PPUSH
3465: LD_INT 0
3467: PPUSH
3468: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3472: LD_ADDR_EXP 63
3476: PUSH
3477: LD_EXP 63
3481: PPUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: CALL 64076 0 2
3491: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3492: LD_VAR 0 3
3496: PPUSH
3497: LD_VAR 0 4
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PPUSH
3508: LD_INT 0
3510: PPUSH
3511: CALL_OW 49
// ComHold ( un ) ;
3515: LD_VAR 0 3
3519: PPUSH
3520: CALL_OW 140
// end ;
3524: GO 3416
3526: POP
3527: POP
// end ; end_of_file
3528: LD_VAR 0 1
3532: RET
// export function Action ; var speaker , i , tmp ; begin
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
// Video ( true ) ;
3539: LD_INT 1
3541: PPUSH
3542: CALL 64048 0 1
// hasNormalScene := Kaia or Givi ;
3546: LD_ADDR_EXP 5
3550: PUSH
3551: LD_EXP 43
3555: PUSH
3556: LD_EXP 39
3560: OR
3561: ST_TO_ADDR
// if hasNormalScene then
3562: LD_EXP 5
3566: IFFALSE 3807
// begin for i in americanSquad do
3568: LD_ADDR_VAR 0 3
3572: PUSH
3573: LD_EXP 50
3577: PUSH
3578: FOR_IN
3579: IFFALSE 3625
// begin SetClass ( i , class_prison ) ;
3581: LD_VAR 0 3
3585: PPUSH
3586: LD_INT 33
3588: PPUSH
3589: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3593: LD_VAR 0 3
3597: PPUSH
3598: LD_INT 78
3600: PPUSH
3601: LD_INT 16
3603: PPUSH
3604: LD_INT 5
3606: PPUSH
3607: LD_INT 0
3609: PPUSH
3610: CALL_OW 50
// ComHold ( i ) ;
3614: LD_VAR 0 3
3618: PPUSH
3619: CALL_OW 140
// end ;
3623: GO 3578
3625: POP
3626: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3627: LD_ADDR_VAR 0 4
3631: PUSH
3632: LD_EXP 40
3636: PUSH
3637: LD_EXP 41
3641: PUSH
3642: LD_EXP 42
3646: PUSH
3647: LD_EXP 43
3651: PUSH
3652: LD_EXP 44
3656: PUSH
3657: LD_EXP 45
3661: PUSH
3662: LD_EXP 46
3666: PUSH
3667: LD_EXP 47
3671: PUSH
3672: LD_EXP 39
3676: PUSH
3677: LD_EXP 48
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: PUSH
3694: LD_EXP 49
3698: UNION
3699: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3700: LD_EXP 38
3704: PPUSH
3705: LD_INT 33
3707: PPUSH
3708: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3712: LD_EXP 38
3716: PPUSH
3717: LD_INT 117
3719: PPUSH
3720: LD_INT 24
3722: PPUSH
3723: LD_INT 3
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL 66216 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3733: LD_EXP 38
3737: PPUSH
3738: LD_INT 123
3740: PPUSH
3741: LD_INT 39
3743: PPUSH
3744: CALL_OW 118
// for i in tmp do
3748: LD_ADDR_VAR 0 3
3752: PUSH
3753: LD_VAR 0 4
3757: PUSH
3758: FOR_IN
3759: IFFALSE 3805
// begin SetClass ( i , class_prison ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_INT 33
3768: PPUSH
3769: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3773: LD_VAR 0 3
3777: PPUSH
3778: LD_INT 3
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
3788: LD_VAR 0 3
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 16
3798: PPUSH
3799: CALL_OW 118
// end ;
3803: GO 3758
3805: POP
3806: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
3807: LD_INT 124
3809: PPUSH
3810: LD_INT 39
3812: PPUSH
3813: CALL_OW 86
// PrepareDeadBodies ;
3817: CALL 2589 0 0
// PrepareFirstScene ;
3821: CALL 2725 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3825: LD_INT 152
3827: PPUSH
3828: LD_INT 65
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 70
3836: NEG
3837: PPUSH
3838: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3842: LD_INT 152
3844: PPUSH
3845: LD_INT 65
3847: PPUSH
3848: LD_INT 2
3850: PPUSH
3851: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
3855: LD_INT 122
3857: PPUSH
3858: LD_INT 40
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: LD_INT 8
3866: NEG
3867: PPUSH
3868: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
3872: LD_INT 124
3874: PPUSH
3875: LD_INT 37
3877: PPUSH
3878: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
3882: LD_EXP 57
3886: PPUSH
3887: LD_STRING DRum-Execution-1
3889: PPUSH
3890: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
3894: LD_EXP 57
3898: PPUSH
3899: LD_STRING DRum-Execution-2
3901: PPUSH
3902: CALL_OW 88
// wait ( 0 0$01 ) ;
3906: LD_INT 35
3908: PPUSH
3909: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
3913: LD_EXP 57
3917: PPUSH
3918: LD_STRING DRum-Execution-3
3920: PPUSH
3921: CALL_OW 88
// wait ( 0 0$1 ) ;
3925: LD_INT 35
3927: PPUSH
3928: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
3932: LD_EXP 57
3936: PPUSH
3937: LD_STRING DRum-Execution-4
3939: PPUSH
3940: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
3944: LD_EXP 56
3948: PUSH
3949: LD_INT 1
3951: ARRAY
3952: PPUSH
3953: LD_INT 122
3955: PPUSH
3956: LD_INT 39
3958: PPUSH
3959: CALL_OW 428
3963: PPUSH
3964: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
3968: LD_EXP 56
3972: PUSH
3973: LD_INT 2
3975: ARRAY
3976: PPUSH
3977: LD_INT 123
3979: PPUSH
3980: LD_INT 41
3982: PPUSH
3983: CALL_OW 428
3987: PPUSH
3988: CALL_OW 115
// AddComHold ( russianKillers ) ;
3992: LD_EXP 56
3996: PPUSH
3997: CALL_OW 200
// wait ( 0 0$1 ) ;
4001: LD_INT 35
4003: PPUSH
4004: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4008: LD_INT 122
4010: PPUSH
4011: LD_INT 40
4013: PPUSH
4014: LD_INT 2
4016: PPUSH
4017: CALL_OW 331
// for i in russianKillers union ruCommisar do
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_EXP 56
4030: PUSH
4031: LD_EXP 57
4035: UNION
4036: PUSH
4037: FOR_IN
4038: IFFALSE 4051
// RemoveUnit ( i ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: CALL_OW 64
4049: GO 4037
4051: POP
4052: POP
// if hasNormalScene then
4053: LD_EXP 5
4057: IFFALSE 4065
// ActionNormal else
4059: CALL 4074 0 0
4063: GO 4069
// ActionAdditional ;
4065: CALL 5899 0 0
// end ;
4069: LD_VAR 0 1
4073: RET
// function ActionNormal ; var i , tmp ; begin
4074: LD_INT 0
4076: PPUSH
4077: PPUSH
4078: PPUSH
// CenterNowOnUnits ( Heike ) ;
4079: LD_EXP 38
4083: PPUSH
4084: CALL_OW 87
// wait ( 0 0$1 ) ;
4088: LD_INT 35
4090: PPUSH
4091: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4095: LD_EXP 38
4099: PPUSH
4100: LD_INT 115
4102: PPUSH
4103: LD_INT 19
4105: PPUSH
4106: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4110: LD_EXP 38
4114: PPUSH
4115: LD_INT 113
4117: PPUSH
4118: LD_INT 16
4120: PPUSH
4121: CALL_OW 178
// wait ( 0 0$2 ) ;
4125: LD_INT 70
4127: PPUSH
4128: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4132: LD_EXP 38
4136: PPUSH
4137: LD_STRING DH-Conspiracy-1
4139: PPUSH
4140: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4144: LD_EXP 43
4148: PPUSH
4149: LD_STRING DK-Conspiracy-2
4151: PPUSH
4152: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4156: LD_EXP 39
4160: PPUSH
4161: LD_STRING DG-Conspiracy-3
4163: PPUSH
4164: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4168: LD_EXP 39
4172: PPUSH
4173: LD_STRING DG-Conspiracy-4
4175: PPUSH
4176: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4180: LD_EXP 38
4184: PPUSH
4185: LD_STRING DH-Conspiracy-5
4187: PPUSH
4188: CALL_OW 88
// if IsOk ( Kamil ) then
4192: LD_EXP 42
4196: PPUSH
4197: CALL_OW 302
4201: IFFALSE 4259
// begin hasVodka := true ;
4203: LD_ADDR_EXP 4
4207: PUSH
4208: LD_INT 1
4210: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4211: LD_EXP 42
4215: PPUSH
4216: LD_STRING DKam-Conspiracy-6
4218: PPUSH
4219: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4223: LD_EXP 42
4227: PPUSH
4228: LD_STRING DKam-Conspiracy-7
4230: PPUSH
4231: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4235: LD_EXP 42
4239: PPUSH
4240: LD_STRING DKam-Conspiracy-8
4242: PPUSH
4243: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4247: LD_EXP 42
4251: PPUSH
4252: LD_STRING DKam-Conspiracy-9
4254: PPUSH
4255: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4259: LD_EXP 44
4263: PPUSH
4264: CALL_OW 302
4268: IFFALSE 4449
// begin americanContact := true ;
4270: LD_ADDR_EXP 10
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4278: LD_STRING M1-american
4280: PPUSH
4281: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4285: LD_EXP 44
4289: PPUSH
4290: LD_STRING DS-Conspiracy-10
4292: PPUSH
4293: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4297: LD_EXP 45
4301: PPUSH
4302: LD_STRING DM-Conspiracy-11
4304: PPUSH
4305: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4309: LD_EXP 44
4313: PPUSH
4314: LD_STRING DS-Conspiracy-12
4316: PPUSH
4317: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4321: LD_INT 84
4323: PPUSH
4324: LD_INT 19
4326: PPUSH
4327: LD_INT 105
4329: PPUSH
4330: CALL 18335 0 3
// if johnnySaved then
4334: LD_EXP 3
4338: IFFALSE 4378
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4340: LD_EXP 44
4344: PPUSH
4345: LD_STRING DS-Conspiracy-13
4347: PPUSH
4348: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4352: LD_EXP 38
4356: PPUSH
4357: LD_STRING DH-Conspiracy-14
4359: PPUSH
4360: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4364: LD_EXP 44
4368: PPUSH
4369: LD_STRING DH-Conspiracy-15
4371: PPUSH
4372: CALL_OW 88
// end else
4376: GO 4414
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4378: LD_EXP 44
4382: PPUSH
4383: LD_STRING DS-Conspiracy-a-13
4385: PPUSH
4386: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4390: LD_EXP 38
4394: PPUSH
4395: LD_STRING DH-Conspiracy-a-14
4397: PPUSH
4398: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4402: LD_EXP 44
4406: PPUSH
4407: LD_STRING DH-Conspiracy-a-15
4409: PPUSH
4410: CALL_OW 88
// end ; if IsOk ( Givi ) then
4414: LD_EXP 39
4418: PPUSH
4419: CALL_OW 302
4423: IFFALSE 4449
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4425: LD_EXP 39
4429: PPUSH
4430: LD_STRING DG-Conspiracy-a-16
4432: PPUSH
4433: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4437: LD_EXP 38
4441: PPUSH
4442: LD_STRING DH-Conspiracy-a-17
4444: PPUSH
4445: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4449: LD_EXP 38
4453: PPUSH
4454: LD_STRING DH-Conspiracy-16
4456: PPUSH
4457: CALL_OW 88
// if IsOk ( Givi ) then
4461: LD_EXP 39
4465: PPUSH
4466: CALL_OW 302
4470: IFFALSE 4742
// begin hasStimDrugs := true ;
4472: LD_ADDR_EXP 9
4476: PUSH
4477: LD_INT 1
4479: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4480: LD_STRING M1-drugs
4482: PPUSH
4483: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4487: LD_EXP 39
4491: PPUSH
4492: LD_STRING DG-Conspiracy-17
4494: PPUSH
4495: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4499: LD_INT 162
4501: PPUSH
4502: LD_INT 2
4504: PPUSH
4505: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4509: LD_INT 194
4511: PPUSH
4512: LD_INT 98
4514: PPUSH
4515: LD_INT 105
4517: PPUSH
4518: CALL 18335 0 3
// SetSide ( drugsLab , 3 ) ;
4522: LD_INT 162
4524: PPUSH
4525: LD_INT 3
4527: PPUSH
4528: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4532: LD_EXP 39
4536: PPUSH
4537: LD_STRING DG-Conspiracy-18
4539: PPUSH
4540: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4544: LD_EXP 39
4548: PPUSH
4549: LD_STRING DG-Conspiracy-19
4551: PPUSH
4552: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4556: LD_EXP 39
4560: PPUSH
4561: LD_STRING DG-Conspiracy-20
4563: PPUSH
4564: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4568: LD_EXP 38
4572: PPUSH
4573: LD_STRING DH-Conspiracy-21
4575: PPUSH
4576: CALL_OW 88
// if IsOk ( Kaia ) then
4580: LD_EXP 43
4584: PPUSH
4585: CALL_OW 302
4589: IFFALSE 4663
// begin hasExplosions := true ;
4591: LD_ADDR_EXP 6
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4599: LD_STRING M1-explosive
4601: PPUSH
4602: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4606: LD_EXP 43
4610: PPUSH
4611: LD_STRING DK-Conspiracy-22
4613: PPUSH
4614: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4618: LD_INT 73
4620: PPUSH
4621: LD_INT 2
4623: PPUSH
4624: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4628: LD_INT 170
4630: PPUSH
4631: LD_INT 104
4633: PPUSH
4634: LD_INT 105
4636: PPUSH
4637: CALL 18335 0 3
// SetSide ( barExplosion , 3 ) ;
4641: LD_INT 73
4643: PPUSH
4644: LD_INT 3
4646: PPUSH
4647: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4651: LD_EXP 43
4655: PPUSH
4656: LD_STRING DK-Conspiracy-23
4658: PPUSH
4659: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4663: LD_EXP 46
4667: PPUSH
4668: CALL_OW 302
4672: IFFALSE 4742
// begin hasExplosionsInFactory := true ;
4674: LD_ADDR_EXP 7
4678: PUSH
4679: LD_INT 1
4681: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4682: LD_EXP 46
4686: PPUSH
4687: LD_STRING DO-Conspiracy-24
4689: PPUSH
4690: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4694: LD_INT 175
4696: PPUSH
4697: LD_INT 54
4699: PPUSH
4700: LD_INT 70
4702: PPUSH
4703: CALL 18335 0 3
// if IsOk ( Markov ) then
4707: LD_EXP 45
4711: PPUSH
4712: CALL_OW 302
4716: IFFALSE 4742
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4718: LD_EXP 45
4722: PPUSH
4723: LD_STRING DMar-Conspiracy-25
4725: PPUSH
4726: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4730: LD_EXP 45
4734: PPUSH
4735: LD_STRING DMar-Conspiracy-26
4737: PPUSH
4738: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4742: LD_EXP 47
4746: PPUSH
4747: CALL_OW 302
4751: PUSH
4752: LD_EXP 43
4756: PPUSH
4757: CALL_OW 302
4761: AND
4762: IFFALSE 5222
// begin hasWeapons := true ;
4764: LD_ADDR_EXP 19
4768: PUSH
4769: LD_INT 1
4771: ST_TO_ADDR
// hasRevolver := true ;
4772: LD_ADDR_EXP 8
4776: PUSH
4777: LD_INT 1
4779: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
4780: LD_STRING M1-weapons
4782: PPUSH
4783: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
4787: LD_EXP 47
4791: PPUSH
4792: LD_STRING DKs-Conspiracy-27
4794: PPUSH
4795: CALL_OW 88
// if IsOk ( Givi ) then
4799: LD_EXP 39
4803: PPUSH
4804: CALL_OW 302
4808: IFFALSE 4824
// Say ( Givi , DG-Conspiracy-28 ) else
4810: LD_EXP 39
4814: PPUSH
4815: LD_STRING DG-Conspiracy-28
4817: PPUSH
4818: CALL_OW 88
4822: GO 4889
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
4824: LD_EXP 49
4828: PPUSH
4829: LD_INT 26
4831: PUSH
4832: LD_INT 1
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PPUSH
4839: CALL_OW 72
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: LD_STRING DArm-Conspiracy-a-28
4850: PPUSH
4851: CALL_OW 88
4855: NOT
4856: IFFALSE 4889
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
4858: LD_EXP 49
4862: PPUSH
4863: LD_INT 26
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 72
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PPUSH
4882: LD_STRING DArf-Conspiracy-a-28
4884: PPUSH
4885: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
4889: LD_EXP 47
4893: PPUSH
4894: LD_STRING DKs-Conspiracy-29
4896: PPUSH
4897: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
4901: LD_INT 192
4903: PPUSH
4904: LD_INT 122
4906: PPUSH
4907: LD_INT 105
4909: PPUSH
4910: CALL 18335 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
4914: LD_EXP 47
4918: PPUSH
4919: LD_STRING DKs-Conspiracy-30
4921: PPUSH
4922: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
4926: LD_EXP 43
4930: PPUSH
4931: LD_STRING DK-Conspiracy-31
4933: PPUSH
4934: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
4938: LD_EXP 45
4942: PPUSH
4943: LD_STRING DMar-Conspiracy-33
4945: PPUSH
4946: CALL_OW 88
4950: NOT
4951: PUSH
4952: LD_EXP 49
4956: AND
4957: IFFALSE 5024
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
4959: LD_EXP 49
4963: PPUSH
4964: LD_INT 26
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 72
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: LD_STRING DArm-Conspiracy-a-34
4985: PPUSH
4986: CALL_OW 88
4990: NOT
4991: IFFALSE 5024
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
4993: LD_EXP 49
4997: PPUSH
4998: LD_INT 26
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: CALL_OW 72
5012: PUSH
5013: LD_INT 1
5015: ARRAY
5016: PPUSH
5017: LD_STRING DArf-Conspiracy-a-34
5019: PPUSH
5020: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5024: LD_EXP 43
5028: PPUSH
5029: LD_STRING DK-Conspiracy-34
5031: PPUSH
5032: CALL_OW 88
// if IsOk ( Markov ) then
5036: LD_EXP 45
5040: PPUSH
5041: CALL_OW 302
5045: IFFALSE 5130
// begin hasSniperRifle := true ;
5047: LD_ADDR_EXP 11
5051: PUSH
5052: LD_INT 1
5054: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5055: LD_EXP 45
5059: PPUSH
5060: LD_STRING DMar-Conspiracy-35
5062: PPUSH
5063: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5067: LD_EXP 43
5071: PPUSH
5072: LD_STRING DK-Conspiracy-36
5074: PPUSH
5075: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5079: LD_EXP 45
5083: PPUSH
5084: LD_STRING DMar-Conspiracy-37
5086: PPUSH
5087: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5091: LD_EXP 45
5095: PPUSH
5096: LD_STRING DMar-Conspiracy-38
5098: PPUSH
5099: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5103: LD_INT 137
5105: PPUSH
5106: LD_INT 98
5108: PPUSH
5109: LD_INT 105
5111: PPUSH
5112: CALL 18335 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5116: LD_EXP 45
5120: PPUSH
5121: LD_STRING DMar-Conspiracy-39
5123: PPUSH
5124: CALL_OW 88
// end else
5128: GO 5222
// if heikeSecondSquad then
5130: LD_EXP 49
5134: IFFALSE 5222
// begin hasSniperRifle := true ;
5136: LD_ADDR_EXP 11
5140: PUSH
5141: LD_INT 1
5143: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5144: LD_INT 137
5146: PPUSH
5147: LD_INT 98
5149: PPUSH
5150: LD_INT 105
5152: PPUSH
5153: CALL 18335 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5157: LD_EXP 49
5161: PPUSH
5162: LD_INT 26
5164: PUSH
5165: LD_INT 1
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 72
5176: PUSH
5177: LD_INT 1
5179: ARRAY
5180: PPUSH
5181: LD_STRING DArm-Conspiracy-a-35
5183: PPUSH
5184: CALL_OW 88
5188: NOT
5189: IFFALSE 5222
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5191: LD_EXP 49
5195: PPUSH
5196: LD_INT 26
5198: PUSH
5199: LD_INT 2
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PPUSH
5206: CALL_OW 72
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_STRING DArf-Conspiracy-a-35
5217: PPUSH
5218: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5222: LD_EXP 38
5226: PPUSH
5227: LD_STRING DH-Conspiracy-40
5229: PPUSH
5230: CALL_OW 88
// if IsOk ( Mike ) then
5234: LD_EXP 40
5238: PPUSH
5239: CALL_OW 302
5243: IFFALSE 5302
// begin hasScout := true ;
5245: LD_ADDR_EXP 12
5249: PUSH
5250: LD_INT 1
5252: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5253: LD_EXP 40
5257: PPUSH
5258: LD_STRING DM-Conspiracy-41
5260: PPUSH
5261: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5265: LD_EXP 40
5269: PPUSH
5270: LD_STRING DM-Conspiracy-42
5272: PPUSH
5273: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5277: LD_INT 73
5279: PPUSH
5280: LD_INT 102
5282: PPUSH
5283: LD_INT 105
5285: PPUSH
5286: CALL 18335 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5290: LD_EXP 40
5294: PPUSH
5295: LD_STRING DM-Conspiracy-43
5297: PPUSH
5298: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5302: LD_EXP 4
5306: PUSH
5307: LD_EXP 43
5311: PPUSH
5312: CALL_OW 302
5316: AND
5317: PUSH
5318: LD_EXP 47
5322: PPUSH
5323: CALL_OW 302
5327: AND
5328: IFFALSE 5374
// begin hasMethanol := true ;
5330: LD_ADDR_EXP 13
5334: PUSH
5335: LD_INT 1
5337: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5338: LD_EXP 43
5342: PPUSH
5343: LD_STRING DK-Conspiracy-44
5345: PPUSH
5346: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5350: LD_EXP 43
5354: PPUSH
5355: LD_STRING DK-Conspiracy-45
5357: PPUSH
5358: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5362: LD_EXP 42
5366: PPUSH
5367: LD_STRING DKam-Conspiracy-46
5369: PPUSH
5370: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5374: LD_EXP 38
5378: PPUSH
5379: LD_STRING DH-Conspiracy-47
5381: PPUSH
5382: CALL_OW 88
// wait ( 0 0$1 ) ;
5386: LD_INT 35
5388: PPUSH
5389: CALL_OW 67
// your_side := 8 ;
5393: LD_ADDR_OWVAR 2
5397: PUSH
5398: LD_INT 8
5400: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5401: LD_INT 1
5403: PPUSH
5404: LD_INT 1
5406: PPUSH
5407: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_INT 2
5418: PUSH
5419: LD_INT 22
5421: PUSH
5422: LD_INT 2
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 22
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 21
5446: PUSH
5447: LD_INT 1
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: FOR_IN
5464: IFFALSE 5477
// RemoveUnit ( i ) ;
5466: LD_VAR 0 2
5470: PPUSH
5471: CALL_OW 64
5475: GO 5463
5477: POP
5478: POP
// wait ( 0 0$0.3 ) ;
5479: LD_INT 10
5481: PPUSH
5482: CALL_OW 67
// Query ( StartInfo1 ) ;
5486: LD_STRING StartInfo1
5488: PPUSH
5489: CALL_OW 97
// wait ( 0 0$1 ) ;
5493: LD_INT 35
5495: PPUSH
5496: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5500: LD_STRING colors_night.txt
5502: PPUSH
5503: CALL_OW 544
// Query ( StartInfo2 ) ;
5507: LD_STRING StartInfo2
5509: PPUSH
5510: CALL_OW 97
// PrepareGame ;
5514: CALL 973 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5518: LD_INT 152
5520: PPUSH
5521: LD_INT 65
5523: PPUSH
5524: LD_INT 2
5526: PPUSH
5527: LD_INT 70
5529: NEG
5530: PPUSH
5531: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5535: LD_INT 152
5537: PPUSH
5538: LD_INT 65
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5548: LD_INT 133
5550: PPUSH
5551: LD_INT 76
5553: PPUSH
5554: LD_INT 2
5556: PPUSH
5557: LD_INT 6
5559: NEG
5560: PPUSH
5561: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5565: LD_INT 152
5567: PPUSH
5568: LD_INT 65
5570: PPUSH
5571: LD_INT 8
5573: PPUSH
5574: LD_INT 70
5576: NEG
5577: PPUSH
5578: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5582: LD_INT 152
5584: PPUSH
5585: LD_INT 65
5587: PPUSH
5588: LD_INT 8
5590: PPUSH
5591: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5595: LD_INT 133
5597: PPUSH
5598: LD_INT 76
5600: PPUSH
5601: LD_INT 8
5603: PPUSH
5604: LD_INT 6
5606: NEG
5607: PPUSH
5608: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5612: LD_INT 23
5614: PPUSH
5615: CALL_OW 87
// dialogue_skipped := false ;
5619: LD_ADDR_OWVAR 59
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// InitRuPatrols ;
5627: CALL 3012 0 0
// Say ( Heike , DH-Escape-1 ) ;
5631: LD_EXP 38
5635: PPUSH
5636: LD_STRING DH-Escape-1
5638: PPUSH
5639: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5643: LD_EXP 38
5647: PPUSH
5648: LD_STRING DH-Escape-2
5650: PPUSH
5651: CALL_OW 88
// if not debug then
5655: LD_EXP 1
5659: NOT
5660: IFFALSE 5666
// StartLockerMinigame ;
5662: CALL 18846 0 0
// wait ( 0 0$1 ) ;
5666: LD_INT 35
5668: PPUSH
5669: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5673: LD_EXP 38
5677: PPUSH
5678: LD_STRING DH-Escape-4
5680: PPUSH
5681: CALL_OW 88
// wait ( 0 0$3 ) ;
5685: LD_INT 105
5687: PPUSH
5688: CALL_OW 67
// your_side := 2 ;
5692: LD_ADDR_OWVAR 2
5696: PUSH
5697: LD_INT 2
5699: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5700: LD_EXP 38
5704: PPUSH
5705: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5709: LD_INT 152
5711: PPUSH
5712: LD_INT 65
5714: PPUSH
5715: LD_INT 2
5717: PPUSH
5718: LD_INT 70
5720: NEG
5721: PPUSH
5722: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5726: LD_INT 152
5728: PPUSH
5729: LD_INT 65
5731: PPUSH
5732: LD_INT 2
5734: PPUSH
5735: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5739: LD_INT 133
5741: PPUSH
5742: LD_INT 76
5744: PPUSH
5745: LD_INT 8
5747: PPUSH
5748: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5752: LD_EXP 38
5756: PPUSH
5757: LD_INT 128
5759: PPUSH
5760: LD_INT 64
5762: PPUSH
5763: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5767: LD_INT 35
5769: PPUSH
5770: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5774: LD_EXP 38
5778: PPUSH
5779: LD_INT 128
5781: PPUSH
5782: LD_INT 64
5784: PPUSH
5785: CALL_OW 307
5789: IFFALSE 5767
// ComHold ( Heike ) ;
5791: LD_EXP 38
5795: PPUSH
5796: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
5800: LD_EXP 38
5804: PPUSH
5805: LD_STRING DH-Start-1
5807: PPUSH
5808: CALL_OW 88
// if not americanContact then
5812: LD_EXP 10
5816: NOT
5817: IFFALSE 5833
// Say ( Heike , DH-Start-c-2 ) else
5819: LD_EXP 38
5823: PPUSH
5824: LD_STRING DH-Start-c-2
5826: PPUSH
5827: CALL_OW 88
5831: GO 5865
// if johnnySaved then
5833: LD_EXP 3
5837: IFFALSE 5853
// Say ( Heike , DH-Start-a-2 ) else
5839: LD_EXP 38
5843: PPUSH
5844: LD_STRING DH-Start-a-2
5846: PPUSH
5847: CALL_OW 88
5851: GO 5865
// Say ( Heike , DH-Start-b-2 ) ;
5853: LD_EXP 38
5857: PPUSH
5858: LD_STRING DH-Start-b-2
5860: PPUSH
5861: CALL_OW 88
// Video ( false ) ;
5865: LD_INT 0
5867: PPUSH
5868: CALL 64048 0 1
// tick := 0 ;
5872: LD_ADDR_OWVAR 1
5876: PUSH
5877: LD_INT 0
5879: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
5880: LD_STRING M1
5882: PPUSH
5883: CALL_OW 337
// enable ( gameStartEvent ) ;
5887: LD_INT 2
5889: ENABLE_MARKED
// SaveForQuickRestart ;
5890: CALL_OW 22
// end ;
5894: LD_VAR 0 1
5898: RET
// function ActionAdditional ; var i , un , tmp ; begin
5899: LD_INT 0
5901: PPUSH
5902: PPUSH
5903: PPUSH
5904: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
5905: LD_INT 115
5907: PPUSH
5908: LD_INT 27
5910: PPUSH
5911: LD_INT 2
5913: PPUSH
5914: LD_INT 6
5916: NEG
5917: PPUSH
5918: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
5922: LD_EXP 38
5926: PPUSH
5927: LD_INT 115
5929: PPUSH
5930: LD_INT 27
5932: PPUSH
5933: CALL_OW 428
5937: PPUSH
5938: CALL_OW 52
// SetClass ( Heike , 33 ) ;
5942: LD_EXP 38
5946: PPUSH
5947: LD_INT 33
5949: PPUSH
5950: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
5954: LD_INT 124
5956: PPUSH
5957: LD_INT 39
5959: PPUSH
5960: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
5964: LD_EXP 38
5968: PPUSH
5969: LD_STRING DH-Fail-1
5971: PPUSH
5972: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
5976: LD_INT 3
5978: PPUSH
5979: CALL_OW 427
// ComExit ( Heike ) ;
5983: LD_EXP 38
5987: PPUSH
5988: CALL 64474 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
5992: LD_EXP 38
5996: PPUSH
5997: LD_INT 109
5999: PPUSH
6000: LD_INT 33
6002: PPUSH
6003: CALL_OW 171
// AddComHold ( Heike ) ;
6007: LD_EXP 38
6011: PPUSH
6012: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6016: LD_INT 115
6018: PPUSH
6019: LD_INT 27
6021: PPUSH
6022: LD_INT 2
6024: PPUSH
6025: CALL_OW 331
// wait ( 0 0$2 ) ;
6029: LD_INT 70
6031: PPUSH
6032: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6036: LD_INT 35
6038: PPUSH
6039: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6043: LD_EXP 38
6047: PPUSH
6048: LD_INT 109
6050: PPUSH
6051: LD_INT 33
6053: PPUSH
6054: CALL_OW 307
6058: IFFALSE 6036
// Say ( Heike , DH-Fail-2 ) ;
6060: LD_EXP 38
6064: PPUSH
6065: LD_STRING DH-Fail-2
6067: PPUSH
6068: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6072: LD_EXP 38
6076: PPUSH
6077: LD_INT 111
6079: PPUSH
6080: LD_INT 48
6082: PPUSH
6083: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6094: LD_EXP 38
6098: PPUSH
6099: LD_INT 111
6101: PPUSH
6102: LD_INT 48
6104: PPUSH
6105: CALL_OW 297
6109: PUSH
6110: LD_INT 4
6112: LESS
6113: IFFALSE 6087
// AddComMoveXY ( Heike , 106 , 72 ) ;
6115: LD_EXP 38
6119: PPUSH
6120: LD_INT 106
6122: PPUSH
6123: LD_INT 72
6125: PPUSH
6126: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6130: LD_EXP 38
6134: PPUSH
6135: LD_INT 103
6137: PPUSH
6138: LD_INT 80
6140: PPUSH
6141: CALL_OW 171
// uc_side := 3 ;
6145: LD_ADDR_OWVAR 20
6149: PUSH
6150: LD_INT 3
6152: ST_TO_ADDR
// uc_nation := 3 ;
6153: LD_ADDR_OWVAR 21
6157: PUSH
6158: LD_INT 3
6160: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6161: LD_INT 1
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 6
6169: PPUSH
6170: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6174: LD_ADDR_OWVAR 29
6178: PUSH
6179: LD_INT 12
6181: PUSH
6182: LD_INT 12
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: ST_TO_ADDR
// un := CreateHuman ;
6189: LD_ADDR_VAR 0 3
6193: PUSH
6194: CALL_OW 44
6198: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6199: LD_VAR 0 3
6203: PPUSH
6204: LD_INT 134
6206: PPUSH
6207: LD_INT 52
6209: PPUSH
6210: LD_INT 4
6212: PPUSH
6213: LD_INT 0
6215: PPUSH
6216: CALL 66216 0 5
// ComTurnUnit ( un , Heike ) ;
6220: LD_VAR 0 3
6224: PPUSH
6225: LD_EXP 38
6229: PPUSH
6230: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6234: LD_VAR 0 3
6238: PPUSH
6239: LD_EXP 38
6243: PPUSH
6244: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_STRING DRum-Fail-3
6255: PPUSH
6256: CALL_OW 88
// for i := 1 to 3 do
6260: LD_ADDR_VAR 0 2
6264: PUSH
6265: DOUBLE
6266: LD_INT 1
6268: DEC
6269: ST_TO_ADDR
6270: LD_INT 3
6272: PUSH
6273: FOR_TO
6274: IFFALSE 6347
// begin PrepareSoldier ( false , 10 ) ;
6276: LD_INT 0
6278: PPUSH
6279: LD_INT 10
6281: PPUSH
6282: CALL_OW 381
// un := CreateHuman ;
6286: LD_ADDR_VAR 0 3
6290: PUSH
6291: CALL_OW 44
6295: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6296: LD_ADDR_VAR 0 4
6300: PUSH
6301: LD_VAR 0 4
6305: PPUSH
6306: LD_VAR 0 3
6310: PPUSH
6311: CALL 64076 0 2
6315: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6316: LD_VAR 0 3
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6331: LD_VAR 0 3
6335: PPUSH
6336: LD_EXP 38
6340: PPUSH
6341: CALL_OW 119
// end ;
6345: GO 6273
6347: POP
6348: POP
// repeat wait ( 0 0$1 ) ;
6349: LD_INT 35
6351: PPUSH
6352: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6356: LD_VAR 0 4
6360: PPUSH
6361: LD_INT 101
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL_OW 72
6375: PUSH
6376: LD_INT 1
6378: GREATER
6379: IFFALSE 6349
// wait ( 0 0$1 ) ;
6381: LD_INT 35
6383: PPUSH
6384: CALL_OW 67
// DialogueOn ;
6388: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6392: LD_EXP 38
6396: PPUSH
6397: LD_STRING DH-Fail-4
6399: PPUSH
6400: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6404: LD_EXP 38
6408: PPUSH
6409: LD_STRING DH-Fail-5
6411: PPUSH
6412: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6416: LD_EXP 38
6420: PPUSH
6421: LD_STRING DH-Fail-6
6423: PPUSH
6424: CALL_OW 88
// DialogueOff ;
6428: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6432: LD_VAR 0 4
6436: PPUSH
6437: LD_EXP 38
6441: PPUSH
6442: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6446: LD_INT 35
6448: PPUSH
6449: CALL_OW 67
// until IsDying ( Heike ) ;
6453: LD_EXP 38
6457: PPUSH
6458: CALL_OW 303
6462: IFFALSE 6446
// KillUnit ( Heike ) ;
6464: LD_EXP 38
6468: PPUSH
6469: CALL_OW 66
// wait ( 0 0$4 ) ;
6473: LD_INT 140
6475: PPUSH
6476: CALL_OW 67
// ResetFog ;
6480: CALL_OW 335
// DialogueOn ;
6484: CALL_OW 6
// dwait ( 0 0$1 ) ;
6488: LD_INT 35
6490: PPUSH
6491: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6495: LD_ADDR_EXP 38
6499: PUSH
6500: LD_STRING Heike
6502: PPUSH
6503: LD_EXP 1
6507: NOT
6508: PPUSH
6509: LD_EXP 2
6513: PPUSH
6514: CALL 26627 0 3
6518: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6519: LD_EXP 38
6523: PPUSH
6524: LD_STRING DH-Fail-7
6526: PPUSH
6527: CALL_OW 89
// DialogueOff ;
6531: CALL_OW 7
// YouLost ( Fail ) ;
6535: LD_STRING Fail
6537: PPUSH
6538: CALL_OW 104
// end ;
6542: LD_VAR 0 1
6546: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6547: LD_INT 2
6549: PPUSH
6550: LD_INT 173
6552: PPUSH
6553: LD_INT 29
6555: PPUSH
6556: CALL_OW 293
6560: PUSH
6561: LD_EXP 38
6565: PPUSH
6566: LD_INT 173
6568: PPUSH
6569: LD_INT 29
6571: PPUSH
6572: CALL_OW 297
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: AND
6581: IFFALSE 6598
6583: GO 6585
6585: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6586: LD_EXP 38
6590: PPUSH
6591: LD_STRING DH-EastRoad
6593: PPUSH
6594: CALL_OW 88
6598: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6599: LD_INT 2
6601: PPUSH
6602: LD_INT 149
6604: PPUSH
6605: LD_INT 3
6607: PPUSH
6608: CALL_OW 293
6612: PUSH
6613: LD_EXP 38
6617: PPUSH
6618: LD_INT 149
6620: PPUSH
6621: LD_INT 3
6623: PPUSH
6624: CALL_OW 297
6628: PUSH
6629: LD_INT 6
6631: LESS
6632: AND
6633: IFFALSE 6650
6635: GO 6637
6637: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6638: LD_EXP 38
6642: PPUSH
6643: LD_STRING DH-EastRoad
6645: PPUSH
6646: CALL_OW 88
6650: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6651: LD_INT 2
6653: PPUSH
6654: LD_INT 217
6656: PPUSH
6657: LD_INT 120
6659: PPUSH
6660: CALL_OW 293
6664: PUSH
6665: LD_EXP 38
6669: PPUSH
6670: LD_INT 217
6672: PPUSH
6673: LD_INT 120
6675: PPUSH
6676: CALL_OW 297
6680: PUSH
6681: LD_INT 6
6683: LESS
6684: AND
6685: IFFALSE 6702
6687: GO 6689
6689: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6690: LD_EXP 38
6694: PPUSH
6695: LD_STRING DH-EastEnd
6697: PPUSH
6698: CALL_OW 88
6702: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6703: LD_EXP 38
6707: PPUSH
6708: LD_INT 11
6710: PPUSH
6711: CALL_OW 308
6715: IFFALSE 6753
6717: GO 6719
6719: DISABLE
// begin if not heikeSquad then
6720: LD_EXP 14
6724: NOT
6725: IFFALSE 6741
// Say ( Heike , DH-Hill ) else
6727: LD_EXP 38
6731: PPUSH
6732: LD_STRING DH-Hill
6734: PPUSH
6735: CALL_OW 88
6739: GO 6753
// Say ( Heike , DH-Hill-a ) ;
6741: LD_EXP 38
6745: PPUSH
6746: LD_STRING DH-Hill-a
6748: PPUSH
6749: CALL_OW 88
// end ;
6753: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6754: LD_EXP 38
6758: PPUSH
6759: LD_INT 12
6761: PPUSH
6762: CALL_OW 308
6766: IFFALSE 6948
6768: GO 6770
6770: DISABLE
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// begin DialogueOn ;
6776: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6780: LD_EXP 38
6784: PPUSH
6785: CALL_OW 87
// x := GetX ( Heike ) ;
6789: LD_ADDR_VAR 0 1
6793: PUSH
6794: LD_EXP 38
6798: PPUSH
6799: CALL_OW 250
6803: ST_TO_ADDR
// y := GetY ( Heike ) ;
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: LD_EXP 38
6813: PPUSH
6814: CALL_OW 251
6818: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: LD_INT 2
6831: PPUSH
6832: LD_INT 12
6834: NEG
6835: PPUSH
6836: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_VAR 0 2
6849: PPUSH
6850: LD_INT 2
6852: PPUSH
6853: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6857: LD_INT 2
6859: PUSH
6860: LD_INT 30
6862: PUSH
6863: LD_INT 32
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 30
6872: PUSH
6873: LD_INT 33
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: PPUSH
6885: CALL_OW 69
6889: IFFALSE 6901
// v := 3 else
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: LD_INT 3
6898: ST_TO_ADDR
6899: GO 6909
// v := 2 ;
6901: LD_ADDR_VAR 0 3
6905: PUSH
6906: LD_INT 2
6908: ST_TO_ADDR
// disable ;
6909: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
6910: LD_EXP 38
6914: PPUSH
6915: LD_STRING DH-Outpost-
6917: PUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_VAR 0 3
6925: PPUSH
6926: CALL_OW 12
6930: STR
6931: PPUSH
6932: CALL_OW 88
// DialogueOff ;
6936: CALL_OW 7
// wait ( 0 0$10 ) ;
6940: LD_INT 350
6942: PPUSH
6943: CALL_OW 67
// enable ;
6947: ENABLE
// end ;
6948: PPOPN 3
6950: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
6951: LD_EXP 38
6955: PPUSH
6956: LD_INT 19
6958: PPUSH
6959: CALL_OW 308
6963: PUSH
6964: LD_EXP 22
6968: NOT
6969: AND
6970: PUSH
6971: LD_EXP 30
6975: NOT
6976: AND
6977: IFFALSE 7050
6979: GO 6981
6981: DISABLE
// begin DialogueOn ;
6982: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
6986: LD_INT 152
6988: PPUSH
6989: LD_INT 115
6991: PPUSH
6992: LD_INT 2
6994: PPUSH
6995: LD_INT 16
6997: NEG
6998: PPUSH
6999: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7003: LD_INT 152
7005: PPUSH
7006: LD_INT 115
7008: PPUSH
7009: LD_INT 2
7011: PPUSH
7012: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7016: LD_INT 152
7018: PPUSH
7019: LD_INT 115
7021: PPUSH
7022: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7026: LD_EXP 38
7030: PPUSH
7031: LD_STRING DH-Stealth-1
7033: PPUSH
7034: CALL_OW 88
// DialogueOff ;
7038: CALL_OW 7
// adminAreaDiscovered := true ;
7042: LD_ADDR_EXP 22
7046: PUSH
7047: LD_INT 1
7049: ST_TO_ADDR
// end ;
7050: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7051: LD_INT 2
7053: PPUSH
7054: LD_EXP 39
7058: PPUSH
7059: CALL_OW 292
7063: PUSH
7064: LD_EXP 38
7068: PPUSH
7069: LD_EXP 39
7073: PPUSH
7074: CALL_OW 296
7078: PUSH
7079: LD_INT 6
7081: LESS
7082: AND
7083: PUSH
7084: LD_EXP 17
7088: NOT
7089: AND
7090: PUSH
7091: LD_EXP 30
7095: NOT
7096: AND
7097: IFFALSE 7203
7099: GO 7101
7101: DISABLE
// begin DialogueOn ;
7102: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7106: LD_EXP 39
7110: PPUSH
7111: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7115: LD_EXP 39
7119: PPUSH
7120: LD_EXP 38
7124: PPUSH
7125: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7129: LD_EXP 38
7133: PPUSH
7134: LD_EXP 39
7138: PPUSH
7139: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7143: LD_EXP 38
7147: PPUSH
7148: LD_STRING DH-Givi-1
7150: PPUSH
7151: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7155: LD_EXP 39
7159: PPUSH
7160: LD_STRING DG-Givi-2
7162: PPUSH
7163: CALL_OW 88
// DialogueOff ;
7167: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7171: LD_EXP 39
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7183: LD_ADDR_EXP 14
7187: PUSH
7188: LD_EXP 14
7192: PPUSH
7193: LD_EXP 39
7197: PPUSH
7198: CALL 64076 0 2
7202: ST_TO_ADDR
// end ;
7203: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7204: LD_INT 2
7206: PPUSH
7207: LD_EXP 44
7211: PPUSH
7212: CALL_OW 292
7216: PUSH
7217: LD_EXP 38
7221: PPUSH
7222: LD_EXP 44
7226: PPUSH
7227: CALL_OW 296
7231: PUSH
7232: LD_INT 6
7234: LESS
7235: AND
7236: PUSH
7237: LD_EXP 17
7241: NOT
7242: AND
7243: PUSH
7244: LD_EXP 30
7248: NOT
7249: AND
7250: IFFALSE 7356
7252: GO 7254
7254: DISABLE
// begin DialogueOn ;
7255: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7259: LD_EXP 44
7263: PPUSH
7264: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7268: LD_EXP 44
7272: PPUSH
7273: LD_EXP 38
7277: PPUSH
7278: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7282: LD_EXP 38
7286: PPUSH
7287: LD_EXP 44
7291: PPUSH
7292: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7296: LD_EXP 38
7300: PPUSH
7301: LD_STRING DH-Sophia-1
7303: PPUSH
7304: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7308: LD_EXP 44
7312: PPUSH
7313: LD_STRING DS-Sophia-2
7315: PPUSH
7316: CALL_OW 88
// DialogueOff ;
7320: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7324: LD_EXP 44
7328: PPUSH
7329: LD_INT 2
7331: PPUSH
7332: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7336: LD_ADDR_EXP 14
7340: PUSH
7341: LD_EXP 14
7345: PPUSH
7346: LD_EXP 44
7350: PPUSH
7351: CALL 64076 0 2
7355: ST_TO_ADDR
// end ;
7356: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7357: LD_INT 2
7359: PPUSH
7360: LD_EXP 46
7364: PPUSH
7365: CALL_OW 292
7369: PUSH
7370: LD_EXP 38
7374: PPUSH
7375: LD_EXP 46
7379: PPUSH
7380: CALL_OW 296
7384: PUSH
7385: LD_INT 6
7387: LESS
7388: AND
7389: PUSH
7390: LD_EXP 17
7394: NOT
7395: AND
7396: PUSH
7397: LD_EXP 30
7401: NOT
7402: AND
7403: IFFALSE 7499
7405: GO 7407
7407: DISABLE
// begin DialogueOn ;
7408: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7412: LD_EXP 46
7416: PPUSH
7417: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7421: LD_EXP 38
7425: PPUSH
7426: LD_STRING DH-Olaf-1
7428: PPUSH
7429: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7433: LD_EXP 46
7437: PPUSH
7438: LD_STRING DO-Olaf-2
7440: PPUSH
7441: CALL_OW 88
// if explosionsTakenByRussians then
7445: LD_EXP 21
7449: IFFALSE 7463
// Say ( Olaf , DO-Olaf-a-3 ) ;
7451: LD_EXP 46
7455: PPUSH
7456: LD_STRING DO-Olaf-a-3
7458: PPUSH
7459: CALL_OW 88
// DialogueOff ;
7463: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7467: LD_EXP 46
7471: PPUSH
7472: LD_INT 2
7474: PPUSH
7475: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7479: LD_ADDR_EXP 14
7483: PUSH
7484: LD_EXP 14
7488: PPUSH
7489: LD_EXP 46
7493: PPUSH
7494: CALL 64076 0 2
7498: ST_TO_ADDR
// end ;
7499: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 40
7507: PPUSH
7508: CALL_OW 292
7512: PUSH
7513: LD_EXP 38
7517: PPUSH
7518: LD_EXP 40
7522: PPUSH
7523: CALL_OW 296
7527: PUSH
7528: LD_INT 6
7530: LESS
7531: AND
7532: PUSH
7533: LD_EXP 17
7537: NOT
7538: AND
7539: PUSH
7540: LD_EXP 30
7544: NOT
7545: AND
7546: IFFALSE 7774
7548: GO 7550
7550: DISABLE
7551: LD_INT 0
7553: PPUSH
7554: PPUSH
// begin DialogueOn ;
7555: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7559: LD_EXP 40
7563: PPUSH
7564: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7568: LD_ADDR_VAR 0 2
7572: PUSH
7573: LD_INT 18
7575: PPUSH
7576: LD_INT 0
7578: PPUSH
7579: CALL_OW 517
7583: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
7584: LD_ADDR_VAR 0 1
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_VAR 0 2
7598: PUSH
7599: LD_INT 1
7601: ARRAY
7602: PUSH
7603: FOR_TO
7604: IFFALSE 7686
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
7606: LD_VAR 0 2
7610: PUSH
7611: LD_INT 1
7613: ARRAY
7614: PUSH
7615: LD_VAR 0 1
7619: ARRAY
7620: PPUSH
7621: LD_VAR 0 2
7625: PUSH
7626: LD_INT 2
7628: ARRAY
7629: PUSH
7630: LD_VAR 0 1
7634: ARRAY
7635: PPUSH
7636: LD_INT 2
7638: PPUSH
7639: LD_INT 3
7641: NEG
7642: PPUSH
7643: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
7647: LD_VAR 0 2
7651: PUSH
7652: LD_INT 1
7654: ARRAY
7655: PUSH
7656: LD_VAR 0 1
7660: ARRAY
7661: PPUSH
7662: LD_VAR 0 2
7666: PUSH
7667: LD_INT 2
7669: ARRAY
7670: PUSH
7671: LD_VAR 0 1
7675: ARRAY
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 331
// end ;
7684: GO 7603
7686: POP
7687: POP
// Say ( Mike , DM-Mike-1 ) ;
7688: LD_EXP 40
7692: PPUSH
7693: LD_STRING DM-Mike-1
7695: PPUSH
7696: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
7700: LD_EXP 38
7704: PPUSH
7705: LD_STRING DH-Mike-2
7707: PPUSH
7708: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
7712: LD_INT 78
7714: PPUSH
7715: LD_INT 104
7717: PPUSH
7718: CALL_OW 84
// dwait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7729: LD_EXP 38
7733: PPUSH
7734: CALL_OW 87
// DialogueOff ;
7738: CALL_OW 7
// SetSide ( Mike , 2 ) ;
7742: LD_EXP 40
7746: PPUSH
7747: LD_INT 2
7749: PPUSH
7750: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
7754: LD_ADDR_EXP 14
7758: PUSH
7759: LD_EXP 14
7763: PPUSH
7764: LD_EXP 40
7768: PPUSH
7769: CALL 64076 0 2
7773: ST_TO_ADDR
// end ;
7774: PPOPN 2
7776: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
7777: LD_EXP 38
7781: PPUSH
7782: LD_EXP 43
7786: PPUSH
7787: CALL_OW 296
7791: PUSH
7792: LD_INT 6
7794: LESS
7795: PUSH
7796: LD_EXP 43
7800: PPUSH
7801: CALL_OW 257
7805: PUSH
7806: LD_INT 33
7808: EQUAL
7809: AND
7810: PUSH
7811: LD_EXP 17
7815: NOT
7816: AND
7817: PUSH
7818: LD_EXP 43
7822: PPUSH
7823: CALL_OW 302
7827: AND
7828: PUSH
7829: LD_EXP 20
7833: AND
7834: PUSH
7835: LD_EXP 43
7839: PUSH
7840: LD_EXP 14
7844: IN
7845: AND
7846: PUSH
7847: LD_EXP 43
7851: PPUSH
7852: CALL_OW 255
7856: PUSH
7857: LD_INT 2
7859: EQUAL
7860: AND
7861: IFFALSE 7890
7863: GO 7865
7865: DISABLE
// begin DialogueOn ;
7866: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
7870: LD_EXP 38
7874: PPUSH
7875: LD_STRING DH-Kaia-Revolver-2
7877: PPUSH
7878: CALL_OW 88
// SetClassKaiaRevolver ;
7882: CALL 1686 0 0
// DialogueOff ;
7886: CALL_OW 7
// end ;
7890: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
7891: LD_EXP 41
7895: PUSH
7896: LD_EXP 48
7900: AND
7901: PUSH
7902: LD_EXP 48
7906: PPUSH
7907: CALL_OW 255
7911: PUSH
7912: LD_INT 2
7914: NONEQUAL
7915: AND
7916: PUSH
7917: LD_EXP 41
7921: PPUSH
7922: CALL_OW 255
7926: PUSH
7927: LD_INT 2
7929: NONEQUAL
7930: AND
7931: PUSH
7932: LD_EXP 14
7936: PPUSH
7937: LD_INT 22
7939: PUSH
7940: LD_INT 2
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PPUSH
7947: CALL_OW 72
7951: PUSH
7952: LD_INT 5
7954: GREATER
7955: AND
7956: PUSH
7957: LD_EXP 17
7961: NOT
7962: AND
7963: PUSH
7964: LD_EXP 30
7968: NOT
7969: AND
7970: IFFALSE 8687
7972: GO 7974
7974: DISABLE
7975: LD_INT 0
7977: PPUSH
7978: PPUSH
// begin DialogueOn ;
7979: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
7983: LD_ADDR_VAR 0 2
7987: PUSH
7988: LD_EXP 39
7992: PPUSH
7993: CALL_OW 302
7997: PUSH
7998: LD_EXP 39
8002: PUSH
8003: LD_EXP 14
8007: IN
8008: AND
8009: PUSH
8010: LD_EXP 39
8014: PPUSH
8015: CALL_OW 255
8019: PUSH
8020: LD_INT 2
8022: EQUAL
8023: AND
8024: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8025: LD_EXP 38
8029: PPUSH
8030: LD_STRING DH-Med-1
8032: PPUSH
8033: CALL_OW 88
// if hasGivi then
8037: LD_VAR 0 2
8041: IFFALSE 8057
// Say ( Givi , DG-Med-2 ) else
8043: LD_EXP 39
8047: PPUSH
8048: LD_STRING DG-Med-2
8050: PPUSH
8051: CALL_OW 88
8055: GO 8162
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8057: LD_EXP 14
8061: PUSH
8062: LD_EXP 49
8066: ISECT
8067: PPUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 2
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 26
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PPUSH
8092: CALL_OW 72
8096: PUSH
8097: LD_INT 1
8099: ARRAY
8100: PPUSH
8101: LD_STRING DArm-Med-e-2
8103: PPUSH
8104: CALL_OW 88
8108: NOT
8109: IFFALSE 8162
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8111: LD_EXP 14
8115: PUSH
8116: LD_EXP 49
8120: ISECT
8121: PPUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 2
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 26
8134: PUSH
8135: LD_INT 2
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 72
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: PPUSH
8155: LD_STRING DArf-Med-e-2
8157: PPUSH
8158: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8162: LD_INT 154
8164: PPUSH
8165: LD_INT 119
8167: PPUSH
8168: LD_INT 70
8170: PPUSH
8171: CALL 18335 0 3
// Say ( Heike , DH-Med-3 ) ;
8175: LD_EXP 38
8179: PPUSH
8180: LD_STRING DH-Med-3
8182: PPUSH
8183: CALL_OW 88
// if hasGivi then
8187: LD_VAR 0 2
8191: IFFALSE 8207
// Say ( Givi , DG-Med-4 ) else
8193: LD_EXP 39
8197: PPUSH
8198: LD_STRING DG-Med-4
8200: PPUSH
8201: CALL_OW 88
8205: GO 8312
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8207: LD_EXP 14
8211: PUSH
8212: LD_EXP 49
8216: ISECT
8217: PPUSH
8218: LD_INT 22
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 26
8230: PUSH
8231: LD_INT 1
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PPUSH
8242: CALL_OW 72
8246: PUSH
8247: LD_INT 1
8249: ARRAY
8250: PPUSH
8251: LD_STRING DArm-Med-e-4
8253: PPUSH
8254: CALL_OW 88
8258: NOT
8259: IFFALSE 8312
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8261: LD_EXP 14
8265: PUSH
8266: LD_EXP 49
8270: ISECT
8271: PPUSH
8272: LD_INT 22
8274: PUSH
8275: LD_INT 2
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 26
8284: PUSH
8285: LD_INT 2
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PPUSH
8296: CALL_OW 72
8300: PUSH
8301: LD_INT 1
8303: ARRAY
8304: PPUSH
8305: LD_STRING DArf-Med-e-4
8307: PPUSH
8308: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8312: LD_ADDR_VAR 0 1
8316: PUSH
8317: LD_EXP 43
8321: PPUSH
8322: CALL_OW 302
8326: PUSH
8327: LD_EXP 43
8331: PUSH
8332: LD_EXP 14
8336: IN
8337: AND
8338: PUSH
8339: LD_EXP 43
8343: PPUSH
8344: CALL_OW 255
8348: PUSH
8349: LD_INT 2
8351: EQUAL
8352: AND
8353: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8354: LD_EXP 40
8358: PPUSH
8359: CALL_OW 302
8363: PUSH
8364: LD_EXP 40
8368: PUSH
8369: LD_EXP 14
8373: IN
8374: AND
8375: PUSH
8376: LD_EXP 43
8380: PPUSH
8381: CALL_OW 255
8385: PUSH
8386: LD_INT 2
8388: EQUAL
8389: AND
8390: IFFALSE 8422
// begin Say ( Mike , DM-Med-5 ) ;
8392: LD_EXP 40
8396: PPUSH
8397: LD_STRING DM-Med-5
8399: PPUSH
8400: CALL_OW 88
// if hasKaia then
8404: LD_VAR 0 1
8408: IFFALSE 8422
// Say ( Kaia , DK-Med-6 ) ;
8410: LD_EXP 43
8414: PPUSH
8415: LD_STRING DK-Med-6
8417: PPUSH
8418: CALL_OW 88
// end ; if hasKaia then
8422: LD_VAR 0 1
8426: IFFALSE 8667
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8428: LD_INT 175
8430: PPUSH
8431: LD_INT 123
8433: PPUSH
8434: LD_INT 2
8436: PPUSH
8437: LD_INT 8
8439: NEG
8440: PPUSH
8441: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8445: LD_INT 175
8447: PPUSH
8448: LD_INT 123
8450: PPUSH
8451: LD_INT 2
8453: PPUSH
8454: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8458: LD_INT 175
8460: PPUSH
8461: LD_INT 123
8463: PPUSH
8464: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8468: LD_EXP 43
8472: PPUSH
8473: LD_STRING DK-Med-7
8475: PPUSH
8476: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8480: LD_EXP 43
8484: PPUSH
8485: LD_STRING DK-Med-8
8487: PPUSH
8488: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8492: LD_EXP 45
8496: PPUSH
8497: CALL_OW 302
8501: PUSH
8502: LD_EXP 45
8506: PUSH
8507: LD_EXP 14
8511: IN
8512: AND
8513: PUSH
8514: LD_EXP 45
8518: PPUSH
8519: CALL_OW 255
8523: PUSH
8524: LD_INT 2
8526: EQUAL
8527: AND
8528: IFFALSE 8586
// begin Say ( Markov , DMar-Med-9 ) ;
8530: LD_EXP 45
8534: PPUSH
8535: LD_STRING DMar-Med-9
8537: PPUSH
8538: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8542: LD_EXP 43
8546: PPUSH
8547: LD_STRING DK-Med-10
8549: PPUSH
8550: CALL_OW 88
// if hasGivi then
8554: LD_VAR 0 2
8558: IFFALSE 8574
// Say ( Kaia , DK-Med-11 ) else
8560: LD_EXP 43
8564: PPUSH
8565: LD_STRING DK-Med-11
8567: PPUSH
8568: CALL_OW 88
8572: GO 8586
// Say ( Kaia , DK-Med-a-11 ) ;
8574: LD_EXP 43
8578: PPUSH
8579: LD_STRING DK-Med-a-11
8581: PPUSH
8582: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
8586: LD_EXP 42
8590: PPUSH
8591: CALL_OW 302
8595: PUSH
8596: LD_EXP 42
8600: PUSH
8601: LD_EXP 14
8605: IN
8606: AND
8607: PUSH
8608: LD_EXP 42
8612: PPUSH
8613: CALL_OW 255
8617: PUSH
8618: LD_INT 2
8620: EQUAL
8621: AND
8622: IFFALSE 8667
// begin Say ( Kamil , DKam-Med-12 ) ;
8624: LD_EXP 42
8628: PPUSH
8629: LD_STRING DKam-Med-12
8631: PPUSH
8632: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8636: LD_EXP 42
8640: PPUSH
8641: LD_STRING DKam-Med-13
8643: PPUSH
8644: CALL_OW 88
// if not hasExplosionCollected then
8648: LD_EXP 23
8652: NOT
8653: IFFALSE 8667
// Say ( Heike , DH-Med-d-14 ) ;
8655: LD_EXP 38
8659: PPUSH
8660: LD_STRING DH-Med-d-14
8662: PPUSH
8663: CALL_OW 88
// end ; end ; DialogueOff ;
8667: CALL_OW 7
// adminAreaDiscovered := true ;
8671: LD_ADDR_EXP 22
8675: PUSH
8676: LD_INT 1
8678: ST_TO_ADDR
// laundryAllowed := true ;
8679: LD_ADDR_EXP 26
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// end ;
8687: PPOPN 2
8689: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
8690: LD_EXP 41
8694: NOT
8695: PUSH
8696: LD_EXP 48
8700: AND
8701: PUSH
8702: LD_EXP 48
8706: PUSH
8707: LD_EXP 14
8711: IN
8712: NOT
8713: AND
8714: PUSH
8715: LD_EXP 14
8719: PPUSH
8720: LD_INT 22
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PPUSH
8730: CALL_OW 72
8734: PUSH
8735: LD_INT 4
8737: GREATER
8738: AND
8739: PUSH
8740: LD_EXP 17
8744: NOT
8745: AND
8746: PUSH
8747: LD_EXP 30
8751: NOT
8752: AND
8753: IFFALSE 9470
8755: GO 8757
8757: DISABLE
8758: LD_INT 0
8760: PPUSH
8761: PPUSH
// begin DialogueOn ;
8762: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8766: LD_ADDR_VAR 0 1
8770: PUSH
8771: LD_EXP 39
8775: PPUSH
8776: CALL_OW 302
8780: PUSH
8781: LD_EXP 39
8785: PUSH
8786: LD_EXP 14
8790: IN
8791: AND
8792: PUSH
8793: LD_EXP 39
8797: PPUSH
8798: CALL_OW 255
8802: PUSH
8803: LD_INT 2
8805: EQUAL
8806: AND
8807: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
8808: LD_EXP 38
8812: PPUSH
8813: LD_STRING DH-Med-a-1
8815: PPUSH
8816: CALL_OW 88
// if hasGivi then
8820: LD_VAR 0 1
8824: IFFALSE 8840
// Say ( Givi , DG-Med-a-2 ) else
8826: LD_EXP 39
8830: PPUSH
8831: LD_STRING DG-Med-a-2
8833: PPUSH
8834: CALL_OW 88
8838: GO 8945
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
8840: LD_EXP 14
8844: PUSH
8845: LD_EXP 49
8849: ISECT
8850: PPUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 2
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 26
8863: PUSH
8864: LD_INT 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_STRING DArm-Med-f-2
8886: PPUSH
8887: CALL_OW 88
8891: NOT
8892: IFFALSE 8945
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
8894: LD_EXP 14
8898: PUSH
8899: LD_EXP 49
8903: ISECT
8904: PPUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: LD_INT 26
8917: PUSH
8918: LD_INT 2
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PPUSH
8929: CALL_OW 72
8933: PUSH
8934: LD_INT 1
8936: ARRAY
8937: PPUSH
8938: LD_STRING DArf-Med-f-2
8940: PPUSH
8941: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8945: LD_INT 154
8947: PPUSH
8948: LD_INT 119
8950: PPUSH
8951: LD_INT 70
8953: PPUSH
8954: CALL 18335 0 3
// Say ( Heike , DH-Med-a-3 ) ;
8958: LD_EXP 38
8962: PPUSH
8963: LD_STRING DH-Med-a-3
8965: PPUSH
8966: CALL_OW 88
// if hasGivi then
8970: LD_VAR 0 1
8974: IFFALSE 8990
// Say ( Givi , DG-Med-a-4 ) else
8976: LD_EXP 39
8980: PPUSH
8981: LD_STRING DG-Med-a-4
8983: PPUSH
8984: CALL_OW 88
8988: GO 9095
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
8990: LD_EXP 14
8994: PUSH
8995: LD_EXP 49
8999: ISECT
9000: PPUSH
9001: LD_INT 22
9003: PUSH
9004: LD_INT 2
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 26
9013: PUSH
9014: LD_INT 1
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 72
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PPUSH
9034: LD_STRING DArm-Med-f-4
9036: PPUSH
9037: CALL_OW 88
9041: NOT
9042: IFFALSE 9095
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9044: LD_EXP 14
9048: PUSH
9049: LD_EXP 49
9053: ISECT
9054: PPUSH
9055: LD_INT 22
9057: PUSH
9058: LD_INT 2
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 26
9067: PUSH
9068: LD_INT 2
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PPUSH
9079: CALL_OW 72
9083: PUSH
9084: LD_INT 1
9086: ARRAY
9087: PPUSH
9088: LD_STRING DArf-Med-f-4
9090: PPUSH
9091: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 43
9104: PPUSH
9105: CALL_OW 302
9109: PUSH
9110: LD_EXP 43
9114: PUSH
9115: LD_EXP 14
9119: IN
9120: AND
9121: PUSH
9122: LD_EXP 43
9126: PPUSH
9127: CALL_OW 255
9131: PUSH
9132: LD_INT 2
9134: EQUAL
9135: AND
9136: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9137: LD_EXP 40
9141: PPUSH
9142: CALL_OW 302
9146: PUSH
9147: LD_EXP 40
9151: PUSH
9152: LD_EXP 14
9156: IN
9157: AND
9158: PUSH
9159: LD_EXP 40
9163: PPUSH
9164: CALL_OW 255
9168: PUSH
9169: LD_INT 2
9171: EQUAL
9172: AND
9173: IFFALSE 9205
// begin Say ( Mike , DM-Med-5 ) ;
9175: LD_EXP 40
9179: PPUSH
9180: LD_STRING DM-Med-5
9182: PPUSH
9183: CALL_OW 88
// if hasKaia then
9187: LD_VAR 0 2
9191: IFFALSE 9205
// Say ( Kaia , DK-Med-6 ) ;
9193: LD_EXP 43
9197: PPUSH
9198: LD_STRING DK-Med-6
9200: PPUSH
9201: CALL_OW 88
// end ; if hasKaia then
9205: LD_VAR 0 2
9209: IFFALSE 9450
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9211: LD_INT 175
9213: PPUSH
9214: LD_INT 123
9216: PPUSH
9217: LD_INT 2
9219: PPUSH
9220: LD_INT 8
9222: NEG
9223: PPUSH
9224: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9228: LD_INT 175
9230: PPUSH
9231: LD_INT 123
9233: PPUSH
9234: LD_INT 2
9236: PPUSH
9237: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9241: LD_INT 175
9243: PPUSH
9244: LD_INT 123
9246: PPUSH
9247: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9251: LD_EXP 43
9255: PPUSH
9256: LD_STRING DK-Med-7
9258: PPUSH
9259: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9263: LD_EXP 43
9267: PPUSH
9268: LD_STRING DK-Med-8
9270: PPUSH
9271: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9275: LD_EXP 45
9279: PPUSH
9280: CALL_OW 302
9284: PUSH
9285: LD_EXP 45
9289: PUSH
9290: LD_EXP 14
9294: IN
9295: AND
9296: PUSH
9297: LD_EXP 45
9301: PPUSH
9302: CALL_OW 255
9306: PUSH
9307: LD_INT 2
9309: EQUAL
9310: AND
9311: IFFALSE 9369
// begin Say ( Markov , DMar-Med-9 ) ;
9313: LD_EXP 45
9317: PPUSH
9318: LD_STRING DMar-Med-9
9320: PPUSH
9321: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9325: LD_EXP 43
9329: PPUSH
9330: LD_STRING DK-Med-10
9332: PPUSH
9333: CALL_OW 88
// if hasGivi then
9337: LD_VAR 0 1
9341: IFFALSE 9357
// Say ( Kaia , DK-Med-11 ) else
9343: LD_EXP 43
9347: PPUSH
9348: LD_STRING DK-Med-11
9350: PPUSH
9351: CALL_OW 88
9355: GO 9369
// Say ( Kaia , DK-Med-a-11 ) ;
9357: LD_EXP 43
9361: PPUSH
9362: LD_STRING DK-Med-a-11
9364: PPUSH
9365: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9369: LD_EXP 42
9373: PPUSH
9374: CALL_OW 302
9378: PUSH
9379: LD_EXP 42
9383: PUSH
9384: LD_EXP 14
9388: IN
9389: AND
9390: PUSH
9391: LD_EXP 42
9395: PPUSH
9396: CALL_OW 255
9400: PUSH
9401: LD_INT 2
9403: EQUAL
9404: AND
9405: IFFALSE 9450
// begin Say ( Kamil , DKam-Med-12 ) ;
9407: LD_EXP 42
9411: PPUSH
9412: LD_STRING DKam-Med-12
9414: PPUSH
9415: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9419: LD_EXP 42
9423: PPUSH
9424: LD_STRING DKam-Med-13
9426: PPUSH
9427: CALL_OW 88
// if not hasExplosionCollected then
9431: LD_EXP 23
9435: NOT
9436: IFFALSE 9450
// Say ( Heike , DH-Med-d-14 ) ;
9438: LD_EXP 38
9442: PPUSH
9443: LD_STRING DH-Med-d-14
9445: PPUSH
9446: CALL_OW 88
// end ; end ; DialogueOff ;
9450: CALL_OW 7
// adminAreaDiscovered := true ;
9454: LD_ADDR_EXP 22
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// laundryAllowed := true ;
9462: LD_ADDR_EXP 26
9466: PUSH
9467: LD_INT 1
9469: ST_TO_ADDR
// end ;
9470: PPOPN 2
9472: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9473: LD_EXP 41
9477: PUSH
9478: LD_EXP 48
9482: NOT
9483: AND
9484: PUSH
9485: LD_EXP 41
9489: PUSH
9490: LD_EXP 14
9494: IN
9495: NOT
9496: AND
9497: PUSH
9498: LD_EXP 14
9502: PPUSH
9503: LD_INT 22
9505: PUSH
9506: LD_INT 2
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PPUSH
9513: CALL_OW 72
9517: PUSH
9518: LD_INT 4
9520: GREATER
9521: AND
9522: PUSH
9523: LD_EXP 17
9527: NOT
9528: AND
9529: PUSH
9530: LD_EXP 30
9534: NOT
9535: AND
9536: IFFALSE 10253
9538: GO 9540
9540: DISABLE
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
// begin DialogueOn ;
9545: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9549: LD_ADDR_VAR 0 1
9553: PUSH
9554: LD_EXP 39
9558: PPUSH
9559: CALL_OW 302
9563: PUSH
9564: LD_EXP 39
9568: PUSH
9569: LD_EXP 14
9573: IN
9574: AND
9575: PUSH
9576: LD_EXP 39
9580: PPUSH
9581: CALL_OW 255
9585: PUSH
9586: LD_INT 2
9588: EQUAL
9589: AND
9590: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
9591: LD_EXP 38
9595: PPUSH
9596: LD_STRING DH-Med-b-1
9598: PPUSH
9599: CALL_OW 88
// if hasGivi then
9603: LD_VAR 0 1
9607: IFFALSE 9623
// Say ( Givi , DG-Med-a-2 ) else
9609: LD_EXP 39
9613: PPUSH
9614: LD_STRING DG-Med-a-2
9616: PPUSH
9617: CALL_OW 88
9621: GO 9728
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9623: LD_EXP 14
9627: PUSH
9628: LD_EXP 49
9632: ISECT
9633: PPUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 2
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 26
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL_OW 72
9662: PUSH
9663: LD_INT 1
9665: ARRAY
9666: PPUSH
9667: LD_STRING DArm-Med-f-2
9669: PPUSH
9670: CALL_OW 88
9674: NOT
9675: IFFALSE 9728
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9677: LD_EXP 14
9681: PUSH
9682: LD_EXP 49
9686: ISECT
9687: PPUSH
9688: LD_INT 22
9690: PUSH
9691: LD_INT 2
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 26
9700: PUSH
9701: LD_INT 2
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 72
9716: PUSH
9717: LD_INT 1
9719: ARRAY
9720: PPUSH
9721: LD_STRING DArf-Med-f-2
9723: PPUSH
9724: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9728: LD_INT 154
9730: PPUSH
9731: LD_INT 119
9733: PPUSH
9734: LD_INT 70
9736: PPUSH
9737: CALL 18335 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9741: LD_EXP 38
9745: PPUSH
9746: LD_STRING DH-Med-a-3
9748: PPUSH
9749: CALL_OW 88
// if hasGivi then
9753: LD_VAR 0 1
9757: IFFALSE 9773
// Say ( Givi , DG-Med-a-4 ) else
9759: LD_EXP 39
9763: PPUSH
9764: LD_STRING DG-Med-a-4
9766: PPUSH
9767: CALL_OW 88
9771: GO 9878
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9773: LD_EXP 14
9777: PUSH
9778: LD_EXP 49
9782: ISECT
9783: PPUSH
9784: LD_INT 22
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 26
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 72
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PPUSH
9817: LD_STRING DArm-Med-f-4
9819: PPUSH
9820: CALL_OW 88
9824: NOT
9825: IFFALSE 9878
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9827: LD_EXP 14
9831: PUSH
9832: LD_EXP 49
9836: ISECT
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 26
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 72
9866: PUSH
9867: LD_INT 1
9869: ARRAY
9870: PPUSH
9871: LD_STRING DArf-Med-f-4
9873: PPUSH
9874: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9878: LD_ADDR_VAR 0 2
9882: PUSH
9883: LD_EXP 43
9887: PPUSH
9888: CALL_OW 302
9892: PUSH
9893: LD_EXP 43
9897: PUSH
9898: LD_EXP 14
9902: IN
9903: AND
9904: PUSH
9905: LD_EXP 43
9909: PPUSH
9910: CALL_OW 255
9914: PUSH
9915: LD_INT 2
9917: EQUAL
9918: AND
9919: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9920: LD_EXP 40
9924: PPUSH
9925: CALL_OW 302
9929: PUSH
9930: LD_EXP 40
9934: PUSH
9935: LD_EXP 14
9939: IN
9940: AND
9941: PUSH
9942: LD_EXP 40
9946: PPUSH
9947: CALL_OW 255
9951: PUSH
9952: LD_INT 2
9954: EQUAL
9955: AND
9956: IFFALSE 9988
// begin Say ( Mike , DM-Med-5 ) ;
9958: LD_EXP 40
9962: PPUSH
9963: LD_STRING DM-Med-5
9965: PPUSH
9966: CALL_OW 88
// if hasKaia then
9970: LD_VAR 0 2
9974: IFFALSE 9988
// Say ( Kaia , DK-Med-6 ) ;
9976: LD_EXP 43
9980: PPUSH
9981: LD_STRING DK-Med-6
9983: PPUSH
9984: CALL_OW 88
// end ; if hasKaia then
9988: LD_VAR 0 2
9992: IFFALSE 10233
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9994: LD_INT 175
9996: PPUSH
9997: LD_INT 123
9999: PPUSH
10000: LD_INT 2
10002: PPUSH
10003: LD_INT 8
10005: NEG
10006: PPUSH
10007: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10011: LD_INT 175
10013: PPUSH
10014: LD_INT 123
10016: PPUSH
10017: LD_INT 2
10019: PPUSH
10020: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10024: LD_INT 175
10026: PPUSH
10027: LD_INT 123
10029: PPUSH
10030: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10034: LD_EXP 43
10038: PPUSH
10039: LD_STRING DK-Med-7
10041: PPUSH
10042: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10046: LD_EXP 43
10050: PPUSH
10051: LD_STRING DK-Med-8
10053: PPUSH
10054: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10058: LD_EXP 45
10062: PPUSH
10063: CALL_OW 302
10067: PUSH
10068: LD_EXP 45
10072: PUSH
10073: LD_EXP 14
10077: IN
10078: AND
10079: PUSH
10080: LD_EXP 45
10084: PPUSH
10085: CALL_OW 255
10089: PUSH
10090: LD_INT 2
10092: EQUAL
10093: AND
10094: IFFALSE 10152
// begin Say ( Markov , DMar-Med-9 ) ;
10096: LD_EXP 45
10100: PPUSH
10101: LD_STRING DMar-Med-9
10103: PPUSH
10104: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10108: LD_EXP 43
10112: PPUSH
10113: LD_STRING DK-Med-10
10115: PPUSH
10116: CALL_OW 88
// if hasGivi then
10120: LD_VAR 0 1
10124: IFFALSE 10140
// Say ( Kaia , DK-Med-11 ) else
10126: LD_EXP 43
10130: PPUSH
10131: LD_STRING DK-Med-11
10133: PPUSH
10134: CALL_OW 88
10138: GO 10152
// Say ( Kaia , DK-Med-a-11 ) ;
10140: LD_EXP 43
10144: PPUSH
10145: LD_STRING DK-Med-a-11
10147: PPUSH
10148: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10152: LD_EXP 42
10156: PPUSH
10157: CALL_OW 302
10161: PUSH
10162: LD_EXP 42
10166: PUSH
10167: LD_EXP 14
10171: IN
10172: AND
10173: PUSH
10174: LD_EXP 42
10178: PPUSH
10179: CALL_OW 255
10183: PUSH
10184: LD_INT 2
10186: EQUAL
10187: AND
10188: IFFALSE 10233
// begin Say ( Kamil , DKam-Med-12 ) ;
10190: LD_EXP 42
10194: PPUSH
10195: LD_STRING DKam-Med-12
10197: PPUSH
10198: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10202: LD_EXP 42
10206: PPUSH
10207: LD_STRING DKam-Med-13
10209: PPUSH
10210: CALL_OW 88
// if not hasExplosionCollected then
10214: LD_EXP 23
10218: NOT
10219: IFFALSE 10233
// Say ( Heike , DH-Med-d-14 ) ;
10221: LD_EXP 38
10225: PPUSH
10226: LD_STRING DH-Med-d-14
10228: PPUSH
10229: CALL_OW 88
// end ; end ; DialogueOff ;
10233: CALL_OW 7
// adminAreaDiscovered := true ;
10237: LD_ADDR_EXP 22
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// laundryAllowed := true ;
10245: LD_ADDR_EXP 26
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// end ;
10253: PPOPN 2
10255: END
// every 0 0$1 trigger laundryAllowed do
10256: LD_EXP 26
10260: IFFALSE 10272
10262: GO 10264
10264: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10265: LD_STRING M1-laundry
10267: PPUSH
10268: CALL_OW 337
10272: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10273: LD_EXP 41
10277: NOT
10278: PUSH
10279: LD_EXP 48
10283: NOT
10284: AND
10285: PUSH
10286: LD_EXP 46
10290: PPUSH
10291: CALL_OW 302
10295: AND
10296: PUSH
10297: LD_EXP 46
10301: PUSH
10302: LD_EXP 14
10306: IN
10307: AND
10308: PUSH
10309: LD_EXP 46
10313: PPUSH
10314: CALL_OW 255
10318: PUSH
10319: LD_INT 2
10321: EQUAL
10322: AND
10323: PUSH
10324: LD_EXP 17
10328: NOT
10329: AND
10330: PUSH
10331: LD_EXP 30
10335: NOT
10336: AND
10337: IFFALSE 10493
10339: GO 10341
10341: DISABLE
// begin DialogueOn ;
10342: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10346: LD_INT 152
10348: PPUSH
10349: LD_INT 115
10351: PPUSH
10352: LD_INT 2
10354: PPUSH
10355: LD_INT 16
10357: NEG
10358: PPUSH
10359: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10363: LD_INT 152
10365: PPUSH
10366: LD_INT 115
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10376: LD_INT 152
10378: PPUSH
10379: LD_INT 115
10381: PPUSH
10382: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10386: LD_EXP 46
10390: PPUSH
10391: LD_STRING DO-Med-c-1
10393: PPUSH
10394: CALL_OW 88
// if not hasExplosionCollected then
10398: LD_EXP 23
10402: NOT
10403: IFFALSE 10419
// Say ( Heike , DH-Med-d-14 ) else
10405: LD_EXP 38
10409: PPUSH
10410: LD_STRING DH-Med-d-14
10412: PPUSH
10413: CALL_OW 88
10417: GO 10481
// begin Say ( Heike , DH-Med-c-2 ) ;
10419: LD_EXP 38
10423: PPUSH
10424: LD_STRING DH-Med-c-2
10426: PPUSH
10427: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10431: LD_EXP 43
10435: PPUSH
10436: CALL_OW 302
10440: PUSH
10441: LD_EXP 43
10445: PUSH
10446: LD_EXP 14
10450: IN
10451: AND
10452: PUSH
10453: LD_EXP 43
10457: PPUSH
10458: CALL_OW 255
10462: PUSH
10463: LD_INT 2
10465: EQUAL
10466: AND
10467: IFFALSE 10481
// Say ( Kaia , DK-Med-c-3 ) ;
10469: LD_EXP 43
10473: PPUSH
10474: LD_STRING DK-Med-c-3
10476: PPUSH
10477: CALL_OW 88
// end ; DialogueOff ;
10481: CALL_OW 7
// adminAreaDiscovered := true ;
10485: LD_ADDR_EXP 22
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// end ;
10493: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10494: LD_EXP 43
10498: PPUSH
10499: CALL_OW 256
10503: PUSH
10504: LD_INT 250
10506: LESS
10507: PUSH
10508: LD_EXP 43
10512: PUSH
10513: LD_EXP 14
10517: IN
10518: AND
10519: PUSH
10520: LD_EXP 17
10524: AND
10525: PUSH
10526: LD_EXP 24
10530: AND
10531: IFFALSE 10660
10533: GO 10535
10535: DISABLE
// begin DialogueOn ;
10536: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10540: LD_EXP 43
10544: PPUSH
10545: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10549: LD_EXP 43
10553: PPUSH
10554: LD_STRING DK-death-1
10556: PPUSH
10557: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10561: LD_EXP 38
10565: PPUSH
10566: LD_STRING DH-death-2
10568: PPUSH
10569: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
10573: LD_EXP 43
10577: PPUSH
10578: LD_STRING DK-death-3
10580: PPUSH
10581: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
10585: LD_EXP 43
10589: PPUSH
10590: LD_STRING DK-death-4
10592: PPUSH
10593: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
10597: LD_EXP 43
10601: PPUSH
10602: LD_INT 8
10604: PPUSH
10605: CALL_OW 235
// ComStop ( Kaia ) ;
10609: LD_EXP 43
10613: PPUSH
10614: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
10618: LD_INT 8
10620: PPUSH
10621: LD_INT 2
10623: PPUSH
10624: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
10628: LD_ADDR_EXP 14
10632: PUSH
10633: LD_EXP 14
10637: PUSH
10638: LD_EXP 43
10642: DIFF
10643: ST_TO_ADDR
// DialogueOff ;
10644: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
10648: LD_EXP 40
10652: PPUSH
10653: LD_STRING DM-death-5
10655: PPUSH
10656: CALL_OW 88
// end ;
10660: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10661: LD_EXP 25
10665: NOT
10666: PUSH
10667: LD_EXP 30
10671: NOT
10672: AND
10673: PUSH
10674: LD_EXP 51
10678: PUSH
10679: LD_EXP 14
10683: IN
10684: NOT
10685: AND
10686: PUSH
10687: LD_INT 2
10689: PPUSH
10690: LD_EXP 51
10694: PPUSH
10695: CALL_OW 292
10699: AND
10700: PUSH
10701: LD_EXP 38
10705: PPUSH
10706: LD_EXP 51
10710: PPUSH
10711: CALL_OW 296
10715: PUSH
10716: LD_INT 6
10718: LESS
10719: AND
10720: PUSH
10721: LD_EXP 17
10725: NOT
10726: AND
10727: IFFALSE 10951
10729: GO 10731
10731: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
10732: LD_EXP 51
10736: PPUSH
10737: LD_EXP 38
10741: PPUSH
10742: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
10746: LD_EXP 38
10750: PPUSH
10751: LD_EXP 51
10755: PPUSH
10756: CALL_OW 119
// wait ( 0 0$0.3 ) ;
10760: LD_INT 10
10762: PPUSH
10763: CALL_OW 67
// DialogueOn ;
10767: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
10771: LD_EXP 51
10775: PPUSH
10776: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
10780: LD_EXP 38
10784: PPUSH
10785: LD_STRING DH-Deal-1
10787: PPUSH
10788: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
10792: LD_EXP 51
10796: PPUSH
10797: LD_STRING DJ-Deal-2
10799: PPUSH
10800: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
10804: LD_EXP 38
10808: PPUSH
10809: LD_STRING DH-Deal-3
10811: PPUSH
10812: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
10816: LD_EXP 51
10820: PPUSH
10821: LD_STRING DJ-Deal-4
10823: PPUSH
10824: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
10828: LD_EXP 51
10832: PPUSH
10833: LD_STRING DJ-Deal-5
10835: PPUSH
10836: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
10840: LD_EXP 51
10844: PPUSH
10845: LD_STRING DJ-Deal-6
10847: PPUSH
10848: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
10852: LD_EXP 51
10856: PPUSH
10857: LD_STRING DJ-Deal-7
10859: PPUSH
10860: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
10864: LD_EXP 38
10868: PPUSH
10869: LD_STRING DH-Deal-8
10871: PPUSH
10872: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
10876: LD_EXP 38
10880: PPUSH
10881: LD_STRING DH-Deal-9
10883: PPUSH
10884: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
10888: LD_EXP 51
10892: PPUSH
10893: LD_STRING DJ-Deal-10
10895: PPUSH
10896: CALL_OW 88
// DialogueOff ;
10900: CALL_OW 7
// contactWithAmerican := true ;
10904: LD_ADDR_EXP 25
10908: PUSH
10909: LD_INT 1
10911: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
10912: LD_STRING M1-american-out
10914: PPUSH
10915: CALL_OW 604
// SetSide ( Harris , 2 ) ;
10919: LD_EXP 51
10923: PPUSH
10924: LD_INT 2
10926: PPUSH
10927: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
10931: LD_ADDR_EXP 14
10935: PUSH
10936: LD_EXP 14
10940: PPUSH
10941: LD_EXP 51
10945: PPUSH
10946: CALL 64076 0 2
10950: ST_TO_ADDR
// end ;
10951: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10952: LD_EXP 25
10956: PUSH
10957: LD_EXP 30
10961: NOT
10962: AND
10963: PUSH
10964: LD_EXP 51
10968: PUSH
10969: LD_EXP 14
10973: IN
10974: NOT
10975: AND
10976: PUSH
10977: LD_INT 2
10979: PPUSH
10980: LD_EXP 51
10984: PPUSH
10985: CALL_OW 292
10989: AND
10990: PUSH
10991: LD_EXP 38
10995: PPUSH
10996: LD_EXP 51
11000: PPUSH
11001: CALL_OW 296
11005: PUSH
11006: LD_INT 6
11008: LESS
11009: AND
11010: PUSH
11011: LD_EXP 17
11015: NOT
11016: AND
11017: IFFALSE 11142
11019: GO 11021
11021: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11022: LD_EXP 51
11026: PPUSH
11027: LD_EXP 38
11031: PPUSH
11032: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11036: LD_EXP 38
11040: PPUSH
11041: LD_EXP 51
11045: PPUSH
11046: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11050: LD_INT 10
11052: PPUSH
11053: CALL_OW 67
// DialogueOn ;
11057: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11061: LD_EXP 51
11065: PPUSH
11066: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11070: LD_EXP 51
11074: PPUSH
11075: LD_STRING DJ-Escort-1
11077: PPUSH
11078: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11082: LD_EXP 38
11086: PPUSH
11087: LD_STRING DH-Escort-2
11089: PPUSH
11090: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11094: LD_EXP 51
11098: PPUSH
11099: LD_STRING DJ-Escort-3
11101: PPUSH
11102: CALL_OW 88
// DialogueOff ;
11106: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11110: LD_EXP 51
11114: PPUSH
11115: LD_INT 2
11117: PPUSH
11118: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11122: LD_ADDR_EXP 14
11126: PUSH
11127: LD_EXP 14
11131: PPUSH
11132: LD_EXP 51
11136: PPUSH
11137: CALL 64076 0 2
11141: ST_TO_ADDR
// end ;
11142: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11143: LD_EXP 25
11147: PUSH
11148: LD_EXP 30
11152: NOT
11153: AND
11154: PUSH
11155: LD_EXP 50
11159: PUSH
11160: LD_EXP 14
11164: DIFF
11165: PPUSH
11166: LD_INT 22
11168: PUSH
11169: LD_INT 4
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: LD_INT 120
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 101
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: LIST
11207: PPUSH
11208: CALL_OW 72
11212: AND
11213: PUSH
11214: LD_EXP 17
11218: NOT
11219: AND
11220: IFFALSE 11435
11222: GO 11224
11224: DISABLE
11225: LD_INT 0
11227: PPUSH
// begin enable ;
11228: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11229: LD_ADDR_VAR 0 1
11233: PUSH
11234: LD_EXP 50
11238: PUSH
11239: LD_EXP 14
11243: DIFF
11244: PPUSH
11245: LD_INT 22
11247: PUSH
11248: LD_INT 4
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 91
11257: PUSH
11258: LD_EXP 38
11262: PUSH
11263: LD_INT 6
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 101
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: PPUSH
11286: CALL_OW 72
11290: PPUSH
11291: LD_EXP 38
11295: PPUSH
11296: CALL_OW 74
11300: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11301: LD_VAR 0 1
11305: PPUSH
11306: LD_EXP 38
11310: PPUSH
11311: CALL_OW 296
11315: PUSH
11316: LD_INT 6
11318: LESS
11319: IFFALSE 11435
// begin DialogueOn ;
11321: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11325: LD_VAR 0 1
11329: PPUSH
11330: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11334: LD_EXP 38
11338: PPUSH
11339: LD_STRING DH-USsol-1
11341: PPUSH
11342: CALL_OW 88
// if GetSex ( un ) = sex_male then
11346: LD_VAR 0 1
11350: PPUSH
11351: CALL_OW 258
11355: PUSH
11356: LD_INT 1
11358: EQUAL
11359: IFFALSE 11375
// Say ( un , DUSM-USsol-2 ) else
11361: LD_VAR 0 1
11365: PPUSH
11366: LD_STRING DUSM-USsol-2
11368: PPUSH
11369: CALL_OW 88
11373: GO 11387
// Say ( un , DUSF-USsol-2 ) ;
11375: LD_VAR 0 1
11379: PPUSH
11380: LD_STRING DUSF-USsol-2
11382: PPUSH
11383: CALL_OW 88
// DialogueOff ;
11387: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11391: LD_ADDR_EXP 14
11395: PUSH
11396: LD_EXP 14
11400: PPUSH
11401: LD_VAR 0 1
11405: PPUSH
11406: CALL 64076 0 2
11410: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11411: LD_VAR 0 1
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 109
// SetSide ( un , 2 ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_INT 2
11430: PPUSH
11431: CALL_OW 235
// end ; end ;
11435: PPOPN 1
11437: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11438: LD_EXP 49
11442: PUSH
11443: LD_EXP 30
11447: NOT
11448: AND
11449: PUSH
11450: LD_EXP 49
11454: PUSH
11455: LD_EXP 14
11459: DIFF
11460: PPUSH
11461: LD_INT 3
11463: PUSH
11464: LD_INT 120
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 91
11480: PUSH
11481: LD_EXP 38
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 101
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 72
11513: AND
11514: PUSH
11515: LD_EXP 17
11519: NOT
11520: AND
11521: IFFALSE 11736
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
// begin enable ;
11529: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11530: LD_ADDR_VAR 0 1
11534: PUSH
11535: LD_EXP 49
11539: PUSH
11540: LD_EXP 14
11544: DIFF
11545: PPUSH
11546: LD_INT 22
11548: PUSH
11549: LD_INT 5
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 91
11558: PUSH
11559: LD_EXP 38
11563: PUSH
11564: LD_INT 6
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 101
11574: PUSH
11575: LD_INT 2
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 72
11591: PPUSH
11592: LD_EXP 38
11596: PPUSH
11597: CALL_OW 74
11601: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11602: LD_VAR 0 1
11606: PPUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL_OW 296
11616: PUSH
11617: LD_INT 6
11619: LESS
11620: IFFALSE 11736
// begin DialogueOn ;
11622: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11626: LD_VAR 0 1
11630: PPUSH
11631: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11635: LD_EXP 38
11639: PPUSH
11640: LD_STRING DH-USsol-1
11642: PPUSH
11643: CALL_OW 88
// if GetSex ( un ) = sex_male then
11647: LD_VAR 0 1
11651: PPUSH
11652: CALL_OW 258
11656: PUSH
11657: LD_INT 1
11659: EQUAL
11660: IFFALSE 11676
// Say ( un , DArm-USsol-2 ) else
11662: LD_VAR 0 1
11666: PPUSH
11667: LD_STRING DArm-USsol-2
11669: PPUSH
11670: CALL_OW 88
11674: GO 11688
// Say ( un , DArf-USsol-3 ) ;
11676: LD_VAR 0 1
11680: PPUSH
11681: LD_STRING DArf-USsol-3
11683: PPUSH
11684: CALL_OW 88
// DialogueOff ;
11688: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11692: LD_ADDR_EXP 14
11696: PUSH
11697: LD_EXP 14
11701: PPUSH
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL 64076 0 2
11711: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11712: LD_VAR 0 1
11716: PPUSH
11717: LD_INT 1
11719: PPUSH
11720: CALL_OW 109
// SetSide ( un , 2 ) ;
11724: LD_VAR 0 1
11728: PPUSH
11729: LD_INT 2
11731: PPUSH
11732: CALL_OW 235
// end ; end ;
11736: PPOPN 1
11738: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
11739: LD_EXP 50
11743: PPUSH
11744: LD_INT 101
11746: PUSH
11747: LD_INT 2
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 72
11758: PUSH
11759: LD_EXP 14
11763: PPUSH
11764: LD_INT 22
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PPUSH
11774: CALL_OW 72
11778: PUSH
11779: LD_INT 5
11781: GREATER
11782: AND
11783: PUSH
11784: LD_EXP 10
11788: NOT
11789: AND
11790: PUSH
11791: LD_EXP 30
11795: NOT
11796: AND
11797: PUSH
11798: LD_EXP 25
11802: NOT
11803: AND
11804: PUSH
11805: LD_EXP 17
11809: NOT
11810: AND
11811: IFFALSE 11926
11813: GO 11815
11815: DISABLE
11816: LD_INT 0
11818: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
11819: LD_ADDR_VAR 0 1
11823: PUSH
11824: LD_EXP 50
11828: PPUSH
11829: LD_INT 22
11831: PUSH
11832: LD_INT 4
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 101
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PPUSH
11853: CALL_OW 72
11857: PUSH
11858: LD_INT 1
11860: ARRAY
11861: ST_TO_ADDR
// DialogueOn ;
11862: CALL_OW 6
// if GetSex ( un ) = sex_male then
11866: LD_VAR 0 1
11870: PPUSH
11871: CALL_OW 258
11875: PUSH
11876: LD_INT 1
11878: EQUAL
11879: IFFALSE 11895
// Say ( un , DUSm-USsol-a-2 ) else
11881: LD_VAR 0 1
11885: PPUSH
11886: LD_STRING DUSm-USsol-a-2
11888: PPUSH
11889: CALL_OW 88
11893: GO 11907
// Say ( un , DUSf-USsol-a-2 ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_STRING DUSf-USsol-a-2
11902: PPUSH
11903: CALL_OW 88
// DialogueOff ;
11907: CALL_OW 7
// wait ( 0 0$2 ) ;
11911: LD_INT 70
11913: PPUSH
11914: CALL_OW 67
// isAlarm := true ;
11918: LD_ADDR_EXP 17
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// end ;
11926: PPOPN 1
11928: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
11929: LD_EXP 17
11933: NOT
11934: PUSH
11935: LD_EXP 39
11939: PPUSH
11940: CALL_OW 302
11944: AND
11945: PUSH
11946: LD_EXP 39
11950: PPUSH
11951: CALL_OW 255
11955: PUSH
11956: LD_INT 2
11958: EQUAL
11959: AND
11960: PUSH
11961: LD_EXP 26
11965: AND
11966: PUSH
11967: LD_EXP 28
11971: NOT
11972: AND
11973: PUSH
11974: LD_EXP 27
11978: NOT
11979: AND
11980: PUSH
11981: LD_EXP 30
11985: NOT
11986: AND
11987: PUSH
11988: LD_EXP 39
11992: PPUSH
11993: LD_INT 165
11995: PPUSH
11996: CALL 18374 0 2
12000: AND
12001: IFFALSE 12133
12003: GO 12005
12005: DISABLE
// begin enable ;
12006: ENABLE
// InGameOn ;
12007: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12011: LD_EXP 39
12015: PPUSH
12016: LD_INT 5
12018: PPUSH
12019: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12023: LD_INT 165
12025: PPUSH
12026: LD_INT 5
12028: PPUSH
12029: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12033: LD_EXP 39
12037: PPUSH
12038: LD_INT 165
12040: PPUSH
12041: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12045: LD_INT 35
12047: PPUSH
12048: CALL_OW 67
// until IsInUnit ( Givi ) ;
12052: LD_EXP 39
12056: PPUSH
12057: CALL_OW 310
12061: IFFALSE 12045
// case Query ( GiviInLaundry ) of 1 :
12063: LD_STRING GiviInLaundry
12065: PPUSH
12066: CALL_OW 97
12070: PUSH
12071: LD_INT 1
12073: DOUBLE
12074: EQUAL
12075: IFTRUE 12079
12077: GO 12086
12079: POP
// SpawnGiviAsRussian ; 2 :
12080: CALL 1818 0 0
12084: GO 12098
12086: LD_INT 2
12088: DOUBLE
12089: EQUAL
12090: IFTRUE 12094
12092: GO 12097
12094: POP
// ; end ;
12095: GO 12098
12097: POP
// ComExitBuilding ( Givi ) ;
12098: LD_EXP 39
12102: PPUSH
12103: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12107: LD_EXP 39
12111: PPUSH
12112: LD_INT 2
12114: PPUSH
12115: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12119: LD_INT 165
12121: PPUSH
12122: LD_INT 3
12124: PPUSH
12125: CALL_OW 235
// InGameOff ;
12129: CALL_OW 9
// end ;
12133: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12134: LD_EXP 17
12138: NOT
12139: PUSH
12140: LD_EXP 28
12144: AND
12145: PUSH
12146: LD_EXP 39
12150: PPUSH
12151: CALL_OW 255
12155: PUSH
12156: LD_INT 2
12158: EQUAL
12159: AND
12160: PUSH
12161: LD_EXP 39
12165: PPUSH
12166: CALL_OW 248
12170: PUSH
12171: LD_INT 3
12173: EQUAL
12174: AND
12175: PUSH
12176: LD_EXP 39
12180: PPUSH
12181: LD_INT 119
12183: PPUSH
12184: CALL 18374 0 2
12188: AND
12189: PUSH
12190: LD_EXP 30
12194: NOT
12195: AND
12196: IFFALSE 12420
12198: GO 12200
12200: DISABLE
// begin InGameOn ;
12201: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12205: LD_EXP 39
12209: PPUSH
12210: LD_INT 3
12212: PPUSH
12213: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12217: LD_EXP 39
12221: PPUSH
12222: LD_INT 119
12224: PPUSH
12225: CALL_OW 120
// wait ( 0 0$1 ) ;
12229: LD_INT 35
12231: PPUSH
12232: CALL_OW 67
// DialogueOn ;
12236: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12240: LD_EXP 39
12244: PPUSH
12245: LD_STRING DG-Captive-1
12247: PPUSH
12248: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12252: LD_EXP 57
12256: PPUSH
12257: LD_STRING DCom-Captive-2
12259: PPUSH
12260: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12264: LD_EXP 39
12268: PPUSH
12269: LD_STRING DG-Captive-3
12271: PPUSH
12272: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12276: LD_EXP 57
12280: PPUSH
12281: LD_STRING DCom-Captive-4
12283: PPUSH
12284: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12288: LD_EXP 57
12292: PPUSH
12293: CALL_OW 64
// DialogueOff ;
12297: CALL_OW 7
// InGameOff ;
12301: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12305: LD_EXP 39
12309: PPUSH
12310: LD_INT 2
12312: PPUSH
12313: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12317: LD_EXP 39
12321: PPUSH
12322: CALL_OW 122
// if Aviradze then
12326: LD_EXP 48
12330: IFFALSE 12373
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12332: LD_ADDR_EXP 14
12336: PUSH
12337: LD_EXP 14
12341: PPUSH
12342: LD_EXP 48
12346: PPUSH
12347: CALL 64076 0 2
12351: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12352: LD_EXP 48
12356: PPUSH
12357: LD_INT 2
12359: PPUSH
12360: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12364: LD_EXP 48
12368: PPUSH
12369: CALL_OW 122
// end ; if Ibrahim then
12373: LD_EXP 41
12377: IFFALSE 12420
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12379: LD_ADDR_EXP 14
12383: PUSH
12384: LD_EXP 14
12388: PPUSH
12389: LD_EXP 41
12393: PPUSH
12394: CALL 64076 0 2
12398: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12399: LD_EXP 41
12403: PPUSH
12404: LD_INT 2
12406: PPUSH
12407: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12411: LD_EXP 41
12415: PPUSH
12416: CALL_OW 122
// end ; end ;
12420: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12421: LD_EXP 17
12425: NOT
12426: PUSH
12427: LD_EXP 27
12431: AND
12432: PUSH
12433: LD_EXP 38
12437: PPUSH
12438: CALL_OW 248
12442: PUSH
12443: LD_INT 3
12445: EQUAL
12446: AND
12447: PUSH
12448: LD_EXP 38
12452: PPUSH
12453: LD_INT 119
12455: PPUSH
12456: CALL 18374 0 2
12460: AND
12461: PUSH
12462: LD_EXP 30
12466: NOT
12467: AND
12468: IFFALSE 12742
12470: GO 12472
12472: DISABLE
// begin InGameOn ;
12473: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12477: LD_EXP 38
12481: PPUSH
12482: LD_INT 3
12484: PPUSH
12485: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12489: LD_EXP 38
12493: PPUSH
12494: LD_INT 119
12496: PPUSH
12497: CALL_OW 120
// wait ( 0 0$1 ) ;
12501: LD_INT 35
12503: PPUSH
12504: CALL_OW 67
// DialogueOn ;
12508: CALL_OW 6
// if Aviradze and Ibrahim then
12512: LD_EXP 48
12516: PUSH
12517: LD_EXP 41
12521: AND
12522: IFFALSE 12538
// Say ( Heike , DH-Captive-a-1 ) else
12524: LD_EXP 38
12528: PPUSH
12529: LD_STRING DH-Captive-a-1
12531: PPUSH
12532: CALL_OW 88
12536: GO 12550
// Say ( Heike , DH-Captive-a-b-1 ) ;
12538: LD_EXP 38
12542: PPUSH
12543: LD_STRING DH-Captive-a-b-1
12545: PPUSH
12546: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12550: LD_EXP 57
12554: PPUSH
12555: LD_STRING DCom-Captive-a-2
12557: PPUSH
12558: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12562: LD_EXP 38
12566: PPUSH
12567: LD_STRING DH-Captive-a-3
12569: PPUSH
12570: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
12574: LD_EXP 57
12578: PPUSH
12579: LD_STRING DCom-Captive-a-4
12581: PPUSH
12582: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
12586: LD_EXP 38
12590: PPUSH
12591: LD_STRING DH-Captive-a-5
12593: PPUSH
12594: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-6 ) ;
12598: LD_EXP 57
12602: PPUSH
12603: LD_STRING DCom-Captive-a-6
12605: PPUSH
12606: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12610: LD_EXP 57
12614: PPUSH
12615: CALL_OW 64
// DialogueOff ;
12619: CALL_OW 7
// InGameOff ;
12623: CALL_OW 9
// SetSide ( Heike , 2 ) ;
12627: LD_EXP 38
12631: PPUSH
12632: LD_INT 2
12634: PPUSH
12635: CALL_OW 235
// ComExitBuilding ( Heike ) ;
12639: LD_EXP 38
12643: PPUSH
12644: CALL_OW 122
// if Aviradze then
12648: LD_EXP 48
12652: IFFALSE 12695
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12654: LD_ADDR_EXP 14
12658: PUSH
12659: LD_EXP 14
12663: PPUSH
12664: LD_EXP 48
12668: PPUSH
12669: CALL 64076 0 2
12673: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12674: LD_EXP 48
12678: PPUSH
12679: LD_INT 2
12681: PPUSH
12682: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12686: LD_EXP 48
12690: PPUSH
12691: CALL_OW 122
// end ; if Ibrahim then
12695: LD_EXP 41
12699: IFFALSE 12742
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12701: LD_ADDR_EXP 14
12705: PUSH
12706: LD_EXP 14
12710: PPUSH
12711: LD_EXP 41
12715: PPUSH
12716: CALL 64076 0 2
12720: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12721: LD_EXP 41
12725: PPUSH
12726: LD_INT 2
12728: PPUSH
12729: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12733: LD_EXP 41
12737: PPUSH
12738: CALL_OW 122
// end ; end ;
12742: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
12743: LD_INT 2
12745: PUSH
12746: LD_INT 25
12748: PUSH
12749: LD_INT 32
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 25
12758: PUSH
12759: LD_INT 34
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: IFFALSE 12787
12777: GO 12779
12779: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
12780: LD_STRING M1-weapons-out
12782: PPUSH
12783: CALL_OW 604
12787: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
12788: LD_INT 2
12790: PPUSH
12791: LD_EXP 53
12795: PPUSH
12796: CALL_OW 292
12800: PUSH
12801: LD_EXP 38
12805: PPUSH
12806: LD_EXP 53
12810: PPUSH
12811: CALL_OW 296
12815: AND
12816: PUSH
12817: LD_EXP 25
12821: NOT
12822: AND
12823: PUSH
12824: LD_EXP 17
12828: NOT
12829: AND
12830: PUSH
12831: LD_EXP 30
12835: NOT
12836: AND
12837: IFFALSE 13636
12839: GO 12841
12841: DISABLE
12842: LD_INT 0
12844: PPUSH
12845: PPUSH
// begin DialogueOn ;
12846: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
12850: LD_EXP 53
12854: PPUSH
12855: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
12859: LD_EXP 53
12863: PPUSH
12864: LD_STRING DJy-Food-1
12866: PPUSH
12867: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
12871: LD_EXP 38
12875: PPUSH
12876: LD_STRING DH-Food-2
12878: PPUSH
12879: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
12883: LD_EXP 53
12887: PPUSH
12888: LD_STRING DJy-Food-3
12890: PPUSH
12891: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
12895: LD_EXP 53
12899: PPUSH
12900: LD_STRING DJy-Food-4
12902: PPUSH
12903: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
12907: LD_EXP 38
12911: PPUSH
12912: LD_STRING DH-Food-5
12914: PPUSH
12915: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
12919: LD_EXP 53
12923: PPUSH
12924: LD_STRING DJy-Food-6
12926: PPUSH
12927: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
12931: LD_EXP 53
12935: PPUSH
12936: LD_STRING DJy-Food-7
12938: PPUSH
12939: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
12943: LD_EXP 53
12947: PPUSH
12948: LD_STRING DJy-Food-8
12950: PPUSH
12951: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
12955: LD_EXP 38
12959: PPUSH
12960: LD_STRING DH-Food-9
12962: PPUSH
12963: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
12967: LD_EXP 53
12971: PPUSH
12972: LD_STRING DJy-Food-10
12974: PPUSH
12975: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
12979: LD_EXP 38
12983: PPUSH
12984: LD_STRING DH-Food-11
12986: PPUSH
12987: CALL_OW 88
// DialogueOff ;
12991: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
12995: LD_STRING M3
12997: PPUSH
12998: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13002: LD_INT 5
13004: PPUSH
13005: LD_INT 215
13007: PPUSH
13008: LD_INT 117
13010: PPUSH
13011: LD_INT 0
13013: PPUSH
13014: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13018: LD_INT 215
13020: PPUSH
13021: LD_INT 118
13023: PPUSH
13024: LD_INT 2
13026: PPUSH
13027: LD_INT 6
13029: NEG
13030: PPUSH
13031: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13035: LD_INT 215
13037: PPUSH
13038: LD_INT 118
13040: PPUSH
13041: LD_INT 2
13043: PPUSH
13044: CALL_OW 331
// foodDelivered := false ;
13048: LD_ADDR_VAR 0 2
13052: PUSH
13053: LD_INT 0
13055: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13056: LD_INT 35
13058: PPUSH
13059: CALL_OW 67
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13063: LD_ADDR_VAR 0 1
13067: PUSH
13068: LD_EXP 14
13072: PUSH
13073: LD_EXP 38
13077: UNION
13078: PPUSH
13079: LD_INT 91
13081: PUSH
13082: LD_EXP 53
13086: PUSH
13087: LD_INT 6
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 25
13097: PUSH
13098: LD_INT 33
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: PUSH
13114: FOR_IN
13115: IFFALSE 13365
// if Carry ( i ) then
13117: LD_VAR 0 1
13121: PPUSH
13122: CALL_OW 281
13126: IFFALSE 13363
// begin DialogueOn ;
13128: CALL_OW 6
// foodDelivered := true ;
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: LD_INT 1
13139: ST_TO_ADDR
// case i of Heike :
13140: LD_VAR 0 1
13144: PUSH
13145: LD_EXP 38
13149: DOUBLE
13150: EQUAL
13151: IFTRUE 13155
13153: GO 13170
13155: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13156: LD_EXP 38
13160: PPUSH
13161: LD_STRING DH-Food-12
13163: PPUSH
13164: CALL_OW 88
13168: GO 13346
13170: LD_EXP 43
13174: DOUBLE
13175: EQUAL
13176: IFTRUE 13180
13178: GO 13195
13180: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13181: LD_EXP 43
13185: PPUSH
13186: LD_STRING DK-Food-a-12
13188: PPUSH
13189: CALL_OW 88
13193: GO 13346
13195: LD_EXP 45
13199: DOUBLE
13200: EQUAL
13201: IFTRUE 13205
13203: GO 13220
13205: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13206: LD_EXP 45
13210: PPUSH
13211: LD_STRING DMar-Food-a-12
13213: PPUSH
13214: CALL_OW 88
13218: GO 13346
13220: LD_EXP 39
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13245
13230: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13231: LD_EXP 39
13235: PPUSH
13236: LD_STRING DG-Food-a-14
13238: PPUSH
13239: CALL_OW 88
13243: GO 13346
13245: LD_EXP 40
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13270
13255: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13256: LD_EXP 40
13260: PPUSH
13261: LD_STRING DM-Food-a-15
13263: PPUSH
13264: CALL_OW 88
13268: GO 13346
13270: LD_EXP 42
13274: DOUBLE
13275: EQUAL
13276: IFTRUE 13280
13278: GO 13295
13280: POP
// Say ( Kamil , DKam-Food-a-16 ) ; Sophia :
13281: LD_EXP 42
13285: PPUSH
13286: LD_STRING DKam-Food-a-16
13288: PPUSH
13289: CALL_OW 88
13293: GO 13346
13295: LD_EXP 44
13299: DOUBLE
13300: EQUAL
13301: IFTRUE 13305
13303: GO 13320
13305: POP
// Say ( Sophia , DS-Food-a-17 ) ; Kurt :
13306: LD_EXP 44
13310: PPUSH
13311: LD_STRING DS-Food-a-17
13313: PPUSH
13314: CALL_OW 88
13318: GO 13346
13320: LD_EXP 47
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13345
13330: POP
// Say ( Kurt , DKs-Food-a-18 ) ; end ;
13331: LD_EXP 47
13335: PPUSH
13336: LD_STRING DKs-Food-a-18
13338: PPUSH
13339: CALL_OW 88
13343: GO 13346
13345: POP
// SetCargo ( i , mat_cans , 0 ) ;
13346: LD_VAR 0 1
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: LD_INT 0
13356: PPUSH
13357: CALL_OW 290
// break ;
13361: GO 13365
// end ;
13363: GO 13114
13365: POP
13366: POP
// until foodDelivered ;
13367: LD_VAR 0 2
13371: IFFALSE 13056
// givenFood := true ;
13373: LD_ADDR_EXP 33
13377: PUSH
13378: LD_INT 1
13380: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13381: LD_EXP 53
13385: PPUSH
13386: LD_STRING DJy-Food-13
13388: PPUSH
13389: CALL_OW 88
// hasVirus := true ;
13393: LD_ADDR_EXP 31
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// if not americanContact then
13401: LD_EXP 10
13405: NOT
13406: IFFALSE 13456
// begin Say ( Heike , DH-Food-14 ) ;
13408: LD_EXP 38
13412: PPUSH
13413: LD_STRING DH-Food-14
13415: PPUSH
13416: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13420: LD_EXP 53
13424: PPUSH
13425: LD_STRING DJy-Food-15
13427: PPUSH
13428: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13432: LD_EXP 53
13436: PPUSH
13437: LD_STRING DJy-Food-16
13439: PPUSH
13440: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13444: LD_EXP 53
13448: PPUSH
13449: LD_STRING DJy-Food-17
13451: PPUSH
13452: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13456: LD_STRING M3-out
13458: PPUSH
13459: CALL_OW 337
// DialogueOff ;
13463: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13467: LD_EXP 53
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: LD_INT 10
13477: PPUSH
13478: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13482: LD_EXP 53
13486: PPUSH
13487: LD_INT 95
13489: PPUSH
13490: LD_INT 17
13492: PPUSH
13493: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13497: LD_INT 35
13499: PPUSH
13500: CALL_OW 67
// if not HasTask ( Jerry ) then
13504: LD_EXP 53
13508: PPUSH
13509: CALL_OW 314
13513: NOT
13514: IFFALSE 13531
// ComMoveXY ( Jerry , 95 , 17 ) ;
13516: LD_EXP 53
13520: PPUSH
13521: LD_INT 95
13523: PPUSH
13524: LD_INT 17
13526: PPUSH
13527: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13531: LD_EXP 53
13535: PPUSH
13536: LD_INT 95
13538: PPUSH
13539: LD_INT 17
13541: PPUSH
13542: CALL_OW 307
13546: IFFALSE 13497
// SetCargo ( Jerry , mat_cans , 0 ) ;
13548: LD_EXP 53
13552: PPUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_INT 0
13558: PPUSH
13559: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13563: LD_ADDR_EXP 50
13567: PUSH
13568: LD_EXP 50
13572: PPUSH
13573: LD_EXP 53
13577: PPUSH
13578: CALL 64076 0 2
13582: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13583: LD_ADDR_VAR 0 1
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_INT 4
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 23
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 69
13616: PUSH
13617: FOR_IN
13618: IFFALSE 13634
// SetLives ( i , 1000 ) ;
13620: LD_VAR 0 1
13624: PPUSH
13625: LD_INT 1000
13627: PPUSH
13628: CALL_OW 234
13632: GO 13617
13634: POP
13635: POP
// end ;
13636: PPOPN 2
13638: END
// every 0 0$2 trigger hasExplosions marked gameStartEvent do var un , tmp ;
13639: LD_EXP 6
13643: IFFALSE 14074
13645: GO 13647
13647: DISABLE
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
// begin tmp := [ ] ;
13652: LD_ADDR_VAR 0 2
13656: PUSH
13657: EMPTY
13658: ST_TO_ADDR
// uc_side := 3 ;
13659: LD_ADDR_OWVAR 20
13663: PUSH
13664: LD_INT 3
13666: ST_TO_ADDR
// uc_nation := 3 ;
13667: LD_ADDR_OWVAR 21
13671: PUSH
13672: LD_INT 3
13674: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
13675: LD_INT 1
13677: PPUSH
13678: LD_INT 8
13680: PPUSH
13681: CALL_OW 381
// un := CreateHuman ;
13685: LD_ADDR_VAR 0 1
13689: PUSH
13690: CALL_OW 44
13694: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
13695: LD_VAR 0 1
13699: PPUSH
13700: LD_INT 173
13702: PPUSH
13703: LD_INT 104
13705: PPUSH
13706: LD_INT 0
13708: PPUSH
13709: CALL_OW 48
// tmp := Join ( tmp , un ) ;
13713: LD_ADDR_VAR 0 2
13717: PUSH
13718: LD_VAR 0 2
13722: PPUSH
13723: LD_VAR 0 1
13727: PPUSH
13728: CALL 64076 0 2
13732: ST_TO_ADDR
// un := CreateHuman ;
13733: LD_ADDR_VAR 0 1
13737: PUSH
13738: CALL_OW 44
13742: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
13743: LD_VAR 0 1
13747: PPUSH
13748: LD_INT 73
13750: PPUSH
13751: CALL_OW 52
// tmp := Join ( tmp , un ) ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_VAR 0 1
13769: PPUSH
13770: CALL 64076 0 2
13774: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13775: LD_INT 35
13777: PPUSH
13778: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
13782: LD_EXP 43
13786: PPUSH
13787: CALL_OW 255
13791: PUSH
13792: LD_INT 2
13794: EQUAL
13795: PUSH
13796: LD_EXP 43
13800: PPUSH
13801: LD_INT 73
13803: PPUSH
13804: CALL_OW 296
13808: PUSH
13809: LD_INT 8
13811: LESS
13812: AND
13813: PUSH
13814: LD_VAR 0 2
13818: PPUSH
13819: LD_INT 101
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PPUSH
13829: CALL_OW 72
13833: AND
13834: IFFALSE 13775
// InGameOn ;
13836: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
13840: LD_INT 73
13842: PPUSH
13843: CALL_OW 250
13847: PPUSH
13848: LD_INT 73
13850: PPUSH
13851: CALL_OW 251
13855: PPUSH
13856: LD_INT 2
13858: PPUSH
13859: LD_INT 9
13861: NEG
13862: PPUSH
13863: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
13867: LD_INT 73
13869: PPUSH
13870: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
13874: LD_EXP 43
13878: PPUSH
13879: LD_INT 73
13881: PPUSH
13882: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
13886: LD_EXP 43
13890: PPUSH
13891: LD_STRING DK-Plastic-1
13893: PPUSH
13894: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
13898: LD_EXP 43
13902: PPUSH
13903: LD_STRING DK-Plastic-2
13905: PPUSH
13906: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
13910: LD_EXP 43
13914: PPUSH
13915: LD_INT 73
13917: PPUSH
13918: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13922: LD_INT 35
13924: PPUSH
13925: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
13929: LD_EXP 43
13933: PPUSH
13934: LD_INT 73
13936: PPUSH
13937: CALL_OW 296
13941: PUSH
13942: LD_INT 6
13944: LESS
13945: IFFALSE 13922
// ComHold ( Kaia ) ;
13947: LD_EXP 43
13951: PPUSH
13952: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
13956: LD_VAR 0 2
13960: PUSH
13961: LD_INT 1
13963: ARRAY
13964: PPUSH
13965: LD_STRING DRum-Plastic-3
13967: PPUSH
13968: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
13972: LD_VAR 0 2
13976: PUSH
13977: LD_INT 2
13979: ARRAY
13980: PPUSH
13981: LD_STRING DRum2-Plastic-4
13983: PPUSH
13984: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
13988: LD_VAR 0 2
13992: PUSH
13993: LD_INT 1
13995: ARRAY
13996: PPUSH
13997: LD_STRING DRum-Plastic-5
13999: PPUSH
14000: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14004: LD_VAR 0 2
14008: PUSH
14009: LD_INT 2
14011: ARRAY
14012: PPUSH
14013: LD_STRING DRum2-Plastic-6
14015: PPUSH
14016: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14020: LD_EXP 43
14024: PPUSH
14025: LD_STRING DK-Plastic-7
14027: PPUSH
14028: CALL_OW 88
// InGameOff ;
14032: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14036: LD_INT 73
14038: PPUSH
14039: CALL_OW 250
14043: PPUSH
14044: LD_INT 73
14046: PPUSH
14047: CALL_OW 251
14051: PPUSH
14052: LD_INT 2
14054: PPUSH
14055: CALL_OW 331
// explosionsTakenByRussians := true ;
14059: LD_ADDR_EXP 21
14063: PUSH
14064: LD_INT 1
14066: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14067: LD_STRING ExplosivesInfo
14069: PPUSH
14070: CALL_OW 97
// end ;
14074: PPOPN 2
14076: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14077: LD_EXP 21
14081: PUSH
14082: LD_EXP 43
14086: PPUSH
14087: CALL_OW 255
14091: PUSH
14092: LD_INT 2
14094: EQUAL
14095: AND
14096: PUSH
14097: LD_EXP 43
14101: PPUSH
14102: LD_INT 61
14104: PPUSH
14105: CALL 18374 0 2
14109: AND
14110: PUSH
14111: LD_EXP 17
14115: NOT
14116: AND
14117: PUSH
14118: LD_EXP 30
14122: NOT
14123: AND
14124: IFFALSE 14280
14126: GO 14128
14128: DISABLE
// begin InGameOn ;
14129: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14133: LD_INT 61
14135: PPUSH
14136: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14140: LD_EXP 43
14144: PPUSH
14145: LD_INT 3
14147: PPUSH
14148: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14152: LD_EXP 43
14156: PPUSH
14157: LD_INT 61
14159: PPUSH
14160: CALL_OW 120
// wait ( 0 0$2 ) ;
14164: LD_INT 70
14166: PPUSH
14167: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14171: LD_EXP 43
14175: PPUSH
14176: LD_STRING DK-Plastic-8
14178: PPUSH
14179: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14183: LD_EXP 59
14187: PUSH
14188: LD_INT 1
14190: ARRAY
14191: PPUSH
14192: LD_STRING DRuMch-Plastic-9
14194: PPUSH
14195: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14199: LD_EXP 43
14203: PPUSH
14204: LD_STRING DK-Plastic-10
14206: PPUSH
14207: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14211: LD_EXP 59
14215: PUSH
14216: LD_INT 1
14218: ARRAY
14219: PPUSH
14220: LD_STRING DRuMch-Plastic-a-11
14222: PPUSH
14223: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14227: LD_EXP 43
14231: PPUSH
14232: LD_STRING DK-Plastic-a-12
14234: PPUSH
14235: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14239: LD_EXP 59
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PPUSH
14248: LD_STRING DRuMch-Plastic-a-13
14250: PPUSH
14251: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14255: LD_EXP 43
14259: PPUSH
14260: LD_INT 2
14262: PPUSH
14263: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14267: LD_EXP 43
14271: PPUSH
14272: CALL_OW 122
// InGameOff ;
14276: CALL_OW 9
// end ;
14280: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14281: LD_EXP 21
14285: PUSH
14286: LD_EXP 43
14290: PPUSH
14291: CALL_OW 255
14295: PUSH
14296: LD_INT 2
14298: EQUAL
14299: AND
14300: PUSH
14301: LD_EXP 43
14305: PPUSH
14306: LD_INT 196
14308: PPUSH
14309: CALL 18374 0 2
14313: AND
14314: PUSH
14315: LD_EXP 17
14319: NOT
14320: AND
14321: PUSH
14322: LD_EXP 30
14326: NOT
14327: AND
14328: IFFALSE 14660
14330: GO 14332
14332: DISABLE
// begin InGameOn ;
14333: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14337: LD_INT 196
14339: PPUSH
14340: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14344: LD_EXP 43
14348: PPUSH
14349: LD_INT 3
14351: PPUSH
14352: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14356: LD_EXP 43
14360: PPUSH
14361: LD_INT 196
14363: PPUSH
14364: CALL_OW 120
// wait ( 0 0$2 ) ;
14368: LD_INT 70
14370: PPUSH
14371: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14375: LD_EXP 43
14379: PPUSH
14380: LD_STRING DK-Plastic-8
14382: PPUSH
14383: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14387: LD_EXP 60
14391: PUSH
14392: LD_INT 1
14394: ARRAY
14395: PPUSH
14396: LD_STRING DRuMch-Plastic-9
14398: PPUSH
14399: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14403: LD_EXP 43
14407: PPUSH
14408: LD_STRING DK-Plastic-10
14410: PPUSH
14411: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14415: LD_EXP 60
14419: PUSH
14420: LD_INT 1
14422: ARRAY
14423: PPUSH
14424: LD_STRING DRuMch-Plastic-11
14426: PPUSH
14427: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14431: LD_EXP 43
14435: PPUSH
14436: LD_STRING DK-Plastic-12
14438: PPUSH
14439: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14443: LD_EXP 43
14447: PPUSH
14448: LD_STRING DK-Plastic-13
14450: PPUSH
14451: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14455: LD_EXP 60
14459: PUSH
14460: LD_INT 1
14462: ARRAY
14463: PPUSH
14464: LD_STRING DRuMch-Plastic-14
14466: PPUSH
14467: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14471: LD_EXP 61
14475: PPUSH
14476: LD_INT 167
14478: PPUSH
14479: LD_INT 34
14481: PPUSH
14482: LD_INT 3
14484: PPUSH
14485: LD_INT 0
14487: PPUSH
14488: CALL 66216 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14492: LD_EXP 61
14496: PPUSH
14497: LD_INT 196
14499: PPUSH
14500: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14504: LD_INT 35
14506: PPUSH
14507: CALL_OW 67
// if not HasTask ( Stiopa ) then
14511: LD_EXP 61
14515: PPUSH
14516: CALL_OW 314
14520: NOT
14521: IFFALSE 14535
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14523: LD_EXP 61
14527: PPUSH
14528: LD_INT 196
14530: PPUSH
14531: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14535: LD_EXP 61
14539: PPUSH
14540: CALL_OW 310
14544: IFFALSE 14504
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14546: LD_EXP 61
14550: PPUSH
14551: LD_STRING DSpn-Plastic-15
14553: PPUSH
14554: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14558: LD_EXP 62
14562: PPUSH
14563: LD_STRING DLr-Plastic-16
14565: PPUSH
14566: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14570: LD_EXP 43
14574: PPUSH
14575: LD_STRING DK-Plastic-17
14577: PPUSH
14578: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14582: LD_INT 10
14584: PPUSH
14585: CALL_OW 67
// SetSide ( Kaia , 2 ) ;
14589: LD_EXP 43
14593: PPUSH
14594: LD_INT 2
14596: PPUSH
14597: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14601: LD_EXP 43
14605: PPUSH
14606: CALL_OW 122
// InGameOff ;
14610: CALL_OW 9
// explosionsTakenByRussians := false ;
14614: LD_ADDR_EXP 21
14618: PUSH
14619: LD_INT 0
14621: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
14622: LD_INT 170
14624: PPUSH
14625: LD_INT 28
14627: PPUSH
14628: LD_INT 2
14630: PPUSH
14631: LD_INT 6
14633: NEG
14634: PPUSH
14635: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
14639: LD_INT 170
14641: PPUSH
14642: LD_INT 28
14644: PPUSH
14645: LD_INT 2
14647: PPUSH
14648: CALL_OW 331
// knowWhereExplosivesAre := true ;
14652: LD_ADDR_EXP 34
14656: PUSH
14657: LD_INT 1
14659: ST_TO_ADDR
// end ;
14660: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
14661: LD_EXP 34
14665: PUSH
14666: LD_EXP 43
14670: PPUSH
14671: CALL_OW 255
14675: PUSH
14676: LD_INT 2
14678: EQUAL
14679: AND
14680: PUSH
14681: LD_EXP 43
14685: PPUSH
14686: LD_INT 195
14688: PPUSH
14689: CALL 18374 0 2
14693: AND
14694: PUSH
14695: LD_EXP 17
14699: NOT
14700: AND
14701: PUSH
14702: LD_EXP 30
14706: NOT
14707: AND
14708: IFFALSE 14807
14710: GO 14712
14712: DISABLE
// begin InGameOn ;
14713: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
14717: LD_EXP 43
14721: PPUSH
14722: LD_INT 3
14724: PPUSH
14725: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
14729: LD_EXP 43
14733: PPUSH
14734: LD_INT 195
14736: PPUSH
14737: CALL_OW 120
// wait ( 0 0$1 ) ;
14741: LD_INT 35
14743: PPUSH
14744: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
14748: LD_EXP 43
14752: PPUSH
14753: LD_STRING DK-Plastic-18
14755: PPUSH
14756: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
14760: LD_STRING ExplosivesInfoUsage
14762: PPUSH
14763: CALL_OW 97
// SetSide ( Kaia , 2 ) ;
14767: LD_EXP 43
14771: PPUSH
14772: LD_INT 2
14774: PPUSH
14775: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14779: LD_EXP 43
14783: PPUSH
14784: CALL_OW 122
// InGameOff ;
14788: CALL_OW 9
// hasExplosionCollected := true ;
14792: LD_ADDR_EXP 23
14796: PUSH
14797: LD_INT 1
14799: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
14800: LD_STRING M1-explosive-out
14802: PPUSH
14803: CALL_OW 337
// end ;
14807: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
14808: LD_EXP 23
14812: PUSH
14813: LD_EXP 17
14817: NOT
14818: AND
14819: PUSH
14820: LD_EXP 30
14824: NOT
14825: AND
14826: IFFALSE 15001
14828: GO 14830
14830: DISABLE
14831: LD_INT 0
14833: PPUSH
14834: PPUSH
// begin for i in importantBuildingsList do
14835: LD_ADDR_VAR 0 1
14839: PUSH
14840: LD_EXP 35
14844: PUSH
14845: FOR_IN
14846: IFFALSE 14862
// MarkBuilding ( i , true ) ;
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: CALL 18748 0 2
14860: GO 14845
14862: POP
14863: POP
// repeat wait ( 0 0$1 ) ;
14864: LD_INT 35
14866: PPUSH
14867: CALL_OW 67
// for i in importantBuildingsList do
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_EXP 35
14880: PUSH
14881: FOR_IN
14882: IFFALSE 14992
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
14884: LD_EXP 38
14888: PUSH
14889: LD_EXP 14
14893: UNION
14894: PPUSH
14895: LD_INT 22
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 21
14907: PUSH
14908: LD_INT 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 91
14917: PUSH
14918: LD_VAR 0 1
14922: PUSH
14923: LD_INT 6
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: LIST
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: PPUSH
14936: CALL_OW 72
14940: IFFALSE 14990
// begin CenterNowOnUnits ( i ) ;
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 87
// PlaceExplosives ( i ) ;
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL 18645 0 1
// MarkBuilding ( i , false ) ;
14960: LD_VAR 0 1
14964: PPUSH
14965: LD_INT 0
14967: PPUSH
14968: CALL 18748 0 2
// importantBuildingsList := importantBuildingsList diff i ;
14972: LD_ADDR_EXP 35
14976: PUSH
14977: LD_EXP 35
14981: PUSH
14982: LD_VAR 0 1
14986: DIFF
14987: ST_TO_ADDR
// continue ;
14988: GO 14881
// end ; end ;
14990: GO 14881
14992: POP
14993: POP
// until not importantBuildingsList ;
14994: LD_EXP 35
14998: NOT
14999: IFFALSE 14864
// end ;
15001: PPOPN 2
15003: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15004: LD_EXP 14
15008: PPUSH
15009: LD_INT 22
15011: PUSH
15012: LD_INT 2
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 95
15021: PUSH
15022: LD_INT 23
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PPUSH
15033: CALL_OW 72
15037: PUSH
15038: LD_EXP 38
15042: PPUSH
15043: CALL_OW 302
15047: AND
15048: PUSH
15049: LD_EXP 30
15053: NOT
15054: AND
15055: IFFALSE 15083
15057: GO 15059
15059: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15060: LD_EXP 38
15064: PPUSH
15065: LD_STRING DH-End-1
15067: PPUSH
15068: CALL_OW 88
// if not activeExplosives then
15072: LD_EXP 36
15076: NOT
15077: IFFALSE 15083
// Explode ;
15079: CALL 21232 0 0
// end ;
15083: END
// function SayHEmpty ( ) ; begin
15084: LD_INT 0
15086: PPUSH
// case rand ( 1 , 3 ) of 1 :
15087: LD_INT 1
15089: PPUSH
15090: LD_INT 3
15092: PPUSH
15093: CALL_OW 12
15097: PUSH
15098: LD_INT 1
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15121
15106: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15107: LD_EXP 38
15111: PPUSH
15112: LD_STRING DH-Empty-1
15114: PPUSH
15115: CALL_OW 88
15119: GO 15168
15121: LD_INT 2
15123: DOUBLE
15124: EQUAL
15125: IFTRUE 15129
15127: GO 15144
15129: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15130: LD_EXP 38
15134: PPUSH
15135: LD_STRING DH-Empty-2
15137: PPUSH
15138: CALL_OW 88
15142: GO 15168
15144: LD_INT 3
15146: DOUBLE
15147: EQUAL
15148: IFTRUE 15152
15150: GO 15167
15152: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15153: LD_EXP 38
15157: PPUSH
15158: LD_STRING DH-Empty-3
15160: PPUSH
15161: CALL_OW 88
15165: GO 15168
15167: POP
// end ;
15168: LD_VAR 0 1
15172: RET
// function SayHVisited ( ) ; begin
15173: LD_INT 0
15175: PPUSH
// case rand ( 1 , 3 ) of 1 :
15176: LD_INT 1
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: CALL_OW 12
15186: PUSH
15187: LD_INT 1
15189: DOUBLE
15190: EQUAL
15191: IFTRUE 15195
15193: GO 15210
15195: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15196: LD_EXP 38
15200: PPUSH
15201: LD_STRING DH-Visited-1
15203: PPUSH
15204: CALL_OW 88
15208: GO 15257
15210: LD_INT 2
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15233
15218: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15219: LD_EXP 38
15223: PPUSH
15224: LD_STRING DH-Visited-2
15226: PPUSH
15227: CALL_OW 88
15231: GO 15257
15233: LD_INT 3
15235: DOUBLE
15236: EQUAL
15237: IFTRUE 15241
15239: GO 15256
15241: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15242: LD_EXP 38
15246: PPUSH
15247: LD_STRING DH-Visited-3
15249: PPUSH
15250: CALL_OW 88
15254: GO 15257
15256: POP
// end ;
15257: LD_VAR 0 1
15261: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15262: LD_EXP 17
15266: NOT
15267: PUSH
15268: LD_EXP 15
15272: AND
15273: PUSH
15274: LD_EXP 38
15278: PPUSH
15279: CALL_OW 255
15283: PUSH
15284: LD_INT 2
15286: EQUAL
15287: AND
15288: PUSH
15289: LD_EXP 38
15293: PPUSH
15294: CALL_OW 302
15298: AND
15299: PUSH
15300: LD_EXP 38
15304: PPUSH
15305: CALL_OW 316
15309: AND
15310: PUSH
15311: LD_EXP 30
15315: NOT
15316: AND
15317: IFFALSE 15383
15319: GO 15321
15321: DISABLE
15322: LD_INT 0
15324: PPUSH
// begin enable ;
15325: ENABLE
// for i in entranceAllowedList do
15326: LD_ADDR_VAR 0 1
15330: PUSH
15331: LD_EXP 15
15335: PUSH
15336: FOR_IN
15337: IFFALSE 15381
// if InEntrance ( Heike , i ) then
15339: LD_EXP 38
15343: PPUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL 18374 0 2
15353: IFFALSE 15379
// begin disable ( entranceEvent ) ;
15355: LD_INT 1
15357: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL 15386 0 1
// wait ( 0 0$3 ) ;
15367: LD_INT 105
15369: PPUSH
15370: CALL_OW 67
// enable ( entranceEvent ) ;
15374: LD_INT 1
15376: ENABLE_MARKED
// break ;
15377: GO 15381
// end ;
15379: GO 15336
15381: POP
15382: POP
// end ;
15383: PPOPN 1
15385: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
15386: LD_INT 0
15388: PPUSH
15389: PPUSH
// if not building then
15390: LD_VAR 0 1
15394: NOT
15395: IFFALSE 15399
// exit ;
15397: GO 17871
// if building in entranceVisitedList then
15399: LD_VAR 0 1
15403: PUSH
15404: LD_EXP 16
15408: IN
15409: IFFALSE 15417
// begin SayHVisited ( ) ;
15411: CALL 15173 0 0
// exit ;
15415: GO 17871
// end ; case Query ( EnterBuilding ) of 1 :
15417: LD_STRING EnterBuilding
15419: PPUSH
15420: CALL_OW 97
15424: PUSH
15425: LD_INT 1
15427: DOUBLE
15428: EQUAL
15429: IFTRUE 15433
15431: GO 15436
15433: POP
// ; 2 :
15434: GO 15450
15436: LD_INT 2
15438: DOUBLE
15439: EQUAL
15440: IFTRUE 15444
15442: GO 15449
15444: POP
// exit ; end ;
15445: GO 17871
15447: GO 15450
15449: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15450: LD_ADDR_EXP 16
15454: PUSH
15455: LD_EXP 16
15459: PPUSH
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL 64076 0 2
15469: ST_TO_ADDR
// InGameOn ;
15470: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15474: LD_EXP 38
15478: PPUSH
15479: LD_INT 5
15481: PPUSH
15482: CALL_OW 235
// SetSide ( building , 5 ) ;
15486: LD_VAR 0 1
15490: PPUSH
15491: LD_INT 5
15493: PPUSH
15494: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15498: LD_EXP 38
15502: PPUSH
15503: LD_VAR 0 1
15507: PPUSH
15508: CALL_OW 120
// wait ( 0 0$3 ) ;
15512: LD_INT 105
15514: PPUSH
15515: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: LD_INT 165
15526: PUSH
15527: LD_INT 106
15529: PUSH
15530: LD_INT 135
15532: PUSH
15533: LD_INT 162
15535: PUSH
15536: LD_INT 61
15538: PUSH
15539: LD_INT 109
15541: PUSH
15542: LD_INT 169
15544: PUSH
15545: LD_INT 13
15547: PUSH
15548: LD_INT 147
15550: PUSH
15551: LD_INT 137
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: ST_TO_ADDR
// if not building in tmp then
15566: LD_VAR 0 1
15570: PUSH
15571: LD_VAR 0 3
15575: IN
15576: NOT
15577: IFFALSE 15585
// SayHEmpty ( ) else
15579: CALL 15084 0 0
15583: GO 17834
// case building of laundry :
15585: LD_VAR 0 1
15589: PUSH
15590: LD_INT 165
15592: DOUBLE
15593: EQUAL
15594: IFTRUE 15598
15596: GO 15702
15598: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15599: LD_EXP 26
15603: PUSH
15604: LD_EXP 27
15608: NOT
15609: AND
15610: PUSH
15611: LD_EXP 28
15615: NOT
15616: AND
15617: IFFALSE 15672
// begin case Query ( HeikeInLaundry ) of 1 :
15619: LD_STRING HeikeInLaundry
15621: PPUSH
15622: CALL_OW 97
15626: PUSH
15627: LD_INT 1
15629: DOUBLE
15630: EQUAL
15631: IFTRUE 15635
15633: GO 15642
15635: POP
// SpawnHeikeAsRussian ; 2 :
15636: CALL 1717 0 0
15640: GO 15670
15642: LD_INT 2
15644: DOUBLE
15645: EQUAL
15646: IFTRUE 15650
15648: GO 15669
15650: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
15651: LD_ADDR_EXP 16
15655: PUSH
15656: LD_EXP 16
15660: PUSH
15661: LD_VAR 0 1
15665: DIFF
15666: ST_TO_ADDR
15667: GO 15670
15669: POP
// end else
15670: GO 15700
// begin entranceVisitedList := entranceVisitedList diff building ;
15672: LD_ADDR_EXP 16
15676: PUSH
15677: LD_EXP 16
15681: PUSH
15682: LD_VAR 0 1
15686: DIFF
15687: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
15688: LD_EXP 38
15692: PPUSH
15693: LD_STRING DH-Locked
15695: PPUSH
15696: CALL_OW 88
// end ; end ; dougBar :
15700: GO 17834
15702: LD_INT 106
15704: DOUBLE
15705: EQUAL
15706: IFTRUE 15710
15708: GO 16062
15710: POP
// begin if contactWithAmerican and americanContact then
15711: LD_EXP 25
15715: PUSH
15716: LD_EXP 10
15720: AND
15721: IFFALSE 15785
// begin Say ( Heike , DH-Escort-a-1 ) ;
15723: LD_EXP 38
15727: PPUSH
15728: LD_STRING DH-Escort-a-1
15730: PPUSH
15731: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
15735: LD_EXP 52
15739: PPUSH
15740: LD_STRING DCa-Escort-a-2
15742: PPUSH
15743: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
15747: LD_EXP 52
15751: PPUSH
15752: LD_STRING DCa-Escort-a-3
15754: PPUSH
15755: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
15759: LD_EXP 38
15763: PPUSH
15764: LD_STRING DH-Escort-a-4
15766: PPUSH
15767: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
15771: LD_EXP 38
15775: PPUSH
15776: LD_STRING DH-Escort-a-5
15778: PPUSH
15779: CALL_OW 88
// end else
15783: GO 16019
// if contactWithAmerican then
15785: LD_EXP 25
15789: IFFALSE 15829
// begin Say ( Heike , DH-Escort-b-1 ) ;
15791: LD_EXP 38
15795: PPUSH
15796: LD_STRING DH-Escort-b-1
15798: PPUSH
15799: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
15803: LD_EXP 52
15807: PPUSH
15808: LD_STRING DCa-Escort-b-2
15810: PPUSH
15811: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
15815: LD_EXP 52
15819: PPUSH
15820: LD_STRING DCa-Escort-b-3
15822: PPUSH
15823: CALL_OW 88
// end else
15827: GO 16019
// begin Say ( Doug , DCa-Deal-a-1 ) ;
15829: LD_EXP 52
15833: PPUSH
15834: LD_STRING DCa-Deal-a-1
15836: PPUSH
15837: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
15841: LD_EXP 52
15845: PPUSH
15846: LD_STRING DCa-Deal-a-2
15848: PPUSH
15849: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
15853: LD_EXP 38
15857: PPUSH
15858: LD_STRING DH-Deal-a-3
15860: PPUSH
15861: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
15865: LD_EXP 52
15869: PPUSH
15870: LD_STRING DCa-Deal-a-4
15872: PPUSH
15873: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
15877: LD_EXP 38
15881: PPUSH
15882: LD_STRING DH-Deal-a-5
15884: PPUSH
15885: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
15889: LD_EXP 52
15893: PPUSH
15894: LD_STRING DCa-Deal-a-6
15896: PPUSH
15897: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
15901: LD_EXP 52
15905: PPUSH
15906: LD_STRING DCa-Deal-a-7
15908: PPUSH
15909: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
15913: LD_EXP 52
15917: PPUSH
15918: LD_STRING DCa-Deal-a-8
15920: PPUSH
15921: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
15925: LD_EXP 52
15929: PPUSH
15930: LD_STRING DCa-Deal-a-9
15932: PPUSH
15933: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
15937: LD_EXP 52
15941: PPUSH
15942: LD_STRING DCa-Deal-a-10
15944: PPUSH
15945: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
15949: LD_EXP 52
15953: PPUSH
15954: LD_STRING DCa-Deal-a-11
15956: PPUSH
15957: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15961: LD_INT 10
15963: PPUSH
15964: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
15968: LD_EXP 52
15972: PPUSH
15973: LD_STRING DCa-Deal-a-12
15975: PPUSH
15976: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
15980: LD_EXP 38
15984: PPUSH
15985: LD_STRING DH-Deal-a-13
15987: PPUSH
15988: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
15992: LD_EXP 38
15996: PPUSH
15997: LD_STRING DH-Deal-a-14
15999: PPUSH
16000: CALL_OW 88
// contactWithAmerican := true ;
16004: LD_ADDR_EXP 25
16008: PUSH
16009: LD_INT 1
16011: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16012: LD_STRING M1-american-out
16014: PPUSH
16015: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16019: LD_EXP 52
16023: PPUSH
16024: LD_INT 2
16026: PPUSH
16027: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16031: LD_ADDR_EXP 14
16035: PUSH
16036: LD_EXP 14
16040: PPUSH
16041: LD_EXP 52
16045: PPUSH
16046: CALL 64076 0 2
16050: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16051: LD_EXP 52
16055: PPUSH
16056: CALL_OW 122
// end ; usLab :
16060: GO 17834
16062: LD_INT 135
16064: DOUBLE
16065: EQUAL
16066: IFTRUE 16070
16068: GO 16386
16070: POP
// begin if hasSniperRifle then
16071: LD_EXP 11
16075: IFFALSE 16384
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16077: LD_EXP 43
16081: PPUSH
16082: CALL_OW 302
16086: PUSH
16087: LD_EXP 43
16091: PUSH
16092: LD_EXP 14
16096: IN
16097: AND
16098: PUSH
16099: LD_EXP 43
16103: PPUSH
16104: CALL_OW 255
16108: PUSH
16109: LD_INT 2
16111: EQUAL
16112: AND
16113: IFFALSE 16358
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16115: LD_EXP 38
16119: PPUSH
16120: LD_EXP 43
16124: PPUSH
16125: CALL_OW 296
16129: PUSH
16130: LD_INT 10
16132: GREATER
16133: IFFALSE 16158
// begin Query ( KaiaDistance ) ;
16135: LD_STRING KaiaDistance
16137: PPUSH
16138: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16142: LD_ADDR_EXP 16
16146: PUSH
16147: LD_EXP 16
16151: PUSH
16152: LD_INT 135
16154: DIFF
16155: ST_TO_ADDR
// end else
16156: GO 16356
// begin SetSide ( Kaia , 5 ) ;
16158: LD_EXP 43
16162: PPUSH
16163: LD_INT 5
16165: PPUSH
16166: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16170: LD_EXP 43
16174: PPUSH
16175: LD_INT 135
16177: PPUSH
16178: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16182: LD_INT 35
16184: PPUSH
16185: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16189: LD_EXP 43
16193: PPUSH
16194: CALL_OW 310
16198: IFFALSE 16182
// Say ( Kaia , DK-Sniper-1 ) ;
16200: LD_EXP 43
16204: PPUSH
16205: LD_STRING DK-Sniper-1
16207: PPUSH
16208: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16212: LD_EXP 43
16216: PPUSH
16217: CALL_OW 257
16221: PUSH
16222: LD_INT 34
16224: EQUAL
16225: PUSH
16226: LD_EXP 40
16230: PUSH
16231: LD_EXP 14
16235: IN
16236: AND
16237: PUSH
16238: LD_EXP 40
16242: PPUSH
16243: CALL_OW 302
16247: AND
16248: IFFALSE 16276
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16250: LD_EXP 43
16254: PPUSH
16255: LD_STRING DK-Sniper-a-2
16257: PPUSH
16258: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
16262: LD_EXP 40
16266: PPUSH
16267: LD_INT 32
16269: PPUSH
16270: CALL_OW 336
// end else
16274: GO 16335
// begin Say ( Kaia , DK-Sniper-2 ) ;
16276: LD_EXP 43
16280: PPUSH
16281: LD_STRING DK-Sniper-2
16283: PPUSH
16284: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16288: LD_EXP 43
16292: PPUSH
16293: LD_INT 32
16295: PPUSH
16296: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16300: LD_EXP 45
16304: PPUSH
16305: CALL_OW 302
16309: PUSH
16310: LD_EXP 45
16314: PUSH
16315: LD_EXP 14
16319: IN
16320: AND
16321: IFFALSE 16335
// Say ( Markov , DMar-Sniper-3 ) ;
16323: LD_EXP 45
16327: PPUSH
16328: LD_STRING DMar-Sniper-3
16330: PPUSH
16331: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16335: LD_EXP 43
16339: PPUSH
16340: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16344: LD_EXP 43
16348: PPUSH
16349: LD_INT 2
16351: PPUSH
16352: CALL_OW 235
// end ; end else
16356: GO 16384
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16358: LD_ADDR_EXP 16
16362: PUSH
16363: LD_EXP 16
16367: PUSH
16368: LD_INT 135
16370: DIFF
16371: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16372: LD_EXP 38
16376: PPUSH
16377: LD_STRING DH-Locked
16379: PPUSH
16380: CALL_OW 88
// end ; end ; end ; drugsLab :
16384: GO 17834
16386: LD_INT 162
16388: DOUBLE
16389: EQUAL
16390: IFTRUE 16394
16392: GO 16527
16394: POP
// begin if hasStimDrugs then
16395: LD_EXP 9
16399: IFFALSE 16513
// begin wait ( 0 0$1 ) ;
16401: LD_INT 35
16403: PPUSH
16404: CALL_OW 67
// if not hasStimDrugsCollected then
16408: LD_EXP 24
16412: NOT
16413: IFFALSE 16455
// begin Say ( Heike , DH-Lab-1 ) ;
16415: LD_EXP 38
16419: PPUSH
16420: LD_STRING DH-Lab-1
16422: PPUSH
16423: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16427: LD_INT 5
16429: PPUSH
16430: LD_INT 2
16432: PPUSH
16433: LD_INT 2
16435: PPUSH
16436: CALL_OW 322
// hasStimDrugsCollected := true ;
16440: LD_ADDR_EXP 24
16444: PUSH
16445: LD_INT 1
16447: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16448: LD_STRING M1-drugs-out
16450: PPUSH
16451: CALL_OW 604
// end ; if not hasExplosionCollected then
16455: LD_EXP 23
16459: NOT
16460: IFFALSE 16478
// entranceVisitedList := entranceVisitedList diff drugsLab else
16462: LD_ADDR_EXP 16
16466: PUSH
16467: LD_EXP 16
16471: PUSH
16472: LD_INT 162
16474: DIFF
16475: ST_TO_ADDR
16476: GO 16511
// begin wait ( 0 0$3 ) ;
16478: LD_INT 105
16480: PPUSH
16481: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16485: LD_EXP 38
16489: PPUSH
16490: LD_STRING DH-Lab-2
16492: PPUSH
16493: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16497: LD_STRING M1-drugsLab-out
16499: PPUSH
16500: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16504: LD_INT 162
16506: PPUSH
16507: CALL 18645 0 1
// end ; end else
16511: GO 16525
// Say ( Heike , DH-Locked ) ;
16513: LD_EXP 38
16517: PPUSH
16518: LD_STRING DH-Locked
16520: PPUSH
16521: CALL_OW 88
// end ; ruFac :
16525: GO 17834
16527: LD_INT 61
16529: DOUBLE
16530: EQUAL
16531: IFTRUE 16535
16533: GO 16645
16535: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16536: LD_EXP 45
16540: PPUSH
16541: CALL_OW 302
16545: PUSH
16546: LD_EXP 45
16550: PUSH
16551: LD_EXP 14
16555: IN
16556: NOT
16557: AND
16558: IFFALSE 16639
// begin Say ( Heike , DH-Krastyo-1 ) ;
16560: LD_EXP 38
16564: PPUSH
16565: LD_STRING DH-Krastyo-1
16567: PPUSH
16568: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16572: LD_EXP 45
16576: PPUSH
16577: LD_STRING DMar-Krastyo-2
16579: PPUSH
16580: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16584: LD_EXP 45
16588: PPUSH
16589: LD_STRING DMar-Krastyo-3
16591: PPUSH
16592: CALL_OW 88
// SetSide ( Markov , 2 ) ;
16596: LD_EXP 45
16600: PPUSH
16601: LD_INT 2
16603: PPUSH
16604: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
16608: LD_ADDR_EXP 14
16612: PUSH
16613: LD_EXP 14
16617: PPUSH
16618: LD_EXP 45
16622: PPUSH
16623: CALL 64076 0 2
16627: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
16628: LD_EXP 45
16632: PPUSH
16633: CALL_OW 122
// end else
16637: GO 16643
// SayHEmpty ( ) ;
16639: CALL 15084 0 0
// end ; ruBarKam :
16643: GO 17834
16645: LD_INT 109
16647: DOUBLE
16648: EQUAL
16649: IFTRUE 16653
16651: GO 16800
16653: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
16654: LD_EXP 42
16658: PPUSH
16659: CALL_OW 302
16663: PUSH
16664: LD_EXP 42
16668: PUSH
16669: LD_EXP 14
16673: IN
16674: NOT
16675: AND
16676: IFFALSE 16794
// begin Say ( Heike , DH-Kamil-1 ) ;
16678: LD_EXP 38
16682: PPUSH
16683: LD_STRING DH-Kamil-1
16685: PPUSH
16686: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
16690: LD_EXP 42
16694: PPUSH
16695: LD_STRING DKam-Kamil-2
16697: PPUSH
16698: CALL_OW 88
// if IsOk ( Sophia ) then
16702: LD_EXP 44
16706: PPUSH
16707: CALL_OW 302
16711: IFFALSE 16751
// if Sophia in heikeSquad then
16713: LD_EXP 44
16717: PUSH
16718: LD_EXP 14
16722: IN
16723: IFFALSE 16739
// Say ( Kamil , DKam-Kamil-a-3 ) else
16725: LD_EXP 42
16729: PPUSH
16730: LD_STRING DKam-Kamil-a-3
16732: PPUSH
16733: CALL_OW 88
16737: GO 16751
// Say ( Kamil , DKam-Kamil-3 ) ;
16739: LD_EXP 42
16743: PPUSH
16744: LD_STRING DKam-Kamil-3
16746: PPUSH
16747: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
16751: LD_EXP 42
16755: PPUSH
16756: LD_INT 2
16758: PPUSH
16759: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
16763: LD_ADDR_EXP 14
16767: PUSH
16768: LD_EXP 14
16772: PPUSH
16773: LD_EXP 42
16777: PPUSH
16778: CALL 64076 0 2
16782: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
16783: LD_EXP 42
16787: PPUSH
16788: CALL_OW 122
// end else
16792: GO 16798
// SayHEmpty ( ) ;
16794: CALL 15084 0 0
// end ; ruOutpost1 :
16798: GO 17834
16800: LD_INT 169
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 17045
16808: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
16809: LD_EXP 47
16813: PPUSH
16814: CALL_OW 302
16818: PUSH
16819: LD_EXP 47
16823: PUSH
16824: LD_EXP 14
16828: IN
16829: NOT
16830: AND
16831: IFFALSE 17039
// begin if hasMethanol then
16833: LD_EXP 13
16837: IFFALSE 16968
// begin Say ( Heike , DH-Kurt-1 ) ;
16839: LD_EXP 38
16843: PPUSH
16844: LD_STRING DH-Kurt-1
16846: PPUSH
16847: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
16851: LD_EXP 47
16855: PPUSH
16856: LD_STRING DKs-Kurt-2
16858: PPUSH
16859: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
16863: LD_EXP 39
16867: PPUSH
16868: LD_INT 169
16870: PPUSH
16871: CALL_OW 296
16875: PUSH
16876: LD_INT 10
16878: LESS
16879: PUSH
16880: LD_EXP 39
16884: PUSH
16885: LD_EXP 14
16889: IN
16890: AND
16891: IFFALSE 16966
// begin ComMoveXY ( Givi , 100 , 37 ) ;
16893: LD_EXP 39
16897: PPUSH
16898: LD_INT 100
16900: PPUSH
16901: LD_INT 37
16903: PPUSH
16904: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
16908: LD_EXP 39
16912: PPUSH
16913: LD_INT 169
16915: PPUSH
16916: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
16920: LD_INT 35
16922: PPUSH
16923: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
16927: LD_EXP 39
16931: PPUSH
16932: LD_INT 169
16934: PPUSH
16935: CALL_OW 296
16939: PUSH
16940: LD_INT 7
16942: LESS
16943: IFFALSE 16920
// Say ( Givi , DG-Kurt-3 ) ;
16945: LD_EXP 39
16949: PPUSH
16950: LD_STRING DG-Kurt-3
16952: PPUSH
16953: CALL_OW 88
// ComStop ( Givi ) ;
16957: LD_EXP 39
16961: PPUSH
16962: CALL_OW 141
// end ; end else
16966: GO 16996
// begin Say ( Heike , DH-Kurt-1 ) ;
16968: LD_EXP 38
16972: PPUSH
16973: LD_STRING DH-Kurt-1
16975: PPUSH
16976: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
16980: LD_EXP 47
16984: PPUSH
16985: LD_STRING DKs-Kurt-2
16987: PPUSH
16988: CALL_OW 88
// SpawnAdditionalRuGuards ;
16992: CALL 3356 0 0
// end ; SetSide ( Kurt , 2 ) ;
16996: LD_EXP 47
17000: PPUSH
17001: LD_INT 2
17003: PPUSH
17004: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17008: LD_ADDR_EXP 14
17012: PUSH
17013: LD_EXP 14
17017: PPUSH
17018: LD_EXP 47
17022: PPUSH
17023: CALL 64076 0 2
17027: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17028: LD_EXP 47
17032: PPUSH
17033: CALL_OW 122
// end else
17037: GO 17043
// SayHEmpty ( ) ;
17039: CALL 15084 0 0
// end ; ruOutpostBar :
17043: GO 17834
17045: LD_INT 13
17047: DOUBLE
17048: EQUAL
17049: IFTRUE 17053
17051: GO 17099
17053: POP
// begin if not hasGuardPatrolPlan then
17054: LD_EXP 18
17058: NOT
17059: IFFALSE 17093
// begin Say ( Heike , DH-PatrolPlan ) ;
17061: LD_EXP 38
17065: PPUSH
17066: LD_STRING DH-PatrolPlan
17068: PPUSH
17069: CALL_OW 88
// hasGuardPatrolPlan := true ;
17073: LD_ADDR_EXP 18
17077: PUSH
17078: LD_INT 1
17080: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17081: LD_INT 6
17083: PPUSH
17084: LD_INT 2
17086: PPUSH
17087: CALL_OW 343
// end else
17091: GO 17097
// SayHEmpty ( ) ;
17093: CALL 15084 0 0
// end ; ruKaiaBar :
17097: GO 17834
17099: LD_INT 147
17101: DOUBLE
17102: EQUAL
17103: IFTRUE 17107
17105: GO 17254
17107: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17108: LD_EXP 43
17112: PPUSH
17113: CALL_OW 302
17117: PUSH
17118: LD_EXP 43
17122: PUSH
17123: LD_EXP 14
17127: IN
17128: NOT
17129: AND
17130: IFFALSE 17252
// begin Say ( Heike , DH-Kaia-1 ) ;
17132: LD_EXP 38
17136: PPUSH
17137: LD_STRING DH-Kaia-1
17139: PPUSH
17140: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17144: LD_EXP 43
17148: PPUSH
17149: LD_STRING DK-Kaia-2
17151: PPUSH
17152: CALL_OW 88
// if hasSniperRifle then
17156: LD_EXP 11
17160: IFFALSE 17211
// begin if IsOk ( Markov ) then
17162: LD_EXP 45
17166: PPUSH
17167: CALL_OW 302
17171: IFFALSE 17187
// Say ( Kaia , DK-Kaia-3 ) else
17173: LD_EXP 43
17177: PPUSH
17178: LD_STRING DK-Kaia-3
17180: PPUSH
17181: CALL_OW 88
17185: GO 17199
// Say ( Kaia , DK-Kaia-a-3 ) ;
17187: LD_EXP 43
17191: PPUSH
17192: LD_STRING DK-Kaia-a-3
17194: PPUSH
17195: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17199: LD_EXP 38
17203: PPUSH
17204: LD_STRING DH-Kaia-4
17206: PPUSH
17207: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17211: LD_EXP 43
17215: PPUSH
17216: LD_INT 2
17218: PPUSH
17219: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17223: LD_ADDR_EXP 14
17227: PUSH
17228: LD_EXP 14
17232: PPUSH
17233: LD_EXP 43
17237: PPUSH
17238: CALL 64076 0 2
17242: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17243: LD_EXP 43
17247: PPUSH
17248: CALL_OW 122
// end ; end ; ruWeaponsBar :
17252: GO 17834
17254: LD_INT 137
17256: DOUBLE
17257: EQUAL
17258: IFTRUE 17262
17260: GO 17833
17262: POP
// begin if hasWeapons then
17263: LD_EXP 19
17267: IFFALSE 17819
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17269: LD_ADDR_EXP 16
17273: PUSH
17274: LD_EXP 16
17278: PUSH
17279: LD_INT 137
17281: DIFF
17282: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17283: LD_ADDR_VAR 0 3
17287: PUSH
17288: LD_EXP 14
17292: PPUSH
17293: LD_INT 91
17295: PUSH
17296: LD_EXP 38
17300: PUSH
17301: LD_INT 8
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: LIST
17308: PPUSH
17309: CALL_OW 72
17313: ST_TO_ADDR
// if not heikeSquad or not tmp then
17314: LD_EXP 14
17318: NOT
17319: PUSH
17320: LD_VAR 0 3
17324: NOT
17325: OR
17326: IFFALSE 17342
// Say ( Heike , DH-Weapons-Alone ) else
17328: LD_EXP 38
17332: PPUSH
17333: LD_STRING DH-Weapons-Alone
17335: PPUSH
17336: CALL_OW 88
17340: GO 17817
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
17342: LD_ADDR_EXP 16
17346: PUSH
17347: LD_EXP 16
17351: PPUSH
17352: LD_INT 137
17354: PPUSH
17355: CALL 64076 0 2
17359: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
17360: LD_EXP 38
17364: PPUSH
17365: LD_STRING DH-Weapons-1
17367: PPUSH
17368: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17372: LD_EXP 38
17376: PPUSH
17377: LD_STRING DH-Weapons-2
17379: PPUSH
17380: CALL_OW 88
// if hasRevolver and Kaia in tmp then
17384: LD_EXP 8
17388: PUSH
17389: LD_EXP 43
17393: PUSH
17394: LD_VAR 0 3
17398: IN
17399: AND
17400: IFFALSE 17489
// begin SetSide ( Kaia , 5 ) ;
17402: LD_EXP 43
17406: PPUSH
17407: LD_INT 5
17409: PPUSH
17410: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17414: LD_EXP 43
17418: PPUSH
17419: LD_INT 137
17421: PPUSH
17422: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17426: LD_INT 35
17428: PPUSH
17429: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17433: LD_EXP 43
17437: PPUSH
17438: CALL_OW 310
17442: IFFALSE 17426
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
17444: LD_EXP 38
17448: PPUSH
17449: LD_STRING DH-Kaia-Revolver-2
17451: PPUSH
17452: CALL_OW 88
// SetClassKaiaRevolver ;
17456: CALL 1686 0 0
// hasRevolver := false ;
17460: LD_ADDR_EXP 8
17464: PUSH
17465: LD_INT 0
17467: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
17468: LD_EXP 43
17472: PPUSH
17473: LD_INT 2
17475: PPUSH
17476: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
17480: LD_EXP 43
17484: PPUSH
17485: CALL_OW 122
// end ; if Givi in tmp then
17489: LD_EXP 39
17493: PUSH
17494: LD_VAR 0 3
17498: IN
17499: IFFALSE 17640
// begin SetSide ( Givi , 5 ) ;
17501: LD_EXP 39
17505: PPUSH
17506: LD_INT 5
17508: PPUSH
17509: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
17513: LD_EXP 39
17517: PPUSH
17518: LD_INT 137
17520: PPUSH
17521: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17525: LD_INT 35
17527: PPUSH
17528: CALL_OW 67
// until IsInUnit ( Givi ) ;
17532: LD_EXP 39
17536: PPUSH
17537: CALL_OW 310
17541: IFFALSE 17525
// Say ( Givi , DG-Weapons-3 ) ;
17543: LD_EXP 39
17547: PPUSH
17548: LD_STRING DG-Weapons-3
17550: PPUSH
17551: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
17555: LD_EXP 38
17559: PPUSH
17560: LD_STRING DH-Weapons-4
17562: PPUSH
17563: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
17567: LD_EXP 39
17571: PPUSH
17572: LD_STRING DG-Weapons-5
17574: PPUSH
17575: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
17579: LD_EXP 39
17583: PPUSH
17584: LD_INT 11
17586: PPUSH
17587: CALL_OW 336
// ComExitBuilding ( Givi ) ;
17591: LD_EXP 39
17595: PPUSH
17596: CALL_OW 122
// SetSide ( Givi , 2 ) ;
17600: LD_EXP 39
17604: PPUSH
17605: LD_INT 2
17607: PPUSH
17608: CALL_OW 235
// if hasRevolver then
17612: LD_EXP 8
17616: IFFALSE 17638
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17618: LD_EXP 38
17622: PPUSH
17623: LD_STRING DH-Kaia-Revolver-1
17625: PPUSH
17626: CALL_OW 88
// heikeHasRevolver := true ;
17630: LD_ADDR_EXP 20
17634: PUSH
17635: LD_INT 1
17637: ST_TO_ADDR
// end ; end else
17638: GO 17817
// if Kamil in tmp then
17640: LD_EXP 42
17644: PUSH
17645: LD_VAR 0 3
17649: IN
17650: IFFALSE 17779
// begin SetSide ( Kamil , 5 ) ;
17652: LD_EXP 42
17656: PPUSH
17657: LD_INT 5
17659: PPUSH
17660: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
17664: LD_EXP 42
17668: PPUSH
17669: LD_INT 137
17671: PPUSH
17672: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17676: LD_INT 35
17678: PPUSH
17679: CALL_OW 67
// until IsInUnit ( Kamil ) ;
17683: LD_EXP 42
17687: PPUSH
17688: CALL_OW 310
17692: IFFALSE 17676
// Say ( Kamil , DKam-Weapons-a-3 ) ;
17694: LD_EXP 42
17698: PPUSH
17699: LD_STRING DKam-Weapons-a-3
17701: PPUSH
17702: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
17706: LD_EXP 38
17710: PPUSH
17711: LD_STRING DH-Weapons-a-4
17713: PPUSH
17714: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
17718: LD_EXP 42
17722: PPUSH
17723: LD_INT 11
17725: PPUSH
17726: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
17730: LD_EXP 42
17734: PPUSH
17735: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
17739: LD_EXP 42
17743: PPUSH
17744: LD_INT 2
17746: PPUSH
17747: CALL_OW 235
// if hasRevolver then
17751: LD_EXP 8
17755: IFFALSE 17777
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17757: LD_EXP 38
17761: PPUSH
17762: LD_STRING DH-Kaia-Revolver-1
17764: PPUSH
17765: CALL_OW 88
// heikeHasRevolver := true ;
17769: LD_ADDR_EXP 20
17773: PUSH
17774: LD_INT 1
17776: ST_TO_ADDR
// end ; end else
17777: GO 17817
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
17779: LD_EXP 38
17783: PPUSH
17784: LD_STRING DH-Weapons-Alone-2
17786: PPUSH
17787: CALL_OW 88
// if hasRevolver then
17791: LD_EXP 8
17795: IFFALSE 17817
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
17797: LD_EXP 38
17801: PPUSH
17802: LD_STRING DH-Kaia-Revolver-1a
17804: PPUSH
17805: CALL_OW 88
// heikeHasRevolver := true ;
17809: LD_ADDR_EXP 20
17813: PUSH
17814: LD_INT 1
17816: ST_TO_ADDR
// end ; end ; end ; end else
17817: GO 17831
// Say ( Heike , DH-Locked ) ;
17819: LD_EXP 38
17823: PPUSH
17824: LD_STRING DH-Locked
17826: PPUSH
17827: CALL_OW 88
// end ; end ;
17831: GO 17834
17833: POP
// ComExitBuilding ( Heike ) ;
17834: LD_EXP 38
17838: PPUSH
17839: CALL_OW 122
// SetSide ( Heike , 2 ) ;
17843: LD_EXP 38
17847: PPUSH
17848: LD_INT 2
17850: PPUSH
17851: CALL_OW 235
// SetSide ( building , 3 ) ;
17855: LD_VAR 0 1
17859: PPUSH
17860: LD_INT 3
17862: PPUSH
17863: CALL_OW 235
// InGameOff ;
17867: CALL_OW 9
// end ;
17871: LD_VAR 0 2
17875: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
17876: LD_EXP 30
17880: NOT
17881: PUSH
17882: LD_EXP 17
17886: NOT
17887: AND
17888: PUSH
17889: LD_INT 22
17891: PUSH
17892: LD_INT 5
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 21
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PPUSH
17913: CALL_OW 69
17917: PUSH
17918: LD_INT 0
17920: EQUAL
17921: AND
17922: PUSH
17923: LD_INT 22
17925: PUSH
17926: LD_INT 4
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 21
17935: PUSH
17936: LD_INT 1
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PPUSH
17947: CALL_OW 69
17951: PUSH
17952: LD_INT 0
17954: EQUAL
17955: PUSH
17956: LD_EXP 25
17960: AND
17961: PUSH
17962: LD_EXP 25
17966: NOT
17967: OR
17968: AND
17969: IFFALSE 18001
17971: GO 17973
17973: DISABLE
// begin DialogueOn ;
17974: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
17978: LD_EXP 38
17982: PPUSH
17983: LD_STRING DH-Alarm-2
17985: PPUSH
17986: CALL_OW 88
// DialogueOff ;
17990: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
17994: LD_STRING M1-people-out
17996: PPUSH
17997: CALL_OW 337
// end ; end_of_file
18001: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
18002: LD_VAR 0 1
18006: PUSH
18007: LD_INT 3
18009: DOUBLE
18010: EQUAL
18011: IFTRUE 18015
18013: GO 18045
18015: POP
// begin repeat wait ( 0 0$1 ) ;
18016: LD_INT 35
18018: PPUSH
18019: CALL_OW 67
// CenterOnUnits ( Heike ) ;
18023: LD_EXP 38
18027: PPUSH
18028: CALL_OW 85
// until IsDying ( Heike ) ;
18032: LD_EXP 38
18036: PPUSH
18037: CALL_OW 303
18041: IFFALSE 18016
// end ; end ;
18043: GO 18046
18045: POP
// end ;
18046: PPOPN 1
18048: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
18049: LD_OWVAR 59
18053: IFFALSE 18057
// exit ;
18055: GO 18131
// if showPlaceEvent then
18057: LD_INT 4
18059: IFFALSE 18131
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
18061: LD_VAR 0 2
18065: PPUSH
18066: LD_VAR 0 3
18070: PPUSH
18071: LD_INT 2
18073: PPUSH
18074: LD_INT 6
18076: NEG
18077: PPUSH
18078: CALL_OW 330
// CenterOnXY ( x , y ) ;
18082: LD_VAR 0 2
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: CALL_OW 84
// wait ( time ) ;
18096: LD_VAR 0 4
18100: PPUSH
18101: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
18105: LD_EXP 38
18109: PPUSH
18110: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
18114: LD_VAR 0 2
18118: PPUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: LD_INT 2
18126: PPUSH
18127: CALL_OW 331
// end ; end ;
18131: PPOPN 7
18133: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
18134: LD_VAR 0 1
18138: PUSH
18139: LD_EXP 38
18143: EQUAL
18144: PUSH
18145: LD_EXP 5
18149: AND
18150: IFFALSE 18174
// if loseCounter then
18152: LD_EXP 32
18156: IFFALSE 18167
// YouLost ( HeikeNoSurrender ) else
18158: LD_STRING HeikeNoSurrender
18160: PPUSH
18161: CALL_OW 104
18165: GO 18174
// YouLost ( Heike ) ;
18167: LD_STRING Heike
18169: PPUSH
18170: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
18174: LD_VAR 0 1
18178: PPUSH
18179: CALL_OW 255
18183: PUSH
18184: LD_INT 2
18186: EQUAL
18187: PUSH
18188: LD_VAR 0 1
18192: PPUSH
18193: CALL_OW 247
18197: PUSH
18198: LD_INT 1
18200: EQUAL
18201: AND
18202: IFFALSE 18219
// loseCounter := Inc ( loseCounter ) ;
18204: LD_ADDR_EXP 32
18208: PUSH
18209: LD_EXP 32
18213: PPUSH
18214: CALL 65437 0 1
18218: ST_TO_ADDR
// end ;
18219: PPOPN 1
18221: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
18222: LD_VAR 0 1
18226: PUSH
18227: LD_INT 2
18229: EQUAL
18230: PUSH
18231: LD_VAR 0 2
18235: PUSH
18236: LD_INT 3
18238: EQUAL
18239: AND
18240: PUSH
18241: LD_VAR 0 1
18245: PUSH
18246: LD_INT 3
18248: EQUAL
18249: PUSH
18250: LD_VAR 0 2
18254: PUSH
18255: LD_INT 2
18257: EQUAL
18258: AND
18259: OR
18260: IFFALSE 18270
// isAlarm := true ;
18262: LD_ADDR_EXP 17
18266: PUSH
18267: LD_INT 1
18269: ST_TO_ADDR
// end ; end_of_file
18270: PPOPN 2
18272: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
18273: LD_INT 0
18275: PPUSH
18276: PPUSH
18277: PPUSH
// u1 := IsInUnit ( unit1 ) ;
18278: LD_ADDR_VAR 0 4
18282: PUSH
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 310
18292: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
18293: LD_ADDR_VAR 0 5
18297: PUSH
18298: LD_VAR 0 2
18302: PPUSH
18303: CALL_OW 310
18307: ST_TO_ADDR
// result := u1 and u1 = u2 ;
18308: LD_ADDR_VAR 0 3
18312: PUSH
18313: LD_VAR 0 4
18317: PUSH
18318: LD_VAR 0 4
18322: PUSH
18323: LD_VAR 0 5
18327: EQUAL
18328: AND
18329: ST_TO_ADDR
// end ;
18330: LD_VAR 0 3
18334: RET
// export function ShowPlace ( x , y , time ) ; begin
18335: LD_INT 0
18337: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
18338: LD_INT 4
18340: PPUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: LD_VAR 0 2
18350: PPUSH
18351: LD_VAR 0 3
18355: PPUSH
18356: LD_INT 0
18358: PPUSH
18359: LD_INT 0
18361: PPUSH
18362: LD_INT 0
18364: PPUSH
18365: CALL_OW 595
// end ;
18369: LD_VAR 0 4
18373: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
18374: LD_INT 0
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
18381: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
18382: LD_VAR 0 1
18386: PPUSH
18387: CALL_OW 302
18391: NOT
18392: PUSH
18393: LD_VAR 0 2
18397: PPUSH
18398: CALL_OW 302
18402: NOT
18403: OR
18404: PUSH
18405: LD_VAR 0 2
18409: PPUSH
18410: CALL_OW 313
18414: PUSH
18415: LD_INT 6
18417: EQUAL
18418: OR
18419: IFFALSE 18423
// exit ;
18421: GO 18640
// btype := GetBType ( building ) ;
18423: LD_ADDR_VAR 0 8
18427: PUSH
18428: LD_VAR 0 2
18432: PPUSH
18433: CALL_OW 266
18437: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
18438: LD_VAR 0 8
18442: PUSH
18443: LD_INT 0
18445: PUSH
18446: LD_INT 1
18448: PUSH
18449: LD_INT 2
18451: PUSH
18452: LD_INT 4
18454: PUSH
18455: LD_INT 5
18457: PUSH
18458: LD_INT 3
18460: PUSH
18461: LD_INT 6
18463: PUSH
18464: LD_INT 7
18466: PUSH
18467: LD_INT 8
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: IN
18481: NOT
18482: IFFALSE 18486
// exit ;
18484: GO 18640
// x := GetX ( building ) ;
18486: LD_ADDR_VAR 0 4
18490: PUSH
18491: LD_VAR 0 2
18495: PPUSH
18496: CALL_OW 250
18500: ST_TO_ADDR
// y := GetY ( building ) ;
18501: LD_ADDR_VAR 0 5
18505: PUSH
18506: LD_VAR 0 2
18510: PPUSH
18511: CALL_OW 251
18515: ST_TO_ADDR
// d := GetDir ( building ) ;
18516: LD_ADDR_VAR 0 6
18520: PUSH
18521: LD_VAR 0 2
18525: PPUSH
18526: CALL_OW 254
18530: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
18531: LD_ADDR_VAR 0 7
18535: PUSH
18536: LD_VAR 0 4
18540: PPUSH
18541: LD_VAR 0 6
18545: PPUSH
18546: LD_INT 3
18548: PPUSH
18549: CALL_OW 272
18553: PUSH
18554: LD_VAR 0 5
18558: PPUSH
18559: LD_VAR 0 6
18563: PPUSH
18564: LD_INT 3
18566: PPUSH
18567: CALL_OW 273
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
18576: LD_VAR 0 7
18580: PUSH
18581: LD_INT 1
18583: ARRAY
18584: PPUSH
18585: LD_VAR 0 7
18589: PUSH
18590: LD_INT 2
18592: ARRAY
18593: PPUSH
18594: CALL_OW 488
18598: NOT
18599: IFFALSE 18603
// exit ;
18601: GO 18640
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
18603: LD_ADDR_VAR 0 3
18607: PUSH
18608: LD_VAR 0 1
18612: PPUSH
18613: LD_VAR 0 7
18617: PUSH
18618: LD_INT 1
18620: ARRAY
18621: PPUSH
18622: LD_VAR 0 7
18626: PUSH
18627: LD_INT 2
18629: ARRAY
18630: PPUSH
18631: CALL_OW 297
18635: PUSH
18636: LD_INT 4
18638: LESS
18639: ST_TO_ADDR
// end ;
18640: LD_VAR 0 3
18644: RET
// export function PlaceExplosives ( building ) ; begin
18645: LD_INT 0
18647: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
18648: LD_ADDR_EXP 29
18652: PUSH
18653: LD_EXP 29
18657: PPUSH
18658: LD_VAR 0 1
18662: PPUSH
18663: CALL 64076 0 2
18667: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
18668: LD_VAR 0 1
18672: PPUSH
18673: CALL_OW 250
18677: PPUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 251
18687: PPUSH
18688: LD_STRING PlantBomb
18690: PPUSH
18691: CALL_OW 366
// end ;
18695: LD_VAR 0 2
18699: RET
// export function CreateNature ; var i ; begin
18700: LD_INT 0
18702: PPUSH
18703: PPUSH
// PrepareFrog ;
18704: CALL 60558 0 0
// for i := 1 to 3 do
18708: LD_ADDR_VAR 0 2
18712: PUSH
18713: DOUBLE
18714: LD_INT 1
18716: DEC
18717: ST_TO_ADDR
18718: LD_INT 3
18720: PUSH
18721: FOR_TO
18722: IFFALSE 18741
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
18724: CALL_OW 44
18728: PPUSH
18729: LD_INT 24
18731: PPUSH
18732: LD_INT 0
18734: PPUSH
18735: CALL_OW 49
18739: GO 18721
18741: POP
18742: POP
// end ;
18743: LD_VAR 0 1
18747: RET
// export function MarkBuilding ( building , marker ) ; begin
18748: LD_INT 0
18750: PPUSH
// if marker then
18751: LD_VAR 0 2
18755: IFFALSE 18802
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 250
18766: PPUSH
18767: LD_VAR 0 1
18771: PPUSH
18772: CALL_OW 251
18776: PPUSH
18777: LD_INT 2
18779: PPUSH
18780: LD_INT 3
18782: NEG
18783: PPUSH
18784: CALL_OW 330
// SetBName ( building , target ) ;
18788: LD_VAR 0 1
18792: PPUSH
18793: LD_STRING target
18795: PPUSH
18796: CALL_OW 500
// end else
18800: GO 18841
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
18802: LD_VAR 0 1
18806: PPUSH
18807: CALL_OW 250
18811: PPUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: CALL_OW 251
18821: PPUSH
18822: LD_INT 2
18824: PPUSH
18825: CALL_OW 331
// SetBName ( building ,  ) ;
18829: LD_VAR 0 1
18833: PPUSH
18834: LD_STRING 
18836: PPUSH
18837: CALL_OW 500
// end ; end ; end_of_file
18841: LD_VAR 0 3
18845: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
18846: LD_INT 0
18848: PPUSH
// lockerCodeValid := false ;
18849: LD_ADDR_EXP 64
18853: PUSH
18854: LD_INT 0
18856: ST_TO_ADDR
// if not step then
18857: LD_LOC 1
18861: NOT
18862: IFFALSE 18872
// step := 1 ;
18864: LD_ADDR_LOC 1
18868: PUSH
18869: LD_INT 1
18871: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
18872: LD_STRING HEscape
18874: PUSH
18875: LD_LOC 1
18879: STR
18880: PPUSH
18881: CALL_OW 97
18885: PUSH
18886: LD_INT 1
18888: DOUBLE
18889: EQUAL
18890: IFTRUE 18894
18892: GO 18901
18894: POP
// LockerMinigameSearch ; 2 :
18895: CALL 18934 0 0
18899: GO 18917
18901: LD_INT 2
18903: DOUBLE
18904: EQUAL
18905: IFTRUE 18909
18907: GO 18916
18909: POP
// LockerMinigameSetCode ; end ;
18910: CALL 19008 0 0
18914: GO 18917
18916: POP
// if lockerCodeValid then
18917: LD_EXP 64
18921: IFFALSE 18925
// exit ;
18923: GO 18929
// StartLockerMinigame ;
18925: CALL 18846 0 0
// end ;
18929: LD_VAR 0 1
18933: RET
// function LockerMinigameSearch ; begin
18934: LD_INT 0
18936: PPUSH
// if code then
18937: LD_LOC 2
18941: IFFALSE 18957
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
18943: LD_EXP 38
18947: PPUSH
18948: LD_STRING DH-Escape-3-Hint-0
18950: PPUSH
18951: CALL_OW 88
// exit ;
18955: GO 19003
// end ; Randomize ;
18957: CALL_OW 10
// code := rand ( 1 , 5 ) ;
18961: LD_ADDR_LOC 2
18965: PUSH
18966: LD_INT 1
18968: PPUSH
18969: LD_INT 5
18971: PPUSH
18972: CALL_OW 12
18976: ST_TO_ADDR
// step := 2 ;
18977: LD_ADDR_LOC 1
18981: PUSH
18982: LD_INT 2
18984: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
18985: LD_EXP 38
18989: PPUSH
18990: LD_STRING DH-Escape-3-Hint-
18992: PUSH
18993: LD_LOC 2
18997: STR
18998: PPUSH
18999: CALL_OW 88
// end ;
19003: LD_VAR 0 1
19007: RET
// function LockerMinigameSetCode ; begin
19008: LD_INT 0
19010: PPUSH
// if not code then
19011: LD_LOC 2
19015: NOT
19016: IFFALSE 19026
// code := 0 ;
19018: LD_ADDR_LOC 2
19022: PUSH
19023: LD_INT 0
19025: ST_TO_ADDR
// lockerBusy := true ;
19026: LD_ADDR_EXP 65
19030: PUSH
19031: LD_INT 1
19033: ST_TO_ADDR
// InGameOff ;
19034: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
19038: LD_STRING initLockerMinigame("
19040: PUSH
19041: LD_LOC 2
19045: STR
19046: PUSH
19047: LD_STRING ")
19049: STR
19050: PPUSH
19051: CALL_OW 559
// step := 3 ;
19055: LD_ADDR_LOC 1
19059: PUSH
19060: LD_INT 3
19062: ST_TO_ADDR
// repeat wait ( 1 ) ;
19063: LD_INT 1
19065: PPUSH
19066: CALL_OW 67
// until not lockerBusy ;
19070: LD_EXP 65
19074: NOT
19075: IFFALSE 19063
// InGameOn ;
19077: CALL_OW 8
// if not lockerCodeValid then
19081: LD_EXP 64
19085: NOT
19086: IFFALSE 19112
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
19088: LD_EXP 38
19092: PPUSH
19093: LD_STRING DH-Escape-3-Fail-
19095: PUSH
19096: LD_INT 1
19098: PPUSH
19099: LD_INT 2
19101: PPUSH
19102: CALL_OW 12
19106: STR
19107: PPUSH
19108: CALL_OW 88
// end ; end_of_file
19112: LD_VAR 0 1
19116: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
19117: LD_VAR 0 2
19121: PUSH
19122: LD_INT 102
19124: EQUAL
19125: IFFALSE 19147
// begin lockerBusy := false ;
19127: LD_ADDR_EXP 65
19131: PUSH
19132: LD_INT 0
19134: ST_TO_ADDR
// lockerCodeValid := p3 ;
19135: LD_ADDR_EXP 64
19139: PUSH
19140: LD_VAR 0 3
19144: ST_TO_ADDR
// end else
19145: GO 19201
// if p2 = 103 then
19147: LD_VAR 0 2
19151: PUSH
19152: LD_INT 103
19154: EQUAL
19155: IFFALSE 19167
// begin weatherBusy := false ;
19157: LD_ADDR_EXP 37
19161: PUSH
19162: LD_INT 0
19164: ST_TO_ADDR
// end else
19165: GO 19201
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
19167: LD_VAR 0 1
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_VAR 0 4
19186: PPUSH
19187: LD_VAR 0 5
19191: PPUSH
19192: LD_VAR 0 6
19196: PPUSH
19197: CALL 68046 0 6
// end ;
19201: PPOPN 6
19203: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
19204: LD_STRING killGameMusic();
19206: PPUSH
19207: CALL_OW 559
// SOS_MapStart ( ) ;
19211: CALL 68017 0 0
// end ; end_of_file
19215: PPOPN 1
19217: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
19218: LD_EXP 17
19222: NOT
19223: PUSH
19224: LD_EXP 63
19228: AND
19229: IFFALSE 19633
19231: GO 19233
19233: DISABLE
19234: LD_INT 0
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
19240: PPUSH
// begin enable ;
19241: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
19242: LD_ADDR_VAR 0 3
19246: PUSH
19247: LD_INT 26
19249: PUSH
19250: LD_INT 27
19252: PUSH
19253: LD_INT 28
19255: PUSH
19256: LD_INT 29
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 30
19267: PUSH
19268: LD_INT 31
19270: PUSH
19271: LD_INT 32
19273: PUSH
19274: LD_INT 33
19276: PUSH
19277: LD_INT 34
19279: PUSH
19280: LD_INT 35
19282: PUSH
19283: LD_INT 36
19285: PUSH
19286: LD_INT 37
19288: PUSH
19289: LD_INT 38
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 39
19305: PUSH
19306: LD_INT 40
19308: PUSH
19309: LD_INT 41
19311: PUSH
19312: LD_INT 42
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 43
19323: PUSH
19324: LD_INT 44
19326: PUSH
19327: LD_INT 45
19329: PUSH
19330: LD_INT 46
19332: PUSH
19333: LD_INT 47
19335: PUSH
19336: LD_INT 46
19338: PUSH
19339: LD_INT 45
19341: PUSH
19342: LD_INT 44
19344: PUSH
19345: LD_INT 43
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: ST_TO_ADDR
// for i in ruPatrol do
19365: LD_ADDR_VAR 0 1
19369: PUSH
19370: LD_EXP 63
19374: PUSH
19375: FOR_IN
19376: IFFALSE 19631
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
19378: LD_ADDR_VAR 0 5
19382: PUSH
19383: LD_INT 22
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 21
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 91
19405: PUSH
19406: LD_VAR 0 1
19410: PUSH
19411: LD_INT 7
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: LIST
19423: PPUSH
19424: CALL_OW 69
19428: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
19429: LD_INT 2
19431: PPUSH
19432: LD_VAR 0 1
19436: PPUSH
19437: CALL_OW 292
19441: PUSH
19442: LD_VAR 0 5
19446: AND
19447: IFFALSE 19517
// begin if hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 then
19449: LD_EXP 30
19453: PUSH
19454: LD_VAR 0 1
19458: PPUSH
19459: LD_EXP 58
19463: PPUSH
19464: CALL_OW 296
19468: PUSH
19469: LD_INT 16
19471: LESS
19472: AND
19473: IFFALSE 19477
// continue ;
19475: GO 19375
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
19477: LD_VAR 0 1
19481: PPUSH
19482: LD_VAR 0 5
19486: PPUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL_OW 74
19496: PPUSH
19497: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
19501: LD_VAR 0 1
19505: PPUSH
19506: LD_VAR 0 5
19510: PPUSH
19511: CALL 19636 0 2
// continue ;
19515: GO 19375
// end ; if HasTask ( i ) then
19517: LD_VAR 0 1
19521: PPUSH
19522: CALL_OW 314
19526: IFFALSE 19530
// continue ;
19528: GO 19375
// tag := GetTag ( i ) ;
19530: LD_ADDR_VAR 0 4
19534: PUSH
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 110
19544: ST_TO_ADDR
// if not tag then
19545: LD_VAR 0 4
19549: NOT
19550: IFFALSE 19563
// begin ComHold ( i ) ;
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL_OW 140
// continue ;
19561: GO 19375
// end ; for j := 1 to points [ tag ] do
19563: LD_ADDR_VAR 0 2
19567: PUSH
19568: DOUBLE
19569: LD_INT 1
19571: DEC
19572: ST_TO_ADDR
19573: LD_VAR 0 3
19577: PUSH
19578: LD_VAR 0 4
19582: ARRAY
19583: PUSH
19584: FOR_TO
19585: IFFALSE 19627
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
19587: LD_VAR 0 1
19591: PPUSH
19592: LD_VAR 0 3
19596: PUSH
19597: LD_VAR 0 4
19601: ARRAY
19602: PUSH
19603: LD_VAR 0 2
19607: ARRAY
19608: PPUSH
19609: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
19613: LD_VAR 0 1
19617: PPUSH
19618: LD_INT 70
19620: PPUSH
19621: CALL_OW 202
// end ;
19625: GO 19584
19627: POP
19628: POP
// end ;
19629: GO 19375
19631: POP
19632: POP
// end ;
19633: PPOPN 5
19635: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
19636: LD_INT 0
19638: PPUSH
19639: PPUSH
19640: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
19641: LD_VAR 0 2
19645: PPUSH
19646: LD_INT 23
19648: PUSH
19649: LD_INT 3
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PPUSH
19656: CALL_OW 72
19660: PUSH
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_INT 95
19668: PUSH
19669: LD_INT 61
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PPUSH
19676: CALL_OW 72
19680: OR
19681: IFFALSE 19685
// exit ;
19683: GO 20728
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
19685: LD_VAR 0 2
19689: PPUSH
19690: LD_INT 2
19692: PUSH
19693: LD_INT 25
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 25
19705: PUSH
19706: LD_INT 11
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 25
19715: PUSH
19716: LD_INT 34
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 25
19725: PUSH
19726: LD_INT 32
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: PPUSH
19743: CALL_OW 72
19747: IFFALSE 19831
// begin DialogueOn ;
19749: CALL_OW 6
// case GetSex ( guard ) of sex_male :
19753: LD_VAR 0 1
19757: PPUSH
19758: CALL_OW 258
19762: PUSH
19763: LD_INT 1
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19786
19771: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
19772: LD_VAR 0 1
19776: PPUSH
19777: LD_STRING DRum-Fail-3
19779: PPUSH
19780: CALL_OW 88
19784: GO 19810
19786: LD_INT 2
19788: DOUBLE
19789: EQUAL
19790: IFTRUE 19794
19792: GO 19809
19794: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
19795: LD_VAR 0 1
19799: PPUSH
19800: LD_STRING DRum-Fail-3
19802: PPUSH
19803: CALL_OW 88
19807: GO 19810
19809: POP
// DialogueOff ;
19810: CALL_OW 7
// wait ( 0 0$5 ) ;
19814: LD_INT 175
19816: PPUSH
19817: CALL_OW 67
// isAlarm := true ;
19821: LD_ADDR_EXP 17
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// exit ;
19829: GO 20728
// end ; DialogueOn ;
19831: CALL_OW 6
// CenterNowOnUnits ( guard ) ;
19835: LD_VAR 0 1
19839: PPUSH
19840: CALL_OW 87
// if not Heike in units then
19844: LD_EXP 38
19848: PUSH
19849: LD_VAR 0 2
19853: IN
19854: NOT
19855: IFFALSE 20205
// begin case GetSex ( guard ) of sex_male :
19857: LD_VAR 0 1
19861: PPUSH
19862: CALL_OW 258
19866: PUSH
19867: LD_INT 1
19869: DOUBLE
19870: EQUAL
19871: IFTRUE 19875
19873: GO 19890
19875: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_STRING DRum-Guard-1
19883: PPUSH
19884: CALL_OW 88
19888: GO 19914
19890: LD_INT 2
19892: DOUBLE
19893: EQUAL
19894: IFTRUE 19898
19896: GO 19913
19898: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
19899: LD_VAR 0 1
19903: PPUSH
19904: LD_STRING DRuf-Guard-1
19906: PPUSH
19907: CALL_OW 88
19911: GO 19914
19913: POP
// case Query ( SurrenderInfoPeople ) of 1 :
19914: LD_STRING SurrenderInfoPeople
19916: PPUSH
19917: CALL_OW 97
19921: PUSH
19922: LD_INT 1
19924: DOUBLE
19925: EQUAL
19926: IFTRUE 19930
19928: GO 20031
19930: POP
// begin Query ( CaughtSquadInfo ) ;
19931: LD_STRING CaughtSquadInfo
19933: PPUSH
19934: CALL_OW 97
// for i in units do
19938: LD_ADDR_VAR 0 4
19942: PUSH
19943: LD_VAR 0 2
19947: PUSH
19948: FOR_IN
19949: IFFALSE 20006
// begin if Carry ( i ) then
19951: LD_VAR 0 4
19955: PPUSH
19956: CALL_OW 281
19960: IFFALSE 19977
// SetCargo ( i , mat_cans , 0 ) ;
19962: LD_VAR 0 4
19966: PPUSH
19967: LD_INT 1
19969: PPUSH
19970: LD_INT 0
19972: PPUSH
19973: CALL_OW 290
// SetSide ( i , 5 ) ;
19977: LD_VAR 0 4
19981: PPUSH
19982: LD_INT 5
19984: PPUSH
19985: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
19989: LD_VAR 0 4
19993: PPUSH
19994: LD_INT 113
19996: PPUSH
19997: LD_INT 17
19999: PPUSH
20000: CALL_OW 111
// end ;
20004: GO 19948
20006: POP
20007: POP
// ComMoveXY ( guard , 113 , 17 ) ;
20008: LD_VAR 0 1
20012: PPUSH
20013: LD_INT 113
20015: PPUSH
20016: LD_INT 17
20018: PPUSH
20019: CALL_OW 111
// DialogueOff ;
20023: CALL_OW 7
// exit ;
20027: GO 20728
// end ; 2 :
20029: GO 20205
20031: LD_INT 2
20033: DOUBLE
20034: EQUAL
20035: IFTRUE 20039
20037: GO 20204
20039: POP
// begin DialogueOff ;
20040: CALL_OW 7
// wait ( 0 0$2 ) ;
20044: LD_INT 70
20046: PPUSH
20047: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20051: LD_INT 6
20053: PPUSH
20054: LD_INT 2
20056: PPUSH
20057: LD_INT 2
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
20067: LD_VAR 0 1
20071: PPUSH
20072: LD_VAR 0 2
20076: PUSH
20077: LD_INT 1
20079: ARRAY
20080: PPUSH
20081: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20085: LD_VAR 0 1
20089: PPUSH
20090: CALL_OW 258
20094: PUSH
20095: LD_INT 1
20097: DOUBLE
20098: EQUAL
20099: IFTRUE 20103
20101: GO 20118
20103: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20104: LD_VAR 0 1
20108: PPUSH
20109: LD_STRING DRum-Fail-3
20111: PPUSH
20112: CALL_OW 88
20116: GO 20142
20118: LD_INT 2
20120: DOUBLE
20121: EQUAL
20122: IFTRUE 20126
20124: GO 20141
20126: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_STRING DRum-Fail-3
20134: PPUSH
20135: CALL_OW 88
20139: GO 20142
20141: POP
// wait ( 0 0$5 ) ;
20142: LD_INT 175
20144: PPUSH
20145: CALL_OW 67
// if IsOk ( guard ) then
20149: LD_VAR 0 1
20153: PPUSH
20154: CALL_OW 302
20158: IFFALSE 20170
// isAlarm := true else
20160: LD_ADDR_EXP 17
20164: PUSH
20165: LD_INT 1
20167: ST_TO_ADDR
20168: GO 20202
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20170: LD_INT 6
20172: PPUSH
20173: LD_INT 2
20175: PPUSH
20176: LD_INT 0
20178: PPUSH
20179: LD_INT 1
20181: PPUSH
20182: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20186: LD_INT 3
20188: PPUSH
20189: LD_INT 2
20191: PPUSH
20192: LD_INT 0
20194: PPUSH
20195: LD_INT 1
20197: PPUSH
20198: CALL_OW 80
// end ; end ; end ;
20202: GO 20205
20204: POP
// end ; if Carry ( Heike ) then
20205: LD_EXP 38
20209: PPUSH
20210: CALL_OW 281
20214: IFFALSE 20290
// begin case GetSex ( guard ) of sex_male :
20216: LD_VAR 0 1
20220: PPUSH
20221: CALL_OW 258
20225: PUSH
20226: LD_INT 1
20228: DOUBLE
20229: EQUAL
20230: IFTRUE 20234
20232: GO 20249
20234: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
20235: LD_VAR 0 1
20239: PPUSH
20240: LD_STRING DRum-FoodFail-1
20242: PPUSH
20243: CALL_OW 88
20247: GO 20273
20249: LD_INT 2
20251: DOUBLE
20252: EQUAL
20253: IFTRUE 20257
20255: GO 20272
20257: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
20258: LD_VAR 0 1
20262: PPUSH
20263: LD_STRING DRuf-FoodFail-2
20265: PPUSH
20266: CALL_OW 88
20270: GO 20273
20272: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
20273: LD_EXP 38
20277: PPUSH
20278: LD_INT 1
20280: PPUSH
20281: LD_INT 0
20283: PPUSH
20284: CALL_OW 290
// end else
20288: GO 20347
// begin case GetSex ( guard ) of sex_male :
20290: LD_VAR 0 1
20294: PPUSH
20295: CALL_OW 258
20299: PUSH
20300: LD_INT 1
20302: DOUBLE
20303: EQUAL
20304: IFTRUE 20308
20306: GO 20323
20308: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
20309: LD_VAR 0 1
20313: PPUSH
20314: LD_STRING DRum-Seen-1
20316: PPUSH
20317: CALL_OW 88
20321: GO 20347
20323: LD_INT 2
20325: DOUBLE
20326: EQUAL
20327: IFTRUE 20331
20329: GO 20346
20331: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_STRING DRuf-Seen-1
20339: PPUSH
20340: CALL_OW 88
20344: GO 20347
20346: POP
// end ; alone := ( units = 1 ) ;
20347: LD_ADDR_VAR 0 5
20351: PUSH
20352: LD_VAR 0 2
20356: PUSH
20357: LD_INT 1
20359: EQUAL
20360: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
20361: LD_STRING SurrenderInfo
20363: PPUSH
20364: CALL_OW 97
20368: PUSH
20369: LD_INT 1
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20546
20377: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
20378: LD_INT 23
20380: PPUSH
20381: CALL_OW 87
// RemoveUnit ( Heike ) ;
20385: LD_EXP 38
20389: PPUSH
20390: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
20394: LD_EXP 38
20398: PPUSH
20399: LD_INT 23
20401: PPUSH
20402: CALL_OW 52
// if not alone then
20406: LD_VAR 0 5
20410: NOT
20411: IFFALSE 20466
// for i in units diff Heike do
20413: LD_ADDR_VAR 0 4
20417: PUSH
20418: LD_VAR 0 2
20422: PUSH
20423: LD_EXP 38
20427: DIFF
20428: PUSH
20429: FOR_IN
20430: IFFALSE 20464
// begin RemoveUnit ( i ) ;
20432: LD_VAR 0 4
20436: PPUSH
20437: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
20441: LD_VAR 0 4
20445: PPUSH
20446: LD_INT 114
20448: PPUSH
20449: LD_INT 17
20451: PPUSH
20452: LD_INT 10
20454: PPUSH
20455: LD_INT 0
20457: PPUSH
20458: CALL_OW 50
// end ;
20462: GO 20429
20464: POP
20465: POP
// wait ( 0 0$0.3 ) ;
20466: LD_INT 10
20468: PPUSH
20469: CALL_OW 67
// if alone then
20473: LD_VAR 0 5
20477: IFFALSE 20488
// Query ( CaughtInfoAlone ) else
20479: LD_STRING CaughtInfoAlone
20481: PPUSH
20482: CALL_OW 97
20486: GO 20495
// Query ( CaughtInfo ) ;
20488: LD_STRING CaughtInfo
20490: PPUSH
20491: CALL_OW 97
// wait ( 0 0$1 ) ;
20495: LD_INT 35
20497: PPUSH
20498: CALL_OW 67
// StartLockerMinigame ;
20502: CALL 18846 0 0
// Say ( Heike , DH-Reset ) ;
20506: LD_EXP 38
20510: PPUSH
20511: LD_STRING DH-Reset
20513: PPUSH
20514: CALL_OW 88
// DialogueOff ;
20518: CALL_OW 7
// InGameOff ;
20522: CALL_OW 9
// ComExitBuilding ( Heike ) ;
20526: LD_EXP 38
20530: PPUSH
20531: CALL_OW 122
// ComFree ( guard ) ;
20535: LD_VAR 0 1
20539: PPUSH
20540: CALL_OW 139
// end ; 2 :
20544: GO 20728
20546: LD_INT 2
20548: DOUBLE
20549: EQUAL
20550: IFTRUE 20554
20552: GO 20727
20554: POP
// begin Say ( Heike , DH-Guard-2 ) ;
20555: LD_EXP 38
20559: PPUSH
20560: LD_STRING DH-Guard-2
20562: PPUSH
20563: CALL_OW 88
// DialogueOff ;
20567: CALL_OW 7
// wait ( 0 0$2 ) ;
20571: LD_INT 70
20573: PPUSH
20574: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20578: LD_INT 6
20580: PPUSH
20581: LD_INT 2
20583: PPUSH
20584: LD_INT 2
20586: PPUSH
20587: LD_INT 1
20589: PPUSH
20590: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
20594: LD_VAR 0 1
20598: PPUSH
20599: LD_EXP 38
20603: PPUSH
20604: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20608: LD_VAR 0 1
20612: PPUSH
20613: CALL_OW 258
20617: PUSH
20618: LD_INT 1
20620: DOUBLE
20621: EQUAL
20622: IFTRUE 20626
20624: GO 20641
20626: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20627: LD_VAR 0 1
20631: PPUSH
20632: LD_STRING DRum-Fail-3
20634: PPUSH
20635: CALL_OW 88
20639: GO 20665
20641: LD_INT 2
20643: DOUBLE
20644: EQUAL
20645: IFTRUE 20649
20647: GO 20664
20649: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20650: LD_VAR 0 1
20654: PPUSH
20655: LD_STRING DRum-Fail-3
20657: PPUSH
20658: CALL_OW 88
20662: GO 20665
20664: POP
// wait ( 0 0$5 ) ;
20665: LD_INT 175
20667: PPUSH
20668: CALL_OW 67
// if IsOk ( guard ) then
20672: LD_VAR 0 1
20676: PPUSH
20677: CALL_OW 302
20681: IFFALSE 20693
// isAlarm := true else
20683: LD_ADDR_EXP 17
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
20691: GO 20725
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20693: LD_INT 6
20695: PPUSH
20696: LD_INT 2
20698: PPUSH
20699: LD_INT 0
20701: PPUSH
20702: LD_INT 1
20704: PPUSH
20705: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20709: LD_INT 3
20711: PPUSH
20712: LD_INT 2
20714: PPUSH
20715: LD_INT 0
20717: PPUSH
20718: LD_INT 1
20720: PPUSH
20721: CALL_OW 80
// end ; end ; end ;
20725: GO 20728
20727: POP
// end ;
20728: LD_VAR 0 3
20732: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
20733: LD_EXP 14
20737: PPUSH
20738: LD_INT 22
20740: PUSH
20741: LD_INT 5
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 3
20750: PUSH
20751: LD_INT 101
20753: PUSH
20754: LD_INT 6
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 92
20767: PUSH
20768: LD_INT 113
20770: PUSH
20771: LD_INT 16
20773: PUSH
20774: LD_INT 12
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 91
20785: PUSH
20786: LD_EXP 38
20790: PUSH
20791: LD_INT 6
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PPUSH
20805: CALL_OW 72
20809: PUSH
20810: LD_EXP 30
20814: NOT
20815: AND
20816: IFFALSE 20921
20818: GO 20820
20820: DISABLE
20821: LD_INT 0
20823: PPUSH
// begin enable ;
20824: ENABLE
// DialogueOn ;
20825: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
20829: LD_EXP 38
20833: PPUSH
20834: LD_STRING DH-Join-
20836: PUSH
20837: LD_INT 1
20839: PPUSH
20840: LD_INT 3
20842: PPUSH
20843: CALL_OW 12
20847: STR
20848: PPUSH
20849: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
20853: LD_ADDR_VAR 0 1
20857: PUSH
20858: LD_EXP 14
20862: PPUSH
20863: LD_INT 22
20865: PUSH
20866: LD_INT 5
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 91
20875: PUSH
20876: LD_EXP 38
20880: PUSH
20881: LD_INT 10
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: LIST
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PPUSH
20893: CALL_OW 72
20897: PUSH
20898: FOR_IN
20899: IFFALSE 20915
// SetSide ( i , 2 ) ;
20901: LD_VAR 0 1
20905: PPUSH
20906: LD_INT 2
20908: PPUSH
20909: CALL_OW 235
20913: GO 20898
20915: POP
20916: POP
// DialogueOff ;
20917: CALL_OW 7
// end ; end_of_file
20921: PPOPN 1
20923: END
// every 0 0$2 trigger isAlarm do var i , points , tmp ;
20924: LD_EXP 17
20928: IFFALSE 21229
20930: GO 20932
20932: DISABLE
20933: LD_INT 0
20935: PPUSH
20936: PPUSH
20937: PPUSH
// begin DialogueOn ;
20938: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
20942: LD_EXP 38
20946: PPUSH
20947: LD_STRING DH-Alarm-1
20949: PPUSH
20950: CALL_OW 88
// DialogueOff ;
20954: CALL_OW 7
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
20958: LD_INT 1
20960: NEG
20961: PPUSH
20962: LD_INT 1
20964: NEG
20965: PPUSH
20966: LD_STRING alarm
20968: PPUSH
20969: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
20973: LD_INT 3
20975: PPUSH
20976: LD_INT 2
20978: PPUSH
20979: LD_INT 2
20981: PPUSH
20982: LD_INT 1
20984: PPUSH
20985: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20989: LD_INT 6
20991: PPUSH
20992: LD_INT 2
20994: PPUSH
20995: LD_INT 2
20997: PPUSH
20998: LD_INT 1
21000: PPUSH
21001: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
21005: LD_ADDR_VAR 0 2
21009: PUSH
21010: LD_INT 107
21012: PUSH
21013: LD_INT 39
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 143
21022: PUSH
21023: LD_INT 33
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 180
21032: PUSH
21033: LD_INT 115
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 96
21042: PUSH
21043: LD_INT 90
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 59
21052: PUSH
21053: LD_INT 52
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 16
21062: PUSH
21063: LD_INT 15
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 90
21072: PUSH
21073: LD_INT 120
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
21089: LD_ADDR_VAR 0 3
21093: PUSH
21094: LD_INT 22
21096: PUSH
21097: LD_INT 6
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 25
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PPUSH
21118: CALL_OW 69
21122: ST_TO_ADDR
// for i in tmp do
21123: LD_ADDR_VAR 0 1
21127: PUSH
21128: LD_VAR 0 3
21132: PUSH
21133: FOR_IN
21134: IFFALSE 21202
// begin ComExit ( i ) ;
21136: LD_VAR 0 1
21140: PPUSH
21141: CALL 64474 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
21145: LD_VAR 0 1
21149: PPUSH
21150: LD_VAR 0 2
21154: PUSH
21155: LD_VAR 0 1
21159: PUSH
21160: LD_INT 7
21162: MOD
21163: PUSH
21164: LD_INT 1
21166: PLUS
21167: ARRAY
21168: PUSH
21169: LD_INT 1
21171: ARRAY
21172: PPUSH
21173: LD_VAR 0 2
21177: PUSH
21178: LD_VAR 0 1
21182: PUSH
21183: LD_INT 7
21185: MOD
21186: PUSH
21187: LD_INT 1
21189: PLUS
21190: ARRAY
21191: PUSH
21192: LD_INT 2
21194: ARRAY
21195: PPUSH
21196: CALL_OW 174
// end ;
21200: GO 21133
21202: POP
21203: POP
// Explode ;
21204: CALL 21232 0 0
// wait ( 0 0$45 ) ;
21208: LD_INT 1575
21210: PPUSH
21211: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
21215: LD_VAR 0 3
21219: PPUSH
21220: LD_EXP 38
21224: PPUSH
21225: CALL_OW 175
// end ;
21229: PPOPN 3
21231: END
// export function Explode ; var i , x , y , j ; begin
21232: LD_INT 0
21234: PPUSH
21235: PPUSH
21236: PPUSH
21237: PPUSH
21238: PPUSH
// if hasExplosionsInFactory then
21239: LD_EXP 7
21243: IFFALSE 21263
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
21245: LD_ADDR_EXP 29
21249: PUSH
21250: LD_EXP 29
21254: PPUSH
21255: LD_INT 61
21257: PPUSH
21258: CALL 64076 0 2
21262: ST_TO_ADDR
// if explosivePlantedList then
21263: LD_EXP 29
21267: IFFALSE 21415
// begin for i in explosivePlantedList do
21269: LD_ADDR_VAR 0 2
21273: PUSH
21274: LD_EXP 29
21278: PUSH
21279: FOR_IN
21280: IFFALSE 21383
// begin x := GetX ( i ) ;
21282: LD_ADDR_VAR 0 3
21286: PUSH
21287: LD_VAR 0 2
21291: PPUSH
21292: CALL_OW 250
21296: ST_TO_ADDR
// y := GetY ( i ) ;
21297: LD_ADDR_VAR 0 4
21301: PUSH
21302: LD_VAR 0 2
21306: PPUSH
21307: CALL_OW 251
21311: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
21312: LD_ADDR_VAR 0 5
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: LD_INT 5
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: PUSH
21331: FOR_IN
21332: IFFALSE 21379
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
21334: LD_VAR 0 3
21338: PPUSH
21339: LD_VAR 0 5
21343: PPUSH
21344: LD_INT 2
21346: PPUSH
21347: CALL_OW 272
21351: PPUSH
21352: LD_VAR 0 4
21356: PPUSH
21357: LD_VAR 0 5
21361: PPUSH
21362: LD_INT 2
21364: PPUSH
21365: CALL_OW 273
21369: PPUSH
21370: LD_INT 1
21372: PPUSH
21373: CALL_OW 453
21377: GO 21331
21379: POP
21380: POP
// end ;
21381: GO 21279
21383: POP
21384: POP
// Say ( Heike , DH-End-2 ) ;
21385: LD_EXP 38
21389: PPUSH
21390: LD_STRING DH-End-2
21392: PPUSH
21393: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
21397: LD_INT 175
21399: PUSH
21400: LD_EXP 29
21404: PPUSH
21405: CALL 28729 0 1
21409: MUL
21410: PPUSH
21411: CALL_OW 67
// end ; if not isAlarm then
21415: LD_EXP 17
21419: NOT
21420: IFFALSE 21430
// isAlarm := true ;
21422: LD_ADDR_EXP 17
21426: PUSH
21427: LD_INT 1
21429: ST_TO_ADDR
// end ;
21430: LD_VAR 0 1
21434: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
21435: LD_INT 22
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 21
21447: PUSH
21448: LD_INT 2
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: LD_INT 101
21460: PUSH
21461: LD_INT 3
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 101
21470: PUSH
21471: LD_INT 6
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: PPUSH
21488: CALL_OW 69
21492: IFFALSE 21505
21494: GO 21496
21496: DISABLE
// isAlarm := true ; end_of_file
21497: LD_ADDR_EXP 17
21501: PUSH
21502: LD_INT 1
21504: ST_TO_ADDR
21505: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
21506: LD_EXP 14
21510: PPUSH
21511: LD_INT 22
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PPUSH
21521: CALL_OW 72
21525: PUSH
21526: LD_INT 3
21528: GREATER
21529: PUSH
21530: LD_EXP 17
21534: NOT
21535: AND
21536: IFFALSE 25388
21538: GO 21540
21540: DISABLE
21541: LD_INT 0
21543: PPUSH
21544: PPUSH
21545: PPUSH
21546: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
21547: LD_EXP 58
21551: PPUSH
21552: LD_INT 155
21554: PPUSH
21555: LD_INT 68
21557: PPUSH
21558: LD_INT 0
21560: PPUSH
21561: CALL_OW 48
// wait ( 0 0$1 ) ;
21565: LD_INT 35
21567: PPUSH
21568: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21572: LD_INT 35
21574: PPUSH
21575: CALL_OW 67
// if not HasTask ( ruDisturb ) then
21579: LD_EXP 58
21583: PPUSH
21584: CALL_OW 314
21588: NOT
21589: IFFALSE 21605
// ComMoveUnit ( ruDisturb , Heike ) ;
21591: LD_EXP 58
21595: PPUSH
21596: LD_EXP 38
21600: PPUSH
21601: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
21605: LD_EXP 38
21609: PPUSH
21610: LD_EXP 58
21614: PPUSH
21615: CALL_OW 296
21619: PUSH
21620: LD_INT 6
21622: LESS
21623: PUSH
21624: LD_EXP 58
21628: PPUSH
21629: CALL_OW 302
21633: AND
21634: IFFALSE 21572
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21636: LD_EXP 14
21640: PPUSH
21641: LD_INT 22
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 91
21653: PUSH
21654: LD_EXP 58
21658: PUSH
21659: LD_INT 8
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 2
21669: PUSH
21670: LD_INT 25
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 25
21682: PUSH
21683: LD_INT 11
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 25
21692: PUSH
21693: LD_INT 32
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 25
21702: PUSH
21703: LD_INT 34
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: LIST
21721: PPUSH
21722: CALL_OW 72
21726: IFFALSE 21736
// isAlarm := true ;
21728: LD_ADDR_EXP 17
21732: PUSH
21733: LD_INT 1
21735: ST_TO_ADDR
// if isAlarm then
21736: LD_EXP 17
21740: IFFALSE 21744
// exit ;
21742: GO 25388
// DialogueOn ;
21744: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
21748: LD_EXP 58
21752: PPUSH
21753: LD_STRING DMcn-Interrupt-1
21755: PPUSH
21756: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
21760: LD_EXP 58
21764: PPUSH
21765: LD_STRING DMcn-Interrupt-2
21767: PPUSH
21768: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
21772: LD_EXP 58
21776: PPUSH
21777: LD_STRING DMcn-Interrupt-3
21779: PPUSH
21780: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
21784: LD_EXP 38
21788: PPUSH
21789: LD_STRING DH-Interrupt-a-4
21791: PPUSH
21792: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
21796: LD_EXP 58
21800: PPUSH
21801: LD_STRING DMcn-Interrupt-a-5
21803: PPUSH
21804: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
21808: LD_EXP 38
21812: PPUSH
21813: LD_STRING DH-Interrupt-a-6
21815: PPUSH
21816: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
21820: LD_EXP 58
21824: PPUSH
21825: LD_STRING DMcn-Interrupt-a-7
21827: PPUSH
21828: CALL_OW 88
// DialogueOff ;
21832: CALL_OW 7
// hasMuchin := true ;
21836: LD_ADDR_EXP 30
21840: PUSH
21841: LD_INT 1
21843: ST_TO_ADDR
// Query ( MuchinInfo ) ;
21844: LD_STRING MuchinInfo
21846: PPUSH
21847: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
21851: LD_STRING M2a
21853: PPUSH
21854: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
21858: LD_INT 105
21860: PPUSH
21861: LD_INT 55
21863: PPUSH
21864: CALL_OW 428
21868: PPUSH
21869: LD_INT 2
21871: PPUSH
21872: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
21876: LD_INT 115
21878: PPUSH
21879: LD_INT 65
21881: PPUSH
21882: CALL_OW 428
21886: PPUSH
21887: LD_INT 2
21889: PPUSH
21890: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
21894: LD_INT 109
21896: PPUSH
21897: LD_INT 59
21899: PPUSH
21900: LD_INT 2
21902: PPUSH
21903: LD_INT 10
21905: NEG
21906: PPUSH
21907: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
21911: LD_INT 109
21913: PPUSH
21914: LD_INT 59
21916: PPUSH
21917: CALL_OW 84
// wait ( 0 0$2 ) ;
21921: LD_INT 70
21923: PPUSH
21924: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
21928: LD_INT 109
21930: PPUSH
21931: LD_INT 59
21933: PPUSH
21934: LD_INT 2
21936: PPUSH
21937: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
21941: LD_INT 35
21943: PPUSH
21944: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
21948: LD_EXP 58
21952: PPUSH
21953: LD_EXP 38
21957: PPUSH
21958: CALL_OW 296
21962: PUSH
21963: LD_INT 6
21965: GREATER
21966: IFFALSE 21982
// ComMoveUnit ( ruDisturb , Heike ) ;
21968: LD_EXP 58
21972: PPUSH
21973: LD_EXP 38
21977: PPUSH
21978: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21982: LD_EXP 14
21986: PPUSH
21987: LD_INT 22
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 91
21999: PUSH
22000: LD_EXP 58
22004: PUSH
22005: LD_INT 8
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 2
22015: PUSH
22016: LD_INT 25
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 25
22028: PUSH
22029: LD_INT 11
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 25
22038: PUSH
22039: LD_INT 32
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 25
22048: PUSH
22049: LD_INT 34
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: PPUSH
22068: CALL_OW 72
22072: IFFALSE 22084
// begin isAlarm := true ;
22074: LD_ADDR_EXP 17
22078: PUSH
22079: LD_INT 1
22081: ST_TO_ADDR
// exit ;
22082: GO 25388
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
22084: LD_INT 105
22086: PPUSH
22087: LD_INT 55
22089: PPUSH
22090: CALL_OW 428
22094: NOT
22095: PUSH
22096: LD_INT 115
22098: PPUSH
22099: LD_INT 65
22101: PPUSH
22102: CALL_OW 428
22106: NOT
22107: OR
22108: IFFALSE 22120
// begin isAlarm := true ;
22110: LD_ADDR_EXP 17
22114: PUSH
22115: LD_INT 1
22117: ST_TO_ADDR
// exit ;
22118: GO 25388
// end ; until not BuildingsInProgress ( 2 ) ;
22120: LD_INT 2
22122: PPUSH
22123: CALL_OW 345
22127: NOT
22128: IFFALSE 21941
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
22130: LD_INT 105
22132: PPUSH
22133: LD_INT 55
22135: PPUSH
22136: CALL_OW 428
22140: PPUSH
22141: LD_INT 3
22143: PPUSH
22144: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
22148: LD_INT 115
22150: PPUSH
22151: LD_INT 65
22153: PPUSH
22154: CALL_OW 428
22158: PPUSH
22159: LD_INT 3
22161: PPUSH
22162: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
22166: LD_STRING M2a-out
22168: PPUSH
22169: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
22173: LD_EXP 58
22177: PPUSH
22178: LD_INT 2
22180: PPUSH
22181: CALL_OW 120
// wait ( 0 0$3 ) ;
22185: LD_INT 105
22187: PPUSH
22188: CALL_OW 67
// hasMuchin := false ;
22192: LD_ADDR_EXP 30
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
// wait ( 2 2$00 ) ;
22200: LD_INT 4200
22202: PPUSH
22203: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22207: LD_INT 35
22209: PPUSH
22210: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22214: LD_EXP 58
22218: PPUSH
22219: CALL_OW 314
22223: NOT
22224: IFFALSE 22240
// ComMoveUnit ( ruDisturb , Heike ) ;
22226: LD_EXP 58
22230: PPUSH
22231: LD_EXP 38
22235: PPUSH
22236: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22240: LD_EXP 38
22244: PPUSH
22245: LD_EXP 58
22249: PPUSH
22250: CALL_OW 296
22254: PUSH
22255: LD_INT 6
22257: LESS
22258: PUSH
22259: LD_EXP 58
22263: PPUSH
22264: CALL_OW 302
22268: AND
22269: IFFALSE 22207
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22271: LD_EXP 14
22275: PPUSH
22276: LD_INT 22
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 91
22288: PUSH
22289: LD_EXP 58
22293: PUSH
22294: LD_INT 8
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: LD_INT 25
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 25
22317: PUSH
22318: LD_INT 11
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 25
22327: PUSH
22328: LD_INT 32
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 25
22337: PUSH
22338: LD_INT 34
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: LIST
22356: PPUSH
22357: CALL_OW 72
22361: IFFALSE 22371
// isAlarm := true ;
22363: LD_ADDR_EXP 17
22367: PUSH
22368: LD_INT 1
22370: ST_TO_ADDR
// if isAlarm then
22371: LD_EXP 17
22375: IFFALSE 22379
// exit ;
22377: GO 25388
// DialogueOn ;
22379: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
22383: LD_EXP 58
22387: PPUSH
22388: LD_STRING DMcn-Interrupt-1
22390: PPUSH
22391: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
22395: LD_EXP 58
22399: PPUSH
22400: LD_STRING DMcn-Interrupt-2
22402: PPUSH
22403: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
22407: LD_INT 176
22409: PPUSH
22410: LD_INT 54
22412: PPUSH
22413: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
22417: LD_INT 176
22419: PPUSH
22420: LD_INT 54
22422: PPUSH
22423: LD_INT 2
22425: PPUSH
22426: LD_INT 6
22428: NEG
22429: PPUSH
22430: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
22434: LD_INT 10
22436: PPUSH
22437: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
22441: LD_EXP 58
22445: PPUSH
22446: LD_STRING DMcn-Interrupt-b-3
22448: PPUSH
22449: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
22453: LD_EXP 38
22457: PPUSH
22458: LD_STRING DH-Interrupt-b-4
22460: PPUSH
22461: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
22465: LD_EXP 58
22469: PPUSH
22470: LD_STRING DMcn-Interrupt-b-5
22472: PPUSH
22473: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
22477: LD_EXP 38
22481: PPUSH
22482: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
22486: LD_INT 176
22488: PPUSH
22489: LD_INT 54
22491: PPUSH
22492: LD_INT 2
22494: PPUSH
22495: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
22499: LD_EXP 58
22503: PPUSH
22504: LD_STRING DMcn-Interrupt-b-6
22506: PPUSH
22507: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
22511: LD_EXP 38
22515: PPUSH
22516: LD_STRING DH-Interrupt-b-7
22518: PPUSH
22519: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
22523: LD_EXP 58
22527: PPUSH
22528: LD_STRING DMcn-Interrupt-b-8
22530: PPUSH
22531: CALL_OW 88
// DialogueOff ;
22535: CALL_OW 7
// Query ( MuchinInfo ) ;
22539: LD_STRING MuchinInfo
22541: PPUSH
22542: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
22546: LD_STRING M2b
22548: PPUSH
22549: CALL_OW 337
// hasMuchin := true ;
22553: LD_ADDR_EXP 30
22557: PUSH
22558: LD_INT 1
22560: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22561: LD_INT 35
22563: PPUSH
22564: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22568: LD_EXP 58
22572: PPUSH
22573: LD_EXP 38
22577: PPUSH
22578: CALL_OW 296
22582: PUSH
22583: LD_INT 6
22585: GREATER
22586: IFFALSE 22602
// ComMoveUnit ( ruDisturb , Heike ) ;
22588: LD_EXP 58
22592: PPUSH
22593: LD_EXP 38
22597: PPUSH
22598: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22602: LD_EXP 14
22606: PPUSH
22607: LD_INT 22
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 91
22619: PUSH
22620: LD_EXP 58
22624: PUSH
22625: LD_INT 8
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: LD_INT 25
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 25
22648: PUSH
22649: LD_INT 11
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 25
22658: PUSH
22659: LD_INT 32
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 25
22668: PUSH
22669: LD_INT 34
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: PPUSH
22688: CALL_OW 72
22692: IFFALSE 22704
// begin isAlarm := true ;
22694: LD_ADDR_EXP 17
22698: PUSH
22699: LD_INT 1
22701: ST_TO_ADDR
// exit ;
22702: GO 25388
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
22704: LD_EXP 38
22708: PPUSH
22709: LD_INT 61
22711: PPUSH
22712: CALL_OW 296
22716: PUSH
22717: LD_INT 4
22719: LESS
22720: IFFALSE 22561
// InGameOn ;
22722: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
22726: LD_INT 173
22728: PPUSH
22729: LD_INT 54
22731: PPUSH
22732: LD_INT 2
22734: PPUSH
22735: LD_INT 8
22737: NEG
22738: PPUSH
22739: CALL_OW 330
// SetSide ( Heike , 3 ) ;
22743: LD_EXP 38
22747: PPUSH
22748: LD_INT 3
22750: PPUSH
22751: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
22755: LD_EXP 38
22759: PPUSH
22760: LD_INT 61
22762: PPUSH
22763: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
22767: LD_EXP 58
22771: PPUSH
22772: LD_INT 61
22774: PPUSH
22775: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
22779: LD_EXP 45
22783: PUSH
22784: LD_EXP 14
22788: IN
22789: PUSH
22790: LD_EXP 45
22794: PPUSH
22795: LD_INT 61
22797: PPUSH
22798: CALL_OW 296
22802: PUSH
22803: LD_INT 12
22805: LESS
22806: AND
22807: IFFALSE 22851
// begin SetSide ( Markov , 3 ) ;
22809: LD_EXP 45
22813: PPUSH
22814: LD_INT 3
22816: PPUSH
22817: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
22821: LD_EXP 45
22825: PPUSH
22826: LD_INT 61
22828: PPUSH
22829: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
22833: LD_INT 35
22835: PPUSH
22836: CALL_OW 67
// until IsInUnit ( Markov ) ;
22840: LD_EXP 45
22844: PPUSH
22845: CALL_OW 310
22849: IFFALSE 22833
// end ; repeat wait ( 0 0$1 ) ;
22851: LD_INT 35
22853: PPUSH
22854: CALL_OW 67
// until IsInUnit ( Heike ) ;
22858: LD_EXP 38
22862: PPUSH
22863: CALL_OW 310
22867: IFFALSE 22851
// SetClass ( Heike , class_mechanic ) ;
22869: LD_EXP 38
22873: PPUSH
22874: LD_INT 3
22876: PPUSH
22877: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
22881: LD_INT 61
22883: PPUSH
22884: LD_INT 21
22886: PPUSH
22887: LD_INT 3
22889: PPUSH
22890: LD_INT 3
22892: PPUSH
22893: LD_INT 43
22895: PPUSH
22896: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
22900: LD_EXP 31
22904: PUSH
22905: LD_EXP 45
22909: PUSH
22910: LD_EXP 14
22914: IN
22915: PUSH
22916: LD_EXP 45
22920: PPUSH
22921: CALL_OW 310
22925: PUSH
22926: LD_INT 61
22928: EQUAL
22929: OR
22930: AND
22931: IFFALSE 23399
// begin wait ( 0 0$5 ) ;
22933: LD_INT 175
22935: PPUSH
22936: CALL_OW 67
// SetSide ( Heike , 2 ) ;
22940: LD_EXP 38
22944: PPUSH
22945: LD_INT 2
22947: PPUSH
22948: CALL_OW 235
// SetSide ( Markov , 2 ) ;
22952: LD_EXP 45
22956: PPUSH
22957: LD_INT 2
22959: PPUSH
22960: CALL_OW 235
// if not Markov in heikeSquad then
22964: LD_EXP 45
22968: PUSH
22969: LD_EXP 14
22973: IN
22974: NOT
22975: IFFALSE 22997
// heikeSquad := Join ( heikeSquad , Markov ) ;
22977: LD_ADDR_EXP 14
22981: PUSH
22982: LD_EXP 14
22986: PPUSH
22987: LD_EXP 45
22991: PPUSH
22992: CALL 64076 0 2
22996: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
22997: LD_EXP 45
23001: PPUSH
23002: LD_STRING DMar-Factory-1
23004: PPUSH
23005: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
23009: LD_INT 61
23011: PPUSH
23012: LD_INT 99
23014: PPUSH
23015: CALL_OW 329
// game_speed := 4 ;
23019: LD_ADDR_OWVAR 65
23023: PUSH
23024: LD_INT 4
23026: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
23027: LD_EXP 58
23031: PPUSH
23032: CALL_OW 122
// ComExitBuilding ( Markov ) ;
23036: LD_EXP 45
23040: PPUSH
23041: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
23045: LD_EXP 58
23049: PPUSH
23050: LD_INT 171
23052: PPUSH
23053: LD_INT 51
23055: PPUSH
23056: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
23060: LD_EXP 45
23064: PPUSH
23065: LD_INT 167
23067: PPUSH
23068: LD_INT 50
23070: PPUSH
23071: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
23075: LD_EXP 45
23079: PPUSH
23080: LD_EXP 58
23084: PPUSH
23085: CALL_OW 179
// wait ( 0 0$5 ) ;
23089: LD_INT 175
23091: PPUSH
23092: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
23096: LD_EXP 45
23100: PPUSH
23101: LD_STRING DMar-Factory-2
23103: PPUSH
23104: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
23108: LD_ADDR_VAR 0 2
23112: PUSH
23113: LD_INT 22
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 33
23125: PUSH
23126: LD_INT 3
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PPUSH
23137: CALL_OW 69
23141: PUSH
23142: LD_INT 1
23144: ARRAY
23145: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
23146: LD_EXP 58
23150: PPUSH
23151: LD_VAR 0 2
23155: PPUSH
23156: CALL_OW 119
// async ;
23160: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
23161: LD_EXP 58
23165: PPUSH
23166: LD_STRING DMcn-Factory-3
23168: PPUSH
23169: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
23173: LD_VAR 0 2
23177: PPUSH
23178: LD_EXP 58
23182: PPUSH
23183: CALL_OW 115
// sync ;
23187: SYNC
// wait ( 0 0$1 ) ;
23188: LD_INT 35
23190: PPUSH
23191: CALL_OW 67
// KillUnit ( ruDisturb ) ;
23195: LD_EXP 58
23199: PPUSH
23200: CALL_OW 66
// SetSide ( veh , 7 ) ;
23204: LD_VAR 0 2
23208: PPUSH
23209: LD_INT 7
23211: PPUSH
23212: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
23216: LD_VAR 0 2
23220: PPUSH
23221: LD_INT 84
23223: PPUSH
23224: LD_INT 38
23226: PPUSH
23227: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
23231: LD_EXP 59
23235: PUSH
23236: LD_INT 1
23238: ARRAY
23239: PPUSH
23240: CALL_OW 258
23244: PUSH
23245: LD_INT 1
23247: EQUAL
23248: IFFALSE 23268
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
23250: LD_EXP 59
23254: PUSH
23255: LD_INT 1
23257: ARRAY
23258: PPUSH
23259: LD_STRING DRum-Factory-4
23261: PPUSH
23262: CALL_OW 88
23266: GO 23284
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
23268: LD_EXP 59
23272: PUSH
23273: LD_INT 1
23275: ARRAY
23276: PPUSH
23277: LD_STRING DRuf-Factory-4
23279: PPUSH
23280: CALL_OW 88
// wait ( 0 0$1 ) ;
23284: LD_INT 35
23286: PPUSH
23287: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
23291: LD_EXP 59
23295: PPUSH
23296: LD_INT 26
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PPUSH
23306: CALL_OW 72
23310: PUSH
23311: LD_INT 1
23313: ARRAY
23314: PPUSH
23315: LD_STRING DRum-Factory-6
23317: PPUSH
23318: CALL_OW 88
// wait ( 0 0$2 ) ;
23322: LD_INT 70
23324: PPUSH
23325: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
23329: LD_EXP 38
23333: PPUSH
23334: LD_INT 33
23336: PPUSH
23337: CALL_OW 336
// ComExitBuilding ( Heike ) ;
23341: LD_EXP 38
23345: PPUSH
23346: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23350: LD_EXP 38
23354: PPUSH
23355: LD_INT 168
23357: PPUSH
23358: LD_INT 54
23360: PPUSH
23361: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23365: LD_INT 173
23367: PPUSH
23368: LD_INT 54
23370: PPUSH
23371: LD_INT 2
23373: PPUSH
23374: CALL_OW 331
// InGameOff ;
23378: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
23382: LD_STRING M2b-out
23384: PPUSH
23385: CALL_OW 337
// hasMuchin := false ;
23389: LD_ADDR_EXP 30
23393: PUSH
23394: LD_INT 0
23396: ST_TO_ADDR
// exit ;
23397: GO 25388
// end ; wait ( 0 0$5 ) ;
23399: LD_INT 175
23401: PPUSH
23402: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
23406: LD_INT 61
23408: PPUSH
23409: LD_INT 99
23411: PPUSH
23412: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
23416: LD_EXP 45
23420: PUSH
23421: LD_EXP 14
23425: IN
23426: PUSH
23427: LD_EXP 45
23431: PPUSH
23432: CALL_OW 255
23436: PUSH
23437: LD_INT 3
23439: EQUAL
23440: AND
23441: IFFALSE 23464
// begin SetSide ( Markov , 2 ) ;
23443: LD_EXP 45
23447: PPUSH
23448: LD_INT 2
23450: PPUSH
23451: CALL_OW 235
// ComExitBuilding ( Markov ) ;
23455: LD_EXP 45
23459: PPUSH
23460: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
23464: LD_EXP 38
23468: PPUSH
23469: LD_INT 2
23471: PPUSH
23472: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
23476: LD_EXP 38
23480: PPUSH
23481: LD_INT 33
23483: PPUSH
23484: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
23488: LD_EXP 58
23492: PPUSH
23493: CALL_OW 122
// ComExitBuilding ( Heike ) ;
23497: LD_EXP 38
23501: PPUSH
23502: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23506: LD_EXP 38
23510: PPUSH
23511: LD_INT 168
23513: PPUSH
23514: LD_INT 54
23516: PPUSH
23517: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23521: LD_INT 173
23523: PPUSH
23524: LD_INT 54
23526: PPUSH
23527: LD_INT 2
23529: PPUSH
23530: CALL_OW 331
// InGameOff ;
23534: CALL_OW 9
// wait ( 3 ) ;
23538: LD_INT 3
23540: PPUSH
23541: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
23545: LD_EXP 58
23549: PPUSH
23550: LD_INT 2
23552: PPUSH
23553: CALL_OW 120
// wait ( 0 0$3 ) ;
23557: LD_INT 105
23559: PPUSH
23560: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
23564: LD_STRING M2b-out
23566: PPUSH
23567: CALL_OW 337
// hasMuchin := false ;
23571: LD_ADDR_EXP 30
23575: PUSH
23576: LD_INT 0
23578: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23579: LD_INT 4200
23581: PPUSH
23582: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23586: LD_INT 35
23588: PPUSH
23589: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23593: LD_EXP 58
23597: PPUSH
23598: CALL_OW 314
23602: NOT
23603: IFFALSE 23619
// ComMoveUnit ( ruDisturb , Heike ) ;
23605: LD_EXP 58
23609: PPUSH
23610: LD_EXP 38
23614: PPUSH
23615: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
23619: LD_EXP 38
23623: PPUSH
23624: LD_EXP 58
23628: PPUSH
23629: CALL_OW 296
23633: PUSH
23634: LD_INT 2
23636: LESS
23637: PUSH
23638: LD_EXP 58
23642: PPUSH
23643: CALL_OW 302
23647: AND
23648: IFFALSE 23586
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23650: LD_EXP 14
23654: PPUSH
23655: LD_INT 22
23657: PUSH
23658: LD_INT 2
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 91
23667: PUSH
23668: LD_EXP 58
23672: PUSH
23673: LD_INT 8
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: LD_INT 25
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 25
23696: PUSH
23697: LD_INT 11
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 25
23706: PUSH
23707: LD_INT 32
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 25
23716: PUSH
23717: LD_INT 34
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: LIST
23735: PPUSH
23736: CALL_OW 72
23740: IFFALSE 23750
// isAlarm := true ;
23742: LD_ADDR_EXP 17
23746: PUSH
23747: LD_INT 1
23749: ST_TO_ADDR
// if isAlarm then
23750: LD_EXP 17
23754: IFFALSE 23758
// exit ;
23756: GO 25388
// ComTurnUnit ( Heike , ruDisturb ) ;
23758: LD_EXP 38
23762: PPUSH
23763: LD_EXP 58
23767: PPUSH
23768: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
23772: LD_EXP 58
23776: PPUSH
23777: LD_EXP 38
23781: PPUSH
23782: CALL_OW 119
// wait ( 3 ) ;
23786: LD_INT 3
23788: PPUSH
23789: CALL_OW 67
// for i := 1 to 3 do
23793: LD_ADDR_VAR 0 1
23797: PUSH
23798: DOUBLE
23799: LD_INT 1
23801: DEC
23802: ST_TO_ADDR
23803: LD_INT 3
23805: PUSH
23806: FOR_TO
23807: IFFALSE 23824
// CreateCratesArea ( 5 , cratesArea , false ) ;
23809: LD_INT 5
23811: PPUSH
23812: LD_INT 58
23814: PPUSH
23815: LD_INT 0
23817: PPUSH
23818: CALL_OW 55
23822: GO 23806
23824: POP
23825: POP
// uc_side := 3 ;
23826: LD_ADDR_OWVAR 20
23830: PUSH
23831: LD_INT 3
23833: ST_TO_ADDR
// uc_nation := nation_russian ;
23834: LD_ADDR_OWVAR 21
23838: PUSH
23839: LD_INT 3
23841: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
23842: LD_INT 21
23844: PPUSH
23845: LD_INT 3
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: LD_INT 51
23853: PPUSH
23854: LD_INT 100
23856: PPUSH
23857: CALL 31642 0 5
// veh := CreateVehicle ;
23861: LD_ADDR_VAR 0 2
23865: PUSH
23866: CALL_OW 45
23870: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
23871: LD_VAR 0 2
23875: PPUSH
23876: LD_INT 104
23878: PPUSH
23879: LD_INT 41
23881: PPUSH
23882: LD_INT 3
23884: PPUSH
23885: LD_INT 0
23887: PPUSH
23888: CALL 66216 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
23892: LD_VAR 0 2
23896: PPUSH
23897: LD_INT 1
23899: PPUSH
23900: LD_INT 100
23902: PPUSH
23903: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
23907: CALL_OW 44
23911: PPUSH
23912: LD_VAR 0 2
23916: PPUSH
23917: CALL_OW 52
// DialogueOn ;
23921: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23925: LD_EXP 58
23929: PPUSH
23930: LD_STRING DMcn-Interrupt-1
23932: PPUSH
23933: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23937: LD_EXP 58
23941: PPUSH
23942: LD_STRING DMcn-Interrupt-2
23944: PPUSH
23945: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
23949: LD_EXP 58
23953: PPUSH
23954: LD_STRING DMcn-Interrupt-c-3
23956: PPUSH
23957: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
23961: LD_INT 101
23963: PPUSH
23964: LD_INT 38
23966: PPUSH
23967: LD_INT 2
23969: PPUSH
23970: LD_INT 10
23972: NEG
23973: PPUSH
23974: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
23978: LD_INT 101
23980: PPUSH
23981: LD_INT 38
23983: PPUSH
23984: CALL_OW 84
// wait ( 0 0$2 ) ;
23988: LD_INT 70
23990: PPUSH
23991: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
23995: LD_INT 101
23997: PPUSH
23998: LD_INT 38
24000: PPUSH
24001: LD_INT 2
24003: PPUSH
24004: CALL_OW 331
// RemoveUnit ( veh ) ;
24008: LD_VAR 0 2
24012: PPUSH
24013: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
24017: LD_EXP 58
24021: PPUSH
24022: LD_STRING DMcn-Interrupt-c-4
24024: PPUSH
24025: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
24029: LD_EXP 38
24033: PPUSH
24034: LD_STRING DH-Interrupt-c-5
24036: PPUSH
24037: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
24041: LD_EXP 58
24045: PPUSH
24046: LD_STRING DMcn-Interrupt-c-6
24048: PPUSH
24049: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
24053: LD_EXP 38
24057: PPUSH
24058: LD_STRING DH-Interrupt-c-7
24060: PPUSH
24061: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
24065: LD_EXP 58
24069: PPUSH
24070: LD_STRING DMcn-Interrupt-c-8
24072: PPUSH
24073: CALL_OW 88
// DialogueOff ;
24077: CALL_OW 7
// hasMuchin := true ;
24081: LD_ADDR_EXP 30
24085: PUSH
24086: LD_INT 1
24088: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24089: LD_STRING MuchinInfo
24091: PPUSH
24092: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
24096: LD_STRING M2c
24098: PPUSH
24099: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
24103: LD_INT 35
24105: PPUSH
24106: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24110: LD_EXP 58
24114: PPUSH
24115: LD_EXP 38
24119: PPUSH
24120: CALL_OW 296
24124: PUSH
24125: LD_INT 6
24127: GREATER
24128: IFFALSE 24144
// ComMoveUnit ( ruDisturb , Heike ) ;
24130: LD_EXP 58
24134: PPUSH
24135: LD_EXP 38
24139: PPUSH
24140: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24144: LD_EXP 14
24148: PPUSH
24149: LD_INT 22
24151: PUSH
24152: LD_INT 2
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 91
24161: PUSH
24162: LD_EXP 58
24166: PUSH
24167: LD_INT 8
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 25
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 25
24190: PUSH
24191: LD_INT 11
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 25
24200: PUSH
24201: LD_INT 32
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 25
24210: PUSH
24211: LD_INT 34
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: PPUSH
24230: CALL_OW 72
24234: IFFALSE 24246
// begin isAlarm := true ;
24236: LD_ADDR_EXP 17
24240: PUSH
24241: LD_INT 1
24243: ST_TO_ADDR
// exit ;
24244: GO 25388
// end ; until UnitFilter ( heikeSquad , [ f_dist , ruOutpost0 , 6 ] ) and GetDistUnits ( Heike , ruOutpost0 ) < 6 ;
24246: LD_EXP 14
24250: PPUSH
24251: LD_INT 91
24253: PUSH
24254: LD_INT 6
24256: PUSH
24257: LD_INT 6
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: PPUSH
24265: CALL_OW 72
24269: PUSH
24270: LD_EXP 38
24274: PPUSH
24275: LD_INT 6
24277: PPUSH
24278: CALL_OW 296
24282: PUSH
24283: LD_INT 6
24285: LESS
24286: AND
24287: IFFALSE 24103
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
24289: LD_ADDR_VAR 0 3
24293: PUSH
24294: LD_EXP 14
24298: PUSH
24299: LD_EXP 38
24303: UNION
24304: PPUSH
24305: LD_INT 25
24307: PUSH
24308: LD_INT 33
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 91
24317: PUSH
24318: LD_INT 6
24320: PUSH
24321: LD_INT 12
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PPUSH
24333: CALL_OW 72
24337: ST_TO_ADDR
// for i in tmp do
24338: LD_ADDR_VAR 0 1
24342: PUSH
24343: LD_VAR 0 3
24347: PUSH
24348: FOR_IN
24349: IFFALSE 24380
// begin SetSide ( i , 3 ) ;
24351: LD_VAR 0 1
24355: PPUSH
24356: LD_INT 3
24358: PPUSH
24359: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
24363: LD_VAR 0 1
24367: PPUSH
24368: LD_INT 101
24370: PPUSH
24371: LD_INT 38
24373: PPUSH
24374: CALL_OW 111
// end ;
24378: GO 24348
24380: POP
24381: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
24382: LD_EXP 58
24386: PPUSH
24387: LD_INT 104
24389: PPUSH
24390: LD_INT 37
24392: PPUSH
24393: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
24397: LD_EXP 58
24401: PPUSH
24402: LD_EXP 38
24406: PPUSH
24407: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
24411: LD_INT 35
24413: PPUSH
24414: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
24418: LD_ADDR_VAR 0 4
24422: PUSH
24423: LD_INT 58
24425: PPUSH
24426: CALL_OW 435
24430: ST_TO_ADDR
// for i in tmp do
24431: LD_ADDR_VAR 0 1
24435: PUSH
24436: LD_VAR 0 3
24440: PUSH
24441: FOR_IN
24442: IFFALSE 24485
// if not HasTask ( i ) then
24444: LD_VAR 0 1
24448: PPUSH
24449: CALL_OW 314
24453: NOT
24454: IFFALSE 24483
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
24456: LD_VAR 0 1
24460: PPUSH
24461: LD_VAR 0 4
24465: PUSH
24466: LD_INT 1
24468: ARRAY
24469: PPUSH
24470: LD_VAR 0 4
24474: PUSH
24475: LD_INT 2
24477: ARRAY
24478: PPUSH
24479: CALL_OW 117
24483: GO 24441
24485: POP
24486: POP
// until not cr ;
24487: LD_VAR 0 4
24491: NOT
24492: IFFALSE 24411
// wait ( 0 0$2 ) ;
24494: LD_INT 70
24496: PPUSH
24497: CALL_OW 67
// for i in tmp do
24501: LD_ADDR_VAR 0 1
24505: PUSH
24506: LD_VAR 0 3
24510: PUSH
24511: FOR_IN
24512: IFFALSE 24528
// SetSide ( i , 2 ) ;
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_INT 2
24521: PPUSH
24522: CALL_OW 235
24526: GO 24511
24528: POP
24529: POP
// if Kaia in tmp then
24530: LD_EXP 43
24534: PUSH
24535: LD_VAR 0 3
24539: IN
24540: IFFALSE 24810
// begin InGameOn ;
24542: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
24546: LD_EXP 43
24550: PPUSH
24551: LD_EXP 58
24555: PPUSH
24556: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
24560: LD_EXP 58
24564: PPUSH
24565: LD_EXP 43
24569: PPUSH
24570: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
24574: LD_EXP 43
24578: PPUSH
24579: LD_EXP 58
24583: PPUSH
24584: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
24588: LD_EXP 43
24592: PPUSH
24593: LD_STRING DK-Assassin-1
24595: PPUSH
24596: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
24600: LD_EXP 58
24604: PPUSH
24605: LD_STRING DMcn-Assassin-2
24607: PPUSH
24608: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
24612: LD_EXP 43
24616: PPUSH
24617: LD_STRING DK-Assassin-3
24619: PPUSH
24620: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
24624: LD_EXP 58
24628: PPUSH
24629: LD_STRING DMcn-Assassin-4
24631: PPUSH
24632: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
24636: LD_EXP 43
24640: PPUSH
24641: LD_STRING DK-Assassin-5
24643: PPUSH
24644: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
24648: LD_EXP 58
24652: PPUSH
24653: LD_STRING DMcn-Assassin-6
24655: PPUSH
24656: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
24660: LD_EXP 43
24664: PUSH
24665: LD_EXP 58
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PPUSH
24674: LD_INT 6
24676: PPUSH
24677: CALL_OW 120
// wait ( 0 0$5 ) ;
24681: LD_INT 175
24683: PPUSH
24684: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
24688: LD_EXP 43
24692: PPUSH
24693: LD_STRING DK-Assassin-7
24695: PPUSH
24696: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
24700: LD_EXP 58
24704: PPUSH
24705: LD_STRING DMcn-Assassin-8
24707: PPUSH
24708: CALL_OW 88
// wait ( 0 0$0.3 ) ;
24712: LD_INT 10
24714: PPUSH
24715: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
24719: LD_EXP 43
24723: PPUSH
24724: LD_STRING DK-Assassin-9
24726: PPUSH
24727: CALL_OW 88
// wait ( 0 0$2 ) ;
24731: LD_INT 70
24733: PPUSH
24734: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
24738: LD_EXP 43
24742: PPUSH
24743: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
24747: LD_EXP 58
24751: PPUSH
24752: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
24756: LD_EXP 43
24760: PPUSH
24761: LD_EXP 38
24765: PPUSH
24766: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
24770: LD_EXP 43
24774: PPUSH
24775: LD_STRING DK-Assasin-10
24777: PPUSH
24778: CALL_OW 88
// InGameOff ;
24782: CALL_OW 9
// ChangeMissionObjectives ( M2c-out ) ;
24786: LD_STRING M2c-out
24788: PPUSH
24789: CALL_OW 337
// wait ( 0 0$3 ) ;
24793: LD_INT 105
24795: PPUSH
24796: CALL_OW 67
// hasMuchin := false ;
24800: LD_ADDR_EXP 30
24804: PUSH
24805: LD_INT 0
24807: ST_TO_ADDR
// exit ;
24808: GO 25388
// end ; ChangeMissionObjectives ( M2c-out ) ;
24810: LD_STRING M2c-out
24812: PPUSH
24813: CALL_OW 337
// InGameOn ;
24817: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
24821: LD_EXP 58
24825: PPUSH
24826: LD_STRING DMcn-Fail-1
24828: PPUSH
24829: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
24833: LD_VAR 0 3
24837: PPUSH
24838: LD_INT 114
24840: PPUSH
24841: LD_INT 17
24843: PPUSH
24844: CALL_OW 111
// wait ( 0 0$1 ) ;
24848: LD_INT 35
24850: PPUSH
24851: CALL_OW 67
// async ;
24855: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
24856: LD_EXP 58
24860: PPUSH
24861: LD_EXP 38
24865: PPUSH
24866: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
24870: LD_EXP 58
24874: PPUSH
24875: LD_STRING DMcn-Fail-2
24877: PPUSH
24878: CALL_OW 88
// ComStop ( Heike ) ;
24882: LD_EXP 38
24886: PPUSH
24887: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
24891: LD_EXP 38
24895: PPUSH
24896: LD_EXP 58
24900: PPUSH
24901: CALL_OW 179
// sync ;
24905: SYNC
// Say ( Heike , DH-Fail-3 ) ;
24906: LD_EXP 38
24910: PPUSH
24911: LD_STRING DH-Fail-3
24913: PPUSH
24914: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
24918: LD_EXP 58
24922: PPUSH
24923: LD_STRING DMcn-Fail-4
24925: PPUSH
24926: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
24930: LD_EXP 38
24934: PUSH
24935: LD_EXP 58
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PPUSH
24944: LD_INT 41
24946: PPUSH
24947: LD_INT 19
24949: PPUSH
24950: CALL_OW 111
// wait ( 0 0$2 ) ;
24954: LD_INT 70
24956: PPUSH
24957: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
24961: LD_EXP 58
24965: PPUSH
24966: LD_INT 40
24968: PPUSH
24969: LD_INT 19
24971: PPUSH
24972: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
24976: LD_EXP 38
24980: PPUSH
24981: LD_INT 43
24983: PPUSH
24984: LD_INT 21
24986: PPUSH
24987: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
24991: LD_EXP 58
24995: PPUSH
24996: LD_EXP 38
25000: PPUSH
25001: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
25005: LD_EXP 38
25009: PPUSH
25010: LD_EXP 58
25014: PPUSH
25015: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
25019: LD_INT 3
25021: PPUSH
25022: CALL_OW 427
// wait ( 0 0$2 ) ;
25026: LD_INT 70
25028: PPUSH
25029: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
25033: LD_EXP 58
25037: PPUSH
25038: LD_STRING DMcn-Fail-5
25040: PPUSH
25041: CALL_OW 88
// wait ( 0 0$2 ) ;
25045: LD_INT 70
25047: PPUSH
25048: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
25052: LD_EXP 58
25056: PPUSH
25057: LD_STRING DMcn-Fail-6
25059: PPUSH
25060: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
25064: LD_INT 35
25066: PPUSH
25067: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
25071: LD_EXP 38
25075: PPUSH
25076: LD_INT 43
25078: PPUSH
25079: LD_INT 21
25081: PPUSH
25082: CALL_OW 307
25086: IFFALSE 25064
// case Query ( MuchinQuestion ) of 1 :
25088: LD_STRING MuchinQuestion
25090: PPUSH
25091: CALL_OW 97
25095: PUSH
25096: LD_INT 1
25098: DOUBLE
25099: EQUAL
25100: IFTRUE 25104
25102: GO 25204
25104: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
25105: LD_EXP 58
25109: PPUSH
25110: LD_STRING DMcn-Fail-7
25112: PPUSH
25113: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
25117: LD_EXP 38
25121: PPUSH
25122: LD_STRING DH-Fail-8
25124: PPUSH
25125: CALL_OW 88
// wait ( 0 0$0.3 ) ;
25129: LD_INT 10
25131: PPUSH
25132: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
25136: LD_EXP 38
25140: PPUSH
25141: LD_STRING DH-Fail-9
25143: PPUSH
25144: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
25148: LD_EXP 38
25152: PPUSH
25153: LD_STRING DH-Fail-10
25155: PPUSH
25156: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
25160: LD_EXP 58
25164: PPUSH
25165: LD_STRING DMcn-Fail-11
25167: PPUSH
25168: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
25172: LD_EXP 58
25176: PPUSH
25177: LD_EXP 38
25181: PPUSH
25182: CALL_OW 115
// wait ( 0 0$2 ) ;
25186: LD_INT 70
25188: PPUSH
25189: CALL_OW 67
// KillUnit ( Heike ) ;
25193: LD_EXP 38
25197: PPUSH
25198: CALL_OW 66
// end ; 2 :
25202: GO 25384
25204: LD_INT 2
25206: DOUBLE
25207: EQUAL
25208: IFTRUE 25212
25210: GO 25383
25212: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
25213: LD_EXP 38
25217: PPUSH
25218: LD_STRING DH-Fail-a-8
25220: PPUSH
25221: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
25225: LD_EXP 38
25229: PPUSH
25230: LD_STRING DH-Fail-a-9
25232: PPUSH
25233: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
25237: LD_EXP 58
25241: PPUSH
25242: LD_STRING DH-Fail-10
25244: PPUSH
25245: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
25249: LD_EXP 38
25253: PPUSH
25254: LD_STRING DH-Fail-a-11
25256: PPUSH
25257: CALL_OW 88
// async ;
25261: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
25262: LD_EXP 58
25266: PPUSH
25267: LD_EXP 38
25271: PPUSH
25272: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
25276: LD_EXP 58
25280: PPUSH
25281: LD_EXP 38
25285: PPUSH
25286: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
25290: LD_EXP 58
25294: PPUSH
25295: LD_STRING DH-Fail-12
25297: PPUSH
25298: CALL_OW 88
// sync ;
25302: SYNC
// wait ( 0 0$1 ) ;
25303: LD_INT 35
25305: PPUSH
25306: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
25310: LD_EXP 38
25314: PPUSH
25315: LD_STRING DH-Fail-a-13
25317: PPUSH
25318: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
25322: LD_EXP 58
25326: PPUSH
25327: LD_INT 100
25329: PPUSH
25330: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
25334: LD_EXP 58
25338: PPUSH
25339: LD_STRING DMcn-Fail-a-14
25341: PPUSH
25342: CALL_OW 91
// KillUnit ( ruDisturb ) ;
25346: LD_EXP 58
25350: PPUSH
25351: CALL_OW 66
// wait ( 0 0$1 ) ;
25355: LD_INT 35
25357: PPUSH
25358: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
25362: LD_EXP 38
25366: PPUSH
25367: LD_STRING DH-Fail-a-15
25369: PPUSH
25370: CALL_OW 88
// YouLost ( FailMuchin ) ;
25374: LD_STRING FailMuchin
25376: PPUSH
25377: CALL_OW 104
// end ; end ;
25381: GO 25384
25383: POP
// InGameOff ;
25384: CALL_OW 9
// end ; end_of_file
25388: PPOPN 4
25390: END
// every 0 0$1 marked gameStartEvent do
25391: GO 25393
25393: DISABLE
// begin enable ;
25394: ENABLE
// if not contactWithAmerican then
25395: LD_EXP 25
25399: NOT
25400: IFFALSE 25445
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
25402: LD_ADDR_OWVAR 47
25406: PUSH
25407: LD_STRING #X108-1
25409: PUSH
25410: LD_INT 22
25412: PUSH
25413: LD_INT 5
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 21
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 69
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: ST_TO_ADDR
25443: GO 25525
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , #X108-2 , UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ] ;
25445: LD_ADDR_OWVAR 47
25449: PUSH
25450: LD_STRING #X108-1
25452: PUSH
25453: LD_INT 22
25455: PUSH
25456: LD_INT 5
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 21
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PPUSH
25477: CALL_OW 69
25481: PUSH
25482: LD_STRING #X108-2
25484: PUSH
25485: LD_EXP 50
25489: PPUSH
25490: LD_INT 22
25492: PUSH
25493: LD_INT 4
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 21
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PPUSH
25514: CALL_OW 72
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: ST_TO_ADDR
// end ; end_of_file
25525: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
25526: LD_EXP 38
25530: PPUSH
25531: LD_INT 59
25533: PPUSH
25534: CALL_OW 308
25538: IFFALSE 25660
25540: GO 25542
25542: DISABLE
// begin Query ( FinalInfo ) ;
25543: LD_STRING FinalInfo
25545: PPUSH
25546: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
25550: LD_INT 59
25552: PPUSH
25553: LD_INT 1
25555: PPUSH
25556: CALL_OW 424
// end_the_mission_allowed := true ;
25560: LD_ADDR_OWVAR 57
25564: PUSH
25565: LD_INT 1
25567: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25568: LD_INT 35
25570: PPUSH
25571: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
25575: LD_INT 22
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 21
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 95
25597: PUSH
25598: LD_INT 59
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: LIST
25609: PPUSH
25610: CALL_OW 69
25614: PPUSH
25615: CALL 28729 0 1
25619: PUSH
25620: LD_INT 22
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 21
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PPUSH
25644: CALL_OW 69
25648: PPUSH
25649: CALL 28729 0 1
25653: EQUAL
25654: IFFALSE 25568
// EndMission ;
25656: CALL 25668 0 0
// end ;
25660: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
25661: CALL 25668 0 0
// end ;
25665: PPOPN 1
25667: END
// function EndMission ; begin
25668: LD_INT 0
25670: PPUSH
// if not IsInArea ( Heike , finalArea ) then
25671: LD_EXP 38
25675: PPUSH
25676: LD_INT 59
25678: PPUSH
25679: CALL_OW 308
25683: NOT
25684: IFFALSE 25695
// begin Query ( HeikeOutOfArea ) ;
25686: LD_STRING HeikeOutOfArea
25688: PPUSH
25689: CALL_OW 97
// exit ;
25693: GO 26436
// end ; if not IsOk ( Heike ) then
25695: LD_EXP 38
25699: PPUSH
25700: CALL_OW 302
25704: NOT
25705: IFFALSE 25716
// begin Query ( HeikeIsHurt ) ;
25707: LD_STRING HeikeIsHurt
25709: PPUSH
25710: CALL_OW 97
// exit ;
25714: GO 26436
// end ; if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
25716: LD_INT 22
25718: PUSH
25719: LD_INT 5
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 21
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PPUSH
25740: CALL_OW 69
25744: PUSH
25745: LD_INT 0
25747: EQUAL
25748: PUSH
25749: LD_EXP 32
25753: PUSH
25754: LD_INT 0
25756: EQUAL
25757: AND
25758: IFFALSE 25772
// AddMedal ( med1 , 1 ) else
25760: LD_STRING med1
25762: PPUSH
25763: LD_INT 1
25765: PPUSH
25766: CALL_OW 101
25770: GO 25783
// AddMedal ( med1 , - 1 ) ;
25772: LD_STRING med1
25774: PPUSH
25775: LD_INT 1
25777: NEG
25778: PPUSH
25779: CALL_OW 101
// if explosivePlantedList >= 3 then
25783: LD_EXP 29
25787: PUSH
25788: LD_INT 3
25790: GREATEREQUAL
25791: IFFALSE 25805
// AddMedal ( med2 , 1 ) else
25793: LD_STRING med2
25795: PPUSH
25796: LD_INT 1
25798: PPUSH
25799: CALL_OW 101
25803: GO 25839
// if explosivePlantedList < 3 then
25805: LD_EXP 29
25809: PUSH
25810: LD_INT 3
25812: LESS
25813: IFFALSE 25828
// AddMedal ( med2 , - 2 ) else
25815: LD_STRING med2
25817: PPUSH
25818: LD_INT 2
25820: NEG
25821: PPUSH
25822: CALL_OW 101
25826: GO 25839
// AddMedal ( med2 , - 1 ) ;
25828: LD_STRING med2
25830: PPUSH
25831: LD_INT 1
25833: NEG
25834: PPUSH
25835: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
25839: LD_INT 5
25841: PPUSH
25842: LD_INT 2
25844: PPUSH
25845: CALL_OW 321
25849: PUSH
25850: LD_INT 2
25852: EQUAL
25853: IFFALSE 25867
// AddMedal ( med3 , 1 ) else
25855: LD_STRING med3
25857: PPUSH
25858: LD_INT 1
25860: PPUSH
25861: CALL_OW 101
25865: GO 25878
// AddMedal ( med3 , - 1 ) ;
25867: LD_STRING med3
25869: PPUSH
25870: LD_INT 1
25872: NEG
25873: PPUSH
25874: CALL_OW 101
// GiveMedals ( MAIN ) ;
25878: LD_STRING MAIN
25880: PPUSH
25881: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
25885: LD_INT 22
25887: PUSH
25888: LD_INT 2
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 23
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 21
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: PPUSH
25920: CALL_OW 69
25924: PPUSH
25925: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
25929: LD_EXP 52
25933: PUSH
25934: LD_EXP 52
25938: PPUSH
25939: CALL_OW 255
25943: PUSH
25944: LD_INT 2
25946: EQUAL
25947: AND
25948: IFFALSE 25962
// SaveCharacters ( Doug , 08_UsCommander ) ;
25950: LD_EXP 52
25954: PPUSH
25955: LD_STRING 08_UsCommander
25957: PPUSH
25958: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff Doug , 08_Americans ) ;
25962: LD_INT 22
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 23
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 21
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: PPUSH
25997: CALL_OW 69
26001: PUSH
26002: LD_EXP 52
26006: DIFF
26007: PPUSH
26008: LD_STRING 08_Americans
26010: PPUSH
26011: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
26015: LD_EXP 38
26019: PPUSH
26020: CALL_OW 248
26024: PUSH
26025: LD_INT 3
26027: EQUAL
26028: IFFALSE 26058
// begin CopySkills ( Heike , HeikeTmp ) ;
26030: LD_EXP 38
26034: PPUSH
26035: LD_EXP 54
26039: PPUSH
26040: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
26044: LD_EXP 54
26048: PPUSH
26049: LD_STRING 08_Heike
26051: PPUSH
26052: CALL_OW 38
// end else
26056: GO 26070
// SaveCharacters ( Heike , 08_Heike ) ;
26058: LD_EXP 38
26062: PPUSH
26063: LD_STRING 08_Heike
26065: PPUSH
26066: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
26070: LD_EXP 48
26074: PUSH
26075: LD_EXP 48
26079: PPUSH
26080: CALL_OW 255
26084: PUSH
26085: LD_INT 2
26087: EQUAL
26088: AND
26089: IFFALSE 26103
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
26091: LD_EXP 48
26095: PPUSH
26096: LD_STRING 08_Aviradze
26098: PPUSH
26099: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
26103: LD_EXP 41
26107: PUSH
26108: LD_EXP 41
26112: PPUSH
26113: CALL_OW 255
26117: PUSH
26118: LD_INT 2
26120: EQUAL
26121: AND
26122: IFFALSE 26136
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
26124: LD_EXP 41
26128: PPUSH
26129: LD_STRING 08_Ibrahim
26131: PPUSH
26132: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
26136: LD_EXP 42
26140: PUSH
26141: LD_EXP 42
26145: PPUSH
26146: CALL_OW 255
26150: PUSH
26151: LD_INT 2
26153: EQUAL
26154: AND
26155: IFFALSE 26169
// SaveCharacters ( Kamil , 08_Kamil ) ;
26157: LD_EXP 42
26161: PPUSH
26162: LD_STRING 08_Kamil
26164: PPUSH
26165: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
26169: LD_EXP 44
26173: PUSH
26174: LD_EXP 44
26178: PPUSH
26179: CALL_OW 255
26183: PUSH
26184: LD_INT 2
26186: EQUAL
26187: AND
26188: IFFALSE 26202
// SaveCharacters ( Sophia , 08_Sophia ) ;
26190: LD_EXP 44
26194: PPUSH
26195: LD_STRING 08_Sophia
26197: PPUSH
26198: CALL_OW 38
// if Kaia and GetSide ( Aviradze ) = 2 then
26202: LD_EXP 43
26206: PUSH
26207: LD_EXP 48
26211: PPUSH
26212: CALL_OW 255
26216: PUSH
26217: LD_INT 2
26219: EQUAL
26220: AND
26221: IFFALSE 26235
// SaveCharacters ( Kaia , 08_Kaia ) ;
26223: LD_EXP 43
26227: PPUSH
26228: LD_STRING 08_Kaia
26230: PPUSH
26231: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
26235: LD_EXP 39
26239: PUSH
26240: LD_EXP 39
26244: PPUSH
26245: CALL_OW 255
26249: PUSH
26250: LD_INT 2
26252: EQUAL
26253: AND
26254: IFFALSE 26311
// if GetNation ( Givi ) = nation_russian then
26256: LD_EXP 39
26260: PPUSH
26261: CALL_OW 248
26265: PUSH
26266: LD_INT 3
26268: EQUAL
26269: IFFALSE 26299
// begin CopySkills ( Givi , GiviTmp ) ;
26271: LD_EXP 39
26275: PPUSH
26276: LD_EXP 55
26280: PPUSH
26281: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
26285: LD_EXP 55
26289: PPUSH
26290: LD_STRING 08_Givi
26292: PPUSH
26293: CALL_OW 38
// end else
26297: GO 26311
// SaveCharacters ( Givi , 08_Givi ) ;
26299: LD_EXP 39
26303: PPUSH
26304: LD_STRING 08_Givi
26306: PPUSH
26307: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
26311: LD_EXP 40
26315: PUSH
26316: LD_EXP 40
26320: PPUSH
26321: CALL_OW 255
26325: PUSH
26326: LD_INT 2
26328: EQUAL
26329: AND
26330: IFFALSE 26344
// SaveCharacters ( Mike , 08_Mike ) ;
26332: LD_EXP 40
26336: PPUSH
26337: LD_STRING 08_Mike
26339: PPUSH
26340: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
26344: LD_EXP 45
26348: PUSH
26349: LD_EXP 45
26353: PPUSH
26354: CALL_OW 255
26358: PUSH
26359: LD_INT 2
26361: EQUAL
26362: AND
26363: IFFALSE 26377
// SaveCharacters ( Markov , 08_Markov ) ;
26365: LD_EXP 45
26369: PPUSH
26370: LD_STRING 08_Markov
26372: PPUSH
26373: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
26377: LD_EXP 47
26381: PUSH
26382: LD_EXP 47
26386: PPUSH
26387: CALL_OW 255
26391: PUSH
26392: LD_INT 2
26394: EQUAL
26395: AND
26396: IFFALSE 26410
// SaveCharacters ( Kurt , 08_Kurt ) ;
26398: LD_EXP 47
26402: PPUSH
26403: LD_STRING 08_Kurt
26405: PPUSH
26406: CALL_OW 38
// if heikeSecondSquad then
26410: LD_EXP 49
26414: IFFALSE 26428
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
26416: LD_EXP 49
26420: PPUSH
26421: LD_STRING 08_others
26423: PPUSH
26424: CALL_OW 38
// YouWin ;
26428: CALL_OW 103
// DialogueOff ;
26432: CALL_OW 7
// end ; end_of_file
26436: LD_VAR 0 1
26440: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
26441: LD_EXP 5
26445: IFFALSE 26624
26447: GO 26449
26449: DISABLE
26450: LD_INT 0
26452: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
26453: LD_INT 35
26455: PPUSH
26456: LD_INT 2100
26458: PPUSH
26459: CALL_OW 12
26463: PPUSH
26464: CALL_OW 67
// StopOriginalMusic ;
26468: CALL 88096 0 0
// weatherBusy := true ;
26472: LD_ADDR_EXP 37
26476: PUSH
26477: LD_INT 1
26479: ST_TO_ADDR
// for i := 1 to 3 do
26480: LD_ADDR_VAR 0 1
26484: PUSH
26485: DOUBLE
26486: LD_INT 1
26488: DEC
26489: ST_TO_ADDR
26490: LD_INT 3
26492: PUSH
26493: FOR_TO
26494: IFFALSE 26528
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
26496: LD_INT 1
26498: PPUSH
26499: LD_INT 100
26501: PUSH
26502: LD_INT 100
26504: PUSH
26505: LD_VAR 0 1
26509: MUL
26510: PLUS
26511: PPUSH
26512: LD_INT 60
26514: PPUSH
26515: CALL_OW 550
// wait ( 0 0$2 ) ;
26519: LD_INT 70
26521: PPUSH
26522: CALL_OW 67
// end ;
26526: GO 26493
26528: POP
26529: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
26530: LD_STRING ArStormRain.wav
26532: PPUSH
26533: LD_STRING OW_CUSTOM_COMMAND(103);
26535: PPUSH
26536: CALL 88126 0 2
// wait ( 0 0$3 ) ;
26540: LD_INT 105
26542: PPUSH
26543: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
26547: LD_INT 1
26549: PPUSH
26550: LD_INT 900
26552: PPUSH
26553: LD_INT 120
26555: PPUSH
26556: CALL_OW 550
// wait ( 0 0$10 ) ;
26560: LD_INT 350
26562: PPUSH
26563: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
26567: LD_INT 1
26569: PPUSH
26570: LD_INT 1500
26572: PPUSH
26573: LD_INT 300
26575: PPUSH
26576: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
26580: LD_INT 35
26582: PPUSH
26583: CALL_OW 67
// until not weatherBusy ;
26587: LD_EXP 37
26591: NOT
26592: IFFALSE 26580
// SetWeather ( 0 , 0 , 0 ) ;
26594: LD_INT 0
26596: PPUSH
26597: LD_INT 0
26599: PPUSH
26600: LD_INT 0
26602: PPUSH
26603: CALL_OW 550
// wait ( 5 5$00 ) ;
26607: LD_INT 10500
26609: PPUSH
26610: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
26614: LD_STRING ArStormNormal.wav
26616: PPUSH
26617: LD_STRING OW_CUSTOM_COMMAND(103);
26619: PPUSH
26620: CALL 88126 0 2
// end ; end_of_file
26624: PPOPN 1
26626: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26627: LD_INT 0
26629: PPUSH
26630: PPUSH
// if exist_mode then
26631: LD_VAR 0 2
26635: IFFALSE 26660
// unit := CreateCharacter ( prefix & ident ) else
26637: LD_ADDR_VAR 0 5
26641: PUSH
26642: LD_VAR 0 3
26646: PUSH
26647: LD_VAR 0 1
26651: STR
26652: PPUSH
26653: CALL_OW 34
26657: ST_TO_ADDR
26658: GO 26675
// unit := NewCharacter ( ident ) ;
26660: LD_ADDR_VAR 0 5
26664: PUSH
26665: LD_VAR 0 1
26669: PPUSH
26670: CALL_OW 25
26674: ST_TO_ADDR
// result := unit ;
26675: LD_ADDR_VAR 0 4
26679: PUSH
26680: LD_VAR 0 5
26684: ST_TO_ADDR
// end ;
26685: LD_VAR 0 4
26689: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26690: LD_INT 0
26692: PPUSH
26693: PPUSH
// if not side or not nation then
26694: LD_VAR 0 1
26698: NOT
26699: PUSH
26700: LD_VAR 0 2
26704: NOT
26705: OR
26706: IFFALSE 26710
// exit ;
26708: GO 27478
// case nation of nation_american :
26710: LD_VAR 0 2
26714: PUSH
26715: LD_INT 1
26717: DOUBLE
26718: EQUAL
26719: IFTRUE 26723
26721: GO 26937
26723: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26724: LD_ADDR_VAR 0 4
26728: PUSH
26729: LD_INT 35
26731: PUSH
26732: LD_INT 45
26734: PUSH
26735: LD_INT 46
26737: PUSH
26738: LD_INT 47
26740: PUSH
26741: LD_INT 82
26743: PUSH
26744: LD_INT 83
26746: PUSH
26747: LD_INT 84
26749: PUSH
26750: LD_INT 85
26752: PUSH
26753: LD_INT 86
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: LD_INT 2
26761: PUSH
26762: LD_INT 6
26764: PUSH
26765: LD_INT 15
26767: PUSH
26768: LD_INT 16
26770: PUSH
26771: LD_INT 7
26773: PUSH
26774: LD_INT 12
26776: PUSH
26777: LD_INT 13
26779: PUSH
26780: LD_INT 10
26782: PUSH
26783: LD_INT 14
26785: PUSH
26786: LD_INT 20
26788: PUSH
26789: LD_INT 21
26791: PUSH
26792: LD_INT 22
26794: PUSH
26795: LD_INT 25
26797: PUSH
26798: LD_INT 32
26800: PUSH
26801: LD_INT 27
26803: PUSH
26804: LD_INT 36
26806: PUSH
26807: LD_INT 69
26809: PUSH
26810: LD_INT 39
26812: PUSH
26813: LD_INT 34
26815: PUSH
26816: LD_INT 40
26818: PUSH
26819: LD_INT 48
26821: PUSH
26822: LD_INT 49
26824: PUSH
26825: LD_INT 50
26827: PUSH
26828: LD_INT 51
26830: PUSH
26831: LD_INT 52
26833: PUSH
26834: LD_INT 53
26836: PUSH
26837: LD_INT 54
26839: PUSH
26840: LD_INT 55
26842: PUSH
26843: LD_INT 56
26845: PUSH
26846: LD_INT 57
26848: PUSH
26849: LD_INT 58
26851: PUSH
26852: LD_INT 59
26854: PUSH
26855: LD_INT 60
26857: PUSH
26858: LD_INT 61
26860: PUSH
26861: LD_INT 62
26863: PUSH
26864: LD_INT 80
26866: PUSH
26867: LD_INT 82
26869: PUSH
26870: LD_INT 83
26872: PUSH
26873: LD_INT 84
26875: PUSH
26876: LD_INT 85
26878: PUSH
26879: LD_INT 86
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: ST_TO_ADDR
26935: GO 27402
26937: LD_INT 2
26939: DOUBLE
26940: EQUAL
26941: IFTRUE 26945
26943: GO 27171
26945: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26946: LD_ADDR_VAR 0 4
26950: PUSH
26951: LD_INT 35
26953: PUSH
26954: LD_INT 45
26956: PUSH
26957: LD_INT 46
26959: PUSH
26960: LD_INT 47
26962: PUSH
26963: LD_INT 82
26965: PUSH
26966: LD_INT 83
26968: PUSH
26969: LD_INT 84
26971: PUSH
26972: LD_INT 85
26974: PUSH
26975: LD_INT 87
26977: PUSH
26978: LD_INT 70
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 11
26986: PUSH
26987: LD_INT 3
26989: PUSH
26990: LD_INT 4
26992: PUSH
26993: LD_INT 5
26995: PUSH
26996: LD_INT 6
26998: PUSH
26999: LD_INT 15
27001: PUSH
27002: LD_INT 18
27004: PUSH
27005: LD_INT 7
27007: PUSH
27008: LD_INT 17
27010: PUSH
27011: LD_INT 8
27013: PUSH
27014: LD_INT 20
27016: PUSH
27017: LD_INT 21
27019: PUSH
27020: LD_INT 22
27022: PUSH
27023: LD_INT 72
27025: PUSH
27026: LD_INT 26
27028: PUSH
27029: LD_INT 69
27031: PUSH
27032: LD_INT 39
27034: PUSH
27035: LD_INT 40
27037: PUSH
27038: LD_INT 41
27040: PUSH
27041: LD_INT 42
27043: PUSH
27044: LD_INT 43
27046: PUSH
27047: LD_INT 48
27049: PUSH
27050: LD_INT 49
27052: PUSH
27053: LD_INT 50
27055: PUSH
27056: LD_INT 51
27058: PUSH
27059: LD_INT 52
27061: PUSH
27062: LD_INT 53
27064: PUSH
27065: LD_INT 54
27067: PUSH
27068: LD_INT 55
27070: PUSH
27071: LD_INT 56
27073: PUSH
27074: LD_INT 60
27076: PUSH
27077: LD_INT 61
27079: PUSH
27080: LD_INT 62
27082: PUSH
27083: LD_INT 66
27085: PUSH
27086: LD_INT 67
27088: PUSH
27089: LD_INT 68
27091: PUSH
27092: LD_INT 81
27094: PUSH
27095: LD_INT 82
27097: PUSH
27098: LD_INT 83
27100: PUSH
27101: LD_INT 84
27103: PUSH
27104: LD_INT 85
27106: PUSH
27107: LD_INT 87
27109: PUSH
27110: LD_INT 88
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: ST_TO_ADDR
27169: GO 27402
27171: LD_INT 3
27173: DOUBLE
27174: EQUAL
27175: IFTRUE 27179
27177: GO 27401
27179: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27180: LD_ADDR_VAR 0 4
27184: PUSH
27185: LD_INT 46
27187: PUSH
27188: LD_INT 47
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: LD_INT 82
27199: PUSH
27200: LD_INT 83
27202: PUSH
27203: LD_INT 84
27205: PUSH
27206: LD_INT 85
27208: PUSH
27209: LD_INT 86
27211: PUSH
27212: LD_INT 11
27214: PUSH
27215: LD_INT 9
27217: PUSH
27218: LD_INT 20
27220: PUSH
27221: LD_INT 19
27223: PUSH
27224: LD_INT 21
27226: PUSH
27227: LD_INT 24
27229: PUSH
27230: LD_INT 22
27232: PUSH
27233: LD_INT 25
27235: PUSH
27236: LD_INT 28
27238: PUSH
27239: LD_INT 29
27241: PUSH
27242: LD_INT 30
27244: PUSH
27245: LD_INT 31
27247: PUSH
27248: LD_INT 37
27250: PUSH
27251: LD_INT 38
27253: PUSH
27254: LD_INT 32
27256: PUSH
27257: LD_INT 27
27259: PUSH
27260: LD_INT 33
27262: PUSH
27263: LD_INT 69
27265: PUSH
27266: LD_INT 39
27268: PUSH
27269: LD_INT 34
27271: PUSH
27272: LD_INT 40
27274: PUSH
27275: LD_INT 71
27277: PUSH
27278: LD_INT 23
27280: PUSH
27281: LD_INT 44
27283: PUSH
27284: LD_INT 48
27286: PUSH
27287: LD_INT 49
27289: PUSH
27290: LD_INT 50
27292: PUSH
27293: LD_INT 51
27295: PUSH
27296: LD_INT 52
27298: PUSH
27299: LD_INT 53
27301: PUSH
27302: LD_INT 54
27304: PUSH
27305: LD_INT 55
27307: PUSH
27308: LD_INT 56
27310: PUSH
27311: LD_INT 57
27313: PUSH
27314: LD_INT 58
27316: PUSH
27317: LD_INT 59
27319: PUSH
27320: LD_INT 63
27322: PUSH
27323: LD_INT 64
27325: PUSH
27326: LD_INT 65
27328: PUSH
27329: LD_INT 82
27331: PUSH
27332: LD_INT 83
27334: PUSH
27335: LD_INT 84
27337: PUSH
27338: LD_INT 85
27340: PUSH
27341: LD_INT 86
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: ST_TO_ADDR
27399: GO 27402
27401: POP
// if state > - 1 and state < 3 then
27402: LD_VAR 0 3
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: GREATER
27411: PUSH
27412: LD_VAR 0 3
27416: PUSH
27417: LD_INT 3
27419: LESS
27420: AND
27421: IFFALSE 27478
// for i in result do
27423: LD_ADDR_VAR 0 5
27427: PUSH
27428: LD_VAR 0 4
27432: PUSH
27433: FOR_IN
27434: IFFALSE 27476
// if GetTech ( i , side ) <> state then
27436: LD_VAR 0 5
27440: PPUSH
27441: LD_VAR 0 1
27445: PPUSH
27446: CALL_OW 321
27450: PUSH
27451: LD_VAR 0 3
27455: NONEQUAL
27456: IFFALSE 27474
// result := result diff i ;
27458: LD_ADDR_VAR 0 4
27462: PUSH
27463: LD_VAR 0 4
27467: PUSH
27468: LD_VAR 0 5
27472: DIFF
27473: ST_TO_ADDR
27474: GO 27433
27476: POP
27477: POP
// end ;
27478: LD_VAR 0 4
27482: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27483: LD_INT 0
27485: PPUSH
27486: PPUSH
27487: PPUSH
// result := true ;
27488: LD_ADDR_VAR 0 3
27492: PUSH
27493: LD_INT 1
27495: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27496: LD_ADDR_VAR 0 5
27500: PUSH
27501: LD_VAR 0 2
27505: PPUSH
27506: CALL_OW 480
27510: ST_TO_ADDR
// if not tmp then
27511: LD_VAR 0 5
27515: NOT
27516: IFFALSE 27520
// exit ;
27518: GO 27569
// for i in tmp do
27520: LD_ADDR_VAR 0 4
27524: PUSH
27525: LD_VAR 0 5
27529: PUSH
27530: FOR_IN
27531: IFFALSE 27567
// if GetTech ( i , side ) <> state_researched then
27533: LD_VAR 0 4
27537: PPUSH
27538: LD_VAR 0 1
27542: PPUSH
27543: CALL_OW 321
27547: PUSH
27548: LD_INT 2
27550: NONEQUAL
27551: IFFALSE 27565
// begin result := false ;
27553: LD_ADDR_VAR 0 3
27557: PUSH
27558: LD_INT 0
27560: ST_TO_ADDR
// exit ;
27561: POP
27562: POP
27563: GO 27569
// end ;
27565: GO 27530
27567: POP
27568: POP
// end ;
27569: LD_VAR 0 3
27573: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27574: LD_INT 0
27576: PPUSH
27577: PPUSH
27578: PPUSH
27579: PPUSH
27580: PPUSH
27581: PPUSH
27582: PPUSH
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27589: LD_VAR 0 1
27593: NOT
27594: PUSH
27595: LD_VAR 0 1
27599: PPUSH
27600: CALL_OW 257
27604: PUSH
27605: LD_INT 9
27607: NONEQUAL
27608: OR
27609: IFFALSE 27613
// exit ;
27611: GO 28186
// side := GetSide ( unit ) ;
27613: LD_ADDR_VAR 0 9
27617: PUSH
27618: LD_VAR 0 1
27622: PPUSH
27623: CALL_OW 255
27627: ST_TO_ADDR
// tech_space := tech_spacanom ;
27628: LD_ADDR_VAR 0 12
27632: PUSH
27633: LD_INT 29
27635: ST_TO_ADDR
// tech_time := tech_taurad ;
27636: LD_ADDR_VAR 0 13
27640: PUSH
27641: LD_INT 28
27643: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27644: LD_ADDR_VAR 0 11
27648: PUSH
27649: LD_VAR 0 1
27653: PPUSH
27654: CALL_OW 310
27658: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27659: LD_VAR 0 11
27663: PPUSH
27664: CALL_OW 247
27668: PUSH
27669: LD_INT 2
27671: EQUAL
27672: IFFALSE 27676
// exit ;
27674: GO 28186
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27676: LD_ADDR_VAR 0 8
27680: PUSH
27681: LD_INT 81
27683: PUSH
27684: LD_VAR 0 9
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 3
27695: PUSH
27696: LD_INT 21
27698: PUSH
27699: LD_INT 3
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PPUSH
27714: CALL_OW 69
27718: ST_TO_ADDR
// if not tmp then
27719: LD_VAR 0 8
27723: NOT
27724: IFFALSE 27728
// exit ;
27726: GO 28186
// if in_unit then
27728: LD_VAR 0 11
27732: IFFALSE 27756
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27734: LD_ADDR_VAR 0 10
27738: PUSH
27739: LD_VAR 0 8
27743: PPUSH
27744: LD_VAR 0 11
27748: PPUSH
27749: CALL_OW 74
27753: ST_TO_ADDR
27754: GO 27776
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27756: LD_ADDR_VAR 0 10
27760: PUSH
27761: LD_VAR 0 8
27765: PPUSH
27766: LD_VAR 0 1
27770: PPUSH
27771: CALL_OW 74
27775: ST_TO_ADDR
// if not enemy then
27776: LD_VAR 0 10
27780: NOT
27781: IFFALSE 27785
// exit ;
27783: GO 28186
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27785: LD_VAR 0 11
27789: PUSH
27790: LD_VAR 0 11
27794: PPUSH
27795: LD_VAR 0 10
27799: PPUSH
27800: CALL_OW 296
27804: PUSH
27805: LD_INT 13
27807: GREATER
27808: AND
27809: PUSH
27810: LD_VAR 0 1
27814: PPUSH
27815: LD_VAR 0 10
27819: PPUSH
27820: CALL_OW 296
27824: PUSH
27825: LD_INT 12
27827: GREATER
27828: OR
27829: IFFALSE 27833
// exit ;
27831: GO 28186
// missile := [ 1 ] ;
27833: LD_ADDR_VAR 0 14
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27844: LD_VAR 0 9
27848: PPUSH
27849: LD_VAR 0 12
27853: PPUSH
27854: CALL_OW 325
27858: IFFALSE 27887
// missile := Replace ( missile , missile + 1 , 2 ) ;
27860: LD_ADDR_VAR 0 14
27864: PUSH
27865: LD_VAR 0 14
27869: PPUSH
27870: LD_VAR 0 14
27874: PUSH
27875: LD_INT 1
27877: PLUS
27878: PPUSH
27879: LD_INT 2
27881: PPUSH
27882: CALL_OW 1
27886: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27887: LD_VAR 0 9
27891: PPUSH
27892: LD_VAR 0 13
27896: PPUSH
27897: CALL_OW 325
27901: PUSH
27902: LD_VAR 0 10
27906: PPUSH
27907: CALL_OW 255
27911: PPUSH
27912: LD_VAR 0 13
27916: PPUSH
27917: CALL_OW 325
27921: NOT
27922: AND
27923: IFFALSE 27952
// missile := Replace ( missile , missile + 1 , 3 ) ;
27925: LD_ADDR_VAR 0 14
27929: PUSH
27930: LD_VAR 0 14
27934: PPUSH
27935: LD_VAR 0 14
27939: PUSH
27940: LD_INT 1
27942: PLUS
27943: PPUSH
27944: LD_INT 3
27946: PPUSH
27947: CALL_OW 1
27951: ST_TO_ADDR
// if missile < 2 then
27952: LD_VAR 0 14
27956: PUSH
27957: LD_INT 2
27959: LESS
27960: IFFALSE 27964
// exit ;
27962: GO 28186
// x := GetX ( enemy ) ;
27964: LD_ADDR_VAR 0 4
27968: PUSH
27969: LD_VAR 0 10
27973: PPUSH
27974: CALL_OW 250
27978: ST_TO_ADDR
// y := GetY ( enemy ) ;
27979: LD_ADDR_VAR 0 5
27983: PUSH
27984: LD_VAR 0 10
27988: PPUSH
27989: CALL_OW 251
27993: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27994: LD_ADDR_VAR 0 6
27998: PUSH
27999: LD_VAR 0 4
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PPUSH
28008: LD_INT 1
28010: PPUSH
28011: CALL_OW 12
28015: PLUS
28016: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28017: LD_ADDR_VAR 0 7
28021: PUSH
28022: LD_VAR 0 5
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PPUSH
28031: LD_INT 1
28033: PPUSH
28034: CALL_OW 12
28038: PLUS
28039: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28040: LD_VAR 0 6
28044: PPUSH
28045: LD_VAR 0 7
28049: PPUSH
28050: CALL_OW 488
28054: NOT
28055: IFFALSE 28077
// begin _x := x ;
28057: LD_ADDR_VAR 0 6
28061: PUSH
28062: LD_VAR 0 4
28066: ST_TO_ADDR
// _y := y ;
28067: LD_ADDR_VAR 0 7
28071: PUSH
28072: LD_VAR 0 5
28076: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28077: LD_ADDR_VAR 0 3
28081: PUSH
28082: LD_INT 1
28084: PPUSH
28085: LD_VAR 0 14
28089: PPUSH
28090: CALL_OW 12
28094: ST_TO_ADDR
// case i of 1 :
28095: LD_VAR 0 3
28099: PUSH
28100: LD_INT 1
28102: DOUBLE
28103: EQUAL
28104: IFTRUE 28108
28106: GO 28125
28108: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28109: LD_VAR 0 1
28113: PPUSH
28114: LD_VAR 0 10
28118: PPUSH
28119: CALL_OW 115
28123: GO 28186
28125: LD_INT 2
28127: DOUBLE
28128: EQUAL
28129: IFTRUE 28133
28131: GO 28155
28133: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28134: LD_VAR 0 1
28138: PPUSH
28139: LD_VAR 0 6
28143: PPUSH
28144: LD_VAR 0 7
28148: PPUSH
28149: CALL_OW 153
28153: GO 28186
28155: LD_INT 3
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28185
28163: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28164: LD_VAR 0 1
28168: PPUSH
28169: LD_VAR 0 6
28173: PPUSH
28174: LD_VAR 0 7
28178: PPUSH
28179: CALL_OW 154
28183: GO 28186
28185: POP
// end ;
28186: LD_VAR 0 2
28190: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28191: LD_INT 0
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
28197: PPUSH
28198: PPUSH
// if not unit or not building then
28199: LD_VAR 0 1
28203: NOT
28204: PUSH
28205: LD_VAR 0 2
28209: NOT
28210: OR
28211: IFFALSE 28215
// exit ;
28213: GO 28373
// x := GetX ( building ) ;
28215: LD_ADDR_VAR 0 5
28219: PUSH
28220: LD_VAR 0 2
28224: PPUSH
28225: CALL_OW 250
28229: ST_TO_ADDR
// y := GetY ( building ) ;
28230: LD_ADDR_VAR 0 6
28234: PUSH
28235: LD_VAR 0 2
28239: PPUSH
28240: CALL_OW 251
28244: ST_TO_ADDR
// for i = 0 to 5 do
28245: LD_ADDR_VAR 0 4
28249: PUSH
28250: DOUBLE
28251: LD_INT 0
28253: DEC
28254: ST_TO_ADDR
28255: LD_INT 5
28257: PUSH
28258: FOR_TO
28259: IFFALSE 28371
// begin _x := ShiftX ( x , i , 3 ) ;
28261: LD_ADDR_VAR 0 7
28265: PUSH
28266: LD_VAR 0 5
28270: PPUSH
28271: LD_VAR 0 4
28275: PPUSH
28276: LD_INT 3
28278: PPUSH
28279: CALL_OW 272
28283: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28284: LD_ADDR_VAR 0 8
28288: PUSH
28289: LD_VAR 0 6
28293: PPUSH
28294: LD_VAR 0 4
28298: PPUSH
28299: LD_INT 3
28301: PPUSH
28302: CALL_OW 273
28306: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28307: LD_VAR 0 7
28311: PPUSH
28312: LD_VAR 0 8
28316: PPUSH
28317: CALL_OW 488
28321: NOT
28322: IFFALSE 28326
// continue ;
28324: GO 28258
// if HexInfo ( _x , _y ) = 0 then
28326: LD_VAR 0 7
28330: PPUSH
28331: LD_VAR 0 8
28335: PPUSH
28336: CALL_OW 428
28340: PUSH
28341: LD_INT 0
28343: EQUAL
28344: IFFALSE 28369
// begin ComMoveXY ( unit , _x , _y ) ;
28346: LD_VAR 0 1
28350: PPUSH
28351: LD_VAR 0 7
28355: PPUSH
28356: LD_VAR 0 8
28360: PPUSH
28361: CALL_OW 111
// exit ;
28365: POP
28366: POP
28367: GO 28373
// end ; end ;
28369: GO 28258
28371: POP
28372: POP
// end ;
28373: LD_VAR 0 3
28377: RET
// export function ScanBase ( side , base_area ) ; begin
28378: LD_INT 0
28380: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28381: LD_ADDR_VAR 0 3
28385: PUSH
28386: LD_VAR 0 2
28390: PPUSH
28391: LD_INT 81
28393: PUSH
28394: LD_VAR 0 1
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PPUSH
28403: CALL_OW 70
28407: ST_TO_ADDR
// end ;
28408: LD_VAR 0 3
28412: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28413: LD_INT 0
28415: PPUSH
28416: PPUSH
28417: PPUSH
28418: PPUSH
// result := false ;
28419: LD_ADDR_VAR 0 2
28423: PUSH
28424: LD_INT 0
28426: ST_TO_ADDR
// side := GetSide ( unit ) ;
28427: LD_ADDR_VAR 0 3
28431: PUSH
28432: LD_VAR 0 1
28436: PPUSH
28437: CALL_OW 255
28441: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28442: LD_ADDR_VAR 0 4
28446: PUSH
28447: LD_VAR 0 1
28451: PPUSH
28452: CALL_OW 248
28456: ST_TO_ADDR
// case nat of 1 :
28457: LD_VAR 0 4
28461: PUSH
28462: LD_INT 1
28464: DOUBLE
28465: EQUAL
28466: IFTRUE 28470
28468: GO 28481
28470: POP
// tech := tech_lassight ; 2 :
28471: LD_ADDR_VAR 0 5
28475: PUSH
28476: LD_INT 12
28478: ST_TO_ADDR
28479: GO 28520
28481: LD_INT 2
28483: DOUBLE
28484: EQUAL
28485: IFTRUE 28489
28487: GO 28500
28489: POP
// tech := tech_mortar ; 3 :
28490: LD_ADDR_VAR 0 5
28494: PUSH
28495: LD_INT 41
28497: ST_TO_ADDR
28498: GO 28520
28500: LD_INT 3
28502: DOUBLE
28503: EQUAL
28504: IFTRUE 28508
28506: GO 28519
28508: POP
// tech := tech_bazooka ; end ;
28509: LD_ADDR_VAR 0 5
28513: PUSH
28514: LD_INT 44
28516: ST_TO_ADDR
28517: GO 28520
28519: POP
// if Researched ( side , tech ) then
28520: LD_VAR 0 3
28524: PPUSH
28525: LD_VAR 0 5
28529: PPUSH
28530: CALL_OW 325
28534: IFFALSE 28561
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28536: LD_ADDR_VAR 0 2
28540: PUSH
28541: LD_INT 5
28543: PUSH
28544: LD_INT 8
28546: PUSH
28547: LD_INT 9
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: LIST
28554: PUSH
28555: LD_VAR 0 4
28559: ARRAY
28560: ST_TO_ADDR
// end ;
28561: LD_VAR 0 2
28565: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28566: LD_INT 0
28568: PPUSH
28569: PPUSH
28570: PPUSH
// if not mines then
28571: LD_VAR 0 2
28575: NOT
28576: IFFALSE 28580
// exit ;
28578: GO 28724
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28580: LD_ADDR_VAR 0 5
28584: PUSH
28585: LD_INT 81
28587: PUSH
28588: LD_VAR 0 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 3
28599: PUSH
28600: LD_INT 21
28602: PUSH
28603: LD_INT 3
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PPUSH
28618: CALL_OW 69
28622: ST_TO_ADDR
// for i in mines do
28623: LD_ADDR_VAR 0 4
28627: PUSH
28628: LD_VAR 0 2
28632: PUSH
28633: FOR_IN
28634: IFFALSE 28722
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28636: LD_VAR 0 4
28640: PUSH
28641: LD_INT 1
28643: ARRAY
28644: PPUSH
28645: LD_VAR 0 4
28649: PUSH
28650: LD_INT 2
28652: ARRAY
28653: PPUSH
28654: CALL_OW 458
28658: NOT
28659: IFFALSE 28663
// continue ;
28661: GO 28633
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28663: LD_VAR 0 4
28667: PUSH
28668: LD_INT 1
28670: ARRAY
28671: PPUSH
28672: LD_VAR 0 4
28676: PUSH
28677: LD_INT 2
28679: ARRAY
28680: PPUSH
28681: CALL_OW 428
28685: PUSH
28686: LD_VAR 0 5
28690: IN
28691: IFFALSE 28720
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28693: LD_VAR 0 4
28697: PUSH
28698: LD_INT 1
28700: ARRAY
28701: PPUSH
28702: LD_VAR 0 4
28706: PUSH
28707: LD_INT 2
28709: ARRAY
28710: PPUSH
28711: LD_VAR 0 1
28715: PPUSH
28716: CALL_OW 456
// end ;
28720: GO 28633
28722: POP
28723: POP
// end ;
28724: LD_VAR 0 3
28728: RET
// export function Count ( array ) ; var i ; begin
28729: LD_INT 0
28731: PPUSH
28732: PPUSH
// result := 0 ;
28733: LD_ADDR_VAR 0 2
28737: PUSH
28738: LD_INT 0
28740: ST_TO_ADDR
// for i in array do
28741: LD_ADDR_VAR 0 3
28745: PUSH
28746: LD_VAR 0 1
28750: PUSH
28751: FOR_IN
28752: IFFALSE 28776
// if i then
28754: LD_VAR 0 3
28758: IFFALSE 28774
// result := result + 1 ;
28760: LD_ADDR_VAR 0 2
28764: PUSH
28765: LD_VAR 0 2
28769: PUSH
28770: LD_INT 1
28772: PLUS
28773: ST_TO_ADDR
28774: GO 28751
28776: POP
28777: POP
// end ;
28778: LD_VAR 0 2
28782: RET
// export function IsEmpty ( building ) ; begin
28783: LD_INT 0
28785: PPUSH
// if not building then
28786: LD_VAR 0 1
28790: NOT
28791: IFFALSE 28795
// exit ;
28793: GO 28838
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28795: LD_ADDR_VAR 0 2
28799: PUSH
28800: LD_VAR 0 1
28804: PUSH
28805: LD_INT 22
28807: PUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: CALL_OW 255
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 58
28824: PUSH
28825: EMPTY
28826: LIST
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PPUSH
28832: CALL_OW 69
28836: IN
28837: ST_TO_ADDR
// end ;
28838: LD_VAR 0 2
28842: RET
// export function IsNotFull ( building ) ; var places ; begin
28843: LD_INT 0
28845: PPUSH
28846: PPUSH
// if not building then
28847: LD_VAR 0 1
28851: NOT
28852: IFFALSE 28856
// exit ;
28854: GO 29027
// result := false ;
28856: LD_ADDR_VAR 0 2
28860: PUSH
28861: LD_INT 0
28863: ST_TO_ADDR
// places := 0 ;
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_INT 0
28871: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28872: LD_VAR 0 1
28876: PPUSH
28877: CALL_OW 266
28881: PUSH
28882: LD_INT 0
28884: DOUBLE
28885: EQUAL
28886: IFTRUE 28944
28888: LD_INT 1
28890: DOUBLE
28891: EQUAL
28892: IFTRUE 28944
28894: LD_INT 6
28896: DOUBLE
28897: EQUAL
28898: IFTRUE 28944
28900: LD_INT 7
28902: DOUBLE
28903: EQUAL
28904: IFTRUE 28944
28906: LD_INT 8
28908: DOUBLE
28909: EQUAL
28910: IFTRUE 28944
28912: LD_INT 4
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28944
28918: LD_INT 5
28920: DOUBLE
28921: EQUAL
28922: IFTRUE 28944
28924: LD_INT 2
28926: DOUBLE
28927: EQUAL
28928: IFTRUE 28944
28930: LD_INT 3
28932: DOUBLE
28933: EQUAL
28934: IFTRUE 28944
28936: LD_INT 35
28938: DOUBLE
28939: EQUAL
28940: IFTRUE 28944
28942: GO 28955
28944: POP
// places := 6 ; b_bunker , b_breastwork :
28945: LD_ADDR_VAR 0 3
28949: PUSH
28950: LD_INT 6
28952: ST_TO_ADDR
28953: GO 29000
28955: LD_INT 32
28957: DOUBLE
28958: EQUAL
28959: IFTRUE 28969
28961: LD_INT 31
28963: DOUBLE
28964: EQUAL
28965: IFTRUE 28969
28967: GO 28980
28969: POP
// places := 1 ; b_control_tower :
28970: LD_ADDR_VAR 0 3
28974: PUSH
28975: LD_INT 1
28977: ST_TO_ADDR
28978: GO 29000
28980: LD_INT 36
28982: DOUBLE
28983: EQUAL
28984: IFTRUE 28988
28986: GO 28999
28988: POP
// places := 3 ; end ;
28989: LD_ADDR_VAR 0 3
28993: PUSH
28994: LD_INT 3
28996: ST_TO_ADDR
28997: GO 29000
28999: POP
// if places then
29000: LD_VAR 0 3
29004: IFFALSE 29027
// result := UnitsInside ( building ) < places ;
29006: LD_ADDR_VAR 0 2
29010: PUSH
29011: LD_VAR 0 1
29015: PPUSH
29016: CALL_OW 313
29020: PUSH
29021: LD_VAR 0 3
29025: LESS
29026: ST_TO_ADDR
// end ;
29027: LD_VAR 0 2
29031: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29032: LD_INT 0
29034: PPUSH
29035: PPUSH
29036: PPUSH
29037: PPUSH
// tmp := [ ] ;
29038: LD_ADDR_VAR 0 3
29042: PUSH
29043: EMPTY
29044: ST_TO_ADDR
// list := [ ] ;
29045: LD_ADDR_VAR 0 5
29049: PUSH
29050: EMPTY
29051: ST_TO_ADDR
// for i = 16 to 25 do
29052: LD_ADDR_VAR 0 4
29056: PUSH
29057: DOUBLE
29058: LD_INT 16
29060: DEC
29061: ST_TO_ADDR
29062: LD_INT 25
29064: PUSH
29065: FOR_TO
29066: IFFALSE 29139
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29068: LD_ADDR_VAR 0 3
29072: PUSH
29073: LD_VAR 0 3
29077: PUSH
29078: LD_INT 22
29080: PUSH
29081: LD_VAR 0 1
29085: PPUSH
29086: CALL_OW 255
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 91
29097: PUSH
29098: LD_VAR 0 1
29102: PUSH
29103: LD_INT 6
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 30
29113: PUSH
29114: LD_VAR 0 4
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: PPUSH
29131: CALL_OW 69
29135: ADD
29136: ST_TO_ADDR
29137: GO 29065
29139: POP
29140: POP
// for i = 1 to tmp do
29141: LD_ADDR_VAR 0 4
29145: PUSH
29146: DOUBLE
29147: LD_INT 1
29149: DEC
29150: ST_TO_ADDR
29151: LD_VAR 0 3
29155: PUSH
29156: FOR_TO
29157: IFFALSE 29245
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29159: LD_ADDR_VAR 0 5
29163: PUSH
29164: LD_VAR 0 5
29168: PUSH
29169: LD_VAR 0 3
29173: PUSH
29174: LD_VAR 0 4
29178: ARRAY
29179: PPUSH
29180: CALL_OW 266
29184: PUSH
29185: LD_VAR 0 3
29189: PUSH
29190: LD_VAR 0 4
29194: ARRAY
29195: PPUSH
29196: CALL_OW 250
29200: PUSH
29201: LD_VAR 0 3
29205: PUSH
29206: LD_VAR 0 4
29210: ARRAY
29211: PPUSH
29212: CALL_OW 251
29216: PUSH
29217: LD_VAR 0 3
29221: PUSH
29222: LD_VAR 0 4
29226: ARRAY
29227: PPUSH
29228: CALL_OW 254
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: ADD
29242: ST_TO_ADDR
29243: GO 29156
29245: POP
29246: POP
// result := list ;
29247: LD_ADDR_VAR 0 2
29251: PUSH
29252: LD_VAR 0 5
29256: ST_TO_ADDR
// end ;
29257: LD_VAR 0 2
29261: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29262: LD_INT 0
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
// if not factory then
29271: LD_VAR 0 1
29275: NOT
29276: IFFALSE 29280
// exit ;
29278: GO 29873
// if control = control_apeman then
29280: LD_VAR 0 4
29284: PUSH
29285: LD_INT 5
29287: EQUAL
29288: IFFALSE 29397
// begin tmp := UnitsInside ( factory ) ;
29290: LD_ADDR_VAR 0 8
29294: PUSH
29295: LD_VAR 0 1
29299: PPUSH
29300: CALL_OW 313
29304: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29305: LD_VAR 0 8
29309: PPUSH
29310: LD_INT 25
29312: PUSH
29313: LD_INT 12
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PPUSH
29320: CALL_OW 72
29324: NOT
29325: IFFALSE 29335
// control := control_manual ;
29327: LD_ADDR_VAR 0 4
29331: PUSH
29332: LD_INT 1
29334: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29335: LD_ADDR_VAR 0 8
29339: PUSH
29340: LD_VAR 0 1
29344: PPUSH
29345: CALL 29032 0 1
29349: ST_TO_ADDR
// if tmp then
29350: LD_VAR 0 8
29354: IFFALSE 29397
// begin for i in tmp do
29356: LD_ADDR_VAR 0 7
29360: PUSH
29361: LD_VAR 0 8
29365: PUSH
29366: FOR_IN
29367: IFFALSE 29395
// if i [ 1 ] = b_ext_radio then
29369: LD_VAR 0 7
29373: PUSH
29374: LD_INT 1
29376: ARRAY
29377: PUSH
29378: LD_INT 22
29380: EQUAL
29381: IFFALSE 29393
// begin control := control_remote ;
29383: LD_ADDR_VAR 0 4
29387: PUSH
29388: LD_INT 2
29390: ST_TO_ADDR
// break ;
29391: GO 29395
// end ;
29393: GO 29366
29395: POP
29396: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29397: LD_VAR 0 1
29401: PPUSH
29402: LD_VAR 0 2
29406: PPUSH
29407: LD_VAR 0 3
29411: PPUSH
29412: LD_VAR 0 4
29416: PPUSH
29417: LD_VAR 0 5
29421: PPUSH
29422: CALL_OW 448
29426: IFFALSE 29461
// begin result := [ chassis , engine , control , weapon ] ;
29428: LD_ADDR_VAR 0 6
29432: PUSH
29433: LD_VAR 0 2
29437: PUSH
29438: LD_VAR 0 3
29442: PUSH
29443: LD_VAR 0 4
29447: PUSH
29448: LD_VAR 0 5
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// exit ;
29459: GO 29873
// end ; _chassis := AvailableChassisList ( factory ) ;
29461: LD_ADDR_VAR 0 9
29465: PUSH
29466: LD_VAR 0 1
29470: PPUSH
29471: CALL_OW 475
29475: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29476: LD_ADDR_VAR 0 11
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 476
29490: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29491: LD_ADDR_VAR 0 12
29495: PUSH
29496: LD_VAR 0 1
29500: PPUSH
29501: CALL_OW 477
29505: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29506: LD_ADDR_VAR 0 10
29510: PUSH
29511: LD_VAR 0 1
29515: PPUSH
29516: CALL_OW 478
29520: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29521: LD_VAR 0 9
29525: NOT
29526: PUSH
29527: LD_VAR 0 11
29531: NOT
29532: OR
29533: PUSH
29534: LD_VAR 0 12
29538: NOT
29539: OR
29540: PUSH
29541: LD_VAR 0 10
29545: NOT
29546: OR
29547: IFFALSE 29582
// begin result := [ chassis , engine , control , weapon ] ;
29549: LD_ADDR_VAR 0 6
29553: PUSH
29554: LD_VAR 0 2
29558: PUSH
29559: LD_VAR 0 3
29563: PUSH
29564: LD_VAR 0 4
29568: PUSH
29569: LD_VAR 0 5
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: ST_TO_ADDR
// exit ;
29580: GO 29873
// end ; if not chassis in _chassis then
29582: LD_VAR 0 2
29586: PUSH
29587: LD_VAR 0 9
29591: IN
29592: NOT
29593: IFFALSE 29619
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29595: LD_ADDR_VAR 0 2
29599: PUSH
29600: LD_VAR 0 9
29604: PUSH
29605: LD_INT 1
29607: PPUSH
29608: LD_VAR 0 9
29612: PPUSH
29613: CALL_OW 12
29617: ARRAY
29618: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29619: LD_VAR 0 2
29623: PPUSH
29624: LD_VAR 0 3
29628: PPUSH
29629: CALL 29878 0 2
29633: NOT
29634: IFFALSE 29693
// repeat engine := _engine [ 1 ] ;
29636: LD_ADDR_VAR 0 3
29640: PUSH
29641: LD_VAR 0 11
29645: PUSH
29646: LD_INT 1
29648: ARRAY
29649: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29650: LD_ADDR_VAR 0 11
29654: PUSH
29655: LD_VAR 0 11
29659: PPUSH
29660: LD_INT 1
29662: PPUSH
29663: CALL_OW 3
29667: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29668: LD_VAR 0 2
29672: PPUSH
29673: LD_VAR 0 3
29677: PPUSH
29678: CALL 29878 0 2
29682: PUSH
29683: LD_VAR 0 11
29687: PUSH
29688: EMPTY
29689: EQUAL
29690: OR
29691: IFFALSE 29636
// if not control in _control then
29693: LD_VAR 0 4
29697: PUSH
29698: LD_VAR 0 12
29702: IN
29703: NOT
29704: IFFALSE 29730
// control := _control [ rand ( 1 , _control ) ] ;
29706: LD_ADDR_VAR 0 4
29710: PUSH
29711: LD_VAR 0 12
29715: PUSH
29716: LD_INT 1
29718: PPUSH
29719: LD_VAR 0 12
29723: PPUSH
29724: CALL_OW 12
29728: ARRAY
29729: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29730: LD_VAR 0 2
29734: PPUSH
29735: LD_VAR 0 5
29739: PPUSH
29740: CALL 30098 0 2
29744: NOT
29745: IFFALSE 29804
// repeat weapon := _weapon [ 1 ] ;
29747: LD_ADDR_VAR 0 5
29751: PUSH
29752: LD_VAR 0 10
29756: PUSH
29757: LD_INT 1
29759: ARRAY
29760: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29761: LD_ADDR_VAR 0 10
29765: PUSH
29766: LD_VAR 0 10
29770: PPUSH
29771: LD_INT 1
29773: PPUSH
29774: CALL_OW 3
29778: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29779: LD_VAR 0 2
29783: PPUSH
29784: LD_VAR 0 5
29788: PPUSH
29789: CALL 30098 0 2
29793: PUSH
29794: LD_VAR 0 10
29798: PUSH
29799: EMPTY
29800: EQUAL
29801: OR
29802: IFFALSE 29747
// result := [ ] ;
29804: LD_ADDR_VAR 0 6
29808: PUSH
29809: EMPTY
29810: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29811: LD_VAR 0 1
29815: PPUSH
29816: LD_VAR 0 2
29820: PPUSH
29821: LD_VAR 0 3
29825: PPUSH
29826: LD_VAR 0 4
29830: PPUSH
29831: LD_VAR 0 5
29835: PPUSH
29836: CALL_OW 448
29840: IFFALSE 29873
// result := [ chassis , engine , control , weapon ] ;
29842: LD_ADDR_VAR 0 6
29846: PUSH
29847: LD_VAR 0 2
29851: PUSH
29852: LD_VAR 0 3
29856: PUSH
29857: LD_VAR 0 4
29861: PUSH
29862: LD_VAR 0 5
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: ST_TO_ADDR
// end ;
29873: LD_VAR 0 6
29877: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29878: LD_INT 0
29880: PPUSH
// if not chassis or not engine then
29881: LD_VAR 0 1
29885: NOT
29886: PUSH
29887: LD_VAR 0 2
29891: NOT
29892: OR
29893: IFFALSE 29897
// exit ;
29895: GO 30093
// case engine of engine_solar :
29897: LD_VAR 0 2
29901: PUSH
29902: LD_INT 2
29904: DOUBLE
29905: EQUAL
29906: IFTRUE 29910
29908: GO 29948
29910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29911: LD_ADDR_VAR 0 3
29915: PUSH
29916: LD_INT 11
29918: PUSH
29919: LD_INT 12
29921: PUSH
29922: LD_INT 13
29924: PUSH
29925: LD_INT 14
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 2
29933: PUSH
29934: LD_INT 3
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: ST_TO_ADDR
29946: GO 30077
29948: LD_INT 1
29950: DOUBLE
29951: EQUAL
29952: IFTRUE 29956
29954: GO 30018
29956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29957: LD_ADDR_VAR 0 3
29961: PUSH
29962: LD_INT 11
29964: PUSH
29965: LD_INT 12
29967: PUSH
29968: LD_INT 13
29970: PUSH
29971: LD_INT 14
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: LD_INT 3
29982: PUSH
29983: LD_INT 4
29985: PUSH
29986: LD_INT 5
29988: PUSH
29989: LD_INT 21
29991: PUSH
29992: LD_INT 23
29994: PUSH
29995: LD_INT 22
29997: PUSH
29998: LD_INT 24
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: ST_TO_ADDR
30016: GO 30077
30018: LD_INT 3
30020: DOUBLE
30021: EQUAL
30022: IFTRUE 30026
30024: GO 30076
30026: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30027: LD_ADDR_VAR 0 3
30031: PUSH
30032: LD_INT 13
30034: PUSH
30035: LD_INT 14
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: LD_INT 3
30043: PUSH
30044: LD_INT 4
30046: PUSH
30047: LD_INT 5
30049: PUSH
30050: LD_INT 21
30052: PUSH
30053: LD_INT 22
30055: PUSH
30056: LD_INT 23
30058: PUSH
30059: LD_INT 24
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: ST_TO_ADDR
30074: GO 30077
30076: POP
// result := ( chassis in result ) ;
30077: LD_ADDR_VAR 0 3
30081: PUSH
30082: LD_VAR 0 1
30086: PUSH
30087: LD_VAR 0 3
30091: IN
30092: ST_TO_ADDR
// end ;
30093: LD_VAR 0 3
30097: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30098: LD_INT 0
30100: PPUSH
// if not chassis or not weapon then
30101: LD_VAR 0 1
30105: NOT
30106: PUSH
30107: LD_VAR 0 2
30111: NOT
30112: OR
30113: IFFALSE 30117
// exit ;
30115: GO 31177
// case weapon of us_machine_gun :
30117: LD_VAR 0 2
30121: PUSH
30122: LD_INT 2
30124: DOUBLE
30125: EQUAL
30126: IFTRUE 30130
30128: GO 30160
30130: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30131: LD_ADDR_VAR 0 3
30135: PUSH
30136: LD_INT 1
30138: PUSH
30139: LD_INT 2
30141: PUSH
30142: LD_INT 3
30144: PUSH
30145: LD_INT 4
30147: PUSH
30148: LD_INT 5
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: ST_TO_ADDR
30158: GO 31161
30160: LD_INT 3
30162: DOUBLE
30163: EQUAL
30164: IFTRUE 30168
30166: GO 30198
30168: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30169: LD_ADDR_VAR 0 3
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: LD_INT 2
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: LD_INT 4
30185: PUSH
30186: LD_INT 5
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: ST_TO_ADDR
30196: GO 31161
30198: LD_INT 11
30200: DOUBLE
30201: EQUAL
30202: IFTRUE 30206
30204: GO 30236
30206: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30207: LD_ADDR_VAR 0 3
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: LD_INT 3
30220: PUSH
30221: LD_INT 4
30223: PUSH
30224: LD_INT 5
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: ST_TO_ADDR
30234: GO 31161
30236: LD_INT 4
30238: DOUBLE
30239: EQUAL
30240: IFTRUE 30244
30242: GO 30270
30244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30245: LD_ADDR_VAR 0 3
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: LD_INT 4
30258: PUSH
30259: LD_INT 5
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: ST_TO_ADDR
30268: GO 31161
30270: LD_INT 5
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30304
30278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30279: LD_ADDR_VAR 0 3
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: LD_INT 3
30289: PUSH
30290: LD_INT 4
30292: PUSH
30293: LD_INT 5
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: ST_TO_ADDR
30302: GO 31161
30304: LD_INT 9
30306: DOUBLE
30307: EQUAL
30308: IFTRUE 30312
30310: GO 30338
30312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30313: LD_ADDR_VAR 0 3
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 3
30323: PUSH
30324: LD_INT 4
30326: PUSH
30327: LD_INT 5
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: ST_TO_ADDR
30336: GO 31161
30338: LD_INT 7
30340: DOUBLE
30341: EQUAL
30342: IFTRUE 30346
30344: GO 30372
30346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30347: LD_ADDR_VAR 0 3
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: LD_INT 4
30360: PUSH
30361: LD_INT 5
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: ST_TO_ADDR
30370: GO 31161
30372: LD_INT 12
30374: DOUBLE
30375: EQUAL
30376: IFTRUE 30380
30378: GO 30406
30380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30381: LD_ADDR_VAR 0 3
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: LD_INT 3
30391: PUSH
30392: LD_INT 4
30394: PUSH
30395: LD_INT 5
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: ST_TO_ADDR
30404: GO 31161
30406: LD_INT 13
30408: DOUBLE
30409: EQUAL
30410: IFTRUE 30414
30412: GO 30440
30414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30415: LD_ADDR_VAR 0 3
30419: PUSH
30420: LD_INT 2
30422: PUSH
30423: LD_INT 3
30425: PUSH
30426: LD_INT 4
30428: PUSH
30429: LD_INT 5
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: ST_TO_ADDR
30438: GO 31161
30440: LD_INT 14
30442: DOUBLE
30443: EQUAL
30444: IFTRUE 30448
30446: GO 30466
30448: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30449: LD_ADDR_VAR 0 3
30453: PUSH
30454: LD_INT 4
30456: PUSH
30457: LD_INT 5
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: ST_TO_ADDR
30464: GO 31161
30466: LD_INT 6
30468: DOUBLE
30469: EQUAL
30470: IFTRUE 30474
30472: GO 30492
30474: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30475: LD_ADDR_VAR 0 3
30479: PUSH
30480: LD_INT 4
30482: PUSH
30483: LD_INT 5
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: ST_TO_ADDR
30490: GO 31161
30492: LD_INT 10
30494: DOUBLE
30495: EQUAL
30496: IFTRUE 30500
30498: GO 30518
30500: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30501: LD_ADDR_VAR 0 3
30505: PUSH
30506: LD_INT 4
30508: PUSH
30509: LD_INT 5
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: ST_TO_ADDR
30516: GO 31161
30518: LD_INT 22
30520: DOUBLE
30521: EQUAL
30522: IFTRUE 30526
30524: GO 30552
30526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30527: LD_ADDR_VAR 0 3
30531: PUSH
30532: LD_INT 11
30534: PUSH
30535: LD_INT 12
30537: PUSH
30538: LD_INT 13
30540: PUSH
30541: LD_INT 14
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: ST_TO_ADDR
30550: GO 31161
30552: LD_INT 23
30554: DOUBLE
30555: EQUAL
30556: IFTRUE 30560
30558: GO 30586
30560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30561: LD_ADDR_VAR 0 3
30565: PUSH
30566: LD_INT 11
30568: PUSH
30569: LD_INT 12
30571: PUSH
30572: LD_INT 13
30574: PUSH
30575: LD_INT 14
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: ST_TO_ADDR
30584: GO 31161
30586: LD_INT 24
30588: DOUBLE
30589: EQUAL
30590: IFTRUE 30594
30592: GO 30620
30594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30595: LD_ADDR_VAR 0 3
30599: PUSH
30600: LD_INT 11
30602: PUSH
30603: LD_INT 12
30605: PUSH
30606: LD_INT 13
30608: PUSH
30609: LD_INT 14
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: ST_TO_ADDR
30618: GO 31161
30620: LD_INT 30
30622: DOUBLE
30623: EQUAL
30624: IFTRUE 30628
30626: GO 30654
30628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30629: LD_ADDR_VAR 0 3
30633: PUSH
30634: LD_INT 11
30636: PUSH
30637: LD_INT 12
30639: PUSH
30640: LD_INT 13
30642: PUSH
30643: LD_INT 14
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: ST_TO_ADDR
30652: GO 31161
30654: LD_INT 25
30656: DOUBLE
30657: EQUAL
30658: IFTRUE 30662
30660: GO 30680
30662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30663: LD_ADDR_VAR 0 3
30667: PUSH
30668: LD_INT 13
30670: PUSH
30671: LD_INT 14
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: ST_TO_ADDR
30678: GO 31161
30680: LD_INT 27
30682: DOUBLE
30683: EQUAL
30684: IFTRUE 30688
30686: GO 30706
30688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30689: LD_ADDR_VAR 0 3
30693: PUSH
30694: LD_INT 13
30696: PUSH
30697: LD_INT 14
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: ST_TO_ADDR
30704: GO 31161
30706: LD_INT 92
30708: DOUBLE
30709: EQUAL
30710: IFTRUE 30714
30712: GO 30740
30714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30715: LD_ADDR_VAR 0 3
30719: PUSH
30720: LD_INT 11
30722: PUSH
30723: LD_INT 12
30725: PUSH
30726: LD_INT 13
30728: PUSH
30729: LD_INT 14
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: ST_TO_ADDR
30738: GO 31161
30740: LD_INT 28
30742: DOUBLE
30743: EQUAL
30744: IFTRUE 30748
30746: GO 30766
30748: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30749: LD_ADDR_VAR 0 3
30753: PUSH
30754: LD_INT 13
30756: PUSH
30757: LD_INT 14
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: ST_TO_ADDR
30764: GO 31161
30766: LD_INT 29
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30792
30774: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30775: LD_ADDR_VAR 0 3
30779: PUSH
30780: LD_INT 13
30782: PUSH
30783: LD_INT 14
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: ST_TO_ADDR
30790: GO 31161
30792: LD_INT 31
30794: DOUBLE
30795: EQUAL
30796: IFTRUE 30800
30798: GO 30818
30800: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30801: LD_ADDR_VAR 0 3
30805: PUSH
30806: LD_INT 13
30808: PUSH
30809: LD_INT 14
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: ST_TO_ADDR
30816: GO 31161
30818: LD_INT 26
30820: DOUBLE
30821: EQUAL
30822: IFTRUE 30826
30824: GO 30844
30826: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30827: LD_ADDR_VAR 0 3
30831: PUSH
30832: LD_INT 13
30834: PUSH
30835: LD_INT 14
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: ST_TO_ADDR
30842: GO 31161
30844: LD_INT 42
30846: DOUBLE
30847: EQUAL
30848: IFTRUE 30852
30850: GO 30878
30852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30853: LD_ADDR_VAR 0 3
30857: PUSH
30858: LD_INT 21
30860: PUSH
30861: LD_INT 22
30863: PUSH
30864: LD_INT 23
30866: PUSH
30867: LD_INT 24
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: ST_TO_ADDR
30876: GO 31161
30878: LD_INT 43
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 30912
30886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: LD_INT 21
30894: PUSH
30895: LD_INT 22
30897: PUSH
30898: LD_INT 23
30900: PUSH
30901: LD_INT 24
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: ST_TO_ADDR
30910: GO 31161
30912: LD_INT 44
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 30946
30920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30921: LD_ADDR_VAR 0 3
30925: PUSH
30926: LD_INT 21
30928: PUSH
30929: LD_INT 22
30931: PUSH
30932: LD_INT 23
30934: PUSH
30935: LD_INT 24
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: ST_TO_ADDR
30944: GO 31161
30946: LD_INT 45
30948: DOUBLE
30949: EQUAL
30950: IFTRUE 30954
30952: GO 30980
30954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30955: LD_ADDR_VAR 0 3
30959: PUSH
30960: LD_INT 21
30962: PUSH
30963: LD_INT 22
30965: PUSH
30966: LD_INT 23
30968: PUSH
30969: LD_INT 24
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: ST_TO_ADDR
30978: GO 31161
30980: LD_INT 49
30982: DOUBLE
30983: EQUAL
30984: IFTRUE 30988
30986: GO 31014
30988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30989: LD_ADDR_VAR 0 3
30993: PUSH
30994: LD_INT 21
30996: PUSH
30997: LD_INT 22
30999: PUSH
31000: LD_INT 23
31002: PUSH
31003: LD_INT 24
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: ST_TO_ADDR
31012: GO 31161
31014: LD_INT 51
31016: DOUBLE
31017: EQUAL
31018: IFTRUE 31022
31020: GO 31048
31022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31023: LD_ADDR_VAR 0 3
31027: PUSH
31028: LD_INT 21
31030: PUSH
31031: LD_INT 22
31033: PUSH
31034: LD_INT 23
31036: PUSH
31037: LD_INT 24
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: ST_TO_ADDR
31046: GO 31161
31048: LD_INT 52
31050: DOUBLE
31051: EQUAL
31052: IFTRUE 31056
31054: GO 31082
31056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_INT 21
31064: PUSH
31065: LD_INT 22
31067: PUSH
31068: LD_INT 23
31070: PUSH
31071: LD_INT 24
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: ST_TO_ADDR
31080: GO 31161
31082: LD_INT 53
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31090
31088: GO 31108
31090: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: LD_INT 23
31098: PUSH
31099: LD_INT 24
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: ST_TO_ADDR
31106: GO 31161
31108: LD_INT 46
31110: DOUBLE
31111: EQUAL
31112: IFTRUE 31116
31114: GO 31134
31116: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31117: LD_ADDR_VAR 0 3
31121: PUSH
31122: LD_INT 23
31124: PUSH
31125: LD_INT 24
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: ST_TO_ADDR
31132: GO 31161
31134: LD_INT 47
31136: DOUBLE
31137: EQUAL
31138: IFTRUE 31142
31140: GO 31160
31142: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31143: LD_ADDR_VAR 0 3
31147: PUSH
31148: LD_INT 23
31150: PUSH
31151: LD_INT 24
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: ST_TO_ADDR
31158: GO 31161
31160: POP
// result := ( chassis in result ) ;
31161: LD_ADDR_VAR 0 3
31165: PUSH
31166: LD_VAR 0 1
31170: PUSH
31171: LD_VAR 0 3
31175: IN
31176: ST_TO_ADDR
// end ;
31177: LD_VAR 0 3
31181: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31182: LD_INT 0
31184: PPUSH
31185: PPUSH
31186: PPUSH
31187: PPUSH
31188: PPUSH
31189: PPUSH
31190: PPUSH
// result := array ;
31191: LD_ADDR_VAR 0 5
31195: PUSH
31196: LD_VAR 0 1
31200: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31201: LD_VAR 0 1
31205: NOT
31206: PUSH
31207: LD_VAR 0 2
31211: NOT
31212: OR
31213: PUSH
31214: LD_VAR 0 3
31218: NOT
31219: OR
31220: PUSH
31221: LD_VAR 0 2
31225: PUSH
31226: LD_VAR 0 1
31230: GREATER
31231: OR
31232: PUSH
31233: LD_VAR 0 3
31237: PUSH
31238: LD_VAR 0 1
31242: GREATER
31243: OR
31244: IFFALSE 31248
// exit ;
31246: GO 31544
// if direction then
31248: LD_VAR 0 4
31252: IFFALSE 31316
// begin d := 1 ;
31254: LD_ADDR_VAR 0 9
31258: PUSH
31259: LD_INT 1
31261: ST_TO_ADDR
// if i_from > i_to then
31262: LD_VAR 0 2
31266: PUSH
31267: LD_VAR 0 3
31271: GREATER
31272: IFFALSE 31298
// length := ( array - i_from ) + i_to else
31274: LD_ADDR_VAR 0 11
31278: PUSH
31279: LD_VAR 0 1
31283: PUSH
31284: LD_VAR 0 2
31288: MINUS
31289: PUSH
31290: LD_VAR 0 3
31294: PLUS
31295: ST_TO_ADDR
31296: GO 31314
// length := i_to - i_from ;
31298: LD_ADDR_VAR 0 11
31302: PUSH
31303: LD_VAR 0 3
31307: PUSH
31308: LD_VAR 0 2
31312: MINUS
31313: ST_TO_ADDR
// end else
31314: GO 31377
// begin d := - 1 ;
31316: LD_ADDR_VAR 0 9
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: ST_TO_ADDR
// if i_from > i_to then
31325: LD_VAR 0 2
31329: PUSH
31330: LD_VAR 0 3
31334: GREATER
31335: IFFALSE 31355
// length := i_from - i_to else
31337: LD_ADDR_VAR 0 11
31341: PUSH
31342: LD_VAR 0 2
31346: PUSH
31347: LD_VAR 0 3
31351: MINUS
31352: ST_TO_ADDR
31353: GO 31377
// length := ( array - i_to ) + i_from ;
31355: LD_ADDR_VAR 0 11
31359: PUSH
31360: LD_VAR 0 1
31364: PUSH
31365: LD_VAR 0 3
31369: MINUS
31370: PUSH
31371: LD_VAR 0 2
31375: PLUS
31376: ST_TO_ADDR
// end ; if not length then
31377: LD_VAR 0 11
31381: NOT
31382: IFFALSE 31386
// exit ;
31384: GO 31544
// tmp := array ;
31386: LD_ADDR_VAR 0 10
31390: PUSH
31391: LD_VAR 0 1
31395: ST_TO_ADDR
// for i = 1 to length do
31396: LD_ADDR_VAR 0 6
31400: PUSH
31401: DOUBLE
31402: LD_INT 1
31404: DEC
31405: ST_TO_ADDR
31406: LD_VAR 0 11
31410: PUSH
31411: FOR_TO
31412: IFFALSE 31532
// begin for j = 1 to array do
31414: LD_ADDR_VAR 0 7
31418: PUSH
31419: DOUBLE
31420: LD_INT 1
31422: DEC
31423: ST_TO_ADDR
31424: LD_VAR 0 1
31428: PUSH
31429: FOR_TO
31430: IFFALSE 31518
// begin k := j + d ;
31432: LD_ADDR_VAR 0 8
31436: PUSH
31437: LD_VAR 0 7
31441: PUSH
31442: LD_VAR 0 9
31446: PLUS
31447: ST_TO_ADDR
// if k > array then
31448: LD_VAR 0 8
31452: PUSH
31453: LD_VAR 0 1
31457: GREATER
31458: IFFALSE 31468
// k := 1 ;
31460: LD_ADDR_VAR 0 8
31464: PUSH
31465: LD_INT 1
31467: ST_TO_ADDR
// if not k then
31468: LD_VAR 0 8
31472: NOT
31473: IFFALSE 31485
// k := array ;
31475: LD_ADDR_VAR 0 8
31479: PUSH
31480: LD_VAR 0 1
31484: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31485: LD_ADDR_VAR 0 10
31489: PUSH
31490: LD_VAR 0 10
31494: PPUSH
31495: LD_VAR 0 8
31499: PPUSH
31500: LD_VAR 0 1
31504: PUSH
31505: LD_VAR 0 7
31509: ARRAY
31510: PPUSH
31511: CALL_OW 1
31515: ST_TO_ADDR
// end ;
31516: GO 31429
31518: POP
31519: POP
// array := tmp ;
31520: LD_ADDR_VAR 0 1
31524: PUSH
31525: LD_VAR 0 10
31529: ST_TO_ADDR
// end ;
31530: GO 31411
31532: POP
31533: POP
// result := array ;
31534: LD_ADDR_VAR 0 5
31538: PUSH
31539: LD_VAR 0 1
31543: ST_TO_ADDR
// end ;
31544: LD_VAR 0 5
31548: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31549: LD_INT 0
31551: PPUSH
31552: PPUSH
// result := 0 ;
31553: LD_ADDR_VAR 0 3
31557: PUSH
31558: LD_INT 0
31560: ST_TO_ADDR
// if not array or not value in array then
31561: LD_VAR 0 1
31565: NOT
31566: PUSH
31567: LD_VAR 0 2
31571: PUSH
31572: LD_VAR 0 1
31576: IN
31577: NOT
31578: OR
31579: IFFALSE 31583
// exit ;
31581: GO 31637
// for i = 1 to array do
31583: LD_ADDR_VAR 0 4
31587: PUSH
31588: DOUBLE
31589: LD_INT 1
31591: DEC
31592: ST_TO_ADDR
31593: LD_VAR 0 1
31597: PUSH
31598: FOR_TO
31599: IFFALSE 31635
// if value = array [ i ] then
31601: LD_VAR 0 2
31605: PUSH
31606: LD_VAR 0 1
31610: PUSH
31611: LD_VAR 0 4
31615: ARRAY
31616: EQUAL
31617: IFFALSE 31633
// begin result := i ;
31619: LD_ADDR_VAR 0 3
31623: PUSH
31624: LD_VAR 0 4
31628: ST_TO_ADDR
// exit ;
31629: POP
31630: POP
31631: GO 31637
// end ;
31633: GO 31598
31635: POP
31636: POP
// end ;
31637: LD_VAR 0 3
31641: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31642: LD_INT 0
31644: PPUSH
// vc_chassis := chassis ;
31645: LD_ADDR_OWVAR 37
31649: PUSH
31650: LD_VAR 0 1
31654: ST_TO_ADDR
// vc_engine := engine ;
31655: LD_ADDR_OWVAR 39
31659: PUSH
31660: LD_VAR 0 2
31664: ST_TO_ADDR
// vc_control := control ;
31665: LD_ADDR_OWVAR 38
31669: PUSH
31670: LD_VAR 0 3
31674: ST_TO_ADDR
// vc_weapon := weapon ;
31675: LD_ADDR_OWVAR 40
31679: PUSH
31680: LD_VAR 0 4
31684: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31685: LD_ADDR_OWVAR 41
31689: PUSH
31690: LD_VAR 0 5
31694: ST_TO_ADDR
// end ;
31695: LD_VAR 0 6
31699: RET
// export function WantPlant ( unit ) ; var task ; begin
31700: LD_INT 0
31702: PPUSH
31703: PPUSH
// result := false ;
31704: LD_ADDR_VAR 0 2
31708: PUSH
31709: LD_INT 0
31711: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31712: LD_ADDR_VAR 0 3
31716: PUSH
31717: LD_VAR 0 1
31721: PPUSH
31722: CALL_OW 437
31726: ST_TO_ADDR
// if task then
31727: LD_VAR 0 3
31731: IFFALSE 31759
// if task [ 1 ] [ 1 ] = p then
31733: LD_VAR 0 3
31737: PUSH
31738: LD_INT 1
31740: ARRAY
31741: PUSH
31742: LD_INT 1
31744: ARRAY
31745: PUSH
31746: LD_STRING p
31748: EQUAL
31749: IFFALSE 31759
// result := true ;
31751: LD_ADDR_VAR 0 2
31755: PUSH
31756: LD_INT 1
31758: ST_TO_ADDR
// end ;
31759: LD_VAR 0 2
31763: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31764: LD_INT 0
31766: PPUSH
31767: PPUSH
31768: PPUSH
31769: PPUSH
// if pos < 1 then
31770: LD_VAR 0 2
31774: PUSH
31775: LD_INT 1
31777: LESS
31778: IFFALSE 31782
// exit ;
31780: GO 32085
// if pos = 1 then
31782: LD_VAR 0 2
31786: PUSH
31787: LD_INT 1
31789: EQUAL
31790: IFFALSE 31823
// result := Replace ( arr , pos [ 1 ] , value ) else
31792: LD_ADDR_VAR 0 4
31796: PUSH
31797: LD_VAR 0 1
31801: PPUSH
31802: LD_VAR 0 2
31806: PUSH
31807: LD_INT 1
31809: ARRAY
31810: PPUSH
31811: LD_VAR 0 3
31815: PPUSH
31816: CALL_OW 1
31820: ST_TO_ADDR
31821: GO 32085
// begin tmp := arr ;
31823: LD_ADDR_VAR 0 6
31827: PUSH
31828: LD_VAR 0 1
31832: ST_TO_ADDR
// s_arr := [ tmp ] ;
31833: LD_ADDR_VAR 0 7
31837: PUSH
31838: LD_VAR 0 6
31842: PUSH
31843: EMPTY
31844: LIST
31845: ST_TO_ADDR
// for i = 1 to pos - 1 do
31846: LD_ADDR_VAR 0 5
31850: PUSH
31851: DOUBLE
31852: LD_INT 1
31854: DEC
31855: ST_TO_ADDR
31856: LD_VAR 0 2
31860: PUSH
31861: LD_INT 1
31863: MINUS
31864: PUSH
31865: FOR_TO
31866: IFFALSE 31911
// begin tmp := tmp [ pos [ i ] ] ;
31868: LD_ADDR_VAR 0 6
31872: PUSH
31873: LD_VAR 0 6
31877: PUSH
31878: LD_VAR 0 2
31882: PUSH
31883: LD_VAR 0 5
31887: ARRAY
31888: ARRAY
31889: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31890: LD_ADDR_VAR 0 7
31894: PUSH
31895: LD_VAR 0 7
31899: PUSH
31900: LD_VAR 0 6
31904: PUSH
31905: EMPTY
31906: LIST
31907: ADD
31908: ST_TO_ADDR
// end ;
31909: GO 31865
31911: POP
31912: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31913: LD_ADDR_VAR 0 6
31917: PUSH
31918: LD_VAR 0 6
31922: PPUSH
31923: LD_VAR 0 2
31927: PUSH
31928: LD_VAR 0 2
31932: ARRAY
31933: PPUSH
31934: LD_VAR 0 3
31938: PPUSH
31939: CALL_OW 1
31943: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31944: LD_ADDR_VAR 0 7
31948: PUSH
31949: LD_VAR 0 7
31953: PPUSH
31954: LD_VAR 0 7
31958: PPUSH
31959: LD_VAR 0 6
31963: PPUSH
31964: CALL_OW 1
31968: ST_TO_ADDR
// for i = s_arr downto 2 do
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: DOUBLE
31975: LD_VAR 0 7
31979: INC
31980: ST_TO_ADDR
31981: LD_INT 2
31983: PUSH
31984: FOR_DOWNTO
31985: IFFALSE 32069
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31987: LD_ADDR_VAR 0 6
31991: PUSH
31992: LD_VAR 0 7
31996: PUSH
31997: LD_VAR 0 5
32001: PUSH
32002: LD_INT 1
32004: MINUS
32005: ARRAY
32006: PPUSH
32007: LD_VAR 0 2
32011: PUSH
32012: LD_VAR 0 5
32016: PUSH
32017: LD_INT 1
32019: MINUS
32020: ARRAY
32021: PPUSH
32022: LD_VAR 0 7
32026: PUSH
32027: LD_VAR 0 5
32031: ARRAY
32032: PPUSH
32033: CALL_OW 1
32037: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32038: LD_ADDR_VAR 0 7
32042: PUSH
32043: LD_VAR 0 7
32047: PPUSH
32048: LD_VAR 0 5
32052: PUSH
32053: LD_INT 1
32055: MINUS
32056: PPUSH
32057: LD_VAR 0 6
32061: PPUSH
32062: CALL_OW 1
32066: ST_TO_ADDR
// end ;
32067: GO 31984
32069: POP
32070: POP
// result := s_arr [ 1 ] ;
32071: LD_ADDR_VAR 0 4
32075: PUSH
32076: LD_VAR 0 7
32080: PUSH
32081: LD_INT 1
32083: ARRAY
32084: ST_TO_ADDR
// end ; end ;
32085: LD_VAR 0 4
32089: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32090: LD_INT 0
32092: PPUSH
32093: PPUSH
// if not list then
32094: LD_VAR 0 1
32098: NOT
32099: IFFALSE 32103
// exit ;
32101: GO 32194
// i := list [ pos1 ] ;
32103: LD_ADDR_VAR 0 5
32107: PUSH
32108: LD_VAR 0 1
32112: PUSH
32113: LD_VAR 0 2
32117: ARRAY
32118: ST_TO_ADDR
// if not i then
32119: LD_VAR 0 5
32123: NOT
32124: IFFALSE 32128
// exit ;
32126: GO 32194
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32128: LD_ADDR_VAR 0 1
32132: PUSH
32133: LD_VAR 0 1
32137: PPUSH
32138: LD_VAR 0 2
32142: PPUSH
32143: LD_VAR 0 1
32147: PUSH
32148: LD_VAR 0 3
32152: ARRAY
32153: PPUSH
32154: CALL_OW 1
32158: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32159: LD_ADDR_VAR 0 1
32163: PUSH
32164: LD_VAR 0 1
32168: PPUSH
32169: LD_VAR 0 3
32173: PPUSH
32174: LD_VAR 0 5
32178: PPUSH
32179: CALL_OW 1
32183: ST_TO_ADDR
// result := list ;
32184: LD_ADDR_VAR 0 4
32188: PUSH
32189: LD_VAR 0 1
32193: ST_TO_ADDR
// end ;
32194: LD_VAR 0 4
32198: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32199: LD_INT 0
32201: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32202: LD_ADDR_VAR 0 5
32206: PUSH
32207: LD_VAR 0 1
32211: PPUSH
32212: CALL_OW 250
32216: PPUSH
32217: LD_VAR 0 1
32221: PPUSH
32222: CALL_OW 251
32226: PPUSH
32227: LD_VAR 0 2
32231: PPUSH
32232: LD_VAR 0 3
32236: PPUSH
32237: LD_VAR 0 4
32241: PPUSH
32242: CALL 32252 0 5
32246: ST_TO_ADDR
// end ;
32247: LD_VAR 0 5
32251: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32252: LD_INT 0
32254: PPUSH
32255: PPUSH
32256: PPUSH
32257: PPUSH
// if not list then
32258: LD_VAR 0 3
32262: NOT
32263: IFFALSE 32267
// exit ;
32265: GO 32655
// result := [ ] ;
32267: LD_ADDR_VAR 0 6
32271: PUSH
32272: EMPTY
32273: ST_TO_ADDR
// for i in list do
32274: LD_ADDR_VAR 0 7
32278: PUSH
32279: LD_VAR 0 3
32283: PUSH
32284: FOR_IN
32285: IFFALSE 32487
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32287: LD_ADDR_VAR 0 9
32291: PUSH
32292: LD_VAR 0 7
32296: PPUSH
32297: LD_VAR 0 1
32301: PPUSH
32302: LD_VAR 0 2
32306: PPUSH
32307: CALL_OW 297
32311: ST_TO_ADDR
// if not result then
32312: LD_VAR 0 6
32316: NOT
32317: IFFALSE 32343
// result := [ [ i , tmp ] ] else
32319: LD_ADDR_VAR 0 6
32323: PUSH
32324: LD_VAR 0 7
32328: PUSH
32329: LD_VAR 0 9
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: EMPTY
32339: LIST
32340: ST_TO_ADDR
32341: GO 32485
// begin if result [ result ] [ 2 ] < tmp then
32343: LD_VAR 0 6
32347: PUSH
32348: LD_VAR 0 6
32352: ARRAY
32353: PUSH
32354: LD_INT 2
32356: ARRAY
32357: PUSH
32358: LD_VAR 0 9
32362: LESS
32363: IFFALSE 32405
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32365: LD_ADDR_VAR 0 6
32369: PUSH
32370: LD_VAR 0 6
32374: PPUSH
32375: LD_VAR 0 6
32379: PUSH
32380: LD_INT 1
32382: PLUS
32383: PPUSH
32384: LD_VAR 0 7
32388: PUSH
32389: LD_VAR 0 9
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PPUSH
32398: CALL_OW 2
32402: ST_TO_ADDR
32403: GO 32485
// for j = 1 to result do
32405: LD_ADDR_VAR 0 8
32409: PUSH
32410: DOUBLE
32411: LD_INT 1
32413: DEC
32414: ST_TO_ADDR
32415: LD_VAR 0 6
32419: PUSH
32420: FOR_TO
32421: IFFALSE 32483
// begin if tmp < result [ j ] [ 2 ] then
32423: LD_VAR 0 9
32427: PUSH
32428: LD_VAR 0 6
32432: PUSH
32433: LD_VAR 0 8
32437: ARRAY
32438: PUSH
32439: LD_INT 2
32441: ARRAY
32442: LESS
32443: IFFALSE 32481
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32445: LD_ADDR_VAR 0 6
32449: PUSH
32450: LD_VAR 0 6
32454: PPUSH
32455: LD_VAR 0 8
32459: PPUSH
32460: LD_VAR 0 7
32464: PUSH
32465: LD_VAR 0 9
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PPUSH
32474: CALL_OW 2
32478: ST_TO_ADDR
// break ;
32479: GO 32483
// end ; end ;
32481: GO 32420
32483: POP
32484: POP
// end ; end ;
32485: GO 32284
32487: POP
32488: POP
// if result and not asc then
32489: LD_VAR 0 6
32493: PUSH
32494: LD_VAR 0 4
32498: NOT
32499: AND
32500: IFFALSE 32575
// begin tmp := result ;
32502: LD_ADDR_VAR 0 9
32506: PUSH
32507: LD_VAR 0 6
32511: ST_TO_ADDR
// for i = tmp downto 1 do
32512: LD_ADDR_VAR 0 7
32516: PUSH
32517: DOUBLE
32518: LD_VAR 0 9
32522: INC
32523: ST_TO_ADDR
32524: LD_INT 1
32526: PUSH
32527: FOR_DOWNTO
32528: IFFALSE 32573
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32530: LD_ADDR_VAR 0 6
32534: PUSH
32535: LD_VAR 0 6
32539: PPUSH
32540: LD_VAR 0 9
32544: PUSH
32545: LD_VAR 0 7
32549: MINUS
32550: PUSH
32551: LD_INT 1
32553: PLUS
32554: PPUSH
32555: LD_VAR 0 9
32559: PUSH
32560: LD_VAR 0 7
32564: ARRAY
32565: PPUSH
32566: CALL_OW 1
32570: ST_TO_ADDR
32571: GO 32527
32573: POP
32574: POP
// end ; tmp := [ ] ;
32575: LD_ADDR_VAR 0 9
32579: PUSH
32580: EMPTY
32581: ST_TO_ADDR
// if mode then
32582: LD_VAR 0 5
32586: IFFALSE 32655
// begin for i = 1 to result do
32588: LD_ADDR_VAR 0 7
32592: PUSH
32593: DOUBLE
32594: LD_INT 1
32596: DEC
32597: ST_TO_ADDR
32598: LD_VAR 0 6
32602: PUSH
32603: FOR_TO
32604: IFFALSE 32643
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32606: LD_ADDR_VAR 0 9
32610: PUSH
32611: LD_VAR 0 9
32615: PPUSH
32616: LD_VAR 0 7
32620: PPUSH
32621: LD_VAR 0 6
32625: PUSH
32626: LD_VAR 0 7
32630: ARRAY
32631: PUSH
32632: LD_INT 1
32634: ARRAY
32635: PPUSH
32636: CALL_OW 1
32640: ST_TO_ADDR
32641: GO 32603
32643: POP
32644: POP
// result := tmp ;
32645: LD_ADDR_VAR 0 6
32649: PUSH
32650: LD_VAR 0 9
32654: ST_TO_ADDR
// end ; end ;
32655: LD_VAR 0 6
32659: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32660: LD_INT 0
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
32666: PPUSH
32667: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32668: LD_ADDR_VAR 0 5
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: EMPTY
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: ST_TO_ADDR
// if not x or not y then
32690: LD_VAR 0 2
32694: NOT
32695: PUSH
32696: LD_VAR 0 3
32700: NOT
32701: OR
32702: IFFALSE 32706
// exit ;
32704: GO 34356
// if not range then
32706: LD_VAR 0 4
32710: NOT
32711: IFFALSE 32721
// range := 10 ;
32713: LD_ADDR_VAR 0 4
32717: PUSH
32718: LD_INT 10
32720: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32721: LD_ADDR_VAR 0 8
32725: PUSH
32726: LD_INT 81
32728: PUSH
32729: LD_VAR 0 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 92
32740: PUSH
32741: LD_VAR 0 2
32745: PUSH
32746: LD_VAR 0 3
32750: PUSH
32751: LD_VAR 0 4
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 3
32764: PUSH
32765: LD_INT 21
32767: PUSH
32768: LD_INT 3
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: PPUSH
32784: CALL_OW 69
32788: ST_TO_ADDR
// if not tmp then
32789: LD_VAR 0 8
32793: NOT
32794: IFFALSE 32798
// exit ;
32796: GO 34356
// for i in tmp do
32798: LD_ADDR_VAR 0 6
32802: PUSH
32803: LD_VAR 0 8
32807: PUSH
32808: FOR_IN
32809: IFFALSE 34331
// begin points := [ 0 , 0 , 0 ] ;
32811: LD_ADDR_VAR 0 9
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: ST_TO_ADDR
// bpoints := 1 ;
32830: LD_ADDR_VAR 0 10
32834: PUSH
32835: LD_INT 1
32837: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32838: LD_VAR 0 6
32842: PPUSH
32843: CALL_OW 247
32847: PUSH
32848: LD_INT 1
32850: DOUBLE
32851: EQUAL
32852: IFTRUE 32856
32854: GO 33434
32856: POP
// begin if GetClass ( i ) = 1 then
32857: LD_VAR 0 6
32861: PPUSH
32862: CALL_OW 257
32866: PUSH
32867: LD_INT 1
32869: EQUAL
32870: IFFALSE 32891
// points := [ 10 , 5 , 3 ] ;
32872: LD_ADDR_VAR 0 9
32876: PUSH
32877: LD_INT 10
32879: PUSH
32880: LD_INT 5
32882: PUSH
32883: LD_INT 3
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32891: LD_VAR 0 6
32895: PPUSH
32896: CALL_OW 257
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: LD_INT 3
32906: PUSH
32907: LD_INT 4
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: IN
32915: IFFALSE 32936
// points := [ 3 , 2 , 1 ] ;
32917: LD_ADDR_VAR 0 9
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 2
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32936: LD_VAR 0 6
32940: PPUSH
32941: CALL_OW 257
32945: PUSH
32946: LD_INT 5
32948: EQUAL
32949: IFFALSE 32970
// points := [ 130 , 5 , 2 ] ;
32951: LD_ADDR_VAR 0 9
32955: PUSH
32956: LD_INT 130
32958: PUSH
32959: LD_INT 5
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32970: LD_VAR 0 6
32974: PPUSH
32975: CALL_OW 257
32979: PUSH
32980: LD_INT 8
32982: EQUAL
32983: IFFALSE 33004
// points := [ 35 , 35 , 30 ] ;
32985: LD_ADDR_VAR 0 9
32989: PUSH
32990: LD_INT 35
32992: PUSH
32993: LD_INT 35
32995: PUSH
32996: LD_INT 30
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: LIST
33003: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33004: LD_VAR 0 6
33008: PPUSH
33009: CALL_OW 257
33013: PUSH
33014: LD_INT 9
33016: EQUAL
33017: IFFALSE 33038
// points := [ 20 , 55 , 40 ] ;
33019: LD_ADDR_VAR 0 9
33023: PUSH
33024: LD_INT 20
33026: PUSH
33027: LD_INT 55
33029: PUSH
33030: LD_INT 40
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33038: LD_VAR 0 6
33042: PPUSH
33043: CALL_OW 257
33047: PUSH
33048: LD_INT 12
33050: PUSH
33051: LD_INT 16
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: IN
33058: IFFALSE 33079
// points := [ 5 , 3 , 2 ] ;
33060: LD_ADDR_VAR 0 9
33064: PUSH
33065: LD_INT 5
33067: PUSH
33068: LD_INT 3
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33079: LD_VAR 0 6
33083: PPUSH
33084: CALL_OW 257
33088: PUSH
33089: LD_INT 17
33091: EQUAL
33092: IFFALSE 33113
// points := [ 100 , 50 , 75 ] ;
33094: LD_ADDR_VAR 0 9
33098: PUSH
33099: LD_INT 100
33101: PUSH
33102: LD_INT 50
33104: PUSH
33105: LD_INT 75
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33113: LD_VAR 0 6
33117: PPUSH
33118: CALL_OW 257
33122: PUSH
33123: LD_INT 15
33125: EQUAL
33126: IFFALSE 33147
// points := [ 10 , 5 , 3 ] ;
33128: LD_ADDR_VAR 0 9
33132: PUSH
33133: LD_INT 10
33135: PUSH
33136: LD_INT 5
33138: PUSH
33139: LD_INT 3
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: LIST
33146: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33147: LD_VAR 0 6
33151: PPUSH
33152: CALL_OW 257
33156: PUSH
33157: LD_INT 14
33159: EQUAL
33160: IFFALSE 33181
// points := [ 10 , 0 , 0 ] ;
33162: LD_ADDR_VAR 0 9
33166: PUSH
33167: LD_INT 10
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33181: LD_VAR 0 6
33185: PPUSH
33186: CALL_OW 257
33190: PUSH
33191: LD_INT 11
33193: EQUAL
33194: IFFALSE 33215
// points := [ 30 , 10 , 5 ] ;
33196: LD_ADDR_VAR 0 9
33200: PUSH
33201: LD_INT 30
33203: PUSH
33204: LD_INT 10
33206: PUSH
33207: LD_INT 5
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: LIST
33214: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33215: LD_VAR 0 1
33219: PPUSH
33220: LD_INT 5
33222: PPUSH
33223: CALL_OW 321
33227: PUSH
33228: LD_INT 2
33230: EQUAL
33231: IFFALSE 33248
// bpoints := bpoints * 1.8 ;
33233: LD_ADDR_VAR 0 10
33237: PUSH
33238: LD_VAR 0 10
33242: PUSH
33243: LD_REAL  1.80000000000000E+0000
33246: MUL
33247: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33248: LD_VAR 0 6
33252: PPUSH
33253: CALL_OW 257
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: LD_INT 3
33266: PUSH
33267: LD_INT 4
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: IN
33276: PUSH
33277: LD_VAR 0 1
33281: PPUSH
33282: LD_INT 51
33284: PPUSH
33285: CALL_OW 321
33289: PUSH
33290: LD_INT 2
33292: EQUAL
33293: AND
33294: IFFALSE 33311
// bpoints := bpoints * 1.2 ;
33296: LD_ADDR_VAR 0 10
33300: PUSH
33301: LD_VAR 0 10
33305: PUSH
33306: LD_REAL  1.20000000000000E+0000
33309: MUL
33310: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33311: LD_VAR 0 6
33315: PPUSH
33316: CALL_OW 257
33320: PUSH
33321: LD_INT 5
33323: PUSH
33324: LD_INT 7
33326: PUSH
33327: LD_INT 9
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: LIST
33334: IN
33335: PUSH
33336: LD_VAR 0 1
33340: PPUSH
33341: LD_INT 52
33343: PPUSH
33344: CALL_OW 321
33348: PUSH
33349: LD_INT 2
33351: EQUAL
33352: AND
33353: IFFALSE 33370
// bpoints := bpoints * 1.5 ;
33355: LD_ADDR_VAR 0 10
33359: PUSH
33360: LD_VAR 0 10
33364: PUSH
33365: LD_REAL  1.50000000000000E+0000
33368: MUL
33369: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33370: LD_VAR 0 1
33374: PPUSH
33375: LD_INT 66
33377: PPUSH
33378: CALL_OW 321
33382: PUSH
33383: LD_INT 2
33385: EQUAL
33386: IFFALSE 33403
// bpoints := bpoints * 1.1 ;
33388: LD_ADDR_VAR 0 10
33392: PUSH
33393: LD_VAR 0 10
33397: PUSH
33398: LD_REAL  1.10000000000000E+0000
33401: MUL
33402: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33403: LD_ADDR_VAR 0 10
33407: PUSH
33408: LD_VAR 0 10
33412: PUSH
33413: LD_VAR 0 6
33417: PPUSH
33418: LD_INT 1
33420: PPUSH
33421: CALL_OW 259
33425: PUSH
33426: LD_REAL  1.15000000000000E+0000
33429: MUL
33430: MUL
33431: ST_TO_ADDR
// end ; unit_vehicle :
33432: GO 34260
33434: LD_INT 2
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 34248
33442: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33443: LD_VAR 0 6
33447: PPUSH
33448: CALL_OW 264
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: LD_INT 42
33458: PUSH
33459: LD_INT 24
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: IN
33467: IFFALSE 33488
// points := [ 25 , 5 , 3 ] ;
33469: LD_ADDR_VAR 0 9
33473: PUSH
33474: LD_INT 25
33476: PUSH
33477: LD_INT 5
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: LIST
33487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33488: LD_VAR 0 6
33492: PPUSH
33493: CALL_OW 264
33497: PUSH
33498: LD_INT 4
33500: PUSH
33501: LD_INT 43
33503: PUSH
33504: LD_INT 25
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: LIST
33511: IN
33512: IFFALSE 33533
// points := [ 40 , 15 , 5 ] ;
33514: LD_ADDR_VAR 0 9
33518: PUSH
33519: LD_INT 40
33521: PUSH
33522: LD_INT 15
33524: PUSH
33525: LD_INT 5
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: LIST
33532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33533: LD_VAR 0 6
33537: PPUSH
33538: CALL_OW 264
33542: PUSH
33543: LD_INT 3
33545: PUSH
33546: LD_INT 23
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: IN
33553: IFFALSE 33574
// points := [ 7 , 25 , 8 ] ;
33555: LD_ADDR_VAR 0 9
33559: PUSH
33560: LD_INT 7
33562: PUSH
33563: LD_INT 25
33565: PUSH
33566: LD_INT 8
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33574: LD_VAR 0 6
33578: PPUSH
33579: CALL_OW 264
33583: PUSH
33584: LD_INT 5
33586: PUSH
33587: LD_INT 27
33589: PUSH
33590: LD_INT 44
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: IN
33598: IFFALSE 33619
// points := [ 14 , 50 , 16 ] ;
33600: LD_ADDR_VAR 0 9
33604: PUSH
33605: LD_INT 14
33607: PUSH
33608: LD_INT 50
33610: PUSH
33611: LD_INT 16
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33619: LD_VAR 0 6
33623: PPUSH
33624: CALL_OW 264
33628: PUSH
33629: LD_INT 6
33631: PUSH
33632: LD_INT 46
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: IN
33639: IFFALSE 33660
// points := [ 32 , 120 , 70 ] ;
33641: LD_ADDR_VAR 0 9
33645: PUSH
33646: LD_INT 32
33648: PUSH
33649: LD_INT 120
33651: PUSH
33652: LD_INT 70
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33660: LD_VAR 0 6
33664: PPUSH
33665: CALL_OW 264
33669: PUSH
33670: LD_INT 7
33672: PUSH
33673: LD_INT 28
33675: PUSH
33676: LD_INT 45
33678: PUSH
33679: LD_INT 92
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: IN
33688: IFFALSE 33709
// points := [ 35 , 20 , 45 ] ;
33690: LD_ADDR_VAR 0 9
33694: PUSH
33695: LD_INT 35
33697: PUSH
33698: LD_INT 20
33700: PUSH
33701: LD_INT 45
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: LIST
33708: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33709: LD_VAR 0 6
33713: PPUSH
33714: CALL_OW 264
33718: PUSH
33719: LD_INT 47
33721: PUSH
33722: EMPTY
33723: LIST
33724: IN
33725: IFFALSE 33746
// points := [ 67 , 45 , 75 ] ;
33727: LD_ADDR_VAR 0 9
33731: PUSH
33732: LD_INT 67
33734: PUSH
33735: LD_INT 45
33737: PUSH
33738: LD_INT 75
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33746: LD_VAR 0 6
33750: PPUSH
33751: CALL_OW 264
33755: PUSH
33756: LD_INT 26
33758: PUSH
33759: EMPTY
33760: LIST
33761: IN
33762: IFFALSE 33783
// points := [ 120 , 30 , 80 ] ;
33764: LD_ADDR_VAR 0 9
33768: PUSH
33769: LD_INT 120
33771: PUSH
33772: LD_INT 30
33774: PUSH
33775: LD_INT 80
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33783: LD_VAR 0 6
33787: PPUSH
33788: CALL_OW 264
33792: PUSH
33793: LD_INT 22
33795: PUSH
33796: EMPTY
33797: LIST
33798: IN
33799: IFFALSE 33820
// points := [ 40 , 1 , 1 ] ;
33801: LD_ADDR_VAR 0 9
33805: PUSH
33806: LD_INT 40
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33820: LD_VAR 0 6
33824: PPUSH
33825: CALL_OW 264
33829: PUSH
33830: LD_INT 29
33832: PUSH
33833: EMPTY
33834: LIST
33835: IN
33836: IFFALSE 33857
// points := [ 70 , 200 , 400 ] ;
33838: LD_ADDR_VAR 0 9
33842: PUSH
33843: LD_INT 70
33845: PUSH
33846: LD_INT 200
33848: PUSH
33849: LD_INT 400
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33857: LD_VAR 0 6
33861: PPUSH
33862: CALL_OW 264
33866: PUSH
33867: LD_INT 14
33869: PUSH
33870: LD_INT 53
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: IN
33877: IFFALSE 33898
// points := [ 40 , 10 , 20 ] ;
33879: LD_ADDR_VAR 0 9
33883: PUSH
33884: LD_INT 40
33886: PUSH
33887: LD_INT 10
33889: PUSH
33890: LD_INT 20
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33898: LD_VAR 0 6
33902: PPUSH
33903: CALL_OW 264
33907: PUSH
33908: LD_INT 9
33910: PUSH
33911: EMPTY
33912: LIST
33913: IN
33914: IFFALSE 33935
// points := [ 5 , 70 , 20 ] ;
33916: LD_ADDR_VAR 0 9
33920: PUSH
33921: LD_INT 5
33923: PUSH
33924: LD_INT 70
33926: PUSH
33927: LD_INT 20
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33935: LD_VAR 0 6
33939: PPUSH
33940: CALL_OW 264
33944: PUSH
33945: LD_INT 10
33947: PUSH
33948: EMPTY
33949: LIST
33950: IN
33951: IFFALSE 33972
// points := [ 35 , 110 , 70 ] ;
33953: LD_ADDR_VAR 0 9
33957: PUSH
33958: LD_INT 35
33960: PUSH
33961: LD_INT 110
33963: PUSH
33964: LD_INT 70
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: LIST
33971: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33972: LD_VAR 0 6
33976: PPUSH
33977: CALL_OW 265
33981: PUSH
33982: LD_INT 25
33984: EQUAL
33985: IFFALSE 34006
// points := [ 80 , 65 , 100 ] ;
33987: LD_ADDR_VAR 0 9
33991: PUSH
33992: LD_INT 80
33994: PUSH
33995: LD_INT 65
33997: PUSH
33998: LD_INT 100
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34006: LD_VAR 0 6
34010: PPUSH
34011: CALL_OW 263
34015: PUSH
34016: LD_INT 1
34018: EQUAL
34019: IFFALSE 34054
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34021: LD_ADDR_VAR 0 10
34025: PUSH
34026: LD_VAR 0 10
34030: PUSH
34031: LD_VAR 0 6
34035: PPUSH
34036: CALL_OW 311
34040: PPUSH
34041: LD_INT 3
34043: PPUSH
34044: CALL_OW 259
34048: PUSH
34049: LD_INT 4
34051: MUL
34052: MUL
34053: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34054: LD_VAR 0 6
34058: PPUSH
34059: CALL_OW 263
34063: PUSH
34064: LD_INT 2
34066: EQUAL
34067: IFFALSE 34118
// begin j := IsControledBy ( i ) ;
34069: LD_ADDR_VAR 0 7
34073: PUSH
34074: LD_VAR 0 6
34078: PPUSH
34079: CALL_OW 312
34083: ST_TO_ADDR
// if j then
34084: LD_VAR 0 7
34088: IFFALSE 34118
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34090: LD_ADDR_VAR 0 10
34094: PUSH
34095: LD_VAR 0 10
34099: PUSH
34100: LD_VAR 0 7
34104: PPUSH
34105: LD_INT 3
34107: PPUSH
34108: CALL_OW 259
34112: PUSH
34113: LD_INT 3
34115: MUL
34116: MUL
34117: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34118: LD_VAR 0 6
34122: PPUSH
34123: CALL_OW 264
34127: PUSH
34128: LD_INT 5
34130: PUSH
34131: LD_INT 6
34133: PUSH
34134: LD_INT 46
34136: PUSH
34137: LD_INT 44
34139: PUSH
34140: LD_INT 47
34142: PUSH
34143: LD_INT 45
34145: PUSH
34146: LD_INT 28
34148: PUSH
34149: LD_INT 7
34151: PUSH
34152: LD_INT 27
34154: PUSH
34155: LD_INT 29
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: IN
34170: PUSH
34171: LD_VAR 0 1
34175: PPUSH
34176: LD_INT 52
34178: PPUSH
34179: CALL_OW 321
34183: PUSH
34184: LD_INT 2
34186: EQUAL
34187: AND
34188: IFFALSE 34205
// bpoints := bpoints * 1.2 ;
34190: LD_ADDR_VAR 0 10
34194: PUSH
34195: LD_VAR 0 10
34199: PUSH
34200: LD_REAL  1.20000000000000E+0000
34203: MUL
34204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34205: LD_VAR 0 6
34209: PPUSH
34210: CALL_OW 264
34214: PUSH
34215: LD_INT 6
34217: PUSH
34218: LD_INT 46
34220: PUSH
34221: LD_INT 47
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: IN
34229: IFFALSE 34246
// bpoints := bpoints * 1.2 ;
34231: LD_ADDR_VAR 0 10
34235: PUSH
34236: LD_VAR 0 10
34240: PUSH
34241: LD_REAL  1.20000000000000E+0000
34244: MUL
34245: ST_TO_ADDR
// end ; unit_building :
34246: GO 34260
34248: LD_INT 3
34250: DOUBLE
34251: EQUAL
34252: IFTRUE 34256
34254: GO 34259
34256: POP
// ; end ;
34257: GO 34260
34259: POP
// for j = 1 to 3 do
34260: LD_ADDR_VAR 0 7
34264: PUSH
34265: DOUBLE
34266: LD_INT 1
34268: DEC
34269: ST_TO_ADDR
34270: LD_INT 3
34272: PUSH
34273: FOR_TO
34274: IFFALSE 34327
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34276: LD_ADDR_VAR 0 5
34280: PUSH
34281: LD_VAR 0 5
34285: PPUSH
34286: LD_VAR 0 7
34290: PPUSH
34291: LD_VAR 0 5
34295: PUSH
34296: LD_VAR 0 7
34300: ARRAY
34301: PUSH
34302: LD_VAR 0 9
34306: PUSH
34307: LD_VAR 0 7
34311: ARRAY
34312: PUSH
34313: LD_VAR 0 10
34317: MUL
34318: PLUS
34319: PPUSH
34320: CALL_OW 1
34324: ST_TO_ADDR
34325: GO 34273
34327: POP
34328: POP
// end ;
34329: GO 32808
34331: POP
34332: POP
// result := Replace ( result , 4 , tmp ) ;
34333: LD_ADDR_VAR 0 5
34337: PUSH
34338: LD_VAR 0 5
34342: PPUSH
34343: LD_INT 4
34345: PPUSH
34346: LD_VAR 0 8
34350: PPUSH
34351: CALL_OW 1
34355: ST_TO_ADDR
// end ;
34356: LD_VAR 0 5
34360: RET
// export function DangerAtRange ( unit , range ) ; begin
34361: LD_INT 0
34363: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34364: LD_ADDR_VAR 0 3
34368: PUSH
34369: LD_VAR 0 1
34373: PPUSH
34374: CALL_OW 255
34378: PPUSH
34379: LD_VAR 0 1
34383: PPUSH
34384: CALL_OW 250
34388: PPUSH
34389: LD_VAR 0 1
34393: PPUSH
34394: CALL_OW 251
34398: PPUSH
34399: LD_VAR 0 2
34403: PPUSH
34404: CALL 32660 0 4
34408: ST_TO_ADDR
// end ;
34409: LD_VAR 0 3
34413: RET
// export function DangerInArea ( side , area ) ; begin
34414: LD_INT 0
34416: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34417: LD_ADDR_VAR 0 3
34421: PUSH
34422: LD_VAR 0 2
34426: PPUSH
34427: LD_INT 81
34429: PUSH
34430: LD_VAR 0 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PPUSH
34439: CALL_OW 70
34443: ST_TO_ADDR
// end ;
34444: LD_VAR 0 3
34448: RET
// export function IsExtension ( b ) ; begin
34449: LD_INT 0
34451: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34452: LD_ADDR_VAR 0 2
34456: PUSH
34457: LD_VAR 0 1
34461: PUSH
34462: LD_INT 23
34464: PUSH
34465: LD_INT 20
34467: PUSH
34468: LD_INT 22
34470: PUSH
34471: LD_INT 17
34473: PUSH
34474: LD_INT 24
34476: PUSH
34477: LD_INT 21
34479: PUSH
34480: LD_INT 19
34482: PUSH
34483: LD_INT 16
34485: PUSH
34486: LD_INT 25
34488: PUSH
34489: LD_INT 18
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: IN
34504: ST_TO_ADDR
// end ;
34505: LD_VAR 0 2
34509: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34510: LD_INT 0
34512: PPUSH
34513: PPUSH
34514: PPUSH
// result := [ ] ;
34515: LD_ADDR_VAR 0 4
34519: PUSH
34520: EMPTY
34521: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34522: LD_ADDR_VAR 0 5
34526: PUSH
34527: LD_VAR 0 2
34531: PPUSH
34532: LD_INT 21
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PPUSH
34542: CALL_OW 70
34546: ST_TO_ADDR
// if not tmp then
34547: LD_VAR 0 5
34551: NOT
34552: IFFALSE 34556
// exit ;
34554: GO 34620
// if checkLink then
34556: LD_VAR 0 3
34560: IFFALSE 34610
// begin for i in tmp do
34562: LD_ADDR_VAR 0 6
34566: PUSH
34567: LD_VAR 0 5
34571: PUSH
34572: FOR_IN
34573: IFFALSE 34608
// if GetBase ( i ) <> base then
34575: LD_VAR 0 6
34579: PPUSH
34580: CALL_OW 274
34584: PUSH
34585: LD_VAR 0 1
34589: NONEQUAL
34590: IFFALSE 34606
// ComLinkToBase ( base , i ) ;
34592: LD_VAR 0 1
34596: PPUSH
34597: LD_VAR 0 6
34601: PPUSH
34602: CALL_OW 169
34606: GO 34572
34608: POP
34609: POP
// end ; result := tmp ;
34610: LD_ADDR_VAR 0 4
34614: PUSH
34615: LD_VAR 0 5
34619: ST_TO_ADDR
// end ;
34620: LD_VAR 0 4
34624: RET
// export function ComComplete ( units , b ) ; var i ; begin
34625: LD_INT 0
34627: PPUSH
34628: PPUSH
// if not units then
34629: LD_VAR 0 1
34633: NOT
34634: IFFALSE 34638
// exit ;
34636: GO 34728
// for i in units do
34638: LD_ADDR_VAR 0 4
34642: PUSH
34643: LD_VAR 0 1
34647: PUSH
34648: FOR_IN
34649: IFFALSE 34726
// if BuildingStatus ( b ) = bs_build then
34651: LD_VAR 0 2
34655: PPUSH
34656: CALL_OW 461
34660: PUSH
34661: LD_INT 1
34663: EQUAL
34664: IFFALSE 34724
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34666: LD_VAR 0 4
34670: PPUSH
34671: LD_STRING h
34673: PUSH
34674: LD_VAR 0 2
34678: PPUSH
34679: CALL_OW 250
34683: PUSH
34684: LD_VAR 0 2
34688: PPUSH
34689: CALL_OW 251
34693: PUSH
34694: LD_VAR 0 2
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: PUSH
34717: EMPTY
34718: LIST
34719: PPUSH
34720: CALL_OW 446
34724: GO 34648
34726: POP
34727: POP
// end ;
34728: LD_VAR 0 3
34732: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34733: LD_INT 0
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
34739: PPUSH
34740: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34741: LD_VAR 0 1
34745: NOT
34746: PUSH
34747: LD_VAR 0 1
34751: PPUSH
34752: CALL_OW 263
34756: PUSH
34757: LD_INT 2
34759: NONEQUAL
34760: OR
34761: IFFALSE 34765
// exit ;
34763: GO 35081
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34765: LD_ADDR_VAR 0 6
34769: PUSH
34770: LD_INT 22
34772: PUSH
34773: LD_VAR 0 1
34777: PPUSH
34778: CALL_OW 255
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: LD_INT 30
34792: PUSH
34793: LD_INT 36
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 34
34802: PUSH
34803: LD_INT 31
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PPUSH
34819: CALL_OW 69
34823: ST_TO_ADDR
// if not tmp then
34824: LD_VAR 0 6
34828: NOT
34829: IFFALSE 34833
// exit ;
34831: GO 35081
// result := [ ] ;
34833: LD_ADDR_VAR 0 2
34837: PUSH
34838: EMPTY
34839: ST_TO_ADDR
// for i in tmp do
34840: LD_ADDR_VAR 0 3
34844: PUSH
34845: LD_VAR 0 6
34849: PUSH
34850: FOR_IN
34851: IFFALSE 34922
// begin t := UnitsInside ( i ) ;
34853: LD_ADDR_VAR 0 4
34857: PUSH
34858: LD_VAR 0 3
34862: PPUSH
34863: CALL_OW 313
34867: ST_TO_ADDR
// if t then
34868: LD_VAR 0 4
34872: IFFALSE 34920
// for j in t do
34874: LD_ADDR_VAR 0 7
34878: PUSH
34879: LD_VAR 0 4
34883: PUSH
34884: FOR_IN
34885: IFFALSE 34918
// result := Replace ( result , result + 1 , j ) ;
34887: LD_ADDR_VAR 0 2
34891: PUSH
34892: LD_VAR 0 2
34896: PPUSH
34897: LD_VAR 0 2
34901: PUSH
34902: LD_INT 1
34904: PLUS
34905: PPUSH
34906: LD_VAR 0 7
34910: PPUSH
34911: CALL_OW 1
34915: ST_TO_ADDR
34916: GO 34884
34918: POP
34919: POP
// end ;
34920: GO 34850
34922: POP
34923: POP
// if not result then
34924: LD_VAR 0 2
34928: NOT
34929: IFFALSE 34933
// exit ;
34931: GO 35081
// mech := result [ 1 ] ;
34933: LD_ADDR_VAR 0 5
34937: PUSH
34938: LD_VAR 0 2
34942: PUSH
34943: LD_INT 1
34945: ARRAY
34946: ST_TO_ADDR
// if result > 1 then
34947: LD_VAR 0 2
34951: PUSH
34952: LD_INT 1
34954: GREATER
34955: IFFALSE 35067
// begin for i = 2 to result do
34957: LD_ADDR_VAR 0 3
34961: PUSH
34962: DOUBLE
34963: LD_INT 2
34965: DEC
34966: ST_TO_ADDR
34967: LD_VAR 0 2
34971: PUSH
34972: FOR_TO
34973: IFFALSE 35065
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34975: LD_ADDR_VAR 0 4
34979: PUSH
34980: LD_VAR 0 2
34984: PUSH
34985: LD_VAR 0 3
34989: ARRAY
34990: PPUSH
34991: LD_INT 3
34993: PPUSH
34994: CALL_OW 259
34998: PUSH
34999: LD_VAR 0 2
35003: PUSH
35004: LD_VAR 0 3
35008: ARRAY
35009: PPUSH
35010: CALL_OW 432
35014: MINUS
35015: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35016: LD_VAR 0 4
35020: PUSH
35021: LD_VAR 0 5
35025: PPUSH
35026: LD_INT 3
35028: PPUSH
35029: CALL_OW 259
35033: PUSH
35034: LD_VAR 0 5
35038: PPUSH
35039: CALL_OW 432
35043: MINUS
35044: GREATEREQUAL
35045: IFFALSE 35063
// mech := result [ i ] ;
35047: LD_ADDR_VAR 0 5
35051: PUSH
35052: LD_VAR 0 2
35056: PUSH
35057: LD_VAR 0 3
35061: ARRAY
35062: ST_TO_ADDR
// end ;
35063: GO 34972
35065: POP
35066: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35067: LD_VAR 0 1
35071: PPUSH
35072: LD_VAR 0 5
35076: PPUSH
35077: CALL_OW 135
// end ;
35081: LD_VAR 0 2
35085: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35086: LD_INT 0
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
35095: PPUSH
35096: PPUSH
35097: PPUSH
35098: PPUSH
35099: PPUSH
35100: PPUSH
// result := [ ] ;
35101: LD_ADDR_VAR 0 7
35105: PUSH
35106: EMPTY
35107: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35108: LD_VAR 0 1
35112: PPUSH
35113: CALL_OW 266
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: IN
35128: NOT
35129: IFFALSE 35133
// exit ;
35131: GO 36767
// if name then
35133: LD_VAR 0 3
35137: IFFALSE 35153
// SetBName ( base_dep , name ) ;
35139: LD_VAR 0 1
35143: PPUSH
35144: LD_VAR 0 3
35148: PPUSH
35149: CALL_OW 500
// base := GetBase ( base_dep ) ;
35153: LD_ADDR_VAR 0 15
35157: PUSH
35158: LD_VAR 0 1
35162: PPUSH
35163: CALL_OW 274
35167: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35168: LD_ADDR_VAR 0 16
35172: PUSH
35173: LD_VAR 0 1
35177: PPUSH
35178: CALL_OW 255
35182: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35183: LD_ADDR_VAR 0 17
35187: PUSH
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 248
35197: ST_TO_ADDR
// if sources then
35198: LD_VAR 0 5
35202: IFFALSE 35249
// for i = 1 to 3 do
35204: LD_ADDR_VAR 0 8
35208: PUSH
35209: DOUBLE
35210: LD_INT 1
35212: DEC
35213: ST_TO_ADDR
35214: LD_INT 3
35216: PUSH
35217: FOR_TO
35218: IFFALSE 35247
// AddResourceType ( base , i , sources [ i ] ) ;
35220: LD_VAR 0 15
35224: PPUSH
35225: LD_VAR 0 8
35229: PPUSH
35230: LD_VAR 0 5
35234: PUSH
35235: LD_VAR 0 8
35239: ARRAY
35240: PPUSH
35241: CALL_OW 276
35245: GO 35217
35247: POP
35248: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35249: LD_ADDR_VAR 0 18
35253: PUSH
35254: LD_VAR 0 15
35258: PPUSH
35259: LD_VAR 0 2
35263: PPUSH
35264: LD_INT 1
35266: PPUSH
35267: CALL 34510 0 3
35271: ST_TO_ADDR
// InitHc ;
35272: CALL_OW 19
// InitUc ;
35276: CALL_OW 18
// uc_side := side ;
35280: LD_ADDR_OWVAR 20
35284: PUSH
35285: LD_VAR 0 16
35289: ST_TO_ADDR
// uc_nation := nation ;
35290: LD_ADDR_OWVAR 21
35294: PUSH
35295: LD_VAR 0 17
35299: ST_TO_ADDR
// if buildings then
35300: LD_VAR 0 18
35304: IFFALSE 36626
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35306: LD_ADDR_VAR 0 19
35310: PUSH
35311: LD_VAR 0 18
35315: PPUSH
35316: LD_INT 2
35318: PUSH
35319: LD_INT 30
35321: PUSH
35322: LD_INT 29
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 30
35331: PUSH
35332: LD_INT 30
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: PPUSH
35344: CALL_OW 72
35348: ST_TO_ADDR
// if tmp then
35349: LD_VAR 0 19
35353: IFFALSE 35401
// for i in tmp do
35355: LD_ADDR_VAR 0 8
35359: PUSH
35360: LD_VAR 0 19
35364: PUSH
35365: FOR_IN
35366: IFFALSE 35399
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35368: LD_VAR 0 8
35372: PPUSH
35373: CALL_OW 250
35377: PPUSH
35378: LD_VAR 0 8
35382: PPUSH
35383: CALL_OW 251
35387: PPUSH
35388: LD_VAR 0 16
35392: PPUSH
35393: CALL_OW 441
35397: GO 35365
35399: POP
35400: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35401: LD_VAR 0 18
35405: PPUSH
35406: LD_INT 2
35408: PUSH
35409: LD_INT 30
35411: PUSH
35412: LD_INT 32
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 30
35421: PUSH
35422: LD_INT 33
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: PPUSH
35434: CALL_OW 72
35438: IFFALSE 35526
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35440: LD_ADDR_VAR 0 8
35444: PUSH
35445: LD_VAR 0 18
35449: PPUSH
35450: LD_INT 2
35452: PUSH
35453: LD_INT 30
35455: PUSH
35456: LD_INT 32
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 30
35465: PUSH
35466: LD_INT 33
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: LIST
35477: PPUSH
35478: CALL_OW 72
35482: PUSH
35483: FOR_IN
35484: IFFALSE 35524
// begin if not GetBWeapon ( i ) then
35486: LD_VAR 0 8
35490: PPUSH
35491: CALL_OW 269
35495: NOT
35496: IFFALSE 35522
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35498: LD_VAR 0 8
35502: PPUSH
35503: LD_VAR 0 8
35507: PPUSH
35508: LD_VAR 0 2
35512: PPUSH
35513: CALL 36772 0 2
35517: PPUSH
35518: CALL_OW 431
// end ;
35522: GO 35483
35524: POP
35525: POP
// end ; for i = 1 to personel do
35526: LD_ADDR_VAR 0 8
35530: PUSH
35531: DOUBLE
35532: LD_INT 1
35534: DEC
35535: ST_TO_ADDR
35536: LD_VAR 0 6
35540: PUSH
35541: FOR_TO
35542: IFFALSE 36606
// begin if i > 4 then
35544: LD_VAR 0 8
35548: PUSH
35549: LD_INT 4
35551: GREATER
35552: IFFALSE 35556
// break ;
35554: GO 36606
// case i of 1 :
35556: LD_VAR 0 8
35560: PUSH
35561: LD_INT 1
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35569
35567: GO 35649
35569: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35570: LD_ADDR_VAR 0 12
35574: PUSH
35575: LD_VAR 0 18
35579: PPUSH
35580: LD_INT 22
35582: PUSH
35583: LD_VAR 0 16
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 58
35594: PUSH
35595: EMPTY
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 30
35603: PUSH
35604: LD_INT 32
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 30
35613: PUSH
35614: LD_INT 4
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 30
35623: PUSH
35624: LD_INT 5
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: PPUSH
35642: CALL_OW 72
35646: ST_TO_ADDR
35647: GO 35871
35649: LD_INT 2
35651: DOUBLE
35652: EQUAL
35653: IFTRUE 35657
35655: GO 35719
35657: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35658: LD_ADDR_VAR 0 12
35662: PUSH
35663: LD_VAR 0 18
35667: PPUSH
35668: LD_INT 22
35670: PUSH
35671: LD_VAR 0 16
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 30
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 30
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PPUSH
35712: CALL_OW 72
35716: ST_TO_ADDR
35717: GO 35871
35719: LD_INT 3
35721: DOUBLE
35722: EQUAL
35723: IFTRUE 35727
35725: GO 35789
35727: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35728: LD_ADDR_VAR 0 12
35732: PUSH
35733: LD_VAR 0 18
35737: PPUSH
35738: LD_INT 22
35740: PUSH
35741: LD_VAR 0 16
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: LD_INT 30
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 30
35765: PUSH
35766: LD_INT 3
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: LIST
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PPUSH
35782: CALL_OW 72
35786: ST_TO_ADDR
35787: GO 35871
35789: LD_INT 4
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35797
35795: GO 35870
35797: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35798: LD_ADDR_VAR 0 12
35802: PUSH
35803: LD_VAR 0 18
35807: PPUSH
35808: LD_INT 22
35810: PUSH
35811: LD_VAR 0 16
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 30
35825: PUSH
35826: LD_INT 6
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 30
35835: PUSH
35836: LD_INT 7
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 30
35845: PUSH
35846: LD_INT 8
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PPUSH
35863: CALL_OW 72
35867: ST_TO_ADDR
35868: GO 35871
35870: POP
// if i = 1 then
35871: LD_VAR 0 8
35875: PUSH
35876: LD_INT 1
35878: EQUAL
35879: IFFALSE 35990
// begin tmp := [ ] ;
35881: LD_ADDR_VAR 0 19
35885: PUSH
35886: EMPTY
35887: ST_TO_ADDR
// for j in f do
35888: LD_ADDR_VAR 0 9
35892: PUSH
35893: LD_VAR 0 12
35897: PUSH
35898: FOR_IN
35899: IFFALSE 35972
// if GetBType ( j ) = b_bunker then
35901: LD_VAR 0 9
35905: PPUSH
35906: CALL_OW 266
35910: PUSH
35911: LD_INT 32
35913: EQUAL
35914: IFFALSE 35941
// tmp := Insert ( tmp , 1 , j ) else
35916: LD_ADDR_VAR 0 19
35920: PUSH
35921: LD_VAR 0 19
35925: PPUSH
35926: LD_INT 1
35928: PPUSH
35929: LD_VAR 0 9
35933: PPUSH
35934: CALL_OW 2
35938: ST_TO_ADDR
35939: GO 35970
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35941: LD_ADDR_VAR 0 19
35945: PUSH
35946: LD_VAR 0 19
35950: PPUSH
35951: LD_VAR 0 19
35955: PUSH
35956: LD_INT 1
35958: PLUS
35959: PPUSH
35960: LD_VAR 0 9
35964: PPUSH
35965: CALL_OW 2
35969: ST_TO_ADDR
35970: GO 35898
35972: POP
35973: POP
// if tmp then
35974: LD_VAR 0 19
35978: IFFALSE 35990
// f := tmp ;
35980: LD_ADDR_VAR 0 12
35984: PUSH
35985: LD_VAR 0 19
35989: ST_TO_ADDR
// end ; x := personel [ i ] ;
35990: LD_ADDR_VAR 0 13
35994: PUSH
35995: LD_VAR 0 6
35999: PUSH
36000: LD_VAR 0 8
36004: ARRAY
36005: ST_TO_ADDR
// if x = - 1 then
36006: LD_VAR 0 13
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: EQUAL
36015: IFFALSE 36224
// begin for j in f do
36017: LD_ADDR_VAR 0 9
36021: PUSH
36022: LD_VAR 0 12
36026: PUSH
36027: FOR_IN
36028: IFFALSE 36220
// repeat InitHc ;
36030: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36034: LD_VAR 0 9
36038: PPUSH
36039: CALL_OW 266
36043: PUSH
36044: LD_INT 5
36046: EQUAL
36047: IFFALSE 36117
// begin if UnitsInside ( j ) < 3 then
36049: LD_VAR 0 9
36053: PPUSH
36054: CALL_OW 313
36058: PUSH
36059: LD_INT 3
36061: LESS
36062: IFFALSE 36098
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36064: LD_INT 0
36066: PPUSH
36067: LD_INT 5
36069: PUSH
36070: LD_INT 8
36072: PUSH
36073: LD_INT 9
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: PUSH
36081: LD_VAR 0 17
36085: ARRAY
36086: PPUSH
36087: LD_VAR 0 4
36091: PPUSH
36092: CALL_OW 380
36096: GO 36115
// PrepareHuman ( false , i , skill ) ;
36098: LD_INT 0
36100: PPUSH
36101: LD_VAR 0 8
36105: PPUSH
36106: LD_VAR 0 4
36110: PPUSH
36111: CALL_OW 380
// end else
36115: GO 36134
// PrepareHuman ( false , i , skill ) ;
36117: LD_INT 0
36119: PPUSH
36120: LD_VAR 0 8
36124: PPUSH
36125: LD_VAR 0 4
36129: PPUSH
36130: CALL_OW 380
// un := CreateHuman ;
36134: LD_ADDR_VAR 0 14
36138: PUSH
36139: CALL_OW 44
36143: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36144: LD_ADDR_VAR 0 7
36148: PUSH
36149: LD_VAR 0 7
36153: PPUSH
36154: LD_INT 1
36156: PPUSH
36157: LD_VAR 0 14
36161: PPUSH
36162: CALL_OW 2
36166: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36167: LD_VAR 0 14
36171: PPUSH
36172: LD_VAR 0 9
36176: PPUSH
36177: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36181: LD_VAR 0 9
36185: PPUSH
36186: CALL_OW 313
36190: PUSH
36191: LD_INT 6
36193: EQUAL
36194: PUSH
36195: LD_VAR 0 9
36199: PPUSH
36200: CALL_OW 266
36204: PUSH
36205: LD_INT 32
36207: PUSH
36208: LD_INT 31
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: IN
36215: OR
36216: IFFALSE 36030
36218: GO 36027
36220: POP
36221: POP
// end else
36222: GO 36604
// for j = 1 to x do
36224: LD_ADDR_VAR 0 9
36228: PUSH
36229: DOUBLE
36230: LD_INT 1
36232: DEC
36233: ST_TO_ADDR
36234: LD_VAR 0 13
36238: PUSH
36239: FOR_TO
36240: IFFALSE 36602
// begin InitHc ;
36242: CALL_OW 19
// if not f then
36246: LD_VAR 0 12
36250: NOT
36251: IFFALSE 36340
// begin PrepareHuman ( false , i , skill ) ;
36253: LD_INT 0
36255: PPUSH
36256: LD_VAR 0 8
36260: PPUSH
36261: LD_VAR 0 4
36265: PPUSH
36266: CALL_OW 380
// un := CreateHuman ;
36270: LD_ADDR_VAR 0 14
36274: PUSH
36275: CALL_OW 44
36279: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36280: LD_ADDR_VAR 0 7
36284: PUSH
36285: LD_VAR 0 7
36289: PPUSH
36290: LD_INT 1
36292: PPUSH
36293: LD_VAR 0 14
36297: PPUSH
36298: CALL_OW 2
36302: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36303: LD_VAR 0 14
36307: PPUSH
36308: LD_VAR 0 1
36312: PPUSH
36313: CALL_OW 250
36317: PPUSH
36318: LD_VAR 0 1
36322: PPUSH
36323: CALL_OW 251
36327: PPUSH
36328: LD_INT 10
36330: PPUSH
36331: LD_INT 0
36333: PPUSH
36334: CALL_OW 50
// continue ;
36338: GO 36239
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36340: LD_VAR 0 12
36344: PUSH
36345: LD_INT 1
36347: ARRAY
36348: PPUSH
36349: CALL_OW 313
36353: PUSH
36354: LD_VAR 0 12
36358: PUSH
36359: LD_INT 1
36361: ARRAY
36362: PPUSH
36363: CALL_OW 266
36367: PUSH
36368: LD_INT 32
36370: PUSH
36371: LD_INT 31
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: IN
36378: AND
36379: PUSH
36380: LD_VAR 0 12
36384: PUSH
36385: LD_INT 1
36387: ARRAY
36388: PPUSH
36389: CALL_OW 313
36393: PUSH
36394: LD_INT 6
36396: EQUAL
36397: OR
36398: IFFALSE 36418
// f := Delete ( f , 1 ) ;
36400: LD_ADDR_VAR 0 12
36404: PUSH
36405: LD_VAR 0 12
36409: PPUSH
36410: LD_INT 1
36412: PPUSH
36413: CALL_OW 3
36417: ST_TO_ADDR
// if not f then
36418: LD_VAR 0 12
36422: NOT
36423: IFFALSE 36441
// begin x := x + 2 ;
36425: LD_ADDR_VAR 0 13
36429: PUSH
36430: LD_VAR 0 13
36434: PUSH
36435: LD_INT 2
36437: PLUS
36438: ST_TO_ADDR
// continue ;
36439: GO 36239
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36441: LD_VAR 0 12
36445: PUSH
36446: LD_INT 1
36448: ARRAY
36449: PPUSH
36450: CALL_OW 266
36454: PUSH
36455: LD_INT 5
36457: EQUAL
36458: IFFALSE 36532
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36460: LD_VAR 0 12
36464: PUSH
36465: LD_INT 1
36467: ARRAY
36468: PPUSH
36469: CALL_OW 313
36473: PUSH
36474: LD_INT 3
36476: LESS
36477: IFFALSE 36513
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36479: LD_INT 0
36481: PPUSH
36482: LD_INT 5
36484: PUSH
36485: LD_INT 8
36487: PUSH
36488: LD_INT 9
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: PUSH
36496: LD_VAR 0 17
36500: ARRAY
36501: PPUSH
36502: LD_VAR 0 4
36506: PPUSH
36507: CALL_OW 380
36511: GO 36530
// PrepareHuman ( false , i , skill ) ;
36513: LD_INT 0
36515: PPUSH
36516: LD_VAR 0 8
36520: PPUSH
36521: LD_VAR 0 4
36525: PPUSH
36526: CALL_OW 380
// end else
36530: GO 36549
// PrepareHuman ( false , i , skill ) ;
36532: LD_INT 0
36534: PPUSH
36535: LD_VAR 0 8
36539: PPUSH
36540: LD_VAR 0 4
36544: PPUSH
36545: CALL_OW 380
// un := CreateHuman ;
36549: LD_ADDR_VAR 0 14
36553: PUSH
36554: CALL_OW 44
36558: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36559: LD_ADDR_VAR 0 7
36563: PUSH
36564: LD_VAR 0 7
36568: PPUSH
36569: LD_INT 1
36571: PPUSH
36572: LD_VAR 0 14
36576: PPUSH
36577: CALL_OW 2
36581: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36582: LD_VAR 0 14
36586: PPUSH
36587: LD_VAR 0 12
36591: PUSH
36592: LD_INT 1
36594: ARRAY
36595: PPUSH
36596: CALL_OW 52
// end ;
36600: GO 36239
36602: POP
36603: POP
// end ;
36604: GO 35541
36606: POP
36607: POP
// result := result ^ buildings ;
36608: LD_ADDR_VAR 0 7
36612: PUSH
36613: LD_VAR 0 7
36617: PUSH
36618: LD_VAR 0 18
36622: ADD
36623: ST_TO_ADDR
// end else
36624: GO 36767
// begin for i = 1 to personel do
36626: LD_ADDR_VAR 0 8
36630: PUSH
36631: DOUBLE
36632: LD_INT 1
36634: DEC
36635: ST_TO_ADDR
36636: LD_VAR 0 6
36640: PUSH
36641: FOR_TO
36642: IFFALSE 36765
// begin if i > 4 then
36644: LD_VAR 0 8
36648: PUSH
36649: LD_INT 4
36651: GREATER
36652: IFFALSE 36656
// break ;
36654: GO 36765
// x := personel [ i ] ;
36656: LD_ADDR_VAR 0 13
36660: PUSH
36661: LD_VAR 0 6
36665: PUSH
36666: LD_VAR 0 8
36670: ARRAY
36671: ST_TO_ADDR
// if x = - 1 then
36672: LD_VAR 0 13
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: EQUAL
36681: IFFALSE 36685
// continue ;
36683: GO 36641
// PrepareHuman ( false , i , skill ) ;
36685: LD_INT 0
36687: PPUSH
36688: LD_VAR 0 8
36692: PPUSH
36693: LD_VAR 0 4
36697: PPUSH
36698: CALL_OW 380
// un := CreateHuman ;
36702: LD_ADDR_VAR 0 14
36706: PUSH
36707: CALL_OW 44
36711: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36712: LD_VAR 0 14
36716: PPUSH
36717: LD_VAR 0 1
36721: PPUSH
36722: CALL_OW 250
36726: PPUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 251
36736: PPUSH
36737: LD_INT 10
36739: PPUSH
36740: LD_INT 0
36742: PPUSH
36743: CALL_OW 50
// result := result ^ un ;
36747: LD_ADDR_VAR 0 7
36751: PUSH
36752: LD_VAR 0 7
36756: PUSH
36757: LD_VAR 0 14
36761: ADD
36762: ST_TO_ADDR
// end ;
36763: GO 36641
36765: POP
36766: POP
// end ; end ;
36767: LD_VAR 0 7
36771: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36772: LD_INT 0
36774: PPUSH
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
36779: PPUSH
36780: PPUSH
36781: PPUSH
36782: PPUSH
36783: PPUSH
36784: PPUSH
36785: PPUSH
36786: PPUSH
36787: PPUSH
36788: PPUSH
36789: PPUSH
// result := false ;
36790: LD_ADDR_VAR 0 3
36794: PUSH
36795: LD_INT 0
36797: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36798: LD_VAR 0 1
36802: NOT
36803: PUSH
36804: LD_VAR 0 1
36808: PPUSH
36809: CALL_OW 266
36813: PUSH
36814: LD_INT 32
36816: PUSH
36817: LD_INT 33
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: IN
36824: NOT
36825: OR
36826: IFFALSE 36830
// exit ;
36828: GO 37939
// nat := GetNation ( tower ) ;
36830: LD_ADDR_VAR 0 12
36834: PUSH
36835: LD_VAR 0 1
36839: PPUSH
36840: CALL_OW 248
36844: ST_TO_ADDR
// side := GetSide ( tower ) ;
36845: LD_ADDR_VAR 0 16
36849: PUSH
36850: LD_VAR 0 1
36854: PPUSH
36855: CALL_OW 255
36859: ST_TO_ADDR
// x := GetX ( tower ) ;
36860: LD_ADDR_VAR 0 10
36864: PUSH
36865: LD_VAR 0 1
36869: PPUSH
36870: CALL_OW 250
36874: ST_TO_ADDR
// y := GetY ( tower ) ;
36875: LD_ADDR_VAR 0 11
36879: PUSH
36880: LD_VAR 0 1
36884: PPUSH
36885: CALL_OW 251
36889: ST_TO_ADDR
// if not x or not y then
36890: LD_VAR 0 10
36894: NOT
36895: PUSH
36896: LD_VAR 0 11
36900: NOT
36901: OR
36902: IFFALSE 36906
// exit ;
36904: GO 37939
// weapon := 0 ;
36906: LD_ADDR_VAR 0 18
36910: PUSH
36911: LD_INT 0
36913: ST_TO_ADDR
// fac_list := [ ] ;
36914: LD_ADDR_VAR 0 17
36918: PUSH
36919: EMPTY
36920: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36921: LD_ADDR_VAR 0 6
36925: PUSH
36926: LD_VAR 0 1
36930: PPUSH
36931: CALL_OW 274
36935: PPUSH
36936: LD_VAR 0 2
36940: PPUSH
36941: LD_INT 0
36943: PPUSH
36944: CALL 34510 0 3
36948: PPUSH
36949: LD_INT 30
36951: PUSH
36952: LD_INT 3
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PPUSH
36959: CALL_OW 72
36963: ST_TO_ADDR
// if not factories then
36964: LD_VAR 0 6
36968: NOT
36969: IFFALSE 36973
// exit ;
36971: GO 37939
// for i in factories do
36973: LD_ADDR_VAR 0 8
36977: PUSH
36978: LD_VAR 0 6
36982: PUSH
36983: FOR_IN
36984: IFFALSE 37009
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36986: LD_ADDR_VAR 0 17
36990: PUSH
36991: LD_VAR 0 17
36995: PUSH
36996: LD_VAR 0 8
37000: PPUSH
37001: CALL_OW 478
37005: UNION
37006: ST_TO_ADDR
37007: GO 36983
37009: POP
37010: POP
// if not fac_list then
37011: LD_VAR 0 17
37015: NOT
37016: IFFALSE 37020
// exit ;
37018: GO 37939
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37020: LD_ADDR_VAR 0 5
37024: PUSH
37025: LD_INT 4
37027: PUSH
37028: LD_INT 5
37030: PUSH
37031: LD_INT 9
37033: PUSH
37034: LD_INT 10
37036: PUSH
37037: LD_INT 6
37039: PUSH
37040: LD_INT 7
37042: PUSH
37043: LD_INT 11
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 27
37057: PUSH
37058: LD_INT 28
37060: PUSH
37061: LD_INT 26
37063: PUSH
37064: LD_INT 30
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 43
37075: PUSH
37076: LD_INT 44
37078: PUSH
37079: LD_INT 46
37081: PUSH
37082: LD_INT 45
37084: PUSH
37085: LD_INT 47
37087: PUSH
37088: LD_INT 49
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: PUSH
37104: LD_VAR 0 12
37108: ARRAY
37109: ST_TO_ADDR
// list := list isect fac_list ;
37110: LD_ADDR_VAR 0 5
37114: PUSH
37115: LD_VAR 0 5
37119: PUSH
37120: LD_VAR 0 17
37124: ISECT
37125: ST_TO_ADDR
// if not list then
37126: LD_VAR 0 5
37130: NOT
37131: IFFALSE 37135
// exit ;
37133: GO 37939
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37135: LD_VAR 0 12
37139: PUSH
37140: LD_INT 3
37142: EQUAL
37143: PUSH
37144: LD_INT 49
37146: PUSH
37147: LD_VAR 0 5
37151: IN
37152: AND
37153: PUSH
37154: LD_INT 31
37156: PPUSH
37157: LD_VAR 0 16
37161: PPUSH
37162: CALL_OW 321
37166: PUSH
37167: LD_INT 2
37169: EQUAL
37170: AND
37171: IFFALSE 37231
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37173: LD_INT 22
37175: PUSH
37176: LD_VAR 0 16
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 35
37187: PUSH
37188: LD_INT 49
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 91
37197: PUSH
37198: LD_VAR 0 1
37202: PUSH
37203: LD_INT 10
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: LIST
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: LIST
37215: PPUSH
37216: CALL_OW 69
37220: NOT
37221: IFFALSE 37231
// weapon := ru_time_lapser ;
37223: LD_ADDR_VAR 0 18
37227: PUSH
37228: LD_INT 49
37230: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37231: LD_VAR 0 12
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: IN
37246: PUSH
37247: LD_INT 11
37249: PUSH
37250: LD_VAR 0 5
37254: IN
37255: PUSH
37256: LD_INT 30
37258: PUSH
37259: LD_VAR 0 5
37263: IN
37264: OR
37265: AND
37266: PUSH
37267: LD_INT 6
37269: PPUSH
37270: LD_VAR 0 16
37274: PPUSH
37275: CALL_OW 321
37279: PUSH
37280: LD_INT 2
37282: EQUAL
37283: AND
37284: IFFALSE 37449
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37286: LD_INT 22
37288: PUSH
37289: LD_VAR 0 16
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: LD_INT 35
37303: PUSH
37304: LD_INT 11
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 35
37313: PUSH
37314: LD_INT 30
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 91
37328: PUSH
37329: LD_VAR 0 1
37333: PUSH
37334: LD_INT 18
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: PPUSH
37347: CALL_OW 69
37351: NOT
37352: PUSH
37353: LD_INT 22
37355: PUSH
37356: LD_VAR 0 16
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 30
37370: PUSH
37371: LD_INT 32
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 30
37380: PUSH
37381: LD_INT 33
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 91
37395: PUSH
37396: LD_VAR 0 1
37400: PUSH
37401: LD_INT 12
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: PUSH
37414: EMPTY
37415: LIST
37416: PPUSH
37417: CALL_OW 69
37421: PUSH
37422: LD_INT 2
37424: GREATER
37425: AND
37426: IFFALSE 37449
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37428: LD_ADDR_VAR 0 18
37432: PUSH
37433: LD_INT 11
37435: PUSH
37436: LD_INT 30
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_VAR 0 12
37447: ARRAY
37448: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37449: LD_VAR 0 18
37453: NOT
37454: PUSH
37455: LD_INT 40
37457: PPUSH
37458: LD_VAR 0 16
37462: PPUSH
37463: CALL_OW 321
37467: PUSH
37468: LD_INT 2
37470: EQUAL
37471: AND
37472: PUSH
37473: LD_INT 7
37475: PUSH
37476: LD_VAR 0 5
37480: IN
37481: PUSH
37482: LD_INT 28
37484: PUSH
37485: LD_VAR 0 5
37489: IN
37490: OR
37491: PUSH
37492: LD_INT 45
37494: PUSH
37495: LD_VAR 0 5
37499: IN
37500: OR
37501: AND
37502: IFFALSE 37756
// begin hex := GetHexInfo ( x , y ) ;
37504: LD_ADDR_VAR 0 4
37508: PUSH
37509: LD_VAR 0 10
37513: PPUSH
37514: LD_VAR 0 11
37518: PPUSH
37519: CALL_OW 546
37523: ST_TO_ADDR
// if hex [ 1 ] then
37524: LD_VAR 0 4
37528: PUSH
37529: LD_INT 1
37531: ARRAY
37532: IFFALSE 37536
// exit ;
37534: GO 37939
// height := hex [ 2 ] ;
37536: LD_ADDR_VAR 0 15
37540: PUSH
37541: LD_VAR 0 4
37545: PUSH
37546: LD_INT 2
37548: ARRAY
37549: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37550: LD_ADDR_VAR 0 14
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 2
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: LD_INT 5
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: ST_TO_ADDR
// for i in tmp do
37573: LD_ADDR_VAR 0 8
37577: PUSH
37578: LD_VAR 0 14
37582: PUSH
37583: FOR_IN
37584: IFFALSE 37754
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37586: LD_ADDR_VAR 0 9
37590: PUSH
37591: LD_VAR 0 10
37595: PPUSH
37596: LD_VAR 0 8
37600: PPUSH
37601: LD_INT 5
37603: PPUSH
37604: CALL_OW 272
37608: PUSH
37609: LD_VAR 0 11
37613: PPUSH
37614: LD_VAR 0 8
37618: PPUSH
37619: LD_INT 5
37621: PPUSH
37622: CALL_OW 273
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37631: LD_VAR 0 9
37635: PUSH
37636: LD_INT 1
37638: ARRAY
37639: PPUSH
37640: LD_VAR 0 9
37644: PUSH
37645: LD_INT 2
37647: ARRAY
37648: PPUSH
37649: CALL_OW 488
37653: IFFALSE 37752
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37655: LD_ADDR_VAR 0 4
37659: PUSH
37660: LD_VAR 0 9
37664: PUSH
37665: LD_INT 1
37667: ARRAY
37668: PPUSH
37669: LD_VAR 0 9
37673: PUSH
37674: LD_INT 2
37676: ARRAY
37677: PPUSH
37678: CALL_OW 546
37682: ST_TO_ADDR
// if hex [ 1 ] then
37683: LD_VAR 0 4
37687: PUSH
37688: LD_INT 1
37690: ARRAY
37691: IFFALSE 37695
// continue ;
37693: GO 37583
// h := hex [ 2 ] ;
37695: LD_ADDR_VAR 0 13
37699: PUSH
37700: LD_VAR 0 4
37704: PUSH
37705: LD_INT 2
37707: ARRAY
37708: ST_TO_ADDR
// if h + 7 < height then
37709: LD_VAR 0 13
37713: PUSH
37714: LD_INT 7
37716: PLUS
37717: PUSH
37718: LD_VAR 0 15
37722: LESS
37723: IFFALSE 37752
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37725: LD_ADDR_VAR 0 18
37729: PUSH
37730: LD_INT 7
37732: PUSH
37733: LD_INT 28
37735: PUSH
37736: LD_INT 45
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: PUSH
37744: LD_VAR 0 12
37748: ARRAY
37749: ST_TO_ADDR
// break ;
37750: GO 37754
// end ; end ; end ;
37752: GO 37583
37754: POP
37755: POP
// end ; if not weapon then
37756: LD_VAR 0 18
37760: NOT
37761: IFFALSE 37821
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37763: LD_ADDR_VAR 0 5
37767: PUSH
37768: LD_VAR 0 5
37772: PUSH
37773: LD_INT 11
37775: PUSH
37776: LD_INT 30
37778: PUSH
37779: LD_INT 49
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: DIFF
37787: ST_TO_ADDR
// if not list then
37788: LD_VAR 0 5
37792: NOT
37793: IFFALSE 37797
// exit ;
37795: GO 37939
// weapon := list [ rand ( 1 , list ) ] ;
37797: LD_ADDR_VAR 0 18
37801: PUSH
37802: LD_VAR 0 5
37806: PUSH
37807: LD_INT 1
37809: PPUSH
37810: LD_VAR 0 5
37814: PPUSH
37815: CALL_OW 12
37819: ARRAY
37820: ST_TO_ADDR
// end ; if weapon then
37821: LD_VAR 0 18
37825: IFFALSE 37939
// begin tmp := CostOfWeapon ( weapon ) ;
37827: LD_ADDR_VAR 0 14
37831: PUSH
37832: LD_VAR 0 18
37836: PPUSH
37837: CALL_OW 451
37841: ST_TO_ADDR
// j := GetBase ( tower ) ;
37842: LD_ADDR_VAR 0 9
37846: PUSH
37847: LD_VAR 0 1
37851: PPUSH
37852: CALL_OW 274
37856: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37857: LD_VAR 0 9
37861: PPUSH
37862: LD_INT 1
37864: PPUSH
37865: CALL_OW 275
37869: PUSH
37870: LD_VAR 0 14
37874: PUSH
37875: LD_INT 1
37877: ARRAY
37878: GREATEREQUAL
37879: PUSH
37880: LD_VAR 0 9
37884: PPUSH
37885: LD_INT 2
37887: PPUSH
37888: CALL_OW 275
37892: PUSH
37893: LD_VAR 0 14
37897: PUSH
37898: LD_INT 2
37900: ARRAY
37901: GREATEREQUAL
37902: AND
37903: PUSH
37904: LD_VAR 0 9
37908: PPUSH
37909: LD_INT 3
37911: PPUSH
37912: CALL_OW 275
37916: PUSH
37917: LD_VAR 0 14
37921: PUSH
37922: LD_INT 3
37924: ARRAY
37925: GREATEREQUAL
37926: AND
37927: IFFALSE 37939
// result := weapon ;
37929: LD_ADDR_VAR 0 3
37933: PUSH
37934: LD_VAR 0 18
37938: ST_TO_ADDR
// end ; end ;
37939: LD_VAR 0 3
37943: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37944: LD_INT 0
37946: PPUSH
37947: PPUSH
// result := true ;
37948: LD_ADDR_VAR 0 3
37952: PUSH
37953: LD_INT 1
37955: ST_TO_ADDR
// if array1 = array2 then
37956: LD_VAR 0 1
37960: PUSH
37961: LD_VAR 0 2
37965: EQUAL
37966: IFFALSE 38026
// begin for i = 1 to array1 do
37968: LD_ADDR_VAR 0 4
37972: PUSH
37973: DOUBLE
37974: LD_INT 1
37976: DEC
37977: ST_TO_ADDR
37978: LD_VAR 0 1
37982: PUSH
37983: FOR_TO
37984: IFFALSE 38022
// if array1 [ i ] <> array2 [ i ] then
37986: LD_VAR 0 1
37990: PUSH
37991: LD_VAR 0 4
37995: ARRAY
37996: PUSH
37997: LD_VAR 0 2
38001: PUSH
38002: LD_VAR 0 4
38006: ARRAY
38007: NONEQUAL
38008: IFFALSE 38020
// begin result := false ;
38010: LD_ADDR_VAR 0 3
38014: PUSH
38015: LD_INT 0
38017: ST_TO_ADDR
// break ;
38018: GO 38022
// end ;
38020: GO 37983
38022: POP
38023: POP
// end else
38024: GO 38034
// result := false ;
38026: LD_ADDR_VAR 0 3
38030: PUSH
38031: LD_INT 0
38033: ST_TO_ADDR
// end ;
38034: LD_VAR 0 3
38038: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38039: LD_INT 0
38041: PPUSH
38042: PPUSH
// if not array1 or not array2 then
38043: LD_VAR 0 1
38047: NOT
38048: PUSH
38049: LD_VAR 0 2
38053: NOT
38054: OR
38055: IFFALSE 38059
// exit ;
38057: GO 38123
// result := true ;
38059: LD_ADDR_VAR 0 3
38063: PUSH
38064: LD_INT 1
38066: ST_TO_ADDR
// for i = 1 to array1 do
38067: LD_ADDR_VAR 0 4
38071: PUSH
38072: DOUBLE
38073: LD_INT 1
38075: DEC
38076: ST_TO_ADDR
38077: LD_VAR 0 1
38081: PUSH
38082: FOR_TO
38083: IFFALSE 38121
// if array1 [ i ] <> array2 [ i ] then
38085: LD_VAR 0 1
38089: PUSH
38090: LD_VAR 0 4
38094: ARRAY
38095: PUSH
38096: LD_VAR 0 2
38100: PUSH
38101: LD_VAR 0 4
38105: ARRAY
38106: NONEQUAL
38107: IFFALSE 38119
// begin result := false ;
38109: LD_ADDR_VAR 0 3
38113: PUSH
38114: LD_INT 0
38116: ST_TO_ADDR
// break ;
38117: GO 38121
// end ;
38119: GO 38082
38121: POP
38122: POP
// end ;
38123: LD_VAR 0 3
38127: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38128: LD_INT 0
38130: PPUSH
38131: PPUSH
38132: PPUSH
// pom := GetBase ( fac ) ;
38133: LD_ADDR_VAR 0 5
38137: PUSH
38138: LD_VAR 0 1
38142: PPUSH
38143: CALL_OW 274
38147: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38148: LD_ADDR_VAR 0 4
38152: PUSH
38153: LD_VAR 0 2
38157: PUSH
38158: LD_INT 1
38160: ARRAY
38161: PPUSH
38162: LD_VAR 0 2
38166: PUSH
38167: LD_INT 2
38169: ARRAY
38170: PPUSH
38171: LD_VAR 0 2
38175: PUSH
38176: LD_INT 3
38178: ARRAY
38179: PPUSH
38180: LD_VAR 0 2
38184: PUSH
38185: LD_INT 4
38187: ARRAY
38188: PPUSH
38189: CALL_OW 449
38193: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38194: LD_ADDR_VAR 0 3
38198: PUSH
38199: LD_VAR 0 5
38203: PPUSH
38204: LD_INT 1
38206: PPUSH
38207: CALL_OW 275
38211: PUSH
38212: LD_VAR 0 4
38216: PUSH
38217: LD_INT 1
38219: ARRAY
38220: GREATEREQUAL
38221: PUSH
38222: LD_VAR 0 5
38226: PPUSH
38227: LD_INT 2
38229: PPUSH
38230: CALL_OW 275
38234: PUSH
38235: LD_VAR 0 4
38239: PUSH
38240: LD_INT 2
38242: ARRAY
38243: GREATEREQUAL
38244: AND
38245: PUSH
38246: LD_VAR 0 5
38250: PPUSH
38251: LD_INT 3
38253: PPUSH
38254: CALL_OW 275
38258: PUSH
38259: LD_VAR 0 4
38263: PUSH
38264: LD_INT 3
38266: ARRAY
38267: GREATEREQUAL
38268: AND
38269: ST_TO_ADDR
// end ;
38270: LD_VAR 0 3
38274: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38275: LD_INT 0
38277: PPUSH
38278: PPUSH
38279: PPUSH
38280: PPUSH
// pom := GetBase ( building ) ;
38281: LD_ADDR_VAR 0 3
38285: PUSH
38286: LD_VAR 0 1
38290: PPUSH
38291: CALL_OW 274
38295: ST_TO_ADDR
// if not pom then
38296: LD_VAR 0 3
38300: NOT
38301: IFFALSE 38305
// exit ;
38303: GO 38475
// btype := GetBType ( building ) ;
38305: LD_ADDR_VAR 0 5
38309: PUSH
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 266
38319: ST_TO_ADDR
// if btype = b_armoury then
38320: LD_VAR 0 5
38324: PUSH
38325: LD_INT 4
38327: EQUAL
38328: IFFALSE 38338
// btype := b_barracks ;
38330: LD_ADDR_VAR 0 5
38334: PUSH
38335: LD_INT 5
38337: ST_TO_ADDR
// if btype = b_depot then
38338: LD_VAR 0 5
38342: PUSH
38343: LD_INT 0
38345: EQUAL
38346: IFFALSE 38356
// btype := b_warehouse ;
38348: LD_ADDR_VAR 0 5
38352: PUSH
38353: LD_INT 1
38355: ST_TO_ADDR
// if btype = b_workshop then
38356: LD_VAR 0 5
38360: PUSH
38361: LD_INT 2
38363: EQUAL
38364: IFFALSE 38374
// btype := b_factory ;
38366: LD_ADDR_VAR 0 5
38370: PUSH
38371: LD_INT 3
38373: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38374: LD_ADDR_VAR 0 4
38378: PUSH
38379: LD_VAR 0 5
38383: PPUSH
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL_OW 248
38393: PPUSH
38394: CALL_OW 450
38398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38399: LD_ADDR_VAR 0 2
38403: PUSH
38404: LD_VAR 0 3
38408: PPUSH
38409: LD_INT 1
38411: PPUSH
38412: CALL_OW 275
38416: PUSH
38417: LD_VAR 0 4
38421: PUSH
38422: LD_INT 1
38424: ARRAY
38425: GREATEREQUAL
38426: PUSH
38427: LD_VAR 0 3
38431: PPUSH
38432: LD_INT 2
38434: PPUSH
38435: CALL_OW 275
38439: PUSH
38440: LD_VAR 0 4
38444: PUSH
38445: LD_INT 2
38447: ARRAY
38448: GREATEREQUAL
38449: AND
38450: PUSH
38451: LD_VAR 0 3
38455: PPUSH
38456: LD_INT 3
38458: PPUSH
38459: CALL_OW 275
38463: PUSH
38464: LD_VAR 0 4
38468: PUSH
38469: LD_INT 3
38471: ARRAY
38472: GREATEREQUAL
38473: AND
38474: ST_TO_ADDR
// end ;
38475: LD_VAR 0 2
38479: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38480: LD_INT 0
38482: PPUSH
38483: PPUSH
38484: PPUSH
// pom := GetBase ( building ) ;
38485: LD_ADDR_VAR 0 4
38489: PUSH
38490: LD_VAR 0 1
38494: PPUSH
38495: CALL_OW 274
38499: ST_TO_ADDR
// if not pom then
38500: LD_VAR 0 4
38504: NOT
38505: IFFALSE 38509
// exit ;
38507: GO 38610
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38509: LD_ADDR_VAR 0 5
38513: PUSH
38514: LD_VAR 0 2
38518: PPUSH
38519: LD_VAR 0 1
38523: PPUSH
38524: CALL_OW 248
38528: PPUSH
38529: CALL_OW 450
38533: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38534: LD_ADDR_VAR 0 3
38538: PUSH
38539: LD_VAR 0 4
38543: PPUSH
38544: LD_INT 1
38546: PPUSH
38547: CALL_OW 275
38551: PUSH
38552: LD_VAR 0 5
38556: PUSH
38557: LD_INT 1
38559: ARRAY
38560: GREATEREQUAL
38561: PUSH
38562: LD_VAR 0 4
38566: PPUSH
38567: LD_INT 2
38569: PPUSH
38570: CALL_OW 275
38574: PUSH
38575: LD_VAR 0 5
38579: PUSH
38580: LD_INT 2
38582: ARRAY
38583: GREATEREQUAL
38584: AND
38585: PUSH
38586: LD_VAR 0 4
38590: PPUSH
38591: LD_INT 3
38593: PPUSH
38594: CALL_OW 275
38598: PUSH
38599: LD_VAR 0 5
38603: PUSH
38604: LD_INT 3
38606: ARRAY
38607: GREATEREQUAL
38608: AND
38609: ST_TO_ADDR
// end ;
38610: LD_VAR 0 3
38614: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38615: LD_INT 0
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
38621: PPUSH
38622: PPUSH
38623: PPUSH
38624: PPUSH
38625: PPUSH
38626: PPUSH
38627: PPUSH
// result := false ;
38628: LD_ADDR_VAR 0 8
38632: PUSH
38633: LD_INT 0
38635: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38636: LD_VAR 0 5
38640: NOT
38641: PUSH
38642: LD_VAR 0 1
38646: NOT
38647: OR
38648: PUSH
38649: LD_VAR 0 2
38653: NOT
38654: OR
38655: PUSH
38656: LD_VAR 0 3
38660: NOT
38661: OR
38662: IFFALSE 38666
// exit ;
38664: GO 39480
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38666: LD_ADDR_VAR 0 14
38670: PUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: LD_VAR 0 2
38680: PPUSH
38681: LD_VAR 0 3
38685: PPUSH
38686: LD_VAR 0 4
38690: PPUSH
38691: LD_VAR 0 5
38695: PUSH
38696: LD_INT 1
38698: ARRAY
38699: PPUSH
38700: CALL_OW 248
38704: PPUSH
38705: LD_INT 0
38707: PPUSH
38708: CALL 40713 0 6
38712: ST_TO_ADDR
// if not hexes then
38713: LD_VAR 0 14
38717: NOT
38718: IFFALSE 38722
// exit ;
38720: GO 39480
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38722: LD_ADDR_VAR 0 17
38726: PUSH
38727: LD_VAR 0 5
38731: PPUSH
38732: LD_INT 22
38734: PUSH
38735: LD_VAR 0 13
38739: PPUSH
38740: CALL_OW 255
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: LD_INT 30
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 30
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PPUSH
38781: CALL_OW 72
38785: ST_TO_ADDR
// for i = 1 to hexes do
38786: LD_ADDR_VAR 0 9
38790: PUSH
38791: DOUBLE
38792: LD_INT 1
38794: DEC
38795: ST_TO_ADDR
38796: LD_VAR 0 14
38800: PUSH
38801: FOR_TO
38802: IFFALSE 39478
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38804: LD_ADDR_VAR 0 13
38808: PUSH
38809: LD_VAR 0 14
38813: PUSH
38814: LD_VAR 0 9
38818: ARRAY
38819: PUSH
38820: LD_INT 1
38822: ARRAY
38823: PPUSH
38824: LD_VAR 0 14
38828: PUSH
38829: LD_VAR 0 9
38833: ARRAY
38834: PUSH
38835: LD_INT 2
38837: ARRAY
38838: PPUSH
38839: CALL_OW 428
38843: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38844: LD_VAR 0 14
38848: PUSH
38849: LD_VAR 0 9
38853: ARRAY
38854: PUSH
38855: LD_INT 1
38857: ARRAY
38858: PPUSH
38859: LD_VAR 0 14
38863: PUSH
38864: LD_VAR 0 9
38868: ARRAY
38869: PUSH
38870: LD_INT 2
38872: ARRAY
38873: PPUSH
38874: CALL_OW 351
38878: PUSH
38879: LD_VAR 0 14
38883: PUSH
38884: LD_VAR 0 9
38888: ARRAY
38889: PUSH
38890: LD_INT 1
38892: ARRAY
38893: PPUSH
38894: LD_VAR 0 14
38898: PUSH
38899: LD_VAR 0 9
38903: ARRAY
38904: PUSH
38905: LD_INT 2
38907: ARRAY
38908: PPUSH
38909: CALL_OW 488
38913: NOT
38914: OR
38915: PUSH
38916: LD_VAR 0 13
38920: PPUSH
38921: CALL_OW 247
38925: PUSH
38926: LD_INT 3
38928: EQUAL
38929: OR
38930: IFFALSE 38936
// exit ;
38932: POP
38933: POP
38934: GO 39480
// if not tmp then
38936: LD_VAR 0 13
38940: NOT
38941: IFFALSE 38945
// continue ;
38943: GO 38801
// result := true ;
38945: LD_ADDR_VAR 0 8
38949: PUSH
38950: LD_INT 1
38952: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38953: LD_VAR 0 6
38957: PUSH
38958: LD_VAR 0 13
38962: PPUSH
38963: CALL_OW 247
38967: PUSH
38968: LD_INT 2
38970: EQUAL
38971: AND
38972: PUSH
38973: LD_VAR 0 13
38977: PPUSH
38978: CALL_OW 263
38982: PUSH
38983: LD_INT 1
38985: EQUAL
38986: AND
38987: IFFALSE 39151
// begin if IsDrivenBy ( tmp ) then
38989: LD_VAR 0 13
38993: PPUSH
38994: CALL_OW 311
38998: IFFALSE 39002
// continue ;
39000: GO 38801
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39002: LD_VAR 0 6
39006: PPUSH
39007: LD_INT 3
39009: PUSH
39010: LD_INT 60
39012: PUSH
39013: EMPTY
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: LD_INT 55
39025: PUSH
39026: EMPTY
39027: LIST
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PPUSH
39037: CALL_OW 72
39041: IFFALSE 39149
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39043: LD_ADDR_VAR 0 18
39047: PUSH
39048: LD_VAR 0 6
39052: PPUSH
39053: LD_INT 3
39055: PUSH
39056: LD_INT 60
39058: PUSH
39059: EMPTY
39060: LIST
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: LD_INT 55
39071: PUSH
39072: EMPTY
39073: LIST
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PPUSH
39083: CALL_OW 72
39087: PUSH
39088: LD_INT 1
39090: ARRAY
39091: ST_TO_ADDR
// if IsInUnit ( driver ) then
39092: LD_VAR 0 18
39096: PPUSH
39097: CALL_OW 310
39101: IFFALSE 39112
// ComExit ( driver ) ;
39103: LD_VAR 0 18
39107: PPUSH
39108: CALL 64474 0 1
// AddComEnterUnit ( driver , tmp ) ;
39112: LD_VAR 0 18
39116: PPUSH
39117: LD_VAR 0 13
39121: PPUSH
39122: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39126: LD_VAR 0 18
39130: PPUSH
39131: LD_VAR 0 7
39135: PPUSH
39136: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39140: LD_VAR 0 18
39144: PPUSH
39145: CALL_OW 181
// end ; continue ;
39149: GO 38801
// end ; if not cleaners or not tmp in cleaners then
39151: LD_VAR 0 6
39155: NOT
39156: PUSH
39157: LD_VAR 0 13
39161: PUSH
39162: LD_VAR 0 6
39166: IN
39167: NOT
39168: OR
39169: IFFALSE 39476
// begin if dep then
39171: LD_VAR 0 17
39175: IFFALSE 39311
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39177: LD_ADDR_VAR 0 16
39181: PUSH
39182: LD_VAR 0 17
39186: PUSH
39187: LD_INT 1
39189: ARRAY
39190: PPUSH
39191: CALL_OW 250
39195: PPUSH
39196: LD_VAR 0 17
39200: PUSH
39201: LD_INT 1
39203: ARRAY
39204: PPUSH
39205: CALL_OW 254
39209: PPUSH
39210: LD_INT 5
39212: PPUSH
39213: CALL_OW 272
39217: PUSH
39218: LD_VAR 0 17
39222: PUSH
39223: LD_INT 1
39225: ARRAY
39226: PPUSH
39227: CALL_OW 251
39231: PPUSH
39232: LD_VAR 0 17
39236: PUSH
39237: LD_INT 1
39239: ARRAY
39240: PPUSH
39241: CALL_OW 254
39245: PPUSH
39246: LD_INT 5
39248: PPUSH
39249: CALL_OW 273
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39258: LD_VAR 0 16
39262: PUSH
39263: LD_INT 1
39265: ARRAY
39266: PPUSH
39267: LD_VAR 0 16
39271: PUSH
39272: LD_INT 2
39274: ARRAY
39275: PPUSH
39276: CALL_OW 488
39280: IFFALSE 39311
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39282: LD_VAR 0 13
39286: PPUSH
39287: LD_VAR 0 16
39291: PUSH
39292: LD_INT 1
39294: ARRAY
39295: PPUSH
39296: LD_VAR 0 16
39300: PUSH
39301: LD_INT 2
39303: ARRAY
39304: PPUSH
39305: CALL_OW 111
// continue ;
39309: GO 38801
// end ; end ; r := GetDir ( tmp ) ;
39311: LD_ADDR_VAR 0 15
39315: PUSH
39316: LD_VAR 0 13
39320: PPUSH
39321: CALL_OW 254
39325: ST_TO_ADDR
// if r = 5 then
39326: LD_VAR 0 15
39330: PUSH
39331: LD_INT 5
39333: EQUAL
39334: IFFALSE 39344
// r := 0 ;
39336: LD_ADDR_VAR 0 15
39340: PUSH
39341: LD_INT 0
39343: ST_TO_ADDR
// for j = r to 5 do
39344: LD_ADDR_VAR 0 10
39348: PUSH
39349: DOUBLE
39350: LD_VAR 0 15
39354: DEC
39355: ST_TO_ADDR
39356: LD_INT 5
39358: PUSH
39359: FOR_TO
39360: IFFALSE 39474
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39362: LD_ADDR_VAR 0 11
39366: PUSH
39367: LD_VAR 0 13
39371: PPUSH
39372: CALL_OW 250
39376: PPUSH
39377: LD_VAR 0 10
39381: PPUSH
39382: LD_INT 2
39384: PPUSH
39385: CALL_OW 272
39389: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39390: LD_ADDR_VAR 0 12
39394: PUSH
39395: LD_VAR 0 13
39399: PPUSH
39400: CALL_OW 251
39404: PPUSH
39405: LD_VAR 0 10
39409: PPUSH
39410: LD_INT 2
39412: PPUSH
39413: CALL_OW 273
39417: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39418: LD_VAR 0 11
39422: PPUSH
39423: LD_VAR 0 12
39427: PPUSH
39428: CALL_OW 488
39432: PUSH
39433: LD_VAR 0 11
39437: PPUSH
39438: LD_VAR 0 12
39442: PPUSH
39443: CALL_OW 428
39447: NOT
39448: AND
39449: IFFALSE 39472
// begin ComMoveXY ( tmp , _x , _y ) ;
39451: LD_VAR 0 13
39455: PPUSH
39456: LD_VAR 0 11
39460: PPUSH
39461: LD_VAR 0 12
39465: PPUSH
39466: CALL_OW 111
// break ;
39470: GO 39474
// end ; end ;
39472: GO 39359
39474: POP
39475: POP
// end ; end ;
39476: GO 38801
39478: POP
39479: POP
// end ;
39480: LD_VAR 0 8
39484: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39485: LD_INT 0
39487: PPUSH
// result := true ;
39488: LD_ADDR_VAR 0 3
39492: PUSH
39493: LD_INT 1
39495: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39496: LD_VAR 0 2
39500: PUSH
39501: LD_INT 24
39503: DOUBLE
39504: EQUAL
39505: IFTRUE 39515
39507: LD_INT 33
39509: DOUBLE
39510: EQUAL
39511: IFTRUE 39515
39513: GO 39540
39515: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39516: LD_ADDR_VAR 0 3
39520: PUSH
39521: LD_INT 32
39523: PPUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: CALL_OW 321
39533: PUSH
39534: LD_INT 2
39536: EQUAL
39537: ST_TO_ADDR
39538: GO 39856
39540: LD_INT 20
39542: DOUBLE
39543: EQUAL
39544: IFTRUE 39548
39546: GO 39573
39548: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39549: LD_ADDR_VAR 0 3
39553: PUSH
39554: LD_INT 6
39556: PPUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 321
39566: PUSH
39567: LD_INT 2
39569: EQUAL
39570: ST_TO_ADDR
39571: GO 39856
39573: LD_INT 22
39575: DOUBLE
39576: EQUAL
39577: IFTRUE 39587
39579: LD_INT 36
39581: DOUBLE
39582: EQUAL
39583: IFTRUE 39587
39585: GO 39612
39587: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39588: LD_ADDR_VAR 0 3
39592: PUSH
39593: LD_INT 15
39595: PPUSH
39596: LD_VAR 0 1
39600: PPUSH
39601: CALL_OW 321
39605: PUSH
39606: LD_INT 2
39608: EQUAL
39609: ST_TO_ADDR
39610: GO 39856
39612: LD_INT 30
39614: DOUBLE
39615: EQUAL
39616: IFTRUE 39620
39618: GO 39645
39620: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39621: LD_ADDR_VAR 0 3
39625: PUSH
39626: LD_INT 20
39628: PPUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 321
39638: PUSH
39639: LD_INT 2
39641: EQUAL
39642: ST_TO_ADDR
39643: GO 39856
39645: LD_INT 28
39647: DOUBLE
39648: EQUAL
39649: IFTRUE 39659
39651: LD_INT 21
39653: DOUBLE
39654: EQUAL
39655: IFTRUE 39659
39657: GO 39684
39659: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39660: LD_ADDR_VAR 0 3
39664: PUSH
39665: LD_INT 21
39667: PPUSH
39668: LD_VAR 0 1
39672: PPUSH
39673: CALL_OW 321
39677: PUSH
39678: LD_INT 2
39680: EQUAL
39681: ST_TO_ADDR
39682: GO 39856
39684: LD_INT 16
39686: DOUBLE
39687: EQUAL
39688: IFTRUE 39692
39690: GO 39717
39692: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39693: LD_ADDR_VAR 0 3
39697: PUSH
39698: LD_INT 84
39700: PPUSH
39701: LD_VAR 0 1
39705: PPUSH
39706: CALL_OW 321
39710: PUSH
39711: LD_INT 2
39713: EQUAL
39714: ST_TO_ADDR
39715: GO 39856
39717: LD_INT 19
39719: DOUBLE
39720: EQUAL
39721: IFTRUE 39731
39723: LD_INT 23
39725: DOUBLE
39726: EQUAL
39727: IFTRUE 39731
39729: GO 39756
39731: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39732: LD_ADDR_VAR 0 3
39736: PUSH
39737: LD_INT 83
39739: PPUSH
39740: LD_VAR 0 1
39744: PPUSH
39745: CALL_OW 321
39749: PUSH
39750: LD_INT 2
39752: EQUAL
39753: ST_TO_ADDR
39754: GO 39856
39756: LD_INT 17
39758: DOUBLE
39759: EQUAL
39760: IFTRUE 39764
39762: GO 39789
39764: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: LD_INT 39
39772: PPUSH
39773: LD_VAR 0 1
39777: PPUSH
39778: CALL_OW 321
39782: PUSH
39783: LD_INT 2
39785: EQUAL
39786: ST_TO_ADDR
39787: GO 39856
39789: LD_INT 18
39791: DOUBLE
39792: EQUAL
39793: IFTRUE 39797
39795: GO 39822
39797: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39798: LD_ADDR_VAR 0 3
39802: PUSH
39803: LD_INT 40
39805: PPUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 321
39815: PUSH
39816: LD_INT 2
39818: EQUAL
39819: ST_TO_ADDR
39820: GO 39856
39822: LD_INT 27
39824: DOUBLE
39825: EQUAL
39826: IFTRUE 39830
39828: GO 39855
39830: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39831: LD_ADDR_VAR 0 3
39835: PUSH
39836: LD_INT 35
39838: PPUSH
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 321
39848: PUSH
39849: LD_INT 2
39851: EQUAL
39852: ST_TO_ADDR
39853: GO 39856
39855: POP
// end ;
39856: LD_VAR 0 3
39860: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39861: LD_INT 0
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
// result := false ;
39874: LD_ADDR_VAR 0 6
39878: PUSH
39879: LD_INT 0
39881: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39882: LD_VAR 0 1
39886: NOT
39887: PUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL_OW 266
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: IN
39908: NOT
39909: OR
39910: PUSH
39911: LD_VAR 0 2
39915: NOT
39916: OR
39917: PUSH
39918: LD_VAR 0 5
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: LD_INT 3
39934: PUSH
39935: LD_INT 4
39937: PUSH
39938: LD_INT 5
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: IN
39949: NOT
39950: OR
39951: PUSH
39952: LD_VAR 0 3
39956: PPUSH
39957: LD_VAR 0 4
39961: PPUSH
39962: CALL_OW 488
39966: NOT
39967: OR
39968: IFFALSE 39972
// exit ;
39970: GO 40708
// side := GetSide ( depot ) ;
39972: LD_ADDR_VAR 0 9
39976: PUSH
39977: LD_VAR 0 1
39981: PPUSH
39982: CALL_OW 255
39986: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39987: LD_VAR 0 9
39991: PPUSH
39992: LD_VAR 0 2
39996: PPUSH
39997: CALL 39485 0 2
40001: NOT
40002: IFFALSE 40006
// exit ;
40004: GO 40708
// pom := GetBase ( depot ) ;
40006: LD_ADDR_VAR 0 10
40010: PUSH
40011: LD_VAR 0 1
40015: PPUSH
40016: CALL_OW 274
40020: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40021: LD_ADDR_VAR 0 11
40025: PUSH
40026: LD_VAR 0 2
40030: PPUSH
40031: LD_VAR 0 1
40035: PPUSH
40036: CALL_OW 248
40040: PPUSH
40041: CALL_OW 450
40045: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40046: LD_VAR 0 10
40050: PPUSH
40051: LD_INT 1
40053: PPUSH
40054: CALL_OW 275
40058: PUSH
40059: LD_VAR 0 11
40063: PUSH
40064: LD_INT 1
40066: ARRAY
40067: GREATEREQUAL
40068: PUSH
40069: LD_VAR 0 10
40073: PPUSH
40074: LD_INT 2
40076: PPUSH
40077: CALL_OW 275
40081: PUSH
40082: LD_VAR 0 11
40086: PUSH
40087: LD_INT 2
40089: ARRAY
40090: GREATEREQUAL
40091: AND
40092: PUSH
40093: LD_VAR 0 10
40097: PPUSH
40098: LD_INT 3
40100: PPUSH
40101: CALL_OW 275
40105: PUSH
40106: LD_VAR 0 11
40110: PUSH
40111: LD_INT 3
40113: ARRAY
40114: GREATEREQUAL
40115: AND
40116: NOT
40117: IFFALSE 40121
// exit ;
40119: GO 40708
// if GetBType ( depot ) = b_depot then
40121: LD_VAR 0 1
40125: PPUSH
40126: CALL_OW 266
40130: PUSH
40131: LD_INT 0
40133: EQUAL
40134: IFFALSE 40146
// dist := 28 else
40136: LD_ADDR_VAR 0 14
40140: PUSH
40141: LD_INT 28
40143: ST_TO_ADDR
40144: GO 40154
// dist := 36 ;
40146: LD_ADDR_VAR 0 14
40150: PUSH
40151: LD_INT 36
40153: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40154: LD_VAR 0 1
40158: PPUSH
40159: LD_VAR 0 3
40163: PPUSH
40164: LD_VAR 0 4
40168: PPUSH
40169: CALL_OW 297
40173: PUSH
40174: LD_VAR 0 14
40178: GREATER
40179: IFFALSE 40183
// exit ;
40181: GO 40708
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40183: LD_ADDR_VAR 0 12
40187: PUSH
40188: LD_VAR 0 2
40192: PPUSH
40193: LD_VAR 0 3
40197: PPUSH
40198: LD_VAR 0 4
40202: PPUSH
40203: LD_VAR 0 5
40207: PPUSH
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL_OW 248
40217: PPUSH
40218: LD_INT 0
40220: PPUSH
40221: CALL 40713 0 6
40225: ST_TO_ADDR
// if not hexes then
40226: LD_VAR 0 12
40230: NOT
40231: IFFALSE 40235
// exit ;
40233: GO 40708
// hex := GetHexInfo ( x , y ) ;
40235: LD_ADDR_VAR 0 15
40239: PUSH
40240: LD_VAR 0 3
40244: PPUSH
40245: LD_VAR 0 4
40249: PPUSH
40250: CALL_OW 546
40254: ST_TO_ADDR
// if hex [ 1 ] then
40255: LD_VAR 0 15
40259: PUSH
40260: LD_INT 1
40262: ARRAY
40263: IFFALSE 40267
// exit ;
40265: GO 40708
// height := hex [ 2 ] ;
40267: LD_ADDR_VAR 0 13
40271: PUSH
40272: LD_VAR 0 15
40276: PUSH
40277: LD_INT 2
40279: ARRAY
40280: ST_TO_ADDR
// for i = 1 to hexes do
40281: LD_ADDR_VAR 0 7
40285: PUSH
40286: DOUBLE
40287: LD_INT 1
40289: DEC
40290: ST_TO_ADDR
40291: LD_VAR 0 12
40295: PUSH
40296: FOR_TO
40297: IFFALSE 40627
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40299: LD_VAR 0 12
40303: PUSH
40304: LD_VAR 0 7
40308: ARRAY
40309: PUSH
40310: LD_INT 1
40312: ARRAY
40313: PPUSH
40314: LD_VAR 0 12
40318: PUSH
40319: LD_VAR 0 7
40323: ARRAY
40324: PUSH
40325: LD_INT 2
40327: ARRAY
40328: PPUSH
40329: CALL_OW 488
40333: NOT
40334: PUSH
40335: LD_VAR 0 12
40339: PUSH
40340: LD_VAR 0 7
40344: ARRAY
40345: PUSH
40346: LD_INT 1
40348: ARRAY
40349: PPUSH
40350: LD_VAR 0 12
40354: PUSH
40355: LD_VAR 0 7
40359: ARRAY
40360: PUSH
40361: LD_INT 2
40363: ARRAY
40364: PPUSH
40365: CALL_OW 428
40369: PUSH
40370: LD_INT 0
40372: GREATER
40373: OR
40374: PUSH
40375: LD_VAR 0 12
40379: PUSH
40380: LD_VAR 0 7
40384: ARRAY
40385: PUSH
40386: LD_INT 1
40388: ARRAY
40389: PPUSH
40390: LD_VAR 0 12
40394: PUSH
40395: LD_VAR 0 7
40399: ARRAY
40400: PUSH
40401: LD_INT 2
40403: ARRAY
40404: PPUSH
40405: CALL_OW 351
40409: OR
40410: IFFALSE 40416
// exit ;
40412: POP
40413: POP
40414: GO 40708
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40416: LD_ADDR_VAR 0 8
40420: PUSH
40421: LD_VAR 0 12
40425: PUSH
40426: LD_VAR 0 7
40430: ARRAY
40431: PUSH
40432: LD_INT 1
40434: ARRAY
40435: PPUSH
40436: LD_VAR 0 12
40440: PUSH
40441: LD_VAR 0 7
40445: ARRAY
40446: PUSH
40447: LD_INT 2
40449: ARRAY
40450: PPUSH
40451: CALL_OW 546
40455: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40456: LD_VAR 0 8
40460: PUSH
40461: LD_INT 1
40463: ARRAY
40464: PUSH
40465: LD_VAR 0 8
40469: PUSH
40470: LD_INT 2
40472: ARRAY
40473: PUSH
40474: LD_VAR 0 13
40478: PUSH
40479: LD_INT 2
40481: PLUS
40482: GREATER
40483: OR
40484: PUSH
40485: LD_VAR 0 8
40489: PUSH
40490: LD_INT 2
40492: ARRAY
40493: PUSH
40494: LD_VAR 0 13
40498: PUSH
40499: LD_INT 2
40501: MINUS
40502: LESS
40503: OR
40504: PUSH
40505: LD_VAR 0 8
40509: PUSH
40510: LD_INT 3
40512: ARRAY
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 8
40519: PUSH
40520: LD_INT 9
40522: PUSH
40523: LD_INT 10
40525: PUSH
40526: LD_INT 11
40528: PUSH
40529: LD_INT 12
40531: PUSH
40532: LD_INT 13
40534: PUSH
40535: LD_INT 16
40537: PUSH
40538: LD_INT 17
40540: PUSH
40541: LD_INT 18
40543: PUSH
40544: LD_INT 19
40546: PUSH
40547: LD_INT 20
40549: PUSH
40550: LD_INT 21
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: IN
40568: NOT
40569: OR
40570: PUSH
40571: LD_VAR 0 8
40575: PUSH
40576: LD_INT 5
40578: ARRAY
40579: NOT
40580: OR
40581: PUSH
40582: LD_VAR 0 8
40586: PUSH
40587: LD_INT 6
40589: ARRAY
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: LD_INT 7
40599: PUSH
40600: LD_INT 9
40602: PUSH
40603: LD_INT 10
40605: PUSH
40606: LD_INT 11
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: IN
40617: NOT
40618: OR
40619: IFFALSE 40625
// exit ;
40621: POP
40622: POP
40623: GO 40708
// end ;
40625: GO 40296
40627: POP
40628: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40629: LD_VAR 0 9
40633: PPUSH
40634: LD_VAR 0 3
40638: PPUSH
40639: LD_VAR 0 4
40643: PPUSH
40644: LD_INT 20
40646: PPUSH
40647: CALL 32660 0 4
40651: PUSH
40652: LD_INT 4
40654: ARRAY
40655: IFFALSE 40659
// exit ;
40657: GO 40708
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40659: LD_VAR 0 2
40663: PUSH
40664: LD_INT 29
40666: PUSH
40667: LD_INT 30
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: IN
40674: PUSH
40675: LD_VAR 0 3
40679: PPUSH
40680: LD_VAR 0 4
40684: PPUSH
40685: LD_VAR 0 9
40689: PPUSH
40690: CALL_OW 440
40694: NOT
40695: AND
40696: IFFALSE 40700
// exit ;
40698: GO 40708
// result := true ;
40700: LD_ADDR_VAR 0 6
40704: PUSH
40705: LD_INT 1
40707: ST_TO_ADDR
// end ;
40708: LD_VAR 0 6
40712: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40713: LD_INT 0
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
// result = [ ] ;
40773: LD_ADDR_VAR 0 7
40777: PUSH
40778: EMPTY
40779: ST_TO_ADDR
// temp_list = [ ] ;
40780: LD_ADDR_VAR 0 9
40784: PUSH
40785: EMPTY
40786: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40787: LD_VAR 0 4
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 3
40803: PUSH
40804: LD_INT 4
40806: PUSH
40807: LD_INT 5
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: IN
40818: NOT
40819: PUSH
40820: LD_VAR 0 1
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: IN
40835: PUSH
40836: LD_VAR 0 5
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: LD_INT 3
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: IN
40855: NOT
40856: AND
40857: OR
40858: IFFALSE 40862
// exit ;
40860: GO 59253
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40862: LD_VAR 0 1
40866: PUSH
40867: LD_INT 6
40869: PUSH
40870: LD_INT 7
40872: PUSH
40873: LD_INT 8
40875: PUSH
40876: LD_INT 13
40878: PUSH
40879: LD_INT 12
40881: PUSH
40882: LD_INT 15
40884: PUSH
40885: LD_INT 11
40887: PUSH
40888: LD_INT 14
40890: PUSH
40891: LD_INT 10
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: IN
40905: IFFALSE 40915
// btype = b_lab ;
40907: LD_ADDR_VAR 0 1
40911: PUSH
40912: LD_INT 6
40914: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40915: LD_VAR 0 6
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: LIST
40933: IN
40934: NOT
40935: PUSH
40936: LD_VAR 0 1
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: LD_INT 3
40952: PUSH
40953: LD_INT 6
40955: PUSH
40956: LD_INT 36
40958: PUSH
40959: LD_INT 4
40961: PUSH
40962: LD_INT 5
40964: PUSH
40965: LD_INT 31
40967: PUSH
40968: LD_INT 32
40970: PUSH
40971: LD_INT 33
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: IN
40987: NOT
40988: PUSH
40989: LD_VAR 0 6
40993: PUSH
40994: LD_INT 1
40996: EQUAL
40997: AND
40998: OR
40999: PUSH
41000: LD_VAR 0 1
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: LD_INT 3
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: IN
41015: NOT
41016: PUSH
41017: LD_VAR 0 6
41021: PUSH
41022: LD_INT 2
41024: EQUAL
41025: AND
41026: OR
41027: IFFALSE 41037
// mode = 0 ;
41029: LD_ADDR_VAR 0 6
41033: PUSH
41034: LD_INT 0
41036: ST_TO_ADDR
// case mode of 0 :
41037: LD_VAR 0 6
41041: PUSH
41042: LD_INT 0
41044: DOUBLE
41045: EQUAL
41046: IFTRUE 41050
41048: GO 52503
41050: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41051: LD_ADDR_VAR 0 11
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 2
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: LD_INT 2
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: LD_INT 3
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41244: LD_ADDR_VAR 0 12
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 3
41401: NEG
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 3
41412: NEG
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41440: LD_ADDR_VAR 0 13
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: LD_INT 3
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 3
41599: NEG
41600: PUSH
41601: LD_INT 2
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 3
41611: NEG
41612: PUSH
41613: LD_INT 3
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41639: LD_ADDR_VAR 0 14
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 2
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 2
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: LD_INT 3
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 3
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 2
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41835: LD_ADDR_VAR 0 15
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 3
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42028: LD_ADDR_VAR 0 16
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: LD_INT 2
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 3
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 3
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 3
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42221: LD_ADDR_VAR 0 17
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: NEG
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42451: LD_ADDR_VAR 0 18
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42681: LD_ADDR_VAR 0 19
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 2
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42911: LD_ADDR_VAR 0 20
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43141: LD_ADDR_VAR 0 21
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 2
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: NEG
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43371: LD_ADDR_VAR 0 22
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43601: LD_ADDR_VAR 0 23
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: LD_INT 2
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: LD_INT 3
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: LD_INT 3
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43881: LD_ADDR_VAR 0 24
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 3
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44157: LD_ADDR_VAR 0 25
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44431: LD_ADDR_VAR 0 26
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 3
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44707: LD_ADDR_VAR 0 27
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 3
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 3
44952: NEG
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44987: LD_ADDR_VAR 0 28
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: LD_INT 3
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: LD_INT 3
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 3
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 3
45234: NEG
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45269: LD_ADDR_VAR 0 29
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 3
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 3
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 3
45513: NEG
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45548: LD_ADDR_VAR 0 30
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 3
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45826: LD_ADDR_VAR 0 31
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 3
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 3
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 3
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46104: LD_ADDR_VAR 0 32
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 3
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46382: LD_ADDR_VAR 0 33
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 3
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 3
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46661: LD_ADDR_VAR 0 34
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 3
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46941: LD_ADDR_VAR 0 35
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47053: LD_ADDR_VAR 0 36
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47165: LD_ADDR_VAR 0 37
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47277: LD_ADDR_VAR 0 38
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47389: LD_ADDR_VAR 0 39
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47501: LD_ADDR_VAR 0 40
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47613: LD_ADDR_VAR 0 41
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 3
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 3
47887: NEG
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 3
47910: NEG
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 3
47922: NEG
47923: PUSH
47924: LD_INT 3
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47963: LD_ADDR_VAR 0 42
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: LD_INT 3
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 3
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 3
48272: NEG
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48313: LD_ADDR_VAR 0 43
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 3
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 3
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 3
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 3
48609: NEG
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 3
48620: NEG
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48661: LD_ADDR_VAR 0 44
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 3
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 3
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 3
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 3
48958: NEG
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 3
48970: NEG
48971: PUSH
48972: LD_INT 3
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49011: LD_ADDR_VAR 0 45
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 3
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 3
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 3
49257: PUSH
49258: LD_INT 3
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 3
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 3
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: NEG
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: LD_INT 3
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49361: LD_ADDR_VAR 0 46
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 3
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: NEG
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 3
49668: NEG
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49709: LD_ADDR_VAR 0 47
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49860: LD_ADDR_VAR 0 48
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50007: LD_ADDR_VAR 0 49
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50151: LD_ADDR_VAR 0 50
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50295: LD_ADDR_VAR 0 51
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50442: LD_ADDR_VAR 0 52
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50593: LD_ADDR_VAR 0 53
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50823: LD_ADDR_VAR 0 54
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51053: LD_ADDR_VAR 0 55
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51283: LD_ADDR_VAR 0 56
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51513: LD_ADDR_VAR 0 57
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51743: LD_ADDR_VAR 0 58
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51973: LD_ADDR_VAR 0 59
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52061: LD_ADDR_VAR 0 60
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52149: LD_ADDR_VAR 0 61
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52237: LD_ADDR_VAR 0 62
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52325: LD_ADDR_VAR 0 63
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52413: LD_ADDR_VAR 0 64
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: ST_TO_ADDR
// end ; 1 :
52501: GO 58398
52503: LD_INT 1
52505: DOUBLE
52506: EQUAL
52507: IFTRUE 52511
52509: GO 55134
52511: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52512: LD_ADDR_VAR 0 11
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 3
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52556: LD_ADDR_VAR 0 12
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52597: LD_ADDR_VAR 0 13
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52637: LD_ADDR_VAR 0 14
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: LIST
52677: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52678: LD_ADDR_VAR 0 15
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 3
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52722: LD_ADDR_VAR 0 16
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: LD_INT 3
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 3
52741: NEG
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 3
52753: NEG
52754: PUSH
52755: LD_INT 3
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52768: LD_ADDR_VAR 0 17
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52812: LD_ADDR_VAR 0 18
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52853: LD_ADDR_VAR 0 19
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52893: LD_ADDR_VAR 0 20
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52934: LD_ADDR_VAR 0 21
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: NEG
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52978: LD_ADDR_VAR 0 22
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 3
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: LIST
53023: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53024: LD_ADDR_VAR 0 23
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 4
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 3
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53068: LD_ADDR_VAR 0 24
53072: PUSH
53073: LD_INT 3
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 4
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: LIST
53108: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53109: LD_ADDR_VAR 0 25
53113: PUSH
53114: LD_INT 3
53116: PUSH
53117: LD_INT 3
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 4
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: LD_INT 4
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53149: LD_ADDR_VAR 0 26
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 4
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 3
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: LIST
53189: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53190: LD_ADDR_VAR 0 27
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 4
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53234: LD_ADDR_VAR 0 28
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: LD_INT 3
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: LD_INT 4
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 4
53265: NEG
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53280: LD_ADDR_VAR 0 29
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 3
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 4
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 4
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 3
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 5
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 5
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 4
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 6
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 6
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 5
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53435: LD_ADDR_VAR 0 30
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 3
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 4
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 4
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 5
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 5
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 5
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 6
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 6
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53578: LD_ADDR_VAR 0 31
53582: PUSH
53583: LD_INT 3
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 3
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 4
53615: PUSH
53616: LD_INT 3
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 4
53625: PUSH
53626: LD_INT 4
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: LD_INT 4
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 5
53645: PUSH
53646: LD_INT 4
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 5
53655: PUSH
53656: LD_INT 5
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 4
53665: PUSH
53666: LD_INT 5
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 6
53675: PUSH
53676: LD_INT 5
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 6
53685: PUSH
53686: LD_INT 6
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 5
53695: PUSH
53696: LD_INT 6
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53717: LD_ADDR_VAR 0 32
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 4
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 4
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 3
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 5
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 5
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: LD_INT 4
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 6
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 6
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 5
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53860: LD_ADDR_VAR 0 33
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 3
53878: NEG
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 3
53889: NEG
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 4
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 4
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 4
53935: NEG
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 5
53946: NEG
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 5
53957: NEG
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 5
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 6
53980: NEG
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 6
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54015: LD_ADDR_VAR 0 34
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: LD_INT 3
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 3
54034: NEG
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: LD_INT 4
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 4
54070: NEG
54071: PUSH
54072: LD_INT 3
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 4
54082: NEG
54083: PUSH
54084: LD_INT 4
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 4
54094: NEG
54095: PUSH
54096: LD_INT 5
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 5
54106: NEG
54107: PUSH
54108: LD_INT 4
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 5
54118: NEG
54119: PUSH
54120: LD_INT 5
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 5
54130: NEG
54131: PUSH
54132: LD_INT 6
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 6
54142: NEG
54143: PUSH
54144: LD_INT 5
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 6
54154: NEG
54155: PUSH
54156: LD_INT 6
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54178: LD_ADDR_VAR 0 41
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54222: LD_ADDR_VAR 0 42
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54263: LD_ADDR_VAR 0 43
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54303: LD_ADDR_VAR 0 44
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54344: LD_ADDR_VAR 0 45
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54388: LD_ADDR_VAR 0 46
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: LIST
54433: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54434: LD_ADDR_VAR 0 47
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54467: LD_ADDR_VAR 0 48
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54498: LD_ADDR_VAR 0 49
54502: PUSH
54503: LD_INT 3
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54527: LD_ADDR_VAR 0 50
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 3
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54556: LD_ADDR_VAR 0 51
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54587: LD_ADDR_VAR 0 52
54591: PUSH
54592: LD_INT 3
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54620: LD_ADDR_VAR 0 53
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 3
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54664: LD_ADDR_VAR 0 54
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 3
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54705: LD_ADDR_VAR 0 55
54709: PUSH
54710: LD_INT 3
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54745: LD_ADDR_VAR 0 56
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54786: LD_ADDR_VAR 0 57
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 3
54804: NEG
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54830: LD_ADDR_VAR 0 58
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54876: LD_ADDR_VAR 0 59
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54920: LD_ADDR_VAR 0 60
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54961: LD_ADDR_VAR 0 61
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55001: LD_ADDR_VAR 0 62
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: LIST
55041: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55042: LD_ADDR_VAR 0 63
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55086: LD_ADDR_VAR 0 64
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: ST_TO_ADDR
// end ; 2 :
55132: GO 58398
55134: LD_INT 2
55136: DOUBLE
55137: EQUAL
55138: IFTRUE 55142
55140: GO 58397
55142: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55143: LD_ADDR_VAR 0 29
55147: PUSH
55148: LD_INT 4
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 5
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 5
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 4
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 3
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 3
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 5
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 3
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 3
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 4
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 4
55273: PUSH
55274: LD_INT 4
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: LD_INT 4
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 4
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 4
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 4
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 3
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 4
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 5
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 5
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: LD_INT 4
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 3
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: LD_INT 5
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: LD_INT 3
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 3
55471: NEG
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 4
55482: NEG
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 4
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 4
55505: NEG
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 4
55528: NEG
55529: PUSH
55530: LD_INT 4
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 4
55540: NEG
55541: PUSH
55542: LD_INT 5
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 3
55552: NEG
55553: PUSH
55554: LD_INT 4
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: NEG
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 5
55588: NEG
55589: PUSH
55590: LD_INT 4
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 5
55600: NEG
55601: PUSH
55602: LD_INT 5
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 3
55612: NEG
55613: PUSH
55614: LD_INT 5
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 5
55624: NEG
55625: PUSH
55626: LD_INT 3
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55681: LD_ADDR_VAR 0 30
55685: PUSH
55686: LD_INT 4
55688: PUSH
55689: LD_INT 4
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 5
55708: PUSH
55709: LD_INT 4
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 5
55718: PUSH
55719: LD_INT 5
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 4
55728: PUSH
55729: LD_INT 5
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: LD_INT 4
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: PUSH
55749: LD_INT 3
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 5
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: LD_INT 5
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 4
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 4
55871: NEG
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 4
55882: NEG
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 4
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 5
55927: NEG
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 5
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 5
55950: NEG
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: NEG
55974: PUSH
55975: LD_INT 3
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 4
56033: NEG
56034: PUSH
56035: LD_INT 3
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 4
56045: NEG
56046: PUSH
56047: LD_INT 4
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 4
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 4
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 4
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 5
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 4
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 4
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 5
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: LD_INT 3
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: LD_INT 5
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56228: LD_ADDR_VAR 0 31
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 4
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 5
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 5
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: LD_INT 4
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 3
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 5
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: NEG
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 3
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 4
56384: NEG
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 4
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 4
56407: NEG
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 4
56430: NEG
56431: PUSH
56432: LD_INT 4
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 4
56442: NEG
56443: PUSH
56444: LD_INT 5
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: NEG
56455: PUSH
56456: LD_INT 4
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 4
56478: NEG
56479: PUSH
56480: LD_INT 3
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 5
56490: NEG
56491: PUSH
56492: LD_INT 4
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 5
56502: NEG
56503: PUSH
56504: LD_INT 5
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: LD_INT 5
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 5
56526: NEG
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 3
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 4
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: LD_INT 4
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 4
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 4
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 4
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 5
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 5
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: LD_INT 2
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 5
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56778: LD_ADDR_VAR 0 32
56782: PUSH
56783: LD_INT 4
56785: NEG
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 4
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 4
56830: NEG
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 5
56841: NEG
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 5
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 5
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 3
56876: NEG
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 3
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: LD_INT 4
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 3
56935: NEG
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 4
56947: NEG
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 4
56959: NEG
56960: PUSH
56961: LD_INT 4
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: LD_INT 4
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 4
56983: NEG
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 4
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 5
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 4
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 3
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 4
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 5
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: LD_INT 5
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 4
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 4
57190: PUSH
57191: LD_INT 4
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 4
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 5
57210: PUSH
57211: LD_INT 4
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 5
57220: PUSH
57221: LD_INT 5
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 4
57230: PUSH
57231: LD_INT 5
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: LD_INT 4
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 5
57260: PUSH
57261: LD_INT 3
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: LD_INT 5
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57325: LD_ADDR_VAR 0 33
57329: PUSH
57330: LD_INT 4
57332: NEG
57333: PUSH
57334: LD_INT 4
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 4
57344: NEG
57345: PUSH
57346: LD_INT 5
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: NEG
57357: PUSH
57358: LD_INT 4
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 4
57380: NEG
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 5
57392: NEG
57393: PUSH
57394: LD_INT 4
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 5
57404: NEG
57405: PUSH
57406: LD_INT 5
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: LD_INT 5
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 5
57428: NEG
57429: PUSH
57430: LD_INT 3
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 4
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 3
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: LD_INT 4
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: LD_INT 4
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 4
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 4
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 5
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 5
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 5
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: LD_INT 3
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 4
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 4
57665: PUSH
57666: LD_INT 4
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: LD_INT 4
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: LD_INT 2
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 4
57705: PUSH
57706: LD_INT 2
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: LD_INT 4
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 4
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 3
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 4
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 5
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 5
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: LD_INT 4
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: LD_INT 3
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: LD_INT 5
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57863: LD_ADDR_VAR 0 34
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 4
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 5
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 4
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: LD_INT 4
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 5
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 5
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 4
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 4
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 4
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 4
58065: PUSH
58066: LD_INT 4
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 4
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 5
58085: PUSH
58086: LD_INT 4
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 5
58095: PUSH
58096: LD_INT 5
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: PUSH
58106: LD_INT 5
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: PUSH
58116: LD_INT 4
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: LD_INT 3
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 5
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: LD_INT 5
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 4
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 4
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: LD_INT 4
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 4
58248: NEG
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 4
58259: NEG
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 3
58282: NEG
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 4
58293: NEG
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 5
58304: NEG
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 5
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 5
58327: NEG
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 3
58339: NEG
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: ST_TO_ADDR
// end ; end ;
58395: GO 58398
58397: POP
// case btype of b_depot , b_warehouse :
58398: LD_VAR 0 1
58402: PUSH
58403: LD_INT 0
58405: DOUBLE
58406: EQUAL
58407: IFTRUE 58417
58409: LD_INT 1
58411: DOUBLE
58412: EQUAL
58413: IFTRUE 58417
58415: GO 58618
58417: POP
// case nation of nation_american :
58418: LD_VAR 0 5
58422: PUSH
58423: LD_INT 1
58425: DOUBLE
58426: EQUAL
58427: IFTRUE 58431
58429: GO 58487
58431: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58432: LD_ADDR_VAR 0 9
58436: PUSH
58437: LD_VAR 0 11
58441: PUSH
58442: LD_VAR 0 12
58446: PUSH
58447: LD_VAR 0 13
58451: PUSH
58452: LD_VAR 0 14
58456: PUSH
58457: LD_VAR 0 15
58461: PUSH
58462: LD_VAR 0 16
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: PUSH
58475: LD_VAR 0 4
58479: PUSH
58480: LD_INT 1
58482: PLUS
58483: ARRAY
58484: ST_TO_ADDR
58485: GO 58616
58487: LD_INT 2
58489: DOUBLE
58490: EQUAL
58491: IFTRUE 58495
58493: GO 58551
58495: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58496: LD_ADDR_VAR 0 9
58500: PUSH
58501: LD_VAR 0 17
58505: PUSH
58506: LD_VAR 0 18
58510: PUSH
58511: LD_VAR 0 19
58515: PUSH
58516: LD_VAR 0 20
58520: PUSH
58521: LD_VAR 0 21
58525: PUSH
58526: LD_VAR 0 22
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: PUSH
58539: LD_VAR 0 4
58543: PUSH
58544: LD_INT 1
58546: PLUS
58547: ARRAY
58548: ST_TO_ADDR
58549: GO 58616
58551: LD_INT 3
58553: DOUBLE
58554: EQUAL
58555: IFTRUE 58559
58557: GO 58615
58559: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58560: LD_ADDR_VAR 0 9
58564: PUSH
58565: LD_VAR 0 23
58569: PUSH
58570: LD_VAR 0 24
58574: PUSH
58575: LD_VAR 0 25
58579: PUSH
58580: LD_VAR 0 26
58584: PUSH
58585: LD_VAR 0 27
58589: PUSH
58590: LD_VAR 0 28
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: PUSH
58603: LD_VAR 0 4
58607: PUSH
58608: LD_INT 1
58610: PLUS
58611: ARRAY
58612: ST_TO_ADDR
58613: GO 58616
58615: POP
58616: GO 59171
58618: LD_INT 2
58620: DOUBLE
58621: EQUAL
58622: IFTRUE 58632
58624: LD_INT 3
58626: DOUBLE
58627: EQUAL
58628: IFTRUE 58632
58630: GO 58688
58632: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58633: LD_ADDR_VAR 0 9
58637: PUSH
58638: LD_VAR 0 29
58642: PUSH
58643: LD_VAR 0 30
58647: PUSH
58648: LD_VAR 0 31
58652: PUSH
58653: LD_VAR 0 32
58657: PUSH
58658: LD_VAR 0 33
58662: PUSH
58663: LD_VAR 0 34
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: PUSH
58676: LD_VAR 0 4
58680: PUSH
58681: LD_INT 1
58683: PLUS
58684: ARRAY
58685: ST_TO_ADDR
58686: GO 59171
58688: LD_INT 16
58690: DOUBLE
58691: EQUAL
58692: IFTRUE 58750
58694: LD_INT 17
58696: DOUBLE
58697: EQUAL
58698: IFTRUE 58750
58700: LD_INT 18
58702: DOUBLE
58703: EQUAL
58704: IFTRUE 58750
58706: LD_INT 19
58708: DOUBLE
58709: EQUAL
58710: IFTRUE 58750
58712: LD_INT 22
58714: DOUBLE
58715: EQUAL
58716: IFTRUE 58750
58718: LD_INT 20
58720: DOUBLE
58721: EQUAL
58722: IFTRUE 58750
58724: LD_INT 21
58726: DOUBLE
58727: EQUAL
58728: IFTRUE 58750
58730: LD_INT 23
58732: DOUBLE
58733: EQUAL
58734: IFTRUE 58750
58736: LD_INT 24
58738: DOUBLE
58739: EQUAL
58740: IFTRUE 58750
58742: LD_INT 25
58744: DOUBLE
58745: EQUAL
58746: IFTRUE 58750
58748: GO 58806
58750: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58751: LD_ADDR_VAR 0 9
58755: PUSH
58756: LD_VAR 0 35
58760: PUSH
58761: LD_VAR 0 36
58765: PUSH
58766: LD_VAR 0 37
58770: PUSH
58771: LD_VAR 0 38
58775: PUSH
58776: LD_VAR 0 39
58780: PUSH
58781: LD_VAR 0 40
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: PUSH
58794: LD_VAR 0 4
58798: PUSH
58799: LD_INT 1
58801: PLUS
58802: ARRAY
58803: ST_TO_ADDR
58804: GO 59171
58806: LD_INT 6
58808: DOUBLE
58809: EQUAL
58810: IFTRUE 58862
58812: LD_INT 7
58814: DOUBLE
58815: EQUAL
58816: IFTRUE 58862
58818: LD_INT 8
58820: DOUBLE
58821: EQUAL
58822: IFTRUE 58862
58824: LD_INT 13
58826: DOUBLE
58827: EQUAL
58828: IFTRUE 58862
58830: LD_INT 12
58832: DOUBLE
58833: EQUAL
58834: IFTRUE 58862
58836: LD_INT 15
58838: DOUBLE
58839: EQUAL
58840: IFTRUE 58862
58842: LD_INT 11
58844: DOUBLE
58845: EQUAL
58846: IFTRUE 58862
58848: LD_INT 14
58850: DOUBLE
58851: EQUAL
58852: IFTRUE 58862
58854: LD_INT 10
58856: DOUBLE
58857: EQUAL
58858: IFTRUE 58862
58860: GO 58918
58862: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58863: LD_ADDR_VAR 0 9
58867: PUSH
58868: LD_VAR 0 41
58872: PUSH
58873: LD_VAR 0 42
58877: PUSH
58878: LD_VAR 0 43
58882: PUSH
58883: LD_VAR 0 44
58887: PUSH
58888: LD_VAR 0 45
58892: PUSH
58893: LD_VAR 0 46
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: PUSH
58906: LD_VAR 0 4
58910: PUSH
58911: LD_INT 1
58913: PLUS
58914: ARRAY
58915: ST_TO_ADDR
58916: GO 59171
58918: LD_INT 36
58920: DOUBLE
58921: EQUAL
58922: IFTRUE 58926
58924: GO 58982
58926: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58927: LD_ADDR_VAR 0 9
58931: PUSH
58932: LD_VAR 0 47
58936: PUSH
58937: LD_VAR 0 48
58941: PUSH
58942: LD_VAR 0 49
58946: PUSH
58947: LD_VAR 0 50
58951: PUSH
58952: LD_VAR 0 51
58956: PUSH
58957: LD_VAR 0 52
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: PUSH
58970: LD_VAR 0 4
58974: PUSH
58975: LD_INT 1
58977: PLUS
58978: ARRAY
58979: ST_TO_ADDR
58980: GO 59171
58982: LD_INT 4
58984: DOUBLE
58985: EQUAL
58986: IFTRUE 59008
58988: LD_INT 5
58990: DOUBLE
58991: EQUAL
58992: IFTRUE 59008
58994: LD_INT 34
58996: DOUBLE
58997: EQUAL
58998: IFTRUE 59008
59000: LD_INT 37
59002: DOUBLE
59003: EQUAL
59004: IFTRUE 59008
59006: GO 59064
59008: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59009: LD_ADDR_VAR 0 9
59013: PUSH
59014: LD_VAR 0 53
59018: PUSH
59019: LD_VAR 0 54
59023: PUSH
59024: LD_VAR 0 55
59028: PUSH
59029: LD_VAR 0 56
59033: PUSH
59034: LD_VAR 0 57
59038: PUSH
59039: LD_VAR 0 58
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: PUSH
59052: LD_VAR 0 4
59056: PUSH
59057: LD_INT 1
59059: PLUS
59060: ARRAY
59061: ST_TO_ADDR
59062: GO 59171
59064: LD_INT 31
59066: DOUBLE
59067: EQUAL
59068: IFTRUE 59114
59070: LD_INT 32
59072: DOUBLE
59073: EQUAL
59074: IFTRUE 59114
59076: LD_INT 33
59078: DOUBLE
59079: EQUAL
59080: IFTRUE 59114
59082: LD_INT 27
59084: DOUBLE
59085: EQUAL
59086: IFTRUE 59114
59088: LD_INT 26
59090: DOUBLE
59091: EQUAL
59092: IFTRUE 59114
59094: LD_INT 28
59096: DOUBLE
59097: EQUAL
59098: IFTRUE 59114
59100: LD_INT 29
59102: DOUBLE
59103: EQUAL
59104: IFTRUE 59114
59106: LD_INT 30
59108: DOUBLE
59109: EQUAL
59110: IFTRUE 59114
59112: GO 59170
59114: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59115: LD_ADDR_VAR 0 9
59119: PUSH
59120: LD_VAR 0 59
59124: PUSH
59125: LD_VAR 0 60
59129: PUSH
59130: LD_VAR 0 61
59134: PUSH
59135: LD_VAR 0 62
59139: PUSH
59140: LD_VAR 0 63
59144: PUSH
59145: LD_VAR 0 64
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: PUSH
59158: LD_VAR 0 4
59162: PUSH
59163: LD_INT 1
59165: PLUS
59166: ARRAY
59167: ST_TO_ADDR
59168: GO 59171
59170: POP
// temp_list2 = [ ] ;
59171: LD_ADDR_VAR 0 10
59175: PUSH
59176: EMPTY
59177: ST_TO_ADDR
// for i in temp_list do
59178: LD_ADDR_VAR 0 8
59182: PUSH
59183: LD_VAR 0 9
59187: PUSH
59188: FOR_IN
59189: IFFALSE 59241
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59191: LD_ADDR_VAR 0 10
59195: PUSH
59196: LD_VAR 0 10
59200: PUSH
59201: LD_VAR 0 8
59205: PUSH
59206: LD_INT 1
59208: ARRAY
59209: PUSH
59210: LD_VAR 0 2
59214: PLUS
59215: PUSH
59216: LD_VAR 0 8
59220: PUSH
59221: LD_INT 2
59223: ARRAY
59224: PUSH
59225: LD_VAR 0 3
59229: PLUS
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: ADD
59238: ST_TO_ADDR
59239: GO 59188
59241: POP
59242: POP
// result = temp_list2 ;
59243: LD_ADDR_VAR 0 7
59247: PUSH
59248: LD_VAR 0 10
59252: ST_TO_ADDR
// end ;
59253: LD_VAR 0 7
59257: RET
// export function EnemyInRange ( unit , dist ) ; begin
59258: LD_INT 0
59260: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59261: LD_ADDR_VAR 0 3
59265: PUSH
59266: LD_VAR 0 1
59270: PPUSH
59271: CALL_OW 255
59275: PPUSH
59276: LD_VAR 0 1
59280: PPUSH
59281: CALL_OW 250
59285: PPUSH
59286: LD_VAR 0 1
59290: PPUSH
59291: CALL_OW 251
59295: PPUSH
59296: LD_VAR 0 2
59300: PPUSH
59301: CALL 32660 0 4
59305: PUSH
59306: LD_INT 4
59308: ARRAY
59309: ST_TO_ADDR
// end ;
59310: LD_VAR 0 3
59314: RET
// export function PlayerSeeMe ( unit ) ; begin
59315: LD_INT 0
59317: PPUSH
// result := See ( your_side , unit ) ;
59318: LD_ADDR_VAR 0 2
59322: PUSH
59323: LD_OWVAR 2
59327: PPUSH
59328: LD_VAR 0 1
59332: PPUSH
59333: CALL_OW 292
59337: ST_TO_ADDR
// end ;
59338: LD_VAR 0 2
59342: RET
// export function ReverseDir ( unit ) ; begin
59343: LD_INT 0
59345: PPUSH
// if not unit then
59346: LD_VAR 0 1
59350: NOT
59351: IFFALSE 59355
// exit ;
59353: GO 59378
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59355: LD_ADDR_VAR 0 2
59359: PUSH
59360: LD_VAR 0 1
59364: PPUSH
59365: CALL_OW 254
59369: PUSH
59370: LD_INT 3
59372: PLUS
59373: PUSH
59374: LD_INT 6
59376: MOD
59377: ST_TO_ADDR
// end ;
59378: LD_VAR 0 2
59382: RET
// export function ReverseArray ( array ) ; var i ; begin
59383: LD_INT 0
59385: PPUSH
59386: PPUSH
// if not array then
59387: LD_VAR 0 1
59391: NOT
59392: IFFALSE 59396
// exit ;
59394: GO 59451
// result := [ ] ;
59396: LD_ADDR_VAR 0 2
59400: PUSH
59401: EMPTY
59402: ST_TO_ADDR
// for i := array downto 1 do
59403: LD_ADDR_VAR 0 3
59407: PUSH
59408: DOUBLE
59409: LD_VAR 0 1
59413: INC
59414: ST_TO_ADDR
59415: LD_INT 1
59417: PUSH
59418: FOR_DOWNTO
59419: IFFALSE 59449
// result := Join ( result , array [ i ] ) ;
59421: LD_ADDR_VAR 0 2
59425: PUSH
59426: LD_VAR 0 2
59430: PPUSH
59431: LD_VAR 0 1
59435: PUSH
59436: LD_VAR 0 3
59440: ARRAY
59441: PPUSH
59442: CALL 64076 0 2
59446: ST_TO_ADDR
59447: GO 59418
59449: POP
59450: POP
// end ;
59451: LD_VAR 0 2
59455: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59456: LD_INT 0
59458: PPUSH
59459: PPUSH
59460: PPUSH
59461: PPUSH
59462: PPUSH
59463: PPUSH
// if not unit or not hexes then
59464: LD_VAR 0 1
59468: NOT
59469: PUSH
59470: LD_VAR 0 2
59474: NOT
59475: OR
59476: IFFALSE 59480
// exit ;
59478: GO 59603
// dist := 9999 ;
59480: LD_ADDR_VAR 0 5
59484: PUSH
59485: LD_INT 9999
59487: ST_TO_ADDR
// for i = 1 to hexes do
59488: LD_ADDR_VAR 0 4
59492: PUSH
59493: DOUBLE
59494: LD_INT 1
59496: DEC
59497: ST_TO_ADDR
59498: LD_VAR 0 2
59502: PUSH
59503: FOR_TO
59504: IFFALSE 59591
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59506: LD_ADDR_VAR 0 6
59510: PUSH
59511: LD_VAR 0 1
59515: PPUSH
59516: LD_VAR 0 2
59520: PUSH
59521: LD_VAR 0 4
59525: ARRAY
59526: PUSH
59527: LD_INT 1
59529: ARRAY
59530: PPUSH
59531: LD_VAR 0 2
59535: PUSH
59536: LD_VAR 0 4
59540: ARRAY
59541: PUSH
59542: LD_INT 2
59544: ARRAY
59545: PPUSH
59546: CALL_OW 297
59550: ST_TO_ADDR
// if tdist < dist then
59551: LD_VAR 0 6
59555: PUSH
59556: LD_VAR 0 5
59560: LESS
59561: IFFALSE 59589
// begin hex := hexes [ i ] ;
59563: LD_ADDR_VAR 0 8
59567: PUSH
59568: LD_VAR 0 2
59572: PUSH
59573: LD_VAR 0 4
59577: ARRAY
59578: ST_TO_ADDR
// dist := tdist ;
59579: LD_ADDR_VAR 0 5
59583: PUSH
59584: LD_VAR 0 6
59588: ST_TO_ADDR
// end ; end ;
59589: GO 59503
59591: POP
59592: POP
// result := hex ;
59593: LD_ADDR_VAR 0 3
59597: PUSH
59598: LD_VAR 0 8
59602: ST_TO_ADDR
// end ;
59603: LD_VAR 0 3
59607: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59608: LD_INT 0
59610: PPUSH
59611: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59612: LD_VAR 0 1
59616: NOT
59617: PUSH
59618: LD_VAR 0 1
59622: PUSH
59623: LD_INT 21
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 23
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PPUSH
59647: CALL_OW 69
59651: IN
59652: NOT
59653: OR
59654: IFFALSE 59658
// exit ;
59656: GO 59705
// for i = 1 to 3 do
59658: LD_ADDR_VAR 0 3
59662: PUSH
59663: DOUBLE
59664: LD_INT 1
59666: DEC
59667: ST_TO_ADDR
59668: LD_INT 3
59670: PUSH
59671: FOR_TO
59672: IFFALSE 59703
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59674: LD_VAR 0 1
59678: PPUSH
59679: CALL_OW 250
59683: PPUSH
59684: LD_VAR 0 1
59688: PPUSH
59689: CALL_OW 251
59693: PPUSH
59694: LD_INT 1
59696: PPUSH
59697: CALL_OW 453
59701: GO 59671
59703: POP
59704: POP
// end ;
59705: LD_VAR 0 2
59709: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59710: LD_INT 0
59712: PPUSH
59713: PPUSH
59714: PPUSH
59715: PPUSH
59716: PPUSH
59717: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59718: LD_VAR 0 1
59722: NOT
59723: PUSH
59724: LD_VAR 0 2
59728: NOT
59729: OR
59730: PUSH
59731: LD_VAR 0 1
59735: PPUSH
59736: CALL_OW 314
59740: OR
59741: IFFALSE 59745
// exit ;
59743: GO 60186
// x := GetX ( enemy_unit ) ;
59745: LD_ADDR_VAR 0 7
59749: PUSH
59750: LD_VAR 0 2
59754: PPUSH
59755: CALL_OW 250
59759: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59760: LD_ADDR_VAR 0 8
59764: PUSH
59765: LD_VAR 0 2
59769: PPUSH
59770: CALL_OW 251
59774: ST_TO_ADDR
// if not x or not y then
59775: LD_VAR 0 7
59779: NOT
59780: PUSH
59781: LD_VAR 0 8
59785: NOT
59786: OR
59787: IFFALSE 59791
// exit ;
59789: GO 60186
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59791: LD_ADDR_VAR 0 6
59795: PUSH
59796: LD_VAR 0 7
59800: PPUSH
59801: LD_INT 0
59803: PPUSH
59804: LD_INT 4
59806: PPUSH
59807: CALL_OW 272
59811: PUSH
59812: LD_VAR 0 8
59816: PPUSH
59817: LD_INT 0
59819: PPUSH
59820: LD_INT 4
59822: PPUSH
59823: CALL_OW 273
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_VAR 0 7
59836: PPUSH
59837: LD_INT 1
59839: PPUSH
59840: LD_INT 4
59842: PPUSH
59843: CALL_OW 272
59847: PUSH
59848: LD_VAR 0 8
59852: PPUSH
59853: LD_INT 1
59855: PPUSH
59856: LD_INT 4
59858: PPUSH
59859: CALL_OW 273
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_VAR 0 7
59872: PPUSH
59873: LD_INT 2
59875: PPUSH
59876: LD_INT 4
59878: PPUSH
59879: CALL_OW 272
59883: PUSH
59884: LD_VAR 0 8
59888: PPUSH
59889: LD_INT 2
59891: PPUSH
59892: LD_INT 4
59894: PPUSH
59895: CALL_OW 273
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_VAR 0 7
59908: PPUSH
59909: LD_INT 3
59911: PPUSH
59912: LD_INT 4
59914: PPUSH
59915: CALL_OW 272
59919: PUSH
59920: LD_VAR 0 8
59924: PPUSH
59925: LD_INT 3
59927: PPUSH
59928: LD_INT 4
59930: PPUSH
59931: CALL_OW 273
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_VAR 0 7
59944: PPUSH
59945: LD_INT 4
59947: PPUSH
59948: LD_INT 4
59950: PPUSH
59951: CALL_OW 272
59955: PUSH
59956: LD_VAR 0 8
59960: PPUSH
59961: LD_INT 4
59963: PPUSH
59964: LD_INT 4
59966: PPUSH
59967: CALL_OW 273
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_VAR 0 7
59980: PPUSH
59981: LD_INT 5
59983: PPUSH
59984: LD_INT 4
59986: PPUSH
59987: CALL_OW 272
59991: PUSH
59992: LD_VAR 0 8
59996: PPUSH
59997: LD_INT 5
59999: PPUSH
60000: LD_INT 4
60002: PPUSH
60003: CALL_OW 273
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: ST_TO_ADDR
// for i = tmp downto 1 do
60020: LD_ADDR_VAR 0 4
60024: PUSH
60025: DOUBLE
60026: LD_VAR 0 6
60030: INC
60031: ST_TO_ADDR
60032: LD_INT 1
60034: PUSH
60035: FOR_DOWNTO
60036: IFFALSE 60137
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60038: LD_VAR 0 6
60042: PUSH
60043: LD_VAR 0 4
60047: ARRAY
60048: PUSH
60049: LD_INT 1
60051: ARRAY
60052: PPUSH
60053: LD_VAR 0 6
60057: PUSH
60058: LD_VAR 0 4
60062: ARRAY
60063: PUSH
60064: LD_INT 2
60066: ARRAY
60067: PPUSH
60068: CALL_OW 488
60072: NOT
60073: PUSH
60074: LD_VAR 0 6
60078: PUSH
60079: LD_VAR 0 4
60083: ARRAY
60084: PUSH
60085: LD_INT 1
60087: ARRAY
60088: PPUSH
60089: LD_VAR 0 6
60093: PUSH
60094: LD_VAR 0 4
60098: ARRAY
60099: PUSH
60100: LD_INT 2
60102: ARRAY
60103: PPUSH
60104: CALL_OW 428
60108: PUSH
60109: LD_INT 0
60111: NONEQUAL
60112: OR
60113: IFFALSE 60135
// tmp := Delete ( tmp , i ) ;
60115: LD_ADDR_VAR 0 6
60119: PUSH
60120: LD_VAR 0 6
60124: PPUSH
60125: LD_VAR 0 4
60129: PPUSH
60130: CALL_OW 3
60134: ST_TO_ADDR
60135: GO 60035
60137: POP
60138: POP
// j := GetClosestHex ( unit , tmp ) ;
60139: LD_ADDR_VAR 0 5
60143: PUSH
60144: LD_VAR 0 1
60148: PPUSH
60149: LD_VAR 0 6
60153: PPUSH
60154: CALL 59456 0 2
60158: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60159: LD_VAR 0 1
60163: PPUSH
60164: LD_VAR 0 5
60168: PUSH
60169: LD_INT 1
60171: ARRAY
60172: PPUSH
60173: LD_VAR 0 5
60177: PUSH
60178: LD_INT 2
60180: ARRAY
60181: PPUSH
60182: CALL_OW 111
// end ;
60186: LD_VAR 0 3
60190: RET
// export function PrepareApemanSoldier ( ) ; begin
60191: LD_INT 0
60193: PPUSH
// uc_nation := 0 ;
60194: LD_ADDR_OWVAR 21
60198: PUSH
60199: LD_INT 0
60201: ST_TO_ADDR
// hc_sex := sex_male ;
60202: LD_ADDR_OWVAR 27
60206: PUSH
60207: LD_INT 1
60209: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60210: LD_ADDR_OWVAR 28
60214: PUSH
60215: LD_INT 15
60217: ST_TO_ADDR
// hc_gallery :=  ;
60218: LD_ADDR_OWVAR 33
60222: PUSH
60223: LD_STRING 
60225: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60226: LD_ADDR_OWVAR 31
60230: PUSH
60231: LD_INT 0
60233: PPUSH
60234: LD_INT 3
60236: PPUSH
60237: CALL_OW 12
60241: PUSH
60242: LD_INT 0
60244: PPUSH
60245: LD_INT 3
60247: PPUSH
60248: CALL_OW 12
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: ST_TO_ADDR
// end ;
60265: LD_VAR 0 1
60269: RET
// export function PrepareApemanEngineer ( ) ; begin
60270: LD_INT 0
60272: PPUSH
// uc_nation := 0 ;
60273: LD_ADDR_OWVAR 21
60277: PUSH
60278: LD_INT 0
60280: ST_TO_ADDR
// hc_sex := sex_male ;
60281: LD_ADDR_OWVAR 27
60285: PUSH
60286: LD_INT 1
60288: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60289: LD_ADDR_OWVAR 28
60293: PUSH
60294: LD_INT 16
60296: ST_TO_ADDR
// hc_gallery :=  ;
60297: LD_ADDR_OWVAR 33
60301: PUSH
60302: LD_STRING 
60304: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60305: LD_ADDR_OWVAR 31
60309: PUSH
60310: LD_INT 0
60312: PPUSH
60313: LD_INT 3
60315: PPUSH
60316: CALL_OW 12
60320: PUSH
60321: LD_INT 0
60323: PPUSH
60324: LD_INT 3
60326: PPUSH
60327: CALL_OW 12
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: ST_TO_ADDR
// end ;
60344: LD_VAR 0 1
60348: RET
// export function PrepareApeman ( agressivity ) ; begin
60349: LD_INT 0
60351: PPUSH
// uc_side := 0 ;
60352: LD_ADDR_OWVAR 20
60356: PUSH
60357: LD_INT 0
60359: ST_TO_ADDR
// uc_nation := 0 ;
60360: LD_ADDR_OWVAR 21
60364: PUSH
60365: LD_INT 0
60367: ST_TO_ADDR
// hc_sex := sex_male ;
60368: LD_ADDR_OWVAR 27
60372: PUSH
60373: LD_INT 1
60375: ST_TO_ADDR
// hc_class := class_apeman ;
60376: LD_ADDR_OWVAR 28
60380: PUSH
60381: LD_INT 12
60383: ST_TO_ADDR
// hc_gallery :=  ;
60384: LD_ADDR_OWVAR 33
60388: PUSH
60389: LD_STRING 
60391: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60392: LD_ADDR_OWVAR 35
60396: PUSH
60397: LD_VAR 0 1
60401: NEG
60402: PPUSH
60403: LD_VAR 0 1
60407: PPUSH
60408: CALL_OW 12
60412: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60413: LD_ADDR_OWVAR 31
60417: PUSH
60418: LD_INT 0
60420: PPUSH
60421: LD_INT 3
60423: PPUSH
60424: CALL_OW 12
60428: PUSH
60429: LD_INT 0
60431: PPUSH
60432: LD_INT 3
60434: PPUSH
60435: CALL_OW 12
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: ST_TO_ADDR
// end ;
60452: LD_VAR 0 2
60456: RET
// export function PrepareTiger ( agressivity ) ; begin
60457: LD_INT 0
60459: PPUSH
// uc_side := 0 ;
60460: LD_ADDR_OWVAR 20
60464: PUSH
60465: LD_INT 0
60467: ST_TO_ADDR
// uc_nation := 0 ;
60468: LD_ADDR_OWVAR 21
60472: PUSH
60473: LD_INT 0
60475: ST_TO_ADDR
// hc_class := class_tiger ;
60476: LD_ADDR_OWVAR 28
60480: PUSH
60481: LD_INT 14
60483: ST_TO_ADDR
// hc_gallery :=  ;
60484: LD_ADDR_OWVAR 33
60488: PUSH
60489: LD_STRING 
60491: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60492: LD_ADDR_OWVAR 35
60496: PUSH
60497: LD_VAR 0 1
60501: NEG
60502: PPUSH
60503: LD_VAR 0 1
60507: PPUSH
60508: CALL_OW 12
60512: ST_TO_ADDR
// end ;
60513: LD_VAR 0 2
60517: RET
// export function PrepareEnchidna ( ) ; begin
60518: LD_INT 0
60520: PPUSH
// uc_side := 0 ;
60521: LD_ADDR_OWVAR 20
60525: PUSH
60526: LD_INT 0
60528: ST_TO_ADDR
// uc_nation := 0 ;
60529: LD_ADDR_OWVAR 21
60533: PUSH
60534: LD_INT 0
60536: ST_TO_ADDR
// hc_class := class_baggie ;
60537: LD_ADDR_OWVAR 28
60541: PUSH
60542: LD_INT 13
60544: ST_TO_ADDR
// hc_gallery :=  ;
60545: LD_ADDR_OWVAR 33
60549: PUSH
60550: LD_STRING 
60552: ST_TO_ADDR
// end ;
60553: LD_VAR 0 1
60557: RET
// export function PrepareFrog ( ) ; begin
60558: LD_INT 0
60560: PPUSH
// uc_side := 0 ;
60561: LD_ADDR_OWVAR 20
60565: PUSH
60566: LD_INT 0
60568: ST_TO_ADDR
// uc_nation := 0 ;
60569: LD_ADDR_OWVAR 21
60573: PUSH
60574: LD_INT 0
60576: ST_TO_ADDR
// hc_class := class_frog ;
60577: LD_ADDR_OWVAR 28
60581: PUSH
60582: LD_INT 19
60584: ST_TO_ADDR
// hc_gallery :=  ;
60585: LD_ADDR_OWVAR 33
60589: PUSH
60590: LD_STRING 
60592: ST_TO_ADDR
// end ;
60593: LD_VAR 0 1
60597: RET
// export function PrepareFish ( ) ; begin
60598: LD_INT 0
60600: PPUSH
// uc_side := 0 ;
60601: LD_ADDR_OWVAR 20
60605: PUSH
60606: LD_INT 0
60608: ST_TO_ADDR
// uc_nation := 0 ;
60609: LD_ADDR_OWVAR 21
60613: PUSH
60614: LD_INT 0
60616: ST_TO_ADDR
// hc_class := class_fish ;
60617: LD_ADDR_OWVAR 28
60621: PUSH
60622: LD_INT 20
60624: ST_TO_ADDR
// hc_gallery :=  ;
60625: LD_ADDR_OWVAR 33
60629: PUSH
60630: LD_STRING 
60632: ST_TO_ADDR
// end ;
60633: LD_VAR 0 1
60637: RET
// export function PrepareBird ( ) ; begin
60638: LD_INT 0
60640: PPUSH
// uc_side := 0 ;
60641: LD_ADDR_OWVAR 20
60645: PUSH
60646: LD_INT 0
60648: ST_TO_ADDR
// uc_nation := 0 ;
60649: LD_ADDR_OWVAR 21
60653: PUSH
60654: LD_INT 0
60656: ST_TO_ADDR
// hc_class := class_phororhacos ;
60657: LD_ADDR_OWVAR 28
60661: PUSH
60662: LD_INT 18
60664: ST_TO_ADDR
// hc_gallery :=  ;
60665: LD_ADDR_OWVAR 33
60669: PUSH
60670: LD_STRING 
60672: ST_TO_ADDR
// end ;
60673: LD_VAR 0 1
60677: RET
// export function PrepareHorse ( ) ; begin
60678: LD_INT 0
60680: PPUSH
// uc_side := 0 ;
60681: LD_ADDR_OWVAR 20
60685: PUSH
60686: LD_INT 0
60688: ST_TO_ADDR
// uc_nation := 0 ;
60689: LD_ADDR_OWVAR 21
60693: PUSH
60694: LD_INT 0
60696: ST_TO_ADDR
// hc_class := class_horse ;
60697: LD_ADDR_OWVAR 28
60701: PUSH
60702: LD_INT 21
60704: ST_TO_ADDR
// hc_gallery :=  ;
60705: LD_ADDR_OWVAR 33
60709: PUSH
60710: LD_STRING 
60712: ST_TO_ADDR
// end ;
60713: LD_VAR 0 1
60717: RET
// export function PrepareMastodont ( ) ; begin
60718: LD_INT 0
60720: PPUSH
// uc_side := 0 ;
60721: LD_ADDR_OWVAR 20
60725: PUSH
60726: LD_INT 0
60728: ST_TO_ADDR
// uc_nation := 0 ;
60729: LD_ADDR_OWVAR 21
60733: PUSH
60734: LD_INT 0
60736: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60737: LD_ADDR_OWVAR 37
60741: PUSH
60742: LD_INT 31
60744: ST_TO_ADDR
// vc_control := control_rider ;
60745: LD_ADDR_OWVAR 38
60749: PUSH
60750: LD_INT 4
60752: ST_TO_ADDR
// end ;
60753: LD_VAR 0 1
60757: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60758: LD_INT 0
60760: PPUSH
60761: PPUSH
60762: PPUSH
// uc_side = 0 ;
60763: LD_ADDR_OWVAR 20
60767: PUSH
60768: LD_INT 0
60770: ST_TO_ADDR
// uc_nation = 0 ;
60771: LD_ADDR_OWVAR 21
60775: PUSH
60776: LD_INT 0
60778: ST_TO_ADDR
// InitHc_All ( ) ;
60779: CALL_OW 584
// InitVc ;
60783: CALL_OW 20
// if mastodonts then
60787: LD_VAR 0 6
60791: IFFALSE 60858
// for i = 1 to mastodonts do
60793: LD_ADDR_VAR 0 11
60797: PUSH
60798: DOUBLE
60799: LD_INT 1
60801: DEC
60802: ST_TO_ADDR
60803: LD_VAR 0 6
60807: PUSH
60808: FOR_TO
60809: IFFALSE 60856
// begin vc_chassis := 31 ;
60811: LD_ADDR_OWVAR 37
60815: PUSH
60816: LD_INT 31
60818: ST_TO_ADDR
// vc_control := control_rider ;
60819: LD_ADDR_OWVAR 38
60823: PUSH
60824: LD_INT 4
60826: ST_TO_ADDR
// animal := CreateVehicle ;
60827: LD_ADDR_VAR 0 12
60831: PUSH
60832: CALL_OW 45
60836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60837: LD_VAR 0 12
60841: PPUSH
60842: LD_VAR 0 8
60846: PPUSH
60847: LD_INT 0
60849: PPUSH
60850: CALL 62993 0 3
// end ;
60854: GO 60808
60856: POP
60857: POP
// if horses then
60858: LD_VAR 0 5
60862: IFFALSE 60929
// for i = 1 to horses do
60864: LD_ADDR_VAR 0 11
60868: PUSH
60869: DOUBLE
60870: LD_INT 1
60872: DEC
60873: ST_TO_ADDR
60874: LD_VAR 0 5
60878: PUSH
60879: FOR_TO
60880: IFFALSE 60927
// begin hc_class := 21 ;
60882: LD_ADDR_OWVAR 28
60886: PUSH
60887: LD_INT 21
60889: ST_TO_ADDR
// hc_gallery :=  ;
60890: LD_ADDR_OWVAR 33
60894: PUSH
60895: LD_STRING 
60897: ST_TO_ADDR
// animal := CreateHuman ;
60898: LD_ADDR_VAR 0 12
60902: PUSH
60903: CALL_OW 44
60907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60908: LD_VAR 0 12
60912: PPUSH
60913: LD_VAR 0 8
60917: PPUSH
60918: LD_INT 0
60920: PPUSH
60921: CALL 62993 0 3
// end ;
60925: GO 60879
60927: POP
60928: POP
// if birds then
60929: LD_VAR 0 1
60933: IFFALSE 61000
// for i = 1 to birds do
60935: LD_ADDR_VAR 0 11
60939: PUSH
60940: DOUBLE
60941: LD_INT 1
60943: DEC
60944: ST_TO_ADDR
60945: LD_VAR 0 1
60949: PUSH
60950: FOR_TO
60951: IFFALSE 60998
// begin hc_class = 18 ;
60953: LD_ADDR_OWVAR 28
60957: PUSH
60958: LD_INT 18
60960: ST_TO_ADDR
// hc_gallery =  ;
60961: LD_ADDR_OWVAR 33
60965: PUSH
60966: LD_STRING 
60968: ST_TO_ADDR
// animal := CreateHuman ;
60969: LD_ADDR_VAR 0 12
60973: PUSH
60974: CALL_OW 44
60978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60979: LD_VAR 0 12
60983: PPUSH
60984: LD_VAR 0 8
60988: PPUSH
60989: LD_INT 0
60991: PPUSH
60992: CALL 62993 0 3
// end ;
60996: GO 60950
60998: POP
60999: POP
// if tigers then
61000: LD_VAR 0 2
61004: IFFALSE 61088
// for i = 1 to tigers do
61006: LD_ADDR_VAR 0 11
61010: PUSH
61011: DOUBLE
61012: LD_INT 1
61014: DEC
61015: ST_TO_ADDR
61016: LD_VAR 0 2
61020: PUSH
61021: FOR_TO
61022: IFFALSE 61086
// begin hc_class = class_tiger ;
61024: LD_ADDR_OWVAR 28
61028: PUSH
61029: LD_INT 14
61031: ST_TO_ADDR
// hc_gallery =  ;
61032: LD_ADDR_OWVAR 33
61036: PUSH
61037: LD_STRING 
61039: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61040: LD_ADDR_OWVAR 35
61044: PUSH
61045: LD_INT 7
61047: NEG
61048: PPUSH
61049: LD_INT 7
61051: PPUSH
61052: CALL_OW 12
61056: ST_TO_ADDR
// animal := CreateHuman ;
61057: LD_ADDR_VAR 0 12
61061: PUSH
61062: CALL_OW 44
61066: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61067: LD_VAR 0 12
61071: PPUSH
61072: LD_VAR 0 8
61076: PPUSH
61077: LD_INT 0
61079: PPUSH
61080: CALL 62993 0 3
// end ;
61084: GO 61021
61086: POP
61087: POP
// if apemans then
61088: LD_VAR 0 3
61092: IFFALSE 61215
// for i = 1 to apemans do
61094: LD_ADDR_VAR 0 11
61098: PUSH
61099: DOUBLE
61100: LD_INT 1
61102: DEC
61103: ST_TO_ADDR
61104: LD_VAR 0 3
61108: PUSH
61109: FOR_TO
61110: IFFALSE 61213
// begin hc_class = class_apeman ;
61112: LD_ADDR_OWVAR 28
61116: PUSH
61117: LD_INT 12
61119: ST_TO_ADDR
// hc_gallery =  ;
61120: LD_ADDR_OWVAR 33
61124: PUSH
61125: LD_STRING 
61127: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61128: LD_ADDR_OWVAR 35
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PPUSH
61137: LD_INT 2
61139: PPUSH
61140: CALL_OW 12
61144: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61145: LD_ADDR_OWVAR 31
61149: PUSH
61150: LD_INT 1
61152: PPUSH
61153: LD_INT 3
61155: PPUSH
61156: CALL_OW 12
61160: PUSH
61161: LD_INT 1
61163: PPUSH
61164: LD_INT 3
61166: PPUSH
61167: CALL_OW 12
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: ST_TO_ADDR
// animal := CreateHuman ;
61184: LD_ADDR_VAR 0 12
61188: PUSH
61189: CALL_OW 44
61193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61194: LD_VAR 0 12
61198: PPUSH
61199: LD_VAR 0 8
61203: PPUSH
61204: LD_INT 0
61206: PPUSH
61207: CALL 62993 0 3
// end ;
61211: GO 61109
61213: POP
61214: POP
// if enchidnas then
61215: LD_VAR 0 4
61219: IFFALSE 61286
// for i = 1 to enchidnas do
61221: LD_ADDR_VAR 0 11
61225: PUSH
61226: DOUBLE
61227: LD_INT 1
61229: DEC
61230: ST_TO_ADDR
61231: LD_VAR 0 4
61235: PUSH
61236: FOR_TO
61237: IFFALSE 61284
// begin hc_class = 13 ;
61239: LD_ADDR_OWVAR 28
61243: PUSH
61244: LD_INT 13
61246: ST_TO_ADDR
// hc_gallery =  ;
61247: LD_ADDR_OWVAR 33
61251: PUSH
61252: LD_STRING 
61254: ST_TO_ADDR
// animal := CreateHuman ;
61255: LD_ADDR_VAR 0 12
61259: PUSH
61260: CALL_OW 44
61264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61265: LD_VAR 0 12
61269: PPUSH
61270: LD_VAR 0 8
61274: PPUSH
61275: LD_INT 0
61277: PPUSH
61278: CALL 62993 0 3
// end ;
61282: GO 61236
61284: POP
61285: POP
// if fishes then
61286: LD_VAR 0 7
61290: IFFALSE 61357
// for i = 1 to fishes do
61292: LD_ADDR_VAR 0 11
61296: PUSH
61297: DOUBLE
61298: LD_INT 1
61300: DEC
61301: ST_TO_ADDR
61302: LD_VAR 0 7
61306: PUSH
61307: FOR_TO
61308: IFFALSE 61355
// begin hc_class = 20 ;
61310: LD_ADDR_OWVAR 28
61314: PUSH
61315: LD_INT 20
61317: ST_TO_ADDR
// hc_gallery =  ;
61318: LD_ADDR_OWVAR 33
61322: PUSH
61323: LD_STRING 
61325: ST_TO_ADDR
// animal := CreateHuman ;
61326: LD_ADDR_VAR 0 12
61330: PUSH
61331: CALL_OW 44
61335: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61336: LD_VAR 0 12
61340: PPUSH
61341: LD_VAR 0 9
61345: PPUSH
61346: LD_INT 0
61348: PPUSH
61349: CALL 62993 0 3
// end ;
61353: GO 61307
61355: POP
61356: POP
// end ;
61357: LD_VAR 0 10
61361: RET
// export function WantHeal ( sci , unit ) ; begin
61362: LD_INT 0
61364: PPUSH
// if GetTaskList ( sci ) > 0 then
61365: LD_VAR 0 1
61369: PPUSH
61370: CALL_OW 437
61374: PUSH
61375: LD_INT 0
61377: GREATER
61378: IFFALSE 61448
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61380: LD_VAR 0 1
61384: PPUSH
61385: CALL_OW 437
61389: PUSH
61390: LD_INT 1
61392: ARRAY
61393: PUSH
61394: LD_INT 1
61396: ARRAY
61397: PUSH
61398: LD_STRING l
61400: EQUAL
61401: PUSH
61402: LD_VAR 0 1
61406: PPUSH
61407: CALL_OW 437
61411: PUSH
61412: LD_INT 1
61414: ARRAY
61415: PUSH
61416: LD_INT 4
61418: ARRAY
61419: PUSH
61420: LD_VAR 0 2
61424: EQUAL
61425: AND
61426: IFFALSE 61438
// result := true else
61428: LD_ADDR_VAR 0 3
61432: PUSH
61433: LD_INT 1
61435: ST_TO_ADDR
61436: GO 61446
// result := false ;
61438: LD_ADDR_VAR 0 3
61442: PUSH
61443: LD_INT 0
61445: ST_TO_ADDR
// end else
61446: GO 61456
// result := false ;
61448: LD_ADDR_VAR 0 3
61452: PUSH
61453: LD_INT 0
61455: ST_TO_ADDR
// end ;
61456: LD_VAR 0 3
61460: RET
// export function HealTarget ( sci ) ; begin
61461: LD_INT 0
61463: PPUSH
// if not sci then
61464: LD_VAR 0 1
61468: NOT
61469: IFFALSE 61473
// exit ;
61471: GO 61538
// result := 0 ;
61473: LD_ADDR_VAR 0 2
61477: PUSH
61478: LD_INT 0
61480: ST_TO_ADDR
// if GetTaskList ( sci ) then
61481: LD_VAR 0 1
61485: PPUSH
61486: CALL_OW 437
61490: IFFALSE 61538
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61492: LD_VAR 0 1
61496: PPUSH
61497: CALL_OW 437
61501: PUSH
61502: LD_INT 1
61504: ARRAY
61505: PUSH
61506: LD_INT 1
61508: ARRAY
61509: PUSH
61510: LD_STRING l
61512: EQUAL
61513: IFFALSE 61538
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61515: LD_ADDR_VAR 0 2
61519: PUSH
61520: LD_VAR 0 1
61524: PPUSH
61525: CALL_OW 437
61529: PUSH
61530: LD_INT 1
61532: ARRAY
61533: PUSH
61534: LD_INT 4
61536: ARRAY
61537: ST_TO_ADDR
// end ;
61538: LD_VAR 0 2
61542: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61543: LD_INT 0
61545: PPUSH
61546: PPUSH
61547: PPUSH
61548: PPUSH
// if not base_units then
61549: LD_VAR 0 1
61553: NOT
61554: IFFALSE 61558
// exit ;
61556: GO 61645
// result := false ;
61558: LD_ADDR_VAR 0 2
61562: PUSH
61563: LD_INT 0
61565: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61566: LD_ADDR_VAR 0 5
61570: PUSH
61571: LD_VAR 0 1
61575: PPUSH
61576: LD_INT 21
61578: PUSH
61579: LD_INT 3
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PPUSH
61586: CALL_OW 72
61590: ST_TO_ADDR
// if not tmp then
61591: LD_VAR 0 5
61595: NOT
61596: IFFALSE 61600
// exit ;
61598: GO 61645
// for i in tmp do
61600: LD_ADDR_VAR 0 3
61604: PUSH
61605: LD_VAR 0 5
61609: PUSH
61610: FOR_IN
61611: IFFALSE 61643
// begin result := EnemyInRange ( i , 22 ) ;
61613: LD_ADDR_VAR 0 2
61617: PUSH
61618: LD_VAR 0 3
61622: PPUSH
61623: LD_INT 22
61625: PPUSH
61626: CALL 59258 0 2
61630: ST_TO_ADDR
// if result then
61631: LD_VAR 0 2
61635: IFFALSE 61641
// exit ;
61637: POP
61638: POP
61639: GO 61645
// end ;
61641: GO 61610
61643: POP
61644: POP
// end ;
61645: LD_VAR 0 2
61649: RET
// export function FilterByTag ( units , tag ) ; begin
61650: LD_INT 0
61652: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61653: LD_ADDR_VAR 0 3
61657: PUSH
61658: LD_VAR 0 1
61662: PPUSH
61663: LD_INT 120
61665: PUSH
61666: LD_VAR 0 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PPUSH
61675: CALL_OW 72
61679: ST_TO_ADDR
// end ;
61680: LD_VAR 0 3
61684: RET
// export function IsDriver ( un ) ; begin
61685: LD_INT 0
61687: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61688: LD_ADDR_VAR 0 2
61692: PUSH
61693: LD_VAR 0 1
61697: PUSH
61698: LD_INT 55
61700: PUSH
61701: EMPTY
61702: LIST
61703: PPUSH
61704: CALL_OW 69
61708: IN
61709: ST_TO_ADDR
// end ;
61710: LD_VAR 0 2
61714: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61715: LD_INT 0
61717: PPUSH
61718: PPUSH
// list := [ ] ;
61719: LD_ADDR_VAR 0 5
61723: PUSH
61724: EMPTY
61725: ST_TO_ADDR
// case d of 0 :
61726: LD_VAR 0 3
61730: PUSH
61731: LD_INT 0
61733: DOUBLE
61734: EQUAL
61735: IFTRUE 61739
61737: GO 61872
61739: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61740: LD_ADDR_VAR 0 5
61744: PUSH
61745: LD_VAR 0 1
61749: PUSH
61750: LD_INT 4
61752: MINUS
61753: PUSH
61754: LD_VAR 0 2
61758: PUSH
61759: LD_INT 4
61761: MINUS
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: LIST
61770: PUSH
61771: LD_VAR 0 1
61775: PUSH
61776: LD_INT 3
61778: MINUS
61779: PUSH
61780: LD_VAR 0 2
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: PUSH
61793: LD_VAR 0 1
61797: PUSH
61798: LD_INT 4
61800: PLUS
61801: PUSH
61802: LD_VAR 0 2
61806: PUSH
61807: LD_INT 4
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: LIST
61814: PUSH
61815: LD_VAR 0 1
61819: PUSH
61820: LD_INT 3
61822: PLUS
61823: PUSH
61824: LD_VAR 0 2
61828: PUSH
61829: LD_INT 3
61831: PLUS
61832: PUSH
61833: LD_INT 5
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: LIST
61840: PUSH
61841: LD_VAR 0 1
61845: PUSH
61846: LD_VAR 0 2
61850: PUSH
61851: LD_INT 4
61853: PLUS
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: LIST
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: ST_TO_ADDR
// end ; 1 :
61870: GO 62570
61872: LD_INT 1
61874: DOUBLE
61875: EQUAL
61876: IFTRUE 61880
61878: GO 62013
61880: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61881: LD_ADDR_VAR 0 5
61885: PUSH
61886: LD_VAR 0 1
61890: PUSH
61891: LD_VAR 0 2
61895: PUSH
61896: LD_INT 4
61898: MINUS
61899: PUSH
61900: LD_INT 3
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: PUSH
61908: LD_VAR 0 1
61912: PUSH
61913: LD_INT 3
61915: MINUS
61916: PUSH
61917: LD_VAR 0 2
61921: PUSH
61922: LD_INT 3
61924: MINUS
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: PUSH
61934: LD_VAR 0 1
61938: PUSH
61939: LD_INT 4
61941: MINUS
61942: PUSH
61943: LD_VAR 0 2
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: PUSH
61956: LD_VAR 0 1
61960: PUSH
61961: LD_VAR 0 2
61965: PUSH
61966: LD_INT 3
61968: PLUS
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: LIST
61977: PUSH
61978: LD_VAR 0 1
61982: PUSH
61983: LD_INT 4
61985: PLUS
61986: PUSH
61987: LD_VAR 0 2
61991: PUSH
61992: LD_INT 4
61994: PLUS
61995: PUSH
61996: LD_INT 5
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: ST_TO_ADDR
// end ; 2 :
62011: GO 62570
62013: LD_INT 2
62015: DOUBLE
62016: EQUAL
62017: IFTRUE 62021
62019: GO 62150
62021: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62022: LD_ADDR_VAR 0 5
62026: PUSH
62027: LD_VAR 0 1
62031: PUSH
62032: LD_VAR 0 2
62036: PUSH
62037: LD_INT 3
62039: MINUS
62040: PUSH
62041: LD_INT 3
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: PUSH
62049: LD_VAR 0 1
62053: PUSH
62054: LD_INT 4
62056: PLUS
62057: PUSH
62058: LD_VAR 0 2
62062: PUSH
62063: LD_INT 4
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: LIST
62070: PUSH
62071: LD_VAR 0 1
62075: PUSH
62076: LD_VAR 0 2
62080: PUSH
62081: LD_INT 4
62083: PLUS
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: LIST
62092: PUSH
62093: LD_VAR 0 1
62097: PUSH
62098: LD_INT 3
62100: MINUS
62101: PUSH
62102: LD_VAR 0 2
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: PUSH
62115: LD_VAR 0 1
62119: PUSH
62120: LD_INT 4
62122: MINUS
62123: PUSH
62124: LD_VAR 0 2
62128: PUSH
62129: LD_INT 4
62131: MINUS
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: ST_TO_ADDR
// end ; 3 :
62148: GO 62570
62150: LD_INT 3
62152: DOUBLE
62153: EQUAL
62154: IFTRUE 62158
62156: GO 62291
62158: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62159: LD_ADDR_VAR 0 5
62163: PUSH
62164: LD_VAR 0 1
62168: PUSH
62169: LD_INT 3
62171: PLUS
62172: PUSH
62173: LD_VAR 0 2
62177: PUSH
62178: LD_INT 4
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: PUSH
62186: LD_VAR 0 1
62190: PUSH
62191: LD_INT 4
62193: PLUS
62194: PUSH
62195: LD_VAR 0 2
62199: PUSH
62200: LD_INT 4
62202: PLUS
62203: PUSH
62204: LD_INT 5
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: PUSH
62212: LD_VAR 0 1
62216: PUSH
62217: LD_INT 4
62219: MINUS
62220: PUSH
62221: LD_VAR 0 2
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: PUSH
62234: LD_VAR 0 1
62238: PUSH
62239: LD_VAR 0 2
62243: PUSH
62244: LD_INT 4
62246: MINUS
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: PUSH
62256: LD_VAR 0 1
62260: PUSH
62261: LD_INT 3
62263: MINUS
62264: PUSH
62265: LD_VAR 0 2
62269: PUSH
62270: LD_INT 3
62272: MINUS
62273: PUSH
62274: LD_INT 2
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: ST_TO_ADDR
// end ; 4 :
62289: GO 62570
62291: LD_INT 4
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62299
62297: GO 62432
62299: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62300: LD_ADDR_VAR 0 5
62304: PUSH
62305: LD_VAR 0 1
62309: PUSH
62310: LD_VAR 0 2
62314: PUSH
62315: LD_INT 4
62317: PLUS
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: PUSH
62327: LD_VAR 0 1
62331: PUSH
62332: LD_INT 3
62334: PLUS
62335: PUSH
62336: LD_VAR 0 2
62340: PUSH
62341: LD_INT 3
62343: PLUS
62344: PUSH
62345: LD_INT 5
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: PUSH
62353: LD_VAR 0 1
62357: PUSH
62358: LD_INT 4
62360: PLUS
62361: PUSH
62362: LD_VAR 0 2
62366: PUSH
62367: LD_INT 4
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: PUSH
62375: LD_VAR 0 1
62379: PUSH
62380: LD_VAR 0 2
62384: PUSH
62385: LD_INT 3
62387: MINUS
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: PUSH
62397: LD_VAR 0 1
62401: PUSH
62402: LD_INT 4
62404: MINUS
62405: PUSH
62406: LD_VAR 0 2
62410: PUSH
62411: LD_INT 4
62413: MINUS
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: ST_TO_ADDR
// end ; 5 :
62430: GO 62570
62432: LD_INT 5
62434: DOUBLE
62435: EQUAL
62436: IFTRUE 62440
62438: GO 62569
62440: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62441: LD_ADDR_VAR 0 5
62445: PUSH
62446: LD_VAR 0 1
62450: PUSH
62451: LD_INT 4
62453: MINUS
62454: PUSH
62455: LD_VAR 0 2
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_VAR 0 2
62477: PUSH
62478: LD_INT 4
62480: MINUS
62481: PUSH
62482: LD_INT 3
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: PUSH
62490: LD_VAR 0 1
62494: PUSH
62495: LD_INT 4
62497: PLUS
62498: PUSH
62499: LD_VAR 0 2
62503: PUSH
62504: LD_INT 4
62506: PLUS
62507: PUSH
62508: LD_INT 5
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: PUSH
62516: LD_VAR 0 1
62520: PUSH
62521: LD_INT 3
62523: PLUS
62524: PUSH
62525: LD_VAR 0 2
62529: PUSH
62530: LD_INT 4
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: PUSH
62538: LD_VAR 0 1
62542: PUSH
62543: LD_VAR 0 2
62547: PUSH
62548: LD_INT 3
62550: PLUS
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: LIST
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: ST_TO_ADDR
// end ; end ;
62567: GO 62570
62569: POP
// result := list ;
62570: LD_ADDR_VAR 0 4
62574: PUSH
62575: LD_VAR 0 5
62579: ST_TO_ADDR
// end ;
62580: LD_VAR 0 4
62584: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62585: LD_INT 0
62587: PPUSH
62588: PPUSH
62589: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62590: LD_VAR 0 1
62594: NOT
62595: PUSH
62596: LD_VAR 0 2
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: LD_INT 2
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: LD_INT 4
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: IN
62619: NOT
62620: OR
62621: IFFALSE 62625
// exit ;
62623: GO 62717
// tmp := [ ] ;
62625: LD_ADDR_VAR 0 5
62629: PUSH
62630: EMPTY
62631: ST_TO_ADDR
// for i in units do
62632: LD_ADDR_VAR 0 4
62636: PUSH
62637: LD_VAR 0 1
62641: PUSH
62642: FOR_IN
62643: IFFALSE 62686
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62645: LD_ADDR_VAR 0 5
62649: PUSH
62650: LD_VAR 0 5
62654: PPUSH
62655: LD_VAR 0 5
62659: PUSH
62660: LD_INT 1
62662: PLUS
62663: PPUSH
62664: LD_VAR 0 4
62668: PPUSH
62669: LD_VAR 0 2
62673: PPUSH
62674: CALL_OW 259
62678: PPUSH
62679: CALL_OW 2
62683: ST_TO_ADDR
62684: GO 62642
62686: POP
62687: POP
// if not tmp then
62688: LD_VAR 0 5
62692: NOT
62693: IFFALSE 62697
// exit ;
62695: GO 62717
// result := SortListByListDesc ( units , tmp ) ;
62697: LD_ADDR_VAR 0 3
62701: PUSH
62702: LD_VAR 0 1
62706: PPUSH
62707: LD_VAR 0 5
62711: PPUSH
62712: CALL_OW 77
62716: ST_TO_ADDR
// end ;
62717: LD_VAR 0 3
62721: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62722: LD_INT 0
62724: PPUSH
62725: PPUSH
62726: PPUSH
// result := false ;
62727: LD_ADDR_VAR 0 3
62731: PUSH
62732: LD_INT 0
62734: ST_TO_ADDR
// x := GetX ( building ) ;
62735: LD_ADDR_VAR 0 4
62739: PUSH
62740: LD_VAR 0 2
62744: PPUSH
62745: CALL_OW 250
62749: ST_TO_ADDR
// y := GetY ( building ) ;
62750: LD_ADDR_VAR 0 5
62754: PUSH
62755: LD_VAR 0 2
62759: PPUSH
62760: CALL_OW 251
62764: ST_TO_ADDR
// if not building or not x or not y then
62765: LD_VAR 0 2
62769: NOT
62770: PUSH
62771: LD_VAR 0 4
62775: NOT
62776: OR
62777: PUSH
62778: LD_VAR 0 5
62782: NOT
62783: OR
62784: IFFALSE 62788
// exit ;
62786: GO 62880
// if GetTaskList ( unit ) then
62788: LD_VAR 0 1
62792: PPUSH
62793: CALL_OW 437
62797: IFFALSE 62880
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62799: LD_STRING e
62801: PUSH
62802: LD_VAR 0 1
62806: PPUSH
62807: CALL_OW 437
62811: PUSH
62812: LD_INT 1
62814: ARRAY
62815: PUSH
62816: LD_INT 1
62818: ARRAY
62819: EQUAL
62820: PUSH
62821: LD_VAR 0 4
62825: PUSH
62826: LD_VAR 0 1
62830: PPUSH
62831: CALL_OW 437
62835: PUSH
62836: LD_INT 1
62838: ARRAY
62839: PUSH
62840: LD_INT 2
62842: ARRAY
62843: EQUAL
62844: AND
62845: PUSH
62846: LD_VAR 0 5
62850: PUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: CALL_OW 437
62860: PUSH
62861: LD_INT 1
62863: ARRAY
62864: PUSH
62865: LD_INT 3
62867: ARRAY
62868: EQUAL
62869: AND
62870: IFFALSE 62880
// result := true end ;
62872: LD_ADDR_VAR 0 3
62876: PUSH
62877: LD_INT 1
62879: ST_TO_ADDR
// end ;
62880: LD_VAR 0 3
62884: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62885: LD_INT 0
62887: PPUSH
// result := false ;
62888: LD_ADDR_VAR 0 4
62892: PUSH
62893: LD_INT 0
62895: ST_TO_ADDR
// if GetTaskList ( unit ) then
62896: LD_VAR 0 1
62900: PPUSH
62901: CALL_OW 437
62905: IFFALSE 62988
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62907: LD_STRING M
62909: PUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: CALL_OW 437
62919: PUSH
62920: LD_INT 1
62922: ARRAY
62923: PUSH
62924: LD_INT 1
62926: ARRAY
62927: EQUAL
62928: PUSH
62929: LD_VAR 0 2
62933: PUSH
62934: LD_VAR 0 1
62938: PPUSH
62939: CALL_OW 437
62943: PUSH
62944: LD_INT 1
62946: ARRAY
62947: PUSH
62948: LD_INT 2
62950: ARRAY
62951: EQUAL
62952: AND
62953: PUSH
62954: LD_VAR 0 3
62958: PUSH
62959: LD_VAR 0 1
62963: PPUSH
62964: CALL_OW 437
62968: PUSH
62969: LD_INT 1
62971: ARRAY
62972: PUSH
62973: LD_INT 3
62975: ARRAY
62976: EQUAL
62977: AND
62978: IFFALSE 62988
// result := true ;
62980: LD_ADDR_VAR 0 4
62984: PUSH
62985: LD_INT 1
62987: ST_TO_ADDR
// end ; end ;
62988: LD_VAR 0 4
62992: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62993: LD_INT 0
62995: PPUSH
62996: PPUSH
62997: PPUSH
62998: PPUSH
// if not unit or not area then
62999: LD_VAR 0 1
63003: NOT
63004: PUSH
63005: LD_VAR 0 2
63009: NOT
63010: OR
63011: IFFALSE 63015
// exit ;
63013: GO 63179
// tmp := AreaToList ( area , i ) ;
63015: LD_ADDR_VAR 0 6
63019: PUSH
63020: LD_VAR 0 2
63024: PPUSH
63025: LD_VAR 0 5
63029: PPUSH
63030: CALL_OW 517
63034: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63035: LD_ADDR_VAR 0 5
63039: PUSH
63040: DOUBLE
63041: LD_INT 1
63043: DEC
63044: ST_TO_ADDR
63045: LD_VAR 0 6
63049: PUSH
63050: LD_INT 1
63052: ARRAY
63053: PUSH
63054: FOR_TO
63055: IFFALSE 63177
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63057: LD_ADDR_VAR 0 7
63061: PUSH
63062: LD_VAR 0 6
63066: PUSH
63067: LD_INT 1
63069: ARRAY
63070: PUSH
63071: LD_VAR 0 5
63075: ARRAY
63076: PUSH
63077: LD_VAR 0 6
63081: PUSH
63082: LD_INT 2
63084: ARRAY
63085: PUSH
63086: LD_VAR 0 5
63090: ARRAY
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63096: LD_VAR 0 7
63100: PUSH
63101: LD_INT 1
63103: ARRAY
63104: PPUSH
63105: LD_VAR 0 7
63109: PUSH
63110: LD_INT 2
63112: ARRAY
63113: PPUSH
63114: CALL_OW 428
63118: PUSH
63119: LD_INT 0
63121: EQUAL
63122: IFFALSE 63175
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63124: LD_VAR 0 1
63128: PPUSH
63129: LD_VAR 0 7
63133: PUSH
63134: LD_INT 1
63136: ARRAY
63137: PPUSH
63138: LD_VAR 0 7
63142: PUSH
63143: LD_INT 2
63145: ARRAY
63146: PPUSH
63147: LD_VAR 0 3
63151: PPUSH
63152: CALL_OW 48
// result := IsPlaced ( unit ) ;
63156: LD_ADDR_VAR 0 4
63160: PUSH
63161: LD_VAR 0 1
63165: PPUSH
63166: CALL_OW 305
63170: ST_TO_ADDR
// exit ;
63171: POP
63172: POP
63173: GO 63179
// end ; end ;
63175: GO 63054
63177: POP
63178: POP
// end ;
63179: LD_VAR 0 4
63183: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63184: LD_INT 0
63186: PPUSH
63187: PPUSH
63188: PPUSH
// if not side or side > 8 then
63189: LD_VAR 0 1
63193: NOT
63194: PUSH
63195: LD_VAR 0 1
63199: PUSH
63200: LD_INT 8
63202: GREATER
63203: OR
63204: IFFALSE 63208
// exit ;
63206: GO 63395
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63208: LD_ADDR_VAR 0 4
63212: PUSH
63213: LD_INT 22
63215: PUSH
63216: LD_VAR 0 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 21
63227: PUSH
63228: LD_INT 3
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PPUSH
63239: CALL_OW 69
63243: ST_TO_ADDR
// if not tmp then
63244: LD_VAR 0 4
63248: NOT
63249: IFFALSE 63253
// exit ;
63251: GO 63395
// enable_addtolog := true ;
63253: LD_ADDR_OWVAR 81
63257: PUSH
63258: LD_INT 1
63260: ST_TO_ADDR
// AddToLog ( [ ) ;
63261: LD_STRING [
63263: PPUSH
63264: CALL_OW 561
// for i in tmp do
63268: LD_ADDR_VAR 0 3
63272: PUSH
63273: LD_VAR 0 4
63277: PUSH
63278: FOR_IN
63279: IFFALSE 63386
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63281: LD_STRING [
63283: PUSH
63284: LD_VAR 0 3
63288: PPUSH
63289: CALL_OW 266
63293: STR
63294: PUSH
63295: LD_STRING , 
63297: STR
63298: PUSH
63299: LD_VAR 0 3
63303: PPUSH
63304: CALL_OW 250
63308: STR
63309: PUSH
63310: LD_STRING , 
63312: STR
63313: PUSH
63314: LD_VAR 0 3
63318: PPUSH
63319: CALL_OW 251
63323: STR
63324: PUSH
63325: LD_STRING , 
63327: STR
63328: PUSH
63329: LD_VAR 0 3
63333: PPUSH
63334: CALL_OW 254
63338: STR
63339: PUSH
63340: LD_STRING , 
63342: STR
63343: PUSH
63344: LD_VAR 0 3
63348: PPUSH
63349: LD_INT 1
63351: PPUSH
63352: CALL_OW 268
63356: STR
63357: PUSH
63358: LD_STRING , 
63360: STR
63361: PUSH
63362: LD_VAR 0 3
63366: PPUSH
63367: LD_INT 2
63369: PPUSH
63370: CALL_OW 268
63374: STR
63375: PUSH
63376: LD_STRING ],
63378: STR
63379: PPUSH
63380: CALL_OW 561
// end ;
63384: GO 63278
63386: POP
63387: POP
// AddToLog ( ]; ) ;
63388: LD_STRING ];
63390: PPUSH
63391: CALL_OW 561
// end ;
63395: LD_VAR 0 2
63399: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63400: LD_INT 0
63402: PPUSH
63403: PPUSH
63404: PPUSH
63405: PPUSH
63406: PPUSH
// if not area or not rate or not max then
63407: LD_VAR 0 1
63411: NOT
63412: PUSH
63413: LD_VAR 0 2
63417: NOT
63418: OR
63419: PUSH
63420: LD_VAR 0 4
63424: NOT
63425: OR
63426: IFFALSE 63430
// exit ;
63428: GO 63619
// while 1 do
63430: LD_INT 1
63432: IFFALSE 63619
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63434: LD_ADDR_VAR 0 9
63438: PUSH
63439: LD_VAR 0 1
63443: PPUSH
63444: LD_INT 1
63446: PPUSH
63447: CALL_OW 287
63451: PUSH
63452: LD_INT 10
63454: MUL
63455: ST_TO_ADDR
// r := rate / 10 ;
63456: LD_ADDR_VAR 0 7
63460: PUSH
63461: LD_VAR 0 2
63465: PUSH
63466: LD_INT 10
63468: DIVREAL
63469: ST_TO_ADDR
// time := 1 1$00 ;
63470: LD_ADDR_VAR 0 8
63474: PUSH
63475: LD_INT 2100
63477: ST_TO_ADDR
// if amount < min then
63478: LD_VAR 0 9
63482: PUSH
63483: LD_VAR 0 3
63487: LESS
63488: IFFALSE 63506
// r := r * 2 else
63490: LD_ADDR_VAR 0 7
63494: PUSH
63495: LD_VAR 0 7
63499: PUSH
63500: LD_INT 2
63502: MUL
63503: ST_TO_ADDR
63504: GO 63532
// if amount > max then
63506: LD_VAR 0 9
63510: PUSH
63511: LD_VAR 0 4
63515: GREATER
63516: IFFALSE 63532
// r := r / 2 ;
63518: LD_ADDR_VAR 0 7
63522: PUSH
63523: LD_VAR 0 7
63527: PUSH
63528: LD_INT 2
63530: DIVREAL
63531: ST_TO_ADDR
// time := time / r ;
63532: LD_ADDR_VAR 0 8
63536: PUSH
63537: LD_VAR 0 8
63541: PUSH
63542: LD_VAR 0 7
63546: DIVREAL
63547: ST_TO_ADDR
// if time < 0 then
63548: LD_VAR 0 8
63552: PUSH
63553: LD_INT 0
63555: LESS
63556: IFFALSE 63573
// time := time * - 1 ;
63558: LD_ADDR_VAR 0 8
63562: PUSH
63563: LD_VAR 0 8
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: MUL
63572: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63573: LD_VAR 0 8
63577: PUSH
63578: LD_INT 35
63580: PPUSH
63581: LD_INT 875
63583: PPUSH
63584: CALL_OW 12
63588: PLUS
63589: PPUSH
63590: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63594: LD_INT 1
63596: PPUSH
63597: LD_INT 5
63599: PPUSH
63600: CALL_OW 12
63604: PPUSH
63605: LD_VAR 0 1
63609: PPUSH
63610: LD_INT 1
63612: PPUSH
63613: CALL_OW 55
// end ;
63617: GO 63430
// end ;
63619: LD_VAR 0 5
63623: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63624: LD_INT 0
63626: PPUSH
63627: PPUSH
63628: PPUSH
63629: PPUSH
63630: PPUSH
63631: PPUSH
63632: PPUSH
63633: PPUSH
// if not turrets or not factories then
63634: LD_VAR 0 1
63638: NOT
63639: PUSH
63640: LD_VAR 0 2
63644: NOT
63645: OR
63646: IFFALSE 63650
// exit ;
63648: GO 63957
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63650: LD_ADDR_VAR 0 10
63654: PUSH
63655: LD_INT 5
63657: PUSH
63658: LD_INT 6
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: LD_INT 4
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: LD_INT 5
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 24
63692: PUSH
63693: LD_INT 25
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 23
63702: PUSH
63703: LD_INT 27
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 42
63716: PUSH
63717: LD_INT 43
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 44
63726: PUSH
63727: LD_INT 46
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 45
63736: PUSH
63737: LD_INT 47
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: LIST
63753: ST_TO_ADDR
// result := [ ] ;
63754: LD_ADDR_VAR 0 3
63758: PUSH
63759: EMPTY
63760: ST_TO_ADDR
// for i in turrets do
63761: LD_ADDR_VAR 0 4
63765: PUSH
63766: LD_VAR 0 1
63770: PUSH
63771: FOR_IN
63772: IFFALSE 63955
// begin nat := GetNation ( i ) ;
63774: LD_ADDR_VAR 0 7
63778: PUSH
63779: LD_VAR 0 4
63783: PPUSH
63784: CALL_OW 248
63788: ST_TO_ADDR
// weapon := 0 ;
63789: LD_ADDR_VAR 0 8
63793: PUSH
63794: LD_INT 0
63796: ST_TO_ADDR
// if not nat then
63797: LD_VAR 0 7
63801: NOT
63802: IFFALSE 63806
// continue ;
63804: GO 63771
// for j in list [ nat ] do
63806: LD_ADDR_VAR 0 5
63810: PUSH
63811: LD_VAR 0 10
63815: PUSH
63816: LD_VAR 0 7
63820: ARRAY
63821: PUSH
63822: FOR_IN
63823: IFFALSE 63864
// if GetBWeapon ( i ) = j [ 1 ] then
63825: LD_VAR 0 4
63829: PPUSH
63830: CALL_OW 269
63834: PUSH
63835: LD_VAR 0 5
63839: PUSH
63840: LD_INT 1
63842: ARRAY
63843: EQUAL
63844: IFFALSE 63862
// begin weapon := j [ 2 ] ;
63846: LD_ADDR_VAR 0 8
63850: PUSH
63851: LD_VAR 0 5
63855: PUSH
63856: LD_INT 2
63858: ARRAY
63859: ST_TO_ADDR
// break ;
63860: GO 63864
// end ;
63862: GO 63822
63864: POP
63865: POP
// if not weapon then
63866: LD_VAR 0 8
63870: NOT
63871: IFFALSE 63875
// continue ;
63873: GO 63771
// for k in factories do
63875: LD_ADDR_VAR 0 6
63879: PUSH
63880: LD_VAR 0 2
63884: PUSH
63885: FOR_IN
63886: IFFALSE 63951
// begin weapons := AvailableWeaponList ( k ) ;
63888: LD_ADDR_VAR 0 9
63892: PUSH
63893: LD_VAR 0 6
63897: PPUSH
63898: CALL_OW 478
63902: ST_TO_ADDR
// if not weapons then
63903: LD_VAR 0 9
63907: NOT
63908: IFFALSE 63912
// continue ;
63910: GO 63885
// if weapon in weapons then
63912: LD_VAR 0 8
63916: PUSH
63917: LD_VAR 0 9
63921: IN
63922: IFFALSE 63949
// begin result := [ i , weapon ] ;
63924: LD_ADDR_VAR 0 3
63928: PUSH
63929: LD_VAR 0 4
63933: PUSH
63934: LD_VAR 0 8
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: ST_TO_ADDR
// exit ;
63943: POP
63944: POP
63945: POP
63946: POP
63947: GO 63957
// end ; end ;
63949: GO 63885
63951: POP
63952: POP
// end ;
63953: GO 63771
63955: POP
63956: POP
// end ;
63957: LD_VAR 0 3
63961: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63962: LD_INT 0
63964: PPUSH
// if not side or side > 8 then
63965: LD_VAR 0 3
63969: NOT
63970: PUSH
63971: LD_VAR 0 3
63975: PUSH
63976: LD_INT 8
63978: GREATER
63979: OR
63980: IFFALSE 63984
// exit ;
63982: GO 64043
// if not range then
63984: LD_VAR 0 4
63988: NOT
63989: IFFALSE 64000
// range := - 12 ;
63991: LD_ADDR_VAR 0 4
63995: PUSH
63996: LD_INT 12
63998: NEG
63999: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64000: LD_VAR 0 1
64004: PPUSH
64005: LD_VAR 0 2
64009: PPUSH
64010: LD_VAR 0 3
64014: PPUSH
64015: LD_VAR 0 4
64019: PPUSH
64020: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64024: LD_VAR 0 1
64028: PPUSH
64029: LD_VAR 0 2
64033: PPUSH
64034: LD_VAR 0 3
64038: PPUSH
64039: CALL_OW 331
// end ;
64043: LD_VAR 0 5
64047: RET
// export function Video ( mode ) ; begin
64048: LD_INT 0
64050: PPUSH
// ingame_video = mode ;
64051: LD_ADDR_OWVAR 52
64055: PUSH
64056: LD_VAR 0 1
64060: ST_TO_ADDR
// interface_hidden = mode ;
64061: LD_ADDR_OWVAR 54
64065: PUSH
64066: LD_VAR 0 1
64070: ST_TO_ADDR
// end ;
64071: LD_VAR 0 2
64075: RET
// export function Join ( array , element ) ; begin
64076: LD_INT 0
64078: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64079: LD_ADDR_VAR 0 3
64083: PUSH
64084: LD_VAR 0 1
64088: PPUSH
64089: LD_VAR 0 1
64093: PUSH
64094: LD_INT 1
64096: PLUS
64097: PPUSH
64098: LD_VAR 0 2
64102: PPUSH
64103: CALL_OW 1
64107: ST_TO_ADDR
// end ;
64108: LD_VAR 0 3
64112: RET
// export function JoinUnion ( array , element ) ; begin
64113: LD_INT 0
64115: PPUSH
// result := array union element ;
64116: LD_ADDR_VAR 0 3
64120: PUSH
64121: LD_VAR 0 1
64125: PUSH
64126: LD_VAR 0 2
64130: UNION
64131: ST_TO_ADDR
// end ;
64132: LD_VAR 0 3
64136: RET
// export function GetBehemoths ( side ) ; begin
64137: LD_INT 0
64139: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64140: LD_ADDR_VAR 0 2
64144: PUSH
64145: LD_INT 22
64147: PUSH
64148: LD_VAR 0 1
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 31
64159: PUSH
64160: LD_INT 25
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PPUSH
64171: CALL_OW 69
64175: ST_TO_ADDR
// end ;
64176: LD_VAR 0 2
64180: RET
// export function Shuffle ( array ) ; var i , index ; begin
64181: LD_INT 0
64183: PPUSH
64184: PPUSH
64185: PPUSH
// result := [ ] ;
64186: LD_ADDR_VAR 0 2
64190: PUSH
64191: EMPTY
64192: ST_TO_ADDR
// if not array then
64193: LD_VAR 0 1
64197: NOT
64198: IFFALSE 64202
// exit ;
64200: GO 64301
// Randomize ;
64202: CALL_OW 10
// for i = array downto 1 do
64206: LD_ADDR_VAR 0 3
64210: PUSH
64211: DOUBLE
64212: LD_VAR 0 1
64216: INC
64217: ST_TO_ADDR
64218: LD_INT 1
64220: PUSH
64221: FOR_DOWNTO
64222: IFFALSE 64299
// begin index := rand ( 1 , array ) ;
64224: LD_ADDR_VAR 0 4
64228: PUSH
64229: LD_INT 1
64231: PPUSH
64232: LD_VAR 0 1
64236: PPUSH
64237: CALL_OW 12
64241: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64242: LD_ADDR_VAR 0 2
64246: PUSH
64247: LD_VAR 0 2
64251: PPUSH
64252: LD_VAR 0 2
64256: PUSH
64257: LD_INT 1
64259: PLUS
64260: PPUSH
64261: LD_VAR 0 1
64265: PUSH
64266: LD_VAR 0 4
64270: ARRAY
64271: PPUSH
64272: CALL_OW 2
64276: ST_TO_ADDR
// array := Delete ( array , index ) ;
64277: LD_ADDR_VAR 0 1
64281: PUSH
64282: LD_VAR 0 1
64286: PPUSH
64287: LD_VAR 0 4
64291: PPUSH
64292: CALL_OW 3
64296: ST_TO_ADDR
// end ;
64297: GO 64221
64299: POP
64300: POP
// end ;
64301: LD_VAR 0 2
64305: RET
// export function GetBaseMaterials ( base ) ; begin
64306: LD_INT 0
64308: PPUSH
// result := [ 0 , 0 , 0 ] ;
64309: LD_ADDR_VAR 0 2
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: LIST
64327: ST_TO_ADDR
// if not base then
64328: LD_VAR 0 1
64332: NOT
64333: IFFALSE 64337
// exit ;
64335: GO 64386
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64337: LD_ADDR_VAR 0 2
64341: PUSH
64342: LD_VAR 0 1
64346: PPUSH
64347: LD_INT 1
64349: PPUSH
64350: CALL_OW 275
64354: PUSH
64355: LD_VAR 0 1
64359: PPUSH
64360: LD_INT 2
64362: PPUSH
64363: CALL_OW 275
64367: PUSH
64368: LD_VAR 0 1
64372: PPUSH
64373: LD_INT 3
64375: PPUSH
64376: CALL_OW 275
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: ST_TO_ADDR
// end ;
64386: LD_VAR 0 2
64390: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64391: LD_INT 0
64393: PPUSH
64394: PPUSH
// result := array ;
64395: LD_ADDR_VAR 0 3
64399: PUSH
64400: LD_VAR 0 1
64404: ST_TO_ADDR
// if size >= result then
64405: LD_VAR 0 2
64409: PUSH
64410: LD_VAR 0 3
64414: GREATEREQUAL
64415: IFFALSE 64419
// exit ;
64417: GO 64469
// if size then
64419: LD_VAR 0 2
64423: IFFALSE 64469
// for i := array downto size do
64425: LD_ADDR_VAR 0 4
64429: PUSH
64430: DOUBLE
64431: LD_VAR 0 1
64435: INC
64436: ST_TO_ADDR
64437: LD_VAR 0 2
64441: PUSH
64442: FOR_DOWNTO
64443: IFFALSE 64467
// result := Delete ( result , result ) ;
64445: LD_ADDR_VAR 0 3
64449: PUSH
64450: LD_VAR 0 3
64454: PPUSH
64455: LD_VAR 0 3
64459: PPUSH
64460: CALL_OW 3
64464: ST_TO_ADDR
64465: GO 64442
64467: POP
64468: POP
// end ;
64469: LD_VAR 0 3
64473: RET
// export function ComExit ( unit ) ; var tmp ; begin
64474: LD_INT 0
64476: PPUSH
64477: PPUSH
// if not IsInUnit ( unit ) then
64478: LD_VAR 0 1
64482: PPUSH
64483: CALL_OW 310
64487: NOT
64488: IFFALSE 64492
// exit ;
64490: GO 64552
// tmp := IsInUnit ( unit ) ;
64492: LD_ADDR_VAR 0 3
64496: PUSH
64497: LD_VAR 0 1
64501: PPUSH
64502: CALL_OW 310
64506: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64507: LD_VAR 0 3
64511: PPUSH
64512: CALL_OW 247
64516: PUSH
64517: LD_INT 2
64519: EQUAL
64520: IFFALSE 64533
// ComExitVehicle ( unit ) else
64522: LD_VAR 0 1
64526: PPUSH
64527: CALL_OW 121
64531: GO 64542
// ComExitBuilding ( unit ) ;
64533: LD_VAR 0 1
64537: PPUSH
64538: CALL_OW 122
// result := tmp ;
64542: LD_ADDR_VAR 0 2
64546: PUSH
64547: LD_VAR 0 3
64551: ST_TO_ADDR
// end ;
64552: LD_VAR 0 2
64556: RET
// export function ComExitAll ( units ) ; var i ; begin
64557: LD_INT 0
64559: PPUSH
64560: PPUSH
// if not units then
64561: LD_VAR 0 1
64565: NOT
64566: IFFALSE 64570
// exit ;
64568: GO 64596
// for i in units do
64570: LD_ADDR_VAR 0 3
64574: PUSH
64575: LD_VAR 0 1
64579: PUSH
64580: FOR_IN
64581: IFFALSE 64594
// ComExit ( i ) ;
64583: LD_VAR 0 3
64587: PPUSH
64588: CALL 64474 0 1
64592: GO 64580
64594: POP
64595: POP
// end ;
64596: LD_VAR 0 2
64600: RET
// export function ResetHc ; begin
64601: LD_INT 0
64603: PPUSH
// InitHc ;
64604: CALL_OW 19
// hc_importance := 0 ;
64608: LD_ADDR_OWVAR 32
64612: PUSH
64613: LD_INT 0
64615: ST_TO_ADDR
// end ;
64616: LD_VAR 0 1
64620: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64621: LD_INT 0
64623: PPUSH
64624: PPUSH
64625: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64626: LD_ADDR_VAR 0 6
64630: PUSH
64631: LD_VAR 0 1
64635: PUSH
64636: LD_VAR 0 3
64640: PLUS
64641: PUSH
64642: LD_INT 2
64644: DIV
64645: ST_TO_ADDR
// if _x < 0 then
64646: LD_VAR 0 6
64650: PUSH
64651: LD_INT 0
64653: LESS
64654: IFFALSE 64671
// _x := _x * - 1 ;
64656: LD_ADDR_VAR 0 6
64660: PUSH
64661: LD_VAR 0 6
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: MUL
64670: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64671: LD_ADDR_VAR 0 7
64675: PUSH
64676: LD_VAR 0 2
64680: PUSH
64681: LD_VAR 0 4
64685: PLUS
64686: PUSH
64687: LD_INT 2
64689: DIV
64690: ST_TO_ADDR
// if _y < 0 then
64691: LD_VAR 0 7
64695: PUSH
64696: LD_INT 0
64698: LESS
64699: IFFALSE 64716
// _y := _y * - 1 ;
64701: LD_ADDR_VAR 0 7
64705: PUSH
64706: LD_VAR 0 7
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: MUL
64715: ST_TO_ADDR
// result := [ _x , _y ] ;
64716: LD_ADDR_VAR 0 5
64720: PUSH
64721: LD_VAR 0 6
64725: PUSH
64726: LD_VAR 0 7
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: ST_TO_ADDR
// end ;
64735: LD_VAR 0 5
64739: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64740: LD_INT 0
64742: PPUSH
64743: PPUSH
64744: PPUSH
64745: PPUSH
// task := GetTaskList ( unit ) ;
64746: LD_ADDR_VAR 0 7
64750: PUSH
64751: LD_VAR 0 1
64755: PPUSH
64756: CALL_OW 437
64760: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64761: LD_VAR 0 7
64765: NOT
64766: PUSH
64767: LD_VAR 0 1
64771: PPUSH
64772: LD_VAR 0 2
64776: PPUSH
64777: CALL_OW 308
64781: NOT
64782: AND
64783: IFFALSE 64787
// exit ;
64785: GO 64905
// if IsInArea ( unit , area ) then
64787: LD_VAR 0 1
64791: PPUSH
64792: LD_VAR 0 2
64796: PPUSH
64797: CALL_OW 308
64801: IFFALSE 64819
// begin ComMoveToArea ( unit , goAway ) ;
64803: LD_VAR 0 1
64807: PPUSH
64808: LD_VAR 0 3
64812: PPUSH
64813: CALL_OW 113
// exit ;
64817: GO 64905
// end ; if task [ 1 ] [ 1 ] <> M then
64819: LD_VAR 0 7
64823: PUSH
64824: LD_INT 1
64826: ARRAY
64827: PUSH
64828: LD_INT 1
64830: ARRAY
64831: PUSH
64832: LD_STRING M
64834: NONEQUAL
64835: IFFALSE 64839
// exit ;
64837: GO 64905
// x := task [ 1 ] [ 2 ] ;
64839: LD_ADDR_VAR 0 5
64843: PUSH
64844: LD_VAR 0 7
64848: PUSH
64849: LD_INT 1
64851: ARRAY
64852: PUSH
64853: LD_INT 2
64855: ARRAY
64856: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64857: LD_ADDR_VAR 0 6
64861: PUSH
64862: LD_VAR 0 7
64866: PUSH
64867: LD_INT 1
64869: ARRAY
64870: PUSH
64871: LD_INT 3
64873: ARRAY
64874: ST_TO_ADDR
// if InArea ( x , y , area ) then
64875: LD_VAR 0 5
64879: PPUSH
64880: LD_VAR 0 6
64884: PPUSH
64885: LD_VAR 0 2
64889: PPUSH
64890: CALL_OW 309
64894: IFFALSE 64905
// ComStop ( unit ) ;
64896: LD_VAR 0 1
64900: PPUSH
64901: CALL_OW 141
// end ;
64905: LD_VAR 0 4
64909: RET
// export function Abs ( value ) ; begin
64910: LD_INT 0
64912: PPUSH
// result := value ;
64913: LD_ADDR_VAR 0 2
64917: PUSH
64918: LD_VAR 0 1
64922: ST_TO_ADDR
// if value < 0 then
64923: LD_VAR 0 1
64927: PUSH
64928: LD_INT 0
64930: LESS
64931: IFFALSE 64948
// result := value * - 1 ;
64933: LD_ADDR_VAR 0 2
64937: PUSH
64938: LD_VAR 0 1
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: MUL
64947: ST_TO_ADDR
// end ;
64948: LD_VAR 0 2
64952: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64953: LD_INT 0
64955: PPUSH
64956: PPUSH
64957: PPUSH
64958: PPUSH
64959: PPUSH
64960: PPUSH
64961: PPUSH
64962: PPUSH
// if not unit or not building then
64963: LD_VAR 0 1
64967: NOT
64968: PUSH
64969: LD_VAR 0 2
64973: NOT
64974: OR
64975: IFFALSE 64979
// exit ;
64977: GO 65205
// x := GetX ( building ) ;
64979: LD_ADDR_VAR 0 4
64983: PUSH
64984: LD_VAR 0 2
64988: PPUSH
64989: CALL_OW 250
64993: ST_TO_ADDR
// y := GetY ( building ) ;
64994: LD_ADDR_VAR 0 6
64998: PUSH
64999: LD_VAR 0 2
65003: PPUSH
65004: CALL_OW 251
65008: ST_TO_ADDR
// d := GetDir ( building ) ;
65009: LD_ADDR_VAR 0 8
65013: PUSH
65014: LD_VAR 0 2
65018: PPUSH
65019: CALL_OW 254
65023: ST_TO_ADDR
// r := 4 ;
65024: LD_ADDR_VAR 0 9
65028: PUSH
65029: LD_INT 4
65031: ST_TO_ADDR
// for i := 1 to 5 do
65032: LD_ADDR_VAR 0 10
65036: PUSH
65037: DOUBLE
65038: LD_INT 1
65040: DEC
65041: ST_TO_ADDR
65042: LD_INT 5
65044: PUSH
65045: FOR_TO
65046: IFFALSE 65203
// begin _x := ShiftX ( x , d , r + i ) ;
65048: LD_ADDR_VAR 0 5
65052: PUSH
65053: LD_VAR 0 4
65057: PPUSH
65058: LD_VAR 0 8
65062: PPUSH
65063: LD_VAR 0 9
65067: PUSH
65068: LD_VAR 0 10
65072: PLUS
65073: PPUSH
65074: CALL_OW 272
65078: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65079: LD_ADDR_VAR 0 7
65083: PUSH
65084: LD_VAR 0 6
65088: PPUSH
65089: LD_VAR 0 8
65093: PPUSH
65094: LD_VAR 0 9
65098: PUSH
65099: LD_VAR 0 10
65103: PLUS
65104: PPUSH
65105: CALL_OW 273
65109: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65110: LD_VAR 0 5
65114: PPUSH
65115: LD_VAR 0 7
65119: PPUSH
65120: CALL_OW 488
65124: PUSH
65125: LD_VAR 0 5
65129: PPUSH
65130: LD_VAR 0 7
65134: PPUSH
65135: CALL_OW 428
65139: PPUSH
65140: CALL_OW 247
65144: PUSH
65145: LD_INT 3
65147: PUSH
65148: LD_INT 2
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: IN
65155: NOT
65156: AND
65157: IFFALSE 65201
// begin ComMoveXY ( unit , _x , _y ) ;
65159: LD_VAR 0 1
65163: PPUSH
65164: LD_VAR 0 5
65168: PPUSH
65169: LD_VAR 0 7
65173: PPUSH
65174: CALL_OW 111
// result := [ _x , _y ] ;
65178: LD_ADDR_VAR 0 3
65182: PUSH
65183: LD_VAR 0 5
65187: PUSH
65188: LD_VAR 0 7
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: ST_TO_ADDR
// exit ;
65197: POP
65198: POP
65199: GO 65205
// end ; end ;
65201: GO 65045
65203: POP
65204: POP
// end ;
65205: LD_VAR 0 3
65209: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65210: LD_INT 0
65212: PPUSH
65213: PPUSH
65214: PPUSH
// result := 0 ;
65215: LD_ADDR_VAR 0 3
65219: PUSH
65220: LD_INT 0
65222: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65223: LD_VAR 0 1
65227: PUSH
65228: LD_INT 0
65230: LESS
65231: PUSH
65232: LD_VAR 0 1
65236: PUSH
65237: LD_INT 8
65239: GREATER
65240: OR
65241: PUSH
65242: LD_VAR 0 2
65246: PUSH
65247: LD_INT 0
65249: LESS
65250: OR
65251: PUSH
65252: LD_VAR 0 2
65256: PUSH
65257: LD_INT 8
65259: GREATER
65260: OR
65261: IFFALSE 65265
// exit ;
65263: GO 65340
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65265: LD_ADDR_VAR 0 4
65269: PUSH
65270: LD_INT 22
65272: PUSH
65273: LD_VAR 0 2
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PPUSH
65282: CALL_OW 69
65286: PUSH
65287: FOR_IN
65288: IFFALSE 65338
// begin un := UnitShoot ( i ) ;
65290: LD_ADDR_VAR 0 5
65294: PUSH
65295: LD_VAR 0 4
65299: PPUSH
65300: CALL_OW 504
65304: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65305: LD_VAR 0 5
65309: PPUSH
65310: CALL_OW 255
65314: PUSH
65315: LD_VAR 0 1
65319: EQUAL
65320: IFFALSE 65336
// begin result := un ;
65322: LD_ADDR_VAR 0 3
65326: PUSH
65327: LD_VAR 0 5
65331: ST_TO_ADDR
// exit ;
65332: POP
65333: POP
65334: GO 65340
// end ; end ;
65336: GO 65287
65338: POP
65339: POP
// end ;
65340: LD_VAR 0 3
65344: RET
// export function GetCargoBay ( units ) ; begin
65345: LD_INT 0
65347: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65348: LD_ADDR_VAR 0 2
65352: PUSH
65353: LD_VAR 0 1
65357: PPUSH
65358: LD_INT 2
65360: PUSH
65361: LD_INT 34
65363: PUSH
65364: LD_INT 12
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 34
65373: PUSH
65374: LD_INT 51
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 34
65383: PUSH
65384: LD_INT 32
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 34
65393: PUSH
65394: LD_INT 89
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: PPUSH
65408: CALL_OW 72
65412: ST_TO_ADDR
// end ;
65413: LD_VAR 0 2
65417: RET
// export function Negate ( value ) ; begin
65418: LD_INT 0
65420: PPUSH
// result := not value ;
65421: LD_ADDR_VAR 0 2
65425: PUSH
65426: LD_VAR 0 1
65430: NOT
65431: ST_TO_ADDR
// end ;
65432: LD_VAR 0 2
65436: RET
// export function Inc ( value ) ; begin
65437: LD_INT 0
65439: PPUSH
// result := value + 1 ;
65440: LD_ADDR_VAR 0 2
65444: PUSH
65445: LD_VAR 0 1
65449: PUSH
65450: LD_INT 1
65452: PLUS
65453: ST_TO_ADDR
// end ;
65454: LD_VAR 0 2
65458: RET
// export function Dec ( value ) ; begin
65459: LD_INT 0
65461: PPUSH
// result := value - 1 ;
65462: LD_ADDR_VAR 0 2
65466: PUSH
65467: LD_VAR 0 1
65471: PUSH
65472: LD_INT 1
65474: MINUS
65475: ST_TO_ADDR
// end ;
65476: LD_VAR 0 2
65480: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65481: LD_INT 0
65483: PPUSH
65484: PPUSH
65485: PPUSH
65486: PPUSH
65487: PPUSH
65488: PPUSH
65489: PPUSH
65490: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65491: LD_VAR 0 1
65495: PPUSH
65496: LD_VAR 0 2
65500: PPUSH
65501: CALL_OW 488
65505: NOT
65506: PUSH
65507: LD_VAR 0 3
65511: PPUSH
65512: LD_VAR 0 4
65516: PPUSH
65517: CALL_OW 488
65521: NOT
65522: OR
65523: IFFALSE 65536
// begin result := - 1 ;
65525: LD_ADDR_VAR 0 5
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: ST_TO_ADDR
// exit ;
65534: GO 65771
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65536: LD_ADDR_VAR 0 12
65540: PUSH
65541: LD_VAR 0 1
65545: PPUSH
65546: LD_VAR 0 2
65550: PPUSH
65551: LD_VAR 0 3
65555: PPUSH
65556: LD_VAR 0 4
65560: PPUSH
65561: CALL 64621 0 4
65565: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65566: LD_ADDR_VAR 0 11
65570: PUSH
65571: LD_VAR 0 1
65575: PPUSH
65576: LD_VAR 0 2
65580: PPUSH
65581: LD_VAR 0 12
65585: PUSH
65586: LD_INT 1
65588: ARRAY
65589: PPUSH
65590: LD_VAR 0 12
65594: PUSH
65595: LD_INT 2
65597: ARRAY
65598: PPUSH
65599: CALL_OW 298
65603: ST_TO_ADDR
// distance := 9999 ;
65604: LD_ADDR_VAR 0 10
65608: PUSH
65609: LD_INT 9999
65611: ST_TO_ADDR
// for i := 0 to 5 do
65612: LD_ADDR_VAR 0 6
65616: PUSH
65617: DOUBLE
65618: LD_INT 0
65620: DEC
65621: ST_TO_ADDR
65622: LD_INT 5
65624: PUSH
65625: FOR_TO
65626: IFFALSE 65769
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65628: LD_ADDR_VAR 0 7
65632: PUSH
65633: LD_VAR 0 1
65637: PPUSH
65638: LD_VAR 0 6
65642: PPUSH
65643: LD_VAR 0 11
65647: PPUSH
65648: CALL_OW 272
65652: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65653: LD_ADDR_VAR 0 8
65657: PUSH
65658: LD_VAR 0 2
65662: PPUSH
65663: LD_VAR 0 6
65667: PPUSH
65668: LD_VAR 0 11
65672: PPUSH
65673: CALL_OW 273
65677: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65678: LD_VAR 0 7
65682: PPUSH
65683: LD_VAR 0 8
65687: PPUSH
65688: CALL_OW 488
65692: NOT
65693: IFFALSE 65697
// continue ;
65695: GO 65625
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65697: LD_ADDR_VAR 0 9
65701: PUSH
65702: LD_VAR 0 12
65706: PUSH
65707: LD_INT 1
65709: ARRAY
65710: PPUSH
65711: LD_VAR 0 12
65715: PUSH
65716: LD_INT 2
65718: ARRAY
65719: PPUSH
65720: LD_VAR 0 7
65724: PPUSH
65725: LD_VAR 0 8
65729: PPUSH
65730: CALL_OW 298
65734: ST_TO_ADDR
// if tmp < distance then
65735: LD_VAR 0 9
65739: PUSH
65740: LD_VAR 0 10
65744: LESS
65745: IFFALSE 65767
// begin result := i ;
65747: LD_ADDR_VAR 0 5
65751: PUSH
65752: LD_VAR 0 6
65756: ST_TO_ADDR
// distance := tmp ;
65757: LD_ADDR_VAR 0 10
65761: PUSH
65762: LD_VAR 0 9
65766: ST_TO_ADDR
// end ; end ;
65767: GO 65625
65769: POP
65770: POP
// end ;
65771: LD_VAR 0 5
65775: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65776: LD_INT 0
65778: PPUSH
65779: PPUSH
// if not driver or not IsInUnit ( driver ) then
65780: LD_VAR 0 1
65784: NOT
65785: PUSH
65786: LD_VAR 0 1
65790: PPUSH
65791: CALL_OW 310
65795: NOT
65796: OR
65797: IFFALSE 65801
// exit ;
65799: GO 65891
// vehicle := IsInUnit ( driver ) ;
65801: LD_ADDR_VAR 0 3
65805: PUSH
65806: LD_VAR 0 1
65810: PPUSH
65811: CALL_OW 310
65815: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65816: LD_VAR 0 1
65820: PPUSH
65821: LD_STRING \
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: LD_INT 0
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: PUSH
65851: LD_STRING E
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_VAR 0 3
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PPUSH
65887: CALL_OW 446
// end ;
65891: LD_VAR 0 2
65895: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65896: LD_INT 0
65898: PPUSH
65899: PPUSH
// if not driver or not IsInUnit ( driver ) then
65900: LD_VAR 0 1
65904: NOT
65905: PUSH
65906: LD_VAR 0 1
65910: PPUSH
65911: CALL_OW 310
65915: NOT
65916: OR
65917: IFFALSE 65921
// exit ;
65919: GO 66011
// vehicle := IsInUnit ( driver ) ;
65921: LD_ADDR_VAR 0 3
65925: PUSH
65926: LD_VAR 0 1
65930: PPUSH
65931: CALL_OW 310
65935: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65936: LD_VAR 0 1
65940: PPUSH
65941: LD_STRING \
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: PUSH
65971: LD_STRING E
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_VAR 0 3
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PPUSH
66007: CALL_OW 447
// end ;
66011: LD_VAR 0 2
66015: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66016: LD_INT 0
66018: PPUSH
66019: PPUSH
66020: PPUSH
// tmp := [ ] ;
66021: LD_ADDR_VAR 0 5
66025: PUSH
66026: EMPTY
66027: ST_TO_ADDR
// for i in units do
66028: LD_ADDR_VAR 0 4
66032: PUSH
66033: LD_VAR 0 1
66037: PUSH
66038: FOR_IN
66039: IFFALSE 66077
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66041: LD_ADDR_VAR 0 5
66045: PUSH
66046: LD_VAR 0 5
66050: PPUSH
66051: LD_VAR 0 5
66055: PUSH
66056: LD_INT 1
66058: PLUS
66059: PPUSH
66060: LD_VAR 0 4
66064: PPUSH
66065: CALL_OW 256
66069: PPUSH
66070: CALL_OW 2
66074: ST_TO_ADDR
66075: GO 66038
66077: POP
66078: POP
// if not tmp then
66079: LD_VAR 0 5
66083: NOT
66084: IFFALSE 66088
// exit ;
66086: GO 66136
// if asc then
66088: LD_VAR 0 2
66092: IFFALSE 66116
// result := SortListByListAsc ( units , tmp ) else
66094: LD_ADDR_VAR 0 3
66098: PUSH
66099: LD_VAR 0 1
66103: PPUSH
66104: LD_VAR 0 5
66108: PPUSH
66109: CALL_OW 76
66113: ST_TO_ADDR
66114: GO 66136
// result := SortListByListDesc ( units , tmp ) ;
66116: LD_ADDR_VAR 0 3
66120: PUSH
66121: LD_VAR 0 1
66125: PPUSH
66126: LD_VAR 0 5
66130: PPUSH
66131: CALL_OW 77
66135: ST_TO_ADDR
// end ;
66136: LD_VAR 0 3
66140: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66141: LD_INT 0
66143: PPUSH
66144: PPUSH
// task := GetTaskList ( mech ) ;
66145: LD_ADDR_VAR 0 4
66149: PUSH
66150: LD_VAR 0 1
66154: PPUSH
66155: CALL_OW 437
66159: ST_TO_ADDR
// if not task then
66160: LD_VAR 0 4
66164: NOT
66165: IFFALSE 66169
// exit ;
66167: GO 66211
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66169: LD_ADDR_VAR 0 3
66173: PUSH
66174: LD_VAR 0 4
66178: PUSH
66179: LD_INT 1
66181: ARRAY
66182: PUSH
66183: LD_INT 1
66185: ARRAY
66186: PUSH
66187: LD_STRING r
66189: EQUAL
66190: PUSH
66191: LD_VAR 0 4
66195: PUSH
66196: LD_INT 1
66198: ARRAY
66199: PUSH
66200: LD_INT 4
66202: ARRAY
66203: PUSH
66204: LD_VAR 0 2
66208: EQUAL
66209: AND
66210: ST_TO_ADDR
// end ;
66211: LD_VAR 0 3
66215: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66216: LD_INT 0
66218: PPUSH
// SetDir ( unit , d ) ;
66219: LD_VAR 0 1
66223: PPUSH
66224: LD_VAR 0 4
66228: PPUSH
66229: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66233: LD_VAR 0 1
66237: PPUSH
66238: LD_VAR 0 2
66242: PPUSH
66243: LD_VAR 0 3
66247: PPUSH
66248: LD_VAR 0 5
66252: PPUSH
66253: CALL_OW 48
// end ;
66257: LD_VAR 0 6
66261: RET
// export function ToNaturalNumber ( number ) ; begin
66262: LD_INT 0
66264: PPUSH
// result := number div 1 ;
66265: LD_ADDR_VAR 0 2
66269: PUSH
66270: LD_VAR 0 1
66274: PUSH
66275: LD_INT 1
66277: DIV
66278: ST_TO_ADDR
// if number < 0 then
66279: LD_VAR 0 1
66283: PUSH
66284: LD_INT 0
66286: LESS
66287: IFFALSE 66297
// result := 0 ;
66289: LD_ADDR_VAR 0 2
66293: PUSH
66294: LD_INT 0
66296: ST_TO_ADDR
// end ;
66297: LD_VAR 0 2
66301: RET
// export function SortByClass ( units , class ) ; var un ; begin
66302: LD_INT 0
66304: PPUSH
66305: PPUSH
// if not units or not class then
66306: LD_VAR 0 1
66310: NOT
66311: PUSH
66312: LD_VAR 0 2
66316: NOT
66317: OR
66318: IFFALSE 66322
// exit ;
66320: GO 66417
// result := [ ] ;
66322: LD_ADDR_VAR 0 3
66326: PUSH
66327: EMPTY
66328: ST_TO_ADDR
// for un in units do
66329: LD_ADDR_VAR 0 4
66333: PUSH
66334: LD_VAR 0 1
66338: PUSH
66339: FOR_IN
66340: IFFALSE 66415
// if GetClass ( un ) = class then
66342: LD_VAR 0 4
66346: PPUSH
66347: CALL_OW 257
66351: PUSH
66352: LD_VAR 0 2
66356: EQUAL
66357: IFFALSE 66384
// result := Insert ( result , 1 , un ) else
66359: LD_ADDR_VAR 0 3
66363: PUSH
66364: LD_VAR 0 3
66368: PPUSH
66369: LD_INT 1
66371: PPUSH
66372: LD_VAR 0 4
66376: PPUSH
66377: CALL_OW 2
66381: ST_TO_ADDR
66382: GO 66413
// result := Replace ( result , result + 1 , un ) ;
66384: LD_ADDR_VAR 0 3
66388: PUSH
66389: LD_VAR 0 3
66393: PPUSH
66394: LD_VAR 0 3
66398: PUSH
66399: LD_INT 1
66401: PLUS
66402: PPUSH
66403: LD_VAR 0 4
66407: PPUSH
66408: CALL_OW 1
66412: ST_TO_ADDR
66413: GO 66339
66415: POP
66416: POP
// end ;
66417: LD_VAR 0 3
66421: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66422: LD_INT 0
66424: PPUSH
66425: PPUSH
66426: PPUSH
66427: PPUSH
66428: PPUSH
66429: PPUSH
66430: PPUSH
// result := [ ] ;
66431: LD_ADDR_VAR 0 4
66435: PUSH
66436: EMPTY
66437: ST_TO_ADDR
// if x - r < 0 then
66438: LD_VAR 0 1
66442: PUSH
66443: LD_VAR 0 3
66447: MINUS
66448: PUSH
66449: LD_INT 0
66451: LESS
66452: IFFALSE 66464
// min_x := 0 else
66454: LD_ADDR_VAR 0 8
66458: PUSH
66459: LD_INT 0
66461: ST_TO_ADDR
66462: GO 66480
// min_x := x - r ;
66464: LD_ADDR_VAR 0 8
66468: PUSH
66469: LD_VAR 0 1
66473: PUSH
66474: LD_VAR 0 3
66478: MINUS
66479: ST_TO_ADDR
// if y - r < 0 then
66480: LD_VAR 0 2
66484: PUSH
66485: LD_VAR 0 3
66489: MINUS
66490: PUSH
66491: LD_INT 0
66493: LESS
66494: IFFALSE 66506
// min_y := 0 else
66496: LD_ADDR_VAR 0 7
66500: PUSH
66501: LD_INT 0
66503: ST_TO_ADDR
66504: GO 66522
// min_y := y - r ;
66506: LD_ADDR_VAR 0 7
66510: PUSH
66511: LD_VAR 0 2
66515: PUSH
66516: LD_VAR 0 3
66520: MINUS
66521: ST_TO_ADDR
// max_x := x + r ;
66522: LD_ADDR_VAR 0 9
66526: PUSH
66527: LD_VAR 0 1
66531: PUSH
66532: LD_VAR 0 3
66536: PLUS
66537: ST_TO_ADDR
// max_y := y + r ;
66538: LD_ADDR_VAR 0 10
66542: PUSH
66543: LD_VAR 0 2
66547: PUSH
66548: LD_VAR 0 3
66552: PLUS
66553: ST_TO_ADDR
// for _x = min_x to max_x do
66554: LD_ADDR_VAR 0 5
66558: PUSH
66559: DOUBLE
66560: LD_VAR 0 8
66564: DEC
66565: ST_TO_ADDR
66566: LD_VAR 0 9
66570: PUSH
66571: FOR_TO
66572: IFFALSE 66673
// for _y = min_y to max_y do
66574: LD_ADDR_VAR 0 6
66578: PUSH
66579: DOUBLE
66580: LD_VAR 0 7
66584: DEC
66585: ST_TO_ADDR
66586: LD_VAR 0 10
66590: PUSH
66591: FOR_TO
66592: IFFALSE 66669
// begin if not ValidHex ( _x , _y ) then
66594: LD_VAR 0 5
66598: PPUSH
66599: LD_VAR 0 6
66603: PPUSH
66604: CALL_OW 488
66608: NOT
66609: IFFALSE 66613
// continue ;
66611: GO 66591
// if GetResourceTypeXY ( _x , _y ) then
66613: LD_VAR 0 5
66617: PPUSH
66618: LD_VAR 0 6
66622: PPUSH
66623: CALL_OW 283
66627: IFFALSE 66667
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66629: LD_ADDR_VAR 0 4
66633: PUSH
66634: LD_VAR 0 4
66638: PPUSH
66639: LD_VAR 0 4
66643: PUSH
66644: LD_INT 1
66646: PLUS
66647: PPUSH
66648: LD_VAR 0 5
66652: PUSH
66653: LD_VAR 0 6
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PPUSH
66662: CALL_OW 1
66666: ST_TO_ADDR
// end ;
66667: GO 66591
66669: POP
66670: POP
66671: GO 66571
66673: POP
66674: POP
// end ;
66675: LD_VAR 0 4
66679: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66680: LD_INT 0
66682: PPUSH
66683: PPUSH
66684: PPUSH
66685: PPUSH
66686: PPUSH
66687: PPUSH
66688: PPUSH
66689: PPUSH
// if not units then
66690: LD_VAR 0 1
66694: NOT
66695: IFFALSE 66699
// exit ;
66697: GO 67223
// result := UnitFilter ( units , [ f_ok ] ) ;
66699: LD_ADDR_VAR 0 3
66703: PUSH
66704: LD_VAR 0 1
66708: PPUSH
66709: LD_INT 50
66711: PUSH
66712: EMPTY
66713: LIST
66714: PPUSH
66715: CALL_OW 72
66719: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66720: LD_ADDR_VAR 0 8
66724: PUSH
66725: LD_VAR 0 1
66729: PUSH
66730: LD_INT 1
66732: ARRAY
66733: PPUSH
66734: CALL_OW 255
66738: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66739: LD_ADDR_VAR 0 10
66743: PUSH
66744: LD_INT 29
66746: PUSH
66747: LD_INT 91
66749: PUSH
66750: LD_INT 49
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: ST_TO_ADDR
// if not result then
66758: LD_VAR 0 3
66762: NOT
66763: IFFALSE 66767
// exit ;
66765: GO 67223
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66767: LD_ADDR_VAR 0 5
66771: PUSH
66772: LD_INT 81
66774: PUSH
66775: LD_VAR 0 8
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PPUSH
66784: CALL_OW 69
66788: ST_TO_ADDR
// for i in result do
66789: LD_ADDR_VAR 0 4
66793: PUSH
66794: LD_VAR 0 3
66798: PUSH
66799: FOR_IN
66800: IFFALSE 67221
// begin tag := GetTag ( i ) + 1 ;
66802: LD_ADDR_VAR 0 9
66806: PUSH
66807: LD_VAR 0 4
66811: PPUSH
66812: CALL_OW 110
66816: PUSH
66817: LD_INT 1
66819: PLUS
66820: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66821: LD_ADDR_VAR 0 7
66825: PUSH
66826: LD_VAR 0 4
66830: PPUSH
66831: CALL_OW 250
66835: PPUSH
66836: LD_VAR 0 4
66840: PPUSH
66841: CALL_OW 251
66845: PPUSH
66846: LD_INT 6
66848: PPUSH
66849: CALL 66422 0 3
66853: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66854: LD_VAR 0 4
66858: PPUSH
66859: CALL_OW 247
66863: PUSH
66864: LD_INT 2
66866: EQUAL
66867: PUSH
66868: LD_VAR 0 7
66872: AND
66873: PUSH
66874: LD_VAR 0 4
66878: PPUSH
66879: CALL_OW 264
66883: PUSH
66884: LD_VAR 0 10
66888: IN
66889: NOT
66890: AND
66891: IFFALSE 66930
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66893: LD_VAR 0 4
66897: PPUSH
66898: LD_VAR 0 7
66902: PUSH
66903: LD_INT 1
66905: ARRAY
66906: PUSH
66907: LD_INT 1
66909: ARRAY
66910: PPUSH
66911: LD_VAR 0 7
66915: PUSH
66916: LD_INT 1
66918: ARRAY
66919: PUSH
66920: LD_INT 2
66922: ARRAY
66923: PPUSH
66924: CALL_OW 116
66928: GO 67219
// if path > tag then
66930: LD_VAR 0 2
66934: PUSH
66935: LD_VAR 0 9
66939: GREATER
66940: IFFALSE 67148
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66942: LD_ADDR_VAR 0 6
66946: PUSH
66947: LD_VAR 0 5
66951: PPUSH
66952: LD_INT 91
66954: PUSH
66955: LD_VAR 0 4
66959: PUSH
66960: LD_INT 8
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: LIST
66967: PPUSH
66968: CALL_OW 72
66972: ST_TO_ADDR
// if nearEnemy then
66973: LD_VAR 0 6
66977: IFFALSE 67046
// begin if GetWeapon ( i ) = ru_time_lapser then
66979: LD_VAR 0 4
66983: PPUSH
66984: CALL_OW 264
66988: PUSH
66989: LD_INT 49
66991: EQUAL
66992: IFFALSE 67020
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66994: LD_VAR 0 4
66998: PPUSH
66999: LD_VAR 0 6
67003: PPUSH
67004: LD_VAR 0 4
67008: PPUSH
67009: CALL_OW 74
67013: PPUSH
67014: CALL_OW 112
67018: GO 67044
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67020: LD_VAR 0 4
67024: PPUSH
67025: LD_VAR 0 6
67029: PPUSH
67030: LD_VAR 0 4
67034: PPUSH
67035: CALL_OW 74
67039: PPUSH
67040: CALL_OW 115
// end else
67044: GO 67146
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67046: LD_VAR 0 4
67050: PPUSH
67051: LD_VAR 0 2
67055: PUSH
67056: LD_VAR 0 9
67060: ARRAY
67061: PUSH
67062: LD_INT 1
67064: ARRAY
67065: PPUSH
67066: LD_VAR 0 2
67070: PUSH
67071: LD_VAR 0 9
67075: ARRAY
67076: PUSH
67077: LD_INT 2
67079: ARRAY
67080: PPUSH
67081: CALL_OW 297
67085: PUSH
67086: LD_INT 6
67088: GREATER
67089: IFFALSE 67132
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67091: LD_VAR 0 4
67095: PPUSH
67096: LD_VAR 0 2
67100: PUSH
67101: LD_VAR 0 9
67105: ARRAY
67106: PUSH
67107: LD_INT 1
67109: ARRAY
67110: PPUSH
67111: LD_VAR 0 2
67115: PUSH
67116: LD_VAR 0 9
67120: ARRAY
67121: PUSH
67122: LD_INT 2
67124: ARRAY
67125: PPUSH
67126: CALL_OW 114
67130: GO 67146
// SetTag ( i , tag ) ;
67132: LD_VAR 0 4
67136: PPUSH
67137: LD_VAR 0 9
67141: PPUSH
67142: CALL_OW 109
// end else
67146: GO 67219
// if enemy then
67148: LD_VAR 0 5
67152: IFFALSE 67219
// begin if GetWeapon ( i ) = ru_time_lapser then
67154: LD_VAR 0 4
67158: PPUSH
67159: CALL_OW 264
67163: PUSH
67164: LD_INT 49
67166: EQUAL
67167: IFFALSE 67195
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67169: LD_VAR 0 4
67173: PPUSH
67174: LD_VAR 0 5
67178: PPUSH
67179: LD_VAR 0 4
67183: PPUSH
67184: CALL_OW 74
67188: PPUSH
67189: CALL_OW 112
67193: GO 67219
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67195: LD_VAR 0 4
67199: PPUSH
67200: LD_VAR 0 5
67204: PPUSH
67205: LD_VAR 0 4
67209: PPUSH
67210: CALL_OW 74
67214: PPUSH
67215: CALL_OW 115
// end ; end ;
67219: GO 66799
67221: POP
67222: POP
// end ;
67223: LD_VAR 0 3
67227: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67228: LD_INT 0
67230: PPUSH
67231: PPUSH
67232: PPUSH
// if not unit or IsInUnit ( unit ) then
67233: LD_VAR 0 1
67237: NOT
67238: PUSH
67239: LD_VAR 0 1
67243: PPUSH
67244: CALL_OW 310
67248: OR
67249: IFFALSE 67253
// exit ;
67251: GO 67344
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67253: LD_ADDR_VAR 0 4
67257: PUSH
67258: LD_VAR 0 1
67262: PPUSH
67263: CALL_OW 250
67267: PPUSH
67268: LD_VAR 0 2
67272: PPUSH
67273: LD_INT 1
67275: PPUSH
67276: CALL_OW 272
67280: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67281: LD_ADDR_VAR 0 5
67285: PUSH
67286: LD_VAR 0 1
67290: PPUSH
67291: CALL_OW 251
67295: PPUSH
67296: LD_VAR 0 2
67300: PPUSH
67301: LD_INT 1
67303: PPUSH
67304: CALL_OW 273
67308: ST_TO_ADDR
// if ValidHex ( x , y ) then
67309: LD_VAR 0 4
67313: PPUSH
67314: LD_VAR 0 5
67318: PPUSH
67319: CALL_OW 488
67323: IFFALSE 67344
// ComTurnXY ( unit , x , y ) ;
67325: LD_VAR 0 1
67329: PPUSH
67330: LD_VAR 0 4
67334: PPUSH
67335: LD_VAR 0 5
67339: PPUSH
67340: CALL_OW 118
// end ;
67344: LD_VAR 0 3
67348: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67349: LD_INT 0
67351: PPUSH
67352: PPUSH
// result := false ;
67353: LD_ADDR_VAR 0 3
67357: PUSH
67358: LD_INT 0
67360: ST_TO_ADDR
// if not units then
67361: LD_VAR 0 2
67365: NOT
67366: IFFALSE 67370
// exit ;
67368: GO 67415
// for i in units do
67370: LD_ADDR_VAR 0 4
67374: PUSH
67375: LD_VAR 0 2
67379: PUSH
67380: FOR_IN
67381: IFFALSE 67413
// if See ( side , i ) then
67383: LD_VAR 0 1
67387: PPUSH
67388: LD_VAR 0 4
67392: PPUSH
67393: CALL_OW 292
67397: IFFALSE 67411
// begin result := true ;
67399: LD_ADDR_VAR 0 3
67403: PUSH
67404: LD_INT 1
67406: ST_TO_ADDR
// exit ;
67407: POP
67408: POP
67409: GO 67415
// end ;
67411: GO 67380
67413: POP
67414: POP
// end ;
67415: LD_VAR 0 3
67419: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67420: LD_INT 0
67422: PPUSH
67423: PPUSH
67424: PPUSH
67425: PPUSH
// if not unit or not points then
67426: LD_VAR 0 1
67430: NOT
67431: PUSH
67432: LD_VAR 0 2
67436: NOT
67437: OR
67438: IFFALSE 67442
// exit ;
67440: GO 67532
// dist := 99999 ;
67442: LD_ADDR_VAR 0 5
67446: PUSH
67447: LD_INT 99999
67449: ST_TO_ADDR
// for i in points do
67450: LD_ADDR_VAR 0 4
67454: PUSH
67455: LD_VAR 0 2
67459: PUSH
67460: FOR_IN
67461: IFFALSE 67530
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67463: LD_ADDR_VAR 0 6
67467: PUSH
67468: LD_VAR 0 1
67472: PPUSH
67473: LD_VAR 0 4
67477: PUSH
67478: LD_INT 1
67480: ARRAY
67481: PPUSH
67482: LD_VAR 0 4
67486: PUSH
67487: LD_INT 2
67489: ARRAY
67490: PPUSH
67491: CALL_OW 297
67495: ST_TO_ADDR
// if tmpDist < dist then
67496: LD_VAR 0 6
67500: PUSH
67501: LD_VAR 0 5
67505: LESS
67506: IFFALSE 67528
// begin result := i ;
67508: LD_ADDR_VAR 0 3
67512: PUSH
67513: LD_VAR 0 4
67517: ST_TO_ADDR
// dist := tmpDist ;
67518: LD_ADDR_VAR 0 5
67522: PUSH
67523: LD_VAR 0 6
67527: ST_TO_ADDR
// end ; end ;
67528: GO 67460
67530: POP
67531: POP
// end ;
67532: LD_VAR 0 3
67536: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67537: LD_INT 0
67539: PPUSH
// uc_side := side ;
67540: LD_ADDR_OWVAR 20
67544: PUSH
67545: LD_VAR 0 1
67549: ST_TO_ADDR
// uc_nation := 3 ;
67550: LD_ADDR_OWVAR 21
67554: PUSH
67555: LD_INT 3
67557: ST_TO_ADDR
// vc_chassis := 25 ;
67558: LD_ADDR_OWVAR 37
67562: PUSH
67563: LD_INT 25
67565: ST_TO_ADDR
// vc_engine := engine_siberite ;
67566: LD_ADDR_OWVAR 39
67570: PUSH
67571: LD_INT 3
67573: ST_TO_ADDR
// vc_control := control_computer ;
67574: LD_ADDR_OWVAR 38
67578: PUSH
67579: LD_INT 3
67581: ST_TO_ADDR
// vc_weapon := 59 ;
67582: LD_ADDR_OWVAR 40
67586: PUSH
67587: LD_INT 59
67589: ST_TO_ADDR
// result := CreateVehicle ;
67590: LD_ADDR_VAR 0 5
67594: PUSH
67595: CALL_OW 45
67599: ST_TO_ADDR
// SetDir ( result , d ) ;
67600: LD_VAR 0 5
67604: PPUSH
67605: LD_VAR 0 4
67609: PPUSH
67610: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67614: LD_VAR 0 5
67618: PPUSH
67619: LD_VAR 0 2
67623: PPUSH
67624: LD_VAR 0 3
67628: PPUSH
67629: LD_INT 0
67631: PPUSH
67632: CALL_OW 48
// end ;
67636: LD_VAR 0 5
67640: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67641: LD_INT 0
67643: PPUSH
67644: PPUSH
67645: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67646: LD_ADDR_VAR 0 2
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: LD_INT 0
67656: PUSH
67657: LD_INT 0
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67669: LD_VAR 0 1
67673: NOT
67674: PUSH
67675: LD_VAR 0 1
67679: PPUSH
67680: CALL_OW 264
67684: PUSH
67685: LD_INT 12
67687: PUSH
67688: LD_INT 51
67690: PUSH
67691: LD_INT 32
67693: PUSH
67694: LD_INT 89
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: IN
67703: NOT
67704: OR
67705: IFFALSE 67709
// exit ;
67707: GO 67807
// for i := 1 to 3 do
67709: LD_ADDR_VAR 0 3
67713: PUSH
67714: DOUBLE
67715: LD_INT 1
67717: DEC
67718: ST_TO_ADDR
67719: LD_INT 3
67721: PUSH
67722: FOR_TO
67723: IFFALSE 67805
// begin tmp := GetCargo ( cargo , i ) ;
67725: LD_ADDR_VAR 0 4
67729: PUSH
67730: LD_VAR 0 1
67734: PPUSH
67735: LD_VAR 0 3
67739: PPUSH
67740: CALL_OW 289
67744: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67745: LD_ADDR_VAR 0 2
67749: PUSH
67750: LD_VAR 0 2
67754: PPUSH
67755: LD_VAR 0 3
67759: PPUSH
67760: LD_VAR 0 4
67764: PPUSH
67765: CALL_OW 1
67769: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67770: LD_ADDR_VAR 0 2
67774: PUSH
67775: LD_VAR 0 2
67779: PPUSH
67780: LD_INT 4
67782: PPUSH
67783: LD_VAR 0 2
67787: PUSH
67788: LD_INT 4
67790: ARRAY
67791: PUSH
67792: LD_VAR 0 4
67796: PLUS
67797: PPUSH
67798: CALL_OW 1
67802: ST_TO_ADDR
// end ;
67803: GO 67722
67805: POP
67806: POP
// end ;
67807: LD_VAR 0 2
67811: RET
// export function Length ( array ) ; begin
67812: LD_INT 0
67814: PPUSH
// result := array + 0 ;
67815: LD_ADDR_VAR 0 2
67819: PUSH
67820: LD_VAR 0 1
67824: PUSH
67825: LD_INT 0
67827: PLUS
67828: ST_TO_ADDR
// end ;
67829: LD_VAR 0 2
67833: RET
// export function PrepareArray ( array ) ; begin
67834: LD_INT 0
67836: PPUSH
// result := array diff 0 ;
67837: LD_ADDR_VAR 0 2
67841: PUSH
67842: LD_VAR 0 1
67846: PUSH
67847: LD_INT 0
67849: DIFF
67850: ST_TO_ADDR
// if not result [ 1 ] then
67851: LD_VAR 0 2
67855: PUSH
67856: LD_INT 1
67858: ARRAY
67859: NOT
67860: IFFALSE 67880
// result := Delete ( result , 1 ) ;
67862: LD_ADDR_VAR 0 2
67866: PUSH
67867: LD_VAR 0 2
67871: PPUSH
67872: LD_INT 1
67874: PPUSH
67875: CALL_OW 3
67879: ST_TO_ADDR
// end ;
67880: LD_VAR 0 2
67884: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67885: LD_INT 0
67887: PPUSH
67888: PPUSH
67889: PPUSH
67890: PPUSH
// sibRocketRange := 25 ;
67891: LD_ADDR_VAR 0 6
67895: PUSH
67896: LD_INT 25
67898: ST_TO_ADDR
// result := false ;
67899: LD_ADDR_VAR 0 4
67903: PUSH
67904: LD_INT 0
67906: ST_TO_ADDR
// for i := 0 to 5 do
67907: LD_ADDR_VAR 0 5
67911: PUSH
67912: DOUBLE
67913: LD_INT 0
67915: DEC
67916: ST_TO_ADDR
67917: LD_INT 5
67919: PUSH
67920: FOR_TO
67921: IFFALSE 67988
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67923: LD_VAR 0 1
67927: PPUSH
67928: LD_VAR 0 5
67932: PPUSH
67933: LD_VAR 0 6
67937: PPUSH
67938: CALL_OW 272
67942: PPUSH
67943: LD_VAR 0 2
67947: PPUSH
67948: LD_VAR 0 5
67952: PPUSH
67953: LD_VAR 0 6
67957: PPUSH
67958: CALL_OW 273
67962: PPUSH
67963: LD_VAR 0 3
67967: PPUSH
67968: CALL_OW 309
67972: IFFALSE 67986
// begin result := true ;
67974: LD_ADDR_VAR 0 4
67978: PUSH
67979: LD_INT 1
67981: ST_TO_ADDR
// exit ;
67982: POP
67983: POP
67984: GO 67990
// end ;
67986: GO 67920
67988: POP
67989: POP
// end ; end_of_file
67990: LD_VAR 0 4
67994: RET
// every 0 0$1 do
67995: GO 67997
67997: DISABLE
// begin enable ;
67998: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
67999: LD_STRING updateTimer(
68001: PUSH
68002: LD_OWVAR 1
68006: STR
68007: PUSH
68008: LD_STRING );
68010: STR
68011: PPUSH
68012: CALL_OW 559
// end ;
68016: END
// export function SOS_MapStart ( ) ; begin
68017: LD_INT 0
68019: PPUSH
// if streamModeActive then
68020: LD_EXP 66
68024: IFFALSE 68033
// DefineStreamItems ( true ) ;
68026: LD_INT 1
68028: PPUSH
68029: CALL 69687 0 1
// UpdateFactoryWaypoints ( ) ;
68033: CALL 82548 0 0
// UpdateWarehouseGatheringPoints ( ) ;
68037: CALL 82805 0 0
// end ;
68041: LD_VAR 0 1
68045: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68046: LD_INT 0
68048: PPUSH
// if p2 = hack_mode then
68049: LD_VAR 0 2
68053: PUSH
68054: LD_INT 100
68056: EQUAL
68057: IFFALSE 69060
// begin if not StreamModeActive then
68059: LD_EXP 66
68063: NOT
68064: IFFALSE 68074
// StreamModeActive := true ;
68066: LD_ADDR_EXP 66
68070: PUSH
68071: LD_INT 1
68073: ST_TO_ADDR
// if p3 = 0 then
68074: LD_VAR 0 3
68078: PUSH
68079: LD_INT 0
68081: EQUAL
68082: IFFALSE 68088
// InitStreamMode ;
68084: CALL 69223 0 0
// if p3 = 1 then
68088: LD_VAR 0 3
68092: PUSH
68093: LD_INT 1
68095: EQUAL
68096: IFFALSE 68106
// sRocket := true ;
68098: LD_ADDR_EXP 71
68102: PUSH
68103: LD_INT 1
68105: ST_TO_ADDR
// if p3 = 2 then
68106: LD_VAR 0 3
68110: PUSH
68111: LD_INT 2
68113: EQUAL
68114: IFFALSE 68124
// sSpeed := true ;
68116: LD_ADDR_EXP 70
68120: PUSH
68121: LD_INT 1
68123: ST_TO_ADDR
// if p3 = 3 then
68124: LD_VAR 0 3
68128: PUSH
68129: LD_INT 3
68131: EQUAL
68132: IFFALSE 68142
// sEngine := true ;
68134: LD_ADDR_EXP 72
68138: PUSH
68139: LD_INT 1
68141: ST_TO_ADDR
// if p3 = 4 then
68142: LD_VAR 0 3
68146: PUSH
68147: LD_INT 4
68149: EQUAL
68150: IFFALSE 68160
// sSpec := true ;
68152: LD_ADDR_EXP 69
68156: PUSH
68157: LD_INT 1
68159: ST_TO_ADDR
// if p3 = 5 then
68160: LD_VAR 0 3
68164: PUSH
68165: LD_INT 5
68167: EQUAL
68168: IFFALSE 68178
// sLevel := true ;
68170: LD_ADDR_EXP 73
68174: PUSH
68175: LD_INT 1
68177: ST_TO_ADDR
// if p3 = 6 then
68178: LD_VAR 0 3
68182: PUSH
68183: LD_INT 6
68185: EQUAL
68186: IFFALSE 68196
// sArmoury := true ;
68188: LD_ADDR_EXP 74
68192: PUSH
68193: LD_INT 1
68195: ST_TO_ADDR
// if p3 = 7 then
68196: LD_VAR 0 3
68200: PUSH
68201: LD_INT 7
68203: EQUAL
68204: IFFALSE 68214
// sRadar := true ;
68206: LD_ADDR_EXP 75
68210: PUSH
68211: LD_INT 1
68213: ST_TO_ADDR
// if p3 = 8 then
68214: LD_VAR 0 3
68218: PUSH
68219: LD_INT 8
68221: EQUAL
68222: IFFALSE 68232
// sBunker := true ;
68224: LD_ADDR_EXP 76
68228: PUSH
68229: LD_INT 1
68231: ST_TO_ADDR
// if p3 = 9 then
68232: LD_VAR 0 3
68236: PUSH
68237: LD_INT 9
68239: EQUAL
68240: IFFALSE 68250
// sHack := true ;
68242: LD_ADDR_EXP 77
68246: PUSH
68247: LD_INT 1
68249: ST_TO_ADDR
// if p3 = 10 then
68250: LD_VAR 0 3
68254: PUSH
68255: LD_INT 10
68257: EQUAL
68258: IFFALSE 68268
// sFire := true ;
68260: LD_ADDR_EXP 78
68264: PUSH
68265: LD_INT 1
68267: ST_TO_ADDR
// if p3 = 11 then
68268: LD_VAR 0 3
68272: PUSH
68273: LD_INT 11
68275: EQUAL
68276: IFFALSE 68286
// sRefresh := true ;
68278: LD_ADDR_EXP 79
68282: PUSH
68283: LD_INT 1
68285: ST_TO_ADDR
// if p3 = 12 then
68286: LD_VAR 0 3
68290: PUSH
68291: LD_INT 12
68293: EQUAL
68294: IFFALSE 68304
// sExp := true ;
68296: LD_ADDR_EXP 80
68300: PUSH
68301: LD_INT 1
68303: ST_TO_ADDR
// if p3 = 13 then
68304: LD_VAR 0 3
68308: PUSH
68309: LD_INT 13
68311: EQUAL
68312: IFFALSE 68322
// sDepot := true ;
68314: LD_ADDR_EXP 81
68318: PUSH
68319: LD_INT 1
68321: ST_TO_ADDR
// if p3 = 14 then
68322: LD_VAR 0 3
68326: PUSH
68327: LD_INT 14
68329: EQUAL
68330: IFFALSE 68340
// sFlag := true ;
68332: LD_ADDR_EXP 82
68336: PUSH
68337: LD_INT 1
68339: ST_TO_ADDR
// if p3 = 15 then
68340: LD_VAR 0 3
68344: PUSH
68345: LD_INT 15
68347: EQUAL
68348: IFFALSE 68358
// sKamikadze := true ;
68350: LD_ADDR_EXP 90
68354: PUSH
68355: LD_INT 1
68357: ST_TO_ADDR
// if p3 = 16 then
68358: LD_VAR 0 3
68362: PUSH
68363: LD_INT 16
68365: EQUAL
68366: IFFALSE 68376
// sTroll := true ;
68368: LD_ADDR_EXP 91
68372: PUSH
68373: LD_INT 1
68375: ST_TO_ADDR
// if p3 = 17 then
68376: LD_VAR 0 3
68380: PUSH
68381: LD_INT 17
68383: EQUAL
68384: IFFALSE 68394
// sSlow := true ;
68386: LD_ADDR_EXP 92
68390: PUSH
68391: LD_INT 1
68393: ST_TO_ADDR
// if p3 = 18 then
68394: LD_VAR 0 3
68398: PUSH
68399: LD_INT 18
68401: EQUAL
68402: IFFALSE 68412
// sLack := true ;
68404: LD_ADDR_EXP 93
68408: PUSH
68409: LD_INT 1
68411: ST_TO_ADDR
// if p3 = 19 then
68412: LD_VAR 0 3
68416: PUSH
68417: LD_INT 19
68419: EQUAL
68420: IFFALSE 68430
// sTank := true ;
68422: LD_ADDR_EXP 95
68426: PUSH
68427: LD_INT 1
68429: ST_TO_ADDR
// if p3 = 20 then
68430: LD_VAR 0 3
68434: PUSH
68435: LD_INT 20
68437: EQUAL
68438: IFFALSE 68448
// sRemote := true ;
68440: LD_ADDR_EXP 96
68444: PUSH
68445: LD_INT 1
68447: ST_TO_ADDR
// if p3 = 21 then
68448: LD_VAR 0 3
68452: PUSH
68453: LD_INT 21
68455: EQUAL
68456: IFFALSE 68466
// sPowell := true ;
68458: LD_ADDR_EXP 97
68462: PUSH
68463: LD_INT 1
68465: ST_TO_ADDR
// if p3 = 22 then
68466: LD_VAR 0 3
68470: PUSH
68471: LD_INT 22
68473: EQUAL
68474: IFFALSE 68484
// sTeleport := true ;
68476: LD_ADDR_EXP 100
68480: PUSH
68481: LD_INT 1
68483: ST_TO_ADDR
// if p3 = 23 then
68484: LD_VAR 0 3
68488: PUSH
68489: LD_INT 23
68491: EQUAL
68492: IFFALSE 68502
// sOilTower := true ;
68494: LD_ADDR_EXP 102
68498: PUSH
68499: LD_INT 1
68501: ST_TO_ADDR
// if p3 = 24 then
68502: LD_VAR 0 3
68506: PUSH
68507: LD_INT 24
68509: EQUAL
68510: IFFALSE 68520
// sShovel := true ;
68512: LD_ADDR_EXP 103
68516: PUSH
68517: LD_INT 1
68519: ST_TO_ADDR
// if p3 = 25 then
68520: LD_VAR 0 3
68524: PUSH
68525: LD_INT 25
68527: EQUAL
68528: IFFALSE 68538
// sSheik := true ;
68530: LD_ADDR_EXP 104
68534: PUSH
68535: LD_INT 1
68537: ST_TO_ADDR
// if p3 = 26 then
68538: LD_VAR 0 3
68542: PUSH
68543: LD_INT 26
68545: EQUAL
68546: IFFALSE 68556
// sEarthquake := true ;
68548: LD_ADDR_EXP 106
68552: PUSH
68553: LD_INT 1
68555: ST_TO_ADDR
// if p3 = 27 then
68556: LD_VAR 0 3
68560: PUSH
68561: LD_INT 27
68563: EQUAL
68564: IFFALSE 68574
// sAI := true ;
68566: LD_ADDR_EXP 107
68570: PUSH
68571: LD_INT 1
68573: ST_TO_ADDR
// if p3 = 28 then
68574: LD_VAR 0 3
68578: PUSH
68579: LD_INT 28
68581: EQUAL
68582: IFFALSE 68592
// sCargo := true ;
68584: LD_ADDR_EXP 110
68588: PUSH
68589: LD_INT 1
68591: ST_TO_ADDR
// if p3 = 29 then
68592: LD_VAR 0 3
68596: PUSH
68597: LD_INT 29
68599: EQUAL
68600: IFFALSE 68610
// sDLaser := true ;
68602: LD_ADDR_EXP 111
68606: PUSH
68607: LD_INT 1
68609: ST_TO_ADDR
// if p3 = 30 then
68610: LD_VAR 0 3
68614: PUSH
68615: LD_INT 30
68617: EQUAL
68618: IFFALSE 68628
// sExchange := true ;
68620: LD_ADDR_EXP 112
68624: PUSH
68625: LD_INT 1
68627: ST_TO_ADDR
// if p3 = 31 then
68628: LD_VAR 0 3
68632: PUSH
68633: LD_INT 31
68635: EQUAL
68636: IFFALSE 68646
// sFac := true ;
68638: LD_ADDR_EXP 113
68642: PUSH
68643: LD_INT 1
68645: ST_TO_ADDR
// if p3 = 32 then
68646: LD_VAR 0 3
68650: PUSH
68651: LD_INT 32
68653: EQUAL
68654: IFFALSE 68664
// sPower := true ;
68656: LD_ADDR_EXP 114
68660: PUSH
68661: LD_INT 1
68663: ST_TO_ADDR
// if p3 = 33 then
68664: LD_VAR 0 3
68668: PUSH
68669: LD_INT 33
68671: EQUAL
68672: IFFALSE 68682
// sRandom := true ;
68674: LD_ADDR_EXP 115
68678: PUSH
68679: LD_INT 1
68681: ST_TO_ADDR
// if p3 = 34 then
68682: LD_VAR 0 3
68686: PUSH
68687: LD_INT 34
68689: EQUAL
68690: IFFALSE 68700
// sShield := true ;
68692: LD_ADDR_EXP 116
68696: PUSH
68697: LD_INT 1
68699: ST_TO_ADDR
// if p3 = 35 then
68700: LD_VAR 0 3
68704: PUSH
68705: LD_INT 35
68707: EQUAL
68708: IFFALSE 68718
// sTime := true ;
68710: LD_ADDR_EXP 117
68714: PUSH
68715: LD_INT 1
68717: ST_TO_ADDR
// if p3 = 36 then
68718: LD_VAR 0 3
68722: PUSH
68723: LD_INT 36
68725: EQUAL
68726: IFFALSE 68736
// sTools := true ;
68728: LD_ADDR_EXP 118
68732: PUSH
68733: LD_INT 1
68735: ST_TO_ADDR
// if p3 = 101 then
68736: LD_VAR 0 3
68740: PUSH
68741: LD_INT 101
68743: EQUAL
68744: IFFALSE 68754
// sSold := true ;
68746: LD_ADDR_EXP 83
68750: PUSH
68751: LD_INT 1
68753: ST_TO_ADDR
// if p3 = 102 then
68754: LD_VAR 0 3
68758: PUSH
68759: LD_INT 102
68761: EQUAL
68762: IFFALSE 68772
// sDiff := true ;
68764: LD_ADDR_EXP 84
68768: PUSH
68769: LD_INT 1
68771: ST_TO_ADDR
// if p3 = 103 then
68772: LD_VAR 0 3
68776: PUSH
68777: LD_INT 103
68779: EQUAL
68780: IFFALSE 68790
// sFog := true ;
68782: LD_ADDR_EXP 87
68786: PUSH
68787: LD_INT 1
68789: ST_TO_ADDR
// if p3 = 104 then
68790: LD_VAR 0 3
68794: PUSH
68795: LD_INT 104
68797: EQUAL
68798: IFFALSE 68808
// sReset := true ;
68800: LD_ADDR_EXP 88
68804: PUSH
68805: LD_INT 1
68807: ST_TO_ADDR
// if p3 = 105 then
68808: LD_VAR 0 3
68812: PUSH
68813: LD_INT 105
68815: EQUAL
68816: IFFALSE 68826
// sSun := true ;
68818: LD_ADDR_EXP 89
68822: PUSH
68823: LD_INT 1
68825: ST_TO_ADDR
// if p3 = 106 then
68826: LD_VAR 0 3
68830: PUSH
68831: LD_INT 106
68833: EQUAL
68834: IFFALSE 68844
// sTiger := true ;
68836: LD_ADDR_EXP 85
68840: PUSH
68841: LD_INT 1
68843: ST_TO_ADDR
// if p3 = 107 then
68844: LD_VAR 0 3
68848: PUSH
68849: LD_INT 107
68851: EQUAL
68852: IFFALSE 68862
// sBomb := true ;
68854: LD_ADDR_EXP 86
68858: PUSH
68859: LD_INT 1
68861: ST_TO_ADDR
// if p3 = 108 then
68862: LD_VAR 0 3
68866: PUSH
68867: LD_INT 108
68869: EQUAL
68870: IFFALSE 68880
// sWound := true ;
68872: LD_ADDR_EXP 94
68876: PUSH
68877: LD_INT 1
68879: ST_TO_ADDR
// if p3 = 109 then
68880: LD_VAR 0 3
68884: PUSH
68885: LD_INT 109
68887: EQUAL
68888: IFFALSE 68898
// sBetray := true ;
68890: LD_ADDR_EXP 98
68894: PUSH
68895: LD_INT 1
68897: ST_TO_ADDR
// if p3 = 110 then
68898: LD_VAR 0 3
68902: PUSH
68903: LD_INT 110
68905: EQUAL
68906: IFFALSE 68916
// sContamin := true ;
68908: LD_ADDR_EXP 99
68912: PUSH
68913: LD_INT 1
68915: ST_TO_ADDR
// if p3 = 111 then
68916: LD_VAR 0 3
68920: PUSH
68921: LD_INT 111
68923: EQUAL
68924: IFFALSE 68934
// sOil := true ;
68926: LD_ADDR_EXP 101
68930: PUSH
68931: LD_INT 1
68933: ST_TO_ADDR
// if p3 = 112 then
68934: LD_VAR 0 3
68938: PUSH
68939: LD_INT 112
68941: EQUAL
68942: IFFALSE 68952
// sStu := true ;
68944: LD_ADDR_EXP 105
68948: PUSH
68949: LD_INT 1
68951: ST_TO_ADDR
// if p3 = 113 then
68952: LD_VAR 0 3
68956: PUSH
68957: LD_INT 113
68959: EQUAL
68960: IFFALSE 68970
// sBazooka := true ;
68962: LD_ADDR_EXP 108
68966: PUSH
68967: LD_INT 1
68969: ST_TO_ADDR
// if p3 = 114 then
68970: LD_VAR 0 3
68974: PUSH
68975: LD_INT 114
68977: EQUAL
68978: IFFALSE 68988
// sMortar := true ;
68980: LD_ADDR_EXP 109
68984: PUSH
68985: LD_INT 1
68987: ST_TO_ADDR
// if p3 = 115 then
68988: LD_VAR 0 3
68992: PUSH
68993: LD_INT 115
68995: EQUAL
68996: IFFALSE 69006
// sRanger := true ;
68998: LD_ADDR_EXP 119
69002: PUSH
69003: LD_INT 1
69005: ST_TO_ADDR
// if p3 = 116 then
69006: LD_VAR 0 3
69010: PUSH
69011: LD_INT 116
69013: EQUAL
69014: IFFALSE 69024
// sComputer := true ;
69016: LD_ADDR_EXP 120
69020: PUSH
69021: LD_INT 1
69023: ST_TO_ADDR
// if p3 = 117 then
69024: LD_VAR 0 3
69028: PUSH
69029: LD_INT 117
69031: EQUAL
69032: IFFALSE 69042
// s30 := true ;
69034: LD_ADDR_EXP 121
69038: PUSH
69039: LD_INT 1
69041: ST_TO_ADDR
// if p3 = 118 then
69042: LD_VAR 0 3
69046: PUSH
69047: LD_INT 118
69049: EQUAL
69050: IFFALSE 69060
// s60 := true ;
69052: LD_ADDR_EXP 122
69056: PUSH
69057: LD_INT 1
69059: ST_TO_ADDR
// end ; if p2 = stream_mode then
69060: LD_VAR 0 2
69064: PUSH
69065: LD_INT 101
69067: EQUAL
69068: IFFALSE 69196
// begin case p3 of 1 :
69070: LD_VAR 0 3
69074: PUSH
69075: LD_INT 1
69077: DOUBLE
69078: EQUAL
69079: IFTRUE 69083
69081: GO 69090
69083: POP
// hHackUnlimitedResources ; 2 :
69084: CALL 81294 0 0
69088: GO 69196
69090: LD_INT 2
69092: DOUBLE
69093: EQUAL
69094: IFTRUE 69098
69096: GO 69105
69098: POP
// hHackSetLevel10 ; 3 :
69099: CALL 81427 0 0
69103: GO 69196
69105: LD_INT 3
69107: DOUBLE
69108: EQUAL
69109: IFTRUE 69113
69111: GO 69120
69113: POP
// hHackSetLevel10YourUnits ; 4 :
69114: CALL 81512 0 0
69118: GO 69196
69120: LD_INT 4
69122: DOUBLE
69123: EQUAL
69124: IFTRUE 69128
69126: GO 69135
69128: POP
// hHackInvincible ; 5 :
69129: CALL 81960 0 0
69133: GO 69196
69135: LD_INT 5
69137: DOUBLE
69138: EQUAL
69139: IFTRUE 69143
69141: GO 69150
69143: POP
// hHackInvisible ; 6 :
69144: CALL 82071 0 0
69148: GO 69196
69150: LD_INT 6
69152: DOUBLE
69153: EQUAL
69154: IFTRUE 69158
69156: GO 69165
69158: POP
// hHackChangeYourSide ; 7 :
69159: CALL 82128 0 0
69163: GO 69196
69165: LD_INT 7
69167: DOUBLE
69168: EQUAL
69169: IFTRUE 69173
69171: GO 69180
69173: POP
// hHackChangeUnitSide ; 8 :
69174: CALL 82170 0 0
69178: GO 69196
69180: LD_INT 8
69182: DOUBLE
69183: EQUAL
69184: IFTRUE 69188
69186: GO 69195
69188: POP
// hHackFog ; end ;
69189: CALL 82271 0 0
69193: GO 69196
69195: POP
// end ; end ;
69196: LD_VAR 0 7
69200: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
69201: GO 69203
69203: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69204: LD_STRING initStreamRollete();
69206: PPUSH
69207: CALL_OW 559
// InitStreamMode ;
69211: CALL 69223 0 0
// DefineStreamItems ( false ) ;
69215: LD_INT 0
69217: PPUSH
69218: CALL 69687 0 1
// end ;
69222: END
// function InitStreamMode ; begin
69223: LD_INT 0
69225: PPUSH
// streamModeActive := false ;
69226: LD_ADDR_EXP 66
69230: PUSH
69231: LD_INT 0
69233: ST_TO_ADDR
// normalCounter := 36 ;
69234: LD_ADDR_EXP 67
69238: PUSH
69239: LD_INT 36
69241: ST_TO_ADDR
// hardcoreCounter := 18 ;
69242: LD_ADDR_EXP 68
69246: PUSH
69247: LD_INT 18
69249: ST_TO_ADDR
// sRocket := false ;
69250: LD_ADDR_EXP 71
69254: PUSH
69255: LD_INT 0
69257: ST_TO_ADDR
// sSpeed := false ;
69258: LD_ADDR_EXP 70
69262: PUSH
69263: LD_INT 0
69265: ST_TO_ADDR
// sEngine := false ;
69266: LD_ADDR_EXP 72
69270: PUSH
69271: LD_INT 0
69273: ST_TO_ADDR
// sSpec := false ;
69274: LD_ADDR_EXP 69
69278: PUSH
69279: LD_INT 0
69281: ST_TO_ADDR
// sLevel := false ;
69282: LD_ADDR_EXP 73
69286: PUSH
69287: LD_INT 0
69289: ST_TO_ADDR
// sArmoury := false ;
69290: LD_ADDR_EXP 74
69294: PUSH
69295: LD_INT 0
69297: ST_TO_ADDR
// sRadar := false ;
69298: LD_ADDR_EXP 75
69302: PUSH
69303: LD_INT 0
69305: ST_TO_ADDR
// sBunker := false ;
69306: LD_ADDR_EXP 76
69310: PUSH
69311: LD_INT 0
69313: ST_TO_ADDR
// sHack := false ;
69314: LD_ADDR_EXP 77
69318: PUSH
69319: LD_INT 0
69321: ST_TO_ADDR
// sFire := false ;
69322: LD_ADDR_EXP 78
69326: PUSH
69327: LD_INT 0
69329: ST_TO_ADDR
// sRefresh := false ;
69330: LD_ADDR_EXP 79
69334: PUSH
69335: LD_INT 0
69337: ST_TO_ADDR
// sExp := false ;
69338: LD_ADDR_EXP 80
69342: PUSH
69343: LD_INT 0
69345: ST_TO_ADDR
// sDepot := false ;
69346: LD_ADDR_EXP 81
69350: PUSH
69351: LD_INT 0
69353: ST_TO_ADDR
// sFlag := false ;
69354: LD_ADDR_EXP 82
69358: PUSH
69359: LD_INT 0
69361: ST_TO_ADDR
// sKamikadze := false ;
69362: LD_ADDR_EXP 90
69366: PUSH
69367: LD_INT 0
69369: ST_TO_ADDR
// sTroll := false ;
69370: LD_ADDR_EXP 91
69374: PUSH
69375: LD_INT 0
69377: ST_TO_ADDR
// sSlow := false ;
69378: LD_ADDR_EXP 92
69382: PUSH
69383: LD_INT 0
69385: ST_TO_ADDR
// sLack := false ;
69386: LD_ADDR_EXP 93
69390: PUSH
69391: LD_INT 0
69393: ST_TO_ADDR
// sTank := false ;
69394: LD_ADDR_EXP 95
69398: PUSH
69399: LD_INT 0
69401: ST_TO_ADDR
// sRemote := false ;
69402: LD_ADDR_EXP 96
69406: PUSH
69407: LD_INT 0
69409: ST_TO_ADDR
// sPowell := false ;
69410: LD_ADDR_EXP 97
69414: PUSH
69415: LD_INT 0
69417: ST_TO_ADDR
// sTeleport := false ;
69418: LD_ADDR_EXP 100
69422: PUSH
69423: LD_INT 0
69425: ST_TO_ADDR
// sOilTower := false ;
69426: LD_ADDR_EXP 102
69430: PUSH
69431: LD_INT 0
69433: ST_TO_ADDR
// sShovel := false ;
69434: LD_ADDR_EXP 103
69438: PUSH
69439: LD_INT 0
69441: ST_TO_ADDR
// sSheik := false ;
69442: LD_ADDR_EXP 104
69446: PUSH
69447: LD_INT 0
69449: ST_TO_ADDR
// sEarthquake := false ;
69450: LD_ADDR_EXP 106
69454: PUSH
69455: LD_INT 0
69457: ST_TO_ADDR
// sAI := false ;
69458: LD_ADDR_EXP 107
69462: PUSH
69463: LD_INT 0
69465: ST_TO_ADDR
// sCargo := false ;
69466: LD_ADDR_EXP 110
69470: PUSH
69471: LD_INT 0
69473: ST_TO_ADDR
// sDLaser := false ;
69474: LD_ADDR_EXP 111
69478: PUSH
69479: LD_INT 0
69481: ST_TO_ADDR
// sExchange := false ;
69482: LD_ADDR_EXP 112
69486: PUSH
69487: LD_INT 0
69489: ST_TO_ADDR
// sFac := false ;
69490: LD_ADDR_EXP 113
69494: PUSH
69495: LD_INT 0
69497: ST_TO_ADDR
// sPower := false ;
69498: LD_ADDR_EXP 114
69502: PUSH
69503: LD_INT 0
69505: ST_TO_ADDR
// sRandom := false ;
69506: LD_ADDR_EXP 115
69510: PUSH
69511: LD_INT 0
69513: ST_TO_ADDR
// sShield := false ;
69514: LD_ADDR_EXP 116
69518: PUSH
69519: LD_INT 0
69521: ST_TO_ADDR
// sTime := false ;
69522: LD_ADDR_EXP 117
69526: PUSH
69527: LD_INT 0
69529: ST_TO_ADDR
// sTools := false ;
69530: LD_ADDR_EXP 118
69534: PUSH
69535: LD_INT 0
69537: ST_TO_ADDR
// sSold := false ;
69538: LD_ADDR_EXP 83
69542: PUSH
69543: LD_INT 0
69545: ST_TO_ADDR
// sDiff := false ;
69546: LD_ADDR_EXP 84
69550: PUSH
69551: LD_INT 0
69553: ST_TO_ADDR
// sFog := false ;
69554: LD_ADDR_EXP 87
69558: PUSH
69559: LD_INT 0
69561: ST_TO_ADDR
// sReset := false ;
69562: LD_ADDR_EXP 88
69566: PUSH
69567: LD_INT 0
69569: ST_TO_ADDR
// sSun := false ;
69570: LD_ADDR_EXP 89
69574: PUSH
69575: LD_INT 0
69577: ST_TO_ADDR
// sTiger := false ;
69578: LD_ADDR_EXP 85
69582: PUSH
69583: LD_INT 0
69585: ST_TO_ADDR
// sBomb := false ;
69586: LD_ADDR_EXP 86
69590: PUSH
69591: LD_INT 0
69593: ST_TO_ADDR
// sWound := false ;
69594: LD_ADDR_EXP 94
69598: PUSH
69599: LD_INT 0
69601: ST_TO_ADDR
// sBetray := false ;
69602: LD_ADDR_EXP 98
69606: PUSH
69607: LD_INT 0
69609: ST_TO_ADDR
// sContamin := false ;
69610: LD_ADDR_EXP 99
69614: PUSH
69615: LD_INT 0
69617: ST_TO_ADDR
// sOil := false ;
69618: LD_ADDR_EXP 101
69622: PUSH
69623: LD_INT 0
69625: ST_TO_ADDR
// sStu := false ;
69626: LD_ADDR_EXP 105
69630: PUSH
69631: LD_INT 0
69633: ST_TO_ADDR
// sBazooka := false ;
69634: LD_ADDR_EXP 108
69638: PUSH
69639: LD_INT 0
69641: ST_TO_ADDR
// sMortar := false ;
69642: LD_ADDR_EXP 109
69646: PUSH
69647: LD_INT 0
69649: ST_TO_ADDR
// sRanger := false ;
69650: LD_ADDR_EXP 119
69654: PUSH
69655: LD_INT 0
69657: ST_TO_ADDR
// sComputer := false ;
69658: LD_ADDR_EXP 120
69662: PUSH
69663: LD_INT 0
69665: ST_TO_ADDR
// s30 := false ;
69666: LD_ADDR_EXP 121
69670: PUSH
69671: LD_INT 0
69673: ST_TO_ADDR
// s60 := false ;
69674: LD_ADDR_EXP 122
69678: PUSH
69679: LD_INT 0
69681: ST_TO_ADDR
// end ;
69682: LD_VAR 0 1
69686: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
69687: LD_INT 0
69689: PPUSH
69690: PPUSH
69691: PPUSH
69692: PPUSH
69693: PPUSH
69694: PPUSH
69695: PPUSH
// result := [ ] ;
69696: LD_ADDR_VAR 0 2
69700: PUSH
69701: EMPTY
69702: ST_TO_ADDR
// if campaign_id = 1 then
69703: LD_OWVAR 69
69707: PUSH
69708: LD_INT 1
69710: EQUAL
69711: IFFALSE 72877
// begin case mission_number of 1 :
69713: LD_OWVAR 70
69717: PUSH
69718: LD_INT 1
69720: DOUBLE
69721: EQUAL
69722: IFTRUE 69726
69724: GO 69802
69726: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
69727: LD_ADDR_VAR 0 2
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: LD_INT 4
69737: PUSH
69738: LD_INT 11
69740: PUSH
69741: LD_INT 12
69743: PUSH
69744: LD_INT 15
69746: PUSH
69747: LD_INT 16
69749: PUSH
69750: LD_INT 22
69752: PUSH
69753: LD_INT 23
69755: PUSH
69756: LD_INT 26
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 101
69772: PUSH
69773: LD_INT 102
69775: PUSH
69776: LD_INT 106
69778: PUSH
69779: LD_INT 116
69781: PUSH
69782: LD_INT 117
69784: PUSH
69785: LD_INT 118
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: ST_TO_ADDR
69800: GO 72875
69802: LD_INT 2
69804: DOUBLE
69805: EQUAL
69806: IFTRUE 69810
69808: GO 69894
69810: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
69811: LD_ADDR_VAR 0 2
69815: PUSH
69816: LD_INT 2
69818: PUSH
69819: LD_INT 4
69821: PUSH
69822: LD_INT 11
69824: PUSH
69825: LD_INT 12
69827: PUSH
69828: LD_INT 15
69830: PUSH
69831: LD_INT 16
69833: PUSH
69834: LD_INT 22
69836: PUSH
69837: LD_INT 23
69839: PUSH
69840: LD_INT 26
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 101
69856: PUSH
69857: LD_INT 102
69859: PUSH
69860: LD_INT 105
69862: PUSH
69863: LD_INT 106
69865: PUSH
69866: LD_INT 108
69868: PUSH
69869: LD_INT 116
69871: PUSH
69872: LD_INT 117
69874: PUSH
69875: LD_INT 118
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: ST_TO_ADDR
69892: GO 72875
69894: LD_INT 3
69896: DOUBLE
69897: EQUAL
69898: IFTRUE 69902
69900: GO 69990
69902: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
69903: LD_ADDR_VAR 0 2
69907: PUSH
69908: LD_INT 2
69910: PUSH
69911: LD_INT 4
69913: PUSH
69914: LD_INT 5
69916: PUSH
69917: LD_INT 11
69919: PUSH
69920: LD_INT 12
69922: PUSH
69923: LD_INT 15
69925: PUSH
69926: LD_INT 16
69928: PUSH
69929: LD_INT 22
69931: PUSH
69932: LD_INT 26
69934: PUSH
69935: LD_INT 36
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 101
69952: PUSH
69953: LD_INT 102
69955: PUSH
69956: LD_INT 105
69958: PUSH
69959: LD_INT 106
69961: PUSH
69962: LD_INT 108
69964: PUSH
69965: LD_INT 116
69967: PUSH
69968: LD_INT 117
69970: PUSH
69971: LD_INT 118
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: ST_TO_ADDR
69988: GO 72875
69990: LD_INT 4
69992: DOUBLE
69993: EQUAL
69994: IFTRUE 69998
69996: GO 70094
69998: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
69999: LD_ADDR_VAR 0 2
70003: PUSH
70004: LD_INT 2
70006: PUSH
70007: LD_INT 4
70009: PUSH
70010: LD_INT 5
70012: PUSH
70013: LD_INT 8
70015: PUSH
70016: LD_INT 11
70018: PUSH
70019: LD_INT 12
70021: PUSH
70022: LD_INT 15
70024: PUSH
70025: LD_INT 16
70027: PUSH
70028: LD_INT 22
70030: PUSH
70031: LD_INT 23
70033: PUSH
70034: LD_INT 26
70036: PUSH
70037: LD_INT 36
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 101
70056: PUSH
70057: LD_INT 102
70059: PUSH
70060: LD_INT 105
70062: PUSH
70063: LD_INT 106
70065: PUSH
70066: LD_INT 108
70068: PUSH
70069: LD_INT 116
70071: PUSH
70072: LD_INT 117
70074: PUSH
70075: LD_INT 118
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: ST_TO_ADDR
70092: GO 72875
70094: LD_INT 5
70096: DOUBLE
70097: EQUAL
70098: IFTRUE 70102
70100: GO 70214
70102: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
70103: LD_ADDR_VAR 0 2
70107: PUSH
70108: LD_INT 2
70110: PUSH
70111: LD_INT 4
70113: PUSH
70114: LD_INT 5
70116: PUSH
70117: LD_INT 6
70119: PUSH
70120: LD_INT 8
70122: PUSH
70123: LD_INT 11
70125: PUSH
70126: LD_INT 12
70128: PUSH
70129: LD_INT 15
70131: PUSH
70132: LD_INT 16
70134: PUSH
70135: LD_INT 22
70137: PUSH
70138: LD_INT 23
70140: PUSH
70141: LD_INT 25
70143: PUSH
70144: LD_INT 26
70146: PUSH
70147: LD_INT 36
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 101
70168: PUSH
70169: LD_INT 102
70171: PUSH
70172: LD_INT 105
70174: PUSH
70175: LD_INT 106
70177: PUSH
70178: LD_INT 108
70180: PUSH
70181: LD_INT 109
70183: PUSH
70184: LD_INT 112
70186: PUSH
70187: LD_INT 116
70189: PUSH
70190: LD_INT 117
70192: PUSH
70193: LD_INT 118
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: ST_TO_ADDR
70212: GO 72875
70214: LD_INT 6
70216: DOUBLE
70217: EQUAL
70218: IFTRUE 70222
70220: GO 70354
70222: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
70223: LD_ADDR_VAR 0 2
70227: PUSH
70228: LD_INT 2
70230: PUSH
70231: LD_INT 4
70233: PUSH
70234: LD_INT 5
70236: PUSH
70237: LD_INT 6
70239: PUSH
70240: LD_INT 8
70242: PUSH
70243: LD_INT 11
70245: PUSH
70246: LD_INT 12
70248: PUSH
70249: LD_INT 15
70251: PUSH
70252: LD_INT 16
70254: PUSH
70255: LD_INT 20
70257: PUSH
70258: LD_INT 21
70260: PUSH
70261: LD_INT 22
70263: PUSH
70264: LD_INT 23
70266: PUSH
70267: LD_INT 25
70269: PUSH
70270: LD_INT 26
70272: PUSH
70273: LD_INT 30
70275: PUSH
70276: LD_INT 31
70278: PUSH
70279: LD_INT 32
70281: PUSH
70282: LD_INT 36
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 101
70308: PUSH
70309: LD_INT 102
70311: PUSH
70312: LD_INT 105
70314: PUSH
70315: LD_INT 106
70317: PUSH
70318: LD_INT 108
70320: PUSH
70321: LD_INT 109
70323: PUSH
70324: LD_INT 112
70326: PUSH
70327: LD_INT 116
70329: PUSH
70330: LD_INT 117
70332: PUSH
70333: LD_INT 118
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: ST_TO_ADDR
70352: GO 72875
70354: LD_INT 7
70356: DOUBLE
70357: EQUAL
70358: IFTRUE 70362
70360: GO 70474
70362: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
70363: LD_ADDR_VAR 0 2
70367: PUSH
70368: LD_INT 2
70370: PUSH
70371: LD_INT 4
70373: PUSH
70374: LD_INT 5
70376: PUSH
70377: LD_INT 7
70379: PUSH
70380: LD_INT 11
70382: PUSH
70383: LD_INT 12
70385: PUSH
70386: LD_INT 15
70388: PUSH
70389: LD_INT 16
70391: PUSH
70392: LD_INT 20
70394: PUSH
70395: LD_INT 21
70397: PUSH
70398: LD_INT 22
70400: PUSH
70401: LD_INT 23
70403: PUSH
70404: LD_INT 25
70406: PUSH
70407: LD_INT 26
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 101
70428: PUSH
70429: LD_INT 102
70431: PUSH
70432: LD_INT 103
70434: PUSH
70435: LD_INT 105
70437: PUSH
70438: LD_INT 106
70440: PUSH
70441: LD_INT 108
70443: PUSH
70444: LD_INT 112
70446: PUSH
70447: LD_INT 116
70449: PUSH
70450: LD_INT 117
70452: PUSH
70453: LD_INT 118
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: ST_TO_ADDR
70472: GO 72875
70474: LD_INT 8
70476: DOUBLE
70477: EQUAL
70478: IFTRUE 70482
70480: GO 70622
70482: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
70483: LD_ADDR_VAR 0 2
70487: PUSH
70488: LD_INT 2
70490: PUSH
70491: LD_INT 4
70493: PUSH
70494: LD_INT 5
70496: PUSH
70497: LD_INT 6
70499: PUSH
70500: LD_INT 7
70502: PUSH
70503: LD_INT 8
70505: PUSH
70506: LD_INT 11
70508: PUSH
70509: LD_INT 12
70511: PUSH
70512: LD_INT 15
70514: PUSH
70515: LD_INT 16
70517: PUSH
70518: LD_INT 20
70520: PUSH
70521: LD_INT 21
70523: PUSH
70524: LD_INT 22
70526: PUSH
70527: LD_INT 23
70529: PUSH
70530: LD_INT 25
70532: PUSH
70533: LD_INT 26
70535: PUSH
70536: LD_INT 30
70538: PUSH
70539: LD_INT 31
70541: PUSH
70542: LD_INT 32
70544: PUSH
70545: LD_INT 36
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 101
70572: PUSH
70573: LD_INT 102
70575: PUSH
70576: LD_INT 103
70578: PUSH
70579: LD_INT 105
70581: PUSH
70582: LD_INT 106
70584: PUSH
70585: LD_INT 108
70587: PUSH
70588: LD_INT 109
70590: PUSH
70591: LD_INT 112
70593: PUSH
70594: LD_INT 116
70596: PUSH
70597: LD_INT 117
70599: PUSH
70600: LD_INT 118
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: ST_TO_ADDR
70620: GO 72875
70622: LD_INT 9
70624: DOUBLE
70625: EQUAL
70626: IFTRUE 70630
70628: GO 70778
70630: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
70631: LD_ADDR_VAR 0 2
70635: PUSH
70636: LD_INT 2
70638: PUSH
70639: LD_INT 4
70641: PUSH
70642: LD_INT 5
70644: PUSH
70645: LD_INT 6
70647: PUSH
70648: LD_INT 7
70650: PUSH
70651: LD_INT 8
70653: PUSH
70654: LD_INT 11
70656: PUSH
70657: LD_INT 12
70659: PUSH
70660: LD_INT 15
70662: PUSH
70663: LD_INT 16
70665: PUSH
70666: LD_INT 20
70668: PUSH
70669: LD_INT 21
70671: PUSH
70672: LD_INT 22
70674: PUSH
70675: LD_INT 23
70677: PUSH
70678: LD_INT 25
70680: PUSH
70681: LD_INT 26
70683: PUSH
70684: LD_INT 28
70686: PUSH
70687: LD_INT 30
70689: PUSH
70690: LD_INT 31
70692: PUSH
70693: LD_INT 32
70695: PUSH
70696: LD_INT 36
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 101
70724: PUSH
70725: LD_INT 102
70727: PUSH
70728: LD_INT 103
70730: PUSH
70731: LD_INT 105
70733: PUSH
70734: LD_INT 106
70736: PUSH
70737: LD_INT 108
70739: PUSH
70740: LD_INT 109
70742: PUSH
70743: LD_INT 112
70745: PUSH
70746: LD_INT 114
70748: PUSH
70749: LD_INT 116
70751: PUSH
70752: LD_INT 117
70754: PUSH
70755: LD_INT 118
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: ST_TO_ADDR
70776: GO 72875
70778: LD_INT 10
70780: DOUBLE
70781: EQUAL
70782: IFTRUE 70786
70784: GO 70982
70786: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
70787: LD_ADDR_VAR 0 2
70791: PUSH
70792: LD_INT 2
70794: PUSH
70795: LD_INT 4
70797: PUSH
70798: LD_INT 5
70800: PUSH
70801: LD_INT 6
70803: PUSH
70804: LD_INT 7
70806: PUSH
70807: LD_INT 8
70809: PUSH
70810: LD_INT 9
70812: PUSH
70813: LD_INT 10
70815: PUSH
70816: LD_INT 11
70818: PUSH
70819: LD_INT 12
70821: PUSH
70822: LD_INT 13
70824: PUSH
70825: LD_INT 14
70827: PUSH
70828: LD_INT 15
70830: PUSH
70831: LD_INT 16
70833: PUSH
70834: LD_INT 17
70836: PUSH
70837: LD_INT 18
70839: PUSH
70840: LD_INT 19
70842: PUSH
70843: LD_INT 20
70845: PUSH
70846: LD_INT 21
70848: PUSH
70849: LD_INT 22
70851: PUSH
70852: LD_INT 23
70854: PUSH
70855: LD_INT 24
70857: PUSH
70858: LD_INT 25
70860: PUSH
70861: LD_INT 26
70863: PUSH
70864: LD_INT 28
70866: PUSH
70867: LD_INT 30
70869: PUSH
70870: LD_INT 31
70872: PUSH
70873: LD_INT 32
70875: PUSH
70876: LD_INT 36
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 101
70912: PUSH
70913: LD_INT 102
70915: PUSH
70916: LD_INT 103
70918: PUSH
70919: LD_INT 104
70921: PUSH
70922: LD_INT 105
70924: PUSH
70925: LD_INT 106
70927: PUSH
70928: LD_INT 107
70930: PUSH
70931: LD_INT 108
70933: PUSH
70934: LD_INT 109
70936: PUSH
70937: LD_INT 110
70939: PUSH
70940: LD_INT 111
70942: PUSH
70943: LD_INT 112
70945: PUSH
70946: LD_INT 114
70948: PUSH
70949: LD_INT 116
70951: PUSH
70952: LD_INT 117
70954: PUSH
70955: LD_INT 118
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: ST_TO_ADDR
70980: GO 72875
70982: LD_INT 11
70984: DOUBLE
70985: EQUAL
70986: IFTRUE 70990
70988: GO 71194
70990: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
70991: LD_ADDR_VAR 0 2
70995: PUSH
70996: LD_INT 2
70998: PUSH
70999: LD_INT 3
71001: PUSH
71002: LD_INT 4
71004: PUSH
71005: LD_INT 5
71007: PUSH
71008: LD_INT 6
71010: PUSH
71011: LD_INT 7
71013: PUSH
71014: LD_INT 8
71016: PUSH
71017: LD_INT 9
71019: PUSH
71020: LD_INT 10
71022: PUSH
71023: LD_INT 11
71025: PUSH
71026: LD_INT 12
71028: PUSH
71029: LD_INT 13
71031: PUSH
71032: LD_INT 14
71034: PUSH
71035: LD_INT 15
71037: PUSH
71038: LD_INT 16
71040: PUSH
71041: LD_INT 17
71043: PUSH
71044: LD_INT 18
71046: PUSH
71047: LD_INT 19
71049: PUSH
71050: LD_INT 20
71052: PUSH
71053: LD_INT 21
71055: PUSH
71056: LD_INT 22
71058: PUSH
71059: LD_INT 23
71061: PUSH
71062: LD_INT 24
71064: PUSH
71065: LD_INT 25
71067: PUSH
71068: LD_INT 26
71070: PUSH
71071: LD_INT 28
71073: PUSH
71074: LD_INT 30
71076: PUSH
71077: LD_INT 31
71079: PUSH
71080: LD_INT 32
71082: PUSH
71083: LD_INT 34
71085: PUSH
71086: LD_INT 36
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 101
71124: PUSH
71125: LD_INT 102
71127: PUSH
71128: LD_INT 103
71130: PUSH
71131: LD_INT 104
71133: PUSH
71134: LD_INT 105
71136: PUSH
71137: LD_INT 106
71139: PUSH
71140: LD_INT 107
71142: PUSH
71143: LD_INT 108
71145: PUSH
71146: LD_INT 109
71148: PUSH
71149: LD_INT 110
71151: PUSH
71152: LD_INT 111
71154: PUSH
71155: LD_INT 112
71157: PUSH
71158: LD_INT 114
71160: PUSH
71161: LD_INT 116
71163: PUSH
71164: LD_INT 117
71166: PUSH
71167: LD_INT 118
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: ST_TO_ADDR
71192: GO 72875
71194: LD_INT 12
71196: DOUBLE
71197: EQUAL
71198: IFTRUE 71202
71200: GO 71422
71202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
71203: LD_ADDR_VAR 0 2
71207: PUSH
71208: LD_INT 1
71210: PUSH
71211: LD_INT 2
71213: PUSH
71214: LD_INT 3
71216: PUSH
71217: LD_INT 4
71219: PUSH
71220: LD_INT 5
71222: PUSH
71223: LD_INT 6
71225: PUSH
71226: LD_INT 7
71228: PUSH
71229: LD_INT 8
71231: PUSH
71232: LD_INT 9
71234: PUSH
71235: LD_INT 10
71237: PUSH
71238: LD_INT 11
71240: PUSH
71241: LD_INT 12
71243: PUSH
71244: LD_INT 13
71246: PUSH
71247: LD_INT 14
71249: PUSH
71250: LD_INT 15
71252: PUSH
71253: LD_INT 16
71255: PUSH
71256: LD_INT 17
71258: PUSH
71259: LD_INT 18
71261: PUSH
71262: LD_INT 19
71264: PUSH
71265: LD_INT 20
71267: PUSH
71268: LD_INT 21
71270: PUSH
71271: LD_INT 22
71273: PUSH
71274: LD_INT 23
71276: PUSH
71277: LD_INT 24
71279: PUSH
71280: LD_INT 25
71282: PUSH
71283: LD_INT 26
71285: PUSH
71286: LD_INT 27
71288: PUSH
71289: LD_INT 28
71291: PUSH
71292: LD_INT 30
71294: PUSH
71295: LD_INT 31
71297: PUSH
71298: LD_INT 32
71300: PUSH
71301: LD_INT 33
71303: PUSH
71304: LD_INT 34
71306: PUSH
71307: LD_INT 36
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 101
71348: PUSH
71349: LD_INT 102
71351: PUSH
71352: LD_INT 103
71354: PUSH
71355: LD_INT 104
71357: PUSH
71358: LD_INT 105
71360: PUSH
71361: LD_INT 106
71363: PUSH
71364: LD_INT 107
71366: PUSH
71367: LD_INT 108
71369: PUSH
71370: LD_INT 109
71372: PUSH
71373: LD_INT 110
71375: PUSH
71376: LD_INT 111
71378: PUSH
71379: LD_INT 112
71381: PUSH
71382: LD_INT 113
71384: PUSH
71385: LD_INT 114
71387: PUSH
71388: LD_INT 116
71390: PUSH
71391: LD_INT 117
71393: PUSH
71394: LD_INT 118
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: ST_TO_ADDR
71420: GO 72875
71422: LD_INT 13
71424: DOUBLE
71425: EQUAL
71426: IFTRUE 71430
71428: GO 71638
71430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
71431: LD_ADDR_VAR 0 2
71435: PUSH
71436: LD_INT 1
71438: PUSH
71439: LD_INT 2
71441: PUSH
71442: LD_INT 3
71444: PUSH
71445: LD_INT 4
71447: PUSH
71448: LD_INT 5
71450: PUSH
71451: LD_INT 8
71453: PUSH
71454: LD_INT 9
71456: PUSH
71457: LD_INT 10
71459: PUSH
71460: LD_INT 11
71462: PUSH
71463: LD_INT 12
71465: PUSH
71466: LD_INT 14
71468: PUSH
71469: LD_INT 15
71471: PUSH
71472: LD_INT 16
71474: PUSH
71475: LD_INT 17
71477: PUSH
71478: LD_INT 18
71480: PUSH
71481: LD_INT 19
71483: PUSH
71484: LD_INT 20
71486: PUSH
71487: LD_INT 21
71489: PUSH
71490: LD_INT 22
71492: PUSH
71493: LD_INT 23
71495: PUSH
71496: LD_INT 24
71498: PUSH
71499: LD_INT 25
71501: PUSH
71502: LD_INT 26
71504: PUSH
71505: LD_INT 27
71507: PUSH
71508: LD_INT 28
71510: PUSH
71511: LD_INT 30
71513: PUSH
71514: LD_INT 31
71516: PUSH
71517: LD_INT 32
71519: PUSH
71520: LD_INT 33
71522: PUSH
71523: LD_INT 34
71525: PUSH
71526: LD_INT 36
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 101
71564: PUSH
71565: LD_INT 102
71567: PUSH
71568: LD_INT 103
71570: PUSH
71571: LD_INT 104
71573: PUSH
71574: LD_INT 105
71576: PUSH
71577: LD_INT 106
71579: PUSH
71580: LD_INT 107
71582: PUSH
71583: LD_INT 108
71585: PUSH
71586: LD_INT 109
71588: PUSH
71589: LD_INT 110
71591: PUSH
71592: LD_INT 111
71594: PUSH
71595: LD_INT 112
71597: PUSH
71598: LD_INT 113
71600: PUSH
71601: LD_INT 114
71603: PUSH
71604: LD_INT 116
71606: PUSH
71607: LD_INT 117
71609: PUSH
71610: LD_INT 118
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: ST_TO_ADDR
71636: GO 72875
71638: LD_INT 14
71640: DOUBLE
71641: EQUAL
71642: IFTRUE 71646
71644: GO 71870
71646: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
71647: LD_ADDR_VAR 0 2
71651: PUSH
71652: LD_INT 1
71654: PUSH
71655: LD_INT 2
71657: PUSH
71658: LD_INT 3
71660: PUSH
71661: LD_INT 4
71663: PUSH
71664: LD_INT 5
71666: PUSH
71667: LD_INT 6
71669: PUSH
71670: LD_INT 7
71672: PUSH
71673: LD_INT 8
71675: PUSH
71676: LD_INT 9
71678: PUSH
71679: LD_INT 10
71681: PUSH
71682: LD_INT 11
71684: PUSH
71685: LD_INT 12
71687: PUSH
71688: LD_INT 13
71690: PUSH
71691: LD_INT 14
71693: PUSH
71694: LD_INT 15
71696: PUSH
71697: LD_INT 16
71699: PUSH
71700: LD_INT 17
71702: PUSH
71703: LD_INT 18
71705: PUSH
71706: LD_INT 19
71708: PUSH
71709: LD_INT 20
71711: PUSH
71712: LD_INT 21
71714: PUSH
71715: LD_INT 22
71717: PUSH
71718: LD_INT 23
71720: PUSH
71721: LD_INT 24
71723: PUSH
71724: LD_INT 25
71726: PUSH
71727: LD_INT 26
71729: PUSH
71730: LD_INT 27
71732: PUSH
71733: LD_INT 28
71735: PUSH
71736: LD_INT 29
71738: PUSH
71739: LD_INT 30
71741: PUSH
71742: LD_INT 31
71744: PUSH
71745: LD_INT 32
71747: PUSH
71748: LD_INT 33
71750: PUSH
71751: LD_INT 34
71753: PUSH
71754: LD_INT 36
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 101
71796: PUSH
71797: LD_INT 102
71799: PUSH
71800: LD_INT 103
71802: PUSH
71803: LD_INT 104
71805: PUSH
71806: LD_INT 105
71808: PUSH
71809: LD_INT 106
71811: PUSH
71812: LD_INT 107
71814: PUSH
71815: LD_INT 108
71817: PUSH
71818: LD_INT 109
71820: PUSH
71821: LD_INT 110
71823: PUSH
71824: LD_INT 111
71826: PUSH
71827: LD_INT 112
71829: PUSH
71830: LD_INT 113
71832: PUSH
71833: LD_INT 114
71835: PUSH
71836: LD_INT 116
71838: PUSH
71839: LD_INT 117
71841: PUSH
71842: LD_INT 118
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: ST_TO_ADDR
71868: GO 72875
71870: LD_INT 15
71872: DOUBLE
71873: EQUAL
71874: IFTRUE 71878
71876: GO 72102
71878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
71879: LD_ADDR_VAR 0 2
71883: PUSH
71884: LD_INT 1
71886: PUSH
71887: LD_INT 2
71889: PUSH
71890: LD_INT 3
71892: PUSH
71893: LD_INT 4
71895: PUSH
71896: LD_INT 5
71898: PUSH
71899: LD_INT 6
71901: PUSH
71902: LD_INT 7
71904: PUSH
71905: LD_INT 8
71907: PUSH
71908: LD_INT 9
71910: PUSH
71911: LD_INT 10
71913: PUSH
71914: LD_INT 11
71916: PUSH
71917: LD_INT 12
71919: PUSH
71920: LD_INT 13
71922: PUSH
71923: LD_INT 14
71925: PUSH
71926: LD_INT 15
71928: PUSH
71929: LD_INT 16
71931: PUSH
71932: LD_INT 17
71934: PUSH
71935: LD_INT 18
71937: PUSH
71938: LD_INT 19
71940: PUSH
71941: LD_INT 20
71943: PUSH
71944: LD_INT 21
71946: PUSH
71947: LD_INT 22
71949: PUSH
71950: LD_INT 23
71952: PUSH
71953: LD_INT 24
71955: PUSH
71956: LD_INT 25
71958: PUSH
71959: LD_INT 26
71961: PUSH
71962: LD_INT 27
71964: PUSH
71965: LD_INT 28
71967: PUSH
71968: LD_INT 29
71970: PUSH
71971: LD_INT 30
71973: PUSH
71974: LD_INT 31
71976: PUSH
71977: LD_INT 32
71979: PUSH
71980: LD_INT 33
71982: PUSH
71983: LD_INT 34
71985: PUSH
71986: LD_INT 36
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 101
72028: PUSH
72029: LD_INT 102
72031: PUSH
72032: LD_INT 103
72034: PUSH
72035: LD_INT 104
72037: PUSH
72038: LD_INT 105
72040: PUSH
72041: LD_INT 106
72043: PUSH
72044: LD_INT 107
72046: PUSH
72047: LD_INT 108
72049: PUSH
72050: LD_INT 109
72052: PUSH
72053: LD_INT 110
72055: PUSH
72056: LD_INT 111
72058: PUSH
72059: LD_INT 112
72061: PUSH
72062: LD_INT 113
72064: PUSH
72065: LD_INT 114
72067: PUSH
72068: LD_INT 116
72070: PUSH
72071: LD_INT 117
72073: PUSH
72074: LD_INT 118
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: ST_TO_ADDR
72100: GO 72875
72102: LD_INT 16
72104: DOUBLE
72105: EQUAL
72106: IFTRUE 72110
72108: GO 72246
72110: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
72111: LD_ADDR_VAR 0 2
72115: PUSH
72116: LD_INT 2
72118: PUSH
72119: LD_INT 4
72121: PUSH
72122: LD_INT 5
72124: PUSH
72125: LD_INT 7
72127: PUSH
72128: LD_INT 11
72130: PUSH
72131: LD_INT 12
72133: PUSH
72134: LD_INT 15
72136: PUSH
72137: LD_INT 16
72139: PUSH
72140: LD_INT 20
72142: PUSH
72143: LD_INT 21
72145: PUSH
72146: LD_INT 22
72148: PUSH
72149: LD_INT 23
72151: PUSH
72152: LD_INT 25
72154: PUSH
72155: LD_INT 26
72157: PUSH
72158: LD_INT 30
72160: PUSH
72161: LD_INT 31
72163: PUSH
72164: LD_INT 32
72166: PUSH
72167: LD_INT 33
72169: PUSH
72170: LD_INT 34
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 101
72196: PUSH
72197: LD_INT 102
72199: PUSH
72200: LD_INT 103
72202: PUSH
72203: LD_INT 106
72205: PUSH
72206: LD_INT 108
72208: PUSH
72209: LD_INT 112
72211: PUSH
72212: LD_INT 113
72214: PUSH
72215: LD_INT 114
72217: PUSH
72218: LD_INT 116
72220: PUSH
72221: LD_INT 117
72223: PUSH
72224: LD_INT 118
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: ST_TO_ADDR
72244: GO 72875
72246: LD_INT 17
72248: DOUBLE
72249: EQUAL
72250: IFTRUE 72254
72252: GO 72478
72254: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
72255: LD_ADDR_VAR 0 2
72259: PUSH
72260: LD_INT 1
72262: PUSH
72263: LD_INT 2
72265: PUSH
72266: LD_INT 3
72268: PUSH
72269: LD_INT 4
72271: PUSH
72272: LD_INT 5
72274: PUSH
72275: LD_INT 6
72277: PUSH
72278: LD_INT 7
72280: PUSH
72281: LD_INT 8
72283: PUSH
72284: LD_INT 9
72286: PUSH
72287: LD_INT 10
72289: PUSH
72290: LD_INT 11
72292: PUSH
72293: LD_INT 12
72295: PUSH
72296: LD_INT 13
72298: PUSH
72299: LD_INT 14
72301: PUSH
72302: LD_INT 15
72304: PUSH
72305: LD_INT 16
72307: PUSH
72308: LD_INT 17
72310: PUSH
72311: LD_INT 18
72313: PUSH
72314: LD_INT 19
72316: PUSH
72317: LD_INT 20
72319: PUSH
72320: LD_INT 21
72322: PUSH
72323: LD_INT 22
72325: PUSH
72326: LD_INT 23
72328: PUSH
72329: LD_INT 24
72331: PUSH
72332: LD_INT 25
72334: PUSH
72335: LD_INT 26
72337: PUSH
72338: LD_INT 27
72340: PUSH
72341: LD_INT 28
72343: PUSH
72344: LD_INT 29
72346: PUSH
72347: LD_INT 30
72349: PUSH
72350: LD_INT 31
72352: PUSH
72353: LD_INT 32
72355: PUSH
72356: LD_INT 33
72358: PUSH
72359: LD_INT 34
72361: PUSH
72362: LD_INT 36
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 101
72404: PUSH
72405: LD_INT 102
72407: PUSH
72408: LD_INT 103
72410: PUSH
72411: LD_INT 104
72413: PUSH
72414: LD_INT 105
72416: PUSH
72417: LD_INT 106
72419: PUSH
72420: LD_INT 107
72422: PUSH
72423: LD_INT 108
72425: PUSH
72426: LD_INT 109
72428: PUSH
72429: LD_INT 110
72431: PUSH
72432: LD_INT 111
72434: PUSH
72435: LD_INT 112
72437: PUSH
72438: LD_INT 113
72440: PUSH
72441: LD_INT 114
72443: PUSH
72444: LD_INT 116
72446: PUSH
72447: LD_INT 117
72449: PUSH
72450: LD_INT 118
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: ST_TO_ADDR
72476: GO 72875
72478: LD_INT 18
72480: DOUBLE
72481: EQUAL
72482: IFTRUE 72486
72484: GO 72634
72486: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
72487: LD_ADDR_VAR 0 2
72491: PUSH
72492: LD_INT 2
72494: PUSH
72495: LD_INT 4
72497: PUSH
72498: LD_INT 5
72500: PUSH
72501: LD_INT 7
72503: PUSH
72504: LD_INT 11
72506: PUSH
72507: LD_INT 12
72509: PUSH
72510: LD_INT 15
72512: PUSH
72513: LD_INT 16
72515: PUSH
72516: LD_INT 20
72518: PUSH
72519: LD_INT 21
72521: PUSH
72522: LD_INT 22
72524: PUSH
72525: LD_INT 23
72527: PUSH
72528: LD_INT 25
72530: PUSH
72531: LD_INT 26
72533: PUSH
72534: LD_INT 30
72536: PUSH
72537: LD_INT 31
72539: PUSH
72540: LD_INT 32
72542: PUSH
72543: LD_INT 33
72545: PUSH
72546: LD_INT 34
72548: PUSH
72549: LD_INT 35
72551: PUSH
72552: LD_INT 36
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 101
72580: PUSH
72581: LD_INT 102
72583: PUSH
72584: LD_INT 103
72586: PUSH
72587: LD_INT 106
72589: PUSH
72590: LD_INT 108
72592: PUSH
72593: LD_INT 112
72595: PUSH
72596: LD_INT 113
72598: PUSH
72599: LD_INT 114
72601: PUSH
72602: LD_INT 115
72604: PUSH
72605: LD_INT 116
72607: PUSH
72608: LD_INT 117
72610: PUSH
72611: LD_INT 118
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: ST_TO_ADDR
72632: GO 72875
72634: LD_INT 19
72636: DOUBLE
72637: EQUAL
72638: IFTRUE 72642
72640: GO 72874
72642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
72643: LD_ADDR_VAR 0 2
72647: PUSH
72648: LD_INT 1
72650: PUSH
72651: LD_INT 2
72653: PUSH
72654: LD_INT 3
72656: PUSH
72657: LD_INT 4
72659: PUSH
72660: LD_INT 5
72662: PUSH
72663: LD_INT 6
72665: PUSH
72666: LD_INT 7
72668: PUSH
72669: LD_INT 8
72671: PUSH
72672: LD_INT 9
72674: PUSH
72675: LD_INT 10
72677: PUSH
72678: LD_INT 11
72680: PUSH
72681: LD_INT 12
72683: PUSH
72684: LD_INT 13
72686: PUSH
72687: LD_INT 14
72689: PUSH
72690: LD_INT 15
72692: PUSH
72693: LD_INT 16
72695: PUSH
72696: LD_INT 17
72698: PUSH
72699: LD_INT 18
72701: PUSH
72702: LD_INT 19
72704: PUSH
72705: LD_INT 20
72707: PUSH
72708: LD_INT 21
72710: PUSH
72711: LD_INT 22
72713: PUSH
72714: LD_INT 23
72716: PUSH
72717: LD_INT 24
72719: PUSH
72720: LD_INT 25
72722: PUSH
72723: LD_INT 26
72725: PUSH
72726: LD_INT 27
72728: PUSH
72729: LD_INT 28
72731: PUSH
72732: LD_INT 29
72734: PUSH
72735: LD_INT 30
72737: PUSH
72738: LD_INT 31
72740: PUSH
72741: LD_INT 32
72743: PUSH
72744: LD_INT 33
72746: PUSH
72747: LD_INT 34
72749: PUSH
72750: LD_INT 35
72752: PUSH
72753: LD_INT 36
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 101
72796: PUSH
72797: LD_INT 102
72799: PUSH
72800: LD_INT 103
72802: PUSH
72803: LD_INT 104
72805: PUSH
72806: LD_INT 105
72808: PUSH
72809: LD_INT 106
72811: PUSH
72812: LD_INT 107
72814: PUSH
72815: LD_INT 108
72817: PUSH
72818: LD_INT 109
72820: PUSH
72821: LD_INT 110
72823: PUSH
72824: LD_INT 111
72826: PUSH
72827: LD_INT 112
72829: PUSH
72830: LD_INT 113
72832: PUSH
72833: LD_INT 114
72835: PUSH
72836: LD_INT 115
72838: PUSH
72839: LD_INT 116
72841: PUSH
72842: LD_INT 117
72844: PUSH
72845: LD_INT 118
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: ST_TO_ADDR
72872: GO 72875
72874: POP
// end else
72875: GO 73106
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
72877: LD_ADDR_VAR 0 2
72881: PUSH
72882: LD_INT 1
72884: PUSH
72885: LD_INT 2
72887: PUSH
72888: LD_INT 3
72890: PUSH
72891: LD_INT 4
72893: PUSH
72894: LD_INT 5
72896: PUSH
72897: LD_INT 6
72899: PUSH
72900: LD_INT 7
72902: PUSH
72903: LD_INT 8
72905: PUSH
72906: LD_INT 9
72908: PUSH
72909: LD_INT 10
72911: PUSH
72912: LD_INT 11
72914: PUSH
72915: LD_INT 12
72917: PUSH
72918: LD_INT 13
72920: PUSH
72921: LD_INT 14
72923: PUSH
72924: LD_INT 15
72926: PUSH
72927: LD_INT 16
72929: PUSH
72930: LD_INT 17
72932: PUSH
72933: LD_INT 18
72935: PUSH
72936: LD_INT 19
72938: PUSH
72939: LD_INT 20
72941: PUSH
72942: LD_INT 21
72944: PUSH
72945: LD_INT 22
72947: PUSH
72948: LD_INT 23
72950: PUSH
72951: LD_INT 24
72953: PUSH
72954: LD_INT 25
72956: PUSH
72957: LD_INT 26
72959: PUSH
72960: LD_INT 27
72962: PUSH
72963: LD_INT 28
72965: PUSH
72966: LD_INT 29
72968: PUSH
72969: LD_INT 30
72971: PUSH
72972: LD_INT 31
72974: PUSH
72975: LD_INT 32
72977: PUSH
72978: LD_INT 33
72980: PUSH
72981: LD_INT 34
72983: PUSH
72984: LD_INT 35
72986: PUSH
72987: LD_INT 36
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 101
73030: PUSH
73031: LD_INT 102
73033: PUSH
73034: LD_INT 103
73036: PUSH
73037: LD_INT 104
73039: PUSH
73040: LD_INT 105
73042: PUSH
73043: LD_INT 106
73045: PUSH
73046: LD_INT 107
73048: PUSH
73049: LD_INT 108
73051: PUSH
73052: LD_INT 109
73054: PUSH
73055: LD_INT 110
73057: PUSH
73058: LD_INT 111
73060: PUSH
73061: LD_INT 112
73063: PUSH
73064: LD_INT 113
73066: PUSH
73067: LD_INT 114
73069: PUSH
73070: LD_INT 115
73072: PUSH
73073: LD_INT 116
73075: PUSH
73076: LD_INT 117
73078: PUSH
73079: LD_INT 118
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: ST_TO_ADDR
// if result then
73106: LD_VAR 0 2
73110: IFFALSE 73896
// begin normal :=  ;
73112: LD_ADDR_VAR 0 5
73116: PUSH
73117: LD_STRING 
73119: ST_TO_ADDR
// hardcore :=  ;
73120: LD_ADDR_VAR 0 6
73124: PUSH
73125: LD_STRING 
73127: ST_TO_ADDR
// active :=  ;
73128: LD_ADDR_VAR 0 7
73132: PUSH
73133: LD_STRING 
73135: ST_TO_ADDR
// for i = 1 to normalCounter do
73136: LD_ADDR_VAR 0 8
73140: PUSH
73141: DOUBLE
73142: LD_INT 1
73144: DEC
73145: ST_TO_ADDR
73146: LD_EXP 67
73150: PUSH
73151: FOR_TO
73152: IFFALSE 73253
// begin tmp := 0 ;
73154: LD_ADDR_VAR 0 3
73158: PUSH
73159: LD_STRING 0
73161: ST_TO_ADDR
// if result [ 1 ] then
73162: LD_VAR 0 2
73166: PUSH
73167: LD_INT 1
73169: ARRAY
73170: IFFALSE 73235
// if result [ 1 ] [ 1 ] = i then
73172: LD_VAR 0 2
73176: PUSH
73177: LD_INT 1
73179: ARRAY
73180: PUSH
73181: LD_INT 1
73183: ARRAY
73184: PUSH
73185: LD_VAR 0 8
73189: EQUAL
73190: IFFALSE 73235
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73192: LD_ADDR_VAR 0 2
73196: PUSH
73197: LD_VAR 0 2
73201: PPUSH
73202: LD_INT 1
73204: PPUSH
73205: LD_VAR 0 2
73209: PUSH
73210: LD_INT 1
73212: ARRAY
73213: PPUSH
73214: LD_INT 1
73216: PPUSH
73217: CALL_OW 3
73221: PPUSH
73222: CALL_OW 1
73226: ST_TO_ADDR
// tmp := 1 ;
73227: LD_ADDR_VAR 0 3
73231: PUSH
73232: LD_STRING 1
73234: ST_TO_ADDR
// end ; normal := normal & tmp ;
73235: LD_ADDR_VAR 0 5
73239: PUSH
73240: LD_VAR 0 5
73244: PUSH
73245: LD_VAR 0 3
73249: STR
73250: ST_TO_ADDR
// end ;
73251: GO 73151
73253: POP
73254: POP
// for i = 1 to hardcoreCounter do
73255: LD_ADDR_VAR 0 8
73259: PUSH
73260: DOUBLE
73261: LD_INT 1
73263: DEC
73264: ST_TO_ADDR
73265: LD_EXP 68
73269: PUSH
73270: FOR_TO
73271: IFFALSE 73376
// begin tmp := 0 ;
73273: LD_ADDR_VAR 0 3
73277: PUSH
73278: LD_STRING 0
73280: ST_TO_ADDR
// if result [ 2 ] then
73281: LD_VAR 0 2
73285: PUSH
73286: LD_INT 2
73288: ARRAY
73289: IFFALSE 73358
// if result [ 2 ] [ 1 ] = 100 + i then
73291: LD_VAR 0 2
73295: PUSH
73296: LD_INT 2
73298: ARRAY
73299: PUSH
73300: LD_INT 1
73302: ARRAY
73303: PUSH
73304: LD_INT 100
73306: PUSH
73307: LD_VAR 0 8
73311: PLUS
73312: EQUAL
73313: IFFALSE 73358
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
73315: LD_ADDR_VAR 0 2
73319: PUSH
73320: LD_VAR 0 2
73324: PPUSH
73325: LD_INT 2
73327: PPUSH
73328: LD_VAR 0 2
73332: PUSH
73333: LD_INT 2
73335: ARRAY
73336: PPUSH
73337: LD_INT 1
73339: PPUSH
73340: CALL_OW 3
73344: PPUSH
73345: CALL_OW 1
73349: ST_TO_ADDR
// tmp := 1 ;
73350: LD_ADDR_VAR 0 3
73354: PUSH
73355: LD_STRING 1
73357: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73358: LD_ADDR_VAR 0 6
73362: PUSH
73363: LD_VAR 0 6
73367: PUSH
73368: LD_VAR 0 3
73372: STR
73373: ST_TO_ADDR
// end ;
73374: GO 73270
73376: POP
73377: POP
// if isGameLoad then
73378: LD_VAR 0 1
73382: IFFALSE 73857
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
73384: LD_ADDR_VAR 0 4
73388: PUSH
73389: LD_EXP 71
73393: PUSH
73394: LD_EXP 70
73398: PUSH
73399: LD_EXP 72
73403: PUSH
73404: LD_EXP 69
73408: PUSH
73409: LD_EXP 73
73413: PUSH
73414: LD_EXP 74
73418: PUSH
73419: LD_EXP 75
73423: PUSH
73424: LD_EXP 76
73428: PUSH
73429: LD_EXP 77
73433: PUSH
73434: LD_EXP 78
73438: PUSH
73439: LD_EXP 79
73443: PUSH
73444: LD_EXP 80
73448: PUSH
73449: LD_EXP 81
73453: PUSH
73454: LD_EXP 82
73458: PUSH
73459: LD_EXP 90
73463: PUSH
73464: LD_EXP 91
73468: PUSH
73469: LD_EXP 92
73473: PUSH
73474: LD_EXP 93
73478: PUSH
73479: LD_EXP 95
73483: PUSH
73484: LD_EXP 96
73488: PUSH
73489: LD_EXP 97
73493: PUSH
73494: LD_EXP 100
73498: PUSH
73499: LD_EXP 102
73503: PUSH
73504: LD_EXP 103
73508: PUSH
73509: LD_EXP 104
73513: PUSH
73514: LD_EXP 106
73518: PUSH
73519: LD_EXP 107
73523: PUSH
73524: LD_EXP 110
73528: PUSH
73529: LD_EXP 111
73533: PUSH
73534: LD_EXP 112
73538: PUSH
73539: LD_EXP 113
73543: PUSH
73544: LD_EXP 114
73548: PUSH
73549: LD_EXP 115
73553: PUSH
73554: LD_EXP 116
73558: PUSH
73559: LD_EXP 117
73563: PUSH
73564: LD_EXP 118
73568: PUSH
73569: LD_EXP 83
73573: PUSH
73574: LD_EXP 84
73578: PUSH
73579: LD_EXP 87
73583: PUSH
73584: LD_EXP 88
73588: PUSH
73589: LD_EXP 89
73593: PUSH
73594: LD_EXP 85
73598: PUSH
73599: LD_EXP 86
73603: PUSH
73604: LD_EXP 94
73608: PUSH
73609: LD_EXP 98
73613: PUSH
73614: LD_EXP 99
73618: PUSH
73619: LD_EXP 101
73623: PUSH
73624: LD_EXP 105
73628: PUSH
73629: LD_EXP 108
73633: PUSH
73634: LD_EXP 109
73638: PUSH
73639: LD_EXP 119
73643: PUSH
73644: LD_EXP 120
73648: PUSH
73649: LD_EXP 121
73653: PUSH
73654: LD_EXP 122
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: ST_TO_ADDR
// tmp :=  ;
73715: LD_ADDR_VAR 0 3
73719: PUSH
73720: LD_STRING 
73722: ST_TO_ADDR
// for i = 1 to normalCounter do
73723: LD_ADDR_VAR 0 8
73727: PUSH
73728: DOUBLE
73729: LD_INT 1
73731: DEC
73732: ST_TO_ADDR
73733: LD_EXP 67
73737: PUSH
73738: FOR_TO
73739: IFFALSE 73775
// begin if flags [ i ] then
73741: LD_VAR 0 4
73745: PUSH
73746: LD_VAR 0 8
73750: ARRAY
73751: IFFALSE 73773
// tmp := tmp & i & ; ;
73753: LD_ADDR_VAR 0 3
73757: PUSH
73758: LD_VAR 0 3
73762: PUSH
73763: LD_VAR 0 8
73767: STR
73768: PUSH
73769: LD_STRING ;
73771: STR
73772: ST_TO_ADDR
// end ;
73773: GO 73738
73775: POP
73776: POP
// for i = 1 to hardcoreCounter do
73777: LD_ADDR_VAR 0 8
73781: PUSH
73782: DOUBLE
73783: LD_INT 1
73785: DEC
73786: ST_TO_ADDR
73787: LD_EXP 68
73791: PUSH
73792: FOR_TO
73793: IFFALSE 73839
// begin if flags [ normalCounter + i ] then
73795: LD_VAR 0 4
73799: PUSH
73800: LD_EXP 67
73804: PUSH
73805: LD_VAR 0 8
73809: PLUS
73810: ARRAY
73811: IFFALSE 73837
// tmp := tmp & ( 100 + i ) & ; ;
73813: LD_ADDR_VAR 0 3
73817: PUSH
73818: LD_VAR 0 3
73822: PUSH
73823: LD_INT 100
73825: PUSH
73826: LD_VAR 0 8
73830: PLUS
73831: STR
73832: PUSH
73833: LD_STRING ;
73835: STR
73836: ST_TO_ADDR
// end ;
73837: GO 73792
73839: POP
73840: POP
// if tmp then
73841: LD_VAR 0 3
73845: IFFALSE 73857
// active := tmp ;
73847: LD_ADDR_VAR 0 7
73851: PUSH
73852: LD_VAR 0 3
73856: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
73857: LD_STRING getStreamItemsFromMission("
73859: PUSH
73860: LD_VAR 0 5
73864: STR
73865: PUSH
73866: LD_STRING ","
73868: STR
73869: PUSH
73870: LD_VAR 0 6
73874: STR
73875: PUSH
73876: LD_STRING ","
73878: STR
73879: PUSH
73880: LD_VAR 0 7
73884: STR
73885: PUSH
73886: LD_STRING ")
73888: STR
73889: PPUSH
73890: CALL_OW 559
// end else
73894: GO 73903
// ToLua ( getStreamItemsFromMission("","","") ) ;
73896: LD_STRING getStreamItemsFromMission("","","")
73898: PPUSH
73899: CALL_OW 559
// end ;
73903: LD_VAR 0 2
73907: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
73908: LD_EXP 66
73912: PUSH
73913: LD_EXP 71
73917: AND
73918: IFFALSE 74042
73920: GO 73922
73922: DISABLE
73923: LD_INT 0
73925: PPUSH
73926: PPUSH
// begin enable ;
73927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73928: LD_ADDR_VAR 0 2
73932: PUSH
73933: LD_INT 22
73935: PUSH
73936: LD_OWVAR 2
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 2
73947: PUSH
73948: LD_INT 34
73950: PUSH
73951: LD_INT 7
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: PUSH
73958: LD_INT 34
73960: PUSH
73961: LD_INT 45
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 34
73970: PUSH
73971: LD_INT 28
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 34
73980: PUSH
73981: LD_INT 47
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PPUSH
73999: CALL_OW 69
74003: ST_TO_ADDR
// if not tmp then
74004: LD_VAR 0 2
74008: NOT
74009: IFFALSE 74013
// exit ;
74011: GO 74042
// for i in tmp do
74013: LD_ADDR_VAR 0 1
74017: PUSH
74018: LD_VAR 0 2
74022: PUSH
74023: FOR_IN
74024: IFFALSE 74040
// begin SetLives ( i , 0 ) ;
74026: LD_VAR 0 1
74030: PPUSH
74031: LD_INT 0
74033: PPUSH
74034: CALL_OW 234
// end ;
74038: GO 74023
74040: POP
74041: POP
// end ;
74042: PPOPN 2
74044: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
74045: LD_EXP 66
74049: PUSH
74050: LD_EXP 72
74054: AND
74055: IFFALSE 74139
74057: GO 74059
74059: DISABLE
74060: LD_INT 0
74062: PPUSH
74063: PPUSH
// begin enable ;
74064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
74065: LD_ADDR_VAR 0 2
74069: PUSH
74070: LD_INT 22
74072: PUSH
74073: LD_OWVAR 2
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 32
74084: PUSH
74085: LD_INT 3
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PPUSH
74096: CALL_OW 69
74100: ST_TO_ADDR
// if not tmp then
74101: LD_VAR 0 2
74105: NOT
74106: IFFALSE 74110
// exit ;
74108: GO 74139
// for i in tmp do
74110: LD_ADDR_VAR 0 1
74114: PUSH
74115: LD_VAR 0 2
74119: PUSH
74120: FOR_IN
74121: IFFALSE 74137
// begin SetLives ( i , 0 ) ;
74123: LD_VAR 0 1
74127: PPUSH
74128: LD_INT 0
74130: PPUSH
74131: CALL_OW 234
// end ;
74135: GO 74120
74137: POP
74138: POP
// end ;
74139: PPOPN 2
74141: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74142: LD_EXP 66
74146: PUSH
74147: LD_EXP 69
74151: AND
74152: IFFALSE 74245
74154: GO 74156
74156: DISABLE
74157: LD_INT 0
74159: PPUSH
// begin enable ;
74160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74161: LD_ADDR_VAR 0 1
74165: PUSH
74166: LD_INT 22
74168: PUSH
74169: LD_OWVAR 2
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: LD_INT 2
74180: PUSH
74181: LD_INT 25
74183: PUSH
74184: LD_INT 5
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 25
74193: PUSH
74194: LD_INT 9
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 25
74203: PUSH
74204: LD_INT 8
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PPUSH
74221: CALL_OW 69
74225: PUSH
74226: FOR_IN
74227: IFFALSE 74243
// begin SetClass ( i , 1 ) ;
74229: LD_VAR 0 1
74233: PPUSH
74234: LD_INT 1
74236: PPUSH
74237: CALL_OW 336
// end ;
74241: GO 74226
74243: POP
74244: POP
// end ;
74245: PPOPN 1
74247: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74248: LD_EXP 66
74252: PUSH
74253: LD_EXP 70
74257: AND
74258: PUSH
74259: LD_OWVAR 65
74263: PUSH
74264: LD_INT 7
74266: LESS
74267: AND
74268: IFFALSE 74282
74270: GO 74272
74272: DISABLE
// begin enable ;
74273: ENABLE
// game_speed := 7 ;
74274: LD_ADDR_OWVAR 65
74278: PUSH
74279: LD_INT 7
74281: ST_TO_ADDR
// end ;
74282: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74283: LD_EXP 66
74287: PUSH
74288: LD_EXP 73
74292: AND
74293: IFFALSE 74495
74295: GO 74297
74297: DISABLE
74298: LD_INT 0
74300: PPUSH
74301: PPUSH
74302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74303: LD_ADDR_VAR 0 3
74307: PUSH
74308: LD_INT 81
74310: PUSH
74311: LD_OWVAR 2
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 21
74322: PUSH
74323: LD_INT 1
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PPUSH
74334: CALL_OW 69
74338: ST_TO_ADDR
// if not tmp then
74339: LD_VAR 0 3
74343: NOT
74344: IFFALSE 74348
// exit ;
74346: GO 74495
// if tmp > 5 then
74348: LD_VAR 0 3
74352: PUSH
74353: LD_INT 5
74355: GREATER
74356: IFFALSE 74368
// k := 5 else
74358: LD_ADDR_VAR 0 2
74362: PUSH
74363: LD_INT 5
74365: ST_TO_ADDR
74366: GO 74378
// k := tmp ;
74368: LD_ADDR_VAR 0 2
74372: PUSH
74373: LD_VAR 0 3
74377: ST_TO_ADDR
// for i := 1 to k do
74378: LD_ADDR_VAR 0 1
74382: PUSH
74383: DOUBLE
74384: LD_INT 1
74386: DEC
74387: ST_TO_ADDR
74388: LD_VAR 0 2
74392: PUSH
74393: FOR_TO
74394: IFFALSE 74493
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74396: LD_VAR 0 3
74400: PUSH
74401: LD_VAR 0 1
74405: ARRAY
74406: PPUSH
74407: LD_VAR 0 1
74411: PUSH
74412: LD_INT 4
74414: MOD
74415: PUSH
74416: LD_INT 1
74418: PLUS
74419: PPUSH
74420: CALL_OW 259
74424: PUSH
74425: LD_INT 10
74427: LESS
74428: IFFALSE 74491
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74430: LD_VAR 0 3
74434: PUSH
74435: LD_VAR 0 1
74439: ARRAY
74440: PPUSH
74441: LD_VAR 0 1
74445: PUSH
74446: LD_INT 4
74448: MOD
74449: PUSH
74450: LD_INT 1
74452: PLUS
74453: PPUSH
74454: LD_VAR 0 3
74458: PUSH
74459: LD_VAR 0 1
74463: ARRAY
74464: PPUSH
74465: LD_VAR 0 1
74469: PUSH
74470: LD_INT 4
74472: MOD
74473: PUSH
74474: LD_INT 1
74476: PLUS
74477: PPUSH
74478: CALL_OW 259
74482: PUSH
74483: LD_INT 1
74485: PLUS
74486: PPUSH
74487: CALL_OW 237
74491: GO 74393
74493: POP
74494: POP
// end ;
74495: PPOPN 3
74497: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
74498: LD_EXP 66
74502: PUSH
74503: LD_EXP 74
74507: AND
74508: IFFALSE 74528
74510: GO 74512
74512: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
74513: LD_INT 4
74515: PPUSH
74516: LD_OWVAR 2
74520: PPUSH
74521: LD_INT 0
74523: PPUSH
74524: CALL_OW 324
74528: END
// every 0 0$1 trigger StreamModeActive and sShovel do
74529: LD_EXP 66
74533: PUSH
74534: LD_EXP 103
74538: AND
74539: IFFALSE 74559
74541: GO 74543
74543: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
74544: LD_INT 19
74546: PPUSH
74547: LD_OWVAR 2
74551: PPUSH
74552: LD_INT 0
74554: PPUSH
74555: CALL_OW 324
74559: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
74560: LD_EXP 66
74564: PUSH
74565: LD_EXP 75
74569: AND
74570: IFFALSE 74672
74572: GO 74574
74574: DISABLE
74575: LD_INT 0
74577: PPUSH
74578: PPUSH
// begin enable ;
74579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
74580: LD_ADDR_VAR 0 2
74584: PUSH
74585: LD_INT 22
74587: PUSH
74588: LD_OWVAR 2
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 2
74599: PUSH
74600: LD_INT 34
74602: PUSH
74603: LD_INT 11
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 34
74612: PUSH
74613: LD_INT 30
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: LIST
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PPUSH
74629: CALL_OW 69
74633: ST_TO_ADDR
// if not tmp then
74634: LD_VAR 0 2
74638: NOT
74639: IFFALSE 74643
// exit ;
74641: GO 74672
// for i in tmp do
74643: LD_ADDR_VAR 0 1
74647: PUSH
74648: LD_VAR 0 2
74652: PUSH
74653: FOR_IN
74654: IFFALSE 74670
// begin SetLives ( i , 0 ) ;
74656: LD_VAR 0 1
74660: PPUSH
74661: LD_INT 0
74663: PPUSH
74664: CALL_OW 234
// end ;
74668: GO 74653
74670: POP
74671: POP
// end ;
74672: PPOPN 2
74674: END
// every 0 0$1 trigger StreamModeActive and sBunker do
74675: LD_EXP 66
74679: PUSH
74680: LD_EXP 76
74684: AND
74685: IFFALSE 74705
74687: GO 74689
74689: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
74690: LD_INT 32
74692: PPUSH
74693: LD_OWVAR 2
74697: PPUSH
74698: LD_INT 0
74700: PPUSH
74701: CALL_OW 324
74705: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
74706: LD_EXP 66
74710: PUSH
74711: LD_EXP 77
74715: AND
74716: IFFALSE 74897
74718: GO 74720
74720: DISABLE
74721: LD_INT 0
74723: PPUSH
74724: PPUSH
74725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
74726: LD_ADDR_VAR 0 2
74730: PUSH
74731: LD_INT 22
74733: PUSH
74734: LD_OWVAR 2
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: LD_INT 33
74745: PUSH
74746: LD_INT 3
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: PPUSH
74757: CALL_OW 69
74761: ST_TO_ADDR
// if not tmp then
74762: LD_VAR 0 2
74766: NOT
74767: IFFALSE 74771
// exit ;
74769: GO 74897
// side := 0 ;
74771: LD_ADDR_VAR 0 3
74775: PUSH
74776: LD_INT 0
74778: ST_TO_ADDR
// for i := 1 to 8 do
74779: LD_ADDR_VAR 0 1
74783: PUSH
74784: DOUBLE
74785: LD_INT 1
74787: DEC
74788: ST_TO_ADDR
74789: LD_INT 8
74791: PUSH
74792: FOR_TO
74793: IFFALSE 74841
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
74795: LD_OWVAR 2
74799: PUSH
74800: LD_VAR 0 1
74804: NONEQUAL
74805: PUSH
74806: LD_OWVAR 2
74810: PPUSH
74811: LD_VAR 0 1
74815: PPUSH
74816: CALL_OW 81
74820: PUSH
74821: LD_INT 2
74823: EQUAL
74824: AND
74825: IFFALSE 74839
// begin side := i ;
74827: LD_ADDR_VAR 0 3
74831: PUSH
74832: LD_VAR 0 1
74836: ST_TO_ADDR
// break ;
74837: GO 74841
// end ;
74839: GO 74792
74841: POP
74842: POP
// if not side then
74843: LD_VAR 0 3
74847: NOT
74848: IFFALSE 74852
// exit ;
74850: GO 74897
// for i := 1 to tmp do
74852: LD_ADDR_VAR 0 1
74856: PUSH
74857: DOUBLE
74858: LD_INT 1
74860: DEC
74861: ST_TO_ADDR
74862: LD_VAR 0 2
74866: PUSH
74867: FOR_TO
74868: IFFALSE 74895
// if Prob ( 60 ) then
74870: LD_INT 60
74872: PPUSH
74873: CALL_OW 13
74877: IFFALSE 74893
// SetSide ( i , side ) ;
74879: LD_VAR 0 1
74883: PPUSH
74884: LD_VAR 0 3
74888: PPUSH
74889: CALL_OW 235
74893: GO 74867
74895: POP
74896: POP
// end ;
74897: PPOPN 3
74899: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
74900: LD_EXP 66
74904: PUSH
74905: LD_EXP 79
74909: AND
74910: IFFALSE 75029
74912: GO 74914
74914: DISABLE
74915: LD_INT 0
74917: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74918: LD_ADDR_VAR 0 1
74922: PUSH
74923: LD_INT 22
74925: PUSH
74926: LD_OWVAR 2
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 21
74937: PUSH
74938: LD_INT 1
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: LD_INT 3
74947: PUSH
74948: LD_INT 23
74950: PUSH
74951: LD_INT 0
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: LIST
74966: PPUSH
74967: CALL_OW 69
74971: PUSH
74972: FOR_IN
74973: IFFALSE 75027
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74975: LD_VAR 0 1
74979: PPUSH
74980: CALL_OW 257
74984: PUSH
74985: LD_INT 1
74987: PUSH
74988: LD_INT 2
74990: PUSH
74991: LD_INT 3
74993: PUSH
74994: LD_INT 4
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: IN
75003: IFFALSE 75025
// SetClass ( un , rand ( 1 , 4 ) ) ;
75005: LD_VAR 0 1
75009: PPUSH
75010: LD_INT 1
75012: PPUSH
75013: LD_INT 4
75015: PPUSH
75016: CALL_OW 12
75020: PPUSH
75021: CALL_OW 336
75025: GO 74972
75027: POP
75028: POP
// end ;
75029: PPOPN 1
75031: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
75032: LD_EXP 66
75036: PUSH
75037: LD_EXP 78
75041: AND
75042: IFFALSE 75121
75044: GO 75046
75046: DISABLE
75047: LD_INT 0
75049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75050: LD_ADDR_VAR 0 1
75054: PUSH
75055: LD_INT 22
75057: PUSH
75058: LD_OWVAR 2
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 21
75069: PUSH
75070: LD_INT 3
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PPUSH
75081: CALL_OW 69
75085: ST_TO_ADDR
// if not tmp then
75086: LD_VAR 0 1
75090: NOT
75091: IFFALSE 75095
// exit ;
75093: GO 75121
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
75095: LD_VAR 0 1
75099: PUSH
75100: LD_INT 1
75102: PPUSH
75103: LD_VAR 0 1
75107: PPUSH
75108: CALL_OW 12
75112: ARRAY
75113: PPUSH
75114: LD_INT 100
75116: PPUSH
75117: CALL_OW 234
// end ;
75121: PPOPN 1
75123: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75124: LD_EXP 66
75128: PUSH
75129: LD_EXP 80
75133: AND
75134: IFFALSE 75232
75136: GO 75138
75138: DISABLE
75139: LD_INT 0
75141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75142: LD_ADDR_VAR 0 1
75146: PUSH
75147: LD_INT 22
75149: PUSH
75150: LD_OWVAR 2
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 21
75161: PUSH
75162: LD_INT 1
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PPUSH
75173: CALL_OW 69
75177: ST_TO_ADDR
// if not tmp then
75178: LD_VAR 0 1
75182: NOT
75183: IFFALSE 75187
// exit ;
75185: GO 75232
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75187: LD_VAR 0 1
75191: PUSH
75192: LD_INT 1
75194: PPUSH
75195: LD_VAR 0 1
75199: PPUSH
75200: CALL_OW 12
75204: ARRAY
75205: PPUSH
75206: LD_INT 1
75208: PPUSH
75209: LD_INT 4
75211: PPUSH
75212: CALL_OW 12
75216: PPUSH
75217: LD_INT 3000
75219: PPUSH
75220: LD_INT 9000
75222: PPUSH
75223: CALL_OW 12
75227: PPUSH
75228: CALL_OW 492
// end ;
75232: PPOPN 1
75234: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75235: LD_EXP 66
75239: PUSH
75240: LD_EXP 81
75244: AND
75245: IFFALSE 75265
75247: GO 75249
75249: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75250: LD_INT 1
75252: PPUSH
75253: LD_OWVAR 2
75257: PPUSH
75258: LD_INT 0
75260: PPUSH
75261: CALL_OW 324
75265: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75266: LD_EXP 66
75270: PUSH
75271: LD_EXP 82
75275: AND
75276: IFFALSE 75359
75278: GO 75280
75280: DISABLE
75281: LD_INT 0
75283: PPUSH
75284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75285: LD_ADDR_VAR 0 2
75289: PUSH
75290: LD_INT 22
75292: PUSH
75293: LD_OWVAR 2
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 21
75304: PUSH
75305: LD_INT 3
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PPUSH
75316: CALL_OW 69
75320: ST_TO_ADDR
// if not tmp then
75321: LD_VAR 0 2
75325: NOT
75326: IFFALSE 75330
// exit ;
75328: GO 75359
// for i in tmp do
75330: LD_ADDR_VAR 0 1
75334: PUSH
75335: LD_VAR 0 2
75339: PUSH
75340: FOR_IN
75341: IFFALSE 75357
// SetBLevel ( i , 10 ) ;
75343: LD_VAR 0 1
75347: PPUSH
75348: LD_INT 10
75350: PPUSH
75351: CALL_OW 241
75355: GO 75340
75357: POP
75358: POP
// end ;
75359: PPOPN 2
75361: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75362: LD_EXP 66
75366: PUSH
75367: LD_EXP 83
75371: AND
75372: IFFALSE 75483
75374: GO 75376
75376: DISABLE
75377: LD_INT 0
75379: PPUSH
75380: PPUSH
75381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75382: LD_ADDR_VAR 0 3
75386: PUSH
75387: LD_INT 22
75389: PUSH
75390: LD_OWVAR 2
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 25
75401: PUSH
75402: LD_INT 1
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: PPUSH
75413: CALL_OW 69
75417: ST_TO_ADDR
// if not tmp then
75418: LD_VAR 0 3
75422: NOT
75423: IFFALSE 75427
// exit ;
75425: GO 75483
// un := tmp [ rand ( 1 , tmp ) ] ;
75427: LD_ADDR_VAR 0 2
75431: PUSH
75432: LD_VAR 0 3
75436: PUSH
75437: LD_INT 1
75439: PPUSH
75440: LD_VAR 0 3
75444: PPUSH
75445: CALL_OW 12
75449: ARRAY
75450: ST_TO_ADDR
// if Crawls ( un ) then
75451: LD_VAR 0 2
75455: PPUSH
75456: CALL_OW 318
75460: IFFALSE 75471
// ComWalk ( un ) ;
75462: LD_VAR 0 2
75466: PPUSH
75467: CALL_OW 138
// SetClass ( un , class_sniper ) ;
75471: LD_VAR 0 2
75475: PPUSH
75476: LD_INT 5
75478: PPUSH
75479: CALL_OW 336
// end ;
75483: PPOPN 3
75485: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
75486: LD_EXP 66
75490: PUSH
75491: LD_EXP 84
75495: AND
75496: PUSH
75497: LD_OWVAR 67
75501: PUSH
75502: LD_INT 4
75504: LESS
75505: AND
75506: IFFALSE 75525
75508: GO 75510
75510: DISABLE
// begin Difficulty := Difficulty + 1 ;
75511: LD_ADDR_OWVAR 67
75515: PUSH
75516: LD_OWVAR 67
75520: PUSH
75521: LD_INT 1
75523: PLUS
75524: ST_TO_ADDR
// end ;
75525: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
75526: LD_EXP 66
75530: PUSH
75531: LD_EXP 85
75535: AND
75536: IFFALSE 75639
75538: GO 75540
75540: DISABLE
75541: LD_INT 0
75543: PPUSH
// begin for i := 1 to 5 do
75544: LD_ADDR_VAR 0 1
75548: PUSH
75549: DOUBLE
75550: LD_INT 1
75552: DEC
75553: ST_TO_ADDR
75554: LD_INT 5
75556: PUSH
75557: FOR_TO
75558: IFFALSE 75637
// begin uc_nation := nation_nature ;
75560: LD_ADDR_OWVAR 21
75564: PUSH
75565: LD_INT 0
75567: ST_TO_ADDR
// uc_side := 0 ;
75568: LD_ADDR_OWVAR 20
75572: PUSH
75573: LD_INT 0
75575: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75576: LD_ADDR_OWVAR 29
75580: PUSH
75581: LD_INT 12
75583: PUSH
75584: LD_INT 12
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: ST_TO_ADDR
// hc_agressivity := 20 ;
75591: LD_ADDR_OWVAR 35
75595: PUSH
75596: LD_INT 20
75598: ST_TO_ADDR
// hc_class := class_tiger ;
75599: LD_ADDR_OWVAR 28
75603: PUSH
75604: LD_INT 14
75606: ST_TO_ADDR
// hc_gallery :=  ;
75607: LD_ADDR_OWVAR 33
75611: PUSH
75612: LD_STRING 
75614: ST_TO_ADDR
// hc_name :=  ;
75615: LD_ADDR_OWVAR 26
75619: PUSH
75620: LD_STRING 
75622: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
75623: CALL_OW 44
75627: PPUSH
75628: LD_INT 0
75630: PPUSH
75631: CALL_OW 51
// end ;
75635: GO 75557
75637: POP
75638: POP
// end ;
75639: PPOPN 1
75641: END
// every 0 0$1 trigger StreamModeActive and sBomb do
75642: LD_EXP 66
75646: PUSH
75647: LD_EXP 86
75651: AND
75652: IFFALSE 75661
75654: GO 75656
75656: DISABLE
// StreamSibBomb ;
75657: CALL 75662 0 0
75661: END
// export function StreamSibBomb ; var i , x , y ; begin
75662: LD_INT 0
75664: PPUSH
75665: PPUSH
75666: PPUSH
75667: PPUSH
// result := false ;
75668: LD_ADDR_VAR 0 1
75672: PUSH
75673: LD_INT 0
75675: ST_TO_ADDR
// for i := 1 to 16 do
75676: LD_ADDR_VAR 0 2
75680: PUSH
75681: DOUBLE
75682: LD_INT 1
75684: DEC
75685: ST_TO_ADDR
75686: LD_INT 16
75688: PUSH
75689: FOR_TO
75690: IFFALSE 75889
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75692: LD_ADDR_VAR 0 3
75696: PUSH
75697: LD_INT 10
75699: PUSH
75700: LD_INT 20
75702: PUSH
75703: LD_INT 30
75705: PUSH
75706: LD_INT 40
75708: PUSH
75709: LD_INT 50
75711: PUSH
75712: LD_INT 60
75714: PUSH
75715: LD_INT 70
75717: PUSH
75718: LD_INT 80
75720: PUSH
75721: LD_INT 90
75723: PUSH
75724: LD_INT 100
75726: PUSH
75727: LD_INT 110
75729: PUSH
75730: LD_INT 120
75732: PUSH
75733: LD_INT 130
75735: PUSH
75736: LD_INT 140
75738: PUSH
75739: LD_INT 150
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 1
75761: PPUSH
75762: LD_INT 15
75764: PPUSH
75765: CALL_OW 12
75769: ARRAY
75770: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75771: LD_ADDR_VAR 0 4
75775: PUSH
75776: LD_INT 10
75778: PUSH
75779: LD_INT 20
75781: PUSH
75782: LD_INT 30
75784: PUSH
75785: LD_INT 40
75787: PUSH
75788: LD_INT 50
75790: PUSH
75791: LD_INT 60
75793: PUSH
75794: LD_INT 70
75796: PUSH
75797: LD_INT 80
75799: PUSH
75800: LD_INT 90
75802: PUSH
75803: LD_INT 100
75805: PUSH
75806: LD_INT 110
75808: PUSH
75809: LD_INT 120
75811: PUSH
75812: LD_INT 130
75814: PUSH
75815: LD_INT 140
75817: PUSH
75818: LD_INT 150
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 1
75840: PPUSH
75841: LD_INT 15
75843: PPUSH
75844: CALL_OW 12
75848: ARRAY
75849: ST_TO_ADDR
// if ValidHex ( x , y ) then
75850: LD_VAR 0 3
75854: PPUSH
75855: LD_VAR 0 4
75859: PPUSH
75860: CALL_OW 488
75864: IFFALSE 75887
// begin result := [ x , y ] ;
75866: LD_ADDR_VAR 0 1
75870: PUSH
75871: LD_VAR 0 3
75875: PUSH
75876: LD_VAR 0 4
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: ST_TO_ADDR
// break ;
75885: GO 75889
// end ; end ;
75887: GO 75689
75889: POP
75890: POP
// if result then
75891: LD_VAR 0 1
75895: IFFALSE 75955
// begin ToLua ( playSibBomb() ) ;
75897: LD_STRING playSibBomb()
75899: PPUSH
75900: CALL_OW 559
// wait ( 0 0$14 ) ;
75904: LD_INT 490
75906: PPUSH
75907: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
75911: LD_VAR 0 1
75915: PUSH
75916: LD_INT 1
75918: ARRAY
75919: PPUSH
75920: LD_VAR 0 1
75924: PUSH
75925: LD_INT 2
75927: ARRAY
75928: PPUSH
75929: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75933: LD_VAR 0 1
75937: PUSH
75938: LD_INT 1
75940: ARRAY
75941: PPUSH
75942: LD_VAR 0 1
75946: PUSH
75947: LD_INT 2
75949: ARRAY
75950: PPUSH
75951: CALL_OW 429
// end ; end ;
75955: LD_VAR 0 1
75959: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75960: LD_EXP 66
75964: PUSH
75965: LD_EXP 88
75969: AND
75970: IFFALSE 75982
75972: GO 75974
75974: DISABLE
// YouLost (  ) ;
75975: LD_STRING 
75977: PPUSH
75978: CALL_OW 104
75982: END
// every 0 0$1 trigger StreamModeActive and sFog do
75983: LD_EXP 66
75987: PUSH
75988: LD_EXP 87
75992: AND
75993: IFFALSE 76007
75995: GO 75997
75997: DISABLE
// FogOff ( your_side ) ;
75998: LD_OWVAR 2
76002: PPUSH
76003: CALL_OW 344
76007: END
// every 0 0$1 trigger StreamModeActive and sSun do
76008: LD_EXP 66
76012: PUSH
76013: LD_EXP 89
76017: AND
76018: IFFALSE 76046
76020: GO 76022
76022: DISABLE
// begin solar_recharge_percent := 0 ;
76023: LD_ADDR_OWVAR 79
76027: PUSH
76028: LD_INT 0
76030: ST_TO_ADDR
// wait ( 5 5$00 ) ;
76031: LD_INT 10500
76033: PPUSH
76034: CALL_OW 67
// solar_recharge_percent := 100 ;
76038: LD_ADDR_OWVAR 79
76042: PUSH
76043: LD_INT 100
76045: ST_TO_ADDR
// end ;
76046: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
76047: LD_EXP 66
76051: PUSH
76052: LD_EXP 90
76056: AND
76057: IFFALSE 76296
76059: GO 76061
76061: DISABLE
76062: LD_INT 0
76064: PPUSH
76065: PPUSH
76066: PPUSH
// begin tmp := [ ] ;
76067: LD_ADDR_VAR 0 3
76071: PUSH
76072: EMPTY
76073: ST_TO_ADDR
// for i := 1 to 6 do
76074: LD_ADDR_VAR 0 1
76078: PUSH
76079: DOUBLE
76080: LD_INT 1
76082: DEC
76083: ST_TO_ADDR
76084: LD_INT 6
76086: PUSH
76087: FOR_TO
76088: IFFALSE 76193
// begin uc_nation := nation_nature ;
76090: LD_ADDR_OWVAR 21
76094: PUSH
76095: LD_INT 0
76097: ST_TO_ADDR
// uc_side := 0 ;
76098: LD_ADDR_OWVAR 20
76102: PUSH
76103: LD_INT 0
76105: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76106: LD_ADDR_OWVAR 29
76110: PUSH
76111: LD_INT 12
76113: PUSH
76114: LD_INT 12
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: ST_TO_ADDR
// hc_agressivity := 20 ;
76121: LD_ADDR_OWVAR 35
76125: PUSH
76126: LD_INT 20
76128: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76129: LD_ADDR_OWVAR 28
76133: PUSH
76134: LD_INT 17
76136: ST_TO_ADDR
// hc_gallery :=  ;
76137: LD_ADDR_OWVAR 33
76141: PUSH
76142: LD_STRING 
76144: ST_TO_ADDR
// hc_name :=  ;
76145: LD_ADDR_OWVAR 26
76149: PUSH
76150: LD_STRING 
76152: ST_TO_ADDR
// un := CreateHuman ;
76153: LD_ADDR_VAR 0 2
76157: PUSH
76158: CALL_OW 44
76162: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76163: LD_VAR 0 2
76167: PPUSH
76168: LD_INT 1
76170: PPUSH
76171: CALL_OW 51
// tmp := tmp ^ un ;
76175: LD_ADDR_VAR 0 3
76179: PUSH
76180: LD_VAR 0 3
76184: PUSH
76185: LD_VAR 0 2
76189: ADD
76190: ST_TO_ADDR
// end ;
76191: GO 76087
76193: POP
76194: POP
// repeat wait ( 0 0$1 ) ;
76195: LD_INT 35
76197: PPUSH
76198: CALL_OW 67
// for un in tmp do
76202: LD_ADDR_VAR 0 2
76206: PUSH
76207: LD_VAR 0 3
76211: PUSH
76212: FOR_IN
76213: IFFALSE 76287
// begin if IsDead ( un ) then
76215: LD_VAR 0 2
76219: PPUSH
76220: CALL_OW 301
76224: IFFALSE 76244
// begin tmp := tmp diff un ;
76226: LD_ADDR_VAR 0 3
76230: PUSH
76231: LD_VAR 0 3
76235: PUSH
76236: LD_VAR 0 2
76240: DIFF
76241: ST_TO_ADDR
// continue ;
76242: GO 76212
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76244: LD_VAR 0 2
76248: PPUSH
76249: LD_INT 3
76251: PUSH
76252: LD_INT 22
76254: PUSH
76255: LD_INT 0
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: PPUSH
76266: CALL_OW 69
76270: PPUSH
76271: LD_VAR 0 2
76275: PPUSH
76276: CALL_OW 74
76280: PPUSH
76281: CALL_OW 115
// end ;
76285: GO 76212
76287: POP
76288: POP
// until not tmp ;
76289: LD_VAR 0 3
76293: NOT
76294: IFFALSE 76195
// end ;
76296: PPOPN 3
76298: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76299: LD_EXP 66
76303: PUSH
76304: LD_EXP 91
76308: AND
76309: IFFALSE 76363
76311: GO 76313
76313: DISABLE
// begin ToLua ( displayTroll(); ) ;
76314: LD_STRING displayTroll();
76316: PPUSH
76317: CALL_OW 559
// wait ( 3 3$00 ) ;
76321: LD_INT 6300
76323: PPUSH
76324: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76328: LD_STRING hideTroll();
76330: PPUSH
76331: CALL_OW 559
// wait ( 1 1$00 ) ;
76335: LD_INT 2100
76337: PPUSH
76338: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76342: LD_STRING displayTroll();
76344: PPUSH
76345: CALL_OW 559
// wait ( 1 1$00 ) ;
76349: LD_INT 2100
76351: PPUSH
76352: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76356: LD_STRING hideTroll();
76358: PPUSH
76359: CALL_OW 559
// end ;
76363: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76364: LD_EXP 66
76368: PUSH
76369: LD_EXP 92
76373: AND
76374: IFFALSE 76437
76376: GO 76378
76378: DISABLE
76379: LD_INT 0
76381: PPUSH
// begin p := 0 ;
76382: LD_ADDR_VAR 0 1
76386: PUSH
76387: LD_INT 0
76389: ST_TO_ADDR
// repeat game_speed := 1 ;
76390: LD_ADDR_OWVAR 65
76394: PUSH
76395: LD_INT 1
76397: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76398: LD_INT 35
76400: PPUSH
76401: CALL_OW 67
// p := p + 1 ;
76405: LD_ADDR_VAR 0 1
76409: PUSH
76410: LD_VAR 0 1
76414: PUSH
76415: LD_INT 1
76417: PLUS
76418: ST_TO_ADDR
// until p >= 60 ;
76419: LD_VAR 0 1
76423: PUSH
76424: LD_INT 60
76426: GREATEREQUAL
76427: IFFALSE 76390
// game_speed := 4 ;
76429: LD_ADDR_OWVAR 65
76433: PUSH
76434: LD_INT 4
76436: ST_TO_ADDR
// end ;
76437: PPOPN 1
76439: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76440: LD_EXP 66
76444: PUSH
76445: LD_EXP 93
76449: AND
76450: IFFALSE 76596
76452: GO 76454
76454: DISABLE
76455: LD_INT 0
76457: PPUSH
76458: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76459: LD_ADDR_VAR 0 1
76463: PUSH
76464: LD_INT 22
76466: PUSH
76467: LD_OWVAR 2
76471: PUSH
76472: EMPTY
76473: LIST
76474: LIST
76475: PUSH
76476: LD_INT 2
76478: PUSH
76479: LD_INT 30
76481: PUSH
76482: LD_INT 0
76484: PUSH
76485: EMPTY
76486: LIST
76487: LIST
76488: PUSH
76489: LD_INT 30
76491: PUSH
76492: LD_INT 1
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PUSH
76499: EMPTY
76500: LIST
76501: LIST
76502: LIST
76503: PUSH
76504: EMPTY
76505: LIST
76506: LIST
76507: PPUSH
76508: CALL_OW 69
76512: ST_TO_ADDR
// if not depot then
76513: LD_VAR 0 1
76517: NOT
76518: IFFALSE 76522
// exit ;
76520: GO 76596
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
76522: LD_ADDR_VAR 0 2
76526: PUSH
76527: LD_VAR 0 1
76531: PUSH
76532: LD_INT 1
76534: PPUSH
76535: LD_VAR 0 1
76539: PPUSH
76540: CALL_OW 12
76544: ARRAY
76545: PPUSH
76546: CALL_OW 274
76550: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
76551: LD_VAR 0 2
76555: PPUSH
76556: LD_INT 1
76558: PPUSH
76559: LD_INT 0
76561: PPUSH
76562: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
76566: LD_VAR 0 2
76570: PPUSH
76571: LD_INT 2
76573: PPUSH
76574: LD_INT 0
76576: PPUSH
76577: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
76581: LD_VAR 0 2
76585: PPUSH
76586: LD_INT 3
76588: PPUSH
76589: LD_INT 0
76591: PPUSH
76592: CALL_OW 277
// end ;
76596: PPOPN 2
76598: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
76599: LD_EXP 66
76603: PUSH
76604: LD_EXP 94
76608: AND
76609: IFFALSE 76706
76611: GO 76613
76613: DISABLE
76614: LD_INT 0
76616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76617: LD_ADDR_VAR 0 1
76621: PUSH
76622: LD_INT 22
76624: PUSH
76625: LD_OWVAR 2
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: LD_INT 21
76636: PUSH
76637: LD_INT 1
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: PUSH
76644: LD_INT 3
76646: PUSH
76647: LD_INT 23
76649: PUSH
76650: LD_INT 0
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: LIST
76665: PPUSH
76666: CALL_OW 69
76670: ST_TO_ADDR
// if not tmp then
76671: LD_VAR 0 1
76675: NOT
76676: IFFALSE 76680
// exit ;
76678: GO 76706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
76680: LD_VAR 0 1
76684: PUSH
76685: LD_INT 1
76687: PPUSH
76688: LD_VAR 0 1
76692: PPUSH
76693: CALL_OW 12
76697: ARRAY
76698: PPUSH
76699: LD_INT 200
76701: PPUSH
76702: CALL_OW 234
// end ;
76706: PPOPN 1
76708: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
76709: LD_EXP 66
76713: PUSH
76714: LD_EXP 95
76718: AND
76719: IFFALSE 76798
76721: GO 76723
76723: DISABLE
76724: LD_INT 0
76726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
76727: LD_ADDR_VAR 0 1
76731: PUSH
76732: LD_INT 22
76734: PUSH
76735: LD_OWVAR 2
76739: PUSH
76740: EMPTY
76741: LIST
76742: LIST
76743: PUSH
76744: LD_INT 21
76746: PUSH
76747: LD_INT 2
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: PPUSH
76758: CALL_OW 69
76762: ST_TO_ADDR
// if not tmp then
76763: LD_VAR 0 1
76767: NOT
76768: IFFALSE 76772
// exit ;
76770: GO 76798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
76772: LD_VAR 0 1
76776: PUSH
76777: LD_INT 1
76779: PPUSH
76780: LD_VAR 0 1
76784: PPUSH
76785: CALL_OW 12
76789: ARRAY
76790: PPUSH
76791: LD_INT 60
76793: PPUSH
76794: CALL_OW 234
// end ;
76798: PPOPN 1
76800: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
76801: LD_EXP 66
76805: PUSH
76806: LD_EXP 96
76810: AND
76811: IFFALSE 76910
76813: GO 76815
76815: DISABLE
76816: LD_INT 0
76818: PPUSH
76819: PPUSH
// begin enable ;
76820: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
76821: LD_ADDR_VAR 0 1
76825: PUSH
76826: LD_INT 22
76828: PUSH
76829: LD_OWVAR 2
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PUSH
76838: LD_INT 61
76840: PUSH
76841: EMPTY
76842: LIST
76843: PUSH
76844: LD_INT 33
76846: PUSH
76847: LD_INT 2
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: LIST
76858: PPUSH
76859: CALL_OW 69
76863: ST_TO_ADDR
// if not tmp then
76864: LD_VAR 0 1
76868: NOT
76869: IFFALSE 76873
// exit ;
76871: GO 76910
// for i in tmp do
76873: LD_ADDR_VAR 0 2
76877: PUSH
76878: LD_VAR 0 1
76882: PUSH
76883: FOR_IN
76884: IFFALSE 76908
// if IsControledBy ( i ) then
76886: LD_VAR 0 2
76890: PPUSH
76891: CALL_OW 312
76895: IFFALSE 76906
// ComUnlink ( i ) ;
76897: LD_VAR 0 2
76901: PPUSH
76902: CALL_OW 136
76906: GO 76883
76908: POP
76909: POP
// end ;
76910: PPOPN 2
76912: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
76913: LD_EXP 66
76917: PUSH
76918: LD_EXP 97
76922: AND
76923: IFFALSE 77063
76925: GO 76927
76927: DISABLE
76928: LD_INT 0
76930: PPUSH
76931: PPUSH
// begin ToLua ( displayPowell(); ) ;
76932: LD_STRING displayPowell();
76934: PPUSH
76935: CALL_OW 559
// uc_side := 0 ;
76939: LD_ADDR_OWVAR 20
76943: PUSH
76944: LD_INT 0
76946: ST_TO_ADDR
// uc_nation := 2 ;
76947: LD_ADDR_OWVAR 21
76951: PUSH
76952: LD_INT 2
76954: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76955: LD_ADDR_OWVAR 37
76959: PUSH
76960: LD_INT 14
76962: ST_TO_ADDR
// vc_engine := engine_siberite ;
76963: LD_ADDR_OWVAR 39
76967: PUSH
76968: LD_INT 3
76970: ST_TO_ADDR
// vc_control := control_apeman ;
76971: LD_ADDR_OWVAR 38
76975: PUSH
76976: LD_INT 5
76978: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76979: LD_ADDR_OWVAR 40
76983: PUSH
76984: LD_INT 29
76986: ST_TO_ADDR
// un := CreateVehicle ;
76987: LD_ADDR_VAR 0 2
76991: PUSH
76992: CALL_OW 45
76996: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76997: LD_VAR 0 2
77001: PPUSH
77002: LD_INT 1
77004: PPUSH
77005: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77009: LD_INT 35
77011: PPUSH
77012: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77016: LD_VAR 0 2
77020: PPUSH
77021: LD_INT 22
77023: PUSH
77024: LD_OWVAR 2
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: PPUSH
77033: CALL_OW 69
77037: PPUSH
77038: LD_VAR 0 2
77042: PPUSH
77043: CALL_OW 74
77047: PPUSH
77048: CALL_OW 115
// until IsDead ( un ) ;
77052: LD_VAR 0 2
77056: PPUSH
77057: CALL_OW 301
77061: IFFALSE 77009
// end ;
77063: PPOPN 2
77065: END
// every 0 0$1 trigger StreamModeActive and sStu do
77066: LD_EXP 66
77070: PUSH
77071: LD_EXP 105
77075: AND
77076: IFFALSE 77092
77078: GO 77080
77080: DISABLE
// begin ToLua ( displayStucuk(); ) ;
77081: LD_STRING displayStucuk();
77083: PPUSH
77084: CALL_OW 559
// ResetFog ;
77088: CALL_OW 335
// end ;
77092: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
77093: LD_EXP 66
77097: PUSH
77098: LD_EXP 98
77102: AND
77103: IFFALSE 77244
77105: GO 77107
77107: DISABLE
77108: LD_INT 0
77110: PPUSH
77111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77112: LD_ADDR_VAR 0 2
77116: PUSH
77117: LD_INT 22
77119: PUSH
77120: LD_OWVAR 2
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 21
77131: PUSH
77132: LD_INT 1
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PPUSH
77143: CALL_OW 69
77147: ST_TO_ADDR
// if not tmp then
77148: LD_VAR 0 2
77152: NOT
77153: IFFALSE 77157
// exit ;
77155: GO 77244
// un := tmp [ rand ( 1 , tmp ) ] ;
77157: LD_ADDR_VAR 0 1
77161: PUSH
77162: LD_VAR 0 2
77166: PUSH
77167: LD_INT 1
77169: PPUSH
77170: LD_VAR 0 2
77174: PPUSH
77175: CALL_OW 12
77179: ARRAY
77180: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77181: LD_VAR 0 1
77185: PPUSH
77186: LD_INT 0
77188: PPUSH
77189: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77193: LD_VAR 0 1
77197: PPUSH
77198: LD_OWVAR 3
77202: PUSH
77203: LD_VAR 0 1
77207: DIFF
77208: PPUSH
77209: LD_VAR 0 1
77213: PPUSH
77214: CALL_OW 74
77218: PPUSH
77219: CALL_OW 115
// wait ( 0 0$20 ) ;
77223: LD_INT 700
77225: PPUSH
77226: CALL_OW 67
// SetSide ( un , your_side ) ;
77230: LD_VAR 0 1
77234: PPUSH
77235: LD_OWVAR 2
77239: PPUSH
77240: CALL_OW 235
// end ;
77244: PPOPN 2
77246: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77247: LD_EXP 66
77251: PUSH
77252: LD_EXP 99
77256: AND
77257: IFFALSE 77363
77259: GO 77261
77261: DISABLE
77262: LD_INT 0
77264: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77265: LD_ADDR_VAR 0 1
77269: PUSH
77270: LD_INT 22
77272: PUSH
77273: LD_OWVAR 2
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 2
77284: PUSH
77285: LD_INT 30
77287: PUSH
77288: LD_INT 0
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: LD_INT 30
77297: PUSH
77298: LD_INT 1
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PUSH
77305: EMPTY
77306: LIST
77307: LIST
77308: LIST
77309: PUSH
77310: EMPTY
77311: LIST
77312: LIST
77313: PPUSH
77314: CALL_OW 69
77318: ST_TO_ADDR
// if not depot then
77319: LD_VAR 0 1
77323: NOT
77324: IFFALSE 77328
// exit ;
77326: GO 77363
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77328: LD_VAR 0 1
77332: PUSH
77333: LD_INT 1
77335: ARRAY
77336: PPUSH
77337: CALL_OW 250
77341: PPUSH
77342: LD_VAR 0 1
77346: PUSH
77347: LD_INT 1
77349: ARRAY
77350: PPUSH
77351: CALL_OW 251
77355: PPUSH
77356: LD_INT 70
77358: PPUSH
77359: CALL_OW 495
// end ;
77363: PPOPN 1
77365: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77366: LD_EXP 66
77370: PUSH
77371: LD_EXP 100
77375: AND
77376: IFFALSE 77587
77378: GO 77380
77380: DISABLE
77381: LD_INT 0
77383: PPUSH
77384: PPUSH
77385: PPUSH
77386: PPUSH
77387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77388: LD_ADDR_VAR 0 5
77392: PUSH
77393: LD_INT 22
77395: PUSH
77396: LD_OWVAR 2
77400: PUSH
77401: EMPTY
77402: LIST
77403: LIST
77404: PUSH
77405: LD_INT 21
77407: PUSH
77408: LD_INT 1
77410: PUSH
77411: EMPTY
77412: LIST
77413: LIST
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PPUSH
77419: CALL_OW 69
77423: ST_TO_ADDR
// if not tmp then
77424: LD_VAR 0 5
77428: NOT
77429: IFFALSE 77433
// exit ;
77431: GO 77587
// for i in tmp do
77433: LD_ADDR_VAR 0 1
77437: PUSH
77438: LD_VAR 0 5
77442: PUSH
77443: FOR_IN
77444: IFFALSE 77585
// begin d := rand ( 0 , 5 ) ;
77446: LD_ADDR_VAR 0 4
77450: PUSH
77451: LD_INT 0
77453: PPUSH
77454: LD_INT 5
77456: PPUSH
77457: CALL_OW 12
77461: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
77462: LD_ADDR_VAR 0 2
77466: PUSH
77467: LD_VAR 0 1
77471: PPUSH
77472: CALL_OW 250
77476: PPUSH
77477: LD_VAR 0 4
77481: PPUSH
77482: LD_INT 3
77484: PPUSH
77485: LD_INT 12
77487: PPUSH
77488: CALL_OW 12
77492: PPUSH
77493: CALL_OW 272
77497: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
77498: LD_ADDR_VAR 0 3
77502: PUSH
77503: LD_VAR 0 1
77507: PPUSH
77508: CALL_OW 251
77512: PPUSH
77513: LD_VAR 0 4
77517: PPUSH
77518: LD_INT 3
77520: PPUSH
77521: LD_INT 12
77523: PPUSH
77524: CALL_OW 12
77528: PPUSH
77529: CALL_OW 273
77533: ST_TO_ADDR
// if ValidHex ( x , y ) then
77534: LD_VAR 0 2
77538: PPUSH
77539: LD_VAR 0 3
77543: PPUSH
77544: CALL_OW 488
77548: IFFALSE 77583
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
77550: LD_VAR 0 1
77554: PPUSH
77555: LD_VAR 0 2
77559: PPUSH
77560: LD_VAR 0 3
77564: PPUSH
77565: LD_INT 3
77567: PPUSH
77568: LD_INT 6
77570: PPUSH
77571: CALL_OW 12
77575: PPUSH
77576: LD_INT 1
77578: PPUSH
77579: CALL_OW 483
// end ;
77583: GO 77443
77585: POP
77586: POP
// end ;
77587: PPOPN 5
77589: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
77590: LD_EXP 66
77594: PUSH
77595: LD_EXP 101
77599: AND
77600: IFFALSE 77694
77602: GO 77604
77604: DISABLE
77605: LD_INT 0
77607: PPUSH
77608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
77609: LD_ADDR_VAR 0 2
77613: PUSH
77614: LD_INT 22
77616: PUSH
77617: LD_OWVAR 2
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PUSH
77626: LD_INT 32
77628: PUSH
77629: LD_INT 1
77631: PUSH
77632: EMPTY
77633: LIST
77634: LIST
77635: PUSH
77636: LD_INT 21
77638: PUSH
77639: LD_INT 2
77641: PUSH
77642: EMPTY
77643: LIST
77644: LIST
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: LIST
77650: PPUSH
77651: CALL_OW 69
77655: ST_TO_ADDR
// if not tmp then
77656: LD_VAR 0 2
77660: NOT
77661: IFFALSE 77665
// exit ;
77663: GO 77694
// for i in tmp do
77665: LD_ADDR_VAR 0 1
77669: PUSH
77670: LD_VAR 0 2
77674: PUSH
77675: FOR_IN
77676: IFFALSE 77692
// SetFuel ( i , 0 ) ;
77678: LD_VAR 0 1
77682: PPUSH
77683: LD_INT 0
77685: PPUSH
77686: CALL_OW 240
77690: GO 77675
77692: POP
77693: POP
// end ;
77694: PPOPN 2
77696: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
77697: LD_EXP 66
77701: PUSH
77702: LD_EXP 102
77706: AND
77707: IFFALSE 77773
77709: GO 77711
77711: DISABLE
77712: LD_INT 0
77714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77715: LD_ADDR_VAR 0 1
77719: PUSH
77720: LD_INT 22
77722: PUSH
77723: LD_OWVAR 2
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: PUSH
77732: LD_INT 30
77734: PUSH
77735: LD_INT 29
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PPUSH
77746: CALL_OW 69
77750: ST_TO_ADDR
// if not tmp then
77751: LD_VAR 0 1
77755: NOT
77756: IFFALSE 77760
// exit ;
77758: GO 77773
// DestroyUnit ( tmp [ 1 ] ) ;
77760: LD_VAR 0 1
77764: PUSH
77765: LD_INT 1
77767: ARRAY
77768: PPUSH
77769: CALL_OW 65
// end ;
77773: PPOPN 1
77775: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
77776: LD_EXP 66
77780: PUSH
77781: LD_EXP 104
77785: AND
77786: IFFALSE 77915
77788: GO 77790
77790: DISABLE
77791: LD_INT 0
77793: PPUSH
// begin uc_side := 0 ;
77794: LD_ADDR_OWVAR 20
77798: PUSH
77799: LD_INT 0
77801: ST_TO_ADDR
// uc_nation := nation_arabian ;
77802: LD_ADDR_OWVAR 21
77806: PUSH
77807: LD_INT 2
77809: ST_TO_ADDR
// hc_gallery :=  ;
77810: LD_ADDR_OWVAR 33
77814: PUSH
77815: LD_STRING 
77817: ST_TO_ADDR
// hc_name :=  ;
77818: LD_ADDR_OWVAR 26
77822: PUSH
77823: LD_STRING 
77825: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
77826: LD_INT 1
77828: PPUSH
77829: LD_INT 11
77831: PPUSH
77832: LD_INT 10
77834: PPUSH
77835: CALL_OW 380
// un := CreateHuman ;
77839: LD_ADDR_VAR 0 1
77843: PUSH
77844: CALL_OW 44
77848: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77849: LD_VAR 0 1
77853: PPUSH
77854: LD_INT 1
77856: PPUSH
77857: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77861: LD_INT 35
77863: PPUSH
77864: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77868: LD_VAR 0 1
77872: PPUSH
77873: LD_INT 22
77875: PUSH
77876: LD_OWVAR 2
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: PPUSH
77885: CALL_OW 69
77889: PPUSH
77890: LD_VAR 0 1
77894: PPUSH
77895: CALL_OW 74
77899: PPUSH
77900: CALL_OW 115
// until IsDead ( un ) ;
77904: LD_VAR 0 1
77908: PPUSH
77909: CALL_OW 301
77913: IFFALSE 77861
// end ;
77915: PPOPN 1
77917: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77918: LD_EXP 66
77922: PUSH
77923: LD_EXP 106
77927: AND
77928: IFFALSE 77940
77930: GO 77932
77932: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77933: LD_STRING earthquake(getX(game), 0, 32)
77935: PPUSH
77936: CALL_OW 559
77940: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77941: LD_EXP 66
77945: PUSH
77946: LD_EXP 107
77950: AND
77951: IFFALSE 78042
77953: GO 77955
77955: DISABLE
77956: LD_INT 0
77958: PPUSH
// begin enable ;
77959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77960: LD_ADDR_VAR 0 1
77964: PUSH
77965: LD_INT 22
77967: PUSH
77968: LD_OWVAR 2
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PUSH
77977: LD_INT 21
77979: PUSH
77980: LD_INT 2
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PUSH
77987: LD_INT 33
77989: PUSH
77990: LD_INT 3
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: EMPTY
77998: LIST
77999: LIST
78000: LIST
78001: PPUSH
78002: CALL_OW 69
78006: ST_TO_ADDR
// if not tmp then
78007: LD_VAR 0 1
78011: NOT
78012: IFFALSE 78016
// exit ;
78014: GO 78042
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78016: LD_VAR 0 1
78020: PUSH
78021: LD_INT 1
78023: PPUSH
78024: LD_VAR 0 1
78028: PPUSH
78029: CALL_OW 12
78033: ARRAY
78034: PPUSH
78035: LD_INT 1
78037: PPUSH
78038: CALL_OW 234
// end ;
78042: PPOPN 1
78044: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
78045: LD_EXP 66
78049: PUSH
78050: LD_EXP 108
78054: AND
78055: IFFALSE 78196
78057: GO 78059
78059: DISABLE
78060: LD_INT 0
78062: PPUSH
78063: PPUSH
78064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78065: LD_ADDR_VAR 0 3
78069: PUSH
78070: LD_INT 22
78072: PUSH
78073: LD_OWVAR 2
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: PUSH
78082: LD_INT 25
78084: PUSH
78085: LD_INT 1
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: PPUSH
78096: CALL_OW 69
78100: ST_TO_ADDR
// if not tmp then
78101: LD_VAR 0 3
78105: NOT
78106: IFFALSE 78110
// exit ;
78108: GO 78196
// un := tmp [ rand ( 1 , tmp ) ] ;
78110: LD_ADDR_VAR 0 2
78114: PUSH
78115: LD_VAR 0 3
78119: PUSH
78120: LD_INT 1
78122: PPUSH
78123: LD_VAR 0 3
78127: PPUSH
78128: CALL_OW 12
78132: ARRAY
78133: ST_TO_ADDR
// if Crawls ( un ) then
78134: LD_VAR 0 2
78138: PPUSH
78139: CALL_OW 318
78143: IFFALSE 78154
// ComWalk ( un ) ;
78145: LD_VAR 0 2
78149: PPUSH
78150: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78154: LD_VAR 0 2
78158: PPUSH
78159: LD_INT 9
78161: PPUSH
78162: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78166: LD_INT 28
78168: PPUSH
78169: LD_OWVAR 2
78173: PPUSH
78174: LD_INT 2
78176: PPUSH
78177: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78181: LD_INT 29
78183: PPUSH
78184: LD_OWVAR 2
78188: PPUSH
78189: LD_INT 2
78191: PPUSH
78192: CALL_OW 322
// end ;
78196: PPOPN 3
78198: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78199: LD_EXP 66
78203: PUSH
78204: LD_EXP 109
78208: AND
78209: IFFALSE 78320
78211: GO 78213
78213: DISABLE
78214: LD_INT 0
78216: PPUSH
78217: PPUSH
78218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78219: LD_ADDR_VAR 0 3
78223: PUSH
78224: LD_INT 22
78226: PUSH
78227: LD_OWVAR 2
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: PUSH
78236: LD_INT 25
78238: PUSH
78239: LD_INT 1
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: PPUSH
78250: CALL_OW 69
78254: ST_TO_ADDR
// if not tmp then
78255: LD_VAR 0 3
78259: NOT
78260: IFFALSE 78264
// exit ;
78262: GO 78320
// un := tmp [ rand ( 1 , tmp ) ] ;
78264: LD_ADDR_VAR 0 2
78268: PUSH
78269: LD_VAR 0 3
78273: PUSH
78274: LD_INT 1
78276: PPUSH
78277: LD_VAR 0 3
78281: PPUSH
78282: CALL_OW 12
78286: ARRAY
78287: ST_TO_ADDR
// if Crawls ( un ) then
78288: LD_VAR 0 2
78292: PPUSH
78293: CALL_OW 318
78297: IFFALSE 78308
// ComWalk ( un ) ;
78299: LD_VAR 0 2
78303: PPUSH
78304: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78308: LD_VAR 0 2
78312: PPUSH
78313: LD_INT 8
78315: PPUSH
78316: CALL_OW 336
// end ;
78320: PPOPN 3
78322: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78323: LD_EXP 66
78327: PUSH
78328: LD_EXP 110
78332: AND
78333: IFFALSE 78477
78335: GO 78337
78337: DISABLE
78338: LD_INT 0
78340: PPUSH
78341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78342: LD_ADDR_VAR 0 2
78346: PUSH
78347: LD_INT 22
78349: PUSH
78350: LD_OWVAR 2
78354: PUSH
78355: EMPTY
78356: LIST
78357: LIST
78358: PUSH
78359: LD_INT 21
78361: PUSH
78362: LD_INT 2
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: PUSH
78369: LD_INT 2
78371: PUSH
78372: LD_INT 34
78374: PUSH
78375: LD_INT 12
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: PUSH
78382: LD_INT 34
78384: PUSH
78385: LD_INT 51
78387: PUSH
78388: EMPTY
78389: LIST
78390: LIST
78391: PUSH
78392: LD_INT 34
78394: PUSH
78395: LD_INT 32
78397: PUSH
78398: EMPTY
78399: LIST
78400: LIST
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: LIST
78412: PPUSH
78413: CALL_OW 69
78417: ST_TO_ADDR
// if not tmp then
78418: LD_VAR 0 2
78422: NOT
78423: IFFALSE 78427
// exit ;
78425: GO 78477
// for i in tmp do
78427: LD_ADDR_VAR 0 1
78431: PUSH
78432: LD_VAR 0 2
78436: PUSH
78437: FOR_IN
78438: IFFALSE 78475
// if GetCargo ( i , mat_artifact ) = 0 then
78440: LD_VAR 0 1
78444: PPUSH
78445: LD_INT 4
78447: PPUSH
78448: CALL_OW 289
78452: PUSH
78453: LD_INT 0
78455: EQUAL
78456: IFFALSE 78473
// SetCargo ( i , mat_siberit , 100 ) ;
78458: LD_VAR 0 1
78462: PPUSH
78463: LD_INT 3
78465: PPUSH
78466: LD_INT 100
78468: PPUSH
78469: CALL_OW 290
78473: GO 78437
78475: POP
78476: POP
// end ;
78477: PPOPN 2
78479: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
78480: LD_EXP 66
78484: PUSH
78485: LD_EXP 111
78489: AND
78490: IFFALSE 78673
78492: GO 78494
78494: DISABLE
78495: LD_INT 0
78497: PPUSH
78498: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78499: LD_ADDR_VAR 0 2
78503: PUSH
78504: LD_INT 22
78506: PUSH
78507: LD_OWVAR 2
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: PPUSH
78516: CALL_OW 69
78520: ST_TO_ADDR
// if not tmp then
78521: LD_VAR 0 2
78525: NOT
78526: IFFALSE 78530
// exit ;
78528: GO 78673
// for i := 1 to 2 do
78530: LD_ADDR_VAR 0 1
78534: PUSH
78535: DOUBLE
78536: LD_INT 1
78538: DEC
78539: ST_TO_ADDR
78540: LD_INT 2
78542: PUSH
78543: FOR_TO
78544: IFFALSE 78671
// begin uc_side := your_side ;
78546: LD_ADDR_OWVAR 20
78550: PUSH
78551: LD_OWVAR 2
78555: ST_TO_ADDR
// uc_nation := nation_american ;
78556: LD_ADDR_OWVAR 21
78560: PUSH
78561: LD_INT 1
78563: ST_TO_ADDR
// vc_chassis := us_morphling ;
78564: LD_ADDR_OWVAR 37
78568: PUSH
78569: LD_INT 5
78571: ST_TO_ADDR
// vc_engine := engine_siberite ;
78572: LD_ADDR_OWVAR 39
78576: PUSH
78577: LD_INT 3
78579: ST_TO_ADDR
// vc_control := control_computer ;
78580: LD_ADDR_OWVAR 38
78584: PUSH
78585: LD_INT 3
78587: ST_TO_ADDR
// vc_weapon := us_double_laser ;
78588: LD_ADDR_OWVAR 40
78592: PUSH
78593: LD_INT 10
78595: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
78596: LD_VAR 0 2
78600: PUSH
78601: LD_INT 1
78603: ARRAY
78604: PPUSH
78605: CALL_OW 310
78609: NOT
78610: IFFALSE 78657
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
78612: CALL_OW 45
78616: PPUSH
78617: LD_VAR 0 2
78621: PUSH
78622: LD_INT 1
78624: ARRAY
78625: PPUSH
78626: CALL_OW 250
78630: PPUSH
78631: LD_VAR 0 2
78635: PUSH
78636: LD_INT 1
78638: ARRAY
78639: PPUSH
78640: CALL_OW 251
78644: PPUSH
78645: LD_INT 12
78647: PPUSH
78648: LD_INT 1
78650: PPUSH
78651: CALL_OW 50
78655: GO 78669
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
78657: CALL_OW 45
78661: PPUSH
78662: LD_INT 1
78664: PPUSH
78665: CALL_OW 51
// end ;
78669: GO 78543
78671: POP
78672: POP
// end ;
78673: PPOPN 2
78675: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
78676: LD_EXP 66
78680: PUSH
78681: LD_EXP 112
78685: AND
78686: IFFALSE 78908
78688: GO 78690
78690: DISABLE
78691: LD_INT 0
78693: PPUSH
78694: PPUSH
78695: PPUSH
78696: PPUSH
78697: PPUSH
78698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78699: LD_ADDR_VAR 0 6
78703: PUSH
78704: LD_INT 22
78706: PUSH
78707: LD_OWVAR 2
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PUSH
78716: LD_INT 21
78718: PUSH
78719: LD_INT 1
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: PUSH
78726: LD_INT 3
78728: PUSH
78729: LD_INT 23
78731: PUSH
78732: LD_INT 0
78734: PUSH
78735: EMPTY
78736: LIST
78737: LIST
78738: PUSH
78739: EMPTY
78740: LIST
78741: LIST
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: LIST
78747: PPUSH
78748: CALL_OW 69
78752: ST_TO_ADDR
// if not tmp then
78753: LD_VAR 0 6
78757: NOT
78758: IFFALSE 78762
// exit ;
78760: GO 78908
// s1 := rand ( 1 , 4 ) ;
78762: LD_ADDR_VAR 0 2
78766: PUSH
78767: LD_INT 1
78769: PPUSH
78770: LD_INT 4
78772: PPUSH
78773: CALL_OW 12
78777: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
78778: LD_ADDR_VAR 0 4
78782: PUSH
78783: LD_VAR 0 6
78787: PUSH
78788: LD_INT 1
78790: ARRAY
78791: PPUSH
78792: LD_VAR 0 2
78796: PPUSH
78797: CALL_OW 259
78801: ST_TO_ADDR
// if s1 = 1 then
78802: LD_VAR 0 2
78806: PUSH
78807: LD_INT 1
78809: EQUAL
78810: IFFALSE 78830
// s2 := rand ( 2 , 4 ) else
78812: LD_ADDR_VAR 0 3
78816: PUSH
78817: LD_INT 2
78819: PPUSH
78820: LD_INT 4
78822: PPUSH
78823: CALL_OW 12
78827: ST_TO_ADDR
78828: GO 78838
// s2 := 1 ;
78830: LD_ADDR_VAR 0 3
78834: PUSH
78835: LD_INT 1
78837: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
78838: LD_ADDR_VAR 0 5
78842: PUSH
78843: LD_VAR 0 6
78847: PUSH
78848: LD_INT 1
78850: ARRAY
78851: PPUSH
78852: LD_VAR 0 3
78856: PPUSH
78857: CALL_OW 259
78861: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78862: LD_VAR 0 6
78866: PUSH
78867: LD_INT 1
78869: ARRAY
78870: PPUSH
78871: LD_VAR 0 2
78875: PPUSH
78876: LD_VAR 0 5
78880: PPUSH
78881: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78885: LD_VAR 0 6
78889: PUSH
78890: LD_INT 1
78892: ARRAY
78893: PPUSH
78894: LD_VAR 0 3
78898: PPUSH
78899: LD_VAR 0 4
78903: PPUSH
78904: CALL_OW 237
// end ;
78908: PPOPN 6
78910: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
78911: LD_EXP 66
78915: PUSH
78916: LD_EXP 113
78920: AND
78921: IFFALSE 79000
78923: GO 78925
78925: DISABLE
78926: LD_INT 0
78928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78929: LD_ADDR_VAR 0 1
78933: PUSH
78934: LD_INT 22
78936: PUSH
78937: LD_OWVAR 2
78941: PUSH
78942: EMPTY
78943: LIST
78944: LIST
78945: PUSH
78946: LD_INT 30
78948: PUSH
78949: LD_INT 3
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PPUSH
78960: CALL_OW 69
78964: ST_TO_ADDR
// if not tmp then
78965: LD_VAR 0 1
78969: NOT
78970: IFFALSE 78974
// exit ;
78972: GO 79000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78974: LD_VAR 0 1
78978: PUSH
78979: LD_INT 1
78981: PPUSH
78982: LD_VAR 0 1
78986: PPUSH
78987: CALL_OW 12
78991: ARRAY
78992: PPUSH
78993: LD_INT 1
78995: PPUSH
78996: CALL_OW 234
// end ;
79000: PPOPN 1
79002: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
79003: LD_EXP 66
79007: PUSH
79008: LD_EXP 114
79012: AND
79013: IFFALSE 79125
79015: GO 79017
79017: DISABLE
79018: LD_INT 0
79020: PPUSH
79021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
79022: LD_ADDR_VAR 0 2
79026: PUSH
79027: LD_INT 22
79029: PUSH
79030: LD_OWVAR 2
79034: PUSH
79035: EMPTY
79036: LIST
79037: LIST
79038: PUSH
79039: LD_INT 2
79041: PUSH
79042: LD_INT 30
79044: PUSH
79045: LD_INT 27
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: LD_INT 30
79054: PUSH
79055: LD_INT 26
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_INT 30
79064: PUSH
79065: LD_INT 28
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: EMPTY
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: PUSH
79078: EMPTY
79079: LIST
79080: LIST
79081: PPUSH
79082: CALL_OW 69
79086: ST_TO_ADDR
// if not tmp then
79087: LD_VAR 0 2
79091: NOT
79092: IFFALSE 79096
// exit ;
79094: GO 79125
// for i in tmp do
79096: LD_ADDR_VAR 0 1
79100: PUSH
79101: LD_VAR 0 2
79105: PUSH
79106: FOR_IN
79107: IFFALSE 79123
// SetLives ( i , 1 ) ;
79109: LD_VAR 0 1
79113: PPUSH
79114: LD_INT 1
79116: PPUSH
79117: CALL_OW 234
79121: GO 79106
79123: POP
79124: POP
// end ;
79125: PPOPN 2
79127: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79128: LD_EXP 66
79132: PUSH
79133: LD_EXP 115
79137: AND
79138: IFFALSE 79425
79140: GO 79142
79142: DISABLE
79143: LD_INT 0
79145: PPUSH
79146: PPUSH
79147: PPUSH
// begin i := rand ( 1 , 7 ) ;
79148: LD_ADDR_VAR 0 1
79152: PUSH
79153: LD_INT 1
79155: PPUSH
79156: LD_INT 7
79158: PPUSH
79159: CALL_OW 12
79163: ST_TO_ADDR
// case i of 1 :
79164: LD_VAR 0 1
79168: PUSH
79169: LD_INT 1
79171: DOUBLE
79172: EQUAL
79173: IFTRUE 79177
79175: GO 79187
79177: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79178: LD_STRING earthquake(getX(game), 0, 32)
79180: PPUSH
79181: CALL_OW 559
79185: GO 79425
79187: LD_INT 2
79189: DOUBLE
79190: EQUAL
79191: IFTRUE 79195
79193: GO 79209
79195: POP
// begin ToLua ( displayStucuk(); ) ;
79196: LD_STRING displayStucuk();
79198: PPUSH
79199: CALL_OW 559
// ResetFog ;
79203: CALL_OW 335
// end ; 3 :
79207: GO 79425
79209: LD_INT 3
79211: DOUBLE
79212: EQUAL
79213: IFTRUE 79217
79215: GO 79321
79217: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79218: LD_ADDR_VAR 0 2
79222: PUSH
79223: LD_INT 22
79225: PUSH
79226: LD_OWVAR 2
79230: PUSH
79231: EMPTY
79232: LIST
79233: LIST
79234: PUSH
79235: LD_INT 25
79237: PUSH
79238: LD_INT 1
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PUSH
79245: EMPTY
79246: LIST
79247: LIST
79248: PPUSH
79249: CALL_OW 69
79253: ST_TO_ADDR
// if not tmp then
79254: LD_VAR 0 2
79258: NOT
79259: IFFALSE 79263
// exit ;
79261: GO 79425
// un := tmp [ rand ( 1 , tmp ) ] ;
79263: LD_ADDR_VAR 0 3
79267: PUSH
79268: LD_VAR 0 2
79272: PUSH
79273: LD_INT 1
79275: PPUSH
79276: LD_VAR 0 2
79280: PPUSH
79281: CALL_OW 12
79285: ARRAY
79286: ST_TO_ADDR
// if Crawls ( un ) then
79287: LD_VAR 0 3
79291: PPUSH
79292: CALL_OW 318
79296: IFFALSE 79307
// ComWalk ( un ) ;
79298: LD_VAR 0 3
79302: PPUSH
79303: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79307: LD_VAR 0 3
79311: PPUSH
79312: LD_INT 8
79314: PPUSH
79315: CALL_OW 336
// end ; 4 :
79319: GO 79425
79321: LD_INT 4
79323: DOUBLE
79324: EQUAL
79325: IFTRUE 79329
79327: GO 79403
79329: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79330: LD_ADDR_VAR 0 2
79334: PUSH
79335: LD_INT 22
79337: PUSH
79338: LD_OWVAR 2
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: PUSH
79347: LD_INT 30
79349: PUSH
79350: LD_INT 29
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: PUSH
79357: EMPTY
79358: LIST
79359: LIST
79360: PPUSH
79361: CALL_OW 69
79365: ST_TO_ADDR
// if not tmp then
79366: LD_VAR 0 2
79370: NOT
79371: IFFALSE 79375
// exit ;
79373: GO 79425
// CenterNowOnUnits ( tmp [ 1 ] ) ;
79375: LD_VAR 0 2
79379: PUSH
79380: LD_INT 1
79382: ARRAY
79383: PPUSH
79384: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
79388: LD_VAR 0 2
79392: PUSH
79393: LD_INT 1
79395: ARRAY
79396: PPUSH
79397: CALL_OW 65
// end ; 5 .. 7 :
79401: GO 79425
79403: LD_INT 5
79405: DOUBLE
79406: GREATEREQUAL
79407: IFFALSE 79415
79409: LD_INT 7
79411: DOUBLE
79412: LESSEQUAL
79413: IFTRUE 79417
79415: GO 79424
79417: POP
// StreamSibBomb ; end ;
79418: CALL 75662 0 0
79422: GO 79425
79424: POP
// end ;
79425: PPOPN 3
79427: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79428: LD_EXP 66
79432: PUSH
79433: LD_EXP 116
79437: AND
79438: IFFALSE 79594
79440: GO 79442
79442: DISABLE
79443: LD_INT 0
79445: PPUSH
79446: PPUSH
79447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79448: LD_ADDR_VAR 0 2
79452: PUSH
79453: LD_INT 81
79455: PUSH
79456: LD_OWVAR 2
79460: PUSH
79461: EMPTY
79462: LIST
79463: LIST
79464: PUSH
79465: LD_INT 2
79467: PUSH
79468: LD_INT 21
79470: PUSH
79471: LD_INT 1
79473: PUSH
79474: EMPTY
79475: LIST
79476: LIST
79477: PUSH
79478: LD_INT 21
79480: PUSH
79481: LD_INT 2
79483: PUSH
79484: EMPTY
79485: LIST
79486: LIST
79487: PUSH
79488: EMPTY
79489: LIST
79490: LIST
79491: LIST
79492: PUSH
79493: EMPTY
79494: LIST
79495: LIST
79496: PPUSH
79497: CALL_OW 69
79501: ST_TO_ADDR
// if not tmp then
79502: LD_VAR 0 2
79506: NOT
79507: IFFALSE 79511
// exit ;
79509: GO 79594
// p := 0 ;
79511: LD_ADDR_VAR 0 3
79515: PUSH
79516: LD_INT 0
79518: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79519: LD_INT 35
79521: PPUSH
79522: CALL_OW 67
// p := p + 1 ;
79526: LD_ADDR_VAR 0 3
79530: PUSH
79531: LD_VAR 0 3
79535: PUSH
79536: LD_INT 1
79538: PLUS
79539: ST_TO_ADDR
// for i in tmp do
79540: LD_ADDR_VAR 0 1
79544: PUSH
79545: LD_VAR 0 2
79549: PUSH
79550: FOR_IN
79551: IFFALSE 79582
// if GetLives ( i ) < 1000 then
79553: LD_VAR 0 1
79557: PPUSH
79558: CALL_OW 256
79562: PUSH
79563: LD_INT 1000
79565: LESS
79566: IFFALSE 79580
// SetLives ( i , 1000 ) ;
79568: LD_VAR 0 1
79572: PPUSH
79573: LD_INT 1000
79575: PPUSH
79576: CALL_OW 234
79580: GO 79550
79582: POP
79583: POP
// until p > 20 ;
79584: LD_VAR 0 3
79588: PUSH
79589: LD_INT 20
79591: GREATER
79592: IFFALSE 79519
// end ;
79594: PPOPN 3
79596: END
// every 0 0$1 trigger StreamModeActive and sTime do
79597: LD_EXP 66
79601: PUSH
79602: LD_EXP 117
79606: AND
79607: IFFALSE 79642
79609: GO 79611
79611: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
79612: LD_INT 28
79614: PPUSH
79615: LD_OWVAR 2
79619: PPUSH
79620: LD_INT 2
79622: PPUSH
79623: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
79627: LD_INT 30
79629: PPUSH
79630: LD_OWVAR 2
79634: PPUSH
79635: LD_INT 2
79637: PPUSH
79638: CALL_OW 322
// end ;
79642: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
79643: LD_EXP 66
79647: PUSH
79648: LD_EXP 118
79652: AND
79653: IFFALSE 79774
79655: GO 79657
79657: DISABLE
79658: LD_INT 0
79660: PPUSH
79661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79662: LD_ADDR_VAR 0 2
79666: PUSH
79667: LD_INT 22
79669: PUSH
79670: LD_OWVAR 2
79674: PUSH
79675: EMPTY
79676: LIST
79677: LIST
79678: PUSH
79679: LD_INT 21
79681: PUSH
79682: LD_INT 1
79684: PUSH
79685: EMPTY
79686: LIST
79687: LIST
79688: PUSH
79689: LD_INT 3
79691: PUSH
79692: LD_INT 23
79694: PUSH
79695: LD_INT 0
79697: PUSH
79698: EMPTY
79699: LIST
79700: LIST
79701: PUSH
79702: EMPTY
79703: LIST
79704: LIST
79705: PUSH
79706: EMPTY
79707: LIST
79708: LIST
79709: LIST
79710: PPUSH
79711: CALL_OW 69
79715: ST_TO_ADDR
// if not tmp then
79716: LD_VAR 0 2
79720: NOT
79721: IFFALSE 79725
// exit ;
79723: GO 79774
// for i in tmp do
79725: LD_ADDR_VAR 0 1
79729: PUSH
79730: LD_VAR 0 2
79734: PUSH
79735: FOR_IN
79736: IFFALSE 79772
// begin if Crawls ( i ) then
79738: LD_VAR 0 1
79742: PPUSH
79743: CALL_OW 318
79747: IFFALSE 79758
// ComWalk ( i ) ;
79749: LD_VAR 0 1
79753: PPUSH
79754: CALL_OW 138
// SetClass ( i , 2 ) ;
79758: LD_VAR 0 1
79762: PPUSH
79763: LD_INT 2
79765: PPUSH
79766: CALL_OW 336
// end ;
79770: GO 79735
79772: POP
79773: POP
// end ;
79774: PPOPN 2
79776: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
79777: LD_EXP 66
79781: PUSH
79782: LD_EXP 119
79786: AND
79787: IFFALSE 80075
79789: GO 79791
79791: DISABLE
79792: LD_INT 0
79794: PPUSH
79795: PPUSH
79796: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
79797: LD_OWVAR 2
79801: PPUSH
79802: LD_INT 9
79804: PPUSH
79805: LD_INT 1
79807: PPUSH
79808: LD_INT 1
79810: PPUSH
79811: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
79815: LD_INT 9
79817: PPUSH
79818: LD_OWVAR 2
79822: PPUSH
79823: CALL_OW 343
// uc_side := 9 ;
79827: LD_ADDR_OWVAR 20
79831: PUSH
79832: LD_INT 9
79834: ST_TO_ADDR
// uc_nation := 2 ;
79835: LD_ADDR_OWVAR 21
79839: PUSH
79840: LD_INT 2
79842: ST_TO_ADDR
// hc_name := Dark Warrior ;
79843: LD_ADDR_OWVAR 26
79847: PUSH
79848: LD_STRING Dark Warrior
79850: ST_TO_ADDR
// hc_gallery :=  ;
79851: LD_ADDR_OWVAR 33
79855: PUSH
79856: LD_STRING 
79858: ST_TO_ADDR
// hc_noskilllimit := true ;
79859: LD_ADDR_OWVAR 76
79863: PUSH
79864: LD_INT 1
79866: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79867: LD_ADDR_OWVAR 31
79871: PUSH
79872: LD_INT 30
79874: PUSH
79875: LD_INT 30
79877: PUSH
79878: LD_INT 30
79880: PUSH
79881: LD_INT 30
79883: PUSH
79884: EMPTY
79885: LIST
79886: LIST
79887: LIST
79888: LIST
79889: ST_TO_ADDR
// un := CreateHuman ;
79890: LD_ADDR_VAR 0 3
79894: PUSH
79895: CALL_OW 44
79899: ST_TO_ADDR
// hc_noskilllimit := false ;
79900: LD_ADDR_OWVAR 76
79904: PUSH
79905: LD_INT 0
79907: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79908: LD_VAR 0 3
79912: PPUSH
79913: LD_INT 1
79915: PPUSH
79916: CALL_OW 51
// ToLua ( playRanger() ) ;
79920: LD_STRING playRanger()
79922: PPUSH
79923: CALL_OW 559
// p := 0 ;
79927: LD_ADDR_VAR 0 2
79931: PUSH
79932: LD_INT 0
79934: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79935: LD_INT 35
79937: PPUSH
79938: CALL_OW 67
// p := p + 1 ;
79942: LD_ADDR_VAR 0 2
79946: PUSH
79947: LD_VAR 0 2
79951: PUSH
79952: LD_INT 1
79954: PLUS
79955: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79956: LD_VAR 0 3
79960: PPUSH
79961: CALL_OW 256
79965: PUSH
79966: LD_INT 1000
79968: LESS
79969: IFFALSE 79983
// SetLives ( un , 1000 ) ;
79971: LD_VAR 0 3
79975: PPUSH
79976: LD_INT 1000
79978: PPUSH
79979: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79983: LD_VAR 0 3
79987: PPUSH
79988: LD_INT 81
79990: PUSH
79991: LD_OWVAR 2
79995: PUSH
79996: EMPTY
79997: LIST
79998: LIST
79999: PUSH
80000: LD_INT 91
80002: PUSH
80003: LD_VAR 0 3
80007: PUSH
80008: LD_INT 30
80010: PUSH
80011: EMPTY
80012: LIST
80013: LIST
80014: LIST
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PPUSH
80020: CALL_OW 69
80024: PPUSH
80025: LD_VAR 0 3
80029: PPUSH
80030: CALL_OW 74
80034: PPUSH
80035: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
80039: LD_VAR 0 2
80043: PUSH
80044: LD_INT 80
80046: GREATER
80047: PUSH
80048: LD_VAR 0 3
80052: PPUSH
80053: CALL_OW 301
80057: OR
80058: IFFALSE 79935
// if un then
80060: LD_VAR 0 3
80064: IFFALSE 80075
// RemoveUnit ( un ) ;
80066: LD_VAR 0 3
80070: PPUSH
80071: CALL_OW 64
// end ;
80075: PPOPN 3
80077: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
80078: LD_EXP 120
80082: IFFALSE 80198
80084: GO 80086
80086: DISABLE
80087: LD_INT 0
80089: PPUSH
80090: PPUSH
80091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80092: LD_ADDR_VAR 0 2
80096: PUSH
80097: LD_INT 81
80099: PUSH
80100: LD_OWVAR 2
80104: PUSH
80105: EMPTY
80106: LIST
80107: LIST
80108: PUSH
80109: LD_INT 21
80111: PUSH
80112: LD_INT 1
80114: PUSH
80115: EMPTY
80116: LIST
80117: LIST
80118: PUSH
80119: EMPTY
80120: LIST
80121: LIST
80122: PPUSH
80123: CALL_OW 69
80127: ST_TO_ADDR
// ToLua ( playComputer() ) ;
80128: LD_STRING playComputer()
80130: PPUSH
80131: CALL_OW 559
// if not tmp then
80135: LD_VAR 0 2
80139: NOT
80140: IFFALSE 80144
// exit ;
80142: GO 80198
// for i in tmp do
80144: LD_ADDR_VAR 0 1
80148: PUSH
80149: LD_VAR 0 2
80153: PUSH
80154: FOR_IN
80155: IFFALSE 80196
// for j := 1 to 4 do
80157: LD_ADDR_VAR 0 3
80161: PUSH
80162: DOUBLE
80163: LD_INT 1
80165: DEC
80166: ST_TO_ADDR
80167: LD_INT 4
80169: PUSH
80170: FOR_TO
80171: IFFALSE 80192
// SetSkill ( i , j , 10 ) ;
80173: LD_VAR 0 1
80177: PPUSH
80178: LD_VAR 0 3
80182: PPUSH
80183: LD_INT 10
80185: PPUSH
80186: CALL_OW 237
80190: GO 80170
80192: POP
80193: POP
80194: GO 80154
80196: POP
80197: POP
// end ;
80198: PPOPN 3
80200: END
// every 0 0$1 trigger s30 do var i , tmp ;
80201: LD_EXP 121
80205: IFFALSE 80274
80207: GO 80209
80209: DISABLE
80210: LD_INT 0
80212: PPUSH
80213: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80214: LD_ADDR_VAR 0 2
80218: PUSH
80219: LD_INT 22
80221: PUSH
80222: LD_OWVAR 2
80226: PUSH
80227: EMPTY
80228: LIST
80229: LIST
80230: PPUSH
80231: CALL_OW 69
80235: ST_TO_ADDR
// if not tmp then
80236: LD_VAR 0 2
80240: NOT
80241: IFFALSE 80245
// exit ;
80243: GO 80274
// for i in tmp do
80245: LD_ADDR_VAR 0 1
80249: PUSH
80250: LD_VAR 0 2
80254: PUSH
80255: FOR_IN
80256: IFFALSE 80272
// SetLives ( i , 300 ) ;
80258: LD_VAR 0 1
80262: PPUSH
80263: LD_INT 300
80265: PPUSH
80266: CALL_OW 234
80270: GO 80255
80272: POP
80273: POP
// end ;
80274: PPOPN 2
80276: END
// every 0 0$1 trigger s60 do var i , tmp ;
80277: LD_EXP 122
80281: IFFALSE 80350
80283: GO 80285
80285: DISABLE
80286: LD_INT 0
80288: PPUSH
80289: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80290: LD_ADDR_VAR 0 2
80294: PUSH
80295: LD_INT 22
80297: PUSH
80298: LD_OWVAR 2
80302: PUSH
80303: EMPTY
80304: LIST
80305: LIST
80306: PPUSH
80307: CALL_OW 69
80311: ST_TO_ADDR
// if not tmp then
80312: LD_VAR 0 2
80316: NOT
80317: IFFALSE 80321
// exit ;
80319: GO 80350
// for i in tmp do
80321: LD_ADDR_VAR 0 1
80325: PUSH
80326: LD_VAR 0 2
80330: PUSH
80331: FOR_IN
80332: IFFALSE 80348
// SetLives ( i , 600 ) ;
80334: LD_VAR 0 1
80338: PPUSH
80339: LD_INT 600
80341: PPUSH
80342: CALL_OW 234
80346: GO 80331
80348: POP
80349: POP
// end ;
80350: PPOPN 2
80352: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
80353: LD_INT 0
80355: PPUSH
// case cmd of 301 :
80356: LD_VAR 0 1
80360: PUSH
80361: LD_INT 301
80363: DOUBLE
80364: EQUAL
80365: IFTRUE 80369
80367: GO 80401
80369: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
80370: LD_VAR 0 6
80374: PPUSH
80375: LD_VAR 0 7
80379: PPUSH
80380: LD_VAR 0 8
80384: PPUSH
80385: LD_VAR 0 4
80389: PPUSH
80390: LD_VAR 0 5
80394: PPUSH
80395: CALL 81602 0 5
80399: GO 80522
80401: LD_INT 302
80403: DOUBLE
80404: EQUAL
80405: IFTRUE 80409
80407: GO 80446
80409: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
80410: LD_VAR 0 6
80414: PPUSH
80415: LD_VAR 0 7
80419: PPUSH
80420: LD_VAR 0 8
80424: PPUSH
80425: LD_VAR 0 9
80429: PPUSH
80430: LD_VAR 0 4
80434: PPUSH
80435: LD_VAR 0 5
80439: PPUSH
80440: CALL 81693 0 6
80444: GO 80522
80446: LD_INT 303
80448: DOUBLE
80449: EQUAL
80450: IFTRUE 80454
80452: GO 80491
80454: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
80455: LD_VAR 0 6
80459: PPUSH
80460: LD_VAR 0 7
80464: PPUSH
80465: LD_VAR 0 8
80469: PPUSH
80470: LD_VAR 0 9
80474: PPUSH
80475: LD_VAR 0 4
80479: PPUSH
80480: LD_VAR 0 5
80484: PPUSH
80485: CALL 80527 0 6
80489: GO 80522
80491: LD_INT 304
80493: DOUBLE
80494: EQUAL
80495: IFTRUE 80499
80497: GO 80521
80499: POP
// hHackTeleport ( unit , x , y ) ; end ;
80500: LD_VAR 0 2
80504: PPUSH
80505: LD_VAR 0 4
80509: PPUSH
80510: LD_VAR 0 5
80514: PPUSH
80515: CALL 82286 0 3
80519: GO 80522
80521: POP
// end ;
80522: LD_VAR 0 12
80526: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
80527: LD_INT 0
80529: PPUSH
80530: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
80531: LD_VAR 0 1
80535: PUSH
80536: LD_INT 1
80538: LESS
80539: PUSH
80540: LD_VAR 0 1
80544: PUSH
80545: LD_INT 3
80547: GREATER
80548: OR
80549: PUSH
80550: LD_VAR 0 5
80554: PPUSH
80555: LD_VAR 0 6
80559: PPUSH
80560: CALL_OW 428
80564: OR
80565: IFFALSE 80569
// exit ;
80567: GO 81289
// uc_side := your_side ;
80569: LD_ADDR_OWVAR 20
80573: PUSH
80574: LD_OWVAR 2
80578: ST_TO_ADDR
// uc_nation := nation ;
80579: LD_ADDR_OWVAR 21
80583: PUSH
80584: LD_VAR 0 1
80588: ST_TO_ADDR
// bc_level = 1 ;
80589: LD_ADDR_OWVAR 43
80593: PUSH
80594: LD_INT 1
80596: ST_TO_ADDR
// case btype of 1 :
80597: LD_VAR 0 2
80601: PUSH
80602: LD_INT 1
80604: DOUBLE
80605: EQUAL
80606: IFTRUE 80610
80608: GO 80621
80610: POP
// bc_type := b_depot ; 2 :
80611: LD_ADDR_OWVAR 42
80615: PUSH
80616: LD_INT 0
80618: ST_TO_ADDR
80619: GO 81233
80621: LD_INT 2
80623: DOUBLE
80624: EQUAL
80625: IFTRUE 80629
80627: GO 80640
80629: POP
// bc_type := b_warehouse ; 3 :
80630: LD_ADDR_OWVAR 42
80634: PUSH
80635: LD_INT 1
80637: ST_TO_ADDR
80638: GO 81233
80640: LD_INT 3
80642: DOUBLE
80643: EQUAL
80644: IFTRUE 80648
80646: GO 80659
80648: POP
// bc_type := b_lab ; 4 .. 9 :
80649: LD_ADDR_OWVAR 42
80653: PUSH
80654: LD_INT 6
80656: ST_TO_ADDR
80657: GO 81233
80659: LD_INT 4
80661: DOUBLE
80662: GREATEREQUAL
80663: IFFALSE 80671
80665: LD_INT 9
80667: DOUBLE
80668: LESSEQUAL
80669: IFTRUE 80673
80671: GO 80725
80673: POP
// begin bc_type := b_lab_half ;
80674: LD_ADDR_OWVAR 42
80678: PUSH
80679: LD_INT 7
80681: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
80682: LD_ADDR_OWVAR 44
80686: PUSH
80687: LD_INT 10
80689: PUSH
80690: LD_INT 11
80692: PUSH
80693: LD_INT 12
80695: PUSH
80696: LD_INT 15
80698: PUSH
80699: LD_INT 14
80701: PUSH
80702: LD_INT 13
80704: PUSH
80705: EMPTY
80706: LIST
80707: LIST
80708: LIST
80709: LIST
80710: LIST
80711: LIST
80712: PUSH
80713: LD_VAR 0 2
80717: PUSH
80718: LD_INT 3
80720: MINUS
80721: ARRAY
80722: ST_TO_ADDR
// end ; 10 .. 13 :
80723: GO 81233
80725: LD_INT 10
80727: DOUBLE
80728: GREATEREQUAL
80729: IFFALSE 80737
80731: LD_INT 13
80733: DOUBLE
80734: LESSEQUAL
80735: IFTRUE 80739
80737: GO 80816
80739: POP
// begin bc_type := b_lab_full ;
80740: LD_ADDR_OWVAR 42
80744: PUSH
80745: LD_INT 8
80747: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
80748: LD_ADDR_OWVAR 44
80752: PUSH
80753: LD_INT 10
80755: PUSH
80756: LD_INT 12
80758: PUSH
80759: LD_INT 14
80761: PUSH
80762: LD_INT 13
80764: PUSH
80765: EMPTY
80766: LIST
80767: LIST
80768: LIST
80769: LIST
80770: PUSH
80771: LD_VAR 0 2
80775: PUSH
80776: LD_INT 9
80778: MINUS
80779: ARRAY
80780: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
80781: LD_ADDR_OWVAR 45
80785: PUSH
80786: LD_INT 11
80788: PUSH
80789: LD_INT 15
80791: PUSH
80792: LD_INT 12
80794: PUSH
80795: LD_INT 15
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: LIST
80802: LIST
80803: PUSH
80804: LD_VAR 0 2
80808: PUSH
80809: LD_INT 9
80811: MINUS
80812: ARRAY
80813: ST_TO_ADDR
// end ; 14 :
80814: GO 81233
80816: LD_INT 14
80818: DOUBLE
80819: EQUAL
80820: IFTRUE 80824
80822: GO 80835
80824: POP
// bc_type := b_workshop ; 15 :
80825: LD_ADDR_OWVAR 42
80829: PUSH
80830: LD_INT 2
80832: ST_TO_ADDR
80833: GO 81233
80835: LD_INT 15
80837: DOUBLE
80838: EQUAL
80839: IFTRUE 80843
80841: GO 80854
80843: POP
// bc_type := b_factory ; 16 :
80844: LD_ADDR_OWVAR 42
80848: PUSH
80849: LD_INT 3
80851: ST_TO_ADDR
80852: GO 81233
80854: LD_INT 16
80856: DOUBLE
80857: EQUAL
80858: IFTRUE 80862
80860: GO 80873
80862: POP
// bc_type := b_ext_gun ; 17 :
80863: LD_ADDR_OWVAR 42
80867: PUSH
80868: LD_INT 17
80870: ST_TO_ADDR
80871: GO 81233
80873: LD_INT 17
80875: DOUBLE
80876: EQUAL
80877: IFTRUE 80881
80879: GO 80909
80881: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
80882: LD_ADDR_OWVAR 42
80886: PUSH
80887: LD_INT 19
80889: PUSH
80890: LD_INT 23
80892: PUSH
80893: LD_INT 19
80895: PUSH
80896: EMPTY
80897: LIST
80898: LIST
80899: LIST
80900: PUSH
80901: LD_VAR 0 1
80905: ARRAY
80906: ST_TO_ADDR
80907: GO 81233
80909: LD_INT 18
80911: DOUBLE
80912: EQUAL
80913: IFTRUE 80917
80915: GO 80928
80917: POP
// bc_type := b_ext_radar ; 19 :
80918: LD_ADDR_OWVAR 42
80922: PUSH
80923: LD_INT 20
80925: ST_TO_ADDR
80926: GO 81233
80928: LD_INT 19
80930: DOUBLE
80931: EQUAL
80932: IFTRUE 80936
80934: GO 80947
80936: POP
// bc_type := b_ext_radio ; 20 :
80937: LD_ADDR_OWVAR 42
80941: PUSH
80942: LD_INT 22
80944: ST_TO_ADDR
80945: GO 81233
80947: LD_INT 20
80949: DOUBLE
80950: EQUAL
80951: IFTRUE 80955
80953: GO 80966
80955: POP
// bc_type := b_ext_siberium ; 21 :
80956: LD_ADDR_OWVAR 42
80960: PUSH
80961: LD_INT 21
80963: ST_TO_ADDR
80964: GO 81233
80966: LD_INT 21
80968: DOUBLE
80969: EQUAL
80970: IFTRUE 80974
80972: GO 80985
80974: POP
// bc_type := b_ext_computer ; 22 :
80975: LD_ADDR_OWVAR 42
80979: PUSH
80980: LD_INT 24
80982: ST_TO_ADDR
80983: GO 81233
80985: LD_INT 22
80987: DOUBLE
80988: EQUAL
80989: IFTRUE 80993
80991: GO 81004
80993: POP
// bc_type := b_ext_track ; 23 :
80994: LD_ADDR_OWVAR 42
80998: PUSH
80999: LD_INT 16
81001: ST_TO_ADDR
81002: GO 81233
81004: LD_INT 23
81006: DOUBLE
81007: EQUAL
81008: IFTRUE 81012
81010: GO 81023
81012: POP
// bc_type := b_ext_laser ; 24 :
81013: LD_ADDR_OWVAR 42
81017: PUSH
81018: LD_INT 25
81020: ST_TO_ADDR
81021: GO 81233
81023: LD_INT 24
81025: DOUBLE
81026: EQUAL
81027: IFTRUE 81031
81029: GO 81042
81031: POP
// bc_type := b_control_tower ; 25 :
81032: LD_ADDR_OWVAR 42
81036: PUSH
81037: LD_INT 36
81039: ST_TO_ADDR
81040: GO 81233
81042: LD_INT 25
81044: DOUBLE
81045: EQUAL
81046: IFTRUE 81050
81048: GO 81061
81050: POP
// bc_type := b_breastwork ; 26 :
81051: LD_ADDR_OWVAR 42
81055: PUSH
81056: LD_INT 31
81058: ST_TO_ADDR
81059: GO 81233
81061: LD_INT 26
81063: DOUBLE
81064: EQUAL
81065: IFTRUE 81069
81067: GO 81080
81069: POP
// bc_type := b_bunker ; 27 :
81070: LD_ADDR_OWVAR 42
81074: PUSH
81075: LD_INT 32
81077: ST_TO_ADDR
81078: GO 81233
81080: LD_INT 27
81082: DOUBLE
81083: EQUAL
81084: IFTRUE 81088
81086: GO 81099
81088: POP
// bc_type := b_turret ; 28 :
81089: LD_ADDR_OWVAR 42
81093: PUSH
81094: LD_INT 33
81096: ST_TO_ADDR
81097: GO 81233
81099: LD_INT 28
81101: DOUBLE
81102: EQUAL
81103: IFTRUE 81107
81105: GO 81118
81107: POP
// bc_type := b_armoury ; 29 :
81108: LD_ADDR_OWVAR 42
81112: PUSH
81113: LD_INT 4
81115: ST_TO_ADDR
81116: GO 81233
81118: LD_INT 29
81120: DOUBLE
81121: EQUAL
81122: IFTRUE 81126
81124: GO 81137
81126: POP
// bc_type := b_barracks ; 30 :
81127: LD_ADDR_OWVAR 42
81131: PUSH
81132: LD_INT 5
81134: ST_TO_ADDR
81135: GO 81233
81137: LD_INT 30
81139: DOUBLE
81140: EQUAL
81141: IFTRUE 81145
81143: GO 81156
81145: POP
// bc_type := b_solar_power ; 31 :
81146: LD_ADDR_OWVAR 42
81150: PUSH
81151: LD_INT 27
81153: ST_TO_ADDR
81154: GO 81233
81156: LD_INT 31
81158: DOUBLE
81159: EQUAL
81160: IFTRUE 81164
81162: GO 81175
81164: POP
// bc_type := b_oil_power ; 32 :
81165: LD_ADDR_OWVAR 42
81169: PUSH
81170: LD_INT 26
81172: ST_TO_ADDR
81173: GO 81233
81175: LD_INT 32
81177: DOUBLE
81178: EQUAL
81179: IFTRUE 81183
81181: GO 81194
81183: POP
// bc_type := b_siberite_power ; 33 :
81184: LD_ADDR_OWVAR 42
81188: PUSH
81189: LD_INT 28
81191: ST_TO_ADDR
81192: GO 81233
81194: LD_INT 33
81196: DOUBLE
81197: EQUAL
81198: IFTRUE 81202
81200: GO 81213
81202: POP
// bc_type := b_oil_mine ; 34 :
81203: LD_ADDR_OWVAR 42
81207: PUSH
81208: LD_INT 29
81210: ST_TO_ADDR
81211: GO 81233
81213: LD_INT 34
81215: DOUBLE
81216: EQUAL
81217: IFTRUE 81221
81219: GO 81232
81221: POP
// bc_type := b_siberite_mine ; end ;
81222: LD_ADDR_OWVAR 42
81226: PUSH
81227: LD_INT 30
81229: ST_TO_ADDR
81230: GO 81233
81232: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
81233: LD_ADDR_VAR 0 8
81237: PUSH
81238: LD_VAR 0 5
81242: PPUSH
81243: LD_VAR 0 6
81247: PPUSH
81248: LD_VAR 0 3
81252: PPUSH
81253: CALL_OW 47
81257: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
81258: LD_OWVAR 42
81262: PUSH
81263: LD_INT 32
81265: PUSH
81266: LD_INT 33
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: IN
81273: IFFALSE 81289
// PlaceWeaponTurret ( b , weapon ) ;
81275: LD_VAR 0 8
81279: PPUSH
81280: LD_VAR 0 4
81284: PPUSH
81285: CALL_OW 431
// end ;
81289: LD_VAR 0 7
81293: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
81294: LD_INT 0
81296: PPUSH
81297: PPUSH
81298: PPUSH
81299: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81300: LD_ADDR_VAR 0 4
81304: PUSH
81305: LD_INT 22
81307: PUSH
81308: LD_OWVAR 2
81312: PUSH
81313: EMPTY
81314: LIST
81315: LIST
81316: PUSH
81317: LD_INT 2
81319: PUSH
81320: LD_INT 30
81322: PUSH
81323: LD_INT 0
81325: PUSH
81326: EMPTY
81327: LIST
81328: LIST
81329: PUSH
81330: LD_INT 30
81332: PUSH
81333: LD_INT 1
81335: PUSH
81336: EMPTY
81337: LIST
81338: LIST
81339: PUSH
81340: EMPTY
81341: LIST
81342: LIST
81343: LIST
81344: PUSH
81345: EMPTY
81346: LIST
81347: LIST
81348: PPUSH
81349: CALL_OW 69
81353: ST_TO_ADDR
// if not tmp then
81354: LD_VAR 0 4
81358: NOT
81359: IFFALSE 81363
// exit ;
81361: GO 81422
// for i in tmp do
81363: LD_ADDR_VAR 0 2
81367: PUSH
81368: LD_VAR 0 4
81372: PUSH
81373: FOR_IN
81374: IFFALSE 81420
// for j = 1 to 3 do
81376: LD_ADDR_VAR 0 3
81380: PUSH
81381: DOUBLE
81382: LD_INT 1
81384: DEC
81385: ST_TO_ADDR
81386: LD_INT 3
81388: PUSH
81389: FOR_TO
81390: IFFALSE 81416
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
81392: LD_VAR 0 2
81396: PPUSH
81397: CALL_OW 274
81401: PPUSH
81402: LD_VAR 0 3
81406: PPUSH
81407: LD_INT 99999
81409: PPUSH
81410: CALL_OW 277
81414: GO 81389
81416: POP
81417: POP
81418: GO 81373
81420: POP
81421: POP
// end ;
81422: LD_VAR 0 1
81426: RET
// export function hHackSetLevel10 ; var i , j ; begin
81427: LD_INT 0
81429: PPUSH
81430: PPUSH
81431: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81432: LD_ADDR_VAR 0 2
81436: PUSH
81437: LD_INT 21
81439: PUSH
81440: LD_INT 1
81442: PUSH
81443: EMPTY
81444: LIST
81445: LIST
81446: PPUSH
81447: CALL_OW 69
81451: PUSH
81452: FOR_IN
81453: IFFALSE 81505
// if IsSelected ( i ) then
81455: LD_VAR 0 2
81459: PPUSH
81460: CALL_OW 306
81464: IFFALSE 81503
// begin for j := 1 to 4 do
81466: LD_ADDR_VAR 0 3
81470: PUSH
81471: DOUBLE
81472: LD_INT 1
81474: DEC
81475: ST_TO_ADDR
81476: LD_INT 4
81478: PUSH
81479: FOR_TO
81480: IFFALSE 81501
// SetSkill ( i , j , 10 ) ;
81482: LD_VAR 0 2
81486: PPUSH
81487: LD_VAR 0 3
81491: PPUSH
81492: LD_INT 10
81494: PPUSH
81495: CALL_OW 237
81499: GO 81479
81501: POP
81502: POP
// end ;
81503: GO 81452
81505: POP
81506: POP
// end ;
81507: LD_VAR 0 1
81511: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
81512: LD_INT 0
81514: PPUSH
81515: PPUSH
81516: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
81517: LD_ADDR_VAR 0 2
81521: PUSH
81522: LD_INT 22
81524: PUSH
81525: LD_OWVAR 2
81529: PUSH
81530: EMPTY
81531: LIST
81532: LIST
81533: PUSH
81534: LD_INT 21
81536: PUSH
81537: LD_INT 1
81539: PUSH
81540: EMPTY
81541: LIST
81542: LIST
81543: PUSH
81544: EMPTY
81545: LIST
81546: LIST
81547: PPUSH
81548: CALL_OW 69
81552: PUSH
81553: FOR_IN
81554: IFFALSE 81595
// begin for j := 1 to 4 do
81556: LD_ADDR_VAR 0 3
81560: PUSH
81561: DOUBLE
81562: LD_INT 1
81564: DEC
81565: ST_TO_ADDR
81566: LD_INT 4
81568: PUSH
81569: FOR_TO
81570: IFFALSE 81591
// SetSkill ( i , j , 10 ) ;
81572: LD_VAR 0 2
81576: PPUSH
81577: LD_VAR 0 3
81581: PPUSH
81582: LD_INT 10
81584: PPUSH
81585: CALL_OW 237
81589: GO 81569
81591: POP
81592: POP
// end ;
81593: GO 81553
81595: POP
81596: POP
// end ;
81597: LD_VAR 0 1
81601: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
81602: LD_INT 0
81604: PPUSH
// uc_side := your_side ;
81605: LD_ADDR_OWVAR 20
81609: PUSH
81610: LD_OWVAR 2
81614: ST_TO_ADDR
// uc_nation := nation ;
81615: LD_ADDR_OWVAR 21
81619: PUSH
81620: LD_VAR 0 1
81624: ST_TO_ADDR
// InitHc ;
81625: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
81629: LD_INT 0
81631: PPUSH
81632: LD_VAR 0 2
81636: PPUSH
81637: LD_VAR 0 3
81641: PPUSH
81642: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
81646: LD_VAR 0 4
81650: PPUSH
81651: LD_VAR 0 5
81655: PPUSH
81656: CALL_OW 428
81660: PUSH
81661: LD_INT 0
81663: EQUAL
81664: IFFALSE 81688
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
81666: CALL_OW 44
81670: PPUSH
81671: LD_VAR 0 4
81675: PPUSH
81676: LD_VAR 0 5
81680: PPUSH
81681: LD_INT 1
81683: PPUSH
81684: CALL_OW 48
// end ;
81688: LD_VAR 0 6
81692: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
81693: LD_INT 0
81695: PPUSH
81696: PPUSH
// uc_side := your_side ;
81697: LD_ADDR_OWVAR 20
81701: PUSH
81702: LD_OWVAR 2
81706: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
81707: LD_VAR 0 1
81711: PUSH
81712: LD_INT 1
81714: PUSH
81715: LD_INT 2
81717: PUSH
81718: LD_INT 3
81720: PUSH
81721: LD_INT 4
81723: PUSH
81724: LD_INT 5
81726: PUSH
81727: EMPTY
81728: LIST
81729: LIST
81730: LIST
81731: LIST
81732: LIST
81733: IN
81734: IFFALSE 81746
// uc_nation := nation_american else
81736: LD_ADDR_OWVAR 21
81740: PUSH
81741: LD_INT 1
81743: ST_TO_ADDR
81744: GO 81789
// if chassis in [ 11 , 12 , 13 , 14 ] then
81746: LD_VAR 0 1
81750: PUSH
81751: LD_INT 11
81753: PUSH
81754: LD_INT 12
81756: PUSH
81757: LD_INT 13
81759: PUSH
81760: LD_INT 14
81762: PUSH
81763: EMPTY
81764: LIST
81765: LIST
81766: LIST
81767: LIST
81768: IN
81769: IFFALSE 81781
// uc_nation := nation_arabian else
81771: LD_ADDR_OWVAR 21
81775: PUSH
81776: LD_INT 2
81778: ST_TO_ADDR
81779: GO 81789
// uc_nation := nation_russian ;
81781: LD_ADDR_OWVAR 21
81785: PUSH
81786: LD_INT 3
81788: ST_TO_ADDR
// vc_chassis := chassis ;
81789: LD_ADDR_OWVAR 37
81793: PUSH
81794: LD_VAR 0 1
81798: ST_TO_ADDR
// vc_engine := engine ;
81799: LD_ADDR_OWVAR 39
81803: PUSH
81804: LD_VAR 0 2
81808: ST_TO_ADDR
// vc_control := control ;
81809: LD_ADDR_OWVAR 38
81813: PUSH
81814: LD_VAR 0 3
81818: ST_TO_ADDR
// vc_weapon := weapon ;
81819: LD_ADDR_OWVAR 40
81823: PUSH
81824: LD_VAR 0 4
81828: ST_TO_ADDR
// un := CreateVehicle ;
81829: LD_ADDR_VAR 0 8
81833: PUSH
81834: CALL_OW 45
81838: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
81839: LD_VAR 0 8
81843: PPUSH
81844: LD_INT 0
81846: PPUSH
81847: LD_INT 5
81849: PPUSH
81850: CALL_OW 12
81854: PPUSH
81855: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
81859: LD_VAR 0 8
81863: PPUSH
81864: LD_VAR 0 5
81868: PPUSH
81869: LD_VAR 0 6
81873: PPUSH
81874: LD_INT 1
81876: PPUSH
81877: CALL_OW 48
// end ;
81881: LD_VAR 0 7
81885: RET
// export hInvincible ; every 1 do
81886: GO 81888
81888: DISABLE
// hInvincible := [ ] ;
81889: LD_ADDR_EXP 123
81893: PUSH
81894: EMPTY
81895: ST_TO_ADDR
81896: END
// every 10 do var i ;
81897: GO 81899
81899: DISABLE
81900: LD_INT 0
81902: PPUSH
// begin enable ;
81903: ENABLE
// if not hInvincible then
81904: LD_EXP 123
81908: NOT
81909: IFFALSE 81913
// exit ;
81911: GO 81957
// for i in hInvincible do
81913: LD_ADDR_VAR 0 1
81917: PUSH
81918: LD_EXP 123
81922: PUSH
81923: FOR_IN
81924: IFFALSE 81955
// if GetLives ( i ) < 1000 then
81926: LD_VAR 0 1
81930: PPUSH
81931: CALL_OW 256
81935: PUSH
81936: LD_INT 1000
81938: LESS
81939: IFFALSE 81953
// SetLives ( i , 1000 ) ;
81941: LD_VAR 0 1
81945: PPUSH
81946: LD_INT 1000
81948: PPUSH
81949: CALL_OW 234
81953: GO 81923
81955: POP
81956: POP
// end ;
81957: PPOPN 1
81959: END
// export function hHackInvincible ; var i ; begin
81960: LD_INT 0
81962: PPUSH
81963: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
81964: LD_ADDR_VAR 0 2
81968: PUSH
81969: LD_INT 2
81971: PUSH
81972: LD_INT 21
81974: PUSH
81975: LD_INT 1
81977: PUSH
81978: EMPTY
81979: LIST
81980: LIST
81981: PUSH
81982: LD_INT 21
81984: PUSH
81985: LD_INT 2
81987: PUSH
81988: EMPTY
81989: LIST
81990: LIST
81991: PUSH
81992: EMPTY
81993: LIST
81994: LIST
81995: LIST
81996: PPUSH
81997: CALL_OW 69
82001: PUSH
82002: FOR_IN
82003: IFFALSE 82064
// if IsSelected ( i ) then
82005: LD_VAR 0 2
82009: PPUSH
82010: CALL_OW 306
82014: IFFALSE 82062
// begin if i in hInvincible then
82016: LD_VAR 0 2
82020: PUSH
82021: LD_EXP 123
82025: IN
82026: IFFALSE 82046
// hInvincible := hInvincible diff i else
82028: LD_ADDR_EXP 123
82032: PUSH
82033: LD_EXP 123
82037: PUSH
82038: LD_VAR 0 2
82042: DIFF
82043: ST_TO_ADDR
82044: GO 82062
// hInvincible := hInvincible union i ;
82046: LD_ADDR_EXP 123
82050: PUSH
82051: LD_EXP 123
82055: PUSH
82056: LD_VAR 0 2
82060: UNION
82061: ST_TO_ADDR
// end ;
82062: GO 82002
82064: POP
82065: POP
// end ;
82066: LD_VAR 0 1
82070: RET
// export function hHackInvisible ; var i , j ; begin
82071: LD_INT 0
82073: PPUSH
82074: PPUSH
82075: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82076: LD_ADDR_VAR 0 2
82080: PUSH
82081: LD_INT 21
82083: PUSH
82084: LD_INT 1
82086: PUSH
82087: EMPTY
82088: LIST
82089: LIST
82090: PPUSH
82091: CALL_OW 69
82095: PUSH
82096: FOR_IN
82097: IFFALSE 82121
// if IsSelected ( i ) then
82099: LD_VAR 0 2
82103: PPUSH
82104: CALL_OW 306
82108: IFFALSE 82119
// ComForceInvisible ( i ) ;
82110: LD_VAR 0 2
82114: PPUSH
82115: CALL_OW 496
82119: GO 82096
82121: POP
82122: POP
// end ;
82123: LD_VAR 0 1
82127: RET
// export function hHackChangeYourSide ; begin
82128: LD_INT 0
82130: PPUSH
// if your_side = 8 then
82131: LD_OWVAR 2
82135: PUSH
82136: LD_INT 8
82138: EQUAL
82139: IFFALSE 82151
// your_side := 0 else
82141: LD_ADDR_OWVAR 2
82145: PUSH
82146: LD_INT 0
82148: ST_TO_ADDR
82149: GO 82165
// your_side := your_side + 1 ;
82151: LD_ADDR_OWVAR 2
82155: PUSH
82156: LD_OWVAR 2
82160: PUSH
82161: LD_INT 1
82163: PLUS
82164: ST_TO_ADDR
// end ;
82165: LD_VAR 0 1
82169: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82170: LD_INT 0
82172: PPUSH
82173: PPUSH
82174: PPUSH
// for i in all_units do
82175: LD_ADDR_VAR 0 2
82179: PUSH
82180: LD_OWVAR 3
82184: PUSH
82185: FOR_IN
82186: IFFALSE 82264
// if IsSelected ( i ) then
82188: LD_VAR 0 2
82192: PPUSH
82193: CALL_OW 306
82197: IFFALSE 82262
// begin j := GetSide ( i ) ;
82199: LD_ADDR_VAR 0 3
82203: PUSH
82204: LD_VAR 0 2
82208: PPUSH
82209: CALL_OW 255
82213: ST_TO_ADDR
// if j = 8 then
82214: LD_VAR 0 3
82218: PUSH
82219: LD_INT 8
82221: EQUAL
82222: IFFALSE 82234
// j := 0 else
82224: LD_ADDR_VAR 0 3
82228: PUSH
82229: LD_INT 0
82231: ST_TO_ADDR
82232: GO 82248
// j := j + 1 ;
82234: LD_ADDR_VAR 0 3
82238: PUSH
82239: LD_VAR 0 3
82243: PUSH
82244: LD_INT 1
82246: PLUS
82247: ST_TO_ADDR
// SetSide ( i , j ) ;
82248: LD_VAR 0 2
82252: PPUSH
82253: LD_VAR 0 3
82257: PPUSH
82258: CALL_OW 235
// end ;
82262: GO 82185
82264: POP
82265: POP
// end ;
82266: LD_VAR 0 1
82270: RET
// export function hHackFog ; begin
82271: LD_INT 0
82273: PPUSH
// FogOff ( true ) ;
82274: LD_INT 1
82276: PPUSH
82277: CALL_OW 344
// end ;
82281: LD_VAR 0 1
82285: RET
// export function hHackTeleport ( unit , x , y ) ; begin
82286: LD_INT 0
82288: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
82289: LD_VAR 0 1
82293: PPUSH
82294: LD_VAR 0 2
82298: PPUSH
82299: LD_VAR 0 3
82303: PPUSH
82304: LD_INT 1
82306: PPUSH
82307: LD_INT 1
82309: PPUSH
82310: CALL_OW 483
// CenterOnXY ( x , y ) ;
82314: LD_VAR 0 2
82318: PPUSH
82319: LD_VAR 0 3
82323: PPUSH
82324: CALL_OW 84
// end ;
82328: LD_VAR 0 4
82332: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
82333: LD_INT 0
82335: PPUSH
82336: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
82337: LD_VAR 0 1
82341: NOT
82342: PUSH
82343: LD_VAR 0 2
82347: PPUSH
82348: LD_VAR 0 3
82352: PPUSH
82353: CALL_OW 488
82357: NOT
82358: OR
82359: PUSH
82360: LD_VAR 0 1
82364: PPUSH
82365: CALL_OW 266
82369: PUSH
82370: LD_INT 3
82372: NONEQUAL
82373: PUSH
82374: LD_VAR 0 1
82378: PPUSH
82379: CALL_OW 247
82383: PUSH
82384: LD_INT 1
82386: EQUAL
82387: NOT
82388: AND
82389: OR
82390: IFFALSE 82394
// exit ;
82392: GO 82543
// if GetType ( factory ) = unit_human then
82394: LD_VAR 0 1
82398: PPUSH
82399: CALL_OW 247
82403: PUSH
82404: LD_INT 1
82406: EQUAL
82407: IFFALSE 82424
// factory := IsInUnit ( factory ) ;
82409: LD_ADDR_VAR 0 1
82413: PUSH
82414: LD_VAR 0 1
82418: PPUSH
82419: CALL_OW 310
82423: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
82424: LD_VAR 0 1
82428: PPUSH
82429: CALL_OW 266
82433: PUSH
82434: LD_INT 3
82436: NONEQUAL
82437: IFFALSE 82441
// exit ;
82439: GO 82543
// if HexInfo ( x , y ) = factory then
82441: LD_VAR 0 2
82445: PPUSH
82446: LD_VAR 0 3
82450: PPUSH
82451: CALL_OW 428
82455: PUSH
82456: LD_VAR 0 1
82460: EQUAL
82461: IFFALSE 82488
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
82463: LD_ADDR_EXP 124
82467: PUSH
82468: LD_EXP 124
82472: PPUSH
82473: LD_VAR 0 1
82477: PPUSH
82478: LD_INT 0
82480: PPUSH
82481: CALL_OW 1
82485: ST_TO_ADDR
82486: GO 82539
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
82488: LD_ADDR_EXP 124
82492: PUSH
82493: LD_EXP 124
82497: PPUSH
82498: LD_VAR 0 1
82502: PPUSH
82503: LD_VAR 0 1
82507: PPUSH
82508: CALL_OW 255
82512: PUSH
82513: LD_VAR 0 1
82517: PUSH
82518: LD_VAR 0 2
82522: PUSH
82523: LD_VAR 0 3
82527: PUSH
82528: EMPTY
82529: LIST
82530: LIST
82531: LIST
82532: LIST
82533: PPUSH
82534: CALL_OW 1
82538: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82539: CALL 82548 0 0
// end ;
82543: LD_VAR 0 4
82547: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
82548: LD_INT 0
82550: PPUSH
82551: PPUSH
82552: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
82553: LD_STRING resetFactoryWaypoint();
82555: PPUSH
82556: CALL_OW 559
// if factoryWaypoints then
82560: LD_EXP 124
82564: IFFALSE 82690
// begin list := PrepareArray ( factoryWaypoints ) ;
82566: LD_ADDR_VAR 0 3
82570: PUSH
82571: LD_EXP 124
82575: PPUSH
82576: CALL 67834 0 1
82580: ST_TO_ADDR
// for i := 1 to list do
82581: LD_ADDR_VAR 0 2
82585: PUSH
82586: DOUBLE
82587: LD_INT 1
82589: DEC
82590: ST_TO_ADDR
82591: LD_VAR 0 3
82595: PUSH
82596: FOR_TO
82597: IFFALSE 82688
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82599: LD_STRING setFactoryWaypointXY(
82601: PUSH
82602: LD_VAR 0 3
82606: PUSH
82607: LD_VAR 0 2
82611: ARRAY
82612: PUSH
82613: LD_INT 1
82615: ARRAY
82616: STR
82617: PUSH
82618: LD_STRING ,
82620: STR
82621: PUSH
82622: LD_VAR 0 3
82626: PUSH
82627: LD_VAR 0 2
82631: ARRAY
82632: PUSH
82633: LD_INT 2
82635: ARRAY
82636: STR
82637: PUSH
82638: LD_STRING ,
82640: STR
82641: PUSH
82642: LD_VAR 0 3
82646: PUSH
82647: LD_VAR 0 2
82651: ARRAY
82652: PUSH
82653: LD_INT 3
82655: ARRAY
82656: STR
82657: PUSH
82658: LD_STRING ,
82660: STR
82661: PUSH
82662: LD_VAR 0 3
82666: PUSH
82667: LD_VAR 0 2
82671: ARRAY
82672: PUSH
82673: LD_INT 4
82675: ARRAY
82676: STR
82677: PUSH
82678: LD_STRING )
82680: STR
82681: PPUSH
82682: CALL_OW 559
82686: GO 82596
82688: POP
82689: POP
// end ; end ;
82690: LD_VAR 0 1
82694: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
82695: LD_INT 0
82697: PPUSH
// if HexInfo ( x , y ) = warehouse then
82698: LD_VAR 0 2
82702: PPUSH
82703: LD_VAR 0 3
82707: PPUSH
82708: CALL_OW 428
82712: PUSH
82713: LD_VAR 0 1
82717: EQUAL
82718: IFFALSE 82745
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
82720: LD_ADDR_EXP 125
82724: PUSH
82725: LD_EXP 125
82729: PPUSH
82730: LD_VAR 0 1
82734: PPUSH
82735: LD_INT 0
82737: PPUSH
82738: CALL_OW 1
82742: ST_TO_ADDR
82743: GO 82796
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
82745: LD_ADDR_EXP 125
82749: PUSH
82750: LD_EXP 125
82754: PPUSH
82755: LD_VAR 0 1
82759: PPUSH
82760: LD_VAR 0 1
82764: PPUSH
82765: CALL_OW 255
82769: PUSH
82770: LD_VAR 0 1
82774: PUSH
82775: LD_VAR 0 2
82779: PUSH
82780: LD_VAR 0 3
82784: PUSH
82785: EMPTY
82786: LIST
82787: LIST
82788: LIST
82789: LIST
82790: PPUSH
82791: CALL_OW 1
82795: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
82796: CALL 82805 0 0
// end ;
82800: LD_VAR 0 4
82804: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
82805: LD_INT 0
82807: PPUSH
82808: PPUSH
82809: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
82810: LD_STRING resetWarehouseGatheringPoints();
82812: PPUSH
82813: CALL_OW 559
// if warehouseGatheringPoints then
82817: LD_EXP 125
82821: IFFALSE 82947
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
82823: LD_ADDR_VAR 0 3
82827: PUSH
82828: LD_EXP 125
82832: PPUSH
82833: CALL 67834 0 1
82837: ST_TO_ADDR
// for i := 1 to list do
82838: LD_ADDR_VAR 0 2
82842: PUSH
82843: DOUBLE
82844: LD_INT 1
82846: DEC
82847: ST_TO_ADDR
82848: LD_VAR 0 3
82852: PUSH
82853: FOR_TO
82854: IFFALSE 82945
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82856: LD_STRING setWarehouseGatheringPointXY(
82858: PUSH
82859: LD_VAR 0 3
82863: PUSH
82864: LD_VAR 0 2
82868: ARRAY
82869: PUSH
82870: LD_INT 1
82872: ARRAY
82873: STR
82874: PUSH
82875: LD_STRING ,
82877: STR
82878: PUSH
82879: LD_VAR 0 3
82883: PUSH
82884: LD_VAR 0 2
82888: ARRAY
82889: PUSH
82890: LD_INT 2
82892: ARRAY
82893: STR
82894: PUSH
82895: LD_STRING ,
82897: STR
82898: PUSH
82899: LD_VAR 0 3
82903: PUSH
82904: LD_VAR 0 2
82908: ARRAY
82909: PUSH
82910: LD_INT 3
82912: ARRAY
82913: STR
82914: PUSH
82915: LD_STRING ,
82917: STR
82918: PUSH
82919: LD_VAR 0 3
82923: PUSH
82924: LD_VAR 0 2
82928: ARRAY
82929: PUSH
82930: LD_INT 4
82932: ARRAY
82933: STR
82934: PUSH
82935: LD_STRING )
82937: STR
82938: PPUSH
82939: CALL_OW 559
82943: GO 82853
82945: POP
82946: POP
// end ; end ;
82947: LD_VAR 0 1
82951: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
82952: LD_EXP 125
82956: IFFALSE 83641
82958: GO 82960
82960: DISABLE
82961: LD_INT 0
82963: PPUSH
82964: PPUSH
82965: PPUSH
82966: PPUSH
82967: PPUSH
82968: PPUSH
82969: PPUSH
82970: PPUSH
82971: PPUSH
// begin enable ;
82972: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
82973: LD_ADDR_VAR 0 3
82977: PUSH
82978: LD_EXP 125
82982: PPUSH
82983: CALL 67834 0 1
82987: ST_TO_ADDR
// if not list then
82988: LD_VAR 0 3
82992: NOT
82993: IFFALSE 82997
// exit ;
82995: GO 83641
// for i := 1 to list do
82997: LD_ADDR_VAR 0 1
83001: PUSH
83002: DOUBLE
83003: LD_INT 1
83005: DEC
83006: ST_TO_ADDR
83007: LD_VAR 0 3
83011: PUSH
83012: FOR_TO
83013: IFFALSE 83639
// begin depot := list [ i ] [ 2 ] ;
83015: LD_ADDR_VAR 0 8
83019: PUSH
83020: LD_VAR 0 3
83024: PUSH
83025: LD_VAR 0 1
83029: ARRAY
83030: PUSH
83031: LD_INT 2
83033: ARRAY
83034: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
83035: LD_ADDR_VAR 0 5
83039: PUSH
83040: LD_VAR 0 3
83044: PUSH
83045: LD_VAR 0 1
83049: ARRAY
83050: PUSH
83051: LD_INT 1
83053: ARRAY
83054: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
83055: LD_VAR 0 8
83059: PPUSH
83060: CALL_OW 301
83064: PUSH
83065: LD_VAR 0 5
83069: PUSH
83070: LD_VAR 0 8
83074: PPUSH
83075: CALL_OW 255
83079: NONEQUAL
83080: OR
83081: IFFALSE 83110
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
83083: LD_ADDR_EXP 125
83087: PUSH
83088: LD_EXP 125
83092: PPUSH
83093: LD_VAR 0 8
83097: PPUSH
83098: LD_INT 0
83100: PPUSH
83101: CALL_OW 1
83105: ST_TO_ADDR
// exit ;
83106: POP
83107: POP
83108: GO 83641
// end ; x := list [ i ] [ 3 ] ;
83110: LD_ADDR_VAR 0 6
83114: PUSH
83115: LD_VAR 0 3
83119: PUSH
83120: LD_VAR 0 1
83124: ARRAY
83125: PUSH
83126: LD_INT 3
83128: ARRAY
83129: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
83130: LD_ADDR_VAR 0 7
83134: PUSH
83135: LD_VAR 0 3
83139: PUSH
83140: LD_VAR 0 1
83144: ARRAY
83145: PUSH
83146: LD_INT 4
83148: ARRAY
83149: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
83150: LD_ADDR_VAR 0 9
83154: PUSH
83155: LD_VAR 0 6
83159: PPUSH
83160: LD_VAR 0 7
83164: PPUSH
83165: LD_INT 16
83167: PPUSH
83168: CALL 66422 0 3
83172: ST_TO_ADDR
// if not cratesNearbyPoint then
83173: LD_VAR 0 9
83177: NOT
83178: IFFALSE 83184
// exit ;
83180: POP
83181: POP
83182: GO 83641
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
83184: LD_ADDR_VAR 0 4
83188: PUSH
83189: LD_INT 22
83191: PUSH
83192: LD_VAR 0 5
83196: PUSH
83197: EMPTY
83198: LIST
83199: LIST
83200: PUSH
83201: LD_INT 3
83203: PUSH
83204: LD_INT 60
83206: PUSH
83207: EMPTY
83208: LIST
83209: PUSH
83210: EMPTY
83211: LIST
83212: LIST
83213: PUSH
83214: LD_INT 91
83216: PUSH
83217: LD_VAR 0 8
83221: PUSH
83222: LD_INT 6
83224: PUSH
83225: EMPTY
83226: LIST
83227: LIST
83228: LIST
83229: PUSH
83230: LD_INT 2
83232: PUSH
83233: LD_INT 25
83235: PUSH
83236: LD_INT 2
83238: PUSH
83239: EMPTY
83240: LIST
83241: LIST
83242: PUSH
83243: LD_INT 25
83245: PUSH
83246: LD_INT 16
83248: PUSH
83249: EMPTY
83250: LIST
83251: LIST
83252: PUSH
83253: EMPTY
83254: LIST
83255: LIST
83256: LIST
83257: PUSH
83258: EMPTY
83259: LIST
83260: LIST
83261: LIST
83262: LIST
83263: PPUSH
83264: CALL_OW 69
83268: PUSH
83269: LD_VAR 0 8
83273: PPUSH
83274: CALL_OW 313
83278: PPUSH
83279: LD_INT 3
83281: PUSH
83282: LD_INT 60
83284: PUSH
83285: EMPTY
83286: LIST
83287: PUSH
83288: EMPTY
83289: LIST
83290: LIST
83291: PUSH
83292: LD_INT 2
83294: PUSH
83295: LD_INT 25
83297: PUSH
83298: LD_INT 2
83300: PUSH
83301: EMPTY
83302: LIST
83303: LIST
83304: PUSH
83305: LD_INT 25
83307: PUSH
83308: LD_INT 16
83310: PUSH
83311: EMPTY
83312: LIST
83313: LIST
83314: PUSH
83315: EMPTY
83316: LIST
83317: LIST
83318: LIST
83319: PUSH
83320: EMPTY
83321: LIST
83322: LIST
83323: PPUSH
83324: CALL_OW 72
83328: UNION
83329: ST_TO_ADDR
// if tmp then
83330: LD_VAR 0 4
83334: IFFALSE 83414
// begin tmp := ShrinkArray ( tmp , 3 ) ;
83336: LD_ADDR_VAR 0 4
83340: PUSH
83341: LD_VAR 0 4
83345: PPUSH
83346: LD_INT 3
83348: PPUSH
83349: CALL 64391 0 2
83353: ST_TO_ADDR
// for j in tmp do
83354: LD_ADDR_VAR 0 2
83358: PUSH
83359: LD_VAR 0 4
83363: PUSH
83364: FOR_IN
83365: IFFALSE 83408
// begin if IsInUnit ( j ) then
83367: LD_VAR 0 2
83371: PPUSH
83372: CALL_OW 310
83376: IFFALSE 83387
// ComExit ( j ) ;
83378: LD_VAR 0 2
83382: PPUSH
83383: CALL 64474 0 1
// AddComCollect ( j , x , y ) ;
83387: LD_VAR 0 2
83391: PPUSH
83392: LD_VAR 0 6
83396: PPUSH
83397: LD_VAR 0 7
83401: PPUSH
83402: CALL_OW 177
// end ;
83406: GO 83364
83408: POP
83409: POP
// exit ;
83410: POP
83411: POP
83412: GO 83641
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
83414: LD_ADDR_VAR 0 4
83418: PUSH
83419: LD_INT 22
83421: PUSH
83422: LD_VAR 0 5
83426: PUSH
83427: EMPTY
83428: LIST
83429: LIST
83430: PUSH
83431: LD_INT 91
83433: PUSH
83434: LD_VAR 0 8
83438: PUSH
83439: LD_INT 8
83441: PUSH
83442: EMPTY
83443: LIST
83444: LIST
83445: LIST
83446: PUSH
83447: LD_INT 2
83449: PUSH
83450: LD_INT 34
83452: PUSH
83453: LD_INT 12
83455: PUSH
83456: EMPTY
83457: LIST
83458: LIST
83459: PUSH
83460: LD_INT 34
83462: PUSH
83463: LD_INT 51
83465: PUSH
83466: EMPTY
83467: LIST
83468: LIST
83469: PUSH
83470: LD_INT 34
83472: PUSH
83473: LD_INT 32
83475: PUSH
83476: EMPTY
83477: LIST
83478: LIST
83479: PUSH
83480: LD_INT 34
83482: PUSH
83483: LD_INT 89
83485: PUSH
83486: EMPTY
83487: LIST
83488: LIST
83489: PUSH
83490: EMPTY
83491: LIST
83492: LIST
83493: LIST
83494: LIST
83495: LIST
83496: PUSH
83497: EMPTY
83498: LIST
83499: LIST
83500: LIST
83501: PPUSH
83502: CALL_OW 69
83506: ST_TO_ADDR
// if tmp then
83507: LD_VAR 0 4
83511: IFFALSE 83637
// begin for j in tmp do
83513: LD_ADDR_VAR 0 2
83517: PUSH
83518: LD_VAR 0 4
83522: PUSH
83523: FOR_IN
83524: IFFALSE 83635
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
83526: LD_VAR 0 2
83530: PPUSH
83531: CALL_OW 262
83535: PUSH
83536: LD_INT 3
83538: EQUAL
83539: PUSH
83540: LD_VAR 0 2
83544: PPUSH
83545: CALL_OW 261
83549: PUSH
83550: LD_INT 20
83552: GREATER
83553: OR
83554: PUSH
83555: LD_VAR 0 2
83559: PPUSH
83560: CALL_OW 314
83564: NOT
83565: AND
83566: PUSH
83567: LD_VAR 0 2
83571: PPUSH
83572: CALL_OW 263
83576: PUSH
83577: LD_INT 1
83579: NONEQUAL
83580: PUSH
83581: LD_VAR 0 2
83585: PPUSH
83586: CALL_OW 311
83590: OR
83591: AND
83592: IFFALSE 83633
// begin ComCollect ( j , x , y ) ;
83594: LD_VAR 0 2
83598: PPUSH
83599: LD_VAR 0 6
83603: PPUSH
83604: LD_VAR 0 7
83608: PPUSH
83609: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
83613: LD_VAR 0 2
83617: PPUSH
83618: LD_VAR 0 8
83622: PPUSH
83623: CALL_OW 172
// exit ;
83627: POP
83628: POP
83629: POP
83630: POP
83631: GO 83641
// end ;
83633: GO 83523
83635: POP
83636: POP
// end ; end ;
83637: GO 83012
83639: POP
83640: POP
// end ; end_of_file
83641: PPOPN 9
83643: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83644: LD_VAR 0 1
83648: PUSH
83649: LD_INT 200
83651: DOUBLE
83652: GREATEREQUAL
83653: IFFALSE 83661
83655: LD_INT 299
83657: DOUBLE
83658: LESSEQUAL
83659: IFTRUE 83663
83661: GO 83695
83663: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83664: LD_VAR 0 1
83668: PPUSH
83669: LD_VAR 0 2
83673: PPUSH
83674: LD_VAR 0 3
83678: PPUSH
83679: LD_VAR 0 4
83683: PPUSH
83684: LD_VAR 0 5
83688: PPUSH
83689: CALL 84183 0 5
83693: GO 83772
83695: LD_INT 300
83697: DOUBLE
83698: GREATEREQUAL
83699: IFFALSE 83707
83701: LD_INT 399
83703: DOUBLE
83704: LESSEQUAL
83705: IFTRUE 83709
83707: GO 83771
83709: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83710: LD_VAR 0 1
83714: PPUSH
83715: LD_VAR 0 2
83719: PPUSH
83720: LD_VAR 0 3
83724: PPUSH
83725: LD_VAR 0 4
83729: PPUSH
83730: LD_VAR 0 5
83734: PPUSH
83735: LD_VAR 0 6
83739: PPUSH
83740: LD_VAR 0 7
83744: PPUSH
83745: LD_VAR 0 8
83749: PPUSH
83750: LD_VAR 0 9
83754: PPUSH
83755: LD_VAR 0 10
83759: PPUSH
83760: LD_VAR 0 11
83764: PPUSH
83765: CALL 80353 0 11
83769: GO 83772
83771: POP
// end ;
83772: PPOPN 11
83774: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83775: LD_VAR 0 1
83779: PPUSH
83780: LD_VAR 0 2
83784: PPUSH
83785: LD_VAR 0 3
83789: PPUSH
83790: LD_VAR 0 4
83794: PPUSH
83795: LD_VAR 0 5
83799: PPUSH
83800: CALL 83919 0 5
// end ; end_of_file
83804: PPOPN 5
83806: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
83807: LD_INT 0
83809: PPUSH
83810: PPUSH
83811: PPUSH
83812: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
83813: LD_VAR 0 1
83817: PPUSH
83818: CALL_OW 264
83822: PUSH
83823: LD_INT 91
83825: EQUAL
83826: IFFALSE 83898
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
83828: LD_INT 68
83830: PPUSH
83831: LD_VAR 0 1
83835: PPUSH
83836: CALL_OW 255
83840: PPUSH
83841: CALL_OW 321
83845: PUSH
83846: LD_INT 2
83848: EQUAL
83849: IFFALSE 83861
// eff := 70 else
83851: LD_ADDR_VAR 0 4
83855: PUSH
83856: LD_INT 70
83858: ST_TO_ADDR
83859: GO 83869
// eff := 30 ;
83861: LD_ADDR_VAR 0 4
83865: PUSH
83866: LD_INT 30
83868: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
83869: LD_VAR 0 1
83873: PPUSH
83874: CALL_OW 250
83878: PPUSH
83879: LD_VAR 0 1
83883: PPUSH
83884: CALL_OW 251
83888: PPUSH
83889: LD_VAR 0 4
83893: PPUSH
83894: CALL_OW 495
// end ; end ;
83898: LD_VAR 0 2
83902: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
83903: LD_INT 0
83905: PPUSH
// end ;
83906: LD_VAR 0 4
83910: RET
// export function SOS_Command ( cmd ) ; begin
83911: LD_INT 0
83913: PPUSH
// end ;
83914: LD_VAR 0 2
83918: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
83919: LD_INT 0
83921: PPUSH
// end ;
83922: LD_VAR 0 6
83926: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
83927: LD_INT 0
83929: PPUSH
83930: PPUSH
// if not vehicle or not factory then
83931: LD_VAR 0 1
83935: NOT
83936: PUSH
83937: LD_VAR 0 2
83941: NOT
83942: OR
83943: IFFALSE 83947
// exit ;
83945: GO 84178
// if factoryWaypoints >= factory then
83947: LD_EXP 124
83951: PUSH
83952: LD_VAR 0 2
83956: GREATEREQUAL
83957: IFFALSE 84178
// if factoryWaypoints [ factory ] then
83959: LD_EXP 124
83963: PUSH
83964: LD_VAR 0 2
83968: ARRAY
83969: IFFALSE 84178
// begin if GetControl ( vehicle ) = control_manual then
83971: LD_VAR 0 1
83975: PPUSH
83976: CALL_OW 263
83980: PUSH
83981: LD_INT 1
83983: EQUAL
83984: IFFALSE 84065
// begin driver := IsDrivenBy ( vehicle ) ;
83986: LD_ADDR_VAR 0 4
83990: PUSH
83991: LD_VAR 0 1
83995: PPUSH
83996: CALL_OW 311
84000: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84001: LD_VAR 0 4
84005: PPUSH
84006: LD_EXP 124
84010: PUSH
84011: LD_VAR 0 2
84015: ARRAY
84016: PUSH
84017: LD_INT 3
84019: ARRAY
84020: PPUSH
84021: LD_EXP 124
84025: PUSH
84026: LD_VAR 0 2
84030: ARRAY
84031: PUSH
84032: LD_INT 4
84034: ARRAY
84035: PPUSH
84036: CALL_OW 171
// AddComExitVehicle ( driver ) ;
84040: LD_VAR 0 4
84044: PPUSH
84045: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
84049: LD_VAR 0 4
84053: PPUSH
84054: LD_VAR 0 2
84058: PPUSH
84059: CALL_OW 180
// end else
84063: GO 84178
// if GetControl ( vehicle ) = control_remote then
84065: LD_VAR 0 1
84069: PPUSH
84070: CALL_OW 263
84074: PUSH
84075: LD_INT 2
84077: EQUAL
84078: IFFALSE 84139
// begin wait ( 0 0$2 ) ;
84080: LD_INT 70
84082: PPUSH
84083: CALL_OW 67
// if Connect ( vehicle ) then
84087: LD_VAR 0 1
84091: PPUSH
84092: CALL 34733 0 1
84096: IFFALSE 84137
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84098: LD_VAR 0 1
84102: PPUSH
84103: LD_EXP 124
84107: PUSH
84108: LD_VAR 0 2
84112: ARRAY
84113: PUSH
84114: LD_INT 3
84116: ARRAY
84117: PPUSH
84118: LD_EXP 124
84122: PUSH
84123: LD_VAR 0 2
84127: ARRAY
84128: PUSH
84129: LD_INT 4
84131: ARRAY
84132: PPUSH
84133: CALL_OW 171
// end else
84137: GO 84178
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84139: LD_VAR 0 1
84143: PPUSH
84144: LD_EXP 124
84148: PUSH
84149: LD_VAR 0 2
84153: ARRAY
84154: PUSH
84155: LD_INT 3
84157: ARRAY
84158: PPUSH
84159: LD_EXP 124
84163: PUSH
84164: LD_VAR 0 2
84168: ARRAY
84169: PUSH
84170: LD_INT 4
84172: ARRAY
84173: PPUSH
84174: CALL_OW 171
// end ; end ;
84178: LD_VAR 0 3
84182: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84183: LD_INT 0
84185: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
84186: LD_VAR 0 1
84190: PUSH
84191: LD_INT 250
84193: EQUAL
84194: PUSH
84195: LD_VAR 0 2
84199: PPUSH
84200: CALL_OW 264
84204: PUSH
84205: LD_INT 81
84207: EQUAL
84208: AND
84209: IFFALSE 84230
// MinerPlaceMine ( unit , x , y ) ;
84211: LD_VAR 0 2
84215: PPUSH
84216: LD_VAR 0 4
84220: PPUSH
84221: LD_VAR 0 5
84225: PPUSH
84226: CALL 86615 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
84230: LD_VAR 0 1
84234: PUSH
84235: LD_INT 251
84237: EQUAL
84238: PUSH
84239: LD_VAR 0 2
84243: PPUSH
84244: CALL_OW 264
84248: PUSH
84249: LD_INT 81
84251: EQUAL
84252: AND
84253: IFFALSE 84274
// MinerDetonateMine ( unit , x , y ) ;
84255: LD_VAR 0 2
84259: PPUSH
84260: LD_VAR 0 4
84264: PPUSH
84265: LD_VAR 0 5
84269: PPUSH
84270: CALL 86890 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
84274: LD_VAR 0 1
84278: PUSH
84279: LD_INT 252
84281: EQUAL
84282: PUSH
84283: LD_VAR 0 2
84287: PPUSH
84288: CALL_OW 264
84292: PUSH
84293: LD_INT 81
84295: EQUAL
84296: AND
84297: IFFALSE 84318
// MinerCreateMinefield ( unit , x , y ) ;
84299: LD_VAR 0 2
84303: PPUSH
84304: LD_VAR 0 4
84308: PPUSH
84309: LD_VAR 0 5
84313: PPUSH
84314: CALL 87307 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
84318: LD_VAR 0 1
84322: PUSH
84323: LD_INT 253
84325: EQUAL
84326: PUSH
84327: LD_VAR 0 2
84331: PPUSH
84332: CALL_OW 257
84336: PUSH
84337: LD_INT 5
84339: EQUAL
84340: AND
84341: IFFALSE 84362
// ComBinocular ( unit , x , y ) ;
84343: LD_VAR 0 2
84347: PPUSH
84348: LD_VAR 0 4
84352: PPUSH
84353: LD_VAR 0 5
84357: PPUSH
84358: CALL 87676 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
84362: LD_VAR 0 1
84366: PUSH
84367: LD_INT 254
84369: EQUAL
84370: PUSH
84371: LD_VAR 0 2
84375: PPUSH
84376: CALL_OW 264
84380: PUSH
84381: LD_INT 99
84383: EQUAL
84384: AND
84385: PUSH
84386: LD_VAR 0 3
84390: PPUSH
84391: CALL_OW 263
84395: PUSH
84396: LD_INT 3
84398: EQUAL
84399: AND
84400: IFFALSE 84416
// HackDestroyVehicle ( unit , selectedUnit ) ;
84402: LD_VAR 0 2
84406: PPUSH
84407: LD_VAR 0 3
84411: PPUSH
84412: CALL 85979 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
84416: LD_VAR 0 1
84420: PUSH
84421: LD_INT 255
84423: EQUAL
84424: PUSH
84425: LD_VAR 0 2
84429: PPUSH
84430: CALL_OW 264
84434: PUSH
84435: LD_INT 14
84437: PUSH
84438: LD_INT 53
84440: PUSH
84441: EMPTY
84442: LIST
84443: LIST
84444: IN
84445: AND
84446: PUSH
84447: LD_VAR 0 4
84451: PPUSH
84452: LD_VAR 0 5
84456: PPUSH
84457: CALL_OW 488
84461: AND
84462: IFFALSE 84486
// CutTreeXYR ( unit , x , y , 12 ) ;
84464: LD_VAR 0 2
84468: PPUSH
84469: LD_VAR 0 4
84473: PPUSH
84474: LD_VAR 0 5
84478: PPUSH
84479: LD_INT 12
84481: PPUSH
84482: CALL 84549 0 4
// if cmd = 256 then
84486: LD_VAR 0 1
84490: PUSH
84491: LD_INT 256
84493: EQUAL
84494: IFFALSE 84515
// SetFactoryWaypoint ( unit , x , y ) ;
84496: LD_VAR 0 2
84500: PPUSH
84501: LD_VAR 0 4
84505: PPUSH
84506: LD_VAR 0 5
84510: PPUSH
84511: CALL 82333 0 3
// if cmd = 257 then
84515: LD_VAR 0 1
84519: PUSH
84520: LD_INT 257
84522: EQUAL
84523: IFFALSE 84544
// SetWarehouseGatheringPoint ( unit , x , y ) ;
84525: LD_VAR 0 2
84529: PPUSH
84530: LD_VAR 0 4
84534: PPUSH
84535: LD_VAR 0 5
84539: PPUSH
84540: CALL 82695 0 3
// end ;
84544: LD_VAR 0 6
84548: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84549: LD_INT 0
84551: PPUSH
84552: PPUSH
84553: PPUSH
84554: PPUSH
84555: PPUSH
84556: PPUSH
84557: PPUSH
84558: PPUSH
84559: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84560: LD_VAR 0 1
84564: NOT
84565: PUSH
84566: LD_VAR 0 2
84570: PPUSH
84571: LD_VAR 0 3
84575: PPUSH
84576: CALL_OW 488
84580: NOT
84581: OR
84582: PUSH
84583: LD_VAR 0 4
84587: NOT
84588: OR
84589: IFFALSE 84593
// exit ;
84591: GO 84933
// list := [ ] ;
84593: LD_ADDR_VAR 0 13
84597: PUSH
84598: EMPTY
84599: ST_TO_ADDR
// if x - r < 0 then
84600: LD_VAR 0 2
84604: PUSH
84605: LD_VAR 0 4
84609: MINUS
84610: PUSH
84611: LD_INT 0
84613: LESS
84614: IFFALSE 84626
// min_x := 0 else
84616: LD_ADDR_VAR 0 7
84620: PUSH
84621: LD_INT 0
84623: ST_TO_ADDR
84624: GO 84642
// min_x := x - r ;
84626: LD_ADDR_VAR 0 7
84630: PUSH
84631: LD_VAR 0 2
84635: PUSH
84636: LD_VAR 0 4
84640: MINUS
84641: ST_TO_ADDR
// if y - r < 0 then
84642: LD_VAR 0 3
84646: PUSH
84647: LD_VAR 0 4
84651: MINUS
84652: PUSH
84653: LD_INT 0
84655: LESS
84656: IFFALSE 84668
// min_y := 0 else
84658: LD_ADDR_VAR 0 8
84662: PUSH
84663: LD_INT 0
84665: ST_TO_ADDR
84666: GO 84684
// min_y := y - r ;
84668: LD_ADDR_VAR 0 8
84672: PUSH
84673: LD_VAR 0 3
84677: PUSH
84678: LD_VAR 0 4
84682: MINUS
84683: ST_TO_ADDR
// max_x := x + r ;
84684: LD_ADDR_VAR 0 9
84688: PUSH
84689: LD_VAR 0 2
84693: PUSH
84694: LD_VAR 0 4
84698: PLUS
84699: ST_TO_ADDR
// max_y := y + r ;
84700: LD_ADDR_VAR 0 10
84704: PUSH
84705: LD_VAR 0 3
84709: PUSH
84710: LD_VAR 0 4
84714: PLUS
84715: ST_TO_ADDR
// for _x = min_x to max_x do
84716: LD_ADDR_VAR 0 11
84720: PUSH
84721: DOUBLE
84722: LD_VAR 0 7
84726: DEC
84727: ST_TO_ADDR
84728: LD_VAR 0 9
84732: PUSH
84733: FOR_TO
84734: IFFALSE 84851
// for _y = min_y to max_y do
84736: LD_ADDR_VAR 0 12
84740: PUSH
84741: DOUBLE
84742: LD_VAR 0 8
84746: DEC
84747: ST_TO_ADDR
84748: LD_VAR 0 10
84752: PUSH
84753: FOR_TO
84754: IFFALSE 84847
// begin if not ValidHex ( _x , _y ) then
84756: LD_VAR 0 11
84760: PPUSH
84761: LD_VAR 0 12
84765: PPUSH
84766: CALL_OW 488
84770: NOT
84771: IFFALSE 84775
// continue ;
84773: GO 84753
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
84775: LD_VAR 0 11
84779: PPUSH
84780: LD_VAR 0 12
84784: PPUSH
84785: CALL_OW 351
84789: PUSH
84790: LD_VAR 0 11
84794: PPUSH
84795: LD_VAR 0 12
84799: PPUSH
84800: CALL_OW 554
84804: AND
84805: IFFALSE 84845
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
84807: LD_ADDR_VAR 0 13
84811: PUSH
84812: LD_VAR 0 13
84816: PPUSH
84817: LD_VAR 0 13
84821: PUSH
84822: LD_INT 1
84824: PLUS
84825: PPUSH
84826: LD_VAR 0 11
84830: PUSH
84831: LD_VAR 0 12
84835: PUSH
84836: EMPTY
84837: LIST
84838: LIST
84839: PPUSH
84840: CALL_OW 2
84844: ST_TO_ADDR
// end ;
84845: GO 84753
84847: POP
84848: POP
84849: GO 84733
84851: POP
84852: POP
// if not list then
84853: LD_VAR 0 13
84857: NOT
84858: IFFALSE 84862
// exit ;
84860: GO 84933
// for i in list do
84862: LD_ADDR_VAR 0 6
84866: PUSH
84867: LD_VAR 0 13
84871: PUSH
84872: FOR_IN
84873: IFFALSE 84931
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
84875: LD_VAR 0 1
84879: PPUSH
84880: LD_STRING M
84882: PUSH
84883: LD_VAR 0 6
84887: PUSH
84888: LD_INT 1
84890: ARRAY
84891: PUSH
84892: LD_VAR 0 6
84896: PUSH
84897: LD_INT 2
84899: ARRAY
84900: PUSH
84901: LD_INT 0
84903: PUSH
84904: LD_INT 0
84906: PUSH
84907: LD_INT 0
84909: PUSH
84910: LD_INT 0
84912: PUSH
84913: EMPTY
84914: LIST
84915: LIST
84916: LIST
84917: LIST
84918: LIST
84919: LIST
84920: LIST
84921: PUSH
84922: EMPTY
84923: LIST
84924: PPUSH
84925: CALL_OW 447
84929: GO 84872
84931: POP
84932: POP
// end ;
84933: LD_VAR 0 5
84937: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
84938: LD_EXP 127
84942: NOT
84943: IFFALSE 84993
84945: GO 84947
84947: DISABLE
// begin initHack := true ;
84948: LD_ADDR_EXP 127
84952: PUSH
84953: LD_INT 1
84955: ST_TO_ADDR
// hackTanks := [ ] ;
84956: LD_ADDR_EXP 128
84960: PUSH
84961: EMPTY
84962: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
84963: LD_ADDR_EXP 129
84967: PUSH
84968: EMPTY
84969: ST_TO_ADDR
// hackLimit := 3 ;
84970: LD_ADDR_EXP 130
84974: PUSH
84975: LD_INT 3
84977: ST_TO_ADDR
// hackDist := 12 ;
84978: LD_ADDR_EXP 131
84982: PUSH
84983: LD_INT 12
84985: ST_TO_ADDR
// hackCounter := [ ] ;
84986: LD_ADDR_EXP 132
84990: PUSH
84991: EMPTY
84992: ST_TO_ADDR
// end ;
84993: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
84994: LD_EXP 127
84998: PUSH
84999: LD_INT 34
85001: PUSH
85002: LD_INT 99
85004: PUSH
85005: EMPTY
85006: LIST
85007: LIST
85008: PPUSH
85009: CALL_OW 69
85013: AND
85014: IFFALSE 85267
85016: GO 85018
85018: DISABLE
85019: LD_INT 0
85021: PPUSH
85022: PPUSH
// begin enable ;
85023: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85024: LD_ADDR_VAR 0 1
85028: PUSH
85029: LD_INT 34
85031: PUSH
85032: LD_INT 99
85034: PUSH
85035: EMPTY
85036: LIST
85037: LIST
85038: PPUSH
85039: CALL_OW 69
85043: PUSH
85044: FOR_IN
85045: IFFALSE 85265
// begin if not i in hackTanks then
85047: LD_VAR 0 1
85051: PUSH
85052: LD_EXP 128
85056: IN
85057: NOT
85058: IFFALSE 85141
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
85060: LD_ADDR_EXP 128
85064: PUSH
85065: LD_EXP 128
85069: PPUSH
85070: LD_EXP 128
85074: PUSH
85075: LD_INT 1
85077: PLUS
85078: PPUSH
85079: LD_VAR 0 1
85083: PPUSH
85084: CALL_OW 1
85088: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
85089: LD_ADDR_EXP 129
85093: PUSH
85094: LD_EXP 129
85098: PPUSH
85099: LD_EXP 129
85103: PUSH
85104: LD_INT 1
85106: PLUS
85107: PPUSH
85108: EMPTY
85109: PPUSH
85110: CALL_OW 1
85114: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
85115: LD_ADDR_EXP 132
85119: PUSH
85120: LD_EXP 132
85124: PPUSH
85125: LD_EXP 132
85129: PUSH
85130: LD_INT 1
85132: PLUS
85133: PPUSH
85134: EMPTY
85135: PPUSH
85136: CALL_OW 1
85140: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85141: LD_VAR 0 1
85145: PPUSH
85146: CALL_OW 302
85150: NOT
85151: IFFALSE 85164
// begin HackUnlinkAll ( i ) ;
85153: LD_VAR 0 1
85157: PPUSH
85158: CALL 85270 0 1
// continue ;
85162: GO 85044
// end ; HackCheckCapturedStatus ( i ) ;
85164: LD_VAR 0 1
85168: PPUSH
85169: CALL 85713 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85173: LD_ADDR_VAR 0 2
85177: PUSH
85178: LD_INT 81
85180: PUSH
85181: LD_VAR 0 1
85185: PPUSH
85186: CALL_OW 255
85190: PUSH
85191: EMPTY
85192: LIST
85193: LIST
85194: PUSH
85195: LD_INT 33
85197: PUSH
85198: LD_INT 3
85200: PUSH
85201: EMPTY
85202: LIST
85203: LIST
85204: PUSH
85205: LD_INT 91
85207: PUSH
85208: LD_VAR 0 1
85212: PUSH
85213: LD_EXP 131
85217: PUSH
85218: EMPTY
85219: LIST
85220: LIST
85221: LIST
85222: PUSH
85223: LD_INT 50
85225: PUSH
85226: EMPTY
85227: LIST
85228: PUSH
85229: EMPTY
85230: LIST
85231: LIST
85232: LIST
85233: LIST
85234: PPUSH
85235: CALL_OW 69
85239: ST_TO_ADDR
// if not tmp then
85240: LD_VAR 0 2
85244: NOT
85245: IFFALSE 85249
// continue ;
85247: GO 85044
// HackLink ( i , tmp ) ;
85249: LD_VAR 0 1
85253: PPUSH
85254: LD_VAR 0 2
85258: PPUSH
85259: CALL 85406 0 2
// end ;
85263: GO 85044
85265: POP
85266: POP
// end ;
85267: PPOPN 2
85269: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
85270: LD_INT 0
85272: PPUSH
85273: PPUSH
85274: PPUSH
// if not hack in hackTanks then
85275: LD_VAR 0 1
85279: PUSH
85280: LD_EXP 128
85284: IN
85285: NOT
85286: IFFALSE 85290
// exit ;
85288: GO 85401
// index := GetElementIndex ( hackTanks , hack ) ;
85290: LD_ADDR_VAR 0 4
85294: PUSH
85295: LD_EXP 128
85299: PPUSH
85300: LD_VAR 0 1
85304: PPUSH
85305: CALL 31549 0 2
85309: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
85310: LD_EXP 129
85314: PUSH
85315: LD_VAR 0 4
85319: ARRAY
85320: IFFALSE 85401
// begin for i in hackTanksCaptured [ index ] do
85322: LD_ADDR_VAR 0 3
85326: PUSH
85327: LD_EXP 129
85331: PUSH
85332: LD_VAR 0 4
85336: ARRAY
85337: PUSH
85338: FOR_IN
85339: IFFALSE 85365
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
85341: LD_VAR 0 3
85345: PUSH
85346: LD_INT 1
85348: ARRAY
85349: PPUSH
85350: LD_VAR 0 3
85354: PUSH
85355: LD_INT 2
85357: ARRAY
85358: PPUSH
85359: CALL_OW 235
85363: GO 85338
85365: POP
85366: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
85367: LD_ADDR_EXP 129
85371: PUSH
85372: LD_EXP 129
85376: PPUSH
85377: LD_VAR 0 4
85381: PPUSH
85382: EMPTY
85383: PPUSH
85384: CALL_OW 1
85388: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
85389: LD_VAR 0 1
85393: PPUSH
85394: LD_INT 0
85396: PPUSH
85397: CALL_OW 505
// end ; end ;
85401: LD_VAR 0 2
85405: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
85406: LD_INT 0
85408: PPUSH
85409: PPUSH
85410: PPUSH
// if not hack in hackTanks or not vehicles then
85411: LD_VAR 0 1
85415: PUSH
85416: LD_EXP 128
85420: IN
85421: NOT
85422: PUSH
85423: LD_VAR 0 2
85427: NOT
85428: OR
85429: IFFALSE 85433
// exit ;
85431: GO 85708
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
85433: LD_ADDR_VAR 0 2
85437: PUSH
85438: LD_VAR 0 1
85442: PPUSH
85443: LD_VAR 0 2
85447: PPUSH
85448: LD_INT 1
85450: PPUSH
85451: LD_INT 1
85453: PPUSH
85454: CALL 32199 0 4
85458: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
85459: LD_ADDR_VAR 0 5
85463: PUSH
85464: LD_EXP 128
85468: PPUSH
85469: LD_VAR 0 1
85473: PPUSH
85474: CALL 31549 0 2
85478: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
85479: LD_EXP 129
85483: PUSH
85484: LD_VAR 0 5
85488: ARRAY
85489: PUSH
85490: LD_EXP 130
85494: LESS
85495: IFFALSE 85684
// begin for i := 1 to vehicles do
85497: LD_ADDR_VAR 0 4
85501: PUSH
85502: DOUBLE
85503: LD_INT 1
85505: DEC
85506: ST_TO_ADDR
85507: LD_VAR 0 2
85511: PUSH
85512: FOR_TO
85513: IFFALSE 85682
// begin if hackTanksCaptured [ index ] = hackLimit then
85515: LD_EXP 129
85519: PUSH
85520: LD_VAR 0 5
85524: ARRAY
85525: PUSH
85526: LD_EXP 130
85530: EQUAL
85531: IFFALSE 85535
// break ;
85533: GO 85682
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
85535: LD_ADDR_EXP 132
85539: PUSH
85540: LD_EXP 132
85544: PPUSH
85545: LD_VAR 0 5
85549: PPUSH
85550: LD_EXP 132
85554: PUSH
85555: LD_VAR 0 5
85559: ARRAY
85560: PUSH
85561: LD_INT 1
85563: PLUS
85564: PPUSH
85565: CALL_OW 1
85569: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
85570: LD_ADDR_EXP 129
85574: PUSH
85575: LD_EXP 129
85579: PPUSH
85580: LD_VAR 0 5
85584: PUSH
85585: LD_EXP 129
85589: PUSH
85590: LD_VAR 0 5
85594: ARRAY
85595: PUSH
85596: LD_INT 1
85598: PLUS
85599: PUSH
85600: EMPTY
85601: LIST
85602: LIST
85603: PPUSH
85604: LD_VAR 0 2
85608: PUSH
85609: LD_VAR 0 4
85613: ARRAY
85614: PUSH
85615: LD_VAR 0 2
85619: PUSH
85620: LD_VAR 0 4
85624: ARRAY
85625: PPUSH
85626: CALL_OW 255
85630: PUSH
85631: EMPTY
85632: LIST
85633: LIST
85634: PPUSH
85635: CALL 31764 0 3
85639: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
85640: LD_VAR 0 2
85644: PUSH
85645: LD_VAR 0 4
85649: ARRAY
85650: PPUSH
85651: LD_VAR 0 1
85655: PPUSH
85656: CALL_OW 255
85660: PPUSH
85661: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
85665: LD_VAR 0 2
85669: PUSH
85670: LD_VAR 0 4
85674: ARRAY
85675: PPUSH
85676: CALL_OW 141
// end ;
85680: GO 85512
85682: POP
85683: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85684: LD_VAR 0 1
85688: PPUSH
85689: LD_EXP 129
85693: PUSH
85694: LD_VAR 0 5
85698: ARRAY
85699: PUSH
85700: LD_INT 0
85702: PLUS
85703: PPUSH
85704: CALL_OW 505
// end ;
85708: LD_VAR 0 3
85712: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
85713: LD_INT 0
85715: PPUSH
85716: PPUSH
85717: PPUSH
85718: PPUSH
// if not hack in hackTanks then
85719: LD_VAR 0 1
85723: PUSH
85724: LD_EXP 128
85728: IN
85729: NOT
85730: IFFALSE 85734
// exit ;
85732: GO 85974
// index := GetElementIndex ( hackTanks , hack ) ;
85734: LD_ADDR_VAR 0 4
85738: PUSH
85739: LD_EXP 128
85743: PPUSH
85744: LD_VAR 0 1
85748: PPUSH
85749: CALL 31549 0 2
85753: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
85754: LD_ADDR_VAR 0 3
85758: PUSH
85759: DOUBLE
85760: LD_EXP 129
85764: PUSH
85765: LD_VAR 0 4
85769: ARRAY
85770: INC
85771: ST_TO_ADDR
85772: LD_INT 1
85774: PUSH
85775: FOR_DOWNTO
85776: IFFALSE 85948
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
85778: LD_ADDR_VAR 0 5
85782: PUSH
85783: LD_EXP 129
85787: PUSH
85788: LD_VAR 0 4
85792: ARRAY
85793: PUSH
85794: LD_VAR 0 3
85798: ARRAY
85799: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
85800: LD_VAR 0 5
85804: PUSH
85805: LD_INT 1
85807: ARRAY
85808: PPUSH
85809: CALL_OW 302
85813: NOT
85814: PUSH
85815: LD_VAR 0 5
85819: PUSH
85820: LD_INT 1
85822: ARRAY
85823: PPUSH
85824: CALL_OW 255
85828: PUSH
85829: LD_VAR 0 1
85833: PPUSH
85834: CALL_OW 255
85838: NONEQUAL
85839: OR
85840: IFFALSE 85946
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
85842: LD_VAR 0 5
85846: PUSH
85847: LD_INT 1
85849: ARRAY
85850: PPUSH
85851: CALL_OW 305
85855: PUSH
85856: LD_VAR 0 5
85860: PUSH
85861: LD_INT 1
85863: ARRAY
85864: PPUSH
85865: CALL_OW 255
85869: PUSH
85870: LD_VAR 0 1
85874: PPUSH
85875: CALL_OW 255
85879: EQUAL
85880: AND
85881: IFFALSE 85905
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
85883: LD_VAR 0 5
85887: PUSH
85888: LD_INT 1
85890: ARRAY
85891: PPUSH
85892: LD_VAR 0 5
85896: PUSH
85897: LD_INT 2
85899: ARRAY
85900: PPUSH
85901: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
85905: LD_ADDR_EXP 129
85909: PUSH
85910: LD_EXP 129
85914: PPUSH
85915: LD_VAR 0 4
85919: PPUSH
85920: LD_EXP 129
85924: PUSH
85925: LD_VAR 0 4
85929: ARRAY
85930: PPUSH
85931: LD_VAR 0 3
85935: PPUSH
85936: CALL_OW 3
85940: PPUSH
85941: CALL_OW 1
85945: ST_TO_ADDR
// end ; end ;
85946: GO 85775
85948: POP
85949: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85950: LD_VAR 0 1
85954: PPUSH
85955: LD_EXP 129
85959: PUSH
85960: LD_VAR 0 4
85964: ARRAY
85965: PUSH
85966: LD_INT 0
85968: PLUS
85969: PPUSH
85970: CALL_OW 505
// end ;
85974: LD_VAR 0 2
85978: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
85979: LD_INT 0
85981: PPUSH
85982: PPUSH
85983: PPUSH
85984: PPUSH
// if not hack in hackTanks then
85985: LD_VAR 0 1
85989: PUSH
85990: LD_EXP 128
85994: IN
85995: NOT
85996: IFFALSE 86000
// exit ;
85998: GO 86085
// index := GetElementIndex ( hackTanks , hack ) ;
86000: LD_ADDR_VAR 0 5
86004: PUSH
86005: LD_EXP 128
86009: PPUSH
86010: LD_VAR 0 1
86014: PPUSH
86015: CALL 31549 0 2
86019: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86020: LD_ADDR_VAR 0 4
86024: PUSH
86025: DOUBLE
86026: LD_INT 1
86028: DEC
86029: ST_TO_ADDR
86030: LD_EXP 129
86034: PUSH
86035: LD_VAR 0 5
86039: ARRAY
86040: PUSH
86041: FOR_TO
86042: IFFALSE 86083
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
86044: LD_EXP 129
86048: PUSH
86049: LD_VAR 0 5
86053: ARRAY
86054: PUSH
86055: LD_VAR 0 4
86059: ARRAY
86060: PUSH
86061: LD_INT 1
86063: ARRAY
86064: PUSH
86065: LD_VAR 0 2
86069: EQUAL
86070: IFFALSE 86081
// KillUnit ( vehicle ) ;
86072: LD_VAR 0 2
86076: PPUSH
86077: CALL_OW 66
86081: GO 86041
86083: POP
86084: POP
// end ;
86085: LD_VAR 0 3
86089: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
86090: LD_EXP 133
86094: NOT
86095: IFFALSE 86130
86097: GO 86099
86099: DISABLE
// begin initMiner := true ;
86100: LD_ADDR_EXP 133
86104: PUSH
86105: LD_INT 1
86107: ST_TO_ADDR
// minersList := [ ] ;
86108: LD_ADDR_EXP 134
86112: PUSH
86113: EMPTY
86114: ST_TO_ADDR
// minerMinesList := [ ] ;
86115: LD_ADDR_EXP 135
86119: PUSH
86120: EMPTY
86121: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86122: LD_ADDR_EXP 136
86126: PUSH
86127: LD_INT 5
86129: ST_TO_ADDR
// end ;
86130: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86131: LD_EXP 133
86135: PUSH
86136: LD_INT 34
86138: PUSH
86139: LD_INT 81
86141: PUSH
86142: EMPTY
86143: LIST
86144: LIST
86145: PPUSH
86146: CALL_OW 69
86150: AND
86151: IFFALSE 86612
86153: GO 86155
86155: DISABLE
86156: LD_INT 0
86158: PPUSH
86159: PPUSH
86160: PPUSH
86161: PPUSH
// begin enable ;
86162: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86163: LD_ADDR_VAR 0 1
86167: PUSH
86168: LD_INT 34
86170: PUSH
86171: LD_INT 81
86173: PUSH
86174: EMPTY
86175: LIST
86176: LIST
86177: PPUSH
86178: CALL_OW 69
86182: PUSH
86183: FOR_IN
86184: IFFALSE 86256
// begin if not i in minersList then
86186: LD_VAR 0 1
86190: PUSH
86191: LD_EXP 134
86195: IN
86196: NOT
86197: IFFALSE 86254
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
86199: LD_ADDR_EXP 134
86203: PUSH
86204: LD_EXP 134
86208: PPUSH
86209: LD_EXP 134
86213: PUSH
86214: LD_INT 1
86216: PLUS
86217: PPUSH
86218: LD_VAR 0 1
86222: PPUSH
86223: CALL_OW 1
86227: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
86228: LD_ADDR_EXP 135
86232: PUSH
86233: LD_EXP 135
86237: PPUSH
86238: LD_EXP 135
86242: PUSH
86243: LD_INT 1
86245: PLUS
86246: PPUSH
86247: EMPTY
86248: PPUSH
86249: CALL_OW 1
86253: ST_TO_ADDR
// end end ;
86254: GO 86183
86256: POP
86257: POP
// for i := minerMinesList downto 1 do
86258: LD_ADDR_VAR 0 1
86262: PUSH
86263: DOUBLE
86264: LD_EXP 135
86268: INC
86269: ST_TO_ADDR
86270: LD_INT 1
86272: PUSH
86273: FOR_DOWNTO
86274: IFFALSE 86610
// begin if IsLive ( minersList [ i ] ) then
86276: LD_EXP 134
86280: PUSH
86281: LD_VAR 0 1
86285: ARRAY
86286: PPUSH
86287: CALL_OW 300
86291: IFFALSE 86319
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
86293: LD_EXP 134
86297: PUSH
86298: LD_VAR 0 1
86302: ARRAY
86303: PPUSH
86304: LD_EXP 135
86308: PUSH
86309: LD_VAR 0 1
86313: ARRAY
86314: PPUSH
86315: CALL_OW 505
// if not minerMinesList [ i ] then
86319: LD_EXP 135
86323: PUSH
86324: LD_VAR 0 1
86328: ARRAY
86329: NOT
86330: IFFALSE 86334
// continue ;
86332: GO 86273
// for j := minerMinesList [ i ] downto 1 do
86334: LD_ADDR_VAR 0 2
86338: PUSH
86339: DOUBLE
86340: LD_EXP 135
86344: PUSH
86345: LD_VAR 0 1
86349: ARRAY
86350: INC
86351: ST_TO_ADDR
86352: LD_INT 1
86354: PUSH
86355: FOR_DOWNTO
86356: IFFALSE 86606
// begin side := GetSide ( minersList [ i ] ) ;
86358: LD_ADDR_VAR 0 3
86362: PUSH
86363: LD_EXP 134
86367: PUSH
86368: LD_VAR 0 1
86372: ARRAY
86373: PPUSH
86374: CALL_OW 255
86378: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
86379: LD_ADDR_VAR 0 4
86383: PUSH
86384: LD_EXP 135
86388: PUSH
86389: LD_VAR 0 1
86393: ARRAY
86394: PUSH
86395: LD_VAR 0 2
86399: ARRAY
86400: PUSH
86401: LD_INT 1
86403: ARRAY
86404: PPUSH
86405: LD_EXP 135
86409: PUSH
86410: LD_VAR 0 1
86414: ARRAY
86415: PUSH
86416: LD_VAR 0 2
86420: ARRAY
86421: PUSH
86422: LD_INT 2
86424: ARRAY
86425: PPUSH
86426: CALL_OW 428
86430: ST_TO_ADDR
// if not tmp then
86431: LD_VAR 0 4
86435: NOT
86436: IFFALSE 86440
// continue ;
86438: GO 86355
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
86440: LD_VAR 0 4
86444: PUSH
86445: LD_INT 81
86447: PUSH
86448: LD_VAR 0 3
86452: PUSH
86453: EMPTY
86454: LIST
86455: LIST
86456: PPUSH
86457: CALL_OW 69
86461: IN
86462: PUSH
86463: LD_EXP 135
86467: PUSH
86468: LD_VAR 0 1
86472: ARRAY
86473: PUSH
86474: LD_VAR 0 2
86478: ARRAY
86479: PUSH
86480: LD_INT 1
86482: ARRAY
86483: PPUSH
86484: LD_EXP 135
86488: PUSH
86489: LD_VAR 0 1
86493: ARRAY
86494: PUSH
86495: LD_VAR 0 2
86499: ARRAY
86500: PUSH
86501: LD_INT 2
86503: ARRAY
86504: PPUSH
86505: CALL_OW 458
86509: AND
86510: IFFALSE 86604
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
86512: LD_EXP 135
86516: PUSH
86517: LD_VAR 0 1
86521: ARRAY
86522: PUSH
86523: LD_VAR 0 2
86527: ARRAY
86528: PUSH
86529: LD_INT 1
86531: ARRAY
86532: PPUSH
86533: LD_EXP 135
86537: PUSH
86538: LD_VAR 0 1
86542: ARRAY
86543: PUSH
86544: LD_VAR 0 2
86548: ARRAY
86549: PUSH
86550: LD_INT 2
86552: ARRAY
86553: PPUSH
86554: LD_VAR 0 3
86558: PPUSH
86559: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
86563: LD_ADDR_EXP 135
86567: PUSH
86568: LD_EXP 135
86572: PPUSH
86573: LD_VAR 0 1
86577: PPUSH
86578: LD_EXP 135
86582: PUSH
86583: LD_VAR 0 1
86587: ARRAY
86588: PPUSH
86589: LD_VAR 0 2
86593: PPUSH
86594: CALL_OW 3
86598: PPUSH
86599: CALL_OW 1
86603: ST_TO_ADDR
// end ; end ;
86604: GO 86355
86606: POP
86607: POP
// end ;
86608: GO 86273
86610: POP
86611: POP
// end ;
86612: PPOPN 4
86614: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
86615: LD_INT 0
86617: PPUSH
86618: PPUSH
// result := false ;
86619: LD_ADDR_VAR 0 4
86623: PUSH
86624: LD_INT 0
86626: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
86627: LD_VAR 0 1
86631: PPUSH
86632: CALL_OW 264
86636: PUSH
86637: LD_INT 81
86639: EQUAL
86640: NOT
86641: IFFALSE 86645
// exit ;
86643: GO 86885
// index := GetElementIndex ( minersList , unit ) ;
86645: LD_ADDR_VAR 0 5
86649: PUSH
86650: LD_EXP 134
86654: PPUSH
86655: LD_VAR 0 1
86659: PPUSH
86660: CALL 31549 0 2
86664: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
86665: LD_EXP 135
86669: PUSH
86670: LD_VAR 0 5
86674: ARRAY
86675: PUSH
86676: LD_EXP 136
86680: GREATEREQUAL
86681: IFFALSE 86685
// exit ;
86683: GO 86885
// ComMoveXY ( unit , x , y ) ;
86685: LD_VAR 0 1
86689: PPUSH
86690: LD_VAR 0 2
86694: PPUSH
86695: LD_VAR 0 3
86699: PPUSH
86700: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86704: LD_INT 35
86706: PPUSH
86707: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
86711: LD_VAR 0 1
86715: PPUSH
86716: LD_VAR 0 2
86720: PPUSH
86721: LD_VAR 0 3
86725: PPUSH
86726: CALL 62885 0 3
86730: NOT
86731: PUSH
86732: LD_VAR 0 1
86736: PPUSH
86737: CALL_OW 314
86741: AND
86742: IFFALSE 86746
// exit ;
86744: GO 86885
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
86746: LD_VAR 0 2
86750: PPUSH
86751: LD_VAR 0 3
86755: PPUSH
86756: CALL_OW 428
86760: PUSH
86761: LD_VAR 0 1
86765: EQUAL
86766: PUSH
86767: LD_VAR 0 1
86771: PPUSH
86772: CALL_OW 314
86776: NOT
86777: AND
86778: IFFALSE 86704
// PlaySoundXY ( x , y , PlantMine ) ;
86780: LD_VAR 0 2
86784: PPUSH
86785: LD_VAR 0 3
86789: PPUSH
86790: LD_STRING PlantMine
86792: PPUSH
86793: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
86797: LD_VAR 0 2
86801: PPUSH
86802: LD_VAR 0 3
86806: PPUSH
86807: LD_VAR 0 1
86811: PPUSH
86812: CALL_OW 255
86816: PPUSH
86817: LD_INT 0
86819: PPUSH
86820: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
86824: LD_ADDR_EXP 135
86828: PUSH
86829: LD_EXP 135
86833: PPUSH
86834: LD_VAR 0 5
86838: PUSH
86839: LD_EXP 135
86843: PUSH
86844: LD_VAR 0 5
86848: ARRAY
86849: PUSH
86850: LD_INT 1
86852: PLUS
86853: PUSH
86854: EMPTY
86855: LIST
86856: LIST
86857: PPUSH
86858: LD_VAR 0 2
86862: PUSH
86863: LD_VAR 0 3
86867: PUSH
86868: EMPTY
86869: LIST
86870: LIST
86871: PPUSH
86872: CALL 31764 0 3
86876: ST_TO_ADDR
// result := true ;
86877: LD_ADDR_VAR 0 4
86881: PUSH
86882: LD_INT 1
86884: ST_TO_ADDR
// end ;
86885: LD_VAR 0 4
86889: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
86890: LD_INT 0
86892: PPUSH
86893: PPUSH
86894: PPUSH
// if not unit in minersList then
86895: LD_VAR 0 1
86899: PUSH
86900: LD_EXP 134
86904: IN
86905: NOT
86906: IFFALSE 86910
// exit ;
86908: GO 87302
// index := GetElementIndex ( minersList , unit ) ;
86910: LD_ADDR_VAR 0 6
86914: PUSH
86915: LD_EXP 134
86919: PPUSH
86920: LD_VAR 0 1
86924: PPUSH
86925: CALL 31549 0 2
86929: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
86930: LD_ADDR_VAR 0 5
86934: PUSH
86935: DOUBLE
86936: LD_EXP 135
86940: PUSH
86941: LD_VAR 0 6
86945: ARRAY
86946: INC
86947: ST_TO_ADDR
86948: LD_INT 1
86950: PUSH
86951: FOR_DOWNTO
86952: IFFALSE 87113
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
86954: LD_EXP 135
86958: PUSH
86959: LD_VAR 0 6
86963: ARRAY
86964: PUSH
86965: LD_VAR 0 5
86969: ARRAY
86970: PUSH
86971: LD_INT 1
86973: ARRAY
86974: PUSH
86975: LD_VAR 0 2
86979: EQUAL
86980: PUSH
86981: LD_EXP 135
86985: PUSH
86986: LD_VAR 0 6
86990: ARRAY
86991: PUSH
86992: LD_VAR 0 5
86996: ARRAY
86997: PUSH
86998: LD_INT 2
87000: ARRAY
87001: PUSH
87002: LD_VAR 0 3
87006: EQUAL
87007: AND
87008: IFFALSE 87111
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87010: LD_EXP 135
87014: PUSH
87015: LD_VAR 0 6
87019: ARRAY
87020: PUSH
87021: LD_VAR 0 5
87025: ARRAY
87026: PUSH
87027: LD_INT 1
87029: ARRAY
87030: PPUSH
87031: LD_EXP 135
87035: PUSH
87036: LD_VAR 0 6
87040: ARRAY
87041: PUSH
87042: LD_VAR 0 5
87046: ARRAY
87047: PUSH
87048: LD_INT 2
87050: ARRAY
87051: PPUSH
87052: LD_VAR 0 1
87056: PPUSH
87057: CALL_OW 255
87061: PPUSH
87062: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87066: LD_ADDR_EXP 135
87070: PUSH
87071: LD_EXP 135
87075: PPUSH
87076: LD_VAR 0 6
87080: PPUSH
87081: LD_EXP 135
87085: PUSH
87086: LD_VAR 0 6
87090: ARRAY
87091: PPUSH
87092: LD_VAR 0 5
87096: PPUSH
87097: CALL_OW 3
87101: PPUSH
87102: CALL_OW 1
87106: ST_TO_ADDR
// exit ;
87107: POP
87108: POP
87109: GO 87302
// end ; end ;
87111: GO 86951
87113: POP
87114: POP
// for i := minerMinesList [ index ] downto 1 do
87115: LD_ADDR_VAR 0 5
87119: PUSH
87120: DOUBLE
87121: LD_EXP 135
87125: PUSH
87126: LD_VAR 0 6
87130: ARRAY
87131: INC
87132: ST_TO_ADDR
87133: LD_INT 1
87135: PUSH
87136: FOR_DOWNTO
87137: IFFALSE 87300
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87139: LD_EXP 135
87143: PUSH
87144: LD_VAR 0 6
87148: ARRAY
87149: PUSH
87150: LD_VAR 0 5
87154: ARRAY
87155: PUSH
87156: LD_INT 1
87158: ARRAY
87159: PPUSH
87160: LD_EXP 135
87164: PUSH
87165: LD_VAR 0 6
87169: ARRAY
87170: PUSH
87171: LD_VAR 0 5
87175: ARRAY
87176: PUSH
87177: LD_INT 2
87179: ARRAY
87180: PPUSH
87181: LD_VAR 0 2
87185: PPUSH
87186: LD_VAR 0 3
87190: PPUSH
87191: CALL_OW 298
87195: PUSH
87196: LD_INT 6
87198: LESS
87199: IFFALSE 87298
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87201: LD_EXP 135
87205: PUSH
87206: LD_VAR 0 6
87210: ARRAY
87211: PUSH
87212: LD_VAR 0 5
87216: ARRAY
87217: PUSH
87218: LD_INT 1
87220: ARRAY
87221: PPUSH
87222: LD_EXP 135
87226: PUSH
87227: LD_VAR 0 6
87231: ARRAY
87232: PUSH
87233: LD_VAR 0 5
87237: ARRAY
87238: PUSH
87239: LD_INT 2
87241: ARRAY
87242: PPUSH
87243: LD_VAR 0 1
87247: PPUSH
87248: CALL_OW 255
87252: PPUSH
87253: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87257: LD_ADDR_EXP 135
87261: PUSH
87262: LD_EXP 135
87266: PPUSH
87267: LD_VAR 0 6
87271: PPUSH
87272: LD_EXP 135
87276: PUSH
87277: LD_VAR 0 6
87281: ARRAY
87282: PPUSH
87283: LD_VAR 0 5
87287: PPUSH
87288: CALL_OW 3
87292: PPUSH
87293: CALL_OW 1
87297: ST_TO_ADDR
// end ; end ;
87298: GO 87136
87300: POP
87301: POP
// end ;
87302: LD_VAR 0 4
87306: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
87307: LD_INT 0
87309: PPUSH
87310: PPUSH
87311: PPUSH
87312: PPUSH
87313: PPUSH
87314: PPUSH
87315: PPUSH
87316: PPUSH
87317: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
87318: LD_VAR 0 1
87322: PPUSH
87323: CALL_OW 264
87327: PUSH
87328: LD_INT 81
87330: EQUAL
87331: NOT
87332: PUSH
87333: LD_VAR 0 1
87337: PUSH
87338: LD_EXP 134
87342: IN
87343: NOT
87344: OR
87345: IFFALSE 87349
// exit ;
87347: GO 87671
// index := GetElementIndex ( minersList , unit ) ;
87349: LD_ADDR_VAR 0 6
87353: PUSH
87354: LD_EXP 134
87358: PPUSH
87359: LD_VAR 0 1
87363: PPUSH
87364: CALL 31549 0 2
87368: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
87369: LD_ADDR_VAR 0 8
87373: PUSH
87374: LD_EXP 136
87378: PUSH
87379: LD_EXP 135
87383: PUSH
87384: LD_VAR 0 6
87388: ARRAY
87389: MINUS
87390: ST_TO_ADDR
// if not minesFreeAmount then
87391: LD_VAR 0 8
87395: NOT
87396: IFFALSE 87400
// exit ;
87398: GO 87671
// tmp := [ ] ;
87400: LD_ADDR_VAR 0 7
87404: PUSH
87405: EMPTY
87406: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
87407: LD_ADDR_VAR 0 5
87411: PUSH
87412: DOUBLE
87413: LD_INT 1
87415: DEC
87416: ST_TO_ADDR
87417: LD_VAR 0 8
87421: PUSH
87422: FOR_TO
87423: IFFALSE 87618
// begin _d := rand ( 0 , 5 ) ;
87425: LD_ADDR_VAR 0 11
87429: PUSH
87430: LD_INT 0
87432: PPUSH
87433: LD_INT 5
87435: PPUSH
87436: CALL_OW 12
87440: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
87441: LD_ADDR_VAR 0 12
87445: PUSH
87446: LD_INT 2
87448: PPUSH
87449: LD_INT 6
87451: PPUSH
87452: CALL_OW 12
87456: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
87457: LD_ADDR_VAR 0 9
87461: PUSH
87462: LD_VAR 0 2
87466: PPUSH
87467: LD_VAR 0 11
87471: PPUSH
87472: LD_VAR 0 12
87476: PPUSH
87477: CALL_OW 272
87481: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
87482: LD_ADDR_VAR 0 10
87486: PUSH
87487: LD_VAR 0 3
87491: PPUSH
87492: LD_VAR 0 11
87496: PPUSH
87497: LD_VAR 0 12
87501: PPUSH
87502: CALL_OW 273
87506: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
87507: LD_VAR 0 9
87511: PPUSH
87512: LD_VAR 0 10
87516: PPUSH
87517: CALL_OW 488
87521: PUSH
87522: LD_VAR 0 9
87526: PUSH
87527: LD_VAR 0 10
87531: PUSH
87532: EMPTY
87533: LIST
87534: LIST
87535: PUSH
87536: LD_VAR 0 7
87540: IN
87541: NOT
87542: AND
87543: PUSH
87544: LD_VAR 0 9
87548: PPUSH
87549: LD_VAR 0 10
87553: PPUSH
87554: CALL_OW 458
87558: NOT
87559: AND
87560: IFFALSE 87602
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
87562: LD_ADDR_VAR 0 7
87566: PUSH
87567: LD_VAR 0 7
87571: PPUSH
87572: LD_VAR 0 7
87576: PUSH
87577: LD_INT 1
87579: PLUS
87580: PPUSH
87581: LD_VAR 0 9
87585: PUSH
87586: LD_VAR 0 10
87590: PUSH
87591: EMPTY
87592: LIST
87593: LIST
87594: PPUSH
87595: CALL_OW 1
87599: ST_TO_ADDR
87600: GO 87616
// i := i - 1 ;
87602: LD_ADDR_VAR 0 5
87606: PUSH
87607: LD_VAR 0 5
87611: PUSH
87612: LD_INT 1
87614: MINUS
87615: ST_TO_ADDR
// end ;
87616: GO 87422
87618: POP
87619: POP
// for i in tmp do
87620: LD_ADDR_VAR 0 5
87624: PUSH
87625: LD_VAR 0 7
87629: PUSH
87630: FOR_IN
87631: IFFALSE 87669
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
87633: LD_VAR 0 1
87637: PPUSH
87638: LD_VAR 0 5
87642: PUSH
87643: LD_INT 1
87645: ARRAY
87646: PPUSH
87647: LD_VAR 0 5
87651: PUSH
87652: LD_INT 2
87654: ARRAY
87655: PPUSH
87656: CALL 86615 0 3
87660: NOT
87661: IFFALSE 87667
// exit ;
87663: POP
87664: POP
87665: GO 87671
87667: GO 87630
87669: POP
87670: POP
// end ;
87671: LD_VAR 0 4
87675: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
87676: LD_INT 0
87678: PPUSH
87679: PPUSH
87680: PPUSH
87681: PPUSH
87682: PPUSH
87683: PPUSH
87684: PPUSH
// if not GetClass ( unit ) = class_sniper then
87685: LD_VAR 0 1
87689: PPUSH
87690: CALL_OW 257
87694: PUSH
87695: LD_INT 5
87697: EQUAL
87698: NOT
87699: IFFALSE 87703
// exit ;
87701: GO 88091
// dist := 8 ;
87703: LD_ADDR_VAR 0 5
87707: PUSH
87708: LD_INT 8
87710: ST_TO_ADDR
// viewRange := 12 ;
87711: LD_ADDR_VAR 0 7
87715: PUSH
87716: LD_INT 12
87718: ST_TO_ADDR
// side := GetSide ( unit ) ;
87719: LD_ADDR_VAR 0 6
87723: PUSH
87724: LD_VAR 0 1
87728: PPUSH
87729: CALL_OW 255
87733: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
87734: LD_INT 61
87736: PPUSH
87737: LD_VAR 0 6
87741: PPUSH
87742: CALL_OW 321
87746: PUSH
87747: LD_INT 2
87749: EQUAL
87750: IFFALSE 87760
// viewRange := 16 ;
87752: LD_ADDR_VAR 0 7
87756: PUSH
87757: LD_INT 16
87759: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
87760: LD_VAR 0 1
87764: PPUSH
87765: LD_VAR 0 2
87769: PPUSH
87770: LD_VAR 0 3
87774: PPUSH
87775: CALL_OW 297
87779: PUSH
87780: LD_VAR 0 5
87784: GREATER
87785: IFFALSE 87864
// begin ComMoveXY ( unit , x , y ) ;
87787: LD_VAR 0 1
87791: PPUSH
87792: LD_VAR 0 2
87796: PPUSH
87797: LD_VAR 0 3
87801: PPUSH
87802: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87806: LD_INT 35
87808: PPUSH
87809: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
87813: LD_VAR 0 1
87817: PPUSH
87818: LD_VAR 0 2
87822: PPUSH
87823: LD_VAR 0 3
87827: PPUSH
87828: CALL 62885 0 3
87832: NOT
87833: IFFALSE 87837
// exit ;
87835: GO 88091
// until GetDistUnitXY ( unit , x , y ) < dist ;
87837: LD_VAR 0 1
87841: PPUSH
87842: LD_VAR 0 2
87846: PPUSH
87847: LD_VAR 0 3
87851: PPUSH
87852: CALL_OW 297
87856: PUSH
87857: LD_VAR 0 5
87861: LESS
87862: IFFALSE 87806
// end ; ComTurnXY ( unit , x , y ) ;
87864: LD_VAR 0 1
87868: PPUSH
87869: LD_VAR 0 2
87873: PPUSH
87874: LD_VAR 0 3
87878: PPUSH
87879: CALL_OW 118
// wait ( 5 ) ;
87883: LD_INT 5
87885: PPUSH
87886: CALL_OW 67
// _d := GetDir ( unit ) ;
87890: LD_ADDR_VAR 0 10
87894: PUSH
87895: LD_VAR 0 1
87899: PPUSH
87900: CALL_OW 254
87904: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
87905: LD_ADDR_VAR 0 8
87909: PUSH
87910: LD_VAR 0 1
87914: PPUSH
87915: CALL_OW 250
87919: PPUSH
87920: LD_VAR 0 10
87924: PPUSH
87925: LD_VAR 0 5
87929: PPUSH
87930: CALL_OW 272
87934: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
87935: LD_ADDR_VAR 0 9
87939: PUSH
87940: LD_VAR 0 1
87944: PPUSH
87945: CALL_OW 251
87949: PPUSH
87950: LD_VAR 0 10
87954: PPUSH
87955: LD_VAR 0 5
87959: PPUSH
87960: CALL_OW 273
87964: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87965: LD_VAR 0 8
87969: PPUSH
87970: LD_VAR 0 9
87974: PPUSH
87975: CALL_OW 488
87979: NOT
87980: IFFALSE 87984
// exit ;
87982: GO 88091
// ComAnimCustom ( unit , 1 ) ;
87984: LD_VAR 0 1
87988: PPUSH
87989: LD_INT 1
87991: PPUSH
87992: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
87996: LD_VAR 0 8
88000: PPUSH
88001: LD_VAR 0 9
88005: PPUSH
88006: LD_VAR 0 6
88010: PPUSH
88011: LD_VAR 0 7
88015: PPUSH
88016: CALL_OW 330
// repeat wait ( 1 ) ;
88020: LD_INT 1
88022: PPUSH
88023: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88027: LD_VAR 0 1
88031: PPUSH
88032: CALL_OW 316
88036: PUSH
88037: LD_VAR 0 1
88041: PPUSH
88042: CALL_OW 314
88046: OR
88047: PUSH
88048: LD_VAR 0 1
88052: PPUSH
88053: CALL_OW 302
88057: NOT
88058: OR
88059: PUSH
88060: LD_VAR 0 1
88064: PPUSH
88065: CALL_OW 301
88069: OR
88070: IFFALSE 88020
// RemoveSeeing ( _x , _y , side ) ;
88072: LD_VAR 0 8
88076: PPUSH
88077: LD_VAR 0 9
88081: PPUSH
88082: LD_VAR 0 6
88086: PPUSH
88087: CALL_OW 331
// end ; end_of_file
88091: LD_VAR 0 4
88095: RET
// export function StopOriginalMusic ; begin
88096: LD_INT 0
88098: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
88099: LD_STRING OW_FORCEMUSICDISABLE(true);
88101: PPUSH
88102: CALL_OW 559
// end ;
88106: LD_VAR 0 1
88110: RET
// export function PlayOriginalMusic ; begin
88111: LD_INT 0
88113: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
88114: LD_STRING OW_FORCEMUSICDISABLE(false);
88116: PPUSH
88117: CALL_OW 559
// end ;
88121: LD_VAR 0 1
88125: RET
// export function PlayCustomMusic ( track , callback ) ; begin
88126: LD_INT 0
88128: PPUSH
// StopOriginalMusic ;
88129: CALL 88096 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
88133: LD_STRING playMusic("
88135: PUSH
88136: LD_VAR 0 1
88140: STR
88141: PUSH
88142: LD_STRING ", "
88144: STR
88145: PUSH
88146: LD_VAR 0 2
88150: STR
88151: PUSH
88152: LD_STRING ")
88154: STR
88155: PPUSH
88156: CALL_OW 559
// end ;
88160: LD_VAR 0 3
88164: RET
