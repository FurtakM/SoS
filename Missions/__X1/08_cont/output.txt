// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20290 0 0
// PrepareRussian ;
  12: CALL 2018 0 0
// PrepareArabian ;
  16: CALL 438 0 0
// Action ;
  20: CALL 3761 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// enable ( entranceEvent ) ;
 427: LD_INT 1
 429: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 430: LD_INT 2
 432: DISABLE_MARKED
// end ; end_of_file
 433: LD_VAR 0 1
 437: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side := 4 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 4
 449: ST_TO_ADDR
// uc_nation := 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 458: LD_ADDR_EXP 57
 462: PUSH
 463: LD_STRING 07_Americans
 465: PPUSH
 466: CALL_OW 31
 470: ST_TO_ADDR
// if americanSquad < 5 then
 471: LD_EXP 57
 475: PUSH
 476: LD_INT 5
 478: LESS
 479: IFFALSE 573
// begin if not americanSquad then
 481: LD_EXP 57
 485: NOT
 486: IFFALSE 495
// americanSquad := [ ] ;
 488: LD_ADDR_EXP 57
 492: PUSH
 493: EMPTY
 494: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 495: LD_ADDR_VAR 0 2
 499: PUSH
 500: DOUBLE
 501: LD_EXP 57
 505: DEC
 506: ST_TO_ADDR
 507: LD_INT 2
 509: PUSH
 510: LD_INT 3
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 4
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PUSH
 531: FOR_TO
 532: IFFALSE 569
// begin PrepareHuman ( false , 2 , 6 ) ;
 534: LD_INT 0
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 6
 542: PPUSH
 543: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 547: LD_ADDR_EXP 57
 551: PUSH
 552: LD_EXP 57
 556: PPUSH
 557: CALL_OW 44
 561: PPUSH
 562: CALL 66300 0 2
 566: ST_TO_ADDR
// end ;
 567: GO 531
 569: POP
 570: POP
// end else
 571: GO 620
// for i := Count ( americanSquad ) downto 5 do
 573: LD_ADDR_VAR 0 2
 577: PUSH
 578: DOUBLE
 579: LD_EXP 57
 583: PPUSH
 584: CALL 30967 0 1
 588: INC
 589: ST_TO_ADDR
 590: LD_INT 5
 592: PUSH
 593: FOR_DOWNTO
 594: IFFALSE 618
// americanSquad := Delete ( americanSquad , i ) ;
 596: LD_ADDR_EXP 57
 600: PUSH
 601: LD_EXP 57
 605: PPUSH
 606: LD_VAR 0 2
 610: PPUSH
 611: CALL_OW 3
 615: ST_TO_ADDR
 616: GO 593
 618: POP
 619: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 620: LD_ADDR_EXP 59
 624: PUSH
 625: LD_STRING UsCommander
 627: PPUSH
 628: LD_EXP 1
 632: NOT
 633: PPUSH
 634: LD_STRING 07_
 636: PPUSH
 637: CALL 28865 0 3
 641: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 642: LD_INT 1
 644: PPUSH
 645: LD_INT 6
 647: PPUSH
 648: CALL_OW 381
// Jerry := CreateHuman ;
 652: LD_ADDR_EXP 60
 656: PUSH
 657: CALL_OW 44
 661: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 662: LD_EXP 60
 666: PPUSH
 667: LD_INT 33
 669: PPUSH
 670: CALL_OW 336
// if not Doug then
 674: LD_EXP 59
 678: NOT
 679: IFFALSE 701
// begin PrepareSoldier ( sex_male , 6 ) ;
 681: LD_INT 1
 683: PPUSH
 684: LD_INT 6
 686: PPUSH
 687: CALL_OW 381
// Doug := CreateHuman ;
 691: LD_ADDR_EXP 59
 695: PUSH
 696: CALL_OW 44
 700: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 701: LD_EXP 59
 705: PPUSH
 706: LD_INT 33
 708: PPUSH
 709: CALL_OW 336
// if johnnySaved or debug then
 713: LD_EXP 3
 717: PUSH
 718: LD_EXP 1
 722: OR
 723: IFFALSE 750
// begin Harris := NewCharacter ( Harris ) ;
 725: LD_ADDR_EXP 58
 729: PUSH
 730: LD_STRING Harris
 732: PPUSH
 733: CALL_OW 25
 737: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 738: LD_EXP 58
 742: PPUSH
 743: LD_INT 33
 745: PPUSH
 746: CALL_OW 336
// end ; uc_side := 2 ;
 750: LD_ADDR_OWVAR 20
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// uc_nation := 2 ;
 758: LD_ADDR_OWVAR 21
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 766: LD_ADDR_EXP 45
 770: PUSH
 771: LD_STRING Heike
 773: PPUSH
 774: LD_EXP 1
 778: NOT
 779: PPUSH
 780: LD_EXP 2
 784: PPUSH
 785: CALL 28865 0 3
 789: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 790: LD_ADDR_EXP 48
 794: PUSH
 795: LD_STRING Ibrahim
 797: PPUSH
 798: LD_EXP 1
 802: NOT
 803: PPUSH
 804: LD_EXP 2
 808: PPUSH
 809: CALL 28865 0 3
 813: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 814: LD_ADDR_EXP 46
 818: PUSH
 819: LD_STRING Givi
 821: PPUSH
 822: LD_EXP 1
 826: NOT
 827: PPUSH
 828: LD_EXP 2
 832: PPUSH
 833: CALL 28865 0 3
 837: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING Kamil
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 2
 856: PPUSH
 857: CALL 28865 0 3
 861: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 862: LD_ADDR_EXP 50
 866: PUSH
 867: LD_STRING Kaia
 869: PPUSH
 870: LD_EXP 1
 874: NOT
 875: PPUSH
 876: LD_EXP 2
 880: PPUSH
 881: CALL 28865 0 3
 885: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 886: LD_ADDR_EXP 51
 890: PUSH
 891: LD_STRING Sophia
 893: PPUSH
 894: LD_EXP 1
 898: NOT
 899: PPUSH
 900: LD_EXP 2
 904: PPUSH
 905: CALL 28865 0 3
 909: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 910: LD_ADDR_EXP 52
 914: PUSH
 915: LD_STRING Markov
 917: PPUSH
 918: LD_EXP 1
 922: NOT
 923: PPUSH
 924: LD_EXP 2
 928: PPUSH
 929: CALL 28865 0 3
 933: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 934: LD_ADDR_EXP 55
 938: PUSH
 939: LD_STRING Aviradze
 941: PPUSH
 942: LD_EXP 1
 946: NOT
 947: PPUSH
 948: LD_EXP 2
 952: PPUSH
 953: CALL 28865 0 3
 957: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 958: LD_ADDR_EXP 54
 962: PUSH
 963: LD_STRING Kurt
 965: PPUSH
 966: LD_EXP 1
 970: NOT
 971: PPUSH
 972: LD_EXP 2
 976: PPUSH
 977: CALL 28865 0 3
 981: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 982: LD_ADDR_EXP 47
 986: PUSH
 987: LD_STRING Mike
 989: PPUSH
 990: LD_EXP 1
 994: NOT
 995: PPUSH
 996: LD_EXP 2
1000: PPUSH
1001: CALL 28865 0 3
1005: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1006: LD_ADDR_EXP 53
1010: PUSH
1011: LD_STRING Olaf
1013: PPUSH
1014: LD_EXP 1
1018: NOT
1019: PPUSH
1020: LD_EXP 2
1024: PPUSH
1025: CALL 28865 0 3
1029: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1030: LD_ADDR_EXP 56
1034: PUSH
1035: LD_STRING 07_others
1037: PPUSH
1038: CALL_OW 31
1042: ST_TO_ADDR
// end ;
1043: LD_VAR 0 1
1047: RET
// export function PrepareGame ; var i ; begin
1048: LD_INT 0
1050: PPUSH
1051: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1052: LD_EXP 45
1056: PPUSH
1057: LD_INT 23
1059: PPUSH
1060: CALL_OW 52
// if Givi then
1064: LD_EXP 46
1068: IFFALSE 1106
// begin SetSide ( Givi , 5 ) ;
1070: LD_EXP 46
1074: PPUSH
1075: LD_INT 5
1077: PPUSH
1078: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1082: LD_EXP 46
1086: PPUSH
1087: LD_INT 9
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// ComHold ( Givi ) ;
1097: LD_EXP 46
1101: PPUSH
1102: CALL_OW 140
// end ; if Markov then
1106: LD_EXP 52
1110: IFFALSE 1148
// begin SetSide ( Markov , 5 ) ;
1112: LD_EXP 52
1116: PPUSH
1117: LD_INT 5
1119: PPUSH
1120: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1124: LD_EXP 52
1128: PPUSH
1129: LD_INT 3
1131: PPUSH
1132: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1136: LD_EXP 52
1140: PPUSH
1141: LD_INT 61
1143: PPUSH
1144: CALL_OW 52
// end ; if Mike then
1148: LD_EXP 47
1152: IFFALSE 1190
// begin SetSide ( Mike , 5 ) ;
1154: LD_EXP 47
1158: PPUSH
1159: LD_INT 5
1161: PPUSH
1162: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1166: LD_EXP 47
1170: PPUSH
1171: LD_INT 17
1173: PPUSH
1174: LD_INT 0
1176: PPUSH
1177: CALL_OW 49
// ComHold ( Mike ) ;
1181: LD_EXP 47
1185: PPUSH
1186: CALL_OW 140
// end ; if Olaf then
1190: LD_EXP 53
1194: IFFALSE 1235
// begin SetSide ( Olaf , 5 ) ;
1196: LD_EXP 53
1200: PPUSH
1201: LD_INT 5
1203: PPUSH
1204: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1208: LD_EXP 53
1212: PPUSH
1213: LD_INT 16
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1223: LD_EXP 53
1227: PPUSH
1228: LD_INT 3
1230: PPUSH
1231: CALL 69452 0 2
// end ; if Kamil then
1235: LD_EXP 49
1239: IFFALSE 1265
// begin SetSide ( Kamil , 5 ) ;
1241: LD_EXP 49
1245: PPUSH
1246: LD_INT 5
1248: PPUSH
1249: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1253: LD_EXP 49
1257: PPUSH
1258: LD_INT 109
1260: PPUSH
1261: CALL_OW 52
// end ; if Kurt then
1265: LD_EXP 54
1269: IFFALSE 1295
// begin SetSide ( Kurt , 5 ) ;
1271: LD_EXP 54
1275: PPUSH
1276: LD_INT 5
1278: PPUSH
1279: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1283: LD_EXP 54
1287: PPUSH
1288: LD_INT 169
1290: PPUSH
1291: CALL_OW 52
// end ; if Kaia then
1295: LD_EXP 50
1299: IFFALSE 1325
// begin SetSide ( Kaia , 5 ) ;
1301: LD_EXP 50
1305: PPUSH
1306: LD_INT 5
1308: PPUSH
1309: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1313: LD_EXP 50
1317: PPUSH
1318: LD_INT 147
1320: PPUSH
1321: CALL_OW 52
// end ; if Sophia then
1325: LD_EXP 51
1329: IFFALSE 1370
// begin SetSide ( Sophia , 5 ) ;
1331: LD_EXP 51
1335: PPUSH
1336: LD_INT 5
1338: PPUSH
1339: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1343: LD_EXP 51
1347: PPUSH
1348: LD_INT 142
1350: PPUSH
1351: LD_INT 96
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 48
// ComHold ( Sophia ) ;
1361: LD_EXP 51
1365: PPUSH
1366: CALL_OW 140
// end ; if Harris then
1370: LD_EXP 58
1374: IFFALSE 1412
// begin SetSide ( Harris , 4 ) ;
1376: LD_EXP 58
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1388: LD_EXP 58
1392: PPUSH
1393: LD_INT 20
1395: PPUSH
1396: LD_INT 0
1398: PPUSH
1399: CALL_OW 49
// ComHold ( i ) ;
1403: LD_VAR 0 2
1407: PPUSH
1408: CALL_OW 140
// end ; if Doug then
1412: LD_EXP 59
1416: IFFALSE 1442
// begin SetSide ( Doug , 4 ) ;
1418: LD_EXP 59
1422: PPUSH
1423: LD_INT 4
1425: PPUSH
1426: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1430: LD_EXP 59
1434: PPUSH
1435: LD_INT 106
1437: PPUSH
1438: CALL_OW 52
// end ; if Aviradze then
1442: LD_EXP 55
1446: IFFALSE 1472
// begin SetSide ( Aviradze , 5 ) ;
1448: LD_EXP 55
1452: PPUSH
1453: LD_INT 5
1455: PPUSH
1456: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1460: LD_EXP 55
1464: PPUSH
1465: LD_INT 119
1467: PPUSH
1468: CALL_OW 52
// end ; if Ibrahim then
1472: LD_EXP 48
1476: IFFALSE 1502
// begin SetSide ( Ibrahim , 5 ) ;
1478: LD_EXP 48
1482: PPUSH
1483: LD_INT 5
1485: PPUSH
1486: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1490: LD_EXP 48
1494: PPUSH
1495: LD_INT 119
1497: PPUSH
1498: CALL_OW 52
// end ; if Jerry then
1502: LD_EXP 60
1506: IFFALSE 1547
// begin SetSide ( Jerry , 4 ) ;
1508: LD_EXP 60
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1520: LD_EXP 60
1524: PPUSH
1525: LD_INT 119
1527: PPUSH
1528: LD_INT 59
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 48
// ComHold ( Jerry ) ;
1538: LD_EXP 60
1542: PPUSH
1543: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1547: LD_EXP 64
1551: PPUSH
1552: LD_INT 119
1554: PPUSH
1555: CALL_OW 52
// for i in americanSquad do
1559: LD_ADDR_VAR 0 2
1563: PUSH
1564: LD_EXP 57
1568: PUSH
1569: FOR_IN
1570: IFFALSE 1598
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 21
1579: PPUSH
1580: LD_INT 0
1582: PPUSH
1583: CALL_OW 49
// ComHold ( i ) ;
1587: LD_VAR 0 2
1591: PPUSH
1592: CALL_OW 140
// end ;
1596: GO 1569
1598: POP
1599: POP
// for i in heikeSecondSquad do
1600: LD_ADDR_VAR 0 2
1604: PUSH
1605: LD_EXP 56
1609: PUSH
1610: FOR_IN
1611: IFFALSE 1651
// begin SetSide ( i , 5 ) ;
1613: LD_VAR 0 2
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1625: LD_VAR 0 2
1629: PPUSH
1630: LD_INT 22
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// ComHold ( i ) ;
1640: LD_VAR 0 2
1644: PPUSH
1645: CALL_OW 140
// end ;
1649: GO 1610
1651: POP
1652: POP
// if not hasVodka then
1653: LD_EXP 4
1657: NOT
1658: IFFALSE 1717
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1660: LD_ADDR_VAR 0 2
1664: PUSH
1665: LD_INT 2
1667: PUSH
1668: LD_INT 22
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 22
1680: PUSH
1681: LD_INT 5
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PPUSH
1693: CALL_OW 69
1697: PUSH
1698: FOR_IN
1699: IFFALSE 1715
// SetLives ( i , 500 ) ;
1701: LD_VAR 0 2
1705: PPUSH
1706: LD_INT 500
1708: PPUSH
1709: CALL_OW 234
1713: GO 1698
1715: POP
1716: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: LD_INT 22
1724: PUSH
1725: LD_INT 4
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: FOR_IN
1738: IFFALSE 1754
// SetLives ( i , 500 ) ;
1740: LD_VAR 0 2
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: CALL_OW 234
1752: GO 1737
1754: POP
1755: POP
// end ;
1756: LD_VAR 0 1
1760: RET
// export function SetClassKaiaRevolver ; begin
1761: LD_INT 0
1763: PPUSH
// if not IsOk ( Kaia ) then
1764: LD_EXP 50
1768: PPUSH
1769: CALL_OW 302
1773: NOT
1774: IFFALSE 1778
// exit ;
1776: GO 1797
// SetClass ( Kaia , class_revolver ) ;
1778: LD_EXP 50
1782: PPUSH
1783: LD_INT 34
1785: PPUSH
1786: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1790: LD_STRING ACH_REVOLVER
1792: PPUSH
1793: CALL_OW 543
// end ;
1797: LD_VAR 0 1
1801: RET
// export function SpawnHeikeAsRussian ; begin
1802: LD_INT 0
1804: PPUSH
// RemoveUnit ( Heike ) ;
1805: LD_EXP 45
1809: PPUSH
1810: CALL_OW 64
// heikeTmp := Heike ;
1814: LD_ADDR_EXP 61
1818: PUSH
1819: LD_EXP 45
1823: ST_TO_ADDR
// uc_side := 2 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 2
1831: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1832: LD_ADDR_EXP 45
1836: PUSH
1837: LD_STRING HeikeRu
1839: PPUSH
1840: CALL_OW 25
1844: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1845: LD_EXP 61
1849: PPUSH
1850: LD_EXP 45
1854: PPUSH
1855: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1859: LD_EXP 45
1863: PPUSH
1864: LD_INT 165
1866: PPUSH
1867: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1871: LD_EXP 45
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 336
// heikeAsRussian := true ;
1883: LD_ADDR_EXP 27
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1891: LD_STRING M1-laundry-out
1893: PPUSH
1894: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1898: LD_STRING ACH_HEIKERU
1900: PPUSH
1901: CALL_OW 543
// end ;
1905: LD_VAR 0 1
1909: RET
// export function SpawnGiviAsRussian ; begin
1910: LD_INT 0
1912: PPUSH
// RemoveUnit ( Givi ) ;
1913: LD_EXP 46
1917: PPUSH
1918: CALL_OW 64
// giviTmp := Givi ;
1922: LD_ADDR_EXP 62
1926: PUSH
1927: LD_EXP 46
1931: ST_TO_ADDR
// uc_side := 2 ;
1932: LD_ADDR_OWVAR 20
1936: PUSH
1937: LD_INT 2
1939: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1940: LD_ADDR_EXP 46
1944: PUSH
1945: LD_STRING GiviRu
1947: PPUSH
1948: CALL_OW 25
1952: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1953: LD_EXP 62
1957: PPUSH
1958: LD_EXP 46
1962: PPUSH
1963: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1967: LD_EXP 46
1971: PPUSH
1972: LD_INT 165
1974: PPUSH
1975: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1979: LD_EXP 46
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: CALL_OW 336
// giviAsRussian := true ;
1991: LD_ADDR_EXP 28
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1999: LD_STRING M1-laundry-out
2001: PPUSH
2002: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2006: LD_STRING ACH_GIVIRU
2008: PPUSH
2009: CALL_OW 543
// end ; end_of_file
2013: LD_VAR 0 1
2017: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2018: LD_INT 0
2020: PPUSH
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
// uc_side := 3 ;
2025: LD_ADDR_OWVAR 20
2029: PUSH
2030: LD_INT 3
2032: ST_TO_ADDR
// uc_nation := 3 ;
2033: LD_ADDR_OWVAR 21
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2041: LD_INT 192
2043: PPUSH
2044: LD_STRING kitchen
2046: PPUSH
2047: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2051: LD_INT 165
2053: PPUSH
2054: LD_STRING laundry
2056: PPUSH
2057: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2061: LD_INT 54
2063: PPUSH
2064: LD_STRING adminSection
2066: PPUSH
2067: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 3
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2108
// SetBLevel ( i , 7 ) ;
2094: LD_VAR 0 2
2098: PPUSH
2099: LD_INT 7
2101: PPUSH
2102: CALL_OW 241
2106: GO 2091
2108: POP
2109: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2110: LD_ADDR_VAR 0 2
2114: PUSH
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 2
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 30
2140: PUSH
2141: LD_INT 1
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL_OW 69
2161: PUSH
2162: FOR_IN
2163: IFFALSE 2227
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2165: LD_VAR 0 2
2169: PPUSH
2170: CALL_OW 274
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 1000
2180: PPUSH
2181: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2185: LD_VAR 0 2
2189: PPUSH
2190: CALL_OW 274
2194: PPUSH
2195: LD_INT 2
2197: PPUSH
2198: LD_INT 1000
2200: PPUSH
2201: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: CALL_OW 274
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 100
2220: PPUSH
2221: CALL_OW 277
// end ;
2225: GO 2162
2227: POP
2228: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2229: LD_ADDR_VAR 0 2
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 3
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 30
2246: PUSH
2247: LD_INT 32
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PPUSH
2258: CALL_OW 69
2262: PUSH
2263: FOR_IN
2264: IFFALSE 2298
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2266: LD_INT 0
2268: PPUSH
2269: LD_INT 5
2271: PUSH
2272: LD_OWVAR 67
2276: PLUS
2277: PPUSH
2278: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2282: CALL_OW 44
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: CALL_OW 52
// end ;
2296: GO 2263
2298: POP
2299: POP
// for i := 1 to 2 do
2300: LD_ADDR_VAR 0 2
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 2
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2366
// begin PrepareMechanic ( false , 8 ) ;
2316: LD_INT 0
2318: PPUSH
2319: LD_INT 8
2321: PPUSH
2322: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2326: LD_ADDR_EXP 66
2330: PUSH
2331: LD_EXP 66
2335: PPUSH
2336: CALL_OW 44
2340: PPUSH
2341: CALL 66300 0 2
2345: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2346: LD_EXP 66
2350: PUSH
2351: LD_EXP 66
2355: ARRAY
2356: PPUSH
2357: LD_INT 61
2359: PPUSH
2360: CALL_OW 52
// end ;
2364: GO 2313
2366: POP
2367: POP
// PrepareMechanic ( sex_male , 8 ) ;
2368: LD_INT 1
2370: PPUSH
2371: LD_INT 8
2373: PPUSH
2374: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2378: LD_ADDR_EXP 67
2382: PUSH
2383: LD_EXP 67
2387: PPUSH
2388: CALL_OW 44
2392: PPUSH
2393: CALL 66300 0 2
2397: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2398: LD_EXP 67
2402: PUSH
2403: LD_EXP 67
2407: ARRAY
2408: PPUSH
2409: LD_INT 196
2411: PPUSH
2412: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 383
// hc_name := Stiepan Simonov ;
2426: LD_ADDR_OWVAR 26
2430: PUSH
2431: LD_STRING Stiepan Simonov
2433: ST_TO_ADDR
// Stiopa := CreateHuman ;
2434: LD_ADDR_EXP 68
2438: PUSH
2439: CALL_OW 44
2443: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2444: LD_INT 2
2446: PPUSH
2447: LD_INT 8
2449: PPUSH
2450: CALL_OW 383
// hc_name := Laura Dragunov ;
2454: LD_ADDR_OWVAR 26
2458: PUSH
2459: LD_STRING Laura Dragunov
2461: ST_TO_ADDR
// Laura := CreateHuman ;
2462: LD_ADDR_EXP 69
2466: PUSH
2467: CALL_OW 44
2471: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2472: LD_EXP 69
2476: PPUSH
2477: LD_INT 196
2479: PPUSH
2480: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 8
2489: PPUSH
2490: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2494: LD_ADDR_EXP 66
2498: PUSH
2499: LD_EXP 66
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 44
2511: PPUSH
2512: CALL_OW 2
2516: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2517: LD_EXP 66
2521: PUSH
2522: LD_INT 1
2524: ARRAY
2525: PPUSH
2526: LD_INT 61
2528: PPUSH
2529: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 8
2538: PPUSH
2539: CALL_OW 381
// hc_name := Pavel Muchin ;
2543: LD_ADDR_OWVAR 26
2547: PUSH
2548: LD_STRING Pavel Muchin
2550: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2551: LD_ADDR_OWVAR 29
2555: PUSH
2556: LD_INT 13
2558: PUSH
2559: LD_INT 13
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2566: LD_ADDR_EXP 65
2570: PUSH
2571: CALL_OW 44
2575: ST_TO_ADDR
// InitHC_All ( ) ;
2576: CALL_OW 584
// if Difficulty > 1 then
2580: LD_OWVAR 67
2584: PUSH
2585: LD_INT 1
2587: GREATER
2588: IFFALSE 2708
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 3
2602: PUSH
2603: LD_INT 4
2605: PUSH
2606: LD_INT 5
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: PUSH
2614: LD_OWVAR 67
2618: PUSH
2619: LD_INT 1
2621: PLUS
2622: ARRAY
2623: PUSH
2624: FOR_TO
2625: IFFALSE 2706
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2627: LD_INT 0
2629: PPUSH
2630: LD_INT 5
2632: PUSH
2633: LD_INT 6
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: PUSH
2644: LD_OWVAR 67
2648: PUSH
2649: LD_INT 1
2651: PLUS
2652: ARRAY
2653: PPUSH
2654: CALL_OW 381
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 62
2675: PUSH
2676: LD_INT 63
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_VAR 0 2
2687: PUSH
2688: LD_INT 2
2690: MOD
2691: PUSH
2692: LD_INT 1
2694: PLUS
2695: ARRAY
2696: PPUSH
2697: LD_INT 0
2699: PPUSH
2700: CALL_OW 49
// end ;
2704: GO 2624
2706: POP
2707: POP
// end ; uc_side := 6 ;
2708: LD_ADDR_OWVAR 20
2712: PUSH
2713: LD_INT 6
2715: ST_TO_ADDR
// uc_nation := 3 ;
2716: LD_ADDR_OWVAR 21
2720: PUSH
2721: LD_INT 3
2723: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2724: LD_ADDR_VAR 0 5
2728: PUSH
2729: LD_INT 14
2731: PUSH
2732: LD_INT 15
2734: PUSH
2735: LD_INT 48
2737: PUSH
2738: LD_INT 24
2740: PUSH
2741: LD_INT 149
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// for i in tmp do
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: PUSH
2761: FOR_IN
2762: IFFALSE 2810
// begin for j := 1 to 2 do
2764: LD_ADDR_VAR 0 3
2768: PUSH
2769: DOUBLE
2770: LD_INT 1
2772: DEC
2773: ST_TO_ADDR
2774: LD_INT 2
2776: PUSH
2777: FOR_TO
2778: IFFALSE 2806
// begin PrepareSoldier ( false , 7 ) ;
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 7
2785: PPUSH
2786: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2790: CALL_OW 44
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// end ;
2804: GO 2777
2806: POP
2807: POP
// end ;
2808: GO 2761
2810: POP
2811: POP
// end ;
2812: LD_VAR 0 1
2816: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2817: LD_INT 0
2819: PPUSH
2820: PPUSH
2821: PPUSH
2822: PPUSH
// uc_side := 3 ;
2823: LD_ADDR_OWVAR 20
2827: PUSH
2828: LD_INT 3
2830: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2831: LD_ADDR_OWVAR 21
2835: PUSH
2836: LD_INT 1
2838: PPUSH
2839: LD_INT 3
2841: PPUSH
2842: CALL_OW 12
2846: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2847: LD_ADDR_VAR 0 4
2851: PUSH
2852: LD_INT 5
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 517
2862: ST_TO_ADDR
// for i := 1 to 3 do
2863: LD_ADDR_VAR 0 2
2867: PUSH
2868: DOUBLE
2869: LD_INT 1
2871: DEC
2872: ST_TO_ADDR
2873: LD_INT 3
2875: PUSH
2876: FOR_TO
2877: IFFALSE 2946
// begin PrepareHuman ( false , 33 , 0 ) ;
2879: LD_INT 0
2881: PPUSH
2882: LD_INT 33
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 380
// un := CreateHuman ;
2892: LD_ADDR_VAR 0 3
2896: PUSH
2897: CALL_OW 44
2901: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2902: LD_VAR 0 3
2906: PPUSH
2907: LD_VAR 0 4
2911: PUSH
2912: LD_INT 1
2914: ARRAY
2915: PUSH
2916: LD_VAR 0 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 4
2926: PUSH
2927: LD_INT 2
2929: ARRAY
2930: PUSH
2931: LD_VAR 0 2
2935: ARRAY
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: CALL_OW 601
// end ;
2944: GO 2876
2946: POP
2947: POP
// end ;
2948: LD_VAR 0 1
2952: RET
// export function PrepareFirstScene ; var i , un ; begin
2953: LD_INT 0
2955: PPUSH
2956: PPUSH
2957: PPUSH
// uc_side := 4 ;
2958: LD_ADDR_OWVAR 20
2962: PUSH
2963: LD_INT 4
2965: ST_TO_ADDR
// uc_nation := 1 ;
2966: LD_ADDR_OWVAR 21
2970: PUSH
2971: LD_INT 1
2973: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_INT 33
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 380
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3066
// begin un := CreateHuman ;
3003: LD_ADDR_VAR 0 3
3007: PUSH
3008: CALL_OW 44
3012: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3013: LD_VAR 0 3
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3025: LD_VAR 0 3
3029: PPUSH
3030: LD_INT 6
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3040: LD_VAR 0 3
3044: PPUSH
3045: LD_INT 1
3047: PPUSH
3048: CALL 69452 0 2
// SetLives ( un , 300 ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 300
3059: PPUSH
3060: CALL_OW 234
// end ;
3064: GO 3000
3066: POP
3067: POP
// uc_side := 3 ;
3068: LD_ADDR_OWVAR 20
3072: PUSH
3073: LD_INT 3
3075: ST_TO_ADDR
// uc_nation := 3 ;
3076: LD_ADDR_OWVAR 21
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 5
3089: PPUSH
3090: CALL_OW 381
// for i := 1 to 3 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 3
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3181
// begin un := CreateHuman ;
3110: LD_ADDR_VAR 0 3
3114: PUSH
3115: CALL_OW 44
3119: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3120: LD_ADDR_EXP 63
3124: PUSH
3125: LD_EXP 63
3129: PPUSH
3130: LD_VAR 0 3
3134: PPUSH
3135: CALL 66300 0 2
3139: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 4
3147: PPUSH
3148: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 7
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 4
3174: PPUSH
3175: CALL 69452 0 2
// end ;
3179: GO 3107
3181: POP
3182: POP
// ruCommisar := CreateHuman ;
3183: LD_ADDR_EXP 64
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3193: LD_EXP 64
3197: PPUSH
3198: LD_INT 124
3200: PPUSH
3201: LD_INT 37
3203: PPUSH
3204: LD_INT 0
3206: PPUSH
3207: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3211: LD_EXP 64
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3223: LD_EXP 64
3227: PPUSH
3228: LD_INT 3
3230: PPUSH
3231: CALL 69452 0 2
// end ;
3235: LD_VAR 0 1
3239: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3240: LD_INT 0
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
// uc_side := 6 ;
3246: LD_ADDR_OWVAR 20
3250: PUSH
3251: LD_INT 6
3253: ST_TO_ADDR
// uc_nation := 3 ;
3254: LD_ADDR_OWVAR 21
3258: PUSH
3259: LD_INT 3
3261: ST_TO_ADDR
// ruPatrol := [ ] ;
3262: LD_ADDR_EXP 70
3266: PUSH
3267: EMPTY
3268: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3269: LD_ADDR_VAR 0 4
3273: PUSH
3274: LD_INT 26
3276: PUSH
3277: LD_INT 30
3279: PUSH
3280: LD_INT 39
3282: PUSH
3283: LD_INT 43
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: ST_TO_ADDR
// for i := 1 to spawn do
3292: LD_ADDR_VAR 0 2
3296: PUSH
3297: DOUBLE
3298: LD_INT 1
3300: DEC
3301: ST_TO_ADDR
3302: LD_VAR 0 4
3306: PUSH
3307: FOR_TO
3308: IFFALSE 3419
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3310: LD_INT 0
3312: PPUSH
3313: LD_INT 4
3315: PUSH
3316: LD_INT 5
3318: PUSH
3319: LD_INT 6
3321: PUSH
3322: LD_INT 7
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: PUSH
3331: LD_OWVAR 67
3335: ARRAY
3336: PPUSH
3337: CALL_OW 381
// un := CreateHuman ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: CALL_OW 44
3350: ST_TO_ADDR
// SetTag ( un , i ) ;
3351: LD_VAR 0 3
3355: PPUSH
3356: LD_VAR 0 2
3360: PPUSH
3361: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3365: LD_ADDR_EXP 70
3369: PUSH
3370: LD_EXP 70
3374: PPUSH
3375: LD_VAR 0 3
3379: PPUSH
3380: CALL 66300 0 2
3384: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3385: LD_VAR 0 3
3389: PPUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: CALL_OW 49
// ComHold ( un ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: CALL_OW 140
// end ;
3417: GO 3307
3419: POP
3420: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3421: LD_ADDR_VAR 0 4
3425: PUSH
3426: LD_INT 48
3428: PUSH
3429: LD_INT 49
3431: PUSH
3432: LD_INT 50
3434: PUSH
3435: LD_INT 51
3437: PUSH
3438: LD_INT 52
3440: PUSH
3441: LD_INT 53
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: ST_TO_ADDR
// for i := 1 to spawn do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: DOUBLE
3458: LD_INT 1
3460: DEC
3461: ST_TO_ADDR
3462: LD_VAR 0 4
3466: PUSH
3467: FOR_TO
3468: IFFALSE 3577
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3470: LD_INT 0
3472: PPUSH
3473: LD_INT 4
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 6
3481: PUSH
3482: LD_INT 7
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_OWVAR 67
3495: ARRAY
3496: PPUSH
3497: CALL_OW 381
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 3
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3523: LD_ADDR_EXP 70
3527: PUSH
3528: LD_EXP 70
3532: PPUSH
3533: LD_VAR 0 3
3537: PPUSH
3538: CALL 66300 0 2
3542: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3543: LD_VAR 0 3
3547: PPUSH
3548: LD_VAR 0 4
3552: PUSH
3553: LD_VAR 0 2
3557: ARRAY
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// ComHold ( un ) ;
3566: LD_VAR 0 3
3570: PPUSH
3571: CALL_OW 140
// end ;
3575: GO 3467
3577: POP
3578: POP
// end ;
3579: LD_VAR 0 1
3583: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3584: LD_INT 0
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
// uc_side := 6 ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_INT 6
3597: ST_TO_ADDR
// uc_nation := nation_russian ;
3598: LD_ADDR_OWVAR 21
3602: PUSH
3603: LD_INT 3
3605: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3606: LD_ADDR_VAR 0 4
3610: PUSH
3611: LD_INT 54
3613: PUSH
3614: LD_INT 55
3616: PUSH
3617: LD_INT 56
3619: PUSH
3620: LD_INT 57
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: ST_TO_ADDR
// for i := 1 to spawn do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: DOUBLE
3635: LD_INT 1
3637: DEC
3638: ST_TO_ADDR
3639: LD_VAR 0 4
3643: PUSH
3644: FOR_TO
3645: IFFALSE 3754
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3647: LD_INT 0
3649: PPUSH
3650: LD_INT 4
3652: PUSH
3653: LD_INT 5
3655: PUSH
3656: LD_INT 6
3658: PUSH
3659: LD_INT 7
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_OWVAR 67
3672: ARRAY
3673: PPUSH
3674: CALL_OW 381
// un := CreateHuman ;
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: CALL_OW 44
3687: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3700: LD_ADDR_EXP 70
3704: PUSH
3705: LD_EXP 70
3709: PPUSH
3710: LD_VAR 0 3
3714: PPUSH
3715: CALL 66300 0 2
3719: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3720: LD_VAR 0 3
3724: PPUSH
3725: LD_VAR 0 4
3729: PUSH
3730: LD_VAR 0 2
3734: ARRAY
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// ComHold ( un ) ;
3743: LD_VAR 0 3
3747: PPUSH
3748: CALL_OW 140
// end ;
3752: GO 3644
3754: POP
3755: POP
// end ; end_of_file
3756: LD_VAR 0 1
3760: RET
// export function Action ; var speaker , i , tmp ; begin
3761: LD_INT 0
3763: PPUSH
3764: PPUSH
3765: PPUSH
3766: PPUSH
// Video ( true ) ;
3767: LD_INT 1
3769: PPUSH
3770: CALL 66272 0 1
// hasNormalScene := Kaia or Givi ;
3774: LD_ADDR_EXP 5
3778: PUSH
3779: LD_EXP 50
3783: PUSH
3784: LD_EXP 46
3788: OR
3789: ST_TO_ADDR
// if hasNormalScene then
3790: LD_EXP 5
3794: IFFALSE 4035
// begin for i in americanSquad do
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: LD_EXP 57
3805: PUSH
3806: FOR_IN
3807: IFFALSE 3853
// begin SetClass ( i , class_prison ) ;
3809: LD_VAR 0 3
3813: PPUSH
3814: LD_INT 33
3816: PPUSH
3817: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3821: LD_VAR 0 3
3825: PPUSH
3826: LD_INT 78
3828: PPUSH
3829: LD_INT 16
3831: PPUSH
3832: LD_INT 5
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 50
// ComHold ( i ) ;
3842: LD_VAR 0 3
3846: PPUSH
3847: CALL_OW 140
// end ;
3851: GO 3806
3853: POP
3854: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: LD_EXP 47
3864: PUSH
3865: LD_EXP 48
3869: PUSH
3870: LD_EXP 49
3874: PUSH
3875: LD_EXP 50
3879: PUSH
3880: LD_EXP 51
3884: PUSH
3885: LD_EXP 52
3889: PUSH
3890: LD_EXP 53
3894: PUSH
3895: LD_EXP 54
3899: PUSH
3900: LD_EXP 46
3904: PUSH
3905: LD_EXP 55
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: PUSH
3922: LD_EXP 56
3926: UNION
3927: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3928: LD_EXP 45
3932: PPUSH
3933: LD_INT 33
3935: PPUSH
3936: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3940: LD_EXP 45
3944: PPUSH
3945: LD_INT 117
3947: PPUSH
3948: LD_INT 24
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL 68440 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3961: LD_EXP 45
3965: PPUSH
3966: LD_INT 123
3968: PPUSH
3969: LD_INT 39
3971: PPUSH
3972: CALL_OW 118
// for i in tmp do
3976: LD_ADDR_VAR 0 3
3980: PUSH
3981: LD_VAR 0 4
3985: PUSH
3986: FOR_IN
3987: IFFALSE 4033
// begin SetClass ( i , class_prison ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 33
3996: PPUSH
3997: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4001: LD_VAR 0 3
4005: PPUSH
4006: LD_INT 3
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 113
4023: PPUSH
4024: LD_INT 16
4026: PPUSH
4027: CALL_OW 118
// end ;
4031: GO 3986
4033: POP
4034: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4035: LD_INT 124
4037: PPUSH
4038: LD_INT 39
4040: PPUSH
4041: CALL_OW 86
// PrepareDeadBodies ;
4045: CALL 2817 0 0
// PrepareFirstScene ;
4049: CALL 2953 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4053: LD_INT 152
4055: PPUSH
4056: LD_INT 65
4058: PPUSH
4059: LD_INT 2
4061: PPUSH
4062: LD_INT 70
4064: NEG
4065: PPUSH
4066: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4070: LD_INT 152
4072: PPUSH
4073: LD_INT 65
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4083: LD_INT 122
4085: PPUSH
4086: LD_INT 40
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: LD_INT 8
4094: NEG
4095: PPUSH
4096: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4100: LD_INT 124
4102: PPUSH
4103: LD_INT 37
4105: PPUSH
4106: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4110: LD_EXP 64
4114: PPUSH
4115: LD_STRING DRum-Execution-1
4117: PPUSH
4118: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4122: LD_EXP 64
4126: PPUSH
4127: LD_STRING DRum-Execution-2
4129: PPUSH
4130: CALL_OW 88
// wait ( 0 0$01 ) ;
4134: LD_INT 35
4136: PPUSH
4137: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4141: LD_EXP 64
4145: PPUSH
4146: LD_STRING DRum-Execution-3
4148: PPUSH
4149: CALL_OW 88
// wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4160: LD_EXP 64
4164: PPUSH
4165: LD_STRING DRum-Execution-4
4167: PPUSH
4168: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4172: LD_EXP 63
4176: PUSH
4177: LD_INT 1
4179: ARRAY
4180: PPUSH
4181: LD_INT 122
4183: PPUSH
4184: LD_INT 39
4186: PPUSH
4187: CALL_OW 428
4191: PPUSH
4192: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4196: LD_EXP 63
4200: PUSH
4201: LD_INT 2
4203: ARRAY
4204: PPUSH
4205: LD_INT 123
4207: PPUSH
4208: LD_INT 41
4210: PPUSH
4211: CALL_OW 428
4215: PPUSH
4216: CALL_OW 115
// AddComHold ( russianKillers ) ;
4220: LD_EXP 63
4224: PPUSH
4225: CALL_OW 200
// wait ( 0 0$1 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4236: LD_INT 122
4238: PPUSH
4239: LD_INT 40
4241: PPUSH
4242: LD_INT 2
4244: PPUSH
4245: CALL_OW 331
// for i in russianKillers union ruCommisar do
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_EXP 63
4258: PUSH
4259: LD_EXP 64
4263: UNION
4264: PUSH
4265: FOR_IN
4266: IFFALSE 4279
// RemoveUnit ( i ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: CALL_OW 64
4277: GO 4265
4279: POP
4280: POP
// if hasNormalScene then
4281: LD_EXP 5
4285: IFFALSE 4293
// ActionNormal else
4287: CALL 4302 0 0
4291: GO 4297
// ActionAdditional ;
4293: CALL 6120 0 0
// end ;
4297: LD_VAR 0 1
4301: RET
// function ActionNormal ; var i , tmp ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
// CenterNowOnUnits ( Heike ) ;
4307: LD_EXP 45
4311: PPUSH
4312: CALL_OW 87
// wait ( 0 0$1 ) ;
4316: LD_INT 35
4318: PPUSH
4319: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4323: LD_EXP 45
4327: PPUSH
4328: LD_INT 115
4330: PPUSH
4331: LD_INT 19
4333: PPUSH
4334: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4338: LD_EXP 45
4342: PPUSH
4343: LD_INT 113
4345: PPUSH
4346: LD_INT 16
4348: PPUSH
4349: CALL_OW 178
// wait ( 0 0$2 ) ;
4353: LD_INT 70
4355: PPUSH
4356: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4360: LD_EXP 45
4364: PPUSH
4365: LD_STRING DH-Conspiracy-1
4367: PPUSH
4368: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4372: LD_EXP 50
4376: PPUSH
4377: LD_STRING DK-Conspiracy-2
4379: PPUSH
4380: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4384: LD_EXP 46
4388: PPUSH
4389: LD_STRING DG-Conspiracy-3
4391: PPUSH
4392: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4396: LD_EXP 46
4400: PPUSH
4401: LD_STRING DG-Conspiracy-4
4403: PPUSH
4404: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4408: LD_EXP 45
4412: PPUSH
4413: LD_STRING DH-Conspiracy-5
4415: PPUSH
4416: CALL_OW 88
// if IsOk ( Kamil ) then
4420: LD_EXP 49
4424: PPUSH
4425: CALL_OW 302
4429: IFFALSE 4487
// begin hasVodka := true ;
4431: LD_ADDR_EXP 4
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4439: LD_EXP 49
4443: PPUSH
4444: LD_STRING DKam-Conspiracy-6
4446: PPUSH
4447: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4451: LD_EXP 49
4455: PPUSH
4456: LD_STRING DKam-Conspiracy-7
4458: PPUSH
4459: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4463: LD_EXP 49
4467: PPUSH
4468: LD_STRING DKam-Conspiracy-8
4470: PPUSH
4471: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4475: LD_EXP 49
4479: PPUSH
4480: LD_STRING DKam-Conspiracy-9
4482: PPUSH
4483: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4487: LD_EXP 51
4491: PPUSH
4492: CALL_OW 302
4496: IFFALSE 4677
// begin americanContact := true ;
4498: LD_ADDR_EXP 10
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4506: LD_STRING M1-american
4508: PPUSH
4509: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4513: LD_EXP 51
4517: PPUSH
4518: LD_STRING DS-Conspiracy-10
4520: PPUSH
4521: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4525: LD_EXP 52
4529: PPUSH
4530: LD_STRING DM-Conspiracy-11
4532: PPUSH
4533: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4537: LD_EXP 51
4541: PPUSH
4542: LD_STRING DS-Conspiracy-12
4544: PPUSH
4545: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4549: LD_INT 84
4551: PPUSH
4552: LD_INT 19
4554: PPUSH
4555: LD_INT 105
4557: PPUSH
4558: CALL 19651 0 3
// if johnnySaved then
4562: LD_EXP 3
4566: IFFALSE 4606
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4568: LD_EXP 51
4572: PPUSH
4573: LD_STRING DS-Conspiracy-13
4575: PPUSH
4576: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4580: LD_EXP 45
4584: PPUSH
4585: LD_STRING DH-Conspiracy-14
4587: PPUSH
4588: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4592: LD_EXP 51
4596: PPUSH
4597: LD_STRING DH-Conspiracy-15
4599: PPUSH
4600: CALL_OW 88
// end else
4604: GO 4642
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4606: LD_EXP 51
4610: PPUSH
4611: LD_STRING DS-Conspiracy-a-13
4613: PPUSH
4614: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4618: LD_EXP 45
4622: PPUSH
4623: LD_STRING DH-Conspiracy-a-14
4625: PPUSH
4626: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4630: LD_EXP 45
4634: PPUSH
4635: LD_STRING DH-Conspiracy-a-15
4637: PPUSH
4638: CALL_OW 88
// end ; if IsOk ( Givi ) then
4642: LD_EXP 46
4646: PPUSH
4647: CALL_OW 302
4651: IFFALSE 4677
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4653: LD_EXP 46
4657: PPUSH
4658: LD_STRING DG-Conspiracy-a-16
4660: PPUSH
4661: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4665: LD_EXP 45
4669: PPUSH
4670: LD_STRING DH-Conspiracy-a-17
4672: PPUSH
4673: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4677: LD_EXP 45
4681: PPUSH
4682: LD_STRING DH-Conspiracy-16
4684: PPUSH
4685: CALL_OW 88
// if IsOk ( Givi ) then
4689: LD_EXP 46
4693: PPUSH
4694: CALL_OW 302
4698: IFFALSE 4970
// begin hasStimDrugs := true ;
4700: LD_ADDR_EXP 9
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4708: LD_STRING M1-drugs
4710: PPUSH
4711: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4715: LD_EXP 46
4719: PPUSH
4720: LD_STRING DG-Conspiracy-17
4722: PPUSH
4723: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4727: LD_INT 162
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4737: LD_INT 194
4739: PPUSH
4740: LD_INT 98
4742: PPUSH
4743: LD_INT 105
4745: PPUSH
4746: CALL 19651 0 3
// SetSide ( drugsLab , 3 ) ;
4750: LD_INT 162
4752: PPUSH
4753: LD_INT 3
4755: PPUSH
4756: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4760: LD_EXP 46
4764: PPUSH
4765: LD_STRING DG-Conspiracy-18
4767: PPUSH
4768: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4772: LD_EXP 46
4776: PPUSH
4777: LD_STRING DG-Conspiracy-19
4779: PPUSH
4780: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4784: LD_EXP 46
4788: PPUSH
4789: LD_STRING DG-Conspiracy-20
4791: PPUSH
4792: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4796: LD_EXP 45
4800: PPUSH
4801: LD_STRING DH-Conspiracy-21
4803: PPUSH
4804: CALL_OW 88
// if IsOk ( Kaia ) then
4808: LD_EXP 50
4812: PPUSH
4813: CALL_OW 302
4817: IFFALSE 4891
// begin hasExplosions := true ;
4819: LD_ADDR_EXP 6
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4827: LD_STRING M1-explosive
4829: PPUSH
4830: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4834: LD_EXP 50
4838: PPUSH
4839: LD_STRING DK-Conspiracy-22
4841: PPUSH
4842: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4846: LD_INT 73
4848: PPUSH
4849: LD_INT 2
4851: PPUSH
4852: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4856: LD_INT 170
4858: PPUSH
4859: LD_INT 104
4861: PPUSH
4862: LD_INT 105
4864: PPUSH
4865: CALL 19651 0 3
// SetSide ( barExplosion , 3 ) ;
4869: LD_INT 73
4871: PPUSH
4872: LD_INT 3
4874: PPUSH
4875: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING DK-Conspiracy-23
4886: PPUSH
4887: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4891: LD_EXP 53
4895: PPUSH
4896: CALL_OW 302
4900: IFFALSE 4970
// begin hasExplosionsInFactory := true ;
4902: LD_ADDR_EXP 7
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4910: LD_EXP 53
4914: PPUSH
4915: LD_STRING DO-Conspiracy-24
4917: PPUSH
4918: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4922: LD_INT 175
4924: PPUSH
4925: LD_INT 54
4927: PPUSH
4928: LD_INT 70
4930: PPUSH
4931: CALL 19651 0 3
// if IsOk ( Markov ) then
4935: LD_EXP 52
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4970
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4946: LD_EXP 52
4950: PPUSH
4951: LD_STRING DMar-Conspiracy-25
4953: PPUSH
4954: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4958: LD_EXP 52
4962: PPUSH
4963: LD_STRING DMar-Conspiracy-26
4965: PPUSH
4966: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4970: LD_EXP 54
4974: PPUSH
4975: CALL_OW 302
4979: PUSH
4980: LD_EXP 50
4984: PPUSH
4985: CALL_OW 302
4989: AND
4990: IFFALSE 5450
// begin hasWeapons := true ;
4992: LD_ADDR_EXP 19
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// hasRevolver := true ;
5000: LD_ADDR_EXP 8
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5008: LD_STRING M1-weapons
5010: PPUSH
5011: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5015: LD_EXP 54
5019: PPUSH
5020: LD_STRING DKs-Conspiracy-27
5022: PPUSH
5023: CALL_OW 88
// if IsOk ( Givi ) then
5027: LD_EXP 46
5031: PPUSH
5032: CALL_OW 302
5036: IFFALSE 5052
// Say ( Givi , DG-Conspiracy-28 ) else
5038: LD_EXP 46
5042: PPUSH
5043: LD_STRING DG-Conspiracy-28
5045: PPUSH
5046: CALL_OW 88
5050: GO 5117
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5052: LD_EXP 56
5056: PPUSH
5057: LD_INT 26
5059: PUSH
5060: LD_INT 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 72
5071: PUSH
5072: LD_INT 1
5074: ARRAY
5075: PPUSH
5076: LD_STRING DArm-Conspiracy-a-28
5078: PPUSH
5079: CALL_OW 88
5083: NOT
5084: IFFALSE 5117
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5086: LD_EXP 56
5090: PPUSH
5091: LD_INT 26
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 72
5105: PUSH
5106: LD_INT 1
5108: ARRAY
5109: PPUSH
5110: LD_STRING DArf-Conspiracy-a-28
5112: PPUSH
5113: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5117: LD_EXP 54
5121: PPUSH
5122: LD_STRING DKs-Conspiracy-29
5124: PPUSH
5125: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5129: LD_INT 192
5131: PPUSH
5132: LD_INT 122
5134: PPUSH
5135: LD_INT 105
5137: PPUSH
5138: CALL 19651 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5142: LD_EXP 54
5146: PPUSH
5147: LD_STRING DKs-Conspiracy-30
5149: PPUSH
5150: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5154: LD_EXP 50
5158: PPUSH
5159: LD_STRING DK-Conspiracy-31
5161: PPUSH
5162: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5166: LD_EXP 52
5170: PPUSH
5171: LD_STRING DMar-Conspiracy-33
5173: PPUSH
5174: CALL_OW 88
5178: NOT
5179: PUSH
5180: LD_EXP 56
5184: AND
5185: IFFALSE 5252
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5187: LD_EXP 56
5191: PPUSH
5192: LD_INT 26
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 72
5206: PUSH
5207: LD_INT 1
5209: ARRAY
5210: PPUSH
5211: LD_STRING DArm-Conspiracy-a-34
5213: PPUSH
5214: CALL_OW 88
5218: NOT
5219: IFFALSE 5252
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5221: LD_EXP 56
5225: PPUSH
5226: LD_INT 26
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 72
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: LD_STRING DArf-Conspiracy-a-34
5247: PPUSH
5248: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5252: LD_EXP 50
5256: PPUSH
5257: LD_STRING DK-Conspiracy-34
5259: PPUSH
5260: CALL_OW 88
// if IsOk ( Markov ) then
5264: LD_EXP 52
5268: PPUSH
5269: CALL_OW 302
5273: IFFALSE 5358
// begin hasSniperRifle := true ;
5275: LD_ADDR_EXP 11
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5283: LD_EXP 52
5287: PPUSH
5288: LD_STRING DMar-Conspiracy-35
5290: PPUSH
5291: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5295: LD_EXP 50
5299: PPUSH
5300: LD_STRING DK-Conspiracy-36
5302: PPUSH
5303: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5307: LD_EXP 52
5311: PPUSH
5312: LD_STRING DMar-Conspiracy-37
5314: PPUSH
5315: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5319: LD_EXP 52
5323: PPUSH
5324: LD_STRING DMar-Conspiracy-38
5326: PPUSH
5327: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5331: LD_INT 137
5333: PPUSH
5334: LD_INT 98
5336: PPUSH
5337: LD_INT 105
5339: PPUSH
5340: CALL 19651 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5344: LD_EXP 52
5348: PPUSH
5349: LD_STRING DMar-Conspiracy-39
5351: PPUSH
5352: CALL_OW 88
// end else
5356: GO 5450
// if heikeSecondSquad then
5358: LD_EXP 56
5362: IFFALSE 5450
// begin hasSniperRifle := true ;
5364: LD_ADDR_EXP 11
5368: PUSH
5369: LD_INT 1
5371: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5372: LD_INT 137
5374: PPUSH
5375: LD_INT 98
5377: PPUSH
5378: LD_INT 105
5380: PPUSH
5381: CALL 19651 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5385: LD_EXP 56
5389: PPUSH
5390: LD_INT 26
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 72
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: LD_STRING DArm-Conspiracy-a-35
5411: PPUSH
5412: CALL_OW 88
5416: NOT
5417: IFFALSE 5450
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5419: LD_EXP 56
5423: PPUSH
5424: LD_INT 26
5426: PUSH
5427: LD_INT 2
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 72
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING DArf-Conspiracy-a-35
5445: PPUSH
5446: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5450: LD_EXP 45
5454: PPUSH
5455: LD_STRING DH-Conspiracy-40
5457: PPUSH
5458: CALL_OW 88
// if IsOk ( Mike ) then
5462: LD_EXP 47
5466: PPUSH
5467: CALL_OW 302
5471: IFFALSE 5530
// begin hasScout := true ;
5473: LD_ADDR_EXP 12
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5481: LD_EXP 47
5485: PPUSH
5486: LD_STRING DM-Conspiracy-41
5488: PPUSH
5489: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5493: LD_EXP 47
5497: PPUSH
5498: LD_STRING DM-Conspiracy-42
5500: PPUSH
5501: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5505: LD_INT 73
5507: PPUSH
5508: LD_INT 102
5510: PPUSH
5511: LD_INT 105
5513: PPUSH
5514: CALL 19651 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5518: LD_EXP 47
5522: PPUSH
5523: LD_STRING DM-Conspiracy-43
5525: PPUSH
5526: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5530: LD_EXP 4
5534: PUSH
5535: LD_EXP 50
5539: PPUSH
5540: CALL_OW 302
5544: AND
5545: PUSH
5546: LD_EXP 54
5550: PPUSH
5551: CALL_OW 302
5555: AND
5556: IFFALSE 5602
// begin hasMethanol := true ;
5558: LD_ADDR_EXP 13
5562: PUSH
5563: LD_INT 1
5565: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5566: LD_EXP 50
5570: PPUSH
5571: LD_STRING DK-Conspiracy-44
5573: PPUSH
5574: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5578: LD_EXP 50
5582: PPUSH
5583: LD_STRING DK-Conspiracy-45
5585: PPUSH
5586: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING DKam-Conspiracy-46
5597: PPUSH
5598: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5602: LD_EXP 45
5606: PPUSH
5607: LD_STRING DH-Conspiracy-47
5609: PPUSH
5610: CALL_OW 88
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// your_side := 8 ;
5621: LD_ADDR_OWVAR 2
5625: PUSH
5626: LD_INT 8
5628: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5629: LD_INT 1
5631: PPUSH
5632: LD_INT 1
5634: PPUSH
5635: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5639: LD_ADDR_VAR 0 2
5643: PUSH
5644: LD_INT 2
5646: PUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_INT 4
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 21
5674: PUSH
5675: LD_INT 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PPUSH
5686: CALL_OW 69
5690: PUSH
5691: FOR_IN
5692: IFFALSE 5705
// RemoveUnit ( i ) ;
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 64
5703: GO 5691
5705: POP
5706: POP
// wait ( 0 0$0.3 ) ;
5707: LD_INT 10
5709: PPUSH
5710: CALL_OW 67
// Query ( StartInfo1 ) ;
5714: LD_STRING StartInfo1
5716: PPUSH
5717: CALL_OW 97
// wait ( 0 0$1 ) ;
5721: LD_INT 35
5723: PPUSH
5724: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5728: LD_STRING colors_night.txt
5730: PPUSH
5731: CALL_OW 544
// Query ( StartInfo2 ) ;
5735: LD_STRING StartInfo2
5737: PPUSH
5738: CALL_OW 97
// PrepareGame ;
5742: CALL 1048 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5746: LD_INT 152
5748: PPUSH
5749: LD_INT 65
5751: PPUSH
5752: LD_INT 2
5754: PPUSH
5755: LD_INT 70
5757: NEG
5758: PPUSH
5759: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5763: LD_INT 152
5765: PPUSH
5766: LD_INT 65
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5776: LD_INT 133
5778: PPUSH
5779: LD_INT 76
5781: PPUSH
5782: LD_INT 2
5784: PPUSH
5785: LD_INT 6
5787: NEG
5788: PPUSH
5789: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5793: LD_INT 152
5795: PPUSH
5796: LD_INT 65
5798: PPUSH
5799: LD_INT 8
5801: PPUSH
5802: LD_INT 70
5804: NEG
5805: PPUSH
5806: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5810: LD_INT 152
5812: PPUSH
5813: LD_INT 65
5815: PPUSH
5816: LD_INT 8
5818: PPUSH
5819: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5823: LD_INT 133
5825: PPUSH
5826: LD_INT 76
5828: PPUSH
5829: LD_INT 8
5831: PPUSH
5832: LD_INT 6
5834: NEG
5835: PPUSH
5836: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5840: LD_INT 23
5842: PPUSH
5843: CALL_OW 87
// dialogue_skipped := false ;
5847: LD_ADDR_OWVAR 59
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// InitRuPatrols ;
5855: CALL 3240 0 0
// Say ( Heike , DH-Escape-1 ) ;
5859: LD_EXP 45
5863: PPUSH
5864: LD_STRING DH-Escape-1
5866: PPUSH
5867: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5871: LD_EXP 45
5875: PPUSH
5876: LD_STRING DH-Escape-2
5878: PPUSH
5879: CALL_OW 88
// StartLockerMinigame ;
5883: CALL 20436 0 0
// wait ( 0 0$1 ) ;
5887: LD_INT 35
5889: PPUSH
5890: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5894: LD_EXP 45
5898: PPUSH
5899: LD_STRING DH-Escape-4
5901: PPUSH
5902: CALL_OW 88
// wait ( 0 0$3 ) ;
5906: LD_INT 105
5908: PPUSH
5909: CALL_OW 67
// your_side := 2 ;
5913: LD_ADDR_OWVAR 2
5917: PUSH
5918: LD_INT 2
5920: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5921: LD_EXP 45
5925: PPUSH
5926: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5930: LD_INT 152
5932: PPUSH
5933: LD_INT 65
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: LD_INT 70
5941: NEG
5942: PPUSH
5943: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5947: LD_INT 152
5949: PPUSH
5950: LD_INT 65
5952: PPUSH
5953: LD_INT 2
5955: PPUSH
5956: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5960: LD_INT 133
5962: PPUSH
5963: LD_INT 76
5965: PPUSH
5966: LD_INT 8
5968: PPUSH
5969: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5973: LD_EXP 45
5977: PPUSH
5978: LD_INT 128
5980: PPUSH
5981: LD_INT 64
5983: PPUSH
5984: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5988: LD_INT 35
5990: PPUSH
5991: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5995: LD_EXP 45
5999: PPUSH
6000: LD_INT 128
6002: PPUSH
6003: LD_INT 64
6005: PPUSH
6006: CALL_OW 307
6010: IFFALSE 5988
// ComHold ( Heike ) ;
6012: LD_EXP 45
6016: PPUSH
6017: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6021: LD_EXP 45
6025: PPUSH
6026: LD_STRING DH-Start-1
6028: PPUSH
6029: CALL_OW 88
// if not americanContact then
6033: LD_EXP 10
6037: NOT
6038: IFFALSE 6054
// Say ( Heike , DH-Start-c-2 ) else
6040: LD_EXP 45
6044: PPUSH
6045: LD_STRING DH-Start-c-2
6047: PPUSH
6048: CALL_OW 88
6052: GO 6086
// if johnnySaved then
6054: LD_EXP 3
6058: IFFALSE 6074
// Say ( Heike , DH-Start-a-2 ) else
6060: LD_EXP 45
6064: PPUSH
6065: LD_STRING DH-Start-a-2
6067: PPUSH
6068: CALL_OW 88
6072: GO 6086
// Say ( Heike , DH-Start-b-2 ) ;
6074: LD_EXP 45
6078: PPUSH
6079: LD_STRING DH-Start-b-2
6081: PPUSH
6082: CALL_OW 88
// Video ( false ) ;
6086: LD_INT 0
6088: PPUSH
6089: CALL 66272 0 1
// tick := 0 ;
6093: LD_ADDR_OWVAR 1
6097: PUSH
6098: LD_INT 0
6100: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6101: LD_STRING M1
6103: PPUSH
6104: CALL_OW 337
// enable ( gameStartEvent ) ;
6108: LD_INT 2
6110: ENABLE_MARKED
// SaveForQuickRestart ;
6111: CALL_OW 22
// end ;
6115: LD_VAR 0 1
6119: RET
// function ActionAdditional ; var i , un , tmp ; begin
6120: LD_INT 0
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6126: LD_INT 115
6128: PPUSH
6129: LD_INT 27
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: LD_INT 6
6137: NEG
6138: PPUSH
6139: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6143: LD_EXP 45
6147: PPUSH
6148: LD_INT 115
6150: PPUSH
6151: LD_INT 27
6153: PPUSH
6154: CALL_OW 428
6158: PPUSH
6159: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6163: LD_EXP 45
6167: PPUSH
6168: LD_INT 33
6170: PPUSH
6171: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6175: LD_INT 124
6177: PPUSH
6178: LD_INT 39
6180: PPUSH
6181: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6185: LD_EXP 45
6189: PPUSH
6190: LD_STRING DH-Fail-1
6192: PPUSH
6193: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6197: LD_INT 3
6199: PPUSH
6200: CALL_OW 427
// ComExit ( Heike ) ;
6204: LD_EXP 45
6208: PPUSH
6209: CALL 66698 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6213: LD_EXP 45
6217: PPUSH
6218: LD_INT 109
6220: PPUSH
6221: LD_INT 33
6223: PPUSH
6224: CALL_OW 171
// AddComHold ( Heike ) ;
6228: LD_EXP 45
6232: PPUSH
6233: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6237: LD_INT 115
6239: PPUSH
6240: LD_INT 27
6242: PPUSH
6243: LD_INT 2
6245: PPUSH
6246: CALL_OW 331
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6257: LD_INT 35
6259: PPUSH
6260: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6264: LD_EXP 45
6268: PPUSH
6269: LD_INT 109
6271: PPUSH
6272: LD_INT 33
6274: PPUSH
6275: CALL_OW 307
6279: IFFALSE 6257
// Say ( Heike , DH-Fail-2 ) ;
6281: LD_EXP 45
6285: PPUSH
6286: LD_STRING DH-Fail-2
6288: PPUSH
6289: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6293: LD_EXP 45
6297: PPUSH
6298: LD_INT 111
6300: PPUSH
6301: LD_INT 48
6303: PPUSH
6304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6308: LD_INT 35
6310: PPUSH
6311: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6315: LD_EXP 45
6319: PPUSH
6320: LD_INT 111
6322: PPUSH
6323: LD_INT 48
6325: PPUSH
6326: CALL_OW 297
6330: PUSH
6331: LD_INT 4
6333: LESS
6334: IFFALSE 6308
// AddComMoveXY ( Heike , 106 , 72 ) ;
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 106
6343: PPUSH
6344: LD_INT 72
6346: PPUSH
6347: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6351: LD_EXP 45
6355: PPUSH
6356: LD_INT 103
6358: PPUSH
6359: LD_INT 80
6361: PPUSH
6362: CALL_OW 171
// uc_side := 3 ;
6366: LD_ADDR_OWVAR 20
6370: PUSH
6371: LD_INT 3
6373: ST_TO_ADDR
// uc_nation := 3 ;
6374: LD_ADDR_OWVAR 21
6378: PUSH
6379: LD_INT 3
6381: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6382: LD_INT 1
6384: PPUSH
6385: LD_INT 1
6387: PPUSH
6388: LD_INT 6
6390: PPUSH
6391: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6395: LD_ADDR_OWVAR 29
6399: PUSH
6400: LD_INT 12
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: ST_TO_ADDR
// un := CreateHuman ;
6410: LD_ADDR_VAR 0 3
6414: PUSH
6415: CALL_OW 44
6419: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6420: LD_VAR 0 3
6424: PPUSH
6425: LD_INT 134
6427: PPUSH
6428: LD_INT 52
6430: PPUSH
6431: LD_INT 4
6433: PPUSH
6434: LD_INT 0
6436: PPUSH
6437: CALL 68440 0 5
// ComTurnUnit ( un , Heike ) ;
6441: LD_VAR 0 3
6445: PPUSH
6446: LD_EXP 45
6450: PPUSH
6451: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6455: LD_VAR 0 3
6459: PPUSH
6460: LD_EXP 45
6464: PPUSH
6465: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6469: LD_VAR 0 3
6473: PPUSH
6474: LD_STRING DRum-Fail-3
6476: PPUSH
6477: CALL_OW 88
// for i := 1 to 3 do
6481: LD_ADDR_VAR 0 2
6485: PUSH
6486: DOUBLE
6487: LD_INT 1
6489: DEC
6490: ST_TO_ADDR
6491: LD_INT 3
6493: PUSH
6494: FOR_TO
6495: IFFALSE 6568
// begin PrepareSoldier ( false , 10 ) ;
6497: LD_INT 0
6499: PPUSH
6500: LD_INT 10
6502: PPUSH
6503: CALL_OW 381
// un := CreateHuman ;
6507: LD_ADDR_VAR 0 3
6511: PUSH
6512: CALL_OW 44
6516: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6517: LD_ADDR_VAR 0 4
6521: PUSH
6522: LD_VAR 0 4
6526: PPUSH
6527: LD_VAR 0 3
6531: PPUSH
6532: CALL 66300 0 2
6536: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6537: LD_VAR 0 3
6541: PPUSH
6542: LD_INT 8
6544: PPUSH
6545: LD_INT 0
6547: PPUSH
6548: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6552: LD_VAR 0 3
6556: PPUSH
6557: LD_EXP 45
6561: PPUSH
6562: CALL_OW 119
// end ;
6566: GO 6494
6568: POP
6569: POP
// repeat wait ( 0 0$1 ) ;
6570: LD_INT 35
6572: PPUSH
6573: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6577: LD_VAR 0 4
6581: PPUSH
6582: LD_INT 101
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PPUSH
6592: CALL_OW 72
6596: PUSH
6597: LD_INT 1
6599: GREATER
6600: IFFALSE 6570
// wait ( 0 0$1 ) ;
6602: LD_INT 35
6604: PPUSH
6605: CALL_OW 67
// DialogueOn ;
6609: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6613: LD_EXP 45
6617: PPUSH
6618: LD_STRING DH-Fail-4
6620: PPUSH
6621: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6625: LD_EXP 45
6629: PPUSH
6630: LD_STRING DH-Fail-5
6632: PPUSH
6633: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6637: LD_EXP 45
6641: PPUSH
6642: LD_STRING DH-Fail-6
6644: PPUSH
6645: CALL_OW 88
// DialogueOff ;
6649: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6653: LD_VAR 0 4
6657: PPUSH
6658: LD_EXP 45
6662: PPUSH
6663: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6667: LD_INT 35
6669: PPUSH
6670: CALL_OW 67
// until IsDying ( Heike ) ;
6674: LD_EXP 45
6678: PPUSH
6679: CALL_OW 303
6683: IFFALSE 6667
// KillUnit ( Heike ) ;
6685: LD_EXP 45
6689: PPUSH
6690: CALL_OW 66
// wait ( 0 0$4 ) ;
6694: LD_INT 140
6696: PPUSH
6697: CALL_OW 67
// ResetFog ;
6701: CALL_OW 335
// DialogueOn ;
6705: CALL_OW 6
// dwait ( 0 0$1 ) ;
6709: LD_INT 35
6711: PPUSH
6712: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6716: LD_ADDR_EXP 45
6720: PUSH
6721: LD_STRING Heike
6723: PPUSH
6724: LD_EXP 1
6728: NOT
6729: PPUSH
6730: LD_EXP 2
6734: PPUSH
6735: CALL 28865 0 3
6739: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6740: LD_EXP 45
6744: PPUSH
6745: LD_STRING DH-Fail-7
6747: PPUSH
6748: CALL_OW 89
// DialogueOff ;
6752: CALL_OW 7
// YouLost ( Fail ) ;
6756: LD_STRING Fail
6758: PPUSH
6759: CALL_OW 104
// end ;
6763: LD_VAR 0 1
6767: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6768: LD_INT 2
6770: PPUSH
6771: LD_INT 173
6773: PPUSH
6774: LD_INT 29
6776: PPUSH
6777: CALL_OW 293
6781: PUSH
6782: LD_EXP 45
6786: PPUSH
6787: LD_INT 173
6789: PPUSH
6790: LD_INT 29
6792: PPUSH
6793: CALL_OW 297
6797: PUSH
6798: LD_INT 6
6800: LESS
6801: AND
6802: IFFALSE 6819
6804: GO 6806
6806: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6807: LD_EXP 45
6811: PPUSH
6812: LD_STRING DH-EastRoad
6814: PPUSH
6815: CALL_OW 88
6819: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6820: LD_INT 2
6822: PPUSH
6823: LD_INT 149
6825: PPUSH
6826: LD_INT 3
6828: PPUSH
6829: CALL_OW 293
6833: PUSH
6834: LD_EXP 45
6838: PPUSH
6839: LD_INT 149
6841: PPUSH
6842: LD_INT 3
6844: PPUSH
6845: CALL_OW 297
6849: PUSH
6850: LD_INT 6
6852: LESS
6853: AND
6854: IFFALSE 6871
6856: GO 6858
6858: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6859: LD_EXP 45
6863: PPUSH
6864: LD_STRING DH-EastRoad
6866: PPUSH
6867: CALL_OW 88
6871: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6872: LD_INT 2
6874: PPUSH
6875: LD_INT 217
6877: PPUSH
6878: LD_INT 120
6880: PPUSH
6881: CALL_OW 293
6885: PUSH
6886: LD_EXP 45
6890: PPUSH
6891: LD_INT 217
6893: PPUSH
6894: LD_INT 120
6896: PPUSH
6897: CALL_OW 297
6901: PUSH
6902: LD_INT 6
6904: LESS
6905: AND
6906: IFFALSE 6923
6908: GO 6910
6910: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6911: LD_EXP 45
6915: PPUSH
6916: LD_STRING DH-EastEnd
6918: PPUSH
6919: CALL_OW 88
6923: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6924: LD_EXP 45
6928: PPUSH
6929: LD_INT 11
6931: PPUSH
6932: CALL_OW 308
6936: IFFALSE 6974
6938: GO 6940
6940: DISABLE
// begin if not heikeSquad then
6941: LD_EXP 14
6945: NOT
6946: IFFALSE 6962
// Say ( Heike , DH-Hill ) else
6948: LD_EXP 45
6952: PPUSH
6953: LD_STRING DH-Hill
6955: PPUSH
6956: CALL_OW 88
6960: GO 6974
// Say ( Heike , DH-Hill-a ) ;
6962: LD_EXP 45
6966: PPUSH
6967: LD_STRING DH-Hill-a
6969: PPUSH
6970: CALL_OW 88
// end ;
6974: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6975: LD_EXP 45
6979: PPUSH
6980: LD_INT 12
6982: PPUSH
6983: CALL_OW 308
6987: IFFALSE 7174
6989: GO 6991
6991: DISABLE
6992: LD_INT 0
6994: PPUSH
6995: PPUSH
6996: PPUSH
// begin DialogueOn ;
6997: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7001: LD_EXP 45
7005: PPUSH
7006: CALL_OW 87
// x := GetX ( Heike ) ;
7010: LD_ADDR_VAR 0 1
7014: PUSH
7015: LD_EXP 45
7019: PPUSH
7020: CALL_OW 250
7024: ST_TO_ADDR
// y := GetY ( Heike ) ;
7025: LD_ADDR_VAR 0 2
7029: PUSH
7030: LD_EXP 45
7034: PPUSH
7035: CALL_OW 251
7039: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7040: LD_VAR 0 1
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_INT 2
7052: PPUSH
7053: LD_INT 12
7055: NEG
7056: PPUSH
7057: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: LD_VAR 0 2
7070: PPUSH
7071: LD_INT 2
7073: PPUSH
7074: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7078: LD_INT 101
7080: PUSH
7081: LD_INT 2
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: LD_INT 30
7093: PUSH
7094: LD_INT 32
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 30
7103: PUSH
7104: LD_INT 33
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL_OW 69
7124: IFFALSE 7136
// v := 3 else
7126: LD_ADDR_VAR 0 3
7130: PUSH
7131: LD_INT 3
7133: ST_TO_ADDR
7134: GO 7144
// v := 2 ;
7136: LD_ADDR_VAR 0 3
7140: PUSH
7141: LD_INT 2
7143: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7144: LD_EXP 45
7148: PPUSH
7149: LD_STRING DH-Outpost-
7151: PUSH
7152: LD_INT 1
7154: PPUSH
7155: LD_VAR 0 3
7159: PPUSH
7160: CALL_OW 12
7164: STR
7165: PPUSH
7166: CALL_OW 88
// DialogueOff ;
7170: CALL_OW 7
// end ;
7174: PPOPN 3
7176: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7177: LD_EXP 45
7181: PPUSH
7182: LD_INT 64
7184: PPUSH
7185: CALL_OW 308
7189: IFFALSE 7376
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin DialogueOn ;
7199: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7203: LD_EXP 45
7207: PPUSH
7208: CALL_OW 87
// x := GetX ( Heike ) ;
7212: LD_ADDR_VAR 0 1
7216: PUSH
7217: LD_EXP 45
7221: PPUSH
7222: CALL_OW 250
7226: ST_TO_ADDR
// y := GetY ( Heike ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_EXP 45
7236: PPUSH
7237: CALL_OW 251
7241: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: LD_INT 2
7254: PPUSH
7255: LD_INT 12
7257: NEG
7258: PPUSH
7259: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7263: LD_VAR 0 1
7267: PPUSH
7268: LD_VAR 0 2
7272: PPUSH
7273: LD_INT 2
7275: PPUSH
7276: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7280: LD_INT 101
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 2
7292: PUSH
7293: LD_INT 30
7295: PUSH
7296: LD_INT 32
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PUSH
7303: LD_INT 30
7305: PUSH
7306: LD_INT 33
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PPUSH
7322: CALL_OW 69
7326: IFFALSE 7338
// v := 3 else
7328: LD_ADDR_VAR 0 3
7332: PUSH
7333: LD_INT 3
7335: ST_TO_ADDR
7336: GO 7346
// v := 2 ;
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: LD_INT 2
7345: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7346: LD_EXP 45
7350: PPUSH
7351: LD_STRING DH-Outpost-
7353: PUSH
7354: LD_INT 1
7356: PPUSH
7357: LD_VAR 0 3
7361: PPUSH
7362: CALL_OW 12
7366: STR
7367: PPUSH
7368: CALL_OW 88
// DialogueOff ;
7372: CALL_OW 7
// end ;
7376: PPOPN 3
7378: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7379: LD_EXP 45
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: CALL_OW 308
7391: PUSH
7392: LD_EXP 22
7396: NOT
7397: AND
7398: PUSH
7399: LD_EXP 30
7403: NOT
7404: AND
7405: IFFALSE 7478
7407: GO 7409
7409: DISABLE
// begin DialogueOn ;
7410: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7414: LD_INT 152
7416: PPUSH
7417: LD_INT 115
7419: PPUSH
7420: LD_INT 2
7422: PPUSH
7423: LD_INT 16
7425: NEG
7426: PPUSH
7427: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7431: LD_INT 152
7433: PPUSH
7434: LD_INT 115
7436: PPUSH
7437: LD_INT 2
7439: PPUSH
7440: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7444: LD_INT 152
7446: PPUSH
7447: LD_INT 115
7449: PPUSH
7450: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7454: LD_EXP 45
7458: PPUSH
7459: LD_STRING DH-Stealth-1
7461: PPUSH
7462: CALL_OW 88
// DialogueOff ;
7466: CALL_OW 7
// adminAreaDiscovered := true ;
7470: LD_ADDR_EXP 22
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// end ;
7478: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7479: LD_INT 2
7481: PPUSH
7482: LD_EXP 46
7486: PPUSH
7487: CALL_OW 292
7491: PUSH
7492: LD_EXP 45
7496: PPUSH
7497: LD_EXP 46
7501: PPUSH
7502: CALL_OW 296
7506: PUSH
7507: LD_INT 6
7509: LESS
7510: AND
7511: PUSH
7512: LD_EXP 17
7516: NOT
7517: AND
7518: PUSH
7519: LD_EXP 30
7523: NOT
7524: AND
7525: IFFALSE 7631
7527: GO 7529
7529: DISABLE
// begin DialogueOn ;
7530: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7534: LD_EXP 46
7538: PPUSH
7539: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7543: LD_EXP 46
7547: PPUSH
7548: LD_EXP 45
7552: PPUSH
7553: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7557: LD_EXP 45
7561: PPUSH
7562: LD_EXP 46
7566: PPUSH
7567: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7571: LD_EXP 45
7575: PPUSH
7576: LD_STRING DH-Givi-1
7578: PPUSH
7579: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7583: LD_EXP 46
7587: PPUSH
7588: LD_STRING DG-Givi-2
7590: PPUSH
7591: CALL_OW 88
// DialogueOff ;
7595: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7599: LD_EXP 46
7603: PPUSH
7604: LD_INT 2
7606: PPUSH
7607: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7611: LD_ADDR_EXP 14
7615: PUSH
7616: LD_EXP 14
7620: PPUSH
7621: LD_EXP 46
7625: PPUSH
7626: CALL 66300 0 2
7630: ST_TO_ADDR
// end ;
7631: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7632: LD_INT 2
7634: PPUSH
7635: LD_EXP 51
7639: PPUSH
7640: CALL_OW 292
7644: PUSH
7645: LD_EXP 45
7649: PPUSH
7650: LD_EXP 51
7654: PPUSH
7655: CALL_OW 296
7659: PUSH
7660: LD_INT 6
7662: LESS
7663: AND
7664: PUSH
7665: LD_EXP 17
7669: NOT
7670: AND
7671: PUSH
7672: LD_EXP 30
7676: NOT
7677: AND
7678: IFFALSE 7784
7680: GO 7682
7682: DISABLE
// begin DialogueOn ;
7683: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7687: LD_EXP 51
7691: PPUSH
7692: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7696: LD_EXP 51
7700: PPUSH
7701: LD_EXP 45
7705: PPUSH
7706: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7710: LD_EXP 45
7714: PPUSH
7715: LD_EXP 51
7719: PPUSH
7720: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7724: LD_EXP 45
7728: PPUSH
7729: LD_STRING DH-Sophia-1
7731: PPUSH
7732: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7736: LD_EXP 51
7740: PPUSH
7741: LD_STRING DS-Sophia-2
7743: PPUSH
7744: CALL_OW 88
// DialogueOff ;
7748: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7752: LD_EXP 51
7756: PPUSH
7757: LD_INT 2
7759: PPUSH
7760: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7764: LD_ADDR_EXP 14
7768: PUSH
7769: LD_EXP 14
7773: PPUSH
7774: LD_EXP 51
7778: PPUSH
7779: CALL 66300 0 2
7783: ST_TO_ADDR
// end ;
7784: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7785: LD_INT 2
7787: PPUSH
7788: LD_EXP 53
7792: PPUSH
7793: CALL_OW 292
7797: PUSH
7798: LD_EXP 45
7802: PPUSH
7803: LD_EXP 53
7807: PPUSH
7808: CALL_OW 296
7812: PUSH
7813: LD_INT 6
7815: LESS
7816: AND
7817: PUSH
7818: LD_EXP 17
7822: NOT
7823: AND
7824: PUSH
7825: LD_EXP 30
7829: NOT
7830: AND
7831: IFFALSE 7927
7833: GO 7835
7835: DISABLE
// begin DialogueOn ;
7836: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7840: LD_EXP 53
7844: PPUSH
7845: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7849: LD_EXP 45
7853: PPUSH
7854: LD_STRING DH-Olaf-1
7856: PPUSH
7857: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7861: LD_EXP 53
7865: PPUSH
7866: LD_STRING DO-Olaf-2
7868: PPUSH
7869: CALL_OW 88
// if explosionsTakenByRussians then
7873: LD_EXP 21
7877: IFFALSE 7891
// Say ( Olaf , DO-Olaf-a-3 ) ;
7879: LD_EXP 53
7883: PPUSH
7884: LD_STRING DO-Olaf-a-3
7886: PPUSH
7887: CALL_OW 88
// DialogueOff ;
7891: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7895: LD_EXP 53
7899: PPUSH
7900: LD_INT 2
7902: PPUSH
7903: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7907: LD_ADDR_EXP 14
7911: PUSH
7912: LD_EXP 14
7916: PPUSH
7917: LD_EXP 53
7921: PPUSH
7922: CALL 66300 0 2
7926: ST_TO_ADDR
// end ;
7927: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7928: LD_INT 2
7930: PPUSH
7931: LD_EXP 47
7935: PPUSH
7936: CALL_OW 292
7940: PUSH
7941: LD_EXP 45
7945: PPUSH
7946: LD_EXP 47
7950: PPUSH
7951: CALL_OW 296
7955: PUSH
7956: LD_INT 6
7958: LESS
7959: AND
7960: PUSH
7961: LD_EXP 17
7965: NOT
7966: AND
7967: PUSH
7968: LD_EXP 30
7972: NOT
7973: AND
7974: IFFALSE 8202
7976: GO 7978
7978: DISABLE
7979: LD_INT 0
7981: PPUSH
7982: PPUSH
// begin DialogueOn ;
7983: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7987: LD_EXP 47
7991: PPUSH
7992: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_INT 18
8003: PPUSH
8004: LD_INT 0
8006: PPUSH
8007: CALL_OW 517
8011: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8012: LD_ADDR_VAR 0 1
8016: PUSH
8017: DOUBLE
8018: LD_INT 1
8020: DEC
8021: ST_TO_ADDR
8022: LD_VAR 0 2
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PUSH
8031: FOR_TO
8032: IFFALSE 8114
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8034: LD_VAR 0 2
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PUSH
8043: LD_VAR 0 1
8047: ARRAY
8048: PPUSH
8049: LD_VAR 0 2
8053: PUSH
8054: LD_INT 2
8056: ARRAY
8057: PUSH
8058: LD_VAR 0 1
8062: ARRAY
8063: PPUSH
8064: LD_INT 2
8066: PPUSH
8067: LD_INT 3
8069: NEG
8070: PPUSH
8071: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8075: LD_VAR 0 2
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PUSH
8084: LD_VAR 0 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 2
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PUSH
8099: LD_VAR 0 1
8103: ARRAY
8104: PPUSH
8105: LD_INT 2
8107: PPUSH
8108: CALL_OW 331
// end ;
8112: GO 8031
8114: POP
8115: POP
// Say ( Mike , DM-Mike-1 ) ;
8116: LD_EXP 47
8120: PPUSH
8121: LD_STRING DM-Mike-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8128: LD_EXP 45
8132: PPUSH
8133: LD_STRING DH-Mike-2
8135: PPUSH
8136: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8140: LD_INT 78
8142: PPUSH
8143: LD_INT 104
8145: PPUSH
8146: CALL_OW 84
// dwait ( 0 0$1 ) ;
8150: LD_INT 35
8152: PPUSH
8153: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8157: LD_EXP 45
8161: PPUSH
8162: CALL_OW 87
// DialogueOff ;
8166: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8170: LD_EXP 47
8174: PPUSH
8175: LD_INT 2
8177: PPUSH
8178: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8182: LD_ADDR_EXP 14
8186: PUSH
8187: LD_EXP 14
8191: PPUSH
8192: LD_EXP 47
8196: PPUSH
8197: CALL 66300 0 2
8201: ST_TO_ADDR
// end ;
8202: PPOPN 2
8204: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8205: LD_EXP 45
8209: PPUSH
8210: LD_EXP 50
8214: PPUSH
8215: CALL_OW 296
8219: PUSH
8220: LD_INT 6
8222: LESS
8223: PUSH
8224: LD_EXP 50
8228: PPUSH
8229: CALL_OW 257
8233: PUSH
8234: LD_INT 33
8236: EQUAL
8237: AND
8238: PUSH
8239: LD_EXP 17
8243: NOT
8244: AND
8245: PUSH
8246: LD_EXP 30
8250: NOT
8251: AND
8252: PUSH
8253: LD_EXP 50
8257: PPUSH
8258: CALL_OW 302
8262: AND
8263: PUSH
8264: LD_EXP 20
8268: AND
8269: PUSH
8270: LD_EXP 50
8274: PUSH
8275: LD_EXP 14
8279: IN
8280: AND
8281: PUSH
8282: LD_EXP 50
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 2
8294: EQUAL
8295: AND
8296: IFFALSE 8325
8298: GO 8300
8300: DISABLE
// begin DialogueOn ;
8301: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8305: LD_EXP 45
8309: PPUSH
8310: LD_STRING DH-Kaia-Revolver-2
8312: PPUSH
8313: CALL_OW 88
// SetClassKaiaRevolver ;
8317: CALL 1761 0 0
// DialogueOff ;
8321: CALL_OW 7
// end ;
8325: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8326: LD_EXP 48
8330: PUSH
8331: LD_EXP 55
8335: AND
8336: PUSH
8337: LD_EXP 55
8341: PPUSH
8342: CALL_OW 255
8346: PUSH
8347: LD_INT 2
8349: NONEQUAL
8350: AND
8351: PUSH
8352: LD_EXP 48
8356: PPUSH
8357: CALL_OW 255
8361: PUSH
8362: LD_INT 2
8364: NONEQUAL
8365: AND
8366: PUSH
8367: LD_EXP 14
8371: PPUSH
8372: LD_INT 22
8374: PUSH
8375: LD_INT 2
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PPUSH
8382: CALL_OW 72
8386: PUSH
8387: LD_INT 5
8389: GREATER
8390: AND
8391: PUSH
8392: LD_EXP 17
8396: NOT
8397: AND
8398: PUSH
8399: LD_EXP 30
8403: NOT
8404: AND
8405: IFFALSE 9122
8407: GO 8409
8409: DISABLE
8410: LD_INT 0
8412: PPUSH
8413: PPUSH
// begin DialogueOn ;
8414: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8418: LD_ADDR_VAR 0 2
8422: PUSH
8423: LD_EXP 46
8427: PPUSH
8428: CALL_OW 302
8432: PUSH
8433: LD_EXP 46
8437: PUSH
8438: LD_EXP 14
8442: IN
8443: AND
8444: PUSH
8445: LD_EXP 46
8449: PPUSH
8450: CALL_OW 255
8454: PUSH
8455: LD_INT 2
8457: EQUAL
8458: AND
8459: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8460: LD_EXP 45
8464: PPUSH
8465: LD_STRING DH-Med-1
8467: PPUSH
8468: CALL_OW 88
// if hasGivi then
8472: LD_VAR 0 2
8476: IFFALSE 8492
// Say ( Givi , DG-Med-2 ) else
8478: LD_EXP 46
8482: PPUSH
8483: LD_STRING DG-Med-2
8485: PPUSH
8486: CALL_OW 88
8490: GO 8597
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8492: LD_EXP 14
8496: PUSH
8497: LD_EXP 56
8501: ISECT
8502: PPUSH
8503: LD_INT 22
8505: PUSH
8506: LD_INT 2
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PPUSH
8527: CALL_OW 72
8531: PUSH
8532: LD_INT 1
8534: ARRAY
8535: PPUSH
8536: LD_STRING DArm-Med-e-2
8538: PPUSH
8539: CALL_OW 88
8543: NOT
8544: IFFALSE 8597
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8546: LD_EXP 14
8550: PUSH
8551: LD_EXP 56
8555: ISECT
8556: PPUSH
8557: LD_INT 22
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 26
8569: PUSH
8570: LD_INT 2
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PPUSH
8581: CALL_OW 72
8585: PUSH
8586: LD_INT 1
8588: ARRAY
8589: PPUSH
8590: LD_STRING DArf-Med-e-2
8592: PPUSH
8593: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8597: LD_INT 154
8599: PPUSH
8600: LD_INT 119
8602: PPUSH
8603: LD_INT 70
8605: PPUSH
8606: CALL 19651 0 3
// Say ( Heike , DH-Med-3 ) ;
8610: LD_EXP 45
8614: PPUSH
8615: LD_STRING DH-Med-3
8617: PPUSH
8618: CALL_OW 88
// if hasGivi then
8622: LD_VAR 0 2
8626: IFFALSE 8642
// Say ( Givi , DG-Med-4 ) else
8628: LD_EXP 46
8632: PPUSH
8633: LD_STRING DG-Med-4
8635: PPUSH
8636: CALL_OW 88
8640: GO 8747
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8642: LD_EXP 14
8646: PUSH
8647: LD_EXP 56
8651: ISECT
8652: PPUSH
8653: LD_INT 22
8655: PUSH
8656: LD_INT 2
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 26
8665: PUSH
8666: LD_INT 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 72
8681: PUSH
8682: LD_INT 1
8684: ARRAY
8685: PPUSH
8686: LD_STRING DArm-Med-e-4
8688: PPUSH
8689: CALL_OW 88
8693: NOT
8694: IFFALSE 8747
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8696: LD_EXP 14
8700: PUSH
8701: LD_EXP 56
8705: ISECT
8706: PPUSH
8707: LD_INT 22
8709: PUSH
8710: LD_INT 2
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 26
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 72
8735: PUSH
8736: LD_INT 1
8738: ARRAY
8739: PPUSH
8740: LD_STRING DArf-Med-e-4
8742: PPUSH
8743: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_EXP 50
8756: PPUSH
8757: CALL_OW 302
8761: PUSH
8762: LD_EXP 50
8766: PUSH
8767: LD_EXP 14
8771: IN
8772: AND
8773: PUSH
8774: LD_EXP 50
8778: PPUSH
8779: CALL_OW 255
8783: PUSH
8784: LD_INT 2
8786: EQUAL
8787: AND
8788: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8789: LD_EXP 47
8793: PPUSH
8794: CALL_OW 302
8798: PUSH
8799: LD_EXP 47
8803: PUSH
8804: LD_EXP 14
8808: IN
8809: AND
8810: PUSH
8811: LD_EXP 50
8815: PPUSH
8816: CALL_OW 255
8820: PUSH
8821: LD_INT 2
8823: EQUAL
8824: AND
8825: IFFALSE 8857
// begin Say ( Mike , DM-Med-5 ) ;
8827: LD_EXP 47
8831: PPUSH
8832: LD_STRING DM-Med-5
8834: PPUSH
8835: CALL_OW 88
// if hasKaia then
8839: LD_VAR 0 1
8843: IFFALSE 8857
// Say ( Kaia , DK-Med-6 ) ;
8845: LD_EXP 50
8849: PPUSH
8850: LD_STRING DK-Med-6
8852: PPUSH
8853: CALL_OW 88
// end ; if hasKaia then
8857: LD_VAR 0 1
8861: IFFALSE 9102
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8863: LD_INT 175
8865: PPUSH
8866: LD_INT 123
8868: PPUSH
8869: LD_INT 2
8871: PPUSH
8872: LD_INT 8
8874: NEG
8875: PPUSH
8876: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8880: LD_INT 175
8882: PPUSH
8883: LD_INT 123
8885: PPUSH
8886: LD_INT 2
8888: PPUSH
8889: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8893: LD_INT 175
8895: PPUSH
8896: LD_INT 123
8898: PPUSH
8899: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8903: LD_EXP 50
8907: PPUSH
8908: LD_STRING DK-Med-7
8910: PPUSH
8911: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8915: LD_EXP 50
8919: PPUSH
8920: LD_STRING DK-Med-8
8922: PPUSH
8923: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8927: LD_EXP 52
8931: PPUSH
8932: CALL_OW 302
8936: PUSH
8937: LD_EXP 52
8941: PUSH
8942: LD_EXP 14
8946: IN
8947: AND
8948: PUSH
8949: LD_EXP 52
8953: PPUSH
8954: CALL_OW 255
8958: PUSH
8959: LD_INT 2
8961: EQUAL
8962: AND
8963: IFFALSE 9021
// begin Say ( Markov , DMar-Med-9 ) ;
8965: LD_EXP 52
8969: PPUSH
8970: LD_STRING DMar-Med-9
8972: PPUSH
8973: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8977: LD_EXP 50
8981: PPUSH
8982: LD_STRING DK-Med-10
8984: PPUSH
8985: CALL_OW 88
// if hasGivi then
8989: LD_VAR 0 2
8993: IFFALSE 9009
// Say ( Kaia , DK-Med-11 ) else
8995: LD_EXP 50
8999: PPUSH
9000: LD_STRING DK-Med-11
9002: PPUSH
9003: CALL_OW 88
9007: GO 9021
// Say ( Kaia , DK-Med-a-11 ) ;
9009: LD_EXP 50
9013: PPUSH
9014: LD_STRING DK-Med-a-11
9016: PPUSH
9017: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9021: LD_EXP 49
9025: PPUSH
9026: CALL_OW 302
9030: PUSH
9031: LD_EXP 49
9035: PUSH
9036: LD_EXP 14
9040: IN
9041: AND
9042: PUSH
9043: LD_EXP 49
9047: PPUSH
9048: CALL_OW 255
9052: PUSH
9053: LD_INT 2
9055: EQUAL
9056: AND
9057: IFFALSE 9102
// begin Say ( Kamil , DKam-Med-12 ) ;
9059: LD_EXP 49
9063: PPUSH
9064: LD_STRING DKam-Med-12
9066: PPUSH
9067: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9071: LD_EXP 49
9075: PPUSH
9076: LD_STRING DKam-Med-13
9078: PPUSH
9079: CALL_OW 88
// if not hasExplosionCollected then
9083: LD_EXP 23
9087: NOT
9088: IFFALSE 9102
// Say ( Heike , DH-Med-d-14 ) ;
9090: LD_EXP 45
9094: PPUSH
9095: LD_STRING DH-Med-d-14
9097: PPUSH
9098: CALL_OW 88
// end ; end ; DialogueOff ;
9102: CALL_OW 7
// adminAreaDiscovered := true ;
9106: LD_ADDR_EXP 22
9110: PUSH
9111: LD_INT 1
9113: ST_TO_ADDR
// laundryAllowed := true ;
9114: LD_ADDR_EXP 26
9118: PUSH
9119: LD_INT 1
9121: ST_TO_ADDR
// end ;
9122: PPOPN 2
9124: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9125: LD_EXP 48
9129: NOT
9130: PUSH
9131: LD_EXP 55
9135: AND
9136: PUSH
9137: LD_EXP 55
9141: PUSH
9142: LD_EXP 14
9146: IN
9147: NOT
9148: AND
9149: PUSH
9150: LD_EXP 14
9154: PPUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PUSH
9170: LD_INT 4
9172: GREATER
9173: AND
9174: PUSH
9175: LD_EXP 17
9179: NOT
9180: AND
9181: PUSH
9182: LD_EXP 30
9186: NOT
9187: AND
9188: IFFALSE 9905
9190: GO 9192
9192: DISABLE
9193: LD_INT 0
9195: PPUSH
9196: PPUSH
// begin DialogueOn ;
9197: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9201: LD_ADDR_VAR 0 1
9205: PUSH
9206: LD_EXP 46
9210: PPUSH
9211: CALL_OW 302
9215: PUSH
9216: LD_EXP 46
9220: PUSH
9221: LD_EXP 14
9225: IN
9226: AND
9227: PUSH
9228: LD_EXP 46
9232: PPUSH
9233: CALL_OW 255
9237: PUSH
9238: LD_INT 2
9240: EQUAL
9241: AND
9242: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9243: LD_EXP 45
9247: PPUSH
9248: LD_STRING DH-Med-a-1
9250: PPUSH
9251: CALL_OW 88
// if hasGivi then
9255: LD_VAR 0 1
9259: IFFALSE 9275
// Say ( Givi , DG-Med-a-2 ) else
9261: LD_EXP 46
9265: PPUSH
9266: LD_STRING DG-Med-a-2
9268: PPUSH
9269: CALL_OW 88
9273: GO 9380
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9275: LD_EXP 14
9279: PUSH
9280: LD_EXP 56
9284: ISECT
9285: PPUSH
9286: LD_INT 22
9288: PUSH
9289: LD_INT 2
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 26
9298: PUSH
9299: LD_INT 1
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PPUSH
9310: CALL_OW 72
9314: PUSH
9315: LD_INT 1
9317: ARRAY
9318: PPUSH
9319: LD_STRING DArm-Med-f-2
9321: PPUSH
9322: CALL_OW 88
9326: NOT
9327: IFFALSE 9380
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9329: LD_EXP 14
9333: PUSH
9334: LD_EXP 56
9338: ISECT
9339: PPUSH
9340: LD_INT 22
9342: PUSH
9343: LD_INT 2
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 26
9352: PUSH
9353: LD_INT 2
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: PUSH
9369: LD_INT 1
9371: ARRAY
9372: PPUSH
9373: LD_STRING DArf-Med-f-2
9375: PPUSH
9376: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9380: LD_INT 154
9382: PPUSH
9383: LD_INT 119
9385: PPUSH
9386: LD_INT 70
9388: PPUSH
9389: CALL 19651 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9393: LD_EXP 45
9397: PPUSH
9398: LD_STRING DH-Med-a-3
9400: PPUSH
9401: CALL_OW 88
// if hasGivi then
9405: LD_VAR 0 1
9409: IFFALSE 9425
// Say ( Givi , DG-Med-a-4 ) else
9411: LD_EXP 46
9415: PPUSH
9416: LD_STRING DG-Med-a-4
9418: PPUSH
9419: CALL_OW 88
9423: GO 9530
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9425: LD_EXP 14
9429: PUSH
9430: LD_EXP 56
9434: ISECT
9435: PPUSH
9436: LD_INT 22
9438: PUSH
9439: LD_INT 2
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 26
9448: PUSH
9449: LD_INT 1
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 72
9464: PUSH
9465: LD_INT 1
9467: ARRAY
9468: PPUSH
9469: LD_STRING DArm-Med-f-4
9471: PPUSH
9472: CALL_OW 88
9476: NOT
9477: IFFALSE 9530
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9479: LD_EXP 14
9483: PUSH
9484: LD_EXP 56
9488: ISECT
9489: PPUSH
9490: LD_INT 22
9492: PUSH
9493: LD_INT 2
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 26
9502: PUSH
9503: LD_INT 2
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PPUSH
9514: CALL_OW 72
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: PPUSH
9523: LD_STRING DArf-Med-f-4
9525: PPUSH
9526: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: LD_EXP 50
9539: PPUSH
9540: CALL_OW 302
9544: PUSH
9545: LD_EXP 50
9549: PUSH
9550: LD_EXP 14
9554: IN
9555: AND
9556: PUSH
9557: LD_EXP 50
9561: PPUSH
9562: CALL_OW 255
9566: PUSH
9567: LD_INT 2
9569: EQUAL
9570: AND
9571: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9572: LD_EXP 47
9576: PPUSH
9577: CALL_OW 302
9581: PUSH
9582: LD_EXP 47
9586: PUSH
9587: LD_EXP 14
9591: IN
9592: AND
9593: PUSH
9594: LD_EXP 47
9598: PPUSH
9599: CALL_OW 255
9603: PUSH
9604: LD_INT 2
9606: EQUAL
9607: AND
9608: IFFALSE 9640
// begin Say ( Mike , DM-Med-5 ) ;
9610: LD_EXP 47
9614: PPUSH
9615: LD_STRING DM-Med-5
9617: PPUSH
9618: CALL_OW 88
// if hasKaia then
9622: LD_VAR 0 2
9626: IFFALSE 9640
// Say ( Kaia , DK-Med-6 ) ;
9628: LD_EXP 50
9632: PPUSH
9633: LD_STRING DK-Med-6
9635: PPUSH
9636: CALL_OW 88
// end ; if hasKaia then
9640: LD_VAR 0 2
9644: IFFALSE 9885
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9646: LD_INT 175
9648: PPUSH
9649: LD_INT 123
9651: PPUSH
9652: LD_INT 2
9654: PPUSH
9655: LD_INT 8
9657: NEG
9658: PPUSH
9659: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9663: LD_INT 175
9665: PPUSH
9666: LD_INT 123
9668: PPUSH
9669: LD_INT 2
9671: PPUSH
9672: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9676: LD_INT 175
9678: PPUSH
9679: LD_INT 123
9681: PPUSH
9682: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9686: LD_EXP 50
9690: PPUSH
9691: LD_STRING DK-Med-7
9693: PPUSH
9694: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9698: LD_EXP 50
9702: PPUSH
9703: LD_STRING DK-Med-8
9705: PPUSH
9706: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9710: LD_EXP 52
9714: PPUSH
9715: CALL_OW 302
9719: PUSH
9720: LD_EXP 52
9724: PUSH
9725: LD_EXP 14
9729: IN
9730: AND
9731: PUSH
9732: LD_EXP 52
9736: PPUSH
9737: CALL_OW 255
9741: PUSH
9742: LD_INT 2
9744: EQUAL
9745: AND
9746: IFFALSE 9804
// begin Say ( Markov , DMar-Med-9 ) ;
9748: LD_EXP 52
9752: PPUSH
9753: LD_STRING DMar-Med-9
9755: PPUSH
9756: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9760: LD_EXP 50
9764: PPUSH
9765: LD_STRING DK-Med-10
9767: PPUSH
9768: CALL_OW 88
// if hasGivi then
9772: LD_VAR 0 1
9776: IFFALSE 9792
// Say ( Kaia , DK-Med-11 ) else
9778: LD_EXP 50
9782: PPUSH
9783: LD_STRING DK-Med-11
9785: PPUSH
9786: CALL_OW 88
9790: GO 9804
// Say ( Kaia , DK-Med-a-11 ) ;
9792: LD_EXP 50
9796: PPUSH
9797: LD_STRING DK-Med-a-11
9799: PPUSH
9800: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9804: LD_EXP 49
9808: PPUSH
9809: CALL_OW 302
9813: PUSH
9814: LD_EXP 49
9818: PUSH
9819: LD_EXP 14
9823: IN
9824: AND
9825: PUSH
9826: LD_EXP 49
9830: PPUSH
9831: CALL_OW 255
9835: PUSH
9836: LD_INT 2
9838: EQUAL
9839: AND
9840: IFFALSE 9885
// begin Say ( Kamil , DKam-Med-12 ) ;
9842: LD_EXP 49
9846: PPUSH
9847: LD_STRING DKam-Med-12
9849: PPUSH
9850: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9854: LD_EXP 49
9858: PPUSH
9859: LD_STRING DKam-Med-13
9861: PPUSH
9862: CALL_OW 88
// if not hasExplosionCollected then
9866: LD_EXP 23
9870: NOT
9871: IFFALSE 9885
// Say ( Heike , DH-Med-d-14 ) ;
9873: LD_EXP 45
9877: PPUSH
9878: LD_STRING DH-Med-d-14
9880: PPUSH
9881: CALL_OW 88
// end ; end ; DialogueOff ;
9885: CALL_OW 7
// adminAreaDiscovered := true ;
9889: LD_ADDR_EXP 22
9893: PUSH
9894: LD_INT 1
9896: ST_TO_ADDR
// laundryAllowed := true ;
9897: LD_ADDR_EXP 26
9901: PUSH
9902: LD_INT 1
9904: ST_TO_ADDR
// end ;
9905: PPOPN 2
9907: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9908: LD_EXP 48
9912: PUSH
9913: LD_EXP 55
9917: NOT
9918: AND
9919: PUSH
9920: LD_EXP 48
9924: PUSH
9925: LD_EXP 14
9929: IN
9930: NOT
9931: AND
9932: PUSH
9933: LD_EXP 14
9937: PPUSH
9938: LD_INT 22
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: PUSH
9953: LD_INT 4
9955: GREATER
9956: AND
9957: PUSH
9958: LD_EXP 17
9962: NOT
9963: AND
9964: PUSH
9965: LD_EXP 30
9969: NOT
9970: AND
9971: IFFALSE 10688
9973: GO 9975
9975: DISABLE
9976: LD_INT 0
9978: PPUSH
9979: PPUSH
// begin DialogueOn ;
9980: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9984: LD_ADDR_VAR 0 1
9988: PUSH
9989: LD_EXP 46
9993: PPUSH
9994: CALL_OW 302
9998: PUSH
9999: LD_EXP 46
10003: PUSH
10004: LD_EXP 14
10008: IN
10009: AND
10010: PUSH
10011: LD_EXP 46
10015: PPUSH
10016: CALL_OW 255
10020: PUSH
10021: LD_INT 2
10023: EQUAL
10024: AND
10025: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10026: LD_EXP 45
10030: PPUSH
10031: LD_STRING DH-Med-b-1
10033: PPUSH
10034: CALL_OW 88
// if hasGivi then
10038: LD_VAR 0 1
10042: IFFALSE 10058
// Say ( Givi , DG-Med-a-2 ) else
10044: LD_EXP 46
10048: PPUSH
10049: LD_STRING DG-Med-a-2
10051: PPUSH
10052: CALL_OW 88
10056: GO 10163
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10058: LD_EXP 14
10062: PUSH
10063: LD_EXP 56
10067: ISECT
10068: PPUSH
10069: LD_INT 22
10071: PUSH
10072: LD_INT 2
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 26
10081: PUSH
10082: LD_INT 1
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PPUSH
10093: CALL_OW 72
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: LD_STRING DArm-Med-f-2
10104: PPUSH
10105: CALL_OW 88
10109: NOT
10110: IFFALSE 10163
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10112: LD_EXP 14
10116: PUSH
10117: LD_EXP 56
10121: ISECT
10122: PPUSH
10123: LD_INT 22
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 26
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 72
10151: PUSH
10152: LD_INT 1
10154: ARRAY
10155: PPUSH
10156: LD_STRING DArf-Med-f-2
10158: PPUSH
10159: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10163: LD_INT 154
10165: PPUSH
10166: LD_INT 119
10168: PPUSH
10169: LD_INT 70
10171: PPUSH
10172: CALL 19651 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10176: LD_EXP 45
10180: PPUSH
10181: LD_STRING DH-Med-a-3
10183: PPUSH
10184: CALL_OW 88
// if hasGivi then
10188: LD_VAR 0 1
10192: IFFALSE 10208
// Say ( Givi , DG-Med-a-4 ) else
10194: LD_EXP 46
10198: PPUSH
10199: LD_STRING DG-Med-a-4
10201: PPUSH
10202: CALL_OW 88
10206: GO 10313
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10208: LD_EXP 14
10212: PUSH
10213: LD_EXP 56
10217: ISECT
10218: PPUSH
10219: LD_INT 22
10221: PUSH
10222: LD_INT 2
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 26
10231: PUSH
10232: LD_INT 1
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PPUSH
10243: CALL_OW 72
10247: PUSH
10248: LD_INT 1
10250: ARRAY
10251: PPUSH
10252: LD_STRING DArm-Med-f-4
10254: PPUSH
10255: CALL_OW 88
10259: NOT
10260: IFFALSE 10313
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10262: LD_EXP 14
10266: PUSH
10267: LD_EXP 56
10271: ISECT
10272: PPUSH
10273: LD_INT 22
10275: PUSH
10276: LD_INT 2
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 26
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PPUSH
10297: CALL_OW 72
10301: PUSH
10302: LD_INT 1
10304: ARRAY
10305: PPUSH
10306: LD_STRING DArf-Med-f-4
10308: PPUSH
10309: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10313: LD_ADDR_VAR 0 2
10317: PUSH
10318: LD_EXP 50
10322: PPUSH
10323: CALL_OW 302
10327: PUSH
10328: LD_EXP 50
10332: PUSH
10333: LD_EXP 14
10337: IN
10338: AND
10339: PUSH
10340: LD_EXP 50
10344: PPUSH
10345: CALL_OW 255
10349: PUSH
10350: LD_INT 2
10352: EQUAL
10353: AND
10354: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10355: LD_EXP 47
10359: PPUSH
10360: CALL_OW 302
10364: PUSH
10365: LD_EXP 47
10369: PUSH
10370: LD_EXP 14
10374: IN
10375: AND
10376: PUSH
10377: LD_EXP 47
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 2
10389: EQUAL
10390: AND
10391: IFFALSE 10423
// begin Say ( Mike , DM-Med-5 ) ;
10393: LD_EXP 47
10397: PPUSH
10398: LD_STRING DM-Med-5
10400: PPUSH
10401: CALL_OW 88
// if hasKaia then
10405: LD_VAR 0 2
10409: IFFALSE 10423
// Say ( Kaia , DK-Med-6 ) ;
10411: LD_EXP 50
10415: PPUSH
10416: LD_STRING DK-Med-6
10418: PPUSH
10419: CALL_OW 88
// end ; if hasKaia then
10423: LD_VAR 0 2
10427: IFFALSE 10668
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10429: LD_INT 175
10431: PPUSH
10432: LD_INT 123
10434: PPUSH
10435: LD_INT 2
10437: PPUSH
10438: LD_INT 8
10440: NEG
10441: PPUSH
10442: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10446: LD_INT 175
10448: PPUSH
10449: LD_INT 123
10451: PPUSH
10452: LD_INT 2
10454: PPUSH
10455: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10459: LD_INT 175
10461: PPUSH
10462: LD_INT 123
10464: PPUSH
10465: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10469: LD_EXP 50
10473: PPUSH
10474: LD_STRING DK-Med-7
10476: PPUSH
10477: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10481: LD_EXP 50
10485: PPUSH
10486: LD_STRING DK-Med-8
10488: PPUSH
10489: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10493: LD_EXP 52
10497: PPUSH
10498: CALL_OW 302
10502: PUSH
10503: LD_EXP 52
10507: PUSH
10508: LD_EXP 14
10512: IN
10513: AND
10514: PUSH
10515: LD_EXP 52
10519: PPUSH
10520: CALL_OW 255
10524: PUSH
10525: LD_INT 2
10527: EQUAL
10528: AND
10529: IFFALSE 10587
// begin Say ( Markov , DMar-Med-9 ) ;
10531: LD_EXP 52
10535: PPUSH
10536: LD_STRING DMar-Med-9
10538: PPUSH
10539: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10543: LD_EXP 50
10547: PPUSH
10548: LD_STRING DK-Med-10
10550: PPUSH
10551: CALL_OW 88
// if hasGivi then
10555: LD_VAR 0 1
10559: IFFALSE 10575
// Say ( Kaia , DK-Med-11 ) else
10561: LD_EXP 50
10565: PPUSH
10566: LD_STRING DK-Med-11
10568: PPUSH
10569: CALL_OW 88
10573: GO 10587
// Say ( Kaia , DK-Med-a-11 ) ;
10575: LD_EXP 50
10579: PPUSH
10580: LD_STRING DK-Med-a-11
10582: PPUSH
10583: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10587: LD_EXP 49
10591: PPUSH
10592: CALL_OW 302
10596: PUSH
10597: LD_EXP 49
10601: PUSH
10602: LD_EXP 14
10606: IN
10607: AND
10608: PUSH
10609: LD_EXP 49
10613: PPUSH
10614: CALL_OW 255
10618: PUSH
10619: LD_INT 2
10621: EQUAL
10622: AND
10623: IFFALSE 10668
// begin Say ( Kamil , DKam-Med-12 ) ;
10625: LD_EXP 49
10629: PPUSH
10630: LD_STRING DKam-Med-12
10632: PPUSH
10633: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10637: LD_EXP 49
10641: PPUSH
10642: LD_STRING DKam-Med-13
10644: PPUSH
10645: CALL_OW 88
// if not hasExplosionCollected then
10649: LD_EXP 23
10653: NOT
10654: IFFALSE 10668
// Say ( Heike , DH-Med-d-14 ) ;
10656: LD_EXP 45
10660: PPUSH
10661: LD_STRING DH-Med-d-14
10663: PPUSH
10664: CALL_OW 88
// end ; end ; DialogueOff ;
10668: CALL_OW 7
// adminAreaDiscovered := true ;
10672: LD_ADDR_EXP 22
10676: PUSH
10677: LD_INT 1
10679: ST_TO_ADDR
// laundryAllowed := true ;
10680: LD_ADDR_EXP 26
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
// end ;
10688: PPOPN 2
10690: END
// every 0 0$1 trigger laundryAllowed do
10691: LD_EXP 26
10695: IFFALSE 10707
10697: GO 10699
10699: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10700: LD_STRING M1-laundry
10702: PPUSH
10703: CALL_OW 337
10707: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10708: LD_EXP 48
10712: NOT
10713: PUSH
10714: LD_EXP 55
10718: NOT
10719: AND
10720: PUSH
10721: LD_EXP 53
10725: PPUSH
10726: CALL_OW 302
10730: AND
10731: PUSH
10732: LD_EXP 53
10736: PUSH
10737: LD_EXP 14
10741: IN
10742: AND
10743: PUSH
10744: LD_EXP 53
10748: PPUSH
10749: CALL_OW 255
10753: PUSH
10754: LD_INT 2
10756: EQUAL
10757: AND
10758: PUSH
10759: LD_EXP 17
10763: NOT
10764: AND
10765: PUSH
10766: LD_EXP 30
10770: NOT
10771: AND
10772: IFFALSE 10928
10774: GO 10776
10776: DISABLE
// begin DialogueOn ;
10777: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10781: LD_INT 152
10783: PPUSH
10784: LD_INT 115
10786: PPUSH
10787: LD_INT 2
10789: PPUSH
10790: LD_INT 16
10792: NEG
10793: PPUSH
10794: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10798: LD_INT 152
10800: PPUSH
10801: LD_INT 115
10803: PPUSH
10804: LD_INT 2
10806: PPUSH
10807: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10811: LD_INT 152
10813: PPUSH
10814: LD_INT 115
10816: PPUSH
10817: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10821: LD_EXP 53
10825: PPUSH
10826: LD_STRING DO-Med-c-1
10828: PPUSH
10829: CALL_OW 88
// if not hasExplosionCollected then
10833: LD_EXP 23
10837: NOT
10838: IFFALSE 10854
// Say ( Heike , DH-Med-d-14 ) else
10840: LD_EXP 45
10844: PPUSH
10845: LD_STRING DH-Med-d-14
10847: PPUSH
10848: CALL_OW 88
10852: GO 10916
// begin Say ( Heike , DH-Med-c-2 ) ;
10854: LD_EXP 45
10858: PPUSH
10859: LD_STRING DH-Med-c-2
10861: PPUSH
10862: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10866: LD_EXP 50
10870: PPUSH
10871: CALL_OW 302
10875: PUSH
10876: LD_EXP 50
10880: PUSH
10881: LD_EXP 14
10885: IN
10886: AND
10887: PUSH
10888: LD_EXP 50
10892: PPUSH
10893: CALL_OW 255
10897: PUSH
10898: LD_INT 2
10900: EQUAL
10901: AND
10902: IFFALSE 10916
// Say ( Kaia , DK-Med-c-3 ) ;
10904: LD_EXP 50
10908: PPUSH
10909: LD_STRING DK-Med-c-3
10911: PPUSH
10912: CALL_OW 88
// end ; DialogueOff ;
10916: CALL_OW 7
// adminAreaDiscovered := true ;
10920: LD_ADDR_EXP 22
10924: PUSH
10925: LD_INT 1
10927: ST_TO_ADDR
// end ;
10928: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10929: LD_EXP 50
10933: PPUSH
10934: CALL_OW 256
10938: PUSH
10939: LD_INT 250
10941: LESS
10942: PUSH
10943: LD_EXP 50
10947: PUSH
10948: LD_EXP 14
10952: IN
10953: AND
10954: PUSH
10955: LD_EXP 17
10959: AND
10960: PUSH
10961: LD_EXP 24
10965: AND
10966: IFFALSE 11095
10968: GO 10970
10970: DISABLE
// begin DialogueOn ;
10971: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10975: LD_EXP 50
10979: PPUSH
10980: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10984: LD_EXP 50
10988: PPUSH
10989: LD_STRING DK-death-1
10991: PPUSH
10992: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10996: LD_EXP 45
11000: PPUSH
11001: LD_STRING DH-death-2
11003: PPUSH
11004: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11008: LD_EXP 50
11012: PPUSH
11013: LD_STRING DK-death-3
11015: PPUSH
11016: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11020: LD_EXP 50
11024: PPUSH
11025: LD_STRING DK-death-4
11027: PPUSH
11028: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11032: LD_EXP 50
11036: PPUSH
11037: LD_INT 8
11039: PPUSH
11040: CALL_OW 235
// ComStop ( Kaia ) ;
11044: LD_EXP 50
11048: PPUSH
11049: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11053: LD_INT 8
11055: PPUSH
11056: LD_INT 2
11058: PPUSH
11059: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11063: LD_ADDR_EXP 14
11067: PUSH
11068: LD_EXP 14
11072: PUSH
11073: LD_EXP 50
11077: DIFF
11078: ST_TO_ADDR
// DialogueOff ;
11079: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11083: LD_EXP 47
11087: PPUSH
11088: LD_STRING DM-death-5
11090: PPUSH
11091: CALL_OW 88
// end ;
11095: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11096: LD_EXP 25
11100: NOT
11101: PUSH
11102: LD_EXP 30
11106: NOT
11107: AND
11108: PUSH
11109: LD_EXP 58
11113: PUSH
11114: LD_EXP 14
11118: IN
11119: NOT
11120: AND
11121: PUSH
11122: LD_INT 2
11124: PPUSH
11125: LD_EXP 58
11129: PPUSH
11130: CALL_OW 292
11134: AND
11135: PUSH
11136: LD_EXP 45
11140: PPUSH
11141: LD_EXP 58
11145: PPUSH
11146: CALL_OW 296
11150: PUSH
11151: LD_INT 6
11153: LESS
11154: AND
11155: PUSH
11156: LD_EXP 17
11160: NOT
11161: AND
11162: IFFALSE 11386
11164: GO 11166
11166: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11167: LD_EXP 58
11171: PPUSH
11172: LD_EXP 45
11176: PPUSH
11177: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11181: LD_EXP 45
11185: PPUSH
11186: LD_EXP 58
11190: PPUSH
11191: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11195: LD_INT 10
11197: PPUSH
11198: CALL_OW 67
// DialogueOn ;
11202: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11206: LD_EXP 58
11210: PPUSH
11211: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11215: LD_EXP 45
11219: PPUSH
11220: LD_STRING DH-Deal-1
11222: PPUSH
11223: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11227: LD_EXP 58
11231: PPUSH
11232: LD_STRING DJ-Deal-2
11234: PPUSH
11235: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11239: LD_EXP 45
11243: PPUSH
11244: LD_STRING DH-Deal-3
11246: PPUSH
11247: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11251: LD_EXP 58
11255: PPUSH
11256: LD_STRING DJ-Deal-4
11258: PPUSH
11259: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11263: LD_EXP 58
11267: PPUSH
11268: LD_STRING DJ-Deal-5
11270: PPUSH
11271: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11275: LD_EXP 58
11279: PPUSH
11280: LD_STRING DJ-Deal-6
11282: PPUSH
11283: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11287: LD_EXP 58
11291: PPUSH
11292: LD_STRING DJ-Deal-7
11294: PPUSH
11295: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11299: LD_EXP 45
11303: PPUSH
11304: LD_STRING DH-Deal-8
11306: PPUSH
11307: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11311: LD_EXP 45
11315: PPUSH
11316: LD_STRING DH-Deal-9
11318: PPUSH
11319: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11323: LD_EXP 58
11327: PPUSH
11328: LD_STRING DJ-Deal-10
11330: PPUSH
11331: CALL_OW 88
// DialogueOff ;
11335: CALL_OW 7
// contactWithAmerican := true ;
11339: LD_ADDR_EXP 25
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11347: LD_STRING M1-american-out
11349: PPUSH
11350: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11354: LD_EXP 58
11358: PPUSH
11359: LD_INT 2
11361: PPUSH
11362: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11366: LD_ADDR_EXP 14
11370: PUSH
11371: LD_EXP 14
11375: PPUSH
11376: LD_EXP 58
11380: PPUSH
11381: CALL 66300 0 2
11385: ST_TO_ADDR
// end ;
11386: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11387: LD_EXP 25
11391: PUSH
11392: LD_EXP 30
11396: NOT
11397: AND
11398: PUSH
11399: LD_EXP 58
11403: PUSH
11404: LD_EXP 14
11408: IN
11409: NOT
11410: AND
11411: PUSH
11412: LD_INT 2
11414: PPUSH
11415: LD_EXP 58
11419: PPUSH
11420: CALL_OW 292
11424: AND
11425: PUSH
11426: LD_EXP 45
11430: PPUSH
11431: LD_EXP 58
11435: PPUSH
11436: CALL_OW 296
11440: PUSH
11441: LD_INT 6
11443: LESS
11444: AND
11445: PUSH
11446: LD_EXP 17
11450: NOT
11451: AND
11452: IFFALSE 11577
11454: GO 11456
11456: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11457: LD_EXP 58
11461: PPUSH
11462: LD_EXP 45
11466: PPUSH
11467: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11471: LD_EXP 45
11475: PPUSH
11476: LD_EXP 58
11480: PPUSH
11481: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11485: LD_INT 10
11487: PPUSH
11488: CALL_OW 67
// DialogueOn ;
11492: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11496: LD_EXP 58
11500: PPUSH
11501: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11505: LD_EXP 58
11509: PPUSH
11510: LD_STRING DJ-Escort-1
11512: PPUSH
11513: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11517: LD_EXP 45
11521: PPUSH
11522: LD_STRING DH-Escort-2
11524: PPUSH
11525: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11529: LD_EXP 58
11533: PPUSH
11534: LD_STRING DJ-Escort-3
11536: PPUSH
11537: CALL_OW 88
// DialogueOff ;
11541: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11545: LD_EXP 58
11549: PPUSH
11550: LD_INT 2
11552: PPUSH
11553: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11557: LD_ADDR_EXP 14
11561: PUSH
11562: LD_EXP 14
11566: PPUSH
11567: LD_EXP 58
11571: PPUSH
11572: CALL 66300 0 2
11576: ST_TO_ADDR
// end ;
11577: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11578: LD_EXP 25
11582: PUSH
11583: LD_EXP 30
11587: NOT
11588: AND
11589: PUSH
11590: LD_EXP 57
11594: PUSH
11595: LD_EXP 14
11599: DIFF
11600: PPUSH
11601: LD_INT 22
11603: PUSH
11604: LD_INT 4
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 120
11616: PUSH
11617: LD_INT 1
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 101
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 72
11647: AND
11648: PUSH
11649: LD_EXP 17
11653: NOT
11654: AND
11655: IFFALSE 11882
11657: GO 11659
11659: DISABLE
11660: LD_INT 0
11662: PPUSH
// begin enable ;
11663: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11664: LD_ADDR_VAR 0 1
11668: PUSH
11669: LD_EXP 57
11673: PUSH
11674: LD_EXP 14
11678: DIFF
11679: PPUSH
11680: LD_INT 22
11682: PUSH
11683: LD_INT 4
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 91
11692: PUSH
11693: LD_EXP 45
11697: PUSH
11698: LD_INT 6
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 101
11708: PUSH
11709: LD_INT 2
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: PPUSH
11721: CALL_OW 72
11725: PPUSH
11726: LD_EXP 45
11730: PPUSH
11731: CALL_OW 74
11735: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11736: LD_VAR 0 1
11740: PPUSH
11741: LD_EXP 45
11745: PPUSH
11746: CALL_OW 296
11750: PUSH
11751: LD_INT 6
11753: LESS
11754: IFFALSE 11882
// begin DialogueOn ;
11756: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11760: LD_VAR 0 1
11764: PPUSH
11765: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11769: LD_EXP 45
11773: PPUSH
11774: LD_STRING DH-USsol-1
11776: PPUSH
11777: CALL_OW 88
// if un <> Jerry then
11781: LD_VAR 0 1
11785: PUSH
11786: LD_EXP 60
11790: NONEQUAL
11791: IFFALSE 11834
// if GetSex ( un ) = sex_male then
11793: LD_VAR 0 1
11797: PPUSH
11798: CALL_OW 258
11802: PUSH
11803: LD_INT 1
11805: EQUAL
11806: IFFALSE 11822
// Say ( un , DUSM-USsol-2 ) else
11808: LD_VAR 0 1
11812: PPUSH
11813: LD_STRING DUSM-USsol-2
11815: PPUSH
11816: CALL_OW 88
11820: GO 11834
// Say ( un , DUSF-USsol-2 ) ;
11822: LD_VAR 0 1
11826: PPUSH
11827: LD_STRING DUSF-USsol-2
11829: PPUSH
11830: CALL_OW 88
// DialogueOff ;
11834: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11838: LD_ADDR_EXP 14
11842: PUSH
11843: LD_EXP 14
11847: PPUSH
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL 66300 0 2
11857: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11858: LD_VAR 0 1
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 109
// SetSide ( un , 2 ) ;
11870: LD_VAR 0 1
11874: PPUSH
11875: LD_INT 2
11877: PPUSH
11878: CALL_OW 235
// end ; end ;
11882: PPOPN 1
11884: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11885: LD_EXP 56
11889: PUSH
11890: LD_EXP 30
11894: NOT
11895: AND
11896: PUSH
11897: LD_EXP 56
11901: PUSH
11902: LD_EXP 14
11906: DIFF
11907: PPUSH
11908: LD_INT 3
11910: PUSH
11911: LD_INT 120
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 91
11927: PUSH
11928: LD_EXP 45
11932: PUSH
11933: LD_INT 6
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 101
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 72
11960: AND
11961: PUSH
11962: LD_EXP 17
11966: NOT
11967: AND
11968: IFFALSE 12183
11970: GO 11972
11972: DISABLE
11973: LD_INT 0
11975: PPUSH
// begin enable ;
11976: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11977: LD_ADDR_VAR 0 1
11981: PUSH
11982: LD_EXP 56
11986: PUSH
11987: LD_EXP 14
11991: DIFF
11992: PPUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 5
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 91
12005: PUSH
12006: LD_EXP 45
12010: PUSH
12011: LD_INT 6
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 101
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 72
12038: PPUSH
12039: LD_EXP 45
12043: PPUSH
12044: CALL_OW 74
12048: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12049: LD_VAR 0 1
12053: PPUSH
12054: LD_EXP 45
12058: PPUSH
12059: CALL_OW 296
12063: PUSH
12064: LD_INT 6
12066: LESS
12067: IFFALSE 12183
// begin DialogueOn ;
12069: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12082: LD_EXP 45
12086: PPUSH
12087: LD_STRING DH-USsol-1
12089: PPUSH
12090: CALL_OW 88
// if GetSex ( un ) = sex_male then
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 258
12103: PUSH
12104: LD_INT 1
12106: EQUAL
12107: IFFALSE 12123
// Say ( un , DArm-USsol-2 ) else
12109: LD_VAR 0 1
12113: PPUSH
12114: LD_STRING DArm-USsol-2
12116: PPUSH
12117: CALL_OW 88
12121: GO 12135
// Say ( un , DArf-USsol-3 ) ;
12123: LD_VAR 0 1
12127: PPUSH
12128: LD_STRING DArf-USsol-3
12130: PPUSH
12131: CALL_OW 88
// DialogueOff ;
12135: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12139: LD_ADDR_EXP 14
12143: PUSH
12144: LD_EXP 14
12148: PPUSH
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL 66300 0 2
12158: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12159: LD_VAR 0 1
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 109
// SetSide ( un , 2 ) ;
12171: LD_VAR 0 1
12175: PPUSH
12176: LD_INT 2
12178: PPUSH
12179: CALL_OW 235
// end ; end ;
12183: PPOPN 1
12185: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12186: LD_EXP 57
12190: PPUSH
12191: LD_INT 101
12193: PUSH
12194: LD_INT 2
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 72
12205: PUSH
12206: LD_EXP 14
12210: PPUSH
12211: LD_INT 22
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 72
12225: PUSH
12226: LD_INT 5
12228: GREATER
12229: AND
12230: PUSH
12231: LD_EXP 10
12235: NOT
12236: AND
12237: PUSH
12238: LD_EXP 30
12242: NOT
12243: AND
12244: PUSH
12245: LD_EXP 25
12249: NOT
12250: AND
12251: PUSH
12252: LD_EXP 17
12256: NOT
12257: AND
12258: IFFALSE 12373
12260: GO 12262
12262: DISABLE
12263: LD_INT 0
12265: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: LD_EXP 57
12275: PPUSH
12276: LD_INT 22
12278: PUSH
12279: LD_INT 4
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 101
12288: PUSH
12289: LD_INT 2
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PPUSH
12300: CALL_OW 72
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: ST_TO_ADDR
// DialogueOn ;
12309: CALL_OW 6
// if GetSex ( un ) = sex_male then
12313: LD_VAR 0 1
12317: PPUSH
12318: CALL_OW 258
12322: PUSH
12323: LD_INT 1
12325: EQUAL
12326: IFFALSE 12342
// Say ( un , DUSm-USsol-a-2 ) else
12328: LD_VAR 0 1
12332: PPUSH
12333: LD_STRING DUSm-USsol-a-2
12335: PPUSH
12336: CALL_OW 88
12340: GO 12354
// Say ( un , DUSf-USsol-a-2 ) ;
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_STRING DUSf-USsol-a-2
12349: PPUSH
12350: CALL_OW 88
// DialogueOff ;
12354: CALL_OW 7
// wait ( 0 0$2 ) ;
12358: LD_INT 70
12360: PPUSH
12361: CALL_OW 67
// isAlarm := true ;
12365: LD_ADDR_EXP 17
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// end ;
12373: PPOPN 1
12375: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12376: LD_EXP 17
12380: NOT
12381: PUSH
12382: LD_EXP 46
12386: PPUSH
12387: CALL_OW 302
12391: AND
12392: PUSH
12393: LD_EXP 46
12397: PPUSH
12398: CALL_OW 255
12402: PUSH
12403: LD_INT 2
12405: EQUAL
12406: AND
12407: PUSH
12408: LD_EXP 26
12412: AND
12413: PUSH
12414: LD_EXP 28
12418: NOT
12419: AND
12420: PUSH
12421: LD_EXP 27
12425: NOT
12426: AND
12427: PUSH
12428: LD_EXP 30
12432: NOT
12433: AND
12434: PUSH
12435: LD_EXP 46
12439: PPUSH
12440: LD_INT 165
12442: PPUSH
12443: CALL 19964 0 2
12447: AND
12448: IFFALSE 12580
12450: GO 12452
12452: DISABLE
// begin enable ;
12453: ENABLE
// InGameOn ;
12454: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12458: LD_EXP 46
12462: PPUSH
12463: LD_INT 5
12465: PPUSH
12466: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12470: LD_INT 165
12472: PPUSH
12473: LD_INT 5
12475: PPUSH
12476: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12480: LD_EXP 46
12484: PPUSH
12485: LD_INT 165
12487: PPUSH
12488: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12492: LD_INT 35
12494: PPUSH
12495: CALL_OW 67
// until IsInUnit ( Givi ) ;
12499: LD_EXP 46
12503: PPUSH
12504: CALL_OW 310
12508: IFFALSE 12492
// case Query ( GiviInLaundry ) of 1 :
12510: LD_STRING GiviInLaundry
12512: PPUSH
12513: CALL_OW 97
12517: PUSH
12518: LD_INT 1
12520: DOUBLE
12521: EQUAL
12522: IFTRUE 12526
12524: GO 12533
12526: POP
// SpawnGiviAsRussian ; 2 :
12527: CALL 1910 0 0
12531: GO 12545
12533: LD_INT 2
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12544
12541: POP
// ; end ;
12542: GO 12545
12544: POP
// ComExitBuilding ( Givi ) ;
12545: LD_EXP 46
12549: PPUSH
12550: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12554: LD_EXP 46
12558: PPUSH
12559: LD_INT 2
12561: PPUSH
12562: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12566: LD_INT 165
12568: PPUSH
12569: LD_INT 3
12571: PPUSH
12572: CALL_OW 235
// InGameOff ;
12576: CALL_OW 9
// end ;
12580: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12581: LD_EXP 17
12585: NOT
12586: PUSH
12587: LD_EXP 28
12591: AND
12592: PUSH
12593: LD_EXP 46
12597: PPUSH
12598: CALL_OW 255
12602: PUSH
12603: LD_INT 2
12605: EQUAL
12606: AND
12607: PUSH
12608: LD_EXP 46
12612: PPUSH
12613: CALL_OW 248
12617: PUSH
12618: LD_INT 3
12620: EQUAL
12621: AND
12622: PUSH
12623: LD_EXP 46
12627: PPUSH
12628: LD_INT 119
12630: PPUSH
12631: CALL 19964 0 2
12635: AND
12636: PUSH
12637: LD_EXP 30
12641: NOT
12642: AND
12643: IFFALSE 12897
12645: GO 12647
12647: DISABLE
// begin InGameOn ;
12648: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12652: LD_EXP 46
12656: PPUSH
12657: LD_INT 3
12659: PPUSH
12660: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12664: LD_INT 10
12666: PPUSH
12667: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12671: LD_EXP 46
12675: PPUSH
12676: LD_INT 119
12678: PPUSH
12679: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12683: LD_INT 35
12685: PPUSH
12686: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12690: LD_EXP 46
12694: PPUSH
12695: LD_INT 119
12697: PPUSH
12698: CALL_OW 120
// until IsInUnit ( Givi ) ;
12702: LD_EXP 46
12706: PPUSH
12707: CALL_OW 310
12711: IFFALSE 12683
// DialogueOn ;
12713: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12717: LD_EXP 46
12721: PPUSH
12722: LD_STRING DG-Captive-1
12724: PPUSH
12725: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12729: LD_EXP 64
12733: PPUSH
12734: LD_STRING DCom-Captive-2
12736: PPUSH
12737: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12741: LD_EXP 46
12745: PPUSH
12746: LD_STRING DG-Captive-3
12748: PPUSH
12749: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12753: LD_EXP 64
12757: PPUSH
12758: LD_STRING DCom-Captive-4
12760: PPUSH
12761: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12765: LD_EXP 64
12769: PPUSH
12770: CALL_OW 64
// DialogueOff ;
12774: CALL_OW 7
// InGameOff ;
12778: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12782: LD_EXP 46
12786: PPUSH
12787: LD_INT 2
12789: PPUSH
12790: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12794: LD_EXP 46
12798: PPUSH
12799: CALL_OW 122
// if Aviradze then
12803: LD_EXP 55
12807: IFFALSE 12850
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12809: LD_ADDR_EXP 14
12813: PUSH
12814: LD_EXP 14
12818: PPUSH
12819: LD_EXP 55
12823: PPUSH
12824: CALL 66300 0 2
12828: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12829: LD_EXP 55
12833: PPUSH
12834: LD_INT 2
12836: PPUSH
12837: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12841: LD_EXP 55
12845: PPUSH
12846: CALL_OW 122
// end ; if Ibrahim then
12850: LD_EXP 48
12854: IFFALSE 12897
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12856: LD_ADDR_EXP 14
12860: PUSH
12861: LD_EXP 14
12865: PPUSH
12866: LD_EXP 48
12870: PPUSH
12871: CALL 66300 0 2
12875: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12876: LD_EXP 48
12880: PPUSH
12881: LD_INT 2
12883: PPUSH
12884: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12888: LD_EXP 48
12892: PPUSH
12893: CALL_OW 122
// end ; end ;
12897: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12898: LD_EXP 17
12902: NOT
12903: PUSH
12904: LD_EXP 27
12908: AND
12909: PUSH
12910: LD_EXP 45
12914: PPUSH
12915: CALL_OW 248
12919: PUSH
12920: LD_INT 3
12922: EQUAL
12923: AND
12924: PUSH
12925: LD_EXP 45
12929: PPUSH
12930: LD_INT 119
12932: PPUSH
12933: CALL 19964 0 2
12937: AND
12938: PUSH
12939: LD_EXP 30
12943: NOT
12944: AND
12945: IFFALSE 13244
12947: GO 12949
12949: DISABLE
// begin InGameOn ;
12950: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12954: LD_EXP 45
12958: PPUSH
12959: LD_INT 3
12961: PPUSH
12962: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12966: LD_INT 10
12968: PPUSH
12969: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
12973: LD_EXP 45
12977: PPUSH
12978: LD_INT 119
12980: PPUSH
12981: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12985: LD_INT 35
12987: PPUSH
12988: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
12992: LD_EXP 45
12996: PPUSH
12997: LD_INT 119
12999: PPUSH
13000: CALL_OW 120
// until IsInUnit ( Heike ) ;
13004: LD_EXP 45
13008: PPUSH
13009: CALL_OW 310
13013: IFFALSE 12985
// wait ( 0 0$1 ) ;
13015: LD_INT 35
13017: PPUSH
13018: CALL_OW 67
// DialogueOn ;
13022: CALL_OW 6
// if Aviradze and Ibrahim then
13026: LD_EXP 55
13030: PUSH
13031: LD_EXP 48
13035: AND
13036: IFFALSE 13052
// Say ( Heike , DH-Captive-a-1 ) else
13038: LD_EXP 45
13042: PPUSH
13043: LD_STRING DH-Captive-a-1
13045: PPUSH
13046: CALL_OW 88
13050: GO 13064
// Say ( Heike , DH-Captive-a-b-1 ) ;
13052: LD_EXP 45
13056: PPUSH
13057: LD_STRING DH-Captive-a-b-1
13059: PPUSH
13060: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13064: LD_EXP 64
13068: PPUSH
13069: LD_STRING DCom-Captive-a-2
13071: PPUSH
13072: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13076: LD_EXP 45
13080: PPUSH
13081: LD_STRING DH-Captive-a-3
13083: PPUSH
13084: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13088: LD_EXP 64
13092: PPUSH
13093: LD_STRING DCom-Captive-a-4
13095: PPUSH
13096: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13100: LD_EXP 45
13104: PPUSH
13105: LD_STRING DH-Captive-a-5
13107: PPUSH
13108: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13112: LD_EXP 64
13116: PPUSH
13117: CALL_OW 64
// DialogueOff ;
13121: CALL_OW 7
// InGameOff ;
13125: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13129: LD_EXP 45
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13141: LD_EXP 45
13145: PPUSH
13146: CALL_OW 122
// if Aviradze then
13150: LD_EXP 55
13154: IFFALSE 13197
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13156: LD_ADDR_EXP 14
13160: PUSH
13161: LD_EXP 14
13165: PPUSH
13166: LD_EXP 55
13170: PPUSH
13171: CALL 66300 0 2
13175: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13176: LD_EXP 55
13180: PPUSH
13181: LD_INT 2
13183: PPUSH
13184: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13188: LD_EXP 55
13192: PPUSH
13193: CALL_OW 122
// end ; if Ibrahim then
13197: LD_EXP 48
13201: IFFALSE 13244
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13203: LD_ADDR_EXP 14
13207: PUSH
13208: LD_EXP 14
13212: PPUSH
13213: LD_EXP 48
13217: PPUSH
13218: CALL 66300 0 2
13222: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13223: LD_EXP 48
13227: PPUSH
13228: LD_INT 2
13230: PPUSH
13231: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13235: LD_EXP 48
13239: PPUSH
13240: CALL_OW 122
// end ; end ;
13244: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13245: LD_INT 2
13247: PUSH
13248: LD_INT 25
13250: PUSH
13251: LD_INT 32
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 25
13260: PUSH
13261: LD_INT 34
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: IFFALSE 13289
13279: GO 13281
13281: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13282: LD_STRING M1-weapons-out
13284: PPUSH
13285: CALL_OW 604
13289: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13290: LD_INT 2
13292: PPUSH
13293: LD_EXP 60
13297: PPUSH
13298: CALL_OW 292
13302: PUSH
13303: LD_EXP 45
13307: PPUSH
13308: LD_EXP 60
13312: PPUSH
13313: CALL_OW 296
13317: AND
13318: PUSH
13319: LD_EXP 17
13323: NOT
13324: AND
13325: PUSH
13326: LD_EXP 30
13330: NOT
13331: AND
13332: IFFALSE 14190
13334: GO 13336
13336: DISABLE
13337: LD_INT 0
13339: PPUSH
13340: PPUSH
// begin if contactWithAmerican then
13341: LD_EXP 25
13345: IFFALSE 13442
// begin DialogueOn ;
13347: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13351: LD_EXP 60
13355: PPUSH
13356: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13360: LD_EXP 45
13364: PPUSH
13365: LD_STRING DH-USsol-1
13367: PPUSH
13368: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13372: LD_EXP 60
13376: PPUSH
13377: LD_INT 2
13379: PPUSH
13380: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13384: LD_ADDR_EXP 57
13388: PUSH
13389: LD_EXP 57
13393: PPUSH
13394: LD_EXP 60
13398: PPUSH
13399: CALL 66300 0 2
13403: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13404: LD_ADDR_EXP 14
13408: PUSH
13409: LD_EXP 14
13413: PPUSH
13414: LD_EXP 47
13418: PPUSH
13419: CALL 66300 0 2
13423: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13424: LD_EXP 60
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: CALL_OW 109
// DialogueOff ;
13436: CALL_OW 7
// exit ;
13440: GO 14190
// end ; DialogueOn ;
13442: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13446: LD_EXP 60
13450: PPUSH
13451: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13455: LD_EXP 60
13459: PPUSH
13460: LD_STRING DJy-Food-1
13462: PPUSH
13463: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13467: LD_EXP 45
13471: PPUSH
13472: LD_STRING DH-Food-2
13474: PPUSH
13475: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13479: LD_EXP 60
13483: PPUSH
13484: LD_STRING DJy-Food-3
13486: PPUSH
13487: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13491: LD_EXP 60
13495: PPUSH
13496: LD_STRING DJy-Food-4
13498: PPUSH
13499: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13503: LD_EXP 45
13507: PPUSH
13508: LD_STRING DH-Food-5
13510: PPUSH
13511: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13515: LD_EXP 60
13519: PPUSH
13520: LD_STRING DJy-Food-6
13522: PPUSH
13523: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13527: LD_EXP 60
13531: PPUSH
13532: LD_STRING DJy-Food-7
13534: PPUSH
13535: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13539: LD_EXP 60
13543: PPUSH
13544: LD_STRING DJy-Food-8
13546: PPUSH
13547: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13551: LD_EXP 45
13555: PPUSH
13556: LD_STRING DH-Food-9
13558: PPUSH
13559: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13563: LD_EXP 60
13567: PPUSH
13568: LD_STRING DJy-Food-10
13570: PPUSH
13571: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13575: LD_EXP 45
13579: PPUSH
13580: LD_STRING DH-Food-11
13582: PPUSH
13583: CALL_OW 88
// DialogueOff ;
13587: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13591: LD_STRING M3
13593: PPUSH
13594: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13598: LD_INT 5
13600: PPUSH
13601: LD_INT 215
13603: PPUSH
13604: LD_INT 117
13606: PPUSH
13607: LD_INT 0
13609: PPUSH
13610: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13614: LD_INT 215
13616: PPUSH
13617: LD_INT 118
13619: PPUSH
13620: LD_INT 2
13622: PPUSH
13623: LD_INT 6
13625: NEG
13626: PPUSH
13627: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13631: LD_INT 215
13633: PPUSH
13634: LD_INT 118
13636: PPUSH
13637: LD_INT 2
13639: PPUSH
13640: CALL_OW 331
// foodDelivered := false ;
13644: LD_ADDR_VAR 0 2
13648: PUSH
13649: LD_INT 0
13651: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13652: LD_INT 35
13654: PPUSH
13655: CALL_OW 67
// if hasMuchin then
13659: LD_EXP 30
13663: IFFALSE 13667
// continue ;
13665: GO 13652
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13667: LD_ADDR_VAR 0 1
13671: PUSH
13672: LD_EXP 14
13676: PUSH
13677: LD_EXP 45
13681: UNION
13682: PPUSH
13683: LD_INT 91
13685: PUSH
13686: LD_EXP 60
13690: PUSH
13691: LD_INT 6
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 25
13701: PUSH
13702: LD_INT 33
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 72
13717: PUSH
13718: FOR_IN
13719: IFFALSE 13919
// if Carry ( i ) then
13721: LD_VAR 0 1
13725: PPUSH
13726: CALL_OW 281
13730: IFFALSE 13917
// begin DialogueOn ;
13732: CALL_OW 6
// foodDelivered := true ;
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: LD_INT 1
13743: ST_TO_ADDR
// case i of Heike :
13744: LD_VAR 0 1
13748: PUSH
13749: LD_EXP 45
13753: DOUBLE
13754: EQUAL
13755: IFTRUE 13759
13757: GO 13774
13759: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13760: LD_EXP 45
13764: PPUSH
13765: LD_STRING DH-Food-12
13767: PPUSH
13768: CALL_OW 88
13772: GO 13900
13774: LD_EXP 50
13778: DOUBLE
13779: EQUAL
13780: IFTRUE 13784
13782: GO 13799
13784: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13785: LD_EXP 50
13789: PPUSH
13790: LD_STRING DK-Food-a-12
13792: PPUSH
13793: CALL_OW 88
13797: GO 13900
13799: LD_EXP 52
13803: DOUBLE
13804: EQUAL
13805: IFTRUE 13809
13807: GO 13824
13809: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13810: LD_EXP 52
13814: PPUSH
13815: LD_STRING DMar-Food-a-12
13817: PPUSH
13818: CALL_OW 88
13822: GO 13900
13824: LD_EXP 46
13828: DOUBLE
13829: EQUAL
13830: IFTRUE 13834
13832: GO 13849
13834: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13835: LD_EXP 46
13839: PPUSH
13840: LD_STRING DG-Food-a-14
13842: PPUSH
13843: CALL_OW 88
13847: GO 13900
13849: LD_EXP 47
13853: DOUBLE
13854: EQUAL
13855: IFTRUE 13859
13857: GO 13874
13859: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13860: LD_EXP 47
13864: PPUSH
13865: LD_STRING DM-Food-a-15
13867: PPUSH
13868: CALL_OW 88
13872: GO 13900
13874: LD_EXP 49
13878: DOUBLE
13879: EQUAL
13880: IFTRUE 13884
13882: GO 13899
13884: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13885: LD_EXP 49
13889: PPUSH
13890: LD_STRING DKam-Food-a-16
13892: PPUSH
13893: CALL_OW 88
13897: GO 13900
13899: POP
// SetCargo ( i , mat_cans , 0 ) ;
13900: LD_VAR 0 1
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: LD_INT 0
13910: PPUSH
13911: CALL_OW 290
// break ;
13915: GO 13919
// end ;
13917: GO 13718
13919: POP
13920: POP
// until foodDelivered ;
13921: LD_VAR 0 2
13925: IFFALSE 13652
// givenFood := true ;
13927: LD_ADDR_EXP 33
13931: PUSH
13932: LD_INT 1
13934: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13935: LD_EXP 60
13939: PPUSH
13940: LD_STRING DJy-Food-13
13942: PPUSH
13943: CALL_OW 88
// hasVirus := true ;
13947: LD_ADDR_EXP 31
13951: PUSH
13952: LD_INT 1
13954: ST_TO_ADDR
// if not americanContact then
13955: LD_EXP 10
13959: NOT
13960: IFFALSE 14010
// begin Say ( Heike , DH-Food-14 ) ;
13962: LD_EXP 45
13966: PPUSH
13967: LD_STRING DH-Food-14
13969: PPUSH
13970: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13974: LD_EXP 60
13978: PPUSH
13979: LD_STRING DJy-Food-15
13981: PPUSH
13982: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13986: LD_EXP 60
13990: PPUSH
13991: LD_STRING DJy-Food-16
13993: PPUSH
13994: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13998: LD_EXP 60
14002: PPUSH
14003: LD_STRING DJy-Food-17
14005: PPUSH
14006: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14010: LD_STRING M3-out
14012: PPUSH
14013: CALL_OW 337
// DialogueOff ;
14017: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14021: LD_EXP 60
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: LD_INT 10
14031: PPUSH
14032: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14036: LD_EXP 60
14040: PPUSH
14041: LD_INT 95
14043: PPUSH
14044: LD_INT 17
14046: PPUSH
14047: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14051: LD_INT 35
14053: PPUSH
14054: CALL_OW 67
// if not HasTask ( Jerry ) then
14058: LD_EXP 60
14062: PPUSH
14063: CALL_OW 314
14067: NOT
14068: IFFALSE 14085
// ComMoveXY ( Jerry , 95 , 17 ) ;
14070: LD_EXP 60
14074: PPUSH
14075: LD_INT 95
14077: PPUSH
14078: LD_INT 17
14080: PPUSH
14081: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14085: LD_EXP 60
14089: PPUSH
14090: LD_INT 95
14092: PPUSH
14093: LD_INT 17
14095: PPUSH
14096: CALL_OW 307
14100: IFFALSE 14051
// SetCargo ( Jerry , mat_cans , 0 ) ;
14102: LD_EXP 60
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: LD_INT 0
14112: PPUSH
14113: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14117: LD_ADDR_EXP 57
14121: PUSH
14122: LD_EXP 57
14126: PPUSH
14127: LD_EXP 60
14131: PPUSH
14132: CALL 66300 0 2
14136: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14137: LD_ADDR_VAR 0 1
14141: PUSH
14142: LD_INT 22
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 23
14154: PUSH
14155: LD_INT 1
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 69
14170: PUSH
14171: FOR_IN
14172: IFFALSE 14188
// SetLives ( i , 1000 ) ;
14174: LD_VAR 0 1
14178: PPUSH
14179: LD_INT 1000
14181: PPUSH
14182: CALL_OW 234
14186: GO 14171
14188: POP
14189: POP
// end ;
14190: PPOPN 2
14192: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14193: LD_EXP 30
14197: NOT
14198: PUSH
14199: LD_EXP 6
14203: AND
14204: IFFALSE 14635
14206: GO 14208
14208: DISABLE
14209: LD_INT 0
14211: PPUSH
14212: PPUSH
// begin tmp := [ ] ;
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: EMPTY
14219: ST_TO_ADDR
// uc_side := 3 ;
14220: LD_ADDR_OWVAR 20
14224: PUSH
14225: LD_INT 3
14227: ST_TO_ADDR
// uc_nation := 3 ;
14228: LD_ADDR_OWVAR 21
14232: PUSH
14233: LD_INT 3
14235: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14236: LD_INT 1
14238: PPUSH
14239: LD_INT 8
14241: PPUSH
14242: CALL_OW 381
// un := CreateHuman ;
14246: LD_ADDR_VAR 0 1
14250: PUSH
14251: CALL_OW 44
14255: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14256: LD_VAR 0 1
14260: PPUSH
14261: LD_INT 173
14263: PPUSH
14264: LD_INT 104
14266: PPUSH
14267: LD_INT 0
14269: PPUSH
14270: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14274: LD_ADDR_VAR 0 2
14278: PUSH
14279: LD_VAR 0 2
14283: PPUSH
14284: LD_VAR 0 1
14288: PPUSH
14289: CALL 66300 0 2
14293: ST_TO_ADDR
// un := CreateHuman ;
14294: LD_ADDR_VAR 0 1
14298: PUSH
14299: CALL_OW 44
14303: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14304: LD_VAR 0 1
14308: PPUSH
14309: LD_INT 73
14311: PPUSH
14312: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14316: LD_ADDR_VAR 0 2
14320: PUSH
14321: LD_VAR 0 2
14325: PPUSH
14326: LD_VAR 0 1
14330: PPUSH
14331: CALL 66300 0 2
14335: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14336: LD_INT 35
14338: PPUSH
14339: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
14343: LD_EXP 50
14347: PPUSH
14348: CALL_OW 255
14352: PUSH
14353: LD_INT 2
14355: EQUAL
14356: PUSH
14357: LD_EXP 50
14361: PPUSH
14362: LD_INT 73
14364: PPUSH
14365: CALL_OW 296
14369: PUSH
14370: LD_INT 8
14372: LESS
14373: AND
14374: PUSH
14375: LD_VAR 0 2
14379: PPUSH
14380: LD_INT 101
14382: PUSH
14383: LD_INT 2
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PPUSH
14390: CALL_OW 72
14394: AND
14395: IFFALSE 14336
// InGameOn ;
14397: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14401: LD_INT 73
14403: PPUSH
14404: CALL_OW 250
14408: PPUSH
14409: LD_INT 73
14411: PPUSH
14412: CALL_OW 251
14416: PPUSH
14417: LD_INT 2
14419: PPUSH
14420: LD_INT 9
14422: NEG
14423: PPUSH
14424: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14428: LD_INT 73
14430: PPUSH
14431: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14435: LD_EXP 50
14439: PPUSH
14440: LD_INT 73
14442: PPUSH
14443: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14447: LD_EXP 50
14451: PPUSH
14452: LD_STRING DK-Plastic-1
14454: PPUSH
14455: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14459: LD_EXP 50
14463: PPUSH
14464: LD_STRING DK-Plastic-2
14466: PPUSH
14467: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14471: LD_EXP 50
14475: PPUSH
14476: LD_INT 73
14478: PPUSH
14479: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14483: LD_INT 35
14485: PPUSH
14486: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14490: LD_EXP 50
14494: PPUSH
14495: LD_INT 73
14497: PPUSH
14498: CALL_OW 296
14502: PUSH
14503: LD_INT 6
14505: LESS
14506: IFFALSE 14483
// ComHold ( Kaia ) ;
14508: LD_EXP 50
14512: PPUSH
14513: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14517: LD_VAR 0 2
14521: PUSH
14522: LD_INT 1
14524: ARRAY
14525: PPUSH
14526: LD_STRING DRum-Plastic-3
14528: PPUSH
14529: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14533: LD_VAR 0 2
14537: PUSH
14538: LD_INT 2
14540: ARRAY
14541: PPUSH
14542: LD_STRING DRum2-Plastic-4
14544: PPUSH
14545: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14549: LD_VAR 0 2
14553: PUSH
14554: LD_INT 1
14556: ARRAY
14557: PPUSH
14558: LD_STRING DRum-Plastic-5
14560: PPUSH
14561: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14565: LD_VAR 0 2
14569: PUSH
14570: LD_INT 2
14572: ARRAY
14573: PPUSH
14574: LD_STRING DRum2-Plastic-6
14576: PPUSH
14577: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14581: LD_EXP 50
14585: PPUSH
14586: LD_STRING DK-Plastic-7
14588: PPUSH
14589: CALL_OW 88
// InGameOff ;
14593: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14597: LD_INT 73
14599: PPUSH
14600: CALL_OW 250
14604: PPUSH
14605: LD_INT 73
14607: PPUSH
14608: CALL_OW 251
14612: PPUSH
14613: LD_INT 2
14615: PPUSH
14616: CALL_OW 331
// explosionsTakenByRussians := true ;
14620: LD_ADDR_EXP 21
14624: PUSH
14625: LD_INT 1
14627: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14628: LD_STRING ExplosivesInfo
14630: PPUSH
14631: CALL_OW 97
// end ;
14635: PPOPN 2
14637: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14638: LD_EXP 21
14642: PUSH
14643: LD_EXP 50
14647: PPUSH
14648: CALL_OW 255
14652: PUSH
14653: LD_INT 2
14655: EQUAL
14656: AND
14657: PUSH
14658: LD_EXP 50
14662: PPUSH
14663: LD_INT 61
14665: PPUSH
14666: CALL 19964 0 2
14670: AND
14671: PUSH
14672: LD_EXP 17
14676: NOT
14677: AND
14678: PUSH
14679: LD_EXP 30
14683: NOT
14684: AND
14685: IFFALSE 14841
14687: GO 14689
14689: DISABLE
// begin InGameOn ;
14690: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14694: LD_INT 61
14696: PPUSH
14697: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14701: LD_EXP 50
14705: PPUSH
14706: LD_INT 3
14708: PPUSH
14709: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14713: LD_EXP 50
14717: PPUSH
14718: LD_INT 61
14720: PPUSH
14721: CALL_OW 120
// wait ( 0 0$2 ) ;
14725: LD_INT 70
14727: PPUSH
14728: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14732: LD_EXP 50
14736: PPUSH
14737: LD_STRING DK-Plastic-8
14739: PPUSH
14740: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14744: LD_EXP 66
14748: PUSH
14749: LD_INT 1
14751: ARRAY
14752: PPUSH
14753: LD_STRING DRuMch-Plastic-9
14755: PPUSH
14756: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14760: LD_EXP 50
14764: PPUSH
14765: LD_STRING DK-Plastic-10
14767: PPUSH
14768: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14772: LD_EXP 66
14776: PUSH
14777: LD_INT 1
14779: ARRAY
14780: PPUSH
14781: LD_STRING DRuMch-Plastic-a-11
14783: PPUSH
14784: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14788: LD_EXP 50
14792: PPUSH
14793: LD_STRING DK-Plastic-a-12
14795: PPUSH
14796: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14800: LD_EXP 66
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: PPUSH
14809: LD_STRING DRuMch-Plastic-a-13
14811: PPUSH
14812: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14816: LD_EXP 50
14820: PPUSH
14821: LD_INT 2
14823: PPUSH
14824: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14828: LD_EXP 50
14832: PPUSH
14833: CALL_OW 122
// InGameOff ;
14837: CALL_OW 9
// end ;
14841: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14842: LD_EXP 21
14846: PUSH
14847: LD_EXP 50
14851: PPUSH
14852: CALL_OW 255
14856: PUSH
14857: LD_INT 2
14859: EQUAL
14860: AND
14861: PUSH
14862: LD_EXP 50
14866: PPUSH
14867: LD_INT 196
14869: PPUSH
14870: CALL 19964 0 2
14874: AND
14875: PUSH
14876: LD_EXP 17
14880: NOT
14881: AND
14882: PUSH
14883: LD_EXP 30
14887: NOT
14888: AND
14889: IFFALSE 15228
14891: GO 14893
14893: DISABLE
// begin InGameOn ;
14894: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14898: LD_INT 196
14900: PPUSH
14901: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14905: LD_EXP 50
14909: PPUSH
14910: LD_INT 3
14912: PPUSH
14913: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14917: LD_EXP 50
14921: PPUSH
14922: LD_INT 196
14924: PPUSH
14925: CALL_OW 120
// wait ( 0 0$2 ) ;
14929: LD_INT 70
14931: PPUSH
14932: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14936: LD_EXP 50
14940: PPUSH
14941: LD_STRING DK-Plastic-8
14943: PPUSH
14944: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14948: LD_EXP 67
14952: PUSH
14953: LD_INT 1
14955: ARRAY
14956: PPUSH
14957: LD_STRING DRuMch-Plastic-9
14959: PPUSH
14960: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14964: LD_EXP 50
14968: PPUSH
14969: LD_STRING DK-Plastic-10
14971: PPUSH
14972: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14976: LD_EXP 67
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: LD_STRING DRuMch-Plastic-11
14987: PPUSH
14988: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14992: LD_EXP 50
14996: PPUSH
14997: LD_STRING DK-Plastic-12
14999: PPUSH
15000: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15004: LD_EXP 50
15008: PPUSH
15009: LD_STRING DK-Plastic-13
15011: PPUSH
15012: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15016: LD_EXP 67
15020: PUSH
15021: LD_INT 1
15023: ARRAY
15024: PPUSH
15025: LD_STRING DRuMch-Plastic-14
15027: PPUSH
15028: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15032: LD_EXP 68
15036: PPUSH
15037: LD_INT 167
15039: PPUSH
15040: LD_INT 34
15042: PPUSH
15043: LD_INT 3
15045: PPUSH
15046: LD_INT 0
15048: PPUSH
15049: CALL 68440 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15053: LD_EXP 68
15057: PPUSH
15058: LD_INT 196
15060: PPUSH
15061: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15065: LD_INT 35
15067: PPUSH
15068: CALL_OW 67
// if not HasTask ( Stiopa ) then
15072: LD_EXP 68
15076: PPUSH
15077: CALL_OW 314
15081: NOT
15082: IFFALSE 15096
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15084: LD_EXP 68
15088: PPUSH
15089: LD_INT 196
15091: PPUSH
15092: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15096: LD_EXP 68
15100: PPUSH
15101: CALL_OW 310
15105: IFFALSE 15065
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15107: LD_EXP 68
15111: PPUSH
15112: LD_STRING DSpn-Plastic-15
15114: PPUSH
15115: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15119: LD_EXP 69
15123: PPUSH
15124: LD_STRING DLr-Plastic-16
15126: PPUSH
15127: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15131: LD_EXP 50
15135: PPUSH
15136: LD_STRING DK-Plastic-17
15138: PPUSH
15139: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15143: LD_INT 10
15145: PPUSH
15146: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15150: LD_INT 196
15152: PPUSH
15153: CALL 19690 0 1
// SetSide ( Kaia , 2 ) ;
15157: LD_EXP 50
15161: PPUSH
15162: LD_INT 2
15164: PPUSH
15165: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15169: LD_EXP 50
15173: PPUSH
15174: CALL_OW 122
// InGameOff ;
15178: CALL_OW 9
// explosionsTakenByRussians := false ;
15182: LD_ADDR_EXP 21
15186: PUSH
15187: LD_INT 0
15189: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15190: LD_INT 170
15192: PPUSH
15193: LD_INT 28
15195: PPUSH
15196: LD_INT 2
15198: PPUSH
15199: LD_INT 6
15201: NEG
15202: PPUSH
15203: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15207: LD_INT 170
15209: PPUSH
15210: LD_INT 28
15212: PPUSH
15213: LD_INT 2
15215: PPUSH
15216: CALL_OW 331
// knowWhereExplosivesAre := true ;
15220: LD_ADDR_EXP 34
15224: PUSH
15225: LD_INT 1
15227: ST_TO_ADDR
// end ;
15228: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15229: LD_EXP 34
15233: PUSH
15234: LD_EXP 50
15238: PPUSH
15239: CALL_OW 255
15243: PUSH
15244: LD_INT 2
15246: EQUAL
15247: AND
15248: PUSH
15249: LD_EXP 50
15253: PPUSH
15254: LD_INT 195
15256: PPUSH
15257: CALL 19964 0 2
15261: AND
15262: PUSH
15263: LD_EXP 17
15267: NOT
15268: AND
15269: PUSH
15270: LD_EXP 30
15274: NOT
15275: AND
15276: IFFALSE 15382
15278: GO 15280
15280: DISABLE
// begin InGameOn ;
15281: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15285: LD_EXP 50
15289: PPUSH
15290: LD_INT 3
15292: PPUSH
15293: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15297: LD_EXP 50
15301: PPUSH
15302: LD_INT 195
15304: PPUSH
15305: CALL_OW 120
// wait ( 0 0$1 ) ;
15309: LD_INT 35
15311: PPUSH
15312: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15316: LD_EXP 50
15320: PPUSH
15321: LD_STRING DK-Plastic-18
15323: PPUSH
15324: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15328: LD_STRING ExplosivesInfoUsage
15330: PPUSH
15331: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15335: LD_INT 195
15337: PPUSH
15338: CALL 19690 0 1
// SetSide ( Kaia , 2 ) ;
15342: LD_EXP 50
15346: PPUSH
15347: LD_INT 2
15349: PPUSH
15350: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15354: LD_EXP 50
15358: PPUSH
15359: CALL_OW 122
// InGameOff ;
15363: CALL_OW 9
// hasExplosionCollected := true ;
15367: LD_ADDR_EXP 23
15371: PUSH
15372: LD_INT 1
15374: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15375: LD_STRING M1-explosive-out
15377: PPUSH
15378: CALL_OW 337
// end ;
15382: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15383: LD_EXP 23
15387: PUSH
15388: LD_EXP 17
15392: NOT
15393: AND
15394: PUSH
15395: LD_EXP 30
15399: NOT
15400: AND
15401: IFFALSE 15576
15403: GO 15405
15405: DISABLE
15406: LD_INT 0
15408: PPUSH
15409: PPUSH
// begin for i in importantBuildingsList do
15410: LD_ADDR_VAR 0 1
15414: PUSH
15415: LD_EXP 35
15419: PUSH
15420: FOR_IN
15421: IFFALSE 15437
// MarkBuilding ( i , true ) ;
15423: LD_VAR 0 1
15427: PPUSH
15428: LD_INT 1
15430: PPUSH
15431: CALL 20338 0 2
15435: GO 15420
15437: POP
15438: POP
// repeat wait ( 0 0$1 ) ;
15439: LD_INT 35
15441: PPUSH
15442: CALL_OW 67
// for i in importantBuildingsList do
15446: LD_ADDR_VAR 0 1
15450: PUSH
15451: LD_EXP 35
15455: PUSH
15456: FOR_IN
15457: IFFALSE 15567
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15459: LD_EXP 45
15463: PUSH
15464: LD_EXP 14
15468: UNION
15469: PPUSH
15470: LD_INT 22
15472: PUSH
15473: LD_INT 2
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 21
15482: PUSH
15483: LD_INT 1
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 91
15492: PUSH
15493: LD_VAR 0 1
15497: PUSH
15498: LD_INT 6
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 72
15515: IFFALSE 15565
// begin CenterNowOnUnits ( i ) ;
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 87
// PlaceExplosives ( i ) ;
15526: LD_VAR 0 1
15530: PPUSH
15531: CALL 20235 0 1
// MarkBuilding ( i , false ) ;
15535: LD_VAR 0 1
15539: PPUSH
15540: LD_INT 0
15542: PPUSH
15543: CALL 20338 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15547: LD_ADDR_EXP 35
15551: PUSH
15552: LD_EXP 35
15556: PUSH
15557: LD_VAR 0 1
15561: DIFF
15562: ST_TO_ADDR
// continue ;
15563: GO 15456
// end ; end ;
15565: GO 15456
15567: POP
15568: POP
// until not importantBuildingsList ;
15569: LD_EXP 35
15573: NOT
15574: IFFALSE 15439
// end ;
15576: PPOPN 2
15578: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15579: LD_EXP 14
15583: PPUSH
15584: LD_INT 22
15586: PUSH
15587: LD_INT 2
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 95
15596: PUSH
15597: LD_INT 23
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PPUSH
15608: CALL_OW 72
15612: PUSH
15613: LD_EXP 45
15617: PPUSH
15618: CALL_OW 302
15622: AND
15623: PUSH
15624: LD_EXP 30
15628: NOT
15629: AND
15630: IFFALSE 15658
15632: GO 15634
15634: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15635: LD_EXP 45
15639: PPUSH
15640: LD_STRING DH-End-1
15642: PPUSH
15643: CALL_OW 88
// if not activeExplosives then
15647: LD_EXP 36
15651: NOT
15652: IFFALSE 15658
// Explode ;
15654: CALL 23097 0 0
// end ;
15658: END
// function SayHEmpty ( ) ; begin
15659: LD_INT 0
15661: PPUSH
// case rand ( 1 , 3 ) of 1 :
15662: LD_INT 1
15664: PPUSH
15665: LD_INT 3
15667: PPUSH
15668: CALL_OW 12
15672: PUSH
15673: LD_INT 1
15675: DOUBLE
15676: EQUAL
15677: IFTRUE 15681
15679: GO 15696
15681: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15682: LD_EXP 45
15686: PPUSH
15687: LD_STRING DH-Empty-1
15689: PPUSH
15690: CALL_OW 88
15694: GO 15743
15696: LD_INT 2
15698: DOUBLE
15699: EQUAL
15700: IFTRUE 15704
15702: GO 15719
15704: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15705: LD_EXP 45
15709: PPUSH
15710: LD_STRING DH-Empty-2
15712: PPUSH
15713: CALL_OW 88
15717: GO 15743
15719: LD_INT 3
15721: DOUBLE
15722: EQUAL
15723: IFTRUE 15727
15725: GO 15742
15727: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15728: LD_EXP 45
15732: PPUSH
15733: LD_STRING DH-Empty-3
15735: PPUSH
15736: CALL_OW 88
15740: GO 15743
15742: POP
// end ;
15743: LD_VAR 0 1
15747: RET
// function SayHVisited ( ) ; begin
15748: LD_INT 0
15750: PPUSH
// case rand ( 1 , 3 ) of 1 :
15751: LD_INT 1
15753: PPUSH
15754: LD_INT 3
15756: PPUSH
15757: CALL_OW 12
15761: PUSH
15762: LD_INT 1
15764: DOUBLE
15765: EQUAL
15766: IFTRUE 15770
15768: GO 15785
15770: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15771: LD_EXP 45
15775: PPUSH
15776: LD_STRING DH-Visited-1
15778: PPUSH
15779: CALL_OW 88
15783: GO 15832
15785: LD_INT 2
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 15808
15793: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15794: LD_EXP 45
15798: PPUSH
15799: LD_STRING DH-Visited-2
15801: PPUSH
15802: CALL_OW 88
15806: GO 15832
15808: LD_INT 3
15810: DOUBLE
15811: EQUAL
15812: IFTRUE 15816
15814: GO 15831
15816: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15817: LD_EXP 45
15821: PPUSH
15822: LD_STRING DH-Visited-3
15824: PPUSH
15825: CALL_OW 88
15829: GO 15832
15831: POP
// end ;
15832: LD_VAR 0 1
15836: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15837: LD_EXP 17
15841: NOT
15842: PUSH
15843: LD_EXP 15
15847: AND
15848: PUSH
15849: LD_EXP 45
15853: PPUSH
15854: CALL_OW 255
15858: PUSH
15859: LD_INT 2
15861: EQUAL
15862: AND
15863: PUSH
15864: LD_EXP 45
15868: PPUSH
15869: CALL_OW 302
15873: AND
15874: PUSH
15875: LD_EXP 45
15879: PPUSH
15880: CALL_OW 316
15884: AND
15885: PUSH
15886: LD_EXP 30
15890: NOT
15891: AND
15892: IFFALSE 15958
15894: GO 15896
15896: DISABLE
15897: LD_INT 0
15899: PPUSH
// begin enable ;
15900: ENABLE
// for i in entranceAllowedList do
15901: LD_ADDR_VAR 0 1
15905: PUSH
15906: LD_EXP 15
15910: PUSH
15911: FOR_IN
15912: IFFALSE 15956
// if InEntrance ( Heike , i ) then
15914: LD_EXP 45
15918: PPUSH
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL 19964 0 2
15928: IFFALSE 15954
// begin disable ( entranceEvent ) ;
15930: LD_INT 1
15932: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL 15961 0 1
// wait ( 0 0$3 ) ;
15942: LD_INT 105
15944: PPUSH
15945: CALL_OW 67
// enable ( entranceEvent ) ;
15949: LD_INT 1
15951: ENABLE_MARKED
// break ;
15952: GO 15956
// end ;
15954: GO 15911
15956: POP
15957: POP
// end ;
15958: PPOPN 1
15960: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
// if not building then
15967: LD_VAR 0 1
15971: NOT
15972: IFFALSE 15976
// exit ;
15974: GO 18601
// if building in entranceVisitedList then
15976: LD_VAR 0 1
15980: PUSH
15981: LD_EXP 16
15985: IN
15986: IFFALSE 15994
// begin SayHVisited ( ) ;
15988: CALL 15748 0 0
// exit ;
15992: GO 18601
// end ; case Query ( EnterBuilding ) of 1 :
15994: LD_STRING EnterBuilding
15996: PPUSH
15997: CALL_OW 97
16001: PUSH
16002: LD_INT 1
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 16013
16010: POP
// ; 2 :
16011: GO 16027
16013: LD_INT 2
16015: DOUBLE
16016: EQUAL
16017: IFTRUE 16021
16019: GO 16026
16021: POP
// exit ; end ;
16022: GO 18601
16024: GO 16027
16026: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16027: LD_ADDR_EXP 16
16031: PUSH
16032: LD_EXP 16
16036: PPUSH
16037: LD_VAR 0 1
16041: PPUSH
16042: CALL 66300 0 2
16046: ST_TO_ADDR
// InGameOn ;
16047: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16051: LD_EXP 45
16055: PPUSH
16056: LD_INT 5
16058: PPUSH
16059: CALL_OW 235
// SetSide ( building , 5 ) ;
16063: LD_VAR 0 1
16067: PPUSH
16068: LD_INT 5
16070: PPUSH
16071: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16075: LD_EXP 45
16079: PPUSH
16080: LD_VAR 0 1
16084: PPUSH
16085: CALL_OW 120
// wait ( 0 0$3 ) ;
16089: LD_INT 105
16091: PPUSH
16092: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16096: LD_ADDR_VAR 0 4
16100: PUSH
16101: LD_INT 165
16103: PUSH
16104: LD_INT 106
16106: PUSH
16107: LD_INT 135
16109: PUSH
16110: LD_INT 162
16112: PUSH
16113: LD_INT 61
16115: PUSH
16116: LD_INT 109
16118: PUSH
16119: LD_INT 169
16121: PUSH
16122: LD_INT 13
16124: PUSH
16125: LD_INT 147
16127: PUSH
16128: LD_INT 137
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: ST_TO_ADDR
// if not building in tmp then
16143: LD_VAR 0 1
16147: PUSH
16148: LD_VAR 0 4
16152: IN
16153: NOT
16154: IFFALSE 16162
// SayHEmpty ( ) else
16156: CALL 15659 0 0
16160: GO 18548
// case building of laundry :
16162: LD_VAR 0 1
16166: PUSH
16167: LD_INT 165
16169: DOUBLE
16170: EQUAL
16171: IFTRUE 16175
16173: GO 16279
16175: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16176: LD_EXP 26
16180: PUSH
16181: LD_EXP 27
16185: NOT
16186: AND
16187: PUSH
16188: LD_EXP 28
16192: NOT
16193: AND
16194: IFFALSE 16249
// begin case Query ( HeikeInLaundry ) of 1 :
16196: LD_STRING HeikeInLaundry
16198: PPUSH
16199: CALL_OW 97
16203: PUSH
16204: LD_INT 1
16206: DOUBLE
16207: EQUAL
16208: IFTRUE 16212
16210: GO 16219
16212: POP
// SpawnHeikeAsRussian ; 2 :
16213: CALL 1802 0 0
16217: GO 16247
16219: LD_INT 2
16221: DOUBLE
16222: EQUAL
16223: IFTRUE 16227
16225: GO 16246
16227: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16228: LD_ADDR_EXP 16
16232: PUSH
16233: LD_EXP 16
16237: PUSH
16238: LD_VAR 0 1
16242: DIFF
16243: ST_TO_ADDR
16244: GO 16247
16246: POP
// end else
16247: GO 16277
// begin entranceVisitedList := entranceVisitedList diff building ;
16249: LD_ADDR_EXP 16
16253: PUSH
16254: LD_EXP 16
16258: PUSH
16259: LD_VAR 0 1
16263: DIFF
16264: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16265: LD_EXP 45
16269: PPUSH
16270: LD_STRING DH-Locked
16272: PPUSH
16273: CALL_OW 88
// end ; end ; dougBar :
16277: GO 18548
16279: LD_INT 106
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 16649
16287: POP
// begin if contactWithAmerican and americanContact then
16288: LD_EXP 25
16292: PUSH
16293: LD_EXP 10
16297: AND
16298: IFFALSE 16362
// begin Say ( Heike , DH-Escort-a-1 ) ;
16300: LD_EXP 45
16304: PPUSH
16305: LD_STRING DH-Escort-a-1
16307: PPUSH
16308: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16312: LD_EXP 59
16316: PPUSH
16317: LD_STRING DCa-Escort-a-2
16319: PPUSH
16320: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16324: LD_EXP 59
16328: PPUSH
16329: LD_STRING DCa-Escort-a-3
16331: PPUSH
16332: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16336: LD_EXP 45
16340: PPUSH
16341: LD_STRING DH-Escort-a-4
16343: PPUSH
16344: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16348: LD_EXP 45
16352: PPUSH
16353: LD_STRING DH-Escort-a-5
16355: PPUSH
16356: CALL_OW 88
// end else
16360: GO 16606
// if contactWithAmerican then
16362: LD_EXP 25
16366: IFFALSE 16406
// begin Say ( Heike , DH-Escort-b-1 ) ;
16368: LD_EXP 45
16372: PPUSH
16373: LD_STRING DH-Escort-b-1
16375: PPUSH
16376: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16380: LD_EXP 59
16384: PPUSH
16385: LD_STRING DCa-Escort-b-2
16387: PPUSH
16388: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16392: LD_EXP 59
16396: PPUSH
16397: LD_STRING DCa-Escort-b-3
16399: PPUSH
16400: CALL_OW 88
// end else
16404: GO 16606
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16406: LD_EXP 59
16410: PPUSH
16411: LD_STRING DCa-Deal-a-1
16413: PPUSH
16414: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16418: LD_EXP 59
16422: PPUSH
16423: LD_STRING DCa-Deal-a-2
16425: PPUSH
16426: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16430: LD_EXP 45
16434: PPUSH
16435: LD_STRING DH-Deal-a-3
16437: PPUSH
16438: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16442: LD_EXP 59
16446: PPUSH
16447: LD_STRING DCa-Deal-a-4
16449: PPUSH
16450: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16454: LD_EXP 45
16458: PPUSH
16459: LD_STRING DH-Deal-a-5
16461: PPUSH
16462: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16466: LD_EXP 59
16470: PPUSH
16471: LD_STRING DCa-Deal-a-6
16473: PPUSH
16474: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16478: LD_EXP 59
16482: PPUSH
16483: LD_STRING DCa-Deal-a-7
16485: PPUSH
16486: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16490: LD_EXP 59
16494: PPUSH
16495: LD_STRING DCa-Deal-a-8
16497: PPUSH
16498: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16502: LD_EXP 59
16506: PPUSH
16507: LD_STRING DCa-Deal-a-9
16509: PPUSH
16510: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16514: LD_EXP 59
16518: PPUSH
16519: LD_STRING DCa-Deal-a-10
16521: PPUSH
16522: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16526: LD_EXP 59
16530: PPUSH
16531: LD_STRING DCa-Deal-a-11
16533: PPUSH
16534: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16538: LD_INT 10
16540: PPUSH
16541: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16545: LD_EXP 59
16549: PPUSH
16550: LD_STRING DCa-Deal-a-12
16552: PPUSH
16553: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16557: LD_EXP 45
16561: PPUSH
16562: LD_STRING DH-Deal-a-13
16564: PPUSH
16565: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16569: LD_EXP 45
16573: PPUSH
16574: LD_STRING DH-Deal-a-14
16576: PPUSH
16577: CALL_OW 88
// contactWithAmerican := true ;
16581: LD_ADDR_EXP 25
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16589: LD_INT 1
16591: PPUSH
16592: LD_STRING 08_DealWithDoug
16594: PPUSH
16595: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16599: LD_STRING M1-american-out
16601: PPUSH
16602: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16606: LD_EXP 59
16610: PPUSH
16611: LD_INT 2
16613: PPUSH
16614: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16618: LD_ADDR_EXP 14
16622: PUSH
16623: LD_EXP 14
16627: PPUSH
16628: LD_EXP 59
16632: PPUSH
16633: CALL 66300 0 2
16637: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16638: LD_EXP 59
16642: PPUSH
16643: CALL_OW 122
// end ; usLab :
16647: GO 18548
16649: LD_INT 135
16651: DOUBLE
16652: EQUAL
16653: IFTRUE 16657
16655: GO 16976
16657: POP
// begin if hasSniperRifle then
16658: LD_EXP 11
16662: IFFALSE 16974
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16664: LD_EXP 50
16668: PPUSH
16669: CALL_OW 302
16673: PUSH
16674: LD_EXP 50
16678: PUSH
16679: LD_EXP 14
16683: IN
16684: AND
16685: PUSH
16686: LD_EXP 50
16690: PPUSH
16691: CALL_OW 255
16695: PUSH
16696: LD_INT 2
16698: EQUAL
16699: AND
16700: IFFALSE 16948
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16702: LD_EXP 45
16706: PPUSH
16707: LD_EXP 50
16711: PPUSH
16712: CALL_OW 296
16716: PUSH
16717: LD_INT 10
16719: GREATER
16720: IFFALSE 16745
// begin Query ( KaiaDistance ) ;
16722: LD_STRING KaiaDistance
16724: PPUSH
16725: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16729: LD_ADDR_EXP 16
16733: PUSH
16734: LD_EXP 16
16738: PUSH
16739: LD_INT 135
16741: DIFF
16742: ST_TO_ADDR
// end else
16743: GO 16946
// begin SetSide ( Kaia , 5 ) ;
16745: LD_EXP 50
16749: PPUSH
16750: LD_INT 5
16752: PPUSH
16753: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16757: LD_EXP 50
16761: PPUSH
16762: LD_INT 135
16764: PPUSH
16765: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16769: LD_INT 35
16771: PPUSH
16772: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16776: LD_EXP 50
16780: PPUSH
16781: CALL_OW 310
16785: IFFALSE 16769
// Say ( Kaia , DK-Sniper-1 ) ;
16787: LD_EXP 50
16791: PPUSH
16792: LD_STRING DK-Sniper-1
16794: PPUSH
16795: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16799: LD_EXP 50
16803: PPUSH
16804: CALL_OW 257
16808: PUSH
16809: LD_INT 34
16811: EQUAL
16812: PUSH
16813: LD_EXP 47
16817: PUSH
16818: LD_EXP 14
16822: IN
16823: AND
16824: PUSH
16825: LD_EXP 47
16829: PPUSH
16830: CALL_OW 302
16834: AND
16835: IFFALSE 16866
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16837: LD_EXP 50
16841: PPUSH
16842: LD_STRING DK-Sniper-a-2
16844: PPUSH
16845: CALL_OW 88
// giveSniperRifleToMike := true ;
16849: LD_ADDR_EXP 42
16853: PUSH
16854: LD_INT 1
16856: ST_TO_ADDR
// Query ( QSniperMike ) ;
16857: LD_STRING QSniperMike
16859: PPUSH
16860: CALL_OW 97
// end else
16864: GO 16925
// begin Say ( Kaia , DK-Sniper-2 ) ;
16866: LD_EXP 50
16870: PPUSH
16871: LD_STRING DK-Sniper-2
16873: PPUSH
16874: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16878: LD_EXP 50
16882: PPUSH
16883: LD_INT 32
16885: PPUSH
16886: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16890: LD_EXP 52
16894: PPUSH
16895: CALL_OW 302
16899: PUSH
16900: LD_EXP 52
16904: PUSH
16905: LD_EXP 14
16909: IN
16910: AND
16911: IFFALSE 16925
// Say ( Markov , DMar-Sniper-3 ) ;
16913: LD_EXP 52
16917: PPUSH
16918: LD_STRING DMar-Sniper-3
16920: PPUSH
16921: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16925: LD_EXP 50
16929: PPUSH
16930: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16934: LD_EXP 50
16938: PPUSH
16939: LD_INT 2
16941: PPUSH
16942: CALL_OW 235
// end ; end else
16946: GO 16974
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16948: LD_ADDR_EXP 16
16952: PUSH
16953: LD_EXP 16
16957: PUSH
16958: LD_INT 135
16960: DIFF
16961: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16962: LD_EXP 45
16966: PPUSH
16967: LD_STRING DH-Locked
16969: PPUSH
16970: CALL_OW 88
// end ; end ; end ; drugsLab :
16974: GO 18548
16976: LD_INT 162
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17117
16984: POP
// begin if hasStimDrugs then
16985: LD_EXP 9
16989: IFFALSE 17103
// begin wait ( 0 0$1 ) ;
16991: LD_INT 35
16993: PPUSH
16994: CALL_OW 67
// if not hasStimDrugsCollected then
16998: LD_EXP 24
17002: NOT
17003: IFFALSE 17045
// begin Say ( Heike , DH-Lab-1 ) ;
17005: LD_EXP 45
17009: PPUSH
17010: LD_STRING DH-Lab-1
17012: PPUSH
17013: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17017: LD_INT 5
17019: PPUSH
17020: LD_INT 2
17022: PPUSH
17023: LD_INT 2
17025: PPUSH
17026: CALL_OW 322
// hasStimDrugsCollected := true ;
17030: LD_ADDR_EXP 24
17034: PUSH
17035: LD_INT 1
17037: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17038: LD_STRING M1-drugs-out
17040: PPUSH
17041: CALL_OW 604
// end ; if not hasExplosionCollected then
17045: LD_EXP 23
17049: NOT
17050: IFFALSE 17068
// entranceVisitedList := entranceVisitedList diff drugsLab else
17052: LD_ADDR_EXP 16
17056: PUSH
17057: LD_EXP 16
17061: PUSH
17062: LD_INT 162
17064: DIFF
17065: ST_TO_ADDR
17066: GO 17101
// begin wait ( 0 0$3 ) ;
17068: LD_INT 105
17070: PPUSH
17071: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17075: LD_EXP 45
17079: PPUSH
17080: LD_STRING DH-Lab-2
17082: PPUSH
17083: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17087: LD_STRING M1-drugsLab-out
17089: PPUSH
17090: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17094: LD_INT 162
17096: PPUSH
17097: CALL 20235 0 1
// end ; end else
17101: GO 17115
// Say ( Heike , DH-Locked ) ;
17103: LD_EXP 45
17107: PPUSH
17108: LD_STRING DH-Locked
17110: PPUSH
17111: CALL_OW 88
// end ; ruFac :
17115: GO 18548
17117: LD_INT 61
17119: DOUBLE
17120: EQUAL
17121: IFTRUE 17125
17123: GO 17235
17125: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17126: LD_EXP 52
17130: PPUSH
17131: CALL_OW 302
17135: PUSH
17136: LD_EXP 52
17140: PUSH
17141: LD_EXP 14
17145: IN
17146: NOT
17147: AND
17148: IFFALSE 17229
// begin Say ( Heike , DH-Krastyo-1 ) ;
17150: LD_EXP 45
17154: PPUSH
17155: LD_STRING DH-Krastyo-1
17157: PPUSH
17158: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17162: LD_EXP 52
17166: PPUSH
17167: LD_STRING DMar-Krastyo-2
17169: PPUSH
17170: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17174: LD_EXP 52
17178: PPUSH
17179: LD_STRING DMar-Krastyo-3
17181: PPUSH
17182: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17186: LD_EXP 52
17190: PPUSH
17191: LD_INT 2
17193: PPUSH
17194: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17198: LD_ADDR_EXP 14
17202: PUSH
17203: LD_EXP 14
17207: PPUSH
17208: LD_EXP 52
17212: PPUSH
17213: CALL 66300 0 2
17217: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17218: LD_EXP 52
17222: PPUSH
17223: CALL_OW 122
// end else
17227: GO 17233
// SayHEmpty ( ) ;
17229: CALL 15659 0 0
// end ; ruBarKam :
17233: GO 18548
17235: LD_INT 109
17237: DOUBLE
17238: EQUAL
17239: IFTRUE 17243
17241: GO 17390
17243: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17244: LD_EXP 49
17248: PPUSH
17249: CALL_OW 302
17253: PUSH
17254: LD_EXP 49
17258: PUSH
17259: LD_EXP 14
17263: IN
17264: NOT
17265: AND
17266: IFFALSE 17384
// begin Say ( Heike , DH-Kamil-1 ) ;
17268: LD_EXP 45
17272: PPUSH
17273: LD_STRING DH-Kamil-1
17275: PPUSH
17276: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17280: LD_EXP 49
17284: PPUSH
17285: LD_STRING DKam-Kamil-2
17287: PPUSH
17288: CALL_OW 88
// if IsOk ( Sophia ) then
17292: LD_EXP 51
17296: PPUSH
17297: CALL_OW 302
17301: IFFALSE 17341
// if Sophia in heikeSquad then
17303: LD_EXP 51
17307: PUSH
17308: LD_EXP 14
17312: IN
17313: IFFALSE 17329
// Say ( Kamil , DKam-Kamil-a-3 ) else
17315: LD_EXP 49
17319: PPUSH
17320: LD_STRING DKam-Kamil-a-3
17322: PPUSH
17323: CALL_OW 88
17327: GO 17341
// Say ( Kamil , DKam-Kamil-3 ) ;
17329: LD_EXP 49
17333: PPUSH
17334: LD_STRING DKam-Kamil-3
17336: PPUSH
17337: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17341: LD_EXP 49
17345: PPUSH
17346: LD_INT 2
17348: PPUSH
17349: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17353: LD_ADDR_EXP 14
17357: PUSH
17358: LD_EXP 14
17362: PPUSH
17363: LD_EXP 49
17367: PPUSH
17368: CALL 66300 0 2
17372: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17373: LD_EXP 49
17377: PPUSH
17378: CALL_OW 122
// end else
17382: GO 17388
// SayHEmpty ( ) ;
17384: CALL 15659 0 0
// end ; ruOutpost1 :
17388: GO 18548
17390: LD_INT 169
17392: DOUBLE
17393: EQUAL
17394: IFTRUE 17398
17396: GO 17635
17398: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17399: LD_EXP 54
17403: PPUSH
17404: CALL_OW 302
17408: PUSH
17409: LD_EXP 54
17413: PUSH
17414: LD_EXP 14
17418: IN
17419: NOT
17420: AND
17421: IFFALSE 17629
// begin if hasMethanol then
17423: LD_EXP 13
17427: IFFALSE 17558
// begin Say ( Heike , DH-Kurt-1 ) ;
17429: LD_EXP 45
17433: PPUSH
17434: LD_STRING DH-Kurt-1
17436: PPUSH
17437: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17441: LD_EXP 54
17445: PPUSH
17446: LD_STRING DKs-Kurt-2
17448: PPUSH
17449: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17453: LD_EXP 46
17457: PPUSH
17458: LD_INT 169
17460: PPUSH
17461: CALL_OW 296
17465: PUSH
17466: LD_INT 10
17468: LESS
17469: PUSH
17470: LD_EXP 46
17474: PUSH
17475: LD_EXP 14
17479: IN
17480: AND
17481: IFFALSE 17556
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17483: LD_EXP 46
17487: PPUSH
17488: LD_INT 100
17490: PPUSH
17491: LD_INT 37
17493: PPUSH
17494: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17498: LD_EXP 46
17502: PPUSH
17503: LD_INT 169
17505: PPUSH
17506: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17510: LD_INT 35
17512: PPUSH
17513: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17517: LD_EXP 46
17521: PPUSH
17522: LD_INT 169
17524: PPUSH
17525: CALL_OW 296
17529: PUSH
17530: LD_INT 7
17532: LESS
17533: IFFALSE 17510
// Say ( Givi , DG-Kurt-3 ) ;
17535: LD_EXP 46
17539: PPUSH
17540: LD_STRING DG-Kurt-3
17542: PPUSH
17543: CALL_OW 88
// ComStop ( Givi ) ;
17547: LD_EXP 46
17551: PPUSH
17552: CALL_OW 141
// end ; end else
17556: GO 17586
// begin Say ( Heike , DH-Kurt-1 ) ;
17558: LD_EXP 45
17562: PPUSH
17563: LD_STRING DH-Kurt-1
17565: PPUSH
17566: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17570: LD_EXP 54
17574: PPUSH
17575: LD_STRING DKs-Kurt-2
17577: PPUSH
17578: CALL_OW 88
// SpawnAdditionalRuGuards ;
17582: CALL 3584 0 0
// end ; SetSide ( Kurt , 2 ) ;
17586: LD_EXP 54
17590: PPUSH
17591: LD_INT 2
17593: PPUSH
17594: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17598: LD_ADDR_EXP 14
17602: PUSH
17603: LD_EXP 14
17607: PPUSH
17608: LD_EXP 54
17612: PPUSH
17613: CALL 66300 0 2
17617: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17618: LD_EXP 54
17622: PPUSH
17623: CALL_OW 122
// end else
17627: GO 17633
// SayHEmpty ( ) ;
17629: CALL 15659 0 0
// end ; ruOutpostBar :
17633: GO 18548
17635: LD_INT 13
17637: DOUBLE
17638: EQUAL
17639: IFTRUE 17643
17641: GO 17689
17643: POP
// begin if not hasGuardPatrolPlan then
17644: LD_EXP 18
17648: NOT
17649: IFFALSE 17683
// begin Say ( Heike , DH-PatrolPlan ) ;
17651: LD_EXP 45
17655: PPUSH
17656: LD_STRING DH-PatrolPlan
17658: PPUSH
17659: CALL_OW 88
// hasGuardPatrolPlan := true ;
17663: LD_ADDR_EXP 18
17667: PUSH
17668: LD_INT 1
17670: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17671: LD_INT 6
17673: PPUSH
17674: LD_INT 2
17676: PPUSH
17677: CALL_OW 343
// end else
17681: GO 17687
// SayHEmpty ( ) ;
17683: CALL 15659 0 0
// end ; ruKaiaBar :
17687: GO 18548
17689: LD_INT 147
17691: DOUBLE
17692: EQUAL
17693: IFTRUE 17697
17695: GO 17844
17697: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17698: LD_EXP 50
17702: PPUSH
17703: CALL_OW 302
17707: PUSH
17708: LD_EXP 50
17712: PUSH
17713: LD_EXP 14
17717: IN
17718: NOT
17719: AND
17720: IFFALSE 17842
// begin Say ( Heike , DH-Kaia-1 ) ;
17722: LD_EXP 45
17726: PPUSH
17727: LD_STRING DH-Kaia-1
17729: PPUSH
17730: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17734: LD_EXP 50
17738: PPUSH
17739: LD_STRING DK-Kaia-2
17741: PPUSH
17742: CALL_OW 88
// if hasSniperRifle then
17746: LD_EXP 11
17750: IFFALSE 17801
// begin if IsOk ( Markov ) then
17752: LD_EXP 52
17756: PPUSH
17757: CALL_OW 302
17761: IFFALSE 17777
// Say ( Kaia , DK-Kaia-3 ) else
17763: LD_EXP 50
17767: PPUSH
17768: LD_STRING DK-Kaia-3
17770: PPUSH
17771: CALL_OW 88
17775: GO 17789
// Say ( Kaia , DK-Kaia-a-3 ) ;
17777: LD_EXP 50
17781: PPUSH
17782: LD_STRING DK-Kaia-a-3
17784: PPUSH
17785: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17789: LD_EXP 45
17793: PPUSH
17794: LD_STRING DH-Kaia-4
17796: PPUSH
17797: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17801: LD_EXP 50
17805: PPUSH
17806: LD_INT 2
17808: PPUSH
17809: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17813: LD_ADDR_EXP 14
17817: PUSH
17818: LD_EXP 14
17822: PPUSH
17823: LD_EXP 50
17827: PPUSH
17828: CALL 66300 0 2
17832: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17833: LD_EXP 50
17837: PPUSH
17838: CALL_OW 122
// end ; end ; ruWeaponsBar :
17842: GO 18548
17844: LD_INT 137
17846: DOUBLE
17847: EQUAL
17848: IFTRUE 17852
17850: GO 18547
17852: POP
// begin if hasWeapons then
17853: LD_EXP 19
17857: IFFALSE 18533
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17859: LD_ADDR_EXP 16
17863: PUSH
17864: LD_EXP 16
17868: PUSH
17869: LD_INT 137
17871: DIFF
17872: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17873: LD_ADDR_VAR 0 4
17877: PUSH
17878: LD_EXP 14
17882: PPUSH
17883: LD_INT 91
17885: PUSH
17886: LD_EXP 45
17890: PUSH
17891: LD_INT 8
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: PPUSH
17899: CALL_OW 72
17903: ST_TO_ADDR
// if not heikeSquad or not tmp then
17904: LD_EXP 14
17908: NOT
17909: PUSH
17910: LD_VAR 0 4
17914: NOT
17915: OR
17916: IFFALSE 17932
// Say ( Heike , DH-Weapons-Alone ) else
17918: LD_EXP 45
17922: PPUSH
17923: LD_STRING DH-Weapons-Alone
17925: PPUSH
17926: CALL_OW 88
17930: GO 18531
// begin if not firstArmouryDialog then
17932: LD_EXP 39
17936: NOT
17937: IFFALSE 17996
// begin Say ( Heike , DH-Weapons-1 ) ;
17939: LD_EXP 45
17943: PPUSH
17944: LD_STRING DH-Weapons-1
17946: PPUSH
17947: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17951: LD_EXP 45
17955: PPUSH
17956: LD_STRING DH-Weapons-2
17958: PPUSH
17959: CALL_OW 88
// Query ( Weapons ) ;
17963: LD_STRING Weapons
17965: PPUSH
17966: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
17970: LD_INT 65
17972: PPUSH
17973: LD_INT 1
17975: PPUSH
17976: CALL_OW 424
// canEquipWeapons := true ;
17980: LD_ADDR_EXP 41
17984: PUSH
17985: LD_INT 1
17987: ST_TO_ADDR
// firstArmouryDialog := true ;
17988: LD_ADDR_EXP 39
17992: PUSH
17993: LD_INT 1
17995: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
17996: LD_EXP 8
18000: PUSH
18001: LD_EXP 50
18005: PUSH
18006: LD_VAR 0 4
18010: IN
18011: AND
18012: PUSH
18013: LD_EXP 50
18017: PPUSH
18018: CALL_OW 257
18022: PUSH
18023: LD_INT 34
18025: NONEQUAL
18026: AND
18027: IFFALSE 18173
// begin SetSide ( Kaia , 5 ) ;
18029: LD_EXP 50
18033: PPUSH
18034: LD_INT 5
18036: PPUSH
18037: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18041: LD_EXP 50
18045: PPUSH
18046: LD_INT 137
18048: PPUSH
18049: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18053: LD_INT 35
18055: PPUSH
18056: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18060: LD_EXP 50
18064: PPUSH
18065: CALL_OW 310
18069: IFFALSE 18053
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18071: LD_EXP 45
18075: PPUSH
18076: LD_STRING DH-Kaia-Revolver-2
18078: PPUSH
18079: CALL_OW 88
// SetClassKaiaRevolver ;
18083: CALL 1761 0 0
// hasRevolver := false ;
18087: LD_ADDR_EXP 8
18091: PUSH
18092: LD_INT 0
18094: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18095: LD_EXP 50
18099: PPUSH
18100: LD_INT 2
18102: PPUSH
18103: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18107: LD_EXP 50
18111: PPUSH
18112: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18116: LD_EXP 50
18120: PPUSH
18121: CALL_OW 257
18125: PUSH
18126: LD_INT 32
18128: EQUAL
18129: PUSH
18130: LD_EXP 47
18134: PUSH
18135: LD_EXP 14
18139: IN
18140: AND
18141: PUSH
18142: LD_EXP 47
18146: PPUSH
18147: CALL_OW 255
18151: PUSH
18152: LD_INT 2
18154: EQUAL
18155: AND
18156: IFFALSE 18173
// begin giveSniperRifleToMike := true ;
18158: LD_ADDR_EXP 42
18162: PUSH
18163: LD_INT 1
18165: ST_TO_ADDR
// Query ( QSniperMike ) ;
18166: LD_STRING QSniperMike
18168: PPUSH
18169: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18173: LD_EXP 46
18177: PUSH
18178: LD_VAR 0 4
18182: IN
18183: PUSH
18184: LD_EXP 46
18188: PPUSH
18189: CALL_OW 257
18193: PUSH
18194: LD_INT 33
18196: EQUAL
18197: AND
18198: IFFALSE 18339
// begin SetSide ( Givi , 5 ) ;
18200: LD_EXP 46
18204: PPUSH
18205: LD_INT 5
18207: PPUSH
18208: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18212: LD_EXP 46
18216: PPUSH
18217: LD_INT 137
18219: PPUSH
18220: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18224: LD_INT 35
18226: PPUSH
18227: CALL_OW 67
// until IsInUnit ( Givi ) ;
18231: LD_EXP 46
18235: PPUSH
18236: CALL_OW 310
18240: IFFALSE 18224
// Say ( Givi , DG-Weapons-3 ) ;
18242: LD_EXP 46
18246: PPUSH
18247: LD_STRING DG-Weapons-3
18249: PPUSH
18250: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18254: LD_EXP 45
18258: PPUSH
18259: LD_STRING DH-Weapons-4
18261: PPUSH
18262: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18266: LD_EXP 46
18270: PPUSH
18271: LD_STRING DG-Weapons-5
18273: PPUSH
18274: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18278: LD_EXP 46
18282: PPUSH
18283: LD_INT 11
18285: PPUSH
18286: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18290: LD_EXP 46
18294: PPUSH
18295: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18299: LD_EXP 46
18303: PPUSH
18304: LD_INT 2
18306: PPUSH
18307: CALL_OW 235
// if hasRevolver then
18311: LD_EXP 8
18315: IFFALSE 18337
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18317: LD_EXP 45
18321: PPUSH
18322: LD_STRING DH-Kaia-Revolver-1
18324: PPUSH
18325: CALL_OW 88
// heikeHasRevolver := true ;
18329: LD_ADDR_EXP 20
18333: PUSH
18334: LD_INT 1
18336: ST_TO_ADDR
// end ; end else
18337: GO 18531
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18339: LD_EXP 49
18343: PUSH
18344: LD_VAR 0 4
18348: IN
18349: PUSH
18350: LD_EXP 49
18354: PPUSH
18355: CALL_OW 257
18359: PUSH
18360: LD_INT 33
18362: EQUAL
18363: AND
18364: IFFALSE 18493
// begin SetSide ( Kamil , 5 ) ;
18366: LD_EXP 49
18370: PPUSH
18371: LD_INT 5
18373: PPUSH
18374: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18378: LD_EXP 49
18382: PPUSH
18383: LD_INT 137
18385: PPUSH
18386: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18390: LD_INT 35
18392: PPUSH
18393: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18397: LD_EXP 49
18401: PPUSH
18402: CALL_OW 310
18406: IFFALSE 18390
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18408: LD_EXP 49
18412: PPUSH
18413: LD_STRING DKam-Weapons-a-3
18415: PPUSH
18416: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18420: LD_EXP 45
18424: PPUSH
18425: LD_STRING DH-Weapons-a-4
18427: PPUSH
18428: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18432: LD_EXP 49
18436: PPUSH
18437: LD_INT 11
18439: PPUSH
18440: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18444: LD_EXP 49
18448: PPUSH
18449: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18453: LD_EXP 49
18457: PPUSH
18458: LD_INT 2
18460: PPUSH
18461: CALL_OW 235
// if hasRevolver then
18465: LD_EXP 8
18469: IFFALSE 18491
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18471: LD_EXP 45
18475: PPUSH
18476: LD_STRING DH-Kaia-Revolver-1
18478: PPUSH
18479: CALL_OW 88
// heikeHasRevolver := true ;
18483: LD_ADDR_EXP 20
18487: PUSH
18488: LD_INT 1
18490: ST_TO_ADDR
// end ; end else
18491: GO 18531
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18493: LD_EXP 45
18497: PPUSH
18498: LD_STRING DH-Weapons-Alone-2
18500: PPUSH
18501: CALL_OW 88
// if hasRevolver then
18505: LD_EXP 8
18509: IFFALSE 18531
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18511: LD_EXP 45
18515: PPUSH
18516: LD_STRING DH-Kaia-Revolver-1a
18518: PPUSH
18519: CALL_OW 88
// heikeHasRevolver := true ;
18523: LD_ADDR_EXP 20
18527: PUSH
18528: LD_INT 1
18530: ST_TO_ADDR
// end ; end ; end ; end else
18531: GO 18545
// Say ( Heike , DH-Locked ) ;
18533: LD_EXP 45
18537: PPUSH
18538: LD_STRING DH-Locked
18540: PPUSH
18541: CALL_OW 88
// end ; end ;
18545: GO 18548
18547: POP
// SetSide ( building , 3 ) ;
18548: LD_VAR 0 1
18552: PPUSH
18553: LD_INT 3
18555: PPUSH
18556: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL 19690 0 1
// wait ( 0 0$0.3 ) ;
18569: LD_INT 10
18571: PPUSH
18572: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18576: LD_EXP 45
18580: PPUSH
18581: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18585: LD_EXP 45
18589: PPUSH
18590: LD_INT 2
18592: PPUSH
18593: CALL_OW 235
// InGameOff ;
18597: CALL_OW 9
// end ;
18601: LD_VAR 0 2
18605: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18606: LD_EXP 30
18610: NOT
18611: PUSH
18612: LD_EXP 17
18616: NOT
18617: AND
18618: PUSH
18619: LD_INT 22
18621: PUSH
18622: LD_INT 5
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 21
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_INT 0
18650: EQUAL
18651: AND
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 21
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PPUSH
18677: CALL_OW 69
18681: PUSH
18682: LD_INT 0
18684: EQUAL
18685: PUSH
18686: LD_EXP 25
18690: AND
18691: PUSH
18692: LD_EXP 25
18696: NOT
18697: OR
18698: AND
18699: IFFALSE 18731
18701: GO 18703
18703: DISABLE
// begin DialogueOn ;
18704: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18708: LD_EXP 45
18712: PPUSH
18713: LD_STRING DH-Alarm-2
18715: PPUSH
18716: CALL_OW 88
// DialogueOff ;
18720: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18724: LD_STRING M1-people-out
18726: PPUSH
18727: CALL_OW 337
// end ;
18731: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
18732: LD_EXP 47
18736: PPUSH
18737: CALL_OW 255
18741: PUSH
18742: LD_INT 2
18744: EQUAL
18745: PUSH
18746: LD_EXP 47
18750: PUSH
18751: LD_EXP 14
18755: IN
18756: AND
18757: PUSH
18758: LD_EXP 45
18762: PPUSH
18763: LD_EXP 47
18767: PPUSH
18768: CALL_OW 296
18772: PUSH
18773: LD_INT 6
18775: LESS
18776: AND
18777: PUSH
18778: LD_EXP 30
18782: NOT
18783: AND
18784: PUSH
18785: LD_EXP 42
18789: AND
18790: IFFALSE 18807
18792: GO 18794
18794: DISABLE
// SetClass ( Mike , class_hunter ) ;
18795: LD_EXP 47
18799: PPUSH
18800: LD_INT 32
18802: PPUSH
18803: CALL_OW 336
18807: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
18808: LD_EXP 41
18812: PUSH
18813: LD_EXP 40
18817: AND
18818: PUSH
18819: LD_INT 137
18821: PPUSH
18822: CALL_OW 255
18826: PUSH
18827: LD_INT 3
18829: EQUAL
18830: AND
18831: PUSH
18832: LD_EXP 14
18836: PPUSH
18837: LD_INT 95
18839: PUSH
18840: LD_INT 65
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 22
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 25
18859: PUSH
18860: LD_INT 33
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: PPUSH
18872: CALL_OW 72
18876: AND
18877: PUSH
18878: LD_INT 2
18880: PPUSH
18881: LD_INT 3
18883: PPUSH
18884: CALL_OW 81
18888: PUSH
18889: LD_INT 2
18891: EQUAL
18892: NOT
18893: AND
18894: PUSH
18895: LD_EXP 65
18899: PPUSH
18900: LD_INT 137
18902: PPUSH
18903: CALL_OW 296
18907: PUSH
18908: LD_INT 12
18910: LESS
18911: NOT
18912: AND
18913: IFFALSE 19167
18915: GO 18917
18917: DISABLE
18918: LD_INT 0
18920: PPUSH
18921: PPUSH
// begin enable ;
18922: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
18923: LD_ADDR_VAR 0 2
18927: PUSH
18928: LD_EXP 14
18932: PPUSH
18933: LD_INT 95
18935: PUSH
18936: LD_INT 65
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 2
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 25
18955: PUSH
18956: LD_INT 33
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 72
18972: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
18973: LD_STRING QWeapons
18975: PPUSH
18976: CALL_OW 97
18980: PUSH
18981: LD_INT 1
18983: EQUAL
18984: IFFALSE 19167
// begin for i in tmp do
18986: LD_ADDR_VAR 0 1
18990: PUSH
18991: LD_VAR 0 2
18995: PUSH
18996: FOR_IN
18997: IFFALSE 19165
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
18999: LD_INT 137
19001: PPUSH
19002: CALL_OW 313
19006: PUSH
19007: LD_INT 6
19009: EQUAL
19010: IFFALSE 19014
// continue ;
19012: GO 18996
// SetSide ( i , 3 ) ;
19014: LD_VAR 0 1
19018: PPUSH
19019: LD_INT 3
19021: PPUSH
19022: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19026: LD_VAR 0 1
19030: PPUSH
19031: LD_INT 137
19033: PPUSH
19034: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19038: LD_ADDR_EXP 40
19042: PUSH
19043: LD_EXP 40
19047: PPUSH
19048: CALL 67683 0 1
19052: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19053: LD_INT 10
19055: PPUSH
19056: CALL_OW 67
// until IsInUnit ( i ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 310
19069: IFFALSE 19053
// SetClass ( i , class_soldier ) ;
19071: LD_VAR 0 1
19075: PPUSH
19076: LD_INT 1
19078: PPUSH
19079: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19083: LD_VAR 0 1
19087: PPUSH
19088: CALL_OW 122
// wait ( 0 0$1 ) ;
19092: LD_INT 35
19094: PPUSH
19095: CALL_OW 67
// until not IsInUnit ( i ) ;
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 310
19108: NOT
19109: IFFALSE 19083
// SetSide ( i , 2 ) ;
19111: LD_VAR 0 1
19115: PPUSH
19116: LD_INT 2
19118: PPUSH
19119: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19123: LD_VAR 0 1
19127: PPUSH
19128: LD_INT 191
19130: PPUSH
19131: LD_INT 126
19133: PPUSH
19134: CALL_OW 171
// if weaponsAmount = 0 then
19138: LD_EXP 40
19142: PUSH
19143: LD_INT 0
19145: EQUAL
19146: IFFALSE 19163
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19148: LD_INT 65
19150: PPUSH
19151: LD_INT 0
19153: PPUSH
19154: CALL_OW 424
// disable ;
19158: DISABLE
// exit ;
19159: POP
19160: POP
19161: GO 19167
// end ; end ;
19163: GO 18996
19165: POP
19166: POP
// end ; end ; end_of_file
19167: PPOPN 2
19169: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19170: LD_VAR 0 1
19174: PUSH
19175: LD_INT 3
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19213
19183: POP
// begin repeat wait ( 0 0$1 ) ;
19184: LD_INT 35
19186: PPUSH
19187: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19191: LD_EXP 45
19195: PPUSH
19196: CALL_OW 85
// until IsDying ( Heike ) ;
19200: LD_EXP 45
19204: PPUSH
19205: CALL_OW 303
19209: IFFALSE 19184
// end ; end ;
19211: GO 19214
19213: POP
// end ;
19214: PPOPN 1
19216: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19217: LD_OWVAR 59
19221: IFFALSE 19225
// exit ;
19223: GO 19299
// if showPlaceEvent then
19225: LD_INT 4
19227: IFFALSE 19299
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19229: LD_VAR 0 2
19233: PPUSH
19234: LD_VAR 0 3
19238: PPUSH
19239: LD_INT 2
19241: PPUSH
19242: LD_INT 6
19244: NEG
19245: PPUSH
19246: CALL_OW 330
// CenterOnXY ( x , y ) ;
19250: LD_VAR 0 2
19254: PPUSH
19255: LD_VAR 0 3
19259: PPUSH
19260: CALL_OW 84
// wait ( time ) ;
19264: LD_VAR 0 4
19268: PPUSH
19269: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19273: LD_EXP 45
19277: PPUSH
19278: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19282: LD_VAR 0 2
19286: PPUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: LD_INT 2
19294: PPUSH
19295: CALL_OW 331
// end ; end ;
19299: PPOPN 7
19301: END
// on UnitDestroyed ( un ) do var x , y ;
19302: LD_INT 0
19304: PPUSH
19305: PPUSH
// begin if un = Heike and hasNormalScene then
19306: LD_VAR 0 1
19310: PUSH
19311: LD_EXP 45
19315: EQUAL
19316: PUSH
19317: LD_EXP 5
19321: AND
19322: IFFALSE 19346
// if loseCounter then
19324: LD_EXP 32
19328: IFFALSE 19339
// YouLost ( HeikeNoSurrender ) else
19330: LD_STRING HeikeNoSurrender
19332: PPUSH
19333: CALL_OW 104
19337: GO 19346
// YouLost ( Heike ) ;
19339: LD_STRING Heike
19341: PPUSH
19342: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL_OW 255
19355: PUSH
19356: LD_INT 2
19358: EQUAL
19359: PUSH
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 247
19369: PUSH
19370: LD_INT 1
19372: EQUAL
19373: AND
19374: IFFALSE 19391
// loseCounter := Inc ( loseCounter ) ;
19376: LD_ADDR_EXP 32
19380: PUSH
19381: LD_EXP 32
19385: PPUSH
19386: CALL 67661 0 1
19390: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19391: LD_VAR 0 1
19395: PPUSH
19396: CALL_OW 255
19400: PUSH
19401: LD_INT 6
19403: EQUAL
19404: PUSH
19405: LD_EXP 17
19409: NOT
19410: AND
19411: PUSH
19412: LD_VAR 0 1
19416: PUSH
19417: LD_EXP 70
19421: IN
19422: AND
19423: IFFALSE 19527
// begin x := GetX ( un ) ;
19425: LD_ADDR_VAR 0 2
19429: PUSH
19430: LD_VAR 0 1
19434: PPUSH
19435: CALL_OW 250
19439: ST_TO_ADDR
// y := GetY ( un ) ;
19440: LD_ADDR_VAR 0 3
19444: PUSH
19445: LD_VAR 0 1
19449: PPUSH
19450: CALL_OW 251
19454: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19455: LD_ADDR_EXP 43
19459: PUSH
19460: LD_EXP 43
19464: PPUSH
19465: LD_VAR 0 2
19469: PUSH
19470: LD_VAR 0 3
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL 66300 0 2
19483: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19484: LD_ADDR_EXP 70
19488: PUSH
19489: LD_EXP 70
19493: PUSH
19494: LD_VAR 0 1
19498: DIFF
19499: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19500: LD_INT 3
19502: PPUSH
19503: LD_VAR 0 2
19507: PPUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: CALL_OW 293
19517: IFFALSE 19527
// isAlarm := true ;
19519: LD_ADDR_EXP 17
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// end ; end ;
19527: PPOPN 3
19529: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
19530: LD_EXP 44
19534: IFFALSE 19538
// exit ;
19536: GO 19586
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19538: LD_VAR 0 1
19542: PUSH
19543: LD_INT 2
19545: EQUAL
19546: PUSH
19547: LD_VAR 0 2
19551: PUSH
19552: LD_INT 3
19554: EQUAL
19555: AND
19556: PUSH
19557: LD_VAR 0 1
19561: PUSH
19562: LD_INT 3
19564: EQUAL
19565: PUSH
19566: LD_VAR 0 2
19570: PUSH
19571: LD_INT 2
19573: EQUAL
19574: AND
19575: OR
19576: IFFALSE 19586
// isAlarm := true ;
19578: LD_ADDR_EXP 17
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
// end ; end_of_file
19586: PPOPN 2
19588: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19589: LD_INT 0
19591: PPUSH
19592: PPUSH
19593: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19594: LD_ADDR_VAR 0 4
19598: PUSH
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 310
19608: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19609: LD_ADDR_VAR 0 5
19613: PUSH
19614: LD_VAR 0 2
19618: PPUSH
19619: CALL_OW 310
19623: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19624: LD_ADDR_VAR 0 3
19628: PUSH
19629: LD_VAR 0 4
19633: PUSH
19634: LD_VAR 0 4
19638: PUSH
19639: LD_VAR 0 5
19643: EQUAL
19644: AND
19645: ST_TO_ADDR
// end ;
19646: LD_VAR 0 3
19650: RET
// export function ShowPlace ( x , y , time ) ; begin
19651: LD_INT 0
19653: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
19654: LD_INT 4
19656: PPUSH
19657: LD_VAR 0 1
19661: PPUSH
19662: LD_VAR 0 2
19666: PPUSH
19667: LD_VAR 0 3
19671: PPUSH
19672: LD_INT 0
19674: PPUSH
19675: LD_INT 0
19677: PPUSH
19678: LD_INT 0
19680: PPUSH
19681: CALL_OW 595
// end ;
19685: LD_VAR 0 4
19689: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
19690: LD_INT 0
19692: PPUSH
19693: PPUSH
19694: PPUSH
19695: PPUSH
19696: PPUSH
19697: PPUSH
// if not IsOk ( building ) then
19698: LD_VAR 0 1
19702: PPUSH
19703: CALL_OW 302
19707: NOT
19708: IFFALSE 19712
// exit ;
19710: GO 19959
// x := GetX ( building ) ;
19712: LD_ADDR_VAR 0 4
19716: PUSH
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 250
19726: ST_TO_ADDR
// y := GetY ( building ) ;
19727: LD_ADDR_VAR 0 5
19731: PUSH
19732: LD_VAR 0 1
19736: PPUSH
19737: CALL_OW 251
19741: ST_TO_ADDR
// d := GetDir ( building ) ;
19742: LD_ADDR_VAR 0 6
19746: PUSH
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL_OW 254
19756: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19757: LD_ADDR_VAR 0 7
19761: PUSH
19762: LD_VAR 0 4
19766: PPUSH
19767: LD_VAR 0 6
19771: PPUSH
19772: LD_INT 3
19774: PPUSH
19775: CALL_OW 272
19779: PUSH
19780: LD_VAR 0 5
19784: PPUSH
19785: LD_VAR 0 6
19789: PPUSH
19790: LD_INT 3
19792: PPUSH
19793: CALL_OW 273
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19802: LD_VAR 0 7
19806: PUSH
19807: LD_INT 1
19809: ARRAY
19810: PPUSH
19811: LD_VAR 0 7
19815: PUSH
19816: LD_INT 2
19818: ARRAY
19819: PPUSH
19820: CALL_OW 488
19824: NOT
19825: IFFALSE 19829
// exit ;
19827: GO 19959
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: LD_INT 92
19836: PUSH
19837: LD_VAR 0 4
19841: PUSH
19842: LD_VAR 0 5
19846: PUSH
19847: LD_INT 4
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 3
19858: PUSH
19859: LD_INT 54
19861: PUSH
19862: EMPTY
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PPUSH
19873: CALL_OW 69
19877: ST_TO_ADDR
// if not result then
19878: LD_VAR 0 2
19882: NOT
19883: IFFALSE 19887
// exit ;
19885: GO 19959
// for i in result do
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_VAR 0 2
19896: PUSH
19897: FOR_IN
19898: IFFALSE 19957
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
19900: LD_VAR 0 3
19904: PPUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: CALL_OW 250
19914: PPUSH
19915: LD_VAR 0 6
19919: PPUSH
19920: LD_INT 3
19922: PPUSH
19923: CALL_OW 272
19927: PPUSH
19928: LD_VAR 0 3
19932: PPUSH
19933: CALL_OW 251
19937: PPUSH
19938: LD_VAR 0 6
19942: PPUSH
19943: LD_INT 3
19945: PPUSH
19946: CALL_OW 273
19950: PPUSH
19951: CALL_OW 111
19955: GO 19897
19957: POP
19958: POP
// end ;
19959: LD_VAR 0 2
19963: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
19964: LD_INT 0
19966: PPUSH
19967: PPUSH
19968: PPUSH
19969: PPUSH
19970: PPUSH
19971: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
19972: LD_VAR 0 1
19976: PPUSH
19977: CALL_OW 302
19981: NOT
19982: PUSH
19983: LD_VAR 0 2
19987: PPUSH
19988: CALL_OW 302
19992: NOT
19993: OR
19994: PUSH
19995: LD_VAR 0 2
19999: PPUSH
20000: CALL_OW 313
20004: PUSH
20005: LD_INT 6
20007: EQUAL
20008: OR
20009: IFFALSE 20013
// exit ;
20011: GO 20230
// btype := GetBType ( building ) ;
20013: LD_ADDR_VAR 0 8
20017: PUSH
20018: LD_VAR 0 2
20022: PPUSH
20023: CALL_OW 266
20027: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
20028: LD_VAR 0 8
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 1
20038: PUSH
20039: LD_INT 2
20041: PUSH
20042: LD_INT 4
20044: PUSH
20045: LD_INT 5
20047: PUSH
20048: LD_INT 3
20050: PUSH
20051: LD_INT 6
20053: PUSH
20054: LD_INT 7
20056: PUSH
20057: LD_INT 8
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: IN
20071: NOT
20072: IFFALSE 20076
// exit ;
20074: GO 20230
// x := GetX ( building ) ;
20076: LD_ADDR_VAR 0 4
20080: PUSH
20081: LD_VAR 0 2
20085: PPUSH
20086: CALL_OW 250
20090: ST_TO_ADDR
// y := GetY ( building ) ;
20091: LD_ADDR_VAR 0 5
20095: PUSH
20096: LD_VAR 0 2
20100: PPUSH
20101: CALL_OW 251
20105: ST_TO_ADDR
// d := GetDir ( building ) ;
20106: LD_ADDR_VAR 0 6
20110: PUSH
20111: LD_VAR 0 2
20115: PPUSH
20116: CALL_OW 254
20120: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20121: LD_ADDR_VAR 0 7
20125: PUSH
20126: LD_VAR 0 4
20130: PPUSH
20131: LD_VAR 0 6
20135: PPUSH
20136: LD_INT 3
20138: PPUSH
20139: CALL_OW 272
20143: PUSH
20144: LD_VAR 0 5
20148: PPUSH
20149: LD_VAR 0 6
20153: PPUSH
20154: LD_INT 3
20156: PPUSH
20157: CALL_OW 273
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20166: LD_VAR 0 7
20170: PUSH
20171: LD_INT 1
20173: ARRAY
20174: PPUSH
20175: LD_VAR 0 7
20179: PUSH
20180: LD_INT 2
20182: ARRAY
20183: PPUSH
20184: CALL_OW 488
20188: NOT
20189: IFFALSE 20193
// exit ;
20191: GO 20230
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_VAR 0 1
20202: PPUSH
20203: LD_VAR 0 7
20207: PUSH
20208: LD_INT 1
20210: ARRAY
20211: PPUSH
20212: LD_VAR 0 7
20216: PUSH
20217: LD_INT 2
20219: ARRAY
20220: PPUSH
20221: CALL_OW 297
20225: PUSH
20226: LD_INT 4
20228: LESS
20229: ST_TO_ADDR
// end ;
20230: LD_VAR 0 3
20234: RET
// export function PlaceExplosives ( building ) ; begin
20235: LD_INT 0
20237: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20238: LD_ADDR_EXP 29
20242: PUSH
20243: LD_EXP 29
20247: PPUSH
20248: LD_VAR 0 1
20252: PPUSH
20253: CALL 66300 0 2
20257: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20258: LD_VAR 0 1
20262: PPUSH
20263: CALL_OW 250
20267: PPUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 251
20277: PPUSH
20278: LD_STRING PlantBomb
20280: PPUSH
20281: CALL_OW 366
// end ;
20285: LD_VAR 0 2
20289: RET
// export function CreateNature ; var i ; begin
20290: LD_INT 0
20292: PPUSH
20293: PPUSH
// PrepareFrog ;
20294: CALL 62790 0 0
// for i := 1 to 3 do
20298: LD_ADDR_VAR 0 2
20302: PUSH
20303: DOUBLE
20304: LD_INT 1
20306: DEC
20307: ST_TO_ADDR
20308: LD_INT 3
20310: PUSH
20311: FOR_TO
20312: IFFALSE 20331
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20314: CALL_OW 44
20318: PPUSH
20319: LD_INT 24
20321: PPUSH
20322: LD_INT 0
20324: PPUSH
20325: CALL_OW 49
20329: GO 20311
20331: POP
20332: POP
// end ;
20333: LD_VAR 0 1
20337: RET
// export function MarkBuilding ( building , marker ) ; begin
20338: LD_INT 0
20340: PPUSH
// if marker then
20341: LD_VAR 0 2
20345: IFFALSE 20392
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20347: LD_VAR 0 1
20351: PPUSH
20352: CALL_OW 250
20356: PPUSH
20357: LD_VAR 0 1
20361: PPUSH
20362: CALL_OW 251
20366: PPUSH
20367: LD_INT 2
20369: PPUSH
20370: LD_INT 3
20372: NEG
20373: PPUSH
20374: CALL_OW 330
// SetBName ( building , target ) ;
20378: LD_VAR 0 1
20382: PPUSH
20383: LD_STRING target
20385: PPUSH
20386: CALL_OW 500
// end else
20390: GO 20431
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20392: LD_VAR 0 1
20396: PPUSH
20397: CALL_OW 250
20401: PPUSH
20402: LD_VAR 0 1
20406: PPUSH
20407: CALL_OW 251
20411: PPUSH
20412: LD_INT 2
20414: PPUSH
20415: CALL_OW 331
// SetBName ( building ,  ) ;
20419: LD_VAR 0 1
20423: PPUSH
20424: LD_STRING 
20426: PPUSH
20427: CALL_OW 500
// end ; end ; end_of_file
20431: LD_VAR 0 3
20435: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20436: LD_INT 0
20438: PPUSH
// lockerCodeValid := false ;
20439: LD_ADDR_EXP 71
20443: PUSH
20444: LD_INT 0
20446: ST_TO_ADDR
// if not step then
20447: LD_LOC 1
20451: NOT
20452: IFFALSE 20462
// step := 1 ;
20454: LD_ADDR_LOC 1
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20462: LD_STRING HEscape
20464: PUSH
20465: LD_LOC 1
20469: STR
20470: PPUSH
20471: CALL_OW 97
20475: PUSH
20476: LD_INT 1
20478: DOUBLE
20479: EQUAL
20480: IFTRUE 20484
20482: GO 20491
20484: POP
// LockerMinigameSearch ; 2 :
20485: CALL 20524 0 0
20489: GO 20507
20491: LD_INT 2
20493: DOUBLE
20494: EQUAL
20495: IFTRUE 20499
20497: GO 20506
20499: POP
// LockerMinigameSetCode ; end ;
20500: CALL 20598 0 0
20504: GO 20507
20506: POP
// if lockerCodeValid then
20507: LD_EXP 71
20511: IFFALSE 20515
// exit ;
20513: GO 20519
// StartLockerMinigame ;
20515: CALL 20436 0 0
// end ;
20519: LD_VAR 0 1
20523: RET
// function LockerMinigameSearch ; begin
20524: LD_INT 0
20526: PPUSH
// if code then
20527: LD_LOC 2
20531: IFFALSE 20547
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20533: LD_EXP 45
20537: PPUSH
20538: LD_STRING DH-Escape-3-Hint-0
20540: PPUSH
20541: CALL_OW 88
// exit ;
20545: GO 20593
// end ; Randomize ;
20547: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20551: LD_ADDR_LOC 2
20555: PUSH
20556: LD_INT 1
20558: PPUSH
20559: LD_INT 5
20561: PPUSH
20562: CALL_OW 12
20566: ST_TO_ADDR
// step := 2 ;
20567: LD_ADDR_LOC 1
20571: PUSH
20572: LD_INT 2
20574: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20575: LD_EXP 45
20579: PPUSH
20580: LD_STRING DH-Escape-3-Hint-
20582: PUSH
20583: LD_LOC 2
20587: STR
20588: PPUSH
20589: CALL_OW 88
// end ;
20593: LD_VAR 0 1
20597: RET
// function LockerMinigameSetCode ; begin
20598: LD_INT 0
20600: PPUSH
// if not code then
20601: LD_LOC 2
20605: NOT
20606: IFFALSE 20616
// code := 0 ;
20608: LD_ADDR_LOC 2
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// lockerBusy := true ;
20616: LD_ADDR_EXP 72
20620: PUSH
20621: LD_INT 1
20623: ST_TO_ADDR
// InGameOff ;
20624: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20628: LD_STRING initLockerMinigame("
20630: PUSH
20631: LD_LOC 2
20635: STR
20636: PUSH
20637: LD_STRING ")
20639: STR
20640: PPUSH
20641: CALL_OW 559
// step := 3 ;
20645: LD_ADDR_LOC 1
20649: PUSH
20650: LD_INT 3
20652: ST_TO_ADDR
// repeat wait ( 1 ) ;
20653: LD_INT 1
20655: PPUSH
20656: CALL_OW 67
// until not lockerBusy ;
20660: LD_EXP 72
20664: NOT
20665: IFFALSE 20653
// InGameOn ;
20667: CALL_OW 8
// if not lockerCodeValid then
20671: LD_EXP 71
20675: NOT
20676: IFFALSE 20702
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
20678: LD_EXP 45
20682: PPUSH
20683: LD_STRING DH-Escape-3-Fail-
20685: PUSH
20686: LD_INT 1
20688: PPUSH
20689: LD_INT 2
20691: PPUSH
20692: CALL_OW 12
20696: STR
20697: PPUSH
20698: CALL_OW 88
// end ; end_of_file
20702: LD_VAR 0 1
20706: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
20707: LD_VAR 0 2
20711: PUSH
20712: LD_INT 102
20714: EQUAL
20715: IFFALSE 20737
// begin lockerBusy := false ;
20717: LD_ADDR_EXP 72
20721: PUSH
20722: LD_INT 0
20724: ST_TO_ADDR
// lockerCodeValid := p3 ;
20725: LD_ADDR_EXP 71
20729: PUSH
20730: LD_VAR 0 3
20734: ST_TO_ADDR
// end else
20735: GO 20791
// if p2 = 103 then
20737: LD_VAR 0 2
20741: PUSH
20742: LD_INT 103
20744: EQUAL
20745: IFFALSE 20757
// begin weatherBusy := false ;
20747: LD_ADDR_EXP 37
20751: PUSH
20752: LD_INT 0
20754: ST_TO_ADDR
// end else
20755: GO 20791
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_VAR 0 2
20766: PPUSH
20767: LD_VAR 0 3
20771: PPUSH
20772: LD_VAR 0 4
20776: PPUSH
20777: LD_VAR 0 5
20781: PPUSH
20782: LD_VAR 0 6
20786: PPUSH
20787: CALL 70457 0 6
// end ;
20791: PPOPN 6
20793: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
20794: LD_STRING killGameMusic();
20796: PPUSH
20797: CALL_OW 559
// PlayOriginalMusic ;
20801: CALL 90563 0 0
// SOS_MapStart ( ) ;
20805: CALL 70361 0 0
// end ; end_of_file
20809: PPOPN 1
20811: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
20812: LD_EXP 17
20816: NOT
20817: PUSH
20818: LD_EXP 70
20822: AND
20823: IFFALSE 21403
20825: GO 20827
20827: DISABLE
20828: LD_INT 0
20830: PPUSH
20831: PPUSH
20832: PPUSH
20833: PPUSH
20834: PPUSH
// begin enable ;
20835: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
20836: LD_ADDR_VAR 0 3
20840: PUSH
20841: LD_INT 26
20843: PUSH
20844: LD_INT 27
20846: PUSH
20847: LD_INT 28
20849: PUSH
20850: LD_INT 29
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 30
20861: PUSH
20862: LD_INT 31
20864: PUSH
20865: LD_INT 32
20867: PUSH
20868: LD_INT 33
20870: PUSH
20871: LD_INT 34
20873: PUSH
20874: LD_INT 35
20876: PUSH
20877: LD_INT 36
20879: PUSH
20880: LD_INT 37
20882: PUSH
20883: LD_INT 38
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 39
20899: PUSH
20900: LD_INT 40
20902: PUSH
20903: LD_INT 41
20905: PUSH
20906: LD_INT 42
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 43
20917: PUSH
20918: LD_INT 44
20920: PUSH
20921: LD_INT 45
20923: PUSH
20924: LD_INT 46
20926: PUSH
20927: LD_INT 47
20929: PUSH
20930: LD_INT 46
20932: PUSH
20933: LD_INT 45
20935: PUSH
20936: LD_INT 44
20938: PUSH
20939: LD_INT 43
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: ST_TO_ADDR
// for i in ruPatrol do
20959: LD_ADDR_VAR 0 1
20963: PUSH
20964: LD_EXP 70
20968: PUSH
20969: FOR_IN
20970: IFFALSE 21401
// begin if not IsOk ( i ) then
20972: LD_VAR 0 1
20976: PPUSH
20977: CALL_OW 302
20981: NOT
20982: IFFALSE 20986
// continue ;
20984: GO 20969
// if Count ( ruKilledHex ) then
20986: LD_EXP 43
20990: PPUSH
20991: CALL 30967 0 1
20995: IFFALSE 21068
// for j in ruKilledHex do
20997: LD_ADDR_VAR 0 2
21001: PUSH
21002: LD_EXP 43
21006: PUSH
21007: FOR_IN
21008: IFFALSE 21066
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
21010: LD_VAR 0 1
21014: PPUSH
21015: LD_VAR 0 2
21019: PUSH
21020: LD_INT 1
21022: ARRAY
21023: PPUSH
21024: LD_VAR 0 2
21028: PUSH
21029: LD_INT 2
21031: ARRAY
21032: PPUSH
21033: CALL_OW 297
21037: PUSH
21038: LD_INT 6
21040: LESS
21041: IFFALSE 21064
// begin Query ( QBody ) ;
21043: LD_STRING QBody
21045: PPUSH
21046: CALL_OW 97
// isAlarm := true ;
21050: LD_ADDR_EXP 17
21054: PUSH
21055: LD_INT 1
21057: ST_TO_ADDR
// exit ;
21058: POP
21059: POP
21060: POP
21061: POP
21062: GO 21403
// end ;
21064: GO 21007
21066: POP
21067: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
21068: LD_ADDR_VAR 0 5
21072: PUSH
21073: LD_INT 22
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 21
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 91
21095: PUSH
21096: LD_VAR 0 1
21100: PUSH
21101: LD_INT 7
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: PPUSH
21114: CALL_OW 69
21118: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21119: LD_INT 2
21121: PPUSH
21122: LD_VAR 0 1
21126: PPUSH
21127: CALL_OW 292
21131: PUSH
21132: LD_VAR 0 5
21136: AND
21137: IFFALSE 21287
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21139: LD_EXP 30
21143: PUSH
21144: LD_VAR 0 1
21148: PPUSH
21149: LD_EXP 65
21153: PPUSH
21154: CALL_OW 296
21158: PUSH
21159: LD_INT 16
21161: LESS
21162: AND
21163: PUSH
21164: LD_EXP 38
21168: OR
21169: IFFALSE 21173
// continue ;
21171: GO 20969
// for j in tmp do
21173: LD_ADDR_VAR 0 2
21177: PUSH
21178: LD_VAR 0 5
21182: PUSH
21183: FOR_IN
21184: IFFALSE 21245
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21186: LD_ADDR_VAR 0 5
21190: PUSH
21191: LD_VAR 0 5
21195: PUSH
21196: LD_INT 22
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 21
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 91
21218: PUSH
21219: LD_VAR 0 2
21223: PUSH
21224: LD_INT 4
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: UNION
21242: ST_TO_ADDR
21243: GO 21183
21245: POP
21246: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: LD_VAR 0 5
21256: PPUSH
21257: LD_VAR 0 1
21261: PPUSH
21262: CALL_OW 74
21266: PPUSH
21267: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21271: LD_VAR 0 1
21275: PPUSH
21276: LD_VAR 0 5
21280: PPUSH
21281: CALL 21406 0 2
// continue ;
21285: GO 20969
// end ; if HasTask ( i ) then
21287: LD_VAR 0 1
21291: PPUSH
21292: CALL_OW 314
21296: IFFALSE 21300
// continue ;
21298: GO 20969
// tag := GetTag ( i ) ;
21300: LD_ADDR_VAR 0 4
21304: PUSH
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 110
21314: ST_TO_ADDR
// if not tag then
21315: LD_VAR 0 4
21319: NOT
21320: IFFALSE 21333
// begin ComHold ( i ) ;
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 140
// continue ;
21331: GO 20969
// end ; for j := 1 to points [ tag ] do
21333: LD_ADDR_VAR 0 2
21337: PUSH
21338: DOUBLE
21339: LD_INT 1
21341: DEC
21342: ST_TO_ADDR
21343: LD_VAR 0 3
21347: PUSH
21348: LD_VAR 0 4
21352: ARRAY
21353: PUSH
21354: FOR_TO
21355: IFFALSE 21397
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21357: LD_VAR 0 1
21361: PPUSH
21362: LD_VAR 0 3
21366: PUSH
21367: LD_VAR 0 4
21371: ARRAY
21372: PUSH
21373: LD_VAR 0 2
21377: ARRAY
21378: PPUSH
21379: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21383: LD_VAR 0 1
21387: PPUSH
21388: LD_INT 70
21390: PPUSH
21391: CALL_OW 202
// end ;
21395: GO 21354
21397: POP
21398: POP
// end ;
21399: GO 20969
21401: POP
21402: POP
// end ;
21403: PPOPN 5
21405: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21406: LD_INT 0
21408: PPUSH
21409: PPUSH
21410: PPUSH
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21411: LD_VAR 0 2
21415: PPUSH
21416: LD_INT 2
21418: PUSH
21419: LD_INT 25
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 25
21431: PUSH
21432: LD_INT 11
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 25
21441: PUSH
21442: LD_INT 34
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 25
21451: PUSH
21452: LD_INT 32
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: PUSH
21466: EMPTY
21467: LIST
21468: PPUSH
21469: CALL_OW 72
21473: IFFALSE 21586
// begin blockPatrolThread := true ;
21475: LD_ADDR_EXP 38
21479: PUSH
21480: LD_INT 1
21482: ST_TO_ADDR
// DialogueOn ;
21483: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL_OW 258
21496: PUSH
21497: LD_INT 1
21499: DOUBLE
21500: EQUAL
21501: IFTRUE 21505
21503: GO 21520
21505: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21506: LD_VAR 0 1
21510: PPUSH
21511: LD_STRING DRum-Fail-3
21513: PPUSH
21514: CALL_OW 88
21518: GO 21544
21520: LD_INT 2
21522: DOUBLE
21523: EQUAL
21524: IFTRUE 21528
21526: GO 21543
21528: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
21529: LD_VAR 0 1
21533: PPUSH
21534: LD_STRING DRuf-Fail-3
21536: PPUSH
21537: CALL_OW 88
21541: GO 21544
21543: POP
// DialogueOff ;
21544: CALL_OW 7
// wait ( 0 0$5 ) ;
21548: LD_INT 175
21550: PPUSH
21551: CALL_OW 67
// if IsOk ( guard ) then
21555: LD_VAR 0 1
21559: PPUSH
21560: CALL_OW 302
21564: IFFALSE 21576
// isAlarm := true else
21566: LD_ADDR_EXP 17
21570: PUSH
21571: LD_INT 1
21573: ST_TO_ADDR
21574: GO 21584
// blockPatrolThread := false ;
21576: LD_ADDR_EXP 38
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// exit ;
21584: GO 22587
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
21586: LD_VAR 0 2
21590: PPUSH
21591: LD_INT 23
21593: PUSH
21594: LD_INT 3
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PPUSH
21601: CALL_OW 72
21605: PUSH
21606: LD_VAR 0 2
21610: PPUSH
21611: LD_INT 95
21613: PUSH
21614: LD_INT 61
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PPUSH
21621: CALL_OW 72
21625: OR
21626: IFFALSE 21630
// exit ;
21628: GO 22587
// DialogueOn ;
21630: CALL_OW 6
// blockPatrolThread := true ;
21634: LD_ADDR_EXP 38
21638: PUSH
21639: LD_INT 1
21641: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 87
// if not Heike in units then
21651: LD_EXP 45
21655: PUSH
21656: LD_VAR 0 2
21660: IN
21661: NOT
21662: IFFALSE 22028
// begin case GetSex ( guard ) of sex_male :
21664: LD_VAR 0 1
21668: PPUSH
21669: CALL_OW 258
21673: PUSH
21674: LD_INT 1
21676: DOUBLE
21677: EQUAL
21678: IFTRUE 21682
21680: GO 21697
21682: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_STRING DRum-Guard-1
21690: PPUSH
21691: CALL_OW 88
21695: GO 21721
21697: LD_INT 2
21699: DOUBLE
21700: EQUAL
21701: IFTRUE 21705
21703: GO 21720
21705: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
21706: LD_VAR 0 1
21710: PPUSH
21711: LD_STRING DRuf-Guard-1
21713: PPUSH
21714: CALL_OW 88
21718: GO 21721
21720: POP
// case Query ( SurrenderInfoPeople ) of 1 :
21721: LD_STRING SurrenderInfoPeople
21723: PPUSH
21724: CALL_OW 97
21728: PUSH
21729: LD_INT 1
21731: DOUBLE
21732: EQUAL
21733: IFTRUE 21737
21735: GO 21846
21737: POP
// begin Query ( CaughtSquadInfo ) ;
21738: LD_STRING CaughtSquadInfo
21740: PPUSH
21741: CALL_OW 97
// for i in units do
21745: LD_ADDR_VAR 0 4
21749: PUSH
21750: LD_VAR 0 2
21754: PUSH
21755: FOR_IN
21756: IFFALSE 21813
// begin if Carry ( i ) then
21758: LD_VAR 0 4
21762: PPUSH
21763: CALL_OW 281
21767: IFFALSE 21784
// SetCargo ( i , mat_cans , 0 ) ;
21769: LD_VAR 0 4
21773: PPUSH
21774: LD_INT 1
21776: PPUSH
21777: LD_INT 0
21779: PPUSH
21780: CALL_OW 290
// SetSide ( i , 5 ) ;
21784: LD_VAR 0 4
21788: PPUSH
21789: LD_INT 5
21791: PPUSH
21792: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
21796: LD_VAR 0 4
21800: PPUSH
21801: LD_INT 113
21803: PPUSH
21804: LD_INT 17
21806: PPUSH
21807: CALL_OW 111
// end ;
21811: GO 21755
21813: POP
21814: POP
// ComMoveXY ( guard , 117 , 25 ) ;
21815: LD_VAR 0 1
21819: PPUSH
21820: LD_INT 117
21822: PPUSH
21823: LD_INT 25
21825: PPUSH
21826: CALL_OW 111
// DialogueOff ;
21830: CALL_OW 7
// blockPatrolThread := false ;
21834: LD_ADDR_EXP 38
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// exit ;
21842: GO 22587
// end ; 2 :
21844: GO 22028
21846: LD_INT 2
21848: DOUBLE
21849: EQUAL
21850: IFTRUE 21854
21852: GO 22027
21854: POP
// begin DialogueOff ;
21855: CALL_OW 7
// wait ( 0 0$2 ) ;
21859: LD_INT 70
21861: PPUSH
21862: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21866: LD_INT 6
21868: PPUSH
21869: LD_INT 2
21871: PPUSH
21872: LD_INT 2
21874: PPUSH
21875: LD_INT 1
21877: PPUSH
21878: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
21882: LD_VAR 0 1
21886: PPUSH
21887: LD_VAR 0 2
21891: PUSH
21892: LD_INT 1
21894: ARRAY
21895: PPUSH
21896: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21900: LD_VAR 0 1
21904: PPUSH
21905: CALL_OW 258
21909: PUSH
21910: LD_INT 1
21912: DOUBLE
21913: EQUAL
21914: IFTRUE 21918
21916: GO 21933
21918: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21919: LD_VAR 0 1
21923: PPUSH
21924: LD_STRING DRum-Fail-3
21926: PPUSH
21927: CALL_OW 88
21931: GO 21957
21933: LD_INT 2
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 21956
21941: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21942: LD_VAR 0 1
21946: PPUSH
21947: LD_STRING DRum-Fail-3
21949: PPUSH
21950: CALL_OW 88
21954: GO 21957
21956: POP
// wait ( 0 0$5 ) ;
21957: LD_INT 175
21959: PPUSH
21960: CALL_OW 67
// if IsOk ( guard ) then
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 302
21973: IFFALSE 21985
// isAlarm := true else
21975: LD_ADDR_EXP 17
21979: PUSH
21980: LD_INT 1
21982: ST_TO_ADDR
21983: GO 22017
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
21985: LD_INT 6
21987: PPUSH
21988: LD_INT 2
21990: PPUSH
21991: LD_INT 0
21993: PPUSH
21994: LD_INT 1
21996: PPUSH
21997: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22001: LD_INT 3
22003: PPUSH
22004: LD_INT 2
22006: PPUSH
22007: LD_INT 0
22009: PPUSH
22010: LD_INT 1
22012: PPUSH
22013: CALL_OW 80
// end ; blockPatrolThread := false ;
22017: LD_ADDR_EXP 38
22021: PUSH
22022: LD_INT 0
22024: ST_TO_ADDR
// end ; end ;
22025: GO 22028
22027: POP
// end ; if Carry ( Heike ) then
22028: LD_EXP 45
22032: PPUSH
22033: CALL_OW 281
22037: IFFALSE 22113
// begin case GetSex ( guard ) of sex_male :
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 258
22048: PUSH
22049: LD_INT 1
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22072
22057: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
22058: LD_VAR 0 1
22062: PPUSH
22063: LD_STRING DRum-FoodFail-1
22065: PPUSH
22066: CALL_OW 88
22070: GO 22096
22072: LD_INT 2
22074: DOUBLE
22075: EQUAL
22076: IFTRUE 22080
22078: GO 22095
22080: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22081: LD_VAR 0 1
22085: PPUSH
22086: LD_STRING DRuf-FoodFail-2
22088: PPUSH
22089: CALL_OW 88
22093: GO 22096
22095: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22096: LD_EXP 45
22100: PPUSH
22101: LD_INT 1
22103: PPUSH
22104: LD_INT 0
22106: PPUSH
22107: CALL_OW 290
// end else
22111: GO 22170
// begin case GetSex ( guard ) of sex_male :
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL_OW 258
22122: PUSH
22123: LD_INT 1
22125: DOUBLE
22126: EQUAL
22127: IFTRUE 22131
22129: GO 22146
22131: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22132: LD_VAR 0 1
22136: PPUSH
22137: LD_STRING DRum-Seen-1
22139: PPUSH
22140: CALL_OW 88
22144: GO 22170
22146: LD_INT 2
22148: DOUBLE
22149: EQUAL
22150: IFTRUE 22154
22152: GO 22169
22154: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22155: LD_VAR 0 1
22159: PPUSH
22160: LD_STRING DRuf-Seen-1
22162: PPUSH
22163: CALL_OW 88
22167: GO 22170
22169: POP
// end ; alone := ( units = 1 ) ;
22170: LD_ADDR_VAR 0 5
22174: PUSH
22175: LD_VAR 0 2
22179: PUSH
22180: LD_INT 1
22182: EQUAL
22183: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22184: LD_STRING SurrenderInfo
22186: PPUSH
22187: CALL_OW 97
22191: PUSH
22192: LD_INT 1
22194: DOUBLE
22195: EQUAL
22196: IFTRUE 22200
22198: GO 22389
22200: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22201: LD_INT 23
22203: PPUSH
22204: CALL_OW 87
// RemoveUnit ( Heike ) ;
22208: LD_EXP 45
22212: PPUSH
22213: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22217: LD_EXP 45
22221: PPUSH
22222: LD_INT 23
22224: PPUSH
22225: CALL_OW 52
// if not alone then
22229: LD_VAR 0 5
22233: NOT
22234: IFFALSE 22301
// for i in units diff Heike do
22236: LD_ADDR_VAR 0 4
22240: PUSH
22241: LD_VAR 0 2
22245: PUSH
22246: LD_EXP 45
22250: DIFF
22251: PUSH
22252: FOR_IN
22253: IFFALSE 22299
// begin RemoveUnit ( i ) ;
22255: LD_VAR 0 4
22259: PPUSH
22260: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22264: LD_VAR 0 4
22268: PPUSH
22269: LD_INT 114
22271: PPUSH
22272: LD_INT 17
22274: PPUSH
22275: LD_INT 10
22277: PPUSH
22278: LD_INT 0
22280: PPUSH
22281: CALL_OW 50
// SetSide ( i , 5 ) ;
22285: LD_VAR 0 4
22289: PPUSH
22290: LD_INT 5
22292: PPUSH
22293: CALL_OW 235
// end ;
22297: GO 22252
22299: POP
22300: POP
// wait ( 0 0$0.3 ) ;
22301: LD_INT 10
22303: PPUSH
22304: CALL_OW 67
// if alone then
22308: LD_VAR 0 5
22312: IFFALSE 22323
// Query ( CaughtInfoAlone ) else
22314: LD_STRING CaughtInfoAlone
22316: PPUSH
22317: CALL_OW 97
22321: GO 22330
// Query ( CaughtInfo ) ;
22323: LD_STRING CaughtInfo
22325: PPUSH
22326: CALL_OW 97
// wait ( 0 0$2 ) ;
22330: LD_INT 70
22332: PPUSH
22333: CALL_OW 67
// StartLockerMinigame ;
22337: CALL 20436 0 0
// Say ( Heike , DH-Reset ) ;
22341: LD_EXP 45
22345: PPUSH
22346: LD_STRING DH-Reset
22348: PPUSH
22349: CALL_OW 88
// DialogueOff ;
22353: CALL_OW 7
// InGameOff ;
22357: CALL_OW 9
// blockPatrolThread := false ;
22361: LD_ADDR_EXP 38
22365: PUSH
22366: LD_INT 0
22368: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22369: LD_EXP 45
22373: PPUSH
22374: CALL_OW 122
// ComFree ( guard ) ;
22378: LD_VAR 0 1
22382: PPUSH
22383: CALL_OW 139
// end ; 2 :
22387: GO 22579
22389: LD_INT 2
22391: DOUBLE
22392: EQUAL
22393: IFTRUE 22397
22395: GO 22578
22397: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22398: LD_EXP 45
22402: PPUSH
22403: LD_STRING DH-Guard-2
22405: PPUSH
22406: CALL_OW 88
// DialogueOff ;
22410: CALL_OW 7
// wait ( 0 0$2 ) ;
22414: LD_INT 70
22416: PPUSH
22417: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22421: LD_INT 6
22423: PPUSH
22424: LD_INT 2
22426: PPUSH
22427: LD_INT 2
22429: PPUSH
22430: LD_INT 1
22432: PPUSH
22433: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22437: LD_VAR 0 1
22441: PPUSH
22442: LD_EXP 45
22446: PPUSH
22447: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22451: LD_VAR 0 1
22455: PPUSH
22456: CALL_OW 258
22460: PUSH
22461: LD_INT 1
22463: DOUBLE
22464: EQUAL
22465: IFTRUE 22469
22467: GO 22484
22469: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22470: LD_VAR 0 1
22474: PPUSH
22475: LD_STRING DRum-Fail-3
22477: PPUSH
22478: CALL_OW 88
22482: GO 22508
22484: LD_INT 2
22486: DOUBLE
22487: EQUAL
22488: IFTRUE 22492
22490: GO 22507
22492: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22493: LD_VAR 0 1
22497: PPUSH
22498: LD_STRING DRum-Fail-3
22500: PPUSH
22501: CALL_OW 88
22505: GO 22508
22507: POP
// wait ( 0 0$5 ) ;
22508: LD_INT 175
22510: PPUSH
22511: CALL_OW 67
// if IsOk ( guard ) then
22515: LD_VAR 0 1
22519: PPUSH
22520: CALL_OW 302
22524: IFFALSE 22536
// isAlarm := true else
22526: LD_ADDR_EXP 17
22530: PUSH
22531: LD_INT 1
22533: ST_TO_ADDR
22534: GO 22568
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22536: LD_INT 6
22538: PPUSH
22539: LD_INT 2
22541: PPUSH
22542: LD_INT 0
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22552: LD_INT 3
22554: PPUSH
22555: LD_INT 2
22557: PPUSH
22558: LD_INT 0
22560: PPUSH
22561: LD_INT 1
22563: PPUSH
22564: CALL_OW 80
// end ; blockPatrolThread := false ;
22568: LD_ADDR_EXP 38
22572: PUSH
22573: LD_INT 0
22575: ST_TO_ADDR
// end ; end ;
22576: GO 22579
22578: POP
// blockPatrolThread := false ;
22579: LD_ADDR_EXP 38
22583: PUSH
22584: LD_INT 0
22586: ST_TO_ADDR
// end ;
22587: LD_VAR 0 3
22591: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22592: LD_EXP 14
22596: PPUSH
22597: LD_INT 22
22599: PUSH
22600: LD_INT 5
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 3
22609: PUSH
22610: LD_INT 101
22612: PUSH
22613: LD_INT 6
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 92
22626: PUSH
22627: LD_INT 113
22629: PUSH
22630: LD_INT 16
22632: PUSH
22633: LD_INT 12
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 91
22644: PUSH
22645: LD_EXP 45
22649: PUSH
22650: LD_INT 6
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 72
22668: PUSH
22669: LD_EXP 30
22673: NOT
22674: AND
22675: IFFALSE 22780
22677: GO 22679
22679: DISABLE
22680: LD_INT 0
22682: PPUSH
// begin enable ;
22683: ENABLE
// DialogueOn ;
22684: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
22688: LD_EXP 45
22692: PPUSH
22693: LD_STRING DH-Join-
22695: PUSH
22696: LD_INT 1
22698: PPUSH
22699: LD_INT 3
22701: PPUSH
22702: CALL_OW 12
22706: STR
22707: PPUSH
22708: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
22712: LD_ADDR_VAR 0 1
22716: PUSH
22717: LD_EXP 14
22721: PPUSH
22722: LD_INT 22
22724: PUSH
22725: LD_INT 5
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 91
22734: PUSH
22735: LD_EXP 45
22739: PUSH
22740: LD_INT 10
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PPUSH
22752: CALL_OW 72
22756: PUSH
22757: FOR_IN
22758: IFFALSE 22774
// SetSide ( i , 2 ) ;
22760: LD_VAR 0 1
22764: PPUSH
22765: LD_INT 2
22767: PPUSH
22768: CALL_OW 235
22772: GO 22757
22774: POP
22775: POP
// DialogueOff ;
22776: CALL_OW 7
// end ; end_of_file
22780: PPOPN 1
22782: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
22783: LD_EXP 17
22787: PUSH
22788: LD_EXP 5
22792: AND
22793: IFFALSE 23094
22795: GO 22797
22797: DISABLE
22798: LD_INT 0
22800: PPUSH
22801: PPUSH
22802: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
22803: LD_INT 1
22805: NEG
22806: PPUSH
22807: LD_INT 1
22809: NEG
22810: PPUSH
22811: LD_STRING alarm
22813: PPUSH
22814: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
22818: LD_INT 3
22820: PPUSH
22821: LD_INT 2
22823: PPUSH
22824: LD_INT 2
22826: PPUSH
22827: LD_INT 1
22829: PPUSH
22830: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22834: LD_INT 6
22836: PPUSH
22837: LD_INT 2
22839: PPUSH
22840: LD_INT 2
22842: PPUSH
22843: LD_INT 1
22845: PPUSH
22846: CALL_OW 80
// DialogueOn ;
22850: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
22854: LD_EXP 45
22858: PPUSH
22859: LD_STRING DH-Alarm-1
22861: PPUSH
22862: CALL_OW 88
// DialogueOff ;
22866: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
22870: LD_ADDR_VAR 0 2
22874: PUSH
22875: LD_INT 107
22877: PUSH
22878: LD_INT 39
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 143
22887: PUSH
22888: LD_INT 33
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 180
22897: PUSH
22898: LD_INT 115
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 96
22907: PUSH
22908: LD_INT 90
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 59
22917: PUSH
22918: LD_INT 52
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 16
22927: PUSH
22928: LD_INT 15
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 90
22937: PUSH
22938: LD_INT 120
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
22954: LD_ADDR_VAR 0 3
22958: PUSH
22959: LD_INT 22
22961: PUSH
22962: LD_INT 6
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 25
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL_OW 69
22987: ST_TO_ADDR
// for i in tmp do
22988: LD_ADDR_VAR 0 1
22992: PUSH
22993: LD_VAR 0 3
22997: PUSH
22998: FOR_IN
22999: IFFALSE 23067
// begin ComExit ( i ) ;
23001: LD_VAR 0 1
23005: PPUSH
23006: CALL 66698 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
23010: LD_VAR 0 1
23014: PPUSH
23015: LD_VAR 0 2
23019: PUSH
23020: LD_VAR 0 1
23024: PUSH
23025: LD_INT 7
23027: MOD
23028: PUSH
23029: LD_INT 1
23031: PLUS
23032: ARRAY
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: PPUSH
23038: LD_VAR 0 2
23042: PUSH
23043: LD_VAR 0 1
23047: PUSH
23048: LD_INT 7
23050: MOD
23051: PUSH
23052: LD_INT 1
23054: PLUS
23055: ARRAY
23056: PUSH
23057: LD_INT 2
23059: ARRAY
23060: PPUSH
23061: CALL_OW 174
// end ;
23065: GO 22998
23067: POP
23068: POP
// Explode ;
23069: CALL 23097 0 0
// wait ( 0 0$45 ) ;
23073: LD_INT 1575
23075: PPUSH
23076: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23080: LD_VAR 0 3
23084: PPUSH
23085: LD_EXP 45
23089: PPUSH
23090: CALL_OW 175
// end ;
23094: PPOPN 3
23096: END
// export function Explode ; var i , x , y , j ; begin
23097: LD_INT 0
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
23103: PPUSH
// if hasExplosionsInFactory then
23104: LD_EXP 7
23108: IFFALSE 23128
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23110: LD_ADDR_EXP 29
23114: PUSH
23115: LD_EXP 29
23119: PPUSH
23120: LD_INT 61
23122: PPUSH
23123: CALL 66300 0 2
23127: ST_TO_ADDR
// if explosivePlantedList then
23128: LD_EXP 29
23132: IFFALSE 23280
// begin for i in explosivePlantedList do
23134: LD_ADDR_VAR 0 2
23138: PUSH
23139: LD_EXP 29
23143: PUSH
23144: FOR_IN
23145: IFFALSE 23248
// begin x := GetX ( i ) ;
23147: LD_ADDR_VAR 0 3
23151: PUSH
23152: LD_VAR 0 2
23156: PPUSH
23157: CALL_OW 250
23161: ST_TO_ADDR
// y := GetY ( i ) ;
23162: LD_ADDR_VAR 0 4
23166: PUSH
23167: LD_VAR 0 2
23171: PPUSH
23172: CALL_OW 251
23176: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23177: LD_ADDR_VAR 0 5
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: LD_INT 3
23187: PUSH
23188: LD_INT 5
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: PUSH
23196: FOR_IN
23197: IFFALSE 23244
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23199: LD_VAR 0 3
23203: PPUSH
23204: LD_VAR 0 5
23208: PPUSH
23209: LD_INT 2
23211: PPUSH
23212: CALL_OW 272
23216: PPUSH
23217: LD_VAR 0 4
23221: PPUSH
23222: LD_VAR 0 5
23226: PPUSH
23227: LD_INT 2
23229: PPUSH
23230: CALL_OW 273
23234: PPUSH
23235: LD_INT 1
23237: PPUSH
23238: CALL_OW 453
23242: GO 23196
23244: POP
23245: POP
// end ;
23246: GO 23144
23248: POP
23249: POP
// Say ( Heike , DH-End-2 ) ;
23250: LD_EXP 45
23254: PPUSH
23255: LD_STRING DH-End-2
23257: PPUSH
23258: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23262: LD_INT 175
23264: PUSH
23265: LD_EXP 29
23269: PPUSH
23270: CALL 30967 0 1
23274: MUL
23275: PPUSH
23276: CALL_OW 67
// end ; if not isAlarm then
23280: LD_EXP 17
23284: NOT
23285: IFFALSE 23295
// isAlarm := true ;
23287: LD_ADDR_EXP 17
23291: PUSH
23292: LD_INT 1
23294: ST_TO_ADDR
// end ;
23295: LD_VAR 0 1
23299: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23300: LD_INT 22
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 21
23312: PUSH
23313: LD_INT 2
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: LD_INT 101
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 101
23335: PUSH
23336: LD_INT 6
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: PPUSH
23353: CALL_OW 69
23357: IFFALSE 23370
23359: GO 23361
23361: DISABLE
// isAlarm := true ; end_of_file
23362: LD_ADDR_EXP 17
23366: PUSH
23367: LD_INT 1
23369: ST_TO_ADDR
23370: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23371: LD_EXP 14
23375: PPUSH
23376: LD_INT 22
23378: PUSH
23379: LD_INT 2
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PPUSH
23386: CALL_OW 72
23390: PUSH
23391: LD_INT 3
23393: GREATER
23394: PUSH
23395: LD_EXP 17
23399: NOT
23400: AND
23401: IFFALSE 27446
23403: GO 23405
23405: DISABLE
23406: LD_INT 0
23408: PPUSH
23409: PPUSH
23410: PPUSH
23411: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23412: LD_EXP 65
23416: PPUSH
23417: LD_INT 155
23419: PPUSH
23420: LD_INT 68
23422: PPUSH
23423: LD_INT 0
23425: PPUSH
23426: CALL_OW 48
// wait ( 0 0$1 ) ;
23430: LD_INT 35
23432: PPUSH
23433: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23437: LD_INT 35
23439: PPUSH
23440: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23444: LD_EXP 65
23448: PPUSH
23449: CALL_OW 314
23453: NOT
23454: IFFALSE 23470
// ComMoveUnit ( ruDisturb , Heike ) ;
23456: LD_EXP 65
23460: PPUSH
23461: LD_EXP 45
23465: PPUSH
23466: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23470: LD_EXP 45
23474: PPUSH
23475: LD_EXP 65
23479: PPUSH
23480: CALL_OW 296
23484: PUSH
23485: LD_INT 6
23487: LESS
23488: PUSH
23489: LD_EXP 65
23493: PPUSH
23494: CALL_OW 302
23498: AND
23499: IFFALSE 23437
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23501: LD_EXP 45
23505: PPUSH
23506: CALL_OW 257
23510: PUSH
23511: LD_INT 33
23513: NONEQUAL
23514: PUSH
23515: LD_EXP 14
23519: PPUSH
23520: LD_INT 22
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 91
23532: PUSH
23533: LD_EXP 65
23537: PUSH
23538: LD_INT 8
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 25
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 25
23561: PUSH
23562: LD_INT 11
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 25
23571: PUSH
23572: LD_INT 32
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 25
23581: PUSH
23582: LD_INT 34
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: PPUSH
23601: CALL_OW 72
23605: OR
23606: IFFALSE 23616
// isAlarm := true ;
23608: LD_ADDR_EXP 17
23612: PUSH
23613: LD_INT 1
23615: ST_TO_ADDR
// if isAlarm then
23616: LD_EXP 17
23620: IFFALSE 23624
// exit ;
23622: GO 27446
// DialogueOn ;
23624: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23628: LD_EXP 65
23632: PPUSH
23633: LD_STRING DMcn-Interrupt-1
23635: PPUSH
23636: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23640: LD_EXP 65
23644: PPUSH
23645: LD_STRING DMcn-Interrupt-2
23647: PPUSH
23648: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
23652: LD_EXP 65
23656: PPUSH
23657: LD_STRING DMcn-Interrupt-3
23659: PPUSH
23660: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
23664: LD_EXP 45
23668: PPUSH
23669: LD_STRING DH-Interrupt-a-4
23671: PPUSH
23672: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
23676: LD_EXP 65
23680: PPUSH
23681: LD_STRING DMcn-Interrupt-a-5
23683: PPUSH
23684: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
23688: LD_EXP 45
23692: PPUSH
23693: LD_STRING DH-Interrupt-a-6
23695: PPUSH
23696: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
23700: LD_EXP 65
23704: PPUSH
23705: LD_STRING DMcn-Interrupt-a-7
23707: PPUSH
23708: CALL_OW 88
// DialogueOff ;
23712: CALL_OW 7
// hasMuchin := true ;
23716: LD_ADDR_EXP 30
23720: PUSH
23721: LD_INT 1
23723: ST_TO_ADDR
// Query ( MuchinInfo ) ;
23724: LD_STRING MuchinInfo
23726: PPUSH
23727: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
23731: LD_STRING M2a
23733: PPUSH
23734: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
23738: LD_INT 105
23740: PPUSH
23741: LD_INT 55
23743: PPUSH
23744: CALL_OW 428
23748: PPUSH
23749: LD_INT 2
23751: PPUSH
23752: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
23756: LD_INT 115
23758: PPUSH
23759: LD_INT 65
23761: PPUSH
23762: CALL_OW 428
23766: PPUSH
23767: LD_INT 2
23769: PPUSH
23770: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
23774: LD_INT 109
23776: PPUSH
23777: LD_INT 59
23779: PPUSH
23780: LD_INT 2
23782: PPUSH
23783: LD_INT 10
23785: NEG
23786: PPUSH
23787: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
23791: LD_INT 109
23793: PPUSH
23794: LD_INT 59
23796: PPUSH
23797: CALL_OW 84
// wait ( 0 0$2 ) ;
23801: LD_INT 70
23803: PPUSH
23804: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
23808: LD_INT 109
23810: PPUSH
23811: LD_INT 59
23813: PPUSH
23814: LD_INT 2
23816: PPUSH
23817: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
23821: LD_INT 35
23823: PPUSH
23824: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23828: LD_EXP 65
23832: PPUSH
23833: LD_EXP 45
23837: PPUSH
23838: CALL_OW 296
23842: PUSH
23843: LD_INT 6
23845: GREATER
23846: IFFALSE 23862
// ComMoveUnit ( ruDisturb , Heike ) ;
23848: LD_EXP 65
23852: PPUSH
23853: LD_EXP 45
23857: PPUSH
23858: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23862: LD_EXP 45
23866: PPUSH
23867: CALL_OW 257
23871: PUSH
23872: LD_INT 33
23874: NONEQUAL
23875: PUSH
23876: LD_EXP 14
23880: PPUSH
23881: LD_INT 22
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 91
23893: PUSH
23894: LD_EXP 65
23898: PUSH
23899: LD_INT 8
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 2
23909: PUSH
23910: LD_INT 25
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 25
23922: PUSH
23923: LD_INT 11
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 25
23932: PUSH
23933: LD_INT 32
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 25
23942: PUSH
23943: LD_INT 34
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: PPUSH
23962: CALL_OW 72
23966: OR
23967: IFFALSE 23979
// begin isAlarm := true ;
23969: LD_ADDR_EXP 17
23973: PUSH
23974: LD_INT 1
23976: ST_TO_ADDR
// exit ;
23977: GO 27446
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
23979: LD_INT 105
23981: PPUSH
23982: LD_INT 55
23984: PPUSH
23985: CALL_OW 428
23989: NOT
23990: PUSH
23991: LD_INT 115
23993: PPUSH
23994: LD_INT 65
23996: PPUSH
23997: CALL_OW 428
24001: NOT
24002: OR
24003: IFFALSE 24015
// begin isAlarm := true ;
24005: LD_ADDR_EXP 17
24009: PUSH
24010: LD_INT 1
24012: ST_TO_ADDR
// exit ;
24013: GO 27446
// end ; until not BuildingsInProgress ( 2 ) ;
24015: LD_INT 2
24017: PPUSH
24018: CALL_OW 345
24022: NOT
24023: IFFALSE 23821
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
24025: LD_INT 105
24027: PPUSH
24028: LD_INT 55
24030: PPUSH
24031: CALL_OW 428
24035: PPUSH
24036: LD_INT 3
24038: PPUSH
24039: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
24043: LD_INT 115
24045: PPUSH
24046: LD_INT 65
24048: PPUSH
24049: CALL_OW 428
24053: PPUSH
24054: LD_INT 3
24056: PPUSH
24057: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
24061: LD_STRING M2a-out
24063: PPUSH
24064: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24068: LD_EXP 65
24072: PPUSH
24073: LD_INT 2
24075: PPUSH
24076: CALL_OW 120
// wait ( 0 0$3 ) ;
24080: LD_INT 105
24082: PPUSH
24083: CALL_OW 67
// hasMuchin := false ;
24087: LD_ADDR_EXP 30
24091: PUSH
24092: LD_INT 0
24094: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24095: LD_INT 4200
24097: PPUSH
24098: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24102: LD_INT 35
24104: PPUSH
24105: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24109: LD_EXP 65
24113: PPUSH
24114: CALL_OW 314
24118: NOT
24119: IFFALSE 24135
// ComMoveUnit ( ruDisturb , Heike ) ;
24121: LD_EXP 65
24125: PPUSH
24126: LD_EXP 45
24130: PPUSH
24131: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24135: LD_EXP 45
24139: PPUSH
24140: LD_EXP 65
24144: PPUSH
24145: CALL_OW 296
24149: PUSH
24150: LD_INT 6
24152: LESS
24153: PUSH
24154: LD_EXP 65
24158: PPUSH
24159: CALL_OW 302
24163: AND
24164: IFFALSE 24102
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24166: LD_EXP 45
24170: PPUSH
24171: CALL_OW 257
24175: PUSH
24176: LD_INT 33
24178: NONEQUAL
24179: PUSH
24180: LD_EXP 14
24184: PPUSH
24185: LD_INT 22
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 91
24197: PUSH
24198: LD_EXP 65
24202: PUSH
24203: LD_INT 8
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 25
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 25
24226: PUSH
24227: LD_INT 11
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 25
24236: PUSH
24237: LD_INT 32
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 25
24246: PUSH
24247: LD_INT 34
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 72
24270: OR
24271: IFFALSE 24281
// isAlarm := true ;
24273: LD_ADDR_EXP 17
24277: PUSH
24278: LD_INT 1
24280: ST_TO_ADDR
// if isAlarm then
24281: LD_EXP 17
24285: IFFALSE 24289
// exit ;
24287: GO 27446
// DialogueOn ;
24289: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24293: LD_EXP 65
24297: PPUSH
24298: LD_STRING DMcn-Interrupt-1
24300: PPUSH
24301: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24305: LD_EXP 65
24309: PPUSH
24310: LD_STRING DMcn-Interrupt-2
24312: PPUSH
24313: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24317: LD_INT 176
24319: PPUSH
24320: LD_INT 54
24322: PPUSH
24323: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24327: LD_INT 176
24329: PPUSH
24330: LD_INT 54
24332: PPUSH
24333: LD_INT 2
24335: PPUSH
24336: LD_INT 6
24338: NEG
24339: PPUSH
24340: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24344: LD_INT 10
24346: PPUSH
24347: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24351: LD_EXP 65
24355: PPUSH
24356: LD_STRING DMcn-Interrupt-b-3
24358: PPUSH
24359: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24363: LD_EXP 45
24367: PPUSH
24368: LD_STRING DH-Interrupt-b-4
24370: PPUSH
24371: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24375: LD_EXP 65
24379: PPUSH
24380: LD_STRING DMcn-Interrupt-b-5
24382: PPUSH
24383: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24387: LD_EXP 45
24391: PPUSH
24392: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24396: LD_INT 176
24398: PPUSH
24399: LD_INT 54
24401: PPUSH
24402: LD_INT 2
24404: PPUSH
24405: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24409: LD_EXP 65
24413: PPUSH
24414: LD_STRING DMcn-Interrupt-b-6
24416: PPUSH
24417: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24421: LD_EXP 45
24425: PPUSH
24426: LD_STRING DH-Interrupt-b-7
24428: PPUSH
24429: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24433: LD_EXP 65
24437: PPUSH
24438: LD_STRING DMcn-Interrupt-b-8
24440: PPUSH
24441: CALL_OW 88
// DialogueOff ;
24445: CALL_OW 7
// Query ( MuchinInfo ) ;
24449: LD_STRING MuchinInfo
24451: PPUSH
24452: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24456: LD_STRING M2b
24458: PPUSH
24459: CALL_OW 337
// hasMuchin := true ;
24463: LD_ADDR_EXP 30
24467: PUSH
24468: LD_INT 1
24470: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24471: LD_INT 35
24473: PPUSH
24474: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24478: LD_EXP 65
24482: PPUSH
24483: LD_EXP 45
24487: PPUSH
24488: CALL_OW 296
24492: PUSH
24493: LD_INT 6
24495: GREATER
24496: IFFALSE 24512
// ComMoveUnit ( ruDisturb , Heike ) ;
24498: LD_EXP 65
24502: PPUSH
24503: LD_EXP 45
24507: PPUSH
24508: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24512: LD_EXP 45
24516: PPUSH
24517: CALL_OW 257
24521: PUSH
24522: LD_INT 33
24524: NONEQUAL
24525: PUSH
24526: LD_EXP 14
24530: PPUSH
24531: LD_INT 22
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 91
24543: PUSH
24544: LD_EXP 65
24548: PUSH
24549: LD_INT 8
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: LD_INT 25
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 25
24572: PUSH
24573: LD_INT 11
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 25
24582: PUSH
24583: LD_INT 32
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 25
24592: PUSH
24593: LD_INT 34
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: LIST
24611: PPUSH
24612: CALL_OW 72
24616: OR
24617: IFFALSE 24629
// begin isAlarm := true ;
24619: LD_ADDR_EXP 17
24623: PUSH
24624: LD_INT 1
24626: ST_TO_ADDR
// exit ;
24627: GO 27446
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
24629: LD_EXP 45
24633: PPUSH
24634: LD_INT 61
24636: PPUSH
24637: CALL_OW 296
24641: PUSH
24642: LD_INT 4
24644: LESS
24645: IFFALSE 24471
// InGameOn ;
24647: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
24651: LD_INT 173
24653: PPUSH
24654: LD_INT 54
24656: PPUSH
24657: LD_INT 2
24659: PPUSH
24660: LD_INT 8
24662: NEG
24663: PPUSH
24664: CALL_OW 330
// SetSide ( Heike , 3 ) ;
24668: LD_EXP 45
24672: PPUSH
24673: LD_INT 3
24675: PPUSH
24676: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
24680: LD_EXP 45
24684: PPUSH
24685: LD_INT 61
24687: PPUSH
24688: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
24692: LD_EXP 65
24696: PPUSH
24697: LD_INT 61
24699: PPUSH
24700: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
24704: LD_EXP 52
24708: PUSH
24709: LD_EXP 14
24713: IN
24714: PUSH
24715: LD_EXP 52
24719: PPUSH
24720: LD_INT 61
24722: PPUSH
24723: CALL_OW 296
24727: PUSH
24728: LD_INT 12
24730: LESS
24731: AND
24732: IFFALSE 24776
// begin SetSide ( Markov , 3 ) ;
24734: LD_EXP 52
24738: PPUSH
24739: LD_INT 3
24741: PPUSH
24742: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
24746: LD_EXP 52
24750: PPUSH
24751: LD_INT 61
24753: PPUSH
24754: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
24758: LD_INT 35
24760: PPUSH
24761: CALL_OW 67
// until IsInUnit ( Markov ) ;
24765: LD_EXP 52
24769: PPUSH
24770: CALL_OW 310
24774: IFFALSE 24758
// end ; repeat wait ( 0 0$1 ) ;
24776: LD_INT 35
24778: PPUSH
24779: CALL_OW 67
// until IsInUnit ( Heike ) ;
24783: LD_EXP 45
24787: PPUSH
24788: CALL_OW 310
24792: IFFALSE 24776
// SetClass ( Heike , class_mechanic ) ;
24794: LD_EXP 45
24798: PPUSH
24799: LD_INT 3
24801: PPUSH
24802: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
24806: LD_INT 61
24808: PPUSH
24809: LD_INT 21
24811: PPUSH
24812: LD_INT 3
24814: PPUSH
24815: LD_INT 3
24817: PPUSH
24818: LD_INT 43
24820: PPUSH
24821: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
24825: LD_EXP 31
24829: PUSH
24830: LD_EXP 52
24834: PUSH
24835: LD_EXP 14
24839: IN
24840: PUSH
24841: LD_EXP 52
24845: PPUSH
24846: CALL_OW 310
24850: PUSH
24851: LD_INT 61
24853: EQUAL
24854: OR
24855: AND
24856: IFFALSE 25346
// begin wait ( 0 0$5 ) ;
24858: LD_INT 175
24860: PPUSH
24861: CALL_OW 67
// SetSide ( Heike , 2 ) ;
24865: LD_EXP 45
24869: PPUSH
24870: LD_INT 2
24872: PPUSH
24873: CALL_OW 235
// SetSide ( Markov , 2 ) ;
24877: LD_EXP 52
24881: PPUSH
24882: LD_INT 2
24884: PPUSH
24885: CALL_OW 235
// if not Markov in heikeSquad then
24889: LD_EXP 52
24893: PUSH
24894: LD_EXP 14
24898: IN
24899: NOT
24900: IFFALSE 24922
// heikeSquad := Join ( heikeSquad , Markov ) ;
24902: LD_ADDR_EXP 14
24906: PUSH
24907: LD_EXP 14
24911: PPUSH
24912: LD_EXP 52
24916: PPUSH
24917: CALL 66300 0 2
24921: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
24922: LD_EXP 52
24926: PPUSH
24927: LD_STRING DMar-Factory-1
24929: PPUSH
24930: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
24934: LD_INT 61
24936: PPUSH
24937: LD_INT 99
24939: PPUSH
24940: CALL_OW 329
// game_speed := 4 ;
24944: LD_ADDR_OWVAR 65
24948: PUSH
24949: LD_INT 4
24951: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
24952: LD_EXP 65
24956: PPUSH
24957: CALL_OW 122
// ComExitBuilding ( Markov ) ;
24961: LD_EXP 52
24965: PPUSH
24966: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
24970: LD_EXP 65
24974: PPUSH
24975: LD_INT 171
24977: PPUSH
24978: LD_INT 51
24980: PPUSH
24981: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
24985: LD_EXP 52
24989: PPUSH
24990: LD_INT 167
24992: PPUSH
24993: LD_INT 50
24995: PPUSH
24996: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
25000: LD_EXP 52
25004: PPUSH
25005: LD_EXP 65
25009: PPUSH
25010: CALL_OW 179
// wait ( 0 0$5 ) ;
25014: LD_INT 175
25016: PPUSH
25017: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
25021: LD_EXP 52
25025: PPUSH
25026: LD_STRING DMar-Factory-2
25028: PPUSH
25029: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
25033: LD_ADDR_VAR 0 2
25037: PUSH
25038: LD_INT 22
25040: PUSH
25041: LD_INT 3
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 33
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PPUSH
25062: CALL_OW 69
25066: PUSH
25067: LD_INT 1
25069: ARRAY
25070: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
25071: LD_EXP 65
25075: PPUSH
25076: LD_VAR 0 2
25080: PPUSH
25081: CALL_OW 119
// game_speed := 4 ;
25085: LD_ADDR_OWVAR 65
25089: PUSH
25090: LD_INT 4
25092: ST_TO_ADDR
// async ;
25093: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
25094: LD_EXP 65
25098: PPUSH
25099: LD_STRING DMcn-Factory-3
25101: PPUSH
25102: CALL_OW 88
// wait ( 0 0$0.6 ) ;
25106: LD_INT 21
25108: PPUSH
25109: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
25113: LD_VAR 0 2
25117: PPUSH
25118: LD_EXP 65
25122: PPUSH
25123: CALL_OW 115
// sync ;
25127: SYNC
// wait ( 0 0$1 ) ;
25128: LD_INT 35
25130: PPUSH
25131: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25135: LD_EXP 65
25139: PPUSH
25140: CALL_OW 66
// SetSide ( veh , 7 ) ;
25144: LD_VAR 0 2
25148: PPUSH
25149: LD_INT 7
25151: PPUSH
25152: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25156: LD_VAR 0 2
25160: PPUSH
25161: LD_INT 84
25163: PPUSH
25164: LD_INT 38
25166: PPUSH
25167: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25171: LD_EXP 66
25175: PUSH
25176: LD_INT 1
25178: ARRAY
25179: PPUSH
25180: CALL_OW 258
25184: PUSH
25185: LD_INT 1
25187: EQUAL
25188: IFFALSE 25208
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25190: LD_EXP 66
25194: PUSH
25195: LD_INT 1
25197: ARRAY
25198: PPUSH
25199: LD_STRING DRum-Factory-4
25201: PPUSH
25202: CALL_OW 88
25206: GO 25224
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25208: LD_EXP 66
25212: PUSH
25213: LD_INT 1
25215: ARRAY
25216: PPUSH
25217: LD_STRING DRuf-Factory-4
25219: PPUSH
25220: CALL_OW 88
// wait ( 0 0$1 ) ;
25224: LD_INT 35
25226: PPUSH
25227: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25231: LD_EXP 66
25235: PPUSH
25236: LD_INT 26
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 72
25250: PUSH
25251: LD_INT 1
25253: ARRAY
25254: PPUSH
25255: LD_STRING DRum-Factory-6
25257: PPUSH
25258: CALL_OW 88
// wait ( 0 0$2 ) ;
25262: LD_INT 70
25264: PPUSH
25265: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25269: LD_EXP 45
25273: PPUSH
25274: LD_INT 33
25276: PPUSH
25277: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25281: LD_EXP 45
25285: PPUSH
25286: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25290: LD_EXP 45
25294: PPUSH
25295: LD_INT 168
25297: PPUSH
25298: LD_INT 54
25300: PPUSH
25301: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25305: LD_INT 173
25307: PPUSH
25308: LD_INT 54
25310: PPUSH
25311: LD_INT 2
25313: PPUSH
25314: CALL_OW 331
// InGameOff ;
25318: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25322: LD_STRING M2b-out
25324: PPUSH
25325: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25329: LD_STRING ACH_TOY
25331: PPUSH
25332: CALL_OW 543
// hasMuchin := false ;
25336: LD_ADDR_EXP 30
25340: PUSH
25341: LD_INT 0
25343: ST_TO_ADDR
// exit ;
25344: GO 27446
// end ; wait ( 0 0$5 ) ;
25346: LD_INT 175
25348: PPUSH
25349: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25353: LD_INT 61
25355: PPUSH
25356: LD_INT 99
25358: PPUSH
25359: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25363: LD_EXP 52
25367: PUSH
25368: LD_EXP 14
25372: IN
25373: PUSH
25374: LD_EXP 52
25378: PPUSH
25379: CALL_OW 255
25383: PUSH
25384: LD_INT 3
25386: EQUAL
25387: AND
25388: IFFALSE 25411
// begin SetSide ( Markov , 2 ) ;
25390: LD_EXP 52
25394: PPUSH
25395: LD_INT 2
25397: PPUSH
25398: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25402: LD_EXP 52
25406: PPUSH
25407: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25411: LD_EXP 45
25415: PPUSH
25416: LD_INT 2
25418: PPUSH
25419: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25423: LD_EXP 45
25427: PPUSH
25428: LD_INT 33
25430: PPUSH
25431: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25435: LD_EXP 65
25439: PPUSH
25440: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25444: LD_EXP 45
25448: PPUSH
25449: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25453: LD_EXP 45
25457: PPUSH
25458: LD_INT 168
25460: PPUSH
25461: LD_INT 54
25463: PPUSH
25464: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25468: LD_INT 173
25470: PPUSH
25471: LD_INT 54
25473: PPUSH
25474: LD_INT 2
25476: PPUSH
25477: CALL_OW 331
// InGameOff ;
25481: CALL_OW 9
// wait ( 3 ) ;
25485: LD_INT 3
25487: PPUSH
25488: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25492: LD_EXP 65
25496: PPUSH
25497: LD_INT 2
25499: PPUSH
25500: CALL_OW 120
// wait ( 0 0$3 ) ;
25504: LD_INT 105
25506: PPUSH
25507: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
25511: LD_STRING M2b-out
25513: PPUSH
25514: CALL_OW 337
// hasMuchin := false ;
25518: LD_ADDR_EXP 30
25522: PUSH
25523: LD_INT 0
25525: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25526: LD_INT 4200
25528: PPUSH
25529: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25533: LD_INT 35
25535: PPUSH
25536: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25540: LD_EXP 65
25544: PPUSH
25545: CALL_OW 314
25549: NOT
25550: IFFALSE 25566
// ComMoveUnit ( ruDisturb , Heike ) ;
25552: LD_EXP 65
25556: PPUSH
25557: LD_EXP 45
25561: PPUSH
25562: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
25566: LD_EXP 45
25570: PPUSH
25571: LD_EXP 65
25575: PPUSH
25576: CALL_OW 296
25580: PUSH
25581: LD_INT 2
25583: LESS
25584: PUSH
25585: LD_EXP 65
25589: PPUSH
25590: CALL_OW 302
25594: AND
25595: IFFALSE 25533
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25597: LD_EXP 45
25601: PPUSH
25602: CALL_OW 257
25606: PUSH
25607: LD_INT 33
25609: NONEQUAL
25610: PUSH
25611: LD_EXP 14
25615: PPUSH
25616: LD_INT 22
25618: PUSH
25619: LD_INT 2
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 91
25628: PUSH
25629: LD_EXP 65
25633: PUSH
25634: LD_INT 8
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: LD_INT 25
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 25
25657: PUSH
25658: LD_INT 11
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 25
25667: PUSH
25668: LD_INT 32
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 25
25677: PUSH
25678: LD_INT 34
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: LIST
25696: PPUSH
25697: CALL_OW 72
25701: OR
25702: IFFALSE 25712
// isAlarm := true ;
25704: LD_ADDR_EXP 17
25708: PUSH
25709: LD_INT 1
25711: ST_TO_ADDR
// if isAlarm then
25712: LD_EXP 17
25716: IFFALSE 25720
// exit ;
25718: GO 27446
// ComTurnUnit ( Heike , ruDisturb ) ;
25720: LD_EXP 45
25724: PPUSH
25725: LD_EXP 65
25729: PPUSH
25730: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
25734: LD_EXP 65
25738: PPUSH
25739: LD_EXP 45
25743: PPUSH
25744: CALL_OW 119
// wait ( 3 ) ;
25748: LD_INT 3
25750: PPUSH
25751: CALL_OW 67
// for i := 1 to 3 do
25755: LD_ADDR_VAR 0 1
25759: PUSH
25760: DOUBLE
25761: LD_INT 1
25763: DEC
25764: ST_TO_ADDR
25765: LD_INT 3
25767: PUSH
25768: FOR_TO
25769: IFFALSE 25786
// CreateCratesArea ( 5 , cratesArea , false ) ;
25771: LD_INT 5
25773: PPUSH
25774: LD_INT 58
25776: PPUSH
25777: LD_INT 0
25779: PPUSH
25780: CALL_OW 55
25784: GO 25768
25786: POP
25787: POP
// uc_side := 3 ;
25788: LD_ADDR_OWVAR 20
25792: PUSH
25793: LD_INT 3
25795: ST_TO_ADDR
// uc_nation := nation_russian ;
25796: LD_ADDR_OWVAR 21
25800: PUSH
25801: LD_INT 3
25803: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
25804: LD_INT 21
25806: PPUSH
25807: LD_INT 3
25809: PPUSH
25810: LD_INT 1
25812: PPUSH
25813: LD_INT 51
25815: PPUSH
25816: LD_INT 100
25818: PPUSH
25819: CALL 33848 0 5
// veh := CreateVehicle ;
25823: LD_ADDR_VAR 0 2
25827: PUSH
25828: CALL_OW 45
25832: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
25833: LD_VAR 0 2
25837: PPUSH
25838: LD_INT 104
25840: PPUSH
25841: LD_INT 41
25843: PPUSH
25844: LD_INT 3
25846: PPUSH
25847: LD_INT 0
25849: PPUSH
25850: CALL 68440 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
25854: LD_VAR 0 2
25858: PPUSH
25859: LD_INT 1
25861: PPUSH
25862: LD_INT 100
25864: PPUSH
25865: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
25869: CALL_OW 44
25873: PPUSH
25874: LD_VAR 0 2
25878: PPUSH
25879: CALL_OW 52
// DialogueOn ;
25883: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25887: LD_EXP 65
25891: PPUSH
25892: LD_STRING DMcn-Interrupt-1
25894: PPUSH
25895: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25899: LD_EXP 65
25903: PPUSH
25904: LD_STRING DMcn-Interrupt-2
25906: PPUSH
25907: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
25911: LD_EXP 65
25915: PPUSH
25916: LD_STRING DMcn-Interrupt-c-3
25918: PPUSH
25919: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
25923: LD_INT 101
25925: PPUSH
25926: LD_INT 38
25928: PPUSH
25929: LD_INT 2
25931: PPUSH
25932: LD_INT 10
25934: NEG
25935: PPUSH
25936: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
25940: LD_INT 101
25942: PPUSH
25943: LD_INT 38
25945: PPUSH
25946: CALL_OW 84
// wait ( 0 0$2 ) ;
25950: LD_INT 70
25952: PPUSH
25953: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
25957: LD_INT 101
25959: PPUSH
25960: LD_INT 38
25962: PPUSH
25963: LD_INT 2
25965: PPUSH
25966: CALL_OW 331
// RemoveUnit ( veh ) ;
25970: LD_VAR 0 2
25974: PPUSH
25975: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
25979: LD_EXP 65
25983: PPUSH
25984: LD_STRING DMcn-Interrupt-c-4
25986: PPUSH
25987: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
25991: LD_EXP 45
25995: PPUSH
25996: LD_STRING DH-Interrupt-c-5
25998: PPUSH
25999: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
26003: LD_EXP 65
26007: PPUSH
26008: LD_STRING DMcn-Interrupt-c-6
26010: PPUSH
26011: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
26015: LD_EXP 45
26019: PPUSH
26020: LD_STRING DH-Interrupt-c-7
26022: PPUSH
26023: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
26027: LD_EXP 65
26031: PPUSH
26032: LD_STRING DMcn-Interrupt-c-8
26034: PPUSH
26035: CALL_OW 88
// DialogueOff ;
26039: CALL_OW 7
// hasMuchin := true ;
26043: LD_ADDR_EXP 30
26047: PUSH
26048: LD_INT 1
26050: ST_TO_ADDR
// Query ( MuchinInfo ) ;
26051: LD_STRING MuchinInfo
26053: PPUSH
26054: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
26058: LD_STRING M2c
26060: PPUSH
26061: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
26065: LD_INT 35
26067: PPUSH
26068: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
26072: LD_EXP 65
26076: PPUSH
26077: LD_EXP 45
26081: PPUSH
26082: CALL_OW 296
26086: PUSH
26087: LD_INT 6
26089: GREATER
26090: IFFALSE 26106
// ComMoveUnit ( ruDisturb , Heike ) ;
26092: LD_EXP 65
26096: PPUSH
26097: LD_EXP 45
26101: PPUSH
26102: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26106: LD_EXP 45
26110: PPUSH
26111: CALL_OW 257
26115: PUSH
26116: LD_INT 33
26118: NONEQUAL
26119: PUSH
26120: LD_EXP 14
26124: PPUSH
26125: LD_INT 22
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 91
26137: PUSH
26138: LD_EXP 65
26142: PUSH
26143: LD_INT 8
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: LD_INT 25
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 25
26166: PUSH
26167: LD_INT 11
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 25
26176: PUSH
26177: LD_INT 32
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 25
26186: PUSH
26187: LD_INT 34
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: PPUSH
26206: CALL_OW 72
26210: OR
26211: IFFALSE 26223
// begin isAlarm := true ;
26213: LD_ADDR_EXP 17
26217: PUSH
26218: LD_INT 1
26220: ST_TO_ADDR
// exit ;
26221: GO 27446
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26223: LD_EXP 14
26227: PUSH
26228: LD_EXP 45
26232: UNION
26233: PPUSH
26234: LD_INT 92
26236: PUSH
26237: LD_INT 100
26239: PUSH
26240: LD_INT 37
26242: PUSH
26243: LD_INT 6
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: PPUSH
26252: CALL_OW 72
26256: IFFALSE 26065
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26258: LD_INT 100
26260: PPUSH
26261: LD_INT 37
26263: PPUSH
26264: LD_INT 3
26266: PPUSH
26267: LD_INT 10
26269: NEG
26270: PPUSH
26271: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26275: LD_ADDR_VAR 0 3
26279: PUSH
26280: LD_EXP 14
26284: PUSH
26285: LD_EXP 45
26289: UNION
26290: PPUSH
26291: LD_INT 25
26293: PUSH
26294: LD_INT 33
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 91
26303: PUSH
26304: LD_INT 6
26306: PUSH
26307: LD_INT 12
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PPUSH
26319: CALL_OW 72
26323: ST_TO_ADDR
// for i in tmp do
26324: LD_ADDR_VAR 0 1
26328: PUSH
26329: LD_VAR 0 3
26333: PUSH
26334: FOR_IN
26335: IFFALSE 26366
// begin SetSide ( i , 3 ) ;
26337: LD_VAR 0 1
26341: PPUSH
26342: LD_INT 3
26344: PPUSH
26345: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26349: LD_VAR 0 1
26353: PPUSH
26354: LD_INT 101
26356: PPUSH
26357: LD_INT 38
26359: PPUSH
26360: CALL_OW 111
// end ;
26364: GO 26334
26366: POP
26367: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26368: LD_EXP 65
26372: PPUSH
26373: LD_INT 104
26375: PPUSH
26376: LD_INT 37
26378: PPUSH
26379: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26383: LD_EXP 65
26387: PPUSH
26388: LD_EXP 45
26392: PPUSH
26393: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26397: LD_INT 35
26399: PPUSH
26400: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26404: LD_ADDR_VAR 0 4
26408: PUSH
26409: LD_INT 58
26411: PPUSH
26412: CALL_OW 435
26416: ST_TO_ADDR
// for i in tmp do
26417: LD_ADDR_VAR 0 1
26421: PUSH
26422: LD_VAR 0 3
26426: PUSH
26427: FOR_IN
26428: IFFALSE 26471
// if not HasTask ( i ) then
26430: LD_VAR 0 1
26434: PPUSH
26435: CALL_OW 314
26439: NOT
26440: IFFALSE 26469
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26442: LD_VAR 0 1
26446: PPUSH
26447: LD_VAR 0 4
26451: PUSH
26452: LD_INT 1
26454: ARRAY
26455: PPUSH
26456: LD_VAR 0 4
26460: PUSH
26461: LD_INT 2
26463: ARRAY
26464: PPUSH
26465: CALL_OW 117
26469: GO 26427
26471: POP
26472: POP
// until not cr ;
26473: LD_VAR 0 4
26477: NOT
26478: IFFALSE 26397
// wait ( 0 0$2 ) ;
26480: LD_INT 70
26482: PPUSH
26483: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
26487: LD_INT 100
26489: PPUSH
26490: LD_INT 37
26492: PPUSH
26493: LD_INT 3
26495: PPUSH
26496: CALL_OW 331
// for i in tmp do
26500: LD_ADDR_VAR 0 1
26504: PUSH
26505: LD_VAR 0 3
26509: PUSH
26510: FOR_IN
26511: IFFALSE 26527
// SetSide ( i , 2 ) ;
26513: LD_VAR 0 1
26517: PPUSH
26518: LD_INT 2
26520: PPUSH
26521: CALL_OW 235
26525: GO 26510
26527: POP
26528: POP
// if Kaia in tmp then
26529: LD_EXP 50
26533: PUSH
26534: LD_VAR 0 3
26538: IN
26539: IFFALSE 26840
// begin InGameOn ;
26541: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
26545: LD_EXP 50
26549: PPUSH
26550: LD_EXP 65
26554: PPUSH
26555: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
26559: LD_EXP 65
26563: PPUSH
26564: LD_EXP 50
26568: PPUSH
26569: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
26573: LD_EXP 50
26577: PPUSH
26578: LD_EXP 65
26582: PPUSH
26583: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
26587: LD_EXP 50
26591: PPUSH
26592: LD_STRING DK-Assassin-1
26594: PPUSH
26595: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
26599: LD_EXP 65
26603: PPUSH
26604: LD_STRING DMcn-Assassin-2
26606: PPUSH
26607: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
26611: LD_EXP 50
26615: PPUSH
26616: LD_STRING DK-Assassin-3
26618: PPUSH
26619: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
26623: LD_EXP 65
26627: PPUSH
26628: LD_STRING DMcn-Assassin-4
26630: PPUSH
26631: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
26635: LD_EXP 50
26639: PPUSH
26640: LD_STRING DK-Assassin-5
26642: PPUSH
26643: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
26647: LD_EXP 65
26651: PPUSH
26652: LD_STRING DMcn-Assassin-6
26654: PPUSH
26655: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
26659: LD_EXP 50
26663: PPUSH
26664: LD_INT 3
26666: PPUSH
26667: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
26671: LD_EXP 50
26675: PUSH
26676: LD_EXP 65
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PPUSH
26685: LD_INT 6
26687: PPUSH
26688: CALL_OW 120
// wait ( 0 0$5 ) ;
26692: LD_INT 175
26694: PPUSH
26695: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
26699: LD_EXP 50
26703: PPUSH
26704: LD_STRING DK-Assassin-7
26706: PPUSH
26707: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
26711: LD_EXP 65
26715: PPUSH
26716: LD_STRING DMcn-Assassin-8
26718: PPUSH
26719: CALL_OW 88
// wait ( 0 0$0.3 ) ;
26723: LD_INT 10
26725: PPUSH
26726: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
26730: LD_EXP 50
26734: PPUSH
26735: LD_STRING DK-Assassin-9
26737: PPUSH
26738: CALL_OW 88
// wait ( 0 0$2 ) ;
26742: LD_INT 70
26744: PPUSH
26745: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
26749: LD_EXP 50
26753: PPUSH
26754: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
26758: LD_EXP 65
26762: PPUSH
26763: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
26767: LD_EXP 50
26771: PPUSH
26772: LD_INT 2
26774: PPUSH
26775: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
26779: LD_EXP 50
26783: PPUSH
26784: LD_EXP 45
26788: PPUSH
26789: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
26793: LD_EXP 50
26797: PPUSH
26798: LD_STRING DK-Assasin-10
26800: PPUSH
26801: CALL_OW 88
// InGameOff ;
26805: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
26809: LD_STRING ACH_POKER
26811: PPUSH
26812: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
26816: LD_STRING M2c-out
26818: PPUSH
26819: CALL_OW 337
// wait ( 0 0$3 ) ;
26823: LD_INT 105
26825: PPUSH
26826: CALL_OW 67
// hasMuchin := false ;
26830: LD_ADDR_EXP 30
26834: PUSH
26835: LD_INT 0
26837: ST_TO_ADDR
// exit ;
26838: GO 27446
// end ; ChangeMissionObjectives ( M2c-out ) ;
26840: LD_STRING M2c-out
26842: PPUSH
26843: CALL_OW 337
// InGameOn ;
26847: CALL_OW 8
// meetWithMuchin := true ;
26851: LD_ADDR_EXP 44
26855: PUSH
26856: LD_INT 1
26858: ST_TO_ADDR
// Say ( ruDisturb , DMcn-Fail-1 ) ;
26859: LD_EXP 65
26863: PPUSH
26864: LD_STRING DMcn-Fail-1
26866: PPUSH
26867: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
26871: LD_VAR 0 3
26875: PPUSH
26876: LD_INT 114
26878: PPUSH
26879: LD_INT 17
26881: PPUSH
26882: CALL_OW 111
// wait ( 0 0$1 ) ;
26886: LD_INT 35
26888: PPUSH
26889: CALL_OW 67
// async ;
26893: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
26894: LD_EXP 65
26898: PPUSH
26899: LD_EXP 45
26903: PPUSH
26904: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
26908: LD_EXP 65
26912: PPUSH
26913: LD_STRING DMcn-Fail-2
26915: PPUSH
26916: CALL_OW 88
// ComStop ( Heike ) ;
26920: LD_EXP 45
26924: PPUSH
26925: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
26929: LD_EXP 45
26933: PPUSH
26934: LD_EXP 65
26938: PPUSH
26939: CALL_OW 179
// sync ;
26943: SYNC
// Say ( Heike , DH-Fail-3 ) ;
26944: LD_EXP 45
26948: PPUSH
26949: LD_STRING DH-Fail-3
26951: PPUSH
26952: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
26956: LD_EXP 65
26960: PPUSH
26961: LD_STRING DMcn-Fail-4
26963: PPUSH
26964: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
26968: LD_EXP 45
26972: PUSH
26973: LD_EXP 65
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PPUSH
26982: LD_INT 41
26984: PPUSH
26985: LD_INT 19
26987: PPUSH
26988: CALL_OW 111
// wait ( 0 0$2 ) ;
26992: LD_INT 70
26994: PPUSH
26995: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
26999: LD_EXP 65
27003: PPUSH
27004: LD_INT 40
27006: PPUSH
27007: LD_INT 19
27009: PPUSH
27010: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
27014: LD_EXP 45
27018: PPUSH
27019: LD_INT 43
27021: PPUSH
27022: LD_INT 21
27024: PPUSH
27025: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27029: LD_EXP 65
27033: PPUSH
27034: LD_EXP 45
27038: PPUSH
27039: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
27043: LD_EXP 45
27047: PPUSH
27048: LD_EXP 65
27052: PPUSH
27053: CALL_OW 179
// wait ( 0 0$2 ) ;
27057: LD_INT 70
27059: PPUSH
27060: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
27064: LD_EXP 65
27068: PPUSH
27069: LD_STRING DMcn-Fail-5
27071: PPUSH
27072: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27076: LD_EXP 45
27080: PPUSH
27081: CALL_OW 87
// wait ( 0 0$2 ) ;
27085: LD_INT 70
27087: PPUSH
27088: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
27092: LD_EXP 65
27096: PPUSH
27097: LD_STRING DMcn-Fail-6
27099: PPUSH
27100: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27104: LD_EXP 45
27108: PPUSH
27109: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
27113: LD_INT 35
27115: PPUSH
27116: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
27120: LD_EXP 45
27124: PPUSH
27125: LD_INT 43
27127: PPUSH
27128: LD_INT 21
27130: PPUSH
27131: CALL_OW 307
27135: IFFALSE 27113
// CenterNowOnUnits ( Heike ) ;
27137: LD_EXP 45
27141: PPUSH
27142: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
27146: LD_STRING MuchinQuestion
27148: PPUSH
27149: CALL_OW 97
27153: PUSH
27154: LD_INT 1
27156: DOUBLE
27157: EQUAL
27158: IFTRUE 27162
27160: GO 27262
27162: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
27163: LD_EXP 65
27167: PPUSH
27168: LD_STRING DMcn-Fail-7
27170: PPUSH
27171: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
27175: LD_EXP 45
27179: PPUSH
27180: LD_STRING DH-Fail-8
27182: PPUSH
27183: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27187: LD_INT 10
27189: PPUSH
27190: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
27194: LD_EXP 45
27198: PPUSH
27199: LD_STRING DH-Fail-9
27201: PPUSH
27202: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27206: LD_EXP 45
27210: PPUSH
27211: LD_STRING DH-Fail-10
27213: PPUSH
27214: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27218: LD_EXP 65
27222: PPUSH
27223: LD_STRING DMcn-Fail-11
27225: PPUSH
27226: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27230: LD_EXP 65
27234: PPUSH
27235: LD_EXP 45
27239: PPUSH
27240: CALL_OW 115
// wait ( 0 0$2 ) ;
27244: LD_INT 70
27246: PPUSH
27247: CALL_OW 67
// KillUnit ( Heike ) ;
27251: LD_EXP 45
27255: PPUSH
27256: CALL_OW 66
// end ; 2 :
27260: GO 27442
27262: LD_INT 2
27264: DOUBLE
27265: EQUAL
27266: IFTRUE 27270
27268: GO 27441
27270: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27271: LD_EXP 45
27275: PPUSH
27276: LD_STRING DH-Fail-a-8
27278: PPUSH
27279: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27283: LD_EXP 45
27287: PPUSH
27288: LD_STRING DH-Fail-a-9
27290: PPUSH
27291: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27295: LD_EXP 45
27299: PPUSH
27300: LD_STRING DH-Fail-10
27302: PPUSH
27303: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27307: LD_EXP 45
27311: PPUSH
27312: LD_STRING DH-Fail-a-11
27314: PPUSH
27315: CALL_OW 88
// async ;
27319: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27320: LD_EXP 65
27324: PPUSH
27325: LD_EXP 45
27329: PPUSH
27330: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27334: LD_EXP 65
27338: PPUSH
27339: LD_EXP 45
27343: PPUSH
27344: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27348: LD_EXP 65
27352: PPUSH
27353: LD_STRING DH-Fail-12
27355: PPUSH
27356: CALL_OW 88
// sync ;
27360: SYNC
// wait ( 0 0$1 ) ;
27361: LD_INT 35
27363: PPUSH
27364: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27368: LD_EXP 45
27372: PPUSH
27373: LD_STRING DH-Fail-a-13
27375: PPUSH
27376: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27380: LD_EXP 65
27384: PPUSH
27385: LD_INT 100
27387: PPUSH
27388: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27392: LD_EXP 65
27396: PPUSH
27397: LD_STRING DMcn-Fail-a-14
27399: PPUSH
27400: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27404: LD_EXP 65
27408: PPUSH
27409: CALL_OW 66
// wait ( 0 0$1 ) ;
27413: LD_INT 35
27415: PPUSH
27416: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27420: LD_EXP 45
27424: PPUSH
27425: LD_STRING DH-Fail-a-15
27427: PPUSH
27428: CALL_OW 88
// YouLost ( FailMuchin ) ;
27432: LD_STRING FailMuchin
27434: PPUSH
27435: CALL_OW 104
// end ; end ;
27439: GO 27442
27441: POP
// InGameOff ;
27442: CALL_OW 9
// end ; end_of_file
27446: PPOPN 4
27448: END
// every 0 0$1 marked gameStartEvent do
27449: GO 27451
27451: DISABLE
// begin enable ;
27452: ENABLE
// if not contactWithAmerican then
27453: LD_EXP 25
27457: NOT
27458: IFFALSE 27503
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
27460: LD_ADDR_OWVAR 47
27464: PUSH
27465: LD_STRING #X108-1
27467: PUSH
27468: LD_INT 22
27470: PUSH
27471: LD_INT 5
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 21
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PPUSH
27492: CALL_OW 69
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: ST_TO_ADDR
27501: GO 27592
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
27503: LD_ADDR_OWVAR 47
27507: PUSH
27508: LD_STRING #X108-1
27510: PUSH
27511: LD_INT 22
27513: PUSH
27514: LD_INT 5
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 21
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 50
27533: PUSH
27534: EMPTY
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: PUSH
27547: LD_STRING #X108-2
27549: PUSH
27550: LD_INT 22
27552: PUSH
27553: LD_INT 4
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 21
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 50
27572: PUSH
27573: EMPTY
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: LIST
27580: PPUSH
27581: CALL_OW 69
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: ST_TO_ADDR
// end ; end_of_file
27592: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
27593: LD_EXP 45
27597: PPUSH
27598: LD_INT 59
27600: PPUSH
27601: CALL_OW 308
27605: IFFALSE 27727
27607: GO 27609
27609: DISABLE
// begin Query ( FinalInfo ) ;
27610: LD_STRING FinalInfo
27612: PPUSH
27613: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
27617: LD_INT 59
27619: PPUSH
27620: LD_INT 1
27622: PPUSH
27623: CALL_OW 424
// end_the_mission_allowed := true ;
27627: LD_ADDR_OWVAR 57
27631: PUSH
27632: LD_INT 1
27634: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27635: LD_INT 35
27637: PPUSH
27638: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
27642: LD_INT 22
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 21
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 95
27664: PUSH
27665: LD_INT 59
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: PPUSH
27677: CALL_OW 69
27681: PPUSH
27682: CALL 30967 0 1
27686: PUSH
27687: LD_INT 22
27689: PUSH
27690: LD_INT 2
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 21
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PPUSH
27711: CALL_OW 69
27715: PPUSH
27716: CALL 30967 0 1
27720: EQUAL
27721: IFFALSE 27635
// EndMission ;
27723: CALL 27735 0 0
// end ;
27727: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
27728: CALL 27735 0 0
// end ;
27732: PPOPN 1
27734: END
// function EndMission ; begin
27735: LD_INT 0
27737: PPUSH
// PlayOriginalMusic ;
27738: CALL 90563 0 0
// if not IsInArea ( Heike , finalArea ) then
27742: LD_EXP 45
27746: PPUSH
27747: LD_INT 59
27749: PPUSH
27750: CALL_OW 308
27754: NOT
27755: IFFALSE 27766
// begin Query ( HeikeOutOfArea ) ;
27757: LD_STRING HeikeOutOfArea
27759: PPUSH
27760: CALL_OW 97
// exit ;
27764: GO 28663
// end ; if not IsOk ( Heike ) then
27766: LD_EXP 45
27770: PPUSH
27771: CALL_OW 302
27775: NOT
27776: IFFALSE 27787
// begin Query ( HeikeIsHurt ) ;
27778: LD_STRING HeikeIsHurt
27780: PPUSH
27781: CALL_OW 97
// exit ;
27785: GO 28663
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
27787: LD_INT 22
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 21
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 50
27809: PUSH
27810: EMPTY
27811: LIST
27812: PUSH
27813: LD_INT 95
27815: PUSH
27816: LD_INT 59
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: PPUSH
27829: CALL_OW 69
27833: PPUSH
27834: CALL 30967 0 1
27838: PUSH
27839: LD_INT 6
27841: LESS
27842: IFFALSE 27851
// YouLost ( NeedMorePep ) ;
27844: LD_STRING NeedMorePep
27846: PPUSH
27847: CALL_OW 104
// if tick < 20 20$00 then
27851: LD_OWVAR 1
27855: PUSH
27856: LD_INT 42000
27858: LESS
27859: IFFALSE 27868
// SetAchievement ( ACH_HSPEED_8 ) ;
27861: LD_STRING ACH_HSPEED_8
27863: PPUSH
27864: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
27868: LD_INT 22
27870: PUSH
27871: LD_INT 5
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 21
27880: PUSH
27881: LD_INT 1
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PPUSH
27892: CALL_OW 69
27896: PUSH
27897: LD_INT 0
27899: EQUAL
27900: PUSH
27901: LD_EXP 32
27905: PUSH
27906: LD_INT 0
27908: EQUAL
27909: AND
27910: IFFALSE 27924
// AddMedal ( med1 , 1 ) else
27912: LD_STRING med1
27914: PPUSH
27915: LD_INT 1
27917: PPUSH
27918: CALL_OW 101
27922: GO 27935
// AddMedal ( med1 , - 1 ) ;
27924: LD_STRING med1
27926: PPUSH
27927: LD_INT 1
27929: NEG
27930: PPUSH
27931: CALL_OW 101
// if explosivePlantedList >= 3 then
27935: LD_EXP 29
27939: PUSH
27940: LD_INT 3
27942: GREATEREQUAL
27943: IFFALSE 27957
// AddMedal ( med2 , 1 ) else
27945: LD_STRING med2
27947: PPUSH
27948: LD_INT 1
27950: PPUSH
27951: CALL_OW 101
27955: GO 27991
// if explosivePlantedList < 3 then
27957: LD_EXP 29
27961: PUSH
27962: LD_INT 3
27964: LESS
27965: IFFALSE 27980
// AddMedal ( med2 , - 2 ) else
27967: LD_STRING med2
27969: PPUSH
27970: LD_INT 2
27972: NEG
27973: PPUSH
27974: CALL_OW 101
27978: GO 27991
// AddMedal ( med2 , - 1 ) ;
27980: LD_STRING med2
27982: PPUSH
27983: LD_INT 1
27985: NEG
27986: PPUSH
27987: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
27991: LD_INT 5
27993: PPUSH
27994: LD_INT 2
27996: PPUSH
27997: CALL_OW 321
28001: PUSH
28002: LD_INT 2
28004: EQUAL
28005: IFFALSE 28019
// AddMedal ( med3 , 1 ) else
28007: LD_STRING med3
28009: PPUSH
28010: LD_INT 1
28012: PPUSH
28013: CALL_OW 101
28017: GO 28030
// AddMedal ( med3 , - 1 ) ;
28019: LD_STRING med3
28021: PPUSH
28022: LD_INT 1
28024: NEG
28025: PPUSH
28026: CALL_OW 101
// GiveMedals ( MAIN ) ;
28030: LD_STRING MAIN
28032: PPUSH
28033: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
28037: LD_INT 22
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 23
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 21
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: PPUSH
28072: CALL_OW 69
28076: PPUSH
28077: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
28081: LD_EXP 59
28085: PUSH
28086: LD_EXP 59
28090: PPUSH
28091: CALL_OW 255
28095: PUSH
28096: LD_INT 2
28098: EQUAL
28099: AND
28100: IFFALSE 28114
// SaveCharacters ( Doug , 08_UsCommander ) ;
28102: LD_EXP 59
28106: PPUSH
28107: LD_STRING 08_UsCommander
28109: PPUSH
28110: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
28114: LD_EXP 58
28118: PUSH
28119: LD_EXP 58
28123: PPUSH
28124: CALL_OW 255
28128: PUSH
28129: LD_INT 2
28131: EQUAL
28132: AND
28133: IFFALSE 28147
// SaveCharacters ( Harris , 08_Harris ) ;
28135: LD_EXP 58
28139: PPUSH
28140: LD_STRING 08_Harris
28142: PPUSH
28143: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
28147: LD_INT 22
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 23
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 21
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: PPUSH
28182: CALL_OW 69
28186: PUSH
28187: LD_EXP 59
28191: PUSH
28192: LD_EXP 58
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: DIFF
28201: PPUSH
28202: LD_STRING 08_Americans
28204: PPUSH
28205: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
28209: LD_EXP 45
28213: PPUSH
28214: CALL_OW 248
28218: PUSH
28219: LD_INT 3
28221: EQUAL
28222: IFFALSE 28252
// begin CopySkills ( Heike , HeikeTmp ) ;
28224: LD_EXP 45
28228: PPUSH
28229: LD_EXP 61
28233: PPUSH
28234: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28238: LD_EXP 61
28242: PPUSH
28243: LD_STRING 08_Heike
28245: PPUSH
28246: CALL_OW 38
// end else
28250: GO 28264
// SaveCharacters ( Heike , 08_Heike ) ;
28252: LD_EXP 45
28256: PPUSH
28257: LD_STRING 08_Heike
28259: PPUSH
28260: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
28264: LD_EXP 55
28268: PUSH
28269: LD_EXP 55
28273: PPUSH
28274: CALL_OW 255
28278: PUSH
28279: LD_INT 2
28281: EQUAL
28282: AND
28283: IFFALSE 28297
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28285: LD_EXP 55
28289: PPUSH
28290: LD_STRING 08_Aviradze
28292: PPUSH
28293: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
28297: LD_EXP 48
28301: PUSH
28302: LD_EXP 48
28306: PPUSH
28307: CALL_OW 255
28311: PUSH
28312: LD_INT 2
28314: EQUAL
28315: AND
28316: IFFALSE 28330
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28318: LD_EXP 48
28322: PPUSH
28323: LD_STRING 08_Ibrahim
28325: PPUSH
28326: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
28330: LD_EXP 49
28334: PUSH
28335: LD_EXP 49
28339: PPUSH
28340: CALL_OW 255
28344: PUSH
28345: LD_INT 2
28347: EQUAL
28348: AND
28349: IFFALSE 28363
// SaveCharacters ( Kamil , 08_Kamil ) ;
28351: LD_EXP 49
28355: PPUSH
28356: LD_STRING 08_Kamil
28358: PPUSH
28359: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
28363: LD_EXP 51
28367: PUSH
28368: LD_EXP 51
28372: PPUSH
28373: CALL_OW 255
28377: PUSH
28378: LD_INT 2
28380: EQUAL
28381: AND
28382: IFFALSE 28396
// SaveCharacters ( Sophia , 08_Sophia ) ;
28384: LD_EXP 51
28388: PPUSH
28389: LD_STRING 08_Sophia
28391: PPUSH
28392: CALL_OW 38
// if Kaia and GetSide ( Kaia ) = 2 then
28396: LD_EXP 50
28400: PUSH
28401: LD_EXP 50
28405: PPUSH
28406: CALL_OW 255
28410: PUSH
28411: LD_INT 2
28413: EQUAL
28414: AND
28415: IFFALSE 28429
// SaveCharacters ( Kaia , 08_Kaia ) ;
28417: LD_EXP 50
28421: PPUSH
28422: LD_STRING 08_Kaia
28424: PPUSH
28425: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
28429: LD_EXP 46
28433: PUSH
28434: LD_EXP 46
28438: PPUSH
28439: CALL_OW 255
28443: PUSH
28444: LD_INT 2
28446: EQUAL
28447: AND
28448: IFFALSE 28505
// if GetNation ( Givi ) = nation_russian then
28450: LD_EXP 46
28454: PPUSH
28455: CALL_OW 248
28459: PUSH
28460: LD_INT 3
28462: EQUAL
28463: IFFALSE 28493
// begin CopySkills ( Givi , GiviTmp ) ;
28465: LD_EXP 46
28469: PPUSH
28470: LD_EXP 62
28474: PPUSH
28475: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
28479: LD_EXP 62
28483: PPUSH
28484: LD_STRING 08_Givi
28486: PPUSH
28487: CALL_OW 38
// end else
28491: GO 28505
// SaveCharacters ( Givi , 08_Givi ) ;
28493: LD_EXP 46
28497: PPUSH
28498: LD_STRING 08_Givi
28500: PPUSH
28501: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
28505: LD_EXP 47
28509: PUSH
28510: LD_EXP 47
28514: PPUSH
28515: CALL_OW 255
28519: PUSH
28520: LD_INT 2
28522: EQUAL
28523: AND
28524: IFFALSE 28538
// SaveCharacters ( Mike , 08_Mike ) ;
28526: LD_EXP 47
28530: PPUSH
28531: LD_STRING 08_Mike
28533: PPUSH
28534: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
28538: LD_EXP 52
28542: PUSH
28543: LD_EXP 52
28547: PPUSH
28548: CALL_OW 255
28552: PUSH
28553: LD_INT 2
28555: EQUAL
28556: AND
28557: IFFALSE 28571
// SaveCharacters ( Markov , 08_Markov ) ;
28559: LD_EXP 52
28563: PPUSH
28564: LD_STRING 08_Markov
28566: PPUSH
28567: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
28571: LD_EXP 54
28575: PUSH
28576: LD_EXP 54
28580: PPUSH
28581: CALL_OW 255
28585: PUSH
28586: LD_INT 2
28588: EQUAL
28589: AND
28590: IFFALSE 28604
// SaveCharacters ( Kurt , 08_Kurt ) ;
28592: LD_EXP 54
28596: PPUSH
28597: LD_STRING 08_Kurt
28599: PPUSH
28600: CALL_OW 38
// if Olaf and GetSide ( Olaf ) = 2 then
28604: LD_EXP 53
28608: PUSH
28609: LD_EXP 53
28613: PPUSH
28614: CALL_OW 255
28618: PUSH
28619: LD_INT 2
28621: EQUAL
28622: AND
28623: IFFALSE 28637
// SaveCharacters ( Olaf , 08_Olaf ) ;
28625: LD_EXP 53
28629: PPUSH
28630: LD_STRING 08_Olaf
28632: PPUSH
28633: CALL_OW 38
// if heikeSecondSquad then
28637: LD_EXP 56
28641: IFFALSE 28655
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
28643: LD_EXP 56
28647: PPUSH
28648: LD_STRING 08_others
28650: PPUSH
28651: CALL_OW 38
// YouWin ;
28655: CALL_OW 103
// DialogueOff ;
28659: CALL_OW 7
// end ; end_of_file
28663: LD_VAR 0 1
28667: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
28668: LD_EXP 5
28672: IFFALSE 28862
28674: GO 28676
28676: DISABLE
28677: LD_INT 0
28679: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
28680: LD_INT 35
28682: PPUSH
28683: LD_INT 2100
28685: PPUSH
28686: CALL_OW 12
28690: PPUSH
28691: CALL_OW 67
// StopOriginalMusic ;
28695: CALL 90548 0 0
// weatherBusy := true ;
28699: LD_ADDR_EXP 37
28703: PUSH
28704: LD_INT 1
28706: ST_TO_ADDR
// for i := 1 to 3 do
28707: LD_ADDR_VAR 0 1
28711: PUSH
28712: DOUBLE
28713: LD_INT 1
28715: DEC
28716: ST_TO_ADDR
28717: LD_INT 3
28719: PUSH
28720: FOR_TO
28721: IFFALSE 28755
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
28723: LD_INT 1
28725: PPUSH
28726: LD_INT 100
28728: PUSH
28729: LD_INT 100
28731: PUSH
28732: LD_VAR 0 1
28736: MUL
28737: PLUS
28738: PPUSH
28739: LD_INT 60
28741: PPUSH
28742: CALL_OW 550
// wait ( 0 0$2 ) ;
28746: LD_INT 70
28748: PPUSH
28749: CALL_OW 67
// end ;
28753: GO 28720
28755: POP
28756: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
28757: LD_STRING ArStormRain.wav
28759: PPUSH
28760: LD_STRING OW_CUSTOM_COMMAND(103);
28762: PPUSH
28763: CALL 90578 0 2
// wait ( 0 0$3 ) ;
28767: LD_INT 105
28769: PPUSH
28770: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
28774: LD_INT 1
28776: PPUSH
28777: LD_INT 900
28779: PPUSH
28780: LD_INT 120
28782: PPUSH
28783: CALL_OW 550
// wait ( 0 0$10 ) ;
28787: LD_INT 350
28789: PPUSH
28790: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
28794: LD_INT 1
28796: PPUSH
28797: LD_INT 1500
28799: PPUSH
28800: LD_INT 300
28802: PPUSH
28803: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
28807: LD_INT 35
28809: PPUSH
28810: CALL_OW 67
// until not weatherBusy ;
28814: LD_EXP 37
28818: NOT
28819: IFFALSE 28807
// SetWeather ( 0 , 0 , 0 ) ;
28821: LD_INT 0
28823: PPUSH
28824: LD_INT 0
28826: PPUSH
28827: LD_INT 0
28829: PPUSH
28830: CALL_OW 550
// wait ( 5 5$00 ) ;
28834: LD_INT 10500
28836: PPUSH
28837: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
28841: LD_STRING ArStormNormal.wav
28843: PPUSH
28844: LD_STRING OW_CUSTOM_COMMAND(103);
28846: PPUSH
28847: CALL 90578 0 2
// wait ( 5 5$00 ) ;
28851: LD_INT 10500
28853: PPUSH
28854: CALL_OW 67
// PlayOriginalMusic ;
28858: CALL 90563 0 0
// end ; end_of_file
28862: PPOPN 1
28864: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28865: LD_INT 0
28867: PPUSH
28868: PPUSH
// if exist_mode then
28869: LD_VAR 0 2
28873: IFFALSE 28898
// unit := CreateCharacter ( prefix & ident ) else
28875: LD_ADDR_VAR 0 5
28879: PUSH
28880: LD_VAR 0 3
28884: PUSH
28885: LD_VAR 0 1
28889: STR
28890: PPUSH
28891: CALL_OW 34
28895: ST_TO_ADDR
28896: GO 28913
// unit := NewCharacter ( ident ) ;
28898: LD_ADDR_VAR 0 5
28902: PUSH
28903: LD_VAR 0 1
28907: PPUSH
28908: CALL_OW 25
28912: ST_TO_ADDR
// result := unit ;
28913: LD_ADDR_VAR 0 4
28917: PUSH
28918: LD_VAR 0 5
28922: ST_TO_ADDR
// end ;
28923: LD_VAR 0 4
28927: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28928: LD_INT 0
28930: PPUSH
28931: PPUSH
// if not side or not nation then
28932: LD_VAR 0 1
28936: NOT
28937: PUSH
28938: LD_VAR 0 2
28942: NOT
28943: OR
28944: IFFALSE 28948
// exit ;
28946: GO 29716
// case nation of nation_american :
28948: LD_VAR 0 2
28952: PUSH
28953: LD_INT 1
28955: DOUBLE
28956: EQUAL
28957: IFTRUE 28961
28959: GO 29175
28961: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28962: LD_ADDR_VAR 0 4
28966: PUSH
28967: LD_INT 35
28969: PUSH
28970: LD_INT 45
28972: PUSH
28973: LD_INT 46
28975: PUSH
28976: LD_INT 47
28978: PUSH
28979: LD_INT 82
28981: PUSH
28982: LD_INT 83
28984: PUSH
28985: LD_INT 84
28987: PUSH
28988: LD_INT 85
28990: PUSH
28991: LD_INT 86
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 6
29002: PUSH
29003: LD_INT 15
29005: PUSH
29006: LD_INT 16
29008: PUSH
29009: LD_INT 7
29011: PUSH
29012: LD_INT 12
29014: PUSH
29015: LD_INT 13
29017: PUSH
29018: LD_INT 10
29020: PUSH
29021: LD_INT 14
29023: PUSH
29024: LD_INT 20
29026: PUSH
29027: LD_INT 21
29029: PUSH
29030: LD_INT 22
29032: PUSH
29033: LD_INT 25
29035: PUSH
29036: LD_INT 32
29038: PUSH
29039: LD_INT 27
29041: PUSH
29042: LD_INT 36
29044: PUSH
29045: LD_INT 69
29047: PUSH
29048: LD_INT 39
29050: PUSH
29051: LD_INT 34
29053: PUSH
29054: LD_INT 40
29056: PUSH
29057: LD_INT 48
29059: PUSH
29060: LD_INT 49
29062: PUSH
29063: LD_INT 50
29065: PUSH
29066: LD_INT 51
29068: PUSH
29069: LD_INT 52
29071: PUSH
29072: LD_INT 53
29074: PUSH
29075: LD_INT 54
29077: PUSH
29078: LD_INT 55
29080: PUSH
29081: LD_INT 56
29083: PUSH
29084: LD_INT 57
29086: PUSH
29087: LD_INT 58
29089: PUSH
29090: LD_INT 59
29092: PUSH
29093: LD_INT 60
29095: PUSH
29096: LD_INT 61
29098: PUSH
29099: LD_INT 62
29101: PUSH
29102: LD_INT 80
29104: PUSH
29105: LD_INT 82
29107: PUSH
29108: LD_INT 83
29110: PUSH
29111: LD_INT 84
29113: PUSH
29114: LD_INT 85
29116: PUSH
29117: LD_INT 86
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: ST_TO_ADDR
29173: GO 29640
29175: LD_INT 2
29177: DOUBLE
29178: EQUAL
29179: IFTRUE 29183
29181: GO 29409
29183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29184: LD_ADDR_VAR 0 4
29188: PUSH
29189: LD_INT 35
29191: PUSH
29192: LD_INT 45
29194: PUSH
29195: LD_INT 46
29197: PUSH
29198: LD_INT 47
29200: PUSH
29201: LD_INT 82
29203: PUSH
29204: LD_INT 83
29206: PUSH
29207: LD_INT 84
29209: PUSH
29210: LD_INT 85
29212: PUSH
29213: LD_INT 87
29215: PUSH
29216: LD_INT 70
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 11
29224: PUSH
29225: LD_INT 3
29227: PUSH
29228: LD_INT 4
29230: PUSH
29231: LD_INT 5
29233: PUSH
29234: LD_INT 6
29236: PUSH
29237: LD_INT 15
29239: PUSH
29240: LD_INT 18
29242: PUSH
29243: LD_INT 7
29245: PUSH
29246: LD_INT 17
29248: PUSH
29249: LD_INT 8
29251: PUSH
29252: LD_INT 20
29254: PUSH
29255: LD_INT 21
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_INT 72
29263: PUSH
29264: LD_INT 26
29266: PUSH
29267: LD_INT 69
29269: PUSH
29270: LD_INT 39
29272: PUSH
29273: LD_INT 40
29275: PUSH
29276: LD_INT 41
29278: PUSH
29279: LD_INT 42
29281: PUSH
29282: LD_INT 43
29284: PUSH
29285: LD_INT 48
29287: PUSH
29288: LD_INT 49
29290: PUSH
29291: LD_INT 50
29293: PUSH
29294: LD_INT 51
29296: PUSH
29297: LD_INT 52
29299: PUSH
29300: LD_INT 53
29302: PUSH
29303: LD_INT 54
29305: PUSH
29306: LD_INT 55
29308: PUSH
29309: LD_INT 56
29311: PUSH
29312: LD_INT 60
29314: PUSH
29315: LD_INT 61
29317: PUSH
29318: LD_INT 62
29320: PUSH
29321: LD_INT 66
29323: PUSH
29324: LD_INT 67
29326: PUSH
29327: LD_INT 68
29329: PUSH
29330: LD_INT 81
29332: PUSH
29333: LD_INT 82
29335: PUSH
29336: LD_INT 83
29338: PUSH
29339: LD_INT 84
29341: PUSH
29342: LD_INT 85
29344: PUSH
29345: LD_INT 87
29347: PUSH
29348: LD_INT 88
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
29407: GO 29640
29409: LD_INT 3
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 29639
29417: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29418: LD_ADDR_VAR 0 4
29422: PUSH
29423: LD_INT 46
29425: PUSH
29426: LD_INT 47
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: LD_INT 82
29437: PUSH
29438: LD_INT 83
29440: PUSH
29441: LD_INT 84
29443: PUSH
29444: LD_INT 85
29446: PUSH
29447: LD_INT 86
29449: PUSH
29450: LD_INT 11
29452: PUSH
29453: LD_INT 9
29455: PUSH
29456: LD_INT 20
29458: PUSH
29459: LD_INT 19
29461: PUSH
29462: LD_INT 21
29464: PUSH
29465: LD_INT 24
29467: PUSH
29468: LD_INT 22
29470: PUSH
29471: LD_INT 25
29473: PUSH
29474: LD_INT 28
29476: PUSH
29477: LD_INT 29
29479: PUSH
29480: LD_INT 30
29482: PUSH
29483: LD_INT 31
29485: PUSH
29486: LD_INT 37
29488: PUSH
29489: LD_INT 38
29491: PUSH
29492: LD_INT 32
29494: PUSH
29495: LD_INT 27
29497: PUSH
29498: LD_INT 33
29500: PUSH
29501: LD_INT 69
29503: PUSH
29504: LD_INT 39
29506: PUSH
29507: LD_INT 34
29509: PUSH
29510: LD_INT 40
29512: PUSH
29513: LD_INT 71
29515: PUSH
29516: LD_INT 23
29518: PUSH
29519: LD_INT 44
29521: PUSH
29522: LD_INT 48
29524: PUSH
29525: LD_INT 49
29527: PUSH
29528: LD_INT 50
29530: PUSH
29531: LD_INT 51
29533: PUSH
29534: LD_INT 52
29536: PUSH
29537: LD_INT 53
29539: PUSH
29540: LD_INT 54
29542: PUSH
29543: LD_INT 55
29545: PUSH
29546: LD_INT 56
29548: PUSH
29549: LD_INT 57
29551: PUSH
29552: LD_INT 58
29554: PUSH
29555: LD_INT 59
29557: PUSH
29558: LD_INT 63
29560: PUSH
29561: LD_INT 64
29563: PUSH
29564: LD_INT 65
29566: PUSH
29567: LD_INT 82
29569: PUSH
29570: LD_INT 83
29572: PUSH
29573: LD_INT 84
29575: PUSH
29576: LD_INT 85
29578: PUSH
29579: LD_INT 86
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: ST_TO_ADDR
29637: GO 29640
29639: POP
// if state > - 1 and state < 3 then
29640: LD_VAR 0 3
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: GREATER
29649: PUSH
29650: LD_VAR 0 3
29654: PUSH
29655: LD_INT 3
29657: LESS
29658: AND
29659: IFFALSE 29716
// for i in result do
29661: LD_ADDR_VAR 0 5
29665: PUSH
29666: LD_VAR 0 4
29670: PUSH
29671: FOR_IN
29672: IFFALSE 29714
// if GetTech ( i , side ) <> state then
29674: LD_VAR 0 5
29678: PPUSH
29679: LD_VAR 0 1
29683: PPUSH
29684: CALL_OW 321
29688: PUSH
29689: LD_VAR 0 3
29693: NONEQUAL
29694: IFFALSE 29712
// result := result diff i ;
29696: LD_ADDR_VAR 0 4
29700: PUSH
29701: LD_VAR 0 4
29705: PUSH
29706: LD_VAR 0 5
29710: DIFF
29711: ST_TO_ADDR
29712: GO 29671
29714: POP
29715: POP
// end ;
29716: LD_VAR 0 4
29720: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29721: LD_INT 0
29723: PPUSH
29724: PPUSH
29725: PPUSH
// result := true ;
29726: LD_ADDR_VAR 0 3
29730: PUSH
29731: LD_INT 1
29733: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29734: LD_ADDR_VAR 0 5
29738: PUSH
29739: LD_VAR 0 2
29743: PPUSH
29744: CALL_OW 480
29748: ST_TO_ADDR
// if not tmp then
29749: LD_VAR 0 5
29753: NOT
29754: IFFALSE 29758
// exit ;
29756: GO 29807
// for i in tmp do
29758: LD_ADDR_VAR 0 4
29762: PUSH
29763: LD_VAR 0 5
29767: PUSH
29768: FOR_IN
29769: IFFALSE 29805
// if GetTech ( i , side ) <> state_researched then
29771: LD_VAR 0 4
29775: PPUSH
29776: LD_VAR 0 1
29780: PPUSH
29781: CALL_OW 321
29785: PUSH
29786: LD_INT 2
29788: NONEQUAL
29789: IFFALSE 29803
// begin result := false ;
29791: LD_ADDR_VAR 0 3
29795: PUSH
29796: LD_INT 0
29798: ST_TO_ADDR
// exit ;
29799: POP
29800: POP
29801: GO 29807
// end ;
29803: GO 29768
29805: POP
29806: POP
// end ;
29807: LD_VAR 0 3
29811: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29812: LD_INT 0
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29827: LD_VAR 0 1
29831: NOT
29832: PUSH
29833: LD_VAR 0 1
29837: PPUSH
29838: CALL_OW 257
29842: PUSH
29843: LD_INT 9
29845: NONEQUAL
29846: OR
29847: IFFALSE 29851
// exit ;
29849: GO 30424
// side := GetSide ( unit ) ;
29851: LD_ADDR_VAR 0 9
29855: PUSH
29856: LD_VAR 0 1
29860: PPUSH
29861: CALL_OW 255
29865: ST_TO_ADDR
// tech_space := tech_spacanom ;
29866: LD_ADDR_VAR 0 12
29870: PUSH
29871: LD_INT 29
29873: ST_TO_ADDR
// tech_time := tech_taurad ;
29874: LD_ADDR_VAR 0 13
29878: PUSH
29879: LD_INT 28
29881: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29882: LD_ADDR_VAR 0 11
29886: PUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 310
29896: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29897: LD_VAR 0 11
29901: PPUSH
29902: CALL_OW 247
29906: PUSH
29907: LD_INT 2
29909: EQUAL
29910: IFFALSE 29914
// exit ;
29912: GO 30424
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29914: LD_ADDR_VAR 0 8
29918: PUSH
29919: LD_INT 81
29921: PUSH
29922: LD_VAR 0 9
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: LD_INT 21
29936: PUSH
29937: LD_INT 3
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PPUSH
29952: CALL_OW 69
29956: ST_TO_ADDR
// if not tmp then
29957: LD_VAR 0 8
29961: NOT
29962: IFFALSE 29966
// exit ;
29964: GO 30424
// if in_unit then
29966: LD_VAR 0 11
29970: IFFALSE 29994
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29972: LD_ADDR_VAR 0 10
29976: PUSH
29977: LD_VAR 0 8
29981: PPUSH
29982: LD_VAR 0 11
29986: PPUSH
29987: CALL_OW 74
29991: ST_TO_ADDR
29992: GO 30014
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29994: LD_ADDR_VAR 0 10
29998: PUSH
29999: LD_VAR 0 8
30003: PPUSH
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 74
30013: ST_TO_ADDR
// if not enemy then
30014: LD_VAR 0 10
30018: NOT
30019: IFFALSE 30023
// exit ;
30021: GO 30424
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30023: LD_VAR 0 11
30027: PUSH
30028: LD_VAR 0 11
30032: PPUSH
30033: LD_VAR 0 10
30037: PPUSH
30038: CALL_OW 296
30042: PUSH
30043: LD_INT 13
30045: GREATER
30046: AND
30047: PUSH
30048: LD_VAR 0 1
30052: PPUSH
30053: LD_VAR 0 10
30057: PPUSH
30058: CALL_OW 296
30062: PUSH
30063: LD_INT 12
30065: GREATER
30066: OR
30067: IFFALSE 30071
// exit ;
30069: GO 30424
// missile := [ 1 ] ;
30071: LD_ADDR_VAR 0 14
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30082: LD_VAR 0 9
30086: PPUSH
30087: LD_VAR 0 12
30091: PPUSH
30092: CALL_OW 325
30096: IFFALSE 30125
// missile := Replace ( missile , missile + 1 , 2 ) ;
30098: LD_ADDR_VAR 0 14
30102: PUSH
30103: LD_VAR 0 14
30107: PPUSH
30108: LD_VAR 0 14
30112: PUSH
30113: LD_INT 1
30115: PLUS
30116: PPUSH
30117: LD_INT 2
30119: PPUSH
30120: CALL_OW 1
30124: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30125: LD_VAR 0 9
30129: PPUSH
30130: LD_VAR 0 13
30134: PPUSH
30135: CALL_OW 325
30139: PUSH
30140: LD_VAR 0 10
30144: PPUSH
30145: CALL_OW 255
30149: PPUSH
30150: LD_VAR 0 13
30154: PPUSH
30155: CALL_OW 325
30159: NOT
30160: AND
30161: IFFALSE 30190
// missile := Replace ( missile , missile + 1 , 3 ) ;
30163: LD_ADDR_VAR 0 14
30167: PUSH
30168: LD_VAR 0 14
30172: PPUSH
30173: LD_VAR 0 14
30177: PUSH
30178: LD_INT 1
30180: PLUS
30181: PPUSH
30182: LD_INT 3
30184: PPUSH
30185: CALL_OW 1
30189: ST_TO_ADDR
// if missile < 2 then
30190: LD_VAR 0 14
30194: PUSH
30195: LD_INT 2
30197: LESS
30198: IFFALSE 30202
// exit ;
30200: GO 30424
// x := GetX ( enemy ) ;
30202: LD_ADDR_VAR 0 4
30206: PUSH
30207: LD_VAR 0 10
30211: PPUSH
30212: CALL_OW 250
30216: ST_TO_ADDR
// y := GetY ( enemy ) ;
30217: LD_ADDR_VAR 0 5
30221: PUSH
30222: LD_VAR 0 10
30226: PPUSH
30227: CALL_OW 251
30231: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30232: LD_ADDR_VAR 0 6
30236: PUSH
30237: LD_VAR 0 4
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PPUSH
30246: LD_INT 1
30248: PPUSH
30249: CALL_OW 12
30253: PLUS
30254: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30255: LD_ADDR_VAR 0 7
30259: PUSH
30260: LD_VAR 0 5
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PPUSH
30269: LD_INT 1
30271: PPUSH
30272: CALL_OW 12
30276: PLUS
30277: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30278: LD_VAR 0 6
30282: PPUSH
30283: LD_VAR 0 7
30287: PPUSH
30288: CALL_OW 488
30292: NOT
30293: IFFALSE 30315
// begin _x := x ;
30295: LD_ADDR_VAR 0 6
30299: PUSH
30300: LD_VAR 0 4
30304: ST_TO_ADDR
// _y := y ;
30305: LD_ADDR_VAR 0 7
30309: PUSH
30310: LD_VAR 0 5
30314: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30315: LD_ADDR_VAR 0 3
30319: PUSH
30320: LD_INT 1
30322: PPUSH
30323: LD_VAR 0 14
30327: PPUSH
30328: CALL_OW 12
30332: ST_TO_ADDR
// case i of 1 :
30333: LD_VAR 0 3
30337: PUSH
30338: LD_INT 1
30340: DOUBLE
30341: EQUAL
30342: IFTRUE 30346
30344: GO 30363
30346: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30347: LD_VAR 0 1
30351: PPUSH
30352: LD_VAR 0 10
30356: PPUSH
30357: CALL_OW 115
30361: GO 30424
30363: LD_INT 2
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30393
30371: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30372: LD_VAR 0 1
30376: PPUSH
30377: LD_VAR 0 6
30381: PPUSH
30382: LD_VAR 0 7
30386: PPUSH
30387: CALL_OW 153
30391: GO 30424
30393: LD_INT 3
30395: DOUBLE
30396: EQUAL
30397: IFTRUE 30401
30399: GO 30423
30401: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30402: LD_VAR 0 1
30406: PPUSH
30407: LD_VAR 0 6
30411: PPUSH
30412: LD_VAR 0 7
30416: PPUSH
30417: CALL_OW 154
30421: GO 30424
30423: POP
// end ;
30424: LD_VAR 0 2
30428: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30429: LD_INT 0
30431: PPUSH
30432: PPUSH
30433: PPUSH
30434: PPUSH
30435: PPUSH
30436: PPUSH
// if not unit or not building then
30437: LD_VAR 0 1
30441: NOT
30442: PUSH
30443: LD_VAR 0 2
30447: NOT
30448: OR
30449: IFFALSE 30453
// exit ;
30451: GO 30611
// x := GetX ( building ) ;
30453: LD_ADDR_VAR 0 5
30457: PUSH
30458: LD_VAR 0 2
30462: PPUSH
30463: CALL_OW 250
30467: ST_TO_ADDR
// y := GetY ( building ) ;
30468: LD_ADDR_VAR 0 6
30472: PUSH
30473: LD_VAR 0 2
30477: PPUSH
30478: CALL_OW 251
30482: ST_TO_ADDR
// for i = 0 to 5 do
30483: LD_ADDR_VAR 0 4
30487: PUSH
30488: DOUBLE
30489: LD_INT 0
30491: DEC
30492: ST_TO_ADDR
30493: LD_INT 5
30495: PUSH
30496: FOR_TO
30497: IFFALSE 30609
// begin _x := ShiftX ( x , i , 3 ) ;
30499: LD_ADDR_VAR 0 7
30503: PUSH
30504: LD_VAR 0 5
30508: PPUSH
30509: LD_VAR 0 4
30513: PPUSH
30514: LD_INT 3
30516: PPUSH
30517: CALL_OW 272
30521: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30522: LD_ADDR_VAR 0 8
30526: PUSH
30527: LD_VAR 0 6
30531: PPUSH
30532: LD_VAR 0 4
30536: PPUSH
30537: LD_INT 3
30539: PPUSH
30540: CALL_OW 273
30544: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30545: LD_VAR 0 7
30549: PPUSH
30550: LD_VAR 0 8
30554: PPUSH
30555: CALL_OW 488
30559: NOT
30560: IFFALSE 30564
// continue ;
30562: GO 30496
// if HexInfo ( _x , _y ) = 0 then
30564: LD_VAR 0 7
30568: PPUSH
30569: LD_VAR 0 8
30573: PPUSH
30574: CALL_OW 428
30578: PUSH
30579: LD_INT 0
30581: EQUAL
30582: IFFALSE 30607
// begin ComMoveXY ( unit , _x , _y ) ;
30584: LD_VAR 0 1
30588: PPUSH
30589: LD_VAR 0 7
30593: PPUSH
30594: LD_VAR 0 8
30598: PPUSH
30599: CALL_OW 111
// exit ;
30603: POP
30604: POP
30605: GO 30611
// end ; end ;
30607: GO 30496
30609: POP
30610: POP
// end ;
30611: LD_VAR 0 3
30615: RET
// export function ScanBase ( side , base_area ) ; begin
30616: LD_INT 0
30618: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30619: LD_ADDR_VAR 0 3
30623: PUSH
30624: LD_VAR 0 2
30628: PPUSH
30629: LD_INT 81
30631: PUSH
30632: LD_VAR 0 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PPUSH
30641: CALL_OW 70
30645: ST_TO_ADDR
// end ;
30646: LD_VAR 0 3
30650: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30651: LD_INT 0
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
// result := false ;
30657: LD_ADDR_VAR 0 2
30661: PUSH
30662: LD_INT 0
30664: ST_TO_ADDR
// side := GetSide ( unit ) ;
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_VAR 0 1
30674: PPUSH
30675: CALL_OW 255
30679: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30680: LD_ADDR_VAR 0 4
30684: PUSH
30685: LD_VAR 0 1
30689: PPUSH
30690: CALL_OW 248
30694: ST_TO_ADDR
// case nat of 1 :
30695: LD_VAR 0 4
30699: PUSH
30700: LD_INT 1
30702: DOUBLE
30703: EQUAL
30704: IFTRUE 30708
30706: GO 30719
30708: POP
// tech := tech_lassight ; 2 :
30709: LD_ADDR_VAR 0 5
30713: PUSH
30714: LD_INT 12
30716: ST_TO_ADDR
30717: GO 30758
30719: LD_INT 2
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30738
30727: POP
// tech := tech_mortar ; 3 :
30728: LD_ADDR_VAR 0 5
30732: PUSH
30733: LD_INT 41
30735: ST_TO_ADDR
30736: GO 30758
30738: LD_INT 3
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30757
30746: POP
// tech := tech_bazooka ; end ;
30747: LD_ADDR_VAR 0 5
30751: PUSH
30752: LD_INT 44
30754: ST_TO_ADDR
30755: GO 30758
30757: POP
// if Researched ( side , tech ) then
30758: LD_VAR 0 3
30762: PPUSH
30763: LD_VAR 0 5
30767: PPUSH
30768: CALL_OW 325
30772: IFFALSE 30799
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30774: LD_ADDR_VAR 0 2
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: LD_INT 8
30784: PUSH
30785: LD_INT 9
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: PUSH
30793: LD_VAR 0 4
30797: ARRAY
30798: ST_TO_ADDR
// end ;
30799: LD_VAR 0 2
30803: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30804: LD_INT 0
30806: PPUSH
30807: PPUSH
30808: PPUSH
// if not mines then
30809: LD_VAR 0 2
30813: NOT
30814: IFFALSE 30818
// exit ;
30816: GO 30962
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30818: LD_ADDR_VAR 0 5
30822: PUSH
30823: LD_INT 81
30825: PUSH
30826: LD_VAR 0 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 3
30837: PUSH
30838: LD_INT 21
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PPUSH
30856: CALL_OW 69
30860: ST_TO_ADDR
// for i in mines do
30861: LD_ADDR_VAR 0 4
30865: PUSH
30866: LD_VAR 0 2
30870: PUSH
30871: FOR_IN
30872: IFFALSE 30960
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30874: LD_VAR 0 4
30878: PUSH
30879: LD_INT 1
30881: ARRAY
30882: PPUSH
30883: LD_VAR 0 4
30887: PUSH
30888: LD_INT 2
30890: ARRAY
30891: PPUSH
30892: CALL_OW 458
30896: NOT
30897: IFFALSE 30901
// continue ;
30899: GO 30871
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30901: LD_VAR 0 4
30905: PUSH
30906: LD_INT 1
30908: ARRAY
30909: PPUSH
30910: LD_VAR 0 4
30914: PUSH
30915: LD_INT 2
30917: ARRAY
30918: PPUSH
30919: CALL_OW 428
30923: PUSH
30924: LD_VAR 0 5
30928: IN
30929: IFFALSE 30958
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30931: LD_VAR 0 4
30935: PUSH
30936: LD_INT 1
30938: ARRAY
30939: PPUSH
30940: LD_VAR 0 4
30944: PUSH
30945: LD_INT 2
30947: ARRAY
30948: PPUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 456
// end ;
30958: GO 30871
30960: POP
30961: POP
// end ;
30962: LD_VAR 0 3
30966: RET
// export function Count ( array ) ; begin
30967: LD_INT 0
30969: PPUSH
// result := array + 0 ;
30970: LD_ADDR_VAR 0 2
30974: PUSH
30975: LD_VAR 0 1
30979: PUSH
30980: LD_INT 0
30982: PLUS
30983: ST_TO_ADDR
// end ;
30984: LD_VAR 0 2
30988: RET
// export function IsEmpty ( building ) ; begin
30989: LD_INT 0
30991: PPUSH
// if not building then
30992: LD_VAR 0 1
30996: NOT
30997: IFFALSE 31001
// exit ;
30999: GO 31044
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31001: LD_ADDR_VAR 0 2
31005: PUSH
31006: LD_VAR 0 1
31010: PUSH
31011: LD_INT 22
31013: PUSH
31014: LD_VAR 0 1
31018: PPUSH
31019: CALL_OW 255
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 58
31030: PUSH
31031: EMPTY
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PPUSH
31038: CALL_OW 69
31042: IN
31043: ST_TO_ADDR
// end ;
31044: LD_VAR 0 2
31048: RET
// export function IsNotFull ( building ) ; var places ; begin
31049: LD_INT 0
31051: PPUSH
31052: PPUSH
// if not building then
31053: LD_VAR 0 1
31057: NOT
31058: IFFALSE 31062
// exit ;
31060: GO 31233
// result := false ;
31062: LD_ADDR_VAR 0 2
31066: PUSH
31067: LD_INT 0
31069: ST_TO_ADDR
// places := 0 ;
31070: LD_ADDR_VAR 0 3
31074: PUSH
31075: LD_INT 0
31077: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31078: LD_VAR 0 1
31082: PPUSH
31083: CALL_OW 266
31087: PUSH
31088: LD_INT 0
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31150
31094: LD_INT 1
31096: DOUBLE
31097: EQUAL
31098: IFTRUE 31150
31100: LD_INT 6
31102: DOUBLE
31103: EQUAL
31104: IFTRUE 31150
31106: LD_INT 7
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31150
31112: LD_INT 8
31114: DOUBLE
31115: EQUAL
31116: IFTRUE 31150
31118: LD_INT 4
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31150
31124: LD_INT 5
31126: DOUBLE
31127: EQUAL
31128: IFTRUE 31150
31130: LD_INT 2
31132: DOUBLE
31133: EQUAL
31134: IFTRUE 31150
31136: LD_INT 3
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31150
31142: LD_INT 35
31144: DOUBLE
31145: EQUAL
31146: IFTRUE 31150
31148: GO 31161
31150: POP
// places := 6 ; b_bunker , b_breastwork :
31151: LD_ADDR_VAR 0 3
31155: PUSH
31156: LD_INT 6
31158: ST_TO_ADDR
31159: GO 31206
31161: LD_INT 32
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31175
31167: LD_INT 31
31169: DOUBLE
31170: EQUAL
31171: IFTRUE 31175
31173: GO 31186
31175: POP
// places := 1 ; b_control_tower :
31176: LD_ADDR_VAR 0 3
31180: PUSH
31181: LD_INT 1
31183: ST_TO_ADDR
31184: GO 31206
31186: LD_INT 36
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 31205
31194: POP
// places := 3 ; end ;
31195: LD_ADDR_VAR 0 3
31199: PUSH
31200: LD_INT 3
31202: ST_TO_ADDR
31203: GO 31206
31205: POP
// if places then
31206: LD_VAR 0 3
31210: IFFALSE 31233
// result := UnitsInside ( building ) < places ;
31212: LD_ADDR_VAR 0 2
31216: PUSH
31217: LD_VAR 0 1
31221: PPUSH
31222: CALL_OW 313
31226: PUSH
31227: LD_VAR 0 3
31231: LESS
31232: ST_TO_ADDR
// end ;
31233: LD_VAR 0 2
31237: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31238: LD_INT 0
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
// tmp := [ ] ;
31244: LD_ADDR_VAR 0 3
31248: PUSH
31249: EMPTY
31250: ST_TO_ADDR
// list := [ ] ;
31251: LD_ADDR_VAR 0 5
31255: PUSH
31256: EMPTY
31257: ST_TO_ADDR
// for i = 16 to 25 do
31258: LD_ADDR_VAR 0 4
31262: PUSH
31263: DOUBLE
31264: LD_INT 16
31266: DEC
31267: ST_TO_ADDR
31268: LD_INT 25
31270: PUSH
31271: FOR_TO
31272: IFFALSE 31345
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31274: LD_ADDR_VAR 0 3
31278: PUSH
31279: LD_VAR 0 3
31283: PUSH
31284: LD_INT 22
31286: PUSH
31287: LD_VAR 0 1
31291: PPUSH
31292: CALL_OW 255
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 91
31303: PUSH
31304: LD_VAR 0 1
31308: PUSH
31309: LD_INT 6
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 30
31319: PUSH
31320: LD_VAR 0 4
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: PPUSH
31337: CALL_OW 69
31341: ADD
31342: ST_TO_ADDR
31343: GO 31271
31345: POP
31346: POP
// for i = 1 to tmp do
31347: LD_ADDR_VAR 0 4
31351: PUSH
31352: DOUBLE
31353: LD_INT 1
31355: DEC
31356: ST_TO_ADDR
31357: LD_VAR 0 3
31361: PUSH
31362: FOR_TO
31363: IFFALSE 31451
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31365: LD_ADDR_VAR 0 5
31369: PUSH
31370: LD_VAR 0 5
31374: PUSH
31375: LD_VAR 0 3
31379: PUSH
31380: LD_VAR 0 4
31384: ARRAY
31385: PPUSH
31386: CALL_OW 266
31390: PUSH
31391: LD_VAR 0 3
31395: PUSH
31396: LD_VAR 0 4
31400: ARRAY
31401: PPUSH
31402: CALL_OW 250
31406: PUSH
31407: LD_VAR 0 3
31411: PUSH
31412: LD_VAR 0 4
31416: ARRAY
31417: PPUSH
31418: CALL_OW 251
31422: PUSH
31423: LD_VAR 0 3
31427: PUSH
31428: LD_VAR 0 4
31432: ARRAY
31433: PPUSH
31434: CALL_OW 254
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: PUSH
31445: EMPTY
31446: LIST
31447: ADD
31448: ST_TO_ADDR
31449: GO 31362
31451: POP
31452: POP
// result := list ;
31453: LD_ADDR_VAR 0 2
31457: PUSH
31458: LD_VAR 0 5
31462: ST_TO_ADDR
// end ;
31463: LD_VAR 0 2
31467: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31468: LD_INT 0
31470: PPUSH
31471: PPUSH
31472: PPUSH
31473: PPUSH
31474: PPUSH
31475: PPUSH
31476: PPUSH
// if not factory then
31477: LD_VAR 0 1
31481: NOT
31482: IFFALSE 31486
// exit ;
31484: GO 32079
// if control = control_apeman then
31486: LD_VAR 0 4
31490: PUSH
31491: LD_INT 5
31493: EQUAL
31494: IFFALSE 31603
// begin tmp := UnitsInside ( factory ) ;
31496: LD_ADDR_VAR 0 8
31500: PUSH
31501: LD_VAR 0 1
31505: PPUSH
31506: CALL_OW 313
31510: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31511: LD_VAR 0 8
31515: PPUSH
31516: LD_INT 25
31518: PUSH
31519: LD_INT 12
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PPUSH
31526: CALL_OW 72
31530: NOT
31531: IFFALSE 31541
// control := control_manual ;
31533: LD_ADDR_VAR 0 4
31537: PUSH
31538: LD_INT 1
31540: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31541: LD_ADDR_VAR 0 8
31545: PUSH
31546: LD_VAR 0 1
31550: PPUSH
31551: CALL 31238 0 1
31555: ST_TO_ADDR
// if tmp then
31556: LD_VAR 0 8
31560: IFFALSE 31603
// begin for i in tmp do
31562: LD_ADDR_VAR 0 7
31566: PUSH
31567: LD_VAR 0 8
31571: PUSH
31572: FOR_IN
31573: IFFALSE 31601
// if i [ 1 ] = b_ext_radio then
31575: LD_VAR 0 7
31579: PUSH
31580: LD_INT 1
31582: ARRAY
31583: PUSH
31584: LD_INT 22
31586: EQUAL
31587: IFFALSE 31599
// begin control := control_remote ;
31589: LD_ADDR_VAR 0 4
31593: PUSH
31594: LD_INT 2
31596: ST_TO_ADDR
// break ;
31597: GO 31601
// end ;
31599: GO 31572
31601: POP
31602: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31603: LD_VAR 0 1
31607: PPUSH
31608: LD_VAR 0 2
31612: PPUSH
31613: LD_VAR 0 3
31617: PPUSH
31618: LD_VAR 0 4
31622: PPUSH
31623: LD_VAR 0 5
31627: PPUSH
31628: CALL_OW 448
31632: IFFALSE 31667
// begin result := [ chassis , engine , control , weapon ] ;
31634: LD_ADDR_VAR 0 6
31638: PUSH
31639: LD_VAR 0 2
31643: PUSH
31644: LD_VAR 0 3
31648: PUSH
31649: LD_VAR 0 4
31653: PUSH
31654: LD_VAR 0 5
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: ST_TO_ADDR
// exit ;
31665: GO 32079
// end ; _chassis := AvailableChassisList ( factory ) ;
31667: LD_ADDR_VAR 0 9
31671: PUSH
31672: LD_VAR 0 1
31676: PPUSH
31677: CALL_OW 475
31681: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31682: LD_ADDR_VAR 0 11
31686: PUSH
31687: LD_VAR 0 1
31691: PPUSH
31692: CALL_OW 476
31696: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31697: LD_ADDR_VAR 0 12
31701: PUSH
31702: LD_VAR 0 1
31706: PPUSH
31707: CALL_OW 477
31711: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31712: LD_ADDR_VAR 0 10
31716: PUSH
31717: LD_VAR 0 1
31721: PPUSH
31722: CALL_OW 478
31726: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31727: LD_VAR 0 9
31731: NOT
31732: PUSH
31733: LD_VAR 0 11
31737: NOT
31738: OR
31739: PUSH
31740: LD_VAR 0 12
31744: NOT
31745: OR
31746: PUSH
31747: LD_VAR 0 10
31751: NOT
31752: OR
31753: IFFALSE 31788
// begin result := [ chassis , engine , control , weapon ] ;
31755: LD_ADDR_VAR 0 6
31759: PUSH
31760: LD_VAR 0 2
31764: PUSH
31765: LD_VAR 0 3
31769: PUSH
31770: LD_VAR 0 4
31774: PUSH
31775: LD_VAR 0 5
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: ST_TO_ADDR
// exit ;
31786: GO 32079
// end ; if not chassis in _chassis then
31788: LD_VAR 0 2
31792: PUSH
31793: LD_VAR 0 9
31797: IN
31798: NOT
31799: IFFALSE 31825
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31801: LD_ADDR_VAR 0 2
31805: PUSH
31806: LD_VAR 0 9
31810: PUSH
31811: LD_INT 1
31813: PPUSH
31814: LD_VAR 0 9
31818: PPUSH
31819: CALL_OW 12
31823: ARRAY
31824: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31825: LD_VAR 0 2
31829: PPUSH
31830: LD_VAR 0 3
31834: PPUSH
31835: CALL 32084 0 2
31839: NOT
31840: IFFALSE 31899
// repeat engine := _engine [ 1 ] ;
31842: LD_ADDR_VAR 0 3
31846: PUSH
31847: LD_VAR 0 11
31851: PUSH
31852: LD_INT 1
31854: ARRAY
31855: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31856: LD_ADDR_VAR 0 11
31860: PUSH
31861: LD_VAR 0 11
31865: PPUSH
31866: LD_INT 1
31868: PPUSH
31869: CALL_OW 3
31873: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31874: LD_VAR 0 2
31878: PPUSH
31879: LD_VAR 0 3
31883: PPUSH
31884: CALL 32084 0 2
31888: PUSH
31889: LD_VAR 0 11
31893: PUSH
31894: EMPTY
31895: EQUAL
31896: OR
31897: IFFALSE 31842
// if not control in _control then
31899: LD_VAR 0 4
31903: PUSH
31904: LD_VAR 0 12
31908: IN
31909: NOT
31910: IFFALSE 31936
// control := _control [ rand ( 1 , _control ) ] ;
31912: LD_ADDR_VAR 0 4
31916: PUSH
31917: LD_VAR 0 12
31921: PUSH
31922: LD_INT 1
31924: PPUSH
31925: LD_VAR 0 12
31929: PPUSH
31930: CALL_OW 12
31934: ARRAY
31935: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31936: LD_VAR 0 2
31940: PPUSH
31941: LD_VAR 0 5
31945: PPUSH
31946: CALL 32304 0 2
31950: NOT
31951: IFFALSE 32010
// repeat weapon := _weapon [ 1 ] ;
31953: LD_ADDR_VAR 0 5
31957: PUSH
31958: LD_VAR 0 10
31962: PUSH
31963: LD_INT 1
31965: ARRAY
31966: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31967: LD_ADDR_VAR 0 10
31971: PUSH
31972: LD_VAR 0 10
31976: PPUSH
31977: LD_INT 1
31979: PPUSH
31980: CALL_OW 3
31984: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31985: LD_VAR 0 2
31989: PPUSH
31990: LD_VAR 0 5
31994: PPUSH
31995: CALL 32304 0 2
31999: PUSH
32000: LD_VAR 0 10
32004: PUSH
32005: EMPTY
32006: EQUAL
32007: OR
32008: IFFALSE 31953
// result := [ ] ;
32010: LD_ADDR_VAR 0 6
32014: PUSH
32015: EMPTY
32016: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32017: LD_VAR 0 1
32021: PPUSH
32022: LD_VAR 0 2
32026: PPUSH
32027: LD_VAR 0 3
32031: PPUSH
32032: LD_VAR 0 4
32036: PPUSH
32037: LD_VAR 0 5
32041: PPUSH
32042: CALL_OW 448
32046: IFFALSE 32079
// result := [ chassis , engine , control , weapon ] ;
32048: LD_ADDR_VAR 0 6
32052: PUSH
32053: LD_VAR 0 2
32057: PUSH
32058: LD_VAR 0 3
32062: PUSH
32063: LD_VAR 0 4
32067: PUSH
32068: LD_VAR 0 5
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
// end ;
32079: LD_VAR 0 6
32083: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32084: LD_INT 0
32086: PPUSH
// if not chassis or not engine then
32087: LD_VAR 0 1
32091: NOT
32092: PUSH
32093: LD_VAR 0 2
32097: NOT
32098: OR
32099: IFFALSE 32103
// exit ;
32101: GO 32299
// case engine of engine_solar :
32103: LD_VAR 0 2
32107: PUSH
32108: LD_INT 2
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32154
32116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 11
32124: PUSH
32125: LD_INT 12
32127: PUSH
32128: LD_INT 13
32130: PUSH
32131: LD_INT 14
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: LD_INT 3
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: ST_TO_ADDR
32152: GO 32283
32154: LD_INT 1
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32224
32162: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32163: LD_ADDR_VAR 0 3
32167: PUSH
32168: LD_INT 11
32170: PUSH
32171: LD_INT 12
32173: PUSH
32174: LD_INT 13
32176: PUSH
32177: LD_INT 14
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: LD_INT 5
32194: PUSH
32195: LD_INT 21
32197: PUSH
32198: LD_INT 23
32200: PUSH
32201: LD_INT 22
32203: PUSH
32204: LD_INT 24
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
32222: GO 32283
32224: LD_INT 3
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32232
32230: GO 32282
32232: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32233: LD_ADDR_VAR 0 3
32237: PUSH
32238: LD_INT 13
32240: PUSH
32241: LD_INT 14
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: LD_INT 4
32252: PUSH
32253: LD_INT 5
32255: PUSH
32256: LD_INT 21
32258: PUSH
32259: LD_INT 22
32261: PUSH
32262: LD_INT 23
32264: PUSH
32265: LD_INT 24
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: ST_TO_ADDR
32280: GO 32283
32282: POP
// result := ( chassis in result ) ;
32283: LD_ADDR_VAR 0 3
32287: PUSH
32288: LD_VAR 0 1
32292: PUSH
32293: LD_VAR 0 3
32297: IN
32298: ST_TO_ADDR
// end ;
32299: LD_VAR 0 3
32303: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32304: LD_INT 0
32306: PPUSH
// if not chassis or not weapon then
32307: LD_VAR 0 1
32311: NOT
32312: PUSH
32313: LD_VAR 0 2
32317: NOT
32318: OR
32319: IFFALSE 32323
// exit ;
32321: GO 33383
// case weapon of us_machine_gun :
32323: LD_VAR 0 2
32327: PUSH
32328: LD_INT 2
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32336
32334: GO 32366
32336: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32337: LD_ADDR_VAR 0 3
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 3
32350: PUSH
32351: LD_INT 4
32353: PUSH
32354: LD_INT 5
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: ST_TO_ADDR
32364: GO 33367
32366: LD_INT 3
32368: DOUBLE
32369: EQUAL
32370: IFTRUE 32374
32372: GO 32404
32374: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32375: LD_ADDR_VAR 0 3
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: LD_INT 3
32388: PUSH
32389: LD_INT 4
32391: PUSH
32392: LD_INT 5
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: ST_TO_ADDR
32402: GO 33367
32404: LD_INT 11
32406: DOUBLE
32407: EQUAL
32408: IFTRUE 32412
32410: GO 32442
32412: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32413: LD_ADDR_VAR 0 3
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: LD_INT 3
32426: PUSH
32427: LD_INT 4
32429: PUSH
32430: LD_INT 5
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: ST_TO_ADDR
32440: GO 33367
32442: LD_INT 4
32444: DOUBLE
32445: EQUAL
32446: IFTRUE 32450
32448: GO 32476
32450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32451: LD_ADDR_VAR 0 3
32455: PUSH
32456: LD_INT 2
32458: PUSH
32459: LD_INT 3
32461: PUSH
32462: LD_INT 4
32464: PUSH
32465: LD_INT 5
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: ST_TO_ADDR
32474: GO 33367
32476: LD_INT 5
32478: DOUBLE
32479: EQUAL
32480: IFTRUE 32484
32482: GO 32510
32484: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32485: LD_ADDR_VAR 0 3
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: LD_INT 4
32498: PUSH
32499: LD_INT 5
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: ST_TO_ADDR
32508: GO 33367
32510: LD_INT 9
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32544
32518: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32519: LD_ADDR_VAR 0 3
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: LD_INT 4
32532: PUSH
32533: LD_INT 5
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: ST_TO_ADDR
32542: GO 33367
32544: LD_INT 7
32546: DOUBLE
32547: EQUAL
32548: IFTRUE 32552
32550: GO 32578
32552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32553: LD_ADDR_VAR 0 3
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: LD_INT 3
32563: PUSH
32564: LD_INT 4
32566: PUSH
32567: LD_INT 5
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: ST_TO_ADDR
32576: GO 33367
32578: LD_INT 12
32580: DOUBLE
32581: EQUAL
32582: IFTRUE 32586
32584: GO 32612
32586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32587: LD_ADDR_VAR 0 3
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: LD_INT 3
32597: PUSH
32598: LD_INT 4
32600: PUSH
32601: LD_INT 5
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: ST_TO_ADDR
32610: GO 33367
32612: LD_INT 13
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32620
32618: GO 32646
32620: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32621: LD_ADDR_VAR 0 3
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: LD_INT 5
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: ST_TO_ADDR
32644: GO 33367
32646: LD_INT 14
32648: DOUBLE
32649: EQUAL
32650: IFTRUE 32654
32652: GO 32672
32654: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32655: LD_ADDR_VAR 0 3
32659: PUSH
32660: LD_INT 4
32662: PUSH
32663: LD_INT 5
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: ST_TO_ADDR
32670: GO 33367
32672: LD_INT 6
32674: DOUBLE
32675: EQUAL
32676: IFTRUE 32680
32678: GO 32698
32680: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32681: LD_ADDR_VAR 0 3
32685: PUSH
32686: LD_INT 4
32688: PUSH
32689: LD_INT 5
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: ST_TO_ADDR
32696: GO 33367
32698: LD_INT 10
32700: DOUBLE
32701: EQUAL
32702: IFTRUE 32706
32704: GO 32724
32706: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32707: LD_ADDR_VAR 0 3
32711: PUSH
32712: LD_INT 4
32714: PUSH
32715: LD_INT 5
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: ST_TO_ADDR
32722: GO 33367
32724: LD_INT 22
32726: DOUBLE
32727: EQUAL
32728: IFTRUE 32732
32730: GO 32758
32732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32733: LD_ADDR_VAR 0 3
32737: PUSH
32738: LD_INT 11
32740: PUSH
32741: LD_INT 12
32743: PUSH
32744: LD_INT 13
32746: PUSH
32747: LD_INT 14
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: ST_TO_ADDR
32756: GO 33367
32758: LD_INT 23
32760: DOUBLE
32761: EQUAL
32762: IFTRUE 32766
32764: GO 32792
32766: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32767: LD_ADDR_VAR 0 3
32771: PUSH
32772: LD_INT 11
32774: PUSH
32775: LD_INT 12
32777: PUSH
32778: LD_INT 13
32780: PUSH
32781: LD_INT 14
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: ST_TO_ADDR
32790: GO 33367
32792: LD_INT 24
32794: DOUBLE
32795: EQUAL
32796: IFTRUE 32800
32798: GO 32826
32800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32801: LD_ADDR_VAR 0 3
32805: PUSH
32806: LD_INT 11
32808: PUSH
32809: LD_INT 12
32811: PUSH
32812: LD_INT 13
32814: PUSH
32815: LD_INT 14
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: ST_TO_ADDR
32824: GO 33367
32826: LD_INT 30
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32834
32832: GO 32860
32834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32835: LD_ADDR_VAR 0 3
32839: PUSH
32840: LD_INT 11
32842: PUSH
32843: LD_INT 12
32845: PUSH
32846: LD_INT 13
32848: PUSH
32849: LD_INT 14
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
32858: GO 33367
32860: LD_INT 25
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32886
32868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32869: LD_ADDR_VAR 0 3
32873: PUSH
32874: LD_INT 13
32876: PUSH
32877: LD_INT 14
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: ST_TO_ADDR
32884: GO 33367
32886: LD_INT 27
32888: DOUBLE
32889: EQUAL
32890: IFTRUE 32894
32892: GO 32912
32894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32895: LD_ADDR_VAR 0 3
32899: PUSH
32900: LD_INT 13
32902: PUSH
32903: LD_INT 14
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: ST_TO_ADDR
32910: GO 33367
32912: LD_INT 92
32914: DOUBLE
32915: EQUAL
32916: IFTRUE 32920
32918: GO 32946
32920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32921: LD_ADDR_VAR 0 3
32925: PUSH
32926: LD_INT 11
32928: PUSH
32929: LD_INT 12
32931: PUSH
32932: LD_INT 13
32934: PUSH
32935: LD_INT 14
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: ST_TO_ADDR
32944: GO 33367
32946: LD_INT 28
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32954
32952: GO 32972
32954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32955: LD_ADDR_VAR 0 3
32959: PUSH
32960: LD_INT 13
32962: PUSH
32963: LD_INT 14
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: ST_TO_ADDR
32970: GO 33367
32972: LD_INT 29
32974: DOUBLE
32975: EQUAL
32976: IFTRUE 32980
32978: GO 32998
32980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32981: LD_ADDR_VAR 0 3
32985: PUSH
32986: LD_INT 13
32988: PUSH
32989: LD_INT 14
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: ST_TO_ADDR
32996: GO 33367
32998: LD_INT 31
33000: DOUBLE
33001: EQUAL
33002: IFTRUE 33006
33004: GO 33024
33006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33007: LD_ADDR_VAR 0 3
33011: PUSH
33012: LD_INT 13
33014: PUSH
33015: LD_INT 14
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: ST_TO_ADDR
33022: GO 33367
33024: LD_INT 26
33026: DOUBLE
33027: EQUAL
33028: IFTRUE 33032
33030: GO 33050
33032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33033: LD_ADDR_VAR 0 3
33037: PUSH
33038: LD_INT 13
33040: PUSH
33041: LD_INT 14
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: ST_TO_ADDR
33048: GO 33367
33050: LD_INT 42
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33084
33058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33059: LD_ADDR_VAR 0 3
33063: PUSH
33064: LD_INT 21
33066: PUSH
33067: LD_INT 22
33069: PUSH
33070: LD_INT 23
33072: PUSH
33073: LD_INT 24
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: ST_TO_ADDR
33082: GO 33367
33084: LD_INT 43
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33118
33092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33093: LD_ADDR_VAR 0 3
33097: PUSH
33098: LD_INT 21
33100: PUSH
33101: LD_INT 22
33103: PUSH
33104: LD_INT 23
33106: PUSH
33107: LD_INT 24
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
33116: GO 33367
33118: LD_INT 44
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33126
33124: GO 33152
33126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33127: LD_ADDR_VAR 0 3
33131: PUSH
33132: LD_INT 21
33134: PUSH
33135: LD_INT 22
33137: PUSH
33138: LD_INT 23
33140: PUSH
33141: LD_INT 24
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: ST_TO_ADDR
33150: GO 33367
33152: LD_INT 45
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33160
33158: GO 33186
33160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33161: LD_ADDR_VAR 0 3
33165: PUSH
33166: LD_INT 21
33168: PUSH
33169: LD_INT 22
33171: PUSH
33172: LD_INT 23
33174: PUSH
33175: LD_INT 24
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: ST_TO_ADDR
33184: GO 33367
33186: LD_INT 49
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33220
33194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33195: LD_ADDR_VAR 0 3
33199: PUSH
33200: LD_INT 21
33202: PUSH
33203: LD_INT 22
33205: PUSH
33206: LD_INT 23
33208: PUSH
33209: LD_INT 24
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
33218: GO 33367
33220: LD_INT 51
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33228
33226: GO 33254
33228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33229: LD_ADDR_VAR 0 3
33233: PUSH
33234: LD_INT 21
33236: PUSH
33237: LD_INT 22
33239: PUSH
33240: LD_INT 23
33242: PUSH
33243: LD_INT 24
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: ST_TO_ADDR
33252: GO 33367
33254: LD_INT 52
33256: DOUBLE
33257: EQUAL
33258: IFTRUE 33262
33260: GO 33288
33262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33263: LD_ADDR_VAR 0 3
33267: PUSH
33268: LD_INT 21
33270: PUSH
33271: LD_INT 22
33273: PUSH
33274: LD_INT 23
33276: PUSH
33277: LD_INT 24
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: ST_TO_ADDR
33286: GO 33367
33288: LD_INT 53
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33314
33296: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33297: LD_ADDR_VAR 0 3
33301: PUSH
33302: LD_INT 23
33304: PUSH
33305: LD_INT 24
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: ST_TO_ADDR
33312: GO 33367
33314: LD_INT 46
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33340
33322: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33323: LD_ADDR_VAR 0 3
33327: PUSH
33328: LD_INT 23
33330: PUSH
33331: LD_INT 24
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: ST_TO_ADDR
33338: GO 33367
33340: LD_INT 47
33342: DOUBLE
33343: EQUAL
33344: IFTRUE 33348
33346: GO 33366
33348: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33349: LD_ADDR_VAR 0 3
33353: PUSH
33354: LD_INT 23
33356: PUSH
33357: LD_INT 24
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: ST_TO_ADDR
33364: GO 33367
33366: POP
// result := ( chassis in result ) ;
33367: LD_ADDR_VAR 0 3
33371: PUSH
33372: LD_VAR 0 1
33376: PUSH
33377: LD_VAR 0 3
33381: IN
33382: ST_TO_ADDR
// end ;
33383: LD_VAR 0 3
33387: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33388: LD_INT 0
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
// result := array ;
33397: LD_ADDR_VAR 0 5
33401: PUSH
33402: LD_VAR 0 1
33406: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33407: LD_VAR 0 1
33411: NOT
33412: PUSH
33413: LD_VAR 0 2
33417: NOT
33418: OR
33419: PUSH
33420: LD_VAR 0 3
33424: NOT
33425: OR
33426: PUSH
33427: LD_VAR 0 2
33431: PUSH
33432: LD_VAR 0 1
33436: GREATER
33437: OR
33438: PUSH
33439: LD_VAR 0 3
33443: PUSH
33444: LD_VAR 0 1
33448: GREATER
33449: OR
33450: IFFALSE 33454
// exit ;
33452: GO 33750
// if direction then
33454: LD_VAR 0 4
33458: IFFALSE 33522
// begin d := 1 ;
33460: LD_ADDR_VAR 0 9
33464: PUSH
33465: LD_INT 1
33467: ST_TO_ADDR
// if i_from > i_to then
33468: LD_VAR 0 2
33472: PUSH
33473: LD_VAR 0 3
33477: GREATER
33478: IFFALSE 33504
// length := ( array - i_from ) + i_to else
33480: LD_ADDR_VAR 0 11
33484: PUSH
33485: LD_VAR 0 1
33489: PUSH
33490: LD_VAR 0 2
33494: MINUS
33495: PUSH
33496: LD_VAR 0 3
33500: PLUS
33501: ST_TO_ADDR
33502: GO 33520
// length := i_to - i_from ;
33504: LD_ADDR_VAR 0 11
33508: PUSH
33509: LD_VAR 0 3
33513: PUSH
33514: LD_VAR 0 2
33518: MINUS
33519: ST_TO_ADDR
// end else
33520: GO 33583
// begin d := - 1 ;
33522: LD_ADDR_VAR 0 9
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: ST_TO_ADDR
// if i_from > i_to then
33531: LD_VAR 0 2
33535: PUSH
33536: LD_VAR 0 3
33540: GREATER
33541: IFFALSE 33561
// length := i_from - i_to else
33543: LD_ADDR_VAR 0 11
33547: PUSH
33548: LD_VAR 0 2
33552: PUSH
33553: LD_VAR 0 3
33557: MINUS
33558: ST_TO_ADDR
33559: GO 33583
// length := ( array - i_to ) + i_from ;
33561: LD_ADDR_VAR 0 11
33565: PUSH
33566: LD_VAR 0 1
33570: PUSH
33571: LD_VAR 0 3
33575: MINUS
33576: PUSH
33577: LD_VAR 0 2
33581: PLUS
33582: ST_TO_ADDR
// end ; if not length then
33583: LD_VAR 0 11
33587: NOT
33588: IFFALSE 33592
// exit ;
33590: GO 33750
// tmp := array ;
33592: LD_ADDR_VAR 0 10
33596: PUSH
33597: LD_VAR 0 1
33601: ST_TO_ADDR
// for i = 1 to length do
33602: LD_ADDR_VAR 0 6
33606: PUSH
33607: DOUBLE
33608: LD_INT 1
33610: DEC
33611: ST_TO_ADDR
33612: LD_VAR 0 11
33616: PUSH
33617: FOR_TO
33618: IFFALSE 33738
// begin for j = 1 to array do
33620: LD_ADDR_VAR 0 7
33624: PUSH
33625: DOUBLE
33626: LD_INT 1
33628: DEC
33629: ST_TO_ADDR
33630: LD_VAR 0 1
33634: PUSH
33635: FOR_TO
33636: IFFALSE 33724
// begin k := j + d ;
33638: LD_ADDR_VAR 0 8
33642: PUSH
33643: LD_VAR 0 7
33647: PUSH
33648: LD_VAR 0 9
33652: PLUS
33653: ST_TO_ADDR
// if k > array then
33654: LD_VAR 0 8
33658: PUSH
33659: LD_VAR 0 1
33663: GREATER
33664: IFFALSE 33674
// k := 1 ;
33666: LD_ADDR_VAR 0 8
33670: PUSH
33671: LD_INT 1
33673: ST_TO_ADDR
// if not k then
33674: LD_VAR 0 8
33678: NOT
33679: IFFALSE 33691
// k := array ;
33681: LD_ADDR_VAR 0 8
33685: PUSH
33686: LD_VAR 0 1
33690: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33691: LD_ADDR_VAR 0 10
33695: PUSH
33696: LD_VAR 0 10
33700: PPUSH
33701: LD_VAR 0 8
33705: PPUSH
33706: LD_VAR 0 1
33710: PUSH
33711: LD_VAR 0 7
33715: ARRAY
33716: PPUSH
33717: CALL_OW 1
33721: ST_TO_ADDR
// end ;
33722: GO 33635
33724: POP
33725: POP
// array := tmp ;
33726: LD_ADDR_VAR 0 1
33730: PUSH
33731: LD_VAR 0 10
33735: ST_TO_ADDR
// end ;
33736: GO 33617
33738: POP
33739: POP
// result := array ;
33740: LD_ADDR_VAR 0 5
33744: PUSH
33745: LD_VAR 0 1
33749: ST_TO_ADDR
// end ;
33750: LD_VAR 0 5
33754: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33755: LD_INT 0
33757: PPUSH
33758: PPUSH
// result := 0 ;
33759: LD_ADDR_VAR 0 3
33763: PUSH
33764: LD_INT 0
33766: ST_TO_ADDR
// if not array or not value in array then
33767: LD_VAR 0 1
33771: NOT
33772: PUSH
33773: LD_VAR 0 2
33777: PUSH
33778: LD_VAR 0 1
33782: IN
33783: NOT
33784: OR
33785: IFFALSE 33789
// exit ;
33787: GO 33843
// for i = 1 to array do
33789: LD_ADDR_VAR 0 4
33793: PUSH
33794: DOUBLE
33795: LD_INT 1
33797: DEC
33798: ST_TO_ADDR
33799: LD_VAR 0 1
33803: PUSH
33804: FOR_TO
33805: IFFALSE 33841
// if value = array [ i ] then
33807: LD_VAR 0 2
33811: PUSH
33812: LD_VAR 0 1
33816: PUSH
33817: LD_VAR 0 4
33821: ARRAY
33822: EQUAL
33823: IFFALSE 33839
// begin result := i ;
33825: LD_ADDR_VAR 0 3
33829: PUSH
33830: LD_VAR 0 4
33834: ST_TO_ADDR
// exit ;
33835: POP
33836: POP
33837: GO 33843
// end ;
33839: GO 33804
33841: POP
33842: POP
// end ;
33843: LD_VAR 0 3
33847: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33848: LD_INT 0
33850: PPUSH
// vc_chassis := chassis ;
33851: LD_ADDR_OWVAR 37
33855: PUSH
33856: LD_VAR 0 1
33860: ST_TO_ADDR
// vc_engine := engine ;
33861: LD_ADDR_OWVAR 39
33865: PUSH
33866: LD_VAR 0 2
33870: ST_TO_ADDR
// vc_control := control ;
33871: LD_ADDR_OWVAR 38
33875: PUSH
33876: LD_VAR 0 3
33880: ST_TO_ADDR
// vc_weapon := weapon ;
33881: LD_ADDR_OWVAR 40
33885: PUSH
33886: LD_VAR 0 4
33890: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33891: LD_ADDR_OWVAR 41
33895: PUSH
33896: LD_VAR 0 5
33900: ST_TO_ADDR
// end ;
33901: LD_VAR 0 6
33905: RET
// export function WantPlant ( unit ) ; var task ; begin
33906: LD_INT 0
33908: PPUSH
33909: PPUSH
// result := false ;
33910: LD_ADDR_VAR 0 2
33914: PUSH
33915: LD_INT 0
33917: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33918: LD_ADDR_VAR 0 3
33922: PUSH
33923: LD_VAR 0 1
33927: PPUSH
33928: CALL_OW 437
33932: ST_TO_ADDR
// if task then
33933: LD_VAR 0 3
33937: IFFALSE 33965
// if task [ 1 ] [ 1 ] = p then
33939: LD_VAR 0 3
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: PUSH
33948: LD_INT 1
33950: ARRAY
33951: PUSH
33952: LD_STRING p
33954: EQUAL
33955: IFFALSE 33965
// result := true ;
33957: LD_ADDR_VAR 0 2
33961: PUSH
33962: LD_INT 1
33964: ST_TO_ADDR
// end ;
33965: LD_VAR 0 2
33969: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33970: LD_INT 0
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
// if pos < 1 then
33976: LD_VAR 0 2
33980: PUSH
33981: LD_INT 1
33983: LESS
33984: IFFALSE 33988
// exit ;
33986: GO 34291
// if pos = 1 then
33988: LD_VAR 0 2
33992: PUSH
33993: LD_INT 1
33995: EQUAL
33996: IFFALSE 34029
// result := Replace ( arr , pos [ 1 ] , value ) else
33998: LD_ADDR_VAR 0 4
34002: PUSH
34003: LD_VAR 0 1
34007: PPUSH
34008: LD_VAR 0 2
34012: PUSH
34013: LD_INT 1
34015: ARRAY
34016: PPUSH
34017: LD_VAR 0 3
34021: PPUSH
34022: CALL_OW 1
34026: ST_TO_ADDR
34027: GO 34291
// begin tmp := arr ;
34029: LD_ADDR_VAR 0 6
34033: PUSH
34034: LD_VAR 0 1
34038: ST_TO_ADDR
// s_arr := [ tmp ] ;
34039: LD_ADDR_VAR 0 7
34043: PUSH
34044: LD_VAR 0 6
34048: PUSH
34049: EMPTY
34050: LIST
34051: ST_TO_ADDR
// for i = 1 to pos - 1 do
34052: LD_ADDR_VAR 0 5
34056: PUSH
34057: DOUBLE
34058: LD_INT 1
34060: DEC
34061: ST_TO_ADDR
34062: LD_VAR 0 2
34066: PUSH
34067: LD_INT 1
34069: MINUS
34070: PUSH
34071: FOR_TO
34072: IFFALSE 34117
// begin tmp := tmp [ pos [ i ] ] ;
34074: LD_ADDR_VAR 0 6
34078: PUSH
34079: LD_VAR 0 6
34083: PUSH
34084: LD_VAR 0 2
34088: PUSH
34089: LD_VAR 0 5
34093: ARRAY
34094: ARRAY
34095: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34096: LD_ADDR_VAR 0 7
34100: PUSH
34101: LD_VAR 0 7
34105: PUSH
34106: LD_VAR 0 6
34110: PUSH
34111: EMPTY
34112: LIST
34113: ADD
34114: ST_TO_ADDR
// end ;
34115: GO 34071
34117: POP
34118: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34119: LD_ADDR_VAR 0 6
34123: PUSH
34124: LD_VAR 0 6
34128: PPUSH
34129: LD_VAR 0 2
34133: PUSH
34134: LD_VAR 0 2
34138: ARRAY
34139: PPUSH
34140: LD_VAR 0 3
34144: PPUSH
34145: CALL_OW 1
34149: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34150: LD_ADDR_VAR 0 7
34154: PUSH
34155: LD_VAR 0 7
34159: PPUSH
34160: LD_VAR 0 7
34164: PPUSH
34165: LD_VAR 0 6
34169: PPUSH
34170: CALL_OW 1
34174: ST_TO_ADDR
// for i = s_arr downto 2 do
34175: LD_ADDR_VAR 0 5
34179: PUSH
34180: DOUBLE
34181: LD_VAR 0 7
34185: INC
34186: ST_TO_ADDR
34187: LD_INT 2
34189: PUSH
34190: FOR_DOWNTO
34191: IFFALSE 34275
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34193: LD_ADDR_VAR 0 6
34197: PUSH
34198: LD_VAR 0 7
34202: PUSH
34203: LD_VAR 0 5
34207: PUSH
34208: LD_INT 1
34210: MINUS
34211: ARRAY
34212: PPUSH
34213: LD_VAR 0 2
34217: PUSH
34218: LD_VAR 0 5
34222: PUSH
34223: LD_INT 1
34225: MINUS
34226: ARRAY
34227: PPUSH
34228: LD_VAR 0 7
34232: PUSH
34233: LD_VAR 0 5
34237: ARRAY
34238: PPUSH
34239: CALL_OW 1
34243: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34244: LD_ADDR_VAR 0 7
34248: PUSH
34249: LD_VAR 0 7
34253: PPUSH
34254: LD_VAR 0 5
34258: PUSH
34259: LD_INT 1
34261: MINUS
34262: PPUSH
34263: LD_VAR 0 6
34267: PPUSH
34268: CALL_OW 1
34272: ST_TO_ADDR
// end ;
34273: GO 34190
34275: POP
34276: POP
// result := s_arr [ 1 ] ;
34277: LD_ADDR_VAR 0 4
34281: PUSH
34282: LD_VAR 0 7
34286: PUSH
34287: LD_INT 1
34289: ARRAY
34290: ST_TO_ADDR
// end ; end ;
34291: LD_VAR 0 4
34295: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34296: LD_INT 0
34298: PPUSH
34299: PPUSH
// if not list then
34300: LD_VAR 0 1
34304: NOT
34305: IFFALSE 34309
// exit ;
34307: GO 34400
// i := list [ pos1 ] ;
34309: LD_ADDR_VAR 0 5
34313: PUSH
34314: LD_VAR 0 1
34318: PUSH
34319: LD_VAR 0 2
34323: ARRAY
34324: ST_TO_ADDR
// if not i then
34325: LD_VAR 0 5
34329: NOT
34330: IFFALSE 34334
// exit ;
34332: GO 34400
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34334: LD_ADDR_VAR 0 1
34338: PUSH
34339: LD_VAR 0 1
34343: PPUSH
34344: LD_VAR 0 2
34348: PPUSH
34349: LD_VAR 0 1
34353: PUSH
34354: LD_VAR 0 3
34358: ARRAY
34359: PPUSH
34360: CALL_OW 1
34364: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34365: LD_ADDR_VAR 0 1
34369: PUSH
34370: LD_VAR 0 1
34374: PPUSH
34375: LD_VAR 0 3
34379: PPUSH
34380: LD_VAR 0 5
34384: PPUSH
34385: CALL_OW 1
34389: ST_TO_ADDR
// result := list ;
34390: LD_ADDR_VAR 0 4
34394: PUSH
34395: LD_VAR 0 1
34399: ST_TO_ADDR
// end ;
34400: LD_VAR 0 4
34404: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34405: LD_INT 0
34407: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34408: LD_ADDR_VAR 0 5
34412: PUSH
34413: LD_VAR 0 1
34417: PPUSH
34418: CALL_OW 250
34422: PPUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL_OW 251
34432: PPUSH
34433: LD_VAR 0 2
34437: PPUSH
34438: LD_VAR 0 3
34442: PPUSH
34443: LD_VAR 0 4
34447: PPUSH
34448: CALL 34458 0 5
34452: ST_TO_ADDR
// end ;
34453: LD_VAR 0 5
34457: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34458: LD_INT 0
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
// if not list then
34464: LD_VAR 0 3
34468: NOT
34469: IFFALSE 34473
// exit ;
34471: GO 34861
// result := [ ] ;
34473: LD_ADDR_VAR 0 6
34477: PUSH
34478: EMPTY
34479: ST_TO_ADDR
// for i in list do
34480: LD_ADDR_VAR 0 7
34484: PUSH
34485: LD_VAR 0 3
34489: PUSH
34490: FOR_IN
34491: IFFALSE 34693
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34493: LD_ADDR_VAR 0 9
34497: PUSH
34498: LD_VAR 0 7
34502: PPUSH
34503: LD_VAR 0 1
34507: PPUSH
34508: LD_VAR 0 2
34512: PPUSH
34513: CALL_OW 297
34517: ST_TO_ADDR
// if not result then
34518: LD_VAR 0 6
34522: NOT
34523: IFFALSE 34549
// result := [ [ i , tmp ] ] else
34525: LD_ADDR_VAR 0 6
34529: PUSH
34530: LD_VAR 0 7
34534: PUSH
34535: LD_VAR 0 9
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: EMPTY
34545: LIST
34546: ST_TO_ADDR
34547: GO 34691
// begin if result [ result ] [ 2 ] < tmp then
34549: LD_VAR 0 6
34553: PUSH
34554: LD_VAR 0 6
34558: ARRAY
34559: PUSH
34560: LD_INT 2
34562: ARRAY
34563: PUSH
34564: LD_VAR 0 9
34568: LESS
34569: IFFALSE 34611
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34571: LD_ADDR_VAR 0 6
34575: PUSH
34576: LD_VAR 0 6
34580: PPUSH
34581: LD_VAR 0 6
34585: PUSH
34586: LD_INT 1
34588: PLUS
34589: PPUSH
34590: LD_VAR 0 7
34594: PUSH
34595: LD_VAR 0 9
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PPUSH
34604: CALL_OW 2
34608: ST_TO_ADDR
34609: GO 34691
// for j = 1 to result do
34611: LD_ADDR_VAR 0 8
34615: PUSH
34616: DOUBLE
34617: LD_INT 1
34619: DEC
34620: ST_TO_ADDR
34621: LD_VAR 0 6
34625: PUSH
34626: FOR_TO
34627: IFFALSE 34689
// begin if tmp < result [ j ] [ 2 ] then
34629: LD_VAR 0 9
34633: PUSH
34634: LD_VAR 0 6
34638: PUSH
34639: LD_VAR 0 8
34643: ARRAY
34644: PUSH
34645: LD_INT 2
34647: ARRAY
34648: LESS
34649: IFFALSE 34687
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34651: LD_ADDR_VAR 0 6
34655: PUSH
34656: LD_VAR 0 6
34660: PPUSH
34661: LD_VAR 0 8
34665: PPUSH
34666: LD_VAR 0 7
34670: PUSH
34671: LD_VAR 0 9
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PPUSH
34680: CALL_OW 2
34684: ST_TO_ADDR
// break ;
34685: GO 34689
// end ; end ;
34687: GO 34626
34689: POP
34690: POP
// end ; end ;
34691: GO 34490
34693: POP
34694: POP
// if result and not asc then
34695: LD_VAR 0 6
34699: PUSH
34700: LD_VAR 0 4
34704: NOT
34705: AND
34706: IFFALSE 34781
// begin tmp := result ;
34708: LD_ADDR_VAR 0 9
34712: PUSH
34713: LD_VAR 0 6
34717: ST_TO_ADDR
// for i = tmp downto 1 do
34718: LD_ADDR_VAR 0 7
34722: PUSH
34723: DOUBLE
34724: LD_VAR 0 9
34728: INC
34729: ST_TO_ADDR
34730: LD_INT 1
34732: PUSH
34733: FOR_DOWNTO
34734: IFFALSE 34779
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34736: LD_ADDR_VAR 0 6
34740: PUSH
34741: LD_VAR 0 6
34745: PPUSH
34746: LD_VAR 0 9
34750: PUSH
34751: LD_VAR 0 7
34755: MINUS
34756: PUSH
34757: LD_INT 1
34759: PLUS
34760: PPUSH
34761: LD_VAR 0 9
34765: PUSH
34766: LD_VAR 0 7
34770: ARRAY
34771: PPUSH
34772: CALL_OW 1
34776: ST_TO_ADDR
34777: GO 34733
34779: POP
34780: POP
// end ; tmp := [ ] ;
34781: LD_ADDR_VAR 0 9
34785: PUSH
34786: EMPTY
34787: ST_TO_ADDR
// if mode then
34788: LD_VAR 0 5
34792: IFFALSE 34861
// begin for i = 1 to result do
34794: LD_ADDR_VAR 0 7
34798: PUSH
34799: DOUBLE
34800: LD_INT 1
34802: DEC
34803: ST_TO_ADDR
34804: LD_VAR 0 6
34808: PUSH
34809: FOR_TO
34810: IFFALSE 34849
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34812: LD_ADDR_VAR 0 9
34816: PUSH
34817: LD_VAR 0 9
34821: PPUSH
34822: LD_VAR 0 7
34826: PPUSH
34827: LD_VAR 0 6
34831: PUSH
34832: LD_VAR 0 7
34836: ARRAY
34837: PUSH
34838: LD_INT 1
34840: ARRAY
34841: PPUSH
34842: CALL_OW 1
34846: ST_TO_ADDR
34847: GO 34809
34849: POP
34850: POP
// result := tmp ;
34851: LD_ADDR_VAR 0 6
34855: PUSH
34856: LD_VAR 0 9
34860: ST_TO_ADDR
// end ; end ;
34861: LD_VAR 0 6
34865: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34866: LD_INT 0
34868: PPUSH
34869: PPUSH
34870: PPUSH
34871: PPUSH
34872: PPUSH
34873: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34874: LD_ADDR_VAR 0 5
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: EMPTY
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// if not x or not y then
34896: LD_VAR 0 2
34900: NOT
34901: PUSH
34902: LD_VAR 0 3
34906: NOT
34907: OR
34908: IFFALSE 34912
// exit ;
34910: GO 36562
// if not range then
34912: LD_VAR 0 4
34916: NOT
34917: IFFALSE 34927
// range := 10 ;
34919: LD_ADDR_VAR 0 4
34923: PUSH
34924: LD_INT 10
34926: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34927: LD_ADDR_VAR 0 8
34931: PUSH
34932: LD_INT 81
34934: PUSH
34935: LD_VAR 0 1
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 92
34946: PUSH
34947: LD_VAR 0 2
34951: PUSH
34952: LD_VAR 0 3
34956: PUSH
34957: LD_VAR 0 4
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 3
34970: PUSH
34971: LD_INT 21
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: PPUSH
34990: CALL_OW 69
34994: ST_TO_ADDR
// if not tmp then
34995: LD_VAR 0 8
34999: NOT
35000: IFFALSE 35004
// exit ;
35002: GO 36562
// for i in tmp do
35004: LD_ADDR_VAR 0 6
35008: PUSH
35009: LD_VAR 0 8
35013: PUSH
35014: FOR_IN
35015: IFFALSE 36537
// begin points := [ 0 , 0 , 0 ] ;
35017: LD_ADDR_VAR 0 9
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
// bpoints := 1 ;
35036: LD_ADDR_VAR 0 10
35040: PUSH
35041: LD_INT 1
35043: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35044: LD_VAR 0 6
35048: PPUSH
35049: CALL_OW 247
35053: PUSH
35054: LD_INT 1
35056: DOUBLE
35057: EQUAL
35058: IFTRUE 35062
35060: GO 35640
35062: POP
// begin if GetClass ( i ) = 1 then
35063: LD_VAR 0 6
35067: PPUSH
35068: CALL_OW 257
35072: PUSH
35073: LD_INT 1
35075: EQUAL
35076: IFFALSE 35097
// points := [ 10 , 5 , 3 ] ;
35078: LD_ADDR_VAR 0 9
35082: PUSH
35083: LD_INT 10
35085: PUSH
35086: LD_INT 5
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35097: LD_VAR 0 6
35101: PPUSH
35102: CALL_OW 257
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: LD_INT 3
35112: PUSH
35113: LD_INT 4
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: IN
35121: IFFALSE 35142
// points := [ 3 , 2 , 1 ] ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_INT 3
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35142: LD_VAR 0 6
35146: PPUSH
35147: CALL_OW 257
35151: PUSH
35152: LD_INT 5
35154: EQUAL
35155: IFFALSE 35176
// points := [ 130 , 5 , 2 ] ;
35157: LD_ADDR_VAR 0 9
35161: PUSH
35162: LD_INT 130
35164: PUSH
35165: LD_INT 5
35167: PUSH
35168: LD_INT 2
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35176: LD_VAR 0 6
35180: PPUSH
35181: CALL_OW 257
35185: PUSH
35186: LD_INT 8
35188: EQUAL
35189: IFFALSE 35210
// points := [ 35 , 35 , 30 ] ;
35191: LD_ADDR_VAR 0 9
35195: PUSH
35196: LD_INT 35
35198: PUSH
35199: LD_INT 35
35201: PUSH
35202: LD_INT 30
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35210: LD_VAR 0 6
35214: PPUSH
35215: CALL_OW 257
35219: PUSH
35220: LD_INT 9
35222: EQUAL
35223: IFFALSE 35244
// points := [ 20 , 55 , 40 ] ;
35225: LD_ADDR_VAR 0 9
35229: PUSH
35230: LD_INT 20
35232: PUSH
35233: LD_INT 55
35235: PUSH
35236: LD_INT 40
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35244: LD_VAR 0 6
35248: PPUSH
35249: CALL_OW 257
35253: PUSH
35254: LD_INT 12
35256: PUSH
35257: LD_INT 16
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: IN
35264: IFFALSE 35285
// points := [ 5 , 3 , 2 ] ;
35266: LD_ADDR_VAR 0 9
35270: PUSH
35271: LD_INT 5
35273: PUSH
35274: LD_INT 3
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35285: LD_VAR 0 6
35289: PPUSH
35290: CALL_OW 257
35294: PUSH
35295: LD_INT 17
35297: EQUAL
35298: IFFALSE 35319
// points := [ 100 , 50 , 75 ] ;
35300: LD_ADDR_VAR 0 9
35304: PUSH
35305: LD_INT 100
35307: PUSH
35308: LD_INT 50
35310: PUSH
35311: LD_INT 75
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35319: LD_VAR 0 6
35323: PPUSH
35324: CALL_OW 257
35328: PUSH
35329: LD_INT 15
35331: EQUAL
35332: IFFALSE 35353
// points := [ 10 , 5 , 3 ] ;
35334: LD_ADDR_VAR 0 9
35338: PUSH
35339: LD_INT 10
35341: PUSH
35342: LD_INT 5
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: LIST
35352: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35353: LD_VAR 0 6
35357: PPUSH
35358: CALL_OW 257
35362: PUSH
35363: LD_INT 14
35365: EQUAL
35366: IFFALSE 35387
// points := [ 10 , 0 , 0 ] ;
35368: LD_ADDR_VAR 0 9
35372: PUSH
35373: LD_INT 10
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35387: LD_VAR 0 6
35391: PPUSH
35392: CALL_OW 257
35396: PUSH
35397: LD_INT 11
35399: EQUAL
35400: IFFALSE 35421
// points := [ 30 , 10 , 5 ] ;
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: LD_INT 30
35409: PUSH
35410: LD_INT 10
35412: PUSH
35413: LD_INT 5
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35421: LD_VAR 0 1
35425: PPUSH
35426: LD_INT 5
35428: PPUSH
35429: CALL_OW 321
35433: PUSH
35434: LD_INT 2
35436: EQUAL
35437: IFFALSE 35454
// bpoints := bpoints * 1.8 ;
35439: LD_ADDR_VAR 0 10
35443: PUSH
35444: LD_VAR 0 10
35448: PUSH
35449: LD_REAL  1.80000000000000E+0000
35452: MUL
35453: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35454: LD_VAR 0 6
35458: PPUSH
35459: CALL_OW 257
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: LD_INT 4
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: IN
35482: PUSH
35483: LD_VAR 0 1
35487: PPUSH
35488: LD_INT 51
35490: PPUSH
35491: CALL_OW 321
35495: PUSH
35496: LD_INT 2
35498: EQUAL
35499: AND
35500: IFFALSE 35517
// bpoints := bpoints * 1.2 ;
35502: LD_ADDR_VAR 0 10
35506: PUSH
35507: LD_VAR 0 10
35511: PUSH
35512: LD_REAL  1.20000000000000E+0000
35515: MUL
35516: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35517: LD_VAR 0 6
35521: PPUSH
35522: CALL_OW 257
35526: PUSH
35527: LD_INT 5
35529: PUSH
35530: LD_INT 7
35532: PUSH
35533: LD_INT 9
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: IN
35541: PUSH
35542: LD_VAR 0 1
35546: PPUSH
35547: LD_INT 52
35549: PPUSH
35550: CALL_OW 321
35554: PUSH
35555: LD_INT 2
35557: EQUAL
35558: AND
35559: IFFALSE 35576
// bpoints := bpoints * 1.5 ;
35561: LD_ADDR_VAR 0 10
35565: PUSH
35566: LD_VAR 0 10
35570: PUSH
35571: LD_REAL  1.50000000000000E+0000
35574: MUL
35575: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35576: LD_VAR 0 1
35580: PPUSH
35581: LD_INT 66
35583: PPUSH
35584: CALL_OW 321
35588: PUSH
35589: LD_INT 2
35591: EQUAL
35592: IFFALSE 35609
// bpoints := bpoints * 1.1 ;
35594: LD_ADDR_VAR 0 10
35598: PUSH
35599: LD_VAR 0 10
35603: PUSH
35604: LD_REAL  1.10000000000000E+0000
35607: MUL
35608: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35609: LD_ADDR_VAR 0 10
35613: PUSH
35614: LD_VAR 0 10
35618: PUSH
35619: LD_VAR 0 6
35623: PPUSH
35624: LD_INT 1
35626: PPUSH
35627: CALL_OW 259
35631: PUSH
35632: LD_REAL  1.15000000000000E+0000
35635: MUL
35636: MUL
35637: ST_TO_ADDR
// end ; unit_vehicle :
35638: GO 36466
35640: LD_INT 2
35642: DOUBLE
35643: EQUAL
35644: IFTRUE 35648
35646: GO 36454
35648: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35649: LD_VAR 0 6
35653: PPUSH
35654: CALL_OW 264
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: LD_INT 42
35664: PUSH
35665: LD_INT 24
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: IN
35673: IFFALSE 35694
// points := [ 25 , 5 , 3 ] ;
35675: LD_ADDR_VAR 0 9
35679: PUSH
35680: LD_INT 25
35682: PUSH
35683: LD_INT 5
35685: PUSH
35686: LD_INT 3
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: LIST
35693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35694: LD_VAR 0 6
35698: PPUSH
35699: CALL_OW 264
35703: PUSH
35704: LD_INT 4
35706: PUSH
35707: LD_INT 43
35709: PUSH
35710: LD_INT 25
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: IN
35718: IFFALSE 35739
// points := [ 40 , 15 , 5 ] ;
35720: LD_ADDR_VAR 0 9
35724: PUSH
35725: LD_INT 40
35727: PUSH
35728: LD_INT 15
35730: PUSH
35731: LD_INT 5
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35739: LD_VAR 0 6
35743: PPUSH
35744: CALL_OW 264
35748: PUSH
35749: LD_INT 3
35751: PUSH
35752: LD_INT 23
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: IN
35759: IFFALSE 35780
// points := [ 7 , 25 , 8 ] ;
35761: LD_ADDR_VAR 0 9
35765: PUSH
35766: LD_INT 7
35768: PUSH
35769: LD_INT 25
35771: PUSH
35772: LD_INT 8
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35780: LD_VAR 0 6
35784: PPUSH
35785: CALL_OW 264
35789: PUSH
35790: LD_INT 5
35792: PUSH
35793: LD_INT 27
35795: PUSH
35796: LD_INT 44
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: IN
35804: IFFALSE 35825
// points := [ 14 , 50 , 16 ] ;
35806: LD_ADDR_VAR 0 9
35810: PUSH
35811: LD_INT 14
35813: PUSH
35814: LD_INT 50
35816: PUSH
35817: LD_INT 16
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35825: LD_VAR 0 6
35829: PPUSH
35830: CALL_OW 264
35834: PUSH
35835: LD_INT 6
35837: PUSH
35838: LD_INT 46
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: IN
35845: IFFALSE 35866
// points := [ 32 , 120 , 70 ] ;
35847: LD_ADDR_VAR 0 9
35851: PUSH
35852: LD_INT 32
35854: PUSH
35855: LD_INT 120
35857: PUSH
35858: LD_INT 70
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35866: LD_VAR 0 6
35870: PPUSH
35871: CALL_OW 264
35875: PUSH
35876: LD_INT 7
35878: PUSH
35879: LD_INT 28
35881: PUSH
35882: LD_INT 45
35884: PUSH
35885: LD_INT 92
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: IN
35894: IFFALSE 35915
// points := [ 35 , 20 , 45 ] ;
35896: LD_ADDR_VAR 0 9
35900: PUSH
35901: LD_INT 35
35903: PUSH
35904: LD_INT 20
35906: PUSH
35907: LD_INT 45
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35915: LD_VAR 0 6
35919: PPUSH
35920: CALL_OW 264
35924: PUSH
35925: LD_INT 47
35927: PUSH
35928: EMPTY
35929: LIST
35930: IN
35931: IFFALSE 35952
// points := [ 67 , 45 , 75 ] ;
35933: LD_ADDR_VAR 0 9
35937: PUSH
35938: LD_INT 67
35940: PUSH
35941: LD_INT 45
35943: PUSH
35944: LD_INT 75
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35952: LD_VAR 0 6
35956: PPUSH
35957: CALL_OW 264
35961: PUSH
35962: LD_INT 26
35964: PUSH
35965: EMPTY
35966: LIST
35967: IN
35968: IFFALSE 35989
// points := [ 120 , 30 , 80 ] ;
35970: LD_ADDR_VAR 0 9
35974: PUSH
35975: LD_INT 120
35977: PUSH
35978: LD_INT 30
35980: PUSH
35981: LD_INT 80
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35989: LD_VAR 0 6
35993: PPUSH
35994: CALL_OW 264
35998: PUSH
35999: LD_INT 22
36001: PUSH
36002: EMPTY
36003: LIST
36004: IN
36005: IFFALSE 36026
// points := [ 40 , 1 , 1 ] ;
36007: LD_ADDR_VAR 0 9
36011: PUSH
36012: LD_INT 40
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36026: LD_VAR 0 6
36030: PPUSH
36031: CALL_OW 264
36035: PUSH
36036: LD_INT 29
36038: PUSH
36039: EMPTY
36040: LIST
36041: IN
36042: IFFALSE 36063
// points := [ 70 , 200 , 400 ] ;
36044: LD_ADDR_VAR 0 9
36048: PUSH
36049: LD_INT 70
36051: PUSH
36052: LD_INT 200
36054: PUSH
36055: LD_INT 400
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: LIST
36062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36063: LD_VAR 0 6
36067: PPUSH
36068: CALL_OW 264
36072: PUSH
36073: LD_INT 14
36075: PUSH
36076: LD_INT 53
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: IN
36083: IFFALSE 36104
// points := [ 40 , 10 , 20 ] ;
36085: LD_ADDR_VAR 0 9
36089: PUSH
36090: LD_INT 40
36092: PUSH
36093: LD_INT 10
36095: PUSH
36096: LD_INT 20
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36104: LD_VAR 0 6
36108: PPUSH
36109: CALL_OW 264
36113: PUSH
36114: LD_INT 9
36116: PUSH
36117: EMPTY
36118: LIST
36119: IN
36120: IFFALSE 36141
// points := [ 5 , 70 , 20 ] ;
36122: LD_ADDR_VAR 0 9
36126: PUSH
36127: LD_INT 5
36129: PUSH
36130: LD_INT 70
36132: PUSH
36133: LD_INT 20
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36141: LD_VAR 0 6
36145: PPUSH
36146: CALL_OW 264
36150: PUSH
36151: LD_INT 10
36153: PUSH
36154: EMPTY
36155: LIST
36156: IN
36157: IFFALSE 36178
// points := [ 35 , 110 , 70 ] ;
36159: LD_ADDR_VAR 0 9
36163: PUSH
36164: LD_INT 35
36166: PUSH
36167: LD_INT 110
36169: PUSH
36170: LD_INT 70
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36178: LD_VAR 0 6
36182: PPUSH
36183: CALL_OW 265
36187: PUSH
36188: LD_INT 25
36190: EQUAL
36191: IFFALSE 36212
// points := [ 80 , 65 , 100 ] ;
36193: LD_ADDR_VAR 0 9
36197: PUSH
36198: LD_INT 80
36200: PUSH
36201: LD_INT 65
36203: PUSH
36204: LD_INT 100
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36212: LD_VAR 0 6
36216: PPUSH
36217: CALL_OW 263
36221: PUSH
36222: LD_INT 1
36224: EQUAL
36225: IFFALSE 36260
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36227: LD_ADDR_VAR 0 10
36231: PUSH
36232: LD_VAR 0 10
36236: PUSH
36237: LD_VAR 0 6
36241: PPUSH
36242: CALL_OW 311
36246: PPUSH
36247: LD_INT 3
36249: PPUSH
36250: CALL_OW 259
36254: PUSH
36255: LD_INT 4
36257: MUL
36258: MUL
36259: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36260: LD_VAR 0 6
36264: PPUSH
36265: CALL_OW 263
36269: PUSH
36270: LD_INT 2
36272: EQUAL
36273: IFFALSE 36324
// begin j := IsControledBy ( i ) ;
36275: LD_ADDR_VAR 0 7
36279: PUSH
36280: LD_VAR 0 6
36284: PPUSH
36285: CALL_OW 312
36289: ST_TO_ADDR
// if j then
36290: LD_VAR 0 7
36294: IFFALSE 36324
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36296: LD_ADDR_VAR 0 10
36300: PUSH
36301: LD_VAR 0 10
36305: PUSH
36306: LD_VAR 0 7
36310: PPUSH
36311: LD_INT 3
36313: PPUSH
36314: CALL_OW 259
36318: PUSH
36319: LD_INT 3
36321: MUL
36322: MUL
36323: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36324: LD_VAR 0 6
36328: PPUSH
36329: CALL_OW 264
36333: PUSH
36334: LD_INT 5
36336: PUSH
36337: LD_INT 6
36339: PUSH
36340: LD_INT 46
36342: PUSH
36343: LD_INT 44
36345: PUSH
36346: LD_INT 47
36348: PUSH
36349: LD_INT 45
36351: PUSH
36352: LD_INT 28
36354: PUSH
36355: LD_INT 7
36357: PUSH
36358: LD_INT 27
36360: PUSH
36361: LD_INT 29
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: IN
36376: PUSH
36377: LD_VAR 0 1
36381: PPUSH
36382: LD_INT 52
36384: PPUSH
36385: CALL_OW 321
36389: PUSH
36390: LD_INT 2
36392: EQUAL
36393: AND
36394: IFFALSE 36411
// bpoints := bpoints * 1.2 ;
36396: LD_ADDR_VAR 0 10
36400: PUSH
36401: LD_VAR 0 10
36405: PUSH
36406: LD_REAL  1.20000000000000E+0000
36409: MUL
36410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36411: LD_VAR 0 6
36415: PPUSH
36416: CALL_OW 264
36420: PUSH
36421: LD_INT 6
36423: PUSH
36424: LD_INT 46
36426: PUSH
36427: LD_INT 47
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: IN
36435: IFFALSE 36452
// bpoints := bpoints * 1.2 ;
36437: LD_ADDR_VAR 0 10
36441: PUSH
36442: LD_VAR 0 10
36446: PUSH
36447: LD_REAL  1.20000000000000E+0000
36450: MUL
36451: ST_TO_ADDR
// end ; unit_building :
36452: GO 36466
36454: LD_INT 3
36456: DOUBLE
36457: EQUAL
36458: IFTRUE 36462
36460: GO 36465
36462: POP
// ; end ;
36463: GO 36466
36465: POP
// for j = 1 to 3 do
36466: LD_ADDR_VAR 0 7
36470: PUSH
36471: DOUBLE
36472: LD_INT 1
36474: DEC
36475: ST_TO_ADDR
36476: LD_INT 3
36478: PUSH
36479: FOR_TO
36480: IFFALSE 36533
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36482: LD_ADDR_VAR 0 5
36486: PUSH
36487: LD_VAR 0 5
36491: PPUSH
36492: LD_VAR 0 7
36496: PPUSH
36497: LD_VAR 0 5
36501: PUSH
36502: LD_VAR 0 7
36506: ARRAY
36507: PUSH
36508: LD_VAR 0 9
36512: PUSH
36513: LD_VAR 0 7
36517: ARRAY
36518: PUSH
36519: LD_VAR 0 10
36523: MUL
36524: PLUS
36525: PPUSH
36526: CALL_OW 1
36530: ST_TO_ADDR
36531: GO 36479
36533: POP
36534: POP
// end ;
36535: GO 35014
36537: POP
36538: POP
// result := Replace ( result , 4 , tmp ) ;
36539: LD_ADDR_VAR 0 5
36543: PUSH
36544: LD_VAR 0 5
36548: PPUSH
36549: LD_INT 4
36551: PPUSH
36552: LD_VAR 0 8
36556: PPUSH
36557: CALL_OW 1
36561: ST_TO_ADDR
// end ;
36562: LD_VAR 0 5
36566: RET
// export function DangerAtRange ( unit , range ) ; begin
36567: LD_INT 0
36569: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36570: LD_ADDR_VAR 0 3
36574: PUSH
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 255
36584: PPUSH
36585: LD_VAR 0 1
36589: PPUSH
36590: CALL_OW 250
36594: PPUSH
36595: LD_VAR 0 1
36599: PPUSH
36600: CALL_OW 251
36604: PPUSH
36605: LD_VAR 0 2
36609: PPUSH
36610: CALL 34866 0 4
36614: ST_TO_ADDR
// end ;
36615: LD_VAR 0 3
36619: RET
// export function DangerInArea ( side , area ) ; begin
36620: LD_INT 0
36622: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36623: LD_ADDR_VAR 0 3
36627: PUSH
36628: LD_VAR 0 2
36632: PPUSH
36633: LD_INT 81
36635: PUSH
36636: LD_VAR 0 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PPUSH
36645: CALL_OW 70
36649: ST_TO_ADDR
// end ;
36650: LD_VAR 0 3
36654: RET
// export function IsExtension ( b ) ; begin
36655: LD_INT 0
36657: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36658: LD_ADDR_VAR 0 2
36662: PUSH
36663: LD_VAR 0 1
36667: PUSH
36668: LD_INT 23
36670: PUSH
36671: LD_INT 20
36673: PUSH
36674: LD_INT 22
36676: PUSH
36677: LD_INT 17
36679: PUSH
36680: LD_INT 24
36682: PUSH
36683: LD_INT 21
36685: PUSH
36686: LD_INT 19
36688: PUSH
36689: LD_INT 16
36691: PUSH
36692: LD_INT 25
36694: PUSH
36695: LD_INT 18
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: IN
36710: ST_TO_ADDR
// end ;
36711: LD_VAR 0 2
36715: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36716: LD_INT 0
36718: PPUSH
36719: PPUSH
36720: PPUSH
// result := [ ] ;
36721: LD_ADDR_VAR 0 4
36725: PUSH
36726: EMPTY
36727: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36728: LD_ADDR_VAR 0 5
36732: PUSH
36733: LD_VAR 0 2
36737: PPUSH
36738: LD_INT 21
36740: PUSH
36741: LD_INT 3
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PPUSH
36748: CALL_OW 70
36752: ST_TO_ADDR
// if not tmp then
36753: LD_VAR 0 5
36757: NOT
36758: IFFALSE 36762
// exit ;
36760: GO 36826
// if checkLink then
36762: LD_VAR 0 3
36766: IFFALSE 36816
// begin for i in tmp do
36768: LD_ADDR_VAR 0 6
36772: PUSH
36773: LD_VAR 0 5
36777: PUSH
36778: FOR_IN
36779: IFFALSE 36814
// if GetBase ( i ) <> base then
36781: LD_VAR 0 6
36785: PPUSH
36786: CALL_OW 274
36790: PUSH
36791: LD_VAR 0 1
36795: NONEQUAL
36796: IFFALSE 36812
// ComLinkToBase ( base , i ) ;
36798: LD_VAR 0 1
36802: PPUSH
36803: LD_VAR 0 6
36807: PPUSH
36808: CALL_OW 169
36812: GO 36778
36814: POP
36815: POP
// end ; result := tmp ;
36816: LD_ADDR_VAR 0 4
36820: PUSH
36821: LD_VAR 0 5
36825: ST_TO_ADDR
// end ;
36826: LD_VAR 0 4
36830: RET
// export function ComComplete ( units , b ) ; var i ; begin
36831: LD_INT 0
36833: PPUSH
36834: PPUSH
// if not units then
36835: LD_VAR 0 1
36839: NOT
36840: IFFALSE 36844
// exit ;
36842: GO 36934
// for i in units do
36844: LD_ADDR_VAR 0 4
36848: PUSH
36849: LD_VAR 0 1
36853: PUSH
36854: FOR_IN
36855: IFFALSE 36932
// if BuildingStatus ( b ) = bs_build then
36857: LD_VAR 0 2
36861: PPUSH
36862: CALL_OW 461
36866: PUSH
36867: LD_INT 1
36869: EQUAL
36870: IFFALSE 36930
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36872: LD_VAR 0 4
36876: PPUSH
36877: LD_STRING h
36879: PUSH
36880: LD_VAR 0 2
36884: PPUSH
36885: CALL_OW 250
36889: PUSH
36890: LD_VAR 0 2
36894: PPUSH
36895: CALL_OW 251
36899: PUSH
36900: LD_VAR 0 2
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: PUSH
36923: EMPTY
36924: LIST
36925: PPUSH
36926: CALL_OW 446
36930: GO 36854
36932: POP
36933: POP
// end ;
36934: LD_VAR 0 3
36938: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36939: LD_INT 0
36941: PPUSH
36942: PPUSH
36943: PPUSH
36944: PPUSH
36945: PPUSH
36946: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36947: LD_VAR 0 1
36951: NOT
36952: PUSH
36953: LD_VAR 0 1
36957: PPUSH
36958: CALL_OW 263
36962: PUSH
36963: LD_INT 2
36965: NONEQUAL
36966: OR
36967: IFFALSE 36971
// exit ;
36969: GO 37287
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36971: LD_ADDR_VAR 0 6
36975: PUSH
36976: LD_INT 22
36978: PUSH
36979: LD_VAR 0 1
36983: PPUSH
36984: CALL_OW 255
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: LD_INT 30
36998: PUSH
36999: LD_INT 36
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 34
37008: PUSH
37009: LD_INT 31
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PPUSH
37025: CALL_OW 69
37029: ST_TO_ADDR
// if not tmp then
37030: LD_VAR 0 6
37034: NOT
37035: IFFALSE 37039
// exit ;
37037: GO 37287
// result := [ ] ;
37039: LD_ADDR_VAR 0 2
37043: PUSH
37044: EMPTY
37045: ST_TO_ADDR
// for i in tmp do
37046: LD_ADDR_VAR 0 3
37050: PUSH
37051: LD_VAR 0 6
37055: PUSH
37056: FOR_IN
37057: IFFALSE 37128
// begin t := UnitsInside ( i ) ;
37059: LD_ADDR_VAR 0 4
37063: PUSH
37064: LD_VAR 0 3
37068: PPUSH
37069: CALL_OW 313
37073: ST_TO_ADDR
// if t then
37074: LD_VAR 0 4
37078: IFFALSE 37126
// for j in t do
37080: LD_ADDR_VAR 0 7
37084: PUSH
37085: LD_VAR 0 4
37089: PUSH
37090: FOR_IN
37091: IFFALSE 37124
// result := Replace ( result , result + 1 , j ) ;
37093: LD_ADDR_VAR 0 2
37097: PUSH
37098: LD_VAR 0 2
37102: PPUSH
37103: LD_VAR 0 2
37107: PUSH
37108: LD_INT 1
37110: PLUS
37111: PPUSH
37112: LD_VAR 0 7
37116: PPUSH
37117: CALL_OW 1
37121: ST_TO_ADDR
37122: GO 37090
37124: POP
37125: POP
// end ;
37126: GO 37056
37128: POP
37129: POP
// if not result then
37130: LD_VAR 0 2
37134: NOT
37135: IFFALSE 37139
// exit ;
37137: GO 37287
// mech := result [ 1 ] ;
37139: LD_ADDR_VAR 0 5
37143: PUSH
37144: LD_VAR 0 2
37148: PUSH
37149: LD_INT 1
37151: ARRAY
37152: ST_TO_ADDR
// if result > 1 then
37153: LD_VAR 0 2
37157: PUSH
37158: LD_INT 1
37160: GREATER
37161: IFFALSE 37273
// begin for i = 2 to result do
37163: LD_ADDR_VAR 0 3
37167: PUSH
37168: DOUBLE
37169: LD_INT 2
37171: DEC
37172: ST_TO_ADDR
37173: LD_VAR 0 2
37177: PUSH
37178: FOR_TO
37179: IFFALSE 37271
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37181: LD_ADDR_VAR 0 4
37185: PUSH
37186: LD_VAR 0 2
37190: PUSH
37191: LD_VAR 0 3
37195: ARRAY
37196: PPUSH
37197: LD_INT 3
37199: PPUSH
37200: CALL_OW 259
37204: PUSH
37205: LD_VAR 0 2
37209: PUSH
37210: LD_VAR 0 3
37214: ARRAY
37215: PPUSH
37216: CALL_OW 432
37220: MINUS
37221: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37222: LD_VAR 0 4
37226: PUSH
37227: LD_VAR 0 5
37231: PPUSH
37232: LD_INT 3
37234: PPUSH
37235: CALL_OW 259
37239: PUSH
37240: LD_VAR 0 5
37244: PPUSH
37245: CALL_OW 432
37249: MINUS
37250: GREATEREQUAL
37251: IFFALSE 37269
// mech := result [ i ] ;
37253: LD_ADDR_VAR 0 5
37257: PUSH
37258: LD_VAR 0 2
37262: PUSH
37263: LD_VAR 0 3
37267: ARRAY
37268: ST_TO_ADDR
// end ;
37269: GO 37178
37271: POP
37272: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37273: LD_VAR 0 1
37277: PPUSH
37278: LD_VAR 0 5
37282: PPUSH
37283: CALL_OW 135
// end ;
37287: LD_VAR 0 2
37291: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37292: LD_INT 0
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
37306: PPUSH
// result := [ ] ;
37307: LD_ADDR_VAR 0 7
37311: PUSH
37312: EMPTY
37313: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37314: LD_VAR 0 1
37318: PPUSH
37319: CALL_OW 266
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: IN
37334: NOT
37335: IFFALSE 37339
// exit ;
37337: GO 38973
// if name then
37339: LD_VAR 0 3
37343: IFFALSE 37359
// SetBName ( base_dep , name ) ;
37345: LD_VAR 0 1
37349: PPUSH
37350: LD_VAR 0 3
37354: PPUSH
37355: CALL_OW 500
// base := GetBase ( base_dep ) ;
37359: LD_ADDR_VAR 0 15
37363: PUSH
37364: LD_VAR 0 1
37368: PPUSH
37369: CALL_OW 274
37373: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37374: LD_ADDR_VAR 0 16
37378: PUSH
37379: LD_VAR 0 1
37383: PPUSH
37384: CALL_OW 255
37388: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37389: LD_ADDR_VAR 0 17
37393: PUSH
37394: LD_VAR 0 1
37398: PPUSH
37399: CALL_OW 248
37403: ST_TO_ADDR
// if sources then
37404: LD_VAR 0 5
37408: IFFALSE 37455
// for i = 1 to 3 do
37410: LD_ADDR_VAR 0 8
37414: PUSH
37415: DOUBLE
37416: LD_INT 1
37418: DEC
37419: ST_TO_ADDR
37420: LD_INT 3
37422: PUSH
37423: FOR_TO
37424: IFFALSE 37453
// AddResourceType ( base , i , sources [ i ] ) ;
37426: LD_VAR 0 15
37430: PPUSH
37431: LD_VAR 0 8
37435: PPUSH
37436: LD_VAR 0 5
37440: PUSH
37441: LD_VAR 0 8
37445: ARRAY
37446: PPUSH
37447: CALL_OW 276
37451: GO 37423
37453: POP
37454: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37455: LD_ADDR_VAR 0 18
37459: PUSH
37460: LD_VAR 0 15
37464: PPUSH
37465: LD_VAR 0 2
37469: PPUSH
37470: LD_INT 1
37472: PPUSH
37473: CALL 36716 0 3
37477: ST_TO_ADDR
// InitHc ;
37478: CALL_OW 19
// InitUc ;
37482: CALL_OW 18
// uc_side := side ;
37486: LD_ADDR_OWVAR 20
37490: PUSH
37491: LD_VAR 0 16
37495: ST_TO_ADDR
// uc_nation := nation ;
37496: LD_ADDR_OWVAR 21
37500: PUSH
37501: LD_VAR 0 17
37505: ST_TO_ADDR
// if buildings then
37506: LD_VAR 0 18
37510: IFFALSE 38832
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37512: LD_ADDR_VAR 0 19
37516: PUSH
37517: LD_VAR 0 18
37521: PPUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 30
37527: PUSH
37528: LD_INT 29
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 30
37537: PUSH
37538: LD_INT 30
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: PPUSH
37550: CALL_OW 72
37554: ST_TO_ADDR
// if tmp then
37555: LD_VAR 0 19
37559: IFFALSE 37607
// for i in tmp do
37561: LD_ADDR_VAR 0 8
37565: PUSH
37566: LD_VAR 0 19
37570: PUSH
37571: FOR_IN
37572: IFFALSE 37605
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37574: LD_VAR 0 8
37578: PPUSH
37579: CALL_OW 250
37583: PPUSH
37584: LD_VAR 0 8
37588: PPUSH
37589: CALL_OW 251
37593: PPUSH
37594: LD_VAR 0 16
37598: PPUSH
37599: CALL_OW 441
37603: GO 37571
37605: POP
37606: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37607: LD_VAR 0 18
37611: PPUSH
37612: LD_INT 2
37614: PUSH
37615: LD_INT 30
37617: PUSH
37618: LD_INT 32
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 30
37627: PUSH
37628: LD_INT 33
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: PPUSH
37640: CALL_OW 72
37644: IFFALSE 37732
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37646: LD_ADDR_VAR 0 8
37650: PUSH
37651: LD_VAR 0 18
37655: PPUSH
37656: LD_INT 2
37658: PUSH
37659: LD_INT 30
37661: PUSH
37662: LD_INT 32
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 30
37671: PUSH
37672: LD_INT 33
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: PPUSH
37684: CALL_OW 72
37688: PUSH
37689: FOR_IN
37690: IFFALSE 37730
// begin if not GetBWeapon ( i ) then
37692: LD_VAR 0 8
37696: PPUSH
37697: CALL_OW 269
37701: NOT
37702: IFFALSE 37728
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37704: LD_VAR 0 8
37708: PPUSH
37709: LD_VAR 0 8
37713: PPUSH
37714: LD_VAR 0 2
37718: PPUSH
37719: CALL 38978 0 2
37723: PPUSH
37724: CALL_OW 431
// end ;
37728: GO 37689
37730: POP
37731: POP
// end ; for i = 1 to personel do
37732: LD_ADDR_VAR 0 8
37736: PUSH
37737: DOUBLE
37738: LD_INT 1
37740: DEC
37741: ST_TO_ADDR
37742: LD_VAR 0 6
37746: PUSH
37747: FOR_TO
37748: IFFALSE 38812
// begin if i > 4 then
37750: LD_VAR 0 8
37754: PUSH
37755: LD_INT 4
37757: GREATER
37758: IFFALSE 37762
// break ;
37760: GO 38812
// case i of 1 :
37762: LD_VAR 0 8
37766: PUSH
37767: LD_INT 1
37769: DOUBLE
37770: EQUAL
37771: IFTRUE 37775
37773: GO 37855
37775: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37776: LD_ADDR_VAR 0 12
37780: PUSH
37781: LD_VAR 0 18
37785: PPUSH
37786: LD_INT 22
37788: PUSH
37789: LD_VAR 0 16
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 58
37800: PUSH
37801: EMPTY
37802: LIST
37803: PUSH
37804: LD_INT 2
37806: PUSH
37807: LD_INT 30
37809: PUSH
37810: LD_INT 32
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 30
37819: PUSH
37820: LD_INT 4
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 30
37829: PUSH
37830: LD_INT 5
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: PPUSH
37848: CALL_OW 72
37852: ST_TO_ADDR
37853: GO 38077
37855: LD_INT 2
37857: DOUBLE
37858: EQUAL
37859: IFTRUE 37863
37861: GO 37925
37863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37864: LD_ADDR_VAR 0 12
37868: PUSH
37869: LD_VAR 0 18
37873: PPUSH
37874: LD_INT 22
37876: PUSH
37877: LD_VAR 0 16
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: LD_INT 30
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 30
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PPUSH
37918: CALL_OW 72
37922: ST_TO_ADDR
37923: GO 38077
37925: LD_INT 3
37927: DOUBLE
37928: EQUAL
37929: IFTRUE 37933
37931: GO 37995
37933: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37934: LD_ADDR_VAR 0 12
37938: PUSH
37939: LD_VAR 0 18
37943: PPUSH
37944: LD_INT 22
37946: PUSH
37947: LD_VAR 0 16
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: LD_INT 30
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 30
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PPUSH
37988: CALL_OW 72
37992: ST_TO_ADDR
37993: GO 38077
37995: LD_INT 4
37997: DOUBLE
37998: EQUAL
37999: IFTRUE 38003
38001: GO 38076
38003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38004: LD_ADDR_VAR 0 12
38008: PUSH
38009: LD_VAR 0 18
38013: PPUSH
38014: LD_INT 22
38016: PUSH
38017: LD_VAR 0 16
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: LD_INT 30
38031: PUSH
38032: LD_INT 6
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 30
38041: PUSH
38042: LD_INT 7
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 30
38051: PUSH
38052: LD_INT 8
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PPUSH
38069: CALL_OW 72
38073: ST_TO_ADDR
38074: GO 38077
38076: POP
// if i = 1 then
38077: LD_VAR 0 8
38081: PUSH
38082: LD_INT 1
38084: EQUAL
38085: IFFALSE 38196
// begin tmp := [ ] ;
38087: LD_ADDR_VAR 0 19
38091: PUSH
38092: EMPTY
38093: ST_TO_ADDR
// for j in f do
38094: LD_ADDR_VAR 0 9
38098: PUSH
38099: LD_VAR 0 12
38103: PUSH
38104: FOR_IN
38105: IFFALSE 38178
// if GetBType ( j ) = b_bunker then
38107: LD_VAR 0 9
38111: PPUSH
38112: CALL_OW 266
38116: PUSH
38117: LD_INT 32
38119: EQUAL
38120: IFFALSE 38147
// tmp := Insert ( tmp , 1 , j ) else
38122: LD_ADDR_VAR 0 19
38126: PUSH
38127: LD_VAR 0 19
38131: PPUSH
38132: LD_INT 1
38134: PPUSH
38135: LD_VAR 0 9
38139: PPUSH
38140: CALL_OW 2
38144: ST_TO_ADDR
38145: GO 38176
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38147: LD_ADDR_VAR 0 19
38151: PUSH
38152: LD_VAR 0 19
38156: PPUSH
38157: LD_VAR 0 19
38161: PUSH
38162: LD_INT 1
38164: PLUS
38165: PPUSH
38166: LD_VAR 0 9
38170: PPUSH
38171: CALL_OW 2
38175: ST_TO_ADDR
38176: GO 38104
38178: POP
38179: POP
// if tmp then
38180: LD_VAR 0 19
38184: IFFALSE 38196
// f := tmp ;
38186: LD_ADDR_VAR 0 12
38190: PUSH
38191: LD_VAR 0 19
38195: ST_TO_ADDR
// end ; x := personel [ i ] ;
38196: LD_ADDR_VAR 0 13
38200: PUSH
38201: LD_VAR 0 6
38205: PUSH
38206: LD_VAR 0 8
38210: ARRAY
38211: ST_TO_ADDR
// if x = - 1 then
38212: LD_VAR 0 13
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: EQUAL
38221: IFFALSE 38430
// begin for j in f do
38223: LD_ADDR_VAR 0 9
38227: PUSH
38228: LD_VAR 0 12
38232: PUSH
38233: FOR_IN
38234: IFFALSE 38426
// repeat InitHc ;
38236: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38240: LD_VAR 0 9
38244: PPUSH
38245: CALL_OW 266
38249: PUSH
38250: LD_INT 5
38252: EQUAL
38253: IFFALSE 38323
// begin if UnitsInside ( j ) < 3 then
38255: LD_VAR 0 9
38259: PPUSH
38260: CALL_OW 313
38264: PUSH
38265: LD_INT 3
38267: LESS
38268: IFFALSE 38304
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38270: LD_INT 0
38272: PPUSH
38273: LD_INT 5
38275: PUSH
38276: LD_INT 8
38278: PUSH
38279: LD_INT 9
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: PUSH
38287: LD_VAR 0 17
38291: ARRAY
38292: PPUSH
38293: LD_VAR 0 4
38297: PPUSH
38298: CALL_OW 380
38302: GO 38321
// PrepareHuman ( false , i , skill ) ;
38304: LD_INT 0
38306: PPUSH
38307: LD_VAR 0 8
38311: PPUSH
38312: LD_VAR 0 4
38316: PPUSH
38317: CALL_OW 380
// end else
38321: GO 38340
// PrepareHuman ( false , i , skill ) ;
38323: LD_INT 0
38325: PPUSH
38326: LD_VAR 0 8
38330: PPUSH
38331: LD_VAR 0 4
38335: PPUSH
38336: CALL_OW 380
// un := CreateHuman ;
38340: LD_ADDR_VAR 0 14
38344: PUSH
38345: CALL_OW 44
38349: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38350: LD_ADDR_VAR 0 7
38354: PUSH
38355: LD_VAR 0 7
38359: PPUSH
38360: LD_INT 1
38362: PPUSH
38363: LD_VAR 0 14
38367: PPUSH
38368: CALL_OW 2
38372: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38373: LD_VAR 0 14
38377: PPUSH
38378: LD_VAR 0 9
38382: PPUSH
38383: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38387: LD_VAR 0 9
38391: PPUSH
38392: CALL_OW 313
38396: PUSH
38397: LD_INT 6
38399: EQUAL
38400: PUSH
38401: LD_VAR 0 9
38405: PPUSH
38406: CALL_OW 266
38410: PUSH
38411: LD_INT 32
38413: PUSH
38414: LD_INT 31
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: IN
38421: OR
38422: IFFALSE 38236
38424: GO 38233
38426: POP
38427: POP
// end else
38428: GO 38810
// for j = 1 to x do
38430: LD_ADDR_VAR 0 9
38434: PUSH
38435: DOUBLE
38436: LD_INT 1
38438: DEC
38439: ST_TO_ADDR
38440: LD_VAR 0 13
38444: PUSH
38445: FOR_TO
38446: IFFALSE 38808
// begin InitHc ;
38448: CALL_OW 19
// if not f then
38452: LD_VAR 0 12
38456: NOT
38457: IFFALSE 38546
// begin PrepareHuman ( false , i , skill ) ;
38459: LD_INT 0
38461: PPUSH
38462: LD_VAR 0 8
38466: PPUSH
38467: LD_VAR 0 4
38471: PPUSH
38472: CALL_OW 380
// un := CreateHuman ;
38476: LD_ADDR_VAR 0 14
38480: PUSH
38481: CALL_OW 44
38485: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38486: LD_ADDR_VAR 0 7
38490: PUSH
38491: LD_VAR 0 7
38495: PPUSH
38496: LD_INT 1
38498: PPUSH
38499: LD_VAR 0 14
38503: PPUSH
38504: CALL_OW 2
38508: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38509: LD_VAR 0 14
38513: PPUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: CALL_OW 250
38523: PPUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: CALL_OW 251
38533: PPUSH
38534: LD_INT 10
38536: PPUSH
38537: LD_INT 0
38539: PPUSH
38540: CALL_OW 50
// continue ;
38544: GO 38445
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38546: LD_VAR 0 12
38550: PUSH
38551: LD_INT 1
38553: ARRAY
38554: PPUSH
38555: CALL_OW 313
38559: PUSH
38560: LD_VAR 0 12
38564: PUSH
38565: LD_INT 1
38567: ARRAY
38568: PPUSH
38569: CALL_OW 266
38573: PUSH
38574: LD_INT 32
38576: PUSH
38577: LD_INT 31
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: IN
38584: AND
38585: PUSH
38586: LD_VAR 0 12
38590: PUSH
38591: LD_INT 1
38593: ARRAY
38594: PPUSH
38595: CALL_OW 313
38599: PUSH
38600: LD_INT 6
38602: EQUAL
38603: OR
38604: IFFALSE 38624
// f := Delete ( f , 1 ) ;
38606: LD_ADDR_VAR 0 12
38610: PUSH
38611: LD_VAR 0 12
38615: PPUSH
38616: LD_INT 1
38618: PPUSH
38619: CALL_OW 3
38623: ST_TO_ADDR
// if not f then
38624: LD_VAR 0 12
38628: NOT
38629: IFFALSE 38647
// begin x := x + 2 ;
38631: LD_ADDR_VAR 0 13
38635: PUSH
38636: LD_VAR 0 13
38640: PUSH
38641: LD_INT 2
38643: PLUS
38644: ST_TO_ADDR
// continue ;
38645: GO 38445
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38647: LD_VAR 0 12
38651: PUSH
38652: LD_INT 1
38654: ARRAY
38655: PPUSH
38656: CALL_OW 266
38660: PUSH
38661: LD_INT 5
38663: EQUAL
38664: IFFALSE 38738
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38666: LD_VAR 0 12
38670: PUSH
38671: LD_INT 1
38673: ARRAY
38674: PPUSH
38675: CALL_OW 313
38679: PUSH
38680: LD_INT 3
38682: LESS
38683: IFFALSE 38719
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38685: LD_INT 0
38687: PPUSH
38688: LD_INT 5
38690: PUSH
38691: LD_INT 8
38693: PUSH
38694: LD_INT 9
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: PUSH
38702: LD_VAR 0 17
38706: ARRAY
38707: PPUSH
38708: LD_VAR 0 4
38712: PPUSH
38713: CALL_OW 380
38717: GO 38736
// PrepareHuman ( false , i , skill ) ;
38719: LD_INT 0
38721: PPUSH
38722: LD_VAR 0 8
38726: PPUSH
38727: LD_VAR 0 4
38731: PPUSH
38732: CALL_OW 380
// end else
38736: GO 38755
// PrepareHuman ( false , i , skill ) ;
38738: LD_INT 0
38740: PPUSH
38741: LD_VAR 0 8
38745: PPUSH
38746: LD_VAR 0 4
38750: PPUSH
38751: CALL_OW 380
// un := CreateHuman ;
38755: LD_ADDR_VAR 0 14
38759: PUSH
38760: CALL_OW 44
38764: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38765: LD_ADDR_VAR 0 7
38769: PUSH
38770: LD_VAR 0 7
38774: PPUSH
38775: LD_INT 1
38777: PPUSH
38778: LD_VAR 0 14
38782: PPUSH
38783: CALL_OW 2
38787: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38788: LD_VAR 0 14
38792: PPUSH
38793: LD_VAR 0 12
38797: PUSH
38798: LD_INT 1
38800: ARRAY
38801: PPUSH
38802: CALL_OW 52
// end ;
38806: GO 38445
38808: POP
38809: POP
// end ;
38810: GO 37747
38812: POP
38813: POP
// result := result ^ buildings ;
38814: LD_ADDR_VAR 0 7
38818: PUSH
38819: LD_VAR 0 7
38823: PUSH
38824: LD_VAR 0 18
38828: ADD
38829: ST_TO_ADDR
// end else
38830: GO 38973
// begin for i = 1 to personel do
38832: LD_ADDR_VAR 0 8
38836: PUSH
38837: DOUBLE
38838: LD_INT 1
38840: DEC
38841: ST_TO_ADDR
38842: LD_VAR 0 6
38846: PUSH
38847: FOR_TO
38848: IFFALSE 38971
// begin if i > 4 then
38850: LD_VAR 0 8
38854: PUSH
38855: LD_INT 4
38857: GREATER
38858: IFFALSE 38862
// break ;
38860: GO 38971
// x := personel [ i ] ;
38862: LD_ADDR_VAR 0 13
38866: PUSH
38867: LD_VAR 0 6
38871: PUSH
38872: LD_VAR 0 8
38876: ARRAY
38877: ST_TO_ADDR
// if x = - 1 then
38878: LD_VAR 0 13
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: EQUAL
38887: IFFALSE 38891
// continue ;
38889: GO 38847
// PrepareHuman ( false , i , skill ) ;
38891: LD_INT 0
38893: PPUSH
38894: LD_VAR 0 8
38898: PPUSH
38899: LD_VAR 0 4
38903: PPUSH
38904: CALL_OW 380
// un := CreateHuman ;
38908: LD_ADDR_VAR 0 14
38912: PUSH
38913: CALL_OW 44
38917: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38918: LD_VAR 0 14
38922: PPUSH
38923: LD_VAR 0 1
38927: PPUSH
38928: CALL_OW 250
38932: PPUSH
38933: LD_VAR 0 1
38937: PPUSH
38938: CALL_OW 251
38942: PPUSH
38943: LD_INT 10
38945: PPUSH
38946: LD_INT 0
38948: PPUSH
38949: CALL_OW 50
// result := result ^ un ;
38953: LD_ADDR_VAR 0 7
38957: PUSH
38958: LD_VAR 0 7
38962: PUSH
38963: LD_VAR 0 14
38967: ADD
38968: ST_TO_ADDR
// end ;
38969: GO 38847
38971: POP
38972: POP
// end ; end ;
38973: LD_VAR 0 7
38977: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38978: LD_INT 0
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
38991: PPUSH
38992: PPUSH
38993: PPUSH
38994: PPUSH
38995: PPUSH
// result := false ;
38996: LD_ADDR_VAR 0 3
39000: PUSH
39001: LD_INT 0
39003: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39004: LD_VAR 0 1
39008: NOT
39009: PUSH
39010: LD_VAR 0 1
39014: PPUSH
39015: CALL_OW 266
39019: PUSH
39020: LD_INT 32
39022: PUSH
39023: LD_INT 33
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: IN
39030: NOT
39031: OR
39032: IFFALSE 39036
// exit ;
39034: GO 40145
// nat := GetNation ( tower ) ;
39036: LD_ADDR_VAR 0 12
39040: PUSH
39041: LD_VAR 0 1
39045: PPUSH
39046: CALL_OW 248
39050: ST_TO_ADDR
// side := GetSide ( tower ) ;
39051: LD_ADDR_VAR 0 16
39055: PUSH
39056: LD_VAR 0 1
39060: PPUSH
39061: CALL_OW 255
39065: ST_TO_ADDR
// x := GetX ( tower ) ;
39066: LD_ADDR_VAR 0 10
39070: PUSH
39071: LD_VAR 0 1
39075: PPUSH
39076: CALL_OW 250
39080: ST_TO_ADDR
// y := GetY ( tower ) ;
39081: LD_ADDR_VAR 0 11
39085: PUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 251
39095: ST_TO_ADDR
// if not x or not y then
39096: LD_VAR 0 10
39100: NOT
39101: PUSH
39102: LD_VAR 0 11
39106: NOT
39107: OR
39108: IFFALSE 39112
// exit ;
39110: GO 40145
// weapon := 0 ;
39112: LD_ADDR_VAR 0 18
39116: PUSH
39117: LD_INT 0
39119: ST_TO_ADDR
// fac_list := [ ] ;
39120: LD_ADDR_VAR 0 17
39124: PUSH
39125: EMPTY
39126: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39127: LD_ADDR_VAR 0 6
39131: PUSH
39132: LD_VAR 0 1
39136: PPUSH
39137: CALL_OW 274
39141: PPUSH
39142: LD_VAR 0 2
39146: PPUSH
39147: LD_INT 0
39149: PPUSH
39150: CALL 36716 0 3
39154: PPUSH
39155: LD_INT 30
39157: PUSH
39158: LD_INT 3
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PPUSH
39165: CALL_OW 72
39169: ST_TO_ADDR
// if not factories then
39170: LD_VAR 0 6
39174: NOT
39175: IFFALSE 39179
// exit ;
39177: GO 40145
// for i in factories do
39179: LD_ADDR_VAR 0 8
39183: PUSH
39184: LD_VAR 0 6
39188: PUSH
39189: FOR_IN
39190: IFFALSE 39215
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39192: LD_ADDR_VAR 0 17
39196: PUSH
39197: LD_VAR 0 17
39201: PUSH
39202: LD_VAR 0 8
39206: PPUSH
39207: CALL_OW 478
39211: UNION
39212: ST_TO_ADDR
39213: GO 39189
39215: POP
39216: POP
// if not fac_list then
39217: LD_VAR 0 17
39221: NOT
39222: IFFALSE 39226
// exit ;
39224: GO 40145
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39226: LD_ADDR_VAR 0 5
39230: PUSH
39231: LD_INT 4
39233: PUSH
39234: LD_INT 5
39236: PUSH
39237: LD_INT 9
39239: PUSH
39240: LD_INT 10
39242: PUSH
39243: LD_INT 6
39245: PUSH
39246: LD_INT 7
39248: PUSH
39249: LD_INT 11
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 27
39263: PUSH
39264: LD_INT 28
39266: PUSH
39267: LD_INT 26
39269: PUSH
39270: LD_INT 30
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 43
39281: PUSH
39282: LD_INT 44
39284: PUSH
39285: LD_INT 46
39287: PUSH
39288: LD_INT 45
39290: PUSH
39291: LD_INT 47
39293: PUSH
39294: LD_INT 49
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: PUSH
39310: LD_VAR 0 12
39314: ARRAY
39315: ST_TO_ADDR
// list := list isect fac_list ;
39316: LD_ADDR_VAR 0 5
39320: PUSH
39321: LD_VAR 0 5
39325: PUSH
39326: LD_VAR 0 17
39330: ISECT
39331: ST_TO_ADDR
// if not list then
39332: LD_VAR 0 5
39336: NOT
39337: IFFALSE 39341
// exit ;
39339: GO 40145
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39341: LD_VAR 0 12
39345: PUSH
39346: LD_INT 3
39348: EQUAL
39349: PUSH
39350: LD_INT 49
39352: PUSH
39353: LD_VAR 0 5
39357: IN
39358: AND
39359: PUSH
39360: LD_INT 31
39362: PPUSH
39363: LD_VAR 0 16
39367: PPUSH
39368: CALL_OW 321
39372: PUSH
39373: LD_INT 2
39375: EQUAL
39376: AND
39377: IFFALSE 39437
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39379: LD_INT 22
39381: PUSH
39382: LD_VAR 0 16
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 35
39393: PUSH
39394: LD_INT 49
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 91
39403: PUSH
39404: LD_VAR 0 1
39408: PUSH
39409: LD_INT 10
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: LIST
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: PPUSH
39422: CALL_OW 69
39426: NOT
39427: IFFALSE 39437
// weapon := ru_time_lapser ;
39429: LD_ADDR_VAR 0 18
39433: PUSH
39434: LD_INT 49
39436: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39437: LD_VAR 0 12
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: IN
39452: PUSH
39453: LD_INT 11
39455: PUSH
39456: LD_VAR 0 5
39460: IN
39461: PUSH
39462: LD_INT 30
39464: PUSH
39465: LD_VAR 0 5
39469: IN
39470: OR
39471: AND
39472: PUSH
39473: LD_INT 6
39475: PPUSH
39476: LD_VAR 0 16
39480: PPUSH
39481: CALL_OW 321
39485: PUSH
39486: LD_INT 2
39488: EQUAL
39489: AND
39490: IFFALSE 39655
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39492: LD_INT 22
39494: PUSH
39495: LD_VAR 0 16
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: LD_INT 35
39509: PUSH
39510: LD_INT 11
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 35
39519: PUSH
39520: LD_INT 30
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 91
39534: PUSH
39535: LD_VAR 0 1
39539: PUSH
39540: LD_INT 18
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: PPUSH
39553: CALL_OW 69
39557: NOT
39558: PUSH
39559: LD_INT 22
39561: PUSH
39562: LD_VAR 0 16
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: LD_INT 30
39576: PUSH
39577: LD_INT 32
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 30
39586: PUSH
39587: LD_INT 33
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 91
39601: PUSH
39602: LD_VAR 0 1
39606: PUSH
39607: LD_INT 12
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: PPUSH
39623: CALL_OW 69
39627: PUSH
39628: LD_INT 2
39630: GREATER
39631: AND
39632: IFFALSE 39655
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39634: LD_ADDR_VAR 0 18
39638: PUSH
39639: LD_INT 11
39641: PUSH
39642: LD_INT 30
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_VAR 0 12
39653: ARRAY
39654: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39655: LD_VAR 0 18
39659: NOT
39660: PUSH
39661: LD_INT 40
39663: PPUSH
39664: LD_VAR 0 16
39668: PPUSH
39669: CALL_OW 321
39673: PUSH
39674: LD_INT 2
39676: EQUAL
39677: AND
39678: PUSH
39679: LD_INT 7
39681: PUSH
39682: LD_VAR 0 5
39686: IN
39687: PUSH
39688: LD_INT 28
39690: PUSH
39691: LD_VAR 0 5
39695: IN
39696: OR
39697: PUSH
39698: LD_INT 45
39700: PUSH
39701: LD_VAR 0 5
39705: IN
39706: OR
39707: AND
39708: IFFALSE 39962
// begin hex := GetHexInfo ( x , y ) ;
39710: LD_ADDR_VAR 0 4
39714: PUSH
39715: LD_VAR 0 10
39719: PPUSH
39720: LD_VAR 0 11
39724: PPUSH
39725: CALL_OW 546
39729: ST_TO_ADDR
// if hex [ 1 ] then
39730: LD_VAR 0 4
39734: PUSH
39735: LD_INT 1
39737: ARRAY
39738: IFFALSE 39742
// exit ;
39740: GO 40145
// height := hex [ 2 ] ;
39742: LD_ADDR_VAR 0 15
39746: PUSH
39747: LD_VAR 0 4
39751: PUSH
39752: LD_INT 2
39754: ARRAY
39755: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39756: LD_ADDR_VAR 0 14
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 3
39769: PUSH
39770: LD_INT 5
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: ST_TO_ADDR
// for i in tmp do
39779: LD_ADDR_VAR 0 8
39783: PUSH
39784: LD_VAR 0 14
39788: PUSH
39789: FOR_IN
39790: IFFALSE 39960
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39792: LD_ADDR_VAR 0 9
39796: PUSH
39797: LD_VAR 0 10
39801: PPUSH
39802: LD_VAR 0 8
39806: PPUSH
39807: LD_INT 5
39809: PPUSH
39810: CALL_OW 272
39814: PUSH
39815: LD_VAR 0 11
39819: PPUSH
39820: LD_VAR 0 8
39824: PPUSH
39825: LD_INT 5
39827: PPUSH
39828: CALL_OW 273
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39837: LD_VAR 0 9
39841: PUSH
39842: LD_INT 1
39844: ARRAY
39845: PPUSH
39846: LD_VAR 0 9
39850: PUSH
39851: LD_INT 2
39853: ARRAY
39854: PPUSH
39855: CALL_OW 488
39859: IFFALSE 39958
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39861: LD_ADDR_VAR 0 4
39865: PUSH
39866: LD_VAR 0 9
39870: PUSH
39871: LD_INT 1
39873: ARRAY
39874: PPUSH
39875: LD_VAR 0 9
39879: PUSH
39880: LD_INT 2
39882: ARRAY
39883: PPUSH
39884: CALL_OW 546
39888: ST_TO_ADDR
// if hex [ 1 ] then
39889: LD_VAR 0 4
39893: PUSH
39894: LD_INT 1
39896: ARRAY
39897: IFFALSE 39901
// continue ;
39899: GO 39789
// h := hex [ 2 ] ;
39901: LD_ADDR_VAR 0 13
39905: PUSH
39906: LD_VAR 0 4
39910: PUSH
39911: LD_INT 2
39913: ARRAY
39914: ST_TO_ADDR
// if h + 7 < height then
39915: LD_VAR 0 13
39919: PUSH
39920: LD_INT 7
39922: PLUS
39923: PUSH
39924: LD_VAR 0 15
39928: LESS
39929: IFFALSE 39958
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39931: LD_ADDR_VAR 0 18
39935: PUSH
39936: LD_INT 7
39938: PUSH
39939: LD_INT 28
39941: PUSH
39942: LD_INT 45
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: PUSH
39950: LD_VAR 0 12
39954: ARRAY
39955: ST_TO_ADDR
// break ;
39956: GO 39960
// end ; end ; end ;
39958: GO 39789
39960: POP
39961: POP
// end ; if not weapon then
39962: LD_VAR 0 18
39966: NOT
39967: IFFALSE 40027
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39969: LD_ADDR_VAR 0 5
39973: PUSH
39974: LD_VAR 0 5
39978: PUSH
39979: LD_INT 11
39981: PUSH
39982: LD_INT 30
39984: PUSH
39985: LD_INT 49
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: DIFF
39993: ST_TO_ADDR
// if not list then
39994: LD_VAR 0 5
39998: NOT
39999: IFFALSE 40003
// exit ;
40001: GO 40145
// weapon := list [ rand ( 1 , list ) ] ;
40003: LD_ADDR_VAR 0 18
40007: PUSH
40008: LD_VAR 0 5
40012: PUSH
40013: LD_INT 1
40015: PPUSH
40016: LD_VAR 0 5
40020: PPUSH
40021: CALL_OW 12
40025: ARRAY
40026: ST_TO_ADDR
// end ; if weapon then
40027: LD_VAR 0 18
40031: IFFALSE 40145
// begin tmp := CostOfWeapon ( weapon ) ;
40033: LD_ADDR_VAR 0 14
40037: PUSH
40038: LD_VAR 0 18
40042: PPUSH
40043: CALL_OW 451
40047: ST_TO_ADDR
// j := GetBase ( tower ) ;
40048: LD_ADDR_VAR 0 9
40052: PUSH
40053: LD_VAR 0 1
40057: PPUSH
40058: CALL_OW 274
40062: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40063: LD_VAR 0 9
40067: PPUSH
40068: LD_INT 1
40070: PPUSH
40071: CALL_OW 275
40075: PUSH
40076: LD_VAR 0 14
40080: PUSH
40081: LD_INT 1
40083: ARRAY
40084: GREATEREQUAL
40085: PUSH
40086: LD_VAR 0 9
40090: PPUSH
40091: LD_INT 2
40093: PPUSH
40094: CALL_OW 275
40098: PUSH
40099: LD_VAR 0 14
40103: PUSH
40104: LD_INT 2
40106: ARRAY
40107: GREATEREQUAL
40108: AND
40109: PUSH
40110: LD_VAR 0 9
40114: PPUSH
40115: LD_INT 3
40117: PPUSH
40118: CALL_OW 275
40122: PUSH
40123: LD_VAR 0 14
40127: PUSH
40128: LD_INT 3
40130: ARRAY
40131: GREATEREQUAL
40132: AND
40133: IFFALSE 40145
// result := weapon ;
40135: LD_ADDR_VAR 0 3
40139: PUSH
40140: LD_VAR 0 18
40144: ST_TO_ADDR
// end ; end ;
40145: LD_VAR 0 3
40149: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40150: LD_INT 0
40152: PPUSH
40153: PPUSH
// result := true ;
40154: LD_ADDR_VAR 0 3
40158: PUSH
40159: LD_INT 1
40161: ST_TO_ADDR
// if array1 = array2 then
40162: LD_VAR 0 1
40166: PUSH
40167: LD_VAR 0 2
40171: EQUAL
40172: IFFALSE 40232
// begin for i = 1 to array1 do
40174: LD_ADDR_VAR 0 4
40178: PUSH
40179: DOUBLE
40180: LD_INT 1
40182: DEC
40183: ST_TO_ADDR
40184: LD_VAR 0 1
40188: PUSH
40189: FOR_TO
40190: IFFALSE 40228
// if array1 [ i ] <> array2 [ i ] then
40192: LD_VAR 0 1
40196: PUSH
40197: LD_VAR 0 4
40201: ARRAY
40202: PUSH
40203: LD_VAR 0 2
40207: PUSH
40208: LD_VAR 0 4
40212: ARRAY
40213: NONEQUAL
40214: IFFALSE 40226
// begin result := false ;
40216: LD_ADDR_VAR 0 3
40220: PUSH
40221: LD_INT 0
40223: ST_TO_ADDR
// break ;
40224: GO 40228
// end ;
40226: GO 40189
40228: POP
40229: POP
// end else
40230: GO 40240
// result := false ;
40232: LD_ADDR_VAR 0 3
40236: PUSH
40237: LD_INT 0
40239: ST_TO_ADDR
// end ;
40240: LD_VAR 0 3
40244: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40245: LD_INT 0
40247: PPUSH
40248: PPUSH
// if not array1 or not array2 then
40249: LD_VAR 0 1
40253: NOT
40254: PUSH
40255: LD_VAR 0 2
40259: NOT
40260: OR
40261: IFFALSE 40265
// exit ;
40263: GO 40329
// result := true ;
40265: LD_ADDR_VAR 0 3
40269: PUSH
40270: LD_INT 1
40272: ST_TO_ADDR
// for i = 1 to array1 do
40273: LD_ADDR_VAR 0 4
40277: PUSH
40278: DOUBLE
40279: LD_INT 1
40281: DEC
40282: ST_TO_ADDR
40283: LD_VAR 0 1
40287: PUSH
40288: FOR_TO
40289: IFFALSE 40327
// if array1 [ i ] <> array2 [ i ] then
40291: LD_VAR 0 1
40295: PUSH
40296: LD_VAR 0 4
40300: ARRAY
40301: PUSH
40302: LD_VAR 0 2
40306: PUSH
40307: LD_VAR 0 4
40311: ARRAY
40312: NONEQUAL
40313: IFFALSE 40325
// begin result := false ;
40315: LD_ADDR_VAR 0 3
40319: PUSH
40320: LD_INT 0
40322: ST_TO_ADDR
// break ;
40323: GO 40327
// end ;
40325: GO 40288
40327: POP
40328: POP
// end ;
40329: LD_VAR 0 3
40333: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40334: LD_INT 0
40336: PPUSH
40337: PPUSH
40338: PPUSH
// pom := GetBase ( fac ) ;
40339: LD_ADDR_VAR 0 5
40343: PUSH
40344: LD_VAR 0 1
40348: PPUSH
40349: CALL_OW 274
40353: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40354: LD_ADDR_VAR 0 4
40358: PUSH
40359: LD_VAR 0 2
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: PPUSH
40368: LD_VAR 0 2
40372: PUSH
40373: LD_INT 2
40375: ARRAY
40376: PPUSH
40377: LD_VAR 0 2
40381: PUSH
40382: LD_INT 3
40384: ARRAY
40385: PPUSH
40386: LD_VAR 0 2
40390: PUSH
40391: LD_INT 4
40393: ARRAY
40394: PPUSH
40395: CALL_OW 449
40399: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40400: LD_ADDR_VAR 0 3
40404: PUSH
40405: LD_VAR 0 5
40409: PPUSH
40410: LD_INT 1
40412: PPUSH
40413: CALL_OW 275
40417: PUSH
40418: LD_VAR 0 4
40422: PUSH
40423: LD_INT 1
40425: ARRAY
40426: GREATEREQUAL
40427: PUSH
40428: LD_VAR 0 5
40432: PPUSH
40433: LD_INT 2
40435: PPUSH
40436: CALL_OW 275
40440: PUSH
40441: LD_VAR 0 4
40445: PUSH
40446: LD_INT 2
40448: ARRAY
40449: GREATEREQUAL
40450: AND
40451: PUSH
40452: LD_VAR 0 5
40456: PPUSH
40457: LD_INT 3
40459: PPUSH
40460: CALL_OW 275
40464: PUSH
40465: LD_VAR 0 4
40469: PUSH
40470: LD_INT 3
40472: ARRAY
40473: GREATEREQUAL
40474: AND
40475: ST_TO_ADDR
// end ;
40476: LD_VAR 0 3
40480: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40481: LD_INT 0
40483: PPUSH
40484: PPUSH
40485: PPUSH
40486: PPUSH
// pom := GetBase ( building ) ;
40487: LD_ADDR_VAR 0 3
40491: PUSH
40492: LD_VAR 0 1
40496: PPUSH
40497: CALL_OW 274
40501: ST_TO_ADDR
// if not pom then
40502: LD_VAR 0 3
40506: NOT
40507: IFFALSE 40511
// exit ;
40509: GO 40681
// btype := GetBType ( building ) ;
40511: LD_ADDR_VAR 0 5
40515: PUSH
40516: LD_VAR 0 1
40520: PPUSH
40521: CALL_OW 266
40525: ST_TO_ADDR
// if btype = b_armoury then
40526: LD_VAR 0 5
40530: PUSH
40531: LD_INT 4
40533: EQUAL
40534: IFFALSE 40544
// btype := b_barracks ;
40536: LD_ADDR_VAR 0 5
40540: PUSH
40541: LD_INT 5
40543: ST_TO_ADDR
// if btype = b_depot then
40544: LD_VAR 0 5
40548: PUSH
40549: LD_INT 0
40551: EQUAL
40552: IFFALSE 40562
// btype := b_warehouse ;
40554: LD_ADDR_VAR 0 5
40558: PUSH
40559: LD_INT 1
40561: ST_TO_ADDR
// if btype = b_workshop then
40562: LD_VAR 0 5
40566: PUSH
40567: LD_INT 2
40569: EQUAL
40570: IFFALSE 40580
// btype := b_factory ;
40572: LD_ADDR_VAR 0 5
40576: PUSH
40577: LD_INT 3
40579: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40580: LD_ADDR_VAR 0 4
40584: PUSH
40585: LD_VAR 0 5
40589: PPUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 248
40599: PPUSH
40600: CALL_OW 450
40604: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40605: LD_ADDR_VAR 0 2
40609: PUSH
40610: LD_VAR 0 3
40614: PPUSH
40615: LD_INT 1
40617: PPUSH
40618: CALL_OW 275
40622: PUSH
40623: LD_VAR 0 4
40627: PUSH
40628: LD_INT 1
40630: ARRAY
40631: GREATEREQUAL
40632: PUSH
40633: LD_VAR 0 3
40637: PPUSH
40638: LD_INT 2
40640: PPUSH
40641: CALL_OW 275
40645: PUSH
40646: LD_VAR 0 4
40650: PUSH
40651: LD_INT 2
40653: ARRAY
40654: GREATEREQUAL
40655: AND
40656: PUSH
40657: LD_VAR 0 3
40661: PPUSH
40662: LD_INT 3
40664: PPUSH
40665: CALL_OW 275
40669: PUSH
40670: LD_VAR 0 4
40674: PUSH
40675: LD_INT 3
40677: ARRAY
40678: GREATEREQUAL
40679: AND
40680: ST_TO_ADDR
// end ;
40681: LD_VAR 0 2
40685: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40686: LD_INT 0
40688: PPUSH
40689: PPUSH
40690: PPUSH
// pom := GetBase ( building ) ;
40691: LD_ADDR_VAR 0 4
40695: PUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 274
40705: ST_TO_ADDR
// if not pom then
40706: LD_VAR 0 4
40710: NOT
40711: IFFALSE 40715
// exit ;
40713: GO 40816
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40715: LD_ADDR_VAR 0 5
40719: PUSH
40720: LD_VAR 0 2
40724: PPUSH
40725: LD_VAR 0 1
40729: PPUSH
40730: CALL_OW 248
40734: PPUSH
40735: CALL_OW 450
40739: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40740: LD_ADDR_VAR 0 3
40744: PUSH
40745: LD_VAR 0 4
40749: PPUSH
40750: LD_INT 1
40752: PPUSH
40753: CALL_OW 275
40757: PUSH
40758: LD_VAR 0 5
40762: PUSH
40763: LD_INT 1
40765: ARRAY
40766: GREATEREQUAL
40767: PUSH
40768: LD_VAR 0 4
40772: PPUSH
40773: LD_INT 2
40775: PPUSH
40776: CALL_OW 275
40780: PUSH
40781: LD_VAR 0 5
40785: PUSH
40786: LD_INT 2
40788: ARRAY
40789: GREATEREQUAL
40790: AND
40791: PUSH
40792: LD_VAR 0 4
40796: PPUSH
40797: LD_INT 3
40799: PPUSH
40800: CALL_OW 275
40804: PUSH
40805: LD_VAR 0 5
40809: PUSH
40810: LD_INT 3
40812: ARRAY
40813: GREATEREQUAL
40814: AND
40815: ST_TO_ADDR
// end ;
40816: LD_VAR 0 3
40820: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40821: LD_INT 0
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
// result := false ;
40834: LD_ADDR_VAR 0 8
40838: PUSH
40839: LD_INT 0
40841: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40842: LD_VAR 0 5
40846: NOT
40847: PUSH
40848: LD_VAR 0 1
40852: NOT
40853: OR
40854: PUSH
40855: LD_VAR 0 2
40859: NOT
40860: OR
40861: PUSH
40862: LD_VAR 0 3
40866: NOT
40867: OR
40868: IFFALSE 40872
// exit ;
40870: GO 41686
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40872: LD_ADDR_VAR 0 14
40876: PUSH
40877: LD_VAR 0 1
40881: PPUSH
40882: LD_VAR 0 2
40886: PPUSH
40887: LD_VAR 0 3
40891: PPUSH
40892: LD_VAR 0 4
40896: PPUSH
40897: LD_VAR 0 5
40901: PUSH
40902: LD_INT 1
40904: ARRAY
40905: PPUSH
40906: CALL_OW 248
40910: PPUSH
40911: LD_INT 0
40913: PPUSH
40914: CALL 42919 0 6
40918: ST_TO_ADDR
// if not hexes then
40919: LD_VAR 0 14
40923: NOT
40924: IFFALSE 40928
// exit ;
40926: GO 41686
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40928: LD_ADDR_VAR 0 17
40932: PUSH
40933: LD_VAR 0 5
40937: PPUSH
40938: LD_INT 22
40940: PUSH
40941: LD_VAR 0 13
40945: PPUSH
40946: CALL_OW 255
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 30
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 30
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: LIST
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PPUSH
40987: CALL_OW 72
40991: ST_TO_ADDR
// for i = 1 to hexes do
40992: LD_ADDR_VAR 0 9
40996: PUSH
40997: DOUBLE
40998: LD_INT 1
41000: DEC
41001: ST_TO_ADDR
41002: LD_VAR 0 14
41006: PUSH
41007: FOR_TO
41008: IFFALSE 41684
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41010: LD_ADDR_VAR 0 13
41014: PUSH
41015: LD_VAR 0 14
41019: PUSH
41020: LD_VAR 0 9
41024: ARRAY
41025: PUSH
41026: LD_INT 1
41028: ARRAY
41029: PPUSH
41030: LD_VAR 0 14
41034: PUSH
41035: LD_VAR 0 9
41039: ARRAY
41040: PUSH
41041: LD_INT 2
41043: ARRAY
41044: PPUSH
41045: CALL_OW 428
41049: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41050: LD_VAR 0 14
41054: PUSH
41055: LD_VAR 0 9
41059: ARRAY
41060: PUSH
41061: LD_INT 1
41063: ARRAY
41064: PPUSH
41065: LD_VAR 0 14
41069: PUSH
41070: LD_VAR 0 9
41074: ARRAY
41075: PUSH
41076: LD_INT 2
41078: ARRAY
41079: PPUSH
41080: CALL_OW 351
41084: PUSH
41085: LD_VAR 0 14
41089: PUSH
41090: LD_VAR 0 9
41094: ARRAY
41095: PUSH
41096: LD_INT 1
41098: ARRAY
41099: PPUSH
41100: LD_VAR 0 14
41104: PUSH
41105: LD_VAR 0 9
41109: ARRAY
41110: PUSH
41111: LD_INT 2
41113: ARRAY
41114: PPUSH
41115: CALL_OW 488
41119: NOT
41120: OR
41121: PUSH
41122: LD_VAR 0 13
41126: PPUSH
41127: CALL_OW 247
41131: PUSH
41132: LD_INT 3
41134: EQUAL
41135: OR
41136: IFFALSE 41142
// exit ;
41138: POP
41139: POP
41140: GO 41686
// if not tmp then
41142: LD_VAR 0 13
41146: NOT
41147: IFFALSE 41151
// continue ;
41149: GO 41007
// result := true ;
41151: LD_ADDR_VAR 0 8
41155: PUSH
41156: LD_INT 1
41158: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41159: LD_VAR 0 6
41163: PUSH
41164: LD_VAR 0 13
41168: PPUSH
41169: CALL_OW 247
41173: PUSH
41174: LD_INT 2
41176: EQUAL
41177: AND
41178: PUSH
41179: LD_VAR 0 13
41183: PPUSH
41184: CALL_OW 263
41188: PUSH
41189: LD_INT 1
41191: EQUAL
41192: AND
41193: IFFALSE 41357
// begin if IsDrivenBy ( tmp ) then
41195: LD_VAR 0 13
41199: PPUSH
41200: CALL_OW 311
41204: IFFALSE 41208
// continue ;
41206: GO 41007
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41208: LD_VAR 0 6
41212: PPUSH
41213: LD_INT 3
41215: PUSH
41216: LD_INT 60
41218: PUSH
41219: EMPTY
41220: LIST
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 3
41228: PUSH
41229: LD_INT 55
41231: PUSH
41232: EMPTY
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PPUSH
41243: CALL_OW 72
41247: IFFALSE 41355
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41249: LD_ADDR_VAR 0 18
41253: PUSH
41254: LD_VAR 0 6
41258: PPUSH
41259: LD_INT 3
41261: PUSH
41262: LD_INT 60
41264: PUSH
41265: EMPTY
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 3
41274: PUSH
41275: LD_INT 55
41277: PUSH
41278: EMPTY
41279: LIST
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PPUSH
41289: CALL_OW 72
41293: PUSH
41294: LD_INT 1
41296: ARRAY
41297: ST_TO_ADDR
// if IsInUnit ( driver ) then
41298: LD_VAR 0 18
41302: PPUSH
41303: CALL_OW 310
41307: IFFALSE 41318
// ComExit ( driver ) ;
41309: LD_VAR 0 18
41313: PPUSH
41314: CALL 66698 0 1
// AddComEnterUnit ( driver , tmp ) ;
41318: LD_VAR 0 18
41322: PPUSH
41323: LD_VAR 0 13
41327: PPUSH
41328: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41332: LD_VAR 0 18
41336: PPUSH
41337: LD_VAR 0 7
41341: PPUSH
41342: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41346: LD_VAR 0 18
41350: PPUSH
41351: CALL_OW 181
// end ; continue ;
41355: GO 41007
// end ; if not cleaners or not tmp in cleaners then
41357: LD_VAR 0 6
41361: NOT
41362: PUSH
41363: LD_VAR 0 13
41367: PUSH
41368: LD_VAR 0 6
41372: IN
41373: NOT
41374: OR
41375: IFFALSE 41682
// begin if dep then
41377: LD_VAR 0 17
41381: IFFALSE 41517
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41383: LD_ADDR_VAR 0 16
41387: PUSH
41388: LD_VAR 0 17
41392: PUSH
41393: LD_INT 1
41395: ARRAY
41396: PPUSH
41397: CALL_OW 250
41401: PPUSH
41402: LD_VAR 0 17
41406: PUSH
41407: LD_INT 1
41409: ARRAY
41410: PPUSH
41411: CALL_OW 254
41415: PPUSH
41416: LD_INT 5
41418: PPUSH
41419: CALL_OW 272
41423: PUSH
41424: LD_VAR 0 17
41428: PUSH
41429: LD_INT 1
41431: ARRAY
41432: PPUSH
41433: CALL_OW 251
41437: PPUSH
41438: LD_VAR 0 17
41442: PUSH
41443: LD_INT 1
41445: ARRAY
41446: PPUSH
41447: CALL_OW 254
41451: PPUSH
41452: LD_INT 5
41454: PPUSH
41455: CALL_OW 273
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41464: LD_VAR 0 16
41468: PUSH
41469: LD_INT 1
41471: ARRAY
41472: PPUSH
41473: LD_VAR 0 16
41477: PUSH
41478: LD_INT 2
41480: ARRAY
41481: PPUSH
41482: CALL_OW 488
41486: IFFALSE 41517
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41488: LD_VAR 0 13
41492: PPUSH
41493: LD_VAR 0 16
41497: PUSH
41498: LD_INT 1
41500: ARRAY
41501: PPUSH
41502: LD_VAR 0 16
41506: PUSH
41507: LD_INT 2
41509: ARRAY
41510: PPUSH
41511: CALL_OW 111
// continue ;
41515: GO 41007
// end ; end ; r := GetDir ( tmp ) ;
41517: LD_ADDR_VAR 0 15
41521: PUSH
41522: LD_VAR 0 13
41526: PPUSH
41527: CALL_OW 254
41531: ST_TO_ADDR
// if r = 5 then
41532: LD_VAR 0 15
41536: PUSH
41537: LD_INT 5
41539: EQUAL
41540: IFFALSE 41550
// r := 0 ;
41542: LD_ADDR_VAR 0 15
41546: PUSH
41547: LD_INT 0
41549: ST_TO_ADDR
// for j = r to 5 do
41550: LD_ADDR_VAR 0 10
41554: PUSH
41555: DOUBLE
41556: LD_VAR 0 15
41560: DEC
41561: ST_TO_ADDR
41562: LD_INT 5
41564: PUSH
41565: FOR_TO
41566: IFFALSE 41680
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41568: LD_ADDR_VAR 0 11
41572: PUSH
41573: LD_VAR 0 13
41577: PPUSH
41578: CALL_OW 250
41582: PPUSH
41583: LD_VAR 0 10
41587: PPUSH
41588: LD_INT 2
41590: PPUSH
41591: CALL_OW 272
41595: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41596: LD_ADDR_VAR 0 12
41600: PUSH
41601: LD_VAR 0 13
41605: PPUSH
41606: CALL_OW 251
41610: PPUSH
41611: LD_VAR 0 10
41615: PPUSH
41616: LD_INT 2
41618: PPUSH
41619: CALL_OW 273
41623: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41624: LD_VAR 0 11
41628: PPUSH
41629: LD_VAR 0 12
41633: PPUSH
41634: CALL_OW 488
41638: PUSH
41639: LD_VAR 0 11
41643: PPUSH
41644: LD_VAR 0 12
41648: PPUSH
41649: CALL_OW 428
41653: NOT
41654: AND
41655: IFFALSE 41678
// begin ComMoveXY ( tmp , _x , _y ) ;
41657: LD_VAR 0 13
41661: PPUSH
41662: LD_VAR 0 11
41666: PPUSH
41667: LD_VAR 0 12
41671: PPUSH
41672: CALL_OW 111
// break ;
41676: GO 41680
// end ; end ;
41678: GO 41565
41680: POP
41681: POP
// end ; end ;
41682: GO 41007
41684: POP
41685: POP
// end ;
41686: LD_VAR 0 8
41690: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41691: LD_INT 0
41693: PPUSH
// result := true ;
41694: LD_ADDR_VAR 0 3
41698: PUSH
41699: LD_INT 1
41701: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41702: LD_VAR 0 2
41706: PUSH
41707: LD_INT 24
41709: DOUBLE
41710: EQUAL
41711: IFTRUE 41721
41713: LD_INT 33
41715: DOUBLE
41716: EQUAL
41717: IFTRUE 41721
41719: GO 41746
41721: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41722: LD_ADDR_VAR 0 3
41726: PUSH
41727: LD_INT 32
41729: PPUSH
41730: LD_VAR 0 1
41734: PPUSH
41735: CALL_OW 321
41739: PUSH
41740: LD_INT 2
41742: EQUAL
41743: ST_TO_ADDR
41744: GO 42062
41746: LD_INT 20
41748: DOUBLE
41749: EQUAL
41750: IFTRUE 41754
41752: GO 41779
41754: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41755: LD_ADDR_VAR 0 3
41759: PUSH
41760: LD_INT 6
41762: PPUSH
41763: LD_VAR 0 1
41767: PPUSH
41768: CALL_OW 321
41772: PUSH
41773: LD_INT 2
41775: EQUAL
41776: ST_TO_ADDR
41777: GO 42062
41779: LD_INT 22
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41793
41785: LD_INT 36
41787: DOUBLE
41788: EQUAL
41789: IFTRUE 41793
41791: GO 41818
41793: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41794: LD_ADDR_VAR 0 3
41798: PUSH
41799: LD_INT 15
41801: PPUSH
41802: LD_VAR 0 1
41806: PPUSH
41807: CALL_OW 321
41811: PUSH
41812: LD_INT 2
41814: EQUAL
41815: ST_TO_ADDR
41816: GO 42062
41818: LD_INT 30
41820: DOUBLE
41821: EQUAL
41822: IFTRUE 41826
41824: GO 41851
41826: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41827: LD_ADDR_VAR 0 3
41831: PUSH
41832: LD_INT 20
41834: PPUSH
41835: LD_VAR 0 1
41839: PPUSH
41840: CALL_OW 321
41844: PUSH
41845: LD_INT 2
41847: EQUAL
41848: ST_TO_ADDR
41849: GO 42062
41851: LD_INT 28
41853: DOUBLE
41854: EQUAL
41855: IFTRUE 41865
41857: LD_INT 21
41859: DOUBLE
41860: EQUAL
41861: IFTRUE 41865
41863: GO 41890
41865: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_INT 21
41873: PPUSH
41874: LD_VAR 0 1
41878: PPUSH
41879: CALL_OW 321
41883: PUSH
41884: LD_INT 2
41886: EQUAL
41887: ST_TO_ADDR
41888: GO 42062
41890: LD_INT 16
41892: DOUBLE
41893: EQUAL
41894: IFTRUE 41898
41896: GO 41923
41898: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41899: LD_ADDR_VAR 0 3
41903: PUSH
41904: LD_INT 84
41906: PPUSH
41907: LD_VAR 0 1
41911: PPUSH
41912: CALL_OW 321
41916: PUSH
41917: LD_INT 2
41919: EQUAL
41920: ST_TO_ADDR
41921: GO 42062
41923: LD_INT 19
41925: DOUBLE
41926: EQUAL
41927: IFTRUE 41937
41929: LD_INT 23
41931: DOUBLE
41932: EQUAL
41933: IFTRUE 41937
41935: GO 41962
41937: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41938: LD_ADDR_VAR 0 3
41942: PUSH
41943: LD_INT 83
41945: PPUSH
41946: LD_VAR 0 1
41950: PPUSH
41951: CALL_OW 321
41955: PUSH
41956: LD_INT 2
41958: EQUAL
41959: ST_TO_ADDR
41960: GO 42062
41962: LD_INT 17
41964: DOUBLE
41965: EQUAL
41966: IFTRUE 41970
41968: GO 41995
41970: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41971: LD_ADDR_VAR 0 3
41975: PUSH
41976: LD_INT 39
41978: PPUSH
41979: LD_VAR 0 1
41983: PPUSH
41984: CALL_OW 321
41988: PUSH
41989: LD_INT 2
41991: EQUAL
41992: ST_TO_ADDR
41993: GO 42062
41995: LD_INT 18
41997: DOUBLE
41998: EQUAL
41999: IFTRUE 42003
42001: GO 42028
42003: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42004: LD_ADDR_VAR 0 3
42008: PUSH
42009: LD_INT 40
42011: PPUSH
42012: LD_VAR 0 1
42016: PPUSH
42017: CALL_OW 321
42021: PUSH
42022: LD_INT 2
42024: EQUAL
42025: ST_TO_ADDR
42026: GO 42062
42028: LD_INT 27
42030: DOUBLE
42031: EQUAL
42032: IFTRUE 42036
42034: GO 42061
42036: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42037: LD_ADDR_VAR 0 3
42041: PUSH
42042: LD_INT 35
42044: PPUSH
42045: LD_VAR 0 1
42049: PPUSH
42050: CALL_OW 321
42054: PUSH
42055: LD_INT 2
42057: EQUAL
42058: ST_TO_ADDR
42059: GO 42062
42061: POP
// end ;
42062: LD_VAR 0 3
42066: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42067: LD_INT 0
42069: PPUSH
42070: PPUSH
42071: PPUSH
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
// result := false ;
42080: LD_ADDR_VAR 0 6
42084: PUSH
42085: LD_INT 0
42087: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42088: LD_VAR 0 1
42092: NOT
42093: PUSH
42094: LD_VAR 0 1
42098: PPUSH
42099: CALL_OW 266
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: IN
42114: NOT
42115: OR
42116: PUSH
42117: LD_VAR 0 2
42121: NOT
42122: OR
42123: PUSH
42124: LD_VAR 0 5
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 3
42140: PUSH
42141: LD_INT 4
42143: PUSH
42144: LD_INT 5
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: IN
42155: NOT
42156: OR
42157: PUSH
42158: LD_VAR 0 3
42162: PPUSH
42163: LD_VAR 0 4
42167: PPUSH
42168: CALL_OW 488
42172: NOT
42173: OR
42174: IFFALSE 42178
// exit ;
42176: GO 42914
// side := GetSide ( depot ) ;
42178: LD_ADDR_VAR 0 9
42182: PUSH
42183: LD_VAR 0 1
42187: PPUSH
42188: CALL_OW 255
42192: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42193: LD_VAR 0 9
42197: PPUSH
42198: LD_VAR 0 2
42202: PPUSH
42203: CALL 41691 0 2
42207: NOT
42208: IFFALSE 42212
// exit ;
42210: GO 42914
// pom := GetBase ( depot ) ;
42212: LD_ADDR_VAR 0 10
42216: PUSH
42217: LD_VAR 0 1
42221: PPUSH
42222: CALL_OW 274
42226: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42227: LD_ADDR_VAR 0 11
42231: PUSH
42232: LD_VAR 0 2
42236: PPUSH
42237: LD_VAR 0 1
42241: PPUSH
42242: CALL_OW 248
42246: PPUSH
42247: CALL_OW 450
42251: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42252: LD_VAR 0 10
42256: PPUSH
42257: LD_INT 1
42259: PPUSH
42260: CALL_OW 275
42264: PUSH
42265: LD_VAR 0 11
42269: PUSH
42270: LD_INT 1
42272: ARRAY
42273: GREATEREQUAL
42274: PUSH
42275: LD_VAR 0 10
42279: PPUSH
42280: LD_INT 2
42282: PPUSH
42283: CALL_OW 275
42287: PUSH
42288: LD_VAR 0 11
42292: PUSH
42293: LD_INT 2
42295: ARRAY
42296: GREATEREQUAL
42297: AND
42298: PUSH
42299: LD_VAR 0 10
42303: PPUSH
42304: LD_INT 3
42306: PPUSH
42307: CALL_OW 275
42311: PUSH
42312: LD_VAR 0 11
42316: PUSH
42317: LD_INT 3
42319: ARRAY
42320: GREATEREQUAL
42321: AND
42322: NOT
42323: IFFALSE 42327
// exit ;
42325: GO 42914
// if GetBType ( depot ) = b_depot then
42327: LD_VAR 0 1
42331: PPUSH
42332: CALL_OW 266
42336: PUSH
42337: LD_INT 0
42339: EQUAL
42340: IFFALSE 42352
// dist := 28 else
42342: LD_ADDR_VAR 0 14
42346: PUSH
42347: LD_INT 28
42349: ST_TO_ADDR
42350: GO 42360
// dist := 36 ;
42352: LD_ADDR_VAR 0 14
42356: PUSH
42357: LD_INT 36
42359: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42360: LD_VAR 0 1
42364: PPUSH
42365: LD_VAR 0 3
42369: PPUSH
42370: LD_VAR 0 4
42374: PPUSH
42375: CALL_OW 297
42379: PUSH
42380: LD_VAR 0 14
42384: GREATER
42385: IFFALSE 42389
// exit ;
42387: GO 42914
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42389: LD_ADDR_VAR 0 12
42393: PUSH
42394: LD_VAR 0 2
42398: PPUSH
42399: LD_VAR 0 3
42403: PPUSH
42404: LD_VAR 0 4
42408: PPUSH
42409: LD_VAR 0 5
42413: PPUSH
42414: LD_VAR 0 1
42418: PPUSH
42419: CALL_OW 248
42423: PPUSH
42424: LD_INT 0
42426: PPUSH
42427: CALL 42919 0 6
42431: ST_TO_ADDR
// if not hexes then
42432: LD_VAR 0 12
42436: NOT
42437: IFFALSE 42441
// exit ;
42439: GO 42914
// hex := GetHexInfo ( x , y ) ;
42441: LD_ADDR_VAR 0 15
42445: PUSH
42446: LD_VAR 0 3
42450: PPUSH
42451: LD_VAR 0 4
42455: PPUSH
42456: CALL_OW 546
42460: ST_TO_ADDR
// if hex [ 1 ] then
42461: LD_VAR 0 15
42465: PUSH
42466: LD_INT 1
42468: ARRAY
42469: IFFALSE 42473
// exit ;
42471: GO 42914
// height := hex [ 2 ] ;
42473: LD_ADDR_VAR 0 13
42477: PUSH
42478: LD_VAR 0 15
42482: PUSH
42483: LD_INT 2
42485: ARRAY
42486: ST_TO_ADDR
// for i = 1 to hexes do
42487: LD_ADDR_VAR 0 7
42491: PUSH
42492: DOUBLE
42493: LD_INT 1
42495: DEC
42496: ST_TO_ADDR
42497: LD_VAR 0 12
42501: PUSH
42502: FOR_TO
42503: IFFALSE 42833
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42505: LD_VAR 0 12
42509: PUSH
42510: LD_VAR 0 7
42514: ARRAY
42515: PUSH
42516: LD_INT 1
42518: ARRAY
42519: PPUSH
42520: LD_VAR 0 12
42524: PUSH
42525: LD_VAR 0 7
42529: ARRAY
42530: PUSH
42531: LD_INT 2
42533: ARRAY
42534: PPUSH
42535: CALL_OW 488
42539: NOT
42540: PUSH
42541: LD_VAR 0 12
42545: PUSH
42546: LD_VAR 0 7
42550: ARRAY
42551: PUSH
42552: LD_INT 1
42554: ARRAY
42555: PPUSH
42556: LD_VAR 0 12
42560: PUSH
42561: LD_VAR 0 7
42565: ARRAY
42566: PUSH
42567: LD_INT 2
42569: ARRAY
42570: PPUSH
42571: CALL_OW 428
42575: PUSH
42576: LD_INT 0
42578: GREATER
42579: OR
42580: PUSH
42581: LD_VAR 0 12
42585: PUSH
42586: LD_VAR 0 7
42590: ARRAY
42591: PUSH
42592: LD_INT 1
42594: ARRAY
42595: PPUSH
42596: LD_VAR 0 12
42600: PUSH
42601: LD_VAR 0 7
42605: ARRAY
42606: PUSH
42607: LD_INT 2
42609: ARRAY
42610: PPUSH
42611: CALL_OW 351
42615: OR
42616: IFFALSE 42622
// exit ;
42618: POP
42619: POP
42620: GO 42914
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42622: LD_ADDR_VAR 0 8
42626: PUSH
42627: LD_VAR 0 12
42631: PUSH
42632: LD_VAR 0 7
42636: ARRAY
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: PPUSH
42642: LD_VAR 0 12
42646: PUSH
42647: LD_VAR 0 7
42651: ARRAY
42652: PUSH
42653: LD_INT 2
42655: ARRAY
42656: PPUSH
42657: CALL_OW 546
42661: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42662: LD_VAR 0 8
42666: PUSH
42667: LD_INT 1
42669: ARRAY
42670: PUSH
42671: LD_VAR 0 8
42675: PUSH
42676: LD_INT 2
42678: ARRAY
42679: PUSH
42680: LD_VAR 0 13
42684: PUSH
42685: LD_INT 2
42687: PLUS
42688: GREATER
42689: OR
42690: PUSH
42691: LD_VAR 0 8
42695: PUSH
42696: LD_INT 2
42698: ARRAY
42699: PUSH
42700: LD_VAR 0 13
42704: PUSH
42705: LD_INT 2
42707: MINUS
42708: LESS
42709: OR
42710: PUSH
42711: LD_VAR 0 8
42715: PUSH
42716: LD_INT 3
42718: ARRAY
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 8
42725: PUSH
42726: LD_INT 9
42728: PUSH
42729: LD_INT 10
42731: PUSH
42732: LD_INT 11
42734: PUSH
42735: LD_INT 12
42737: PUSH
42738: LD_INT 13
42740: PUSH
42741: LD_INT 16
42743: PUSH
42744: LD_INT 17
42746: PUSH
42747: LD_INT 18
42749: PUSH
42750: LD_INT 19
42752: PUSH
42753: LD_INT 20
42755: PUSH
42756: LD_INT 21
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: IN
42774: NOT
42775: OR
42776: PUSH
42777: LD_VAR 0 8
42781: PUSH
42782: LD_INT 5
42784: ARRAY
42785: NOT
42786: OR
42787: PUSH
42788: LD_VAR 0 8
42792: PUSH
42793: LD_INT 6
42795: ARRAY
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 7
42805: PUSH
42806: LD_INT 9
42808: PUSH
42809: LD_INT 10
42811: PUSH
42812: LD_INT 11
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: IN
42823: NOT
42824: OR
42825: IFFALSE 42831
// exit ;
42827: POP
42828: POP
42829: GO 42914
// end ;
42831: GO 42502
42833: POP
42834: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42835: LD_VAR 0 9
42839: PPUSH
42840: LD_VAR 0 3
42844: PPUSH
42845: LD_VAR 0 4
42849: PPUSH
42850: LD_INT 20
42852: PPUSH
42853: CALL 34866 0 4
42857: PUSH
42858: LD_INT 4
42860: ARRAY
42861: IFFALSE 42865
// exit ;
42863: GO 42914
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42865: LD_VAR 0 2
42869: PUSH
42870: LD_INT 29
42872: PUSH
42873: LD_INT 30
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: IN
42880: PUSH
42881: LD_VAR 0 3
42885: PPUSH
42886: LD_VAR 0 4
42890: PPUSH
42891: LD_VAR 0 9
42895: PPUSH
42896: CALL_OW 440
42900: NOT
42901: AND
42902: IFFALSE 42906
// exit ;
42904: GO 42914
// result := true ;
42906: LD_ADDR_VAR 0 6
42910: PUSH
42911: LD_INT 1
42913: ST_TO_ADDR
// end ;
42914: LD_VAR 0 6
42918: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42919: LD_INT 0
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
42955: PPUSH
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
42961: PPUSH
42962: PPUSH
42963: PPUSH
42964: PPUSH
42965: PPUSH
42966: PPUSH
42967: PPUSH
42968: PPUSH
42969: PPUSH
42970: PPUSH
42971: PPUSH
42972: PPUSH
42973: PPUSH
42974: PPUSH
42975: PPUSH
42976: PPUSH
42977: PPUSH
42978: PPUSH
// result = [ ] ;
42979: LD_ADDR_VAR 0 7
42983: PUSH
42984: EMPTY
42985: ST_TO_ADDR
// temp_list = [ ] ;
42986: LD_ADDR_VAR 0 9
42990: PUSH
42991: EMPTY
42992: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42993: LD_VAR 0 4
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 3
43009: PUSH
43010: LD_INT 4
43012: PUSH
43013: LD_INT 5
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: IN
43024: NOT
43025: PUSH
43026: LD_VAR 0 1
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: IN
43041: PUSH
43042: LD_VAR 0 5
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 2
43052: PUSH
43053: LD_INT 3
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: IN
43061: NOT
43062: AND
43063: OR
43064: IFFALSE 43068
// exit ;
43066: GO 61459
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43068: LD_VAR 0 1
43072: PUSH
43073: LD_INT 6
43075: PUSH
43076: LD_INT 7
43078: PUSH
43079: LD_INT 8
43081: PUSH
43082: LD_INT 13
43084: PUSH
43085: LD_INT 12
43087: PUSH
43088: LD_INT 15
43090: PUSH
43091: LD_INT 11
43093: PUSH
43094: LD_INT 14
43096: PUSH
43097: LD_INT 10
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: IN
43111: IFFALSE 43121
// btype = b_lab ;
43113: LD_ADDR_VAR 0 1
43117: PUSH
43118: LD_INT 6
43120: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43121: LD_VAR 0 6
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: IN
43140: NOT
43141: PUSH
43142: LD_VAR 0 1
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: LD_INT 6
43161: PUSH
43162: LD_INT 36
43164: PUSH
43165: LD_INT 4
43167: PUSH
43168: LD_INT 5
43170: PUSH
43171: LD_INT 31
43173: PUSH
43174: LD_INT 32
43176: PUSH
43177: LD_INT 33
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: IN
43193: NOT
43194: PUSH
43195: LD_VAR 0 6
43199: PUSH
43200: LD_INT 1
43202: EQUAL
43203: AND
43204: OR
43205: PUSH
43206: LD_VAR 0 1
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: IN
43221: NOT
43222: PUSH
43223: LD_VAR 0 6
43227: PUSH
43228: LD_INT 2
43230: EQUAL
43231: AND
43232: OR
43233: IFFALSE 43243
// mode = 0 ;
43235: LD_ADDR_VAR 0 6
43239: PUSH
43240: LD_INT 0
43242: ST_TO_ADDR
// case mode of 0 :
43243: LD_VAR 0 6
43247: PUSH
43248: LD_INT 0
43250: DOUBLE
43251: EQUAL
43252: IFTRUE 43256
43254: GO 54709
43256: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43257: LD_ADDR_VAR 0 11
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 3
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43450: LD_ADDR_VAR 0 12
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 3
43618: NEG
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43646: LD_ADDR_VAR 0 13
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: NEG
43794: PUSH
43795: LD_INT 3
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 3
43805: NEG
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 3
43817: NEG
43818: PUSH
43819: LD_INT 3
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43845: LD_ADDR_VAR 0 14
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: LD_INT 3
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 3
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44041: LD_ADDR_VAR 0 15
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 3
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44234: LD_ADDR_VAR 0 16
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 3
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: LD_INT 3
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: LD_INT 3
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44427: LD_ADDR_VAR 0 17
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44657: LD_ADDR_VAR 0 18
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44887: LD_ADDR_VAR 0 19
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45117: LD_ADDR_VAR 0 20
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45347: LD_ADDR_VAR 0 21
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45577: LD_ADDR_VAR 0 22
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45807: LD_ADDR_VAR 0 23
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: LD_INT 3
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46087: LD_ADDR_VAR 0 24
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 2
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 3
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46363: LD_ADDR_VAR 0 25
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 3
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: LD_INT 3
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46637: LD_ADDR_VAR 0 26
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 3
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46913: LD_ADDR_VAR 0 27
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 3
47158: NEG
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47193: LD_ADDR_VAR 0 28
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 3
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 3
47428: NEG
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: NEG
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47475: LD_ADDR_VAR 0 29
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 3
47719: NEG
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47754: LD_ADDR_VAR 0 30
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 3
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 3
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48032: LD_ADDR_VAR 0 31
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 3
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48310: LD_ADDR_VAR 0 32
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 3
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 3
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48588: LD_ADDR_VAR 0 33
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 3
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48867: LD_ADDR_VAR 0 34
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 3
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 3
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49147: LD_ADDR_VAR 0 35
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49259: LD_ADDR_VAR 0 36
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49371: LD_ADDR_VAR 0 37
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49483: LD_ADDR_VAR 0 38
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49595: LD_ADDR_VAR 0 39
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49707: LD_ADDR_VAR 0 40
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49819: LD_ADDR_VAR 0 41
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 3
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 3
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: NEG
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50169: LD_ADDR_VAR 0 42
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 3
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: LD_INT 3
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 3
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 3
50466: NEG
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: NEG
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50519: LD_ADDR_VAR 0 43
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 3
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 3
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 3
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 3
50815: NEG
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50867: LD_ADDR_VAR 0 44
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: LD_INT 3
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 3
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 3
51141: NEG
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 3
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51217: LD_ADDR_VAR 0 45
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 3
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: LD_INT 3
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 3
51514: NEG
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: LD_INT 3
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51567: LD_ADDR_VAR 0 46
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 3
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 3
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 3
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 3
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 3
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 3
51863: NEG
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51915: LD_ADDR_VAR 0 47
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: LD_INT 2
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52066: LD_ADDR_VAR 0 48
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52213: LD_ADDR_VAR 0 49
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52357: LD_ADDR_VAR 0 50
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52501: LD_ADDR_VAR 0 51
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: NEG
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52648: LD_ADDR_VAR 0 52
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52799: LD_ADDR_VAR 0 53
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53029: LD_ADDR_VAR 0 54
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53259: LD_ADDR_VAR 0 55
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53489: LD_ADDR_VAR 0 56
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53719: LD_ADDR_VAR 0 57
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 2
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53949: LD_ADDR_VAR 0 58
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54179: LD_ADDR_VAR 0 59
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54267: LD_ADDR_VAR 0 60
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54355: LD_ADDR_VAR 0 61
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54443: LD_ADDR_VAR 0 62
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54531: LD_ADDR_VAR 0 63
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54619: LD_ADDR_VAR 0 64
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// end ; 1 :
54707: GO 60604
54709: LD_INT 1
54711: DOUBLE
54712: EQUAL
54713: IFTRUE 54717
54715: GO 57340
54717: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54718: LD_ADDR_VAR 0 11
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: LIST
54761: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54762: LD_ADDR_VAR 0 12
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 3
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 3
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: LIST
54802: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54803: LD_ADDR_VAR 0 13
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: LIST
54842: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54843: LD_ADDR_VAR 0 14
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54884: LD_ADDR_VAR 0 15
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: NEG
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54928: LD_ADDR_VAR 0 16
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: LD_INT 3
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 3
54947: NEG
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 3
54959: NEG
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54974: LD_ADDR_VAR 0 17
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: LIST
55017: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55018: LD_ADDR_VAR 0 18
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 3
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 3
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55059: LD_ADDR_VAR 0 19
55063: PUSH
55064: LD_INT 3
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55099: LD_ADDR_VAR 0 20
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55140: LD_ADDR_VAR 0 21
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55184: LD_ADDR_VAR 0 22
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55230: LD_ADDR_VAR 0 23
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 3
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 4
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 3
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55274: LD_ADDR_VAR 0 24
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 4
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55315: LD_ADDR_VAR 0 25
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: LD_INT 3
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 4
55332: PUSH
55333: LD_INT 3
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: LD_INT 4
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55355: LD_ADDR_VAR 0 26
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: LD_INT 4
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55396: LD_ADDR_VAR 0 27
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 3
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 4
55425: NEG
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: LIST
55439: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55440: LD_ADDR_VAR 0 28
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: LD_INT 3
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: LD_INT 4
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 4
55471: NEG
55472: PUSH
55473: LD_INT 3
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55486: LD_ADDR_VAR 0 29
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 3
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 4
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 4
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 3
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 5
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 5
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 4
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 6
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 6
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 5
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55641: LD_ADDR_VAR 0 30
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 4
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 4
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 4
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 5
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 5
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 5
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 6
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 6
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55784: LD_ADDR_VAR 0 31
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 4
55831: PUSH
55832: LD_INT 4
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: LD_INT 4
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 5
55851: PUSH
55852: LD_INT 4
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 5
55861: PUSH
55862: LD_INT 5
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 4
55871: PUSH
55872: LD_INT 5
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 6
55881: PUSH
55882: LD_INT 5
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 6
55891: PUSH
55892: LD_INT 6
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 5
55901: PUSH
55902: LD_INT 6
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55923: LD_ADDR_VAR 0 32
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 4
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 4
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 5
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 5
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 4
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: LD_INT 6
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 6
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 5
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56066: LD_ADDR_VAR 0 33
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 4
56118: NEG
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 4
56129: NEG
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 4
56141: NEG
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 5
56152: NEG
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 5
56163: NEG
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 5
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 6
56186: NEG
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 6
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56221: LD_ADDR_VAR 0 34
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: LD_INT 3
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 3
56252: NEG
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: NEG
56265: PUSH
56266: LD_INT 4
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 4
56276: NEG
56277: PUSH
56278: LD_INT 3
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 4
56288: NEG
56289: PUSH
56290: LD_INT 4
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 4
56300: NEG
56301: PUSH
56302: LD_INT 5
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 5
56312: NEG
56313: PUSH
56314: LD_INT 4
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 5
56324: NEG
56325: PUSH
56326: LD_INT 5
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 5
56336: NEG
56337: PUSH
56338: LD_INT 6
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 6
56348: NEG
56349: PUSH
56350: LD_INT 5
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 6
56360: NEG
56361: PUSH
56362: LD_INT 6
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56384: LD_ADDR_VAR 0 41
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: LIST
56427: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56428: LD_ADDR_VAR 0 42
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56469: LD_ADDR_VAR 0 43
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: LIST
56508: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56509: LD_ADDR_VAR 0 44
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56550: LD_ADDR_VAR 0 45
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56594: LD_ADDR_VAR 0 46
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: LIST
56639: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56640: LD_ADDR_VAR 0 47
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 3
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56673: LD_ADDR_VAR 0 48
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56704: LD_ADDR_VAR 0 49
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56733: LD_ADDR_VAR 0 50
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56762: LD_ADDR_VAR 0 51
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56793: LD_ADDR_VAR 0 52
56797: PUSH
56798: LD_INT 3
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56826: LD_ADDR_VAR 0 53
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56870: LD_ADDR_VAR 0 54
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56911: LD_ADDR_VAR 0 55
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56951: LD_ADDR_VAR 0 56
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 3
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56992: LD_ADDR_VAR 0 57
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57036: LD_ADDR_VAR 0 58
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57082: LD_ADDR_VAR 0 59
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57126: LD_ADDR_VAR 0 60
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57167: LD_ADDR_VAR 0 61
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57207: LD_ADDR_VAR 0 62
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: LIST
57247: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57248: LD_ADDR_VAR 0 63
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57292: LD_ADDR_VAR 0 64
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: LIST
57337: ST_TO_ADDR
// end ; 2 :
57338: GO 60604
57340: LD_INT 2
57342: DOUBLE
57343: EQUAL
57344: IFTRUE 57348
57346: GO 60603
57348: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57349: LD_ADDR_VAR 0 29
57353: PUSH
57354: LD_INT 4
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 4
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 5
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 5
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 4
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 5
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 4
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 4
57479: PUSH
57480: LD_INT 4
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: LD_INT 4
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 4
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: LD_INT 4
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 4
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 4
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 5
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 5
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: LD_INT 5
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: NEG
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 3
57677: NEG
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: NEG
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 4
57699: NEG
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 4
57711: NEG
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 4
57734: NEG
57735: PUSH
57736: LD_INT 4
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 4
57746: NEG
57747: PUSH
57748: LD_INT 5
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: LD_INT 4
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 4
57782: NEG
57783: PUSH
57784: LD_INT 3
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 5
57794: NEG
57795: PUSH
57796: LD_INT 4
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 5
57806: NEG
57807: PUSH
57808: LD_INT 5
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: LD_INT 5
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 5
57830: NEG
57831: PUSH
57832: LD_INT 3
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57887: LD_ADDR_VAR 0 30
57891: PUSH
57892: LD_INT 4
57894: PUSH
57895: LD_INT 4
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 4
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 5
57914: PUSH
57915: LD_INT 4
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 5
57924: PUSH
57925: LD_INT 5
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 4
57934: PUSH
57935: LD_INT 5
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: LD_INT 4
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 5
57964: PUSH
57965: LD_INT 3
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: LD_INT 5
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 4
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 3
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 4
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 4
58077: NEG
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 4
58088: NEG
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 4
58122: NEG
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 5
58133: NEG
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 5
58144: NEG
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 5
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: NEG
58192: PUSH
58193: LD_INT 4
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 3
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 4
58239: NEG
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 4
58251: NEG
58252: PUSH
58253: LD_INT 4
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 4
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 4
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 4
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 5
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 4
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: LD_INT 4
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: LD_INT 5
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: LD_INT 5
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58434: LD_ADDR_VAR 0 31
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 4
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 4
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: LD_INT 5
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 5
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 4
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: LD_INT 5
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 4
58601: NEG
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 4
58613: NEG
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: NEG
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 4
58636: NEG
58637: PUSH
58638: LD_INT 4
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 4
58648: NEG
58649: PUSH
58650: LD_INT 5
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: LD_INT 4
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 4
58684: NEG
58685: PUSH
58686: LD_INT 3
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 5
58696: NEG
58697: PUSH
58698: LD_INT 4
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 5
58708: NEG
58709: PUSH
58710: LD_INT 5
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 3
58720: NEG
58721: PUSH
58722: LD_INT 5
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 5
58732: NEG
58733: PUSH
58734: LD_INT 3
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 4
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 3
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 3
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 4
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 4
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 4
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 4
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 5
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 5
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 4
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 3
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 5
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58984: LD_ADDR_VAR 0 32
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 4
59002: NEG
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: NEG
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: NEG
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 4
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 5
59047: NEG
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 5
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 5
59070: NEG
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: NEG
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: LD_INT 4
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: LD_INT 3
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 3
59141: NEG
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 4
59153: NEG
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 4
59165: NEG
59166: PUSH
59167: LD_INT 4
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 4
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 4
59189: NEG
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 4
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 5
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 4
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 3
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 4
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 5
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 3
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: LD_INT 5
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 3
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 4
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 4
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 3
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 4
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 4
59396: PUSH
59397: LD_INT 4
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 4
59406: PUSH
59407: LD_INT 3
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 5
59416: PUSH
59417: LD_INT 4
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 5
59426: PUSH
59427: LD_INT 5
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 4
59436: PUSH
59437: LD_INT 5
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 3
59446: PUSH
59447: LD_INT 4
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 3
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 5
59466: PUSH
59467: LD_INT 3
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 3
59476: PUSH
59477: LD_INT 5
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59531: LD_ADDR_VAR 0 33
59535: PUSH
59536: LD_INT 4
59538: NEG
59539: PUSH
59540: LD_INT 4
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 4
59550: NEG
59551: PUSH
59552: LD_INT 5
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 3
59562: NEG
59563: PUSH
59564: LD_INT 4
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: LD_INT 3
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 4
59586: NEG
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 5
59598: NEG
59599: PUSH
59600: LD_INT 4
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 5
59610: NEG
59611: PUSH
59612: LD_INT 5
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: LD_INT 5
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 5
59634: NEG
59635: PUSH
59636: LD_INT 3
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 3
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 4
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 3
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 3
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 4
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 4
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 4
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 4
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 5
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 5
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 4
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 3
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 3
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 5
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: LD_INT 3
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 4
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 4
59871: PUSH
59872: LD_INT 4
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 3
59881: PUSH
59882: LD_INT 4
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 4
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: LD_INT 4
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 4
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 4
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 5
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 5
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: LD_INT 4
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: LD_INT 5
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60069: LD_ADDR_VAR 0 34
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: LD_INT 4
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 5
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 4
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: LD_INT 4
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 5
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: LD_INT 5
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 4
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 4
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 4
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 4
60271: PUSH
60272: LD_INT 4
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 4
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 5
60291: PUSH
60292: LD_INT 4
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 5
60301: PUSH
60302: LD_INT 5
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 4
60311: PUSH
60312: LD_INT 5
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 3
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 5
60341: PUSH
60342: LD_INT 3
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: LD_INT 5
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 3
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 4
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 4
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: PUSH
60434: LD_INT 4
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 4
60454: NEG
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 4
60465: NEG
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 3
60488: NEG
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 4
60499: NEG
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 5
60510: NEG
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 5
60521: NEG
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 5
60533: NEG
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: ST_TO_ADDR
// end ; end ;
60601: GO 60604
60603: POP
// case btype of b_depot , b_warehouse :
60604: LD_VAR 0 1
60608: PUSH
60609: LD_INT 0
60611: DOUBLE
60612: EQUAL
60613: IFTRUE 60623
60615: LD_INT 1
60617: DOUBLE
60618: EQUAL
60619: IFTRUE 60623
60621: GO 60824
60623: POP
// case nation of nation_american :
60624: LD_VAR 0 5
60628: PUSH
60629: LD_INT 1
60631: DOUBLE
60632: EQUAL
60633: IFTRUE 60637
60635: GO 60693
60637: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60638: LD_ADDR_VAR 0 9
60642: PUSH
60643: LD_VAR 0 11
60647: PUSH
60648: LD_VAR 0 12
60652: PUSH
60653: LD_VAR 0 13
60657: PUSH
60658: LD_VAR 0 14
60662: PUSH
60663: LD_VAR 0 15
60667: PUSH
60668: LD_VAR 0 16
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: PUSH
60681: LD_VAR 0 4
60685: PUSH
60686: LD_INT 1
60688: PLUS
60689: ARRAY
60690: ST_TO_ADDR
60691: GO 60822
60693: LD_INT 2
60695: DOUBLE
60696: EQUAL
60697: IFTRUE 60701
60699: GO 60757
60701: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60702: LD_ADDR_VAR 0 9
60706: PUSH
60707: LD_VAR 0 17
60711: PUSH
60712: LD_VAR 0 18
60716: PUSH
60717: LD_VAR 0 19
60721: PUSH
60722: LD_VAR 0 20
60726: PUSH
60727: LD_VAR 0 21
60731: PUSH
60732: LD_VAR 0 22
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: PUSH
60745: LD_VAR 0 4
60749: PUSH
60750: LD_INT 1
60752: PLUS
60753: ARRAY
60754: ST_TO_ADDR
60755: GO 60822
60757: LD_INT 3
60759: DOUBLE
60760: EQUAL
60761: IFTRUE 60765
60763: GO 60821
60765: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60766: LD_ADDR_VAR 0 9
60770: PUSH
60771: LD_VAR 0 23
60775: PUSH
60776: LD_VAR 0 24
60780: PUSH
60781: LD_VAR 0 25
60785: PUSH
60786: LD_VAR 0 26
60790: PUSH
60791: LD_VAR 0 27
60795: PUSH
60796: LD_VAR 0 28
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: PUSH
60809: LD_VAR 0 4
60813: PUSH
60814: LD_INT 1
60816: PLUS
60817: ARRAY
60818: ST_TO_ADDR
60819: GO 60822
60821: POP
60822: GO 61377
60824: LD_INT 2
60826: DOUBLE
60827: EQUAL
60828: IFTRUE 60838
60830: LD_INT 3
60832: DOUBLE
60833: EQUAL
60834: IFTRUE 60838
60836: GO 60894
60838: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60839: LD_ADDR_VAR 0 9
60843: PUSH
60844: LD_VAR 0 29
60848: PUSH
60849: LD_VAR 0 30
60853: PUSH
60854: LD_VAR 0 31
60858: PUSH
60859: LD_VAR 0 32
60863: PUSH
60864: LD_VAR 0 33
60868: PUSH
60869: LD_VAR 0 34
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: PUSH
60882: LD_VAR 0 4
60886: PUSH
60887: LD_INT 1
60889: PLUS
60890: ARRAY
60891: ST_TO_ADDR
60892: GO 61377
60894: LD_INT 16
60896: DOUBLE
60897: EQUAL
60898: IFTRUE 60956
60900: LD_INT 17
60902: DOUBLE
60903: EQUAL
60904: IFTRUE 60956
60906: LD_INT 18
60908: DOUBLE
60909: EQUAL
60910: IFTRUE 60956
60912: LD_INT 19
60914: DOUBLE
60915: EQUAL
60916: IFTRUE 60956
60918: LD_INT 22
60920: DOUBLE
60921: EQUAL
60922: IFTRUE 60956
60924: LD_INT 20
60926: DOUBLE
60927: EQUAL
60928: IFTRUE 60956
60930: LD_INT 21
60932: DOUBLE
60933: EQUAL
60934: IFTRUE 60956
60936: LD_INT 23
60938: DOUBLE
60939: EQUAL
60940: IFTRUE 60956
60942: LD_INT 24
60944: DOUBLE
60945: EQUAL
60946: IFTRUE 60956
60948: LD_INT 25
60950: DOUBLE
60951: EQUAL
60952: IFTRUE 60956
60954: GO 61012
60956: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60957: LD_ADDR_VAR 0 9
60961: PUSH
60962: LD_VAR 0 35
60966: PUSH
60967: LD_VAR 0 36
60971: PUSH
60972: LD_VAR 0 37
60976: PUSH
60977: LD_VAR 0 38
60981: PUSH
60982: LD_VAR 0 39
60986: PUSH
60987: LD_VAR 0 40
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: PUSH
61000: LD_VAR 0 4
61004: PUSH
61005: LD_INT 1
61007: PLUS
61008: ARRAY
61009: ST_TO_ADDR
61010: GO 61377
61012: LD_INT 6
61014: DOUBLE
61015: EQUAL
61016: IFTRUE 61068
61018: LD_INT 7
61020: DOUBLE
61021: EQUAL
61022: IFTRUE 61068
61024: LD_INT 8
61026: DOUBLE
61027: EQUAL
61028: IFTRUE 61068
61030: LD_INT 13
61032: DOUBLE
61033: EQUAL
61034: IFTRUE 61068
61036: LD_INT 12
61038: DOUBLE
61039: EQUAL
61040: IFTRUE 61068
61042: LD_INT 15
61044: DOUBLE
61045: EQUAL
61046: IFTRUE 61068
61048: LD_INT 11
61050: DOUBLE
61051: EQUAL
61052: IFTRUE 61068
61054: LD_INT 14
61056: DOUBLE
61057: EQUAL
61058: IFTRUE 61068
61060: LD_INT 10
61062: DOUBLE
61063: EQUAL
61064: IFTRUE 61068
61066: GO 61124
61068: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61069: LD_ADDR_VAR 0 9
61073: PUSH
61074: LD_VAR 0 41
61078: PUSH
61079: LD_VAR 0 42
61083: PUSH
61084: LD_VAR 0 43
61088: PUSH
61089: LD_VAR 0 44
61093: PUSH
61094: LD_VAR 0 45
61098: PUSH
61099: LD_VAR 0 46
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: PUSH
61112: LD_VAR 0 4
61116: PUSH
61117: LD_INT 1
61119: PLUS
61120: ARRAY
61121: ST_TO_ADDR
61122: GO 61377
61124: LD_INT 36
61126: DOUBLE
61127: EQUAL
61128: IFTRUE 61132
61130: GO 61188
61132: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61133: LD_ADDR_VAR 0 9
61137: PUSH
61138: LD_VAR 0 47
61142: PUSH
61143: LD_VAR 0 48
61147: PUSH
61148: LD_VAR 0 49
61152: PUSH
61153: LD_VAR 0 50
61157: PUSH
61158: LD_VAR 0 51
61162: PUSH
61163: LD_VAR 0 52
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: PUSH
61176: LD_VAR 0 4
61180: PUSH
61181: LD_INT 1
61183: PLUS
61184: ARRAY
61185: ST_TO_ADDR
61186: GO 61377
61188: LD_INT 4
61190: DOUBLE
61191: EQUAL
61192: IFTRUE 61214
61194: LD_INT 5
61196: DOUBLE
61197: EQUAL
61198: IFTRUE 61214
61200: LD_INT 34
61202: DOUBLE
61203: EQUAL
61204: IFTRUE 61214
61206: LD_INT 37
61208: DOUBLE
61209: EQUAL
61210: IFTRUE 61214
61212: GO 61270
61214: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61215: LD_ADDR_VAR 0 9
61219: PUSH
61220: LD_VAR 0 53
61224: PUSH
61225: LD_VAR 0 54
61229: PUSH
61230: LD_VAR 0 55
61234: PUSH
61235: LD_VAR 0 56
61239: PUSH
61240: LD_VAR 0 57
61244: PUSH
61245: LD_VAR 0 58
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: PUSH
61258: LD_VAR 0 4
61262: PUSH
61263: LD_INT 1
61265: PLUS
61266: ARRAY
61267: ST_TO_ADDR
61268: GO 61377
61270: LD_INT 31
61272: DOUBLE
61273: EQUAL
61274: IFTRUE 61320
61276: LD_INT 32
61278: DOUBLE
61279: EQUAL
61280: IFTRUE 61320
61282: LD_INT 33
61284: DOUBLE
61285: EQUAL
61286: IFTRUE 61320
61288: LD_INT 27
61290: DOUBLE
61291: EQUAL
61292: IFTRUE 61320
61294: LD_INT 26
61296: DOUBLE
61297: EQUAL
61298: IFTRUE 61320
61300: LD_INT 28
61302: DOUBLE
61303: EQUAL
61304: IFTRUE 61320
61306: LD_INT 29
61308: DOUBLE
61309: EQUAL
61310: IFTRUE 61320
61312: LD_INT 30
61314: DOUBLE
61315: EQUAL
61316: IFTRUE 61320
61318: GO 61376
61320: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61321: LD_ADDR_VAR 0 9
61325: PUSH
61326: LD_VAR 0 59
61330: PUSH
61331: LD_VAR 0 60
61335: PUSH
61336: LD_VAR 0 61
61340: PUSH
61341: LD_VAR 0 62
61345: PUSH
61346: LD_VAR 0 63
61350: PUSH
61351: LD_VAR 0 64
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: PUSH
61364: LD_VAR 0 4
61368: PUSH
61369: LD_INT 1
61371: PLUS
61372: ARRAY
61373: ST_TO_ADDR
61374: GO 61377
61376: POP
// temp_list2 = [ ] ;
61377: LD_ADDR_VAR 0 10
61381: PUSH
61382: EMPTY
61383: ST_TO_ADDR
// for i in temp_list do
61384: LD_ADDR_VAR 0 8
61388: PUSH
61389: LD_VAR 0 9
61393: PUSH
61394: FOR_IN
61395: IFFALSE 61447
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61397: LD_ADDR_VAR 0 10
61401: PUSH
61402: LD_VAR 0 10
61406: PUSH
61407: LD_VAR 0 8
61411: PUSH
61412: LD_INT 1
61414: ARRAY
61415: PUSH
61416: LD_VAR 0 2
61420: PLUS
61421: PUSH
61422: LD_VAR 0 8
61426: PUSH
61427: LD_INT 2
61429: ARRAY
61430: PUSH
61431: LD_VAR 0 3
61435: PLUS
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: ADD
61444: ST_TO_ADDR
61445: GO 61394
61447: POP
61448: POP
// result = temp_list2 ;
61449: LD_ADDR_VAR 0 7
61453: PUSH
61454: LD_VAR 0 10
61458: ST_TO_ADDR
// end ;
61459: LD_VAR 0 7
61463: RET
// export function EnemyInRange ( unit , dist ) ; begin
61464: LD_INT 0
61466: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61467: LD_ADDR_VAR 0 3
61471: PUSH
61472: LD_VAR 0 1
61476: PPUSH
61477: CALL_OW 255
61481: PPUSH
61482: LD_VAR 0 1
61486: PPUSH
61487: CALL_OW 250
61491: PPUSH
61492: LD_VAR 0 1
61496: PPUSH
61497: CALL_OW 251
61501: PPUSH
61502: LD_VAR 0 2
61506: PPUSH
61507: CALL 34866 0 4
61511: PUSH
61512: LD_INT 4
61514: ARRAY
61515: ST_TO_ADDR
// end ;
61516: LD_VAR 0 3
61520: RET
// export function PlayerSeeMe ( unit ) ; begin
61521: LD_INT 0
61523: PPUSH
// result := See ( your_side , unit ) ;
61524: LD_ADDR_VAR 0 2
61528: PUSH
61529: LD_OWVAR 2
61533: PPUSH
61534: LD_VAR 0 1
61538: PPUSH
61539: CALL_OW 292
61543: ST_TO_ADDR
// end ;
61544: LD_VAR 0 2
61548: RET
// export function ReverseDir ( unit ) ; begin
61549: LD_INT 0
61551: PPUSH
// if not unit then
61552: LD_VAR 0 1
61556: NOT
61557: IFFALSE 61561
// exit ;
61559: GO 61584
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61561: LD_ADDR_VAR 0 2
61565: PUSH
61566: LD_VAR 0 1
61570: PPUSH
61571: CALL_OW 254
61575: PUSH
61576: LD_INT 3
61578: PLUS
61579: PUSH
61580: LD_INT 6
61582: MOD
61583: ST_TO_ADDR
// end ;
61584: LD_VAR 0 2
61588: RET
// export function ReverseArray ( array ) ; var i ; begin
61589: LD_INT 0
61591: PPUSH
61592: PPUSH
// if not array then
61593: LD_VAR 0 1
61597: NOT
61598: IFFALSE 61602
// exit ;
61600: GO 61657
// result := [ ] ;
61602: LD_ADDR_VAR 0 2
61606: PUSH
61607: EMPTY
61608: ST_TO_ADDR
// for i := array downto 1 do
61609: LD_ADDR_VAR 0 3
61613: PUSH
61614: DOUBLE
61615: LD_VAR 0 1
61619: INC
61620: ST_TO_ADDR
61621: LD_INT 1
61623: PUSH
61624: FOR_DOWNTO
61625: IFFALSE 61655
// result := Join ( result , array [ i ] ) ;
61627: LD_ADDR_VAR 0 2
61631: PUSH
61632: LD_VAR 0 2
61636: PPUSH
61637: LD_VAR 0 1
61641: PUSH
61642: LD_VAR 0 3
61646: ARRAY
61647: PPUSH
61648: CALL 66300 0 2
61652: ST_TO_ADDR
61653: GO 61624
61655: POP
61656: POP
// end ;
61657: LD_VAR 0 2
61661: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61662: LD_INT 0
61664: PPUSH
61665: PPUSH
61666: PPUSH
61667: PPUSH
61668: PPUSH
61669: PPUSH
// if not unit or not hexes then
61670: LD_VAR 0 1
61674: NOT
61675: PUSH
61676: LD_VAR 0 2
61680: NOT
61681: OR
61682: IFFALSE 61686
// exit ;
61684: GO 61809
// dist := 9999 ;
61686: LD_ADDR_VAR 0 5
61690: PUSH
61691: LD_INT 9999
61693: ST_TO_ADDR
// for i = 1 to hexes do
61694: LD_ADDR_VAR 0 4
61698: PUSH
61699: DOUBLE
61700: LD_INT 1
61702: DEC
61703: ST_TO_ADDR
61704: LD_VAR 0 2
61708: PUSH
61709: FOR_TO
61710: IFFALSE 61797
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61712: LD_ADDR_VAR 0 6
61716: PUSH
61717: LD_VAR 0 1
61721: PPUSH
61722: LD_VAR 0 2
61726: PUSH
61727: LD_VAR 0 4
61731: ARRAY
61732: PUSH
61733: LD_INT 1
61735: ARRAY
61736: PPUSH
61737: LD_VAR 0 2
61741: PUSH
61742: LD_VAR 0 4
61746: ARRAY
61747: PUSH
61748: LD_INT 2
61750: ARRAY
61751: PPUSH
61752: CALL_OW 297
61756: ST_TO_ADDR
// if tdist < dist then
61757: LD_VAR 0 6
61761: PUSH
61762: LD_VAR 0 5
61766: LESS
61767: IFFALSE 61795
// begin hex := hexes [ i ] ;
61769: LD_ADDR_VAR 0 8
61773: PUSH
61774: LD_VAR 0 2
61778: PUSH
61779: LD_VAR 0 4
61783: ARRAY
61784: ST_TO_ADDR
// dist := tdist ;
61785: LD_ADDR_VAR 0 5
61789: PUSH
61790: LD_VAR 0 6
61794: ST_TO_ADDR
// end ; end ;
61795: GO 61709
61797: POP
61798: POP
// result := hex ;
61799: LD_ADDR_VAR 0 3
61803: PUSH
61804: LD_VAR 0 8
61808: ST_TO_ADDR
// end ;
61809: LD_VAR 0 3
61813: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61814: LD_INT 0
61816: PPUSH
61817: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61818: LD_VAR 0 1
61822: NOT
61823: PUSH
61824: LD_VAR 0 1
61828: PUSH
61829: LD_INT 21
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 23
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PPUSH
61853: CALL_OW 69
61857: IN
61858: NOT
61859: OR
61860: IFFALSE 61864
// exit ;
61862: GO 61911
// for i = 1 to 3 do
61864: LD_ADDR_VAR 0 3
61868: PUSH
61869: DOUBLE
61870: LD_INT 1
61872: DEC
61873: ST_TO_ADDR
61874: LD_INT 3
61876: PUSH
61877: FOR_TO
61878: IFFALSE 61909
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61880: LD_VAR 0 1
61884: PPUSH
61885: CALL_OW 250
61889: PPUSH
61890: LD_VAR 0 1
61894: PPUSH
61895: CALL_OW 251
61899: PPUSH
61900: LD_INT 1
61902: PPUSH
61903: CALL_OW 453
61907: GO 61877
61909: POP
61910: POP
// end ;
61911: LD_VAR 0 2
61915: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61916: LD_INT 0
61918: PPUSH
61919: PPUSH
61920: PPUSH
61921: PPUSH
61922: PPUSH
61923: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61924: LD_VAR 0 1
61928: NOT
61929: PUSH
61930: LD_VAR 0 2
61934: NOT
61935: OR
61936: PUSH
61937: LD_VAR 0 1
61941: PPUSH
61942: CALL_OW 314
61946: OR
61947: IFFALSE 61951
// exit ;
61949: GO 62418
// if GetLives ( i ) < 250 then
61951: LD_VAR 0 4
61955: PPUSH
61956: CALL_OW 256
61960: PUSH
61961: LD_INT 250
61963: LESS
61964: IFFALSE 61977
// begin ComAutodestruct ( i ) ;
61966: LD_VAR 0 4
61970: PPUSH
61971: CALL 61814 0 1
// exit ;
61975: GO 62418
// end ; x := GetX ( enemy_unit ) ;
61977: LD_ADDR_VAR 0 7
61981: PUSH
61982: LD_VAR 0 2
61986: PPUSH
61987: CALL_OW 250
61991: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61992: LD_ADDR_VAR 0 8
61996: PUSH
61997: LD_VAR 0 2
62001: PPUSH
62002: CALL_OW 251
62006: ST_TO_ADDR
// if not x or not y then
62007: LD_VAR 0 7
62011: NOT
62012: PUSH
62013: LD_VAR 0 8
62017: NOT
62018: OR
62019: IFFALSE 62023
// exit ;
62021: GO 62418
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62023: LD_ADDR_VAR 0 6
62027: PUSH
62028: LD_VAR 0 7
62032: PPUSH
62033: LD_INT 0
62035: PPUSH
62036: LD_INT 4
62038: PPUSH
62039: CALL_OW 272
62043: PUSH
62044: LD_VAR 0 8
62048: PPUSH
62049: LD_INT 0
62051: PPUSH
62052: LD_INT 4
62054: PPUSH
62055: CALL_OW 273
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_VAR 0 7
62068: PPUSH
62069: LD_INT 1
62071: PPUSH
62072: LD_INT 4
62074: PPUSH
62075: CALL_OW 272
62079: PUSH
62080: LD_VAR 0 8
62084: PPUSH
62085: LD_INT 1
62087: PPUSH
62088: LD_INT 4
62090: PPUSH
62091: CALL_OW 273
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_VAR 0 7
62104: PPUSH
62105: LD_INT 2
62107: PPUSH
62108: LD_INT 4
62110: PPUSH
62111: CALL_OW 272
62115: PUSH
62116: LD_VAR 0 8
62120: PPUSH
62121: LD_INT 2
62123: PPUSH
62124: LD_INT 4
62126: PPUSH
62127: CALL_OW 273
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_VAR 0 7
62140: PPUSH
62141: LD_INT 3
62143: PPUSH
62144: LD_INT 4
62146: PPUSH
62147: CALL_OW 272
62151: PUSH
62152: LD_VAR 0 8
62156: PPUSH
62157: LD_INT 3
62159: PPUSH
62160: LD_INT 4
62162: PPUSH
62163: CALL_OW 273
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_VAR 0 7
62176: PPUSH
62177: LD_INT 4
62179: PPUSH
62180: LD_INT 4
62182: PPUSH
62183: CALL_OW 272
62187: PUSH
62188: LD_VAR 0 8
62192: PPUSH
62193: LD_INT 4
62195: PPUSH
62196: LD_INT 4
62198: PPUSH
62199: CALL_OW 273
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_VAR 0 7
62212: PPUSH
62213: LD_INT 5
62215: PPUSH
62216: LD_INT 4
62218: PPUSH
62219: CALL_OW 272
62223: PUSH
62224: LD_VAR 0 8
62228: PPUSH
62229: LD_INT 5
62231: PPUSH
62232: LD_INT 4
62234: PPUSH
62235: CALL_OW 273
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// for i = tmp downto 1 do
62252: LD_ADDR_VAR 0 4
62256: PUSH
62257: DOUBLE
62258: LD_VAR 0 6
62262: INC
62263: ST_TO_ADDR
62264: LD_INT 1
62266: PUSH
62267: FOR_DOWNTO
62268: IFFALSE 62369
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62270: LD_VAR 0 6
62274: PUSH
62275: LD_VAR 0 4
62279: ARRAY
62280: PUSH
62281: LD_INT 1
62283: ARRAY
62284: PPUSH
62285: LD_VAR 0 6
62289: PUSH
62290: LD_VAR 0 4
62294: ARRAY
62295: PUSH
62296: LD_INT 2
62298: ARRAY
62299: PPUSH
62300: CALL_OW 488
62304: NOT
62305: PUSH
62306: LD_VAR 0 6
62310: PUSH
62311: LD_VAR 0 4
62315: ARRAY
62316: PUSH
62317: LD_INT 1
62319: ARRAY
62320: PPUSH
62321: LD_VAR 0 6
62325: PUSH
62326: LD_VAR 0 4
62330: ARRAY
62331: PUSH
62332: LD_INT 2
62334: ARRAY
62335: PPUSH
62336: CALL_OW 428
62340: PUSH
62341: LD_INT 0
62343: NONEQUAL
62344: OR
62345: IFFALSE 62367
// tmp := Delete ( tmp , i ) ;
62347: LD_ADDR_VAR 0 6
62351: PUSH
62352: LD_VAR 0 6
62356: PPUSH
62357: LD_VAR 0 4
62361: PPUSH
62362: CALL_OW 3
62366: ST_TO_ADDR
62367: GO 62267
62369: POP
62370: POP
// j := GetClosestHex ( unit , tmp ) ;
62371: LD_ADDR_VAR 0 5
62375: PUSH
62376: LD_VAR 0 1
62380: PPUSH
62381: LD_VAR 0 6
62385: PPUSH
62386: CALL 61662 0 2
62390: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62391: LD_VAR 0 1
62395: PPUSH
62396: LD_VAR 0 5
62400: PUSH
62401: LD_INT 1
62403: ARRAY
62404: PPUSH
62405: LD_VAR 0 5
62409: PUSH
62410: LD_INT 2
62412: ARRAY
62413: PPUSH
62414: CALL_OW 111
// end ;
62418: LD_VAR 0 3
62422: RET
// export function PrepareApemanSoldier ( ) ; begin
62423: LD_INT 0
62425: PPUSH
// uc_nation := 0 ;
62426: LD_ADDR_OWVAR 21
62430: PUSH
62431: LD_INT 0
62433: ST_TO_ADDR
// hc_sex := sex_male ;
62434: LD_ADDR_OWVAR 27
62438: PUSH
62439: LD_INT 1
62441: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62442: LD_ADDR_OWVAR 28
62446: PUSH
62447: LD_INT 15
62449: ST_TO_ADDR
// hc_gallery :=  ;
62450: LD_ADDR_OWVAR 33
62454: PUSH
62455: LD_STRING 
62457: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62458: LD_ADDR_OWVAR 31
62462: PUSH
62463: LD_INT 0
62465: PPUSH
62466: LD_INT 3
62468: PPUSH
62469: CALL_OW 12
62473: PUSH
62474: LD_INT 0
62476: PPUSH
62477: LD_INT 3
62479: PPUSH
62480: CALL_OW 12
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: ST_TO_ADDR
// end ;
62497: LD_VAR 0 1
62501: RET
// export function PrepareApemanEngineer ( ) ; begin
62502: LD_INT 0
62504: PPUSH
// uc_nation := 0 ;
62505: LD_ADDR_OWVAR 21
62509: PUSH
62510: LD_INT 0
62512: ST_TO_ADDR
// hc_sex := sex_male ;
62513: LD_ADDR_OWVAR 27
62517: PUSH
62518: LD_INT 1
62520: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62521: LD_ADDR_OWVAR 28
62525: PUSH
62526: LD_INT 16
62528: ST_TO_ADDR
// hc_gallery :=  ;
62529: LD_ADDR_OWVAR 33
62533: PUSH
62534: LD_STRING 
62536: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62537: LD_ADDR_OWVAR 31
62541: PUSH
62542: LD_INT 0
62544: PPUSH
62545: LD_INT 3
62547: PPUSH
62548: CALL_OW 12
62552: PUSH
62553: LD_INT 0
62555: PPUSH
62556: LD_INT 3
62558: PPUSH
62559: CALL_OW 12
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: ST_TO_ADDR
// end ;
62576: LD_VAR 0 1
62580: RET
// export function PrepareApeman ( agressivity ) ; begin
62581: LD_INT 0
62583: PPUSH
// uc_side := 0 ;
62584: LD_ADDR_OWVAR 20
62588: PUSH
62589: LD_INT 0
62591: ST_TO_ADDR
// uc_nation := 0 ;
62592: LD_ADDR_OWVAR 21
62596: PUSH
62597: LD_INT 0
62599: ST_TO_ADDR
// hc_sex := sex_male ;
62600: LD_ADDR_OWVAR 27
62604: PUSH
62605: LD_INT 1
62607: ST_TO_ADDR
// hc_class := class_apeman ;
62608: LD_ADDR_OWVAR 28
62612: PUSH
62613: LD_INT 12
62615: ST_TO_ADDR
// hc_gallery :=  ;
62616: LD_ADDR_OWVAR 33
62620: PUSH
62621: LD_STRING 
62623: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62624: LD_ADDR_OWVAR 35
62628: PUSH
62629: LD_VAR 0 1
62633: NEG
62634: PPUSH
62635: LD_VAR 0 1
62639: PPUSH
62640: CALL_OW 12
62644: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62645: LD_ADDR_OWVAR 31
62649: PUSH
62650: LD_INT 0
62652: PPUSH
62653: LD_INT 3
62655: PPUSH
62656: CALL_OW 12
62660: PUSH
62661: LD_INT 0
62663: PPUSH
62664: LD_INT 3
62666: PPUSH
62667: CALL_OW 12
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: ST_TO_ADDR
// end ;
62684: LD_VAR 0 2
62688: RET
// export function PrepareTiger ( agressivity ) ; begin
62689: LD_INT 0
62691: PPUSH
// uc_side := 0 ;
62692: LD_ADDR_OWVAR 20
62696: PUSH
62697: LD_INT 0
62699: ST_TO_ADDR
// uc_nation := 0 ;
62700: LD_ADDR_OWVAR 21
62704: PUSH
62705: LD_INT 0
62707: ST_TO_ADDR
// hc_class := class_tiger ;
62708: LD_ADDR_OWVAR 28
62712: PUSH
62713: LD_INT 14
62715: ST_TO_ADDR
// hc_gallery :=  ;
62716: LD_ADDR_OWVAR 33
62720: PUSH
62721: LD_STRING 
62723: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62724: LD_ADDR_OWVAR 35
62728: PUSH
62729: LD_VAR 0 1
62733: NEG
62734: PPUSH
62735: LD_VAR 0 1
62739: PPUSH
62740: CALL_OW 12
62744: ST_TO_ADDR
// end ;
62745: LD_VAR 0 2
62749: RET
// export function PrepareEnchidna ( ) ; begin
62750: LD_INT 0
62752: PPUSH
// uc_side := 0 ;
62753: LD_ADDR_OWVAR 20
62757: PUSH
62758: LD_INT 0
62760: ST_TO_ADDR
// uc_nation := 0 ;
62761: LD_ADDR_OWVAR 21
62765: PUSH
62766: LD_INT 0
62768: ST_TO_ADDR
// hc_class := class_baggie ;
62769: LD_ADDR_OWVAR 28
62773: PUSH
62774: LD_INT 13
62776: ST_TO_ADDR
// hc_gallery :=  ;
62777: LD_ADDR_OWVAR 33
62781: PUSH
62782: LD_STRING 
62784: ST_TO_ADDR
// end ;
62785: LD_VAR 0 1
62789: RET
// export function PrepareFrog ( ) ; begin
62790: LD_INT 0
62792: PPUSH
// uc_side := 0 ;
62793: LD_ADDR_OWVAR 20
62797: PUSH
62798: LD_INT 0
62800: ST_TO_ADDR
// uc_nation := 0 ;
62801: LD_ADDR_OWVAR 21
62805: PUSH
62806: LD_INT 0
62808: ST_TO_ADDR
// hc_class := class_frog ;
62809: LD_ADDR_OWVAR 28
62813: PUSH
62814: LD_INT 19
62816: ST_TO_ADDR
// hc_gallery :=  ;
62817: LD_ADDR_OWVAR 33
62821: PUSH
62822: LD_STRING 
62824: ST_TO_ADDR
// end ;
62825: LD_VAR 0 1
62829: RET
// export function PrepareFish ( ) ; begin
62830: LD_INT 0
62832: PPUSH
// uc_side := 0 ;
62833: LD_ADDR_OWVAR 20
62837: PUSH
62838: LD_INT 0
62840: ST_TO_ADDR
// uc_nation := 0 ;
62841: LD_ADDR_OWVAR 21
62845: PUSH
62846: LD_INT 0
62848: ST_TO_ADDR
// hc_class := class_fish ;
62849: LD_ADDR_OWVAR 28
62853: PUSH
62854: LD_INT 20
62856: ST_TO_ADDR
// hc_gallery :=  ;
62857: LD_ADDR_OWVAR 33
62861: PUSH
62862: LD_STRING 
62864: ST_TO_ADDR
// end ;
62865: LD_VAR 0 1
62869: RET
// export function PrepareBird ( ) ; begin
62870: LD_INT 0
62872: PPUSH
// uc_side := 0 ;
62873: LD_ADDR_OWVAR 20
62877: PUSH
62878: LD_INT 0
62880: ST_TO_ADDR
// uc_nation := 0 ;
62881: LD_ADDR_OWVAR 21
62885: PUSH
62886: LD_INT 0
62888: ST_TO_ADDR
// hc_class := class_phororhacos ;
62889: LD_ADDR_OWVAR 28
62893: PUSH
62894: LD_INT 18
62896: ST_TO_ADDR
// hc_gallery :=  ;
62897: LD_ADDR_OWVAR 33
62901: PUSH
62902: LD_STRING 
62904: ST_TO_ADDR
// end ;
62905: LD_VAR 0 1
62909: RET
// export function PrepareHorse ( ) ; begin
62910: LD_INT 0
62912: PPUSH
// uc_side := 0 ;
62913: LD_ADDR_OWVAR 20
62917: PUSH
62918: LD_INT 0
62920: ST_TO_ADDR
// uc_nation := 0 ;
62921: LD_ADDR_OWVAR 21
62925: PUSH
62926: LD_INT 0
62928: ST_TO_ADDR
// hc_class := class_horse ;
62929: LD_ADDR_OWVAR 28
62933: PUSH
62934: LD_INT 21
62936: ST_TO_ADDR
// hc_gallery :=  ;
62937: LD_ADDR_OWVAR 33
62941: PUSH
62942: LD_STRING 
62944: ST_TO_ADDR
// end ;
62945: LD_VAR 0 1
62949: RET
// export function PrepareMastodont ( ) ; begin
62950: LD_INT 0
62952: PPUSH
// uc_side := 0 ;
62953: LD_ADDR_OWVAR 20
62957: PUSH
62958: LD_INT 0
62960: ST_TO_ADDR
// uc_nation := 0 ;
62961: LD_ADDR_OWVAR 21
62965: PUSH
62966: LD_INT 0
62968: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62969: LD_ADDR_OWVAR 37
62973: PUSH
62974: LD_INT 31
62976: ST_TO_ADDR
// vc_control := control_rider ;
62977: LD_ADDR_OWVAR 38
62981: PUSH
62982: LD_INT 4
62984: ST_TO_ADDR
// end ;
62985: LD_VAR 0 1
62989: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62990: LD_INT 0
62992: PPUSH
62993: PPUSH
62994: PPUSH
// uc_side = 0 ;
62995: LD_ADDR_OWVAR 20
62999: PUSH
63000: LD_INT 0
63002: ST_TO_ADDR
// uc_nation = 0 ;
63003: LD_ADDR_OWVAR 21
63007: PUSH
63008: LD_INT 0
63010: ST_TO_ADDR
// InitHc_All ( ) ;
63011: CALL_OW 584
// InitVc ;
63015: CALL_OW 20
// if mastodonts then
63019: LD_VAR 0 6
63023: IFFALSE 63090
// for i = 1 to mastodonts do
63025: LD_ADDR_VAR 0 11
63029: PUSH
63030: DOUBLE
63031: LD_INT 1
63033: DEC
63034: ST_TO_ADDR
63035: LD_VAR 0 6
63039: PUSH
63040: FOR_TO
63041: IFFALSE 63088
// begin vc_chassis := 31 ;
63043: LD_ADDR_OWVAR 37
63047: PUSH
63048: LD_INT 31
63050: ST_TO_ADDR
// vc_control := control_rider ;
63051: LD_ADDR_OWVAR 38
63055: PUSH
63056: LD_INT 4
63058: ST_TO_ADDR
// animal := CreateVehicle ;
63059: LD_ADDR_VAR 0 12
63063: PUSH
63064: CALL_OW 45
63068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63069: LD_VAR 0 12
63073: PPUSH
63074: LD_VAR 0 8
63078: PPUSH
63079: LD_INT 0
63081: PPUSH
63082: CALL 65218 0 3
// end ;
63086: GO 63040
63088: POP
63089: POP
// if horses then
63090: LD_VAR 0 5
63094: IFFALSE 63161
// for i = 1 to horses do
63096: LD_ADDR_VAR 0 11
63100: PUSH
63101: DOUBLE
63102: LD_INT 1
63104: DEC
63105: ST_TO_ADDR
63106: LD_VAR 0 5
63110: PUSH
63111: FOR_TO
63112: IFFALSE 63159
// begin hc_class := 21 ;
63114: LD_ADDR_OWVAR 28
63118: PUSH
63119: LD_INT 21
63121: ST_TO_ADDR
// hc_gallery :=  ;
63122: LD_ADDR_OWVAR 33
63126: PUSH
63127: LD_STRING 
63129: ST_TO_ADDR
// animal := CreateHuman ;
63130: LD_ADDR_VAR 0 12
63134: PUSH
63135: CALL_OW 44
63139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63140: LD_VAR 0 12
63144: PPUSH
63145: LD_VAR 0 8
63149: PPUSH
63150: LD_INT 0
63152: PPUSH
63153: CALL 65218 0 3
// end ;
63157: GO 63111
63159: POP
63160: POP
// if birds then
63161: LD_VAR 0 1
63165: IFFALSE 63232
// for i = 1 to birds do
63167: LD_ADDR_VAR 0 11
63171: PUSH
63172: DOUBLE
63173: LD_INT 1
63175: DEC
63176: ST_TO_ADDR
63177: LD_VAR 0 1
63181: PUSH
63182: FOR_TO
63183: IFFALSE 63230
// begin hc_class = 18 ;
63185: LD_ADDR_OWVAR 28
63189: PUSH
63190: LD_INT 18
63192: ST_TO_ADDR
// hc_gallery =  ;
63193: LD_ADDR_OWVAR 33
63197: PUSH
63198: LD_STRING 
63200: ST_TO_ADDR
// animal := CreateHuman ;
63201: LD_ADDR_VAR 0 12
63205: PUSH
63206: CALL_OW 44
63210: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63211: LD_VAR 0 12
63215: PPUSH
63216: LD_VAR 0 8
63220: PPUSH
63221: LD_INT 0
63223: PPUSH
63224: CALL 65218 0 3
// end ;
63228: GO 63182
63230: POP
63231: POP
// if tigers then
63232: LD_VAR 0 2
63236: IFFALSE 63320
// for i = 1 to tigers do
63238: LD_ADDR_VAR 0 11
63242: PUSH
63243: DOUBLE
63244: LD_INT 1
63246: DEC
63247: ST_TO_ADDR
63248: LD_VAR 0 2
63252: PUSH
63253: FOR_TO
63254: IFFALSE 63318
// begin hc_class = class_tiger ;
63256: LD_ADDR_OWVAR 28
63260: PUSH
63261: LD_INT 14
63263: ST_TO_ADDR
// hc_gallery =  ;
63264: LD_ADDR_OWVAR 33
63268: PUSH
63269: LD_STRING 
63271: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63272: LD_ADDR_OWVAR 35
63276: PUSH
63277: LD_INT 7
63279: NEG
63280: PPUSH
63281: LD_INT 7
63283: PPUSH
63284: CALL_OW 12
63288: ST_TO_ADDR
// animal := CreateHuman ;
63289: LD_ADDR_VAR 0 12
63293: PUSH
63294: CALL_OW 44
63298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63299: LD_VAR 0 12
63303: PPUSH
63304: LD_VAR 0 8
63308: PPUSH
63309: LD_INT 0
63311: PPUSH
63312: CALL 65218 0 3
// end ;
63316: GO 63253
63318: POP
63319: POP
// if apemans then
63320: LD_VAR 0 3
63324: IFFALSE 63447
// for i = 1 to apemans do
63326: LD_ADDR_VAR 0 11
63330: PUSH
63331: DOUBLE
63332: LD_INT 1
63334: DEC
63335: ST_TO_ADDR
63336: LD_VAR 0 3
63340: PUSH
63341: FOR_TO
63342: IFFALSE 63445
// begin hc_class = class_apeman ;
63344: LD_ADDR_OWVAR 28
63348: PUSH
63349: LD_INT 12
63351: ST_TO_ADDR
// hc_gallery =  ;
63352: LD_ADDR_OWVAR 33
63356: PUSH
63357: LD_STRING 
63359: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63360: LD_ADDR_OWVAR 35
63364: PUSH
63365: LD_INT 2
63367: NEG
63368: PPUSH
63369: LD_INT 2
63371: PPUSH
63372: CALL_OW 12
63376: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63377: LD_ADDR_OWVAR 31
63381: PUSH
63382: LD_INT 1
63384: PPUSH
63385: LD_INT 3
63387: PPUSH
63388: CALL_OW 12
63392: PUSH
63393: LD_INT 1
63395: PPUSH
63396: LD_INT 3
63398: PPUSH
63399: CALL_OW 12
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: ST_TO_ADDR
// animal := CreateHuman ;
63416: LD_ADDR_VAR 0 12
63420: PUSH
63421: CALL_OW 44
63425: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63426: LD_VAR 0 12
63430: PPUSH
63431: LD_VAR 0 8
63435: PPUSH
63436: LD_INT 0
63438: PPUSH
63439: CALL 65218 0 3
// end ;
63443: GO 63341
63445: POP
63446: POP
// if enchidnas then
63447: LD_VAR 0 4
63451: IFFALSE 63518
// for i = 1 to enchidnas do
63453: LD_ADDR_VAR 0 11
63457: PUSH
63458: DOUBLE
63459: LD_INT 1
63461: DEC
63462: ST_TO_ADDR
63463: LD_VAR 0 4
63467: PUSH
63468: FOR_TO
63469: IFFALSE 63516
// begin hc_class = 13 ;
63471: LD_ADDR_OWVAR 28
63475: PUSH
63476: LD_INT 13
63478: ST_TO_ADDR
// hc_gallery =  ;
63479: LD_ADDR_OWVAR 33
63483: PUSH
63484: LD_STRING 
63486: ST_TO_ADDR
// animal := CreateHuman ;
63487: LD_ADDR_VAR 0 12
63491: PUSH
63492: CALL_OW 44
63496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63497: LD_VAR 0 12
63501: PPUSH
63502: LD_VAR 0 8
63506: PPUSH
63507: LD_INT 0
63509: PPUSH
63510: CALL 65218 0 3
// end ;
63514: GO 63468
63516: POP
63517: POP
// if fishes then
63518: LD_VAR 0 7
63522: IFFALSE 63589
// for i = 1 to fishes do
63524: LD_ADDR_VAR 0 11
63528: PUSH
63529: DOUBLE
63530: LD_INT 1
63532: DEC
63533: ST_TO_ADDR
63534: LD_VAR 0 7
63538: PUSH
63539: FOR_TO
63540: IFFALSE 63587
// begin hc_class = 20 ;
63542: LD_ADDR_OWVAR 28
63546: PUSH
63547: LD_INT 20
63549: ST_TO_ADDR
// hc_gallery =  ;
63550: LD_ADDR_OWVAR 33
63554: PUSH
63555: LD_STRING 
63557: ST_TO_ADDR
// animal := CreateHuman ;
63558: LD_ADDR_VAR 0 12
63562: PUSH
63563: CALL_OW 44
63567: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63568: LD_VAR 0 12
63572: PPUSH
63573: LD_VAR 0 9
63577: PPUSH
63578: LD_INT 0
63580: PPUSH
63581: CALL 65218 0 3
// end ;
63585: GO 63539
63587: POP
63588: POP
// end ;
63589: LD_VAR 0 10
63593: RET
// export function WantHeal ( sci , unit ) ; begin
63594: LD_INT 0
63596: PPUSH
// if GetTaskList ( sci ) > 0 then
63597: LD_VAR 0 1
63601: PPUSH
63602: CALL_OW 437
63606: PUSH
63607: LD_INT 0
63609: GREATER
63610: IFFALSE 63680
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63612: LD_VAR 0 1
63616: PPUSH
63617: CALL_OW 437
63621: PUSH
63622: LD_INT 1
63624: ARRAY
63625: PUSH
63626: LD_INT 1
63628: ARRAY
63629: PUSH
63630: LD_STRING l
63632: EQUAL
63633: PUSH
63634: LD_VAR 0 1
63638: PPUSH
63639: CALL_OW 437
63643: PUSH
63644: LD_INT 1
63646: ARRAY
63647: PUSH
63648: LD_INT 4
63650: ARRAY
63651: PUSH
63652: LD_VAR 0 2
63656: EQUAL
63657: AND
63658: IFFALSE 63670
// result := true else
63660: LD_ADDR_VAR 0 3
63664: PUSH
63665: LD_INT 1
63667: ST_TO_ADDR
63668: GO 63678
// result := false ;
63670: LD_ADDR_VAR 0 3
63674: PUSH
63675: LD_INT 0
63677: ST_TO_ADDR
// end else
63678: GO 63688
// result := false ;
63680: LD_ADDR_VAR 0 3
63684: PUSH
63685: LD_INT 0
63687: ST_TO_ADDR
// end ;
63688: LD_VAR 0 3
63692: RET
// export function HealTarget ( sci ) ; begin
63693: LD_INT 0
63695: PPUSH
// if not sci then
63696: LD_VAR 0 1
63700: NOT
63701: IFFALSE 63705
// exit ;
63703: GO 63770
// result := 0 ;
63705: LD_ADDR_VAR 0 2
63709: PUSH
63710: LD_INT 0
63712: ST_TO_ADDR
// if GetTaskList ( sci ) then
63713: LD_VAR 0 1
63717: PPUSH
63718: CALL_OW 437
63722: IFFALSE 63770
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63724: LD_VAR 0 1
63728: PPUSH
63729: CALL_OW 437
63733: PUSH
63734: LD_INT 1
63736: ARRAY
63737: PUSH
63738: LD_INT 1
63740: ARRAY
63741: PUSH
63742: LD_STRING l
63744: EQUAL
63745: IFFALSE 63770
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63747: LD_ADDR_VAR 0 2
63751: PUSH
63752: LD_VAR 0 1
63756: PPUSH
63757: CALL_OW 437
63761: PUSH
63762: LD_INT 1
63764: ARRAY
63765: PUSH
63766: LD_INT 4
63768: ARRAY
63769: ST_TO_ADDR
// end ;
63770: LD_VAR 0 2
63774: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63775: LD_INT 0
63777: PPUSH
63778: PPUSH
63779: PPUSH
63780: PPUSH
// if not base_units then
63781: LD_VAR 0 1
63785: NOT
63786: IFFALSE 63790
// exit ;
63788: GO 63877
// result := false ;
63790: LD_ADDR_VAR 0 2
63794: PUSH
63795: LD_INT 0
63797: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63798: LD_ADDR_VAR 0 5
63802: PUSH
63803: LD_VAR 0 1
63807: PPUSH
63808: LD_INT 21
63810: PUSH
63811: LD_INT 3
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PPUSH
63818: CALL_OW 72
63822: ST_TO_ADDR
// if not tmp then
63823: LD_VAR 0 5
63827: NOT
63828: IFFALSE 63832
// exit ;
63830: GO 63877
// for i in tmp do
63832: LD_ADDR_VAR 0 3
63836: PUSH
63837: LD_VAR 0 5
63841: PUSH
63842: FOR_IN
63843: IFFALSE 63875
// begin result := EnemyInRange ( i , 22 ) ;
63845: LD_ADDR_VAR 0 2
63849: PUSH
63850: LD_VAR 0 3
63854: PPUSH
63855: LD_INT 22
63857: PPUSH
63858: CALL 61464 0 2
63862: ST_TO_ADDR
// if result then
63863: LD_VAR 0 2
63867: IFFALSE 63873
// exit ;
63869: POP
63870: POP
63871: GO 63877
// end ;
63873: GO 63842
63875: POP
63876: POP
// end ;
63877: LD_VAR 0 2
63881: RET
// export function FilterByTag ( units , tag ) ; begin
63882: LD_INT 0
63884: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63885: LD_ADDR_VAR 0 3
63889: PUSH
63890: LD_VAR 0 1
63894: PPUSH
63895: LD_INT 120
63897: PUSH
63898: LD_VAR 0 2
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PPUSH
63907: CALL_OW 72
63911: ST_TO_ADDR
// end ;
63912: LD_VAR 0 3
63916: RET
// export function IsDriver ( un ) ; begin
63917: LD_INT 0
63919: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63920: LD_ADDR_VAR 0 2
63924: PUSH
63925: LD_VAR 0 1
63929: PUSH
63930: LD_INT 55
63932: PUSH
63933: EMPTY
63934: LIST
63935: PPUSH
63936: CALL_OW 69
63940: IN
63941: ST_TO_ADDR
// end ;
63942: LD_VAR 0 2
63946: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63947: LD_INT 0
63949: PPUSH
63950: PPUSH
// list := [ ] ;
63951: LD_ADDR_VAR 0 5
63955: PUSH
63956: EMPTY
63957: ST_TO_ADDR
// case d of 0 :
63958: LD_VAR 0 3
63962: PUSH
63963: LD_INT 0
63965: DOUBLE
63966: EQUAL
63967: IFTRUE 63971
63969: GO 64104
63971: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63972: LD_ADDR_VAR 0 5
63976: PUSH
63977: LD_VAR 0 1
63981: PUSH
63982: LD_INT 4
63984: MINUS
63985: PUSH
63986: LD_VAR 0 2
63990: PUSH
63991: LD_INT 4
63993: MINUS
63994: PUSH
63995: LD_INT 2
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: PUSH
64003: LD_VAR 0 1
64007: PUSH
64008: LD_INT 3
64010: MINUS
64011: PUSH
64012: LD_VAR 0 2
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: PUSH
64025: LD_VAR 0 1
64029: PUSH
64030: LD_INT 4
64032: PLUS
64033: PUSH
64034: LD_VAR 0 2
64038: PUSH
64039: LD_INT 4
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: PUSH
64047: LD_VAR 0 1
64051: PUSH
64052: LD_INT 3
64054: PLUS
64055: PUSH
64056: LD_VAR 0 2
64060: PUSH
64061: LD_INT 3
64063: PLUS
64064: PUSH
64065: LD_INT 5
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: LIST
64072: PUSH
64073: LD_VAR 0 1
64077: PUSH
64078: LD_VAR 0 2
64082: PUSH
64083: LD_INT 4
64085: PLUS
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: ST_TO_ADDR
// end ; 1 :
64102: GO 64802
64104: LD_INT 1
64106: DOUBLE
64107: EQUAL
64108: IFTRUE 64112
64110: GO 64245
64112: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64113: LD_ADDR_VAR 0 5
64117: PUSH
64118: LD_VAR 0 1
64122: PUSH
64123: LD_VAR 0 2
64127: PUSH
64128: LD_INT 4
64130: MINUS
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: LIST
64139: PUSH
64140: LD_VAR 0 1
64144: PUSH
64145: LD_INT 3
64147: MINUS
64148: PUSH
64149: LD_VAR 0 2
64153: PUSH
64154: LD_INT 3
64156: MINUS
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: LIST
64165: PUSH
64166: LD_VAR 0 1
64170: PUSH
64171: LD_INT 4
64173: MINUS
64174: PUSH
64175: LD_VAR 0 2
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: LIST
64187: PUSH
64188: LD_VAR 0 1
64192: PUSH
64193: LD_VAR 0 2
64197: PUSH
64198: LD_INT 3
64200: PLUS
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: LIST
64209: PUSH
64210: LD_VAR 0 1
64214: PUSH
64215: LD_INT 4
64217: PLUS
64218: PUSH
64219: LD_VAR 0 2
64223: PUSH
64224: LD_INT 4
64226: PLUS
64227: PUSH
64228: LD_INT 5
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: LIST
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: ST_TO_ADDR
// end ; 2 :
64243: GO 64802
64245: LD_INT 2
64247: DOUBLE
64248: EQUAL
64249: IFTRUE 64253
64251: GO 64382
64253: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64254: LD_ADDR_VAR 0 5
64258: PUSH
64259: LD_VAR 0 1
64263: PUSH
64264: LD_VAR 0 2
64268: PUSH
64269: LD_INT 3
64271: MINUS
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: LIST
64280: PUSH
64281: LD_VAR 0 1
64285: PUSH
64286: LD_INT 4
64288: PLUS
64289: PUSH
64290: LD_VAR 0 2
64294: PUSH
64295: LD_INT 4
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: PUSH
64303: LD_VAR 0 1
64307: PUSH
64308: LD_VAR 0 2
64312: PUSH
64313: LD_INT 4
64315: PLUS
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: PUSH
64325: LD_VAR 0 1
64329: PUSH
64330: LD_INT 3
64332: MINUS
64333: PUSH
64334: LD_VAR 0 2
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: PUSH
64347: LD_VAR 0 1
64351: PUSH
64352: LD_INT 4
64354: MINUS
64355: PUSH
64356: LD_VAR 0 2
64360: PUSH
64361: LD_INT 4
64363: MINUS
64364: PUSH
64365: LD_INT 2
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: LIST
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: ST_TO_ADDR
// end ; 3 :
64380: GO 64802
64382: LD_INT 3
64384: DOUBLE
64385: EQUAL
64386: IFTRUE 64390
64388: GO 64523
64390: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64391: LD_ADDR_VAR 0 5
64395: PUSH
64396: LD_VAR 0 1
64400: PUSH
64401: LD_INT 3
64403: PLUS
64404: PUSH
64405: LD_VAR 0 2
64409: PUSH
64410: LD_INT 4
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: LIST
64417: PUSH
64418: LD_VAR 0 1
64422: PUSH
64423: LD_INT 4
64425: PLUS
64426: PUSH
64427: LD_VAR 0 2
64431: PUSH
64432: LD_INT 4
64434: PLUS
64435: PUSH
64436: LD_INT 5
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: PUSH
64444: LD_VAR 0 1
64448: PUSH
64449: LD_INT 4
64451: MINUS
64452: PUSH
64453: LD_VAR 0 2
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: LIST
64465: PUSH
64466: LD_VAR 0 1
64470: PUSH
64471: LD_VAR 0 2
64475: PUSH
64476: LD_INT 4
64478: MINUS
64479: PUSH
64480: LD_INT 3
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: LIST
64487: PUSH
64488: LD_VAR 0 1
64492: PUSH
64493: LD_INT 3
64495: MINUS
64496: PUSH
64497: LD_VAR 0 2
64501: PUSH
64502: LD_INT 3
64504: MINUS
64505: PUSH
64506: LD_INT 2
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: LIST
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// end ; 4 :
64521: GO 64802
64523: LD_INT 4
64525: DOUBLE
64526: EQUAL
64527: IFTRUE 64531
64529: GO 64664
64531: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64532: LD_ADDR_VAR 0 5
64536: PUSH
64537: LD_VAR 0 1
64541: PUSH
64542: LD_VAR 0 2
64546: PUSH
64547: LD_INT 4
64549: PLUS
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: PUSH
64559: LD_VAR 0 1
64563: PUSH
64564: LD_INT 3
64566: PLUS
64567: PUSH
64568: LD_VAR 0 2
64572: PUSH
64573: LD_INT 3
64575: PLUS
64576: PUSH
64577: LD_INT 5
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: LIST
64584: PUSH
64585: LD_VAR 0 1
64589: PUSH
64590: LD_INT 4
64592: PLUS
64593: PUSH
64594: LD_VAR 0 2
64598: PUSH
64599: LD_INT 4
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: PUSH
64607: LD_VAR 0 1
64611: PUSH
64612: LD_VAR 0 2
64616: PUSH
64617: LD_INT 3
64619: MINUS
64620: PUSH
64621: LD_INT 3
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: LIST
64628: PUSH
64629: LD_VAR 0 1
64633: PUSH
64634: LD_INT 4
64636: MINUS
64637: PUSH
64638: LD_VAR 0 2
64642: PUSH
64643: LD_INT 4
64645: MINUS
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: LIST
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: ST_TO_ADDR
// end ; 5 :
64662: GO 64802
64664: LD_INT 5
64666: DOUBLE
64667: EQUAL
64668: IFTRUE 64672
64670: GO 64801
64672: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64673: LD_ADDR_VAR 0 5
64677: PUSH
64678: LD_VAR 0 1
64682: PUSH
64683: LD_INT 4
64685: MINUS
64686: PUSH
64687: LD_VAR 0 2
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: PUSH
64700: LD_VAR 0 1
64704: PUSH
64705: LD_VAR 0 2
64709: PUSH
64710: LD_INT 4
64712: MINUS
64713: PUSH
64714: LD_INT 3
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: PUSH
64722: LD_VAR 0 1
64726: PUSH
64727: LD_INT 4
64729: PLUS
64730: PUSH
64731: LD_VAR 0 2
64735: PUSH
64736: LD_INT 4
64738: PLUS
64739: PUSH
64740: LD_INT 5
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: LIST
64747: PUSH
64748: LD_VAR 0 1
64752: PUSH
64753: LD_INT 3
64755: PLUS
64756: PUSH
64757: LD_VAR 0 2
64761: PUSH
64762: LD_INT 4
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: PUSH
64770: LD_VAR 0 1
64774: PUSH
64775: LD_VAR 0 2
64779: PUSH
64780: LD_INT 3
64782: PLUS
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: LIST
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: ST_TO_ADDR
// end ; end ;
64799: GO 64802
64801: POP
// result := list ;
64802: LD_ADDR_VAR 0 4
64806: PUSH
64807: LD_VAR 0 5
64811: ST_TO_ADDR
// end ;
64812: LD_VAR 0 4
64816: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64817: LD_INT 0
64819: PPUSH
64820: PPUSH
64821: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64822: LD_VAR 0 1
64826: NOT
64827: PUSH
64828: LD_VAR 0 2
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: LD_INT 2
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: LD_INT 4
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: IN
64851: NOT
64852: OR
64853: IFFALSE 64857
// exit ;
64855: GO 64940
// tmp := [ ] ;
64857: LD_ADDR_VAR 0 5
64861: PUSH
64862: EMPTY
64863: ST_TO_ADDR
// for i in units do
64864: LD_ADDR_VAR 0 4
64868: PUSH
64869: LD_VAR 0 1
64873: PUSH
64874: FOR_IN
64875: IFFALSE 64909
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64877: LD_ADDR_VAR 0 5
64881: PUSH
64882: LD_VAR 0 5
64886: PPUSH
64887: LD_VAR 0 4
64891: PPUSH
64892: LD_VAR 0 2
64896: PPUSH
64897: CALL_OW 259
64901: PPUSH
64902: CALL 66300 0 2
64906: ST_TO_ADDR
64907: GO 64874
64909: POP
64910: POP
// if not tmp then
64911: LD_VAR 0 5
64915: NOT
64916: IFFALSE 64920
// exit ;
64918: GO 64940
// result := SortListByListDesc ( units , tmp ) ;
64920: LD_ADDR_VAR 0 3
64924: PUSH
64925: LD_VAR 0 1
64929: PPUSH
64930: LD_VAR 0 5
64934: PPUSH
64935: CALL_OW 77
64939: ST_TO_ADDR
// end ;
64940: LD_VAR 0 3
64944: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64945: LD_INT 0
64947: PPUSH
64948: PPUSH
64949: PPUSH
// result := false ;
64950: LD_ADDR_VAR 0 3
64954: PUSH
64955: LD_INT 0
64957: ST_TO_ADDR
// if not building then
64958: LD_VAR 0 2
64962: NOT
64963: IFFALSE 64967
// exit ;
64965: GO 65105
// x := GetX ( building ) ;
64967: LD_ADDR_VAR 0 4
64971: PUSH
64972: LD_VAR 0 2
64976: PPUSH
64977: CALL_OW 250
64981: ST_TO_ADDR
// y := GetY ( building ) ;
64982: LD_ADDR_VAR 0 5
64986: PUSH
64987: LD_VAR 0 2
64991: PPUSH
64992: CALL_OW 251
64996: ST_TO_ADDR
// if not x or not y then
64997: LD_VAR 0 4
65001: NOT
65002: PUSH
65003: LD_VAR 0 5
65007: NOT
65008: OR
65009: IFFALSE 65013
// exit ;
65011: GO 65105
// if GetTaskList ( unit ) then
65013: LD_VAR 0 1
65017: PPUSH
65018: CALL_OW 437
65022: IFFALSE 65105
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65024: LD_STRING e
65026: PUSH
65027: LD_VAR 0 1
65031: PPUSH
65032: CALL_OW 437
65036: PUSH
65037: LD_INT 1
65039: ARRAY
65040: PUSH
65041: LD_INT 1
65043: ARRAY
65044: EQUAL
65045: PUSH
65046: LD_VAR 0 4
65050: PUSH
65051: LD_VAR 0 1
65055: PPUSH
65056: CALL_OW 437
65060: PUSH
65061: LD_INT 1
65063: ARRAY
65064: PUSH
65065: LD_INT 2
65067: ARRAY
65068: EQUAL
65069: AND
65070: PUSH
65071: LD_VAR 0 5
65075: PUSH
65076: LD_VAR 0 1
65080: PPUSH
65081: CALL_OW 437
65085: PUSH
65086: LD_INT 1
65088: ARRAY
65089: PUSH
65090: LD_INT 3
65092: ARRAY
65093: EQUAL
65094: AND
65095: IFFALSE 65105
// result := true end ;
65097: LD_ADDR_VAR 0 3
65101: PUSH
65102: LD_INT 1
65104: ST_TO_ADDR
// end ;
65105: LD_VAR 0 3
65109: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65110: LD_INT 0
65112: PPUSH
// result := false ;
65113: LD_ADDR_VAR 0 4
65117: PUSH
65118: LD_INT 0
65120: ST_TO_ADDR
// if GetTaskList ( unit ) then
65121: LD_VAR 0 1
65125: PPUSH
65126: CALL_OW 437
65130: IFFALSE 65213
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65132: LD_STRING M
65134: PUSH
65135: LD_VAR 0 1
65139: PPUSH
65140: CALL_OW 437
65144: PUSH
65145: LD_INT 1
65147: ARRAY
65148: PUSH
65149: LD_INT 1
65151: ARRAY
65152: EQUAL
65153: PUSH
65154: LD_VAR 0 2
65158: PUSH
65159: LD_VAR 0 1
65163: PPUSH
65164: CALL_OW 437
65168: PUSH
65169: LD_INT 1
65171: ARRAY
65172: PUSH
65173: LD_INT 2
65175: ARRAY
65176: EQUAL
65177: AND
65178: PUSH
65179: LD_VAR 0 3
65183: PUSH
65184: LD_VAR 0 1
65188: PPUSH
65189: CALL_OW 437
65193: PUSH
65194: LD_INT 1
65196: ARRAY
65197: PUSH
65198: LD_INT 3
65200: ARRAY
65201: EQUAL
65202: AND
65203: IFFALSE 65213
// result := true ;
65205: LD_ADDR_VAR 0 4
65209: PUSH
65210: LD_INT 1
65212: ST_TO_ADDR
// end ; end ;
65213: LD_VAR 0 4
65217: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65218: LD_INT 0
65220: PPUSH
65221: PPUSH
65222: PPUSH
65223: PPUSH
// if not unit or not area then
65224: LD_VAR 0 1
65228: NOT
65229: PUSH
65230: LD_VAR 0 2
65234: NOT
65235: OR
65236: IFFALSE 65240
// exit ;
65238: GO 65403
// tmp := AreaToList ( area , i ) ;
65240: LD_ADDR_VAR 0 6
65244: PUSH
65245: LD_VAR 0 2
65249: PPUSH
65250: LD_VAR 0 5
65254: PPUSH
65255: CALL_OW 517
65259: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65260: LD_ADDR_VAR 0 5
65264: PUSH
65265: DOUBLE
65266: LD_INT 1
65268: DEC
65269: ST_TO_ADDR
65270: LD_VAR 0 6
65274: PUSH
65275: LD_INT 1
65277: ARRAY
65278: PUSH
65279: FOR_TO
65280: IFFALSE 65401
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65282: LD_ADDR_VAR 0 7
65286: PUSH
65287: LD_VAR 0 6
65291: PUSH
65292: LD_INT 1
65294: ARRAY
65295: PUSH
65296: LD_VAR 0 5
65300: ARRAY
65301: PUSH
65302: LD_VAR 0 6
65306: PUSH
65307: LD_INT 2
65309: ARRAY
65310: PUSH
65311: LD_VAR 0 5
65315: ARRAY
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65321: LD_INT 92
65323: PUSH
65324: LD_VAR 0 7
65328: PUSH
65329: LD_INT 1
65331: ARRAY
65332: PUSH
65333: LD_VAR 0 7
65337: PUSH
65338: LD_INT 2
65340: ARRAY
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: PPUSH
65351: CALL_OW 69
65355: PUSH
65356: LD_INT 0
65358: EQUAL
65359: IFFALSE 65399
// begin PlaceUnitArea ( unit , area , mode ) ;
65361: LD_VAR 0 1
65365: PPUSH
65366: LD_VAR 0 2
65370: PPUSH
65371: LD_VAR 0 3
65375: PPUSH
65376: CALL_OW 49
// result := IsPlaced ( unit ) ;
65380: LD_ADDR_VAR 0 4
65384: PUSH
65385: LD_VAR 0 1
65389: PPUSH
65390: CALL_OW 305
65394: ST_TO_ADDR
// exit ;
65395: POP
65396: POP
65397: GO 65403
// end ; end ;
65399: GO 65279
65401: POP
65402: POP
// end ;
65403: LD_VAR 0 4
65407: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65408: LD_INT 0
65410: PPUSH
65411: PPUSH
65412: PPUSH
// if not side or side > 8 then
65413: LD_VAR 0 1
65417: NOT
65418: PUSH
65419: LD_VAR 0 1
65423: PUSH
65424: LD_INT 8
65426: GREATER
65427: OR
65428: IFFALSE 65432
// exit ;
65430: GO 65619
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65432: LD_ADDR_VAR 0 4
65436: PUSH
65437: LD_INT 22
65439: PUSH
65440: LD_VAR 0 1
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 21
65451: PUSH
65452: LD_INT 3
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PPUSH
65463: CALL_OW 69
65467: ST_TO_ADDR
// if not tmp then
65468: LD_VAR 0 4
65472: NOT
65473: IFFALSE 65477
// exit ;
65475: GO 65619
// enable_addtolog := true ;
65477: LD_ADDR_OWVAR 81
65481: PUSH
65482: LD_INT 1
65484: ST_TO_ADDR
// AddToLog ( [ ) ;
65485: LD_STRING [
65487: PPUSH
65488: CALL_OW 561
// for i in tmp do
65492: LD_ADDR_VAR 0 3
65496: PUSH
65497: LD_VAR 0 4
65501: PUSH
65502: FOR_IN
65503: IFFALSE 65610
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65505: LD_STRING [
65507: PUSH
65508: LD_VAR 0 3
65512: PPUSH
65513: CALL_OW 266
65517: STR
65518: PUSH
65519: LD_STRING , 
65521: STR
65522: PUSH
65523: LD_VAR 0 3
65527: PPUSH
65528: CALL_OW 250
65532: STR
65533: PUSH
65534: LD_STRING , 
65536: STR
65537: PUSH
65538: LD_VAR 0 3
65542: PPUSH
65543: CALL_OW 251
65547: STR
65548: PUSH
65549: LD_STRING , 
65551: STR
65552: PUSH
65553: LD_VAR 0 3
65557: PPUSH
65558: CALL_OW 254
65562: STR
65563: PUSH
65564: LD_STRING , 
65566: STR
65567: PUSH
65568: LD_VAR 0 3
65572: PPUSH
65573: LD_INT 1
65575: PPUSH
65576: CALL_OW 268
65580: STR
65581: PUSH
65582: LD_STRING , 
65584: STR
65585: PUSH
65586: LD_VAR 0 3
65590: PPUSH
65591: LD_INT 2
65593: PPUSH
65594: CALL_OW 268
65598: STR
65599: PUSH
65600: LD_STRING ],
65602: STR
65603: PPUSH
65604: CALL_OW 561
// end ;
65608: GO 65502
65610: POP
65611: POP
// AddToLog ( ]; ) ;
65612: LD_STRING ];
65614: PPUSH
65615: CALL_OW 561
// end ;
65619: LD_VAR 0 2
65623: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65624: LD_INT 0
65626: PPUSH
65627: PPUSH
65628: PPUSH
65629: PPUSH
65630: PPUSH
// if not area or not rate or not max then
65631: LD_VAR 0 1
65635: NOT
65636: PUSH
65637: LD_VAR 0 2
65641: NOT
65642: OR
65643: PUSH
65644: LD_VAR 0 4
65648: NOT
65649: OR
65650: IFFALSE 65654
// exit ;
65652: GO 65843
// while 1 do
65654: LD_INT 1
65656: IFFALSE 65843
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65658: LD_ADDR_VAR 0 9
65662: PUSH
65663: LD_VAR 0 1
65667: PPUSH
65668: LD_INT 1
65670: PPUSH
65671: CALL_OW 287
65675: PUSH
65676: LD_INT 10
65678: MUL
65679: ST_TO_ADDR
// r := rate / 10 ;
65680: LD_ADDR_VAR 0 7
65684: PUSH
65685: LD_VAR 0 2
65689: PUSH
65690: LD_INT 10
65692: DIVREAL
65693: ST_TO_ADDR
// time := 1 1$00 ;
65694: LD_ADDR_VAR 0 8
65698: PUSH
65699: LD_INT 2100
65701: ST_TO_ADDR
// if amount < min then
65702: LD_VAR 0 9
65706: PUSH
65707: LD_VAR 0 3
65711: LESS
65712: IFFALSE 65730
// r := r * 2 else
65714: LD_ADDR_VAR 0 7
65718: PUSH
65719: LD_VAR 0 7
65723: PUSH
65724: LD_INT 2
65726: MUL
65727: ST_TO_ADDR
65728: GO 65756
// if amount > max then
65730: LD_VAR 0 9
65734: PUSH
65735: LD_VAR 0 4
65739: GREATER
65740: IFFALSE 65756
// r := r / 2 ;
65742: LD_ADDR_VAR 0 7
65746: PUSH
65747: LD_VAR 0 7
65751: PUSH
65752: LD_INT 2
65754: DIVREAL
65755: ST_TO_ADDR
// time := time / r ;
65756: LD_ADDR_VAR 0 8
65760: PUSH
65761: LD_VAR 0 8
65765: PUSH
65766: LD_VAR 0 7
65770: DIVREAL
65771: ST_TO_ADDR
// if time < 0 then
65772: LD_VAR 0 8
65776: PUSH
65777: LD_INT 0
65779: LESS
65780: IFFALSE 65797
// time := time * - 1 ;
65782: LD_ADDR_VAR 0 8
65786: PUSH
65787: LD_VAR 0 8
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: MUL
65796: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65797: LD_VAR 0 8
65801: PUSH
65802: LD_INT 35
65804: PPUSH
65805: LD_INT 875
65807: PPUSH
65808: CALL_OW 12
65812: PLUS
65813: PPUSH
65814: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65818: LD_INT 1
65820: PPUSH
65821: LD_INT 5
65823: PPUSH
65824: CALL_OW 12
65828: PPUSH
65829: LD_VAR 0 1
65833: PPUSH
65834: LD_INT 1
65836: PPUSH
65837: CALL_OW 55
// end ;
65841: GO 65654
// end ;
65843: LD_VAR 0 5
65847: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65848: LD_INT 0
65850: PPUSH
65851: PPUSH
65852: PPUSH
65853: PPUSH
65854: PPUSH
65855: PPUSH
65856: PPUSH
65857: PPUSH
// if not turrets or not factories then
65858: LD_VAR 0 1
65862: NOT
65863: PUSH
65864: LD_VAR 0 2
65868: NOT
65869: OR
65870: IFFALSE 65874
// exit ;
65872: GO 66181
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65874: LD_ADDR_VAR 0 10
65878: PUSH
65879: LD_INT 5
65881: PUSH
65882: LD_INT 6
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 3
65901: PUSH
65902: LD_INT 5
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 24
65916: PUSH
65917: LD_INT 25
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 23
65926: PUSH
65927: LD_INT 27
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 42
65940: PUSH
65941: LD_INT 43
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 44
65950: PUSH
65951: LD_INT 46
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 45
65960: PUSH
65961: LD_INT 47
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: LIST
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: LIST
65977: ST_TO_ADDR
// result := [ ] ;
65978: LD_ADDR_VAR 0 3
65982: PUSH
65983: EMPTY
65984: ST_TO_ADDR
// for i in turrets do
65985: LD_ADDR_VAR 0 4
65989: PUSH
65990: LD_VAR 0 1
65994: PUSH
65995: FOR_IN
65996: IFFALSE 66179
// begin nat := GetNation ( i ) ;
65998: LD_ADDR_VAR 0 7
66002: PUSH
66003: LD_VAR 0 4
66007: PPUSH
66008: CALL_OW 248
66012: ST_TO_ADDR
// weapon := 0 ;
66013: LD_ADDR_VAR 0 8
66017: PUSH
66018: LD_INT 0
66020: ST_TO_ADDR
// if not nat then
66021: LD_VAR 0 7
66025: NOT
66026: IFFALSE 66030
// continue ;
66028: GO 65995
// for j in list [ nat ] do
66030: LD_ADDR_VAR 0 5
66034: PUSH
66035: LD_VAR 0 10
66039: PUSH
66040: LD_VAR 0 7
66044: ARRAY
66045: PUSH
66046: FOR_IN
66047: IFFALSE 66088
// if GetBWeapon ( i ) = j [ 1 ] then
66049: LD_VAR 0 4
66053: PPUSH
66054: CALL_OW 269
66058: PUSH
66059: LD_VAR 0 5
66063: PUSH
66064: LD_INT 1
66066: ARRAY
66067: EQUAL
66068: IFFALSE 66086
// begin weapon := j [ 2 ] ;
66070: LD_ADDR_VAR 0 8
66074: PUSH
66075: LD_VAR 0 5
66079: PUSH
66080: LD_INT 2
66082: ARRAY
66083: ST_TO_ADDR
// break ;
66084: GO 66088
// end ;
66086: GO 66046
66088: POP
66089: POP
// if not weapon then
66090: LD_VAR 0 8
66094: NOT
66095: IFFALSE 66099
// continue ;
66097: GO 65995
// for k in factories do
66099: LD_ADDR_VAR 0 6
66103: PUSH
66104: LD_VAR 0 2
66108: PUSH
66109: FOR_IN
66110: IFFALSE 66175
// begin weapons := AvailableWeaponList ( k ) ;
66112: LD_ADDR_VAR 0 9
66116: PUSH
66117: LD_VAR 0 6
66121: PPUSH
66122: CALL_OW 478
66126: ST_TO_ADDR
// if not weapons then
66127: LD_VAR 0 9
66131: NOT
66132: IFFALSE 66136
// continue ;
66134: GO 66109
// if weapon in weapons then
66136: LD_VAR 0 8
66140: PUSH
66141: LD_VAR 0 9
66145: IN
66146: IFFALSE 66173
// begin result := [ i , weapon ] ;
66148: LD_ADDR_VAR 0 3
66152: PUSH
66153: LD_VAR 0 4
66157: PUSH
66158: LD_VAR 0 8
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: ST_TO_ADDR
// exit ;
66167: POP
66168: POP
66169: POP
66170: POP
66171: GO 66181
// end ; end ;
66173: GO 66109
66175: POP
66176: POP
// end ;
66177: GO 65995
66179: POP
66180: POP
// end ;
66181: LD_VAR 0 3
66185: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66186: LD_INT 0
66188: PPUSH
// if not side or side > 8 then
66189: LD_VAR 0 3
66193: NOT
66194: PUSH
66195: LD_VAR 0 3
66199: PUSH
66200: LD_INT 8
66202: GREATER
66203: OR
66204: IFFALSE 66208
// exit ;
66206: GO 66267
// if not range then
66208: LD_VAR 0 4
66212: NOT
66213: IFFALSE 66224
// range := - 12 ;
66215: LD_ADDR_VAR 0 4
66219: PUSH
66220: LD_INT 12
66222: NEG
66223: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66224: LD_VAR 0 1
66228: PPUSH
66229: LD_VAR 0 2
66233: PPUSH
66234: LD_VAR 0 3
66238: PPUSH
66239: LD_VAR 0 4
66243: PPUSH
66244: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66248: LD_VAR 0 1
66252: PPUSH
66253: LD_VAR 0 2
66257: PPUSH
66258: LD_VAR 0 3
66262: PPUSH
66263: CALL_OW 331
// end ;
66267: LD_VAR 0 5
66271: RET
// export function Video ( mode ) ; begin
66272: LD_INT 0
66274: PPUSH
// ingame_video = mode ;
66275: LD_ADDR_OWVAR 52
66279: PUSH
66280: LD_VAR 0 1
66284: ST_TO_ADDR
// interface_hidden = mode ;
66285: LD_ADDR_OWVAR 54
66289: PUSH
66290: LD_VAR 0 1
66294: ST_TO_ADDR
// end ;
66295: LD_VAR 0 2
66299: RET
// export function Join ( array , element ) ; begin
66300: LD_INT 0
66302: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66303: LD_ADDR_VAR 0 3
66307: PUSH
66308: LD_VAR 0 1
66312: PPUSH
66313: LD_VAR 0 1
66317: PUSH
66318: LD_INT 1
66320: PLUS
66321: PPUSH
66322: LD_VAR 0 2
66326: PPUSH
66327: CALL_OW 1
66331: ST_TO_ADDR
// end ;
66332: LD_VAR 0 3
66336: RET
// export function JoinUnion ( array , element ) ; begin
66337: LD_INT 0
66339: PPUSH
// result := array union element ;
66340: LD_ADDR_VAR 0 3
66344: PUSH
66345: LD_VAR 0 1
66349: PUSH
66350: LD_VAR 0 2
66354: UNION
66355: ST_TO_ADDR
// end ;
66356: LD_VAR 0 3
66360: RET
// export function GetBehemoths ( side ) ; begin
66361: LD_INT 0
66363: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66364: LD_ADDR_VAR 0 2
66368: PUSH
66369: LD_INT 22
66371: PUSH
66372: LD_VAR 0 1
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 31
66383: PUSH
66384: LD_INT 25
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PPUSH
66395: CALL_OW 69
66399: ST_TO_ADDR
// end ;
66400: LD_VAR 0 2
66404: RET
// export function Shuffle ( array ) ; var i , index ; begin
66405: LD_INT 0
66407: PPUSH
66408: PPUSH
66409: PPUSH
// result := [ ] ;
66410: LD_ADDR_VAR 0 2
66414: PUSH
66415: EMPTY
66416: ST_TO_ADDR
// if not array then
66417: LD_VAR 0 1
66421: NOT
66422: IFFALSE 66426
// exit ;
66424: GO 66525
// Randomize ;
66426: CALL_OW 10
// for i = array downto 1 do
66430: LD_ADDR_VAR 0 3
66434: PUSH
66435: DOUBLE
66436: LD_VAR 0 1
66440: INC
66441: ST_TO_ADDR
66442: LD_INT 1
66444: PUSH
66445: FOR_DOWNTO
66446: IFFALSE 66523
// begin index := rand ( 1 , array ) ;
66448: LD_ADDR_VAR 0 4
66452: PUSH
66453: LD_INT 1
66455: PPUSH
66456: LD_VAR 0 1
66460: PPUSH
66461: CALL_OW 12
66465: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66466: LD_ADDR_VAR 0 2
66470: PUSH
66471: LD_VAR 0 2
66475: PPUSH
66476: LD_VAR 0 2
66480: PUSH
66481: LD_INT 1
66483: PLUS
66484: PPUSH
66485: LD_VAR 0 1
66489: PUSH
66490: LD_VAR 0 4
66494: ARRAY
66495: PPUSH
66496: CALL_OW 2
66500: ST_TO_ADDR
// array := Delete ( array , index ) ;
66501: LD_ADDR_VAR 0 1
66505: PUSH
66506: LD_VAR 0 1
66510: PPUSH
66511: LD_VAR 0 4
66515: PPUSH
66516: CALL_OW 3
66520: ST_TO_ADDR
// end ;
66521: GO 66445
66523: POP
66524: POP
// end ;
66525: LD_VAR 0 2
66529: RET
// export function GetBaseMaterials ( base ) ; begin
66530: LD_INT 0
66532: PPUSH
// result := [ 0 , 0 , 0 ] ;
66533: LD_ADDR_VAR 0 2
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: ST_TO_ADDR
// if not base then
66552: LD_VAR 0 1
66556: NOT
66557: IFFALSE 66561
// exit ;
66559: GO 66610
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66561: LD_ADDR_VAR 0 2
66565: PUSH
66566: LD_VAR 0 1
66570: PPUSH
66571: LD_INT 1
66573: PPUSH
66574: CALL_OW 275
66578: PUSH
66579: LD_VAR 0 1
66583: PPUSH
66584: LD_INT 2
66586: PPUSH
66587: CALL_OW 275
66591: PUSH
66592: LD_VAR 0 1
66596: PPUSH
66597: LD_INT 3
66599: PPUSH
66600: CALL_OW 275
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: LIST
66609: ST_TO_ADDR
// end ;
66610: LD_VAR 0 2
66614: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66615: LD_INT 0
66617: PPUSH
66618: PPUSH
// result := array ;
66619: LD_ADDR_VAR 0 3
66623: PUSH
66624: LD_VAR 0 1
66628: ST_TO_ADDR
// if size >= result then
66629: LD_VAR 0 2
66633: PUSH
66634: LD_VAR 0 3
66638: GREATEREQUAL
66639: IFFALSE 66643
// exit ;
66641: GO 66693
// if size then
66643: LD_VAR 0 2
66647: IFFALSE 66693
// for i := array downto size do
66649: LD_ADDR_VAR 0 4
66653: PUSH
66654: DOUBLE
66655: LD_VAR 0 1
66659: INC
66660: ST_TO_ADDR
66661: LD_VAR 0 2
66665: PUSH
66666: FOR_DOWNTO
66667: IFFALSE 66691
// result := Delete ( result , result ) ;
66669: LD_ADDR_VAR 0 3
66673: PUSH
66674: LD_VAR 0 3
66678: PPUSH
66679: LD_VAR 0 3
66683: PPUSH
66684: CALL_OW 3
66688: ST_TO_ADDR
66689: GO 66666
66691: POP
66692: POP
// end ;
66693: LD_VAR 0 3
66697: RET
// export function ComExit ( unit ) ; var tmp ; begin
66698: LD_INT 0
66700: PPUSH
66701: PPUSH
// if not IsInUnit ( unit ) then
66702: LD_VAR 0 1
66706: PPUSH
66707: CALL_OW 310
66711: NOT
66712: IFFALSE 66716
// exit ;
66714: GO 66776
// tmp := IsInUnit ( unit ) ;
66716: LD_ADDR_VAR 0 3
66720: PUSH
66721: LD_VAR 0 1
66725: PPUSH
66726: CALL_OW 310
66730: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66731: LD_VAR 0 3
66735: PPUSH
66736: CALL_OW 247
66740: PUSH
66741: LD_INT 2
66743: EQUAL
66744: IFFALSE 66757
// ComExitVehicle ( unit ) else
66746: LD_VAR 0 1
66750: PPUSH
66751: CALL_OW 121
66755: GO 66766
// ComExitBuilding ( unit ) ;
66757: LD_VAR 0 1
66761: PPUSH
66762: CALL_OW 122
// result := tmp ;
66766: LD_ADDR_VAR 0 2
66770: PUSH
66771: LD_VAR 0 3
66775: ST_TO_ADDR
// end ;
66776: LD_VAR 0 2
66780: RET
// export function ComExitAll ( units ) ; var i ; begin
66781: LD_INT 0
66783: PPUSH
66784: PPUSH
// if not units then
66785: LD_VAR 0 1
66789: NOT
66790: IFFALSE 66794
// exit ;
66792: GO 66820
// for i in units do
66794: LD_ADDR_VAR 0 3
66798: PUSH
66799: LD_VAR 0 1
66803: PUSH
66804: FOR_IN
66805: IFFALSE 66818
// ComExit ( i ) ;
66807: LD_VAR 0 3
66811: PPUSH
66812: CALL 66698 0 1
66816: GO 66804
66818: POP
66819: POP
// end ;
66820: LD_VAR 0 2
66824: RET
// export function ResetHc ; begin
66825: LD_INT 0
66827: PPUSH
// InitHc ;
66828: CALL_OW 19
// hc_importance := 0 ;
66832: LD_ADDR_OWVAR 32
66836: PUSH
66837: LD_INT 0
66839: ST_TO_ADDR
// end ;
66840: LD_VAR 0 1
66844: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66845: LD_INT 0
66847: PPUSH
66848: PPUSH
66849: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66850: LD_ADDR_VAR 0 6
66854: PUSH
66855: LD_VAR 0 1
66859: PUSH
66860: LD_VAR 0 3
66864: PLUS
66865: PUSH
66866: LD_INT 2
66868: DIV
66869: ST_TO_ADDR
// if _x < 0 then
66870: LD_VAR 0 6
66874: PUSH
66875: LD_INT 0
66877: LESS
66878: IFFALSE 66895
// _x := _x * - 1 ;
66880: LD_ADDR_VAR 0 6
66884: PUSH
66885: LD_VAR 0 6
66889: PUSH
66890: LD_INT 1
66892: NEG
66893: MUL
66894: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66895: LD_ADDR_VAR 0 7
66899: PUSH
66900: LD_VAR 0 2
66904: PUSH
66905: LD_VAR 0 4
66909: PLUS
66910: PUSH
66911: LD_INT 2
66913: DIV
66914: ST_TO_ADDR
// if _y < 0 then
66915: LD_VAR 0 7
66919: PUSH
66920: LD_INT 0
66922: LESS
66923: IFFALSE 66940
// _y := _y * - 1 ;
66925: LD_ADDR_VAR 0 7
66929: PUSH
66930: LD_VAR 0 7
66934: PUSH
66935: LD_INT 1
66937: NEG
66938: MUL
66939: ST_TO_ADDR
// result := [ _x , _y ] ;
66940: LD_ADDR_VAR 0 5
66944: PUSH
66945: LD_VAR 0 6
66949: PUSH
66950: LD_VAR 0 7
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: ST_TO_ADDR
// end ;
66959: LD_VAR 0 5
66963: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66964: LD_INT 0
66966: PPUSH
66967: PPUSH
66968: PPUSH
66969: PPUSH
// task := GetTaskList ( unit ) ;
66970: LD_ADDR_VAR 0 7
66974: PUSH
66975: LD_VAR 0 1
66979: PPUSH
66980: CALL_OW 437
66984: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66985: LD_VAR 0 7
66989: NOT
66990: PUSH
66991: LD_VAR 0 1
66995: PPUSH
66996: LD_VAR 0 2
67000: PPUSH
67001: CALL_OW 308
67005: NOT
67006: AND
67007: IFFALSE 67011
// exit ;
67009: GO 67129
// if IsInArea ( unit , area ) then
67011: LD_VAR 0 1
67015: PPUSH
67016: LD_VAR 0 2
67020: PPUSH
67021: CALL_OW 308
67025: IFFALSE 67043
// begin ComMoveToArea ( unit , goAway ) ;
67027: LD_VAR 0 1
67031: PPUSH
67032: LD_VAR 0 3
67036: PPUSH
67037: CALL_OW 113
// exit ;
67041: GO 67129
// end ; if task [ 1 ] [ 1 ] <> M then
67043: LD_VAR 0 7
67047: PUSH
67048: LD_INT 1
67050: ARRAY
67051: PUSH
67052: LD_INT 1
67054: ARRAY
67055: PUSH
67056: LD_STRING M
67058: NONEQUAL
67059: IFFALSE 67063
// exit ;
67061: GO 67129
// x := task [ 1 ] [ 2 ] ;
67063: LD_ADDR_VAR 0 5
67067: PUSH
67068: LD_VAR 0 7
67072: PUSH
67073: LD_INT 1
67075: ARRAY
67076: PUSH
67077: LD_INT 2
67079: ARRAY
67080: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67081: LD_ADDR_VAR 0 6
67085: PUSH
67086: LD_VAR 0 7
67090: PUSH
67091: LD_INT 1
67093: ARRAY
67094: PUSH
67095: LD_INT 3
67097: ARRAY
67098: ST_TO_ADDR
// if InArea ( x , y , area ) then
67099: LD_VAR 0 5
67103: PPUSH
67104: LD_VAR 0 6
67108: PPUSH
67109: LD_VAR 0 2
67113: PPUSH
67114: CALL_OW 309
67118: IFFALSE 67129
// ComStop ( unit ) ;
67120: LD_VAR 0 1
67124: PPUSH
67125: CALL_OW 141
// end ;
67129: LD_VAR 0 4
67133: RET
// export function Abs ( value ) ; begin
67134: LD_INT 0
67136: PPUSH
// result := value ;
67137: LD_ADDR_VAR 0 2
67141: PUSH
67142: LD_VAR 0 1
67146: ST_TO_ADDR
// if value < 0 then
67147: LD_VAR 0 1
67151: PUSH
67152: LD_INT 0
67154: LESS
67155: IFFALSE 67172
// result := value * - 1 ;
67157: LD_ADDR_VAR 0 2
67161: PUSH
67162: LD_VAR 0 1
67166: PUSH
67167: LD_INT 1
67169: NEG
67170: MUL
67171: ST_TO_ADDR
// end ;
67172: LD_VAR 0 2
67176: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67177: LD_INT 0
67179: PPUSH
67180: PPUSH
67181: PPUSH
67182: PPUSH
67183: PPUSH
67184: PPUSH
67185: PPUSH
67186: PPUSH
// if not unit or not building then
67187: LD_VAR 0 1
67191: NOT
67192: PUSH
67193: LD_VAR 0 2
67197: NOT
67198: OR
67199: IFFALSE 67203
// exit ;
67201: GO 67429
// x := GetX ( building ) ;
67203: LD_ADDR_VAR 0 4
67207: PUSH
67208: LD_VAR 0 2
67212: PPUSH
67213: CALL_OW 250
67217: ST_TO_ADDR
// y := GetY ( building ) ;
67218: LD_ADDR_VAR 0 6
67222: PUSH
67223: LD_VAR 0 2
67227: PPUSH
67228: CALL_OW 251
67232: ST_TO_ADDR
// d := GetDir ( building ) ;
67233: LD_ADDR_VAR 0 8
67237: PUSH
67238: LD_VAR 0 2
67242: PPUSH
67243: CALL_OW 254
67247: ST_TO_ADDR
// r := 4 ;
67248: LD_ADDR_VAR 0 9
67252: PUSH
67253: LD_INT 4
67255: ST_TO_ADDR
// for i := 1 to 5 do
67256: LD_ADDR_VAR 0 10
67260: PUSH
67261: DOUBLE
67262: LD_INT 1
67264: DEC
67265: ST_TO_ADDR
67266: LD_INT 5
67268: PUSH
67269: FOR_TO
67270: IFFALSE 67427
// begin _x := ShiftX ( x , d , r + i ) ;
67272: LD_ADDR_VAR 0 5
67276: PUSH
67277: LD_VAR 0 4
67281: PPUSH
67282: LD_VAR 0 8
67286: PPUSH
67287: LD_VAR 0 9
67291: PUSH
67292: LD_VAR 0 10
67296: PLUS
67297: PPUSH
67298: CALL_OW 272
67302: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67303: LD_ADDR_VAR 0 7
67307: PUSH
67308: LD_VAR 0 6
67312: PPUSH
67313: LD_VAR 0 8
67317: PPUSH
67318: LD_VAR 0 9
67322: PUSH
67323: LD_VAR 0 10
67327: PLUS
67328: PPUSH
67329: CALL_OW 273
67333: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67334: LD_VAR 0 5
67338: PPUSH
67339: LD_VAR 0 7
67343: PPUSH
67344: CALL_OW 488
67348: PUSH
67349: LD_VAR 0 5
67353: PPUSH
67354: LD_VAR 0 7
67358: PPUSH
67359: CALL_OW 428
67363: PPUSH
67364: CALL_OW 247
67368: PUSH
67369: LD_INT 3
67371: PUSH
67372: LD_INT 2
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: IN
67379: NOT
67380: AND
67381: IFFALSE 67425
// begin ComMoveXY ( unit , _x , _y ) ;
67383: LD_VAR 0 1
67387: PPUSH
67388: LD_VAR 0 5
67392: PPUSH
67393: LD_VAR 0 7
67397: PPUSH
67398: CALL_OW 111
// result := [ _x , _y ] ;
67402: LD_ADDR_VAR 0 3
67406: PUSH
67407: LD_VAR 0 5
67411: PUSH
67412: LD_VAR 0 7
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: ST_TO_ADDR
// exit ;
67421: POP
67422: POP
67423: GO 67429
// end ; end ;
67425: GO 67269
67427: POP
67428: POP
// end ;
67429: LD_VAR 0 3
67433: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67434: LD_INT 0
67436: PPUSH
67437: PPUSH
67438: PPUSH
// result := 0 ;
67439: LD_ADDR_VAR 0 3
67443: PUSH
67444: LD_INT 0
67446: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67447: LD_VAR 0 1
67451: PUSH
67452: LD_INT 0
67454: LESS
67455: PUSH
67456: LD_VAR 0 1
67460: PUSH
67461: LD_INT 8
67463: GREATER
67464: OR
67465: PUSH
67466: LD_VAR 0 2
67470: PUSH
67471: LD_INT 0
67473: LESS
67474: OR
67475: PUSH
67476: LD_VAR 0 2
67480: PUSH
67481: LD_INT 8
67483: GREATER
67484: OR
67485: IFFALSE 67489
// exit ;
67487: GO 67564
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67489: LD_ADDR_VAR 0 4
67493: PUSH
67494: LD_INT 22
67496: PUSH
67497: LD_VAR 0 2
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PPUSH
67506: CALL_OW 69
67510: PUSH
67511: FOR_IN
67512: IFFALSE 67562
// begin un := UnitShoot ( i ) ;
67514: LD_ADDR_VAR 0 5
67518: PUSH
67519: LD_VAR 0 4
67523: PPUSH
67524: CALL_OW 504
67528: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67529: LD_VAR 0 5
67533: PPUSH
67534: CALL_OW 255
67538: PUSH
67539: LD_VAR 0 1
67543: EQUAL
67544: IFFALSE 67560
// begin result := un ;
67546: LD_ADDR_VAR 0 3
67550: PUSH
67551: LD_VAR 0 5
67555: ST_TO_ADDR
// exit ;
67556: POP
67557: POP
67558: GO 67564
// end ; end ;
67560: GO 67511
67562: POP
67563: POP
// end ;
67564: LD_VAR 0 3
67568: RET
// export function GetCargoBay ( units ) ; begin
67569: LD_INT 0
67571: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67572: LD_ADDR_VAR 0 2
67576: PUSH
67577: LD_VAR 0 1
67581: PPUSH
67582: LD_INT 2
67584: PUSH
67585: LD_INT 34
67587: PUSH
67588: LD_INT 12
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 34
67597: PUSH
67598: LD_INT 51
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 34
67607: PUSH
67608: LD_INT 32
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 34
67617: PUSH
67618: LD_INT 89
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: PPUSH
67632: CALL_OW 72
67636: ST_TO_ADDR
// end ;
67637: LD_VAR 0 2
67641: RET
// export function Negate ( value ) ; begin
67642: LD_INT 0
67644: PPUSH
// result := not value ;
67645: LD_ADDR_VAR 0 2
67649: PUSH
67650: LD_VAR 0 1
67654: NOT
67655: ST_TO_ADDR
// end ;
67656: LD_VAR 0 2
67660: RET
// export function Inc ( value ) ; begin
67661: LD_INT 0
67663: PPUSH
// result := value + 1 ;
67664: LD_ADDR_VAR 0 2
67668: PUSH
67669: LD_VAR 0 1
67673: PUSH
67674: LD_INT 1
67676: PLUS
67677: ST_TO_ADDR
// end ;
67678: LD_VAR 0 2
67682: RET
// export function Dec ( value ) ; begin
67683: LD_INT 0
67685: PPUSH
// result := value - 1 ;
67686: LD_ADDR_VAR 0 2
67690: PUSH
67691: LD_VAR 0 1
67695: PUSH
67696: LD_INT 1
67698: MINUS
67699: ST_TO_ADDR
// end ;
67700: LD_VAR 0 2
67704: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67705: LD_INT 0
67707: PPUSH
67708: PPUSH
67709: PPUSH
67710: PPUSH
67711: PPUSH
67712: PPUSH
67713: PPUSH
67714: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67715: LD_VAR 0 1
67719: PPUSH
67720: LD_VAR 0 2
67724: PPUSH
67725: CALL_OW 488
67729: NOT
67730: PUSH
67731: LD_VAR 0 3
67735: PPUSH
67736: LD_VAR 0 4
67740: PPUSH
67741: CALL_OW 488
67745: NOT
67746: OR
67747: IFFALSE 67760
// begin result := - 1 ;
67749: LD_ADDR_VAR 0 5
67753: PUSH
67754: LD_INT 1
67756: NEG
67757: ST_TO_ADDR
// exit ;
67758: GO 67995
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67760: LD_ADDR_VAR 0 12
67764: PUSH
67765: LD_VAR 0 1
67769: PPUSH
67770: LD_VAR 0 2
67774: PPUSH
67775: LD_VAR 0 3
67779: PPUSH
67780: LD_VAR 0 4
67784: PPUSH
67785: CALL 66845 0 4
67789: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67790: LD_ADDR_VAR 0 11
67794: PUSH
67795: LD_VAR 0 1
67799: PPUSH
67800: LD_VAR 0 2
67804: PPUSH
67805: LD_VAR 0 12
67809: PUSH
67810: LD_INT 1
67812: ARRAY
67813: PPUSH
67814: LD_VAR 0 12
67818: PUSH
67819: LD_INT 2
67821: ARRAY
67822: PPUSH
67823: CALL_OW 298
67827: ST_TO_ADDR
// distance := 9999 ;
67828: LD_ADDR_VAR 0 10
67832: PUSH
67833: LD_INT 9999
67835: ST_TO_ADDR
// for i := 0 to 5 do
67836: LD_ADDR_VAR 0 6
67840: PUSH
67841: DOUBLE
67842: LD_INT 0
67844: DEC
67845: ST_TO_ADDR
67846: LD_INT 5
67848: PUSH
67849: FOR_TO
67850: IFFALSE 67993
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67852: LD_ADDR_VAR 0 7
67856: PUSH
67857: LD_VAR 0 1
67861: PPUSH
67862: LD_VAR 0 6
67866: PPUSH
67867: LD_VAR 0 11
67871: PPUSH
67872: CALL_OW 272
67876: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67877: LD_ADDR_VAR 0 8
67881: PUSH
67882: LD_VAR 0 2
67886: PPUSH
67887: LD_VAR 0 6
67891: PPUSH
67892: LD_VAR 0 11
67896: PPUSH
67897: CALL_OW 273
67901: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67902: LD_VAR 0 7
67906: PPUSH
67907: LD_VAR 0 8
67911: PPUSH
67912: CALL_OW 488
67916: NOT
67917: IFFALSE 67921
// continue ;
67919: GO 67849
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67921: LD_ADDR_VAR 0 9
67925: PUSH
67926: LD_VAR 0 12
67930: PUSH
67931: LD_INT 1
67933: ARRAY
67934: PPUSH
67935: LD_VAR 0 12
67939: PUSH
67940: LD_INT 2
67942: ARRAY
67943: PPUSH
67944: LD_VAR 0 7
67948: PPUSH
67949: LD_VAR 0 8
67953: PPUSH
67954: CALL_OW 298
67958: ST_TO_ADDR
// if tmp < distance then
67959: LD_VAR 0 9
67963: PUSH
67964: LD_VAR 0 10
67968: LESS
67969: IFFALSE 67991
// begin result := i ;
67971: LD_ADDR_VAR 0 5
67975: PUSH
67976: LD_VAR 0 6
67980: ST_TO_ADDR
// distance := tmp ;
67981: LD_ADDR_VAR 0 10
67985: PUSH
67986: LD_VAR 0 9
67990: ST_TO_ADDR
// end ; end ;
67991: GO 67849
67993: POP
67994: POP
// end ;
67995: LD_VAR 0 5
67999: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68000: LD_INT 0
68002: PPUSH
68003: PPUSH
// if not driver or not IsInUnit ( driver ) then
68004: LD_VAR 0 1
68008: NOT
68009: PUSH
68010: LD_VAR 0 1
68014: PPUSH
68015: CALL_OW 310
68019: NOT
68020: OR
68021: IFFALSE 68025
// exit ;
68023: GO 68115
// vehicle := IsInUnit ( driver ) ;
68025: LD_ADDR_VAR 0 3
68029: PUSH
68030: LD_VAR 0 1
68034: PPUSH
68035: CALL_OW 310
68039: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68040: LD_VAR 0 1
68044: PPUSH
68045: LD_STRING \
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: LD_INT 0
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: PUSH
68075: LD_STRING E
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: LD_VAR 0 3
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PPUSH
68111: CALL_OW 446
// end ;
68115: LD_VAR 0 2
68119: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68120: LD_INT 0
68122: PPUSH
68123: PPUSH
// if not driver or not IsInUnit ( driver ) then
68124: LD_VAR 0 1
68128: NOT
68129: PUSH
68130: LD_VAR 0 1
68134: PPUSH
68135: CALL_OW 310
68139: NOT
68140: OR
68141: IFFALSE 68145
// exit ;
68143: GO 68235
// vehicle := IsInUnit ( driver ) ;
68145: LD_ADDR_VAR 0 3
68149: PUSH
68150: LD_VAR 0 1
68154: PPUSH
68155: CALL_OW 310
68159: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68160: LD_VAR 0 1
68164: PPUSH
68165: LD_STRING \
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: LD_INT 0
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: LD_INT 0
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: PUSH
68195: LD_STRING E
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_VAR 0 3
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: LD_INT 0
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PPUSH
68231: CALL_OW 447
// end ;
68235: LD_VAR 0 2
68239: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68240: LD_INT 0
68242: PPUSH
68243: PPUSH
68244: PPUSH
// tmp := [ ] ;
68245: LD_ADDR_VAR 0 5
68249: PUSH
68250: EMPTY
68251: ST_TO_ADDR
// for i in units do
68252: LD_ADDR_VAR 0 4
68256: PUSH
68257: LD_VAR 0 1
68261: PUSH
68262: FOR_IN
68263: IFFALSE 68301
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68265: LD_ADDR_VAR 0 5
68269: PUSH
68270: LD_VAR 0 5
68274: PPUSH
68275: LD_VAR 0 5
68279: PUSH
68280: LD_INT 1
68282: PLUS
68283: PPUSH
68284: LD_VAR 0 4
68288: PPUSH
68289: CALL_OW 256
68293: PPUSH
68294: CALL_OW 2
68298: ST_TO_ADDR
68299: GO 68262
68301: POP
68302: POP
// if not tmp then
68303: LD_VAR 0 5
68307: NOT
68308: IFFALSE 68312
// exit ;
68310: GO 68360
// if asc then
68312: LD_VAR 0 2
68316: IFFALSE 68340
// result := SortListByListAsc ( units , tmp ) else
68318: LD_ADDR_VAR 0 3
68322: PUSH
68323: LD_VAR 0 1
68327: PPUSH
68328: LD_VAR 0 5
68332: PPUSH
68333: CALL_OW 76
68337: ST_TO_ADDR
68338: GO 68360
// result := SortListByListDesc ( units , tmp ) ;
68340: LD_ADDR_VAR 0 3
68344: PUSH
68345: LD_VAR 0 1
68349: PPUSH
68350: LD_VAR 0 5
68354: PPUSH
68355: CALL_OW 77
68359: ST_TO_ADDR
// end ;
68360: LD_VAR 0 3
68364: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68365: LD_INT 0
68367: PPUSH
68368: PPUSH
// task := GetTaskList ( mech ) ;
68369: LD_ADDR_VAR 0 4
68373: PUSH
68374: LD_VAR 0 1
68378: PPUSH
68379: CALL_OW 437
68383: ST_TO_ADDR
// if not task then
68384: LD_VAR 0 4
68388: NOT
68389: IFFALSE 68393
// exit ;
68391: GO 68435
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68393: LD_ADDR_VAR 0 3
68397: PUSH
68398: LD_VAR 0 4
68402: PUSH
68403: LD_INT 1
68405: ARRAY
68406: PUSH
68407: LD_INT 1
68409: ARRAY
68410: PUSH
68411: LD_STRING r
68413: EQUAL
68414: PUSH
68415: LD_VAR 0 4
68419: PUSH
68420: LD_INT 1
68422: ARRAY
68423: PUSH
68424: LD_INT 4
68426: ARRAY
68427: PUSH
68428: LD_VAR 0 2
68432: EQUAL
68433: AND
68434: ST_TO_ADDR
// end ;
68435: LD_VAR 0 3
68439: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68440: LD_INT 0
68442: PPUSH
// SetDir ( unit , d ) ;
68443: LD_VAR 0 1
68447: PPUSH
68448: LD_VAR 0 4
68452: PPUSH
68453: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_VAR 0 2
68466: PPUSH
68467: LD_VAR 0 3
68471: PPUSH
68472: LD_VAR 0 5
68476: PPUSH
68477: CALL_OW 48
// end ;
68481: LD_VAR 0 6
68485: RET
// export function ToNaturalNumber ( number ) ; begin
68486: LD_INT 0
68488: PPUSH
// result := number div 1 ;
68489: LD_ADDR_VAR 0 2
68493: PUSH
68494: LD_VAR 0 1
68498: PUSH
68499: LD_INT 1
68501: DIV
68502: ST_TO_ADDR
// if number < 0 then
68503: LD_VAR 0 1
68507: PUSH
68508: LD_INT 0
68510: LESS
68511: IFFALSE 68521
// result := 0 ;
68513: LD_ADDR_VAR 0 2
68517: PUSH
68518: LD_INT 0
68520: ST_TO_ADDR
// end ;
68521: LD_VAR 0 2
68525: RET
// export function SortByClass ( units , class ) ; var un ; begin
68526: LD_INT 0
68528: PPUSH
68529: PPUSH
// if not units or not class then
68530: LD_VAR 0 1
68534: NOT
68535: PUSH
68536: LD_VAR 0 2
68540: NOT
68541: OR
68542: IFFALSE 68546
// exit ;
68544: GO 68641
// result := [ ] ;
68546: LD_ADDR_VAR 0 3
68550: PUSH
68551: EMPTY
68552: ST_TO_ADDR
// for un in units do
68553: LD_ADDR_VAR 0 4
68557: PUSH
68558: LD_VAR 0 1
68562: PUSH
68563: FOR_IN
68564: IFFALSE 68639
// if GetClass ( un ) = class then
68566: LD_VAR 0 4
68570: PPUSH
68571: CALL_OW 257
68575: PUSH
68576: LD_VAR 0 2
68580: EQUAL
68581: IFFALSE 68608
// result := Insert ( result , 1 , un ) else
68583: LD_ADDR_VAR 0 3
68587: PUSH
68588: LD_VAR 0 3
68592: PPUSH
68593: LD_INT 1
68595: PPUSH
68596: LD_VAR 0 4
68600: PPUSH
68601: CALL_OW 2
68605: ST_TO_ADDR
68606: GO 68637
// result := Replace ( result , result + 1 , un ) ;
68608: LD_ADDR_VAR 0 3
68612: PUSH
68613: LD_VAR 0 3
68617: PPUSH
68618: LD_VAR 0 3
68622: PUSH
68623: LD_INT 1
68625: PLUS
68626: PPUSH
68627: LD_VAR 0 4
68631: PPUSH
68632: CALL_OW 1
68636: ST_TO_ADDR
68637: GO 68563
68639: POP
68640: POP
// end ;
68641: LD_VAR 0 3
68645: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68646: LD_INT 0
68648: PPUSH
68649: PPUSH
68650: PPUSH
68651: PPUSH
68652: PPUSH
68653: PPUSH
68654: PPUSH
// result := [ ] ;
68655: LD_ADDR_VAR 0 4
68659: PUSH
68660: EMPTY
68661: ST_TO_ADDR
// if x - r < 0 then
68662: LD_VAR 0 1
68666: PUSH
68667: LD_VAR 0 3
68671: MINUS
68672: PUSH
68673: LD_INT 0
68675: LESS
68676: IFFALSE 68688
// min_x := 0 else
68678: LD_ADDR_VAR 0 8
68682: PUSH
68683: LD_INT 0
68685: ST_TO_ADDR
68686: GO 68704
// min_x := x - r ;
68688: LD_ADDR_VAR 0 8
68692: PUSH
68693: LD_VAR 0 1
68697: PUSH
68698: LD_VAR 0 3
68702: MINUS
68703: ST_TO_ADDR
// if y - r < 0 then
68704: LD_VAR 0 2
68708: PUSH
68709: LD_VAR 0 3
68713: MINUS
68714: PUSH
68715: LD_INT 0
68717: LESS
68718: IFFALSE 68730
// min_y := 0 else
68720: LD_ADDR_VAR 0 7
68724: PUSH
68725: LD_INT 0
68727: ST_TO_ADDR
68728: GO 68746
// min_y := y - r ;
68730: LD_ADDR_VAR 0 7
68734: PUSH
68735: LD_VAR 0 2
68739: PUSH
68740: LD_VAR 0 3
68744: MINUS
68745: ST_TO_ADDR
// max_x := x + r ;
68746: LD_ADDR_VAR 0 9
68750: PUSH
68751: LD_VAR 0 1
68755: PUSH
68756: LD_VAR 0 3
68760: PLUS
68761: ST_TO_ADDR
// max_y := y + r ;
68762: LD_ADDR_VAR 0 10
68766: PUSH
68767: LD_VAR 0 2
68771: PUSH
68772: LD_VAR 0 3
68776: PLUS
68777: ST_TO_ADDR
// for _x = min_x to max_x do
68778: LD_ADDR_VAR 0 5
68782: PUSH
68783: DOUBLE
68784: LD_VAR 0 8
68788: DEC
68789: ST_TO_ADDR
68790: LD_VAR 0 9
68794: PUSH
68795: FOR_TO
68796: IFFALSE 68897
// for _y = min_y to max_y do
68798: LD_ADDR_VAR 0 6
68802: PUSH
68803: DOUBLE
68804: LD_VAR 0 7
68808: DEC
68809: ST_TO_ADDR
68810: LD_VAR 0 10
68814: PUSH
68815: FOR_TO
68816: IFFALSE 68893
// begin if not ValidHex ( _x , _y ) then
68818: LD_VAR 0 5
68822: PPUSH
68823: LD_VAR 0 6
68827: PPUSH
68828: CALL_OW 488
68832: NOT
68833: IFFALSE 68837
// continue ;
68835: GO 68815
// if GetResourceTypeXY ( _x , _y ) then
68837: LD_VAR 0 5
68841: PPUSH
68842: LD_VAR 0 6
68846: PPUSH
68847: CALL_OW 283
68851: IFFALSE 68891
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68853: LD_ADDR_VAR 0 4
68857: PUSH
68858: LD_VAR 0 4
68862: PPUSH
68863: LD_VAR 0 4
68867: PUSH
68868: LD_INT 1
68870: PLUS
68871: PPUSH
68872: LD_VAR 0 5
68876: PUSH
68877: LD_VAR 0 6
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PPUSH
68886: CALL_OW 1
68890: ST_TO_ADDR
// end ;
68891: GO 68815
68893: POP
68894: POP
68895: GO 68795
68897: POP
68898: POP
// end ;
68899: LD_VAR 0 4
68903: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68904: LD_INT 0
68906: PPUSH
68907: PPUSH
68908: PPUSH
68909: PPUSH
68910: PPUSH
68911: PPUSH
68912: PPUSH
68913: PPUSH
// if not units then
68914: LD_VAR 0 1
68918: NOT
68919: IFFALSE 68923
// exit ;
68921: GO 69447
// result := UnitFilter ( units , [ f_ok ] ) ;
68923: LD_ADDR_VAR 0 3
68927: PUSH
68928: LD_VAR 0 1
68932: PPUSH
68933: LD_INT 50
68935: PUSH
68936: EMPTY
68937: LIST
68938: PPUSH
68939: CALL_OW 72
68943: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68944: LD_ADDR_VAR 0 8
68948: PUSH
68949: LD_VAR 0 1
68953: PUSH
68954: LD_INT 1
68956: ARRAY
68957: PPUSH
68958: CALL_OW 255
68962: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68963: LD_ADDR_VAR 0 10
68967: PUSH
68968: LD_INT 29
68970: PUSH
68971: LD_INT 91
68973: PUSH
68974: LD_INT 49
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: LIST
68981: ST_TO_ADDR
// if not result then
68982: LD_VAR 0 3
68986: NOT
68987: IFFALSE 68991
// exit ;
68989: GO 69447
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68991: LD_ADDR_VAR 0 5
68995: PUSH
68996: LD_INT 81
68998: PUSH
68999: LD_VAR 0 8
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PPUSH
69008: CALL_OW 69
69012: ST_TO_ADDR
// for i in result do
69013: LD_ADDR_VAR 0 4
69017: PUSH
69018: LD_VAR 0 3
69022: PUSH
69023: FOR_IN
69024: IFFALSE 69445
// begin tag := GetTag ( i ) + 1 ;
69026: LD_ADDR_VAR 0 9
69030: PUSH
69031: LD_VAR 0 4
69035: PPUSH
69036: CALL_OW 110
69040: PUSH
69041: LD_INT 1
69043: PLUS
69044: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69045: LD_ADDR_VAR 0 7
69049: PUSH
69050: LD_VAR 0 4
69054: PPUSH
69055: CALL_OW 250
69059: PPUSH
69060: LD_VAR 0 4
69064: PPUSH
69065: CALL_OW 251
69069: PPUSH
69070: LD_INT 6
69072: PPUSH
69073: CALL 68646 0 3
69077: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69078: LD_VAR 0 4
69082: PPUSH
69083: CALL_OW 247
69087: PUSH
69088: LD_INT 2
69090: EQUAL
69091: PUSH
69092: LD_VAR 0 7
69096: AND
69097: PUSH
69098: LD_VAR 0 4
69102: PPUSH
69103: CALL_OW 264
69107: PUSH
69108: LD_VAR 0 10
69112: IN
69113: NOT
69114: AND
69115: IFFALSE 69154
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69117: LD_VAR 0 4
69121: PPUSH
69122: LD_VAR 0 7
69126: PUSH
69127: LD_INT 1
69129: ARRAY
69130: PUSH
69131: LD_INT 1
69133: ARRAY
69134: PPUSH
69135: LD_VAR 0 7
69139: PUSH
69140: LD_INT 1
69142: ARRAY
69143: PUSH
69144: LD_INT 2
69146: ARRAY
69147: PPUSH
69148: CALL_OW 116
69152: GO 69443
// if path > tag then
69154: LD_VAR 0 2
69158: PUSH
69159: LD_VAR 0 9
69163: GREATER
69164: IFFALSE 69372
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69166: LD_ADDR_VAR 0 6
69170: PUSH
69171: LD_VAR 0 5
69175: PPUSH
69176: LD_INT 91
69178: PUSH
69179: LD_VAR 0 4
69183: PUSH
69184: LD_INT 8
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: LIST
69191: PPUSH
69192: CALL_OW 72
69196: ST_TO_ADDR
// if nearEnemy then
69197: LD_VAR 0 6
69201: IFFALSE 69270
// begin if GetWeapon ( i ) = ru_time_lapser then
69203: LD_VAR 0 4
69207: PPUSH
69208: CALL_OW 264
69212: PUSH
69213: LD_INT 49
69215: EQUAL
69216: IFFALSE 69244
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69218: LD_VAR 0 4
69222: PPUSH
69223: LD_VAR 0 6
69227: PPUSH
69228: LD_VAR 0 4
69232: PPUSH
69233: CALL_OW 74
69237: PPUSH
69238: CALL_OW 112
69242: GO 69268
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69244: LD_VAR 0 4
69248: PPUSH
69249: LD_VAR 0 6
69253: PPUSH
69254: LD_VAR 0 4
69258: PPUSH
69259: CALL_OW 74
69263: PPUSH
69264: CALL_OW 115
// end else
69268: GO 69370
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69270: LD_VAR 0 4
69274: PPUSH
69275: LD_VAR 0 2
69279: PUSH
69280: LD_VAR 0 9
69284: ARRAY
69285: PUSH
69286: LD_INT 1
69288: ARRAY
69289: PPUSH
69290: LD_VAR 0 2
69294: PUSH
69295: LD_VAR 0 9
69299: ARRAY
69300: PUSH
69301: LD_INT 2
69303: ARRAY
69304: PPUSH
69305: CALL_OW 297
69309: PUSH
69310: LD_INT 6
69312: GREATER
69313: IFFALSE 69356
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69315: LD_VAR 0 4
69319: PPUSH
69320: LD_VAR 0 2
69324: PUSH
69325: LD_VAR 0 9
69329: ARRAY
69330: PUSH
69331: LD_INT 1
69333: ARRAY
69334: PPUSH
69335: LD_VAR 0 2
69339: PUSH
69340: LD_VAR 0 9
69344: ARRAY
69345: PUSH
69346: LD_INT 2
69348: ARRAY
69349: PPUSH
69350: CALL_OW 114
69354: GO 69370
// SetTag ( i , tag ) ;
69356: LD_VAR 0 4
69360: PPUSH
69361: LD_VAR 0 9
69365: PPUSH
69366: CALL_OW 109
// end else
69370: GO 69443
// if enemy then
69372: LD_VAR 0 5
69376: IFFALSE 69443
// begin if GetWeapon ( i ) = ru_time_lapser then
69378: LD_VAR 0 4
69382: PPUSH
69383: CALL_OW 264
69387: PUSH
69388: LD_INT 49
69390: EQUAL
69391: IFFALSE 69419
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69393: LD_VAR 0 4
69397: PPUSH
69398: LD_VAR 0 5
69402: PPUSH
69403: LD_VAR 0 4
69407: PPUSH
69408: CALL_OW 74
69412: PPUSH
69413: CALL_OW 112
69417: GO 69443
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69419: LD_VAR 0 4
69423: PPUSH
69424: LD_VAR 0 5
69428: PPUSH
69429: LD_VAR 0 4
69433: PPUSH
69434: CALL_OW 74
69438: PPUSH
69439: CALL_OW 115
// end ; end ;
69443: GO 69023
69445: POP
69446: POP
// end ;
69447: LD_VAR 0 3
69451: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69452: LD_INT 0
69454: PPUSH
69455: PPUSH
69456: PPUSH
// if not unit or IsInUnit ( unit ) then
69457: LD_VAR 0 1
69461: NOT
69462: PUSH
69463: LD_VAR 0 1
69467: PPUSH
69468: CALL_OW 310
69472: OR
69473: IFFALSE 69477
// exit ;
69475: GO 69568
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69477: LD_ADDR_VAR 0 4
69481: PUSH
69482: LD_VAR 0 1
69486: PPUSH
69487: CALL_OW 250
69491: PPUSH
69492: LD_VAR 0 2
69496: PPUSH
69497: LD_INT 1
69499: PPUSH
69500: CALL_OW 272
69504: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69505: LD_ADDR_VAR 0 5
69509: PUSH
69510: LD_VAR 0 1
69514: PPUSH
69515: CALL_OW 251
69519: PPUSH
69520: LD_VAR 0 2
69524: PPUSH
69525: LD_INT 1
69527: PPUSH
69528: CALL_OW 273
69532: ST_TO_ADDR
// if ValidHex ( x , y ) then
69533: LD_VAR 0 4
69537: PPUSH
69538: LD_VAR 0 5
69542: PPUSH
69543: CALL_OW 488
69547: IFFALSE 69568
// ComTurnXY ( unit , x , y ) ;
69549: LD_VAR 0 1
69553: PPUSH
69554: LD_VAR 0 4
69558: PPUSH
69559: LD_VAR 0 5
69563: PPUSH
69564: CALL_OW 118
// end ;
69568: LD_VAR 0 3
69572: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69573: LD_INT 0
69575: PPUSH
69576: PPUSH
// result := false ;
69577: LD_ADDR_VAR 0 3
69581: PUSH
69582: LD_INT 0
69584: ST_TO_ADDR
// if not units then
69585: LD_VAR 0 2
69589: NOT
69590: IFFALSE 69594
// exit ;
69592: GO 69639
// for i in units do
69594: LD_ADDR_VAR 0 4
69598: PUSH
69599: LD_VAR 0 2
69603: PUSH
69604: FOR_IN
69605: IFFALSE 69637
// if See ( side , i ) then
69607: LD_VAR 0 1
69611: PPUSH
69612: LD_VAR 0 4
69616: PPUSH
69617: CALL_OW 292
69621: IFFALSE 69635
// begin result := true ;
69623: LD_ADDR_VAR 0 3
69627: PUSH
69628: LD_INT 1
69630: ST_TO_ADDR
// exit ;
69631: POP
69632: POP
69633: GO 69639
// end ;
69635: GO 69604
69637: POP
69638: POP
// end ;
69639: LD_VAR 0 3
69643: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69644: LD_INT 0
69646: PPUSH
69647: PPUSH
69648: PPUSH
69649: PPUSH
// if not unit or not points then
69650: LD_VAR 0 1
69654: NOT
69655: PUSH
69656: LD_VAR 0 2
69660: NOT
69661: OR
69662: IFFALSE 69666
// exit ;
69664: GO 69756
// dist := 99999 ;
69666: LD_ADDR_VAR 0 5
69670: PUSH
69671: LD_INT 99999
69673: ST_TO_ADDR
// for i in points do
69674: LD_ADDR_VAR 0 4
69678: PUSH
69679: LD_VAR 0 2
69683: PUSH
69684: FOR_IN
69685: IFFALSE 69754
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69687: LD_ADDR_VAR 0 6
69691: PUSH
69692: LD_VAR 0 1
69696: PPUSH
69697: LD_VAR 0 4
69701: PUSH
69702: LD_INT 1
69704: ARRAY
69705: PPUSH
69706: LD_VAR 0 4
69710: PUSH
69711: LD_INT 2
69713: ARRAY
69714: PPUSH
69715: CALL_OW 297
69719: ST_TO_ADDR
// if tmpDist < dist then
69720: LD_VAR 0 6
69724: PUSH
69725: LD_VAR 0 5
69729: LESS
69730: IFFALSE 69752
// begin result := i ;
69732: LD_ADDR_VAR 0 3
69736: PUSH
69737: LD_VAR 0 4
69741: ST_TO_ADDR
// dist := tmpDist ;
69742: LD_ADDR_VAR 0 5
69746: PUSH
69747: LD_VAR 0 6
69751: ST_TO_ADDR
// end ; end ;
69752: GO 69684
69754: POP
69755: POP
// end ;
69756: LD_VAR 0 3
69760: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69761: LD_INT 0
69763: PPUSH
// uc_side := side ;
69764: LD_ADDR_OWVAR 20
69768: PUSH
69769: LD_VAR 0 1
69773: ST_TO_ADDR
// uc_nation := 3 ;
69774: LD_ADDR_OWVAR 21
69778: PUSH
69779: LD_INT 3
69781: ST_TO_ADDR
// vc_chassis := 25 ;
69782: LD_ADDR_OWVAR 37
69786: PUSH
69787: LD_INT 25
69789: ST_TO_ADDR
// vc_engine := engine_siberite ;
69790: LD_ADDR_OWVAR 39
69794: PUSH
69795: LD_INT 3
69797: ST_TO_ADDR
// vc_control := control_computer ;
69798: LD_ADDR_OWVAR 38
69802: PUSH
69803: LD_INT 3
69805: ST_TO_ADDR
// vc_weapon := 59 ;
69806: LD_ADDR_OWVAR 40
69810: PUSH
69811: LD_INT 59
69813: ST_TO_ADDR
// result := CreateVehicle ;
69814: LD_ADDR_VAR 0 5
69818: PUSH
69819: CALL_OW 45
69823: ST_TO_ADDR
// SetDir ( result , d ) ;
69824: LD_VAR 0 5
69828: PPUSH
69829: LD_VAR 0 4
69833: PPUSH
69834: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69838: LD_VAR 0 5
69842: PPUSH
69843: LD_VAR 0 2
69847: PPUSH
69848: LD_VAR 0 3
69852: PPUSH
69853: LD_INT 0
69855: PPUSH
69856: CALL_OW 48
// end ;
69860: LD_VAR 0 5
69864: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69865: LD_INT 0
69867: PPUSH
69868: PPUSH
69869: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69870: LD_ADDR_VAR 0 2
69874: PUSH
69875: LD_INT 0
69877: PUSH
69878: LD_INT 0
69880: PUSH
69881: LD_INT 0
69883: PUSH
69884: LD_INT 0
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69893: LD_VAR 0 1
69897: NOT
69898: PUSH
69899: LD_VAR 0 1
69903: PPUSH
69904: CALL_OW 264
69908: PUSH
69909: LD_INT 12
69911: PUSH
69912: LD_INT 51
69914: PUSH
69915: LD_INT 32
69917: PUSH
69918: LD_INT 89
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: IN
69927: NOT
69928: OR
69929: IFFALSE 69933
// exit ;
69931: GO 70031
// for i := 1 to 3 do
69933: LD_ADDR_VAR 0 3
69937: PUSH
69938: DOUBLE
69939: LD_INT 1
69941: DEC
69942: ST_TO_ADDR
69943: LD_INT 3
69945: PUSH
69946: FOR_TO
69947: IFFALSE 70029
// begin tmp := GetCargo ( cargo , i ) ;
69949: LD_ADDR_VAR 0 4
69953: PUSH
69954: LD_VAR 0 1
69958: PPUSH
69959: LD_VAR 0 3
69963: PPUSH
69964: CALL_OW 289
69968: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69969: LD_ADDR_VAR 0 2
69973: PUSH
69974: LD_VAR 0 2
69978: PPUSH
69979: LD_VAR 0 3
69983: PPUSH
69984: LD_VAR 0 4
69988: PPUSH
69989: CALL_OW 1
69993: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69994: LD_ADDR_VAR 0 2
69998: PUSH
69999: LD_VAR 0 2
70003: PPUSH
70004: LD_INT 4
70006: PPUSH
70007: LD_VAR 0 2
70011: PUSH
70012: LD_INT 4
70014: ARRAY
70015: PUSH
70016: LD_VAR 0 4
70020: PLUS
70021: PPUSH
70022: CALL_OW 1
70026: ST_TO_ADDR
// end ;
70027: GO 69946
70029: POP
70030: POP
// end ;
70031: LD_VAR 0 2
70035: RET
// export function Length ( array ) ; begin
70036: LD_INT 0
70038: PPUSH
// result := array + 0 ;
70039: LD_ADDR_VAR 0 2
70043: PUSH
70044: LD_VAR 0 1
70048: PUSH
70049: LD_INT 0
70051: PLUS
70052: ST_TO_ADDR
// end ;
70053: LD_VAR 0 2
70057: RET
// export function PrepareArray ( array ) ; begin
70058: LD_INT 0
70060: PPUSH
// result := array diff 0 ;
70061: LD_ADDR_VAR 0 2
70065: PUSH
70066: LD_VAR 0 1
70070: PUSH
70071: LD_INT 0
70073: DIFF
70074: ST_TO_ADDR
// if not result [ 1 ] then
70075: LD_VAR 0 2
70079: PUSH
70080: LD_INT 1
70082: ARRAY
70083: NOT
70084: IFFALSE 70104
// result := Delete ( result , 1 ) ;
70086: LD_ADDR_VAR 0 2
70090: PUSH
70091: LD_VAR 0 2
70095: PPUSH
70096: LD_INT 1
70098: PPUSH
70099: CALL_OW 3
70103: ST_TO_ADDR
// end ;
70104: LD_VAR 0 2
70108: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70109: LD_INT 0
70111: PPUSH
70112: PPUSH
70113: PPUSH
70114: PPUSH
// sibRocketRange := 25 ;
70115: LD_ADDR_VAR 0 6
70119: PUSH
70120: LD_INT 25
70122: ST_TO_ADDR
// result := false ;
70123: LD_ADDR_VAR 0 4
70127: PUSH
70128: LD_INT 0
70130: ST_TO_ADDR
// for i := 0 to 5 do
70131: LD_ADDR_VAR 0 5
70135: PUSH
70136: DOUBLE
70137: LD_INT 0
70139: DEC
70140: ST_TO_ADDR
70141: LD_INT 5
70143: PUSH
70144: FOR_TO
70145: IFFALSE 70212
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70147: LD_VAR 0 1
70151: PPUSH
70152: LD_VAR 0 5
70156: PPUSH
70157: LD_VAR 0 6
70161: PPUSH
70162: CALL_OW 272
70166: PPUSH
70167: LD_VAR 0 2
70171: PPUSH
70172: LD_VAR 0 5
70176: PPUSH
70177: LD_VAR 0 6
70181: PPUSH
70182: CALL_OW 273
70186: PPUSH
70187: LD_VAR 0 3
70191: PPUSH
70192: CALL_OW 309
70196: IFFALSE 70210
// begin result := true ;
70198: LD_ADDR_VAR 0 4
70202: PUSH
70203: LD_INT 1
70205: ST_TO_ADDR
// exit ;
70206: POP
70207: POP
70208: GO 70214
// end ;
70210: GO 70144
70212: POP
70213: POP
// end ;
70214: LD_VAR 0 4
70218: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70219: LD_INT 0
70221: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70222: LD_VAR 0 1
70226: PPUSH
70227: LD_VAR 0 2
70231: PPUSH
70232: LD_INT 0
70234: PPUSH
70235: LD_INT 0
70237: PPUSH
70238: LD_INT 1
70240: PPUSH
70241: LD_INT 0
70243: PPUSH
70244: CALL_OW 587
// end ;
70248: LD_VAR 0 3
70252: RET
// export function CenterOnNow ( unit ) ; begin
70253: LD_INT 0
70255: PPUSH
// result := IsInUnit ( unit ) ;
70256: LD_ADDR_VAR 0 2
70260: PUSH
70261: LD_VAR 0 1
70265: PPUSH
70266: CALL_OW 310
70270: ST_TO_ADDR
// if not result then
70271: LD_VAR 0 2
70275: NOT
70276: IFFALSE 70288
// result := unit ;
70278: LD_ADDR_VAR 0 2
70282: PUSH
70283: LD_VAR 0 1
70287: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70288: LD_VAR 0 1
70292: PPUSH
70293: CALL_OW 87
// end ; end_of_file
70297: LD_VAR 0 2
70301: RET
// export globalGameSaveCounter ; every 0 0$1 do
70302: GO 70304
70304: DISABLE
// begin enable ;
70305: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70306: LD_STRING updateTimer(
70308: PUSH
70309: LD_OWVAR 1
70313: STR
70314: PUSH
70315: LD_STRING );
70317: STR
70318: PPUSH
70319: CALL_OW 559
// end ;
70323: END
// every 0 0$1 do
70324: GO 70326
70326: DISABLE
// begin globalGameSaveCounter := 0 ;
70327: LD_ADDR_EXP 73
70331: PUSH
70332: LD_INT 0
70334: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
70335: LD_STRING setGameSaveCounter(0)
70337: PPUSH
70338: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
70342: LD_STRING initStreamRollete();
70344: PPUSH
70345: CALL_OW 559
// InitStreamMode ;
70349: CALL 71675 0 0
// DefineStreamItems ( false ) ;
70353: LD_INT 0
70355: PPUSH
70356: CALL 72139 0 1
// end ;
70360: END
// export function SOS_MapStart ( ) ; begin
70361: LD_INT 0
70363: PPUSH
// if streamModeActive then
70364: LD_EXP 74
70368: IFFALSE 70377
// DefineStreamItems ( true ) ;
70370: LD_INT 1
70372: PPUSH
70373: CALL 72139 0 1
// UpdateLuaVariables ( ) ;
70377: CALL 70394 0 0
// UpdateFactoryWaypoints ( ) ;
70381: CALL 85000 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70385: CALL 85257 0 0
// end ;
70389: LD_VAR 0 1
70393: RET
// function UpdateLuaVariables ( ) ; begin
70394: LD_INT 0
70396: PPUSH
// if globalGameSaveCounter then
70397: LD_EXP 73
70401: IFFALSE 70435
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
70403: LD_ADDR_EXP 73
70407: PUSH
70408: LD_EXP 73
70412: PPUSH
70413: CALL 67661 0 1
70417: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70418: LD_STRING setGameSaveCounter(
70420: PUSH
70421: LD_EXP 73
70425: STR
70426: PUSH
70427: LD_STRING )
70429: STR
70430: PPUSH
70431: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70435: LD_STRING setGameDifficulty(
70437: PUSH
70438: LD_OWVAR 67
70442: STR
70443: PUSH
70444: LD_STRING )
70446: STR
70447: PPUSH
70448: CALL_OW 559
// end ;
70452: LD_VAR 0 1
70456: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70457: LD_INT 0
70459: PPUSH
// if p2 = stream_mode then
70460: LD_VAR 0 2
70464: PUSH
70465: LD_INT 100
70467: EQUAL
70468: IFFALSE 71471
// begin if not StreamModeActive then
70470: LD_EXP 74
70474: NOT
70475: IFFALSE 70485
// StreamModeActive := true ;
70477: LD_ADDR_EXP 74
70481: PUSH
70482: LD_INT 1
70484: ST_TO_ADDR
// if p3 = 0 then
70485: LD_VAR 0 3
70489: PUSH
70490: LD_INT 0
70492: EQUAL
70493: IFFALSE 70499
// InitStreamMode ;
70495: CALL 71675 0 0
// if p3 = 1 then
70499: LD_VAR 0 3
70503: PUSH
70504: LD_INT 1
70506: EQUAL
70507: IFFALSE 70517
// sRocket := true ;
70509: LD_ADDR_EXP 79
70513: PUSH
70514: LD_INT 1
70516: ST_TO_ADDR
// if p3 = 2 then
70517: LD_VAR 0 3
70521: PUSH
70522: LD_INT 2
70524: EQUAL
70525: IFFALSE 70535
// sSpeed := true ;
70527: LD_ADDR_EXP 78
70531: PUSH
70532: LD_INT 1
70534: ST_TO_ADDR
// if p3 = 3 then
70535: LD_VAR 0 3
70539: PUSH
70540: LD_INT 3
70542: EQUAL
70543: IFFALSE 70553
// sEngine := true ;
70545: LD_ADDR_EXP 80
70549: PUSH
70550: LD_INT 1
70552: ST_TO_ADDR
// if p3 = 4 then
70553: LD_VAR 0 3
70557: PUSH
70558: LD_INT 4
70560: EQUAL
70561: IFFALSE 70571
// sSpec := true ;
70563: LD_ADDR_EXP 77
70567: PUSH
70568: LD_INT 1
70570: ST_TO_ADDR
// if p3 = 5 then
70571: LD_VAR 0 3
70575: PUSH
70576: LD_INT 5
70578: EQUAL
70579: IFFALSE 70589
// sLevel := true ;
70581: LD_ADDR_EXP 81
70585: PUSH
70586: LD_INT 1
70588: ST_TO_ADDR
// if p3 = 6 then
70589: LD_VAR 0 3
70593: PUSH
70594: LD_INT 6
70596: EQUAL
70597: IFFALSE 70607
// sArmoury := true ;
70599: LD_ADDR_EXP 82
70603: PUSH
70604: LD_INT 1
70606: ST_TO_ADDR
// if p3 = 7 then
70607: LD_VAR 0 3
70611: PUSH
70612: LD_INT 7
70614: EQUAL
70615: IFFALSE 70625
// sRadar := true ;
70617: LD_ADDR_EXP 83
70621: PUSH
70622: LD_INT 1
70624: ST_TO_ADDR
// if p3 = 8 then
70625: LD_VAR 0 3
70629: PUSH
70630: LD_INT 8
70632: EQUAL
70633: IFFALSE 70643
// sBunker := true ;
70635: LD_ADDR_EXP 84
70639: PUSH
70640: LD_INT 1
70642: ST_TO_ADDR
// if p3 = 9 then
70643: LD_VAR 0 3
70647: PUSH
70648: LD_INT 9
70650: EQUAL
70651: IFFALSE 70661
// sHack := true ;
70653: LD_ADDR_EXP 85
70657: PUSH
70658: LD_INT 1
70660: ST_TO_ADDR
// if p3 = 10 then
70661: LD_VAR 0 3
70665: PUSH
70666: LD_INT 10
70668: EQUAL
70669: IFFALSE 70679
// sFire := true ;
70671: LD_ADDR_EXP 86
70675: PUSH
70676: LD_INT 1
70678: ST_TO_ADDR
// if p3 = 11 then
70679: LD_VAR 0 3
70683: PUSH
70684: LD_INT 11
70686: EQUAL
70687: IFFALSE 70697
// sRefresh := true ;
70689: LD_ADDR_EXP 87
70693: PUSH
70694: LD_INT 1
70696: ST_TO_ADDR
// if p3 = 12 then
70697: LD_VAR 0 3
70701: PUSH
70702: LD_INT 12
70704: EQUAL
70705: IFFALSE 70715
// sExp := true ;
70707: LD_ADDR_EXP 88
70711: PUSH
70712: LD_INT 1
70714: ST_TO_ADDR
// if p3 = 13 then
70715: LD_VAR 0 3
70719: PUSH
70720: LD_INT 13
70722: EQUAL
70723: IFFALSE 70733
// sDepot := true ;
70725: LD_ADDR_EXP 89
70729: PUSH
70730: LD_INT 1
70732: ST_TO_ADDR
// if p3 = 14 then
70733: LD_VAR 0 3
70737: PUSH
70738: LD_INT 14
70740: EQUAL
70741: IFFALSE 70751
// sFlag := true ;
70743: LD_ADDR_EXP 90
70747: PUSH
70748: LD_INT 1
70750: ST_TO_ADDR
// if p3 = 15 then
70751: LD_VAR 0 3
70755: PUSH
70756: LD_INT 15
70758: EQUAL
70759: IFFALSE 70769
// sKamikadze := true ;
70761: LD_ADDR_EXP 98
70765: PUSH
70766: LD_INT 1
70768: ST_TO_ADDR
// if p3 = 16 then
70769: LD_VAR 0 3
70773: PUSH
70774: LD_INT 16
70776: EQUAL
70777: IFFALSE 70787
// sTroll := true ;
70779: LD_ADDR_EXP 99
70783: PUSH
70784: LD_INT 1
70786: ST_TO_ADDR
// if p3 = 17 then
70787: LD_VAR 0 3
70791: PUSH
70792: LD_INT 17
70794: EQUAL
70795: IFFALSE 70805
// sSlow := true ;
70797: LD_ADDR_EXP 100
70801: PUSH
70802: LD_INT 1
70804: ST_TO_ADDR
// if p3 = 18 then
70805: LD_VAR 0 3
70809: PUSH
70810: LD_INT 18
70812: EQUAL
70813: IFFALSE 70823
// sLack := true ;
70815: LD_ADDR_EXP 101
70819: PUSH
70820: LD_INT 1
70822: ST_TO_ADDR
// if p3 = 19 then
70823: LD_VAR 0 3
70827: PUSH
70828: LD_INT 19
70830: EQUAL
70831: IFFALSE 70841
// sTank := true ;
70833: LD_ADDR_EXP 103
70837: PUSH
70838: LD_INT 1
70840: ST_TO_ADDR
// if p3 = 20 then
70841: LD_VAR 0 3
70845: PUSH
70846: LD_INT 20
70848: EQUAL
70849: IFFALSE 70859
// sRemote := true ;
70851: LD_ADDR_EXP 104
70855: PUSH
70856: LD_INT 1
70858: ST_TO_ADDR
// if p3 = 21 then
70859: LD_VAR 0 3
70863: PUSH
70864: LD_INT 21
70866: EQUAL
70867: IFFALSE 70877
// sPowell := true ;
70869: LD_ADDR_EXP 105
70873: PUSH
70874: LD_INT 1
70876: ST_TO_ADDR
// if p3 = 22 then
70877: LD_VAR 0 3
70881: PUSH
70882: LD_INT 22
70884: EQUAL
70885: IFFALSE 70895
// sTeleport := true ;
70887: LD_ADDR_EXP 108
70891: PUSH
70892: LD_INT 1
70894: ST_TO_ADDR
// if p3 = 23 then
70895: LD_VAR 0 3
70899: PUSH
70900: LD_INT 23
70902: EQUAL
70903: IFFALSE 70913
// sOilTower := true ;
70905: LD_ADDR_EXP 110
70909: PUSH
70910: LD_INT 1
70912: ST_TO_ADDR
// if p3 = 24 then
70913: LD_VAR 0 3
70917: PUSH
70918: LD_INT 24
70920: EQUAL
70921: IFFALSE 70931
// sShovel := true ;
70923: LD_ADDR_EXP 111
70927: PUSH
70928: LD_INT 1
70930: ST_TO_ADDR
// if p3 = 25 then
70931: LD_VAR 0 3
70935: PUSH
70936: LD_INT 25
70938: EQUAL
70939: IFFALSE 70949
// sSheik := true ;
70941: LD_ADDR_EXP 112
70945: PUSH
70946: LD_INT 1
70948: ST_TO_ADDR
// if p3 = 26 then
70949: LD_VAR 0 3
70953: PUSH
70954: LD_INT 26
70956: EQUAL
70957: IFFALSE 70967
// sEarthquake := true ;
70959: LD_ADDR_EXP 114
70963: PUSH
70964: LD_INT 1
70966: ST_TO_ADDR
// if p3 = 27 then
70967: LD_VAR 0 3
70971: PUSH
70972: LD_INT 27
70974: EQUAL
70975: IFFALSE 70985
// sAI := true ;
70977: LD_ADDR_EXP 115
70981: PUSH
70982: LD_INT 1
70984: ST_TO_ADDR
// if p3 = 28 then
70985: LD_VAR 0 3
70989: PUSH
70990: LD_INT 28
70992: EQUAL
70993: IFFALSE 71003
// sCargo := true ;
70995: LD_ADDR_EXP 118
70999: PUSH
71000: LD_INT 1
71002: ST_TO_ADDR
// if p3 = 29 then
71003: LD_VAR 0 3
71007: PUSH
71008: LD_INT 29
71010: EQUAL
71011: IFFALSE 71021
// sDLaser := true ;
71013: LD_ADDR_EXP 119
71017: PUSH
71018: LD_INT 1
71020: ST_TO_ADDR
// if p3 = 30 then
71021: LD_VAR 0 3
71025: PUSH
71026: LD_INT 30
71028: EQUAL
71029: IFFALSE 71039
// sExchange := true ;
71031: LD_ADDR_EXP 120
71035: PUSH
71036: LD_INT 1
71038: ST_TO_ADDR
// if p3 = 31 then
71039: LD_VAR 0 3
71043: PUSH
71044: LD_INT 31
71046: EQUAL
71047: IFFALSE 71057
// sFac := true ;
71049: LD_ADDR_EXP 121
71053: PUSH
71054: LD_INT 1
71056: ST_TO_ADDR
// if p3 = 32 then
71057: LD_VAR 0 3
71061: PUSH
71062: LD_INT 32
71064: EQUAL
71065: IFFALSE 71075
// sPower := true ;
71067: LD_ADDR_EXP 122
71071: PUSH
71072: LD_INT 1
71074: ST_TO_ADDR
// if p3 = 33 then
71075: LD_VAR 0 3
71079: PUSH
71080: LD_INT 33
71082: EQUAL
71083: IFFALSE 71093
// sRandom := true ;
71085: LD_ADDR_EXP 123
71089: PUSH
71090: LD_INT 1
71092: ST_TO_ADDR
// if p3 = 34 then
71093: LD_VAR 0 3
71097: PUSH
71098: LD_INT 34
71100: EQUAL
71101: IFFALSE 71111
// sShield := true ;
71103: LD_ADDR_EXP 124
71107: PUSH
71108: LD_INT 1
71110: ST_TO_ADDR
// if p3 = 35 then
71111: LD_VAR 0 3
71115: PUSH
71116: LD_INT 35
71118: EQUAL
71119: IFFALSE 71129
// sTime := true ;
71121: LD_ADDR_EXP 125
71125: PUSH
71126: LD_INT 1
71128: ST_TO_ADDR
// if p3 = 36 then
71129: LD_VAR 0 3
71133: PUSH
71134: LD_INT 36
71136: EQUAL
71137: IFFALSE 71147
// sTools := true ;
71139: LD_ADDR_EXP 126
71143: PUSH
71144: LD_INT 1
71146: ST_TO_ADDR
// if p3 = 101 then
71147: LD_VAR 0 3
71151: PUSH
71152: LD_INT 101
71154: EQUAL
71155: IFFALSE 71165
// sSold := true ;
71157: LD_ADDR_EXP 91
71161: PUSH
71162: LD_INT 1
71164: ST_TO_ADDR
// if p3 = 102 then
71165: LD_VAR 0 3
71169: PUSH
71170: LD_INT 102
71172: EQUAL
71173: IFFALSE 71183
// sDiff := true ;
71175: LD_ADDR_EXP 92
71179: PUSH
71180: LD_INT 1
71182: ST_TO_ADDR
// if p3 = 103 then
71183: LD_VAR 0 3
71187: PUSH
71188: LD_INT 103
71190: EQUAL
71191: IFFALSE 71201
// sFog := true ;
71193: LD_ADDR_EXP 95
71197: PUSH
71198: LD_INT 1
71200: ST_TO_ADDR
// if p3 = 104 then
71201: LD_VAR 0 3
71205: PUSH
71206: LD_INT 104
71208: EQUAL
71209: IFFALSE 71219
// sReset := true ;
71211: LD_ADDR_EXP 96
71215: PUSH
71216: LD_INT 1
71218: ST_TO_ADDR
// if p3 = 105 then
71219: LD_VAR 0 3
71223: PUSH
71224: LD_INT 105
71226: EQUAL
71227: IFFALSE 71237
// sSun := true ;
71229: LD_ADDR_EXP 97
71233: PUSH
71234: LD_INT 1
71236: ST_TO_ADDR
// if p3 = 106 then
71237: LD_VAR 0 3
71241: PUSH
71242: LD_INT 106
71244: EQUAL
71245: IFFALSE 71255
// sTiger := true ;
71247: LD_ADDR_EXP 93
71251: PUSH
71252: LD_INT 1
71254: ST_TO_ADDR
// if p3 = 107 then
71255: LD_VAR 0 3
71259: PUSH
71260: LD_INT 107
71262: EQUAL
71263: IFFALSE 71273
// sBomb := true ;
71265: LD_ADDR_EXP 94
71269: PUSH
71270: LD_INT 1
71272: ST_TO_ADDR
// if p3 = 108 then
71273: LD_VAR 0 3
71277: PUSH
71278: LD_INT 108
71280: EQUAL
71281: IFFALSE 71291
// sWound := true ;
71283: LD_ADDR_EXP 102
71287: PUSH
71288: LD_INT 1
71290: ST_TO_ADDR
// if p3 = 109 then
71291: LD_VAR 0 3
71295: PUSH
71296: LD_INT 109
71298: EQUAL
71299: IFFALSE 71309
// sBetray := true ;
71301: LD_ADDR_EXP 106
71305: PUSH
71306: LD_INT 1
71308: ST_TO_ADDR
// if p3 = 110 then
71309: LD_VAR 0 3
71313: PUSH
71314: LD_INT 110
71316: EQUAL
71317: IFFALSE 71327
// sContamin := true ;
71319: LD_ADDR_EXP 107
71323: PUSH
71324: LD_INT 1
71326: ST_TO_ADDR
// if p3 = 111 then
71327: LD_VAR 0 3
71331: PUSH
71332: LD_INT 111
71334: EQUAL
71335: IFFALSE 71345
// sOil := true ;
71337: LD_ADDR_EXP 109
71341: PUSH
71342: LD_INT 1
71344: ST_TO_ADDR
// if p3 = 112 then
71345: LD_VAR 0 3
71349: PUSH
71350: LD_INT 112
71352: EQUAL
71353: IFFALSE 71363
// sStu := true ;
71355: LD_ADDR_EXP 113
71359: PUSH
71360: LD_INT 1
71362: ST_TO_ADDR
// if p3 = 113 then
71363: LD_VAR 0 3
71367: PUSH
71368: LD_INT 113
71370: EQUAL
71371: IFFALSE 71381
// sBazooka := true ;
71373: LD_ADDR_EXP 116
71377: PUSH
71378: LD_INT 1
71380: ST_TO_ADDR
// if p3 = 114 then
71381: LD_VAR 0 3
71385: PUSH
71386: LD_INT 114
71388: EQUAL
71389: IFFALSE 71399
// sMortar := true ;
71391: LD_ADDR_EXP 117
71395: PUSH
71396: LD_INT 1
71398: ST_TO_ADDR
// if p3 = 115 then
71399: LD_VAR 0 3
71403: PUSH
71404: LD_INT 115
71406: EQUAL
71407: IFFALSE 71417
// sRanger := true ;
71409: LD_ADDR_EXP 127
71413: PUSH
71414: LD_INT 1
71416: ST_TO_ADDR
// if p3 = 116 then
71417: LD_VAR 0 3
71421: PUSH
71422: LD_INT 116
71424: EQUAL
71425: IFFALSE 71435
// sComputer := true ;
71427: LD_ADDR_EXP 128
71431: PUSH
71432: LD_INT 1
71434: ST_TO_ADDR
// if p3 = 117 then
71435: LD_VAR 0 3
71439: PUSH
71440: LD_INT 117
71442: EQUAL
71443: IFFALSE 71453
// s30 := true ;
71445: LD_ADDR_EXP 129
71449: PUSH
71450: LD_INT 1
71452: ST_TO_ADDR
// if p3 = 118 then
71453: LD_VAR 0 3
71457: PUSH
71458: LD_INT 118
71460: EQUAL
71461: IFFALSE 71471
// s60 := true ;
71463: LD_ADDR_EXP 130
71467: PUSH
71468: LD_INT 1
71470: ST_TO_ADDR
// end ; if p2 = hack_mode then
71471: LD_VAR 0 2
71475: PUSH
71476: LD_INT 101
71478: EQUAL
71479: IFFALSE 71607
// begin case p3 of 1 :
71481: LD_VAR 0 3
71485: PUSH
71486: LD_INT 1
71488: DOUBLE
71489: EQUAL
71490: IFTRUE 71494
71492: GO 71501
71494: POP
// hHackUnlimitedResources ; 2 :
71495: CALL 83746 0 0
71499: GO 71607
71501: LD_INT 2
71503: DOUBLE
71504: EQUAL
71505: IFTRUE 71509
71507: GO 71516
71509: POP
// hHackSetLevel10 ; 3 :
71510: CALL 83879 0 0
71514: GO 71607
71516: LD_INT 3
71518: DOUBLE
71519: EQUAL
71520: IFTRUE 71524
71522: GO 71531
71524: POP
// hHackSetLevel10YourUnits ; 4 :
71525: CALL 83964 0 0
71529: GO 71607
71531: LD_INT 4
71533: DOUBLE
71534: EQUAL
71535: IFTRUE 71539
71537: GO 71546
71539: POP
// hHackInvincible ; 5 :
71540: CALL 84412 0 0
71544: GO 71607
71546: LD_INT 5
71548: DOUBLE
71549: EQUAL
71550: IFTRUE 71554
71552: GO 71561
71554: POP
// hHackInvisible ; 6 :
71555: CALL 84523 0 0
71559: GO 71607
71561: LD_INT 6
71563: DOUBLE
71564: EQUAL
71565: IFTRUE 71569
71567: GO 71576
71569: POP
// hHackChangeYourSide ; 7 :
71570: CALL 84580 0 0
71574: GO 71607
71576: LD_INT 7
71578: DOUBLE
71579: EQUAL
71580: IFTRUE 71584
71582: GO 71591
71584: POP
// hHackChangeUnitSide ; 8 :
71585: CALL 84622 0 0
71589: GO 71607
71591: LD_INT 8
71593: DOUBLE
71594: EQUAL
71595: IFTRUE 71599
71597: GO 71606
71599: POP
// hHackFog ; end ;
71600: CALL 84723 0 0
71604: GO 71607
71606: POP
// end ; if p2 = game_save_mode then
71607: LD_VAR 0 2
71611: PUSH
71612: LD_INT 102
71614: EQUAL
71615: IFFALSE 71670
// begin if p3 = 1 then
71617: LD_VAR 0 3
71621: PUSH
71622: LD_INT 1
71624: EQUAL
71625: IFFALSE 71637
// globalGameSaveCounter := p4 ;
71627: LD_ADDR_EXP 73
71631: PUSH
71632: LD_VAR 0 4
71636: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
71637: LD_VAR 0 3
71641: PUSH
71642: LD_INT 2
71644: EQUAL
71645: PUSH
71646: LD_EXP 73
71650: AND
71651: IFFALSE 71670
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71653: LD_STRING setGameSaveCounter(
71655: PUSH
71656: LD_EXP 73
71660: STR
71661: PUSH
71662: LD_STRING )
71664: STR
71665: PPUSH
71666: CALL_OW 559
// end ; end ;
71670: LD_VAR 0 7
71674: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
71675: LD_INT 0
71677: PPUSH
// streamModeActive := false ;
71678: LD_ADDR_EXP 74
71682: PUSH
71683: LD_INT 0
71685: ST_TO_ADDR
// normalCounter := 36 ;
71686: LD_ADDR_EXP 75
71690: PUSH
71691: LD_INT 36
71693: ST_TO_ADDR
// hardcoreCounter := 18 ;
71694: LD_ADDR_EXP 76
71698: PUSH
71699: LD_INT 18
71701: ST_TO_ADDR
// sRocket := false ;
71702: LD_ADDR_EXP 79
71706: PUSH
71707: LD_INT 0
71709: ST_TO_ADDR
// sSpeed := false ;
71710: LD_ADDR_EXP 78
71714: PUSH
71715: LD_INT 0
71717: ST_TO_ADDR
// sEngine := false ;
71718: LD_ADDR_EXP 80
71722: PUSH
71723: LD_INT 0
71725: ST_TO_ADDR
// sSpec := false ;
71726: LD_ADDR_EXP 77
71730: PUSH
71731: LD_INT 0
71733: ST_TO_ADDR
// sLevel := false ;
71734: LD_ADDR_EXP 81
71738: PUSH
71739: LD_INT 0
71741: ST_TO_ADDR
// sArmoury := false ;
71742: LD_ADDR_EXP 82
71746: PUSH
71747: LD_INT 0
71749: ST_TO_ADDR
// sRadar := false ;
71750: LD_ADDR_EXP 83
71754: PUSH
71755: LD_INT 0
71757: ST_TO_ADDR
// sBunker := false ;
71758: LD_ADDR_EXP 84
71762: PUSH
71763: LD_INT 0
71765: ST_TO_ADDR
// sHack := false ;
71766: LD_ADDR_EXP 85
71770: PUSH
71771: LD_INT 0
71773: ST_TO_ADDR
// sFire := false ;
71774: LD_ADDR_EXP 86
71778: PUSH
71779: LD_INT 0
71781: ST_TO_ADDR
// sRefresh := false ;
71782: LD_ADDR_EXP 87
71786: PUSH
71787: LD_INT 0
71789: ST_TO_ADDR
// sExp := false ;
71790: LD_ADDR_EXP 88
71794: PUSH
71795: LD_INT 0
71797: ST_TO_ADDR
// sDepot := false ;
71798: LD_ADDR_EXP 89
71802: PUSH
71803: LD_INT 0
71805: ST_TO_ADDR
// sFlag := false ;
71806: LD_ADDR_EXP 90
71810: PUSH
71811: LD_INT 0
71813: ST_TO_ADDR
// sKamikadze := false ;
71814: LD_ADDR_EXP 98
71818: PUSH
71819: LD_INT 0
71821: ST_TO_ADDR
// sTroll := false ;
71822: LD_ADDR_EXP 99
71826: PUSH
71827: LD_INT 0
71829: ST_TO_ADDR
// sSlow := false ;
71830: LD_ADDR_EXP 100
71834: PUSH
71835: LD_INT 0
71837: ST_TO_ADDR
// sLack := false ;
71838: LD_ADDR_EXP 101
71842: PUSH
71843: LD_INT 0
71845: ST_TO_ADDR
// sTank := false ;
71846: LD_ADDR_EXP 103
71850: PUSH
71851: LD_INT 0
71853: ST_TO_ADDR
// sRemote := false ;
71854: LD_ADDR_EXP 104
71858: PUSH
71859: LD_INT 0
71861: ST_TO_ADDR
// sPowell := false ;
71862: LD_ADDR_EXP 105
71866: PUSH
71867: LD_INT 0
71869: ST_TO_ADDR
// sTeleport := false ;
71870: LD_ADDR_EXP 108
71874: PUSH
71875: LD_INT 0
71877: ST_TO_ADDR
// sOilTower := false ;
71878: LD_ADDR_EXP 110
71882: PUSH
71883: LD_INT 0
71885: ST_TO_ADDR
// sShovel := false ;
71886: LD_ADDR_EXP 111
71890: PUSH
71891: LD_INT 0
71893: ST_TO_ADDR
// sSheik := false ;
71894: LD_ADDR_EXP 112
71898: PUSH
71899: LD_INT 0
71901: ST_TO_ADDR
// sEarthquake := false ;
71902: LD_ADDR_EXP 114
71906: PUSH
71907: LD_INT 0
71909: ST_TO_ADDR
// sAI := false ;
71910: LD_ADDR_EXP 115
71914: PUSH
71915: LD_INT 0
71917: ST_TO_ADDR
// sCargo := false ;
71918: LD_ADDR_EXP 118
71922: PUSH
71923: LD_INT 0
71925: ST_TO_ADDR
// sDLaser := false ;
71926: LD_ADDR_EXP 119
71930: PUSH
71931: LD_INT 0
71933: ST_TO_ADDR
// sExchange := false ;
71934: LD_ADDR_EXP 120
71938: PUSH
71939: LD_INT 0
71941: ST_TO_ADDR
// sFac := false ;
71942: LD_ADDR_EXP 121
71946: PUSH
71947: LD_INT 0
71949: ST_TO_ADDR
// sPower := false ;
71950: LD_ADDR_EXP 122
71954: PUSH
71955: LD_INT 0
71957: ST_TO_ADDR
// sRandom := false ;
71958: LD_ADDR_EXP 123
71962: PUSH
71963: LD_INT 0
71965: ST_TO_ADDR
// sShield := false ;
71966: LD_ADDR_EXP 124
71970: PUSH
71971: LD_INT 0
71973: ST_TO_ADDR
// sTime := false ;
71974: LD_ADDR_EXP 125
71978: PUSH
71979: LD_INT 0
71981: ST_TO_ADDR
// sTools := false ;
71982: LD_ADDR_EXP 126
71986: PUSH
71987: LD_INT 0
71989: ST_TO_ADDR
// sSold := false ;
71990: LD_ADDR_EXP 91
71994: PUSH
71995: LD_INT 0
71997: ST_TO_ADDR
// sDiff := false ;
71998: LD_ADDR_EXP 92
72002: PUSH
72003: LD_INT 0
72005: ST_TO_ADDR
// sFog := false ;
72006: LD_ADDR_EXP 95
72010: PUSH
72011: LD_INT 0
72013: ST_TO_ADDR
// sReset := false ;
72014: LD_ADDR_EXP 96
72018: PUSH
72019: LD_INT 0
72021: ST_TO_ADDR
// sSun := false ;
72022: LD_ADDR_EXP 97
72026: PUSH
72027: LD_INT 0
72029: ST_TO_ADDR
// sTiger := false ;
72030: LD_ADDR_EXP 93
72034: PUSH
72035: LD_INT 0
72037: ST_TO_ADDR
// sBomb := false ;
72038: LD_ADDR_EXP 94
72042: PUSH
72043: LD_INT 0
72045: ST_TO_ADDR
// sWound := false ;
72046: LD_ADDR_EXP 102
72050: PUSH
72051: LD_INT 0
72053: ST_TO_ADDR
// sBetray := false ;
72054: LD_ADDR_EXP 106
72058: PUSH
72059: LD_INT 0
72061: ST_TO_ADDR
// sContamin := false ;
72062: LD_ADDR_EXP 107
72066: PUSH
72067: LD_INT 0
72069: ST_TO_ADDR
// sOil := false ;
72070: LD_ADDR_EXP 109
72074: PUSH
72075: LD_INT 0
72077: ST_TO_ADDR
// sStu := false ;
72078: LD_ADDR_EXP 113
72082: PUSH
72083: LD_INT 0
72085: ST_TO_ADDR
// sBazooka := false ;
72086: LD_ADDR_EXP 116
72090: PUSH
72091: LD_INT 0
72093: ST_TO_ADDR
// sMortar := false ;
72094: LD_ADDR_EXP 117
72098: PUSH
72099: LD_INT 0
72101: ST_TO_ADDR
// sRanger := false ;
72102: LD_ADDR_EXP 127
72106: PUSH
72107: LD_INT 0
72109: ST_TO_ADDR
// sComputer := false ;
72110: LD_ADDR_EXP 128
72114: PUSH
72115: LD_INT 0
72117: ST_TO_ADDR
// s30 := false ;
72118: LD_ADDR_EXP 129
72122: PUSH
72123: LD_INT 0
72125: ST_TO_ADDR
// s60 := false ;
72126: LD_ADDR_EXP 130
72130: PUSH
72131: LD_INT 0
72133: ST_TO_ADDR
// end ;
72134: LD_VAR 0 1
72138: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72139: LD_INT 0
72141: PPUSH
72142: PPUSH
72143: PPUSH
72144: PPUSH
72145: PPUSH
72146: PPUSH
72147: PPUSH
// result := [ ] ;
72148: LD_ADDR_VAR 0 2
72152: PUSH
72153: EMPTY
72154: ST_TO_ADDR
// if campaign_id = 1 then
72155: LD_OWVAR 69
72159: PUSH
72160: LD_INT 1
72162: EQUAL
72163: IFFALSE 75329
// begin case mission_number of 1 :
72165: LD_OWVAR 70
72169: PUSH
72170: LD_INT 1
72172: DOUBLE
72173: EQUAL
72174: IFTRUE 72178
72176: GO 72254
72178: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72179: LD_ADDR_VAR 0 2
72183: PUSH
72184: LD_INT 2
72186: PUSH
72187: LD_INT 4
72189: PUSH
72190: LD_INT 11
72192: PUSH
72193: LD_INT 12
72195: PUSH
72196: LD_INT 15
72198: PUSH
72199: LD_INT 16
72201: PUSH
72202: LD_INT 22
72204: PUSH
72205: LD_INT 23
72207: PUSH
72208: LD_INT 26
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 101
72224: PUSH
72225: LD_INT 102
72227: PUSH
72228: LD_INT 106
72230: PUSH
72231: LD_INT 116
72233: PUSH
72234: LD_INT 117
72236: PUSH
72237: LD_INT 118
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: ST_TO_ADDR
72252: GO 75327
72254: LD_INT 2
72256: DOUBLE
72257: EQUAL
72258: IFTRUE 72262
72260: GO 72346
72262: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72263: LD_ADDR_VAR 0 2
72267: PUSH
72268: LD_INT 2
72270: PUSH
72271: LD_INT 4
72273: PUSH
72274: LD_INT 11
72276: PUSH
72277: LD_INT 12
72279: PUSH
72280: LD_INT 15
72282: PUSH
72283: LD_INT 16
72285: PUSH
72286: LD_INT 22
72288: PUSH
72289: LD_INT 23
72291: PUSH
72292: LD_INT 26
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 101
72308: PUSH
72309: LD_INT 102
72311: PUSH
72312: LD_INT 105
72314: PUSH
72315: LD_INT 106
72317: PUSH
72318: LD_INT 108
72320: PUSH
72321: LD_INT 116
72323: PUSH
72324: LD_INT 117
72326: PUSH
72327: LD_INT 118
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: ST_TO_ADDR
72344: GO 75327
72346: LD_INT 3
72348: DOUBLE
72349: EQUAL
72350: IFTRUE 72354
72352: GO 72442
72354: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72355: LD_ADDR_VAR 0 2
72359: PUSH
72360: LD_INT 2
72362: PUSH
72363: LD_INT 4
72365: PUSH
72366: LD_INT 5
72368: PUSH
72369: LD_INT 11
72371: PUSH
72372: LD_INT 12
72374: PUSH
72375: LD_INT 15
72377: PUSH
72378: LD_INT 16
72380: PUSH
72381: LD_INT 22
72383: PUSH
72384: LD_INT 26
72386: PUSH
72387: LD_INT 36
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 101
72404: PUSH
72405: LD_INT 102
72407: PUSH
72408: LD_INT 105
72410: PUSH
72411: LD_INT 106
72413: PUSH
72414: LD_INT 108
72416: PUSH
72417: LD_INT 116
72419: PUSH
72420: LD_INT 117
72422: PUSH
72423: LD_INT 118
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: ST_TO_ADDR
72440: GO 75327
72442: LD_INT 4
72444: DOUBLE
72445: EQUAL
72446: IFTRUE 72450
72448: GO 72546
72450: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
72451: LD_ADDR_VAR 0 2
72455: PUSH
72456: LD_INT 2
72458: PUSH
72459: LD_INT 4
72461: PUSH
72462: LD_INT 5
72464: PUSH
72465: LD_INT 8
72467: PUSH
72468: LD_INT 11
72470: PUSH
72471: LD_INT 12
72473: PUSH
72474: LD_INT 15
72476: PUSH
72477: LD_INT 16
72479: PUSH
72480: LD_INT 22
72482: PUSH
72483: LD_INT 23
72485: PUSH
72486: LD_INT 26
72488: PUSH
72489: LD_INT 36
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 101
72508: PUSH
72509: LD_INT 102
72511: PUSH
72512: LD_INT 105
72514: PUSH
72515: LD_INT 106
72517: PUSH
72518: LD_INT 108
72520: PUSH
72521: LD_INT 116
72523: PUSH
72524: LD_INT 117
72526: PUSH
72527: LD_INT 118
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: ST_TO_ADDR
72544: GO 75327
72546: LD_INT 5
72548: DOUBLE
72549: EQUAL
72550: IFTRUE 72554
72552: GO 72666
72554: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
72555: LD_ADDR_VAR 0 2
72559: PUSH
72560: LD_INT 2
72562: PUSH
72563: LD_INT 4
72565: PUSH
72566: LD_INT 5
72568: PUSH
72569: LD_INT 6
72571: PUSH
72572: LD_INT 8
72574: PUSH
72575: LD_INT 11
72577: PUSH
72578: LD_INT 12
72580: PUSH
72581: LD_INT 15
72583: PUSH
72584: LD_INT 16
72586: PUSH
72587: LD_INT 22
72589: PUSH
72590: LD_INT 23
72592: PUSH
72593: LD_INT 25
72595: PUSH
72596: LD_INT 26
72598: PUSH
72599: LD_INT 36
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 101
72620: PUSH
72621: LD_INT 102
72623: PUSH
72624: LD_INT 105
72626: PUSH
72627: LD_INT 106
72629: PUSH
72630: LD_INT 108
72632: PUSH
72633: LD_INT 109
72635: PUSH
72636: LD_INT 112
72638: PUSH
72639: LD_INT 116
72641: PUSH
72642: LD_INT 117
72644: PUSH
72645: LD_INT 118
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: ST_TO_ADDR
72664: GO 75327
72666: LD_INT 6
72668: DOUBLE
72669: EQUAL
72670: IFTRUE 72674
72672: GO 72806
72674: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
72675: LD_ADDR_VAR 0 2
72679: PUSH
72680: LD_INT 2
72682: PUSH
72683: LD_INT 4
72685: PUSH
72686: LD_INT 5
72688: PUSH
72689: LD_INT 6
72691: PUSH
72692: LD_INT 8
72694: PUSH
72695: LD_INT 11
72697: PUSH
72698: LD_INT 12
72700: PUSH
72701: LD_INT 15
72703: PUSH
72704: LD_INT 16
72706: PUSH
72707: LD_INT 20
72709: PUSH
72710: LD_INT 21
72712: PUSH
72713: LD_INT 22
72715: PUSH
72716: LD_INT 23
72718: PUSH
72719: LD_INT 25
72721: PUSH
72722: LD_INT 26
72724: PUSH
72725: LD_INT 30
72727: PUSH
72728: LD_INT 31
72730: PUSH
72731: LD_INT 32
72733: PUSH
72734: LD_INT 36
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 101
72760: PUSH
72761: LD_INT 102
72763: PUSH
72764: LD_INT 105
72766: PUSH
72767: LD_INT 106
72769: PUSH
72770: LD_INT 108
72772: PUSH
72773: LD_INT 109
72775: PUSH
72776: LD_INT 112
72778: PUSH
72779: LD_INT 116
72781: PUSH
72782: LD_INT 117
72784: PUSH
72785: LD_INT 118
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: ST_TO_ADDR
72804: GO 75327
72806: LD_INT 7
72808: DOUBLE
72809: EQUAL
72810: IFTRUE 72814
72812: GO 72926
72814: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
72815: LD_ADDR_VAR 0 2
72819: PUSH
72820: LD_INT 2
72822: PUSH
72823: LD_INT 4
72825: PUSH
72826: LD_INT 5
72828: PUSH
72829: LD_INT 7
72831: PUSH
72832: LD_INT 11
72834: PUSH
72835: LD_INT 12
72837: PUSH
72838: LD_INT 15
72840: PUSH
72841: LD_INT 16
72843: PUSH
72844: LD_INT 20
72846: PUSH
72847: LD_INT 21
72849: PUSH
72850: LD_INT 22
72852: PUSH
72853: LD_INT 23
72855: PUSH
72856: LD_INT 25
72858: PUSH
72859: LD_INT 26
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 101
72880: PUSH
72881: LD_INT 102
72883: PUSH
72884: LD_INT 103
72886: PUSH
72887: LD_INT 105
72889: PUSH
72890: LD_INT 106
72892: PUSH
72893: LD_INT 108
72895: PUSH
72896: LD_INT 112
72898: PUSH
72899: LD_INT 116
72901: PUSH
72902: LD_INT 117
72904: PUSH
72905: LD_INT 118
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: ST_TO_ADDR
72924: GO 75327
72926: LD_INT 8
72928: DOUBLE
72929: EQUAL
72930: IFTRUE 72934
72932: GO 73074
72934: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
72935: LD_ADDR_VAR 0 2
72939: PUSH
72940: LD_INT 2
72942: PUSH
72943: LD_INT 4
72945: PUSH
72946: LD_INT 5
72948: PUSH
72949: LD_INT 6
72951: PUSH
72952: LD_INT 7
72954: PUSH
72955: LD_INT 8
72957: PUSH
72958: LD_INT 11
72960: PUSH
72961: LD_INT 12
72963: PUSH
72964: LD_INT 15
72966: PUSH
72967: LD_INT 16
72969: PUSH
72970: LD_INT 20
72972: PUSH
72973: LD_INT 21
72975: PUSH
72976: LD_INT 22
72978: PUSH
72979: LD_INT 23
72981: PUSH
72982: LD_INT 25
72984: PUSH
72985: LD_INT 26
72987: PUSH
72988: LD_INT 30
72990: PUSH
72991: LD_INT 31
72993: PUSH
72994: LD_INT 32
72996: PUSH
72997: LD_INT 36
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 101
73024: PUSH
73025: LD_INT 102
73027: PUSH
73028: LD_INT 103
73030: PUSH
73031: LD_INT 105
73033: PUSH
73034: LD_INT 106
73036: PUSH
73037: LD_INT 108
73039: PUSH
73040: LD_INT 109
73042: PUSH
73043: LD_INT 112
73045: PUSH
73046: LD_INT 116
73048: PUSH
73049: LD_INT 117
73051: PUSH
73052: LD_INT 118
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: ST_TO_ADDR
73072: GO 75327
73074: LD_INT 9
73076: DOUBLE
73077: EQUAL
73078: IFTRUE 73082
73080: GO 73230
73082: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73083: LD_ADDR_VAR 0 2
73087: PUSH
73088: LD_INT 2
73090: PUSH
73091: LD_INT 4
73093: PUSH
73094: LD_INT 5
73096: PUSH
73097: LD_INT 6
73099: PUSH
73100: LD_INT 7
73102: PUSH
73103: LD_INT 8
73105: PUSH
73106: LD_INT 11
73108: PUSH
73109: LD_INT 12
73111: PUSH
73112: LD_INT 15
73114: PUSH
73115: LD_INT 16
73117: PUSH
73118: LD_INT 20
73120: PUSH
73121: LD_INT 21
73123: PUSH
73124: LD_INT 22
73126: PUSH
73127: LD_INT 23
73129: PUSH
73130: LD_INT 25
73132: PUSH
73133: LD_INT 26
73135: PUSH
73136: LD_INT 28
73138: PUSH
73139: LD_INT 30
73141: PUSH
73142: LD_INT 31
73144: PUSH
73145: LD_INT 32
73147: PUSH
73148: LD_INT 36
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 101
73176: PUSH
73177: LD_INT 102
73179: PUSH
73180: LD_INT 103
73182: PUSH
73183: LD_INT 105
73185: PUSH
73186: LD_INT 106
73188: PUSH
73189: LD_INT 108
73191: PUSH
73192: LD_INT 109
73194: PUSH
73195: LD_INT 112
73197: PUSH
73198: LD_INT 114
73200: PUSH
73201: LD_INT 116
73203: PUSH
73204: LD_INT 117
73206: PUSH
73207: LD_INT 118
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: ST_TO_ADDR
73228: GO 75327
73230: LD_INT 10
73232: DOUBLE
73233: EQUAL
73234: IFTRUE 73238
73236: GO 73434
73238: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73239: LD_ADDR_VAR 0 2
73243: PUSH
73244: LD_INT 2
73246: PUSH
73247: LD_INT 4
73249: PUSH
73250: LD_INT 5
73252: PUSH
73253: LD_INT 6
73255: PUSH
73256: LD_INT 7
73258: PUSH
73259: LD_INT 8
73261: PUSH
73262: LD_INT 9
73264: PUSH
73265: LD_INT 10
73267: PUSH
73268: LD_INT 11
73270: PUSH
73271: LD_INT 12
73273: PUSH
73274: LD_INT 13
73276: PUSH
73277: LD_INT 14
73279: PUSH
73280: LD_INT 15
73282: PUSH
73283: LD_INT 16
73285: PUSH
73286: LD_INT 17
73288: PUSH
73289: LD_INT 18
73291: PUSH
73292: LD_INT 19
73294: PUSH
73295: LD_INT 20
73297: PUSH
73298: LD_INT 21
73300: PUSH
73301: LD_INT 22
73303: PUSH
73304: LD_INT 23
73306: PUSH
73307: LD_INT 24
73309: PUSH
73310: LD_INT 25
73312: PUSH
73313: LD_INT 26
73315: PUSH
73316: LD_INT 28
73318: PUSH
73319: LD_INT 30
73321: PUSH
73322: LD_INT 31
73324: PUSH
73325: LD_INT 32
73327: PUSH
73328: LD_INT 36
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: PUSH
73362: LD_INT 101
73364: PUSH
73365: LD_INT 102
73367: PUSH
73368: LD_INT 103
73370: PUSH
73371: LD_INT 104
73373: PUSH
73374: LD_INT 105
73376: PUSH
73377: LD_INT 106
73379: PUSH
73380: LD_INT 107
73382: PUSH
73383: LD_INT 108
73385: PUSH
73386: LD_INT 109
73388: PUSH
73389: LD_INT 110
73391: PUSH
73392: LD_INT 111
73394: PUSH
73395: LD_INT 112
73397: PUSH
73398: LD_INT 114
73400: PUSH
73401: LD_INT 116
73403: PUSH
73404: LD_INT 117
73406: PUSH
73407: LD_INT 118
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: ST_TO_ADDR
73432: GO 75327
73434: LD_INT 11
73436: DOUBLE
73437: EQUAL
73438: IFTRUE 73442
73440: GO 73646
73442: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
73443: LD_ADDR_VAR 0 2
73447: PUSH
73448: LD_INT 2
73450: PUSH
73451: LD_INT 3
73453: PUSH
73454: LD_INT 4
73456: PUSH
73457: LD_INT 5
73459: PUSH
73460: LD_INT 6
73462: PUSH
73463: LD_INT 7
73465: PUSH
73466: LD_INT 8
73468: PUSH
73469: LD_INT 9
73471: PUSH
73472: LD_INT 10
73474: PUSH
73475: LD_INT 11
73477: PUSH
73478: LD_INT 12
73480: PUSH
73481: LD_INT 13
73483: PUSH
73484: LD_INT 14
73486: PUSH
73487: LD_INT 15
73489: PUSH
73490: LD_INT 16
73492: PUSH
73493: LD_INT 17
73495: PUSH
73496: LD_INT 18
73498: PUSH
73499: LD_INT 19
73501: PUSH
73502: LD_INT 20
73504: PUSH
73505: LD_INT 21
73507: PUSH
73508: LD_INT 22
73510: PUSH
73511: LD_INT 23
73513: PUSH
73514: LD_INT 24
73516: PUSH
73517: LD_INT 25
73519: PUSH
73520: LD_INT 26
73522: PUSH
73523: LD_INT 28
73525: PUSH
73526: LD_INT 30
73528: PUSH
73529: LD_INT 31
73531: PUSH
73532: LD_INT 32
73534: PUSH
73535: LD_INT 34
73537: PUSH
73538: LD_INT 36
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 101
73576: PUSH
73577: LD_INT 102
73579: PUSH
73580: LD_INT 103
73582: PUSH
73583: LD_INT 104
73585: PUSH
73586: LD_INT 105
73588: PUSH
73589: LD_INT 106
73591: PUSH
73592: LD_INT 107
73594: PUSH
73595: LD_INT 108
73597: PUSH
73598: LD_INT 109
73600: PUSH
73601: LD_INT 110
73603: PUSH
73604: LD_INT 111
73606: PUSH
73607: LD_INT 112
73609: PUSH
73610: LD_INT 114
73612: PUSH
73613: LD_INT 116
73615: PUSH
73616: LD_INT 117
73618: PUSH
73619: LD_INT 118
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: ST_TO_ADDR
73644: GO 75327
73646: LD_INT 12
73648: DOUBLE
73649: EQUAL
73650: IFTRUE 73654
73652: GO 73874
73654: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
73655: LD_ADDR_VAR 0 2
73659: PUSH
73660: LD_INT 1
73662: PUSH
73663: LD_INT 2
73665: PUSH
73666: LD_INT 3
73668: PUSH
73669: LD_INT 4
73671: PUSH
73672: LD_INT 5
73674: PUSH
73675: LD_INT 6
73677: PUSH
73678: LD_INT 7
73680: PUSH
73681: LD_INT 8
73683: PUSH
73684: LD_INT 9
73686: PUSH
73687: LD_INT 10
73689: PUSH
73690: LD_INT 11
73692: PUSH
73693: LD_INT 12
73695: PUSH
73696: LD_INT 13
73698: PUSH
73699: LD_INT 14
73701: PUSH
73702: LD_INT 15
73704: PUSH
73705: LD_INT 16
73707: PUSH
73708: LD_INT 17
73710: PUSH
73711: LD_INT 18
73713: PUSH
73714: LD_INT 19
73716: PUSH
73717: LD_INT 20
73719: PUSH
73720: LD_INT 21
73722: PUSH
73723: LD_INT 22
73725: PUSH
73726: LD_INT 23
73728: PUSH
73729: LD_INT 24
73731: PUSH
73732: LD_INT 25
73734: PUSH
73735: LD_INT 26
73737: PUSH
73738: LD_INT 27
73740: PUSH
73741: LD_INT 28
73743: PUSH
73744: LD_INT 30
73746: PUSH
73747: LD_INT 31
73749: PUSH
73750: LD_INT 32
73752: PUSH
73753: LD_INT 33
73755: PUSH
73756: LD_INT 34
73758: PUSH
73759: LD_INT 36
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: PUSH
73798: LD_INT 101
73800: PUSH
73801: LD_INT 102
73803: PUSH
73804: LD_INT 103
73806: PUSH
73807: LD_INT 104
73809: PUSH
73810: LD_INT 105
73812: PUSH
73813: LD_INT 106
73815: PUSH
73816: LD_INT 107
73818: PUSH
73819: LD_INT 108
73821: PUSH
73822: LD_INT 109
73824: PUSH
73825: LD_INT 110
73827: PUSH
73828: LD_INT 111
73830: PUSH
73831: LD_INT 112
73833: PUSH
73834: LD_INT 113
73836: PUSH
73837: LD_INT 114
73839: PUSH
73840: LD_INT 116
73842: PUSH
73843: LD_INT 117
73845: PUSH
73846: LD_INT 118
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: ST_TO_ADDR
73872: GO 75327
73874: LD_INT 13
73876: DOUBLE
73877: EQUAL
73878: IFTRUE 73882
73880: GO 74090
73882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
73883: LD_ADDR_VAR 0 2
73887: PUSH
73888: LD_INT 1
73890: PUSH
73891: LD_INT 2
73893: PUSH
73894: LD_INT 3
73896: PUSH
73897: LD_INT 4
73899: PUSH
73900: LD_INT 5
73902: PUSH
73903: LD_INT 8
73905: PUSH
73906: LD_INT 9
73908: PUSH
73909: LD_INT 10
73911: PUSH
73912: LD_INT 11
73914: PUSH
73915: LD_INT 12
73917: PUSH
73918: LD_INT 14
73920: PUSH
73921: LD_INT 15
73923: PUSH
73924: LD_INT 16
73926: PUSH
73927: LD_INT 17
73929: PUSH
73930: LD_INT 18
73932: PUSH
73933: LD_INT 19
73935: PUSH
73936: LD_INT 20
73938: PUSH
73939: LD_INT 21
73941: PUSH
73942: LD_INT 22
73944: PUSH
73945: LD_INT 23
73947: PUSH
73948: LD_INT 24
73950: PUSH
73951: LD_INT 25
73953: PUSH
73954: LD_INT 26
73956: PUSH
73957: LD_INT 27
73959: PUSH
73960: LD_INT 28
73962: PUSH
73963: LD_INT 30
73965: PUSH
73966: LD_INT 31
73968: PUSH
73969: LD_INT 32
73971: PUSH
73972: LD_INT 33
73974: PUSH
73975: LD_INT 34
73977: PUSH
73978: LD_INT 36
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 101
74016: PUSH
74017: LD_INT 102
74019: PUSH
74020: LD_INT 103
74022: PUSH
74023: LD_INT 104
74025: PUSH
74026: LD_INT 105
74028: PUSH
74029: LD_INT 106
74031: PUSH
74032: LD_INT 107
74034: PUSH
74035: LD_INT 108
74037: PUSH
74038: LD_INT 109
74040: PUSH
74041: LD_INT 110
74043: PUSH
74044: LD_INT 111
74046: PUSH
74047: LD_INT 112
74049: PUSH
74050: LD_INT 113
74052: PUSH
74053: LD_INT 114
74055: PUSH
74056: LD_INT 116
74058: PUSH
74059: LD_INT 117
74061: PUSH
74062: LD_INT 118
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: ST_TO_ADDR
74088: GO 75327
74090: LD_INT 14
74092: DOUBLE
74093: EQUAL
74094: IFTRUE 74098
74096: GO 74322
74098: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74099: LD_ADDR_VAR 0 2
74103: PUSH
74104: LD_INT 1
74106: PUSH
74107: LD_INT 2
74109: PUSH
74110: LD_INT 3
74112: PUSH
74113: LD_INT 4
74115: PUSH
74116: LD_INT 5
74118: PUSH
74119: LD_INT 6
74121: PUSH
74122: LD_INT 7
74124: PUSH
74125: LD_INT 8
74127: PUSH
74128: LD_INT 9
74130: PUSH
74131: LD_INT 10
74133: PUSH
74134: LD_INT 11
74136: PUSH
74137: LD_INT 12
74139: PUSH
74140: LD_INT 13
74142: PUSH
74143: LD_INT 14
74145: PUSH
74146: LD_INT 15
74148: PUSH
74149: LD_INT 16
74151: PUSH
74152: LD_INT 17
74154: PUSH
74155: LD_INT 18
74157: PUSH
74158: LD_INT 19
74160: PUSH
74161: LD_INT 20
74163: PUSH
74164: LD_INT 21
74166: PUSH
74167: LD_INT 22
74169: PUSH
74170: LD_INT 23
74172: PUSH
74173: LD_INT 24
74175: PUSH
74176: LD_INT 25
74178: PUSH
74179: LD_INT 26
74181: PUSH
74182: LD_INT 27
74184: PUSH
74185: LD_INT 28
74187: PUSH
74188: LD_INT 29
74190: PUSH
74191: LD_INT 30
74193: PUSH
74194: LD_INT 31
74196: PUSH
74197: LD_INT 32
74199: PUSH
74200: LD_INT 33
74202: PUSH
74203: LD_INT 34
74205: PUSH
74206: LD_INT 36
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 101
74248: PUSH
74249: LD_INT 102
74251: PUSH
74252: LD_INT 103
74254: PUSH
74255: LD_INT 104
74257: PUSH
74258: LD_INT 105
74260: PUSH
74261: LD_INT 106
74263: PUSH
74264: LD_INT 107
74266: PUSH
74267: LD_INT 108
74269: PUSH
74270: LD_INT 109
74272: PUSH
74273: LD_INT 110
74275: PUSH
74276: LD_INT 111
74278: PUSH
74279: LD_INT 112
74281: PUSH
74282: LD_INT 113
74284: PUSH
74285: LD_INT 114
74287: PUSH
74288: LD_INT 116
74290: PUSH
74291: LD_INT 117
74293: PUSH
74294: LD_INT 118
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: ST_TO_ADDR
74320: GO 75327
74322: LD_INT 15
74324: DOUBLE
74325: EQUAL
74326: IFTRUE 74330
74328: GO 74554
74330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74331: LD_ADDR_VAR 0 2
74335: PUSH
74336: LD_INT 1
74338: PUSH
74339: LD_INT 2
74341: PUSH
74342: LD_INT 3
74344: PUSH
74345: LD_INT 4
74347: PUSH
74348: LD_INT 5
74350: PUSH
74351: LD_INT 6
74353: PUSH
74354: LD_INT 7
74356: PUSH
74357: LD_INT 8
74359: PUSH
74360: LD_INT 9
74362: PUSH
74363: LD_INT 10
74365: PUSH
74366: LD_INT 11
74368: PUSH
74369: LD_INT 12
74371: PUSH
74372: LD_INT 13
74374: PUSH
74375: LD_INT 14
74377: PUSH
74378: LD_INT 15
74380: PUSH
74381: LD_INT 16
74383: PUSH
74384: LD_INT 17
74386: PUSH
74387: LD_INT 18
74389: PUSH
74390: LD_INT 19
74392: PUSH
74393: LD_INT 20
74395: PUSH
74396: LD_INT 21
74398: PUSH
74399: LD_INT 22
74401: PUSH
74402: LD_INT 23
74404: PUSH
74405: LD_INT 24
74407: PUSH
74408: LD_INT 25
74410: PUSH
74411: LD_INT 26
74413: PUSH
74414: LD_INT 27
74416: PUSH
74417: LD_INT 28
74419: PUSH
74420: LD_INT 29
74422: PUSH
74423: LD_INT 30
74425: PUSH
74426: LD_INT 31
74428: PUSH
74429: LD_INT 32
74431: PUSH
74432: LD_INT 33
74434: PUSH
74435: LD_INT 34
74437: PUSH
74438: LD_INT 36
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: PUSH
74478: LD_INT 101
74480: PUSH
74481: LD_INT 102
74483: PUSH
74484: LD_INT 103
74486: PUSH
74487: LD_INT 104
74489: PUSH
74490: LD_INT 105
74492: PUSH
74493: LD_INT 106
74495: PUSH
74496: LD_INT 107
74498: PUSH
74499: LD_INT 108
74501: PUSH
74502: LD_INT 109
74504: PUSH
74505: LD_INT 110
74507: PUSH
74508: LD_INT 111
74510: PUSH
74511: LD_INT 112
74513: PUSH
74514: LD_INT 113
74516: PUSH
74517: LD_INT 114
74519: PUSH
74520: LD_INT 116
74522: PUSH
74523: LD_INT 117
74525: PUSH
74526: LD_INT 118
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: ST_TO_ADDR
74552: GO 75327
74554: LD_INT 16
74556: DOUBLE
74557: EQUAL
74558: IFTRUE 74562
74560: GO 74698
74562: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
74563: LD_ADDR_VAR 0 2
74567: PUSH
74568: LD_INT 2
74570: PUSH
74571: LD_INT 4
74573: PUSH
74574: LD_INT 5
74576: PUSH
74577: LD_INT 7
74579: PUSH
74580: LD_INT 11
74582: PUSH
74583: LD_INT 12
74585: PUSH
74586: LD_INT 15
74588: PUSH
74589: LD_INT 16
74591: PUSH
74592: LD_INT 20
74594: PUSH
74595: LD_INT 21
74597: PUSH
74598: LD_INT 22
74600: PUSH
74601: LD_INT 23
74603: PUSH
74604: LD_INT 25
74606: PUSH
74607: LD_INT 26
74609: PUSH
74610: LD_INT 30
74612: PUSH
74613: LD_INT 31
74615: PUSH
74616: LD_INT 32
74618: PUSH
74619: LD_INT 33
74621: PUSH
74622: LD_INT 34
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: PUSH
74646: LD_INT 101
74648: PUSH
74649: LD_INT 102
74651: PUSH
74652: LD_INT 103
74654: PUSH
74655: LD_INT 106
74657: PUSH
74658: LD_INT 108
74660: PUSH
74661: LD_INT 112
74663: PUSH
74664: LD_INT 113
74666: PUSH
74667: LD_INT 114
74669: PUSH
74670: LD_INT 116
74672: PUSH
74673: LD_INT 117
74675: PUSH
74676: LD_INT 118
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: ST_TO_ADDR
74696: GO 75327
74698: LD_INT 17
74700: DOUBLE
74701: EQUAL
74702: IFTRUE 74706
74704: GO 74930
74706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
74707: LD_ADDR_VAR 0 2
74711: PUSH
74712: LD_INT 1
74714: PUSH
74715: LD_INT 2
74717: PUSH
74718: LD_INT 3
74720: PUSH
74721: LD_INT 4
74723: PUSH
74724: LD_INT 5
74726: PUSH
74727: LD_INT 6
74729: PUSH
74730: LD_INT 7
74732: PUSH
74733: LD_INT 8
74735: PUSH
74736: LD_INT 9
74738: PUSH
74739: LD_INT 10
74741: PUSH
74742: LD_INT 11
74744: PUSH
74745: LD_INT 12
74747: PUSH
74748: LD_INT 13
74750: PUSH
74751: LD_INT 14
74753: PUSH
74754: LD_INT 15
74756: PUSH
74757: LD_INT 16
74759: PUSH
74760: LD_INT 17
74762: PUSH
74763: LD_INT 18
74765: PUSH
74766: LD_INT 19
74768: PUSH
74769: LD_INT 20
74771: PUSH
74772: LD_INT 21
74774: PUSH
74775: LD_INT 22
74777: PUSH
74778: LD_INT 23
74780: PUSH
74781: LD_INT 24
74783: PUSH
74784: LD_INT 25
74786: PUSH
74787: LD_INT 26
74789: PUSH
74790: LD_INT 27
74792: PUSH
74793: LD_INT 28
74795: PUSH
74796: LD_INT 29
74798: PUSH
74799: LD_INT 30
74801: PUSH
74802: LD_INT 31
74804: PUSH
74805: LD_INT 32
74807: PUSH
74808: LD_INT 33
74810: PUSH
74811: LD_INT 34
74813: PUSH
74814: LD_INT 36
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: PUSH
74854: LD_INT 101
74856: PUSH
74857: LD_INT 102
74859: PUSH
74860: LD_INT 103
74862: PUSH
74863: LD_INT 104
74865: PUSH
74866: LD_INT 105
74868: PUSH
74869: LD_INT 106
74871: PUSH
74872: LD_INT 107
74874: PUSH
74875: LD_INT 108
74877: PUSH
74878: LD_INT 109
74880: PUSH
74881: LD_INT 110
74883: PUSH
74884: LD_INT 111
74886: PUSH
74887: LD_INT 112
74889: PUSH
74890: LD_INT 113
74892: PUSH
74893: LD_INT 114
74895: PUSH
74896: LD_INT 116
74898: PUSH
74899: LD_INT 117
74901: PUSH
74902: LD_INT 118
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: ST_TO_ADDR
74928: GO 75327
74930: LD_INT 18
74932: DOUBLE
74933: EQUAL
74934: IFTRUE 74938
74936: GO 75086
74938: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
74939: LD_ADDR_VAR 0 2
74943: PUSH
74944: LD_INT 2
74946: PUSH
74947: LD_INT 4
74949: PUSH
74950: LD_INT 5
74952: PUSH
74953: LD_INT 7
74955: PUSH
74956: LD_INT 11
74958: PUSH
74959: LD_INT 12
74961: PUSH
74962: LD_INT 15
74964: PUSH
74965: LD_INT 16
74967: PUSH
74968: LD_INT 20
74970: PUSH
74971: LD_INT 21
74973: PUSH
74974: LD_INT 22
74976: PUSH
74977: LD_INT 23
74979: PUSH
74980: LD_INT 25
74982: PUSH
74983: LD_INT 26
74985: PUSH
74986: LD_INT 30
74988: PUSH
74989: LD_INT 31
74991: PUSH
74992: LD_INT 32
74994: PUSH
74995: LD_INT 33
74997: PUSH
74998: LD_INT 34
75000: PUSH
75001: LD_INT 35
75003: PUSH
75004: LD_INT 36
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 101
75032: PUSH
75033: LD_INT 102
75035: PUSH
75036: LD_INT 103
75038: PUSH
75039: LD_INT 106
75041: PUSH
75042: LD_INT 108
75044: PUSH
75045: LD_INT 112
75047: PUSH
75048: LD_INT 113
75050: PUSH
75051: LD_INT 114
75053: PUSH
75054: LD_INT 115
75056: PUSH
75057: LD_INT 116
75059: PUSH
75060: LD_INT 117
75062: PUSH
75063: LD_INT 118
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: ST_TO_ADDR
75084: GO 75327
75086: LD_INT 19
75088: DOUBLE
75089: EQUAL
75090: IFTRUE 75094
75092: GO 75326
75094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75095: LD_ADDR_VAR 0 2
75099: PUSH
75100: LD_INT 1
75102: PUSH
75103: LD_INT 2
75105: PUSH
75106: LD_INT 3
75108: PUSH
75109: LD_INT 4
75111: PUSH
75112: LD_INT 5
75114: PUSH
75115: LD_INT 6
75117: PUSH
75118: LD_INT 7
75120: PUSH
75121: LD_INT 8
75123: PUSH
75124: LD_INT 9
75126: PUSH
75127: LD_INT 10
75129: PUSH
75130: LD_INT 11
75132: PUSH
75133: LD_INT 12
75135: PUSH
75136: LD_INT 13
75138: PUSH
75139: LD_INT 14
75141: PUSH
75142: LD_INT 15
75144: PUSH
75145: LD_INT 16
75147: PUSH
75148: LD_INT 17
75150: PUSH
75151: LD_INT 18
75153: PUSH
75154: LD_INT 19
75156: PUSH
75157: LD_INT 20
75159: PUSH
75160: LD_INT 21
75162: PUSH
75163: LD_INT 22
75165: PUSH
75166: LD_INT 23
75168: PUSH
75169: LD_INT 24
75171: PUSH
75172: LD_INT 25
75174: PUSH
75175: LD_INT 26
75177: PUSH
75178: LD_INT 27
75180: PUSH
75181: LD_INT 28
75183: PUSH
75184: LD_INT 29
75186: PUSH
75187: LD_INT 30
75189: PUSH
75190: LD_INT 31
75192: PUSH
75193: LD_INT 32
75195: PUSH
75196: LD_INT 33
75198: PUSH
75199: LD_INT 34
75201: PUSH
75202: LD_INT 35
75204: PUSH
75205: LD_INT 36
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 101
75248: PUSH
75249: LD_INT 102
75251: PUSH
75252: LD_INT 103
75254: PUSH
75255: LD_INT 104
75257: PUSH
75258: LD_INT 105
75260: PUSH
75261: LD_INT 106
75263: PUSH
75264: LD_INT 107
75266: PUSH
75267: LD_INT 108
75269: PUSH
75270: LD_INT 109
75272: PUSH
75273: LD_INT 110
75275: PUSH
75276: LD_INT 111
75278: PUSH
75279: LD_INT 112
75281: PUSH
75282: LD_INT 113
75284: PUSH
75285: LD_INT 114
75287: PUSH
75288: LD_INT 115
75290: PUSH
75291: LD_INT 116
75293: PUSH
75294: LD_INT 117
75296: PUSH
75297: LD_INT 118
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: ST_TO_ADDR
75324: GO 75327
75326: POP
// end else
75327: GO 75558
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75329: LD_ADDR_VAR 0 2
75333: PUSH
75334: LD_INT 1
75336: PUSH
75337: LD_INT 2
75339: PUSH
75340: LD_INT 3
75342: PUSH
75343: LD_INT 4
75345: PUSH
75346: LD_INT 5
75348: PUSH
75349: LD_INT 6
75351: PUSH
75352: LD_INT 7
75354: PUSH
75355: LD_INT 8
75357: PUSH
75358: LD_INT 9
75360: PUSH
75361: LD_INT 10
75363: PUSH
75364: LD_INT 11
75366: PUSH
75367: LD_INT 12
75369: PUSH
75370: LD_INT 13
75372: PUSH
75373: LD_INT 14
75375: PUSH
75376: LD_INT 15
75378: PUSH
75379: LD_INT 16
75381: PUSH
75382: LD_INT 17
75384: PUSH
75385: LD_INT 18
75387: PUSH
75388: LD_INT 19
75390: PUSH
75391: LD_INT 20
75393: PUSH
75394: LD_INT 21
75396: PUSH
75397: LD_INT 22
75399: PUSH
75400: LD_INT 23
75402: PUSH
75403: LD_INT 24
75405: PUSH
75406: LD_INT 25
75408: PUSH
75409: LD_INT 26
75411: PUSH
75412: LD_INT 27
75414: PUSH
75415: LD_INT 28
75417: PUSH
75418: LD_INT 29
75420: PUSH
75421: LD_INT 30
75423: PUSH
75424: LD_INT 31
75426: PUSH
75427: LD_INT 32
75429: PUSH
75430: LD_INT 33
75432: PUSH
75433: LD_INT 34
75435: PUSH
75436: LD_INT 35
75438: PUSH
75439: LD_INT 36
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: LIST
75473: LIST
75474: LIST
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: PUSH
75480: LD_INT 101
75482: PUSH
75483: LD_INT 102
75485: PUSH
75486: LD_INT 103
75488: PUSH
75489: LD_INT 104
75491: PUSH
75492: LD_INT 105
75494: PUSH
75495: LD_INT 106
75497: PUSH
75498: LD_INT 107
75500: PUSH
75501: LD_INT 108
75503: PUSH
75504: LD_INT 109
75506: PUSH
75507: LD_INT 110
75509: PUSH
75510: LD_INT 111
75512: PUSH
75513: LD_INT 112
75515: PUSH
75516: LD_INT 113
75518: PUSH
75519: LD_INT 114
75521: PUSH
75522: LD_INT 115
75524: PUSH
75525: LD_INT 116
75527: PUSH
75528: LD_INT 117
75530: PUSH
75531: LD_INT 118
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: ST_TO_ADDR
// if result then
75558: LD_VAR 0 2
75562: IFFALSE 76348
// begin normal :=  ;
75564: LD_ADDR_VAR 0 5
75568: PUSH
75569: LD_STRING 
75571: ST_TO_ADDR
// hardcore :=  ;
75572: LD_ADDR_VAR 0 6
75576: PUSH
75577: LD_STRING 
75579: ST_TO_ADDR
// active :=  ;
75580: LD_ADDR_VAR 0 7
75584: PUSH
75585: LD_STRING 
75587: ST_TO_ADDR
// for i = 1 to normalCounter do
75588: LD_ADDR_VAR 0 8
75592: PUSH
75593: DOUBLE
75594: LD_INT 1
75596: DEC
75597: ST_TO_ADDR
75598: LD_EXP 75
75602: PUSH
75603: FOR_TO
75604: IFFALSE 75705
// begin tmp := 0 ;
75606: LD_ADDR_VAR 0 3
75610: PUSH
75611: LD_STRING 0
75613: ST_TO_ADDR
// if result [ 1 ] then
75614: LD_VAR 0 2
75618: PUSH
75619: LD_INT 1
75621: ARRAY
75622: IFFALSE 75687
// if result [ 1 ] [ 1 ] = i then
75624: LD_VAR 0 2
75628: PUSH
75629: LD_INT 1
75631: ARRAY
75632: PUSH
75633: LD_INT 1
75635: ARRAY
75636: PUSH
75637: LD_VAR 0 8
75641: EQUAL
75642: IFFALSE 75687
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
75644: LD_ADDR_VAR 0 2
75648: PUSH
75649: LD_VAR 0 2
75653: PPUSH
75654: LD_INT 1
75656: PPUSH
75657: LD_VAR 0 2
75661: PUSH
75662: LD_INT 1
75664: ARRAY
75665: PPUSH
75666: LD_INT 1
75668: PPUSH
75669: CALL_OW 3
75673: PPUSH
75674: CALL_OW 1
75678: ST_TO_ADDR
// tmp := 1 ;
75679: LD_ADDR_VAR 0 3
75683: PUSH
75684: LD_STRING 1
75686: ST_TO_ADDR
// end ; normal := normal & tmp ;
75687: LD_ADDR_VAR 0 5
75691: PUSH
75692: LD_VAR 0 5
75696: PUSH
75697: LD_VAR 0 3
75701: STR
75702: ST_TO_ADDR
// end ;
75703: GO 75603
75705: POP
75706: POP
// for i = 1 to hardcoreCounter do
75707: LD_ADDR_VAR 0 8
75711: PUSH
75712: DOUBLE
75713: LD_INT 1
75715: DEC
75716: ST_TO_ADDR
75717: LD_EXP 76
75721: PUSH
75722: FOR_TO
75723: IFFALSE 75828
// begin tmp := 0 ;
75725: LD_ADDR_VAR 0 3
75729: PUSH
75730: LD_STRING 0
75732: ST_TO_ADDR
// if result [ 2 ] then
75733: LD_VAR 0 2
75737: PUSH
75738: LD_INT 2
75740: ARRAY
75741: IFFALSE 75810
// if result [ 2 ] [ 1 ] = 100 + i then
75743: LD_VAR 0 2
75747: PUSH
75748: LD_INT 2
75750: ARRAY
75751: PUSH
75752: LD_INT 1
75754: ARRAY
75755: PUSH
75756: LD_INT 100
75758: PUSH
75759: LD_VAR 0 8
75763: PLUS
75764: EQUAL
75765: IFFALSE 75810
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
75767: LD_ADDR_VAR 0 2
75771: PUSH
75772: LD_VAR 0 2
75776: PPUSH
75777: LD_INT 2
75779: PPUSH
75780: LD_VAR 0 2
75784: PUSH
75785: LD_INT 2
75787: ARRAY
75788: PPUSH
75789: LD_INT 1
75791: PPUSH
75792: CALL_OW 3
75796: PPUSH
75797: CALL_OW 1
75801: ST_TO_ADDR
// tmp := 1 ;
75802: LD_ADDR_VAR 0 3
75806: PUSH
75807: LD_STRING 1
75809: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
75810: LD_ADDR_VAR 0 6
75814: PUSH
75815: LD_VAR 0 6
75819: PUSH
75820: LD_VAR 0 3
75824: STR
75825: ST_TO_ADDR
// end ;
75826: GO 75722
75828: POP
75829: POP
// if isGameLoad then
75830: LD_VAR 0 1
75834: IFFALSE 76309
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
75836: LD_ADDR_VAR 0 4
75840: PUSH
75841: LD_EXP 79
75845: PUSH
75846: LD_EXP 78
75850: PUSH
75851: LD_EXP 80
75855: PUSH
75856: LD_EXP 77
75860: PUSH
75861: LD_EXP 81
75865: PUSH
75866: LD_EXP 82
75870: PUSH
75871: LD_EXP 83
75875: PUSH
75876: LD_EXP 84
75880: PUSH
75881: LD_EXP 85
75885: PUSH
75886: LD_EXP 86
75890: PUSH
75891: LD_EXP 87
75895: PUSH
75896: LD_EXP 88
75900: PUSH
75901: LD_EXP 89
75905: PUSH
75906: LD_EXP 90
75910: PUSH
75911: LD_EXP 98
75915: PUSH
75916: LD_EXP 99
75920: PUSH
75921: LD_EXP 100
75925: PUSH
75926: LD_EXP 101
75930: PUSH
75931: LD_EXP 103
75935: PUSH
75936: LD_EXP 104
75940: PUSH
75941: LD_EXP 105
75945: PUSH
75946: LD_EXP 108
75950: PUSH
75951: LD_EXP 110
75955: PUSH
75956: LD_EXP 111
75960: PUSH
75961: LD_EXP 112
75965: PUSH
75966: LD_EXP 114
75970: PUSH
75971: LD_EXP 115
75975: PUSH
75976: LD_EXP 118
75980: PUSH
75981: LD_EXP 119
75985: PUSH
75986: LD_EXP 120
75990: PUSH
75991: LD_EXP 121
75995: PUSH
75996: LD_EXP 122
76000: PUSH
76001: LD_EXP 123
76005: PUSH
76006: LD_EXP 124
76010: PUSH
76011: LD_EXP 125
76015: PUSH
76016: LD_EXP 126
76020: PUSH
76021: LD_EXP 91
76025: PUSH
76026: LD_EXP 92
76030: PUSH
76031: LD_EXP 95
76035: PUSH
76036: LD_EXP 96
76040: PUSH
76041: LD_EXP 97
76045: PUSH
76046: LD_EXP 93
76050: PUSH
76051: LD_EXP 94
76055: PUSH
76056: LD_EXP 102
76060: PUSH
76061: LD_EXP 106
76065: PUSH
76066: LD_EXP 107
76070: PUSH
76071: LD_EXP 109
76075: PUSH
76076: LD_EXP 113
76080: PUSH
76081: LD_EXP 116
76085: PUSH
76086: LD_EXP 117
76090: PUSH
76091: LD_EXP 127
76095: PUSH
76096: LD_EXP 128
76100: PUSH
76101: LD_EXP 129
76105: PUSH
76106: LD_EXP 130
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: LIST
76115: LIST
76116: LIST
76117: LIST
76118: LIST
76119: LIST
76120: LIST
76121: LIST
76122: LIST
76123: LIST
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: LIST
76156: LIST
76157: LIST
76158: LIST
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: ST_TO_ADDR
// tmp :=  ;
76167: LD_ADDR_VAR 0 3
76171: PUSH
76172: LD_STRING 
76174: ST_TO_ADDR
// for i = 1 to normalCounter do
76175: LD_ADDR_VAR 0 8
76179: PUSH
76180: DOUBLE
76181: LD_INT 1
76183: DEC
76184: ST_TO_ADDR
76185: LD_EXP 75
76189: PUSH
76190: FOR_TO
76191: IFFALSE 76227
// begin if flags [ i ] then
76193: LD_VAR 0 4
76197: PUSH
76198: LD_VAR 0 8
76202: ARRAY
76203: IFFALSE 76225
// tmp := tmp & i & ; ;
76205: LD_ADDR_VAR 0 3
76209: PUSH
76210: LD_VAR 0 3
76214: PUSH
76215: LD_VAR 0 8
76219: STR
76220: PUSH
76221: LD_STRING ;
76223: STR
76224: ST_TO_ADDR
// end ;
76225: GO 76190
76227: POP
76228: POP
// for i = 1 to hardcoreCounter do
76229: LD_ADDR_VAR 0 8
76233: PUSH
76234: DOUBLE
76235: LD_INT 1
76237: DEC
76238: ST_TO_ADDR
76239: LD_EXP 76
76243: PUSH
76244: FOR_TO
76245: IFFALSE 76291
// begin if flags [ normalCounter + i ] then
76247: LD_VAR 0 4
76251: PUSH
76252: LD_EXP 75
76256: PUSH
76257: LD_VAR 0 8
76261: PLUS
76262: ARRAY
76263: IFFALSE 76289
// tmp := tmp & ( 100 + i ) & ; ;
76265: LD_ADDR_VAR 0 3
76269: PUSH
76270: LD_VAR 0 3
76274: PUSH
76275: LD_INT 100
76277: PUSH
76278: LD_VAR 0 8
76282: PLUS
76283: STR
76284: PUSH
76285: LD_STRING ;
76287: STR
76288: ST_TO_ADDR
// end ;
76289: GO 76244
76291: POP
76292: POP
// if tmp then
76293: LD_VAR 0 3
76297: IFFALSE 76309
// active := tmp ;
76299: LD_ADDR_VAR 0 7
76303: PUSH
76304: LD_VAR 0 3
76308: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76309: LD_STRING getStreamItemsFromMission("
76311: PUSH
76312: LD_VAR 0 5
76316: STR
76317: PUSH
76318: LD_STRING ","
76320: STR
76321: PUSH
76322: LD_VAR 0 6
76326: STR
76327: PUSH
76328: LD_STRING ","
76330: STR
76331: PUSH
76332: LD_VAR 0 7
76336: STR
76337: PUSH
76338: LD_STRING ")
76340: STR
76341: PPUSH
76342: CALL_OW 559
// end else
76346: GO 76355
// ToLua ( getStreamItemsFromMission("","","") ) ;
76348: LD_STRING getStreamItemsFromMission("","","")
76350: PPUSH
76351: CALL_OW 559
// end ;
76355: LD_VAR 0 2
76359: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76360: LD_EXP 74
76364: PUSH
76365: LD_EXP 79
76369: AND
76370: IFFALSE 76494
76372: GO 76374
76374: DISABLE
76375: LD_INT 0
76377: PPUSH
76378: PPUSH
// begin enable ;
76379: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76380: LD_ADDR_VAR 0 2
76384: PUSH
76385: LD_INT 22
76387: PUSH
76388: LD_OWVAR 2
76392: PUSH
76393: EMPTY
76394: LIST
76395: LIST
76396: PUSH
76397: LD_INT 2
76399: PUSH
76400: LD_INT 34
76402: PUSH
76403: LD_INT 7
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: PUSH
76410: LD_INT 34
76412: PUSH
76413: LD_INT 45
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PUSH
76420: LD_INT 34
76422: PUSH
76423: LD_INT 28
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: LD_INT 34
76432: PUSH
76433: LD_INT 47
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: PUSH
76440: EMPTY
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: PPUSH
76451: CALL_OW 69
76455: ST_TO_ADDR
// if not tmp then
76456: LD_VAR 0 2
76460: NOT
76461: IFFALSE 76465
// exit ;
76463: GO 76494
// for i in tmp do
76465: LD_ADDR_VAR 0 1
76469: PUSH
76470: LD_VAR 0 2
76474: PUSH
76475: FOR_IN
76476: IFFALSE 76492
// begin SetLives ( i , 0 ) ;
76478: LD_VAR 0 1
76482: PPUSH
76483: LD_INT 0
76485: PPUSH
76486: CALL_OW 234
// end ;
76490: GO 76475
76492: POP
76493: POP
// end ;
76494: PPOPN 2
76496: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
76497: LD_EXP 74
76501: PUSH
76502: LD_EXP 80
76506: AND
76507: IFFALSE 76591
76509: GO 76511
76511: DISABLE
76512: LD_INT 0
76514: PPUSH
76515: PPUSH
// begin enable ;
76516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
76517: LD_ADDR_VAR 0 2
76521: PUSH
76522: LD_INT 22
76524: PUSH
76525: LD_OWVAR 2
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: PUSH
76534: LD_INT 32
76536: PUSH
76537: LD_INT 3
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: PPUSH
76548: CALL_OW 69
76552: ST_TO_ADDR
// if not tmp then
76553: LD_VAR 0 2
76557: NOT
76558: IFFALSE 76562
// exit ;
76560: GO 76591
// for i in tmp do
76562: LD_ADDR_VAR 0 1
76566: PUSH
76567: LD_VAR 0 2
76571: PUSH
76572: FOR_IN
76573: IFFALSE 76589
// begin SetLives ( i , 0 ) ;
76575: LD_VAR 0 1
76579: PPUSH
76580: LD_INT 0
76582: PPUSH
76583: CALL_OW 234
// end ;
76587: GO 76572
76589: POP
76590: POP
// end ;
76591: PPOPN 2
76593: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
76594: LD_EXP 74
76598: PUSH
76599: LD_EXP 77
76603: AND
76604: IFFALSE 76697
76606: GO 76608
76608: DISABLE
76609: LD_INT 0
76611: PPUSH
// begin enable ;
76612: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
76613: LD_ADDR_VAR 0 1
76617: PUSH
76618: LD_INT 22
76620: PUSH
76621: LD_OWVAR 2
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: PUSH
76630: LD_INT 2
76632: PUSH
76633: LD_INT 25
76635: PUSH
76636: LD_INT 5
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 25
76645: PUSH
76646: LD_INT 9
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: LD_INT 25
76655: PUSH
76656: LD_INT 8
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PPUSH
76673: CALL_OW 69
76677: PUSH
76678: FOR_IN
76679: IFFALSE 76695
// begin SetClass ( i , 1 ) ;
76681: LD_VAR 0 1
76685: PPUSH
76686: LD_INT 1
76688: PPUSH
76689: CALL_OW 336
// end ;
76693: GO 76678
76695: POP
76696: POP
// end ;
76697: PPOPN 1
76699: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
76700: LD_EXP 74
76704: PUSH
76705: LD_EXP 78
76709: AND
76710: PUSH
76711: LD_OWVAR 65
76715: PUSH
76716: LD_INT 7
76718: LESS
76719: AND
76720: IFFALSE 76734
76722: GO 76724
76724: DISABLE
// begin enable ;
76725: ENABLE
// game_speed := 7 ;
76726: LD_ADDR_OWVAR 65
76730: PUSH
76731: LD_INT 7
76733: ST_TO_ADDR
// end ;
76734: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
76735: LD_EXP 74
76739: PUSH
76740: LD_EXP 81
76744: AND
76745: IFFALSE 76947
76747: GO 76749
76749: DISABLE
76750: LD_INT 0
76752: PPUSH
76753: PPUSH
76754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76755: LD_ADDR_VAR 0 3
76759: PUSH
76760: LD_INT 81
76762: PUSH
76763: LD_OWVAR 2
76767: PUSH
76768: EMPTY
76769: LIST
76770: LIST
76771: PUSH
76772: LD_INT 21
76774: PUSH
76775: LD_INT 1
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PPUSH
76786: CALL_OW 69
76790: ST_TO_ADDR
// if not tmp then
76791: LD_VAR 0 3
76795: NOT
76796: IFFALSE 76800
// exit ;
76798: GO 76947
// if tmp > 5 then
76800: LD_VAR 0 3
76804: PUSH
76805: LD_INT 5
76807: GREATER
76808: IFFALSE 76820
// k := 5 else
76810: LD_ADDR_VAR 0 2
76814: PUSH
76815: LD_INT 5
76817: ST_TO_ADDR
76818: GO 76830
// k := tmp ;
76820: LD_ADDR_VAR 0 2
76824: PUSH
76825: LD_VAR 0 3
76829: ST_TO_ADDR
// for i := 1 to k do
76830: LD_ADDR_VAR 0 1
76834: PUSH
76835: DOUBLE
76836: LD_INT 1
76838: DEC
76839: ST_TO_ADDR
76840: LD_VAR 0 2
76844: PUSH
76845: FOR_TO
76846: IFFALSE 76945
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
76848: LD_VAR 0 3
76852: PUSH
76853: LD_VAR 0 1
76857: ARRAY
76858: PPUSH
76859: LD_VAR 0 1
76863: PUSH
76864: LD_INT 4
76866: MOD
76867: PUSH
76868: LD_INT 1
76870: PLUS
76871: PPUSH
76872: CALL_OW 259
76876: PUSH
76877: LD_INT 10
76879: LESS
76880: IFFALSE 76943
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
76882: LD_VAR 0 3
76886: PUSH
76887: LD_VAR 0 1
76891: ARRAY
76892: PPUSH
76893: LD_VAR 0 1
76897: PUSH
76898: LD_INT 4
76900: MOD
76901: PUSH
76902: LD_INT 1
76904: PLUS
76905: PPUSH
76906: LD_VAR 0 3
76910: PUSH
76911: LD_VAR 0 1
76915: ARRAY
76916: PPUSH
76917: LD_VAR 0 1
76921: PUSH
76922: LD_INT 4
76924: MOD
76925: PUSH
76926: LD_INT 1
76928: PLUS
76929: PPUSH
76930: CALL_OW 259
76934: PUSH
76935: LD_INT 1
76937: PLUS
76938: PPUSH
76939: CALL_OW 237
76943: GO 76845
76945: POP
76946: POP
// end ;
76947: PPOPN 3
76949: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
76950: LD_EXP 74
76954: PUSH
76955: LD_EXP 82
76959: AND
76960: IFFALSE 76980
76962: GO 76964
76964: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
76965: LD_INT 4
76967: PPUSH
76968: LD_OWVAR 2
76972: PPUSH
76973: LD_INT 0
76975: PPUSH
76976: CALL_OW 324
76980: END
// every 0 0$1 trigger StreamModeActive and sShovel do
76981: LD_EXP 74
76985: PUSH
76986: LD_EXP 111
76990: AND
76991: IFFALSE 77011
76993: GO 76995
76995: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
76996: LD_INT 19
76998: PPUSH
76999: LD_OWVAR 2
77003: PPUSH
77004: LD_INT 0
77006: PPUSH
77007: CALL_OW 324
77011: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77012: LD_EXP 74
77016: PUSH
77017: LD_EXP 83
77021: AND
77022: IFFALSE 77124
77024: GO 77026
77026: DISABLE
77027: LD_INT 0
77029: PPUSH
77030: PPUSH
// begin enable ;
77031: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77032: LD_ADDR_VAR 0 2
77036: PUSH
77037: LD_INT 22
77039: PUSH
77040: LD_OWVAR 2
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: PUSH
77049: LD_INT 2
77051: PUSH
77052: LD_INT 34
77054: PUSH
77055: LD_INT 11
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: PUSH
77062: LD_INT 34
77064: PUSH
77065: LD_INT 30
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: LIST
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: PPUSH
77081: CALL_OW 69
77085: ST_TO_ADDR
// if not tmp then
77086: LD_VAR 0 2
77090: NOT
77091: IFFALSE 77095
// exit ;
77093: GO 77124
// for i in tmp do
77095: LD_ADDR_VAR 0 1
77099: PUSH
77100: LD_VAR 0 2
77104: PUSH
77105: FOR_IN
77106: IFFALSE 77122
// begin SetLives ( i , 0 ) ;
77108: LD_VAR 0 1
77112: PPUSH
77113: LD_INT 0
77115: PPUSH
77116: CALL_OW 234
// end ;
77120: GO 77105
77122: POP
77123: POP
// end ;
77124: PPOPN 2
77126: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77127: LD_EXP 74
77131: PUSH
77132: LD_EXP 84
77136: AND
77137: IFFALSE 77157
77139: GO 77141
77141: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77142: LD_INT 32
77144: PPUSH
77145: LD_OWVAR 2
77149: PPUSH
77150: LD_INT 0
77152: PPUSH
77153: CALL_OW 324
77157: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77158: LD_EXP 74
77162: PUSH
77163: LD_EXP 85
77167: AND
77168: IFFALSE 77349
77170: GO 77172
77172: DISABLE
77173: LD_INT 0
77175: PPUSH
77176: PPUSH
77177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77178: LD_ADDR_VAR 0 2
77182: PUSH
77183: LD_INT 22
77185: PUSH
77186: LD_OWVAR 2
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 33
77197: PUSH
77198: LD_INT 3
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: PUSH
77205: EMPTY
77206: LIST
77207: LIST
77208: PPUSH
77209: CALL_OW 69
77213: ST_TO_ADDR
// if not tmp then
77214: LD_VAR 0 2
77218: NOT
77219: IFFALSE 77223
// exit ;
77221: GO 77349
// side := 0 ;
77223: LD_ADDR_VAR 0 3
77227: PUSH
77228: LD_INT 0
77230: ST_TO_ADDR
// for i := 1 to 8 do
77231: LD_ADDR_VAR 0 1
77235: PUSH
77236: DOUBLE
77237: LD_INT 1
77239: DEC
77240: ST_TO_ADDR
77241: LD_INT 8
77243: PUSH
77244: FOR_TO
77245: IFFALSE 77293
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77247: LD_OWVAR 2
77251: PUSH
77252: LD_VAR 0 1
77256: NONEQUAL
77257: PUSH
77258: LD_OWVAR 2
77262: PPUSH
77263: LD_VAR 0 1
77267: PPUSH
77268: CALL_OW 81
77272: PUSH
77273: LD_INT 2
77275: EQUAL
77276: AND
77277: IFFALSE 77291
// begin side := i ;
77279: LD_ADDR_VAR 0 3
77283: PUSH
77284: LD_VAR 0 1
77288: ST_TO_ADDR
// break ;
77289: GO 77293
// end ;
77291: GO 77244
77293: POP
77294: POP
// if not side then
77295: LD_VAR 0 3
77299: NOT
77300: IFFALSE 77304
// exit ;
77302: GO 77349
// for i := 1 to tmp do
77304: LD_ADDR_VAR 0 1
77308: PUSH
77309: DOUBLE
77310: LD_INT 1
77312: DEC
77313: ST_TO_ADDR
77314: LD_VAR 0 2
77318: PUSH
77319: FOR_TO
77320: IFFALSE 77347
// if Prob ( 60 ) then
77322: LD_INT 60
77324: PPUSH
77325: CALL_OW 13
77329: IFFALSE 77345
// SetSide ( i , side ) ;
77331: LD_VAR 0 1
77335: PPUSH
77336: LD_VAR 0 3
77340: PPUSH
77341: CALL_OW 235
77345: GO 77319
77347: POP
77348: POP
// end ;
77349: PPOPN 3
77351: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77352: LD_EXP 74
77356: PUSH
77357: LD_EXP 87
77361: AND
77362: IFFALSE 77481
77364: GO 77366
77366: DISABLE
77367: LD_INT 0
77369: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77370: LD_ADDR_VAR 0 1
77374: PUSH
77375: LD_INT 22
77377: PUSH
77378: LD_OWVAR 2
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PUSH
77387: LD_INT 21
77389: PUSH
77390: LD_INT 1
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 3
77399: PUSH
77400: LD_INT 23
77402: PUSH
77403: LD_INT 0
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PUSH
77410: EMPTY
77411: LIST
77412: LIST
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: LIST
77418: PPUSH
77419: CALL_OW 69
77423: PUSH
77424: FOR_IN
77425: IFFALSE 77479
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77427: LD_VAR 0 1
77431: PPUSH
77432: CALL_OW 257
77436: PUSH
77437: LD_INT 1
77439: PUSH
77440: LD_INT 2
77442: PUSH
77443: LD_INT 3
77445: PUSH
77446: LD_INT 4
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: LIST
77453: LIST
77454: IN
77455: IFFALSE 77477
// SetClass ( un , rand ( 1 , 4 ) ) ;
77457: LD_VAR 0 1
77461: PPUSH
77462: LD_INT 1
77464: PPUSH
77465: LD_INT 4
77467: PPUSH
77468: CALL_OW 12
77472: PPUSH
77473: CALL_OW 336
77477: GO 77424
77479: POP
77480: POP
// end ;
77481: PPOPN 1
77483: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
77484: LD_EXP 74
77488: PUSH
77489: LD_EXP 86
77493: AND
77494: IFFALSE 77573
77496: GO 77498
77498: DISABLE
77499: LD_INT 0
77501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77502: LD_ADDR_VAR 0 1
77506: PUSH
77507: LD_INT 22
77509: PUSH
77510: LD_OWVAR 2
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 21
77521: PUSH
77522: LD_INT 3
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PPUSH
77533: CALL_OW 69
77537: ST_TO_ADDR
// if not tmp then
77538: LD_VAR 0 1
77542: NOT
77543: IFFALSE 77547
// exit ;
77545: GO 77573
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
77547: LD_VAR 0 1
77551: PUSH
77552: LD_INT 1
77554: PPUSH
77555: LD_VAR 0 1
77559: PPUSH
77560: CALL_OW 12
77564: ARRAY
77565: PPUSH
77566: LD_INT 100
77568: PPUSH
77569: CALL_OW 234
// end ;
77573: PPOPN 1
77575: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
77576: LD_EXP 74
77580: PUSH
77581: LD_EXP 88
77585: AND
77586: IFFALSE 77684
77588: GO 77590
77590: DISABLE
77591: LD_INT 0
77593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77594: LD_ADDR_VAR 0 1
77598: PUSH
77599: LD_INT 22
77601: PUSH
77602: LD_OWVAR 2
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: LD_INT 21
77613: PUSH
77614: LD_INT 1
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: PPUSH
77625: CALL_OW 69
77629: ST_TO_ADDR
// if not tmp then
77630: LD_VAR 0 1
77634: NOT
77635: IFFALSE 77639
// exit ;
77637: GO 77684
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
77639: LD_VAR 0 1
77643: PUSH
77644: LD_INT 1
77646: PPUSH
77647: LD_VAR 0 1
77651: PPUSH
77652: CALL_OW 12
77656: ARRAY
77657: PPUSH
77658: LD_INT 1
77660: PPUSH
77661: LD_INT 4
77663: PPUSH
77664: CALL_OW 12
77668: PPUSH
77669: LD_INT 3000
77671: PPUSH
77672: LD_INT 9000
77674: PPUSH
77675: CALL_OW 12
77679: PPUSH
77680: CALL_OW 492
// end ;
77684: PPOPN 1
77686: END
// every 0 0$1 trigger StreamModeActive and sDepot do
77687: LD_EXP 74
77691: PUSH
77692: LD_EXP 89
77696: AND
77697: IFFALSE 77717
77699: GO 77701
77701: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
77702: LD_INT 1
77704: PPUSH
77705: LD_OWVAR 2
77709: PPUSH
77710: LD_INT 0
77712: PPUSH
77713: CALL_OW 324
77717: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
77718: LD_EXP 74
77722: PUSH
77723: LD_EXP 90
77727: AND
77728: IFFALSE 77811
77730: GO 77732
77732: DISABLE
77733: LD_INT 0
77735: PPUSH
77736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77737: LD_ADDR_VAR 0 2
77741: PUSH
77742: LD_INT 22
77744: PUSH
77745: LD_OWVAR 2
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: PUSH
77754: LD_INT 21
77756: PUSH
77757: LD_INT 3
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PPUSH
77768: CALL_OW 69
77772: ST_TO_ADDR
// if not tmp then
77773: LD_VAR 0 2
77777: NOT
77778: IFFALSE 77782
// exit ;
77780: GO 77811
// for i in tmp do
77782: LD_ADDR_VAR 0 1
77786: PUSH
77787: LD_VAR 0 2
77791: PUSH
77792: FOR_IN
77793: IFFALSE 77809
// SetBLevel ( i , 10 ) ;
77795: LD_VAR 0 1
77799: PPUSH
77800: LD_INT 10
77802: PPUSH
77803: CALL_OW 241
77807: GO 77792
77809: POP
77810: POP
// end ;
77811: PPOPN 2
77813: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
77814: LD_EXP 74
77818: PUSH
77819: LD_EXP 91
77823: AND
77824: IFFALSE 77935
77826: GO 77828
77828: DISABLE
77829: LD_INT 0
77831: PPUSH
77832: PPUSH
77833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77834: LD_ADDR_VAR 0 3
77838: PUSH
77839: LD_INT 22
77841: PUSH
77842: LD_OWVAR 2
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: PUSH
77851: LD_INT 25
77853: PUSH
77854: LD_INT 1
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: PPUSH
77865: CALL_OW 69
77869: ST_TO_ADDR
// if not tmp then
77870: LD_VAR 0 3
77874: NOT
77875: IFFALSE 77879
// exit ;
77877: GO 77935
// un := tmp [ rand ( 1 , tmp ) ] ;
77879: LD_ADDR_VAR 0 2
77883: PUSH
77884: LD_VAR 0 3
77888: PUSH
77889: LD_INT 1
77891: PPUSH
77892: LD_VAR 0 3
77896: PPUSH
77897: CALL_OW 12
77901: ARRAY
77902: ST_TO_ADDR
// if Crawls ( un ) then
77903: LD_VAR 0 2
77907: PPUSH
77908: CALL_OW 318
77912: IFFALSE 77923
// ComWalk ( un ) ;
77914: LD_VAR 0 2
77918: PPUSH
77919: CALL_OW 138
// SetClass ( un , class_sniper ) ;
77923: LD_VAR 0 2
77927: PPUSH
77928: LD_INT 5
77930: PPUSH
77931: CALL_OW 336
// end ;
77935: PPOPN 3
77937: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
77938: LD_EXP 74
77942: PUSH
77943: LD_EXP 92
77947: AND
77948: PUSH
77949: LD_OWVAR 67
77953: PUSH
77954: LD_INT 4
77956: LESS
77957: AND
77958: IFFALSE 77977
77960: GO 77962
77962: DISABLE
// begin Difficulty := Difficulty + 1 ;
77963: LD_ADDR_OWVAR 67
77967: PUSH
77968: LD_OWVAR 67
77972: PUSH
77973: LD_INT 1
77975: PLUS
77976: ST_TO_ADDR
// end ;
77977: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
77978: LD_EXP 74
77982: PUSH
77983: LD_EXP 93
77987: AND
77988: IFFALSE 78091
77990: GO 77992
77992: DISABLE
77993: LD_INT 0
77995: PPUSH
// begin for i := 1 to 5 do
77996: LD_ADDR_VAR 0 1
78000: PUSH
78001: DOUBLE
78002: LD_INT 1
78004: DEC
78005: ST_TO_ADDR
78006: LD_INT 5
78008: PUSH
78009: FOR_TO
78010: IFFALSE 78089
// begin uc_nation := nation_nature ;
78012: LD_ADDR_OWVAR 21
78016: PUSH
78017: LD_INT 0
78019: ST_TO_ADDR
// uc_side := 0 ;
78020: LD_ADDR_OWVAR 20
78024: PUSH
78025: LD_INT 0
78027: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78028: LD_ADDR_OWVAR 29
78032: PUSH
78033: LD_INT 12
78035: PUSH
78036: LD_INT 12
78038: PUSH
78039: EMPTY
78040: LIST
78041: LIST
78042: ST_TO_ADDR
// hc_agressivity := 20 ;
78043: LD_ADDR_OWVAR 35
78047: PUSH
78048: LD_INT 20
78050: ST_TO_ADDR
// hc_class := class_tiger ;
78051: LD_ADDR_OWVAR 28
78055: PUSH
78056: LD_INT 14
78058: ST_TO_ADDR
// hc_gallery :=  ;
78059: LD_ADDR_OWVAR 33
78063: PUSH
78064: LD_STRING 
78066: ST_TO_ADDR
// hc_name :=  ;
78067: LD_ADDR_OWVAR 26
78071: PUSH
78072: LD_STRING 
78074: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78075: CALL_OW 44
78079: PPUSH
78080: LD_INT 0
78082: PPUSH
78083: CALL_OW 51
// end ;
78087: GO 78009
78089: POP
78090: POP
// end ;
78091: PPOPN 1
78093: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78094: LD_EXP 74
78098: PUSH
78099: LD_EXP 94
78103: AND
78104: IFFALSE 78113
78106: GO 78108
78108: DISABLE
// StreamSibBomb ;
78109: CALL 78114 0 0
78113: END
// export function StreamSibBomb ; var i , x , y ; begin
78114: LD_INT 0
78116: PPUSH
78117: PPUSH
78118: PPUSH
78119: PPUSH
// result := false ;
78120: LD_ADDR_VAR 0 1
78124: PUSH
78125: LD_INT 0
78127: ST_TO_ADDR
// for i := 1 to 16 do
78128: LD_ADDR_VAR 0 2
78132: PUSH
78133: DOUBLE
78134: LD_INT 1
78136: DEC
78137: ST_TO_ADDR
78138: LD_INT 16
78140: PUSH
78141: FOR_TO
78142: IFFALSE 78341
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78144: LD_ADDR_VAR 0 3
78148: PUSH
78149: LD_INT 10
78151: PUSH
78152: LD_INT 20
78154: PUSH
78155: LD_INT 30
78157: PUSH
78158: LD_INT 40
78160: PUSH
78161: LD_INT 50
78163: PUSH
78164: LD_INT 60
78166: PUSH
78167: LD_INT 70
78169: PUSH
78170: LD_INT 80
78172: PUSH
78173: LD_INT 90
78175: PUSH
78176: LD_INT 100
78178: PUSH
78179: LD_INT 110
78181: PUSH
78182: LD_INT 120
78184: PUSH
78185: LD_INT 130
78187: PUSH
78188: LD_INT 140
78190: PUSH
78191: LD_INT 150
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: PUSH
78211: LD_INT 1
78213: PPUSH
78214: LD_INT 15
78216: PPUSH
78217: CALL_OW 12
78221: ARRAY
78222: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78223: LD_ADDR_VAR 0 4
78227: PUSH
78228: LD_INT 10
78230: PUSH
78231: LD_INT 20
78233: PUSH
78234: LD_INT 30
78236: PUSH
78237: LD_INT 40
78239: PUSH
78240: LD_INT 50
78242: PUSH
78243: LD_INT 60
78245: PUSH
78246: LD_INT 70
78248: PUSH
78249: LD_INT 80
78251: PUSH
78252: LD_INT 90
78254: PUSH
78255: LD_INT 100
78257: PUSH
78258: LD_INT 110
78260: PUSH
78261: LD_INT 120
78263: PUSH
78264: LD_INT 130
78266: PUSH
78267: LD_INT 140
78269: PUSH
78270: LD_INT 150
78272: PUSH
78273: EMPTY
78274: LIST
78275: LIST
78276: LIST
78277: LIST
78278: LIST
78279: LIST
78280: LIST
78281: LIST
78282: LIST
78283: LIST
78284: LIST
78285: LIST
78286: LIST
78287: LIST
78288: LIST
78289: PUSH
78290: LD_INT 1
78292: PPUSH
78293: LD_INT 15
78295: PPUSH
78296: CALL_OW 12
78300: ARRAY
78301: ST_TO_ADDR
// if ValidHex ( x , y ) then
78302: LD_VAR 0 3
78306: PPUSH
78307: LD_VAR 0 4
78311: PPUSH
78312: CALL_OW 488
78316: IFFALSE 78339
// begin result := [ x , y ] ;
78318: LD_ADDR_VAR 0 1
78322: PUSH
78323: LD_VAR 0 3
78327: PUSH
78328: LD_VAR 0 4
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: ST_TO_ADDR
// break ;
78337: GO 78341
// end ; end ;
78339: GO 78141
78341: POP
78342: POP
// if result then
78343: LD_VAR 0 1
78347: IFFALSE 78407
// begin ToLua ( playSibBomb() ) ;
78349: LD_STRING playSibBomb()
78351: PPUSH
78352: CALL_OW 559
// wait ( 0 0$14 ) ;
78356: LD_INT 490
78358: PPUSH
78359: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78363: LD_VAR 0 1
78367: PUSH
78368: LD_INT 1
78370: ARRAY
78371: PPUSH
78372: LD_VAR 0 1
78376: PUSH
78377: LD_INT 2
78379: ARRAY
78380: PPUSH
78381: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78385: LD_VAR 0 1
78389: PUSH
78390: LD_INT 1
78392: ARRAY
78393: PPUSH
78394: LD_VAR 0 1
78398: PUSH
78399: LD_INT 2
78401: ARRAY
78402: PPUSH
78403: CALL_OW 429
// end ; end ;
78407: LD_VAR 0 1
78411: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78412: LD_EXP 74
78416: PUSH
78417: LD_EXP 96
78421: AND
78422: IFFALSE 78434
78424: GO 78426
78426: DISABLE
// YouLost (  ) ;
78427: LD_STRING 
78429: PPUSH
78430: CALL_OW 104
78434: END
// every 0 0$1 trigger StreamModeActive and sFog do
78435: LD_EXP 74
78439: PUSH
78440: LD_EXP 95
78444: AND
78445: IFFALSE 78459
78447: GO 78449
78449: DISABLE
// FogOff ( your_side ) ;
78450: LD_OWVAR 2
78454: PPUSH
78455: CALL_OW 344
78459: END
// every 0 0$1 trigger StreamModeActive and sSun do
78460: LD_EXP 74
78464: PUSH
78465: LD_EXP 97
78469: AND
78470: IFFALSE 78498
78472: GO 78474
78474: DISABLE
// begin solar_recharge_percent := 0 ;
78475: LD_ADDR_OWVAR 79
78479: PUSH
78480: LD_INT 0
78482: ST_TO_ADDR
// wait ( 5 5$00 ) ;
78483: LD_INT 10500
78485: PPUSH
78486: CALL_OW 67
// solar_recharge_percent := 100 ;
78490: LD_ADDR_OWVAR 79
78494: PUSH
78495: LD_INT 100
78497: ST_TO_ADDR
// end ;
78498: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
78499: LD_EXP 74
78503: PUSH
78504: LD_EXP 98
78508: AND
78509: IFFALSE 78748
78511: GO 78513
78513: DISABLE
78514: LD_INT 0
78516: PPUSH
78517: PPUSH
78518: PPUSH
// begin tmp := [ ] ;
78519: LD_ADDR_VAR 0 3
78523: PUSH
78524: EMPTY
78525: ST_TO_ADDR
// for i := 1 to 6 do
78526: LD_ADDR_VAR 0 1
78530: PUSH
78531: DOUBLE
78532: LD_INT 1
78534: DEC
78535: ST_TO_ADDR
78536: LD_INT 6
78538: PUSH
78539: FOR_TO
78540: IFFALSE 78645
// begin uc_nation := nation_nature ;
78542: LD_ADDR_OWVAR 21
78546: PUSH
78547: LD_INT 0
78549: ST_TO_ADDR
// uc_side := 0 ;
78550: LD_ADDR_OWVAR 20
78554: PUSH
78555: LD_INT 0
78557: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78558: LD_ADDR_OWVAR 29
78562: PUSH
78563: LD_INT 12
78565: PUSH
78566: LD_INT 12
78568: PUSH
78569: EMPTY
78570: LIST
78571: LIST
78572: ST_TO_ADDR
// hc_agressivity := 20 ;
78573: LD_ADDR_OWVAR 35
78577: PUSH
78578: LD_INT 20
78580: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
78581: LD_ADDR_OWVAR 28
78585: PUSH
78586: LD_INT 17
78588: ST_TO_ADDR
// hc_gallery :=  ;
78589: LD_ADDR_OWVAR 33
78593: PUSH
78594: LD_STRING 
78596: ST_TO_ADDR
// hc_name :=  ;
78597: LD_ADDR_OWVAR 26
78601: PUSH
78602: LD_STRING 
78604: ST_TO_ADDR
// un := CreateHuman ;
78605: LD_ADDR_VAR 0 2
78609: PUSH
78610: CALL_OW 44
78614: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
78615: LD_VAR 0 2
78619: PPUSH
78620: LD_INT 1
78622: PPUSH
78623: CALL_OW 51
// tmp := tmp ^ un ;
78627: LD_ADDR_VAR 0 3
78631: PUSH
78632: LD_VAR 0 3
78636: PUSH
78637: LD_VAR 0 2
78641: ADD
78642: ST_TO_ADDR
// end ;
78643: GO 78539
78645: POP
78646: POP
// repeat wait ( 0 0$1 ) ;
78647: LD_INT 35
78649: PPUSH
78650: CALL_OW 67
// for un in tmp do
78654: LD_ADDR_VAR 0 2
78658: PUSH
78659: LD_VAR 0 3
78663: PUSH
78664: FOR_IN
78665: IFFALSE 78739
// begin if IsDead ( un ) then
78667: LD_VAR 0 2
78671: PPUSH
78672: CALL_OW 301
78676: IFFALSE 78696
// begin tmp := tmp diff un ;
78678: LD_ADDR_VAR 0 3
78682: PUSH
78683: LD_VAR 0 3
78687: PUSH
78688: LD_VAR 0 2
78692: DIFF
78693: ST_TO_ADDR
// continue ;
78694: GO 78664
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
78696: LD_VAR 0 2
78700: PPUSH
78701: LD_INT 3
78703: PUSH
78704: LD_INT 22
78706: PUSH
78707: LD_INT 0
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: PUSH
78714: EMPTY
78715: LIST
78716: LIST
78717: PPUSH
78718: CALL_OW 69
78722: PPUSH
78723: LD_VAR 0 2
78727: PPUSH
78728: CALL_OW 74
78732: PPUSH
78733: CALL_OW 115
// end ;
78737: GO 78664
78739: POP
78740: POP
// until not tmp ;
78741: LD_VAR 0 3
78745: NOT
78746: IFFALSE 78647
// end ;
78748: PPOPN 3
78750: END
// every 0 0$1 trigger StreamModeActive and sTroll do
78751: LD_EXP 74
78755: PUSH
78756: LD_EXP 99
78760: AND
78761: IFFALSE 78815
78763: GO 78765
78765: DISABLE
// begin ToLua ( displayTroll(); ) ;
78766: LD_STRING displayTroll();
78768: PPUSH
78769: CALL_OW 559
// wait ( 3 3$00 ) ;
78773: LD_INT 6300
78775: PPUSH
78776: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78780: LD_STRING hideTroll();
78782: PPUSH
78783: CALL_OW 559
// wait ( 1 1$00 ) ;
78787: LD_INT 2100
78789: PPUSH
78790: CALL_OW 67
// ToLua ( displayTroll(); ) ;
78794: LD_STRING displayTroll();
78796: PPUSH
78797: CALL_OW 559
// wait ( 1 1$00 ) ;
78801: LD_INT 2100
78803: PPUSH
78804: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78808: LD_STRING hideTroll();
78810: PPUSH
78811: CALL_OW 559
// end ;
78815: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
78816: LD_EXP 74
78820: PUSH
78821: LD_EXP 100
78825: AND
78826: IFFALSE 78889
78828: GO 78830
78830: DISABLE
78831: LD_INT 0
78833: PPUSH
// begin p := 0 ;
78834: LD_ADDR_VAR 0 1
78838: PUSH
78839: LD_INT 0
78841: ST_TO_ADDR
// repeat game_speed := 1 ;
78842: LD_ADDR_OWVAR 65
78846: PUSH
78847: LD_INT 1
78849: ST_TO_ADDR
// wait ( 0 0$1 ) ;
78850: LD_INT 35
78852: PPUSH
78853: CALL_OW 67
// p := p + 1 ;
78857: LD_ADDR_VAR 0 1
78861: PUSH
78862: LD_VAR 0 1
78866: PUSH
78867: LD_INT 1
78869: PLUS
78870: ST_TO_ADDR
// until p >= 60 ;
78871: LD_VAR 0 1
78875: PUSH
78876: LD_INT 60
78878: GREATEREQUAL
78879: IFFALSE 78842
// game_speed := 4 ;
78881: LD_ADDR_OWVAR 65
78885: PUSH
78886: LD_INT 4
78888: ST_TO_ADDR
// end ;
78889: PPOPN 1
78891: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
78892: LD_EXP 74
78896: PUSH
78897: LD_EXP 101
78901: AND
78902: IFFALSE 79048
78904: GO 78906
78906: DISABLE
78907: LD_INT 0
78909: PPUSH
78910: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78911: LD_ADDR_VAR 0 1
78915: PUSH
78916: LD_INT 22
78918: PUSH
78919: LD_OWVAR 2
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: PUSH
78928: LD_INT 2
78930: PUSH
78931: LD_INT 30
78933: PUSH
78934: LD_INT 0
78936: PUSH
78937: EMPTY
78938: LIST
78939: LIST
78940: PUSH
78941: LD_INT 30
78943: PUSH
78944: LD_INT 1
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: LIST
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PPUSH
78960: CALL_OW 69
78964: ST_TO_ADDR
// if not depot then
78965: LD_VAR 0 1
78969: NOT
78970: IFFALSE 78974
// exit ;
78972: GO 79048
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
78974: LD_ADDR_VAR 0 2
78978: PUSH
78979: LD_VAR 0 1
78983: PUSH
78984: LD_INT 1
78986: PPUSH
78987: LD_VAR 0 1
78991: PPUSH
78992: CALL_OW 12
78996: ARRAY
78997: PPUSH
78998: CALL_OW 274
79002: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79003: LD_VAR 0 2
79007: PPUSH
79008: LD_INT 1
79010: PPUSH
79011: LD_INT 0
79013: PPUSH
79014: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79018: LD_VAR 0 2
79022: PPUSH
79023: LD_INT 2
79025: PPUSH
79026: LD_INT 0
79028: PPUSH
79029: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79033: LD_VAR 0 2
79037: PPUSH
79038: LD_INT 3
79040: PPUSH
79041: LD_INT 0
79043: PPUSH
79044: CALL_OW 277
// end ;
79048: PPOPN 2
79050: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79051: LD_EXP 74
79055: PUSH
79056: LD_EXP 102
79060: AND
79061: IFFALSE 79158
79063: GO 79065
79065: DISABLE
79066: LD_INT 0
79068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79069: LD_ADDR_VAR 0 1
79073: PUSH
79074: LD_INT 22
79076: PUSH
79077: LD_OWVAR 2
79081: PUSH
79082: EMPTY
79083: LIST
79084: LIST
79085: PUSH
79086: LD_INT 21
79088: PUSH
79089: LD_INT 1
79091: PUSH
79092: EMPTY
79093: LIST
79094: LIST
79095: PUSH
79096: LD_INT 3
79098: PUSH
79099: LD_INT 23
79101: PUSH
79102: LD_INT 0
79104: PUSH
79105: EMPTY
79106: LIST
79107: LIST
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: PUSH
79113: EMPTY
79114: LIST
79115: LIST
79116: LIST
79117: PPUSH
79118: CALL_OW 69
79122: ST_TO_ADDR
// if not tmp then
79123: LD_VAR 0 1
79127: NOT
79128: IFFALSE 79132
// exit ;
79130: GO 79158
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79132: LD_VAR 0 1
79136: PUSH
79137: LD_INT 1
79139: PPUSH
79140: LD_VAR 0 1
79144: PPUSH
79145: CALL_OW 12
79149: ARRAY
79150: PPUSH
79151: LD_INT 200
79153: PPUSH
79154: CALL_OW 234
// end ;
79158: PPOPN 1
79160: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79161: LD_EXP 74
79165: PUSH
79166: LD_EXP 103
79170: AND
79171: IFFALSE 79250
79173: GO 79175
79175: DISABLE
79176: LD_INT 0
79178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79179: LD_ADDR_VAR 0 1
79183: PUSH
79184: LD_INT 22
79186: PUSH
79187: LD_OWVAR 2
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 21
79198: PUSH
79199: LD_INT 2
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: PPUSH
79210: CALL_OW 69
79214: ST_TO_ADDR
// if not tmp then
79215: LD_VAR 0 1
79219: NOT
79220: IFFALSE 79224
// exit ;
79222: GO 79250
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79224: LD_VAR 0 1
79228: PUSH
79229: LD_INT 1
79231: PPUSH
79232: LD_VAR 0 1
79236: PPUSH
79237: CALL_OW 12
79241: ARRAY
79242: PPUSH
79243: LD_INT 60
79245: PPUSH
79246: CALL_OW 234
// end ;
79250: PPOPN 1
79252: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79253: LD_EXP 74
79257: PUSH
79258: LD_EXP 104
79262: AND
79263: IFFALSE 79362
79265: GO 79267
79267: DISABLE
79268: LD_INT 0
79270: PPUSH
79271: PPUSH
// begin enable ;
79272: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79273: LD_ADDR_VAR 0 1
79277: PUSH
79278: LD_INT 22
79280: PUSH
79281: LD_OWVAR 2
79285: PUSH
79286: EMPTY
79287: LIST
79288: LIST
79289: PUSH
79290: LD_INT 61
79292: PUSH
79293: EMPTY
79294: LIST
79295: PUSH
79296: LD_INT 33
79298: PUSH
79299: LD_INT 2
79301: PUSH
79302: EMPTY
79303: LIST
79304: LIST
79305: PUSH
79306: EMPTY
79307: LIST
79308: LIST
79309: LIST
79310: PPUSH
79311: CALL_OW 69
79315: ST_TO_ADDR
// if not tmp then
79316: LD_VAR 0 1
79320: NOT
79321: IFFALSE 79325
// exit ;
79323: GO 79362
// for i in tmp do
79325: LD_ADDR_VAR 0 2
79329: PUSH
79330: LD_VAR 0 1
79334: PUSH
79335: FOR_IN
79336: IFFALSE 79360
// if IsControledBy ( i ) then
79338: LD_VAR 0 2
79342: PPUSH
79343: CALL_OW 312
79347: IFFALSE 79358
// ComUnlink ( i ) ;
79349: LD_VAR 0 2
79353: PPUSH
79354: CALL_OW 136
79358: GO 79335
79360: POP
79361: POP
// end ;
79362: PPOPN 2
79364: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79365: LD_EXP 74
79369: PUSH
79370: LD_EXP 105
79374: AND
79375: IFFALSE 79515
79377: GO 79379
79379: DISABLE
79380: LD_INT 0
79382: PPUSH
79383: PPUSH
// begin ToLua ( displayPowell(); ) ;
79384: LD_STRING displayPowell();
79386: PPUSH
79387: CALL_OW 559
// uc_side := 0 ;
79391: LD_ADDR_OWVAR 20
79395: PUSH
79396: LD_INT 0
79398: ST_TO_ADDR
// uc_nation := 2 ;
79399: LD_ADDR_OWVAR 21
79403: PUSH
79404: LD_INT 2
79406: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79407: LD_ADDR_OWVAR 37
79411: PUSH
79412: LD_INT 14
79414: ST_TO_ADDR
// vc_engine := engine_siberite ;
79415: LD_ADDR_OWVAR 39
79419: PUSH
79420: LD_INT 3
79422: ST_TO_ADDR
// vc_control := control_apeman ;
79423: LD_ADDR_OWVAR 38
79427: PUSH
79428: LD_INT 5
79430: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
79431: LD_ADDR_OWVAR 40
79435: PUSH
79436: LD_INT 29
79438: ST_TO_ADDR
// un := CreateVehicle ;
79439: LD_ADDR_VAR 0 2
79443: PUSH
79444: CALL_OW 45
79448: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79449: LD_VAR 0 2
79453: PPUSH
79454: LD_INT 1
79456: PPUSH
79457: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79461: LD_INT 35
79463: PPUSH
79464: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79468: LD_VAR 0 2
79472: PPUSH
79473: LD_INT 22
79475: PUSH
79476: LD_OWVAR 2
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: PPUSH
79485: CALL_OW 69
79489: PPUSH
79490: LD_VAR 0 2
79494: PPUSH
79495: CALL_OW 74
79499: PPUSH
79500: CALL_OW 115
// until IsDead ( un ) ;
79504: LD_VAR 0 2
79508: PPUSH
79509: CALL_OW 301
79513: IFFALSE 79461
// end ;
79515: PPOPN 2
79517: END
// every 0 0$1 trigger StreamModeActive and sStu do
79518: LD_EXP 74
79522: PUSH
79523: LD_EXP 113
79527: AND
79528: IFFALSE 79544
79530: GO 79532
79532: DISABLE
// begin ToLua ( displayStucuk(); ) ;
79533: LD_STRING displayStucuk();
79535: PPUSH
79536: CALL_OW 559
// ResetFog ;
79540: CALL_OW 335
// end ;
79544: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
79545: LD_EXP 74
79549: PUSH
79550: LD_EXP 106
79554: AND
79555: IFFALSE 79696
79557: GO 79559
79559: DISABLE
79560: LD_INT 0
79562: PPUSH
79563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79564: LD_ADDR_VAR 0 2
79568: PUSH
79569: LD_INT 22
79571: PUSH
79572: LD_OWVAR 2
79576: PUSH
79577: EMPTY
79578: LIST
79579: LIST
79580: PUSH
79581: LD_INT 21
79583: PUSH
79584: LD_INT 1
79586: PUSH
79587: EMPTY
79588: LIST
79589: LIST
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: PPUSH
79595: CALL_OW 69
79599: ST_TO_ADDR
// if not tmp then
79600: LD_VAR 0 2
79604: NOT
79605: IFFALSE 79609
// exit ;
79607: GO 79696
// un := tmp [ rand ( 1 , tmp ) ] ;
79609: LD_ADDR_VAR 0 1
79613: PUSH
79614: LD_VAR 0 2
79618: PUSH
79619: LD_INT 1
79621: PPUSH
79622: LD_VAR 0 2
79626: PPUSH
79627: CALL_OW 12
79631: ARRAY
79632: ST_TO_ADDR
// SetSide ( un , 0 ) ;
79633: LD_VAR 0 1
79637: PPUSH
79638: LD_INT 0
79640: PPUSH
79641: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
79645: LD_VAR 0 1
79649: PPUSH
79650: LD_OWVAR 3
79654: PUSH
79655: LD_VAR 0 1
79659: DIFF
79660: PPUSH
79661: LD_VAR 0 1
79665: PPUSH
79666: CALL_OW 74
79670: PPUSH
79671: CALL_OW 115
// wait ( 0 0$20 ) ;
79675: LD_INT 700
79677: PPUSH
79678: CALL_OW 67
// SetSide ( un , your_side ) ;
79682: LD_VAR 0 1
79686: PPUSH
79687: LD_OWVAR 2
79691: PPUSH
79692: CALL_OW 235
// end ;
79696: PPOPN 2
79698: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
79699: LD_EXP 74
79703: PUSH
79704: LD_EXP 107
79708: AND
79709: IFFALSE 79815
79711: GO 79713
79713: DISABLE
79714: LD_INT 0
79716: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79717: LD_ADDR_VAR 0 1
79721: PUSH
79722: LD_INT 22
79724: PUSH
79725: LD_OWVAR 2
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: PUSH
79734: LD_INT 2
79736: PUSH
79737: LD_INT 30
79739: PUSH
79740: LD_INT 0
79742: PUSH
79743: EMPTY
79744: LIST
79745: LIST
79746: PUSH
79747: LD_INT 30
79749: PUSH
79750: LD_INT 1
79752: PUSH
79753: EMPTY
79754: LIST
79755: LIST
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: LIST
79761: PUSH
79762: EMPTY
79763: LIST
79764: LIST
79765: PPUSH
79766: CALL_OW 69
79770: ST_TO_ADDR
// if not depot then
79771: LD_VAR 0 1
79775: NOT
79776: IFFALSE 79780
// exit ;
79778: GO 79815
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
79780: LD_VAR 0 1
79784: PUSH
79785: LD_INT 1
79787: ARRAY
79788: PPUSH
79789: CALL_OW 250
79793: PPUSH
79794: LD_VAR 0 1
79798: PUSH
79799: LD_INT 1
79801: ARRAY
79802: PPUSH
79803: CALL_OW 251
79807: PPUSH
79808: LD_INT 70
79810: PPUSH
79811: CALL_OW 495
// end ;
79815: PPOPN 1
79817: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
79818: LD_EXP 74
79822: PUSH
79823: LD_EXP 108
79827: AND
79828: IFFALSE 80039
79830: GO 79832
79832: DISABLE
79833: LD_INT 0
79835: PPUSH
79836: PPUSH
79837: PPUSH
79838: PPUSH
79839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79840: LD_ADDR_VAR 0 5
79844: PUSH
79845: LD_INT 22
79847: PUSH
79848: LD_OWVAR 2
79852: PUSH
79853: EMPTY
79854: LIST
79855: LIST
79856: PUSH
79857: LD_INT 21
79859: PUSH
79860: LD_INT 1
79862: PUSH
79863: EMPTY
79864: LIST
79865: LIST
79866: PUSH
79867: EMPTY
79868: LIST
79869: LIST
79870: PPUSH
79871: CALL_OW 69
79875: ST_TO_ADDR
// if not tmp then
79876: LD_VAR 0 5
79880: NOT
79881: IFFALSE 79885
// exit ;
79883: GO 80039
// for i in tmp do
79885: LD_ADDR_VAR 0 1
79889: PUSH
79890: LD_VAR 0 5
79894: PUSH
79895: FOR_IN
79896: IFFALSE 80037
// begin d := rand ( 0 , 5 ) ;
79898: LD_ADDR_VAR 0 4
79902: PUSH
79903: LD_INT 0
79905: PPUSH
79906: LD_INT 5
79908: PPUSH
79909: CALL_OW 12
79913: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
79914: LD_ADDR_VAR 0 2
79918: PUSH
79919: LD_VAR 0 1
79923: PPUSH
79924: CALL_OW 250
79928: PPUSH
79929: LD_VAR 0 4
79933: PPUSH
79934: LD_INT 3
79936: PPUSH
79937: LD_INT 12
79939: PPUSH
79940: CALL_OW 12
79944: PPUSH
79945: CALL_OW 272
79949: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
79950: LD_ADDR_VAR 0 3
79954: PUSH
79955: LD_VAR 0 1
79959: PPUSH
79960: CALL_OW 251
79964: PPUSH
79965: LD_VAR 0 4
79969: PPUSH
79970: LD_INT 3
79972: PPUSH
79973: LD_INT 12
79975: PPUSH
79976: CALL_OW 12
79980: PPUSH
79981: CALL_OW 273
79985: ST_TO_ADDR
// if ValidHex ( x , y ) then
79986: LD_VAR 0 2
79990: PPUSH
79991: LD_VAR 0 3
79995: PPUSH
79996: CALL_OW 488
80000: IFFALSE 80035
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80002: LD_VAR 0 1
80006: PPUSH
80007: LD_VAR 0 2
80011: PPUSH
80012: LD_VAR 0 3
80016: PPUSH
80017: LD_INT 3
80019: PPUSH
80020: LD_INT 6
80022: PPUSH
80023: CALL_OW 12
80027: PPUSH
80028: LD_INT 1
80030: PPUSH
80031: CALL_OW 483
// end ;
80035: GO 79895
80037: POP
80038: POP
// end ;
80039: PPOPN 5
80041: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80042: LD_EXP 74
80046: PUSH
80047: LD_EXP 109
80051: AND
80052: IFFALSE 80146
80054: GO 80056
80056: DISABLE
80057: LD_INT 0
80059: PPUSH
80060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80061: LD_ADDR_VAR 0 2
80065: PUSH
80066: LD_INT 22
80068: PUSH
80069: LD_OWVAR 2
80073: PUSH
80074: EMPTY
80075: LIST
80076: LIST
80077: PUSH
80078: LD_INT 32
80080: PUSH
80081: LD_INT 1
80083: PUSH
80084: EMPTY
80085: LIST
80086: LIST
80087: PUSH
80088: LD_INT 21
80090: PUSH
80091: LD_INT 2
80093: PUSH
80094: EMPTY
80095: LIST
80096: LIST
80097: PUSH
80098: EMPTY
80099: LIST
80100: LIST
80101: LIST
80102: PPUSH
80103: CALL_OW 69
80107: ST_TO_ADDR
// if not tmp then
80108: LD_VAR 0 2
80112: NOT
80113: IFFALSE 80117
// exit ;
80115: GO 80146
// for i in tmp do
80117: LD_ADDR_VAR 0 1
80121: PUSH
80122: LD_VAR 0 2
80126: PUSH
80127: FOR_IN
80128: IFFALSE 80144
// SetFuel ( i , 0 ) ;
80130: LD_VAR 0 1
80134: PPUSH
80135: LD_INT 0
80137: PPUSH
80138: CALL_OW 240
80142: GO 80127
80144: POP
80145: POP
// end ;
80146: PPOPN 2
80148: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80149: LD_EXP 74
80153: PUSH
80154: LD_EXP 110
80158: AND
80159: IFFALSE 80225
80161: GO 80163
80163: DISABLE
80164: LD_INT 0
80166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80167: LD_ADDR_VAR 0 1
80171: PUSH
80172: LD_INT 22
80174: PUSH
80175: LD_OWVAR 2
80179: PUSH
80180: EMPTY
80181: LIST
80182: LIST
80183: PUSH
80184: LD_INT 30
80186: PUSH
80187: LD_INT 29
80189: PUSH
80190: EMPTY
80191: LIST
80192: LIST
80193: PUSH
80194: EMPTY
80195: LIST
80196: LIST
80197: PPUSH
80198: CALL_OW 69
80202: ST_TO_ADDR
// if not tmp then
80203: LD_VAR 0 1
80207: NOT
80208: IFFALSE 80212
// exit ;
80210: GO 80225
// DestroyUnit ( tmp [ 1 ] ) ;
80212: LD_VAR 0 1
80216: PUSH
80217: LD_INT 1
80219: ARRAY
80220: PPUSH
80221: CALL_OW 65
// end ;
80225: PPOPN 1
80227: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80228: LD_EXP 74
80232: PUSH
80233: LD_EXP 112
80237: AND
80238: IFFALSE 80367
80240: GO 80242
80242: DISABLE
80243: LD_INT 0
80245: PPUSH
// begin uc_side := 0 ;
80246: LD_ADDR_OWVAR 20
80250: PUSH
80251: LD_INT 0
80253: ST_TO_ADDR
// uc_nation := nation_arabian ;
80254: LD_ADDR_OWVAR 21
80258: PUSH
80259: LD_INT 2
80261: ST_TO_ADDR
// hc_gallery :=  ;
80262: LD_ADDR_OWVAR 33
80266: PUSH
80267: LD_STRING 
80269: ST_TO_ADDR
// hc_name :=  ;
80270: LD_ADDR_OWVAR 26
80274: PUSH
80275: LD_STRING 
80277: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80278: LD_INT 1
80280: PPUSH
80281: LD_INT 11
80283: PPUSH
80284: LD_INT 10
80286: PPUSH
80287: CALL_OW 380
// un := CreateHuman ;
80291: LD_ADDR_VAR 0 1
80295: PUSH
80296: CALL_OW 44
80300: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80301: LD_VAR 0 1
80305: PPUSH
80306: LD_INT 1
80308: PPUSH
80309: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80313: LD_INT 35
80315: PPUSH
80316: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80320: LD_VAR 0 1
80324: PPUSH
80325: LD_INT 22
80327: PUSH
80328: LD_OWVAR 2
80332: PUSH
80333: EMPTY
80334: LIST
80335: LIST
80336: PPUSH
80337: CALL_OW 69
80341: PPUSH
80342: LD_VAR 0 1
80346: PPUSH
80347: CALL_OW 74
80351: PPUSH
80352: CALL_OW 115
// until IsDead ( un ) ;
80356: LD_VAR 0 1
80360: PPUSH
80361: CALL_OW 301
80365: IFFALSE 80313
// end ;
80367: PPOPN 1
80369: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80370: LD_EXP 74
80374: PUSH
80375: LD_EXP 114
80379: AND
80380: IFFALSE 80392
80382: GO 80384
80384: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80385: LD_STRING earthquake(getX(game), 0, 32)
80387: PPUSH
80388: CALL_OW 559
80392: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80393: LD_EXP 74
80397: PUSH
80398: LD_EXP 115
80402: AND
80403: IFFALSE 80494
80405: GO 80407
80407: DISABLE
80408: LD_INT 0
80410: PPUSH
// begin enable ;
80411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80412: LD_ADDR_VAR 0 1
80416: PUSH
80417: LD_INT 22
80419: PUSH
80420: LD_OWVAR 2
80424: PUSH
80425: EMPTY
80426: LIST
80427: LIST
80428: PUSH
80429: LD_INT 21
80431: PUSH
80432: LD_INT 2
80434: PUSH
80435: EMPTY
80436: LIST
80437: LIST
80438: PUSH
80439: LD_INT 33
80441: PUSH
80442: LD_INT 3
80444: PUSH
80445: EMPTY
80446: LIST
80447: LIST
80448: PUSH
80449: EMPTY
80450: LIST
80451: LIST
80452: LIST
80453: PPUSH
80454: CALL_OW 69
80458: ST_TO_ADDR
// if not tmp then
80459: LD_VAR 0 1
80463: NOT
80464: IFFALSE 80468
// exit ;
80466: GO 80494
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80468: LD_VAR 0 1
80472: PUSH
80473: LD_INT 1
80475: PPUSH
80476: LD_VAR 0 1
80480: PPUSH
80481: CALL_OW 12
80485: ARRAY
80486: PPUSH
80487: LD_INT 1
80489: PPUSH
80490: CALL_OW 234
// end ;
80494: PPOPN 1
80496: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
80497: LD_EXP 74
80501: PUSH
80502: LD_EXP 116
80506: AND
80507: IFFALSE 80648
80509: GO 80511
80511: DISABLE
80512: LD_INT 0
80514: PPUSH
80515: PPUSH
80516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80517: LD_ADDR_VAR 0 3
80521: PUSH
80522: LD_INT 22
80524: PUSH
80525: LD_OWVAR 2
80529: PUSH
80530: EMPTY
80531: LIST
80532: LIST
80533: PUSH
80534: LD_INT 25
80536: PUSH
80537: LD_INT 1
80539: PUSH
80540: EMPTY
80541: LIST
80542: LIST
80543: PUSH
80544: EMPTY
80545: LIST
80546: LIST
80547: PPUSH
80548: CALL_OW 69
80552: ST_TO_ADDR
// if not tmp then
80553: LD_VAR 0 3
80557: NOT
80558: IFFALSE 80562
// exit ;
80560: GO 80648
// un := tmp [ rand ( 1 , tmp ) ] ;
80562: LD_ADDR_VAR 0 2
80566: PUSH
80567: LD_VAR 0 3
80571: PUSH
80572: LD_INT 1
80574: PPUSH
80575: LD_VAR 0 3
80579: PPUSH
80580: CALL_OW 12
80584: ARRAY
80585: ST_TO_ADDR
// if Crawls ( un ) then
80586: LD_VAR 0 2
80590: PPUSH
80591: CALL_OW 318
80595: IFFALSE 80606
// ComWalk ( un ) ;
80597: LD_VAR 0 2
80601: PPUSH
80602: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
80606: LD_VAR 0 2
80610: PPUSH
80611: LD_INT 9
80613: PPUSH
80614: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
80618: LD_INT 28
80620: PPUSH
80621: LD_OWVAR 2
80625: PPUSH
80626: LD_INT 2
80628: PPUSH
80629: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
80633: LD_INT 29
80635: PPUSH
80636: LD_OWVAR 2
80640: PPUSH
80641: LD_INT 2
80643: PPUSH
80644: CALL_OW 322
// end ;
80648: PPOPN 3
80650: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
80651: LD_EXP 74
80655: PUSH
80656: LD_EXP 117
80660: AND
80661: IFFALSE 80772
80663: GO 80665
80665: DISABLE
80666: LD_INT 0
80668: PPUSH
80669: PPUSH
80670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80671: LD_ADDR_VAR 0 3
80675: PUSH
80676: LD_INT 22
80678: PUSH
80679: LD_OWVAR 2
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: LD_INT 25
80690: PUSH
80691: LD_INT 1
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: PUSH
80698: EMPTY
80699: LIST
80700: LIST
80701: PPUSH
80702: CALL_OW 69
80706: ST_TO_ADDR
// if not tmp then
80707: LD_VAR 0 3
80711: NOT
80712: IFFALSE 80716
// exit ;
80714: GO 80772
// un := tmp [ rand ( 1 , tmp ) ] ;
80716: LD_ADDR_VAR 0 2
80720: PUSH
80721: LD_VAR 0 3
80725: PUSH
80726: LD_INT 1
80728: PPUSH
80729: LD_VAR 0 3
80733: PPUSH
80734: CALL_OW 12
80738: ARRAY
80739: ST_TO_ADDR
// if Crawls ( un ) then
80740: LD_VAR 0 2
80744: PPUSH
80745: CALL_OW 318
80749: IFFALSE 80760
// ComWalk ( un ) ;
80751: LD_VAR 0 2
80755: PPUSH
80756: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80760: LD_VAR 0 2
80764: PPUSH
80765: LD_INT 8
80767: PPUSH
80768: CALL_OW 336
// end ;
80772: PPOPN 3
80774: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
80775: LD_EXP 74
80779: PUSH
80780: LD_EXP 118
80784: AND
80785: IFFALSE 80929
80787: GO 80789
80789: DISABLE
80790: LD_INT 0
80792: PPUSH
80793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
80794: LD_ADDR_VAR 0 2
80798: PUSH
80799: LD_INT 22
80801: PUSH
80802: LD_OWVAR 2
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: PUSH
80811: LD_INT 21
80813: PUSH
80814: LD_INT 2
80816: PUSH
80817: EMPTY
80818: LIST
80819: LIST
80820: PUSH
80821: LD_INT 2
80823: PUSH
80824: LD_INT 34
80826: PUSH
80827: LD_INT 12
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: PUSH
80834: LD_INT 34
80836: PUSH
80837: LD_INT 51
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: PUSH
80844: LD_INT 34
80846: PUSH
80847: LD_INT 32
80849: PUSH
80850: EMPTY
80851: LIST
80852: LIST
80853: PUSH
80854: EMPTY
80855: LIST
80856: LIST
80857: LIST
80858: LIST
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: LIST
80864: PPUSH
80865: CALL_OW 69
80869: ST_TO_ADDR
// if not tmp then
80870: LD_VAR 0 2
80874: NOT
80875: IFFALSE 80879
// exit ;
80877: GO 80929
// for i in tmp do
80879: LD_ADDR_VAR 0 1
80883: PUSH
80884: LD_VAR 0 2
80888: PUSH
80889: FOR_IN
80890: IFFALSE 80927
// if GetCargo ( i , mat_artifact ) = 0 then
80892: LD_VAR 0 1
80896: PPUSH
80897: LD_INT 4
80899: PPUSH
80900: CALL_OW 289
80904: PUSH
80905: LD_INT 0
80907: EQUAL
80908: IFFALSE 80925
// SetCargo ( i , mat_siberit , 100 ) ;
80910: LD_VAR 0 1
80914: PPUSH
80915: LD_INT 3
80917: PPUSH
80918: LD_INT 100
80920: PPUSH
80921: CALL_OW 290
80925: GO 80889
80927: POP
80928: POP
// end ;
80929: PPOPN 2
80931: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
80932: LD_EXP 74
80936: PUSH
80937: LD_EXP 119
80941: AND
80942: IFFALSE 81125
80944: GO 80946
80946: DISABLE
80947: LD_INT 0
80949: PPUSH
80950: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80951: LD_ADDR_VAR 0 2
80955: PUSH
80956: LD_INT 22
80958: PUSH
80959: LD_OWVAR 2
80963: PUSH
80964: EMPTY
80965: LIST
80966: LIST
80967: PPUSH
80968: CALL_OW 69
80972: ST_TO_ADDR
// if not tmp then
80973: LD_VAR 0 2
80977: NOT
80978: IFFALSE 80982
// exit ;
80980: GO 81125
// for i := 1 to 2 do
80982: LD_ADDR_VAR 0 1
80986: PUSH
80987: DOUBLE
80988: LD_INT 1
80990: DEC
80991: ST_TO_ADDR
80992: LD_INT 2
80994: PUSH
80995: FOR_TO
80996: IFFALSE 81123
// begin uc_side := your_side ;
80998: LD_ADDR_OWVAR 20
81002: PUSH
81003: LD_OWVAR 2
81007: ST_TO_ADDR
// uc_nation := nation_american ;
81008: LD_ADDR_OWVAR 21
81012: PUSH
81013: LD_INT 1
81015: ST_TO_ADDR
// vc_chassis := us_morphling ;
81016: LD_ADDR_OWVAR 37
81020: PUSH
81021: LD_INT 5
81023: ST_TO_ADDR
// vc_engine := engine_siberite ;
81024: LD_ADDR_OWVAR 39
81028: PUSH
81029: LD_INT 3
81031: ST_TO_ADDR
// vc_control := control_computer ;
81032: LD_ADDR_OWVAR 38
81036: PUSH
81037: LD_INT 3
81039: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81040: LD_ADDR_OWVAR 40
81044: PUSH
81045: LD_INT 10
81047: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81048: LD_VAR 0 2
81052: PUSH
81053: LD_INT 1
81055: ARRAY
81056: PPUSH
81057: CALL_OW 310
81061: NOT
81062: IFFALSE 81109
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81064: CALL_OW 45
81068: PPUSH
81069: LD_VAR 0 2
81073: PUSH
81074: LD_INT 1
81076: ARRAY
81077: PPUSH
81078: CALL_OW 250
81082: PPUSH
81083: LD_VAR 0 2
81087: PUSH
81088: LD_INT 1
81090: ARRAY
81091: PPUSH
81092: CALL_OW 251
81096: PPUSH
81097: LD_INT 12
81099: PPUSH
81100: LD_INT 1
81102: PPUSH
81103: CALL_OW 50
81107: GO 81121
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81109: CALL_OW 45
81113: PPUSH
81114: LD_INT 1
81116: PPUSH
81117: CALL_OW 51
// end ;
81121: GO 80995
81123: POP
81124: POP
// end ;
81125: PPOPN 2
81127: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81128: LD_EXP 74
81132: PUSH
81133: LD_EXP 120
81137: AND
81138: IFFALSE 81360
81140: GO 81142
81142: DISABLE
81143: LD_INT 0
81145: PPUSH
81146: PPUSH
81147: PPUSH
81148: PPUSH
81149: PPUSH
81150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81151: LD_ADDR_VAR 0 6
81155: PUSH
81156: LD_INT 22
81158: PUSH
81159: LD_OWVAR 2
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: PUSH
81168: LD_INT 21
81170: PUSH
81171: LD_INT 1
81173: PUSH
81174: EMPTY
81175: LIST
81176: LIST
81177: PUSH
81178: LD_INT 3
81180: PUSH
81181: LD_INT 23
81183: PUSH
81184: LD_INT 0
81186: PUSH
81187: EMPTY
81188: LIST
81189: LIST
81190: PUSH
81191: EMPTY
81192: LIST
81193: LIST
81194: PUSH
81195: EMPTY
81196: LIST
81197: LIST
81198: LIST
81199: PPUSH
81200: CALL_OW 69
81204: ST_TO_ADDR
// if not tmp then
81205: LD_VAR 0 6
81209: NOT
81210: IFFALSE 81214
// exit ;
81212: GO 81360
// s1 := rand ( 1 , 4 ) ;
81214: LD_ADDR_VAR 0 2
81218: PUSH
81219: LD_INT 1
81221: PPUSH
81222: LD_INT 4
81224: PPUSH
81225: CALL_OW 12
81229: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81230: LD_ADDR_VAR 0 4
81234: PUSH
81235: LD_VAR 0 6
81239: PUSH
81240: LD_INT 1
81242: ARRAY
81243: PPUSH
81244: LD_VAR 0 2
81248: PPUSH
81249: CALL_OW 259
81253: ST_TO_ADDR
// if s1 = 1 then
81254: LD_VAR 0 2
81258: PUSH
81259: LD_INT 1
81261: EQUAL
81262: IFFALSE 81282
// s2 := rand ( 2 , 4 ) else
81264: LD_ADDR_VAR 0 3
81268: PUSH
81269: LD_INT 2
81271: PPUSH
81272: LD_INT 4
81274: PPUSH
81275: CALL_OW 12
81279: ST_TO_ADDR
81280: GO 81290
// s2 := 1 ;
81282: LD_ADDR_VAR 0 3
81286: PUSH
81287: LD_INT 1
81289: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81290: LD_ADDR_VAR 0 5
81294: PUSH
81295: LD_VAR 0 6
81299: PUSH
81300: LD_INT 1
81302: ARRAY
81303: PPUSH
81304: LD_VAR 0 3
81308: PPUSH
81309: CALL_OW 259
81313: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81314: LD_VAR 0 6
81318: PUSH
81319: LD_INT 1
81321: ARRAY
81322: PPUSH
81323: LD_VAR 0 2
81327: PPUSH
81328: LD_VAR 0 5
81332: PPUSH
81333: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81337: LD_VAR 0 6
81341: PUSH
81342: LD_INT 1
81344: ARRAY
81345: PPUSH
81346: LD_VAR 0 3
81350: PPUSH
81351: LD_VAR 0 4
81355: PPUSH
81356: CALL_OW 237
// end ;
81360: PPOPN 6
81362: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81363: LD_EXP 74
81367: PUSH
81368: LD_EXP 121
81372: AND
81373: IFFALSE 81452
81375: GO 81377
81377: DISABLE
81378: LD_INT 0
81380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81381: LD_ADDR_VAR 0 1
81385: PUSH
81386: LD_INT 22
81388: PUSH
81389: LD_OWVAR 2
81393: PUSH
81394: EMPTY
81395: LIST
81396: LIST
81397: PUSH
81398: LD_INT 30
81400: PUSH
81401: LD_INT 3
81403: PUSH
81404: EMPTY
81405: LIST
81406: LIST
81407: PUSH
81408: EMPTY
81409: LIST
81410: LIST
81411: PPUSH
81412: CALL_OW 69
81416: ST_TO_ADDR
// if not tmp then
81417: LD_VAR 0 1
81421: NOT
81422: IFFALSE 81426
// exit ;
81424: GO 81452
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81426: LD_VAR 0 1
81430: PUSH
81431: LD_INT 1
81433: PPUSH
81434: LD_VAR 0 1
81438: PPUSH
81439: CALL_OW 12
81443: ARRAY
81444: PPUSH
81445: LD_INT 1
81447: PPUSH
81448: CALL_OW 234
// end ;
81452: PPOPN 1
81454: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
81455: LD_EXP 74
81459: PUSH
81460: LD_EXP 122
81464: AND
81465: IFFALSE 81577
81467: GO 81469
81469: DISABLE
81470: LD_INT 0
81472: PPUSH
81473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
81474: LD_ADDR_VAR 0 2
81478: PUSH
81479: LD_INT 22
81481: PUSH
81482: LD_OWVAR 2
81486: PUSH
81487: EMPTY
81488: LIST
81489: LIST
81490: PUSH
81491: LD_INT 2
81493: PUSH
81494: LD_INT 30
81496: PUSH
81497: LD_INT 27
81499: PUSH
81500: EMPTY
81501: LIST
81502: LIST
81503: PUSH
81504: LD_INT 30
81506: PUSH
81507: LD_INT 26
81509: PUSH
81510: EMPTY
81511: LIST
81512: LIST
81513: PUSH
81514: LD_INT 30
81516: PUSH
81517: LD_INT 28
81519: PUSH
81520: EMPTY
81521: LIST
81522: LIST
81523: PUSH
81524: EMPTY
81525: LIST
81526: LIST
81527: LIST
81528: LIST
81529: PUSH
81530: EMPTY
81531: LIST
81532: LIST
81533: PPUSH
81534: CALL_OW 69
81538: ST_TO_ADDR
// if not tmp then
81539: LD_VAR 0 2
81543: NOT
81544: IFFALSE 81548
// exit ;
81546: GO 81577
// for i in tmp do
81548: LD_ADDR_VAR 0 1
81552: PUSH
81553: LD_VAR 0 2
81557: PUSH
81558: FOR_IN
81559: IFFALSE 81575
// SetLives ( i , 1 ) ;
81561: LD_VAR 0 1
81565: PPUSH
81566: LD_INT 1
81568: PPUSH
81569: CALL_OW 234
81573: GO 81558
81575: POP
81576: POP
// end ;
81577: PPOPN 2
81579: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
81580: LD_EXP 74
81584: PUSH
81585: LD_EXP 123
81589: AND
81590: IFFALSE 81877
81592: GO 81594
81594: DISABLE
81595: LD_INT 0
81597: PPUSH
81598: PPUSH
81599: PPUSH
// begin i := rand ( 1 , 7 ) ;
81600: LD_ADDR_VAR 0 1
81604: PUSH
81605: LD_INT 1
81607: PPUSH
81608: LD_INT 7
81610: PPUSH
81611: CALL_OW 12
81615: ST_TO_ADDR
// case i of 1 :
81616: LD_VAR 0 1
81620: PUSH
81621: LD_INT 1
81623: DOUBLE
81624: EQUAL
81625: IFTRUE 81629
81627: GO 81639
81629: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
81630: LD_STRING earthquake(getX(game), 0, 32)
81632: PPUSH
81633: CALL_OW 559
81637: GO 81877
81639: LD_INT 2
81641: DOUBLE
81642: EQUAL
81643: IFTRUE 81647
81645: GO 81661
81647: POP
// begin ToLua ( displayStucuk(); ) ;
81648: LD_STRING displayStucuk();
81650: PPUSH
81651: CALL_OW 559
// ResetFog ;
81655: CALL_OW 335
// end ; 3 :
81659: GO 81877
81661: LD_INT 3
81663: DOUBLE
81664: EQUAL
81665: IFTRUE 81669
81667: GO 81773
81669: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81670: LD_ADDR_VAR 0 2
81674: PUSH
81675: LD_INT 22
81677: PUSH
81678: LD_OWVAR 2
81682: PUSH
81683: EMPTY
81684: LIST
81685: LIST
81686: PUSH
81687: LD_INT 25
81689: PUSH
81690: LD_INT 1
81692: PUSH
81693: EMPTY
81694: LIST
81695: LIST
81696: PUSH
81697: EMPTY
81698: LIST
81699: LIST
81700: PPUSH
81701: CALL_OW 69
81705: ST_TO_ADDR
// if not tmp then
81706: LD_VAR 0 2
81710: NOT
81711: IFFALSE 81715
// exit ;
81713: GO 81877
// un := tmp [ rand ( 1 , tmp ) ] ;
81715: LD_ADDR_VAR 0 3
81719: PUSH
81720: LD_VAR 0 2
81724: PUSH
81725: LD_INT 1
81727: PPUSH
81728: LD_VAR 0 2
81732: PPUSH
81733: CALL_OW 12
81737: ARRAY
81738: ST_TO_ADDR
// if Crawls ( un ) then
81739: LD_VAR 0 3
81743: PPUSH
81744: CALL_OW 318
81748: IFFALSE 81759
// ComWalk ( un ) ;
81750: LD_VAR 0 3
81754: PPUSH
81755: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81759: LD_VAR 0 3
81763: PPUSH
81764: LD_INT 8
81766: PPUSH
81767: CALL_OW 336
// end ; 4 :
81771: GO 81877
81773: LD_INT 4
81775: DOUBLE
81776: EQUAL
81777: IFTRUE 81781
81779: GO 81855
81781: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81782: LD_ADDR_VAR 0 2
81786: PUSH
81787: LD_INT 22
81789: PUSH
81790: LD_OWVAR 2
81794: PUSH
81795: EMPTY
81796: LIST
81797: LIST
81798: PUSH
81799: LD_INT 30
81801: PUSH
81802: LD_INT 29
81804: PUSH
81805: EMPTY
81806: LIST
81807: LIST
81808: PUSH
81809: EMPTY
81810: LIST
81811: LIST
81812: PPUSH
81813: CALL_OW 69
81817: ST_TO_ADDR
// if not tmp then
81818: LD_VAR 0 2
81822: NOT
81823: IFFALSE 81827
// exit ;
81825: GO 81877
// CenterNowOnUnits ( tmp [ 1 ] ) ;
81827: LD_VAR 0 2
81831: PUSH
81832: LD_INT 1
81834: ARRAY
81835: PPUSH
81836: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
81840: LD_VAR 0 2
81844: PUSH
81845: LD_INT 1
81847: ARRAY
81848: PPUSH
81849: CALL_OW 65
// end ; 5 .. 7 :
81853: GO 81877
81855: LD_INT 5
81857: DOUBLE
81858: GREATEREQUAL
81859: IFFALSE 81867
81861: LD_INT 7
81863: DOUBLE
81864: LESSEQUAL
81865: IFTRUE 81869
81867: GO 81876
81869: POP
// StreamSibBomb ; end ;
81870: CALL 78114 0 0
81874: GO 81877
81876: POP
// end ;
81877: PPOPN 3
81879: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
81880: LD_EXP 74
81884: PUSH
81885: LD_EXP 124
81889: AND
81890: IFFALSE 82046
81892: GO 81894
81894: DISABLE
81895: LD_INT 0
81897: PPUSH
81898: PPUSH
81899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
81900: LD_ADDR_VAR 0 2
81904: PUSH
81905: LD_INT 81
81907: PUSH
81908: LD_OWVAR 2
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: PUSH
81917: LD_INT 2
81919: PUSH
81920: LD_INT 21
81922: PUSH
81923: LD_INT 1
81925: PUSH
81926: EMPTY
81927: LIST
81928: LIST
81929: PUSH
81930: LD_INT 21
81932: PUSH
81933: LD_INT 2
81935: PUSH
81936: EMPTY
81937: LIST
81938: LIST
81939: PUSH
81940: EMPTY
81941: LIST
81942: LIST
81943: LIST
81944: PUSH
81945: EMPTY
81946: LIST
81947: LIST
81948: PPUSH
81949: CALL_OW 69
81953: ST_TO_ADDR
// if not tmp then
81954: LD_VAR 0 2
81958: NOT
81959: IFFALSE 81963
// exit ;
81961: GO 82046
// p := 0 ;
81963: LD_ADDR_VAR 0 3
81967: PUSH
81968: LD_INT 0
81970: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81971: LD_INT 35
81973: PPUSH
81974: CALL_OW 67
// p := p + 1 ;
81978: LD_ADDR_VAR 0 3
81982: PUSH
81983: LD_VAR 0 3
81987: PUSH
81988: LD_INT 1
81990: PLUS
81991: ST_TO_ADDR
// for i in tmp do
81992: LD_ADDR_VAR 0 1
81996: PUSH
81997: LD_VAR 0 2
82001: PUSH
82002: FOR_IN
82003: IFFALSE 82034
// if GetLives ( i ) < 1000 then
82005: LD_VAR 0 1
82009: PPUSH
82010: CALL_OW 256
82014: PUSH
82015: LD_INT 1000
82017: LESS
82018: IFFALSE 82032
// SetLives ( i , 1000 ) ;
82020: LD_VAR 0 1
82024: PPUSH
82025: LD_INT 1000
82027: PPUSH
82028: CALL_OW 234
82032: GO 82002
82034: POP
82035: POP
// until p > 20 ;
82036: LD_VAR 0 3
82040: PUSH
82041: LD_INT 20
82043: GREATER
82044: IFFALSE 81971
// end ;
82046: PPOPN 3
82048: END
// every 0 0$1 trigger StreamModeActive and sTime do
82049: LD_EXP 74
82053: PUSH
82054: LD_EXP 125
82058: AND
82059: IFFALSE 82094
82061: GO 82063
82063: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82064: LD_INT 28
82066: PPUSH
82067: LD_OWVAR 2
82071: PPUSH
82072: LD_INT 2
82074: PPUSH
82075: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82079: LD_INT 30
82081: PPUSH
82082: LD_OWVAR 2
82086: PPUSH
82087: LD_INT 2
82089: PPUSH
82090: CALL_OW 322
// end ;
82094: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82095: LD_EXP 74
82099: PUSH
82100: LD_EXP 126
82104: AND
82105: IFFALSE 82226
82107: GO 82109
82109: DISABLE
82110: LD_INT 0
82112: PPUSH
82113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82114: LD_ADDR_VAR 0 2
82118: PUSH
82119: LD_INT 22
82121: PUSH
82122: LD_OWVAR 2
82126: PUSH
82127: EMPTY
82128: LIST
82129: LIST
82130: PUSH
82131: LD_INT 21
82133: PUSH
82134: LD_INT 1
82136: PUSH
82137: EMPTY
82138: LIST
82139: LIST
82140: PUSH
82141: LD_INT 3
82143: PUSH
82144: LD_INT 23
82146: PUSH
82147: LD_INT 0
82149: PUSH
82150: EMPTY
82151: LIST
82152: LIST
82153: PUSH
82154: EMPTY
82155: LIST
82156: LIST
82157: PUSH
82158: EMPTY
82159: LIST
82160: LIST
82161: LIST
82162: PPUSH
82163: CALL_OW 69
82167: ST_TO_ADDR
// if not tmp then
82168: LD_VAR 0 2
82172: NOT
82173: IFFALSE 82177
// exit ;
82175: GO 82226
// for i in tmp do
82177: LD_ADDR_VAR 0 1
82181: PUSH
82182: LD_VAR 0 2
82186: PUSH
82187: FOR_IN
82188: IFFALSE 82224
// begin if Crawls ( i ) then
82190: LD_VAR 0 1
82194: PPUSH
82195: CALL_OW 318
82199: IFFALSE 82210
// ComWalk ( i ) ;
82201: LD_VAR 0 1
82205: PPUSH
82206: CALL_OW 138
// SetClass ( i , 2 ) ;
82210: LD_VAR 0 1
82214: PPUSH
82215: LD_INT 2
82217: PPUSH
82218: CALL_OW 336
// end ;
82222: GO 82187
82224: POP
82225: POP
// end ;
82226: PPOPN 2
82228: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82229: LD_EXP 74
82233: PUSH
82234: LD_EXP 127
82238: AND
82239: IFFALSE 82527
82241: GO 82243
82243: DISABLE
82244: LD_INT 0
82246: PPUSH
82247: PPUSH
82248: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82249: LD_OWVAR 2
82253: PPUSH
82254: LD_INT 9
82256: PPUSH
82257: LD_INT 1
82259: PPUSH
82260: LD_INT 1
82262: PPUSH
82263: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82267: LD_INT 9
82269: PPUSH
82270: LD_OWVAR 2
82274: PPUSH
82275: CALL_OW 343
// uc_side := 9 ;
82279: LD_ADDR_OWVAR 20
82283: PUSH
82284: LD_INT 9
82286: ST_TO_ADDR
// uc_nation := 2 ;
82287: LD_ADDR_OWVAR 21
82291: PUSH
82292: LD_INT 2
82294: ST_TO_ADDR
// hc_name := Dark Warrior ;
82295: LD_ADDR_OWVAR 26
82299: PUSH
82300: LD_STRING Dark Warrior
82302: ST_TO_ADDR
// hc_gallery :=  ;
82303: LD_ADDR_OWVAR 33
82307: PUSH
82308: LD_STRING 
82310: ST_TO_ADDR
// hc_noskilllimit := true ;
82311: LD_ADDR_OWVAR 76
82315: PUSH
82316: LD_INT 1
82318: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82319: LD_ADDR_OWVAR 31
82323: PUSH
82324: LD_INT 30
82326: PUSH
82327: LD_INT 30
82329: PUSH
82330: LD_INT 30
82332: PUSH
82333: LD_INT 30
82335: PUSH
82336: EMPTY
82337: LIST
82338: LIST
82339: LIST
82340: LIST
82341: ST_TO_ADDR
// un := CreateHuman ;
82342: LD_ADDR_VAR 0 3
82346: PUSH
82347: CALL_OW 44
82351: ST_TO_ADDR
// hc_noskilllimit := false ;
82352: LD_ADDR_OWVAR 76
82356: PUSH
82357: LD_INT 0
82359: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82360: LD_VAR 0 3
82364: PPUSH
82365: LD_INT 1
82367: PPUSH
82368: CALL_OW 51
// ToLua ( playRanger() ) ;
82372: LD_STRING playRanger()
82374: PPUSH
82375: CALL_OW 559
// p := 0 ;
82379: LD_ADDR_VAR 0 2
82383: PUSH
82384: LD_INT 0
82386: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82387: LD_INT 35
82389: PPUSH
82390: CALL_OW 67
// p := p + 1 ;
82394: LD_ADDR_VAR 0 2
82398: PUSH
82399: LD_VAR 0 2
82403: PUSH
82404: LD_INT 1
82406: PLUS
82407: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82408: LD_VAR 0 3
82412: PPUSH
82413: CALL_OW 256
82417: PUSH
82418: LD_INT 1000
82420: LESS
82421: IFFALSE 82435
// SetLives ( un , 1000 ) ;
82423: LD_VAR 0 3
82427: PPUSH
82428: LD_INT 1000
82430: PPUSH
82431: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
82435: LD_VAR 0 3
82439: PPUSH
82440: LD_INT 81
82442: PUSH
82443: LD_OWVAR 2
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PUSH
82452: LD_INT 91
82454: PUSH
82455: LD_VAR 0 3
82459: PUSH
82460: LD_INT 30
82462: PUSH
82463: EMPTY
82464: LIST
82465: LIST
82466: LIST
82467: PUSH
82468: EMPTY
82469: LIST
82470: LIST
82471: PPUSH
82472: CALL_OW 69
82476: PPUSH
82477: LD_VAR 0 3
82481: PPUSH
82482: CALL_OW 74
82486: PPUSH
82487: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
82491: LD_VAR 0 2
82495: PUSH
82496: LD_INT 80
82498: GREATER
82499: PUSH
82500: LD_VAR 0 3
82504: PPUSH
82505: CALL_OW 301
82509: OR
82510: IFFALSE 82387
// if un then
82512: LD_VAR 0 3
82516: IFFALSE 82527
// RemoveUnit ( un ) ;
82518: LD_VAR 0 3
82522: PPUSH
82523: CALL_OW 64
// end ;
82527: PPOPN 3
82529: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
82530: LD_EXP 128
82534: IFFALSE 82650
82536: GO 82538
82538: DISABLE
82539: LD_INT 0
82541: PPUSH
82542: PPUSH
82543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82544: LD_ADDR_VAR 0 2
82548: PUSH
82549: LD_INT 81
82551: PUSH
82552: LD_OWVAR 2
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: PUSH
82561: LD_INT 21
82563: PUSH
82564: LD_INT 1
82566: PUSH
82567: EMPTY
82568: LIST
82569: LIST
82570: PUSH
82571: EMPTY
82572: LIST
82573: LIST
82574: PPUSH
82575: CALL_OW 69
82579: ST_TO_ADDR
// ToLua ( playComputer() ) ;
82580: LD_STRING playComputer()
82582: PPUSH
82583: CALL_OW 559
// if not tmp then
82587: LD_VAR 0 2
82591: NOT
82592: IFFALSE 82596
// exit ;
82594: GO 82650
// for i in tmp do
82596: LD_ADDR_VAR 0 1
82600: PUSH
82601: LD_VAR 0 2
82605: PUSH
82606: FOR_IN
82607: IFFALSE 82648
// for j := 1 to 4 do
82609: LD_ADDR_VAR 0 3
82613: PUSH
82614: DOUBLE
82615: LD_INT 1
82617: DEC
82618: ST_TO_ADDR
82619: LD_INT 4
82621: PUSH
82622: FOR_TO
82623: IFFALSE 82644
// SetSkill ( i , j , 10 ) ;
82625: LD_VAR 0 1
82629: PPUSH
82630: LD_VAR 0 3
82634: PPUSH
82635: LD_INT 10
82637: PPUSH
82638: CALL_OW 237
82642: GO 82622
82644: POP
82645: POP
82646: GO 82606
82648: POP
82649: POP
// end ;
82650: PPOPN 3
82652: END
// every 0 0$1 trigger s30 do var i , tmp ;
82653: LD_EXP 129
82657: IFFALSE 82726
82659: GO 82661
82661: DISABLE
82662: LD_INT 0
82664: PPUSH
82665: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82666: LD_ADDR_VAR 0 2
82670: PUSH
82671: LD_INT 22
82673: PUSH
82674: LD_OWVAR 2
82678: PUSH
82679: EMPTY
82680: LIST
82681: LIST
82682: PPUSH
82683: CALL_OW 69
82687: ST_TO_ADDR
// if not tmp then
82688: LD_VAR 0 2
82692: NOT
82693: IFFALSE 82697
// exit ;
82695: GO 82726
// for i in tmp do
82697: LD_ADDR_VAR 0 1
82701: PUSH
82702: LD_VAR 0 2
82706: PUSH
82707: FOR_IN
82708: IFFALSE 82724
// SetLives ( i , 300 ) ;
82710: LD_VAR 0 1
82714: PPUSH
82715: LD_INT 300
82717: PPUSH
82718: CALL_OW 234
82722: GO 82707
82724: POP
82725: POP
// end ;
82726: PPOPN 2
82728: END
// every 0 0$1 trigger s60 do var i , tmp ;
82729: LD_EXP 130
82733: IFFALSE 82802
82735: GO 82737
82737: DISABLE
82738: LD_INT 0
82740: PPUSH
82741: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82742: LD_ADDR_VAR 0 2
82746: PUSH
82747: LD_INT 22
82749: PUSH
82750: LD_OWVAR 2
82754: PUSH
82755: EMPTY
82756: LIST
82757: LIST
82758: PPUSH
82759: CALL_OW 69
82763: ST_TO_ADDR
// if not tmp then
82764: LD_VAR 0 2
82768: NOT
82769: IFFALSE 82773
// exit ;
82771: GO 82802
// for i in tmp do
82773: LD_ADDR_VAR 0 1
82777: PUSH
82778: LD_VAR 0 2
82782: PUSH
82783: FOR_IN
82784: IFFALSE 82800
// SetLives ( i , 600 ) ;
82786: LD_VAR 0 1
82790: PPUSH
82791: LD_INT 600
82793: PPUSH
82794: CALL_OW 234
82798: GO 82783
82800: POP
82801: POP
// end ;
82802: PPOPN 2
82804: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
82805: LD_INT 0
82807: PPUSH
// case cmd of 301 :
82808: LD_VAR 0 1
82812: PUSH
82813: LD_INT 301
82815: DOUBLE
82816: EQUAL
82817: IFTRUE 82821
82819: GO 82853
82821: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
82822: LD_VAR 0 6
82826: PPUSH
82827: LD_VAR 0 7
82831: PPUSH
82832: LD_VAR 0 8
82836: PPUSH
82837: LD_VAR 0 4
82841: PPUSH
82842: LD_VAR 0 5
82846: PPUSH
82847: CALL 84054 0 5
82851: GO 82974
82853: LD_INT 302
82855: DOUBLE
82856: EQUAL
82857: IFTRUE 82861
82859: GO 82898
82861: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
82862: LD_VAR 0 6
82866: PPUSH
82867: LD_VAR 0 7
82871: PPUSH
82872: LD_VAR 0 8
82876: PPUSH
82877: LD_VAR 0 9
82881: PPUSH
82882: LD_VAR 0 4
82886: PPUSH
82887: LD_VAR 0 5
82891: PPUSH
82892: CALL 84145 0 6
82896: GO 82974
82898: LD_INT 303
82900: DOUBLE
82901: EQUAL
82902: IFTRUE 82906
82904: GO 82943
82906: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
82907: LD_VAR 0 6
82911: PPUSH
82912: LD_VAR 0 7
82916: PPUSH
82917: LD_VAR 0 8
82921: PPUSH
82922: LD_VAR 0 9
82926: PPUSH
82927: LD_VAR 0 4
82931: PPUSH
82932: LD_VAR 0 5
82936: PPUSH
82937: CALL 82979 0 6
82941: GO 82974
82943: LD_INT 304
82945: DOUBLE
82946: EQUAL
82947: IFTRUE 82951
82949: GO 82973
82951: POP
// hHackTeleport ( unit , x , y ) ; end ;
82952: LD_VAR 0 2
82956: PPUSH
82957: LD_VAR 0 4
82961: PPUSH
82962: LD_VAR 0 5
82966: PPUSH
82967: CALL 84738 0 3
82971: GO 82974
82973: POP
// end ;
82974: LD_VAR 0 12
82978: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
82979: LD_INT 0
82981: PPUSH
82982: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
82983: LD_VAR 0 1
82987: PUSH
82988: LD_INT 1
82990: LESS
82991: PUSH
82992: LD_VAR 0 1
82996: PUSH
82997: LD_INT 3
82999: GREATER
83000: OR
83001: PUSH
83002: LD_VAR 0 5
83006: PPUSH
83007: LD_VAR 0 6
83011: PPUSH
83012: CALL_OW 428
83016: OR
83017: IFFALSE 83021
// exit ;
83019: GO 83741
// uc_side := your_side ;
83021: LD_ADDR_OWVAR 20
83025: PUSH
83026: LD_OWVAR 2
83030: ST_TO_ADDR
// uc_nation := nation ;
83031: LD_ADDR_OWVAR 21
83035: PUSH
83036: LD_VAR 0 1
83040: ST_TO_ADDR
// bc_level = 1 ;
83041: LD_ADDR_OWVAR 43
83045: PUSH
83046: LD_INT 1
83048: ST_TO_ADDR
// case btype of 1 :
83049: LD_VAR 0 2
83053: PUSH
83054: LD_INT 1
83056: DOUBLE
83057: EQUAL
83058: IFTRUE 83062
83060: GO 83073
83062: POP
// bc_type := b_depot ; 2 :
83063: LD_ADDR_OWVAR 42
83067: PUSH
83068: LD_INT 0
83070: ST_TO_ADDR
83071: GO 83685
83073: LD_INT 2
83075: DOUBLE
83076: EQUAL
83077: IFTRUE 83081
83079: GO 83092
83081: POP
// bc_type := b_warehouse ; 3 :
83082: LD_ADDR_OWVAR 42
83086: PUSH
83087: LD_INT 1
83089: ST_TO_ADDR
83090: GO 83685
83092: LD_INT 3
83094: DOUBLE
83095: EQUAL
83096: IFTRUE 83100
83098: GO 83111
83100: POP
// bc_type := b_lab ; 4 .. 9 :
83101: LD_ADDR_OWVAR 42
83105: PUSH
83106: LD_INT 6
83108: ST_TO_ADDR
83109: GO 83685
83111: LD_INT 4
83113: DOUBLE
83114: GREATEREQUAL
83115: IFFALSE 83123
83117: LD_INT 9
83119: DOUBLE
83120: LESSEQUAL
83121: IFTRUE 83125
83123: GO 83177
83125: POP
// begin bc_type := b_lab_half ;
83126: LD_ADDR_OWVAR 42
83130: PUSH
83131: LD_INT 7
83133: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83134: LD_ADDR_OWVAR 44
83138: PUSH
83139: LD_INT 10
83141: PUSH
83142: LD_INT 11
83144: PUSH
83145: LD_INT 12
83147: PUSH
83148: LD_INT 15
83150: PUSH
83151: LD_INT 14
83153: PUSH
83154: LD_INT 13
83156: PUSH
83157: EMPTY
83158: LIST
83159: LIST
83160: LIST
83161: LIST
83162: LIST
83163: LIST
83164: PUSH
83165: LD_VAR 0 2
83169: PUSH
83170: LD_INT 3
83172: MINUS
83173: ARRAY
83174: ST_TO_ADDR
// end ; 10 .. 13 :
83175: GO 83685
83177: LD_INT 10
83179: DOUBLE
83180: GREATEREQUAL
83181: IFFALSE 83189
83183: LD_INT 13
83185: DOUBLE
83186: LESSEQUAL
83187: IFTRUE 83191
83189: GO 83268
83191: POP
// begin bc_type := b_lab_full ;
83192: LD_ADDR_OWVAR 42
83196: PUSH
83197: LD_INT 8
83199: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83200: LD_ADDR_OWVAR 44
83204: PUSH
83205: LD_INT 10
83207: PUSH
83208: LD_INT 12
83210: PUSH
83211: LD_INT 14
83213: PUSH
83214: LD_INT 13
83216: PUSH
83217: EMPTY
83218: LIST
83219: LIST
83220: LIST
83221: LIST
83222: PUSH
83223: LD_VAR 0 2
83227: PUSH
83228: LD_INT 9
83230: MINUS
83231: ARRAY
83232: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83233: LD_ADDR_OWVAR 45
83237: PUSH
83238: LD_INT 11
83240: PUSH
83241: LD_INT 15
83243: PUSH
83244: LD_INT 12
83246: PUSH
83247: LD_INT 15
83249: PUSH
83250: EMPTY
83251: LIST
83252: LIST
83253: LIST
83254: LIST
83255: PUSH
83256: LD_VAR 0 2
83260: PUSH
83261: LD_INT 9
83263: MINUS
83264: ARRAY
83265: ST_TO_ADDR
// end ; 14 :
83266: GO 83685
83268: LD_INT 14
83270: DOUBLE
83271: EQUAL
83272: IFTRUE 83276
83274: GO 83287
83276: POP
// bc_type := b_workshop ; 15 :
83277: LD_ADDR_OWVAR 42
83281: PUSH
83282: LD_INT 2
83284: ST_TO_ADDR
83285: GO 83685
83287: LD_INT 15
83289: DOUBLE
83290: EQUAL
83291: IFTRUE 83295
83293: GO 83306
83295: POP
// bc_type := b_factory ; 16 :
83296: LD_ADDR_OWVAR 42
83300: PUSH
83301: LD_INT 3
83303: ST_TO_ADDR
83304: GO 83685
83306: LD_INT 16
83308: DOUBLE
83309: EQUAL
83310: IFTRUE 83314
83312: GO 83325
83314: POP
// bc_type := b_ext_gun ; 17 :
83315: LD_ADDR_OWVAR 42
83319: PUSH
83320: LD_INT 17
83322: ST_TO_ADDR
83323: GO 83685
83325: LD_INT 17
83327: DOUBLE
83328: EQUAL
83329: IFTRUE 83333
83331: GO 83361
83333: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83334: LD_ADDR_OWVAR 42
83338: PUSH
83339: LD_INT 19
83341: PUSH
83342: LD_INT 23
83344: PUSH
83345: LD_INT 19
83347: PUSH
83348: EMPTY
83349: LIST
83350: LIST
83351: LIST
83352: PUSH
83353: LD_VAR 0 1
83357: ARRAY
83358: ST_TO_ADDR
83359: GO 83685
83361: LD_INT 18
83363: DOUBLE
83364: EQUAL
83365: IFTRUE 83369
83367: GO 83380
83369: POP
// bc_type := b_ext_radar ; 19 :
83370: LD_ADDR_OWVAR 42
83374: PUSH
83375: LD_INT 20
83377: ST_TO_ADDR
83378: GO 83685
83380: LD_INT 19
83382: DOUBLE
83383: EQUAL
83384: IFTRUE 83388
83386: GO 83399
83388: POP
// bc_type := b_ext_radio ; 20 :
83389: LD_ADDR_OWVAR 42
83393: PUSH
83394: LD_INT 22
83396: ST_TO_ADDR
83397: GO 83685
83399: LD_INT 20
83401: DOUBLE
83402: EQUAL
83403: IFTRUE 83407
83405: GO 83418
83407: POP
// bc_type := b_ext_siberium ; 21 :
83408: LD_ADDR_OWVAR 42
83412: PUSH
83413: LD_INT 21
83415: ST_TO_ADDR
83416: GO 83685
83418: LD_INT 21
83420: DOUBLE
83421: EQUAL
83422: IFTRUE 83426
83424: GO 83437
83426: POP
// bc_type := b_ext_computer ; 22 :
83427: LD_ADDR_OWVAR 42
83431: PUSH
83432: LD_INT 24
83434: ST_TO_ADDR
83435: GO 83685
83437: LD_INT 22
83439: DOUBLE
83440: EQUAL
83441: IFTRUE 83445
83443: GO 83456
83445: POP
// bc_type := b_ext_track ; 23 :
83446: LD_ADDR_OWVAR 42
83450: PUSH
83451: LD_INT 16
83453: ST_TO_ADDR
83454: GO 83685
83456: LD_INT 23
83458: DOUBLE
83459: EQUAL
83460: IFTRUE 83464
83462: GO 83475
83464: POP
// bc_type := b_ext_laser ; 24 :
83465: LD_ADDR_OWVAR 42
83469: PUSH
83470: LD_INT 25
83472: ST_TO_ADDR
83473: GO 83685
83475: LD_INT 24
83477: DOUBLE
83478: EQUAL
83479: IFTRUE 83483
83481: GO 83494
83483: POP
// bc_type := b_control_tower ; 25 :
83484: LD_ADDR_OWVAR 42
83488: PUSH
83489: LD_INT 36
83491: ST_TO_ADDR
83492: GO 83685
83494: LD_INT 25
83496: DOUBLE
83497: EQUAL
83498: IFTRUE 83502
83500: GO 83513
83502: POP
// bc_type := b_breastwork ; 26 :
83503: LD_ADDR_OWVAR 42
83507: PUSH
83508: LD_INT 31
83510: ST_TO_ADDR
83511: GO 83685
83513: LD_INT 26
83515: DOUBLE
83516: EQUAL
83517: IFTRUE 83521
83519: GO 83532
83521: POP
// bc_type := b_bunker ; 27 :
83522: LD_ADDR_OWVAR 42
83526: PUSH
83527: LD_INT 32
83529: ST_TO_ADDR
83530: GO 83685
83532: LD_INT 27
83534: DOUBLE
83535: EQUAL
83536: IFTRUE 83540
83538: GO 83551
83540: POP
// bc_type := b_turret ; 28 :
83541: LD_ADDR_OWVAR 42
83545: PUSH
83546: LD_INT 33
83548: ST_TO_ADDR
83549: GO 83685
83551: LD_INT 28
83553: DOUBLE
83554: EQUAL
83555: IFTRUE 83559
83557: GO 83570
83559: POP
// bc_type := b_armoury ; 29 :
83560: LD_ADDR_OWVAR 42
83564: PUSH
83565: LD_INT 4
83567: ST_TO_ADDR
83568: GO 83685
83570: LD_INT 29
83572: DOUBLE
83573: EQUAL
83574: IFTRUE 83578
83576: GO 83589
83578: POP
// bc_type := b_barracks ; 30 :
83579: LD_ADDR_OWVAR 42
83583: PUSH
83584: LD_INT 5
83586: ST_TO_ADDR
83587: GO 83685
83589: LD_INT 30
83591: DOUBLE
83592: EQUAL
83593: IFTRUE 83597
83595: GO 83608
83597: POP
// bc_type := b_solar_power ; 31 :
83598: LD_ADDR_OWVAR 42
83602: PUSH
83603: LD_INT 27
83605: ST_TO_ADDR
83606: GO 83685
83608: LD_INT 31
83610: DOUBLE
83611: EQUAL
83612: IFTRUE 83616
83614: GO 83627
83616: POP
// bc_type := b_oil_power ; 32 :
83617: LD_ADDR_OWVAR 42
83621: PUSH
83622: LD_INT 26
83624: ST_TO_ADDR
83625: GO 83685
83627: LD_INT 32
83629: DOUBLE
83630: EQUAL
83631: IFTRUE 83635
83633: GO 83646
83635: POP
// bc_type := b_siberite_power ; 33 :
83636: LD_ADDR_OWVAR 42
83640: PUSH
83641: LD_INT 28
83643: ST_TO_ADDR
83644: GO 83685
83646: LD_INT 33
83648: DOUBLE
83649: EQUAL
83650: IFTRUE 83654
83652: GO 83665
83654: POP
// bc_type := b_oil_mine ; 34 :
83655: LD_ADDR_OWVAR 42
83659: PUSH
83660: LD_INT 29
83662: ST_TO_ADDR
83663: GO 83685
83665: LD_INT 34
83667: DOUBLE
83668: EQUAL
83669: IFTRUE 83673
83671: GO 83684
83673: POP
// bc_type := b_siberite_mine ; end ;
83674: LD_ADDR_OWVAR 42
83678: PUSH
83679: LD_INT 30
83681: ST_TO_ADDR
83682: GO 83685
83684: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
83685: LD_ADDR_VAR 0 8
83689: PUSH
83690: LD_VAR 0 5
83694: PPUSH
83695: LD_VAR 0 6
83699: PPUSH
83700: LD_VAR 0 3
83704: PPUSH
83705: CALL_OW 47
83709: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
83710: LD_OWVAR 42
83714: PUSH
83715: LD_INT 32
83717: PUSH
83718: LD_INT 33
83720: PUSH
83721: EMPTY
83722: LIST
83723: LIST
83724: IN
83725: IFFALSE 83741
// PlaceWeaponTurret ( b , weapon ) ;
83727: LD_VAR 0 8
83731: PPUSH
83732: LD_VAR 0 4
83736: PPUSH
83737: CALL_OW 431
// end ;
83741: LD_VAR 0 7
83745: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
83746: LD_INT 0
83748: PPUSH
83749: PPUSH
83750: PPUSH
83751: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83752: LD_ADDR_VAR 0 4
83756: PUSH
83757: LD_INT 22
83759: PUSH
83760: LD_OWVAR 2
83764: PUSH
83765: EMPTY
83766: LIST
83767: LIST
83768: PUSH
83769: LD_INT 2
83771: PUSH
83772: LD_INT 30
83774: PUSH
83775: LD_INT 0
83777: PUSH
83778: EMPTY
83779: LIST
83780: LIST
83781: PUSH
83782: LD_INT 30
83784: PUSH
83785: LD_INT 1
83787: PUSH
83788: EMPTY
83789: LIST
83790: LIST
83791: PUSH
83792: EMPTY
83793: LIST
83794: LIST
83795: LIST
83796: PUSH
83797: EMPTY
83798: LIST
83799: LIST
83800: PPUSH
83801: CALL_OW 69
83805: ST_TO_ADDR
// if not tmp then
83806: LD_VAR 0 4
83810: NOT
83811: IFFALSE 83815
// exit ;
83813: GO 83874
// for i in tmp do
83815: LD_ADDR_VAR 0 2
83819: PUSH
83820: LD_VAR 0 4
83824: PUSH
83825: FOR_IN
83826: IFFALSE 83872
// for j = 1 to 3 do
83828: LD_ADDR_VAR 0 3
83832: PUSH
83833: DOUBLE
83834: LD_INT 1
83836: DEC
83837: ST_TO_ADDR
83838: LD_INT 3
83840: PUSH
83841: FOR_TO
83842: IFFALSE 83868
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
83844: LD_VAR 0 2
83848: PPUSH
83849: CALL_OW 274
83853: PPUSH
83854: LD_VAR 0 3
83858: PPUSH
83859: LD_INT 99999
83861: PPUSH
83862: CALL_OW 277
83866: GO 83841
83868: POP
83869: POP
83870: GO 83825
83872: POP
83873: POP
// end ;
83874: LD_VAR 0 1
83878: RET
// export function hHackSetLevel10 ; var i , j ; begin
83879: LD_INT 0
83881: PPUSH
83882: PPUSH
83883: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
83884: LD_ADDR_VAR 0 2
83888: PUSH
83889: LD_INT 21
83891: PUSH
83892: LD_INT 1
83894: PUSH
83895: EMPTY
83896: LIST
83897: LIST
83898: PPUSH
83899: CALL_OW 69
83903: PUSH
83904: FOR_IN
83905: IFFALSE 83957
// if IsSelected ( i ) then
83907: LD_VAR 0 2
83911: PPUSH
83912: CALL_OW 306
83916: IFFALSE 83955
// begin for j := 1 to 4 do
83918: LD_ADDR_VAR 0 3
83922: PUSH
83923: DOUBLE
83924: LD_INT 1
83926: DEC
83927: ST_TO_ADDR
83928: LD_INT 4
83930: PUSH
83931: FOR_TO
83932: IFFALSE 83953
// SetSkill ( i , j , 10 ) ;
83934: LD_VAR 0 2
83938: PPUSH
83939: LD_VAR 0 3
83943: PPUSH
83944: LD_INT 10
83946: PPUSH
83947: CALL_OW 237
83951: GO 83931
83953: POP
83954: POP
// end ;
83955: GO 83904
83957: POP
83958: POP
// end ;
83959: LD_VAR 0 1
83963: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
83964: LD_INT 0
83966: PPUSH
83967: PPUSH
83968: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
83969: LD_ADDR_VAR 0 2
83973: PUSH
83974: LD_INT 22
83976: PUSH
83977: LD_OWVAR 2
83981: PUSH
83982: EMPTY
83983: LIST
83984: LIST
83985: PUSH
83986: LD_INT 21
83988: PUSH
83989: LD_INT 1
83991: PUSH
83992: EMPTY
83993: LIST
83994: LIST
83995: PUSH
83996: EMPTY
83997: LIST
83998: LIST
83999: PPUSH
84000: CALL_OW 69
84004: PUSH
84005: FOR_IN
84006: IFFALSE 84047
// begin for j := 1 to 4 do
84008: LD_ADDR_VAR 0 3
84012: PUSH
84013: DOUBLE
84014: LD_INT 1
84016: DEC
84017: ST_TO_ADDR
84018: LD_INT 4
84020: PUSH
84021: FOR_TO
84022: IFFALSE 84043
// SetSkill ( i , j , 10 ) ;
84024: LD_VAR 0 2
84028: PPUSH
84029: LD_VAR 0 3
84033: PPUSH
84034: LD_INT 10
84036: PPUSH
84037: CALL_OW 237
84041: GO 84021
84043: POP
84044: POP
// end ;
84045: GO 84005
84047: POP
84048: POP
// end ;
84049: LD_VAR 0 1
84053: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84054: LD_INT 0
84056: PPUSH
// uc_side := your_side ;
84057: LD_ADDR_OWVAR 20
84061: PUSH
84062: LD_OWVAR 2
84066: ST_TO_ADDR
// uc_nation := nation ;
84067: LD_ADDR_OWVAR 21
84071: PUSH
84072: LD_VAR 0 1
84076: ST_TO_ADDR
// InitHc ;
84077: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84081: LD_INT 0
84083: PPUSH
84084: LD_VAR 0 2
84088: PPUSH
84089: LD_VAR 0 3
84093: PPUSH
84094: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84098: LD_VAR 0 4
84102: PPUSH
84103: LD_VAR 0 5
84107: PPUSH
84108: CALL_OW 428
84112: PUSH
84113: LD_INT 0
84115: EQUAL
84116: IFFALSE 84140
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84118: CALL_OW 44
84122: PPUSH
84123: LD_VAR 0 4
84127: PPUSH
84128: LD_VAR 0 5
84132: PPUSH
84133: LD_INT 1
84135: PPUSH
84136: CALL_OW 48
// end ;
84140: LD_VAR 0 6
84144: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84145: LD_INT 0
84147: PPUSH
84148: PPUSH
// uc_side := your_side ;
84149: LD_ADDR_OWVAR 20
84153: PUSH
84154: LD_OWVAR 2
84158: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84159: LD_VAR 0 1
84163: PUSH
84164: LD_INT 1
84166: PUSH
84167: LD_INT 2
84169: PUSH
84170: LD_INT 3
84172: PUSH
84173: LD_INT 4
84175: PUSH
84176: LD_INT 5
84178: PUSH
84179: EMPTY
84180: LIST
84181: LIST
84182: LIST
84183: LIST
84184: LIST
84185: IN
84186: IFFALSE 84198
// uc_nation := nation_american else
84188: LD_ADDR_OWVAR 21
84192: PUSH
84193: LD_INT 1
84195: ST_TO_ADDR
84196: GO 84241
// if chassis in [ 11 , 12 , 13 , 14 ] then
84198: LD_VAR 0 1
84202: PUSH
84203: LD_INT 11
84205: PUSH
84206: LD_INT 12
84208: PUSH
84209: LD_INT 13
84211: PUSH
84212: LD_INT 14
84214: PUSH
84215: EMPTY
84216: LIST
84217: LIST
84218: LIST
84219: LIST
84220: IN
84221: IFFALSE 84233
// uc_nation := nation_arabian else
84223: LD_ADDR_OWVAR 21
84227: PUSH
84228: LD_INT 2
84230: ST_TO_ADDR
84231: GO 84241
// uc_nation := nation_russian ;
84233: LD_ADDR_OWVAR 21
84237: PUSH
84238: LD_INT 3
84240: ST_TO_ADDR
// vc_chassis := chassis ;
84241: LD_ADDR_OWVAR 37
84245: PUSH
84246: LD_VAR 0 1
84250: ST_TO_ADDR
// vc_engine := engine ;
84251: LD_ADDR_OWVAR 39
84255: PUSH
84256: LD_VAR 0 2
84260: ST_TO_ADDR
// vc_control := control ;
84261: LD_ADDR_OWVAR 38
84265: PUSH
84266: LD_VAR 0 3
84270: ST_TO_ADDR
// vc_weapon := weapon ;
84271: LD_ADDR_OWVAR 40
84275: PUSH
84276: LD_VAR 0 4
84280: ST_TO_ADDR
// un := CreateVehicle ;
84281: LD_ADDR_VAR 0 8
84285: PUSH
84286: CALL_OW 45
84290: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84291: LD_VAR 0 8
84295: PPUSH
84296: LD_INT 0
84298: PPUSH
84299: LD_INT 5
84301: PPUSH
84302: CALL_OW 12
84306: PPUSH
84307: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84311: LD_VAR 0 8
84315: PPUSH
84316: LD_VAR 0 5
84320: PPUSH
84321: LD_VAR 0 6
84325: PPUSH
84326: LD_INT 1
84328: PPUSH
84329: CALL_OW 48
// end ;
84333: LD_VAR 0 7
84337: RET
// export hInvincible ; every 1 do
84338: GO 84340
84340: DISABLE
// hInvincible := [ ] ;
84341: LD_ADDR_EXP 131
84345: PUSH
84346: EMPTY
84347: ST_TO_ADDR
84348: END
// every 10 do var i ;
84349: GO 84351
84351: DISABLE
84352: LD_INT 0
84354: PPUSH
// begin enable ;
84355: ENABLE
// if not hInvincible then
84356: LD_EXP 131
84360: NOT
84361: IFFALSE 84365
// exit ;
84363: GO 84409
// for i in hInvincible do
84365: LD_ADDR_VAR 0 1
84369: PUSH
84370: LD_EXP 131
84374: PUSH
84375: FOR_IN
84376: IFFALSE 84407
// if GetLives ( i ) < 1000 then
84378: LD_VAR 0 1
84382: PPUSH
84383: CALL_OW 256
84387: PUSH
84388: LD_INT 1000
84390: LESS
84391: IFFALSE 84405
// SetLives ( i , 1000 ) ;
84393: LD_VAR 0 1
84397: PPUSH
84398: LD_INT 1000
84400: PPUSH
84401: CALL_OW 234
84405: GO 84375
84407: POP
84408: POP
// end ;
84409: PPOPN 1
84411: END
// export function hHackInvincible ; var i ; begin
84412: LD_INT 0
84414: PPUSH
84415: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84416: LD_ADDR_VAR 0 2
84420: PUSH
84421: LD_INT 2
84423: PUSH
84424: LD_INT 21
84426: PUSH
84427: LD_INT 1
84429: PUSH
84430: EMPTY
84431: LIST
84432: LIST
84433: PUSH
84434: LD_INT 21
84436: PUSH
84437: LD_INT 2
84439: PUSH
84440: EMPTY
84441: LIST
84442: LIST
84443: PUSH
84444: EMPTY
84445: LIST
84446: LIST
84447: LIST
84448: PPUSH
84449: CALL_OW 69
84453: PUSH
84454: FOR_IN
84455: IFFALSE 84516
// if IsSelected ( i ) then
84457: LD_VAR 0 2
84461: PPUSH
84462: CALL_OW 306
84466: IFFALSE 84514
// begin if i in hInvincible then
84468: LD_VAR 0 2
84472: PUSH
84473: LD_EXP 131
84477: IN
84478: IFFALSE 84498
// hInvincible := hInvincible diff i else
84480: LD_ADDR_EXP 131
84484: PUSH
84485: LD_EXP 131
84489: PUSH
84490: LD_VAR 0 2
84494: DIFF
84495: ST_TO_ADDR
84496: GO 84514
// hInvincible := hInvincible union i ;
84498: LD_ADDR_EXP 131
84502: PUSH
84503: LD_EXP 131
84507: PUSH
84508: LD_VAR 0 2
84512: UNION
84513: ST_TO_ADDR
// end ;
84514: GO 84454
84516: POP
84517: POP
// end ;
84518: LD_VAR 0 1
84522: RET
// export function hHackInvisible ; var i , j ; begin
84523: LD_INT 0
84525: PPUSH
84526: PPUSH
84527: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84528: LD_ADDR_VAR 0 2
84532: PUSH
84533: LD_INT 21
84535: PUSH
84536: LD_INT 1
84538: PUSH
84539: EMPTY
84540: LIST
84541: LIST
84542: PPUSH
84543: CALL_OW 69
84547: PUSH
84548: FOR_IN
84549: IFFALSE 84573
// if IsSelected ( i ) then
84551: LD_VAR 0 2
84555: PPUSH
84556: CALL_OW 306
84560: IFFALSE 84571
// ComForceInvisible ( i ) ;
84562: LD_VAR 0 2
84566: PPUSH
84567: CALL_OW 496
84571: GO 84548
84573: POP
84574: POP
// end ;
84575: LD_VAR 0 1
84579: RET
// export function hHackChangeYourSide ; begin
84580: LD_INT 0
84582: PPUSH
// if your_side = 8 then
84583: LD_OWVAR 2
84587: PUSH
84588: LD_INT 8
84590: EQUAL
84591: IFFALSE 84603
// your_side := 0 else
84593: LD_ADDR_OWVAR 2
84597: PUSH
84598: LD_INT 0
84600: ST_TO_ADDR
84601: GO 84617
// your_side := your_side + 1 ;
84603: LD_ADDR_OWVAR 2
84607: PUSH
84608: LD_OWVAR 2
84612: PUSH
84613: LD_INT 1
84615: PLUS
84616: ST_TO_ADDR
// end ;
84617: LD_VAR 0 1
84621: RET
// export function hHackChangeUnitSide ; var i , j ; begin
84622: LD_INT 0
84624: PPUSH
84625: PPUSH
84626: PPUSH
// for i in all_units do
84627: LD_ADDR_VAR 0 2
84631: PUSH
84632: LD_OWVAR 3
84636: PUSH
84637: FOR_IN
84638: IFFALSE 84716
// if IsSelected ( i ) then
84640: LD_VAR 0 2
84644: PPUSH
84645: CALL_OW 306
84649: IFFALSE 84714
// begin j := GetSide ( i ) ;
84651: LD_ADDR_VAR 0 3
84655: PUSH
84656: LD_VAR 0 2
84660: PPUSH
84661: CALL_OW 255
84665: ST_TO_ADDR
// if j = 8 then
84666: LD_VAR 0 3
84670: PUSH
84671: LD_INT 8
84673: EQUAL
84674: IFFALSE 84686
// j := 0 else
84676: LD_ADDR_VAR 0 3
84680: PUSH
84681: LD_INT 0
84683: ST_TO_ADDR
84684: GO 84700
// j := j + 1 ;
84686: LD_ADDR_VAR 0 3
84690: PUSH
84691: LD_VAR 0 3
84695: PUSH
84696: LD_INT 1
84698: PLUS
84699: ST_TO_ADDR
// SetSide ( i , j ) ;
84700: LD_VAR 0 2
84704: PPUSH
84705: LD_VAR 0 3
84709: PPUSH
84710: CALL_OW 235
// end ;
84714: GO 84637
84716: POP
84717: POP
// end ;
84718: LD_VAR 0 1
84722: RET
// export function hHackFog ; begin
84723: LD_INT 0
84725: PPUSH
// FogOff ( true ) ;
84726: LD_INT 1
84728: PPUSH
84729: CALL_OW 344
// end ;
84733: LD_VAR 0 1
84737: RET
// export function hHackTeleport ( unit , x , y ) ; begin
84738: LD_INT 0
84740: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
84741: LD_VAR 0 1
84745: PPUSH
84746: LD_VAR 0 2
84750: PPUSH
84751: LD_VAR 0 3
84755: PPUSH
84756: LD_INT 1
84758: PPUSH
84759: LD_INT 1
84761: PPUSH
84762: CALL_OW 483
// CenterOnXY ( x , y ) ;
84766: LD_VAR 0 2
84770: PPUSH
84771: LD_VAR 0 3
84775: PPUSH
84776: CALL_OW 84
// end ;
84780: LD_VAR 0 4
84784: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
84785: LD_INT 0
84787: PPUSH
84788: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
84789: LD_VAR 0 1
84793: NOT
84794: PUSH
84795: LD_VAR 0 2
84799: PPUSH
84800: LD_VAR 0 3
84804: PPUSH
84805: CALL_OW 488
84809: NOT
84810: OR
84811: PUSH
84812: LD_VAR 0 1
84816: PPUSH
84817: CALL_OW 266
84821: PUSH
84822: LD_INT 3
84824: NONEQUAL
84825: PUSH
84826: LD_VAR 0 1
84830: PPUSH
84831: CALL_OW 247
84835: PUSH
84836: LD_INT 1
84838: EQUAL
84839: NOT
84840: AND
84841: OR
84842: IFFALSE 84846
// exit ;
84844: GO 84995
// if GetType ( factory ) = unit_human then
84846: LD_VAR 0 1
84850: PPUSH
84851: CALL_OW 247
84855: PUSH
84856: LD_INT 1
84858: EQUAL
84859: IFFALSE 84876
// factory := IsInUnit ( factory ) ;
84861: LD_ADDR_VAR 0 1
84865: PUSH
84866: LD_VAR 0 1
84870: PPUSH
84871: CALL_OW 310
84875: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
84876: LD_VAR 0 1
84880: PPUSH
84881: CALL_OW 266
84885: PUSH
84886: LD_INT 3
84888: NONEQUAL
84889: IFFALSE 84893
// exit ;
84891: GO 84995
// if HexInfo ( x , y ) = factory then
84893: LD_VAR 0 2
84897: PPUSH
84898: LD_VAR 0 3
84902: PPUSH
84903: CALL_OW 428
84907: PUSH
84908: LD_VAR 0 1
84912: EQUAL
84913: IFFALSE 84940
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
84915: LD_ADDR_EXP 132
84919: PUSH
84920: LD_EXP 132
84924: PPUSH
84925: LD_VAR 0 1
84929: PPUSH
84930: LD_INT 0
84932: PPUSH
84933: CALL_OW 1
84937: ST_TO_ADDR
84938: GO 84991
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
84940: LD_ADDR_EXP 132
84944: PUSH
84945: LD_EXP 132
84949: PPUSH
84950: LD_VAR 0 1
84954: PPUSH
84955: LD_VAR 0 1
84959: PPUSH
84960: CALL_OW 255
84964: PUSH
84965: LD_VAR 0 1
84969: PUSH
84970: LD_VAR 0 2
84974: PUSH
84975: LD_VAR 0 3
84979: PUSH
84980: EMPTY
84981: LIST
84982: LIST
84983: LIST
84984: LIST
84985: PPUSH
84986: CALL_OW 1
84990: ST_TO_ADDR
// UpdateFactoryWaypoints ;
84991: CALL 85000 0 0
// end ;
84995: LD_VAR 0 4
84999: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85000: LD_INT 0
85002: PPUSH
85003: PPUSH
85004: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85005: LD_STRING resetFactoryWaypoint();
85007: PPUSH
85008: CALL_OW 559
// if factoryWaypoints then
85012: LD_EXP 132
85016: IFFALSE 85142
// begin list := PrepareArray ( factoryWaypoints ) ;
85018: LD_ADDR_VAR 0 3
85022: PUSH
85023: LD_EXP 132
85027: PPUSH
85028: CALL 70058 0 1
85032: ST_TO_ADDR
// for i := 1 to list do
85033: LD_ADDR_VAR 0 2
85037: PUSH
85038: DOUBLE
85039: LD_INT 1
85041: DEC
85042: ST_TO_ADDR
85043: LD_VAR 0 3
85047: PUSH
85048: FOR_TO
85049: IFFALSE 85140
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85051: LD_STRING setFactoryWaypointXY(
85053: PUSH
85054: LD_VAR 0 3
85058: PUSH
85059: LD_VAR 0 2
85063: ARRAY
85064: PUSH
85065: LD_INT 1
85067: ARRAY
85068: STR
85069: PUSH
85070: LD_STRING ,
85072: STR
85073: PUSH
85074: LD_VAR 0 3
85078: PUSH
85079: LD_VAR 0 2
85083: ARRAY
85084: PUSH
85085: LD_INT 2
85087: ARRAY
85088: STR
85089: PUSH
85090: LD_STRING ,
85092: STR
85093: PUSH
85094: LD_VAR 0 3
85098: PUSH
85099: LD_VAR 0 2
85103: ARRAY
85104: PUSH
85105: LD_INT 3
85107: ARRAY
85108: STR
85109: PUSH
85110: LD_STRING ,
85112: STR
85113: PUSH
85114: LD_VAR 0 3
85118: PUSH
85119: LD_VAR 0 2
85123: ARRAY
85124: PUSH
85125: LD_INT 4
85127: ARRAY
85128: STR
85129: PUSH
85130: LD_STRING )
85132: STR
85133: PPUSH
85134: CALL_OW 559
85138: GO 85048
85140: POP
85141: POP
// end ; end ;
85142: LD_VAR 0 1
85146: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85147: LD_INT 0
85149: PPUSH
// if HexInfo ( x , y ) = warehouse then
85150: LD_VAR 0 2
85154: PPUSH
85155: LD_VAR 0 3
85159: PPUSH
85160: CALL_OW 428
85164: PUSH
85165: LD_VAR 0 1
85169: EQUAL
85170: IFFALSE 85197
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85172: LD_ADDR_EXP 133
85176: PUSH
85177: LD_EXP 133
85181: PPUSH
85182: LD_VAR 0 1
85186: PPUSH
85187: LD_INT 0
85189: PPUSH
85190: CALL_OW 1
85194: ST_TO_ADDR
85195: GO 85248
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85197: LD_ADDR_EXP 133
85201: PUSH
85202: LD_EXP 133
85206: PPUSH
85207: LD_VAR 0 1
85211: PPUSH
85212: LD_VAR 0 1
85216: PPUSH
85217: CALL_OW 255
85221: PUSH
85222: LD_VAR 0 1
85226: PUSH
85227: LD_VAR 0 2
85231: PUSH
85232: LD_VAR 0 3
85236: PUSH
85237: EMPTY
85238: LIST
85239: LIST
85240: LIST
85241: LIST
85242: PPUSH
85243: CALL_OW 1
85247: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85248: CALL 85257 0 0
// end ;
85252: LD_VAR 0 4
85256: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85257: LD_INT 0
85259: PPUSH
85260: PPUSH
85261: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85262: LD_STRING resetWarehouseGatheringPoints();
85264: PPUSH
85265: CALL_OW 559
// if warehouseGatheringPoints then
85269: LD_EXP 133
85273: IFFALSE 85399
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85275: LD_ADDR_VAR 0 3
85279: PUSH
85280: LD_EXP 133
85284: PPUSH
85285: CALL 70058 0 1
85289: ST_TO_ADDR
// for i := 1 to list do
85290: LD_ADDR_VAR 0 2
85294: PUSH
85295: DOUBLE
85296: LD_INT 1
85298: DEC
85299: ST_TO_ADDR
85300: LD_VAR 0 3
85304: PUSH
85305: FOR_TO
85306: IFFALSE 85397
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85308: LD_STRING setWarehouseGatheringPointXY(
85310: PUSH
85311: LD_VAR 0 3
85315: PUSH
85316: LD_VAR 0 2
85320: ARRAY
85321: PUSH
85322: LD_INT 1
85324: ARRAY
85325: STR
85326: PUSH
85327: LD_STRING ,
85329: STR
85330: PUSH
85331: LD_VAR 0 3
85335: PUSH
85336: LD_VAR 0 2
85340: ARRAY
85341: PUSH
85342: LD_INT 2
85344: ARRAY
85345: STR
85346: PUSH
85347: LD_STRING ,
85349: STR
85350: PUSH
85351: LD_VAR 0 3
85355: PUSH
85356: LD_VAR 0 2
85360: ARRAY
85361: PUSH
85362: LD_INT 3
85364: ARRAY
85365: STR
85366: PUSH
85367: LD_STRING ,
85369: STR
85370: PUSH
85371: LD_VAR 0 3
85375: PUSH
85376: LD_VAR 0 2
85380: ARRAY
85381: PUSH
85382: LD_INT 4
85384: ARRAY
85385: STR
85386: PUSH
85387: LD_STRING )
85389: STR
85390: PPUSH
85391: CALL_OW 559
85395: GO 85305
85397: POP
85398: POP
// end ; end ;
85399: LD_VAR 0 1
85403: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85404: LD_EXP 133
85408: IFFALSE 86093
85410: GO 85412
85412: DISABLE
85413: LD_INT 0
85415: PPUSH
85416: PPUSH
85417: PPUSH
85418: PPUSH
85419: PPUSH
85420: PPUSH
85421: PPUSH
85422: PPUSH
85423: PPUSH
// begin enable ;
85424: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85425: LD_ADDR_VAR 0 3
85429: PUSH
85430: LD_EXP 133
85434: PPUSH
85435: CALL 70058 0 1
85439: ST_TO_ADDR
// if not list then
85440: LD_VAR 0 3
85444: NOT
85445: IFFALSE 85449
// exit ;
85447: GO 86093
// for i := 1 to list do
85449: LD_ADDR_VAR 0 1
85453: PUSH
85454: DOUBLE
85455: LD_INT 1
85457: DEC
85458: ST_TO_ADDR
85459: LD_VAR 0 3
85463: PUSH
85464: FOR_TO
85465: IFFALSE 86091
// begin depot := list [ i ] [ 2 ] ;
85467: LD_ADDR_VAR 0 8
85471: PUSH
85472: LD_VAR 0 3
85476: PUSH
85477: LD_VAR 0 1
85481: ARRAY
85482: PUSH
85483: LD_INT 2
85485: ARRAY
85486: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
85487: LD_ADDR_VAR 0 5
85491: PUSH
85492: LD_VAR 0 3
85496: PUSH
85497: LD_VAR 0 1
85501: ARRAY
85502: PUSH
85503: LD_INT 1
85505: ARRAY
85506: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
85507: LD_VAR 0 8
85511: PPUSH
85512: CALL_OW 301
85516: PUSH
85517: LD_VAR 0 5
85521: PUSH
85522: LD_VAR 0 8
85526: PPUSH
85527: CALL_OW 255
85531: NONEQUAL
85532: OR
85533: IFFALSE 85562
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
85535: LD_ADDR_EXP 133
85539: PUSH
85540: LD_EXP 133
85544: PPUSH
85545: LD_VAR 0 8
85549: PPUSH
85550: LD_INT 0
85552: PPUSH
85553: CALL_OW 1
85557: ST_TO_ADDR
// exit ;
85558: POP
85559: POP
85560: GO 86093
// end ; x := list [ i ] [ 3 ] ;
85562: LD_ADDR_VAR 0 6
85566: PUSH
85567: LD_VAR 0 3
85571: PUSH
85572: LD_VAR 0 1
85576: ARRAY
85577: PUSH
85578: LD_INT 3
85580: ARRAY
85581: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
85582: LD_ADDR_VAR 0 7
85586: PUSH
85587: LD_VAR 0 3
85591: PUSH
85592: LD_VAR 0 1
85596: ARRAY
85597: PUSH
85598: LD_INT 4
85600: ARRAY
85601: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
85602: LD_ADDR_VAR 0 9
85606: PUSH
85607: LD_VAR 0 6
85611: PPUSH
85612: LD_VAR 0 7
85616: PPUSH
85617: LD_INT 16
85619: PPUSH
85620: CALL 68646 0 3
85624: ST_TO_ADDR
// if not cratesNearbyPoint then
85625: LD_VAR 0 9
85629: NOT
85630: IFFALSE 85636
// exit ;
85632: POP
85633: POP
85634: GO 86093
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
85636: LD_ADDR_VAR 0 4
85640: PUSH
85641: LD_INT 22
85643: PUSH
85644: LD_VAR 0 5
85648: PUSH
85649: EMPTY
85650: LIST
85651: LIST
85652: PUSH
85653: LD_INT 3
85655: PUSH
85656: LD_INT 60
85658: PUSH
85659: EMPTY
85660: LIST
85661: PUSH
85662: EMPTY
85663: LIST
85664: LIST
85665: PUSH
85666: LD_INT 91
85668: PUSH
85669: LD_VAR 0 8
85673: PUSH
85674: LD_INT 6
85676: PUSH
85677: EMPTY
85678: LIST
85679: LIST
85680: LIST
85681: PUSH
85682: LD_INT 2
85684: PUSH
85685: LD_INT 25
85687: PUSH
85688: LD_INT 2
85690: PUSH
85691: EMPTY
85692: LIST
85693: LIST
85694: PUSH
85695: LD_INT 25
85697: PUSH
85698: LD_INT 16
85700: PUSH
85701: EMPTY
85702: LIST
85703: LIST
85704: PUSH
85705: EMPTY
85706: LIST
85707: LIST
85708: LIST
85709: PUSH
85710: EMPTY
85711: LIST
85712: LIST
85713: LIST
85714: LIST
85715: PPUSH
85716: CALL_OW 69
85720: PUSH
85721: LD_VAR 0 8
85725: PPUSH
85726: CALL_OW 313
85730: PPUSH
85731: LD_INT 3
85733: PUSH
85734: LD_INT 60
85736: PUSH
85737: EMPTY
85738: LIST
85739: PUSH
85740: EMPTY
85741: LIST
85742: LIST
85743: PUSH
85744: LD_INT 2
85746: PUSH
85747: LD_INT 25
85749: PUSH
85750: LD_INT 2
85752: PUSH
85753: EMPTY
85754: LIST
85755: LIST
85756: PUSH
85757: LD_INT 25
85759: PUSH
85760: LD_INT 16
85762: PUSH
85763: EMPTY
85764: LIST
85765: LIST
85766: PUSH
85767: EMPTY
85768: LIST
85769: LIST
85770: LIST
85771: PUSH
85772: EMPTY
85773: LIST
85774: LIST
85775: PPUSH
85776: CALL_OW 72
85780: UNION
85781: ST_TO_ADDR
// if tmp then
85782: LD_VAR 0 4
85786: IFFALSE 85866
// begin tmp := ShrinkArray ( tmp , 3 ) ;
85788: LD_ADDR_VAR 0 4
85792: PUSH
85793: LD_VAR 0 4
85797: PPUSH
85798: LD_INT 3
85800: PPUSH
85801: CALL 66615 0 2
85805: ST_TO_ADDR
// for j in tmp do
85806: LD_ADDR_VAR 0 2
85810: PUSH
85811: LD_VAR 0 4
85815: PUSH
85816: FOR_IN
85817: IFFALSE 85860
// begin if IsInUnit ( j ) then
85819: LD_VAR 0 2
85823: PPUSH
85824: CALL_OW 310
85828: IFFALSE 85839
// ComExit ( j ) ;
85830: LD_VAR 0 2
85834: PPUSH
85835: CALL 66698 0 1
// AddComCollect ( j , x , y ) ;
85839: LD_VAR 0 2
85843: PPUSH
85844: LD_VAR 0 6
85848: PPUSH
85849: LD_VAR 0 7
85853: PPUSH
85854: CALL_OW 177
// end ;
85858: GO 85816
85860: POP
85861: POP
// exit ;
85862: POP
85863: POP
85864: GO 86093
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
85866: LD_ADDR_VAR 0 4
85870: PUSH
85871: LD_INT 22
85873: PUSH
85874: LD_VAR 0 5
85878: PUSH
85879: EMPTY
85880: LIST
85881: LIST
85882: PUSH
85883: LD_INT 91
85885: PUSH
85886: LD_VAR 0 8
85890: PUSH
85891: LD_INT 8
85893: PUSH
85894: EMPTY
85895: LIST
85896: LIST
85897: LIST
85898: PUSH
85899: LD_INT 2
85901: PUSH
85902: LD_INT 34
85904: PUSH
85905: LD_INT 12
85907: PUSH
85908: EMPTY
85909: LIST
85910: LIST
85911: PUSH
85912: LD_INT 34
85914: PUSH
85915: LD_INT 51
85917: PUSH
85918: EMPTY
85919: LIST
85920: LIST
85921: PUSH
85922: LD_INT 34
85924: PUSH
85925: LD_INT 32
85927: PUSH
85928: EMPTY
85929: LIST
85930: LIST
85931: PUSH
85932: LD_INT 34
85934: PUSH
85935: LD_INT 89
85937: PUSH
85938: EMPTY
85939: LIST
85940: LIST
85941: PUSH
85942: EMPTY
85943: LIST
85944: LIST
85945: LIST
85946: LIST
85947: LIST
85948: PUSH
85949: EMPTY
85950: LIST
85951: LIST
85952: LIST
85953: PPUSH
85954: CALL_OW 69
85958: ST_TO_ADDR
// if tmp then
85959: LD_VAR 0 4
85963: IFFALSE 86089
// begin for j in tmp do
85965: LD_ADDR_VAR 0 2
85969: PUSH
85970: LD_VAR 0 4
85974: PUSH
85975: FOR_IN
85976: IFFALSE 86087
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
85978: LD_VAR 0 2
85982: PPUSH
85983: CALL_OW 262
85987: PUSH
85988: LD_INT 3
85990: EQUAL
85991: PUSH
85992: LD_VAR 0 2
85996: PPUSH
85997: CALL_OW 261
86001: PUSH
86002: LD_INT 20
86004: GREATER
86005: OR
86006: PUSH
86007: LD_VAR 0 2
86011: PPUSH
86012: CALL_OW 314
86016: NOT
86017: AND
86018: PUSH
86019: LD_VAR 0 2
86023: PPUSH
86024: CALL_OW 263
86028: PUSH
86029: LD_INT 1
86031: NONEQUAL
86032: PUSH
86033: LD_VAR 0 2
86037: PPUSH
86038: CALL_OW 311
86042: OR
86043: AND
86044: IFFALSE 86085
// begin ComCollect ( j , x , y ) ;
86046: LD_VAR 0 2
86050: PPUSH
86051: LD_VAR 0 6
86055: PPUSH
86056: LD_VAR 0 7
86060: PPUSH
86061: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86065: LD_VAR 0 2
86069: PPUSH
86070: LD_VAR 0 8
86074: PPUSH
86075: CALL_OW 172
// exit ;
86079: POP
86080: POP
86081: POP
86082: POP
86083: GO 86093
// end ;
86085: GO 85975
86087: POP
86088: POP
// end ; end ;
86089: GO 85464
86091: POP
86092: POP
// end ; end_of_file
86093: PPOPN 9
86095: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86096: LD_VAR 0 1
86100: PUSH
86101: LD_INT 200
86103: DOUBLE
86104: GREATEREQUAL
86105: IFFALSE 86113
86107: LD_INT 299
86109: DOUBLE
86110: LESSEQUAL
86111: IFTRUE 86115
86113: GO 86147
86115: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86116: LD_VAR 0 1
86120: PPUSH
86121: LD_VAR 0 2
86125: PPUSH
86126: LD_VAR 0 3
86130: PPUSH
86131: LD_VAR 0 4
86135: PPUSH
86136: LD_VAR 0 5
86140: PPUSH
86141: CALL 86635 0 5
86145: GO 86224
86147: LD_INT 300
86149: DOUBLE
86150: GREATEREQUAL
86151: IFFALSE 86159
86153: LD_INT 399
86155: DOUBLE
86156: LESSEQUAL
86157: IFTRUE 86161
86159: GO 86223
86161: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86162: LD_VAR 0 1
86166: PPUSH
86167: LD_VAR 0 2
86171: PPUSH
86172: LD_VAR 0 3
86176: PPUSH
86177: LD_VAR 0 4
86181: PPUSH
86182: LD_VAR 0 5
86186: PPUSH
86187: LD_VAR 0 6
86191: PPUSH
86192: LD_VAR 0 7
86196: PPUSH
86197: LD_VAR 0 8
86201: PPUSH
86202: LD_VAR 0 9
86206: PPUSH
86207: LD_VAR 0 10
86211: PPUSH
86212: LD_VAR 0 11
86216: PPUSH
86217: CALL 82805 0 11
86221: GO 86224
86223: POP
// end ;
86224: PPOPN 11
86226: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86227: LD_VAR 0 1
86231: PPUSH
86232: LD_VAR 0 2
86236: PPUSH
86237: LD_VAR 0 3
86241: PPUSH
86242: LD_VAR 0 4
86246: PPUSH
86247: LD_VAR 0 5
86251: PPUSH
86252: CALL 86371 0 5
// end ; end_of_file
86256: PPOPN 5
86258: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86259: LD_INT 0
86261: PPUSH
86262: PPUSH
86263: PPUSH
86264: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86265: LD_VAR 0 1
86269: PPUSH
86270: CALL_OW 264
86274: PUSH
86275: LD_INT 91
86277: EQUAL
86278: IFFALSE 86350
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86280: LD_INT 68
86282: PPUSH
86283: LD_VAR 0 1
86287: PPUSH
86288: CALL_OW 255
86292: PPUSH
86293: CALL_OW 321
86297: PUSH
86298: LD_INT 2
86300: EQUAL
86301: IFFALSE 86313
// eff := 70 else
86303: LD_ADDR_VAR 0 4
86307: PUSH
86308: LD_INT 70
86310: ST_TO_ADDR
86311: GO 86321
// eff := 30 ;
86313: LD_ADDR_VAR 0 4
86317: PUSH
86318: LD_INT 30
86320: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86321: LD_VAR 0 1
86325: PPUSH
86326: CALL_OW 250
86330: PPUSH
86331: LD_VAR 0 1
86335: PPUSH
86336: CALL_OW 251
86340: PPUSH
86341: LD_VAR 0 4
86345: PPUSH
86346: CALL_OW 495
// end ; end ;
86350: LD_VAR 0 2
86354: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86355: LD_INT 0
86357: PPUSH
// end ;
86358: LD_VAR 0 4
86362: RET
// export function SOS_Command ( cmd ) ; begin
86363: LD_INT 0
86365: PPUSH
// end ;
86366: LD_VAR 0 2
86370: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86371: LD_INT 0
86373: PPUSH
// end ;
86374: LD_VAR 0 6
86378: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86379: LD_INT 0
86381: PPUSH
86382: PPUSH
// if not vehicle or not factory then
86383: LD_VAR 0 1
86387: NOT
86388: PUSH
86389: LD_VAR 0 2
86393: NOT
86394: OR
86395: IFFALSE 86399
// exit ;
86397: GO 86630
// if factoryWaypoints >= factory then
86399: LD_EXP 132
86403: PUSH
86404: LD_VAR 0 2
86408: GREATEREQUAL
86409: IFFALSE 86630
// if factoryWaypoints [ factory ] then
86411: LD_EXP 132
86415: PUSH
86416: LD_VAR 0 2
86420: ARRAY
86421: IFFALSE 86630
// begin if GetControl ( vehicle ) = control_manual then
86423: LD_VAR 0 1
86427: PPUSH
86428: CALL_OW 263
86432: PUSH
86433: LD_INT 1
86435: EQUAL
86436: IFFALSE 86517
// begin driver := IsDrivenBy ( vehicle ) ;
86438: LD_ADDR_VAR 0 4
86442: PUSH
86443: LD_VAR 0 1
86447: PPUSH
86448: CALL_OW 311
86452: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86453: LD_VAR 0 4
86457: PPUSH
86458: LD_EXP 132
86462: PUSH
86463: LD_VAR 0 2
86467: ARRAY
86468: PUSH
86469: LD_INT 3
86471: ARRAY
86472: PPUSH
86473: LD_EXP 132
86477: PUSH
86478: LD_VAR 0 2
86482: ARRAY
86483: PUSH
86484: LD_INT 4
86486: ARRAY
86487: PPUSH
86488: CALL_OW 171
// AddComExitVehicle ( driver ) ;
86492: LD_VAR 0 4
86496: PPUSH
86497: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
86501: LD_VAR 0 4
86505: PPUSH
86506: LD_VAR 0 2
86510: PPUSH
86511: CALL_OW 180
// end else
86515: GO 86630
// if GetControl ( vehicle ) = control_remote then
86517: LD_VAR 0 1
86521: PPUSH
86522: CALL_OW 263
86526: PUSH
86527: LD_INT 2
86529: EQUAL
86530: IFFALSE 86591
// begin wait ( 0 0$2 ) ;
86532: LD_INT 70
86534: PPUSH
86535: CALL_OW 67
// if Connect ( vehicle ) then
86539: LD_VAR 0 1
86543: PPUSH
86544: CALL 36939 0 1
86548: IFFALSE 86589
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86550: LD_VAR 0 1
86554: PPUSH
86555: LD_EXP 132
86559: PUSH
86560: LD_VAR 0 2
86564: ARRAY
86565: PUSH
86566: LD_INT 3
86568: ARRAY
86569: PPUSH
86570: LD_EXP 132
86574: PUSH
86575: LD_VAR 0 2
86579: ARRAY
86580: PUSH
86581: LD_INT 4
86583: ARRAY
86584: PPUSH
86585: CALL_OW 171
// end else
86589: GO 86630
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86591: LD_VAR 0 1
86595: PPUSH
86596: LD_EXP 132
86600: PUSH
86601: LD_VAR 0 2
86605: ARRAY
86606: PUSH
86607: LD_INT 3
86609: ARRAY
86610: PPUSH
86611: LD_EXP 132
86615: PUSH
86616: LD_VAR 0 2
86620: ARRAY
86621: PUSH
86622: LD_INT 4
86624: ARRAY
86625: PPUSH
86626: CALL_OW 171
// end ; end ;
86630: LD_VAR 0 3
86634: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
86635: LD_INT 0
86637: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
86638: LD_VAR 0 1
86642: PUSH
86643: LD_INT 250
86645: EQUAL
86646: PUSH
86647: LD_VAR 0 2
86651: PPUSH
86652: CALL_OW 264
86656: PUSH
86657: LD_INT 81
86659: EQUAL
86660: AND
86661: IFFALSE 86682
// MinerPlaceMine ( unit , x , y ) ;
86663: LD_VAR 0 2
86667: PPUSH
86668: LD_VAR 0 4
86672: PPUSH
86673: LD_VAR 0 5
86677: PPUSH
86678: CALL 89067 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
86682: LD_VAR 0 1
86686: PUSH
86687: LD_INT 251
86689: EQUAL
86690: PUSH
86691: LD_VAR 0 2
86695: PPUSH
86696: CALL_OW 264
86700: PUSH
86701: LD_INT 81
86703: EQUAL
86704: AND
86705: IFFALSE 86726
// MinerDetonateMine ( unit , x , y ) ;
86707: LD_VAR 0 2
86711: PPUSH
86712: LD_VAR 0 4
86716: PPUSH
86717: LD_VAR 0 5
86721: PPUSH
86722: CALL 89342 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
86726: LD_VAR 0 1
86730: PUSH
86731: LD_INT 252
86733: EQUAL
86734: PUSH
86735: LD_VAR 0 2
86739: PPUSH
86740: CALL_OW 264
86744: PUSH
86745: LD_INT 81
86747: EQUAL
86748: AND
86749: IFFALSE 86770
// MinerCreateMinefield ( unit , x , y ) ;
86751: LD_VAR 0 2
86755: PPUSH
86756: LD_VAR 0 4
86760: PPUSH
86761: LD_VAR 0 5
86765: PPUSH
86766: CALL 89759 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
86770: LD_VAR 0 1
86774: PUSH
86775: LD_INT 253
86777: EQUAL
86778: PUSH
86779: LD_VAR 0 2
86783: PPUSH
86784: CALL_OW 257
86788: PUSH
86789: LD_INT 5
86791: EQUAL
86792: AND
86793: IFFALSE 86814
// ComBinocular ( unit , x , y ) ;
86795: LD_VAR 0 2
86799: PPUSH
86800: LD_VAR 0 4
86804: PPUSH
86805: LD_VAR 0 5
86809: PPUSH
86810: CALL 90128 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
86814: LD_VAR 0 1
86818: PUSH
86819: LD_INT 254
86821: EQUAL
86822: PUSH
86823: LD_VAR 0 2
86827: PPUSH
86828: CALL_OW 264
86832: PUSH
86833: LD_INT 99
86835: EQUAL
86836: AND
86837: PUSH
86838: LD_VAR 0 3
86842: PPUSH
86843: CALL_OW 263
86847: PUSH
86848: LD_INT 3
86850: EQUAL
86851: AND
86852: IFFALSE 86868
// HackDestroyVehicle ( unit , selectedUnit ) ;
86854: LD_VAR 0 2
86858: PPUSH
86859: LD_VAR 0 3
86863: PPUSH
86864: CALL 88431 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
86868: LD_VAR 0 1
86872: PUSH
86873: LD_INT 255
86875: EQUAL
86876: PUSH
86877: LD_VAR 0 2
86881: PPUSH
86882: CALL_OW 264
86886: PUSH
86887: LD_INT 14
86889: PUSH
86890: LD_INT 53
86892: PUSH
86893: EMPTY
86894: LIST
86895: LIST
86896: IN
86897: AND
86898: PUSH
86899: LD_VAR 0 4
86903: PPUSH
86904: LD_VAR 0 5
86908: PPUSH
86909: CALL_OW 488
86913: AND
86914: IFFALSE 86938
// CutTreeXYR ( unit , x , y , 12 ) ;
86916: LD_VAR 0 2
86920: PPUSH
86921: LD_VAR 0 4
86925: PPUSH
86926: LD_VAR 0 5
86930: PPUSH
86931: LD_INT 12
86933: PPUSH
86934: CALL 87001 0 4
// if cmd = 256 then
86938: LD_VAR 0 1
86942: PUSH
86943: LD_INT 256
86945: EQUAL
86946: IFFALSE 86967
// SetFactoryWaypoint ( unit , x , y ) ;
86948: LD_VAR 0 2
86952: PPUSH
86953: LD_VAR 0 4
86957: PPUSH
86958: LD_VAR 0 5
86962: PPUSH
86963: CALL 84785 0 3
// if cmd = 257 then
86967: LD_VAR 0 1
86971: PUSH
86972: LD_INT 257
86974: EQUAL
86975: IFFALSE 86996
// SetWarehouseGatheringPoint ( unit , x , y ) ;
86977: LD_VAR 0 2
86981: PPUSH
86982: LD_VAR 0 4
86986: PPUSH
86987: LD_VAR 0 5
86991: PPUSH
86992: CALL 85147 0 3
// end ;
86996: LD_VAR 0 6
87000: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87001: LD_INT 0
87003: PPUSH
87004: PPUSH
87005: PPUSH
87006: PPUSH
87007: PPUSH
87008: PPUSH
87009: PPUSH
87010: PPUSH
87011: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
87012: LD_VAR 0 1
87016: NOT
87017: PUSH
87018: LD_VAR 0 2
87022: PPUSH
87023: LD_VAR 0 3
87027: PPUSH
87028: CALL_OW 488
87032: NOT
87033: OR
87034: PUSH
87035: LD_VAR 0 4
87039: NOT
87040: OR
87041: IFFALSE 87045
// exit ;
87043: GO 87385
// list := [ ] ;
87045: LD_ADDR_VAR 0 13
87049: PUSH
87050: EMPTY
87051: ST_TO_ADDR
// if x - r < 0 then
87052: LD_VAR 0 2
87056: PUSH
87057: LD_VAR 0 4
87061: MINUS
87062: PUSH
87063: LD_INT 0
87065: LESS
87066: IFFALSE 87078
// min_x := 0 else
87068: LD_ADDR_VAR 0 7
87072: PUSH
87073: LD_INT 0
87075: ST_TO_ADDR
87076: GO 87094
// min_x := x - r ;
87078: LD_ADDR_VAR 0 7
87082: PUSH
87083: LD_VAR 0 2
87087: PUSH
87088: LD_VAR 0 4
87092: MINUS
87093: ST_TO_ADDR
// if y - r < 0 then
87094: LD_VAR 0 3
87098: PUSH
87099: LD_VAR 0 4
87103: MINUS
87104: PUSH
87105: LD_INT 0
87107: LESS
87108: IFFALSE 87120
// min_y := 0 else
87110: LD_ADDR_VAR 0 8
87114: PUSH
87115: LD_INT 0
87117: ST_TO_ADDR
87118: GO 87136
// min_y := y - r ;
87120: LD_ADDR_VAR 0 8
87124: PUSH
87125: LD_VAR 0 3
87129: PUSH
87130: LD_VAR 0 4
87134: MINUS
87135: ST_TO_ADDR
// max_x := x + r ;
87136: LD_ADDR_VAR 0 9
87140: PUSH
87141: LD_VAR 0 2
87145: PUSH
87146: LD_VAR 0 4
87150: PLUS
87151: ST_TO_ADDR
// max_y := y + r ;
87152: LD_ADDR_VAR 0 10
87156: PUSH
87157: LD_VAR 0 3
87161: PUSH
87162: LD_VAR 0 4
87166: PLUS
87167: ST_TO_ADDR
// for _x = min_x to max_x do
87168: LD_ADDR_VAR 0 11
87172: PUSH
87173: DOUBLE
87174: LD_VAR 0 7
87178: DEC
87179: ST_TO_ADDR
87180: LD_VAR 0 9
87184: PUSH
87185: FOR_TO
87186: IFFALSE 87303
// for _y = min_y to max_y do
87188: LD_ADDR_VAR 0 12
87192: PUSH
87193: DOUBLE
87194: LD_VAR 0 8
87198: DEC
87199: ST_TO_ADDR
87200: LD_VAR 0 10
87204: PUSH
87205: FOR_TO
87206: IFFALSE 87299
// begin if not ValidHex ( _x , _y ) then
87208: LD_VAR 0 11
87212: PPUSH
87213: LD_VAR 0 12
87217: PPUSH
87218: CALL_OW 488
87222: NOT
87223: IFFALSE 87227
// continue ;
87225: GO 87205
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87227: LD_VAR 0 11
87231: PPUSH
87232: LD_VAR 0 12
87236: PPUSH
87237: CALL_OW 351
87241: PUSH
87242: LD_VAR 0 11
87246: PPUSH
87247: LD_VAR 0 12
87251: PPUSH
87252: CALL_OW 554
87256: AND
87257: IFFALSE 87297
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87259: LD_ADDR_VAR 0 13
87263: PUSH
87264: LD_VAR 0 13
87268: PPUSH
87269: LD_VAR 0 13
87273: PUSH
87274: LD_INT 1
87276: PLUS
87277: PPUSH
87278: LD_VAR 0 11
87282: PUSH
87283: LD_VAR 0 12
87287: PUSH
87288: EMPTY
87289: LIST
87290: LIST
87291: PPUSH
87292: CALL_OW 2
87296: ST_TO_ADDR
// end ;
87297: GO 87205
87299: POP
87300: POP
87301: GO 87185
87303: POP
87304: POP
// if not list then
87305: LD_VAR 0 13
87309: NOT
87310: IFFALSE 87314
// exit ;
87312: GO 87385
// for i in list do
87314: LD_ADDR_VAR 0 6
87318: PUSH
87319: LD_VAR 0 13
87323: PUSH
87324: FOR_IN
87325: IFFALSE 87383
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87327: LD_VAR 0 1
87331: PPUSH
87332: LD_STRING M
87334: PUSH
87335: LD_VAR 0 6
87339: PUSH
87340: LD_INT 1
87342: ARRAY
87343: PUSH
87344: LD_VAR 0 6
87348: PUSH
87349: LD_INT 2
87351: ARRAY
87352: PUSH
87353: LD_INT 0
87355: PUSH
87356: LD_INT 0
87358: PUSH
87359: LD_INT 0
87361: PUSH
87362: LD_INT 0
87364: PUSH
87365: EMPTY
87366: LIST
87367: LIST
87368: LIST
87369: LIST
87370: LIST
87371: LIST
87372: LIST
87373: PUSH
87374: EMPTY
87375: LIST
87376: PPUSH
87377: CALL_OW 447
87381: GO 87324
87383: POP
87384: POP
// end ;
87385: LD_VAR 0 5
87389: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
87390: LD_EXP 135
87394: NOT
87395: IFFALSE 87445
87397: GO 87399
87399: DISABLE
// begin initHack := true ;
87400: LD_ADDR_EXP 135
87404: PUSH
87405: LD_INT 1
87407: ST_TO_ADDR
// hackTanks := [ ] ;
87408: LD_ADDR_EXP 136
87412: PUSH
87413: EMPTY
87414: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
87415: LD_ADDR_EXP 137
87419: PUSH
87420: EMPTY
87421: ST_TO_ADDR
// hackLimit := 3 ;
87422: LD_ADDR_EXP 138
87426: PUSH
87427: LD_INT 3
87429: ST_TO_ADDR
// hackDist := 12 ;
87430: LD_ADDR_EXP 139
87434: PUSH
87435: LD_INT 12
87437: ST_TO_ADDR
// hackCounter := [ ] ;
87438: LD_ADDR_EXP 140
87442: PUSH
87443: EMPTY
87444: ST_TO_ADDR
// end ;
87445: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
87446: LD_EXP 135
87450: PUSH
87451: LD_INT 34
87453: PUSH
87454: LD_INT 99
87456: PUSH
87457: EMPTY
87458: LIST
87459: LIST
87460: PPUSH
87461: CALL_OW 69
87465: AND
87466: IFFALSE 87719
87468: GO 87470
87470: DISABLE
87471: LD_INT 0
87473: PPUSH
87474: PPUSH
// begin enable ;
87475: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
87476: LD_ADDR_VAR 0 1
87480: PUSH
87481: LD_INT 34
87483: PUSH
87484: LD_INT 99
87486: PUSH
87487: EMPTY
87488: LIST
87489: LIST
87490: PPUSH
87491: CALL_OW 69
87495: PUSH
87496: FOR_IN
87497: IFFALSE 87717
// begin if not i in hackTanks then
87499: LD_VAR 0 1
87503: PUSH
87504: LD_EXP 136
87508: IN
87509: NOT
87510: IFFALSE 87593
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
87512: LD_ADDR_EXP 136
87516: PUSH
87517: LD_EXP 136
87521: PPUSH
87522: LD_EXP 136
87526: PUSH
87527: LD_INT 1
87529: PLUS
87530: PPUSH
87531: LD_VAR 0 1
87535: PPUSH
87536: CALL_OW 1
87540: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
87541: LD_ADDR_EXP 137
87545: PUSH
87546: LD_EXP 137
87550: PPUSH
87551: LD_EXP 137
87555: PUSH
87556: LD_INT 1
87558: PLUS
87559: PPUSH
87560: EMPTY
87561: PPUSH
87562: CALL_OW 1
87566: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
87567: LD_ADDR_EXP 140
87571: PUSH
87572: LD_EXP 140
87576: PPUSH
87577: LD_EXP 140
87581: PUSH
87582: LD_INT 1
87584: PLUS
87585: PPUSH
87586: EMPTY
87587: PPUSH
87588: CALL_OW 1
87592: ST_TO_ADDR
// end ; if not IsOk ( i ) then
87593: LD_VAR 0 1
87597: PPUSH
87598: CALL_OW 302
87602: NOT
87603: IFFALSE 87616
// begin HackUnlinkAll ( i ) ;
87605: LD_VAR 0 1
87609: PPUSH
87610: CALL 87722 0 1
// continue ;
87614: GO 87496
// end ; HackCheckCapturedStatus ( i ) ;
87616: LD_VAR 0 1
87620: PPUSH
87621: CALL 88165 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
87625: LD_ADDR_VAR 0 2
87629: PUSH
87630: LD_INT 81
87632: PUSH
87633: LD_VAR 0 1
87637: PPUSH
87638: CALL_OW 255
87642: PUSH
87643: EMPTY
87644: LIST
87645: LIST
87646: PUSH
87647: LD_INT 33
87649: PUSH
87650: LD_INT 3
87652: PUSH
87653: EMPTY
87654: LIST
87655: LIST
87656: PUSH
87657: LD_INT 91
87659: PUSH
87660: LD_VAR 0 1
87664: PUSH
87665: LD_EXP 139
87669: PUSH
87670: EMPTY
87671: LIST
87672: LIST
87673: LIST
87674: PUSH
87675: LD_INT 50
87677: PUSH
87678: EMPTY
87679: LIST
87680: PUSH
87681: EMPTY
87682: LIST
87683: LIST
87684: LIST
87685: LIST
87686: PPUSH
87687: CALL_OW 69
87691: ST_TO_ADDR
// if not tmp then
87692: LD_VAR 0 2
87696: NOT
87697: IFFALSE 87701
// continue ;
87699: GO 87496
// HackLink ( i , tmp ) ;
87701: LD_VAR 0 1
87705: PPUSH
87706: LD_VAR 0 2
87710: PPUSH
87711: CALL 87858 0 2
// end ;
87715: GO 87496
87717: POP
87718: POP
// end ;
87719: PPOPN 2
87721: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
87722: LD_INT 0
87724: PPUSH
87725: PPUSH
87726: PPUSH
// if not hack in hackTanks then
87727: LD_VAR 0 1
87731: PUSH
87732: LD_EXP 136
87736: IN
87737: NOT
87738: IFFALSE 87742
// exit ;
87740: GO 87853
// index := GetElementIndex ( hackTanks , hack ) ;
87742: LD_ADDR_VAR 0 4
87746: PUSH
87747: LD_EXP 136
87751: PPUSH
87752: LD_VAR 0 1
87756: PPUSH
87757: CALL 33755 0 2
87761: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
87762: LD_EXP 137
87766: PUSH
87767: LD_VAR 0 4
87771: ARRAY
87772: IFFALSE 87853
// begin for i in hackTanksCaptured [ index ] do
87774: LD_ADDR_VAR 0 3
87778: PUSH
87779: LD_EXP 137
87783: PUSH
87784: LD_VAR 0 4
87788: ARRAY
87789: PUSH
87790: FOR_IN
87791: IFFALSE 87817
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
87793: LD_VAR 0 3
87797: PUSH
87798: LD_INT 1
87800: ARRAY
87801: PPUSH
87802: LD_VAR 0 3
87806: PUSH
87807: LD_INT 2
87809: ARRAY
87810: PPUSH
87811: CALL_OW 235
87815: GO 87790
87817: POP
87818: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
87819: LD_ADDR_EXP 137
87823: PUSH
87824: LD_EXP 137
87828: PPUSH
87829: LD_VAR 0 4
87833: PPUSH
87834: EMPTY
87835: PPUSH
87836: CALL_OW 1
87840: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
87841: LD_VAR 0 1
87845: PPUSH
87846: LD_INT 0
87848: PPUSH
87849: CALL_OW 505
// end ; end ;
87853: LD_VAR 0 2
87857: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
87858: LD_INT 0
87860: PPUSH
87861: PPUSH
87862: PPUSH
// if not hack in hackTanks or not vehicles then
87863: LD_VAR 0 1
87867: PUSH
87868: LD_EXP 136
87872: IN
87873: NOT
87874: PUSH
87875: LD_VAR 0 2
87879: NOT
87880: OR
87881: IFFALSE 87885
// exit ;
87883: GO 88160
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
87885: LD_ADDR_VAR 0 2
87889: PUSH
87890: LD_VAR 0 1
87894: PPUSH
87895: LD_VAR 0 2
87899: PPUSH
87900: LD_INT 1
87902: PPUSH
87903: LD_INT 1
87905: PPUSH
87906: CALL 34405 0 4
87910: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
87911: LD_ADDR_VAR 0 5
87915: PUSH
87916: LD_EXP 136
87920: PPUSH
87921: LD_VAR 0 1
87925: PPUSH
87926: CALL 33755 0 2
87930: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
87931: LD_EXP 137
87935: PUSH
87936: LD_VAR 0 5
87940: ARRAY
87941: PUSH
87942: LD_EXP 138
87946: LESS
87947: IFFALSE 88136
// begin for i := 1 to vehicles do
87949: LD_ADDR_VAR 0 4
87953: PUSH
87954: DOUBLE
87955: LD_INT 1
87957: DEC
87958: ST_TO_ADDR
87959: LD_VAR 0 2
87963: PUSH
87964: FOR_TO
87965: IFFALSE 88134
// begin if hackTanksCaptured [ index ] = hackLimit then
87967: LD_EXP 137
87971: PUSH
87972: LD_VAR 0 5
87976: ARRAY
87977: PUSH
87978: LD_EXP 138
87982: EQUAL
87983: IFFALSE 87987
// break ;
87985: GO 88134
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
87987: LD_ADDR_EXP 140
87991: PUSH
87992: LD_EXP 140
87996: PPUSH
87997: LD_VAR 0 5
88001: PPUSH
88002: LD_EXP 140
88006: PUSH
88007: LD_VAR 0 5
88011: ARRAY
88012: PUSH
88013: LD_INT 1
88015: PLUS
88016: PPUSH
88017: CALL_OW 1
88021: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88022: LD_ADDR_EXP 137
88026: PUSH
88027: LD_EXP 137
88031: PPUSH
88032: LD_VAR 0 5
88036: PUSH
88037: LD_EXP 137
88041: PUSH
88042: LD_VAR 0 5
88046: ARRAY
88047: PUSH
88048: LD_INT 1
88050: PLUS
88051: PUSH
88052: EMPTY
88053: LIST
88054: LIST
88055: PPUSH
88056: LD_VAR 0 2
88060: PUSH
88061: LD_VAR 0 4
88065: ARRAY
88066: PUSH
88067: LD_VAR 0 2
88071: PUSH
88072: LD_VAR 0 4
88076: ARRAY
88077: PPUSH
88078: CALL_OW 255
88082: PUSH
88083: EMPTY
88084: LIST
88085: LIST
88086: PPUSH
88087: CALL 33970 0 3
88091: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88092: LD_VAR 0 2
88096: PUSH
88097: LD_VAR 0 4
88101: ARRAY
88102: PPUSH
88103: LD_VAR 0 1
88107: PPUSH
88108: CALL_OW 255
88112: PPUSH
88113: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88117: LD_VAR 0 2
88121: PUSH
88122: LD_VAR 0 4
88126: ARRAY
88127: PPUSH
88128: CALL_OW 141
// end ;
88132: GO 87964
88134: POP
88135: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88136: LD_VAR 0 1
88140: PPUSH
88141: LD_EXP 137
88145: PUSH
88146: LD_VAR 0 5
88150: ARRAY
88151: PUSH
88152: LD_INT 0
88154: PLUS
88155: PPUSH
88156: CALL_OW 505
// end ;
88160: LD_VAR 0 3
88164: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88165: LD_INT 0
88167: PPUSH
88168: PPUSH
88169: PPUSH
88170: PPUSH
// if not hack in hackTanks then
88171: LD_VAR 0 1
88175: PUSH
88176: LD_EXP 136
88180: IN
88181: NOT
88182: IFFALSE 88186
// exit ;
88184: GO 88426
// index := GetElementIndex ( hackTanks , hack ) ;
88186: LD_ADDR_VAR 0 4
88190: PUSH
88191: LD_EXP 136
88195: PPUSH
88196: LD_VAR 0 1
88200: PPUSH
88201: CALL 33755 0 2
88205: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88206: LD_ADDR_VAR 0 3
88210: PUSH
88211: DOUBLE
88212: LD_EXP 137
88216: PUSH
88217: LD_VAR 0 4
88221: ARRAY
88222: INC
88223: ST_TO_ADDR
88224: LD_INT 1
88226: PUSH
88227: FOR_DOWNTO
88228: IFFALSE 88400
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88230: LD_ADDR_VAR 0 5
88234: PUSH
88235: LD_EXP 137
88239: PUSH
88240: LD_VAR 0 4
88244: ARRAY
88245: PUSH
88246: LD_VAR 0 3
88250: ARRAY
88251: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88252: LD_VAR 0 5
88256: PUSH
88257: LD_INT 1
88259: ARRAY
88260: PPUSH
88261: CALL_OW 302
88265: NOT
88266: PUSH
88267: LD_VAR 0 5
88271: PUSH
88272: LD_INT 1
88274: ARRAY
88275: PPUSH
88276: CALL_OW 255
88280: PUSH
88281: LD_VAR 0 1
88285: PPUSH
88286: CALL_OW 255
88290: NONEQUAL
88291: OR
88292: IFFALSE 88398
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88294: LD_VAR 0 5
88298: PUSH
88299: LD_INT 1
88301: ARRAY
88302: PPUSH
88303: CALL_OW 305
88307: PUSH
88308: LD_VAR 0 5
88312: PUSH
88313: LD_INT 1
88315: ARRAY
88316: PPUSH
88317: CALL_OW 255
88321: PUSH
88322: LD_VAR 0 1
88326: PPUSH
88327: CALL_OW 255
88331: EQUAL
88332: AND
88333: IFFALSE 88357
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
88335: LD_VAR 0 5
88339: PUSH
88340: LD_INT 1
88342: ARRAY
88343: PPUSH
88344: LD_VAR 0 5
88348: PUSH
88349: LD_INT 2
88351: ARRAY
88352: PPUSH
88353: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
88357: LD_ADDR_EXP 137
88361: PUSH
88362: LD_EXP 137
88366: PPUSH
88367: LD_VAR 0 4
88371: PPUSH
88372: LD_EXP 137
88376: PUSH
88377: LD_VAR 0 4
88381: ARRAY
88382: PPUSH
88383: LD_VAR 0 3
88387: PPUSH
88388: CALL_OW 3
88392: PPUSH
88393: CALL_OW 1
88397: ST_TO_ADDR
// end ; end ;
88398: GO 88227
88400: POP
88401: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88402: LD_VAR 0 1
88406: PPUSH
88407: LD_EXP 137
88411: PUSH
88412: LD_VAR 0 4
88416: ARRAY
88417: PUSH
88418: LD_INT 0
88420: PLUS
88421: PPUSH
88422: CALL_OW 505
// end ;
88426: LD_VAR 0 2
88430: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
88431: LD_INT 0
88433: PPUSH
88434: PPUSH
88435: PPUSH
88436: PPUSH
// if not hack in hackTanks then
88437: LD_VAR 0 1
88441: PUSH
88442: LD_EXP 136
88446: IN
88447: NOT
88448: IFFALSE 88452
// exit ;
88450: GO 88537
// index := GetElementIndex ( hackTanks , hack ) ;
88452: LD_ADDR_VAR 0 5
88456: PUSH
88457: LD_EXP 136
88461: PPUSH
88462: LD_VAR 0 1
88466: PPUSH
88467: CALL 33755 0 2
88471: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
88472: LD_ADDR_VAR 0 4
88476: PUSH
88477: DOUBLE
88478: LD_INT 1
88480: DEC
88481: ST_TO_ADDR
88482: LD_EXP 137
88486: PUSH
88487: LD_VAR 0 5
88491: ARRAY
88492: PUSH
88493: FOR_TO
88494: IFFALSE 88535
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
88496: LD_EXP 137
88500: PUSH
88501: LD_VAR 0 5
88505: ARRAY
88506: PUSH
88507: LD_VAR 0 4
88511: ARRAY
88512: PUSH
88513: LD_INT 1
88515: ARRAY
88516: PUSH
88517: LD_VAR 0 2
88521: EQUAL
88522: IFFALSE 88533
// KillUnit ( vehicle ) ;
88524: LD_VAR 0 2
88528: PPUSH
88529: CALL_OW 66
88533: GO 88493
88535: POP
88536: POP
// end ;
88537: LD_VAR 0 3
88541: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
88542: LD_EXP 141
88546: NOT
88547: IFFALSE 88582
88549: GO 88551
88551: DISABLE
// begin initMiner := true ;
88552: LD_ADDR_EXP 141
88556: PUSH
88557: LD_INT 1
88559: ST_TO_ADDR
// minersList := [ ] ;
88560: LD_ADDR_EXP 142
88564: PUSH
88565: EMPTY
88566: ST_TO_ADDR
// minerMinesList := [ ] ;
88567: LD_ADDR_EXP 143
88571: PUSH
88572: EMPTY
88573: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
88574: LD_ADDR_EXP 144
88578: PUSH
88579: LD_INT 5
88581: ST_TO_ADDR
// end ;
88582: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
88583: LD_EXP 141
88587: PUSH
88588: LD_INT 34
88590: PUSH
88591: LD_INT 81
88593: PUSH
88594: EMPTY
88595: LIST
88596: LIST
88597: PPUSH
88598: CALL_OW 69
88602: AND
88603: IFFALSE 89064
88605: GO 88607
88607: DISABLE
88608: LD_INT 0
88610: PPUSH
88611: PPUSH
88612: PPUSH
88613: PPUSH
// begin enable ;
88614: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
88615: LD_ADDR_VAR 0 1
88619: PUSH
88620: LD_INT 34
88622: PUSH
88623: LD_INT 81
88625: PUSH
88626: EMPTY
88627: LIST
88628: LIST
88629: PPUSH
88630: CALL_OW 69
88634: PUSH
88635: FOR_IN
88636: IFFALSE 88708
// begin if not i in minersList then
88638: LD_VAR 0 1
88642: PUSH
88643: LD_EXP 142
88647: IN
88648: NOT
88649: IFFALSE 88706
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
88651: LD_ADDR_EXP 142
88655: PUSH
88656: LD_EXP 142
88660: PPUSH
88661: LD_EXP 142
88665: PUSH
88666: LD_INT 1
88668: PLUS
88669: PPUSH
88670: LD_VAR 0 1
88674: PPUSH
88675: CALL_OW 1
88679: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
88680: LD_ADDR_EXP 143
88684: PUSH
88685: LD_EXP 143
88689: PPUSH
88690: LD_EXP 143
88694: PUSH
88695: LD_INT 1
88697: PLUS
88698: PPUSH
88699: EMPTY
88700: PPUSH
88701: CALL_OW 1
88705: ST_TO_ADDR
// end end ;
88706: GO 88635
88708: POP
88709: POP
// for i := minerMinesList downto 1 do
88710: LD_ADDR_VAR 0 1
88714: PUSH
88715: DOUBLE
88716: LD_EXP 143
88720: INC
88721: ST_TO_ADDR
88722: LD_INT 1
88724: PUSH
88725: FOR_DOWNTO
88726: IFFALSE 89062
// begin if IsLive ( minersList [ i ] ) then
88728: LD_EXP 142
88732: PUSH
88733: LD_VAR 0 1
88737: ARRAY
88738: PPUSH
88739: CALL_OW 300
88743: IFFALSE 88771
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
88745: LD_EXP 142
88749: PUSH
88750: LD_VAR 0 1
88754: ARRAY
88755: PPUSH
88756: LD_EXP 143
88760: PUSH
88761: LD_VAR 0 1
88765: ARRAY
88766: PPUSH
88767: CALL_OW 505
// if not minerMinesList [ i ] then
88771: LD_EXP 143
88775: PUSH
88776: LD_VAR 0 1
88780: ARRAY
88781: NOT
88782: IFFALSE 88786
// continue ;
88784: GO 88725
// for j := minerMinesList [ i ] downto 1 do
88786: LD_ADDR_VAR 0 2
88790: PUSH
88791: DOUBLE
88792: LD_EXP 143
88796: PUSH
88797: LD_VAR 0 1
88801: ARRAY
88802: INC
88803: ST_TO_ADDR
88804: LD_INT 1
88806: PUSH
88807: FOR_DOWNTO
88808: IFFALSE 89058
// begin side := GetSide ( minersList [ i ] ) ;
88810: LD_ADDR_VAR 0 3
88814: PUSH
88815: LD_EXP 142
88819: PUSH
88820: LD_VAR 0 1
88824: ARRAY
88825: PPUSH
88826: CALL_OW 255
88830: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
88831: LD_ADDR_VAR 0 4
88835: PUSH
88836: LD_EXP 143
88840: PUSH
88841: LD_VAR 0 1
88845: ARRAY
88846: PUSH
88847: LD_VAR 0 2
88851: ARRAY
88852: PUSH
88853: LD_INT 1
88855: ARRAY
88856: PPUSH
88857: LD_EXP 143
88861: PUSH
88862: LD_VAR 0 1
88866: ARRAY
88867: PUSH
88868: LD_VAR 0 2
88872: ARRAY
88873: PUSH
88874: LD_INT 2
88876: ARRAY
88877: PPUSH
88878: CALL_OW 428
88882: ST_TO_ADDR
// if not tmp then
88883: LD_VAR 0 4
88887: NOT
88888: IFFALSE 88892
// continue ;
88890: GO 88807
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
88892: LD_VAR 0 4
88896: PUSH
88897: LD_INT 81
88899: PUSH
88900: LD_VAR 0 3
88904: PUSH
88905: EMPTY
88906: LIST
88907: LIST
88908: PPUSH
88909: CALL_OW 69
88913: IN
88914: PUSH
88915: LD_EXP 143
88919: PUSH
88920: LD_VAR 0 1
88924: ARRAY
88925: PUSH
88926: LD_VAR 0 2
88930: ARRAY
88931: PUSH
88932: LD_INT 1
88934: ARRAY
88935: PPUSH
88936: LD_EXP 143
88940: PUSH
88941: LD_VAR 0 1
88945: ARRAY
88946: PUSH
88947: LD_VAR 0 2
88951: ARRAY
88952: PUSH
88953: LD_INT 2
88955: ARRAY
88956: PPUSH
88957: CALL_OW 458
88961: AND
88962: IFFALSE 89056
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
88964: LD_EXP 143
88968: PUSH
88969: LD_VAR 0 1
88973: ARRAY
88974: PUSH
88975: LD_VAR 0 2
88979: ARRAY
88980: PUSH
88981: LD_INT 1
88983: ARRAY
88984: PPUSH
88985: LD_EXP 143
88989: PUSH
88990: LD_VAR 0 1
88994: ARRAY
88995: PUSH
88996: LD_VAR 0 2
89000: ARRAY
89001: PUSH
89002: LD_INT 2
89004: ARRAY
89005: PPUSH
89006: LD_VAR 0 3
89010: PPUSH
89011: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89015: LD_ADDR_EXP 143
89019: PUSH
89020: LD_EXP 143
89024: PPUSH
89025: LD_VAR 0 1
89029: PPUSH
89030: LD_EXP 143
89034: PUSH
89035: LD_VAR 0 1
89039: ARRAY
89040: PPUSH
89041: LD_VAR 0 2
89045: PPUSH
89046: CALL_OW 3
89050: PPUSH
89051: CALL_OW 1
89055: ST_TO_ADDR
// end ; end ;
89056: GO 88807
89058: POP
89059: POP
// end ;
89060: GO 88725
89062: POP
89063: POP
// end ;
89064: PPOPN 4
89066: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
89067: LD_INT 0
89069: PPUSH
89070: PPUSH
// result := false ;
89071: LD_ADDR_VAR 0 4
89075: PUSH
89076: LD_INT 0
89078: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
89079: LD_VAR 0 1
89083: PPUSH
89084: CALL_OW 264
89088: PUSH
89089: LD_INT 81
89091: EQUAL
89092: NOT
89093: IFFALSE 89097
// exit ;
89095: GO 89337
// index := GetElementIndex ( minersList , unit ) ;
89097: LD_ADDR_VAR 0 5
89101: PUSH
89102: LD_EXP 142
89106: PPUSH
89107: LD_VAR 0 1
89111: PPUSH
89112: CALL 33755 0 2
89116: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89117: LD_EXP 143
89121: PUSH
89122: LD_VAR 0 5
89126: ARRAY
89127: PUSH
89128: LD_EXP 144
89132: GREATEREQUAL
89133: IFFALSE 89137
// exit ;
89135: GO 89337
// ComMoveXY ( unit , x , y ) ;
89137: LD_VAR 0 1
89141: PPUSH
89142: LD_VAR 0 2
89146: PPUSH
89147: LD_VAR 0 3
89151: PPUSH
89152: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89156: LD_INT 35
89158: PPUSH
89159: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
89163: LD_VAR 0 1
89167: PPUSH
89168: LD_VAR 0 2
89172: PPUSH
89173: LD_VAR 0 3
89177: PPUSH
89178: CALL 65110 0 3
89182: NOT
89183: PUSH
89184: LD_VAR 0 1
89188: PPUSH
89189: CALL_OW 314
89193: AND
89194: IFFALSE 89198
// exit ;
89196: GO 89337
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
89198: LD_VAR 0 2
89202: PPUSH
89203: LD_VAR 0 3
89207: PPUSH
89208: CALL_OW 428
89212: PUSH
89213: LD_VAR 0 1
89217: EQUAL
89218: PUSH
89219: LD_VAR 0 1
89223: PPUSH
89224: CALL_OW 314
89228: NOT
89229: AND
89230: IFFALSE 89156
// PlaySoundXY ( x , y , PlantMine ) ;
89232: LD_VAR 0 2
89236: PPUSH
89237: LD_VAR 0 3
89241: PPUSH
89242: LD_STRING PlantMine
89244: PPUSH
89245: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89249: LD_VAR 0 2
89253: PPUSH
89254: LD_VAR 0 3
89258: PPUSH
89259: LD_VAR 0 1
89263: PPUSH
89264: CALL_OW 255
89268: PPUSH
89269: LD_INT 0
89271: PPUSH
89272: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89276: LD_ADDR_EXP 143
89280: PUSH
89281: LD_EXP 143
89285: PPUSH
89286: LD_VAR 0 5
89290: PUSH
89291: LD_EXP 143
89295: PUSH
89296: LD_VAR 0 5
89300: ARRAY
89301: PUSH
89302: LD_INT 1
89304: PLUS
89305: PUSH
89306: EMPTY
89307: LIST
89308: LIST
89309: PPUSH
89310: LD_VAR 0 2
89314: PUSH
89315: LD_VAR 0 3
89319: PUSH
89320: EMPTY
89321: LIST
89322: LIST
89323: PPUSH
89324: CALL 33970 0 3
89328: ST_TO_ADDR
// result := true ;
89329: LD_ADDR_VAR 0 4
89333: PUSH
89334: LD_INT 1
89336: ST_TO_ADDR
// end ;
89337: LD_VAR 0 4
89341: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
89342: LD_INT 0
89344: PPUSH
89345: PPUSH
89346: PPUSH
// if not unit in minersList then
89347: LD_VAR 0 1
89351: PUSH
89352: LD_EXP 142
89356: IN
89357: NOT
89358: IFFALSE 89362
// exit ;
89360: GO 89754
// index := GetElementIndex ( minersList , unit ) ;
89362: LD_ADDR_VAR 0 6
89366: PUSH
89367: LD_EXP 142
89371: PPUSH
89372: LD_VAR 0 1
89376: PPUSH
89377: CALL 33755 0 2
89381: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
89382: LD_ADDR_VAR 0 5
89386: PUSH
89387: DOUBLE
89388: LD_EXP 143
89392: PUSH
89393: LD_VAR 0 6
89397: ARRAY
89398: INC
89399: ST_TO_ADDR
89400: LD_INT 1
89402: PUSH
89403: FOR_DOWNTO
89404: IFFALSE 89565
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
89406: LD_EXP 143
89410: PUSH
89411: LD_VAR 0 6
89415: ARRAY
89416: PUSH
89417: LD_VAR 0 5
89421: ARRAY
89422: PUSH
89423: LD_INT 1
89425: ARRAY
89426: PUSH
89427: LD_VAR 0 2
89431: EQUAL
89432: PUSH
89433: LD_EXP 143
89437: PUSH
89438: LD_VAR 0 6
89442: ARRAY
89443: PUSH
89444: LD_VAR 0 5
89448: ARRAY
89449: PUSH
89450: LD_INT 2
89452: ARRAY
89453: PUSH
89454: LD_VAR 0 3
89458: EQUAL
89459: AND
89460: IFFALSE 89563
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89462: LD_EXP 143
89466: PUSH
89467: LD_VAR 0 6
89471: ARRAY
89472: PUSH
89473: LD_VAR 0 5
89477: ARRAY
89478: PUSH
89479: LD_INT 1
89481: ARRAY
89482: PPUSH
89483: LD_EXP 143
89487: PUSH
89488: LD_VAR 0 6
89492: ARRAY
89493: PUSH
89494: LD_VAR 0 5
89498: ARRAY
89499: PUSH
89500: LD_INT 2
89502: ARRAY
89503: PPUSH
89504: LD_VAR 0 1
89508: PPUSH
89509: CALL_OW 255
89513: PPUSH
89514: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89518: LD_ADDR_EXP 143
89522: PUSH
89523: LD_EXP 143
89527: PPUSH
89528: LD_VAR 0 6
89532: PPUSH
89533: LD_EXP 143
89537: PUSH
89538: LD_VAR 0 6
89542: ARRAY
89543: PPUSH
89544: LD_VAR 0 5
89548: PPUSH
89549: CALL_OW 3
89553: PPUSH
89554: CALL_OW 1
89558: ST_TO_ADDR
// exit ;
89559: POP
89560: POP
89561: GO 89754
// end ; end ;
89563: GO 89403
89565: POP
89566: POP
// for i := minerMinesList [ index ] downto 1 do
89567: LD_ADDR_VAR 0 5
89571: PUSH
89572: DOUBLE
89573: LD_EXP 143
89577: PUSH
89578: LD_VAR 0 6
89582: ARRAY
89583: INC
89584: ST_TO_ADDR
89585: LD_INT 1
89587: PUSH
89588: FOR_DOWNTO
89589: IFFALSE 89752
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
89591: LD_EXP 143
89595: PUSH
89596: LD_VAR 0 6
89600: ARRAY
89601: PUSH
89602: LD_VAR 0 5
89606: ARRAY
89607: PUSH
89608: LD_INT 1
89610: ARRAY
89611: PPUSH
89612: LD_EXP 143
89616: PUSH
89617: LD_VAR 0 6
89621: ARRAY
89622: PUSH
89623: LD_VAR 0 5
89627: ARRAY
89628: PUSH
89629: LD_INT 2
89631: ARRAY
89632: PPUSH
89633: LD_VAR 0 2
89637: PPUSH
89638: LD_VAR 0 3
89642: PPUSH
89643: CALL_OW 298
89647: PUSH
89648: LD_INT 6
89650: LESS
89651: IFFALSE 89750
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89653: LD_EXP 143
89657: PUSH
89658: LD_VAR 0 6
89662: ARRAY
89663: PUSH
89664: LD_VAR 0 5
89668: ARRAY
89669: PUSH
89670: LD_INT 1
89672: ARRAY
89673: PPUSH
89674: LD_EXP 143
89678: PUSH
89679: LD_VAR 0 6
89683: ARRAY
89684: PUSH
89685: LD_VAR 0 5
89689: ARRAY
89690: PUSH
89691: LD_INT 2
89693: ARRAY
89694: PPUSH
89695: LD_VAR 0 1
89699: PPUSH
89700: CALL_OW 255
89704: PPUSH
89705: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89709: LD_ADDR_EXP 143
89713: PUSH
89714: LD_EXP 143
89718: PPUSH
89719: LD_VAR 0 6
89723: PPUSH
89724: LD_EXP 143
89728: PUSH
89729: LD_VAR 0 6
89733: ARRAY
89734: PPUSH
89735: LD_VAR 0 5
89739: PPUSH
89740: CALL_OW 3
89744: PPUSH
89745: CALL_OW 1
89749: ST_TO_ADDR
// end ; end ;
89750: GO 89588
89752: POP
89753: POP
// end ;
89754: LD_VAR 0 4
89758: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
89759: LD_INT 0
89761: PPUSH
89762: PPUSH
89763: PPUSH
89764: PPUSH
89765: PPUSH
89766: PPUSH
89767: PPUSH
89768: PPUSH
89769: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
89770: LD_VAR 0 1
89774: PPUSH
89775: CALL_OW 264
89779: PUSH
89780: LD_INT 81
89782: EQUAL
89783: NOT
89784: PUSH
89785: LD_VAR 0 1
89789: PUSH
89790: LD_EXP 142
89794: IN
89795: NOT
89796: OR
89797: IFFALSE 89801
// exit ;
89799: GO 90123
// index := GetElementIndex ( minersList , unit ) ;
89801: LD_ADDR_VAR 0 6
89805: PUSH
89806: LD_EXP 142
89810: PPUSH
89811: LD_VAR 0 1
89815: PPUSH
89816: CALL 33755 0 2
89820: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
89821: LD_ADDR_VAR 0 8
89825: PUSH
89826: LD_EXP 144
89830: PUSH
89831: LD_EXP 143
89835: PUSH
89836: LD_VAR 0 6
89840: ARRAY
89841: MINUS
89842: ST_TO_ADDR
// if not minesFreeAmount then
89843: LD_VAR 0 8
89847: NOT
89848: IFFALSE 89852
// exit ;
89850: GO 90123
// tmp := [ ] ;
89852: LD_ADDR_VAR 0 7
89856: PUSH
89857: EMPTY
89858: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
89859: LD_ADDR_VAR 0 5
89863: PUSH
89864: DOUBLE
89865: LD_INT 1
89867: DEC
89868: ST_TO_ADDR
89869: LD_VAR 0 8
89873: PUSH
89874: FOR_TO
89875: IFFALSE 90070
// begin _d := rand ( 0 , 5 ) ;
89877: LD_ADDR_VAR 0 11
89881: PUSH
89882: LD_INT 0
89884: PPUSH
89885: LD_INT 5
89887: PPUSH
89888: CALL_OW 12
89892: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
89893: LD_ADDR_VAR 0 12
89897: PUSH
89898: LD_INT 2
89900: PPUSH
89901: LD_INT 6
89903: PPUSH
89904: CALL_OW 12
89908: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
89909: LD_ADDR_VAR 0 9
89913: PUSH
89914: LD_VAR 0 2
89918: PPUSH
89919: LD_VAR 0 11
89923: PPUSH
89924: LD_VAR 0 12
89928: PPUSH
89929: CALL_OW 272
89933: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
89934: LD_ADDR_VAR 0 10
89938: PUSH
89939: LD_VAR 0 3
89943: PPUSH
89944: LD_VAR 0 11
89948: PPUSH
89949: LD_VAR 0 12
89953: PPUSH
89954: CALL_OW 273
89958: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
89959: LD_VAR 0 9
89963: PPUSH
89964: LD_VAR 0 10
89968: PPUSH
89969: CALL_OW 488
89973: PUSH
89974: LD_VAR 0 9
89978: PUSH
89979: LD_VAR 0 10
89983: PUSH
89984: EMPTY
89985: LIST
89986: LIST
89987: PUSH
89988: LD_VAR 0 7
89992: IN
89993: NOT
89994: AND
89995: PUSH
89996: LD_VAR 0 9
90000: PPUSH
90001: LD_VAR 0 10
90005: PPUSH
90006: CALL_OW 458
90010: NOT
90011: AND
90012: IFFALSE 90054
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90014: LD_ADDR_VAR 0 7
90018: PUSH
90019: LD_VAR 0 7
90023: PPUSH
90024: LD_VAR 0 7
90028: PUSH
90029: LD_INT 1
90031: PLUS
90032: PPUSH
90033: LD_VAR 0 9
90037: PUSH
90038: LD_VAR 0 10
90042: PUSH
90043: EMPTY
90044: LIST
90045: LIST
90046: PPUSH
90047: CALL_OW 1
90051: ST_TO_ADDR
90052: GO 90068
// i := i - 1 ;
90054: LD_ADDR_VAR 0 5
90058: PUSH
90059: LD_VAR 0 5
90063: PUSH
90064: LD_INT 1
90066: MINUS
90067: ST_TO_ADDR
// end ;
90068: GO 89874
90070: POP
90071: POP
// for i in tmp do
90072: LD_ADDR_VAR 0 5
90076: PUSH
90077: LD_VAR 0 7
90081: PUSH
90082: FOR_IN
90083: IFFALSE 90121
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
90085: LD_VAR 0 1
90089: PPUSH
90090: LD_VAR 0 5
90094: PUSH
90095: LD_INT 1
90097: ARRAY
90098: PPUSH
90099: LD_VAR 0 5
90103: PUSH
90104: LD_INT 2
90106: ARRAY
90107: PPUSH
90108: CALL 89067 0 3
90112: NOT
90113: IFFALSE 90119
// exit ;
90115: POP
90116: POP
90117: GO 90123
90119: GO 90082
90121: POP
90122: POP
// end ;
90123: LD_VAR 0 4
90127: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
90128: LD_INT 0
90130: PPUSH
90131: PPUSH
90132: PPUSH
90133: PPUSH
90134: PPUSH
90135: PPUSH
90136: PPUSH
// if not GetClass ( unit ) = class_sniper then
90137: LD_VAR 0 1
90141: PPUSH
90142: CALL_OW 257
90146: PUSH
90147: LD_INT 5
90149: EQUAL
90150: NOT
90151: IFFALSE 90155
// exit ;
90153: GO 90543
// dist := 8 ;
90155: LD_ADDR_VAR 0 5
90159: PUSH
90160: LD_INT 8
90162: ST_TO_ADDR
// viewRange := 12 ;
90163: LD_ADDR_VAR 0 7
90167: PUSH
90168: LD_INT 12
90170: ST_TO_ADDR
// side := GetSide ( unit ) ;
90171: LD_ADDR_VAR 0 6
90175: PUSH
90176: LD_VAR 0 1
90180: PPUSH
90181: CALL_OW 255
90185: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
90186: LD_INT 61
90188: PPUSH
90189: LD_VAR 0 6
90193: PPUSH
90194: CALL_OW 321
90198: PUSH
90199: LD_INT 2
90201: EQUAL
90202: IFFALSE 90212
// viewRange := 16 ;
90204: LD_ADDR_VAR 0 7
90208: PUSH
90209: LD_INT 16
90211: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
90212: LD_VAR 0 1
90216: PPUSH
90217: LD_VAR 0 2
90221: PPUSH
90222: LD_VAR 0 3
90226: PPUSH
90227: CALL_OW 297
90231: PUSH
90232: LD_VAR 0 5
90236: GREATER
90237: IFFALSE 90316
// begin ComMoveXY ( unit , x , y ) ;
90239: LD_VAR 0 1
90243: PPUSH
90244: LD_VAR 0 2
90248: PPUSH
90249: LD_VAR 0 3
90253: PPUSH
90254: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90258: LD_INT 35
90260: PPUSH
90261: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90265: LD_VAR 0 1
90269: PPUSH
90270: LD_VAR 0 2
90274: PPUSH
90275: LD_VAR 0 3
90279: PPUSH
90280: CALL 65110 0 3
90284: NOT
90285: IFFALSE 90289
// exit ;
90287: GO 90543
// until GetDistUnitXY ( unit , x , y ) < dist ;
90289: LD_VAR 0 1
90293: PPUSH
90294: LD_VAR 0 2
90298: PPUSH
90299: LD_VAR 0 3
90303: PPUSH
90304: CALL_OW 297
90308: PUSH
90309: LD_VAR 0 5
90313: LESS
90314: IFFALSE 90258
// end ; ComTurnXY ( unit , x , y ) ;
90316: LD_VAR 0 1
90320: PPUSH
90321: LD_VAR 0 2
90325: PPUSH
90326: LD_VAR 0 3
90330: PPUSH
90331: CALL_OW 118
// wait ( 5 ) ;
90335: LD_INT 5
90337: PPUSH
90338: CALL_OW 67
// _d := GetDir ( unit ) ;
90342: LD_ADDR_VAR 0 10
90346: PUSH
90347: LD_VAR 0 1
90351: PPUSH
90352: CALL_OW 254
90356: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
90357: LD_ADDR_VAR 0 8
90361: PUSH
90362: LD_VAR 0 1
90366: PPUSH
90367: CALL_OW 250
90371: PPUSH
90372: LD_VAR 0 10
90376: PPUSH
90377: LD_VAR 0 5
90381: PPUSH
90382: CALL_OW 272
90386: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
90387: LD_ADDR_VAR 0 9
90391: PUSH
90392: LD_VAR 0 1
90396: PPUSH
90397: CALL_OW 251
90401: PPUSH
90402: LD_VAR 0 10
90406: PPUSH
90407: LD_VAR 0 5
90411: PPUSH
90412: CALL_OW 273
90416: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90417: LD_VAR 0 8
90421: PPUSH
90422: LD_VAR 0 9
90426: PPUSH
90427: CALL_OW 488
90431: NOT
90432: IFFALSE 90436
// exit ;
90434: GO 90543
// ComAnimCustom ( unit , 1 ) ;
90436: LD_VAR 0 1
90440: PPUSH
90441: LD_INT 1
90443: PPUSH
90444: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
90448: LD_VAR 0 8
90452: PPUSH
90453: LD_VAR 0 9
90457: PPUSH
90458: LD_VAR 0 6
90462: PPUSH
90463: LD_VAR 0 7
90467: PPUSH
90468: CALL_OW 330
// repeat wait ( 1 ) ;
90472: LD_INT 1
90474: PPUSH
90475: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
90479: LD_VAR 0 1
90483: PPUSH
90484: CALL_OW 316
90488: PUSH
90489: LD_VAR 0 1
90493: PPUSH
90494: CALL_OW 314
90498: OR
90499: PUSH
90500: LD_VAR 0 1
90504: PPUSH
90505: CALL_OW 302
90509: NOT
90510: OR
90511: PUSH
90512: LD_VAR 0 1
90516: PPUSH
90517: CALL_OW 301
90521: OR
90522: IFFALSE 90472
// RemoveSeeing ( _x , _y , side ) ;
90524: LD_VAR 0 8
90528: PPUSH
90529: LD_VAR 0 9
90533: PPUSH
90534: LD_VAR 0 6
90538: PPUSH
90539: CALL_OW 331
// end ; end_of_file
90543: LD_VAR 0 4
90547: RET
// export function StopOriginalMusic ; begin
90548: LD_INT 0
90550: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
90551: LD_STRING OW_FORCEMUSICDISABLE(true);
90553: PPUSH
90554: CALL_OW 559
// end ;
90558: LD_VAR 0 1
90562: RET
// export function PlayOriginalMusic ; begin
90563: LD_INT 0
90565: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
90566: LD_STRING OW_FORCEMUSICDISABLE(false);
90568: PPUSH
90569: CALL_OW 559
// end ;
90573: LD_VAR 0 1
90577: RET
// export function PlayCustomMusic ( track , callback ) ; begin
90578: LD_INT 0
90580: PPUSH
// StopOriginalMusic ;
90581: CALL 90548 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
90585: LD_STRING playMusic("
90587: PUSH
90588: LD_VAR 0 1
90592: STR
90593: PUSH
90594: LD_STRING ", "
90596: STR
90597: PUSH
90598: LD_VAR 0 2
90602: STR
90603: PUSH
90604: LD_STRING ")
90606: STR
90607: PPUSH
90608: CALL_OW 559
// end ;
90612: LD_VAR 0 3
90616: RET
